
SD_Card_File_System.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001dfc4  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003728  0801e18c  0801e18c  0002e18c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080218b4  080218b4  00040054  2**0
                  CONTENTS
  4 .ARM          00000008  080218b4  080218b4  000318b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080218bc  080218bc  00040054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080218bc  080218bc  000318bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080218c4  080218c4  000318c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000054  20000000  080218c8  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00020548  20000058  0802191c  00040058  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200205a0  0802191c  000405a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040054  2**0
                  CONTENTS, READONLY
 12 .debug_info   000bb039  00000000  00000000  00040084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000f779  00000000  00000000  000fb0bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002430  00000000  00000000  0010a838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000123c8  00000000  00000000  0010cc68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000e903  00000000  00000000  0011f030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00078376  00000000  00000000  0012d933  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00119c83  00000000  00000000  001a5ca9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  002bf92c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008788  00000000  00000000  002bf980  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000730eb  00000000  00000000  002c8108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000058 	.word	0x20000058
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0801e174 	.word	0x0801e174

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	2000005c 	.word	0x2000005c
 8000204:	0801e174 	.word	0x0801e174

08000208 <strcmp>:
 8000208:	f810 2b01 	ldrb.w	r2, [r0], #1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000210:	2a01      	cmp	r2, #1
 8000212:	bf28      	it	cs
 8000214:	429a      	cmpcs	r2, r3
 8000216:	d0f7      	beq.n	8000208 <strcmp>
 8000218:	1ad0      	subs	r0, r2, r3
 800021a:	4770      	bx	lr

0800021c <strlen>:
 800021c:	4603      	mov	r3, r0
 800021e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000222:	2a00      	cmp	r2, #0
 8000224:	d1fb      	bne.n	800021e <strlen+0x2>
 8000226:	1a18      	subs	r0, r3, r0
 8000228:	3801      	subs	r0, #1
 800022a:	4770      	bx	lr

0800022c <__aeabi_uldivmod>:
 800022c:	b953      	cbnz	r3, 8000244 <__aeabi_uldivmod+0x18>
 800022e:	b94a      	cbnz	r2, 8000244 <__aeabi_uldivmod+0x18>
 8000230:	2900      	cmp	r1, #0
 8000232:	bf08      	it	eq
 8000234:	2800      	cmpeq	r0, #0
 8000236:	bf1c      	itt	ne
 8000238:	f04f 31ff 	movne.w	r1, #4294967295
 800023c:	f04f 30ff 	movne.w	r0, #4294967295
 8000240:	f000 b96e 	b.w	8000520 <__aeabi_idiv0>
 8000244:	f1ad 0c08 	sub.w	ip, sp, #8
 8000248:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800024c:	f000 f806 	bl	800025c <__udivmoddi4>
 8000250:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000254:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000258:	b004      	add	sp, #16
 800025a:	4770      	bx	lr

0800025c <__udivmoddi4>:
 800025c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000260:	9d08      	ldr	r5, [sp, #32]
 8000262:	4604      	mov	r4, r0
 8000264:	468c      	mov	ip, r1
 8000266:	2b00      	cmp	r3, #0
 8000268:	f040 8083 	bne.w	8000372 <__udivmoddi4+0x116>
 800026c:	428a      	cmp	r2, r1
 800026e:	4617      	mov	r7, r2
 8000270:	d947      	bls.n	8000302 <__udivmoddi4+0xa6>
 8000272:	fab2 f282 	clz	r2, r2
 8000276:	b142      	cbz	r2, 800028a <__udivmoddi4+0x2e>
 8000278:	f1c2 0020 	rsb	r0, r2, #32
 800027c:	fa24 f000 	lsr.w	r0, r4, r0
 8000280:	4091      	lsls	r1, r2
 8000282:	4097      	lsls	r7, r2
 8000284:	ea40 0c01 	orr.w	ip, r0, r1
 8000288:	4094      	lsls	r4, r2
 800028a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800028e:	0c23      	lsrs	r3, r4, #16
 8000290:	fbbc f6f8 	udiv	r6, ip, r8
 8000294:	fa1f fe87 	uxth.w	lr, r7
 8000298:	fb08 c116 	mls	r1, r8, r6, ip
 800029c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002a0:	fb06 f10e 	mul.w	r1, r6, lr
 80002a4:	4299      	cmp	r1, r3
 80002a6:	d909      	bls.n	80002bc <__udivmoddi4+0x60>
 80002a8:	18fb      	adds	r3, r7, r3
 80002aa:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ae:	f080 8119 	bcs.w	80004e4 <__udivmoddi4+0x288>
 80002b2:	4299      	cmp	r1, r3
 80002b4:	f240 8116 	bls.w	80004e4 <__udivmoddi4+0x288>
 80002b8:	3e02      	subs	r6, #2
 80002ba:	443b      	add	r3, r7
 80002bc:	1a5b      	subs	r3, r3, r1
 80002be:	b2a4      	uxth	r4, r4
 80002c0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002c4:	fb08 3310 	mls	r3, r8, r0, r3
 80002c8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80002d0:	45a6      	cmp	lr, r4
 80002d2:	d909      	bls.n	80002e8 <__udivmoddi4+0x8c>
 80002d4:	193c      	adds	r4, r7, r4
 80002d6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002da:	f080 8105 	bcs.w	80004e8 <__udivmoddi4+0x28c>
 80002de:	45a6      	cmp	lr, r4
 80002e0:	f240 8102 	bls.w	80004e8 <__udivmoddi4+0x28c>
 80002e4:	3802      	subs	r0, #2
 80002e6:	443c      	add	r4, r7
 80002e8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ec:	eba4 040e 	sub.w	r4, r4, lr
 80002f0:	2600      	movs	r6, #0
 80002f2:	b11d      	cbz	r5, 80002fc <__udivmoddi4+0xa0>
 80002f4:	40d4      	lsrs	r4, r2
 80002f6:	2300      	movs	r3, #0
 80002f8:	e9c5 4300 	strd	r4, r3, [r5]
 80002fc:	4631      	mov	r1, r6
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	b902      	cbnz	r2, 8000306 <__udivmoddi4+0xaa>
 8000304:	deff      	udf	#255	; 0xff
 8000306:	fab2 f282 	clz	r2, r2
 800030a:	2a00      	cmp	r2, #0
 800030c:	d150      	bne.n	80003b0 <__udivmoddi4+0x154>
 800030e:	1bcb      	subs	r3, r1, r7
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f f887 	uxth.w	r8, r7
 8000318:	2601      	movs	r6, #1
 800031a:	fbb3 fcfe 	udiv	ip, r3, lr
 800031e:	0c21      	lsrs	r1, r4, #16
 8000320:	fb0e 331c 	mls	r3, lr, ip, r3
 8000324:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000328:	fb08 f30c 	mul.w	r3, r8, ip
 800032c:	428b      	cmp	r3, r1
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0xe4>
 8000330:	1879      	adds	r1, r7, r1
 8000332:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0xe2>
 8000338:	428b      	cmp	r3, r1
 800033a:	f200 80e9 	bhi.w	8000510 <__udivmoddi4+0x2b4>
 800033e:	4684      	mov	ip, r0
 8000340:	1ac9      	subs	r1, r1, r3
 8000342:	b2a3      	uxth	r3, r4
 8000344:	fbb1 f0fe 	udiv	r0, r1, lr
 8000348:	fb0e 1110 	mls	r1, lr, r0, r1
 800034c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000350:	fb08 f800 	mul.w	r8, r8, r0
 8000354:	45a0      	cmp	r8, r4
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0x10c>
 8000358:	193c      	adds	r4, r7, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x10a>
 8000360:	45a0      	cmp	r8, r4
 8000362:	f200 80d9 	bhi.w	8000518 <__udivmoddi4+0x2bc>
 8000366:	4618      	mov	r0, r3
 8000368:	eba4 0408 	sub.w	r4, r4, r8
 800036c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000370:	e7bf      	b.n	80002f2 <__udivmoddi4+0x96>
 8000372:	428b      	cmp	r3, r1
 8000374:	d909      	bls.n	800038a <__udivmoddi4+0x12e>
 8000376:	2d00      	cmp	r5, #0
 8000378:	f000 80b1 	beq.w	80004de <__udivmoddi4+0x282>
 800037c:	2600      	movs	r6, #0
 800037e:	e9c5 0100 	strd	r0, r1, [r5]
 8000382:	4630      	mov	r0, r6
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	fab3 f683 	clz	r6, r3
 800038e:	2e00      	cmp	r6, #0
 8000390:	d14a      	bne.n	8000428 <__udivmoddi4+0x1cc>
 8000392:	428b      	cmp	r3, r1
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0x140>
 8000396:	4282      	cmp	r2, r0
 8000398:	f200 80b8 	bhi.w	800050c <__udivmoddi4+0x2b0>
 800039c:	1a84      	subs	r4, r0, r2
 800039e:	eb61 0103 	sbc.w	r1, r1, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	468c      	mov	ip, r1
 80003a6:	2d00      	cmp	r5, #0
 80003a8:	d0a8      	beq.n	80002fc <__udivmoddi4+0xa0>
 80003aa:	e9c5 4c00 	strd	r4, ip, [r5]
 80003ae:	e7a5      	b.n	80002fc <__udivmoddi4+0xa0>
 80003b0:	f1c2 0320 	rsb	r3, r2, #32
 80003b4:	fa20 f603 	lsr.w	r6, r0, r3
 80003b8:	4097      	lsls	r7, r2
 80003ba:	fa01 f002 	lsl.w	r0, r1, r2
 80003be:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c2:	40d9      	lsrs	r1, r3
 80003c4:	4330      	orrs	r0, r6
 80003c6:	0c03      	lsrs	r3, r0, #16
 80003c8:	fbb1 f6fe 	udiv	r6, r1, lr
 80003cc:	fa1f f887 	uxth.w	r8, r7
 80003d0:	fb0e 1116 	mls	r1, lr, r6, r1
 80003d4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003d8:	fb06 f108 	mul.w	r1, r6, r8
 80003dc:	4299      	cmp	r1, r3
 80003de:	fa04 f402 	lsl.w	r4, r4, r2
 80003e2:	d909      	bls.n	80003f8 <__udivmoddi4+0x19c>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f106 3cff 	add.w	ip, r6, #4294967295
 80003ea:	f080 808d 	bcs.w	8000508 <__udivmoddi4+0x2ac>
 80003ee:	4299      	cmp	r1, r3
 80003f0:	f240 808a 	bls.w	8000508 <__udivmoddi4+0x2ac>
 80003f4:	3e02      	subs	r6, #2
 80003f6:	443b      	add	r3, r7
 80003f8:	1a5b      	subs	r3, r3, r1
 80003fa:	b281      	uxth	r1, r0
 80003fc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000400:	fb0e 3310 	mls	r3, lr, r0, r3
 8000404:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000408:	fb00 f308 	mul.w	r3, r0, r8
 800040c:	428b      	cmp	r3, r1
 800040e:	d907      	bls.n	8000420 <__udivmoddi4+0x1c4>
 8000410:	1879      	adds	r1, r7, r1
 8000412:	f100 3cff 	add.w	ip, r0, #4294967295
 8000416:	d273      	bcs.n	8000500 <__udivmoddi4+0x2a4>
 8000418:	428b      	cmp	r3, r1
 800041a:	d971      	bls.n	8000500 <__udivmoddi4+0x2a4>
 800041c:	3802      	subs	r0, #2
 800041e:	4439      	add	r1, r7
 8000420:	1acb      	subs	r3, r1, r3
 8000422:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000426:	e778      	b.n	800031a <__udivmoddi4+0xbe>
 8000428:	f1c6 0c20 	rsb	ip, r6, #32
 800042c:	fa03 f406 	lsl.w	r4, r3, r6
 8000430:	fa22 f30c 	lsr.w	r3, r2, ip
 8000434:	431c      	orrs	r4, r3
 8000436:	fa20 f70c 	lsr.w	r7, r0, ip
 800043a:	fa01 f306 	lsl.w	r3, r1, r6
 800043e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000442:	fa21 f10c 	lsr.w	r1, r1, ip
 8000446:	431f      	orrs	r7, r3
 8000448:	0c3b      	lsrs	r3, r7, #16
 800044a:	fbb1 f9fe 	udiv	r9, r1, lr
 800044e:	fa1f f884 	uxth.w	r8, r4
 8000452:	fb0e 1119 	mls	r1, lr, r9, r1
 8000456:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800045a:	fb09 fa08 	mul.w	sl, r9, r8
 800045e:	458a      	cmp	sl, r1
 8000460:	fa02 f206 	lsl.w	r2, r2, r6
 8000464:	fa00 f306 	lsl.w	r3, r0, r6
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x220>
 800046a:	1861      	adds	r1, r4, r1
 800046c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000470:	d248      	bcs.n	8000504 <__udivmoddi4+0x2a8>
 8000472:	458a      	cmp	sl, r1
 8000474:	d946      	bls.n	8000504 <__udivmoddi4+0x2a8>
 8000476:	f1a9 0902 	sub.w	r9, r9, #2
 800047a:	4421      	add	r1, r4
 800047c:	eba1 010a 	sub.w	r1, r1, sl
 8000480:	b2bf      	uxth	r7, r7
 8000482:	fbb1 f0fe 	udiv	r0, r1, lr
 8000486:	fb0e 1110 	mls	r1, lr, r0, r1
 800048a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800048e:	fb00 f808 	mul.w	r8, r0, r8
 8000492:	45b8      	cmp	r8, r7
 8000494:	d907      	bls.n	80004a6 <__udivmoddi4+0x24a>
 8000496:	19e7      	adds	r7, r4, r7
 8000498:	f100 31ff 	add.w	r1, r0, #4294967295
 800049c:	d22e      	bcs.n	80004fc <__udivmoddi4+0x2a0>
 800049e:	45b8      	cmp	r8, r7
 80004a0:	d92c      	bls.n	80004fc <__udivmoddi4+0x2a0>
 80004a2:	3802      	subs	r0, #2
 80004a4:	4427      	add	r7, r4
 80004a6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004aa:	eba7 0708 	sub.w	r7, r7, r8
 80004ae:	fba0 8902 	umull	r8, r9, r0, r2
 80004b2:	454f      	cmp	r7, r9
 80004b4:	46c6      	mov	lr, r8
 80004b6:	4649      	mov	r1, r9
 80004b8:	d31a      	bcc.n	80004f0 <__udivmoddi4+0x294>
 80004ba:	d017      	beq.n	80004ec <__udivmoddi4+0x290>
 80004bc:	b15d      	cbz	r5, 80004d6 <__udivmoddi4+0x27a>
 80004be:	ebb3 020e 	subs.w	r2, r3, lr
 80004c2:	eb67 0701 	sbc.w	r7, r7, r1
 80004c6:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004ca:	40f2      	lsrs	r2, r6
 80004cc:	ea4c 0202 	orr.w	r2, ip, r2
 80004d0:	40f7      	lsrs	r7, r6
 80004d2:	e9c5 2700 	strd	r2, r7, [r5]
 80004d6:	2600      	movs	r6, #0
 80004d8:	4631      	mov	r1, r6
 80004da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004de:	462e      	mov	r6, r5
 80004e0:	4628      	mov	r0, r5
 80004e2:	e70b      	b.n	80002fc <__udivmoddi4+0xa0>
 80004e4:	4606      	mov	r6, r0
 80004e6:	e6e9      	b.n	80002bc <__udivmoddi4+0x60>
 80004e8:	4618      	mov	r0, r3
 80004ea:	e6fd      	b.n	80002e8 <__udivmoddi4+0x8c>
 80004ec:	4543      	cmp	r3, r8
 80004ee:	d2e5      	bcs.n	80004bc <__udivmoddi4+0x260>
 80004f0:	ebb8 0e02 	subs.w	lr, r8, r2
 80004f4:	eb69 0104 	sbc.w	r1, r9, r4
 80004f8:	3801      	subs	r0, #1
 80004fa:	e7df      	b.n	80004bc <__udivmoddi4+0x260>
 80004fc:	4608      	mov	r0, r1
 80004fe:	e7d2      	b.n	80004a6 <__udivmoddi4+0x24a>
 8000500:	4660      	mov	r0, ip
 8000502:	e78d      	b.n	8000420 <__udivmoddi4+0x1c4>
 8000504:	4681      	mov	r9, r0
 8000506:	e7b9      	b.n	800047c <__udivmoddi4+0x220>
 8000508:	4666      	mov	r6, ip
 800050a:	e775      	b.n	80003f8 <__udivmoddi4+0x19c>
 800050c:	4630      	mov	r0, r6
 800050e:	e74a      	b.n	80003a6 <__udivmoddi4+0x14a>
 8000510:	f1ac 0c02 	sub.w	ip, ip, #2
 8000514:	4439      	add	r1, r7
 8000516:	e713      	b.n	8000340 <__udivmoddi4+0xe4>
 8000518:	3802      	subs	r0, #2
 800051a:	443c      	add	r4, r7
 800051c:	e724      	b.n	8000368 <__udivmoddi4+0x10c>
 800051e:	bf00      	nop

08000520 <__aeabi_idiv0>:
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <_ZN9displayerC1Ev>:
#define LCD_DISP_STATE(x) \
	HAL_GPIO_WritePin(GPIOI, GPIO_PIN_12, x)

#define FB_START_ADDRRESS ((uint32_t)0xC0000000)

displayer::displayer()
 8000524:	b480      	push	{r7}
 8000526:	b083      	sub	sp, #12
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
{
	; /*TODO : It may be filled later.*/
}
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	4618      	mov	r0, r3
 8000530:	370c      	adds	r7, #12
 8000532:	46bd      	mov	sp, r7
 8000534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000538:	4770      	bx	lr
	...

0800053c <_ZN9displayer4initEv>:
 * @brief  = This constructor initialises first layer.
 */


void displayer::init()
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
	LCD_BACKLIGHT_STATE(GPIO_PIN_SET);
 8000544:	2201      	movs	r2, #1
 8000546:	2108      	movs	r1, #8
 8000548:	4825      	ldr	r0, [pc, #148]	; (80005e0 <_ZN9displayer4initEv+0xa4>)
 800054a:	f01b fff7 	bl	801c53c <HAL_GPIO_WritePin>
	LCD_DISP_STATE(GPIO_PIN_SET);
 800054e:	2201      	movs	r2, #1
 8000550:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000554:	4823      	ldr	r0, [pc, #140]	; (80005e4 <_ZN9displayer4initEv+0xa8>)
 8000556:	f01b fff1 	bl	801c53c <HAL_GPIO_WritePin>

	lcd_handle.Instance = LTDC;
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	4a22      	ldr	r2, [pc, #136]	; (80005e8 <_ZN9displayer4initEv+0xac>)
 800055e:	601a      	str	r2, [r3, #0]
	lcd_handle.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	2200      	movs	r2, #0
 8000564:	605a      	str	r2, [r3, #4]
	lcd_handle.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	2200      	movs	r2, #0
 800056a:	609a      	str	r2, [r3, #8]
	lcd_handle.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	2200      	movs	r2, #0
 8000570:	60da      	str	r2, [r3, #12]
	lcd_handle.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	2200      	movs	r2, #0
 8000576:	611a      	str	r2, [r3, #16]
	lcd_handle.Init.HorizontalSync = (DISPLAYER_HSYNC - 1);
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	2228      	movs	r2, #40	; 0x28
 800057c:	615a      	str	r2, [r3, #20]
	lcd_handle.Init.VerticalSync = (DISPLAYER_VSYNC - 1);
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	2209      	movs	r2, #9
 8000582:	619a      	str	r2, [r3, #24]
	lcd_handle.Init.AccumulatedHBP = (DISPLAYER_HSYNC + DISPLAYER_HBP - 1);
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	2235      	movs	r2, #53	; 0x35
 8000588:	61da      	str	r2, [r3, #28]
	lcd_handle.Init.AccumulatedVBP = (DISPLAYER_VSYNC + DISPLAYER_VBP - 1);
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	220b      	movs	r2, #11
 800058e:	621a      	str	r2, [r3, #32]
	lcd_handle.Init.AccumulatedActiveH = (DISPLAYER_HEIGHT + DISPLAYER_VSYNC
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	f240 121b 	movw	r2, #283	; 0x11b
 8000596:	629a      	str	r2, [r3, #40]	; 0x28
			+ DISPLAYER_VBP - 1);
	lcd_handle.Init.AccumulatedActiveW = (DISPLAYER_WIDTH + DISPLAYER_HSYNC
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	f240 2215 	movw	r2, #533	; 0x215
 800059e:	625a      	str	r2, [r3, #36]	; 0x24
			+ DISPLAYER_HBP - 1);
	lcd_handle.Init.TotalHeigh = (DISPLAYER_HEIGHT + DISPLAYER_VSYNC
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	f240 121d 	movw	r2, #285	; 0x11d
 80005a6:	631a      	str	r2, [r3, #48]	; 0x30
			+ DISPLAYER_VBP + DISPLAYER_VFP - 1);
	lcd_handle.Init.TotalWidth = (DISPLAYER_WIDTH + DISPLAYER_HSYNC
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	f240 2235 	movw	r2, #565	; 0x235
 80005ae:	62da      	str	r2, [r3, #44]	; 0x2c
			+ DISPLAYER_HBP + DISPLAYER_HFP - 1);
	lcd_handle.Init.Backcolor.Blue = 0;
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	2200      	movs	r2, #0
 80005b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	lcd_handle.Init.Backcolor.Green = 0;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	2200      	movs	r2, #0
 80005bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	lcd_handle.Init.Backcolor.Red = 0;
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	2200      	movs	r2, #0
 80005c4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

	HAL_LTDC_Init(&lcd_handle);
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	4618      	mov	r0, r3
 80005cc:	f01c fa5c 	bl	801ca88 <HAL_LTDC_Init>

	this->config_layer();
 80005d0:	6878      	ldr	r0, [r7, #4]
 80005d2:	f000 f80b 	bl	80005ec <_ZN9displayer12config_layerEv>

}
 80005d6:	bf00      	nop
 80005d8:	3708      	adds	r7, #8
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	40022800 	.word	0x40022800
 80005e4:	40022000 	.word	0x40022000
 80005e8:	40016800 	.word	0x40016800

080005ec <_ZN9displayer12config_layerEv>:

void displayer::config_layer()
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
	lcd_handle.LayerCfg[0].WindowX0 = 0;
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	2200      	movs	r2, #0
 80005f8:	639a      	str	r2, [r3, #56]	; 0x38
	lcd_handle.LayerCfg[0].WindowX1 = DISPLAYER_WIDTH;
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000600:	63da      	str	r2, [r3, #60]	; 0x3c
	lcd_handle.LayerCfg[0].WindowY0 = 0;
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	2200      	movs	r2, #0
 8000606:	641a      	str	r2, [r3, #64]	; 0x40
	lcd_handle.LayerCfg[0].WindowY1 = DISPLAYER_HEIGHT;
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	f44f 7288 	mov.w	r2, #272	; 0x110
 800060e:	645a      	str	r2, [r3, #68]	; 0x44
	lcd_handle.LayerCfg[0].PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	2200      	movs	r2, #0
 8000614:	649a      	str	r2, [r3, #72]	; 0x48
	lcd_handle.LayerCfg[0].Alpha = 255;
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	22ff      	movs	r2, #255	; 0xff
 800061a:	64da      	str	r2, [r3, #76]	; 0x4c
	lcd_handle.LayerCfg[0].Alpha0 = 0;
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	2200      	movs	r2, #0
 8000620:	651a      	str	r2, [r3, #80]	; 0x50
	lcd_handle.LayerCfg[0].BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8000628:	655a      	str	r2, [r3, #84]	; 0x54
	lcd_handle.LayerCfg[0].BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	2207      	movs	r2, #7
 800062e:	659a      	str	r2, [r3, #88]	; 0x58
	lcd_handle.LayerCfg[0].FBStartAdress = (uint32_t)0xC0000000;
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 8000636:	65da      	str	r2, [r3, #92]	; 0x5c
	lcd_handle.LayerCfg[0].ImageWidth = DISPLAYER_WIDTH;
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800063e:	661a      	str	r2, [r3, #96]	; 0x60
	lcd_handle.LayerCfg[0].ImageHeight = DISPLAYER_HEIGHT;
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	f44f 7288 	mov.w	r2, #272	; 0x110
 8000646:	665a      	str	r2, [r3, #100]	; 0x64
	lcd_handle.LayerCfg[0].Backcolor.Blue = 0;
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	2200      	movs	r2, #0
 800064c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	lcd_handle.LayerCfg[0].Backcolor.Green = 0;
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	2200      	movs	r2, #0
 8000654:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
	lcd_handle.LayerCfg[0].Backcolor.Red = 0;
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	2200      	movs	r2, #0
 800065c:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
    HAL_LTDC_ConfigLayer(&lcd_handle, &lcd_handle.LayerCfg[0], 1);
 8000660:	6878      	ldr	r0, [r7, #4]
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	3338      	adds	r3, #56	; 0x38
 8000666:	2201      	movs	r2, #1
 8000668:	4619      	mov	r1, r3
 800066a:	f01c fa81 	bl	801cb70 <HAL_LTDC_ConfigLayer>
	HAL_LTDC_EnableDither(&lcd_handle);
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	4618      	mov	r0, r3
 8000672:	f01c fb41 	bl	801ccf8 <HAL_LTDC_EnableDither>
}
 8000676:	bf00      	nop
 8000678:	3708      	adds	r7, #8
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}

0800067e <_ZN9displayer10draw_pixelEssm>:

void displayer::draw_pixel(int16_t x_pos, int16_t y_pos, uint32_t color)
{
 800067e:	b480      	push	{r7}
 8000680:	b085      	sub	sp, #20
 8000682:	af00      	add	r7, sp, #0
 8000684:	60f8      	str	r0, [r7, #12]
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	460b      	mov	r3, r1
 800068a:	817b      	strh	r3, [r7, #10]
 800068c:	4613      	mov	r3, r2
 800068e:	813b      	strh	r3, [r7, #8]
	*(volatile uint32_t *)(lcd_handle.LayerCfg[0].FBStartAdress+( 4 * (y_pos * lcd_handle.LayerCfg [0] .ImageWidth + x_pos))) = color;
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000694:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000698:	68f9      	ldr	r1, [r7, #12]
 800069a:	6e09      	ldr	r1, [r1, #96]	; 0x60
 800069c:	fb01 f103 	mul.w	r1, r1, r3
 80006a0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80006a4:	440b      	add	r3, r1
 80006a6:	009b      	lsls	r3, r3, #2
 80006a8:	4413      	add	r3, r2
 80006aa:	461a      	mov	r2, r3
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	6013      	str	r3, [r2, #0]
}
 80006b0:	bf00      	nop
 80006b2:	3714      	adds	r7, #20
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr

080006bc <_ZN13sdram_handlerC1Ev>:

class sdram_handler
{

public:
	sdram_handler()
 80006bc:	b480      	push	{r7}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
	{
	}
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	4618      	mov	r0, r3
 80006c8:	370c      	adds	r7, #12
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr
	...

080006d4 <_ZN20displayer_gui_driver8gui_initEv>:
#include "lvgl.h"

static displayer display;

void displayer_gui_driver::gui_init()
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b090      	sub	sp, #64	; 0x40
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
	static sdram_handler sdram;
 80006dc:	4b1f      	ldr	r3, [pc, #124]	; (800075c <_ZN20displayer_gui_driver8gui_initEv+0x88>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	f3bf 8f5b 	dmb	ish
 80006e4:	b2db      	uxtb	r3, r3
 80006e6:	f003 0301 	and.w	r3, r3, #1
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	bf0c      	ite	eq
 80006ee:	2301      	moveq	r3, #1
 80006f0:	2300      	movne	r3, #0
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d010      	beq.n	800071a <_ZN20displayer_gui_driver8gui_initEv+0x46>
 80006f8:	4818      	ldr	r0, [pc, #96]	; (800075c <_ZN20displayer_gui_driver8gui_initEv+0x88>)
 80006fa:	f01d fccf 	bl	801e09c <__cxa_guard_acquire>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	bf14      	ite	ne
 8000704:	2301      	movne	r3, #1
 8000706:	2300      	moveq	r3, #0
 8000708:	b2db      	uxtb	r3, r3
 800070a:	2b00      	cmp	r3, #0
 800070c:	d005      	beq.n	800071a <_ZN20displayer_gui_driver8gui_initEv+0x46>
 800070e:	4814      	ldr	r0, [pc, #80]	; (8000760 <_ZN20displayer_gui_driver8gui_initEv+0x8c>)
 8000710:	f7ff ffd4 	bl	80006bc <_ZN13sdram_handlerC1Ev>
 8000714:	4811      	ldr	r0, [pc, #68]	; (800075c <_ZN20displayer_gui_driver8gui_initEv+0x88>)
 8000716:	f01d fccd 	bl	801e0b4 <__cxa_guard_release>

	sdram.init();
 800071a:	4811      	ldr	r0, [pc, #68]	; (8000760 <_ZN20displayer_gui_driver8gui_initEv+0x8c>)
 800071c:	f000 f916 	bl	800094c <_ZN13sdram_handler4initEv>
	display.init();
 8000720:	4810      	ldr	r0, [pc, #64]	; (8000764 <_ZN20displayer_gui_driver8gui_initEv+0x90>)
 8000722:	f7ff ff0b 	bl	800053c <_ZN9displayer4initEv>

	lv_init();
 8000726:	f002 feef 	bl	8003508 <lv_init>

	static lv_disp_buf_t disp_buf;
	static lv_color_t buf[LV_HOR_RES_MAX * 50];

	lv_disp_buf_init(&disp_buf, buf, NULL, LV_HOR_RES_MAX * 50);
 800072a:	f645 53c0 	movw	r3, #24000	; 0x5dc0
 800072e:	2200      	movs	r2, #0
 8000730:	490d      	ldr	r1, [pc, #52]	; (8000768 <_ZN20displayer_gui_driver8gui_initEv+0x94>)
 8000732:	480e      	ldr	r0, [pc, #56]	; (800076c <_ZN20displayer_gui_driver8gui_initEv+0x98>)
 8000734:	f013 f81a 	bl	801376c <lv_disp_buf_init>

	lv_disp_drv_t disp_drv;
	lv_disp_drv_init(&disp_drv);
 8000738:	f107 030c 	add.w	r3, r7, #12
 800073c:	4618      	mov	r0, r3
 800073e:	f012 fff9 	bl	8013734 <lv_disp_drv_init>
	disp_drv.flush_cb = this->displayer_interface;
 8000742:	4b0b      	ldr	r3, [pc, #44]	; (8000770 <_ZN20displayer_gui_driver8gui_initEv+0x9c>)
 8000744:	61bb      	str	r3, [r7, #24]
	disp_drv.buffer = &disp_buf;
 8000746:	4b09      	ldr	r3, [pc, #36]	; (800076c <_ZN20displayer_gui_driver8gui_initEv+0x98>)
 8000748:	613b      	str	r3, [r7, #16]
	lv_disp_drv_register(&disp_drv);
 800074a:	f107 030c 	add.w	r3, r7, #12
 800074e:	4618      	mov	r0, r3
 8000750:	f013 f81a 	bl	8013788 <lv_disp_drv_register>

}
 8000754:	bf00      	nop
 8000756:	3740      	adds	r7, #64	; 0x40
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	20000154 	.word	0x20000154
 8000760:	2000011c 	.word	0x2000011c
 8000764:	20000074 	.word	0x20000074
 8000768:	2000017c 	.word	0x2000017c
 800076c:	20000158 	.word	0x20000158
 8000770:	08000775 	.word	0x08000775

08000774 <_ZN20displayer_gui_driver19displayer_interfaceEP11_disp_drv_tPK9lv_area_tP12lv_color32_t>:

void displayer_gui_driver::displayer_interface(lv_disp_drv_t *disp,const lv_area_t* area,lv_color_t* color_p)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b086      	sub	sp, #24
 8000778:	af00      	add	r7, sp, #0
 800077a:	60f8      	str	r0, [r7, #12]
 800077c:	60b9      	str	r1, [r7, #8]
 800077e:	607a      	str	r2, [r7, #4]
    int32_t x, y;

    for(y = area->y1; y <= area->y2; y++)
 8000780:	68bb      	ldr	r3, [r7, #8]
 8000782:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000786:	613b      	str	r3, [r7, #16]
 8000788:	68bb      	ldr	r3, [r7, #8]
 800078a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800078e:	461a      	mov	r2, r3
 8000790:	693b      	ldr	r3, [r7, #16]
 8000792:	4293      	cmp	r3, r2
 8000794:	dc1e      	bgt.n	80007d4 <_ZN20displayer_gui_driver19displayer_interfaceEP11_disp_drv_tPK9lv_area_tP12lv_color32_t+0x60>
    {
        for(x = area->x1; x <= area->x2; x++)
 8000796:	68bb      	ldr	r3, [r7, #8]
 8000798:	f9b3 3000 	ldrsh.w	r3, [r3]
 800079c:	617b      	str	r3, [r7, #20]
 800079e:	68bb      	ldr	r3, [r7, #8]
 80007a0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80007a4:	461a      	mov	r2, r3
 80007a6:	697b      	ldr	r3, [r7, #20]
 80007a8:	4293      	cmp	r3, r2
 80007aa:	dc0f      	bgt.n	80007cc <_ZN20displayer_gui_driver19displayer_interfaceEP11_disp_drv_tPK9lv_area_tP12lv_color32_t+0x58>
        {
        	display.draw_pixel(x, y, (uint32_t)color_p->full);
 80007ac:	697b      	ldr	r3, [r7, #20]
 80007ae:	b219      	sxth	r1, r3
 80007b0:	693b      	ldr	r3, [r7, #16]
 80007b2:	b21a      	sxth	r2, r3
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	480a      	ldr	r0, [pc, #40]	; (80007e4 <_ZN20displayer_gui_driver19displayer_interfaceEP11_disp_drv_tPK9lv_area_tP12lv_color32_t+0x70>)
 80007ba:	f7ff ff60 	bl	800067e <_ZN9displayer10draw_pixelEssm>
            color_p++;
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	3304      	adds	r3, #4
 80007c2:	607b      	str	r3, [r7, #4]
        for(x = area->x1; x <= area->x2; x++)
 80007c4:	697b      	ldr	r3, [r7, #20]
 80007c6:	3301      	adds	r3, #1
 80007c8:	617b      	str	r3, [r7, #20]
 80007ca:	e7e8      	b.n	800079e <_ZN20displayer_gui_driver19displayer_interfaceEP11_disp_drv_tPK9lv_area_tP12lv_color32_t+0x2a>
    for(y = area->y1; y <= area->y2; y++)
 80007cc:	693b      	ldr	r3, [r7, #16]
 80007ce:	3301      	adds	r3, #1
 80007d0:	613b      	str	r3, [r7, #16]
 80007d2:	e7d9      	b.n	8000788 <_ZN20displayer_gui_driver19displayer_interfaceEP11_disp_drv_tPK9lv_area_tP12lv_color32_t+0x14>
        }
    }

    lv_disp_flush_ready(disp);
 80007d4:	68f8      	ldr	r0, [r7, #12]
 80007d6:	f013 f8b5 	bl	8013944 <lv_disp_flush_ready>
}
 80007da:	bf00      	nop
 80007dc:	3718      	adds	r7, #24
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	20000074 	.word	0x20000074

080007e8 <_Z41__static_initialization_and_destruction_0ii>:
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
 80007f0:	6039      	str	r1, [r7, #0]
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	2b01      	cmp	r3, #1
 80007f6:	d107      	bne.n	8000808 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007fe:	4293      	cmp	r3, r2
 8000800:	d102      	bne.n	8000808 <_Z41__static_initialization_and_destruction_0ii+0x20>
static displayer display;
 8000802:	4803      	ldr	r0, [pc, #12]	; (8000810 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8000804:	f7ff fe8e 	bl	8000524 <_ZN9displayerC1Ev>
}
 8000808:	bf00      	nop
 800080a:	3708      	adds	r7, #8
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	20000074 	.word	0x20000074

08000814 <_GLOBAL__sub_I__ZN20displayer_gui_driver8gui_initEv>:
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
 8000818:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800081c:	2001      	movs	r0, #1
 800081e:	f7ff ffe3 	bl	80007e8 <_Z41__static_initialization_and_destruction_0ii>
 8000822:	bd80      	pop	{r7, pc}

08000824 <_ZN12touch_screen10is_pressedEv>:
 */

#define I2C_Handle (&hi2c3)  /* XXX:touch screen driver port is connected to I2C3*/

bool touch_screen::is_pressed()
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b086      	sub	sp, #24
 8000828:	af04      	add	r7, sp, #16
 800082a:	6078      	str	r0, [r7, #4]
	static uint8_t touch_num;

	HAL_I2C_Mem_Read(I2C_Handle, DEV_ADDRESS_READ , DEV_TOUCH_NUM, I2C_MEMADD_SIZE_8BIT, &touch_num, 1, 10);
 800082c:	230a      	movs	r3, #10
 800082e:	9302      	str	r3, [sp, #8]
 8000830:	2301      	movs	r3, #1
 8000832:	9301      	str	r3, [sp, #4]
 8000834:	4b09      	ldr	r3, [pc, #36]	; (800085c <_ZN12touch_screen10is_pressedEv+0x38>)
 8000836:	9300      	str	r3, [sp, #0]
 8000838:	2301      	movs	r3, #1
 800083a:	2202      	movs	r2, #2
 800083c:	2171      	movs	r1, #113	; 0x71
 800083e:	4808      	ldr	r0, [pc, #32]	; (8000860 <_ZN12touch_screen10is_pressedEv+0x3c>)
 8000840:	f01b ff86 	bl	801c750 <HAL_I2C_Mem_Read>

	if(touch_num > 0)
 8000844:	4b05      	ldr	r3, [pc, #20]	; (800085c <_ZN12touch_screen10is_pressedEv+0x38>)
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <_ZN12touch_screen10is_pressedEv+0x2c>
	{
		return true;
 800084c:	2301      	movs	r3, #1
 800084e:	e000      	b.n	8000852 <_ZN12touch_screen10is_pressedEv+0x2e>
	}
	else
	{
		return false;
 8000850:	2300      	movs	r3, #0
	}
}
 8000852:	4618      	mov	r0, r3
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	2001787c 	.word	0x2001787c
 8000860:	200201ec 	.word	0x200201ec

08000864 <_ZN12touch_screen17read_touch_screenEPtS0_>:

void touch_screen::read_touch_screen(uint16_t* touch_x, uint16_t* touch_y)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b08a      	sub	sp, #40	; 0x28
 8000868:	af04      	add	r7, sp, #16
 800086a:	60f8      	str	r0, [r7, #12]
 800086c:	60b9      	str	r1, [r7, #8]
 800086e:	607a      	str	r2, [r7, #4]
	uint8_t ts_x[2];
	uint8_t ts_y[2];

	HAL_I2C_Mem_Read(I2C_Handle, DEV_ADDRESS_READ , DEV_TOUCH_X_H, I2C_MEMADD_SIZE_8BIT, &ts_x[0], 1, 10);
 8000870:	230a      	movs	r3, #10
 8000872:	9302      	str	r3, [sp, #8]
 8000874:	2301      	movs	r3, #1
 8000876:	9301      	str	r3, [sp, #4]
 8000878:	f107 0314 	add.w	r3, r7, #20
 800087c:	9300      	str	r3, [sp, #0]
 800087e:	2301      	movs	r3, #1
 8000880:	2203      	movs	r2, #3
 8000882:	2171      	movs	r1, #113	; 0x71
 8000884:	4823      	ldr	r0, [pc, #140]	; (8000914 <_ZN12touch_screen17read_touch_screenEPtS0_+0xb0>)
 8000886:	f01b ff63 	bl	801c750 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C_Handle, DEV_ADDRESS_READ , DEV_TOUCH_X_L, I2C_MEMADD_SIZE_8BIT, &ts_x[1], 1, 10);
 800088a:	230a      	movs	r3, #10
 800088c:	9302      	str	r3, [sp, #8]
 800088e:	2301      	movs	r3, #1
 8000890:	9301      	str	r3, [sp, #4]
 8000892:	f107 0314 	add.w	r3, r7, #20
 8000896:	3301      	adds	r3, #1
 8000898:	9300      	str	r3, [sp, #0]
 800089a:	2301      	movs	r3, #1
 800089c:	2204      	movs	r2, #4
 800089e:	2171      	movs	r1, #113	; 0x71
 80008a0:	481c      	ldr	r0, [pc, #112]	; (8000914 <_ZN12touch_screen17read_touch_screenEPtS0_+0xb0>)
 80008a2:	f01b ff55 	bl	801c750 <HAL_I2C_Mem_Read>

	HAL_I2C_Mem_Read(I2C_Handle, DEV_ADDRESS_READ , DEV_TOUCH_Y_H, I2C_MEMADD_SIZE_8BIT, &ts_y[0], 1, 10);
 80008a6:	230a      	movs	r3, #10
 80008a8:	9302      	str	r3, [sp, #8]
 80008aa:	2301      	movs	r3, #1
 80008ac:	9301      	str	r3, [sp, #4]
 80008ae:	f107 0310 	add.w	r3, r7, #16
 80008b2:	9300      	str	r3, [sp, #0]
 80008b4:	2301      	movs	r3, #1
 80008b6:	2205      	movs	r2, #5
 80008b8:	2171      	movs	r1, #113	; 0x71
 80008ba:	4816      	ldr	r0, [pc, #88]	; (8000914 <_ZN12touch_screen17read_touch_screenEPtS0_+0xb0>)
 80008bc:	f01b ff48 	bl	801c750 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C_Handle, DEV_ADDRESS_READ , DEV_TOUCH_Y_L, I2C_MEMADD_SIZE_8BIT, &ts_y[1], 1, 10);
 80008c0:	230a      	movs	r3, #10
 80008c2:	9302      	str	r3, [sp, #8]
 80008c4:	2301      	movs	r3, #1
 80008c6:	9301      	str	r3, [sp, #4]
 80008c8:	f107 0310 	add.w	r3, r7, #16
 80008cc:	3301      	adds	r3, #1
 80008ce:	9300      	str	r3, [sp, #0]
 80008d0:	2301      	movs	r3, #1
 80008d2:	2206      	movs	r2, #6
 80008d4:	2171      	movs	r1, #113	; 0x71
 80008d6:	480f      	ldr	r0, [pc, #60]	; (8000914 <_ZN12touch_screen17read_touch_screenEPtS0_+0xb0>)
 80008d8:	f01b ff3a 	bl	801c750 <HAL_I2C_Mem_Read>

	*touch_x = ts_x[1] + ((ts_x[0] & 0x0F) << 8);
 80008dc:	7d7b      	ldrb	r3, [r7, #21]
 80008de:	b29a      	uxth	r2, r3
 80008e0:	7d3b      	ldrb	r3, [r7, #20]
 80008e2:	021b      	lsls	r3, r3, #8
 80008e4:	b29b      	uxth	r3, r3
 80008e6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80008ea:	b29b      	uxth	r3, r3
 80008ec:	4413      	add	r3, r2
 80008ee:	b29a      	uxth	r2, r3
 80008f0:	68bb      	ldr	r3, [r7, #8]
 80008f2:	801a      	strh	r2, [r3, #0]
	*touch_y = ts_y[1] + ((ts_y[0] & 0x0F) << 8);
 80008f4:	7c7b      	ldrb	r3, [r7, #17]
 80008f6:	b29a      	uxth	r2, r3
 80008f8:	7c3b      	ldrb	r3, [r7, #16]
 80008fa:	021b      	lsls	r3, r3, #8
 80008fc:	b29b      	uxth	r3, r3
 80008fe:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000902:	b29b      	uxth	r3, r3
 8000904:	4413      	add	r3, r2
 8000906:	b29a      	uxth	r2, r3
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	801a      	strh	r2, [r3, #0]
}
 800090c:	bf00      	nop
 800090e:	3718      	adds	r7, #24
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	200201ec 	.word	0x200201ec

08000918 <_ZN23touch_screen_gui_driver7ts_initEv>:
#include "touch_screen_gui_driver.hpp"
#include "lvgl.h"
#include "i2c.h"

void touch_screen_gui_driver::ts_init()
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b08a      	sub	sp, #40	; 0x28
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]

	MX_I2C3_Init();
 8000920:	f000 f9f0 	bl	8000d04 <MX_I2C3_Init>

	lv_indev_drv_t indev_drv;
	lv_indev_drv_init(&indev_drv);
 8000924:	f107 030c 	add.w	r3, r7, #12
 8000928:	4618      	mov	r0, r3
 800092a:	f013 f855 	bl	80139d8 <lv_indev_drv_init>
	indev_drv.type = LV_INDEV_TYPE_POINTER;
 800092e:	2301      	movs	r3, #1
 8000930:	733b      	strb	r3, [r7, #12]
	indev_drv.read_cb = ts_interface_func;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	613b      	str	r3, [r7, #16]
	lv_indev_drv_register(&indev_drv);
 8000938:	f107 030c 	add.w	r3, r7, #12
 800093c:	4618      	mov	r0, r3
 800093e:	f013 f85b 	bl	80139f8 <lv_indev_drv_register>
}
 8000942:	bf00      	nop
 8000944:	3728      	adds	r7, #40	; 0x28
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
	...

0800094c <_ZN13sdram_handler4initEv>:

#include <sdram.hpp>
#include "fmc.h"

void sdram_handler::init()
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08e      	sub	sp, #56	; 0x38
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]

	FMC_SDRAM_CommandTypeDef   command;
    FMC_SDRAM_TimingTypeDef    SdramTiming = {0};
 8000954:	f107 030c 	add.w	r3, r7, #12
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]
 8000964:	615a      	str	r2, [r3, #20]
 8000966:	619a      	str	r2, [r3, #24]

    hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	4a21      	ldr	r2, [pc, #132]	; (80009f0 <_ZN13sdram_handler4initEv+0xa4>)
 800096c:	601a      	str	r2, [r3, #0]

    hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	2200      	movs	r2, #0
 8000972:	605a      	str	r2, [r3, #4]
    hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	2200      	movs	r2, #0
 8000978:	609a      	str	r2, [r3, #8]
    hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	2204      	movs	r2, #4
 800097e:	60da      	str	r2, [r3, #12]
    hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	2210      	movs	r2, #16
 8000984:	611a      	str	r2, [r3, #16]
    hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_2;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	2200      	movs	r2, #0
 800098a:	615a      	str	r2, [r3, #20]
    hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000992:	619a      	str	r2, [r3, #24]
    hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	2200      	movs	r2, #0
 8000998:	61da      	str	r2, [r3, #28]
    hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80009a0:	621a      	str	r2, [r3, #32]
    hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009a8:	625a      	str	r2, [r3, #36]	; 0x24
    hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	2200      	movs	r2, #0
 80009ae:	629a      	str	r2, [r3, #40]	; 0x28

    SdramTiming.LoadToActiveDelay = 2;
 80009b0:	2302      	movs	r3, #2
 80009b2:	60fb      	str	r3, [r7, #12]
    SdramTiming.ExitSelfRefreshDelay = 6;
 80009b4:	2306      	movs	r3, #6
 80009b6:	613b      	str	r3, [r7, #16]
    SdramTiming.SelfRefreshTime = 4;
 80009b8:	2304      	movs	r3, #4
 80009ba:	617b      	str	r3, [r7, #20]
    SdramTiming.RowCycleDelay = 6;
 80009bc:	2306      	movs	r3, #6
 80009be:	61bb      	str	r3, [r7, #24]
    SdramTiming.WriteRecoveryTime = 2;
 80009c0:	2302      	movs	r3, #2
 80009c2:	61fb      	str	r3, [r7, #28]
    SdramTiming.RPDelay = 2;
 80009c4:	2302      	movs	r3, #2
 80009c6:	623b      	str	r3, [r7, #32]
    SdramTiming.RCDDelay = 2;
 80009c8:	2302      	movs	r3, #2
 80009ca:	627b      	str	r3, [r7, #36]	; 0x24

    HAL_SDRAM_Init(&hsdram1, &SdramTiming);
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	f107 020c 	add.w	r2, r7, #12
 80009d2:	4611      	mov	r1, r2
 80009d4:	4618      	mov	r0, r3
 80009d6:	f01c ff9b 	bl	801d910 <HAL_SDRAM_Init>

    this->init_sequence(&hsdram1, &command);
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80009e0:	4619      	mov	r1, r3
 80009e2:	6878      	ldr	r0, [r7, #4]
 80009e4:	f000 f806 	bl	80009f4 <_ZN13sdram_handler13init_sequenceEP19SDRAM_HandleTypeDefP24FMC_SDRAM_CommandTypeDef>

}
 80009e8:	bf00      	nop
 80009ea:	3738      	adds	r7, #56	; 0x38
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	a0000140 	.word	0xa0000140

080009f4 <_ZN13sdram_handler13init_sequenceEP19SDRAM_HandleTypeDefP24FMC_SDRAM_CommandTypeDef>:

void sdram_handler::init_sequence(SDRAM_HandleTypeDef *sdram_handle,
		                          FMC_SDRAM_CommandTypeDef *command)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b086      	sub	sp, #24
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	60f8      	str	r0, [r7, #12]
 80009fc:	60b9      	str	r1, [r7, #8]
 80009fe:	607a      	str	r2, [r7, #4]
	  volatile uint32_t temp_val;

	  command->CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	2201      	movs	r2, #1
 8000a04:	601a      	str	r2, [r3, #0]
	  command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	2210      	movs	r2, #16
 8000a0a:	605a      	str	r2, [r3, #4]
	  command->AutoRefreshNumber = 1;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	2201      	movs	r2, #1
 8000a10:	609a      	str	r2, [r3, #8]
	  command->ModeRegisterDefinition = 0;
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	2200      	movs	r2, #0
 8000a16:	60da      	str	r2, [r3, #12]

	  HAL_SDRAM_SendCommand(sdram_handle, command, SDRAM_TIMEOUT);
 8000a18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a1c:	6879      	ldr	r1, [r7, #4]
 8000a1e:	68b8      	ldr	r0, [r7, #8]
 8000a20:	f01c ff98 	bl	801d954 <HAL_SDRAM_SendCommand>

	  HAL_Delay(1);
 8000a24:	2001      	movs	r0, #1
 8000a26:	f01b fb0b 	bl	801c040 <HAL_Delay>

	  command->CommandMode = FMC_SDRAM_CMD_PALL;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	2202      	movs	r2, #2
 8000a2e:	601a      	str	r2, [r3, #0]
	  command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	2210      	movs	r2, #16
 8000a34:	605a      	str	r2, [r3, #4]
	  command->AutoRefreshNumber = 1;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	2201      	movs	r2, #1
 8000a3a:	609a      	str	r2, [r3, #8]
	  command->ModeRegisterDefinition = 0;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	2200      	movs	r2, #0
 8000a40:	60da      	str	r2, [r3, #12]

	  HAL_SDRAM_SendCommand(sdram_handle, command, SDRAM_TIMEOUT);
 8000a42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a46:	6879      	ldr	r1, [r7, #4]
 8000a48:	68b8      	ldr	r0, [r7, #8]
 8000a4a:	f01c ff83 	bl	801d954 <HAL_SDRAM_SendCommand>

	  command->CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	2203      	movs	r2, #3
 8000a52:	601a      	str	r2, [r3, #0]
	  command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	2210      	movs	r2, #16
 8000a58:	605a      	str	r2, [r3, #4]
	  command->AutoRefreshNumber = 8;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	2208      	movs	r2, #8
 8000a5e:	609a      	str	r2, [r3, #8]
	  command->ModeRegisterDefinition = 0;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	2200      	movs	r2, #0
 8000a64:	60da      	str	r2, [r3, #12]

	  HAL_SDRAM_SendCommand(sdram_handle, command, SDRAM_TIMEOUT);
 8000a66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a6a:	6879      	ldr	r1, [r7, #4]
 8000a6c:	68b8      	ldr	r0, [r7, #8]
 8000a6e:	f01c ff71 	bl	801d954 <HAL_SDRAM_SendCommand>

	  temp_val = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8000a72:	f44f 7308 	mov.w	r3, #544	; 0x220
 8000a76:	617b      	str	r3, [r7, #20]
	                       SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
	                       SDRAM_MODEREG_CAS_LATENCY_2           |
	                       SDRAM_MODEREG_OPERATING_MODE_STANDARD |
	                       SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

	  command->CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	2204      	movs	r2, #4
 8000a7c:	601a      	str	r2, [r3, #0]
	  command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	2210      	movs	r2, #16
 8000a82:	605a      	str	r2, [r3, #4]
	  command->AutoRefreshNumber = 1;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	2201      	movs	r2, #1
 8000a88:	609a      	str	r2, [r3, #8]
	  command->ModeRegisterDefinition = temp_val;
 8000a8a:	697a      	ldr	r2, [r7, #20]
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	60da      	str	r2, [r3, #12]

	  HAL_SDRAM_SendCommand(sdram_handle, command, SDRAM_TIMEOUT);
 8000a90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a94:	6879      	ldr	r1, [r7, #4]
 8000a96:	68b8      	ldr	r0, [r7, #8]
 8000a98:	f01c ff5c 	bl	801d954 <HAL_SDRAM_SendCommand>
	  HAL_SDRAM_SetAutoRefreshNumber(&hsdram1, SDRAM_REFRESH_TIME);
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	f240 6103 	movw	r1, #1539	; 0x603
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f01c ff6e 	bl	801d984 <HAL_SDRAM_SetAutoRefreshNumber>

}
 8000aa8:	bf00      	nop
 8000aaa:	3718      	adds	r7, #24
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}

08000ab0 <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000ab0:	4b0f      	ldr	r3, [pc, #60]	; (8000af0 <MX_DMA_Init+0x40>)

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	203b      	movs	r0, #59	; 0x3b
 8000ab6:	4611      	mov	r1, r2
{
 8000ab8:	b510      	push	{r4, lr}
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000aba:	6b1c      	ldr	r4, [r3, #48]	; 0x30
{
 8000abc:	b082      	sub	sp, #8
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000abe:	f444 0480 	orr.w	r4, r4, #4194304	; 0x400000
 8000ac2:	631c      	str	r4, [r3, #48]	; 0x30
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000aca:	9301      	str	r3, [sp, #4]
 8000acc:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000ace:	f01b fadd 	bl	801c08c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000ad2:	203b      	movs	r0, #59	; 0x3b
 8000ad4:	f01b fb14 	bl	801c100 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	2045      	movs	r0, #69	; 0x45
 8000adc:	4611      	mov	r1, r2
 8000ade:	f01b fad5 	bl	801c08c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000ae2:	2045      	movs	r0, #69	; 0x45

}
 8000ae4:	b002      	add	sp, #8
 8000ae6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000aea:	f01b bb09 	b.w	801c100 <HAL_NVIC_EnableIRQ>
 8000aee:	bf00      	nop
 8000af0:	40023800 	.word	0x40023800

08000af4 <HAL_SDRAM_MspInit>:
static void HAL_FMC_MspInit(void){
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if (FMC_Initialized) {
 8000af4:	4b2f      	ldr	r3, [pc, #188]	; (8000bb4 <HAL_SDRAM_MspInit+0xc0>)
 8000af6:	681a      	ldr	r2, [r3, #0]
 8000af8:	b102      	cbz	r2, 8000afc <HAL_SDRAM_MspInit+0x8>
 8000afa:	4770      	bx	lr
    return;
  }
  FMC_Initialized = 1;

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000afc:	4a2e      	ldr	r2, [pc, #184]	; (8000bb8 <HAL_SDRAM_MspInit+0xc4>)
  FMC_Initialized = 1;
 8000afe:	2101      	movs	r1, #1
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b00:	482e      	ldr	r0, [pc, #184]	; (8000bbc <HAL_SDRAM_MspInit+0xc8>)
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000b02:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
  FMC_Initialized = 1;
 8000b06:	6019      	str	r1, [r3, #0]
void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000b08:	b088      	sub	sp, #32
  __HAL_RCC_FMC_CLK_ENABLE();
 8000b0a:	6b93      	ldr	r3, [r2, #56]	; 0x38
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9
 8000b0c:	2400      	movs	r4, #0
 8000b0e:	2503      	movs	r5, #3
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b10:	260c      	movs	r6, #12
  __HAL_RCC_FMC_CLK_ENABLE();
 8000b12:	430b      	orrs	r3, r1
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9
 8000b14:	f64f 7883 	movw	r8, #65411	; 0xff83
 8000b18:	f04f 0902 	mov.w	r9, #2
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b1c:	a902      	add	r1, sp, #8
  __HAL_RCC_FMC_CLK_ENABLE();
 8000b1e:	6393      	str	r3, [r2, #56]	; 0x38
 8000b20:	6b93      	ldr	r3, [r2, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b22:	9606      	str	r6, [sp, #24]
  __HAL_RCC_FMC_CLK_ENABLE();
 8000b24:	f003 0301 	and.w	r3, r3, #1
 8000b28:	9301      	str	r3, [sp, #4]
 8000b2a:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9
 8000b2c:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8000b30:	e9cd 4504 	strd	r4, r5, [sp, #16]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b34:	f01b fbe2 	bl	801c2fc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
 8000b38:	f248 1213 	movw	r2, #33043	; 0x8113
 8000b3c:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b3e:	a902      	add	r1, sp, #8
 8000b40:	481f      	ldr	r0, [pc, #124]	; (8000bc0 <HAL_SDRAM_MspInit+0xcc>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b42:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
 8000b44:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000b48:	e9cd 4504 	strd	r4, r5, [sp, #16]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b4c:	f01b fbd6 	bl	801c2fc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 8000b50:	f24c 7203 	movw	r2, #50947	; 0xc703
 8000b54:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b56:	a902      	add	r1, sp, #8
 8000b58:	481a      	ldr	r0, [pc, #104]	; (8000bc4 <HAL_SDRAM_MspInit+0xd0>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b5a:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 8000b5c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000b60:	e9cd 4504 	strd	r4, r5, [sp, #16]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b64:	f01b fbca 	bl	801c2fc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000b68:	f64f 023f 	movw	r2, #63551	; 0xf83f
 8000b6c:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b6e:	a902      	add	r1, sp, #8
 8000b70:	4815      	ldr	r0, [pc, #84]	; (8000bc8 <HAL_SDRAM_MspInit+0xd4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b72:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000b74:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000b78:	e9cd 4504 	strd	r4, r5, [sp, #16]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b7c:	f01b fbbe 	bl	801c2fc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3;
 8000b80:	2228      	movs	r2, #40	; 0x28
 8000b82:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000b84:	a902      	add	r1, sp, #8
 8000b86:	4811      	ldr	r0, [pc, #68]	; (8000bcc <HAL_SDRAM_MspInit+0xd8>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b88:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3;
 8000b8a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000b8e:	e9cd 4504 	strd	r4, r5, [sp, #16]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000b92:	f01b fbb3 	bl	801c2fc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000b96:	2208      	movs	r2, #8
 8000b98:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b9a:	a902      	add	r1, sp, #8
 8000b9c:	480c      	ldr	r0, [pc, #48]	; (8000bd0 <HAL_SDRAM_MspInit+0xdc>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b9e:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000ba0:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8000ba4:	e9cd 2302 	strd	r2, r3, [sp, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ba8:	f01b fba8 	bl	801c2fc <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000bac:	b008      	add	sp, #32
 8000bae:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8000bb2:	bf00      	nop
 8000bb4:	20017880 	.word	0x20017880
 8000bb8:	40023800 	.word	0x40023800
 8000bbc:	40021000 	.word	0x40021000
 8000bc0:	40021800 	.word	0x40021800
 8000bc4:	40020c00 	.word	0x40020c00
 8000bc8:	40021400 	.word	0x40021400
 8000bcc:	40021c00 	.word	0x40021c00
 8000bd0:	40020800 	.word	0x40020800

08000bd4 <MX_GPIO_Init>:
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bd4:	4b47      	ldr	r3, [pc, #284]	; (8000cf4 <MX_GPIO_Init+0x120>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOI_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOK, GPIO_PIN_3, GPIO_PIN_SET);
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	2108      	movs	r1, #8
{
 8000bda:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bdc:	2400      	movs	r4, #0
{
 8000bde:	b091      	sub	sp, #68	; 0x44
  HAL_GPIO_WritePin(GPIOK, GPIO_PIN_3, GPIO_PIN_SET);
 8000be0:	4f45      	ldr	r7, [pc, #276]	; (8000cf8 <MX_GPIO_Init+0x124>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be2:	940b      	str	r4, [sp, #44]	; 0x2c
 8000be4:	940a      	str	r4, [sp, #40]	; 0x28
 8000be6:	940e      	str	r4, [sp, #56]	; 0x38

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1|GPIO_PIN_12, GPIO_PIN_SET);
 8000be8:	4e44      	ldr	r6, [pc, #272]	; (8000cfc <MX_GPIO_Init+0x128>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bea:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bee:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000bf0:	f040 0010 	orr.w	r0, r0, #16
 8000bf4:	6318      	str	r0, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOK, GPIO_PIN_3, GPIO_PIN_SET);
 8000bf6:	4638      	mov	r0, r7
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bf8:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 8000bfa:	f005 0510 	and.w	r5, r5, #16
 8000bfe:	9500      	str	r5, [sp, #0]
 8000c00:	9d00      	ldr	r5, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c02:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 8000c04:	f045 0504 	orr.w	r5, r5, #4
 8000c08:	631d      	str	r5, [r3, #48]	; 0x30
 8000c0a:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 8000c0c:	f005 0504 	and.w	r5, r5, #4
 8000c10:	9501      	str	r5, [sp, #4]
 8000c12:	9d01      	ldr	r5, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c14:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 8000c16:	4315      	orrs	r5, r2
 8000c18:	631d      	str	r5, [r3, #48]	; 0x30
 8000c1a:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 8000c1c:	4015      	ands	r5, r2
 8000c1e:	9502      	str	r5, [sp, #8]
 8000c20:	9d02      	ldr	r5, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c22:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 8000c24:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 8000c28:	631d      	str	r5, [r3, #48]	; 0x30
 8000c2a:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 8000c2c:	f005 0540 	and.w	r5, r5, #64	; 0x40
 8000c30:	9503      	str	r5, [sp, #12]
 8000c32:	9d03      	ldr	r5, [sp, #12]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000c34:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 8000c36:	f445 7500 	orr.w	r5, r5, #512	; 0x200
 8000c3a:	631d      	str	r5, [r3, #48]	; 0x30
 8000c3c:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 8000c3e:	f405 7500 	and.w	r5, r5, #512	; 0x200
 8000c42:	9504      	str	r5, [sp, #16]
 8000c44:	9d04      	ldr	r5, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c46:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 8000c48:	430d      	orrs	r5, r1
 8000c4a:	631d      	str	r5, [r3, #48]	; 0x30
 8000c4c:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 8000c4e:	400d      	ands	r5, r1
 8000c50:	9505      	str	r5, [sp, #20]
 8000c52:	9d05      	ldr	r5, [sp, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000c54:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 8000c56:	f445 6580 	orr.w	r5, r5, #1024	; 0x400
 8000c5a:	631d      	str	r5, [r3, #48]	; 0x30
 8000c5c:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 8000c5e:	f405 6580 	and.w	r5, r5, #1024	; 0x400
 8000c62:	9506      	str	r5, [sp, #24]
 8000c64:	9d06      	ldr	r5, [sp, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c66:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 8000c68:	f045 0520 	orr.w	r5, r5, #32
 8000c6c:	631d      	str	r5, [r3, #48]	; 0x30
 8000c6e:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 8000c70:	f005 0520 	and.w	r5, r5, #32
 8000c74:	9507      	str	r5, [sp, #28]
 8000c76:	9d07      	ldr	r5, [sp, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000c78:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 8000c7a:	f445 7580 	orr.w	r5, r5, #256	; 0x100
 8000c7e:	631d      	str	r5, [r3, #48]	; 0x30
 8000c80:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 8000c82:	f405 7580 	and.w	r5, r5, #256	; 0x100
 8000c86:	9508      	str	r5, [sp, #32]
 8000c88:	9d08      	ldr	r5, [sp, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c8a:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 8000c8c:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8000c90:	631d      	str	r5, [r3, #48]	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pin : PK3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c92:	2503      	movs	r5, #3
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c9a:	9309      	str	r3, [sp, #36]	; 0x24
 8000c9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  HAL_GPIO_WritePin(GPIOK, GPIO_PIN_3, GPIO_PIN_SET);
 8000c9e:	f01b fc4d 	bl	801c53c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1|GPIO_PIN_12, GPIO_PIN_SET);
 8000ca2:	4630      	mov	r0, r6
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	f241 0102 	movw	r1, #4098	; 0x1002
 8000caa:	f01b fc47 	bl	801c53c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000cae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cb2:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cb4:	a90a      	add	r1, sp, #40	; 0x28
 8000cb6:	4812      	ldr	r0, [pc, #72]	; (8000d00 <MX_GPIO_Init+0x12c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb8:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000cba:	2400      	movs	r4, #0
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000cbc:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cc0:	f01b fb1c 	bl	801c2fc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000cc4:	2208      	movs	r2, #8
 8000cc6:	2301      	movs	r3, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000cc8:	4638      	mov	r0, r7
 8000cca:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000ccc:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8000cd0:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000cd4:	f01b fb12 	bl	801c2fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PI1 PI12 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_12;
 8000cd8:	f241 0202 	movw	r2, #4098	; 0x1002
 8000cdc:	2301      	movs	r3, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000cde:	a90a      	add	r1, sp, #40	; 0x28
 8000ce0:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_12;
 8000ce2:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
 8000ce6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000cea:	f01b fb07 	bl	801c2fc <HAL_GPIO_Init>

}
 8000cee:	b011      	add	sp, #68	; 0x44
 8000cf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	40023800 	.word	0x40023800
 8000cf8:	40022800 	.word	0x40022800
 8000cfc:	40022000 	.word	0x40022000
 8000d00:	40020800 	.word	0x40020800

08000d04 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000d04:	b538      	push	{r3, r4, r5, lr}
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000d06:	4818      	ldr	r0, [pc, #96]	; (8000d68 <MX_I2C3_Init+0x64>)
  hi2c3.Init.Timing = 0x0040EAFF;
  hi2c3.Init.OwnAddress1 = 224;
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d08:	2300      	movs	r3, #0
  hi2c3.Init.OwnAddress1 = 224;
 8000d0a:	21e0      	movs	r1, #224	; 0xe0
  hi2c3.Instance = I2C3;
 8000d0c:	4d17      	ldr	r5, [pc, #92]	; (8000d6c <MX_I2C3_Init+0x68>)
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d0e:	2201      	movs	r2, #1
  hi2c3.Init.Timing = 0x0040EAFF;
 8000d10:	4c17      	ldr	r4, [pc, #92]	; (8000d70 <MX_I2C3_Init+0x6c>)
  hi2c3.Init.OwnAddress2 = 0;
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d12:	6203      	str	r3, [r0, #32]
  hi2c3.Init.Timing = 0x0040EAFF;
 8000d14:	e9c0 5400 	strd	r5, r4, [r0]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d18:	e9c0 1202 	strd	r1, r2, [r0, #8]
  hi2c3.Init.OwnAddress2 = 0;
 8000d1c:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d20:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000d24:	f01b fcc0 	bl	801c6a8 <HAL_I2C_Init>
 8000d28:	b950      	cbnz	r0, 8000d40 <MX_I2C3_Init+0x3c>
  {
    Error_Handler();
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	480e      	ldr	r0, [pc, #56]	; (8000d68 <MX_I2C3_Init+0x64>)
 8000d2e:	f01b fe55 	bl	801c9dc <HAL_I2CEx_ConfigAnalogFilter>
 8000d32:	b968      	cbnz	r0, 8000d50 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000d34:	2100      	movs	r1, #0
 8000d36:	480c      	ldr	r0, [pc, #48]	; (8000d68 <MX_I2C3_Init+0x64>)
 8000d38:	f01b fe7c 	bl	801ca34 <HAL_I2CEx_ConfigDigitalFilter>
 8000d3c:	b980      	cbnz	r0, 8000d60 <MX_I2C3_Init+0x5c>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000d3e:	bd38      	pop	{r3, r4, r5, pc}
    Error_Handler();
 8000d40:	f000 facc 	bl	80012dc <Error_Handler>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d44:	2100      	movs	r1, #0
 8000d46:	4808      	ldr	r0, [pc, #32]	; (8000d68 <MX_I2C3_Init+0x64>)
 8000d48:	f01b fe48 	bl	801c9dc <HAL_I2CEx_ConfigAnalogFilter>
 8000d4c:	2800      	cmp	r0, #0
 8000d4e:	d0f1      	beq.n	8000d34 <MX_I2C3_Init+0x30>
    Error_Handler();
 8000d50:	f000 fac4 	bl	80012dc <Error_Handler>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000d54:	2100      	movs	r1, #0
 8000d56:	4804      	ldr	r0, [pc, #16]	; (8000d68 <MX_I2C3_Init+0x64>)
 8000d58:	f01b fe6c 	bl	801ca34 <HAL_I2CEx_ConfigDigitalFilter>
 8000d5c:	2800      	cmp	r0, #0
 8000d5e:	d0ee      	beq.n	8000d3e <MX_I2C3_Init+0x3a>
}
 8000d60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 8000d64:	f000 baba 	b.w	80012dc <Error_Handler>
 8000d68:	200201ec 	.word	0x200201ec
 8000d6c:	40005c00 	.word	0x40005c00
 8000d70:	0040eaff 	.word	0x0040eaff

08000d74 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(i2cHandle->Instance==I2C3)
 8000d74:	4b1f      	ldr	r3, [pc, #124]	; (8000df4 <HAL_I2C_MspInit+0x80>)
 8000d76:	6802      	ldr	r2, [r0, #0]
{
 8000d78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if(i2cHandle->Instance==I2C3)
 8000d7c:	429a      	cmp	r2, r3
{
 8000d7e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d80:	f04f 0400 	mov.w	r4, #0
 8000d84:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8000d88:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8000d8c:	9406      	str	r4, [sp, #24]
  if(i2cHandle->Instance==I2C3)
 8000d8e:	d002      	beq.n	8000d96 <HAL_I2C_MspInit+0x22>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000d90:	b009      	add	sp, #36	; 0x24
 8000d92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d96:	4d18      	ldr	r5, [pc, #96]	; (8000df8 <HAL_I2C_MspInit+0x84>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000d98:	2204      	movs	r2, #4
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000d9a:	f44f 76c0 	mov.w	r6, #384	; 0x180
 8000d9e:	2712      	movs	r7, #18
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000da0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000da2:	f04f 0801 	mov.w	r8, #1
 8000da6:	f04f 0903 	mov.w	r9, #3
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000daa:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000db0:	4812      	ldr	r0, [pc, #72]	; (8000dfc <HAL_I2C_MspInit+0x88>)
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000db2:	632b      	str	r3, [r5, #48]	; 0x30
 8000db4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000db6:	9206      	str	r2, [sp, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000db8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dbc:	9300      	str	r3, [sp, #0]
 8000dbe:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000dc0:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8000dc4:	e9cd 8904 	strd	r8, r9, [sp, #16]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000dc8:	f01b fa98 	bl	801c2fc <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000dcc:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 8000dce:	4622      	mov	r2, r4
 8000dd0:	4621      	mov	r1, r4
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000dd2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 8000dd6:	2048      	movs	r0, #72	; 0x48
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000dd8:	642b      	str	r3, [r5, #64]	; 0x40
 8000dda:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8000ddc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000de0:	9301      	str	r3, [sp, #4]
 8000de2:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 8000de4:	f01b f952 	bl	801c08c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8000de8:	2048      	movs	r0, #72	; 0x48
 8000dea:	f01b f989 	bl	801c100 <HAL_NVIC_EnableIRQ>
}
 8000dee:	b009      	add	sp, #36	; 0x24
 8000df0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000df4:	40005c00 	.word	0x40005c00
 8000df8:	40023800 	.word	0x40023800
 8000dfc:	40021c00 	.word	0x40021c00

08000e00 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(ltdcHandle->Instance==LTDC)
 8000e00:	4a45      	ldr	r2, [pc, #276]	; (8000f18 <HAL_LTDC_MspInit+0x118>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e02:	2300      	movs	r3, #0
  if(ltdcHandle->Instance==LTDC)
 8000e04:	6801      	ldr	r1, [r0, #0]
{
 8000e06:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
  if(ltdcHandle->Instance==LTDC)
 8000e0a:	4291      	cmp	r1, r2
{
 8000e0c:	b08c      	sub	sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e0e:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8000e12:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8000e16:	930a      	str	r3, [sp, #40]	; 0x28
  if(ltdcHandle->Instance==LTDC)
 8000e18:	d002      	beq.n	8000e20 <HAL_LTDC_MspInit+0x20>

  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8000e1a:	b00c      	add	sp, #48	; 0x30
 8000e1c:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000e20:	4b3e      	ldr	r3, [pc, #248]	; (8000f1c <HAL_LTDC_MspInit+0x11c>)
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000e22:	2400      	movs	r4, #0
 8000e24:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e26:	260e      	movs	r6, #14
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000e28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000e2a:	f04f 0810 	mov.w	r8, #16
 8000e2e:	f04f 0902 	mov.w	r9, #2
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e32:	a906      	add	r1, sp, #24
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000e34:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e38:	4839      	ldr	r0, [pc, #228]	; (8000f20 <HAL_LTDC_MspInit+0x120>)
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000e3a:	645a      	str	r2, [r3, #68]	; 0x44
 8000e3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000e3e:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8000e42:	9200      	str	r2, [sp, #0]
 8000e44:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e48:	f042 0210 	orr.w	r2, r2, #16
 8000e4c:	631a      	str	r2, [r3, #48]	; 0x30
 8000e4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e50:	f002 0210 	and.w	r2, r2, #16
 8000e54:	9201      	str	r2, [sp, #4]
 8000e56:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000e58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000e5e:	631a      	str	r2, [r3, #48]	; 0x30
 8000e60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e62:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8000e66:	9202      	str	r2, [sp, #8]
 8000e68:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8000e6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e6c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000e70:	631a      	str	r2, [r3, #48]	; 0x30
 8000e72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e74:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8000e78:	9203      	str	r2, [sp, #12]
 8000e7a:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000e82:	631a      	str	r2, [r3, #48]	; 0x30
 8000e84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e86:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8000e8a:	9204      	str	r2, [sp, #16]
 8000e8c:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8000e8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000e94:	631a      	str	r2, [r3, #48]	; 0x30
 8000e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e9c:	9305      	str	r3, [sp, #20]
 8000e9e:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000ea0:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8000ea4:	e9cd 4508 	strd	r4, r5, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ea8:	960a      	str	r6, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000eaa:	f01b fa27 	bl	801c2fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_11
 8000eae:	f64e 72ff 	movw	r2, #61439	; 0xefff
 8000eb2:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000eb4:	a906      	add	r1, sp, #24
 8000eb6:	481b      	ldr	r0, [pc, #108]	; (8000f24 <HAL_LTDC_MspInit+0x124>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000eb8:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000eba:	f44f 5880 	mov.w	r8, #4096	; 0x1000
 8000ebe:	f04f 0902 	mov.w	r9, #2
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_11
 8000ec2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8000ec6:	e9cd 4508 	strd	r4, r5, [sp, #32]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000eca:	f01b fa17 	bl	801c2fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4
 8000ece:	22f7      	movs	r2, #247	; 0xf7
 8000ed0:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000ed2:	a906      	add	r1, sp, #24
 8000ed4:	4814      	ldr	r0, [pc, #80]	; (8000f28 <HAL_LTDC_MspInit+0x128>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ed6:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4
 8000ed8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8000edc:	e9cd 4508 	strd	r4, r5, [sp, #32]
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000ee0:	f01b fa0c 	bl	801c2fc <HAL_GPIO_Init>
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000ee4:	2309      	movs	r3, #9
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ee6:	a906      	add	r1, sp, #24
 8000ee8:	4810      	ldr	r0, [pc, #64]	; (8000f2c <HAL_LTDC_MspInit+0x12c>)
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000eea:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000eec:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8000ef0:	e9cd 8906 	strd	r8, r9, [sp, #24]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ef4:	f01b fa02 	bl	801c2fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_15|GPIO_PIN_14;
 8000ef8:	f44f 4246 	mov.w	r2, #50688	; 0xc600
 8000efc:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000efe:	a906      	add	r1, sp, #24
 8000f00:	480b      	ldr	r0, [pc, #44]	; (8000f30 <HAL_LTDC_MspInit+0x130>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f02:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_15|GPIO_PIN_14;
 8000f04:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8000f08:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000f0c:	f01b f9f6 	bl	801c2fc <HAL_GPIO_Init>
}
 8000f10:	b00c      	add	sp, #48	; 0x30
 8000f12:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8000f16:	bf00      	nop
 8000f18:	40016800 	.word	0x40016800
 8000f1c:	40023800 	.word	0x40023800
 8000f20:	40021000 	.word	0x40021000
 8000f24:	40022400 	.word	0x40022400
 8000f28:	40022800 	.word	0x40022800
 8000f2c:	40021800 	.word	0x40021800
 8000f30:	40022000 	.word	0x40022000

08000f34 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000f38:	f3bf 8f4f 	dsb	sy
}
 8000f3c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f3e:	f3bf 8f6f 	isb	sy
}
 8000f42:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000f44:	4b0d      	ldr	r3, [pc, #52]	; (8000f7c <SCB_EnableICache+0x48>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000f4c:	f3bf 8f4f 	dsb	sy
}
 8000f50:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f52:	f3bf 8f6f 	isb	sy
}
 8000f56:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000f58:	4b08      	ldr	r3, [pc, #32]	; (8000f7c <SCB_EnableICache+0x48>)
 8000f5a:	695b      	ldr	r3, [r3, #20]
 8000f5c:	4a07      	ldr	r2, [pc, #28]	; (8000f7c <SCB_EnableICache+0x48>)
 8000f5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f62:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f64:	f3bf 8f4f 	dsb	sy
}
 8000f68:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f6a:	f3bf 8f6f 	isb	sy
}
 8000f6e:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000f70:	bf00      	nop
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	e000ed00 	.word	0xe000ed00

08000f80 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b085      	sub	sp, #20
 8000f84:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000f86:	4b25      	ldr	r3, [pc, #148]	; (800101c <SCB_EnableDCache+0x9c>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000f8e:	f3bf 8f4f 	dsb	sy
}
 8000f92:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000f94:	4b21      	ldr	r3, [pc, #132]	; (800101c <SCB_EnableDCache+0x9c>)
 8000f96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000f9a:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	0b5b      	lsrs	r3, r3, #13
 8000fa0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000fa4:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	08db      	lsrs	r3, r3, #3
 8000faa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000fae:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	015a      	lsls	r2, r3, #5
 8000fb4:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000fb8:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000fba:	68ba      	ldr	r2, [r7, #8]
 8000fbc:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000fbe:	4917      	ldr	r1, [pc, #92]	; (800101c <SCB_EnableDCache+0x9c>)
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000fc6:	68bb      	ldr	r3, [r7, #8]
 8000fc8:	1e5a      	subs	r2, r3, #1
 8000fca:	60ba      	str	r2, [r7, #8]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	bf14      	ite	ne
 8000fd0:	2301      	movne	r3, #1
 8000fd2:	2300      	moveq	r3, #0
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d000      	beq.n	8000fdc <SCB_EnableDCache+0x5c>
      do {
 8000fda:	e7e9      	b.n	8000fb0 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	1e5a      	subs	r2, r3, #1
 8000fe0:	60fa      	str	r2, [r7, #12]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	bf14      	ite	ne
 8000fe6:	2301      	movne	r3, #1
 8000fe8:	2300      	moveq	r3, #0
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d000      	beq.n	8000ff2 <SCB_EnableDCache+0x72>
    do {
 8000ff0:	e7d9      	b.n	8000fa6 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000ff2:	f3bf 8f4f 	dsb	sy
}
 8000ff6:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000ff8:	4b08      	ldr	r3, [pc, #32]	; (800101c <SCB_EnableDCache+0x9c>)
 8000ffa:	695b      	ldr	r3, [r3, #20]
 8000ffc:	4a07      	ldr	r2, [pc, #28]	; (800101c <SCB_EnableDCache+0x9c>)
 8000ffe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001002:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001004:	f3bf 8f4f 	dsb	sy
}
 8001008:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800100a:	f3bf 8f6f 	isb	sy
}
 800100e:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8001010:	bf00      	nop
 8001012:	3714      	adds	r7, #20
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	e000ed00 	.word	0xe000ed00

08001020 <lv_scr_act>:
/**
 * Get the active screen of the default display
 * @return pointer to the active screen
 */
static inline lv_obj_t * lv_scr_act(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
    return lv_disp_get_scr_act(lv_disp_get_default());
 8001024:	f012 fc32 	bl	801388c <lv_disp_get_default>
 8001028:	4603      	mov	r3, r0
 800102a:	4618      	mov	r0, r3
 800102c:	f000 fa6e 	bl	800150c <lv_disp_get_scr_act>
 8001030:	4603      	mov	r3, r0
}
 8001032:	4618      	mov	r0, r3
 8001034:	bd80      	pop	{r7, pc}
	...

08001038 <_ZNK23touch_screen_gui_driver17ts_interface_funcMUlP15_lv_indev_drv_tP15lv_indev_data_tE_clES1_S3_>:
class touch_screen_gui_driver: public ::touch_screen
{
public:
	void ts_init();
private:
	bool (*ts_interface_func)(struct _lv_indev_drv_t *,lv_indev_data_t * ) = [](struct _lv_indev_drv_t * indev, lv_indev_data_t * data) ->bool {
 8001038:	b580      	push	{r7, lr}
 800103a:	b086      	sub	sp, #24
 800103c:	af00      	add	r7, sp, #0
 800103e:	60f8      	str	r0, [r7, #12]
 8001040:	60b9      	str	r1, [r7, #8]
 8001042:	607a      	str	r2, [r7, #4]

		static touch_screen ts;
		uint16_t ts_x;
		uint16_t ts_y;

		data->state =  ts.is_pressed() ? LV_INDEV_STATE_PR : LV_INDEV_STATE_REL;
 8001044:	4811      	ldr	r0, [pc, #68]	; (800108c <_ZNK23touch_screen_gui_driver17ts_interface_funcMUlP15_lv_indev_drv_tP15lv_indev_data_tE_clES1_S3_+0x54>)
 8001046:	f7ff fbed 	bl	8000824 <_ZN12touch_screen10is_pressedEv>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <_ZNK23touch_screen_gui_driver17ts_interface_funcMUlP15_lv_indev_drv_tP15lv_indev_data_tE_clES1_S3_+0x1c>
 8001050:	2201      	movs	r2, #1
 8001052:	e000      	b.n	8001056 <_ZNK23touch_screen_gui_driver17ts_interface_funcMUlP15_lv_indev_drv_tP15lv_indev_data_tE_clES1_S3_+0x1e>
 8001054:	2200      	movs	r2, #0
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	739a      	strb	r2, [r3, #14]

		if (data->state == LV_INDEV_STATE_PR)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	7b9b      	ldrb	r3, [r3, #14]
 800105e:	2b01      	cmp	r3, #1
 8001060:	d107      	bne.n	8001072 <_ZNK23touch_screen_gui_driver17ts_interface_funcMUlP15_lv_indev_drv_tP15lv_indev_data_tE_clES1_S3_+0x3a>
		{
			ts.read_touch_screen(&ts_x, &ts_y);
 8001062:	f107 0214 	add.w	r2, r7, #20
 8001066:	f107 0316 	add.w	r3, r7, #22
 800106a:	4619      	mov	r1, r3
 800106c:	4807      	ldr	r0, [pc, #28]	; (800108c <_ZNK23touch_screen_gui_driver17ts_interface_funcMUlP15_lv_indev_drv_tP15lv_indev_data_tE_clES1_S3_+0x54>)
 800106e:	f7ff fbf9 	bl	8000864 <_ZN12touch_screen17read_touch_screenEPtS0_>
		}

		data->point.x = (int16_t)ts_y;
 8001072:	8abb      	ldrh	r3, [r7, #20]
 8001074:	b21a      	sxth	r2, r3
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	801a      	strh	r2, [r3, #0]
		data->point.y = (int16_t)ts_x;
 800107a:	8afb      	ldrh	r3, [r7, #22]
 800107c:	b21a      	sxth	r2, r3
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	805a      	strh	r2, [r3, #2]

		return false;
 8001082:	2300      	movs	r3, #0

	};
 8001084:	4618      	mov	r0, r3
 8001086:	3718      	adds	r7, #24
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	20017884 	.word	0x20017884

08001090 <_ZN23touch_screen_gui_driver17ts_interface_funcMUlP15_lv_indev_drv_tP15lv_indev_data_tE_4_FUNES1_S3_>:
	bool (*ts_interface_func)(struct _lv_indev_drv_t *,lv_indev_data_t * ) = [](struct _lv_indev_drv_t * indev, lv_indev_data_t * data) ->bool {
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	6039      	str	r1, [r7, #0]
	};
 800109a:	683a      	ldr	r2, [r7, #0]
 800109c:	6879      	ldr	r1, [r7, #4]
 800109e:	2000      	movs	r0, #0
 80010a0:	f7ff ffca 	bl	8001038 <_ZNK23touch_screen_gui_driver17ts_interface_funcMUlP15_lv_indev_drv_tP15lv_indev_data_tE_clES1_S3_>
 80010a4:	4603      	mov	r3, r0
 80010a6:	4618      	mov	r0, r3
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}

080010ae <_ZN20displayer_gui_driverC1Ev>:
#include "sdram.hpp"

class displayer_gui_driver: public ::displayer, ::sdram_handler
{
public:
	displayer_gui_driver() = default;
 80010ae:	b580      	push	{r7, lr}
 80010b0:	b082      	sub	sp, #8
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	6078      	str	r0, [r7, #4]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff fa33 	bl	8000524 <_ZN9displayerC1Ev>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	33a8      	adds	r3, #168	; 0xa8
 80010c2:	4618      	mov	r0, r3
 80010c4:	f7ff fafa 	bl	80006bc <_ZN13sdram_handlerC1Ev>
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	4618      	mov	r0, r3
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
	...

080010d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b0ba      	sub	sp, #232	; 0xe8
 80010d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 80010da:	f7ff ff2b 	bl	8000f34 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80010de:	f7ff ff4f 	bl	8000f80 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010e2:	f01a ff8f 	bl	801c004 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010e6:	f000 f82b 	bl	8001140 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010ea:	f7ff fd73 	bl	8000bd4 <MX_GPIO_Init>
  MX_DMA_Init();
 80010ee:	f7ff fcdf 	bl	8000ab0 <MX_DMA_Init>
  MX_TIM2_Init();
 80010f2:	f000 f98d 	bl	8001410 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  displayer_gui_driver gui;
 80010f6:	1d3b      	adds	r3, r7, #4
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ffd8 	bl	80010ae <_ZN20displayer_gui_driverC1Ev>
  touch_screen_gui_driver ts;
 80010fe:	2300      	movs	r3, #0
 8001100:	603b      	str	r3, [r7, #0]
 8001102:	4b0e      	ldr	r3, [pc, #56]	; (800113c <main+0x68>)
 8001104:	603b      	str	r3, [r7, #0]

  gui.gui_init();
 8001106:	1d3b      	adds	r3, r7, #4
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff fae3 	bl	80006d4 <_ZN20displayer_gui_driver8gui_initEv>
  ts.ts_init();
 800110e:	463b      	mov	r3, r7
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff fc01 	bl	8000918 <_ZN23touch_screen_gui_driver7ts_initEv>

  lv_obj_t* btn = lv_btn_create(lv_scr_act(), NULL);
 8001116:	f7ff ff83 	bl	8001020 <lv_scr_act>
 800111a:	4603      	mov	r3, r0
 800111c:	2100      	movs	r1, #0
 800111e:	4618      	mov	r0, r3
 8001120:	f01a f822 	bl	801b168 <lv_btn_create>
 8001124:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4

  lv_obj_set_pos(btn, 10, 10);
 8001128:	220a      	movs	r2, #10
 800112a:	210a      	movs	r1, #10
 800112c:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 8001130:	f002 fe2e 	bl	8003d90 <lv_obj_set_pos>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  lv_task_handler();
 8001134:	f014 fc34 	bl	80159a0 <lv_task_handler>
 8001138:	e7fc      	b.n	8001134 <main+0x60>
 800113a:	bf00      	nop
 800113c:	08001091 	.word	0x08001091

08001140 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b0b4      	sub	sp, #208	; 0xd0
 8001144:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001146:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800114a:	2230      	movs	r2, #48	; 0x30
 800114c:	2100      	movs	r1, #0
 800114e:	4618      	mov	r0, r3
 8001150:	f01d f800 	bl	801e154 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001154:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	60da      	str	r2, [r3, #12]
 8001162:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001164:	f107 0308 	add.w	r3, r7, #8
 8001168:	2284      	movs	r2, #132	; 0x84
 800116a:	2100      	movs	r1, #0
 800116c:	4618      	mov	r0, r3
 800116e:	f01c fff1 	bl	801e154 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001172:	4b4d      	ldr	r3, [pc, #308]	; (80012a8 <_Z18SystemClock_Configv+0x168>)
 8001174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001176:	4a4c      	ldr	r2, [pc, #304]	; (80012a8 <_Z18SystemClock_Configv+0x168>)
 8001178:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800117c:	6413      	str	r3, [r2, #64]	; 0x40
 800117e:	4b4a      	ldr	r3, [pc, #296]	; (80012a8 <_Z18SystemClock_Configv+0x168>)
 8001180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001182:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001186:	607b      	str	r3, [r7, #4]
 8001188:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800118a:	4b48      	ldr	r3, [pc, #288]	; (80012ac <_Z18SystemClock_Configv+0x16c>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a47      	ldr	r2, [pc, #284]	; (80012ac <_Z18SystemClock_Configv+0x16c>)
 8001190:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001194:	6013      	str	r3, [r2, #0]
 8001196:	4b45      	ldr	r3, [pc, #276]	; (80012ac <_Z18SystemClock_Configv+0x16c>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800119e:	603b      	str	r3, [r7, #0]
 80011a0:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011a2:	2301      	movs	r3, #1
 80011a4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011ac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011b0:	2302      	movs	r3, #2
 80011b2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80011ba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 15;
 80011be:	230f      	movs	r3, #15
 80011c0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 240;
 80011c4:	23f0      	movs	r3, #240	; 0xf0
 80011c6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011ca:	2302      	movs	r3, #2
 80011cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80011d0:	2309      	movs	r3, #9
 80011d2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011d6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80011da:	4618      	mov	r0, r3
 80011dc:	f01b fde4 	bl	801cda8 <HAL_RCC_OscConfig>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	bf14      	ite	ne
 80011e6:	2301      	movne	r3, #1
 80011e8:	2300      	moveq	r3, #0
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <_Z18SystemClock_Configv+0xb4>
  {
    Error_Handler();
 80011f0:	f000 f874 	bl	80012dc <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80011f4:	f01b fd9c 	bl	801cd30 <HAL_PWREx_EnableOverDrive>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	bf14      	ite	ne
 80011fe:	2301      	movne	r3, #1
 8001200:	2300      	moveq	r3, #0
 8001202:	b2db      	uxtb	r3, r3
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <_Z18SystemClock_Configv+0xcc>
  {
    Error_Handler();
 8001208:	f000 f868 	bl	80012dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800120c:	230f      	movs	r3, #15
 800120e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001212:	2302      	movs	r3, #2
 8001214:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001218:	2300      	movs	r3, #0
 800121a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800121e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001222:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001226:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800122a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800122e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001232:	2106      	movs	r1, #6
 8001234:	4618      	mov	r0, r3
 8001236:	f01b ffb1 	bl	801d19c <HAL_RCC_ClockConfig>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	bf14      	ite	ne
 8001240:	2301      	movne	r3, #1
 8001242:	2300      	moveq	r3, #0
 8001244:	b2db      	uxtb	r3, r3
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <_Z18SystemClock_Configv+0x10e>
  {
    Error_Handler();
 800124a:	f000 f847 	bl	80012dc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_I2C3
 800124e:	4b18      	ldr	r3, [pc, #96]	; (80012b0 <_Z18SystemClock_Configv+0x170>)
 8001250:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 114;
 8001252:	2372      	movs	r3, #114	; 0x72
 8001254:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8001256:	2305      	movs	r3, #5
 8001258:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800125a:	2302      	movs	r3, #2
 800125c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 800125e:	2303      	movs	r3, #3
 8001260:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8001262:	2301      	movs	r3, #1
 8001264:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8001266:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800126a:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800126c:	2300      	movs	r3, #0
 800126e:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8001270:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001274:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8001278:	2300      	movs	r3, #0
 800127a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800127e:	f107 0308 	add.w	r3, r7, #8
 8001282:	4618      	mov	r0, r3
 8001284:	f01c f8aa 	bl	801d3dc <HAL_RCCEx_PeriphCLKConfig>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	bf14      	ite	ne
 800128e:	2301      	movne	r3, #1
 8001290:	2300      	moveq	r3, #0
 8001292:	b2db      	uxtb	r3, r3
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <_Z18SystemClock_Configv+0x15c>
  {
    Error_Handler();
 8001298:	f000 f820 	bl	80012dc <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800129c:	f01c f852 	bl	801d344 <HAL_RCC_EnableCSS>
}
 80012a0:	bf00      	nop
 80012a2:	37d0      	adds	r7, #208	; 0xd0
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	40023800 	.word	0x40023800
 80012ac:	40007000 	.word	0x40007000
 80012b0:	00a10008 	.word	0x00a10008

080012b4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a05      	ldr	r2, [pc, #20]	; (80012d8 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d104      	bne.n	80012d0 <HAL_TIM_PeriodElapsedCallback+0x1c>
    HAL_IncTick();
 80012c6:	f01a fea9 	bl	801c01c <HAL_IncTick>
    lv_tick_inc(10);
 80012ca:	200a      	movs	r0, #10
 80012cc:	f012 fbfe 	bl	8013acc <lv_tick_inc>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80012d0:	bf00      	nop
 80012d2:	3708      	adds	r7, #8
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	40010000 	.word	0x40010000

080012dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  while (1)
 80012e0:	e7fe      	b.n	80012e0 <Error_Handler+0x4>
	...

080012e4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80012e4:	4b0a      	ldr	r3, [pc, #40]	; (8001310 <HAL_MspInit+0x2c>)
{
 80012e6:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 80012e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012ea:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80012ee:	641a      	str	r2, [r3, #64]	; 0x40
 80012f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012f2:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80012f6:	9200      	str	r2, [sp, #0]
 80012f8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80012fc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001300:	645a      	str	r2, [r3, #68]	; 0x44
 8001302:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001304:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001308:	9301      	str	r3, [sp, #4]
 800130a:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800130c:	b002      	add	sp, #8
 800130e:	4770      	bx	lr
 8001310:	40023800 	.word	0x40023800

08001314 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001314:	b530      	push	{r4, r5, lr}
 8001316:	4601      	mov	r1, r0
 8001318:	b089      	sub	sp, #36	; 0x24
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 800131a:	2200      	movs	r2, #0
 800131c:	2019      	movs	r0, #25
 800131e:	f01a feb5 	bl	801c08c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001322:	2019      	movs	r0, #25
 8001324:	f01a feec 	bl	801c100 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001328:	4b15      	ldr	r3, [pc, #84]	; (8001380 <HAL_InitTick+0x6c>)

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800132a:	a901      	add	r1, sp, #4
 800132c:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM1_CLK_ENABLE();
 800132e:	6c5a      	ldr	r2, [r3, #68]	; 0x44

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001330:	4d14      	ldr	r5, [pc, #80]	; (8001384 <HAL_InitTick+0x70>)
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001332:	f042 0201 	orr.w	r2, r2, #1

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001336:	4c14      	ldr	r4, [pc, #80]	; (8001388 <HAL_InitTick+0x74>)
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001338:	645a      	str	r2, [r3, #68]	; 0x44
 800133a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800133c:	f003 0301 	and.w	r3, r3, #1
 8001340:	9302      	str	r3, [sp, #8]
 8001342:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001344:	f01c f816 	bl	801d374 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001348:	f01c f804 	bl	801d354 <HAL_RCC_GetPCLK2Freq>
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800134c:	f240 32e7 	movw	r2, #999	; 0x3e7
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001350:	0043      	lsls	r3, r0, #1
  htim1.Instance = TIM1;
 8001352:	490e      	ldr	r1, [pc, #56]	; (800138c <HAL_InitTick+0x78>)
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001354:	60e2      	str	r2, [r4, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
  htim1.Init.ClockDivision = 0;
 8001356:	2200      	movs	r2, #0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001358:	fba5 0303 	umull	r0, r3, r5, r3
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800135c:	4620      	mov	r0, r4
  htim1.Instance = TIM1;
 800135e:	6021      	str	r1, [r4, #0]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001360:	0c9b      	lsrs	r3, r3, #18
  htim1.Init.ClockDivision = 0;
 8001362:	6122      	str	r2, [r4, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001364:	60a2      	str	r2, [r4, #8]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001366:	3b01      	subs	r3, #1
  htim1.Init.Prescaler = uwPrescalerValue;
 8001368:	6063      	str	r3, [r4, #4]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800136a:	f01c fb1f 	bl	801d9ac <HAL_TIM_Base_Init>
 800136e:	b110      	cbz	r0, 8001376 <HAL_InitTick+0x62>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
  }

  /* Return function status */
  return HAL_ERROR;
 8001370:	2001      	movs	r0, #1
}
 8001372:	b009      	add	sp, #36	; 0x24
 8001374:	bd30      	pop	{r4, r5, pc}
    return HAL_TIM_Base_Start_IT(&htim1);
 8001376:	4620      	mov	r0, r4
 8001378:	f01c fbc4 	bl	801db04 <HAL_TIM_Base_Start_IT>
}
 800137c:	b009      	add	sp, #36	; 0x24
 800137e:	bd30      	pop	{r4, r5, pc}
 8001380:	40023800 	.word	0x40023800
 8001384:	431bde83 	.word	0x431bde83
 8001388:	2002037c 	.word	0x2002037c
 800138c:	40010000 	.word	0x40010000

08001390 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001390:	b508      	push	{r3, lr}
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001392:	f01c f813 	bl	801d3bc <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001396:	e7fe      	b.n	8001396 <NMI_Handler+0x6>

08001398 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001398:	e7fe      	b.n	8001398 <HardFault_Handler>
 800139a:	bf00      	nop

0800139c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800139c:	e7fe      	b.n	800139c <MemManage_Handler>
 800139e:	bf00      	nop

080013a0 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013a0:	e7fe      	b.n	80013a0 <BusFault_Handler>
 80013a2:	bf00      	nop

080013a4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013a4:	e7fe      	b.n	80013a4 <UsageFault_Handler>
 80013a6:	bf00      	nop

080013a8 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop

080013ac <DebugMon_Handler>:
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop

080013b0 <PendSV_Handler>:
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop

080013b4 <SysTick_Handler>:
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop

080013b8 <TIM1_UP_TIM10_IRQHandler>:
void TIM1_UP_TIM10_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80013b8:	4801      	ldr	r0, [pc, #4]	; (80013c0 <TIM1_UP_TIM10_IRQHandler+0x8>)
 80013ba:	f01c bcad 	b.w	801dd18 <HAL_TIM_IRQHandler>
 80013be:	bf00      	nop
 80013c0:	2002037c 	.word	0x2002037c

080013c4 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80013c4:	4801      	ldr	r0, [pc, #4]	; (80013cc <TIM2_IRQHandler+0x8>)
 80013c6:	f01c bca7 	b.w	801dd18 <HAL_TIM_IRQHandler>
 80013ca:	bf00      	nop
 80013cc:	200203c8 	.word	0x200203c8

080013d0 <DMA2_Stream3_IRQHandler>:
void DMA2_Stream3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 80013d0:	4801      	ldr	r0, [pc, #4]	; (80013d8 <DMA2_Stream3_IRQHandler+0x8>)
 80013d2:	f01a bea3 	b.w	801c11c <HAL_DMA_IRQHandler>
 80013d6:	bf00      	nop
 80013d8:	200202bc 	.word	0x200202bc

080013dc <DMA2_Stream6_IRQHandler>:
void DMA2_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 80013dc:	4801      	ldr	r0, [pc, #4]	; (80013e4 <DMA2_Stream6_IRQHandler+0x8>)
 80013de:	f01a be9d 	b.w	801c11c <HAL_DMA_IRQHandler>
 80013e2:	bf00      	nop
 80013e4:	2002031c 	.word	0x2002031c

080013e8 <I2C3_EV_IRQHandler>:
void I2C3_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 80013e8:	4801      	ldr	r0, [pc, #4]	; (80013f0 <I2C3_EV_IRQHandler+0x8>)
 80013ea:	f01b baef 	b.w	801c9cc <HAL_I2C_EV_IRQHandler>
 80013ee:	bf00      	nop
 80013f0:	200201ec 	.word	0x200201ec

080013f4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013f4:	4b05      	ldr	r3, [pc, #20]	; (800140c <SystemInit+0x18>)

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80013f6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013fa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80013fe:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8001402:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001406:	6099      	str	r1, [r3, #8]
#endif
}
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	e000ed00 	.word	0xe000ed00

08001410 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001410:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 10000;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001412:	2300      	movs	r3, #0
{
 8001414:	b088      	sub	sp, #32
  htim2.Instance = TIM2;
 8001416:	4818      	ldr	r0, [pc, #96]	; (8001478 <MX_TIM2_Init+0x68>)
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001418:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800141c:	f242 7210 	movw	r2, #10000	; 0x2710
 8001420:	2464      	movs	r4, #100	; 0x64
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001422:	9304      	str	r3, [sp, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001424:	9301      	str	r3, [sp, #4]
  htim2.Init.Period = 100;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001426:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001428:	6183      	str	r3, [r0, #24]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800142a:	9307      	str	r3, [sp, #28]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800142c:	e880 001e 	stmia.w	r0, {r1, r2, r3, r4}
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001430:	e9cd 3305 	strd	r3, r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001434:	e9cd 3302 	strd	r3, r3, [sp, #8]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001438:	f01c fab8 	bl	801d9ac <HAL_TIM_Base_Init>
 800143c:	b990      	cbnz	r0, 8001464 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800143e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001442:	a904      	add	r1, sp, #16
 8001444:	480c      	ldr	r0, [pc, #48]	; (8001478 <MX_TIM2_Init+0x68>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001446:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001448:	f01c fbb8 	bl	801dbbc <HAL_TIM_ConfigClockSource>
 800144c:	b988      	cbnz	r0, 8001472 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800144e:	2220      	movs	r2, #32
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001450:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001452:	a901      	add	r1, sp, #4
 8001454:	4808      	ldr	r0, [pc, #32]	; (8001478 <MX_TIM2_Init+0x68>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001456:	9201      	str	r2, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001458:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800145a:	f01c fd15 	bl	801de88 <HAL_TIMEx_MasterConfigSynchronization>
 800145e:	b920      	cbnz	r0, 800146a <MX_TIM2_Init+0x5a>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001460:	b008      	add	sp, #32
 8001462:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001464:	f7ff ff3a 	bl	80012dc <Error_Handler>
 8001468:	e7e9      	b.n	800143e <MX_TIM2_Init+0x2e>
    Error_Handler();
 800146a:	f7ff ff37 	bl	80012dc <Error_Handler>
}
 800146e:	b008      	add	sp, #32
 8001470:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001472:	f7ff ff33 	bl	80012dc <Error_Handler>
 8001476:	e7ea      	b.n	800144e <MX_TIM2_Init+0x3e>
 8001478:	200203c8 	.word	0x200203c8

0800147c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM2)
 800147c:	6803      	ldr	r3, [r0, #0]
 800147e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001482:	d000      	beq.n	8001486 <HAL_TIM_Base_MspInit+0xa>
 8001484:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001486:	f503 330e 	add.w	r3, r3, #145408	; 0x23800

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800148a:	2200      	movs	r2, #0
 800148c:	201c      	movs	r0, #28
 800148e:	4611      	mov	r1, r2
{
 8001490:	b510      	push	{r4, lr}
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001492:	6c1c      	ldr	r4, [r3, #64]	; 0x40
{
 8001494:	b082      	sub	sp, #8
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001496:	f044 0401 	orr.w	r4, r4, #1
 800149a:	641c      	str	r4, [r3, #64]	; 0x40
 800149c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	9301      	str	r3, [sp, #4]
 80014a4:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80014a6:	f01a fdf1 	bl	801c08c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80014aa:	201c      	movs	r0, #28
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80014ac:	b002      	add	sp, #8
 80014ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80014b2:	f01a be25 	b.w	801c100 <HAL_NVIC_EnableIRQ>
 80014b6:	bf00      	nop

080014b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80014b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014f0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80014bc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80014be:	e003      	b.n	80014c8 <LoopCopyDataInit>

080014c0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80014c0:	4b0c      	ldr	r3, [pc, #48]	; (80014f4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80014c2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80014c4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80014c6:	3104      	adds	r1, #4

080014c8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80014c8:	480b      	ldr	r0, [pc, #44]	; (80014f8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80014ca:	4b0c      	ldr	r3, [pc, #48]	; (80014fc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80014cc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80014ce:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80014d0:	d3f6      	bcc.n	80014c0 <CopyDataInit>
  ldr  r2, =_sbss
 80014d2:	4a0b      	ldr	r2, [pc, #44]	; (8001500 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80014d4:	e002      	b.n	80014dc <LoopFillZerobss>

080014d6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80014d6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80014d8:	f842 3b04 	str.w	r3, [r2], #4

080014dc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80014dc:	4b09      	ldr	r3, [pc, #36]	; (8001504 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80014de:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80014e0:	d3f9      	bcc.n	80014d6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80014e2:	f7ff ff87 	bl	80013f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014e6:	f01c fde9 	bl	801e0bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014ea:	f7ff fdf3 	bl	80010d4 <main>
  bx  lr    
 80014ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014f0:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80014f4:	080218c8 	.word	0x080218c8
  ldr  r0, =_sdata
 80014f8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80014fc:	20000054 	.word	0x20000054
  ldr  r2, =_sbss
 8001500:	20000058 	.word	0x20000058
  ldr  r3, = _ebss
 8001504:	200205a0 	.word	0x200205a0

08001508 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001508:	e7fe      	b.n	8001508 <ADC_IRQHandler>
	...

0800150c <lv_disp_get_scr_act>:
 * screen)
 * @return pointer to the active screen object (loaded by 'lv_scr_load()')
 */
lv_obj_t * lv_disp_get_scr_act(lv_disp_t * disp)
{
    if(!disp) disp = lv_disp_get_default();
 800150c:	b108      	cbz	r0, 8001512 <lv_disp_get_scr_act+0x6>
    if(!disp) {
        LV_LOG_WARN("no display registered to get its active screen");
        return NULL;
    }

    return disp->act_scr;
 800150e:	6c40      	ldr	r0, [r0, #68]	; 0x44
}
 8001510:	4770      	bx	lr
{
 8001512:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
 8001514:	f012 f9ba 	bl	801388c <lv_disp_get_default>
    if(!disp) {
 8001518:	b100      	cbz	r0, 800151c <lv_disp_get_scr_act+0x10>
    return disp->act_scr;
 800151a:	6c40      	ldr	r0, [r0, #68]	; 0x44
}
 800151c:	bd08      	pop	{r3, pc}
 800151e:	bf00      	nop

08001520 <lv_disp_get_scr_prev>:
 * screen)
 * @return pointer to the previous screen object or NULL if not used now
 */
lv_obj_t * lv_disp_get_scr_prev(lv_disp_t * disp)
{
    if(!disp) disp = lv_disp_get_default();
 8001520:	b108      	cbz	r0, 8001526 <lv_disp_get_scr_prev+0x6>
    if(!disp) {
        LV_LOG_WARN("no display registered to get its previous screen");
        return NULL;
    }

    return disp->prev_scr;
 8001522:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
 8001524:	4770      	bx	lr
{
 8001526:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
 8001528:	f012 f9b0 	bl	801388c <lv_disp_get_default>
    if(!disp) {
 800152c:	b100      	cbz	r0, 8001530 <lv_disp_get_scr_prev+0x10>
    return disp->prev_scr;
 800152e:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
 8001530:	bd08      	pop	{r3, pc}
 8001532:	bf00      	nop

08001534 <lv_disp_get_layer_top>:
 * @param disp pointer to display which top layer should be get. (NULL to use the default screen)
 * @return pointer to the top layer object  (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_top(lv_disp_t * disp)
{
    if(!disp) disp = lv_disp_get_default();
 8001534:	b108      	cbz	r0, 800153a <lv_disp_get_layer_top+0x6>
    if(!disp) {
        LV_LOG_WARN("lv_layer_top: no display registered to get its top layer");
        return NULL;
    }

    return disp->top_layer;
 8001536:	6d00      	ldr	r0, [r0, #80]	; 0x50
}
 8001538:	4770      	bx	lr
{
 800153a:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
 800153c:	f012 f9a6 	bl	801388c <lv_disp_get_default>
    if(!disp) {
 8001540:	b100      	cbz	r0, 8001544 <lv_disp_get_layer_top+0x10>
    return disp->top_layer;
 8001542:	6d00      	ldr	r0, [r0, #80]	; 0x50
}
 8001544:	bd08      	pop	{r3, pc}
 8001546:	bf00      	nop

08001548 <lv_disp_get_layer_sys>:
 * @param disp pointer to display which sys. layer should be get. (NULL to use the default screen)
 * @return pointer to the sys layer object  (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_sys(lv_disp_t * disp)
{
    if(!disp) disp = lv_disp_get_default();
 8001548:	b108      	cbz	r0, 800154e <lv_disp_get_layer_sys+0x6>
    if(!disp) {
        LV_LOG_WARN("lv_layer_sys: no display registered to get its sys. layer");
        return NULL;
    }

    return disp->sys_layer;
 800154a:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 800154c:	4770      	bx	lr
{
 800154e:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
 8001550:	f012 f99c 	bl	801388c <lv_disp_get_default>
    if(!disp) {
 8001554:	b100      	cbz	r0, 8001558 <lv_disp_get_layer_sys+0x10>
    return disp->sys_layer;
 8001556:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 8001558:	bd08      	pop	{r3, pc}
 800155a:	bf00      	nop

0800155c <focus_next_core.part.0>:
        lv_group_focus_prev(g);
    /*Restore wrap property*/
    g->wrap = temp_wrap;
}

static void focus_next_core(lv_group_t * group, void * (*begin)(const lv_ll_t *),
 800155c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if(group->frozen) return;

    lv_obj_t ** obj_next     = group->obj_focus;
    lv_obj_t ** obj_sentinel = NULL;
    bool can_move            = true;
    bool can_begin           = true;
 8001560:	f04f 0901 	mov.w	r9, #1
static void focus_next_core(lv_group_t * group, void * (*begin)(const lv_ll_t *),
 8001564:	4606      	mov	r6, r0
 8001566:	468a      	mov	sl, r1
 8001568:	4690      	mov	r8, r2
    lv_obj_t ** obj_sentinel = NULL;
 800156a:	2500      	movs	r5, #0
    lv_obj_t ** obj_next     = group->obj_focus;
 800156c:	68c4      	ldr	r4, [r0, #12]

    for(;;) {
        if(obj_next == NULL) {
 800156e:	b344      	cbz	r4, 80015c2 <focus_next_core.part.0+0x66>
                /*Currently focused object is the last/first in the group, keep it that way*/
                return;
            }
        }

        if(obj_sentinel == NULL) {
 8001570:	2d00      	cmp	r5, #0
 8001572:	bf08      	it	eq
 8001574:	4625      	moveq	r5, r4
            obj_sentinel = obj_next;
            if(obj_sentinel == NULL) return; /*Group is empty*/
        }

        if(can_move) {
            obj_next = move(&group->obj_ll, obj_next);
 8001576:	4621      	mov	r1, r4
 8001578:	4630      	mov	r0, r6
 800157a:	47c0      	blx	r8

            /*Give up if we walked the entire list and haven't found another visible object*/
            if(obj_next == obj_sentinel) return;
 800157c:	42a8      	cmp	r0, r5
            obj_next = move(&group->obj_ll, obj_next);
 800157e:	4604      	mov	r4, r0
            if(obj_next == obj_sentinel) return;
 8001580:	d01d      	beq.n	80015be <focus_next_core.part.0+0x62>
        }

        can_move = true;

        if(obj_next == NULL) continue;
 8001582:	b1f4      	cbz	r4, 80015c2 <focus_next_core.part.0+0x66>
        if(lv_obj_get_state(*obj_next, LV_OBJ_PART_MAIN) & LV_STATE_DISABLED) continue;
 8001584:	2100      	movs	r1, #0
 8001586:	6820      	ldr	r0, [r4, #0]
 8001588:	f004 ff4e 	bl	8006428 <lv_obj_get_state>
 800158c:	0683      	lsls	r3, r0, #26
 800158e:	d4ee      	bmi.n	800156e <focus_next_core.part.0+0x12>

        /*Hidden and disabled objects don't receive focus*/
        if(!lv_obj_get_hidden(*obj_next)) break;
 8001590:	6820      	ldr	r0, [r4, #0]
 8001592:	f004 febb 	bl	800630c <lv_obj_get_hidden>
 8001596:	4607      	mov	r7, r0
 8001598:	2800      	cmp	r0, #0
 800159a:	d1e8      	bne.n	800156e <focus_next_core.part.0+0x12>
    }

    if(obj_next == group->obj_focus) return; /*There's only one visible object and it's already focused*/
 800159c:	68f3      	ldr	r3, [r6, #12]
 800159e:	42a3      	cmp	r3, r4
 80015a0:	d00d      	beq.n	80015be <focus_next_core.part.0+0x62>

    if(group->obj_focus) {
 80015a2:	b33b      	cbz	r3, 80015f4 <focus_next_core.part.0+0x98>
        (*group->obj_focus)->signal_cb(*group->obj_focus, LV_SIGNAL_DEFOCUS, NULL);
 80015a4:	6818      	ldr	r0, [r3, #0]
 80015a6:	463a      	mov	r2, r7
 80015a8:	2117      	movs	r1, #23
 80015aa:	69c3      	ldr	r3, [r0, #28]
 80015ac:	4798      	blx	r3
        lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_DEFOCUSED, NULL);
 80015ae:	68f3      	ldr	r3, [r6, #12]
 80015b0:	463a      	mov	r2, r7
 80015b2:	210e      	movs	r1, #14
 80015b4:	6818      	ldr	r0, [r3, #0]
 80015b6:	f002 f8fd 	bl	80037b4 <lv_event_send>
        if(res != LV_RES_OK) return;
 80015ba:	2801      	cmp	r0, #1
 80015bc:	d016      	beq.n	80015ec <focus_next_core.part.0+0x90>
    obj_to_foreground(*group->obj_focus);

    lv_obj_invalidate(*group->obj_focus);

    if(group->focus_cb) group->focus_cb(group);
}
 80015be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            if(group->wrap || obj_sentinel == NULL) {
 80015c2:	7d33      	ldrb	r3, [r6, #20]
 80015c4:	06da      	lsls	r2, r3, #27
 80015c6:	d401      	bmi.n	80015cc <focus_next_core.part.0+0x70>
 80015c8:	2d00      	cmp	r5, #0
 80015ca:	d1f8      	bne.n	80015be <focus_next_core.part.0+0x62>
                if(!can_begin) return;
 80015cc:	f1b9 0f00 	cmp.w	r9, #0
 80015d0:	d0f5      	beq.n	80015be <focus_next_core.part.0+0x62>
                obj_next  = begin(&group->obj_ll);
 80015d2:	4630      	mov	r0, r6
 80015d4:	47d0      	blx	sl
 80015d6:	4604      	mov	r4, r0
        if(obj_sentinel == NULL) {
 80015d8:	b115      	cbz	r5, 80015e0 <focus_next_core.part.0+0x84>
                can_begin = false;
 80015da:	f04f 0900 	mov.w	r9, #0
 80015de:	e7d0      	b.n	8001582 <focus_next_core.part.0+0x26>
            if(obj_sentinel == NULL) return; /*Group is empty*/
 80015e0:	2800      	cmp	r0, #0
 80015e2:	d0ec      	beq.n	80015be <focus_next_core.part.0+0x62>
 80015e4:	4605      	mov	r5, r0
                can_begin = false;
 80015e6:	f04f 0900 	mov.w	r9, #0
 80015ea:	e7cb      	b.n	8001584 <focus_next_core.part.0+0x28>
        lv_obj_invalidate(*group->obj_focus);
 80015ec:	68f3      	ldr	r3, [r6, #12]
 80015ee:	6818      	ldr	r0, [r3, #0]
 80015f0:	f002 face 	bl	8003b90 <lv_obj_invalidate>
    (*group->obj_focus)->signal_cb(*group->obj_focus, LV_SIGNAL_FOCUS, NULL);
 80015f4:	6820      	ldr	r0, [r4, #0]
 80015f6:	2200      	movs	r2, #0
 80015f8:	2116      	movs	r1, #22
    group->obj_focus = obj_next;
 80015fa:	60f4      	str	r4, [r6, #12]
    (*group->obj_focus)->signal_cb(*group->obj_focus, LV_SIGNAL_FOCUS, NULL);
 80015fc:	69c3      	ldr	r3, [r0, #28]
 80015fe:	4798      	blx	r3
    lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_FOCUSED, NULL);
 8001600:	68f3      	ldr	r3, [r6, #12]
 8001602:	2200      	movs	r2, #0
 8001604:	210d      	movs	r1, #13
 8001606:	6818      	ldr	r0, [r3, #0]
 8001608:	f002 f8d4 	bl	80037b4 <lv_event_send>
    if(res != LV_RES_OK) return;
 800160c:	2801      	cmp	r0, #1
 800160e:	d1d6      	bne.n	80015be <focus_next_core.part.0+0x62>
    obj_to_foreground(*group->obj_focus);
 8001610:	68f3      	ldr	r3, [r6, #12]
 8001612:	6818      	ldr	r0, [r3, #0]
static void obj_to_foreground(lv_obj_t * obj)
{
    /*Search for 'top' attribute*/
    lv_obj_t * i        = obj;
    lv_obj_t * last_top = NULL;
    while(i != NULL) {
 8001614:	b180      	cbz	r0, 8001638 <focus_next_core.part.0+0xdc>
    lv_obj_t * last_top = NULL;
 8001616:	2400      	movs	r4, #0
        if(i->top != 0) last_top = i;
 8001618:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 800161c:	f013 0f20 	tst.w	r3, #32
 8001620:	bf18      	it	ne
 8001622:	4604      	movne	r4, r0
        i = lv_obj_get_parent(i);
 8001624:	f003 fb06 	bl	8004c34 <lv_obj_get_parent>
    while(i != NULL) {
 8001628:	2800      	cmp	r0, #0
 800162a:	d1f5      	bne.n	8001618 <focus_next_core.part.0+0xbc>
    }

    if(last_top != NULL) {
 800162c:	b114      	cbz	r4, 8001634 <focus_next_core.part.0+0xd8>
        /*Move the last_top object to the foreground*/
        lv_obj_move_foreground(last_top);
 800162e:	4620      	mov	r0, r4
 8001630:	f002 fafc 	bl	8003c2c <lv_obj_move_foreground>
 8001634:	68f3      	ldr	r3, [r6, #12]
 8001636:	6818      	ldr	r0, [r3, #0]
    lv_obj_invalidate(*group->obj_focus);
 8001638:	f002 faaa 	bl	8003b90 <lv_obj_invalidate>
    if(group->focus_cb) group->focus_cb(group);
 800163c:	6933      	ldr	r3, [r6, #16]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d0bd      	beq.n	80015be <focus_next_core.part.0+0x62>
 8001642:	4630      	mov	r0, r6
}
 8001644:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if(group->focus_cb) group->focus_cb(group);
 8001648:	4718      	bx	r3
 800164a:	bf00      	nop

0800164c <_lv_group_init>:
    _lv_ll_init(&LV_GC_ROOT(_lv_group_ll), sizeof(lv_group_t));
 800164c:	2118      	movs	r1, #24
 800164e:	4801      	ldr	r0, [pc, #4]	; (8001654 <_lv_group_init+0x8>)
 8001650:	f013 b9ae 	b.w	80149b0 <_lv_ll_init>
 8001654:	20020584 	.word	0x20020584

08001658 <lv_group_add_obj>:
    if(group == NULL) return;
 8001658:	2800      	cmp	r0, #0
 800165a:	d051      	beq.n	8001700 <lv_group_add_obj+0xa8>
{
 800165c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800165e:	460d      	mov	r5, r1
 8001660:	4604      	mov	r4, r0
    _LV_LL_READ(group->obj_ll, obj_i) {
 8001662:	f013 fa83 	bl	8014b6c <_lv_ll_get_head>
 8001666:	4601      	mov	r1, r0
 8001668:	b920      	cbnz	r0, 8001674 <lv_group_add_obj+0x1c>
 800166a:	e008      	b.n	800167e <lv_group_add_obj+0x26>
 800166c:	f013 fa86 	bl	8014b7c <_lv_ll_get_next>
 8001670:	4601      	mov	r1, r0
 8001672:	b120      	cbz	r0, 800167e <lv_group_add_obj+0x26>
        if((*obj_i) == obj) {
 8001674:	680b      	ldr	r3, [r1, #0]
    _LV_LL_READ(group->obj_ll, obj_i) {
 8001676:	4620      	mov	r0, r4
        if((*obj_i) == obj) {
 8001678:	42ab      	cmp	r3, r5
 800167a:	d1f7      	bne.n	800166c <lv_group_add_obj+0x14>
}
 800167c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(obj->group_p) {
 800167e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8001680:	b1c3      	cbz	r3, 80016b4 <lv_group_add_obj+0x5c>
        if(lv_obj_is_focused(obj)) {
 8001682:	4628      	mov	r0, r5
 8001684:	f004 ff3a 	bl	80064fc <lv_obj_is_focused>
 8001688:	b1a0      	cbz	r0, 80016b4 <lv_group_add_obj+0x5c>
            lv_group_refocus(obj->group_p);
 800168a:	6bae      	ldr	r6, [r5, #56]	; 0x38
    uint8_t temp_wrap = g->wrap;
 800168c:	7d33      	ldrb	r3, [r6, #20]
    g->wrap           = 1;
 800168e:	f043 0210 	orr.w	r2, r3, #16
    uint8_t temp_wrap = g->wrap;
 8001692:	f3c3 1700 	ubfx	r7, r3, #4, #1
    if(g->refocus_policy == LV_GROUP_REFOCUS_POLICY_NEXT)
 8001696:	4613      	mov	r3, r2
    g->wrap           = 1;
 8001698:	7532      	strb	r2, [r6, #20]
    if(g->refocus_policy == LV_GROUP_REFOCUS_POLICY_NEXT)
 800169a:	071a      	lsls	r2, r3, #28
 800169c:	d43e      	bmi.n	800171c <lv_group_add_obj+0xc4>
    if(group->frozen) return;
 800169e:	07db      	lsls	r3, r3, #31
 80016a0:	d404      	bmi.n	80016ac <lv_group_add_obj+0x54>
void lv_group_focus_next(lv_group_t * group)
 80016a2:	4a22      	ldr	r2, [pc, #136]	; (800172c <lv_group_add_obj+0xd4>)
 80016a4:	4630      	mov	r0, r6
 80016a6:	4922      	ldr	r1, [pc, #136]	; (8001730 <lv_group_add_obj+0xd8>)
 80016a8:	f7ff ff58 	bl	800155c <focus_next_core.part.0>
    g->wrap = temp_wrap;
 80016ac:	7d33      	ldrb	r3, [r6, #20]
 80016ae:	f367 1304 	bfi	r3, r7, #4, #1
 80016b2:	7533      	strb	r3, [r6, #20]
    lv_obj_t ** next = _lv_ll_ins_tail(&group->obj_ll);
 80016b4:	4620      	mov	r0, r4
    obj->group_p     = group;
 80016b6:	63ac      	str	r4, [r5, #56]	; 0x38
    lv_obj_t ** next = _lv_ll_ins_tail(&group->obj_ll);
 80016b8:	f013 f9c6 	bl	8014a48 <_lv_ll_ins_tail>
 80016bc:	4606      	mov	r6, r0
    LV_ASSERT_MEM(next);
 80016be:	f013 f883 	bl	80147c8 <lv_debug_check_null>
 80016c2:	4603      	mov	r3, r0
 80016c4:	b1e8      	cbz	r0, 8001702 <lv_group_add_obj+0xaa>
    if(next == NULL) return;
 80016c6:	2e00      	cmp	r6, #0
 80016c8:	d0d8      	beq.n	800167c <lv_group_add_obj+0x24>
    if(_lv_ll_get_head(&group->obj_ll) == next) {
 80016ca:	4620      	mov	r0, r4
    *next = obj;
 80016cc:	6035      	str	r5, [r6, #0]
    if(_lv_ll_get_head(&group->obj_ll) == next) {
 80016ce:	f013 fa4d 	bl	8014b6c <_lv_ll_get_head>
 80016d2:	4286      	cmp	r6, r0
 80016d4:	d1d2      	bne.n	800167c <lv_group_add_obj+0x24>
    uint8_t temp_wrap = g->wrap;
 80016d6:	7d23      	ldrb	r3, [r4, #20]
    g->wrap           = 1;
 80016d8:	f043 0210 	orr.w	r2, r3, #16
    uint8_t temp_wrap = g->wrap;
 80016dc:	f3c3 1500 	ubfx	r5, r3, #4, #1
    if(g->refocus_policy == LV_GROUP_REFOCUS_POLICY_NEXT)
 80016e0:	0711      	lsls	r1, r2, #28
 80016e2:	4613      	mov	r3, r2
    g->wrap           = 1;
 80016e4:	7522      	strb	r2, [r4, #20]
    if(g->refocus_policy == LV_GROUP_REFOCUS_POLICY_NEXT)
 80016e6:	d411      	bmi.n	800170c <lv_group_add_obj+0xb4>
    if(group->frozen) return;
 80016e8:	07da      	lsls	r2, r3, #31
 80016ea:	d404      	bmi.n	80016f6 <lv_group_add_obj+0x9e>
void lv_group_focus_next(lv_group_t * group)
 80016ec:	4a0f      	ldr	r2, [pc, #60]	; (800172c <lv_group_add_obj+0xd4>)
 80016ee:	4620      	mov	r0, r4
 80016f0:	490f      	ldr	r1, [pc, #60]	; (8001730 <lv_group_add_obj+0xd8>)
 80016f2:	f7ff ff33 	bl	800155c <focus_next_core.part.0>
    g->wrap = temp_wrap;
 80016f6:	7d23      	ldrb	r3, [r4, #20]
 80016f8:	f365 1304 	bfi	r3, r5, #4, #1
 80016fc:	7523      	strb	r3, [r4, #20]
}
 80016fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001700:	4770      	bx	lr
    LV_ASSERT_MEM(next);
 8001702:	4632      	mov	r2, r6
 8001704:	480b      	ldr	r0, [pc, #44]	; (8001734 <lv_group_add_obj+0xdc>)
 8001706:	f013 f863 	bl	80147d0 <lv_debug_log_error>
 800170a:	e7fe      	b.n	800170a <lv_group_add_obj+0xb2>
    if(group->frozen) return;
 800170c:	07db      	lsls	r3, r3, #31
 800170e:	d4f2      	bmi.n	80016f6 <lv_group_add_obj+0x9e>
void lv_group_focus_prev(lv_group_t * group)
 8001710:	4a09      	ldr	r2, [pc, #36]	; (8001738 <lv_group_add_obj+0xe0>)
 8001712:	4620      	mov	r0, r4
 8001714:	4909      	ldr	r1, [pc, #36]	; (800173c <lv_group_add_obj+0xe4>)
 8001716:	f7ff ff21 	bl	800155c <focus_next_core.part.0>
}
 800171a:	e7ec      	b.n	80016f6 <lv_group_add_obj+0x9e>
    if(group->frozen) return;
 800171c:	07d8      	lsls	r0, r3, #31
 800171e:	d4c5      	bmi.n	80016ac <lv_group_add_obj+0x54>
void lv_group_focus_prev(lv_group_t * group)
 8001720:	4a05      	ldr	r2, [pc, #20]	; (8001738 <lv_group_add_obj+0xe0>)
 8001722:	4630      	mov	r0, r6
 8001724:	4905      	ldr	r1, [pc, #20]	; (800173c <lv_group_add_obj+0xe4>)
 8001726:	f7ff ff19 	bl	800155c <focus_next_core.part.0>
}
 800172a:	e7bf      	b.n	80016ac <lv_group_add_obj+0x54>
 800172c:	08014b7d 	.word	0x08014b7d
 8001730:	08014b6d 	.word	0x08014b6d
 8001734:	0801e1c4 	.word	0x0801e1c4
 8001738:	08014b89 	.word	0x08014b89
 800173c:	08014b75 	.word	0x08014b75

08001740 <lv_group_remove_obj>:
{
 8001740:	b570      	push	{r4, r5, r6, lr}
    lv_group_t * g = obj->group_p;
 8001742:	6b84      	ldr	r4, [r0, #56]	; 0x38
{
 8001744:	b082      	sub	sp, #8
    if(g == NULL) return;
 8001746:	b1dc      	cbz	r4, 8001780 <lv_group_remove_obj+0x40>
    if(*g->obj_focus == obj) {
 8001748:	68e3      	ldr	r3, [r4, #12]
 800174a:	4605      	mov	r5, r0
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4283      	cmp	r3, r0
 8001750:	d018      	beq.n	8001784 <lv_group_remove_obj+0x44>
    _LV_LL_READ(g->obj_ll, i) {
 8001752:	4620      	mov	r0, r4
 8001754:	f013 fa0a 	bl	8014b6c <_lv_ll_get_head>
 8001758:	4601      	mov	r1, r0
 800175a:	b920      	cbnz	r0, 8001766 <lv_group_remove_obj+0x26>
 800175c:	e010      	b.n	8001780 <lv_group_remove_obj+0x40>
 800175e:	f013 fa0d 	bl	8014b7c <_lv_ll_get_next>
 8001762:	4601      	mov	r1, r0
 8001764:	b160      	cbz	r0, 8001780 <lv_group_remove_obj+0x40>
        if(*i == obj) {
 8001766:	680b      	ldr	r3, [r1, #0]
    _LV_LL_READ(g->obj_ll, i) {
 8001768:	4620      	mov	r0, r4
        if(*i == obj) {
 800176a:	42ab      	cmp	r3, r5
 800176c:	d1f7      	bne.n	800175e <lv_group_remove_obj+0x1e>
            _lv_ll_remove(&g->obj_ll, i);
 800176e:	9101      	str	r1, [sp, #4]
 8001770:	f013 f980 	bl	8014a74 <_lv_ll_remove>
            lv_mem_free(i);
 8001774:	9901      	ldr	r1, [sp, #4]
 8001776:	4608      	mov	r0, r1
 8001778:	f013 fb58 	bl	8014e2c <lv_mem_free>
            obj->group_p = NULL;
 800177c:	2300      	movs	r3, #0
 800177e:	63ab      	str	r3, [r5, #56]	; 0x38
}
 8001780:	b002      	add	sp, #8
 8001782:	bd70      	pop	{r4, r5, r6, pc}
        if(g->frozen) g->frozen = 0;
 8001784:	7d23      	ldrb	r3, [r4, #20]
 8001786:	07de      	lsls	r6, r3, #31
 8001788:	d502      	bpl.n	8001790 <lv_group_remove_obj+0x50>
 800178a:	f36f 0300 	bfc	r3, #0, #1
 800178e:	7523      	strb	r3, [r4, #20]
        if(_lv_ll_get_head(&g->obj_ll) == g->obj_focus && _lv_ll_get_tail(&g->obj_ll) == g->obj_focus) {
 8001790:	4620      	mov	r0, r4
 8001792:	f013 f9eb 	bl	8014b6c <_lv_ll_get_head>
 8001796:	68e2      	ldr	r2, [r4, #12]
 8001798:	4282      	cmp	r2, r0
 800179a:	d023      	beq.n	80017e4 <lv_group_remove_obj+0xa4>
    uint8_t temp_wrap = g->wrap;
 800179c:	7d23      	ldrb	r3, [r4, #20]
    g->wrap           = 1;
 800179e:	f043 0110 	orr.w	r1, r3, #16
    uint8_t temp_wrap = g->wrap;
 80017a2:	f3c3 1600 	ubfx	r6, r3, #4, #1
    if(g->refocus_policy == LV_GROUP_REFOCUS_POLICY_NEXT)
 80017a6:	0708      	lsls	r0, r1, #28
 80017a8:	460b      	mov	r3, r1
    g->wrap           = 1;
 80017aa:	7521      	strb	r1, [r4, #20]
    if(g->refocus_policy == LV_GROUP_REFOCUS_POLICY_NEXT)
 80017ac:	d511      	bpl.n	80017d2 <lv_group_remove_obj+0x92>
    if(group->frozen) return;
 80017ae:	07db      	lsls	r3, r3, #31
 80017b0:	d405      	bmi.n	80017be <lv_group_remove_obj+0x7e>
void lv_group_focus_prev(lv_group_t * group)
 80017b2:	4a13      	ldr	r2, [pc, #76]	; (8001800 <lv_group_remove_obj+0xc0>)
 80017b4:	4620      	mov	r0, r4
 80017b6:	4913      	ldr	r1, [pc, #76]	; (8001804 <lv_group_remove_obj+0xc4>)
 80017b8:	f7ff fed0 	bl	800155c <focus_next_core.part.0>
 80017bc:	68e2      	ldr	r2, [r4, #12]
    g->wrap = temp_wrap;
 80017be:	7d23      	ldrb	r3, [r4, #20]
 80017c0:	f366 1304 	bfi	r3, r6, #4, #1
 80017c4:	7523      	strb	r3, [r4, #20]
    if(*g->obj_focus == obj) {
 80017c6:	6813      	ldr	r3, [r2, #0]
 80017c8:	42ab      	cmp	r3, r5
 80017ca:	d1c2      	bne.n	8001752 <lv_group_remove_obj+0x12>
        g->obj_focus = NULL;
 80017cc:	2300      	movs	r3, #0
 80017ce:	60e3      	str	r3, [r4, #12]
 80017d0:	e7bf      	b.n	8001752 <lv_group_remove_obj+0x12>
    if(group->frozen) return;
 80017d2:	07d9      	lsls	r1, r3, #31
 80017d4:	d4f3      	bmi.n	80017be <lv_group_remove_obj+0x7e>
void lv_group_focus_next(lv_group_t * group)
 80017d6:	4a0c      	ldr	r2, [pc, #48]	; (8001808 <lv_group_remove_obj+0xc8>)
 80017d8:	4620      	mov	r0, r4
 80017da:	490c      	ldr	r1, [pc, #48]	; (800180c <lv_group_remove_obj+0xcc>)
 80017dc:	f7ff febe 	bl	800155c <focus_next_core.part.0>
 80017e0:	68e2      	ldr	r2, [r4, #12]
}
 80017e2:	e7ec      	b.n	80017be <lv_group_remove_obj+0x7e>
        if(_lv_ll_get_head(&g->obj_ll) == g->obj_focus && _lv_ll_get_tail(&g->obj_ll) == g->obj_focus) {
 80017e4:	4620      	mov	r0, r4
 80017e6:	f013 f9c5 	bl	8014b74 <_lv_ll_get_tail>
 80017ea:	68e2      	ldr	r2, [r4, #12]
 80017ec:	4282      	cmp	r2, r0
 80017ee:	d1d5      	bne.n	800179c <lv_group_remove_obj+0x5c>
            (*g->obj_focus)->signal_cb(*g->obj_focus, LV_SIGNAL_DEFOCUS, NULL);
 80017f0:	6810      	ldr	r0, [r2, #0]
 80017f2:	2117      	movs	r1, #23
 80017f4:	2200      	movs	r2, #0
 80017f6:	69c3      	ldr	r3, [r0, #28]
 80017f8:	4798      	blx	r3
 80017fa:	68e2      	ldr	r2, [r4, #12]
 80017fc:	e7e3      	b.n	80017c6 <lv_group_remove_obj+0x86>
 80017fe:	bf00      	nop
 8001800:	08014b89 	.word	0x08014b89
 8001804:	08014b75 	.word	0x08014b75
 8001808:	08014b7d 	.word	0x08014b7d
 800180c:	08014b6d 	.word	0x08014b6d

08001810 <lv_group_focus_obj>:
    if(obj == NULL) return;
 8001810:	2800      	cmp	r0, #0
 8001812:	d043      	beq.n	800189c <lv_group_focus_obj+0x8c>
{
 8001814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    lv_group_t * g = obj->group_p;
 8001816:	6b86      	ldr	r6, [r0, #56]	; 0x38
    if(g == NULL) return;
 8001818:	4605      	mov	r5, r0
 800181a:	2e00      	cmp	r6, #0
 800181c:	d03d      	beq.n	800189a <lv_group_focus_obj+0x8a>
    if(g->frozen != 0) return;
 800181e:	7d33      	ldrb	r3, [r6, #20]
 8001820:	f013 0701 	ands.w	r7, r3, #1
 8001824:	d139      	bne.n	800189a <lv_group_focus_obj+0x8a>
    if(g->obj_focus != NULL && obj == *g->obj_focus) return;
 8001826:	68f2      	ldr	r2, [r6, #12]
 8001828:	2a00      	cmp	r2, #0
 800182a:	d038      	beq.n	800189e <lv_group_focus_obj+0x8e>
 800182c:	6814      	ldr	r4, [r2, #0]
 800182e:	4284      	cmp	r4, r0
 8001830:	d033      	beq.n	800189a <lv_group_focus_obj+0x8a>
    if(en_val == group->editing) return; /*Do not set the same mode again*/
 8001832:	079a      	lsls	r2, r3, #30
 8001834:	d513      	bpl.n	800185e <lv_group_focus_obj+0x4e>
    group->editing     = en_val;
 8001836:	f367 0341 	bfi	r3, r7, #1, #1
 800183a:	7533      	strb	r3, [r6, #20]
    if(focused) {
 800183c:	b17c      	cbz	r4, 800185e <lv_group_focus_obj+0x4e>
        focused->signal_cb(focused, LV_SIGNAL_FOCUS, NULL); /*Focus again to properly leave/open edit/navigate mode*/
 800183e:	69e3      	ldr	r3, [r4, #28]
 8001840:	463a      	mov	r2, r7
 8001842:	2116      	movs	r1, #22
 8001844:	4620      	mov	r0, r4
 8001846:	4798      	blx	r3
        lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_FOCUSED, NULL);
 8001848:	68f3      	ldr	r3, [r6, #12]
 800184a:	463a      	mov	r2, r7
 800184c:	210d      	movs	r1, #13
 800184e:	6818      	ldr	r0, [r3, #0]
 8001850:	f001 ffb0 	bl	80037b4 <lv_event_send>
        if(res != LV_RES_OK) return;
 8001854:	2801      	cmp	r0, #1
 8001856:	d102      	bne.n	800185e <lv_group_focus_obj+0x4e>
        lv_obj_invalidate(focused);
 8001858:	4620      	mov	r0, r4
 800185a:	f002 f999 	bl	8003b90 <lv_obj_invalidate>
    _LV_LL_READ(g->obj_ll, i) {
 800185e:	4630      	mov	r0, r6
 8001860:	f013 f984 	bl	8014b6c <_lv_ll_get_head>
 8001864:	4604      	mov	r4, r0
 8001866:	b920      	cbnz	r0, 8001872 <lv_group_focus_obj+0x62>
 8001868:	e017      	b.n	800189a <lv_group_focus_obj+0x8a>
 800186a:	f013 f987 	bl	8014b7c <_lv_ll_get_next>
 800186e:	4604      	mov	r4, r0
 8001870:	b198      	cbz	r0, 800189a <lv_group_focus_obj+0x8a>
        if(*i == obj) {
 8001872:	6823      	ldr	r3, [r4, #0]
    _LV_LL_READ(g->obj_ll, i) {
 8001874:	4621      	mov	r1, r4
 8001876:	4630      	mov	r0, r6
        if(*i == obj) {
 8001878:	42ab      	cmp	r3, r5
 800187a:	d1f6      	bne.n	800186a <lv_group_focus_obj+0x5a>
            if(g->obj_focus != NULL) {
 800187c:	68f3      	ldr	r3, [r6, #12]
 800187e:	b1cb      	cbz	r3, 80018b4 <lv_group_focus_obj+0xa4>
                (*g->obj_focus)->signal_cb(*g->obj_focus, LV_SIGNAL_DEFOCUS, NULL);
 8001880:	6818      	ldr	r0, [r3, #0]
 8001882:	2200      	movs	r2, #0
 8001884:	2117      	movs	r1, #23
 8001886:	69c3      	ldr	r3, [r0, #28]
 8001888:	4798      	blx	r3
                lv_res_t res = lv_event_send(*g->obj_focus, LV_EVENT_DEFOCUSED, NULL);
 800188a:	68f3      	ldr	r3, [r6, #12]
 800188c:	2200      	movs	r2, #0
 800188e:	210e      	movs	r1, #14
 8001890:	6818      	ldr	r0, [r3, #0]
 8001892:	f001 ff8f 	bl	80037b4 <lv_event_send>
                if(res != LV_RES_OK) return;
 8001896:	2801      	cmp	r0, #1
 8001898:	d007      	beq.n	80018aa <lv_group_focus_obj+0x9a>
}
 800189a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800189c:	4770      	bx	lr
    if(en_val == group->editing) return; /*Do not set the same mode again*/
 800189e:	0799      	lsls	r1, r3, #30
 80018a0:	d5dd      	bpl.n	800185e <lv_group_focus_obj+0x4e>
    group->editing     = en_val;
 80018a2:	f362 0341 	bfi	r3, r2, #1, #1
 80018a6:	7533      	strb	r3, [r6, #20]
    if(group->obj_focus == NULL) return NULL;
 80018a8:	e7d9      	b.n	800185e <lv_group_focus_obj+0x4e>
                lv_obj_invalidate(*g->obj_focus);
 80018aa:	68f3      	ldr	r3, [r6, #12]
 80018ac:	6818      	ldr	r0, [r3, #0]
 80018ae:	f002 f96f 	bl	8003b90 <lv_obj_invalidate>
 80018b2:	6825      	ldr	r5, [r4, #0]
                (*g->obj_focus)->signal_cb(*g->obj_focus, LV_SIGNAL_FOCUS, NULL);
 80018b4:	69eb      	ldr	r3, [r5, #28]
 80018b6:	4628      	mov	r0, r5
 80018b8:	2200      	movs	r2, #0
 80018ba:	2116      	movs	r1, #22
            g->obj_focus = i;
 80018bc:	60f4      	str	r4, [r6, #12]
                (*g->obj_focus)->signal_cb(*g->obj_focus, LV_SIGNAL_FOCUS, NULL);
 80018be:	4798      	blx	r3
                if(g->focus_cb) g->focus_cb(g);
 80018c0:	6933      	ldr	r3, [r6, #16]
 80018c2:	b10b      	cbz	r3, 80018c8 <lv_group_focus_obj+0xb8>
 80018c4:	4630      	mov	r0, r6
 80018c6:	4798      	blx	r3
                lv_res_t res = lv_event_send(*g->obj_focus, LV_EVENT_FOCUSED, NULL);
 80018c8:	68f3      	ldr	r3, [r6, #12]
 80018ca:	2200      	movs	r2, #0
 80018cc:	210d      	movs	r1, #13
 80018ce:	6818      	ldr	r0, [r3, #0]
 80018d0:	f001 ff70 	bl	80037b4 <lv_event_send>
                if(res != LV_RES_OK) return;
 80018d4:	2801      	cmp	r0, #1
 80018d6:	d1e0      	bne.n	800189a <lv_group_focus_obj+0x8a>
                lv_obj_invalidate(*g->obj_focus);
 80018d8:	68f3      	ldr	r3, [r6, #12]
 80018da:	6818      	ldr	r0, [r3, #0]
 80018dc:	f002 f958 	bl	8003b90 <lv_obj_invalidate>
                obj_to_foreground(*g->obj_focus);
 80018e0:	68f3      	ldr	r3, [r6, #12]
 80018e2:	6818      	ldr	r0, [r3, #0]
    while(i != NULL) {
 80018e4:	2800      	cmp	r0, #0
 80018e6:	d0d8      	beq.n	800189a <lv_group_focus_obj+0x8a>
    lv_obj_t * last_top = NULL;
 80018e8:	2400      	movs	r4, #0
        if(i->top != 0) last_top = i;
 80018ea:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 80018ee:	f013 0f20 	tst.w	r3, #32
 80018f2:	bf18      	it	ne
 80018f4:	4604      	movne	r4, r0
        i = lv_obj_get_parent(i);
 80018f6:	f003 f99d 	bl	8004c34 <lv_obj_get_parent>
    while(i != NULL) {
 80018fa:	2800      	cmp	r0, #0
 80018fc:	d1f5      	bne.n	80018ea <lv_group_focus_obj+0xda>
    if(last_top != NULL) {
 80018fe:	2c00      	cmp	r4, #0
 8001900:	d0cb      	beq.n	800189a <lv_group_focus_obj+0x8a>
        lv_obj_move_foreground(last_top);
 8001902:	4620      	mov	r0, r4
}
 8001904:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        lv_obj_move_foreground(last_top);
 8001908:	f002 b990 	b.w	8003c2c <lv_obj_move_foreground>

0800190c <lv_group_focus_next>:
    if(group->frozen) return;
 800190c:	7d03      	ldrb	r3, [r0, #20]
 800190e:	07db      	lsls	r3, r3, #31
 8001910:	d403      	bmi.n	800191a <lv_group_focus_next+0xe>
void lv_group_focus_next(lv_group_t * group)
 8001912:	4a02      	ldr	r2, [pc, #8]	; (800191c <lv_group_focus_next+0x10>)
 8001914:	4902      	ldr	r1, [pc, #8]	; (8001920 <lv_group_focus_next+0x14>)
 8001916:	f7ff be21 	b.w	800155c <focus_next_core.part.0>
}
 800191a:	4770      	bx	lr
 800191c:	08014b7d 	.word	0x08014b7d
 8001920:	08014b6d 	.word	0x08014b6d

08001924 <lv_group_focus_prev>:
    if(group->frozen) return;
 8001924:	7d03      	ldrb	r3, [r0, #20]
 8001926:	07db      	lsls	r3, r3, #31
 8001928:	d403      	bmi.n	8001932 <lv_group_focus_prev+0xe>
void lv_group_focus_prev(lv_group_t * group)
 800192a:	4a02      	ldr	r2, [pc, #8]	; (8001934 <lv_group_focus_prev+0x10>)
 800192c:	4902      	ldr	r1, [pc, #8]	; (8001938 <lv_group_focus_prev+0x14>)
 800192e:	f7ff be15 	b.w	800155c <focus_next_core.part.0>
}
 8001932:	4770      	bx	lr
 8001934:	08014b89 	.word	0x08014b89
 8001938:	08014b75 	.word	0x08014b75

0800193c <lv_group_send_data>:
{
 800193c:	b510      	push	{r4, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	9101      	str	r1, [sp, #4]
    if(!group) return NULL;
 8001942:	b198      	cbz	r0, 800196c <lv_group_send_data+0x30>
    if(group->obj_focus == NULL) return NULL;
 8001944:	68c3      	ldr	r3, [r0, #12]
 8001946:	b18b      	cbz	r3, 800196c <lv_group_send_data+0x30>
    return *group->obj_focus;
 8001948:	681c      	ldr	r4, [r3, #0]
    if(act == NULL) return LV_RES_OK;
 800194a:	b17c      	cbz	r4, 800196c <lv_group_send_data+0x30>
    res = act->signal_cb(act, LV_SIGNAL_CONTROL, &c);
 800194c:	69e3      	ldr	r3, [r4, #28]
 800194e:	2118      	movs	r1, #24
 8001950:	4620      	mov	r0, r4
 8001952:	aa01      	add	r2, sp, #4
 8001954:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 8001956:	2801      	cmp	r0, #1
 8001958:	d001      	beq.n	800195e <lv_group_send_data+0x22>
}
 800195a:	b002      	add	sp, #8
 800195c:	bd10      	pop	{r4, pc}
    res = lv_event_send(act, LV_EVENT_KEY, &c);
 800195e:	aa01      	add	r2, sp, #4
 8001960:	210c      	movs	r1, #12
 8001962:	4620      	mov	r0, r4
 8001964:	f001 ff26 	bl	80037b4 <lv_event_send>
}
 8001968:	b002      	add	sp, #8
 800196a:	bd10      	pop	{r4, pc}
    if(act == NULL) return LV_RES_OK;
 800196c:	2001      	movs	r0, #1
}
 800196e:	b002      	add	sp, #8
 8001970:	bd10      	pop	{r4, pc}
 8001972:	bf00      	nop

08001974 <lv_group_set_editing>:
    if(group == NULL) return;
 8001974:	b300      	cbz	r0, 80019b8 <lv_group_set_editing+0x44>
{
 8001976:	b538      	push	{r3, r4, r5, lr}
    if(en_val == group->editing) return; /*Do not set the same mode again*/
 8001978:	7d03      	ldrb	r3, [r0, #20]
 800197a:	4604      	mov	r4, r0
 800197c:	f3c3 0240 	ubfx	r2, r3, #1, #1
 8001980:	428a      	cmp	r2, r1
 8001982:	d013      	beq.n	80019ac <lv_group_set_editing+0x38>
    group->editing     = en_val;
 8001984:	f361 0341 	bfi	r3, r1, #1, #1
    if(group->obj_focus == NULL) return NULL;
 8001988:	68c2      	ldr	r2, [r0, #12]
    group->editing     = en_val;
 800198a:	7503      	strb	r3, [r0, #20]
    if(group->obj_focus == NULL) return NULL;
 800198c:	b172      	cbz	r2, 80019ac <lv_group_set_editing+0x38>
    return *group->obj_focus;
 800198e:	6815      	ldr	r5, [r2, #0]
    if(focused) {
 8001990:	b165      	cbz	r5, 80019ac <lv_group_set_editing+0x38>
        focused->signal_cb(focused, LV_SIGNAL_FOCUS, NULL); /*Focus again to properly leave/open edit/navigate mode*/
 8001992:	69eb      	ldr	r3, [r5, #28]
 8001994:	2200      	movs	r2, #0
 8001996:	2116      	movs	r1, #22
 8001998:	4628      	mov	r0, r5
 800199a:	4798      	blx	r3
        lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_FOCUSED, NULL);
 800199c:	68e3      	ldr	r3, [r4, #12]
 800199e:	2200      	movs	r2, #0
 80019a0:	210d      	movs	r1, #13
 80019a2:	6818      	ldr	r0, [r3, #0]
 80019a4:	f001 ff06 	bl	80037b4 <lv_event_send>
        if(res != LV_RES_OK) return;
 80019a8:	2801      	cmp	r0, #1
 80019aa:	d000      	beq.n	80019ae <lv_group_set_editing+0x3a>
}
 80019ac:	bd38      	pop	{r3, r4, r5, pc}
        lv_obj_invalidate(focused);
 80019ae:	4628      	mov	r0, r5
}
 80019b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        lv_obj_invalidate(focused);
 80019b4:	f002 b8ec 	b.w	8003b90 <lv_obj_invalidate>
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop

080019bc <lv_group_get_focused>:
    if(!group) return NULL;
 80019bc:	b110      	cbz	r0, 80019c4 <lv_group_get_focused+0x8>
    if(group->obj_focus == NULL) return NULL;
 80019be:	68c0      	ldr	r0, [r0, #12]
 80019c0:	b100      	cbz	r0, 80019c4 <lv_group_get_focused+0x8>
    return *group->obj_focus;
 80019c2:	6800      	ldr	r0, [r0, #0]
}
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop

080019c8 <lv_group_get_editing>:
    if(!group) return false;
 80019c8:	b110      	cbz	r0, 80019d0 <lv_group_get_editing+0x8>
    return group->editing ? true : false;
 80019ca:	7d00      	ldrb	r0, [r0, #20]
 80019cc:	f3c0 0040 	ubfx	r0, r0, #1, #1
}
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop

080019d4 <indev_drag_throw.part.0>:

/**
 * Handle throwing by drag if the drag is ended
 * @param indev pointer to an input device state
 */
static void indev_drag_throw(lv_indev_proc_t * proc)
 80019d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
{
    if(proc->types.pointer.drag_in_prog == 0) return;

    lv_obj_t * drag_obj = get_dragged_obj(proc->types.pointer.last_obj);
 80019d8:	69c4      	ldr	r4, [r0, #28]
static void indev_drag_throw(lv_indev_proc_t * proc)
 80019da:	b084      	sub	sp, #16
 * @param obj the start object
 * @return the object to really drag
 */
static lv_obj_t * get_dragged_obj(lv_obj_t * obj)
{
    if(obj == NULL) return NULL;
 80019dc:	b33c      	cbz	r4, 8001a2e <indev_drag_throw.part.0+0x5a>
 80019de:	4606      	mov	r6, r0
 80019e0:	e003      	b.n	80019ea <indev_drag_throw.part.0+0x16>
    lv_obj_t * drag_obj = obj;
    while(lv_obj_get_drag_parent(drag_obj) != false && drag_obj != NULL) {
 80019e2:	b324      	cbz	r4, 8001a2e <indev_drag_throw.part.0+0x5a>
        drag_obj = lv_obj_get_parent(drag_obj);
 80019e4:	f003 f926 	bl	8004c34 <lv_obj_get_parent>
 80019e8:	4604      	mov	r4, r0
    while(lv_obj_get_drag_parent(drag_obj) != false && drag_obj != NULL) {
 80019ea:	4620      	mov	r0, r4
 80019ec:	f004 fce8 	bl	80063c0 <lv_obj_get_drag_parent>
 80019f0:	4603      	mov	r3, r0
        drag_obj = lv_obj_get_parent(drag_obj);
 80019f2:	4620      	mov	r0, r4
    while(lv_obj_get_drag_parent(drag_obj) != false && drag_obj != NULL) {
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d1f4      	bne.n	80019e2 <indev_drag_throw.part.0+0xe>
    if(drag_obj == NULL) return;
 80019f8:	b1cc      	cbz	r4, 8001a2e <indev_drag_throw.part.0+0x5a>
    if(lv_obj_get_drag_throw(drag_obj) == false) {
 80019fa:	f004 fccf 	bl	800639c <lv_obj_get_drag_throw>
 80019fe:	4605      	mov	r5, r0
 8001a00:	b9c0      	cbnz	r0, 8001a34 <indev_drag_throw.part.0+0x60>
        proc->types.pointer.drag_in_prog = 0;
 8001a02:	f896 302a 	ldrb.w	r3, [r6, #42]	; 0x2a
        drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_END, indev_act);
 8001a06:	2113      	movs	r1, #19
 8001a08:	4a5f      	ldr	r2, [pc, #380]	; (8001b88 <indev_drag_throw.part.0+0x1b4>)
 8001a0a:	4620      	mov	r0, r4
        proc->types.pointer.drag_in_prog = 0;
 8001a0c:	f365 0341 	bfi	r3, r5, #1, #1
        drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_END, indev_act);
 8001a10:	69e7      	ldr	r7, [r4, #28]
 8001a12:	6812      	ldr	r2, [r2, #0]
        proc->types.pointer.drag_in_prog = 0;
 8001a14:	f886 302a 	strb.w	r3, [r6, #42]	; 0x2a
        drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_END, indev_act);
 8001a18:	47b8      	blx	r7
 * @param proc pointer to an input device 'proc'
 * @return true if indev query should be immediately truncated.
 */
static bool indev_reset_check(lv_indev_proc_t * proc)
{
    if(proc->reset_query) {
 8001a1a:	f896 3034 	ldrb.w	r3, [r6, #52]	; 0x34
 8001a1e:	079e      	lsls	r6, r3, #30
 8001a20:	d501      	bpl.n	8001a26 <indev_drag_throw.part.0+0x52>
        indev_obj_act = NULL;
 8001a22:	4a5a      	ldr	r2, [pc, #360]	; (8001b8c <indev_drag_throw.part.0+0x1b8>)
 8001a24:	6015      	str	r5, [r2, #0]
        if(indev_reset_check(proc)) return;
 8001a26:	079d      	lsls	r5, r3, #30
 8001a28:	f3c3 0240 	ubfx	r2, r3, #1, #1
 8001a2c:	d54a      	bpl.n	8001ac4 <indev_drag_throw.part.0+0xf0>
}
 8001a2e:	b004      	add	sp, #16
 8001a30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        proc->types.pointer.drag_throw_vect.x * (100 - indev_act->driver.drag_throw) / 100;
 8001a34:	4d54      	ldr	r5, [pc, #336]	; (8001b88 <indev_drag_throw.part.0+0x1b4>)
    lv_drag_dir_t allowed_dirs = lv_obj_get_drag_dir(drag_obj);
 8001a36:	4620      	mov	r0, r4
 8001a38:	f004 fc9e 	bl	8006378 <lv_obj_get_drag_dir>
        proc->types.pointer.drag_throw_vect.x * (100 - indev_act->driver.drag_throw) / 100;
 8001a3c:	f9b6 1014 	ldrsh.w	r1, [r6, #20]
 8001a40:	682a      	ldr	r2, [r5, #0]
    lv_drag_dir_t allowed_dirs = lv_obj_get_drag_dir(drag_obj);
 8001a42:	4607      	mov	r7, r0
        proc->types.pointer.drag_throw_vect.x * (100 - indev_act->driver.drag_throw) / 100;
 8001a44:	4852      	ldr	r0, [pc, #328]	; (8001b90 <indev_drag_throw.part.0+0x1bc>)
 8001a46:	f892 c015 	ldrb.w	ip, [r2, #21]
        proc->types.pointer.drag_throw_vect.y * (100 - indev_act->driver.drag_throw) / 100;
 8001a4a:	f9b6 3016 	ldrsh.w	r3, [r6, #22]
        proc->types.pointer.drag_throw_vect.x * (100 - indev_act->driver.drag_throw) / 100;
 8001a4e:	f1cc 0c64 	rsb	ip, ip, #100	; 0x64
 8001a52:	fb01 f10c 	mul.w	r1, r1, ip
 8001a56:	fb80 ec01 	smull	lr, ip, r0, r1
 8001a5a:	17c9      	asrs	r1, r1, #31
 8001a5c:	ebc1 116c 	rsb	r1, r1, ip, asr #5
    proc->types.pointer.drag_throw_vect.x =
 8001a60:	82b1      	strh	r1, [r6, #20]
        proc->types.pointer.drag_throw_vect.y * (100 - indev_act->driver.drag_throw) / 100;
 8001a62:	7d51      	ldrb	r1, [r2, #21]
 8001a64:	f1c1 0164 	rsb	r1, r1, #100	; 0x64
 8001a68:	fb03 f301 	mul.w	r3, r3, r1
 8001a6c:	fb80 1003 	smull	r1, r0, r0, r3
 8001a70:	17db      	asrs	r3, r3, #31
 8001a72:	ebc3 1360 	rsb	r3, r3, r0, asr #5
    proc->types.pointer.drag_throw_vect.y =
 8001a76:	82f3      	strh	r3, [r6, #22]
    if(proc->types.pointer.drag_throw_vect.x != 0 || proc->types.pointer.drag_throw_vect.y != 0) {
 8001a78:	f8d6 8014 	ldr.w	r8, [r6, #20]
 8001a7c:	f1b8 0f00 	cmp.w	r8, #0
 8001a80:	d127      	bne.n	8001ad2 <indev_drag_throw.part.0+0xfe>
        proc->types.pointer.drag_in_prog = 0;
 8001a82:	f896 302a 	ldrb.w	r3, [r6, #42]	; 0x2a
        drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_END, indev_act);
 8001a86:	2113      	movs	r1, #19
 8001a88:	69e5      	ldr	r5, [r4, #28]
 8001a8a:	4620      	mov	r0, r4
        proc->types.pointer.drag_in_prog = 0;
 8001a8c:	f368 0341 	bfi	r3, r8, #1, #1
 8001a90:	f886 302a 	strb.w	r3, [r6, #42]	; 0x2a
        drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_END, indev_act);
 8001a94:	47a8      	blx	r5
    if(proc->reset_query) {
 8001a96:	f896 3034 	ldrb.w	r3, [r6, #52]	; 0x34
 8001a9a:	0799      	lsls	r1, r3, #30
 8001a9c:	d502      	bpl.n	8001aa4 <indev_drag_throw.part.0+0xd0>
        indev_obj_act = NULL;
 8001a9e:	4a3b      	ldr	r2, [pc, #236]	; (8001b8c <indev_drag_throw.part.0+0x1b8>)
 8001aa0:	f8c2 8000 	str.w	r8, [r2]
        if(indev_reset_check(proc)) return;
 8001aa4:	079a      	lsls	r2, r3, #30
 8001aa6:	f3c3 0540 	ubfx	r5, r3, #1, #1
 8001aaa:	d4c0      	bmi.n	8001a2e <indev_drag_throw.part.0+0x5a>
        lv_event_send(drag_obj, LV_EVENT_DRAG_END, NULL);
 8001aac:	4620      	mov	r0, r4
 8001aae:	462a      	mov	r2, r5
 8001ab0:	2109      	movs	r1, #9
 8001ab2:	f001 fe7f 	bl	80037b4 <lv_event_send>
    if(proc->reset_query) {
 8001ab6:	f896 3034 	ldrb.w	r3, [r6, #52]	; 0x34
 8001aba:	079b      	lsls	r3, r3, #30
 8001abc:	d5b7      	bpl.n	8001a2e <indev_drag_throw.part.0+0x5a>
        indev_obj_act = NULL;
 8001abe:	4b33      	ldr	r3, [pc, #204]	; (8001b8c <indev_drag_throw.part.0+0x1b8>)
 8001ac0:	601d      	str	r5, [r3, #0]
 8001ac2:	e7b4      	b.n	8001a2e <indev_drag_throw.part.0+0x5a>
        lv_event_send(drag_obj, LV_EVENT_DRAG_END, NULL);
 8001ac4:	2109      	movs	r1, #9
 8001ac6:	4620      	mov	r0, r4
 8001ac8:	f001 fe74 	bl	80037b4 <lv_event_send>
}
 8001acc:	b004      	add	sp, #16
 8001ace:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lv_obj_get_coords(drag_obj, &coords_ori);
 8001ad2:	4669      	mov	r1, sp
 8001ad4:	4620      	mov	r0, r4
 8001ad6:	f003 f8d7 	bl	8004c88 <lv_obj_get_coords>
        lv_coord_t act_x = lv_obj_get_x(drag_obj) + proc->types.pointer.drag_throw_vect.x;
 8001ada:	4620      	mov	r0, r4
 8001adc:	f003 f902 	bl	8004ce4 <lv_obj_get_x>
 8001ae0:	8ab3      	ldrh	r3, [r6, #20]
 8001ae2:	4601      	mov	r1, r0
        lv_coord_t act_y = lv_obj_get_y(drag_obj) + proc->types.pointer.drag_throw_vect.y;
 8001ae4:	4620      	mov	r0, r4
        lv_coord_t act_x = lv_obj_get_x(drag_obj) + proc->types.pointer.drag_throw_vect.x;
 8001ae6:	4419      	add	r1, r3
 8001ae8:	fa0f f881 	sxth.w	r8, r1
        lv_coord_t act_y = lv_obj_get_y(drag_obj) + proc->types.pointer.drag_throw_vect.y;
 8001aec:	f003 f91c 	bl	8004d28 <lv_obj_get_y>
 8001af0:	8af2      	ldrh	r2, [r6, #22]
        if(allowed_dirs == LV_DRAG_DIR_BOTH) lv_obj_set_pos(drag_obj, act_x, act_y);
 8001af2:	2f03      	cmp	r7, #3
        lv_coord_t act_y = lv_obj_get_y(drag_obj) + proc->types.pointer.drag_throw_vect.y;
 8001af4:	4410      	add	r0, r2
 8001af6:	b202      	sxth	r2, r0
        if(allowed_dirs == LV_DRAG_DIR_BOTH) lv_obj_set_pos(drag_obj, act_x, act_y);
 8001af8:	d040      	beq.n	8001b7c <indev_drag_throw.part.0+0x1a8>
        else if(allowed_dirs == LV_DRAG_DIR_HOR) lv_obj_set_x(drag_obj, act_x);
 8001afa:	2f01      	cmp	r7, #1
 8001afc:	d034      	beq.n	8001b68 <indev_drag_throw.part.0+0x194>
        else if(allowed_dirs == LV_DRAG_DIR_VER) lv_obj_set_y(drag_obj, act_y);
 8001afe:	2f02      	cmp	r7, #2
 8001b00:	d037      	beq.n	8001b72 <indev_drag_throw.part.0+0x19e>
        else if(allowed_dirs == LV_DRAG_DIR_ONE) {
 8001b02:	2f04      	cmp	r7, #4
 8001b04:	d02d      	beq.n	8001b62 <indev_drag_throw.part.0+0x18e>
        lv_obj_get_coords(drag_obj, &coord_new);
 8001b06:	a902      	add	r1, sp, #8
 8001b08:	4620      	mov	r0, r4
 8001b0a:	f003 f8bd 	bl	8004c88 <lv_obj_get_coords>
        if((coords_ori.x1 == coord_new.x1 || proc->types.pointer.drag_throw_vect.x == 0) &&
 8001b0e:	f9bd 2000 	ldrsh.w	r2, [sp]
 8001b12:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d003      	beq.n	8001b22 <indev_drag_throw.part.0+0x14e>
 8001b1a:	f9b6 3014 	ldrsh.w	r3, [r6, #20]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d185      	bne.n	8001a2e <indev_drag_throw.part.0+0x5a>
 8001b22:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
 8001b26:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	d004      	beq.n	8001b38 <indev_drag_throw.part.0+0x164>
           (coords_ori.y1 == coord_new.y1 || proc->types.pointer.drag_throw_vect.y == 0)) {
 8001b2e:	f9b6 3016 	ldrsh.w	r3, [r6, #22]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	f47f af7b 	bne.w	8001a2e <indev_drag_throw.part.0+0x5a>
            proc->types.pointer.drag_in_prog      = 0;
 8001b38:	f896 302a 	ldrb.w	r3, [r6, #42]	; 0x2a
            proc->types.pointer.vect.x            = 0;
 8001b3c:	2700      	movs	r7, #0
            drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_END, indev_act);
 8001b3e:	682a      	ldr	r2, [r5, #0]
 8001b40:	2113      	movs	r1, #19
            proc->types.pointer.drag_in_prog      = 0;
 8001b42:	f36f 0341 	bfc	r3, #1, #1
            drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_END, indev_act);
 8001b46:	4620      	mov	r0, r4
            proc->types.pointer.vect.x            = 0;
 8001b48:	60f7      	str	r7, [r6, #12]
            proc->types.pointer.drag_in_prog      = 0;
 8001b4a:	f886 302a 	strb.w	r3, [r6, #42]	; 0x2a
            proc->types.pointer.drag_throw_vect.x = 0;
 8001b4e:	6177      	str	r7, [r6, #20]
            drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_END, indev_act);
 8001b50:	69e3      	ldr	r3, [r4, #28]
 8001b52:	4798      	blx	r3
    if(proc->reset_query) {
 8001b54:	f896 3034 	ldrb.w	r3, [r6, #52]	; 0x34
 8001b58:	0798      	lsls	r0, r3, #30
 8001b5a:	d5a3      	bpl.n	8001aa4 <indev_drag_throw.part.0+0xd0>
        indev_obj_act = NULL;
 8001b5c:	4a0b      	ldr	r2, [pc, #44]	; (8001b8c <indev_drag_throw.part.0+0x1b8>)
 8001b5e:	6017      	str	r7, [r2, #0]
 8001b60:	e7a0      	b.n	8001aa4 <indev_drag_throw.part.0+0xd0>
            if(proc->types.pointer.drag_sum.x) lv_obj_set_x(drag_obj, act_x);
 8001b62:	f9b6 3010 	ldrsh.w	r3, [r6, #16]
 8001b66:	b123      	cbz	r3, 8001b72 <indev_drag_throw.part.0+0x19e>
 8001b68:	4641      	mov	r1, r8
 8001b6a:	4620      	mov	r0, r4
 8001b6c:	f002 f928 	bl	8003dc0 <lv_obj_set_x>
 8001b70:	e7c9      	b.n	8001b06 <indev_drag_throw.part.0+0x132>
            else lv_obj_set_y(drag_obj, act_y);
 8001b72:	4611      	mov	r1, r2
 8001b74:	4620      	mov	r0, r4
 8001b76:	f002 f95f 	bl	8003e38 <lv_obj_set_y>
 8001b7a:	e7c4      	b.n	8001b06 <indev_drag_throw.part.0+0x132>
        if(allowed_dirs == LV_DRAG_DIR_BOTH) lv_obj_set_pos(drag_obj, act_x, act_y);
 8001b7c:	4641      	mov	r1, r8
 8001b7e:	4620      	mov	r0, r4
 8001b80:	f002 f906 	bl	8003d90 <lv_obj_set_pos>
 8001b84:	e7bf      	b.n	8001b06 <indev_drag_throw.part.0+0x132>
 8001b86:	bf00      	nop
 8001b88:	20017888 	.word	0x20017888
 8001b8c:	2001788c 	.word	0x2001788c
 8001b90:	51eb851f 	.word	0x51eb851f

08001b94 <indev_proc_release>:
{
 8001b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(proc->wait_until_release != 0) {
 8001b96:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
{
 8001b9a:	4604      	mov	r4, r0
    if(proc->wait_until_release != 0) {
 8001b9c:	f013 0608 	ands.w	r6, r3, #8
 8001ba0:	d00b      	beq.n	8001bba <indev_proc_release+0x26>
        proc->types.pointer.act_obj  = NULL;
 8001ba2:	2200      	movs	r2, #0
    indev_obj_act = proc->types.pointer.act_obj;
 8001ba4:	4969      	ldr	r1, [pc, #420]	; (8001d4c <indev_proc_release+0x1b8>)
        proc->wait_until_release     = 0;
 8001ba6:	f362 03c3 	bfi	r3, r2, #3, #1
    indev_obj_act = proc->types.pointer.act_obj;
 8001baa:	600a      	str	r2, [r1, #0]
        proc->types.pointer.last_obj = NULL;
 8001bac:	e9c0 2206 	strd	r2, r2, [r0, #24]
        proc->wait_until_release     = 0;
 8001bb0:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
        proc->longpr_rep_timestamp   = 0;
 8001bb4:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
}
 8001bb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    indev_obj_act = proc->types.pointer.act_obj;
 8001bba:	6980      	ldr	r0, [r0, #24]
 8001bbc:	4f63      	ldr	r7, [pc, #396]	; (8001d4c <indev_proc_release+0x1b8>)
 8001bbe:	6038      	str	r0, [r7, #0]
    if(indev_obj_act) {
 8001bc0:	2800      	cmp	r0, #0
 8001bc2:	f000 80c1 	beq.w	8001d48 <indev_proc_release+0x1b4>
        if(lv_obj_is_protected(indev_obj_act, LV_PROTECT_PRESS_LOST)) {
 8001bc6:	2110      	movs	r1, #16
 8001bc8:	f004 fc18 	bl	80063fc <lv_obj_is_protected>
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_RELEASED, indev_act);
 8001bcc:	4a60      	ldr	r2, [pc, #384]	; (8001d50 <indev_proc_release+0x1bc>)
        if(lv_obj_is_protected(indev_obj_act, LV_PROTECT_PRESS_LOST)) {
 8001bce:	4605      	mov	r5, r0
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_RELEASED, indev_act);
 8001bd0:	6838      	ldr	r0, [r7, #0]
 8001bd2:	210e      	movs	r1, #14
 8001bd4:	6812      	ldr	r2, [r2, #0]
 8001bd6:	69c3      	ldr	r3, [r0, #28]
        if(lv_obj_is_protected(indev_obj_act, LV_PROTECT_PRESS_LOST)) {
 8001bd8:	b335      	cbz	r5, 8001c28 <indev_proc_release+0x94>
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_RELEASED, indev_act);
 8001bda:	4798      	blx	r3
    if(proc->reset_query) {
 8001bdc:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 8001be0:	f012 0f02 	tst.w	r2, #2
 8001be4:	d153      	bne.n	8001c8e <indev_proc_release+0xfa>
            if(proc->types.pointer.drag_in_prog == 0) {
 8001be6:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8001bea:	079b      	lsls	r3, r3, #30
 8001bec:	d429      	bmi.n	8001c42 <indev_proc_release+0xae>
                if(proc->long_pr_sent == 0) {
 8001bee:	f012 0501 	ands.w	r5, r2, #1
 8001bf2:	d10b      	bne.n	8001c0c <indev_proc_release+0x78>
                    lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, NULL);
 8001bf4:	462a      	mov	r2, r5
 8001bf6:	2103      	movs	r1, #3
 8001bf8:	6838      	ldr	r0, [r7, #0]
 8001bfa:	f001 fddb 	bl	80037b4 <lv_event_send>
    if(proc->reset_query) {
 8001bfe:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8001c02:	f013 0f02 	tst.w	r3, #2
 8001c06:	d001      	beq.n	8001c0c <indev_proc_release+0x78>
        indev_obj_act = NULL;
 8001c08:	603d      	str	r5, [r7, #0]
                    if(indev_reset_check(proc)) return;
 8001c0a:	d1d5      	bne.n	8001bb8 <indev_proc_release+0x24>
                lv_event_send(indev_obj_act, LV_EVENT_CLICKED, NULL);
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	2106      	movs	r1, #6
 8001c10:	6838      	ldr	r0, [r7, #0]
 8001c12:	f001 fdcf 	bl	80037b4 <lv_event_send>
    if(proc->reset_query) {
 8001c16:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8001c1a:	079e      	lsls	r6, r3, #30
 8001c1c:	d511      	bpl.n	8001c42 <indev_proc_release+0xae>
        indev_obj_act = NULL;
 8001c1e:	2200      	movs	r2, #0
                if(indev_reset_check(proc)) return;
 8001c20:	079d      	lsls	r5, r3, #30
        indev_obj_act = NULL;
 8001c22:	603a      	str	r2, [r7, #0]
                if(indev_reset_check(proc)) return;
 8001c24:	d50d      	bpl.n	8001c42 <indev_proc_release+0xae>
}
 8001c26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_RELEASED, indev_act);
 8001c28:	4798      	blx	r3
    if(proc->reset_query) {
 8001c2a:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8001c2e:	f013 0f02 	tst.w	r3, #2
 8001c32:	d12f      	bne.n	8001c94 <indev_proc_release+0x100>
            if(proc->long_pr_sent == 0 && proc->types.pointer.drag_in_prog == 0) {
 8001c34:	07d9      	lsls	r1, r3, #31
 8001c36:	d474      	bmi.n	8001d22 <indev_proc_release+0x18e>
 8001c38:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
 8001c3c:	f012 0502 	ands.w	r5, r2, #2
 8001c40:	d062      	beq.n	8001d08 <indev_proc_release+0x174>
            lv_event_send(indev_obj_act, LV_EVENT_RELEASED, NULL);
 8001c42:	2200      	movs	r2, #0
 8001c44:	2107      	movs	r1, #7
 8001c46:	6838      	ldr	r0, [r7, #0]
 8001c48:	f001 fdb4 	bl	80037b4 <lv_event_send>
    if(proc->reset_query) {
 8001c4c:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8001c50:	079a      	lsls	r2, r3, #30
 8001c52:	d522      	bpl.n	8001c9a <indev_proc_release+0x106>
        indev_obj_act = NULL;
 8001c54:	2200      	movs	r2, #0
            if(indev_reset_check(proc)) return;
 8001c56:	0798      	lsls	r0, r3, #30
        indev_obj_act = NULL;
 8001c58:	603a      	str	r2, [r7, #0]
            if(indev_reset_check(proc)) return;
 8001c5a:	d4ad      	bmi.n	8001bb8 <indev_proc_release+0x24>
        proc->types.pointer.act_obj = NULL;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	69e2      	ldr	r2, [r4, #28]
 8001c60:	61a3      	str	r3, [r4, #24]
        proc->longpr_rep_timestamp  = 0;
 8001c62:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
    if(proc->types.pointer.last_obj != NULL && proc->reset_query == 0) {
 8001c66:	2a00      	cmp	r2, #0
 8001c68:	d0a6      	beq.n	8001bb8 <indev_proc_release+0x24>
 8001c6a:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8001c6e:	f013 0502 	ands.w	r5, r3, #2
 8001c72:	d1a1      	bne.n	8001bb8 <indev_proc_release+0x24>
    if(proc->types.pointer.drag_in_prog == 0) return;
 8001c74:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8001c78:	079a      	lsls	r2, r3, #30
 8001c7a:	d59d      	bpl.n	8001bb8 <indev_proc_release+0x24>
 8001c7c:	4620      	mov	r0, r4
 8001c7e:	f7ff fea9 	bl	80019d4 <indev_drag_throw.part.0>
    if(proc->reset_query) {
 8001c82:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8001c86:	079b      	lsls	r3, r3, #30
        indev_obj_act = NULL;
 8001c88:	bf48      	it	mi
 8001c8a:	603d      	strmi	r5, [r7, #0]
}
 8001c8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        indev_obj_act = NULL;
 8001c8e:	603e      	str	r6, [r7, #0]
            if(indev_reset_check(proc)) return;
 8001c90:	d0a9      	beq.n	8001be6 <indev_proc_release+0x52>
}
 8001c92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        indev_obj_act = NULL;
 8001c94:	603d      	str	r5, [r7, #0]
            if(indev_reset_check(proc)) return;
 8001c96:	d0cd      	beq.n	8001c34 <indev_proc_release+0xa0>
}
 8001c98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        lv_obj_t * drag_obj = get_dragged_obj(indev_obj_act);
 8001c9a:	683d      	ldr	r5, [r7, #0]
    if(obj == NULL) return NULL;
 8001c9c:	b92d      	cbnz	r5, 8001caa <indev_proc_release+0x116>
 8001c9e:	e7dd      	b.n	8001c5c <indev_proc_release+0xc8>
    while(lv_obj_get_drag_parent(drag_obj) != false && drag_obj != NULL) {
 8001ca0:	2d00      	cmp	r5, #0
 8001ca2:	d0db      	beq.n	8001c5c <indev_proc_release+0xc8>
        drag_obj = lv_obj_get_parent(drag_obj);
 8001ca4:	f002 ffc6 	bl	8004c34 <lv_obj_get_parent>
 8001ca8:	4605      	mov	r5, r0
    while(lv_obj_get_drag_parent(drag_obj) != false && drag_obj != NULL) {
 8001caa:	4628      	mov	r0, r5
 8001cac:	f004 fb88 	bl	80063c0 <lv_obj_get_drag_parent>
 8001cb0:	4606      	mov	r6, r0
        drag_obj = lv_obj_get_parent(drag_obj);
 8001cb2:	4628      	mov	r0, r5
    while(lv_obj_get_drag_parent(drag_obj) != false && drag_obj != NULL) {
 8001cb4:	2e00      	cmp	r6, #0
 8001cb6:	d1f3      	bne.n	8001ca0 <indev_proc_release+0x10c>
        if(drag_obj) {
 8001cb8:	2d00      	cmp	r5, #0
 8001cba:	d0cf      	beq.n	8001c5c <indev_proc_release+0xc8>
            if(lv_obj_get_drag_throw(drag_obj) && proc->types.pointer.drag_in_prog) {
 8001cbc:	f004 fb6e 	bl	800639c <lv_obj_get_drag_throw>
 8001cc0:	2800      	cmp	r0, #0
 8001cc2:	d0cb      	beq.n	8001c5c <indev_proc_release+0xc8>
 8001cc4:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8001cc8:	079b      	lsls	r3, r3, #30
 8001cca:	d5c7      	bpl.n	8001c5c <indev_proc_release+0xc8>
                if(drag_obj->signal_cb) drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_THROW_BEGIN, NULL);
 8001ccc:	69eb      	ldr	r3, [r5, #28]
 8001cce:	b11b      	cbz	r3, 8001cd8 <indev_proc_release+0x144>
 8001cd0:	4632      	mov	r2, r6
 8001cd2:	2112      	movs	r1, #18
 8001cd4:	4628      	mov	r0, r5
 8001cd6:	4798      	blx	r3
    if(proc->reset_query) {
 8001cd8:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8001cdc:	0798      	lsls	r0, r3, #30
 8001cde:	d501      	bpl.n	8001ce4 <indev_proc_release+0x150>
        indev_obj_act = NULL;
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	603a      	str	r2, [r7, #0]
                if(indev_reset_check(proc)) return;
 8001ce4:	0799      	lsls	r1, r3, #30
 8001ce6:	f3c3 0640 	ubfx	r6, r3, #1, #1
 8001cea:	f53f af65 	bmi.w	8001bb8 <indev_proc_release+0x24>
                lv_event_send(drag_obj, LV_EVENT_DRAG_THROW_BEGIN, NULL);
 8001cee:	4628      	mov	r0, r5
 8001cf0:	4632      	mov	r2, r6
 8001cf2:	210a      	movs	r1, #10
 8001cf4:	f001 fd5e 	bl	80037b4 <lv_event_send>
    if(proc->reset_query) {
 8001cf8:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8001cfc:	f013 0f02 	tst.w	r3, #2
 8001d00:	d0ac      	beq.n	8001c5c <indev_proc_release+0xc8>
        indev_obj_act = NULL;
 8001d02:	603e      	str	r6, [r7, #0]
                if(indev_reset_check(proc)) return;
 8001d04:	d0aa      	beq.n	8001c5c <indev_proc_release+0xc8>
}
 8001d06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, NULL);
 8001d08:	462a      	mov	r2, r5
 8001d0a:	2103      	movs	r1, #3
 8001d0c:	6838      	ldr	r0, [r7, #0]
 8001d0e:	f001 fd51 	bl	80037b4 <lv_event_send>
    if(proc->reset_query) {
 8001d12:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8001d16:	f013 0f02 	tst.w	r3, #2
 8001d1a:	d002      	beq.n	8001d22 <indev_proc_release+0x18e>
        indev_obj_act = NULL;
 8001d1c:	603d      	str	r5, [r7, #0]
                if(indev_reset_check(proc)) return;
 8001d1e:	f47f af4b 	bne.w	8001bb8 <indev_proc_release+0x24>
            if(proc->types.pointer.drag_in_prog == 0) {
 8001d22:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
 8001d26:	f012 0502 	ands.w	r5, r2, #2
 8001d2a:	d18a      	bne.n	8001c42 <indev_proc_release+0xae>
                lv_event_send(indev_obj_act, LV_EVENT_CLICKED, NULL);
 8001d2c:	462a      	mov	r2, r5
 8001d2e:	2106      	movs	r1, #6
 8001d30:	6838      	ldr	r0, [r7, #0]
 8001d32:	f001 fd3f 	bl	80037b4 <lv_event_send>
    if(proc->reset_query) {
 8001d36:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8001d3a:	f013 0f02 	tst.w	r3, #2
 8001d3e:	d080      	beq.n	8001c42 <indev_proc_release+0xae>
        indev_obj_act = NULL;
 8001d40:	603d      	str	r5, [r7, #0]
                if(indev_reset_check(proc)) return;
 8001d42:	f43f af7e 	beq.w	8001c42 <indev_proc_release+0xae>
}
 8001d46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d48:	69e2      	ldr	r2, [r4, #28]
 8001d4a:	e78c      	b.n	8001c66 <indev_proc_release+0xd2>
 8001d4c:	2001788c 	.word	0x2001788c
 8001d50:	20017888 	.word	0x20017888

08001d54 <_lv_indev_init>:
{
 8001d54:	b570      	push	{r4, r5, r6, lr}
        lv_indev_t * i = lv_indev_get_next(NULL);
 8001d56:	2000      	movs	r0, #0
 8001d58:	f011 fe8a 	bl	8013a70 <lv_indev_get_next>
        while(i) {
 8001d5c:	b198      	cbz	r0, 8001d86 <_lv_indev_init+0x32>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	4e0d      	ldr	r6, [pc, #52]	; (8001d98 <_lv_indev_init+0x44>)
                i->proc.types.pointer.last_pressed = NULL;
 8001d62:	2400      	movs	r4, #0
            if(indev_act == i) indev_obj_act = NULL;
 8001d64:	4d0d      	ldr	r5, [pc, #52]	; (8001d9c <_lv_indev_init+0x48>)
            i->proc.reset_query = 1;
 8001d66:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
            i = lv_indev_get_next(i);
 8001d6a:	4618      	mov	r0, r3
            if(indev_act == i) indev_obj_act = NULL;
 8001d6c:	6831      	ldr	r1, [r6, #0]
            i->proc.reset_query = 1;
 8001d6e:	f042 0202 	orr.w	r2, r2, #2
                i->proc.types.pointer.last_pressed = NULL;
 8001d72:	63dc      	str	r4, [r3, #60]	; 0x3c
            if(indev_act == i) indev_obj_act = NULL;
 8001d74:	4299      	cmp	r1, r3
            i->proc.reset_query = 1;
 8001d76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            if(indev_act == i) indev_obj_act = NULL;
 8001d7a:	d005      	beq.n	8001d88 <_lv_indev_init+0x34>
            i = lv_indev_get_next(i);
 8001d7c:	f011 fe78 	bl	8013a70 <lv_indev_get_next>
        while(i) {
 8001d80:	4603      	mov	r3, r0
 8001d82:	2800      	cmp	r0, #0
 8001d84:	d1ef      	bne.n	8001d66 <_lv_indev_init+0x12>
}
 8001d86:	bd70      	pop	{r4, r5, r6, pc}
            if(indev_act == i) indev_obj_act = NULL;
 8001d88:	602c      	str	r4, [r5, #0]
            i = lv_indev_get_next(i);
 8001d8a:	f011 fe71 	bl	8013a70 <lv_indev_get_next>
        while(i) {
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2800      	cmp	r0, #0
 8001d92:	d1e8      	bne.n	8001d66 <_lv_indev_init+0x12>
}
 8001d94:	bd70      	pop	{r4, r5, r6, pc}
 8001d96:	bf00      	nop
 8001d98:	20017888 	.word	0x20017888
 8001d9c:	2001788c 	.word	0x2001788c

08001da0 <lv_indev_get_act>:
    return indev_act;
 8001da0:	4b01      	ldr	r3, [pc, #4]	; (8001da8 <lv_indev_get_act+0x8>)
}
 8001da2:	6818      	ldr	r0, [r3, #0]
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	20017888 	.word	0x20017888

08001dac <lv_indev_reset>:
{
 8001dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dae:	460d      	mov	r5, r1
    if(indev) {
 8001db0:	4604      	mov	r4, r0
 8001db2:	b1b0      	cbz	r0, 8001de2 <lv_indev_reset+0x36>
        if(indev_act == indev) indev_obj_act = NULL;
 8001db4:	4a29      	ldr	r2, [pc, #164]	; (8001e5c <lv_indev_reset+0xb0>)
        indev->proc.reset_query = 1;
 8001db6:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
        if(indev_act == indev) indev_obj_act = NULL;
 8001dba:	6812      	ldr	r2, [r2, #0]
        indev->proc.reset_query = 1;
 8001dbc:	f043 0302 	orr.w	r3, r3, #2
        if(indev_act == indev) indev_obj_act = NULL;
 8001dc0:	4282      	cmp	r2, r0
        indev->proc.reset_query = 1;
 8001dc2:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
        if(indev_act == indev) indev_obj_act = NULL;
 8001dc6:	d004      	beq.n	8001dd2 <lv_indev_reset+0x26>
        if(obj == NULL || indev->proc.types.pointer.last_pressed == obj) {
 8001dc8:	b145      	cbz	r5, 8001ddc <lv_indev_reset+0x30>
 8001dca:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001dcc:	42ab      	cmp	r3, r5
 8001dce:	d005      	beq.n	8001ddc <lv_indev_reset+0x30>
}
 8001dd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if(indev_act == indev) indev_obj_act = NULL;
 8001dd2:	4b23      	ldr	r3, [pc, #140]	; (8001e60 <lv_indev_reset+0xb4>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	601a      	str	r2, [r3, #0]
        if(obj == NULL || indev->proc.types.pointer.last_pressed == obj) {
 8001dd8:	2d00      	cmp	r5, #0
 8001dda:	d1f6      	bne.n	8001dca <lv_indev_reset+0x1e>
            indev->proc.types.pointer.last_pressed = NULL;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	63e3      	str	r3, [r4, #60]	; 0x3c
}
 8001de0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        lv_indev_t * i = lv_indev_get_next(NULL);
 8001de2:	f011 fe45 	bl	8013a70 <lv_indev_get_next>
        while(i) {
 8001de6:	4603      	mov	r3, r0
 8001de8:	2800      	cmp	r0, #0
 8001dea:	d0f1      	beq.n	8001dd0 <lv_indev_reset+0x24>
 8001dec:	4f1b      	ldr	r7, [pc, #108]	; (8001e5c <lv_indev_reset+0xb0>)
 8001dee:	b1dd      	cbz	r5, 8001e28 <lv_indev_reset+0x7c>
            if(indev_act == i) indev_obj_act = NULL;
 8001df0:	4e1b      	ldr	r6, [pc, #108]	; (8001e60 <lv_indev_reset+0xb4>)
            i->proc.reset_query = 1;
 8001df2:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
            i = lv_indev_get_next(i);
 8001df6:	4618      	mov	r0, r3
            if(indev_act == i) indev_obj_act = NULL;
 8001df8:	6839      	ldr	r1, [r7, #0]
            i->proc.reset_query = 1;
 8001dfa:	f042 0202 	orr.w	r2, r2, #2
            if(indev_act == i) indev_obj_act = NULL;
 8001dfe:	428b      	cmp	r3, r1
            i->proc.reset_query = 1;
 8001e00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            if(obj == NULL || i->proc.types.pointer.last_pressed == obj) {
 8001e04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
            if(indev_act == i) indev_obj_act = NULL;
 8001e06:	bf08      	it	eq
 8001e08:	6034      	streq	r4, [r6, #0]
            if(obj == NULL || i->proc.types.pointer.last_pressed == obj) {
 8001e0a:	4295      	cmp	r5, r2
 8001e0c:	d005      	beq.n	8001e1a <lv_indev_reset+0x6e>
            i = lv_indev_get_next(i);
 8001e0e:	f011 fe2f 	bl	8013a70 <lv_indev_get_next>
        while(i) {
 8001e12:	4603      	mov	r3, r0
 8001e14:	2800      	cmp	r0, #0
 8001e16:	d1ec      	bne.n	8001df2 <lv_indev_reset+0x46>
 8001e18:	e7da      	b.n	8001dd0 <lv_indev_reset+0x24>
                i->proc.types.pointer.last_pressed = NULL;
 8001e1a:	63dc      	str	r4, [r3, #60]	; 0x3c
            i = lv_indev_get_next(i);
 8001e1c:	f011 fe28 	bl	8013a70 <lv_indev_get_next>
        while(i) {
 8001e20:	4603      	mov	r3, r0
 8001e22:	2800      	cmp	r0, #0
 8001e24:	d1e5      	bne.n	8001df2 <lv_indev_reset+0x46>
}
 8001e26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if(indev_act == i) indev_obj_act = NULL;
 8001e28:	4c0d      	ldr	r4, [pc, #52]	; (8001e60 <lv_indev_reset+0xb4>)
            i->proc.reset_query = 1;
 8001e2a:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
            i = lv_indev_get_next(i);
 8001e2e:	4618      	mov	r0, r3
            if(indev_act == i) indev_obj_act = NULL;
 8001e30:	6839      	ldr	r1, [r7, #0]
            i->proc.reset_query = 1;
 8001e32:	f042 0202 	orr.w	r2, r2, #2
                i->proc.types.pointer.last_pressed = NULL;
 8001e36:	63dd      	str	r5, [r3, #60]	; 0x3c
            if(indev_act == i) indev_obj_act = NULL;
 8001e38:	4299      	cmp	r1, r3
            i->proc.reset_query = 1;
 8001e3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            if(indev_act == i) indev_obj_act = NULL;
 8001e3e:	d005      	beq.n	8001e4c <lv_indev_reset+0xa0>
            i = lv_indev_get_next(i);
 8001e40:	f011 fe16 	bl	8013a70 <lv_indev_get_next>
        while(i) {
 8001e44:	4603      	mov	r3, r0
 8001e46:	2800      	cmp	r0, #0
 8001e48:	d1ef      	bne.n	8001e2a <lv_indev_reset+0x7e>
 8001e4a:	e7c1      	b.n	8001dd0 <lv_indev_reset+0x24>
            if(indev_act == i) indev_obj_act = NULL;
 8001e4c:	6025      	str	r5, [r4, #0]
            i = lv_indev_get_next(i);
 8001e4e:	f011 fe0f 	bl	8013a70 <lv_indev_get_next>
        while(i) {
 8001e52:	4603      	mov	r3, r0
 8001e54:	2800      	cmp	r0, #0
 8001e56:	d1e8      	bne.n	8001e2a <lv_indev_reset+0x7e>
}
 8001e58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	20017888 	.word	0x20017888
 8001e60:	2001788c 	.word	0x2001788c

08001e64 <lv_indev_is_dragging>:
    if(indev == NULL) return false;
 8001e64:	b150      	cbz	r0, 8001e7c <lv_indev_is_dragging+0x18>
    if(indev->driver.type != LV_INDEV_TYPE_POINTER && indev->driver.type != LV_INDEV_TYPE_BUTTON) return false;
 8001e66:	7803      	ldrb	r3, [r0, #0]
 8001e68:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d104      	bne.n	8001e7a <lv_indev_is_dragging+0x16>
    return indev->proc.types.pointer.drag_in_prog == 0 ? false : true;
 8001e70:	f890 0046 	ldrb.w	r0, [r0, #70]	; 0x46
 8001e74:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8001e78:	4770      	bx	lr
    if(indev == NULL) return false;
 8001e7a:	2000      	movs	r0, #0
}
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop

08001e80 <lv_indev_get_obj_act>:
    return indev_obj_act;
 8001e80:	4b01      	ldr	r3, [pc, #4]	; (8001e88 <lv_indev_get_obj_act+0x8>)
}
 8001e82:	6818      	ldr	r0, [r3, #0]
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	2001788c 	.word	0x2001788c

08001e8c <lv_indev_search_obj>:
{
 8001e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e8e:	4606      	mov	r6, r0
 8001e90:	460d      	mov	r5, r1
    if(lv_obj_hittest(obj, point)) {
 8001e92:	f004 fb49 	bl	8006528 <lv_obj_hittest>
 8001e96:	b340      	cbz	r0, 8001eea <lv_indev_search_obj+0x5e>
        _LV_LL_READ(obj->child_ll, i) {
 8001e98:	1d37      	adds	r7, r6, #4
 8001e9a:	4638      	mov	r0, r7
 8001e9c:	f012 fe66 	bl	8014b6c <_lv_ll_get_head>
 8001ea0:	4604      	mov	r4, r0
 8001ea2:	b160      	cbz	r0, 8001ebe <lv_indev_search_obj+0x32>
            found_p = lv_indev_search_obj(i, point);
 8001ea4:	4629      	mov	r1, r5
 8001ea6:	4620      	mov	r0, r4
 8001ea8:	f7ff fff0 	bl	8001e8c <lv_indev_search_obj>
 8001eac:	4603      	mov	r3, r0
        _LV_LL_READ(obj->child_ll, i) {
 8001eae:	4621      	mov	r1, r4
 8001eb0:	4638      	mov	r0, r7
            if(found_p != NULL) {
 8001eb2:	b9db      	cbnz	r3, 8001eec <lv_indev_search_obj+0x60>
        _LV_LL_READ(obj->child_ll, i) {
 8001eb4:	f012 fe62 	bl	8014b7c <_lv_ll_get_next>
 8001eb8:	4604      	mov	r4, r0
 8001eba:	2800      	cmp	r0, #0
 8001ebc:	d1f2      	bne.n	8001ea4 <lv_indev_search_obj+0x18>
        if(found_p == NULL && lv_obj_get_click(obj) != false) {
 8001ebe:	4630      	mov	r0, r6
 8001ec0:	f004 fa36 	bl	8006330 <lv_obj_get_click>
 8001ec4:	b188      	cbz	r0, 8001eea <lv_indev_search_obj+0x5e>
            while(hidden_i != NULL) {
 8001ec6:	b19e      	cbz	r6, 8001ef0 <lv_indev_search_obj+0x64>
 8001ec8:	4634      	mov	r4, r6
 8001eca:	e003      	b.n	8001ed4 <lv_indev_search_obj+0x48>
                hidden_i = lv_obj_get_parent(hidden_i);
 8001ecc:	f002 feb2 	bl	8004c34 <lv_obj_get_parent>
            while(hidden_i != NULL) {
 8001ed0:	4604      	mov	r4, r0
 8001ed2:	b168      	cbz	r0, 8001ef0 <lv_indev_search_obj+0x64>
                if(lv_obj_get_hidden(hidden_i) == true) break;
 8001ed4:	4620      	mov	r0, r4
 8001ed6:	f004 fa19 	bl	800630c <lv_obj_get_hidden>
 8001eda:	4603      	mov	r3, r0
                hidden_i = lv_obj_get_parent(hidden_i);
 8001edc:	4620      	mov	r0, r4
                if(lv_obj_get_hidden(hidden_i) == true) break;
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d0f4      	beq.n	8001ecc <lv_indev_search_obj+0x40>
            if(lv_obj_is_protected(obj, LV_PROTECT_EVENT_TO_DISABLED) == false){
 8001ee2:	4630      	mov	r0, r6
 8001ee4:	2140      	movs	r1, #64	; 0x40
 8001ee6:	f004 fa89 	bl	80063fc <lv_obj_is_protected>
    lv_obj_t * found_p = NULL;
 8001eea:	2300      	movs	r3, #0
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if(lv_obj_is_protected(obj, LV_PROTECT_EVENT_TO_DISABLED) == false){
 8001ef0:	2140      	movs	r1, #64	; 0x40
 8001ef2:	4630      	mov	r0, r6
 8001ef4:	f004 fa82 	bl	80063fc <lv_obj_is_protected>
 8001ef8:	b108      	cbz	r0, 8001efe <lv_indev_search_obj+0x72>
    lv_obj_t * found_p = NULL;
 8001efa:	4633      	mov	r3, r6
    return found_p;
 8001efc:	e7f6      	b.n	8001eec <lv_indev_search_obj+0x60>
                if(hidden_i == NULL && (lv_obj_get_state(obj, LV_OBJ_PART_MAIN) & LV_STATE_DISABLED) == false) found_p = obj;
 8001efe:	4601      	mov	r1, r0
 8001f00:	4630      	mov	r0, r6
 8001f02:	f004 fa91 	bl	8006428 <lv_obj_get_state>
 8001f06:	0683      	lsls	r3, r0, #26
 8001f08:	d4ef      	bmi.n	8001eea <lv_indev_search_obj+0x5e>
    lv_obj_t * found_p = NULL;
 8001f0a:	4633      	mov	r3, r6
    return found_p;
 8001f0c:	e7ee      	b.n	8001eec <lv_indev_search_obj+0x60>
 8001f0e:	bf00      	nop

08001f10 <indev_proc_press>:
{
 8001f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f14:	4604      	mov	r4, r0
    indev_obj_act = proc->types.pointer.act_obj;
 8001f16:	4da6      	ldr	r5, [pc, #664]	; (80021b0 <indev_proc_press+0x2a0>)
 8001f18:	6980      	ldr	r0, [r0, #24]
{
 8001f1a:	b085      	sub	sp, #20
    if(proc->wait_until_release != 0) return;
 8001f1c:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    indev_obj_act = proc->types.pointer.act_obj;
 8001f20:	6028      	str	r0, [r5, #0]
    if(proc->wait_until_release != 0) return;
 8001f22:	071a      	lsls	r2, r3, #28
 8001f24:	d452      	bmi.n	8001fcc <indev_proc_press+0xbc>
    lv_disp_t * disp = indev_act->driver.disp;
 8001f26:	4ea3      	ldr	r6, [pc, #652]	; (80021b4 <indev_proc_press+0x2a4>)
 8001f28:	6833      	ldr	r3, [r6, #0]
 8001f2a:	68df      	ldr	r7, [r3, #12]
    if(indev_obj_act == NULL) {
 8001f2c:	2800      	cmp	r0, #0
 8001f2e:	f000 8116 	beq.w	800215e <indev_proc_press+0x24e>
    else if(proc->types.pointer.drag_in_prog == 0 &&
 8001f32:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8001f36:	079b      	lsls	r3, r3, #30
 8001f38:	d54b      	bpl.n	8001fd2 <indev_proc_press+0xc2>
    proc->types.pointer.vect.x = proc->types.pointer.act_point.x - proc->types.pointer.last_point.x;
 8001f3a:	8922      	ldrh	r2, [r4, #8]
 8001f3c:	88a7      	ldrh	r7, [r4, #4]
    proc->types.pointer.vect.y = proc->types.pointer.act_point.y - proc->types.pointer.last_point.y;
 8001f3e:	8963      	ldrh	r3, [r4, #10]
    proc->types.pointer.vect.x = proc->types.pointer.act_point.x - proc->types.pointer.last_point.x;
 8001f40:	1abf      	subs	r7, r7, r2
    proc->types.pointer.drag_throw_vect.x = (proc->types.pointer.drag_throw_vect.x * 5) >> 3;
 8001f42:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
    proc->types.pointer.vect.y = proc->types.pointer.act_point.y - proc->types.pointer.last_point.y;
 8001f46:	88e1      	ldrh	r1, [r4, #6]
    proc->types.pointer.drag_throw_vect.x = (proc->types.pointer.drag_throw_vect.x * 5) >> 3;
 8001f48:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    proc->types.pointer.vect.y = proc->types.pointer.act_point.y - proc->types.pointer.last_point.y;
 8001f4c:	1ac9      	subs	r1, r1, r3
    proc->types.pointer.drag_throw_vect.y = (proc->types.pointer.drag_throw_vect.y * 5) >> 3;
 8001f4e:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
    proc->types.pointer.drag_throw_vect.x = (proc->types.pointer.drag_throw_vect.x * 5) >> 3;
 8001f52:	10d2      	asrs	r2, r2, #3
    proc->types.pointer.vect.x = proc->types.pointer.act_point.x - proc->types.pointer.last_point.x;
 8001f54:	b23f      	sxth	r7, r7
    proc->types.pointer.vect.y = proc->types.pointer.act_point.y - proc->types.pointer.last_point.y;
 8001f56:	b209      	sxth	r1, r1
    if(proc->types.pointer.drag_throw_vect.x < 0)
 8001f58:	2a00      	cmp	r2, #0
    proc->types.pointer.drag_throw_vect.y = (proc->types.pointer.drag_throw_vect.y * 5) >> 3;
 8001f5a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    proc->types.pointer.vect.x = proc->types.pointer.act_point.x - proc->types.pointer.last_point.x;
 8001f5e:	81a7      	strh	r7, [r4, #12]
    proc->types.pointer.vect.y = proc->types.pointer.act_point.y - proc->types.pointer.last_point.y;
 8001f60:	81e1      	strh	r1, [r4, #14]
    proc->types.pointer.drag_throw_vect.y = (proc->types.pointer.drag_throw_vect.y * 5) >> 3;
 8001f62:	ea4f 03e3 	mov.w	r3, r3, asr #3
    if(proc->types.pointer.drag_throw_vect.x < 0)
 8001f66:	f2c0 80f2 	blt.w	800214e <indev_proc_press+0x23e>
    else if(proc->types.pointer.drag_throw_vect.x > 0)
 8001f6a:	d001      	beq.n	8001f70 <indev_proc_press+0x60>
        proc->types.pointer.drag_throw_vect.x--;
 8001f6c:	3a01      	subs	r2, #1
 8001f6e:	b292      	uxth	r2, r2
    if(proc->types.pointer.drag_throw_vect.y < 0)
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	f2c0 80f1 	blt.w	8002158 <indev_proc_press+0x248>
    else if(proc->types.pointer.drag_throw_vect.y > 0)
 8001f76:	d001      	beq.n	8001f7c <indev_proc_press+0x6c>
        proc->types.pointer.drag_throw_vect.y--;
 8001f78:	3b01      	subs	r3, #1
 8001f7a:	b29b      	uxth	r3, r3
    proc->types.pointer.drag_throw_vect.x += (proc->types.pointer.vect.x * 4) >> 3;
 8001f7c:	eb02 0267 	add.w	r2, r2, r7, asr #1
    proc->types.pointer.drag_throw_vect.y += (proc->types.pointer.vect.y * 4) >> 3;
 8001f80:	eb03 0361 	add.w	r3, r3, r1, asr #1
    proc->types.pointer.drag_throw_vect.x += (proc->types.pointer.vect.x * 4) >> 3;
 8001f84:	82a2      	strh	r2, [r4, #20]
    proc->types.pointer.drag_throw_vect.y += (proc->types.pointer.vect.y * 4) >> 3;
 8001f86:	82e3      	strh	r3, [r4, #22]
    if(indev_obj_act != NULL) {
 8001f88:	b300      	cbz	r0, 8001fcc <indev_proc_press+0xbc>
        indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_PRESSING, indev_act);
 8001f8a:	69c3      	ldr	r3, [r0, #28]
 8001f8c:	210c      	movs	r1, #12
 8001f8e:	6832      	ldr	r2, [r6, #0]
 8001f90:	4798      	blx	r3
    if(proc->reset_query) {
 8001f92:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8001f96:	0798      	lsls	r0, r3, #30
 8001f98:	d501      	bpl.n	8001f9e <indev_proc_press+0x8e>
        indev_obj_act = NULL;
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	602a      	str	r2, [r5, #0]
        if(indev_reset_check(proc)) return;
 8001f9e:	0799      	lsls	r1, r3, #30
 8001fa0:	f3c3 0740 	ubfx	r7, r3, #1, #1
 8001fa4:	d412      	bmi.n	8001fcc <indev_proc_press+0xbc>
        lv_event_send(indev_obj_act, LV_EVENT_PRESSING, NULL);
 8001fa6:	463a      	mov	r2, r7
 8001fa8:	2101      	movs	r1, #1
 8001faa:	6828      	ldr	r0, [r5, #0]
 8001fac:	f001 fc02 	bl	80037b4 <lv_event_send>
    if(proc->reset_query) {
 8001fb0:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8001fb4:	f013 0102 	ands.w	r1, r3, #2
        indev_obj_act = NULL;
 8001fb8:	bf18      	it	ne
 8001fba:	602f      	strne	r7, [r5, #0]
        if(indev_reset_check(proc)) return;
 8001fbc:	079a      	lsls	r2, r3, #30
 8001fbe:	d405      	bmi.n	8001fcc <indev_proc_press+0xbc>
        if(indev_act->proc.wait_until_release) return;
 8001fc0:	6832      	ldr	r2, [r6, #0]
 8001fc2:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 8001fc6:	0717      	lsls	r7, r2, #28
 8001fc8:	f140 80ee 	bpl.w	80021a8 <indev_proc_press+0x298>
}
 8001fcc:	b005      	add	sp, #20
 8001fce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            lv_obj_is_protected(indev_obj_act, LV_PROTECT_PRESS_LOST) == false) {
 8001fd2:	2110      	movs	r1, #16
 8001fd4:	f004 fa12 	bl	80063fc <lv_obj_is_protected>
    else if(proc->types.pointer.drag_in_prog == 0 &&
 8001fd8:	2800      	cmp	r0, #0
 8001fda:	f000 80c0 	beq.w	800215e <indev_proc_press+0x24e>
 8001fde:	6828      	ldr	r0, [r5, #0]
    if(indev_obj_act != proc->types.pointer.act_obj) {
 8001fe0:	69a7      	ldr	r7, [r4, #24]
 8001fe2:	4287      	cmp	r7, r0
 8001fe4:	d0a9      	beq.n	8001f3a <indev_proc_press+0x2a>
        proc->types.pointer.last_point.x = proc->types.pointer.act_point.x;
 8001fe6:	6863      	ldr	r3, [r4, #4]
 8001fe8:	60a3      	str	r3, [r4, #8]
        if(proc->types.pointer.act_obj != NULL) {
 8001fea:	b1d7      	cbz	r7, 8002022 <indev_proc_press+0x112>
            last_obj->signal_cb(last_obj, LV_SIGNAL_PRESS_LOST, indev_act);
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	210d      	movs	r1, #13
 8001ff0:	6832      	ldr	r2, [r6, #0]
 8001ff2:	4638      	mov	r0, r7
 8001ff4:	4798      	blx	r3
    if(proc->reset_query) {
 8001ff6:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8001ffa:	079a      	lsls	r2, r3, #30
 8001ffc:	d501      	bpl.n	8002002 <indev_proc_press+0xf2>
        indev_obj_act = NULL;
 8001ffe:	2200      	movs	r2, #0
 8002000:	602a      	str	r2, [r5, #0]
            if(indev_reset_check(proc)) return;
 8002002:	f3c3 0840 	ubfx	r8, r3, #1, #1
 8002006:	079b      	lsls	r3, r3, #30
 8002008:	d4e0      	bmi.n	8001fcc <indev_proc_press+0xbc>
            lv_event_send(last_obj, LV_EVENT_PRESS_LOST, NULL);
 800200a:	4638      	mov	r0, r7
 800200c:	4642      	mov	r2, r8
 800200e:	2102      	movs	r1, #2
 8002010:	f001 fbd0 	bl	80037b4 <lv_event_send>
    if(proc->reset_query) {
 8002014:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8002018:	f013 0f02 	tst.w	r3, #2
 800201c:	f040 80ba 	bne.w	8002194 <indev_proc_press+0x284>
 8002020:	6828      	ldr	r0, [r5, #0]
        proc->types.pointer.last_obj = indev_obj_act;
 8002022:	e9c4 0006 	strd	r0, r0, [r4, #24]
        if(indev_obj_act != NULL) {
 8002026:	2800      	cmp	r0, #0
 8002028:	d087      	beq.n	8001f3a <indev_proc_press+0x2a>
            proc->pr_timestamp                 = lv_tick_get();
 800202a:	f011 fd5f 	bl	8013aec <lv_tick_get>
            proc->types.pointer.drag_limit_out = 0;
 800202e:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
            proc->long_pr_sent                 = 0;
 8002032:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
            proc->types.pointer.drag_sum.x     = 0;
 8002036:	2700      	movs	r7, #0
            proc->types.pointer.drag_limit_out = 0;
 8002038:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
            proc->pr_timestamp                 = lv_tick_get();
 800203c:	62e0      	str	r0, [r4, #44]	; 0x2c
            proc->long_pr_sent                 = 0;
 800203e:	f36f 0200 	bfc	r2, #0, #1
            lv_obj_t * i        = indev_obj_act;
 8002042:	6828      	ldr	r0, [r5, #0]
            proc->types.pointer.drag_limit_out = 0;
 8002044:	f043 030c 	orr.w	r3, r3, #12
            proc->types.pointer.drag_sum.x     = 0;
 8002048:	6127      	str	r7, [r4, #16]
            proc->long_pr_sent                 = 0;
 800204a:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
            proc->types.pointer.drag_limit_out = 0;
 800204e:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
            proc->types.pointer.gesture_sum.x  = 0;
 8002052:	f8c4 7026 	str.w	r7, [r4, #38]	; 0x26
            proc->types.pointer.vect.x         = 0;
 8002056:	60e7      	str	r7, [r4, #12]
            while(i != NULL) {
 8002058:	b170      	cbz	r0, 8002078 <indev_proc_press+0x168>
                if(i->top) last_top = i;
 800205a:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 800205e:	f013 0f20 	tst.w	r3, #32
 8002062:	bf18      	it	ne
 8002064:	4607      	movne	r7, r0
                i = lv_obj_get_parent(i);
 8002066:	f002 fde5 	bl	8004c34 <lv_obj_get_parent>
            while(i != NULL) {
 800206a:	2800      	cmp	r0, #0
 800206c:	d1f5      	bne.n	800205a <indev_proc_press+0x14a>
            if(last_top != NULL) {
 800206e:	b117      	cbz	r7, 8002076 <indev_proc_press+0x166>
                lv_obj_move_foreground(last_top);
 8002070:	4638      	mov	r0, r7
 8002072:	f001 fddb 	bl	8003c2c <lv_obj_move_foreground>
 8002076:	6828      	ldr	r0, [r5, #0]
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_PRESSED, indev_act);
 8002078:	69c3      	ldr	r3, [r0, #28]
 800207a:	210b      	movs	r1, #11
 800207c:	6832      	ldr	r2, [r6, #0]
 800207e:	4798      	blx	r3
    if(proc->reset_query) {
 8002080:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8002084:	079f      	lsls	r7, r3, #30
 8002086:	d501      	bpl.n	800208c <indev_proc_press+0x17c>
        indev_obj_act = NULL;
 8002088:	2200      	movs	r2, #0
 800208a:	602a      	str	r2, [r5, #0]
            if(indev_reset_check(proc)) return;
 800208c:	0798      	lsls	r0, r3, #30
 800208e:	f3c3 0740 	ubfx	r7, r3, #1, #1
 8002092:	d49b      	bmi.n	8001fcc <indev_proc_press+0xbc>
            lv_event_send(indev_obj_act, LV_EVENT_PRESSED, NULL);
 8002094:	463a      	mov	r2, r7
 8002096:	4639      	mov	r1, r7
 8002098:	6828      	ldr	r0, [r5, #0]
 800209a:	f001 fb8b 	bl	80037b4 <lv_event_send>
    if(proc->reset_query) {
 800209e:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 80020a2:	f013 0f02 	tst.w	r3, #2
 80020a6:	f040 817a 	bne.w	800239e <indev_proc_press+0x48e>
            if(indev_act->proc.wait_until_release) return;
 80020aa:	6837      	ldr	r7, [r6, #0]
 80020ac:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80020b0:	0719      	lsls	r1, r3, #28
 80020b2:	d48b      	bmi.n	8001fcc <indev_proc_press+0xbc>
    lv_obj_t * obj_to_focus = lv_obj_get_focused_obj(indev_obj_act);
 80020b4:	6828      	ldr	r0, [r5, #0]
 80020b6:	f005 fe6d 	bl	8007d94 <lv_obj_get_focused_obj>
    if(lv_obj_is_protected(indev_obj_act, LV_PROTECT_CLICK_FOCUS) == false &&
 80020ba:	2120      	movs	r1, #32
    lv_obj_t * obj_to_focus = lv_obj_get_focused_obj(indev_obj_act);
 80020bc:	4681      	mov	r9, r0
    if(lv_obj_is_protected(indev_obj_act, LV_PROTECT_CLICK_FOCUS) == false &&
 80020be:	6828      	ldr	r0, [r5, #0]
 80020c0:	f004 f99c 	bl	80063fc <lv_obj_is_protected>
 80020c4:	4680      	mov	r8, r0
 80020c6:	bbb0      	cbnz	r0, 8002136 <indev_proc_press+0x226>
 80020c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020ca:	4599      	cmp	r9, r3
 80020cc:	d033      	beq.n	8002136 <indev_proc_press+0x226>
        lv_group_t * g_act = lv_obj_get_group(obj_to_focus);
 80020ce:	4648      	mov	r0, r9
 80020d0:	f004 fa04 	bl	80064dc <lv_obj_get_group>
        lv_group_t * g_prev = proc->types.pointer.last_pressed ? lv_obj_get_group(proc->types.pointer.last_pressed) : NULL;
 80020d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        lv_group_t * g_act = lv_obj_get_group(obj_to_focus);
 80020d6:	4682      	mov	sl, r0
        lv_group_t * g_prev = proc->types.pointer.last_pressed ? lv_obj_get_group(proc->types.pointer.last_pressed) : NULL;
 80020d8:	2b00      	cmp	r3, #0
 80020da:	f000 8282 	beq.w	80025e2 <indev_proc_press+0x6d2>
 80020de:	4618      	mov	r0, r3
 80020e0:	f004 f9fc 	bl	80064dc <lv_obj_get_group>
        if(g_act == g_prev) {
 80020e4:	4582      	cmp	sl, r0
        lv_group_t * g_prev = proc->types.pointer.last_pressed ? lv_obj_get_group(proc->types.pointer.last_pressed) : NULL;
 80020e6:	4683      	mov	fp, r0
        if(g_act == g_prev) {
 80020e8:	f000 82ef 	beq.w	80026ca <indev_proc_press+0x7ba>
            if(g_prev == NULL && proc->types.pointer.last_pressed) {
 80020ec:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80020ee:	f1bb 0f00 	cmp.w	fp, #0
 80020f2:	f000 831a 	beq.w	800272a <indev_proc_press+0x81a>
                if(proc->types.pointer.last_pressed) {
 80020f6:	2800      	cmp	r0, #0
 80020f8:	f000 82f3 	beq.w	80026e2 <indev_proc_press+0x7d2>
                        lv_signal_send(proc->types.pointer.last_pressed, LV_SIGNAL_LEAVE, NULL);
 80020fc:	4642      	mov	r2, r8
 80020fe:	2115      	movs	r1, #21
 8002100:	f001 fb86 	bl	8003810 <lv_signal_send>
    if(proc->reset_query) {
 8002104:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8002108:	0798      	lsls	r0, r3, #30
        indev_obj_act = NULL;
 800210a:	bf48      	it	mi
 800210c:	f8c5 8000 	strmi.w	r8, [r5]
                        if(indev_reset_check(proc)) return;
 8002110:	0799      	lsls	r1, r3, #30
 8002112:	f3c3 0840 	ubfx	r8, r3, #1, #1
 8002116:	d40e      	bmi.n	8002136 <indev_proc_press+0x226>
                        lv_event_send(proc->types.pointer.last_pressed, LV_EVENT_LEAVE, NULL);
 8002118:	4642      	mov	r2, r8
 800211a:	210f      	movs	r1, #15
 800211c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800211e:	f001 fb49 	bl	80037b4 <lv_event_send>
    if(proc->reset_query) {
 8002122:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8002126:	f013 0f02 	tst.w	r3, #2
 800212a:	f000 82da 	beq.w	80026e2 <indev_proc_press+0x7d2>
        indev_obj_act = NULL;
 800212e:	f8c5 8000 	str.w	r8, [r5]
                        if(indev_reset_check(proc)) return;
 8002132:	f000 82d6 	beq.w	80026e2 <indev_proc_press+0x7d2>
    if(proc->reset_query) {
 8002136:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800213a:	f013 0f02 	tst.w	r3, #2
 800213e:	d004      	beq.n	800214a <indev_proc_press+0x23a>
        indev_obj_act = NULL;
 8002140:	f04f 0200 	mov.w	r2, #0
 8002144:	602a      	str	r2, [r5, #0]
            if(indev_reset_check(proc)) return;
 8002146:	f47f af41 	bne.w	8001fcc <indev_proc_press+0xbc>
 800214a:	6828      	ldr	r0, [r5, #0]
 800214c:	e6f5      	b.n	8001f3a <indev_proc_press+0x2a>
        proc->types.pointer.drag_throw_vect.x++;
 800214e:	3201      	adds	r2, #1
    if(proc->types.pointer.drag_throw_vect.y < 0)
 8002150:	2b00      	cmp	r3, #0
        proc->types.pointer.drag_throw_vect.x++;
 8002152:	b292      	uxth	r2, r2
    if(proc->types.pointer.drag_throw_vect.y < 0)
 8002154:	f6bf af0f 	bge.w	8001f76 <indev_proc_press+0x66>
        proc->types.pointer.drag_throw_vect.y++;
 8002158:	3301      	adds	r3, #1
 800215a:	b29b      	uxth	r3, r3
 800215c:	e70e      	b.n	8001f7c <indev_proc_press+0x6c>
        indev_obj_act = lv_indev_search_obj(lv_disp_get_layer_sys(disp), &proc->types.pointer.act_point);
 800215e:	f104 0804 	add.w	r8, r4, #4
 8002162:	4638      	mov	r0, r7
 8002164:	f7ff f9f0 	bl	8001548 <lv_disp_get_layer_sys>
 8002168:	4641      	mov	r1, r8
 800216a:	f7ff fe8f 	bl	8001e8c <lv_indev_search_obj>
 800216e:	6028      	str	r0, [r5, #0]
        if(indev_obj_act == NULL) indev_obj_act = lv_indev_search_obj(lv_disp_get_layer_top(disp),
 8002170:	2800      	cmp	r0, #0
 8002172:	f000 8118 	beq.w	80023a6 <indev_proc_press+0x496>
    if(new_obj_searched && proc->types.pointer.last_obj) {
 8002176:	69e3      	ldr	r3, [r4, #28]
 8002178:	2b00      	cmp	r3, #0
 800217a:	f43f af31 	beq.w	8001fe0 <indev_proc_press+0xd0>
    if(proc->types.pointer.drag_in_prog == 0) return;
 800217e:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
        proc->types.pointer.drag_throw_vect.x = 0;
 8002182:	2200      	movs	r2, #0
    if(proc->types.pointer.drag_in_prog == 0) return;
 8002184:	0799      	lsls	r1, r3, #30
        proc->types.pointer.drag_throw_vect.x = 0;
 8002186:	6162      	str	r2, [r4, #20]
    if(proc->types.pointer.drag_in_prog == 0) return;
 8002188:	f57f af29 	bpl.w	8001fde <indev_proc_press+0xce>
 800218c:	4620      	mov	r0, r4
 800218e:	f7ff fc21 	bl	80019d4 <indev_drag_throw.part.0>
 8002192:	e724      	b.n	8001fde <indev_proc_press+0xce>
            if(indev_reset_check(proc)) return;
 8002194:	f3c3 0240 	ubfx	r2, r3, #1, #1
        indev_obj_act = NULL;
 8002198:	f8c5 8000 	str.w	r8, [r5]
            if(indev_reset_check(proc)) return;
 800219c:	f47f af16 	bne.w	8001fcc <indev_proc_press+0xbc>
        proc->types.pointer.last_obj = indev_obj_act;
 80021a0:	4610      	mov	r0, r2
        proc->types.pointer.act_obj  = indev_obj_act; /*Save the pressed object*/
 80021a2:	61a2      	str	r2, [r4, #24]
        proc->types.pointer.last_obj = indev_obj_act;
 80021a4:	61e2      	str	r2, [r4, #28]
        if(indev_obj_act != NULL) {
 80021a6:	e6c8      	b.n	8001f3a <indev_proc_press+0x2a>
    lv_obj_t * drag_obj    = get_dragged_obj(proc->types.pointer.act_obj);
 80021a8:	69a7      	ldr	r7, [r4, #24]
    if(obj == NULL) return NULL;
 80021aa:	b95f      	cbnz	r7, 80021c4 <indev_proc_press+0x2b4>
 80021ac:	e214      	b.n	80025d8 <indev_proc_press+0x6c8>
 80021ae:	bf00      	nop
 80021b0:	2001788c 	.word	0x2001788c
 80021b4:	20017888 	.word	0x20017888
    while(lv_obj_get_drag_parent(drag_obj) != false && drag_obj != NULL) {
 80021b8:	2f00      	cmp	r7, #0
 80021ba:	f000 8106 	beq.w	80023ca <indev_proc_press+0x4ba>
        drag_obj = lv_obj_get_parent(drag_obj);
 80021be:	f002 fd39 	bl	8004c34 <lv_obj_get_parent>
 80021c2:	4607      	mov	r7, r0
    while(lv_obj_get_drag_parent(drag_obj) != false && drag_obj != NULL) {
 80021c4:	4638      	mov	r0, r7
 80021c6:	f004 f8fb 	bl	80063c0 <lv_obj_get_drag_parent>
 80021ca:	4603      	mov	r3, r0
        drag_obj = lv_obj_get_parent(drag_obj);
 80021cc:	4638      	mov	r0, r7
    while(lv_obj_get_drag_parent(drag_obj) != false && drag_obj != NULL) {
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d1f2      	bne.n	80021b8 <indev_proc_press+0x2a8>
    if(drag_obj == NULL) return;
 80021d2:	4698      	mov	r8, r3
 80021d4:	2f00      	cmp	r7, #0
 80021d6:	f000 80f8 	beq.w	80023ca <indev_proc_press+0x4ba>
    if(lv_obj_get_drag(drag_obj) == false) return;
 80021da:	f004 f8bb 	bl	8006354 <lv_obj_get_drag>
 80021de:	4682      	mov	sl, r0
 80021e0:	2800      	cmp	r0, #0
 80021e2:	f000 80f2 	beq.w	80023ca <indev_proc_press+0x4ba>
    lv_drag_dir_t allowed_dirs = lv_obj_get_drag_dir(drag_obj);
 80021e6:	4638      	mov	r0, r7
 80021e8:	f004 f8c6 	bl	8006378 <lv_obj_get_drag_dir>
    if(proc->types.pointer.drag_limit_out == 0) {
 80021ec:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
    lv_drag_dir_t allowed_dirs = lv_obj_get_drag_dir(drag_obj);
 80021f0:	4681      	mov	r9, r0
    if(proc->types.pointer.drag_limit_out == 0) {
 80021f2:	07d8      	lsls	r0, r3, #31
 80021f4:	f100 8100 	bmi.w	80023f8 <indev_proc_press+0x4e8>
        proc->types.pointer.drag_sum.x += proc->types.pointer.vect.x;
 80021f8:	8a22      	ldrh	r2, [r4, #16]
        if(allowed_dirs == LV_DRAG_DIR_VER || allowed_dirs == LV_DRAG_DIR_BOTH) {
 80021fa:	f1a9 0002 	sub.w	r0, r9, #2
        proc->types.pointer.drag_sum.x += proc->types.pointer.vect.x;
 80021fe:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
        if(allowed_dirs == LV_DRAG_DIR_HOR || allowed_dirs == LV_DRAG_DIR_BOTH) {
 8002202:	f009 0cfd 	and.w	ip, r9, #253	; 0xfd
        proc->types.pointer.drag_sum.y += proc->types.pointer.vect.y;
 8002206:	8a61      	ldrh	r1, [r4, #18]
        if(allowed_dirs == LV_DRAG_DIR_VER || allowed_dirs == LV_DRAG_DIR_BOTH) {
 8002208:	b2c0      	uxtb	r0, r0
        proc->types.pointer.drag_sum.x += proc->types.pointer.vect.x;
 800220a:	4472      	add	r2, lr
        proc->types.pointer.drag_sum.y += proc->types.pointer.vect.y;
 800220c:	f8b4 e00e 	ldrh.w	lr, [r4, #14]
        if(allowed_dirs == LV_DRAG_DIR_VER || allowed_dirs == LV_DRAG_DIR_BOTH) {
 8002210:	2801      	cmp	r0, #1
        proc->types.pointer.drag_sum.y += proc->types.pointer.vect.y;
 8002212:	4471      	add	r1, lr
        proc->types.pointer.drag_sum.x += proc->types.pointer.vect.x;
 8002214:	b212      	sxth	r2, r2
        proc->types.pointer.drag_sum.y += proc->types.pointer.vect.y;
 8002216:	b209      	sxth	r1, r1
        proc->types.pointer.drag_sum.x += proc->types.pointer.vect.x;
 8002218:	8222      	strh	r2, [r4, #16]
        proc->types.pointer.drag_sum.y += proc->types.pointer.vect.y;
 800221a:	8261      	strh	r1, [r4, #18]
        if(allowed_dirs == LV_DRAG_DIR_VER || allowed_dirs == LV_DRAG_DIR_BOTH) {
 800221c:	f240 820b 	bls.w	8002636 <indev_proc_press+0x726>
        if(allowed_dirs == LV_DRAG_DIR_ONE) {
 8002220:	f1b9 0f04 	cmp.w	r9, #4
 8002224:	f000 81ef 	beq.w	8002606 <indev_proc_press+0x6f6>
        if((hor_en && LV_MATH_ABS(proc->types.pointer.drag_sum.x) >= indev_act->driver.drag_limit) ||
 8002228:	f1bc 0f01 	cmp.w	ip, #1
 800222c:	d111      	bne.n	8002252 <indev_proc_press+0x342>
 800222e:	2a00      	cmp	r2, #0
 8002230:	6831      	ldr	r1, [r6, #0]
 8002232:	bfb8      	it	lt
 8002234:	4252      	neglt	r2, r2
 8002236:	7d09      	ldrb	r1, [r1, #20]
 8002238:	b292      	uxth	r2, r2
 800223a:	4291      	cmp	r1, r2
 800223c:	d809      	bhi.n	8002252 <indev_proc_press+0x342>
            proc->types.pointer.drag_limit_out = 1;
 800223e:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
 8002242:	f042 0201 	orr.w	r2, r2, #1
    if(proc->types.pointer.drag_limit_out != 0) {
 8002246:	07d1      	lsls	r1, r2, #31
 8002248:	4613      	mov	r3, r2
            proc->types.pointer.drag_limit_out = 1;
 800224a:	f884 202a 	strb.w	r2, [r4, #42]	; 0x2a
    if(proc->types.pointer.drag_limit_out != 0) {
 800224e:	f100 80d2 	bmi.w	80023f6 <indev_proc_press+0x4e6>
    if(proc->types.pointer.gesture_sent) return;
 8002252:	069b      	lsls	r3, r3, #26
 8002254:	f100 80bc 	bmi.w	80023d0 <indev_proc_press+0x4c0>
    lv_obj_t * gesture_obj = proc->types.pointer.act_obj;
 8002258:	69a7      	ldr	r7, [r4, #24]
    while(gesture_obj && lv_obj_get_gesture_parent(gesture_obj)) {
 800225a:	b937      	cbnz	r7, 800226a <indev_proc_press+0x35a>
 800225c:	e0b8      	b.n	80023d0 <indev_proc_press+0x4c0>
        gesture_obj = lv_obj_get_parent(gesture_obj);
 800225e:	f002 fce9 	bl	8004c34 <lv_obj_get_parent>
    while(gesture_obj && lv_obj_get_gesture_parent(gesture_obj)) {
 8002262:	4607      	mov	r7, r0
 8002264:	2800      	cmp	r0, #0
 8002266:	f000 80b3 	beq.w	80023d0 <indev_proc_press+0x4c0>
 800226a:	4638      	mov	r0, r7
 800226c:	f004 f8ae 	bl	80063cc <lv_obj_get_gesture_parent>
 8002270:	4603      	mov	r3, r0
        gesture_obj = lv_obj_get_parent(gesture_obj);
 8002272:	4638      	mov	r0, r7
    while(gesture_obj && lv_obj_get_gesture_parent(gesture_obj)) {
 8002274:	2b00      	cmp	r3, #0
 8002276:	d1f2      	bne.n	800225e <indev_proc_press+0x34e>
    if((LV_MATH_ABS(proc->types.pointer.vect.x) < indev_act->driver.gesture_min_velocity) &&
 8002278:	f9b4 800c 	ldrsh.w	r8, [r4, #12]
 800227c:	6832      	ldr	r2, [r6, #0]
 800227e:	ea88 71e8 	eor.w	r1, r8, r8, asr #31
       (LV_MATH_ABS(proc->types.pointer.vect.y) < indev_act->driver.gesture_min_velocity)) {
 8002282:	f9b4 c00e 	ldrsh.w	ip, [r4, #14]
    if((LV_MATH_ABS(proc->types.pointer.vect.x) < indev_act->driver.gesture_min_velocity) &&
 8002286:	f892 e016 	ldrb.w	lr, [r2, #22]
 800228a:	eba1 71e8 	sub.w	r1, r1, r8, asr #31
 800228e:	b289      	uxth	r1, r1
 8002290:	4571      	cmp	r1, lr
 8002292:	f080 80a6 	bcs.w	80023e2 <indev_proc_press+0x4d2>
       (LV_MATH_ABS(proc->types.pointer.vect.y) < indev_act->driver.gesture_min_velocity)) {
 8002296:	ea8c 71ec 	eor.w	r1, ip, ip, asr #31
 800229a:	eba1 71ec 	sub.w	r1, r1, ip, asr #31
    if((LV_MATH_ABS(proc->types.pointer.vect.x) < indev_act->driver.gesture_min_velocity) &&
 800229e:	b289      	uxth	r1, r1
 80022a0:	458e      	cmp	lr, r1
 80022a2:	f240 809e 	bls.w	80023e2 <indev_proc_press+0x4d2>
        proc->types.pointer.gesture_sum.x = 0;
 80022a6:	4619      	mov	r1, r3
 80022a8:	4618      	mov	r0, r3
 80022aa:	f8c4 3026 	str.w	r3, [r4, #38]	; 0x26
    proc->types.pointer.gesture_sum.x += proc->types.pointer.vect.x;
 80022ae:	4440      	add	r0, r8
    proc->types.pointer.gesture_sum.y += proc->types.pointer.vect.y;
 80022b0:	eb01 030c 	add.w	r3, r1, ip
    proc->types.pointer.gesture_sum.x += proc->types.pointer.vect.x;
 80022b4:	b200      	sxth	r0, r0
    proc->types.pointer.gesture_sum.y += proc->types.pointer.vect.y;
 80022b6:	b21b      	sxth	r3, r3
    if((LV_MATH_ABS(proc->types.pointer.gesture_sum.x) > indev_act->driver.gesture_limit) ||
 80022b8:	ea80 71e0 	eor.w	r1, r0, r0, asr #31
    proc->types.pointer.gesture_sum.x += proc->types.pointer.vect.x;
 80022bc:	84e0      	strh	r0, [r4, #38]	; 0x26
    proc->types.pointer.gesture_sum.y += proc->types.pointer.vect.y;
 80022be:	ea83 7ce3 	eor.w	ip, r3, r3, asr #31
 80022c2:	8523      	strh	r3, [r4, #40]	; 0x28
    if((LV_MATH_ABS(proc->types.pointer.gesture_sum.x) > indev_act->driver.gesture_limit) ||
 80022c4:	eba1 71e0 	sub.w	r1, r1, r0, asr #31
 80022c8:	f892 e017 	ldrb.w	lr, [r2, #23]
 80022cc:	ebac 7ce3 	sub.w	ip, ip, r3, asr #31
 80022d0:	b289      	uxth	r1, r1
 80022d2:	fa1f fc8c 	uxth.w	ip, ip
 80022d6:	4571      	cmp	r1, lr
 80022d8:	d801      	bhi.n	80022de <indev_proc_press+0x3ce>
 80022da:	45e6      	cmp	lr, ip
 80022dc:	d278      	bcs.n	80023d0 <indev_proc_press+0x4c0>
        proc->types.pointer.gesture_sent = 1;
 80022de:	f894 e02a 	ldrb.w	lr, [r4, #42]	; 0x2a
        if(LV_MATH_ABS(proc->types.pointer.gesture_sum.x) > LV_MATH_ABS(proc->types.pointer.gesture_sum.y)) {
 80022e2:	4561      	cmp	r1, ip
        proc->types.pointer.gesture_sent = 1;
 80022e4:	f04e 0e20 	orr.w	lr, lr, #32
 80022e8:	f884 e02a 	strb.w	lr, [r4, #42]	; 0x2a
        if(LV_MATH_ABS(proc->types.pointer.gesture_sum.x) > LV_MATH_ABS(proc->types.pointer.gesture_sum.y)) {
 80022ec:	d97c      	bls.n	80023e8 <indev_proc_press+0x4d8>
            if(proc->types.pointer.gesture_sum.x > 0)
 80022ee:	2800      	cmp	r0, #0
                proc->types.pointer.gesture_dir = LV_GESTURE_DIR_RIGHT;
 80022f0:	bfcc      	ite	gt
 80022f2:	2303      	movgt	r3, #3
                proc->types.pointer.gesture_dir = LV_GESTURE_DIR_LEFT;
 80022f4:	2302      	movle	r3, #2
 80022f6:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
        gesture_obj->signal_cb(gesture_obj, LV_SIGNAL_GESTURE, indev_act);
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	2114      	movs	r1, #20
 80022fe:	4638      	mov	r0, r7
 8002300:	4798      	blx	r3
    if(proc->reset_query) {
 8002302:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8002306:	f013 0f02 	tst.w	r3, #2
 800230a:	d004      	beq.n	8002316 <indev_proc_press+0x406>
        indev_obj_act = NULL;
 800230c:	f04f 0200 	mov.w	r2, #0
 8002310:	602a      	str	r2, [r5, #0]
        if(indev_reset_check(proc)) return;
 8002312:	f47f ae5b 	bne.w	8001fcc <indev_proc_press+0xbc>
        lv_event_send(gesture_obj, LV_EVENT_GESTURE, NULL);
 8002316:	4638      	mov	r0, r7
 8002318:	2200      	movs	r2, #0
 800231a:	210b      	movs	r1, #11
 800231c:	f001 fa4a 	bl	80037b4 <lv_event_send>
    if(proc->reset_query) {
 8002320:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8002324:	079f      	lsls	r7, r3, #30
 8002326:	f3c3 0240 	ubfx	r2, r3, #1, #1
 800232a:	d501      	bpl.n	8002330 <indev_proc_press+0x420>
        indev_obj_act = NULL;
 800232c:	2100      	movs	r1, #0
 800232e:	6029      	str	r1, [r5, #0]
        if(indev_reset_check(proc)) return;
 8002330:	2a00      	cmp	r2, #0
 8002332:	f47f ae4b 	bne.w	8001fcc <indev_proc_press+0xbc>
        if(proc->types.pointer.drag_in_prog == 0 && proc->long_pr_sent == 0) {
 8002336:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
 800233a:	0790      	lsls	r0, r2, #30
 800233c:	f53f ae46 	bmi.w	8001fcc <indev_proc_press+0xbc>
 8002340:	f013 0701 	ands.w	r7, r3, #1
 8002344:	f000 8115 	beq.w	8002572 <indev_proc_press+0x662>
        if(proc->types.pointer.drag_in_prog == 0 && proc->long_pr_sent == 1) {
 8002348:	07d9      	lsls	r1, r3, #31
 800234a:	f57f ae3f 	bpl.w	8001fcc <indev_proc_press+0xbc>
            if(lv_tick_elaps(proc->longpr_rep_timestamp) > indev_act->driver.long_press_rep_time) {
 800234e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002350:	f011 fbda 	bl	8013b08 <lv_tick_elaps>
 8002354:	6832      	ldr	r2, [r6, #0]
 8002356:	8b53      	ldrh	r3, [r2, #26]
 8002358:	4298      	cmp	r0, r3
 800235a:	f67f ae37 	bls.w	8001fcc <indev_proc_press+0xbc>
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_LONG_PRESS_REP, indev_act);
 800235e:	6828      	ldr	r0, [r5, #0]
 8002360:	2110      	movs	r1, #16
 8002362:	69c3      	ldr	r3, [r0, #28]
 8002364:	4798      	blx	r3
    if(proc->reset_query) {
 8002366:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800236a:	0798      	lsls	r0, r3, #30
 800236c:	d501      	bpl.n	8002372 <indev_proc_press+0x462>
        indev_obj_act = NULL;
 800236e:	2200      	movs	r2, #0
 8002370:	602a      	str	r2, [r5, #0]
                if(indev_reset_check(proc)) return;
 8002372:	0799      	lsls	r1, r3, #30
 8002374:	f3c3 0640 	ubfx	r6, r3, #1, #1
 8002378:	f53f ae28 	bmi.w	8001fcc <indev_proc_press+0xbc>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED_REPEAT, NULL);
 800237c:	4632      	mov	r2, r6
 800237e:	2105      	movs	r1, #5
 8002380:	6828      	ldr	r0, [r5, #0]
 8002382:	f001 fa17 	bl	80037b4 <lv_event_send>
    if(proc->reset_query) {
 8002386:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800238a:	f013 0f02 	tst.w	r3, #2
 800238e:	d002      	beq.n	8002396 <indev_proc_press+0x486>
        indev_obj_act = NULL;
 8002390:	602e      	str	r6, [r5, #0]
                if(indev_reset_check(proc)) return;
 8002392:	f47f ae1b 	bne.w	8001fcc <indev_proc_press+0xbc>
                proc->longpr_rep_timestamp = lv_tick_get();
 8002396:	f011 fba9 	bl	8013aec <lv_tick_get>
 800239a:	6320      	str	r0, [r4, #48]	; 0x30
 800239c:	e616      	b.n	8001fcc <indev_proc_press+0xbc>
        indev_obj_act = NULL;
 800239e:	602f      	str	r7, [r5, #0]
            if(indev_reset_check(proc)) return;
 80023a0:	f47f ae14 	bne.w	8001fcc <indev_proc_press+0xbc>
 80023a4:	e681      	b.n	80020aa <indev_proc_press+0x19a>
        if(indev_obj_act == NULL) indev_obj_act = lv_indev_search_obj(lv_disp_get_layer_top(disp),
 80023a6:	4638      	mov	r0, r7
 80023a8:	f7ff f8c4 	bl	8001534 <lv_disp_get_layer_top>
 80023ac:	4641      	mov	r1, r8
 80023ae:	f7ff fd6d 	bl	8001e8c <lv_indev_search_obj>
 80023b2:	6028      	str	r0, [r5, #0]
        if(indev_obj_act == NULL) indev_obj_act = lv_indev_search_obj(lv_disp_get_scr_act(disp),
 80023b4:	2800      	cmp	r0, #0
 80023b6:	f47f aede 	bne.w	8002176 <indev_proc_press+0x266>
 80023ba:	4638      	mov	r0, r7
 80023bc:	f7ff f8a6 	bl	800150c <lv_disp_get_scr_act>
 80023c0:	4641      	mov	r1, r8
 80023c2:	f7ff fd63 	bl	8001e8c <lv_indev_search_obj>
 80023c6:	6028      	str	r0, [r5, #0]
 80023c8:	e6d5      	b.n	8002176 <indev_proc_press+0x266>
 80023ca:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 80023ce:	e740      	b.n	8002252 <indev_proc_press+0x342>
    if(proc->reset_query) {
 80023d0:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 80023d4:	f003 0102 	and.w	r1, r3, #2
 80023d8:	f3c3 0240 	ubfx	r2, r3, #1, #1
 80023dc:	2900      	cmp	r1, #0
 80023de:	d0a7      	beq.n	8002330 <indev_proc_press+0x420>
 80023e0:	e7a4      	b.n	800232c <indev_proc_press+0x41c>
 80023e2:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
 80023e4:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 80023e6:	e762      	b.n	80022ae <indev_proc_press+0x39e>
            if(proc->types.pointer.gesture_sum.y > 0)
 80023e8:	2b00      	cmp	r3, #0
                proc->types.pointer.gesture_dir = LV_GESTURE_DIR_BOTTOM;
 80023ea:	bfcc      	ite	gt
 80023ec:	2301      	movgt	r3, #1
                proc->types.pointer.gesture_dir = LV_GESTURE_DIR_TOP;
 80023ee:	2300      	movle	r3, #0
 80023f0:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 80023f4:	e781      	b.n	80022fa <indev_proc_press+0x3ea>
            drag_just_started                   = true;
 80023f6:	46d0      	mov	r8, sl
        if(proc->types.pointer.vect.x != 0 || proc->types.pointer.vect.y != 0) {
 80023f8:	68e2      	ldr	r2, [r4, #12]
 80023fa:	2a00      	cmp	r2, #0
 80023fc:	f43f af29 	beq.w	8002252 <indev_proc_press+0x342>
            lv_coord_t prev_x     = drag_obj->coords.x1;
 8002400:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
            lv_coord_t prev_par_w = lv_obj_get_width(lv_obj_get_parent(drag_obj));
 8002404:	4638      	mov	r0, r7
            lv_coord_t prev_x     = drag_obj->coords.x1;
 8002406:	9300      	str	r3, [sp, #0]
            lv_coord_t prev_y     = drag_obj->coords.y1;
 8002408:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800240c:	9301      	str	r3, [sp, #4]
            lv_coord_t prev_par_w = lv_obj_get_width(lv_obj_get_parent(drag_obj));
 800240e:	f002 fc11 	bl	8004c34 <lv_obj_get_parent>
 8002412:	f002 fcab 	bl	8004d6c <lv_obj_get_width>
 8002416:	4682      	mov	sl, r0
            lv_coord_t prev_par_h = lv_obj_get_height(lv_obj_get_parent(drag_obj));
 8002418:	4638      	mov	r0, r7
 800241a:	f002 fc0b 	bl	8004c34 <lv_obj_get_parent>
 800241e:	f002 fcb9 	bl	8004d94 <lv_obj_get_height>
 8002422:	4683      	mov	fp, r0
            lv_coord_t act_x = lv_obj_get_x(drag_obj);
 8002424:	4638      	mov	r0, r7
 8002426:	f002 fc5d 	bl	8004ce4 <lv_obj_get_x>
 800242a:	4601      	mov	r1, r0
            lv_coord_t act_y = lv_obj_get_y(drag_obj);
 800242c:	4638      	mov	r0, r7
            lv_coord_t act_x = lv_obj_get_x(drag_obj);
 800242e:	9102      	str	r1, [sp, #8]
            lv_coord_t act_y = lv_obj_get_y(drag_obj);
 8002430:	f002 fc7a 	bl	8004d28 <lv_obj_get_y>
            if(allowed_dirs == LV_DRAG_DIR_BOTH) {
 8002434:	f1b9 0f03 	cmp.w	r9, #3
            lv_coord_t act_y = lv_obj_get_y(drag_obj);
 8002438:	4602      	mov	r2, r0
            if(allowed_dirs == LV_DRAG_DIR_BOTH) {
 800243a:	9902      	ldr	r1, [sp, #8]
 800243c:	f000 8161 	beq.w	8002702 <indev_proc_press+0x7f2>
            else if(allowed_dirs == LV_DRAG_DIR_HOR) {
 8002440:	f1b9 0f01 	cmp.w	r9, #1
 8002444:	f000 8185 	beq.w	8002752 <indev_proc_press+0x842>
            else if(allowed_dirs == LV_DRAG_DIR_VER) {
 8002448:	f1b9 0f02 	cmp.w	r9, #2
 800244c:	f000 8195 	beq.w	800277a <indev_proc_press+0x86a>
                if(drag_just_started) {
 8002450:	f1b9 0f04 	cmp.w	r9, #4
 8002454:	d12c      	bne.n	80024b0 <indev_proc_press+0x5a0>
 8002456:	f1b8 0f00 	cmp.w	r8, #0
 800245a:	f040 81a6 	bne.w	80027aa <indev_proc_press+0x89a>
               allowed_dirs == LV_DRAG_DIR_BOTH ||
 800245e:	f1b9 0f04 	cmp.w	r9, #4
 8002462:	d125      	bne.n	80024b0 <indev_proc_press+0x5a0>
 8002464:	f9b4 0010 	ldrsh.w	r0, [r4, #16]
 8002468:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
                LV_MATH_ABS(proc->types.pointer.drag_sum.x) > LV_MATH_ABS(proc->types.pointer.drag_sum.y))) {
 800246c:	ea80 7ee0 	eor.w	lr, r0, r0, asr #31
 8002470:	ea83 7ce3 	eor.w	ip, r3, r3, asr #31
 8002474:	ebae 7ee0 	sub.w	lr, lr, r0, asr #31
 8002478:	ebac 7ce3 	sub.w	ip, ip, r3, asr #31
               (allowed_dirs == LV_DRAG_DIR_ONE &&
 800247c:	fa1f fe8e 	uxth.w	lr, lr
 8002480:	fa1f fc8c 	uxth.w	ip, ip
 8002484:	45e6      	cmp	lr, ip
 8002486:	d906      	bls.n	8002496 <indev_proc_press+0x586>
                act_x += proc->types.pointer.vect.x;
 8002488:	f8b4 c00c 	ldrh.w	ip, [r4, #12]
               allowed_dirs == LV_DRAG_DIR_BOTH ||
 800248c:	f1b9 0f04 	cmp.w	r9, #4
                act_x += proc->types.pointer.vect.x;
 8002490:	4461      	add	r1, ip
 8002492:	b209      	sxth	r1, r1
               allowed_dirs == LV_DRAG_DIR_BOTH ||
 8002494:	d10c      	bne.n	80024b0 <indev_proc_press+0x5a0>
                LV_MATH_ABS(proc->types.pointer.drag_sum.x) < LV_MATH_ABS(proc->types.pointer.drag_sum.y))) {
 8002496:	2800      	cmp	r0, #0
 8002498:	bfb8      	it	lt
 800249a:	4240      	neglt	r0, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	bfb8      	it	lt
 80024a0:	425b      	neglt	r3, r3
               (allowed_dirs == LV_DRAG_DIR_ONE &&
 80024a2:	b280      	uxth	r0, r0
 80024a4:	b29b      	uxth	r3, r3
 80024a6:	4298      	cmp	r0, r3
 80024a8:	d202      	bcs.n	80024b0 <indev_proc_press+0x5a0>
                act_y += proc->types.pointer.vect.y;
 80024aa:	89e3      	ldrh	r3, [r4, #14]
 80024ac:	441a      	add	r2, r3
 80024ae:	b212      	sxth	r2, r2
                lv_disp_get_inv_buf_size(indev_act->driver.disp); /*Get the number of currently invalidated areas*/
 80024b0:	6833      	ldr	r3, [r6, #0]
 80024b2:	68d8      	ldr	r0, [r3, #12]
 80024b4:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80024b8:	f011 fa56 	bl	8013968 <lv_disp_get_inv_buf_size>
 80024bc:	4681      	mov	r9, r0
            lv_obj_set_pos(drag_obj, act_x, act_y);
 80024be:	4638      	mov	r0, r7
 80024c0:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80024c4:	f001 fc64 	bl	8003d90 <lv_obj_set_pos>
            proc->types.pointer.drag_in_prog = 1;
 80024c8:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
            if(drag_obj->coords.x1 == prev_x && drag_obj->coords.y1 == prev_y) {
 80024cc:	9a00      	ldr	r2, [sp, #0]
            proc->types.pointer.drag_in_prog = 1;
 80024ce:	f043 0302 	orr.w	r3, r3, #2
 80024d2:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
            if(drag_obj->coords.x1 == prev_x && drag_obj->coords.y1 == prev_y) {
 80024d6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80024da:	4293      	cmp	r3, r2
 80024dc:	d027      	beq.n	800252e <indev_proc_press+0x61e>
            if(drag_just_started) {
 80024de:	f1b8 0f00 	cmp.w	r8, #0
 80024e2:	f43f af72 	beq.w	80023ca <indev_proc_press+0x4ba>
                drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_BEGIN, indev_act);
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	2111      	movs	r1, #17
 80024ea:	6832      	ldr	r2, [r6, #0]
 80024ec:	4638      	mov	r0, r7
 80024ee:	4798      	blx	r3
    if(proc->reset_query) {
 80024f0:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 80024f4:	079a      	lsls	r2, r3, #30
 80024f6:	d501      	bpl.n	80024fc <indev_proc_press+0x5ec>
        indev_obj_act = NULL;
 80024f8:	2200      	movs	r2, #0
 80024fa:	602a      	str	r2, [r5, #0]
                if(indev_reset_check(proc)) return;
 80024fc:	0798      	lsls	r0, r3, #30
 80024fe:	f3c3 0840 	ubfx	r8, r3, #1, #1
 8002502:	f53f af62 	bmi.w	80023ca <indev_proc_press+0x4ba>
                lv_event_send(drag_obj, LV_EVENT_DRAG_BEGIN, NULL);
 8002506:	4642      	mov	r2, r8
 8002508:	2108      	movs	r1, #8
 800250a:	4638      	mov	r0, r7
 800250c:	f001 f952 	bl	80037b4 <lv_event_send>
    if(proc->reset_query) {
 8002510:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    if(proc->types.pointer.gesture_sent) return;
 8002514:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
    if(proc->reset_query) {
 8002518:	0799      	lsls	r1, r3, #30
 800251a:	f140 8140 	bpl.w	800279e <indev_proc_press+0x88e>
    if(proc->types.pointer.gesture_sent) return;
 800251e:	0692      	lsls	r2, r2, #26
        indev_obj_act = NULL;
 8002520:	f8c5 8000 	str.w	r8, [r5]
    if(proc->types.pointer.gesture_sent) return;
 8002524:	f57f ae98 	bpl.w	8002258 <indev_proc_press+0x348>
    if(proc->reset_query) {
 8002528:	f3c3 0240 	ubfx	r2, r3, #1, #1
 800252c:	e6fe      	b.n	800232c <indev_proc_press+0x41c>
            if(drag_obj->coords.x1 == prev_x && drag_obj->coords.y1 == prev_y) {
 800252e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002532:	9a01      	ldr	r2, [sp, #4]
 8002534:	4293      	cmp	r3, r2
 8002536:	d1d2      	bne.n	80024de <indev_proc_press+0x5ce>
                lv_coord_t act_par_w = lv_obj_get_width(lv_obj_get_parent(drag_obj));
 8002538:	4638      	mov	r0, r7
 800253a:	f002 fb7b 	bl	8004c34 <lv_obj_get_parent>
 800253e:	f002 fc15 	bl	8004d6c <lv_obj_get_width>
 8002542:	4602      	mov	r2, r0
                lv_coord_t act_par_h = lv_obj_get_height(lv_obj_get_parent(drag_obj));
 8002544:	4638      	mov	r0, r7
                lv_coord_t act_par_w = lv_obj_get_width(lv_obj_get_parent(drag_obj));
 8002546:	9200      	str	r2, [sp, #0]
                lv_coord_t act_par_h = lv_obj_get_height(lv_obj_get_parent(drag_obj));
 8002548:	f002 fb74 	bl	8004c34 <lv_obj_get_parent>
 800254c:	f002 fc22 	bl	8004d94 <lv_obj_get_height>
                if(act_par_w == prev_par_w && act_par_h == prev_par_h) {
 8002550:	9a00      	ldr	r2, [sp, #0]
 8002552:	4592      	cmp	sl, r2
 8002554:	d1c3      	bne.n	80024de <indev_proc_press+0x5ce>
 8002556:	4583      	cmp	fp, r0
 8002558:	d1c1      	bne.n	80024de <indev_proc_press+0x5ce>
                    uint16_t new_inv_buf_size = lv_disp_get_inv_buf_size(indev_act->driver.disp);
 800255a:	6833      	ldr	r3, [r6, #0]
 800255c:	68d8      	ldr	r0, [r3, #12]
 800255e:	f011 fa03 	bl	8013968 <lv_disp_get_inv_buf_size>
                    _lv_disp_pop_from_inv_buf(indev_act->driver.disp, new_inv_buf_size - inv_buf_size);
 8002562:	6833      	ldr	r3, [r6, #0]
 8002564:	eba0 0109 	sub.w	r1, r0, r9
 8002568:	68d8      	ldr	r0, [r3, #12]
 800256a:	b289      	uxth	r1, r1
 800256c:	f011 fa02 	bl	8013974 <_lv_disp_pop_from_inv_buf>
 8002570:	e7b5      	b.n	80024de <indev_proc_press+0x5ce>
            if(lv_tick_elaps(proc->pr_timestamp) > indev_act->driver.long_press_time) {
 8002572:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8002574:	f011 fac8 	bl	8013b08 <lv_tick_elaps>
 8002578:	6832      	ldr	r2, [r6, #0]
 800257a:	8b13      	ldrh	r3, [r2, #24]
 800257c:	4298      	cmp	r0, r3
 800257e:	d923      	bls.n	80025c8 <indev_proc_press+0x6b8>
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_LONG_PRESS, indev_act);
 8002580:	6828      	ldr	r0, [r5, #0]
 8002582:	210f      	movs	r1, #15
 8002584:	69c3      	ldr	r3, [r0, #28]
 8002586:	4798      	blx	r3
    if(proc->reset_query) {
 8002588:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800258c:	079a      	lsls	r2, r3, #30
        indev_obj_act = NULL;
 800258e:	bf48      	it	mi
 8002590:	602f      	strmi	r7, [r5, #0]
                if(indev_reset_check(proc)) return;
 8002592:	f3c3 0740 	ubfx	r7, r3, #1, #1
 8002596:	079b      	lsls	r3, r3, #30
 8002598:	f53f ad18 	bmi.w	8001fcc <indev_proc_press+0xbc>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED, NULL);
 800259c:	463a      	mov	r2, r7
 800259e:	2104      	movs	r1, #4
 80025a0:	6828      	ldr	r0, [r5, #0]
 80025a2:	f001 f907 	bl	80037b4 <lv_event_send>
    if(proc->reset_query) {
 80025a6:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 80025aa:	f013 0f02 	tst.w	r3, #2
 80025ae:	d002      	beq.n	80025b6 <indev_proc_press+0x6a6>
        indev_obj_act = NULL;
 80025b0:	602f      	str	r7, [r5, #0]
                if(indev_reset_check(proc)) return;
 80025b2:	f47f ad0b 	bne.w	8001fcc <indev_proc_press+0xbc>
                proc->long_pr_sent = 1;
 80025b6:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 80025ba:	f043 0301 	orr.w	r3, r3, #1
 80025be:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
                proc->longpr_rep_timestamp = lv_tick_get();
 80025c2:	f011 fa93 	bl	8013aec <lv_tick_get>
 80025c6:	6320      	str	r0, [r4, #48]	; 0x30
        if(proc->types.pointer.drag_in_prog == 0 && proc->long_pr_sent == 1) {
 80025c8:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 80025cc:	079f      	lsls	r7, r3, #30
 80025ce:	f53f acfd 	bmi.w	8001fcc <indev_proc_press+0xbc>
 80025d2:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 80025d6:	e6b7      	b.n	8002348 <indev_proc_press+0x438>
    if(proc->reset_query) {
 80025d8:	2900      	cmp	r1, #0
 80025da:	f43f aeac 	beq.w	8002336 <indev_proc_press+0x426>
        indev_obj_act = NULL;
 80025de:	602f      	str	r7, [r5, #0]
    }

    return proc->reset_query ? true : false;
 80025e0:	e6a9      	b.n	8002336 <indev_proc_press+0x426>
        if(g_act == g_prev) {
 80025e2:	2800      	cmp	r0, #0
 80025e4:	d052      	beq.n	800268c <indev_proc_press+0x77c>
                lv_group_focus_obj(obj_to_focus);
 80025e6:	4648      	mov	r0, r9
 80025e8:	f7ff f912 	bl	8001810 <lv_group_focus_obj>
    if(proc->reset_query) {
 80025ec:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80025f0:	f013 0f02 	tst.w	r3, #2
 80025f4:	d004      	beq.n	8002600 <indev_proc_press+0x6f0>
        indev_obj_act = NULL;
 80025f6:	f04f 0200 	mov.w	r2, #0
 80025fa:	602a      	str	r2, [r5, #0]
                if(indev_reset_check(proc)) return;
 80025fc:	f47f ad9b 	bne.w	8002136 <indev_proc_press+0x226>
        proc->types.pointer.last_pressed = obj_to_focus;
 8002600:	f8c7 903c 	str.w	r9, [r7, #60]	; 0x3c
 8002604:	e597      	b.n	8002136 <indev_proc_press+0x226>
            if(LV_MATH_ABS(proc->types.pointer.drag_sum.x) > LV_MATH_ABS(proc->types.pointer.drag_sum.y)) {
 8002606:	ea82 7ce2 	eor.w	ip, r2, r2, asr #31
 800260a:	ea81 70e1 	eor.w	r0, r1, r1, asr #31
 800260e:	ebac 7ce2 	sub.w	ip, ip, r2, asr #31
 8002612:	eba0 70e1 	sub.w	r0, r0, r1, asr #31
 8002616:	fa1f fc8c 	uxth.w	ip, ip
 800261a:	b280      	uxth	r0, r0
 800261c:	4584      	cmp	ip, r0
 800261e:	f63f ae06 	bhi.w	800222e <indev_proc_press+0x31e>
           (ver_en && LV_MATH_ABS(proc->types.pointer.drag_sum.y) >= indev_act->driver.drag_limit)) {
 8002622:	2900      	cmp	r1, #0
 8002624:	6832      	ldr	r2, [r6, #0]
 8002626:	bfb8      	it	lt
 8002628:	4249      	neglt	r1, r1
 800262a:	7d12      	ldrb	r2, [r2, #20]
 800262c:	b289      	uxth	r1, r1
 800262e:	428a      	cmp	r2, r1
 8002630:	f63f ae0f 	bhi.w	8002252 <indev_proc_press+0x342>
 8002634:	e603      	b.n	800223e <indev_proc_press+0x32e>
        if((hor_en && LV_MATH_ABS(proc->types.pointer.drag_sum.x) >= indev_act->driver.drag_limit) ||
 8002636:	f1bc 0f01 	cmp.w	ip, #1
 800263a:	d1f2      	bne.n	8002622 <indev_proc_press+0x712>
 800263c:	2a00      	cmp	r2, #0
 800263e:	6830      	ldr	r0, [r6, #0]
 8002640:	bfb8      	it	lt
 8002642:	4252      	neglt	r2, r2
 8002644:	7d00      	ldrb	r0, [r0, #20]
 8002646:	b292      	uxth	r2, r2
 8002648:	4290      	cmp	r0, r2
 800264a:	d8ea      	bhi.n	8002622 <indev_proc_press+0x712>
 800264c:	e5f7      	b.n	800223e <indev_proc_press+0x32e>
                if(proc->types.pointer.last_pressed) {
 800264e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002650:	b1e0      	cbz	r0, 800268c <indev_proc_press+0x77c>
                    lv_signal_send(proc->types.pointer.last_pressed, LV_SIGNAL_DEFOCUS, NULL);
 8002652:	2117      	movs	r1, #23
 8002654:	4652      	mov	r2, sl
 8002656:	f001 f8db 	bl	8003810 <lv_signal_send>
    if(proc->reset_query) {
 800265a:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800265e:	0798      	lsls	r0, r3, #30
                    if(indev_reset_check(proc)) return;
 8002660:	f3c3 0840 	ubfx	r8, r3, #1, #1
        indev_obj_act = NULL;
 8002664:	bf48      	it	mi
 8002666:	f8c5 a000 	strmi.w	sl, [r5]
                    if(indev_reset_check(proc)) return;
 800266a:	0799      	lsls	r1, r3, #30
 800266c:	f53f ad63 	bmi.w	8002136 <indev_proc_press+0x226>
                    lv_event_send(proc->types.pointer.last_pressed, LV_EVENT_DEFOCUSED, NULL);
 8002670:	4642      	mov	r2, r8
 8002672:	210e      	movs	r1, #14
 8002674:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002676:	f001 f89d 	bl	80037b4 <lv_event_send>
    if(proc->reset_query) {
 800267a:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800267e:	f013 0f02 	tst.w	r3, #2
 8002682:	d003      	beq.n	800268c <indev_proc_press+0x77c>
        indev_obj_act = NULL;
 8002684:	f8c5 8000 	str.w	r8, [r5]
                    if(indev_reset_check(proc)) return;
 8002688:	f47f ad55 	bne.w	8002136 <indev_proc_press+0x226>
                lv_signal_send(obj_to_focus, LV_SIGNAL_FOCUS, NULL);
 800268c:	2200      	movs	r2, #0
 800268e:	2116      	movs	r1, #22
 8002690:	4648      	mov	r0, r9
 8002692:	f001 f8bd 	bl	8003810 <lv_signal_send>
    if(proc->reset_query) {
 8002696:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800269a:	079a      	lsls	r2, r3, #30
 800269c:	d501      	bpl.n	80026a2 <indev_proc_press+0x792>
        indev_obj_act = NULL;
 800269e:	2200      	movs	r2, #0
 80026a0:	602a      	str	r2, [r5, #0]
                if(indev_reset_check(proc)) return;
 80026a2:	f3c3 0840 	ubfx	r8, r3, #1, #1
 80026a6:	079b      	lsls	r3, r3, #30
 80026a8:	f53f ad45 	bmi.w	8002136 <indev_proc_press+0x226>
                lv_event_send(obj_to_focus, LV_EVENT_FOCUSED, NULL);
 80026ac:	4642      	mov	r2, r8
 80026ae:	210d      	movs	r1, #13
 80026b0:	4648      	mov	r0, r9
 80026b2:	f001 f87f 	bl	80037b4 <lv_event_send>
    if(proc->reset_query) {
 80026b6:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80026ba:	f013 0f02 	tst.w	r3, #2
 80026be:	d09f      	beq.n	8002600 <indev_proc_press+0x6f0>
        indev_obj_act = NULL;
 80026c0:	f8c5 8000 	str.w	r8, [r5]
                if(indev_reset_check(proc)) return;
 80026c4:	f47f ad37 	bne.w	8002136 <indev_proc_press+0x226>
 80026c8:	e79a      	b.n	8002600 <indev_proc_press+0x6f0>
            if(g_act) {
 80026ca:	f1ba 0f00 	cmp.w	sl, #0
 80026ce:	d0be      	beq.n	800264e <indev_proc_press+0x73e>
                lv_group_focus_obj(obj_to_focus);
 80026d0:	4648      	mov	r0, r9
 80026d2:	f7ff f89d 	bl	8001810 <lv_group_focus_obj>
    if(proc->reset_query) {
 80026d6:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80026da:	f013 0f02 	tst.w	r3, #2
 80026de:	d08f      	beq.n	8002600 <indev_proc_press+0x6f0>
 80026e0:	e7ee      	b.n	80026c0 <indev_proc_press+0x7b0>
            if(g_act) {
 80026e2:	f1ba 0f00 	cmp.w	sl, #0
 80026e6:	f47f af7e 	bne.w	80025e6 <indev_proc_press+0x6d6>
                lv_signal_send(obj_to_focus, LV_SIGNAL_FOCUS, NULL);
 80026ea:	4652      	mov	r2, sl
 80026ec:	2116      	movs	r1, #22
 80026ee:	4648      	mov	r0, r9
 80026f0:	f001 f88e 	bl	8003810 <lv_signal_send>
    if(proc->reset_query) {
 80026f4:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80026f8:	079a      	lsls	r2, r3, #30
        indev_obj_act = NULL;
 80026fa:	bf48      	it	mi
 80026fc:	f8c5 a000 	strmi.w	sl, [r5]
 8002700:	e7cf      	b.n	80026a2 <indev_proc_press+0x792>
                if(drag_just_started) {
 8002702:	f1b8 0f00 	cmp.w	r8, #0
 8002706:	d00c      	beq.n	8002722 <indev_proc_press+0x812>
                    act_x += proc->types.pointer.drag_sum.x;
 8002708:	f8b4 c010 	ldrh.w	ip, [r4, #16]
                    act_y += proc->types.pointer.drag_sum.y;
 800270c:	8a63      	ldrh	r3, [r4, #18]
                    proc->types.pointer.drag_dir = LV_DRAG_DIR_BOTH;
 800270e:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
                    act_x += proc->types.pointer.drag_sum.x;
 8002712:	4461      	add	r1, ip
                    act_y += proc->types.pointer.drag_sum.y;
 8002714:	441a      	add	r2, r3
                    proc->types.pointer.drag_dir = LV_DRAG_DIR_BOTH;
 8002716:	f369 0084 	bfi	r0, r9, #2, #3
                    act_x += proc->types.pointer.drag_sum.x;
 800271a:	b209      	sxth	r1, r1
                    act_y += proc->types.pointer.drag_sum.y;
 800271c:	b212      	sxth	r2, r2
                    proc->types.pointer.drag_dir = LV_DRAG_DIR_BOTH;
 800271e:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
                act_x += proc->types.pointer.vect.x;
 8002722:	89a3      	ldrh	r3, [r4, #12]
 8002724:	4419      	add	r1, r3
 8002726:	b209      	sxth	r1, r1
            if(allowed_dirs == LV_DRAG_DIR_VER ||
 8002728:	e6bf      	b.n	80024aa <indev_proc_press+0x59a>
            if(g_prev == NULL && proc->types.pointer.last_pressed) {
 800272a:	2800      	cmp	r0, #0
 800272c:	d0d9      	beq.n	80026e2 <indev_proc_press+0x7d2>
                lv_signal_send(proc->types.pointer.last_pressed, LV_SIGNAL_DEFOCUS, NULL);
 800272e:	465a      	mov	r2, fp
 8002730:	2117      	movs	r1, #23
 8002732:	f001 f86d 	bl	8003810 <lv_signal_send>
    if(proc->reset_query) {
 8002736:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800273a:	079a      	lsls	r2, r3, #30
                if(indev_reset_check(proc)) return;
 800273c:	f3c3 0840 	ubfx	r8, r3, #1, #1
        indev_obj_act = NULL;
 8002740:	bf48      	it	mi
 8002742:	f8c5 b000 	strmi.w	fp, [r5]
                if(indev_reset_check(proc)) return;
 8002746:	079b      	lsls	r3, r3, #30
 8002748:	f53f acf5 	bmi.w	8002136 <indev_proc_press+0x226>
                lv_event_send(proc->types.pointer.last_pressed, LV_EVENT_DEFOCUSED, NULL);
 800274c:	4642      	mov	r2, r8
 800274e:	210e      	movs	r1, #14
 8002750:	e4e4      	b.n	800211c <indev_proc_press+0x20c>
                if(drag_just_started) {
 8002752:	f1b8 0f00 	cmp.w	r8, #0
 8002756:	d00c      	beq.n	8002772 <indev_proc_press+0x862>
                    act_x += proc->types.pointer.drag_sum.x;
 8002758:	8a23      	ldrh	r3, [r4, #16]
                    proc->types.pointer.drag_sum.y = 0;
 800275a:	f04f 0c00 	mov.w	ip, #0
                    proc->types.pointer.drag_dir = LV_DRAG_DIR_HOR;
 800275e:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
                    act_x += proc->types.pointer.drag_sum.x;
 8002762:	4419      	add	r1, r3
                    proc->types.pointer.drag_sum.y = 0;
 8002764:	f8a4 c012 	strh.w	ip, [r4, #18]
                    proc->types.pointer.drag_dir = LV_DRAG_DIR_HOR;
 8002768:	f369 0084 	bfi	r0, r9, #2, #3
                    act_x += proc->types.pointer.drag_sum.x;
 800276c:	b209      	sxth	r1, r1
                    proc->types.pointer.drag_dir = LV_DRAG_DIR_HOR;
 800276e:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
                act_x += proc->types.pointer.vect.x;
 8002772:	89a3      	ldrh	r3, [r4, #12]
 8002774:	4419      	add	r1, r3
 8002776:	b209      	sxth	r1, r1
            if(allowed_dirs == LV_DRAG_DIR_VER ||
 8002778:	e69a      	b.n	80024b0 <indev_proc_press+0x5a0>
                if(drag_just_started) {
 800277a:	f1b8 0f00 	cmp.w	r8, #0
 800277e:	f43f ae94 	beq.w	80024aa <indev_proc_press+0x59a>
                    proc->types.pointer.drag_dir = LV_DRAG_DIR_VER;
 8002782:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
                    proc->types.pointer.drag_sum.x = 0;
 8002786:	f04f 0c00 	mov.w	ip, #0
                    act_y += proc->types.pointer.drag_sum.y;
 800278a:	8a63      	ldrh	r3, [r4, #18]
                    proc->types.pointer.drag_dir = LV_DRAG_DIR_VER;
 800278c:	f369 0084 	bfi	r0, r9, #2, #3
                    proc->types.pointer.drag_sum.x = 0;
 8002790:	f8a4 c010 	strh.w	ip, [r4, #16]
                    act_y += proc->types.pointer.drag_sum.y;
 8002794:	441a      	add	r2, r3
                    proc->types.pointer.drag_dir = LV_DRAG_DIR_VER;
 8002796:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
                    act_y += proc->types.pointer.drag_sum.y;
 800279a:	b212      	sxth	r2, r2
 800279c:	e685      	b.n	80024aa <indev_proc_press+0x59a>
    if(proc->types.pointer.gesture_sent) return;
 800279e:	0692      	lsls	r2, r2, #26
 80027a0:	f57f ad5a 	bpl.w	8002258 <indev_proc_press+0x348>
    if(proc->reset_query) {
 80027a4:	f3c3 0240 	ubfx	r2, r3, #1, #1
 80027a8:	e5c2      	b.n	8002330 <indev_proc_press+0x420>
                    if(LV_MATH_ABS(proc->types.pointer.drag_sum.x) > LV_MATH_ABS(proc->types.pointer.drag_sum.y)) {
 80027aa:	f9b4 0010 	ldrsh.w	r0, [r4, #16]
 80027ae:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
 80027b2:	ea80 7ee0 	eor.w	lr, r0, r0, asr #31
 80027b6:	ea83 7ce3 	eor.w	ip, r3, r3, asr #31
 80027ba:	ebae 7ee0 	sub.w	lr, lr, r0, asr #31
 80027be:	ebac 7ce3 	sub.w	ip, ip, r3, asr #31
 80027c2:	fa1f fe8e 	uxth.w	lr, lr
 80027c6:	fa1f fc8c 	uxth.w	ip, ip
 80027ca:	45e6      	cmp	lr, ip
 80027cc:	d90c      	bls.n	80027e8 <indev_proc_press+0x8d8>
                        proc->types.pointer.drag_dir = LV_DRAG_DIR_HOR;
 80027ce:	f894 c02a 	ldrb.w	ip, [r4, #42]	; 0x2a
 80027d2:	f04f 0e01 	mov.w	lr, #1
                        act_x += proc->types.pointer.drag_sum.x;
 80027d6:	4401      	add	r1, r0
                        proc->types.pointer.drag_sum.y = 0;
 80027d8:	2300      	movs	r3, #0
                        proc->types.pointer.drag_dir = LV_DRAG_DIR_HOR;
 80027da:	f36e 0c84 	bfi	ip, lr, #2, #3
                        act_x += proc->types.pointer.drag_sum.x;
 80027de:	b209      	sxth	r1, r1
                        proc->types.pointer.drag_sum.y = 0;
 80027e0:	8263      	strh	r3, [r4, #18]
                        proc->types.pointer.drag_dir = LV_DRAG_DIR_HOR;
 80027e2:	f884 c02a 	strb.w	ip, [r4, #42]	; 0x2a
                        act_x += proc->types.pointer.drag_sum.x;
 80027e6:	e641      	b.n	800246c <indev_proc_press+0x55c>
                        proc->types.pointer.drag_dir = LV_DRAG_DIR_VER;
 80027e8:	f894 c02a 	ldrb.w	ip, [r4, #42]	; 0x2a
 80027ec:	2002      	movs	r0, #2
                        proc->types.pointer.drag_sum.x = 0;
 80027ee:	f04f 0e00 	mov.w	lr, #0
                        act_y += proc->types.pointer.drag_sum.y;
 80027f2:	441a      	add	r2, r3
                        proc->types.pointer.drag_dir = LV_DRAG_DIR_VER;
 80027f4:	f360 0c84 	bfi	ip, r0, #2, #3
                        act_y += proc->types.pointer.drag_sum.y;
 80027f8:	b212      	sxth	r2, r2
 80027fa:	4670      	mov	r0, lr
                        proc->types.pointer.drag_sum.x = 0;
 80027fc:	f8a4 e010 	strh.w	lr, [r4, #16]
                        proc->types.pointer.drag_dir = LV_DRAG_DIR_VER;
 8002800:	f884 c02a 	strb.w	ip, [r4, #42]	; 0x2a
                        act_y += proc->types.pointer.drag_sum.y;
 8002804:	e632      	b.n	800246c <indev_proc_press+0x55c>
 8002806:	bf00      	nop

08002808 <_lv_indev_read_task>:
{
 8002808:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    indev_act = task->user_data;
 800280c:	68c4      	ldr	r4, [r0, #12]
{
 800280e:	b088      	sub	sp, #32
    indev_act = task->user_data;
 8002810:	f8df 8310 	ldr.w	r8, [pc, #784]	; 8002b24 <_lv_indev_read_task+0x31c>
    if(indev_act->driver.disp == NULL) return; /*Not assigned to any displays*/
 8002814:	68e3      	ldr	r3, [r4, #12]
    indev_act = task->user_data;
 8002816:	f8c8 4000 	str.w	r4, [r8]
    if(indev_act->driver.disp == NULL) return; /*Not assigned to any displays*/
 800281a:	2b00      	cmp	r3, #0
 800281c:	d05b      	beq.n	80028d6 <_lv_indev_read_task+0xce>
    if(indev->proc.reset_query) {
 800281e:	f894 5050 	ldrb.w	r5, [r4, #80]	; 0x50
 8002822:	07ae      	lsls	r6, r5, #30
 8002824:	f100 813b 	bmi.w	8002a9e <_lv_indev_read_task+0x296>
    if(indev_act->proc.disabled) return;
 8002828:	f015 0504 	ands.w	r5, r5, #4
 800282c:	d153      	bne.n	80028d6 <_lv_indev_read_task+0xce>
 800282e:	4fbc      	ldr	r7, [pc, #752]	; (8002b20 <_lv_indev_read_task+0x318>)
        more_to_read = _lv_indev_read(indev_act, &data);
 8002830:	4620      	mov	r0, r4
 8002832:	a904      	add	r1, sp, #16
 8002834:	f011 f926 	bl	8013a84 <_lv_indev_read>
        indev_proc_reset_query_handler(indev_act);
 8002838:	f8d8 4000 	ldr.w	r4, [r8]
        more_to_read = _lv_indev_read(indev_act, &data);
 800283c:	4606      	mov	r6, r0
    if(indev->proc.reset_query) {
 800283e:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8002842:	0798      	lsls	r0, r3, #30
 8002844:	d513      	bpl.n	800286e <_lv_indev_read_task+0x66>
        indev->proc.types.pointer.drag_limit_out    = 0;
 8002846:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
        indev->proc.long_pr_sent                    = 0;
 800284a:	f023 0303 	bic.w	r3, r3, #3
        indev->proc.types.pointer.drag_sum.x        = 0;
 800284e:	62e5      	str	r5, [r4, #44]	; 0x2c
        indev->proc.types.pointer.drag_limit_out    = 0;
 8002850:	f022 021f 	bic.w	r2, r2, #31
        indev->proc.long_pr_sent                    = 0;
 8002854:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
        indev->proc.types.pointer.drag_throw_vect.x = 0;
 8002858:	6325      	str	r5, [r4, #48]	; 0x30
        indev->proc.types.pointer.drag_limit_out    = 0;
 800285a:	f042 030c 	orr.w	r3, r2, #12
        indev->proc.types.pointer.gesture_sum.x     = 0;
 800285e:	f8c4 5042 	str.w	r5, [r4, #66]	; 0x42
        indev->proc.types.pointer.last_obj          = NULL;
 8002862:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
        indev->proc.longpr_rep_timestamp            = 0;
 8002866:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
        indev->proc.types.pointer.drag_limit_out    = 0;
 800286a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
        indev_act->proc.state = data.state;
 800286e:	f89d 201e 	ldrb.w	r2, [sp, #30]
        indev_obj_act = NULL;
 8002872:	603d      	str	r5, [r7, #0]
        if(indev_act->proc.state == LV_INDEV_STATE_PR) {
 8002874:	2a01      	cmp	r2, #1
        indev_act->proc.state = data.state;
 8002876:	7722      	strb	r2, [r4, #28]
        if(indev_act->proc.state == LV_INDEV_STATE_PR) {
 8002878:	d030      	beq.n	80028dc <_lv_indev_read_task+0xd4>
        else if(indev_act->driver.type == LV_INDEV_TYPE_ENCODER && data.enc_diff) {
 800287a:	7823      	ldrb	r3, [r4, #0]
 800287c:	2b04      	cmp	r3, #4
 800287e:	d04e      	beq.n	800291e <_lv_indev_read_task+0x116>
        if(indev_act->driver.type == LV_INDEV_TYPE_POINTER) {
 8002880:	2b01      	cmp	r3, #1
 8002882:	d036      	beq.n	80028f2 <_lv_indev_read_task+0xea>
        else if(indev_act->driver.type == LV_INDEV_TYPE_KEYPAD) {
 8002884:	2b02      	cmp	r3, #2
 8002886:	f000 809c 	beq.w	80029c2 <_lv_indev_read_task+0x1ba>
        else if(indev_act->driver.type == LV_INDEV_TYPE_ENCODER) {
 800288a:	2b04      	cmp	r3, #4
 800288c:	f000 8127 	beq.w	8002ade <_lv_indev_read_task+0x2d6>
        else if(indev_act->driver.type == LV_INDEV_TYPE_BUTTON) {
 8002890:	2b03      	cmp	r3, #3
 8002892:	f000 80d6 	beq.w	8002a42 <_lv_indev_read_task+0x23a>
 8002896:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
    if(indev->proc.reset_query) {
 800289a:	079b      	lsls	r3, r3, #30
 800289c:	d516      	bpl.n	80028cc <_lv_indev_read_task+0xc4>
        indev->proc.types.pointer.drag_limit_out    = 0;
 800289e:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
        indev->proc.long_pr_sent                    = 0;
 80028a2:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
        indev->proc.types.pointer.drag_limit_out    = 0;
 80028a6:	f023 031f 	bic.w	r3, r3, #31
        indev->proc.types.pointer.drag_sum.x        = 0;
 80028aa:	62e5      	str	r5, [r4, #44]	; 0x2c
        indev->proc.long_pr_sent                    = 0;
 80028ac:	f022 0203 	bic.w	r2, r2, #3
        indev->proc.types.pointer.drag_throw_vect.x = 0;
 80028b0:	6325      	str	r5, [r4, #48]	; 0x30
        indev->proc.types.pointer.drag_limit_out    = 0;
 80028b2:	f043 030c 	orr.w	r3, r3, #12
        indev->proc.types.pointer.gesture_sum.x     = 0;
 80028b6:	f8c4 5042 	str.w	r5, [r4, #66]	; 0x42
        indev_obj_act                               = NULL;
 80028ba:	603d      	str	r5, [r7, #0]
        indev->proc.types.pointer.drag_limit_out    = 0;
 80028bc:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
        indev->proc.long_pr_sent                    = 0;
 80028c0:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
        indev->proc.types.pointer.last_obj          = NULL;
 80028c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
        indev->proc.longpr_rep_timestamp            = 0;
 80028c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
    } while(more_to_read);
 80028cc:	2e00      	cmp	r6, #0
 80028ce:	d1af      	bne.n	8002830 <_lv_indev_read_task+0x28>
    indev_act     = NULL;
 80028d0:	f8c8 6000 	str.w	r6, [r8]
    indev_obj_act = NULL;
 80028d4:	603e      	str	r6, [r7, #0]
}
 80028d6:	b008      	add	sp, #32
 80028d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            indev_act->driver.disp->last_activity_time = lv_tick_get();
 80028dc:	f8d4 900c 	ldr.w	r9, [r4, #12]
 80028e0:	f011 f904 	bl	8013aec <lv_tick_get>
 80028e4:	f8d8 4000 	ldr.w	r4, [r8]
 80028e8:	f8c9 0188 	str.w	r0, [r9, #392]	; 0x188
 80028ec:	7823      	ldrb	r3, [r4, #0]
        if(indev_act->driver.type == LV_INDEV_TYPE_POINTER) {
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d1c8      	bne.n	8002884 <_lv_indev_read_task+0x7c>
    if(i->cursor != NULL &&
 80028f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80028f4:	b120      	cbz	r0, 8002900 <_lv_indev_read_task+0xf8>
 80028f6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80028f8:	9b04      	ldr	r3, [sp, #16]
 80028fa:	429a      	cmp	r2, r3
 80028fc:	f040 80e8 	bne.w	8002ad0 <_lv_indev_read_task+0x2c8>
    if(i->proc.state == LV_INDEV_STATE_PR) {
 8002900:	7f23      	ldrb	r3, [r4, #28]
        indev_proc_press(&i->proc);
 8002902:	f104 001c 	add.w	r0, r4, #28
    i->proc.types.pointer.act_point.x = data->point.x;
 8002906:	9a04      	ldr	r2, [sp, #16]
    if(i->proc.state == LV_INDEV_STATE_PR) {
 8002908:	2b01      	cmp	r3, #1
    i->proc.types.pointer.act_point.x = data->point.x;
 800290a:	6222      	str	r2, [r4, #32]
    if(i->proc.state == LV_INDEV_STATE_PR) {
 800290c:	f000 80f4 	beq.w	8002af8 <_lv_indev_read_task+0x2f0>
        indev_proc_release(&i->proc);
 8002910:	f7ff f940 	bl	8001b94 <indev_proc_release>
    i->proc.types.pointer.last_point.x = i->proc.types.pointer.act_point.x;
 8002914:	6a23      	ldr	r3, [r4, #32]
 8002916:	6263      	str	r3, [r4, #36]	; 0x24
 8002918:	f8d8 4000 	ldr.w	r4, [r8]
 800291c:	e7bb      	b.n	8002896 <_lv_indev_read_task+0x8e>
        else if(indev_act->driver.type == LV_INDEV_TYPE_ENCODER && data.enc_diff) {
 800291e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d1da      	bne.n	80028dc <_lv_indev_read_task+0xd4>
    if(i->proc.wait_until_release) {
 8002926:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 800292a:	0719      	lsls	r1, r3, #28
 800292c:	f140 80e1 	bpl.w	8002af2 <_lv_indev_read_task+0x2ea>
        i->proc.long_pr_sent            = 0;
 8002930:	f023 0309 	bic.w	r3, r3, #9
        i->proc.types.keypad.last_state = LV_INDEV_STATE_REL; /*To skip the processing of release*/
 8002934:	f04f 0a00 	mov.w	sl, #0
        i->proc.pr_timestamp            = 0;
 8002938:	64a5      	str	r5, [r4, #72]	; 0x48
        i->proc.long_pr_sent            = 0;
 800293a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
        i->proc.types.keypad.last_state = LV_INDEV_STATE_REL; /*To skip the processing of release*/
 800293e:	f884 5020 	strb.w	r5, [r4, #32]
    i->proc.types.keypad.last_key   = data->key;
 8002942:	9b05      	ldr	r3, [sp, #20]
    lv_group_t * g = i->group;
 8002944:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
    i->proc.types.keypad.last_state = data->state;
 8002948:	f884 2020 	strb.w	r2, [r4, #32]
    i->proc.types.keypad.last_key   = data->key;
 800294c:	6263      	str	r3, [r4, #36]	; 0x24
    if(g == NULL) return;
 800294e:	f1b9 0f00 	cmp.w	r9, #0
 8002952:	d0a0      	beq.n	8002896 <_lv_indev_read_task+0x8e>
    indev_obj_act = lv_group_get_focused(g);
 8002954:	4648      	mov	r0, r9
 8002956:	f7ff f831 	bl	80019bc <lv_group_get_focused>
 800295a:	6038      	str	r0, [r7, #0]
    if(indev_obj_act == NULL) return;
 800295c:	2800      	cmp	r0, #0
 800295e:	d0db      	beq.n	8002918 <_lv_indev_read_task+0x110>
    if(data->state != LV_INDEV_STATE_REL) {
 8002960:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8002964:	2b00      	cmp	r3, #0
 8002966:	f040 80d4 	bne.w	8002b12 <_lv_indev_read_task+0x30a>
    indev_obj_act = lv_group_get_focused(g);
 800296a:	4648      	mov	r0, r9
 800296c:	f7ff f826 	bl	80019bc <lv_group_get_focused>
 8002970:	6038      	str	r0, [r7, #0]
    if(indev_obj_act == NULL) return;
 8002972:	2800      	cmp	r0, #0
 8002974:	d0d0      	beq.n	8002918 <_lv_indev_read_task+0x110>
    if(data->state == LV_INDEV_STATE_PR && last_state == LV_INDEV_STATE_REL) {
 8002976:	f89d 201e 	ldrb.w	r2, [sp, #30]
 800297a:	2a01      	cmp	r2, #1
 800297c:	f000 80d4 	beq.w	8002b28 <_lv_indev_read_task+0x320>
    else if(data->state == LV_INDEV_STATE_REL && last_state == LV_INDEV_STATE_PR) {
 8002980:	b91a      	cbnz	r2, 800298a <_lv_indev_read_task+0x182>
 8002982:	f1ba 0f01 	cmp.w	sl, #1
 8002986:	f000 819b 	beq.w	8002cc0 <_lv_indev_read_task+0x4b8>
 800298a:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
    indev_obj_act = NULL;
 800298e:	603d      	str	r5, [r7, #0]
    if(data->enc_diff != 0) {
 8002990:	2b00      	cmp	r3, #0
 8002992:	d0c1      	beq.n	8002918 <_lv_indev_read_task+0x110>
        if(lv_group_get_editing(g)) {
 8002994:	4648      	mov	r0, r9
 8002996:	f7ff f817 	bl	80019c8 <lv_group_get_editing>
            if(data->enc_diff < 0) {
 800299a:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
        if(lv_group_get_editing(g)) {
 800299e:	2800      	cmp	r0, #0
 80029a0:	f000 8130 	beq.w	8002c04 <_lv_indev_read_task+0x3fc>
            if(data->enc_diff < 0) {
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	f2c0 81b9 	blt.w	8002d1c <_lv_indev_read_task+0x514>
                for(s = 0; s < data->enc_diff; s++) lv_group_send_data(g, LV_KEY_RIGHT);
 80029aa:	d0b5      	beq.n	8002918 <_lv_indev_read_task+0x110>
 80029ac:	2400      	movs	r4, #0
 80029ae:	2113      	movs	r1, #19
 80029b0:	4648      	mov	r0, r9
 80029b2:	f7fe ffc3 	bl	800193c <lv_group_send_data>
 80029b6:	3401      	adds	r4, #1
 80029b8:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80029bc:	429c      	cmp	r4, r3
 80029be:	dbf6      	blt.n	80029ae <_lv_indev_read_task+0x1a6>
 80029c0:	e7aa      	b.n	8002918 <_lv_indev_read_task+0x110>
    if(data->state == LV_INDEV_STATE_PR && i->proc.wait_until_release) return;
 80029c2:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 80029cc:	f000 8097 	beq.w	8002afe <_lv_indev_read_task+0x2f6>
    if(i->proc.wait_until_release) {
 80029d0:	071a      	lsls	r2, r3, #28
 80029d2:	d506      	bpl.n	80029e2 <_lv_indev_read_task+0x1da>
        i->proc.long_pr_sent            = 0;
 80029d4:	f023 0309 	bic.w	r3, r3, #9
        i->proc.pr_timestamp            = 0;
 80029d8:	64a5      	str	r5, [r4, #72]	; 0x48
        i->proc.types.keypad.last_state = LV_INDEV_STATE_REL; /*To skip the processing of release*/
 80029da:	f884 5020 	strb.w	r5, [r4, #32]
        i->proc.long_pr_sent            = 0;
 80029de:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    lv_group_t * g = i->group;
 80029e2:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
    if(g == NULL) return;
 80029e6:	f1b9 0f00 	cmp.w	r9, #0
 80029ea:	f43f af54 	beq.w	8002896 <_lv_indev_read_task+0x8e>
    indev_obj_act = lv_group_get_focused(g);
 80029ee:	4648      	mov	r0, r9
 80029f0:	f7fe ffe4 	bl	80019bc <lv_group_get_focused>
 80029f4:	6038      	str	r0, [r7, #0]
    if(indev_obj_act == NULL) return;
 80029f6:	2800      	cmp	r0, #0
 80029f8:	d08e      	beq.n	8002918 <_lv_indev_read_task+0x110>
    i->proc.types.keypad.last_state = data->state;
 80029fa:	f89d 101e 	ldrb.w	r1, [sp, #30]
    i->proc.types.keypad.last_key = data->key;
 80029fe:	9a05      	ldr	r2, [sp, #20]
    if(data->state == LV_INDEV_STATE_PR && prev_state == LV_INDEV_STATE_REL) {
 8002a00:	2901      	cmp	r1, #1
    uint32_t prev_key = i->proc.types.keypad.last_key;
 8002a02:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
    uint32_t prev_state             = i->proc.types.keypad.last_state;
 8002a06:	f894 a020 	ldrb.w	sl, [r4, #32]
    i->proc.types.keypad.last_key = data->key;
 8002a0a:	6262      	str	r2, [r4, #36]	; 0x24
    i->proc.types.keypad.last_state = data->state;
 8002a0c:	f884 1020 	strb.w	r1, [r4, #32]
    if(data->state == LV_INDEV_STATE_PR && prev_state == LV_INDEV_STATE_REL) {
 8002a10:	f000 80c7 	beq.w	8002ba2 <_lv_indev_read_task+0x39a>
    else if(data->state == LV_INDEV_STATE_REL && prev_state == LV_INDEV_STATE_PR) {
 8002a14:	f1ba 0f01 	cmp.w	sl, #1
 8002a18:	d10d      	bne.n	8002a36 <_lv_indev_read_task+0x22e>
 8002a1a:	b961      	cbnz	r1, 8002a36 <_lv_indev_read_task+0x22e>
        if(data->key == LV_KEY_ENTER) {
 8002a1c:	f1bc 0f0a 	cmp.w	ip, #10
        data->key = prev_key;
 8002a20:	f8cd c014 	str.w	ip, [sp, #20]
        if(data->key == LV_KEY_ENTER) {
 8002a24:	f000 80fc 	beq.w	8002c20 <_lv_indev_read_task+0x418>
        i->proc.long_pr_sent = 0;
 8002a28:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
        i->proc.pr_timestamp = 0;
 8002a2c:	64a5      	str	r5, [r4, #72]	; 0x48
        i->proc.long_pr_sent = 0;
 8002a2e:	f365 0300 	bfi	r3, r5, #0, #1
 8002a32:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    indev_obj_act = NULL;
 8002a36:	f8d8 4000 	ldr.w	r4, [r8]
 8002a3a:	603d      	str	r5, [r7, #0]
 8002a3c:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8002a40:	e72b      	b.n	800289a <_lv_indev_read_task+0x92>
    if(i->btn_points == NULL) {
 8002a42:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	f43f af26 	beq.w	8002896 <_lv_indev_read_task+0x8e>
    lv_coord_t x = i->btn_points[data->btn_id].x;
 8002a4a:	9a06      	ldr	r2, [sp, #24]
    if(data->state == LV_INDEV_STATE_PR) {
 8002a4c:	f89d 101e 	ldrb.w	r1, [sp, #30]
    lv_coord_t x = i->btn_points[data->btn_id].x;
 8002a50:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 8002a54:	f933 9022 	ldrsh.w	r9, [r3, r2, lsl #2]
    if(data->state == LV_INDEV_STATE_PR) {
 8002a58:	2901      	cmp	r1, #1
    lv_coord_t y = i->btn_points[data->btn_id].y;
 8002a5a:	f9b0 a002 	ldrsh.w	sl, [r0, #2]
    if(data->state == LV_INDEV_STATE_PR) {
 8002a5e:	f000 8092 	beq.w	8002b86 <_lv_indev_read_task+0x37e>
    if(proc->reset_query) {
 8002a62:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8002a66:	f013 0f02 	tst.w	r3, #2
 8002a6a:	d002      	beq.n	8002a72 <_lv_indev_read_task+0x26a>
        indev_obj_act = NULL;
 8002a6c:	603d      	str	r5, [r7, #0]
    if(indev_reset_check(&i->proc)) return;
 8002a6e:	f47f af53 	bne.w	8002918 <_lv_indev_read_task+0x110>
    if(data->state == LV_INDEV_STATE_PR) indev_proc_press(&i->proc);
 8002a72:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8002a76:	f104 001c 	add.w	r0, r4, #28
    i->proc.types.pointer.act_point.x = x;
 8002a7a:	f8a4 9020 	strh.w	r9, [r4, #32]
    if(data->state == LV_INDEV_STATE_PR) indev_proc_press(&i->proc);
 8002a7e:	2b01      	cmp	r3, #1
    i->proc.types.pointer.act_point.y = y;
 8002a80:	f8a4 a022 	strh.w	sl, [r4, #34]	; 0x22
    if(data->state == LV_INDEV_STATE_PR) indev_proc_press(&i->proc);
 8002a84:	d048      	beq.n	8002b18 <_lv_indev_read_task+0x310>
    else indev_proc_release(&i->proc);
 8002a86:	f7ff f885 	bl	8001b94 <indev_proc_release>
    if(proc->reset_query) {
 8002a8a:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8002a8e:	f013 0f02 	tst.w	r3, #2
 8002a92:	f43f af3f 	beq.w	8002914 <_lv_indev_read_task+0x10c>
        indev_obj_act = NULL;
 8002a96:	603d      	str	r5, [r7, #0]
    if(indev_reset_check(&i->proc)) return;
 8002a98:	f47f af3e 	bne.w	8002918 <_lv_indev_read_task+0x110>
 8002a9c:	e73a      	b.n	8002914 <_lv_indev_read_task+0x10c>
        indev->proc.types.pointer.drag_limit_out    = 0;
 8002a9e:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
        indev->proc.types.pointer.drag_sum.x        = 0;
 8002aa2:	2300      	movs	r3, #0
        indev->proc.long_pr_sent                    = 0;
 8002aa4:	f025 0103 	bic.w	r1, r5, #3
        indev_obj_act                               = NULL;
 8002aa8:	4f1d      	ldr	r7, [pc, #116]	; (8002b20 <_lv_indev_read_task+0x318>)
        indev->proc.types.pointer.drag_limit_out    = 0;
 8002aaa:	f022 021f 	bic.w	r2, r2, #31
        indev->proc.types.pointer.gesture_sum.x     = 0;
 8002aae:	f8c4 3042 	str.w	r3, [r4, #66]	; 0x42
 8002ab2:	460d      	mov	r5, r1
        indev->proc.long_pr_sent                    = 0;
 8002ab4:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
        indev->proc.types.pointer.drag_limit_out    = 0;
 8002ab8:	f042 020c 	orr.w	r2, r2, #12
        indev_obj_act                               = NULL;
 8002abc:	603b      	str	r3, [r7, #0]
        indev->proc.types.pointer.drag_throw_vect.x = 0;
 8002abe:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
        indev->proc.types.pointer.drag_limit_out    = 0;
 8002ac2:	f884 2046 	strb.w	r2, [r4, #70]	; 0x46
        indev->proc.types.pointer.last_obj          = NULL;
 8002ac6:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
        indev->proc.longpr_rep_timestamp            = 0;
 8002aca:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
}
 8002ace:	e6ab      	b.n	8002828 <_lv_indev_read_task+0x20>
        lv_obj_set_pos(i->cursor, data->point.x, data->point.y);
 8002ad0:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 8002ad4:	f9bd 1010 	ldrsh.w	r1, [sp, #16]
 8002ad8:	f001 f95a 	bl	8003d90 <lv_obj_set_pos>
 8002adc:	e710      	b.n	8002900 <_lv_indev_read_task+0xf8>
 8002ade:	f89d 201e 	ldrb.w	r2, [sp, #30]
    if(data->state == LV_INDEV_STATE_PR && i->proc.wait_until_release) return;
 8002ae2:	2a01      	cmp	r2, #1
 8002ae4:	f47f af1f 	bne.w	8002926 <_lv_indev_read_task+0x11e>
 8002ae8:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8002aec:	0718      	lsls	r0, r3, #28
 8002aee:	f53f aed4 	bmi.w	800289a <_lv_indev_read_task+0x92>
 8002af2:	f894 a020 	ldrb.w	sl, [r4, #32]
 8002af6:	e724      	b.n	8002942 <_lv_indev_read_task+0x13a>
        indev_proc_press(&i->proc);
 8002af8:	f7ff fa0a 	bl	8001f10 <indev_proc_press>
 8002afc:	e70a      	b.n	8002914 <_lv_indev_read_task+0x10c>
    if(data->state == LV_INDEV_STATE_PR && i->proc.wait_until_release) return;
 8002afe:	0719      	lsls	r1, r3, #28
 8002b00:	f53f aecb 	bmi.w	800289a <_lv_indev_read_task+0x92>
    lv_group_t * g = i->group;
 8002b04:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
    if(g == NULL) return;
 8002b08:	f1b9 0f00 	cmp.w	r9, #0
 8002b0c:	f47f af6f 	bne.w	80029ee <_lv_indev_read_task+0x1e6>
 8002b10:	e6c1      	b.n	8002896 <_lv_indev_read_task+0x8e>
        data->enc_diff = 0;
 8002b12:	f8ad 501c 	strh.w	r5, [sp, #28]
 8002b16:	e728      	b.n	800296a <_lv_indev_read_task+0x162>
    if(data->state == LV_INDEV_STATE_PR) indev_proc_press(&i->proc);
 8002b18:	f7ff f9fa 	bl	8001f10 <indev_proc_press>
 8002b1c:	e7b5      	b.n	8002a8a <_lv_indev_read_task+0x282>
 8002b1e:	bf00      	nop
 8002b20:	2001788c 	.word	0x2001788c
 8002b24:	20017888 	.word	0x20017888
    if(data->state == LV_INDEV_STATE_PR && last_state == LV_INDEV_STATE_REL) {
 8002b28:	f1ba 0f00 	cmp.w	sl, #0
 8002b2c:	f000 80d5 	beq.w	8002cda <_lv_indev_read_task+0x4d2>
    else if(data->state == LV_INDEV_STATE_PR && last_state == LV_INDEV_STATE_PR) {
 8002b30:	f1ba 0f01 	cmp.w	sl, #1
 8002b34:	f47f af29 	bne.w	800298a <_lv_indev_read_task+0x182>
        if(i->proc.long_pr_sent == 0 && lv_tick_elaps(i->proc.pr_timestamp) > i->driver.long_press_time) {
 8002b38:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8002b3c:	f013 0a01 	ands.w	sl, r3, #1
 8002b40:	f000 81e5 	beq.w	8002f0e <_lv_indev_read_task+0x706>
        else if(i->proc.long_pr_sent != 0 && lv_tick_elaps(i->proc.longpr_rep_timestamp) > i->driver.long_press_rep_time) {
 8002b44:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8002b46:	f010 ffdf 	bl	8013b08 <lv_tick_elaps>
 8002b4a:	8b63      	ldrh	r3, [r4, #26]
 8002b4c:	4298      	cmp	r0, r3
 8002b4e:	f67f af1c 	bls.w	800298a <_lv_indev_read_task+0x182>
            i->proc.longpr_rep_timestamp = lv_tick_get();
 8002b52:	f010 ffcb 	bl	8013aec <lv_tick_get>
            if(data->key == LV_KEY_ENTER) {
 8002b56:	9905      	ldr	r1, [sp, #20]
            i->proc.longpr_rep_timestamp = lv_tick_get();
 8002b58:	64e0      	str	r0, [r4, #76]	; 0x4c
            if(data->key == LV_KEY_ENTER) {
 8002b5a:	290a      	cmp	r1, #10
 8002b5c:	f000 82ac 	beq.w	80030b8 <_lv_indev_read_task+0x8b0>
            else if(data->key == LV_KEY_LEFT) {
 8002b60:	2914      	cmp	r1, #20
 8002b62:	f000 8202 	beq.w	8002f6a <_lv_indev_read_task+0x762>
            else if(data->key == LV_KEY_RIGHT) {
 8002b66:	2913      	cmp	r1, #19
 8002b68:	f000 8260 	beq.w	800302c <_lv_indev_read_task+0x824>
                lv_group_send_data(g, data->key);
 8002b6c:	4648      	mov	r0, r9
 8002b6e:	f7fe fee5 	bl	800193c <lv_group_send_data>
    if(proc->reset_query) {
 8002b72:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8002b76:	f013 0f02 	tst.w	r3, #2
 8002b7a:	f43f af06 	beq.w	800298a <_lv_indev_read_task+0x182>
        indev_obj_act = NULL;
 8002b7e:	603d      	str	r5, [r7, #0]
                if(indev_reset_check(&i->proc)) return;
 8002b80:	f47f aeca 	bne.w	8002918 <_lv_indev_read_task+0x110>
 8002b84:	e701      	b.n	800298a <_lv_indev_read_task+0x182>
        if(i->proc.types.pointer.last_point.x != x ||
 8002b86:	f9b4 3024 	ldrsh.w	r3, [r4, #36]	; 0x24
 8002b8a:	454b      	cmp	r3, r9
 8002b8c:	d104      	bne.n	8002b98 <_lv_indev_read_task+0x390>
 8002b8e:	f9b4 3026 	ldrsh.w	r3, [r4, #38]	; 0x26
 8002b92:	4553      	cmp	r3, sl
 8002b94:	f43f af65 	beq.w	8002a62 <_lv_indev_read_task+0x25a>
            indev_proc_release(&i->proc);
 8002b98:	f104 001c 	add.w	r0, r4, #28
 8002b9c:	f7fe fffa 	bl	8001b94 <indev_proc_release>
 8002ba0:	e75f      	b.n	8002a62 <_lv_indev_read_task+0x25a>
    if(data->state == LV_INDEV_STATE_PR && prev_state == LV_INDEV_STATE_REL) {
 8002ba2:	f1ba 0f00 	cmp.w	sl, #0
 8002ba6:	d077      	beq.n	8002c98 <_lv_indev_read_task+0x490>
    else if(data->state == LV_INDEV_STATE_PR && prev_state == LV_INDEV_STATE_PR) {
 8002ba8:	f1ba 0f01 	cmp.w	sl, #1
 8002bac:	f47f af43 	bne.w	8002a36 <_lv_indev_read_task+0x22e>
        if(data->key == LV_KEY_ENTER) {
 8002bb0:	2a0a      	cmp	r2, #10
 8002bb2:	f000 80bf 	beq.w	8002d34 <_lv_indev_read_task+0x52c>
 8002bb6:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
        if(i->proc.long_pr_sent == 0 && lv_tick_elaps(i->proc.pr_timestamp) > i->driver.long_press_time) {
 8002bba:	f013 0a01 	ands.w	sl, r3, #1
 8002bbe:	f000 811a 	beq.w	8002df6 <_lv_indev_read_task+0x5ee>
                lv_tick_elaps(i->proc.longpr_rep_timestamp) > i->driver.long_press_rep_time) {
 8002bc2:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8002bc4:	f010 ffa0 	bl	8013b08 <lv_tick_elaps>
 8002bc8:	8b63      	ldrh	r3, [r4, #26]
        else if(i->proc.long_pr_sent != 0 &&
 8002bca:	4298      	cmp	r0, r3
 8002bcc:	f67f af33 	bls.w	8002a36 <_lv_indev_read_task+0x22e>
            i->proc.longpr_rep_timestamp = lv_tick_get();
 8002bd0:	f010 ff8c 	bl	8013aec <lv_tick_get>
            if(data->key == LV_KEY_ENTER) {
 8002bd4:	9905      	ldr	r1, [sp, #20]
            i->proc.longpr_rep_timestamp = lv_tick_get();
 8002bd6:	64e0      	str	r0, [r4, #76]	; 0x4c
            if(data->key == LV_KEY_ENTER) {
 8002bd8:	290a      	cmp	r1, #10
 8002bda:	f000 8286 	beq.w	80030ea <_lv_indev_read_task+0x8e2>
            else if(data->key == LV_KEY_NEXT) {
 8002bde:	2909      	cmp	r1, #9
 8002be0:	f000 82c1 	beq.w	8003166 <_lv_indev_read_task+0x95e>
            else if(data->key == LV_KEY_PREV) {
 8002be4:	290b      	cmp	r1, #11
 8002be6:	f000 82cc 	beq.w	8003182 <_lv_indev_read_task+0x97a>
                lv_group_send_data(g, data->key);
 8002bea:	4648      	mov	r0, r9
 8002bec:	f7fe fea6 	bl	800193c <lv_group_send_data>
    if(proc->reset_query) {
 8002bf0:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8002bf4:	f013 0f02 	tst.w	r3, #2
 8002bf8:	f43f af1d 	beq.w	8002a36 <_lv_indev_read_task+0x22e>
        indev_obj_act = NULL;
 8002bfc:	603d      	str	r5, [r7, #0]
                if(indev_reset_check(&i->proc)) return;
 8002bfe:	f47f ae8b 	bne.w	8002918 <_lv_indev_read_task+0x110>
 8002c02:	e718      	b.n	8002a36 <_lv_indev_read_task+0x22e>
            if(data->enc_diff < 0) {
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	db7e      	blt.n	8002d06 <_lv_indev_read_task+0x4fe>
                for(s = 0; s < data->enc_diff; s++) lv_group_focus_next(g);
 8002c08:	f43f ae86 	beq.w	8002918 <_lv_indev_read_task+0x110>
 8002c0c:	4604      	mov	r4, r0
 8002c0e:	4648      	mov	r0, r9
 8002c10:	3401      	adds	r4, #1
 8002c12:	f7fe fe7b 	bl	800190c <lv_group_focus_next>
 8002c16:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8002c1a:	429c      	cmp	r4, r3
 8002c1c:	dbf7      	blt.n	8002c0e <_lv_indev_read_task+0x406>
 8002c1e:	e67b      	b.n	8002918 <_lv_indev_read_task+0x110>
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_RELEASED, NULL);
 8002c20:	69c3      	ldr	r3, [r0, #28]
 8002c22:	2200      	movs	r2, #0
 8002c24:	210e      	movs	r1, #14
 8002c26:	4798      	blx	r3
    if(proc->reset_query) {
 8002c28:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8002c2c:	f013 0f02 	tst.w	r3, #2
 8002c30:	d002      	beq.n	8002c38 <_lv_indev_read_task+0x430>
        indev_obj_act = NULL;
 8002c32:	603d      	str	r5, [r7, #0]
            if(indev_reset_check(&i->proc)) return;
 8002c34:	f47f ae70 	bne.w	8002918 <_lv_indev_read_task+0x110>
            if(i->proc.long_pr_sent == 0) {
 8002c38:	f013 0901 	ands.w	r9, r3, #1
 8002c3c:	d10d      	bne.n	8002c5a <_lv_indev_read_task+0x452>
                lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, NULL);
 8002c3e:	464a      	mov	r2, r9
 8002c40:	2103      	movs	r1, #3
 8002c42:	6838      	ldr	r0, [r7, #0]
 8002c44:	f000 fdb6 	bl	80037b4 <lv_event_send>
    if(proc->reset_query) {
 8002c48:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8002c4c:	f013 0f02 	tst.w	r3, #2
 8002c50:	d003      	beq.n	8002c5a <_lv_indev_read_task+0x452>
        indev_obj_act = NULL;
 8002c52:	f8c7 9000 	str.w	r9, [r7]
                if(indev_reset_check(&i->proc)) return;
 8002c56:	f47f ae5f 	bne.w	8002918 <_lv_indev_read_task+0x110>
            lv_event_send(indev_obj_act, LV_EVENT_CLICKED, NULL);
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	2106      	movs	r1, #6
 8002c5e:	6838      	ldr	r0, [r7, #0]
 8002c60:	f000 fda8 	bl	80037b4 <lv_event_send>
    if(proc->reset_query) {
 8002c64:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8002c68:	079a      	lsls	r2, r3, #30
            if(indev_reset_check(&i->proc)) return;
 8002c6a:	f3c3 0940 	ubfx	r9, r3, #1, #1
        indev_obj_act = NULL;
 8002c6e:	bf48      	it	mi
 8002c70:	603d      	strmi	r5, [r7, #0]
            if(indev_reset_check(&i->proc)) return;
 8002c72:	079b      	lsls	r3, r3, #30
 8002c74:	f53f ae50 	bmi.w	8002918 <_lv_indev_read_task+0x110>
            lv_event_send(indev_obj_act, LV_EVENT_RELEASED, NULL);
 8002c78:	464a      	mov	r2, r9
 8002c7a:	2107      	movs	r1, #7
 8002c7c:	6838      	ldr	r0, [r7, #0]
 8002c7e:	f000 fd99 	bl	80037b4 <lv_event_send>
    if(proc->reset_query) {
 8002c82:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8002c86:	f013 0f02 	tst.w	r3, #2
 8002c8a:	f43f aecd 	beq.w	8002a28 <_lv_indev_read_task+0x220>
        indev_obj_act = NULL;
 8002c8e:	f8c7 9000 	str.w	r9, [r7]
            if(indev_reset_check(&i->proc)) return;
 8002c92:	f47f ae41 	bne.w	8002918 <_lv_indev_read_task+0x110>
 8002c96:	e6c7      	b.n	8002a28 <_lv_indev_read_task+0x220>
        i->proc.pr_timestamp = lv_tick_get();
 8002c98:	f010 ff28 	bl	8013aec <lv_tick_get>
        if(data->key == LV_KEY_ENTER) {
 8002c9c:	9905      	ldr	r1, [sp, #20]
        i->proc.pr_timestamp = lv_tick_get();
 8002c9e:	64a0      	str	r0, [r4, #72]	; 0x48
        if(data->key == LV_KEY_ENTER) {
 8002ca0:	290a      	cmp	r1, #10
 8002ca2:	f000 8111 	beq.w	8002ec8 <_lv_indev_read_task+0x6c0>
        else if(data->key == LV_KEY_ESC) {
 8002ca6:	291b      	cmp	r1, #27
 8002ca8:	f000 8150 	beq.w	8002f4c <_lv_indev_read_task+0x744>
        else if(data->key == LV_KEY_NEXT) {
 8002cac:	2909      	cmp	r1, #9
 8002cae:	f000 8163 	beq.w	8002f78 <_lv_indev_read_task+0x770>
        else if(data->key == LV_KEY_PREV) {
 8002cb2:	290b      	cmp	r1, #11
 8002cb4:	f000 8138 	beq.w	8002f28 <_lv_indev_read_task+0x720>
            lv_group_send_data(g, data->key);
 8002cb8:	4648      	mov	r0, r9
 8002cba:	f7fe fe3f 	bl	800193c <lv_group_send_data>
 8002cbe:	e6ba      	b.n	8002a36 <_lv_indev_read_task+0x22e>
        if(data->key == LV_KEY_ENTER) {
 8002cc0:	9a05      	ldr	r2, [sp, #20]
 8002cc2:	2a0a      	cmp	r2, #10
 8002cc4:	d054      	beq.n	8002d70 <_lv_indev_read_task+0x568>
        i->proc.long_pr_sent = 0;
 8002cc6:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
 8002cca:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8002cce:	f365 0200 	bfi	r2, r5, #0, #1
        i->proc.pr_timestamp = 0;
 8002cd2:	64a5      	str	r5, [r4, #72]	; 0x48
        i->proc.long_pr_sent = 0;
 8002cd4:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
 8002cd8:	e659      	b.n	800298e <_lv_indev_read_task+0x186>
        i->proc.pr_timestamp = lv_tick_get();
 8002cda:	f010 ff07 	bl	8013aec <lv_tick_get>
        if(data->key == LV_KEY_ENTER) {
 8002cde:	9905      	ldr	r1, [sp, #20]
        i->proc.pr_timestamp = lv_tick_get();
 8002ce0:	64a0      	str	r0, [r4, #72]	; 0x48
        if(data->key == LV_KEY_ENTER) {
 8002ce2:	290a      	cmp	r1, #10
 8002ce4:	f000 80c0 	beq.w	8002e68 <_lv_indev_read_task+0x660>
        else if(data->key == LV_KEY_LEFT) {
 8002ce8:	2914      	cmp	r1, #20
 8002cea:	f000 813e 	beq.w	8002f6a <_lv_indev_read_task+0x762>
        else if(data->key == LV_KEY_RIGHT) {
 8002cee:	2913      	cmp	r1, #19
 8002cf0:	f000 819c 	beq.w	800302c <_lv_indev_read_task+0x824>
        else if(data->key == LV_KEY_ESC) {
 8002cf4:	291b      	cmp	r1, #27
            lv_group_send_data(g, LV_KEY_ESC);
 8002cf6:	4648      	mov	r0, r9
        else if(data->key == LV_KEY_ESC) {
 8002cf8:	f000 81a7 	beq.w	800304a <_lv_indev_read_task+0x842>
            lv_group_send_data(g, data->key);
 8002cfc:	f7fe fe1e 	bl	800193c <lv_group_send_data>
 8002d00:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8002d04:	e643      	b.n	800298e <_lv_indev_read_task+0x186>
                for(s = 0; s < -data->enc_diff; s++) lv_group_focus_prev(g);
 8002d06:	4604      	mov	r4, r0
 8002d08:	4648      	mov	r0, r9
 8002d0a:	3401      	adds	r4, #1
 8002d0c:	f7fe fe0a 	bl	8001924 <lv_group_focus_prev>
 8002d10:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8002d14:	425b      	negs	r3, r3
 8002d16:	429c      	cmp	r4, r3
 8002d18:	dbf6      	blt.n	8002d08 <_lv_indev_read_task+0x500>
 8002d1a:	e5fd      	b.n	8002918 <_lv_indev_read_task+0x110>
                for(s = 0; s < -data->enc_diff; s++) lv_group_send_data(g, LV_KEY_LEFT);
 8002d1c:	2400      	movs	r4, #0
 8002d1e:	2114      	movs	r1, #20
 8002d20:	4648      	mov	r0, r9
 8002d22:	f7fe fe0b 	bl	800193c <lv_group_send_data>
 8002d26:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8002d2a:	3401      	adds	r4, #1
 8002d2c:	425b      	negs	r3, r3
 8002d2e:	429c      	cmp	r4, r3
 8002d30:	dbf5      	blt.n	8002d1e <_lv_indev_read_task+0x516>
 8002d32:	e5f1      	b.n	8002918 <_lv_indev_read_task+0x110>
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_PRESSING, NULL);
 8002d34:	69c3      	ldr	r3, [r0, #28]
 8002d36:	2200      	movs	r2, #0
 8002d38:	210c      	movs	r1, #12
 8002d3a:	4798      	blx	r3
    if(proc->reset_query) {
 8002d3c:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8002d40:	079a      	lsls	r2, r3, #30
            if(indev_reset_check(&i->proc)) return;
 8002d42:	f3c3 0a40 	ubfx	sl, r3, #1, #1
        indev_obj_act = NULL;
 8002d46:	bf48      	it	mi
 8002d48:	603d      	strmi	r5, [r7, #0]
            if(indev_reset_check(&i->proc)) return;
 8002d4a:	0798      	lsls	r0, r3, #30
 8002d4c:	f53f ade4 	bmi.w	8002918 <_lv_indev_read_task+0x110>
            lv_event_send(indev_obj_act, LV_EVENT_PRESSING, NULL);
 8002d50:	4652      	mov	r2, sl
 8002d52:	2101      	movs	r1, #1
 8002d54:	6838      	ldr	r0, [r7, #0]
 8002d56:	f000 fd2d 	bl	80037b4 <lv_event_send>
    if(proc->reset_query) {
 8002d5a:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8002d5e:	f013 0f02 	tst.w	r3, #2
 8002d62:	f43f af2a 	beq.w	8002bba <_lv_indev_read_task+0x3b2>
        indev_obj_act = NULL;
 8002d66:	f8c7 a000 	str.w	sl, [r7]
            if(indev_reset_check(&i->proc)) return;
 8002d6a:	f47f add5 	bne.w	8002918 <_lv_indev_read_task+0x110>
 8002d6e:	e724      	b.n	8002bba <_lv_indev_read_task+0x3b2>
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_GET_EDITABLE, &editable);
 8002d70:	f10d 020f 	add.w	r2, sp, #15
 8002d74:	69c3      	ldr	r3, [r0, #28]
 8002d76:	2119      	movs	r1, #25
            bool editable = false;
 8002d78:	f88d 500f 	strb.w	r5, [sp, #15]
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_GET_EDITABLE, &editable);
 8002d7c:	4798      	blx	r3
            if(editable == false) {
 8002d7e:	f89d a00f 	ldrb.w	sl, [sp, #15]
 8002d82:	f1ba 0f00 	cmp.w	sl, #0
 8002d86:	f040 8105 	bne.w	8002f94 <_lv_indev_read_task+0x78c>
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_RELEASED, NULL);
 8002d8a:	6838      	ldr	r0, [r7, #0]
 8002d8c:	4652      	mov	r2, sl
 8002d8e:	210e      	movs	r1, #14
 8002d90:	69c3      	ldr	r3, [r0, #28]
 8002d92:	4798      	blx	r3
    if(proc->reset_query) {
 8002d94:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8002d98:	f013 0102 	ands.w	r1, r3, #2
                if(indev_reset_check(&i->proc)) return;
 8002d9c:	f3c3 0240 	ubfx	r2, r3, #1, #1
        indev_obj_act = NULL;
 8002da0:	bf18      	it	ne
 8002da2:	f8c7 a000 	strne.w	sl, [r7]
                if(indev_reset_check(&i->proc)) return;
 8002da6:	0798      	lsls	r0, r3, #30
 8002da8:	f53f adb6 	bmi.w	8002918 <_lv_indev_read_task+0x110>
                if(i->proc.long_pr_sent == 0) lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, NULL);
 8002dac:	f013 0a01 	ands.w	sl, r3, #1
 8002db0:	f000 8170 	beq.w	8003094 <_lv_indev_read_task+0x88c>
    if(proc->reset_query) {
 8002db4:	b101      	cbz	r1, 8002db8 <_lv_indev_read_task+0x5b0>
        indev_obj_act = NULL;
 8002db6:	603a      	str	r2, [r7, #0]
                lv_event_send(indev_obj_act, LV_EVENT_CLICKED, NULL);
 8002db8:	2200      	movs	r2, #0
 8002dba:	2106      	movs	r1, #6
 8002dbc:	6838      	ldr	r0, [r7, #0]
 8002dbe:	f000 fcf9 	bl	80037b4 <lv_event_send>
    if(proc->reset_query) {
 8002dc2:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8002dc6:	0799      	lsls	r1, r3, #30
                if(indev_reset_check(&i->proc)) return;
 8002dc8:	f3c3 0a40 	ubfx	sl, r3, #1, #1
        indev_obj_act = NULL;
 8002dcc:	bf48      	it	mi
 8002dce:	603d      	strmi	r5, [r7, #0]
                if(indev_reset_check(&i->proc)) return;
 8002dd0:	079a      	lsls	r2, r3, #30
 8002dd2:	f53f ada1 	bmi.w	8002918 <_lv_indev_read_task+0x110>
                lv_event_send(indev_obj_act, LV_EVENT_RELEASED, NULL);
 8002dd6:	4652      	mov	r2, sl
 8002dd8:	2107      	movs	r1, #7
 8002dda:	6838      	ldr	r0, [r7, #0]
 8002ddc:	f000 fcea 	bl	80037b4 <lv_event_send>
    if(proc->reset_query) {
 8002de0:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8002de4:	f013 0f02 	tst.w	r3, #2
 8002de8:	f43f af6d 	beq.w	8002cc6 <_lv_indev_read_task+0x4be>
        indev_obj_act = NULL;
 8002dec:	f8c7 a000 	str.w	sl, [r7]
                if(indev_reset_check(&i->proc)) return;
 8002df0:	f47f ad92 	bne.w	8002918 <_lv_indev_read_task+0x110>
 8002df4:	e767      	b.n	8002cc6 <_lv_indev_read_task+0x4be>
        if(i->proc.long_pr_sent == 0 && lv_tick_elaps(i->proc.pr_timestamp) > i->driver.long_press_time) {
 8002df6:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8002df8:	f010 fe86 	bl	8013b08 <lv_tick_elaps>
 8002dfc:	8b23      	ldrh	r3, [r4, #24]
 8002dfe:	4298      	cmp	r0, r3
            i->proc.long_pr_sent = 1;
 8002e00:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
        if(i->proc.long_pr_sent == 0 && lv_tick_elaps(i->proc.pr_timestamp) > i->driver.long_press_time) {
 8002e04:	d92c      	bls.n	8002e60 <_lv_indev_read_task+0x658>
            if(data->key == LV_KEY_ENTER) {
 8002e06:	9a05      	ldr	r2, [sp, #20]
            i->proc.long_pr_sent = 1;
 8002e08:	f043 0301 	orr.w	r3, r3, #1
            if(data->key == LV_KEY_ENTER) {
 8002e0c:	2a0a      	cmp	r2, #10
            i->proc.long_pr_sent = 1;
 8002e0e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
            if(data->key == LV_KEY_ENTER) {
 8002e12:	f47f ae10 	bne.w	8002a36 <_lv_indev_read_task+0x22e>
                i->proc.longpr_rep_timestamp = lv_tick_get();
 8002e16:	f010 fe69 	bl	8013aec <lv_tick_get>
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_LONG_PRESS, NULL);
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	4652      	mov	r2, sl
 8002e1e:	210f      	movs	r1, #15
 8002e20:	f8d3 901c 	ldr.w	r9, [r3, #28]
                i->proc.longpr_rep_timestamp = lv_tick_get();
 8002e24:	64e0      	str	r0, [r4, #76]	; 0x4c
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_LONG_PRESS, NULL);
 8002e26:	4618      	mov	r0, r3
 8002e28:	47c8      	blx	r9
    if(proc->reset_query) {
 8002e2a:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8002e2e:	0799      	lsls	r1, r3, #30
                if(indev_reset_check(&i->proc)) return;
 8002e30:	f3c3 0940 	ubfx	r9, r3, #1, #1
        indev_obj_act = NULL;
 8002e34:	bf48      	it	mi
 8002e36:	f8c7 a000 	strmi.w	sl, [r7]
                if(indev_reset_check(&i->proc)) return;
 8002e3a:	079a      	lsls	r2, r3, #30
 8002e3c:	f53f ad6c 	bmi.w	8002918 <_lv_indev_read_task+0x110>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED, NULL);
 8002e40:	464a      	mov	r2, r9
 8002e42:	2104      	movs	r1, #4
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED_REPEAT, NULL);
 8002e44:	6838      	ldr	r0, [r7, #0]
 8002e46:	f000 fcb5 	bl	80037b4 <lv_event_send>
    if(proc->reset_query) {
 8002e4a:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8002e4e:	f013 0f02 	tst.w	r3, #2
 8002e52:	f43f adf0 	beq.w	8002a36 <_lv_indev_read_task+0x22e>
        indev_obj_act = NULL;
 8002e56:	f8c7 9000 	str.w	r9, [r7]
                if(indev_reset_check(&i->proc)) return;
 8002e5a:	f47f ad5d 	bne.w	8002918 <_lv_indev_read_task+0x110>
 8002e5e:	e5ea      	b.n	8002a36 <_lv_indev_read_task+0x22e>
        else if(i->proc.long_pr_sent != 0 &&
 8002e60:	07db      	lsls	r3, r3, #31
 8002e62:	f57f ade8 	bpl.w	8002a36 <_lv_indev_read_task+0x22e>
 8002e66:	e6ac      	b.n	8002bc2 <_lv_indev_read_task+0x3ba>
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_GET_EDITABLE, &editable);
 8002e68:	6838      	ldr	r0, [r7, #0]
 8002e6a:	f10d 020f 	add.w	r2, sp, #15
 8002e6e:	2119      	movs	r1, #25
            bool editable = false;
 8002e70:	f88d a00f 	strb.w	sl, [sp, #15]
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_GET_EDITABLE, &editable);
 8002e74:	69c3      	ldr	r3, [r0, #28]
 8002e76:	4798      	blx	r3
            if(lv_group_get_editing(g) == true || editable == false) {
 8002e78:	4648      	mov	r0, r9
 8002e7a:	f7fe fda5 	bl	80019c8 <lv_group_get_editing>
 8002e7e:	b920      	cbnz	r0, 8002e8a <_lv_indev_read_task+0x682>
 8002e80:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	f47f ad80 	bne.w	800298a <_lv_indev_read_task+0x182>
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_PRESSED, NULL);
 8002e8a:	6838      	ldr	r0, [r7, #0]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	210b      	movs	r1, #11
 8002e90:	69c3      	ldr	r3, [r0, #28]
 8002e92:	4798      	blx	r3
    if(proc->reset_query) {
 8002e94:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8002e98:	0798      	lsls	r0, r3, #30
                if(indev_reset_check(&i->proc)) return;
 8002e9a:	f3c3 0240 	ubfx	r2, r3, #1, #1
        indev_obj_act = NULL;
 8002e9e:	bf48      	it	mi
 8002ea0:	603d      	strmi	r5, [r7, #0]
                if(indev_reset_check(&i->proc)) return;
 8002ea2:	0799      	lsls	r1, r3, #30
 8002ea4:	f53f ad38 	bmi.w	8002918 <_lv_indev_read_task+0x110>
                lv_event_send(indev_obj_act, LV_EVENT_PRESSED, NULL);
 8002ea8:	4611      	mov	r1, r2
 8002eaa:	6838      	ldr	r0, [r7, #0]
 8002eac:	9201      	str	r2, [sp, #4]
 8002eae:	f000 fc81 	bl	80037b4 <lv_event_send>
    if(proc->reset_query) {
 8002eb2:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8002eb6:	f013 0f02 	tst.w	r3, #2
 8002eba:	f43f ad66 	beq.w	800298a <_lv_indev_read_task+0x182>
        indev_obj_act = NULL;
 8002ebe:	9a01      	ldr	r2, [sp, #4]
 8002ec0:	603a      	str	r2, [r7, #0]
                if(indev_reset_check(&i->proc)) return;
 8002ec2:	f47f ad29 	bne.w	8002918 <_lv_indev_read_task+0x110>
 8002ec6:	e560      	b.n	800298a <_lv_indev_read_task+0x182>
            lv_group_send_data(g, LV_KEY_ENTER);
 8002ec8:	4648      	mov	r0, r9
 8002eca:	f7fe fd37 	bl	800193c <lv_group_send_data>
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_PRESSED, NULL);
 8002ece:	6838      	ldr	r0, [r7, #0]
 8002ed0:	4652      	mov	r2, sl
 8002ed2:	210b      	movs	r1, #11
 8002ed4:	69c3      	ldr	r3, [r0, #28]
 8002ed6:	4798      	blx	r3
    if(proc->reset_query) {
 8002ed8:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8002edc:	0798      	lsls	r0, r3, #30
            if(indev_reset_check(&i->proc)) return;
 8002ede:	f3c3 0240 	ubfx	r2, r3, #1, #1
        indev_obj_act = NULL;
 8002ee2:	bf48      	it	mi
 8002ee4:	f8c7 a000 	strmi.w	sl, [r7]
            if(indev_reset_check(&i->proc)) return;
 8002ee8:	0799      	lsls	r1, r3, #30
 8002eea:	f53f ad15 	bmi.w	8002918 <_lv_indev_read_task+0x110>
            lv_event_send(indev_obj_act, LV_EVENT_PRESSED, NULL);
 8002eee:	4611      	mov	r1, r2
 8002ef0:	6838      	ldr	r0, [r7, #0]
 8002ef2:	9201      	str	r2, [sp, #4]
 8002ef4:	f000 fc5e 	bl	80037b4 <lv_event_send>
    if(proc->reset_query) {
 8002ef8:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8002efc:	f013 0f02 	tst.w	r3, #2
 8002f00:	f43f ad99 	beq.w	8002a36 <_lv_indev_read_task+0x22e>
        indev_obj_act = NULL;
 8002f04:	9a01      	ldr	r2, [sp, #4]
 8002f06:	603a      	str	r2, [r7, #0]
            if(indev_reset_check(&i->proc)) return;
 8002f08:	f47f ad06 	bne.w	8002918 <_lv_indev_read_task+0x110>
 8002f0c:	e593      	b.n	8002a36 <_lv_indev_read_task+0x22e>
        if(i->proc.long_pr_sent == 0 && lv_tick_elaps(i->proc.pr_timestamp) > i->driver.long_press_time) {
 8002f0e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8002f10:	f010 fdfa 	bl	8013b08 <lv_tick_elaps>
 8002f14:	8b23      	ldrh	r3, [r4, #24]
 8002f16:	4298      	cmp	r0, r3
            i->proc.long_pr_sent = 1;
 8002f18:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
        if(i->proc.long_pr_sent == 0 && lv_tick_elaps(i->proc.pr_timestamp) > i->driver.long_press_time) {
 8002f1c:	f200 80a7 	bhi.w	800306e <_lv_indev_read_task+0x866>
        else if(i->proc.long_pr_sent != 0 && lv_tick_elaps(i->proc.longpr_rep_timestamp) > i->driver.long_press_rep_time) {
 8002f20:	07d9      	lsls	r1, r3, #31
 8002f22:	f53f ae0f 	bmi.w	8002b44 <_lv_indev_read_task+0x33c>
 8002f26:	e530      	b.n	800298a <_lv_indev_read_task+0x182>
            lv_group_set_editing(g, false); /*Editing is not used by KEYPAD is be sure it is disabled*/
 8002f28:	4651      	mov	r1, sl
 8002f2a:	4648      	mov	r0, r9
 8002f2c:	f7fe fd22 	bl	8001974 <lv_group_set_editing>
            lv_group_focus_prev(g);
 8002f30:	4648      	mov	r0, r9
 8002f32:	f7fe fcf7 	bl	8001924 <lv_group_focus_prev>
    if(proc->reset_query) {
 8002f36:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8002f3a:	f013 0f02 	tst.w	r3, #2
 8002f3e:	f43f ad7a 	beq.w	8002a36 <_lv_indev_read_task+0x22e>
        indev_obj_act = NULL;
 8002f42:	f8c7 a000 	str.w	sl, [r7]
            if(indev_reset_check(&i->proc)) return;
 8002f46:	f47f ace7 	bne.w	8002918 <_lv_indev_read_task+0x110>
 8002f4a:	e574      	b.n	8002a36 <_lv_indev_read_task+0x22e>
            lv_group_send_data(g, LV_KEY_ESC);
 8002f4c:	4648      	mov	r0, r9
 8002f4e:	f7fe fcf5 	bl	800193c <lv_group_send_data>
            lv_event_send(indev_obj_act, LV_EVENT_CANCEL, NULL);
 8002f52:	4652      	mov	r2, sl
 8002f54:	2114      	movs	r1, #20
 8002f56:	6838      	ldr	r0, [r7, #0]
 8002f58:	f000 fc2c 	bl	80037b4 <lv_event_send>
    if(proc->reset_query) {
 8002f5c:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8002f60:	f013 0f02 	tst.w	r3, #2
 8002f64:	f43f ad67 	beq.w	8002a36 <_lv_indev_read_task+0x22e>
 8002f68:	e7eb      	b.n	8002f42 <_lv_indev_read_task+0x73a>
                data->enc_diff--;
 8002f6a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8002f6e:	3b01      	subs	r3, #1
 8002f70:	b21b      	sxth	r3, r3
 8002f72:	f8ad 301c 	strh.w	r3, [sp, #28]
 8002f76:	e50a      	b.n	800298e <_lv_indev_read_task+0x186>
            lv_group_set_editing(g, false); /*Editing is not used by KEYPAD is be sure it is disabled*/
 8002f78:	4651      	mov	r1, sl
 8002f7a:	4648      	mov	r0, r9
 8002f7c:	f7fe fcfa 	bl	8001974 <lv_group_set_editing>
            lv_group_focus_next(g);
 8002f80:	4648      	mov	r0, r9
 8002f82:	f7fe fcc3 	bl	800190c <lv_group_focus_next>
    if(proc->reset_query) {
 8002f86:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8002f8a:	f013 0f02 	tst.w	r3, #2
 8002f8e:	f43f ad52 	beq.w	8002a36 <_lv_indev_read_task+0x22e>
 8002f92:	e7d6      	b.n	8002f42 <_lv_indev_read_task+0x73a>
            else if(g->editing) {
 8002f94:	f899 3014 	ldrb.w	r3, [r9, #20]
 8002f98:	f013 0f02 	tst.w	r3, #2
                if(!i->proc.long_pr_sent || _lv_ll_get_len(&g->obj_ll) <= 1) {
 8002f9c:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
            else if(g->editing) {
 8002fa0:	d04b      	beq.n	800303a <_lv_indev_read_task+0x832>
                if(!i->proc.long_pr_sent || _lv_ll_get_len(&g->obj_ll) <= 1) {
 8002fa2:	07db      	lsls	r3, r3, #31
 8002fa4:	f100 809a 	bmi.w	80030dc <_lv_indev_read_task+0x8d4>
                    indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_RELEASED, NULL);
 8002fa8:	6838      	ldr	r0, [r7, #0]
 8002faa:	2200      	movs	r2, #0
 8002fac:	210e      	movs	r1, #14
 8002fae:	69c3      	ldr	r3, [r0, #28]
 8002fb0:	4798      	blx	r3
    if(proc->reset_query) {
 8002fb2:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8002fb6:	0798      	lsls	r0, r3, #30
 8002fb8:	d500      	bpl.n	8002fbc <_lv_indev_read_task+0x7b4>
        indev_obj_act = NULL;
 8002fba:	603d      	str	r5, [r7, #0]
                    if(indev_reset_check(&i->proc)) return;
 8002fbc:	0799      	lsls	r1, r3, #30
 8002fbe:	f3c3 0a40 	ubfx	sl, r3, #1, #1
 8002fc2:	f53f aca9 	bmi.w	8002918 <_lv_indev_read_task+0x110>
                    lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, NULL);
 8002fc6:	4652      	mov	r2, sl
 8002fc8:	2103      	movs	r1, #3
 8002fca:	6838      	ldr	r0, [r7, #0]
 8002fcc:	f000 fbf2 	bl	80037b4 <lv_event_send>
    if(proc->reset_query) {
 8002fd0:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8002fd4:	079a      	lsls	r2, r3, #30
        indev_obj_act = NULL;
 8002fd6:	bf48      	it	mi
 8002fd8:	f8c7 a000 	strmi.w	sl, [r7]
                    if(indev_reset_check(&i->proc)) return;
 8002fdc:	f3c3 0a40 	ubfx	sl, r3, #1, #1
 8002fe0:	079b      	lsls	r3, r3, #30
 8002fe2:	f53f ac99 	bmi.w	8002918 <_lv_indev_read_task+0x110>
                    lv_event_send(indev_obj_act, LV_EVENT_CLICKED, NULL);
 8002fe6:	4652      	mov	r2, sl
 8002fe8:	2106      	movs	r1, #6
 8002fea:	6838      	ldr	r0, [r7, #0]
 8002fec:	f000 fbe2 	bl	80037b4 <lv_event_send>
    if(proc->reset_query) {
 8002ff0:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8002ff4:	0798      	lsls	r0, r3, #30
        indev_obj_act = NULL;
 8002ff6:	bf48      	it	mi
 8002ff8:	f8c7 a000 	strmi.w	sl, [r7]
                    if(indev_reset_check(&i->proc)) return;
 8002ffc:	0799      	lsls	r1, r3, #30
 8002ffe:	f3c3 0a40 	ubfx	sl, r3, #1, #1
 8003002:	f53f ac89 	bmi.w	8002918 <_lv_indev_read_task+0x110>
                    lv_event_send(indev_obj_act, LV_EVENT_RELEASED, NULL);
 8003006:	4652      	mov	r2, sl
 8003008:	2107      	movs	r1, #7
 800300a:	6838      	ldr	r0, [r7, #0]
 800300c:	f000 fbd2 	bl	80037b4 <lv_event_send>
    if(proc->reset_query) {
 8003010:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8003014:	f013 0f02 	tst.w	r3, #2
 8003018:	d003      	beq.n	8003022 <_lv_indev_read_task+0x81a>
        indev_obj_act = NULL;
 800301a:	f8c7 a000 	str.w	sl, [r7]
                    if(indev_reset_check(&i->proc)) return;
 800301e:	f47f ac7b 	bne.w	8002918 <_lv_indev_read_task+0x110>
                    lv_group_send_data(g, LV_KEY_ENTER);
 8003022:	210a      	movs	r1, #10
 8003024:	4648      	mov	r0, r9
 8003026:	f7fe fc89 	bl	800193c <lv_group_send_data>
 800302a:	e64c      	b.n	8002cc6 <_lv_indev_read_task+0x4be>
                data->enc_diff++;
 800302c:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8003030:	3301      	adds	r3, #1
 8003032:	b21b      	sxth	r3, r3
 8003034:	f8ad 301c 	strh.w	r3, [sp, #28]
 8003038:	e4a9      	b.n	800298e <_lv_indev_read_task+0x186>
            else if(editable && !g->editing && !i->proc.long_pr_sent) {
 800303a:	07da      	lsls	r2, r3, #31
 800303c:	f53f ae43 	bmi.w	8002cc6 <_lv_indev_read_task+0x4be>
                lv_group_set_editing(g, true); /*Set edit mode*/
 8003040:	2101      	movs	r1, #1
 8003042:	4648      	mov	r0, r9
 8003044:	f7fe fc96 	bl	8001974 <lv_group_set_editing>
 8003048:	e63d      	b.n	8002cc6 <_lv_indev_read_task+0x4be>
            lv_group_send_data(g, LV_KEY_ESC);
 800304a:	f7fe fc77 	bl	800193c <lv_group_send_data>
            lv_event_send(indev_obj_act, LV_EVENT_CANCEL, NULL);
 800304e:	4652      	mov	r2, sl
 8003050:	2114      	movs	r1, #20
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED_REPEAT, NULL);
 8003052:	6838      	ldr	r0, [r7, #0]
 8003054:	f000 fbae 	bl	80037b4 <lv_event_send>
    if(proc->reset_query) {
 8003058:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 800305c:	f013 0f02 	tst.w	r3, #2
 8003060:	f43f ac93 	beq.w	800298a <_lv_indev_read_task+0x182>
        indev_obj_act = NULL;
 8003064:	f8c7 a000 	str.w	sl, [r7]
                if(indev_reset_check(&i->proc)) return;
 8003068:	f47f ac56 	bne.w	8002918 <_lv_indev_read_task+0x110>
 800306c:	e48d      	b.n	800298a <_lv_indev_read_task+0x182>
            i->proc.long_pr_sent = 1;
 800306e:	f043 0301 	orr.w	r3, r3, #1
 8003072:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
            i->proc.longpr_rep_timestamp = lv_tick_get();
 8003076:	f010 fd39 	bl	8013aec <lv_tick_get>
            if(data->key == LV_KEY_ENTER) {
 800307a:	9b05      	ldr	r3, [sp, #20]
            i->proc.longpr_rep_timestamp = lv_tick_get();
 800307c:	64e0      	str	r0, [r4, #76]	; 0x4c
            if(data->key == LV_KEY_ENTER) {
 800307e:	2b0a      	cmp	r3, #10
 8003080:	d045      	beq.n	800310e <_lv_indev_read_task+0x906>
            i->proc.long_pr_sent = 1;
 8003082:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
 8003086:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 800308a:	f042 0201 	orr.w	r2, r2, #1
 800308e:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
 8003092:	e47c      	b.n	800298e <_lv_indev_read_task+0x186>
                if(i->proc.long_pr_sent == 0) lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, NULL);
 8003094:	4652      	mov	r2, sl
 8003096:	2103      	movs	r1, #3
 8003098:	6838      	ldr	r0, [r7, #0]
 800309a:	f000 fb8b 	bl	80037b4 <lv_event_send>
    if(proc->reset_query) {
 800309e:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 80030a2:	f013 0f02 	tst.w	r3, #2
 80030a6:	f3c3 0340 	ubfx	r3, r3, #1, #1
        indev_obj_act = NULL;
 80030aa:	bf18      	it	ne
 80030ac:	f8c7 a000 	strne.w	sl, [r7]
                if(indev_reset_check(&i->proc)) return;
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	f47f ac31 	bne.w	8002918 <_lv_indev_read_task+0x110>
 80030b6:	e67f      	b.n	8002db8 <_lv_indev_read_task+0x5b0>
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_LONG_PRESS_REP, NULL);
 80030b8:	6838      	ldr	r0, [r7, #0]
 80030ba:	2200      	movs	r2, #0
 80030bc:	2110      	movs	r1, #16
 80030be:	69c3      	ldr	r3, [r0, #28]
 80030c0:	4798      	blx	r3
    if(proc->reset_query) {
 80030c2:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 80030c6:	079a      	lsls	r2, r3, #30
                if(indev_reset_check(&i->proc)) return;
 80030c8:	f3c3 0a40 	ubfx	sl, r3, #1, #1
        indev_obj_act = NULL;
 80030cc:	bf48      	it	mi
 80030ce:	603d      	strmi	r5, [r7, #0]
                if(indev_reset_check(&i->proc)) return;
 80030d0:	079b      	lsls	r3, r3, #30
 80030d2:	f53f ac21 	bmi.w	8002918 <_lv_indev_read_task+0x110>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED_REPEAT, NULL);
 80030d6:	4652      	mov	r2, sl
 80030d8:	2105      	movs	r1, #5
 80030da:	e7ba      	b.n	8003052 <_lv_indev_read_task+0x84a>
                if(!i->proc.long_pr_sent || _lv_ll_get_len(&g->obj_ll) <= 1) {
 80030dc:	4648      	mov	r0, r9
 80030de:	f011 fd57 	bl	8014b90 <_lv_ll_get_len>
 80030e2:	2801      	cmp	r0, #1
 80030e4:	f63f adef 	bhi.w	8002cc6 <_lv_indev_read_task+0x4be>
 80030e8:	e75e      	b.n	8002fa8 <_lv_indev_read_task+0x7a0>
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_LONG_PRESS_REP, NULL);
 80030ea:	6838      	ldr	r0, [r7, #0]
 80030ec:	2110      	movs	r1, #16
 80030ee:	2200      	movs	r2, #0
 80030f0:	69c3      	ldr	r3, [r0, #28]
 80030f2:	4798      	blx	r3
    if(proc->reset_query) {
 80030f4:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 80030f8:	0798      	lsls	r0, r3, #30
                if(indev_reset_check(&i->proc)) return;
 80030fa:	f3c3 0940 	ubfx	r9, r3, #1, #1
        indev_obj_act = NULL;
 80030fe:	bf48      	it	mi
 8003100:	603d      	strmi	r5, [r7, #0]
                if(indev_reset_check(&i->proc)) return;
 8003102:	0799      	lsls	r1, r3, #30
 8003104:	f53f ac08 	bmi.w	8002918 <_lv_indev_read_task+0x110>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED_REPEAT, NULL);
 8003108:	464a      	mov	r2, r9
 800310a:	2105      	movs	r1, #5
 800310c:	e69a      	b.n	8002e44 <_lv_indev_read_task+0x63c>
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_GET_EDITABLE, &editable);
 800310e:	6838      	ldr	r0, [r7, #0]
 8003110:	f10d 020f 	add.w	r2, sp, #15
                bool editable = false;
 8003114:	f88d a00f 	strb.w	sl, [sp, #15]
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_GET_EDITABLE, &editable);
 8003118:	2119      	movs	r1, #25
 800311a:	69c3      	ldr	r3, [r0, #28]
 800311c:	4798      	blx	r3
                if(editable) {
 800311e:	f89d a00f 	ldrb.w	sl, [sp, #15]
 8003122:	f1ba 0f00 	cmp.w	sl, #0
 8003126:	d13a      	bne.n	800319e <_lv_indev_read_task+0x996>
                    indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_LONG_PRESS, NULL);
 8003128:	6838      	ldr	r0, [r7, #0]
 800312a:	4652      	mov	r2, sl
 800312c:	210f      	movs	r1, #15
 800312e:	69c3      	ldr	r3, [r0, #28]
 8003130:	4798      	blx	r3
    if(proc->reset_query) {
 8003132:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8003136:	079a      	lsls	r2, r3, #30
        indev_obj_act = NULL;
 8003138:	bf48      	it	mi
 800313a:	f8c7 a000 	strmi.w	sl, [r7]
                    if(indev_reset_check(&i->proc)) return;
 800313e:	0798      	lsls	r0, r3, #30
 8003140:	f3c3 0a40 	ubfx	sl, r3, #1, #1
 8003144:	f53f abe8 	bmi.w	8002918 <_lv_indev_read_task+0x110>
                    lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED, NULL);
 8003148:	4652      	mov	r2, sl
 800314a:	2104      	movs	r1, #4
 800314c:	6838      	ldr	r0, [r7, #0]
 800314e:	f000 fb31 	bl	80037b4 <lv_event_send>
    if(proc->reset_query) {
 8003152:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8003156:	f013 0f02 	tst.w	r3, #2
 800315a:	d092      	beq.n	8003082 <_lv_indev_read_task+0x87a>
        indev_obj_act = NULL;
 800315c:	f8c7 a000 	str.w	sl, [r7]
                    if(indev_reset_check(&i->proc)) return;
 8003160:	f47f abda 	bne.w	8002918 <_lv_indev_read_task+0x110>
 8003164:	e78d      	b.n	8003082 <_lv_indev_read_task+0x87a>
                lv_group_set_editing(g, false); /*Editing is not used by KEYPAD is be sure it is disabled*/
 8003166:	2100      	movs	r1, #0
 8003168:	4648      	mov	r0, r9
 800316a:	f7fe fc03 	bl	8001974 <lv_group_set_editing>
                lv_group_focus_next(g);
 800316e:	4648      	mov	r0, r9
 8003170:	f7fe fbcc 	bl	800190c <lv_group_focus_next>
    if(proc->reset_query) {
 8003174:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8003178:	f013 0f02 	tst.w	r3, #2
 800317c:	f43f ac5b 	beq.w	8002a36 <_lv_indev_read_task+0x22e>
 8003180:	e53c      	b.n	8002bfc <_lv_indev_read_task+0x3f4>
                lv_group_set_editing(g, false); /*Editing is not used by KEYPAD is be sure it is disabled*/
 8003182:	2100      	movs	r1, #0
 8003184:	4648      	mov	r0, r9
 8003186:	f7fe fbf5 	bl	8001974 <lv_group_set_editing>
                lv_group_focus_prev(g);
 800318a:	4648      	mov	r0, r9
 800318c:	f7fe fbca 	bl	8001924 <lv_group_focus_prev>
    if(proc->reset_query) {
 8003190:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8003194:	f013 0f02 	tst.w	r3, #2
 8003198:	f43f ac4d 	beq.w	8002a36 <_lv_indev_read_task+0x22e>
 800319c:	e52e      	b.n	8002bfc <_lv_indev_read_task+0x3f4>
                    if(_lv_ll_get_len(&g->obj_ll) > 1) {
 800319e:	4648      	mov	r0, r9
 80031a0:	f011 fcf6 	bl	8014b90 <_lv_ll_get_len>
 80031a4:	2801      	cmp	r0, #1
 80031a6:	f67f af6c 	bls.w	8003082 <_lv_indev_read_task+0x87a>
                        lv_group_set_editing(g, lv_group_get_editing(g) ? false : true); /*Toggle edit mode on long press*/
 80031aa:	4648      	mov	r0, r9
 80031ac:	f7fe fc0c 	bl	80019c8 <lv_group_get_editing>
 80031b0:	4601      	mov	r1, r0
 80031b2:	4648      	mov	r0, r9
 80031b4:	f081 0101 	eor.w	r1, r1, #1
 80031b8:	b2c9      	uxtb	r1, r1
 80031ba:	f7fe fbdb 	bl	8001974 <lv_group_set_editing>
 80031be:	e760      	b.n	8003082 <_lv_indev_read_task+0x87a>

080031c0 <style_prop_is_cacheble>:
}

static bool style_prop_is_cacheble(lv_style_property_t prop)
{

    switch(prop) {
 80031c0:	2891      	cmp	r0, #145	; 0x91
 80031c2:	d801      	bhi.n	80031c8 <style_prop_is_cacheble+0x8>
 80031c4:	b988      	cbnz	r0, 80031ea <style_prop_is_cacheble+0x2a>
 80031c6:	4770      	bx	lr
 80031c8:	f248 03ad 	movw	r3, #32941	; 0x80ad
 80031cc:	4298      	cmp	r0, r3
 80031ce:	d85c      	bhi.n	800328a <style_prop_is_cacheble+0xca>
 80031d0:	f248 037f 	movw	r3, #32895	; 0x807f
 80031d4:	4298      	cmp	r0, r3
 80031d6:	d85a      	bhi.n	800328e <style_prop_is_cacheble+0xce>
 80031d8:	28ff      	cmp	r0, #255	; 0xff
 80031da:	d054      	beq.n	8003286 <style_prop_is_cacheble+0xc6>
 80031dc:	f248 030c 	movw	r3, #32780	; 0x800c
        case LV_STYLE_OUTLINE_BLEND_MODE:
        case LV_STYLE_PATTERN_BLEND_MODE:
        case LV_STYLE_SHADOW_BLEND_MODE:
        case LV_STYLE_TEXT_BLEND_MODE:
        case LV_STYLE_VALUE_BLEND_MODE:
            return true;
 80031e0:	1ac0      	subs	r0, r0, r3
 80031e2:	fab0 f080 	clz	r0, r0
 80031e6:	0940      	lsrs	r0, r0, #5
 80031e8:	4770      	bx	lr
 80031ea:	3801      	subs	r0, #1
 80031ec:	2890      	cmp	r0, #144	; 0x90
 80031ee:	d84c      	bhi.n	800328a <style_prop_is_cacheble+0xca>
 80031f0:	e8df f000 	tbb	[pc, r0]
 80031f4:	494b4949 	.word	0x494b4949
 80031f8:	4b494949 	.word	0x4b494949
 80031fc:	4b4b4b4b 	.word	0x4b4b4b4b
 8003200:	494b4b4b 	.word	0x494b4b4b
 8003204:	4b494949 	.word	0x4b494949
 8003208:	49494949 	.word	0x49494949
 800320c:	4b4b4b4b 	.word	0x4b4b4b4b
 8003210:	494b4b4b 	.word	0x494b4b4b
 8003214:	4b4b4b4b 	.word	0x4b4b4b4b
 8003218:	4b4b4b4b 	.word	0x4b4b4b4b
 800321c:	494b4b4b 	.word	0x494b4b4b
 8003220:	494b4b4b 	.word	0x494b4b4b
 8003224:	4b494949 	.word	0x4b494949
 8003228:	4b4b4b4b 	.word	0x4b4b4b4b
 800322c:	4b4b4b4b 	.word	0x4b4b4b4b
 8003230:	494b4b4b 	.word	0x494b4b4b
 8003234:	4b4b494b 	.word	0x4b4b494b
 8003238:	4b4b4b4b 	.word	0x4b4b4b4b
 800323c:	4b4b4b4b 	.word	0x4b4b4b4b
 8003240:	494b4b4b 	.word	0x494b4b4b
 8003244:	494b4b4b 	.word	0x494b4b4b
 8003248:	4b4b4b4b 	.word	0x4b4b4b4b
 800324c:	4b4b4b4b 	.word	0x4b4b4b4b
 8003250:	494b4b4b 	.word	0x494b4b4b
 8003254:	4b4b4b4b 	.word	0x4b4b4b4b
 8003258:	4b4b4b4b 	.word	0x4b4b4b4b
 800325c:	4b4b4b4b 	.word	0x4b4b4b4b
 8003260:	4b4b494b 	.word	0x4b4b494b
 8003264:	4b4b494b 	.word	0x4b4b494b
 8003268:	4b4b4b4b 	.word	0x4b4b4b4b
 800326c:	4b4b4b4b 	.word	0x4b4b4b4b
 8003270:	4b494b4b 	.word	0x4b494b4b
 8003274:	4b4b4b4b 	.word	0x4b4b4b4b
 8003278:	4b4b4b4b 	.word	0x4b4b4b4b
 800327c:	4b4b4b4b 	.word	0x4b4b4b4b
 8003280:	4b4b4b4b 	.word	0x4b4b4b4b
 8003284:	49          	.byte	0x49
 8003285:	00          	.byte	0x00
 8003286:	2001      	movs	r0, #1
            break;
        default:
            return false;
    }
}
 8003288:	4770      	bx	lr
    switch(prop) {
 800328a:	2000      	movs	r0, #0
 800328c:	4770      	bx	lr
 800328e:	4b31      	ldr	r3, [pc, #196]	; (8003354 <style_prop_is_cacheble+0x194>)
 8003290:	4403      	add	r3, r0
 8003292:	2b2d      	cmp	r3, #45	; 0x2d
 8003294:	d8f9      	bhi.n	800328a <style_prop_is_cacheble+0xca>
 8003296:	a201      	add	r2, pc, #4	; (adr r2, 800329c <style_prop_is_cacheble+0xdc>)
 8003298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800329c:	08003287 	.word	0x08003287
 80032a0:	08003287 	.word	0x08003287
 80032a4:	0800328b 	.word	0x0800328b
 80032a8:	08003287 	.word	0x08003287
 80032ac:	0800328b 	.word	0x0800328b
 80032b0:	0800328b 	.word	0x0800328b
 80032b4:	0800328b 	.word	0x0800328b
 80032b8:	0800328b 	.word	0x0800328b
 80032bc:	0800328b 	.word	0x0800328b
 80032c0:	0800328b 	.word	0x0800328b
 80032c4:	0800328b 	.word	0x0800328b
 80032c8:	0800328b 	.word	0x0800328b
 80032cc:	0800328b 	.word	0x0800328b
 80032d0:	0800328b 	.word	0x0800328b
 80032d4:	08003287 	.word	0x08003287
 80032d8:	0800328b 	.word	0x0800328b
 80032dc:	0800328b 	.word	0x0800328b
 80032e0:	0800328b 	.word	0x0800328b
 80032e4:	0800328b 	.word	0x0800328b
 80032e8:	0800328b 	.word	0x0800328b
 80032ec:	0800328b 	.word	0x0800328b
 80032f0:	0800328b 	.word	0x0800328b
 80032f4:	0800328b 	.word	0x0800328b
 80032f8:	0800328b 	.word	0x0800328b
 80032fc:	0800328b 	.word	0x0800328b
 8003300:	0800328b 	.word	0x0800328b
 8003304:	0800328b 	.word	0x0800328b
 8003308:	0800328b 	.word	0x0800328b
 800330c:	0800328b 	.word	0x0800328b
 8003310:	0800328b 	.word	0x0800328b
 8003314:	0800328b 	.word	0x0800328b
 8003318:	0800328b 	.word	0x0800328b
 800331c:	08003287 	.word	0x08003287
 8003320:	0800328b 	.word	0x0800328b
 8003324:	0800328b 	.word	0x0800328b
 8003328:	0800328b 	.word	0x0800328b
 800332c:	0800328b 	.word	0x0800328b
 8003330:	0800328b 	.word	0x0800328b
 8003334:	0800328b 	.word	0x0800328b
 8003338:	0800328b 	.word	0x0800328b
 800333c:	0800328b 	.word	0x0800328b
 8003340:	0800328b 	.word	0x0800328b
 8003344:	0800328b 	.word	0x0800328b
 8003348:	0800328b 	.word	0x0800328b
 800334c:	0800328b 	.word	0x0800328b
 8003350:	08003287 	.word	0x08003287
 8003354:	ffff7f80 	.word	0xffff7f80

08003358 <refresh_children_position>:
{
 8003358:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    _LV_LL_READ(obj->child_ll, i) {
 800335c:	1d07      	adds	r7, r0, #4
{
 800335e:	4688      	mov	r8, r1
 8003360:	4692      	mov	sl, r2
    _LV_LL_READ(obj->child_ll, i) {
 8003362:	4638      	mov	r0, r7
 8003364:	f011 fc02 	bl	8014b6c <_lv_ll_get_head>
 8003368:	b1f0      	cbz	r0, 80033a8 <refresh_children_position+0x50>
 800336a:	4604      	mov	r4, r0
 800336c:	fa1f f988 	uxth.w	r9, r8
 8003370:	fa1f f68a 	uxth.w	r6, sl
        i->coords.x1 += x_diff;
 8003374:	f8b4 c010 	ldrh.w	ip, [r4, #16]
        refresh_children_position(i, x_diff, y_diff);
 8003378:	4652      	mov	r2, sl
        i->coords.y1 += y_diff;
 800337a:	8a60      	ldrh	r0, [r4, #18]
        refresh_children_position(i, x_diff, y_diff);
 800337c:	4641      	mov	r1, r8
        i->coords.x2 += x_diff;
 800337e:	8aa5      	ldrh	r5, [r4, #20]
        i->coords.x1 += x_diff;
 8003380:	44cc      	add	ip, r9
        i->coords.y2 += y_diff;
 8003382:	8ae3      	ldrh	r3, [r4, #22]
        i->coords.y1 += y_diff;
 8003384:	4430      	add	r0, r6
        i->coords.x2 += x_diff;
 8003386:	444d      	add	r5, r9
        i->coords.x1 += x_diff;
 8003388:	f8a4 c010 	strh.w	ip, [r4, #16]
        i->coords.y2 += y_diff;
 800338c:	4433      	add	r3, r6
        i->coords.y1 += y_diff;
 800338e:	8260      	strh	r0, [r4, #18]
        i->coords.x2 += x_diff;
 8003390:	82a5      	strh	r5, [r4, #20]
        refresh_children_position(i, x_diff, y_diff);
 8003392:	4620      	mov	r0, r4
        i->coords.y2 += y_diff;
 8003394:	82e3      	strh	r3, [r4, #22]
        refresh_children_position(i, x_diff, y_diff);
 8003396:	f7ff ffdf 	bl	8003358 <refresh_children_position>
    _LV_LL_READ(obj->child_ll, i) {
 800339a:	4621      	mov	r1, r4
 800339c:	4638      	mov	r0, r7
 800339e:	f011 fbed 	bl	8014b7c <_lv_ll_get_next>
 80033a2:	4604      	mov	r4, r0
 80033a4:	2800      	cmp	r0, #0
 80033a6:	d1e5      	bne.n	8003374 <refresh_children_position+0x1c>
}
 80033a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080033ac <trans_del>:
{
 80033ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033b0:	461e      	mov	r6, r3
 80033b2:	b083      	sub	sp, #12
 80033b4:	4607      	mov	r7, r0
    tr = _lv_ll_get_tail(&LV_GC_ROOT(_lv_obj_style_trans_ll));
 80033b6:	4829      	ldr	r0, [pc, #164]	; (800345c <trans_del+0xb0>)
{
 80033b8:	4689      	mov	r9, r1
 80033ba:	4692      	mov	sl, r2
    tr = _lv_ll_get_tail(&LV_GC_ROOT(_lv_obj_style_trans_ll));
 80033bc:	f011 fbda 	bl	8014b74 <_lv_ll_get_tail>
        if(tr == tr_limit) break;
 80033c0:	42b0      	cmp	r0, r6
 80033c2:	d043      	beq.n	800344c <trans_del+0xa0>
 80033c4:	fab0 fb80 	clz	fp, r0
 80033c8:	4604      	mov	r4, r0
 80033ca:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 80033ce:	2800      	cmp	r0, #0
 80033d0:	d03c      	beq.n	800344c <trans_del+0xa0>
        tr_prev = _lv_ll_get_prev(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
 80033d2:	f8df 8088 	ldr.w	r8, [pc, #136]	; 800345c <trans_del+0xb0>
 80033d6:	e002      	b.n	80033de <trans_del+0x32>
        if(tr == tr_limit) break;
 80033d8:	42a6      	cmp	r6, r4
 80033da:	d037      	beq.n	800344c <trans_del+0xa0>
 80033dc:	b3b4      	cbz	r4, 800344c <trans_del+0xa0>
        tr_prev = _lv_ll_get_prev(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
 80033de:	4621      	mov	r1, r4
 80033e0:	4640      	mov	r0, r8
 80033e2:	f011 fbd1 	bl	8014b88 <_lv_ll_get_prev>
        if(tr->obj == obj && (part == tr->part || part == 0xFF) && (prop == tr->prop || prop == 0xFF)) {
 80033e6:	6822      	ldr	r2, [r4, #0]
 80033e8:	4625      	mov	r5, r4
        tr_prev = _lv_ll_get_prev(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
 80033ea:	4604      	mov	r4, r0
        if(tr->obj == obj && (part == tr->part || part == 0xFF) && (prop == tr->prop || prop == 0xFF)) {
 80033ec:	42ba      	cmp	r2, r7
 80033ee:	d1f3      	bne.n	80033d8 <trans_del+0x2c>
 80033f0:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80033f4:	79ab      	ldrb	r3, [r5, #6]
 80033f6:	d001      	beq.n	80033fc <trans_del+0x50>
 80033f8:	454b      	cmp	r3, r9
 80033fa:	d1ed      	bne.n	80033d8 <trans_del+0x2c>
 80033fc:	88a9      	ldrh	r1, [r5, #4]
 80033fe:	4551      	cmp	r1, sl
 8003400:	d002      	beq.n	8003408 <trans_del+0x5c>
 8003402:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8003406:	d1e7      	bne.n	80033d8 <trans_del+0x2c>
    if(part == LV_OBJ_PART_MAIN) return &((lv_obj_t *)obj)->style_list;
 8003408:	b31b      	cbz	r3, 8003452 <trans_del+0xa6>
    info.part = part;
 800340a:	f88d 3000 	strb.w	r3, [sp]
    info.result = NULL;
 800340e:	f8cd b004 	str.w	fp, [sp, #4]
    if(obj == NULL) return LV_RES_OK;
 8003412:	b142      	cbz	r2, 8003426 <trans_del+0x7a>
    if(obj->signal_cb) res = obj->signal_cb(obj, signal, param);
 8003414:	69d3      	ldr	r3, [r2, #28]
 8003416:	b1f3      	cbz	r3, 8003456 <trans_del+0xaa>
 8003418:	4610      	mov	r0, r2
 800341a:	2108      	movs	r1, #8
 800341c:	466a      	mov	r2, sp
 800341e:	4798      	blx	r3
    if(res != LV_RES_OK) return NULL;
 8003420:	2801      	cmp	r0, #1
 8003422:	d118      	bne.n	8003456 <trans_del+0xaa>
 8003424:	9a01      	ldr	r2, [sp, #4]
            lv_style_t * style_trans = _lv_style_list_get_transition_style(list);
 8003426:	4610      	mov	r0, r2
 8003428:	f006 f8aa 	bl	8009580 <_lv_style_list_get_transition_style>
            lv_style_remove_prop(style_trans, tr->prop);
 800342c:	88a9      	ldrh	r1, [r5, #4]
 800342e:	f005 faa5 	bl	800897c <lv_style_remove_prop>
            lv_anim_del(tr, NULL);
 8003432:	2100      	movs	r1, #0
 8003434:	4628      	mov	r0, r5
 8003436:	f010 fcc7 	bl	8013dc8 <lv_anim_del>
            _lv_ll_remove(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
 800343a:	4629      	mov	r1, r5
 800343c:	4640      	mov	r0, r8
 800343e:	f011 fb19 	bl	8014a74 <_lv_ll_remove>
            lv_mem_free(tr);
 8003442:	4628      	mov	r0, r5
 8003444:	f011 fcf2 	bl	8014e2c <lv_mem_free>
        if(tr == tr_limit) break;
 8003448:	42a6      	cmp	r6, r4
 800344a:	d1c7      	bne.n	80033dc <trans_del+0x30>
}
 800344c:	b003      	add	sp, #12
 800344e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(part == LV_OBJ_PART_MAIN) return &((lv_obj_t *)obj)->style_list;
 8003452:	3228      	adds	r2, #40	; 0x28
 8003454:	e7e7      	b.n	8003426 <trans_del+0x7a>
    if(res != LV_RES_OK) return NULL;
 8003456:	2200      	movs	r2, #0
 8003458:	e7e5      	b.n	8003426 <trans_del+0x7a>
 800345a:	bf00      	nop
 800345c:	200204d4 	.word	0x200204d4

08003460 <trans_anim_ready_cb>:
{
 8003460:	4603      	mov	r3, r0
    _LV_LL_READ(LV_GC_ROOT(_lv_obj_style_trans_ll), tr_i) {
 8003462:	4828      	ldr	r0, [pc, #160]	; (8003504 <trans_anim_ready_cb+0xa4>)
{
 8003464:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003466:	b083      	sub	sp, #12
    lv_style_trans_t * tr = a->var;
 8003468:	681c      	ldr	r4, [r3, #0]
    _LV_LL_READ(LV_GC_ROOT(_lv_obj_style_trans_ll), tr_i) {
 800346a:	f011 fb7f 	bl	8014b6c <_lv_ll_get_head>
 800346e:	b338      	cbz	r0, 80034c0 <trans_anim_ready_cb+0x60>
 8003470:	4603      	mov	r3, r0
    bool running = false;
 8003472:	2700      	movs	r7, #0
    _LV_LL_READ(LV_GC_ROOT(_lv_obj_style_trans_ll), tr_i) {
 8003474:	4e23      	ldr	r6, [pc, #140]	; (8003504 <trans_anim_ready_cb+0xa4>)
 8003476:	e003      	b.n	8003480 <trans_anim_ready_cb+0x20>
 8003478:	f011 fb80 	bl	8014b7c <_lv_ll_get_next>
 800347c:	4603      	mov	r3, r0
 800347e:	b1a8      	cbz	r0, 80034ac <trans_anim_ready_cb+0x4c>
        if(tr_i != tr && tr_i->obj == tr->obj && tr_i->part == tr->part && tr_i->prop == tr->prop) {
 8003480:	429c      	cmp	r4, r3
    _LV_LL_READ(LV_GC_ROOT(_lv_obj_style_trans_ll), tr_i) {
 8003482:	4619      	mov	r1, r3
 8003484:	4630      	mov	r0, r6
        if(tr_i != tr && tr_i->obj == tr->obj && tr_i->part == tr->part && tr_i->prop == tr->prop) {
 8003486:	d0f7      	beq.n	8003478 <trans_anim_ready_cb+0x18>
 8003488:	681d      	ldr	r5, [r3, #0]
 800348a:	6822      	ldr	r2, [r4, #0]
 800348c:	4295      	cmp	r5, r2
 800348e:	d1f3      	bne.n	8003478 <trans_anim_ready_cb+0x18>
 8003490:	685a      	ldr	r2, [r3, #4]
 8003492:	6863      	ldr	r3, [r4, #4]
 8003494:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003498:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
            running = true;
 800349c:	429a      	cmp	r2, r3
 800349e:	bf08      	it	eq
 80034a0:	2701      	moveq	r7, #1
    _LV_LL_READ(LV_GC_ROOT(_lv_obj_style_trans_ll), tr_i) {
 80034a2:	f011 fb6b 	bl	8014b7c <_lv_ll_get_next>
 80034a6:	4603      	mov	r3, r0
 80034a8:	2800      	cmp	r0, #0
 80034aa:	d1e9      	bne.n	8003480 <trans_anim_ready_cb+0x20>
    if(!running) {
 80034ac:	b147      	cbz	r7, 80034c0 <trans_anim_ready_cb+0x60>
    _lv_ll_remove(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
 80034ae:	4621      	mov	r1, r4
 80034b0:	4814      	ldr	r0, [pc, #80]	; (8003504 <trans_anim_ready_cb+0xa4>)
 80034b2:	f011 fadf 	bl	8014a74 <_lv_ll_remove>
    lv_mem_free(tr);
 80034b6:	4620      	mov	r0, r4
 80034b8:	f011 fcb8 	bl	8014e2c <lv_mem_free>
}
 80034bc:	b003      	add	sp, #12
 80034be:	bdf0      	pop	{r4, r5, r6, r7, pc}
        lv_style_list_t * list = lv_obj_get_style_list(tr->obj, tr->part);
 80034c0:	79a3      	ldrb	r3, [r4, #6]
 80034c2:	6820      	ldr	r0, [r4, #0]
    if(part == LV_OBJ_PART_MAIN) return &((lv_obj_t *)obj)->style_list;
 80034c4:	b193      	cbz	r3, 80034ec <trans_anim_ready_cb+0x8c>
    info.result = NULL;
 80034c6:	2500      	movs	r5, #0
    info.part = part;
 80034c8:	f88d 3000 	strb.w	r3, [sp]
    info.result = NULL;
 80034cc:	9501      	str	r5, [sp, #4]
    if(obj == NULL) return LV_RES_OK;
 80034ce:	b138      	cbz	r0, 80034e0 <trans_anim_ready_cb+0x80>
    if(obj->signal_cb) res = obj->signal_cb(obj, signal, param);
 80034d0:	69c3      	ldr	r3, [r0, #28]
 80034d2:	b193      	cbz	r3, 80034fa <trans_anim_ready_cb+0x9a>
 80034d4:	466a      	mov	r2, sp
 80034d6:	2108      	movs	r1, #8
 80034d8:	4798      	blx	r3
    if(res != LV_RES_OK) return NULL;
 80034da:	2801      	cmp	r0, #1
 80034dc:	d10f      	bne.n	80034fe <trans_anim_ready_cb+0x9e>
 80034de:	9801      	ldr	r0, [sp, #4]
        lv_style_t * style_trans = _lv_style_list_get_transition_style(list);
 80034e0:	f006 f84e 	bl	8009580 <_lv_style_list_get_transition_style>
        lv_style_remove_prop(style_trans, tr->prop);
 80034e4:	88a1      	ldrh	r1, [r4, #4]
 80034e6:	f005 fa49 	bl	800897c <lv_style_remove_prop>
 80034ea:	e7e0      	b.n	80034ae <trans_anim_ready_cb+0x4e>
    if(part == LV_OBJ_PART_MAIN) return &((lv_obj_t *)obj)->style_list;
 80034ec:	3028      	adds	r0, #40	; 0x28
        lv_style_t * style_trans = _lv_style_list_get_transition_style(list);
 80034ee:	f006 f847 	bl	8009580 <_lv_style_list_get_transition_style>
        lv_style_remove_prop(style_trans, tr->prop);
 80034f2:	88a1      	ldrh	r1, [r4, #4]
 80034f4:	f005 fa42 	bl	800897c <lv_style_remove_prop>
 80034f8:	e7d9      	b.n	80034ae <trans_anim_ready_cb+0x4e>
 80034fa:	4618      	mov	r0, r3
    return info.result;
 80034fc:	e7f0      	b.n	80034e0 <trans_anim_ready_cb+0x80>
    if(res != LV_RES_OK) return NULL;
 80034fe:	4628      	mov	r0, r5
 8003500:	e7ee      	b.n	80034e0 <trans_anim_ready_cb+0x80>
 8003502:	bf00      	nop
 8003504:	200204d4 	.word	0x200204d4

08003508 <lv_init>:
{
 8003508:	b510      	push	{r4, lr}
    if(lv_initialized) {
 800350a:	4c19      	ldr	r4, [pc, #100]	; (8003570 <lv_init+0x68>)
{
 800350c:	b084      	sub	sp, #16
    if(lv_initialized) {
 800350e:	7823      	ldrb	r3, [r4, #0]
 8003510:	bb63      	cbnz	r3, 800356c <lv_init+0x64>
    _lv_mem_init();
 8003512:	f011 fc39 	bl	8014d88 <_lv_mem_init>
    _lv_task_core_init();
 8003516:	f012 fa35 	bl	8015984 <_lv_task_core_init>
    _lv_fs_init();
 800351a:	f011 f969 	bl	80147f0 <_lv_fs_init>
    _lv_anim_core_init();
 800351e:	f010 fc09 	bl	8013d34 <_lv_anim_core_init>
    _lv_group_init();
 8003522:	f7fe f893 	bl	800164c <_lv_group_init>
    _lv_ll_init(&LV_GC_ROOT(_lv_obj_style_trans_ll), sizeof(lv_style_trans_t));
 8003526:	2110      	movs	r1, #16
 8003528:	4812      	ldr	r0, [pc, #72]	; (8003574 <lv_init+0x6c>)
 800352a:	f011 fa41 	bl	80149b0 <_lv_ll_init>
    _lv_ll_init(&LV_GC_ROOT(_lv_disp_ll), sizeof(lv_disp_t));
 800352e:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8003532:	4811      	ldr	r0, [pc, #68]	; (8003578 <lv_init+0x70>)
 8003534:	f011 fa3c 	bl	80149b0 <_lv_ll_init>
    _lv_ll_init(&LV_GC_ROOT(_lv_indev_ll), sizeof(lv_indev_t));
 8003538:	2160      	movs	r1, #96	; 0x60
 800353a:	4810      	ldr	r0, [pc, #64]	; (800357c <lv_init+0x74>)
 800353c:	f011 fa38 	bl	80149b0 <_lv_ll_init>
    lv_theme_t * th = LV_THEME_DEFAULT_INIT(LV_THEME_DEFAULT_COLOR_PRIMARY, LV_THEME_DEFAULT_COLOR_SECONDARY,
 8003540:	4b0f      	ldr	r3, [pc, #60]	; (8003580 <lv_init+0x78>)
 8003542:	2202      	movs	r2, #2
 8003544:	490f      	ldr	r1, [pc, #60]	; (8003584 <lv_init+0x7c>)
 8003546:	9300      	str	r3, [sp, #0]
 8003548:	480f      	ldr	r0, [pc, #60]	; (8003588 <lv_init+0x80>)
 800354a:	e9cd 3301 	strd	r3, r3, [sp, #4]
 800354e:	f015 fbf7 	bl	8018d40 <lv_theme_material_init>
    lv_theme_set_act(th);
 8003552:	f012 fea9 	bl	80162a8 <lv_theme_set_act>
    _lv_refr_init();
 8003556:	f004 fe49 	bl	80081ec <_lv_refr_init>
    _lv_indev_init();
 800355a:	f7fe fbfb 	bl	8001d54 <_lv_indev_init>
    _lv_img_decoder_init();
 800355e:	f00f f849 	bl	80125f4 <_lv_img_decoder_init>
    lv_img_cache_set_size(LV_IMG_CACHE_DEF_SIZE);
 8003562:	2001      	movs	r0, #1
 8003564:	f00e fc0c 	bl	8011d80 <lv_img_cache_set_size>
    lv_initialized = true;
 8003568:	2301      	movs	r3, #1
 800356a:	7023      	strb	r3, [r4, #0]
}
 800356c:	b004      	add	sp, #16
 800356e:	bd10      	pop	{r4, pc}
 8003570:	20017898 	.word	0x20017898
 8003574:	200204d4 	.word	0x200204d4
 8003578:	20020430 	.word	0x20020430
 800357c:	20020424 	.word	0x20020424
 8003580:	20000020 	.word	0x20000020
 8003584:	ff44d1b6 	.word	0xff44d1b6
 8003588:	ff01a2b1 	.word	0xff01a2b1

0800358c <lv_obj_clean_style_list>:
{
 800358c:	b530      	push	{r4, r5, lr}
    if(part == LV_OBJ_PART_MAIN) return &((lv_obj_t *)obj)->style_list;
 800358e:	460c      	mov	r4, r1
{
 8003590:	b083      	sub	sp, #12
 8003592:	4605      	mov	r5, r0
    if(part == LV_OBJ_PART_MAIN) return &((lv_obj_t *)obj)->style_list;
 8003594:	b1b9      	cbz	r1, 80035c6 <lv_obj_clean_style_list+0x3a>
    info.result = NULL;
 8003596:	2300      	movs	r3, #0
    info.part = part;
 8003598:	f88d 1000 	strb.w	r1, [sp]
    info.result = NULL;
 800359c:	9301      	str	r3, [sp, #4]
    if(obj == NULL) return LV_RES_OK;
 800359e:	b180      	cbz	r0, 80035c2 <lv_obj_clean_style_list+0x36>
    if(obj->signal_cb) res = obj->signal_cb(obj, signal, param);
 80035a0:	69c3      	ldr	r3, [r0, #28]
 80035a2:	b173      	cbz	r3, 80035c2 <lv_obj_clean_style_list+0x36>
 80035a4:	466a      	mov	r2, sp
 80035a6:	2108      	movs	r1, #8
 80035a8:	4798      	blx	r3
    if(res != LV_RES_OK) return NULL;
 80035aa:	2801      	cmp	r0, #1
 80035ac:	d109      	bne.n	80035c2 <lv_obj_clean_style_list+0x36>
    return info.result;
 80035ae:	9801      	ldr	r0, [sp, #4]
    if(style_dsc == NULL) {
 80035b0:	b138      	cbz	r0, 80035c2 <lv_obj_clean_style_list+0x36>
    _lv_style_list_reset(style_dsc);
 80035b2:	f005 fc7f 	bl	8008eb4 <_lv_style_list_reset>
    trans_del(obj, part, 0xFF, NULL);
 80035b6:	4621      	mov	r1, r4
 80035b8:	4628      	mov	r0, r5
 80035ba:	2300      	movs	r3, #0
 80035bc:	22ff      	movs	r2, #255	; 0xff
 80035be:	f7ff fef5 	bl	80033ac <trans_del>
}
 80035c2:	b003      	add	sp, #12
 80035c4:	bd30      	pop	{r4, r5, pc}
    if(part == LV_OBJ_PART_MAIN) return &((lv_obj_t *)obj)->style_list;
 80035c6:	3028      	adds	r0, #40	; 0x28
    if(style_dsc == NULL) {
 80035c8:	e7f3      	b.n	80035b2 <lv_obj_clean_style_list+0x26>
 80035ca:	bf00      	nop

080035cc <_lv_obj_disable_style_caching>:
{
 80035cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035d0:	4604      	mov	r4, r0
 80035d2:	b082      	sub	sp, #8
 80035d4:	460e      	mov	r6, r1
 80035d6:	b308      	cbz	r0, 800361c <_lv_obj_disable_style_caching+0x50>
 80035d8:	2500      	movs	r5, #0
    info.result = NULL;
 80035da:	46a8      	mov	r8, r5
 80035dc:	e011      	b.n	8003602 <_lv_obj_disable_style_caching+0x36>
    if(obj->signal_cb) res = obj->signal_cb(obj, signal, param);
 80035de:	69e3      	ldr	r3, [r4, #28]
    info.part = part;
 80035e0:	f88d 7000 	strb.w	r7, [sp]
    info.result = NULL;
 80035e4:	f8cd 8004 	str.w	r8, [sp, #4]
    if(obj->signal_cb) res = obj->signal_cb(obj, signal, param);
 80035e8:	b313      	cbz	r3, 8003630 <_lv_obj_disable_style_caching+0x64>
 80035ea:	4798      	blx	r3
    if(res != LV_RES_OK) return NULL;
 80035ec:	2801      	cmp	r0, #1
 80035ee:	d11e      	bne.n	800362e <_lv_obj_disable_style_caching+0x62>
    return info.result;
 80035f0:	9b01      	ldr	r3, [sp, #4]
        if(list == NULL) break;
 80035f2:	b1e3      	cbz	r3, 800362e <_lv_obj_disable_style_caching+0x62>
        list->ignore_cache = dis;
 80035f4:	795a      	ldrb	r2, [r3, #5]
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
 80035f6:	2f3f      	cmp	r7, #63	; 0x3f
        list->ignore_cache = dis;
 80035f8:	f366 02c3 	bfi	r2, r6, #3, #1
 80035fc:	715a      	strb	r2, [r3, #5]
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
 80035fe:	d016      	beq.n	800362e <_lv_obj_disable_style_caching+0x62>
 8003600:	3501      	adds	r5, #1
    if(obj->signal_cb) res = obj->signal_cb(obj, signal, param);
 8003602:	466a      	mov	r2, sp
 8003604:	2108      	movs	r1, #8
 8003606:	4620      	mov	r0, r4
 8003608:	b2ef      	uxtb	r7, r5
    if(part == LV_OBJ_PART_MAIN) return &((lv_obj_t *)obj)->style_list;
 800360a:	2d00      	cmp	r5, #0
 800360c:	d1e7      	bne.n	80035de <_lv_obj_disable_style_caching+0x12>
        list->ignore_cache = dis;
 800360e:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8003612:	f366 03c3 	bfi	r3, r6, #3, #1
 8003616:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
 800361a:	e7f1      	b.n	8003600 <_lv_obj_disable_style_caching+0x34>
        list->ignore_cache = dis;
 800361c:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8003620:	f361 03c3 	bfi	r3, r1, #3, #1
 8003624:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
}
 8003628:	b002      	add	sp, #8
 800362a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800362e:	69e3      	ldr	r3, [r4, #28]
{
 8003630:	2540      	movs	r5, #64	; 0x40
    info.result = NULL;
 8003632:	2700      	movs	r7, #0
 8003634:	e00e      	b.n	8003654 <_lv_obj_disable_style_caching+0x88>
    for(part = _LV_OBJ_PART_REAL_FIRST; part < 0xFF; part++) {
 8003636:	3501      	adds	r5, #1
    if(obj->signal_cb) res = obj->signal_cb(obj, signal, param);
 8003638:	4798      	blx	r3
    if(res != LV_RES_OK) return NULL;
 800363a:	2801      	cmp	r0, #1
    for(part = _LV_OBJ_PART_REAL_FIRST; part < 0xFF; part++) {
 800363c:	b2ed      	uxtb	r5, r5
    if(res != LV_RES_OK) return NULL;
 800363e:	d1f3      	bne.n	8003628 <_lv_obj_disable_style_caching+0x5c>
    return info.result;
 8003640:	9b01      	ldr	r3, [sp, #4]
        if(list == NULL) break;
 8003642:	2b00      	cmp	r3, #0
 8003644:	d0f0      	beq.n	8003628 <_lv_obj_disable_style_caching+0x5c>
        list->ignore_cache = dis;
 8003646:	795a      	ldrb	r2, [r3, #5]
    for(part = _LV_OBJ_PART_REAL_FIRST; part < 0xFF; part++) {
 8003648:	2dff      	cmp	r5, #255	; 0xff
        list->ignore_cache = dis;
 800364a:	f366 02c3 	bfi	r2, r6, #3, #1
 800364e:	715a      	strb	r2, [r3, #5]
    for(part = _LV_OBJ_PART_REAL_FIRST; part < 0xFF; part++) {
 8003650:	d0ea      	beq.n	8003628 <_lv_obj_disable_style_caching+0x5c>
 8003652:	69e3      	ldr	r3, [r4, #28]
    if(obj->signal_cb) res = obj->signal_cb(obj, signal, param);
 8003654:	466a      	mov	r2, sp
 8003656:	2108      	movs	r1, #8
 8003658:	4620      	mov	r0, r4
    info.part = part;
 800365a:	f88d 5000 	strb.w	r5, [sp]
    info.result = NULL;
 800365e:	9701      	str	r7, [sp, #4]
    if(obj->signal_cb) res = obj->signal_cb(obj, signal, param);
 8003660:	2b00      	cmp	r3, #0
 8003662:	d1e8      	bne.n	8003636 <_lv_obj_disable_style_caching+0x6a>
}
 8003664:	b002      	add	sp, #8
 8003666:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800366a:	bf00      	nop

0800366c <lv_obj_set_click>:
{
 800366c:	b538      	push	{r3, r4, r5, lr}
 800366e:	460d      	mov	r5, r1
 8003670:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8003672:	f011 f8a9 	bl	80147c8 <lv_debug_check_null>
 8003676:	b130      	cbz	r0, 8003686 <lv_obj_set_click+0x1a>
    obj->click = (en == true ? 1 : 0);
 8003678:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800367c:	f365 0300 	bfi	r3, r5, #0, #1
 8003680:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8003684:	bd38      	pop	{r3, r4, r5, pc}
 8003686:	4603      	mov	r3, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8003688:	4622      	mov	r2, r4
 800368a:	4802      	ldr	r0, [pc, #8]	; (8003694 <lv_obj_set_click+0x28>)
 800368c:	f011 f8a0 	bl	80147d0 <lv_debug_log_error>
 8003690:	e7fe      	b.n	8003690 <lv_obj_set_click+0x24>
 8003692:	bf00      	nop
 8003694:	0801e1d4 	.word	0x0801e1d4

08003698 <lv_obj_add_protect>:
{
 8003698:	b538      	push	{r3, r4, r5, lr}
 800369a:	460d      	mov	r5, r1
 800369c:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 800369e:	f011 f893 	bl	80147c8 <lv_debug_check_null>
 80036a2:	b128      	cbz	r0, 80036b0 <lv_obj_add_protect+0x18>
    obj->protect |= prot;
 80036a4:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80036a8:	431d      	orrs	r5, r3
 80036aa:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
}
 80036ae:	bd38      	pop	{r3, r4, r5, pc}
 80036b0:	4603      	mov	r3, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80036b2:	4622      	mov	r2, r4
 80036b4:	4801      	ldr	r0, [pc, #4]	; (80036bc <lv_obj_add_protect+0x24>)
 80036b6:	f011 f88b 	bl	80147d0 <lv_debug_log_error>
 80036ba:	e7fe      	b.n	80036ba <lv_obj_add_protect+0x22>
 80036bc:	0801e1d4 	.word	0x0801e1d4

080036c0 <lv_obj_clear_protect>:
{
 80036c0:	b538      	push	{r3, r4, r5, lr}
 80036c2:	460d      	mov	r5, r1
 80036c4:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80036c6:	f011 f87f 	bl	80147c8 <lv_debug_check_null>
 80036ca:	b130      	cbz	r0, 80036da <lv_obj_clear_protect+0x1a>
    obj->protect &= prot;
 80036cc:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80036d0:	ea23 0305 	bic.w	r3, r3, r5
 80036d4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80036d8:	bd38      	pop	{r3, r4, r5, pc}
 80036da:	4603      	mov	r3, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80036dc:	4622      	mov	r2, r4
 80036de:	4802      	ldr	r0, [pc, #8]	; (80036e8 <lv_obj_clear_protect+0x28>)
 80036e0:	f011 f876 	bl	80147d0 <lv_debug_log_error>
 80036e4:	e7fe      	b.n	80036e4 <lv_obj_clear_protect+0x24>
 80036e6:	bf00      	nop
 80036e8:	0801e1d4 	.word	0x0801e1d4

080036ec <lv_event_send_func>:
{
 80036ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036f0:	4680      	mov	r8, r0
 80036f2:	b086      	sub	sp, #24
    if(obj != NULL) {
 80036f4:	460c      	mov	r4, r1
{
 80036f6:	4615      	mov	r5, r2
 80036f8:	461e      	mov	r6, r3
    if(obj != NULL) {
 80036fa:	b129      	cbz	r1, 8003708 <lv_event_send_func+0x1c>
        LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80036fc:	4608      	mov	r0, r1
 80036fe:	f011 f863 	bl	80147c8 <lv_debug_check_null>
 8003702:	4603      	mov	r3, r0
 8003704:	2800      	cmp	r0, #0
 8003706:	d03e      	beq.n	8003786 <lv_event_send_func+0x9a>
    if(event_temp_data_head) {
 8003708:	4f27      	ldr	r7, [pc, #156]	; (80037a8 <lv_event_send_func+0xbc>)
    event_temp_data_head = &event_temp_data;
 800370a:	a903      	add	r1, sp, #12
    const void * event_act_data_save = event_act_data;
 800370c:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 80037b0 <lv_event_send_func+0xc4>
    event_temp_data.deleted = false;
 8003710:	2300      	movs	r3, #0
        event_temp_data.prev = event_temp_data_head;
 8003712:	683a      	ldr	r2, [r7, #0]
    const void * event_act_data_save = event_act_data;
 8003714:	f8d9 a000 	ldr.w	sl, [r9]
    event_temp_data.obj     = obj;
 8003718:	9403      	str	r4, [sp, #12]
        event_temp_data.prev = event_temp_data_head;
 800371a:	9205      	str	r2, [sp, #20]
    event_temp_data_head = &event_temp_data;
 800371c:	6039      	str	r1, [r7, #0]
    event_temp_data.deleted = false;
 800371e:	f88d 3010 	strb.w	r3, [sp, #16]
    event_act_data                   = data;
 8003722:	f8c9 6000 	str.w	r6, [r9]
    lv_indev_t * indev_act = lv_indev_get_act();
 8003726:	f7fe fb3b 	bl	8001da0 <lv_indev_get_act>
    if(indev_act) {
 800372a:	b118      	cbz	r0, 8003734 <lv_event_send_func+0x48>
        if(indev_act->driver.feedback_cb) indev_act->driver.feedback_cb(&indev_act->driver, event);
 800372c:	6883      	ldr	r3, [r0, #8]
 800372e:	b10b      	cbz	r3, 8003734 <lv_event_send_func+0x48>
 8003730:	4629      	mov	r1, r5
 8003732:	4798      	blx	r3
    if(event_xcb) event_xcb(obj, event);
 8003734:	f1b8 0f00 	cmp.w	r8, #0
 8003738:	d002      	beq.n	8003740 <lv_event_send_func+0x54>
 800373a:	4629      	mov	r1, r5
 800373c:	4620      	mov	r0, r4
 800373e:	47c0      	blx	r8
    event_temp_data_head = event_temp_data_head->prev;
 8003740:	683b      	ldr	r3, [r7, #0]
    event_act_data = event_act_data_save;
 8003742:	f8c9 a000 	str.w	sl, [r9]
    event_temp_data_head = event_temp_data_head->prev;
 8003746:	689a      	ldr	r2, [r3, #8]
    if(event_temp_data.deleted) {
 8003748:	f89d 3010 	ldrb.w	r3, [sp, #16]
    event_temp_data_head = event_temp_data_head->prev;
 800374c:	603a      	str	r2, [r7, #0]
    if(event_temp_data.deleted) {
 800374e:	b9b3      	cbnz	r3, 800377e <lv_event_send_func+0x92>
    if(obj) {
 8003750:	b18c      	cbz	r4, 8003776 <lv_event_send_func+0x8a>
        if(obj->parent_event && obj->parent) {
 8003752:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8003756:	065b      	lsls	r3, r3, #25
 8003758:	d50d      	bpl.n	8003776 <lv_event_send_func+0x8a>
 800375a:	6821      	ldr	r1, [r4, #0]
 800375c:	b159      	cbz	r1, 8003776 <lv_event_send_func+0x8a>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 800375e:	4608      	mov	r0, r1
 8003760:	9101      	str	r1, [sp, #4]
 8003762:	f011 f831 	bl	80147c8 <lv_debug_check_null>
 8003766:	9901      	ldr	r1, [sp, #4]
 8003768:	4603      	mov	r3, r0
 800376a:	b988      	cbnz	r0, 8003790 <lv_event_send_func+0xa4>
 800376c:	460a      	mov	r2, r1
 800376e:	480f      	ldr	r0, [pc, #60]	; (80037ac <lv_event_send_func+0xc0>)
 8003770:	f011 f82e 	bl	80147d0 <lv_debug_log_error>
 8003774:	e7fe      	b.n	8003774 <lv_event_send_func+0x88>
    return LV_RES_OK;
 8003776:	2001      	movs	r0, #1
}
 8003778:	b006      	add	sp, #24
 800377a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return LV_RES_INV;
 800377e:	2000      	movs	r0, #0
}
 8003780:	b006      	add	sp, #24
 8003782:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8003786:	4622      	mov	r2, r4
 8003788:	4808      	ldr	r0, [pc, #32]	; (80037ac <lv_event_send_func+0xc0>)
 800378a:	f011 f821 	bl	80147d0 <lv_debug_log_error>
 800378e:	e7fe      	b.n	800378e <lv_event_send_func+0xa2>
    res = lv_event_send_func(obj->event_cb, obj, event, data);
 8003790:	4633      	mov	r3, r6
 8003792:	462a      	mov	r2, r5
 8003794:	6988      	ldr	r0, [r1, #24]
 8003796:	f7ff ffa9 	bl	80036ec <lv_event_send_func>
        return LV_RES_INV;
 800379a:	f1a0 0001 	sub.w	r0, r0, #1
 800379e:	fab0 f080 	clz	r0, r0
 80037a2:	0940      	lsrs	r0, r0, #5
 80037a4:	e7e8      	b.n	8003778 <lv_event_send_func+0x8c>
 80037a6:	bf00      	nop
 80037a8:	20017894 	.word	0x20017894
 80037ac:	0801e1d4 	.word	0x0801e1d4
 80037b0:	20017890 	.word	0x20017890

080037b4 <lv_event_send>:
{
 80037b4:	b510      	push	{r4, lr}
 80037b6:	b082      	sub	sp, #8
 80037b8:	460c      	mov	r4, r1
 80037ba:	9201      	str	r2, [sp, #4]
    if(obj == NULL) return LV_RES_OK;
 80037bc:	9000      	str	r0, [sp, #0]
 80037be:	b188      	cbz	r0, 80037e4 <lv_event_send+0x30>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80037c0:	f011 f802 	bl	80147c8 <lv_debug_check_null>
 80037c4:	e9dd 1300 	ldrd	r1, r3, [sp]
 80037c8:	b928      	cbnz	r0, 80037d6 <lv_event_send+0x22>
 80037ca:	4603      	mov	r3, r0
 80037cc:	460a      	mov	r2, r1
 80037ce:	4807      	ldr	r0, [pc, #28]	; (80037ec <lv_event_send+0x38>)
 80037d0:	f010 fffe 	bl	80147d0 <lv_debug_log_error>
 80037d4:	e7fe      	b.n	80037d4 <lv_event_send+0x20>
    res = lv_event_send_func(obj->event_cb, obj, event, data);
 80037d6:	4622      	mov	r2, r4
 80037d8:	6988      	ldr	r0, [r1, #24]
}
 80037da:	b002      	add	sp, #8
 80037dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    res = lv_event_send_func(obj->event_cb, obj, event, data);
 80037e0:	f7ff bf84 	b.w	80036ec <lv_event_send_func>
}
 80037e4:	2001      	movs	r0, #1
 80037e6:	b002      	add	sp, #8
 80037e8:	bd10      	pop	{r4, pc}
 80037ea:	bf00      	nop
 80037ec:	0801e1d4 	.word	0x0801e1d4

080037f0 <lv_obj_set_signal_cb>:
{
 80037f0:	b538      	push	{r3, r4, r5, lr}
 80037f2:	460d      	mov	r5, r1
 80037f4:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80037f6:	f010 ffe7 	bl	80147c8 <lv_debug_check_null>
 80037fa:	b108      	cbz	r0, 8003800 <lv_obj_set_signal_cb+0x10>
    obj->signal_cb = signal_cb;
 80037fc:	61e5      	str	r5, [r4, #28]
}
 80037fe:	bd38      	pop	{r3, r4, r5, pc}
 8003800:	4603      	mov	r3, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8003802:	4622      	mov	r2, r4
 8003804:	4801      	ldr	r0, [pc, #4]	; (800380c <lv_obj_set_signal_cb+0x1c>)
 8003806:	f010 ffe3 	bl	80147d0 <lv_debug_log_error>
 800380a:	e7fe      	b.n	800380a <lv_obj_set_signal_cb+0x1a>
 800380c:	0801e1d4 	.word	0x0801e1d4

08003810 <lv_signal_send>:
    if(obj == NULL) return LV_RES_OK;
 8003810:	b110      	cbz	r0, 8003818 <lv_signal_send+0x8>
    if(obj->signal_cb) res = obj->signal_cb(obj, signal, param);
 8003812:	69c3      	ldr	r3, [r0, #28]
 8003814:	b103      	cbz	r3, 8003818 <lv_signal_send+0x8>
 8003816:	4718      	bx	r3
}
 8003818:	2001      	movs	r0, #1
 800381a:	4770      	bx	lr

0800381c <lv_obj_set_design_cb>:
{
 800381c:	b538      	push	{r3, r4, r5, lr}
 800381e:	460d      	mov	r5, r1
 8003820:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8003822:	f010 ffd1 	bl	80147c8 <lv_debug_check_null>
 8003826:	b108      	cbz	r0, 800382c <lv_obj_set_design_cb+0x10>
    obj->design_cb = design_cb;
 8003828:	6225      	str	r5, [r4, #32]
}
 800382a:	bd38      	pop	{r3, r4, r5, pc}
 800382c:	4603      	mov	r3, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 800382e:	4622      	mov	r2, r4
 8003830:	4801      	ldr	r0, [pc, #4]	; (8003838 <lv_obj_set_design_cb+0x1c>)
 8003832:	f010 ffcd 	bl	80147d0 <lv_debug_log_error>
 8003836:	e7fe      	b.n	8003836 <lv_obj_set_design_cb+0x1a>
 8003838:	0801e1d4 	.word	0x0801e1d4

0800383c <lv_obj_allocate_ext_attr>:
{
 800383c:	b510      	push	{r4, lr}
 800383e:	b082      	sub	sp, #8
 8003840:	4604      	mov	r4, r0
 8003842:	9101      	str	r1, [sp, #4]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8003844:	f010 ffc0 	bl	80147c8 <lv_debug_check_null>
 8003848:	9901      	ldr	r1, [sp, #4]
 800384a:	b928      	cbnz	r0, 8003858 <lv_obj_allocate_ext_attr+0x1c>
 800384c:	4603      	mov	r3, r0
 800384e:	4622      	mov	r2, r4
 8003850:	4805      	ldr	r0, [pc, #20]	; (8003868 <lv_obj_allocate_ext_attr+0x2c>)
 8003852:	f010 ffbd 	bl	80147d0 <lv_debug_log_error>
 8003856:	e7fe      	b.n	8003856 <lv_obj_allocate_ext_attr+0x1a>
    void * new_ext = lv_mem_realloc(obj->ext_attr, ext_size);
 8003858:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800385a:	f011 fe0b 	bl	8015474 <lv_mem_realloc>
    if(new_ext == NULL) return NULL;
 800385e:	b100      	cbz	r0, 8003862 <lv_obj_allocate_ext_attr+0x26>
    obj->ext_attr = new_ext;
 8003860:	6260      	str	r0, [r4, #36]	; 0x24
}
 8003862:	b002      	add	sp, #8
 8003864:	bd10      	pop	{r4, pc}
 8003866:	bf00      	nop
 8003868:	0801e1d4 	.word	0x0801e1d4

0800386c <lv_obj_get_disp>:
{
 800386c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800386e:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8003870:	f010 ffaa 	bl	80147c8 <lv_debug_check_null>
 8003874:	2800      	cmp	r0, #0
 8003876:	d039      	beq.n	80038ec <lv_obj_get_disp+0x80>
    if(obj->parent == NULL)
 8003878:	6823      	ldr	r3, [r4, #0]
 800387a:	b1c3      	cbz	r3, 80038ae <lv_obj_get_disp+0x42>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 800387c:	4620      	mov	r0, r4
 800387e:	f010 ffa3 	bl	80147c8 <lv_debug_check_null>
 8003882:	4603      	mov	r3, r0
 8003884:	2800      	cmp	r0, #0
 8003886:	d037      	beq.n	80038f8 <lv_obj_get_disp+0x8c>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8003888:	4620      	mov	r0, r4
 800388a:	f010 ff9d 	bl	80147c8 <lv_debug_check_null>
 800388e:	4603      	mov	r3, r0
 8003890:	b140      	cbz	r0, 80038a4 <lv_obj_get_disp+0x38>
    return obj->parent;
 8003892:	6823      	ldr	r3, [r4, #0]
    } while(par != NULL);
 8003894:	b15b      	cbz	r3, 80038ae <lv_obj_get_disp+0x42>
 8003896:	461c      	mov	r4, r3
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8003898:	4620      	mov	r0, r4
 800389a:	f010 ff95 	bl	80147c8 <lv_debug_check_null>
 800389e:	4603      	mov	r3, r0
 80038a0:	2800      	cmp	r0, #0
 80038a2:	d1f6      	bne.n	8003892 <lv_obj_get_disp+0x26>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80038a4:	4622      	mov	r2, r4
 80038a6:	4817      	ldr	r0, [pc, #92]	; (8003904 <lv_obj_get_disp+0x98>)
 80038a8:	f010 ff92 	bl	80147d0 <lv_debug_log_error>
 80038ac:	e7fe      	b.n	80038ac <lv_obj_get_disp+0x40>
    _LV_LL_READ(LV_GC_ROOT(_lv_disp_ll), d) {
 80038ae:	4816      	ldr	r0, [pc, #88]	; (8003908 <lv_obj_get_disp+0x9c>)
 80038b0:	f011 f95c 	bl	8014b6c <_lv_ll_get_head>
 80038b4:	4605      	mov	r5, r0
 80038b6:	b1b8      	cbz	r0, 80038e8 <lv_obj_get_disp+0x7c>
 80038b8:	4f13      	ldr	r7, [pc, #76]	; (8003908 <lv_obj_get_disp+0x9c>)
        _LV_LL_READ(d->scr_ll, s) {
 80038ba:	f105 0638 	add.w	r6, r5, #56	; 0x38
 80038be:	4630      	mov	r0, r6
 80038c0:	f011 f954 	bl	8014b6c <_lv_ll_get_head>
 80038c4:	b928      	cbnz	r0, 80038d2 <lv_obj_get_disp+0x66>
 80038c6:	e008      	b.n	80038da <lv_obj_get_disp+0x6e>
 80038c8:	4601      	mov	r1, r0
 80038ca:	4630      	mov	r0, r6
 80038cc:	f011 f956 	bl	8014b7c <_lv_ll_get_next>
 80038d0:	b118      	cbz	r0, 80038da <lv_obj_get_disp+0x6e>
            if(s == scr) return d;
 80038d2:	4284      	cmp	r4, r0
 80038d4:	d1f8      	bne.n	80038c8 <lv_obj_get_disp+0x5c>
}
 80038d6:	4628      	mov	r0, r5
 80038d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    _LV_LL_READ(LV_GC_ROOT(_lv_disp_ll), d) {
 80038da:	4629      	mov	r1, r5
 80038dc:	4638      	mov	r0, r7
 80038de:	f011 f94d 	bl	8014b7c <_lv_ll_get_next>
 80038e2:	4605      	mov	r5, r0
 80038e4:	2800      	cmp	r0, #0
 80038e6:	d1e8      	bne.n	80038ba <lv_obj_get_disp+0x4e>
    return NULL;
 80038e8:	2500      	movs	r5, #0
 80038ea:	e7f4      	b.n	80038d6 <lv_obj_get_disp+0x6a>
 80038ec:	4603      	mov	r3, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80038ee:	4622      	mov	r2, r4
 80038f0:	4804      	ldr	r0, [pc, #16]	; (8003904 <lv_obj_get_disp+0x98>)
 80038f2:	f010 ff6d 	bl	80147d0 <lv_debug_log_error>
 80038f6:	e7fe      	b.n	80038f6 <lv_obj_get_disp+0x8a>
 80038f8:	4622      	mov	r2, r4
 80038fa:	4802      	ldr	r0, [pc, #8]	; (8003904 <lv_obj_get_disp+0x98>)
 80038fc:	f010 ff68 	bl	80147d0 <lv_debug_log_error>
 8003900:	e7fe      	b.n	8003900 <lv_obj_get_disp+0x94>
 8003902:	bf00      	nop
 8003904:	0801e1d4 	.word	0x0801e1d4
 8003908:	20020430 	.word	0x20020430

0800390c <lv_obj_area_is_visible>:
{
 800390c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003910:	b082      	sub	sp, #8
 8003912:	460e      	mov	r6, r1
 8003914:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8003916:	f010 ff57 	bl	80147c8 <lv_debug_check_null>
 800391a:	b308      	cbz	r0, 8003960 <lv_obj_area_is_visible+0x54>
    return obj->hidden == 0 ? false : true;
 800391c:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    if(lv_obj_get_hidden(obj)) return false;
 8003920:	06da      	lsls	r2, r3, #27
 8003922:	d504      	bpl.n	800392e <lv_obj_area_is_visible+0x22>
 8003924:	2500      	movs	r5, #0
}
 8003926:	4628      	mov	r0, r5
 8003928:	b002      	add	sp, #8
 800392a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 800392e:	4620      	mov	r0, r4
 8003930:	f010 ff4a 	bl	80147c8 <lv_debug_check_null>
 8003934:	b1d0      	cbz	r0, 800396c <lv_obj_area_is_visible+0x60>
 8003936:	4627      	mov	r7, r4
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8003938:	4638      	mov	r0, r7
 800393a:	f010 ff45 	bl	80147c8 <lv_debug_check_null>
 800393e:	4605      	mov	r5, r0
 8003940:	b140      	cbz	r0, 8003954 <lv_obj_area_is_visible+0x48>
    return obj->parent;
 8003942:	683b      	ldr	r3, [r7, #0]
    } while(par != NULL);
 8003944:	b1c3      	cbz	r3, 8003978 <lv_obj_area_is_visible+0x6c>
 8003946:	461f      	mov	r7, r3
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8003948:	4638      	mov	r0, r7
 800394a:	f010 ff3d 	bl	80147c8 <lv_debug_check_null>
 800394e:	4605      	mov	r5, r0
 8003950:	2800      	cmp	r0, #0
 8003952:	d1f6      	bne.n	8003942 <lv_obj_area_is_visible+0x36>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8003954:	4603      	mov	r3, r0
 8003956:	463a      	mov	r2, r7
 8003958:	483d      	ldr	r0, [pc, #244]	; (8003a50 <lv_obj_area_is_visible+0x144>)
 800395a:	f010 ff39 	bl	80147d0 <lv_debug_log_error>
 800395e:	e7fe      	b.n	800395e <lv_obj_area_is_visible+0x52>
 8003960:	4603      	mov	r3, r0
 8003962:	4622      	mov	r2, r4
 8003964:	483a      	ldr	r0, [pc, #232]	; (8003a50 <lv_obj_area_is_visible+0x144>)
 8003966:	f010 ff33 	bl	80147d0 <lv_debug_log_error>
 800396a:	e7fe      	b.n	800396a <lv_obj_area_is_visible+0x5e>
 800396c:	4603      	mov	r3, r0
 800396e:	4622      	mov	r2, r4
 8003970:	4837      	ldr	r0, [pc, #220]	; (8003a50 <lv_obj_area_is_visible+0x144>)
 8003972:	f010 ff2d 	bl	80147d0 <lv_debug_log_error>
 8003976:	e7fe      	b.n	8003976 <lv_obj_area_is_visible+0x6a>
    lv_disp_t * disp   = lv_obj_get_disp(obj_scr);
 8003978:	4638      	mov	r0, r7
 800397a:	f7ff ff77 	bl	800386c <lv_obj_get_disp>
 800397e:	4680      	mov	r8, r0
    if(obj_scr == lv_disp_get_scr_act(disp) ||
 8003980:	f7fd fdc4 	bl	800150c <lv_disp_get_scr_act>
 8003984:	4287      	cmp	r7, r0
 8003986:	d00e      	beq.n	80039a6 <lv_obj_area_is_visible+0x9a>
       obj_scr == lv_disp_get_scr_prev(disp) ||
 8003988:	4640      	mov	r0, r8
 800398a:	f7fd fdc9 	bl	8001520 <lv_disp_get_scr_prev>
    if(obj_scr == lv_disp_get_scr_act(disp) ||
 800398e:	4287      	cmp	r7, r0
 8003990:	d009      	beq.n	80039a6 <lv_obj_area_is_visible+0x9a>
       obj_scr == lv_disp_get_layer_top(disp) ||
 8003992:	4640      	mov	r0, r8
 8003994:	f7fd fdce 	bl	8001534 <lv_disp_get_layer_top>
       obj_scr == lv_disp_get_scr_prev(disp) ||
 8003998:	4287      	cmp	r7, r0
 800399a:	d004      	beq.n	80039a6 <lv_obj_area_is_visible+0x9a>
       obj_scr == lv_disp_get_layer_sys(disp)) {
 800399c:	4640      	mov	r0, r8
 800399e:	f7fd fdd3 	bl	8001548 <lv_disp_get_layer_sys>
       obj_scr == lv_disp_get_layer_top(disp) ||
 80039a2:	4287      	cmp	r7, r0
 80039a4:	d1bf      	bne.n	8003926 <lv_obj_area_is_visible+0x1a>
        lv_coord_t ext_size = obj->ext_draw_pad;
 80039a6:	4621      	mov	r1, r4
 80039a8:	466d      	mov	r5, sp
 80039aa:	f9b4 3032 	ldrsh.w	r3, [r4, #50]	; 0x32
LV_ATTRIBUTE_FAST_MEM static inline void * _lv_memcpy_small(void * dst, const void * src, size_t len)
{
    uint8_t * d8 = (uint8_t *)dst;
    const uint8_t * s8 = (const uint8_t *)src;

    while(len) {
 80039ae:	f851 0f10 	ldr.w	r0, [r1, #16]!
        is_common = _lv_area_intersect(area, area, &obj_coords);
 80039b2:	462a      	mov	r2, r5
        obj_coords.x1 -= ext_size;
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	6849      	ldr	r1, [r1, #4]
 80039b8:	c503      	stmia	r5!, {r0, r1}
        obj_coords.y1 -= ext_size;
 80039ba:	f8bd 0002 	ldrh.w	r0, [sp, #2]
        is_common = _lv_area_intersect(area, area, &obj_coords);
 80039be:	4631      	mov	r1, r6
        obj_coords.x1 -= ext_size;
 80039c0:	f8bd 7000 	ldrh.w	r7, [sp]
        obj_coords.x2 += ext_size;
 80039c4:	f8bd 5004 	ldrh.w	r5, [sp, #4]
        obj_coords.y1 -= ext_size;
 80039c8:	1ac0      	subs	r0, r0, r3
        obj_coords.y2 += ext_size;
 80039ca:	f8bd c006 	ldrh.w	ip, [sp, #6]
        obj_coords.x1 -= ext_size;
 80039ce:	1aff      	subs	r7, r7, r3
        obj_coords.x2 += ext_size;
 80039d0:	441d      	add	r5, r3
        obj_coords.y1 -= ext_size;
 80039d2:	f8ad 0002 	strh.w	r0, [sp, #2]
        obj_coords.y2 += ext_size;
 80039d6:	4463      	add	r3, ip
        is_common = _lv_area_intersect(area, area, &obj_coords);
 80039d8:	4630      	mov	r0, r6
        obj_coords.x1 -= ext_size;
 80039da:	f8ad 7000 	strh.w	r7, [sp]
        obj_coords.x2 += ext_size;
 80039de:	f8ad 5004 	strh.w	r5, [sp, #4]
        obj_coords.y2 += ext_size;
 80039e2:	f8ad 3006 	strh.w	r3, [sp, #6]
        is_common = _lv_area_intersect(area, area, &obj_coords);
 80039e6:	f010 faab 	bl	8013f40 <_lv_area_intersect>
        if(is_common == false) return false;  /*The area is not on the object*/
 80039ea:	2800      	cmp	r0, #0
 80039ec:	d09a      	beq.n	8003924 <lv_obj_area_is_visible+0x18>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80039ee:	4620      	mov	r0, r4
 80039f0:	f010 feea 	bl	80147c8 <lv_debug_check_null>
 80039f4:	4605      	mov	r5, r0
 80039f6:	b328      	cbz	r0, 8003a44 <lv_obj_area_is_visible+0x138>
    return obj->parent;
 80039f8:	6824      	ldr	r4, [r4, #0]
        while(par != NULL) {
 80039fa:	2c00      	cmp	r4, #0
 80039fc:	d093      	beq.n	8003926 <lv_obj_area_is_visible+0x1a>
            is_common = _lv_area_intersect(area, area, &par->coords);
 80039fe:	f104 0210 	add.w	r2, r4, #16
 8003a02:	4631      	mov	r1, r6
 8003a04:	4630      	mov	r0, r6
 8003a06:	f010 fa9b 	bl	8013f40 <_lv_area_intersect>
 8003a0a:	4603      	mov	r3, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8003a0c:	4620      	mov	r0, r4
            if(is_common == false) return false;       /*If no common parts with parent break;*/
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d088      	beq.n	8003924 <lv_obj_area_is_visible+0x18>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8003a12:	f010 fed9 	bl	80147c8 <lv_debug_check_null>
 8003a16:	4603      	mov	r3, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8003a18:	4620      	mov	r0, r4
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8003a1a:	b173      	cbz	r3, 8003a3a <lv_obj_area_is_visible+0x12e>
    return obj->hidden == 0 ? false : true;
 8003a1c:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
            if(lv_obj_get_hidden(par)) return false; /*If the parent is hidden then the child is hidden and won't be drawn*/
 8003a20:	06db      	lsls	r3, r3, #27
 8003a22:	f53f af7f 	bmi.w	8003924 <lv_obj_area_is_visible+0x18>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8003a26:	f010 fecf 	bl	80147c8 <lv_debug_check_null>
 8003a2a:	2800      	cmp	r0, #0
 8003a2c:	d1e4      	bne.n	80039f8 <lv_obj_area_is_visible+0xec>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8003a2e:	4603      	mov	r3, r0
 8003a30:	4622      	mov	r2, r4
 8003a32:	4807      	ldr	r0, [pc, #28]	; (8003a50 <lv_obj_area_is_visible+0x144>)
 8003a34:	f010 fecc 	bl	80147d0 <lv_debug_log_error>
 8003a38:	e7fe      	b.n	8003a38 <lv_obj_area_is_visible+0x12c>
 8003a3a:	4622      	mov	r2, r4
 8003a3c:	4804      	ldr	r0, [pc, #16]	; (8003a50 <lv_obj_area_is_visible+0x144>)
 8003a3e:	f010 fec7 	bl	80147d0 <lv_debug_log_error>
 8003a42:	e7fe      	b.n	8003a42 <lv_obj_area_is_visible+0x136>
 8003a44:	4603      	mov	r3, r0
 8003a46:	4622      	mov	r2, r4
 8003a48:	4801      	ldr	r0, [pc, #4]	; (8003a50 <lv_obj_area_is_visible+0x144>)
 8003a4a:	f010 fec1 	bl	80147d0 <lv_debug_log_error>
 8003a4e:	e7fe      	b.n	8003a4e <lv_obj_area_is_visible+0x142>
 8003a50:	0801e1d4 	.word	0x0801e1d4

08003a54 <obj_del_core>:
{
 8003a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(obj == NULL) return LV_RES_OK;
 8003a56:	4605      	mov	r5, r0
 8003a58:	b170      	cbz	r0, 8003a78 <obj_del_core+0x24>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8003a5a:	f010 feb5 	bl	80147c8 <lv_debug_check_null>
 8003a5e:	b928      	cbnz	r0, 8003a6c <obj_del_core+0x18>
 8003a60:	4603      	mov	r3, r0
 8003a62:	462a      	mov	r2, r5
 8003a64:	4848      	ldr	r0, [pc, #288]	; (8003b88 <obj_del_core+0x134>)
 8003a66:	f010 feb3 	bl	80147d0 <lv_debug_log_error>
 8003a6a:	e7fe      	b.n	8003a6a <obj_del_core+0x16>
    res = lv_event_send_func(obj->event_cb, obj, event, data);
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	2215      	movs	r2, #21
 8003a70:	4629      	mov	r1, r5
 8003a72:	69a8      	ldr	r0, [r5, #24]
 8003a74:	f7ff fe3a 	bl	80036ec <lv_event_send_func>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8003a78:	4628      	mov	r0, r5
 8003a7a:	f010 fea5 	bl	80147c8 <lv_debug_check_null>
 8003a7e:	2800      	cmp	r0, #0
 8003a80:	d042      	beq.n	8003b08 <obj_del_core+0xb4>
    return obj->group_p;
 8003a82:	6bae      	ldr	r6, [r5, #56]	; 0x38
    if(group) lv_group_remove_obj(obj);
 8003a84:	b116      	cbz	r6, 8003a8c <obj_del_core+0x38>
 8003a86:	4628      	mov	r0, r5
 8003a88:	f7fd fe5a 	bl	8001740 <lv_group_remove_obj>
    lv_anim_del(obj, NULL);
 8003a8c:	2100      	movs	r1, #0
 8003a8e:	4628      	mov	r0, r5
 8003a90:	f010 f99a 	bl	8013dc8 <lv_anim_del>
    trans_del(obj, 0xFF, 0xFF, NULL);
 8003a94:	22ff      	movs	r2, #255	; 0xff
    i = _lv_ll_get_head(&(obj->child_ll));
 8003a96:	1d2c      	adds	r4, r5, #4
    trans_del(obj, 0xFF, 0xFF, NULL);
 8003a98:	4628      	mov	r0, r5
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	4611      	mov	r1, r2
 8003a9e:	f7ff fc85 	bl	80033ac <trans_del>
    i = _lv_ll_get_head(&(obj->child_ll));
 8003aa2:	4620      	mov	r0, r4
 8003aa4:	f011 f862 	bl	8014b6c <_lv_ll_get_head>
    while(i != NULL) {
 8003aa8:	b130      	cbz	r0, 8003ab8 <obj_del_core+0x64>
        obj_del_core(i);
 8003aaa:	f7ff ffd3 	bl	8003a54 <obj_del_core>
        i = _lv_ll_get_head(&(obj->child_ll));
 8003aae:	4620      	mov	r0, r4
 8003ab0:	f011 f85c 	bl	8014b6c <_lv_ll_get_head>
    while(i != NULL) {
 8003ab4:	2800      	cmp	r0, #0
 8003ab6:	d1f8      	bne.n	8003aaa <obj_del_core+0x56>
    lv_event_temp_data_t * t = event_temp_data_head;
 8003ab8:	4b34      	ldr	r3, [pc, #208]	; (8003b8c <obj_del_core+0x138>)
 8003aba:	681b      	ldr	r3, [r3, #0]
    while(t) {
 8003abc:	b133      	cbz	r3, 8003acc <obj_del_core+0x78>
        if(t->obj == obj) t->deleted = true;
 8003abe:	2101      	movs	r1, #1
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	4295      	cmp	r5, r2
 8003ac4:	d026      	beq.n	8003b14 <obj_del_core+0xc0>
        t = t->prev;
 8003ac6:	689b      	ldr	r3, [r3, #8]
    while(t) {
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d1f9      	bne.n	8003ac0 <obj_del_core+0x6c>
    lv_indev_t * indev = lv_indev_get_next(NULL);
 8003acc:	2000      	movs	r0, #0
 8003ace:	f00f ffcf 	bl	8013a70 <lv_indev_get_next>
    while(indev) {
 8003ad2:	4604      	mov	r4, r0
 8003ad4:	b388      	cbz	r0, 8003b3a <obj_del_core+0xe6>
            indev->proc.types.pointer.last_pressed = NULL;
 8003ad6:	2700      	movs	r7, #0
 8003ad8:	e00b      	b.n	8003af2 <obj_del_core+0x9e>
        if(indev->proc.types.pointer.last_pressed == obj) {
 8003ada:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003adc:	42ab      	cmp	r3, r5
        if(indev->group == group && obj == lv_indev_get_obj_act()) {
 8003ade:	6da3      	ldr	r3, [r4, #88]	; 0x58
            indev->proc.types.pointer.last_pressed = NULL;
 8003ae0:	bf08      	it	eq
 8003ae2:	63e7      	streq	r7, [r4, #60]	; 0x3c
        if(indev->group == group && obj == lv_indev_get_obj_act()) {
 8003ae4:	42b3      	cmp	r3, r6
 8003ae6:	d01a      	beq.n	8003b1e <obj_del_core+0xca>
        indev = lv_indev_get_next(indev);
 8003ae8:	4620      	mov	r0, r4
 8003aea:	f00f ffc1 	bl	8013a70 <lv_indev_get_next>
    while(indev) {
 8003aee:	4604      	mov	r4, r0
 8003af0:	b318      	cbz	r0, 8003b3a <obj_del_core+0xe6>
        if(indev->proc.types.pointer.act_obj == obj || indev->proc.types.pointer.last_obj == obj) {
 8003af2:	6b63      	ldr	r3, [r4, #52]	; 0x34
            lv_indev_reset(indev, obj);
 8003af4:	4629      	mov	r1, r5
 8003af6:	4620      	mov	r0, r4
        if(indev->proc.types.pointer.act_obj == obj || indev->proc.types.pointer.last_obj == obj) {
 8003af8:	42ab      	cmp	r3, r5
 8003afa:	d002      	beq.n	8003b02 <obj_del_core+0xae>
 8003afc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003afe:	42ab      	cmp	r3, r5
 8003b00:	d1eb      	bne.n	8003ada <obj_del_core+0x86>
            lv_indev_reset(indev, obj);
 8003b02:	f7fe f953 	bl	8001dac <lv_indev_reset>
 8003b06:	e7e8      	b.n	8003ada <obj_del_core+0x86>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8003b08:	4603      	mov	r3, r0
 8003b0a:	462a      	mov	r2, r5
 8003b0c:	481e      	ldr	r0, [pc, #120]	; (8003b88 <obj_del_core+0x134>)
 8003b0e:	f010 fe5f 	bl	80147d0 <lv_debug_log_error>
 8003b12:	e7fe      	b.n	8003b12 <obj_del_core+0xbe>
        if(t->obj == obj) t->deleted = true;
 8003b14:	7119      	strb	r1, [r3, #4]
        t = t->prev;
 8003b16:	689b      	ldr	r3, [r3, #8]
    while(t) {
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d1d1      	bne.n	8003ac0 <obj_del_core+0x6c>
 8003b1c:	e7d6      	b.n	8003acc <obj_del_core+0x78>
        if(indev->group == group && obj == lv_indev_get_obj_act()) {
 8003b1e:	f7fe f9af 	bl	8001e80 <lv_indev_get_obj_act>
 8003b22:	4285      	cmp	r5, r0
 8003b24:	d1e0      	bne.n	8003ae8 <obj_del_core+0x94>
            lv_indev_reset(indev, obj);
 8003b26:	4620      	mov	r0, r4
 8003b28:	4629      	mov	r1, r5
 8003b2a:	f7fe f93f 	bl	8001dac <lv_indev_reset>
        indev = lv_indev_get_next(indev);
 8003b2e:	4620      	mov	r0, r4
 8003b30:	f00f ff9e 	bl	8013a70 <lv_indev_get_next>
    while(indev) {
 8003b34:	4604      	mov	r4, r0
 8003b36:	2800      	cmp	r0, #0
 8003b38:	d1db      	bne.n	8003af2 <obj_del_core+0x9e>
    obj->signal_cb(obj, LV_SIGNAL_CLEANUP, NULL);
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	69eb      	ldr	r3, [r5, #28]
 8003b3e:	4628      	mov	r0, r5
 8003b40:	4611      	mov	r1, r2
 8003b42:	4798      	blx	r3
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8003b44:	4628      	mov	r0, r5
 8003b46:	f010 fe3f 	bl	80147c8 <lv_debug_check_null>
 8003b4a:	b170      	cbz	r0, 8003b6a <obj_del_core+0x116>
    return obj->parent;
 8003b4c:	6828      	ldr	r0, [r5, #0]
    if(par == NULL) { /*It is a screen*/
 8003b4e:	b190      	cbz	r0, 8003b76 <obj_del_core+0x122>
        _lv_ll_remove(&(par->child_ll), obj);
 8003b50:	3004      	adds	r0, #4
 8003b52:	4629      	mov	r1, r5
 8003b54:	f010 ff8e 	bl	8014a74 <_lv_ll_remove>
    if(obj->ext_attr != NULL) lv_mem_free(obj->ext_attr);
 8003b58:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8003b5a:	b108      	cbz	r0, 8003b60 <obj_del_core+0x10c>
 8003b5c:	f011 f966 	bl	8014e2c <lv_mem_free>
    lv_mem_free(obj); /*Free the object itself*/
 8003b60:	4628      	mov	r0, r5
}
 8003b62:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    lv_mem_free(obj); /*Free the object itself*/
 8003b66:	f011 b961 	b.w	8014e2c <lv_mem_free>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	462a      	mov	r2, r5
 8003b6e:	4806      	ldr	r0, [pc, #24]	; (8003b88 <obj_del_core+0x134>)
 8003b70:	f010 fe2e 	bl	80147d0 <lv_debug_log_error>
 8003b74:	e7fe      	b.n	8003b74 <obj_del_core+0x120>
        lv_disp_t * d = lv_obj_get_disp(obj);
 8003b76:	4628      	mov	r0, r5
 8003b78:	f7ff fe78 	bl	800386c <lv_obj_get_disp>
        _lv_ll_remove(&d->scr_ll, obj);
 8003b7c:	4629      	mov	r1, r5
 8003b7e:	3038      	adds	r0, #56	; 0x38
 8003b80:	f010 ff78 	bl	8014a74 <_lv_ll_remove>
 8003b84:	e7e8      	b.n	8003b58 <obj_del_core+0x104>
 8003b86:	bf00      	nop
 8003b88:	0801e1d4 	.word	0x0801e1d4
 8003b8c:	20017894 	.word	0x20017894

08003b90 <lv_obj_invalidate>:
{
 8003b90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b92:	b087      	sub	sp, #28
 8003b94:	9001      	str	r0, [sp, #4]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8003b96:	f010 fe17 	bl	80147c8 <lv_debug_check_null>
 8003b9a:	9a01      	ldr	r2, [sp, #4]
 8003b9c:	2800      	cmp	r0, #0
 8003b9e:	d036      	beq.n	8003c0e <lv_obj_invalidate+0x7e>
    lv_coord_t ext_size = obj->ext_draw_pad;
 8003ba0:	4611      	mov	r1, r2
 8003ba2:	ad02      	add	r5, sp, #8
 8003ba4:	f9b2 3032 	ldrsh.w	r3, [r2, #50]	; 0x32
 8003ba8:	f851 0f10 	ldr.w	r0, [r1, #16]!
 8003bac:	462c      	mov	r4, r5
    obj_coords.x1 -= ext_size;
 8003bae:	b29b      	uxth	r3, r3
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8003bb0:	9201      	str	r2, [sp, #4]
 8003bb2:	6849      	ldr	r1, [r1, #4]
 8003bb4:	c403      	stmia	r4!, {r0, r1}
    obj_coords.x1 -= ext_size;
 8003bb6:	f8bd 6008 	ldrh.w	r6, [sp, #8]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8003bba:	4610      	mov	r0, r2
    obj_coords.y1 -= ext_size;
 8003bbc:	f8bd 400a 	ldrh.w	r4, [sp, #10]
    obj_coords.x2 += ext_size;
 8003bc0:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    obj_coords.x1 -= ext_size;
 8003bc4:	1af6      	subs	r6, r6, r3
    obj_coords.y2 += ext_size;
 8003bc6:	f8bd 700e 	ldrh.w	r7, [sp, #14]
    obj_coords.y1 -= ext_size;
 8003bca:	1ae4      	subs	r4, r4, r3
    obj_coords.x2 += ext_size;
 8003bcc:	4419      	add	r1, r3
    obj_coords.x1 -= ext_size;
 8003bce:	f8ad 6008 	strh.w	r6, [sp, #8]
    obj_coords.y2 += ext_size;
 8003bd2:	443b      	add	r3, r7
    obj_coords.y1 -= ext_size;
 8003bd4:	f8ad 400a 	strh.w	r4, [sp, #10]
    obj_coords.x2 += ext_size;
 8003bd8:	f8ad 100c 	strh.w	r1, [sp, #12]
    obj_coords.y2 += ext_size;
 8003bdc:	f8ad 300e 	strh.w	r3, [sp, #14]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8003be0:	f010 fdf2 	bl	80147c8 <lv_debug_check_null>
 8003be4:	9a01      	ldr	r2, [sp, #4]
 8003be6:	4603      	mov	r3, r0
 8003be8:	b168      	cbz	r0, 8003c06 <lv_obj_invalidate+0x76>
 8003bea:	ac04      	add	r4, sp, #16
    bool visible = lv_obj_area_is_visible(obj, &area_tmp);
 8003bec:	9201      	str	r2, [sp, #4]
 8003bee:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003bf2:	e884 0003 	stmia.w	r4, {r0, r1}
 8003bf6:	4610      	mov	r0, r2
 8003bf8:	4621      	mov	r1, r4
 8003bfa:	f7ff fe87 	bl	800390c <lv_obj_area_is_visible>
    if(visible) _lv_inv_area(lv_obj_get_disp(obj), &area_tmp);
 8003bfe:	9a01      	ldr	r2, [sp, #4]
 8003c00:	b950      	cbnz	r0, 8003c18 <lv_obj_invalidate+0x88>
}
 8003c02:	b007      	add	sp, #28
 8003c04:	bdf0      	pop	{r4, r5, r6, r7, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8003c06:	4808      	ldr	r0, [pc, #32]	; (8003c28 <lv_obj_invalidate+0x98>)
 8003c08:	f010 fde2 	bl	80147d0 <lv_debug_log_error>
 8003c0c:	e7fe      	b.n	8003c0c <lv_obj_invalidate+0x7c>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	4805      	ldr	r0, [pc, #20]	; (8003c28 <lv_obj_invalidate+0x98>)
 8003c12:	f010 fddd 	bl	80147d0 <lv_debug_log_error>
 8003c16:	e7fe      	b.n	8003c16 <lv_obj_invalidate+0x86>
    if(visible) _lv_inv_area(lv_obj_get_disp(obj), &area_tmp);
 8003c18:	4610      	mov	r0, r2
 8003c1a:	f7ff fe27 	bl	800386c <lv_obj_get_disp>
 8003c1e:	4621      	mov	r1, r4
 8003c20:	f004 fae6 	bl	80081f0 <_lv_inv_area>
}
 8003c24:	b007      	add	sp, #28
 8003c26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c28:	0801e1d4 	.word	0x0801e1d4

08003c2c <lv_obj_move_foreground>:
{
 8003c2c:	b530      	push	{r4, r5, lr}
 8003c2e:	b083      	sub	sp, #12
 8003c30:	9001      	str	r0, [sp, #4]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8003c32:	f010 fdc9 	bl	80147c8 <lv_debug_check_null>
 8003c36:	9a01      	ldr	r2, [sp, #4]
 8003c38:	b920      	cbnz	r0, 8003c44 <lv_obj_move_foreground+0x18>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	4816      	ldr	r0, [pc, #88]	; (8003c98 <lv_obj_move_foreground+0x6c>)
 8003c3e:	f010 fdc7 	bl	80147d0 <lv_debug_log_error>
 8003c42:	e7fe      	b.n	8003c42 <lv_obj_move_foreground+0x16>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8003c44:	4610      	mov	r0, r2
 8003c46:	9201      	str	r2, [sp, #4]
 8003c48:	f010 fdbe 	bl	80147c8 <lv_debug_check_null>
 8003c4c:	9a01      	ldr	r2, [sp, #4]
 8003c4e:	4603      	mov	r3, r0
 8003c50:	b1f0      	cbz	r0, 8003c90 <lv_obj_move_foreground+0x64>
    return obj->parent;
 8003c52:	6814      	ldr	r4, [r2, #0]
 8003c54:	9201      	str	r2, [sp, #4]
    if(_lv_ll_get_head(&parent->child_ll) == obj) return;
 8003c56:	1d25      	adds	r5, r4, #4
 8003c58:	4628      	mov	r0, r5
 8003c5a:	f010 ff87 	bl	8014b6c <_lv_ll_get_head>
 8003c5e:	9a01      	ldr	r2, [sp, #4]
 8003c60:	4282      	cmp	r2, r0
 8003c62:	d013      	beq.n	8003c8c <lv_obj_move_foreground+0x60>
    lv_obj_invalidate(parent);
 8003c64:	4620      	mov	r0, r4
 8003c66:	f7ff ff93 	bl	8003b90 <lv_obj_invalidate>
    _lv_ll_chg_list(&parent->child_ll, &parent->child_ll, obj, true);
 8003c6a:	9a01      	ldr	r2, [sp, #4]
 8003c6c:	4629      	mov	r1, r5
 8003c6e:	4628      	mov	r0, r5
 8003c70:	2301      	movs	r3, #1
 8003c72:	f010 ff2b 	bl	8014acc <_lv_ll_chg_list>
    parent->signal_cb(parent, LV_SIGNAL_CHILD_CHG, obj);
 8003c76:	9a01      	ldr	r2, [sp, #4]
 8003c78:	69e3      	ldr	r3, [r4, #28]
 8003c7a:	2101      	movs	r1, #1
 8003c7c:	4620      	mov	r0, r4
 8003c7e:	4798      	blx	r3
    lv_obj_invalidate(parent);
 8003c80:	4620      	mov	r0, r4
}
 8003c82:	b003      	add	sp, #12
 8003c84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    lv_obj_invalidate(parent);
 8003c88:	f7ff bf82 	b.w	8003b90 <lv_obj_invalidate>
}
 8003c8c:	b003      	add	sp, #12
 8003c8e:	bd30      	pop	{r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8003c90:	4801      	ldr	r0, [pc, #4]	; (8003c98 <lv_obj_move_foreground+0x6c>)
 8003c92:	f010 fd9d 	bl	80147d0 <lv_debug_log_error>
 8003c96:	e7fe      	b.n	8003c96 <lv_obj_move_foreground+0x6a>
 8003c98:	0801e1d4 	.word	0x0801e1d4

08003c9c <lv_obj_set_pos.part.0>:
void lv_obj_set_pos(lv_obj_t * obj, lv_coord_t x, lv_coord_t y)
 8003c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_obj_t * par = obj->parent;
 8003ca0:	6807      	ldr	r7, [r0, #0]
void lv_obj_set_pos(lv_obj_t * obj, lv_coord_t x, lv_coord_t y)
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	4605      	mov	r5, r0
    if(par) {
 8003ca6:	2f00      	cmp	r7, #0
 8003ca8:	d066      	beq.n	8003d78 <lv_obj_set_pos.part.0+0xdc>
        x = x + par->coords.x1;
 8003caa:	f8b7 8010 	ldrh.w	r8, [r7, #16]
        y = y + par->coords.y1;
 8003cae:	8a7e      	ldrh	r6, [r7, #18]
        x = x + par->coords.x1;
 8003cb0:	4441      	add	r1, r8
        y = y + par->coords.y1;
 8003cb2:	4416      	add	r6, r2
        x = x + par->coords.x1;
 8003cb4:	fa1f f881 	uxth.w	r8, r1
        y = y + par->coords.y1;
 8003cb8:	b2b6      	uxth	r6, r6
    diff.x = x - obj->coords.x1;
 8003cba:	8a29      	ldrh	r1, [r5, #16]
    diff.y = y - obj->coords.y1;
 8003cbc:	8a6a      	ldrh	r2, [r5, #18]
    diff.x = x - obj->coords.x1;
 8003cbe:	eba8 0801 	sub.w	r8, r8, r1
    diff.y = y - obj->coords.y1;
 8003cc2:	1ab6      	subs	r6, r6, r2
    diff.x = x - obj->coords.x1;
 8003cc4:	fa1f f888 	uxth.w	r8, r8
    diff.y = y - obj->coords.y1;
 8003cc8:	b2b6      	uxth	r6, r6
    if(diff.x == 0 && diff.y == 0) return;
 8003cca:	ea58 0306 	orrs.w	r3, r8, r6
 8003cce:	d050      	beq.n	8003d72 <lv_obj_set_pos.part.0+0xd6>
    lv_obj_invalidate(obj);
 8003cd0:	4628      	mov	r0, r5
 8003cd2:	f7ff ff5d 	bl	8003b90 <lv_obj_invalidate>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8003cd6:	4628      	mov	r0, r5
 8003cd8:	f010 fd76 	bl	80147c8 <lv_debug_check_null>
 8003cdc:	2800      	cmp	r0, #0
 8003cde:	d04f      	beq.n	8003d80 <lv_obj_set_pos.part.0+0xe4>
    obj->coords.x1 += diff.x;
 8003ce0:	8a2a      	ldrh	r2, [r5, #16]
 8003ce2:	4629      	mov	r1, r5
    obj->coords.y1 += diff.y;
 8003ce4:	f8b5 c012 	ldrh.w	ip, [r5, #18]
 8003ce8:	466b      	mov	r3, sp
 8003cea:	f851 0f10 	ldr.w	r0, [r1, #16]!
    obj->coords.x1 += diff.x;
 8003cee:	4442      	add	r2, r8
    obj->coords.x2 += diff.x;
 8003cf0:	8aac      	ldrh	r4, [r5, #20]
    obj->coords.y1 += diff.y;
 8003cf2:	44b4      	add	ip, r6
 8003cf4:	6849      	ldr	r1, [r1, #4]
    _LV_LL_READ(obj->child_ll, i) {
 8003cf6:	f105 0904 	add.w	r9, r5, #4
    obj->coords.x1 += diff.x;
 8003cfa:	822a      	strh	r2, [r5, #16]
    obj->coords.x2 += diff.x;
 8003cfc:	4444      	add	r4, r8
    obj->coords.y2 += diff.y;
 8003cfe:	8aea      	ldrh	r2, [r5, #22]
    obj->coords.x2 += diff.x;
 8003d00:	82ac      	strh	r4, [r5, #20]
    obj->coords.y2 += diff.y;
 8003d02:	4432      	add	r2, r6
    obj->coords.y1 += diff.y;
 8003d04:	f8a5 c012 	strh.w	ip, [r5, #18]
 8003d08:	c303      	stmia	r3!, {r0, r1}
    obj->coords.y2 += diff.y;
 8003d0a:	82ea      	strh	r2, [r5, #22]
    _LV_LL_READ(obj->child_ll, i) {
 8003d0c:	4648      	mov	r0, r9
 8003d0e:	f010 ff2d 	bl	8014b6c <_lv_ll_get_head>
 8003d12:	4604      	mov	r4, r0
 8003d14:	b1f8      	cbz	r0, 8003d56 <lv_obj_set_pos.part.0+0xba>
    diff.x = x - obj->coords.x1;
 8003d16:	fa0f fa88 	sxth.w	sl, r8
    diff.y = y - obj->coords.y1;
 8003d1a:	fa0f fb86 	sxth.w	fp, r6
        i->coords.x1 += x_diff;
 8003d1e:	f8b4 e010 	ldrh.w	lr, [r4, #16]
        refresh_children_position(i, x_diff, y_diff);
 8003d22:	465a      	mov	r2, fp
        i->coords.y1 += y_diff;
 8003d24:	f8b4 c012 	ldrh.w	ip, [r4, #18]
        refresh_children_position(i, x_diff, y_diff);
 8003d28:	4651      	mov	r1, sl
        i->coords.x2 += x_diff;
 8003d2a:	8aa0      	ldrh	r0, [r4, #20]
        i->coords.x1 += x_diff;
 8003d2c:	44c6      	add	lr, r8
        i->coords.y2 += y_diff;
 8003d2e:	8ae3      	ldrh	r3, [r4, #22]
        i->coords.y1 += y_diff;
 8003d30:	44b4      	add	ip, r6
        i->coords.x2 += x_diff;
 8003d32:	4440      	add	r0, r8
        i->coords.x1 += x_diff;
 8003d34:	f8a4 e010 	strh.w	lr, [r4, #16]
        i->coords.y2 += y_diff;
 8003d38:	4433      	add	r3, r6
        i->coords.y1 += y_diff;
 8003d3a:	f8a4 c012 	strh.w	ip, [r4, #18]
        i->coords.x2 += x_diff;
 8003d3e:	82a0      	strh	r0, [r4, #20]
        refresh_children_position(i, x_diff, y_diff);
 8003d40:	4620      	mov	r0, r4
        i->coords.y2 += y_diff;
 8003d42:	82e3      	strh	r3, [r4, #22]
        refresh_children_position(i, x_diff, y_diff);
 8003d44:	f7ff fb08 	bl	8003358 <refresh_children_position>
    _LV_LL_READ(obj->child_ll, i) {
 8003d48:	4621      	mov	r1, r4
 8003d4a:	4648      	mov	r0, r9
 8003d4c:	f010 ff16 	bl	8014b7c <_lv_ll_get_next>
 8003d50:	4604      	mov	r4, r0
 8003d52:	2800      	cmp	r0, #0
 8003d54:	d1e3      	bne.n	8003d1e <lv_obj_set_pos.part.0+0x82>
    obj->signal_cb(obj, LV_SIGNAL_COORD_CHG, &ori);
 8003d56:	466a      	mov	r2, sp
 8003d58:	69eb      	ldr	r3, [r5, #28]
 8003d5a:	2102      	movs	r1, #2
 8003d5c:	4628      	mov	r0, r5
 8003d5e:	4798      	blx	r3
    if(par) par->signal_cb(par, LV_SIGNAL_CHILD_CHG, obj);
 8003d60:	b127      	cbz	r7, 8003d6c <lv_obj_set_pos.part.0+0xd0>
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	4638      	mov	r0, r7
 8003d66:	462a      	mov	r2, r5
 8003d68:	2101      	movs	r1, #1
 8003d6a:	4798      	blx	r3
    lv_obj_invalidate(obj);
 8003d6c:	4628      	mov	r0, r5
 8003d6e:	f7ff ff0f 	bl	8003b90 <lv_obj_invalidate>
}
 8003d72:	b003      	add	sp, #12
 8003d74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d78:	fa1f f881 	uxth.w	r8, r1
 8003d7c:	b296      	uxth	r6, r2
 8003d7e:	e79c      	b.n	8003cba <lv_obj_set_pos.part.0+0x1e>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8003d80:	4603      	mov	r3, r0
 8003d82:	462a      	mov	r2, r5
 8003d84:	4801      	ldr	r0, [pc, #4]	; (8003d8c <lv_obj_set_pos.part.0+0xf0>)
 8003d86:	f010 fd23 	bl	80147d0 <lv_debug_log_error>
 8003d8a:	e7fe      	b.n	8003d8a <lv_obj_set_pos.part.0+0xee>
 8003d8c:	0801e1d4 	.word	0x0801e1d4

08003d90 <lv_obj_set_pos>:
{
 8003d90:	b510      	push	{r4, lr}
 8003d92:	b082      	sub	sp, #8
 8003d94:	4604      	mov	r4, r0
 8003d96:	e9cd 2100 	strd	r2, r1, [sp]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8003d9a:	f010 fd15 	bl	80147c8 <lv_debug_check_null>
 8003d9e:	e9dd 2100 	ldrd	r2, r1, [sp]
 8003da2:	b128      	cbz	r0, 8003db0 <lv_obj_set_pos+0x20>
 8003da4:	4620      	mov	r0, r4
}
 8003da6:	b002      	add	sp, #8
 8003da8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003dac:	f7ff bf76 	b.w	8003c9c <lv_obj_set_pos.part.0>
 8003db0:	4603      	mov	r3, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8003db2:	4622      	mov	r2, r4
 8003db4:	4801      	ldr	r0, [pc, #4]	; (8003dbc <lv_obj_set_pos+0x2c>)
 8003db6:	f010 fd0b 	bl	80147d0 <lv_debug_log_error>
 8003dba:	e7fe      	b.n	8003dba <lv_obj_set_pos+0x2a>
 8003dbc:	0801e1d4 	.word	0x0801e1d4

08003dc0 <lv_obj_set_x>:
{
 8003dc0:	b570      	push	{r4, r5, r6, lr}
 8003dc2:	460e      	mov	r6, r1
 8003dc4:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8003dc6:	f010 fcff 	bl	80147c8 <lv_debug_check_null>
 8003dca:	b928      	cbnz	r0, 8003dd8 <lv_obj_set_x+0x18>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	4622      	mov	r2, r4
 8003dd0:	4818      	ldr	r0, [pc, #96]	; (8003e34 <lv_obj_set_x+0x74>)
 8003dd2:	f010 fcfd 	bl	80147d0 <lv_debug_log_error>
 8003dd6:	e7fe      	b.n	8003dd6 <lv_obj_set_x+0x16>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8003dd8:	4620      	mov	r0, r4
 8003dda:	f010 fcf5 	bl	80147c8 <lv_debug_check_null>
 8003dde:	4603      	mov	r3, r0
 8003de0:	b920      	cbnz	r0, 8003dec <lv_obj_set_x+0x2c>
 8003de2:	4622      	mov	r2, r4
 8003de4:	4813      	ldr	r0, [pc, #76]	; (8003e34 <lv_obj_set_x+0x74>)
 8003de6:	f010 fcf3 	bl	80147d0 <lv_debug_log_error>
 8003dea:	e7fe      	b.n	8003dea <lv_obj_set_x+0x2a>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8003dec:	4620      	mov	r0, r4
 8003dee:	f010 fceb 	bl	80147c8 <lv_debug_check_null>
 8003df2:	4603      	mov	r3, r0
 8003df4:	b188      	cbz	r0, 8003e1a <lv_obj_set_x+0x5a>
    return obj->parent;
 8003df6:	6823      	ldr	r3, [r4, #0]
    if(parent) {
 8003df8:	b1a3      	cbz	r3, 8003e24 <lv_obj_set_x+0x64>
        rel_y             = obj->coords.y1 - parent->coords.y1;
 8003dfa:	8a5b      	ldrh	r3, [r3, #18]
 8003dfc:	8a65      	ldrh	r5, [r4, #18]
 8003dfe:	1aed      	subs	r5, r5, r3
 8003e00:	b22d      	sxth	r5, r5
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8003e02:	4620      	mov	r0, r4
 8003e04:	f010 fce0 	bl	80147c8 <lv_debug_check_null>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	b170      	cbz	r0, 8003e2a <lv_obj_set_x+0x6a>
 8003e0c:	462a      	mov	r2, r5
 8003e0e:	4631      	mov	r1, r6
 8003e10:	4620      	mov	r0, r4
}
 8003e12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003e16:	f7ff bf41 	b.w	8003c9c <lv_obj_set_pos.part.0>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8003e1a:	4622      	mov	r2, r4
 8003e1c:	4805      	ldr	r0, [pc, #20]	; (8003e34 <lv_obj_set_x+0x74>)
 8003e1e:	f010 fcd7 	bl	80147d0 <lv_debug_log_error>
 8003e22:	e7fe      	b.n	8003e22 <lv_obj_set_x+0x62>
        rel_y = obj->coords.y1;
 8003e24:	f9b4 5012 	ldrsh.w	r5, [r4, #18]
 8003e28:	e7eb      	b.n	8003e02 <lv_obj_set_x+0x42>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8003e2a:	4622      	mov	r2, r4
 8003e2c:	4801      	ldr	r0, [pc, #4]	; (8003e34 <lv_obj_set_x+0x74>)
 8003e2e:	f010 fccf 	bl	80147d0 <lv_debug_log_error>
 8003e32:	e7fe      	b.n	8003e32 <lv_obj_set_x+0x72>
 8003e34:	0801e1d4 	.word	0x0801e1d4

08003e38 <lv_obj_set_y>:
{
 8003e38:	b570      	push	{r4, r5, r6, lr}
 8003e3a:	460e      	mov	r6, r1
 8003e3c:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8003e3e:	f010 fcc3 	bl	80147c8 <lv_debug_check_null>
 8003e42:	b928      	cbnz	r0, 8003e50 <lv_obj_set_y+0x18>
 8003e44:	4603      	mov	r3, r0
 8003e46:	4622      	mov	r2, r4
 8003e48:	4818      	ldr	r0, [pc, #96]	; (8003eac <lv_obj_set_y+0x74>)
 8003e4a:	f010 fcc1 	bl	80147d0 <lv_debug_log_error>
 8003e4e:	e7fe      	b.n	8003e4e <lv_obj_set_y+0x16>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8003e50:	4620      	mov	r0, r4
 8003e52:	f010 fcb9 	bl	80147c8 <lv_debug_check_null>
 8003e56:	4603      	mov	r3, r0
 8003e58:	b920      	cbnz	r0, 8003e64 <lv_obj_set_y+0x2c>
 8003e5a:	4622      	mov	r2, r4
 8003e5c:	4813      	ldr	r0, [pc, #76]	; (8003eac <lv_obj_set_y+0x74>)
 8003e5e:	f010 fcb7 	bl	80147d0 <lv_debug_log_error>
 8003e62:	e7fe      	b.n	8003e62 <lv_obj_set_y+0x2a>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8003e64:	4620      	mov	r0, r4
 8003e66:	f010 fcaf 	bl	80147c8 <lv_debug_check_null>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	b188      	cbz	r0, 8003e92 <lv_obj_set_y+0x5a>
    return obj->parent;
 8003e6e:	6823      	ldr	r3, [r4, #0]
    if(parent) {
 8003e70:	b1a3      	cbz	r3, 8003e9c <lv_obj_set_y+0x64>
        rel_x             = obj->coords.x1 - parent->coords.x1;
 8003e72:	8a1b      	ldrh	r3, [r3, #16]
 8003e74:	8a25      	ldrh	r5, [r4, #16]
 8003e76:	1aed      	subs	r5, r5, r3
 8003e78:	b22d      	sxth	r5, r5
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8003e7a:	4620      	mov	r0, r4
 8003e7c:	f010 fca4 	bl	80147c8 <lv_debug_check_null>
 8003e80:	4603      	mov	r3, r0
 8003e82:	b170      	cbz	r0, 8003ea2 <lv_obj_set_y+0x6a>
 8003e84:	4632      	mov	r2, r6
 8003e86:	4629      	mov	r1, r5
 8003e88:	4620      	mov	r0, r4
}
 8003e8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003e8e:	f7ff bf05 	b.w	8003c9c <lv_obj_set_pos.part.0>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8003e92:	4622      	mov	r2, r4
 8003e94:	4805      	ldr	r0, [pc, #20]	; (8003eac <lv_obj_set_y+0x74>)
 8003e96:	f010 fc9b 	bl	80147d0 <lv_debug_log_error>
 8003e9a:	e7fe      	b.n	8003e9a <lv_obj_set_y+0x62>
        rel_x = obj->coords.x1;
 8003e9c:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
 8003ea0:	e7eb      	b.n	8003e7a <lv_obj_set_y+0x42>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8003ea2:	4622      	mov	r2, r4
 8003ea4:	4801      	ldr	r0, [pc, #4]	; (8003eac <lv_obj_set_y+0x74>)
 8003ea6:	f010 fc93 	bl	80147d0 <lv_debug_log_error>
 8003eaa:	e7fe      	b.n	8003eaa <lv_obj_set_y+0x72>
 8003eac:	0801e1d4 	.word	0x0801e1d4

08003eb0 <lv_obj_align>:
{
 8003eb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003eb4:	b082      	sub	sp, #8
 8003eb6:	460d      	mov	r5, r1
 8003eb8:	4690      	mov	r8, r2
 8003eba:	461f      	mov	r7, r3
 8003ebc:	4604      	mov	r4, r0
 8003ebe:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8003ec2:	f010 fc81 	bl	80147c8 <lv_debug_check_null>
 8003ec6:	2800      	cmp	r0, #0
 8003ec8:	d047      	beq.n	8003f5a <lv_obj_align+0xaa>
    if(base == NULL) base = lv_obj_get_parent(obj);
 8003eca:	2d00      	cmp	r5, #0
 8003ecc:	d050      	beq.n	8003f70 <lv_obj_align+0xc0>
    LV_ASSERT_OBJ(base, LV_OBJX_NAME);
 8003ece:	4628      	mov	r0, r5
 8003ed0:	f010 fc7a 	bl	80147c8 <lv_debug_check_null>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2800      	cmp	r0, #0
 8003ed8:	d03a      	beq.n	8003f50 <lv_obj_align+0xa0>
    _lv_area_align(&base->coords, &obj->coords, align, &new_pos);
 8003eda:	ab01      	add	r3, sp, #4
 8003edc:	4642      	mov	r2, r8
 8003ede:	f104 0110 	add.w	r1, r4, #16
 8003ee2:	f105 0010 	add.w	r0, r5, #16
 8003ee6:	f010 f9eb 	bl	80142c0 <_lv_area_align>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8003eea:	4620      	mov	r0, r4
 8003eec:	f010 fc6c 	bl	80147c8 <lv_debug_check_null>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	b3c0      	cbz	r0, 8003f66 <lv_obj_align+0xb6>
    return obj->parent;
 8003ef4:	6823      	ldr	r3, [r4, #0]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8003ef6:	4620      	mov	r0, r4
    new_pos.x += x_ofs;
 8003ef8:	f8bd 6004 	ldrh.w	r6, [sp, #4]
    new_pos.y += y_ofs;
 8003efc:	f8bd a006 	ldrh.w	sl, [sp, #6]
    lv_coord_t par_abs_y  = par->coords.y1;
 8003f00:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
    new_pos.x += x_ofs;
 8003f04:	443e      	add	r6, r7
    new_pos.x -= par_abs_x;
 8003f06:	8a1b      	ldrh	r3, [r3, #16]
    new_pos.y += y_ofs;
 8003f08:	44ca      	add	sl, r9
    new_pos.x -= par_abs_x;
 8003f0a:	1af6      	subs	r6, r6, r3
    new_pos.y -= par_abs_y;
 8003f0c:	ebaa 0a02 	sub.w	sl, sl, r2
    new_pos.x -= par_abs_x;
 8003f10:	b236      	sxth	r6, r6
    new_pos.y -= par_abs_y;
 8003f12:	fa0f fa8a 	sxth.w	sl, sl
    new_pos.x -= par_abs_x;
 8003f16:	f8ad 6004 	strh.w	r6, [sp, #4]
    new_pos.y -= par_abs_y;
 8003f1a:	f8ad a006 	strh.w	sl, [sp, #6]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8003f1e:	f010 fc53 	bl	80147c8 <lv_debug_check_null>
 8003f22:	4603      	mov	r3, r0
 8003f24:	b358      	cbz	r0, 8003f7e <lv_obj_align+0xce>
 8003f26:	4652      	mov	r2, sl
 8003f28:	4631      	mov	r1, r6
 8003f2a:	4620      	mov	r0, r4
 8003f2c:	f7ff feb6 	bl	8003c9c <lv_obj_set_pos.part.0>
    obj->realign.mid_align = 0;
 8003f30:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
    obj->realign.align       = align;
 8003f34:	f884 8048 	strb.w	r8, [r4, #72]	; 0x48
    obj->realign.mid_align = 0;
 8003f38:	f36f 0341 	bfc	r3, #1, #1
    obj->realign.xofs        = x_ofs;
 8003f3c:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
    obj->realign.yofs        = y_ofs;
 8003f40:	f8a4 9046 	strh.w	r9, [r4, #70]	; 0x46
    obj->realign.base        = base;
 8003f44:	6425      	str	r5, [r4, #64]	; 0x40
    obj->realign.mid_align = 0;
 8003f46:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
}
 8003f4a:	b002      	add	sp, #8
 8003f4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    LV_ASSERT_OBJ(base, LV_OBJX_NAME);
 8003f50:	462a      	mov	r2, r5
 8003f52:	4810      	ldr	r0, [pc, #64]	; (8003f94 <lv_obj_align+0xe4>)
 8003f54:	f010 fc3c 	bl	80147d0 <lv_debug_log_error>
 8003f58:	e7fe      	b.n	8003f58 <lv_obj_align+0xa8>
 8003f5a:	4603      	mov	r3, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8003f5c:	4622      	mov	r2, r4
 8003f5e:	480d      	ldr	r0, [pc, #52]	; (8003f94 <lv_obj_align+0xe4>)
 8003f60:	f010 fc36 	bl	80147d0 <lv_debug_log_error>
 8003f64:	e7fe      	b.n	8003f64 <lv_obj_align+0xb4>
 8003f66:	4622      	mov	r2, r4
 8003f68:	480a      	ldr	r0, [pc, #40]	; (8003f94 <lv_obj_align+0xe4>)
 8003f6a:	f010 fc31 	bl	80147d0 <lv_debug_log_error>
 8003f6e:	e7fe      	b.n	8003f6e <lv_obj_align+0xbe>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8003f70:	4620      	mov	r0, r4
 8003f72:	f010 fc29 	bl	80147c8 <lv_debug_check_null>
 8003f76:	4603      	mov	r3, r0
 8003f78:	b130      	cbz	r0, 8003f88 <lv_obj_align+0xd8>
    return obj->parent;
 8003f7a:	6825      	ldr	r5, [r4, #0]
 8003f7c:	e7a7      	b.n	8003ece <lv_obj_align+0x1e>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8003f7e:	4622      	mov	r2, r4
 8003f80:	4804      	ldr	r0, [pc, #16]	; (8003f94 <lv_obj_align+0xe4>)
 8003f82:	f010 fc25 	bl	80147d0 <lv_debug_log_error>
 8003f86:	e7fe      	b.n	8003f86 <lv_obj_align+0xd6>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8003f88:	4622      	mov	r2, r4
 8003f8a:	4802      	ldr	r0, [pc, #8]	; (8003f94 <lv_obj_align+0xe4>)
 8003f8c:	f010 fc20 	bl	80147d0 <lv_debug_log_error>
 8003f90:	e7fe      	b.n	8003f90 <lv_obj_align+0xe0>
 8003f92:	bf00      	nop
 8003f94:	0801e1d4 	.word	0x0801e1d4

08003f98 <obj_align_mid_core>:
{
 8003f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f9c:	b085      	sub	sp, #20
 8003f9e:	460c      	mov	r4, r1
 8003fa0:	4615      	mov	r5, r2
 8003fa2:	461e      	mov	r6, r3
 8003fa4:	4683      	mov	fp, r0
 8003fa6:	f89d a038 	ldrb.w	sl, [sp, #56]	; 0x38
 8003faa:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 8003fae:	f9bd 9040 	ldrsh.w	r9, [sp, #64]	; 0x40
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8003fb2:	f010 fc09 	bl	80147c8 <lv_debug_check_null>
 8003fb6:	b928      	cbnz	r0, 8003fc4 <obj_align_mid_core+0x2c>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	465a      	mov	r2, fp
 8003fbc:	48a9      	ldr	r0, [pc, #676]	; (8004264 <obj_align_mid_core+0x2cc>)
 8003fbe:	f010 fc07 	bl	80147d0 <lv_debug_log_error>
 8003fc2:	e7fe      	b.n	8003fc2 <obj_align_mid_core+0x2a>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8003fc4:	4658      	mov	r0, fp
 8003fc6:	f010 fbff 	bl	80147c8 <lv_debug_check_null>
 8003fca:	2800      	cmp	r0, #0
 8003fcc:	d064      	beq.n	8004098 <obj_align_mid_core+0x100>
    return obj->parent;
 8003fce:	f8db 2000 	ldr.w	r2, [fp]
    if(parent) {
 8003fd2:	2a00      	cmp	r2, #0
 8003fd4:	d066      	beq.n	80040a4 <obj_align_mid_core+0x10c>
        rel_x             = obj->coords.x1 - parent->coords.x1;
 8003fd6:	8a12      	ldrh	r2, [r2, #16]
 8003fd8:	f8bb 7010 	ldrh.w	r7, [fp, #16]
 8003fdc:	1abf      	subs	r7, r7, r2
 8003fde:	b23f      	sxth	r7, r7
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8003fe0:	4658      	mov	r0, fp
 8003fe2:	f010 fbf1 	bl	80147c8 <lv_debug_check_null>
 8003fe6:	2800      	cmp	r0, #0
 8003fe8:	d050      	beq.n	800408c <obj_align_mid_core+0xf4>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8003fea:	4658      	mov	r0, fp
 8003fec:	f010 fbec 	bl	80147c8 <lv_debug_check_null>
 8003ff0:	2800      	cmp	r0, #0
 8003ff2:	d05a      	beq.n	80040aa <obj_align_mid_core+0x112>
    return obj->parent;
 8003ff4:	f8db 2000 	ldr.w	r2, [fp]
    if(parent) {
 8003ff8:	2a00      	cmp	r2, #0
 8003ffa:	f000 8208 	beq.w	800440e <obj_align_mid_core+0x476>
        rel_y             = obj->coords.y1 - parent->coords.y1;
 8003ffe:	8a52      	ldrh	r2, [r2, #18]
 8004000:	f8bb 3012 	ldrh.w	r3, [fp, #18]
 8004004:	1a9b      	subs	r3, r3, r2
 8004006:	b21b      	sxth	r3, r3
 8004008:	9301      	str	r3, [sp, #4]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 800400a:	4658      	mov	r0, fp
 800400c:	f010 fbdc 	bl	80147c8 <lv_debug_check_null>
 8004010:	2800      	cmp	r0, #0
 8004012:	f000 81f6 	beq.w	8004402 <obj_align_mid_core+0x46a>
    return lv_area_get_width(&obj->coords);
 8004016:	f9bb 3010 	ldrsh.w	r3, [fp, #16]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 800401a:	4658      	mov	r0, fp
    return lv_area_get_width(&obj->coords);
 800401c:	9302      	str	r3, [sp, #8]
 800401e:	f9bb 3014 	ldrsh.w	r3, [fp, #20]
 8004022:	9303      	str	r3, [sp, #12]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8004024:	f010 fbd0 	bl	80147c8 <lv_debug_check_null>
 8004028:	2800      	cmp	r0, #0
 800402a:	f000 81f4 	beq.w	8004416 <obj_align_mid_core+0x47e>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800402e:	9a03      	ldr	r2, [sp, #12]
 8004030:	9b02      	ldr	r3, [sp, #8]
 8004032:	3201      	adds	r2, #1
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8004034:	f8bb 1016 	ldrh.w	r1, [fp, #22]
 8004038:	f8bb 0012 	ldrh.w	r0, [fp, #18]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800403c:	1ad2      	subs	r2, r2, r3
    lv_coord_t obj_w_half = lv_obj_get_width(obj) / 2;
 800403e:	b212      	sxth	r2, r2
 8004040:	2a00      	cmp	r2, #0
 8004042:	bfb8      	it	lt
 8004044:	3201      	addlt	r2, #1
 8004046:	1053      	asrs	r3, r2, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8004048:	1c4a      	adds	r2, r1, #1
 800404a:	1a12      	subs	r2, r2, r0
 800404c:	9302      	str	r3, [sp, #8]
    lv_coord_t obj_h_half = lv_obj_get_height(obj) / 2;
 800404e:	b212      	sxth	r2, r2
 8004050:	2a00      	cmp	r2, #0
 8004052:	bfb8      	it	lt
 8004054:	3201      	addlt	r2, #1
 8004056:	1053      	asrs	r3, r2, #1
 8004058:	9303      	str	r3, [sp, #12]
    switch(align) {
 800405a:	2d14      	cmp	r5, #20
 800405c:	d832      	bhi.n	80040c4 <obj_align_mid_core+0x12c>
 800405e:	e8df f015 	tbh	[pc, r5, lsl #1]
 8004062:	005d      	.short	0x005d
 8004064:	01af002a 	.word	0x01af002a
 8004068:	012701a3 	.word	0x012701a3
 800406c:	01560103 	.word	0x01560103
 8004070:	01bb0144 	.word	0x01bb0144
 8004074:	00d5002a 	.word	0x00d5002a
 8004078:	016c0177 	.word	0x016c0177
 800407c:	00ec0183 	.word	0x00ec0183
 8004080:	0198002a 	.word	0x0198002a
 8004084:	00c30139 	.word	0x00c30139
 8004088:	008500a4 	.word	0x008500a4
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 800408c:	4603      	mov	r3, r0
 800408e:	465a      	mov	r2, fp
 8004090:	4874      	ldr	r0, [pc, #464]	; (8004264 <obj_align_mid_core+0x2cc>)
 8004092:	f010 fb9d 	bl	80147d0 <lv_debug_log_error>
 8004096:	e7fe      	b.n	8004096 <obj_align_mid_core+0xfe>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8004098:	4603      	mov	r3, r0
 800409a:	465a      	mov	r2, fp
 800409c:	4871      	ldr	r0, [pc, #452]	; (8004264 <obj_align_mid_core+0x2cc>)
 800409e:	f010 fb97 	bl	80147d0 <lv_debug_log_error>
 80040a2:	e7fe      	b.n	80040a2 <obj_align_mid_core+0x10a>
        rel_x = obj->coords.x1;
 80040a4:	f9bb 7010 	ldrsh.w	r7, [fp, #16]
 80040a8:	e79a      	b.n	8003fe0 <obj_align_mid_core+0x48>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80040aa:	4603      	mov	r3, r0
 80040ac:	465a      	mov	r2, fp
 80040ae:	486d      	ldr	r0, [pc, #436]	; (8004264 <obj_align_mid_core+0x2cc>)
 80040b0:	f010 fb8e 	bl	80147d0 <lv_debug_log_error>
 80040b4:	e7fe      	b.n	80040b4 <obj_align_mid_core+0x11c>
            new_x = -obj_w_half;
 80040b6:	9b02      	ldr	r3, [sp, #8]
 80040b8:	425f      	negs	r7, r3
            new_y = -obj_h_half;
 80040ba:	9b03      	ldr	r3, [sp, #12]
 80040bc:	425b      	negs	r3, r3
            new_x = -obj_w_half;
 80040be:	b23f      	sxth	r7, r7
            new_y = -obj_h_half;
 80040c0:	b21b      	sxth	r3, r3
 80040c2:	9301      	str	r3, [sp, #4]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80040c4:	4658      	mov	r0, fp
 80040c6:	f010 fb7f 	bl	80147c8 <lv_debug_check_null>
 80040ca:	2800      	cmp	r0, #0
 80040cc:	f000 81a9 	beq.w	8004422 <obj_align_mid_core+0x48a>
    new_x -= par_abs_x;
 80040d0:	8a22      	ldrh	r2, [r4, #16]
    return obj->parent;
 80040d2:	f8db 0000 	ldr.w	r0, [fp]
    new_y -= par_abs_y;
 80040d6:	8a64      	ldrh	r4, [r4, #18]
    new_x -= par_abs_x;
 80040d8:	4490      	add	r8, r2
 80040da:	8a01      	ldrh	r1, [r0, #16]
    new_y -= par_abs_y;
 80040dc:	44a1      	add	r9, r4
 80040de:	8a42      	ldrh	r2, [r0, #18]
    new_x -= par_abs_x;
 80040e0:	eba8 0101 	sub.w	r1, r8, r1
    new_y -= par_abs_y;
 80040e4:	9b01      	ldr	r3, [sp, #4]
 80040e6:	eba9 0202 	sub.w	r2, r9, r2
    new_x -= par_abs_x;
 80040ea:	440f      	add	r7, r1
    new_y -= par_abs_y;
 80040ec:	4413      	add	r3, r2
    new_x -= par_abs_x;
 80040ee:	b23f      	sxth	r7, r7
    new_y -= par_abs_y;
 80040f0:	b21c      	sxth	r4, r3
    if(x_set && y_set) lv_obj_set_pos(obj, new_x, new_y);
 80040f2:	2e00      	cmp	r6, #0
 80040f4:	f000 819b 	beq.w	800442e <obj_align_mid_core+0x496>
 80040f8:	f1ba 0f00 	cmp.w	sl, #0
 80040fc:	f000 819d 	beq.w	800443a <obj_align_mid_core+0x4a2>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8004100:	4658      	mov	r0, fp
 8004102:	f010 fb61 	bl	80147c8 <lv_debug_check_null>
 8004106:	2800      	cmp	r0, #0
 8004108:	f000 81a5 	beq.w	8004456 <obj_align_mid_core+0x4be>
 800410c:	4622      	mov	r2, r4
 800410e:	4639      	mov	r1, r7
 8004110:	4658      	mov	r0, fp
}
 8004112:	b005      	add	sp, #20
 8004114:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004118:	f7ff bdc0 	b.w	8003c9c <lv_obj_set_pos.part.0>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 800411c:	4620      	mov	r0, r4
 800411e:	f010 fb53 	bl	80147c8 <lv_debug_check_null>
 8004122:	2800      	cmp	r0, #0
 8004124:	f000 81a3 	beq.w	800446e <obj_align_mid_core+0x4d6>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8004128:	4620      	mov	r0, r4
    return lv_area_get_width(&obj->coords);
 800412a:	f9b4 7010 	ldrsh.w	r7, [r4, #16]
 800412e:	f9b4 5014 	ldrsh.w	r5, [r4, #20]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8004132:	f010 fb49 	bl	80147c8 <lv_debug_check_null>
 8004136:	4603      	mov	r3, r0
 8004138:	2800      	cmp	r0, #0
 800413a:	f000 81e9 	beq.w	8004510 <obj_align_mid_core+0x578>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800413e:	1c69      	adds	r1, r5, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8004140:	8ae2      	ldrh	r2, [r4, #22]
 8004142:	8a60      	ldrh	r0, [r4, #18]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8004144:	1bc9      	subs	r1, r1, r7
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8004146:	3201      	adds	r2, #1
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
 8004148:	9b02      	ldr	r3, [sp, #8]
 800414a:	b209      	sxth	r1, r1
 800414c:	1a12      	subs	r2, r2, r0
 800414e:	2900      	cmp	r1, #0
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
 8004150:	b212      	sxth	r2, r2
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
 8004152:	bfb8      	it	lt
 8004154:	3101      	addlt	r1, #1
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
 8004156:	2a00      	cmp	r2, #0
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
 8004158:	ebc3 0161 	rsb	r1, r3, r1, asr #1
 800415c:	b20f      	sxth	r7, r1
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
 800415e:	db41      	blt.n	80041e4 <obj_align_mid_core+0x24c>
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
 8004160:	9b03      	ldr	r3, [sp, #12]
 8004162:	ebc3 0262 	rsb	r2, r3, r2, asr #1
 8004166:	b213      	sxth	r3, r2
 8004168:	9301      	str	r3, [sp, #4]
            break;
 800416a:	e7ab      	b.n	80040c4 <obj_align_mid_core+0x12c>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 800416c:	4620      	mov	r0, r4
 800416e:	f010 fb2b 	bl	80147c8 <lv_debug_check_null>
 8004172:	2800      	cmp	r0, #0
 8004174:	f000 81a5 	beq.w	80044c2 <obj_align_mid_core+0x52a>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8004178:	4620      	mov	r0, r4
    return lv_area_get_width(&obj->coords);
 800417a:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
 800417e:	f9b4 7014 	ldrsh.w	r7, [r4, #20]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8004182:	f010 fb21 	bl	80147c8 <lv_debug_check_null>
 8004186:	4603      	mov	r3, r0
 8004188:	2800      	cmp	r0, #0
 800418a:	f000 81b2 	beq.w	80044f2 <obj_align_mid_core+0x55a>
 800418e:	8ae3      	ldrh	r3, [r4, #22]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8004190:	3701      	adds	r7, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8004192:	8a62      	ldrh	r2, [r4, #18]
 8004194:	3301      	adds	r3, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8004196:	1b7f      	subs	r7, r7, r5
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8004198:	1a9b      	subs	r3, r3, r2
            new_x = lv_obj_get_width(base) - obj_w_half;
 800419a:	9a02      	ldr	r2, [sp, #8]
 800419c:	1abf      	subs	r7, r7, r2
            new_y = lv_obj_get_height(base) - obj_h_half;
 800419e:	9a03      	ldr	r2, [sp, #12]
 80041a0:	1a9b      	subs	r3, r3, r2
            new_x = lv_obj_get_width(base) - obj_w_half;
 80041a2:	b23f      	sxth	r7, r7
            new_y = lv_obj_get_height(base) - obj_h_half;
 80041a4:	b21b      	sxth	r3, r3
 80041a6:	9301      	str	r3, [sp, #4]
            break;
 80041a8:	e78c      	b.n	80040c4 <obj_align_mid_core+0x12c>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80041aa:	4620      	mov	r0, r4
 80041ac:	f010 fb0c 	bl	80147c8 <lv_debug_check_null>
 80041b0:	2800      	cmp	r0, #0
 80041b2:	f000 8156 	beq.w	8004462 <obj_align_mid_core+0x4ca>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80041b6:	4620      	mov	r0, r4
    return lv_area_get_width(&obj->coords);
 80041b8:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
 80041bc:	f9b4 7014 	ldrsh.w	r7, [r4, #20]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80041c0:	f010 fb02 	bl	80147c8 <lv_debug_check_null>
 80041c4:	4603      	mov	r3, r0
 80041c6:	2800      	cmp	r0, #0
 80041c8:	f000 819d 	beq.w	8004506 <obj_align_mid_core+0x56e>
 80041cc:	8ae2      	ldrh	r2, [r4, #22]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80041ce:	3701      	adds	r7, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80041d0:	8a61      	ldrh	r1, [r4, #18]
 80041d2:	3201      	adds	r2, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80041d4:	1b7f      	subs	r7, r7, r5
            new_x = lv_obj_get_width(base) - obj_w_half;
 80041d6:	9b02      	ldr	r3, [sp, #8]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80041d8:	1a52      	subs	r2, r2, r1
 80041da:	1aff      	subs	r7, r7, r3
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
 80041dc:	b212      	sxth	r2, r2
            new_x = lv_obj_get_width(base) - obj_w_half;
 80041de:	b23f      	sxth	r7, r7
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
 80041e0:	2a00      	cmp	r2, #0
 80041e2:	dabd      	bge.n	8004160 <obj_align_mid_core+0x1c8>
 80041e4:	3201      	adds	r2, #1
 80041e6:	e7bb      	b.n	8004160 <obj_align_mid_core+0x1c8>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80041e8:	4620      	mov	r0, r4
 80041ea:	f010 faed 	bl	80147c8 <lv_debug_check_null>
 80041ee:	2800      	cmp	r0, #0
 80041f0:	f000 8149 	beq.w	8004486 <obj_align_mid_core+0x4ee>
            new_y = -obj_h_half;
 80041f4:	9b03      	ldr	r3, [sp, #12]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80041f6:	8aa7      	ldrh	r7, [r4, #20]
 80041f8:	425b      	negs	r3, r3
 80041fa:	8a22      	ldrh	r2, [r4, #16]
 80041fc:	3701      	adds	r7, #1
 80041fe:	b21b      	sxth	r3, r3
 8004200:	1abf      	subs	r7, r7, r2
 8004202:	9301      	str	r3, [sp, #4]
            new_x = lv_obj_get_width(base) - obj_w_half;
 8004204:	9b02      	ldr	r3, [sp, #8]
 8004206:	1aff      	subs	r7, r7, r3
 8004208:	b23f      	sxth	r7, r7
            break;
 800420a:	e75b      	b.n	80040c4 <obj_align_mid_core+0x12c>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 800420c:	4620      	mov	r0, r4
 800420e:	f010 fadb 	bl	80147c8 <lv_debug_check_null>
 8004212:	2800      	cmp	r0, #0
 8004214:	f000 8161 	beq.w	80044da <obj_align_mid_core+0x542>
 8004218:	8aa2      	ldrh	r2, [r4, #20]
 800421a:	8a21      	ldrh	r1, [r4, #16]
 800421c:	3201      	adds	r2, #1
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
 800421e:	9b02      	ldr	r3, [sp, #8]
 8004220:	1a52      	subs	r2, r2, r1
 8004222:	b212      	sxth	r2, r2
 8004224:	2a00      	cmp	r2, #0
 8004226:	bfb8      	it	lt
 8004228:	3201      	addlt	r2, #1
 800422a:	ebc3 0262 	rsb	r2, r3, r2, asr #1
            new_y = -obj_h_half;
 800422e:	9b03      	ldr	r3, [sp, #12]
 8004230:	425b      	negs	r3, r3
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
 8004232:	b217      	sxth	r7, r2
            new_y = -obj_h_half;
 8004234:	b21b      	sxth	r3, r3
 8004236:	9301      	str	r3, [sp, #4]
            break;
 8004238:	e744      	b.n	80040c4 <obj_align_mid_core+0x12c>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 800423a:	4620      	mov	r0, r4
 800423c:	f010 fac4 	bl	80147c8 <lv_debug_check_null>
 8004240:	2800      	cmp	r0, #0
 8004242:	f000 8126 	beq.w	8004492 <obj_align_mid_core+0x4fa>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8004246:	4620      	mov	r0, r4
    return lv_area_get_width(&obj->coords);
 8004248:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
 800424c:	f9b4 7014 	ldrsh.w	r7, [r4, #20]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8004250:	f010 faba 	bl	80147c8 <lv_debug_check_null>
 8004254:	4603      	mov	r3, r0
 8004256:	2800      	cmp	r0, #0
 8004258:	d199      	bne.n	800418e <obj_align_mid_core+0x1f6>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 800425a:	4622      	mov	r2, r4
 800425c:	4801      	ldr	r0, [pc, #4]	; (8004264 <obj_align_mid_core+0x2cc>)
 800425e:	f010 fab7 	bl	80147d0 <lv_debug_log_error>
 8004262:	e7fe      	b.n	8004262 <obj_align_mid_core+0x2ca>
 8004264:	0801e1d4 	.word	0x0801e1d4
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8004268:	4620      	mov	r0, r4
 800426a:	f010 faad 	bl	80147c8 <lv_debug_check_null>
 800426e:	2800      	cmp	r0, #0
 8004270:	f000 8139 	beq.w	80044e6 <obj_align_mid_core+0x54e>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8004274:	4620      	mov	r0, r4
    return lv_area_get_width(&obj->coords);
 8004276:	f9b4 7010 	ldrsh.w	r7, [r4, #16]
 800427a:	f9b4 5014 	ldrsh.w	r5, [r4, #20]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 800427e:	f010 faa3 	bl	80147c8 <lv_debug_check_null>
 8004282:	4603      	mov	r3, r0
 8004284:	2800      	cmp	r0, #0
 8004286:	f000 8139 	beq.w	80044fc <obj_align_mid_core+0x564>
 800428a:	1c6a      	adds	r2, r5, #1
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
 800428c:	9902      	ldr	r1, [sp, #8]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800428e:	8ae3      	ldrh	r3, [r4, #22]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8004290:	1bd2      	subs	r2, r2, r7
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8004292:	3301      	adds	r3, #1
 8004294:	b212      	sxth	r2, r2
 8004296:	2a00      	cmp	r2, #0
 8004298:	bfb8      	it	lt
 800429a:	3201      	addlt	r2, #1
 800429c:	ebc1 0262 	rsb	r2, r1, r2, asr #1
 80042a0:	8a61      	ldrh	r1, [r4, #18]
 80042a2:	b217      	sxth	r7, r2
 80042a4:	1a5b      	subs	r3, r3, r1
            new_y = lv_obj_get_height(base) - obj_h_half;
 80042a6:	9a03      	ldr	r2, [sp, #12]
 80042a8:	1a9b      	subs	r3, r3, r2
 80042aa:	b21b      	sxth	r3, r3
 80042ac:	9301      	str	r3, [sp, #4]
            break;
 80042ae:	e709      	b.n	80040c4 <obj_align_mid_core+0x12c>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80042b0:	4620      	mov	r0, r4
 80042b2:	f010 fa89 	bl	80147c8 <lv_debug_check_null>
 80042b6:	2800      	cmp	r0, #0
 80042b8:	f000 80fd 	beq.w	80044b6 <obj_align_mid_core+0x51e>
            new_x = -obj_w_half;
 80042bc:	9a02      	ldr	r2, [sp, #8]
 80042be:	8ae3      	ldrh	r3, [r4, #22]
 80042c0:	4257      	negs	r7, r2
 80042c2:	8a62      	ldrh	r2, [r4, #18]
 80042c4:	3301      	adds	r3, #1
 80042c6:	b23f      	sxth	r7, r7
 80042c8:	1a9b      	subs	r3, r3, r2
            new_y = lv_obj_get_height(base) - obj_h_half;
 80042ca:	9a03      	ldr	r2, [sp, #12]
 80042cc:	1a9b      	subs	r3, r3, r2
 80042ce:	b21b      	sxth	r3, r3
 80042d0:	9301      	str	r3, [sp, #4]
            break;
 80042d2:	e6f7      	b.n	80040c4 <obj_align_mid_core+0x12c>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80042d4:	4620      	mov	r0, r4
 80042d6:	f010 fa77 	bl	80147c8 <lv_debug_check_null>
 80042da:	2800      	cmp	r0, #0
 80042dc:	d1ee      	bne.n	80042bc <obj_align_mid_core+0x324>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80042de:	4603      	mov	r3, r0
 80042e0:	4622      	mov	r2, r4
 80042e2:	488e      	ldr	r0, [pc, #568]	; (800451c <obj_align_mid_core+0x584>)
 80042e4:	f010 fa74 	bl	80147d0 <lv_debug_log_error>
 80042e8:	e7fe      	b.n	80042e8 <obj_align_mid_core+0x350>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80042ea:	4620      	mov	r0, r4
 80042ec:	f010 fa6c 	bl	80147c8 <lv_debug_check_null>
 80042f0:	2800      	cmp	r0, #0
 80042f2:	f000 80d4 	beq.w	800449e <obj_align_mid_core+0x506>
 80042f6:	8ae2      	ldrh	r2, [r4, #22]
 80042f8:	8a61      	ldrh	r1, [r4, #18]
 80042fa:	3201      	adds	r2, #1
            new_x = -obj_w_half;
 80042fc:	9b02      	ldr	r3, [sp, #8]
 80042fe:	1a52      	subs	r2, r2, r1
 8004300:	425f      	negs	r7, r3
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
 8004302:	b212      	sxth	r2, r2
            new_x = -obj_w_half;
 8004304:	b23f      	sxth	r7, r7
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
 8004306:	2a00      	cmp	r2, #0
 8004308:	f6bf af2a 	bge.w	8004160 <obj_align_mid_core+0x1c8>
 800430c:	e76a      	b.n	80041e4 <obj_align_mid_core+0x24c>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 800430e:	4620      	mov	r0, r4
 8004310:	f010 fa5a 	bl	80147c8 <lv_debug_check_null>
 8004314:	2800      	cmp	r0, #0
 8004316:	f000 80da 	beq.w	80044ce <obj_align_mid_core+0x536>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 800431a:	4620      	mov	r0, r4
    return lv_area_get_width(&obj->coords);
 800431c:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
 8004320:	f9b4 7014 	ldrsh.w	r7, [r4, #20]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8004324:	f010 fa50 	bl	80147c8 <lv_debug_check_null>
 8004328:	4603      	mov	r3, r0
 800432a:	2800      	cmp	r0, #0
 800432c:	f47f af2f 	bne.w	800418e <obj_align_mid_core+0x1f6>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8004330:	4622      	mov	r2, r4
 8004332:	487a      	ldr	r0, [pc, #488]	; (800451c <obj_align_mid_core+0x584>)
 8004334:	f010 fa4c 	bl	80147d0 <lv_debug_log_error>
 8004338:	e7fe      	b.n	8004338 <obj_align_mid_core+0x3a0>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 800433a:	4620      	mov	r0, r4
 800433c:	f010 fa44 	bl	80147c8 <lv_debug_check_null>
 8004340:	2800      	cmp	r0, #0
 8004342:	d1bb      	bne.n	80042bc <obj_align_mid_core+0x324>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8004344:	4603      	mov	r3, r0
 8004346:	4622      	mov	r2, r4
 8004348:	4874      	ldr	r0, [pc, #464]	; (800451c <obj_align_mid_core+0x584>)
 800434a:	f010 fa41 	bl	80147d0 <lv_debug_log_error>
 800434e:	e7fe      	b.n	800434e <obj_align_mid_core+0x3b6>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8004350:	4620      	mov	r0, r4
 8004352:	f010 fa39 	bl	80147c8 <lv_debug_check_null>
 8004356:	2800      	cmp	r0, #0
 8004358:	f47f af4c 	bne.w	80041f4 <obj_align_mid_core+0x25c>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 800435c:	4603      	mov	r3, r0
 800435e:	4622      	mov	r2, r4
 8004360:	486e      	ldr	r0, [pc, #440]	; (800451c <obj_align_mid_core+0x584>)
 8004362:	f010 fa35 	bl	80147d0 <lv_debug_log_error>
 8004366:	e7fe      	b.n	8004366 <obj_align_mid_core+0x3ce>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8004368:	4620      	mov	r0, r4
 800436a:	f010 fa2d 	bl	80147c8 <lv_debug_check_null>
 800436e:	2800      	cmp	r0, #0
 8004370:	f000 809b 	beq.w	80044aa <obj_align_mid_core+0x512>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8004374:	4620      	mov	r0, r4
    return lv_area_get_width(&obj->coords);
 8004376:	f9b4 7010 	ldrsh.w	r7, [r4, #16]
 800437a:	f9b4 5014 	ldrsh.w	r5, [r4, #20]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 800437e:	f010 fa23 	bl	80147c8 <lv_debug_check_null>
 8004382:	4603      	mov	r3, r0
 8004384:	2800      	cmp	r0, #0
 8004386:	d180      	bne.n	800428a <obj_align_mid_core+0x2f2>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8004388:	4622      	mov	r2, r4
 800438a:	4864      	ldr	r0, [pc, #400]	; (800451c <obj_align_mid_core+0x584>)
 800438c:	f010 fa20 	bl	80147d0 <lv_debug_log_error>
 8004390:	e7fe      	b.n	8004390 <obj_align_mid_core+0x3f8>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8004392:	4620      	mov	r0, r4
 8004394:	f010 fa18 	bl	80147c8 <lv_debug_check_null>
 8004398:	2800      	cmp	r0, #0
 800439a:	d1ac      	bne.n	80042f6 <obj_align_mid_core+0x35e>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 800439c:	4603      	mov	r3, r0
 800439e:	4622      	mov	r2, r4
 80043a0:	485e      	ldr	r0, [pc, #376]	; (800451c <obj_align_mid_core+0x584>)
 80043a2:	f010 fa15 	bl	80147d0 <lv_debug_log_error>
 80043a6:	e7fe      	b.n	80043a6 <obj_align_mid_core+0x40e>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80043a8:	4620      	mov	r0, r4
 80043aa:	f010 fa0d 	bl	80147c8 <lv_debug_check_null>
 80043ae:	2800      	cmp	r0, #0
 80043b0:	f47f af20 	bne.w	80041f4 <obj_align_mid_core+0x25c>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80043b4:	4603      	mov	r3, r0
 80043b6:	4622      	mov	r2, r4
 80043b8:	4858      	ldr	r0, [pc, #352]	; (800451c <obj_align_mid_core+0x584>)
 80043ba:	f010 fa09 	bl	80147d0 <lv_debug_log_error>
 80043be:	e7fe      	b.n	80043be <obj_align_mid_core+0x426>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80043c0:	4620      	mov	r0, r4
 80043c2:	f010 fa01 	bl	80147c8 <lv_debug_check_null>
 80043c6:	2800      	cmp	r0, #0
 80043c8:	f47f af26 	bne.w	8004218 <obj_align_mid_core+0x280>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80043cc:	4603      	mov	r3, r0
 80043ce:	4622      	mov	r2, r4
 80043d0:	4852      	ldr	r0, [pc, #328]	; (800451c <obj_align_mid_core+0x584>)
 80043d2:	f010 f9fd 	bl	80147d0 <lv_debug_log_error>
 80043d6:	e7fe      	b.n	80043d6 <obj_align_mid_core+0x43e>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80043d8:	4620      	mov	r0, r4
 80043da:	f010 f9f5 	bl	80147c8 <lv_debug_check_null>
 80043de:	2800      	cmp	r0, #0
 80043e0:	d04b      	beq.n	800447a <obj_align_mid_core+0x4e2>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80043e2:	4620      	mov	r0, r4
    return lv_area_get_width(&obj->coords);
 80043e4:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
 80043e8:	f9b4 7014 	ldrsh.w	r7, [r4, #20]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80043ec:	f010 f9ec 	bl	80147c8 <lv_debug_check_null>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2800      	cmp	r0, #0
 80043f4:	f47f aeea 	bne.w	80041cc <obj_align_mid_core+0x234>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80043f8:	4622      	mov	r2, r4
 80043fa:	4848      	ldr	r0, [pc, #288]	; (800451c <obj_align_mid_core+0x584>)
 80043fc:	f010 f9e8 	bl	80147d0 <lv_debug_log_error>
 8004400:	e7fe      	b.n	8004400 <obj_align_mid_core+0x468>
 8004402:	4603      	mov	r3, r0
 8004404:	465a      	mov	r2, fp
 8004406:	4845      	ldr	r0, [pc, #276]	; (800451c <obj_align_mid_core+0x584>)
 8004408:	f010 f9e2 	bl	80147d0 <lv_debug_log_error>
 800440c:	e7fe      	b.n	800440c <obj_align_mid_core+0x474>
        rel_y = obj->coords.y1;
 800440e:	f9bb 3012 	ldrsh.w	r3, [fp, #18]
 8004412:	9301      	str	r3, [sp, #4]
 8004414:	e5f9      	b.n	800400a <obj_align_mid_core+0x72>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8004416:	4603      	mov	r3, r0
 8004418:	465a      	mov	r2, fp
 800441a:	4840      	ldr	r0, [pc, #256]	; (800451c <obj_align_mid_core+0x584>)
 800441c:	f010 f9d8 	bl	80147d0 <lv_debug_log_error>
 8004420:	e7fe      	b.n	8004420 <obj_align_mid_core+0x488>
 8004422:	4603      	mov	r3, r0
 8004424:	465a      	mov	r2, fp
 8004426:	483d      	ldr	r0, [pc, #244]	; (800451c <obj_align_mid_core+0x584>)
 8004428:	f010 f9d2 	bl	80147d0 <lv_debug_log_error>
 800442c:	e7fe      	b.n	800442c <obj_align_mid_core+0x494>
    else if(y_set) lv_obj_set_y(obj, new_y);
 800442e:	f1ba 0f00 	cmp.w	sl, #0
 8004432:	d109      	bne.n	8004448 <obj_align_mid_core+0x4b0>
}
 8004434:	b005      	add	sp, #20
 8004436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if(x_set) lv_obj_set_x(obj, new_x);
 800443a:	4639      	mov	r1, r7
 800443c:	4658      	mov	r0, fp
}
 800443e:	b005      	add	sp, #20
 8004440:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    else if(x_set) lv_obj_set_x(obj, new_x);
 8004444:	f7ff bcbc 	b.w	8003dc0 <lv_obj_set_x>
    else if(y_set) lv_obj_set_y(obj, new_y);
 8004448:	4621      	mov	r1, r4
 800444a:	4658      	mov	r0, fp
}
 800444c:	b005      	add	sp, #20
 800444e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    else if(y_set) lv_obj_set_y(obj, new_y);
 8004452:	f7ff bcf1 	b.w	8003e38 <lv_obj_set_y>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8004456:	4603      	mov	r3, r0
 8004458:	465a      	mov	r2, fp
 800445a:	4830      	ldr	r0, [pc, #192]	; (800451c <obj_align_mid_core+0x584>)
 800445c:	f010 f9b8 	bl	80147d0 <lv_debug_log_error>
 8004460:	e7fe      	b.n	8004460 <obj_align_mid_core+0x4c8>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8004462:	4603      	mov	r3, r0
 8004464:	4622      	mov	r2, r4
 8004466:	482d      	ldr	r0, [pc, #180]	; (800451c <obj_align_mid_core+0x584>)
 8004468:	f010 f9b2 	bl	80147d0 <lv_debug_log_error>
 800446c:	e7fe      	b.n	800446c <obj_align_mid_core+0x4d4>
 800446e:	4603      	mov	r3, r0
 8004470:	4622      	mov	r2, r4
 8004472:	482a      	ldr	r0, [pc, #168]	; (800451c <obj_align_mid_core+0x584>)
 8004474:	f010 f9ac 	bl	80147d0 <lv_debug_log_error>
 8004478:	e7fe      	b.n	8004478 <obj_align_mid_core+0x4e0>
 800447a:	4603      	mov	r3, r0
 800447c:	4622      	mov	r2, r4
 800447e:	4827      	ldr	r0, [pc, #156]	; (800451c <obj_align_mid_core+0x584>)
 8004480:	f010 f9a6 	bl	80147d0 <lv_debug_log_error>
 8004484:	e7fe      	b.n	8004484 <obj_align_mid_core+0x4ec>
 8004486:	4603      	mov	r3, r0
 8004488:	4622      	mov	r2, r4
 800448a:	4824      	ldr	r0, [pc, #144]	; (800451c <obj_align_mid_core+0x584>)
 800448c:	f010 f9a0 	bl	80147d0 <lv_debug_log_error>
 8004490:	e7fe      	b.n	8004490 <obj_align_mid_core+0x4f8>
 8004492:	4603      	mov	r3, r0
 8004494:	4622      	mov	r2, r4
 8004496:	4821      	ldr	r0, [pc, #132]	; (800451c <obj_align_mid_core+0x584>)
 8004498:	f010 f99a 	bl	80147d0 <lv_debug_log_error>
 800449c:	e7fe      	b.n	800449c <obj_align_mid_core+0x504>
 800449e:	4603      	mov	r3, r0
 80044a0:	4622      	mov	r2, r4
 80044a2:	481e      	ldr	r0, [pc, #120]	; (800451c <obj_align_mid_core+0x584>)
 80044a4:	f010 f994 	bl	80147d0 <lv_debug_log_error>
 80044a8:	e7fe      	b.n	80044a8 <obj_align_mid_core+0x510>
 80044aa:	4603      	mov	r3, r0
 80044ac:	4622      	mov	r2, r4
 80044ae:	481b      	ldr	r0, [pc, #108]	; (800451c <obj_align_mid_core+0x584>)
 80044b0:	f010 f98e 	bl	80147d0 <lv_debug_log_error>
 80044b4:	e7fe      	b.n	80044b4 <obj_align_mid_core+0x51c>
 80044b6:	4603      	mov	r3, r0
 80044b8:	4622      	mov	r2, r4
 80044ba:	4818      	ldr	r0, [pc, #96]	; (800451c <obj_align_mid_core+0x584>)
 80044bc:	f010 f988 	bl	80147d0 <lv_debug_log_error>
 80044c0:	e7fe      	b.n	80044c0 <obj_align_mid_core+0x528>
 80044c2:	4603      	mov	r3, r0
 80044c4:	4622      	mov	r2, r4
 80044c6:	4815      	ldr	r0, [pc, #84]	; (800451c <obj_align_mid_core+0x584>)
 80044c8:	f010 f982 	bl	80147d0 <lv_debug_log_error>
 80044cc:	e7fe      	b.n	80044cc <obj_align_mid_core+0x534>
 80044ce:	4603      	mov	r3, r0
 80044d0:	4622      	mov	r2, r4
 80044d2:	4812      	ldr	r0, [pc, #72]	; (800451c <obj_align_mid_core+0x584>)
 80044d4:	f010 f97c 	bl	80147d0 <lv_debug_log_error>
 80044d8:	e7fe      	b.n	80044d8 <obj_align_mid_core+0x540>
 80044da:	4603      	mov	r3, r0
 80044dc:	4622      	mov	r2, r4
 80044de:	480f      	ldr	r0, [pc, #60]	; (800451c <obj_align_mid_core+0x584>)
 80044e0:	f010 f976 	bl	80147d0 <lv_debug_log_error>
 80044e4:	e7fe      	b.n	80044e4 <obj_align_mid_core+0x54c>
 80044e6:	4603      	mov	r3, r0
 80044e8:	4622      	mov	r2, r4
 80044ea:	480c      	ldr	r0, [pc, #48]	; (800451c <obj_align_mid_core+0x584>)
 80044ec:	f010 f970 	bl	80147d0 <lv_debug_log_error>
 80044f0:	e7fe      	b.n	80044f0 <obj_align_mid_core+0x558>
 80044f2:	4622      	mov	r2, r4
 80044f4:	4809      	ldr	r0, [pc, #36]	; (800451c <obj_align_mid_core+0x584>)
 80044f6:	f010 f96b 	bl	80147d0 <lv_debug_log_error>
 80044fa:	e7fe      	b.n	80044fa <obj_align_mid_core+0x562>
 80044fc:	4622      	mov	r2, r4
 80044fe:	4807      	ldr	r0, [pc, #28]	; (800451c <obj_align_mid_core+0x584>)
 8004500:	f010 f966 	bl	80147d0 <lv_debug_log_error>
 8004504:	e7fe      	b.n	8004504 <obj_align_mid_core+0x56c>
 8004506:	4622      	mov	r2, r4
 8004508:	4804      	ldr	r0, [pc, #16]	; (800451c <obj_align_mid_core+0x584>)
 800450a:	f010 f961 	bl	80147d0 <lv_debug_log_error>
 800450e:	e7fe      	b.n	800450e <obj_align_mid_core+0x576>
 8004510:	4622      	mov	r2, r4
 8004512:	4802      	ldr	r0, [pc, #8]	; (800451c <obj_align_mid_core+0x584>)
 8004514:	f010 f95c 	bl	80147d0 <lv_debug_log_error>
 8004518:	e7fe      	b.n	8004518 <obj_align_mid_core+0x580>
 800451a:	bf00      	nop
 800451c:	0801e1d4 	.word	0x0801e1d4

08004520 <lv_obj_realign>:
{
 8004520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004524:	b084      	sub	sp, #16
 8004526:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8004528:	f010 f94e 	bl	80147c8 <lv_debug_check_null>
 800452c:	b348      	cbz	r0, 8004582 <lv_obj_realign+0x62>
    if(obj->realign.mid_align)
 800452e:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 8004532:	079b      	lsls	r3, r3, #30
 8004534:	d517      	bpl.n	8004566 <lv_obj_realign+0x46>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8004536:	4620      	mov	r0, r4
        lv_obj_align_mid(obj, obj->realign.base, obj->realign.align, obj->realign.xofs, obj->realign.yofs);
 8004538:	6c25      	ldr	r5, [r4, #64]	; 0x40
 800453a:	f894 8048 	ldrb.w	r8, [r4, #72]	; 0x48
 800453e:	f9b4 7044 	ldrsh.w	r7, [r4, #68]	; 0x44
 8004542:	f9b4 6046 	ldrsh.w	r6, [r4, #70]	; 0x46
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8004546:	f010 f93f 	bl	80147c8 <lv_debug_check_null>
 800454a:	4603      	mov	r3, r0
 800454c:	b1f8      	cbz	r0, 800458e <lv_obj_realign+0x6e>
    if(base == NULL) {
 800454e:	2d00      	cmp	r5, #0
 8004550:	d03b      	beq.n	80045ca <lv_obj_realign+0xaa>
    LV_ASSERT_OBJ(base, LV_OBJX_NAME);
 8004552:	4628      	mov	r0, r5
 8004554:	f010 f938 	bl	80147c8 <lv_debug_check_null>
 8004558:	4603      	mov	r3, r0
 800455a:	b9e8      	cbnz	r0, 8004598 <lv_obj_realign+0x78>
 800455c:	462a      	mov	r2, r5
 800455e:	4821      	ldr	r0, [pc, #132]	; (80045e4 <lv_obj_realign+0xc4>)
 8004560:	f010 f936 	bl	80147d0 <lv_debug_log_error>
 8004564:	e7fe      	b.n	8004564 <lv_obj_realign+0x44>
        lv_obj_align(obj, obj->realign.base, obj->realign.align, obj->realign.xofs, obj->realign.yofs);
 8004566:	f9b4 2046 	ldrsh.w	r2, [r4, #70]	; 0x46
 800456a:	4620      	mov	r0, r4
 800456c:	f9b4 3044 	ldrsh.w	r3, [r4, #68]	; 0x44
 8004570:	9200      	str	r2, [sp, #0]
 8004572:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 8004576:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8004578:	f7ff fc9a 	bl	8003eb0 <lv_obj_align>
}
 800457c:	b004      	add	sp, #16
 800457e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004582:	4603      	mov	r3, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8004584:	4622      	mov	r2, r4
 8004586:	4817      	ldr	r0, [pc, #92]	; (80045e4 <lv_obj_realign+0xc4>)
 8004588:	f010 f922 	bl	80147d0 <lv_debug_log_error>
 800458c:	e7fe      	b.n	800458c <lv_obj_realign+0x6c>
 800458e:	4622      	mov	r2, r4
 8004590:	4814      	ldr	r0, [pc, #80]	; (80045e4 <lv_obj_realign+0xc4>)
 8004592:	f010 f91d 	bl	80147d0 <lv_debug_log_error>
 8004596:	e7fe      	b.n	8004596 <lv_obj_realign+0x76>
    obj_align_mid_core(obj, base, align, true, true, x_ofs, y_ofs);
 8004598:	2301      	movs	r3, #1
 800459a:	4642      	mov	r2, r8
 800459c:	4629      	mov	r1, r5
 800459e:	4620      	mov	r0, r4
 80045a0:	9300      	str	r3, [sp, #0]
 80045a2:	e9cd 7601 	strd	r7, r6, [sp, #4]
 80045a6:	f7ff fcf7 	bl	8003f98 <obj_align_mid_core>
    obj->realign.mid_align = 1;
 80045aa:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
    obj->realign.align       = align;
 80045ae:	f884 8048 	strb.w	r8, [r4, #72]	; 0x48
    obj->realign.mid_align = 1;
 80045b2:	f043 0302 	orr.w	r3, r3, #2
    obj->realign.xofs        = x_ofs;
 80045b6:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
    obj->realign.yofs        = y_ofs;
 80045ba:	f8a4 6046 	strh.w	r6, [r4, #70]	; 0x46
    obj->realign.base        = base;
 80045be:	6425      	str	r5, [r4, #64]	; 0x40
    obj->realign.mid_align = 1;
 80045c0:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
}
 80045c4:	b004      	add	sp, #16
 80045c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80045ca:	4620      	mov	r0, r4
 80045cc:	f010 f8fc 	bl	80147c8 <lv_debug_check_null>
 80045d0:	4603      	mov	r3, r0
 80045d2:	b108      	cbz	r0, 80045d8 <lv_obj_realign+0xb8>
    return obj->parent;
 80045d4:	6825      	ldr	r5, [r4, #0]
 80045d6:	e7bc      	b.n	8004552 <lv_obj_realign+0x32>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80045d8:	4622      	mov	r2, r4
 80045da:	4802      	ldr	r0, [pc, #8]	; (80045e4 <lv_obj_realign+0xc4>)
 80045dc:	f010 f8f8 	bl	80147d0 <lv_debug_log_error>
 80045e0:	e7fe      	b.n	80045e0 <lv_obj_realign+0xc0>
 80045e2:	bf00      	nop
 80045e4:	0801e1d4 	.word	0x0801e1d4

080045e8 <refresh_children_style>:
{
 80045e8:	b570      	push	{r4, r5, r6, lr}
 80045ea:	4605      	mov	r5, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80045ec:	f010 f8ec 	bl	80147c8 <lv_debug_check_null>
 80045f0:	b328      	cbz	r0, 800463e <refresh_children_style+0x56>
        result = _lv_ll_get_head(&obj->child_ll);
 80045f2:	1d2e      	adds	r6, r5, #4
 80045f4:	4630      	mov	r0, r6
 80045f6:	f010 fab9 	bl	8014b6c <_lv_ll_get_head>
    while(child != NULL) {
 80045fa:	4604      	mov	r4, r0
 80045fc:	b1c8      	cbz	r0, 8004632 <refresh_children_style+0x4a>
        lv_obj_invalidate(child);
 80045fe:	4620      	mov	r0, r4
 8004600:	f7ff fac6 	bl	8003b90 <lv_obj_invalidate>
        child->signal_cb(child, LV_SIGNAL_STYLE_CHG, NULL);
 8004604:	69e3      	ldr	r3, [r4, #28]
 8004606:	2104      	movs	r1, #4
 8004608:	2200      	movs	r2, #0
 800460a:	4620      	mov	r0, r4
 800460c:	4798      	blx	r3
        lv_obj_invalidate(child);
 800460e:	4620      	mov	r0, r4
 8004610:	f7ff fabe 	bl	8003b90 <lv_obj_invalidate>
        refresh_children_style(child); /*Check children too*/
 8004614:	4620      	mov	r0, r4
 8004616:	f7ff ffe7 	bl	80045e8 <refresh_children_style>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 800461a:	4628      	mov	r0, r5
 800461c:	f010 f8d4 	bl	80147c8 <lv_debug_check_null>
 8004620:	4603      	mov	r3, r0
        result = _lv_ll_get_next(&obj->child_ll, child);
 8004622:	4621      	mov	r1, r4
 8004624:	4630      	mov	r0, r6
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8004626:	b12b      	cbz	r3, 8004634 <refresh_children_style+0x4c>
        result = _lv_ll_get_next(&obj->child_ll, child);
 8004628:	f010 faa8 	bl	8014b7c <_lv_ll_get_next>
    while(child != NULL) {
 800462c:	4604      	mov	r4, r0
 800462e:	2800      	cmp	r0, #0
 8004630:	d1e5      	bne.n	80045fe <refresh_children_style+0x16>
}
 8004632:	bd70      	pop	{r4, r5, r6, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8004634:	462a      	mov	r2, r5
 8004636:	4805      	ldr	r0, [pc, #20]	; (800464c <refresh_children_style+0x64>)
 8004638:	f010 f8ca 	bl	80147d0 <lv_debug_log_error>
 800463c:	e7fe      	b.n	800463c <refresh_children_style+0x54>
 800463e:	4603      	mov	r3, r0
 8004640:	462a      	mov	r2, r5
 8004642:	4802      	ldr	r0, [pc, #8]	; (800464c <refresh_children_style+0x64>)
 8004644:	f010 f8c4 	bl	80147d0 <lv_debug_log_error>
 8004648:	e7fe      	b.n	8004648 <refresh_children_style+0x60>
 800464a:	bf00      	nop
 800464c:	0801e1d4 	.word	0x0801e1d4

08004650 <lv_obj_create>:
{
 8004650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004654:	460d      	mov	r5, r1
 8004656:	b082      	sub	sp, #8
    if(parent == NULL) {
 8004658:	4606      	mov	r6, r0
 800465a:	2800      	cmp	r0, #0
 800465c:	f000 813e 	beq.w	80048dc <lv_obj_create+0x28c>
        LV_ASSERT_OBJ(parent, LV_OBJX_NAME);
 8004660:	f010 f8b2 	bl	80147c8 <lv_debug_check_null>
 8004664:	4603      	mov	r3, r0
 8004666:	2800      	cmp	r0, #0
 8004668:	f000 8133 	beq.w	80048d2 <lv_obj_create+0x282>
        new_obj = _lv_ll_ins_head(&parent->child_ll);
 800466c:	1d30      	adds	r0, r6, #4
 800466e:	f010 f9a7 	bl	80149c0 <_lv_ll_ins_head>
 8004672:	4604      	mov	r4, r0
        LV_ASSERT_MEM(new_obj);
 8004674:	f010 f8a8 	bl	80147c8 <lv_debug_check_null>
 8004678:	4603      	mov	r3, r0
 800467a:	2800      	cmp	r0, #0
 800467c:	f000 8189 	beq.w	8004992 <lv_obj_create+0x342>
        if(new_obj == NULL) return NULL;
 8004680:	2c00      	cmp	r4, #0
 8004682:	f000 8181 	beq.w	8004988 <lv_obj_create+0x338>
        _lv_memset_00(new_obj, sizeof(lv_obj_t));
 8004686:	214c      	movs	r1, #76	; 0x4c
 8004688:	4620      	mov	r0, r4
 800468a:	f011 f875 	bl	8015778 <_lv_memset_00>
        new_obj->base_dir     = LV_BIDI_DIR_LTR;
 800468e:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
        new_obj->signal_cb = lv_obj_signal;
 8004692:	49cf      	ldr	r1, [pc, #828]	; (80049d0 <lv_obj_create+0x380>)
        new_obj->event_cb = NULL;
 8004694:	f04f 0800 	mov.w	r8, #0
        new_obj->base_dir     = LV_BIDI_DIR_LTR;
 8004698:	f36f 1346 	bfc	r3, #5, #2
        new_obj->design_cb = lv_obj_design;
 800469c:	4acd      	ldr	r2, [pc, #820]	; (80049d4 <lv_obj_create+0x384>)
        new_obj->coords.y2    = parent->coords.y1 + LV_OBJ_DEF_HEIGHT;
 800469e:	4640      	mov	r0, r8
        new_obj->parent = parent;
 80046a0:	6026      	str	r6, [r4, #0]
        new_obj->base_dir     = LV_BIDI_DIR_LTR;
 80046a2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        new_obj->coords.y1    = parent->coords.y1;
 80046a6:	f9b6 3012 	ldrsh.w	r3, [r6, #18]
        new_obj->signal_cb = lv_obj_signal;
 80046aa:	61e1      	str	r1, [r4, #28]
        new_obj->coords.y1    = parent->coords.y1;
 80046ac:	8263      	strh	r3, [r4, #18]
        new_obj->design_cb = lv_obj_design;
 80046ae:	6222      	str	r2, [r4, #32]
        new_obj->event_cb = NULL;
 80046b0:	f8c4 8018 	str.w	r8, [r4, #24]
        new_obj->coords.y2    = parent->coords.y1 + LV_OBJ_DEF_HEIGHT;
 80046b4:	8a77      	ldrh	r7, [r6, #18]
 80046b6:	f00f f913 	bl	80138e0 <lv_disp_get_dpi>
 80046ba:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80046be:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80046c2:	0043      	lsls	r3, r0, #1
 80046c4:	2bef      	cmp	r3, #239	; 0xef
 80046c6:	f300 8150 	bgt.w	800496a <lv_obj_create+0x31a>
 80046ca:	2301      	movs	r3, #1
 80046cc:	443b      	add	r3, r7
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80046ce:	4620      	mov	r0, r4
        new_obj->coords.y2    = parent->coords.y1 + LV_OBJ_DEF_HEIGHT;
 80046d0:	82e3      	strh	r3, [r4, #22]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80046d2:	f010 f879 	bl	80147c8 <lv_debug_check_null>
 80046d6:	4603      	mov	r3, r0
 80046d8:	2800      	cmp	r0, #0
 80046da:	f000 8141 	beq.w	8004960 <lv_obj_create+0x310>
            new_obj->coords.x1    = parent->coords.x1;
 80046de:	f9b6 7010 	ldrsh.w	r7, [r6, #16]
            new_obj->coords.x2    = parent->coords.x1 + LV_OBJ_DEF_WIDTH;
 80046e2:	2000      	movs	r0, #0
            new_obj->coords.x1    = parent->coords.x1;
 80046e4:	8227      	strh	r7, [r4, #16]
            new_obj->coords.x2    = parent->coords.x1 + LV_OBJ_DEF_WIDTH;
 80046e6:	b2bf      	uxth	r7, r7
 80046e8:	f00f f8fa 	bl	80138e0 <lv_disp_get_dpi>
 80046ec:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80046f0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80046f4:	0083      	lsls	r3, r0, #2
 80046f6:	2bef      	cmp	r3, #239	; 0xef
 80046f8:	f300 8155 	bgt.w	80049a6 <lv_obj_create+0x356>
 80046fc:	2301      	movs	r3, #1
 80046fe:	443b      	add	r3, r7
 8004700:	82a3      	strh	r3, [r4, #20]
    _lv_ll_init(&(new_obj->child_ll), sizeof(lv_obj_t));
 8004702:	214c      	movs	r1, #76	; 0x4c
 8004704:	1d20      	adds	r0, r4, #4
 8004706:	f010 f953 	bl	80149b0 <_lv_ll_init>
    new_obj->gesture_parent = parent ? 1 : 0;
 800470a:	1e33      	subs	r3, r6, #0
    new_obj->click        = 1;
 800470c:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 800470e:	f640 4101 	movw	r1, #3073	; 0xc01
    new_obj->gesture_parent = parent ? 1 : 0;
 8004712:	bf18      	it	ne
 8004714:	2301      	movne	r3, #1
    new_obj->realign.align        = LV_ALIGN_CENTER;
 8004716:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
    new_obj->click        = 1;
 800471a:	f420 50ff 	bic.w	r0, r0, #8160	; 0x1fe0
 800471e:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
    new_obj->realign.align        = LV_ALIGN_CENTER;
 8004722:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
    new_obj->click        = 1;
 8004726:	f020 001f 	bic.w	r0, r0, #31
    new_obj->realign.base         = NULL;
 800472a:	2300      	movs	r3, #0
    new_obj->realign.align        = LV_ALIGN_CENTER;
 800472c:	f022 0201 	bic.w	r2, r2, #1
    new_obj->click        = 1;
 8004730:	4301      	orrs	r1, r0
    lv_style_list_init(&new_obj->style_list);
 8004732:	f104 0028 	add.w	r0, r4, #40	; 0x28
    new_obj->realign.base         = NULL;
 8004736:	6423      	str	r3, [r4, #64]	; 0x40
    new_obj->realign.xofs         = 0;
 8004738:	6463      	str	r3, [r4, #68]	; 0x44
    new_obj->click        = 1;
 800473a:	86a1      	strh	r1, [r4, #52]	; 0x34
    new_obj->realign.align        = LV_ALIGN_CENTER;
 800473c:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
    new_obj->ext_click_pad_hor = 0;
 8004740:	6323      	str	r3, [r4, #48]	; 0x30
    new_obj->group_p = NULL;
 8004742:	63a3      	str	r3, [r4, #56]	; 0x38
    new_obj->protect      = LV_PROTECT_NONE;
 8004744:	87a3      	strh	r3, [r4, #60]	; 0x3c
    new_obj->ext_attr = NULL;
 8004746:	6263      	str	r3, [r4, #36]	; 0x24
    lv_style_list_init(&new_obj->style_list);
 8004748:	9001      	str	r0, [sp, #4]
 800474a:	f004 f9e5 	bl	8008b18 <lv_style_list_init>
    if(copy == NULL) {
 800474e:	9801      	ldr	r0, [sp, #4]
 8004750:	2d00      	cmp	r5, #0
 8004752:	f000 80ee 	beq.w	8004932 <lv_obj_create+0x2e2>
        lv_style_list_copy(&new_obj->style_list, &copy->style_list);
 8004756:	f105 0128 	add.w	r1, r5, #40	; 0x28
 800475a:	f004 fac3 	bl	8008ce4 <lv_style_list_copy>
 800475e:	f105 0310 	add.w	r3, r5, #16
 8004762:	f104 0214 	add.w	r2, r4, #20
 8004766:	4293      	cmp	r3, r2
 8004768:	d206      	bcs.n	8004778 <lv_obj_create+0x128>
 800476a:	f104 0310 	add.w	r3, r4, #16
 800476e:	f105 0214 	add.w	r2, r5, #20
 8004772:	4293      	cmp	r3, r2
 8004774:	f0c0 816a 	bcc.w	8004a4c <lv_obj_create+0x3fc>
        *d8 = *s8;
 8004778:	692b      	ldr	r3, [r5, #16]
 800477a:	6123      	str	r3, [r4, #16]
 800477c:	696b      	ldr	r3, [r5, #20]
 800477e:	6163      	str	r3, [r4, #20]
        new_obj->ext_draw_pad = copy->ext_draw_pad;
 8004780:	f9b5 3032 	ldrsh.w	r3, [r5, #50]	; 0x32
        new_obj->base_dir = copy->base_dir;
 8004784:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
        new_obj->ext_draw_pad = copy->ext_draw_pad;
 8004788:	8663      	strh	r3, [r4, #50]	; 0x32
        new_obj->ext_click_pad_hor = copy->ext_click_pad_hor;
 800478a:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
        new_obj->realign.auto_realign = copy->realign.auto_realign;
 800478e:	f894 2049 	ldrb.w	r2, [r4, #73]	; 0x49
        new_obj->ext_click_pad_hor = copy->ext_click_pad_hor;
 8004792:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        new_obj->ext_click_pad_ver = copy->ext_click_pad_ver;
 8004796:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
        new_obj->adv_hittest  = copy->adv_hittest;
 800479a:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
        new_obj->ext_click_pad_ver = copy->ext_click_pad_ver;
 800479e:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
        new_obj->base_dir = copy->base_dir;
 80047a2:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
 80047a6:	f3c3 1341 	ubfx	r3, r3, #5, #2
 80047aa:	f363 1046 	bfi	r0, r3, #5, #2
 80047ae:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        new_obj->realign.align        = copy->realign.align;
 80047b2:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
 80047b6:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
        new_obj->realign.xofs         = copy->realign.xofs;
 80047ba:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80047bc:	6463      	str	r3, [r4, #68]	; 0x44
        new_obj->realign.auto_realign = copy->realign.auto_realign;
 80047be:	f895 3049 	ldrb.w	r3, [r5, #73]	; 0x49
 80047c2:	f363 0200 	bfi	r2, r3, #0, #1
        new_obj->realign.base         = copy->realign.base;
 80047c6:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        new_obj->realign.auto_realign = copy->realign.auto_realign;
 80047c8:	f884 2049 	strb.w	r2, [r4, #73]	; 0x49
        new_obj->realign.base         = copy->realign.base;
 80047cc:	6423      	str	r3, [r4, #64]	; 0x40
        new_obj->adv_hittest  = copy->adv_hittest;
 80047ce:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
        new_obj->event_cb = copy->event_cb;
 80047d2:	69aa      	ldr	r2, [r5, #24]
        new_obj->adv_hittest  = copy->adv_hittest;
 80047d4:	09db      	lsrs	r3, r3, #7
        new_obj->event_cb = copy->event_cb;
 80047d6:	61a2      	str	r2, [r4, #24]
        new_obj->drag_dir     = copy->drag_dir;
 80047d8:	b2c2      	uxtb	r2, r0
        new_obj->adv_hittest  = copy->adv_hittest;
 80047da:	f363 11c7 	bfi	r1, r3, #7, #1
 80047de:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
        new_obj->click        = copy->click;
 80047e2:	f895 1034 	ldrb.w	r1, [r5, #52]	; 0x34
 80047e6:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 80047ea:	f361 0300 	bfi	r3, r1, #0, #1
 80047ee:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        new_obj->drag         = copy->drag;
 80047f2:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
 80047f6:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
 80047fa:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80047fe:	f363 0141 	bfi	r1, r3, #1, #1
 8004802:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
        new_obj->drag_throw   = copy->drag_throw;
 8004806:	b2c9      	uxtb	r1, r1
        new_obj->drag_dir     = copy->drag_dir;
 8004808:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
 800480c:	f3c3 0382 	ubfx	r3, r3, #2, #3
 8004810:	f363 0284 	bfi	r2, r3, #2, #3
 8004814:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
        new_obj->gesture_parent = copy->gesture_parent;
 8004818:	b2d2      	uxtb	r2, r2
        new_obj->drag_throw   = copy->drag_throw;
 800481a:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
 800481e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004822:	f363 0182 	bfi	r1, r3, #2, #1
 8004826:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
        new_obj->drag_parent  = copy->drag_parent;
 800482a:	b2c9      	uxtb	r1, r1
 800482c:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
 8004830:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004834:	f363 01c3 	bfi	r1, r3, #3, #1
 8004838:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
        new_obj->hidden       = copy->hidden;
 800483c:	b2c9      	uxtb	r1, r1
 800483e:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
 8004842:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004846:	f363 1104 	bfi	r1, r3, #4, #1
 800484a:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
        new_obj->top          = copy->top;
 800484e:	b2c9      	uxtb	r1, r1
 8004850:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
 8004854:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004858:	f363 1145 	bfi	r1, r3, #5, #1
 800485c:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
        new_obj->parent_event = copy->parent_event;
 8004860:	b2c9      	uxtb	r1, r1
 8004862:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
 8004866:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800486a:	f363 1186 	bfi	r1, r3, #6, #1
 800486e:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
        new_obj->protect      = copy->protect;
 8004872:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8004876:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        new_obj->gesture_parent = copy->gesture_parent;
 800487a:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
 800487e:	f363 0200 	bfi	r2, r3, #0, #1
 8004882:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
        new_obj->focus_parent = copy->focus_parent;
 8004886:	b2d2      	uxtb	r2, r2
 8004888:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
 800488c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004890:	f363 0241 	bfi	r2, r3, #1, #1
 8004894:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
        if(copy->group_p != NULL) {
 8004898:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 800489a:	b110      	cbz	r0, 80048a2 <lv_obj_create+0x252>
            lv_group_add_obj(copy->group_p, new_obj);
 800489c:	4621      	mov	r1, r4
 800489e:	f7fc fedb 	bl	8001658 <lv_group_add_obj>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80048a2:	4628      	mov	r0, r5
 80048a4:	f00f ff90 	bl	80147c8 <lv_debug_check_null>
 80048a8:	4603      	mov	r3, r0
 80048aa:	2800      	cmp	r0, #0
 80048ac:	d053      	beq.n	8004956 <lv_obj_create+0x306>
        if(lv_obj_get_parent(copy) != NULL && parent != NULL) {
 80048ae:	682b      	ldr	r3, [r5, #0]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	f000 80c7 	beq.w	8004a44 <lv_obj_create+0x3f4>
 80048b6:	2e00      	cmp	r6, #0
 80048b8:	d049      	beq.n	800494e <lv_obj_create+0x2fe>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80048ba:	4628      	mov	r0, r5
 80048bc:	f00f ff84 	bl	80147c8 <lv_debug_check_null>
 80048c0:	4603      	mov	r3, r0
 80048c2:	2800      	cmp	r0, #0
 80048c4:	f040 808e 	bne.w	80049e4 <lv_obj_create+0x394>
 80048c8:	462a      	mov	r2, r5
 80048ca:	4843      	ldr	r0, [pc, #268]	; (80049d8 <lv_obj_create+0x388>)
 80048cc:	f00f ff80 	bl	80147d0 <lv_debug_log_error>
 80048d0:	e7fe      	b.n	80048d0 <lv_obj_create+0x280>
        LV_ASSERT_OBJ(parent, LV_OBJX_NAME);
 80048d2:	4632      	mov	r2, r6
 80048d4:	4840      	ldr	r0, [pc, #256]	; (80049d8 <lv_obj_create+0x388>)
 80048d6:	f00f ff7b 	bl	80147d0 <lv_debug_log_error>
 80048da:	e7fe      	b.n	80048da <lv_obj_create+0x28a>
        lv_disp_t * disp = lv_disp_get_default();
 80048dc:	f00e ffd6 	bl	801388c <lv_disp_get_default>
        if(!disp) {
 80048e0:	2800      	cmp	r0, #0
 80048e2:	d051      	beq.n	8004988 <lv_obj_create+0x338>
        new_obj = _lv_ll_ins_head(&disp->scr_ll);
 80048e4:	3038      	adds	r0, #56	; 0x38
 80048e6:	f010 f86b 	bl	80149c0 <_lv_ll_ins_head>
 80048ea:	4604      	mov	r4, r0
        LV_ASSERT_MEM(new_obj);
 80048ec:	f00f ff6c 	bl	80147c8 <lv_debug_check_null>
 80048f0:	4603      	mov	r3, r0
 80048f2:	2800      	cmp	r0, #0
 80048f4:	d052      	beq.n	800499c <lv_obj_create+0x34c>
        if(new_obj == NULL) return NULL;
 80048f6:	2c00      	cmp	r4, #0
 80048f8:	d046      	beq.n	8004988 <lv_obj_create+0x338>
        _lv_memset_00(new_obj, sizeof(lv_obj_t));
 80048fa:	214c      	movs	r1, #76	; 0x4c
 80048fc:	4620      	mov	r0, r4
 80048fe:	f010 ff3b 	bl	8015778 <_lv_memset_00>
        new_obj->base_dir     = LV_BIDI_DIR_LTR;
 8004902:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
        new_obj->signal_cb = lv_obj_signal;
 8004906:	4932      	ldr	r1, [pc, #200]	; (80049d0 <lv_obj_create+0x380>)
        new_obj->coords.x2    = lv_disp_get_hor_res(NULL) - 1;
 8004908:	4630      	mov	r0, r6
        new_obj->base_dir     = LV_BIDI_DIR_LTR;
 800490a:	f366 1346 	bfi	r3, r6, #5, #2
        new_obj->design_cb = lv_obj_design;
 800490e:	4a31      	ldr	r2, [pc, #196]	; (80049d4 <lv_obj_create+0x384>)
        new_obj->event_cb = NULL;
 8004910:	61a6      	str	r6, [r4, #24]
        new_obj->base_dir     = LV_BIDI_DIR_LTR;
 8004912:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        new_obj->coords.x1    = 0;
 8004916:	6126      	str	r6, [r4, #16]
        new_obj->design_cb = lv_obj_design;
 8004918:	e9c4 1207 	strd	r1, r2, [r4, #28]
        new_obj->coords.x2    = lv_disp_get_hor_res(NULL) - 1;
 800491c:	f00e ffbc 	bl	8013898 <lv_disp_get_hor_res>
 8004920:	4603      	mov	r3, r0
        new_obj->coords.y2    = lv_disp_get_ver_res(NULL) - 1;
 8004922:	4630      	mov	r0, r6
        new_obj->coords.x2    = lv_disp_get_hor_res(NULL) - 1;
 8004924:	3b01      	subs	r3, #1
 8004926:	82a3      	strh	r3, [r4, #20]
        new_obj->coords.y2    = lv_disp_get_ver_res(NULL) - 1;
 8004928:	f00e ffc8 	bl	80138bc <lv_disp_get_ver_res>
 800492c:	3801      	subs	r0, #1
 800492e:	82e0      	strh	r0, [r4, #22]
 8004930:	e6e7      	b.n	8004702 <lv_obj_create+0xb2>
        if(parent != NULL) lv_theme_apply(new_obj, LV_THEME_OBJ);
 8004932:	2e00      	cmp	r6, #0
 8004934:	d046      	beq.n	80049c4 <lv_obj_create+0x374>
 8004936:	2102      	movs	r1, #2
 8004938:	4620      	mov	r0, r4
 800493a:	f011 fcbb 	bl	80162b4 <lv_theme_apply>
        parent->signal_cb(parent, LV_SIGNAL_CHILD_CHG, new_obj);
 800493e:	69f3      	ldr	r3, [r6, #28]
 8004940:	4630      	mov	r0, r6
 8004942:	4622      	mov	r2, r4
 8004944:	2101      	movs	r1, #1
 8004946:	4798      	blx	r3
        lv_obj_invalidate(new_obj);
 8004948:	4620      	mov	r0, r4
 800494a:	f7ff f921 	bl	8003b90 <lv_obj_invalidate>
}
 800494e:	4620      	mov	r0, r4
 8004950:	b002      	add	sp, #8
 8004952:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8004956:	462a      	mov	r2, r5
 8004958:	481f      	ldr	r0, [pc, #124]	; (80049d8 <lv_obj_create+0x388>)
 800495a:	f00f ff39 	bl	80147d0 <lv_debug_log_error>
 800495e:	e7fe      	b.n	800495e <lv_obj_create+0x30e>
 8004960:	4622      	mov	r2, r4
 8004962:	481d      	ldr	r0, [pc, #116]	; (80049d8 <lv_obj_create+0x388>)
 8004964:	f00f ff34 	bl	80147d0 <lv_debug_log_error>
 8004968:	e7fe      	b.n	8004968 <lv_obj_create+0x318>
        new_obj->coords.y2    = parent->coords.y1 + LV_OBJ_DEF_HEIGHT;
 800496a:	4640      	mov	r0, r8
 800496c:	f00e ffb8 	bl	80138e0 <lv_disp_get_dpi>
 8004970:	2332      	movs	r3, #50	; 0x32
 8004972:	2150      	movs	r1, #80	; 0x50
 8004974:	4a19      	ldr	r2, [pc, #100]	; (80049dc <lv_obj_create+0x38c>)
 8004976:	fb00 1003 	mla	r0, r0, r3, r1
 800497a:	fb82 3200 	smull	r3, r2, r2, r0
 800497e:	17c3      	asrs	r3, r0, #31
 8004980:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 8004984:	b29b      	uxth	r3, r3
 8004986:	e6a1      	b.n	80046cc <lv_obj_create+0x7c>
            return NULL;
 8004988:	2400      	movs	r4, #0
}
 800498a:	4620      	mov	r0, r4
 800498c:	b002      	add	sp, #8
 800498e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        LV_ASSERT_MEM(new_obj);
 8004992:	4622      	mov	r2, r4
 8004994:	4812      	ldr	r0, [pc, #72]	; (80049e0 <lv_obj_create+0x390>)
 8004996:	f00f ff1b 	bl	80147d0 <lv_debug_log_error>
 800499a:	e7fe      	b.n	800499a <lv_obj_create+0x34a>
        LV_ASSERT_MEM(new_obj);
 800499c:	4622      	mov	r2, r4
 800499e:	4810      	ldr	r0, [pc, #64]	; (80049e0 <lv_obj_create+0x390>)
 80049a0:	f00f ff16 	bl	80147d0 <lv_debug_log_error>
 80049a4:	e7fe      	b.n	80049a4 <lv_obj_create+0x354>
            new_obj->coords.x2    = parent->coords.x1 + LV_OBJ_DEF_WIDTH;
 80049a6:	2000      	movs	r0, #0
 80049a8:	f00e ff9a 	bl	80138e0 <lv_disp_get_dpi>
 80049ac:	2364      	movs	r3, #100	; 0x64
 80049ae:	2150      	movs	r1, #80	; 0x50
 80049b0:	4a0a      	ldr	r2, [pc, #40]	; (80049dc <lv_obj_create+0x38c>)
 80049b2:	fb00 1003 	mla	r0, r0, r3, r1
 80049b6:	fb82 3200 	smull	r3, r2, r2, r0
 80049ba:	17c3      	asrs	r3, r0, #31
 80049bc:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	e69c      	b.n	80046fe <lv_obj_create+0xae>
        else lv_theme_apply(new_obj, LV_THEME_SCR);
 80049c4:	2101      	movs	r1, #1
 80049c6:	4620      	mov	r0, r4
 80049c8:	f011 fc74 	bl	80162b4 <lv_theme_apply>
    if(parent != NULL) {
 80049cc:	e7bf      	b.n	800494e <lv_obj_create+0x2fe>
 80049ce:	bf00      	nop
 80049d0:	08007a3d 	.word	0x08007a3d
 80049d4:	08006909 	.word	0x08006909
 80049d8:	0801e1d4 	.word	0x0801e1d4
 80049dc:	66666667 	.word	0x66666667
 80049e0:	0801e1c4 	.word	0x0801e1c4
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80049e4:	4628      	mov	r0, r5
 80049e6:	f00f feef 	bl	80147c8 <lv_debug_check_null>
 80049ea:	4603      	mov	r3, r0
 80049ec:	2800      	cmp	r0, #0
 80049ee:	d03e      	beq.n	8004a6e <lv_obj_create+0x41e>
    return obj->parent;
 80049f0:	682b      	ldr	r3, [r5, #0]
    if(parent) {
 80049f2:	b323      	cbz	r3, 8004a3e <lv_obj_create+0x3ee>
        rel_x             = obj->coords.x1 - parent->coords.x1;
 80049f4:	8a1b      	ldrh	r3, [r3, #16]
 80049f6:	8a2f      	ldrh	r7, [r5, #16]
 80049f8:	1aff      	subs	r7, r7, r3
 80049fa:	b23f      	sxth	r7, r7
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80049fc:	4628      	mov	r0, r5
 80049fe:	f00f fee3 	bl	80147c8 <lv_debug_check_null>
 8004a02:	4603      	mov	r3, r0
 8004a04:	b920      	cbnz	r0, 8004a10 <lv_obj_create+0x3c0>
 8004a06:	462a      	mov	r2, r5
 8004a08:	4822      	ldr	r0, [pc, #136]	; (8004a94 <lv_obj_create+0x444>)
 8004a0a:	f00f fee1 	bl	80147d0 <lv_debug_log_error>
 8004a0e:	e7fe      	b.n	8004a0e <lv_obj_create+0x3be>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8004a10:	4628      	mov	r0, r5
 8004a12:	f00f fed9 	bl	80147c8 <lv_debug_check_null>
 8004a16:	4603      	mov	r3, r0
 8004a18:	2800      	cmp	r0, #0
 8004a1a:	d035      	beq.n	8004a88 <lv_obj_create+0x438>
    return obj->parent;
 8004a1c:	682b      	ldr	r3, [r5, #0]
    if(parent) {
 8004a1e:	b383      	cbz	r3, 8004a82 <lv_obj_create+0x432>
        rel_y             = obj->coords.y1 - parent->coords.y1;
 8004a20:	8a6d      	ldrh	r5, [r5, #18]
 8004a22:	8a5b      	ldrh	r3, [r3, #18]
 8004a24:	1aed      	subs	r5, r5, r3
 8004a26:	b22d      	sxth	r5, r5
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8004a28:	4620      	mov	r0, r4
 8004a2a:	f00f fecd 	bl	80147c8 <lv_debug_check_null>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	b310      	cbz	r0, 8004a78 <lv_obj_create+0x428>
 8004a32:	462a      	mov	r2, r5
 8004a34:	4639      	mov	r1, r7
 8004a36:	4620      	mov	r0, r4
 8004a38:	f7ff f930 	bl	8003c9c <lv_obj_set_pos.part.0>
    if(parent != NULL) {
 8004a3c:	e77f      	b.n	800493e <lv_obj_create+0x2ee>
        rel_x = obj->coords.x1;
 8004a3e:	f9b5 7010 	ldrsh.w	r7, [r5, #16]
 8004a42:	e7db      	b.n	80049fc <lv_obj_create+0x3ac>
    if(parent != NULL) {
 8004a44:	2e00      	cmp	r6, #0
 8004a46:	f47f af7a 	bne.w	800493e <lv_obj_create+0x2ee>
 8004a4a:	e780      	b.n	800494e <lv_obj_create+0x2fe>
 8004a4c:	7c2b      	ldrb	r3, [r5, #16]
 8004a4e:	7423      	strb	r3, [r4, #16]
 8004a50:	7c6b      	ldrb	r3, [r5, #17]
 8004a52:	7463      	strb	r3, [r4, #17]
 8004a54:	7cab      	ldrb	r3, [r5, #18]
 8004a56:	74a3      	strb	r3, [r4, #18]
 8004a58:	7ceb      	ldrb	r3, [r5, #19]
 8004a5a:	74e3      	strb	r3, [r4, #19]
 8004a5c:	7d2b      	ldrb	r3, [r5, #20]
 8004a5e:	7523      	strb	r3, [r4, #20]
 8004a60:	7d6b      	ldrb	r3, [r5, #21]
 8004a62:	7563      	strb	r3, [r4, #21]
 8004a64:	7dab      	ldrb	r3, [r5, #22]
 8004a66:	75a3      	strb	r3, [r4, #22]
 8004a68:	7deb      	ldrb	r3, [r5, #23]
 8004a6a:	75e3      	strb	r3, [r4, #23]
    while(len) {
 8004a6c:	e688      	b.n	8004780 <lv_obj_create+0x130>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8004a6e:	462a      	mov	r2, r5
 8004a70:	4808      	ldr	r0, [pc, #32]	; (8004a94 <lv_obj_create+0x444>)
 8004a72:	f00f fead 	bl	80147d0 <lv_debug_log_error>
 8004a76:	e7fe      	b.n	8004a76 <lv_obj_create+0x426>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8004a78:	4622      	mov	r2, r4
 8004a7a:	4806      	ldr	r0, [pc, #24]	; (8004a94 <lv_obj_create+0x444>)
 8004a7c:	f00f fea8 	bl	80147d0 <lv_debug_log_error>
 8004a80:	e7fe      	b.n	8004a80 <lv_obj_create+0x430>
        rel_y = obj->coords.y1;
 8004a82:	f9b5 5012 	ldrsh.w	r5, [r5, #18]
 8004a86:	e7cf      	b.n	8004a28 <lv_obj_create+0x3d8>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8004a88:	462a      	mov	r2, r5
 8004a8a:	4802      	ldr	r0, [pc, #8]	; (8004a94 <lv_obj_create+0x444>)
 8004a8c:	f00f fea0 	bl	80147d0 <lv_debug_log_error>
 8004a90:	e7fe      	b.n	8004a90 <lv_obj_create+0x440>
 8004a92:	bf00      	nop
 8004a94:	0801e1d4 	.word	0x0801e1d4

08004a98 <lv_obj_set_size.part.0>:
void lv_obj_set_size(lv_obj_t * obj, lv_coord_t w, lv_coord_t h)
 8004a98:	b570      	push	{r4, r5, r6, lr}
 8004a9a:	4605      	mov	r5, r0
 8004a9c:	b082      	sub	sp, #8
 8004a9e:	460e      	mov	r6, r1
 8004aa0:	4614      	mov	r4, r2
    lv_obj_invalidate(obj);
 8004aa2:	f7ff f875 	bl	8003b90 <lv_obj_invalidate>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8004aa6:	4628      	mov	r0, r5
 8004aa8:	f00f fe8e 	bl	80147c8 <lv_debug_check_null>
 8004aac:	2800      	cmp	r0, #0
 8004aae:	d041      	beq.n	8004b34 <lv_obj_set_size.part.0+0x9c>
 8004ab0:	4629      	mov	r1, r5
    obj->coords.y2 = obj->coords.y1 + h - 1;
 8004ab2:	1e62      	subs	r2, r4, #1
 8004ab4:	8a6c      	ldrh	r4, [r5, #18]
 8004ab6:	466b      	mov	r3, sp
 8004ab8:	f851 0f10 	ldr.w	r0, [r1, #16]!
 8004abc:	4422      	add	r2, r4
 8004abe:	6849      	ldr	r1, [r1, #4]
 8004ac0:	82ea      	strh	r2, [r5, #22]
 8004ac2:	c303      	stmia	r3!, {r0, r1}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8004ac4:	4628      	mov	r0, r5
 8004ac6:	f00f fe7f 	bl	80147c8 <lv_debug_check_null>
 8004aca:	b368      	cbz	r0, 8004b28 <lv_obj_set_size.part.0+0x90>
        obj->coords.x2 = obj->coords.x1 + w - 1;
 8004acc:	8a29      	ldrh	r1, [r5, #16]
 8004ace:	3e01      	subs	r6, #1
    obj->signal_cb(obj, LV_SIGNAL_COORD_CHG, &ori);
 8004ad0:	69eb      	ldr	r3, [r5, #28]
 8004ad2:	466a      	mov	r2, sp
        obj->coords.x2 = obj->coords.x1 + w - 1;
 8004ad4:	440e      	add	r6, r1
    obj->signal_cb(obj, LV_SIGNAL_COORD_CHG, &ori);
 8004ad6:	4628      	mov	r0, r5
 8004ad8:	2102      	movs	r1, #2
        obj->coords.x2 = obj->coords.x1 + w - 1;
 8004ada:	82ae      	strh	r6, [r5, #20]
    obj->signal_cb(obj, LV_SIGNAL_COORD_CHG, &ori);
 8004adc:	4798      	blx	r3
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8004ade:	4628      	mov	r0, r5
 8004ae0:	f00f fe72 	bl	80147c8 <lv_debug_check_null>
 8004ae4:	b360      	cbz	r0, 8004b40 <lv_obj_set_size.part.0+0xa8>
    return obj->parent;
 8004ae6:	6828      	ldr	r0, [r5, #0]
    if(par != NULL) par->signal_cb(par, LV_SIGNAL_CHILD_CHG, obj);
 8004ae8:	b118      	cbz	r0, 8004af2 <lv_obj_set_size.part.0+0x5a>
 8004aea:	69c3      	ldr	r3, [r0, #28]
 8004aec:	462a      	mov	r2, r5
 8004aee:	2101      	movs	r1, #1
 8004af0:	4798      	blx	r3
    _LV_LL_READ(obj->child_ll, i) {
 8004af2:	1d2e      	adds	r6, r5, #4
 8004af4:	4630      	mov	r0, r6
 8004af6:	f010 f839 	bl	8014b6c <_lv_ll_get_head>
 8004afa:	4604      	mov	r4, r0
 8004afc:	b158      	cbz	r0, 8004b16 <lv_obj_set_size.part.0+0x7e>
        i->signal_cb(i, LV_SIGNAL_PARENT_SIZE_CHG,  &ori);
 8004afe:	69e3      	ldr	r3, [r4, #28]
 8004b00:	466a      	mov	r2, sp
 8004b02:	2103      	movs	r1, #3
 8004b04:	4620      	mov	r0, r4
 8004b06:	4798      	blx	r3
    _LV_LL_READ(obj->child_ll, i) {
 8004b08:	4621      	mov	r1, r4
 8004b0a:	4630      	mov	r0, r6
 8004b0c:	f010 f836 	bl	8014b7c <_lv_ll_get_next>
 8004b10:	4604      	mov	r4, r0
 8004b12:	2800      	cmp	r0, #0
 8004b14:	d1f3      	bne.n	8004afe <lv_obj_set_size.part.0+0x66>
    lv_obj_invalidate(obj);
 8004b16:	4628      	mov	r0, r5
 8004b18:	f7ff f83a 	bl	8003b90 <lv_obj_invalidate>
    if(obj->realign.auto_realign) lv_obj_realign(obj);
 8004b1c:	f895 3049 	ldrb.w	r3, [r5, #73]	; 0x49
 8004b20:	07db      	lsls	r3, r3, #31
 8004b22:	d413      	bmi.n	8004b4c <lv_obj_set_size.part.0+0xb4>
}
 8004b24:	b002      	add	sp, #8
 8004b26:	bd70      	pop	{r4, r5, r6, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8004b28:	4603      	mov	r3, r0
 8004b2a:	462a      	mov	r2, r5
 8004b2c:	4809      	ldr	r0, [pc, #36]	; (8004b54 <lv_obj_set_size.part.0+0xbc>)
 8004b2e:	f00f fe4f 	bl	80147d0 <lv_debug_log_error>
 8004b32:	e7fe      	b.n	8004b32 <lv_obj_set_size.part.0+0x9a>
 8004b34:	4603      	mov	r3, r0
 8004b36:	462a      	mov	r2, r5
 8004b38:	4806      	ldr	r0, [pc, #24]	; (8004b54 <lv_obj_set_size.part.0+0xbc>)
 8004b3a:	f00f fe49 	bl	80147d0 <lv_debug_log_error>
 8004b3e:	e7fe      	b.n	8004b3e <lv_obj_set_size.part.0+0xa6>
 8004b40:	4603      	mov	r3, r0
 8004b42:	462a      	mov	r2, r5
 8004b44:	4803      	ldr	r0, [pc, #12]	; (8004b54 <lv_obj_set_size.part.0+0xbc>)
 8004b46:	f00f fe43 	bl	80147d0 <lv_debug_log_error>
 8004b4a:	e7fe      	b.n	8004b4a <lv_obj_set_size.part.0+0xb2>
    if(obj->realign.auto_realign) lv_obj_realign(obj);
 8004b4c:	4628      	mov	r0, r5
 8004b4e:	f7ff fce7 	bl	8004520 <lv_obj_realign>
 8004b52:	e7e7      	b.n	8004b24 <lv_obj_set_size.part.0+0x8c>
 8004b54:	0801e1d4 	.word	0x0801e1d4

08004b58 <lv_obj_set_size>:
{
 8004b58:	b570      	push	{r4, r5, r6, lr}
 8004b5a:	460e      	mov	r6, r1
 8004b5c:	4615      	mov	r5, r2
 8004b5e:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8004b60:	f00f fe32 	bl	80147c8 <lv_debug_check_null>
 8004b64:	b928      	cbnz	r0, 8004b72 <lv_obj_set_size+0x1a>
 8004b66:	4603      	mov	r3, r0
 8004b68:	4622      	mov	r2, r4
 8004b6a:	4817      	ldr	r0, [pc, #92]	; (8004bc8 <lv_obj_set_size+0x70>)
 8004b6c:	f00f fe30 	bl	80147d0 <lv_debug_log_error>
 8004b70:	e7fe      	b.n	8004b70 <lv_obj_set_size+0x18>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8004b72:	4620      	mov	r0, r4
 8004b74:	f00f fe28 	bl	80147c8 <lv_debug_check_null>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	b1d0      	cbz	r0, 8004bb2 <lv_obj_set_size+0x5a>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8004b7c:	8aa3      	ldrh	r3, [r4, #20]
 8004b7e:	8a22      	ldrh	r2, [r4, #16]
 8004b80:	3301      	adds	r3, #1
 8004b82:	1a9b      	subs	r3, r3, r2
    if(lv_obj_get_width(obj) == w && lv_obj_get_height(obj) == h) {
 8004b84:	b21b      	sxth	r3, r3
 8004b86:	429e      	cmp	r6, r3
 8004b88:	d006      	beq.n	8004b98 <lv_obj_set_size+0x40>
 8004b8a:	462a      	mov	r2, r5
 8004b8c:	4631      	mov	r1, r6
 8004b8e:	4620      	mov	r0, r4
}
 8004b90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004b94:	f7ff bf80 	b.w	8004a98 <lv_obj_set_size.part.0>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8004b98:	4620      	mov	r0, r4
 8004b9a:	f00f fe15 	bl	80147c8 <lv_debug_check_null>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	b160      	cbz	r0, 8004bbc <lv_obj_set_size+0x64>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8004ba2:	8ae3      	ldrh	r3, [r4, #22]
 8004ba4:	8a62      	ldrh	r2, [r4, #18]
 8004ba6:	3301      	adds	r3, #1
 8004ba8:	1a9b      	subs	r3, r3, r2
    if(lv_obj_get_width(obj) == w && lv_obj_get_height(obj) == h) {
 8004baa:	b21b      	sxth	r3, r3
 8004bac:	429d      	cmp	r5, r3
 8004bae:	d1ec      	bne.n	8004b8a <lv_obj_set_size+0x32>
}
 8004bb0:	bd70      	pop	{r4, r5, r6, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8004bb2:	4622      	mov	r2, r4
 8004bb4:	4804      	ldr	r0, [pc, #16]	; (8004bc8 <lv_obj_set_size+0x70>)
 8004bb6:	f00f fe0b 	bl	80147d0 <lv_debug_log_error>
 8004bba:	e7fe      	b.n	8004bba <lv_obj_set_size+0x62>
 8004bbc:	4622      	mov	r2, r4
 8004bbe:	4802      	ldr	r0, [pc, #8]	; (8004bc8 <lv_obj_set_size+0x70>)
 8004bc0:	f00f fe06 	bl	80147d0 <lv_debug_log_error>
 8004bc4:	e7fe      	b.n	8004bc4 <lv_obj_set_size+0x6c>
 8004bc6:	bf00      	nop
 8004bc8:	0801e1d4 	.word	0x0801e1d4

08004bcc <lv_obj_del>:
{
 8004bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bce:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8004bd0:	f00f fdfa 	bl	80147c8 <lv_debug_check_null>
 8004bd4:	b928      	cbnz	r0, 8004be2 <lv_obj_del+0x16>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	4622      	mov	r2, r4
 8004bda:	4815      	ldr	r0, [pc, #84]	; (8004c30 <lv_obj_del+0x64>)
 8004bdc:	f00f fdf8 	bl	80147d0 <lv_debug_log_error>
 8004be0:	e7fe      	b.n	8004be0 <lv_obj_del+0x14>
    lv_obj_invalidate(obj);
 8004be2:	4620      	mov	r0, r4
 8004be4:	f7fe ffd4 	bl	8003b90 <lv_obj_invalidate>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8004be8:	4620      	mov	r0, r4
 8004bea:	f00f fded 	bl	80147c8 <lv_debug_check_null>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	b1c8      	cbz	r0, 8004c26 <lv_obj_del+0x5a>
    return obj->parent;
 8004bf2:	6826      	ldr	r6, [r4, #0]
        disp = lv_obj_get_disp(obj);
 8004bf4:	4620      	mov	r0, r4
    if(par == NULL) {
 8004bf6:	b146      	cbz	r6, 8004c0a <lv_obj_del+0x3e>
    obj_del_core(obj);
 8004bf8:	f7fe ff2c 	bl	8003a54 <obj_del_core>
        par->signal_cb(par, LV_SIGNAL_CHILD_CHG, NULL);
 8004bfc:	69f3      	ldr	r3, [r6, #28]
 8004bfe:	4630      	mov	r0, r6
 8004c00:	2200      	movs	r2, #0
 8004c02:	2101      	movs	r1, #1
 8004c04:	4798      	blx	r3
}
 8004c06:	2000      	movs	r0, #0
 8004c08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        disp = lv_obj_get_disp(obj);
 8004c0a:	f7fe fe2f 	bl	800386c <lv_obj_get_disp>
        if(!disp) return LV_RES_INV;   /*Shouldn't happen*/
 8004c0e:	4605      	mov	r5, r0
 8004c10:	2800      	cmp	r0, #0
 8004c12:	d0f8      	beq.n	8004c06 <lv_obj_del+0x3a>
        if(disp->act_scr == obj) act_scr_del = true;
 8004c14:	6c47      	ldr	r7, [r0, #68]	; 0x44
    obj_del_core(obj);
 8004c16:	4620      	mov	r0, r4
 8004c18:	f7fe ff1c 	bl	8003a54 <obj_del_core>
    if(act_scr_del)  {
 8004c1c:	42bc      	cmp	r4, r7
 8004c1e:	d1f2      	bne.n	8004c06 <lv_obj_del+0x3a>
}
 8004c20:	2000      	movs	r0, #0
        disp->act_scr = NULL;
 8004c22:	646e      	str	r6, [r5, #68]	; 0x44
}
 8004c24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8004c26:	4622      	mov	r2, r4
 8004c28:	4801      	ldr	r0, [pc, #4]	; (8004c30 <lv_obj_del+0x64>)
 8004c2a:	f00f fdd1 	bl	80147d0 <lv_debug_log_error>
 8004c2e:	e7fe      	b.n	8004c2e <lv_obj_del+0x62>
 8004c30:	0801e1d4 	.word	0x0801e1d4

08004c34 <lv_obj_get_parent>:
{
 8004c34:	b510      	push	{r4, lr}
 8004c36:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8004c38:	f00f fdc6 	bl	80147c8 <lv_debug_check_null>
 8004c3c:	b108      	cbz	r0, 8004c42 <lv_obj_get_parent+0xe>
}
 8004c3e:	6820      	ldr	r0, [r4, #0]
 8004c40:	bd10      	pop	{r4, pc}
 8004c42:	4603      	mov	r3, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8004c44:	4622      	mov	r2, r4
 8004c46:	4802      	ldr	r0, [pc, #8]	; (8004c50 <lv_obj_get_parent+0x1c>)
 8004c48:	f00f fdc2 	bl	80147d0 <lv_debug_log_error>
 8004c4c:	e7fe      	b.n	8004c4c <lv_obj_get_parent+0x18>
 8004c4e:	bf00      	nop
 8004c50:	0801e1d4 	.word	0x0801e1d4

08004c54 <lv_obj_get_child>:
{
 8004c54:	b538      	push	{r3, r4, r5, lr}
 8004c56:	460d      	mov	r5, r1
 8004c58:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8004c5a:	f00f fdb5 	bl	80147c8 <lv_debug_check_null>
 8004c5e:	b158      	cbz	r0, 8004c78 <lv_obj_get_child+0x24>
    if(child == NULL) {
 8004c60:	b12d      	cbz	r5, 8004c6e <lv_obj_get_child+0x1a>
        result = _lv_ll_get_next(&obj->child_ll, child);
 8004c62:	4629      	mov	r1, r5
 8004c64:	1d20      	adds	r0, r4, #4
}
 8004c66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        result = _lv_ll_get_next(&obj->child_ll, child);
 8004c6a:	f00f bf87 	b.w	8014b7c <_lv_ll_get_next>
        result = _lv_ll_get_head(&obj->child_ll);
 8004c6e:	1d20      	adds	r0, r4, #4
}
 8004c70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        result = _lv_ll_get_head(&obj->child_ll);
 8004c74:	f00f bf7a 	b.w	8014b6c <_lv_ll_get_head>
 8004c78:	4603      	mov	r3, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8004c7a:	4622      	mov	r2, r4
 8004c7c:	4801      	ldr	r0, [pc, #4]	; (8004c84 <lv_obj_get_child+0x30>)
 8004c7e:	f00f fda7 	bl	80147d0 <lv_debug_log_error>
 8004c82:	e7fe      	b.n	8004c82 <lv_obj_get_child+0x2e>
 8004c84:	0801e1d4 	.word	0x0801e1d4

08004c88 <lv_obj_get_coords>:
{
 8004c88:	b538      	push	{r3, r4, r5, lr}
 8004c8a:	460d      	mov	r5, r1
 8004c8c:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8004c8e:	f00f fd9b 	bl	80147c8 <lv_debug_check_null>
 8004c92:	b168      	cbz	r0, 8004cb0 <lv_obj_get_coords+0x28>
 8004c94:	f104 0310 	add.w	r3, r4, #16
 8004c98:	1d2a      	adds	r2, r5, #4
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d203      	bcs.n	8004ca6 <lv_obj_get_coords+0x1e>
 8004c9e:	f104 0314 	add.w	r3, r4, #20
 8004ca2:	429d      	cmp	r5, r3
 8004ca4:	d30a      	bcc.n	8004cbc <lv_obj_get_coords+0x34>
        *d8 = *s8;
 8004ca6:	6923      	ldr	r3, [r4, #16]
 8004ca8:	602b      	str	r3, [r5, #0]
 8004caa:	6963      	ldr	r3, [r4, #20]
 8004cac:	606b      	str	r3, [r5, #4]
}
 8004cae:	bd38      	pop	{r3, r4, r5, pc}
 8004cb0:	4603      	mov	r3, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8004cb2:	4622      	mov	r2, r4
 8004cb4:	480a      	ldr	r0, [pc, #40]	; (8004ce0 <lv_obj_get_coords+0x58>)
 8004cb6:	f00f fd8b 	bl	80147d0 <lv_debug_log_error>
 8004cba:	e7fe      	b.n	8004cba <lv_obj_get_coords+0x32>
 8004cbc:	7c23      	ldrb	r3, [r4, #16]
 8004cbe:	702b      	strb	r3, [r5, #0]
 8004cc0:	7c63      	ldrb	r3, [r4, #17]
 8004cc2:	706b      	strb	r3, [r5, #1]
 8004cc4:	7ca3      	ldrb	r3, [r4, #18]
 8004cc6:	70ab      	strb	r3, [r5, #2]
 8004cc8:	7ce3      	ldrb	r3, [r4, #19]
 8004cca:	70eb      	strb	r3, [r5, #3]
 8004ccc:	7d23      	ldrb	r3, [r4, #20]
 8004cce:	712b      	strb	r3, [r5, #4]
 8004cd0:	7d63      	ldrb	r3, [r4, #21]
 8004cd2:	716b      	strb	r3, [r5, #5]
 8004cd4:	7da3      	ldrb	r3, [r4, #22]
 8004cd6:	71ab      	strb	r3, [r5, #6]
 8004cd8:	7de3      	ldrb	r3, [r4, #23]
 8004cda:	71eb      	strb	r3, [r5, #7]
}
 8004cdc:	bd38      	pop	{r3, r4, r5, pc}
 8004cde:	bf00      	nop
 8004ce0:	0801e1d4 	.word	0x0801e1d4

08004ce4 <lv_obj_get_x>:
{
 8004ce4:	b510      	push	{r4, lr}
 8004ce6:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8004ce8:	f00f fd6e 	bl	80147c8 <lv_debug_check_null>
 8004cec:	b928      	cbnz	r0, 8004cfa <lv_obj_get_x+0x16>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	4622      	mov	r2, r4
 8004cf2:	480c      	ldr	r0, [pc, #48]	; (8004d24 <lv_obj_get_x+0x40>)
 8004cf4:	f00f fd6c 	bl	80147d0 <lv_debug_log_error>
 8004cf8:	e7fe      	b.n	8004cf8 <lv_obj_get_x+0x14>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8004cfa:	4620      	mov	r0, r4
 8004cfc:	f00f fd64 	bl	80147c8 <lv_debug_check_null>
 8004d00:	4603      	mov	r3, r0
 8004d02:	b148      	cbz	r0, 8004d18 <lv_obj_get_x+0x34>
    return obj->parent;
 8004d04:	6823      	ldr	r3, [r4, #0]
    if(parent) {
 8004d06:	b123      	cbz	r3, 8004d12 <lv_obj_get_x+0x2e>
        rel_x             = obj->coords.x1 - parent->coords.x1;
 8004d08:	8a20      	ldrh	r0, [r4, #16]
 8004d0a:	8a1b      	ldrh	r3, [r3, #16]
 8004d0c:	1ac0      	subs	r0, r0, r3
 8004d0e:	b200      	sxth	r0, r0
}
 8004d10:	bd10      	pop	{r4, pc}
        rel_x = obj->coords.x1;
 8004d12:	f9b4 0010 	ldrsh.w	r0, [r4, #16]
}
 8004d16:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8004d18:	4622      	mov	r2, r4
 8004d1a:	4802      	ldr	r0, [pc, #8]	; (8004d24 <lv_obj_get_x+0x40>)
 8004d1c:	f00f fd58 	bl	80147d0 <lv_debug_log_error>
 8004d20:	e7fe      	b.n	8004d20 <lv_obj_get_x+0x3c>
 8004d22:	bf00      	nop
 8004d24:	0801e1d4 	.word	0x0801e1d4

08004d28 <lv_obj_get_y>:
{
 8004d28:	b510      	push	{r4, lr}
 8004d2a:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8004d2c:	f00f fd4c 	bl	80147c8 <lv_debug_check_null>
 8004d30:	b928      	cbnz	r0, 8004d3e <lv_obj_get_y+0x16>
 8004d32:	4603      	mov	r3, r0
 8004d34:	4622      	mov	r2, r4
 8004d36:	480c      	ldr	r0, [pc, #48]	; (8004d68 <lv_obj_get_y+0x40>)
 8004d38:	f00f fd4a 	bl	80147d0 <lv_debug_log_error>
 8004d3c:	e7fe      	b.n	8004d3c <lv_obj_get_y+0x14>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8004d3e:	4620      	mov	r0, r4
 8004d40:	f00f fd42 	bl	80147c8 <lv_debug_check_null>
 8004d44:	4603      	mov	r3, r0
 8004d46:	b148      	cbz	r0, 8004d5c <lv_obj_get_y+0x34>
    return obj->parent;
 8004d48:	6823      	ldr	r3, [r4, #0]
    if(parent) {
 8004d4a:	b123      	cbz	r3, 8004d56 <lv_obj_get_y+0x2e>
        rel_y             = obj->coords.y1 - parent->coords.y1;
 8004d4c:	8a60      	ldrh	r0, [r4, #18]
 8004d4e:	8a5b      	ldrh	r3, [r3, #18]
 8004d50:	1ac0      	subs	r0, r0, r3
 8004d52:	b200      	sxth	r0, r0
}
 8004d54:	bd10      	pop	{r4, pc}
        rel_y = obj->coords.y1;
 8004d56:	f9b4 0012 	ldrsh.w	r0, [r4, #18]
}
 8004d5a:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8004d5c:	4622      	mov	r2, r4
 8004d5e:	4802      	ldr	r0, [pc, #8]	; (8004d68 <lv_obj_get_y+0x40>)
 8004d60:	f00f fd36 	bl	80147d0 <lv_debug_log_error>
 8004d64:	e7fe      	b.n	8004d64 <lv_obj_get_y+0x3c>
 8004d66:	bf00      	nop
 8004d68:	0801e1d4 	.word	0x0801e1d4

08004d6c <lv_obj_get_width>:
{
 8004d6c:	b510      	push	{r4, lr}
 8004d6e:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8004d70:	f00f fd2a 	bl	80147c8 <lv_debug_check_null>
 8004d74:	b128      	cbz	r0, 8004d82 <lv_obj_get_width+0x16>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8004d76:	8aa3      	ldrh	r3, [r4, #20]
 8004d78:	8a20      	ldrh	r0, [r4, #16]
 8004d7a:	3301      	adds	r3, #1
 8004d7c:	1a18      	subs	r0, r3, r0
}
 8004d7e:	b200      	sxth	r0, r0
 8004d80:	bd10      	pop	{r4, pc}
 8004d82:	4603      	mov	r3, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8004d84:	4622      	mov	r2, r4
 8004d86:	4802      	ldr	r0, [pc, #8]	; (8004d90 <lv_obj_get_width+0x24>)
 8004d88:	f00f fd22 	bl	80147d0 <lv_debug_log_error>
 8004d8c:	e7fe      	b.n	8004d8c <lv_obj_get_width+0x20>
 8004d8e:	bf00      	nop
 8004d90:	0801e1d4 	.word	0x0801e1d4

08004d94 <lv_obj_get_height>:
{
 8004d94:	b510      	push	{r4, lr}
 8004d96:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8004d98:	f00f fd16 	bl	80147c8 <lv_debug_check_null>
 8004d9c:	b128      	cbz	r0, 8004daa <lv_obj_get_height+0x16>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8004d9e:	8ae3      	ldrh	r3, [r4, #22]
 8004da0:	8a60      	ldrh	r0, [r4, #18]
 8004da2:	3301      	adds	r3, #1
 8004da4:	1a18      	subs	r0, r3, r0
}
 8004da6:	b200      	sxth	r0, r0
 8004da8:	bd10      	pop	{r4, pc}
 8004daa:	4603      	mov	r3, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8004dac:	4622      	mov	r2, r4
 8004dae:	4802      	ldr	r0, [pc, #8]	; (8004db8 <lv_obj_get_height+0x24>)
 8004db0:	f00f fd0e 	bl	80147d0 <lv_debug_log_error>
 8004db4:	e7fe      	b.n	8004db4 <lv_obj_get_height+0x20>
 8004db6:	bf00      	nop
 8004db8:	0801e1d4 	.word	0x0801e1d4

08004dbc <lv_obj_get_auto_realign>:
{
 8004dbc:	b510      	push	{r4, lr}
 8004dbe:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8004dc0:	f00f fd02 	bl	80147c8 <lv_debug_check_null>
 8004dc4:	b120      	cbz	r0, 8004dd0 <lv_obj_get_auto_realign+0x14>
    return obj->realign.auto_realign ? true : false;
 8004dc6:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
}
 8004dca:	f000 0001 	and.w	r0, r0, #1
 8004dce:	bd10      	pop	{r4, pc}
 8004dd0:	4603      	mov	r3, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8004dd2:	4622      	mov	r2, r4
 8004dd4:	4801      	ldr	r0, [pc, #4]	; (8004ddc <lv_obj_get_auto_realign+0x20>)
 8004dd6:	f00f fcfb 	bl	80147d0 <lv_debug_log_error>
 8004dda:	e7fe      	b.n	8004dda <lv_obj_get_auto_realign+0x1e>
 8004ddc:	0801e1d4 	.word	0x0801e1d4

08004de0 <lv_obj_get_style_list>:
{
 8004de0:	4603      	mov	r3, r0
    if(part == LV_OBJ_PART_MAIN) return &((lv_obj_t *)obj)->style_list;
 8004de2:	b199      	cbz	r1, 8004e0c <lv_obj_get_style_list+0x2c>
{
 8004de4:	b510      	push	{r4, lr}
    info.result = NULL;
 8004de6:	2400      	movs	r4, #0
{
 8004de8:	b082      	sub	sp, #8
    info.part = part;
 8004dea:	f88d 1000 	strb.w	r1, [sp]
    info.result = NULL;
 8004dee:	9401      	str	r4, [sp, #4]
    if(obj == NULL) return LV_RES_OK;
 8004df0:	b148      	cbz	r0, 8004e06 <lv_obj_get_style_list+0x26>
    if(obj->signal_cb) res = obj->signal_cb(obj, signal, param);
 8004df2:	69c3      	ldr	r3, [r0, #28]
 8004df4:	b13b      	cbz	r3, 8004e06 <lv_obj_get_style_list+0x26>
 8004df6:	466a      	mov	r2, sp
 8004df8:	2108      	movs	r1, #8
 8004dfa:	4798      	blx	r3
    if(res != LV_RES_OK) return NULL;
 8004dfc:	2801      	cmp	r0, #1
 8004dfe:	d107      	bne.n	8004e10 <lv_obj_get_style_list+0x30>
 8004e00:	9801      	ldr	r0, [sp, #4]
}
 8004e02:	b002      	add	sp, #8
 8004e04:	bd10      	pop	{r4, pc}
 8004e06:	4618      	mov	r0, r3
 8004e08:	b002      	add	sp, #8
 8004e0a:	bd10      	pop	{r4, pc}
    if(part == LV_OBJ_PART_MAIN) return &((lv_obj_t *)obj)->style_list;
 8004e0c:	3028      	adds	r0, #40	; 0x28
}
 8004e0e:	4770      	bx	lr
    if(res != LV_RES_OK) return NULL;
 8004e10:	4620      	mov	r0, r4
}
 8004e12:	b002      	add	sp, #8
 8004e14:	bd10      	pop	{r4, pc}
 8004e16:	bf00      	nop

08004e18 <_lv_obj_get_style_color>:
{
 8004e18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e1c:	4617      	mov	r7, r2
 8004e1e:	b082      	sub	sp, #8
    while(parent) {
 8004e20:	2800      	cmp	r0, #0
 8004e22:	d05b      	beq.n	8004edc <_lv_obj_get_style_color+0xc4>
    if(part == LV_OBJ_PART_MAIN) return &((lv_obj_t *)obj)->style_list;
 8004e24:	460d      	mov	r5, r1
 8004e26:	4604      	mov	r4, r0
 8004e28:	ea4f 2912 	mov.w	r9, r2, lsr #8
 8004e2c:	2900      	cmp	r1, #0
 8004e2e:	d064      	beq.n	8004efa <_lv_obj_get_style_color+0xe2>
    info.result = NULL;
 8004e30:	2600      	movs	r6, #0
    if(obj->signal_cb) res = obj->signal_cb(obj, signal, param);
 8004e32:	69c3      	ldr	r3, [r0, #28]
    info.part = part;
 8004e34:	f88d 1000 	strb.w	r1, [sp]
    info.result = NULL;
 8004e38:	9601      	str	r6, [sp, #4]
    if(obj->signal_cb) res = obj->signal_cb(obj, signal, param);
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d041      	beq.n	8004ec2 <_lv_obj_get_style_color+0xaa>
 8004e3e:	46e8      	mov	r8, sp
 8004e40:	2108      	movs	r1, #8
 8004e42:	4642      	mov	r2, r8
 8004e44:	4798      	blx	r3
    if(res != LV_RES_OK) return NULL;
 8004e46:	2801      	cmp	r0, #1
 8004e48:	d140      	bne.n	8004ecc <_lv_obj_get_style_color+0xb4>
 8004e4a:	f8dd a004 	ldr.w	sl, [sp, #4]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8004e4e:	4620      	mov	r0, r4
 8004e50:	f00f fcba 	bl	80147c8 <lv_debug_check_null>
 8004e54:	b378      	cbz	r0, 8004eb6 <_lv_obj_get_style_color+0x9e>
    if(part < _LV_OBJ_PART_REAL_LAST) return ((lv_obj_t *)obj)->state;
 8004e56:	2d3f      	cmp	r5, #63	; 0x3f
 8004e58:	d927      	bls.n	8004eaa <_lv_obj_get_style_color+0x92>
    info.result = LV_STATE_DEFAULT;
 8004e5a:	2200      	movs	r2, #0
    if(obj->signal_cb) res = obj->signal_cb(obj, signal, param);
 8004e5c:	69e3      	ldr	r3, [r4, #28]
    info.part = part;
 8004e5e:	f88d 5000 	strb.w	r5, [sp]
    info.result = LV_STATE_DEFAULT;
 8004e62:	f88d 2001 	strb.w	r2, [sp, #1]
    if(obj->signal_cb) res = obj->signal_cb(obj, signal, param);
 8004e66:	b37b      	cbz	r3, 8004ec8 <_lv_obj_get_style_color+0xb0>
 8004e68:	4642      	mov	r2, r8
 8004e6a:	2109      	movs	r1, #9
 8004e6c:	4620      	mov	r0, r4
 8004e6e:	4798      	blx	r3
 8004e70:	f89d 6001 	ldrb.w	r6, [sp, #1]
 8004e74:	eb07 2606 	add.w	r6, r7, r6, lsl #8
 8004e78:	b2b6      	uxth	r6, r6
        res = _lv_style_list_get_color(list, prop, &value_act);
 8004e7a:	4650      	mov	r0, sl
 8004e7c:	4642      	mov	r2, r8
 8004e7e:	4631      	mov	r1, r6
 8004e80:	f004 fc82 	bl	8009788 <_lv_style_list_get_color>
        if(res == LV_RES_OK) return value_act;
 8004e84:	2801      	cmp	r0, #1
 8004e86:	d036      	beq.n	8004ef6 <_lv_obj_get_style_color+0xde>
        if(LV_STYLE_ATTR_GET_INHERIT(attr) == 0) break;
 8004e88:	f019 0f80 	tst.w	r9, #128	; 0x80
 8004e8c:	d027      	beq.n	8004ede <_lv_obj_get_style_color+0xc6>
        if(part != LV_OBJ_PART_MAIN) {
 8004e8e:	b92d      	cbnz	r5, 8004e9c <_lv_obj_get_style_color+0x84>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8004e90:	4620      	mov	r0, r4
 8004e92:	f00f fc99 	bl	80147c8 <lv_debug_check_null>
 8004e96:	b1d8      	cbz	r0, 8004ed0 <_lv_obj_get_style_color+0xb8>
    return obj->parent;
 8004e98:	6824      	ldr	r4, [r4, #0]
    while(parent) {
 8004e9a:	b304      	cbz	r4, 8004ede <_lv_obj_get_style_color+0xc6>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8004e9c:	4620      	mov	r0, r4
 8004e9e:	f00f fc93 	bl	80147c8 <lv_debug_check_null>
 8004ea2:	b140      	cbz	r0, 8004eb6 <_lv_obj_get_style_color+0x9e>
    if(part == LV_OBJ_PART_MAIN) return &((lv_obj_t *)obj)->style_list;
 8004ea4:	f104 0a28 	add.w	sl, r4, #40	; 0x28
 8004ea8:	2500      	movs	r5, #0
    if(part < _LV_OBJ_PART_REAL_LAST) return ((lv_obj_t *)obj)->state;
 8004eaa:	f894 603d 	ldrb.w	r6, [r4, #61]	; 0x3d
 8004eae:	eb07 2606 	add.w	r6, r7, r6, lsl #8
 8004eb2:	b2b6      	uxth	r6, r6
 8004eb4:	e7e1      	b.n	8004e7a <_lv_obj_get_style_color+0x62>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8004eb6:	4622      	mov	r2, r4
 8004eb8:	2300      	movs	r3, #0
 8004eba:	4811      	ldr	r0, [pc, #68]	; (8004f00 <_lv_obj_get_style_color+0xe8>)
 8004ebc:	f00f fc88 	bl	80147d0 <lv_debug_log_error>
 8004ec0:	e7fe      	b.n	8004ec0 <_lv_obj_get_style_color+0xa8>
 8004ec2:	469a      	mov	sl, r3
    return info.result;
 8004ec4:	46e8      	mov	r8, sp
 8004ec6:	e7c2      	b.n	8004e4e <_lv_obj_get_style_color+0x36>
 8004ec8:	463e      	mov	r6, r7
    return info.result;
 8004eca:	e7d6      	b.n	8004e7a <_lv_obj_get_style_color+0x62>
    if(res != LV_RES_OK) return NULL;
 8004ecc:	46b2      	mov	sl, r6
 8004ece:	e7be      	b.n	8004e4e <_lv_obj_get_style_color+0x36>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8004ed0:	4622      	mov	r2, r4
 8004ed2:	462b      	mov	r3, r5
 8004ed4:	480a      	ldr	r0, [pc, #40]	; (8004f00 <_lv_obj_get_style_color+0xe8>)
 8004ed6:	f00f fc7b 	bl	80147d0 <lv_debug_log_error>
 8004eda:	e7fe      	b.n	8004eda <_lv_obj_get_style_color+0xc2>
 8004edc:	4616      	mov	r6, r2
    prop = prop & (~LV_STYLE_STATE_MASK);
 8004ede:	f426 43fe 	bic.w	r3, r6, #32512	; 0x7f00
    switch(prop) {
 8004ee2:	3b29      	subs	r3, #41	; 0x29
            return LV_COLOR_WHITE;
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	bf8c      	ite	hi
 8004ee8:	f04f 407f 	movhi.w	r0, #4278190080	; 0xff000000
 8004eec:	f04f 30ff 	movls.w	r0, #4294967295
}
 8004ef0:	b002      	add	sp, #8
 8004ef2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if(res == LV_RES_OK) return value_act;
 8004ef6:	9800      	ldr	r0, [sp, #0]
 8004ef8:	e7fa      	b.n	8004ef0 <_lv_obj_get_style_color+0xd8>
 8004efa:	46e8      	mov	r8, sp
 8004efc:	e7ce      	b.n	8004e9c <_lv_obj_get_style_color+0x84>
 8004efe:	bf00      	nop
 8004f00:	0801e1d4 	.word	0x0801e1d4

08004f04 <_lv_obj_get_style_ptr>:
{
 8004f04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004f08:	4617      	mov	r7, r2
 8004f0a:	b085      	sub	sp, #20
    while(parent) {
 8004f0c:	2800      	cmp	r0, #0
 8004f0e:	f000 809f 	beq.w	8005050 <_lv_obj_get_style_ptr+0x14c>
    if(part == LV_OBJ_PART_MAIN) return &((lv_obj_t *)obj)->style_list;
 8004f12:	460e      	mov	r6, r1
 8004f14:	4604      	mov	r4, r0
 8004f16:	ea4f 2812 	mov.w	r8, r2, lsr #8
 8004f1a:	2900      	cmp	r1, #0
 8004f1c:	f000 808f 	beq.w	800503e <_lv_obj_get_style_ptr+0x13a>
    info.result = NULL;
 8004f20:	2500      	movs	r5, #0
    if(obj->signal_cb) res = obj->signal_cb(obj, signal, param);
 8004f22:	69c3      	ldr	r3, [r0, #28]
    info.part = part;
 8004f24:	f88d 1008 	strb.w	r1, [sp, #8]
    info.result = NULL;
 8004f28:	9503      	str	r5, [sp, #12]
    if(obj->signal_cb) res = obj->signal_cb(obj, signal, param);
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d072      	beq.n	8005014 <_lv_obj_get_style_ptr+0x110>
 8004f2e:	aa02      	add	r2, sp, #8
 8004f30:	2108      	movs	r1, #8
 8004f32:	4798      	blx	r3
    if(res != LV_RES_OK) return NULL;
 8004f34:	2801      	cmp	r0, #1
 8004f36:	d171      	bne.n	800501c <_lv_obj_get_style_ptr+0x118>
 8004f38:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8004f3c:	463d      	mov	r5, r7
        if(!list->ignore_cache && list->style_cnt > 0) {
 8004f3e:	f899 3005 	ldrb.w	r3, [r9, #5]
 8004f42:	071a      	lsls	r2, r3, #28
 8004f44:	d417      	bmi.n	8004f76 <_lv_obj_get_style_ptr+0x72>
 8004f46:	f899 2004 	ldrb.w	r2, [r9, #4]
 8004f4a:	0690      	lsls	r0, r2, #26
 8004f4c:	d013      	beq.n	8004f76 <_lv_obj_get_style_ptr+0x72>
            if(!list->valid_cache) update_style_cache((lv_obj_t *)parent, part, prop  & (~LV_STYLE_STATE_MASK));
 8004f4e:	0759      	lsls	r1, r3, #29
 8004f50:	f425 45fe 	bic.w	r5, r5, #32512	; 0x7f00
 8004f54:	d407      	bmi.n	8004f66 <_lv_obj_get_style_ptr+0x62>
 * @param part the part of the object
 * @param prop the property which triggered the update
 */
static void update_style_cache(lv_obj_t * obj, uint8_t part, uint16_t prop)
{
    if(style_prop_is_cacheble(prop) == false) return;
 8004f56:	4628      	mov	r0, r5
 8004f58:	f7fe f932 	bl	80031c0 <style_prop_is_cacheble>
 8004f5c:	b118      	cbz	r0, 8004f66 <_lv_obj_get_style_ptr+0x62>
 8004f5e:	4631      	mov	r1, r6
 8004f60:	4620      	mov	r0, r4
 8004f62:	f000 f87d 	bl	8005060 <update_style_cache.part.0>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
 8004f66:	2d7f      	cmp	r5, #127	; 0x7f
 8004f68:	d064      	beq.n	8005034 <_lv_obj_get_style_ptr+0x130>
 8004f6a:	f248 038e 	movw	r3, #32910	; 0x808e
 8004f6e:	429d      	cmp	r5, r3
 8004f70:	d05b      	beq.n	800502a <_lv_obj_get_style_ptr+0x126>
 8004f72:	2d6e      	cmp	r5, #110	; 0x6e
 8004f74:	d054      	beq.n	8005020 <_lv_obj_get_style_ptr+0x11c>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8004f76:	4620      	mov	r0, r4
 8004f78:	f00f fc26 	bl	80147c8 <lv_debug_check_null>
 8004f7c:	b390      	cbz	r0, 8004fe4 <_lv_obj_get_style_ptr+0xe0>
    if(part < _LV_OBJ_PART_REAL_LAST) return ((lv_obj_t *)obj)->state;
 8004f7e:	2e3f      	cmp	r6, #63	; 0x3f
 8004f80:	d942      	bls.n	8005008 <_lv_obj_get_style_ptr+0x104>
    info.result = LV_STATE_DEFAULT;
 8004f82:	2200      	movs	r2, #0
    if(obj->signal_cb) res = obj->signal_cb(obj, signal, param);
 8004f84:	69e3      	ldr	r3, [r4, #28]
    info.part = part;
 8004f86:	f88d 6004 	strb.w	r6, [sp, #4]
    info.result = LV_STATE_DEFAULT;
 8004f8a:	f88d 2005 	strb.w	r2, [sp, #5]
    if(obj->signal_cb) res = obj->signal_cb(obj, signal, param);
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d042      	beq.n	8005018 <_lv_obj_get_style_ptr+0x114>
 8004f92:	aa01      	add	r2, sp, #4
 8004f94:	2109      	movs	r1, #9
 8004f96:	4620      	mov	r0, r4
 8004f98:	4798      	blx	r3
 8004f9a:	f89d 5005 	ldrb.w	r5, [sp, #5]
 8004f9e:	eb07 2505 	add.w	r5, r7, r5, lsl #8
 8004fa2:	b2ad      	uxth	r5, r5
        res = _lv_style_list_get_ptr(list, prop, &value_act);
 8004fa4:	4648      	mov	r0, r9
 8004fa6:	aa02      	add	r2, sp, #8
 8004fa8:	4629      	mov	r1, r5
 8004faa:	f004 fd75 	bl	8009a98 <_lv_style_list_get_ptr>
        if(res == LV_RES_OK)  return value_act;
 8004fae:	2801      	cmp	r0, #1
 8004fb0:	d047      	beq.n	8005042 <_lv_obj_get_style_ptr+0x13e>
        if(LV_STYLE_ATTR_GET_INHERIT(attr) == 0) break;
 8004fb2:	f018 0f80 	tst.w	r8, #128	; 0x80
 8004fb6:	d006      	beq.n	8004fc6 <_lv_obj_get_style_ptr+0xc2>
        if(part != LV_OBJ_PART_MAIN) {
 8004fb8:	b9d6      	cbnz	r6, 8004ff0 <_lv_obj_get_style_ptr+0xec>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8004fba:	4620      	mov	r0, r4
 8004fbc:	f00f fc04 	bl	80147c8 <lv_debug_check_null>
 8004fc0:	b1e0      	cbz	r0, 8004ffc <_lv_obj_get_style_ptr+0xf8>
    return obj->parent;
 8004fc2:	6824      	ldr	r4, [r4, #0]
    while(parent) {
 8004fc4:	b9b4      	cbnz	r4, 8004ff4 <_lv_obj_get_style_ptr+0xf0>
 8004fc6:	f425 45fe 	bic.w	r5, r5, #32512	; 0x7f00
    prop = prop & (~LV_STYLE_STATE_MASK);
 8004fca:	b2ad      	uxth	r5, r5
    switch(prop) {
 8004fcc:	2dbe      	cmp	r5, #190	; 0xbe
 8004fce:	d03d      	beq.n	800504c <_lv_obj_get_style_ptr+0x148>
 8004fd0:	f248 038e 	movw	r3, #32910	; 0x808e
 8004fd4:	429d      	cmp	r5, r3
 8004fd6:	d036      	beq.n	8005046 <_lv_obj_get_style_ptr+0x142>
 8004fd8:	2d7e      	cmp	r5, #126	; 0x7e
 8004fda:	d034      	beq.n	8005046 <_lv_obj_get_style_ptr+0x142>
 8004fdc:	2000      	movs	r0, #0
}
 8004fde:	b005      	add	sp, #20
 8004fe0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	4622      	mov	r2, r4
 8004fe8:	481b      	ldr	r0, [pc, #108]	; (8005058 <_lv_obj_get_style_ptr+0x154>)
 8004fea:	f00f fbf1 	bl	80147d0 <lv_debug_log_error>
 8004fee:	e7fe      	b.n	8004fee <_lv_obj_get_style_ptr+0xea>
    while(parent) {
 8004ff0:	2c00      	cmp	r4, #0
 8004ff2:	d0e8      	beq.n	8004fc6 <_lv_obj_get_style_ptr+0xc2>
    if(part == LV_OBJ_PART_MAIN) return &((lv_obj_t *)obj)->style_list;
 8004ff4:	f104 0928 	add.w	r9, r4, #40	; 0x28
 8004ff8:	2600      	movs	r6, #0
 8004ffa:	e7a0      	b.n	8004f3e <_lv_obj_get_style_ptr+0x3a>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8004ffc:	4622      	mov	r2, r4
 8004ffe:	4633      	mov	r3, r6
 8005000:	4815      	ldr	r0, [pc, #84]	; (8005058 <_lv_obj_get_style_ptr+0x154>)
 8005002:	f00f fbe5 	bl	80147d0 <lv_debug_log_error>
 8005006:	e7fe      	b.n	8005006 <_lv_obj_get_style_ptr+0x102>
    if(part < _LV_OBJ_PART_REAL_LAST) return ((lv_obj_t *)obj)->state;
 8005008:	f894 503d 	ldrb.w	r5, [r4, #61]	; 0x3d
 800500c:	eb07 2505 	add.w	r5, r7, r5, lsl #8
 8005010:	b2ad      	uxth	r5, r5
 8005012:	e7c7      	b.n	8004fa4 <_lv_obj_get_style_ptr+0xa0>
 8005014:	4699      	mov	r9, r3
    return info.result;
 8005016:	e791      	b.n	8004f3c <_lv_obj_get_style_ptr+0x38>
 8005018:	463d      	mov	r5, r7
    return info.result;
 800501a:	e7c3      	b.n	8004fa4 <_lv_obj_get_style_ptr+0xa0>
    if(res != LV_RES_OK) return NULL;
 800501c:	46a9      	mov	r9, r5
 800501e:	e78d      	b.n	8004f3c <_lv_obj_get_style_ptr+0x38>
                    if(list->pattern_img_null) def = true;
 8005020:	f899 3007 	ldrb.w	r3, [r9, #7]
 8005024:	079b      	lsls	r3, r3, #30
 8005026:	d5a6      	bpl.n	8004f76 <_lv_obj_get_style_ptr+0x72>
 8005028:	e7cf      	b.n	8004fca <_lv_obj_get_style_ptr+0xc6>
                    if(list->text_font_normal) def = true;
 800502a:	f999 3007 	ldrsb.w	r3, [r9, #7]
 800502e:	2b00      	cmp	r3, #0
 8005030:	daa1      	bge.n	8004f76 <_lv_obj_get_style_ptr+0x72>
 8005032:	e7ca      	b.n	8004fca <_lv_obj_get_style_ptr+0xc6>
                    if(list->value_txt_str) def = true;
 8005034:	f899 3007 	ldrb.w	r3, [r9, #7]
 8005038:	071a      	lsls	r2, r3, #28
 800503a:	d59c      	bpl.n	8004f76 <_lv_obj_get_style_ptr+0x72>
 800503c:	e7c5      	b.n	8004fca <_lv_obj_get_style_ptr+0xc6>
 800503e:	4615      	mov	r5, r2
 8005040:	e7d8      	b.n	8004ff4 <_lv_obj_get_style_ptr+0xf0>
        if(res == LV_RES_OK)  return value_act;
 8005042:	9802      	ldr	r0, [sp, #8]
 8005044:	e7cb      	b.n	8004fde <_lv_obj_get_style_ptr+0xda>
            return lv_theme_get_font_normal();
 8005046:	f011 fa6d 	bl	8016524 <lv_theme_get_font_normal>
 800504a:	e7c8      	b.n	8004fde <_lv_obj_get_style_ptr+0xda>
            return &lv_anim_path_def;
 800504c:	4803      	ldr	r0, [pc, #12]	; (800505c <_lv_obj_get_style_ptr+0x158>)
 800504e:	e7c6      	b.n	8004fde <_lv_obj_get_style_ptr+0xda>
 8005050:	f422 45fe 	bic.w	r5, r2, #32512	; 0x7f00
 8005054:	e7b9      	b.n	8004fca <_lv_obj_get_style_ptr+0xc6>
 8005056:	bf00      	nop
 8005058:	0801e1d4 	.word	0x0801e1d4
 800505c:	08021754 	.word	0x08021754

08005060 <update_style_cache.part.0>:
static void update_style_cache(lv_obj_t * obj, uint8_t part, uint16_t prop)
 8005060:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(part == LV_OBJ_PART_MAIN) return &((lv_obj_t *)obj)->style_list;
 8005062:	460d      	mov	r5, r1
static void update_style_cache(lv_obj_t * obj, uint8_t part, uint16_t prop)
 8005064:	b083      	sub	sp, #12
 8005066:	4606      	mov	r6, r0
    if(part == LV_OBJ_PART_MAIN) return &((lv_obj_t *)obj)->style_list;
 8005068:	2900      	cmp	r1, #0
 800506a:	f000 813d 	beq.w	80052e8 <update_style_cache.part.0+0x288>
    info.result = NULL;
 800506e:	2700      	movs	r7, #0
    info.part = part;
 8005070:	f88d 1000 	strb.w	r1, [sp]
    info.result = NULL;
 8005074:	9701      	str	r7, [sp, #4]
    if(obj == NULL) return LV_RES_OK;
 8005076:	2800      	cmp	r0, #0
 8005078:	f000 81cf 	beq.w	800541a <update_style_cache.part.0+0x3ba>
    if(obj->signal_cb) res = obj->signal_cb(obj, signal, param);
 800507c:	69c4      	ldr	r4, [r0, #28]
 800507e:	b134      	cbz	r4, 800508e <update_style_cache.part.0+0x2e>
 8005080:	466a      	mov	r2, sp
 8005082:	2108      	movs	r1, #8
 8005084:	47a0      	blx	r4
    if(res != LV_RES_OK) return NULL;
 8005086:	2801      	cmp	r0, #1
 8005088:	f040 81c9 	bne.w	800541e <update_style_cache.part.0+0x3be>
 800508c:	9c01      	ldr	r4, [sp, #4]

    lv_style_list_t * list = lv_obj_get_style_list(obj, part);

    bool ignore_cache_ori = list->ignore_cache;
 800508e:	7967      	ldrb	r7, [r4, #5]
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ANGLE, transform_angle, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ZOOM, transform_zoom, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
 8005090:	f248 020c 	movw	r2, #32780	; 0x800c
 8005094:	4629      	mov	r1, r5
 8005096:	4630      	mov	r0, r6
    list->ignore_cache = 1;
 8005098:	f047 0308 	orr.w	r3, r7, #8
    bool ignore_cache_ori = list->ignore_cache;
 800509c:	f3c7 07c0 	ubfx	r7, r7, #3, #1
    list->ignore_cache = 1;
 80050a0:	7163      	strb	r3, [r4, #5]
 80050a2:	f000 f9c3 	bl	800542c <_lv_obj_get_style_opa>

#if LV_USE_OPA_SCALE
    list->opa_scale_cover    = lv_obj_get_style_opa_scale(obj, part) == LV_OPA_COVER ? 1 : 0;
 80050a6:	f1a0 00ff 	sub.w	r0, r0, #255	; 0xff
 80050aa:	7963      	ldrb	r3, [r4, #5]
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OPA, value_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_FONT, value_font, const lv_font_t *, _ptr, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_STR, value_str, const char *, _ptr, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_DECOR, text_decor, lv_text_decor_t, _int, scalar)
 80050ac:	f248 0282 	movw	r2, #32898	; 0x8082
 80050b0:	fab0 f080 	clz	r0, r0
 80050b4:	4629      	mov	r1, r5
 80050b6:	0940      	lsrs	r0, r0, #5
 80050b8:	f360 1345 	bfi	r3, r0, #5, #1
 80050bc:	4630      	mov	r0, r6
 80050be:	7163      	strb	r3, [r4, #5]
 80050c0:	f000 fa6e 	bl	80055a0 <_lv_obj_get_style_int>
#else
    list->opa_scale_cover    = 1;
#endif
    list->text_decor_none    = lv_obj_get_style_text_decor(obj, part) == LV_TEXT_DECOR_NONE ? 1 : 0;
 80050c4:	79e2      	ldrb	r2, [r4, #7]
 80050c6:	b2c3      	uxtb	r3, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_BLEND_MODE, text_blend_mode, lv_blend_mode_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_COLOR, text_sel_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_BG_COLOR, text_sel_bg_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_OPA, text_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
 80050c8:	4629      	mov	r1, r5
 80050ca:	4630      	mov	r0, r6
 80050cc:	fab3 f383 	clz	r3, r3
 80050d0:	095b      	lsrs	r3, r3, #5
 80050d2:	f363 1286 	bfi	r2, r3, #6, #1
 80050d6:	71e2      	strb	r2, [r4, #7]
 80050d8:	f000 fc60 	bl	800599c <_lv_obj_get_style_ptr.constprop.0>
    list->text_font_normal    = lv_obj_get_style_text_font(obj, part) == LV_THEME_DEFAULT_FONT_NORMAL ? 1 : 0;

    list->text_space_zero = 1;
 80050dc:	f894 c007 	ldrb.w	ip, [r4, #7]
    list->text_font_normal    = lv_obj_get_style_text_font(obj, part) == LV_THEME_DEFAULT_FONT_NORMAL ? 1 : 0;
 80050e0:	4bd0      	ldr	r3, [pc, #832]	; (8005424 <update_style_cache.part.0+0x3c4>)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
 80050e2:	f248 0280 	movw	r2, #32896	; 0x8080
    list->text_space_zero = 1;
 80050e6:	f00c 0c5f 	and.w	ip, ip, #95	; 0x5f
 80050ea:	4629      	mov	r1, r5
 80050ec:	4283      	cmp	r3, r0
 80050ee:	bf0c      	ite	eq
 80050f0:	23a0      	moveq	r3, #160	; 0xa0
 80050f2:	2320      	movne	r3, #32
 80050f4:	4630      	mov	r0, r6
 80050f6:	ea43 030c 	orr.w	r3, r3, ip
 80050fa:	71e3      	strb	r3, [r4, #7]
 80050fc:	f000 fa50 	bl	80055a0 <_lv_obj_get_style_int>
    if(lv_obj_get_style_text_letter_space(obj, part) != 0 ||
 8005100:	2800      	cmp	r0, #0
 8005102:	f000 8180 	beq.w	8005406 <update_style_cache.part.0+0x3a6>
       lv_obj_get_style_text_line_space(obj, part) != 0) {
        list->text_space_zero = 0;
 8005106:	79e3      	ldrb	r3, [r4, #7]
 8005108:	f36f 1345 	bfc	r3, #5, #1
 800510c:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
 800510e:	222c      	movs	r2, #44	; 0x2c
 8005110:	4629      	mov	r1, r5
 8005112:	4630      	mov	r0, r6
 8005114:	f000 f98a 	bl	800542c <_lv_obj_get_style_opa>
    }

    lv_opa_t bg_opa = lv_obj_get_style_bg_opa(obj, part);
    list->bg_opa_transp    = bg_opa == LV_OPA_TRANSP ? 1 : 0;
 8005118:	79a3      	ldrb	r3, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
 800511a:	2230      	movs	r2, #48	; 0x30
 800511c:	4629      	mov	r1, r5
 800511e:	f023 0c18 	bic.w	ip, r3, #24
 8005122:	fab0 f380 	clz	r3, r0
    list->bg_opa_cover     = bg_opa == LV_OPA_COVER ? 1 : 0;
 8005126:	f1a0 00ff 	sub.w	r0, r0, #255	; 0xff
    list->bg_opa_transp    = bg_opa == LV_OPA_TRANSP ? 1 : 0;
 800512a:	095b      	lsrs	r3, r3, #5
    list->bg_opa_cover     = bg_opa == LV_OPA_COVER ? 1 : 0;
 800512c:	fab0 f080 	clz	r0, r0
    list->bg_opa_transp    = bg_opa == LV_OPA_TRANSP ? 1 : 0;
 8005130:	00db      	lsls	r3, r3, #3
    list->bg_opa_cover     = bg_opa == LV_OPA_COVER ? 1 : 0;
 8005132:	0940      	lsrs	r0, r0, #5
    list->bg_opa_transp    = bg_opa == LV_OPA_TRANSP ? 1 : 0;
 8005134:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8005138:	4630      	mov	r0, r6
 800513a:	ea43 030c 	orr.w	r3, r3, ip
 800513e:	71a3      	strb	r3, [r4, #6]
 8005140:	f000 fa2e 	bl	80055a0 <_lv_obj_get_style_int>

    list->border_width_zero = lv_obj_get_style_border_width(obj, part) == 0 ? 1 : 0;
 8005144:	fab0 f380 	clz	r3, r0
 8005148:	f894 c006 	ldrb.w	ip, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
 800514c:	2231      	movs	r2, #49	; 0x31
 800514e:	095b      	lsrs	r3, r3, #5
 8005150:	4629      	mov	r1, r5
 8005152:	4630      	mov	r0, r6
 8005154:	f363 1c45 	bfi	ip, r3, #5, #1
 8005158:	f884 c006 	strb.w	ip, [r4, #6]
 800515c:	f000 fa20 	bl	80055a0 <_lv_obj_get_style_int>
    list->border_side_full = lv_obj_get_style_border_side(obj, part) == LV_BORDER_SIDE_FULL ? 1 : 0;
 8005160:	f894 c006 	ldrb.w	ip, [r4, #6]
 8005164:	b2c3      	uxtb	r3, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
 8005166:	2233      	movs	r2, #51	; 0x33
 8005168:	4629      	mov	r1, r5
 800516a:	4630      	mov	r0, r6
 800516c:	f1a3 030f 	sub.w	r3, r3, #15
 8005170:	fab3 f383 	clz	r3, r3
 8005174:	095b      	lsrs	r3, r3, #5
 8005176:	f363 1c86 	bfi	ip, r3, #6, #1
 800517a:	f884 c006 	strb.w	ip, [r4, #6]
 800517e:	f000 fa0f 	bl	80055a0 <_lv_obj_get_style_int>
    list->border_post_off = lv_obj_get_style_border_post(obj, part) == 0 ? 1 : 0;
 8005182:	fab0 f380 	clz	r3, r0
 8005186:	f894 c006 	ldrb.w	ip, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
 800518a:	2202      	movs	r2, #2
 800518c:	095b      	lsrs	r3, r3, #5
 800518e:	4629      	mov	r1, r5
 8005190:	4630      	mov	r0, r6
 8005192:	f363 1cc7 	bfi	ip, r3, #7, #1
 8005196:	f884 c006 	strb.w	ip, [r4, #6]
 800519a:	f000 fa01 	bl	80055a0 <_lv_obj_get_style_int>
    list->clip_corner_off   = lv_obj_get_style_clip_corner(obj, part) == false ? 1 : 0;
 800519e:	fab0 f380 	clz	r3, r0
 80051a2:	f894 c005 	ldrb.w	ip, [r4, #5]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_OPA, line_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_BLEND_MODE, image_blend_mode, lv_blend_mode_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_OPA, image_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR_OPA, image_recolor_opa, lv_opa_t, _opa, scalar)
 80051a6:	f248 02ad 	movw	r2, #32941	; 0x80ad
 80051aa:	095b      	lsrs	r3, r3, #5
 80051ac:	4629      	mov	r1, r5
 80051ae:	4630      	mov	r0, r6
 80051b0:	f363 1c86 	bfi	ip, r3, #6, #1
 80051b4:	f884 c005 	strb.w	ip, [r4, #5]
 80051b8:	f000 f938 	bl	800542c <_lv_obj_get_style_opa>
    list->img_recolor_opa_transp    = lv_obj_get_style_image_recolor_opa(obj, part) == LV_OPA_TRANSP ? 1 : 0;
 80051bc:	fab0 f380 	clz	r3, r0
 80051c0:	f894 c007 	ldrb.w	ip, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int, scalar)
 80051c4:	2240      	movs	r2, #64	; 0x40
 80051c6:	095b      	lsrs	r3, r3, #5
 80051c8:	4629      	mov	r1, r5
 80051ca:	4630      	mov	r0, r6
 80051cc:	f363 1c04 	bfi	ip, r3, #4, #1
 80051d0:	f884 c007 	strb.w	ip, [r4, #7]
 80051d4:	f000 f9e4 	bl	80055a0 <_lv_obj_get_style_int>
    list->outline_width_zero    = lv_obj_get_style_outline_width(obj, part) == 0 ? 1 : 0;
 80051d8:	fab0 f380 	clz	r3, r0
 80051dc:	f894 c007 	ldrb.w	ip, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_IMAGE, pattern_image, const void *, _ptr, scalar)
 80051e0:	226e      	movs	r2, #110	; 0x6e
 80051e2:	095b      	lsrs	r3, r3, #5
 80051e4:	4629      	mov	r1, r5
 80051e6:	4630      	mov	r0, r6
 80051e8:	f363 0c00 	bfi	ip, r3, #0, #1
 80051ec:	f884 c007 	strb.w	ip, [r4, #7]
 80051f0:	f7ff fe88 	bl	8004f04 <_lv_obj_get_style_ptr>
    list->pattern_img_null    = lv_obj_get_style_pattern_image(obj, part) == NULL ? 1 : 0;
 80051f4:	fab0 f380 	clz	r3, r0
 80051f8:	f894 c007 	ldrb.w	ip, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
 80051fc:	2201      	movs	r2, #1
 80051fe:	095b      	lsrs	r3, r3, #5
 8005200:	4629      	mov	r1, r5
 8005202:	4630      	mov	r0, r6
 8005204:	f363 0c41 	bfi	ip, r3, #1, #1
 8005208:	f884 c007 	strb.w	ip, [r4, #7]
 800520c:	f000 f9c8 	bl	80055a0 <_lv_obj_get_style_int>
    list->radius_zero    = lv_obj_get_style_radius(obj, part) == 0 ? 1 : 0;
 8005210:	fab0 f380 	clz	r3, r0
 8005214:	f894 c005 	ldrb.w	ip, [r4, #5]
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_WIDTH, shadow_width, lv_style_int_t, _int, scalar)
 8005218:	2250      	movs	r2, #80	; 0x50
 800521a:	095b      	lsrs	r3, r3, #5
 800521c:	4629      	mov	r1, r5
 800521e:	4630      	mov	r0, r6
 8005220:	f363 1c04 	bfi	ip, r3, #4, #1
 8005224:	f884 c005 	strb.w	ip, [r4, #5]
 8005228:	f000 f9ba 	bl	80055a0 <_lv_obj_get_style_int>
    list->shadow_width_zero    = lv_obj_get_style_shadow_width(obj, part) == 0 ? 1 : 0;
 800522c:	fab0 f380 	clz	r3, r0
 8005230:	79e2      	ldrb	r2, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_STR, value_str, const char *, _ptr, scalar)
 8005232:	4629      	mov	r1, r5
 8005234:	095b      	lsrs	r3, r3, #5
 8005236:	4630      	mov	r0, r6
 8005238:	f363 0282 	bfi	r2, r3, #2, #1
 800523c:	71e2      	strb	r2, [r4, #7]
 800523e:	f000 ffd1 	bl	80061e4 <_lv_obj_get_style_ptr.constprop.2>
    list->value_txt_str    = lv_obj_get_style_value_str(obj, part) == NULL ? 1 : 0;
 8005242:	fab0 f080 	clz	r0, r0

    list->transform_all_zero  = 1;
 8005246:	6861      	ldr	r1, [r4, #4]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ANGLE, transform_angle, lv_style_int_t, _int, scalar)
 8005248:	2206      	movs	r2, #6
    list->value_txt_str    = lv_obj_get_style_value_str(obj, part) == NULL ? 1 : 0;
 800524a:	0940      	lsrs	r0, r0, #5
    list->transform_all_zero  = 1;
 800524c:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 8005428 <update_style_cache.part.0+0x3c8>
 8005250:	06c3      	lsls	r3, r0, #27
 8005252:	ea01 0c0c 	and.w	ip, r1, ip
 8005256:	4630      	mov	r0, r6
 8005258:	4629      	mov	r1, r5
 800525a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800525e:	ea43 030c 	orr.w	r3, r3, ip
 8005262:	6063      	str	r3, [r4, #4]
 8005264:	f000 f99c 	bl	80055a0 <_lv_obj_get_style_int>
    if(lv_obj_get_style_transform_angle(obj, part) != 0 ||
 8005268:	2800      	cmp	r0, #0
 800526a:	f000 80b2 	beq.w	80053d2 <update_style_cache.part.0+0x372>
       lv_obj_get_style_transform_width(obj, part) != 0 ||
       lv_obj_get_style_transform_height(obj, part) != 0 ||
       lv_obj_get_style_transform_zoom(obj, part) != LV_IMG_ZOOM_NONE) {
        list->transform_all_zero  = 0;
 800526e:	7963      	ldrb	r3, [r4, #5]
 8005270:	f36f 13c7 	bfc	r3, #7, #1
 8005274:	7163      	strb	r3, [r4, #5]
    }

    list->pad_all_zero  = 1;
 8005276:	79a3      	ldrb	r3, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
 8005278:	2210      	movs	r2, #16
 800527a:	4629      	mov	r1, r5
 800527c:	4630      	mov	r0, r6
 800527e:	f043 0301 	orr.w	r3, r3, #1
 8005282:	71a3      	strb	r3, [r4, #6]
 8005284:	f000 f98c 	bl	80055a0 <_lv_obj_get_style_int>
    if(lv_obj_get_style_pad_top(obj, part) != 0 ||
 8005288:	2800      	cmp	r0, #0
 800528a:	f000 8089 	beq.w	80053a0 <update_style_cache.part.0+0x340>
       lv_obj_get_style_pad_bottom(obj, part) != 0 ||
       lv_obj_get_style_pad_left(obj, part) != 0 ||
       lv_obj_get_style_pad_right(obj, part) != 0) {
        list->pad_all_zero  = 0;
 800528e:	79a3      	ldrb	r3, [r4, #6]
 8005290:	f36f 0300 	bfc	r3, #0, #1
 8005294:	71a3      	strb	r3, [r4, #6]
    }

    list->margin_all_zero  = 1;
 8005296:	79a3      	ldrb	r3, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int, scalar)
 8005298:	2215      	movs	r2, #21
 800529a:	4629      	mov	r1, r5
 800529c:	4630      	mov	r0, r6
 800529e:	f043 0302 	orr.w	r3, r3, #2
 80052a2:	71a3      	strb	r3, [r4, #6]
 80052a4:	f000 f97c 	bl	80055a0 <_lv_obj_get_style_int>
    if(lv_obj_get_style_margin_top(obj, part) != 0 ||
 80052a8:	2800      	cmp	r0, #0
 80052aa:	d063      	beq.n	8005374 <update_style_cache.part.0+0x314>
       lv_obj_get_style_margin_bottom(obj, part) != 0 ||
       lv_obj_get_style_margin_left(obj, part) != 0 ||
       lv_obj_get_style_margin_right(obj, part) != 0) {
        list->margin_all_zero  = 0;
 80052ac:	79a3      	ldrb	r3, [r4, #6]
 80052ae:	f36f 0341 	bfc	r3, #1, #1
 80052b2:	71a3      	strb	r3, [r4, #6]
    }

    list->blend_mode_all_normal = 1;
 80052b4:	79a3      	ldrb	r3, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_BLEND_MODE, bg_blend_mode, lv_blend_mode_t, _int, scalar)
 80052b6:	2220      	movs	r2, #32
 80052b8:	4629      	mov	r1, r5
 80052ba:	4630      	mov	r0, r6
 80052bc:	f043 0304 	orr.w	r3, r3, #4
 80052c0:	71a3      	strb	r3, [r4, #6]
 80052c2:	f000 f96d 	bl	80055a0 <_lv_obj_get_style_int>
#if LV_USE_BLEND_MODES
    if(lv_obj_get_style_bg_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
 80052c6:	f010 0fff 	tst.w	r0, #255	; 0xff
 80052ca:	d010      	beq.n	80052ee <update_style_cache.part.0+0x28e>
       lv_obj_get_style_value_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
       lv_obj_get_style_text_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
       lv_obj_get_style_line_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
       lv_obj_get_style_image_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
       lv_obj_get_style_shadow_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL) {
        list->blend_mode_all_normal = 0;
 80052cc:	79a3      	ldrb	r3, [r4, #6]
 80052ce:	f36f 0382 	bfc	r3, #2, #1
 80052d2:	71a3      	strb	r3, [r4, #6]
    }
#endif
    list->ignore_cache = ignore_cache_ori;
    list->valid_cache = 1;
 80052d4:	7963      	ldrb	r3, [r4, #5]
 80052d6:	00ff      	lsls	r7, r7, #3
 80052d8:	f023 030c 	bic.w	r3, r3, #12
 80052dc:	f047 0704 	orr.w	r7, r7, #4
 80052e0:	431f      	orrs	r7, r3
 80052e2:	7167      	strb	r7, [r4, #5]
}
 80052e4:	b003      	add	sp, #12
 80052e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(part == LV_OBJ_PART_MAIN) return &((lv_obj_t *)obj)->style_list;
 80052e8:	f100 0428 	add.w	r4, r0, #40	; 0x28
 80052ec:	e6cf      	b.n	800508e <update_style_cache.part.0+0x2e>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_BLEND_MODE, border_blend_mode, lv_blend_mode_t, _int, scalar)
 80052ee:	2232      	movs	r2, #50	; 0x32
 80052f0:	4629      	mov	r1, r5
 80052f2:	4630      	mov	r0, r6
 80052f4:	f000 f954 	bl	80055a0 <_lv_obj_get_style_int>
    if(lv_obj_get_style_bg_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
 80052f8:	f010 0fff 	tst.w	r0, #255	; 0xff
 80052fc:	d1e6      	bne.n	80052cc <update_style_cache.part.0+0x26c>
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_BLEND_MODE, pattern_blend_mode, lv_blend_mode_t, _int, scalar)
 80052fe:	2260      	movs	r2, #96	; 0x60
 8005300:	4629      	mov	r1, r5
 8005302:	4630      	mov	r0, r6
 8005304:	f000 f94c 	bl	80055a0 <_lv_obj_get_style_int>
       lv_obj_get_style_border_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
 8005308:	f010 0fff 	tst.w	r0, #255	; 0xff
 800530c:	d1de      	bne.n	80052cc <update_style_cache.part.0+0x26c>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_BLEND_MODE, outline_blend_mode, lv_blend_mode_t, _int, scalar)
 800530e:	2242      	movs	r2, #66	; 0x42
 8005310:	4629      	mov	r1, r5
 8005312:	4630      	mov	r0, r6
 8005314:	f000 f944 	bl	80055a0 <_lv_obj_get_style_int>
       lv_obj_get_style_pattern_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
 8005318:	f010 0fff 	tst.w	r0, #255	; 0xff
 800531c:	d1d6      	bne.n	80052cc <update_style_cache.part.0+0x26c>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_BLEND_MODE, value_blend_mode, lv_blend_mode_t, _int, scalar)
 800531e:	2272      	movs	r2, #114	; 0x72
 8005320:	4629      	mov	r1, r5
 8005322:	4630      	mov	r0, r6
 8005324:	f000 f93c 	bl	80055a0 <_lv_obj_get_style_int>
       lv_obj_get_style_outline_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
 8005328:	f010 0fff 	tst.w	r0, #255	; 0xff
 800532c:	d1ce      	bne.n	80052cc <update_style_cache.part.0+0x26c>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_BLEND_MODE, text_blend_mode, lv_blend_mode_t, _int, scalar)
 800532e:	f248 0283 	movw	r2, #32899	; 0x8083
 8005332:	4629      	mov	r1, r5
 8005334:	4630      	mov	r0, r6
 8005336:	f000 f933 	bl	80055a0 <_lv_obj_get_style_int>
       lv_obj_get_style_value_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
 800533a:	f010 0fff 	tst.w	r0, #255	; 0xff
 800533e:	d1c5      	bne.n	80052cc <update_style_cache.part.0+0x26c>
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_BLEND_MODE, line_blend_mode, lv_blend_mode_t, _int, scalar)
 8005340:	2291      	movs	r2, #145	; 0x91
 8005342:	4629      	mov	r1, r5
 8005344:	4630      	mov	r0, r6
 8005346:	f000 f92b 	bl	80055a0 <_lv_obj_get_style_int>
       lv_obj_get_style_text_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
 800534a:	f010 0fff 	tst.w	r0, #255	; 0xff
 800534e:	d1bd      	bne.n	80052cc <update_style_cache.part.0+0x26c>
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_BLEND_MODE, image_blend_mode, lv_blend_mode_t, _int, scalar)
 8005350:	f248 02a0 	movw	r2, #32928	; 0x80a0
 8005354:	4629      	mov	r1, r5
 8005356:	4630      	mov	r0, r6
 8005358:	f000 f922 	bl	80055a0 <_lv_obj_get_style_int>
       lv_obj_get_style_line_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
 800535c:	f010 0fff 	tst.w	r0, #255	; 0xff
 8005360:	d1b4      	bne.n	80052cc <update_style_cache.part.0+0x26c>
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_BLEND_MODE, shadow_blend_mode, lv_blend_mode_t, _int, scalar)
 8005362:	4629      	mov	r1, r5
 8005364:	4630      	mov	r0, r6
 8005366:	2254      	movs	r2, #84	; 0x54
 8005368:	f000 f91a 	bl	80055a0 <_lv_obj_get_style_int>
       lv_obj_get_style_image_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
 800536c:	f010 0fff 	tst.w	r0, #255	; 0xff
 8005370:	d1ac      	bne.n	80052cc <update_style_cache.part.0+0x26c>
 8005372:	e7af      	b.n	80052d4 <update_style_cache.part.0+0x274>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
 8005374:	2216      	movs	r2, #22
 8005376:	4629      	mov	r1, r5
 8005378:	4630      	mov	r0, r6
 800537a:	f000 f911 	bl	80055a0 <_lv_obj_get_style_int>
    if(lv_obj_get_style_margin_top(obj, part) != 0 ||
 800537e:	2800      	cmp	r0, #0
 8005380:	d194      	bne.n	80052ac <update_style_cache.part.0+0x24c>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_LEFT, margin_left, lv_style_int_t, _int, scalar)
 8005382:	2217      	movs	r2, #23
 8005384:	4629      	mov	r1, r5
 8005386:	4630      	mov	r0, r6
 8005388:	f000 f90a 	bl	80055a0 <_lv_obj_get_style_int>
       lv_obj_get_style_margin_bottom(obj, part) != 0 ||
 800538c:	2800      	cmp	r0, #0
 800538e:	d18d      	bne.n	80052ac <update_style_cache.part.0+0x24c>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_RIGHT, margin_right, lv_style_int_t, _int, scalar)
 8005390:	2218      	movs	r2, #24
 8005392:	4629      	mov	r1, r5
 8005394:	4630      	mov	r0, r6
 8005396:	f000 f903 	bl	80055a0 <_lv_obj_get_style_int>
       lv_obj_get_style_margin_left(obj, part) != 0 ||
 800539a:	2800      	cmp	r0, #0
 800539c:	d186      	bne.n	80052ac <update_style_cache.part.0+0x24c>
 800539e:	e789      	b.n	80052b4 <update_style_cache.part.0+0x254>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
 80053a0:	2211      	movs	r2, #17
 80053a2:	4629      	mov	r1, r5
 80053a4:	4630      	mov	r0, r6
 80053a6:	f000 f8fb 	bl	80055a0 <_lv_obj_get_style_int>
    if(lv_obj_get_style_pad_top(obj, part) != 0 ||
 80053aa:	2800      	cmp	r0, #0
 80053ac:	f47f af6f 	bne.w	800528e <update_style_cache.part.0+0x22e>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
 80053b0:	2212      	movs	r2, #18
 80053b2:	4629      	mov	r1, r5
 80053b4:	4630      	mov	r0, r6
 80053b6:	f000 f8f3 	bl	80055a0 <_lv_obj_get_style_int>
       lv_obj_get_style_pad_bottom(obj, part) != 0 ||
 80053ba:	2800      	cmp	r0, #0
 80053bc:	f47f af67 	bne.w	800528e <update_style_cache.part.0+0x22e>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
 80053c0:	2213      	movs	r2, #19
 80053c2:	4629      	mov	r1, r5
 80053c4:	4630      	mov	r0, r6
 80053c6:	f000 f8eb 	bl	80055a0 <_lv_obj_get_style_int>
       lv_obj_get_style_pad_left(obj, part) != 0 ||
 80053ca:	2800      	cmp	r0, #0
 80053cc:	f47f af5f 	bne.w	800528e <update_style_cache.part.0+0x22e>
 80053d0:	e761      	b.n	8005296 <update_style_cache.part.0+0x236>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
 80053d2:	2204      	movs	r2, #4
 80053d4:	4629      	mov	r1, r5
 80053d6:	4630      	mov	r0, r6
 80053d8:	f000 f8e2 	bl	80055a0 <_lv_obj_get_style_int>
    if(lv_obj_get_style_transform_angle(obj, part) != 0 ||
 80053dc:	2800      	cmp	r0, #0
 80053de:	f47f af46 	bne.w	800526e <update_style_cache.part.0+0x20e>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
 80053e2:	2205      	movs	r2, #5
 80053e4:	4629      	mov	r1, r5
 80053e6:	4630      	mov	r0, r6
 80053e8:	f000 f8da 	bl	80055a0 <_lv_obj_get_style_int>
       lv_obj_get_style_transform_width(obj, part) != 0 ||
 80053ec:	2800      	cmp	r0, #0
 80053ee:	f47f af3e 	bne.w	800526e <update_style_cache.part.0+0x20e>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ZOOM, transform_zoom, lv_style_int_t, _int, scalar)
 80053f2:	2207      	movs	r2, #7
 80053f4:	4629      	mov	r1, r5
 80053f6:	4630      	mov	r0, r6
 80053f8:	f000 f8d2 	bl	80055a0 <_lv_obj_get_style_int>
       lv_obj_get_style_transform_height(obj, part) != 0 ||
 80053fc:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8005400:	f47f af35 	bne.w	800526e <update_style_cache.part.0+0x20e>
 8005404:	e737      	b.n	8005276 <update_style_cache.part.0+0x216>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
 8005406:	f248 0281 	movw	r2, #32897	; 0x8081
 800540a:	4629      	mov	r1, r5
 800540c:	4630      	mov	r0, r6
 800540e:	f000 f8c7 	bl	80055a0 <_lv_obj_get_style_int>
    if(lv_obj_get_style_text_letter_space(obj, part) != 0 ||
 8005412:	2800      	cmp	r0, #0
 8005414:	f47f ae77 	bne.w	8005106 <update_style_cache.part.0+0xa6>
 8005418:	e679      	b.n	800510e <update_style_cache.part.0+0xae>
 800541a:	4604      	mov	r4, r0
 800541c:	e637      	b.n	800508e <update_style_cache.part.0+0x2e>
    if(res != LV_RES_OK) return NULL;
 800541e:	463c      	mov	r4, r7
 8005420:	e635      	b.n	800508e <update_style_cache.part.0+0x2e>
 8005422:	bf00      	nop
 8005424:	20000020 	.word	0x20000020
 8005428:	f7ff7fff 	.word	0xf7ff7fff

0800542c <_lv_obj_get_style_opa>:
{
 800542c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005430:	4617      	mov	r7, r2
 8005432:	b085      	sub	sp, #20
    while(parent) {
 8005434:	2800      	cmp	r0, #0
 8005436:	f000 80ab 	beq.w	8005590 <_lv_obj_get_style_opa+0x164>
    if(part == LV_OBJ_PART_MAIN) return &((lv_obj_t *)obj)->style_list;
 800543a:	460e      	mov	r6, r1
 800543c:	4604      	mov	r4, r0
 800543e:	ea4f 2812 	mov.w	r8, r2, lsr #8
 8005442:	2900      	cmp	r1, #0
 8005444:	f000 80a2 	beq.w	800558c <_lv_obj_get_style_opa+0x160>
    info.result = NULL;
 8005448:	2500      	movs	r5, #0
    if(obj->signal_cb) res = obj->signal_cb(obj, signal, param);
 800544a:	69c3      	ldr	r3, [r0, #28]
    info.part = part;
 800544c:	f88d 1008 	strb.w	r1, [sp, #8]
    info.result = NULL;
 8005450:	9503      	str	r5, [sp, #12]
    if(obj->signal_cb) res = obj->signal_cb(obj, signal, param);
 8005452:	2b00      	cmp	r3, #0
 8005454:	f000 8083 	beq.w	800555e <_lv_obj_get_style_opa+0x132>
 8005458:	aa02      	add	r2, sp, #8
 800545a:	2108      	movs	r1, #8
 800545c:	4798      	blx	r3
    if(res != LV_RES_OK) return NULL;
 800545e:	2801      	cmp	r0, #1
 8005460:	f040 8081 	bne.w	8005566 <_lv_obj_get_style_opa+0x13a>
 8005464:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8005468:	463d      	mov	r5, r7
        if(!list->ignore_cache && list->style_cnt > 0) {
 800546a:	f899 3005 	ldrb.w	r3, [r9, #5]
 800546e:	0719      	lsls	r1, r3, #28
 8005470:	d411      	bmi.n	8005496 <_lv_obj_get_style_opa+0x6a>
 8005472:	f899 2004 	ldrb.w	r2, [r9, #4]
 8005476:	0692      	lsls	r2, r2, #26
 8005478:	d00d      	beq.n	8005496 <_lv_obj_get_style_opa+0x6a>
            if(!list->valid_cache) update_style_cache((lv_obj_t *)parent, part, prop  & (~LV_STYLE_STATE_MASK));
 800547a:	075b      	lsls	r3, r3, #29
 800547c:	f425 45fe 	bic.w	r5, r5, #32512	; 0x7f00
 8005480:	d54f      	bpl.n	8005522 <_lv_obj_get_style_opa+0xf6>
            switch(prop & (~LV_STYLE_STATE_MASK)) {
 8005482:	f248 030c 	movw	r3, #32780	; 0x800c
 8005486:	429d      	cmp	r5, r3
 8005488:	d058      	beq.n	800553c <_lv_obj_get_style_opa+0x110>
 800548a:	f248 03ad 	movw	r3, #32941	; 0x80ad
 800548e:	429d      	cmp	r5, r3
 8005490:	d072      	beq.n	8005578 <_lv_obj_get_style_opa+0x14c>
 8005492:	2d2c      	cmp	r5, #44	; 0x2c
 8005494:	d069      	beq.n	800556a <_lv_obj_get_style_opa+0x13e>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8005496:	4620      	mov	r0, r4
 8005498:	f00f f996 	bl	80147c8 <lv_debug_check_null>
 800549c:	2800      	cmp	r0, #0
 800549e:	d034      	beq.n	800550a <_lv_obj_get_style_opa+0xde>
    if(part < _LV_OBJ_PART_REAL_LAST) return ((lv_obj_t *)obj)->state;
 80054a0:	2e3f      	cmp	r6, #63	; 0x3f
 80054a2:	d956      	bls.n	8005552 <_lv_obj_get_style_opa+0x126>
    info.result = LV_STATE_DEFAULT;
 80054a4:	2300      	movs	r3, #0
    info.part = part;
 80054a6:	f88d 6008 	strb.w	r6, [sp, #8]
    info.result = LV_STATE_DEFAULT;
 80054aa:	f88d 3009 	strb.w	r3, [sp, #9]
    if(obj->signal_cb) res = obj->signal_cb(obj, signal, param);
 80054ae:	69e3      	ldr	r3, [r4, #28]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d056      	beq.n	8005562 <_lv_obj_get_style_opa+0x136>
 80054b4:	aa02      	add	r2, sp, #8
 80054b6:	2109      	movs	r1, #9
 80054b8:	4620      	mov	r0, r4
 80054ba:	4798      	blx	r3
 80054bc:	f89d 5009 	ldrb.w	r5, [sp, #9]
 80054c0:	eb07 2505 	add.w	r5, r7, r5, lsl #8
 80054c4:	b2ad      	uxth	r5, r5
        res = _lv_style_list_get_opa(list, prop, &value_act);
 80054c6:	4648      	mov	r0, r9
 80054c8:	f10d 0207 	add.w	r2, sp, #7
 80054cc:	4629      	mov	r1, r5
 80054ce:	f004 fa17 	bl	8009900 <_lv_style_list_get_opa>
        if(res == LV_RES_OK) return value_act;
 80054d2:	2801      	cmp	r0, #1
 80054d4:	d057      	beq.n	8005586 <_lv_obj_get_style_opa+0x15a>
        if(LV_STYLE_ATTR_GET_INHERIT(attr) == 0) break;
 80054d6:	f018 0f80 	tst.w	r8, #128	; 0x80
 80054da:	d006      	beq.n	80054ea <_lv_obj_get_style_opa+0xbe>
        if(part != LV_OBJ_PART_MAIN) {
 80054dc:	b9de      	cbnz	r6, 8005516 <_lv_obj_get_style_opa+0xea>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80054de:	4620      	mov	r0, r4
 80054e0:	f00f f972 	bl	80147c8 <lv_debug_check_null>
 80054e4:	b378      	cbz	r0, 8005546 <_lv_obj_get_style_opa+0x11a>
    return obj->parent;
 80054e6:	6824      	ldr	r4, [r4, #0]
    while(parent) {
 80054e8:	b9bc      	cbnz	r4, 800551a <_lv_obj_get_style_opa+0xee>
 80054ea:	f425 45fe 	bic.w	r5, r5, #32512	; 0x7f00
    prop = prop & (~LV_STYLE_STATE_MASK);
 80054ee:	b2ad      	uxth	r5, r5
    switch(prop) {
 80054f0:	2d6d      	cmp	r5, #109	; 0x6d
 80054f2:	d046      	beq.n	8005582 <_lv_obj_get_style_opa+0x156>
 80054f4:	f248 03ad 	movw	r3, #32941	; 0x80ad
 80054f8:	429d      	cmp	r5, r3
 80054fa:	d042      	beq.n	8005582 <_lv_obj_get_style_opa+0x156>
 80054fc:	2d2c      	cmp	r5, #44	; 0x2c
 80054fe:	bf14      	ite	ne
 8005500:	20ff      	movne	r0, #255	; 0xff
 8005502:	2000      	moveq	r0, #0
}
 8005504:	b005      	add	sp, #20
 8005506:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 800550a:	4603      	mov	r3, r0
 800550c:	4622      	mov	r2, r4
 800550e:	4823      	ldr	r0, [pc, #140]	; (800559c <_lv_obj_get_style_opa+0x170>)
 8005510:	f00f f95e 	bl	80147d0 <lv_debug_log_error>
 8005514:	e7fe      	b.n	8005514 <_lv_obj_get_style_opa+0xe8>
    while(parent) {
 8005516:	2c00      	cmp	r4, #0
 8005518:	d0e7      	beq.n	80054ea <_lv_obj_get_style_opa+0xbe>
    if(part == LV_OBJ_PART_MAIN) return &((lv_obj_t *)obj)->style_list;
 800551a:	f104 0928 	add.w	r9, r4, #40	; 0x28
 800551e:	2600      	movs	r6, #0
 8005520:	e7a3      	b.n	800546a <_lv_obj_get_style_opa+0x3e>
    if(style_prop_is_cacheble(prop) == false) return;
 8005522:	4628      	mov	r0, r5
 8005524:	f7fd fe4c 	bl	80031c0 <style_prop_is_cacheble>
 8005528:	2800      	cmp	r0, #0
 800552a:	d0aa      	beq.n	8005482 <_lv_obj_get_style_opa+0x56>
 800552c:	4631      	mov	r1, r6
 800552e:	4620      	mov	r0, r4
 8005530:	f7ff fd96 	bl	8005060 <update_style_cache.part.0>
            switch(prop & (~LV_STYLE_STATE_MASK)) {
 8005534:	f248 030c 	movw	r3, #32780	; 0x800c
 8005538:	429d      	cmp	r5, r3
 800553a:	d1a6      	bne.n	800548a <_lv_obj_get_style_opa+0x5e>
                    if(list->opa_scale_cover) def = true;
 800553c:	f899 3005 	ldrb.w	r3, [r9, #5]
 8005540:	0698      	lsls	r0, r3, #26
 8005542:	d5a8      	bpl.n	8005496 <_lv_obj_get_style_opa+0x6a>
 8005544:	e7d3      	b.n	80054ee <_lv_obj_get_style_opa+0xc2>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8005546:	4622      	mov	r2, r4
 8005548:	4633      	mov	r3, r6
 800554a:	4814      	ldr	r0, [pc, #80]	; (800559c <_lv_obj_get_style_opa+0x170>)
 800554c:	f00f f940 	bl	80147d0 <lv_debug_log_error>
 8005550:	e7fe      	b.n	8005550 <_lv_obj_get_style_opa+0x124>
    if(part < _LV_OBJ_PART_REAL_LAST) return ((lv_obj_t *)obj)->state;
 8005552:	f894 503d 	ldrb.w	r5, [r4, #61]	; 0x3d
 8005556:	eb07 2505 	add.w	r5, r7, r5, lsl #8
 800555a:	b2ad      	uxth	r5, r5
 800555c:	e7b3      	b.n	80054c6 <_lv_obj_get_style_opa+0x9a>
 800555e:	4699      	mov	r9, r3
    return info.result;
 8005560:	e782      	b.n	8005468 <_lv_obj_get_style_opa+0x3c>
 8005562:	463d      	mov	r5, r7
    return info.result;
 8005564:	e7af      	b.n	80054c6 <_lv_obj_get_style_opa+0x9a>
    if(res != LV_RES_OK) return NULL;
 8005566:	46a9      	mov	r9, r5
 8005568:	e77e      	b.n	8005468 <_lv_obj_get_style_opa+0x3c>
                    if(list->bg_opa_cover) return LV_OPA_COVER;     /*Special case, not the default value is used*/
 800556a:	f899 3006 	ldrb.w	r3, [r9, #6]
 800556e:	06d9      	lsls	r1, r3, #27
 8005570:	d411      	bmi.n	8005596 <_lv_obj_get_style_opa+0x16a>
                    if(list->bg_opa_transp) def = true;
 8005572:	071a      	lsls	r2, r3, #28
 8005574:	d58f      	bpl.n	8005496 <_lv_obj_get_style_opa+0x6a>
 8005576:	e7ba      	b.n	80054ee <_lv_obj_get_style_opa+0xc2>
                    if(list->img_recolor_opa_transp) def = true;
 8005578:	f899 3007 	ldrb.w	r3, [r9, #7]
 800557c:	06db      	lsls	r3, r3, #27
 800557e:	d4b6      	bmi.n	80054ee <_lv_obj_get_style_opa+0xc2>
 8005580:	e789      	b.n	8005496 <_lv_obj_get_style_opa+0x6a>
            return LV_OPA_TRANSP;
 8005582:	2000      	movs	r0, #0
 8005584:	e7be      	b.n	8005504 <_lv_obj_get_style_opa+0xd8>
        if(res == LV_RES_OK) return value_act;
 8005586:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800558a:	e7bb      	b.n	8005504 <_lv_obj_get_style_opa+0xd8>
 800558c:	4615      	mov	r5, r2
 800558e:	e7c4      	b.n	800551a <_lv_obj_get_style_opa+0xee>
 8005590:	f422 45fe 	bic.w	r5, r2, #32512	; 0x7f00
 8005594:	e7ab      	b.n	80054ee <_lv_obj_get_style_opa+0xc2>
                    if(list->bg_opa_cover) return LV_OPA_COVER;     /*Special case, not the default value is used*/
 8005596:	20ff      	movs	r0, #255	; 0xff
 8005598:	e7b4      	b.n	8005504 <_lv_obj_get_style_opa+0xd8>
 800559a:	bf00      	nop
 800559c:	0801e1d4 	.word	0x0801e1d4

080055a0 <_lv_obj_get_style_int>:
{
 80055a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80055a4:	4690      	mov	r8, r2
 80055a6:	b085      	sub	sp, #20
    while(parent) {
 80055a8:	2800      	cmp	r0, #0
 80055aa:	f000 81c1 	beq.w	8005930 <_lv_obj_get_style_int+0x390>
    if(part == LV_OBJ_PART_MAIN) return &((lv_obj_t *)obj)->style_list;
 80055ae:	460f      	mov	r7, r1
 80055b0:	4605      	mov	r5, r0
 80055b2:	ea4f 2912 	mov.w	r9, r2, lsr #8
 80055b6:	2900      	cmp	r1, #0
 80055b8:	f000 81b8 	beq.w	800592c <_lv_obj_get_style_int+0x38c>
    info.result = NULL;
 80055bc:	2400      	movs	r4, #0
    if(obj->signal_cb) res = obj->signal_cb(obj, signal, param);
 80055be:	69c6      	ldr	r6, [r0, #28]
    info.part = part;
 80055c0:	f88d 1008 	strb.w	r1, [sp, #8]
    info.result = NULL;
 80055c4:	9403      	str	r4, [sp, #12]
    if(obj->signal_cb) res = obj->signal_cb(obj, signal, param);
 80055c6:	b136      	cbz	r6, 80055d6 <_lv_obj_get_style_int+0x36>
 80055c8:	aa02      	add	r2, sp, #8
 80055ca:	2108      	movs	r1, #8
 80055cc:	47b0      	blx	r6
    if(res != LV_RES_OK) return NULL;
 80055ce:	2801      	cmp	r0, #1
 80055d0:	bf0c      	ite	eq
 80055d2:	9e03      	ldreq	r6, [sp, #12]
 80055d4:	4626      	movne	r6, r4
 80055d6:	4644      	mov	r4, r8
        if(!list->ignore_cache && list->style_cnt > 0) {
 80055d8:	7973      	ldrb	r3, [r6, #5]
 80055da:	0719      	lsls	r1, r3, #28
 80055dc:	f100 80aa 	bmi.w	8005734 <_lv_obj_get_style_int+0x194>
 80055e0:	7932      	ldrb	r2, [r6, #4]
 80055e2:	0692      	lsls	r2, r2, #26
 80055e4:	f000 80a6 	beq.w	8005734 <_lv_obj_get_style_int+0x194>
            if(!list->valid_cache) update_style_cache((lv_obj_t *)parent, part, prop  & (~LV_STYLE_STATE_MASK));
 80055e8:	0759      	lsls	r1, r3, #29
 80055ea:	f424 44fe 	bic.w	r4, r4, #32512	; 0x7f00
 80055ee:	f140 812b 	bpl.w	8005848 <_lv_obj_get_style_int+0x2a8>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
 80055f2:	2c91      	cmp	r4, #145	; 0x91
 80055f4:	f300 80d0 	bgt.w	8005798 <_lv_obj_get_style_int+0x1f8>
 80055f8:	2c00      	cmp	r4, #0
 80055fa:	f000 809b 	beq.w	8005734 <_lv_obj_get_style_int+0x194>
 80055fe:	1e63      	subs	r3, r4, #1
 8005600:	2b90      	cmp	r3, #144	; 0x90
 8005602:	f200 8097 	bhi.w	8005734 <_lv_obj_get_style_int+0x194>
 8005606:	e8df f013 	tbh	[pc, r3, lsl #1]
 800560a:	0179      	.short	0x0179
 800560c:	00950091 	.word	0x00950091
 8005610:	01730173 	.word	0x01730173
 8005614:	01730173 	.word	0x01730173
 8005618:	00950095 	.word	0x00950095
 800561c:	00950095 	.word	0x00950095
 8005620:	00950095 	.word	0x00950095
 8005624:	00950095 	.word	0x00950095
 8005628:	016e016e 	.word	0x016e016e
 800562c:	016e016e 	.word	0x016e016e
 8005630:	01690095 	.word	0x01690095
 8005634:	01690169 	.word	0x01690169
 8005638:	00950169 	.word	0x00950169
 800563c:	00950095 	.word	0x00950095
 8005640:	00950095 	.word	0x00950095
 8005644:	00950095 	.word	0x00950095
 8005648:	00950164 	.word	0x00950164
 800564c:	00950095 	.word	0x00950095
 8005650:	00950095 	.word	0x00950095
 8005654:	00950095 	.word	0x00950095
 8005658:	00950095 	.word	0x00950095
 800565c:	00950095 	.word	0x00950095
 8005660:	00950095 	.word	0x00950095
 8005664:	00950095 	.word	0x00950095
 8005668:	015a015f 	.word	0x015a015f
 800566c:	01540164 	.word	0x01540164
 8005670:	00950095 	.word	0x00950095
 8005674:	00950095 	.word	0x00950095
 8005678:	00950095 	.word	0x00950095
 800567c:	00950095 	.word	0x00950095
 8005680:	00950095 	.word	0x00950095
 8005684:	00950095 	.word	0x00950095
 8005688:	0095014f 	.word	0x0095014f
 800568c:	00950164 	.word	0x00950164
 8005690:	00950095 	.word	0x00950095
 8005694:	00950095 	.word	0x00950095
 8005698:	00950095 	.word	0x00950095
 800569c:	00950095 	.word	0x00950095
 80056a0:	00950095 	.word	0x00950095
 80056a4:	00950095 	.word	0x00950095
 80056a8:	0095017e 	.word	0x0095017e
 80056ac:	00950095 	.word	0x00950095
 80056b0:	00950164 	.word	0x00950164
 80056b4:	00950095 	.word	0x00950095
 80056b8:	00950095 	.word	0x00950095
 80056bc:	00950095 	.word	0x00950095
 80056c0:	00950095 	.word	0x00950095
 80056c4:	00950095 	.word	0x00950095
 80056c8:	00950164 	.word	0x00950164
 80056cc:	00950095 	.word	0x00950095
 80056d0:	00950095 	.word	0x00950095
 80056d4:	00950095 	.word	0x00950095
 80056d8:	00950095 	.word	0x00950095
 80056dc:	00950095 	.word	0x00950095
 80056e0:	00950095 	.word	0x00950095
 80056e4:	00950095 	.word	0x00950095
 80056e8:	00950095 	.word	0x00950095
 80056ec:	00950164 	.word	0x00950164
 80056f0:	00950095 	.word	0x00950095
 80056f4:	00950095 	.word	0x00950095
 80056f8:	00950095 	.word	0x00950095
 80056fc:	00950095 	.word	0x00950095
 8005700:	00950095 	.word	0x00950095
 8005704:	00950095 	.word	0x00950095
 8005708:	00950095 	.word	0x00950095
 800570c:	00950095 	.word	0x00950095
 8005710:	00950095 	.word	0x00950095
 8005714:	00950095 	.word	0x00950095
 8005718:	00950095 	.word	0x00950095
 800571c:	00950095 	.word	0x00950095
 8005720:	00950095 	.word	0x00950095
 8005724:	00950095 	.word	0x00950095
 8005728:	01640095 	.word	0x01640095
                    if(list->clip_corner_off) def = true;
 800572c:	7973      	ldrb	r3, [r6, #5]
 800572e:	065a      	lsls	r2, r3, #25
 8005730:	f100 80a7 	bmi.w	8005882 <_lv_obj_get_style_int+0x2e2>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8005734:	4628      	mov	r0, r5
 8005736:	f00f f847 	bl	80147c8 <lv_debug_check_null>
 800573a:	2800      	cmp	r0, #0
 800573c:	d078      	beq.n	8005830 <_lv_obj_get_style_int+0x290>
    if(part < _LV_OBJ_PART_REAL_LAST) return ((lv_obj_t *)obj)->state;
 800573e:	2f3f      	cmp	r7, #63	; 0x3f
 8005740:	f240 8093 	bls.w	800586a <_lv_obj_get_style_int+0x2ca>
    info.result = LV_STATE_DEFAULT;
 8005744:	2200      	movs	r2, #0
    if(obj->signal_cb) res = obj->signal_cb(obj, signal, param);
 8005746:	69eb      	ldr	r3, [r5, #28]
    info.part = part;
 8005748:	f88d 7004 	strb.w	r7, [sp, #4]
    info.result = LV_STATE_DEFAULT;
 800574c:	f88d 2005 	strb.w	r2, [sp, #5]
    if(obj->signal_cb) res = obj->signal_cb(obj, signal, param);
 8005750:	2b00      	cmp	r3, #0
 8005752:	f000 8090 	beq.w	8005876 <_lv_obj_get_style_int+0x2d6>
 8005756:	aa01      	add	r2, sp, #4
 8005758:	2109      	movs	r1, #9
 800575a:	4628      	mov	r0, r5
 800575c:	4798      	blx	r3
 800575e:	f89d 4005 	ldrb.w	r4, [sp, #5]
 8005762:	eb08 2404 	add.w	r4, r8, r4, lsl #8
 8005766:	b2a4      	uxth	r4, r4
        res = _lv_style_list_get_int(list, prop, &value_act);
 8005768:	4630      	mov	r0, r6
 800576a:	aa02      	add	r2, sp, #8
 800576c:	4621      	mov	r1, r4
 800576e:	f003 ff41 	bl	80095f4 <_lv_style_list_get_int>
        if(res == LV_RES_OK) return value_act;
 8005772:	2801      	cmp	r0, #1
 8005774:	f000 80d7 	beq.w	8005926 <_lv_obj_get_style_int+0x386>
        if(LV_STYLE_ATTR_GET_INHERIT(attr) == 0) break;
 8005778:	f019 0f80 	tst.w	r9, #128	; 0x80
 800577c:	d009      	beq.n	8005792 <_lv_obj_get_style_int+0x1f2>
        if(part != LV_OBJ_PART_MAIN) {
 800577e:	2f00      	cmp	r7, #0
 8005780:	d15c      	bne.n	800583c <_lv_obj_get_style_int+0x29c>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8005782:	4628      	mov	r0, r5
 8005784:	f00f f820 	bl	80147c8 <lv_debug_check_null>
 8005788:	2800      	cmp	r0, #0
 800578a:	d068      	beq.n	800585e <_lv_obj_get_style_int+0x2be>
    return obj->parent;
 800578c:	682d      	ldr	r5, [r5, #0]
    while(parent) {
 800578e:	2d00      	cmp	r5, #0
 8005790:	d156      	bne.n	8005840 <_lv_obj_get_style_int+0x2a0>
 8005792:	f424 44fe 	bic.w	r4, r4, #32512	; 0x7f00
 8005796:	e074      	b.n	8005882 <_lv_obj_get_style_int+0x2e2>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
 8005798:	4b68      	ldr	r3, [pc, #416]	; (800593c <_lv_obj_get_style_int+0x39c>)
 800579a:	4423      	add	r3, r4
 800579c:	2b20      	cmp	r3, #32
 800579e:	d8c9      	bhi.n	8005734 <_lv_obj_get_style_int+0x194>
 80057a0:	2b20      	cmp	r3, #32
 80057a2:	d8c7      	bhi.n	8005734 <_lv_obj_get_style_int+0x194>
 80057a4:	a201      	add	r2, pc, #4	; (adr r2, 80057ac <_lv_obj_get_style_int+0x20c>)
 80057a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057aa:	bf00      	nop
 80057ac:	0800589f 	.word	0x0800589f
 80057b0:	0800589f 	.word	0x0800589f
 80057b4:	0800587b 	.word	0x0800587b
 80057b8:	080058d3 	.word	0x080058d3
 80057bc:	08005735 	.word	0x08005735
 80057c0:	08005735 	.word	0x08005735
 80057c4:	08005735 	.word	0x08005735
 80057c8:	08005735 	.word	0x08005735
 80057cc:	08005735 	.word	0x08005735
 80057d0:	08005735 	.word	0x08005735
 80057d4:	08005735 	.word	0x08005735
 80057d8:	08005735 	.word	0x08005735
 80057dc:	08005735 	.word	0x08005735
 80057e0:	08005735 	.word	0x08005735
 80057e4:	08005735 	.word	0x08005735
 80057e8:	08005735 	.word	0x08005735
 80057ec:	08005735 	.word	0x08005735
 80057f0:	08005735 	.word	0x08005735
 80057f4:	08005735 	.word	0x08005735
 80057f8:	08005735 	.word	0x08005735
 80057fc:	08005735 	.word	0x08005735
 8005800:	08005735 	.word	0x08005735
 8005804:	08005735 	.word	0x08005735
 8005808:	08005735 	.word	0x08005735
 800580c:	08005735 	.word	0x08005735
 8005810:	08005735 	.word	0x08005735
 8005814:	08005735 	.word	0x08005735
 8005818:	08005735 	.word	0x08005735
 800581c:	08005735 	.word	0x08005735
 8005820:	08005735 	.word	0x08005735
 8005824:	08005735 	.word	0x08005735
 8005828:	08005735 	.word	0x08005735
 800582c:	080058d3 	.word	0x080058d3
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8005830:	4603      	mov	r3, r0
 8005832:	462a      	mov	r2, r5
 8005834:	4842      	ldr	r0, [pc, #264]	; (8005940 <_lv_obj_get_style_int+0x3a0>)
 8005836:	f00e ffcb 	bl	80147d0 <lv_debug_log_error>
 800583a:	e7fe      	b.n	800583a <_lv_obj_get_style_int+0x29a>
    while(parent) {
 800583c:	2d00      	cmp	r5, #0
 800583e:	d0a8      	beq.n	8005792 <_lv_obj_get_style_int+0x1f2>
    if(part == LV_OBJ_PART_MAIN) return &((lv_obj_t *)obj)->style_list;
 8005840:	f105 0628 	add.w	r6, r5, #40	; 0x28
 8005844:	2700      	movs	r7, #0
 8005846:	e6c7      	b.n	80055d8 <_lv_obj_get_style_int+0x38>
    if(style_prop_is_cacheble(prop) == false) return;
 8005848:	4620      	mov	r0, r4
 800584a:	f7fd fcb9 	bl	80031c0 <style_prop_is_cacheble>
 800584e:	2800      	cmp	r0, #0
 8005850:	f43f aecf 	beq.w	80055f2 <_lv_obj_get_style_int+0x52>
 8005854:	4639      	mov	r1, r7
 8005856:	4628      	mov	r0, r5
 8005858:	f7ff fc02 	bl	8005060 <update_style_cache.part.0>
 800585c:	e6c9      	b.n	80055f2 <_lv_obj_get_style_int+0x52>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 800585e:	462a      	mov	r2, r5
 8005860:	463b      	mov	r3, r7
 8005862:	4837      	ldr	r0, [pc, #220]	; (8005940 <_lv_obj_get_style_int+0x3a0>)
 8005864:	f00e ffb4 	bl	80147d0 <lv_debug_log_error>
 8005868:	e7fe      	b.n	8005868 <_lv_obj_get_style_int+0x2c8>
    if(part < _LV_OBJ_PART_REAL_LAST) return ((lv_obj_t *)obj)->state;
 800586a:	f895 403d 	ldrb.w	r4, [r5, #61]	; 0x3d
 800586e:	eb08 2404 	add.w	r4, r8, r4, lsl #8
 8005872:	b2a4      	uxth	r4, r4
 8005874:	e778      	b.n	8005768 <_lv_obj_get_style_int+0x1c8>
 8005876:	4644      	mov	r4, r8
    return info.result;
 8005878:	e776      	b.n	8005768 <_lv_obj_get_style_int+0x1c8>
                    if(list->text_decor_none) def = true;
 800587a:	79f3      	ldrb	r3, [r6, #7]
 800587c:	065b      	lsls	r3, r3, #25
 800587e:	f57f af59 	bpl.w	8005734 <_lv_obj_get_style_int+0x194>
    prop = prop & (~LV_STYLE_STATE_MASK);
 8005882:	b2a4      	uxth	r4, r4
    switch(prop) {
 8005884:	2c22      	cmp	r4, #34	; 0x22
 8005886:	d056      	beq.n	8005936 <_lv_obj_get_style_int+0x396>
 8005888:	d842      	bhi.n	8005910 <_lv_obj_get_style_int+0x370>
 800588a:	2c03      	cmp	r4, #3
 800588c:	d047      	beq.n	800591e <_lv_obj_get_style_int+0x37e>
            return LV_IMG_ZOOM_NONE;
 800588e:	2c07      	cmp	r4, #7
 8005890:	bf14      	ite	ne
 8005892:	2000      	movne	r0, #0
 8005894:	f44f 7080 	moveq.w	r0, #256	; 0x100
}
 8005898:	b005      	add	sp, #20
 800589a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                    if(list->text_space_zero) def = true;
 800589e:	79f3      	ldrb	r3, [r6, #7]
 80058a0:	069b      	lsls	r3, r3, #26
 80058a2:	f57f af47 	bpl.w	8005734 <_lv_obj_get_style_int+0x194>
 80058a6:	e7ec      	b.n	8005882 <_lv_obj_get_style_int+0x2e2>
                    if(list->outline_width_zero) def = true;
 80058a8:	79f3      	ldrb	r3, [r6, #7]
 80058aa:	07db      	lsls	r3, r3, #31
 80058ac:	f57f af42 	bpl.w	8005734 <_lv_obj_get_style_int+0x194>
 80058b0:	e7e7      	b.n	8005882 <_lv_obj_get_style_int+0x2e2>
                    if(list->border_post_off) def = true;
 80058b2:	f996 3006 	ldrsb.w	r3, [r6, #6]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	f6bf af3c 	bge.w	8005734 <_lv_obj_get_style_int+0x194>
 80058bc:	e7e1      	b.n	8005882 <_lv_obj_get_style_int+0x2e2>
                    if(list->border_side_full) def = true;
 80058be:	79b3      	ldrb	r3, [r6, #6]
 80058c0:	065a      	lsls	r2, r3, #25
 80058c2:	f57f af37 	bpl.w	8005734 <_lv_obj_get_style_int+0x194>
 80058c6:	e7dc      	b.n	8005882 <_lv_obj_get_style_int+0x2e2>
                    if(list->border_width_zero) def = true;
 80058c8:	79b3      	ldrb	r3, [r6, #6]
 80058ca:	0699      	lsls	r1, r3, #26
 80058cc:	f57f af32 	bpl.w	8005734 <_lv_obj_get_style_int+0x194>
 80058d0:	e7d7      	b.n	8005882 <_lv_obj_get_style_int+0x2e2>
                    if(list->blend_mode_all_normal) def = true;
 80058d2:	79b3      	ldrb	r3, [r6, #6]
 80058d4:	075a      	lsls	r2, r3, #29
 80058d6:	f57f af2d 	bpl.w	8005734 <_lv_obj_get_style_int+0x194>
 80058da:	e7d2      	b.n	8005882 <_lv_obj_get_style_int+0x2e2>
                    if(list->margin_all_zero) def = true;
 80058dc:	79b3      	ldrb	r3, [r6, #6]
 80058de:	0799      	lsls	r1, r3, #30
 80058e0:	f57f af28 	bpl.w	8005734 <_lv_obj_get_style_int+0x194>
 80058e4:	e7cd      	b.n	8005882 <_lv_obj_get_style_int+0x2e2>
                    if(list->pad_all_zero) def = true;
 80058e6:	79b3      	ldrb	r3, [r6, #6]
 80058e8:	07db      	lsls	r3, r3, #31
 80058ea:	f57f af23 	bpl.w	8005734 <_lv_obj_get_style_int+0x194>
 80058ee:	e7c8      	b.n	8005882 <_lv_obj_get_style_int+0x2e2>
                    if(list->transform_all_zero) def = true;
 80058f0:	f996 3005 	ldrsb.w	r3, [r6, #5]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	f6bf af1d 	bge.w	8005734 <_lv_obj_get_style_int+0x194>
 80058fa:	e7c2      	b.n	8005882 <_lv_obj_get_style_int+0x2e2>
                    if(list->radius_zero) def = true;
 80058fc:	7973      	ldrb	r3, [r6, #5]
 80058fe:	06d9      	lsls	r1, r3, #27
 8005900:	f57f af18 	bpl.w	8005734 <_lv_obj_get_style_int+0x194>
 8005904:	e7bd      	b.n	8005882 <_lv_obj_get_style_int+0x2e2>
                    if(list->shadow_width_zero) def = true;
 8005906:	79f3      	ldrb	r3, [r6, #7]
 8005908:	075a      	lsls	r2, r3, #29
 800590a:	f57f af13 	bpl.w	8005734 <_lv_obj_get_style_int+0x194>
 800590e:	e7b8      	b.n	8005882 <_lv_obj_get_style_int+0x2e2>
    switch(prop) {
 8005910:	2c31      	cmp	r4, #49	; 0x31
 8005912:	d006      	beq.n	8005922 <_lv_obj_get_style_int+0x382>
            return LV_DPI / 8;
 8005914:	2cc0      	cmp	r4, #192	; 0xc0
 8005916:	bf14      	ite	ne
 8005918:	2000      	movne	r0, #0
 800591a:	2010      	moveq	r0, #16
 800591c:	e7bc      	b.n	8005898 <_lv_obj_get_style_int+0x2f8>
    switch(prop) {
 800591e:	2006      	movs	r0, #6
 8005920:	e7ba      	b.n	8005898 <_lv_obj_get_style_int+0x2f8>
            return LV_BORDER_SIDE_FULL;
 8005922:	200f      	movs	r0, #15
 8005924:	e7b8      	b.n	8005898 <_lv_obj_get_style_int+0x2f8>
        if(res == LV_RES_OK) return value_act;
 8005926:	f9bd 0008 	ldrsh.w	r0, [sp, #8]
 800592a:	e7b5      	b.n	8005898 <_lv_obj_get_style_int+0x2f8>
 800592c:	4614      	mov	r4, r2
 800592e:	e787      	b.n	8005840 <_lv_obj_get_style_int+0x2a0>
 8005930:	f422 44fe 	bic.w	r4, r2, #32512	; 0x7f00
 8005934:	e7a5      	b.n	8005882 <_lv_obj_get_style_int+0x2e2>
            return 255;
 8005936:	20ff      	movs	r0, #255	; 0xff
 8005938:	e7ae      	b.n	8005898 <_lv_obj_get_style_int+0x2f8>
 800593a:	bf00      	nop
 800593c:	ffff7f80 	.word	0xffff7f80
 8005940:	0801e1d4 	.word	0x0801e1d4

08005944 <lv_obj_get_width_fit>:
{
 8005944:	b570      	push	{r4, r5, r6, lr}
 8005946:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8005948:	f00e ff3e 	bl	80147c8 <lv_debug_check_null>
 800594c:	b928      	cbnz	r0, 800595a <lv_obj_get_width_fit+0x16>
 800594e:	4603      	mov	r3, r0
 8005950:	4622      	mov	r2, r4
 8005952:	4811      	ldr	r0, [pc, #68]	; (8005998 <lv_obj_get_width_fit+0x54>)
 8005954:	f00e ff3c 	bl	80147d0 <lv_debug_log_error>
 8005958:	e7fe      	b.n	8005958 <lv_obj_get_width_fit+0x14>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
 800595a:	2212      	movs	r2, #18
 800595c:	2100      	movs	r1, #0
 800595e:	4620      	mov	r0, r4
 8005960:	f7ff fe1e 	bl	80055a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
 8005964:	2213      	movs	r2, #19
 8005966:	2100      	movs	r1, #0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
 8005968:	4606      	mov	r6, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
 800596a:	4620      	mov	r0, r4
 800596c:	f7ff fe18 	bl	80055a0 <_lv_obj_get_style_int>
 8005970:	4605      	mov	r5, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8005972:	4620      	mov	r0, r4
 8005974:	f00e ff28 	bl	80147c8 <lv_debug_check_null>
 8005978:	4603      	mov	r3, r0
 800597a:	b138      	cbz	r0, 800598c <lv_obj_get_width_fit+0x48>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800597c:	8aa3      	ldrh	r3, [r4, #20]
 800597e:	8a22      	ldrh	r2, [r4, #16]
 8005980:	3301      	adds	r3, #1
 8005982:	1a9b      	subs	r3, r3, r2
    return lv_obj_get_width(obj) - left - right;
 8005984:	1b9b      	subs	r3, r3, r6
 8005986:	1b58      	subs	r0, r3, r5
}
 8005988:	b200      	sxth	r0, r0
 800598a:	bd70      	pop	{r4, r5, r6, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 800598c:	4622      	mov	r2, r4
 800598e:	4802      	ldr	r0, [pc, #8]	; (8005998 <lv_obj_get_width_fit+0x54>)
 8005990:	f00e ff1e 	bl	80147d0 <lv_debug_log_error>
 8005994:	e7fe      	b.n	8005994 <lv_obj_get_width_fit+0x50>
 8005996:	bf00      	nop
 8005998:	0801e1d4 	.word	0x0801e1d4

0800599c <_lv_obj_get_style_ptr.constprop.0>:
const void * _lv_obj_get_style_ptr(const lv_obj_t * obj, uint8_t part, lv_style_property_t prop)
 800599c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800599e:	b085      	sub	sp, #20
    while(parent) {
 80059a0:	2800      	cmp	r0, #0
 80059a2:	f000 8083 	beq.w	8005aac <_lv_obj_get_style_ptr.constprop.0+0x110>
    if(part == LV_OBJ_PART_MAIN) return &((lv_obj_t *)obj)->style_list;
 80059a6:	460f      	mov	r7, r1
 80059a8:	4604      	mov	r4, r0
 80059aa:	2900      	cmp	r1, #0
 80059ac:	d07b      	beq.n	8005aa6 <_lv_obj_get_style_ptr.constprop.0+0x10a>
    info.result = NULL;
 80059ae:	2600      	movs	r6, #0
    if(obj->signal_cb) res = obj->signal_cb(obj, signal, param);
 80059b0:	69c5      	ldr	r5, [r0, #28]
    info.part = part;
 80059b2:	f88d 1008 	strb.w	r1, [sp, #8]
    info.result = NULL;
 80059b6:	9603      	str	r6, [sp, #12]
    if(obj->signal_cb) res = obj->signal_cb(obj, signal, param);
 80059b8:	b135      	cbz	r5, 80059c8 <_lv_obj_get_style_ptr.constprop.0+0x2c>
 80059ba:	aa02      	add	r2, sp, #8
 80059bc:	2108      	movs	r1, #8
 80059be:	47a8      	blx	r5
    if(res != LV_RES_OK) return NULL;
 80059c0:	2801      	cmp	r0, #1
 80059c2:	bf0c      	ite	eq
 80059c4:	9d03      	ldreq	r5, [sp, #12]
 80059c6:	4635      	movne	r5, r6
 80059c8:	f248 068e 	movw	r6, #32910	; 0x808e
        if(!list->ignore_cache && list->style_cnt > 0) {
 80059cc:	796b      	ldrb	r3, [r5, #5]
 80059ce:	0719      	lsls	r1, r3, #28
 80059d0:	d412      	bmi.n	80059f8 <_lv_obj_get_style_ptr.constprop.0+0x5c>
 80059d2:	792a      	ldrb	r2, [r5, #4]
 80059d4:	0692      	lsls	r2, r2, #26
 80059d6:	d00f      	beq.n	80059f8 <_lv_obj_get_style_ptr.constprop.0+0x5c>
            if(!list->valid_cache) update_style_cache((lv_obj_t *)parent, part, prop  & (~LV_STYLE_STATE_MASK));
 80059d8:	075b      	lsls	r3, r3, #29
 80059da:	f426 46fe 	bic.w	r6, r6, #32512	; 0x7f00
 80059de:	d407      	bmi.n	80059f0 <_lv_obj_get_style_ptr.constprop.0+0x54>
    if(style_prop_is_cacheble(prop) == false) return;
 80059e0:	4630      	mov	r0, r6
 80059e2:	f7fd fbed 	bl	80031c0 <style_prop_is_cacheble>
 80059e6:	b118      	cbz	r0, 80059f0 <_lv_obj_get_style_ptr.constprop.0+0x54>
 80059e8:	4639      	mov	r1, r7
 80059ea:	4620      	mov	r0, r4
 80059ec:	f7ff fb38 	bl	8005060 <update_style_cache.part.0>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
 80059f0:	f248 038e 	movw	r3, #32910	; 0x808e
 80059f4:	429e      	cmp	r6, r3
 80059f6:	d04b      	beq.n	8005a90 <_lv_obj_get_style_ptr.constprop.0+0xf4>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80059f8:	4620      	mov	r0, r4
 80059fa:	f00e fee5 	bl	80147c8 <lv_debug_check_null>
 80059fe:	b300      	cbz	r0, 8005a42 <_lv_obj_get_style_ptr.constprop.0+0xa6>
    if(part < _LV_OBJ_PART_REAL_LAST) return ((lv_obj_t *)obj)->state;
 8005a00:	2f3f      	cmp	r7, #63	; 0x3f
 8005a02:	d927      	bls.n	8005a54 <_lv_obj_get_style_ptr.constprop.0+0xb8>
    info.result = LV_STATE_DEFAULT;
 8005a04:	2200      	movs	r2, #0
    if(obj->signal_cb) res = obj->signal_cb(obj, signal, param);
 8005a06:	69e3      	ldr	r3, [r4, #28]
    info.part = part;
 8005a08:	f88d 7004 	strb.w	r7, [sp, #4]
    info.result = LV_STATE_DEFAULT;
 8005a0c:	f88d 2005 	strb.w	r2, [sp, #5]
    if(obj->signal_cb) res = obj->signal_cb(obj, signal, param);
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d034      	beq.n	8005a7e <_lv_obj_get_style_ptr.constprop.0+0xe2>
 8005a14:	2109      	movs	r1, #9
 8005a16:	aa01      	add	r2, sp, #4
 8005a18:	4620      	mov	r0, r4
 8005a1a:	4e27      	ldr	r6, [pc, #156]	; (8005ab8 <_lv_obj_get_style_ptr.constprop.0+0x11c>)
 8005a1c:	4798      	blx	r3
 8005a1e:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8005a22:	eb06 2601 	add.w	r6, r6, r1, lsl #8
 8005a26:	b2b6      	uxth	r6, r6
        res = _lv_style_list_get_ptr(list, prop, &value_act);
 8005a28:	4628      	mov	r0, r5
 8005a2a:	aa02      	add	r2, sp, #8
 8005a2c:	4631      	mov	r1, r6
 8005a2e:	f004 f833 	bl	8009a98 <_lv_style_list_get_ptr>
        if(res == LV_RES_OK)  return value_act;
 8005a32:	2801      	cmp	r0, #1
 8005a34:	d00b      	beq.n	8005a4e <_lv_obj_get_style_ptr.constprop.0+0xb2>
    while(parent) {
 8005a36:	2c00      	cmp	r4, #0
 8005a38:	d03b      	beq.n	8005ab2 <_lv_obj_get_style_ptr.constprop.0+0x116>
    if(part == LV_OBJ_PART_MAIN) return &((lv_obj_t *)obj)->style_list;
 8005a3a:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8005a3e:	2700      	movs	r7, #0
 8005a40:	e7c4      	b.n	80059cc <_lv_obj_get_style_ptr.constprop.0+0x30>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8005a42:	4603      	mov	r3, r0
 8005a44:	4622      	mov	r2, r4
 8005a46:	481d      	ldr	r0, [pc, #116]	; (8005abc <_lv_obj_get_style_ptr.constprop.0+0x120>)
 8005a48:	f00e fec2 	bl	80147d0 <lv_debug_log_error>
 8005a4c:	e7fe      	b.n	8005a4c <_lv_obj_get_style_ptr.constprop.0+0xb0>
        if(res == LV_RES_OK)  return value_act;
 8005a4e:	9802      	ldr	r0, [sp, #8]
}
 8005a50:	b005      	add	sp, #20
 8005a52:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(part < _LV_OBJ_PART_REAL_LAST) return ((lv_obj_t *)obj)->state;
 8005a54:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
        res = _lv_style_list_get_ptr(list, prop, &value_act);
 8005a58:	4628      	mov	r0, r5
        prop = (uint16_t)prop_ori + ((uint16_t)state << LV_STYLE_STATE_POS);
 8005a5a:	4e17      	ldr	r6, [pc, #92]	; (8005ab8 <_lv_obj_get_style_ptr.constprop.0+0x11c>)
        res = _lv_style_list_get_ptr(list, prop, &value_act);
 8005a5c:	aa02      	add	r2, sp, #8
        prop = (uint16_t)prop_ori + ((uint16_t)state << LV_STYLE_STATE_POS);
 8005a5e:	eb06 2601 	add.w	r6, r6, r1, lsl #8
 8005a62:	b2b6      	uxth	r6, r6
        res = _lv_style_list_get_ptr(list, prop, &value_act);
 8005a64:	4631      	mov	r1, r6
 8005a66:	f004 f817 	bl	8009a98 <_lv_style_list_get_ptr>
        if(res == LV_RES_OK)  return value_act;
 8005a6a:	2801      	cmp	r0, #1
 8005a6c:	d0ef      	beq.n	8005a4e <_lv_obj_get_style_ptr.constprop.0+0xb2>
        if(part != LV_OBJ_PART_MAIN) {
 8005a6e:	2f00      	cmp	r7, #0
 8005a70:	d1e1      	bne.n	8005a36 <_lv_obj_get_style_ptr.constprop.0+0x9a>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8005a72:	4620      	mov	r0, r4
 8005a74:	f00e fea8 	bl	80147c8 <lv_debug_check_null>
 8005a78:	b120      	cbz	r0, 8005a84 <_lv_obj_get_style_ptr.constprop.0+0xe8>
    return obj->parent;
 8005a7a:	6824      	ldr	r4, [r4, #0]
 8005a7c:	e7db      	b.n	8005a36 <_lv_obj_get_style_ptr.constprop.0+0x9a>
 8005a7e:	f248 068e 	movw	r6, #32910	; 0x808e
 8005a82:	e7d1      	b.n	8005a28 <_lv_obj_get_style_ptr.constprop.0+0x8c>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8005a84:	4622      	mov	r2, r4
 8005a86:	463b      	mov	r3, r7
 8005a88:	480c      	ldr	r0, [pc, #48]	; (8005abc <_lv_obj_get_style_ptr.constprop.0+0x120>)
 8005a8a:	f00e fea1 	bl	80147d0 <lv_debug_log_error>
 8005a8e:	e7fe      	b.n	8005a8e <_lv_obj_get_style_ptr.constprop.0+0xf2>
                    if(list->text_font_normal) def = true;
 8005a90:	f995 3007 	ldrsb.w	r3, [r5, #7]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	daaf      	bge.n	80059f8 <_lv_obj_get_style_ptr.constprop.0+0x5c>
    switch(prop) {
 8005a98:	b2b6      	uxth	r6, r6
 8005a9a:	f248 038e 	movw	r3, #32910	; 0x808e
 8005a9e:	429e      	cmp	r6, r3
 8005aa0:	d004      	beq.n	8005aac <_lv_obj_get_style_ptr.constprop.0+0x110>
 8005aa2:	2000      	movs	r0, #0
 8005aa4:	e7d4      	b.n	8005a50 <_lv_obj_get_style_ptr.constprop.0+0xb4>
 8005aa6:	f248 068e 	movw	r6, #32910	; 0x808e
 8005aaa:	e7c6      	b.n	8005a3a <_lv_obj_get_style_ptr.constprop.0+0x9e>
            return lv_theme_get_font_normal();
 8005aac:	f010 fd3a 	bl	8016524 <lv_theme_get_font_normal>
 8005ab0:	e7ce      	b.n	8005a50 <_lv_obj_get_style_ptr.constprop.0+0xb4>
 8005ab2:	f426 46fe 	bic.w	r6, r6, #32512	; 0x7f00
 8005ab6:	e7ef      	b.n	8005a98 <_lv_obj_get_style_ptr.constprop.0+0xfc>
 8005ab8:	ffff808e 	.word	0xffff808e
 8005abc:	0801e1d4 	.word	0x0801e1d4

08005ac0 <update_style_cache_children>:
 * Update the cache of style list
 * @param obj pointer to an object
 * @param part the part of the object
 */
static void update_style_cache_children(lv_obj_t * obj)
{
 8005ac0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ac4:	f04f 0900 	mov.w	r9, #0
 8005ac8:	b082      	sub	sp, #8
 8005aca:	4605      	mov	r5, r0
    info.result = NULL;
 8005acc:	46c8      	mov	r8, r9
 8005ace:	e06c      	b.n	8005baa <update_style_cache_children+0xea>
    if(obj->signal_cb) res = obj->signal_cb(obj, signal, param);
 8005ad0:	466a      	mov	r2, sp
 8005ad2:	2108      	movs	r1, #8
 8005ad4:	4628      	mov	r0, r5
    info.part = part;
 8005ad6:	f88d 6000 	strb.w	r6, [sp]
    info.result = NULL;
 8005ada:	f8cd 8004 	str.w	r8, [sp, #4]
    if(obj == NULL) return LV_RES_OK;
 8005ade:	2d00      	cmp	r5, #0
 8005ae0:	d074      	beq.n	8005bcc <update_style_cache_children+0x10c>
    if(obj->signal_cb) res = obj->signal_cb(obj, signal, param);
 8005ae2:	69eb      	ldr	r3, [r5, #28]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d071      	beq.n	8005bcc <update_style_cache_children+0x10c>
 8005ae8:	4798      	blx	r3
    if(res != LV_RES_OK) return NULL;
 8005aea:	2801      	cmp	r0, #1
 8005aec:	d16e      	bne.n	8005bcc <update_style_cache_children+0x10c>
    return info.result;
 8005aee:	9c01      	ldr	r4, [sp, #4]
    uint8_t part;
    for(part = 0; part != _LV_OBJ_PART_REAL_LAST; part++) {
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
        if(list == NULL) break;
 8005af0:	2c00      	cmp	r4, #0
 8005af2:	d06b      	beq.n	8005bcc <update_style_cache_children+0x10c>

        bool ignore_cache_ori = list->ignore_cache;
 8005af4:	7967      	ldrb	r7, [r4, #5]
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
 8005af6:	f248 020c 	movw	r2, #32780	; 0x800c
 8005afa:	4631      	mov	r1, r6
 8005afc:	4628      	mov	r0, r5
        list->ignore_cache = 1;
 8005afe:	f047 0308 	orr.w	r3, r7, #8
        bool ignore_cache_ori = list->ignore_cache;
 8005b02:	f3c7 07c0 	ubfx	r7, r7, #3, #1
        list->ignore_cache = 1;
 8005b06:	7163      	strb	r3, [r4, #5]
 8005b08:	f7ff fc90 	bl	800542c <_lv_obj_get_style_opa>

        list->opa_scale_cover    = lv_obj_get_style_opa_scale(obj, part) == LV_OPA_COVER ? 1 : 0;
 8005b0c:	f1a0 03ff 	sub.w	r3, r0, #255	; 0xff
 8005b10:	f894 c005 	ldrb.w	ip, [r4, #5]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_DECOR, text_decor, lv_text_decor_t, _int, scalar)
 8005b14:	f248 0282 	movw	r2, #32898	; 0x8082
 8005b18:	fab3 f383 	clz	r3, r3
 8005b1c:	4631      	mov	r1, r6
 8005b1e:	4628      	mov	r0, r5
 8005b20:	095b      	lsrs	r3, r3, #5
 8005b22:	f363 1c45 	bfi	ip, r3, #5, #1
 8005b26:	f884 c005 	strb.w	ip, [r4, #5]
 8005b2a:	f7ff fd39 	bl	80055a0 <_lv_obj_get_style_int>
        list->text_decor_none    = lv_obj_get_style_text_decor(obj, part) == LV_TEXT_DECOR_NONE ? 1 : 0;
 8005b2e:	79e2      	ldrb	r2, [r4, #7]
 8005b30:	b2c3      	uxtb	r3, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
 8005b32:	4631      	mov	r1, r6
 8005b34:	4628      	mov	r0, r5
 8005b36:	fab3 f383 	clz	r3, r3
 8005b3a:	095b      	lsrs	r3, r3, #5
 8005b3c:	f363 1286 	bfi	r2, r3, #6, #1
 8005b40:	71e2      	strb	r2, [r4, #7]
 8005b42:	f7ff ff2b 	bl	800599c <_lv_obj_get_style_ptr.constprop.0>
 8005b46:	4682      	mov	sl, r0
        list->text_font_normal    = lv_obj_get_style_text_font(obj, part) == lv_theme_get_font_normal() ? 1 : 0;
 8005b48:	f010 fcec 	bl	8016524 <lv_theme_get_font_normal>
 8005b4c:	79e3      	ldrb	r3, [r4, #7]
 8005b4e:	ebaa 0a00 	sub.w	sl, sl, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR_OPA, image_recolor_opa, lv_opa_t, _opa, scalar)
 8005b52:	f248 02ad 	movw	r2, #32941	; 0x80ad
 8005b56:	4631      	mov	r1, r6
 8005b58:	4628      	mov	r0, r5
 8005b5a:	faba fa8a 	clz	sl, sl
 8005b5e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8005b62:	f36a 13c7 	bfi	r3, sl, #7, #1
 8005b66:	71e3      	strb	r3, [r4, #7]
 8005b68:	f7ff fc60 	bl	800542c <_lv_obj_get_style_opa>
        list->img_recolor_opa_transp    = lv_obj_get_style_image_recolor_opa(obj, part) == LV_OPA_TRANSP ? 1 : 0;
 8005b6c:	f894 c007 	ldrb.w	ip, [r4, #7]
 8005b70:	2800      	cmp	r0, #0
 8005b72:	bf0c      	ite	eq
 8005b74:	2330      	moveq	r3, #48	; 0x30
 8005b76:	2320      	movne	r3, #32
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
 8005b78:	f248 0280 	movw	r2, #32896	; 0x8080
 8005b7c:	f02c 0c30 	bic.w	ip, ip, #48	; 0x30
 8005b80:	4631      	mov	r1, r6
 8005b82:	4628      	mov	r0, r5
 8005b84:	ea43 030c 	orr.w	r3, r3, ip
 8005b88:	71e3      	strb	r3, [r4, #7]
 8005b8a:	f7ff fd09 	bl	80055a0 <_lv_obj_get_style_int>

        list->text_space_zero = 1;
        if(lv_obj_get_style_text_letter_space(obj, part) != 0 ||
 8005b8e:	b1a0      	cbz	r0, 8005bba <update_style_cache_children+0xfa>
           lv_obj_get_style_text_line_space(obj, part) != 0) {
            list->text_space_zero = 0;
 8005b90:	79e3      	ldrb	r3, [r4, #7]
 8005b92:	f36f 1345 	bfc	r3, #5, #1
 8005b96:	71e3      	strb	r3, [r4, #7]
        }

        list->ignore_cache = ignore_cache_ori;
 8005b98:	7963      	ldrb	r3, [r4, #5]
 8005b9a:	f109 0901 	add.w	r9, r9, #1
 8005b9e:	f367 03c3 	bfi	r3, r7, #3, #1
    for(part = 0; part != _LV_OBJ_PART_REAL_LAST; part++) {
 8005ba2:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
        list->ignore_cache = ignore_cache_ori;
 8005ba6:	7163      	strb	r3, [r4, #5]
    for(part = 0; part != _LV_OBJ_PART_REAL_LAST; part++) {
 8005ba8:	d010      	beq.n	8005bcc <update_style_cache_children+0x10c>
    if(obj->signal_cb) res = obj->signal_cb(obj, signal, param);
 8005baa:	fa5f f689 	uxtb.w	r6, r9
    if(part == LV_OBJ_PART_MAIN) return &((lv_obj_t *)obj)->style_list;
 8005bae:	f1b9 0f00 	cmp.w	r9, #0
 8005bb2:	d18d      	bne.n	8005ad0 <update_style_cache_children+0x10>
 8005bb4:	f105 0428 	add.w	r4, r5, #40	; 0x28
        if(list == NULL) break;
 8005bb8:	e79c      	b.n	8005af4 <update_style_cache_children+0x34>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
 8005bba:	4631      	mov	r1, r6
 8005bbc:	f248 0281 	movw	r2, #32897	; 0x8081
 8005bc0:	4628      	mov	r0, r5
 8005bc2:	f7ff fced 	bl	80055a0 <_lv_obj_get_style_int>
        if(lv_obj_get_style_text_letter_space(obj, part) != 0 ||
 8005bc6:	2800      	cmp	r0, #0
 8005bc8:	d1e2      	bne.n	8005b90 <update_style_cache_children+0xd0>
 8005bca:	e7e5      	b.n	8005b98 <update_style_cache_children+0xd8>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8005bcc:	4628      	mov	r0, r5
 8005bce:	f00e fdfb 	bl	80147c8 <lv_debug_check_null>
 8005bd2:	b1e0      	cbz	r0, 8005c0e <update_style_cache_children+0x14e>
        result = _lv_ll_get_head(&obj->child_ll);
 8005bd4:	1d2e      	adds	r6, r5, #4
 8005bd6:	4630      	mov	r0, r6
 8005bd8:	f00e ffc8 	bl	8014b6c <_lv_ll_get_head>
    }

    lv_obj_t * child = lv_obj_get_child(obj, NULL);
    while(child) {
 8005bdc:	4604      	mov	r4, r0
 8005bde:	b170      	cbz	r0, 8005bfe <update_style_cache_children+0x13e>
        update_style_cache_children(child);
 8005be0:	4620      	mov	r0, r4
 8005be2:	f7ff ff6d 	bl	8005ac0 <update_style_cache_children>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8005be6:	4628      	mov	r0, r5
 8005be8:	f00e fdee 	bl	80147c8 <lv_debug_check_null>
 8005bec:	4603      	mov	r3, r0
        result = _lv_ll_get_next(&obj->child_ll, child);
 8005bee:	4621      	mov	r1, r4
 8005bf0:	4630      	mov	r0, r6
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8005bf2:	b13b      	cbz	r3, 8005c04 <update_style_cache_children+0x144>
        result = _lv_ll_get_next(&obj->child_ll, child);
 8005bf4:	f00e ffc2 	bl	8014b7c <_lv_ll_get_next>
    while(child) {
 8005bf8:	4604      	mov	r4, r0
 8005bfa:	2800      	cmp	r0, #0
 8005bfc:	d1f0      	bne.n	8005be0 <update_style_cache_children+0x120>
        child = lv_obj_get_child(obj, child);
    }

}
 8005bfe:	b002      	add	sp, #8
 8005c00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8005c04:	462a      	mov	r2, r5
 8005c06:	4805      	ldr	r0, [pc, #20]	; (8005c1c <update_style_cache_children+0x15c>)
 8005c08:	f00e fde2 	bl	80147d0 <lv_debug_log_error>
 8005c0c:	e7fe      	b.n	8005c0c <update_style_cache_children+0x14c>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	462a      	mov	r2, r5
 8005c12:	4802      	ldr	r0, [pc, #8]	; (8005c1c <update_style_cache_children+0x15c>)
 8005c14:	f00e fddc 	bl	80147d0 <lv_debug_log_error>
 8005c18:	e7fe      	b.n	8005c18 <update_style_cache_children+0x158>
 8005c1a:	bf00      	nop
 8005c1c:	0801e1d4 	.word	0x0801e1d4

08005c20 <invalidate_style_cache.isra.0>:
/**
 * Mark the object and all of it's children's style lists as invalid.
 * The cache will be updated when a cached property asked nest time
 * @param obj pointer to an object
 */
static void invalidate_style_cache(lv_obj_t * obj, uint8_t part, lv_style_property_t prop)
 8005c20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c22:	4604      	mov	r4, r0
 8005c24:	b083      	sub	sp, #12
{
    if(style_prop_is_cacheble(prop) == false) return;
 8005c26:	4608      	mov	r0, r1
 8005c28:	f7fd faca 	bl	80031c0 <style_prop_is_cacheble>
 8005c2c:	2800      	cmp	r0, #0
 8005c2e:	d042      	beq.n	8005cb6 <invalidate_style_cache.isra.0+0x96>
 8005c30:	b30c      	cbz	r4, 8005c76 <invalidate_style_cache.isra.0+0x56>
 8005c32:	2500      	movs	r5, #0
    info.result = NULL;
 8005c34:	462f      	mov	r7, r5
 8005c36:	e011      	b.n	8005c5c <invalidate_style_cache.isra.0+0x3c>
    if(obj->signal_cb) res = obj->signal_cb(obj, signal, param);
 8005c38:	69e3      	ldr	r3, [r4, #28]
    info.part = part;
 8005c3a:	f88d 6000 	strb.w	r6, [sp]
    info.result = NULL;
 8005c3e:	9701      	str	r7, [sp, #4]
    if(obj->signal_cb) res = obj->signal_cb(obj, signal, param);
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d03b      	beq.n	8005cbc <invalidate_style_cache.isra.0+0x9c>
 8005c44:	4798      	blx	r3
    if(res != LV_RES_OK) return NULL;
 8005c46:	2801      	cmp	r0, #1
 8005c48:	d137      	bne.n	8005cba <invalidate_style_cache.isra.0+0x9a>
    return info.result;
 8005c4a:	9b01      	ldr	r3, [sp, #4]

    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
        if(list == NULL) break;
 8005c4c:	b3ab      	cbz	r3, 8005cba <invalidate_style_cache.isra.0+0x9a>
        list->valid_cache = 0;
 8005c4e:	795a      	ldrb	r2, [r3, #5]
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
 8005c50:	2e3f      	cmp	r6, #63	; 0x3f
        list->valid_cache = 0;
 8005c52:	f367 0282 	bfi	r2, r7, #2, #1
 8005c56:	715a      	strb	r2, [r3, #5]
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
 8005c58:	d02f      	beq.n	8005cba <invalidate_style_cache.isra.0+0x9a>
 8005c5a:	3501      	adds	r5, #1
    if(obj->signal_cb) res = obj->signal_cb(obj, signal, param);
 8005c5c:	466a      	mov	r2, sp
 8005c5e:	2108      	movs	r1, #8
 8005c60:	4620      	mov	r0, r4
 8005c62:	b2ee      	uxtb	r6, r5
    if(part == LV_OBJ_PART_MAIN) return &((lv_obj_t *)obj)->style_list;
 8005c64:	2d00      	cmp	r5, #0
 8005c66:	d1e7      	bne.n	8005c38 <invalidate_style_cache.isra.0+0x18>
        list->valid_cache = 0;
 8005c68:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8005c6c:	f365 0382 	bfi	r3, r5, #2, #1
 8005c70:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
 8005c74:	e7f1      	b.n	8005c5a <invalidate_style_cache.isra.0+0x3a>
        list->valid_cache = 0;
 8005c76:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8005c7a:	f364 0382 	bfi	r3, r4, #2, #1
 8005c7e:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8005c82:	4620      	mov	r0, r4
 8005c84:	f00e fda0 	bl	80147c8 <lv_debug_check_null>
 8005c88:	2800      	cmp	r0, #0
 8005c8a:	d036      	beq.n	8005cfa <invalidate_style_cache.isra.0+0xda>
        result = _lv_ll_get_head(&obj->child_ll);
 8005c8c:	1d26      	adds	r6, r4, #4
 8005c8e:	4630      	mov	r0, r6
 8005c90:	f00e ff6c 	bl	8014b6c <_lv_ll_get_head>
        if(list == NULL) break;
        list->valid_cache = 0;
    }

    lv_obj_t * child = lv_obj_get_child(obj, NULL);
    while(child) {
 8005c94:	4605      	mov	r5, r0
 8005c96:	b170      	cbz	r0, 8005cb6 <invalidate_style_cache.isra.0+0x96>
        update_style_cache_children(child);
 8005c98:	4628      	mov	r0, r5
 8005c9a:	f7ff ff11 	bl	8005ac0 <update_style_cache_children>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8005c9e:	4620      	mov	r0, r4
 8005ca0:	f00e fd92 	bl	80147c8 <lv_debug_check_null>
 8005ca4:	4603      	mov	r3, r0
        result = _lv_ll_get_next(&obj->child_ll, child);
 8005ca6:	4629      	mov	r1, r5
 8005ca8:	4630      	mov	r0, r6
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8005caa:	b363      	cbz	r3, 8005d06 <invalidate_style_cache.isra.0+0xe6>
        result = _lv_ll_get_next(&obj->child_ll, child);
 8005cac:	f00e ff66 	bl	8014b7c <_lv_ll_get_next>
    while(child) {
 8005cb0:	4605      	mov	r5, r0
 8005cb2:	2800      	cmp	r0, #0
 8005cb4:	d1f0      	bne.n	8005c98 <invalidate_style_cache.isra.0+0x78>
        child = lv_obj_get_child(obj, child);
    }
}
 8005cb6:	b003      	add	sp, #12
 8005cb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cba:	69e3      	ldr	r3, [r4, #28]
    if(style_prop_is_cacheble(prop) == false) return;
 8005cbc:	2540      	movs	r5, #64	; 0x40
    info.result = NULL;
 8005cbe:	2600      	movs	r6, #0
 8005cc0:	e00e      	b.n	8005ce0 <invalidate_style_cache.isra.0+0xc0>
 8005cc2:	3501      	adds	r5, #1
    if(obj->signal_cb) res = obj->signal_cb(obj, signal, param);
 8005cc4:	4798      	blx	r3
    if(res != LV_RES_OK) return NULL;
 8005cc6:	2801      	cmp	r0, #1
 8005cc8:	b2ed      	uxtb	r5, r5
 8005cca:	d1da      	bne.n	8005c82 <invalidate_style_cache.isra.0+0x62>
    return info.result;
 8005ccc:	9b01      	ldr	r3, [sp, #4]
        if(list == NULL) break;
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d0d7      	beq.n	8005c82 <invalidate_style_cache.isra.0+0x62>
        list->valid_cache = 0;
 8005cd2:	795a      	ldrb	r2, [r3, #5]
    for(part = _LV_OBJ_PART_REAL_FIRST; part < 0xFF; part++) {
 8005cd4:	2dff      	cmp	r5, #255	; 0xff
        list->valid_cache = 0;
 8005cd6:	f366 0282 	bfi	r2, r6, #2, #1
 8005cda:	715a      	strb	r2, [r3, #5]
    for(part = _LV_OBJ_PART_REAL_FIRST; part < 0xFF; part++) {
 8005cdc:	d0d1      	beq.n	8005c82 <invalidate_style_cache.isra.0+0x62>
 8005cde:	69e3      	ldr	r3, [r4, #28]
    if(obj->signal_cb) res = obj->signal_cb(obj, signal, param);
 8005ce0:	466a      	mov	r2, sp
 8005ce2:	2108      	movs	r1, #8
 8005ce4:	4620      	mov	r0, r4
    info.part = part;
 8005ce6:	f88d 5000 	strb.w	r5, [sp]
    info.result = NULL;
 8005cea:	9601      	str	r6, [sp, #4]
    if(obj->signal_cb) res = obj->signal_cb(obj, signal, param);
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d1e8      	bne.n	8005cc2 <invalidate_style_cache.isra.0+0xa2>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8005cf0:	4620      	mov	r0, r4
 8005cf2:	f00e fd69 	bl	80147c8 <lv_debug_check_null>
 8005cf6:	2800      	cmp	r0, #0
 8005cf8:	d1c8      	bne.n	8005c8c <invalidate_style_cache.isra.0+0x6c>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	4622      	mov	r2, r4
 8005cfe:	4804      	ldr	r0, [pc, #16]	; (8005d10 <invalidate_style_cache.isra.0+0xf0>)
 8005d00:	f00e fd66 	bl	80147d0 <lv_debug_log_error>
 8005d04:	e7fe      	b.n	8005d04 <invalidate_style_cache.isra.0+0xe4>
 8005d06:	4622      	mov	r2, r4
 8005d08:	4801      	ldr	r0, [pc, #4]	; (8005d10 <invalidate_style_cache.isra.0+0xf0>)
 8005d0a:	f00e fd61 	bl	80147d0 <lv_debug_log_error>
 8005d0e:	e7fe      	b.n	8005d0e <invalidate_style_cache.isra.0+0xee>
 8005d10:	0801e1d4 	.word	0x0801e1d4

08005d14 <lv_obj_refresh_style.part.0>:
void lv_obj_refresh_style(lv_obj_t * obj, uint8_t part, lv_style_property_t prop)
 8005d14:	b538      	push	{r3, r4, r5, lr}
 8005d16:	460c      	mov	r4, r1
 8005d18:	4605      	mov	r5, r0
    invalidate_style_cache(obj, part, prop);
 8005d1a:	f7ff ff81 	bl	8005c20 <invalidate_style_cache.isra.0>
    switch(prop) {
 8005d1e:	2c90      	cmp	r4, #144	; 0x90
 8005d20:	d84e      	bhi.n	8005dc0 <lv_obj_refresh_style.part.0+0xac>
 8005d22:	2c01      	cmp	r4, #1
 8005d24:	d956      	bls.n	8005dd4 <lv_obj_refresh_style.part.0+0xc0>
 8005d26:	1ea3      	subs	r3, r4, #2
 8005d28:	2b8e      	cmp	r3, #142	; 0x8e
 8005d2a:	d853      	bhi.n	8005dd4 <lv_obj_refresh_style.part.0+0xc0>
 8005d2c:	e8df f003 	tbb	[pc, r3]
 8005d30:	64646464 	.word	0x64646464
 8005d34:	52526464 	.word	0x52526464
 8005d38:	52525252 	.word	0x52525252
 8005d3c:	64645252 	.word	0x64645252
 8005d40:	64646464 	.word	0x64646464
 8005d44:	52646464 	.word	0x52646464
 8005d48:	52525252 	.word	0x52525252
 8005d4c:	52525252 	.word	0x52525252
 8005d50:	52525252 	.word	0x52525252
 8005d54:	52525252 	.word	0x52525252
 8005d58:	52525252 	.word	0x52525252
 8005d5c:	52525252 	.word	0x52525252
 8005d60:	52525252 	.word	0x52525252
 8005d64:	52525252 	.word	0x52525252
 8005d68:	52525252 	.word	0x52525252
 8005d6c:	64645252 	.word	0x64645252
 8005d70:	52525252 	.word	0x52525252
 8005d74:	52525252 	.word	0x52525252
 8005d78:	52645252 	.word	0x52645252
 8005d7c:	64645252 	.word	0x64645252
 8005d80:	52526464 	.word	0x52526464
 8005d84:	52525252 	.word	0x52525252
 8005d88:	52645252 	.word	0x52645252
 8005d8c:	52525252 	.word	0x52525252
 8005d90:	52525252 	.word	0x52525252
 8005d94:	52525252 	.word	0x52525252
 8005d98:	52525252 	.word	0x52525252
 8005d9c:	64645252 	.word	0x64645252
 8005da0:	64646452 	.word	0x64646452
 8005da4:	52525252 	.word	0x52525252
 8005da8:	52645252 	.word	0x52645252
 8005dac:	52526464 	.word	0x52526464
 8005db0:	52525252 	.word	0x52525252
 8005db4:	52525252 	.word	0x52525252
 8005db8:	52525252 	.word	0x52525252
 8005dbc:	5252      	.short	0x5252
 8005dbe:	64          	.byte	0x64
 8005dbf:	00          	.byte	0x00
 8005dc0:	f248 0381 	movw	r3, #32897	; 0x8081
 8005dc4:	429c      	cmp	r4, r3
 8005dc6:	d80a      	bhi.n	8005dde <lv_obj_refresh_style.part.0+0xca>
 8005dc8:	f248 037f 	movw	r3, #32895	; 0x807f
 8005dcc:	429c      	cmp	r4, r3
 8005dce:	d827      	bhi.n	8005e20 <lv_obj_refresh_style.part.0+0x10c>
 8005dd0:	2cff      	cmp	r4, #255	; 0xff
 8005dd2:	d037      	beq.n	8005e44 <lv_obj_refresh_style.part.0+0x130>
        lv_obj_invalidate(obj);
 8005dd4:	4628      	mov	r0, r5
}
 8005dd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        lv_obj_invalidate(obj);
 8005dda:	f7fd bed9 	b.w	8003b90 <lv_obj_invalidate>
    switch(prop) {
 8005dde:	f248 038e 	movw	r3, #32910	; 0x808e
 8005de2:	429c      	cmp	r4, r3
 8005de4:	d1f6      	bne.n	8005dd4 <lv_obj_refresh_style.part.0+0xc0>
        lv_obj_invalidate(obj);
 8005de6:	4628      	mov	r0, r5
 8005de8:	f7fd fed2 	bl	8003b90 <lv_obj_invalidate>
        obj->signal_cb(obj, LV_SIGNAL_STYLE_CHG, NULL);
 8005dec:	69eb      	ldr	r3, [r5, #28]
 8005dee:	2200      	movs	r2, #0
 8005df0:	2104      	movs	r1, #4
 8005df2:	4628      	mov	r0, r5
 8005df4:	4798      	blx	r3
        switch(prop) {
 8005df6:	e01d      	b.n	8005e34 <lv_obj_refresh_style.part.0+0x120>
        lv_obj_invalidate(obj);
 8005df8:	4628      	mov	r0, r5
 8005dfa:	f7fd fec9 	bl	8003b90 <lv_obj_invalidate>
        obj->signal_cb(obj, LV_SIGNAL_STYLE_CHG, NULL);
 8005dfe:	69eb      	ldr	r3, [r5, #28]
 8005e00:	2200      	movs	r2, #0
 8005e02:	2104      	movs	r1, #4
 8005e04:	4628      	mov	r0, r5
 8005e06:	4798      	blx	r3
        switch(prop) {
 8005e08:	2c18      	cmp	r4, #24
 8005e0a:	d813      	bhi.n	8005e34 <lv_obj_refresh_style.part.0+0x120>
 8005e0c:	2c14      	cmp	r4, #20
 8005e0e:	d9e1      	bls.n	8005dd4 <lv_obj_refresh_style.part.0+0xc0>
                if(obj->parent) obj->parent->signal_cb(obj->parent, LV_SIGNAL_CHILD_CHG, NULL);
 8005e10:	6828      	ldr	r0, [r5, #0]
 8005e12:	2800      	cmp	r0, #0
 8005e14:	d0de      	beq.n	8005dd4 <lv_obj_refresh_style.part.0+0xc0>
 8005e16:	69c3      	ldr	r3, [r0, #28]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	2101      	movs	r1, #1
 8005e1c:	4798      	blx	r3
 8005e1e:	e009      	b.n	8005e34 <lv_obj_refresh_style.part.0+0x120>
        lv_obj_invalidate(obj);
 8005e20:	4628      	mov	r0, r5
 8005e22:	f7fd feb5 	bl	8003b90 <lv_obj_invalidate>
        obj->signal_cb(obj, LV_SIGNAL_STYLE_CHG, NULL);
 8005e26:	69eb      	ldr	r3, [r5, #28]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	2104      	movs	r1, #4
 8005e2c:	4628      	mov	r0, r5
 8005e2e:	4798      	blx	r3
        switch(prop) {
 8005e30:	2cff      	cmp	r4, #255	; 0xff
 8005e32:	d00f      	beq.n	8005e54 <lv_obj_refresh_style.part.0+0x140>
        lv_obj_invalidate(obj);
 8005e34:	4628      	mov	r0, r5
 8005e36:	f7fd feab 	bl	8003b90 <lv_obj_invalidate>
        if(prop == LV_STYLE_PROP_ALL || (prop & LV_STYLE_INHERIT_MASK)) refresh_children_style(obj);
 8005e3a:	2cff      	cmp	r4, #255	; 0xff
 8005e3c:	d010      	beq.n	8005e60 <lv_obj_refresh_style.part.0+0x14c>
 8005e3e:	0be3      	lsrs	r3, r4, #15
 8005e40:	d10e      	bne.n	8005e60 <lv_obj_refresh_style.part.0+0x14c>
}
 8005e42:	bd38      	pop	{r3, r4, r5, pc}
        lv_obj_invalidate(obj);
 8005e44:	4628      	mov	r0, r5
 8005e46:	f7fd fea3 	bl	8003b90 <lv_obj_invalidate>
        obj->signal_cb(obj, LV_SIGNAL_STYLE_CHG, NULL);
 8005e4a:	69eb      	ldr	r3, [r5, #28]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	2104      	movs	r1, #4
 8005e50:	4628      	mov	r0, r5
 8005e52:	4798      	blx	r3
                if(obj->parent) obj->parent->signal_cb(obj->parent, LV_SIGNAL_CHILD_CHG, NULL);
 8005e54:	6828      	ldr	r0, [r5, #0]
 8005e56:	2800      	cmp	r0, #0
 8005e58:	d1dd      	bne.n	8005e16 <lv_obj_refresh_style.part.0+0x102>
        lv_obj_invalidate(obj);
 8005e5a:	4628      	mov	r0, r5
 8005e5c:	f7fd fe98 	bl	8003b90 <lv_obj_invalidate>
        if(prop == LV_STYLE_PROP_ALL || (prop & LV_STYLE_INHERIT_MASK)) refresh_children_style(obj);
 8005e60:	4628      	mov	r0, r5
}
 8005e62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        if(prop == LV_STYLE_PROP_ALL || (prop & LV_STYLE_INHERIT_MASK)) refresh_children_style(obj);
 8005e66:	f7fe bbbf 	b.w	80045e8 <refresh_children_style>
 8005e6a:	bf00      	nop

08005e6c <lv_obj_refresh_style>:
{
 8005e6c:	b500      	push	{lr}
 8005e6e:	b083      	sub	sp, #12
 8005e70:	9201      	str	r2, [sp, #4]
 8005e72:	9000      	str	r0, [sp, #0]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8005e74:	f00e fca8 	bl	80147c8 <lv_debug_check_null>
 8005e78:	e9dd 2100 	ldrd	r2, r1, [sp]
 8005e7c:	b920      	cbnz	r0, 8005e88 <lv_obj_refresh_style+0x1c>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	4804      	ldr	r0, [pc, #16]	; (8005e94 <lv_obj_refresh_style+0x28>)
 8005e82:	f00e fca5 	bl	80147d0 <lv_debug_log_error>
 8005e86:	e7fe      	b.n	8005e86 <lv_obj_refresh_style+0x1a>
 8005e88:	4610      	mov	r0, r2
}
 8005e8a:	b003      	add	sp, #12
 8005e8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005e90:	f7ff bf40 	b.w	8005d14 <lv_obj_refresh_style.part.0>
 8005e94:	0801e1d4 	.word	0x0801e1d4

08005e98 <trans_anim_cb>:
{
 8005e98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    lv_style_list_t * list = lv_obj_get_style_list(tr->obj, tr->part);
 8005e9c:	7983      	ldrb	r3, [r0, #6]
{
 8005e9e:	4604      	mov	r4, r0
 8005ea0:	b082      	sub	sp, #8
 8005ea2:	460d      	mov	r5, r1
    lv_style_list_t * list = lv_obj_get_style_list(tr->obj, tr->part);
 8005ea4:	6800      	ldr	r0, [r0, #0]
    if(part == LV_OBJ_PART_MAIN) return &((lv_obj_t *)obj)->style_list;
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d051      	beq.n	8005f4e <trans_anim_cb+0xb6>
    info.result = NULL;
 8005eaa:	2600      	movs	r6, #0
    info.part = part;
 8005eac:	f88d 3000 	strb.w	r3, [sp]
    info.result = NULL;
 8005eb0:	9601      	str	r6, [sp, #4]
    if(obj == NULL) return LV_RES_OK;
 8005eb2:	b140      	cbz	r0, 8005ec6 <trans_anim_cb+0x2e>
    if(obj->signal_cb) res = obj->signal_cb(obj, signal, param);
 8005eb4:	69c3      	ldr	r3, [r0, #28]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d04b      	beq.n	8005f52 <trans_anim_cb+0xba>
 8005eba:	466a      	mov	r2, sp
 8005ebc:	2108      	movs	r1, #8
 8005ebe:	4798      	blx	r3
    if(res != LV_RES_OK) return NULL;
 8005ec0:	2801      	cmp	r0, #1
 8005ec2:	d154      	bne.n	8005f6e <trans_anim_cb+0xd6>
 8005ec4:	9801      	ldr	r0, [sp, #4]
    lv_style_t * style = _lv_style_list_get_transition_style(list);
 8005ec6:	f003 fb5b 	bl	8009580 <_lv_style_list_get_transition_style>
    if((tr->prop & 0xF) < LV_STYLE_ID_COLOR) { /*Value*/
 8005eca:	88a1      	ldrh	r1, [r4, #4]
 8005ecc:	f001 030f 	and.w	r3, r1, #15
 8005ed0:	2b08      	cmp	r3, #8
 8005ed2:	d810      	bhi.n	8005ef6 <trans_anim_cb+0x5e>
        if(v == 0) x = tr->start_value._int;
 8005ed4:	bb75      	cbnz	r5, 8005f34 <trans_anim_cb+0x9c>
 8005ed6:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
        _lv_style_set_int(style, tr->prop, x);
 8005eda:	f003 f82d 	bl	8008f38 <_lv_style_set_int>
    lv_obj_refresh_style(tr->obj, tr->part, tr->prop);
 8005ede:	6825      	ldr	r5, [r4, #0]
 8005ee0:	88a4      	ldrh	r4, [r4, #4]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8005ee2:	4628      	mov	r0, r5
 8005ee4:	f00e fc70 	bl	80147c8 <lv_debug_check_null>
 8005ee8:	b9a8      	cbnz	r0, 8005f16 <trans_anim_cb+0x7e>
 8005eea:	4603      	mov	r3, r0
 8005eec:	462a      	mov	r2, r5
 8005eee:	4840      	ldr	r0, [pc, #256]	; (8005ff0 <trans_anim_cb+0x158>)
 8005ef0:	f00e fc6e 	bl	80147d0 <lv_debug_log_error>
 8005ef4:	e7fe      	b.n	8005ef4 <trans_anim_cb+0x5c>
    else if((tr->prop & 0xF) < LV_STYLE_ID_OPA) { /*Color*/
 8005ef6:	2b0b      	cmp	r3, #11
 8005ef8:	d814      	bhi.n	8005f24 <trans_anim_cb+0x8c>
        if(v <= 0) x = tr->start_value._color;
 8005efa:	2d00      	cmp	r5, #0
 8005efc:	dd32      	ble.n	8005f64 <trans_anim_cb+0xcc>
        else if(v >= 255) x = tr->end_value._color;
 8005efe:	2dfe      	cmp	r5, #254	; 0xfe
 8005f00:	dd37      	ble.n	8005f72 <trans_anim_cb+0xda>
 8005f02:	68e2      	ldr	r2, [r4, #12]
        _lv_style_set_color(style, tr->prop, x);
 8005f04:	f003 f8e6 	bl	80090d4 <_lv_style_set_color>
    lv_obj_refresh_style(tr->obj, tr->part, tr->prop);
 8005f08:	6825      	ldr	r5, [r4, #0]
 8005f0a:	88a4      	ldrh	r4, [r4, #4]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8005f0c:	4628      	mov	r0, r5
 8005f0e:	f00e fc5b 	bl	80147c8 <lv_debug_check_null>
 8005f12:	2800      	cmp	r0, #0
 8005f14:	d0e9      	beq.n	8005eea <trans_anim_cb+0x52>
 8005f16:	4621      	mov	r1, r4
 8005f18:	4628      	mov	r0, r5
 8005f1a:	f7ff fefb 	bl	8005d14 <lv_obj_refresh_style.part.0>
}
 8005f1e:	b002      	add	sp, #8
 8005f20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((tr->prop & 0xF) < LV_STYLE_ID_PTR) { /*Opa*/
 8005f24:	2b0d      	cmp	r3, #13
 8005f26:	d816      	bhi.n	8005f56 <trans_anim_cb+0xbe>
        if(v <= 0) x = tr->start_value._opa;
 8005f28:	2d00      	cmp	r5, #0
 8005f2a:	dd53      	ble.n	8005fd4 <trans_anim_cb+0x13c>
        else if(v >= 255) x = tr->end_value._opa;
 8005f2c:	2dfe      	cmp	r5, #254	; 0xfe
 8005f2e:	dd55      	ble.n	8005fdc <trans_anim_cb+0x144>
 8005f30:	7b22      	ldrb	r2, [r4, #12]
 8005f32:	e050      	b.n	8005fd6 <trans_anim_cb+0x13e>
        else if(v == 255) x = tr->end_value._int;
 8005f34:	2dff      	cmp	r5, #255	; 0xff
 8005f36:	d017      	beq.n	8005f68 <trans_anim_cb+0xd0>
        else x = tr->start_value._int + ((int32_t)((int32_t)(tr->end_value._int - tr->start_value._int) * v) >> 8);
 8005f38:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8005f3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f40:	1a9b      	subs	r3, r3, r2
 8005f42:	fb05 f503 	mul.w	r5, r5, r3
 8005f46:	eb02 2225 	add.w	r2, r2, r5, asr #8
 8005f4a:	b212      	sxth	r2, r2
 8005f4c:	e7c5      	b.n	8005eda <trans_anim_cb+0x42>
    if(part == LV_OBJ_PART_MAIN) return &((lv_obj_t *)obj)->style_list;
 8005f4e:	3028      	adds	r0, #40	; 0x28
 8005f50:	e7b9      	b.n	8005ec6 <trans_anim_cb+0x2e>
 8005f52:	4618      	mov	r0, r3
    return info.result;
 8005f54:	e7b7      	b.n	8005ec6 <trans_anim_cb+0x2e>
        if(v < 128) x = tr->start_value._ptr;
 8005f56:	2d7f      	cmp	r5, #127	; 0x7f
 8005f58:	bfd4      	ite	le
 8005f5a:	68a2      	ldrle	r2, [r4, #8]
        else x = tr->end_value._ptr;
 8005f5c:	68e2      	ldrgt	r2, [r4, #12]
        _lv_style_set_ptr(style, tr->prop, x);
 8005f5e:	f003 fa45 	bl	80093ec <_lv_style_set_ptr>
 8005f62:	e7bc      	b.n	8005ede <trans_anim_cb+0x46>
        if(v <= 0) x = tr->start_value._color;
 8005f64:	68a2      	ldr	r2, [r4, #8]
 8005f66:	e7cd      	b.n	8005f04 <trans_anim_cb+0x6c>
        else if(v == 255) x = tr->end_value._int;
 8005f68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005f6c:	e7b5      	b.n	8005eda <trans_anim_cb+0x42>
    if(res != LV_RES_OK) return NULL;
 8005f6e:	4630      	mov	r0, r6
 8005f70:	e7a9      	b.n	8005ec6 <trans_anim_cb+0x2e>
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8005f72:	f1c5 0cff 	rsb	ip, r5, #255	; 0xff
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8005f76:	7a27      	ldrb	r7, [r4, #8]
 8005f78:	7b23      	ldrb	r3, [r4, #12]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	fb0c f707 	mul.w	r7, ip, r7
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8005f80:	7a66      	ldrb	r6, [r4, #9]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8005f82:	f894 e00a 	ldrb.w	lr, [r4, #10]
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8005f86:	fb15 7303 	smlabb	r3, r5, r3, r7
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8005f8a:	fb0c f606 	mul.w	r6, ip, r6
 8005f8e:	f894 800d 	ldrb.w	r8, [r4, #13]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8005f92:	fb0c fc0e 	mul.w	ip, ip, lr
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8005f96:	eb03 2703 	add.w	r7, r3, r3, lsl #8
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8005f9a:	fb15 6608 	smlabb	r6, r5, r8, r6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8005f9e:	eb03 17c7 	add.w	r7, r3, r7, lsl #7
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8005fa2:	7ba3      	ldrb	r3, [r4, #14]
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8005fa4:	eb06 2e06 	add.w	lr, r6, r6, lsl #8
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8005fa8:	fb15 c503 	smlabb	r5, r5, r3, ip
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8005fac:	0dff      	lsrs	r7, r7, #23
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8005fae:	eb06 16ce 	add.w	r6, r6, lr, lsl #7
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8005fb2:	eb05 2305 	add.w	r3, r5, r5, lsl #8
 8005fb6:	f367 0207 	bfi	r2, r7, #0, #8
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8005fba:	f3c6 56c7 	ubfx	r6, r6, #23, #8
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8005fbe:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
 8005fc2:	f366 220f 	bfi	r2, r6, #8, #8
 8005fc6:	f3c5 55c7 	ubfx	r5, r5, #23, #8
#else
    /*LV_COLOR_DEPTH == 1*/
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
#endif

    return ret;
 8005fca:	f365 4217 	bfi	r2, r5, #16, #8
 8005fce:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 8005fd2:	e797      	b.n	8005f04 <trans_anim_cb+0x6c>
        if(v <= 0) x = tr->start_value._opa;
 8005fd4:	7a22      	ldrb	r2, [r4, #8]
        _lv_style_set_opa(style, tr->prop, x);
 8005fd6:	f003 f947 	bl	8009268 <_lv_style_set_opa>
 8005fda:	e780      	b.n	8005ede <trans_anim_cb+0x46>
        else x = tr->start_value._opa + (((tr->end_value._opa - tr->start_value._opa) * v) >> 8);
 8005fdc:	7a22      	ldrb	r2, [r4, #8]
 8005fde:	7b23      	ldrb	r3, [r4, #12]
 8005fe0:	1a9b      	subs	r3, r3, r2
 8005fe2:	fb05 f503 	mul.w	r5, r5, r3
 8005fe6:	eb02 2225 	add.w	r2, r2, r5, asr #8
 8005fea:	b2d2      	uxtb	r2, r2
 8005fec:	e7f3      	b.n	8005fd6 <trans_anim_cb+0x13e>
 8005fee:	bf00      	nop
 8005ff0:	0801e1d4 	.word	0x0801e1d4

08005ff4 <report_style_mod_core>:
{
 8005ff4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ff8:	2600      	movs	r6, #0
 8005ffa:	b084      	sub	sp, #16
 8005ffc:	4604      	mov	r4, r0
 8005ffe:	460d      	mov	r5, r1
void _lv_style_list_reset(lv_style_list_t * style_list);

static inline lv_style_t * lv_style_list_get_style(lv_style_list_t * list, uint8_t id)
{
    if(list->has_trans && list->skip_trans) id++;
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
 8006000:	46b2      	mov	sl, r6
 8006002:	fa5f f886 	uxtb.w	r8, r6
    if(part == LV_OBJ_PART_MAIN) return &((lv_obj_t *)obj)->style_list;
 8006006:	2e00      	cmp	r6, #0
 8006008:	d03b      	beq.n	8006082 <report_style_mod_core+0x8e>
    info.part = part;
 800600a:	f88d 8008 	strb.w	r8, [sp, #8]
    info.result = NULL;
 800600e:	f8cd a00c 	str.w	sl, [sp, #12]
    if(obj == NULL) return LV_RES_OK;
 8006012:	2d00      	cmp	r5, #0
 8006014:	d06b      	beq.n	80060ee <report_style_mod_core+0xfa>
    if(obj->signal_cb) res = obj->signal_cb(obj, signal, param);
 8006016:	69eb      	ldr	r3, [r5, #28]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d068      	beq.n	80060ee <report_style_mod_core+0xfa>
 800601c:	aa02      	add	r2, sp, #8
 800601e:	2108      	movs	r1, #8
 8006020:	4628      	mov	r0, r5
 8006022:	4798      	blx	r3
    if(res != LV_RES_OK) return NULL;
 8006024:	2801      	cmp	r0, #1
 8006026:	d162      	bne.n	80060ee <report_style_mod_core+0xfa>
    return info.result;
 8006028:	f8dd c00c 	ldr.w	ip, [sp, #12]
        if(list == NULL) break;
 800602c:	f1bc 0f00 	cmp.w	ip, #0
 8006030:	d05d      	beq.n	80060ee <report_style_mod_core+0xfa>
        for(ci = 0; ci < list->style_cnt; ci++) {
 8006032:	f89c 2004 	ldrb.w	r2, [ip, #4]
 8006036:	f012 023f 	ands.w	r2, r2, #63	; 0x3f
 800603a:	d01a      	beq.n	8006072 <report_style_mod_core+0x7e>
    if(list->has_trans && list->skip_trans) id++;
 800603c:	f8bc 3004 	ldrh.w	r3, [ip, #4]
 8006040:	fab4 f084 	clz	r0, r4
 8006044:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8006048:	0940      	lsrs	r0, r0, #5
 800604a:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 800604e:	d02f      	beq.n	80060b0 <report_style_mod_core+0xbc>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
 8006050:	f89c e004 	ldrb.w	lr, [ip, #4]
 8006054:	2300      	movs	r3, #0
 8006056:	f00e 073f 	and.w	r7, lr, #63	; 0x3f
 800605a:	b1d7      	cbz	r7, 8006092 <report_style_mod_core+0x9e>
    return list->style_list[id];
 800605c:	f8dc 1000 	ldr.w	r1, [ip]
 8006060:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8006064:	3301      	adds	r3, #1
            if(_class == style || style == NULL) {
 8006066:	428c      	cmp	r4, r1
        for(ci = 0; ci < list->style_cnt; ci++) {
 8006068:	b2d9      	uxtb	r1, r3
            if(_class == style || style == NULL) {
 800606a:	d017      	beq.n	800609c <report_style_mod_core+0xa8>
 800606c:	b9b0      	cbnz	r0, 800609c <report_style_mod_core+0xa8>
        for(ci = 0; ci < list->style_cnt; ci++) {
 800606e:	428a      	cmp	r2, r1
 8006070:	d8f3      	bhi.n	800605a <report_style_mod_core+0x66>
    for(part = 0; part != _LV_OBJ_PART_REAL_LAST; part++) {
 8006072:	f1b8 0f3f 	cmp.w	r8, #63	; 0x3f
 8006076:	d03a      	beq.n	80060ee <report_style_mod_core+0xfa>
 8006078:	3601      	adds	r6, #1
 800607a:	fa5f f886 	uxtb.w	r8, r6
    if(part == LV_OBJ_PART_MAIN) return &((lv_obj_t *)obj)->style_list;
 800607e:	2e00      	cmp	r6, #0
 8006080:	d1c3      	bne.n	800600a <report_style_mod_core+0x16>
        for(ci = 0; ci < list->style_cnt; ci++) {
 8006082:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
    if(part == LV_OBJ_PART_MAIN) return &((lv_obj_t *)obj)->style_list;
 8006086:	f105 0c28 	add.w	ip, r5, #40	; 0x28
        for(ci = 0; ci < list->style_cnt; ci++) {
 800608a:	f012 023f 	ands.w	r2, r2, #63	; 0x3f
 800608e:	d1d5      	bne.n	800603c <report_style_mod_core+0x48>
 8006090:	e7f2      	b.n	8006078 <report_style_mod_core+0x84>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
 8006092:	4639      	mov	r1, r7
 8006094:	3301      	adds	r3, #1
            if(_class == style || style == NULL) {
 8006096:	428c      	cmp	r4, r1
        for(ci = 0; ci < list->style_cnt; ci++) {
 8006098:	b2d9      	uxtb	r1, r3
            if(_class == style || style == NULL) {
 800609a:	d1e7      	bne.n	800606c <report_style_mod_core+0x78>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 800609c:	4628      	mov	r0, r5
 800609e:	f00e fb93 	bl	80147c8 <lv_debug_check_null>
 80060a2:	b9f8      	cbnz	r0, 80060e4 <report_style_mod_core+0xf0>
 80060a4:	4603      	mov	r3, r0
 80060a6:	462a      	mov	r2, r5
 80060a8:	4825      	ldr	r0, [pc, #148]	; (8006140 <report_style_mod_core+0x14c>)
 80060aa:	f00e fb91 	bl	80147d0 <lv_debug_log_error>
 80060ae:	e7fe      	b.n	80060ae <report_style_mod_core+0xba>
 80060b0:	f89c 9004 	ldrb.w	r9, [ip, #4]
    if(list->has_trans && list->skip_trans) id++;
 80060b4:	2300      	movs	r3, #0
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
 80060b6:	f009 093f 	and.w	r9, r9, #63	; 0x3f
 80060ba:	3301      	adds	r3, #1
 80060bc:	2100      	movs	r1, #0
 80060be:	fa5f fe83 	uxtb.w	lr, r3
 80060c2:	4572      	cmp	r2, lr
 80060c4:	d906      	bls.n	80060d4 <report_style_mod_core+0xe0>
 80060c6:	f1b9 0f00 	cmp.w	r9, #0
 80060ca:	d003      	beq.n	80060d4 <report_style_mod_core+0xe0>
    return list->style_list[id];
 80060cc:	f8dc 1000 	ldr.w	r1, [ip]
 80060d0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
            if(_class == style || style == NULL) {
 80060d4:	428c      	cmp	r4, r1
        for(ci = 0; ci < list->style_cnt; ci++) {
 80060d6:	b2d9      	uxtb	r1, r3
            if(_class == style || style == NULL) {
 80060d8:	d0e0      	beq.n	800609c <report_style_mod_core+0xa8>
 80060da:	2800      	cmp	r0, #0
 80060dc:	d1de      	bne.n	800609c <report_style_mod_core+0xa8>
        for(ci = 0; ci < list->style_cnt; ci++) {
 80060de:	4291      	cmp	r1, r2
 80060e0:	d3eb      	bcc.n	80060ba <report_style_mod_core+0xc6>
 80060e2:	e7c6      	b.n	8006072 <report_style_mod_core+0x7e>
 80060e4:	21ff      	movs	r1, #255	; 0xff
 80060e6:	4628      	mov	r0, r5
 80060e8:	f7ff fe14 	bl	8005d14 <lv_obj_refresh_style.part.0>
}
 80060ec:	e7c1      	b.n	8006072 <report_style_mod_core+0x7e>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80060ee:	4628      	mov	r0, r5
 80060f0:	f00e fb6a 	bl	80147c8 <lv_debug_check_null>
 80060f4:	4603      	mov	r3, r0
 80060f6:	b1c0      	cbz	r0, 800612a <report_style_mod_core+0x136>
        result = _lv_ll_get_head(&obj->child_ll);
 80060f8:	1d2e      	adds	r6, r5, #4
 80060fa:	4630      	mov	r0, r6
 80060fc:	f00e fd36 	bl	8014b6c <_lv_ll_get_head>
    while(child) {
 8006100:	4601      	mov	r1, r0
 8006102:	b178      	cbz	r0, 8006124 <report_style_mod_core+0x130>
        report_style_mod_core(style, child);
 8006104:	4620      	mov	r0, r4
 8006106:	9101      	str	r1, [sp, #4]
 8006108:	f7ff ff74 	bl	8005ff4 <report_style_mod_core>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 800610c:	4628      	mov	r0, r5
 800610e:	f00e fb5b 	bl	80147c8 <lv_debug_check_null>
 8006112:	4603      	mov	r3, r0
        result = _lv_ll_get_next(&obj->child_ll, child);
 8006114:	9901      	ldr	r1, [sp, #4]
 8006116:	4630      	mov	r0, r6
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8006118:	b163      	cbz	r3, 8006134 <report_style_mod_core+0x140>
        result = _lv_ll_get_next(&obj->child_ll, child);
 800611a:	f00e fd2f 	bl	8014b7c <_lv_ll_get_next>
    while(child) {
 800611e:	4601      	mov	r1, r0
 8006120:	2800      	cmp	r0, #0
 8006122:	d1ef      	bne.n	8006104 <report_style_mod_core+0x110>
}
 8006124:	b004      	add	sp, #16
 8006126:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 800612a:	462a      	mov	r2, r5
 800612c:	4804      	ldr	r0, [pc, #16]	; (8006140 <report_style_mod_core+0x14c>)
 800612e:	f00e fb4f 	bl	80147d0 <lv_debug_log_error>
 8006132:	e7fe      	b.n	8006132 <report_style_mod_core+0x13e>
 8006134:	462a      	mov	r2, r5
 8006136:	4802      	ldr	r0, [pc, #8]	; (8006140 <report_style_mod_core+0x14c>)
 8006138:	f00e fb4a 	bl	80147d0 <lv_debug_log_error>
 800613c:	e7fe      	b.n	800613c <report_style_mod_core+0x148>
 800613e:	bf00      	nop
 8006140:	0801e1d4 	.word	0x0801e1d4

08006144 <lv_obj_report_style_mod>:
{
 8006144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006146:	4606      	mov	r6, r0
    lv_disp_t * d = lv_disp_get_next(NULL);
 8006148:	2000      	movs	r0, #0
 800614a:	f00d fc01 	bl	8013950 <lv_disp_get_next>
    while(d) {
 800614e:	b1c0      	cbz	r0, 8006182 <lv_obj_report_style_mod+0x3e>
 8006150:	4607      	mov	r7, r0
        _LV_LL_READ(d->scr_ll, i) {
 8006152:	f107 0538 	add.w	r5, r7, #56	; 0x38
 8006156:	4628      	mov	r0, r5
 8006158:	f00e fd08 	bl	8014b6c <_lv_ll_get_head>
 800615c:	4604      	mov	r4, r0
 800615e:	b150      	cbz	r0, 8006176 <lv_obj_report_style_mod+0x32>
            report_style_mod_core(style, i);
 8006160:	4621      	mov	r1, r4
 8006162:	4630      	mov	r0, r6
 8006164:	f7ff ff46 	bl	8005ff4 <report_style_mod_core>
        _LV_LL_READ(d->scr_ll, i) {
 8006168:	4621      	mov	r1, r4
 800616a:	4628      	mov	r0, r5
 800616c:	f00e fd06 	bl	8014b7c <_lv_ll_get_next>
 8006170:	4604      	mov	r4, r0
 8006172:	2800      	cmp	r0, #0
 8006174:	d1f4      	bne.n	8006160 <lv_obj_report_style_mod+0x1c>
        d = lv_disp_get_next(d);
 8006176:	4638      	mov	r0, r7
 8006178:	f00d fbea 	bl	8013950 <lv_disp_get_next>
    while(d) {
 800617c:	4607      	mov	r7, r0
 800617e:	2800      	cmp	r0, #0
 8006180:	d1e7      	bne.n	8006152 <lv_obj_report_style_mod+0xe>
}
 8006182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006184 <lv_obj_reset_style_list>:
{
 8006184:	b530      	push	{r4, r5, lr}
    if(part == LV_OBJ_PART_MAIN) return &((lv_obj_t *)obj)->style_list;
 8006186:	460d      	mov	r5, r1
{
 8006188:	b083      	sub	sp, #12
 800618a:	4604      	mov	r4, r0
    if(part == LV_OBJ_PART_MAIN) return &((lv_obj_t *)obj)->style_list;
 800618c:	b329      	cbz	r1, 80061da <lv_obj_reset_style_list+0x56>
    info.result = NULL;
 800618e:	2300      	movs	r3, #0
    info.part = part;
 8006190:	f88d 1000 	strb.w	r1, [sp]
    info.result = NULL;
 8006194:	9301      	str	r3, [sp, #4]
    if(obj == NULL) return LV_RES_OK;
 8006196:	b180      	cbz	r0, 80061ba <lv_obj_reset_style_list+0x36>
    if(obj->signal_cb) res = obj->signal_cb(obj, signal, param);
 8006198:	69c3      	ldr	r3, [r0, #28]
 800619a:	b173      	cbz	r3, 80061ba <lv_obj_reset_style_list+0x36>
 800619c:	466a      	mov	r2, sp
 800619e:	2108      	movs	r1, #8
 80061a0:	4798      	blx	r3
    if(res != LV_RES_OK) return NULL;
 80061a2:	2801      	cmp	r0, #1
 80061a4:	d109      	bne.n	80061ba <lv_obj_reset_style_list+0x36>
    return info.result;
 80061a6:	9801      	ldr	r0, [sp, #4]
    if(style_dsc == NULL) {
 80061a8:	b138      	cbz	r0, 80061ba <lv_obj_reset_style_list+0x36>
    _lv_style_list_reset(style_dsc);
 80061aa:	f002 fe83 	bl	8008eb4 <_lv_style_list_reset>
    trans_del(obj, part, 0xFF, NULL);
 80061ae:	4629      	mov	r1, r5
 80061b0:	2300      	movs	r3, #0
 80061b2:	22ff      	movs	r2, #255	; 0xff
 80061b4:	4620      	mov	r0, r4
 80061b6:	f7fd f8f9 	bl	80033ac <trans_del>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80061ba:	4620      	mov	r0, r4
 80061bc:	f00e fb04 	bl	80147c8 <lv_debug_check_null>
 80061c0:	b928      	cbnz	r0, 80061ce <lv_obj_reset_style_list+0x4a>
 80061c2:	4603      	mov	r3, r0
 80061c4:	4622      	mov	r2, r4
 80061c6:	4806      	ldr	r0, [pc, #24]	; (80061e0 <lv_obj_reset_style_list+0x5c>)
 80061c8:	f00e fb02 	bl	80147d0 <lv_debug_log_error>
 80061cc:	e7fe      	b.n	80061cc <lv_obj_reset_style_list+0x48>
 80061ce:	4620      	mov	r0, r4
 80061d0:	21ff      	movs	r1, #255	; 0xff
 80061d2:	f7ff fd9f 	bl	8005d14 <lv_obj_refresh_style.part.0>
}
 80061d6:	b003      	add	sp, #12
 80061d8:	bd30      	pop	{r4, r5, pc}
    if(part == LV_OBJ_PART_MAIN) return &((lv_obj_t *)obj)->style_list;
 80061da:	3028      	adds	r0, #40	; 0x28
    if(style_dsc == NULL) {
 80061dc:	e7e5      	b.n	80061aa <lv_obj_reset_style_list+0x26>
 80061de:	bf00      	nop
 80061e0:	0801e1d4 	.word	0x0801e1d4

080061e4 <_lv_obj_get_style_ptr.constprop.2>:
    while(parent) {
 80061e4:	2800      	cmp	r0, #0
 80061e6:	d064      	beq.n	80062b2 <_lv_obj_get_style_ptr.constprop.2+0xce>
const void * _lv_obj_get_style_ptr(const lv_obj_t * obj, uint8_t part, lv_style_property_t prop)
 80061e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061ea:	460e      	mov	r6, r1
 80061ec:	b085      	sub	sp, #20
 80061ee:	4605      	mov	r5, r0
    if(part == LV_OBJ_PART_MAIN) return &((lv_obj_t *)obj)->style_list;
 80061f0:	2900      	cmp	r1, #0
 80061f2:	d03c      	beq.n	800626e <_lv_obj_get_style_ptr.constprop.2+0x8a>
    info.result = NULL;
 80061f4:	2700      	movs	r7, #0
    if(obj->signal_cb) res = obj->signal_cb(obj, signal, param);
 80061f6:	69c4      	ldr	r4, [r0, #28]
    info.part = part;
 80061f8:	f88d 1008 	strb.w	r1, [sp, #8]
    info.result = NULL;
 80061fc:	9703      	str	r7, [sp, #12]
    if(obj->signal_cb) res = obj->signal_cb(obj, signal, param);
 80061fe:	b134      	cbz	r4, 800620e <_lv_obj_get_style_ptr.constprop.2+0x2a>
 8006200:	aa02      	add	r2, sp, #8
 8006202:	2108      	movs	r1, #8
 8006204:	47a0      	blx	r4
    if(res != LV_RES_OK) return NULL;
 8006206:	2801      	cmp	r0, #1
 8006208:	bf0c      	ite	eq
 800620a:	9c03      	ldreq	r4, [sp, #12]
 800620c:	463c      	movne	r4, r7
        if(!list->ignore_cache && list->style_cnt > 0) {
 800620e:	7963      	ldrb	r3, [r4, #5]
 8006210:	0718      	lsls	r0, r3, #28
 8006212:	d407      	bmi.n	8006224 <_lv_obj_get_style_ptr.constprop.2+0x40>
 8006214:	7922      	ldrb	r2, [r4, #4]
 8006216:	0691      	lsls	r1, r2, #26
 8006218:	d004      	beq.n	8006224 <_lv_obj_get_style_ptr.constprop.2+0x40>
            if(!list->valid_cache) update_style_cache((lv_obj_t *)parent, part, prop  & (~LV_STYLE_STATE_MASK));
 800621a:	075a      	lsls	r2, r3, #29
 800621c:	d530      	bpl.n	8006280 <_lv_obj_get_style_ptr.constprop.2+0x9c>
                    if(list->value_txt_str) def = true;
 800621e:	79e3      	ldrb	r3, [r4, #7]
 8006220:	071b      	lsls	r3, r3, #28
 8006222:	d441      	bmi.n	80062a8 <_lv_obj_get_style_ptr.constprop.2+0xc4>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8006224:	4628      	mov	r0, r5
 8006226:	f00e facf 	bl	80147c8 <lv_debug_check_null>
 800622a:	b318      	cbz	r0, 8006274 <_lv_obj_get_style_ptr.constprop.2+0x90>
    if(part < _LV_OBJ_PART_REAL_LAST) return ((lv_obj_t *)obj)->state;
 800622c:	2e3f      	cmp	r6, #63	; 0x3f
 800622e:	d931      	bls.n	8006294 <_lv_obj_get_style_ptr.constprop.2+0xb0>
    info.result = LV_STATE_DEFAULT;
 8006230:	2200      	movs	r2, #0
    if(obj->signal_cb) res = obj->signal_cb(obj, signal, param);
 8006232:	69eb      	ldr	r3, [r5, #28]
    info.part = part;
 8006234:	f88d 6008 	strb.w	r6, [sp, #8]
    info.result = LV_STATE_DEFAULT;
 8006238:	f88d 2009 	strb.w	r2, [sp, #9]
    if(obj->signal_cb) res = obj->signal_cb(obj, signal, param);
 800623c:	b38b      	cbz	r3, 80062a2 <_lv_obj_get_style_ptr.constprop.2+0xbe>
 800623e:	aa02      	add	r2, sp, #8
 8006240:	4628      	mov	r0, r5
 8006242:	2109      	movs	r1, #9
 8006244:	9201      	str	r2, [sp, #4]
 8006246:	4798      	blx	r3
 8006248:	f89d 5009 	ldrb.w	r5, [sp, #9]
 800624c:	9a01      	ldr	r2, [sp, #4]
 800624e:	022d      	lsls	r5, r5, #8
 8006250:	357f      	adds	r5, #127	; 0x7f
 8006252:	b2ad      	uxth	r5, r5
        res = _lv_style_list_get_ptr(list, prop, &value_act);
 8006254:	4620      	mov	r0, r4
 8006256:	4629      	mov	r1, r5
 8006258:	f003 fc1e 	bl	8009a98 <_lv_style_list_get_ptr>
        if(res == LV_RES_OK)  return value_act;
 800625c:	2801      	cmp	r0, #1
 800625e:	d026      	beq.n	80062ae <_lv_obj_get_style_ptr.constprop.2+0xca>
    prop = prop & (~LV_STYLE_STATE_MASK);
 8006260:	f425 45fe 	bic.w	r5, r5, #32512	; 0x7f00
    switch(prop) {
 8006264:	2d7e      	cmp	r5, #126	; 0x7e
 8006266:	d11f      	bne.n	80062a8 <_lv_obj_get_style_ptr.constprop.2+0xc4>
            return lv_theme_get_font_normal();
 8006268:	f010 f95c 	bl	8016524 <lv_theme_get_font_normal>
 800626c:	e01d      	b.n	80062aa <_lv_obj_get_style_ptr.constprop.2+0xc6>
    if(part == LV_OBJ_PART_MAIN) return &((lv_obj_t *)obj)->style_list;
 800626e:	f100 0428 	add.w	r4, r0, #40	; 0x28
 8006272:	e7cc      	b.n	800620e <_lv_obj_get_style_ptr.constprop.2+0x2a>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8006274:	4603      	mov	r3, r0
 8006276:	462a      	mov	r2, r5
 8006278:	480f      	ldr	r0, [pc, #60]	; (80062b8 <_lv_obj_get_style_ptr.constprop.2+0xd4>)
 800627a:	f00e faa9 	bl	80147d0 <lv_debug_log_error>
 800627e:	e7fe      	b.n	800627e <_lv_obj_get_style_ptr.constprop.2+0x9a>
    if(style_prop_is_cacheble(prop) == false) return;
 8006280:	207f      	movs	r0, #127	; 0x7f
 8006282:	f7fc ff9d 	bl	80031c0 <style_prop_is_cacheble>
 8006286:	2800      	cmp	r0, #0
 8006288:	d0c9      	beq.n	800621e <_lv_obj_get_style_ptr.constprop.2+0x3a>
 800628a:	4631      	mov	r1, r6
 800628c:	4628      	mov	r0, r5
 800628e:	f7fe fee7 	bl	8005060 <update_style_cache.part.0>
 8006292:	e7c4      	b.n	800621e <_lv_obj_get_style_ptr.constprop.2+0x3a>
    if(part < _LV_OBJ_PART_REAL_LAST) return ((lv_obj_t *)obj)->state;
 8006294:	f895 503d 	ldrb.w	r5, [r5, #61]	; 0x3d
 8006298:	aa02      	add	r2, sp, #8
 800629a:	022d      	lsls	r5, r5, #8
 800629c:	357f      	adds	r5, #127	; 0x7f
 800629e:	b2ad      	uxth	r5, r5
 80062a0:	e7d8      	b.n	8006254 <_lv_obj_get_style_ptr.constprop.2+0x70>
 80062a2:	257f      	movs	r5, #127	; 0x7f
    return info.result;
 80062a4:	aa02      	add	r2, sp, #8
 80062a6:	e7d5      	b.n	8006254 <_lv_obj_get_style_ptr.constprop.2+0x70>
    switch(prop) {
 80062a8:	2000      	movs	r0, #0
}
 80062aa:	b005      	add	sp, #20
 80062ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if(res == LV_RES_OK)  return value_act;
 80062ae:	9802      	ldr	r0, [sp, #8]
 80062b0:	e7fb      	b.n	80062aa <_lv_obj_get_style_ptr.constprop.2+0xc6>
    return NULL;
 80062b2:	2000      	movs	r0, #0
}
 80062b4:	4770      	bx	lr
 80062b6:	bf00      	nop
 80062b8:	0801e1d4 	.word	0x0801e1d4

080062bc <trans_anim_start_cb>:
{
 80062bc:	b538      	push	{r3, r4, r5, lr}
    lv_style_trans_t * tr = a->var;
 80062be:	6804      	ldr	r4, [r0, #0]
    lv_style_property_t prop_tmp = tr->prop;
 80062c0:	88a5      	ldrh	r5, [r4, #4]
        tr->start_value._int = _lv_obj_get_style_int(tr->obj, tr->part, prop_tmp);
 80062c2:	79a1      	ldrb	r1, [r4, #6]
 80062c4:	f005 030f 	and.w	r3, r5, #15
 80062c8:	462a      	mov	r2, r5
 80062ca:	6820      	ldr	r0, [r4, #0]
    if((prop_tmp & 0xF) < LV_STYLE_ID_COLOR) { /*Int*/
 80062cc:	2b08      	cmp	r3, #8
 80062ce:	d914      	bls.n	80062fa <trans_anim_start_cb+0x3e>
    else if((prop_tmp & 0xF) < LV_STYLE_ID_OPA) { /*Color*/
 80062d0:	2b0b      	cmp	r3, #11
 80062d2:	d90e      	bls.n	80062f2 <trans_anim_start_cb+0x36>
    else if((prop_tmp & 0xF) < LV_STYLE_ID_PTR) { /*Opa*/
 80062d4:	2b0d      	cmp	r3, #13
 80062d6:	d814      	bhi.n	8006302 <trans_anim_start_cb+0x46>
        tr->start_value._opa = _lv_obj_get_style_opa(tr->obj, tr->part, prop_tmp);
 80062d8:	f7ff f8a8 	bl	800542c <_lv_obj_get_style_opa>
 80062dc:	7220      	strb	r0, [r4, #8]
    tr->prop = 0;
 80062de:	2000      	movs	r0, #0
    trans_del(tr->obj, tr->part, prop_tmp, tr);
 80062e0:	4623      	mov	r3, r4
 80062e2:	462a      	mov	r2, r5
 80062e4:	79a1      	ldrb	r1, [r4, #6]
    tr->prop = 0;
 80062e6:	80a0      	strh	r0, [r4, #4]
    trans_del(tr->obj, tr->part, prop_tmp, tr);
 80062e8:	6820      	ldr	r0, [r4, #0]
 80062ea:	f7fd f85f 	bl	80033ac <trans_del>
    tr->prop = prop_tmp;
 80062ee:	80a5      	strh	r5, [r4, #4]
}
 80062f0:	bd38      	pop	{r3, r4, r5, pc}
        tr->start_value._color = _lv_obj_get_style_color(tr->obj, tr->part, prop_tmp);
 80062f2:	f7fe fd91 	bl	8004e18 <_lv_obj_get_style_color>
 80062f6:	60a0      	str	r0, [r4, #8]
 80062f8:	e7f1      	b.n	80062de <trans_anim_start_cb+0x22>
        tr->start_value._int = _lv_obj_get_style_int(tr->obj, tr->part, prop_tmp);
 80062fa:	f7ff f951 	bl	80055a0 <_lv_obj_get_style_int>
 80062fe:	8120      	strh	r0, [r4, #8]
 8006300:	e7ed      	b.n	80062de <trans_anim_start_cb+0x22>
        tr->start_value._ptr = _lv_obj_get_style_ptr(tr->obj, tr->part, prop_tmp);
 8006302:	f7fe fdff 	bl	8004f04 <_lv_obj_get_style_ptr>
 8006306:	60a0      	str	r0, [r4, #8]
 8006308:	e7e9      	b.n	80062de <trans_anim_start_cb+0x22>
 800630a:	bf00      	nop

0800630c <lv_obj_get_hidden>:
{
 800630c:	b510      	push	{r4, lr}
 800630e:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8006310:	f00e fa5a 	bl	80147c8 <lv_debug_check_null>
 8006314:	b120      	cbz	r0, 8006320 <lv_obj_get_hidden+0x14>
    return obj->hidden == 0 ? false : true;
 8006316:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
}
 800631a:	f3c0 1000 	ubfx	r0, r0, #4, #1
 800631e:	bd10      	pop	{r4, pc}
 8006320:	4603      	mov	r3, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8006322:	4622      	mov	r2, r4
 8006324:	4801      	ldr	r0, [pc, #4]	; (800632c <lv_obj_get_hidden+0x20>)
 8006326:	f00e fa53 	bl	80147d0 <lv_debug_log_error>
 800632a:	e7fe      	b.n	800632a <lv_obj_get_hidden+0x1e>
 800632c:	0801e1d4 	.word	0x0801e1d4

08006330 <lv_obj_get_click>:
{
 8006330:	b510      	push	{r4, lr}
 8006332:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8006334:	f00e fa48 	bl	80147c8 <lv_debug_check_null>
 8006338:	b120      	cbz	r0, 8006344 <lv_obj_get_click+0x14>
    return obj->click == 0 ? false : true;
 800633a:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
}
 800633e:	f000 0001 	and.w	r0, r0, #1
 8006342:	bd10      	pop	{r4, pc}
 8006344:	4603      	mov	r3, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8006346:	4622      	mov	r2, r4
 8006348:	4801      	ldr	r0, [pc, #4]	; (8006350 <lv_obj_get_click+0x20>)
 800634a:	f00e fa41 	bl	80147d0 <lv_debug_log_error>
 800634e:	e7fe      	b.n	800634e <lv_obj_get_click+0x1e>
 8006350:	0801e1d4 	.word	0x0801e1d4

08006354 <lv_obj_get_drag>:
{
 8006354:	b510      	push	{r4, lr}
 8006356:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8006358:	f00e fa36 	bl	80147c8 <lv_debug_check_null>
 800635c:	b120      	cbz	r0, 8006368 <lv_obj_get_drag+0x14>
    return obj->drag == 0 ? false : true;
 800635e:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
}
 8006362:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8006366:	bd10      	pop	{r4, pc}
 8006368:	4603      	mov	r3, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 800636a:	4622      	mov	r2, r4
 800636c:	4801      	ldr	r0, [pc, #4]	; (8006374 <lv_obj_get_drag+0x20>)
 800636e:	f00e fa2f 	bl	80147d0 <lv_debug_log_error>
 8006372:	e7fe      	b.n	8006372 <lv_obj_get_drag+0x1e>
 8006374:	0801e1d4 	.word	0x0801e1d4

08006378 <lv_obj_get_drag_dir>:
{
 8006378:	b510      	push	{r4, lr}
 800637a:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 800637c:	f00e fa24 	bl	80147c8 <lv_debug_check_null>
 8006380:	b120      	cbz	r0, 800638c <lv_obj_get_drag_dir+0x14>
    return obj->drag_dir;
 8006382:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
}
 8006386:	f3c0 0082 	ubfx	r0, r0, #2, #3
 800638a:	bd10      	pop	{r4, pc}
 800638c:	4603      	mov	r3, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 800638e:	4622      	mov	r2, r4
 8006390:	4801      	ldr	r0, [pc, #4]	; (8006398 <lv_obj_get_drag_dir+0x20>)
 8006392:	f00e fa1d 	bl	80147d0 <lv_debug_log_error>
 8006396:	e7fe      	b.n	8006396 <lv_obj_get_drag_dir+0x1e>
 8006398:	0801e1d4 	.word	0x0801e1d4

0800639c <lv_obj_get_drag_throw>:
{
 800639c:	b510      	push	{r4, lr}
 800639e:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80063a0:	f00e fa12 	bl	80147c8 <lv_debug_check_null>
 80063a4:	b120      	cbz	r0, 80063b0 <lv_obj_get_drag_throw+0x14>
    return obj->drag_throw == 0 ? false : true;
 80063a6:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
}
 80063aa:	f3c0 0080 	ubfx	r0, r0, #2, #1
 80063ae:	bd10      	pop	{r4, pc}
 80063b0:	4603      	mov	r3, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80063b2:	4622      	mov	r2, r4
 80063b4:	4801      	ldr	r0, [pc, #4]	; (80063bc <lv_obj_get_drag_throw+0x20>)
 80063b6:	f00e fa0b 	bl	80147d0 <lv_debug_log_error>
 80063ba:	e7fe      	b.n	80063ba <lv_obj_get_drag_throw+0x1e>
 80063bc:	0801e1d4 	.word	0x0801e1d4

080063c0 <lv_obj_get_drag_parent>:
    return obj->drag_parent == 0 ? false : true;
 80063c0:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
}
 80063c4:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 80063c8:	4770      	bx	lr
 80063ca:	bf00      	nop

080063cc <lv_obj_get_gesture_parent>:
    return obj->gesture_parent == 0 ? false : true;
 80063cc:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
 80063d0:	f000 0001 	and.w	r0, r0, #1
 80063d4:	4770      	bx	lr
 80063d6:	bf00      	nop

080063d8 <lv_obj_get_base_dir>:
{
 80063d8:	b500      	push	{lr}
 80063da:	b083      	sub	sp, #12
 80063dc:	9001      	str	r0, [sp, #4]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80063de:	f00e f9f3 	bl	80147c8 <lv_debug_check_null>
 80063e2:	9a01      	ldr	r2, [sp, #4]
 80063e4:	b118      	cbz	r0, 80063ee <lv_obj_get_base_dir+0x16>
}
 80063e6:	2000      	movs	r0, #0
 80063e8:	b003      	add	sp, #12
 80063ea:	f85d fb04 	ldr.w	pc, [sp], #4
 80063ee:	4603      	mov	r3, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80063f0:	4801      	ldr	r0, [pc, #4]	; (80063f8 <lv_obj_get_base_dir+0x20>)
 80063f2:	f00e f9ed 	bl	80147d0 <lv_debug_log_error>
 80063f6:	e7fe      	b.n	80063f6 <lv_obj_get_base_dir+0x1e>
 80063f8:	0801e1d4 	.word	0x0801e1d4

080063fc <lv_obj_is_protected>:
{
 80063fc:	b538      	push	{r3, r4, r5, lr}
 80063fe:	460d      	mov	r5, r1
 8006400:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8006402:	f00e f9e1 	bl	80147c8 <lv_debug_check_null>
 8006406:	b130      	cbz	r0, 8006416 <lv_obj_is_protected+0x1a>
    return (obj->protect & prot) == 0 ? false : true;
 8006408:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800640c:	421d      	tst	r5, r3
}
 800640e:	bf14      	ite	ne
 8006410:	2001      	movne	r0, #1
 8006412:	2000      	moveq	r0, #0
 8006414:	bd38      	pop	{r3, r4, r5, pc}
 8006416:	4603      	mov	r3, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8006418:	4622      	mov	r2, r4
 800641a:	4802      	ldr	r0, [pc, #8]	; (8006424 <lv_obj_is_protected+0x28>)
 800641c:	f00e f9d8 	bl	80147d0 <lv_debug_log_error>
 8006420:	e7fe      	b.n	8006420 <lv_obj_is_protected+0x24>
 8006422:	bf00      	nop
 8006424:	0801e1d4 	.word	0x0801e1d4

08006428 <lv_obj_get_state>:
{
 8006428:	b530      	push	{r4, r5, lr}
 800642a:	b083      	sub	sp, #12
 800642c:	460d      	mov	r5, r1
 800642e:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8006430:	f00e f9ca 	bl	80147c8 <lv_debug_check_null>
 8006434:	b1a8      	cbz	r0, 8006462 <lv_obj_get_state+0x3a>
    if(part < _LV_OBJ_PART_REAL_LAST) return ((lv_obj_t *)obj)->state;
 8006436:	2d3f      	cmp	r5, #63	; 0x3f
 8006438:	d90f      	bls.n	800645a <lv_obj_get_state+0x32>
    info.result = LV_STATE_DEFAULT;
 800643a:	2300      	movs	r3, #0
    info.part = part;
 800643c:	f88d 5004 	strb.w	r5, [sp, #4]
    info.result = LV_STATE_DEFAULT;
 8006440:	f88d 3005 	strb.w	r3, [sp, #5]
    if(obj == NULL) return LV_RES_OK;
 8006444:	b19c      	cbz	r4, 800646e <lv_obj_get_state+0x46>
    if(obj->signal_cb) res = obj->signal_cb(obj, signal, param);
 8006446:	69e3      	ldr	r3, [r4, #28]
 8006448:	b19b      	cbz	r3, 8006472 <lv_obj_get_state+0x4a>
 800644a:	4620      	mov	r0, r4
 800644c:	aa01      	add	r2, sp, #4
 800644e:	2109      	movs	r1, #9
 8006450:	4798      	blx	r3
 8006452:	f89d 0005 	ldrb.w	r0, [sp, #5]
}
 8006456:	b003      	add	sp, #12
 8006458:	bd30      	pop	{r4, r5, pc}
    if(part < _LV_OBJ_PART_REAL_LAST) return ((lv_obj_t *)obj)->state;
 800645a:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
}
 800645e:	b003      	add	sp, #12
 8006460:	bd30      	pop	{r4, r5, pc}
 8006462:	4603      	mov	r3, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8006464:	4622      	mov	r2, r4
 8006466:	4804      	ldr	r0, [pc, #16]	; (8006478 <lv_obj_get_state+0x50>)
 8006468:	f00e f9b2 	bl	80147d0 <lv_debug_log_error>
 800646c:	e7fe      	b.n	800646c <lv_obj_get_state+0x44>
 800646e:	4620      	mov	r0, r4
 8006470:	e7f1      	b.n	8006456 <lv_obj_get_state+0x2e>
 8006472:	4618      	mov	r0, r3
}
 8006474:	b003      	add	sp, #12
 8006476:	bd30      	pop	{r4, r5, pc}
 8006478:	0801e1d4 	.word	0x0801e1d4

0800647c <lv_obj_get_signal_cb>:
{
 800647c:	b510      	push	{r4, lr}
 800647e:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8006480:	f00e f9a2 	bl	80147c8 <lv_debug_check_null>
 8006484:	b108      	cbz	r0, 800648a <lv_obj_get_signal_cb+0xe>
}
 8006486:	69e0      	ldr	r0, [r4, #28]
 8006488:	bd10      	pop	{r4, pc}
 800648a:	4603      	mov	r3, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 800648c:	4622      	mov	r2, r4
 800648e:	4802      	ldr	r0, [pc, #8]	; (8006498 <lv_obj_get_signal_cb+0x1c>)
 8006490:	f00e f99e 	bl	80147d0 <lv_debug_log_error>
 8006494:	e7fe      	b.n	8006494 <lv_obj_get_signal_cb+0x18>
 8006496:	bf00      	nop
 8006498:	0801e1d4 	.word	0x0801e1d4

0800649c <lv_obj_get_design_cb>:
{
 800649c:	b510      	push	{r4, lr}
 800649e:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80064a0:	f00e f992 	bl	80147c8 <lv_debug_check_null>
 80064a4:	b108      	cbz	r0, 80064aa <lv_obj_get_design_cb+0xe>
}
 80064a6:	6a20      	ldr	r0, [r4, #32]
 80064a8:	bd10      	pop	{r4, pc}
 80064aa:	4603      	mov	r3, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80064ac:	4622      	mov	r2, r4
 80064ae:	4802      	ldr	r0, [pc, #8]	; (80064b8 <lv_obj_get_design_cb+0x1c>)
 80064b0:	f00e f98e 	bl	80147d0 <lv_debug_log_error>
 80064b4:	e7fe      	b.n	80064b4 <lv_obj_get_design_cb+0x18>
 80064b6:	bf00      	nop
 80064b8:	0801e1d4 	.word	0x0801e1d4

080064bc <lv_obj_get_ext_attr>:
{
 80064bc:	b510      	push	{r4, lr}
 80064be:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80064c0:	f00e f982 	bl	80147c8 <lv_debug_check_null>
 80064c4:	b108      	cbz	r0, 80064ca <lv_obj_get_ext_attr+0xe>
}
 80064c6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80064c8:	bd10      	pop	{r4, pc}
 80064ca:	4603      	mov	r3, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80064cc:	4622      	mov	r2, r4
 80064ce:	4802      	ldr	r0, [pc, #8]	; (80064d8 <lv_obj_get_ext_attr+0x1c>)
 80064d0:	f00e f97e 	bl	80147d0 <lv_debug_log_error>
 80064d4:	e7fe      	b.n	80064d4 <lv_obj_get_ext_attr+0x18>
 80064d6:	bf00      	nop
 80064d8:	0801e1d4 	.word	0x0801e1d4

080064dc <lv_obj_get_group>:
{
 80064dc:	b510      	push	{r4, lr}
 80064de:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80064e0:	f00e f972 	bl	80147c8 <lv_debug_check_null>
 80064e4:	b108      	cbz	r0, 80064ea <lv_obj_get_group+0xe>
}
 80064e6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80064e8:	bd10      	pop	{r4, pc}
 80064ea:	4603      	mov	r3, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80064ec:	4622      	mov	r2, r4
 80064ee:	4802      	ldr	r0, [pc, #8]	; (80064f8 <lv_obj_get_group+0x1c>)
 80064f0:	f00e f96e 	bl	80147d0 <lv_debug_log_error>
 80064f4:	e7fe      	b.n	80064f4 <lv_obj_get_group+0x18>
 80064f6:	bf00      	nop
 80064f8:	0801e1d4 	.word	0x0801e1d4

080064fc <lv_obj_is_focused>:
{
 80064fc:	b510      	push	{r4, lr}
 80064fe:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8006500:	f00e f962 	bl	80147c8 <lv_debug_check_null>
 8006504:	b140      	cbz	r0, 8006518 <lv_obj_is_focused+0x1c>
    if(obj->group_p) {
 8006506:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8006508:	b128      	cbz	r0, 8006516 <lv_obj_is_focused+0x1a>
        if(lv_group_get_focused(obj->group_p) == obj) return true;
 800650a:	f7fb fa57 	bl	80019bc <lv_group_get_focused>
 800650e:	1a20      	subs	r0, r4, r0
 8006510:	fab0 f080 	clz	r0, r0
 8006514:	0940      	lsrs	r0, r0, #5
}
 8006516:	bd10      	pop	{r4, pc}
 8006518:	4603      	mov	r3, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 800651a:	4622      	mov	r2, r4
 800651c:	4801      	ldr	r0, [pc, #4]	; (8006524 <lv_obj_is_focused+0x28>)
 800651e:	f00e f957 	bl	80147d0 <lv_debug_log_error>
 8006522:	e7fe      	b.n	8006522 <lv_obj_is_focused+0x26>
 8006524:	0801e1d4 	.word	0x0801e1d4

08006528 <lv_obj_hittest>:
{
 8006528:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(obj->adv_hittest) {
 800652a:	f990 4034 	ldrsb.w	r4, [r0, #52]	; 0x34
{
 800652e:	b083      	sub	sp, #12
 8006530:	4603      	mov	r3, r0
    if(obj->adv_hittest) {
 8006532:	2c00      	cmp	r4, #0
 8006534:	da0c      	bge.n	8006550 <lv_obj_hittest+0x28>
        hit_info.point = point;
 8006536:	460a      	mov	r2, r1
        hit_info.result = true;
 8006538:	2101      	movs	r1, #1
        obj->signal_cb(obj, LV_SIGNAL_HIT_TEST, &hit_info);
 800653a:	69c3      	ldr	r3, [r0, #28]
        hit_info.point = point;
 800653c:	9200      	str	r2, [sp, #0]
        obj->signal_cb(obj, LV_SIGNAL_HIT_TEST, &hit_info);
 800653e:	466a      	mov	r2, sp
        hit_info.result = true;
 8006540:	f88d 1004 	strb.w	r1, [sp, #4]
        obj->signal_cb(obj, LV_SIGNAL_HIT_TEST, &hit_info);
 8006544:	210a      	movs	r1, #10
 8006546:	4798      	blx	r3
        return hit_info.result;
 8006548:	f89d 0004 	ldrb.w	r0, [sp, #4]
}
 800654c:	b003      	add	sp, #12
 800654e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ext_area.x1 = obj->coords.x1 - obj->ext_click_pad_hor;
 8006550:	f890 5030 	ldrb.w	r5, [r0, #48]	; 0x30
    if(!_lv_area_is_point_on(&ext_area, point, 0)) {
 8006554:	2200      	movs	r2, #0
    ext_area.x2 = obj->coords.x2 + obj->ext_click_pad_hor;
 8006556:	8a9e      	ldrh	r6, [r3, #20]
    ext_area.x1 = obj->coords.x1 - obj->ext_click_pad_hor;
 8006558:	8a07      	ldrh	r7, [r0, #16]
    if(!_lv_area_is_point_on(&ext_area, point, 0)) {
 800655a:	4668      	mov	r0, sp
    ext_area.y2 = obj->coords.y2 + obj->ext_click_pad_ver;
 800655c:	f8b3 c016 	ldrh.w	ip, [r3, #22]
    ext_area.x1 = obj->coords.x1 - obj->ext_click_pad_hor;
 8006560:	1b7f      	subs	r7, r7, r5
    ext_area.y1 = obj->coords.y1 - obj->ext_click_pad_ver;
 8006562:	f893 4031 	ldrb.w	r4, [r3, #49]	; 0x31
    ext_area.x2 = obj->coords.x2 + obj->ext_click_pad_hor;
 8006566:	4435      	add	r5, r6
    ext_area.y1 = obj->coords.y1 - obj->ext_click_pad_ver;
 8006568:	8a5e      	ldrh	r6, [r3, #18]
    ext_area.x1 = obj->coords.x1 - obj->ext_click_pad_hor;
 800656a:	f8ad 7000 	strh.w	r7, [sp]
    ext_area.y1 = obj->coords.y1 - obj->ext_click_pad_ver;
 800656e:	1b33      	subs	r3, r6, r4
    ext_area.y2 = obj->coords.y2 + obj->ext_click_pad_ver;
 8006570:	4464      	add	r4, ip
    ext_area.x2 = obj->coords.x2 + obj->ext_click_pad_hor;
 8006572:	f8ad 5004 	strh.w	r5, [sp, #4]
    ext_area.y1 = obj->coords.y1 - obj->ext_click_pad_ver;
 8006576:	f8ad 3002 	strh.w	r3, [sp, #2]
    ext_area.y2 = obj->coords.y2 + obj->ext_click_pad_ver;
 800657a:	f8ad 4006 	strh.w	r4, [sp, #6]
    if(!_lv_area_is_point_on(&ext_area, point, 0)) {
 800657e:	f00d fd2f 	bl	8013fe0 <_lv_area_is_point_on>
}
 8006582:	b003      	add	sp, #12
 8006584:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006586:	bf00      	nop

08006588 <lv_obj_handle_get_type_signal>:
        if(buf->type[i] == NULL) break;
 8006588:	6803      	ldr	r3, [r0, #0]
 800658a:	b173      	cbz	r3, 80065aa <lv_obj_handle_get_type_signal+0x22>
 800658c:	6843      	ldr	r3, [r0, #4]
 800658e:	b183      	cbz	r3, 80065b2 <lv_obj_handle_get_type_signal+0x2a>
 8006590:	6883      	ldr	r3, [r0, #8]
 8006592:	b183      	cbz	r3, 80065b6 <lv_obj_handle_get_type_signal+0x2e>
 8006594:	68c3      	ldr	r3, [r0, #12]
 8006596:	b183      	cbz	r3, 80065ba <lv_obj_handle_get_type_signal+0x32>
 8006598:	6903      	ldr	r3, [r0, #16]
 800659a:	b183      	cbz	r3, 80065be <lv_obj_handle_get_type_signal+0x36>
 800659c:	6943      	ldr	r3, [r0, #20]
 800659e:	b183      	cbz	r3, 80065c2 <lv_obj_handle_get_type_signal+0x3a>
 80065a0:	6983      	ldr	r3, [r0, #24]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	bf14      	ite	ne
 80065a6:	2307      	movne	r3, #7
 80065a8:	2306      	moveq	r3, #6
    buf->type[i] = name;
 80065aa:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
}
 80065ae:	2001      	movs	r0, #1
 80065b0:	4770      	bx	lr
        if(buf->type[i] == NULL) break;
 80065b2:	2301      	movs	r3, #1
 80065b4:	e7f9      	b.n	80065aa <lv_obj_handle_get_type_signal+0x22>
 80065b6:	2302      	movs	r3, #2
 80065b8:	e7f7      	b.n	80065aa <lv_obj_handle_get_type_signal+0x22>
 80065ba:	2303      	movs	r3, #3
 80065bc:	e7f5      	b.n	80065aa <lv_obj_handle_get_type_signal+0x22>
 80065be:	2304      	movs	r3, #4
 80065c0:	e7f3      	b.n	80065aa <lv_obj_handle_get_type_signal+0x22>
 80065c2:	2305      	movs	r3, #5
 80065c4:	e7f1      	b.n	80065aa <lv_obj_handle_get_type_signal+0x22>
 80065c6:	bf00      	nop

080065c8 <lv_obj_init_draw_rect_dsc>:
{
 80065c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065ca:	4614      	mov	r4, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
 80065cc:	2201      	movs	r2, #1
 80065ce:	4605      	mov	r5, r0
 80065d0:	460e      	mov	r6, r1
 80065d2:	f7fe ffe5 	bl	80055a0 <_lv_obj_get_style_int>
 80065d6:	4603      	mov	r3, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
 80065d8:	f248 020c 	movw	r2, #32780	; 0x800c
 80065dc:	4631      	mov	r1, r6
 80065de:	4628      	mov	r0, r5
    draw_dsc->radius = lv_obj_get_style_radius(obj, part);
 80065e0:	8023      	strh	r3, [r4, #0]
 80065e2:	f7fe ff23 	bl	800542c <_lv_obj_get_style_opa>
    if(opa_scale <= LV_OPA_MIN) {
 80065e6:	2802      	cmp	r0, #2
 80065e8:	f240 8084 	bls.w	80066f4 <lv_obj_init_draw_rect_dsc+0x12c>
    if(draw_dsc->bg_opa != LV_OPA_TRANSP) {
 80065ec:	7ca3      	ldrb	r3, [r4, #18]
 80065ee:	4607      	mov	r7, r0
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d160      	bne.n	80066b6 <lv_obj_init_draw_rect_dsc+0xee>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
 80065f4:	2230      	movs	r2, #48	; 0x30
 80065f6:	4631      	mov	r1, r6
 80065f8:	4628      	mov	r0, r5
 80065fa:	f7fe ffd1 	bl	80055a0 <_lv_obj_get_style_int>
    draw_dsc->border_width = lv_obj_get_style_border_width(obj, part);
 80065fe:	8320      	strh	r0, [r4, #24]
    if(draw_dsc->border_width) {
 8006600:	b118      	cbz	r0, 800660a <lv_obj_init_draw_rect_dsc+0x42>
        if(draw_dsc->border_opa != LV_OPA_TRANSP) {
 8006602:	7f23      	ldrb	r3, [r4, #28]
 8006604:	2b00      	cmp	r3, #0
 8006606:	f040 80f2 	bne.w	80067ee <lv_obj_init_draw_rect_dsc+0x226>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int, scalar)
 800660a:	2240      	movs	r2, #64	; 0x40
 800660c:	4631      	mov	r1, r6
 800660e:	4628      	mov	r0, r5
 8006610:	f7fe ffc6 	bl	80055a0 <_lv_obj_get_style_int>
    draw_dsc->outline_width = lv_obj_get_style_outline_width(obj, part);
 8006614:	84a0      	strh	r0, [r4, #36]	; 0x24
    if(draw_dsc->outline_width) {
 8006616:	b120      	cbz	r0, 8006622 <lv_obj_init_draw_rect_dsc+0x5a>
        if(draw_dsc->outline_opa != LV_OPA_TRANSP) {
 8006618:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800661c:	2b00      	cmp	r3, #0
 800661e:	f040 80f5 	bne.w	800680c <lv_obj_init_draw_rect_dsc+0x244>
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_IMAGE, pattern_image, const void *, _ptr, scalar)
 8006622:	226e      	movs	r2, #110	; 0x6e
 8006624:	4631      	mov	r1, r6
 8006626:	4628      	mov	r0, r5
 8006628:	f7fe fc6c 	bl	8004f04 <_lv_obj_get_style_ptr>
    draw_dsc->pattern_image = lv_obj_get_style_pattern_image(obj, part);
 800662c:	63e0      	str	r0, [r4, #60]	; 0x3c
    if(draw_dsc->pattern_image) {
 800662e:	b118      	cbz	r0, 8006638 <lv_obj_init_draw_rect_dsc+0x70>
        if(draw_dsc->pattern_opa != LV_OPA_TRANSP) {
 8006630:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8006634:	2b00      	cmp	r3, #0
 8006636:	d167      	bne.n	8006708 <lv_obj_init_draw_rect_dsc+0x140>
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_WIDTH, shadow_width, lv_style_int_t, _int, scalar)
 8006638:	2250      	movs	r2, #80	; 0x50
 800663a:	4631      	mov	r1, r6
 800663c:	4628      	mov	r0, r5
 800663e:	f7fe ffaf 	bl	80055a0 <_lv_obj_get_style_int>
    draw_dsc->shadow_width = lv_obj_get_style_shadow_width(obj, part);
 8006642:	8620      	strh	r0, [r4, #48]	; 0x30
    if(draw_dsc->shadow_width) {
 8006644:	b120      	cbz	r0, 8006650 <lv_obj_init_draw_rect_dsc+0x88>
        if(draw_dsc->shadow_opa > LV_OPA_MIN) {
 8006646:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800664a:	2b02      	cmp	r3, #2
 800664c:	f200 80ef 	bhi.w	800682e <lv_obj_init_draw_rect_dsc+0x266>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_STR, value_str, const char *, _ptr, scalar)
 8006650:	4631      	mov	r1, r6
 8006652:	4628      	mov	r0, r5
 8006654:	f7ff fdc6 	bl	80061e4 <_lv_obj_get_style_ptr.constprop.2>
    draw_dsc->value_str = lv_obj_get_style_value_str(obj, part);
 8006658:	64e0      	str	r0, [r4, #76]	; 0x4c
    if(draw_dsc->value_str) {
 800665a:	b120      	cbz	r0, 8006666 <lv_obj_init_draw_rect_dsc+0x9e>
        if(draw_dsc->value_opa > LV_OPA_MIN) {
 800665c:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 8006660:	2b02      	cmp	r3, #2
 8006662:	f200 8082 	bhi.w	800676a <lv_obj_init_draw_rect_dsc+0x1a2>
    if(opa_scale < LV_OPA_MAX) {
 8006666:	2ffc      	cmp	r7, #252	; 0xfc
 8006668:	d824      	bhi.n	80066b4 <lv_obj_init_draw_rect_dsc+0xec>
        draw_dsc->bg_opa = (uint16_t)((uint16_t)draw_dsc->bg_opa * opa_scale) >> 8;
 800666a:	b2bf      	uxth	r7, r7
 800666c:	7ca5      	ldrb	r5, [r4, #18]
        draw_dsc->border_opa = (uint16_t)((uint16_t)draw_dsc->border_opa * opa_scale) >> 8;
 800666e:	7f21      	ldrb	r1, [r4, #28]
        draw_dsc->shadow_opa = (uint16_t)((uint16_t)draw_dsc->shadow_opa * opa_scale) >> 8;
 8006670:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
        draw_dsc->bg_opa = (uint16_t)((uint16_t)draw_dsc->bg_opa * opa_scale) >> 8;
 8006674:	fb15 f507 	smulbb	r5, r5, r7
        draw_dsc->pattern_opa = (uint16_t)((uint16_t)draw_dsc->pattern_opa * opa_scale) >> 8;
 8006678:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
        draw_dsc->border_opa = (uint16_t)((uint16_t)draw_dsc->border_opa * opa_scale) >> 8;
 800667c:	fb11 f107 	smulbb	r1, r1, r7
        draw_dsc->value_opa = (uint16_t)((uint16_t)draw_dsc->value_opa * opa_scale) >> 8;
 8006680:	f894 0054 	ldrb.w	r0, [r4, #84]	; 0x54
        draw_dsc->shadow_opa = (uint16_t)((uint16_t)draw_dsc->shadow_opa * opa_scale) >> 8;
 8006684:	fb12 f207 	smulbb	r2, r2, r7
        draw_dsc->pattern_opa = (uint16_t)((uint16_t)draw_dsc->pattern_opa * opa_scale) >> 8;
 8006688:	fb13 f307 	smulbb	r3, r3, r7
        draw_dsc->bg_opa = (uint16_t)((uint16_t)draw_dsc->bg_opa * opa_scale) >> 8;
 800668c:	f3c5 2507 	ubfx	r5, r5, #8, #8
        draw_dsc->value_opa = (uint16_t)((uint16_t)draw_dsc->value_opa * opa_scale) >> 8;
 8006690:	fb10 f707 	smulbb	r7, r0, r7
        draw_dsc->border_opa = (uint16_t)((uint16_t)draw_dsc->border_opa * opa_scale) >> 8;
 8006694:	f3c1 2107 	ubfx	r1, r1, #8, #8
        draw_dsc->shadow_opa = (uint16_t)((uint16_t)draw_dsc->shadow_opa * opa_scale) >> 8;
 8006698:	f3c2 2207 	ubfx	r2, r2, #8, #8
        draw_dsc->pattern_opa = (uint16_t)((uint16_t)draw_dsc->pattern_opa * opa_scale) >> 8;
 800669c:	f3c3 2307 	ubfx	r3, r3, #8, #8
        draw_dsc->value_opa = (uint16_t)((uint16_t)draw_dsc->value_opa * opa_scale) >> 8;
 80066a0:	f3c7 2707 	ubfx	r7, r7, #8, #8
        draw_dsc->bg_opa = (uint16_t)((uint16_t)draw_dsc->bg_opa * opa_scale) >> 8;
 80066a4:	74a5      	strb	r5, [r4, #18]
        draw_dsc->border_opa = (uint16_t)((uint16_t)draw_dsc->border_opa * opa_scale) >> 8;
 80066a6:	7721      	strb	r1, [r4, #28]
        draw_dsc->shadow_opa = (uint16_t)((uint16_t)draw_dsc->shadow_opa * opa_scale) >> 8;
 80066a8:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
        draw_dsc->pattern_opa = (uint16_t)((uint16_t)draw_dsc->pattern_opa * opa_scale) >> 8;
 80066ac:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
        draw_dsc->value_opa = (uint16_t)((uint16_t)draw_dsc->value_opa * opa_scale) >> 8;
 80066b0:	f884 7054 	strb.w	r7, [r4, #84]	; 0x54
}
 80066b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
 80066b6:	222c      	movs	r2, #44	; 0x2c
 80066b8:	4631      	mov	r1, r6
 80066ba:	4628      	mov	r0, r5
 80066bc:	f7fe feb6 	bl	800542c <_lv_obj_get_style_opa>
        if(draw_dsc->bg_opa > LV_OPA_MIN) {
 80066c0:	2802      	cmp	r0, #2
        draw_dsc->bg_opa = lv_obj_get_style_bg_opa(obj, part);
 80066c2:	74a0      	strb	r0, [r4, #18]
        if(draw_dsc->bg_opa > LV_OPA_MIN) {
 80066c4:	d996      	bls.n	80065f4 <lv_obj_init_draw_rect_dsc+0x2c>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
 80066c6:	2229      	movs	r2, #41	; 0x29
 80066c8:	4631      	mov	r1, r6
 80066ca:	4628      	mov	r0, r5
 80066cc:	f7fe fba4 	bl	8004e18 <_lv_obj_get_style_color>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_DIR, bg_grad_dir, lv_grad_dir_t, _int, scalar)
 80066d0:	2223      	movs	r2, #35	; 0x23
            draw_dsc->bg_color = lv_obj_get_style_bg_color(obj, part);
 80066d2:	6060      	str	r0, [r4, #4]
 80066d4:	4631      	mov	r1, r6
 80066d6:	4628      	mov	r0, r5
 80066d8:	f7fe ff62 	bl	80055a0 <_lv_obj_get_style_int>
 80066dc:	b2c0      	uxtb	r0, r0
            draw_dsc->bg_grad_dir =  lv_obj_get_style_bg_grad_dir(obj, part);
 80066de:	7320      	strb	r0, [r4, #12]
            if(draw_dsc->bg_grad_dir != LV_GRAD_DIR_NONE) {
 80066e0:	2800      	cmp	r0, #0
 80066e2:	f040 80ce 	bne.w	8006882 <lv_obj_init_draw_rect_dsc+0x2ba>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_BLEND_MODE, bg_blend_mode, lv_blend_mode_t, _int, scalar)
 80066e6:	2220      	movs	r2, #32
 80066e8:	4631      	mov	r1, r6
 80066ea:	4628      	mov	r0, r5
 80066ec:	f7fe ff58 	bl	80055a0 <_lv_obj_get_style_int>
 80066f0:	74e0      	strb	r0, [r4, #19]
 80066f2:	e77f      	b.n	80065f4 <lv_obj_init_draw_rect_dsc+0x2c>
        draw_dsc->bg_opa = LV_OPA_TRANSP;
 80066f4:	2300      	movs	r3, #0
 80066f6:	74a3      	strb	r3, [r4, #18]
        draw_dsc->border_opa = LV_OPA_TRANSP;
 80066f8:	7723      	strb	r3, [r4, #28]
        draw_dsc->shadow_opa = LV_OPA_TRANSP;
 80066fa:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
        draw_dsc->pattern_opa = LV_OPA_TRANSP;
 80066fe:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
        draw_dsc->value_opa = LV_OPA_TRANSP;
 8006702:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
}
 8006706:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_OPA, pattern_opa, lv_opa_t, _opa, scalar)
 8006708:	226c      	movs	r2, #108	; 0x6c
 800670a:	4631      	mov	r1, r6
 800670c:	4628      	mov	r0, r5
 800670e:	f7fe fe8d 	bl	800542c <_lv_obj_get_style_opa>
            if(draw_dsc->pattern_opa > LV_OPA_MIN) {
 8006712:	2802      	cmp	r0, #2
            draw_dsc->pattern_opa = lv_obj_get_style_pattern_opa(obj, part);
 8006714:	f884 0048 	strb.w	r0, [r4, #72]	; 0x48
            if(draw_dsc->pattern_opa > LV_OPA_MIN) {
 8006718:	d98e      	bls.n	8006638 <lv_obj_init_draw_rect_dsc+0x70>
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_RECOLOR_OPA, pattern_recolor_opa, lv_opa_t, _opa, scalar)
 800671a:	226d      	movs	r2, #109	; 0x6d
 800671c:	4631      	mov	r1, r6
 800671e:	4628      	mov	r0, r5
 8006720:	f7fe fe84 	bl	800542c <_lv_obj_get_style_opa>
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_REPEAT, pattern_repeat, bool, _int, scalar)
 8006724:	2261      	movs	r2, #97	; 0x61
 8006726:	4631      	mov	r1, r6
                draw_dsc->pattern_recolor_opa = lv_obj_get_style_pattern_recolor_opa(obj, part);
 8006728:	f884 0049 	strb.w	r0, [r4, #73]	; 0x49
 800672c:	4628      	mov	r0, r5
 800672e:	f7fe ff37 	bl	80055a0 <_lv_obj_get_style_int>
 8006732:	1e03      	subs	r3, r0, #0
                draw_dsc->pattern_repeat = lv_obj_get_style_pattern_repeat(obj, part);
 8006734:	f894 204a 	ldrb.w	r2, [r4, #74]	; 0x4a
 8006738:	bf18      	it	ne
 800673a:	2301      	movne	r3, #1
                if(lv_img_src_get_type(draw_dsc->pattern_image) == LV_IMG_SRC_SYMBOL) {
 800673c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
                draw_dsc->pattern_repeat = lv_obj_get_style_pattern_repeat(obj, part);
 800673e:	f363 0200 	bfi	r2, r3, #0, #1
 8006742:	f884 204a 	strb.w	r2, [r4, #74]	; 0x4a
                if(lv_img_src_get_type(draw_dsc->pattern_image) == LV_IMG_SRC_SYMBOL) {
 8006746:	f005 fd39 	bl	800c1bc <lv_img_src_get_type>
 800674a:	2802      	cmp	r0, #2
 800674c:	f000 80ac 	beq.w	80068a8 <lv_obj_init_draw_rect_dsc+0x2e0>
                else if(draw_dsc->pattern_recolor_opa > LV_OPA_MIN) {
 8006750:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 8006754:	2b02      	cmp	r3, #2
 8006756:	f200 80cf 	bhi.w	80068f8 <lv_obj_init_draw_rect_dsc+0x330>
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_BLEND_MODE, pattern_blend_mode, lv_blend_mode_t, _int, scalar)
 800675a:	2260      	movs	r2, #96	; 0x60
 800675c:	4631      	mov	r1, r6
 800675e:	4628      	mov	r0, r5
 8006760:	f7fe ff1e 	bl	80055a0 <_lv_obj_get_style_int>
 8006764:	f884 004b 	strb.w	r0, [r4, #75]	; 0x4b
 8006768:	e766      	b.n	8006638 <lv_obj_init_draw_rect_dsc+0x70>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OPA, value_opa, lv_opa_t, _opa, scalar)
 800676a:	227c      	movs	r2, #124	; 0x7c
 800676c:	4631      	mov	r1, r6
 800676e:	4628      	mov	r0, r5
 8006770:	f7fe fe5c 	bl	800542c <_lv_obj_get_style_opa>
            if(draw_dsc->value_opa > LV_OPA_MIN) {
 8006774:	2802      	cmp	r0, #2
            draw_dsc->value_opa = lv_obj_get_style_value_opa(obj, part);
 8006776:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
            if(draw_dsc->value_opa > LV_OPA_MIN) {
 800677a:	f67f af74 	bls.w	8006666 <lv_obj_init_draw_rect_dsc+0x9e>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_X, value_ofs_x, lv_style_int_t, _int, scalar)
 800677e:	2273      	movs	r2, #115	; 0x73
 8006780:	4631      	mov	r1, r6
 8006782:	4628      	mov	r0, r5
 8006784:	f7fe ff0c 	bl	80055a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_Y, value_ofs_y, lv_style_int_t, _int, scalar)
 8006788:	2274      	movs	r2, #116	; 0x74
 800678a:	4631      	mov	r1, r6
                draw_dsc->value_ofs_x = lv_obj_get_style_value_ofs_x(obj, part);
 800678c:	f8a4 005c 	strh.w	r0, [r4, #92]	; 0x5c
 8006790:	4628      	mov	r0, r5
 8006792:	f7fe ff05 	bl	80055a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
 8006796:	2279      	movs	r2, #121	; 0x79
 8006798:	4631      	mov	r1, r6
                draw_dsc->value_ofs_y = lv_obj_get_style_value_ofs_y(obj, part);
 800679a:	f8a4 005e 	strh.w	r0, [r4, #94]	; 0x5e
 800679e:	4628      	mov	r0, r5
 80067a0:	f7fe fb3a 	bl	8004e18 <_lv_obj_get_style_color>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_FONT, value_font, const lv_font_t *, _ptr, scalar)
 80067a4:	227e      	movs	r2, #126	; 0x7e
 80067a6:	4631      	mov	r1, r6
                draw_dsc->value_color = lv_obj_get_style_value_color(obj, part);
 80067a8:	65a0      	str	r0, [r4, #88]	; 0x58
 80067aa:	4628      	mov	r0, r5
 80067ac:	f7fe fbaa 	bl	8004f04 <_lv_obj_get_style_ptr>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_LETTER_SPACE, value_letter_space, lv_style_int_t, _int, scalar)
 80067b0:	2270      	movs	r2, #112	; 0x70
 80067b2:	4631      	mov	r1, r6
                draw_dsc->value_font = lv_obj_get_style_value_font(obj, part);
 80067b4:	6520      	str	r0, [r4, #80]	; 0x50
 80067b6:	4628      	mov	r0, r5
 80067b8:	f7fe fef2 	bl	80055a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_LINE_SPACE, value_line_space, lv_style_int_t, _int, scalar)
 80067bc:	2271      	movs	r2, #113	; 0x71
 80067be:	4631      	mov	r1, r6
                draw_dsc->value_letter_space = lv_obj_get_style_value_letter_space(obj, part);
 80067c0:	f8a4 0060 	strh.w	r0, [r4, #96]	; 0x60
 80067c4:	4628      	mov	r0, r5
 80067c6:	f7fe feeb 	bl	80055a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_ALIGN, value_align, lv_align_t, _int, scalar)
 80067ca:	2275      	movs	r2, #117	; 0x75
 80067cc:	4631      	mov	r1, r6
                draw_dsc->value_line_space = lv_obj_get_style_value_line_space(obj, part);
 80067ce:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
 80067d2:	4628      	mov	r0, r5
 80067d4:	f7fe fee4 	bl	80055a0 <_lv_obj_get_style_int>
 80067d8:	4603      	mov	r3, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_BLEND_MODE, value_blend_mode, lv_blend_mode_t, _int, scalar)
 80067da:	4631      	mov	r1, r6
 80067dc:	4628      	mov	r0, r5
 80067de:	2272      	movs	r2, #114	; 0x72
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_ALIGN, value_align, lv_align_t, _int, scalar)
 80067e0:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_BLEND_MODE, value_blend_mode, lv_blend_mode_t, _int, scalar)
 80067e4:	f7fe fedc 	bl	80055a0 <_lv_obj_get_style_int>
 80067e8:	f884 0065 	strb.w	r0, [r4, #101]	; 0x65
 80067ec:	e73b      	b.n	8006666 <lv_obj_init_draw_rect_dsc+0x9e>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_OPA, border_opa, lv_opa_t, _opa, scalar)
 80067ee:	223c      	movs	r2, #60	; 0x3c
 80067f0:	4631      	mov	r1, r6
 80067f2:	4628      	mov	r0, r5
 80067f4:	f7fe fe1a 	bl	800542c <_lv_obj_get_style_opa>
            if(draw_dsc->border_opa > LV_OPA_MIN) {
 80067f8:	2802      	cmp	r0, #2
            draw_dsc->border_opa = lv_obj_get_style_border_opa(obj, part);
 80067fa:	7720      	strb	r0, [r4, #28]
            if(draw_dsc->border_opa > LV_OPA_MIN) {
 80067fc:	d86e      	bhi.n	80068dc <lv_obj_init_draw_rect_dsc+0x314>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_BLEND_MODE, border_blend_mode, lv_blend_mode_t, _int, scalar)
 80067fe:	2232      	movs	r2, #50	; 0x32
 8006800:	4631      	mov	r1, r6
 8006802:	4628      	mov	r0, r5
 8006804:	f7fe fecc 	bl	80055a0 <_lv_obj_get_style_int>
 8006808:	7760      	strb	r0, [r4, #29]
 800680a:	e6fe      	b.n	800660a <lv_obj_init_draw_rect_dsc+0x42>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa, scalar)
 800680c:	224c      	movs	r2, #76	; 0x4c
 800680e:	4631      	mov	r1, r6
 8006810:	4628      	mov	r0, r5
 8006812:	f7fe fe0b 	bl	800542c <_lv_obj_get_style_opa>
            if(draw_dsc->outline_opa > LV_OPA_MIN) {
 8006816:	2802      	cmp	r0, #2
            draw_dsc->outline_opa = lv_obj_get_style_outline_opa(obj, part);
 8006818:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
            if(draw_dsc->outline_opa > LV_OPA_MIN) {
 800681c:	d851      	bhi.n	80068c2 <lv_obj_init_draw_rect_dsc+0x2fa>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_BLEND_MODE, outline_blend_mode, lv_blend_mode_t, _int, scalar)
 800681e:	2242      	movs	r2, #66	; 0x42
 8006820:	4631      	mov	r1, r6
 8006822:	4628      	mov	r0, r5
 8006824:	f7fe febc 	bl	80055a0 <_lv_obj_get_style_int>
 8006828:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
 800682c:	e6f9      	b.n	8006622 <lv_obj_init_draw_rect_dsc+0x5a>
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OPA, shadow_opa, lv_opa_t, _opa, scalar)
 800682e:	225c      	movs	r2, #92	; 0x5c
 8006830:	4631      	mov	r1, r6
 8006832:	4628      	mov	r0, r5
 8006834:	f7fe fdfa 	bl	800542c <_lv_obj_get_style_opa>
            if(draw_dsc->shadow_opa > LV_OPA_MIN) {
 8006838:	2802      	cmp	r0, #2
            draw_dsc->shadow_opa = lv_obj_get_style_shadow_opa(obj, part);
 800683a:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
            if(draw_dsc->shadow_opa > LV_OPA_MIN) {
 800683e:	f67f af07 	bls.w	8006650 <lv_obj_init_draw_rect_dsc+0x88>
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OFS_X, shadow_ofs_x, lv_style_int_t, _int, scalar)
 8006842:	2251      	movs	r2, #81	; 0x51
 8006844:	4631      	mov	r1, r6
 8006846:	4628      	mov	r0, r5
 8006848:	f7fe feaa 	bl	80055a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OFS_Y, shadow_ofs_y, lv_style_int_t, _int, scalar)
 800684c:	2252      	movs	r2, #82	; 0x52
 800684e:	4631      	mov	r1, r6
                draw_dsc->shadow_ofs_x = lv_obj_get_style_shadow_ofs_x(obj, part);
 8006850:	8660      	strh	r0, [r4, #50]	; 0x32
 8006852:	4628      	mov	r0, r5
 8006854:	f7fe fea4 	bl	80055a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_SPREAD, shadow_spread, lv_style_int_t, _int, scalar)
 8006858:	2253      	movs	r2, #83	; 0x53
 800685a:	4631      	mov	r1, r6
                draw_dsc->shadow_ofs_y = lv_obj_get_style_shadow_ofs_y(obj, part);
 800685c:	86a0      	strh	r0, [r4, #52]	; 0x34
 800685e:	4628      	mov	r0, r5
 8006860:	f7fe fe9e 	bl	80055a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_COLOR, shadow_color, lv_color_t, _color, nonscalar)
 8006864:	2259      	movs	r2, #89	; 0x59
 8006866:	4631      	mov	r1, r6
                draw_dsc->shadow_spread = lv_obj_get_style_shadow_spread(obj, part);
 8006868:	86e0      	strh	r0, [r4, #54]	; 0x36
 800686a:	4628      	mov	r0, r5
 800686c:	f7fe fad4 	bl	8004e18 <_lv_obj_get_style_color>
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_BLEND_MODE, shadow_blend_mode, lv_blend_mode_t, _int, scalar)
 8006870:	2254      	movs	r2, #84	; 0x54
                draw_dsc->shadow_color = lv_obj_get_style_shadow_color(obj, part);
 8006872:	62e0      	str	r0, [r4, #44]	; 0x2c
 8006874:	4631      	mov	r1, r6
 8006876:	4628      	mov	r0, r5
 8006878:	f7fe fe92 	bl	80055a0 <_lv_obj_get_style_int>
 800687c:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
 8006880:	e6e6      	b.n	8006650 <lv_obj_init_draw_rect_dsc+0x88>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_COLOR, bg_grad_color, lv_color_t, _color, nonscalar)
 8006882:	222a      	movs	r2, #42	; 0x2a
 8006884:	4631      	mov	r1, r6
 8006886:	4628      	mov	r0, r5
 8006888:	f7fe fac6 	bl	8004e18 <_lv_obj_get_style_color>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_MAIN_STOP, bg_main_stop, lv_style_int_t, _int, scalar)
 800688c:	2221      	movs	r2, #33	; 0x21
 800688e:	4631      	mov	r1, r6
                draw_dsc->bg_grad_color = lv_obj_get_style_bg_grad_color(obj, part);
 8006890:	60a0      	str	r0, [r4, #8]
 8006892:	4628      	mov	r0, r5
 8006894:	f7fe fe84 	bl	80055a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_STOP, bg_grad_stop, lv_style_int_t, _int, scalar)
 8006898:	2222      	movs	r2, #34	; 0x22
                draw_dsc->bg_main_color_stop =  lv_obj_get_style_bg_main_stop(obj, part);
 800689a:	81e0      	strh	r0, [r4, #14]
 800689c:	4631      	mov	r1, r6
 800689e:	4628      	mov	r0, r5
 80068a0:	f7fe fe7e 	bl	80055a0 <_lv_obj_get_style_int>
                draw_dsc->bg_grad_color_stop =  lv_obj_get_style_bg_grad_stop(obj, part);
 80068a4:	8220      	strh	r0, [r4, #16]
 80068a6:	e71e      	b.n	80066e6 <lv_obj_init_draw_rect_dsc+0x11e>
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_RECOLOR, pattern_recolor, lv_color_t, _color, nonscalar)
 80068a8:	2269      	movs	r2, #105	; 0x69
 80068aa:	4631      	mov	r1, r6
 80068ac:	4628      	mov	r0, r5
 80068ae:	f7fe fab3 	bl	8004e18 <_lv_obj_get_style_color>
 80068b2:	4603      	mov	r3, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
 80068b4:	4631      	mov	r1, r6
 80068b6:	4628      	mov	r0, r5
                    draw_dsc->pattern_recolor = lv_obj_get_style_pattern_recolor(obj, part);
 80068b8:	6463      	str	r3, [r4, #68]	; 0x44
 80068ba:	f7ff f86f 	bl	800599c <_lv_obj_get_style_ptr.constprop.0>
                    draw_dsc->pattern_font = lv_obj_get_style_text_font(obj, part);
 80068be:	6420      	str	r0, [r4, #64]	; 0x40
 80068c0:	e74b      	b.n	800675a <lv_obj_init_draw_rect_dsc+0x192>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_PAD, outline_pad, lv_style_int_t, _int, scalar)
 80068c2:	2241      	movs	r2, #65	; 0x41
 80068c4:	4631      	mov	r1, r6
 80068c6:	4628      	mov	r0, r5
 80068c8:	f7fe fe6a 	bl	80055a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_COLOR, outline_color, lv_color_t, _color, nonscalar)
 80068cc:	2249      	movs	r2, #73	; 0x49
                draw_dsc->outline_pad = lv_obj_get_style_outline_pad(obj, part);
 80068ce:	84e0      	strh	r0, [r4, #38]	; 0x26
 80068d0:	4631      	mov	r1, r6
 80068d2:	4628      	mov	r0, r5
 80068d4:	f7fe faa0 	bl	8004e18 <_lv_obj_get_style_color>
                draw_dsc->outline_color = lv_obj_get_style_outline_color(obj, part);
 80068d8:	6220      	str	r0, [r4, #32]
 80068da:	e7a0      	b.n	800681e <lv_obj_init_draw_rect_dsc+0x256>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
 80068dc:	2231      	movs	r2, #49	; 0x31
 80068de:	4631      	mov	r1, r6
 80068e0:	4628      	mov	r0, r5
 80068e2:	f7fe fe5d 	bl	80055a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
 80068e6:	2239      	movs	r2, #57	; 0x39
                draw_dsc->border_side = lv_obj_get_style_border_side(obj, part);
 80068e8:	b2c3      	uxtb	r3, r0
 80068ea:	4631      	mov	r1, r6
 80068ec:	4628      	mov	r0, r5
 80068ee:	8363      	strh	r3, [r4, #26]
 80068f0:	f7fe fa92 	bl	8004e18 <_lv_obj_get_style_color>
                draw_dsc->border_color = lv_obj_get_style_border_color(obj, part);
 80068f4:	6160      	str	r0, [r4, #20]
 80068f6:	e782      	b.n	80067fe <lv_obj_init_draw_rect_dsc+0x236>
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_RECOLOR, pattern_recolor, lv_color_t, _color, nonscalar)
 80068f8:	2269      	movs	r2, #105	; 0x69
 80068fa:	4631      	mov	r1, r6
 80068fc:	4628      	mov	r0, r5
 80068fe:	f7fe fa8b 	bl	8004e18 <_lv_obj_get_style_color>
                    draw_dsc->pattern_recolor = lv_obj_get_style_pattern_recolor(obj, part);
 8006902:	6460      	str	r0, [r4, #68]	; 0x44
 8006904:	e729      	b.n	800675a <lv_obj_init_draw_rect_dsc+0x192>
 8006906:	bf00      	nop

08006908 <lv_obj_design>:
    if(mode == LV_DESIGN_COVER_CHK) {
 8006908:	2a02      	cmp	r2, #2
{
 800690a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800690e:	460e      	mov	r6, r1
 8006910:	b09f      	sub	sp, #124	; 0x7c
 8006912:	4604      	mov	r4, r0
    if(mode == LV_DESIGN_COVER_CHK) {
 8006914:	f000 8081 	beq.w	8006a1a <lv_obj_design+0x112>
    else if(mode == LV_DESIGN_DRAW_MAIN) {
 8006918:	4615      	mov	r5, r2
 800691a:	b132      	cbz	r2, 800692a <lv_obj_design+0x22>
    else if(mode == LV_DESIGN_DRAW_POST) {
 800691c:	2a01      	cmp	r2, #1
 800691e:	f000 8086 	beq.w	8006a2e <lv_obj_design+0x126>
    return LV_DESIGN_RES_OK;
 8006922:	2000      	movs	r0, #0
}
 8006924:	b01f      	add	sp, #124	; 0x7c
 8006926:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        lv_draw_rect_dsc_init(&draw_dsc);
 800692a:	a804      	add	r0, sp, #16
 800692c:	f008 fd04 	bl	800f338 <lv_draw_rect_dsc_init>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
 8006930:	4629      	mov	r1, r5
 8006932:	2233      	movs	r2, #51	; 0x33
 8006934:	4620      	mov	r0, r4
 8006936:	f7fe fe33 	bl	80055a0 <_lv_obj_get_style_int>
        if(lv_obj_get_style_border_post(obj, LV_OBJ_PART_MAIN)) {
 800693a:	b128      	cbz	r0, 8006948 <lv_obj_design+0x40>
            draw_dsc.border_post = 1;
 800693c:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 8006940:	f043 0301 	orr.w	r3, r3, #1
 8006944:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
        lv_obj_init_draw_rect_dsc(obj, LV_OBJ_PART_MAIN, &draw_dsc);
 8006948:	aa04      	add	r2, sp, #16
 800694a:	2100      	movs	r1, #0
 800694c:	4620      	mov	r0, r4
        lv_area_copy(&coords, &obj->coords);
 800694e:	46a0      	mov	r8, r4
        lv_obj_init_draw_rect_dsc(obj, LV_OBJ_PART_MAIN, &draw_dsc);
 8006950:	f7ff fe3a 	bl	80065c8 <lv_obj_init_draw_rect_dsc>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
 8006954:	2204      	movs	r2, #4
 8006956:	2100      	movs	r1, #0
 8006958:	4620      	mov	r0, r4
 800695a:	f7fe fe21 	bl	80055a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
 800695e:	2205      	movs	r2, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
 8006960:	4607      	mov	r7, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
 8006962:	2100      	movs	r1, #0
 8006964:	4620      	mov	r0, r4
 8006966:	f7fe fe1b 	bl	80055a0 <_lv_obj_get_style_int>
 800696a:	4605      	mov	r5, r0
    while(len) {
 800696c:	f858 0f10 	ldr.w	r0, [r8, #16]!
        coords.x1 -= w;
 8006970:	b2bb      	uxth	r3, r7
 8006972:	466f      	mov	r7, sp
        coords.y1 -= h;
 8006974:	b2ad      	uxth	r5, r5
 8006976:	f8d8 1004 	ldr.w	r1, [r8, #4]
        lv_draw_rect(&coords, clip_area, &draw_dsc);
 800697a:	aa04      	add	r2, sp, #16
 800697c:	c703      	stmia	r7!, {r0, r1}
 800697e:	4631      	mov	r1, r6
        coords.x1 -= w;
 8006980:	f8bd 7000 	ldrh.w	r7, [sp]
        coords.x2 += w;
 8006984:	f8bd e004 	ldrh.w	lr, [sp, #4]
        lv_draw_rect(&coords, clip_area, &draw_dsc);
 8006988:	4668      	mov	r0, sp
        coords.y1 -= h;
 800698a:	f8bd 6002 	ldrh.w	r6, [sp, #2]
        coords.x1 -= w;
 800698e:	1aff      	subs	r7, r7, r3
        coords.y2 += h;
 8006990:	f8bd c006 	ldrh.w	ip, [sp, #6]
        coords.x2 += w;
 8006994:	4473      	add	r3, lr
        coords.y1 -= h;
 8006996:	1b76      	subs	r6, r6, r5
        coords.x1 -= w;
 8006998:	f8ad 7000 	strh.w	r7, [sp]
        coords.y2 += h;
 800699c:	4465      	add	r5, ip
        coords.x2 += w;
 800699e:	f8ad 3004 	strh.w	r3, [sp, #4]
        coords.y1 -= h;
 80069a2:	f8ad 6002 	strh.w	r6, [sp, #2]
        coords.y2 += h;
 80069a6:	f8ad 5006 	strh.w	r5, [sp, #6]
        lv_draw_rect(&coords, clip_area, &draw_dsc);
 80069aa:	f008 fce9 	bl	800f380 <lv_draw_rect>
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
 80069ae:	2202      	movs	r2, #2
 80069b0:	2100      	movs	r1, #0
 80069b2:	4620      	mov	r0, r4
 80069b4:	f7fe fdf4 	bl	80055a0 <_lv_obj_get_style_int>
        if(lv_obj_get_style_clip_corner(obj, LV_OBJ_PART_MAIN)) {
 80069b8:	2800      	cmp	r0, #0
 80069ba:	d0b2      	beq.n	8006922 <lv_obj_design+0x1a>
            lv_draw_mask_radius_param_t * mp = _lv_mem_buf_get(sizeof(lv_draw_mask_radius_param_t));
 80069bc:	201c      	movs	r0, #28
 80069be:	f00e fdb3 	bl	8015528 <_lv_mem_buf_get>
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
 80069c2:	2201      	movs	r2, #1
 80069c4:	4605      	mov	r5, r0
 80069c6:	2100      	movs	r1, #0
 80069c8:	4620      	mov	r0, r4
 80069ca:	f7fe fde9 	bl	80055a0 <_lv_obj_get_style_int>
            if(draw_dsc.border_post && draw_dsc.border_opa >= LV_OPA_MIN && draw_dsc.border_width > 0) {
 80069ce:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 80069d2:	4602      	mov	r2, r0
 80069d4:	07db      	lsls	r3, r3, #31
 80069d6:	f140 80b5 	bpl.w	8006b44 <lv_obj_design+0x23c>
 80069da:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 80069de:	2b01      	cmp	r3, #1
 80069e0:	f240 80b0 	bls.w	8006b44 <lv_obj_design+0x23c>
 80069e4:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	f340 80ab 	ble.w	8006b44 <lv_obj_design+0x23c>
                cc_area.x1 = obj->coords.x1 + 1;
 80069ee:	8a26      	ldrh	r6, [r4, #16]
                lv_draw_mask_radius_init(mp, &cc_area, r, false);
 80069f0:	2300      	movs	r3, #0
                cc_area.y1 = obj->coords.y1 + 1;
 80069f2:	8a61      	ldrh	r1, [r4, #18]
                cc_area.x2 = obj->coords.x2 - 1;
 80069f4:	8aa0      	ldrh	r0, [r4, #20]
                cc_area.x1 = obj->coords.x1 + 1;
 80069f6:	1c77      	adds	r7, r6, #1
                cc_area.y2 = obj->coords.y2 - 1;
 80069f8:	8ae6      	ldrh	r6, [r4, #22]
                cc_area.y1 = obj->coords.y1 + 1;
 80069fa:	3101      	adds	r1, #1
                cc_area.x2 = obj->coords.x2 - 1;
 80069fc:	3801      	subs	r0, #1
                cc_area.x1 = obj->coords.x1 + 1;
 80069fe:	f8ad 7008 	strh.w	r7, [sp, #8]
                cc_area.y2 = obj->coords.y2 - 1;
 8006a02:	3e01      	subs	r6, #1
                cc_area.y1 = obj->coords.y1 + 1;
 8006a04:	f8ad 100a 	strh.w	r1, [sp, #10]
                cc_area.x2 = obj->coords.x2 - 1;
 8006a08:	f8ad 000c 	strh.w	r0, [sp, #12]
                lv_draw_mask_radius_init(mp, &cc_area, r, false);
 8006a0c:	a902      	add	r1, sp, #8
 8006a0e:	4628      	mov	r0, r5
                cc_area.y2 = obj->coords.y2 - 1;
 8006a10:	f8ad 600e 	strh.w	r6, [sp, #14]
                lv_draw_mask_radius_init(mp, &cc_area, r, false);
 8006a14:	f008 f864 	bl	800eae0 <lv_draw_mask_radius_init>
            if(draw_dsc.border_post && draw_dsc.border_opa >= LV_OPA_MIN && draw_dsc.border_width > 0) {
 8006a18:	e099      	b.n	8006b4e <lv_obj_design+0x246>
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
 8006a1a:	2100      	movs	r1, #0
 8006a1c:	f7fe fdc0 	bl	80055a0 <_lv_obj_get_style_int>
        if(lv_obj_get_style_clip_corner(obj, LV_OBJ_PART_MAIN)) return LV_DESIGN_RES_MASKED;
 8006a20:	4605      	mov	r5, r0
 8006a22:	2800      	cmp	r0, #0
 8006a24:	d053      	beq.n	8006ace <lv_obj_design+0x1c6>
 8006a26:	2003      	movs	r0, #3
}
 8006a28:	b01f      	add	sp, #124	; 0x7c
 8006a2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006a2e:	2202      	movs	r2, #2
 8006a30:	2100      	movs	r1, #0
 8006a32:	f7fe fdb5 	bl	80055a0 <_lv_obj_get_style_int>
        if(lv_obj_get_style_clip_corner(obj, LV_OBJ_PART_MAIN)) {
 8006a36:	2800      	cmp	r0, #0
 8006a38:	f040 80ae 	bne.w	8006b98 <lv_obj_design+0x290>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
 8006a3c:	2233      	movs	r2, #51	; 0x33
 8006a3e:	2100      	movs	r1, #0
 8006a40:	4620      	mov	r0, r4
 8006a42:	f7fe fdad 	bl	80055a0 <_lv_obj_get_style_int>
        if(lv_obj_get_style_border_post(obj, LV_OBJ_PART_MAIN)) {
 8006a46:	2800      	cmp	r0, #0
 8006a48:	f43f af6b 	beq.w	8006922 <lv_obj_design+0x1a>
            draw_dsc.bg_opa = LV_OPA_TRANSP;
 8006a4c:	2500      	movs	r5, #0
            lv_draw_rect_dsc_init(&draw_dsc);
 8006a4e:	a804      	add	r0, sp, #16
 8006a50:	f008 fc72 	bl	800f338 <lv_draw_rect_dsc_init>
            lv_obj_init_draw_rect_dsc(obj, LV_OBJ_PART_MAIN, &draw_dsc);
 8006a54:	4620      	mov	r0, r4
 8006a56:	aa04      	add	r2, sp, #16
 8006a58:	4629      	mov	r1, r5
            draw_dsc.bg_opa = LV_OPA_TRANSP;
 8006a5a:	f88d 5022 	strb.w	r5, [sp, #34]	; 0x22
            draw_dsc.pattern_opa = LV_OPA_TRANSP;
 8006a5e:	f88d 5058 	strb.w	r5, [sp, #88]	; 0x58
            draw_dsc.shadow_opa = LV_OPA_TRANSP;
 8006a62:	f88d 5048 	strb.w	r5, [sp, #72]	; 0x48
            draw_dsc.value_opa = LV_OPA_TRANSP;
 8006a66:	f88d 5064 	strb.w	r5, [sp, #100]	; 0x64
            lv_obj_init_draw_rect_dsc(obj, LV_OBJ_PART_MAIN, &draw_dsc);
 8006a6a:	f7ff fdad 	bl	80065c8 <lv_obj_init_draw_rect_dsc>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
 8006a6e:	4620      	mov	r0, r4
 8006a70:	4629      	mov	r1, r5
 8006a72:	2204      	movs	r2, #4
 8006a74:	f7fe fd94 	bl	80055a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
 8006a78:	4629      	mov	r1, r5
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
 8006a7a:	4607      	mov	r7, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
 8006a7c:	2205      	movs	r2, #5
 8006a7e:	4620      	mov	r0, r4
 8006a80:	f7fe fd8e 	bl	80055a0 <_lv_obj_get_style_int>
 8006a84:	4684      	mov	ip, r0
 8006a86:	f854 0f10 	ldr.w	r0, [r4, #16]!
            coords.x1 -= w;
 8006a8a:	b2bb      	uxth	r3, r7
 8006a8c:	af02      	add	r7, sp, #8
            coords.y1 -= h;
 8006a8e:	fa1f fc8c 	uxth.w	ip, ip
 8006a92:	6861      	ldr	r1, [r4, #4]
            lv_draw_rect(&coords, clip_area, &draw_dsc);
 8006a94:	aa04      	add	r2, sp, #16
 8006a96:	c703      	stmia	r7!, {r0, r1}
 8006a98:	4631      	mov	r1, r6
            coords.x1 -= w;
 8006a9a:	f8bd 7008 	ldrh.w	r7, [sp, #8]
            coords.x2 += w;
 8006a9e:	f8bd e00c 	ldrh.w	lr, [sp, #12]
            lv_draw_rect(&coords, clip_area, &draw_dsc);
 8006aa2:	a802      	add	r0, sp, #8
            coords.y1 -= h;
 8006aa4:	f8bd 600a 	ldrh.w	r6, [sp, #10]
            coords.x1 -= w;
 8006aa8:	1aff      	subs	r7, r7, r3
            coords.y2 += h;
 8006aaa:	f8bd 400e 	ldrh.w	r4, [sp, #14]
            coords.x2 += w;
 8006aae:	4473      	add	r3, lr
            coords.y1 -= h;
 8006ab0:	eba6 060c 	sub.w	r6, r6, ip
            coords.x1 -= w;
 8006ab4:	f8ad 7008 	strh.w	r7, [sp, #8]
            coords.y2 += h;
 8006ab8:	4464      	add	r4, ip
            coords.x2 += w;
 8006aba:	f8ad 300c 	strh.w	r3, [sp, #12]
            coords.y1 -= h;
 8006abe:	f8ad 600a 	strh.w	r6, [sp, #10]
            coords.y2 += h;
 8006ac2:	f8ad 400e 	strh.w	r4, [sp, #14]
            lv_draw_rect(&coords, clip_area, &draw_dsc);
 8006ac6:	f008 fc5b 	bl	800f380 <lv_draw_rect>
    return LV_DESIGN_RES_OK;
 8006aca:	4628      	mov	r0, r5
 8006acc:	e72a      	b.n	8006924 <lv_obj_design+0x1c>
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
 8006ace:	4601      	mov	r1, r0
 8006ad0:	2201      	movs	r2, #1
 8006ad2:	4620      	mov	r0, r4
 8006ad4:	f7fe fd64 	bl	80055a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
 8006ad8:	2204      	movs	r2, #4
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
 8006ada:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
 8006adc:	4629      	mov	r1, r5
 8006ade:	4620      	mov	r0, r4
 8006ae0:	f7fe fd5e 	bl	80055a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
 8006ae4:	2205      	movs	r2, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
 8006ae6:	4681      	mov	r9, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
 8006ae8:	4629      	mov	r1, r5
 8006aea:	4620      	mov	r0, r4
 8006aec:	f7fe fd58 	bl	80055a0 <_lv_obj_get_style_int>
 8006af0:	4621      	mov	r1, r4
 8006af2:	4607      	mov	r7, r0
 8006af4:	f10d 0c10 	add.w	ip, sp, #16
 8006af8:	f851 0f10 	ldr.w	r0, [r1, #16]!
        coords.x1 -= w;
 8006afc:	fa1f f389 	uxth.w	r3, r9
        coords.y1 -= h;
 8006b00:	b2bf      	uxth	r7, r7
        if(_lv_area_is_in(clip_area, &coords, r) == false) return LV_DESIGN_RES_NOT_COVER;
 8006b02:	4642      	mov	r2, r8
 8006b04:	6849      	ldr	r1, [r1, #4]
 8006b06:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8006b0a:	4630      	mov	r0, r6
        coords.x1 -= w;
 8006b0c:	f8bd e010 	ldrh.w	lr, [sp, #16]
        coords.x2 += w;
 8006b10:	f8bd 8014 	ldrh.w	r8, [sp, #20]
        if(_lv_area_is_in(clip_area, &coords, r) == false) return LV_DESIGN_RES_NOT_COVER;
 8006b14:	a904      	add	r1, sp, #16
        coords.y1 -= h;
 8006b16:	f8bd c012 	ldrh.w	ip, [sp, #18]
        coords.x1 -= w;
 8006b1a:	ebae 0e03 	sub.w	lr, lr, r3
        coords.y2 += h;
 8006b1e:	f8bd 6016 	ldrh.w	r6, [sp, #22]
        coords.x2 += w;
 8006b22:	4443      	add	r3, r8
        coords.y1 -= h;
 8006b24:	ebac 0c07 	sub.w	ip, ip, r7
        coords.x1 -= w;
 8006b28:	f8ad e010 	strh.w	lr, [sp, #16]
        coords.y2 += h;
 8006b2c:	443e      	add	r6, r7
        coords.x2 += w;
 8006b2e:	f8ad 3014 	strh.w	r3, [sp, #20]
        coords.y1 -= h;
 8006b32:	f8ad c012 	strh.w	ip, [sp, #18]
        coords.y2 += h;
 8006b36:	f8ad 6016 	strh.w	r6, [sp, #22]
        if(_lv_area_is_in(clip_area, &coords, r) == false) return LV_DESIGN_RES_NOT_COVER;
 8006b3a:	f00d fb77 	bl	801422c <_lv_area_is_in>
 8006b3e:	b960      	cbnz	r0, 8006b5a <lv_obj_design+0x252>
 8006b40:	2002      	movs	r0, #2
 8006b42:	e6ef      	b.n	8006924 <lv_obj_design+0x1c>
                lv_draw_mask_radius_init(mp, &obj->coords, r, false);
 8006b44:	4641      	mov	r1, r8
 8006b46:	2300      	movs	r3, #0
 8006b48:	4628      	mov	r0, r5
 8006b4a:	f007 ffc9 	bl	800eae0 <lv_draw_mask_radius_init>
            lv_draw_mask_add(mp, obj + 8);
 8006b4e:	f504 7118 	add.w	r1, r4, #608	; 0x260
 8006b52:	4628      	mov	r0, r5
 8006b54:	f007 fd9c 	bl	800e690 <lv_draw_mask_add>
 8006b58:	e6e3      	b.n	8006922 <lv_obj_design+0x1a>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
 8006b5a:	222c      	movs	r2, #44	; 0x2c
 8006b5c:	4629      	mov	r1, r5
 8006b5e:	4620      	mov	r0, r4
 8006b60:	f7fe fc64 	bl	800542c <_lv_obj_get_style_opa>
        if(lv_obj_get_style_bg_opa(obj, LV_OBJ_PART_MAIN) < LV_OPA_MAX) return LV_DESIGN_RES_NOT_COVER;
 8006b64:	28fc      	cmp	r0, #252	; 0xfc
 8006b66:	d9eb      	bls.n	8006b40 <lv_obj_design+0x238>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_BLEND_MODE, bg_blend_mode, lv_blend_mode_t, _int, scalar)
 8006b68:	4629      	mov	r1, r5
 8006b6a:	2220      	movs	r2, #32
 8006b6c:	4620      	mov	r0, r4
 8006b6e:	f7fe fd17 	bl	80055a0 <_lv_obj_get_style_int>
        if(lv_obj_get_style_bg_blend_mode(obj, LV_OBJ_PART_MAIN) != LV_BLEND_MODE_NORMAL) return LV_DESIGN_RES_NOT_COVER;
 8006b72:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
 8006b76:	d1e3      	bne.n	8006b40 <lv_obj_design+0x238>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_BLEND_MODE, border_blend_mode, lv_blend_mode_t, _int, scalar)
 8006b78:	2232      	movs	r2, #50	; 0x32
 8006b7a:	4620      	mov	r0, r4
 8006b7c:	f7fe fd10 	bl	80055a0 <_lv_obj_get_style_int>
        if(lv_obj_get_style_border_blend_mode(obj, LV_OBJ_PART_MAIN) != LV_BLEND_MODE_NORMAL) return LV_DESIGN_RES_NOT_COVER;
 8006b80:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
 8006b84:	d1dc      	bne.n	8006b40 <lv_obj_design+0x238>
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
 8006b86:	4620      	mov	r0, r4
 8006b88:	f248 020c 	movw	r2, #32780	; 0x800c
 8006b8c:	f7fe fc4e 	bl	800542c <_lv_obj_get_style_opa>
        if(lv_obj_get_style_opa_scale(obj, LV_OBJ_PART_MAIN) < LV_OPA_MAX) return LV_DESIGN_RES_NOT_COVER;
 8006b90:	28fc      	cmp	r0, #252	; 0xfc
 8006b92:	d9d5      	bls.n	8006b40 <lv_obj_design+0x238>
        return LV_DESIGN_RES_COVER;
 8006b94:	2001      	movs	r0, #1
 8006b96:	e6c5      	b.n	8006924 <lv_obj_design+0x1c>
            lv_draw_mask_radius_param_t * param = lv_draw_mask_remove_custom(obj + 8);
 8006b98:	f504 7018 	add.w	r0, r4, #608	; 0x260
 8006b9c:	f007 fe14 	bl	800e7c8 <lv_draw_mask_remove_custom>
            _lv_mem_buf_release(param);
 8006ba0:	f00e f99a 	bl	8014ed8 <_lv_mem_buf_release>
 8006ba4:	e74a      	b.n	8006a3c <lv_obj_design+0x134>
 8006ba6:	bf00      	nop

08006ba8 <lv_obj_init_draw_label_dsc>:
{
 8006ba8:	b570      	push	{r4, r5, r6, lr}
 8006baa:	4614      	mov	r4, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_OPA, text_opa, lv_opa_t, _opa, scalar)
 8006bac:	f248 028c 	movw	r2, #32908	; 0x808c
 8006bb0:	4605      	mov	r5, r0
 8006bb2:	460e      	mov	r6, r1
 8006bb4:	f7fe fc3a 	bl	800542c <_lv_obj_get_style_opa>
    if(draw_dsc->opa <= LV_OPA_MIN) return;
 8006bb8:	2802      	cmp	r0, #2
    draw_dsc->opa = lv_obj_get_style_text_opa(obj, part);
 8006bba:	7420      	strb	r0, [r4, #16]
    if(draw_dsc->opa <= LV_OPA_MIN) return;
 8006bbc:	d800      	bhi.n	8006bc0 <lv_obj_init_draw_label_dsc+0x18>
}
 8006bbe:	bd70      	pop	{r4, r5, r6, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
 8006bc0:	f248 020c 	movw	r2, #32780	; 0x800c
 8006bc4:	4631      	mov	r1, r6
 8006bc6:	4628      	mov	r0, r5
 8006bc8:	f7fe fc30 	bl	800542c <_lv_obj_get_style_opa>
    if(opa_scale < LV_OPA_MAX) {
 8006bcc:	28fc      	cmp	r0, #252	; 0xfc
 8006bce:	d945      	bls.n	8006c5c <lv_obj_init_draw_label_dsc+0xb4>
 8006bd0:	7c23      	ldrb	r3, [r4, #16]
    if(draw_dsc->opa <= LV_OPA_MIN) return;
 8006bd2:	2b02      	cmp	r3, #2
 8006bd4:	d9f3      	bls.n	8006bbe <lv_obj_init_draw_label_dsc+0x16>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
 8006bd6:	f248 0289 	movw	r2, #32905	; 0x8089
 8006bda:	4631      	mov	r1, r6
 8006bdc:	4628      	mov	r0, r5
 8006bde:	f7fe f91b 	bl	8004e18 <_lv_obj_get_style_color>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
 8006be2:	f248 0280 	movw	r2, #32896	; 0x8080
 8006be6:	4631      	mov	r1, r6
    draw_dsc->color = lv_obj_get_style_text_color(obj, part);
 8006be8:	6020      	str	r0, [r4, #0]
 8006bea:	4628      	mov	r0, r5
 8006bec:	f7fe fcd8 	bl	80055a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
 8006bf0:	f248 0281 	movw	r2, #32897	; 0x8081
 8006bf4:	4631      	mov	r1, r6
    draw_dsc->letter_space = lv_obj_get_style_text_letter_space(obj, part);
 8006bf6:	82a0      	strh	r0, [r4, #20]
 8006bf8:	4628      	mov	r0, r5
 8006bfa:	f7fe fcd1 	bl	80055a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_DECOR, text_decor, lv_text_decor_t, _int, scalar)
 8006bfe:	f248 0282 	movw	r2, #32898	; 0x8082
 8006c02:	4631      	mov	r1, r6
    draw_dsc->line_space = lv_obj_get_style_text_line_space(obj, part);
 8006c04:	8260      	strh	r0, [r4, #18]
 8006c06:	4628      	mov	r0, r5
 8006c08:	f7fe fcca 	bl	80055a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_BLEND_MODE, text_blend_mode, lv_blend_mode_t, _int, scalar)
 8006c0c:	f248 0283 	movw	r2, #32899	; 0x8083
 8006c10:	4631      	mov	r1, r6
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_DECOR, text_decor, lv_text_decor_t, _int, scalar)
 8006c12:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_BLEND_MODE, text_blend_mode, lv_blend_mode_t, _int, scalar)
 8006c16:	4628      	mov	r0, r5
 8006c18:	f7fe fcc2 	bl	80055a0 <_lv_obj_get_style_int>
 8006c1c:	4603      	mov	r3, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
 8006c1e:	4631      	mov	r1, r6
 8006c20:	4628      	mov	r0, r5
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_BLEND_MODE, text_blend_mode, lv_blend_mode_t, _int, scalar)
 8006c22:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
 8006c26:	f7fe feb9 	bl	800599c <_lv_obj_get_style_ptr.constprop.0>
    if(draw_dsc->sel_start != LV_DRAW_LABEL_NO_TXT_SEL && draw_dsc->sel_end != LV_DRAW_LABEL_NO_TXT_SEL) {
 8006c2a:	69a2      	ldr	r2, [r4, #24]
 8006c2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    draw_dsc->font = lv_obj_get_style_text_font(obj, part);
 8006c30:	60e0      	str	r0, [r4, #12]
    if(draw_dsc->sel_start != LV_DRAW_LABEL_NO_TXT_SEL && draw_dsc->sel_end != LV_DRAW_LABEL_NO_TXT_SEL) {
 8006c32:	429a      	cmp	r2, r3
 8006c34:	d0c3      	beq.n	8006bbe <lv_obj_init_draw_label_dsc+0x16>
 8006c36:	69e2      	ldr	r2, [r4, #28]
 8006c38:	429a      	cmp	r2, r3
 8006c3a:	d0c0      	beq.n	8006bbe <lv_obj_init_draw_label_dsc+0x16>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_COLOR, text_sel_color, lv_color_t, _color, nonscalar)
 8006c3c:	f248 028a 	movw	r2, #32906	; 0x808a
 8006c40:	4631      	mov	r1, r6
 8006c42:	4628      	mov	r0, r5
 8006c44:	f7fe f8e8 	bl	8004e18 <_lv_obj_get_style_color>
 8006c48:	4603      	mov	r3, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_BG_COLOR, text_sel_bg_color, lv_color_t, _color, nonscalar)
 8006c4a:	4631      	mov	r1, r6
 8006c4c:	4628      	mov	r0, r5
 8006c4e:	f248 028b 	movw	r2, #32907	; 0x808b
        draw_dsc->sel_color = lv_obj_get_style_text_sel_color(obj, part);
 8006c52:	6063      	str	r3, [r4, #4]
 8006c54:	f7fe f8e0 	bl	8004e18 <_lv_obj_get_style_color>
        draw_dsc->sel_bg_color = lv_obj_get_style_text_sel_bg_color(obj, part);
 8006c58:	60a0      	str	r0, [r4, #8]
}
 8006c5a:	bd70      	pop	{r4, r5, r6, pc}
        draw_dsc->opa = (uint16_t)((uint16_t)draw_dsc->opa * opa_scale) >> 8;
 8006c5c:	7c22      	ldrb	r2, [r4, #16]
 8006c5e:	fb12 f300 	smulbb	r3, r2, r0
 8006c62:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8006c66:	7423      	strb	r3, [r4, #16]
 8006c68:	e7b3      	b.n	8006bd2 <lv_obj_init_draw_label_dsc+0x2a>
 8006c6a:	bf00      	nop

08006c6c <lv_obj_init_draw_img_dsc>:
{
 8006c6c:	b570      	push	{r4, r5, r6, lr}
 8006c6e:	4614      	mov	r4, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_OPA, image_opa, lv_opa_t, _opa, scalar)
 8006c70:	f248 02ac 	movw	r2, #32940	; 0x80ac
 8006c74:	4605      	mov	r5, r0
 8006c76:	460e      	mov	r6, r1
 8006c78:	f7fe fbd8 	bl	800542c <_lv_obj_get_style_opa>
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
 8006c7c:	2802      	cmp	r0, #2
    draw_dsc->opa = lv_obj_get_style_image_opa(obj, part);
 8006c7e:	7020      	strb	r0, [r4, #0]
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
 8006c80:	d800      	bhi.n	8006c84 <lv_obj_init_draw_img_dsc+0x18>
}
 8006c82:	bd70      	pop	{r4, r5, r6, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
 8006c84:	f248 020c 	movw	r2, #32780	; 0x800c
 8006c88:	4631      	mov	r1, r6
 8006c8a:	4628      	mov	r0, r5
 8006c8c:	f7fe fbce 	bl	800542c <_lv_obj_get_style_opa>
    if(opa_scale < LV_OPA_MAX) {
 8006c90:	28fc      	cmp	r0, #252	; 0xfc
 8006c92:	d92b      	bls.n	8006cec <lv_obj_init_draw_img_dsc+0x80>
 8006c94:	7823      	ldrb	r3, [r4, #0]
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
 8006c96:	2b02      	cmp	r3, #2
 8006c98:	d9f3      	bls.n	8006c82 <lv_obj_init_draw_img_dsc+0x16>
    draw_dsc->angle = 0;
 8006c9a:	2200      	movs	r2, #0
    draw_dsc->zoom = LV_IMG_ZOOM_NONE;
 8006c9c:	f44f 7380 	mov.w	r3, #256	; 0x100
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR_OPA, image_recolor_opa, lv_opa_t, _opa, scalar)
 8006ca0:	4631      	mov	r1, r6
 8006ca2:	4628      	mov	r0, r5
    draw_dsc->angle = 0;
 8006ca4:	8062      	strh	r2, [r4, #2]
    draw_dsc->zoom = LV_IMG_ZOOM_NONE;
 8006ca6:	8123      	strh	r3, [r4, #8]
 8006ca8:	8aab      	ldrh	r3, [r5, #20]
 8006caa:	8a2a      	ldrh	r2, [r5, #16]
 8006cac:	3301      	adds	r3, #1
 8006cae:	1a9b      	subs	r3, r3, r2
    draw_dsc->pivot.x = lv_area_get_width(&obj->coords) / 2;
 8006cb0:	b21b      	sxth	r3, r3
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	bfb8      	it	lt
 8006cb6:	3301      	addlt	r3, #1
 8006cb8:	105b      	asrs	r3, r3, #1
 8006cba:	80a3      	strh	r3, [r4, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8006cbc:	8aeb      	ldrh	r3, [r5, #22]
 8006cbe:	8a6a      	ldrh	r2, [r5, #18]
 8006cc0:	3301      	adds	r3, #1
 8006cc2:	1a9b      	subs	r3, r3, r2
 8006cc4:	f248 02ad 	movw	r2, #32941	; 0x80ad
    draw_dsc->pivot.y = lv_area_get_height(&obj->coords) / 2;
 8006cc8:	b21b      	sxth	r3, r3
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	bfb8      	it	lt
 8006cce:	3301      	addlt	r3, #1
 8006cd0:	105b      	asrs	r3, r3, #1
 8006cd2:	80e3      	strh	r3, [r4, #6]
 8006cd4:	f7fe fbaa 	bl	800542c <_lv_obj_get_style_opa>
    draw_dsc->recolor_opa = lv_obj_get_style_image_recolor_opa(obj, part);
 8006cd8:	72a0      	strb	r0, [r4, #10]
    if(draw_dsc->recolor_opa > 0) {
 8006cda:	b970      	cbnz	r0, 8006cfa <lv_obj_init_draw_img_dsc+0x8e>
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_BLEND_MODE, image_blend_mode, lv_blend_mode_t, _int, scalar)
 8006cdc:	4631      	mov	r1, r6
 8006cde:	4628      	mov	r0, r5
 8006ce0:	f248 02a0 	movw	r2, #32928	; 0x80a0
 8006ce4:	f7fe fc5c 	bl	80055a0 <_lv_obj_get_style_int>
 8006ce8:	7420      	strb	r0, [r4, #16]
}
 8006cea:	bd70      	pop	{r4, r5, r6, pc}
        draw_dsc->opa = (uint16_t)((uint16_t)draw_dsc->opa * opa_scale) >> 8;
 8006cec:	7822      	ldrb	r2, [r4, #0]
 8006cee:	fb12 f300 	smulbb	r3, r2, r0
 8006cf2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8006cf6:	7023      	strb	r3, [r4, #0]
 8006cf8:	e7cd      	b.n	8006c96 <lv_obj_init_draw_img_dsc+0x2a>
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
 8006cfa:	f248 02a9 	movw	r2, #32937	; 0x80a9
 8006cfe:	4631      	mov	r1, r6
 8006d00:	4628      	mov	r0, r5
 8006d02:	f7fe f889 	bl	8004e18 <_lv_obj_get_style_color>
        draw_dsc->recolor = lv_obj_get_style_image_recolor(obj, part);
 8006d06:	60e0      	str	r0, [r4, #12]
 8006d08:	e7e8      	b.n	8006cdc <lv_obj_init_draw_img_dsc+0x70>
 8006d0a:	bf00      	nop

08006d0c <lv_obj_init_draw_line_dsc>:
{
 8006d0c:	b570      	push	{r4, r5, r6, lr}
 8006d0e:	4614      	mov	r4, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
 8006d10:	2290      	movs	r2, #144	; 0x90
 8006d12:	4605      	mov	r5, r0
 8006d14:	460e      	mov	r6, r1
 8006d16:	f7fe fc43 	bl	80055a0 <_lv_obj_get_style_int>
    draw_dsc->width = lv_obj_get_style_line_width(obj, part);
 8006d1a:	80a0      	strh	r0, [r4, #4]
    if(draw_dsc->width == 0) return;
 8006d1c:	b900      	cbnz	r0, 8006d20 <lv_obj_init_draw_line_dsc+0x14>
}
 8006d1e:	bd70      	pop	{r4, r5, r6, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_OPA, line_opa, lv_opa_t, _opa, scalar)
 8006d20:	229c      	movs	r2, #156	; 0x9c
 8006d22:	4631      	mov	r1, r6
 8006d24:	4628      	mov	r0, r5
 8006d26:	f7fe fb81 	bl	800542c <_lv_obj_get_style_opa>
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
 8006d2a:	2802      	cmp	r0, #2
    draw_dsc->opa = lv_obj_get_style_line_opa(obj, part);
 8006d2c:	72a0      	strb	r0, [r4, #10]
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
 8006d2e:	d9f6      	bls.n	8006d1e <lv_obj_init_draw_line_dsc+0x12>
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
 8006d30:	f248 020c 	movw	r2, #32780	; 0x800c
 8006d34:	4631      	mov	r1, r6
 8006d36:	4628      	mov	r0, r5
 8006d38:	f7fe fb78 	bl	800542c <_lv_obj_get_style_opa>
    if(opa_scale < LV_OPA_MAX) {
 8006d3c:	28fc      	cmp	r0, #252	; 0xfc
 8006d3e:	d928      	bls.n	8006d92 <lv_obj_init_draw_line_dsc+0x86>
 8006d40:	7aa3      	ldrb	r3, [r4, #10]
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
 8006d42:	2b02      	cmp	r3, #2
 8006d44:	d9eb      	bls.n	8006d1e <lv_obj_init_draw_line_dsc+0x12>
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
 8006d46:	2299      	movs	r2, #153	; 0x99
 8006d48:	4631      	mov	r1, r6
 8006d4a:	4628      	mov	r0, r5
 8006d4c:	f7fe f864 	bl	8004e18 <_lv_obj_get_style_color>
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_DASH_WIDTH, line_dash_width, lv_style_int_t, _int, scalar)
 8006d50:	2292      	movs	r2, #146	; 0x92
    draw_dsc->color = lv_obj_get_style_line_color(obj, part);
 8006d52:	6020      	str	r0, [r4, #0]
 8006d54:	4631      	mov	r1, r6
 8006d56:	4628      	mov	r0, r5
 8006d58:	f7fe fc22 	bl	80055a0 <_lv_obj_get_style_int>
    draw_dsc->dash_width = lv_obj_get_style_line_dash_width(obj, part);
 8006d5c:	80e0      	strh	r0, [r4, #6]
    if(draw_dsc->dash_width) {
 8006d5e:	b9f8      	cbnz	r0, 8006da0 <lv_obj_init_draw_line_dsc+0x94>
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_ROUNDED, line_rounded, bool, _int, scalar)
 8006d60:	4631      	mov	r1, r6
 8006d62:	2294      	movs	r2, #148	; 0x94
 8006d64:	4628      	mov	r0, r5
 8006d66:	f7fe fc1b 	bl	80055a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_BLEND_MODE, line_blend_mode, lv_blend_mode_t, _int, scalar)
 8006d6a:	4631      	mov	r1, r6
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_ROUNDED, line_rounded, bool, _int, scalar)
 8006d6c:	1e06      	subs	r6, r0, #0
    draw_dsc->round_start = lv_obj_get_style_line_rounded(obj, part);
 8006d6e:	7ae3      	ldrb	r3, [r4, #11]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_BLEND_MODE, line_blend_mode, lv_blend_mode_t, _int, scalar)
 8006d70:	4628      	mov	r0, r5
 8006d72:	f04f 0291 	mov.w	r2, #145	; 0x91
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_ROUNDED, line_rounded, bool, _int, scalar)
 8006d76:	bf18      	it	ne
 8006d78:	2601      	movne	r6, #1
 8006d7a:	f366 0382 	bfi	r3, r6, #2, #1
    draw_dsc->round_end = draw_dsc->round_start;
 8006d7e:	f366 03c3 	bfi	r3, r6, #3, #1
 8006d82:	72e3      	strb	r3, [r4, #11]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_BLEND_MODE, line_blend_mode, lv_blend_mode_t, _int, scalar)
 8006d84:	f7fe fc0c 	bl	80055a0 <_lv_obj_get_style_int>
    draw_dsc->blend_mode = lv_obj_get_style_line_blend_mode(obj, part);
 8006d88:	7ae3      	ldrb	r3, [r4, #11]
 8006d8a:	f360 0301 	bfi	r3, r0, #0, #2
 8006d8e:	72e3      	strb	r3, [r4, #11]
}
 8006d90:	bd70      	pop	{r4, r5, r6, pc}
        draw_dsc->opa = (uint16_t)((uint16_t)draw_dsc->opa * opa_scale) >> 8;
 8006d92:	7aa2      	ldrb	r2, [r4, #10]
 8006d94:	fb12 f300 	smulbb	r3, r2, r0
 8006d98:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8006d9c:	72a3      	strb	r3, [r4, #10]
 8006d9e:	e7d0      	b.n	8006d42 <lv_obj_init_draw_line_dsc+0x36>
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_DASH_GAP, line_dash_gap, lv_style_int_t, _int, scalar)
 8006da0:	2293      	movs	r2, #147	; 0x93
 8006da2:	4631      	mov	r1, r6
 8006da4:	4628      	mov	r0, r5
 8006da6:	f7fe fbfb 	bl	80055a0 <_lv_obj_get_style_int>
        draw_dsc->dash_gap = lv_obj_get_style_line_dash_gap(obj, part);
 8006daa:	8120      	strh	r0, [r4, #8]
 8006dac:	e7d8      	b.n	8006d60 <lv_obj_init_draw_line_dsc+0x54>
 8006dae:	bf00      	nop

08006db0 <style_snapshot>:

static void style_snapshot(lv_obj_t * obj, uint8_t part, style_snapshot_t * shot)
{
 8006db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006db4:	4614      	mov	r4, r2
 8006db6:	b083      	sub	sp, #12
 8006db8:	460e      	mov	r6, r1
    _lv_obj_disable_style_caching(obj, true);
 8006dba:	2101      	movs	r1, #1
{
 8006dbc:	4605      	mov	r5, r0
    _lv_memset_00(shot, sizeof(style_snapshot_t));
    lv_draw_rect_dsc_init(&shot->rect);
    lv_draw_label_dsc_init(&shot->label);
 8006dbe:	f104 0b68 	add.w	fp, r4, #104	; 0x68
    _lv_obj_disable_style_caching(obj, true);
 8006dc2:	f7fc fc03 	bl	80035cc <_lv_obj_disable_style_caching>
    _lv_memset_00(shot, sizeof(style_snapshot_t));
 8006dc6:	21e0      	movs	r1, #224	; 0xe0
 8006dc8:	4620      	mov	r0, r4
    lv_draw_img_dsc_init(&shot->img);
 8006dca:	f104 0a9c 	add.w	sl, r4, #156	; 0x9c
    _lv_memset_00(shot, sizeof(style_snapshot_t));
 8006dce:	f00e fcd3 	bl	8015778 <_lv_memset_00>
    lv_draw_rect_dsc_init(&shot->rect);
 8006dd2:	4620      	mov	r0, r4
 8006dd4:	f008 fab0 	bl	800f338 <lv_draw_rect_dsc_init>
    lv_draw_line_dsc_init(&shot->line);
 8006dd8:	f104 0990 	add.w	r9, r4, #144	; 0x90
    lv_draw_label_dsc_init(&shot->label);
 8006ddc:	4658      	mov	r0, fp
 8006dde:	f005 f9fd 	bl	800c1dc <lv_draw_label_dsc_init>
    lv_draw_img_dsc_init(&shot->img);
 8006de2:	4650      	mov	r0, sl
 8006de4:	f005 f860 	bl	800bea8 <lv_draw_img_dsc_init>
    lv_draw_line_dsc_init(&shot->line);
 8006de8:	4648      	mov	r0, r9
 8006dea:	f006 f961 	bl	800d0b0 <lv_draw_line_dsc_init>
    if(part == LV_OBJ_PART_MAIN) return &((lv_obj_t *)obj)->style_list;
 8006dee:	2e00      	cmp	r6, #0
 8006df0:	f000 80eb 	beq.w	8006fca <style_snapshot+0x21a>
    info.result = NULL;
 8006df4:	f04f 0800 	mov.w	r8, #0
    info.part = part;
 8006df8:	f88d 6000 	strb.w	r6, [sp]
    info.result = NULL;
 8006dfc:	f8cd 8004 	str.w	r8, [sp, #4]
    if(obj == NULL) return LV_RES_OK;
 8006e00:	2d00      	cmp	r5, #0
 8006e02:	f000 80e5 	beq.w	8006fd0 <style_snapshot+0x220>
    if(obj->signal_cb) res = obj->signal_cb(obj, signal, param);
 8006e06:	69ef      	ldr	r7, [r5, #28]
 8006e08:	b13f      	cbz	r7, 8006e1a <style_snapshot+0x6a>
 8006e0a:	466a      	mov	r2, sp
 8006e0c:	2108      	movs	r1, #8
 8006e0e:	4628      	mov	r0, r5
 8006e10:	47b8      	blx	r7
    if(res != LV_RES_OK) return NULL;
 8006e12:	2801      	cmp	r0, #1
 8006e14:	f040 80de 	bne.w	8006fd4 <style_snapshot+0x224>
 8006e18:	9f01      	ldr	r7, [sp, #4]

    lv_style_list_t * list = lv_obj_get_style_list(obj, part);
    bool trans_ori = list->skip_trans;
 8006e1a:	f897 8005 	ldrb.w	r8, [r7, #5]
    list->skip_trans = 1;

    lv_obj_init_draw_rect_dsc(obj, part, &shot->rect);
 8006e1e:	4622      	mov	r2, r4
 8006e20:	4631      	mov	r1, r6
 8006e22:	4628      	mov	r0, r5
    list->skip_trans = 1;
 8006e24:	f048 0301 	orr.w	r3, r8, #1
    bool trans_ori = list->skip_trans;
 8006e28:	f008 0801 	and.w	r8, r8, #1
    list->skip_trans = 1;
 8006e2c:	717b      	strb	r3, [r7, #5]
    lv_obj_init_draw_rect_dsc(obj, part, &shot->rect);
 8006e2e:	f7ff fbcb 	bl	80065c8 <lv_obj_init_draw_rect_dsc>
    lv_obj_init_draw_label_dsc(obj, part, &shot->label);
 8006e32:	465a      	mov	r2, fp
 8006e34:	4631      	mov	r1, r6
 8006e36:	4628      	mov	r0, r5
 8006e38:	f7ff feb6 	bl	8006ba8 <lv_obj_init_draw_label_dsc>
    lv_obj_init_draw_img_dsc(obj, part, &shot->img);
 8006e3c:	4652      	mov	r2, sl
 8006e3e:	4631      	mov	r1, r6
 8006e40:	4628      	mov	r0, r5
 8006e42:	f7ff ff13 	bl	8006c6c <lv_obj_init_draw_img_dsc>
    lv_obj_init_draw_line_dsc(obj, part, &shot->line);
 8006e46:	464a      	mov	r2, r9
 8006e48:	4631      	mov	r1, r6
 8006e4a:	4628      	mov	r0, r5
 8006e4c:	f7ff ff5e 	bl	8006d0c <lv_obj_init_draw_line_dsc>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
 8006e50:	4631      	mov	r1, r6
 8006e52:	2210      	movs	r2, #16
 8006e54:	4628      	mov	r0, r5
 8006e56:	f7fe fba3 	bl	80055a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
 8006e5a:	4631      	mov	r1, r6

    shot->pad_top = lv_obj_get_style_pad_top(obj, part);
 8006e5c:	f8a4 00b0 	strh.w	r0, [r4, #176]	; 0xb0
 8006e60:	2211      	movs	r2, #17
 8006e62:	4628      	mov	r0, r5
 8006e64:	f7fe fb9c 	bl	80055a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
 8006e68:	4631      	mov	r1, r6
    shot->pad_bottom = lv_obj_get_style_pad_bottom(obj, part);
 8006e6a:	f8a4 00b2 	strh.w	r0, [r4, #178]	; 0xb2
 8006e6e:	2213      	movs	r2, #19
 8006e70:	4628      	mov	r0, r5
 8006e72:	f7fe fb95 	bl	80055a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
 8006e76:	4631      	mov	r1, r6
    shot->pad_right = lv_obj_get_style_pad_right(obj, part);
 8006e78:	f8a4 00b4 	strh.w	r0, [r4, #180]	; 0xb4
 8006e7c:	2212      	movs	r2, #18
 8006e7e:	4628      	mov	r0, r5
 8006e80:	f7fe fb8e 	bl	80055a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
 8006e84:	4631      	mov	r1, r6
    shot->pad_left = lv_obj_get_style_pad_left(obj, part);
 8006e86:	f8a4 00b6 	strh.w	r0, [r4, #182]	; 0xb6
 8006e8a:	2214      	movs	r2, #20
 8006e8c:	4628      	mov	r0, r5
 8006e8e:	f7fe fb87 	bl	80055a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int, scalar)
 8006e92:	4631      	mov	r1, r6
    shot->pad_inner = lv_obj_get_style_pad_inner(obj, part);
 8006e94:	f8a4 00b8 	strh.w	r0, [r4, #184]	; 0xb8
 8006e98:	2215      	movs	r2, #21
 8006e9a:	4628      	mov	r0, r5
 8006e9c:	f7fe fb80 	bl	80055a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
 8006ea0:	4631      	mov	r1, r6
    shot->margin_top = lv_obj_get_style_margin_top(obj, part);
 8006ea2:	f8a4 00ba 	strh.w	r0, [r4, #186]	; 0xba
 8006ea6:	2216      	movs	r2, #22
 8006ea8:	4628      	mov	r0, r5
 8006eaa:	f7fe fb79 	bl	80055a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_LEFT, margin_left, lv_style_int_t, _int, scalar)
 8006eae:	4631      	mov	r1, r6
    shot->margin_bottom = lv_obj_get_style_margin_bottom(obj, part);
 8006eb0:	f8a4 00bc 	strh.w	r0, [r4, #188]	; 0xbc
 8006eb4:	2217      	movs	r2, #23
 8006eb6:	4628      	mov	r0, r5
 8006eb8:	f7fe fb72 	bl	80055a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_RIGHT, margin_right, lv_style_int_t, _int, scalar)
 8006ebc:	4631      	mov	r1, r6
    shot->margin_left = lv_obj_get_style_margin_left(obj, part);
 8006ebe:	f8a4 00be 	strh.w	r0, [r4, #190]	; 0xbe
 8006ec2:	2218      	movs	r2, #24
 8006ec4:	4628      	mov	r0, r5
 8006ec6:	f7fe fb6b 	bl	80055a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int, scalar)
 8006eca:	4631      	mov	r1, r6
    shot->margin_right = lv_obj_get_style_margin_right(obj, part);
 8006ecc:	f8a4 00c0 	strh.w	r0, [r4, #192]	; 0xc0
 8006ed0:	2203      	movs	r2, #3
 8006ed2:	4628      	mov	r0, r5
 8006ed4:	f7fe fb64 	bl	80055a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
 8006ed8:	4631      	mov	r1, r6
    shot->size = lv_obj_get_style_size(obj, part);
 8006eda:	f8a4 00c2 	strh.w	r0, [r4, #194]	; 0xc2
 8006ede:	2204      	movs	r2, #4
 8006ee0:	4628      	mov	r0, r5
 8006ee2:	f7fe fb5d 	bl	80055a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
 8006ee6:	4631      	mov	r1, r6
    shot->transform_width = lv_obj_get_style_transform_width(obj, part);
 8006ee8:	f8a4 00c4 	strh.w	r0, [r4, #196]	; 0xc4
 8006eec:	2205      	movs	r2, #5
 8006eee:	4628      	mov	r0, r5
 8006ef0:	f7fe fb56 	bl	80055a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ANGLE, transform_angle, lv_style_int_t, _int, scalar)
 8006ef4:	4631      	mov	r1, r6
    shot->transform_height = lv_obj_get_style_transform_height(obj, part);
 8006ef6:	f8a4 00c6 	strh.w	r0, [r4, #198]	; 0xc6
 8006efa:	2206      	movs	r2, #6
 8006efc:	4628      	mov	r0, r5
 8006efe:	f7fe fb4f 	bl	80055a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ZOOM, transform_zoom, lv_style_int_t, _int, scalar)
 8006f02:	4631      	mov	r1, r6
    shot->transform_angle = lv_obj_get_style_transform_angle(obj, part);
 8006f04:	f8a4 00c8 	strh.w	r0, [r4, #200]	; 0xc8
 8006f08:	2207      	movs	r2, #7
 8006f0a:	4628      	mov	r0, r5
 8006f0c:	f7fe fb48 	bl	80055a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PATH, transition_path, lv_anim_path_t *, _ptr, scalar)
#else
/*For compatibility*/
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PATH, transition_path, const void *, _ptr, scalar)
#endif
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_WIDTH, scale_width, lv_style_int_t, _int, scalar)
 8006f10:	4631      	mov	r1, r6
    shot->transform_zoom = lv_obj_get_style_transform_zoom(obj, part);
 8006f12:	f8a4 00ca 	strh.w	r0, [r4, #202]	; 0xca
 8006f16:	22c0      	movs	r2, #192	; 0xc0
 8006f18:	4628      	mov	r0, r5
 8006f1a:	f7fe fb41 	bl	80055a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_BORDER_WIDTH, scale_border_width, lv_style_int_t, _int, scalar)
 8006f1e:	4631      	mov	r1, r6
    shot->scale_width = lv_obj_get_style_scale_width(obj, part);
 8006f20:	f8a4 00cc 	strh.w	r0, [r4, #204]	; 0xcc
 8006f24:	22c1      	movs	r2, #193	; 0xc1
 8006f26:	4628      	mov	r0, r5
 8006f28:	f7fe fb3a 	bl	80055a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_BORDER_WIDTH, scale_end_border_width, lv_style_int_t, _int, scalar)
 8006f2c:	4631      	mov	r1, r6
    shot->scale_border_width = lv_obj_get_style_scale_border_width(obj, part);
 8006f2e:	f8a4 00ce 	strh.w	r0, [r4, #206]	; 0xce
 8006f32:	22c2      	movs	r2, #194	; 0xc2
 8006f34:	4628      	mov	r0, r5
 8006f36:	f7fe fb33 	bl	80055a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_LINE_WIDTH, scale_end_line_width, lv_style_int_t, _int, scalar)
 8006f3a:	4631      	mov	r1, r6
    shot->scale_end_border_width = lv_obj_get_style_scale_end_border_width(obj, part);
 8006f3c:	f8a4 00d0 	strh.w	r0, [r4, #208]	; 0xd0
 8006f40:	22c3      	movs	r2, #195	; 0xc3
 8006f42:	4628      	mov	r0, r5
 8006f44:	f7fe fb2c 	bl	80055a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_GRAD_COLOR, scale_grad_color, lv_color_t, _color, nonscalar)
 8006f48:	4631      	mov	r1, r6
    shot->scale_end_line_width = lv_obj_get_style_scale_end_line_width(obj, part);
 8006f4a:	f8a4 00d2 	strh.w	r0, [r4, #210]	; 0xd2
 8006f4e:	22c9      	movs	r2, #201	; 0xc9
 8006f50:	4628      	mov	r0, r5
 8006f52:	f7fd ff61 	bl	8004e18 <_lv_obj_get_style_color>
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_COLOR, scale_end_color, lv_color_t, _color, nonscalar)
 8006f56:	4631      	mov	r1, r6
    shot->scale_grad_color = lv_obj_get_style_scale_grad_color(obj, part);
 8006f58:	f8c4 00d4 	str.w	r0, [r4, #212]	; 0xd4
 8006f5c:	22ca      	movs	r2, #202	; 0xca
 8006f5e:	4628      	mov	r0, r5
 8006f60:	f7fd ff5a 	bl	8004e18 <_lv_obj_get_style_color>
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
 8006f64:	4631      	mov	r1, r6
    shot->scale_end_color = lv_obj_get_style_scale_end_color(obj, part);
 8006f66:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
 8006f6a:	f248 020c 	movw	r2, #32780	; 0x800c
 8006f6e:	4628      	mov	r0, r5
 8006f70:	f7fe fa5c 	bl	800542c <_lv_obj_get_style_opa>
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
 8006f74:	4631      	mov	r1, r6
    shot->opa_scale = lv_obj_get_style_opa_scale(obj, part);
 8006f76:	f884 00dc 	strb.w	r0, [r4, #220]	; 0xdc
 8006f7a:	2202      	movs	r2, #2
 8006f7c:	4628      	mov	r0, r5
 8006f7e:	f7fe fb0f 	bl	80055a0 <_lv_obj_get_style_int>
 8006f82:	1e03      	subs	r3, r0, #0
    shot->clip_corner = lv_obj_get_style_clip_corner(obj, part);
 8006f84:	f894 c0dd 	ldrb.w	ip, [r4, #221]	; 0xdd
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
 8006f88:	4631      	mov	r1, r6
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
 8006f8a:	bf18      	it	ne
 8006f8c:	2301      	movne	r3, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
 8006f8e:	2233      	movs	r2, #51	; 0x33
 8006f90:	4628      	mov	r0, r5
 8006f92:	f363 0c00 	bfi	ip, r3, #0, #1
 8006f96:	f884 c0dd 	strb.w	ip, [r4, #221]	; 0xdd
 8006f9a:	f7fe fb01 	bl	80055a0 <_lv_obj_get_style_int>
 8006f9e:	4603      	mov	r3, r0
    shot->border_post  = lv_obj_get_style_border_post(obj, part);
 8006fa0:	f894 20dd 	ldrb.w	r2, [r4, #221]	; 0xdd

    _lv_obj_disable_style_caching(obj, false);
 8006fa4:	4628      	mov	r0, r5
 8006fa6:	3b00      	subs	r3, #0
 8006fa8:	f04f 0100 	mov.w	r1, #0
 8006fac:	bf18      	it	ne
 8006fae:	2301      	movne	r3, #1
    shot->border_post  = lv_obj_get_style_border_post(obj, part);
 8006fb0:	f363 0241 	bfi	r2, r3, #1, #1
 8006fb4:	f884 20dd 	strb.w	r2, [r4, #221]	; 0xdd
    _lv_obj_disable_style_caching(obj, false);
 8006fb8:	f7fc fb08 	bl	80035cc <_lv_obj_disable_style_caching>
    list->skip_trans = trans_ori;
 8006fbc:	797b      	ldrb	r3, [r7, #5]
 8006fbe:	f368 0300 	bfi	r3, r8, #0, #1
 8006fc2:	717b      	strb	r3, [r7, #5]
}
 8006fc4:	b003      	add	sp, #12
 8006fc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(part == LV_OBJ_PART_MAIN) return &((lv_obj_t *)obj)->style_list;
 8006fca:	f105 0728 	add.w	r7, r5, #40	; 0x28
 8006fce:	e724      	b.n	8006e1a <style_snapshot+0x6a>
 8006fd0:	462f      	mov	r7, r5
 8006fd2:	e722      	b.n	8006e1a <style_snapshot+0x6a>
    if(res != LV_RES_OK) return NULL;
 8006fd4:	4647      	mov	r7, r8
 8006fd6:	e720      	b.n	8006e1a <style_snapshot+0x6a>

08006fd8 <lv_obj_set_state.part.0>:
void lv_obj_set_state(lv_obj_t * obj, lv_state_t new_state)
 8006fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_state_t prev_state = obj->state;
 8006fdc:	2400      	movs	r4, #0
void lv_obj_set_state(lv_obj_t * obj, lv_state_t new_state)
 8006fde:	b0fd      	sub	sp, #500	; 0x1f4
 8006fe0:	4607      	mov	r7, r0
 8006fe2:	468b      	mov	fp, r1
        style_snapshot(obj, part, &shot_pre);
 8006fe4:	4626      	mov	r6, r4
    lv_state_t prev_state = obj->state;
 8006fe6:	f890 803d 	ldrb.w	r8, [r0, #61]	; 0x3d
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
 8006fea:	b2e5      	uxtb	r5, r4
    style_snapshot_res_t cmp_res = STYLE_COMPARE_SAME;
 8006fec:	9400      	str	r4, [sp, #0]
    if(part == LV_OBJ_PART_MAIN) return &((lv_obj_t *)obj)->style_list;
 8006fee:	2c00      	cmp	r4, #0
 8006ff0:	f000 80ad 	beq.w	800714e <lv_obj_set_state.part.0+0x176>
    if(obj->signal_cb) res = obj->signal_cb(obj, signal, param);
 8006ff4:	69fb      	ldr	r3, [r7, #28]
    info.part = part;
 8006ff6:	f88d 5110 	strb.w	r5, [sp, #272]	; 0x110
    info.result = NULL;
 8006ffa:	9645      	str	r6, [sp, #276]	; 0x114
    if(obj->signal_cb) res = obj->signal_cb(obj, signal, param);
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	f000 80c4 	beq.w	800718a <lv_obj_set_state.part.0+0x1b2>
 8007002:	aa44      	add	r2, sp, #272	; 0x110
 8007004:	2108      	movs	r1, #8
 8007006:	4638      	mov	r0, r7
 8007008:	4798      	blx	r3
    if(res != LV_RES_OK) return NULL;
 800700a:	2801      	cmp	r0, #1
 800700c:	f040 80bd 	bne.w	800718a <lv_obj_set_state.part.0+0x1b2>
    return info.result;
 8007010:	9b45      	ldr	r3, [sp, #276]	; 0x114
        if(style_list == NULL) break;   /*No more style lists*/
 8007012:	2b00      	cmp	r3, #0
 8007014:	f000 80b9 	beq.w	800718a <lv_obj_set_state.part.0+0x1b2>
        style_snapshot(obj, part, &shot_pre);
 8007018:	aa0c      	add	r2, sp, #48	; 0x30
 800701a:	4629      	mov	r1, r5
 800701c:	4638      	mov	r0, r7
        obj->state = prev_state;
 800701e:	f887 803d 	strb.w	r8, [r7, #61]	; 0x3d
        style_snapshot(obj, part, &shot_pre);
 8007022:	f7ff fec5 	bl	8006db0 <style_snapshot>
        style_snapshot(obj, part, &shot_post);
 8007026:	aa44      	add	r2, sp, #272	; 0x110
 8007028:	4629      	mov	r1, r5
 800702a:	4638      	mov	r0, r7
        obj->state = new_state;
 800702c:	f887 b03d 	strb.w	fp, [r7, #61]	; 0x3d
        style_snapshot(obj, part, &shot_post);
 8007030:	f7ff febe 	bl	8006db0 <style_snapshot>

static style_snapshot_res_t style_snapshot_compare(style_snapshot_t * shot1, style_snapshot_t * shot2)
{
    if(memcmp(shot1, shot2, sizeof(style_snapshot_t)) == 0) return STYLE_COMPARE_SAME;
 8007034:	22e0      	movs	r2, #224	; 0xe0
 8007036:	a944      	add	r1, sp, #272	; 0x110
 8007038:	a80c      	add	r0, sp, #48	; 0x30
 800703a:	f017 f863 	bl	801e104 <memcmp>
 800703e:	2800      	cmp	r0, #0
 8007040:	d07e      	beq.n	8007140 <lv_obj_set_state.part.0+0x168>

    if(shot1->pad_top != shot2->pad_top) return STYLE_COMPARE_DIFF;
 8007042:	f9bd 20e0 	ldrsh.w	r2, [sp, #224]	; 0xe0
 8007046:	f9bd 31c0 	ldrsh.w	r3, [sp, #448]	; 0x1c0
 800704a:	429a      	cmp	r2, r3
 800704c:	f040 809b 	bne.w	8007186 <lv_obj_set_state.part.0+0x1ae>
    if(shot1->pad_bottom != shot2->pad_bottom) return STYLE_COMPARE_DIFF;
 8007050:	f9bd 20e2 	ldrsh.w	r2, [sp, #226]	; 0xe2
 8007054:	f9bd 31c2 	ldrsh.w	r3, [sp, #450]	; 0x1c2
 8007058:	429a      	cmp	r2, r3
 800705a:	f040 8094 	bne.w	8007186 <lv_obj_set_state.part.0+0x1ae>
    if(shot1->pad_left != shot2->pad_right) return STYLE_COMPARE_DIFF;
 800705e:	f9bd 21c4 	ldrsh.w	r2, [sp, #452]	; 0x1c4
 8007062:	f9bd 30e6 	ldrsh.w	r3, [sp, #230]	; 0xe6
 8007066:	4293      	cmp	r3, r2
 8007068:	f040 808d 	bne.w	8007186 <lv_obj_set_state.part.0+0x1ae>
    if(shot1->pad_right != shot2->pad_right) return STYLE_COMPARE_DIFF;
 800706c:	f9bd 20e4 	ldrsh.w	r2, [sp, #228]	; 0xe4
 8007070:	429a      	cmp	r2, r3
 8007072:	f040 8088 	bne.w	8007186 <lv_obj_set_state.part.0+0x1ae>
    if(shot1->pad_top != shot2->pad_top) return STYLE_COMPARE_DIFF;
    if(shot1->pad_inner != shot2->pad_inner) return STYLE_COMPARE_DIFF;
 8007076:	f9bd 20e8 	ldrsh.w	r2, [sp, #232]	; 0xe8
 800707a:	f9bd 31c8 	ldrsh.w	r3, [sp, #456]	; 0x1c8
 800707e:	429a      	cmp	r2, r3
 8007080:	f040 8081 	bne.w	8007186 <lv_obj_set_state.part.0+0x1ae>
    if(shot1->margin_top != shot2->margin_top) return STYLE_COMPARE_DIFF;
 8007084:	f9bd 20ea 	ldrsh.w	r2, [sp, #234]	; 0xea
 8007088:	f9bd 31ca 	ldrsh.w	r3, [sp, #458]	; 0x1ca
 800708c:	429a      	cmp	r2, r3
 800708e:	d17a      	bne.n	8007186 <lv_obj_set_state.part.0+0x1ae>
    if(shot1->margin_bottom != shot2->margin_bottom) return STYLE_COMPARE_DIFF;
 8007090:	f9bd 20ec 	ldrsh.w	r2, [sp, #236]	; 0xec
 8007094:	f9bd 31cc 	ldrsh.w	r3, [sp, #460]	; 0x1cc
 8007098:	429a      	cmp	r2, r3
 800709a:	d174      	bne.n	8007186 <lv_obj_set_state.part.0+0x1ae>
    if(shot1->margin_left != shot2->margin_right) return STYLE_COMPARE_DIFF;
 800709c:	f9bd 21d0 	ldrsh.w	r2, [sp, #464]	; 0x1d0
 80070a0:	f9bd 30ee 	ldrsh.w	r3, [sp, #238]	; 0xee
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d16e      	bne.n	8007186 <lv_obj_set_state.part.0+0x1ae>
    if(shot1->margin_right != shot2->margin_right) return STYLE_COMPARE_DIFF;
 80070a8:	f9bd 20f0 	ldrsh.w	r2, [sp, #240]	; 0xf0
 80070ac:	429a      	cmp	r2, r3
 80070ae:	d16a      	bne.n	8007186 <lv_obj_set_state.part.0+0x1ae>
    if(shot1->margin_top != shot2->margin_top) return STYLE_COMPARE_DIFF;
    if(shot1->transform_width != shot2->transform_width) return STYLE_COMPARE_DIFF;
 80070b0:	f9bd 20f4 	ldrsh.w	r2, [sp, #244]	; 0xf4
 80070b4:	f9bd 31d4 	ldrsh.w	r3, [sp, #468]	; 0x1d4
 80070b8:	429a      	cmp	r2, r3
 80070ba:	d164      	bne.n	8007186 <lv_obj_set_state.part.0+0x1ae>
    if(shot1->transform_height != shot2->transform_height) return STYLE_COMPARE_DIFF;
 80070bc:	f9bd 20f6 	ldrsh.w	r2, [sp, #246]	; 0xf6
 80070c0:	f9bd 31d6 	ldrsh.w	r3, [sp, #470]	; 0x1d6
 80070c4:	429a      	cmp	r2, r3
 80070c6:	d15e      	bne.n	8007186 <lv_obj_set_state.part.0+0x1ae>
    if(shot1->transform_angle != shot2->transform_angle) return STYLE_COMPARE_DIFF;
 80070c8:	f9bd 20f8 	ldrsh.w	r2, [sp, #248]	; 0xf8
 80070cc:	f9bd 31d8 	ldrsh.w	r3, [sp, #472]	; 0x1d8
 80070d0:	429a      	cmp	r2, r3
 80070d2:	d158      	bne.n	8007186 <lv_obj_set_state.part.0+0x1ae>
    if(shot1->transform_zoom != shot2->transform_zoom) return STYLE_COMPARE_DIFF;
 80070d4:	f9bd 20fa 	ldrsh.w	r2, [sp, #250]	; 0xfa
 80070d8:	f9bd 31da 	ldrsh.w	r3, [sp, #474]	; 0x1da
 80070dc:	429a      	cmp	r2, r3
 80070de:	d152      	bne.n	8007186 <lv_obj_set_state.part.0+0x1ae>
    if(shot1->rect.outline_width != shot2->rect.outline_width) return STYLE_COMPARE_DIFF;
 80070e0:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 80070e4:	f9bd 3134 	ldrsh.w	r3, [sp, #308]	; 0x134
 80070e8:	429a      	cmp	r2, r3
 80070ea:	d14c      	bne.n	8007186 <lv_obj_set_state.part.0+0x1ae>
    if(shot1->rect.outline_pad != shot2->rect.outline_pad) return STYLE_COMPARE_DIFF;
 80070ec:	f9bd 2056 	ldrsh.w	r2, [sp, #86]	; 0x56
 80070f0:	f9bd 3136 	ldrsh.w	r3, [sp, #310]	; 0x136
 80070f4:	429a      	cmp	r2, r3
 80070f6:	d146      	bne.n	8007186 <lv_obj_set_state.part.0+0x1ae>
    if(shot1->rect.value_font != shot2->rect.value_font) return STYLE_COMPARE_DIFF;
 80070f8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80070fa:	9b58      	ldr	r3, [sp, #352]	; 0x160
 80070fc:	429a      	cmp	r2, r3
 80070fe:	d142      	bne.n	8007186 <lv_obj_set_state.part.0+0x1ae>
    if(shot1->rect.value_align != shot2->rect.value_align) return STYLE_COMPARE_DIFF;
 8007100:	f89d 2094 	ldrb.w	r2, [sp, #148]	; 0x94
 8007104:	f89d 3174 	ldrb.w	r3, [sp, #372]	; 0x174
 8007108:	429a      	cmp	r2, r3
 800710a:	d13c      	bne.n	8007186 <lv_obj_set_state.part.0+0x1ae>
    if(shot1->rect.value_font != shot2->rect.value_font) return STYLE_COMPARE_DIFF;
    if(shot1->rect.shadow_spread != shot2->rect.shadow_spread) return STYLE_COMPARE_DIFF;
 800710c:	f9bd 2066 	ldrsh.w	r2, [sp, #102]	; 0x66
 8007110:	f9bd 3146 	ldrsh.w	r3, [sp, #326]	; 0x146
 8007114:	429a      	cmp	r2, r3
 8007116:	d136      	bne.n	8007186 <lv_obj_set_state.part.0+0x1ae>
    if(shot1->rect.shadow_width != shot2->rect.shadow_width) return STYLE_COMPARE_DIFF;
 8007118:	f9bd 2060 	ldrsh.w	r2, [sp, #96]	; 0x60
 800711c:	f9bd 3140 	ldrsh.w	r3, [sp, #320]	; 0x140
 8007120:	429a      	cmp	r2, r3
 8007122:	d130      	bne.n	8007186 <lv_obj_set_state.part.0+0x1ae>
    if(shot1->rect.shadow_ofs_x != shot2->rect.shadow_ofs_x) return STYLE_COMPARE_DIFF;
 8007124:	f9bd 2062 	ldrsh.w	r2, [sp, #98]	; 0x62
 8007128:	f9bd 3142 	ldrsh.w	r3, [sp, #322]	; 0x142
 800712c:	429a      	cmp	r2, r3
 800712e:	d12a      	bne.n	8007186 <lv_obj_set_state.part.0+0x1ae>
    if(shot1->rect.shadow_ofs_y != shot2->rect.shadow_ofs_y) return STYLE_COMPARE_DIFF;
 8007130:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 8007134:	f9bd 3144 	ldrsh.w	r3, [sp, #324]	; 0x144
 8007138:	429a      	cmp	r2, r3
 800713a:	d124      	bne.n	8007186 <lv_obj_set_state.part.0+0x1ae>
            cmp_res = STYLE_COMPARE_VISUAL_DIFF;
 800713c:	2301      	movs	r3, #1
 800713e:	9300      	str	r3, [sp, #0]
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
 8007140:	2d3f      	cmp	r5, #63	; 0x3f
 8007142:	d022      	beq.n	800718a <lv_obj_set_state.part.0+0x1b2>
 8007144:	3401      	adds	r4, #1
 8007146:	b2e5      	uxtb	r5, r4
    if(part == LV_OBJ_PART_MAIN) return &((lv_obj_t *)obj)->style_list;
 8007148:	2c00      	cmp	r4, #0
 800714a:	f47f af53 	bne.w	8006ff4 <lv_obj_set_state.part.0+0x1c>
        style_snapshot(obj, part, &shot_pre);
 800714e:	aa0c      	add	r2, sp, #48	; 0x30
 8007150:	4621      	mov	r1, r4
 8007152:	4638      	mov	r0, r7
        obj->state = prev_state;
 8007154:	f887 803d 	strb.w	r8, [r7, #61]	; 0x3d
        style_snapshot(obj, part, &shot_pre);
 8007158:	f7ff fe2a 	bl	8006db0 <style_snapshot>
        style_snapshot(obj, part, &shot_post);
 800715c:	aa44      	add	r2, sp, #272	; 0x110
 800715e:	4621      	mov	r1, r4
 8007160:	4638      	mov	r0, r7
        obj->state = new_state;
 8007162:	f887 b03d 	strb.w	fp, [r7, #61]	; 0x3d
        style_snapshot(obj, part, &shot_post);
 8007166:	f7ff fe23 	bl	8006db0 <style_snapshot>
    if(memcmp(shot1, shot2, sizeof(style_snapshot_t)) == 0) return STYLE_COMPARE_SAME;
 800716a:	22e0      	movs	r2, #224	; 0xe0
 800716c:	a944      	add	r1, sp, #272	; 0x110
 800716e:	a80c      	add	r0, sp, #48	; 0x30
 8007170:	f016 ffc8 	bl	801e104 <memcmp>
 8007174:	2800      	cmp	r0, #0
 8007176:	d0e5      	beq.n	8007144 <lv_obj_set_state.part.0+0x16c>
    if(shot1->pad_top != shot2->pad_top) return STYLE_COMPARE_DIFF;
 8007178:	f9bd 20e0 	ldrsh.w	r2, [sp, #224]	; 0xe0
 800717c:	f9bd 31c0 	ldrsh.w	r3, [sp, #448]	; 0x1c0
 8007180:	429a      	cmp	r2, r3
 8007182:	f43f af65 	beq.w	8007050 <lv_obj_set_state.part.0+0x78>
            cmp_res = STYLE_COMPARE_DIFF;
 8007186:	2302      	movs	r3, #2
 8007188:	9300      	str	r3, [sp, #0]
    if(cmp_res == STYLE_COMPARE_SAME) {
 800718a:	9b00      	ldr	r3, [sp, #0]
    obj->state = new_state;
 800718c:	f887 b03d 	strb.w	fp, [r7, #61]	; 0x3d
    if(cmp_res == STYLE_COMPARE_SAME) {
 8007190:	2b00      	cmp	r3, #0
 8007192:	f000 80ba 	beq.w	800730a <lv_obj_set_state.part.0+0x332>
 8007196:	f04f 0a00 	mov.w	sl, #0
 * @param a pointer to an initialized `lv_anim_t` variable
 * @param ready_cb a function call when the animation is ready
 */
static inline void lv_anim_set_ready_cb(lv_anim_t * a, lv_anim_ready_cb_t ready_cb)
{
    a->ready_cb = ready_cb;
 800719a:	f8cd 8004 	str.w	r8, [sp, #4]
 800719e:	f8cd b008 	str.w	fp, [sp, #8]
 80071a2:	4654      	mov	r4, sl
 80071a4:	b2e5      	uxtb	r5, r4
    if(part == LV_OBJ_PART_MAIN) return &((lv_obj_t *)obj)->style_list;
 80071a6:	2c00      	cmp	r4, #0
 80071a8:	f000 80b2 	beq.w	8007310 <lv_obj_set_state.part.0+0x338>
    info.result = NULL;
 80071ac:	2200      	movs	r2, #0
    if(obj->signal_cb) res = obj->signal_cb(obj, signal, param);
 80071ae:	69fb      	ldr	r3, [r7, #28]
    info.part = part;
 80071b0:	f88d 5110 	strb.w	r5, [sp, #272]	; 0x110
    info.result = NULL;
 80071b4:	9245      	str	r2, [sp, #276]	; 0x114
    if(obj->signal_cb) res = obj->signal_cb(obj, signal, param);
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	f000 80a4 	beq.w	8007304 <lv_obj_set_state.part.0+0x32c>
 80071bc:	f50d 7a88 	add.w	sl, sp, #272	; 0x110
 80071c0:	2108      	movs	r1, #8
 80071c2:	4638      	mov	r0, r7
 80071c4:	4652      	mov	r2, sl
 80071c6:	4798      	blx	r3
    if(res != LV_RES_OK) return NULL;
 80071c8:	2801      	cmp	r0, #1
 80071ca:	f040 809b 	bne.w	8007304 <lv_obj_set_state.part.0+0x32c>
    return info.result;
 80071ce:	f8dd 9114 	ldr.w	r9, [sp, #276]	; 0x114
        if(style_list == NULL) break;   /*No more style lists*/
 80071d2:	f1b9 0f00 	cmp.w	r9, #0
 80071d6:	f000 8095 	beq.w	8007304 <lv_obj_set_state.part.0+0x32c>
        if(style_list->ignore_trans) continue;
 80071da:	f899 6005 	ldrb.w	r6, [r9, #5]
 80071de:	f016 0602 	ands.w	r6, r6, #2
 80071e2:	f040 808b 	bne.w	80072fc <lv_obj_set_state.part.0+0x324>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int, scalar)
 80071e6:	22b0      	movs	r2, #176	; 0xb0
 80071e8:	4629      	mov	r1, r5
 80071ea:	4638      	mov	r0, r7
 80071ec:	f7fe f9d8 	bl	80055a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_DELAY, transition_delay, lv_style_int_t, _int, scalar)
 80071f0:	22b1      	movs	r2, #177	; 0xb1
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int, scalar)
 80071f2:	4683      	mov	fp, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_DELAY, transition_delay, lv_style_int_t, _int, scalar)
 80071f4:	4629      	mov	r1, r5
 80071f6:	4638      	mov	r0, r7
 80071f8:	f7fe f9d2 	bl	80055a0 <_lv_obj_get_style_int>
    if(obj->signal_cb) res = obj->signal_cb(obj, signal, param);
 80071fc:	69fb      	ldr	r3, [r7, #28]
 80071fe:	4680      	mov	r8, r0
    info.part = part;
 8007200:	f88d 5110 	strb.w	r5, [sp, #272]	; 0x110
    info.result = NULL;
 8007204:	9645      	str	r6, [sp, #276]	; 0x114
    if(obj->signal_cb) res = obj->signal_cb(obj, signal, param);
 8007206:	2b00      	cmp	r3, #0
 8007208:	f000 80a6 	beq.w	8007358 <lv_obj_set_state.part.0+0x380>
 800720c:	4652      	mov	r2, sl
 800720e:	2108      	movs	r1, #8
 8007210:	4638      	mov	r0, r7
 8007212:	4798      	blx	r3
    if(res != LV_RES_OK) return NULL;
 8007214:	2801      	cmp	r0, #1
 8007216:	bf08      	it	eq
 8007218:	9e45      	ldreq	r6, [sp, #276]	; 0x114
        if(!list->ignore_cache && list->style_cnt > 0) {
 800721a:	7973      	ldrb	r3, [r6, #5]
 800721c:	0719      	lsls	r1, r3, #28
 800721e:	d403      	bmi.n	8007228 <lv_obj_set_state.part.0+0x250>
 8007220:	7932      	ldrb	r2, [r6, #4]
 8007222:	0692      	lsls	r2, r2, #26
 8007224:	f040 808a 	bne.w	800733c <lv_obj_set_state.part.0+0x364>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8007228:	4638      	mov	r0, r7
 800722a:	f00d facd 	bl	80147c8 <lv_debug_check_null>
 800722e:	b928      	cbnz	r0, 800723c <lv_obj_set_state.part.0+0x264>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8007230:	4603      	mov	r3, r0
 8007232:	463a      	mov	r2, r7
 8007234:	48c8      	ldr	r0, [pc, #800]	; (8007558 <lv_obj_set_state.part.0+0x580>)
 8007236:	f00d facb 	bl	80147d0 <lv_debug_log_error>
 800723a:	e7fe      	b.n	800723a <lv_obj_set_state.part.0+0x262>
        prop = (uint16_t)prop_ori + ((uint16_t)state << LV_STYLE_STATE_POS);
 800723c:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
        res = _lv_style_list_get_ptr(list, prop, &value_act);
 8007240:	4630      	mov	r0, r6
 8007242:	4652      	mov	r2, sl
        prop = (uint16_t)prop_ori + ((uint16_t)state << LV_STYLE_STATE_POS);
 8007244:	021e      	lsls	r6, r3, #8
 8007246:	36be      	adds	r6, #190	; 0xbe
 8007248:	b2b6      	uxth	r6, r6
        res = _lv_style_list_get_ptr(list, prop, &value_act);
 800724a:	4631      	mov	r1, r6
 800724c:	f002 fc24 	bl	8009a98 <_lv_style_list_get_ptr>
        if(res == LV_RES_OK)  return value_act;
 8007250:	2801      	cmp	r0, #1
 8007252:	f000 821c 	beq.w	800768e <lv_obj_set_state.part.0+0x6b6>
    prop = prop & (~LV_STYLE_STATE_MASK);
 8007256:	f426 46fe 	bic.w	r6, r6, #32512	; 0x7f00
    switch(prop) {
 800725a:	2ebe      	cmp	r6, #190	; 0xbe
    prop = prop & (~LV_STYLE_STATE_MASK);
 800725c:	b2b2      	uxth	r2, r6
    switch(prop) {
 800725e:	f000 8081 	beq.w	8007364 <lv_obj_set_state.part.0+0x38c>
 8007262:	f248 038e 	movw	r3, #32910	; 0x808e
 8007266:	429a      	cmp	r2, r3
 8007268:	f000 8214 	beq.w	8007694 <lv_obj_set_state.part.0+0x6bc>
 800726c:	2300      	movs	r3, #0
 800726e:	9306      	str	r3, [sp, #24]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_1, transition_prop_1, lv_style_int_t, _int, scalar)
 8007270:	22b2      	movs	r2, #178	; 0xb2
 8007272:	4629      	mov	r1, r5
 8007274:	4638      	mov	r0, r7
 8007276:	f7fe f993 	bl	80055a0 <_lv_obj_get_style_int>
 800727a:	4603      	mov	r3, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_2, transition_prop_2, lv_style_int_t, _int, scalar)
 800727c:	22b3      	movs	r2, #179	; 0xb3
 800727e:	4629      	mov	r1, r5
 8007280:	4638      	mov	r0, r7
        props[0] = lv_obj_get_style_transition_prop_1(obj, part);
 8007282:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 8007286:	f7fe f98b 	bl	80055a0 <_lv_obj_get_style_int>
 800728a:	4603      	mov	r3, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_3, transition_prop_3, lv_style_int_t, _int, scalar)
 800728c:	22b4      	movs	r2, #180	; 0xb4
 800728e:	4629      	mov	r1, r5
 8007290:	4638      	mov	r0, r7
        props[1] = lv_obj_get_style_transition_prop_2(obj, part);
 8007292:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8007296:	f7fe f983 	bl	80055a0 <_lv_obj_get_style_int>
 800729a:	4603      	mov	r3, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_4, transition_prop_4, lv_style_int_t, _int, scalar)
 800729c:	22b5      	movs	r2, #181	; 0xb5
 800729e:	4629      	mov	r1, r5
 80072a0:	4638      	mov	r0, r7
        props[2] = lv_obj_get_style_transition_prop_3(obj, part);
 80072a2:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 80072a6:	f7fe f97b 	bl	80055a0 <_lv_obj_get_style_int>
 80072aa:	4603      	mov	r3, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_5, transition_prop_5, lv_style_int_t, _int, scalar)
 80072ac:	22b6      	movs	r2, #182	; 0xb6
 80072ae:	4629      	mov	r1, r5
 80072b0:	4638      	mov	r0, r7
        props[3] = lv_obj_get_style_transition_prop_4(obj, part);
 80072b2:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 80072b6:	f7fe f973 	bl	80055a0 <_lv_obj_get_style_int>
 80072ba:	4603      	mov	r3, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int, scalar)
 80072bc:	22b7      	movs	r2, #183	; 0xb7
 80072be:	4629      	mov	r1, r5
 80072c0:	4638      	mov	r0, r7
        props[4] = lv_obj_get_style_transition_prop_5(obj, part);
 80072c2:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 80072c6:	f7fe f96b 	bl	80055a0 <_lv_obj_get_style_int>
 80072ca:	ab0c      	add	r3, sp, #48	; 0x30
        props[5] = lv_obj_get_style_transition_prop_6(obj, part);
 80072cc:	9403      	str	r4, [sp, #12]
 80072ce:	464c      	mov	r4, r9
 80072d0:	46a9      	mov	r9, r5
 80072d2:	f8ad 003a 	strh.w	r0, [sp, #58]	; 0x3a
 80072d6:	e9cd b807 	strd	fp, r8, [sp, #28]
 80072da:	4698      	mov	r8, r3
            if(props[i] != 0) {
 80072dc:	f838 6b02 	ldrh.w	r6, [r8], #2
 80072e0:	2e00      	cmp	r6, #0
 80072e2:	d142      	bne.n	800736a <lv_obj_set_state.part.0+0x392>
        for(i = 0; i < LV_STYLE_TRANS_NUM_MAX; i++) {
 80072e4:	ab0f      	add	r3, sp, #60	; 0x3c
 80072e6:	4543      	cmp	r3, r8
 80072e8:	d1f8      	bne.n	80072dc <lv_obj_set_state.part.0+0x304>
        if(cmp_res == STYLE_COMPARE_DIFF) lv_obj_refresh_style(obj, part, LV_STYLE_PROP_ALL);
 80072ea:	9b00      	ldr	r3, [sp, #0]
 80072ec:	9c03      	ldr	r4, [sp, #12]
 80072ee:	2b02      	cmp	r3, #2
 80072f0:	f000 81d4 	beq.w	800769c <lv_obj_set_state.part.0+0x6c4>
            invalidate_style_cache(obj, part, LV_STYLE_PROP_ALL);
 80072f4:	21ff      	movs	r1, #255	; 0xff
 80072f6:	4638      	mov	r0, r7
 80072f8:	f7fe fc92 	bl	8005c20 <invalidate_style_cache.isra.0>
    for(part = 0; part < _LV_OBJ_PART_REAL_LAST; part++) {
 80072fc:	3401      	adds	r4, #1
 80072fe:	2c40      	cmp	r4, #64	; 0x40
 8007300:	f47f af50 	bne.w	80071a4 <lv_obj_set_state.part.0+0x1cc>
    if(cmp_res == STYLE_COMPARE_VISUAL_DIFF) {
 8007304:	9b00      	ldr	r3, [sp, #0]
 8007306:	2b01      	cmp	r3, #1
 8007308:	d028      	beq.n	800735c <lv_obj_set_state.part.0+0x384>
}
 800730a:	b07d      	add	sp, #500	; 0x1f4
 800730c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(style_list->ignore_trans) continue;
 8007310:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007314:	0798      	lsls	r0, r3, #30
 8007316:	d4f1      	bmi.n	80072fc <lv_obj_set_state.part.0+0x324>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int, scalar)
 8007318:	22b0      	movs	r2, #176	; 0xb0
 800731a:	4621      	mov	r1, r4
 800731c:	4638      	mov	r0, r7
    if(part == LV_OBJ_PART_MAIN) return &((lv_obj_t *)obj)->style_list;
 800731e:	f107 0628 	add.w	r6, r7, #40	; 0x28
 8007322:	f7fe f93d 	bl	80055a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_DELAY, transition_delay, lv_style_int_t, _int, scalar)
 8007326:	22b1      	movs	r2, #177	; 0xb1
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int, scalar)
 8007328:	4683      	mov	fp, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_DELAY, transition_delay, lv_style_int_t, _int, scalar)
 800732a:	4621      	mov	r1, r4
 800732c:	4638      	mov	r0, r7
 800732e:	46b1      	mov	r9, r6
 8007330:	f7fe f936 	bl	80055a0 <_lv_obj_get_style_int>
 8007334:	f50d 7a88 	add.w	sl, sp, #272	; 0x110
 8007338:	4680      	mov	r8, r0
 800733a:	e76e      	b.n	800721a <lv_obj_set_state.part.0+0x242>
            if(!list->valid_cache) update_style_cache((lv_obj_t *)parent, part, prop  & (~LV_STYLE_STATE_MASK));
 800733c:	075b      	lsls	r3, r3, #29
 800733e:	f53f af73 	bmi.w	8007228 <lv_obj_set_state.part.0+0x250>
    if(style_prop_is_cacheble(prop) == false) return;
 8007342:	20be      	movs	r0, #190	; 0xbe
 8007344:	f7fb ff3c 	bl	80031c0 <style_prop_is_cacheble>
 8007348:	2800      	cmp	r0, #0
 800734a:	f43f af6d 	beq.w	8007228 <lv_obj_set_state.part.0+0x250>
 800734e:	4629      	mov	r1, r5
 8007350:	4638      	mov	r0, r7
 8007352:	f7fd fe85 	bl	8005060 <update_style_cache.part.0>
 8007356:	e767      	b.n	8007228 <lv_obj_set_state.part.0+0x250>
 8007358:	461e      	mov	r6, r3
 800735a:	e75e      	b.n	800721a <lv_obj_set_state.part.0+0x242>
        lv_obj_invalidate(obj);
 800735c:	4638      	mov	r0, r7
 800735e:	f7fc fc17 	bl	8003b90 <lv_obj_invalidate>
 8007362:	e7d2      	b.n	800730a <lv_obj_set_state.part.0+0x332>
            return &lv_anim_path_def;
 8007364:	4b7d      	ldr	r3, [pc, #500]	; (800755c <lv_obj_set_state.part.0+0x584>)
 8007366:	9306      	str	r3, [sp, #24]
 8007368:	e782      	b.n	8007270 <lv_obj_set_state.part.0+0x298>
                _lv_style_list_add_trans_style(style_list);
 800736a:	4620      	mov	r0, r4
 800736c:	f002 f912 	bl	8009594 <_lv_style_list_add_trans_style>
    if(part == LV_OBJ_PART_MAIN) return &((lv_obj_t *)obj)->style_list;
 8007370:	9b03      	ldr	r3, [sp, #12]
 8007372:	2b00      	cmp	r3, #0
 8007374:	f000 80a3 	beq.w	80074be <lv_obj_set_state.part.0+0x4e6>
    info.result = NULL;
 8007378:	2500      	movs	r5, #0
    if(obj->signal_cb) res = obj->signal_cb(obj, signal, param);
 800737a:	69fb      	ldr	r3, [r7, #28]
    info.part = part;
 800737c:	f88d 9110 	strb.w	r9, [sp, #272]	; 0x110
    info.result = NULL;
 8007380:	9545      	str	r5, [sp, #276]	; 0x114
    if(obj->signal_cb) res = obj->signal_cb(obj, signal, param);
 8007382:	2b00      	cmp	r3, #0
 8007384:	f000 8181 	beq.w	800768a <lv_obj_set_state.part.0+0x6b2>
 8007388:	4652      	mov	r2, sl
 800738a:	2108      	movs	r1, #8
 800738c:	4638      	mov	r0, r7
 800738e:	4798      	blx	r3
    if(res != LV_RES_OK) return NULL;
 8007390:	2801      	cmp	r0, #1
 8007392:	d100      	bne.n	8007396 <lv_obj_set_state.part.0+0x3be>
 8007394:	9d45      	ldr	r5, [sp, #276]	; 0x114
    lv_style_t * style_trans = _lv_style_list_get_transition_style(style_list);
 8007396:	4628      	mov	r0, r5
 8007398:	f002 f8f2 	bl	8009580 <_lv_style_list_get_transition_style>
    bool cache_ori = style_list->ignore_cache;
 800739c:	796b      	ldrb	r3, [r5, #5]
 800739e:	f006 020f 	and.w	r2, r6, #15
    lv_style_t * style_trans = _lv_style_list_get_transition_style(style_list);
 80073a2:	4683      	mov	fp, r0
    bool cache_ori = style_list->ignore_cache;
 80073a4:	f3c3 01c0 	ubfx	r1, r3, #3, #1
    if((prop & 0xF) < LV_STYLE_ID_COLOR) { /*Int*/
 80073a8:	2a08      	cmp	r2, #8
    bool cache_ori = style_list->ignore_cache;
 80073aa:	9104      	str	r1, [sp, #16]
    if((prop & 0xF) < LV_STYLE_ID_COLOR) { /*Int*/
 80073ac:	f240 808a 	bls.w	80074c4 <lv_obj_set_state.part.0+0x4ec>
    else if((prop & 0xF) < LV_STYLE_ID_OPA) { /*Color*/
 80073b0:	2a0b      	cmp	r2, #11
 80073b2:	f240 80dd 	bls.w	8007570 <lv_obj_set_state.part.0+0x598>
    else if((prop & 0xF) < LV_STYLE_ID_PTR) { /*Opa*/
 80073b6:	2a0d      	cmp	r2, #13
 80073b8:	f200 8120 	bhi.w	80075fc <lv_obj_set_state.part.0+0x624>
        style_list->skip_trans = 1;
 80073bc:	f023 0309 	bic.w	r3, r3, #9
        lv_opa_t o1 = _lv_obj_get_style_opa(obj, part, prop);
 80073c0:	4632      	mov	r2, r6
 80073c2:	4649      	mov	r1, r9
 80073c4:	4638      	mov	r0, r7
        style_list->skip_trans = 1;
 80073c6:	f043 0309 	orr.w	r3, r3, #9
 80073ca:	716b      	strb	r3, [r5, #5]
        obj->state = prev_state;
 80073cc:	9b01      	ldr	r3, [sp, #4]
 80073ce:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
        lv_opa_t o1 = _lv_obj_get_style_opa(obj, part, prop);
 80073d2:	f7fe f82b 	bl	800542c <_lv_obj_get_style_opa>
        obj->state = new_state;
 80073d6:	9a02      	ldr	r2, [sp, #8]
        lv_opa_t o1 = _lv_obj_get_style_opa(obj, part, prop);
 80073d8:	4603      	mov	r3, r0
        lv_opa_t o2 =  _lv_obj_get_style_opa(obj, part, prop);
 80073da:	4649      	mov	r1, r9
        obj->state = new_state;
 80073dc:	f887 203d 	strb.w	r2, [r7, #61]	; 0x3d
        lv_opa_t o2 =  _lv_obj_get_style_opa(obj, part, prop);
 80073e0:	4638      	mov	r0, r7
 80073e2:	4632      	mov	r2, r6
        lv_opa_t o1 = _lv_obj_get_style_opa(obj, part, prop);
 80073e4:	9309      	str	r3, [sp, #36]	; 0x24
        lv_opa_t o2 =  _lv_obj_get_style_opa(obj, part, prop);
 80073e6:	f7fe f821 	bl	800542c <_lv_obj_get_style_opa>
        style_list->skip_trans = 0;
 80073ea:	796a      	ldrb	r2, [r5, #5]
        style_list->ignore_cache = cache_ori;
 80073ec:	9904      	ldr	r1, [sp, #16]
 80073ee:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
        lv_opa_t o2 =  _lv_obj_get_style_opa(obj, part, prop);
 80073f2:	9005      	str	r0, [sp, #20]
        style_list->ignore_cache = cache_ori;
 80073f4:	f361 02c3 	bfi	r2, r1, #3, #1
 80073f8:	716a      	strb	r2, [r5, #5]
        if(o1 == o2) return NULL;
 80073fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073fc:	4283      	cmp	r3, r0
 80073fe:	f43f af71 	beq.w	80072e4 <lv_obj_set_state.part.0+0x30c>
        obj->state = prev_state;
 8007402:	9b01      	ldr	r3, [sp, #4]
        o1 = _lv_obj_get_style_opa(obj, part, prop);
 8007404:	4632      	mov	r2, r6
 8007406:	4649      	mov	r1, r9
 8007408:	4638      	mov	r0, r7
        obj->state = prev_state;
 800740a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
        o1 = _lv_obj_get_style_opa(obj, part, prop);
 800740e:	f7fe f80d 	bl	800542c <_lv_obj_get_style_opa>
        obj->state = new_state;
 8007412:	9b02      	ldr	r3, [sp, #8]
        o1 = _lv_obj_get_style_opa(obj, part, prop);
 8007414:	4602      	mov	r2, r0
        _lv_style_set_opa(style_trans, prop, o1);   /*Be sure `trans_style` has a valid value */
 8007416:	4631      	mov	r1, r6
        obj->state = new_state;
 8007418:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
        _lv_style_set_opa(style_trans, prop, o1);   /*Be sure `trans_style` has a valid value */
 800741c:	4658      	mov	r0, fp
        o1 = _lv_obj_get_style_opa(obj, part, prop);
 800741e:	4693      	mov	fp, r2
        _lv_style_set_opa(style_trans, prop, o1);   /*Be sure `trans_style` has a valid value */
 8007420:	f001 ff22 	bl	8009268 <_lv_style_set_opa>
        tr = _lv_ll_ins_head(&LV_GC_ROOT(_lv_obj_style_trans_ll));
 8007424:	484e      	ldr	r0, [pc, #312]	; (8007560 <lv_obj_set_state.part.0+0x588>)
 8007426:	f00d facb 	bl	80149c0 <_lv_ll_ins_head>
 800742a:	4605      	mov	r5, r0
        LV_ASSERT_MEM(tr);
 800742c:	f00d f9cc 	bl	80147c8 <lv_debug_check_null>
 8007430:	4603      	mov	r3, r0
 8007432:	2800      	cmp	r0, #0
 8007434:	f000 8178 	beq.w	8007728 <lv_obj_set_state.part.0+0x750>
        if(tr == NULL) return NULL;
 8007438:	2d00      	cmp	r5, #0
 800743a:	f43f af53 	beq.w	80072e4 <lv_obj_set_state.part.0+0x30c>
        tr->end_value._opa = o2;
 800743e:	9b05      	ldr	r3, [sp, #20]
        tr->start_value._opa = o1;
 8007440:	f885 b008 	strb.w	fp, [r5, #8]
        tr->end_value._opa = o2;
 8007444:	732b      	strb	r3, [r5, #12]
                    lv_anim_init(&a);
 8007446:	4650      	mov	r0, sl
                    tr->obj = obj;
 8007448:	602f      	str	r7, [r5, #0]
                    tr->prop = props[i];
 800744a:	80ae      	strh	r6, [r5, #4]
                    tr->part = part;
 800744c:	f885 9006 	strb.w	r9, [r5, #6]
                    lv_anim_init(&a);
 8007450:	f00c fca2 	bl	8013d98 <lv_anim_init>
    a->exec_cb = exec_cb;
 8007454:	4943      	ldr	r1, [pc, #268]	; (8007564 <lv_obj_set_state.part.0+0x58c>)
    a->end   = end;
 8007456:	22ff      	movs	r2, #255	; 0xff
    a->act_time = -(int32_t)(delay);
 8007458:	9b08      	ldr	r3, [sp, #32]
    a->exec_cb = exec_cb;
 800745a:	9145      	str	r1, [sp, #276]	; 0x114
                    lv_anim_start(&a);
 800745c:	4650      	mov	r0, sl
    a->start_cb = start_cb;
 800745e:	4942      	ldr	r1, [pc, #264]	; (8007568 <lv_obj_set_state.part.0+0x590>)
    a->act_time = -(int32_t)(delay);
 8007460:	425b      	negs	r3, r3
    a->var     = var;
 8007462:	9544      	str	r5, [sp, #272]	; 0x110
    a->start_cb = start_cb;
 8007464:	9146      	str	r1, [sp, #280]	; 0x118
    a->ready_cb = ready_cb;
 8007466:	4941      	ldr	r1, [pc, #260]	; (800756c <lv_obj_set_state.part.0+0x594>)
    a->act_time = -(int32_t)(delay);
 8007468:	934e      	str	r3, [sp, #312]	; 0x138
    a->ready_cb = ready_cb;
 800746a:	9147      	str	r1, [sp, #284]	; 0x11c
    a->time     = duration;
 800746c:	9907      	ldr	r1, [sp, #28]
                    a.early_apply = 0;
 800746e:	f89d 314a 	ldrb.w	r3, [sp, #330]	; 0x14a
    a->end   = end;
 8007472:	e9cd 214c 	strd	r2, r1, [sp, #304]	; 0x130
    a->start = start;
 8007476:	2100      	movs	r1, #0
 8007478:	2200      	movs	r2, #0
 800747a:	f36f 0300 	bfc	r3, #0, #1
 800747e:	e9cd 124a 	strd	r1, r2, [sp, #296]	; 0x128
        *d8 = *s8;
 8007482:	9906      	ldr	r1, [sp, #24]
 8007484:	780a      	ldrb	r2, [r1, #0]
 8007486:	f88d 2120 	strb.w	r2, [sp, #288]	; 0x120
 800748a:	784a      	ldrb	r2, [r1, #1]
 800748c:	f88d 2121 	strb.w	r2, [sp, #289]	; 0x121
 8007490:	788a      	ldrb	r2, [r1, #2]
 8007492:	f88d 2122 	strb.w	r2, [sp, #290]	; 0x122
 8007496:	78ca      	ldrb	r2, [r1, #3]
 8007498:	f88d 2123 	strb.w	r2, [sp, #291]	; 0x123
 800749c:	790a      	ldrb	r2, [r1, #4]
 800749e:	f88d 2124 	strb.w	r2, [sp, #292]	; 0x124
 80074a2:	794a      	ldrb	r2, [r1, #5]
 80074a4:	f88d 2125 	strb.w	r2, [sp, #293]	; 0x125
 80074a8:	798a      	ldrb	r2, [r1, #6]
 80074aa:	f88d 2126 	strb.w	r2, [sp, #294]	; 0x126
 80074ae:	79ca      	ldrb	r2, [r1, #7]
 80074b0:	f88d 314a 	strb.w	r3, [sp, #330]	; 0x14a
 80074b4:	f88d 2127 	strb.w	r2, [sp, #295]	; 0x127
                    lv_anim_start(&a);
 80074b8:	f00c fcd8 	bl	8013e6c <lv_anim_start>
 80074bc:	e712      	b.n	80072e4 <lv_obj_set_state.part.0+0x30c>
    if(part == LV_OBJ_PART_MAIN) return &((lv_obj_t *)obj)->style_list;
 80074be:	f107 0528 	add.w	r5, r7, #40	; 0x28
 80074c2:	e768      	b.n	8007396 <lv_obj_set_state.part.0+0x3be>
        style_list->skip_trans = 1;
 80074c4:	f023 0309 	bic.w	r3, r3, #9
        lv_style_int_t int1 = _lv_obj_get_style_int(obj, part, prop);
 80074c8:	4632      	mov	r2, r6
 80074ca:	4649      	mov	r1, r9
 80074cc:	4638      	mov	r0, r7
        style_list->skip_trans = 1;
 80074ce:	f043 0309 	orr.w	r3, r3, #9
 80074d2:	716b      	strb	r3, [r5, #5]
        obj->state = prev_state;
 80074d4:	9b01      	ldr	r3, [sp, #4]
 80074d6:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
        lv_style_int_t int1 = _lv_obj_get_style_int(obj, part, prop);
 80074da:	f7fe f861 	bl	80055a0 <_lv_obj_get_style_int>
        obj->state = new_state;
 80074de:	9a02      	ldr	r2, [sp, #8]
        lv_style_int_t int1 = _lv_obj_get_style_int(obj, part, prop);
 80074e0:	4603      	mov	r3, r0
        lv_style_int_t int2 =  _lv_obj_get_style_int(obj, part, prop);
 80074e2:	4649      	mov	r1, r9
        obj->state = new_state;
 80074e4:	f887 203d 	strb.w	r2, [r7, #61]	; 0x3d
        lv_style_int_t int2 =  _lv_obj_get_style_int(obj, part, prop);
 80074e8:	4638      	mov	r0, r7
 80074ea:	4632      	mov	r2, r6
        lv_style_int_t int1 = _lv_obj_get_style_int(obj, part, prop);
 80074ec:	9309      	str	r3, [sp, #36]	; 0x24
        lv_style_int_t int2 =  _lv_obj_get_style_int(obj, part, prop);
 80074ee:	f7fe f857 	bl	80055a0 <_lv_obj_get_style_int>
        style_list->skip_trans = 0;
 80074f2:	796a      	ldrb	r2, [r5, #5]
        style_list->ignore_cache = cache_ori;
 80074f4:	9904      	ldr	r1, [sp, #16]
 80074f6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
        lv_style_int_t int2 =  _lv_obj_get_style_int(obj, part, prop);
 80074fa:	9005      	str	r0, [sp, #20]
        style_list->ignore_cache = cache_ori;
 80074fc:	f361 02c3 	bfi	r2, r1, #3, #1
 8007500:	716a      	strb	r2, [r5, #5]
        if(int1 == int2)  return NULL;
 8007502:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007504:	4283      	cmp	r3, r0
 8007506:	f43f aeed 	beq.w	80072e4 <lv_obj_set_state.part.0+0x30c>
        obj->state = prev_state;
 800750a:	9b01      	ldr	r3, [sp, #4]
        int1 = _lv_obj_get_style_int(obj, part, prop);
 800750c:	4632      	mov	r2, r6
 800750e:	4649      	mov	r1, r9
 8007510:	4638      	mov	r0, r7
        obj->state = prev_state;
 8007512:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
        int1 = _lv_obj_get_style_int(obj, part, prop);
 8007516:	f7fe f843 	bl	80055a0 <_lv_obj_get_style_int>
        obj->state = new_state;
 800751a:	9b02      	ldr	r3, [sp, #8]
        int1 = _lv_obj_get_style_int(obj, part, prop);
 800751c:	4602      	mov	r2, r0
        _lv_style_set_int(style_trans, prop, int1);   /*Be sure `trans_style` has a valid value */
 800751e:	4631      	mov	r1, r6
 8007520:	4658      	mov	r0, fp
        obj->state = new_state;
 8007522:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
        int1 = _lv_obj_get_style_int(obj, part, prop);
 8007526:	4693      	mov	fp, r2
        _lv_style_set_int(style_trans, prop, int1);   /*Be sure `trans_style` has a valid value */
 8007528:	f001 fd06 	bl	8008f38 <_lv_style_set_int>
        if(prop == LV_STYLE_RADIUS) {
 800752c:	2e01      	cmp	r6, #1
 800752e:	f000 80c5 	beq.w	80076bc <lv_obj_set_state.part.0+0x6e4>
        tr = _lv_ll_ins_head(&LV_GC_ROOT(_lv_obj_style_trans_ll));
 8007532:	480b      	ldr	r0, [pc, #44]	; (8007560 <lv_obj_set_state.part.0+0x588>)
 8007534:	f00d fa44 	bl	80149c0 <_lv_ll_ins_head>
 8007538:	4605      	mov	r5, r0
        LV_ASSERT_MEM(tr);
 800753a:	f00d f945 	bl	80147c8 <lv_debug_check_null>
 800753e:	4603      	mov	r3, r0
 8007540:	2800      	cmp	r0, #0
 8007542:	f000 80b6 	beq.w	80076b2 <lv_obj_set_state.part.0+0x6da>
        if(tr == NULL) return NULL;
 8007546:	2d00      	cmp	r5, #0
 8007548:	f43f aecc 	beq.w	80072e4 <lv_obj_set_state.part.0+0x30c>
        tr->end_value._int = int2;
 800754c:	9b05      	ldr	r3, [sp, #20]
        tr->start_value._int = int1;
 800754e:	f8a5 b008 	strh.w	fp, [r5, #8]
        tr->end_value._int = int2;
 8007552:	81ab      	strh	r3, [r5, #12]
 8007554:	e777      	b.n	8007446 <lv_obj_set_state.part.0+0x46e>
 8007556:	bf00      	nop
 8007558:	0801e1d4 	.word	0x0801e1d4
 800755c:	08021754 	.word	0x08021754
 8007560:	200204d4 	.word	0x200204d4
 8007564:	08005e99 	.word	0x08005e99
 8007568:	080062bd 	.word	0x080062bd
 800756c:	08003461 	.word	0x08003461
        style_list->skip_trans = 1;
 8007570:	f023 0309 	bic.w	r3, r3, #9
        lv_color_t c1 = _lv_obj_get_style_color(obj, part, prop);
 8007574:	4632      	mov	r2, r6
 8007576:	4649      	mov	r1, r9
 8007578:	4638      	mov	r0, r7
        style_list->skip_trans = 1;
 800757a:	f043 0309 	orr.w	r3, r3, #9
 800757e:	716b      	strb	r3, [r5, #5]
        obj->state = prev_state;
 8007580:	9b01      	ldr	r3, [sp, #4]
 8007582:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
        lv_color_t c1 = _lv_obj_get_style_color(obj, part, prop);
 8007586:	f7fd fc47 	bl	8004e18 <_lv_obj_get_style_color>
        obj->state = new_state;
 800758a:	9a02      	ldr	r2, [sp, #8]
        lv_color_t c1 = _lv_obj_get_style_color(obj, part, prop);
 800758c:	4603      	mov	r3, r0
        lv_color_t c2 =  _lv_obj_get_style_color(obj, part, prop);
 800758e:	4649      	mov	r1, r9
        obj->state = new_state;
 8007590:	f887 203d 	strb.w	r2, [r7, #61]	; 0x3d
        lv_color_t c2 =  _lv_obj_get_style_color(obj, part, prop);
 8007594:	4638      	mov	r0, r7
 8007596:	4632      	mov	r2, r6
        lv_color_t c1 = _lv_obj_get_style_color(obj, part, prop);
 8007598:	9309      	str	r3, [sp, #36]	; 0x24
        lv_color_t c2 =  _lv_obj_get_style_color(obj, part, prop);
 800759a:	f7fd fc3d 	bl	8004e18 <_lv_obj_get_style_color>
        style_list->skip_trans = 0;
 800759e:	796a      	ldrb	r2, [r5, #5]
        style_list->ignore_cache = cache_ori;
 80075a0:	9904      	ldr	r1, [sp, #16]
 80075a2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
        lv_color_t c2 =  _lv_obj_get_style_color(obj, part, prop);
 80075a6:	9005      	str	r0, [sp, #20]
        style_list->ignore_cache = cache_ori;
 80075a8:	f361 02c3 	bfi	r2, r1, #3, #1
 80075ac:	716a      	strb	r2, [r5, #5]
        if(c1.full == c2.full) return NULL;
 80075ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075b0:	4283      	cmp	r3, r0
 80075b2:	f43f ae97 	beq.w	80072e4 <lv_obj_set_state.part.0+0x30c>
        obj->state = prev_state;
 80075b6:	9b01      	ldr	r3, [sp, #4]
        c1 = _lv_obj_get_style_color(obj, part, prop);
 80075b8:	4632      	mov	r2, r6
 80075ba:	4649      	mov	r1, r9
 80075bc:	4638      	mov	r0, r7
        obj->state = prev_state;
 80075be:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
        c1 = _lv_obj_get_style_color(obj, part, prop);
 80075c2:	f7fd fc29 	bl	8004e18 <_lv_obj_get_style_color>
        obj->state = new_state;
 80075c6:	9a02      	ldr	r2, [sp, #8]
        c1 = _lv_obj_get_style_color(obj, part, prop);
 80075c8:	4603      	mov	r3, r0
        _lv_style_set_color(style_trans, prop, c1);    /*Be sure `trans_style` has a valid value */
 80075ca:	4631      	mov	r1, r6
 80075cc:	4658      	mov	r0, fp
        obj->state = new_state;
 80075ce:	f887 203d 	strb.w	r2, [r7, #61]	; 0x3d
        _lv_style_set_color(style_trans, prop, c1);    /*Be sure `trans_style` has a valid value */
 80075d2:	461a      	mov	r2, r3
 80075d4:	9304      	str	r3, [sp, #16]
 80075d6:	f001 fd7d 	bl	80090d4 <_lv_style_set_color>
        tr = _lv_ll_ins_head(&LV_GC_ROOT(_lv_obj_style_trans_ll));
 80075da:	486e      	ldr	r0, [pc, #440]	; (8007794 <lv_obj_set_state.part.0+0x7bc>)
 80075dc:	f00d f9f0 	bl	80149c0 <_lv_ll_ins_head>
 80075e0:	4605      	mov	r5, r0
        LV_ASSERT_MEM(tr);
 80075e2:	f00d f8f1 	bl	80147c8 <lv_debug_check_null>
 80075e6:	9b04      	ldr	r3, [sp, #16]
 80075e8:	2800      	cmp	r0, #0
 80075ea:	f000 80a2 	beq.w	8007732 <lv_obj_set_state.part.0+0x75a>
        if(tr == NULL) return NULL;
 80075ee:	2d00      	cmp	r5, #0
 80075f0:	f43f ae78 	beq.w	80072e4 <lv_obj_set_state.part.0+0x30c>
        tr->start_value._color = c1;
 80075f4:	60ab      	str	r3, [r5, #8]
        tr->end_value._color = c2;
 80075f6:	9b05      	ldr	r3, [sp, #20]
 80075f8:	60eb      	str	r3, [r5, #12]
 80075fa:	e724      	b.n	8007446 <lv_obj_set_state.part.0+0x46e>
        obj->state = prev_state;
 80075fc:	9b01      	ldr	r3, [sp, #4]
        const void * p1 = _lv_obj_get_style_ptr(obj, part, prop);
 80075fe:	4632      	mov	r2, r6
 8007600:	4649      	mov	r1, r9
 8007602:	4638      	mov	r0, r7
        obj->state = prev_state;
 8007604:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
        style_list->skip_trans = 1;
 8007608:	796b      	ldrb	r3, [r5, #5]
 800760a:	f023 0309 	bic.w	r3, r3, #9
 800760e:	f043 0309 	orr.w	r3, r3, #9
 8007612:	716b      	strb	r3, [r5, #5]
        const void * p1 = _lv_obj_get_style_ptr(obj, part, prop);
 8007614:	f7fd fc76 	bl	8004f04 <_lv_obj_get_style_ptr>
        obj->state = new_state;
 8007618:	9a02      	ldr	r2, [sp, #8]
        const void * p1 = _lv_obj_get_style_ptr(obj, part, prop);
 800761a:	4603      	mov	r3, r0
        const void * p2 = _lv_obj_get_style_ptr(obj, part, prop);
 800761c:	4649      	mov	r1, r9
        obj->state = new_state;
 800761e:	f887 203d 	strb.w	r2, [r7, #61]	; 0x3d
        const void * p2 = _lv_obj_get_style_ptr(obj, part, prop);
 8007622:	4638      	mov	r0, r7
 8007624:	4632      	mov	r2, r6
        const void * p1 = _lv_obj_get_style_ptr(obj, part, prop);
 8007626:	930b      	str	r3, [sp, #44]	; 0x2c
        const void * p2 = _lv_obj_get_style_ptr(obj, part, prop);
 8007628:	f7fd fc6c 	bl	8004f04 <_lv_obj_get_style_ptr>
 800762c:	9044      	str	r0, [sp, #272]	; 0x110
 800762e:	9005      	str	r0, [sp, #20]
        style_list->skip_trans = 0;
 8007630:	796a      	ldrb	r2, [r5, #5]
        style_list->ignore_cache = cache_ori;
 8007632:	9904      	ldr	r1, [sp, #16]
 8007634:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007638:	f361 02c3 	bfi	r2, r1, #3, #1
 800763c:	716a      	strb	r2, [r5, #5]
        if(memcmp(&p1, &p2, sizeof(const void *)) == 0)  return NULL;
 800763e:	9944      	ldr	r1, [sp, #272]	; 0x110
 8007640:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007642:	4291      	cmp	r1, r2
 8007644:	f43f ae4e 	beq.w	80072e4 <lv_obj_set_state.part.0+0x30c>
        obj->state = prev_state;
 8007648:	9b01      	ldr	r3, [sp, #4]
        p1 = _lv_obj_get_style_ptr(obj, part, prop);
 800764a:	4632      	mov	r2, r6
 800764c:	4649      	mov	r1, r9
 800764e:	4638      	mov	r0, r7
        obj->state = prev_state;
 8007650:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
        p1 = _lv_obj_get_style_ptr(obj, part, prop);
 8007654:	f7fd fc56 	bl	8004f04 <_lv_obj_get_style_ptr>
        obj->state = new_state;
 8007658:	9b02      	ldr	r3, [sp, #8]
        p1 = _lv_obj_get_style_ptr(obj, part, prop);
 800765a:	4602      	mov	r2, r0
        _lv_style_set_ptr(style_trans, prop, p1);   /*Be sure `trans_style` has a valid value */
 800765c:	4631      	mov	r1, r6
        obj->state = new_state;
 800765e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
        _lv_style_set_ptr(style_trans, prop, p1);   /*Be sure `trans_style` has a valid value */
 8007662:	4658      	mov	r0, fp
        p1 = _lv_obj_get_style_ptr(obj, part, prop);
 8007664:	920b      	str	r2, [sp, #44]	; 0x2c
 8007666:	4693      	mov	fp, r2
        _lv_style_set_ptr(style_trans, prop, p1);   /*Be sure `trans_style` has a valid value */
 8007668:	f001 fec0 	bl	80093ec <_lv_style_set_ptr>
        tr = _lv_ll_ins_head(&LV_GC_ROOT(_lv_obj_style_trans_ll));
 800766c:	4849      	ldr	r0, [pc, #292]	; (8007794 <lv_obj_set_state.part.0+0x7bc>)
 800766e:	f00d f9a7 	bl	80149c0 <_lv_ll_ins_head>
 8007672:	4605      	mov	r5, r0
        LV_ASSERT_MEM(tr);
 8007674:	f00d f8a8 	bl	80147c8 <lv_debug_check_null>
 8007678:	9b05      	ldr	r3, [sp, #20]
 800767a:	2800      	cmp	r0, #0
 800767c:	d064      	beq.n	8007748 <lv_obj_set_state.part.0+0x770>
        if(tr == NULL) return NULL;
 800767e:	2d00      	cmp	r5, #0
 8007680:	f43f ae30 	beq.w	80072e4 <lv_obj_set_state.part.0+0x30c>
        tr->end_value._ptr = p2;
 8007684:	e9c5 b302 	strd	fp, r3, [r5, #8]
 8007688:	e6dd      	b.n	8007446 <lv_obj_set_state.part.0+0x46e>
 800768a:	461d      	mov	r5, r3
    return info.result;
 800768c:	e683      	b.n	8007396 <lv_obj_set_state.part.0+0x3be>
        if(res == LV_RES_OK)  return value_act;
 800768e:	9b44      	ldr	r3, [sp, #272]	; 0x110
 8007690:	9306      	str	r3, [sp, #24]
 8007692:	e5ed      	b.n	8007270 <lv_obj_set_state.part.0+0x298>
            return lv_theme_get_font_normal();
 8007694:	f00e ff46 	bl	8016524 <lv_theme_get_font_normal>
 8007698:	9006      	str	r0, [sp, #24]
 800769a:	e5e9      	b.n	8007270 <lv_obj_set_state.part.0+0x298>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 800769c:	4638      	mov	r0, r7
 800769e:	f00d f893 	bl	80147c8 <lv_debug_check_null>
 80076a2:	4603      	mov	r3, r0
 80076a4:	2800      	cmp	r0, #0
 80076a6:	d14a      	bne.n	800773e <lv_obj_set_state.part.0+0x766>
 80076a8:	463a      	mov	r2, r7
 80076aa:	483b      	ldr	r0, [pc, #236]	; (8007798 <lv_obj_set_state.part.0+0x7c0>)
 80076ac:	f00d f890 	bl	80147d0 <lv_debug_log_error>
 80076b0:	e7fe      	b.n	80076b0 <lv_obj_set_state.part.0+0x6d8>
 80076b2:	462a      	mov	r2, r5
        LV_ASSERT_MEM(tr);
 80076b4:	4839      	ldr	r0, [pc, #228]	; (800779c <lv_obj_set_state.part.0+0x7c4>)
 80076b6:	f00d f88b 	bl	80147d0 <lv_debug_log_error>
 80076ba:	e7fe      	b.n	80076ba <lv_obj_set_state.part.0+0x6e2>
            if(int1 == LV_RADIUS_CIRCLE || int2 == LV_RADIUS_CIRCLE) {
 80076bc:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80076c0:	459b      	cmp	fp, r3
 80076c2:	d003      	beq.n	80076cc <lv_obj_set_state.part.0+0x6f4>
 80076c4:	9a05      	ldr	r2, [sp, #20]
 80076c6:	429a      	cmp	r2, r3
 80076c8:	f47f af33 	bne.w	8007532 <lv_obj_set_state.part.0+0x55a>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80076cc:	4638      	mov	r0, r7
 80076ce:	f00d f87b 	bl	80147c8 <lv_debug_check_null>
 80076d2:	4603      	mov	r3, r0
 80076d4:	2800      	cmp	r0, #0
 80076d6:	d050      	beq.n	800777a <lv_obj_set_state.part.0+0x7a2>
    return lv_area_get_width(&obj->coords);
 80076d8:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80076dc:	4638      	mov	r0, r7
    return lv_area_get_width(&obj->coords);
 80076de:	f9b7 5014 	ldrsh.w	r5, [r7, #20]
 80076e2:	9204      	str	r2, [sp, #16]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80076e4:	f00d f870 	bl	80147c8 <lv_debug_check_null>
 80076e8:	9a04      	ldr	r2, [sp, #16]
 80076ea:	4603      	mov	r3, r0
 80076ec:	2800      	cmp	r0, #0
 80076ee:	d03f      	beq.n	8007770 <lv_obj_set_state.part.0+0x798>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80076f0:	1c68      	adds	r0, r5, #1
 80076f2:	8abb      	ldrh	r3, [r7, #20]
 80076f4:	8a39      	ldrh	r1, [r7, #16]
 80076f6:	1a80      	subs	r0, r0, r2
 80076f8:	3301      	adds	r3, #1
                lv_coord_t whalf = lv_obj_get_width(obj) / 2;
 80076fa:	b200      	sxth	r0, r0
 80076fc:	1a5b      	subs	r3, r3, r1
                if(int1 == LV_RADIUS_CIRCLE) int1 = LV_MATH_MIN(whalf + 1, hhalf + 1);
 80076fe:	f647 71ff 	movw	r1, #32767	; 0x7fff
                lv_coord_t whalf = lv_obj_get_width(obj) / 2;
 8007702:	2800      	cmp	r0, #0
                lv_coord_t hhalf = lv_obj_get_width(obj) / 2;
 8007704:	b21b      	sxth	r3, r3
                lv_coord_t whalf = lv_obj_get_width(obj) / 2;
 8007706:	bfb8      	it	lt
 8007708:	3001      	addlt	r0, #1
                lv_coord_t hhalf = lv_obj_get_width(obj) / 2;
 800770a:	2b00      	cmp	r3, #0
 800770c:	bfb8      	it	lt
 800770e:	3301      	addlt	r3, #1
                if(int1 == LV_RADIUS_CIRCLE) int1 = LV_MATH_MIN(whalf + 1, hhalf + 1);
 8007710:	458b      	cmp	fp, r1
                lv_coord_t whalf = lv_obj_get_width(obj) / 2;
 8007712:	ea4f 0060 	mov.w	r0, r0, asr #1
                lv_coord_t hhalf = lv_obj_get_width(obj) / 2;
 8007716:	ea4f 0363 	mov.w	r3, r3, asr #1
                if(int1 == LV_RADIUS_CIRCLE) int1 = LV_MATH_MIN(whalf + 1, hhalf + 1);
 800771a:	d01f      	beq.n	800775c <lv_obj_set_state.part.0+0x784>
                if(int2 == LV_RADIUS_CIRCLE) int2 = LV_MATH_MIN(whalf + 1, hhalf + 1);
 800771c:	4298      	cmp	r0, r3
 800771e:	db19      	blt.n	8007754 <lv_obj_set_state.part.0+0x77c>
 8007720:	3301      	adds	r3, #1
 8007722:	b21b      	sxth	r3, r3
 8007724:	9305      	str	r3, [sp, #20]
 8007726:	e704      	b.n	8007532 <lv_obj_set_state.part.0+0x55a>
 8007728:	462a      	mov	r2, r5
        LV_ASSERT_MEM(tr);
 800772a:	481c      	ldr	r0, [pc, #112]	; (800779c <lv_obj_set_state.part.0+0x7c4>)
 800772c:	f00d f850 	bl	80147d0 <lv_debug_log_error>
 8007730:	e7fe      	b.n	8007730 <lv_obj_set_state.part.0+0x758>
 8007732:	4603      	mov	r3, r0
        LV_ASSERT_MEM(tr);
 8007734:	462a      	mov	r2, r5
 8007736:	4819      	ldr	r0, [pc, #100]	; (800779c <lv_obj_set_state.part.0+0x7c4>)
 8007738:	f00d f84a 	bl	80147d0 <lv_debug_log_error>
 800773c:	e7fe      	b.n	800773c <lv_obj_set_state.part.0+0x764>
 800773e:	21ff      	movs	r1, #255	; 0xff
 8007740:	4638      	mov	r0, r7
 8007742:	f7fe fae7 	bl	8005d14 <lv_obj_refresh_style.part.0>
        if(cmp_res == STYLE_COMPARE_VISUAL_DIFF) {
 8007746:	e5d9      	b.n	80072fc <lv_obj_set_state.part.0+0x324>
 8007748:	4603      	mov	r3, r0
        LV_ASSERT_MEM(tr);
 800774a:	462a      	mov	r2, r5
 800774c:	4813      	ldr	r0, [pc, #76]	; (800779c <lv_obj_set_state.part.0+0x7c4>)
 800774e:	f00d f83f 	bl	80147d0 <lv_debug_log_error>
 8007752:	e7fe      	b.n	8007752 <lv_obj_set_state.part.0+0x77a>
 8007754:	3001      	adds	r0, #1
                if(int2 == LV_RADIUS_CIRCLE) int2 = LV_MATH_MIN(whalf + 1, hhalf + 1);
 8007756:	b203      	sxth	r3, r0
 8007758:	9305      	str	r3, [sp, #20]
 800775a:	e6ea      	b.n	8007532 <lv_obj_set_state.part.0+0x55a>
                if(int1 == LV_RADIUS_CIRCLE) int1 = LV_MATH_MIN(whalf + 1, hhalf + 1);
 800775c:	4298      	cmp	r0, r3
 800775e:	da11      	bge.n	8007784 <lv_obj_set_state.part.0+0x7ac>
                if(int2 == LV_RADIUS_CIRCLE) int2 = LV_MATH_MIN(whalf + 1, hhalf + 1);
 8007760:	9b05      	ldr	r3, [sp, #20]
                if(int1 == LV_RADIUS_CIRCLE) int1 = LV_MATH_MIN(whalf + 1, hhalf + 1);
 8007762:	3001      	adds	r0, #1
                if(int2 == LV_RADIUS_CIRCLE) int2 = LV_MATH_MIN(whalf + 1, hhalf + 1);
 8007764:	428b      	cmp	r3, r1
                if(int1 == LV_RADIUS_CIRCLE) int1 = LV_MATH_MIN(whalf + 1, hhalf + 1);
 8007766:	fa0f fb80 	sxth.w	fp, r0
                if(int2 == LV_RADIUS_CIRCLE) int2 = LV_MATH_MIN(whalf + 1, hhalf + 1);
 800776a:	f47f aee2 	bne.w	8007532 <lv_obj_set_state.part.0+0x55a>
 800776e:	e7f2      	b.n	8007756 <lv_obj_set_state.part.0+0x77e>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8007770:	463a      	mov	r2, r7
 8007772:	4809      	ldr	r0, [pc, #36]	; (8007798 <lv_obj_set_state.part.0+0x7c0>)
 8007774:	f00d f82c 	bl	80147d0 <lv_debug_log_error>
 8007778:	e7fe      	b.n	8007778 <lv_obj_set_state.part.0+0x7a0>
 800777a:	463a      	mov	r2, r7
 800777c:	4806      	ldr	r0, [pc, #24]	; (8007798 <lv_obj_set_state.part.0+0x7c0>)
 800777e:	f00d f827 	bl	80147d0 <lv_debug_log_error>
 8007782:	e7fe      	b.n	8007782 <lv_obj_set_state.part.0+0x7aa>
                if(int2 == LV_RADIUS_CIRCLE) int2 = LV_MATH_MIN(whalf + 1, hhalf + 1);
 8007784:	9a05      	ldr	r2, [sp, #20]
                if(int1 == LV_RADIUS_CIRCLE) int1 = LV_MATH_MIN(whalf + 1, hhalf + 1);
 8007786:	3301      	adds	r3, #1
                if(int2 == LV_RADIUS_CIRCLE) int2 = LV_MATH_MIN(whalf + 1, hhalf + 1);
 8007788:	428a      	cmp	r2, r1
                if(int1 == LV_RADIUS_CIRCLE) int1 = LV_MATH_MIN(whalf + 1, hhalf + 1);
 800778a:	fa0f fb83 	sxth.w	fp, r3
                if(int2 == LV_RADIUS_CIRCLE) int2 = LV_MATH_MIN(whalf + 1, hhalf + 1);
 800778e:	f47f aed0 	bne.w	8007532 <lv_obj_set_state.part.0+0x55a>
 8007792:	e7c6      	b.n	8007722 <lv_obj_set_state.part.0+0x74a>
 8007794:	200204d4 	.word	0x200204d4
 8007798:	0801e1d4 	.word	0x0801e1d4
 800779c:	0801e1c4 	.word	0x0801e1c4

080077a0 <lv_obj_add_state>:
{
 80077a0:	b510      	push	{r4, lr}
 80077a2:	b082      	sub	sp, #8
 80077a4:	460c      	mov	r4, r1
 80077a6:	9000      	str	r0, [sp, #0]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80077a8:	f00d f80e 	bl	80147c8 <lv_debug_check_null>
 80077ac:	9a00      	ldr	r2, [sp, #0]
 80077ae:	b1b8      	cbz	r0, 80077e0 <lv_obj_add_state+0x40>
    lv_state_t new_state = obj->state | state;
 80077b0:	f892 303d 	ldrb.w	r3, [r2, #61]	; 0x3d
 80077b4:	ea43 0104 	orr.w	r1, r3, r4
    if(obj->state != new_state) {
 80077b8:	ea34 0303 	bics.w	r3, r4, r3
    lv_state_t new_state = obj->state | state;
 80077bc:	9101      	str	r1, [sp, #4]
    if(obj->state != new_state) {
 80077be:	d101      	bne.n	80077c4 <lv_obj_add_state+0x24>
}
 80077c0:	b002      	add	sp, #8
 80077c2:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80077c4:	4610      	mov	r0, r2
 80077c6:	9200      	str	r2, [sp, #0]
 80077c8:	f00c fffe 	bl	80147c8 <lv_debug_check_null>
 80077cc:	4603      	mov	r3, r0
 80077ce:	e9dd 2100 	ldrd	r2, r1, [sp]
 80077d2:	b150      	cbz	r0, 80077ea <lv_obj_add_state+0x4a>
 80077d4:	4610      	mov	r0, r2
}
 80077d6:	b002      	add	sp, #8
 80077d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077dc:	f7ff bbfc 	b.w	8006fd8 <lv_obj_set_state.part.0>
 80077e0:	4603      	mov	r3, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80077e2:	4804      	ldr	r0, [pc, #16]	; (80077f4 <lv_obj_add_state+0x54>)
 80077e4:	f00c fff4 	bl	80147d0 <lv_debug_log_error>
 80077e8:	e7fe      	b.n	80077e8 <lv_obj_add_state+0x48>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80077ea:	4802      	ldr	r0, [pc, #8]	; (80077f4 <lv_obj_add_state+0x54>)
 80077ec:	f00c fff0 	bl	80147d0 <lv_debug_log_error>
 80077f0:	e7fe      	b.n	80077f0 <lv_obj_add_state+0x50>
 80077f2:	bf00      	nop
 80077f4:	0801e1d4 	.word	0x0801e1d4

080077f8 <lv_obj_clear_state>:
{
 80077f8:	b510      	push	{r4, lr}
 80077fa:	b082      	sub	sp, #8
 80077fc:	460c      	mov	r4, r1
 80077fe:	9000      	str	r0, [sp, #0]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8007800:	f00c ffe2 	bl	80147c8 <lv_debug_check_null>
 8007804:	9a00      	ldr	r2, [sp, #0]
 8007806:	b1b0      	cbz	r0, 8007836 <lv_obj_clear_state+0x3e>
    lv_state_t new_state = obj->state & (~state);
 8007808:	f892 303d 	ldrb.w	r3, [r2, #61]	; 0x3d
 800780c:	ea23 0104 	bic.w	r1, r3, r4
    if(obj->state != new_state) {
 8007810:	421c      	tst	r4, r3
    lv_state_t new_state = obj->state & (~state);
 8007812:	9101      	str	r1, [sp, #4]
    if(obj->state != new_state) {
 8007814:	d101      	bne.n	800781a <lv_obj_clear_state+0x22>
}
 8007816:	b002      	add	sp, #8
 8007818:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 800781a:	4610      	mov	r0, r2
 800781c:	9200      	str	r2, [sp, #0]
 800781e:	f00c ffd3 	bl	80147c8 <lv_debug_check_null>
 8007822:	4603      	mov	r3, r0
 8007824:	e9dd 2100 	ldrd	r2, r1, [sp]
 8007828:	b150      	cbz	r0, 8007840 <lv_obj_clear_state+0x48>
 800782a:	4610      	mov	r0, r2
}
 800782c:	b002      	add	sp, #8
 800782e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007832:	f7ff bbd1 	b.w	8006fd8 <lv_obj_set_state.part.0>
 8007836:	4603      	mov	r3, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8007838:	4803      	ldr	r0, [pc, #12]	; (8007848 <lv_obj_clear_state+0x50>)
 800783a:	f00c ffc9 	bl	80147d0 <lv_debug_log_error>
 800783e:	e7fe      	b.n	800783e <lv_obj_clear_state+0x46>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8007840:	4801      	ldr	r0, [pc, #4]	; (8007848 <lv_obj_clear_state+0x50>)
 8007842:	f00c ffc5 	bl	80147d0 <lv_debug_log_error>
 8007846:	e7fe      	b.n	8007846 <lv_obj_clear_state+0x4e>
 8007848:	0801e1d4 	.word	0x0801e1d4

0800784c <lv_obj_get_draw_rect_ext_pad_size>:
{
 800784c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_WIDTH, shadow_width, lv_style_int_t, _int, scalar)
 8007850:	2250      	movs	r2, #80	; 0x50
 8007852:	b08b      	sub	sp, #44	; 0x2c
 8007854:	4604      	mov	r4, r0
 8007856:	460d      	mov	r5, r1
 8007858:	f7fd fea2 	bl	80055a0 <_lv_obj_get_style_int>
    if(sh_width) {
 800785c:	bb68      	cbnz	r0, 80078ba <lv_obj_get_draw_rect_ext_pad_size+0x6e>
    lv_coord_t s = 0;
 800785e:	2600      	movs	r6, #0
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_STR, value_str, const char *, _ptr, scalar)
 8007860:	4629      	mov	r1, r5
 8007862:	4620      	mov	r0, r4
 8007864:	f7fe fcbe 	bl	80061e4 <_lv_obj_get_style_ptr.constprop.2>
    if(value_str) {
 8007868:	4607      	mov	r7, r0
 800786a:	b130      	cbz	r0, 800787a <lv_obj_get_draw_rect_ext_pad_size+0x2e>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OPA, value_opa, lv_opa_t, _opa, scalar)
 800786c:	227c      	movs	r2, #124	; 0x7c
 800786e:	4629      	mov	r1, r5
 8007870:	4620      	mov	r0, r4
 8007872:	f7fd fddb 	bl	800542c <_lv_obj_get_style_opa>
        if(value_opa > LV_OPA_MIN) {
 8007876:	2802      	cmp	r0, #2
 8007878:	d861      	bhi.n	800793e <lv_obj_get_draw_rect_ext_pad_size+0xf2>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int, scalar)
 800787a:	2240      	movs	r2, #64	; 0x40
 800787c:	4629      	mov	r1, r5
 800787e:	4620      	mov	r0, r4
 8007880:	f7fd fe8e 	bl	80055a0 <_lv_obj_get_style_int>
    if(outline_width) {
 8007884:	4607      	mov	r7, r0
 8007886:	2800      	cmp	r0, #0
 8007888:	d147      	bne.n	800791a <lv_obj_get_draw_rect_ext_pad_size+0xce>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
 800788a:	2204      	movs	r2, #4
 800788c:	4629      	mov	r1, r5
 800788e:	4620      	mov	r0, r4
 8007890:	f7fd fe86 	bl	80055a0 <_lv_obj_get_style_int>
 8007894:	4603      	mov	r3, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
 8007896:	4620      	mov	r0, r4
 8007898:	4629      	mov	r1, r5
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
 800789a:	461c      	mov	r4, r3
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
 800789c:	2205      	movs	r2, #5
 800789e:	f7fd fe7f 	bl	80055a0 <_lv_obj_get_style_int>
    lv_coord_t wh = LV_MATH_MAX(w, h);
 80078a2:	42a0      	cmp	r0, r4
 80078a4:	bfb8      	it	lt
 80078a6:	4620      	movlt	r0, r4
 80078a8:	b200      	sxth	r0, r0
    if(wh > 0) s += wh;
 80078aa:	2800      	cmp	r0, #0
 80078ac:	dd01      	ble.n	80078b2 <lv_obj_get_draw_rect_ext_pad_size+0x66>
 80078ae:	4430      	add	r0, r6
 80078b0:	b206      	sxth	r6, r0
}
 80078b2:	4630      	mov	r0, r6
 80078b4:	b00b      	add	sp, #44	; 0x2c
 80078b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OPA, shadow_opa, lv_opa_t, _opa, scalar)
 80078ba:	4606      	mov	r6, r0
 80078bc:	225c      	movs	r2, #92	; 0x5c
 80078be:	4629      	mov	r1, r5
 80078c0:	4620      	mov	r0, r4
 80078c2:	f7fd fdb3 	bl	800542c <_lv_obj_get_style_opa>
        if(sh_opa > LV_OPA_MIN) {
 80078c6:	2802      	cmp	r0, #2
 80078c8:	d9c9      	bls.n	800785e <lv_obj_get_draw_rect_ext_pad_size+0x12>
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_SPREAD, shadow_spread, lv_style_int_t, _int, scalar)
 80078ca:	2253      	movs	r2, #83	; 0x53
 80078cc:	4629      	mov	r1, r5
 80078ce:	4620      	mov	r0, r4
 80078d0:	f7fd fe66 	bl	80055a0 <_lv_obj_get_style_int>
            sh_width = sh_width / 2;    /*THe blur adds only half width*/
 80078d4:	2e00      	cmp	r6, #0
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OFS_X, shadow_ofs_x, lv_style_int_t, _int, scalar)
 80078d6:	f04f 0251 	mov.w	r2, #81	; 0x51
 80078da:	4629      	mov	r1, r5
 80078dc:	bfb8      	it	lt
 80078de:	3601      	addlt	r6, #1
            sh_width++;
 80078e0:	eb00 0666 	add.w	r6, r0, r6, asr #1
 80078e4:	4620      	mov	r0, r4
 80078e6:	f7fd fe5b 	bl	80055a0 <_lv_obj_get_style_int>
 80078ea:	4607      	mov	r7, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OFS_Y, shadow_ofs_y, lv_style_int_t, _int, scalar)
 80078ec:	2252      	movs	r2, #82	; 0x52
 80078ee:	4629      	mov	r1, r5
 80078f0:	4620      	mov	r0, r4
            sh_width += lv_obj_get_style_shadow_spread(obj, part);
 80078f2:	3601      	adds	r6, #1
 80078f4:	f7fd fe54 	bl	80055a0 <_lv_obj_get_style_int>
            sh_width += LV_MATH_MAX(LV_MATH_ABS(sh_ofs_x), LV_MATH_ABS(sh_ofs_y));
 80078f8:	2f00      	cmp	r7, #0
            sh_width += lv_obj_get_style_shadow_spread(obj, part);
 80078fa:	b2b6      	uxth	r6, r6
            sh_width += LV_MATH_MAX(LV_MATH_ABS(sh_ofs_x), LV_MATH_ABS(sh_ofs_y));
 80078fc:	bfb8      	it	lt
 80078fe:	427f      	neglt	r7, r7
 8007900:	2800      	cmp	r0, #0
 8007902:	bfb8      	it	lt
 8007904:	4240      	neglt	r0, r0
 8007906:	b2bf      	uxth	r7, r7
 8007908:	b280      	uxth	r0, r0
 800790a:	42b8      	cmp	r0, r7
 800790c:	bf2c      	ite	cs
 800790e:	1837      	addcs	r7, r6, r0
 8007910:	19f7      	addcc	r7, r6, r7
            s = LV_MATH_MAX(s, sh_width);
 8007912:	b238      	sxth	r0, r7
 8007914:	ea20 76e0 	bic.w	r6, r0, r0, asr #31
 8007918:	e7a2      	b.n	8007860 <lv_obj_get_draw_rect_ext_pad_size+0x14>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa, scalar)
 800791a:	224c      	movs	r2, #76	; 0x4c
 800791c:	4629      	mov	r1, r5
 800791e:	4620      	mov	r0, r4
 8007920:	f7fd fd84 	bl	800542c <_lv_obj_get_style_opa>
        if(outline_opa > LV_OPA_MIN) {
 8007924:	2802      	cmp	r0, #2
 8007926:	d9b0      	bls.n	800788a <lv_obj_get_draw_rect_ext_pad_size+0x3e>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_PAD, outline_pad, lv_style_int_t, _int, scalar)
 8007928:	2241      	movs	r2, #65	; 0x41
 800792a:	4629      	mov	r1, r5
 800792c:	4620      	mov	r0, r4
 800792e:	f7fd fe37 	bl	80055a0 <_lv_obj_get_style_int>
            s = LV_MATH_MAX(s, outline_pad + outline_width);
 8007932:	4438      	add	r0, r7
 8007934:	42b0      	cmp	r0, r6
 8007936:	bfb8      	it	lt
 8007938:	4630      	movlt	r0, r6
 800793a:	b206      	sxth	r6, r0
 800793c:	e7a5      	b.n	800788a <lv_obj_get_draw_rect_ext_pad_size+0x3e>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_LETTER_SPACE, value_letter_space, lv_style_int_t, _int, scalar)
 800793e:	2270      	movs	r2, #112	; 0x70
 8007940:	4629      	mov	r1, r5
 8007942:	4620      	mov	r0, r4
            _lv_txt_get_size(&txt_size, value_str, font, letter_space, line_space, LV_COORD_MAX, LV_TXT_FLAG_NONE);
 8007944:	f04f 0800 	mov.w	r8, #0
 8007948:	f7fd fe2a 	bl	80055a0 <_lv_obj_get_style_int>
 800794c:	4603      	mov	r3, r0
 800794e:	2270      	movs	r2, #112	; 0x70
 8007950:	4629      	mov	r1, r5
 8007952:	4620      	mov	r0, r4
 8007954:	9305      	str	r3, [sp, #20]
 8007956:	f7fd fe23 	bl	80055a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_FONT, value_font, const lv_font_t *, _ptr, scalar)
 800795a:	227e      	movs	r2, #126	; 0x7e
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_LETTER_SPACE, value_letter_space, lv_style_int_t, _int, scalar)
 800795c:	4681      	mov	r9, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_FONT, value_font, const lv_font_t *, _ptr, scalar)
 800795e:	4629      	mov	r1, r5
 8007960:	4620      	mov	r0, r4
 8007962:	f7fd facf 	bl	8004f04 <_lv_obj_get_style_ptr>
 8007966:	4602      	mov	r2, r0
 8007968:	f647 4018 	movw	r0, #31768	; 0x7c18
 800796c:	4639      	mov	r1, r7
 800796e:	9b05      	ldr	r3, [sp, #20]
 8007970:	f8cd 9000 	str.w	r9, [sp]
 8007974:	e9cd 0801 	strd	r0, r8, [sp, #4]
 8007978:	a806      	add	r0, sp, #24
 800797a:	f00e fbd3 	bl	8016124 <_lv_txt_get_size>
            value_area.x2 = txt_size.x - 1;
 800797e:	f8bd 7018 	ldrh.w	r7, [sp, #24]
            value_area.y2 = txt_size.y - 1;
 8007982:	f8bd 301a 	ldrh.w	r3, [sp, #26]
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_ALIGN, value_align, lv_align_t, _int, scalar)
 8007986:	2275      	movs	r2, #117	; 0x75
            value_area.x2 = txt_size.x - 1;
 8007988:	3f01      	subs	r7, #1
 800798a:	4629      	mov	r1, r5
            value_area.y2 = txt_size.y - 1;
 800798c:	3b01      	subs	r3, #1
 800798e:	4620      	mov	r0, r4
            value_area.x1 = 0;
 8007990:	f8cd 8020 	str.w	r8, [sp, #32]
            value_area.y2 = txt_size.y - 1;
 8007994:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
            value_area.x2 = txt_size.x - 1;
 8007998:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 800799c:	f7fd fe00 	bl	80055a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_X, value_ofs_x, lv_style_int_t, _int, scalar)
 80079a0:	2273      	movs	r2, #115	; 0x73
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_ALIGN, value_align, lv_align_t, _int, scalar)
 80079a2:	4681      	mov	r9, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_X, value_ofs_x, lv_style_int_t, _int, scalar)
 80079a4:	4629      	mov	r1, r5
 80079a6:	4620      	mov	r0, r4
 80079a8:	f7fd fdfa 	bl	80055a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_Y, value_ofs_y, lv_style_int_t, _int, scalar)
 80079ac:	2274      	movs	r2, #116	; 0x74
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_X, value_ofs_x, lv_style_int_t, _int, scalar)
 80079ae:	4607      	mov	r7, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_Y, value_ofs_y, lv_style_int_t, _int, scalar)
 80079b0:	4629      	mov	r1, r5
 80079b2:	4620      	mov	r0, r4
 80079b4:	f7fd fdf4 	bl	80055a0 <_lv_obj_get_style_int>
            _lv_area_align(&obj->coords, &value_area, align, &p_align);
 80079b8:	ab07      	add	r3, sp, #28
 80079ba:	4680      	mov	r8, r0
 80079bc:	fa5f f289 	uxtb.w	r2, r9
 80079c0:	a908      	add	r1, sp, #32
 80079c2:	f104 0010 	add.w	r0, r4, #16
 80079c6:	f00c fc7b 	bl	80142c0 <_lv_area_align>
            value_area.x1 += p_align.x + xofs;
 80079ca:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80079ce:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 80079d2:	443b      	add	r3, r7
            value_area.y1 += p_align.y + yofs;
 80079d4:	f8bd 201e 	ldrh.w	r2, [sp, #30]
            s = LV_MATH_MAX(s, obj->coords.x1 - value_area.x1);
 80079d8:	f9b4 0010 	ldrsh.w	r0, [r4, #16]
            value_area.x1 += p_align.x + xofs;
 80079dc:	b29b      	uxth	r3, r3
            value_area.y1 += p_align.y + yofs;
 80079de:	4442      	add	r2, r8
 80079e0:	f8bd 7022 	ldrh.w	r7, [sp, #34]	; 0x22
            value_area.x1 += p_align.x + xofs;
 80079e4:	4419      	add	r1, r3
            value_area.y1 += p_align.y + yofs;
 80079e6:	b292      	uxth	r2, r2
            s = LV_MATH_MAX(s, obj->coords.y1 - value_area.y1);
 80079e8:	f9b4 c012 	ldrsh.w	ip, [r4, #18]
            s = LV_MATH_MAX(s, obj->coords.x1 - value_area.x1);
 80079ec:	b209      	sxth	r1, r1
            value_area.y1 += p_align.y + yofs;
 80079ee:	4417      	add	r7, r2
            value_area.x2 += p_align.x + xofs;
 80079f0:	f8bd e024 	ldrh.w	lr, [sp, #36]	; 0x24
            s = LV_MATH_MAX(s, obj->coords.x1 - value_area.x1);
 80079f4:	1a40      	subs	r0, r0, r1
            s = LV_MATH_MAX(s, obj->coords.y1 - value_area.y1);
 80079f6:	b23f      	sxth	r7, r7
            value_area.y2 += p_align.y + yofs;
 80079f8:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
            value_area.x2 += p_align.x + xofs;
 80079fc:	4473      	add	r3, lr
            s = LV_MATH_MAX(s, obj->coords.x1 - value_area.x1);
 80079fe:	42b0      	cmp	r0, r6
            s = LV_MATH_MAX(s, obj->coords.y1 - value_area.y1);
 8007a00:	ebac 0707 	sub.w	r7, ip, r7
            value_area.y2 += p_align.y + yofs;
 8007a04:	440a      	add	r2, r1
            s = LV_MATH_MAX(s, value_area.x2 - obj->coords.x2);
 8007a06:	f9b4 e014 	ldrsh.w	lr, [r4, #20]
            s = LV_MATH_MAX(s, obj->coords.x1 - value_area.x1);
 8007a0a:	bfb8      	it	lt
 8007a0c:	4630      	movlt	r0, r6
            s = LV_MATH_MAX(s, value_area.x2 - obj->coords.x2);
 8007a0e:	b21b      	sxth	r3, r3
            s = LV_MATH_MAX(s, value_area.y2 - obj->coords.y2);
 8007a10:	f9b4 c016 	ldrsh.w	ip, [r4, #22]
 8007a14:	b216      	sxth	r6, r2
            s = LV_MATH_MAX(s, obj->coords.y1 - value_area.y1);
 8007a16:	b201      	sxth	r1, r0
            s = LV_MATH_MAX(s, value_area.x2 - obj->coords.x2);
 8007a18:	eba3 030e 	sub.w	r3, r3, lr
            s = LV_MATH_MAX(s, value_area.y2 - obj->coords.y2);
 8007a1c:	eba6 060c 	sub.w	r6, r6, ip
            s = LV_MATH_MAX(s, obj->coords.y1 - value_area.y1);
 8007a20:	42b9      	cmp	r1, r7
 8007a22:	bfb8      	it	lt
 8007a24:	4639      	movlt	r1, r7
            s = LV_MATH_MAX(s, value_area.x2 - obj->coords.x2);
 8007a26:	b208      	sxth	r0, r1
 8007a28:	4283      	cmp	r3, r0
 8007a2a:	bfb8      	it	lt
 8007a2c:	4603      	movlt	r3, r0
            s = LV_MATH_MAX(s, value_area.y2 - obj->coords.y2);
 8007a2e:	b218      	sxth	r0, r3
 8007a30:	42b0      	cmp	r0, r6
 8007a32:	bfb8      	it	lt
 8007a34:	4630      	movlt	r0, r6
 8007a36:	b206      	sxth	r6, r0
 8007a38:	e71f      	b.n	800787a <lv_obj_get_draw_rect_ext_pad_size+0x2e>
 8007a3a:	bf00      	nop

08007a3c <lv_obj_signal>:
    if(sign == LV_SIGNAL_GET_STYLE) {
 8007a3c:	2908      	cmp	r1, #8
{
 8007a3e:	b530      	push	{r4, r5, lr}
 8007a40:	4605      	mov	r5, r0
 8007a42:	b083      	sub	sp, #12
    if(sign == LV_SIGNAL_GET_STYLE) {
 8007a44:	d01c      	beq.n	8007a80 <lv_obj_signal+0x44>
    else if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
 8007a46:	2907      	cmp	r1, #7
 8007a48:	d035      	beq.n	8007ab6 <lv_obj_signal+0x7a>
    if(sign == LV_SIGNAL_CHILD_CHG) {
 8007a4a:	2901      	cmp	r1, #1
 8007a4c:	d020      	beq.n	8007a90 <lv_obj_signal+0x54>
    else if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
 8007a4e:	2906      	cmp	r1, #6
 8007a50:	d05b      	beq.n	8007b0a <lv_obj_signal+0xce>
    else if(sign == LV_SIGNAL_PARENT_SIZE_CHG) {
 8007a52:	2903      	cmp	r1, #3
 8007a54:	d051      	beq.n	8007afa <lv_obj_signal+0xbe>
    else if(sign == LV_SIGNAL_STYLE_CHG) {
 8007a56:	2904      	cmp	r1, #4
 8007a58:	d064      	beq.n	8007b24 <lv_obj_signal+0xe8>
    else if(sign == LV_SIGNAL_PRESSED) {
 8007a5a:	290b      	cmp	r1, #11
 8007a5c:	d06c      	beq.n	8007b38 <lv_obj_signal+0xfc>
    else if(sign == LV_SIGNAL_RELEASED || sign == LV_SIGNAL_PRESS_LOST) {
 8007a5e:	f1a1 030d 	sub.w	r3, r1, #13
 8007a62:	2b01      	cmp	r3, #1
 8007a64:	f240 8094 	bls.w	8007b90 <lv_obj_signal+0x154>
    else if(sign == LV_SIGNAL_FOCUS) {
 8007a68:	2916      	cmp	r1, #22
 8007a6a:	f000 80d8 	beq.w	8007c1e <lv_obj_signal+0x1e2>
    else if(sign == LV_SIGNAL_DEFOCUS) {
 8007a6e:	2917      	cmp	r1, #23
 8007a70:	f000 80ac 	beq.w	8007bcc <lv_obj_signal+0x190>
    else if(sign == LV_SIGNAL_CLEANUP) {
 8007a74:	2900      	cmp	r1, #0
 8007a76:	d073      	beq.n	8007b60 <lv_obj_signal+0x124>
 8007a78:	2401      	movs	r4, #1
}
 8007a7a:	4620      	mov	r0, r4
 8007a7c:	b003      	add	sp, #12
 8007a7e:	bd30      	pop	{r4, r5, pc}
        if(info->part == LV_OBJ_PART_MAIN) info->result = &obj->style_list;
 8007a80:	7813      	ldrb	r3, [r2, #0]
 8007a82:	b993      	cbnz	r3, 8007aaa <lv_obj_signal+0x6e>
        return LV_RES_OK;
 8007a84:	2401      	movs	r4, #1
        if(info->part == LV_OBJ_PART_MAIN) info->result = &obj->style_list;
 8007a86:	3528      	adds	r5, #40	; 0x28
}
 8007a88:	4620      	mov	r0, r4
        if(info->part == LV_OBJ_PART_MAIN) info->result = &obj->style_list;
 8007a8a:	6055      	str	r5, [r2, #4]
}
 8007a8c:	b003      	add	sp, #12
 8007a8e:	bd30      	pop	{r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8007a90:	f00c fe9a 	bl	80147c8 <lv_debug_check_null>
 8007a94:	2800      	cmp	r0, #0
 8007a96:	f000 8093 	beq.w	8007bc0 <lv_obj_signal+0x184>
    return (obj->protect & prot) == 0 ? false : true;
 8007a9a:	f895 403c 	ldrb.w	r4, [r5, #60]	; 0x3c
 8007a9e:	43e4      	mvns	r4, r4
 8007aa0:	f004 0401 	and.w	r4, r4, #1
}
 8007aa4:	4620      	mov	r0, r4
 8007aa6:	b003      	add	sp, #12
 8007aa8:	bd30      	pop	{r4, r5, pc}
        return LV_RES_OK;
 8007aaa:	2401      	movs	r4, #1
        else info->result = NULL;
 8007aac:	2300      	movs	r3, #0
}
 8007aae:	4620      	mov	r0, r4
        else info->result = NULL;
 8007ab0:	6053      	str	r3, [r2, #4]
}
 8007ab2:	b003      	add	sp, #12
 8007ab4:	bd30      	pop	{r4, r5, pc}
        if(buf->type[i] == NULL) break;
 8007ab6:	6813      	ldr	r3, [r2, #0]
 8007ab8:	b1c3      	cbz	r3, 8007aec <lv_obj_signal+0xb0>
 8007aba:	6853      	ldr	r3, [r2, #4]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	f000 812c 	beq.w	8007d1a <lv_obj_signal+0x2de>
 8007ac2:	6893      	ldr	r3, [r2, #8]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	f000 8130 	beq.w	8007d2a <lv_obj_signal+0x2ee>
 8007aca:	68d3      	ldr	r3, [r2, #12]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	f000 812e 	beq.w	8007d2e <lv_obj_signal+0x2f2>
 8007ad2:	6913      	ldr	r3, [r2, #16]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	f000 812c 	beq.w	8007d32 <lv_obj_signal+0x2f6>
 8007ada:	6953      	ldr	r3, [r2, #20]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	f000 812a 	beq.w	8007d36 <lv_obj_signal+0x2fa>
 8007ae2:	6993      	ldr	r3, [r2, #24]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	bf14      	ite	ne
 8007ae8:	2307      	movne	r3, #7
 8007aea:	2306      	moveq	r3, #6
    else if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
 8007aec:	2401      	movs	r4, #1
    buf->type[i] = name;
 8007aee:	49a7      	ldr	r1, [pc, #668]	; (8007d8c <lv_obj_signal+0x350>)
}
 8007af0:	4620      	mov	r0, r4
    buf->type[i] = name;
 8007af2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8007af6:	b003      	add	sp, #12
 8007af8:	bd30      	pop	{r4, r5, pc}
        if(obj->realign.auto_realign) {
 8007afa:	f890 4049 	ldrb.w	r4, [r0, #73]	; 0x49
 8007afe:	f014 0401 	ands.w	r4, r4, #1
 8007b02:	d0b9      	beq.n	8007a78 <lv_obj_signal+0x3c>
            lv_obj_realign(obj);
 8007b04:	f7fc fd0c 	bl	8004520 <lv_obj_realign>
 8007b08:	e7cc      	b.n	8007aa4 <lv_obj_signal+0x68>
        lv_coord_t d = lv_obj_get_draw_rect_ext_pad_size(obj, LV_OBJ_PART_MAIN);
 8007b0a:	2100      	movs	r1, #0
    lv_res_t res = LV_RES_OK;
 8007b0c:	2401      	movs	r4, #1
        lv_coord_t d = lv_obj_get_draw_rect_ext_pad_size(obj, LV_OBJ_PART_MAIN);
 8007b0e:	f7ff fe9d 	bl	800784c <lv_obj_get_draw_rect_ext_pad_size>
        obj->ext_draw_pad = LV_MATH_MAX(obj->ext_draw_pad, d);
 8007b12:	f9b5 3032 	ldrsh.w	r3, [r5, #50]	; 0x32
 8007b16:	4298      	cmp	r0, r3
 8007b18:	bfb8      	it	lt
 8007b1a:	4618      	movlt	r0, r3
 8007b1c:	8668      	strh	r0, [r5, #50]	; 0x32
}
 8007b1e:	4620      	mov	r0, r4
 8007b20:	b003      	add	sp, #12
 8007b22:	bd30      	pop	{r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8007b24:	f00c fe50 	bl	80147c8 <lv_debug_check_null>
 8007b28:	b330      	cbz	r0, 8007b78 <lv_obj_signal+0x13c>
    obj->ext_draw_pad = 0;
 8007b2a:	2200      	movs	r2, #0
    obj->signal_cb(obj, LV_SIGNAL_REFR_EXT_DRAW_PAD, NULL);
 8007b2c:	69eb      	ldr	r3, [r5, #28]
 8007b2e:	4628      	mov	r0, r5
 8007b30:	2106      	movs	r1, #6
    obj->ext_draw_pad = 0;
 8007b32:	866a      	strh	r2, [r5, #50]	; 0x32
    obj->signal_cb(obj, LV_SIGNAL_REFR_EXT_DRAW_PAD, NULL);
 8007b34:	4798      	blx	r3
 8007b36:	e79f      	b.n	8007a78 <lv_obj_signal+0x3c>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8007b38:	f00c fe46 	bl	80147c8 <lv_debug_check_null>
 8007b3c:	2800      	cmp	r0, #0
 8007b3e:	f000 80e0 	beq.w	8007d02 <lv_obj_signal+0x2c6>
    lv_state_t new_state = obj->state | state;
 8007b42:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
 8007b46:	f043 0410 	orr.w	r4, r3, #16
    if(obj->state != new_state) {
 8007b4a:	42a3      	cmp	r3, r4
 8007b4c:	d094      	beq.n	8007a78 <lv_obj_signal+0x3c>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8007b4e:	4628      	mov	r0, r5
 8007b50:	f00c fe3a 	bl	80147c8 <lv_debug_check_null>
 8007b54:	b1b0      	cbz	r0, 8007b84 <lv_obj_signal+0x148>
 8007b56:	4621      	mov	r1, r4
 8007b58:	4628      	mov	r0, r5
 8007b5a:	f7ff fa3d 	bl	8006fd8 <lv_obj_set_state.part.0>
 8007b5e:	e78b      	b.n	8007a78 <lv_obj_signal+0x3c>
    _lv_style_list_reset(style_dsc);
 8007b60:	3028      	adds	r0, #40	; 0x28
 8007b62:	9101      	str	r1, [sp, #4]
 8007b64:	f001 f9a6 	bl	8008eb4 <_lv_style_list_reset>
    trans_del(obj, part, 0xFF, NULL);
 8007b68:	9901      	ldr	r1, [sp, #4]
 8007b6a:	4628      	mov	r0, r5
 8007b6c:	22ff      	movs	r2, #255	; 0xff
 8007b6e:	460b      	mov	r3, r1
 8007b70:	2401      	movs	r4, #1
 8007b72:	f7fb fc1b 	bl	80033ac <trans_del>
 8007b76:	e795      	b.n	8007aa4 <lv_obj_signal+0x68>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8007b78:	4603      	mov	r3, r0
 8007b7a:	462a      	mov	r2, r5
 8007b7c:	4884      	ldr	r0, [pc, #528]	; (8007d90 <lv_obj_signal+0x354>)
 8007b7e:	f00c fe27 	bl	80147d0 <lv_debug_log_error>
 8007b82:	e7fe      	b.n	8007b82 <lv_obj_signal+0x146>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8007b84:	462a      	mov	r2, r5
 8007b86:	2300      	movs	r3, #0
 8007b88:	4881      	ldr	r0, [pc, #516]	; (8007d90 <lv_obj_signal+0x354>)
 8007b8a:	f00c fe21 	bl	80147d0 <lv_debug_log_error>
 8007b8e:	e7fe      	b.n	8007b8e <lv_obj_signal+0x152>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8007b90:	f00c fe1a 	bl	80147c8 <lv_debug_check_null>
 8007b94:	2800      	cmp	r0, #0
 8007b96:	f000 80ba 	beq.w	8007d0e <lv_obj_signal+0x2d2>
    lv_state_t new_state = obj->state & (~state);
 8007b9a:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
 8007b9e:	f003 04ef 	and.w	r4, r3, #239	; 0xef
    if(obj->state != new_state) {
 8007ba2:	f033 03ef 	bics.w	r3, r3, #239	; 0xef
 8007ba6:	f43f af67 	beq.w	8007a78 <lv_obj_signal+0x3c>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8007baa:	4628      	mov	r0, r5
 8007bac:	f00c fe0c 	bl	80147c8 <lv_debug_check_null>
 8007bb0:	2800      	cmp	r0, #0
 8007bb2:	d1d0      	bne.n	8007b56 <lv_obj_signal+0x11a>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	462a      	mov	r2, r5
 8007bb8:	4875      	ldr	r0, [pc, #468]	; (8007d90 <lv_obj_signal+0x354>)
 8007bba:	f00c fe09 	bl	80147d0 <lv_debug_log_error>
 8007bbe:	e7fe      	b.n	8007bbe <lv_obj_signal+0x182>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	462a      	mov	r2, r5
 8007bc4:	4872      	ldr	r0, [pc, #456]	; (8007d90 <lv_obj_signal+0x354>)
 8007bc6:	f00c fe03 	bl	80147d0 <lv_debug_log_error>
 8007bca:	e7fe      	b.n	8007bca <lv_obj_signal+0x18e>
    if(obj == NULL) return NULL;
 8007bcc:	b170      	cbz	r0, 8007bec <lv_obj_signal+0x1b0>
    return obj->focus_parent == 0 ? false : true;
 8007bce:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
    while(lv_obj_get_focus_parent(focus_obj) != false && focus_obj != NULL) {
 8007bd2:	079b      	lsls	r3, r3, #30
 8007bd4:	d50a      	bpl.n	8007bec <lv_obj_signal+0x1b0>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8007bd6:	4628      	mov	r0, r5
 8007bd8:	f00c fdf6 	bl	80147c8 <lv_debug_check_null>
 8007bdc:	2800      	cmp	r0, #0
 8007bde:	f000 808a 	beq.w	8007cf6 <lv_obj_signal+0x2ba>
    return obj->parent;
 8007be2:	682d      	ldr	r5, [r5, #0]
    return obj->focus_parent == 0 ? false : true;
 8007be4:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
    while(lv_obj_get_focus_parent(focus_obj) != false && focus_obj != NULL) {
 8007be8:	079b      	lsls	r3, r3, #30
 8007bea:	d4f4      	bmi.n	8007bd6 <lv_obj_signal+0x19a>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8007bec:	4628      	mov	r0, r5
 8007bee:	f00c fdeb 	bl	80147c8 <lv_debug_check_null>
 8007bf2:	2800      	cmp	r0, #0
 8007bf4:	f000 80ad 	beq.w	8007d52 <lv_obj_signal+0x316>
    lv_state_t new_state = obj->state & (~state);
 8007bf8:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
 8007bfc:	f003 04f9 	and.w	r4, r3, #249	; 0xf9
    if(obj->state != new_state) {
 8007c00:	f033 03f9 	bics.w	r3, r3, #249	; 0xf9
 8007c04:	f43f af38 	beq.w	8007a78 <lv_obj_signal+0x3c>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8007c08:	4628      	mov	r0, r5
 8007c0a:	f00c fddd 	bl	80147c8 <lv_debug_check_null>
 8007c0e:	2800      	cmp	r0, #0
 8007c10:	d1a1      	bne.n	8007b56 <lv_obj_signal+0x11a>
 8007c12:	4603      	mov	r3, r0
 8007c14:	462a      	mov	r2, r5
 8007c16:	485e      	ldr	r0, [pc, #376]	; (8007d90 <lv_obj_signal+0x354>)
 8007c18:	f00c fdda 	bl	80147d0 <lv_debug_log_error>
 8007c1c:	e7fe      	b.n	8007c1c <lv_obj_signal+0x1e0>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8007c1e:	f00c fdd3 	bl	80147c8 <lv_debug_check_null>
 8007c22:	2800      	cmp	r0, #0
 8007c24:	d07b      	beq.n	8007d1e <lv_obj_signal+0x2e2>
        editing = lv_group_get_editing(lv_obj_get_group(obj));
 8007c26:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8007c28:	f7f9 fece 	bl	80019c8 <lv_group_get_editing>
    return obj->focus_parent == 0 ? false : true;
 8007c2c:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
        if(editing) {
 8007c30:	b320      	cbz	r0, 8007c7c <lv_obj_signal+0x240>
    while(lv_obj_get_focus_parent(focus_obj) != false && focus_obj != NULL) {
 8007c32:	0799      	lsls	r1, r3, #30
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8007c34:	4628      	mov	r0, r5
    while(lv_obj_get_focus_parent(focus_obj) != false && focus_obj != NULL) {
 8007c36:	d509      	bpl.n	8007c4c <lv_obj_signal+0x210>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8007c38:	f00c fdc6 	bl	80147c8 <lv_debug_check_null>
 8007c3c:	2800      	cmp	r0, #0
 8007c3e:	d07c      	beq.n	8007d3a <lv_obj_signal+0x2fe>
    return obj->parent;
 8007c40:	682d      	ldr	r5, [r5, #0]
    return obj->focus_parent == 0 ? false : true;
 8007c42:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8007c46:	4628      	mov	r0, r5
    while(lv_obj_get_focus_parent(focus_obj) != false && focus_obj != NULL) {
 8007c48:	0799      	lsls	r1, r3, #30
 8007c4a:	d4f5      	bmi.n	8007c38 <lv_obj_signal+0x1fc>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8007c4c:	f00c fdbc 	bl	80147c8 <lv_debug_check_null>
 8007c50:	2800      	cmp	r0, #0
 8007c52:	f000 8084 	beq.w	8007d5e <lv_obj_signal+0x322>
    lv_state_t new_state = obj->state | state;
 8007c56:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
 8007c5a:	f043 0406 	orr.w	r4, r3, #6
    if(obj->state != new_state) {
 8007c5e:	42a3      	cmp	r3, r4
 8007c60:	f43f af0a 	beq.w	8007a78 <lv_obj_signal+0x3c>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8007c64:	4628      	mov	r0, r5
 8007c66:	f00c fdaf 	bl	80147c8 <lv_debug_check_null>
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	2800      	cmp	r0, #0
 8007c6e:	f47f af72 	bne.w	8007b56 <lv_obj_signal+0x11a>
 8007c72:	462a      	mov	r2, r5
 8007c74:	4846      	ldr	r0, [pc, #280]	; (8007d90 <lv_obj_signal+0x354>)
 8007c76:	f00c fdab 	bl	80147d0 <lv_debug_log_error>
 8007c7a:	e7fe      	b.n	8007c7a <lv_obj_signal+0x23e>
    while(lv_obj_get_focus_parent(focus_obj) != false && focus_obj != NULL) {
 8007c7c:	079a      	lsls	r2, r3, #30
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8007c7e:	4628      	mov	r0, r5
    while(lv_obj_get_focus_parent(focus_obj) != false && focus_obj != NULL) {
 8007c80:	d509      	bpl.n	8007c96 <lv_obj_signal+0x25a>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8007c82:	f00c fda1 	bl	80147c8 <lv_debug_check_null>
 8007c86:	2800      	cmp	r0, #0
 8007c88:	d05d      	beq.n	8007d46 <lv_obj_signal+0x30a>
    return obj->parent;
 8007c8a:	682d      	ldr	r5, [r5, #0]
    return obj->focus_parent == 0 ? false : true;
 8007c8c:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8007c90:	4628      	mov	r0, r5
    while(lv_obj_get_focus_parent(focus_obj) != false && focus_obj != NULL) {
 8007c92:	079a      	lsls	r2, r3, #30
 8007c94:	d4f5      	bmi.n	8007c82 <lv_obj_signal+0x246>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8007c96:	f00c fd97 	bl	80147c8 <lv_debug_check_null>
 8007c9a:	2800      	cmp	r0, #0
 8007c9c:	d065      	beq.n	8007d6a <lv_obj_signal+0x32e>
    lv_state_t new_state = obj->state | state;
 8007c9e:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
 8007ca2:	f043 0402 	orr.w	r4, r3, #2
    if(obj->state != new_state) {
 8007ca6:	42a3      	cmp	r3, r4
 8007ca8:	d009      	beq.n	8007cbe <lv_obj_signal+0x282>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8007caa:	4628      	mov	r0, r5
 8007cac:	f00c fd8c 	bl	80147c8 <lv_debug_check_null>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	2800      	cmp	r0, #0
 8007cb4:	d064      	beq.n	8007d80 <lv_obj_signal+0x344>
 8007cb6:	4621      	mov	r1, r4
 8007cb8:	4628      	mov	r0, r5
 8007cba:	f7ff f98d 	bl	8006fd8 <lv_obj_set_state.part.0>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8007cbe:	4628      	mov	r0, r5
 8007cc0:	f00c fd82 	bl	80147c8 <lv_debug_check_null>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	2800      	cmp	r0, #0
 8007cc8:	d055      	beq.n	8007d76 <lv_obj_signal+0x33a>
    lv_state_t new_state = obj->state & (~state);
 8007cca:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
 8007cce:	f003 01fb 	and.w	r1, r3, #251	; 0xfb
    if(obj->state != new_state) {
 8007cd2:	f033 03fb 	bics.w	r3, r3, #251	; 0xfb
    lv_state_t new_state = obj->state & (~state);
 8007cd6:	9101      	str	r1, [sp, #4]
    if(obj->state != new_state) {
 8007cd8:	f43f aece 	beq.w	8007a78 <lv_obj_signal+0x3c>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8007cdc:	4628      	mov	r0, r5
 8007cde:	f00c fd73 	bl	80147c8 <lv_debug_check_null>
 8007ce2:	9901      	ldr	r1, [sp, #4]
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	2800      	cmp	r0, #0
 8007ce8:	f47f af36 	bne.w	8007b58 <lv_obj_signal+0x11c>
 8007cec:	462a      	mov	r2, r5
 8007cee:	4828      	ldr	r0, [pc, #160]	; (8007d90 <lv_obj_signal+0x354>)
 8007cf0:	f00c fd6e 	bl	80147d0 <lv_debug_log_error>
 8007cf4:	e7fe      	b.n	8007cf4 <lv_obj_signal+0x2b8>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	462a      	mov	r2, r5
 8007cfa:	4825      	ldr	r0, [pc, #148]	; (8007d90 <lv_obj_signal+0x354>)
 8007cfc:	f00c fd68 	bl	80147d0 <lv_debug_log_error>
 8007d00:	e7fe      	b.n	8007d00 <lv_obj_signal+0x2c4>
 8007d02:	4603      	mov	r3, r0
 8007d04:	462a      	mov	r2, r5
 8007d06:	4822      	ldr	r0, [pc, #136]	; (8007d90 <lv_obj_signal+0x354>)
 8007d08:	f00c fd62 	bl	80147d0 <lv_debug_log_error>
 8007d0c:	e7fe      	b.n	8007d0c <lv_obj_signal+0x2d0>
 8007d0e:	4603      	mov	r3, r0
 8007d10:	462a      	mov	r2, r5
 8007d12:	481f      	ldr	r0, [pc, #124]	; (8007d90 <lv_obj_signal+0x354>)
 8007d14:	f00c fd5c 	bl	80147d0 <lv_debug_log_error>
 8007d18:	e7fe      	b.n	8007d18 <lv_obj_signal+0x2dc>
        if(buf->type[i] == NULL) break;
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	e6e6      	b.n	8007aec <lv_obj_signal+0xb0>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8007d1e:	462a      	mov	r2, r5
 8007d20:	2300      	movs	r3, #0
 8007d22:	481b      	ldr	r0, [pc, #108]	; (8007d90 <lv_obj_signal+0x354>)
 8007d24:	f00c fd54 	bl	80147d0 <lv_debug_log_error>
 8007d28:	e7fe      	b.n	8007d28 <lv_obj_signal+0x2ec>
        if(buf->type[i] == NULL) break;
 8007d2a:	2302      	movs	r3, #2
 8007d2c:	e6de      	b.n	8007aec <lv_obj_signal+0xb0>
 8007d2e:	2303      	movs	r3, #3
 8007d30:	e6dc      	b.n	8007aec <lv_obj_signal+0xb0>
 8007d32:	2304      	movs	r3, #4
 8007d34:	e6da      	b.n	8007aec <lv_obj_signal+0xb0>
 8007d36:	2305      	movs	r3, #5
 8007d38:	e6d8      	b.n	8007aec <lv_obj_signal+0xb0>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8007d3a:	4603      	mov	r3, r0
 8007d3c:	462a      	mov	r2, r5
 8007d3e:	4814      	ldr	r0, [pc, #80]	; (8007d90 <lv_obj_signal+0x354>)
 8007d40:	f00c fd46 	bl	80147d0 <lv_debug_log_error>
 8007d44:	e7fe      	b.n	8007d44 <lv_obj_signal+0x308>
 8007d46:	4603      	mov	r3, r0
 8007d48:	462a      	mov	r2, r5
 8007d4a:	4811      	ldr	r0, [pc, #68]	; (8007d90 <lv_obj_signal+0x354>)
 8007d4c:	f00c fd40 	bl	80147d0 <lv_debug_log_error>
 8007d50:	e7fe      	b.n	8007d50 <lv_obj_signal+0x314>
 8007d52:	4603      	mov	r3, r0
 8007d54:	462a      	mov	r2, r5
 8007d56:	480e      	ldr	r0, [pc, #56]	; (8007d90 <lv_obj_signal+0x354>)
 8007d58:	f00c fd3a 	bl	80147d0 <lv_debug_log_error>
 8007d5c:	e7fe      	b.n	8007d5c <lv_obj_signal+0x320>
 8007d5e:	4603      	mov	r3, r0
 8007d60:	462a      	mov	r2, r5
 8007d62:	480b      	ldr	r0, [pc, #44]	; (8007d90 <lv_obj_signal+0x354>)
 8007d64:	f00c fd34 	bl	80147d0 <lv_debug_log_error>
 8007d68:	e7fe      	b.n	8007d68 <lv_obj_signal+0x32c>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	462a      	mov	r2, r5
 8007d6e:	4808      	ldr	r0, [pc, #32]	; (8007d90 <lv_obj_signal+0x354>)
 8007d70:	f00c fd2e 	bl	80147d0 <lv_debug_log_error>
 8007d74:	e7fe      	b.n	8007d74 <lv_obj_signal+0x338>
 8007d76:	462a      	mov	r2, r5
 8007d78:	4805      	ldr	r0, [pc, #20]	; (8007d90 <lv_obj_signal+0x354>)
 8007d7a:	f00c fd29 	bl	80147d0 <lv_debug_log_error>
 8007d7e:	e7fe      	b.n	8007d7e <lv_obj_signal+0x342>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8007d80:	462a      	mov	r2, r5
 8007d82:	4803      	ldr	r0, [pc, #12]	; (8007d90 <lv_obj_signal+0x354>)
 8007d84:	f00c fd24 	bl	80147d0 <lv_debug_log_error>
 8007d88:	e7fe      	b.n	8007d88 <lv_obj_signal+0x34c>
 8007d8a:	bf00      	nop
 8007d8c:	0801e1e4 	.word	0x0801e1e4
 8007d90:	0801e1d4 	.word	0x0801e1d4

08007d94 <lv_obj_get_focused_obj>:
{
 8007d94:	b510      	push	{r4, lr}
    if(obj == NULL) return NULL;
 8007d96:	4604      	mov	r4, r0
 8007d98:	b160      	cbz	r0, 8007db4 <lv_obj_get_focused_obj+0x20>
    return obj->focus_parent == 0 ? false : true;
 8007d9a:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
    while(lv_obj_get_focus_parent(focus_obj) != false && focus_obj != NULL) {
 8007d9e:	079b      	lsls	r3, r3, #30
 8007da0:	d508      	bpl.n	8007db4 <lv_obj_get_focused_obj+0x20>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8007da2:	4620      	mov	r0, r4
 8007da4:	f00c fd10 	bl	80147c8 <lv_debug_check_null>
 8007da8:	b130      	cbz	r0, 8007db8 <lv_obj_get_focused_obj+0x24>
    return obj->parent;
 8007daa:	6824      	ldr	r4, [r4, #0]
    return obj->focus_parent == 0 ? false : true;
 8007dac:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
    while(lv_obj_get_focus_parent(focus_obj) != false && focus_obj != NULL) {
 8007db0:	079b      	lsls	r3, r3, #30
 8007db2:	d4f6      	bmi.n	8007da2 <lv_obj_get_focused_obj+0xe>
}
 8007db4:	4620      	mov	r0, r4
 8007db6:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8007db8:	4603      	mov	r3, r0
 8007dba:	4622      	mov	r2, r4
 8007dbc:	4801      	ldr	r0, [pc, #4]	; (8007dc4 <lv_obj_get_focused_obj+0x30>)
 8007dbe:	f00c fd07 	bl	80147d0 <lv_debug_log_error>
 8007dc2:	e7fe      	b.n	8007dc2 <lv_obj_get_focused_obj+0x2e>
 8007dc4:	0801e1d4 	.word	0x0801e1d4

08007dc8 <lv_refr_vdb_flush>:

/**
 * Flush the content of the VDB
 */
static void lv_refr_vdb_flush(void)
{
 8007dc8:	b570      	push	{r4, r5, r6, lr}
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 8007dca:	4e1b      	ldr	r6, [pc, #108]	; (8007e38 <lv_refr_vdb_flush+0x70>)
 8007dcc:	6830      	ldr	r0, [r6, #0]
 8007dce:	f00b fdc9 	bl	8013964 <lv_disp_get_buf>
 8007dd2:	4604      	mov	r4, r0

    /*In double buffered mode wait until the other buffer is flushed before flushing the current
     * one*/
    if(lv_disp_is_double_buf(disp_refr)) {
 8007dd4:	6830      	ldr	r0, [r6, #0]
 8007dd6:	f00b fde5 	bl	80139a4 <lv_disp_is_double_buf>
 8007dda:	bb10      	cbnz	r0, 8007e22 <lv_refr_vdb_flush+0x5a>
 8007ddc:	6835      	ldr	r5, [r6, #0]
        }
    }

    vdb->flushing = 1;

    if(disp_refr->driver.buffer->last_area && disp_refr->driver.buffer->last_part) vdb->flushing_last = 1;
 8007dde:	686b      	ldr	r3, [r5, #4]
    vdb->flushing = 1;
 8007de0:	2201      	movs	r2, #1
 8007de2:	61a2      	str	r2, [r4, #24]
    if(disp_refr->driver.buffer->last_area && disp_refr->driver.buffer->last_part) vdb->flushing_last = 1;
 8007de4:	6a19      	ldr	r1, [r3, #32]
 8007de6:	07c9      	lsls	r1, r1, #31
 8007de8:	d502      	bpl.n	8007df0 <lv_refr_vdb_flush+0x28>
 8007dea:	6a1b      	ldr	r3, [r3, #32]
 8007dec:	079b      	lsls	r3, r3, #30
 8007dee:	d420      	bmi.n	8007e32 <lv_refr_vdb_flush+0x6a>
    else vdb->flushing_last = 0;
 8007df0:	2300      	movs	r3, #0
 8007df2:	61e3      	str	r3, [r4, #28]

    /*Flush the rendered content to the display*/
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
    if(disp->driver.gpu_wait_cb) disp->driver.gpu_wait_cb(&disp->driver);
 8007df4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007df6:	b10b      	cbz	r3, 8007dfc <lv_refr_vdb_flush+0x34>
 8007df8:	4628      	mov	r0, r5
 8007dfa:	4798      	blx	r3

    if(disp->driver.flush_cb) disp->driver.flush_cb(&disp->driver, &vdb->area, vdb->buf_act);
 8007dfc:	68eb      	ldr	r3, [r5, #12]
 8007dfe:	b123      	cbz	r3, 8007e0a <lv_refr_vdb_flush+0x42>
 8007e00:	4628      	mov	r0, r5
 8007e02:	68a2      	ldr	r2, [r4, #8]
 8007e04:	f104 0110 	add.w	r1, r4, #16
 8007e08:	4798      	blx	r3

    if(vdb->buf1 && vdb->buf2) {
 8007e0a:	6823      	ldr	r3, [r4, #0]
 8007e0c:	b133      	cbz	r3, 8007e1c <lv_refr_vdb_flush+0x54>
 8007e0e:	6862      	ldr	r2, [r4, #4]
 8007e10:	b122      	cbz	r2, 8007e1c <lv_refr_vdb_flush+0x54>
        if(vdb->buf_act == vdb->buf1)
 8007e12:	68a1      	ldr	r1, [r4, #8]
            vdb->buf_act = vdb->buf2;
 8007e14:	428b      	cmp	r3, r1
 8007e16:	bf08      	it	eq
 8007e18:	4613      	moveq	r3, r2
 8007e1a:	60a3      	str	r3, [r4, #8]
        else
            vdb->buf_act = vdb->buf1;
    }
}
 8007e1c:	bd70      	pop	{r4, r5, r6, pc}
            if(disp_refr->driver.wait_cb) disp_refr->driver.wait_cb(&disp_refr->driver);
 8007e1e:	4628      	mov	r0, r5
 8007e20:	4798      	blx	r3
 8007e22:	6835      	ldr	r5, [r6, #0]
        while(vdb->flushing) {
 8007e24:	69a3      	ldr	r3, [r4, #24]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d0d9      	beq.n	8007dde <lv_refr_vdb_flush+0x16>
            if(disp_refr->driver.wait_cb) disp_refr->driver.wait_cb(&disp_refr->driver);
 8007e2a:	69eb      	ldr	r3, [r5, #28]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d0f9      	beq.n	8007e24 <lv_refr_vdb_flush+0x5c>
 8007e30:	e7f5      	b.n	8007e1e <lv_refr_vdb_flush+0x56>
    if(disp_refr->driver.buffer->last_area && disp_refr->driver.buffer->last_part) vdb->flushing_last = 1;
 8007e32:	61e2      	str	r2, [r4, #28]
 8007e34:	e7de      	b.n	8007df4 <lv_refr_vdb_flush+0x2c>
 8007e36:	bf00      	nop
 8007e38:	2001789c 	.word	0x2001789c

08007e3c <lv_refr_obj.part.0>:
static void lv_refr_obj(lv_obj_t * obj, const lv_area_t * mask_ori_p)
 8007e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e3e:	b08b      	sub	sp, #44	; 0x2c
    lv_coord_t ext_size = obj->ext_draw_pad;
 8007e40:	f9b0 4032 	ldrsh.w	r4, [r0, #50]	; 0x32
static void lv_refr_obj(lv_obj_t * obj, const lv_area_t * mask_ori_p)
 8007e44:	460e      	mov	r6, r1
 8007e46:	4605      	mov	r5, r0
    lv_obj_get_coords(obj, &obj_area);
 8007e48:	a904      	add	r1, sp, #16
 8007e4a:	f7fc ff1d 	bl	8004c88 <lv_obj_get_coords>
    obj_area.x1 -= ext_size;
 8007e4e:	f8bd 7010 	ldrh.w	r7, [sp, #16]
 8007e52:	b2a3      	uxth	r3, r4
    obj_area.y1 -= ext_size;
 8007e54:	f8bd 2012 	ldrh.w	r2, [sp, #18]
    obj_area.x2 += ext_size;
 8007e58:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    union_ok = _lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
 8007e5c:	4631      	mov	r1, r6
    obj_area.x1 -= ext_size;
 8007e5e:	1afc      	subs	r4, r7, r3
    obj_area.y2 += ext_size;
 8007e60:	f8bd 7016 	ldrh.w	r7, [sp, #22]
    obj_area.y1 -= ext_size;
 8007e64:	1ad2      	subs	r2, r2, r3
    obj_area.x2 += ext_size;
 8007e66:	4418      	add	r0, r3
    obj_area.y2 += ext_size;
 8007e68:	443b      	add	r3, r7
    obj_area.x1 -= ext_size;
 8007e6a:	f8ad 4010 	strh.w	r4, [sp, #16]
    obj_area.y1 -= ext_size;
 8007e6e:	f8ad 2012 	strh.w	r2, [sp, #18]
    union_ok = _lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
 8007e72:	aa04      	add	r2, sp, #16
    obj_area.x2 += ext_size;
 8007e74:	f8ad 0014 	strh.w	r0, [sp, #20]
    union_ok = _lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
 8007e78:	a802      	add	r0, sp, #8
    obj_area.y2 += ext_size;
 8007e7a:	f8ad 3016 	strh.w	r3, [sp, #22]
    union_ok = _lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
 8007e7e:	f00c f85f 	bl	8013f40 <_lv_area_intersect>
    if(union_ok != false) {
 8007e82:	b1a8      	cbz	r0, 8007eb0 <lv_refr_obj.part.0+0x74>
        if(obj->design_cb) obj->design_cb(obj, &obj_ext_mask, LV_DESIGN_DRAW_MAIN);
 8007e84:	6a2b      	ldr	r3, [r5, #32]
 8007e86:	b11b      	cbz	r3, 8007e90 <lv_refr_obj.part.0+0x54>
 8007e88:	2200      	movs	r2, #0
 8007e8a:	a902      	add	r1, sp, #8
 8007e8c:	4628      	mov	r0, r5
 8007e8e:	4798      	blx	r3
        lv_obj_get_coords(obj, &obj_area);
 8007e90:	a904      	add	r1, sp, #16
 8007e92:	4628      	mov	r0, r5
 8007e94:	f7fc fef8 	bl	8004c88 <lv_obj_get_coords>
        union_ok = _lv_area_intersect(&obj_mask, mask_ori_p, &obj_area);
 8007e98:	aa04      	add	r2, sp, #16
 8007e9a:	4631      	mov	r1, r6
 8007e9c:	4668      	mov	r0, sp
 8007e9e:	f00c f84f 	bl	8013f40 <_lv_area_intersect>
        if(union_ok != false) {
 8007ea2:	b938      	cbnz	r0, 8007eb4 <lv_refr_obj.part.0+0x78>
        if(obj->design_cb) obj->design_cb(obj, &obj_ext_mask, LV_DESIGN_DRAW_POST);
 8007ea4:	6a2b      	ldr	r3, [r5, #32]
 8007ea6:	b11b      	cbz	r3, 8007eb0 <lv_refr_obj.part.0+0x74>
 8007ea8:	a902      	add	r1, sp, #8
 8007eaa:	4628      	mov	r0, r5
 8007eac:	2201      	movs	r2, #1
 8007eae:	4798      	blx	r3
}
 8007eb0:	b00b      	add	sp, #44	; 0x2c
 8007eb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
            _LV_LL_READ_BACK(obj->child_ll, child_p) {
 8007eb4:	1d2e      	adds	r6, r5, #4
 8007eb6:	4630      	mov	r0, r6
 8007eb8:	f00c fe5c 	bl	8014b74 <_lv_ll_get_tail>
 8007ebc:	4604      	mov	r4, r0
 8007ebe:	2800      	cmp	r0, #0
 8007ec0:	d0f0      	beq.n	8007ea4 <lv_refr_obj.part.0+0x68>
                lv_obj_get_coords(child_p, &child_area);
 8007ec2:	a908      	add	r1, sp, #32
 8007ec4:	4620      	mov	r0, r4
 8007ec6:	f7fc fedf 	bl	8004c88 <lv_obj_get_coords>
                child_area.x1 -= ext_size;
 8007eca:	8e63      	ldrh	r3, [r4, #50]	; 0x32
                child_area.y1 -= ext_size;
 8007ecc:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
                union_ok = _lv_area_intersect(&mask_child, &obj_mask, &child_area);
 8007ed0:	aa08      	add	r2, sp, #32
                child_area.x2 += ext_size;
 8007ed2:	f8bd 0024 	ldrh.w	r0, [sp, #36]	; 0x24
                child_area.x1 -= ext_size;
 8007ed6:	f8bd 7020 	ldrh.w	r7, [sp, #32]
                child_area.y1 -= ext_size;
 8007eda:	1ac9      	subs	r1, r1, r3
                child_area.y2 += ext_size;
 8007edc:	f8bd c026 	ldrh.w	ip, [sp, #38]	; 0x26
                child_area.x2 += ext_size;
 8007ee0:	4418      	add	r0, r3
                child_area.x1 -= ext_size;
 8007ee2:	1aff      	subs	r7, r7, r3
                child_area.y1 -= ext_size;
 8007ee4:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
                child_area.y2 += ext_size;
 8007ee8:	4463      	add	r3, ip
                child_area.x2 += ext_size;
 8007eea:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
                union_ok = _lv_area_intersect(&mask_child, &obj_mask, &child_area);
 8007eee:	4669      	mov	r1, sp
 8007ef0:	a806      	add	r0, sp, #24
                child_area.x1 -= ext_size;
 8007ef2:	f8ad 7020 	strh.w	r7, [sp, #32]
                child_area.y2 += ext_size;
 8007ef6:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
                union_ok = _lv_area_intersect(&mask_child, &obj_mask, &child_area);
 8007efa:	f00c f821 	bl	8013f40 <_lv_area_intersect>
                if(union_ok) {
 8007efe:	b938      	cbnz	r0, 8007f10 <lv_refr_obj.part.0+0xd4>
            _LV_LL_READ_BACK(obj->child_ll, child_p) {
 8007f00:	4621      	mov	r1, r4
 8007f02:	4630      	mov	r0, r6
 8007f04:	f00c fe40 	bl	8014b88 <_lv_ll_get_prev>
 8007f08:	4604      	mov	r4, r0
 8007f0a:	2800      	cmp	r0, #0
 8007f0c:	d1d9      	bne.n	8007ec2 <lv_refr_obj.part.0+0x86>
 8007f0e:	e7c9      	b.n	8007ea4 <lv_refr_obj.part.0+0x68>
    if(obj->hidden != 0) return;
 8007f10:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8007f14:	4620      	mov	r0, r4
 8007f16:	a906      	add	r1, sp, #24
 8007f18:	06db      	lsls	r3, r3, #27
 8007f1a:	d4f1      	bmi.n	8007f00 <lv_refr_obj.part.0+0xc4>
 8007f1c:	f7ff ff8e 	bl	8007e3c <lv_refr_obj.part.0>
 8007f20:	e7ee      	b.n	8007f00 <lv_refr_obj.part.0+0xc4>
 8007f22:	bf00      	nop

08007f24 <lv_refr_obj_and_children>:
{
 8007f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f26:	460e      	mov	r6, r1
    if(top_p == NULL) top_p = lv_disp_get_scr_act(disp_refr);
 8007f28:	b3b0      	cbz	r0, 8007f98 <lv_refr_obj_and_children+0x74>
 8007f2a:	4604      	mov	r4, r0
    if(obj->hidden != 0) return;
 8007f2c:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8007f30:	06da      	lsls	r2, r3, #27
 8007f32:	d52c      	bpl.n	8007f8e <lv_refr_obj_and_children+0x6a>
    par = lv_obj_get_parent(top_p);
 8007f34:	4620      	mov	r0, r4
 8007f36:	f7fc fe7d 	bl	8004c34 <lv_obj_get_parent>
    while(par != NULL) {
 8007f3a:	4607      	mov	r7, r0
 8007f3c:	b330      	cbz	r0, 8007f8c <lv_refr_obj_and_children+0x68>
        lv_obj_t * i = _lv_ll_get_prev(&(par->child_ll), border_p);
 8007f3e:	1d3d      	adds	r5, r7, #4
 8007f40:	4621      	mov	r1, r4
 8007f42:	4628      	mov	r0, r5
 8007f44:	f00c fe20 	bl	8014b88 <_lv_ll_get_prev>
        while(i != NULL) {
 8007f48:	4604      	mov	r4, r0
 8007f4a:	b168      	cbz	r0, 8007f68 <lv_refr_obj_and_children+0x44>
    if(obj->hidden != 0) return;
 8007f4c:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8007f50:	4631      	mov	r1, r6
 8007f52:	06db      	lsls	r3, r3, #27
 8007f54:	d4f4      	bmi.n	8007f40 <lv_refr_obj_and_children+0x1c>
 8007f56:	f7ff ff71 	bl	8007e3c <lv_refr_obj.part.0>
        lv_obj_t * i = _lv_ll_get_prev(&(par->child_ll), border_p);
 8007f5a:	4621      	mov	r1, r4
 8007f5c:	4628      	mov	r0, r5
 8007f5e:	f00c fe13 	bl	8014b88 <_lv_ll_get_prev>
        while(i != NULL) {
 8007f62:	4604      	mov	r4, r0
 8007f64:	2800      	cmp	r0, #0
 8007f66:	d1f1      	bne.n	8007f4c <lv_refr_obj_and_children+0x28>
        if(par->design_cb) par->design_cb(par, mask_p, LV_DESIGN_DRAW_POST);
 8007f68:	6a3b      	ldr	r3, [r7, #32]
 8007f6a:	b153      	cbz	r3, 8007f82 <lv_refr_obj_and_children+0x5e>
 8007f6c:	2201      	movs	r2, #1
 8007f6e:	4631      	mov	r1, r6
 8007f70:	4638      	mov	r0, r7
 8007f72:	4798      	blx	r3
        par = lv_obj_get_parent(par);
 8007f74:	4638      	mov	r0, r7
 8007f76:	f7fc fe5d 	bl	8004c34 <lv_obj_get_parent>
    while(par != NULL) {
 8007f7a:	b138      	cbz	r0, 8007f8c <lv_refr_obj_and_children+0x68>
{
 8007f7c:	463c      	mov	r4, r7
 8007f7e:	4607      	mov	r7, r0
 8007f80:	e7dd      	b.n	8007f3e <lv_refr_obj_and_children+0x1a>
        par = lv_obj_get_parent(par);
 8007f82:	4638      	mov	r0, r7
 8007f84:	f7fc fe56 	bl	8004c34 <lv_obj_get_parent>
    while(par != NULL) {
 8007f88:	2800      	cmp	r0, #0
 8007f8a:	d1f7      	bne.n	8007f7c <lv_refr_obj_and_children+0x58>
}
 8007f8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f8e:	4631      	mov	r1, r6
 8007f90:	4620      	mov	r0, r4
 8007f92:	f7ff ff53 	bl	8007e3c <lv_refr_obj.part.0>
 8007f96:	e7cd      	b.n	8007f34 <lv_refr_obj_and_children+0x10>
    if(top_p == NULL) top_p = lv_disp_get_scr_act(disp_refr);
 8007f98:	4b03      	ldr	r3, [pc, #12]	; (8007fa8 <lv_refr_obj_and_children+0x84>)
 8007f9a:	6818      	ldr	r0, [r3, #0]
 8007f9c:	f7f9 fab6 	bl	800150c <lv_disp_get_scr_act>
    if(top_p == NULL) return;  /*Shouldn't happen*/
 8007fa0:	4604      	mov	r4, r0
 8007fa2:	2800      	cmp	r0, #0
 8007fa4:	d1c2      	bne.n	8007f2c <lv_refr_obj_and_children+0x8>
}
 8007fa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007fa8:	2001789c 	.word	0x2001789c

08007fac <lv_refr_get_top_obj.part.0>:
static lv_obj_t * lv_refr_get_top_obj(const lv_area_t * area_p, lv_obj_t * obj)
 8007fac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fb0:	460e      	mov	r6, r1
        lv_design_res_t design_res = obj->design_cb(obj, area_p, LV_DESIGN_COVER_CHK);
 8007fb2:	2202      	movs	r2, #2
 8007fb4:	4601      	mov	r1, r0
static lv_obj_t * lv_refr_get_top_obj(const lv_area_t * area_p, lv_obj_t * obj)
 8007fb6:	4605      	mov	r5, r0
        lv_design_res_t design_res = obj->design_cb(obj, area_p, LV_DESIGN_COVER_CHK);
 8007fb8:	6a33      	ldr	r3, [r6, #32]
 8007fba:	4630      	mov	r0, r6
 8007fbc:	4798      	blx	r3
        if(design_res == LV_DESIGN_RES_MASKED) return NULL;
 8007fbe:	2803      	cmp	r0, #3
 8007fc0:	d026      	beq.n	8008010 <lv_refr_get_top_obj.part.0+0x64>
        if(design_res == LV_DESIGN_RES_COVER && lv_obj_get_style_opa_scale(obj, LV_OBJ_PART_MAIN) != LV_OPA_COVER) {
 8007fc2:	2801      	cmp	r0, #1
 8007fc4:	4680      	mov	r8, r0
 8007fc6:	d026      	beq.n	8008016 <lv_refr_get_top_obj.part.0+0x6a>
        _LV_LL_READ(obj->child_ll, i) {
 8007fc8:	1d37      	adds	r7, r6, #4
 8007fca:	4638      	mov	r0, r7
 8007fcc:	f00c fdce 	bl	8014b6c <_lv_ll_get_head>
 8007fd0:	4604      	mov	r4, r0
 8007fd2:	b1e8      	cbz	r0, 8008010 <lv_refr_get_top_obj.part.0+0x64>
    if(_lv_area_is_in(area_p, &obj->coords, 0) && obj->hidden == 0) {
 8007fd4:	f104 0110 	add.w	r1, r4, #16
 8007fd8:	2200      	movs	r2, #0
 8007fda:	4628      	mov	r0, r5
 8007fdc:	f00c f926 	bl	801422c <_lv_area_is_in>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	4621      	mov	r1, r4
 8007fe4:	4628      	mov	r0, r5
 8007fe6:	b133      	cbz	r3, 8007ff6 <lv_refr_get_top_obj.part.0+0x4a>
 8007fe8:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8007fec:	06db      	lsls	r3, r3, #27
 8007fee:	d402      	bmi.n	8007ff6 <lv_refr_get_top_obj.part.0+0x4a>
 8007ff0:	f7ff ffdc 	bl	8007fac <lv_refr_get_top_obj.part.0>
            if(found_p != NULL) {
 8007ff4:	b950      	cbnz	r0, 800800c <lv_refr_get_top_obj.part.0+0x60>
        _LV_LL_READ(obj->child_ll, i) {
 8007ff6:	4621      	mov	r1, r4
 8007ff8:	4638      	mov	r0, r7
 8007ffa:	f00c fdbf 	bl	8014b7c <_lv_ll_get_next>
 8007ffe:	4604      	mov	r4, r0
 8008000:	2800      	cmp	r0, #0
 8008002:	d1e7      	bne.n	8007fd4 <lv_refr_get_top_obj.part.0+0x28>
            if(design_res == LV_DESIGN_RES_COVER) {
 8008004:	f1b8 0f01 	cmp.w	r8, #1
 8008008:	d102      	bne.n	8008010 <lv_refr_get_top_obj.part.0+0x64>
        if(design_res == LV_DESIGN_RES_MASKED) return NULL;
 800800a:	4630      	mov	r0, r6
}
 800800c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(design_res == LV_DESIGN_RES_MASKED) return NULL;
 8008010:	2000      	movs	r0, #0
}
 8008012:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
 8008016:	f248 020c 	movw	r2, #32780	; 0x800c
 800801a:	2100      	movs	r1, #0
 800801c:	4630      	mov	r0, r6
        _LV_LL_READ(obj->child_ll, i) {
 800801e:	1d37      	adds	r7, r6, #4
 8008020:	f7fd fa04 	bl	800542c <_lv_obj_get_style_opa>
        if(design_res == LV_DESIGN_RES_COVER && lv_obj_get_style_opa_scale(obj, LV_OBJ_PART_MAIN) != LV_OPA_COVER) {
 8008024:	28ff      	cmp	r0, #255	; 0xff
        _LV_LL_READ(obj->child_ll, i) {
 8008026:	4638      	mov	r0, r7
        if(design_res == LV_DESIGN_RES_COVER && lv_obj_get_style_opa_scale(obj, LV_OBJ_PART_MAIN) != LV_OPA_COVER) {
 8008028:	d007      	beq.n	800803a <lv_refr_get_top_obj.part.0+0x8e>
        _LV_LL_READ(obj->child_ll, i) {
 800802a:	f00c fd9f 	bl	8014b6c <_lv_ll_get_head>
 800802e:	4604      	mov	r4, r0
 8008030:	2800      	cmp	r0, #0
 8008032:	d0ed      	beq.n	8008010 <lv_refr_get_top_obj.part.0+0x64>
            design_res = LV_DESIGN_RES_NOT_COVER;
 8008034:	f04f 0802 	mov.w	r8, #2
 8008038:	e7cc      	b.n	8007fd4 <lv_refr_get_top_obj.part.0+0x28>
        _LV_LL_READ(obj->child_ll, i) {
 800803a:	f00c fd97 	bl	8014b6c <_lv_ll_get_head>
 800803e:	4604      	mov	r4, r0
 8008040:	2800      	cmp	r0, #0
 8008042:	d1c7      	bne.n	8007fd4 <lv_refr_get_top_obj.part.0+0x28>
        if(design_res == LV_DESIGN_RES_MASKED) return NULL;
 8008044:	4630      	mov	r0, r6
 8008046:	e7e1      	b.n	800800c <lv_refr_get_top_obj.part.0+0x60>

08008048 <lv_refr_area_part>:
{
 8008048:	b5f0      	push	{r4, r5, r6, r7, lr}
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 800804a:	4d67      	ldr	r5, [pc, #412]	; (80081e8 <lv_refr_area_part+0x1a0>)
{
 800804c:	4601      	mov	r1, r0
 800804e:	b0a5      	sub	sp, #148	; 0x94
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 8008050:	6828      	ldr	r0, [r5, #0]
{
 8008052:	9103      	str	r1, [sp, #12]
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 8008054:	f00b fc86 	bl	8013964 <lv_disp_get_buf>
 8008058:	4604      	mov	r4, r0
    if(lv_disp_is_double_buf(disp_refr) == false) {
 800805a:	6828      	ldr	r0, [r5, #0]
 800805c:	f00b fca2 	bl	80139a4 <lv_disp_is_double_buf>
 8008060:	9903      	ldr	r1, [sp, #12]
 8008062:	2800      	cmp	r0, #0
 8008064:	d03b      	beq.n	80080de <lv_refr_area_part+0x96>
    _lv_area_intersect(&start_mask, area_p, &vdb->area);
 8008066:	f104 0210 	add.w	r2, r4, #16
 800806a:	a806      	add	r0, sp, #24
 800806c:	f00b ff68 	bl	8013f40 <_lv_area_intersect>
    top_act_scr = lv_refr_get_top_obj(&start_mask, lv_disp_get_scr_act(disp_refr));
 8008070:	6828      	ldr	r0, [r5, #0]
 8008072:	f7f9 fa4b 	bl	800150c <lv_disp_get_scr_act>
 8008076:	4604      	mov	r4, r0
    if(_lv_area_is_in(area_p, &obj->coords, 0) && obj->hidden == 0) {
 8008078:	2200      	movs	r2, #0
 800807a:	a806      	add	r0, sp, #24
 800807c:	f104 0110 	add.w	r1, r4, #16
 8008080:	f00c f8d4 	bl	801422c <_lv_area_is_in>
 8008084:	2800      	cmp	r0, #0
 8008086:	d05f      	beq.n	8008148 <lv_refr_area_part+0x100>
 8008088:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 800808c:	f012 0610 	ands.w	r6, r2, #16
 8008090:	d15a      	bne.n	8008148 <lv_refr_area_part+0x100>
 8008092:	4621      	mov	r1, r4
 8008094:	a806      	add	r0, sp, #24
 8008096:	f7ff ff89 	bl	8007fac <lv_refr_get_top_obj.part.0>
    if(disp_refr->prev_scr) {
 800809a:	682a      	ldr	r2, [r5, #0]
 800809c:	4607      	mov	r7, r0
 800809e:	6c94      	ldr	r4, [r2, #72]	; 0x48
 80080a0:	b32c      	cbz	r4, 80080ee <lv_refr_area_part+0xa6>
    if(_lv_area_is_in(area_p, &obj->coords, 0) && obj->hidden == 0) {
 80080a2:	4632      	mov	r2, r6
 80080a4:	f104 0110 	add.w	r1, r4, #16
 80080a8:	a806      	add	r0, sp, #24
 80080aa:	f00c f8bf 	bl	801422c <_lv_area_is_in>
 80080ae:	2800      	cmp	r0, #0
 80080b0:	d06d      	beq.n	800818e <lv_refr_area_part+0x146>
 80080b2:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 80080b6:	06db      	lsls	r3, r3, #27
 80080b8:	d558      	bpl.n	800816c <lv_refr_area_part+0x124>
 80080ba:	463b      	mov	r3, r7
    if(top_act_scr == NULL && top_prev_scr == NULL) {
 80080bc:	2b00      	cmp	r3, #0
 80080be:	f000 8091 	beq.w	80081e4 <lv_refr_area_part+0x19c>
    if(disp_refr->prev_scr) {
 80080c2:	682b      	ldr	r3, [r5, #0]
 80080c4:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80080c6:	b128      	cbz	r0, 80080d4 <lv_refr_area_part+0x8c>
        lv_refr_obj_and_children(top_prev_scr, &start_mask);
 80080c8:	2e00      	cmp	r6, #0
 80080ca:	bf18      	it	ne
 80080cc:	4630      	movne	r0, r6
 80080ce:	a906      	add	r1, sp, #24
 80080d0:	f7ff ff28 	bl	8007f24 <lv_refr_obj_and_children>
    if(top_act_scr == NULL) {
 80080d4:	bb17      	cbnz	r7, 800811c <lv_refr_area_part+0xd4>
 80080d6:	e058      	b.n	800818a <lv_refr_area_part+0x142>
 80080d8:	9103      	str	r1, [sp, #12]
            if(disp_refr->driver.wait_cb) disp_refr->driver.wait_cb(&disp_refr->driver);
 80080da:	4798      	blx	r3
 80080dc:	9903      	ldr	r1, [sp, #12]
 80080de:	6828      	ldr	r0, [r5, #0]
        while(vdb->flushing) {
 80080e0:	69a3      	ldr	r3, [r4, #24]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d0bf      	beq.n	8008066 <lv_refr_area_part+0x1e>
            if(disp_refr->driver.wait_cb) disp_refr->driver.wait_cb(&disp_refr->driver);
 80080e6:	69c3      	ldr	r3, [r0, #28]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d0f9      	beq.n	80080e0 <lv_refr_area_part+0x98>
 80080ec:	e7f4      	b.n	80080d8 <lv_refr_area_part+0x90>
    if(top_act_scr == NULL && top_prev_scr == NULL) {
 80080ee:	b9a8      	cbnz	r0, 800811c <lv_refr_area_part+0xd4>
        if(disp_refr->bg_img) {
 80080f0:	6e13      	ldr	r3, [r2, #96]	; 0x60
            lv_draw_img_dsc_init(&dsc);
 80080f2:	a80a      	add	r0, sp, #40	; 0x28
        if(disp_refr->bg_img) {
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d04d      	beq.n	8008194 <lv_refr_area_part+0x14c>
            lv_draw_img_dsc_init(&dsc);
 80080f8:	f003 fed6 	bl	800bea8 <lv_draw_img_dsc_init>
            dsc.opa = disp_refr->bg_opa;
 80080fc:	682b      	ldr	r3, [r5, #0]
            res = lv_img_decoder_get_info(disp_refr->bg_img, &header);
 80080fe:	a905      	add	r1, sp, #20
            dsc.opa = disp_refr->bg_opa;
 8008100:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
 8008104:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
            res = lv_img_decoder_get_info(disp_refr->bg_img, &header);
 8008108:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800810a:	f00a faab 	bl	8012664 <lv_img_decoder_get_info>
            if(res == LV_RES_OK) {
 800810e:	2801      	cmp	r0, #1
 8008110:	d04f      	beq.n	80081b2 <lv_refr_area_part+0x16a>
    if(disp_refr->prev_scr) {
 8008112:	682b      	ldr	r3, [r5, #0]
 8008114:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8008116:	2800      	cmp	r0, #0
 8008118:	d134      	bne.n	8008184 <lv_refr_area_part+0x13c>
        top_act_scr = disp_refr->act_scr;
 800811a:	6c5f      	ldr	r7, [r3, #68]	; 0x44
    lv_refr_obj_and_children(top_act_scr, &start_mask);
 800811c:	a906      	add	r1, sp, #24
 800811e:	4638      	mov	r0, r7
 8008120:	f7ff ff00 	bl	8007f24 <lv_refr_obj_and_children>
    lv_refr_obj_and_children(lv_disp_get_layer_top(disp_refr), &start_mask);
 8008124:	6828      	ldr	r0, [r5, #0]
 8008126:	f7f9 fa05 	bl	8001534 <lv_disp_get_layer_top>
 800812a:	a906      	add	r1, sp, #24
 800812c:	f7ff fefa 	bl	8007f24 <lv_refr_obj_and_children>
    lv_refr_obj_and_children(lv_disp_get_layer_sys(disp_refr), &start_mask);
 8008130:	6828      	ldr	r0, [r5, #0]
 8008132:	f7f9 fa09 	bl	8001548 <lv_disp_get_layer_sys>
 8008136:	a906      	add	r1, sp, #24
 8008138:	f7ff fef4 	bl	8007f24 <lv_refr_obj_and_children>
    if(lv_disp_is_true_double_buf(disp_refr) == false) {
 800813c:	6828      	ldr	r0, [r5, #0]
 800813e:	f00b fc39 	bl	80139b4 <lv_disp_is_true_double_buf>
 8008142:	b1d8      	cbz	r0, 800817c <lv_refr_area_part+0x134>
}
 8008144:	b025      	add	sp, #148	; 0x94
 8008146:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(disp_refr->prev_scr) {
 8008148:	682a      	ldr	r2, [r5, #0]
 800814a:	6c94      	ldr	r4, [r2, #72]	; 0x48
 800814c:	2c00      	cmp	r4, #0
 800814e:	d0cf      	beq.n	80080f0 <lv_refr_area_part+0xa8>
    if(_lv_area_is_in(area_p, &obj->coords, 0) && obj->hidden == 0) {
 8008150:	2200      	movs	r2, #0
 8008152:	f104 0110 	add.w	r1, r4, #16
 8008156:	a806      	add	r0, sp, #24
 8008158:	f00c f868 	bl	801422c <_lv_area_is_in>
 800815c:	2800      	cmp	r0, #0
 800815e:	d041      	beq.n	80081e4 <lv_refr_area_part+0x19c>
 8008160:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8008164:	f013 0010 	ands.w	r0, r3, #16
 8008168:	d13c      	bne.n	80081e4 <lv_refr_area_part+0x19c>
 800816a:	4607      	mov	r7, r0
 800816c:	4621      	mov	r1, r4
 800816e:	a806      	add	r0, sp, #24
 8008170:	f7ff ff1c 	bl	8007fac <lv_refr_get_top_obj.part.0>
 8008174:	4606      	mov	r6, r0
 8008176:	ea40 0307 	orr.w	r3, r0, r7
 800817a:	e79f      	b.n	80080bc <lv_refr_area_part+0x74>
        lv_refr_vdb_flush();
 800817c:	f7ff fe24 	bl	8007dc8 <lv_refr_vdb_flush>
}
 8008180:	b025      	add	sp, #148	; 0x94
 8008182:	bdf0      	pop	{r4, r5, r6, r7, pc}
        lv_refr_obj_and_children(top_prev_scr, &start_mask);
 8008184:	a906      	add	r1, sp, #24
 8008186:	f7ff fecd 	bl	8007f24 <lv_refr_obj_and_children>
    if(top_act_scr == NULL) {
 800818a:	682b      	ldr	r3, [r5, #0]
 800818c:	e7c5      	b.n	800811a <lv_refr_area_part+0xd2>
    lv_obj_t * found_p = NULL;
 800818e:	4606      	mov	r6, r0
 8008190:	463b      	mov	r3, r7
 8008192:	e793      	b.n	80080bc <lv_refr_area_part+0x74>
            lv_draw_rect_dsc_init(&dsc);
 8008194:	f007 f8d0 	bl	800f338 <lv_draw_rect_dsc_init>
            dsc.bg_color = disp_refr->bg_color;
 8008198:	682b      	ldr	r3, [r5, #0]
            lv_draw_rect(&start_mask, &start_mask, &dsc);
 800819a:	a906      	add	r1, sp, #24
 800819c:	aa0a      	add	r2, sp, #40	; 0x28
            dsc.bg_color = disp_refr->bg_color;
 800819e:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
            lv_draw_rect(&start_mask, &start_mask, &dsc);
 80081a0:	4608      	mov	r0, r1
            dsc.bg_color = disp_refr->bg_color;
 80081a2:	940b      	str	r4, [sp, #44]	; 0x2c
            dsc.bg_opa = disp_refr->bg_opa;
 80081a4:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 80081a8:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
            lv_draw_rect(&start_mask, &start_mask, &dsc);
 80081ac:	f007 f8e8 	bl	800f380 <lv_draw_rect>
 80081b0:	e7af      	b.n	8008112 <lv_refr_area_part+0xca>
                lv_area_set(&a, 0, 0, header.w - 1, header.h - 1);
 80081b2:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 80081b6:	2200      	movs	r2, #0
 80081b8:	9b05      	ldr	r3, [sp, #20]
 80081ba:	a808      	add	r0, sp, #32
 80081bc:	f3c4 144a 	ubfx	r4, r4, #5, #11
 80081c0:	4611      	mov	r1, r2
 80081c2:	f3c3 238a 	ubfx	r3, r3, #10, #11
 80081c6:	3c01      	subs	r4, #1
 80081c8:	3b01      	subs	r3, #1
 80081ca:	b224      	sxth	r4, r4
 80081cc:	b21b      	sxth	r3, r3
 80081ce:	9400      	str	r4, [sp, #0]
 80081d0:	f00b fe98 	bl	8013f04 <lv_area_set>
                lv_draw_img(&a, &start_mask, disp_refr->bg_img, &dsc);
 80081d4:	682a      	ldr	r2, [r5, #0]
 80081d6:	a808      	add	r0, sp, #32
 80081d8:	ab0a      	add	r3, sp, #40	; 0x28
 80081da:	6e12      	ldr	r2, [r2, #96]	; 0x60
 80081dc:	a906      	add	r1, sp, #24
 80081de:	f003 fe75 	bl	800becc <lv_draw_img>
            }
 80081e2:	e796      	b.n	8008112 <lv_refr_area_part+0xca>
 80081e4:	682a      	ldr	r2, [r5, #0]
 80081e6:	e783      	b.n	80080f0 <lv_refr_area_part+0xa8>
 80081e8:	2001789c 	.word	0x2001789c

080081ec <_lv_refr_init>:
}
 80081ec:	4770      	bx	lr
 80081ee:	bf00      	nop

080081f0 <_lv_inv_area>:
{
 80081f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80081f4:	460d      	mov	r5, r1
 80081f6:	b085      	sub	sp, #20
    if(!disp) disp = lv_disp_get_default();
 80081f8:	2800      	cmp	r0, #0
 80081fa:	d047      	beq.n	800828c <_lv_inv_area+0x9c>
 80081fc:	4604      	mov	r4, r0
    if(area_p == NULL) {
 80081fe:	2d00      	cmp	r5, #0
 8008200:	d03b      	beq.n	800827a <_lv_inv_area+0x8a>
    scr_area.x1 = 0;
 8008202:	2300      	movs	r3, #0
    scr_area.x2 = lv_disp_get_hor_res(disp) - 1;
 8008204:	4620      	mov	r0, r4
    suc = _lv_area_intersect(&com_area, area_p, &scr_area);
 8008206:	46e8      	mov	r8, sp
 8008208:	af02      	add	r7, sp, #8
    scr_area.x1 = 0;
 800820a:	9300      	str	r3, [sp, #0]
    scr_area.x2 = lv_disp_get_hor_res(disp) - 1;
 800820c:	f00b fb44 	bl	8013898 <lv_disp_get_hor_res>
 8008210:	4603      	mov	r3, r0
    scr_area.y2 = lv_disp_get_ver_res(disp) - 1;
 8008212:	4620      	mov	r0, r4
    scr_area.x2 = lv_disp_get_hor_res(disp) - 1;
 8008214:	3b01      	subs	r3, #1
 8008216:	f8ad 3004 	strh.w	r3, [sp, #4]
    scr_area.y2 = lv_disp_get_ver_res(disp) - 1;
 800821a:	f00b fb4f 	bl	80138bc <lv_disp_get_ver_res>
 800821e:	4603      	mov	r3, r0
    suc = _lv_area_intersect(&com_area, area_p, &scr_area);
 8008220:	4629      	mov	r1, r5
 8008222:	4642      	mov	r2, r8
 8008224:	4638      	mov	r0, r7
    scr_area.y2 = lv_disp_get_ver_res(disp) - 1;
 8008226:	3b01      	subs	r3, #1
 8008228:	f8ad 3006 	strh.w	r3, [sp, #6]
    suc = _lv_area_intersect(&com_area, area_p, &scr_area);
 800822c:	f00b fe88 	bl	8013f40 <_lv_area_intersect>
    if(suc != false) {
 8008230:	b300      	cbz	r0, 8008274 <_lv_inv_area+0x84>
        if(disp->driver.rounder_cb) disp->driver.rounder_cb(&disp->driver, &com_area);
 8008232:	6923      	ldr	r3, [r4, #16]
 8008234:	b113      	cbz	r3, 800823c <_lv_inv_area+0x4c>
 8008236:	4639      	mov	r1, r7
 8008238:	4620      	mov	r0, r4
 800823a:	4798      	blx	r3
        for(i = 0; i < disp->inv_p; i++) {
 800823c:	f8b4 3186 	ldrh.w	r3, [r4, #390]	; 0x186
 8008240:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008244:	2b00      	cmp	r3, #0
 8008246:	f000 8093 	beq.w	8008370 <_lv_inv_area+0x180>
 800824a:	f104 0966 	add.w	r9, r4, #102	; 0x66
 800824e:	2600      	movs	r6, #0
 8008250:	464d      	mov	r5, r9
 8008252:	e005      	b.n	8008260 <_lv_inv_area+0x70>
 8008254:	f8b4 2186 	ldrh.w	r2, [r4, #390]	; 0x186
 8008258:	f3c2 0309 	ubfx	r3, r2, #0, #10
 800825c:	428b      	cmp	r3, r1
 800825e:	d91d      	bls.n	800829c <_lv_inv_area+0xac>
            if(_lv_area_is_in(&com_area, &disp->inv_areas[i], 0) != false) return;
 8008260:	3601      	adds	r6, #1
 8008262:	4629      	mov	r1, r5
 8008264:	2200      	movs	r2, #0
 8008266:	4638      	mov	r0, r7
 8008268:	f00b ffe0 	bl	801422c <_lv_area_is_in>
        for(i = 0; i < disp->inv_p; i++) {
 800826c:	3508      	adds	r5, #8
 800826e:	b2b1      	uxth	r1, r6
            if(_lv_area_is_in(&com_area, &disp->inv_areas[i], 0) != false) return;
 8008270:	2800      	cmp	r0, #0
 8008272:	d0ef      	beq.n	8008254 <_lv_inv_area+0x64>
}
 8008274:	b005      	add	sp, #20
 8008276:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        disp->inv_p = 0;
 800827a:	f8b4 3186 	ldrh.w	r3, [r4, #390]	; 0x186
 800827e:	f365 0309 	bfi	r3, r5, #0, #10
 8008282:	f8a4 3186 	strh.w	r3, [r4, #390]	; 0x186
}
 8008286:	b005      	add	sp, #20
 8008288:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(!disp) disp = lv_disp_get_default();
 800828c:	f00b fafe 	bl	801388c <lv_disp_get_default>
    if(!disp) return;
 8008290:	4604      	mov	r4, r0
 8008292:	2800      	cmp	r0, #0
 8008294:	d1b3      	bne.n	80081fe <_lv_inv_area+0xe>
}
 8008296:	b005      	add	sp, #20
 8008298:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if(disp->inv_p < LV_INV_BUF_SIZE) {
 800829c:	2b1f      	cmp	r3, #31
 800829e:	d93f      	bls.n	8008320 <_lv_inv_area+0x130>
            disp->inv_p = 0;
 80082a0:	f104 036a 	add.w	r3, r4, #106	; 0x6a
 80082a4:	f360 0209 	bfi	r2, r0, #0, #10
 80082a8:	4598      	cmp	r8, r3
 80082aa:	f8a4 2186 	strh.w	r2, [r4, #390]	; 0x186
    while(len) {
 80082ae:	d223      	bcs.n	80082f8 <_lv_inv_area+0x108>
 80082b0:	ab01      	add	r3, sp, #4
 80082b2:	4599      	cmp	r9, r3
 80082b4:	d220      	bcs.n	80082f8 <_lv_inv_area+0x108>
        *d8 = *s8;
 80082b6:	f89d 1000 	ldrb.w	r1, [sp]
 80082ba:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80082be:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80082c2:	f89d 5003 	ldrb.w	r5, [sp, #3]
 80082c6:	f89d 0004 	ldrb.w	r0, [sp, #4]
 80082ca:	f884 1066 	strb.w	r1, [r4, #102]	; 0x66
 80082ce:	f884 2067 	strb.w	r2, [r4, #103]	; 0x67
 80082d2:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80082d6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80082da:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 80082de:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80082e2:	f884 5069 	strb.w	r5, [r4, #105]	; 0x69
 80082e6:	f884 006a 	strb.w	r0, [r4, #106]	; 0x6a
 80082ea:	f884 106b 	strb.w	r1, [r4, #107]	; 0x6b
 80082ee:	f884 206c 	strb.w	r2, [r4, #108]	; 0x6c
 80082f2:	f884 306d 	strb.w	r3, [r4, #109]	; 0x6d
    while(len) {
 80082f6:	e005      	b.n	8008304 <_lv_inv_area+0x114>
        *d8 = *s8;
 80082f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80082fc:	f8c4 2066 	str.w	r2, [r4, #102]	; 0x66
 8008300:	f8c4 306a 	str.w	r3, [r4, #106]	; 0x6a
        disp->inv_p++;
 8008304:	f8b4 3186 	ldrh.w	r3, [r4, #390]	; 0x186
        lv_task_set_prio(disp->refr_task, LV_REFR_TASK_PRIO);
 8008308:	2103      	movs	r1, #3
 800830a:	6b60      	ldr	r0, [r4, #52]	; 0x34
        disp->inv_p++;
 800830c:	1c5a      	adds	r2, r3, #1
 800830e:	f362 0309 	bfi	r3, r2, #0, #10
 8008312:	f8a4 3186 	strh.w	r3, [r4, #390]	; 0x186
        lv_task_set_prio(disp->refr_task, LV_REFR_TASK_PRIO);
 8008316:	f00d fc79 	bl	8015c0c <lv_task_set_prio>
}
 800831a:	b005      	add	sp, #20
 800831c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008320:	00db      	lsls	r3, r3, #3
 8008322:	3366      	adds	r3, #102	; 0x66
            lv_area_copy(&disp->inv_areas[disp->inv_p], &com_area);
 8008324:	1d1a      	adds	r2, r3, #4
 8008326:	4423      	add	r3, r4
    while(len) {
 8008328:	4422      	add	r2, r4
 800832a:	4297      	cmp	r7, r2
 800832c:	d21b      	bcs.n	8008366 <_lv_inv_area+0x176>
 800832e:	aa03      	add	r2, sp, #12
 8008330:	4293      	cmp	r3, r2
 8008332:	d218      	bcs.n	8008366 <_lv_inv_area+0x176>
        *d8 = *s8;
 8008334:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8008338:	701a      	strb	r2, [r3, #0]
 800833a:	f89d 2009 	ldrb.w	r2, [sp, #9]
 800833e:	705a      	strb	r2, [r3, #1]
 8008340:	f89d 200a 	ldrb.w	r2, [sp, #10]
 8008344:	709a      	strb	r2, [r3, #2]
 8008346:	f89d 200b 	ldrb.w	r2, [sp, #11]
 800834a:	70da      	strb	r2, [r3, #3]
 800834c:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8008350:	711a      	strb	r2, [r3, #4]
 8008352:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8008356:	715a      	strb	r2, [r3, #5]
 8008358:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800835c:	719a      	strb	r2, [r3, #6]
 800835e:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8008362:	71da      	strb	r2, [r3, #7]
    while(len) {
 8008364:	e7ce      	b.n	8008304 <_lv_inv_area+0x114>
        *d8 = *s8;
 8008366:	9a02      	ldr	r2, [sp, #8]
 8008368:	601a      	str	r2, [r3, #0]
 800836a:	9a03      	ldr	r2, [sp, #12]
 800836c:	605a      	str	r2, [r3, #4]
    while(len) {
 800836e:	e7c9      	b.n	8008304 <_lv_inv_area+0x114>
        for(i = 0; i < disp->inv_p; i++) {
 8008370:	2366      	movs	r3, #102	; 0x66
 8008372:	e7d7      	b.n	8008324 <_lv_inv_area+0x134>

08008374 <_lv_refr_get_disp_refreshing>:
    return disp_refr;
 8008374:	4b01      	ldr	r3, [pc, #4]	; (800837c <_lv_refr_get_disp_refreshing+0x8>)
}
 8008376:	6818      	ldr	r0, [r3, #0]
 8008378:	4770      	bx	lr
 800837a:	bf00      	nop
 800837c:	2001789c 	.word	0x2001789c

08008380 <_lv_disp_refr_task>:
{
 8008380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008384:	4604      	mov	r4, r0
 8008386:	b089      	sub	sp, #36	; 0x24
    uint32_t start = lv_tick_get();
 8008388:	f00b fbb0 	bl	8013aec <lv_tick_get>
    disp_refr = task->user_data;
 800838c:	f8df b3dc 	ldr.w	fp, [pc, #988]	; 800876c <_lv_disp_refr_task+0x3ec>
    uint32_t start = lv_tick_get();
 8008390:	4602      	mov	r2, r0
    disp_refr = task->user_data;
 8008392:	68e3      	ldr	r3, [r4, #12]
    lv_task_set_prio(task, LV_TASK_PRIO_OFF);
 8008394:	4620      	mov	r0, r4
 8008396:	2100      	movs	r1, #0
    uint32_t start = lv_tick_get();
 8008398:	9205      	str	r2, [sp, #20]
    disp_refr = task->user_data;
 800839a:	f8cb 3000 	str.w	r3, [fp]
    lv_task_set_prio(task, LV_TASK_PRIO_OFF);
 800839e:	f00d fc35 	bl	8015c0c <lv_task_set_prio>
    if(disp_refr->act_scr == NULL) {
 80083a2:	f8db 4000 	ldr.w	r4, [fp]
 80083a6:	6c63      	ldr	r3, [r4, #68]	; 0x44
        disp_refr->inv_p = 0;
 80083a8:	f8b4 2186 	ldrh.w	r2, [r4, #390]	; 0x186
    if(disp_refr->act_scr == NULL) {
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	f000 8282 	beq.w	80088b6 <_lv_disp_refr_task+0x536>
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
 80083b2:	f3c2 0309 	ubfx	r3, r2, #0, #10
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	f000 81da 	beq.w	8008770 <_lv_disp_refr_task+0x3f0>
 80083bc:	f04f 0800 	mov.w	r8, #0
                disp_refr->inv_area_joined[join_from] = 1;
 80083c0:	2701      	movs	r7, #1
 80083c2:	e003      	b.n	80083cc <_lv_disp_refr_task+0x4c>
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
 80083c4:	f108 0801 	add.w	r8, r8, #1
 80083c8:	4598      	cmp	r8, r3
 80083ca:	d267      	bcs.n	800849c <_lv_disp_refr_task+0x11c>
        if(disp_refr->inv_area_joined[join_in] != 0) continue;
 80083cc:	eb04 0208 	add.w	r2, r4, r8
 80083d0:	f892 5166 	ldrb.w	r5, [r2, #358]	; 0x166
 80083d4:	2d00      	cmp	r5, #0
 80083d6:	d1f5      	bne.n	80083c4 <_lv_disp_refr_task+0x44>
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
 80083d8:	2b00      	cmp	r3, #0
 80083da:	f000 827a 	beq.w	80088d2 <_lv_disp_refr_task+0x552>
 80083de:	ea4f 06c8 	mov.w	r6, r8, lsl #3
 80083e2:	3666      	adds	r6, #102	; 0x66
 80083e4:	e008      	b.n	80083f8 <_lv_disp_refr_task+0x78>
 80083e6:	f8db 4000 	ldr.w	r4, [fp]
 80083ea:	f8b4 3186 	ldrh.w	r3, [r4, #390]	; 0x186
 80083ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80083f2:	3501      	adds	r5, #1
 80083f4:	429d      	cmp	r5, r3
 80083f6:	d2e5      	bcs.n	80083c4 <_lv_disp_refr_task+0x44>
            if(_lv_area_is_on(&disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]) == false) {
 80083f8:	ea4f 09c5 	mov.w	r9, r5, lsl #3
            if(disp_refr->inv_area_joined[join_from] != 0 || join_in == join_from) {
 80083fc:	1962      	adds	r2, r4, r5
            if(_lv_area_is_on(&disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]) == false) {
 80083fe:	19a0      	adds	r0, r4, r6
 8008400:	f109 0966 	add.w	r9, r9, #102	; 0x66
            if(disp_refr->inv_area_joined[join_from] != 0 || join_in == join_from) {
 8008404:	f892 2166 	ldrb.w	r2, [r2, #358]	; 0x166
            if(_lv_area_is_on(&disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]) == false) {
 8008408:	eb04 0109 	add.w	r1, r4, r9
            if(disp_refr->inv_area_joined[join_from] != 0 || join_in == join_from) {
 800840c:	2a00      	cmp	r2, #0
 800840e:	d1f0      	bne.n	80083f2 <_lv_disp_refr_task+0x72>
 8008410:	4545      	cmp	r5, r8
 8008412:	d0ee      	beq.n	80083f2 <_lv_disp_refr_task+0x72>
            if(_lv_area_is_on(&disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]) == false) {
 8008414:	f00b feec 	bl	80141f0 <_lv_area_is_on>
 8008418:	4603      	mov	r3, r0
            _lv_area_join(&joined_area, &disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]);
 800841a:	a806      	add	r0, sp, #24
            if(_lv_area_is_on(&disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]) == false) {
 800841c:	2b00      	cmp	r3, #0
 800841e:	d0e2      	beq.n	80083e6 <_lv_disp_refr_task+0x66>
            _lv_area_join(&joined_area, &disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]);
 8008420:	f8db 1000 	ldr.w	r1, [fp]
 8008424:	eb01 0209 	add.w	r2, r1, r9
 8008428:	4431      	add	r1, r6
 800842a:	f00b fdb5 	bl	8013f98 <_lv_area_join>
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
 800842e:	a806      	add	r0, sp, #24
 8008430:	f00b fd78 	bl	8013f24 <lv_area_get_size>
 8008434:	f8db 3000 	ldr.w	r3, [fp]
 8008438:	4682      	mov	sl, r0
 800843a:	1998      	adds	r0, r3, r6
 800843c:	f00b fd72 	bl	8013f24 <lv_area_get_size>
                                                 lv_area_get_size(&disp_refr->inv_areas[join_from]))) {
 8008440:	f8db 3000 	ldr.w	r3, [fp]
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
 8008444:	4604      	mov	r4, r0
                                                 lv_area_get_size(&disp_refr->inv_areas[join_from]))) {
 8008446:	eb03 0009 	add.w	r0, r3, r9
 800844a:	f00b fd6b 	bl	8013f24 <lv_area_get_size>
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
 800844e:	4404      	add	r4, r0
 8008450:	45a2      	cmp	sl, r4
                lv_area_copy(&disp_refr->inv_areas[join_in], &joined_area);
 8008452:	f8db 4000 	ldr.w	r4, [fp]
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
 8008456:	d304      	bcc.n	8008462 <_lv_disp_refr_task+0xe2>
 8008458:	f8b4 3186 	ldrh.w	r3, [r4, #390]	; 0x186
 800845c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008460:	e7c7      	b.n	80083f2 <_lv_disp_refr_task+0x72>
        *d8 = *s8;
 8008462:	f89d 1018 	ldrb.w	r1, [sp, #24]
                lv_area_copy(&disp_refr->inv_areas[join_in], &joined_area);
 8008466:	19a3      	adds	r3, r4, r6
                disp_refr->inv_area_joined[join_from] = 1;
 8008468:	1962      	adds	r2, r4, r5
 800846a:	55a1      	strb	r1, [r4, r6]
 800846c:	f89d 1019 	ldrb.w	r1, [sp, #25]
 8008470:	7059      	strb	r1, [r3, #1]
 8008472:	f89d 101a 	ldrb.w	r1, [sp, #26]
 8008476:	7099      	strb	r1, [r3, #2]
 8008478:	f89d 101b 	ldrb.w	r1, [sp, #27]
 800847c:	70d9      	strb	r1, [r3, #3]
 800847e:	f89d 101c 	ldrb.w	r1, [sp, #28]
 8008482:	7119      	strb	r1, [r3, #4]
 8008484:	f89d 101d 	ldrb.w	r1, [sp, #29]
 8008488:	7159      	strb	r1, [r3, #5]
 800848a:	f89d 101e 	ldrb.w	r1, [sp, #30]
 800848e:	7199      	strb	r1, [r3, #6]
 8008490:	f89d 101f 	ldrb.w	r1, [sp, #31]
 8008494:	71d9      	strb	r1, [r3, #7]
 8008496:	f882 7166 	strb.w	r7, [r2, #358]	; 0x166
 800849a:	e7dd      	b.n	8008458 <_lv_disp_refr_task+0xd8>
    if(disp_refr->inv_p == 0) return;
 800849c:	f8b4 2186 	ldrh.w	r2, [r4, #390]	; 0x186
    px_num = 0;
 80084a0:	2100      	movs	r1, #0
 80084a2:	48b1      	ldr	r0, [pc, #708]	; (8008768 <_lv_disp_refr_task+0x3e8>)
    if(disp_refr->inv_p == 0) return;
 80084a4:	f3c2 0209 	ubfx	r2, r2, #0, #10
    px_num = 0;
 80084a8:	9001      	str	r0, [sp, #4]
 80084aa:	6001      	str	r1, [r0, #0]
    if(disp_refr->inv_p == 0) return;
 80084ac:	2a00      	cmp	r2, #0
 80084ae:	f000 8138 	beq.w	8008722 <_lv_disp_refr_task+0x3a2>
    for(i = disp_refr->inv_p - 1; i >= 0; i--) {
 80084b2:	1e59      	subs	r1, r3, #1
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	f000 8162 	beq.w	800877e <_lv_disp_refr_task+0x3fe>
 80084ba:	f503 72b3 	add.w	r2, r3, #358	; 0x166
 80084be:	4422      	add	r2, r4
 80084c0:	e002      	b.n	80084c8 <_lv_disp_refr_task+0x148>
 80084c2:	3901      	subs	r1, #1
 80084c4:	f0c0 8210 	bcc.w	80088e8 <_lv_disp_refr_task+0x568>
        if(disp_refr->inv_area_joined[i] == 0) {
 80084c8:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
 80084cc:	2800      	cmp	r0, #0
 80084ce:	d1f8      	bne.n	80084c2 <_lv_disp_refr_task+0x142>
 80084d0:	9103      	str	r1, [sp, #12]
    disp_refr->driver.buffer->last_area = 0;
 80084d2:	6862      	ldr	r2, [r4, #4]
 80084d4:	f892 1020 	ldrb.w	r1, [r2, #32]
 80084d8:	f36f 0100 	bfc	r1, #0, #1
 80084dc:	f882 1020 	strb.w	r1, [r2, #32]
    disp_refr->driver.buffer->last_part = 0;
 80084e0:	f892 1020 	ldrb.w	r1, [r2, #32]
 80084e4:	f36f 0141 	bfc	r1, #1, #1
 80084e8:	f882 1020 	strb.w	r1, [r2, #32]
    for(i = 0; i < disp_refr->inv_p; i++) {
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	f000 8153 	beq.w	8008798 <_lv_disp_refr_task+0x418>
 80084f2:	2200      	movs	r2, #0
        lv_coord_t row_last = 0;
 80084f4:	4691      	mov	r9, r2
 80084f6:	e036      	b.n	8008566 <_lv_disp_refr_task+0x1e6>
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 80084f8:	f8db 0000 	ldr.w	r0, [fp]
        vdb->area.x1        = 0;
 80084fc:	f04f 0500 	mov.w	r5, #0
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 8008500:	f00b fa30 	bl	8013964 <lv_disp_get_buf>
 8008504:	4604      	mov	r4, r0
        vdb->area.x2        = lv_disp_get_hor_res(disp_refr) - 1;
 8008506:	f8db 0000 	ldr.w	r0, [fp]
        vdb->area.x1        = 0;
 800850a:	8225      	strh	r5, [r4, #16]
        vdb->area.x2        = lv_disp_get_hor_res(disp_refr) - 1;
 800850c:	f00b f9c4 	bl	8013898 <lv_disp_get_hor_res>
 8008510:	1e43      	subs	r3, r0, #1
        vdb->area.y1        = 0;
 8008512:	8265      	strh	r5, [r4, #18]
        vdb->area.x2        = lv_disp_get_hor_res(disp_refr) - 1;
 8008514:	82a3      	strh	r3, [r4, #20]
        vdb->area.y2        = lv_disp_get_ver_res(disp_refr) - 1;
 8008516:	f8db 0000 	ldr.w	r0, [fp]
 800851a:	f00b f9cf 	bl	80138bc <lv_disp_get_ver_res>
        disp_refr->driver.buffer->last_part = 1;
 800851e:	f8db 2000 	ldr.w	r2, [fp]
        vdb->area.y2        = lv_disp_get_ver_res(disp_refr) - 1;
 8008522:	4603      	mov	r3, r0
        lv_refr_area_part(area_p);
 8008524:	4650      	mov	r0, sl
        disp_refr->driver.buffer->last_part = 1;
 8008526:	6852      	ldr	r2, [r2, #4]
        vdb->area.y2        = lv_disp_get_ver_res(disp_refr) - 1;
 8008528:	3b01      	subs	r3, #1
 800852a:	82e3      	strh	r3, [r4, #22]
        disp_refr->driver.buffer->last_part = 1;
 800852c:	f892 3020 	ldrb.w	r3, [r2, #32]
 8008530:	f043 0302 	orr.w	r3, r3, #2
 8008534:	f882 3020 	strb.w	r3, [r2, #32]
        lv_refr_area_part(area_p);
 8008538:	f7ff fd86 	bl	8008048 <lv_refr_area_part>
            px_num += lv_area_get_size(&disp_refr->inv_areas[i]);
 800853c:	9b00      	ldr	r3, [sp, #0]
 800853e:	f8db 0000 	ldr.w	r0, [fp]
 8008542:	4418      	add	r0, r3
 8008544:	f00b fcee 	bl	8013f24 <lv_area_get_size>
 8008548:	9901      	ldr	r1, [sp, #4]
 800854a:	f8db 4000 	ldr.w	r4, [fp]
 800854e:	680a      	ldr	r2, [r1, #0]
 8008550:	f8b4 3186 	ldrh.w	r3, [r4, #390]	; 0x186
 8008554:	4410      	add	r0, r2
 8008556:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800855a:	6008      	str	r0, [r1, #0]
    for(i = 0; i < disp_refr->inv_p; i++) {
 800855c:	f109 0901 	add.w	r9, r9, #1
 8008560:	4599      	cmp	r9, r3
 8008562:	f280 8119 	bge.w	8008798 <_lv_disp_refr_task+0x418>
        if(disp_refr->inv_area_joined[i] == 0) {
 8008566:	eb04 0209 	add.w	r2, r4, r9
 800856a:	f892 2166 	ldrb.w	r2, [r2, #358]	; 0x166
 800856e:	2a00      	cmp	r2, #0
 8008570:	d1f4      	bne.n	800855c <_lv_disp_refr_task+0x1dc>
            if(i == last_i) disp_refr->driver.buffer->last_area = 1;
 8008572:	9b03      	ldr	r3, [sp, #12]
 8008574:	6862      	ldr	r2, [r4, #4]
 8008576:	454b      	cmp	r3, r9
 8008578:	d105      	bne.n	8008586 <_lv_disp_refr_task+0x206>
 800857a:	f892 3020 	ldrb.w	r3, [r2, #32]
 800857e:	f043 0301 	orr.w	r3, r3, #1
 8008582:	f882 3020 	strb.w	r3, [r2, #32]
            disp_refr->driver.buffer->last_part = 0;
 8008586:	f892 3020 	ldrb.w	r3, [r2, #32]
 800858a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
    if(lv_disp_is_true_double_buf(disp_refr)) {
 800858e:	4620      	mov	r0, r4
            disp_refr->driver.buffer->last_part = 0;
 8008590:	f36f 0341 	bfc	r3, #1, #1
 8008594:	9102      	str	r1, [sp, #8]
 8008596:	3166      	adds	r1, #102	; 0x66
 8008598:	f882 3020 	strb.w	r3, [r2, #32]
            lv_refr_area(&disp_refr->inv_areas[i]);
 800859c:	eb04 0a01 	add.w	sl, r4, r1
    if(lv_disp_is_true_double_buf(disp_refr)) {
 80085a0:	9100      	str	r1, [sp, #0]
 80085a2:	f00b fa07 	bl	80139b4 <lv_disp_is_true_double_buf>
 80085a6:	2800      	cmp	r0, #0
 80085a8:	d1a6      	bne.n	80084f8 <_lv_disp_refr_task+0x178>
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 80085aa:	f8db 0000 	ldr.w	r0, [fp]
 80085ae:	f00b f9d9 	bl	8013964 <lv_disp_get_buf>
        lv_coord_t h = lv_area_get_height(area_p);
 80085b2:	f9ba 7006 	ldrsh.w	r7, [sl, #6]
 80085b6:	9b00      	ldr	r3, [sp, #0]
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 80085b8:	4605      	mov	r5, r0
 80085ba:	f8ba 8004 	ldrh.w	r8, [sl, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80085be:	1c7e      	adds	r6, r7, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80085c0:	5ae2      	ldrh	r2, [r4, r3]
 80085c2:	f108 0801 	add.w	r8, r8, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80085c6:	f8ba 3002 	ldrh.w	r3, [sl, #2]
            area_p->y2 >= lv_disp_get_ver_res(disp_refr) ? lv_disp_get_ver_res(disp_refr) - 1 : area_p->y2;
 80085ca:	f8db 0000 	ldr.w	r0, [fp]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80085ce:	eba8 0802 	sub.w	r8, r8, r2
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80085d2:	1af6      	subs	r6, r6, r3
 80085d4:	f00b f972 	bl	80138bc <lv_disp_get_ver_res>
        lv_coord_t y2 =
 80085d8:	4287      	cmp	r7, r0
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80085da:	fa0f f888 	sxth.w	r8, r8
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80085de:	b236      	sxth	r6, r6
 80085e0:	f280 8170 	bge.w	80088c4 <_lv_disp_refr_task+0x544>
 80085e4:	eb04 03c9 	add.w	r3, r4, r9, lsl #3
 80085e8:	f9b3 706c 	ldrsh.w	r7, [r3, #108]	; 0x6c
        int32_t max_row = (uint32_t)vdb->size / w;
 80085ec:	68eb      	ldr	r3, [r5, #12]
        if(disp_refr->driver.rounder_cb) {
 80085ee:	f8db 0000 	ldr.w	r0, [fp]
        int32_t max_row = (uint32_t)vdb->size / w;
 80085f2:	fbb3 f8f8 	udiv	r8, r3, r8
        if(disp_refr->driver.rounder_cb) {
 80085f6:	6903      	ldr	r3, [r0, #16]
 80085f8:	4546      	cmp	r6, r8
 80085fa:	bfa8      	it	ge
 80085fc:	4646      	movge	r6, r8
 80085fe:	b33b      	cbz	r3, 8008650 <_lv_disp_refr_task+0x2d0>
            tmp.x2 = 0;
 8008600:	f04f 0100 	mov.w	r1, #0
            lv_coord_t h_tmp = max_row;
 8008604:	b232      	sxth	r2, r6
            tmp.x1 = 0;
 8008606:	9404      	str	r4, [sp, #16]
            tmp.x2 = 0;
 8008608:	f8ad 101c 	strh.w	r1, [sp, #28]
            tmp.x1 = 0;
 800860c:	2100      	movs	r1, #0
 800860e:	4614      	mov	r4, r2
 8008610:	9106      	str	r1, [sp, #24]
            lv_coord_t h_tmp = max_row;
 8008612:	e006      	b.n	8008622 <_lv_disp_refr_task+0x2a2>
            } while(h_tmp > 0);
 8008614:	f1b8 0f00 	cmp.w	r8, #0
 8008618:	4644      	mov	r4, r8
 800861a:	dd8f      	ble.n	800853c <_lv_disp_refr_task+0x1bc>
 800861c:	f8db 0000 	ldr.w	r0, [fp]
 8008620:	6903      	ldr	r3, [r0, #16]
                tmp.y2 = h_tmp - 1;
 8008622:	f104 38ff 	add.w	r8, r4, #4294967295
                disp_refr->driver.rounder_cb(&disp_refr->driver, &tmp);
 8008626:	a906      	add	r1, sp, #24
 8008628:	fa0f f888 	sxth.w	r8, r8
                tmp.y2 = h_tmp - 1;
 800862c:	f8ad 801e 	strh.w	r8, [sp, #30]
                disp_refr->driver.rounder_cb(&disp_refr->driver, &tmp);
 8008630:	4798      	blx	r3
                if(lv_area_get_height(&tmp) <= max_row) break;
 8008632:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 8008636:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 800863a:	3101      	adds	r1, #1
 800863c:	1acb      	subs	r3, r1, r3
 800863e:	b21b      	sxth	r3, r3
 8008640:	429e      	cmp	r6, r3
 8008642:	dbe7      	blt.n	8008614 <_lv_disp_refr_task+0x294>
 8008644:	4622      	mov	r2, r4
 8008646:	9c04      	ldr	r4, [sp, #16]
            if(h_tmp <= 0) {
 8008648:	2a00      	cmp	r2, #0
 800864a:	f77f af77 	ble.w	800853c <_lv_disp_refr_task+0x1bc>
                max_row = tmp.y2 + 1;
 800864e:	460e      	mov	r6, r1
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
 8008650:	9b02      	ldr	r3, [sp, #8]
 8008652:	4423      	add	r3, r4
 8008654:	f9b3 1068 	ldrsh.w	r1, [r3, #104]	; 0x68
 8008658:	198a      	adds	r2, r1, r6
 800865a:	3a01      	subs	r2, #1
 800865c:	42ba      	cmp	r2, r7
 800865e:	f300 8146 	bgt.w	80088ee <_lv_disp_refr_task+0x56e>
 8008662:	b2b2      	uxth	r2, r6
 8008664:	f8cd 9010 	str.w	r9, [sp, #16]
 8008668:	9602      	str	r6, [sp, #8]
 800866a:	46d1      	mov	r9, sl
 800866c:	eb02 0801 	add.w	r8, r2, r1
 8008670:	469a      	mov	sl, r3
 8008672:	4616      	mov	r6, r2
 8008674:	fa1f f888 	uxth.w	r8, r8
 8008678:	e01a      	b.n	80086b0 <_lv_disp_refr_task+0x330>
            if(vdb->area.y2 > y2) vdb->area.y2 = y2;
 800867a:	463c      	mov	r4, r7
 800867c:	82ef      	strh	r7, [r5, #22]
            if(y2 == row_last) disp_refr->driver.buffer->last_part = 1;
 800867e:	f8db 3000 	ldr.w	r3, [fp]
 8008682:	6859      	ldr	r1, [r3, #4]
 8008684:	f891 3020 	ldrb.w	r3, [r1, #32]
 8008688:	f043 0302 	orr.w	r3, r3, #2
 800868c:	f881 3020 	strb.w	r3, [r1, #32]
            lv_refr_area_part(area_p);
 8008690:	4648      	mov	r0, r9
 8008692:	f7ff fcd9 	bl	8008048 <lv_refr_area_part>
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
 8008696:	eb08 0306 	add.w	r3, r8, r6
 800869a:	fa0f f188 	sxth.w	r1, r8
 800869e:	fa1f f883 	uxth.w	r8, r3
 80086a2:	9b02      	ldr	r3, [sp, #8]
 80086a4:	eb01 0c03 	add.w	ip, r1, r3
 80086a8:	f10c 3cff 	add.w	ip, ip, #4294967295
 80086ac:	4567      	cmp	r7, ip
 80086ae:	db3f      	blt.n	8008730 <_lv_disp_refr_task+0x3b0>
            if(y2 == row_last) disp_refr->driver.buffer->last_part = 1;
 80086b0:	f108 34ff 	add.w	r4, r8, #4294967295
            vdb->area.x1 = area_p->x1;
 80086b4:	f9ba 1066 	ldrsh.w	r1, [sl, #102]	; 0x66
            vdb->area.y1 = row;
 80086b8:	eba8 0306 	sub.w	r3, r8, r6
 80086bc:	b224      	sxth	r4, r4
            vdb->area.x1 = area_p->x1;
 80086be:	8229      	strh	r1, [r5, #16]
            vdb->area.x2 = area_p->x2;
 80086c0:	f9ba 106a 	ldrsh.w	r1, [sl, #106]	; 0x6a
            if(vdb->area.y2 > y2) vdb->area.y2 = y2;
 80086c4:	42a7      	cmp	r7, r4
            vdb->area.y2 = row + max_row - 1;
 80086c6:	82ec      	strh	r4, [r5, #22]
            vdb->area.x2 = area_p->x2;
 80086c8:	82a9      	strh	r1, [r5, #20]
            vdb->area.y1 = row;
 80086ca:	826b      	strh	r3, [r5, #18]
            if(vdb->area.y2 > y2) vdb->area.y2 = y2;
 80086cc:	dbd5      	blt.n	800867a <_lv_disp_refr_task+0x2fa>
            if(y2 == row_last) disp_refr->driver.buffer->last_part = 1;
 80086ce:	d1df      	bne.n	8008690 <_lv_disp_refr_task+0x310>
 80086d0:	e7d5      	b.n	800867e <_lv_disp_refr_task+0x2fe>
 80086d2:	460b      	mov	r3, r1
                if(copy_buf) _lv_mem_buf_release(copy_buf);
 80086d4:	b127      	cbz	r7, 80086e0 <_lv_disp_refr_task+0x360>
 80086d6:	4638      	mov	r0, r7
 80086d8:	f00c fbfe 	bl	8014ed8 <_lv_mem_buf_release>
 80086dc:	f8db 3000 	ldr.w	r3, [fp]
        _lv_memset_00(disp_refr->inv_areas, sizeof(disp_refr->inv_areas));
 80086e0:	f103 0066 	add.w	r0, r3, #102	; 0x66
 80086e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80086e8:	f00d f846 	bl	8015778 <_lv_memset_00>
        _lv_memset_00(disp_refr->inv_area_joined, sizeof(disp_refr->inv_area_joined));
 80086ec:	f8db 0000 	ldr.w	r0, [fp]
 80086f0:	2120      	movs	r1, #32
 80086f2:	f500 70b3 	add.w	r0, r0, #358	; 0x166
 80086f6:	f00d f83f 	bl	8015778 <_lv_memset_00>
        disp_refr->inv_p = 0;
 80086fa:	f8db 3000 	ldr.w	r3, [fp]
        elaps = lv_tick_elaps(start);
 80086fe:	9805      	ldr	r0, [sp, #20]
        disp_refr->inv_p = 0;
 8008700:	f8b3 2186 	ldrh.w	r2, [r3, #390]	; 0x186
 8008704:	f36f 0209 	bfc	r2, #0, #10
 8008708:	f8a3 2186 	strh.w	r2, [r3, #390]	; 0x186
        elaps = lv_tick_elaps(start);
 800870c:	f00b f9fc 	bl	8013b08 <lv_tick_elaps>
        if(disp_refr->driver.monitor_cb) {
 8008710:	f8db 4000 	ldr.w	r4, [fp]
        elaps = lv_tick_elaps(start);
 8008714:	4601      	mov	r1, r0
        if(disp_refr->driver.monitor_cb) {
 8008716:	69a3      	ldr	r3, [r4, #24]
 8008718:	b11b      	cbz	r3, 8008722 <_lv_disp_refr_task+0x3a2>
            disp_refr->driver.monitor_cb(&disp_refr->driver, elaps, px_num);
 800871a:	9a01      	ldr	r2, [sp, #4]
 800871c:	4620      	mov	r0, r4
 800871e:	6812      	ldr	r2, [r2, #0]
 8008720:	4798      	blx	r3
    _lv_mem_buf_free_all();
 8008722:	f00c fc3d 	bl	8014fa0 <_lv_mem_buf_free_all>
    _lv_font_clean_up_fmt_txt();
 8008726:	f00a fff9 	bl	801371c <_lv_font_clean_up_fmt_txt>
}
 800872a:	b009      	add	sp, #36	; 0x24
 800872c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008730:	4653      	mov	r3, sl
 8008732:	46ca      	mov	sl, r9
 8008734:	f8dd 9010 	ldr.w	r9, [sp, #16]
        if(y2 != row_last) {
 8008738:	42a7      	cmp	r7, r4
 800873a:	f43f aeff 	beq.w	800853c <_lv_disp_refr_task+0x1bc>
            vdb->area.x1 = area_p->x1;
 800873e:	f9b3 4066 	ldrsh.w	r4, [r3, #102]	; 0x66
            lv_refr_area_part(area_p);
 8008742:	4650      	mov	r0, sl
            disp_refr->driver.buffer->last_part = 1;
 8008744:	f8db 2000 	ldr.w	r2, [fp]
            vdb->area.x1 = area_p->x1;
 8008748:	822c      	strh	r4, [r5, #16]
            disp_refr->driver.buffer->last_part = 1;
 800874a:	6852      	ldr	r2, [r2, #4]
            vdb->area.x2 = area_p->x2;
 800874c:	f9b3 306a 	ldrsh.w	r3, [r3, #106]	; 0x6a
            vdb->area.y1 = row;
 8008750:	8269      	strh	r1, [r5, #18]
            vdb->area.x2 = area_p->x2;
 8008752:	82ab      	strh	r3, [r5, #20]
            vdb->area.y2 = y2;
 8008754:	82ef      	strh	r7, [r5, #22]
            disp_refr->driver.buffer->last_part = 1;
 8008756:	f892 3020 	ldrb.w	r3, [r2, #32]
 800875a:	f043 0302 	orr.w	r3, r3, #2
 800875e:	f882 3020 	strb.w	r3, [r2, #32]
            lv_refr_area_part(area_p);
 8008762:	f7ff fc71 	bl	8008048 <lv_refr_area_part>
 8008766:	e6e9      	b.n	800853c <_lv_disp_refr_task+0x1bc>
 8008768:	200178a0 	.word	0x200178a0
 800876c:	2001789c 	.word	0x2001789c
    px_num = 0;
 8008770:	4961      	ldr	r1, [pc, #388]	; (80088f8 <_lv_disp_refr_task+0x578>)
    if(disp_refr->inv_p == 0) return;
 8008772:	f3c2 0209 	ubfx	r2, r2, #0, #10
    px_num = 0;
 8008776:	9101      	str	r1, [sp, #4]
 8008778:	600b      	str	r3, [r1, #0]
    if(disp_refr->inv_p == 0) return;
 800877a:	2a00      	cmp	r2, #0
 800877c:	d0d1      	beq.n	8008722 <_lv_disp_refr_task+0x3a2>
    disp_refr->driver.buffer->last_area = 0;
 800877e:	6863      	ldr	r3, [r4, #4]
 8008780:	f893 2020 	ldrb.w	r2, [r3, #32]
 8008784:	f36f 0200 	bfc	r2, #0, #1
 8008788:	f883 2020 	strb.w	r2, [r3, #32]
    disp_refr->driver.buffer->last_part = 0;
 800878c:	f893 2020 	ldrb.w	r2, [r3, #32]
 8008790:	f36f 0241 	bfc	r2, #1, #1
 8008794:	f883 2020 	strb.w	r2, [r3, #32]
    if(disp_refr->inv_p != 0) {
 8008798:	f8b4 3186 	ldrh.w	r3, [r4, #390]	; 0x186
 800879c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d0be      	beq.n	8008722 <_lv_disp_refr_task+0x3a2>
        if(lv_disp_is_true_double_buf(disp_refr)) {
 80087a4:	4620      	mov	r0, r4
 80087a6:	f00b f905 	bl	80139b4 <lv_disp_is_true_double_buf>
            if(disp_refr->driver.set_px_cb) {
 80087aa:	f8db 3000 	ldr.w	r3, [fp]
        if(lv_disp_is_true_double_buf(disp_refr)) {
 80087ae:	2800      	cmp	r0, #0
 80087b0:	d096      	beq.n	80086e0 <_lv_disp_refr_task+0x360>
            if(disp_refr->driver.set_px_cb) {
 80087b2:	695a      	ldr	r2, [r3, #20]
 80087b4:	2a00      	cmp	r2, #0
 80087b6:	d193      	bne.n	80086e0 <_lv_disp_refr_task+0x360>
                lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 80087b8:	4618      	mov	r0, r3
 80087ba:	f00b f8d3 	bl	8013964 <lv_disp_get_buf>
 80087be:	4604      	mov	r4, r0
                lv_refr_vdb_flush();
 80087c0:	f7ff fb02 	bl	8007dc8 <lv_refr_vdb_flush>
                while(vdb->flushing);
 80087c4:	69a3      	ldr	r3, [r4, #24]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d1fc      	bne.n	80087c4 <_lv_disp_refr_task+0x444>
                copy_buf = _lv_mem_buf_get(disp_refr->driver.hor_res * sizeof(lv_color_t));
 80087ca:	f8db 3000 	ldr.w	r3, [fp]
 80087ce:	f9b3 0000 	ldrsh.w	r0, [r3]
 80087d2:	0080      	lsls	r0, r0, #2
 80087d4:	f00c fea8 	bl	8015528 <_lv_mem_buf_get>
                uint8_t * buf_act = (uint8_t *)vdb->buf_act;
 80087d8:	68a3      	ldr	r3, [r4, #8]
                uint8_t * buf_ina = (uint8_t *)vdb->buf_act == vdb->buf1 ? vdb->buf2 : vdb->buf1;
 80087da:	6822      	ldr	r2, [r4, #0]
                copy_buf = _lv_mem_buf_get(disp_refr->driver.hor_res * sizeof(lv_color_t));
 80087dc:	4607      	mov	r7, r0
                uint8_t * buf_act = (uint8_t *)vdb->buf_act;
 80087de:	9304      	str	r3, [sp, #16]
                uint8_t * buf_ina = (uint8_t *)vdb->buf_act == vdb->buf1 ? vdb->buf2 : vdb->buf1;
 80087e0:	429a      	cmp	r2, r3
 80087e2:	9202      	str	r2, [sp, #8]
 80087e4:	f000 8085 	beq.w	80088f2 <_lv_disp_refr_task+0x572>
                lv_coord_t hres = lv_disp_get_hor_res(disp_refr);
 80087e8:	f8db 0000 	ldr.w	r0, [fp]
 80087ec:	f00b f854 	bl	8013898 <lv_disp_get_hor_res>
                for(a = 0; a < disp_refr->inv_p; a++) {
 80087f0:	f8db 3000 	ldr.w	r3, [fp]
                lv_coord_t hres = lv_disp_get_hor_res(disp_refr);
 80087f4:	9003      	str	r0, [sp, #12]
                for(a = 0; a < disp_refr->inv_p; a++) {
 80087f6:	f8b3 2186 	ldrh.w	r2, [r3, #390]	; 0x186
 80087fa:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80087fe:	2a00      	cmp	r2, #0
 8008800:	f43f af68 	beq.w	80086d4 <_lv_disp_refr_task+0x354>
                            start_offs += hres * sizeof(lv_color_t);
 8008804:	ea4f 0a80 	mov.w	sl, r0, lsl #2
 8008808:	f04f 0800 	mov.w	r8, #0
 800880c:	4619      	mov	r1, r3
 800880e:	4616      	mov	r6, r2
 8008810:	e006      	b.n	8008820 <_lv_disp_refr_task+0x4a0>
                for(a = 0; a < disp_refr->inv_p; a++) {
 8008812:	f108 0801 	add.w	r8, r8, #1
 8008816:	fa1f f288 	uxth.w	r2, r8
 800881a:	4296      	cmp	r6, r2
 800881c:	f67f af59 	bls.w	80086d2 <_lv_disp_refr_task+0x352>
                    if(disp_refr->inv_area_joined[a] == 0) {
 8008820:	eb01 0208 	add.w	r2, r1, r8
 8008824:	f892 2166 	ldrb.w	r2, [r2, #358]	; 0x166
 8008828:	2a00      	cmp	r2, #0
 800882a:	d1f2      	bne.n	8008812 <_lv_disp_refr_task+0x492>
                        uint32_t start_offs =
 800882c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
                        for(y = disp_refr->inv_areas[a].y1; y <= disp_refr->inv_areas[a].y2; y++) {
 8008830:	f108 090c 	add.w	r9, r8, #12
 8008834:	eb01 05c8 	add.w	r5, r1, r8, lsl #3
                            (hres * disp_refr->inv_areas[a].y1 + disp_refr->inv_areas[a].x1) * sizeof(lv_color_t);
 8008838:	9b03      	ldr	r3, [sp, #12]
                        uint32_t line_length = lv_area_get_width(&disp_refr->inv_areas[a]) * sizeof(lv_color_t);
 800883a:	3266      	adds	r2, #102	; 0x66
                        for(y = disp_refr->inv_areas[a].y1; y <= disp_refr->inv_areas[a].y2; y++) {
 800883c:	eb01 0cc9 	add.w	ip, r1, r9, lsl #3
                            (hres * disp_refr->inv_areas[a].y1 + disp_refr->inv_areas[a].x1) * sizeof(lv_color_t);
 8008840:	f9b5 4068 	ldrsh.w	r4, [r5, #104]	; 0x68
                        for(y = disp_refr->inv_areas[a].y1; y <= disp_refr->inv_areas[a].y2; y++) {
 8008844:	ea4f 09c9 	mov.w	r9, r9, lsl #3
                        uint32_t line_length = lv_area_get_width(&disp_refr->inv_areas[a]) * sizeof(lv_color_t);
 8008848:	1888      	adds	r0, r1, r2
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800884a:	5a8a      	ldrh	r2, [r1, r2]
                            (hres * disp_refr->inv_areas[a].y1 + disp_refr->inv_areas[a].x1) * sizeof(lv_color_t);
 800884c:	f9b5 5066 	ldrsh.w	r5, [r5, #102]	; 0x66
 8008850:	8880      	ldrh	r0, [r0, #4]
                        for(y = disp_refr->inv_areas[a].y1; y <= disp_refr->inv_areas[a].y2; y++) {
 8008852:	f9bc c00c 	ldrsh.w	ip, [ip, #12]
                            (hres * disp_refr->inv_areas[a].y1 + disp_refr->inv_areas[a].x1) * sizeof(lv_color_t);
 8008856:	fb03 5504 	mla	r5, r3, r4, r5
 800885a:	3001      	adds	r0, #1
                        for(y = disp_refr->inv_areas[a].y1; y <= disp_refr->inv_areas[a].y2; y++) {
 800885c:	45a4      	cmp	ip, r4
                        uint32_t start_offs =
 800885e:	ea4f 0585 	mov.w	r5, r5, lsl #2
 8008862:	eba0 0202 	sub.w	r2, r0, r2
                        uint32_t line_length = lv_area_get_width(&disp_refr->inv_areas[a]) * sizeof(lv_color_t);
 8008866:	b212      	sxth	r2, r2
 8008868:	ea4f 0282 	mov.w	r2, r2, lsl #2
                        for(y = disp_refr->inv_areas[a].y1; y <= disp_refr->inv_areas[a].y2; y++) {
 800886c:	dbd1      	blt.n	8008812 <_lv_disp_refr_task+0x492>
 800886e:	9b02      	ldr	r3, [sp, #8]
 8008870:	f8cd 8000 	str.w	r8, [sp]
 8008874:	4690      	mov	r8, r2
 8008876:	195e      	adds	r6, r3, r5
 8008878:	9b04      	ldr	r3, [sp, #16]
 800887a:	441d      	add	r5, r3
                            _lv_memcpy(copy_buf, buf_ina + start_offs, line_length);
 800887c:	4631      	mov	r1, r6
 800887e:	4642      	mov	r2, r8
 8008880:	4638      	mov	r0, r7
 8008882:	3401      	adds	r4, #1
 8008884:	f00c fbfa 	bl	801507c <_lv_memcpy>
                            _lv_memcpy(buf_act + start_offs, copy_buf, line_length);
 8008888:	4639      	mov	r1, r7
 800888a:	4628      	mov	r0, r5
 800888c:	4642      	mov	r2, r8
 800888e:	f00c fbf5 	bl	801507c <_lv_memcpy>
                        for(y = disp_refr->inv_areas[a].y1; y <= disp_refr->inv_areas[a].y2; y++) {
 8008892:	f8db 1000 	ldr.w	r1, [fp]
 8008896:	b224      	sxth	r4, r4
 8008898:	4456      	add	r6, sl
 800889a:	eb01 0309 	add.w	r3, r1, r9
 800889e:	4455      	add	r5, sl
 80088a0:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80088a4:	42a3      	cmp	r3, r4
 80088a6:	dae9      	bge.n	800887c <_lv_disp_refr_task+0x4fc>
 80088a8:	f8b1 6186 	ldrh.w	r6, [r1, #390]	; 0x186
 80088ac:	f8dd 8000 	ldr.w	r8, [sp]
 80088b0:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80088b4:	e7ad      	b.n	8008812 <_lv_disp_refr_task+0x492>
        disp_refr->inv_p = 0;
 80088b6:	f363 0209 	bfi	r2, r3, #0, #10
 80088ba:	f8a4 2186 	strh.w	r2, [r4, #390]	; 0x186
}
 80088be:	b009      	add	sp, #36	; 0x24
 80088c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            area_p->y2 >= lv_disp_get_ver_res(disp_refr) ? lv_disp_get_ver_res(disp_refr) - 1 : area_p->y2;
 80088c4:	f8db 0000 	ldr.w	r0, [fp]
 80088c8:	f00a fff8 	bl	80138bc <lv_disp_get_ver_res>
 80088cc:	3801      	subs	r0, #1
        lv_coord_t y2 =
 80088ce:	b207      	sxth	r7, r0
 80088d0:	e68c      	b.n	80085ec <_lv_disp_refr_task+0x26c>
    if(disp_refr->inv_p == 0) return;
 80088d2:	f8b4 2186 	ldrh.w	r2, [r4, #390]	; 0x186
    px_num = 0;
 80088d6:	4908      	ldr	r1, [pc, #32]	; (80088f8 <_lv_disp_refr_task+0x578>)
    if(disp_refr->inv_p == 0) return;
 80088d8:	f3c2 0209 	ubfx	r2, r2, #0, #10
    px_num = 0;
 80088dc:	9101      	str	r1, [sp, #4]
 80088de:	600b      	str	r3, [r1, #0]
    if(disp_refr->inv_p == 0) return;
 80088e0:	2a00      	cmp	r2, #0
 80088e2:	f43f af1e 	beq.w	8008722 <_lv_disp_refr_task+0x3a2>
 80088e6:	e74a      	b.n	800877e <_lv_disp_refr_task+0x3fe>
    int32_t last_i = 0;
 80088e8:	2200      	movs	r2, #0
 80088ea:	9203      	str	r2, [sp, #12]
 80088ec:	e5f1      	b.n	80084d2 <_lv_disp_refr_task+0x152>
        lv_coord_t row_last = 0;
 80088ee:	2400      	movs	r4, #0
 80088f0:	e722      	b.n	8008738 <_lv_disp_refr_task+0x3b8>
                uint8_t * buf_ina = (uint8_t *)vdb->buf_act == vdb->buf1 ? vdb->buf2 : vdb->buf1;
 80088f2:	6863      	ldr	r3, [r4, #4]
 80088f4:	9302      	str	r3, [sp, #8]
 80088f6:	e777      	b.n	80087e8 <_lv_disp_refr_task+0x468>
 80088f8:	200178a0 	.word	0x200178a0

080088fc <lv_style_init>:
 * Initialize a style
 * @param style pointer to a style to initialize
 */
void lv_style_init(lv_style_t * style)
{
    _lv_memset_00(style, sizeof(lv_style_t));
 80088fc:	2104      	movs	r1, #4
 80088fe:	f00c bf3b 	b.w	8015778 <_lv_memset_00>
 8008902:	bf00      	nop

08008904 <lv_style_copy>:
 * @param style_dest pointer to the destination style. (Should be initialized with `lv_style_init()`)
 * @param style_src pointer to the source (to copy )style
 */
void lv_style_copy(lv_style_t * style_dest, const lv_style_t * style_src)
{
    if(style_src == NULL) return;
 8008904:	2900      	cmp	r1, #0
 8008906:	d036      	beq.n	8008976 <lv_style_copy+0x72>
{
 8008908:	b570      	push	{r4, r5, r6, lr}
 800890a:	460c      	mov	r4, r1

    LV_ASSERT_STYLE(style_dest);
    LV_ASSERT_STYLE(style_src);

    if(style_src->map == NULL) return;
 800890c:	6809      	ldr	r1, [r1, #0]
{
 800890e:	b084      	sub	sp, #16
    if(style_src->map == NULL) return;
 8008910:	b379      	cbz	r1, 8008972 <lv_style_copy+0x6e>
 */
static inline lv_style_property_t get_style_prop(const lv_style_t * style, size_t idx)
{
    lv_style_property_t prop;
    uint8_t * prop_p = (uint8_t *)&prop;
    prop_p[0] = style->map[idx];
 8008912:	780b      	ldrb	r3, [r1, #0]
 8008914:	4606      	mov	r6, r0
    prop_p[1] = style->map[idx + 1];
 8008916:	784a      	ldrb	r2, [r1, #1]
    prop_p[0] = style->map[idx];
 8008918:	f88d 300e 	strb.w	r3, [sp, #14]
 * @param idx index of the style in style->map
 * @return id of property in style->map + idx
 */
static inline uint8_t get_style_prop_id(const lv_style_t * style, size_t idx)
{
    return get_style_prop(style, idx) & 0xFF;
 800891c:	b2db      	uxtb	r3, r3
    prop_p[1] = style->map[idx + 1];
 800891e:	f88d 200f 	strb.w	r2, [sp, #15]
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
 8008922:	2bff      	cmp	r3, #255	; 0xff
 8008924:	d028      	beq.n	8008978 <lv_style_copy+0x74>
    size_t i = 0;
 8008926:	2200      	movs	r2, #0
 * @param idx index of the style in style->map
 * @return attribute of property in style->map + idx
 */
static inline size_t get_prop_size(uint8_t prop_id)
{
    prop_id &= 0xF;
 8008928:	f003 030f 	and.w	r3, r3, #15
    size_t size = sizeof(lv_style_property_t);
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
 800892c:	2504      	movs	r5, #4
 800892e:	2b08      	cmp	r3, #8
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
    else if(prop_id < LV_STYLE_ID_PTR) size += sizeof(lv_opa_t);
 8008930:	f1a3 000c 	sub.w	r0, r3, #12
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
 8008934:	d903      	bls.n	800893e <lv_style_copy+0x3a>
    else size += sizeof(const void *);
 8008936:	2801      	cmp	r0, #1
 8008938:	bf94      	ite	ls
 800893a:	2503      	movls	r5, #3
 800893c:	2506      	movhi	r5, #6
 * @param idx index of the style in style->map
 * @return index of next property in style->map
 */
static inline size_t get_next_prop_index(uint8_t prop_id, size_t idx)
{
    return idx + get_prop_size(prop_id);
 800893e:	442a      	add	r2, r5
    prop_p[0] = style->map[idx];
 8008940:	5c88      	ldrb	r0, [r1, r2]
    prop_p[1] = style->map[idx + 1];
 8008942:	188b      	adds	r3, r1, r2
    prop_p[0] = style->map[idx];
 8008944:	f88d 000e 	strb.w	r0, [sp, #14]
    prop_p[1] = style->map[idx + 1];
 8008948:	7858      	ldrb	r0, [r3, #1]
    return get_style_prop(style, idx) & 0xFF;
 800894a:	f89d 300e 	ldrb.w	r3, [sp, #14]
    prop_p[1] = style->map[idx + 1];
 800894e:	f88d 000f 	strb.w	r0, [sp, #15]
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
 8008952:	2bff      	cmp	r3, #255	; 0xff
 8008954:	d1e8      	bne.n	8008928 <lv_style_copy+0x24>
 8008956:	3202      	adds	r2, #2
 8008958:	b292      	uxth	r2, r2
    style_dest->map = lv_mem_alloc(size);
 800895a:	4610      	mov	r0, r2
 800895c:	9201      	str	r2, [sp, #4]
 800895e:	f00c fa1f 	bl	8014da0 <lv_mem_alloc>
    _lv_memcpy(style_dest->map, style_src->map, size);
 8008962:	9a01      	ldr	r2, [sp, #4]
    style_dest->map = lv_mem_alloc(size);
 8008964:	6030      	str	r0, [r6, #0]
    _lv_memcpy(style_dest->map, style_src->map, size);
 8008966:	6821      	ldr	r1, [r4, #0]
}
 8008968:	b004      	add	sp, #16
 800896a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    _lv_memcpy(style_dest->map, style_src->map, size);
 800896e:	f00c bb85 	b.w	801507c <_lv_memcpy>
}
 8008972:	b004      	add	sp, #16
 8008974:	bd70      	pop	{r4, r5, r6, pc}
 8008976:	4770      	bx	lr
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
 8008978:	2202      	movs	r2, #2
 800897a:	e7ee      	b.n	800895a <lv_style_copy+0x56>

0800897c <lv_style_remove_prop>:
    if(style == NULL) return false;
 800897c:	2800      	cmp	r0, #0
 800897e:	d06c      	beq.n	8008a5a <lv_style_remove_prop+0xde>
    int32_t id = get_property_index(style, prop);
 8008980:	6802      	ldr	r2, [r0, #0]
{
 8008982:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008986:	4605      	mov	r5, r0
 8008988:	b087      	sub	sp, #28
    if(style->map == NULL) return -1;
 800898a:	2a00      	cmp	r2, #0
 800898c:	d061      	beq.n	8008a52 <lv_style_remove_prop+0xd6>
    prop_p[0] = style->map[idx];
 800898e:	f892 8000 	ldrb.w	r8, [r2]
    uint8_t id_to_find = prop & 0xFF;
 8008992:	fa5f fb81 	uxtb.w	fp, r1
    prop_p[1] = style->map[idx + 1];
 8008996:	f892 e001 	ldrb.w	lr, [r2, #1]
    attr = (prop >> 8) & 0xFF;
 800899a:	0a09      	lsrs	r1, r1, #8
    return get_style_prop(style, idx) & 0xFF;
 800899c:	fa5f f688 	uxtb.w	r6, r8
    prop_p[0] = style->map[idx];
 80089a0:	f88d 8016 	strb.w	r8, [sp, #22]
    prop_p[1] = style->map[idx + 1];
 80089a4:	f88d e017 	strb.w	lr, [sp, #23]
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
 80089a8:	2eff      	cmp	r6, #255	; 0xff
 80089aa:	d052      	beq.n	8008a52 <lv_style_remove_prop+0xd6>
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
 80089ac:	f001 047f 	and.w	r4, r1, #127	; 0x7f
    int16_t id_guess = -1;
 80089b0:	f04f 30ff 	mov.w	r0, #4294967295
    prop_p[1] = style->map[idx + 1];
 80089b4:	46f2      	mov	sl, lr
    prop_p[0] = style->map[idx];
 80089b6:	4643      	mov	r3, r8
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
 80089b8:	43e4      	mvns	r4, r4
    int16_t weight = -1;
 80089ba:	4684      	mov	ip, r0
    size_t i = 0;
 80089bc:	9001      	str	r0, [sp, #4]
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
 80089be:	9402      	str	r4, [sp, #8]
    size_t i = 0;
 80089c0:	2400      	movs	r4, #0
 80089c2:	9503      	str	r5, [sp, #12]
 80089c4:	e011      	b.n	80089ea <lv_style_remove_prop+0x6e>
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
 80089c6:	2f08      	cmp	r7, #8
 80089c8:	d903      	bls.n	80089d2 <lv_style_remove_prop+0x56>
    else size += sizeof(const void *);
 80089ca:	2d01      	cmp	r5, #1
 80089cc:	bf94      	ite	ls
 80089ce:	2603      	movls	r6, #3
 80089d0:	2606      	movhi	r6, #6
    return idx + get_prop_size(prop_id);
 80089d2:	4434      	add	r4, r6
    prop_p[0] = style->map[idx];
 80089d4:	5d13      	ldrb	r3, [r2, r4]
    prop_p[1] = style->map[idx + 1];
 80089d6:	1916      	adds	r6, r2, r4
 80089d8:	f896 a001 	ldrb.w	sl, [r6, #1]
    return get_style_prop(style, idx) & 0xFF;
 80089dc:	b2de      	uxtb	r6, r3
    prop_p[0] = style->map[idx];
 80089de:	f88d 3016 	strb.w	r3, [sp, #22]
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
 80089e2:	2eff      	cmp	r6, #255	; 0xff
    prop_p[1] = style->map[idx + 1];
 80089e4:	f88d a017 	strb.w	sl, [sp, #23]
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
 80089e8:	d020      	beq.n	8008a2c <lv_style_remove_prop+0xb0>
    prop_id &= 0xF;
 80089ea:	f006 070f 	and.w	r7, r6, #15
        if(prop_id == id_to_find) {
 80089ee:	45b3      	cmp	fp, r6
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
 80089f0:	f04f 0604 	mov.w	r6, #4
    else if(prop_id < LV_STYLE_ID_PTR) size += sizeof(lv_opa_t);
 80089f4:	f1a7 050c 	sub.w	r5, r7, #12
        if(prop_id == id_to_find) {
 80089f8:	d1e5      	bne.n	80089c6 <lv_style_remove_prop+0x4a>
    prop_p[1] = style->map[idx + 1];
 80089fa:	f88d a017 	strb.w	sl, [sp, #23]
    prop_p[0] = style->map[idx];
 80089fe:	f88d 3016 	strb.w	r3, [sp, #22]
    return prop;
 8008a02:	f8bd 3016 	ldrh.w	r3, [sp, #22]
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
 8008a06:	ea81 2913 	eor.w	r9, r1, r3, lsr #8
    return ((get_style_prop(style, idx) >> 8) & 0xFFU);
 8008a0a:	ea4f 2a13 	mov.w	sl, r3, lsr #8
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
 8008a0e:	f019 0f7f 	tst.w	r9, #127	; 0x7f
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
 8008a12:	f00a 037f 	and.w	r3, sl, #127	; 0x7f
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
 8008a16:	d063      	beq.n	8008ae0 <lv_style_remove_prop+0x164>
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
 8008a18:	9802      	ldr	r0, [sp, #8]
 8008a1a:	4218      	tst	r0, r3
 8008a1c:	d1d3      	bne.n	80089c6 <lv_style_remove_prop+0x4a>
                if(LV_STYLE_ATTR_GET_STATE(attr_i) > weight) {
 8008a1e:	4563      	cmp	r3, ip
 8008a20:	ddd1      	ble.n	80089c6 <lv_style_remove_prop+0x4a>
                    id_guess = i;
 8008a22:	b223      	sxth	r3, r4
                    weight = LV_STYLE_ATTR_GET_STATE(attr_i);
 8008a24:	f00a 0c7f 	and.w	ip, sl, #127	; 0x7f
                    id_guess = i;
 8008a28:	9301      	str	r3, [sp, #4]
 8008a2a:	e7cc      	b.n	80089c6 <lv_style_remove_prop+0x4a>
 8008a2c:	9801      	ldr	r0, [sp, #4]
 8008a2e:	9d03      	ldr	r5, [sp, #12]
    if(id >= 0) {
 8008a30:	2800      	cmp	r0, #0
 8008a32:	db0e      	blt.n	8008a52 <lv_style_remove_prop+0xd6>
    prop_p[1] = style->map[idx + 1];
 8008a34:	1c43      	adds	r3, r0, #1
    prop_p[0] = style->map[idx];
 8008a36:	5c14      	ldrb	r4, [r2, r0]
    prop_p[1] = style->map[idx + 1];
 8008a38:	5cd6      	ldrb	r6, [r2, r3]
    prop_p[0] = style->map[idx];
 8008a3a:	f88d 4016 	strb.w	r4, [sp, #22]
 8008a3e:	1814      	adds	r4, r2, r0
    prop_p[1] = style->map[idx + 1];
 8008a40:	f88d 6017 	strb.w	r6, [sp, #23]
    return prop;
 8008a44:	f8bd 6016 	ldrh.w	r6, [sp, #22]
        if(LV_STYLE_ATTR_GET_STATE(attr_found) == LV_STYLE_ATTR_GET_STATE(attr_goal)) {
 8008a48:	ea81 2116 	eor.w	r1, r1, r6, lsr #8
 8008a4c:	f011 017f 	ands.w	r1, r1, #127	; 0x7f
 8008a50:	d005      	beq.n	8008a5e <lv_style_remove_prop+0xe2>
    if(style == NULL) return false;
 8008a52:	2000      	movs	r0, #0
}
 8008a54:	b007      	add	sp, #28
 8008a56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(style == NULL) return false;
 8008a5a:	2000      	movs	r0, #0
}
 8008a5c:	4770      	bx	lr
    return get_style_prop(style, idx) & 0xFF;
 8008a5e:	fa5f f688 	uxtb.w	r6, r8
    prop_p[0] = style->map[idx];
 8008a62:	f88d 8016 	strb.w	r8, [sp, #22]
    prop_p[1] = style->map[idx + 1];
 8008a66:	f88d e017 	strb.w	lr, [sp, #23]
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
 8008a6a:	2eff      	cmp	r6, #255	; 0xff
 8008a6c:	d03d      	beq.n	8008aea <lv_style_remove_prop+0x16e>
    prop_id &= 0xF;
 8008a6e:	f006 060f 	and.w	r6, r6, #15
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
 8008a72:	2704      	movs	r7, #4
 8008a74:	2e08      	cmp	r6, #8
    else if(prop_id < LV_STYLE_ID_PTR) size += sizeof(lv_opa_t);
 8008a76:	f1a6 0c0c 	sub.w	ip, r6, #12
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
 8008a7a:	d904      	bls.n	8008a86 <lv_style_remove_prop+0x10a>
    else size += sizeof(const void *);
 8008a7c:	f1bc 0f01 	cmp.w	ip, #1
 8008a80:	bf94      	ite	ls
 8008a82:	2703      	movls	r7, #3
 8008a84:	2706      	movhi	r7, #6
    return idx + get_prop_size(prop_id);
 8008a86:	4439      	add	r1, r7
    prop_p[0] = style->map[idx];
 8008a88:	5c57      	ldrb	r7, [r2, r1]
    prop_p[1] = style->map[idx + 1];
 8008a8a:	1856      	adds	r6, r2, r1
    prop_p[0] = style->map[idx];
 8008a8c:	f88d 7016 	strb.w	r7, [sp, #22]
    prop_p[1] = style->map[idx + 1];
 8008a90:	7877      	ldrb	r7, [r6, #1]
    return get_style_prop(style, idx) & 0xFF;
 8008a92:	f89d 6016 	ldrb.w	r6, [sp, #22]
    prop_p[1] = style->map[idx + 1];
 8008a96:	f88d 7017 	strb.w	r7, [sp, #23]
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
 8008a9a:	2eff      	cmp	r6, #255	; 0xff
 8008a9c:	d1e7      	bne.n	8008a6e <lv_style_remove_prop+0xf2>
    prop_id &= 0xF;
 8008a9e:	f00b 060f 	and.w	r6, fp, #15
    return i + sizeof(lv_style_property_t);
 8008aa2:	3102      	adds	r1, #2
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
 8008aa4:	2e08      	cmp	r6, #8
            uint32_t map_size = _lv_style_get_mem_size(style);
 8008aa6:	b289      	uxth	r1, r1
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
 8008aa8:	d91d      	bls.n	8008ae6 <lv_style_remove_prop+0x16a>
    else if(prop_id < LV_STYLE_ID_PTR) size += sizeof(lv_opa_t);
 8008aaa:	3e0c      	subs	r6, #12
    else size += sizeof(const void *);
 8008aac:	2e01      	cmp	r6, #1
 8008aae:	bf94      	ite	ls
 8008ab0:	2603      	movls	r6, #3
 8008ab2:	2606      	movhi	r6, #6
            for(i = id; i < map_size - prop_size; i++) {
 8008ab4:	1b89      	subs	r1, r1, r6
 8008ab6:	4288      	cmp	r0, r1
 8008ab8:	d20b      	bcs.n	8008ad2 <lv_style_remove_prop+0x156>
                style->map[i] = style->map[i + prop_size];
 8008aba:	5da2      	ldrb	r2, [r4, r6]
            for(i = id; i < map_size - prop_size; i++) {
 8008abc:	428b      	cmp	r3, r1
                style->map[i] = style->map[i + prop_size];
 8008abe:	7022      	strb	r2, [r4, #0]
            for(i = id; i < map_size - prop_size; i++) {
 8008ac0:	d206      	bcs.n	8008ad0 <lv_style_remove_prop+0x154>
 8008ac2:	682a      	ldr	r2, [r5, #0]
                style->map[i] = style->map[i + prop_size];
 8008ac4:	18d0      	adds	r0, r2, r3
 8008ac6:	5d80      	ldrb	r0, [r0, r6]
 8008ac8:	54d0      	strb	r0, [r2, r3]
            for(i = id; i < map_size - prop_size; i++) {
 8008aca:	3301      	adds	r3, #1
 8008acc:	428b      	cmp	r3, r1
 8008ace:	d1f8      	bne.n	8008ac2 <lv_style_remove_prop+0x146>
 8008ad0:	682a      	ldr	r2, [r5, #0]
    style->map = lv_mem_realloc(style->map, sz);
 8008ad2:	4610      	mov	r0, r2
 8008ad4:	f00c fcce 	bl	8015474 <lv_mem_realloc>
 8008ad8:	4603      	mov	r3, r0
            return true;
 8008ada:	2001      	movs	r0, #1
    style->map = lv_mem_realloc(style->map, sz);
 8008adc:	602b      	str	r3, [r5, #0]
            return true;
 8008ade:	e7b9      	b.n	8008a54 <lv_style_remove_prop+0xd8>
 8008ae0:	9d03      	ldr	r5, [sp, #12]
                return i;
 8008ae2:	4620      	mov	r0, r4
 8008ae4:	e7a4      	b.n	8008a30 <lv_style_remove_prop+0xb4>
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
 8008ae6:	2604      	movs	r6, #4
 8008ae8:	e7e4      	b.n	8008ab4 <lv_style_remove_prop+0x138>
    prop_id &= 0xF;
 8008aea:	f00b 020f 	and.w	r2, fp, #15
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
 8008aee:	2a08      	cmp	r2, #8
 8008af0:	d805      	bhi.n	8008afe <lv_style_remove_prop+0x182>
                style->map[i] = style->map[i + prop_size];
 8008af2:	7922      	ldrb	r2, [r4, #4]
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
 8008af4:	2604      	movs	r6, #4
            for(i = id; i < map_size - prop_size; i++) {
 8008af6:	f06f 0101 	mvn.w	r1, #1
                style->map[i] = style->map[i + prop_size];
 8008afa:	7022      	strb	r2, [r4, #0]
            for(i = id; i < map_size - prop_size; i++) {
 8008afc:	e7e1      	b.n	8008ac2 <lv_style_remove_prop+0x146>
    else if(prop_id < LV_STYLE_ID_PTR) size += sizeof(lv_opa_t);
 8008afe:	3a0c      	subs	r2, #12
 8008b00:	2a01      	cmp	r2, #1
 8008b02:	d805      	bhi.n	8008b10 <lv_style_remove_prop+0x194>
                style->map[i] = style->map[i + prop_size];
 8008b04:	78e2      	ldrb	r2, [r4, #3]
    else if(prop_id < LV_STYLE_ID_PTR) size += sizeof(lv_opa_t);
 8008b06:	2603      	movs	r6, #3
            for(i = id; i < map_size - prop_size; i++) {
 8008b08:	f04f 31ff 	mov.w	r1, #4294967295
                style->map[i] = style->map[i + prop_size];
 8008b0c:	7022      	strb	r2, [r4, #0]
            for(i = id; i < map_size - prop_size; i++) {
 8008b0e:	e7d8      	b.n	8008ac2 <lv_style_remove_prop+0x146>
 8008b10:	f06f 0103 	mvn.w	r1, #3
    else size += sizeof(const void *);
 8008b14:	2606      	movs	r6, #6
 8008b16:	e7d0      	b.n	8008aba <lv_style_remove_prop+0x13e>

08008b18 <lv_style_list_init>:
    _lv_memset_00(list, sizeof(lv_style_list_t));
 8008b18:	2108      	movs	r1, #8
 8008b1a:	f00c be2d 	b.w	8015778 <_lv_memset_00>
 8008b1e:	bf00      	nop

08008b20 <_lv_style_list_remove_style>:
{
 8008b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(list->style_cnt == 0) return;
 8008b22:	7903      	ldrb	r3, [r0, #4]
 8008b24:	f013 073f 	ands.w	r7, r3, #63	; 0x3f
 8008b28:	d03c      	beq.n	8008ba4 <_lv_style_list_remove_style+0x84>
    for(i = 0; i < list->style_cnt; i++) {
 8008b2a:	f013 033f 	ands.w	r3, r3, #63	; 0x3f
 8008b2e:	d039      	beq.n	8008ba4 <_lv_style_list_remove_style+0x84>
 8008b30:	1e5a      	subs	r2, r3, #1
 8008b32:	4604      	mov	r4, r0
        if(list->style_list[i] == style) {
 8008b34:	6800      	ldr	r0, [r0, #0]
 8008b36:	460d      	mov	r5, r1
 8008b38:	b2d6      	uxtb	r6, r2
 8008b3a:	1f03      	subs	r3, r0, #4
 8008b3c:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8008b40:	e001      	b.n	8008b46 <_lv_style_list_remove_style+0x26>
    for(i = 0; i < list->style_cnt; i++) {
 8008b42:	42b3      	cmp	r3, r6
 8008b44:	d02e      	beq.n	8008ba4 <_lv_style_list_remove_style+0x84>
        if(list->style_list[i] == style) {
 8008b46:	f853 1f04 	ldr.w	r1, [r3, #4]!
 8008b4a:	42a9      	cmp	r1, r5
 8008b4c:	d1f9      	bne.n	8008b42 <_lv_style_list_remove_style+0x22>
    if(list->style_cnt == 1) {
 8008b4e:	2f01      	cmp	r7, #1
 8008b50:	d02e      	beq.n	8008bb0 <_lv_style_list_remove_style+0x90>
    lv_style_t ** new_classes = lv_mem_alloc(sizeof(lv_style_t *) * (list->style_cnt - 1));
 8008b52:	0090      	lsls	r0, r2, #2
 8008b54:	f00c f924 	bl	8014da0 <lv_mem_alloc>
 8008b58:	4606      	mov	r6, r0
    LV_ASSERT_MEM(new_classes);
 8008b5a:	f00b fe35 	bl	80147c8 <lv_debug_check_null>
 8008b5e:	4603      	mov	r3, r0
 8008b60:	b308      	cbz	r0, 8008ba6 <_lv_style_list_remove_style+0x86>
    if(new_classes == NULL) {
 8008b62:	b1fe      	cbz	r6, 8008ba4 <_lv_style_list_remove_style+0x84>
    for(i = 0, j = 0; i < list->style_cnt; i++) {
 8008b64:	7923      	ldrb	r3, [r4, #4]
 8008b66:	f013 033f 	ands.w	r3, r3, #63	; 0x3f
 8008b6a:	d02a      	beq.n	8008bc2 <_lv_style_list_remove_style+0xa2>
 8008b6c:	3b01      	subs	r3, #1
        if(list->style_list[i] == style) continue;
 8008b6e:	6820      	ldr	r0, [r4, #0]
    for(i = 0, j = 0; i < list->style_cnt; i++) {
 8008b70:	2100      	movs	r1, #0
 8008b72:	b2db      	uxtb	r3, r3
 8008b74:	1f02      	subs	r2, r0, #4
 8008b76:	eb00 0383 	add.w	r3, r0, r3, lsl #2
        if(list->style_list[i] == style) continue;
 8008b7a:	f852 7f04 	ldr.w	r7, [r2, #4]!
        j++;
 8008b7e:	f101 0c01 	add.w	ip, r1, #1
        if(list->style_list[i] == style) continue;
 8008b82:	42af      	cmp	r7, r5
 8008b84:	d003      	beq.n	8008b8e <_lv_style_list_remove_style+0x6e>
        new_classes[j] = list->style_list[i];
 8008b86:	f846 7021 	str.w	r7, [r6, r1, lsl #2]
        j++;
 8008b8a:	fa5f f18c 	uxtb.w	r1, ip
    for(i = 0, j = 0; i < list->style_cnt; i++) {
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d1f3      	bne.n	8008b7a <_lv_style_list_remove_style+0x5a>
    lv_mem_free(list->style_list);
 8008b92:	f00c f94b 	bl	8014e2c <lv_mem_free>
    list->style_cnt--;
 8008b96:	7923      	ldrb	r3, [r4, #4]
    list->style_list = new_classes;
 8008b98:	6026      	str	r6, [r4, #0]
    list->style_cnt--;
 8008b9a:	f103 023f 	add.w	r2, r3, #63	; 0x3f
 8008b9e:	f362 0305 	bfi	r3, r2, #0, #6
 8008ba2:	7123      	strb	r3, [r4, #4]
}
 8008ba4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    LV_ASSERT_MEM(new_classes);
 8008ba6:	4632      	mov	r2, r6
 8008ba8:	4807      	ldr	r0, [pc, #28]	; (8008bc8 <_lv_style_list_remove_style+0xa8>)
 8008baa:	f00b fe11 	bl	80147d0 <lv_debug_log_error>
 8008bae:	e7fe      	b.n	8008bae <_lv_style_list_remove_style+0x8e>
        lv_mem_free(list->style_list);
 8008bb0:	f00c f93c 	bl	8014e2c <lv_mem_free>
        list->style_cnt = 0;
 8008bb4:	7923      	ldrb	r3, [r4, #4]
        list->style_list = NULL;
 8008bb6:	2200      	movs	r2, #0
        list->style_cnt = 0;
 8008bb8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
        list->style_list = NULL;
 8008bbc:	6022      	str	r2, [r4, #0]
        list->style_cnt = 0;
 8008bbe:	7123      	strb	r3, [r4, #4]
}
 8008bc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008bc2:	6820      	ldr	r0, [r4, #0]
 8008bc4:	e7e5      	b.n	8008b92 <_lv_style_list_remove_style+0x72>
 8008bc6:	bf00      	nop
 8008bc8:	0801e1c4 	.word	0x0801e1c4

08008bcc <_lv_style_list_add_style.part.0>:
void _lv_style_list_add_style(lv_style_list_t * list, lv_style_t * style)
 8008bcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bd0:	4606      	mov	r6, r0
 8008bd2:	460f      	mov	r7, r1
    _lv_style_list_remove_style(list, style);
 8008bd4:	f7ff ffa4 	bl	8008b20 <_lv_style_list_remove_style>
    if(list->style_cnt == 0) new_classes = lv_mem_alloc(sizeof(lv_style_t *));
 8008bd8:	7933      	ldrb	r3, [r6, #4]
 8008bda:	069a      	lsls	r2, r3, #26
 8008bdc:	d131      	bne.n	8008c42 <_lv_style_list_add_style.part.0+0x76>
 8008bde:	2004      	movs	r0, #4
 8008be0:	f00c f8de 	bl	8014da0 <lv_mem_alloc>
 8008be4:	4604      	mov	r4, r0
    LV_ASSERT_MEM(new_classes);
 8008be6:	4620      	mov	r0, r4
 8008be8:	f00b fdee 	bl	80147c8 <lv_debug_check_null>
 8008bec:	4603      	mov	r3, r0
 8008bee:	b3b0      	cbz	r0, 8008c5e <_lv_style_list_add_style.part.0+0x92>
    if(new_classes == NULL) {
 8008bf0:	b32c      	cbz	r4, 8008c3e <_lv_style_list_add_style.part.0+0x72>
    if(list->has_trans) first_style++;
 8008bf2:	7935      	ldrb	r5, [r6, #4]
 8008bf4:	ea4f 18d5 	mov.w	r8, r5, lsr #7
    if(list->has_local) first_style++;
 8008bf8:	066b      	lsls	r3, r5, #25
    for(i = list->style_cnt; i > first_style; i--) {
 8008bfa:	f005 053f 	and.w	r5, r5, #63	; 0x3f
    if(list->has_local) first_style++;
 8008bfe:	bf48      	it	mi
 8008c00:	f108 0801 	addmi.w	r8, r8, #1
    for(i = list->style_cnt; i > first_style; i--) {
 8008c04:	4545      	cmp	r5, r8
 8008c06:	d912      	bls.n	8008c2e <_lv_style_list_add_style.part.0+0x62>
        new_classes[i] = new_classes[i - 1];
 8008c08:	eba5 0308 	sub.w	r3, r5, r8
 8008c0c:	f06f 4140 	mvn.w	r1, #3221225472	; 0xc0000000
 8008c10:	3b01      	subs	r3, #1
 8008c12:	4429      	add	r1, r5
 8008c14:	b2da      	uxtb	r2, r3
 8008c16:	ebc2 7383 	rsb	r3, r2, r3, lsl #30
 8008c1a:	3201      	adds	r2, #1
 8008c1c:	4419      	add	r1, r3
 8008c1e:	442b      	add	r3, r5
 8008c20:	0092      	lsls	r2, r2, #2
 8008c22:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8008c26:	eb04 0083 	add.w	r0, r4, r3, lsl #2
 8008c2a:	f015 fa79 	bl	801e120 <memmove>
    list->style_cnt++;
 8008c2e:	7933      	ldrb	r3, [r6, #4]
 8008c30:	3501      	adds	r5, #1
    new_classes[first_style] = style;
 8008c32:	f844 7028 	str.w	r7, [r4, r8, lsl #2]
    list->style_cnt++;
 8008c36:	f365 0305 	bfi	r3, r5, #0, #6
    list->style_list = new_classes;
 8008c3a:	6034      	str	r4, [r6, #0]
    list->style_cnt++;
 8008c3c:	7133      	strb	r3, [r6, #4]
}
 8008c3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else new_classes = lv_mem_realloc(list->style_list, sizeof(lv_style_t *) * (list->style_cnt + 1));
 8008c42:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008c46:	6830      	ldr	r0, [r6, #0]
 8008c48:	1c59      	adds	r1, r3, #1
 8008c4a:	0089      	lsls	r1, r1, #2
 8008c4c:	f00c fc12 	bl	8015474 <lv_mem_realloc>
 8008c50:	4604      	mov	r4, r0
    LV_ASSERT_MEM(new_classes);
 8008c52:	4620      	mov	r0, r4
 8008c54:	f00b fdb8 	bl	80147c8 <lv_debug_check_null>
 8008c58:	4603      	mov	r3, r0
 8008c5a:	2800      	cmp	r0, #0
 8008c5c:	d1c8      	bne.n	8008bf0 <_lv_style_list_add_style.part.0+0x24>
 8008c5e:	4622      	mov	r2, r4
 8008c60:	4801      	ldr	r0, [pc, #4]	; (8008c68 <_lv_style_list_add_style.part.0+0x9c>)
 8008c62:	f00b fdb5 	bl	80147d0 <lv_debug_log_error>
 8008c66:	e7fe      	b.n	8008c66 <_lv_style_list_add_style.part.0+0x9a>
 8008c68:	0801e1c4 	.word	0x0801e1c4

08008c6c <_lv_style_list_add_style>:
    if(list == NULL) return;
 8008c6c:	b108      	cbz	r0, 8008c72 <_lv_style_list_add_style+0x6>
 8008c6e:	f7ff bfad 	b.w	8008bcc <_lv_style_list_add_style.part.0>
}
 8008c72:	4770      	bx	lr

08008c74 <get_alloc_local_style>:
{
 8008c74:	b538      	push	{r3, r4, r5, lr}
    if(list->has_local) return lv_style_list_get_style(list, list->has_trans ? 1 : 0);
 8008c76:	7903      	ldrb	r3, [r0, #4]
{
 8008c78:	4605      	mov	r5, r0
    if(list->has_local) return lv_style_list_get_style(list, list->has_trans ? 1 : 0);
 8008c7a:	065a      	lsls	r2, r3, #25
 8008c7c:	d511      	bpl.n	8008ca2 <get_alloc_local_style+0x2e>
    if(list->has_trans && list->skip_trans) id++;
 8008c7e:	8881      	ldrh	r1, [r0, #4]
 8008c80:	09da      	lsrs	r2, r3, #7
 8008c82:	f401 71c0 	and.w	r1, r1, #384	; 0x180
 8008c86:	f5b1 7fc0 	cmp.w	r1, #384	; 0x180
 8008c8a:	bf08      	it	eq
 8008c8c:	3201      	addeq	r2, #1
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
 8008c8e:	f013 043f 	ands.w	r4, r3, #63	; 0x3f
 8008c92:	d004      	beq.n	8008c9e <get_alloc_local_style+0x2a>
 8008c94:	4294      	cmp	r4, r2
 8008c96:	d921      	bls.n	8008cdc <get_alloc_local_style+0x68>
    return list->style_list[id];
 8008c98:	6803      	ldr	r3, [r0, #0]
 8008c9a:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
}
 8008c9e:	4620      	mov	r0, r4
 8008ca0:	bd38      	pop	{r3, r4, r5, pc}
    lv_style_t * local_style = lv_mem_alloc(sizeof(lv_style_t));
 8008ca2:	2004      	movs	r0, #4
 8008ca4:	f00c f87c 	bl	8014da0 <lv_mem_alloc>
 8008ca8:	4604      	mov	r4, r0
    LV_ASSERT_MEM(local_style);
 8008caa:	f00b fd8d 	bl	80147c8 <lv_debug_check_null>
 8008cae:	4603      	mov	r3, r0
 8008cb0:	b178      	cbz	r0, 8008cd2 <get_alloc_local_style+0x5e>
    if(local_style == NULL) {
 8008cb2:	2c00      	cmp	r4, #0
 8008cb4:	d0f3      	beq.n	8008c9e <get_alloc_local_style+0x2a>
    _lv_memset_00(style, sizeof(lv_style_t));
 8008cb6:	4620      	mov	r0, r4
 8008cb8:	2104      	movs	r1, #4
 8008cba:	f00c fd5d 	bl	8015778 <_lv_memset_00>
    if(list == NULL) return;
 8008cbe:	4628      	mov	r0, r5
 8008cc0:	4621      	mov	r1, r4
 8008cc2:	f7ff ff83 	bl	8008bcc <_lv_style_list_add_style.part.0>
    list->has_local = 1;
 8008cc6:	792b      	ldrb	r3, [r5, #4]
}
 8008cc8:	4620      	mov	r0, r4
    list->has_local = 1;
 8008cca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008cce:	712b      	strb	r3, [r5, #4]
}
 8008cd0:	bd38      	pop	{r3, r4, r5, pc}
    LV_ASSERT_MEM(local_style);
 8008cd2:	4622      	mov	r2, r4
 8008cd4:	4802      	ldr	r0, [pc, #8]	; (8008ce0 <get_alloc_local_style+0x6c>)
 8008cd6:	f00b fd7b 	bl	80147d0 <lv_debug_log_error>
 8008cda:	e7fe      	b.n	8008cda <get_alloc_local_style+0x66>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
 8008cdc:	2400      	movs	r4, #0
 8008cde:	e7de      	b.n	8008c9e <get_alloc_local_style+0x2a>
 8008ce0:	0801e1c4 	.word	0x0801e1c4

08008ce4 <lv_style_list_copy>:
{
 8008ce4:	b570      	push	{r4, r5, r6, lr}
    if(list == NULL) return;
 8008ce6:	4604      	mov	r4, r0
{
 8008ce8:	b084      	sub	sp, #16
 8008cea:	460d      	mov	r5, r1
    if(list == NULL) return;
 8008cec:	b1f8      	cbz	r0, 8008d2e <lv_style_list_copy+0x4a>
    if(list->has_local) {
 8008cee:	7903      	ldrb	r3, [r0, #4]
 8008cf0:	065e      	lsls	r6, r3, #25
 8008cf2:	d50e      	bpl.n	8008d12 <lv_style_list_copy+0x2e>
    if(list->has_trans) return list->style_list[1];
 8008cf4:	6802      	ldr	r2, [r0, #0]
 8008cf6:	0618      	lsls	r0, r3, #24
 8008cf8:	f100 80a5 	bmi.w	8008e46 <lv_style_list_copy+0x162>
    else return list->style_list[0];
 8008cfc:	6816      	ldr	r6, [r2, #0]
        if(local) {
 8008cfe:	b15e      	cbz	r6, 8008d18 <lv_style_list_copy+0x34>
    lv_mem_free(style->map);
 8008d00:	6830      	ldr	r0, [r6, #0]
 8008d02:	f00c f893 	bl	8014e2c <lv_mem_free>
    style->map = NULL;
 8008d06:	2300      	movs	r3, #0
            lv_mem_free(local);
 8008d08:	4630      	mov	r0, r6
    style->map = NULL;
 8008d0a:	6033      	str	r3, [r6, #0]
            lv_mem_free(local);
 8008d0c:	f00c f88e 	bl	8014e2c <lv_mem_free>
 8008d10:	7923      	ldrb	r3, [r4, #4]
    if(list->has_trans) {
 8008d12:	0619      	lsls	r1, r3, #24
 8008d14:	f100 8082 	bmi.w	8008e1c <lv_style_list_copy+0x138>
    if(list->style_cnt > 0) lv_mem_free(list->style_list);
 8008d18:	069a      	lsls	r2, r3, #26
 8008d1a:	f040 8090 	bne.w	8008e3e <lv_style_list_copy+0x15a>
    list->style_cnt = 0;
 8008d1e:	88a3      	ldrh	r3, [r4, #4]
    list->style_list = NULL;
 8008d20:	2200      	movs	r2, #0
    list->style_cnt = 0;
 8008d22:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    list->style_list = NULL;
 8008d26:	6022      	str	r2, [r4, #0]
    list->style_cnt = 0;
 8008d28:	f023 0301 	bic.w	r3, r3, #1
 8008d2c:	80a3      	strh	r3, [r4, #4]
    if(list_src->style_list == NULL) return;
 8008d2e:	682b      	ldr	r3, [r5, #0]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d071      	beq.n	8008e18 <lv_style_list_copy+0x134>
    if(list_src->has_local == 0) {
 8008d34:	7928      	ldrb	r0, [r5, #4]
 8008d36:	0643      	lsls	r3, r0, #25
 8008d38:	d559      	bpl.n	8008dee <lv_style_list_copy+0x10a>
        if(list_src->has_trans) {
 8008d3a:	f010 0f80 	tst.w	r0, #128	; 0x80
            list_dest->style_list = lv_mem_alloc((list_src->style_cnt - 2) * sizeof(lv_style_t *));
 8008d3e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
        if(list_src->has_trans) {
 8008d42:	f040 809d 	bne.w	8008e80 <lv_style_list_copy+0x19c>
            list_dest->style_list = lv_mem_alloc((list_src->style_cnt - 1) * sizeof(lv_style_t *));
 8008d46:	3801      	subs	r0, #1
 8008d48:	0080      	lsls	r0, r0, #2
 8008d4a:	f00c f829 	bl	8014da0 <lv_mem_alloc>
            _lv_memcpy(list_dest->style_list, list_src->style_list + 1, (list_src->style_cnt - 1) * sizeof(lv_style_t *));
 8008d4e:	792a      	ldrb	r2, [r5, #4]
            list_dest->style_list = lv_mem_alloc((list_src->style_cnt - 1) * sizeof(lv_style_t *));
 8008d50:	6020      	str	r0, [r4, #0]
            _lv_memcpy(list_dest->style_list, list_src->style_list + 1, (list_src->style_cnt - 1) * sizeof(lv_style_t *));
 8008d52:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8008d56:	6829      	ldr	r1, [r5, #0]
 8008d58:	3a01      	subs	r2, #1
 8008d5a:	3104      	adds	r1, #4
 8008d5c:	0092      	lsls	r2, r2, #2
 8008d5e:	f00c f98d 	bl	801507c <_lv_memcpy>
            list_dest->style_cnt = list_src->style_cnt - 1;
 8008d62:	792b      	ldrb	r3, [r5, #4]
 8008d64:	7922      	ldrb	r2, [r4, #4]
 8008d66:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8008d6a:	3b01      	subs	r3, #1
 8008d6c:	f363 0205 	bfi	r2, r3, #0, #6
 8008d70:	7122      	strb	r2, [r4, #4]
        lv_style_t * local_style = get_alloc_local_style(list_dest);
 8008d72:	4620      	mov	r0, r4
 8008d74:	f7ff ff7e 	bl	8008c74 <get_alloc_local_style>
 8008d78:	4603      	mov	r3, r0
        lv_style_copy(local_style, get_alloc_local_style((lv_style_list_t *)list_src));
 8008d7a:	4628      	mov	r0, r5
        lv_style_t * local_style = get_alloc_local_style(list_dest);
 8008d7c:	461d      	mov	r5, r3
        lv_style_copy(local_style, get_alloc_local_style((lv_style_list_t *)list_src));
 8008d7e:	f7ff ff79 	bl	8008c74 <get_alloc_local_style>
    if(style_src == NULL) return;
 8008d82:	4606      	mov	r6, r0
 8008d84:	2800      	cmp	r0, #0
 8008d86:	d047      	beq.n	8008e18 <lv_style_list_copy+0x134>
    if(style_src->map == NULL) return;
 8008d88:	6801      	ldr	r1, [r0, #0]
 8008d8a:	2900      	cmp	r1, #0
 8008d8c:	d044      	beq.n	8008e18 <lv_style_list_copy+0x134>
    prop_p[0] = style->map[idx];
 8008d8e:	780b      	ldrb	r3, [r1, #0]
    prop_p[1] = style->map[idx + 1];
 8008d90:	784a      	ldrb	r2, [r1, #1]
    prop_p[0] = style->map[idx];
 8008d92:	f88d 300e 	strb.w	r3, [sp, #14]
    return get_style_prop(style, idx) & 0xFF;
 8008d96:	b2db      	uxtb	r3, r3
    prop_p[1] = style->map[idx + 1];
 8008d98:	f88d 200f 	strb.w	r2, [sp, #15]
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
 8008d9c:	2bff      	cmp	r3, #255	; 0xff
 8008d9e:	f000 8086 	beq.w	8008eae <lv_style_list_copy+0x1ca>
    size_t i = 0;
 8008da2:	2200      	movs	r2, #0
    prop_id &= 0xF;
 8008da4:	f003 030f 	and.w	r3, r3, #15
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
 8008da8:	2404      	movs	r4, #4
 8008daa:	2b08      	cmp	r3, #8
    else if(prop_id < LV_STYLE_ID_PTR) size += sizeof(lv_opa_t);
 8008dac:	f1a3 000c 	sub.w	r0, r3, #12
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
 8008db0:	d903      	bls.n	8008dba <lv_style_list_copy+0xd6>
    else size += sizeof(const void *);
 8008db2:	2801      	cmp	r0, #1
 8008db4:	bf94      	ite	ls
 8008db6:	2403      	movls	r4, #3
 8008db8:	2406      	movhi	r4, #6
    return idx + get_prop_size(prop_id);
 8008dba:	4422      	add	r2, r4
    prop_p[0] = style->map[idx];
 8008dbc:	5c88      	ldrb	r0, [r1, r2]
    prop_p[1] = style->map[idx + 1];
 8008dbe:	188b      	adds	r3, r1, r2
    prop_p[0] = style->map[idx];
 8008dc0:	f88d 000e 	strb.w	r0, [sp, #14]
    prop_p[1] = style->map[idx + 1];
 8008dc4:	7858      	ldrb	r0, [r3, #1]
    return get_style_prop(style, idx) & 0xFF;
 8008dc6:	f89d 300e 	ldrb.w	r3, [sp, #14]
    prop_p[1] = style->map[idx + 1];
 8008dca:	f88d 000f 	strb.w	r0, [sp, #15]
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
 8008dce:	2bff      	cmp	r3, #255	; 0xff
 8008dd0:	d1e8      	bne.n	8008da4 <lv_style_list_copy+0xc0>
 8008dd2:	3202      	adds	r2, #2
 8008dd4:	b292      	uxth	r2, r2
    style_dest->map = lv_mem_alloc(size);
 8008dd6:	4610      	mov	r0, r2
 8008dd8:	9201      	str	r2, [sp, #4]
 8008dda:	f00b ffe1 	bl	8014da0 <lv_mem_alloc>
    _lv_memcpy(style_dest->map, style_src->map, size);
 8008dde:	9a01      	ldr	r2, [sp, #4]
    style_dest->map = lv_mem_alloc(size);
 8008de0:	6028      	str	r0, [r5, #0]
    _lv_memcpy(style_dest->map, style_src->map, size);
 8008de2:	6831      	ldr	r1, [r6, #0]
}
 8008de4:	b004      	add	sp, #16
 8008de6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    _lv_memcpy(style_dest->map, style_src->map, size);
 8008dea:	f00c b947 	b.w	801507c <_lv_memcpy>
        if(list_src->has_trans) {
 8008dee:	f010 0f80 	tst.w	r0, #128	; 0x80
            list_dest->style_list = lv_mem_alloc((list_src->style_cnt - 1) * sizeof(lv_style_t *));
 8008df2:	f000 003f 	and.w	r0, r0, #63	; 0x3f
        if(list_src->has_trans) {
 8008df6:	d12b      	bne.n	8008e50 <lv_style_list_copy+0x16c>
            list_dest->style_list = lv_mem_alloc(list_src->style_cnt * sizeof(lv_style_t *));
 8008df8:	0080      	lsls	r0, r0, #2
 8008dfa:	f00b ffd1 	bl	8014da0 <lv_mem_alloc>
            _lv_memcpy(list_dest->style_list, list_src->style_list, list_src->style_cnt * sizeof(lv_style_t *));
 8008dfe:	792a      	ldrb	r2, [r5, #4]
            list_dest->style_list = lv_mem_alloc(list_src->style_cnt * sizeof(lv_style_t *));
 8008e00:	6020      	str	r0, [r4, #0]
            _lv_memcpy(list_dest->style_list, list_src->style_list, list_src->style_cnt * sizeof(lv_style_t *));
 8008e02:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8008e06:	6829      	ldr	r1, [r5, #0]
 8008e08:	0092      	lsls	r2, r2, #2
 8008e0a:	f00c f937 	bl	801507c <_lv_memcpy>
            list_dest->style_cnt = list_src->style_cnt;
 8008e0e:	792a      	ldrb	r2, [r5, #4]
 8008e10:	7923      	ldrb	r3, [r4, #4]
 8008e12:	f362 0305 	bfi	r3, r2, #0, #6
 8008e16:	7123      	strb	r3, [r4, #4]
}
 8008e18:	b004      	add	sp, #16
 8008e1a:	bd70      	pop	{r4, r5, r6, pc}
 8008e1c:	6822      	ldr	r2, [r4, #0]
    return list->style_list[0];
 8008e1e:	6816      	ldr	r6, [r2, #0]
        if(trans) {
 8008e20:	2e00      	cmp	r6, #0
 8008e22:	f43f af79 	beq.w	8008d18 <lv_style_list_copy+0x34>
    lv_mem_free(style->map);
 8008e26:	6830      	ldr	r0, [r6, #0]
 8008e28:	f00c f800 	bl	8014e2c <lv_mem_free>
    style->map = NULL;
 8008e2c:	2300      	movs	r3, #0
            lv_mem_free(trans);
 8008e2e:	4630      	mov	r0, r6
    style->map = NULL;
 8008e30:	6033      	str	r3, [r6, #0]
            lv_mem_free(trans);
 8008e32:	f00b fffb 	bl	8014e2c <lv_mem_free>
 8008e36:	7923      	ldrb	r3, [r4, #4]
    if(list->style_cnt > 0) lv_mem_free(list->style_list);
 8008e38:	069a      	lsls	r2, r3, #26
 8008e3a:	f43f af70 	beq.w	8008d1e <lv_style_list_copy+0x3a>
 8008e3e:	6820      	ldr	r0, [r4, #0]
 8008e40:	f00b fff4 	bl	8014e2c <lv_mem_free>
 8008e44:	e76b      	b.n	8008d1e <lv_style_list_copy+0x3a>
    if(list->has_trans) return list->style_list[1];
 8008e46:	6856      	ldr	r6, [r2, #4]
        if(local) {
 8008e48:	2e00      	cmp	r6, #0
 8008e4a:	f47f af59 	bne.w	8008d00 <lv_style_list_copy+0x1c>
 8008e4e:	e7e6      	b.n	8008e1e <lv_style_list_copy+0x13a>
            list_dest->style_list = lv_mem_alloc((list_src->style_cnt - 1) * sizeof(lv_style_t *));
 8008e50:	3801      	subs	r0, #1
 8008e52:	0080      	lsls	r0, r0, #2
 8008e54:	f00b ffa4 	bl	8014da0 <lv_mem_alloc>
            _lv_memcpy(list_dest->style_list, list_src->style_list + 1, (list_src->style_cnt - 1) * sizeof(lv_style_t *));
 8008e58:	792a      	ldrb	r2, [r5, #4]
            list_dest->style_list = lv_mem_alloc((list_src->style_cnt - 1) * sizeof(lv_style_t *));
 8008e5a:	6020      	str	r0, [r4, #0]
            _lv_memcpy(list_dest->style_list, list_src->style_list + 1, (list_src->style_cnt - 1) * sizeof(lv_style_t *));
 8008e5c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8008e60:	6829      	ldr	r1, [r5, #0]
 8008e62:	3a01      	subs	r2, #1
 8008e64:	3104      	adds	r1, #4
 8008e66:	0092      	lsls	r2, r2, #2
 8008e68:	f00c f908 	bl	801507c <_lv_memcpy>
            list_dest->style_cnt = list_src->style_cnt - 1;
 8008e6c:	792b      	ldrb	r3, [r5, #4]
 8008e6e:	7922      	ldrb	r2, [r4, #4]
 8008e70:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8008e74:	3b01      	subs	r3, #1
 8008e76:	f363 0205 	bfi	r2, r3, #0, #6
 8008e7a:	7122      	strb	r2, [r4, #4]
}
 8008e7c:	b004      	add	sp, #16
 8008e7e:	bd70      	pop	{r4, r5, r6, pc}
            list_dest->style_list = lv_mem_alloc((list_src->style_cnt - 2) * sizeof(lv_style_t *));
 8008e80:	3802      	subs	r0, #2
 8008e82:	0080      	lsls	r0, r0, #2
 8008e84:	f00b ff8c 	bl	8014da0 <lv_mem_alloc>
            _lv_memcpy(list_dest->style_list, list_src->style_list + 2, (list_src->style_cnt - 2) * sizeof(lv_style_t *));
 8008e88:	792a      	ldrb	r2, [r5, #4]
            list_dest->style_list = lv_mem_alloc((list_src->style_cnt - 2) * sizeof(lv_style_t *));
 8008e8a:	6020      	str	r0, [r4, #0]
            _lv_memcpy(list_dest->style_list, list_src->style_list + 2, (list_src->style_cnt - 2) * sizeof(lv_style_t *));
 8008e8c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8008e90:	6829      	ldr	r1, [r5, #0]
 8008e92:	3a02      	subs	r2, #2
 8008e94:	3108      	adds	r1, #8
 8008e96:	0092      	lsls	r2, r2, #2
 8008e98:	f00c f8f0 	bl	801507c <_lv_memcpy>
            list_dest->style_cnt = list_src->style_cnt - 2;
 8008e9c:	792b      	ldrb	r3, [r5, #4]
 8008e9e:	7922      	ldrb	r2, [r4, #4]
 8008ea0:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8008ea4:	3b02      	subs	r3, #2
 8008ea6:	f363 0205 	bfi	r2, r3, #0, #6
 8008eaa:	7122      	strb	r2, [r4, #4]
 8008eac:	e761      	b.n	8008d72 <lv_style_list_copy+0x8e>
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
 8008eae:	2202      	movs	r2, #2
 8008eb0:	e791      	b.n	8008dd6 <lv_style_list_copy+0xf2>
 8008eb2:	bf00      	nop

08008eb4 <_lv_style_list_reset>:
    if(list == NULL) return;
 8008eb4:	2800      	cmp	r0, #0
 8008eb6:	d032      	beq.n	8008f1e <_lv_style_list_reset+0x6a>
{
 8008eb8:	b538      	push	{r3, r4, r5, lr}
    if(list->has_local) {
 8008eba:	7903      	ldrb	r3, [r0, #4]
 8008ebc:	4604      	mov	r4, r0
 8008ebe:	0658      	lsls	r0, r3, #25
 8008ec0:	d50d      	bpl.n	8008ede <_lv_style_list_reset+0x2a>
    if(list->has_trans) return list->style_list[1];
 8008ec2:	0619      	lsls	r1, r3, #24
 8008ec4:	6822      	ldr	r2, [r4, #0]
 8008ec6:	d42b      	bmi.n	8008f20 <_lv_style_list_reset+0x6c>
    else return list->style_list[0];
 8008ec8:	6815      	ldr	r5, [r2, #0]
        if(local) {
 8008eca:	b155      	cbz	r5, 8008ee2 <_lv_style_list_reset+0x2e>
    lv_mem_free(style->map);
 8008ecc:	6828      	ldr	r0, [r5, #0]
 8008ece:	f00b ffad 	bl	8014e2c <lv_mem_free>
    style->map = NULL;
 8008ed2:	2300      	movs	r3, #0
            lv_mem_free(local);
 8008ed4:	4628      	mov	r0, r5
    style->map = NULL;
 8008ed6:	602b      	str	r3, [r5, #0]
            lv_mem_free(local);
 8008ed8:	f00b ffa8 	bl	8014e2c <lv_mem_free>
 8008edc:	7923      	ldrb	r3, [r4, #4]
    if(list->has_trans) {
 8008ede:	061a      	lsls	r2, r3, #24
 8008ee0:	d40a      	bmi.n	8008ef8 <_lv_style_list_reset+0x44>
    if(list->style_cnt > 0) lv_mem_free(list->style_list);
 8008ee2:	069b      	lsls	r3, r3, #26
 8008ee4:	d117      	bne.n	8008f16 <_lv_style_list_reset+0x62>
    list->style_cnt = 0;
 8008ee6:	88a3      	ldrh	r3, [r4, #4]
    list->style_list = NULL;
 8008ee8:	2200      	movs	r2, #0
    list->style_cnt = 0;
 8008eea:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    list->style_list = NULL;
 8008eee:	6022      	str	r2, [r4, #0]
    list->style_cnt = 0;
 8008ef0:	f023 0301 	bic.w	r3, r3, #1
 8008ef4:	80a3      	strh	r3, [r4, #4]
}
 8008ef6:	bd38      	pop	{r3, r4, r5, pc}
 8008ef8:	6822      	ldr	r2, [r4, #0]
    return list->style_list[0];
 8008efa:	6815      	ldr	r5, [r2, #0]
        if(trans) {
 8008efc:	2d00      	cmp	r5, #0
 8008efe:	d0f0      	beq.n	8008ee2 <_lv_style_list_reset+0x2e>
    lv_mem_free(style->map);
 8008f00:	6828      	ldr	r0, [r5, #0]
 8008f02:	f00b ff93 	bl	8014e2c <lv_mem_free>
    style->map = NULL;
 8008f06:	2300      	movs	r3, #0
            lv_mem_free(trans);
 8008f08:	4628      	mov	r0, r5
    style->map = NULL;
 8008f0a:	602b      	str	r3, [r5, #0]
            lv_mem_free(trans);
 8008f0c:	f00b ff8e 	bl	8014e2c <lv_mem_free>
 8008f10:	7923      	ldrb	r3, [r4, #4]
    if(list->style_cnt > 0) lv_mem_free(list->style_list);
 8008f12:	069b      	lsls	r3, r3, #26
 8008f14:	d0e7      	beq.n	8008ee6 <_lv_style_list_reset+0x32>
 8008f16:	6820      	ldr	r0, [r4, #0]
 8008f18:	f00b ff88 	bl	8014e2c <lv_mem_free>
 8008f1c:	e7e3      	b.n	8008ee6 <_lv_style_list_reset+0x32>
 8008f1e:	4770      	bx	lr
    if(list->has_trans) return list->style_list[1];
 8008f20:	6855      	ldr	r5, [r2, #4]
        if(local) {
 8008f22:	2d00      	cmp	r5, #0
 8008f24:	d1d2      	bne.n	8008ecc <_lv_style_list_reset+0x18>
 8008f26:	e7e8      	b.n	8008efa <_lv_style_list_reset+0x46>

08008f28 <lv_style_reset>:
{
 8008f28:	b510      	push	{r4, lr}
 8008f2a:	4604      	mov	r4, r0
    lv_mem_free(style->map);
 8008f2c:	6800      	ldr	r0, [r0, #0]
 8008f2e:	f00b ff7d 	bl	8014e2c <lv_mem_free>
    style->map = NULL;
 8008f32:	2300      	movs	r3, #0
 8008f34:	6023      	str	r3, [r4, #0]
}
 8008f36:	bd10      	pop	{r4, pc}

08008f38 <_lv_style_set_int>:
{
 8008f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f3c:	4607      	mov	r7, r0
    int32_t id = get_property_index(style, prop);
 8008f3e:	6800      	ldr	r0, [r0, #0]
{
 8008f40:	b089      	sub	sp, #36	; 0x24
 8008f42:	4688      	mov	r8, r1
 8008f44:	4691      	mov	r9, r2
    if(style->map == NULL) return -1;
 8008f46:	2800      	cmp	r0, #0
 8008f48:	f000 80b7 	beq.w	80090ba <_lv_style_set_int+0x182>
    prop_p[0] = style->map[idx];
 8008f4c:	7804      	ldrb	r4, [r0, #0]
    uint8_t id_to_find = prop & 0xFF;
 8008f4e:	fa5f fe81 	uxtb.w	lr, r1
    prop_p[1] = style->map[idx + 1];
 8008f52:	f890 b001 	ldrb.w	fp, [r0, #1]
    attr = (prop >> 8) & 0xFF;
 8008f56:	0a09      	lsrs	r1, r1, #8
    return get_style_prop(style, idx) & 0xFF;
 8008f58:	b2e2      	uxtb	r2, r4
    prop_p[0] = style->map[idx];
 8008f5a:	9404      	str	r4, [sp, #16]
 8008f5c:	f88d 401e 	strb.w	r4, [sp, #30]
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
 8008f60:	2aff      	cmp	r2, #255	; 0xff
    prop_p[1] = style->map[idx + 1];
 8008f62:	f88d b01f 	strb.w	fp, [sp, #31]
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
 8008f66:	d056      	beq.n	8009016 <_lv_style_set_int+0xde>
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
 8008f68:	f001 037f 	and.w	r3, r1, #127	; 0x7f
    int16_t id_guess = -1;
 8008f6c:	f04f 35ff 	mov.w	r5, #4294967295
    prop_p[1] = style->map[idx + 1];
 8008f70:	46da      	mov	sl, fp
    prop_p[0] = style->map[idx];
 8008f72:	46a4      	mov	ip, r4
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
 8008f74:	43db      	mvns	r3, r3
    int16_t weight = -1;
 8008f76:	9501      	str	r5, [sp, #4]
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
 8008f78:	9305      	str	r3, [sp, #20]
    size_t i = 0;
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	e9cd 5b02 	strd	r5, fp, [sp, #8]
 8008f80:	e014      	b.n	8008fac <_lv_style_set_int+0x74>
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
 8008f82:	2c08      	cmp	r4, #8
 8008f84:	d904      	bls.n	8008f90 <_lv_style_set_int+0x58>
    else size += sizeof(const void *);
 8008f86:	f1bb 0f01 	cmp.w	fp, #1
 8008f8a:	bf94      	ite	ls
 8008f8c:	2203      	movls	r2, #3
 8008f8e:	2206      	movhi	r2, #6
    return idx + get_prop_size(prop_id);
 8008f90:	4413      	add	r3, r2
    prop_p[0] = style->map[idx];
 8008f92:	f810 c003 	ldrb.w	ip, [r0, r3]
    prop_p[1] = style->map[idx + 1];
 8008f96:	18c2      	adds	r2, r0, r3
 8008f98:	f892 a001 	ldrb.w	sl, [r2, #1]
    return get_style_prop(style, idx) & 0xFF;
 8008f9c:	fa5f f28c 	uxtb.w	r2, ip
    prop_p[0] = style->map[idx];
 8008fa0:	f88d c01e 	strb.w	ip, [sp, #30]
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
 8008fa4:	2aff      	cmp	r2, #255	; 0xff
    prop_p[1] = style->map[idx + 1];
 8008fa6:	f88d a01f 	strb.w	sl, [sp, #31]
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
 8008faa:	d022      	beq.n	8008ff2 <_lv_style_set_int+0xba>
    prop_id &= 0xF;
 8008fac:	f002 040f 	and.w	r4, r2, #15
        if(prop_id == id_to_find) {
 8008fb0:	4596      	cmp	lr, r2
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
 8008fb2:	f04f 0204 	mov.w	r2, #4
    else if(prop_id < LV_STYLE_ID_PTR) size += sizeof(lv_opa_t);
 8008fb6:	f1a4 0b0c 	sub.w	fp, r4, #12
        if(prop_id == id_to_find) {
 8008fba:	d1e2      	bne.n	8008f82 <_lv_style_set_int+0x4a>
    prop_p[0] = style->map[idx];
 8008fbc:	f88d c01e 	strb.w	ip, [sp, #30]
    prop_p[1] = style->map[idx + 1];
 8008fc0:	f88d a01f 	strb.w	sl, [sp, #31]
    return prop;
 8008fc4:	f8bd 601e 	ldrh.w	r6, [sp, #30]
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
 8008fc8:	ea81 2a16 	eor.w	sl, r1, r6, lsr #8
    return ((get_style_prop(style, idx) >> 8) & 0xFFU);
 8008fcc:	ea4f 2c16 	mov.w	ip, r6, lsr #8
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
 8008fd0:	f01a 0f7f 	tst.w	sl, #127	; 0x7f
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
 8008fd4:	f00c 067f 	and.w	r6, ip, #127	; 0x7f
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
 8008fd8:	d071      	beq.n	80090be <_lv_style_set_int+0x186>
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
 8008fda:	9d05      	ldr	r5, [sp, #20]
 8008fdc:	4235      	tst	r5, r6
 8008fde:	d1d0      	bne.n	8008f82 <_lv_style_set_int+0x4a>
                if(LV_STYLE_ATTR_GET_STATE(attr_i) > weight) {
 8008fe0:	9d01      	ldr	r5, [sp, #4]
 8008fe2:	42ae      	cmp	r6, r5
 8008fe4:	ddcd      	ble.n	8008f82 <_lv_style_set_int+0x4a>
                    weight = LV_STYLE_ATTR_GET_STATE(attr_i);
 8008fe6:	f00c 057f 	and.w	r5, ip, #127	; 0x7f
 8008fea:	9501      	str	r5, [sp, #4]
                    id_guess = i;
 8008fec:	b21d      	sxth	r5, r3
 8008fee:	9502      	str	r5, [sp, #8]
 8008ff0:	e7c7      	b.n	8008f82 <_lv_style_set_int+0x4a>
 8008ff2:	e9dd 5b02 	ldrd	r5, fp, [sp, #8]
 8008ff6:	462b      	mov	r3, r5
    if(id >= 0) {
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	db0c      	blt.n	8009016 <_lv_style_set_int+0xde>
    prop_p[1] = style->map[idx + 1];
 8008ffc:	18c2      	adds	r2, r0, r3
    prop_p[0] = style->map[idx];
 8008ffe:	5cc4      	ldrb	r4, [r0, r3]
    prop_p[1] = style->map[idx + 1];
 8009000:	7852      	ldrb	r2, [r2, #1]
    prop_p[0] = style->map[idx];
 8009002:	f88d 401e 	strb.w	r4, [sp, #30]
    prop_p[1] = style->map[idx + 1];
 8009006:	f88d 201f 	strb.w	r2, [sp, #31]
    return prop;
 800900a:	f8bd 201e 	ldrh.w	r2, [sp, #30]
        if(LV_STYLE_ATTR_GET_STATE(attr_found) == LV_STYLE_ATTR_GET_STATE(attr_goal)) {
 800900e:	ea81 2112 	eor.w	r1, r1, r2, lsr #8
 8009012:	064a      	lsls	r2, r1, #25
 8009014:	d047      	beq.n	80090a6 <_lv_style_set_int+0x16e>
    prop_p[0] = style->map[idx];
 8009016:	9b04      	ldr	r3, [sp, #16]
    prop_p[1] = style->map[idx + 1];
 8009018:	f88d b01f 	strb.w	fp, [sp, #31]
    return get_style_prop(style, idx) & 0xFF;
 800901c:	b2da      	uxtb	r2, r3
    prop_p[0] = style->map[idx];
 800901e:	f88d 301e 	strb.w	r3, [sp, #30]
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
 8009022:	2aff      	cmp	r2, #255	; 0xff
 8009024:	d049      	beq.n	80090ba <_lv_style_set_int+0x182>
    size_t i = 0;
 8009026:	2300      	movs	r3, #0
    prop_id &= 0xF;
 8009028:	f002 020f 	and.w	r2, r2, #15
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
 800902c:	2104      	movs	r1, #4
 800902e:	2a08      	cmp	r2, #8
    else if(prop_id < LV_STYLE_ID_PTR) size += sizeof(lv_opa_t);
 8009030:	f1a2 040c 	sub.w	r4, r2, #12
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
 8009034:	d903      	bls.n	800903e <_lv_style_set_int+0x106>
    else size += sizeof(const void *);
 8009036:	2c01      	cmp	r4, #1
 8009038:	bf94      	ite	ls
 800903a:	2103      	movls	r1, #3
 800903c:	2106      	movhi	r1, #6
    return idx + get_prop_size(prop_id);
 800903e:	440b      	add	r3, r1
    prop_p[0] = style->map[idx];
 8009040:	5cc1      	ldrb	r1, [r0, r3]
    prop_p[1] = style->map[idx + 1];
 8009042:	18c2      	adds	r2, r0, r3
    prop_p[0] = style->map[idx];
 8009044:	f88d 101e 	strb.w	r1, [sp, #30]
    prop_p[1] = style->map[idx + 1];
 8009048:	7851      	ldrb	r1, [r2, #1]
    return get_style_prop(style, idx) & 0xFF;
 800904a:	f89d 201e 	ldrb.w	r2, [sp, #30]
    prop_p[1] = style->map[idx + 1];
 800904e:	f88d 101f 	strb.w	r1, [sp, #31]
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
 8009052:	2aff      	cmp	r2, #255	; 0xff
 8009054:	d1e8      	bne.n	8009028 <_lv_style_set_int+0xf0>
    return i + sizeof(lv_style_property_t);
 8009056:	b29b      	uxth	r3, r3
 8009058:	1c9a      	adds	r2, r3, #2
    if(size == 0) size += end_mark_size;
 800905a:	b292      	uxth	r2, r2
 800905c:	b36a      	cbz	r2, 80090ba <_lv_style_set_int+0x182>
 800905e:	3306      	adds	r3, #6
 8009060:	b29c      	uxth	r4, r3
    style->map = lv_mem_realloc(style->map, sz);
 8009062:	4621      	mov	r1, r4
 8009064:	f00c fa06 	bl	8015474 <lv_mem_realloc>
 8009068:	6038      	str	r0, [r7, #0]
    LV_ASSERT_MEM(style->map);
 800906a:	f00b fbad 	bl	80147c8 <lv_debug_check_null>
 800906e:	4603      	mov	r3, r0
 8009070:	b340      	cbz	r0, 80090c4 <_lv_style_set_int+0x18c>
    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	1fa2      	subs	r2, r4, #6
 8009076:	f3c8 2107 	ubfx	r1, r8, #8, #8
 800907a:	f3c9 2507 	ubfx	r5, r9, #8, #8
 800907e:	f803 8002 	strb.w	r8, [r3, r2]
 8009082:	4413      	add	r3, r2
 8009084:	1f22      	subs	r2, r4, #4
    _lv_memcpy_small(style->map + size - sizeof(lv_style_int_t) - end_mark_size, &value, sizeof(lv_style_int_t));
 8009086:	3c02      	subs	r4, #2
 8009088:	7059      	strb	r1, [r3, #1]
 800908a:	20ff      	movs	r0, #255	; 0xff
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	2100      	movs	r1, #0
 8009090:	f803 9002 	strb.w	r9, [r3, r2]
 8009094:	4413      	add	r3, r2
 8009096:	705d      	strb	r5, [r3, #1]
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	191a      	adds	r2, r3, r4
 800909c:	5518      	strb	r0, [r3, r4]
 800909e:	7051      	strb	r1, [r2, #1]
}
 80090a0:	b009      	add	sp, #36	; 0x24
 80090a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            _lv_memcpy_small(style->map + id + sizeof(lv_style_property_t), &value, sizeof(lv_style_int_t));
 80090a6:	3302      	adds	r3, #2
 80090a8:	f3c9 2107 	ubfx	r1, r9, #8, #8
 80090ac:	18c2      	adds	r2, r0, r3
 80090ae:	f800 9003 	strb.w	r9, [r0, r3]
 80090b2:	7051      	strb	r1, [r2, #1]
}
 80090b4:	b009      	add	sp, #36	; 0x24
 80090b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else size += sizeof(const void *);
 80090ba:	2406      	movs	r4, #6
 80090bc:	e7d1      	b.n	8009062 <_lv_style_set_int+0x12a>
 80090be:	f8dd b00c 	ldr.w	fp, [sp, #12]
                return i;
 80090c2:	e799      	b.n	8008ff8 <_lv_style_set_int+0xc0>
    LV_ASSERT_MEM(style->map);
 80090c4:	683a      	ldr	r2, [r7, #0]
 80090c6:	4802      	ldr	r0, [pc, #8]	; (80090d0 <_lv_style_set_int+0x198>)
 80090c8:	f00b fb82 	bl	80147d0 <lv_debug_log_error>
 80090cc:	e7fe      	b.n	80090cc <_lv_style_set_int+0x194>
 80090ce:	bf00      	nop
 80090d0:	0801e1c4 	.word	0x0801e1c4

080090d4 <_lv_style_set_color>:
{
 80090d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090d8:	4605      	mov	r5, r0
 80090da:	b089      	sub	sp, #36	; 0x24
    int32_t id = get_property_index(style, prop);
 80090dc:	6800      	ldr	r0, [r0, #0]
{
 80090de:	4688      	mov	r8, r1
 80090e0:	9205      	str	r2, [sp, #20]
    if(style->map == NULL) return -1;
 80090e2:	2800      	cmp	r0, #0
 80090e4:	f000 80b3 	beq.w	800924e <_lv_style_set_color+0x17a>
    prop_p[0] = style->map[idx];
 80090e8:	f890 9000 	ldrb.w	r9, [r0]
    uint8_t id_to_find = prop & 0xFF;
 80090ec:	fa5f fe81 	uxtb.w	lr, r1
    attr = (prop >> 8) & 0xFF;
 80090f0:	ea4f 2c11 	mov.w	ip, r1, lsr #8
    prop_p[1] = style->map[idx + 1];
 80090f4:	f890 b001 	ldrb.w	fp, [r0, #1]
    return get_style_prop(style, idx) & 0xFF;
 80090f8:	fa5f f189 	uxtb.w	r1, r9
    prop_p[0] = style->map[idx];
 80090fc:	f88d 901e 	strb.w	r9, [sp, #30]
    prop_p[1] = style->map[idx + 1];
 8009100:	f88d b01f 	strb.w	fp, [sp, #31]
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
 8009104:	29ff      	cmp	r1, #255	; 0xff
 8009106:	d056      	beq.n	80091b6 <_lv_style_set_color+0xe2>
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
 8009108:	f00c 037f 	and.w	r3, ip, #127	; 0x7f
    int16_t id_guess = -1;
 800910c:	f04f 36ff 	mov.w	r6, #4294967295
    size_t i = 0;
 8009110:	46c2      	mov	sl, r8
    prop_p[0] = style->map[idx];
 8009112:	464f      	mov	r7, r9
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
 8009114:	43db      	mvns	r3, r3
    size_t i = 0;
 8009116:	465c      	mov	r4, fp
 8009118:	46a8      	mov	r8, r5
    int16_t weight = -1;
 800911a:	9601      	str	r6, [sp, #4]
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
 800911c:	9304      	str	r3, [sp, #16]
    size_t i = 0;
 800911e:	2300      	movs	r3, #0
 8009120:	e010      	b.n	8009144 <_lv_style_set_color+0x70>
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
 8009122:	2a08      	cmp	r2, #8
 8009124:	d903      	bls.n	800912e <_lv_style_set_color+0x5a>
    else size += sizeof(const void *);
 8009126:	2d01      	cmp	r5, #1
 8009128:	bf94      	ite	ls
 800912a:	2103      	movls	r1, #3
 800912c:	2106      	movhi	r1, #6
    return idx + get_prop_size(prop_id);
 800912e:	440b      	add	r3, r1
    prop_p[0] = style->map[idx];
 8009130:	5cc7      	ldrb	r7, [r0, r3]
    prop_p[1] = style->map[idx + 1];
 8009132:	18c2      	adds	r2, r0, r3
    return get_style_prop(style, idx) & 0xFF;
 8009134:	b2f9      	uxtb	r1, r7
    prop_p[1] = style->map[idx + 1];
 8009136:	7854      	ldrb	r4, [r2, #1]
    prop_p[0] = style->map[idx];
 8009138:	f88d 701e 	strb.w	r7, [sp, #30]
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
 800913c:	29ff      	cmp	r1, #255	; 0xff
    prop_p[1] = style->map[idx + 1];
 800913e:	f88d 401f 	strb.w	r4, [sp, #31]
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
 8009142:	d025      	beq.n	8009190 <_lv_style_set_color+0xbc>
    prop_id &= 0xF;
 8009144:	f001 020f 	and.w	r2, r1, #15
        if(prop_id == id_to_find) {
 8009148:	458e      	cmp	lr, r1
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
 800914a:	f04f 0104 	mov.w	r1, #4
    else if(prop_id < LV_STYLE_ID_PTR) size += sizeof(lv_opa_t);
 800914e:	f1a2 050c 	sub.w	r5, r2, #12
        if(prop_id == id_to_find) {
 8009152:	d1e6      	bne.n	8009122 <_lv_style_set_color+0x4e>
    prop_p[0] = style->map[idx];
 8009154:	f88d 701e 	strb.w	r7, [sp, #30]
    prop_p[1] = style->map[idx + 1];
 8009158:	f88d 401f 	strb.w	r4, [sp, #31]
    return prop;
 800915c:	f8bd 401e 	ldrh.w	r4, [sp, #30]
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
 8009160:	ea8c 2714 	eor.w	r7, ip, r4, lsr #8
 8009164:	9703      	str	r7, [sp, #12]
    return ((get_style_prop(style, idx) >> 8) & 0xFFU);
 8009166:	0a27      	lsrs	r7, r4, #8
 8009168:	463c      	mov	r4, r7
 800916a:	9702      	str	r7, [sp, #8]
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
 800916c:	9f03      	ldr	r7, [sp, #12]
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
 800916e:	f004 047f 	and.w	r4, r4, #127	; 0x7f
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
 8009172:	f017 0f7f 	tst.w	r7, #127	; 0x7f
 8009176:	d06c      	beq.n	8009252 <_lv_style_set_color+0x17e>
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
 8009178:	9f04      	ldr	r7, [sp, #16]
 800917a:	4227      	tst	r7, r4
 800917c:	d1d1      	bne.n	8009122 <_lv_style_set_color+0x4e>
                if(LV_STYLE_ATTR_GET_STATE(attr_i) > weight) {
 800917e:	9f01      	ldr	r7, [sp, #4]
 8009180:	42bc      	cmp	r4, r7
 8009182:	ddce      	ble.n	8009122 <_lv_style_set_color+0x4e>
                    weight = LV_STYLE_ATTR_GET_STATE(attr_i);
 8009184:	9c02      	ldr	r4, [sp, #8]
                    id_guess = i;
 8009186:	b21e      	sxth	r6, r3
                    weight = LV_STYLE_ATTR_GET_STATE(attr_i);
 8009188:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 800918c:	9401      	str	r4, [sp, #4]
                    id_guess = i;
 800918e:	e7c8      	b.n	8009122 <_lv_style_set_color+0x4e>
 8009190:	4645      	mov	r5, r8
 8009192:	4633      	mov	r3, r6
    return id_guess;
 8009194:	46d0      	mov	r8, sl
    if(id >= 0) {
 8009196:	2b00      	cmp	r3, #0
 8009198:	db0d      	blt.n	80091b6 <_lv_style_set_color+0xe2>
    prop_p[1] = style->map[idx + 1];
 800919a:	18c2      	adds	r2, r0, r3
    prop_p[0] = style->map[idx];
 800919c:	5cc1      	ldrb	r1, [r0, r3]
    prop_p[1] = style->map[idx + 1];
 800919e:	7853      	ldrb	r3, [r2, #1]
    prop_p[0] = style->map[idx];
 80091a0:	f88d 101e 	strb.w	r1, [sp, #30]
    prop_p[1] = style->map[idx + 1];
 80091a4:	f88d 301f 	strb.w	r3, [sp, #31]
    return prop;
 80091a8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
        if(LV_STYLE_ATTR_GET_STATE(attr_found) == LV_STYLE_ATTR_GET_STATE(attr_goal)) {
 80091ac:	ea8c 2c13 	eor.w	ip, ip, r3, lsr #8
 80091b0:	f01c 0f7f 	tst.w	ip, #127	; 0x7f
 80091b4:	d045      	beq.n	8009242 <_lv_style_set_color+0x16e>
    return get_style_prop(style, idx) & 0xFF;
 80091b6:	fa5f f289 	uxtb.w	r2, r9
    prop_p[0] = style->map[idx];
 80091ba:	f88d 901e 	strb.w	r9, [sp, #30]
    prop_p[1] = style->map[idx + 1];
 80091be:	f88d b01f 	strb.w	fp, [sp, #31]
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
 80091c2:	2aff      	cmp	r2, #255	; 0xff
 80091c4:	d043      	beq.n	800924e <_lv_style_set_color+0x17a>
    size_t i = 0;
 80091c6:	2300      	movs	r3, #0
    prop_id &= 0xF;
 80091c8:	f002 020f 	and.w	r2, r2, #15
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
 80091cc:	2104      	movs	r1, #4
 80091ce:	2a08      	cmp	r2, #8
    else if(prop_id < LV_STYLE_ID_PTR) size += sizeof(lv_opa_t);
 80091d0:	f1a2 040c 	sub.w	r4, r2, #12
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
 80091d4:	d903      	bls.n	80091de <_lv_style_set_color+0x10a>
    else size += sizeof(const void *);
 80091d6:	2c01      	cmp	r4, #1
 80091d8:	bf94      	ite	ls
 80091da:	2103      	movls	r1, #3
 80091dc:	2106      	movhi	r1, #6
    return idx + get_prop_size(prop_id);
 80091de:	440b      	add	r3, r1
    prop_p[0] = style->map[idx];
 80091e0:	5cc1      	ldrb	r1, [r0, r3]
    prop_p[1] = style->map[idx + 1];
 80091e2:	18c2      	adds	r2, r0, r3
    prop_p[0] = style->map[idx];
 80091e4:	f88d 101e 	strb.w	r1, [sp, #30]
    prop_p[1] = style->map[idx + 1];
 80091e8:	7851      	ldrb	r1, [r2, #1]
    return get_style_prop(style, idx) & 0xFF;
 80091ea:	f89d 201e 	ldrb.w	r2, [sp, #30]
    prop_p[1] = style->map[idx + 1];
 80091ee:	f88d 101f 	strb.w	r1, [sp, #31]
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
 80091f2:	2aff      	cmp	r2, #255	; 0xff
 80091f4:	d1e8      	bne.n	80091c8 <_lv_style_set_color+0xf4>
    return i + sizeof(lv_style_property_t);
 80091f6:	b29b      	uxth	r3, r3
 80091f8:	1c9a      	adds	r2, r3, #2
    if(size == 0) size += end_mark_size;
 80091fa:	b292      	uxth	r2, r2
 80091fc:	b33a      	cbz	r2, 800924e <_lv_style_set_color+0x17a>
 80091fe:	3308      	adds	r3, #8
 8009200:	b29c      	uxth	r4, r3
    style->map = lv_mem_realloc(style->map, sz);
 8009202:	4621      	mov	r1, r4
 8009204:	f00c f936 	bl	8015474 <lv_mem_realloc>
 8009208:	6028      	str	r0, [r5, #0]
    LV_ASSERT_MEM(style->map);
 800920a:	f00b fadd 	bl	80147c8 <lv_debug_check_null>
 800920e:	4603      	mov	r3, r0
 8009210:	b310      	cbz	r0, 8009258 <_lv_style_set_color+0x184>
    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
 8009212:	682b      	ldr	r3, [r5, #0]
 8009214:	f1a4 0208 	sub.w	r2, r4, #8
 8009218:	f3c8 2007 	ubfx	r0, r8, #8, #8
 800921c:	9905      	ldr	r1, [sp, #20]
 800921e:	f803 8002 	strb.w	r8, [r3, r2]
 8009222:	4413      	add	r3, r2
    _lv_memcpy_small(style->map + size - sizeof(lv_color_t) - end_mark_size, &color, sizeof(lv_color_t));
 8009224:	1ea2      	subs	r2, r4, #2
 8009226:	26ff      	movs	r6, #255	; 0xff
 8009228:	7058      	strb	r0, [r3, #1]
 800922a:	2000      	movs	r0, #0
 800922c:	682b      	ldr	r3, [r5, #0]
 800922e:	4423      	add	r3, r4
 8009230:	f843 1c06 	str.w	r1, [r3, #-6]
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
 8009234:	682b      	ldr	r3, [r5, #0]
 8009236:	1899      	adds	r1, r3, r2
 8009238:	549e      	strb	r6, [r3, r2]
 800923a:	7048      	strb	r0, [r1, #1]
}
 800923c:	b009      	add	sp, #36	; 0x24
 800923e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    while(len) {
 8009242:	9b05      	ldr	r3, [sp, #20]
 8009244:	f8c2 3002 	str.w	r3, [r2, #2]
 8009248:	b009      	add	sp, #36	; 0x24
 800924a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else size += sizeof(const void *);
 800924e:	2408      	movs	r4, #8
 8009250:	e7d7      	b.n	8009202 <_lv_style_set_color+0x12e>
 8009252:	4645      	mov	r5, r8
 8009254:	46d0      	mov	r8, sl
                return i;
 8009256:	e79e      	b.n	8009196 <_lv_style_set_color+0xc2>
    LV_ASSERT_MEM(style->map);
 8009258:	682a      	ldr	r2, [r5, #0]
 800925a:	4802      	ldr	r0, [pc, #8]	; (8009264 <_lv_style_set_color+0x190>)
 800925c:	f00b fab8 	bl	80147d0 <lv_debug_log_error>
 8009260:	e7fe      	b.n	8009260 <_lv_style_set_color+0x18c>
 8009262:	bf00      	nop
 8009264:	0801e1c4 	.word	0x0801e1c4

08009268 <_lv_style_set_opa>:
{
 8009268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800926c:	4604      	mov	r4, r0
    int32_t id = get_property_index(style, prop);
 800926e:	6800      	ldr	r0, [r0, #0]
{
 8009270:	b089      	sub	sp, #36	; 0x24
 8009272:	460e      	mov	r6, r1
 8009274:	4693      	mov	fp, r2
    if(style->map == NULL) return -1;
 8009276:	2800      	cmp	r0, #0
 8009278:	f000 8099 	beq.w	80093ae <_lv_style_set_opa+0x146>
    prop_p[0] = style->map[idx];
 800927c:	f890 8000 	ldrb.w	r8, [r0]
    uint8_t id_to_find = prop & 0xFF;
 8009280:	b2cb      	uxtb	r3, r1
    prop_p[1] = style->map[idx + 1];
 8009282:	f890 e001 	ldrb.w	lr, [r0, #1]
    attr = (prop >> 8) & 0xFF;
 8009286:	0a09      	lsrs	r1, r1, #8
    return get_style_prop(style, idx) & 0xFF;
 8009288:	fa5f fc88 	uxtb.w	ip, r8
    uint8_t id_to_find = prop & 0xFF;
 800928c:	9301      	str	r3, [sp, #4]
    prop_p[0] = style->map[idx];
 800928e:	f88d 801e 	strb.w	r8, [sp, #30]
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
 8009292:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    prop_p[1] = style->map[idx + 1];
 8009296:	f88d e01f 	strb.w	lr, [sp, #31]
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
 800929a:	d055      	beq.n	8009348 <_lv_style_set_opa+0xe0>
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
 800929c:	f001 037f 	and.w	r3, r1, #127	; 0x7f
    int16_t id_guess = -1;
 80092a0:	f04f 32ff 	mov.w	r2, #4294967295
    prop_p[1] = style->map[idx + 1];
 80092a4:	46f2      	mov	sl, lr
    prop_p[0] = style->map[idx];
 80092a6:	4645      	mov	r5, r8
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
 80092a8:	43db      	mvns	r3, r3
    int16_t weight = -1;
 80092aa:	9202      	str	r2, [sp, #8]
    size_t i = 0;
 80092ac:	9203      	str	r2, [sp, #12]
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
 80092ae:	9305      	str	r3, [sp, #20]
    size_t i = 0;
 80092b0:	2300      	movs	r3, #0
 80092b2:	e016      	b.n	80092e2 <_lv_style_set_opa+0x7a>
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
 80092b4:	2f08      	cmp	r7, #8
 80092b6:	d906      	bls.n	80092c6 <_lv_style_set_opa+0x5e>
    else size += sizeof(const void *);
 80092b8:	f1b9 0f01 	cmp.w	r9, #1
 80092bc:	bf94      	ite	ls
 80092be:	f04f 0c03 	movls.w	ip, #3
 80092c2:	f04f 0c06 	movhi.w	ip, #6
    return idx + get_prop_size(prop_id);
 80092c6:	4463      	add	r3, ip
    prop_p[0] = style->map[idx];
 80092c8:	5cc5      	ldrb	r5, [r0, r3]
    prop_p[1] = style->map[idx + 1];
 80092ca:	18c7      	adds	r7, r0, r3
    return get_style_prop(style, idx) & 0xFF;
 80092cc:	fa5f fc85 	uxtb.w	ip, r5
    prop_p[1] = style->map[idx + 1];
 80092d0:	f897 a001 	ldrb.w	sl, [r7, #1]
    prop_p[0] = style->map[idx];
 80092d4:	f88d 501e 	strb.w	r5, [sp, #30]
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
 80092d8:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    prop_p[1] = style->map[idx + 1];
 80092dc:	f88d a01f 	strb.w	sl, [sp, #31]
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
 80092e0:	d021      	beq.n	8009326 <_lv_style_set_opa+0xbe>
        if(prop_id == id_to_find) {
 80092e2:	9a01      	ldr	r2, [sp, #4]
    prop_id &= 0xF;
 80092e4:	f00c 070f 	and.w	r7, ip, #15
        if(prop_id == id_to_find) {
 80092e8:	4562      	cmp	r2, ip
    else if(prop_id < LV_STYLE_ID_PTR) size += sizeof(lv_opa_t);
 80092ea:	f1a7 090c 	sub.w	r9, r7, #12
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
 80092ee:	f04f 0c04 	mov.w	ip, #4
        if(prop_id == id_to_find) {
 80092f2:	d1df      	bne.n	80092b4 <_lv_style_set_opa+0x4c>
    prop_p[1] = style->map[idx + 1];
 80092f4:	f88d a01f 	strb.w	sl, [sp, #31]
    prop_p[0] = style->map[idx];
 80092f8:	f88d 501e 	strb.w	r5, [sp, #30]
    return prop;
 80092fc:	f8bd 501e 	ldrh.w	r5, [sp, #30]
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
 8009300:	ea81 2a15 	eor.w	sl, r1, r5, lsr #8
    return ((get_style_prop(style, idx) >> 8) & 0xFFU);
 8009304:	0a2a      	lsrs	r2, r5, #8
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
 8009306:	f01a 0f7f 	tst.w	sl, #127	; 0x7f
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
 800930a:	f002 057f 	and.w	r5, r2, #127	; 0x7f
    return ((get_style_prop(style, idx) >> 8) & 0xFFU);
 800930e:	9204      	str	r2, [sp, #16]
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
 8009310:	d00b      	beq.n	800932a <_lv_style_set_opa+0xc2>
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
 8009312:	9a05      	ldr	r2, [sp, #20]
 8009314:	422a      	tst	r2, r5
 8009316:	d1cd      	bne.n	80092b4 <_lv_style_set_opa+0x4c>
                if(LV_STYLE_ATTR_GET_STATE(attr_i) > weight) {
 8009318:	9a02      	ldr	r2, [sp, #8]
 800931a:	4295      	cmp	r5, r2
 800931c:	ddca      	ble.n	80092b4 <_lv_style_set_opa+0x4c>
                    id_guess = i;
 800931e:	b21a      	sxth	r2, r3
                    weight = LV_STYLE_ATTR_GET_STATE(attr_i);
 8009320:	9502      	str	r5, [sp, #8]
                    id_guess = i;
 8009322:	9203      	str	r2, [sp, #12]
 8009324:	e7c6      	b.n	80092b4 <_lv_style_set_opa+0x4c>
 8009326:	9a03      	ldr	r2, [sp, #12]
 8009328:	4613      	mov	r3, r2
    if(id >= 0) {
 800932a:	2b00      	cmp	r3, #0
 800932c:	db0c      	blt.n	8009348 <_lv_style_set_opa+0xe0>
    prop_p[1] = style->map[idx + 1];
 800932e:	18c2      	adds	r2, r0, r3
    prop_p[0] = style->map[idx];
 8009330:	5cc5      	ldrb	r5, [r0, r3]
    prop_p[1] = style->map[idx + 1];
 8009332:	7853      	ldrb	r3, [r2, #1]
    prop_p[0] = style->map[idx];
 8009334:	f88d 501e 	strb.w	r5, [sp, #30]
    prop_p[1] = style->map[idx + 1];
 8009338:	f88d 301f 	strb.w	r3, [sp, #31]
    return prop;
 800933c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
        if(LV_STYLE_ATTR_GET_STATE(attr_found) == LV_STYLE_ATTR_GET_STATE(attr_goal)) {
 8009340:	ea81 2113 	eor.w	r1, r1, r3, lsr #8
 8009344:	064b      	lsls	r3, r1, #25
 8009346:	d049      	beq.n	80093dc <_lv_style_set_opa+0x174>
    return get_style_prop(style, idx) & 0xFF;
 8009348:	fa5f f288 	uxtb.w	r2, r8
    prop_p[0] = style->map[idx];
 800934c:	f88d 801e 	strb.w	r8, [sp, #30]
    prop_p[1] = style->map[idx + 1];
 8009350:	f88d e01f 	strb.w	lr, [sp, #31]
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
 8009354:	2aff      	cmp	r2, #255	; 0xff
 8009356:	d02a      	beq.n	80093ae <_lv_style_set_opa+0x146>
    size_t i = 0;
 8009358:	2300      	movs	r3, #0
    prop_id &= 0xF;
 800935a:	f002 020f 	and.w	r2, r2, #15
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
 800935e:	2104      	movs	r1, #4
 8009360:	2a08      	cmp	r2, #8
    else if(prop_id < LV_STYLE_ID_PTR) size += sizeof(lv_opa_t);
 8009362:	f1a2 050c 	sub.w	r5, r2, #12
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
 8009366:	d903      	bls.n	8009370 <_lv_style_set_opa+0x108>
    else size += sizeof(const void *);
 8009368:	2d01      	cmp	r5, #1
 800936a:	bf94      	ite	ls
 800936c:	2103      	movls	r1, #3
 800936e:	2106      	movhi	r1, #6
    return idx + get_prop_size(prop_id);
 8009370:	440b      	add	r3, r1
    prop_p[0] = style->map[idx];
 8009372:	5cc1      	ldrb	r1, [r0, r3]
    prop_p[1] = style->map[idx + 1];
 8009374:	18c2      	adds	r2, r0, r3
    prop_p[0] = style->map[idx];
 8009376:	f88d 101e 	strb.w	r1, [sp, #30]
    prop_p[1] = style->map[idx + 1];
 800937a:	7851      	ldrb	r1, [r2, #1]
    return get_style_prop(style, idx) & 0xFF;
 800937c:	f89d 201e 	ldrb.w	r2, [sp, #30]
    prop_p[1] = style->map[idx + 1];
 8009380:	f88d 101f 	strb.w	r1, [sp, #31]
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
 8009384:	2aff      	cmp	r2, #255	; 0xff
 8009386:	d1e8      	bne.n	800935a <_lv_style_set_opa+0xf2>
    return i + sizeof(lv_style_property_t);
 8009388:	b29b      	uxth	r3, r3
 800938a:	1c9a      	adds	r2, r3, #2
    if(size == 0) size += end_mark_size;
 800938c:	b292      	uxth	r2, r2
 800938e:	b172      	cbz	r2, 80093ae <_lv_style_set_opa+0x146>
 8009390:	3305      	adds	r3, #5
 8009392:	b29d      	uxth	r5, r3
    style->map = lv_mem_realloc(style->map, sz);
 8009394:	4629      	mov	r1, r5
 8009396:	f00c f86d 	bl	8015474 <lv_mem_realloc>
 800939a:	6020      	str	r0, [r4, #0]
    LV_ASSERT_MEM(style->map);
 800939c:	f00b fa14 	bl	80147c8 <lv_debug_check_null>
 80093a0:	4603      	mov	r3, r0
 80093a2:	b930      	cbnz	r0, 80093b2 <_lv_style_set_opa+0x14a>
 80093a4:	6822      	ldr	r2, [r4, #0]
 80093a6:	4810      	ldr	r0, [pc, #64]	; (80093e8 <_lv_style_set_opa+0x180>)
 80093a8:	f00b fa12 	bl	80147d0 <lv_debug_log_error>
 80093ac:	e7fe      	b.n	80093ac <_lv_style_set_opa+0x144>
    else size += sizeof(const void *);
 80093ae:	2505      	movs	r5, #5
 80093b0:	e7f0      	b.n	8009394 <_lv_style_set_opa+0x12c>
    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
 80093b2:	6823      	ldr	r3, [r4, #0]
 80093b4:	1f6a      	subs	r2, r5, #5
        *d8 = *s8;
 80093b6:	f3c6 2107 	ubfx	r1, r6, #8, #8
 80093ba:	2000      	movs	r0, #0
 80093bc:	549e      	strb	r6, [r3, r2]
 80093be:	4413      	add	r3, r2
    _lv_memcpy_small(style->map + size - sizeof(lv_opa_t) - end_mark_size, &opa, sizeof(lv_opa_t));
 80093c0:	1eaa      	subs	r2, r5, #2
 80093c2:	26ff      	movs	r6, #255	; 0xff
 80093c4:	7059      	strb	r1, [r3, #1]
 80093c6:	6823      	ldr	r3, [r4, #0]
 80093c8:	442b      	add	r3, r5
 80093ca:	f803 bc03 	strb.w	fp, [r3, #-3]
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
 80093ce:	6823      	ldr	r3, [r4, #0]
 80093d0:	1899      	adds	r1, r3, r2
 80093d2:	549e      	strb	r6, [r3, r2]
 80093d4:	7048      	strb	r0, [r1, #1]
}
 80093d6:	b009      	add	sp, #36	; 0x24
 80093d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093dc:	f882 b002 	strb.w	fp, [r2, #2]
 80093e0:	b009      	add	sp, #36	; 0x24
 80093e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093e6:	bf00      	nop
 80093e8:	0801e1c4 	.word	0x0801e1c4

080093ec <_lv_style_set_ptr>:
{
 80093ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093f0:	4605      	mov	r5, r0
 80093f2:	b089      	sub	sp, #36	; 0x24
    int32_t id = get_property_index(style, prop);
 80093f4:	6800      	ldr	r0, [r0, #0]
{
 80093f6:	4688      	mov	r8, r1
 80093f8:	9205      	str	r2, [sp, #20]
    if(style->map == NULL) return -1;
 80093fa:	2800      	cmp	r0, #0
 80093fc:	f000 80b3 	beq.w	8009566 <_lv_style_set_ptr+0x17a>
    prop_p[0] = style->map[idx];
 8009400:	f890 9000 	ldrb.w	r9, [r0]
    uint8_t id_to_find = prop & 0xFF;
 8009404:	fa5f fe81 	uxtb.w	lr, r1
    attr = (prop >> 8) & 0xFF;
 8009408:	ea4f 2c11 	mov.w	ip, r1, lsr #8
    prop_p[1] = style->map[idx + 1];
 800940c:	f890 b001 	ldrb.w	fp, [r0, #1]
    return get_style_prop(style, idx) & 0xFF;
 8009410:	fa5f f189 	uxtb.w	r1, r9
    prop_p[0] = style->map[idx];
 8009414:	f88d 901e 	strb.w	r9, [sp, #30]
    prop_p[1] = style->map[idx + 1];
 8009418:	f88d b01f 	strb.w	fp, [sp, #31]
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
 800941c:	29ff      	cmp	r1, #255	; 0xff
 800941e:	d056      	beq.n	80094ce <_lv_style_set_ptr+0xe2>
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
 8009420:	f00c 037f 	and.w	r3, ip, #127	; 0x7f
    int16_t id_guess = -1;
 8009424:	f04f 36ff 	mov.w	r6, #4294967295
    size_t i = 0;
 8009428:	46c2      	mov	sl, r8
    prop_p[0] = style->map[idx];
 800942a:	464f      	mov	r7, r9
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
 800942c:	43db      	mvns	r3, r3
    size_t i = 0;
 800942e:	465c      	mov	r4, fp
 8009430:	46a8      	mov	r8, r5
    int16_t weight = -1;
 8009432:	9601      	str	r6, [sp, #4]
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
 8009434:	9304      	str	r3, [sp, #16]
    size_t i = 0;
 8009436:	2300      	movs	r3, #0
 8009438:	e010      	b.n	800945c <_lv_style_set_ptr+0x70>
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
 800943a:	2a08      	cmp	r2, #8
 800943c:	d903      	bls.n	8009446 <_lv_style_set_ptr+0x5a>
    else size += sizeof(const void *);
 800943e:	2d01      	cmp	r5, #1
 8009440:	bf94      	ite	ls
 8009442:	2103      	movls	r1, #3
 8009444:	2106      	movhi	r1, #6
    return idx + get_prop_size(prop_id);
 8009446:	440b      	add	r3, r1
    prop_p[0] = style->map[idx];
 8009448:	5cc7      	ldrb	r7, [r0, r3]
    prop_p[1] = style->map[idx + 1];
 800944a:	18c2      	adds	r2, r0, r3
    return get_style_prop(style, idx) & 0xFF;
 800944c:	b2f9      	uxtb	r1, r7
    prop_p[1] = style->map[idx + 1];
 800944e:	7854      	ldrb	r4, [r2, #1]
    prop_p[0] = style->map[idx];
 8009450:	f88d 701e 	strb.w	r7, [sp, #30]
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
 8009454:	29ff      	cmp	r1, #255	; 0xff
    prop_p[1] = style->map[idx + 1];
 8009456:	f88d 401f 	strb.w	r4, [sp, #31]
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
 800945a:	d025      	beq.n	80094a8 <_lv_style_set_ptr+0xbc>
    prop_id &= 0xF;
 800945c:	f001 020f 	and.w	r2, r1, #15
        if(prop_id == id_to_find) {
 8009460:	458e      	cmp	lr, r1
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
 8009462:	f04f 0104 	mov.w	r1, #4
    else if(prop_id < LV_STYLE_ID_PTR) size += sizeof(lv_opa_t);
 8009466:	f1a2 050c 	sub.w	r5, r2, #12
        if(prop_id == id_to_find) {
 800946a:	d1e6      	bne.n	800943a <_lv_style_set_ptr+0x4e>
    prop_p[0] = style->map[idx];
 800946c:	f88d 701e 	strb.w	r7, [sp, #30]
    prop_p[1] = style->map[idx + 1];
 8009470:	f88d 401f 	strb.w	r4, [sp, #31]
    return prop;
 8009474:	f8bd 401e 	ldrh.w	r4, [sp, #30]
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
 8009478:	ea8c 2714 	eor.w	r7, ip, r4, lsr #8
 800947c:	9703      	str	r7, [sp, #12]
    return ((get_style_prop(style, idx) >> 8) & 0xFFU);
 800947e:	0a27      	lsrs	r7, r4, #8
 8009480:	463c      	mov	r4, r7
 8009482:	9702      	str	r7, [sp, #8]
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
 8009484:	9f03      	ldr	r7, [sp, #12]
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
 8009486:	f004 047f 	and.w	r4, r4, #127	; 0x7f
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
 800948a:	f017 0f7f 	tst.w	r7, #127	; 0x7f
 800948e:	d06c      	beq.n	800956a <_lv_style_set_ptr+0x17e>
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
 8009490:	9f04      	ldr	r7, [sp, #16]
 8009492:	4227      	tst	r7, r4
 8009494:	d1d1      	bne.n	800943a <_lv_style_set_ptr+0x4e>
                if(LV_STYLE_ATTR_GET_STATE(attr_i) > weight) {
 8009496:	9f01      	ldr	r7, [sp, #4]
 8009498:	42bc      	cmp	r4, r7
 800949a:	ddce      	ble.n	800943a <_lv_style_set_ptr+0x4e>
                    weight = LV_STYLE_ATTR_GET_STATE(attr_i);
 800949c:	9c02      	ldr	r4, [sp, #8]
                    id_guess = i;
 800949e:	b21e      	sxth	r6, r3
                    weight = LV_STYLE_ATTR_GET_STATE(attr_i);
 80094a0:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 80094a4:	9401      	str	r4, [sp, #4]
                    id_guess = i;
 80094a6:	e7c8      	b.n	800943a <_lv_style_set_ptr+0x4e>
 80094a8:	4645      	mov	r5, r8
 80094aa:	4633      	mov	r3, r6
    return id_guess;
 80094ac:	46d0      	mov	r8, sl
    if(id >= 0) {
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	db0d      	blt.n	80094ce <_lv_style_set_ptr+0xe2>
    prop_p[1] = style->map[idx + 1];
 80094b2:	18c2      	adds	r2, r0, r3
    prop_p[0] = style->map[idx];
 80094b4:	5cc1      	ldrb	r1, [r0, r3]
    prop_p[1] = style->map[idx + 1];
 80094b6:	7853      	ldrb	r3, [r2, #1]
    prop_p[0] = style->map[idx];
 80094b8:	f88d 101e 	strb.w	r1, [sp, #30]
    prop_p[1] = style->map[idx + 1];
 80094bc:	f88d 301f 	strb.w	r3, [sp, #31]
    return prop;
 80094c0:	f8bd 301e 	ldrh.w	r3, [sp, #30]
        if(LV_STYLE_ATTR_GET_STATE(attr_found) == LV_STYLE_ATTR_GET_STATE(attr_goal)) {
 80094c4:	ea8c 2c13 	eor.w	ip, ip, r3, lsr #8
 80094c8:	f01c 0f7f 	tst.w	ip, #127	; 0x7f
 80094cc:	d045      	beq.n	800955a <_lv_style_set_ptr+0x16e>
    return get_style_prop(style, idx) & 0xFF;
 80094ce:	fa5f f289 	uxtb.w	r2, r9
    prop_p[0] = style->map[idx];
 80094d2:	f88d 901e 	strb.w	r9, [sp, #30]
    prop_p[1] = style->map[idx + 1];
 80094d6:	f88d b01f 	strb.w	fp, [sp, #31]
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
 80094da:	2aff      	cmp	r2, #255	; 0xff
 80094dc:	d043      	beq.n	8009566 <_lv_style_set_ptr+0x17a>
    size_t i = 0;
 80094de:	2300      	movs	r3, #0
    prop_id &= 0xF;
 80094e0:	f002 020f 	and.w	r2, r2, #15
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
 80094e4:	2104      	movs	r1, #4
 80094e6:	2a08      	cmp	r2, #8
    else if(prop_id < LV_STYLE_ID_PTR) size += sizeof(lv_opa_t);
 80094e8:	f1a2 040c 	sub.w	r4, r2, #12
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
 80094ec:	d903      	bls.n	80094f6 <_lv_style_set_ptr+0x10a>
    else size += sizeof(const void *);
 80094ee:	2c01      	cmp	r4, #1
 80094f0:	bf94      	ite	ls
 80094f2:	2103      	movls	r1, #3
 80094f4:	2106      	movhi	r1, #6
    return idx + get_prop_size(prop_id);
 80094f6:	440b      	add	r3, r1
    prop_p[0] = style->map[idx];
 80094f8:	5cc1      	ldrb	r1, [r0, r3]
    prop_p[1] = style->map[idx + 1];
 80094fa:	18c2      	adds	r2, r0, r3
    prop_p[0] = style->map[idx];
 80094fc:	f88d 101e 	strb.w	r1, [sp, #30]
    prop_p[1] = style->map[idx + 1];
 8009500:	7851      	ldrb	r1, [r2, #1]
    return get_style_prop(style, idx) & 0xFF;
 8009502:	f89d 201e 	ldrb.w	r2, [sp, #30]
    prop_p[1] = style->map[idx + 1];
 8009506:	f88d 101f 	strb.w	r1, [sp, #31]
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
 800950a:	2aff      	cmp	r2, #255	; 0xff
 800950c:	d1e8      	bne.n	80094e0 <_lv_style_set_ptr+0xf4>
    return i + sizeof(lv_style_property_t);
 800950e:	b29b      	uxth	r3, r3
 8009510:	1c9a      	adds	r2, r3, #2
    if(size == 0) size += end_mark_size;
 8009512:	b292      	uxth	r2, r2
 8009514:	b33a      	cbz	r2, 8009566 <_lv_style_set_ptr+0x17a>
 8009516:	3308      	adds	r3, #8
 8009518:	b29c      	uxth	r4, r3
    style->map = lv_mem_realloc(style->map, sz);
 800951a:	4621      	mov	r1, r4
 800951c:	f00b ffaa 	bl	8015474 <lv_mem_realloc>
 8009520:	6028      	str	r0, [r5, #0]
    LV_ASSERT_MEM(style->map);
 8009522:	f00b f951 	bl	80147c8 <lv_debug_check_null>
 8009526:	4603      	mov	r3, r0
 8009528:	b310      	cbz	r0, 8009570 <_lv_style_set_ptr+0x184>
    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
 800952a:	682b      	ldr	r3, [r5, #0]
 800952c:	f1a4 0208 	sub.w	r2, r4, #8
 8009530:	f3c8 2007 	ubfx	r0, r8, #8, #8
 8009534:	9905      	ldr	r1, [sp, #20]
 8009536:	f803 8002 	strb.w	r8, [r3, r2]
 800953a:	4413      	add	r3, r2
    _lv_memcpy_small(style->map + size - sizeof(const void *) - end_mark_size, &p, sizeof(const void *));
 800953c:	1ea2      	subs	r2, r4, #2
 800953e:	26ff      	movs	r6, #255	; 0xff
 8009540:	7058      	strb	r0, [r3, #1]
 8009542:	2000      	movs	r0, #0
 8009544:	682b      	ldr	r3, [r5, #0]
 8009546:	4423      	add	r3, r4
 8009548:	f843 1c06 	str.w	r1, [r3, #-6]
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
 800954c:	682b      	ldr	r3, [r5, #0]
 800954e:	1899      	adds	r1, r3, r2
 8009550:	549e      	strb	r6, [r3, r2]
 8009552:	7048      	strb	r0, [r1, #1]
}
 8009554:	b009      	add	sp, #36	; 0x24
 8009556:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    while(len) {
 800955a:	9b05      	ldr	r3, [sp, #20]
 800955c:	f8c2 3002 	str.w	r3, [r2, #2]
 8009560:	b009      	add	sp, #36	; 0x24
 8009562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else size += sizeof(const void *);
 8009566:	2408      	movs	r4, #8
 8009568:	e7d7      	b.n	800951a <_lv_style_set_ptr+0x12e>
 800956a:	4645      	mov	r5, r8
 800956c:	46d0      	mov	r8, sl
                return i;
 800956e:	e79e      	b.n	80094ae <_lv_style_set_ptr+0xc2>
    LV_ASSERT_MEM(style->map);
 8009570:	682a      	ldr	r2, [r5, #0]
 8009572:	4802      	ldr	r0, [pc, #8]	; (800957c <_lv_style_set_ptr+0x190>)
 8009574:	f00b f92c 	bl	80147d0 <lv_debug_log_error>
 8009578:	e7fe      	b.n	8009578 <_lv_style_set_ptr+0x18c>
 800957a:	bf00      	nop
 800957c:	0801e1c4 	.word	0x0801e1c4

08009580 <_lv_style_list_get_transition_style>:
    if(!list->has_trans) return NULL;
 8009580:	f990 3004 	ldrsb.w	r3, [r0, #4]
 8009584:	2b00      	cmp	r3, #0
 8009586:	da02      	bge.n	800958e <_lv_style_list_get_transition_style+0xe>
    return list->style_list[0];
 8009588:	6803      	ldr	r3, [r0, #0]
 800958a:	6818      	ldr	r0, [r3, #0]
 800958c:	4770      	bx	lr
    if(!list->has_trans) return NULL;
 800958e:	2000      	movs	r0, #0
}
 8009590:	4770      	bx	lr
 8009592:	bf00      	nop

08009594 <_lv_style_list_add_trans_style>:
{
 8009594:	b538      	push	{r3, r4, r5, lr}
    if(list->has_trans) return _lv_style_list_get_transition_style(list);
 8009596:	f990 3004 	ldrsb.w	r3, [r0, #4]
{
 800959a:	4605      	mov	r5, r0
    if(list->has_trans) return _lv_style_list_get_transition_style(list);
 800959c:	2b00      	cmp	r3, #0
 800959e:	db1d      	blt.n	80095dc <_lv_style_list_add_trans_style+0x48>
    lv_style_t * trans_style = lv_mem_alloc(sizeof(lv_style_t));
 80095a0:	2004      	movs	r0, #4
 80095a2:	f00b fbfd 	bl	8014da0 <lv_mem_alloc>
 80095a6:	4604      	mov	r4, r0
    LV_ASSERT_MEM(trans_style);
 80095a8:	f00b f90e 	bl	80147c8 <lv_debug_check_null>
 80095ac:	4603      	mov	r3, r0
 80095ae:	b1c8      	cbz	r0, 80095e4 <_lv_style_list_add_trans_style+0x50>
    if(trans_style == NULL) {
 80095b0:	b194      	cbz	r4, 80095d8 <_lv_style_list_add_trans_style+0x44>
    _lv_memset_00(style, sizeof(lv_style_t));
 80095b2:	2104      	movs	r1, #4
 80095b4:	4620      	mov	r0, r4
 80095b6:	f00c f8df 	bl	8015778 <_lv_memset_00>
    if(list == NULL) return;
 80095ba:	4621      	mov	r1, r4
 80095bc:	4628      	mov	r0, r5
 80095be:	f7ff fb05 	bl	8008bcc <_lv_style_list_add_style.part.0>
    list->has_trans = 1;
 80095c2:	792b      	ldrb	r3, [r5, #4]
 80095c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095c8:	712b      	strb	r3, [r5, #4]
    if(list->has_local) {
 80095ca:	065b      	lsls	r3, r3, #25
 80095cc:	d504      	bpl.n	80095d8 <_lv_style_list_add_trans_style+0x44>
        lv_style_t * tmp = list->style_list[0];
 80095ce:	682b      	ldr	r3, [r5, #0]
        list->style_list[0] = list->style_list[1];
 80095d0:	e9d3 1200 	ldrd	r1, r2, [r3]
 80095d4:	e9c3 2100 	strd	r2, r1, [r3]
}
 80095d8:	4620      	mov	r0, r4
 80095da:	bd38      	pop	{r3, r4, r5, pc}
    return list->style_list[0];
 80095dc:	6803      	ldr	r3, [r0, #0]
 80095de:	681c      	ldr	r4, [r3, #0]
}
 80095e0:	4620      	mov	r0, r4
 80095e2:	bd38      	pop	{r3, r4, r5, pc}
    LV_ASSERT_MEM(trans_style);
 80095e4:	4622      	mov	r2, r4
 80095e6:	4802      	ldr	r0, [pc, #8]	; (80095f0 <_lv_style_list_add_trans_style+0x5c>)
 80095e8:	f00b f8f2 	bl	80147d0 <lv_debug_log_error>
 80095ec:	e7fe      	b.n	80095ec <_lv_style_list_add_trans_style+0x58>
 80095ee:	bf00      	nop
 80095f0:	0801e1c4 	.word	0x0801e1c4

080095f4 <_lv_style_list_get_int>:
{
 80095f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095f8:	b08f      	sub	sp, #60	; 0x3c
    if(list == NULL) return LV_RES_INV;
 80095fa:	4605      	mov	r5, r0
{
 80095fc:	9105      	str	r1, [sp, #20]
 80095fe:	e9cd 200a 	strd	r2, r0, [sp, #40]	; 0x28
    if(list == NULL) return LV_RES_INV;
 8009602:	2800      	cmp	r0, #0
 8009604:	f000 80a7 	beq.w	8009756 <_lv_style_list_get_int+0x162>
    if(list->style_list == NULL) return LV_RES_INV;
 8009608:	6803      	ldr	r3, [r0, #0]
 800960a:	9308      	str	r3, [sp, #32]
 800960c:	2b00      	cmp	r3, #0
 800960e:	f000 80b6 	beq.w	800977e <_lv_style_list_get_int+0x18a>
    for(ci = 0; ci < list->style_cnt; ci++) {
 8009612:	7903      	ldrb	r3, [r0, #4]
    lv_style_int_t value_act = 0;
 8009614:	2400      	movs	r4, #0
    attr = prop >> 8;
 8009616:	0a0a      	lsrs	r2, r1, #8
    for(ci = 0; ci < list->style_cnt; ci++) {
 8009618:	f013 003f 	ands.w	r0, r3, #63	; 0x3f
    lv_style_int_t value_act = 0;
 800961c:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
    int16_t weight_goal = attr;
 8009620:	4692      	mov	sl, r2
    for(ci = 0; ci < list->style_cnt; ci++) {
 8009622:	f000 8098 	beq.w	8009756 <_lv_style_list_get_int+0x162>
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
 8009626:	f002 017f 	and.w	r1, r2, #127	; 0x7f
 800962a:	88ad      	ldrh	r5, [r5, #4]
    attr = (prop >> 8) & 0xFF;
 800962c:	b2d2      	uxtb	r2, r2
 800962e:	9007      	str	r0, [sp, #28]
 8009630:	b25b      	sxtb	r3, r3
 8009632:	9203      	str	r2, [sp, #12]
 8009634:	f405 72c0 	and.w	r2, r5, #384	; 0x180
 8009638:	9309      	str	r3, [sp, #36]	; 0x24
    int16_t weight = -1;
 800963a:	f04f 33ff 	mov.w	r3, #4294967295
 800963e:	9206      	str	r2, [sp, #24]
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
 8009640:	43ca      	mvns	r2, r1
    int16_t weight = -1;
 8009642:	9302      	str	r3, [sp, #8]
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
 8009644:	9204      	str	r2, [sp, #16]
    if(list->has_trans && list->skip_trans) id++;
 8009646:	9a06      	ldr	r2, [sp, #24]
 8009648:	b2e3      	uxtb	r3, r4
 800964a:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
 800964e:	d101      	bne.n	8009654 <_lv_style_list_get_int+0x60>
 8009650:	3301      	adds	r3, #1
 8009652:	b2db      	uxtb	r3, r3
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
 8009654:	9a07      	ldr	r2, [sp, #28]
 8009656:	2a00      	cmp	r2, #0
 8009658:	d074      	beq.n	8009744 <_lv_style_list_get_int+0x150>
 800965a:	4298      	cmp	r0, r3
 800965c:	d972      	bls.n	8009744 <_lv_style_list_get_int+0x150>
    return list->style_list[id];
 800965e:	9a08      	ldr	r2, [sp, #32]
 8009660:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    if(style == NULL) return -1;
 8009664:	2b00      	cmp	r3, #0
 8009666:	d06d      	beq.n	8009744 <_lv_style_list_get_int+0x150>
    if(style->map == NULL) return -1;
 8009668:	681a      	ldr	r2, [r3, #0]
 800966a:	2a00      	cmp	r2, #0
 800966c:	d06a      	beq.n	8009744 <_lv_style_list_get_int+0x150>
    prop_p[0] = style->map[idx];
 800966e:	7811      	ldrb	r1, [r2, #0]
    prop_p[1] = style->map[idx + 1];
 8009670:	f892 8001 	ldrb.w	r8, [r2, #1]
    return get_style_prop(style, idx) & 0xFF;
 8009674:	b2ce      	uxtb	r6, r1
    uint8_t id_to_find = prop & 0xFF;
 8009676:	f89d b014 	ldrb.w	fp, [sp, #20]
    prop_p[0] = style->map[idx];
 800967a:	f88d 1036 	strb.w	r1, [sp, #54]	; 0x36
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
 800967e:	2eff      	cmp	r6, #255	; 0xff
    prop_p[1] = style->map[idx + 1];
 8009680:	f88d 8037 	strb.w	r8, [sp, #55]	; 0x37
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
 8009684:	d05e      	beq.n	8009744 <_lv_style_list_get_int+0x150>
    int16_t id_guess = -1;
 8009686:	f04f 33ff 	mov.w	r3, #4294967295
    size_t i = 0;
 800968a:	2500      	movs	r5, #0
    int16_t weight = -1;
 800968c:	9001      	str	r0, [sp, #4]
 800968e:	469c      	mov	ip, r3
 8009690:	e012      	b.n	80096b8 <_lv_style_list_get_int+0xc4>
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
 8009692:	2f08      	cmp	r7, #8
 8009694:	d904      	bls.n	80096a0 <_lv_style_list_get_int+0xac>
    else size += sizeof(const void *);
 8009696:	f1be 0f01 	cmp.w	lr, #1
 800969a:	bf94      	ite	ls
 800969c:	2603      	movls	r6, #3
 800969e:	2606      	movhi	r6, #6
    return idx + get_prop_size(prop_id);
 80096a0:	4435      	add	r5, r6
    prop_p[0] = style->map[idx];
 80096a2:	5d51      	ldrb	r1, [r2, r5]
    prop_p[1] = style->map[idx + 1];
 80096a4:	1956      	adds	r6, r2, r5
 80096a6:	f896 8001 	ldrb.w	r8, [r6, #1]
    return get_style_prop(style, idx) & 0xFF;
 80096aa:	b2ce      	uxtb	r6, r1
    prop_p[0] = style->map[idx];
 80096ac:	f88d 1036 	strb.w	r1, [sp, #54]	; 0x36
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
 80096b0:	2eff      	cmp	r6, #255	; 0xff
    prop_p[1] = style->map[idx + 1];
 80096b2:	f88d 8037 	strb.w	r8, [sp, #55]	; 0x37
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
 80096b6:	d020      	beq.n	80096fa <_lv_style_list_get_int+0x106>
    prop_id &= 0xF;
 80096b8:	f006 070f 	and.w	r7, r6, #15
        if(prop_id == id_to_find) {
 80096bc:	455e      	cmp	r6, fp
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
 80096be:	f04f 0604 	mov.w	r6, #4
    else if(prop_id < LV_STYLE_ID_PTR) size += sizeof(lv_opa_t);
 80096c2:	f1a7 0e0c 	sub.w	lr, r7, #12
        if(prop_id == id_to_find) {
 80096c6:	d1e4      	bne.n	8009692 <_lv_style_list_get_int+0x9e>
    prop_p[1] = style->map[idx + 1];
 80096c8:	f88d 8037 	strb.w	r8, [sp, #55]	; 0x37
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
 80096cc:	9803      	ldr	r0, [sp, #12]
    prop_p[0] = style->map[idx];
 80096ce:	f88d 1036 	strb.w	r1, [sp, #54]	; 0x36
    return prop;
 80096d2:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
 80096d6:	ea80 2911 	eor.w	r9, r0, r1, lsr #8
    return ((get_style_prop(style, idx) >> 8) & 0xFFU);
 80096da:	ea4f 2811 	mov.w	r8, r1, lsr #8
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
 80096de:	f019 0f7f 	tst.w	r9, #127	; 0x7f
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
 80096e2:	f008 017f 	and.w	r1, r8, #127	; 0x7f
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
 80096e6:	d047      	beq.n	8009778 <_lv_style_list_get_int+0x184>
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
 80096e8:	9804      	ldr	r0, [sp, #16]
 80096ea:	4208      	tst	r0, r1
 80096ec:	d1d1      	bne.n	8009692 <_lv_style_list_get_int+0x9e>
                if(LV_STYLE_ATTR_GET_STATE(attr_i) > weight) {
 80096ee:	4561      	cmp	r1, ip
 80096f0:	ddcf      	ble.n	8009692 <_lv_style_list_get_int+0x9e>
                    weight = LV_STYLE_ATTR_GET_STATE(attr_i);
 80096f2:	f008 0c7f 	and.w	ip, r8, #127	; 0x7f
                    id_guess = i;
 80096f6:	b22b      	sxth	r3, r5
 80096f8:	e7cb      	b.n	8009692 <_lv_style_list_get_int+0x9e>
 80096fa:	9801      	ldr	r0, [sp, #4]
    if(id < 0) {
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	db21      	blt.n	8009744 <_lv_style_list_get_int+0x150>
    prop_p[1] = style->map[idx + 1];
 8009700:	18d6      	adds	r6, r2, r3
    prop_p[0] = style->map[idx];
 8009702:	5cd1      	ldrb	r1, [r2, r3]
        _lv_memcpy_small(res, &style->map[id + sizeof(lv_style_property_t)], sizeof(lv_style_int_t));
 8009704:	3302      	adds	r3, #2
    prop_p[1] = style->map[idx + 1];
 8009706:	7875      	ldrb	r5, [r6, #1]
    prop_p[0] = style->map[idx];
 8009708:	f88d 1036 	strb.w	r1, [sp, #54]	; 0x36
        _lv_memcpy_small(res, &style->map[id + sizeof(lv_style_property_t)], sizeof(lv_style_int_t));
 800970c:	18d1      	adds	r1, r2, r3
    prop_p[1] = style->map[idx + 1];
 800970e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
    return prop;
 8009712:	f8bd 5036 	ldrh.w	r5, [sp, #54]	; 0x36
        *d8 = *s8;
 8009716:	7849      	ldrb	r1, [r1, #1]
        return LV_STYLE_ATTR_GET_STATE(attr_act) & LV_STYLE_ATTR_GET_STATE(attr_goal);
 8009718:	ea0a 2515 	and.w	r5, sl, r5, lsr #8
 800971c:	5cd3      	ldrb	r3, [r2, r3]
 800971e:	f88d 1035 	strb.w	r1, [sp, #53]	; 0x35
 8009722:	f005 057f 	and.w	r5, r5, #127	; 0x7f
 8009726:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
        if(weight_act == weight_goal) {
 800972a:	45aa      	cmp	sl, r5
 800972c:	d01c      	beq.n	8009768 <_lv_style_list_get_int+0x174>
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
 800972e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009730:	2b00      	cmp	r3, #0
 8009732:	db13      	blt.n	800975c <_lv_style_list_get_int+0x168>
        else if(weight_act > weight) {
 8009734:	9b02      	ldr	r3, [sp, #8]
 8009736:	429d      	cmp	r5, r3
 8009738:	dd04      	ble.n	8009744 <_lv_style_list_get_int+0x150>
            *res = value_act;
 800973a:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 800973e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009740:	9502      	str	r5, [sp, #8]
 8009742:	8013      	strh	r3, [r2, #0]
    for(ci = 0; ci < list->style_cnt; ci++) {
 8009744:	3401      	adds	r4, #1
 8009746:	b224      	sxth	r4, r4
 8009748:	4284      	cmp	r4, r0
 800974a:	f6ff af7c 	blt.w	8009646 <_lv_style_list_get_int+0x52>
 800974e:	9b02      	ldr	r3, [sp, #8]
 8009750:	43d8      	mvns	r0, r3
 8009752:	f3c0 30c0 	ubfx	r0, r0, #15, #1
}
 8009756:	b00f      	add	sp, #60	; 0x3c
 8009758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
 800975c:	2c00      	cmp	r4, #0
 800975e:	d1e9      	bne.n	8009734 <_lv_style_list_get_int+0x140>
 8009760:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009762:	795b      	ldrb	r3, [r3, #5]
 8009764:	07db      	lsls	r3, r3, #31
 8009766:	d4e5      	bmi.n	8009734 <_lv_style_list_get_int+0x140>
            *res = value_act;
 8009768:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
            return LV_RES_OK;
 800976c:	2001      	movs	r0, #1
            *res = value_act;
 800976e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009770:	8013      	strh	r3, [r2, #0]
}
 8009772:	b00f      	add	sp, #60	; 0x3c
 8009774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009778:	9801      	ldr	r0, [sp, #4]
                return i;
 800977a:	462b      	mov	r3, r5
 800977c:	e7be      	b.n	80096fc <_lv_style_list_get_int+0x108>
 800977e:	4618      	mov	r0, r3
}
 8009780:	b00f      	add	sp, #60	; 0x3c
 8009782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009786:	bf00      	nop

08009788 <_lv_style_list_get_color>:
{
 8009788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800978c:	b08f      	sub	sp, #60	; 0x3c
    if(list == NULL) return LV_RES_INV;
 800978e:	4604      	mov	r4, r0
{
 8009790:	9105      	str	r1, [sp, #20]
 8009792:	e9cd 200a 	strd	r2, r0, [sp, #40]	; 0x28
    if(list == NULL) return LV_RES_INV;
 8009796:	2800      	cmp	r0, #0
 8009798:	f000 809c 	beq.w	80098d4 <_lv_style_list_get_color+0x14c>
    if(list->style_list == NULL) return LV_RES_INV;
 800979c:	6803      	ldr	r3, [r0, #0]
 800979e:	9308      	str	r3, [sp, #32]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	f000 80a9 	beq.w	80098f8 <_lv_style_list_get_color+0x170>
    for(ci = 0; ci < list->style_cnt; ci++) {
 80097a6:	7903      	ldrb	r3, [r0, #4]
    attr = prop >> 8;
 80097a8:	0a0a      	lsrs	r2, r1, #8
    for(ci = 0; ci < list->style_cnt; ci++) {
 80097aa:	f013 003f 	ands.w	r0, r3, #63	; 0x3f
    int16_t weight_goal = attr;
 80097ae:	4692      	mov	sl, r2
    for(ci = 0; ci < list->style_cnt; ci++) {
 80097b0:	f000 8090 	beq.w	80098d4 <_lv_style_list_get_color+0x14c>
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
 80097b4:	f002 017f 	and.w	r1, r2, #127	; 0x7f
 80097b8:	88a4      	ldrh	r4, [r4, #4]
    attr = (prop >> 8) & 0xFF;
 80097ba:	b2d2      	uxtb	r2, r2
    for(ci = 0; ci < list->style_cnt; ci++) {
 80097bc:	2500      	movs	r5, #0
 80097be:	b25b      	sxtb	r3, r3
 80097c0:	9006      	str	r0, [sp, #24]
    attr = (prop >> 8) & 0xFF;
 80097c2:	9203      	str	r2, [sp, #12]
 80097c4:	f404 72c0 	and.w	r2, r4, #384	; 0x180
 80097c8:	9309      	str	r3, [sp, #36]	; 0x24
    int16_t weight = -1;
 80097ca:	f04f 33ff 	mov.w	r3, #4294967295
 80097ce:	9207      	str	r2, [sp, #28]
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
 80097d0:	43ca      	mvns	r2, r1
    int16_t weight = -1;
 80097d2:	9302      	str	r3, [sp, #8]
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
 80097d4:	9204      	str	r2, [sp, #16]
    if(list->has_trans && list->skip_trans) id++;
 80097d6:	9a07      	ldr	r2, [sp, #28]
 80097d8:	b2eb      	uxtb	r3, r5
 80097da:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
 80097de:	d101      	bne.n	80097e4 <_lv_style_list_get_color+0x5c>
 80097e0:	3301      	adds	r3, #1
 80097e2:	b2db      	uxtb	r3, r3
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
 80097e4:	9a06      	ldr	r2, [sp, #24]
 80097e6:	2a00      	cmp	r2, #0
 80097e8:	d06c      	beq.n	80098c4 <_lv_style_list_get_color+0x13c>
 80097ea:	4298      	cmp	r0, r3
 80097ec:	d96a      	bls.n	80098c4 <_lv_style_list_get_color+0x13c>
    return list->style_list[id];
 80097ee:	9a08      	ldr	r2, [sp, #32]
 80097f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    if(style == NULL) return -1;
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d065      	beq.n	80098c4 <_lv_style_list_get_color+0x13c>
    if(style->map == NULL) return -1;
 80097f8:	681a      	ldr	r2, [r3, #0]
 80097fa:	2a00      	cmp	r2, #0
 80097fc:	d062      	beq.n	80098c4 <_lv_style_list_get_color+0x13c>
    prop_p[0] = style->map[idx];
 80097fe:	7813      	ldrb	r3, [r2, #0]
    prop_p[1] = style->map[idx + 1];
 8009800:	f892 8001 	ldrb.w	r8, [r2, #1]
    return get_style_prop(style, idx) & 0xFF;
 8009804:	b2de      	uxtb	r6, r3
    uint8_t id_to_find = prop & 0xFF;
 8009806:	f89d b014 	ldrb.w	fp, [sp, #20]
    prop_p[0] = style->map[idx];
 800980a:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
 800980e:	2eff      	cmp	r6, #255	; 0xff
    prop_p[1] = style->map[idx + 1];
 8009810:	f88d 8037 	strb.w	r8, [sp, #55]	; 0x37
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
 8009814:	d056      	beq.n	80098c4 <_lv_style_list_get_color+0x13c>
    int16_t id_guess = -1;
 8009816:	f04f 31ff 	mov.w	r1, #4294967295
    size_t i = 0;
 800981a:	2400      	movs	r4, #0
    int16_t weight = -1;
 800981c:	9001      	str	r0, [sp, #4]
 800981e:	468c      	mov	ip, r1
 8009820:	e012      	b.n	8009848 <_lv_style_list_get_color+0xc0>
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
 8009822:	2f08      	cmp	r7, #8
 8009824:	d904      	bls.n	8009830 <_lv_style_list_get_color+0xa8>
    else size += sizeof(const void *);
 8009826:	f1be 0f01 	cmp.w	lr, #1
 800982a:	bf94      	ite	ls
 800982c:	2603      	movls	r6, #3
 800982e:	2606      	movhi	r6, #6
    return idx + get_prop_size(prop_id);
 8009830:	4434      	add	r4, r6
    prop_p[0] = style->map[idx];
 8009832:	5d13      	ldrb	r3, [r2, r4]
    prop_p[1] = style->map[idx + 1];
 8009834:	1916      	adds	r6, r2, r4
 8009836:	f896 8001 	ldrb.w	r8, [r6, #1]
    return get_style_prop(style, idx) & 0xFF;
 800983a:	b2de      	uxtb	r6, r3
    prop_p[0] = style->map[idx];
 800983c:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
 8009840:	2eff      	cmp	r6, #255	; 0xff
    prop_p[1] = style->map[idx + 1];
 8009842:	f88d 8037 	strb.w	r8, [sp, #55]	; 0x37
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
 8009846:	d020      	beq.n	800988a <_lv_style_list_get_color+0x102>
    prop_id &= 0xF;
 8009848:	f006 070f 	and.w	r7, r6, #15
        if(prop_id == id_to_find) {
 800984c:	455e      	cmp	r6, fp
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
 800984e:	f04f 0604 	mov.w	r6, #4
    else if(prop_id < LV_STYLE_ID_PTR) size += sizeof(lv_opa_t);
 8009852:	f1a7 0e0c 	sub.w	lr, r7, #12
        if(prop_id == id_to_find) {
 8009856:	d1e4      	bne.n	8009822 <_lv_style_list_get_color+0x9a>
    prop_p[1] = style->map[idx + 1];
 8009858:	f88d 8037 	strb.w	r8, [sp, #55]	; 0x37
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
 800985c:	9803      	ldr	r0, [sp, #12]
    prop_p[0] = style->map[idx];
 800985e:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
    return prop;
 8009862:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
 8009866:	ea80 2913 	eor.w	r9, r0, r3, lsr #8
    return ((get_style_prop(style, idx) >> 8) & 0xFFU);
 800986a:	ea4f 2813 	mov.w	r8, r3, lsr #8
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
 800986e:	f019 0f7f 	tst.w	r9, #127	; 0x7f
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
 8009872:	f008 037f 	and.w	r3, r8, #127	; 0x7f
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
 8009876:	d03c      	beq.n	80098f2 <_lv_style_list_get_color+0x16a>
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
 8009878:	9804      	ldr	r0, [sp, #16]
 800987a:	4218      	tst	r0, r3
 800987c:	d1d1      	bne.n	8009822 <_lv_style_list_get_color+0x9a>
                if(LV_STYLE_ATTR_GET_STATE(attr_i) > weight) {
 800987e:	4563      	cmp	r3, ip
 8009880:	ddcf      	ble.n	8009822 <_lv_style_list_get_color+0x9a>
                    weight = LV_STYLE_ATTR_GET_STATE(attr_i);
 8009882:	f008 0c7f 	and.w	ip, r8, #127	; 0x7f
                    id_guess = i;
 8009886:	b221      	sxth	r1, r4
 8009888:	e7cb      	b.n	8009822 <_lv_style_list_get_color+0x9a>
 800988a:	9801      	ldr	r0, [sp, #4]
    if(id < 0) {
 800988c:	2900      	cmp	r1, #0
 800988e:	db19      	blt.n	80098c4 <_lv_style_list_get_color+0x13c>
 8009890:	1854      	adds	r4, r2, r1
    prop_p[0] = style->map[idx];
 8009892:	5c52      	ldrb	r2, [r2, r1]
    prop_p[1] = style->map[idx + 1];
 8009894:	7863      	ldrb	r3, [r4, #1]
    prop_p[0] = style->map[idx];
 8009896:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
    prop_p[1] = style->map[idx + 1];
 800989a:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    return prop;
 800989e:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 80098a2:	f8d4 2002 	ldr.w	r2, [r4, #2]
        return LV_STYLE_ATTR_GET_STATE(attr_act) & LV_STYLE_ATTR_GET_STATE(attr_goal);
 80098a6:	ea0a 2313 	and.w	r3, sl, r3, lsr #8
 80098aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
        if(weight_act == weight_goal) {
 80098ae:	459a      	cmp	sl, r3
 80098b0:	d019      	beq.n	80098e6 <_lv_style_list_get_color+0x15e>
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
 80098b2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80098b4:	2900      	cmp	r1, #0
 80098b6:	db10      	blt.n	80098da <_lv_style_list_get_color+0x152>
        else if(weight_act > weight) {
 80098b8:	9902      	ldr	r1, [sp, #8]
 80098ba:	428b      	cmp	r3, r1
 80098bc:	dd02      	ble.n	80098c4 <_lv_style_list_get_color+0x13c>
            *res = value_act;
 80098be:	9302      	str	r3, [sp, #8]
 80098c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098c2:	601a      	str	r2, [r3, #0]
    for(ci = 0; ci < list->style_cnt; ci++) {
 80098c4:	3501      	adds	r5, #1
 80098c6:	b22d      	sxth	r5, r5
 80098c8:	4285      	cmp	r5, r0
 80098ca:	db84      	blt.n	80097d6 <_lv_style_list_get_color+0x4e>
 80098cc:	9b02      	ldr	r3, [sp, #8]
 80098ce:	43d8      	mvns	r0, r3
 80098d0:	f3c0 30c0 	ubfx	r0, r0, #15, #1
}
 80098d4:	b00f      	add	sp, #60	; 0x3c
 80098d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
 80098da:	2d00      	cmp	r5, #0
 80098dc:	d1ec      	bne.n	80098b8 <_lv_style_list_get_color+0x130>
 80098de:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80098e0:	7949      	ldrb	r1, [r1, #5]
 80098e2:	07c9      	lsls	r1, r1, #31
 80098e4:	d4e8      	bmi.n	80098b8 <_lv_style_list_get_color+0x130>
            *res = value_act;
 80098e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
            return LV_RES_OK;
 80098e8:	2001      	movs	r0, #1
            *res = value_act;
 80098ea:	601a      	str	r2, [r3, #0]
}
 80098ec:	b00f      	add	sp, #60	; 0x3c
 80098ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098f2:	9801      	ldr	r0, [sp, #4]
                return i;
 80098f4:	4621      	mov	r1, r4
 80098f6:	e7c9      	b.n	800988c <_lv_style_list_get_color+0x104>
 80098f8:	4618      	mov	r0, r3
}
 80098fa:	b00f      	add	sp, #60	; 0x3c
 80098fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009900 <_lv_style_list_get_opa>:
{
 8009900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009904:	b08b      	sub	sp, #44	; 0x2c
 8009906:	9104      	str	r1, [sp, #16]
 8009908:	9206      	str	r2, [sp, #24]
    if(list == NULL) return LV_RES_INV;
 800990a:	2800      	cmp	r0, #0
 800990c:	f000 8085 	beq.w	8009a1a <_lv_style_list_get_opa+0x11a>
    if(list->style_list == NULL) return LV_RES_INV;
 8009910:	6803      	ldr	r3, [r0, #0]
 8009912:	2b00      	cmp	r3, #0
 8009914:	f000 809e 	beq.w	8009a54 <_lv_style_list_get_opa+0x154>
    for(ci = 0; ci < list->style_cnt; ci++) {
 8009918:	f890 e004 	ldrb.w	lr, [r0, #4]
    attr = prop >> 8;
 800991c:	0a0b      	lsrs	r3, r1, #8
    for(ci = 0; ci < list->style_cnt; ci++) {
 800991e:	f01e 013f 	ands.w	r1, lr, #63	; 0x3f
    int16_t weight_goal = attr;
 8009922:	9307      	str	r3, [sp, #28]
    for(ci = 0; ci < list->style_cnt; ci++) {
 8009924:	f000 809a 	beq.w	8009a5c <_lv_style_list_get_opa+0x15c>
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
 8009928:	f003 027f 	and.w	r2, r3, #127	; 0x7f
    attr = (prop >> 8) & 0xFF;
 800992c:	b2db      	uxtb	r3, r3
    for(ci = 0; ci < list->style_cnt; ci++) {
 800992e:	2500      	movs	r5, #0
    attr = (prop >> 8) & 0xFF;
 8009930:	9302      	str	r3, [sp, #8]
    int16_t weight = -1;
 8009932:	f04f 33ff 	mov.w	r3, #4294967295
 8009936:	9305      	str	r3, [sp, #20]
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
 8009938:	43d3      	mvns	r3, r2
 800993a:	9303      	str	r3, [sp, #12]
 800993c:	8883      	ldrh	r3, [r0, #4]
 800993e:	f8ad 3004 	strh.w	r3, [sp, #4]
    if(list->has_trans && list->skip_trans) id++;
 8009942:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8009946:	b2ea      	uxtb	r2, r5
 8009948:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800994c:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8009950:	d101      	bne.n	8009956 <_lv_style_list_get_opa+0x56>
 8009952:	3201      	adds	r2, #1
 8009954:	b2d2      	uxtb	r2, r2
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
 8009956:	f01e 0f3f 	tst.w	lr, #63	; 0x3f
 800995a:	d054      	beq.n	8009a06 <_lv_style_list_get_opa+0x106>
 800995c:	4291      	cmp	r1, r2
 800995e:	d952      	bls.n	8009a06 <_lv_style_list_get_opa+0x106>
    return list->style_list[id];
 8009960:	6803      	ldr	r3, [r0, #0]
 8009962:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    if(style == NULL) return -1;
 8009966:	2b00      	cmp	r3, #0
 8009968:	d04d      	beq.n	8009a06 <_lv_style_list_get_opa+0x106>
    if(style->map == NULL) return -1;
 800996a:	681a      	ldr	r2, [r3, #0]
 800996c:	2a00      	cmp	r2, #0
 800996e:	d04a      	beq.n	8009a06 <_lv_style_list_get_opa+0x106>
    prop_p[0] = style->map[idx];
 8009970:	f892 9000 	ldrb.w	r9, [r2]
    prop_p[1] = style->map[idx + 1];
 8009974:	7853      	ldrb	r3, [r2, #1]
    return get_style_prop(style, idx) & 0xFF;
 8009976:	fa5f f689 	uxtb.w	r6, r9
    uint8_t id_to_find = prop & 0xFF;
 800997a:	f89d b010 	ldrb.w	fp, [sp, #16]
    prop_p[0] = style->map[idx];
 800997e:	f88d 9026 	strb.w	r9, [sp, #38]	; 0x26
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
 8009982:	2eff      	cmp	r6, #255	; 0xff
    prop_p[1] = style->map[idx + 1];
 8009984:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
 8009988:	d03d      	beq.n	8009a06 <_lv_style_list_get_opa+0x106>
    int16_t id_guess = -1;
 800998a:	f04f 34ff 	mov.w	r4, #4294967295
    size_t i = 0;
 800998e:	2100      	movs	r1, #0
    int16_t weight = -1;
 8009990:	9000      	str	r0, [sp, #0]
 8009992:	46a4      	mov	ip, r4
 8009994:	e013      	b.n	80099be <_lv_style_list_get_opa+0xbe>
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
 8009996:	2f08      	cmp	r7, #8
 8009998:	d904      	bls.n	80099a4 <_lv_style_list_get_opa+0xa4>
    else size += sizeof(const void *);
 800999a:	f1b8 0f01 	cmp.w	r8, #1
 800999e:	bf94      	ite	ls
 80099a0:	2603      	movls	r6, #3
 80099a2:	2606      	movhi	r6, #6
    return idx + get_prop_size(prop_id);
 80099a4:	4431      	add	r1, r6
    prop_p[0] = style->map[idx];
 80099a6:	f812 9001 	ldrb.w	r9, [r2, r1]
    prop_p[1] = style->map[idx + 1];
 80099aa:	1853      	adds	r3, r2, r1
    return get_style_prop(style, idx) & 0xFF;
 80099ac:	fa5f f689 	uxtb.w	r6, r9
    prop_p[1] = style->map[idx + 1];
 80099b0:	785b      	ldrb	r3, [r3, #1]
    prop_p[0] = style->map[idx];
 80099b2:	f88d 9026 	strb.w	r9, [sp, #38]	; 0x26
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
 80099b6:	2eff      	cmp	r6, #255	; 0xff
    prop_p[1] = style->map[idx + 1];
 80099b8:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
 80099bc:	d020      	beq.n	8009a00 <_lv_style_list_get_opa+0x100>
    prop_id &= 0xF;
 80099be:	f006 070f 	and.w	r7, r6, #15
        if(prop_id == id_to_find) {
 80099c2:	455e      	cmp	r6, fp
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
 80099c4:	f04f 0604 	mov.w	r6, #4
    else if(prop_id < LV_STYLE_ID_PTR) size += sizeof(lv_opa_t);
 80099c8:	f1a7 080c 	sub.w	r8, r7, #12
        if(prop_id == id_to_find) {
 80099cc:	d1e3      	bne.n	8009996 <_lv_style_list_get_opa+0x96>
    prop_p[0] = style->map[idx];
 80099ce:	f88d 9026 	strb.w	r9, [sp, #38]	; 0x26
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
 80099d2:	9802      	ldr	r0, [sp, #8]
    prop_p[1] = style->map[idx + 1];
 80099d4:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    return prop;
 80099d8:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
 80099dc:	ea80 2a13 	eor.w	sl, r0, r3, lsr #8
    return ((get_style_prop(style, idx) >> 8) & 0xFFU);
 80099e0:	ea4f 2913 	mov.w	r9, r3, lsr #8
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
 80099e4:	f01a 0f7f 	tst.w	sl, #127	; 0x7f
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
 80099e8:	f009 037f 	and.w	r3, r9, #127	; 0x7f
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
 80099ec:	d02f      	beq.n	8009a4e <_lv_style_list_get_opa+0x14e>
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
 80099ee:	9803      	ldr	r0, [sp, #12]
 80099f0:	4218      	tst	r0, r3
 80099f2:	d1d0      	bne.n	8009996 <_lv_style_list_get_opa+0x96>
                if(LV_STYLE_ATTR_GET_STATE(attr_i) > weight) {
 80099f4:	4563      	cmp	r3, ip
 80099f6:	ddce      	ble.n	8009996 <_lv_style_list_get_opa+0x96>
                    weight = LV_STYLE_ATTR_GET_STATE(attr_i);
 80099f8:	f009 0c7f 	and.w	ip, r9, #127	; 0x7f
                    id_guess = i;
 80099fc:	b20c      	sxth	r4, r1
 80099fe:	e7ca      	b.n	8009996 <_lv_style_list_get_opa+0x96>
 8009a00:	9800      	ldr	r0, [sp, #0]
    if(id < 0) {
 8009a02:	2c00      	cmp	r4, #0
 8009a04:	da0c      	bge.n	8009a20 <_lv_style_list_get_opa+0x120>
    for(ci = 0; ci < list->style_cnt; ci++) {
 8009a06:	3501      	adds	r5, #1
 8009a08:	f00e 013f 	and.w	r1, lr, #63	; 0x3f
 8009a0c:	b22d      	sxth	r5, r5
 8009a0e:	428d      	cmp	r5, r1
 8009a10:	db97      	blt.n	8009942 <_lv_style_list_get_opa+0x42>
 8009a12:	9b05      	ldr	r3, [sp, #20]
 8009a14:	43d8      	mvns	r0, r3
 8009a16:	f3c0 30c0 	ubfx	r0, r0, #15, #1
}
 8009a1a:	b00b      	add	sp, #44	; 0x2c
 8009a1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a20:	1911      	adds	r1, r2, r4
    prop_p[0] = style->map[idx];
 8009a22:	5d12      	ldrb	r2, [r2, r4]
    prop_p[1] = style->map[idx + 1];
 8009a24:	784b      	ldrb	r3, [r1, #1]
    prop_p[0] = style->map[idx];
 8009a26:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
    prop_p[1] = style->map[idx + 1];
 8009a2a:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
 8009a2e:	788a      	ldrb	r2, [r1, #2]
    return prop;
 8009a30:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
        return LV_STYLE_ATTR_GET_STATE(attr_act) & LV_STYLE_ATTR_GET_STATE(attr_goal);
 8009a34:	9907      	ldr	r1, [sp, #28]
 8009a36:	ea01 2313 	and.w	r3, r1, r3, lsr #8
 8009a3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
        if(weight_act == weight_goal) {
 8009a3e:	4299      	cmp	r1, r3
 8009a40:	d10e      	bne.n	8009a60 <_lv_style_list_get_opa+0x160>
            *res = value_act;
 8009a42:	9b06      	ldr	r3, [sp, #24]
            return LV_RES_OK;
 8009a44:	2001      	movs	r0, #1
            *res = value_act;
 8009a46:	701a      	strb	r2, [r3, #0]
}
 8009a48:	b00b      	add	sp, #44	; 0x2c
 8009a4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a4e:	9800      	ldr	r0, [sp, #0]
                return i;
 8009a50:	460c      	mov	r4, r1
 8009a52:	e7d6      	b.n	8009a02 <_lv_style_list_get_opa+0x102>
    if(list == NULL) return LV_RES_INV;
 8009a54:	4618      	mov	r0, r3
}
 8009a56:	b00b      	add	sp, #44	; 0x2c
 8009a58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for(ci = 0; ci < list->style_cnt; ci++) {
 8009a5c:	4608      	mov	r0, r1
    if(weight >= 0)  return LV_RES_OK;
 8009a5e:	e7dc      	b.n	8009a1a <_lv_style_list_get_opa+0x11a>
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
 8009a60:	f01e 0f80 	tst.w	lr, #128	; 0x80
 8009a64:	d111      	bne.n	8009a8a <_lv_style_list_get_opa+0x18a>
        else if(weight_act > weight) {
 8009a66:	9905      	ldr	r1, [sp, #20]
 8009a68:	4299      	cmp	r1, r3
 8009a6a:	dacc      	bge.n	8009a06 <_lv_style_list_get_opa+0x106>
            *res = value_act;
 8009a6c:	9906      	ldr	r1, [sp, #24]
 8009a6e:	3501      	adds	r5, #1
 8009a70:	700a      	strb	r2, [r1, #0]
    for(ci = 0; ci < list->style_cnt; ci++) {
 8009a72:	b22d      	sxth	r5, r5
 8009a74:	f890 e004 	ldrb.w	lr, [r0, #4]
 8009a78:	f00e 013f 	and.w	r1, lr, #63	; 0x3f
 8009a7c:	42a9      	cmp	r1, r5
 8009a7e:	ddc9      	ble.n	8009a14 <_lv_style_list_get_opa+0x114>
 8009a80:	9305      	str	r3, [sp, #20]
 8009a82:	8883      	ldrh	r3, [r0, #4]
 8009a84:	f8ad 3004 	strh.w	r3, [sp, #4]
 8009a88:	e75b      	b.n	8009942 <_lv_style_list_get_opa+0x42>
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
 8009a8a:	2d00      	cmp	r5, #0
 8009a8c:	d1eb      	bne.n	8009a66 <_lv_style_list_get_opa+0x166>
 8009a8e:	7941      	ldrb	r1, [r0, #5]
 8009a90:	07c9      	lsls	r1, r1, #31
 8009a92:	d4e8      	bmi.n	8009a66 <_lv_style_list_get_opa+0x166>
 8009a94:	e7d5      	b.n	8009a42 <_lv_style_list_get_opa+0x142>
 8009a96:	bf00      	nop

08009a98 <_lv_style_list_get_ptr>:
{
 8009a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a9c:	b08b      	sub	sp, #44	; 0x2c
 8009a9e:	9100      	str	r1, [sp, #0]
 8009aa0:	e9cd 1206 	strd	r1, r2, [sp, #24]
    if(list == NULL) return LV_RES_INV;
 8009aa4:	2800      	cmp	r0, #0
 8009aa6:	f000 80ab 	beq.w	8009c00 <_lv_style_list_get_ptr+0x168>
    if(list->style_list == NULL) return LV_RES_INV;
 8009aaa:	6802      	ldr	r2, [r0, #0]
 8009aac:	2a00      	cmp	r2, #0
 8009aae:	f000 80b9 	beq.w	8009c24 <_lv_style_list_get_ptr+0x18c>
    for(ci = 0; ci < list->style_cnt; ci++) {
 8009ab2:	7906      	ldrb	r6, [r0, #4]
    attr = prop >> 8;
 8009ab4:	0a0b      	lsrs	r3, r1, #8
    for(ci = 0; ci < list->style_cnt; ci++) {
 8009ab6:	f016 013f 	ands.w	r1, r6, #63	; 0x3f
    int16_t weight_goal = attr;
 8009aba:	469b      	mov	fp, r3
    for(ci = 0; ci < list->style_cnt; ci++) {
 8009abc:	f000 80b6 	beq.w	8009c2c <_lv_style_list_get_ptr+0x194>
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
 8009ac0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
    attr = (prop >> 8) & 0xFF;
 8009ac4:	b2db      	uxtb	r3, r3
    for(ci = 0; ci < list->style_cnt; ci++) {
 8009ac6:	2500      	movs	r5, #0
    attr = (prop >> 8) & 0xFF;
 8009ac8:	9304      	str	r3, [sp, #16]
    int16_t weight = -1;
 8009aca:	f04f 33ff 	mov.w	r3, #4294967295
 8009ace:	9303      	str	r3, [sp, #12]
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
 8009ad0:	43d3      	mvns	r3, r2
 8009ad2:	9305      	str	r3, [sp, #20]
 8009ad4:	8883      	ldrh	r3, [r0, #4]
 8009ad6:	f8ad 3008 	strh.w	r3, [sp, #8]
    if(list->has_trans && list->skip_trans) id++;
 8009ada:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8009ade:	b2ea      	uxtb	r2, r5
 8009ae0:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8009ae4:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8009ae8:	d101      	bne.n	8009aee <_lv_style_list_get_ptr+0x56>
 8009aea:	3201      	adds	r2, #1
 8009aec:	b2d2      	uxtb	r2, r2
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
 8009aee:	06b4      	lsls	r4, r6, #26
 8009af0:	d07b      	beq.n	8009bea <_lv_style_list_get_ptr+0x152>
 8009af2:	4291      	cmp	r1, r2
 8009af4:	d979      	bls.n	8009bea <_lv_style_list_get_ptr+0x152>
    return list->style_list[id];
 8009af6:	6803      	ldr	r3, [r0, #0]
 8009af8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    if(style == NULL) return -1;
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d074      	beq.n	8009bea <_lv_style_list_get_ptr+0x152>
    if(style->map == NULL) return -1;
 8009b00:	681a      	ldr	r2, [r3, #0]
 8009b02:	2a00      	cmp	r2, #0
 8009b04:	d071      	beq.n	8009bea <_lv_style_list_get_ptr+0x152>
    prop_p[0] = style->map[idx];
 8009b06:	7813      	ldrb	r3, [r2, #0]
    uint8_t id_to_find = prop & 0xFF;
 8009b08:	f89d 1018 	ldrb.w	r1, [sp, #24]
    return get_style_prop(style, idx) & 0xFF;
 8009b0c:	b2df      	uxtb	r7, r3
    prop_p[1] = style->map[idx + 1];
 8009b0e:	f892 9001 	ldrb.w	r9, [r2, #1]
    uint8_t id_to_find = prop & 0xFF;
 8009b12:	9100      	str	r1, [sp, #0]
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
 8009b14:	2fff      	cmp	r7, #255	; 0xff
    prop_p[0] = style->map[idx];
 8009b16:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    prop_p[1] = style->map[idx + 1];
 8009b1a:	f88d 9023 	strb.w	r9, [sp, #35]	; 0x23
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
 8009b1e:	d064      	beq.n	8009bea <_lv_style_list_get_ptr+0x152>
    int16_t id_guess = -1;
 8009b20:	f04f 31ff 	mov.w	r1, #4294967295
    size_t i = 0;
 8009b24:	2400      	movs	r4, #0
    int16_t weight = -1;
 8009b26:	9001      	str	r0, [sp, #4]
 8009b28:	468e      	mov	lr, r1
 8009b2a:	e013      	b.n	8009b54 <_lv_style_list_get_ptr+0xbc>
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
 8009b2c:	f1bc 0f08 	cmp.w	ip, #8
 8009b30:	d904      	bls.n	8009b3c <_lv_style_list_get_ptr+0xa4>
    else size += sizeof(const void *);
 8009b32:	f1b8 0f01 	cmp.w	r8, #1
 8009b36:	bf94      	ite	ls
 8009b38:	2703      	movls	r7, #3
 8009b3a:	2706      	movhi	r7, #6
    return idx + get_prop_size(prop_id);
 8009b3c:	443c      	add	r4, r7
    prop_p[0] = style->map[idx];
 8009b3e:	5d13      	ldrb	r3, [r2, r4]
    prop_p[1] = style->map[idx + 1];
 8009b40:	1917      	adds	r7, r2, r4
 8009b42:	f897 9001 	ldrb.w	r9, [r7, #1]
    return get_style_prop(style, idx) & 0xFF;
 8009b46:	b2df      	uxtb	r7, r3
    prop_p[0] = style->map[idx];
 8009b48:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
 8009b4c:	2fff      	cmp	r7, #255	; 0xff
    prop_p[1] = style->map[idx + 1];
 8009b4e:	f88d 9023 	strb.w	r9, [sp, #35]	; 0x23
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
 8009b52:	d021      	beq.n	8009b98 <_lv_style_list_get_ptr+0x100>
        if(prop_id == id_to_find) {
 8009b54:	9800      	ldr	r0, [sp, #0]
    prop_id &= 0xF;
 8009b56:	f007 0c0f 	and.w	ip, r7, #15
        if(prop_id == id_to_find) {
 8009b5a:	4287      	cmp	r7, r0
    else if(prop_id < LV_STYLE_ID_PTR) size += sizeof(lv_opa_t);
 8009b5c:	f1ac 080c 	sub.w	r8, ip, #12
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
 8009b60:	f04f 0704 	mov.w	r7, #4
        if(prop_id == id_to_find) {
 8009b64:	d1e2      	bne.n	8009b2c <_lv_style_list_get_ptr+0x94>
    prop_p[1] = style->map[idx + 1];
 8009b66:	f88d 9023 	strb.w	r9, [sp, #35]	; 0x23
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
 8009b6a:	9804      	ldr	r0, [sp, #16]
    prop_p[0] = style->map[idx];
 8009b6c:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    return prop;
 8009b70:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
 8009b74:	ea80 2913 	eor.w	r9, r0, r3, lsr #8
    return ((get_style_prop(style, idx) >> 8) & 0xFFU);
 8009b78:	ea4f 2a13 	mov.w	sl, r3, lsr #8
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
 8009b7c:	f019 0f7f 	tst.w	r9, #127	; 0x7f
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
 8009b80:	f00a 037f 	and.w	r3, sl, #127	; 0x7f
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
 8009b84:	d04b      	beq.n	8009c1e <_lv_style_list_get_ptr+0x186>
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
 8009b86:	9805      	ldr	r0, [sp, #20]
 8009b88:	4218      	tst	r0, r3
 8009b8a:	d1cf      	bne.n	8009b2c <_lv_style_list_get_ptr+0x94>
                if(LV_STYLE_ATTR_GET_STATE(attr_i) > weight) {
 8009b8c:	4573      	cmp	r3, lr
 8009b8e:	ddcd      	ble.n	8009b2c <_lv_style_list_get_ptr+0x94>
                    weight = LV_STYLE_ATTR_GET_STATE(attr_i);
 8009b90:	f00a 0e7f 	and.w	lr, sl, #127	; 0x7f
                    id_guess = i;
 8009b94:	b221      	sxth	r1, r4
 8009b96:	e7c9      	b.n	8009b2c <_lv_style_list_get_ptr+0x94>
 8009b98:	9801      	ldr	r0, [sp, #4]
    if(id < 0) {
 8009b9a:	2900      	cmp	r1, #0
 8009b9c:	db25      	blt.n	8009bea <_lv_style_list_get_ptr+0x152>
 8009b9e:	1853      	adds	r3, r2, r1
    prop_p[0] = style->map[idx];
 8009ba0:	5c51      	ldrb	r1, [r2, r1]
    prop_p[1] = style->map[idx + 1];
 8009ba2:	785a      	ldrb	r2, [r3, #1]
    prop_p[0] = style->map[idx];
 8009ba4:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
    prop_p[1] = style->map[idx + 1];
 8009ba8:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
    return prop;
 8009bac:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 8009bb0:	f8d3 3002 	ldr.w	r3, [r3, #2]
        return LV_STYLE_ATTR_GET_STATE(attr_act) & LV_STYLE_ATTR_GET_STATE(attr_goal);
 8009bb4:	ea0b 2212 	and.w	r2, fp, r2, lsr #8
 8009bb8:	9309      	str	r3, [sp, #36]	; 0x24
 8009bba:	f002 027f 	and.w	r2, r2, #127	; 0x7f
        if(weight_act == weight_goal) {
 8009bbe:	4593      	cmp	fp, r2
 8009bc0:	d026      	beq.n	8009c10 <_lv_style_list_get_ptr+0x178>
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
 8009bc2:	0631      	lsls	r1, r6, #24
 8009bc4:	d41f      	bmi.n	8009c06 <_lv_style_list_get_ptr+0x16e>
        else if(weight_act > weight) {
 8009bc6:	9b03      	ldr	r3, [sp, #12]
 8009bc8:	429a      	cmp	r2, r3
 8009bca:	dd0e      	ble.n	8009bea <_lv_style_list_get_ptr+0x152>
            *res = value_act;
 8009bcc:	9907      	ldr	r1, [sp, #28]
 8009bce:	3501      	adds	r5, #1
 8009bd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bd2:	b22d      	sxth	r5, r5
 8009bd4:	600b      	str	r3, [r1, #0]
    for(ci = 0; ci < list->style_cnt; ci++) {
 8009bd6:	7906      	ldrb	r6, [r0, #4]
 8009bd8:	f006 013f 	and.w	r1, r6, #63	; 0x3f
 8009bdc:	42a9      	cmp	r1, r5
 8009bde:	dd0c      	ble.n	8009bfa <_lv_style_list_get_ptr+0x162>
 8009be0:	8883      	ldrh	r3, [r0, #4]
 8009be2:	9203      	str	r2, [sp, #12]
 8009be4:	f8ad 3008 	strh.w	r3, [sp, #8]
 8009be8:	e777      	b.n	8009ada <_lv_style_list_get_ptr+0x42>
 8009bea:	3501      	adds	r5, #1
 8009bec:	f006 013f 	and.w	r1, r6, #63	; 0x3f
 8009bf0:	b22d      	sxth	r5, r5
 8009bf2:	428d      	cmp	r5, r1
 8009bf4:	f6ff af71 	blt.w	8009ada <_lv_style_list_get_ptr+0x42>
 8009bf8:	9a03      	ldr	r2, [sp, #12]
 8009bfa:	43d0      	mvns	r0, r2
 8009bfc:	f3c0 30c0 	ubfx	r0, r0, #15, #1
}
 8009c00:	b00b      	add	sp, #44	; 0x2c
 8009c02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
 8009c06:	2d00      	cmp	r5, #0
 8009c08:	d1dd      	bne.n	8009bc6 <_lv_style_list_get_ptr+0x12e>
 8009c0a:	7943      	ldrb	r3, [r0, #5]
 8009c0c:	07db      	lsls	r3, r3, #31
 8009c0e:	d4da      	bmi.n	8009bc6 <_lv_style_list_get_ptr+0x12e>
            *res = value_act;
 8009c10:	9b09      	ldr	r3, [sp, #36]	; 0x24
            return LV_RES_OK;
 8009c12:	2001      	movs	r0, #1
            *res = value_act;
 8009c14:	9a07      	ldr	r2, [sp, #28]
 8009c16:	6013      	str	r3, [r2, #0]
}
 8009c18:	b00b      	add	sp, #44	; 0x2c
 8009c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c1e:	9801      	ldr	r0, [sp, #4]
                return i;
 8009c20:	4621      	mov	r1, r4
 8009c22:	e7ba      	b.n	8009b9a <_lv_style_list_get_ptr+0x102>
    if(list == NULL) return LV_RES_INV;
 8009c24:	4610      	mov	r0, r2
}
 8009c26:	b00b      	add	sp, #44	; 0x2c
 8009c28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for(ci = 0; ci < list->style_cnt; ci++) {
 8009c2c:	4608      	mov	r0, r1
    if(weight >= 0)  return LV_RES_OK;
 8009c2e:	e7e7      	b.n	8009c00 <_lv_style_list_get_ptr+0x168>

08009c30 <color_blend_true_color_additive>:
}

static inline lv_color_t color_blend_true_color_additive(lv_color_t fg, lv_color_t bg, lv_opa_t opa)
{

    if(opa <= LV_OPA_MIN) return bg;
 8009c30:	2a02      	cmp	r2, #2
 8009c32:	d939      	bls.n	8009ca8 <color_blend_true_color_additive+0x78>
    uint32_t tmp;
#if LV_COLOR_DEPTH == 1
    tmp = bg.full + fg.full;
    fg.full = LV_MATH_MIN(tmp, 1);
#else
    tmp = bg.ch.red + fg.ch.red;
 8009c34:	f3c0 4307 	ubfx	r3, r0, #16, #8
{
 8009c38:	b4f0      	push	{r4, r5, r6, r7}
    tmp = bg.ch.red + fg.ch.red;
 8009c3a:	f3c1 4607 	ubfx	r6, r1, #16, #8

#elif LV_COLOR_DEPTH == 32
    fg.ch.green = LV_MATH_MIN(tmp, 255);
#endif

    tmp = bg.ch.blue + fg.ch.blue;
 8009c3e:	b2cf      	uxtb	r7, r1
    tmp = bg.ch.red + fg.ch.red;
 8009c40:	4433      	add	r3, r6
    tmp = bg.ch.blue + fg.ch.blue;
 8009c42:	fa57 f580 	uxtab	r5, r7, r0
    fg.ch.red = LV_MATH_MIN(tmp, 255);
 8009c46:	2bff      	cmp	r3, #255	; 0xff
 8009c48:	bf28      	it	cs
 8009c4a:	23ff      	movcs	r3, #255	; 0xff
#if LV_COLOR_DEPTH == 8
    fg.ch.blue = LV_MATH_MIN(tmp, 4);
#elif LV_COLOR_DEPTH == 16
    fg.ch.blue = LV_MATH_MIN(tmp, 31);
#elif LV_COLOR_DEPTH == 32
    fg.ch.blue = LV_MATH_MIN(tmp, 255);
 8009c4c:	2dff      	cmp	r5, #255	; 0xff
 8009c4e:	bf28      	it	cs
 8009c50:	25ff      	movcs	r5, #255	; 0xff
#endif
#endif

    if(opa == LV_OPA_COVER) return fg;
 8009c52:	2aff      	cmp	r2, #255	; 0xff
 8009c54:	d02a      	beq.n	8009cac <color_blend_true_color_additive+0x7c>
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8009c56:	f1c2 0cff 	rsb	ip, r2, #255	; 0xff
 8009c5a:	fb02 f403 	mul.w	r4, r2, r3
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8009c5e:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8009c62:	2000      	movs	r0, #0
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8009c64:	fb0c f707 	mul.w	r7, ip, r7
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8009c68:	fb0c 4303 	mla	r3, ip, r3, r4
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8009c6c:	fb02 7505 	mla	r5, r2, r5, r7
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8009c70:	fb0c 4406 	mla	r4, ip, r6, r4
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8009c74:	eb03 2103 	add.w	r1, r3, r3, lsl #8
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8009c78:	eb05 2205 	add.w	r2, r5, r5, lsl #8
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8009c7c:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8009c80:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8009c84:	eb04 2204 	add.w	r2, r4, r4, lsl #8
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8009c88:	f3c3 53c7 	ubfx	r3, r3, #23, #8
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8009c8c:	0ded      	lsrs	r5, r5, #23
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8009c8e:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
 8009c92:	f365 0007 	bfi	r0, r5, #0, #8
 8009c96:	0de4      	lsrs	r4, r4, #23
 8009c98:	f363 200f 	bfi	r0, r3, #8, #8
 8009c9c:	f364 4017 	bfi	r0, r4, #16, #8

    return lv_color_mix(fg, bg, opa);
}
 8009ca0:	bcf0      	pop	{r4, r5, r6, r7}
 8009ca2:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8009ca6:	4770      	bx	lr
    if(opa <= LV_OPA_MIN) return bg;
 8009ca8:	4608      	mov	r0, r1
}
 8009caa:	4770      	bx	lr
    fg.ch.red = LV_MATH_MIN(tmp, 255);
 8009cac:	b2db      	uxtb	r3, r3
    if(opa == LV_OPA_COVER) return fg;
 8009cae:	f365 0007 	bfi	r0, r5, #0, #8
 8009cb2:	f363 200f 	bfi	r0, r3, #8, #8
}
 8009cb6:	bcf0      	pop	{r4, r5, r6, r7}
    if(opa == LV_OPA_COVER) return fg;
 8009cb8:	f363 4017 	bfi	r0, r3, #16, #8
}
 8009cbc:	4770      	bx	lr
 8009cbe:	bf00      	nop

08009cc0 <color_blend_true_color_subtractive>:

static inline lv_color_t color_blend_true_color_subtractive(lv_color_t fg, lv_color_t bg, lv_opa_t opa)
{

    if(opa <= LV_OPA_MIN) return bg;
 8009cc0:	2a02      	cmp	r2, #2
 8009cc2:	d940      	bls.n	8009d46 <color_blend_true_color_subtractive+0x86>

    int32_t tmp;
    tmp = bg.ch.red - fg.ch.red;
 8009cc4:	f3c1 4c07 	ubfx	ip, r1, #16, #8
 8009cc8:	f3c0 4307 	ubfx	r3, r0, #16, #8
#endif

    tmp = bg.ch.blue - fg.ch.blue;
    fg.ch.blue = LV_MATH_MAX(tmp, 0);

    if(opa == LV_OPA_COVER) return fg;
 8009ccc:	2aff      	cmp	r2, #255	; 0xff
    tmp = bg.ch.red - fg.ch.red;
 8009cce:	ebac 0303 	sub.w	r3, ip, r3
{
 8009cd2:	b4f0      	push	{r4, r5, r6, r7}
    tmp = bg.ch.green - fg.ch.green;
 8009cd4:	f3c1 2707 	ubfx	r7, r1, #8, #8
 8009cd8:	f3c0 2407 	ubfx	r4, r0, #8, #8
    tmp = bg.ch.blue - fg.ch.blue;
 8009cdc:	b2c9      	uxtb	r1, r1
    fg.ch.red = LV_MATH_MAX(tmp, 0);
 8009cde:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    tmp = bg.ch.blue - fg.ch.blue;
 8009ce2:	b2c5      	uxtb	r5, r0
    tmp = bg.ch.green - fg.ch.green;
 8009ce4:	eba7 0404 	sub.w	r4, r7, r4
    tmp = bg.ch.blue - fg.ch.blue;
 8009ce8:	eba1 0505 	sub.w	r5, r1, r5
    fg.ch.green = LV_MATH_MAX(tmp, 0);
 8009cec:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
    fg.ch.blue = LV_MATH_MAX(tmp, 0);
 8009cf0:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
    if(opa == LV_OPA_COVER) return fg;
 8009cf4:	d029      	beq.n	8009d4a <color_blend_true_color_subtractive+0x8a>
 8009cf6:	f1c2 06ff 	rsb	r6, r2, #255	; 0xff
#else
    /*LV_COLOR_DEPTH == 1*/
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
#endif

    return ret;
 8009cfa:	2000      	movs	r0, #0
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8009cfc:	fb06 f101 	mul.w	r1, r6, r1
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8009d00:	fb06 f707 	mul.w	r7, r6, r7
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8009d04:	fb02 1505 	mla	r5, r2, r5, r1
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8009d08:	fb02 7404 	mla	r4, r2, r4, r7
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8009d0c:	fb06 f60c 	mul.w	r6, r6, ip
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8009d10:	eb05 2705 	add.w	r7, r5, r5, lsl #8
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8009d14:	eb04 2104 	add.w	r1, r4, r4, lsl #8
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8009d18:	fb02 6303 	mla	r3, r2, r3, r6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8009d1c:	eb05 15c7 	add.w	r5, r5, r7, lsl #7
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8009d20:	eb04 14c1 	add.w	r4, r4, r1, lsl #7
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8009d24:	0ded      	lsrs	r5, r5, #23
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8009d26:	eb03 2203 	add.w	r2, r3, r3, lsl #8
 8009d2a:	f365 0007 	bfi	r0, r5, #0, #8
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8009d2e:	0de4      	lsrs	r4, r4, #23
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8009d30:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8009d34:	f364 200f 	bfi	r0, r4, #8, #8
 8009d38:	0ddb      	lsrs	r3, r3, #23
 8009d3a:	f363 4017 	bfi	r0, r3, #16, #8

    return lv_color_mix(fg, bg, opa);
}
 8009d3e:	bcf0      	pop	{r4, r5, r6, r7}
 8009d40:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8009d44:	4770      	bx	lr
    if(opa <= LV_OPA_MIN) return bg;
 8009d46:	4608      	mov	r0, r1
}
 8009d48:	4770      	bx	lr
    if(opa == LV_OPA_COVER) return fg;
 8009d4a:	f365 0007 	bfi	r0, r5, #0, #8
 8009d4e:	f364 200f 	bfi	r0, r4, #8, #8
}
 8009d52:	bcf0      	pop	{r4, r5, r6, r7}
    if(opa == LV_OPA_COVER) return fg;
 8009d54:	f363 4017 	bfi	r0, r3, #16, #8
}
 8009d58:	4770      	bx	lr
 8009d5a:	bf00      	nop

08009d5c <_lv_blend_fill>:
{
 8009d5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d60:	ed2d 8b02 	vpush	{d8}
 8009d64:	b091      	sub	sp, #68	; 0x44
 8009d66:	f89d 7070 	ldrb.w	r7, [sp, #112]	; 0x70
 8009d6a:	f89d b074 	ldrb.w	fp, [sp, #116]	; 0x74
 8009d6e:	f89d 6078 	ldrb.w	r6, [sp, #120]	; 0x78
 8009d72:	e9cd 3204 	strd	r3, r2, [sp, #16]
    if(mask_res == LV_DRAW_MASK_RES_TRANSP) return;
 8009d76:	2f00      	cmp	r7, #0
 8009d78:	f000 80bc 	beq.w	8009ef4 <_lv_blend_fill+0x198>
 8009d7c:	f1bb 0f01 	cmp.w	fp, #1
 8009d80:	f240 80b8 	bls.w	8009ef4 <_lv_blend_fill+0x198>
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 8009d84:	468a      	mov	sl, r1
 8009d86:	4604      	mov	r4, r0
 8009d88:	f7fe faf4 	bl	8008374 <_lv_refr_get_disp_refreshing>
 8009d8c:	4681      	mov	r9, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 8009d8e:	f009 fde9 	bl	8013964 <lv_disp_get_buf>
    lv_color_t * disp_buf = vdb->buf_act;
 8009d92:	6882      	ldr	r2, [r0, #8]
    if(disp->driver.gpu_wait_cb) disp->driver.gpu_wait_cb(&disp->driver);
 8009d94:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 8009d98:	4680      	mov	r8, r0
    lv_color_t * disp_buf = vdb->buf_act;
 8009d9a:	ee08 2a10 	vmov	s16, r2
    if(disp->driver.gpu_wait_cb) disp->driver.gpu_wait_cb(&disp->driver);
 8009d9e:	b10b      	cbz	r3, 8009da4 <_lv_blend_fill+0x48>
 8009da0:	4648      	mov	r0, r9
 8009da2:	4798      	blx	r3
    is_common = _lv_area_intersect(&draw_area, clip_area, fill_area);
 8009da4:	4652      	mov	r2, sl
 8009da6:	4621      	mov	r1, r4
 8009da8:	a80e      	add	r0, sp, #56	; 0x38
 8009daa:	f00a f8c9 	bl	8013f40 <_lv_area_intersect>
    if(!is_common) return;
 8009dae:	2800      	cmp	r0, #0
 8009db0:	f000 80a0 	beq.w	8009ef4 <_lv_blend_fill+0x198>
    draw_area.x2 -= disp_area->x1;
 8009db4:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
    draw_area.x1 -= disp_area->x1;
 8009db8:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 8009dbc:	f8b8 3010 	ldrh.w	r3, [r8, #16]
    draw_area.y1 -= disp_area->y1;
 8009dc0:	f8b8 1012 	ldrh.w	r1, [r8, #18]
    draw_area.x1 -= disp_area->x1;
 8009dc4:	ebaa 0403 	sub.w	r4, sl, r3
    draw_area.y1 -= disp_area->y1;
 8009dc8:	f8bd c03a 	ldrh.w	ip, [sp, #58]	; 0x3a
    draw_area.x2 -= disp_area->x1;
 8009dcc:	1ad3      	subs	r3, r2, r3
 8009dce:	9209      	str	r2, [sp, #36]	; 0x24
    draw_area.y2 -= disp_area->y1;
 8009dd0:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
    draw_area.y1 -= disp_area->y1;
 8009dd4:	ebac 0c01 	sub.w	ip, ip, r1
    draw_area.x1 -= disp_area->x1;
 8009dd8:	b224      	sxth	r4, r4
    draw_area.y2 -= disp_area->y1;
 8009dda:	1a52      	subs	r2, r2, r1
    draw_area.x2 -= disp_area->x1;
 8009ddc:	b21b      	sxth	r3, r3
    draw_area.y1 -= disp_area->y1;
 8009dde:	fa0f fc8c 	sxth.w	ip, ip
    if(mask && disp->driver.antialiasing == 0)
 8009de2:	9904      	ldr	r1, [sp, #16]
    draw_area.y2 -= disp_area->y1;
 8009de4:	b212      	sxth	r2, r2
    draw_area.x1 -= disp_area->x1;
 8009de6:	f8ad 4038 	strh.w	r4, [sp, #56]	; 0x38
    draw_area.x2 -= disp_area->x1;
 8009dea:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
    draw_area.y1 -= disp_area->y1;
 8009dee:	f8ad c03a 	strh.w	ip, [sp, #58]	; 0x3a
    draw_area.y2 -= disp_area->y1;
 8009df2:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
    if(mask && disp->driver.antialiasing == 0)
 8009df6:	b1c9      	cbz	r1, 8009e2c <_lv_blend_fill+0xd0>
 8009df8:	f899 1008 	ldrb.w	r1, [r9, #8]
 8009dfc:	07c9      	lsls	r1, r1, #31
 8009dfe:	d415      	bmi.n	8009e2c <_lv_blend_fill+0xd0>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8009e00:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009e02:	f101 0e01 	add.w	lr, r1, #1
 8009e06:	ebae 0e0a 	sub.w	lr, lr, sl
 8009e0a:	fa0f fe8e 	sxth.w	lr, lr
        for(i = 0; i < mask_w; i++)  mask[i] = mask[i] > 128 ? LV_OPA_COVER : LV_OPA_TRANSP;
 8009e0e:	f1be 0f00 	cmp.w	lr, #0
 8009e12:	dd0b      	ble.n	8009e2c <_lv_blend_fill+0xd0>
 8009e14:	9904      	ldr	r1, [sp, #16]
 8009e16:	448e      	add	lr, r1
 8009e18:	7808      	ldrb	r0, [r1, #0]
 8009e1a:	2880      	cmp	r0, #128	; 0x80
 8009e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8009e20:	bf98      	it	ls
 8009e22:	2000      	movls	r0, #0
 8009e24:	f801 0b01 	strb.w	r0, [r1], #1
 8009e28:	458e      	cmp	lr, r1
 8009e2a:	d1f5      	bne.n	8009e18 <_lv_blend_fill+0xbc>
    if(disp->driver.set_px_cb) {
 8009e2c:	f8d9 1014 	ldr.w	r1, [r9, #20]
 8009e30:	2900      	cmp	r1, #0
 8009e32:	d064      	beq.n	8009efe <_lv_blend_fill+0x1a2>
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 8009e34:	f7fe fa9e 	bl	8008374 <_lv_refr_get_disp_refreshing>
 8009e38:	f8b8 3014 	ldrh.w	r3, [r8, #20]
 8009e3c:	f8b8 2010 	ldrh.w	r2, [r8, #16]
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
 8009e40:	2f01      	cmp	r7, #1
 8009e42:	f103 0601 	add.w	r6, r3, #1
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 8009e46:	4605      	mov	r5, r0
 8009e48:	eba6 0602 	sub.w	r6, r6, r2
 8009e4c:	b236      	sxth	r6, r6
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
 8009e4e:	f000 81c0 	beq.w	800a1d2 <_lv_blend_fill+0x476>
        int32_t draw_area_w = lv_area_get_width(draw_area);
 8009e52:	f9bd c03c 	ldrsh.w	ip, [sp, #60]	; 0x3c
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
 8009e56:	f9bd 4038 	ldrsh.w	r4, [sp, #56]	; 0x38
 8009e5a:	f10c 0201 	add.w	r2, ip, #1
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 8009e5e:	f9bd 803a 	ldrsh.w	r8, [sp, #58]	; 0x3a
 8009e62:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 8009e66:	1b12      	subs	r2, r2, r4
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
 8009e68:	9904      	ldr	r1, [sp, #16]
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 8009e6a:	4598      	cmp	r8, r3
 8009e6c:	b212      	sxth	r2, r2
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
 8009e6e:	eba1 0a04 	sub.w	sl, r1, r4
 8009e72:	9208      	str	r2, [sp, #32]
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 8009e74:	dc3e      	bgt.n	8009ef4 <_lv_blend_fill+0x198>
 8009e76:	ee18 9a10 	vmov	r9, s16
 8009e7a:	f8cd b01c 	str.w	fp, [sp, #28]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 8009e7e:	4564      	cmp	r4, ip
 8009e80:	dc25      	bgt.n	8009ece <_lv_blend_fill+0x172>
 8009e82:	eb0a 0704 	add.w	r7, sl, r4
                    disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, color,
 8009e86:	fa0f f388 	sxth.w	r3, r8
 8009e8a:	9704      	str	r7, [sp, #16]
 8009e8c:	9306      	str	r3, [sp, #24]
                if(mask_tmp[x]) {
 8009e8e:	9f04      	ldr	r7, [sp, #16]
                    disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, color,
 8009e90:	b223      	sxth	r3, r4
 8009e92:	4632      	mov	r2, r6
 8009e94:	4649      	mov	r1, r9
                if(mask_tmp[x]) {
 8009e96:	f817 bb01 	ldrb.w	fp, [r7], #1
                    disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, color,
 8009e9a:	4628      	mov	r0, r5
                if(mask_tmp[x]) {
 8009e9c:	9704      	str	r7, [sp, #16]
                                           (uint32_t)((uint32_t)opa * mask_tmp[x]) >> 8);
 8009e9e:	9f07      	ldr	r7, [sp, #28]
 8009ea0:	fb17 fe0b 	smulbb	lr, r7, fp
                if(mask_tmp[x]) {
 8009ea4:	f1bb 0f00 	cmp.w	fp, #0
 8009ea8:	f000 80cc 	beq.w	800a044 <_lv_blend_fill+0x2e8>
                    disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, color,
 8009eac:	9f05      	ldr	r7, [sp, #20]
 8009eae:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 8009eb2:	3401      	adds	r4, #1
                    disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, color,
 8009eb4:	9701      	str	r7, [sp, #4]
 8009eb6:	9f06      	ldr	r7, [sp, #24]
 8009eb8:	f8cd e008 	str.w	lr, [sp, #8]
 8009ebc:	9700      	str	r7, [sp, #0]
 8009ebe:	696f      	ldr	r7, [r5, #20]
 8009ec0:	47b8      	blx	r7
 8009ec2:	f9bd c03c 	ldrsh.w	ip, [sp, #60]	; 0x3c
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 8009ec6:	45a4      	cmp	ip, r4
 8009ec8:	dae1      	bge.n	8009e8e <_lv_blend_fill+0x132>
 8009eca:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 8009ece:	f108 0801 	add.w	r8, r8, #1
            mask_tmp += draw_area_w;
 8009ed2:	9a08      	ldr	r2, [sp, #32]
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 8009ed4:	4598      	cmp	r8, r3
            mask_tmp += draw_area_w;
 8009ed6:	4492      	add	sl, r2
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 8009ed8:	dc0c      	bgt.n	8009ef4 <_lv_blend_fill+0x198>
 8009eda:	f9bd 4038 	ldrsh.w	r4, [sp, #56]	; 0x38
 8009ede:	e7ce      	b.n	8009e7e <_lv_blend_fill+0x122>
                disp->driver.gpu_fill_cb(&disp->driver, disp_buf, disp_w, draw_area, color);
 8009ee0:	9b05      	ldr	r3, [sp, #20]
 8009ee2:	464a      	mov	r2, r9
 8009ee4:	ee18 1a10 	vmov	r1, s16
 8009ee8:	4650      	mov	r0, sl
 8009eea:	9300      	str	r3, [sp, #0]
 8009eec:	ab0e      	add	r3, sp, #56	; 0x38
 8009eee:	f8da 502c 	ldr.w	r5, [sl, #44]	; 0x2c
 8009ef2:	47a8      	blx	r5
}
 8009ef4:	b011      	add	sp, #68	; 0x44
 8009ef6:	ecbd 8b02 	vpop	{d8}
 8009efa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if(mode == LV_BLEND_MODE_NORMAL) {
 8009efe:	2e00      	cmp	r6, #0
 8009f00:	f040 80a5 	bne.w	800a04e <_lv_blend_fill+0x2f2>
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 8009f04:	f7fe fa36 	bl	8008374 <_lv_refr_get_disp_refreshing>
 8009f08:	f8b8 3014 	ldrh.w	r3, [r8, #20]
 8009f0c:	f8b8 2010 	ldrh.w	r2, [r8, #16]
 8009f10:	4682      	mov	sl, r0
 8009f12:	f103 0901 	add.w	r9, r3, #1
    int32_t draw_area_h = lv_area_get_height(draw_area);
 8009f16:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 8009f1a:	f8bd 003c 	ldrh.w	r0, [sp, #60]	; 0x3c
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
 8009f1e:	2f01      	cmp	r7, #1
 8009f20:	eba9 0902 	sub.w	r9, r9, r2
    int32_t draw_area_w = lv_area_get_width(draw_area);
 8009f24:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8009f28:	f101 0401 	add.w	r4, r1, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8009f2c:	f100 0001 	add.w	r0, r0, #1
    int32_t draw_area_h = lv_area_get_height(draw_area);
 8009f30:	f9bd 203a 	ldrsh.w	r2, [sp, #58]	; 0x3a
 8009f34:	fa0f f989 	sxth.w	r9, r9
 8009f38:	eba0 0003 	sub.w	r0, r0, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8009f3c:	940b      	str	r4, [sp, #44]	; 0x2c
 8009f3e:	f101 0401 	add.w	r4, r1, #1
    lv_color_t * disp_buf_first = disp_buf + disp_w * draw_area->y1 + draw_area->x1;
 8009f42:	fb09 3302 	mla	r3, r9, r2, r3
 8009f46:	4694      	mov	ip, r2
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8009f48:	fa0f f880 	sxth.w	r8, r0
 8009f4c:	9209      	str	r2, [sp, #36]	; 0x24
 8009f4e:	ee18 0a10 	vmov	r0, s16
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8009f52:	eba4 0202 	sub.w	r2, r4, r2
 8009f56:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    int32_t draw_area_h = lv_area_get_height(draw_area);
 8009f5a:	b212      	sxth	r2, r2
    lv_color_t * disp_buf_first = disp_buf + disp_w * draw_area->y1 + draw_area->x1;
 8009f5c:	9006      	str	r0, [sp, #24]
    int32_t draw_area_h = lv_area_get_height(draw_area);
 8009f5e:	920a      	str	r2, [sp, #40]	; 0x28
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
 8009f60:	f000 80eb 	beq.w	800a13a <_lv_blend_fill+0x3de>
        if(opa > LV_OPA_MAX) {
 8009f64:	f1bb 0ffd 	cmp.w	fp, #253	; 0xfd
 8009f68:	f200 8161 	bhi.w	800a22e <_lv_blend_fill+0x4d2>
            for(y = draw_area->y1; y <= draw_area->y2; y++) {
 8009f6c:	458c      	cmp	ip, r1
 8009f6e:	dcc1      	bgt.n	8009ef4 <_lv_blend_fill+0x198>
        last_dest_color.full = disp_buf_first[0].full;
 8009f70:	ee18 2a10 	vmov	r2, s16
 8009f74:	f1b8 0f00 	cmp.w	r8, #0
 8009f78:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
                disp_buf_first += disp_w;
 8009f7c:	ea4f 0389 	mov.w	r3, r9, lsl #2
 8009f80:	930a      	str	r3, [sp, #40]	; 0x28
                                else last_res_color = lv_color_mix(color, disp_buf_first[x], opa_tmp);
 8009f82:	9b05      	ldr	r3, [sp, #20]
 8009f84:	b2da      	uxtb	r2, r3
 8009f86:	9205      	str	r2, [sp, #20]
 8009f88:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8009f8c:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8009f90:	9207      	str	r2, [sp, #28]
 8009f92:	ddaf      	ble.n	8009ef4 <_lv_blend_fill+0x198>
 8009f94:	eb00 0988 	add.w	r9, r0, r8, lsl #2
 8009f98:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
        last_res_color.full = disp_buf_first[0].full;
 8009f9c:	460a      	mov	r2, r1
            lv_opa_t opa_tmp = LV_OPA_TRANSP;
 8009f9e:	46b4      	mov	ip, r6
 8009fa0:	469a      	mov	sl, r3
 8009fa2:	4688      	mov	r8, r1
 8009fa4:	f8cd b020 	str.w	fp, [sp, #32]
                for(x = 0; x < draw_area_w; x++) {
 8009fa8:	9b04      	ldr	r3, [sp, #16]
 8009faa:	f103 3eff 	add.w	lr, r3, #4294967295
 8009fae:	9b06      	ldr	r3, [sp, #24]
 8009fb0:	e03d      	b.n	800a02e <_lv_blend_fill+0x2d2>
                        if(*mask_tmp_x != last_mask) opa_tmp = *mask_tmp_x == LV_OPA_COVER ? opa :
 8009fb2:	29ff      	cmp	r1, #255	; 0xff
 8009fb4:	f000 80f8 	beq.w	800a1a8 <_lv_blend_fill+0x44c>
                                                                   (uint32_t)((uint32_t)(*mask_tmp_x) * opa) >> 8;
 8009fb8:	9a08      	ldr	r2, [sp, #32]
 8009fba:	fb11 fc02 	smulbb	ip, r1, r2
                        if(*mask_tmp_x != last_mask) opa_tmp = *mask_tmp_x == LV_OPA_COVER ? opa :
 8009fbe:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
                        if(*mask_tmp_x != last_mask || last_dest_color.full != disp_buf_first[x].full) {
 8009fc2:	f8d3 8000 	ldr.w	r8, [r3]
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8009fc6:	9805      	ldr	r0, [sp, #20]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8009fc8:	f1cc 07ff 	rsb	r7, ip, #255	; 0xff
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8009fcc:	781a      	ldrb	r2, [r3, #0]
 8009fce:	460e      	mov	r6, r1
 8009fd0:	fb1c f400 	smulbb	r4, ip, r0
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8009fd4:	9807      	ldr	r0, [sp, #28]
 8009fd6:	f893 b001 	ldrb.w	fp, [r3, #1]
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8009fda:	fb07 4402 	mla	r4, r7, r2, r4
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8009fde:	fb1c f000 	smulbb	r0, ip, r0
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8009fe2:	789a      	ldrb	r2, [r3, #2]
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8009fe4:	fb07 000b 	mla	r0, r7, fp, r0
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8009fe8:	eb04 2104 	add.w	r1, r4, r4, lsl #8
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8009fec:	fb1a fb0c 	smulbb	fp, sl, ip
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8009ff0:	eb04 11c1 	add.w	r1, r4, r1, lsl #7
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8009ff4:	fb07 b202 	mla	r2, r7, r2, fp
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8009ff8:	eb00 2700 	add.w	r7, r0, r0, lsl #8
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8009ffc:	0dc9      	lsrs	r1, r1, #23
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8009ffe:	eb02 2b02 	add.w	fp, r2, r2, lsl #8
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800a002:	eb00 10c7 	add.w	r0, r0, r7, lsl #7
 800a006:	f361 0507 	bfi	r5, r1, #0, #8
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800a00a:	eb02 1bcb 	add.w	fp, r2, fp, lsl #7
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800a00e:	f3c0 50c7 	ubfx	r0, r0, #23, #8
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800a012:	f3cb 5bc7 	ubfx	fp, fp, #23, #8
    return ret;
 800a016:	f360 250f 	bfi	r5, r0, #8, #8
 800a01a:	f36b 4517 	bfi	r5, fp, #16, #8
 800a01e:	f045 457f 	orr.w	r5, r5, #4278190080	; 0xff000000
 800a022:	462a      	mov	r2, r5
                        disp_buf_first[x] = last_res_color;
 800a024:	601a      	str	r2, [r3, #0]
                for(x = 0; x < draw_area_w; x++) {
 800a026:	3304      	adds	r3, #4
 800a028:	4599      	cmp	r9, r3
 800a02a:	f000 80c0 	beq.w	800a1ae <_lv_blend_fill+0x452>
                    if(*mask_tmp_x) {
 800a02e:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
 800a032:	2900      	cmp	r1, #0
 800a034:	d0f7      	beq.n	800a026 <_lv_blend_fill+0x2ca>
                        if(*mask_tmp_x != last_mask) opa_tmp = *mask_tmp_x == LV_OPA_COVER ? opa :
 800a036:	42b1      	cmp	r1, r6
 800a038:	d1bb      	bne.n	8009fb2 <_lv_blend_fill+0x256>
                        if(*mask_tmp_x != last_mask || last_dest_color.full != disp_buf_first[x].full) {
 800a03a:	6818      	ldr	r0, [r3, #0]
 800a03c:	4540      	cmp	r0, r8
 800a03e:	d0f1      	beq.n	800a024 <_lv_blend_fill+0x2c8>
 800a040:	4680      	mov	r8, r0
 800a042:	e7c0      	b.n	8009fc6 <_lv_blend_fill+0x26a>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 800a044:	3401      	adds	r4, #1
 800a046:	4564      	cmp	r4, ip
 800a048:	f77f af21 	ble.w	8009e8e <_lv_blend_fill+0x132>
 800a04c:	e73d      	b.n	8009eca <_lv_blend_fill+0x16e>
    switch(mode) {
 800a04e:	2e01      	cmp	r6, #1
 800a050:	9d05      	ldr	r5, [sp, #20]
 800a052:	f000 8093 	beq.w	800a17c <_lv_blend_fill+0x420>
 800a056:	2e02      	cmp	r6, #2
 800a058:	f47f af4c 	bne.w	8009ef4 <_lv_blend_fill+0x198>
 800a05c:	49ac      	ldr	r1, [pc, #688]	; (800a310 <_lv_blend_fill+0x5b4>)
 800a05e:	46ae      	mov	lr, r5
 800a060:	9106      	str	r1, [sp, #24]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800a062:	f8b8 1014 	ldrh.w	r1, [r8, #20]
 800a066:	fa5f f68e 	uxtb.w	r6, lr
 800a06a:	f8b8 0010 	ldrh.w	r0, [r8, #16]
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
 800a06e:	2f01      	cmp	r7, #1
 800a070:	f101 0801 	add.w	r8, r1, #1
 800a074:	f3ce 2107 	ubfx	r1, lr, #8, #8
 800a078:	9605      	str	r6, [sp, #20]
 800a07a:	f3ce 4607 	ubfx	r6, lr, #16, #8
 800a07e:	910b      	str	r1, [sp, #44]	; 0x2c
 800a080:	eba8 0100 	sub.w	r1, r8, r0
    lv_color_t * disp_buf_tmp = disp_buf + disp_w * draw_area->y1;
 800a084:	4660      	mov	r0, ip
 800a086:	f8cd c020 	str.w	ip, [sp, #32]
 800a08a:	b209      	sxth	r1, r1
 800a08c:	910a      	str	r1, [sp, #40]	; 0x28
 800a08e:	fb01 f100 	mul.w	r1, r1, r0
 800a092:	ee18 0a10 	vmov	r0, s16
 800a096:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800a09a:	9007      	str	r0, [sp, #28]
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
 800a09c:	f000 834d 	beq.w	800a73a <_lv_blend_fill+0x9de>
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
 800a0a0:	9f04      	ldr	r7, [sp, #16]
 800a0a2:	f1ca 0001 	rsb	r0, sl, #1
 800a0a6:	eba7 0a04 	sub.w	sl, r7, r4
        last_dest_color.full = disp_buf_tmp[0].full;
 800a0aa:	ee18 7a10 	vmov	r7, s16
 800a0ae:	f857 e021 	ldr.w	lr, [r7, r1, lsl #2]
 800a0b2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a0b4:	4401      	add	r1, r0
 800a0b6:	fa0f f981 	sxth.w	r9, r1
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800a0ba:	9908      	ldr	r1, [sp, #32]
 800a0bc:	4291      	cmp	r1, r2
 800a0be:	f73f af19 	bgt.w	8009ef4 <_lv_blend_fill+0x198>
            disp_buf_tmp += disp_w;
 800a0c2:	990a      	ldr	r1, [sp, #40]	; 0x28
        last_res_color.full = disp_buf_tmp[0].full;
 800a0c4:	4670      	mov	r0, lr
        lv_opa_t last_mask = LV_OPA_TRANSP;
 800a0c6:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 800a0ca:	f04f 0c00 	mov.w	ip, #0
            disp_buf_tmp += disp_w;
 800a0ce:	0089      	lsls	r1, r1, #2
        lv_opa_t last_mask = LV_OPA_TRANSP;
 800a0d0:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
            disp_buf_tmp += disp_w;
 800a0d4:	9109      	str	r1, [sp, #36]	; 0x24
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 800a0d6:	429c      	cmp	r4, r3
 800a0d8:	dc57      	bgt.n	800a18a <_lv_blend_fill+0x42e>
 800a0da:	9a07      	ldr	r2, [sp, #28]
 800a0dc:	eb0a 0704 	add.w	r7, sl, r4
 800a0e0:	9604      	str	r6, [sp, #16]
 800a0e2:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800a0e6:	e01b      	b.n	800a120 <_lv_blend_fill+0x3c4>
                    last_res_color = blend_fp(color, disp_buf_tmp[x], opa_tmp);
 800a0e8:	9b05      	ldr	r3, [sp, #20]
                    lv_opa_t opa_tmp = mask_tmp[x] >= LV_OPA_MAX ? opa : (uint32_t)((uint32_t)mask_tmp[x] * opa) >> 8;
 800a0ea:	29fc      	cmp	r1, #252	; 0xfc
                    last_res_color = blend_fp(color, disp_buf_tmp[x], opa_tmp);
 800a0ec:	6821      	ldr	r1, [r4, #0]
 800a0ee:	f363 0507 	bfi	r5, r3, #0, #8
 800a0f2:	9b04      	ldr	r3, [sp, #16]
                    lv_opa_t opa_tmp = mask_tmp[x] >= LV_OPA_MAX ? opa : (uint32_t)((uint32_t)mask_tmp[x] * opa) >> 8;
 800a0f4:	bf98      	it	ls
 800a0f6:	ea4f 2218 	movls.w	r2, r8, lsr #8
                    last_res_color = blend_fp(color, disp_buf_tmp[x], opa_tmp);
 800a0fa:	f369 250f 	bfi	r5, r9, #8, #8
 800a0fe:	f363 4517 	bfi	r5, r3, #16, #8
 800a102:	9b06      	ldr	r3, [sp, #24]
 800a104:	4628      	mov	r0, r5
 800a106:	4798      	blx	r3
                    last_mask = mask_tmp[x];
 800a108:	f817 cc01 	ldrb.w	ip, [r7, #-1]
                    last_dest_color.full = disp_buf_tmp[x].full;
 800a10c:	f8d4 e000 	ldr.w	lr, [r4]
 800a110:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
                disp_buf_tmp[x] = last_res_color;
 800a114:	6020      	str	r0, [r4, #0]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 800a116:	eba7 020a 	sub.w	r2, r7, sl
 800a11a:	3404      	adds	r4, #4
 800a11c:	4293      	cmp	r3, r2
 800a11e:	db31      	blt.n	800a184 <_lv_blend_fill+0x428>
                if(mask_tmp[x] == 0) continue;
 800a120:	f817 1b01 	ldrb.w	r1, [r7], #1
 800a124:	2900      	cmp	r1, #0
 800a126:	d0f6      	beq.n	800a116 <_lv_blend_fill+0x3ba>
                if(mask_tmp[x] != last_mask || last_dest_color.full != disp_buf_tmp[x].full) {
 800a128:	4561      	cmp	r1, ip
 800a12a:	465a      	mov	r2, fp
                    lv_opa_t opa_tmp = mask_tmp[x] >= LV_OPA_MAX ? opa : (uint32_t)((uint32_t)mask_tmp[x] * opa) >> 8;
 800a12c:	fb11 f80b 	smulbb	r8, r1, fp
                if(mask_tmp[x] != last_mask || last_dest_color.full != disp_buf_tmp[x].full) {
 800a130:	d1da      	bne.n	800a0e8 <_lv_blend_fill+0x38c>
 800a132:	6826      	ldr	r6, [r4, #0]
 800a134:	4576      	cmp	r6, lr
 800a136:	d1d7      	bne.n	800a0e8 <_lv_blend_fill+0x38c>
 800a138:	e7ec      	b.n	800a114 <_lv_blend_fill+0x3b8>
        if(opa > LV_OPA_MAX) {
 800a13a:	f1bb 0ffd 	cmp.w	fp, #253	; 0xfd
 800a13e:	f240 836b 	bls.w	800a818 <_lv_blend_fill+0xabc>
            if(disp->driver.gpu_fill_cb && lv_area_get_size(draw_area) > GPU_SIZE_LIMIT) {
 800a142:	f8da 302c 	ldr.w	r3, [sl, #44]	; 0x2c
 800a146:	b12b      	cbz	r3, 800a154 <_lv_blend_fill+0x3f8>
 800a148:	a80e      	add	r0, sp, #56	; 0x38
 800a14a:	f009 feeb 	bl	8013f24 <lv_area_get_size>
 800a14e:	28f0      	cmp	r0, #240	; 0xf0
 800a150:	f63f aec6 	bhi.w	8009ee0 <_lv_blend_fill+0x184>
            for(y = 0; y < draw_area_h; y++) {
 800a154:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a156:	2b00      	cmp	r3, #0
 800a158:	f77f aecc 	ble.w	8009ef4 <_lv_blend_fill+0x198>
 800a15c:	461e      	mov	r6, r3
                disp_buf_first += disp_w;
 800a15e:	ea4f 0989 	mov.w	r9, r9, lsl #2
 800a162:	2400      	movs	r4, #0
 800a164:	e9dd 7505 	ldrd	r7, r5, [sp, #20]
            for(y = 0; y < draw_area_h; y++) {
 800a168:	3401      	adds	r4, #1
                lv_color_fill(disp_buf_first, color, draw_area_w);
 800a16a:	4628      	mov	r0, r5
 800a16c:	4642      	mov	r2, r8
 800a16e:	4639      	mov	r1, r7
 800a170:	f00a fa4c 	bl	801460c <lv_color_fill>
            for(y = 0; y < draw_area_h; y++) {
 800a174:	42a6      	cmp	r6, r4
                disp_buf_first += disp_w;
 800a176:	444d      	add	r5, r9
            for(y = 0; y < draw_area_h; y++) {
 800a178:	d1f6      	bne.n	800a168 <_lv_blend_fill+0x40c>
 800a17a:	e6bb      	b.n	8009ef4 <_lv_blend_fill+0x198>
            blend_fp = color_blend_true_color_additive;
 800a17c:	4965      	ldr	r1, [pc, #404]	; (800a314 <_lv_blend_fill+0x5b8>)
 800a17e:	46ae      	mov	lr, r5
 800a180:	9106      	str	r1, [sp, #24]
 800a182:	e76e      	b.n	800a062 <_lv_blend_fill+0x306>
 800a184:	9e04      	ldr	r6, [sp, #16]
 800a186:	f9bd 203e 	ldrsh.w	r2, [sp, #62]	; 0x3e
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800a18a:	9908      	ldr	r1, [sp, #32]
            disp_buf_tmp += disp_w;
 800a18c:	9c07      	ldr	r4, [sp, #28]
 800a18e:	9f09      	ldr	r7, [sp, #36]	; 0x24
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800a190:	3101      	adds	r1, #1
            disp_buf_tmp += disp_w;
 800a192:	443c      	add	r4, r7
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800a194:	4291      	cmp	r1, r2
 800a196:	9108      	str	r1, [sp, #32]
            disp_buf_tmp += disp_w;
 800a198:	9407      	str	r4, [sp, #28]
            mask_tmp += draw_area_w;
 800a19a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a19c:	44a2      	add	sl, r4
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800a19e:	f73f aea9 	bgt.w	8009ef4 <_lv_blend_fill+0x198>
 800a1a2:	f9bd 4038 	ldrsh.w	r4, [sp, #56]	; 0x38
 800a1a6:	e796      	b.n	800a0d6 <_lv_blend_fill+0x37a>
 800a1a8:	f8dd c020 	ldr.w	ip, [sp, #32]
 800a1ac:	e709      	b.n	8009fc2 <_lv_blend_fill+0x266>
                disp_buf_first += disp_w;
 800a1ae:	9806      	ldr	r0, [sp, #24]
 800a1b0:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a1b2:	4604      	mov	r4, r0
            for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800a1b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
                mask += draw_area_w;
 800a1b6:	9804      	ldr	r0, [sp, #16]
 800a1b8:	4489      	add	r9, r1
                disp_buf_first += disp_w;
 800a1ba:	440c      	add	r4, r1
            for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800a1bc:	3301      	adds	r3, #1
 800a1be:	990b      	ldr	r1, [sp, #44]	; 0x2c
                disp_buf_first += disp_w;
 800a1c0:	9406      	str	r4, [sp, #24]
                mask += draw_area_w;
 800a1c2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
            for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800a1c4:	428b      	cmp	r3, r1
 800a1c6:	9309      	str	r3, [sp, #36]	; 0x24
                mask += draw_area_w;
 800a1c8:	4420      	add	r0, r4
 800a1ca:	9004      	str	r0, [sp, #16]
            for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800a1cc:	f47f aeec 	bne.w	8009fa8 <_lv_blend_fill+0x24c>
 800a1d0:	e690      	b.n	8009ef4 <_lv_blend_fill+0x198>
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800a1d2:	f9bd 803a 	ldrsh.w	r8, [sp, #58]	; 0x3a
 800a1d6:	f9bd 203e 	ldrsh.w	r2, [sp, #62]	; 0x3e
 800a1da:	4590      	cmp	r8, r2
 800a1dc:	f73f ae8a 	bgt.w	8009ef4 <_lv_blend_fill+0x198>
 800a1e0:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 800a1e4:	ee18 9a10 	vmov	r9, s16
 800a1e8:	4637      	mov	r7, r6
 800a1ea:	4611      	mov	r1, r2
 800a1ec:	f8dd a014 	ldr.w	sl, [sp, #20]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 800a1f0:	f9bd 4038 	ldrsh.w	r4, [sp, #56]	; 0x38
 800a1f4:	429c      	cmp	r4, r3
 800a1f6:	dc15      	bgt.n	800a224 <_lv_blend_fill+0x4c8>
 800a1f8:	fa0f f688 	sxth.w	r6, r8
 800a1fc:	9604      	str	r6, [sp, #16]
                disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, color, opa);
 800a1fe:	9904      	ldr	r1, [sp, #16]
 800a200:	b223      	sxth	r3, r4
 800a202:	f8cd b008 	str.w	fp, [sp, #8]
 800a206:	463a      	mov	r2, r7
 800a208:	9100      	str	r1, [sp, #0]
 800a20a:	4628      	mov	r0, r5
 800a20c:	f8cd a004 	str.w	sl, [sp, #4]
 800a210:	4649      	mov	r1, r9
 800a212:	696e      	ldr	r6, [r5, #20]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 800a214:	3401      	adds	r4, #1
                disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, color, opa);
 800a216:	47b0      	blx	r6
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 800a218:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 800a21c:	429c      	cmp	r4, r3
 800a21e:	ddee      	ble.n	800a1fe <_lv_blend_fill+0x4a2>
 800a220:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800a224:	f108 0801 	add.w	r8, r8, #1
 800a228:	4588      	cmp	r8, r1
 800a22a:	dde1      	ble.n	800a1f0 <_lv_blend_fill+0x494>
 800a22c:	e662      	b.n	8009ef4 <_lv_blend_fill+0x198>
            for(y = 0; y < draw_area_h; y++) {
 800a22e:	2a00      	cmp	r2, #0
 800a230:	f77f ae60 	ble.w	8009ef4 <_lv_blend_fill+0x198>
                disp_buf_first += disp_w;
 800a234:	ea4f 0389 	mov.w	r3, r9, lsl #2
        int32_t x_end4 = draw_area_w - 4;
 800a238:	f1a8 0904 	sub.w	r9, r8, #4
            for(y = 0; y < draw_area_h; y++) {
 800a23c:	9608      	str	r6, [sp, #32]
                disp_buf_first += disp_w;
 800a23e:	930b      	str	r3, [sp, #44]	; 0x2c
                    FILL_NORMAL_MASK_PX(x, color)
 800a240:	9b05      	ldr	r3, [sp, #20]
 800a242:	f3c3 2b07 	ubfx	fp, r3, #8, #8
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800a246:	b2da      	uxtb	r2, r3
 800a248:	f3c3 4a07 	ubfx	sl, r3, #16, #8
 800a24c:	4619      	mov	r1, r3
 800a24e:	9205      	str	r2, [sp, #20]
 800a250:	f1a8 0203 	sub.w	r2, r8, #3
 800a254:	f8cd b01c 	str.w	fp, [sp, #28]
 800a258:	46d3      	mov	fp, sl
 800a25a:	920c      	str	r2, [sp, #48]	; 0x30
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
 800a25c:	f1b8 0f00 	cmp.w	r8, #0
 800a260:	f340 836a 	ble.w	800a938 <_lv_blend_fill+0xbdc>
 800a264:	9b04      	ldr	r3, [sp, #16]
 800a266:	461c      	mov	r4, r3
 800a268:	f013 0303 	ands.w	r3, r3, #3
 800a26c:	f000 836b 	beq.w	800a946 <_lv_blend_fill+0xbea>
 800a270:	9806      	ldr	r0, [sp, #24]
 800a272:	2300      	movs	r3, #0
 800a274:	9e07      	ldr	r6, [sp, #28]
 800a276:	9f05      	ldr	r7, [sp, #20]
 800a278:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800a27c:	e031      	b.n	800a2e2 <_lv_blend_fill+0x586>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800a27e:	f890 c002 	ldrb.w	ip, [r0, #2]
                    FILL_NORMAL_MASK_PX(x, color)
 800a282:	f04f 39ff 	mov.w	r9, #4294967295
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800a286:	f890 a000 	ldrb.w	sl, [r0]
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800a28a:	7845      	ldrb	r5, [r0, #1]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800a28c:	fb0e fc0c 	mul.w	ip, lr, ip
 800a290:	f880 9003 	strb.w	r9, [r0, #3]
 800a294:	fb0b cc02 	mla	ip, fp, r2, ip
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800a298:	fb0e f505 	mul.w	r5, lr, r5
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800a29c:	fb0e fe0a 	mul.w	lr, lr, sl
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800a2a0:	eb0c 2a0c 	add.w	sl, ip, ip, lsl #8
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800a2a4:	fb06 5502 	mla	r5, r6, r2, r5
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800a2a8:	fb07 e202 	mla	r2, r7, r2, lr
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800a2ac:	eb0c 1cca 	add.w	ip, ip, sl, lsl #7
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800a2b0:	eb05 2e05 	add.w	lr, r5, r5, lsl #8
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800a2b4:	eb02 2a02 	add.w	sl, r2, r2, lsl #8
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800a2b8:	f3cc 5cc7 	ubfx	ip, ip, #23, #8
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800a2bc:	eb05 15ce 	add.w	r5, r5, lr, lsl #7
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800a2c0:	eb02 12ca 	add.w	r2, r2, sl, lsl #7
 800a2c4:	f880 c002 	strb.w	ip, [r0, #2]
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800a2c8:	f3c5 55c7 	ubfx	r5, r5, #23, #8
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800a2cc:	0dd2      	lsrs	r2, r2, #23
 800a2ce:	7045      	strb	r5, [r0, #1]
 800a2d0:	7002      	strb	r2, [r0, #0]
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
 800a2d2:	3301      	adds	r3, #1
                    FILL_NORMAL_MASK_PX(x, color)
 800a2d4:	4622      	mov	r2, r4
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
 800a2d6:	3004      	adds	r0, #4
 800a2d8:	4598      	cmp	r8, r3
 800a2da:	d00c      	beq.n	800a2f6 <_lv_blend_fill+0x59a>
 800a2dc:	07a5      	lsls	r5, r4, #30
 800a2de:	f000 821e 	beq.w	800a71e <_lv_blend_fill+0x9c2>
                    FILL_NORMAL_MASK_PX(x, color)
 800a2e2:	f814 2b01 	ldrb.w	r2, [r4], #1
 800a2e6:	2a00      	cmp	r2, #0
 800a2e8:	d0f3      	beq.n	800a2d2 <_lv_blend_fill+0x576>
 800a2ea:	2aff      	cmp	r2, #255	; 0xff
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800a2ec:	f1c2 0eff 	rsb	lr, r2, #255	; 0xff
 800a2f0:	d1c5      	bne.n	800a27e <_lv_blend_fill+0x522>
 800a2f2:	6001      	str	r1, [r0, #0]
 800a2f4:	e7ed      	b.n	800a2d2 <_lv_blend_fill+0x576>
 800a2f6:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
                for(; x <= x_end4; x += 4) {
 800a2fa:	4599      	cmp	r9, r3
 800a2fc:	f2c0 81f7 	blt.w	800a6ee <_lv_blend_fill+0x992>
 800a300:	9806      	ldr	r0, [sp, #24]
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
 800a302:	4614      	mov	r4, r2
 800a304:	1a9e      	subs	r6, r3, r2
 800a306:	9309      	str	r3, [sp, #36]	; 0x24
 800a308:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800a30c:	e0d4      	b.n	800a4b8 <_lv_blend_fill+0x75c>
 800a30e:	bf00      	nop
 800a310:	08009cc1 	.word	0x08009cc1
 800a314:	08009c31 	.word	0x08009c31
                            FILL_NORMAL_MASK_PX(x, color)
 800a318:	f814 5c04 	ldrb.w	r5, [r4, #-4]
 800a31c:	b37d      	cbz	r5, 800a37e <_lv_blend_fill+0x622>
 800a31e:	2dff      	cmp	r5, #255	; 0xff
 800a320:	f000 81f5 	beq.w	800a70e <_lv_blend_fill+0x9b2>
 800a324:	f1c5 0eff 	rsb	lr, r5, #255	; 0xff
 800a328:	f890 c002 	ldrb.w	ip, [r0, #2]
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800a32c:	7847      	ldrb	r7, [r0, #1]
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800a32e:	f890 a000 	ldrb.w	sl, [r0]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800a332:	fb0e fc0c 	mul.w	ip, lr, ip
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800a336:	fb0e f707 	mul.w	r7, lr, r7
 800a33a:	9b07      	ldr	r3, [sp, #28]
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800a33c:	fb0e fe0a 	mul.w	lr, lr, sl
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800a340:	fb03 7705 	mla	r7, r3, r5, r7
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800a344:	9b05      	ldr	r3, [sp, #20]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800a346:	fb0b cc05 	mla	ip, fp, r5, ip
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800a34a:	fb03 e505 	mla	r5, r3, r5, lr
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800a34e:	eb07 2a07 	add.w	sl, r7, r7, lsl #8
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800a352:	eb0c 2e0c 	add.w	lr, ip, ip, lsl #8
 800a356:	f04f 33ff 	mov.w	r3, #4294967295
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800a35a:	eb07 17ca 	add.w	r7, r7, sl, lsl #7
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800a35e:	eb0c 1cce 	add.w	ip, ip, lr, lsl #7
 800a362:	70c3      	strb	r3, [r0, #3]
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800a364:	eb05 2e05 	add.w	lr, r5, r5, lsl #8
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800a368:	f3c7 57c7 	ubfx	r7, r7, #23, #8
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800a36c:	f3cc 5cc7 	ubfx	ip, ip, #23, #8
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800a370:	eb05 15ce 	add.w	r5, r5, lr, lsl #7
 800a374:	7047      	strb	r7, [r0, #1]
 800a376:	f880 c002 	strb.w	ip, [r0, #2]
 800a37a:	0ded      	lsrs	r5, r5, #23
 800a37c:	7005      	strb	r5, [r0, #0]
                            FILL_NORMAL_MASK_PX(x + 1, color)
 800a37e:	f814 5c03 	ldrb.w	r5, [r4, #-3]
 800a382:	b37d      	cbz	r5, 800a3e4 <_lv_blend_fill+0x688>
 800a384:	2dff      	cmp	r5, #255	; 0xff
 800a386:	f000 81c4 	beq.w	800a712 <_lv_blend_fill+0x9b6>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800a38a:	f1c5 0eff 	rsb	lr, r5, #255	; 0xff
 800a38e:	f890 c006 	ldrb.w	ip, [r0, #6]
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800a392:	7947      	ldrb	r7, [r0, #5]
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800a394:	f890 a004 	ldrb.w	sl, [r0, #4]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800a398:	fb0e fc0c 	mul.w	ip, lr, ip
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800a39c:	fb0e f707 	mul.w	r7, lr, r7
 800a3a0:	9b07      	ldr	r3, [sp, #28]
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800a3a2:	fb0e fe0a 	mul.w	lr, lr, sl
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800a3a6:	fb03 7705 	mla	r7, r3, r5, r7
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800a3aa:	9b05      	ldr	r3, [sp, #20]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800a3ac:	fb0b cc05 	mla	ip, fp, r5, ip
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800a3b0:	fb03 e505 	mla	r5, r3, r5, lr
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800a3b4:	eb07 2a07 	add.w	sl, r7, r7, lsl #8
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800a3b8:	eb0c 2e0c 	add.w	lr, ip, ip, lsl #8
 800a3bc:	f04f 33ff 	mov.w	r3, #4294967295
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800a3c0:	eb07 17ca 	add.w	r7, r7, sl, lsl #7
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800a3c4:	eb0c 1cce 	add.w	ip, ip, lr, lsl #7
 800a3c8:	71c3      	strb	r3, [r0, #7]
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800a3ca:	eb05 2e05 	add.w	lr, r5, r5, lsl #8
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800a3ce:	f3c7 57c7 	ubfx	r7, r7, #23, #8
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800a3d2:	f3cc 5cc7 	ubfx	ip, ip, #23, #8
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800a3d6:	eb05 15ce 	add.w	r5, r5, lr, lsl #7
 800a3da:	7147      	strb	r7, [r0, #5]
 800a3dc:	f880 c006 	strb.w	ip, [r0, #6]
 800a3e0:	0ded      	lsrs	r5, r5, #23
 800a3e2:	7105      	strb	r5, [r0, #4]
                            FILL_NORMAL_MASK_PX(x + 2, color)
 800a3e4:	f814 5c02 	ldrb.w	r5, [r4, #-2]
 800a3e8:	b37d      	cbz	r5, 800a44a <_lv_blend_fill+0x6ee>
 800a3ea:	2dff      	cmp	r5, #255	; 0xff
 800a3ec:	f000 8193 	beq.w	800a716 <_lv_blend_fill+0x9ba>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800a3f0:	f1c5 0eff 	rsb	lr, r5, #255	; 0xff
 800a3f4:	f890 c00a 	ldrb.w	ip, [r0, #10]
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800a3f8:	7a47      	ldrb	r7, [r0, #9]
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800a3fa:	f890 a008 	ldrb.w	sl, [r0, #8]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800a3fe:	fb0e fc0c 	mul.w	ip, lr, ip
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800a402:	fb0e f707 	mul.w	r7, lr, r7
 800a406:	9b07      	ldr	r3, [sp, #28]
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800a408:	fb0e fe0a 	mul.w	lr, lr, sl
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800a40c:	fb03 7705 	mla	r7, r3, r5, r7
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800a410:	9b05      	ldr	r3, [sp, #20]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800a412:	fb0b cc05 	mla	ip, fp, r5, ip
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800a416:	fb03 e505 	mla	r5, r3, r5, lr
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800a41a:	eb07 2a07 	add.w	sl, r7, r7, lsl #8
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800a41e:	eb0c 2e0c 	add.w	lr, ip, ip, lsl #8
 800a422:	f04f 33ff 	mov.w	r3, #4294967295
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800a426:	eb07 17ca 	add.w	r7, r7, sl, lsl #7
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800a42a:	eb0c 1cce 	add.w	ip, ip, lr, lsl #7
 800a42e:	72c3      	strb	r3, [r0, #11]
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800a430:	eb05 2e05 	add.w	lr, r5, r5, lsl #8
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800a434:	f3c7 57c7 	ubfx	r7, r7, #23, #8
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800a438:	f3cc 5cc7 	ubfx	ip, ip, #23, #8
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800a43c:	eb05 15ce 	add.w	r5, r5, lr, lsl #7
 800a440:	7247      	strb	r7, [r0, #9]
 800a442:	f880 c00a 	strb.w	ip, [r0, #10]
 800a446:	0ded      	lsrs	r5, r5, #23
 800a448:	7205      	strb	r5, [r0, #8]
                            FILL_NORMAL_MASK_PX(x + 3, color)
 800a44a:	f814 5c01 	ldrb.w	r5, [r4, #-1]
 800a44e:	b37d      	cbz	r5, 800a4b0 <_lv_blend_fill+0x754>
 800a450:	2dff      	cmp	r5, #255	; 0xff
 800a452:	f000 8162 	beq.w	800a71a <_lv_blend_fill+0x9be>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800a456:	f1c5 0eff 	rsb	lr, r5, #255	; 0xff
 800a45a:	f890 c00e 	ldrb.w	ip, [r0, #14]
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800a45e:	7b47      	ldrb	r7, [r0, #13]
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800a460:	f890 a00c 	ldrb.w	sl, [r0, #12]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800a464:	fb0e fc0c 	mul.w	ip, lr, ip
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800a468:	fb0e f707 	mul.w	r7, lr, r7
 800a46c:	9b07      	ldr	r3, [sp, #28]
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800a46e:	fb0e fe0a 	mul.w	lr, lr, sl
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800a472:	fb03 7705 	mla	r7, r3, r5, r7
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800a476:	9b05      	ldr	r3, [sp, #20]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800a478:	fb0b cc05 	mla	ip, fp, r5, ip
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800a47c:	fb03 e505 	mla	r5, r3, r5, lr
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800a480:	eb07 2a07 	add.w	sl, r7, r7, lsl #8
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800a484:	eb0c 2e0c 	add.w	lr, ip, ip, lsl #8
 800a488:	f04f 33ff 	mov.w	r3, #4294967295
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800a48c:	eb07 17ca 	add.w	r7, r7, sl, lsl #7
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800a490:	eb0c 1cce 	add.w	ip, ip, lr, lsl #7
 800a494:	73c3      	strb	r3, [r0, #15]
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800a496:	eb05 2e05 	add.w	lr, r5, r5, lsl #8
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800a49a:	f3c7 57c7 	ubfx	r7, r7, #23, #8
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800a49e:	f3cc 5cc7 	ubfx	ip, ip, #23, #8
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800a4a2:	eb05 15ce 	add.w	r5, r5, lr, lsl #7
 800a4a6:	7347      	strb	r7, [r0, #13]
 800a4a8:	f880 c00e 	strb.w	ip, [r0, #14]
 800a4ac:	0ded      	lsrs	r5, r5, #23
 800a4ae:	7305      	strb	r5, [r0, #12]
                for(; x <= x_end4; x += 4) {
 800a4b0:	1935      	adds	r5, r6, r4
 800a4b2:	3010      	adds	r0, #16
 800a4b4:	45a9      	cmp	r9, r5
 800a4b6:	db0f      	blt.n	800a4d8 <_lv_blend_fill+0x77c>
                    if(*mask32) {
 800a4b8:	f854 5b04 	ldr.w	r5, [r4], #4
 800a4bc:	2d00      	cmp	r5, #0
 800a4be:	d0f7      	beq.n	800a4b0 <_lv_blend_fill+0x754>
                        if((*mask32) == 0xFFFFFFFF) {
 800a4c0:	3501      	adds	r5, #1
 800a4c2:	f47f af29 	bne.w	800a318 <_lv_blend_fill+0x5bc>
                for(; x <= x_end4; x += 4) {
 800a4c6:	1935      	adds	r5, r6, r4
 800a4c8:	45a9      	cmp	r9, r5
                            disp_buf_first[x + 1] = color;
 800a4ca:	e9c0 1100 	strd	r1, r1, [r0]
                            disp_buf_first[x + 3] = color;
 800a4ce:	e9c0 1102 	strd	r1, r1, [r0, #8]
                for(; x <= x_end4; x += 4) {
 800a4d2:	f100 0010 	add.w	r0, r0, #16
 800a4d6:	daef      	bge.n	800a4b8 <_lv_blend_fill+0x75c>
 800a4d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4da:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800a4dc:	eba9 0003 	sub.w	r0, r9, r3
 800a4e0:	42a3      	cmp	r3, r4
 800a4e2:	f103 0304 	add.w	r3, r3, #4
 800a4e6:	ea4f 0090 	mov.w	r0, r0, lsr #2
 800a4ea:	ea4f 0480 	mov.w	r4, r0, lsl #2
 800a4ee:	bfa8      	it	ge
 800a4f0:	2400      	movge	r4, #0
 800a4f2:	f100 0001 	add.w	r0, r0, #1
 800a4f6:	4423      	add	r3, r4
 800a4f8:	ea4f 0080 	mov.w	r0, r0, lsl #2
 800a4fc:	bfa8      	it	ge
 800a4fe:	2004      	movge	r0, #4
                for(; x < draw_area_w ; x++) {
 800a500:	4598      	cmp	r8, r3
 800a502:	4402      	add	r2, r0
 800a504:	f340 80f3 	ble.w	800a6ee <_lv_blend_fill+0x992>
                    FILL_NORMAL_MASK_PX(x, color)
 800a508:	7810      	ldrb	r0, [r2, #0]
 800a50a:	b398      	cbz	r0, 800a574 <_lv_blend_fill+0x818>
 800a50c:	28ff      	cmp	r0, #255	; 0xff
 800a50e:	f000 810c 	beq.w	800a72a <_lv_blend_fill+0x9ce>
 800a512:	9e06      	ldr	r6, [sp, #24]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800a514:	f1c0 04ff 	rsb	r4, r0, #255	; 0xff
 800a518:	eb06 0583 	add.w	r5, r6, r3, lsl #2
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800a51c:	f816 7023 	ldrb.w	r7, [r6, r3, lsl #2]
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800a520:	f895 c001 	ldrb.w	ip, [r5, #1]
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800a524:	fb04 f707 	mul.w	r7, r4, r7
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800a528:	78ae      	ldrb	r6, [r5, #2]
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800a52a:	fb04 fc0c 	mul.w	ip, r4, ip
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800a52e:	fb04 f606 	mul.w	r6, r4, r6
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800a532:	9c07      	ldr	r4, [sp, #28]
 800a534:	fb04 ca00 	mla	sl, r4, r0, ip
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800a538:	9c05      	ldr	r4, [sp, #20]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800a53a:	fb0b 6600 	mla	r6, fp, r0, r6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800a53e:	fb04 7000 	mla	r0, r4, r0, r7
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800a542:	eb0a 2e0a 	add.w	lr, sl, sl, lsl #8
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800a546:	eb06 2706 	add.w	r7, r6, r6, lsl #8
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800a54a:	eb00 2c00 	add.w	ip, r0, r0, lsl #8
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800a54e:	eb06 16c7 	add.w	r6, r6, r7, lsl #7
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800a552:	9f06      	ldr	r7, [sp, #24]
 800a554:	eb00 10cc 	add.w	r0, r0, ip, lsl #7
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800a558:	eb0a 14ce 	add.w	r4, sl, lr, lsl #7
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800a55c:	f3c6 56c7 	ubfx	r6, r6, #23, #8
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800a560:	0dc0      	lsrs	r0, r0, #23
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800a562:	f3c4 54c7 	ubfx	r4, r4, #23, #8
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800a566:	f807 0023 	strb.w	r0, [r7, r3, lsl #2]
 800a56a:	f04f 30ff 	mov.w	r0, #4294967295
 800a56e:	706c      	strb	r4, [r5, #1]
 800a570:	70e8      	strb	r0, [r5, #3]
 800a572:	70ae      	strb	r6, [r5, #2]
                for(; x < draw_area_w ; x++) {
 800a574:	1c5c      	adds	r4, r3, #1
 800a576:	45a0      	cmp	r8, r4
 800a578:	f340 80b9 	ble.w	800a6ee <_lv_blend_fill+0x992>
                    FILL_NORMAL_MASK_PX(x, color)
 800a57c:	7850      	ldrb	r0, [r2, #1]
 800a57e:	2800      	cmp	r0, #0
 800a580:	d03b      	beq.n	800a5fa <_lv_blend_fill+0x89e>
 800a582:	28ff      	cmp	r0, #255	; 0xff
 800a584:	f000 80d5 	beq.w	800a732 <_lv_blend_fill+0x9d6>
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800a588:	9e07      	ldr	r6, [sp, #28]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800a58a:	f1c0 0eff 	rsb	lr, r0, #255	; 0xff
 800a58e:	9d06      	ldr	r5, [sp, #24]
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800a590:	fb06 f600 	mul.w	r6, r6, r0
 800a594:	eb05 0c84 	add.w	ip, r5, r4, lsl #2
 800a598:	9609      	str	r6, [sp, #36]	; 0x24
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800a59a:	f815 6024 	ldrb.w	r6, [r5, r4, lsl #2]
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800a59e:	f89c a001 	ldrb.w	sl, [ip, #1]
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800a5a2:	960d      	str	r6, [sp, #52]	; 0x34
 800a5a4:	9e05      	ldr	r6, [sp, #20]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800a5a6:	f89c 5002 	ldrb.w	r5, [ip, #2]
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800a5aa:	fb16 f700 	smulbb	r7, r6, r0
 800a5ae:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800a5b0:	fb0b f000 	mul.w	r0, fp, r0
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800a5b4:	fb0e 7706 	mla	r7, lr, r6, r7
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800a5b8:	9e09      	ldr	r6, [sp, #36]	; 0x24
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800a5ba:	fb0e 0005 	mla	r0, lr, r5, r0
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800a5be:	fb0e 660a 	mla	r6, lr, sl, r6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800a5c2:	eb07 2e07 	add.w	lr, r7, r7, lsl #8
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800a5c6:	eb00 2500 	add.w	r5, r0, r0, lsl #8
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800a5ca:	eb06 2a06 	add.w	sl, r6, r6, lsl #8
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800a5ce:	eb07 17ce 	add.w	r7, r7, lr, lsl #7
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800a5d2:	eb00 10c5 	add.w	r0, r0, r5, lsl #7
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800a5d6:	9d06      	ldr	r5, [sp, #24]
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800a5d8:	eb06 16ca 	add.w	r6, r6, sl, lsl #7
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800a5dc:	0dff      	lsrs	r7, r7, #23
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800a5de:	f3c0 50c7 	ubfx	r0, r0, #23, #8
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800a5e2:	f3c6 56c7 	ubfx	r6, r6, #23, #8
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800a5e6:	f805 7024 	strb.w	r7, [r5, r4, lsl #2]
 800a5ea:	f04f 34ff 	mov.w	r4, #4294967295
 800a5ee:	f88c 6001 	strb.w	r6, [ip, #1]
 800a5f2:	f88c 4003 	strb.w	r4, [ip, #3]
 800a5f6:	f88c 0002 	strb.w	r0, [ip, #2]
                for(; x < draw_area_w ; x++) {
 800a5fa:	1c9c      	adds	r4, r3, #2
 800a5fc:	45a0      	cmp	r8, r4
 800a5fe:	dd76      	ble.n	800a6ee <_lv_blend_fill+0x992>
                    FILL_NORMAL_MASK_PX(x, color)
 800a600:	7890      	ldrb	r0, [r2, #2]
 800a602:	2800      	cmp	r0, #0
 800a604:	d03b      	beq.n	800a67e <_lv_blend_fill+0x922>
 800a606:	28ff      	cmp	r0, #255	; 0xff
 800a608:	f000 8102 	beq.w	800a810 <_lv_blend_fill+0xab4>
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800a60c:	9e07      	ldr	r6, [sp, #28]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800a60e:	f1c0 0eff 	rsb	lr, r0, #255	; 0xff
 800a612:	9d06      	ldr	r5, [sp, #24]
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800a614:	fb06 f600 	mul.w	r6, r6, r0
 800a618:	eb05 0c84 	add.w	ip, r5, r4, lsl #2
 800a61c:	9609      	str	r6, [sp, #36]	; 0x24
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800a61e:	f815 6024 	ldrb.w	r6, [r5, r4, lsl #2]
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800a622:	f89c a001 	ldrb.w	sl, [ip, #1]
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800a626:	960d      	str	r6, [sp, #52]	; 0x34
 800a628:	9e05      	ldr	r6, [sp, #20]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800a62a:	f89c 5002 	ldrb.w	r5, [ip, #2]
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800a62e:	fb16 f700 	smulbb	r7, r6, r0
 800a632:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800a634:	fb0b f000 	mul.w	r0, fp, r0
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800a638:	fb0e 7706 	mla	r7, lr, r6, r7
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800a63c:	9e09      	ldr	r6, [sp, #36]	; 0x24
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800a63e:	fb0e 0005 	mla	r0, lr, r5, r0
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800a642:	fb0e 660a 	mla	r6, lr, sl, r6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800a646:	eb07 2e07 	add.w	lr, r7, r7, lsl #8
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800a64a:	eb00 2500 	add.w	r5, r0, r0, lsl #8
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800a64e:	eb06 2a06 	add.w	sl, r6, r6, lsl #8
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800a652:	eb07 17ce 	add.w	r7, r7, lr, lsl #7
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800a656:	eb00 10c5 	add.w	r0, r0, r5, lsl #7
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800a65a:	9d06      	ldr	r5, [sp, #24]
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800a65c:	eb06 16ca 	add.w	r6, r6, sl, lsl #7
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800a660:	0dff      	lsrs	r7, r7, #23
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800a662:	f3c0 50c7 	ubfx	r0, r0, #23, #8
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800a666:	f3c6 56c7 	ubfx	r6, r6, #23, #8
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800a66a:	f805 7024 	strb.w	r7, [r5, r4, lsl #2]
 800a66e:	f04f 34ff 	mov.w	r4, #4294967295
 800a672:	f88c 6001 	strb.w	r6, [ip, #1]
 800a676:	f88c 4003 	strb.w	r4, [ip, #3]
 800a67a:	f88c 0002 	strb.w	r0, [ip, #2]
                for(; x < draw_area_w ; x++) {
 800a67e:	3303      	adds	r3, #3
 800a680:	4598      	cmp	r8, r3
 800a682:	dd34      	ble.n	800a6ee <_lv_blend_fill+0x992>
                    FILL_NORMAL_MASK_PX(x, color)
 800a684:	78d2      	ldrb	r2, [r2, #3]
 800a686:	b392      	cbz	r2, 800a6ee <_lv_blend_fill+0x992>
 800a688:	2aff      	cmp	r2, #255	; 0xff
 800a68a:	f000 8158 	beq.w	800a93e <_lv_blend_fill+0xbe2>
 800a68e:	9c06      	ldr	r4, [sp, #24]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800a690:	f1c2 00ff 	rsb	r0, r2, #255	; 0xff
 800a694:	eb04 0583 	add.w	r5, r4, r3, lsl #2
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800a698:	f814 6023 	ldrb.w	r6, [r4, r3, lsl #2]
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800a69c:	786f      	ldrb	r7, [r5, #1]
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800a69e:	fb00 f606 	mul.w	r6, r0, r6
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800a6a2:	78ac      	ldrb	r4, [r5, #2]
 800a6a4:	fb00 f404 	mul.w	r4, r0, r4
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800a6a8:	fb00 f007 	mul.w	r0, r0, r7
 800a6ac:	9f07      	ldr	r7, [sp, #28]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800a6ae:	fb0b 4402 	mla	r4, fp, r2, r4
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800a6b2:	fb07 0002 	mla	r0, r7, r2, r0
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800a6b6:	9f05      	ldr	r7, [sp, #20]
 800a6b8:	fb07 6202 	mla	r2, r7, r2, r6
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800a6bc:	eb00 2c00 	add.w	ip, r0, r0, lsl #8
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800a6c0:	eb04 2604 	add.w	r6, r4, r4, lsl #8
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800a6c4:	eb02 2702 	add.w	r7, r2, r2, lsl #8
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800a6c8:	eb04 14c6 	add.w	r4, r4, r6, lsl #7
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800a6cc:	9e06      	ldr	r6, [sp, #24]
 800a6ce:	eb02 12c7 	add.w	r2, r2, r7, lsl #7
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800a6d2:	eb00 10cc 	add.w	r0, r0, ip, lsl #7
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800a6d6:	f3c4 54c7 	ubfx	r4, r4, #23, #8
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800a6da:	0dd2      	lsrs	r2, r2, #23
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800a6dc:	f3c0 50c7 	ubfx	r0, r0, #23, #8
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800a6e0:	f806 2023 	strb.w	r2, [r6, r3, lsl #2]
 800a6e4:	f04f 33ff 	mov.w	r3, #4294967295
 800a6e8:	7068      	strb	r0, [r5, #1]
 800a6ea:	70eb      	strb	r3, [r5, #3]
 800a6ec:	70ac      	strb	r4, [r5, #2]
                disp_buf_first += disp_w;
 800a6ee:	9a06      	ldr	r2, [sp, #24]
 800a6f0:	980b      	ldr	r0, [sp, #44]	; 0x2c
            for(y = 0; y < draw_area_h; y++) {
 800a6f2:	9b08      	ldr	r3, [sp, #32]
                disp_buf_first += disp_w;
 800a6f4:	4402      	add	r2, r0
            for(y = 0; y < draw_area_h; y++) {
 800a6f6:	3301      	adds	r3, #1
                disp_buf_first += disp_w;
 800a6f8:	9206      	str	r2, [sp, #24]
                mask += draw_area_w;
 800a6fa:	9a04      	ldr	r2, [sp, #16]
            for(y = 0; y < draw_area_h; y++) {
 800a6fc:	9308      	str	r3, [sp, #32]
                mask += draw_area_w;
 800a6fe:	4442      	add	r2, r8
 800a700:	9204      	str	r2, [sp, #16]
            for(y = 0; y < draw_area_h; y++) {
 800a702:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a704:	429a      	cmp	r2, r3
 800a706:	f47f ada9 	bne.w	800a25c <_lv_blend_fill+0x500>
 800a70a:	f7ff bbf3 	b.w	8009ef4 <_lv_blend_fill+0x198>
                            FILL_NORMAL_MASK_PX(x, color)
 800a70e:	6001      	str	r1, [r0, #0]
 800a710:	e635      	b.n	800a37e <_lv_blend_fill+0x622>
                            FILL_NORMAL_MASK_PX(x + 1, color)
 800a712:	6041      	str	r1, [r0, #4]
 800a714:	e666      	b.n	800a3e4 <_lv_blend_fill+0x688>
                            FILL_NORMAL_MASK_PX(x + 2, color)
 800a716:	6081      	str	r1, [r0, #8]
 800a718:	e697      	b.n	800a44a <_lv_blend_fill+0x6ee>
                            FILL_NORMAL_MASK_PX(x + 3, color)
 800a71a:	60c1      	str	r1, [r0, #12]
 800a71c:	e6c8      	b.n	800a4b0 <_lv_blend_fill+0x754>
 800a71e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
                for(; x <= x_end4; x += 4) {
 800a722:	4599      	cmp	r9, r3
 800a724:	f6bf adec 	bge.w	800a300 <_lv_blend_fill+0x5a4>
 800a728:	e6ee      	b.n	800a508 <_lv_blend_fill+0x7ac>
                    FILL_NORMAL_MASK_PX(x, color)
 800a72a:	9806      	ldr	r0, [sp, #24]
 800a72c:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 800a730:	e720      	b.n	800a574 <_lv_blend_fill+0x818>
 800a732:	9806      	ldr	r0, [sp, #24]
 800a734:	f840 1024 	str.w	r1, [r0, r4, lsl #2]
 800a738:	e75f      	b.n	800a5fa <_lv_blend_fill+0x89e>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800a73a:	fb16 f00b 	smulbb	r0, r6, fp
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800a73e:	990b      	ldr	r1, [sp, #44]	; 0x2c
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800a740:	9f05      	ldr	r7, [sp, #20]
        lv_color_t last_dest_color = LV_COLOR_BLACK;
 800a742:	f04f 487f 	mov.w	r8, #4278190080	; 0xff000000
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800a746:	fb1b f101 	smulbb	r1, fp, r1
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800a74a:	eb00 2c00 	add.w	ip, r0, r0, lsl #8
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800a74e:	fb1b fe07 	smulbb	lr, fp, r7
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800a752:	eb00 10cc 	add.w	r0, r0, ip, lsl #7
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800a756:	eb01 2701 	add.w	r7, r1, r1, lsl #8
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800a75a:	eb0e 2c0e 	add.w	ip, lr, lr, lsl #8
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800a75e:	f3c0 59c7 	ubfx	r9, r0, #23, #8
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800a762:	eb01 17c7 	add.w	r7, r1, r7, lsl #7
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800a766:	9808      	ldr	r0, [sp, #32]
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800a768:	4671      	mov	r1, lr
 800a76a:	4290      	cmp	r0, r2
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800a76c:	f3c7 5ec7 	ubfx	lr, r7, #23, #8
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800a770:	eb01 11cc 	add.w	r1, r1, ip, lsl #7
 800a774:	f3c1 5cc7 	ubfx	ip, r1, #23, #8
 800a778:	f73f abbc 	bgt.w	8009ef4 <_lv_blend_fill+0x198>
            disp_buf_tmp += disp_w;
 800a77c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a77e:	ea4f 0a80 	mov.w	sl, r0, lsl #2
 800a782:	20ff      	movs	r0, #255	; 0xff
 800a784:	f8cd a010 	str.w	sl, [sp, #16]
 800a788:	46b2      	mov	sl, r6
 800a78a:	4646      	mov	r6, r8
 800a78c:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 800a790:	429c      	cmp	r4, r3
 800a792:	dc30      	bgt.n	800a7f6 <_lv_blend_fill+0xa9a>
 800a794:	9a07      	ldr	r2, [sp, #28]
 800a796:	eb02 0784 	add.w	r7, r2, r4, lsl #2
 800a79a:	e022      	b.n	800a7e2 <_lv_blend_fill+0xa86>
                    last_res_color = blend_fp(color, disp_buf_tmp[x], opa);
 800a79c:	9b05      	ldr	r3, [sp, #20]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 800a79e:	3401      	adds	r4, #1
                    last_dest_color = disp_buf_tmp[x];
 800a7a0:	f857 6c04 	ldr.w	r6, [r7, #-4]
                    last_res_color = blend_fp(color, disp_buf_tmp[x], opa);
 800a7a4:	f363 0507 	bfi	r5, r3, #0, #8
 800a7a8:	9b06      	ldr	r3, [sp, #24]
 800a7aa:	f368 250f 	bfi	r5, r8, #8, #8
 800a7ae:	f36a 4517 	bfi	r5, sl, #16, #8
 800a7b2:	4628      	mov	r0, r5
 800a7b4:	4798      	blx	r3
                disp_buf_tmp[x] = last_res_color;
 800a7b6:	2200      	movs	r2, #0
                    last_res_color = blend_fp(color, disp_buf_tmp[x], opa);
 800a7b8:	fa5f fc80 	uxtb.w	ip, r0
 800a7bc:	f3c0 2e07 	ubfx	lr, r0, #8, #8
 800a7c0:	f3c0 4907 	ubfx	r9, r0, #16, #8
 800a7c4:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 800a7c8:	0e00      	lsrs	r0, r0, #24
                disp_buf_tmp[x] = last_res_color;
 800a7ca:	f36c 0207 	bfi	r2, ip, #0, #8
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 800a7ce:	429c      	cmp	r4, r3
                disp_buf_tmp[x] = last_res_color;
 800a7d0:	f36e 220f 	bfi	r2, lr, #8, #8
 800a7d4:	f369 4217 	bfi	r2, r9, #16, #8
 800a7d8:	f360 621f 	bfi	r2, r0, #24, #8
 800a7dc:	f847 2c04 	str.w	r2, [r7, #-4]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 800a7e0:	dc07      	bgt.n	800a7f2 <_lv_blend_fill+0xa96>
                if(last_dest_color.full != disp_buf_tmp[x].full) {
 800a7e2:	6839      	ldr	r1, [r7, #0]
                    last_res_color = blend_fp(color, disp_buf_tmp[x], opa);
 800a7e4:	465a      	mov	r2, fp
                if(last_dest_color.full != disp_buf_tmp[x].full) {
 800a7e6:	3704      	adds	r7, #4
 800a7e8:	428e      	cmp	r6, r1
 800a7ea:	d1d7      	bne.n	800a79c <_lv_blend_fill+0xa40>
                disp_buf_tmp[x] = last_res_color;
 800a7ec:	2200      	movs	r2, #0
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 800a7ee:	3401      	adds	r4, #1
 800a7f0:	e7eb      	b.n	800a7ca <_lv_blend_fill+0xa6e>
 800a7f2:	f9bd 203e 	ldrsh.w	r2, [sp, #62]	; 0x3e
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800a7f6:	9908      	ldr	r1, [sp, #32]
            disp_buf_tmp += disp_w;
 800a7f8:	9c07      	ldr	r4, [sp, #28]
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800a7fa:	3101      	adds	r1, #1
            disp_buf_tmp += disp_w;
 800a7fc:	9f04      	ldr	r7, [sp, #16]
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800a7fe:	4291      	cmp	r1, r2
            disp_buf_tmp += disp_w;
 800a800:	443c      	add	r4, r7
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800a802:	9108      	str	r1, [sp, #32]
            disp_buf_tmp += disp_w;
 800a804:	9407      	str	r4, [sp, #28]
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800a806:	f73f ab75 	bgt.w	8009ef4 <_lv_blend_fill+0x198>
 800a80a:	f9bd 4038 	ldrsh.w	r4, [sp, #56]	; 0x38
 800a80e:	e7bf      	b.n	800a790 <_lv_blend_fill+0xa34>
                    FILL_NORMAL_MASK_PX(x, color)
 800a810:	9806      	ldr	r0, [sp, #24]
 800a812:	f840 1024 	str.w	r1, [r0, r4, lsl #2]
 800a816:	e732      	b.n	800a67e <_lv_blend_fill+0x922>
            if(disp->driver.gpu_blend_cb && lv_area_get_size(draw_area) > GPU_SIZE_LIMIT) {
 800a818:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
 800a81c:	b12b      	cbz	r3, 800a82a <_lv_blend_fill+0xace>
 800a81e:	a80e      	add	r0, sp, #56	; 0x38
 800a820:	f009 fb80 	bl	8013f24 <lv_area_get_size>
 800a824:	28f0      	cmp	r0, #240	; 0xf0
 800a826:	f200 8090 	bhi.w	800a94a <_lv_blend_fill+0xbee>
            lv_color_t last_res_color = lv_color_mix(color, last_dest_color, opa);
 800a82a:	9b05      	ldr	r3, [sp, #20]
            lv_opa_t opa_inv = 255 - opa;
 800a82c:	ea6f 040b 	mvn.w	r4, fp
            lv_color_t last_dest_color = LV_COLOR_BLACK;
 800a830:	f04f 457f 	mov.w	r5, #4278190080	; 0xff000000
            lv_color_t last_res_color = lv_color_mix(color, last_dest_color, opa);
 800a834:	f3c3 4607 	ubfx	r6, r3, #16, #8
 800a838:	fa5f fc83 	uxtb.w	ip, r3
 800a83c:	f3c3 2e07 	ubfx	lr, r3, #8, #8
            lv_opa_t opa_inv = 255 - opa;
 800a840:	b2e4      	uxtb	r4, r4
 800a842:	fb1b f00c 	smulbb	r0, fp, ip
}

LV_ATTRIBUTE_FAST_MEM static inline void lv_color_premult(lv_color_t c, uint8_t mix, uint16_t * out)
{
#if LV_COLOR_DEPTH != 1
    out[0] = (uint16_t) LV_COLOR_GET_R(c) * mix;
 800a846:	fb06 f70b 	mul.w	r7, r6, fp
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800a84a:	fb16 f20b 	smulbb	r2, r6, fp
    out[1] = (uint16_t) LV_COLOR_GET_G(c) * mix;
    out[2] = (uint16_t) LV_COLOR_GET_B(c) * mix;
 800a84e:	fb0c fc0b 	mul.w	ip, ip, fp
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800a852:	fb1b f30e 	smulbb	r3, fp, lr
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800a856:	eb00 2100 	add.w	r1, r0, r0, lsl #8
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800a85a:	eb02 2602 	add.w	r6, r2, r2, lsl #8
    out[1] = (uint16_t) LV_COLOR_GET_G(c) * mix;
 800a85e:	fb0e fe0b 	mul.w	lr, lr, fp
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800a862:	eb00 10c1 	add.w	r0, r0, r1, lsl #7
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800a866:	eb02 11c6 	add.w	r1, r2, r6, lsl #7
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800a86a:	eb03 2203 	add.w	r2, r3, r3, lsl #8
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800a86e:	f3c0 50c7 	ubfx	r0, r0, #23, #8
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800a872:	f3c1 51c7 	ubfx	r1, r1, #23, #8
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800a876:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 800a87a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
            for(y = 0; y < draw_area_h; y++) {
 800a87e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a880:	2b00      	cmp	r3, #0
 800a882:	f77f ab37 	ble.w	8009ef4 <_lv_blend_fill+0x198>
                disp_buf_first += disp_w;
 800a886:	ea4f 0389 	mov.w	r3, r9, lsl #2
 800a88a:	f1b8 0f00 	cmp.w	r8, #0
 800a88e:	9304      	str	r3, [sp, #16]
 800a890:	f77f ab30 	ble.w	8009ef4 <_lv_blend_fill+0x198>
 800a894:	9b06      	ldr	r3, [sp, #24]
 800a896:	4683      	mov	fp, r0
            for(y = 0; y < draw_area_h; y++) {
 800a898:	f04f 0900 	mov.w	r9, #0
 800a89c:	4608      	mov	r0, r1
 800a89e:	eb03 0688 	add.w	r6, r3, r8, lsl #2
 800a8a2:	4611      	mov	r1, r2
                    disp_buf_first[x] = last_res_color;
 800a8a4:	f04f 08ff 	mov.w	r8, #255	; 0xff
                for(x = 0; x < draw_area_w; x++) {
 800a8a8:	9b06      	ldr	r3, [sp, #24]
                    if(last_dest_color.full != disp_buf_first[x].full) {
 800a8aa:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8ae:	4295      	cmp	r5, r2
 800a8b0:	d037      	beq.n	800a922 <_lv_blend_fill+0xbc6>
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix_premult(uint16_t * premult_c1, lv_color_t c2, uint8_t mix)
{
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800a8b2:	f813 0c02 	ldrb.w	r0, [r3, #-2]
                for(x = 0; x < draw_area_w; x++) {
 800a8b6:	429e      	cmp	r6, r3
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800a8b8:	f813 1c03 	ldrb.w	r1, [r3, #-3]
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800a8bc:	f813 2c04 	ldrb.w	r2, [r3, #-4]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800a8c0:	fb00 7004 	mla	r0, r0, r4, r7
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800a8c4:	fb01 e104 	mla	r1, r1, r4, lr
                        last_dest_color = disp_buf_first[x];
 800a8c8:	f853 5c04 	ldr.w	r5, [r3, #-4]
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800a8cc:	fb02 c204 	mla	r2, r2, r4, ip
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800a8d0:	eb00 2b00 	add.w	fp, r0, r0, lsl #8
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800a8d4:	eb01 2a01 	add.w	sl, r1, r1, lsl #8
                    disp_buf_first[x] = last_res_color;
 800a8d8:	f803 8c01 	strb.w	r8, [r3, #-1]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800a8dc:	eb00 10cb 	add.w	r0, r0, fp, lsl #7
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800a8e0:	eb02 2b02 	add.w	fp, r2, r2, lsl #8
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800a8e4:	eb01 11ca 	add.w	r1, r1, sl, lsl #7
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800a8e8:	f3c0 50c7 	ubfx	r0, r0, #23, #8
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800a8ec:	eb02 12cb 	add.w	r2, r2, fp, lsl #7
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800a8f0:	f3c1 51c7 	ubfx	r1, r1, #23, #8
 800a8f4:	f803 0c02 	strb.w	r0, [r3, #-2]
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800a8f8:	f3c2 5bc7 	ubfx	fp, r2, #23, #8
 800a8fc:	f803 1c03 	strb.w	r1, [r3, #-3]
 800a900:	f803 bc04 	strb.w	fp, [r3, #-4]
                for(x = 0; x < draw_area_w; x++) {
 800a904:	d1d1      	bne.n	800a8aa <_lv_blend_fill+0xb4e>
                disp_buf_first += disp_w;
 800a906:	9a06      	ldr	r2, [sp, #24]
            for(y = 0; y < draw_area_h; y++) {
 800a908:	f109 0901 	add.w	r9, r9, #1
                disp_buf_first += disp_w;
 800a90c:	9b04      	ldr	r3, [sp, #16]
 800a90e:	4692      	mov	sl, r2
 800a910:	441e      	add	r6, r3
 800a912:	449a      	add	sl, r3
            for(y = 0; y < draw_area_h; y++) {
 800a914:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a916:	454b      	cmp	r3, r9
                disp_buf_first += disp_w;
 800a918:	f8cd a018 	str.w	sl, [sp, #24]
            for(y = 0; y < draw_area_h; y++) {
 800a91c:	d1c4      	bne.n	800a8a8 <_lv_blend_fill+0xb4c>
 800a91e:	f7ff bae9 	b.w	8009ef4 <_lv_blend_fill+0x198>
                for(x = 0; x < draw_area_w; x++) {
 800a922:	429e      	cmp	r6, r3
                    disp_buf_first[x] = last_res_color;
 800a924:	f803 bc04 	strb.w	fp, [r3, #-4]
 800a928:	f803 1c03 	strb.w	r1, [r3, #-3]
 800a92c:	f803 0c02 	strb.w	r0, [r3, #-2]
 800a930:	f803 8c01 	strb.w	r8, [r3, #-1]
                for(x = 0; x < draw_area_w; x++) {
 800a934:	d1b9      	bne.n	800a8aa <_lv_blend_fill+0xb4e>
 800a936:	e7e6      	b.n	800a906 <_lv_blend_fill+0xbaa>
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
 800a938:	9a04      	ldr	r2, [sp, #16]
 800a93a:	2300      	movs	r3, #0
 800a93c:	e4dd      	b.n	800a2fa <_lv_blend_fill+0x59e>
                    FILL_NORMAL_MASK_PX(x, color)
 800a93e:	9a06      	ldr	r2, [sp, #24]
 800a940:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800a944:	e6d3      	b.n	800a6ee <_lv_blend_fill+0x992>
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
 800a946:	4622      	mov	r2, r4
 800a948:	e6eb      	b.n	800a722 <_lv_blend_fill+0x9c6>
                for(x = 0; x < draw_area_w ; x++) blend_buf[x].full = color.full;
 800a94a:	f1b8 0f00 	cmp.w	r8, #0
 800a94e:	dd24      	ble.n	800a99a <_lv_blend_fill+0xc3e>
 800a950:	f108 33ff 	add.w	r3, r8, #4294967295
 800a954:	2b02      	cmp	r3, #2
 800a956:	d93e      	bls.n	800a9d6 <_lv_blend_fill+0xc7a>
 800a958:	4a20      	ldr	r2, [pc, #128]	; (800a9dc <_lv_blend_fill+0xc80>)
 800a95a:	ea4f 0358 	mov.w	r3, r8, lsr #1
 800a95e:	4654      	mov	r4, sl
 800a960:	9805      	ldr	r0, [sp, #20]
 800a962:	4611      	mov	r1, r2
 800a964:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800a968:	460b      	mov	r3, r1
 800a96a:	e9c3 0000 	strd	r0, r0, [r3]
 800a96e:	3308      	adds	r3, #8
 800a970:	4293      	cmp	r3, r2
 800a972:	d1fa      	bne.n	800a96a <_lv_blend_fill+0xc0e>
 800a974:	f018 0f01 	tst.w	r8, #1
 800a978:	46a2      	mov	sl, r4
 800a97a:	f028 0601 	bic.w	r6, r8, #1
 800a97e:	d00c      	beq.n	800a99a <_lv_blend_fill+0xc3e>
 800a980:	1c73      	adds	r3, r6, #1
 800a982:	9a05      	ldr	r2, [sp, #20]
 800a984:	4598      	cmp	r8, r3
 800a986:	f841 2026 	str.w	r2, [r1, r6, lsl #2]
 800a98a:	dd06      	ble.n	800a99a <_lv_blend_fill+0xc3e>
 800a98c:	3602      	adds	r6, #2
 800a98e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800a992:	45b0      	cmp	r8, r6
 800a994:	dd01      	ble.n	800a99a <_lv_blend_fill+0xc3e>
 800a996:	f841 2026 	str.w	r2, [r1, r6, lsl #2]
                for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800a99a:	f9bd 603a 	ldrsh.w	r6, [sp, #58]	; 0x3a
 800a99e:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 800a9a2:	429e      	cmp	r6, r3
 800a9a4:	f73f aaa6 	bgt.w	8009ef4 <_lv_blend_fill+0x198>
                    disp_buf_first += disp_w;
 800a9a8:	ea4f 0989 	mov.w	r9, r9, lsl #2
                    disp->driver.gpu_blend_cb(&disp->driver, disp_buf_first, blend_buf, draw_area_w, opa);
 800a9ac:	ed9f 8a0b 	vldr	s16, [pc, #44]	; 800a9dc <_lv_blend_fill+0xc80>
 800a9b0:	4654      	mov	r4, sl
 800a9b2:	9d06      	ldr	r5, [sp, #24]
 800a9b4:	ee18 2a10 	vmov	r2, s16
 800a9b8:	4629      	mov	r1, r5
 800a9ba:	f8cd b000 	str.w	fp, [sp]
 800a9be:	4643      	mov	r3, r8
 800a9c0:	4620      	mov	r0, r4
 800a9c2:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800a9c4:	47b8      	blx	r7
                for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800a9c6:	3601      	adds	r6, #1
 800a9c8:	f9bd 203e 	ldrsh.w	r2, [sp, #62]	; 0x3e
                    disp_buf_first += disp_w;
 800a9cc:	444d      	add	r5, r9
                for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800a9ce:	4296      	cmp	r6, r2
 800a9d0:	ddf0      	ble.n	800a9b4 <_lv_blend_fill+0xc58>
 800a9d2:	f7ff ba8f 	b.w	8009ef4 <_lv_blend_fill+0x198>
 800a9d6:	4901      	ldr	r1, [pc, #4]	; (800a9dc <_lv_blend_fill+0xc80>)
 800a9d8:	e7d2      	b.n	800a980 <_lv_blend_fill+0xc24>
 800a9da:	bf00      	nop
 800a9dc:	200178a8 	.word	0x200178a8

0800a9e0 <_lv_blend_map>:
{
 800a9e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9e4:	ed2d 8b02 	vpush	{d8}
 800a9e8:	b093      	sub	sp, #76	; 0x4c
 800a9ea:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
 800a9ee:	f89d b07c 	ldrb.w	fp, [sp, #124]	; 0x7c
 800a9f2:	f89d 6080 	ldrb.w	r6, [sp, #128]	; 0x80
 800a9f6:	9304      	str	r3, [sp, #16]
    if(mask_res == LV_DRAW_MASK_RES_TRANSP) return;
 800a9f8:	b155      	cbz	r5, 800aa10 <_lv_blend_map+0x30>
 800a9fa:	f1bb 0f01 	cmp.w	fp, #1
 800a9fe:	d907      	bls.n	800aa10 <_lv_blend_map+0x30>
    is_common = _lv_area_intersect(&draw_area, clip_area, map_area);
 800aa00:	4688      	mov	r8, r1
 800aa02:	4692      	mov	sl, r2
 800aa04:	4601      	mov	r1, r0
 800aa06:	a810      	add	r0, sp, #64	; 0x40
 800aa08:	4642      	mov	r2, r8
 800aa0a:	f009 fa99 	bl	8013f40 <_lv_area_intersect>
    if(!is_common) return;
 800aa0e:	b920      	cbnz	r0, 800aa1a <_lv_blend_map+0x3a>
}
 800aa10:	b013      	add	sp, #76	; 0x4c
 800aa12:	ecbd 8b02 	vpop	{d8}
 800aa16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 800aa1a:	f7fd fcab 	bl	8008374 <_lv_refr_get_disp_refreshing>
 800aa1e:	4681      	mov	r9, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 800aa20:	f008 ffa0 	bl	8013964 <lv_disp_get_buf>
    lv_color_t * disp_buf = vdb->buf_act;
 800aa24:	6882      	ldr	r2, [r0, #8]
    if(disp->driver.gpu_wait_cb) disp->driver.gpu_wait_cb(&disp->driver);
 800aa26:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 800aa2a:	4607      	mov	r7, r0
    lv_color_t * disp_buf = vdb->buf_act;
 800aa2c:	ee08 2a10 	vmov	s16, r2
    if(disp->driver.gpu_wait_cb) disp->driver.gpu_wait_cb(&disp->driver);
 800aa30:	b10b      	cbz	r3, 800aa36 <_lv_blend_map+0x56>
 800aa32:	4648      	mov	r0, r9
 800aa34:	4798      	blx	r3
    draw_area.x1 -= disp_area->x1;
 800aa36:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
    draw_area.x2 -= disp_area->x1;
 800aa3a:	f8bd 2044 	ldrh.w	r2, [sp, #68]	; 0x44
    draw_area.x1 -= disp_area->x1;
 800aa3e:	f8b7 c010 	ldrh.w	ip, [r7, #16]
    draw_area.y1 -= disp_area->y1;
 800aa42:	f8bd 1042 	ldrh.w	r1, [sp, #66]	; 0x42
    draw_area.x1 -= disp_area->x1;
 800aa46:	eba3 040c 	sub.w	r4, r3, ip
 800aa4a:	9306      	str	r3, [sp, #24]
    draw_area.x2 -= disp_area->x1;
 800aa4c:	eba2 0c0c 	sub.w	ip, r2, ip
    draw_area.y1 -= disp_area->y1;
 800aa50:	8a7b      	ldrh	r3, [r7, #18]
    draw_area.x2 -= disp_area->x1;
 800aa52:	9207      	str	r2, [sp, #28]
    draw_area.x1 -= disp_area->x1;
 800aa54:	b224      	sxth	r4, r4
    draw_area.y2 -= disp_area->y1;
 800aa56:	f8bd 2046 	ldrh.w	r2, [sp, #70]	; 0x46
    draw_area.y1 -= disp_area->y1;
 800aa5a:	eba1 0e03 	sub.w	lr, r1, r3
    draw_area.x2 -= disp_area->x1;
 800aa5e:	fa0f fc8c 	sxth.w	ip, ip
    draw_area.y1 -= disp_area->y1;
 800aa62:	9105      	str	r1, [sp, #20]
    draw_area.y2 -= disp_area->y1;
 800aa64:	1ad3      	subs	r3, r2, r3
    draw_area.y1 -= disp_area->y1;
 800aa66:	fa0f fe8e 	sxth.w	lr, lr
    draw_area.y2 -= disp_area->y1;
 800aa6a:	9208      	str	r2, [sp, #32]
 800aa6c:	b21b      	sxth	r3, r3
    if(mask && disp->driver.antialiasing == 0)
 800aa6e:	9a04      	ldr	r2, [sp, #16]
    draw_area.x1 -= disp_area->x1;
 800aa70:	f8ad 4040 	strh.w	r4, [sp, #64]	; 0x40
    draw_area.x2 -= disp_area->x1;
 800aa74:	f8ad c044 	strh.w	ip, [sp, #68]	; 0x44
    draw_area.y1 -= disp_area->y1;
 800aa78:	f8ad e042 	strh.w	lr, [sp, #66]	; 0x42
    draw_area.y2 -= disp_area->y1;
 800aa7c:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
    if(mask && disp->driver.antialiasing == 0)
 800aa80:	b1b2      	cbz	r2, 800aab0 <_lv_blend_map+0xd0>
 800aa82:	f899 2008 	ldrb.w	r2, [r9, #8]
 800aa86:	07d1      	lsls	r1, r2, #31
 800aa88:	d412      	bmi.n	800aab0 <_lv_blend_map+0xd0>
 800aa8a:	9a07      	ldr	r2, [sp, #28]
 800aa8c:	1c50      	adds	r0, r2, #1
 800aa8e:	9a06      	ldr	r2, [sp, #24]
 800aa90:	1a80      	subs	r0, r0, r2
 800aa92:	b200      	sxth	r0, r0
        for(i = 0; i < mask_w; i++)  mask[i] = mask[i] > 128 ? LV_OPA_COVER : LV_OPA_TRANSP;
 800aa94:	2800      	cmp	r0, #0
 800aa96:	dd0b      	ble.n	800aab0 <_lv_blend_map+0xd0>
 800aa98:	9a04      	ldr	r2, [sp, #16]
 800aa9a:	4410      	add	r0, r2
 800aa9c:	7811      	ldrb	r1, [r2, #0]
 800aa9e:	2980      	cmp	r1, #128	; 0x80
 800aaa0:	f04f 31ff 	mov.w	r1, #4294967295
 800aaa4:	bf98      	it	ls
 800aaa6:	2100      	movls	r1, #0
 800aaa8:	f802 1b01 	strb.w	r1, [r2], #1
 800aaac:	4290      	cmp	r0, r2
 800aaae:	d1f5      	bne.n	800aa9c <_lv_blend_map+0xbc>
    if(disp->driver.set_px_cb) {
 800aab0:	f8d9 2014 	ldr.w	r2, [r9, #20]
 800aab4:	2a00      	cmp	r2, #0
 800aab6:	f000 8083 	beq.w	800abc0 <_lv_blend_map+0x1e0>
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 800aaba:	f7fd fc5b 	bl	8008374 <_lv_refr_get_disp_refreshing>
 800aabe:	f8b8 2004 	ldrh.w	r2, [r8, #4]
    int32_t map_w = lv_area_get_width(map_area);
 800aac2:	f9b8 4000 	ldrsh.w	r4, [r8]
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 800aac6:	4606      	mov	r6, r0
    const lv_color_t * map_buf_tmp = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
 800aac8:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 800aacc:	3201      	adds	r2, #1
 800aace:	f9b8 3002 	ldrsh.w	r3, [r8, #2]
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
 800aad2:	2d01      	cmp	r5, #1
 800aad4:	eba2 0204 	sub.w	r2, r2, r4
    const lv_color_t * map_buf_tmp = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
 800aad8:	f9bd 8042 	ldrsh.w	r8, [sp, #66]	; 0x42
 800aadc:	eba3 0301 	sub.w	r3, r3, r1
    int32_t disp_w = lv_area_get_width(disp_area);
 800aae0:	f9b7 1010 	ldrsh.w	r1, [r7, #16]
 800aae4:	f8b7 9014 	ldrh.w	r9, [r7, #20]
 800aae8:	b212      	sxth	r2, r2
    map_buf_tmp -= draw_area->x1;
 800aaea:	eba1 0004 	sub.w	r0, r1, r4
    const lv_color_t * map_buf_tmp = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
 800aaee:	eba8 0303 	sub.w	r3, r8, r3
 800aaf2:	f109 0901 	add.w	r9, r9, #1
    int32_t draw_area_w = lv_area_get_width(draw_area);
 800aaf6:	f9bd 4040 	ldrsh.w	r4, [sp, #64]	; 0x40
    map_buf_tmp -= draw_area->x1;
 800aafa:	fb02 0303 	mla	r3, r2, r3, r0
    int32_t draw_area_w = lv_area_get_width(draw_area);
 800aafe:	f9bd 7044 	ldrsh.w	r7, [sp, #68]	; 0x44
 800ab02:	eba9 0901 	sub.w	r9, r9, r1
 800ab06:	f1c4 0100 	rsb	r1, r4, #0
    map_buf_tmp -= draw_area->x1;
 800ab0a:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 800ab0e:	fa0f f989 	sxth.w	r9, r9
 800ab12:	9305      	str	r3, [sp, #20]
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800ab14:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
 800ab18:	f000 8173 	beq.w	800ae02 <_lv_blend_map+0x422>
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
 800ab1c:	9804      	ldr	r0, [sp, #16]
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800ab1e:	4598      	cmp	r8, r3
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
 800ab20:	4408      	add	r0, r1
 800ab22:	9006      	str	r0, [sp, #24]
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800ab24:	f73f af74 	bgt.w	800aa10 <_lv_blend_map+0x30>
            map_buf_tmp += map_w;
 800ab28:	0092      	lsls	r2, r2, #2
 800ab2a:	1c79      	adds	r1, r7, #1
 800ab2c:	f8cd b020 	str.w	fp, [sp, #32]
 800ab30:	ee18 ba10 	vmov	fp, s16
 800ab34:	9209      	str	r2, [sp, #36]	; 0x24
 800ab36:	1b0a      	subs	r2, r1, r4
 800ab38:	b212      	sxth	r2, r2
 800ab3a:	920a      	str	r2, [sp, #40]	; 0x28
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 800ab3c:	42bc      	cmp	r4, r7
 800ab3e:	dc28      	bgt.n	800ab92 <_lv_blend_map+0x1b2>
 800ab40:	9b06      	ldr	r3, [sp, #24]
 800ab42:	eb03 0a04 	add.w	sl, r3, r4
 800ab46:	9b05      	ldr	r3, [sp, #20]
 800ab48:	eb03 0584 	add.w	r5, r3, r4, lsl #2
                    disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x],
 800ab4c:	fa0f f388 	sxth.w	r3, r8
 800ab50:	9504      	str	r5, [sp, #16]
 800ab52:	9307      	str	r3, [sp, #28]
                if(mask_tmp[x]) {
 800ab54:	f81a eb01 	ldrb.w	lr, [sl], #1
                    disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x],
 800ab58:	b223      	sxth	r3, r4
                                           (uint32_t)((uint32_t)opa * mask_tmp[x]) >> 8);
 800ab5a:	9d08      	ldr	r5, [sp, #32]
                    disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x],
 800ab5c:	464a      	mov	r2, r9
 800ab5e:	4659      	mov	r1, fp
 800ab60:	4630      	mov	r0, r6
                                           (uint32_t)((uint32_t)opa * mask_tmp[x]) >> 8);
 800ab62:	fb15 fc0e 	smulbb	ip, r5, lr
                if(mask_tmp[x]) {
 800ab66:	f1be 0f00 	cmp.w	lr, #0
 800ab6a:	d022      	beq.n	800abb2 <_lv_blend_map+0x1d2>
                    disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x],
 800ab6c:	9d04      	ldr	r5, [sp, #16]
 800ab6e:	ea4f 271c 	mov.w	r7, ip, lsr #8
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 800ab72:	3401      	adds	r4, #1
                    disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x],
 800ab74:	f855 eb04 	ldr.w	lr, [r5], #4
 800ab78:	9702      	str	r7, [sp, #8]
 800ab7a:	9504      	str	r5, [sp, #16]
 800ab7c:	9d07      	ldr	r5, [sp, #28]
 800ab7e:	e9cd 5e00 	strd	r5, lr, [sp]
 800ab82:	6977      	ldr	r7, [r6, #20]
 800ab84:	47b8      	blx	r7
 800ab86:	f9bd 7044 	ldrsh.w	r7, [sp, #68]	; 0x44
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 800ab8a:	42a7      	cmp	r7, r4
 800ab8c:	dae2      	bge.n	800ab54 <_lv_blend_map+0x174>
 800ab8e:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
            mask_tmp += draw_area_w;
 800ab92:	9a06      	ldr	r2, [sp, #24]
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800ab94:	f108 0801 	add.w	r8, r8, #1
            mask_tmp += draw_area_w;
 800ab98:	990a      	ldr	r1, [sp, #40]	; 0x28
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800ab9a:	4598      	cmp	r8, r3
            mask_tmp += draw_area_w;
 800ab9c:	440a      	add	r2, r1
            map_buf_tmp += map_w;
 800ab9e:	9909      	ldr	r1, [sp, #36]	; 0x24
            mask_tmp += draw_area_w;
 800aba0:	9206      	str	r2, [sp, #24]
            map_buf_tmp += map_w;
 800aba2:	9a05      	ldr	r2, [sp, #20]
 800aba4:	440a      	add	r2, r1
 800aba6:	9205      	str	r2, [sp, #20]
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800aba8:	f73f af32 	bgt.w	800aa10 <_lv_blend_map+0x30>
 800abac:	f9bd 4040 	ldrsh.w	r4, [sp, #64]	; 0x40
 800abb0:	e7c4      	b.n	800ab3c <_lv_blend_map+0x15c>
 800abb2:	9b04      	ldr	r3, [sp, #16]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 800abb4:	3401      	adds	r4, #1
 800abb6:	3304      	adds	r3, #4
 800abb8:	42bc      	cmp	r4, r7
 800abba:	9304      	str	r3, [sp, #16]
 800abbc:	ddca      	ble.n	800ab54 <_lv_blend_map+0x174>
 800abbe:	e7e6      	b.n	800ab8e <_lv_blend_map+0x1ae>
    else if(mode == LV_BLEND_MODE_NORMAL) {
 800abc0:	2e00      	cmp	r6, #0
 800abc2:	d077      	beq.n	800acb4 <_lv_blend_map+0x2d4>
    switch(mode) {
 800abc4:	2e01      	cmp	r6, #1
 800abc6:	f000 81b7 	beq.w	800af38 <_lv_blend_map+0x558>
 800abca:	2e02      	cmp	r6, #2
 800abcc:	f47f af20 	bne.w	800aa10 <_lv_blend_map+0x30>
 800abd0:	f8df 9a88 	ldr.w	r9, [pc, #2696]	; 800b65c <_lv_blend_map+0xc7c>
 800abd4:	8ab8      	ldrh	r0, [r7, #20]
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
 800abd6:	2d01      	cmp	r5, #1
 800abd8:	f8b8 1004 	ldrh.w	r1, [r8, #4]
    const lv_color_t * map_buf_tmp = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
 800abdc:	f9b7 6012 	ldrsh.w	r6, [r7, #18]
 800abe0:	f100 0001 	add.w	r0, r0, #1
 800abe4:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 800abe8:	f101 0101 	add.w	r1, r1, #1
    lv_color_t * disp_buf_tmp = disp_buf + disp_w * draw_area->y1;
 800abec:	f8cd e014 	str.w	lr, [sp, #20]
    int32_t disp_w = lv_area_get_width(disp_area);
 800abf0:	f9b7 e010 	ldrsh.w	lr, [r7, #16]
    const lv_color_t * map_buf_tmp = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
 800abf4:	eba2 0206 	sub.w	r2, r2, r6
    int32_t map_w = lv_area_get_width(map_area);
 800abf8:	f9b8 7000 	ldrsh.w	r7, [r8]
    const lv_color_t * map_buf_tmp = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
 800abfc:	9e05      	ldr	r6, [sp, #20]
 800abfe:	eba0 000e 	sub.w	r0, r0, lr
 800ac02:	eba1 0107 	sub.w	r1, r1, r7
 800ac06:	eba6 0202 	sub.w	r2, r6, r2
 800ac0a:	b200      	sxth	r0, r0
 800ac0c:	b209      	sxth	r1, r1
    lv_color_t * disp_buf_tmp = disp_buf + disp_w * draw_area->y1;
 800ac0e:	fb00 f806 	mul.w	r8, r0, r6
 800ac12:	ee18 6a10 	vmov	r6, s16
    const lv_color_t * map_buf_tmp = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
 800ac16:	fb01 f202 	mul.w	r2, r1, r2
    lv_color_t * disp_buf_tmp = disp_buf + disp_w * draw_area->y1;
 800ac1a:	eb06 0888 	add.w	r8, r6, r8, lsl #2
    const lv_color_t * map_buf_tmp = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
 800ac1e:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
 800ac22:	f000 84a1 	beq.w	800b568 <_lv_blend_map+0xb88>
        map_buf_tmp -= draw_area->x1;
 800ac26:	eba2 0784 	sub.w	r7, r2, r4, lsl #2
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800ac2a:	9a05      	ldr	r2, [sp, #20]
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
 800ac2c:	9d04      	ldr	r5, [sp, #16]
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800ac2e:	429a      	cmp	r2, r3
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
 800ac30:	eba5 0604 	sub.w	r6, r5, r4
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800ac34:	f73f aeec 	bgt.w	800aa10 <_lv_blend_map+0x30>
 800ac38:	9a06      	ldr	r2, [sp, #24]
            map_buf_tmp += map_w;
 800ac3a:	0089      	lsls	r1, r1, #2
            disp_buf_tmp += disp_w;
 800ac3c:	0080      	lsls	r0, r0, #2
 800ac3e:	f1c2 0201 	rsb	r2, r2, #1
            map_buf_tmp += map_w;
 800ac42:	9106      	str	r1, [sp, #24]
 800ac44:	9907      	ldr	r1, [sp, #28]
            disp_buf_tmp += disp_w;
 800ac46:	9004      	str	r0, [sp, #16]
 800ac48:	4411      	add	r1, r2
 800ac4a:	b20a      	sxth	r2, r1
 800ac4c:	9207      	str	r2, [sp, #28]
 800ac4e:	461a      	mov	r2, r3
 800ac50:	465b      	mov	r3, fp
 800ac52:	46bb      	mov	fp, r7
 800ac54:	464f      	mov	r7, r9
 800ac56:	4699      	mov	r9, r3
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 800ac58:	4564      	cmp	r4, ip
 800ac5a:	dc1c      	bgt.n	800ac96 <_lv_blend_map+0x2b6>
 800ac5c:	eb06 0a04 	add.w	sl, r6, r4
 800ac60:	eb08 0584 	add.w	r5, r8, r4, lsl #2
 800ac64:	eb0b 0484 	add.w	r4, fp, r4, lsl #2
                if(mask_tmp[x] == 0) continue;
 800ac68:	f81a 3b01 	ldrb.w	r3, [sl], #1
 800ac6c:	b15b      	cbz	r3, 800ac86 <_lv_blend_map+0x2a6>
                lv_opa_t opa_tmp = mask_tmp[x] >= LV_OPA_MAX ? opa : ((opa * mask_tmp[x]) >> 8);
 800ac6e:	2bfc      	cmp	r3, #252	; 0xfc
 800ac70:	464a      	mov	r2, r9
 800ac72:	fb19 f303 	smulbb	r3, r9, r3
                disp_buf_tmp[x] = blend_fp(map_buf_tmp[x], disp_buf_tmp[x], opa_tmp);
 800ac76:	6829      	ldr	r1, [r5, #0]
 800ac78:	6820      	ldr	r0, [r4, #0]
                lv_opa_t opa_tmp = mask_tmp[x] >= LV_OPA_MAX ? opa : ((opa * mask_tmp[x]) >> 8);
 800ac7a:	bf98      	it	ls
 800ac7c:	0a1a      	lsrls	r2, r3, #8
                disp_buf_tmp[x] = blend_fp(map_buf_tmp[x], disp_buf_tmp[x], opa_tmp);
 800ac7e:	47b8      	blx	r7
 800ac80:	f9bd c044 	ldrsh.w	ip, [sp, #68]	; 0x44
 800ac84:	6028      	str	r0, [r5, #0]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 800ac86:	ebaa 0306 	sub.w	r3, sl, r6
 800ac8a:	3504      	adds	r5, #4
 800ac8c:	3404      	adds	r4, #4
 800ac8e:	459c      	cmp	ip, r3
 800ac90:	daea      	bge.n	800ac68 <_lv_blend_map+0x288>
 800ac92:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800ac96:	9b05      	ldr	r3, [sp, #20]
            disp_buf_tmp += disp_w;
 800ac98:	9904      	ldr	r1, [sp, #16]
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800ac9a:	3301      	adds	r3, #1
            disp_buf_tmp += disp_w;
 800ac9c:	4488      	add	r8, r1
            mask_tmp += draw_area_w;
 800ac9e:	9907      	ldr	r1, [sp, #28]
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800aca0:	4293      	cmp	r3, r2
 800aca2:	9305      	str	r3, [sp, #20]
            mask_tmp += draw_area_w;
 800aca4:	440e      	add	r6, r1
            map_buf_tmp += map_w;
 800aca6:	9906      	ldr	r1, [sp, #24]
 800aca8:	448b      	add	fp, r1
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800acaa:	f73f aeb1 	bgt.w	800aa10 <_lv_blend_map+0x30>
 800acae:	f9bd 4040 	ldrsh.w	r4, [sp, #64]	; 0x40
 800acb2:	e7d1      	b.n	800ac58 <_lv_blend_map+0x278>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800acb4:	9805      	ldr	r0, [sp, #20]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800acb6:	9a06      	ldr	r2, [sp, #24]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800acb8:	f1c0 0c01 	rsb	ip, r0, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800acbc:	9807      	ldr	r0, [sp, #28]
 800acbe:	f1c2 0201 	rsb	r2, r2, #1
 800acc2:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 800acc6:	8abb      	ldrh	r3, [r7, #20]
 800acc8:	4410      	add	r0, r2
 800acca:	f101 0901 	add.w	r9, r1, #1
    const lv_color_t * map_buf_first = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
 800acce:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 800acd2:	3301      	adds	r3, #1
 800acd4:	4602      	mov	r2, r0
    int32_t disp_w = lv_area_get_width(disp_area);
 800acd6:	f9b7 0010 	ldrsh.w	r0, [r7, #16]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800acda:	9f08      	ldr	r7, [sp, #32]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800acdc:	1a1b      	subs	r3, r3, r0
 800acde:	b212      	sxth	r2, r2
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800ace0:	4467      	add	r7, ip
    int32_t map_w = lv_area_get_width(map_area);
 800ace2:	f9b8 c000 	ldrsh.w	ip, [r8]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800ace6:	9207      	str	r2, [sp, #28]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800ace8:	9705      	str	r7, [sp, #20]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800acea:	eba9 090c 	sub.w	r9, r9, ip
    const lv_color_t * map_buf_first = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
 800acee:	f9b8 7002 	ldrsh.w	r7, [r8, #2]
    map_buf_first += (draw_area->x1 - (map_area->x1 - disp_area->x1));
 800acf2:	ebac 0000 	sub.w	r0, ip, r0
 800acf6:	fa0f f883 	sxth.w	r8, r3
    int32_t draw_area_h = lv_area_get_height(draw_area);
 800acfa:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
    const lv_color_t * map_buf_first = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
 800acfe:	1a79      	subs	r1, r7, r1
 800ad00:	fa0f f989 	sxth.w	r9, r9
    int32_t draw_area_h = lv_area_get_height(draw_area);
 800ad04:	9309      	str	r3, [sp, #36]	; 0x24
    lv_color_t * disp_buf_first = disp_buf + disp_w * draw_area->y1 + draw_area->x1;
 800ad06:	ee18 3a10 	vmov	r3, s16
    const lv_color_t * map_buf_first = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
 800ad0a:	ebae 0101 	sub.w	r1, lr, r1
    lv_color_t * disp_buf_first = disp_buf + disp_w * draw_area->y1 + draw_area->x1;
 800ad0e:	fb08 4e0e 	mla	lr, r8, lr, r4
    map_buf_first += (draw_area->x1 - (map_area->x1 - disp_area->x1));
 800ad12:	1a24      	subs	r4, r4, r0
    lv_color_t * disp_buf_first = disp_buf + disp_w * draw_area->y1 + draw_area->x1;
 800ad14:	eb03 038e 	add.w	r3, r3, lr, lsl #2
    map_buf_first += (draw_area->x1 - (map_area->x1 - disp_area->x1));
 800ad18:	fb09 4101 	mla	r1, r9, r1, r4
    lv_color_t * disp_buf_first = disp_buf + disp_w * draw_area->y1 + draw_area->x1;
 800ad1c:	9305      	str	r3, [sp, #20]
    map_buf_first += (draw_area->x1 - (map_area->x1 - disp_area->x1));
 800ad1e:	eb0a 0381 	add.w	r3, sl, r1, lsl #2
 800ad22:	9306      	str	r3, [sp, #24]
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 800ad24:	f7fd fb26 	bl	8008374 <_lv_refr_get_disp_refreshing>
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
 800ad28:	2d01      	cmp	r5, #1
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 800ad2a:	4604      	mov	r4, r0
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
 800ad2c:	f000 80a0 	beq.w	800ae70 <_lv_blend_map+0x490>
        if(opa > LV_OPA_MAX) {
 800ad30:	f1bb 0ffd 	cmp.w	fp, #253	; 0xfd
 800ad34:	f200 8103 	bhi.w	800af3e <_lv_blend_map+0x55e>
            for(y = 0; y < draw_area_h; y++) {
 800ad38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	f77f ae68 	ble.w	800aa10 <_lv_blend_map+0x30>
                disp_buf_first += disp_w;
 800ad40:	ea4f 0388 	mov.w	r3, r8, lsl #2
 800ad44:	9308      	str	r3, [sp, #32]
                map_buf_first += map_w;
 800ad46:	ea4f 0389 	mov.w	r3, r9, lsl #2
 800ad4a:	930a      	str	r3, [sp, #40]	; 0x28
 800ad4c:	9b07      	ldr	r3, [sp, #28]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	f77f ae5e 	ble.w	800aa10 <_lv_blend_map+0x30>
 800ad54:	9a05      	ldr	r2, [sp, #20]
            for(y = 0; y < draw_area_h; y++) {
 800ad56:	46b2      	mov	sl, r6
                            disp_buf_first[x] = lv_color_mix(map_buf_first[x], disp_buf_first[x], opa_tmp);
 800ad58:	f04f 09ff 	mov.w	r9, #255	; 0xff
 800ad5c:	eb02 0c83 	add.w	ip, r2, r3, lsl #2
                for(x = 0; x < draw_area_w; x++) {
 800ad60:	9b04      	ldr	r3, [sp, #16]
 800ad62:	1e5f      	subs	r7, r3, #1
 800ad64:	e9dd 3405 	ldrd	r3, r4, [sp, #20]
                    if(mask[x]) {
 800ad68:	f817 2f01 	ldrb.w	r2, [r7, #1]!
 800ad6c:	b38a      	cbz	r2, 800add2 <_lv_blend_map+0x3f2>
                        lv_opa_t opa_tmp = mask[x] >= LV_OPA_MAX ? opa : ((opa * mask[x]) >> 8);
 800ad6e:	fb1b f102 	smulbb	r1, fp, r2
 800ad72:	2afc      	cmp	r2, #252	; 0xfc
 800ad74:	465d      	mov	r5, fp
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800ad76:	781e      	ldrb	r6, [r3, #0]
 800ad78:	bf98      	it	ls
 800ad7a:	120d      	asrls	r5, r1, #8
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800ad7c:	7898      	ldrb	r0, [r3, #2]
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800ad7e:	7859      	ldrb	r1, [r3, #1]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800ad80:	f1c5 02ff 	rsb	r2, r5, #255	; 0xff
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800ad84:	f894 e001 	ldrb.w	lr, [r4, #1]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800ad88:	f894 8002 	ldrb.w	r8, [r4, #2]
 800ad8c:	fb02 f000 	mul.w	r0, r2, r0
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800ad90:	fb02 f101 	mul.w	r1, r2, r1
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800ad94:	fb02 f206 	mul.w	r2, r2, r6
 800ad98:	7826      	ldrb	r6, [r4, #0]
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800ad9a:	fb05 110e 	mla	r1, r5, lr, r1
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800ad9e:	fb05 0008 	mla	r0, r5, r8, r0
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800ada2:	fb05 2206 	mla	r2, r5, r6, r2
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800ada6:	eb01 2601 	add.w	r6, r1, r1, lsl #8
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800adaa:	eb00 2e00 	add.w	lr, r0, r0, lsl #8
                            disp_buf_first[x] = lv_color_mix(map_buf_first[x], disp_buf_first[x], opa_tmp);
 800adae:	f883 9003 	strb.w	r9, [r3, #3]
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800adb2:	eb02 2502 	add.w	r5, r2, r2, lsl #8
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800adb6:	eb00 10ce 	add.w	r0, r0, lr, lsl #7
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800adba:	eb01 11c6 	add.w	r1, r1, r6, lsl #7
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800adbe:	eb02 12c5 	add.w	r2, r2, r5, lsl #7
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800adc2:	f3c0 50c7 	ubfx	r0, r0, #23, #8
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800adc6:	f3c1 51c7 	ubfx	r1, r1, #23, #8
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800adca:	0dd2      	lsrs	r2, r2, #23
 800adcc:	7098      	strb	r0, [r3, #2]
 800adce:	7059      	strb	r1, [r3, #1]
 800add0:	701a      	strb	r2, [r3, #0]
                for(x = 0; x < draw_area_w; x++) {
 800add2:	3304      	adds	r3, #4
 800add4:	3404      	adds	r4, #4
 800add6:	459c      	cmp	ip, r3
 800add8:	d1c6      	bne.n	800ad68 <_lv_blend_map+0x388>
                disp_buf_first += disp_w;
 800adda:	9a05      	ldr	r2, [sp, #20]
            for(y = 0; y < draw_area_h; y++) {
 800addc:	f10a 0a01 	add.w	sl, sl, #1
                disp_buf_first += disp_w;
 800ade0:	9b08      	ldr	r3, [sp, #32]
 800ade2:	4611      	mov	r1, r2
                mask += draw_area_w;
 800ade4:	9a04      	ldr	r2, [sp, #16]
 800ade6:	449c      	add	ip, r3
                disp_buf_first += disp_w;
 800ade8:	4419      	add	r1, r3
            for(y = 0; y < draw_area_h; y++) {
 800adea:	9b09      	ldr	r3, [sp, #36]	; 0x24
                disp_buf_first += disp_w;
 800adec:	9105      	str	r1, [sp, #20]
            for(y = 0; y < draw_area_h; y++) {
 800adee:	4553      	cmp	r3, sl
                mask += draw_area_w;
 800adf0:	9907      	ldr	r1, [sp, #28]
 800adf2:	440a      	add	r2, r1
                map_buf_first += map_w;
 800adf4:	990a      	ldr	r1, [sp, #40]	; 0x28
                mask += draw_area_w;
 800adf6:	9204      	str	r2, [sp, #16]
                map_buf_first += map_w;
 800adf8:	9a06      	ldr	r2, [sp, #24]
 800adfa:	440a      	add	r2, r1
 800adfc:	9206      	str	r2, [sp, #24]
            for(y = 0; y < draw_area_h; y++) {
 800adfe:	d1af      	bne.n	800ad60 <_lv_blend_map+0x380>
 800ae00:	e606      	b.n	800aa10 <_lv_blend_map+0x30>
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800ae02:	4598      	cmp	r8, r3
 800ae04:	f73f ae04 	bgt.w	800aa10 <_lv_blend_map+0x30>
            map_buf_tmp += map_w;
 800ae08:	0092      	lsls	r2, r2, #2
 800ae0a:	ee08 9a90 	vmov	s17, r9
 800ae0e:	46d9      	mov	r9, fp
 800ae10:	ee18 ba10 	vmov	fp, s16
 800ae14:	9206      	str	r2, [sp, #24]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 800ae16:	42bc      	cmp	r4, r7
 800ae18:	dc1e      	bgt.n	800ae58 <_lv_blend_map+0x478>
 800ae1a:	9b05      	ldr	r3, [sp, #20]
 800ae1c:	fa0f fa88 	sxth.w	sl, r8
 800ae20:	f8cd 8010 	str.w	r8, [sp, #16]
 800ae24:	ee18 8a90 	vmov	r8, s17
 800ae28:	eb03 0584 	add.w	r5, r3, r4, lsl #2
                disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x], opa);
 800ae2c:	f855 0b04 	ldr.w	r0, [r5], #4
 800ae30:	b223      	sxth	r3, r4
 800ae32:	f8cd 9008 	str.w	r9, [sp, #8]
 800ae36:	4642      	mov	r2, r8
 800ae38:	9001      	str	r0, [sp, #4]
 800ae3a:	4659      	mov	r1, fp
 800ae3c:	f8cd a000 	str.w	sl, [sp]
 800ae40:	4630      	mov	r0, r6
 800ae42:	6977      	ldr	r7, [r6, #20]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 800ae44:	3401      	adds	r4, #1
                disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x], opa);
 800ae46:	47b8      	blx	r7
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 800ae48:	f9bd 7044 	ldrsh.w	r7, [sp, #68]	; 0x44
 800ae4c:	42bc      	cmp	r4, r7
 800ae4e:	dded      	ble.n	800ae2c <_lv_blend_map+0x44c>
 800ae50:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800ae54:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800ae58:	f108 0801 	add.w	r8, r8, #1
            map_buf_tmp += map_w;
 800ae5c:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800ae60:	4598      	cmp	r8, r3
            map_buf_tmp += map_w;
 800ae62:	440a      	add	r2, r1
 800ae64:	9205      	str	r2, [sp, #20]
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800ae66:	f73f add3 	bgt.w	800aa10 <_lv_blend_map+0x30>
 800ae6a:	f9bd 4040 	ldrsh.w	r4, [sp, #64]	; 0x40
 800ae6e:	e7d2      	b.n	800ae16 <_lv_blend_map+0x436>
        if(disp->driver.gpu_blend_cb && (lv_area_get_size(draw_area) > GPU_SIZE_LIMIT)) {
 800ae70:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800ae72:	b12b      	cbz	r3, 800ae80 <_lv_blend_map+0x4a0>
 800ae74:	a810      	add	r0, sp, #64	; 0x40
 800ae76:	f009 f855 	bl	8013f24 <lv_area_get_size>
 800ae7a:	28f0      	cmp	r0, #240	; 0xf0
 800ae7c:	f200 83cb 	bhi.w	800b616 <_lv_blend_map+0xc36>
        if(opa > LV_OPA_MAX) {
 800ae80:	f1bb 0ffd 	cmp.w	fp, #253	; 0xfd
            for(y = 0; y < draw_area_h; y++) {
 800ae84:	9b09      	ldr	r3, [sp, #36]	; 0x24
        if(opa > LV_OPA_MAX) {
 800ae86:	f200 83ad 	bhi.w	800b5e4 <_lv_blend_map+0xc04>
            for(y = 0; y < draw_area_h; y++) {
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	f77f adc0 	ble.w	800aa10 <_lv_blend_map+0x30>
                map_buf_first += map_w;
 800ae90:	ea4f 0289 	mov.w	r2, r9, lsl #2
                disp_buf_first += disp_w;
 800ae94:	ea4f 0388 	mov.w	r3, r8, lsl #2
                map_buf_first += map_w;
 800ae98:	9204      	str	r2, [sp, #16]
 800ae9a:	9a07      	ldr	r2, [sp, #28]
 800ae9c:	2a00      	cmp	r2, #0
 800ae9e:	f77f adb7 	ble.w	800aa10 <_lv_blend_map+0x30>
 800aea2:	9e05      	ldr	r6, [sp, #20]
            for(y = 0; y < draw_area_h; y++) {
 800aea4:	f04f 0800 	mov.w	r8, #0
 800aea8:	f1cb 07ff 	rsb	r7, fp, #255	; 0xff
                        disp_buf_first[x] = lv_color_mix(map_buf_first[x], disp_buf_first[x], opa);
 800aeac:	f04f 0eff 	mov.w	lr, #255	; 0xff
 800aeb0:	eb06 0c82 	add.w	ip, r6, r2, lsl #2
 800aeb4:	f8dd 9018 	ldr.w	r9, [sp, #24]
 800aeb8:	9305      	str	r3, [sp, #20]
                for(x = 0; x < draw_area_w; x++) {
 800aeba:	464d      	mov	r5, r9
 800aebc:	4633      	mov	r3, r6
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800aebe:	7898      	ldrb	r0, [r3, #2]
 800aec0:	3304      	adds	r3, #4
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800aec2:	f813 1c03 	ldrb.w	r1, [r3, #-3]
 800aec6:	f895 a001 	ldrb.w	sl, [r5, #1]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800aeca:	fb07 f000 	mul.w	r0, r7, r0
 800aece:	78ac      	ldrb	r4, [r5, #2]
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800aed0:	fb07 f101 	mul.w	r1, r7, r1
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800aed4:	f813 2c04 	ldrb.w	r2, [r3, #-4]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800aed8:	fb04 000b 	mla	r0, r4, fp, r0
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800aedc:	f815 4b04 	ldrb.w	r4, [r5], #4
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800aee0:	fb0a 110b 	mla	r1, sl, fp, r1
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800aee4:	fb07 f202 	mul.w	r2, r7, r2
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800aee8:	eb00 2a00 	add.w	sl, r0, r0, lsl #8
                        disp_buf_first[x] = lv_color_mix(map_buf_first[x], disp_buf_first[x], opa);
 800aeec:	f803 ec01 	strb.w	lr, [r3, #-1]
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800aef0:	fb04 220b 	mla	r2, r4, fp, r2
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800aef4:	eb01 2401 	add.w	r4, r1, r1, lsl #8
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800aef8:	eb00 10ca 	add.w	r0, r0, sl, lsl #7
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800aefc:	eb01 11c4 	add.w	r1, r1, r4, lsl #7
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800af00:	eb02 2402 	add.w	r4, r2, r2, lsl #8
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800af04:	f3c0 50c7 	ubfx	r0, r0, #23, #8
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800af08:	f3c1 51c7 	ubfx	r1, r1, #23, #8
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800af0c:	eb02 12c4 	add.w	r2, r2, r4, lsl #7
 800af10:	f803 0c02 	strb.w	r0, [r3, #-2]
 800af14:	f803 1c03 	strb.w	r1, [r3, #-3]
 800af18:	0dd2      	lsrs	r2, r2, #23
 800af1a:	f803 2c04 	strb.w	r2, [r3, #-4]
                for(x = 0; x < draw_area_w; x++) {
 800af1e:	459c      	cmp	ip, r3
 800af20:	d1cd      	bne.n	800aebe <_lv_blend_map+0x4de>
                disp_buf_first += disp_w;
 800af22:	9b05      	ldr	r3, [sp, #20]
            for(y = 0; y < draw_area_h; y++) {
 800af24:	f108 0801 	add.w	r8, r8, #1
                map_buf_first += map_w;
 800af28:	9a04      	ldr	r2, [sp, #16]
                disp_buf_first += disp_w;
 800af2a:	441e      	add	r6, r3
                map_buf_first += map_w;
 800af2c:	449c      	add	ip, r3
            for(y = 0; y < draw_area_h; y++) {
 800af2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
                map_buf_first += map_w;
 800af30:	4491      	add	r9, r2
            for(y = 0; y < draw_area_h; y++) {
 800af32:	4543      	cmp	r3, r8
 800af34:	d1c1      	bne.n	800aeba <_lv_blend_map+0x4da>
 800af36:	e56b      	b.n	800aa10 <_lv_blend_map+0x30>
            blend_fp = color_blend_true_color_additive;
 800af38:	f8df 9724 	ldr.w	r9, [pc, #1828]	; 800b660 <_lv_blend_map+0xc80>
 800af3c:	e64a      	b.n	800abd4 <_lv_blend_map+0x1f4>
            for(y = 0; y < draw_area_h; y++) {
 800af3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
            int32_t x_end4 = draw_area_w - 4;
 800af40:	9b07      	ldr	r3, [sp, #28]
            for(y = 0; y < draw_area_h; y++) {
 800af42:	2a00      	cmp	r2, #0
            int32_t x_end4 = draw_area_w - 4;
 800af44:	f1a3 0e04 	sub.w	lr, r3, #4
            for(y = 0; y < draw_area_h; y++) {
 800af48:	f77f ad62 	ble.w	800aa10 <_lv_blend_map+0x30>
                disp_buf_first += disp_w;
 800af4c:	ea4f 0288 	mov.w	r2, r8, lsl #2
            for(y = 0; y < draw_area_h; y++) {
 800af50:	960b      	str	r6, [sp, #44]	; 0x2c
 800af52:	461e      	mov	r6, r3
 800af54:	3b05      	subs	r3, #5
                disp_buf_first += disp_w;
 800af56:	920d      	str	r2, [sp, #52]	; 0x34
                map_buf_first += map_w;
 800af58:	ea4f 0289 	mov.w	r2, r9, lsl #2
 800af5c:	930f      	str	r3, [sp, #60]	; 0x3c
 800af5e:	920e      	str	r2, [sp, #56]	; 0x38
 800af60:	9a06      	ldr	r2, [sp, #24]
 800af62:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
 800af66:	1c51      	adds	r1, r2, #1
 800af68:	3202      	adds	r2, #2
 800af6a:	9107      	str	r1, [sp, #28]
 800af6c:	9208      	str	r2, [sp, #32]
 800af6e:	9b07      	ldr	r3, [sp, #28]
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
 800af70:	2e00      	cmp	r6, #0
 800af72:	f103 33ff 	add.w	r3, r3, #4294967295
 800af76:	9306      	str	r3, [sp, #24]
 800af78:	dd4d      	ble.n	800b016 <_lv_blend_map+0x636>
 800af7a:	9b04      	ldr	r3, [sp, #16]
 800af7c:	4618      	mov	r0, r3
 800af7e:	f013 0303 	ands.w	r3, r3, #3
 800af82:	f000 82ca 	beq.w	800b51a <_lv_blend_map+0xb3a>
 800af86:	9905      	ldr	r1, [sp, #20]
 800af88:	2300      	movs	r3, #0
 800af8a:	9f06      	ldr	r7, [sp, #24]
 800af8c:	e9dd ec07 	ldrd	lr, ip, [sp, #28]
 800af90:	e035      	b.n	800affe <_lv_blend_map+0x61e>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800af92:	788d      	ldrb	r5, [r1, #2]
 800af94:	f81c a023 	ldrb.w	sl, [ip, r3, lsl #2]
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800af98:	784c      	ldrb	r4, [r1, #1]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800af9a:	fb08 f505 	mul.w	r5, r8, r5
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800af9e:	f891 b000 	ldrb.w	fp, [r1]
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800afa2:	f81e 9023 	ldrb.w	r9, [lr, r3, lsl #2]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800afa6:	fb0a 5502 	mla	r5, sl, r2, r5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800afaa:	fb08 f404 	mul.w	r4, r8, r4
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800afae:	f817 a023 	ldrb.w	sl, [r7, r3, lsl #2]
 800afb2:	fb08 f80b 	mul.w	r8, r8, fp
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800afb6:	fb09 4402 	mla	r4, r9, r2, r4
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800afba:	fb0a 8202 	mla	r2, sl, r2, r8
                    MAP_NORMAL_MASK_PX(x)
 800afbe:	f04f 38ff 	mov.w	r8, #4294967295
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800afc2:	eb05 2a05 	add.w	sl, r5, r5, lsl #8
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800afc6:	eb04 2904 	add.w	r9, r4, r4, lsl #8
 800afca:	f881 8003 	strb.w	r8, [r1, #3]
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800afce:	eb02 2802 	add.w	r8, r2, r2, lsl #8
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800afd2:	eb05 15ca 	add.w	r5, r5, sl, lsl #7
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800afd6:	eb04 14c9 	add.w	r4, r4, r9, lsl #7
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800afda:	eb02 12c8 	add.w	r2, r2, r8, lsl #7
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800afde:	f3c5 55c7 	ubfx	r5, r5, #23, #8
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800afe2:	f3c4 54c7 	ubfx	r4, r4, #23, #8
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800afe6:	0dd2      	lsrs	r2, r2, #23
 800afe8:	708d      	strb	r5, [r1, #2]
 800afea:	704c      	strb	r4, [r1, #1]
 800afec:	700a      	strb	r2, [r1, #0]
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
 800afee:	3301      	adds	r3, #1
                    MAP_NORMAL_MASK_PX(x)
 800aff0:	4605      	mov	r5, r0
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
 800aff2:	3104      	adds	r1, #4
 800aff4:	429e      	cmp	r6, r3
 800aff6:	d010      	beq.n	800b01a <_lv_blend_map+0x63a>
 800aff8:	0782      	lsls	r2, r0, #30
 800affa:	f000 828f 	beq.w	800b51c <_lv_blend_map+0xb3c>
                    MAP_NORMAL_MASK_PX(x)
 800affe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b002:	2a00      	cmp	r2, #0
 800b004:	d0f3      	beq.n	800afee <_lv_blend_map+0x60e>
 800b006:	2aff      	cmp	r2, #255	; 0xff
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800b008:	f1c2 08ff 	rsb	r8, r2, #255	; 0xff
 800b00c:	d1c1      	bne.n	800af92 <_lv_blend_map+0x5b2>
 800b00e:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
 800b012:	600a      	str	r2, [r1, #0]
 800b014:	e7eb      	b.n	800afee <_lv_blend_map+0x60e>
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
 800b016:	9d04      	ldr	r5, [sp, #16]
 800b018:	2300      	movs	r3, #0
                for(; x < x_end4; x += 4) {
 800b01a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b01c:	429a      	cmp	r2, r3
 800b01e:	f340 8264 	ble.w	800b4ea <_lv_blend_map+0xb0a>
 800b022:	9a06      	ldr	r2, [sp, #24]
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
 800b024:	4629      	mov	r1, r5
 800b026:	eba3 0e05 	sub.w	lr, r3, r5
 800b02a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800b02c:	eb02 0083 	add.w	r0, r2, r3, lsl #2
 800b030:	9a05      	ldr	r2, [sp, #20]
 800b032:	960c      	str	r6, [sp, #48]	; 0x30
 800b034:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800b038:	e0e5      	b.n	800b206 <_lv_blend_map+0x826>
                            MAP_NORMAL_MASK_PX(x)
 800b03a:	f811 6c04 	ldrb.w	r6, [r1, #-4]
 800b03e:	b3a6      	cbz	r6, 800b0aa <_lv_blend_map+0x6ca>
 800b040:	2eff      	cmp	r6, #255	; 0xff
 800b042:	f000 8270 	beq.w	800b526 <_lv_blend_map+0xb46>
 800b046:	f1c6 09ff 	rsb	r9, r6, #255	; 0xff
 800b04a:	f892 c002 	ldrb.w	ip, [r2, #2]
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800b04e:	7854      	ldrb	r4, [r2, #1]
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800b050:	f892 8000 	ldrb.w	r8, [r2]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800b054:	fb09 fc0c 	mul.w	ip, r9, ip
 800b058:	f890 b002 	ldrb.w	fp, [r0, #2]
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800b05c:	fb09 f404 	mul.w	r4, r9, r4
 800b060:	f890 a001 	ldrb.w	sl, [r0, #1]
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800b064:	fb09 f808 	mul.w	r8, r9, r8
 800b068:	f890 9000 	ldrb.w	r9, [r0]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800b06c:	fb0b cc06 	mla	ip, fp, r6, ip
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800b070:	fb0a 4406 	mla	r4, sl, r6, r4
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800b074:	fb09 8606 	mla	r6, r9, r6, r8
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800b078:	eb0c 2b0c 	add.w	fp, ip, ip, lsl #8
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800b07c:	eb04 2a04 	add.w	sl, r4, r4, lsl #8
 800b080:	f04f 38ff 	mov.w	r8, #4294967295
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800b084:	eb06 2906 	add.w	r9, r6, r6, lsl #8
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800b088:	eb0c 1ccb 	add.w	ip, ip, fp, lsl #7
 800b08c:	f882 8003 	strb.w	r8, [r2, #3]
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800b090:	eb04 14ca 	add.w	r4, r4, sl, lsl #7
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800b094:	eb06 16c9 	add.w	r6, r6, r9, lsl #7
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800b098:	f3cc 5cc7 	ubfx	ip, ip, #23, #8
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800b09c:	f3c4 54c7 	ubfx	r4, r4, #23, #8
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800b0a0:	0df6      	lsrs	r6, r6, #23
 800b0a2:	f882 c002 	strb.w	ip, [r2, #2]
 800b0a6:	7054      	strb	r4, [r2, #1]
 800b0a8:	7016      	strb	r6, [r2, #0]
                            MAP_NORMAL_MASK_PX(x + 1)
 800b0aa:	f811 6c03 	ldrb.w	r6, [r1, #-3]
 800b0ae:	b3a6      	cbz	r6, 800b11a <_lv_blend_map+0x73a>
 800b0b0:	2eff      	cmp	r6, #255	; 0xff
 800b0b2:	f000 823e 	beq.w	800b532 <_lv_blend_map+0xb52>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800b0b6:	f1c6 09ff 	rsb	r9, r6, #255	; 0xff
 800b0ba:	f892 c006 	ldrb.w	ip, [r2, #6]
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800b0be:	7954      	ldrb	r4, [r2, #5]
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800b0c0:	f892 8004 	ldrb.w	r8, [r2, #4]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800b0c4:	fb09 fc0c 	mul.w	ip, r9, ip
 800b0c8:	f890 b006 	ldrb.w	fp, [r0, #6]
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800b0cc:	fb09 f404 	mul.w	r4, r9, r4
 800b0d0:	f890 a005 	ldrb.w	sl, [r0, #5]
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800b0d4:	fb09 f808 	mul.w	r8, r9, r8
 800b0d8:	f890 9004 	ldrb.w	r9, [r0, #4]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800b0dc:	fb0b cc06 	mla	ip, fp, r6, ip
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800b0e0:	fb0a 4406 	mla	r4, sl, r6, r4
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800b0e4:	fb09 8606 	mla	r6, r9, r6, r8
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800b0e8:	eb0c 2b0c 	add.w	fp, ip, ip, lsl #8
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800b0ec:	eb04 2a04 	add.w	sl, r4, r4, lsl #8
 800b0f0:	f04f 38ff 	mov.w	r8, #4294967295
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800b0f4:	eb06 2906 	add.w	r9, r6, r6, lsl #8
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800b0f8:	eb0c 1ccb 	add.w	ip, ip, fp, lsl #7
 800b0fc:	f882 8007 	strb.w	r8, [r2, #7]
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800b100:	eb04 14ca 	add.w	r4, r4, sl, lsl #7
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800b104:	eb06 16c9 	add.w	r6, r6, r9, lsl #7
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800b108:	f3cc 5cc7 	ubfx	ip, ip, #23, #8
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800b10c:	f3c4 54c7 	ubfx	r4, r4, #23, #8
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800b110:	0df6      	lsrs	r6, r6, #23
 800b112:	f882 c006 	strb.w	ip, [r2, #6]
 800b116:	7154      	strb	r4, [r2, #5]
 800b118:	7116      	strb	r6, [r2, #4]
                            MAP_NORMAL_MASK_PX(x + 2)
 800b11a:	f811 6c02 	ldrb.w	r6, [r1, #-2]
 800b11e:	b3a6      	cbz	r6, 800b18a <_lv_blend_map+0x7aa>
 800b120:	2eff      	cmp	r6, #255	; 0xff
 800b122:	f000 8209 	beq.w	800b538 <_lv_blend_map+0xb58>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800b126:	f1c6 09ff 	rsb	r9, r6, #255	; 0xff
 800b12a:	f892 c00a 	ldrb.w	ip, [r2, #10]
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800b12e:	7a54      	ldrb	r4, [r2, #9]
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800b130:	f892 8008 	ldrb.w	r8, [r2, #8]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800b134:	fb09 fc0c 	mul.w	ip, r9, ip
 800b138:	f890 b00a 	ldrb.w	fp, [r0, #10]
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800b13c:	fb09 f404 	mul.w	r4, r9, r4
 800b140:	f890 a009 	ldrb.w	sl, [r0, #9]
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800b144:	fb09 f808 	mul.w	r8, r9, r8
 800b148:	f890 9008 	ldrb.w	r9, [r0, #8]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800b14c:	fb0b cc06 	mla	ip, fp, r6, ip
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800b150:	fb0a 4406 	mla	r4, sl, r6, r4
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800b154:	fb09 8606 	mla	r6, r9, r6, r8
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800b158:	eb0c 2b0c 	add.w	fp, ip, ip, lsl #8
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800b15c:	eb04 2a04 	add.w	sl, r4, r4, lsl #8
 800b160:	f04f 38ff 	mov.w	r8, #4294967295
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800b164:	eb06 2906 	add.w	r9, r6, r6, lsl #8
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800b168:	eb0c 1ccb 	add.w	ip, ip, fp, lsl #7
 800b16c:	f882 800b 	strb.w	r8, [r2, #11]
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800b170:	eb04 14ca 	add.w	r4, r4, sl, lsl #7
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800b174:	eb06 16c9 	add.w	r6, r6, r9, lsl #7
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800b178:	f3cc 5cc7 	ubfx	ip, ip, #23, #8
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800b17c:	f3c4 54c7 	ubfx	r4, r4, #23, #8
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800b180:	0df6      	lsrs	r6, r6, #23
 800b182:	f882 c00a 	strb.w	ip, [r2, #10]
 800b186:	7254      	strb	r4, [r2, #9]
 800b188:	7216      	strb	r6, [r2, #8]
                            MAP_NORMAL_MASK_PX(x + 3)
 800b18a:	f811 6c01 	ldrb.w	r6, [r1, #-1]
 800b18e:	b3a6      	cbz	r6, 800b1fa <_lv_blend_map+0x81a>
 800b190:	2eff      	cmp	r6, #255	; 0xff
 800b192:	f000 81cb 	beq.w	800b52c <_lv_blend_map+0xb4c>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800b196:	f1c6 09ff 	rsb	r9, r6, #255	; 0xff
 800b19a:	f892 c00e 	ldrb.w	ip, [r2, #14]
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800b19e:	7b54      	ldrb	r4, [r2, #13]
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800b1a0:	f892 800c 	ldrb.w	r8, [r2, #12]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800b1a4:	fb09 fc0c 	mul.w	ip, r9, ip
 800b1a8:	f890 b00e 	ldrb.w	fp, [r0, #14]
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800b1ac:	fb09 f404 	mul.w	r4, r9, r4
 800b1b0:	f890 a00d 	ldrb.w	sl, [r0, #13]
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800b1b4:	fb09 f808 	mul.w	r8, r9, r8
 800b1b8:	f890 900c 	ldrb.w	r9, [r0, #12]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800b1bc:	fb0b cc06 	mla	ip, fp, r6, ip
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800b1c0:	fb0a 4406 	mla	r4, sl, r6, r4
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800b1c4:	fb09 8606 	mla	r6, r9, r6, r8
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800b1c8:	eb0c 2b0c 	add.w	fp, ip, ip, lsl #8
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800b1cc:	eb04 2a04 	add.w	sl, r4, r4, lsl #8
 800b1d0:	f04f 38ff 	mov.w	r8, #4294967295
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800b1d4:	eb06 2906 	add.w	r9, r6, r6, lsl #8
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800b1d8:	eb0c 1ccb 	add.w	ip, ip, fp, lsl #7
 800b1dc:	f882 800f 	strb.w	r8, [r2, #15]
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800b1e0:	eb04 14ca 	add.w	r4, r4, sl, lsl #7
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800b1e4:	eb06 16c9 	add.w	r6, r6, r9, lsl #7
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800b1e8:	f3cc 5cc7 	ubfx	ip, ip, #23, #8
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800b1ec:	f3c4 54c7 	ubfx	r4, r4, #23, #8
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800b1f0:	0df6      	lsrs	r6, r6, #23
 800b1f2:	f882 c00e 	strb.w	ip, [r2, #14]
 800b1f6:	7354      	strb	r4, [r2, #13]
 800b1f8:	7316      	strb	r6, [r2, #12]
                for(; x < x_end4; x += 4) {
 800b1fa:	eb0e 0401 	add.w	r4, lr, r1
 800b1fe:	3010      	adds	r0, #16
 800b200:	3210      	adds	r2, #16
 800b202:	42a7      	cmp	r7, r4
 800b204:	dd0f      	ble.n	800b226 <_lv_blend_map+0x846>
                    if(*mask32) {
 800b206:	f851 4b04 	ldr.w	r4, [r1], #4
 800b20a:	2c00      	cmp	r4, #0
 800b20c:	d0f5      	beq.n	800b1fa <_lv_blend_map+0x81a>
                        if((*mask32) == 0xFFFFFFFF) {
 800b20e:	3401      	adds	r4, #1
 800b210:	f47f af13 	bne.w	800b03a <_lv_blend_map+0x65a>
                            disp_buf_first[x] = map_buf_first[x];
 800b214:	6804      	ldr	r4, [r0, #0]
 800b216:	6014      	str	r4, [r2, #0]
                            disp_buf_first[x + 1] = map_buf_first[x + 1];
 800b218:	6844      	ldr	r4, [r0, #4]
 800b21a:	6054      	str	r4, [r2, #4]
                            disp_buf_first[x + 2] = map_buf_first[x + 2];
 800b21c:	6884      	ldr	r4, [r0, #8]
 800b21e:	6094      	str	r4, [r2, #8]
                            disp_buf_first[x + 3] = map_buf_first[x + 3];
 800b220:	68c4      	ldr	r4, [r0, #12]
 800b222:	60d4      	str	r4, [r2, #12]
 800b224:	e7e9      	b.n	800b1fa <_lv_blend_map+0x81a>
 800b226:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b228:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b22a:	1ad2      	subs	r2, r2, r3
 800b22c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800b22e:	428b      	cmp	r3, r1
 800b230:	f103 0304 	add.w	r3, r3, #4
 800b234:	ea4f 0292 	mov.w	r2, r2, lsr #2
 800b238:	ea4f 0182 	mov.w	r1, r2, lsl #2
 800b23c:	bfa8      	it	ge
 800b23e:	2100      	movge	r1, #0
 800b240:	f102 0201 	add.w	r2, r2, #1
 800b244:	440b      	add	r3, r1
 800b246:	ea4f 0282 	mov.w	r2, r2, lsl #2
 800b24a:	bfa8      	it	ge
 800b24c:	2204      	movge	r2, #4
                for(; x < draw_area_w ; x++) {
 800b24e:	429e      	cmp	r6, r3
 800b250:	4415      	add	r5, r2
 800b252:	f340 814a 	ble.w	800b4ea <_lv_blend_map+0xb0a>
                    MAP_NORMAL_MASK_PX(x)
 800b256:	782a      	ldrb	r2, [r5, #0]
 800b258:	2a00      	cmp	r2, #0
 800b25a:	d03a      	beq.n	800b2d2 <_lv_blend_map+0x8f2>
 800b25c:	2aff      	cmp	r2, #255	; 0xff
 800b25e:	f000 816e 	beq.w	800b53e <_lv_blend_map+0xb5e>
 800b262:	9906      	ldr	r1, [sp, #24]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800b264:	f1c2 0eff 	rsb	lr, r2, #255	; 0xff
 800b268:	eb01 0883 	add.w	r8, r1, r3, lsl #2
 800b26c:	9905      	ldr	r1, [sp, #20]
 800b26e:	f898 c002 	ldrb.w	ip, [r8, #2]
 800b272:	eb01 0083 	add.w	r0, r1, r3, lsl #2
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800b276:	f811 7023 	ldrb.w	r7, [r1, r3, lsl #2]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800b27a:	fb1c fc02 	smulbb	ip, ip, r2
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800b27e:	7841      	ldrb	r1, [r0, #1]
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800b280:	fb0e f907 	mul.w	r9, lr, r7
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800b284:	7884      	ldrb	r4, [r0, #2]
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800b286:	9f06      	ldr	r7, [sp, #24]
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800b288:	fb0e f101 	mul.w	r1, lr, r1
 800b28c:	f898 8001 	ldrb.w	r8, [r8, #1]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800b290:	fb0e c404 	mla	r4, lr, r4, ip
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800b294:	f817 c023 	ldrb.w	ip, [r7, r3, lsl #2]
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800b298:	fb08 1102 	mla	r1, r8, r2, r1
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800b29c:	eb04 2e04 	add.w	lr, r4, r4, lsl #8
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800b2a0:	fb0c 9202 	mla	r2, ip, r2, r9
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800b2a4:	eb01 2801 	add.w	r8, r1, r1, lsl #8
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800b2a8:	eb02 2702 	add.w	r7, r2, r2, lsl #8
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800b2ac:	eb01 11c8 	add.w	r1, r1, r8, lsl #7
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800b2b0:	eb02 12c7 	add.w	r2, r2, r7, lsl #7
 800b2b4:	9f05      	ldr	r7, [sp, #20]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800b2b6:	eb04 14ce 	add.w	r4, r4, lr, lsl #7
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800b2ba:	f3c1 51c7 	ubfx	r1, r1, #23, #8
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800b2be:	0dd2      	lsrs	r2, r2, #23
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800b2c0:	f3c4 54c7 	ubfx	r4, r4, #23, #8
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800b2c4:	f807 2023 	strb.w	r2, [r7, r3, lsl #2]
 800b2c8:	f04f 32ff 	mov.w	r2, #4294967295
 800b2cc:	7041      	strb	r1, [r0, #1]
 800b2ce:	70c2      	strb	r2, [r0, #3]
 800b2d0:	7084      	strb	r4, [r0, #2]
                for(; x < draw_area_w ; x++) {
 800b2d2:	1c59      	adds	r1, r3, #1
 800b2d4:	428e      	cmp	r6, r1
 800b2d6:	f340 8108 	ble.w	800b4ea <_lv_blend_map+0xb0a>
                    MAP_NORMAL_MASK_PX(x)
 800b2da:	786a      	ldrb	r2, [r5, #1]
 800b2dc:	2a00      	cmp	r2, #0
 800b2de:	d03d      	beq.n	800b35c <_lv_blend_map+0x97c>
 800b2e0:	2aff      	cmp	r2, #255	; 0xff
 800b2e2:	f000 8133 	beq.w	800b54c <_lv_blend_map+0xb6c>
 800b2e6:	9805      	ldr	r0, [sp, #20]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800b2e8:	f1c2 0eff 	rsb	lr, r2, #255	; 0xff
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800b2ec:	9c05      	ldr	r4, [sp, #20]
 800b2ee:	eb00 0781 	add.w	r7, r0, r1, lsl #2
 800b2f2:	9806      	ldr	r0, [sp, #24]
 800b2f4:	f814 4021 	ldrb.w	r4, [r4, r1, lsl #2]
 800b2f8:	f810 c021 	ldrb.w	ip, [r0, r1, lsl #2]
 800b2fc:	eb00 0a81 	add.w	sl, r0, r1, lsl #2
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800b300:	f897 8002 	ldrb.w	r8, [r7, #2]
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800b304:	f897 9001 	ldrb.w	r9, [r7, #1]
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800b308:	fb1c fc02 	smulbb	ip, ip, r2
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800b30c:	f89a 0001 	ldrb.w	r0, [sl, #1]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800b310:	fb0e f808 	mul.w	r8, lr, r8
 800b314:	f89a a002 	ldrb.w	sl, [sl, #2]
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800b318:	fb0e f909 	mul.w	r9, lr, r9
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800b31c:	fb0e c404 	mla	r4, lr, r4, ip
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800b320:	fb00 9002 	mla	r0, r0, r2, r9
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800b324:	eb04 2e04 	add.w	lr, r4, r4, lsl #8
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800b328:	fb0a 8202 	mla	r2, sl, r2, r8
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800b32c:	eb00 2900 	add.w	r9, r0, r0, lsl #8
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800b330:	eb04 14ce 	add.w	r4, r4, lr, lsl #7
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800b334:	eb02 2a02 	add.w	sl, r2, r2, lsl #8
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800b338:	ea4f 5cd4 	mov.w	ip, r4, lsr #23
 800b33c:	9c05      	ldr	r4, [sp, #20]
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800b33e:	eb00 10c9 	add.w	r0, r0, r9, lsl #7
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800b342:	eb02 12ca 	add.w	r2, r2, sl, lsl #7
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800b346:	f804 c021 	strb.w	ip, [r4, r1, lsl #2]
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800b34a:	f3c0 50c7 	ubfx	r0, r0, #23, #8
 800b34e:	f04f 31ff 	mov.w	r1, #4294967295
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800b352:	f3c2 52c7 	ubfx	r2, r2, #23, #8
 800b356:	7078      	strb	r0, [r7, #1]
 800b358:	70f9      	strb	r1, [r7, #3]
 800b35a:	70ba      	strb	r2, [r7, #2]
                for(; x < draw_area_w ; x++) {
 800b35c:	1c9a      	adds	r2, r3, #2
 800b35e:	4296      	cmp	r6, r2
 800b360:	f340 80c3 	ble.w	800b4ea <_lv_blend_map+0xb0a>
                    MAP_NORMAL_MASK_PX(x)
 800b364:	78a9      	ldrb	r1, [r5, #2]
 800b366:	b3e9      	cbz	r1, 800b3e4 <_lv_blend_map+0xa04>
 800b368:	29ff      	cmp	r1, #255	; 0xff
 800b36a:	f000 80f6 	beq.w	800b55a <_lv_blend_map+0xb7a>
 800b36e:	9806      	ldr	r0, [sp, #24]
 800b370:	f1c1 0eff 	rsb	lr, r1, #255	; 0xff
 800b374:	9f05      	ldr	r7, [sp, #20]
 800b376:	eb00 0882 	add.w	r8, r0, r2, lsl #2
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800b37a:	f810 0022 	ldrb.w	r0, [r0, r2, lsl #2]
 800b37e:	eb07 0982 	add.w	r9, r7, r2, lsl #2
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800b382:	f898 4002 	ldrb.w	r4, [r8, #2]
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800b386:	fb10 fc01 	smulbb	ip, r0, r1
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800b38a:	f899 0002 	ldrb.w	r0, [r9, #2]
 800b38e:	fb14 f401 	smulbb	r4, r4, r1
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800b392:	f898 8001 	ldrb.w	r8, [r8, #1]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800b396:	fb0e 4400 	mla	r4, lr, r0, r4
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800b39a:	f817 0022 	ldrb.w	r0, [r7, r2, lsl #2]
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800b39e:	fb18 f101 	smulbb	r1, r8, r1
 800b3a2:	f899 8001 	ldrb.w	r8, [r9, #1]
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800b3a6:	fb0e c000 	mla	r0, lr, r0, ip
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800b3aa:	eb04 2c04 	add.w	ip, r4, r4, lsl #8
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800b3ae:	fb0e 1108 	mla	r1, lr, r8, r1
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800b3b2:	eb00 2e00 	add.w	lr, r0, r0, lsl #8
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800b3b6:	eb01 2801 	add.w	r8, r1, r1, lsl #8
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800b3ba:	eb00 10ce 	add.w	r0, r0, lr, lsl #7
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800b3be:	eb01 11c8 	add.w	r1, r1, r8, lsl #7
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800b3c2:	eb04 14cc 	add.w	r4, r4, ip, lsl #7
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800b3c6:	0dc0      	lsrs	r0, r0, #23
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800b3c8:	f3c1 51c7 	ubfx	r1, r1, #23, #8
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800b3cc:	f3c4 54c7 	ubfx	r4, r4, #23, #8
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800b3d0:	f807 0022 	strb.w	r0, [r7, r2, lsl #2]
 800b3d4:	f04f 32ff 	mov.w	r2, #4294967295
 800b3d8:	f889 1001 	strb.w	r1, [r9, #1]
 800b3dc:	f889 2003 	strb.w	r2, [r9, #3]
 800b3e0:	f889 4002 	strb.w	r4, [r9, #2]
                for(; x < draw_area_w ; x++) {
 800b3e4:	1cda      	adds	r2, r3, #3
 800b3e6:	4296      	cmp	r6, r2
 800b3e8:	dd7f      	ble.n	800b4ea <_lv_blend_map+0xb0a>
                    MAP_NORMAL_MASK_PX(x)
 800b3ea:	78e9      	ldrb	r1, [r5, #3]
 800b3ec:	2900      	cmp	r1, #0
 800b3ee:	d03d      	beq.n	800b46c <_lv_blend_map+0xa8c>
 800b3f0:	29ff      	cmp	r1, #255	; 0xff
 800b3f2:	f000 80e9 	beq.w	800b5c8 <_lv_blend_map+0xbe8>
 800b3f6:	9806      	ldr	r0, [sp, #24]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800b3f8:	f1c1 0cff 	rsb	ip, r1, #255	; 0xff
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800b3fc:	f810 7022 	ldrb.w	r7, [r0, r2, lsl #2]
 800b400:	eb00 0e82 	add.w	lr, r0, r2, lsl #2
 800b404:	9805      	ldr	r0, [sp, #20]
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800b406:	f89e 8001 	ldrb.w	r8, [lr, #1]
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800b40a:	fb17 f701 	smulbb	r7, r7, r1
 800b40e:	eb00 0482 	add.w	r4, r0, r2, lsl #2
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800b412:	f89e 0002 	ldrb.w	r0, [lr, #2]
 800b416:	f894 e002 	ldrb.w	lr, [r4, #2]
 800b41a:	fb10 f001 	smulbb	r0, r0, r1
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800b41e:	fb18 f101 	smulbb	r1, r8, r1
 800b422:	f894 8001 	ldrb.w	r8, [r4, #1]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800b426:	fb0c 0e0e 	mla	lr, ip, lr, r0
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800b42a:	9805      	ldr	r0, [sp, #20]
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800b42c:	fb0c 1108 	mla	r1, ip, r8, r1
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800b430:	f810 0022 	ldrb.w	r0, [r0, r2, lsl #2]
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800b434:	eb01 2801 	add.w	r8, r1, r1, lsl #8
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800b438:	fb0c 7000 	mla	r0, ip, r0, r7
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800b43c:	eb0e 270e 	add.w	r7, lr, lr, lsl #8
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800b440:	eb01 11c8 	add.w	r1, r1, r8, lsl #7
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800b444:	eb00 2c00 	add.w	ip, r0, r0, lsl #8
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800b448:	eb0e 1ec7 	add.w	lr, lr, r7, lsl #7
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800b44c:	9f05      	ldr	r7, [sp, #20]
 800b44e:	eb00 10cc 	add.w	r0, r0, ip, lsl #7
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800b452:	f3c1 51c7 	ubfx	r1, r1, #23, #8
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800b456:	f3ce 5ec7 	ubfx	lr, lr, #23, #8
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800b45a:	0dc0      	lsrs	r0, r0, #23
 800b45c:	f807 0022 	strb.w	r0, [r7, r2, lsl #2]
 800b460:	f04f 32ff 	mov.w	r2, #4294967295
 800b464:	7061      	strb	r1, [r4, #1]
 800b466:	70e2      	strb	r2, [r4, #3]
 800b468:	f884 e002 	strb.w	lr, [r4, #2]
                for(; x < draw_area_w ; x++) {
 800b46c:	3304      	adds	r3, #4
 800b46e:	429e      	cmp	r6, r3
 800b470:	dd3b      	ble.n	800b4ea <_lv_blend_map+0xb0a>
                    MAP_NORMAL_MASK_PX(x)
 800b472:	792a      	ldrb	r2, [r5, #4]
 800b474:	b3ca      	cbz	r2, 800b4ea <_lv_blend_map+0xb0a>
 800b476:	2aff      	cmp	r2, #255	; 0xff
 800b478:	f000 80ad 	beq.w	800b5d6 <_lv_blend_map+0xbf6>
 800b47c:	9905      	ldr	r1, [sp, #20]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800b47e:	f1c2 08ff 	rsb	r8, r2, #255	; 0xff
 800b482:	9f06      	ldr	r7, [sp, #24]
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800b484:	f811 5023 	ldrb.w	r5, [r1, r3, lsl #2]
 800b488:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800b48c:	f817 e023 	ldrb.w	lr, [r7, r3, lsl #2]
 800b490:	eb07 0c83 	add.w	ip, r7, r3, lsl #2
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800b494:	7884      	ldrb	r4, [r0, #2]
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800b496:	fb08 f505 	mul.w	r5, r8, r5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800b49a:	7841      	ldrb	r1, [r0, #1]
 800b49c:	f89c 7001 	ldrb.w	r7, [ip, #1]
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800b4a0:	fb0e 5502 	mla	r5, lr, r2, r5
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800b4a4:	f89c c002 	ldrb.w	ip, [ip, #2]
 800b4a8:	fb08 f404 	mul.w	r4, r8, r4
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800b4ac:	fb08 f101 	mul.w	r1, r8, r1
 800b4b0:	fb07 1102 	mla	r1, r7, r2, r1
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800b4b4:	fb0c 4202 	mla	r2, ip, r2, r4
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800b4b8:	eb05 2c05 	add.w	ip, r5, r5, lsl #8
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800b4bc:	eb01 2701 	add.w	r7, r1, r1, lsl #8
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800b4c0:	eb02 2402 	add.w	r4, r2, r2, lsl #8
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800b4c4:	eb05 15cc 	add.w	r5, r5, ip, lsl #7
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800b4c8:	eb02 12c4 	add.w	r2, r2, r4, lsl #7
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800b4cc:	9c05      	ldr	r4, [sp, #20]
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800b4ce:	eb01 11c7 	add.w	r1, r1, r7, lsl #7
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800b4d2:	0ded      	lsrs	r5, r5, #23
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800b4d4:	f3c2 52c7 	ubfx	r2, r2, #23, #8
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800b4d8:	f3c1 51c7 	ubfx	r1, r1, #23, #8
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800b4dc:	f804 5023 	strb.w	r5, [r4, r3, lsl #2]
 800b4e0:	f04f 33ff 	mov.w	r3, #4294967295
 800b4e4:	7041      	strb	r1, [r0, #1]
 800b4e6:	70c3      	strb	r3, [r0, #3]
 800b4e8:	7082      	strb	r2, [r0, #2]
                disp_buf_first += disp_w;
 800b4ea:	9a05      	ldr	r2, [sp, #20]
 800b4ec:	990d      	ldr	r1, [sp, #52]	; 0x34
            for(y = 0; y < draw_area_h; y++) {
 800b4ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
                disp_buf_first += disp_w;
 800b4f0:	440a      	add	r2, r1
 800b4f2:	9907      	ldr	r1, [sp, #28]
            for(y = 0; y < draw_area_h; y++) {
 800b4f4:	3301      	adds	r3, #1
                disp_buf_first += disp_w;
 800b4f6:	9205      	str	r2, [sp, #20]
                mask += draw_area_w;
 800b4f8:	4608      	mov	r0, r1
 800b4fa:	9a04      	ldr	r2, [sp, #16]
 800b4fc:	9908      	ldr	r1, [sp, #32]
 800b4fe:	4432      	add	r2, r6
            for(y = 0; y < draw_area_h; y++) {
 800b500:	930b      	str	r3, [sp, #44]	; 0x2c
                mask += draw_area_w;
 800b502:	9204      	str	r2, [sp, #16]
            for(y = 0; y < draw_area_h; y++) {
 800b504:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b506:	4410      	add	r0, r2
 800b508:	4411      	add	r1, r2
 800b50a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b50c:	9007      	str	r0, [sp, #28]
 800b50e:	429a      	cmp	r2, r3
 800b510:	9108      	str	r1, [sp, #32]
 800b512:	f47f ad2c 	bne.w	800af6e <_lv_blend_map+0x58e>
 800b516:	f7ff ba7b 	b.w	800aa10 <_lv_blend_map+0x30>
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
 800b51a:	4605      	mov	r5, r0
                for(; x < x_end4; x += 4) {
 800b51c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b51e:	429a      	cmp	r2, r3
 800b520:	f73f ad7f 	bgt.w	800b022 <_lv_blend_map+0x642>
 800b524:	e697      	b.n	800b256 <_lv_blend_map+0x876>
                            MAP_NORMAL_MASK_PX(x)
 800b526:	6804      	ldr	r4, [r0, #0]
 800b528:	6014      	str	r4, [r2, #0]
 800b52a:	e5be      	b.n	800b0aa <_lv_blend_map+0x6ca>
                            MAP_NORMAL_MASK_PX(x + 3)
 800b52c:	68c4      	ldr	r4, [r0, #12]
 800b52e:	60d4      	str	r4, [r2, #12]
 800b530:	e663      	b.n	800b1fa <_lv_blend_map+0x81a>
                            MAP_NORMAL_MASK_PX(x + 1)
 800b532:	6844      	ldr	r4, [r0, #4]
 800b534:	6054      	str	r4, [r2, #4]
 800b536:	e5f0      	b.n	800b11a <_lv_blend_map+0x73a>
                            MAP_NORMAL_MASK_PX(x + 2)
 800b538:	6884      	ldr	r4, [r0, #8]
 800b53a:	6094      	str	r4, [r2, #8]
 800b53c:	e625      	b.n	800b18a <_lv_blend_map+0x7aa>
                    MAP_NORMAL_MASK_PX(x)
 800b53e:	9a06      	ldr	r2, [sp, #24]
 800b540:	9905      	ldr	r1, [sp, #20]
 800b542:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b546:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800b54a:	e6c2      	b.n	800b2d2 <_lv_blend_map+0x8f2>
 800b54c:	9a06      	ldr	r2, [sp, #24]
 800b54e:	9805      	ldr	r0, [sp, #20]
 800b550:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800b554:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
 800b558:	e700      	b.n	800b35c <_lv_blend_map+0x97c>
 800b55a:	9906      	ldr	r1, [sp, #24]
 800b55c:	9805      	ldr	r0, [sp, #20]
 800b55e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800b562:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
 800b566:	e73d      	b.n	800b3e4 <_lv_blend_map+0xa04>
        map_buf_tmp -= draw_area->x1;
 800b568:	ebae 0607 	sub.w	r6, lr, r7
 800b56c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800b570:	9a05      	ldr	r2, [sp, #20]
 800b572:	429a      	cmp	r2, r3
 800b574:	f73f aa4c 	bgt.w	800aa10 <_lv_blend_map+0x30>
            map_buf_tmp += map_w;
 800b578:	008f      	lsls	r7, r1, #2
 800b57a:	46b2      	mov	sl, r6
            disp_buf_tmp += disp_w;
 800b57c:	0080      	lsls	r0, r0, #2
            map_buf_tmp += map_w;
 800b57e:	464e      	mov	r6, r9
 800b580:	9705      	str	r7, [sp, #20]
 800b582:	4691      	mov	r9, r2
 800b584:	465f      	mov	r7, fp
            disp_buf_tmp += disp_w;
 800b586:	9004      	str	r0, [sp, #16]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 800b588:	4564      	cmp	r4, ip
 800b58a:	dc11      	bgt.n	800b5b0 <_lv_blend_map+0xbd0>
 800b58c:	eb08 0584 	add.w	r5, r8, r4, lsl #2
 800b590:	eb0a 0b84 	add.w	fp, sl, r4, lsl #2
                disp_buf_tmp[x] = blend_fp(map_buf_tmp[x], disp_buf_tmp[x], opa);
 800b594:	6829      	ldr	r1, [r5, #0]
 800b596:	463a      	mov	r2, r7
 800b598:	f85b 0b04 	ldr.w	r0, [fp], #4
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 800b59c:	3401      	adds	r4, #1
                disp_buf_tmp[x] = blend_fp(map_buf_tmp[x], disp_buf_tmp[x], opa);
 800b59e:	47b0      	blx	r6
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 800b5a0:	f9bd c044 	ldrsh.w	ip, [sp, #68]	; 0x44
                disp_buf_tmp[x] = blend_fp(map_buf_tmp[x], disp_buf_tmp[x], opa);
 800b5a4:	f845 0b04 	str.w	r0, [r5], #4
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 800b5a8:	4564      	cmp	r4, ip
 800b5aa:	ddf3      	ble.n	800b594 <_lv_blend_map+0xbb4>
 800b5ac:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
            disp_buf_tmp += disp_w;
 800b5b0:	9a04      	ldr	r2, [sp, #16]
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800b5b2:	f109 0901 	add.w	r9, r9, #1
            disp_buf_tmp += disp_w;
 800b5b6:	4490      	add	r8, r2
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800b5b8:	4599      	cmp	r9, r3
            map_buf_tmp += map_w;
 800b5ba:	9a05      	ldr	r2, [sp, #20]
 800b5bc:	4492      	add	sl, r2
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800b5be:	f73f aa27 	bgt.w	800aa10 <_lv_blend_map+0x30>
 800b5c2:	f9bd 4040 	ldrsh.w	r4, [sp, #64]	; 0x40
 800b5c6:	e7df      	b.n	800b588 <_lv_blend_map+0xba8>
                    MAP_NORMAL_MASK_PX(x)
 800b5c8:	9906      	ldr	r1, [sp, #24]
 800b5ca:	9805      	ldr	r0, [sp, #20]
 800b5cc:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800b5d0:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
 800b5d4:	e74a      	b.n	800b46c <_lv_blend_map+0xa8c>
 800b5d6:	9a06      	ldr	r2, [sp, #24]
 800b5d8:	9905      	ldr	r1, [sp, #20]
 800b5da:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b5de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800b5e2:	e782      	b.n	800b4ea <_lv_blend_map+0xb0a>
            for(y = 0; y < draw_area_h; y++) {
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	f77f aa13 	ble.w	800aa10 <_lv_blend_map+0x30>
                _lv_memcpy(disp_buf_first, map_buf_first, draw_area_w * sizeof(lv_color_t));
 800b5ea:	9a07      	ldr	r2, [sp, #28]
            for(y = 0; y < draw_area_h; y++) {
 800b5ec:	2400      	movs	r4, #0
                disp_buf_first += disp_w;
 800b5ee:	ea4f 0888 	mov.w	r8, r8, lsl #2
                map_buf_first += map_w;
 800b5f2:	469a      	mov	sl, r3
                _lv_memcpy(disp_buf_first, map_buf_first, draw_area_w * sizeof(lv_color_t));
 800b5f4:	0095      	lsls	r5, r2, #2
                map_buf_first += map_w;
 800b5f6:	ea4f 0989 	mov.w	r9, r9, lsl #2
 800b5fa:	e9dd 6705 	ldrd	r6, r7, [sp, #20]
            for(y = 0; y < draw_area_h; y++) {
 800b5fe:	3401      	adds	r4, #1
                _lv_memcpy(disp_buf_first, map_buf_first, draw_area_w * sizeof(lv_color_t));
 800b600:	4639      	mov	r1, r7
 800b602:	4630      	mov	r0, r6
 800b604:	462a      	mov	r2, r5
 800b606:	f009 fd39 	bl	801507c <_lv_memcpy>
            for(y = 0; y < draw_area_h; y++) {
 800b60a:	45a2      	cmp	sl, r4
                map_buf_first += map_w;
 800b60c:	444f      	add	r7, r9
                disp_buf_first += disp_w;
 800b60e:	4446      	add	r6, r8
            for(y = 0; y < draw_area_h; y++) {
 800b610:	d1f5      	bne.n	800b5fe <_lv_blend_map+0xc1e>
 800b612:	f7ff b9fd 	b.w	800aa10 <_lv_blend_map+0x30>
            for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800b616:	f9bd 6042 	ldrsh.w	r6, [sp, #66]	; 0x42
 800b61a:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
 800b61e:	429e      	cmp	r6, r3
 800b620:	f73f a9f6 	bgt.w	800aa10 <_lv_blend_map+0x30>
                map_buf_first += map_w;
 800b624:	ad05      	add	r5, sp, #20
 800b626:	465b      	mov	r3, fp
                disp_buf_first += disp_w;
 800b628:	ea4f 0888 	mov.w	r8, r8, lsl #2
                map_buf_first += map_w;
 800b62c:	46a3      	mov	fp, r4
 800b62e:	ea4f 0989 	mov.w	r9, r9, lsl #2
 800b632:	9304      	str	r3, [sp, #16]
 800b634:	e895 04a0 	ldmia.w	r5, {r5, r7, sl}
                disp->driver.gpu_blend_cb(&disp->driver, disp_buf_first, map_buf_first, draw_area_w, opa);
 800b638:	9b04      	ldr	r3, [sp, #16]
 800b63a:	463a      	mov	r2, r7
 800b63c:	4629      	mov	r1, r5
 800b63e:	4658      	mov	r0, fp
 800b640:	9300      	str	r3, [sp, #0]
 800b642:	4653      	mov	r3, sl
 800b644:	f8db 4028 	ldr.w	r4, [fp, #40]	; 0x28
            for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800b648:	3601      	adds	r6, #1
                disp->driver.gpu_blend_cb(&disp->driver, disp_buf_first, map_buf_first, draw_area_w, opa);
 800b64a:	47a0      	blx	r4
            for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800b64c:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
                map_buf_first += map_w;
 800b650:	444f      	add	r7, r9
                disp_buf_first += disp_w;
 800b652:	4445      	add	r5, r8
            for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800b654:	429e      	cmp	r6, r3
 800b656:	ddef      	ble.n	800b638 <_lv_blend_map+0xc58>
 800b658:	f7ff b9da 	b.w	800aa10 <_lv_blend_map+0x30>
 800b65c:	08009cc1 	.word	0x08009cc1
 800b660:	08009c31 	.word	0x08009c31

0800b664 <lv_draw_map>:
 */
LV_ATTRIBUTE_FAST_MEM static void lv_draw_map(const lv_area_t * map_area, const lv_area_t * clip_area,
                                              const uint8_t * map_p,
                                              const lv_draw_img_dsc_t * draw_dsc,
                                              bool chroma_key, bool alpha_byte)
{
 800b664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b668:	ed2d 8b02 	vpush	{d8}
 800b66c:	b0bb      	sub	sp, #236	; 0xec
 800b66e:	461f      	mov	r7, r3
 800b670:	ee08 1a10 	vmov	s16, r1
 800b674:	4691      	mov	r9, r2
 800b676:	9305      	str	r3, [sp, #20]
 800b678:	ac21      	add	r4, sp, #132	; 0x84
 800b67a:	f89d 3118 	ldrb.w	r3, [sp, #280]	; 0x118
 800b67e:	9016      	str	r0, [sp, #88]	; 0x58
 800b680:	9308      	str	r3, [sp, #32]
 800b682:	f89d 311c 	ldrb.w	r3, [sp, #284]	; 0x11c
 800b686:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b68a:	9306      	str	r3, [sp, #24]
 800b68c:	e884 0003 	stmia.w	r4, {r0, r1}
    /* Use the clip area as draw area*/
    lv_area_t draw_area;
    lv_area_copy(&draw_area, clip_area);

    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
 800b690:	f7fc fe70 	bl	8008374 <_lv_refr_get_disp_refreshing>
 800b694:	4682      	mov	sl, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 800b696:	f008 f965 	bl	8013964 <lv_disp_get_buf>
    const lv_area_t * disp_area = &vdb->area;

    /* Now `draw_area` has absolute coordinates.
     * Make it relative to `disp_area` to simplify draw to `disp_buf`*/
    draw_area.x1 -= disp_area->x1;
 800b69a:	f8bd 6084 	ldrh.w	r6, [sp, #132]	; 0x84
 800b69e:	8a03      	ldrh	r3, [r0, #16]
    draw_area.y1 -= disp_area->y1;
    draw_area.x2 -= disp_area->x1;
 800b6a0:	f8bd 1088 	ldrh.w	r1, [sp, #136]	; 0x88
    draw_area.y1 -= disp_area->y1;
 800b6a4:	8a45      	ldrh	r5, [r0, #18]
 800b6a6:	f8bd 2086 	ldrh.w	r2, [sp, #134]	; 0x86
    draw_area.x2 -= disp_area->x1;
 800b6aa:	1ac9      	subs	r1, r1, r3
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 800b6ac:	9015      	str	r0, [sp, #84]	; 0x54
    draw_area.x1 -= disp_area->x1;
 800b6ae:	1af0      	subs	r0, r6, r3
    draw_area.y2 -= disp_area->y1;
 800b6b0:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
    draw_area.y1 -= disp_area->y1;
 800b6b4:	1b52      	subs	r2, r2, r5
    draw_area.x1 -= disp_area->x1;
 800b6b6:	f8ad 0084 	strh.w	r0, [sp, #132]	; 0x84
    draw_area.y2 -= disp_area->y1;
 800b6ba:	1b5b      	subs	r3, r3, r5
    draw_area.x2 -= disp_area->x1;
 800b6bc:	f8ad 1088 	strh.w	r1, [sp, #136]	; 0x88
    draw_area.y1 -= disp_area->y1;
 800b6c0:	f8ad 2086 	strh.w	r2, [sp, #134]	; 0x86
    draw_area.y2 -= disp_area->y1;
 800b6c4:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a

    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
 800b6c8:	f003 f924 	bl	800e914 <lv_draw_mask_get_cnt>

    /*The simplest case just copy the pixels into the VDB*/
    if(other_mask_cnt == 0 && draw_dsc->angle == 0 && draw_dsc->zoom == LV_IMG_ZOOM_NONE &&
 800b6cc:	9014      	str	r0, [sp, #80]	; 0x50
 800b6ce:	2800      	cmp	r0, #0
 800b6d0:	f040 818e 	bne.w	800b9f0 <lv_draw_map+0x38c>
 800b6d4:	f8b7 e002 	ldrh.w	lr, [r7, #2]
 800b6d8:	f1be 0f00 	cmp.w	lr, #0
 800b6dc:	d104      	bne.n	800b6e8 <lv_draw_map+0x84>
 800b6de:	893b      	ldrh	r3, [r7, #8]
 800b6e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b6e4:	f000 82fd 	beq.w	800bce2 <lv_draw_map+0x67e>

        /*Go to the first displayed pixel of the map*/
        int32_t map_w = lv_area_get_width(map_area);
        const uint8_t * map_buf_tmp = map_p;
        map_buf_tmp += map_w * (draw_area.y1 - (map_area->y1 - disp_area->y1)) * px_size_byte;
        map_buf_tmp += (draw_area.x1 - (map_area->x1 - disp_area->x1)) * px_size_byte;
 800b6e8:	9f15      	ldr	r7, [sp, #84]	; 0x54
 800b6ea:	f9bd 8084 	ldrsh.w	r8, [sp, #132]	; 0x84
 800b6ee:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b6f0:	f8bd 6088 	ldrh.w	r6, [sp, #136]	; 0x88
        uint32_t px_i = 0;

        const uint8_t * map_px;

        lv_area_t blend_area;
        blend_area.x1 = draw_area.x1 + disp_area->x1;
 800b6f4:	fa1f f188 	uxth.w	r1, r8
        map_buf_tmp += (draw_area.x1 - (map_area->x1 - disp_area->x1)) * px_size_byte;
 800b6f8:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800b6fc:	889d      	ldrh	r5, [r3, #4]
 800b6fe:	3601      	adds	r6, #1
        int32_t map_w = lv_area_get_width(map_area);
 800b700:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b704:	1a76      	subs	r6, r6, r1
 800b706:	3501      	adds	r5, #1
        map_buf_tmp += (draw_area.x1 - (map_area->x1 - disp_area->x1)) * px_size_byte;
 800b708:	eba3 0c02 	sub.w	ip, r3, r2
        blend_area.x1 = draw_area.x1 + disp_area->x1;
 800b70c:	4411      	add	r1, r2
        map_buf_tmp += map_w * (draw_area.y1 - (map_area->y1 - disp_area->y1)) * px_size_byte;
 800b70e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b710:	1aed      	subs	r5, r5, r3
 800b712:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
        map_buf_tmp += (draw_area.x1 - (map_area->x1 - disp_area->x1)) * px_size_byte;
 800b716:	eba8 080c 	sub.w	r8, r8, ip
        map_buf_tmp += map_w * (draw_area.y1 - (map_area->y1 - disp_area->y1)) * px_size_byte;
 800b71a:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800b71e:	b22d      	sxth	r5, r5
 800b720:	f9bd 0086 	ldrsh.w	r0, [sp, #134]	; 0x86
 800b724:	fa1f fc86 	uxth.w	ip, r6
 800b728:	1ad2      	subs	r2, r2, r3
 800b72a:	462f      	mov	r7, r5
 800b72c:	9509      	str	r5, [sp, #36]	; 0x24
        blend_area.x1 = draw_area.x1 + disp_area->x1;
 800b72e:	b289      	uxth	r1, r1
        map_buf_tmp += map_w * (draw_area.y1 - (map_area->y1 - disp_area->y1)) * px_size_byte;
 800b730:	1a82      	subs	r2, r0, r2
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800b732:	f8bd 508a 	ldrh.w	r5, [sp, #138]	; 0x8a
        blend_area.x2 = blend_area.x1 + lv_area_get_width(&draw_area) - 1;
        blend_area.y1 = disp_area->y1 + draw_area.y1;
 800b736:	b280      	uxth	r0, r0
        blend_area.x2 = blend_area.x1 + lv_area_get_width(&draw_area) - 1;
 800b738:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b73c:	3501      	adds	r5, #1
        map_buf_tmp += (draw_area.x1 - (map_area->x1 - disp_area->x1)) * px_size_byte;
 800b73e:	fb07 8202 	mla	r2, r7, r2, r8
        blend_area.y1 = disp_area->y1 + draw_area.y1;
 800b742:	4403      	add	r3, r0
        blend_area.x2 = blend_area.x1 + lv_area_get_width(&draw_area) - 1;
 800b744:	448c      	add	ip, r1
 800b746:	1a2d      	subs	r5, r5, r0
        map_buf_tmp += (draw_area.x1 - (map_area->x1 - disp_area->x1)) * px_size_byte;
 800b748:	eb09 0282 	add.w	r2, r9, r2, lsl #2
        blend_area.y1 = disp_area->y1 + draw_area.y1;
 800b74c:	b21b      	sxth	r3, r3
        blend_area.x1 = draw_area.x1 + disp_area->x1;
 800b74e:	f8ad 108c 	strh.w	r1, [sp, #140]	; 0x8c
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800b752:	b231      	sxth	r1, r6
        blend_area.x2 = blend_area.x1 + lv_area_get_width(&draw_area) - 1;
 800b754:	f8ad c090 	strh.w	ip, [sp, #144]	; 0x90
        blend_area.y1 = disp_area->y1 + draw_area.y1;
 800b758:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800b75c:	b2ae      	uxth	r6, r5
        blend_area.y2 = blend_area.y1;
 800b75e:	f8ad 3092 	strh.w	r3, [sp, #146]	; 0x92
 800b762:	b22b      	sxth	r3, r5
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800b764:	9111      	str	r1, [sp, #68]	; 0x44
        map_buf_tmp += (draw_area.x1 - (map_area->x1 - disp_area->x1)) * px_size_byte;
 800b766:	920d      	str	r2, [sp, #52]	; 0x34
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800b768:	9307      	str	r3, [sp, #28]

        lv_coord_t draw_area_h = lv_area_get_height(&draw_area);
        lv_coord_t draw_area_w = lv_area_get_width(&draw_area);

#if LV_USE_IMG_TRANSFORM
        bool transform = draw_dsc->angle != 0 || draw_dsc->zoom != LV_IMG_ZOOM_NONE ? true : false;
 800b76a:	f1be 0f00 	cmp.w	lr, #0
 800b76e:	f000 8143 	beq.w	800b9f8 <lv_draw_map+0x394>
            _lv_mem_buf_release(map2);
        }
        /*Most complicated case: transform or other mask or chroma keyed*/
        else {
            /*Build the image and a mask line-by-line*/
            uint32_t hor_res = (uint32_t) lv_disp_get_hor_res(disp);
 800b772:	4650      	mov	r0, sl
 800b774:	f008 f890 	bl	8013898 <lv_disp_get_hor_res>
 800b778:	4603      	mov	r3, r0
            uint32_t mask_buf_size = lv_area_get_size(&draw_area) > hor_res ? hor_res : lv_area_get_size(&draw_area);
 800b77a:	4620      	mov	r0, r4
            uint32_t hor_res = (uint32_t) lv_disp_get_hor_res(disp);
 800b77c:	461d      	mov	r5, r3
 800b77e:	9319      	str	r3, [sp, #100]	; 0x64
            uint32_t mask_buf_size = lv_area_get_size(&draw_area) > hor_res ? hor_res : lv_area_get_size(&draw_area);
 800b780:	f008 fbd0 	bl	8013f24 <lv_area_get_size>
 800b784:	4285      	cmp	r5, r0
 800b786:	f080 8333 	bcs.w	800bdf0 <lv_draw_map+0x78c>
            lv_color_t * map2 = _lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
 800b78a:	9c19      	ldr	r4, [sp, #100]	; 0x64
            lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);

#if LV_USE_IMG_TRANSFORM
            lv_img_transform_dsc_t trans_dsc;
            _lv_memset_00(&trans_dsc, sizeof(lv_img_transform_dsc_t));
 800b78c:	ad25      	add	r5, sp, #148	; 0x94
            lv_color_t * map2 = _lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
 800b78e:	00a0      	lsls	r0, r4, #2
            _lv_memset_00(&trans_dsc, sizeof(lv_img_transform_dsc_t));
 800b790:	ee08 5a90 	vmov	s17, r5
            lv_color_t * map2 = _lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
 800b794:	f009 fec8 	bl	8015528 <_lv_mem_buf_get>
 800b798:	4603      	mov	r3, r0
            lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
 800b79a:	4620      	mov	r0, r4
            lv_color_t * map2 = _lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
 800b79c:	9318      	str	r3, [sp, #96]	; 0x60
            lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
 800b79e:	f009 fec3 	bl	8015528 <_lv_mem_buf_get>
 800b7a2:	4603      	mov	r3, r0
            _lv_memset_00(&trans_dsc, sizeof(lv_img_transform_dsc_t));
 800b7a4:	2154      	movs	r1, #84	; 0x54
 800b7a6:	4628      	mov	r0, r5
            lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
 800b7a8:	9313      	str	r3, [sp, #76]	; 0x4c
            _lv_memset_00(&trans_dsc, sizeof(lv_img_transform_dsc_t));
 800b7aa:	f009 ffe5 	bl	8015778 <_lv_memset_00>
            if(transform) {
                lv_img_cf_t cf = LV_IMG_CF_TRUE_COLOR;
                if(alpha_byte) cf = LV_IMG_CF_TRUE_COLOR_ALPHA;
 800b7ae:	9b06      	ldr	r3, [sp, #24]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	f040 8294 	bne.w	800bcde <lv_draw_map+0x67a>
                else if(chroma_key) cf = LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED;
 800b7b6:	9b08      	ldr	r3, [sp, #32]
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	bf0c      	ite	eq
 800b7bc:	2104      	moveq	r1, #4
 800b7be:	2106      	movne	r1, #6
 800b7c0:	9a16      	ldr	r2, [sp, #88]	; 0x58
                trans_dsc.cfg.pivot_x = draw_dsc->pivot.x;
                trans_dsc.cfg.pivot_y = draw_dsc->pivot.y;
                trans_dsc.cfg.color = draw_dsc->recolor;
                trans_dsc.cfg.antialias = draw_dsc->antialias;

                _lv_img_buf_transform_init(&trans_dsc);
 800b7c2:	2001      	movs	r0, #1
                trans_dsc.cfg.cf = cf;
 800b7c4:	f88d 10a8 	strb.w	r1, [sp, #168]	; 0xa8
 800b7c8:	88d3      	ldrh	r3, [r2, #6]
                _lv_img_buf_transform_init(&trans_dsc);
 800b7ca:	4607      	mov	r7, r0
 800b7cc:	8852      	ldrh	r2, [r2, #2]
 800b7ce:	4403      	add	r3, r0
                trans_dsc.cfg.src_w = map_w;
 800b7d0:	9809      	ldr	r0, [sp, #36]	; 0x24
                trans_dsc.cfg.src = map_p;
 800b7d2:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
 800b7d6:	1a9b      	subs	r3, r3, r2
                trans_dsc.cfg.src_w = map_w;
 800b7d8:	f8ad 0098 	strh.w	r0, [sp, #152]	; 0x98
                trans_dsc.cfg.antialias = draw_dsc->antialias;
 800b7dc:	9805      	ldr	r0, [sp, #20]
                trans_dsc.cfg.src_h = lv_area_get_height(map_area);;
 800b7de:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
                trans_dsc.cfg.angle = draw_dsc->angle;
 800b7e2:	4601      	mov	r1, r0
 800b7e4:	8843      	ldrh	r3, [r0, #2]
                trans_dsc.cfg.antialias = draw_dsc->antialias;
 800b7e6:	7c42      	ldrb	r2, [r0, #17]
                _lv_img_buf_transform_init(&trans_dsc);
 800b7e8:	ee18 0a90 	vmov	r0, s17
                trans_dsc.cfg.angle = draw_dsc->angle;
 800b7ec:	f8ad 30a0 	strh.w	r3, [sp, #160]	; 0xa0
                trans_dsc.cfg.antialias = draw_dsc->antialias;
 800b7f0:	f3c2 0200 	ubfx	r2, r2, #0, #1
                trans_dsc.cfg.pivot_x = draw_dsc->pivot.x;
 800b7f4:	684b      	ldr	r3, [r1, #4]
                trans_dsc.cfg.antialias = draw_dsc->antialias;
 800b7f6:	f88d 20a9 	strb.w	r2, [sp, #169]	; 0xa9
                trans_dsc.cfg.pivot_x = draw_dsc->pivot.x;
 800b7fa:	9327      	str	r3, [sp, #156]	; 0x9c
                trans_dsc.cfg.zoom = draw_dsc->zoom;
 800b7fc:	890a      	ldrh	r2, [r1, #8]
                trans_dsc.cfg.color = draw_dsc->recolor;
 800b7fe:	68cb      	ldr	r3, [r1, #12]
                trans_dsc.cfg.zoom = draw_dsc->zoom;
 800b800:	f8ad 20a2 	strh.w	r2, [sp, #162]	; 0xa2
                trans_dsc.cfg.color = draw_dsc->recolor;
 800b804:	9329      	str	r3, [sp, #164]	; 0xa4
                _lv_img_buf_transform_init(&trans_dsc);
 800b806:	f005 feb5 	bl	8011574 <_lv_img_buf_transform_init>
            }
#endif
            uint16_t recolor_premult[3] = {0};
            lv_opa_t recolor_opa_inv = 255 - draw_dsc->recolor_opa;
 800b80a:	9905      	ldr	r1, [sp, #20]
 800b80c:	7a8b      	ldrb	r3, [r1, #10]
 800b80e:	43da      	mvns	r2, r3
 800b810:	fa5f fb82 	uxtb.w	fp, r2
            if(draw_dsc->recolor_opa != 0) {
 800b814:	2b00      	cmp	r3, #0
 800b816:	f000 825e 	beq.w	800bcd6 <lv_draw_map+0x672>
    out[0] = (uint16_t) LV_COLOR_GET_R(c) * mix;
 800b81a:	460a      	mov	r2, r1
 800b81c:	7b88      	ldrb	r0, [r1, #14]
    out[1] = (uint16_t) LV_COLOR_GET_G(c) * mix;
 800b81e:	7b49      	ldrb	r1, [r1, #13]
    out[2] = (uint16_t) LV_COLOR_GET_B(c) * mix;
 800b820:	7b12      	ldrb	r2, [r2, #12]
    out[0] = (uint16_t) LV_COLOR_GET_R(c) * mix;
 800b822:	fb00 f003 	mul.w	r0, r0, r3
    out[1] = (uint16_t) LV_COLOR_GET_G(c) * mix;
 800b826:	fb01 f103 	mul.w	r1, r1, r3
    out[2] = (uint16_t) LV_COLOR_GET_B(c) * mix;
 800b82a:	fb02 f303 	mul.w	r3, r2, r3
    out[0] = (uint16_t) LV_COLOR_GET_R(c) * mix;
 800b82e:	900e      	str	r0, [sp, #56]	; 0x38
    out[1] = (uint16_t) LV_COLOR_GET_G(c) * mix;
 800b830:	910f      	str	r1, [sp, #60]	; 0x3c
    out[2] = (uint16_t) LV_COLOR_GET_B(c) * mix;
 800b832:	9310      	str	r3, [sp, #64]	; 0x40
                lv_color_premult(draw_dsc->recolor, draw_dsc->recolor_opa, recolor_premult);
            }

            lv_draw_mask_res_t mask_res;
            mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
 800b834:	9b08      	ldr	r3, [sp, #32]
 800b836:	9a06      	ldr	r2, [sp, #24]
 800b838:	4313      	orrs	r3, r2
 800b83a:	931c      	str	r3, [sp, #112]	; 0x70
 800b83c:	f040 8240 	bne.w	800bcc0 <lv_draw_map+0x65c>
 800b840:	9a05      	ldr	r2, [sp, #20]
 800b842:	8853      	ldrh	r3, [r2, #2]
 800b844:	2b00      	cmp	r3, #0
 800b846:	f040 823b 	bne.w	800bcc0 <lv_draw_map+0x65c>
 800b84a:	8913      	ldrh	r3, [r2, #8]
 800b84c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b850:	bf14      	ite	ne
 800b852:	2302      	movne	r3, #2
 800b854:	2301      	moveq	r3, #1
 800b856:	931b      	str	r3, [sp, #108]	; 0x6c
                        draw_dsc->zoom != LV_IMG_ZOOM_NONE) ? LV_DRAW_MASK_RES_CHANGED : LV_DRAW_MASK_RES_FULL_COVER;

            /*Prepare the `mask_buf`if there are other masks*/
            if(other_mask_cnt) {
 800b858:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	f040 8236 	bne.w	800bccc <lv_draw_map+0x668>
            }

            int32_t x;
            int32_t y;
#if LV_USE_IMG_TRANSFORM
            int32_t rot_y = disp_area->y1 + draw_area.y1 - map_area->y1;
 800b860:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b862:	f9bd 1086 	ldrsh.w	r1, [sp, #134]	; 0x86
 800b866:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800b86a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b86c:	440b      	add	r3, r1
 800b86e:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800b872:	1a9b      	subs	r3, r3, r2
#endif
            for(y = 0; y < draw_area_h; y++) {
 800b874:	9a07      	ldr	r2, [sp, #28]
 800b876:	2a00      	cmp	r2, #0
 800b878:	f340 8098 	ble.w	800b9ac <lv_draw_map+0x348>
        uint32_t px_i = 0;
 800b87c:	2200      	movs	r2, #0
 800b87e:	b29b      	uxth	r3, r3
 800b880:	920b      	str	r2, [sp, #44]	; 0x2c
 800b882:	441e      	add	r6, r3
                    else if(mask_res_sub == LV_DRAW_MASK_RES_CHANGED) {
                        mask_res = LV_DRAW_MASK_RES_CHANGED;
                    }
                }

                map_buf_tmp += map_w * px_size_byte;
 800b884:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b886:	931d      	str	r3, [sp, #116]	; 0x74
 800b888:	0092      	lsls	r2, r2, #2
 800b88a:	9307      	str	r3, [sp, #28]
 800b88c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b88e:	9212      	str	r2, [sp, #72]	; 0x48
 800b890:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b892:	eb03 0a82 	add.w	sl, r3, r2, lsl #2
 800b896:	b2b3      	uxth	r3, r6
 800b898:	46d1      	mov	r9, sl
 800b89a:	46da      	mov	sl, fp
 800b89c:	46bb      	mov	fp, r7
 800b89e:	931a      	str	r3, [sp, #104]	; 0x68
                int32_t rot_x = disp_area->x1 + draw_area.x1 - map_area->x1;
 800b8a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b8a2:	f9bd 1084 	ldrsh.w	r1, [sp, #132]	; 0x84
 800b8a6:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 800b8aa:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b8ac:	440a      	add	r2, r1
 800b8ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b8b2:	1ad2      	subs	r2, r2, r3
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
 800b8b4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	f340 81f1 	ble.w	800bc9e <lv_draw_map+0x63a>
static inline bool _lv_img_buf_transform(lv_img_transform_dsc_t * dsc, lv_coord_t x, lv_coord_t y)
{
    const uint8_t * src_u8 = (const uint8_t *)dsc->cfg.src;

    /*Get the target point relative coordinates to the pivot*/
    int32_t xt = x - dsc->cfg.pivot_x;
 800b8bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b8be:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800b8c0:	4619      	mov	r1, r3
 800b8c2:	1ad2      	subs	r2, r2, r3
 800b8c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b8c6:	18cd      	adds	r5, r1, r3
 800b8c8:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b8ca:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 800b8ce:	1ad3      	subs	r3, r2, r3
 800b8d0:	9309      	str	r3, [sp, #36]	; 0x24
                    if(transform) {
 800b8d2:	f1bb 0f00 	cmp.w	fp, #0
 800b8d6:	f040 80c5 	bne.w	800ba64 <lv_draw_map+0x400>
                        if(alpha_byte) {
 800b8da:	9b06      	ldr	r3, [sp, #24]
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	f000 80bd 	beq.w	800ba5c <lv_draw_map+0x3f8>
                            lv_opa_t px_opa = map_px[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 800b8e2:	78e3      	ldrb	r3, [r4, #3]
                            mask_buf[px_i] = px_opa;
 800b8e4:	702b      	strb	r3, [r5, #0]
                            if(px_opa == 0) {
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	f000 814d 	beq.w	800bb86 <lv_draw_map+0x522>
                        c.full =  *((uint32_t *)map_px);
 800b8ec:	6823      	ldr	r3, [r4, #0]
                        if(chroma_key) {
 800b8ee:	9a08      	ldr	r2, [sp, #32]
                        c.ch.alpha = 0xFF;
 800b8f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
                        if(chroma_key) {
 800b8f4:	b11a      	cbz	r2, 800b8fe <lv_draw_map+0x29a>
                            if(c.full == chroma_keyed_color.full) {
 800b8f6:	f1b3 2fff 	cmp.w	r3, #4278255360	; 0xff00ff00
 800b8fa:	f000 8160 	beq.w	800bbbe <lv_draw_map+0x55a>
                    if(draw_dsc->recolor_opa != 0) {
 800b8fe:	9a05      	ldr	r2, [sp, #20]
 800b900:	7a92      	ldrb	r2, [r2, #10]
 800b902:	b332      	cbz	r2, 800b952 <lv_draw_map+0x2ee>
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800b904:	b2d8      	uxtb	r0, r3
 800b906:	9f10      	ldr	r7, [sp, #64]	; 0x40
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800b908:	f3c3 2107 	ubfx	r1, r3, #8, #8
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800b90c:	f3c3 4c07 	ubfx	ip, r3, #16, #8
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800b910:	fb00 700a 	mla	r0, r0, sl, r7
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800b914:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800b916:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800b918:	fb01 710a 	mla	r1, r1, sl, r7
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800b91c:	eb00 2700 	add.w	r7, r0, r0, lsl #8
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800b920:	fb0c 220a 	mla	r2, ip, sl, r2
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800b924:	eb00 10c7 	add.w	r0, r0, r7, lsl #7
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800b928:	eb01 2701 	add.w	r7, r1, r1, lsl #8
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800b92c:	0dc0      	lsrs	r0, r0, #23
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800b92e:	eb01 11c7 	add.w	r1, r1, r7, lsl #7
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800b932:	eb02 2702 	add.w	r7, r2, r2, lsl #8
 800b936:	f360 0307 	bfi	r3, r0, #0, #8
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800b93a:	f3c1 51c7 	ubfx	r1, r1, #23, #8
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800b93e:	eb02 12c7 	add.w	r2, r2, r7, lsl #7
 800b942:	f361 230f 	bfi	r3, r1, #8, #8
 800b946:	f3c2 52c7 	ubfx	r2, r2, #23, #8
    LV_COLOR_SET_G(c1, premult_c1[1]);
    LV_COLOR_SET_B(c1, premult_c1[2]);
    ret.full = mix > LV_OPA_50 ? c2.full : c1.full;
#endif

    return ret;
 800b94a:	f362 4317 	bfi	r3, r2, #16, #8
 800b94e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
                    map2[px_i].full = c.full;
 800b952:	6033      	str	r3, [r6, #0]
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
 800b954:	3404      	adds	r4, #4
 800b956:	3501      	adds	r5, #1
 800b958:	3604      	adds	r6, #4
 800b95a:	454c      	cmp	r4, r9
 800b95c:	d1b9      	bne.n	800b8d2 <lv_draw_map+0x26e>
 800b95e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b960:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b962:	f9bd 1084 	ldrsh.w	r1, [sp, #132]	; 0x84
 800b966:	189c      	adds	r4, r3, r2
                if(other_mask_cnt) {
 800b968:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	f040 8153 	bne.w	800bc16 <lv_draw_map+0x5b2>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800b970:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
                map_buf_tmp += map_w * px_size_byte;
 800b974:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b976:	9812      	ldr	r0, [sp, #72]	; 0x48
 800b978:	3301      	adds	r3, #1
 800b97a:	4402      	add	r2, r0
 800b97c:	1a5b      	subs	r3, r3, r1
 800b97e:	920d      	str	r2, [sp, #52]	; 0x34
                if(px_i + lv_area_get_width(&draw_area) < mask_buf_size) {
 800b980:	fa04 f383 	sxtah	r3, r4, r3
 800b984:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b986:	4293      	cmp	r3, r2
 800b988:	f080 811f 	bcs.w	800bbca <lv_draw_map+0x566>
                    blend_area.y2 ++;
 800b98c:	f8bd 3092 	ldrh.w	r3, [sp, #146]	; 0x92
 800b990:	940b      	str	r4, [sp, #44]	; 0x2c
 800b992:	3301      	adds	r3, #1
 800b994:	f8ad 3092 	strh.w	r3, [sp, #146]	; 0x92
            for(y = 0; y < draw_area_h; y++) {
 800b998:	9b07      	ldr	r3, [sp, #28]
 800b99a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b99c:	3301      	adds	r3, #1
 800b99e:	4491      	add	r9, r2
 800b9a0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b9a2:	b29b      	uxth	r3, r3
 800b9a4:	4293      	cmp	r3, r2
 800b9a6:	9307      	str	r3, [sp, #28]
 800b9a8:	f47f af7a 	bne.w	800b8a0 <lv_draw_map+0x23c>
                    }
                }
            }

            /*Flush the last part*/
            if(blend_area.y1 != blend_area.y2) {
 800b9ac:	f9bd 3092 	ldrsh.w	r3, [sp, #146]	; 0x92
 800b9b0:	f9bd 208e 	ldrsh.w	r2, [sp, #142]	; 0x8e
 800b9b4:	429a      	cmp	r2, r3
 800b9b6:	d010      	beq.n	800b9da <lv_draw_map+0x376>
                blend_area.y2--;
                _lv_blend_map(clip_area, &blend_area, map2, mask_buf, mask_res, draw_dsc->opa, draw_dsc->blend_mode);
 800b9b8:	9905      	ldr	r1, [sp, #20]
                blend_area.y2--;
 800b9ba:	1e5c      	subs	r4, r3, #1
                _lv_blend_map(clip_area, &blend_area, map2, mask_buf, mask_res, draw_dsc->opa, draw_dsc->blend_mode);
 800b9bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b9be:	ee18 0a10 	vmov	r0, s16
 800b9c2:	7c0a      	ldrb	r2, [r1, #16]
 800b9c4:	7809      	ldrb	r1, [r1, #0]
 800b9c6:	9300      	str	r3, [sp, #0]
 800b9c8:	9202      	str	r2, [sp, #8]
 800b9ca:	9101      	str	r1, [sp, #4]
 800b9cc:	a923      	add	r1, sp, #140	; 0x8c
 800b9ce:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b9d0:	9a18      	ldr	r2, [sp, #96]	; 0x60
                blend_area.y2--;
 800b9d2:	f8ad 4092 	strh.w	r4, [sp, #146]	; 0x92
                _lv_blend_map(clip_area, &blend_area, map2, mask_buf, mask_res, draw_dsc->opa, draw_dsc->blend_mode);
 800b9d6:	f7ff f803 	bl	800a9e0 <_lv_blend_map>
            }

            _lv_mem_buf_release(mask_buf);
 800b9da:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800b9dc:	f009 fa7c 	bl	8014ed8 <_lv_mem_buf_release>
            _lv_mem_buf_release(map2);
 800b9e0:	9818      	ldr	r0, [sp, #96]	; 0x60
 800b9e2:	f009 fa79 	bl	8014ed8 <_lv_mem_buf_release>
        }
    }
}
 800b9e6:	b03b      	add	sp, #236	; 0xec
 800b9e8:	ecbd 8b02 	vpop	{d8}
 800b9ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9f0:	9b05      	ldr	r3, [sp, #20]
 800b9f2:	f8b3 e002 	ldrh.w	lr, [r3, #2]
 800b9f6:	e677      	b.n	800b6e8 <lv_draw_map+0x84>
        bool transform = draw_dsc->angle != 0 || draw_dsc->zoom != LV_IMG_ZOOM_NONE ? true : false;
 800b9f8:	9b05      	ldr	r3, [sp, #20]
 800b9fa:	891b      	ldrh	r3, [r3, #8]
 800b9fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ba00:	f47f aeb7 	bne.w	800b772 <lv_draw_map+0x10e>
        if(other_mask_cnt == 0 && !transform && !chroma_key && draw_dsc->recolor_opa == LV_OPA_TRANSP && alpha_byte) {
 800ba04:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ba06:	b943      	cbnz	r3, 800ba1a <lv_draw_map+0x3b6>
 800ba08:	9b08      	ldr	r3, [sp, #32]
 800ba0a:	b933      	cbnz	r3, 800ba1a <lv_draw_map+0x3b6>
 800ba0c:	9b05      	ldr	r3, [sp, #20]
 800ba0e:	7a9b      	ldrb	r3, [r3, #10]
 800ba10:	b91b      	cbnz	r3, 800ba1a <lv_draw_map+0x3b6>
 800ba12:	9b06      	ldr	r3, [sp, #24]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	f040 817f 	bne.w	800bd18 <lv_draw_map+0x6b4>
            uint32_t hor_res = (uint32_t) lv_disp_get_hor_res(disp);
 800ba1a:	4650      	mov	r0, sl
 800ba1c:	f007 ff3c 	bl	8013898 <lv_disp_get_hor_res>
 800ba20:	4603      	mov	r3, r0
            uint32_t mask_buf_size = lv_area_get_size(&draw_area) > hor_res ? hor_res : lv_area_get_size(&draw_area);
 800ba22:	4620      	mov	r0, r4
            uint32_t hor_res = (uint32_t) lv_disp_get_hor_res(disp);
 800ba24:	461d      	mov	r5, r3
 800ba26:	9319      	str	r3, [sp, #100]	; 0x64
            uint32_t mask_buf_size = lv_area_get_size(&draw_area) > hor_res ? hor_res : lv_area_get_size(&draw_area);
 800ba28:	f008 fa7c 	bl	8013f24 <lv_area_get_size>
 800ba2c:	4285      	cmp	r5, r0
 800ba2e:	f080 8222 	bcs.w	800be76 <lv_draw_map+0x812>
            lv_color_t * map2 = _lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
 800ba32:	9c19      	ldr	r4, [sp, #100]	; 0x64
            _lv_memset_00(&trans_dsc, sizeof(lv_img_transform_dsc_t));
 800ba34:	ad25      	add	r5, sp, #148	; 0x94
            lv_color_t * map2 = _lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
 800ba36:	00a0      	lsls	r0, r4, #2
            _lv_memset_00(&trans_dsc, sizeof(lv_img_transform_dsc_t));
 800ba38:	ee08 5a90 	vmov	s17, r5
            lv_color_t * map2 = _lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
 800ba3c:	f009 fd74 	bl	8015528 <_lv_mem_buf_get>
            _lv_memset_00(&trans_dsc, sizeof(lv_img_transform_dsc_t));
 800ba40:	2200      	movs	r2, #0
            lv_color_t * map2 = _lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
 800ba42:	4603      	mov	r3, r0
            lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
 800ba44:	4620      	mov	r0, r4
            _lv_memset_00(&trans_dsc, sizeof(lv_img_transform_dsc_t));
 800ba46:	4617      	mov	r7, r2
            lv_color_t * map2 = _lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
 800ba48:	9318      	str	r3, [sp, #96]	; 0x60
            lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
 800ba4a:	f009 fd6d 	bl	8015528 <_lv_mem_buf_get>
 800ba4e:	4603      	mov	r3, r0
            _lv_memset_00(&trans_dsc, sizeof(lv_img_transform_dsc_t));
 800ba50:	2154      	movs	r1, #84	; 0x54
 800ba52:	4628      	mov	r0, r5
            lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
 800ba54:	9313      	str	r3, [sp, #76]	; 0x4c
            _lv_memset_00(&trans_dsc, sizeof(lv_img_transform_dsc_t));
 800ba56:	f009 fe8f 	bl	8015778 <_lv_memset_00>
            if(transform) {
 800ba5a:	e6d6      	b.n	800b80a <lv_draw_map+0x1a6>
                            mask_buf[px_i] = 0xFF;
 800ba5c:	f04f 33ff 	mov.w	r3, #4294967295
 800ba60:	702b      	strb	r3, [r5, #0]
 800ba62:	e743      	b.n	800b8ec <lv_draw_map+0x288>
 800ba64:	9b09      	ldr	r3, [sp, #36]	; 0x24
    int32_t yt = y - dsc->cfg.pivot_y;

    int32_t xs;
    int32_t ys;
    if(dsc->cfg.zoom == LV_IMG_ZOOM_NONE) {
 800ba66:	f8bd 20a2 	ldrh.w	r2, [sp, #162]	; 0xa2
    int32_t xt = x - dsc->cfg.pivot_x;
 800ba6a:	442b      	add	r3, r5
 800ba6c:	f9bd 009c 	ldrsh.w	r0, [sp, #156]	; 0x9c
    int32_t yt = y - dsc->cfg.pivot_y;
 800ba70:	f9bd 101c 	ldrsh.w	r1, [sp, #28]
    if(dsc->cfg.zoom == LV_IMG_ZOOM_NONE) {
 800ba74:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
    int32_t yt = y - dsc->cfg.pivot_y;
 800ba78:	f9bd 709e 	ldrsh.w	r7, [sp, #158]	; 0x9e
    int32_t xt = x - dsc->cfg.pivot_x;
 800ba7c:	b21b      	sxth	r3, r3
    int32_t yt = y - dsc->cfg.pivot_y;
 800ba7e:	eba1 0107 	sub.w	r1, r1, r7
    int32_t xt = x - dsc->cfg.pivot_x;
 800ba82:	eba3 0300 	sub.w	r3, r3, r0
    if(dsc->cfg.zoom == LV_IMG_ZOOM_NONE) {
 800ba86:	d064      	beq.n	800bb52 <lv_draw_map+0x4ee>
        /*Get the source pixel from the upscaled image*/
        xs = ((dsc->tmp.cosma * xt - dsc->tmp.sinma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT - 8)) + dsc->tmp.pivot_x_256;
        ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT - 8)) + dsc->tmp.pivot_y_256;
    }
    else if(dsc->cfg.angle == 0) {
 800ba88:	f9bd 20a0 	ldrsh.w	r2, [sp, #160]	; 0xa0
 800ba8c:	2a00      	cmp	r2, #0
 800ba8e:	d17d      	bne.n	800bb8c <lv_draw_map+0x528>
        xt = (int32_t)((int32_t)xt * dsc->tmp.zoom_inv) >> _LV_ZOOM_INV_UPSCALE;
 800ba90:	9a35      	ldr	r2, [sp, #212]	; 0xd4
        yt = (int32_t)((int32_t)yt * dsc->tmp.zoom_inv) >> _LV_ZOOM_INV_UPSCALE;
        xs = xt + dsc->tmp.pivot_x_256;
 800ba92:	9f30      	ldr	r7, [sp, #192]	; 0xc0
        xt = (int32_t)((int32_t)xt * dsc->tmp.zoom_inv) >> _LV_ZOOM_INV_UPSCALE;
 800ba94:	fb02 f303 	mul.w	r3, r2, r3
        yt = (int32_t)((int32_t)yt * dsc->tmp.zoom_inv) >> _LV_ZOOM_INV_UPSCALE;
 800ba98:	fb02 f101 	mul.w	r1, r2, r1
        ys = yt + dsc->tmp.pivot_y_256;
 800ba9c:	9a31      	ldr	r2, [sp, #196]	; 0xc4
        xs = xt + dsc->tmp.pivot_x_256;
 800ba9e:	eb07 1763 	add.w	r7, r7, r3, asr #5
        ys = yt + dsc->tmp.pivot_y_256;
 800baa2:	eb02 1861 	add.w	r8, r2, r1, asr #5
        xs = ((dsc->tmp.cosma * xt - dsc->tmp.sinma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT)) + dsc->tmp.pivot_x_256;
        ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT)) + dsc->tmp.pivot_y_256;
    }

    /*Get the integer part of the source pixel*/
    int32_t xs_int = xs >> 8;
 800baa6:	1238      	asrs	r0, r7, #8
    int32_t ys_int = ys >> 8;

    if(xs_int >= dsc->cfg.src_w) return false;
    else if(xs_int < 0) return false;
 800baa8:	2f00      	cmp	r7, #0
    if(xs_int >= dsc->cfg.src_w) return false;
 800baaa:	f9bd 3098 	ldrsh.w	r3, [sp, #152]	; 0x98
    int32_t xs_int = xs >> 8;
 800baae:	900a      	str	r0, [sp, #40]	; 0x28
    else if(xs_int < 0) return false;
 800bab0:	db65      	blt.n	800bb7e <lv_draw_map+0x51a>
 800bab2:	4298      	cmp	r0, r3
 800bab4:	da63      	bge.n	800bb7e <lv_draw_map+0x51a>

    if(ys_int >= dsc->cfg.src_h) return false;
 800bab6:	f9bd 209a 	ldrsh.w	r2, [sp, #154]	; 0x9a
    int32_t ys_int = ys >> 8;
 800baba:	ea4f 2128 	mov.w	r1, r8, asr #8
    else if(ys_int < 0) return false;
 800babe:	ebb2 2f28 	cmp.w	r2, r8, asr #8
    int32_t ys_int = ys >> 8;
 800bac2:	910c      	str	r1, [sp, #48]	; 0x30
    else if(ys_int < 0) return false;
 800bac4:	dd5b      	ble.n	800bb7e <lv_draw_map+0x51a>
 800bac6:	2900      	cmp	r1, #0
 800bac8:	db59      	blt.n	800bb7e <lv_draw_map+0x51a>

    uint8_t px_size;
    uint32_t pxi;
    if(dsc->tmp.native_color) {
 800baca:	f89d 20d0 	ldrb.w	r2, [sp, #208]	; 0xd0
 800bace:	f012 0c04 	ands.w	ip, r2, #4
 800bad2:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 800bad6:	f000 80cc 	beq.w	800bc72 <lv_draw_map+0x60e>
        if(dsc->tmp.has_alpha == 0) {
            px_size = LV_COLOR_SIZE >> 3;

            pxi     = dsc->cfg.src_w * ys_int * px_size + xs_int * px_size;
 800bada:	990c      	ldr	r1, [sp, #48]	; 0x30
    const uint8_t * src_u8 = (const uint8_t *)dsc->cfg.src;
 800badc:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
            pxi     = dsc->cfg.src_w * ys_int * px_size + xs_int * px_size;
 800bae0:	fb03 0301 	mla	r3, r3, r1, r0
            px_size = LV_COLOR_SIZE >> 3;
 800bae4:	2104      	movs	r1, #4
 800bae6:	9117      	str	r1, [sp, #92]	; 0x5c
            _lv_memcpy_small(&dsc->res.color, &src_u8[pxi], px_size);
 800bae8:	eb0c 0183 	add.w	r1, ip, r3, lsl #2
{
    uint8_t * d8 = (uint8_t *)dst;
    const uint8_t * s8 = (const uint8_t *)src;

    while(len) {
        *d8 = *s8;
 800baec:	f81c 0023 	ldrb.w	r0, [ip, r3, lsl #2]
            pxi     = dsc->cfg.src_w * ys_int * px_size + xs_int * px_size;
 800baf0:	009b      	lsls	r3, r3, #2
 800baf2:	f88d 00ac 	strb.w	r0, [sp, #172]	; 0xac
 800baf6:	7848      	ldrb	r0, [r1, #1]
 800baf8:	f88d 00ad 	strb.w	r0, [sp, #173]	; 0xad
 800bafc:	7888      	ldrb	r0, [r1, #2]
 800bafe:	f88d 00ae 	strb.w	r0, [sp, #174]	; 0xae
        if(dsc->tmp.has_alpha == 0) {
 800bb02:	0790      	lsls	r0, r2, #30
 800bb04:	78c9      	ldrb	r1, [r1, #3]
 800bb06:	bf54      	ite	pl
 800bb08:	f88d 10af 	strbpl.w	r1, [sp, #175]	; 0xaf
        }
        else {
            px_size = LV_IMG_PX_SIZE_ALPHA_BYTE;
            pxi     = dsc->cfg.src_w * ys_int * px_size + xs_int * px_size;
            _lv_memcpy_small(&dsc->res.color, &src_u8[pxi], px_size - 1);
            dsc->res.opa = src_u8[pxi + px_size - 1];
 800bb0c:	f88d 10b0 	strbmi.w	r1, [sp, #176]	; 0xb0
        px_size = 0;    /*unused*/
        dsc->res.color = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, xs_int, ys_int, dsc->cfg.color);
        dsc->res.opa = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, xs_int, ys_int);
    }

    if(dsc->tmp.chroma_keyed) {
 800bb10:	07d2      	lsls	r2, r2, #31
 800bb12:	d503      	bpl.n	800bb1c <lv_draw_map+0x4b8>
        lv_color_t ct = LV_COLOR_TRANSP;
        if(dsc->res.color.full == ct.full) return false;
 800bb14:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 800bb16:	f1b2 2fff 	cmp.w	r2, #4278255360	; 0xff00ff00
 800bb1a:	d030      	beq.n	800bb7e <lv_draw_map+0x51a>
    }

    if(dsc->cfg.antialias == false) return true;
 800bb1c:	f89d 20a9 	ldrb.w	r2, [sp, #169]	; 0xa9
 800bb20:	b192      	cbz	r2, 800bb48 <lv_draw_map+0x4e4>

    dsc->tmp.xs = xs;
    dsc->tmp.ys = ys;
    dsc->tmp.xs_int = xs_int;
 800bb22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    dsc->tmp.ys_int = ys_int;
    dsc->tmp.pxi = pxi;
    dsc->tmp.px_size = px_size;

    bool ret;
    ret = _lv_img_buf_transform_anti_alias(dsc);
 800bb24:	ee18 0a90 	vmov	r0, s17
    dsc->tmp.pxi = pxi;
 800bb28:	9338      	str	r3, [sp, #224]	; 0xe0
    dsc->tmp.xs_int = xs_int;
 800bb2a:	f8ad 20dc 	strh.w	r2, [sp, #220]	; 0xdc
    dsc->tmp.px_size = px_size;
 800bb2e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    dsc->tmp.ys_int = ys_int;
 800bb30:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    dsc->tmp.xs = xs;
 800bb32:	f8ad 70d8 	strh.w	r7, [sp, #216]	; 0xd8
    dsc->tmp.ys = ys;
 800bb36:	f8ad 80da 	strh.w	r8, [sp, #218]	; 0xda
    dsc->tmp.ys_int = ys_int;
 800bb3a:	f8ad 20de 	strh.w	r2, [sp, #222]	; 0xde
    dsc->tmp.px_size = px_size;
 800bb3e:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
    ret = _lv_img_buf_transform_anti_alias(dsc);
 800bb42:	f005 fe95 	bl	8011870 <_lv_img_buf_transform_anti_alias>
                        if(ret == false) {
 800bb46:	b1d0      	cbz	r0, 800bb7e <lv_draw_map+0x51a>
                            mask_buf[px_i] = trans_dsc.res.opa;
 800bb48:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
 800bb4c:	702b      	strb	r3, [r5, #0]
                            c.full = trans_dsc.res.color.full;
 800bb4e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800bb50:	e6d5      	b.n	800b8fe <lv_draw_map+0x29a>
        xs = ((dsc->tmp.cosma * xt - dsc->tmp.sinma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT - 8)) + dsc->tmp.pivot_x_256;
 800bb52:	e9dd 0732 	ldrd	r0, r7, [sp, #200]	; 0xc8
 800bb56:	fb07 f203 	mul.w	r2, r7, r3
        ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT - 8)) + dsc->tmp.pivot_y_256;
 800bb5a:	fb07 f801 	mul.w	r8, r7, r1
        xs = ((dsc->tmp.cosma * xt - dsc->tmp.sinma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT - 8)) + dsc->tmp.pivot_x_256;
 800bb5e:	fb00 2111 	mls	r1, r0, r1, r2
        ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT - 8)) + dsc->tmp.pivot_y_256;
 800bb62:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 800bb64:	fb00 8803 	mla	r8, r0, r3, r8
        xs = ((dsc->tmp.cosma * xt - dsc->tmp.sinma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT - 8)) + dsc->tmp.pivot_x_256;
 800bb68:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 800bb6a:	eb03 07a1 	add.w	r7, r3, r1, asr #2
    if(xs_int >= dsc->cfg.src_w) return false;
 800bb6e:	f9bd 3098 	ldrsh.w	r3, [sp, #152]	; 0x98
        ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT - 8)) + dsc->tmp.pivot_y_256;
 800bb72:	eb02 08a8 	add.w	r8, r2, r8, asr #2
    int32_t xs_int = xs >> 8;
 800bb76:	1238      	asrs	r0, r7, #8
    else if(xs_int < 0) return false;
 800bb78:	2f00      	cmp	r7, #0
    int32_t xs_int = xs >> 8;
 800bb7a:	900a      	str	r0, [sp, #40]	; 0x28
    else if(xs_int < 0) return false;
 800bb7c:	da99      	bge.n	800bab2 <lv_draw_map+0x44e>
                            mask_buf[px_i] = LV_OPA_TRANSP;
 800bb7e:	f04f 0300 	mov.w	r3, #0
 800bb82:	702b      	strb	r3, [r5, #0]
                            continue;
 800bb84:	e6e6      	b.n	800b954 <lv_draw_map+0x2f0>
                                map2[px_i].full = 0;
 800bb86:	f8c6 b000 	str.w	fp, [r6]
                                continue;
 800bb8a:	e6e3      	b.n	800b954 <lv_draw_map+0x2f0>
        xt = (int32_t)((int32_t)xt * dsc->tmp.zoom_inv) >> _LV_ZOOM_INV_UPSCALE;
 800bb8c:	9f35      	ldr	r7, [sp, #212]	; 0xd4
        xs = ((dsc->tmp.cosma * xt - dsc->tmp.sinma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT)) + dsc->tmp.pivot_x_256;
 800bb8e:	9a33      	ldr	r2, [sp, #204]	; 0xcc
        xt = (int32_t)((int32_t)xt * dsc->tmp.zoom_inv) >> _LV_ZOOM_INV_UPSCALE;
 800bb90:	fb07 f803 	mul.w	r8, r7, r3
        xs = ((dsc->tmp.cosma * xt - dsc->tmp.sinma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT)) + dsc->tmp.pivot_x_256;
 800bb94:	9832      	ldr	r0, [sp, #200]	; 0xc8
        yt = (int32_t)((int32_t)yt * dsc->tmp.zoom_inv) >> _LV_ZOOM_INV_UPSCALE;
 800bb96:	fb07 f301 	mul.w	r3, r7, r1
        xs = ((dsc->tmp.cosma * xt - dsc->tmp.sinma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT)) + dsc->tmp.pivot_x_256;
 800bb9a:	9f30      	ldr	r7, [sp, #192]	; 0xc0
        xt = (int32_t)((int32_t)xt * dsc->tmp.zoom_inv) >> _LV_ZOOM_INV_UPSCALE;
 800bb9c:	ea4f 1868 	mov.w	r8, r8, asr #5
        yt = (int32_t)((int32_t)yt * dsc->tmp.zoom_inv) >> _LV_ZOOM_INV_UPSCALE;
 800bba0:	115b      	asrs	r3, r3, #5
        xs = ((dsc->tmp.cosma * xt - dsc->tmp.sinma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT)) + dsc->tmp.pivot_x_256;
 800bba2:	fb02 f108 	mul.w	r1, r2, r8
        ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT)) + dsc->tmp.pivot_y_256;
 800bba6:	fb02 f203 	mul.w	r2, r2, r3
        xs = ((dsc->tmp.cosma * xt - dsc->tmp.sinma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT)) + dsc->tmp.pivot_x_256;
 800bbaa:	fb00 1313 	mls	r3, r0, r3, r1
        ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT)) + dsc->tmp.pivot_y_256;
 800bbae:	9931      	ldr	r1, [sp, #196]	; 0xc4
 800bbb0:	fb00 2808 	mla	r8, r0, r8, r2
        xs = ((dsc->tmp.cosma * xt - dsc->tmp.sinma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT)) + dsc->tmp.pivot_x_256;
 800bbb4:	eb07 27a3 	add.w	r7, r7, r3, asr #10
        ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT)) + dsc->tmp.pivot_y_256;
 800bbb8:	eb01 28a8 	add.w	r8, r1, r8, asr #10
 800bbbc:	e773      	b.n	800baa6 <lv_draw_map+0x442>
                                mask_buf[px_i] = LV_OPA_TRANSP;
 800bbbe:	f04f 0300 	mov.w	r3, #0
 800bbc2:	702b      	strb	r3, [r5, #0]
                                map2[px_i].full = 0;
 800bbc4:	2300      	movs	r3, #0
 800bbc6:	6033      	str	r3, [r6, #0]
                                continue;
 800bbc8:	e6c4      	b.n	800b954 <lv_draw_map+0x2f0>
                    _lv_blend_map(clip_area, &blend_area, map2, mask_buf, mask_res, draw_dsc->opa, draw_dsc->blend_mode);
 800bbca:	9d05      	ldr	r5, [sp, #20]
 800bbcc:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800bbce:	7c28      	ldrb	r0, [r5, #16]
 800bbd0:	782c      	ldrb	r4, [r5, #0]
 800bbd2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bbd4:	9100      	str	r1, [sp, #0]
 800bbd6:	a923      	add	r1, sp, #140	; 0x8c
 800bbd8:	9002      	str	r0, [sp, #8]
 800bbda:	ee18 0a10 	vmov	r0, s16
 800bbde:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800bbe0:	9401      	str	r4, [sp, #4]
 800bbe2:	f7fe fefd 	bl	800a9e0 <_lv_blend_map>
                    blend_area.y1 = blend_area.y2 + 1;
 800bbe6:	f8bd 3092 	ldrh.w	r3, [sp, #146]	; 0x92
 800bbea:	3301      	adds	r3, #1
 800bbec:	b21b      	sxth	r3, r3
 800bbee:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
                    blend_area.y2 = blend_area.y1;
 800bbf2:	f8ad 3092 	strh.w	r3, [sp, #146]	; 0x92
                    mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
 800bbf6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d12e      	bne.n	800bc5a <lv_draw_map+0x5f6>
 800bbfc:	886b      	ldrh	r3, [r5, #2]
 800bbfe:	bb63      	cbnz	r3, 800bc5a <lv_draw_map+0x5f6>
 800bc00:	892b      	ldrh	r3, [r5, #8]
 800bc02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bc06:	bf14      	ite	ne
 800bc08:	2302      	movne	r3, #2
 800bc0a:	2301      	moveq	r3, #1
 800bc0c:	931b      	str	r3, [sp, #108]	; 0x6c
                    if(other_mask_cnt) {
 800bc0e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bc10:	bb43      	cbnz	r3, 800bc64 <lv_draw_map+0x600>
                    px_i = 0;
 800bc12:	930b      	str	r3, [sp, #44]	; 0x2c
 800bc14:	e6c0      	b.n	800b998 <lv_draw_map+0x334>
                    mask_res_sub = lv_draw_mask_apply(mask_buf + px_i_start, draw_area.x1 + vdb->area.x1, y + draw_area.y1 + vdb->area.y1,
 800bc16:	9b07      	ldr	r3, [sp, #28]
 800bc18:	b289      	uxth	r1, r1
 800bc1a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800bc1c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800bc1e:	1a9a      	subs	r2, r3, r2
 800bc20:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bc22:	f8bd 7088 	ldrh.w	r7, [sp, #136]	; 0x88
 800bc26:	46ac      	mov	ip, r5
 800bc28:	8a58      	ldrh	r0, [r3, #18]
 800bc2a:	f8bd 6086 	ldrh.w	r6, [sp, #134]	; 0x86
 800bc2e:	3701      	adds	r7, #1
 800bc30:	8a1b      	ldrh	r3, [r3, #16]
 800bc32:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800bc34:	4406      	add	r6, r0
 800bc36:	1a7f      	subs	r7, r7, r1
 800bc38:	4419      	add	r1, r3
 800bc3a:	44ac      	add	ip, r5
 800bc3c:	4432      	add	r2, r6
 800bc3e:	b23b      	sxth	r3, r7
 800bc40:	4660      	mov	r0, ip
 800bc42:	b209      	sxth	r1, r1
 800bc44:	b212      	sxth	r2, r2
 800bc46:	4665      	mov	r5, ip
 800bc48:	f002 fd80 	bl	800e74c <lv_draw_mask_apply>
                    if(mask_res_sub == LV_DRAW_MASK_RES_TRANSP) {
 800bc4c:	b348      	cbz	r0, 800bca2 <lv_draw_map+0x63e>
                    else if(mask_res_sub == LV_DRAW_MASK_RES_CHANGED) {
 800bc4e:	2802      	cmp	r0, #2
                        mask_res = LV_DRAW_MASK_RES_CHANGED;
 800bc50:	f9bd 1084 	ldrsh.w	r1, [sp, #132]	; 0x84
 800bc54:	bf08      	it	eq
 800bc56:	901b      	streq	r0, [sp, #108]	; 0x6c
 800bc58:	e68a      	b.n	800b970 <lv_draw_map+0x30c>
                    mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
 800bc5a:	2302      	movs	r3, #2
 800bc5c:	931b      	str	r3, [sp, #108]	; 0x6c
                    if(other_mask_cnt) {
 800bc5e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d0d6      	beq.n	800bc12 <lv_draw_map+0x5ae>
                        _lv_memset_ff(mask_buf, mask_buf_size);
 800bc64:	9919      	ldr	r1, [sp, #100]	; 0x64
 800bc66:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800bc68:	f009 fdec 	bl	8015844 <_lv_memset_ff>
                    px_i = 0;
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	930b      	str	r3, [sp, #44]	; 0x2c
 800bc70:	e692      	b.n	800b998 <lv_draw_map+0x334>
        dsc->res.color = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, xs_int, ys_int, dsc->cfg.color);
 800bc72:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 800bc76:	a82d      	add	r0, sp, #180	; 0xb4
 800bc78:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 800bc7c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800bc7e:	911f      	str	r1, [sp, #124]	; 0x7c
 800bc80:	921e      	str	r2, [sp, #120]	; 0x78
 800bc82:	f005 fb75 	bl	8011370 <lv_img_buf_get_px_color>
        dsc->res.opa = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, xs_int, ys_int);
 800bc86:	9a1e      	ldr	r2, [sp, #120]	; 0x78
        dsc->res.color = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, xs_int, ys_int, dsc->cfg.color);
 800bc88:	902b      	str	r0, [sp, #172]	; 0xac
        dsc->res.opa = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, xs_int, ys_int);
 800bc8a:	a82d      	add	r0, sp, #180	; 0xb4
 800bc8c:	991f      	ldr	r1, [sp, #124]	; 0x7c
 800bc8e:	f005 fbf5 	bl	801147c <lv_img_buf_get_px_alpha>
 800bc92:	f89d 20d0 	ldrb.w	r2, [sp, #208]	; 0xd0
        pxi = 0; /*unused*/
 800bc96:	9b17      	ldr	r3, [sp, #92]	; 0x5c
        dsc->res.opa = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, xs_int, ys_int);
 800bc98:	f88d 00b0 	strb.w	r0, [sp, #176]	; 0xb0
 800bc9c:	e738      	b.n	800bb10 <lv_draw_map+0x4ac>
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
 800bc9e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800bca0:	e662      	b.n	800b968 <lv_draw_map+0x304>
 800bca2:	f8bd 1088 	ldrh.w	r1, [sp, #136]	; 0x88
                        mask_res = LV_DRAW_MASK_RES_CHANGED;
 800bca6:	2202      	movs	r2, #2
 800bca8:	f8bd 3084 	ldrh.w	r3, [sp, #132]	; 0x84
                        _lv_memset_00(mask_buf + px_i_start, lv_area_get_width(&draw_area));
 800bcac:	4628      	mov	r0, r5
 800bcae:	3101      	adds	r1, #1
                        mask_res = LV_DRAW_MASK_RES_CHANGED;
 800bcb0:	921b      	str	r2, [sp, #108]	; 0x6c
 800bcb2:	1ac9      	subs	r1, r1, r3
                        _lv_memset_00(mask_buf + px_i_start, lv_area_get_width(&draw_area));
 800bcb4:	b209      	sxth	r1, r1
 800bcb6:	f009 fd5f 	bl	8015778 <_lv_memset_00>
                        mask_res = LV_DRAW_MASK_RES_CHANGED;
 800bcba:	f9bd 1084 	ldrsh.w	r1, [sp, #132]	; 0x84
 800bcbe:	e657      	b.n	800b970 <lv_draw_map+0x30c>
            mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
 800bcc0:	2302      	movs	r3, #2
 800bcc2:	931b      	str	r3, [sp, #108]	; 0x6c
            if(other_mask_cnt) {
 800bcc4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	f43f adca 	beq.w	800b860 <lv_draw_map+0x1fc>
                _lv_memset_ff(mask_buf, mask_buf_size);
 800bccc:	9919      	ldr	r1, [sp, #100]	; 0x64
 800bcce:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800bcd0:	f009 fdb8 	bl	8015844 <_lv_memset_ff>
 800bcd4:	e5c4      	b.n	800b860 <lv_draw_map+0x1fc>
            uint16_t recolor_premult[3] = {0};
 800bcd6:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
 800bcda:	930e      	str	r3, [sp, #56]	; 0x38
 800bcdc:	e5aa      	b.n	800b834 <lv_draw_map+0x1d0>
                if(alpha_byte) cf = LV_IMG_CF_TRUE_COLOR_ALPHA;
 800bcde:	2105      	movs	r1, #5
 800bce0:	e56e      	b.n	800b7c0 <lv_draw_map+0x15c>
       chroma_key == false && alpha_byte == false && draw_dsc->recolor_opa == LV_OPA_TRANSP) {
 800bce2:	9b08      	ldr	r3, [sp, #32]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	f47f acff 	bne.w	800b6e8 <lv_draw_map+0x84>
 800bcea:	9b06      	ldr	r3, [sp, #24]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	f47f acfb 	bne.w	800b6e8 <lv_draw_map+0x84>
 800bcf2:	9b05      	ldr	r3, [sp, #20]
 800bcf4:	7a9b      	ldrb	r3, [r3, #10]
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	f47f acf6 	bne.w	800b6e8 <lv_draw_map+0x84>
        _lv_blend_map(clip_area, map_area, (lv_color_t *)map_p, NULL, LV_DRAW_MASK_RES_FULL_COVER, draw_dsc->opa,
 800bcfc:	9a05      	ldr	r2, [sp, #20]
 800bcfe:	2401      	movs	r4, #1
 800bd00:	9916      	ldr	r1, [sp, #88]	; 0x58
 800bd02:	ee18 0a10 	vmov	r0, s16
 800bd06:	7c16      	ldrb	r6, [r2, #16]
 800bd08:	7815      	ldrb	r5, [r2, #0]
 800bd0a:	464a      	mov	r2, r9
 800bd0c:	9400      	str	r4, [sp, #0]
 800bd0e:	e9cd 5601 	strd	r5, r6, [sp, #4]
 800bd12:	f7fe fe65 	bl	800a9e0 <_lv_blend_map>
 800bd16:	e666      	b.n	800b9e6 <lv_draw_map+0x382>
            uint32_t hor_res = (uint32_t) lv_disp_get_hor_res(disp);
 800bd18:	4650      	mov	r0, sl
 800bd1a:	f007 fdbd 	bl	8013898 <lv_disp_get_hor_res>
 800bd1e:	4603      	mov	r3, r0
            uint32_t mask_buf_size = lv_area_get_size(&draw_area) > (uint32_t) hor_res ? hor_res : lv_area_get_size(&draw_area);
 800bd20:	4620      	mov	r0, r4
            uint32_t hor_res = (uint32_t) lv_disp_get_hor_res(disp);
 800bd22:	469a      	mov	sl, r3
            uint32_t mask_buf_size = lv_area_get_size(&draw_area) > (uint32_t) hor_res ? hor_res : lv_area_get_size(&draw_area);
 800bd24:	f008 f8fe 	bl	8013f24 <lv_area_get_size>
 800bd28:	4550      	cmp	r0, sl
 800bd2a:	d978      	bls.n	800be1e <lv_draw_map+0x7ba>
            lv_color_t * map2 = _lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
 800bd2c:	ea4f 008a 	mov.w	r0, sl, lsl #2
 800bd30:	f009 fbfa 	bl	8015528 <_lv_mem_buf_get>
 800bd34:	4680      	mov	r8, r0
            lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
 800bd36:	4650      	mov	r0, sl
 800bd38:	f009 fbf6 	bl	8015528 <_lv_mem_buf_get>
            for(y = 0; y < draw_area_h; y++) {
 800bd3c:	9b07      	ldr	r3, [sp, #28]
            lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
 800bd3e:	4681      	mov	r9, r0
            for(y = 0; y < draw_area_h; y++) {
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	dd71      	ble.n	800be28 <lv_draw_map+0x7c4>
                map_buf_tmp += map_w * px_size_byte;
 800bd44:	9b09      	ldr	r3, [sp, #36]	; 0x24
            for(y = 0; y < draw_area_h; y++) {
 800bd46:	2600      	movs	r6, #0
 800bd48:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bd4a:	46c1      	mov	r9, r8
 800bd4c:	9911      	ldr	r1, [sp, #68]	; 0x44
                map_buf_tmp += map_w * px_size_byte;
 800bd4e:	009f      	lsls	r7, r3, #2
                    map2[px_i].ch.alpha = 0xFF;
 800bd50:	25ff      	movs	r5, #255	; 0xff
        uint32_t px_i = 0;
 800bd52:	46b4      	mov	ip, r6
 800bd54:	eb02 0481 	add.w	r4, r2, r1, lsl #2
 800bd58:	4603      	mov	r3, r0
 800bd5a:	4693      	mov	fp, r2
 800bd5c:	4688      	mov	r8, r1
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
 800bd5e:	f1b8 0f00 	cmp.w	r8, #0
 800bd62:	dd10      	ble.n	800bd86 <lv_draw_map+0x722>
 800bd64:	f10c 3eff 	add.w	lr, ip, #4294967295
 800bd68:	eb09 018c 	add.w	r1, r9, ip, lsl #2
 800bd6c:	465a      	mov	r2, fp
 800bd6e:	449e      	add	lr, r3
                    lv_opa_t px_opa = map_px[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 800bd70:	78d0      	ldrb	r0, [r2, #3]
                    mask_buf[px_i] = px_opa;
 800bd72:	f80e 0f01 	strb.w	r0, [lr, #1]!
                    if(px_opa) {
 800bd76:	2800      	cmp	r0, #0
 800bd78:	d159      	bne.n	800be2e <lv_draw_map+0x7ca>
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
 800bd7a:	3204      	adds	r2, #4
                    map2[px_i].ch.alpha = 0xFF;
 800bd7c:	70cd      	strb	r5, [r1, #3]
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
 800bd7e:	3104      	adds	r1, #4
 800bd80:	42a2      	cmp	r2, r4
 800bd82:	d1f5      	bne.n	800bd70 <lv_draw_map+0x70c>
 800bd84:	44c4      	add	ip, r8
 800bd86:	f8bd 2088 	ldrh.w	r2, [sp, #136]	; 0x88
                map_buf_tmp += map_w * px_size_byte;
 800bd8a:	44bb      	add	fp, r7
 800bd8c:	f8bd 1084 	ldrh.w	r1, [sp, #132]	; 0x84
 800bd90:	3201      	adds	r2, #1
 800bd92:	1a52      	subs	r2, r2, r1
                if(px_i + lv_area_get_width(&draw_area) < mask_buf_size) {
 800bd94:	fa0c f282 	sxtah	r2, ip, r2
 800bd98:	4552      	cmp	r2, sl
 800bd9a:	d252      	bcs.n	800be42 <lv_draw_map+0x7de>
                    blend_area.y2 ++;
 800bd9c:	f8bd 2092 	ldrh.w	r2, [sp, #146]	; 0x92
 800bda0:	3201      	adds	r2, #1
 800bda2:	b212      	sxth	r2, r2
 800bda4:	f8ad 2092 	strh.w	r2, [sp, #146]	; 0x92
            for(y = 0; y < draw_area_h; y++) {
 800bda8:	3601      	adds	r6, #1
 800bdaa:	9907      	ldr	r1, [sp, #28]
 800bdac:	443c      	add	r4, r7
 800bdae:	428e      	cmp	r6, r1
 800bdb0:	d1d5      	bne.n	800bd5e <lv_draw_map+0x6fa>
 800bdb2:	46c8      	mov	r8, r9
 800bdb4:	4699      	mov	r9, r3
 800bdb6:	4613      	mov	r3, r2
            if(blend_area.y1 != blend_area.y2) {
 800bdb8:	f9bd 208e 	ldrsh.w	r2, [sp, #142]	; 0x8e
 800bdbc:	429a      	cmp	r2, r3
 800bdbe:	d010      	beq.n	800bde2 <lv_draw_map+0x77e>
                _lv_blend_map(clip_area, &blend_area, map2, mask_buf, LV_DRAW_MASK_RES_CHANGED, draw_dsc->opa, draw_dsc->blend_mode);
 800bdc0:	9905      	ldr	r1, [sp, #20]
 800bdc2:	2202      	movs	r2, #2
                blend_area.y2--;
 800bdc4:	1e5c      	subs	r4, r3, #1
                _lv_blend_map(clip_area, &blend_area, map2, mask_buf, LV_DRAW_MASK_RES_CHANGED, draw_dsc->opa, draw_dsc->blend_mode);
 800bdc6:	ee18 0a10 	vmov	r0, s16
 800bdca:	7c0d      	ldrb	r5, [r1, #16]
 800bdcc:	464b      	mov	r3, r9
 800bdce:	7809      	ldrb	r1, [r1, #0]
 800bdd0:	9200      	str	r2, [sp, #0]
 800bdd2:	4642      	mov	r2, r8
                blend_area.y2--;
 800bdd4:	f8ad 4092 	strh.w	r4, [sp, #146]	; 0x92
                _lv_blend_map(clip_area, &blend_area, map2, mask_buf, LV_DRAW_MASK_RES_CHANGED, draw_dsc->opa, draw_dsc->blend_mode);
 800bdd8:	e9cd 1501 	strd	r1, r5, [sp, #4]
 800bddc:	a923      	add	r1, sp, #140	; 0x8c
 800bdde:	f7fe fdff 	bl	800a9e0 <_lv_blend_map>
            _lv_mem_buf_release(mask_buf);
 800bde2:	4648      	mov	r0, r9
 800bde4:	f009 f878 	bl	8014ed8 <_lv_mem_buf_release>
            _lv_mem_buf_release(map2);
 800bde8:	4640      	mov	r0, r8
 800bdea:	f009 f875 	bl	8014ed8 <_lv_mem_buf_release>
        if(other_mask_cnt == 0 && !transform && !chroma_key && draw_dsc->recolor_opa == LV_OPA_TRANSP && alpha_byte) {
 800bdee:	e5fa      	b.n	800b9e6 <lv_draw_map+0x382>
            uint32_t mask_buf_size = lv_area_get_size(&draw_area) > hor_res ? hor_res : lv_area_get_size(&draw_area);
 800bdf0:	4620      	mov	r0, r4
            _lv_memset_00(&trans_dsc, sizeof(lv_img_transform_dsc_t));
 800bdf2:	ac25      	add	r4, sp, #148	; 0x94
            uint32_t mask_buf_size = lv_area_get_size(&draw_area) > hor_res ? hor_res : lv_area_get_size(&draw_area);
 800bdf4:	f008 f896 	bl	8013f24 <lv_area_get_size>
 800bdf8:	4605      	mov	r5, r0
 800bdfa:	9019      	str	r0, [sp, #100]	; 0x64
            lv_color_t * map2 = _lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
 800bdfc:	0080      	lsls	r0, r0, #2
 800bdfe:	f009 fb93 	bl	8015528 <_lv_mem_buf_get>
 800be02:	4603      	mov	r3, r0
            lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
 800be04:	4628      	mov	r0, r5
            _lv_memset_00(&trans_dsc, sizeof(lv_img_transform_dsc_t));
 800be06:	ee08 4a90 	vmov	s17, r4
            lv_color_t * map2 = _lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
 800be0a:	9318      	str	r3, [sp, #96]	; 0x60
            lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
 800be0c:	f009 fb8c 	bl	8015528 <_lv_mem_buf_get>
 800be10:	4603      	mov	r3, r0
            _lv_memset_00(&trans_dsc, sizeof(lv_img_transform_dsc_t));
 800be12:	2154      	movs	r1, #84	; 0x54
 800be14:	4620      	mov	r0, r4
            lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
 800be16:	9313      	str	r3, [sp, #76]	; 0x4c
            _lv_memset_00(&trans_dsc, sizeof(lv_img_transform_dsc_t));
 800be18:	f009 fcae 	bl	8015778 <_lv_memset_00>
            if(transform) {
 800be1c:	e4c7      	b.n	800b7ae <lv_draw_map+0x14a>
            uint32_t mask_buf_size = lv_area_get_size(&draw_area) > (uint32_t) hor_res ? hor_res : lv_area_get_size(&draw_area);
 800be1e:	4620      	mov	r0, r4
 800be20:	f008 f880 	bl	8013f24 <lv_area_get_size>
 800be24:	4682      	mov	sl, r0
 800be26:	e781      	b.n	800bd2c <lv_draw_map+0x6c8>
 800be28:	f9bd 3092 	ldrsh.w	r3, [sp, #146]	; 0x92
 800be2c:	e7c4      	b.n	800bdb8 <lv_draw_map+0x754>
                        map2[px_i].full =  *((uint32_t *)map_px);
 800be2e:	f852 0b04 	ldr.w	r0, [r2], #4
 800be32:	3104      	adds	r1, #4
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
 800be34:	42a2      	cmp	r2, r4
                        map2[px_i].full =  *((uint32_t *)map_px);
 800be36:	f841 0c04 	str.w	r0, [r1, #-4]
                    map2[px_i].ch.alpha = 0xFF;
 800be3a:	f801 5c01 	strb.w	r5, [r1, #-1]
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
 800be3e:	d197      	bne.n	800bd70 <lv_draw_map+0x70c>
 800be40:	e7a0      	b.n	800bd84 <lv_draw_map+0x720>
                    _lv_blend_map(clip_area, &blend_area, map2, mask_buf, LV_DRAW_MASK_RES_CHANGED, draw_dsc->opa, draw_dsc->blend_mode);
 800be42:	9905      	ldr	r1, [sp, #20]
 800be44:	2002      	movs	r0, #2
 800be46:	9306      	str	r3, [sp, #24]
 800be48:	7c0a      	ldrb	r2, [r1, #16]
 800be4a:	7809      	ldrb	r1, [r1, #0]
 800be4c:	9202      	str	r2, [sp, #8]
 800be4e:	464a      	mov	r2, r9
 800be50:	9101      	str	r1, [sp, #4]
 800be52:	a923      	add	r1, sp, #140	; 0x8c
 800be54:	9000      	str	r0, [sp, #0]
 800be56:	ee18 0a10 	vmov	r0, s16
 800be5a:	f7fe fdc1 	bl	800a9e0 <_lv_blend_map>
                    blend_area.y1 = blend_area.y2 + 1;
 800be5e:	f8bd 2092 	ldrh.w	r2, [sp, #146]	; 0x92
                    px_i = 0;
 800be62:	f04f 0c00 	mov.w	ip, #0
                    blend_area.y2 = blend_area.y1;
 800be66:	9b06      	ldr	r3, [sp, #24]
                    blend_area.y1 = blend_area.y2 + 1;
 800be68:	3201      	adds	r2, #1
 800be6a:	b212      	sxth	r2, r2
 800be6c:	f8ad 208e 	strh.w	r2, [sp, #142]	; 0x8e
                    blend_area.y2 = blend_area.y1;
 800be70:	f8ad 2092 	strh.w	r2, [sp, #146]	; 0x92
 800be74:	e798      	b.n	800bda8 <lv_draw_map+0x744>
            uint32_t mask_buf_size = lv_area_get_size(&draw_area) > hor_res ? hor_res : lv_area_get_size(&draw_area);
 800be76:	4620      	mov	r0, r4
            _lv_memset_00(&trans_dsc, sizeof(lv_img_transform_dsc_t));
 800be78:	ac25      	add	r4, sp, #148	; 0x94
            uint32_t mask_buf_size = lv_area_get_size(&draw_area) > hor_res ? hor_res : lv_area_get_size(&draw_area);
 800be7a:	f008 f853 	bl	8013f24 <lv_area_get_size>
            _lv_memset_00(&trans_dsc, sizeof(lv_img_transform_dsc_t));
 800be7e:	2300      	movs	r3, #0
            uint32_t mask_buf_size = lv_area_get_size(&draw_area) > hor_res ? hor_res : lv_area_get_size(&draw_area);
 800be80:	4605      	mov	r5, r0
 800be82:	9019      	str	r0, [sp, #100]	; 0x64
            lv_color_t * map2 = _lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
 800be84:	0080      	lsls	r0, r0, #2
            _lv_memset_00(&trans_dsc, sizeof(lv_img_transform_dsc_t));
 800be86:	461f      	mov	r7, r3
            lv_color_t * map2 = _lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
 800be88:	f009 fb4e 	bl	8015528 <_lv_mem_buf_get>
 800be8c:	4603      	mov	r3, r0
            lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
 800be8e:	4628      	mov	r0, r5
            _lv_memset_00(&trans_dsc, sizeof(lv_img_transform_dsc_t));
 800be90:	ee08 4a90 	vmov	s17, r4
            lv_color_t * map2 = _lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
 800be94:	9318      	str	r3, [sp, #96]	; 0x60
            lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
 800be96:	f009 fb47 	bl	8015528 <_lv_mem_buf_get>
 800be9a:	4603      	mov	r3, r0
            _lv_memset_00(&trans_dsc, sizeof(lv_img_transform_dsc_t));
 800be9c:	2154      	movs	r1, #84	; 0x54
 800be9e:	4620      	mov	r0, r4
            lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
 800bea0:	9313      	str	r3, [sp, #76]	; 0x4c
            _lv_memset_00(&trans_dsc, sizeof(lv_img_transform_dsc_t));
 800bea2:	f009 fc69 	bl	8015778 <_lv_memset_00>
            if(transform) {
 800bea6:	e4b0      	b.n	800b80a <lv_draw_map+0x1a6>

0800bea8 <lv_draw_img_dsc_init>:
{
 800bea8:	b510      	push	{r4, lr}
 800beaa:	4604      	mov	r4, r0
    _lv_memset_00(dsc, sizeof(lv_draw_img_dsc_t));
 800beac:	2114      	movs	r1, #20
 800beae:	f009 fc63 	bl	8015778 <_lv_memset_00>
    dsc->recolor = LV_COLOR_BLACK;
 800beb2:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
    dsc->antialias = LV_ANTIALIAS;
 800beb6:	7c63      	ldrb	r3, [r4, #17]
    dsc->opa = LV_OPA_COVER;
 800beb8:	21ff      	movs	r1, #255	; 0xff
    dsc->zoom = LV_IMG_ZOOM_NONE;
 800beba:	f44f 7280 	mov.w	r2, #256	; 0x100
    dsc->recolor = LV_COLOR_BLACK;
 800bebe:	60e0      	str	r0, [r4, #12]
    dsc->antialias = LV_ANTIALIAS;
 800bec0:	f043 0301 	orr.w	r3, r3, #1
    dsc->opa = LV_OPA_COVER;
 800bec4:	7021      	strb	r1, [r4, #0]
    dsc->zoom = LV_IMG_ZOOM_NONE;
 800bec6:	8122      	strh	r2, [r4, #8]
    dsc->antialias = LV_ANTIALIAS;
 800bec8:	7463      	strb	r3, [r4, #17]
}
 800beca:	bd10      	pop	{r4, pc}

0800becc <lv_draw_img>:
{
 800becc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bed0:	4605      	mov	r5, r0
 800bed2:	b0af      	sub	sp, #188	; 0xbc
 800bed4:	460e      	mov	r6, r1
    if(src == NULL) {
 800bed6:	4617      	mov	r7, r2
 800bed8:	2a00      	cmp	r2, #0
 800beda:	d048      	beq.n	800bf6e <lv_draw_img+0xa2>
 800bedc:	461c      	mov	r4, r3
    if(dsc->opa <= LV_OPA_MIN) return;
 800bede:	781b      	ldrb	r3, [r3, #0]
 800bee0:	2b02      	cmp	r3, #2
 800bee2:	d802      	bhi.n	800beea <lv_draw_img+0x1e>
}
 800bee4:	b02f      	add	sp, #188	; 0xbc
 800bee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_img_cache_entry_t * cdsc = _lv_img_cache_open(src, draw_dsc->recolor);
 800beea:	4610      	mov	r0, r2
 800beec:	68e1      	ldr	r1, [r4, #12]
 800beee:	f005 fea7 	bl	8011c40 <_lv_img_cache_open>
    if(cdsc == NULL) return LV_RES_INV;
 800bef2:	4607      	mov	r7, r0
 800bef4:	2800      	cmp	r0, #0
 800bef6:	f000 809f 	beq.w	800c038 <lv_draw_img+0x16c>
    bool chroma_keyed = lv_img_cf_is_chroma_keyed(cdsc->dec_dsc.header.cf);
 800befa:	7c03      	ldrb	r3, [r0, #16]
 800befc:	f003 021f 	and.w	r2, r3, #31
    switch(cf) {
 800bf00:	2a03      	cmp	r2, #3
 800bf02:	f000 80b7 	beq.w	800c074 <lv_draw_img+0x1a8>
 800bf06:	f102 091a 	add.w	r9, r2, #26
 800bf0a:	f009 091f 	and.w	r9, r9, #31
 800bf0e:	f1b9 0f04 	cmp.w	r9, #4
 800bf12:	bf8c      	ite	hi
 800bf14:	f04f 0900 	movhi.w	r9, #0
 800bf18:	f04f 0901 	movls.w	r9, #1
    switch(cf) {
 800bf1c:	2a0e      	cmp	r2, #14
 800bf1e:	f200 80a6 	bhi.w	800c06e <lv_draw_img+0x1a2>
 800bf22:	2301      	movs	r3, #1
 800bf24:	f647 71a4 	movw	r1, #32676	; 0x7fa4
 800bf28:	4093      	lsls	r3, r2
 800bf2a:	420b      	tst	r3, r1
 800bf2c:	bf14      	ite	ne
 800bf2e:	f04f 0801 	movne.w	r8, #1
 800bf32:	f04f 0800 	moveq.w	r8, #0
    if(cdsc->dec_dsc.error_msg != NULL) {
 800bf36:	f8d7 a01c 	ldr.w	sl, [r7, #28]
 800bf3a:	f1ba 0f00 	cmp.w	sl, #0
 800bf3e:	d02c      	beq.n	800bf9a <lv_draw_img+0xce>

static void show_error(const lv_area_t * coords, const lv_area_t * clip_area, const char * msg)
{
    lv_draw_rect_dsc_t rect_dsc;
    lv_draw_rect_dsc_init(&rect_dsc);
 800bf40:	a814      	add	r0, sp, #80	; 0x50
    rect_dsc.bg_color = LV_COLOR_WHITE;
    lv_draw_rect(coords, clip_area, &rect_dsc);

    lv_draw_label_dsc_t label_dsc;
    lv_draw_label_dsc_init(&label_dsc);
    lv_draw_label(coords, clip_area, &label_dsc, msg, NULL);
 800bf42:	2400      	movs	r4, #0
    lv_draw_rect_dsc_init(&rect_dsc);
 800bf44:	f003 f9f8 	bl	800f338 <lv_draw_rect_dsc_init>
    rect_dsc.bg_color = LV_COLOR_WHITE;
 800bf48:	f04f 33ff 	mov.w	r3, #4294967295
    lv_draw_rect(coords, clip_area, &rect_dsc);
 800bf4c:	aa14      	add	r2, sp, #80	; 0x50
 800bf4e:	4631      	mov	r1, r6
 800bf50:	4628      	mov	r0, r5
    rect_dsc.bg_color = LV_COLOR_WHITE;
 800bf52:	9315      	str	r3, [sp, #84]	; 0x54
    lv_draw_rect(coords, clip_area, &rect_dsc);
 800bf54:	f003 fa14 	bl	800f380 <lv_draw_rect>
    lv_draw_label_dsc_init(&label_dsc);
 800bf58:	a80a      	add	r0, sp, #40	; 0x28
 800bf5a:	f000 f93f 	bl	800c1dc <lv_draw_label_dsc_init>
    lv_draw_label(coords, clip_area, &label_dsc, msg, NULL);
 800bf5e:	aa0a      	add	r2, sp, #40	; 0x28
 800bf60:	4653      	mov	r3, sl
 800bf62:	4631      	mov	r1, r6
 800bf64:	4628      	mov	r0, r5
 800bf66:	9400      	str	r4, [sp, #0]
 800bf68:	f000 f954 	bl	800c214 <lv_draw_label>
    if(res == LV_RES_INV) {
 800bf6c:	e7ba      	b.n	800bee4 <lv_draw_img+0x18>
    lv_draw_rect_dsc_init(&rect_dsc);
 800bf6e:	a814      	add	r0, sp, #80	; 0x50
 800bf70:	f003 f9e2 	bl	800f338 <lv_draw_rect_dsc_init>
    rect_dsc.bg_color = LV_COLOR_WHITE;
 800bf74:	f04f 33ff 	mov.w	r3, #4294967295
    lv_draw_rect(coords, clip_area, &rect_dsc);
 800bf78:	aa14      	add	r2, sp, #80	; 0x50
 800bf7a:	4631      	mov	r1, r6
 800bf7c:	4628      	mov	r0, r5
    rect_dsc.bg_color = LV_COLOR_WHITE;
 800bf7e:	9315      	str	r3, [sp, #84]	; 0x54
    lv_draw_rect(coords, clip_area, &rect_dsc);
 800bf80:	f003 f9fe 	bl	800f380 <lv_draw_rect>
    lv_draw_label_dsc_init(&label_dsc);
 800bf84:	a80a      	add	r0, sp, #40	; 0x28
 800bf86:	f000 f929 	bl	800c1dc <lv_draw_label_dsc_init>
    lv_draw_label(coords, clip_area, &label_dsc, msg, NULL);
 800bf8a:	aa0a      	add	r2, sp, #40	; 0x28
 800bf8c:	4631      	mov	r1, r6
 800bf8e:	4628      	mov	r0, r5
 800bf90:	4b77      	ldr	r3, [pc, #476]	; (800c170 <lv_draw_img+0x2a4>)
 800bf92:	9700      	str	r7, [sp, #0]
 800bf94:	f000 f93e 	bl	800c214 <lv_draw_label>
}
 800bf98:	e7a4      	b.n	800bee4 <lv_draw_img+0x18>
    else if(cdsc->dec_dsc.img_data) {
 800bf9a:	697b      	ldr	r3, [r7, #20]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d06c      	beq.n	800c07a <lv_draw_img+0x1ae>
 800bfa0:	f10d 0a28 	add.w	sl, sp, #40	; 0x28
 800bfa4:	6869      	ldr	r1, [r5, #4]
 800bfa6:	6828      	ldr	r0, [r5, #0]
 800bfa8:	4652      	mov	r2, sl
        if(draw_dsc->angle || draw_dsc->zoom != LV_IMG_ZOOM_NONE) {
 800bfaa:	8863      	ldrh	r3, [r4, #2]
 800bfac:	c203      	stmia	r2!, {r0, r1}
 800bfae:	8921      	ldrh	r1, [r4, #8]
 800bfb0:	b913      	cbnz	r3, 800bfb8 <lv_draw_img+0xec>
 800bfb2:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800bfb6:	d02c      	beq.n	800c012 <lv_draw_img+0x146>
 800bfb8:	f8b5 c004 	ldrh.w	ip, [r5, #4]
            _lv_img_buf_get_transformed_area(&map_area_rot, w, h, draw_dsc->angle, draw_dsc->zoom, &draw_dsc->pivot);
 800bfbc:	1d20      	adds	r0, r4, #4
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800bfbe:	88ea      	ldrh	r2, [r5, #6]
 800bfc0:	b21b      	sxth	r3, r3
 800bfc2:	9100      	str	r1, [sp, #0]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800bfc4:	f10c 0101 	add.w	r1, ip, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800bfc8:	f8b5 e002 	ldrh.w	lr, [r5, #2]
 800bfcc:	3201      	adds	r2, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800bfce:	f8b5 c000 	ldrh.w	ip, [r5]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800bfd2:	eba2 020e 	sub.w	r2, r2, lr
 800bfd6:	9001      	str	r0, [sp, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800bfd8:	eba1 010c 	sub.w	r1, r1, ip
 800bfdc:	4650      	mov	r0, sl
 800bfde:	b212      	sxth	r2, r2
 800bfe0:	b209      	sxth	r1, r1
 800bfe2:	f005 fb57 	bl	8011694 <_lv_img_buf_get_transformed_area>
            map_area_rot.x2 += coords->x1;
 800bfe6:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
            map_area_rot.x1 += coords->x1;
 800bfea:	882a      	ldrh	r2, [r5, #0]
 800bfec:	f8bd 0028 	ldrh.w	r0, [sp, #40]	; 0x28
            map_area_rot.y1 += coords->y1;
 800bff0:	886b      	ldrh	r3, [r5, #2]
            map_area_rot.x1 += coords->x1;
 800bff2:	4410      	add	r0, r2
            map_area_rot.y1 += coords->y1;
 800bff4:	f8bd 102a 	ldrh.w	r1, [sp, #42]	; 0x2a
            map_area_rot.x2 += coords->x1;
 800bff8:	4462      	add	r2, ip
            map_area_rot.y2 += coords->y1;
 800bffa:	f8bd c02e 	ldrh.w	ip, [sp, #46]	; 0x2e
            map_area_rot.y1 += coords->y1;
 800bffe:	4419      	add	r1, r3
            map_area_rot.x1 += coords->x1;
 800c000:	f8ad 0028 	strh.w	r0, [sp, #40]	; 0x28
            map_area_rot.y2 += coords->y1;
 800c004:	4463      	add	r3, ip
            map_area_rot.x2 += coords->x1;
 800c006:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
            map_area_rot.y1 += coords->y1;
 800c00a:	f8ad 102a 	strh.w	r1, [sp, #42]	; 0x2a
            map_area_rot.y2 += coords->y1;
 800c00e:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
        union_ok = _lv_area_intersect(&mask_com, clip_area, &map_area_rot);
 800c012:	4652      	mov	r2, sl
 800c014:	4631      	mov	r1, r6
 800c016:	a814      	add	r0, sp, #80	; 0x50
 800c018:	f007 ff92 	bl	8013f40 <_lv_area_intersect>
        if(union_ok == false) {
 800c01c:	2800      	cmp	r0, #0
 800c01e:	f43f af61 	beq.w	800bee4 <lv_draw_img+0x18>
        lv_draw_map(coords, &mask_com, cdsc->dec_dsc.img_data, draw_dsc, chroma_keyed, alpha_byte);
 800c022:	697a      	ldr	r2, [r7, #20]
 800c024:	4623      	mov	r3, r4
 800c026:	a914      	add	r1, sp, #80	; 0x50
 800c028:	4628      	mov	r0, r5
 800c02a:	f8cd 8004 	str.w	r8, [sp, #4]
 800c02e:	f8cd 9000 	str.w	r9, [sp]
 800c032:	f7ff fb17 	bl	800b664 <lv_draw_map>
    if(res == LV_RES_INV) {
 800c036:	e755      	b.n	800bee4 <lv_draw_img+0x18>
 800c038:	f10d 0b50 	add.w	fp, sp, #80	; 0x50
 800c03c:	f10d 0a28 	add.w	sl, sp, #40	; 0x28
    lv_draw_rect_dsc_init(&rect_dsc);
 800c040:	4658      	mov	r0, fp
 800c042:	f003 f979 	bl	800f338 <lv_draw_rect_dsc_init>
    rect_dsc.bg_color = LV_COLOR_WHITE;
 800c046:	f04f 33ff 	mov.w	r3, #4294967295
    lv_draw_rect(coords, clip_area, &rect_dsc);
 800c04a:	465a      	mov	r2, fp
 800c04c:	4631      	mov	r1, r6
 800c04e:	4628      	mov	r0, r5
    rect_dsc.bg_color = LV_COLOR_WHITE;
 800c050:	9315      	str	r3, [sp, #84]	; 0x54
    lv_draw_rect(coords, clip_area, &rect_dsc);
 800c052:	f003 f995 	bl	800f380 <lv_draw_rect>
    lv_draw_label_dsc_init(&label_dsc);
 800c056:	4650      	mov	r0, sl
 800c058:	f000 f8c0 	bl	800c1dc <lv_draw_label_dsc_init>
    lv_draw_label(coords, clip_area, &label_dsc, msg, NULL);
 800c05c:	2300      	movs	r3, #0
 800c05e:	4652      	mov	r2, sl
 800c060:	4631      	mov	r1, r6
 800c062:	9300      	str	r3, [sp, #0]
 800c064:	4628      	mov	r0, r5
 800c066:	4b42      	ldr	r3, [pc, #264]	; (800c170 <lv_draw_img+0x2a4>)
 800c068:	f000 f8d4 	bl	800c214 <lv_draw_label>
}
 800c06c:	e73a      	b.n	800bee4 <lv_draw_img+0x18>
    switch(cf) {
 800c06e:	f04f 0800 	mov.w	r8, #0
 800c072:	e760      	b.n	800bf36 <lv_draw_img+0x6a>
 800c074:	f04f 0901 	mov.w	r9, #1
 800c078:	e753      	b.n	800bf22 <lv_draw_img+0x56>
        union_ok = _lv_area_intersect(&mask_com, clip_area, coords);
 800c07a:	f10d 0b20 	add.w	fp, sp, #32
 800c07e:	462a      	mov	r2, r5
 800c080:	4631      	mov	r1, r6
 800c082:	4658      	mov	r0, fp
 800c084:	f007 ff5c 	bl	8013f40 <_lv_area_intersect>
        if(union_ok == false) {
 800c088:	2800      	cmp	r0, #0
 800c08a:	f43f af2b 	beq.w	800bee4 <lv_draw_img+0x18>
 800c08e:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 800c092:	f10d 0a28 	add.w	sl, sp, #40	; 0x28
 800c096:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 800c09a:	3301      	adds	r3, #1
 800c09c:	1a9b      	subs	r3, r3, r2
 800c09e:	b21b      	sxth	r3, r3
        uint8_t  * buf = _lv_mem_buf_get(lv_area_get_width(&mask_com) *
 800c0a0:	0098      	lsls	r0, r3, #2
 800c0a2:	9302      	str	r3, [sp, #8]
 800c0a4:	f009 fa40 	bl	8015528 <_lv_mem_buf_get>
 800c0a8:	4603      	mov	r3, r0
 800c0aa:	e89b 0003 	ldmia.w	fp, {r0, r1}
 800c0ae:	9303      	str	r3, [sp, #12]
    while(len) {
 800c0b0:	e88a 0003 	stmia.w	sl, {r0, r1}
        lv_area_set_height(&line, 1);
 800c0b4:	4650      	mov	r0, sl
 800c0b6:	2101      	movs	r1, #1
 800c0b8:	f007 ff2e 	bl	8013f18 <lv_area_set_height>
        int32_t y = mask_com.y1 - coords->y1;
 800c0bc:	f9bd 0022 	ldrsh.w	r0, [sp, #34]	; 0x22
 800c0c0:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
 800c0c4:	f9bd 2026 	ldrsh.w	r2, [sp, #38]	; 0x26
        int32_t y = mask_com.y1 - coords->y1;
 800c0c8:	1ac1      	subs	r1, r0, r3
        int32_t x = mask_com.x1 - coords->x1;
 800c0ca:	f9bd c020 	ldrsh.w	ip, [sp, #32]
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
 800c0ce:	4290      	cmp	r0, r2
        int32_t y = mask_com.y1 - coords->y1;
 800c0d0:	9104      	str	r1, [sp, #16]
        int32_t x = mask_com.x1 - coords->x1;
 800c0d2:	f9b5 1000 	ldrsh.w	r1, [r5]
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
 800c0d6:	dc3e      	bgt.n	800c156 <lv_draw_img+0x28a>
            read_res = lv_img_decoder_read_line(&cdsc->dec_dsc, x, y, width, buf);
 800c0d8:	ebac 0301 	sub.w	r3, ip, r1
 800c0dc:	f10d 0b50 	add.w	fp, sp, #80	; 0x50
 800c0e0:	f8cd 8014 	str.w	r8, [sp, #20]
 800c0e4:	b21a      	sxth	r2, r3
 800c0e6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800c0ea:	9602      	str	r6, [sp, #8]
 800c0ec:	e9cd 9506 	strd	r9, r5, [sp, #24]
 800c0f0:	9d04      	ldr	r5, [sp, #16]
 800c0f2:	4691      	mov	r9, r2
 800c0f4:	9404      	str	r4, [sp, #16]
 800c0f6:	4604      	mov	r4, r0
            union_ok = _lv_area_intersect(&mask_line, clip_area, &line);
 800c0f8:	4652      	mov	r2, sl
 800c0fa:	9902      	ldr	r1, [sp, #8]
 800c0fc:	4658      	mov	r0, fp
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
 800c0fe:	3401      	adds	r4, #1
            union_ok = _lv_area_intersect(&mask_line, clip_area, &line);
 800c100:	f007 ff1e 	bl	8013f40 <_lv_area_intersect>
 800c104:	4684      	mov	ip, r0
            read_res = lv_img_decoder_read_line(&cdsc->dec_dsc, x, y, width, buf);
 800c106:	b22a      	sxth	r2, r5
 800c108:	4643      	mov	r3, r8
 800c10a:	4649      	mov	r1, r9
 800c10c:	4638      	mov	r0, r7
            if(union_ok == false) continue;
 800c10e:	f1bc 0f00 	cmp.w	ip, #0
 800c112:	d01c      	beq.n	800c14e <lv_draw_img+0x282>
            read_res = lv_img_decoder_read_line(&cdsc->dec_dsc, x, y, width, buf);
 800c114:	9e03      	ldr	r6, [sp, #12]
            y++;
 800c116:	3501      	adds	r5, #1
            read_res = lv_img_decoder_read_line(&cdsc->dec_dsc, x, y, width, buf);
 800c118:	9600      	str	r6, [sp, #0]
 800c11a:	f006 fb13 	bl	8012744 <lv_img_decoder_read_line>
 800c11e:	4684      	mov	ip, r0
            lv_draw_map(&line, &mask_line, buf, draw_dsc, chroma_keyed, alpha_byte);
 800c120:	9b04      	ldr	r3, [sp, #16]
 800c122:	4632      	mov	r2, r6
            if(read_res != LV_RES_OK) {
 800c124:	f1bc 0f01 	cmp.w	ip, #1
            lv_draw_map(&line, &mask_line, buf, draw_dsc, chroma_keyed, alpha_byte);
 800c128:	4659      	mov	r1, fp
 800c12a:	4650      	mov	r0, sl
            if(read_res != LV_RES_OK) {
 800c12c:	d117      	bne.n	800c15e <lv_draw_img+0x292>
            lv_draw_map(&line, &mask_line, buf, draw_dsc, chroma_keyed, alpha_byte);
 800c12e:	9e05      	ldr	r6, [sp, #20]
 800c130:	9601      	str	r6, [sp, #4]
 800c132:	9e06      	ldr	r6, [sp, #24]
 800c134:	9600      	str	r6, [sp, #0]
 800c136:	f7ff fa95 	bl	800b664 <lv_draw_map>
            line.y1++;
 800c13a:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
            line.y2++;
 800c13e:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
            line.y1++;
 800c142:	3201      	adds	r2, #1
            line.y2++;
 800c144:	3301      	adds	r3, #1
            line.y1++;
 800c146:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
            line.y2++;
 800c14a:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
 800c14e:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
 800c152:	429c      	cmp	r4, r3
 800c154:	ddd0      	ble.n	800c0f8 <lv_draw_img+0x22c>
        _lv_mem_buf_release(buf);
 800c156:	9803      	ldr	r0, [sp, #12]
 800c158:	f008 febe 	bl	8014ed8 <_lv_mem_buf_release>
    if(res == LV_RES_INV) {
 800c15c:	e6c2      	b.n	800bee4 <lv_draw_img+0x18>
                lv_img_decoder_close(&cdsc->dec_dsc);
 800c15e:	4638      	mov	r0, r7
 800c160:	9d07      	ldr	r5, [sp, #28]
 800c162:	9e02      	ldr	r6, [sp, #8]
 800c164:	f006 fb02 	bl	801276c <lv_img_decoder_close>
                _lv_mem_buf_release(buf);
 800c168:	9803      	ldr	r0, [sp, #12]
 800c16a:	f008 feb5 	bl	8014ed8 <_lv_mem_buf_release>
    if(res == LV_RES_INV) {
 800c16e:	e767      	b.n	800c040 <lv_draw_img+0x174>
 800c170:	0801e1ec 	.word	0x0801e1ec

0800c174 <lv_img_cf_get_px_size>:
    switch(cf) {
 800c174:	3804      	subs	r0, #4
 800c176:	b2c0      	uxtb	r0, r0
 800c178:	280a      	cmp	r0, #10
 800c17a:	d802      	bhi.n	800c182 <lv_img_cf_get_px_size+0xe>
 800c17c:	4b02      	ldr	r3, [pc, #8]	; (800c188 <lv_img_cf_get_px_size+0x14>)
 800c17e:	5c18      	ldrb	r0, [r3, r0]
 800c180:	4770      	bx	lr
{
 800c182:	2000      	movs	r0, #0
}
 800c184:	4770      	bx	lr
 800c186:	bf00      	nop
 800c188:	0801e1f4 	.word	0x0801e1f4

0800c18c <lv_img_cf_is_chroma_keyed>:
    switch(cf) {
 800c18c:	2803      	cmp	r0, #3
 800c18e:	d005      	beq.n	800c19c <lv_img_cf_is_chroma_keyed+0x10>
 800c190:	3806      	subs	r0, #6
 800c192:	2804      	cmp	r0, #4
 800c194:	bf8c      	ite	hi
 800c196:	2000      	movhi	r0, #0
 800c198:	2001      	movls	r0, #1
 800c19a:	4770      	bx	lr
            is_chroma_keyed = true;
 800c19c:	2001      	movs	r0, #1
}
 800c19e:	4770      	bx	lr

0800c1a0 <lv_img_cf_has_alpha>:
    switch(cf) {
 800c1a0:	280e      	cmp	r0, #14
 800c1a2:	d809      	bhi.n	800c1b8 <lv_img_cf_has_alpha+0x18>
 800c1a4:	2301      	movs	r3, #1
 800c1a6:	f647 72a4 	movw	r2, #32676	; 0x7fa4
 800c1aa:	fa03 f000 	lsl.w	r0, r3, r0
 800c1ae:	4210      	tst	r0, r2
 800c1b0:	bf14      	ite	ne
 800c1b2:	4618      	movne	r0, r3
 800c1b4:	2000      	moveq	r0, #0
 800c1b6:	4770      	bx	lr
{
 800c1b8:	2000      	movs	r0, #0
}
 800c1ba:	4770      	bx	lr

0800c1bc <lv_img_src_get_type>:
    if(src == NULL) return img_src_type;
 800c1bc:	b160      	cbz	r0, 800c1d8 <lv_img_src_get_type+0x1c>
    if(u8_p[0] >= 0x20 && u8_p[0] <= 0x7F) {
 800c1be:	7803      	ldrb	r3, [r0, #0]
 800c1c0:	f1a3 0220 	sub.w	r2, r3, #32
 800c1c4:	2a5f      	cmp	r2, #95	; 0x5f
 800c1c6:	d801      	bhi.n	800c1cc <lv_img_src_get_type+0x10>
        img_src_type = LV_IMG_SRC_FILE; /*If it's an ASCII character then it's file name*/
 800c1c8:	2001      	movs	r0, #1
}
 800c1ca:	4770      	bx	lr
    else if(u8_p[0] >= 0x80) {
 800c1cc:	f013 0f80 	tst.w	r3, #128	; 0x80
        img_src_type = LV_IMG_SRC_VARIABLE; /*`lv_img_dsc_t` is design to the first byte < 0x20*/
 800c1d0:	bf14      	ite	ne
 800c1d2:	2002      	movne	r0, #2
 800c1d4:	2000      	moveq	r0, #0
 800c1d6:	4770      	bx	lr
    if(src == NULL) return img_src_type;
 800c1d8:	2003      	movs	r0, #3
 800c1da:	4770      	bx	lr

0800c1dc <lv_draw_label_dsc_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

LV_ATTRIBUTE_FAST_MEM void lv_draw_label_dsc_init(lv_draw_label_dsc_t * dsc)
{
 800c1dc:	b538      	push	{r3, r4, r5, lr}
    _lv_memset_00(dsc, sizeof(lv_draw_label_dsc_t));
 800c1de:	2128      	movs	r1, #40	; 0x28
{
 800c1e0:	4604      	mov	r4, r0
    _lv_memset_00(dsc, sizeof(lv_draw_label_dsc_t));
 800c1e2:	f009 fac9 	bl	8015778 <_lv_memset_00>
    dsc->opa = LV_OPA_COVER;
 800c1e6:	23ff      	movs	r3, #255	; 0xff
    dsc->color = LV_COLOR_BLACK;
    dsc->font = LV_THEME_DEFAULT_FONT_NORMAL;
 800c1e8:	4d08      	ldr	r5, [pc, #32]	; (800c20c <lv_draw_label_dsc_init+0x30>)
    dsc->sel_start = LV_DRAW_LABEL_NO_TXT_SEL;
    dsc->sel_end = LV_DRAW_LABEL_NO_TXT_SEL;
    dsc->sel_color = LV_COLOR_BLACK;
    dsc->sel_bg_color = LV_COLOR_BLUE;
    dsc->bidi_dir = LV_BIDI_DIR_LTR;
 800c1ea:	2100      	movs	r1, #0
    dsc->color = LV_COLOR_BLACK;
 800c1ec:	4808      	ldr	r0, [pc, #32]	; (800c210 <lv_draw_label_dsc_init+0x34>)
    dsc->sel_start = LV_DRAW_LABEL_NO_TXT_SEL;
 800c1ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
    dsc->opa = LV_OPA_COVER;
 800c1f2:	7423      	strb	r3, [r4, #16]
    dsc->color = LV_COLOR_BLACK;
 800c1f4:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
    dsc->bidi_dir = LV_BIDI_DIR_LTR;
 800c1f8:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
    dsc->color = LV_COLOR_BLACK;
 800c1fc:	e9c4 0502 	strd	r0, r5, [r4, #8]
    dsc->sel_start = LV_DRAW_LABEL_NO_TXT_SEL;
 800c200:	e9c4 2206 	strd	r2, r2, [r4, #24]
    dsc->color = LV_COLOR_BLACK;
 800c204:	e9c4 3300 	strd	r3, r3, [r4]
}
 800c208:	bd38      	pop	{r3, r4, r5, pc}
 800c20a:	bf00      	nop
 800c20c:	20000020 	.word	0x20000020
 800c210:	ff0000ff 	.word	0xff0000ff

0800c214 <lv_draw_label>:
 */
LV_ATTRIBUTE_FAST_MEM void lv_draw_label(const lv_area_t * coords, const lv_area_t * mask,
                                         const lv_draw_label_dsc_t * dsc,
                                         const char * txt,
                                         lv_draw_label_hint_t * hint)
{
 800c214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c218:	ed2d 8b04 	vpush	{d8-d9}
 800c21c:	b0dd      	sub	sp, #372	; 0x174
 800c21e:	461c      	mov	r4, r3
 800c220:	9309      	str	r3, [sp, #36]	; 0x24

    if(dsc->opa <= LV_OPA_MIN) return;
 800c222:	7c13      	ldrb	r3, [r2, #16]
{
 800c224:	9d6a      	ldr	r5, [sp, #424]	; 0x1a8
    if(dsc->opa <= LV_OPA_MIN) return;
 800c226:	2b02      	cmp	r3, #2
{
 800c228:	901a      	str	r0, [sp, #104]	; 0x68
 800c22a:	910e      	str	r1, [sp, #56]	; 0x38
    if(dsc->opa <= LV_OPA_MIN) return;
 800c22c:	d901      	bls.n	800c232 <lv_draw_label+0x1e>
    const lv_font_t * font = dsc->font;
    int32_t w;

    /*No need to waste processor time if string is empty*/
    if(txt[0] == '\0')  return;
 800c22e:	7823      	ldrb	r3, [r4, #0]
 800c230:	b923      	cbnz	r3, 800c23c <lv_draw_label+0x28>

        if(pos.y > mask->y2) return;
    }

    LV_ASSERT_MEM_INTEGRITY();
}
 800c232:	b05d      	add	sp, #372	; 0x174
 800c234:	ecbd 8b04 	vpop	{d8-d9}
 800c238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c23c:	4617      	mov	r7, r2
    bool clip_ok = _lv_area_intersect(&clipped_area, coords, mask);
 800c23e:	4604      	mov	r4, r0
 800c240:	460a      	mov	r2, r1
 800c242:	4601      	mov	r1, r0
 800c244:	a838      	add	r0, sp, #224	; 0xe0
    const lv_font_t * font = dsc->font;
 800c246:	f8d7 a00c 	ldr.w	sl, [r7, #12]
    bool clip_ok = _lv_area_intersect(&clipped_area, coords, mask);
 800c24a:	f007 fe79 	bl	8013f40 <_lv_area_intersect>
    if(!clip_ok) return;
 800c24e:	2800      	cmp	r0, #0
 800c250:	d0ef      	beq.n	800c232 <lv_draw_label+0x1e>
    if((dsc->flag & LV_TXT_FLAG_EXPAND) == 0) {
 800c252:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800c256:	0790      	lsls	r0, r2, #30
 800c258:	f100 817f 	bmi.w	800c55a <lv_draw_label+0x346>
 800c25c:	88a3      	ldrh	r3, [r4, #4]
        w = lv_area_get_width(coords);
 800c25e:	f9b4 1000 	ldrsh.w	r1, [r4]
 800c262:	3301      	adds	r3, #1
 800c264:	9128      	str	r1, [sp, #160]	; 0xa0
 800c266:	1a5b      	subs	r3, r3, r1
 800c268:	b21b      	sxth	r3, r3
 800c26a:	ee08 3a90 	vmov	s17, r3
    pos.y = coords->y1;
 800c26e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    if(hint && y_ofs == 0 && coords->y1 < 0) {
 800c270:	f1b5 0800 	subs.w	r8, r5, #0
    y_ofs = dsc->ofs_y;
 800c274:	f9b7 0022 	ldrsh.w	r0, [r7, #34]	; 0x22
    pos.y = coords->y1;
 800c278:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    if(hint && y_ofs == 0 && coords->y1 < 0) {
 800c27c:	bf18      	it	ne
 800c27e:	f04f 0801 	movne.w	r8, #1
    x_ofs = dsc->ofs_x;
 800c282:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
    pos.y += y_ofs;
 800c286:	1819      	adds	r1, r3, r0
    int32_t line_height_font = lv_font_get_line_height(font);
 800c288:	f9ba 9008 	ldrsh.w	r9, [sl, #8]
    x_ofs = dsc->ofs_x;
 800c28c:	9424      	str	r4, [sp, #144]	; 0x90
    pos.y += y_ofs;
 800c28e:	b28c      	uxth	r4, r1
    int32_t line_height = line_height_font + dsc->line_space;
 800c290:	f9b7 6012 	ldrsh.w	r6, [r7, #18]
    pos.y += y_ofs;
 800c294:	b209      	sxth	r1, r1
    int32_t line_height = line_height_font + dsc->line_space;
 800c296:	444e      	add	r6, r9
    pos.y += y_ofs;
 800c298:	9114      	str	r1, [sp, #80]	; 0x50
    if(hint && y_ofs == 0 && coords->y1 < 0) {
 800c29a:	ea18 71d3 	ands.w	r1, r8, r3, lsr #31
 800c29e:	d002      	beq.n	800c2a6 <lv_draw_label+0x92>
 800c2a0:	2800      	cmp	r0, #0
 800c2a2:	f000 85c1 	beq.w	800ce28 <lv_draw_label+0xc14>
    uint32_t line_start     = 0;
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c2aa:	930b      	str	r3, [sp, #44]	; 0x2c
    uint32_t line_end = line_start + _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
 800c2ac:	9200      	str	r2, [sp, #0]
 800c2ae:	ee18 3a90 	vmov	r3, s17
 800c2b2:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800c2b6:	4651      	mov	r1, sl
 800c2b8:	f009 fdf4 	bl	8015ea4 <_lv_txt_get_next_line>
 800c2bc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c2be:	46ab      	mov	fp, r5
 800c2c0:	f8cd 9014 	str.w	r9, [sp, #20]
 800c2c4:	1882      	adds	r2, r0, r2
    while(pos.y + line_height_font < mask->y1) {
 800c2c6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 800c2c8:	ee18 9a90 	vmov	r9, s17
 800c2cc:	4615      	mov	r5, r2
 800c2ce:	e9cd 6806 	strd	r6, r8, [sp, #24]
 800c2d2:	e021      	b.n	800c318 <lv_draw_label+0x104>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
 800c2d4:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800c2d8:	950b      	str	r5, [sp, #44]	; 0x2c
 800c2da:	9200      	str	r2, [sp, #0]
 800c2dc:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800c2e0:	f009 fde0 	bl	8015ea4 <_lv_txt_get_next_line>
        if(txt[line_start] == '\0') return;
 800c2e4:	9b06      	ldr	r3, [sp, #24]
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
 800c2e6:	4428      	add	r0, r5
        pos.y += line_height;
 800c2e8:	441c      	add	r4, r3
 800c2ea:	b224      	sxth	r4, r4
        if(hint && pos.y >= -LV_LABEL_HINT_UPDATE_TH && hint->line_start < 0) {
 800c2ec:	f514 6f80 	cmn.w	r4, #1024	; 0x400
 800c2f0:	db0d      	blt.n	800c30e <lv_draw_label+0xfa>
 800c2f2:	9b07      	ldr	r3, [sp, #28]
 800c2f4:	b15b      	cbz	r3, 800c30e <lv_draw_label+0xfa>
 800c2f6:	f8db 3000 	ldr.w	r3, [fp]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	da07      	bge.n	800c30e <lv_draw_label+0xfa>
            hint->y          = pos.y - coords->y1;
 800c2fe:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800c300:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
            hint->line_start = line_start;
 800c304:	f8cb 5000 	str.w	r5, [fp]
            hint->y          = pos.y - coords->y1;
 800c308:	1ae2      	subs	r2, r4, r3
 800c30a:	e9cb 2301 	strd	r2, r3, [fp, #4]
        if(txt[line_start] == '\0') return;
 800c30e:	f898 3000 	ldrb.w	r3, [r8]
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
 800c312:	4605      	mov	r5, r0
        if(txt[line_start] == '\0') return;
 800c314:	2b00      	cmp	r3, #0
 800c316:	d08c      	beq.n	800c232 <lv_draw_label+0x1e>
    while(pos.y + line_height_font < mask->y1) {
 800c318:	9a05      	ldr	r2, [sp, #20]
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
 800c31a:	4651      	mov	r1, sl
    while(pos.y + line_height_font < mask->y1) {
 800c31c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
 800c31e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    while(pos.y + line_height_font < mask->y1) {
 800c320:	18a2      	adds	r2, r4, r2
 800c322:	f9b6 c002 	ldrsh.w	ip, [r6, #2]
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
 800c326:	eb03 0805 	add.w	r8, r3, r5
 800c32a:	464b      	mov	r3, r9
    while(pos.y + line_height_font < mask->y1) {
 800c32c:	4562      	cmp	r2, ip
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
 800c32e:	4640      	mov	r0, r8
    while(pos.y + line_height_font < mask->y1) {
 800c330:	dbd0      	blt.n	800c2d4 <lv_draw_label+0xc0>
    if(dsc->flag & LV_TXT_FLAG_CENTER) {
 800c332:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800c336:	9e06      	ldr	r6, [sp, #24]
 800c338:	0759      	lsls	r1, r3, #29
 800c33a:	e9cd 4514 	strd	r4, r5, [sp, #80]	; 0x50
 800c33e:	f100 85a7 	bmi.w	800ce90 <lv_draw_label+0xc7c>
    else if(dsc->flag & LV_TXT_FLAG_RIGHT) {
 800c342:	071a      	lsls	r2, r3, #28
 800c344:	f100 82c7 	bmi.w	800c8d6 <lv_draw_label+0x6c2>
 800c348:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c34a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c34c:	4413      	add	r3, r2
 800c34e:	461d      	mov	r5, r3
    uint32_t sel_start = dsc->sel_start;
 800c350:	69bb      	ldr	r3, [r7, #24]
    uint32_t sel_end = dsc->sel_end;
 800c352:	69f9      	ldr	r1, [r7, #28]
    lv_opa_t opa = dsc->opa;
 800c354:	7c3a      	ldrb	r2, [r7, #16]
    if(sel_start > sel_end) {
 800c356:	428b      	cmp	r3, r1
    uint32_t sel_start = dsc->sel_start;
 800c358:	9317      	str	r3, [sp, #92]	; 0x5c
    uint32_t sel_end = dsc->sel_end;
 800c35a:	911c      	str	r1, [sp, #112]	; 0x70
    lv_opa_t opa = dsc->opa;
 800c35c:	9210      	str	r2, [sp, #64]	; 0x40
    if(sel_start > sel_end) {
 800c35e:	d901      	bls.n	800c364 <lv_draw_label+0x150>
 800c360:	9117      	str	r1, [sp, #92]	; 0x5c
 800c362:	931c      	str	r3, [sp, #112]	; 0x70
    if((dsc->decor & LV_TEXT_DECOR_UNDERLINE) || (dsc->decor & LV_TEXT_DECOR_STRIKETHROUGH)) {
 800c364:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c368:	079b      	lsls	r3, r3, #30
 800c36a:	f040 85ae 	bne.w	800ceca <lv_draw_label+0xcb6>
    lv_draw_rect_dsc_init(&draw_dsc_sel);
 800c36e:	b2b3      	uxth	r3, r6
 800c370:	a842      	add	r0, sp, #264	; 0x108
    while(txt[line_start] != '\0') {
 800c372:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 800c374:	ee08 aa10 	vmov	s16, sl
 800c378:	931d      	str	r3, [sp, #116]	; 0x74
 800c37a:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 800c37e:	f8df b210 	ldr.w	fp, [pc, #528]	; 800c590 <lv_draw_label+0x37c>
 800c382:	931b      	str	r3, [sp, #108]	; 0x6c
    uint32_t par_start = 0;
 800c384:	2300      	movs	r3, #0
 800c386:	932b      	str	r3, [sp, #172]	; 0xac
    lv_draw_rect_dsc_init(&draw_dsc_sel);
 800c388:	f002 ffd6 	bl	800f338 <lv_draw_rect_dsc_init>
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
 800c38c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c390:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800c392:	981c      	ldr	r0, [sp, #112]	; 0x70
    draw_dsc_sel.bg_color = dsc->sel_bg_color;
 800c394:	68ba      	ldr	r2, [r7, #8]
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
 800c396:	4299      	cmp	r1, r3
 800c398:	bf18      	it	ne
 800c39a:	4298      	cmpne	r0, r3
    draw_dsc_sel.bg_color = dsc->sel_bg_color;
 800c39c:	9243      	str	r2, [sp, #268]	; 0x10c
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
 800c39e:	bf14      	ite	ne
 800c3a0:	2301      	movne	r3, #1
 800c3a2:	2300      	moveq	r3, #0
 800c3a4:	9305      	str	r3, [sp, #20]
 800c3a6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c3a8:	2bfd      	cmp	r3, #253	; 0xfd
 800c3aa:	bf88      	it	hi
 800c3ac:	23ff      	movhi	r3, #255	; 0xff
 800c3ae:	9319      	str	r3, [sp, #100]	; 0x64
    while(txt[line_start] != '\0') {
 800c3b0:	782b      	ldrb	r3, [r5, #0]
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	f43f af3d 	beq.w	800c232 <lv_draw_label+0x1e>
        pos.x += x_ofs;
 800c3b8:	9b24      	ldr	r3, [sp, #144]	; 0x90
        while(i < line_end - line_start) {
 800c3ba:	990b      	ldr	r1, [sp, #44]	; 0x2c
        pos.x += x_ofs;
 800c3bc:	441c      	add	r4, r3
        i         = 0;
 800c3be:	2300      	movs	r3, #0
        pos.x += x_ofs;
 800c3c0:	b222      	sxth	r2, r4
        i         = 0;
 800c3c2:	9337      	str	r3, [sp, #220]	; 0xdc
        pos.x += x_ofs;
 800c3c4:	9208      	str	r2, [sp, #32]
        while(i < line_end - line_start) {
 800c3c6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c3c8:	1a52      	subs	r2, r2, r1
 800c3ca:	920a      	str	r2, [sp, #40]	; 0x28
 800c3cc:	f000 8239 	beq.w	800c842 <lv_draw_label+0x62e>
 800c3d0:	4619      	mov	r1, r3
 800c3d2:	46b9      	mov	r9, r7
 800c3d4:	46aa      	mov	sl, r5
        cmd_state = CMD_STATE_WAIT;
 800c3d6:	9307      	str	r3, [sp, #28]
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
 800c3d8:	9b05      	ldr	r3, [sp, #20]
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	f000 8294 	beq.w	800c908 <lv_draw_label+0x6f4>
                logical_char_pos = _lv_txt_encoded_get_char_id(txt, line_start + i);
 800c3e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c3e2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c3e4:	4419      	add	r1, r3
 800c3e6:	4b69      	ldr	r3, [pc, #420]	; (800c58c <lv_draw_label+0x378>)
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	4798      	blx	r3
 800c3ec:	4605      	mov	r5, r0
            uint32_t letter      = _lv_txt_encoded_next(bidi_txt, &i);
 800c3ee:	f8db 3000 	ldr.w	r3, [fp]
 800c3f2:	a937      	add	r1, sp, #220	; 0xdc
 800c3f4:	4650      	mov	r0, sl
 800c3f6:	4798      	blx	r3
            uint32_t letter_next = _lv_txt_encoded_next(&bidi_txt[i], NULL);
 800c3f8:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 800c3fa:	f8db 3000 	ldr.w	r3, [fp]
 800c3fe:	2100      	movs	r1, #0
            uint32_t letter      = _lv_txt_encoded_next(bidi_txt, &i);
 800c400:	4604      	mov	r4, r0
            uint32_t letter_next = _lv_txt_encoded_next(&bidi_txt[i], NULL);
 800c402:	eb0a 0002 	add.w	r0, sl, r2
 800c406:	4798      	blx	r3
 800c408:	f899 3025 	ldrb.w	r3, [r9, #37]	; 0x25
 800c40c:	4602      	mov	r2, r0
            if((dsc->flag & LV_TXT_FLAG_RECOLOR) != 0) {
 800c40e:	f013 0301 	ands.w	r3, r3, #1
 800c412:	d006      	beq.n	800c422 <lv_draw_label+0x20e>
                if(letter == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 800c414:	2c23      	cmp	r4, #35	; 0x23
 800c416:	f000 8279 	beq.w	800c90c <lv_draw_label+0x6f8>
                if(cmd_state == CMD_STATE_PAR) {
 800c41a:	9b07      	ldr	r3, [sp, #28]
 800c41c:	2b01      	cmp	r3, #1
 800c41e:	f000 82cd 	beq.w	800c9bc <lv_draw_label+0x7a8>
            lv_color_t color = dsc->color;
 800c422:	f8d9 3000 	ldr.w	r3, [r9]
            if(cmd_state == CMD_STATE_IN) color = recolor;
 800c426:	9912      	ldr	r1, [sp, #72]	; 0x48
 800c428:	9807      	ldr	r0, [sp, #28]
 800c42a:	2802      	cmp	r0, #2
 800c42c:	bf08      	it	eq
 800c42e:	460b      	moveq	r3, r1
 800c430:	930d      	str	r3, [sp, #52]	; 0x34
            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 800c432:	4621      	mov	r1, r4
 800c434:	ee18 0a10 	vmov	r0, s16
 800c438:	f006 f9b2 	bl	80127a0 <lv_font_get_glyph_width>
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
 800c43c:	9b05      	ldr	r3, [sp, #20]
            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 800c43e:	4607      	mov	r7, r0
 800c440:	9006      	str	r0, [sp, #24]
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
 800c442:	b1fb      	cbz	r3, 800c484 <lv_draw_label+0x270>
                if(logical_char_pos >= sel_start && logical_char_pos < sel_end) {
 800c444:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c446:	42ab      	cmp	r3, r5
 800c448:	d81c      	bhi.n	800c484 <lv_draw_label+0x270>
 800c44a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800c44c:	42ab      	cmp	r3, r5
 800c44e:	d919      	bls.n	800c484 <lv_draw_label+0x270>
                    sel_coords.x2 = pos.x + letter_w + dsc->letter_space - 1;
 800c450:	f8b9 3014 	ldrh.w	r3, [r9, #20]
                    sel_coords.y2 = pos.y + line_height - 1;
 800c454:	9a1d      	ldr	r2, [sp, #116]	; 0x74
                    sel_coords.x1 = pos.x;
 800c456:	9d08      	ldr	r5, [sp, #32]
                    sel_coords.x2 = pos.x + letter_w + dsc->letter_space - 1;
 800c458:	3b01      	subs	r3, #1
                    sel_coords.y2 = pos.y + line_height - 1;
 800c45a:	9914      	ldr	r1, [sp, #80]	; 0x50
 800c45c:	1e50      	subs	r0, r2, #1
                    sel_coords.x2 = pos.x + letter_w + dsc->letter_space - 1;
 800c45e:	442b      	add	r3, r5
                    lv_draw_rect(&sel_coords, mask, &draw_dsc_sel);
 800c460:	aa42      	add	r2, sp, #264	; 0x108
                    sel_coords.y2 = pos.y + line_height - 1;
 800c462:	4408      	add	r0, r1
                    sel_coords.y1 = pos.y;
 800c464:	f8ad 10fe 	strh.w	r1, [sp, #254]	; 0xfe
                    sel_coords.x2 = pos.x + letter_w + dsc->letter_space - 1;
 800c468:	443b      	add	r3, r7
                    lv_draw_rect(&sel_coords, mask, &draw_dsc_sel);
 800c46a:	990e      	ldr	r1, [sp, #56]	; 0x38
                    sel_coords.y2 = pos.y + line_height - 1;
 800c46c:	f8ad 0102 	strh.w	r0, [sp, #258]	; 0x102
                    lv_draw_rect(&sel_coords, mask, &draw_dsc_sel);
 800c470:	a83f      	add	r0, sp, #252	; 0xfc
                    sel_coords.x2 = pos.x + letter_w + dsc->letter_space - 1;
 800c472:	f8ad 3100 	strh.w	r3, [sp, #256]	; 0x100
                    sel_coords.x1 = pos.x;
 800c476:	f8ad 50fc 	strh.w	r5, [sp, #252]	; 0xfc
                    lv_draw_rect(&sel_coords, mask, &draw_dsc_sel);
 800c47a:	f002 ff81 	bl	800f380 <lv_draw_rect>
                    color = dsc->sel_color;
 800c47e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800c482:	930d      	str	r3, [sp, #52]	; 0x34
            lv_draw_letter(&pos, mask, font, letter, color, opa, dsc->blend_mode);
 800c484:	f899 3027 	ldrb.w	r3, [r9, #39]	; 0x27
 800c488:	930f      	str	r3, [sp, #60]	; 0x3c
LV_ATTRIBUTE_FAST_MEM static void lv_draw_letter(const lv_point_t * pos_p, const lv_area_t * clip_area,
                                                 const lv_font_t * font_p,
                                                 uint32_t letter,
                                                 lv_color_t color, lv_opa_t opa, lv_blend_mode_t blend_mode)
{
    if(opa < LV_OPA_MIN) return;
 800c48a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c48c:	2b01      	cmp	r3, #1
 800c48e:	f240 81c9 	bls.w	800c824 <lv_draw_label+0x610>
        LV_LOG_WARN("lv_draw_letter: font is NULL");
        return;
    }

    lv_font_glyph_dsc_t g;
    bool g_ret = lv_font_get_glyph_dsc(font_p, &g, letter, '\0');
 800c492:	2300      	movs	r3, #0
 800c494:	4622      	mov	r2, r4
 800c496:	a93f      	add	r1, sp, #252	; 0xfc
 800c498:	ee18 0a10 	vmov	r0, s16
 800c49c:	f006 f97a 	bl	8012794 <lv_font_get_glyph_dsc>
    if(g_ret == false)  {
 800c4a0:	2800      	cmp	r0, #0
 800c4a2:	f000 81bf 	beq.w	800c824 <lv_draw_label+0x610>
        }
        return;
    }

    /* Don't draw anything if the character is empty. E.g. space */
    if((g.box_h == 0) || (g.box_w == 0)) return;
 800c4a6:	f8bd 3100 	ldrh.w	r3, [sp, #256]	; 0x100
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	f000 81ba 	beq.w	800c824 <lv_draw_label+0x610>
 800c4b0:	f8bd 20fe 	ldrh.w	r2, [sp, #254]	; 0xfe
 800c4b4:	2a00      	cmp	r2, #0
 800c4b6:	f000 81b5 	beq.w	800c824 <lv_draw_label+0x610>

    int32_t pos_x = pos_p->x + g.ofs_x;
 800c4ba:	f9bd 0102 	ldrsh.w	r0, [sp, #258]	; 0x102
 800c4be:	9d08      	ldr	r5, [sp, #32]
    int32_t pos_y = pos_p->y + (font_p->line_height - font_p->base_line) - g.box_h - g.ofs_y;

    /*If the letter is completely out of mask don't draw it */
    if(pos_x + g.box_w < clip_area->x1 ||
 800c4c0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    int32_t pos_x = pos_p->x + g.ofs_x;
 800c4c2:	1945      	adds	r5, r0, r5
    if(pos_x + g.box_w < clip_area->x1 ||
 800c4c4:	f9b6 1000 	ldrsh.w	r1, [r6]
 800c4c8:	442a      	add	r2, r5
    int32_t pos_x = pos_p->x + g.ofs_x;
 800c4ca:	950c      	str	r5, [sp, #48]	; 0x30
    if(pos_x + g.box_w < clip_area->x1 ||
 800c4cc:	428a      	cmp	r2, r1
 800c4ce:	f2c0 81a9 	blt.w	800c824 <lv_draw_label+0x610>
       pos_x > clip_area->x2 ||
 800c4d2:	f9b6 2004 	ldrsh.w	r2, [r6, #4]
    if(pos_x + g.box_w < clip_area->x1 ||
 800c4d6:	4295      	cmp	r5, r2
 800c4d8:	f300 81a4 	bgt.w	800c824 <lv_draw_label+0x610>
    int32_t pos_y = pos_p->y + (font_p->line_height - font_p->base_line) - g.box_h - g.ofs_y;
 800c4dc:	ee18 7a10 	vmov	r7, s16
 800c4e0:	f9bd 1104 	ldrsh.w	r1, [sp, #260]	; 0x104
       pos_y + g.box_h < clip_area->y1 ||
 800c4e4:	f9b6 c002 	ldrsh.w	ip, [r6, #2]
    int32_t pos_y = pos_p->y + (font_p->line_height - font_p->base_line) - g.box_h - g.ofs_y;
 800c4e8:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800c4ec:	f9b7 0008 	ldrsh.w	r0, [r7, #8]
 800c4f0:	1a80      	subs	r0, r0, r2
 800c4f2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c4f4:	4410      	add	r0, r2
 800c4f6:	1ac0      	subs	r0, r0, r3
 800c4f8:	1a41      	subs	r1, r0, r1
       pos_y + g.box_h < clip_area->y1 ||
 800c4fa:	440b      	add	r3, r1
    int32_t pos_y = pos_p->y + (font_p->line_height - font_p->base_line) - g.box_h - g.ofs_y;
 800c4fc:	9111      	str	r1, [sp, #68]	; 0x44
       pos_x > clip_area->x2 ||
 800c4fe:	4563      	cmp	r3, ip
 800c500:	f2c0 8190 	blt.w	800c824 <lv_draw_label+0x610>
       pos_y > clip_area->y2)  {
 800c504:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
       pos_y + g.box_h < clip_area->y1 ||
 800c508:	460e      	mov	r6, r1
 800c50a:	4299      	cmp	r1, r3
 800c50c:	f300 818a 	bgt.w	800c824 <lv_draw_label+0x610>
        return;
    }

    const uint8_t * map_p = lv_font_get_glyph_bitmap(font_p, letter);
 800c510:	4621      	mov	r1, r4
 800c512:	ee18 0a10 	vmov	r0, s16
 800c516:	f006 f93b 	bl	8012790 <lv_font_get_glyph_bitmap>
    if(map_p == NULL) {
 800c51a:	4686      	mov	lr, r0
 800c51c:	2800      	cmp	r0, #0
 800c51e:	f000 8181 	beq.w	800c824 <lv_draw_label+0x610>
        LV_LOG_WARN("lv_draw_letter: character's bitmap not found");
        return;
    }

    if(font_p->subpx) {
 800c522:	7b3b      	ldrb	r3, [r7, #12]
 800c524:	f013 0f03 	tst.w	r3, #3
{
#if LV_USE_FONT_SUBPX
    const uint8_t * bpp_opa_table;
    uint32_t bitmask_init;
    uint32_t bitmask;
    uint32_t bpp = g->bpp;
 800c528:	f89d 3106 	ldrb.w	r3, [sp, #262]	; 0x106
    if(font_p->subpx) {
 800c52c:	f000 8310 	beq.w	800cb50 <lv_draw_label+0x93c>
        draw_letter_subpx(pos_x, pos_y, &g, clip_area, map_p, color, opa, blend_mode);
 800c530:	b22a      	sxth	r2, r5
    if(bpp == 3) bpp = 4;
 800c532:	2b03      	cmp	r3, #3
        draw_letter_subpx(pos_x, pos_y, &g, clip_area, map_p, color, opa, blend_mode);
 800c534:	9213      	str	r2, [sp, #76]	; 0x4c
 800c536:	b232      	sxth	r2, r6
 800c538:	9218      	str	r2, [sp, #96]	; 0x60
    if(bpp == 3) bpp = 4;
 800c53a:	f000 81c2 	beq.w	800c8c2 <lv_draw_label+0x6ae>

    switch(bpp) {
 800c53e:	3b01      	subs	r3, #1
 800c540:	2b07      	cmp	r3, #7
 800c542:	f200 816f 	bhi.w	800c824 <lv_draw_label+0x610>
 800c546:	e8df f013 	tbh	[pc, r3, lsl #1]
 800c54a:	01b7      	.short	0x01b7
 800c54c:	016d0025 	.word	0x016d0025
 800c550:	016d01bc 	.word	0x016d01bc
 800c554:	016d016d 	.word	0x016d016d
 800c558:	01c1      	.short	0x01c1
        _lv_txt_get_size(&p, txt, dsc->font, dsc->letter_space, dsc->line_space, LV_COORD_MAX,
 800c55a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c55e:	f647 4018 	movw	r0, #31768	; 0x7c18
 800c562:	9202      	str	r2, [sp, #8]
 800c564:	9001      	str	r0, [sp, #4]
 800c566:	a842      	add	r0, sp, #264	; 0x108
 800c568:	9300      	str	r3, [sp, #0]
 800c56a:	68fa      	ldr	r2, [r7, #12]
 800c56c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800c570:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c572:	f009 fdd7 	bl	8016124 <_lv_txt_get_size>
        w = p.x;
 800c576:	f9bd 3108 	ldrsh.w	r3, [sp, #264]	; 0x108
 800c57a:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800c57e:	ee08 3a90 	vmov	s17, r3
 800c582:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800c584:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c588:	9328      	str	r3, [sp, #160]	; 0xa0
 800c58a:	e670      	b.n	800c26e <lv_draw_label+0x5a>
 800c58c:	20000044 	.word	0x20000044
 800c590:	20000048 	.word	0x20000048
    if(bpp == 3) bpp = 4;
 800c594:	f04f 0802 	mov.w	r8, #2
            bpp_opa_table = _lv_bpp1_opa_table;
            bitmask_init  = 0x80;
            break;
        case 2:
            bpp_opa_table = _lv_bpp2_opa_table;
            bitmask_init  = 0xC0;
 800c598:	25c0      	movs	r5, #192	; 0xc0
            bpp_opa_table = _lv_bpp2_opa_table;
 800c59a:	4f64      	ldr	r7, [pc, #400]	; (800c72c <lv_draw_label+0x518>)
            return; /*Invalid bpp. Can't render the letter*/
    }

    int32_t col, row;

    int32_t box_w = g->box_w;
 800c59c:	f8bd 20fe 	ldrh.w	r2, [sp, #254]	; 0xfe
    int32_t box_h = g->box_h;
    int32_t width_bit = box_w * bpp; /*Letter width in bits*/

    /* Calculate the col/row start/end on the map*/
    int32_t col_start = pos_x >= clip_area->x1 ? 0 : (clip_area->x1 - pos_x) * 3;
 800c5a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    int32_t box_w = g->box_w;
 800c5a2:	921e      	str	r2, [sp, #120]	; 0x78
    int32_t col_start = pos_x >= clip_area->x1 ? 0 : (clip_area->x1 - pos_x) * 3;
 800c5a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c5a8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    int32_t box_h = g->box_h;
 800c5aa:	f8bd 4100 	ldrh.w	r4, [sp, #256]	; 0x100
    int32_t col_start = pos_x >= clip_area->x1 ? 0 : (clip_area->x1 - pos_x) * 3;
 800c5ae:	429a      	cmp	r2, r3
 800c5b0:	f2c0 84f4 	blt.w	800cf9c <lv_draw_label+0xd88>
 800c5b4:	2600      	movs	r6, #0
 800c5b6:	4632      	mov	r2, r6
 800c5b8:	9620      	str	r6, [sp, #128]	; 0x80
 800c5ba:	9626      	str	r6, [sp, #152]	; 0x98
 800c5bc:	962f      	str	r6, [sp, #188]	; 0xbc
    int32_t col_end   = pos_x + box_w / 3 <= clip_area->x2 ? box_w : (clip_area->x2 - pos_x + 1) * 3;
 800c5be:	981e      	ldr	r0, [sp, #120]	; 0x78
 800c5c0:	4b5b      	ldr	r3, [pc, #364]	; (800c730 <lv_draw_label+0x51c>)
 800c5c2:	990e      	ldr	r1, [sp, #56]	; 0x38
 800c5c4:	fba3 0300 	umull	r0, r3, r3, r0
 800c5c8:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800c5ca:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
 800c5ce:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800c5d2:	085b      	lsrs	r3, r3, #1
 800c5d4:	4288      	cmp	r0, r1
 800c5d6:	931f      	str	r3, [sp, #124]	; 0x7c
 800c5d8:	f340 8510 	ble.w	800cffc <lv_draw_label+0xde8>
 800c5dc:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800c5de:	1a09      	subs	r1, r1, r0
 800c5e0:	1c4b      	adds	r3, r1, #1
 800c5e2:	931f      	str	r3, [sp, #124]	; 0x7c
 800c5e4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800c5e8:	9316      	str	r3, [sp, #88]	; 0x58
    int32_t row_start = pos_y >= clip_area->y1 ? 0 : clip_area->y1 - pos_y;
 800c5ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c5ec:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c5ee:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c5f2:	4299      	cmp	r1, r3
 800c5f4:	f2c0 84f7 	blt.w	800cfe6 <lv_draw_label+0xdd2>
 800c5f8:	2300      	movs	r3, #0
 800c5fa:	9325      	str	r3, [sp, #148]	; 0x94
 800c5fc:	932a      	str	r3, [sp, #168]	; 0xa8
    int32_t row_end   = pos_y + box_h <= clip_area->y2 ? box_h : clip_area->y2 - pos_y + 1;
 800c5fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c600:	9818      	ldr	r0, [sp, #96]	; 0x60
 800c602:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800c606:	1821      	adds	r1, r4, r0
 800c608:	4299      	cmp	r1, r3
 800c60a:	f340 84c4 	ble.w	800cf96 <lv_draw_label+0xd82>
 800c60e:	1a1b      	subs	r3, r3, r0
 800c610:	3301      	adds	r3, #1
 800c612:	932c      	str	r3, [sp, #176]	; 0xb0
    uint8_t letter_px;
    lv_opa_t px_opa;
    int32_t col_bit;
    col_bit = bit_ofs & 0x7; /* "& 0x7" equals to "% 8" just faster */

    int32_t mask_buf_size = box_w * box_h > LV_HOR_RES_MAX ? LV_HOR_RES_MAX : g->box_w * g->box_h;
 800c614:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    map_p += bit_ofs >> 3;
 800c616:	eb0e 00e2 	add.w	r0, lr, r2, asr #3
    col_bit = bit_ofs & 0x7; /* "& 0x7" equals to "% 8" just faster */
 800c61a:	f002 0207 	and.w	r2, r2, #7
    int32_t mask_buf_size = box_w * box_h > LV_HOR_RES_MAX ? LV_HOR_RES_MAX : g->box_w * g->box_h;
 800c61e:	fb04 f103 	mul.w	r1, r4, r3
    map_p += bit_ofs >> 3;
 800c622:	9022      	str	r0, [sp, #136]	; 0x88
 800c624:	f5b1 7ff0 	cmp.w	r1, #480	; 0x1e0
    col_bit = bit_ofs & 0x7; /* "& 0x7" equals to "% 8" just faster */
 800c628:	9233      	str	r2, [sp, #204]	; 0xcc
    int32_t mask_buf_size = box_w * box_h > LV_HOR_RES_MAX ? LV_HOR_RES_MAX : g->box_w * g->box_h;
 800c62a:	bfa8      	it	ge
 800c62c:	f44f 71f0 	movge.w	r1, #480	; 0x1e0
 800c630:	460c      	mov	r4, r1
    lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
 800c632:	4608      	mov	r0, r1
 800c634:	912d      	str	r1, [sp, #180]	; 0xb4
 800c636:	f008 ff77 	bl	8015528 <_lv_mem_buf_get>
 800c63a:	4603      	mov	r3, r0
    int32_t mask_p = 0;

    lv_color_t * color_buf = _lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
 800c63c:	00a0      	lsls	r0, r4, #2
    lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
 800c63e:	9321      	str	r3, [sp, #132]	; 0x84
    lv_color_t * color_buf = _lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
 800c640:	f008 ff72 	bl	8015528 <_lv_mem_buf_get>
 800c644:	9023      	str	r0, [sp, #140]	; 0x8c

    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
 800c646:	f7fb fe95 	bl	8008374 <_lv_refr_get_disp_refreshing>
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 800c64a:	f007 f98b 	bl	8013964 <lv_disp_get_buf>
    vdb_buf_tmp += (row_start * vdb_width) + col_start / 3;

    lv_area_t map_area;
    map_area.x1 = col_start / 3 + pos_x;
    map_area.x2 = col_end / 3  + pos_x - 1;
    map_area.y1 = row_start + pos_y;
 800c64e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800c650:	9a25      	ldr	r2, [sp, #148]	; 0x94
    map_area.x1 = col_start / 3 + pos_x;
 800c652:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    map_area.y1 = row_start + pos_y;
 800c656:	4422      	add	r2, r4
    int32_t vdb_width     = lv_area_get_width(&vdb->area);
 800c658:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
    map_area.x2 = col_end / 3  + pos_x - 1;
 800c65c:	1e5c      	subs	r4, r3, #1
    map_area.x1 = col_start / 3 + pos_x;
 800c65e:	441e      	add	r6, r3
    map_area.y1 = row_start + pos_y;
 800c660:	fa0f fc82 	sxth.w	ip, r2
 800c664:	8a83      	ldrh	r3, [r0, #20]
    map_area.x2 = col_end / 3  + pos_x - 1;
 800c666:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800c668:	3301      	adds	r3, #1
 800c66a:	4422      	add	r2, r4
    vdb_buf_tmp += ((pos_y - vdb->area.y1) * vdb_width) + pos_x - vdb->area.x1;
 800c66c:	f9b0 4012 	ldrsh.w	r4, [r0, #18]
 800c670:	1a5b      	subs	r3, r3, r1
    lv_color_t * vdb_buf_tmp = vdb->buf_act;
 800c672:	6880      	ldr	r0, [r0, #8]
    map_area.x2 = col_end / 3  + pos_x - 1;
 800c674:	4696      	mov	lr, r2
    vdb_buf_tmp += ((pos_y - vdb->area.y1) * vdb_width) + pos_x - vdb->area.x1;
 800c676:	9a18      	ldr	r2, [sp, #96]	; 0x60
    map_area.x1 = col_start / 3 + pos_x;
 800c678:	f8ad 60e8 	strh.w	r6, [sp, #232]	; 0xe8
    vdb_buf_tmp += ((pos_y - vdb->area.y1) * vdb_width) + pos_x - vdb->area.x1;
 800c67c:	1b14      	subs	r4, r2, r4
 800c67e:	b21a      	sxth	r2, r3
    map_area.x2 = col_end / 3  + pos_x - 1;
 800c680:	f8ad e0ec 	strh.w	lr, [sp, #236]	; 0xec
 800c684:	4613      	mov	r3, r2
    vdb_buf_tmp += ((pos_y - vdb->area.y1) * vdb_width) + pos_x - vdb->area.x1;
 800c686:	4616      	mov	r6, r2
 800c688:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    map_area.y1 = row_start + pos_y;
 800c68a:	f8ad c0ea 	strh.w	ip, [sp, #234]	; 0xea
    vdb_buf_tmp += ((pos_y - vdb->area.y1) * vdb_width) + pos_x - vdb->area.x1;
 800c68e:	fb03 2404 	mla	r4, r3, r4, r2
    vdb_buf_tmp += (row_start * vdb_width) + col_start / 3;
 800c692:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c694:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    vdb_buf_tmp += ((pos_y - vdb->area.y1) * vdb_width) + pos_x - vdb->area.x1;
 800c696:	1a64      	subs	r4, r4, r1
    map_area.y2 = map_area.y1;
 800c698:	f8ad c0ee 	strh.w	ip, [sp, #238]	; 0xee
    vdb_buf_tmp += (row_start * vdb_width) + col_start / 3;
 800c69c:	fb06 2303 	mla	r3, r6, r3, r2
 800c6a0:	441c      	add	r4, r3
 800c6a2:	eb00 0284 	add.w	r2, r0, r4, lsl #2
 800c6a6:	9211      	str	r2, [sp, #68]	; 0x44

    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
 800c6a8:	f002 f934 	bl	800e914 <lv_draw_mask_get_cnt>
    uint8_t txt_rgb[3] = {color.ch.red, color.ch.green, color.ch.blue};
#else
    uint8_t txt_rgb[3] = {color.ch.red, (color.ch.green_h << 3) + color.ch.green_l, color.ch.blue};
#endif

    for(row = row_start ; row < row_end; row++) {
 800c6ac:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800c6ae:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
 800c6b0:	902e      	str	r0, [sp, #184]	; 0xb8
    for(row = row_start ; row < row_end; row++) {
 800c6b2:	4293      	cmp	r3, r2
 800c6b4:	f280 84f5 	bge.w	800d0a2 <lv_draw_label+0xe8e>
            if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
                _lv_memset_00(mask_buf + mask_p_start, lv_area_get_width(&map_area));
            }
        }

        if((int32_t) mask_p + (col_end - col_start) < mask_buf_size) {
 800c6b8:	9926      	ldr	r1, [sp, #152]	; 0x98
 800c6ba:	9816      	ldr	r0, [sp, #88]	; 0x58
            map_area.y1 = map_area.y2 + 1;
            map_area.y2 = map_area.y1;
            mask_p = 0;
        }

        col_bit += ((box_w - col_end) + col_start) * bpp;
 800c6bc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
        if((int32_t) mask_p + (col_end - col_start) < mask_buf_size) {
 800c6be:	1a42      	subs	r2, r0, r1

        map_p += (col_bit >> 3);
        col_bit = col_bit & 0x7;

        /*Next row in VDB*/
        vdb_buf_tmp += vdb_width - (col_end - col_start) / 3;
 800c6c0:	9520      	str	r5, [sp, #128]	; 0x80
        col_bit += ((box_w - col_end) + col_start) * bpp;
 800c6c2:	440b      	add	r3, r1
 800c6c4:	990d      	ldr	r1, [sp, #52]	; 0x34
        if((int32_t) mask_p + (col_end - col_start) < mask_buf_size) {
 800c6c6:	9230      	str	r2, [sp, #192]	; 0xc0
 800c6c8:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800c6cc:	f3c1 4107 	ubfx	r1, r1, #16, #8
        col_bit += ((box_w - col_end) + col_start) * bpp;
 800c6d0:	1a1b      	subs	r3, r3, r0
        vdb_buf_tmp += vdb_width - (col_end - col_start) / 3;
 800c6d2:	9727      	str	r7, [sp, #156]	; 0x9c
 800c6d4:	9425      	str	r4, [sp, #148]	; 0x94
 800c6d6:	4c17      	ldr	r4, [pc, #92]	; (800c734 <lv_draw_label+0x520>)
        col_bit += ((box_w - col_end) + col_start) * bpp;
 800c6d8:	fb08 f303 	mul.w	r3, r8, r3
 800c6dc:	9126      	str	r1, [sp, #152]	; 0x98
        vdb_buf_tmp += vdb_width - (col_end - col_start) / 3;
 800c6de:	fb84 4102 	smull	r4, r1, r4, r2
    int32_t mask_p = 0;
 800c6e2:	2400      	movs	r4, #0
        col_bit += ((box_w - col_end) + col_start) * bpp;
 800c6e4:	9331      	str	r3, [sp, #196]	; 0xc4
        vdb_buf_tmp += vdb_width - (col_end - col_start) / 3;
 800c6e6:	ebc1 71e2 	rsb	r1, r1, r2, asr #31
 800c6ea:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 800c6ec:	f8cd 90cc 	str.w	r9, [sp, #204]	; 0xcc
 800c6f0:	46c1      	mov	r9, r8
 800c6f2:	440e      	add	r6, r1
 800c6f4:	f8dd 8088 	ldr.w	r8, [sp, #136]	; 0x88
    int32_t mask_p = 0;
 800c6f8:	9429      	str	r4, [sp, #164]	; 0xa4
        vdb_buf_tmp += vdb_width - (col_end - col_start) / 3;
 800c6fa:	00b3      	lsls	r3, r6, #2
 800c6fc:	f8cd a0d0 	str.w	sl, [sp, #208]	; 0xd0
 800c700:	9332      	str	r3, [sp, #200]	; 0xc8
        bitmask = bitmask_init >> col_bit;
 800c702:	9b20      	ldr	r3, [sp, #128]	; 0x80
        for(col = col_start; col < col_end; col++) {
 800c704:	9c16      	ldr	r4, [sp, #88]	; 0x58
        bitmask = bitmask_init >> col_bit;
 800c706:	fa23 f102 	lsr.w	r1, r3, r2
        for(col = col_start; col < col_end; col++) {
 800c70a:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 800c70c:	42a3      	cmp	r3, r4
 800c70e:	f280 83ad 	bge.w	800ce6c <lv_draw_label+0xc58>
 800c712:	f1c9 0008 	rsb	r0, r9, #8
 800c716:	9d29      	ldr	r5, [sp, #164]	; 0xa4
                res_color.ch.blue = (uint32_t)((uint16_t)txt_rgb[2] * font_rgb[2] + (bg_rgb[2] * (255 - font_rgb[2]))) >> 8;
 800c718:	f89d 4034 	ldrb.w	r4, [sp, #52]	; 0x34
                color_buf[mask_p] = res_color;
 800c71c:	46c6      	mov	lr, r8
 800c71e:	9018      	str	r0, [sp, #96]	; 0x60
 800c720:	46a8      	mov	r8, r5
        uint32_t subpx_cnt = 0;
 800c722:	2000      	movs	r0, #0
                res_color.ch.blue = (uint32_t)((uint16_t)txt_rgb[2] * font_rgb[2] + (bg_rgb[2] * (255 - font_rgb[2]))) >> 8;
 800c724:	9422      	str	r4, [sp, #136]	; 0x88
                color_buf[mask_p] = res_color;
 800c726:	910c      	str	r1, [sp, #48]	; 0x30
 800c728:	e00f      	b.n	800c74a <lv_draw_label+0x536>
 800c72a:	bf00      	nop
 800c72c:	0801e204 	.word	0x0801e204
 800c730:	aaaaaaab 	.word	0xaaaaaaab
 800c734:	55555556 	.word	0x55555556
                bitmask = bitmask >> bpp;
 800c738:	9a0c      	ldr	r2, [sp, #48]	; 0x30
        for(col = col_start; col < col_end; col++) {
 800c73a:	3301      	adds	r3, #1
 800c73c:	9d16      	ldr	r5, [sp, #88]	; 0x58
                bitmask = bitmask >> bpp;
 800c73e:	fa22 f209 	lsr.w	r2, r2, r9
        for(col = col_start; col < col_end; col++) {
 800c742:	429d      	cmp	r5, r3
                bitmask = bitmask >> bpp;
 800c744:	920c      	str	r2, [sp, #48]	; 0x30
                col_bit += bpp;
 800c746:	4622      	mov	r2, r4
        for(col = col_start; col < col_end; col++) {
 800c748:	d02e      	beq.n	800c7a8 <lv_draw_label+0x594>
            letter_px = (*map_p & bitmask) >> (8 - col_bit - bpp);
 800c74a:	eb02 0409 	add.w	r4, r2, r9
 800c74e:	f89e 5000 	ldrb.w	r5, [lr]
 800c752:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c754:	f1c4 0608 	rsb	r6, r4, #8
 800c758:	400d      	ands	r5, r1
 800c75a:	40f5      	lsrs	r5, r6
            if(letter_px != 0) {
 800c75c:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 800c760:	d00d      	beq.n	800c77e <lv_draw_label+0x56a>
                if(opa == LV_OPA_COVER) {
 800c762:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800c764:	2eff      	cmp	r6, #255	; 0xff
 800c766:	f000 8138 	beq.w	800c9da <lv_draw_label+0x7c6>
                    px_opa = bpp == 8 ? (uint32_t)((uint32_t)letter_px * opa) >> 8
 800c76a:	f1b9 0f08 	cmp.w	r9, #8
 800c76e:	f000 813f 	beq.w	800c9f0 <lv_draw_label+0x7dc>
                             : (uint32_t)((uint32_t)bpp_opa_table[letter_px] * opa) >> 8;
 800c772:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 800c774:	5d75      	ldrb	r5, [r6, r5]
 800c776:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800c778:	fb15 f506 	smulbb	r5, r5, r6
                    px_opa = bpp == 8 ? (uint32_t)((uint32_t)letter_px * opa) >> 8
 800c77c:	0a2d      	lsrs	r5, r5, #8
            font_rgb[subpx_cnt] = px_opa;
 800c77e:	ae5c      	add	r6, sp, #368	; 0x170
 800c780:	4406      	add	r6, r0
            subpx_cnt ++;
 800c782:	3001      	adds	r0, #1
            if(subpx_cnt == 3) {
 800c784:	2803      	cmp	r0, #3
            font_rgb[subpx_cnt] = px_opa;
 800c786:	f806 5c98 	strb.w	r5, [r6, #-152]
            if(subpx_cnt == 3) {
 800c78a:	f000 80cc 	beq.w	800c926 <lv_draw_label+0x712>
            if(col_bit < (int32_t)(8 - bpp)) {
 800c78e:	9d18      	ldr	r5, [sp, #96]	; 0x60
 800c790:	42aa      	cmp	r2, r5
 800c792:	dbd1      	blt.n	800c738 <lv_draw_label+0x524>
        for(col = col_start; col < col_end; col++) {
 800c794:	3301      	adds	r3, #1
 800c796:	9d16      	ldr	r5, [sp, #88]	; 0x58
                bitmask = bitmask_init;
 800c798:	9a20      	ldr	r2, [sp, #128]	; 0x80
                map_p++;
 800c79a:	2400      	movs	r4, #0
        for(col = col_start; col < col_end; col++) {
 800c79c:	429d      	cmp	r5, r3
                map_p++;
 800c79e:	f10e 0e01 	add.w	lr, lr, #1
                bitmask = bitmask_init;
 800c7a2:	920c      	str	r2, [sp, #48]	; 0x30
                col_bit = 0;
 800c7a4:	4622      	mov	r2, r4
        for(col = col_start; col < col_end; col++) {
 800c7a6:	d1d0      	bne.n	800c74a <lv_draw_label+0x536>
 800c7a8:	4645      	mov	r5, r8
 800c7aa:	46f0      	mov	r8, lr
        if(other_mask_cnt) {
 800c7ac:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	f040 81ac 	bne.w	800cb0c <lv_draw_label+0x8f8>
        if((int32_t) mask_p + (col_end - col_start) < mask_buf_size) {
 800c7b4:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 800c7b6:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800c7b8:	442b      	add	r3, r5
 800c7ba:	429a      	cmp	r2, r3
 800c7bc:	f340 818f 	ble.w	800cade <lv_draw_label+0x8ca>
            map_area.y2 ++;
 800c7c0:	f8bd 30ee 	ldrh.w	r3, [sp, #238]	; 0xee
 800c7c4:	9529      	str	r5, [sp, #164]	; 0xa4
 800c7c6:	3301      	adds	r3, #1
 800c7c8:	b21b      	sxth	r3, r3
 800c7ca:	f8ad 30ee 	strh.w	r3, [sp, #238]	; 0xee
        col_bit += ((box_w - col_end) + col_start) * bpp;
 800c7ce:	9a31      	ldr	r2, [sp, #196]	; 0xc4
    for(row = row_start ; row < row_end; row++) {
 800c7d0:	992a      	ldr	r1, [sp, #168]	; 0xa8
        col_bit += ((box_w - col_end) + col_start) * bpp;
 800c7d2:	4414      	add	r4, r2
        vdb_buf_tmp += vdb_width - (col_end - col_start) / 3;
 800c7d4:	9832      	ldr	r0, [sp, #200]	; 0xc8
 800c7d6:	9a11      	ldr	r2, [sp, #68]	; 0x44
    for(row = row_start ; row < row_end; row++) {
 800c7d8:	3101      	adds	r1, #1
        map_p += (col_bit >> 3);
 800c7da:	eb08 08e4 	add.w	r8, r8, r4, asr #3
        vdb_buf_tmp += vdb_width - (col_end - col_start) / 3;
 800c7de:	4402      	add	r2, r0
    for(row = row_start ; row < row_end; row++) {
 800c7e0:	982c      	ldr	r0, [sp, #176]	; 0xb0
 800c7e2:	912a      	str	r1, [sp, #168]	; 0xa8
 800c7e4:	4281      	cmp	r1, r0
        vdb_buf_tmp += vdb_width - (col_end - col_start) / 3;
 800c7e6:	9211      	str	r2, [sp, #68]	; 0x44
        col_bit = col_bit & 0x7;
 800c7e8:	f004 0207 	and.w	r2, r4, #7
    for(row = row_start ; row < row_end; row++) {
 800c7ec:	d189      	bne.n	800c702 <lv_draw_label+0x4ee>
 800c7ee:	e9dd 9a33 	ldrd	r9, sl, [sp, #204]	; 0xcc
    }

    /*Flush the last part*/
    if(map_area.y1 != map_area.y2) {
 800c7f2:	f9bd 20ea 	ldrsh.w	r2, [sp, #234]	; 0xea
 800c7f6:	429a      	cmp	r2, r3
 800c7f8:	d00e      	beq.n	800c818 <lv_draw_label+0x604>
        map_area.y2--;
        _lv_blend_map(clip_area, &map_area, color_buf, mask_buf, LV_DRAW_MASK_RES_CHANGED, opa, blend_mode);
 800c7fa:	2102      	movs	r1, #2
        map_area.y2--;
 800c7fc:	1e5c      	subs	r4, r3, #1
        _lv_blend_map(clip_area, &map_area, color_buf, mask_buf, LV_DRAW_MASK_RES_CHANGED, opa, blend_mode);
 800c7fe:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c800:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c802:	9201      	str	r2, [sp, #4]
 800c804:	9302      	str	r3, [sp, #8]
 800c806:	9100      	str	r1, [sp, #0]
 800c808:	a93a      	add	r1, sp, #232	; 0xe8
 800c80a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c80c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800c80e:	980e      	ldr	r0, [sp, #56]	; 0x38
        map_area.y2--;
 800c810:	f8ad 40ee 	strh.w	r4, [sp, #238]	; 0xee
        _lv_blend_map(clip_area, &map_area, color_buf, mask_buf, LV_DRAW_MASK_RES_CHANGED, opa, blend_mode);
 800c814:	f7fe f8e4 	bl	800a9e0 <_lv_blend_map>
    }

    _lv_mem_buf_release(mask_buf);
 800c818:	9821      	ldr	r0, [sp, #132]	; 0x84
 800c81a:	f008 fb5d 	bl	8014ed8 <_lv_mem_buf_release>
    _lv_mem_buf_release(color_buf);
 800c81e:	9823      	ldr	r0, [sp, #140]	; 0x8c
 800c820:	f008 fb5a 	bl	8014ed8 <_lv_mem_buf_release>
            if(letter_w > 0) {
 800c824:	9b06      	ldr	r3, [sp, #24]
 800c826:	b133      	cbz	r3, 800c836 <lv_draw_label+0x622>
                pos.x += letter_w + dsc->letter_space;
 800c828:	9a08      	ldr	r2, [sp, #32]
 800c82a:	f8b9 0014 	ldrh.w	r0, [r9, #20]
 800c82e:	4402      	add	r2, r0
 800c830:	4413      	add	r3, r2
 800c832:	b21b      	sxth	r3, r3
 800c834:	9308      	str	r3, [sp, #32]
 800c836:	9937      	ldr	r1, [sp, #220]	; 0xdc
        while(i < line_end - line_start) {
 800c838:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c83a:	428b      	cmp	r3, r1
 800c83c:	f63f adcc 	bhi.w	800c3d8 <lv_draw_label+0x1c4>
 800c840:	464f      	mov	r7, r9
        if(dsc->decor & LV_TEXT_DECOR_STRIKETHROUGH) {
 800c842:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c846:	079d      	lsls	r5, r3, #30
 800c848:	f100 8109 	bmi.w	800ca5e <lv_draw_label+0x84a>
        if(dsc->decor  & LV_TEXT_DECOR_UNDERLINE) {
 800c84c:	07dc      	lsls	r4, r3, #31
 800c84e:	f100 80e9 	bmi.w	800ca24 <lv_draw_label+0x810>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
 800c852:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c854:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800c856:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 800c85a:	195e      	adds	r6, r3, r5
 800c85c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800c860:	ee18 3a90 	vmov	r3, s17
 800c864:	9100      	str	r1, [sp, #0]
 800c866:	4630      	mov	r0, r6
 800c868:	ee18 1a10 	vmov	r1, s16
 800c86c:	f009 fb1a 	bl	8015ea4 <_lv_txt_get_next_line>
        if(dsc->flag & LV_TXT_FLAG_CENTER) {
 800c870:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
 800c874:	4601      	mov	r1, r0
        pos.x = coords->x1;
 800c876:	9a1a      	ldr	r2, [sp, #104]	; 0x68
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
 800c878:	4405      	add	r5, r0
        if(dsc->flag & LV_TXT_FLAG_CENTER) {
 800c87a:	0758      	lsls	r0, r3, #29
        pos.x = coords->x1;
 800c87c:	f9b2 4000 	ldrsh.w	r4, [r2]
        if(dsc->flag & LV_TXT_FLAG_CENTER) {
 800c880:	f100 80bb 	bmi.w	800c9fa <lv_draw_label+0x7e6>
        else if(dsc->flag & LV_TXT_FLAG_RIGHT) {
 800c884:	071a      	lsls	r2, r3, #28
 800c886:	f100 8114 	bmi.w	800cab2 <lv_draw_label+0x89e>
        pos.y += line_height;
 800c88a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c88c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800c88e:	4619      	mov	r1, r3
 800c890:	9b1d      	ldr	r3, [sp, #116]	; 0x74
        line_start = line_end;
 800c892:	9815      	ldr	r0, [sp, #84]	; 0x54
 800c894:	4419      	add	r1, r3
 800c896:	441a      	add	r2, r3
        if(pos.y > mask->y2) return;
 800c898:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c89a:	b209      	sxth	r1, r1
        line_start = line_end;
 800c89c:	900b      	str	r0, [sp, #44]	; 0x2c
        if(pos.y > mask->y2) return;
 800c89e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800c8a2:	b292      	uxth	r2, r2
 800c8a4:	9114      	str	r1, [sp, #80]	; 0x50
 800c8a6:	428b      	cmp	r3, r1
 800c8a8:	921b      	str	r2, [sp, #108]	; 0x6c
 800c8aa:	f6ff acc2 	blt.w	800c232 <lv_draw_label+0x1e>
 800c8ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
 800c8b0:	9515      	str	r5, [sp, #84]	; 0x54
 800c8b2:	4403      	add	r3, r0
 800c8b4:	461d      	mov	r5, r3
 800c8b6:	e57b      	b.n	800c3b0 <lv_draw_label+0x19c>
    if(bpp == 3) bpp = 4;
 800c8b8:	f04f 0801 	mov.w	r8, #1
 800c8bc:	2580      	movs	r5, #128	; 0x80
 800c8be:	4fb4      	ldr	r7, [pc, #720]	; (800cb90 <lv_draw_label+0x97c>)
 800c8c0:	e66c      	b.n	800c59c <lv_draw_label+0x388>
 800c8c2:	f04f 0804 	mov.w	r8, #4
            bitmask_init  = 0xF0;
 800c8c6:	25f0      	movs	r5, #240	; 0xf0
            bpp_opa_table = _lv_bpp4_opa_table;
 800c8c8:	4fb2      	ldr	r7, [pc, #712]	; (800cb94 <lv_draw_label+0x980>)
 800c8ca:	e667      	b.n	800c59c <lv_draw_label+0x388>
            break;       /*No opa table, pixel value will be used directly*/
 800c8cc:	f04f 0808 	mov.w	r8, #8
            bitmask_init  = 0xFF;
 800c8d0:	25ff      	movs	r5, #255	; 0xff
            bpp_opa_table = _lv_bpp8_opa_table;
 800c8d2:	4fb1      	ldr	r7, [pc, #708]	; (800cb98 <lv_draw_label+0x984>)
            break;       /*No opa table, pixel value will be used directly*/
 800c8d4:	e662      	b.n	800c59c <lv_draw_label+0x388>
        line_width = _lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
 800c8d6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c8d8:	462c      	mov	r4, r5
 800c8da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c8dc:	9300      	str	r3, [sp, #0]
 800c8de:	440a      	add	r2, r1
 800c8e0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800c8e4:	1a61      	subs	r1, r4, r1
 800c8e6:	4610      	mov	r0, r2
 800c8e8:	4615      	mov	r5, r2
 800c8ea:	4652      	mov	r2, sl
 800c8ec:	f009 fc90 	bl	8016210 <_lv_txt_get_width>
 800c8f0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800c8f2:	8893      	ldrh	r3, [r2, #4]
 800c8f4:	8812      	ldrh	r2, [r2, #0]
 800c8f6:	3301      	adds	r3, #1
 800c8f8:	1a9b      	subs	r3, r3, r2
        pos.x += lv_area_get_width(coords) - line_width;
 800c8fa:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800c8fc:	b21b      	sxth	r3, r3
 800c8fe:	1a1b      	subs	r3, r3, r0
 800c900:	4413      	add	r3, r2
 800c902:	b21b      	sxth	r3, r3
 800c904:	9328      	str	r3, [sp, #160]	; 0xa0
 800c906:	e523      	b.n	800c350 <lv_draw_label+0x13c>
 800c908:	461d      	mov	r5, r3
 800c90a:	e570      	b.n	800c3ee <lv_draw_label+0x1da>
                    if(cmd_state == CMD_STATE_WAIT) { /*Start char*/
 800c90c:	9907      	ldr	r1, [sp, #28]
 800c90e:	2900      	cmp	r1, #0
 800c910:	d06a      	beq.n	800c9e8 <lv_draw_label+0x7d4>
                    else if(cmd_state == CMD_STATE_PAR) {   /*Other start char in parameter escaped cmd. char */
 800c912:	2901      	cmp	r1, #1
 800c914:	f000 80c7 	beq.w	800caa6 <lv_draw_label+0x892>
                    else if(cmd_state == CMD_STATE_IN) {   /*Command end */
 800c918:	2902      	cmp	r1, #2
 800c91a:	f000 8115 	beq.w	800cb48 <lv_draw_label+0x934>
            lv_color_t color = dsc->color;
 800c91e:	f8d9 3000 	ldr.w	r3, [r9]
 800c922:	930d      	str	r3, [sp, #52]	; 0x34
            if(cmd_state == CMD_STATE_IN) color = recolor;
 800c924:	e585      	b.n	800c432 <lv_draw_label+0x21e>
                res_color.ch.blue = (uint32_t)((uint16_t)txt_rgb[2] * font_rgb[2] + (bg_rgb[2] * (255 - font_rgb[2]))) >> 8;
 800c926:	f89d a0da 	ldrb.w	sl, [sp, #218]	; 0xda
                res_color.ch.green = (uint32_t)((uint32_t)txt_rgb[1] * font_rgb[1] + (bg_rgb[1] * (255 - font_rgb[1]))) >> 8;
 800c92a:	f89d 50d9 	ldrb.w	r5, [sp, #217]	; 0xd9
                res_color.ch.red = (uint32_t)((uint16_t)txt_rgb[0] * font_rgb[0] + (bg_rgb[0] * (255 - font_rgb[0]))) >> 8;
 800c92e:	f89d 00d8 	ldrb.w	r0, [sp, #216]	; 0xd8
                res_color.ch.green = (uint32_t)((uint32_t)txt_rgb[1] * font_rgb[1] + (bg_rgb[1] * (255 - font_rgb[1]))) >> 8;
 800c932:	9513      	str	r5, [sp, #76]	; 0x4c
                res_color.ch.blue = (uint32_t)((uint16_t)txt_rgb[2] * font_rgb[2] + (bg_rgb[2] * (255 - font_rgb[2]))) >> 8;
 800c934:	f1ca 05ff 	rsb	r5, sl, #255	; 0xff
                res_color.ch.red = (uint32_t)((uint16_t)txt_rgb[0] * font_rgb[0] + (bg_rgb[0] * (255 - font_rgb[0]))) >> 8;
 800c938:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c93a:	f1c0 0cff 	rsb	ip, r0, #255	; 0xff
 800c93e:	9e26      	ldr	r6, [sp, #152]	; 0x98
                res_color.ch.blue = (uint32_t)((uint16_t)txt_rgb[2] * font_rgb[2] + (bg_rgb[2] * (255 - font_rgb[2]))) >> 8;
 800c940:	951e      	str	r5, [sp, #120]	; 0x78
 800c942:	9d22      	ldr	r5, [sp, #136]	; 0x88
                res_color.ch.red = (uint32_t)((uint16_t)txt_rgb[0] * font_rgb[0] + (bg_rgb[0] * (255 - font_rgb[0]))) >> 8;
 800c944:	fb16 f700 	smulbb	r7, r6, r0
 800c948:	788e      	ldrb	r6, [r1, #2]
                res_color.ch.blue = (uint32_t)((uint16_t)txt_rgb[2] * font_rgb[2] + (bg_rgb[2] * (255 - font_rgb[2]))) >> 8;
 800c94a:	fb0a f505 	mul.w	r5, sl, r5
                res_color.ch.red = (uint32_t)((uint16_t)txt_rgb[0] * font_rgb[0] + (bg_rgb[0] * (255 - font_rgb[0]))) >> 8;
 800c94e:	fb0c 7606 	mla	r6, ip, r6, r7
                res_color.ch.blue = (uint32_t)((uint16_t)txt_rgb[2] * font_rgb[2] + (bg_rgb[2] * (255 - font_rgb[2]))) >> 8;
 800c952:	780f      	ldrb	r7, [r1, #0]
 800c954:	951f      	str	r5, [sp, #124]	; 0x7c
                if(font_rgb[0] == 0 && font_rgb[1] == 0 && font_rgb[2] == 0) mask_buf[mask_p] = LV_OPA_TRANSP;
 800c956:	ea40 010a 	orr.w	r1, r0, sl
                res_color.ch.green = (uint32_t)((uint32_t)txt_rgb[1] * font_rgb[1] + (bg_rgb[1] * (255 - font_rgb[1]))) >> 8;
 800c95a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
                res_color.ch.red = (uint32_t)((uint16_t)txt_rgb[0] * font_rgb[0] + (bg_rgb[0] * (255 - font_rgb[0]))) >> 8;
 800c95c:	f3c6 2607 	ubfx	r6, r6, #8, #8
                res_color.ch.green = (uint32_t)((uint32_t)txt_rgb[1] * font_rgb[1] + (bg_rgb[1] * (255 - font_rgb[1]))) >> 8;
 800c960:	9825      	ldr	r0, [sp, #148]	; 0x94
 800c962:	f1c5 0cff 	rsb	ip, r5, #255	; 0xff
 800c966:	fb10 fa05 	smulbb	sl, r0, r5
                res_color.ch.blue = (uint32_t)((uint16_t)txt_rgb[2] * font_rgb[2] + (bg_rgb[2] * (255 - font_rgb[2]))) >> 8;
 800c96a:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 800c96c:	4628      	mov	r0, r5
 800c96e:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 800c970:	fb00 5707 	mla	r7, r0, r7, r5
                res_color.ch.green = (uint32_t)((uint32_t)txt_rgb[1] * font_rgb[1] + (bg_rgb[1] * (255 - font_rgb[1]))) >> 8;
 800c974:	9811      	ldr	r0, [sp, #68]	; 0x44
                if(font_rgb[0] == 0 && font_rgb[1] == 0 && font_rgb[2] == 0) mask_buf[mask_p] = LV_OPA_TRANSP;
 800c976:	9d13      	ldr	r5, [sp, #76]	; 0x4c
                res_color.ch.green = (uint32_t)((uint32_t)txt_rgb[1] * font_rgb[1] + (bg_rgb[1] * (255 - font_rgb[1]))) >> 8;
 800c978:	7840      	ldrb	r0, [r0, #1]
                res_color.ch.blue = (uint32_t)((uint16_t)txt_rgb[2] * font_rgb[2] + (bg_rgb[2] * (255 - font_rgb[2]))) >> 8;
 800c97a:	f3c7 2707 	ubfx	r7, r7, #8, #8
                res_color.ch.green = (uint32_t)((uint32_t)txt_rgb[1] * font_rgb[1] + (bg_rgb[1] * (255 - font_rgb[1]))) >> 8;
 800c97e:	fb0c ac00 	mla	ip, ip, r0, sl
                if(font_rgb[0] == 0 && font_rgb[1] == 0 && font_rgb[2] == 0) mask_buf[mask_p] = LV_OPA_TRANSP;
 800c982:	ea55 0001 	orrs.w	r0, r5, r1
                res_color.ch.green = (uint32_t)((uint32_t)txt_rgb[1] * font_rgb[1] + (bg_rgb[1] * (255 - font_rgb[1]))) >> 8;
 800c986:	f3cc 2c07 	ubfx	ip, ip, #8, #8
                if(font_rgb[0] == 0 && font_rgb[1] == 0 && font_rgb[2] == 0) mask_buf[mask_p] = LV_OPA_TRANSP;
 800c98a:	f000 80a4 	beq.w	800cad6 <lv_draw_label+0x8c2>
                else mask_buf[mask_p] = LV_OPA_COVER;
 800c98e:	9821      	ldr	r0, [sp, #132]	; 0x84
 800c990:	f04f 35ff 	mov.w	r5, #4294967295
 800c994:	f800 5008 	strb.w	r5, [r0, r8]
                vdb_buf_tmp++;
 800c998:	9d11      	ldr	r5, [sp, #68]	; 0x44
                color_buf[mask_p] = res_color;
 800c99a:	9823      	ldr	r0, [sp, #140]	; 0x8c
                vdb_buf_tmp++;
 800c99c:	3504      	adds	r5, #4
                color_buf[mask_p] = res_color;
 800c99e:	f800 7028 	strb.w	r7, [r0, r8, lsl #2]
                vdb_buf_tmp++;
 800c9a2:	9511      	str	r5, [sp, #68]	; 0x44
                color_buf[mask_p] = res_color;
 800c9a4:	eb00 0588 	add.w	r5, r0, r8, lsl #2
                subpx_cnt = 0;
 800c9a8:	2000      	movs	r0, #0
                color_buf[mask_p] = res_color;
 800c9aa:	f108 0801 	add.w	r8, r8, #1
 800c9ae:	70ae      	strb	r6, [r5, #2]
 800c9b0:	f04f 36ff 	mov.w	r6, #4294967295
 800c9b4:	f885 c001 	strb.w	ip, [r5, #1]
 800c9b8:	70ee      	strb	r6, [r5, #3]
                vdb_buf_tmp++;
 800c9ba:	e6e8      	b.n	800c78e <lv_draw_label+0x57a>
                    if(letter == ' ') {
 800c9bc:	2c20      	cmp	r4, #32
                        if(i - par_start == LABEL_RECOLOR_PAR_LENGTH + 1) {
 800c9be:	9937      	ldr	r1, [sp, #220]	; 0xdc
                    if(letter == ' ') {
 800c9c0:	f47f af3a 	bne.w	800c838 <lv_draw_label+0x624>
                        if(i - par_start == LABEL_RECOLOR_PAR_LENGTH + 1) {
 800c9c4:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800c9c6:	1acb      	subs	r3, r1, r3
 800c9c8:	2b07      	cmp	r3, #7
 800c9ca:	f000 8297 	beq.w	800cefc <lv_draw_label+0xce8>
                            recolor.full = dsc->color.full;
 800c9ce:	f8d9 3000 	ldr.w	r3, [r9]
 800c9d2:	9312      	str	r3, [sp, #72]	; 0x48
                        cmd_state = CMD_STATE_IN; /*After the parameter the text is in the command*/
 800c9d4:	2302      	movs	r3, #2
 800c9d6:	9307      	str	r3, [sp, #28]
 800c9d8:	e72e      	b.n	800c838 <lv_draw_label+0x624>
                    px_opa = bpp == 8 ? letter_px : bpp_opa_table[letter_px];
 800c9da:	f1b9 0f08 	cmp.w	r9, #8
 800c9de:	f43f aece 	beq.w	800c77e <lv_draw_label+0x56a>
 800c9e2:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 800c9e4:	5d75      	ldrb	r5, [r6, r5]
 800c9e6:	e6ca      	b.n	800c77e <lv_draw_label+0x56a>
                        par_start = i;
 800c9e8:	9937      	ldr	r1, [sp, #220]	; 0xdc
                        cmd_state = CMD_STATE_PAR;
 800c9ea:	9307      	str	r3, [sp, #28]
                        par_start = i;
 800c9ec:	912b      	str	r1, [sp, #172]	; 0xac
                        continue;
 800c9ee:	e723      	b.n	800c838 <lv_draw_label+0x624>
                    px_opa = bpp == 8 ? (uint32_t)((uint32_t)letter_px * opa) >> 8
 800c9f0:	fb06 f505 	mul.w	r5, r6, r5
 800c9f4:	f3c5 2507 	ubfx	r5, r5, #8, #8
 800c9f8:	e6c1      	b.n	800c77e <lv_draw_label+0x56a>
                _lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
 800c9fa:	ee18 2a10 	vmov	r2, s16
 800c9fe:	9300      	str	r3, [sp, #0]
 800ca00:	4630      	mov	r0, r6
 800ca02:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800ca06:	f009 fc03 	bl	8016210 <_lv_txt_get_width>
 800ca0a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800ca0c:	889a      	ldrh	r2, [r3, #4]
 800ca0e:	881b      	ldrh	r3, [r3, #0]
 800ca10:	3201      	adds	r2, #1
 800ca12:	1ad2      	subs	r2, r2, r3
            pos.x += (lv_area_get_width(coords) - line_width) / 2;
 800ca14:	b213      	sxth	r3, r2
 800ca16:	1a18      	subs	r0, r3, r0
 800ca18:	bf48      	it	mi
 800ca1a:	3001      	addmi	r0, #1
 800ca1c:	eb04 0460 	add.w	r4, r4, r0, asr #1
 800ca20:	b224      	sxth	r4, r4
 800ca22:	e732      	b.n	800c88a <lv_draw_label+0x676>
            p1.y = pos.y + dsc->font->line_height - dsc->font->base_line - font->underline_position;
 800ca24:	68fa      	ldr	r2, [r7, #12]
 800ca26:	ee18 0a10 	vmov	r0, s16
            p1.x = pos_x_start;
 800ca2a:	9928      	ldr	r1, [sp, #160]	; 0xa0
            lv_draw_line(&p1, &p2, mask, &line_dsc);
 800ca2c:	ab3c      	add	r3, sp, #240	; 0xf0
            p1.y = pos.y + dsc->font->line_height - dsc->font->base_line - font->underline_position;
 800ca2e:	8914      	ldrh	r4, [r2, #8]
            p1.x = pos_x_start;
 800ca30:	f8ad 10e8 	strh.w	r1, [sp, #232]	; 0xe8
            p1.y = pos.y + dsc->font->line_height - dsc->font->base_line - font->underline_position;
 800ca34:	8951      	ldrh	r1, [r2, #10]
 800ca36:	f990 000d 	ldrsb.w	r0, [r0, #13]
 800ca3a:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800ca3c:	4408      	add	r0, r1
            p2.x = pos.x;
 800ca3e:	9a08      	ldr	r2, [sp, #32]
            lv_draw_line(&p1, &p2, mask, &line_dsc);
 800ca40:	a93f      	add	r1, sp, #252	; 0xfc
            p1.y = pos.y + dsc->font->line_height - dsc->font->base_line - font->underline_position;
 800ca42:	1a24      	subs	r4, r4, r0
            p2.x = pos.x;
 800ca44:	f8ad 20fc 	strh.w	r2, [sp, #252]	; 0xfc
            lv_draw_line(&p1, &p2, mask, &line_dsc);
 800ca48:	a83a      	add	r0, sp, #232	; 0xe8
 800ca4a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
            p1.y = pos.y + dsc->font->line_height - dsc->font->base_line - font->underline_position;
 800ca4c:	442c      	add	r4, r5
 800ca4e:	b224      	sxth	r4, r4
 800ca50:	f8ad 40ea 	strh.w	r4, [sp, #234]	; 0xea
            p2.y = p1.y;
 800ca54:	f8ad 40fe 	strh.w	r4, [sp, #254]	; 0xfe
            lv_draw_line(&p1, &p2, mask, &line_dsc);
 800ca58:	f000 fb38 	bl	800d0cc <lv_draw_line>
 800ca5c:	e6f9      	b.n	800c852 <lv_draw_label+0x63e>
            p1.y = pos.y + (dsc->font->line_height / 2)  + line_dsc.width / 2;
 800ca5e:	68fb      	ldr	r3, [r7, #12]
            lv_draw_line(&p1, &p2, mask, &line_dsc);
 800ca60:	a93f      	add	r1, sp, #252	; 0xfc
            p1.x = pos_x_start;
 800ca62:	9a28      	ldr	r2, [sp, #160]	; 0xa0
            p1.y = pos.y + (dsc->font->line_height / 2)  + line_dsc.width / 2;
 800ca64:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
            p1.x = pos_x_start;
 800ca68:	f8ad 20e8 	strh.w	r2, [sp, #232]	; 0xe8
            p1.y = pos.y + (dsc->font->line_height / 2)  + line_dsc.width / 2;
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	f9bd 20f4 	ldrsh.w	r2, [sp, #244]	; 0xf4
 800ca72:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800ca74:	bfb8      	it	lt
 800ca76:	3301      	addlt	r3, #1
 800ca78:	2a00      	cmp	r2, #0
            p2.x = pos.x;
 800ca7a:	9d08      	ldr	r5, [sp, #32]
            p1.y = pos.y + (dsc->font->line_height / 2)  + line_dsc.width / 2;
 800ca7c:	bfb8      	it	lt
 800ca7e:	3201      	addlt	r2, #1
 800ca80:	105c      	asrs	r4, r3, #1
            lv_draw_line(&p1, &p2, mask, &line_dsc);
 800ca82:	ab3c      	add	r3, sp, #240	; 0xf0
            p2.x = pos.x;
 800ca84:	f8ad 50fc 	strh.w	r5, [sp, #252]	; 0xfc
            p1.y = pos.y + (dsc->font->line_height / 2)  + line_dsc.width / 2;
 800ca88:	eb04 0462 	add.w	r4, r4, r2, asr #1
            lv_draw_line(&p1, &p2, mask, &line_dsc);
 800ca8c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
            p1.y = pos.y + (dsc->font->line_height / 2)  + line_dsc.width / 2;
 800ca8e:	4404      	add	r4, r0
            lv_draw_line(&p1, &p2, mask, &line_dsc);
 800ca90:	a83a      	add	r0, sp, #232	; 0xe8
            p1.y = pos.y + (dsc->font->line_height / 2)  + line_dsc.width / 2;
 800ca92:	b224      	sxth	r4, r4
 800ca94:	f8ad 40ea 	strh.w	r4, [sp, #234]	; 0xea
            p2.y = p1.y;
 800ca98:	f8ad 40fe 	strh.w	r4, [sp, #254]	; 0xfe
            lv_draw_line(&p1, &p2, mask, &line_dsc);
 800ca9c:	f000 fb16 	bl	800d0cc <lv_draw_line>
 800caa0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800caa4:	e6d2      	b.n	800c84c <lv_draw_label+0x638>
            lv_color_t color = dsc->color;
 800caa6:	f8d9 3000 	ldr.w	r3, [r9]
 800caaa:	930d      	str	r3, [sp, #52]	; 0x34
                        cmd_state = CMD_STATE_WAIT;
 800caac:	2300      	movs	r3, #0
 800caae:	9307      	str	r3, [sp, #28]
 800cab0:	e4bf      	b.n	800c432 <lv_draw_label+0x21e>
                _lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
 800cab2:	ee18 2a10 	vmov	r2, s16
 800cab6:	9300      	str	r3, [sp, #0]
 800cab8:	4630      	mov	r0, r6
 800caba:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800cabe:	f009 fba7 	bl	8016210 <_lv_txt_get_width>
 800cac2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800cac4:	8893      	ldrh	r3, [r2, #4]
 800cac6:	8812      	ldrh	r2, [r2, #0]
 800cac8:	3301      	adds	r3, #1
 800caca:	1a9b      	subs	r3, r3, r2
            pos.x += lv_area_get_width(coords) - line_width;
 800cacc:	b21b      	sxth	r3, r3
 800cace:	1a18      	subs	r0, r3, r0
 800cad0:	4404      	add	r4, r0
 800cad2:	b224      	sxth	r4, r4
 800cad4:	e6d9      	b.n	800c88a <lv_draw_label+0x676>
                if(font_rgb[0] == 0 && font_rgb[1] == 0 && font_rgb[2] == 0) mask_buf[mask_p] = LV_OPA_TRANSP;
 800cad6:	9d21      	ldr	r5, [sp, #132]	; 0x84
 800cad8:	f805 0008 	strb.w	r0, [r5, r8]
 800cadc:	e75c      	b.n	800c998 <lv_draw_label+0x784>
            _lv_blend_map(clip_area, &map_area, color_buf, mask_buf, LV_DRAW_MASK_RES_CHANGED, opa, blend_mode);
 800cade:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cae0:	2202      	movs	r2, #2
 800cae2:	a93a      	add	r1, sp, #232	; 0xe8
 800cae4:	980e      	ldr	r0, [sp, #56]	; 0x38
 800cae6:	9302      	str	r3, [sp, #8]
 800cae8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800caea:	9200      	str	r2, [sp, #0]
 800caec:	9301      	str	r3, [sp, #4]
 800caee:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800caf0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800caf2:	f7fd ff75 	bl	800a9e0 <_lv_blend_map>
            map_area.y1 = map_area.y2 + 1;
 800caf6:	f8bd 30ee 	ldrh.w	r3, [sp, #238]	; 0xee
            mask_p = 0;
 800cafa:	2200      	movs	r2, #0
            map_area.y1 = map_area.y2 + 1;
 800cafc:	3301      	adds	r3, #1
            mask_p = 0;
 800cafe:	9229      	str	r2, [sp, #164]	; 0xa4
            map_area.y1 = map_area.y2 + 1;
 800cb00:	b21b      	sxth	r3, r3
 800cb02:	f8ad 30ea 	strh.w	r3, [sp, #234]	; 0xea
            map_area.y2 = map_area.y1;
 800cb06:	f8ad 30ee 	strh.w	r3, [sp, #238]	; 0xee
            mask_p = 0;
 800cb0a:	e660      	b.n	800c7ce <lv_draw_label+0x5ba>
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf + mask_p_start, map_area.x1, map_area.y2,
 800cb0c:	9921      	ldr	r1, [sp, #132]	; 0x84
 800cb0e:	f8bd 30ec 	ldrh.w	r3, [sp, #236]	; 0xec
 800cb12:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800cb14:	3301      	adds	r3, #1
 800cb16:	440a      	add	r2, r1
 800cb18:	f9bd 10e8 	ldrsh.w	r1, [sp, #232]	; 0xe8
 800cb1c:	1a5b      	subs	r3, r3, r1
 800cb1e:	4616      	mov	r6, r2
 800cb20:	4610      	mov	r0, r2
 800cb22:	f9bd 20ee 	ldrsh.w	r2, [sp, #238]	; 0xee
 800cb26:	b21b      	sxth	r3, r3
 800cb28:	f001 fe10 	bl	800e74c <lv_draw_mask_apply>
            if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
 800cb2c:	2800      	cmp	r0, #0
 800cb2e:	f47f ae41 	bne.w	800c7b4 <lv_draw_label+0x5a0>
 800cb32:	f8bd 10ec 	ldrh.w	r1, [sp, #236]	; 0xec
                _lv_memset_00(mask_buf + mask_p_start, lv_area_get_width(&map_area));
 800cb36:	4630      	mov	r0, r6
 800cb38:	f8bd 30e8 	ldrh.w	r3, [sp, #232]	; 0xe8
 800cb3c:	3101      	adds	r1, #1
 800cb3e:	1ac9      	subs	r1, r1, r3
 800cb40:	b209      	sxth	r1, r1
 800cb42:	f008 fe19 	bl	8015778 <_lv_memset_00>
 800cb46:	e635      	b.n	800c7b4 <lv_draw_label+0x5a0>
                        cmd_state = CMD_STATE_WAIT;
 800cb48:	2300      	movs	r3, #0
 800cb4a:	9937      	ldr	r1, [sp, #220]	; 0xdc
 800cb4c:	9307      	str	r3, [sp, #28]
 800cb4e:	e673      	b.n	800c838 <lv_draw_label+0x624>
        draw_letter_normal(pos_x, pos_y, &g, clip_area, map_p, color, opa, blend_mode);
 800cb50:	f9bd 2044 	ldrsh.w	r2, [sp, #68]	; 0x44
    if(bpp == 3) bpp = 4;
 800cb54:	2b03      	cmp	r3, #3
        draw_letter_normal(pos_x, pos_y, &g, clip_area, map_p, color, opa, blend_mode);
 800cb56:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 800cb5a:	9213      	str	r2, [sp, #76]	; 0x4c
    if(bpp == 3) bpp = 4;
 800cb5c:	f000 8122 	beq.w	800cda4 <lv_draw_label+0xb90>
    switch(bpp) {
 800cb60:	3b01      	subs	r3, #1
 800cb62:	2b07      	cmp	r3, #7
 800cb64:	f63f ae5e 	bhi.w	800c824 <lv_draw_label+0x610>
 800cb68:	a201      	add	r2, pc, #4	; (adr r2, 800cb70 <lv_draw_label+0x95c>)
 800cb6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb6e:	bf00      	nop
 800cb70:	0800cd99 	.word	0x0800cd99
 800cb74:	0800cb9d 	.word	0x0800cb9d
 800cb78:	0800c825 	.word	0x0800c825
 800cb7c:	0800cda5 	.word	0x0800cda5
 800cb80:	0800c825 	.word	0x0800c825
 800cb84:	0800c825 	.word	0x0800c825
 800cb88:	0800c825 	.word	0x0800c825
 800cb8c:	0800cdb1 	.word	0x0800cdb1
 800cb90:	0801e200 	.word	0x0801e200
 800cb94:	0801e208 	.word	0x0801e208
 800cb98:	0801e218 	.word	0x0801e218
    if(bpp == 3) bpp = 4;
 800cb9c:	2506      	movs	r5, #6
 800cb9e:	2402      	movs	r4, #2
            shades = 4;
 800cba0:	2304      	movs	r3, #4
            bitmask_init  = 0xC0;
 800cba2:	26c0      	movs	r6, #192	; 0xc0
            bpp_opa_table_p = _lv_bpp2_opa_table;
 800cba4:	4fb3      	ldr	r7, [pc, #716]	; (800ce74 <lv_draw_label+0xc60>)
    if(opa < LV_OPA_MAX) {
 800cba6:	9919      	ldr	r1, [sp, #100]	; 0x64
 800cba8:	29fc      	cmp	r1, #252	; 0xfc
 800cbaa:	d81e      	bhi.n	800cbea <lv_draw_label+0x9d6>
        if(prev_opa != opa || prev_bpp != bpp) {
 800cbac:	4ab2      	ldr	r2, [pc, #712]	; (800ce78 <lv_draw_label+0xc64>)
 800cbae:	f8df 82dc 	ldr.w	r8, [pc, #732]	; 800ce8c <lv_draw_label+0xc78>
 800cbb2:	7812      	ldrb	r2, [r2, #0]
 800cbb4:	428a      	cmp	r2, r1
 800cbb6:	f000 826e 	beq.w	800d096 <lv_draw_label+0xe82>
 800cbba:	3b01      	subs	r3, #1
 800cbbc:	1e7a      	subs	r2, r7, #1
 800cbbe:	48af      	ldr	r0, [pc, #700]	; (800ce7c <lv_draw_label+0xc68>)
 800cbc0:	441f      	add	r7, r3
                opa_table[i] = bpp_opa_table_p[i] == LV_OPA_COVER ? opa : ((bpp_opa_table_p[i] * opa) >> 8);
 800cbc2:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800cbc6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800cbc8:	29ff      	cmp	r1, #255	; 0xff
 800cbca:	fb13 f301 	smulbb	r3, r3, r1
 800cbce:	ea4f 2323 	mov.w	r3, r3, asr #8
 800cbd2:	bf08      	it	eq
 800cbd4:	9b19      	ldreq	r3, [sp, #100]	; 0x64
            for(i = 0; i < shades; i++) {
 800cbd6:	42ba      	cmp	r2, r7
                opa_table[i] = bpp_opa_table_p[i] == LV_OPA_COVER ? opa : ((bpp_opa_table_p[i] * opa) >> 8);
 800cbd8:	f800 3b01 	strb.w	r3, [r0], #1
            for(i = 0; i < shades; i++) {
 800cbdc:	d1f1      	bne.n	800cbc2 <lv_draw_label+0x9ae>
        prev_opa = opa;
 800cbde:	4ba6      	ldr	r3, [pc, #664]	; (800ce78 <lv_draw_label+0xc64>)
 800cbe0:	9a19      	ldr	r2, [sp, #100]	; 0x64
        bpp_opa_table_p = opa_table;
 800cbe2:	4fa6      	ldr	r7, [pc, #664]	; (800ce7c <lv_draw_label+0xc68>)
        prev_opa = opa;
 800cbe4:	701a      	strb	r2, [r3, #0]
        prev_bpp = bpp;
 800cbe6:	f8c8 4000 	str.w	r4, [r8]
    int32_t col_start = pos_x >= clip_area->x1 ? 0 : clip_area->x1 - pos_x;
 800cbea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    int32_t box_h = g->box_h;
 800cbec:	f8bd 1100 	ldrh.w	r1, [sp, #256]	; 0x100
    int32_t col_start = pos_x >= clip_area->x1 ? 0 : clip_area->x1 - pos_x;
 800cbf0:	f9b3 2000 	ldrsh.w	r2, [r3]
    int32_t box_h = g->box_h;
 800cbf4:	911f      	str	r1, [sp, #124]	; 0x7c
    int32_t col_start = pos_x >= clip_area->x1 ? 0 : clip_area->x1 - pos_x;
 800cbf6:	4594      	cmp	ip, r2
    int32_t box_w = g->box_w;
 800cbf8:	f8bd 30fe 	ldrh.w	r3, [sp, #254]	; 0xfe
    int32_t col_start = pos_x >= clip_area->x1 ? 0 : clip_area->x1 - pos_x;
 800cbfc:	f2c0 81d9 	blt.w	800cfb2 <lv_draw_label+0xd9e>
 800cc00:	2200      	movs	r2, #0
 800cc02:	4618      	mov	r0, r3
 800cc04:	4690      	mov	r8, r2
 800cc06:	9220      	str	r2, [sp, #128]	; 0x80
 800cc08:	9218      	str	r2, [sp, #96]	; 0x60
    int32_t col_end   = pos_x + box_w <= clip_area->x2 ? box_w : clip_area->x2 - pos_x + 1;
 800cc0a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cc0c:	eb03 010c 	add.w	r1, r3, ip
 800cc10:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800cc14:	4291      	cmp	r1, r2
 800cc16:	f340 81e1 	ble.w	800cfdc <lv_draw_label+0xdc8>
 800cc1a:	eba2 020c 	sub.w	r2, r2, ip
 800cc1e:	3201      	adds	r2, #1
 800cc20:	1a80      	subs	r0, r0, r2
 800cc22:	921e      	str	r2, [sp, #120]	; 0x78
 800cc24:	b292      	uxth	r2, r2
 800cc26:	9225      	str	r2, [sp, #148]	; 0x94
 800cc28:	fb04 f200 	mul.w	r2, r4, r0
 800cc2c:	9221      	str	r2, [sp, #132]	; 0x84
    int32_t row_start = pos_y >= clip_area->y1 ? 0 : clip_area->y1 - pos_y;
 800cc2e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cc30:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800cc32:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800cc36:	4291      	cmp	r1, r2
 800cc38:	f2c0 81c7 	blt.w	800cfca <lv_draw_label+0xdb6>
 800cc3c:	2200      	movs	r2, #0
 800cc3e:	9226      	str	r2, [sp, #152]	; 0x98
 800cc40:	9222      	str	r2, [sp, #136]	; 0x88
    int32_t row_end   = pos_y + box_h <= clip_area->y2 ? box_h : clip_area->y2 - pos_y + 1;
 800cc42:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cc44:	991f      	ldr	r1, [sp, #124]	; 0x7c
 800cc46:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800cc48:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800cc4c:	4401      	add	r1, r0
 800cc4e:	4291      	cmp	r1, r2
 800cc50:	f340 81b8 	ble.w	800cfc4 <lv_draw_label+0xdb0>
 800cc54:	1a12      	subs	r2, r2, r0
 800cc56:	3201      	adds	r2, #1
 800cc58:	9216      	str	r2, [sp, #88]	; 0x58
    col_bit = bit_ofs & 0x7; /* "& 0x7" equals to "% 8" just faster */
 800cc5a:	9313      	str	r3, [sp, #76]	; 0x4c
    map_p += bit_ofs >> 3;
 800cc5c:	eb0e 03d8 	add.w	r3, lr, r8, lsr #3
    col_bit = bit_ofs & 0x7; /* "& 0x7" equals to "% 8" just faster */
 800cc60:	f008 0807 	and.w	r8, r8, #7
    map_p += bit_ofs >> 3;
 800cc64:	9323      	str	r3, [sp, #140]	; 0x8c
    lv_coord_t hor_res = lv_disp_get_hor_res(_lv_refr_get_disp_refreshing());
 800cc66:	f7fb fb85 	bl	8008374 <_lv_refr_get_disp_refreshing>
 800cc6a:	f006 fe15 	bl	8013898 <lv_disp_get_hor_res>
    uint32_t mask_buf_size = box_w * box_h > hor_res ? hor_res : box_w * box_h;
 800cc6e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800cc70:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cc72:	fb02 f203 	mul.w	r2, r2, r3
 800cc76:	4282      	cmp	r2, r0
 800cc78:	4613      	mov	r3, r2
 800cc7a:	bfa8      	it	ge
 800cc7c:	4603      	movge	r3, r0
    lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
 800cc7e:	4618      	mov	r0, r3
    uint32_t mask_buf_size = box_w * box_h > hor_res ? hor_res : box_w * box_h;
 800cc80:	931f      	str	r3, [sp, #124]	; 0x7c
    lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
 800cc82:	f008 fc51 	bl	8015528 <_lv_mem_buf_get>
    fill_area.x1 = col_start + pos_x;
 800cc86:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
    fill_area.y1 = row_start + pos_y;
 800cc8a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800cc8c:	9b26      	ldr	r3, [sp, #152]	; 0x98
    lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
 800cc8e:	9013      	str	r0, [sp, #76]	; 0x4c
    fill_area.x1 = col_start + pos_x;
 800cc90:	9820      	ldr	r0, [sp, #128]	; 0x80
    fill_area.y1 = row_start + pos_y;
 800cc92:	4413      	add	r3, r2
    fill_area.x2 = col_end  + pos_x - 1;
 800cc94:	1e4a      	subs	r2, r1, #1
    fill_area.x1 = col_start + pos_x;
 800cc96:	4401      	add	r1, r0
    fill_area.x2 = col_end  + pos_x - 1;
 800cc98:	9825      	ldr	r0, [sp, #148]	; 0x94
    fill_area.y1 = row_start + pos_y;
 800cc9a:	b21b      	sxth	r3, r3
    fill_area.x2 = col_end  + pos_x - 1;
 800cc9c:	4410      	add	r0, r2
    fill_area.x1 = col_start + pos_x;
 800cc9e:	f8ad 10e8 	strh.w	r1, [sp, #232]	; 0xe8
    fill_area.y1 = row_start + pos_y;
 800cca2:	f8ad 30ea 	strh.w	r3, [sp, #234]	; 0xea
    fill_area.y2 = fill_area.y1;
 800cca6:	f8ad 30ee 	strh.w	r3, [sp, #238]	; 0xee
    fill_area.x2 = col_end  + pos_x - 1;
 800ccaa:	f8ad 00ec 	strh.w	r0, [sp, #236]	; 0xec
    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
 800ccae:	f001 fe31 	bl	800e914 <lv_draw_mask_get_cnt>
    for(row = row_start ; row < row_end; row++) {
 800ccb2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ccb4:	9916      	ldr	r1, [sp, #88]	; 0x58
    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
 800ccb6:	9020      	str	r0, [sp, #128]	; 0x80
    for(row = row_start ; row < row_end; row++) {
 800ccb8:	428b      	cmp	r3, r1
 800ccba:	f280 81f6 	bge.w	800d0aa <lv_draw_label+0xe96>
 800ccbe:	9918      	ldr	r1, [sp, #96]	; 0x60
    int32_t mask_p = 0;
 800ccc0:	f04f 0e00 	mov.w	lr, #0
 800ccc4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800ccc6:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
 800ccca:	46b9      	mov	r9, r7
 800cccc:	1a52      	subs	r2, r2, r1
 800ccce:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800ccd0:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 800ccd2:	9211      	str	r2, [sp, #68]	; 0x44
 800ccd4:	188a      	adds	r2, r1, r2
 800ccd6:	f8cd a08c 	str.w	sl, [sp, #140]	; 0x8c
 800ccda:	469a      	mov	sl, r3
 800ccdc:	9222      	str	r2, [sp, #136]	; 0x88
        for(col = col_start; col < col_end; col++) {
 800ccde:	9b18      	ldr	r3, [sp, #96]	; 0x60
        bitmask = bitmask_init >> col_bit;
 800cce0:	fa26 f008 	lsr.w	r0, r6, r8
        for(col = col_start; col < col_end; col++) {
 800cce4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800cce6:	4293      	cmp	r3, r2
 800cce8:	f280 80bd 	bge.w	800ce66 <lv_draw_label+0xc52>
 800ccec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ccee:	eb03 010e 	add.w	r1, r3, lr
 800ccf2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ccf4:	eb03 0c0e 	add.w	ip, r3, lr
            letter_px = (*map_p & bitmask) >> (col_bit_max - col_bit);
 800ccf8:	783a      	ldrb	r2, [r7, #0]
 800ccfa:	eba5 0308 	sub.w	r3, r5, r8
 800ccfe:	4002      	ands	r2, r0
                bitmask = bitmask >> bpp;
 800cd00:	40e0      	lsrs	r0, r4
            letter_px = (*map_p & bitmask) >> (col_bit_max - col_bit);
 800cd02:	fa22 f303 	lsr.w	r3, r2, r3
            if(letter_px) {
 800cd06:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
                mask_buf[mask_p] = bpp_opa_table_p[letter_px];
 800cd0a:	bf18      	it	ne
 800cd0c:	f819 3003 	ldrbne.w	r3, [r9, r3]
            if(col_bit < col_bit_max) {
 800cd10:	45a8      	cmp	r8, r5
                col_bit += bpp;
 800cd12:	44a0      	add	r8, r4
                mask_buf[mask_p] = 0;
 800cd14:	700b      	strb	r3, [r1, #0]
            if(col_bit < col_bit_max) {
 800cd16:	d303      	bcc.n	800cd20 <lv_draw_label+0xb0c>
                map_p++;
 800cd18:	3701      	adds	r7, #1
                bitmask = bitmask_init;
 800cd1a:	4630      	mov	r0, r6
                col_bit = 0;
 800cd1c:	f04f 0800 	mov.w	r8, #0
        for(col = col_start; col < col_end; col++) {
 800cd20:	3101      	adds	r1, #1
 800cd22:	458c      	cmp	ip, r1
 800cd24:	d1e8      	bne.n	800ccf8 <lv_draw_label+0xae4>
 800cd26:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cd28:	4473      	add	r3, lr
 800cd2a:	930c      	str	r3, [sp, #48]	; 0x30
        if(other_mask_cnt) {
 800cd2c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d15c      	bne.n	800cdec <lv_draw_label+0xbd8>
        if((uint32_t) mask_p + (col_end - col_start) < mask_buf_size) {
 800cd32:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cd34:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cd36:	991f      	ldr	r1, [sp, #124]	; 0x7c
 800cd38:	18d3      	adds	r3, r2, r3
 800cd3a:	4299      	cmp	r1, r3
 800cd3c:	d93f      	bls.n	800cdbe <lv_draw_label+0xbaa>
            fill_area.y2 ++;
 800cd3e:	f8bd 30ee 	ldrh.w	r3, [sp, #238]	; 0xee
 800cd42:	4696      	mov	lr, r2
 800cd44:	3301      	adds	r3, #1
 800cd46:	b21b      	sxth	r3, r3
 800cd48:	f8ad 30ee 	strh.w	r3, [sp, #238]	; 0xee
        col_bit += col_bit_row_ofs;
 800cd4c:	9a21      	ldr	r2, [sp, #132]	; 0x84
    for(row = row_start ; row < row_end; row++) {
 800cd4e:	f10a 0a01 	add.w	sl, sl, #1
        col_bit += col_bit_row_ofs;
 800cd52:	4490      	add	r8, r2
    for(row = row_start ; row < row_end; row++) {
 800cd54:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800cd56:	4592      	cmp	sl, r2
        map_p += (col_bit >> 3);
 800cd58:	eb07 07d8 	add.w	r7, r7, r8, lsr #3
        col_bit = col_bit & 0x7;
 800cd5c:	f008 0807 	and.w	r8, r8, #7
    for(row = row_start ; row < row_end; row++) {
 800cd60:	d1bd      	bne.n	800ccde <lv_draw_label+0xaca>
 800cd62:	f8dd 9094 	ldr.w	r9, [sp, #148]	; 0x94
 800cd66:	f8dd a08c 	ldr.w	sl, [sp, #140]	; 0x8c
    if(fill_area.y1 != fill_area.y2) {
 800cd6a:	f9bd 20ea 	ldrsh.w	r2, [sp, #234]	; 0xea
 800cd6e:	429a      	cmp	r2, r3
 800cd70:	d00e      	beq.n	800cd90 <lv_draw_label+0xb7c>
        _lv_blend_fill(clip_area, &fill_area,
 800cd72:	20ff      	movs	r0, #255	; 0xff
 800cd74:	2102      	movs	r1, #2
        fill_area.y2--;
 800cd76:	1e5c      	subs	r4, r3, #1
        _lv_blend_fill(clip_area, &fill_area,
 800cd78:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cd7a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cd7c:	9302      	str	r3, [sp, #8]
 800cd7e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
        fill_area.y2--;
 800cd80:	f8ad 40ee 	strh.w	r4, [sp, #238]	; 0xee
        _lv_blend_fill(clip_area, &fill_area,
 800cd84:	e9cd 1000 	strd	r1, r0, [sp]
 800cd88:	a93a      	add	r1, sp, #232	; 0xe8
 800cd8a:	980e      	ldr	r0, [sp, #56]	; 0x38
 800cd8c:	f7fc ffe6 	bl	8009d5c <_lv_blend_fill>
    _lv_mem_buf_release(mask_buf);
 800cd90:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800cd92:	f008 f8a1 	bl	8014ed8 <_lv_mem_buf_release>
 800cd96:	e545      	b.n	800c824 <lv_draw_label+0x610>
    if(bpp == 3) bpp = 4;
 800cd98:	2507      	movs	r5, #7
 800cd9a:	2401      	movs	r4, #1
 800cd9c:	2302      	movs	r3, #2
 800cd9e:	2680      	movs	r6, #128	; 0x80
 800cda0:	4f37      	ldr	r7, [pc, #220]	; (800ce80 <lv_draw_label+0xc6c>)
 800cda2:	e700      	b.n	800cba6 <lv_draw_label+0x992>
 800cda4:	2504      	movs	r5, #4
            shades = 16;
 800cda6:	2310      	movs	r3, #16
            bitmask_init  = 0xF0;
 800cda8:	26f0      	movs	r6, #240	; 0xf0
            bpp_opa_table_p = _lv_bpp4_opa_table;
 800cdaa:	4f36      	ldr	r7, [pc, #216]	; (800ce84 <lv_draw_label+0xc70>)
    if(bpp == 3) bpp = 4;
 800cdac:	462c      	mov	r4, r5
 800cdae:	e6fa      	b.n	800cba6 <lv_draw_label+0x992>
            break;       /*No opa table, pixel value will be used directly*/
 800cdb0:	2500      	movs	r5, #0
 800cdb2:	2408      	movs	r4, #8
            shades = 256;
 800cdb4:	f44f 7380 	mov.w	r3, #256	; 0x100
            bitmask_init  = 0xFF;
 800cdb8:	26ff      	movs	r6, #255	; 0xff
            bpp_opa_table_p = _lv_bpp8_opa_table;
 800cdba:	4f33      	ldr	r7, [pc, #204]	; (800ce88 <lv_draw_label+0xc74>)
            break;       /*No opa table, pixel value will be used directly*/
 800cdbc:	e6f3      	b.n	800cba6 <lv_draw_label+0x992>
            _lv_blend_fill(clip_area, &fill_area,
 800cdbe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cdc0:	2202      	movs	r2, #2
 800cdc2:	a93a      	add	r1, sp, #232	; 0xe8
 800cdc4:	980e      	ldr	r0, [sp, #56]	; 0x38
 800cdc6:	9302      	str	r3, [sp, #8]
 800cdc8:	23ff      	movs	r3, #255	; 0xff
 800cdca:	9200      	str	r2, [sp, #0]
 800cdcc:	9301      	str	r3, [sp, #4]
 800cdce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cdd0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cdd2:	f7fc ffc3 	bl	8009d5c <_lv_blend_fill>
            fill_area.y1 = fill_area.y2 + 1;
 800cdd6:	f8bd 30ee 	ldrh.w	r3, [sp, #238]	; 0xee
            mask_p = 0;
 800cdda:	f04f 0e00 	mov.w	lr, #0
            fill_area.y1 = fill_area.y2 + 1;
 800cdde:	3301      	adds	r3, #1
 800cde0:	b21b      	sxth	r3, r3
 800cde2:	f8ad 30ea 	strh.w	r3, [sp, #234]	; 0xea
            fill_area.y2 = fill_area.y1;
 800cde6:	f8ad 30ee 	strh.w	r3, [sp, #238]	; 0xee
            mask_p = 0;
 800cdea:	e7af      	b.n	800cd4c <lv_draw_label+0xb38>
 800cdec:	f8bd 30ec 	ldrh.w	r3, [sp, #236]	; 0xec
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf + mask_p_start, fill_area.x1, fill_area.y2,
 800cdf0:	f9bd 10e8 	ldrsh.w	r1, [sp, #232]	; 0xe8
 800cdf4:	3301      	adds	r3, #1
 800cdf6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800cdf8:	1a5b      	subs	r3, r3, r1
 800cdfa:	eb02 000e 	add.w	r0, r2, lr
 800cdfe:	f9bd 20ee 	ldrsh.w	r2, [sp, #238]	; 0xee
 800ce02:	b21b      	sxth	r3, r3
 800ce04:	ee09 0a10 	vmov	s18, r0
 800ce08:	f001 fca0 	bl	800e74c <lv_draw_mask_apply>
            if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
 800ce0c:	2800      	cmp	r0, #0
 800ce0e:	d190      	bne.n	800cd32 <lv_draw_label+0xb1e>
 800ce10:	f8bd 10ec 	ldrh.w	r1, [sp, #236]	; 0xec
                _lv_memset_00(mask_buf + mask_p_start, lv_area_get_width(&fill_area));
 800ce14:	ee19 0a10 	vmov	r0, s18
 800ce18:	f8bd 30e8 	ldrh.w	r3, [sp, #232]	; 0xe8
 800ce1c:	3101      	adds	r1, #1
 800ce1e:	1ac9      	subs	r1, r1, r3
 800ce20:	b209      	sxth	r1, r1
 800ce22:	f008 fca9 	bl	8015778 <_lv_memset_00>
 800ce26:	e784      	b.n	800cd32 <lv_draw_label+0xb1e>
        if(LV_MATH_ABS(hint->coord_y - coords->y1) > LV_LABEL_HINT_UPDATE_TH - 2 * line_height) {
 800ce28:	68a9      	ldr	r1, [r5, #8]
 800ce2a:	f5c6 7000 	rsb	r0, r6, #512	; 0x200
 800ce2e:	1acb      	subs	r3, r1, r3
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	bfb8      	it	lt
 800ce34:	425b      	neglt	r3, r3
 800ce36:	ebb3 0f40 	cmp.w	r3, r0, lsl #1
 800ce3a:	dd07      	ble.n	800ce4c <lv_draw_label+0xc38>
            hint->line_start = -1;
 800ce3c:	f04f 33ff 	mov.w	r3, #4294967295
    uint32_t line_start     = 0;
 800ce40:	2100      	movs	r1, #0
            hint->line_start = -1;
 800ce42:	9809      	ldr	r0, [sp, #36]	; 0x24
    uint32_t line_start     = 0;
 800ce44:	910b      	str	r1, [sp, #44]	; 0x2c
            hint->line_start = -1;
 800ce46:	602b      	str	r3, [r5, #0]
    if(hint && last_line_start >= 0) {
 800ce48:	f7ff ba30 	b.w	800c2ac <lv_draw_label+0x98>
        last_line_start = hint->line_start;
 800ce4c:	682b      	ldr	r3, [r5, #0]
    if(hint && last_line_start >= 0) {
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	f6ff aa29 	blt.w	800c2a6 <lv_draw_label+0x92>
        pos.y += hint->y;
 800ce54:	6869      	ldr	r1, [r5, #4]
        line_start = last_line_start;
 800ce56:	930b      	str	r3, [sp, #44]	; 0x2c
        pos.y += hint->y;
 800ce58:	440c      	add	r4, r1
 800ce5a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ce5c:	18c8      	adds	r0, r1, r3
 800ce5e:	b223      	sxth	r3, r4
 800ce60:	9314      	str	r3, [sp, #80]	; 0x50
 800ce62:	f7ff ba23 	b.w	800c2ac <lv_draw_label+0x98>
        for(col = col_start; col < col_end; col++) {
 800ce66:	f8cd e030 	str.w	lr, [sp, #48]	; 0x30
 800ce6a:	e75f      	b.n	800cd2c <lv_draw_label+0xb18>
 800ce6c:	4614      	mov	r4, r2
        for(col = col_start; col < col_end; col++) {
 800ce6e:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 800ce70:	e49c      	b.n	800c7ac <lv_draw_label+0x598>
 800ce72:	bf00      	nop
 800ce74:	0801e204 	.word	0x0801e204
 800ce78:	2001812c 	.word	0x2001812c
 800ce7c:	20018028 	.word	0x20018028
 800ce80:	0801e200 	.word	0x0801e200
 800ce84:	0801e208 	.word	0x0801e208
 800ce88:	0801e218 	.word	0x0801e218
 800ce8c:	20018128 	.word	0x20018128
        line_width = _lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
 800ce90:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ce92:	462c      	mov	r4, r5
 800ce94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ce96:	9300      	str	r3, [sp, #0]
 800ce98:	440a      	add	r2, r1
 800ce9a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800ce9e:	1a61      	subs	r1, r4, r1
 800cea0:	4610      	mov	r0, r2
 800cea2:	4615      	mov	r5, r2
 800cea4:	4652      	mov	r2, sl
 800cea6:	f009 f9b3 	bl	8016210 <_lv_txt_get_width>
 800ceaa:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800ceac:	889a      	ldrh	r2, [r3, #4]
 800ceae:	881b      	ldrh	r3, [r3, #0]
 800ceb0:	3201      	adds	r2, #1
 800ceb2:	1ad2      	subs	r2, r2, r3
        pos.x += (lv_area_get_width(coords) - line_width) / 2;
 800ceb4:	b213      	sxth	r3, r2
 800ceb6:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800ceb8:	1a1b      	subs	r3, r3, r0
 800ceba:	bf48      	it	mi
 800cebc:	3301      	addmi	r3, #1
 800cebe:	eb02 0363 	add.w	r3, r2, r3, asr #1
 800cec2:	b21b      	sxth	r3, r3
 800cec4:	9328      	str	r3, [sp, #160]	; 0xa0
 800cec6:	f7ff ba43 	b.w	800c350 <lv_draw_label+0x13c>
        lv_draw_line_dsc_init(&line_dsc);
 800ceca:	a83c      	add	r0, sp, #240	; 0xf0
 800cecc:	f000 f8f0 	bl	800d0b0 <lv_draw_line_dsc_init>
        line_dsc.width = font->underline_thickness ? font->underline_thickness : 1;
 800ced0:	f99a 300e 	ldrsb.w	r3, [sl, #14]
        line_dsc.blend_mode = dsc->blend_mode;
 800ced4:	f89d 20fb 	ldrb.w	r2, [sp, #251]	; 0xfb
        line_dsc.width = font->underline_thickness ? font->underline_thickness : 1;
 800ced8:	2b00      	cmp	r3, #0
        line_dsc.blend_mode = dsc->blend_mode;
 800ceda:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
        line_dsc.width = font->underline_thickness ? font->underline_thickness : 1;
 800cede:	bf08      	it	eq
 800cee0:	2301      	moveq	r3, #1
        line_dsc.blend_mode = dsc->blend_mode;
 800cee2:	f361 0201 	bfi	r2, r1, #0, #2
        line_dsc.color = dsc->color;
 800cee6:	6839      	ldr	r1, [r7, #0]
        line_dsc.width = font->underline_thickness ? font->underline_thickness : 1;
 800cee8:	f8ad 30f4 	strh.w	r3, [sp, #244]	; 0xf4
        line_dsc.opa = dsc->opa;
 800ceec:	7c3b      	ldrb	r3, [r7, #16]
        line_dsc.blend_mode = dsc->blend_mode;
 800ceee:	f88d 20fb 	strb.w	r2, [sp, #251]	; 0xfb
        line_dsc.color = dsc->color;
 800cef2:	913c      	str	r1, [sp, #240]	; 0xf0
        line_dsc.opa = dsc->opa;
 800cef4:	f88d 30fa 	strb.w	r3, [sp, #250]	; 0xfa
        line_dsc.blend_mode = dsc->blend_mode;
 800cef8:	f7ff ba39 	b.w	800c36e <lv_draw_label+0x15a>
        *d8 = *s8;
 800cefc:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800cefe:	f81a 0003 	ldrb.w	r0, [sl, r3]
                            _lv_memcpy_small(buf, &bidi_txt[par_start], LABEL_RECOLOR_PAR_LENGTH);
 800cf02:	eb0a 0203 	add.w	r2, sl, r3
 */
static uint8_t hex_char_to_num(char hex)
{
    uint8_t result = 0;

    if(hex >= '0' && hex <= '9') {
 800cf06:	f1a0 0530 	sub.w	r5, r0, #48	; 0x30
 800cf0a:	7854      	ldrb	r4, [r2, #1]
 800cf0c:	7893      	ldrb	r3, [r2, #2]
 800cf0e:	b2ed      	uxtb	r5, r5
 800cf10:	78d6      	ldrb	r6, [r2, #3]
 800cf12:	7917      	ldrb	r7, [r2, #4]
 800cf14:	2d09      	cmp	r5, #9
 800cf16:	f892 c005 	ldrb.w	ip, [r2, #5]
 800cf1a:	d873      	bhi.n	800d004 <lv_draw_label+0xdf0>
 800cf1c:	012d      	lsls	r5, r5, #4
 800cf1e:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
 800cf22:	b2d2      	uxtb	r2, r2
 800cf24:	2a09      	cmp	r2, #9
 800cf26:	f200 8096 	bhi.w	800d056 <lv_draw_label+0xe42>
 800cf2a:	4415      	add	r5, r2
 800cf2c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800cf30:	b2d2      	uxtb	r2, r2
 800cf32:	2a09      	cmp	r2, #9
 800cf34:	f200 8083 	bhi.w	800d03e <lv_draw_label+0xe2a>
 800cf38:	0113      	lsls	r3, r2, #4
 800cf3a:	f1a6 0230 	sub.w	r2, r6, #48	; 0x30
 800cf3e:	b2d2      	uxtb	r2, r2
 800cf40:	2a09      	cmp	r2, #9
 800cf42:	f200 8095 	bhi.w	800d070 <lv_draw_label+0xe5c>
 800cf46:	4413      	add	r3, r2
 800cf48:	f1a7 0230 	sub.w	r2, r7, #48	; 0x30
 800cf4c:	b2d2      	uxtb	r2, r2
 800cf4e:	2a09      	cmp	r2, #9
 800cf50:	d90b      	bls.n	800cf6a <lv_draw_label+0xd56>
        result = hex - '0';
    }
    else {
        if(hex >= 'a') hex -= 'a' - 'A'; /*Convert to upper case*/
 800cf52:	2f60      	cmp	r7, #96	; 0x60
 800cf54:	d901      	bls.n	800cf5a <lv_draw_label+0xd46>
 800cf56:	3f20      	subs	r7, #32
 800cf58:	b2ff      	uxtb	r7, r7

        switch(hex) {
 800cf5a:	f1a7 0241 	sub.w	r2, r7, #65	; 0x41
 800cf5e:	2a05      	cmp	r2, #5
 800cf60:	f200 8095 	bhi.w	800d08e <lv_draw_label+0xe7a>
 800cf64:	f1a7 0237 	sub.w	r2, r7, #55	; 0x37
 800cf68:	b2d2      	uxtb	r2, r2
 800cf6a:	0112      	lsls	r2, r2, #4
    if(hex >= '0' && hex <= '9') {
 800cf6c:	f1ac 0030 	sub.w	r0, ip, #48	; 0x30
 800cf70:	b2c0      	uxtb	r0, r0
 800cf72:	2809      	cmp	r0, #9
 800cf74:	d853      	bhi.n	800d01e <lv_draw_label+0xe0a>
 800cf76:	4402      	add	r2, r0
#define LV_COLOR_MAKE(r8, g8, b8) (_LV_COLOR_MAKE_TYPE_HELPER{{b8, g8, r8, 0xff}}) /*Fix 0xff alpha*/
#endif

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
    return LV_COLOR_MAKE(r, g, b);
 800cf78:	9835      	ldr	r0, [sp, #212]	; 0xd4
 800cf7a:	f362 0007 	bfi	r0, r2, #0, #8
 800cf7e:	4602      	mov	r2, r0
                        cmd_state = CMD_STATE_IN; /*After the parameter the text is in the command*/
 800cf80:	2002      	movs	r0, #2
 800cf82:	f363 220f 	bfi	r2, r3, #8, #8
 800cf86:	9007      	str	r0, [sp, #28]
 800cf88:	f365 4217 	bfi	r2, r5, #16, #8
 800cf8c:	f042 437f 	orr.w	r3, r2, #4278190080	; 0xff000000
 800cf90:	9335      	str	r3, [sp, #212]	; 0xd4
 800cf92:	9312      	str	r3, [sp, #72]	; 0x48
 800cf94:	e450      	b.n	800c838 <lv_draw_label+0x624>
    int32_t row_end   = pos_y + box_h <= clip_area->y2 ? box_h : clip_area->y2 - pos_y + 1;
 800cf96:	942c      	str	r4, [sp, #176]	; 0xb0
 800cf98:	f7ff bb3c 	b.w	800c614 <lv_draw_label+0x400>
    int32_t col_start = pos_x >= clip_area->x1 ? 0 : (clip_area->x1 - pos_x) * 3;
 800cf9c:	1a9b      	subs	r3, r3, r2
 800cf9e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800cfa2:	9320      	str	r3, [sp, #128]	; 0x80
 800cfa4:	b29e      	uxth	r6, r3
 800cfa6:	922f      	str	r2, [sp, #188]	; 0xbc
 800cfa8:	9226      	str	r2, [sp, #152]	; 0x98
 800cfaa:	fb02 f208 	mul.w	r2, r2, r8
 800cfae:	f7ff bb06 	b.w	800c5be <lv_draw_label+0x3aa>
    int32_t col_start = pos_x >= clip_area->x1 ? 0 : clip_area->x1 - pos_x;
 800cfb2:	eba2 020c 	sub.w	r2, r2, ip
 800cfb6:	b291      	uxth	r1, r2
 800cfb8:	fb04 f802 	mul.w	r8, r4, r2
 800cfbc:	1898      	adds	r0, r3, r2
 800cfbe:	9218      	str	r2, [sp, #96]	; 0x60
 800cfc0:	9120      	str	r1, [sp, #128]	; 0x80
 800cfc2:	e622      	b.n	800cc0a <lv_draw_label+0x9f6>
    int32_t row_end   = pos_y + box_h <= clip_area->y2 ? box_h : clip_area->y2 - pos_y + 1;
 800cfc4:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800cfc6:	9216      	str	r2, [sp, #88]	; 0x58
 800cfc8:	e647      	b.n	800cc5a <lv_draw_label+0xa46>
    int32_t row_start = pos_y >= clip_area->y1 ? 0 : clip_area->y1 - pos_y;
 800cfca:	1a51      	subs	r1, r2, r1
    int32_t width_bit = box_w * bpp; /*Letter width in bits*/
 800cfcc:	fb04 f203 	mul.w	r2, r4, r3
 800cfd0:	fb01 8802 	mla	r8, r1, r2, r8
 800cfd4:	b28a      	uxth	r2, r1
    int32_t row_start = pos_y >= clip_area->y1 ? 0 : clip_area->y1 - pos_y;
 800cfd6:	9122      	str	r1, [sp, #136]	; 0x88
 800cfd8:	9226      	str	r2, [sp, #152]	; 0x98
 800cfda:	e632      	b.n	800cc42 <lv_draw_label+0xa2e>
 800cfdc:	f8cd 8084 	str.w	r8, [sp, #132]	; 0x84
 800cfe0:	9325      	str	r3, [sp, #148]	; 0x94
    int32_t col_end   = pos_x + box_w <= clip_area->x2 ? box_w : clip_area->x2 - pos_x + 1;
 800cfe2:	931e      	str	r3, [sp, #120]	; 0x78
 800cfe4:	e623      	b.n	800cc2e <lv_draw_label+0xa1a>
    int32_t row_start = pos_y >= clip_area->y1 ? 0 : clip_area->y1 - pos_y;
 800cfe6:	1a59      	subs	r1, r3, r1
    int32_t width_bit = box_w * bpp; /*Letter width in bits*/
 800cfe8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800cfea:	fb08 f303 	mul.w	r3, r8, r3
    int32_t row_start = pos_y >= clip_area->y1 ? 0 : clip_area->y1 - pos_y;
 800cfee:	912a      	str	r1, [sp, #168]	; 0xa8
 800cff0:	fb01 2203 	mla	r2, r1, r3, r2
 800cff4:	b28b      	uxth	r3, r1
 800cff6:	9325      	str	r3, [sp, #148]	; 0x94
 800cff8:	f7ff bb01 	b.w	800c5fe <lv_draw_label+0x3ea>
    int32_t col_end   = pos_x + box_w / 3 <= clip_area->x2 ? box_w : (clip_area->x2 - pos_x + 1) * 3;
 800cffc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800cffe:	9316      	str	r3, [sp, #88]	; 0x58
 800d000:	f7ff baf3 	b.w	800c5ea <lv_draw_label+0x3d6>
        if(hex >= 'a') hex -= 'a' - 'A'; /*Convert to upper case*/
 800d004:	2860      	cmp	r0, #96	; 0x60
 800d006:	d901      	bls.n	800d00c <lv_draw_label+0xdf8>
 800d008:	3820      	subs	r0, #32
 800d00a:	b2c0      	uxtb	r0, r0
        switch(hex) {
 800d00c:	f1a0 0241 	sub.w	r2, r0, #65	; 0x41
 800d010:	2a05      	cmp	r2, #5
 800d012:	d83e      	bhi.n	800d092 <lv_draw_label+0xe7e>
 800d014:	f1a0 0237 	sub.w	r2, r0, #55	; 0x37
 800d018:	b2d2      	uxtb	r2, r2
 800d01a:	0115      	lsls	r5, r2, #4
 800d01c:	e77f      	b.n	800cf1e <lv_draw_label+0xd0a>
        if(hex >= 'a') hex -= 'a' - 'A'; /*Convert to upper case*/
 800d01e:	f1bc 0f60 	cmp.w	ip, #96	; 0x60
 800d022:	d903      	bls.n	800d02c <lv_draw_label+0xe18>
 800d024:	f1ac 0c20 	sub.w	ip, ip, #32
 800d028:	fa5f fc8c 	uxtb.w	ip, ip
        switch(hex) {
 800d02c:	f1ac 0041 	sub.w	r0, ip, #65	; 0x41
 800d030:	2805      	cmp	r0, #5
 800d032:	d8a1      	bhi.n	800cf78 <lv_draw_label+0xd64>
 800d034:	f1ac 0c37 	sub.w	ip, ip, #55	; 0x37
 800d038:	fa52 f28c 	uxtab	r2, r2, ip
 800d03c:	e79c      	b.n	800cf78 <lv_draw_label+0xd64>
        if(hex >= 'a') hex -= 'a' - 'A'; /*Convert to upper case*/
 800d03e:	2b60      	cmp	r3, #96	; 0x60
 800d040:	d901      	bls.n	800d046 <lv_draw_label+0xe32>
 800d042:	3b20      	subs	r3, #32
 800d044:	b2db      	uxtb	r3, r3
        switch(hex) {
 800d046:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800d04a:	2a05      	cmp	r2, #5
 800d04c:	d81d      	bhi.n	800d08a <lv_draw_label+0xe76>
 800d04e:	3b37      	subs	r3, #55	; 0x37
 800d050:	b2db      	uxtb	r3, r3
 800d052:	011b      	lsls	r3, r3, #4
 800d054:	e771      	b.n	800cf3a <lv_draw_label+0xd26>
        if(hex >= 'a') hex -= 'a' - 'A'; /*Convert to upper case*/
 800d056:	2c60      	cmp	r4, #96	; 0x60
 800d058:	d901      	bls.n	800d05e <lv_draw_label+0xe4a>
 800d05a:	3c20      	subs	r4, #32
 800d05c:	b2e4      	uxtb	r4, r4
        switch(hex) {
 800d05e:	f1a4 0241 	sub.w	r2, r4, #65	; 0x41
 800d062:	2a05      	cmp	r2, #5
 800d064:	f63f af62 	bhi.w	800cf2c <lv_draw_label+0xd18>
 800d068:	3c37      	subs	r4, #55	; 0x37
 800d06a:	fa55 f584 	uxtab	r5, r5, r4
 800d06e:	e75d      	b.n	800cf2c <lv_draw_label+0xd18>
        if(hex >= 'a') hex -= 'a' - 'A'; /*Convert to upper case*/
 800d070:	2e60      	cmp	r6, #96	; 0x60
 800d072:	d901      	bls.n	800d078 <lv_draw_label+0xe64>
 800d074:	3e20      	subs	r6, #32
 800d076:	b2f6      	uxtb	r6, r6
        switch(hex) {
 800d078:	f1a6 0241 	sub.w	r2, r6, #65	; 0x41
 800d07c:	2a05      	cmp	r2, #5
 800d07e:	f63f af63 	bhi.w	800cf48 <lv_draw_label+0xd34>
 800d082:	3e37      	subs	r6, #55	; 0x37
 800d084:	fa53 f386 	uxtab	r3, r3, r6
 800d088:	e75e      	b.n	800cf48 <lv_draw_label+0xd34>
            uint32_t logical_char_pos = 0;
 800d08a:	2300      	movs	r3, #0
 800d08c:	e755      	b.n	800cf3a <lv_draw_label+0xd26>
 800d08e:	2200      	movs	r2, #0
 800d090:	e76c      	b.n	800cf6c <lv_draw_label+0xd58>
 800d092:	2500      	movs	r5, #0
 800d094:	e743      	b.n	800cf1e <lv_draw_label+0xd0a>
        if(prev_opa != opa || prev_bpp != bpp) {
 800d096:	f8d8 2000 	ldr.w	r2, [r8]
 800d09a:	42a2      	cmp	r2, r4
 800d09c:	f47f ad8d 	bne.w	800cbba <lv_draw_label+0x9a6>
 800d0a0:	e59d      	b.n	800cbde <lv_draw_label+0x9ca>
 800d0a2:	f9bd 30ee 	ldrsh.w	r3, [sp, #238]	; 0xee
 800d0a6:	f7ff bba4 	b.w	800c7f2 <lv_draw_label+0x5de>
 800d0aa:	f9bd 30ee 	ldrsh.w	r3, [sp, #238]	; 0xee
 800d0ae:	e65c      	b.n	800cd6a <lv_draw_label+0xb56>

0800d0b0 <lv_draw_line_dsc_init>:
 *   GLOBAL FUNCTIONS
 **********************/

LV_ATTRIBUTE_FAST_MEM void lv_draw_line_dsc_init(lv_draw_line_dsc_t * dsc)
{
    _lv_memset_00(dsc, sizeof(lv_draw_line_dsc_t));
 800d0b0:	210c      	movs	r1, #12
{
 800d0b2:	b510      	push	{r4, lr}
 800d0b4:	4604      	mov	r4, r0
    _lv_memset_00(dsc, sizeof(lv_draw_line_dsc_t));
 800d0b6:	f008 fb5f 	bl	8015778 <_lv_memset_00>
    dsc->width = 1;
 800d0ba:	2101      	movs	r1, #1
    dsc->opa = LV_OPA_COVER;
 800d0bc:	22ff      	movs	r2, #255	; 0xff
    dsc->color = LV_COLOR_BLACK;
 800d0be:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
    dsc->width = 1;
 800d0c2:	80a1      	strh	r1, [r4, #4]
    dsc->opa = LV_OPA_COVER;
 800d0c4:	72a2      	strb	r2, [r4, #10]
    dsc->color = LV_COLOR_BLACK;
 800d0c6:	6023      	str	r3, [r4, #0]
}
 800d0c8:	bd10      	pop	{r4, pc}
 800d0ca:	bf00      	nop

0800d0cc <lv_draw_line>:
 * @param clip the line will be drawn only in this area
 * @param dsc pointer to an initialized `lv_draw_line_dsc_t` variable
 */
LV_ATTRIBUTE_FAST_MEM void lv_draw_line(const lv_point_t * point1, const lv_point_t * point2, const lv_area_t * clip,
                                        const lv_draw_line_dsc_t * dsc)
{
 800d0cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0d0:	461c      	mov	r4, r3
    if(dsc->width == 0) return;
 800d0d2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
{
 800d0d6:	ed2d 8b04 	vpush	{d8-d9}
 800d0da:	b0cf      	sub	sp, #316	; 0x13c
 800d0dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d0e0:	9206      	str	r2, [sp, #24]
    if(dsc->width == 0) return;
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	f000 81b0 	beq.w	800d448 <lv_draw_line+0x37c>
    if(dsc->opa <= LV_OPA_MIN) return;
 800d0e8:	7aa2      	ldrb	r2, [r4, #10]
 800d0ea:	2a02      	cmp	r2, #2
 800d0ec:	f240 81ac 	bls.w	800d448 <lv_draw_line+0x37c>

    if(point1->x == point2->x && point1->y == point2->y) return;
 800d0f0:	f9b0 2000 	ldrsh.w	r2, [r0]
 800d0f4:	f9b1 5000 	ldrsh.w	r5, [r1]
 800d0f8:	42aa      	cmp	r2, r5
 800d0fa:	f000 81aa 	beq.w	800d452 <lv_draw_line+0x386>
 800d0fe:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
 800d102:	f9b1 1002 	ldrsh.w	r1, [r1, #2]

    lv_area_t clip_line;
    clip_line.x1 = LV_MATH_MIN(point1->x, point2->x) - dsc->width / 2;
 800d106:	2b00      	cmp	r3, #0
 800d108:	bfb8      	it	lt
 800d10a:	3301      	addlt	r3, #1
 800d10c:	f3c3 034f 	ubfx	r3, r3, #1, #16
 800d110:	42aa      	cmp	r2, r5
 800d112:	bfd4      	ite	le
 800d114:	ebc3 0602 	rsble	r6, r3, r2
 800d118:	ebc3 0605 	rsbgt	r6, r3, r5
    clip_line.x2 = LV_MATH_MAX(point1->x, point2->x) + dsc->width / 2;
    clip_line.y1 = LV_MATH_MIN(point1->y, point2->y) - dsc->width / 2;
 800d11c:	4288      	cmp	r0, r1
 800d11e:	bfd4      	ite	le
 800d120:	ebc3 0700 	rsble	r7, r3, r0
 800d124:	ebc3 0701 	rsbgt	r7, r3, r1
    clip_line.x2 = LV_MATH_MAX(point1->x, point2->x) + dsc->width / 2;
 800d128:	42aa      	cmp	r2, r5
 800d12a:	bfac      	ite	ge
 800d12c:	189d      	addge	r5, r3, r2
 800d12e:	195d      	addlt	r5, r3, r5
    clip_line.y2 = LV_MATH_MAX(point1->y, point2->y) + dsc->width / 2;
 800d130:	4288      	cmp	r0, r1
 800d132:	bfac      	ite	ge
 800d134:	181b      	addge	r3, r3, r0
 800d136:	185b      	addlt	r3, r3, r1

    bool is_common;
    is_common = _lv_area_intersect(&clip_line, &clip_line, clip);
 800d138:	a90d      	add	r1, sp, #52	; 0x34
 800d13a:	9a06      	ldr	r2, [sp, #24]
    clip_line.x1 = LV_MATH_MIN(point1->x, point2->x) - dsc->width / 2;
 800d13c:	f8ad 6034 	strh.w	r6, [sp, #52]	; 0x34
    is_common = _lv_area_intersect(&clip_line, &clip_line, clip);
 800d140:	4608      	mov	r0, r1
    clip_line.x2 = LV_MATH_MAX(point1->x, point2->x) + dsc->width / 2;
 800d142:	f8ad 5038 	strh.w	r5, [sp, #56]	; 0x38
    clip_line.y1 = LV_MATH_MIN(point1->y, point2->y) - dsc->width / 2;
 800d146:	f8ad 7036 	strh.w	r7, [sp, #54]	; 0x36
    clip_line.y2 = LV_MATH_MAX(point1->y, point2->y) + dsc->width / 2;
 800d14a:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
    is_common = _lv_area_intersect(&clip_line, &clip_line, clip);
 800d14e:	f006 fef7 	bl	8013f40 <_lv_area_intersect>
    if(!is_common) return;
 800d152:	2800      	cmp	r0, #0
 800d154:	f000 8178 	beq.w	800d448 <lv_draw_line+0x37c>

    if(point1->y == point2->y) draw_line_hor(point1, point2, &clip_line, dsc);
 800d158:	9b04      	ldr	r3, [sp, #16]
 800d15a:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 800d15e:	9b05      	ldr	r3, [sp, #20]
 800d160:	f9b3 5002 	ldrsh.w	r5, [r3, #2]
 800d164:	42ae      	cmp	r6, r5
 800d166:	f000 8231 	beq.w	800d5cc <lv_draw_line+0x500>
    else if(point1->x == point2->x) draw_line_ver(point1, point2, &clip_line, dsc);
 800d16a:	9b04      	ldr	r3, [sp, #16]
 800d16c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d170:	9307      	str	r3, [sp, #28]
 800d172:	9b05      	ldr	r3, [sp, #20]
 800d174:	f9b3 b000 	ldrsh.w	fp, [r3]
 800d178:	9b07      	ldr	r3, [sp, #28]
 800d17a:	455b      	cmp	r3, fp
 800d17c:	f000 8172 	beq.w	800d464 <lv_draw_line+0x398>
                                                 const lv_draw_line_dsc_t * dsc)
{
    /*Keep the great y in p1*/
    lv_point_t p1;
    lv_point_t p2;
    if(point1->y < point2->y) {
 800d180:	42ae      	cmp	r6, r5
 800d182:	db05      	blt.n	800d190 <lv_draw_line+0xc4>
 800d184:	4632      	mov	r2, r6
 800d186:	f8cd b01c 	str.w	fp, [sp, #28]
 800d18a:	462e      	mov	r6, r5
 800d18c:	469b      	mov	fp, r3
 800d18e:	4615      	mov	r5, r2
        p2.y = point1->y;
        p1.x = point2->x;
        p2.x = point1->x;
    }

    int32_t xdiff = p2.x - p1.x;
 800d190:	9b07      	ldr	r3, [sp, #28]
    int32_t ydiff = p2.y - p1.y;
 800d192:	1baa      	subs	r2, r5, r6
        143, 145, 147, 149, 151, 153, 155, 158,
        160, 162, 165, 167, 170, 173, 175, 178,
        181,
    };

    int32_t w = dsc->width;
 800d194:	f9b4 8004 	ldrsh.w	r8, [r4, #4]
    int32_t xdiff = p2.x - p1.x;
 800d198:	ebab 0303 	sub.w	r3, fp, r3
    int32_t ydiff = p2.y - p1.y;
 800d19c:	920b      	str	r2, [sp, #44]	; 0x2c
    bool flat = LV_MATH_ABS(xdiff) > LV_MATH_ABS(ydiff) ? true : false;
 800d19e:	2b00      	cmp	r3, #0
    int32_t xdiff = p2.x - p1.x;
 800d1a0:	930a      	str	r3, [sp, #40]	; 0x28
    bool flat = LV_MATH_ABS(xdiff) > LV_MATH_ABS(ydiff) ? true : false;
 800d1a2:	bfb8      	it	lt
 800d1a4:	425b      	neglt	r3, r3
 800d1a6:	2a00      	cmp	r2, #0
 800d1a8:	bfb8      	it	lt
 800d1aa:	4252      	neglt	r2, r2
 800d1ac:	469a      	mov	sl, r3
    int32_t wcorr_i = 0;
    if(flat) wcorr_i = (LV_MATH_ABS(ydiff) << 5) / LV_MATH_ABS(xdiff);
 800d1ae:	4293      	cmp	r3, r2
    bool flat = LV_MATH_ABS(xdiff) > LV_MATH_ABS(ydiff) ? true : false;
 800d1b0:	4691      	mov	r9, r2
    if(flat) wcorr_i = (LV_MATH_ABS(ydiff) << 5) / LV_MATH_ABS(xdiff);
 800d1b2:	f340 8207 	ble.w	800d5c4 <lv_draw_line+0x4f8>
 800d1b6:	0151      	lsls	r1, r2, #5
 800d1b8:	fbb1 f1f3 	udiv	r1, r1, r3
    else wcorr_i = (LV_MATH_ABS(xdiff) << 5) / LV_MATH_ABS(ydiff);

    w = (w * wcorr[wcorr_i] + 63) >> 7;     /*+ 63 for rounding*/
 800d1bc:	48b7      	ldr	r0, [pc, #732]	; (800d49c <lv_draw_line+0x3d0>)
 800d1be:	233f      	movs	r3, #63	; 0x3f
    draw_area.y2 = LV_MATH_MAX(p1.y, p2.y) + w;

    /* Get the union of `coords` and `clip`*/
    /* `clip` is already truncated to the `vdb` size
     * in 'lv_refr_area' function */
    bool is_common = _lv_area_intersect(&draw_area, &draw_area, clip);
 800d1c0:	aa0d      	add	r2, sp, #52	; 0x34
    w = (w * wcorr[wcorr_i] + 63) >> 7;     /*+ 63 for rounding*/
 800d1c2:	f810 c001 	ldrb.w	ip, [r0, r1]
    bool is_common = _lv_area_intersect(&draw_area, &draw_area, clip);
 800d1c6:	a90f      	add	r1, sp, #60	; 0x3c
    w = (w * wcorr[wcorr_i] + 63) >> 7;     /*+ 63 for rounding*/
 800d1c8:	fb18 380c 	smlabb	r8, r8, ip, r3
    bool is_common = _lv_area_intersect(&draw_area, &draw_area, clip);
 800d1cc:	4608      	mov	r0, r1
    draw_area.x1 = LV_MATH_MIN(p1.x, p2.x) - w;
 800d1ce:	f3c8 13cf 	ubfx	r3, r8, #7, #16
 800d1d2:	461f      	mov	r7, r3
    w = (w * wcorr[wcorr_i] + 63) >> 7;     /*+ 63 for rounding*/
 800d1d4:	ea4f 13e8 	mov.w	r3, r8, asr #7
    draw_area.x1 = LV_MATH_MIN(p1.x, p2.x) - w;
 800d1d8:	e9cd 7308 	strd	r7, r3, [sp, #32]
 800d1dc:	9b07      	ldr	r3, [sp, #28]
 800d1de:	459b      	cmp	fp, r3
 800d1e0:	bfd4      	ite	le
 800d1e2:	ebc7 070b 	rsble	r7, r7, fp
 800d1e6:	ebc7 0703 	rsbgt	r7, r7, r3
 800d1ea:	46bc      	mov	ip, r7
    draw_area.x2 = LV_MATH_MAX(p1.x, p2.x) + w;
 800d1ec:	9f08      	ldr	r7, [sp, #32]
 800d1ee:	459b      	cmp	fp, r3
 800d1f0:	bfac      	ite	ge
 800d1f2:	445f      	addge	r7, fp
 800d1f4:	18ff      	addlt	r7, r7, r3
    draw_area.y1 = LV_MATH_MIN(p1.y, p2.y) - w;
 800d1f6:	9b08      	ldr	r3, [sp, #32]
    draw_area.x1 = LV_MATH_MIN(p1.x, p2.x) - w;
 800d1f8:	f8ad c03c 	strh.w	ip, [sp, #60]	; 0x3c
    draw_area.x2 = LV_MATH_MAX(p1.x, p2.x) + w;
 800d1fc:	46be      	mov	lr, r7
    draw_area.y1 = LV_MATH_MIN(p1.y, p2.y) - w;
 800d1fe:	461f      	mov	r7, r3
    draw_area.y2 = LV_MATH_MAX(p1.y, p2.y) + w;
 800d200:	42b5      	cmp	r5, r6
 800d202:	bfac      	ite	ge
 800d204:	195b      	addge	r3, r3, r5
 800d206:	199b      	addlt	r3, r3, r6
    draw_area.y1 = LV_MATH_MIN(p1.y, p2.y) - w;
 800d208:	42b5      	cmp	r5, r6
 800d20a:	bfd4      	ite	le
 800d20c:	ebc7 0705 	rsble	r7, r7, r5
 800d210:	ebc7 0706 	rsbgt	r7, r7, r6
    draw_area.x2 = LV_MATH_MAX(p1.x, p2.x) + w;
 800d214:	f8ad e040 	strh.w	lr, [sp, #64]	; 0x40
    draw_area.y2 = LV_MATH_MAX(p1.y, p2.y) + w;
 800d218:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
    draw_area.y1 = LV_MATH_MIN(p1.y, p2.y) - w;
 800d21c:	f8ad 703e 	strh.w	r7, [sp, #62]	; 0x3e
    bool is_common = _lv_area_intersect(&draw_area, &draw_area, clip);
 800d220:	f006 fe8e 	bl	8013f40 <_lv_area_intersect>
    if(is_common == false) return;
 800d224:	2800      	cmp	r0, #0
 800d226:	f000 80f1 	beq.w	800d40c <lv_draw_line+0x340>
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 800d22a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    int32_t w_half0 = w >> 1;
 800d22c:	ea4f 2228 	mov.w	r2, r8, asr #8
    lv_draw_mask_line_param_t mask_left_param;
    lv_draw_mask_line_param_t mask_right_param;
    lv_draw_mask_line_param_t mask_top_param;
    lv_draw_mask_line_param_t mask_bottom_param;

    if(flat) {
 800d230:	45ca      	cmp	sl, r9
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 800d232:	f003 0301 	and.w	r3, r3, #1
    int32_t w_half0 = w >> 1;
 800d236:	4617      	mov	r7, r2
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 800d238:	eb03 2828 	add.w	r8, r3, r8, asr #8
    if(flat) {
 800d23c:	f340 82b8 	ble.w	800d7b0 <lv_draw_line+0x6e4>
        if(xdiff > 0) {
 800d240:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d242:	2b00      	cmp	r3, #0
 800d244:	f340 822c 	ble.w	800d6a0 <lv_draw_line+0x5d4>
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
 800d248:	b293      	uxth	r3, r2
 800d24a:	aa13      	add	r2, sp, #76	; 0x4c
 800d24c:	b2a9      	uxth	r1, r5
                                          LV_DRAW_MASK_LINE_SIDE_LEFT);
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
 800d24e:	f10d 0978 	add.w	r9, sp, #120	; 0x78
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
 800d252:	4610      	mov	r0, r2
 800d254:	fa1f fa86 	uxth.w	sl, r6
 800d258:	eba1 0c03 	sub.w	ip, r1, r3
 800d25c:	ee08 2a10 	vmov	s16, r2
 800d260:	2200      	movs	r2, #0
 800d262:	460f      	mov	r7, r1
 800d264:	fa0f fc8c 	sxth.w	ip, ip
 800d268:	9907      	ldr	r1, [sp, #28]
 800d26a:	9201      	str	r2, [sp, #4]
 800d26c:	ebaa 0203 	sub.w	r2, sl, r3
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
 800d270:	fa1f f888 	uxth.w	r8, r8
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
 800d274:	465b      	mov	r3, fp
 800d276:	b212      	sxth	r2, r2
 800d278:	f8cd c000 	str.w	ip, [sp]
 800d27c:	f001 fb8e 	bl	800e99c <lv_draw_mask_line_points_init>
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
 800d280:	eb07 0c08 	add.w	ip, r7, r8
 800d284:	2301      	movs	r3, #1
 800d286:	eb0a 0208 	add.w	r2, sl, r8
 800d28a:	fa0f fc8c 	sxth.w	ip, ip
 800d28e:	4648      	mov	r0, r9
 800d290:	9301      	str	r3, [sp, #4]
 800d292:	b212      	sxth	r2, r2
 800d294:	465b      	mov	r3, fp
 800d296:	9907      	ldr	r1, [sp, #28]
 800d298:	f8cd c000 	str.w	ip, [sp]
 800d29c:	f001 fb7e 	bl	800e99c <lv_draw_mask_line_points_init>
                                      LV_DRAW_MASK_LINE_SIDE_RIGHT);
    }

    /*Use the normal vector for the endings*/

    int16_t mask_left_id = lv_draw_mask_add(&mask_left_param, NULL);
 800d2a0:	ee18 0a10 	vmov	r0, s16
 800d2a4:	2100      	movs	r1, #0
 800d2a6:	f001 f9f3 	bl	800e690 <lv_draw_mask_add>
 800d2aa:	4603      	mov	r3, r0
    int16_t mask_right_id = lv_draw_mask_add(&mask_right_param, NULL);
 800d2ac:	2100      	movs	r1, #0
 800d2ae:	4648      	mov	r0, r9
    int16_t mask_left_id = lv_draw_mask_add(&mask_left_param, NULL);
 800d2b0:	ee08 3a10 	vmov	s16, r3
    int16_t mask_right_id = lv_draw_mask_add(&mask_right_param, NULL);
 800d2b4:	f001 f9ec 	bl	800e690 <lv_draw_mask_add>
    int16_t mask_top_id = LV_MASK_ID_INV;
    int16_t mask_bottom_id = LV_MASK_ID_INV;

    if(!dsc->raw_end) {
 800d2b8:	f894 800b 	ldrb.w	r8, [r4, #11]
    int16_t mask_right_id = lv_draw_mask_add(&mask_right_param, NULL);
 800d2bc:	ee08 0a90 	vmov	s17, r0
    if(!dsc->raw_end) {
 800d2c0:	f018 0810 	ands.w	r8, r8, #16
 800d2c4:	f000 8245 	beq.w	800d752 <lv_draw_line+0x686>
    int16_t mask_bottom_id = LV_MASK_ID_INV;
 800d2c8:	f04f 33ff 	mov.w	r3, #4294967295
    int16_t mask_top_id = LV_MASK_ID_INV;
 800d2cc:	ee09 3a10 	vmov	s18, r3
    int16_t mask_bottom_id = LV_MASK_ID_INV;
 800d2d0:	9308      	str	r3, [sp, #32]
        lv_draw_mask_line_points_init(&mask_bottom_param, p2.x, p2.y, p2.x - ydiff, p2.y + xdiff,  LV_DRAW_MASK_LINE_SIDE_TOP);
        mask_top_id = lv_draw_mask_add(&mask_top_param, NULL);
        mask_bottom_id = lv_draw_mask_add(&mask_bottom_param, NULL);
    }

    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
 800d2d2:	f7fb f84f 	bl	8008374 <_lv_refr_get_disp_refreshing>
 800d2d6:	4605      	mov	r5, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 800d2d8:	f006 fb44 	bl	8013964 <lv_disp_get_buf>
    const lv_area_t * disp_area = &vdb->area;

    /*Store the coordinates of the `draw_a` relative to the VDB */
    draw_area.x1 -= disp_area->x1;
    draw_area.y1 -= disp_area->y1;
    draw_area.x2 -= disp_area->x1;
 800d2dc:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 800d2e0:	4603      	mov	r3, r0
    draw_area.x1 -= disp_area->x1;
 800d2e2:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
     * So deal with it only with steep lines. */
    int32_t draw_area_w = lv_area_get_width(&draw_area);

    /*Draw the background line by line*/
    int32_t h;
    uint32_t hor_res = (uint32_t)lv_disp_get_hor_res(disp);
 800d2e6:	4628      	mov	r0, r5
 800d2e8:	f101 0801 	add.w	r8, r1, #1
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 800d2ec:	461d      	mov	r5, r3
 800d2ee:	9307      	str	r3, [sp, #28]
    draw_area.x1 -= disp_area->x1;
 800d2f0:	8a1b      	ldrh	r3, [r3, #16]
 800d2f2:	eba8 0802 	sub.w	r8, r8, r2
    draw_area.y1 -= disp_area->y1;
 800d2f6:	8a6e      	ldrh	r6, [r5, #18]
    draw_area.x1 -= disp_area->x1;
 800d2f8:	1ad2      	subs	r2, r2, r3
    draw_area.y1 -= disp_area->y1;
 800d2fa:	f8bd 503e 	ldrh.w	r5, [sp, #62]	; 0x3e
    draw_area.x2 -= disp_area->x1;
 800d2fe:	1acb      	subs	r3, r1, r3
    draw_area.y2 -= disp_area->y1;
 800d300:	f8bd 1042 	ldrh.w	r1, [sp, #66]	; 0x42
    draw_area.x1 -= disp_area->x1;
 800d304:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
    draw_area.y1 -= disp_area->y1;
 800d308:	1bad      	subs	r5, r5, r6
    draw_area.y2 -= disp_area->y1;
 800d30a:	1b8a      	subs	r2, r1, r6
    draw_area.x2 -= disp_area->x1;
 800d30c:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
    draw_area.y1 -= disp_area->y1;
 800d310:	f8ad 503e 	strh.w	r5, [sp, #62]	; 0x3e
 800d314:	fa0f f888 	sxth.w	r8, r8
    draw_area.y2 -= disp_area->y1;
 800d318:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
    uint32_t hor_res = (uint32_t)lv_disp_get_hor_res(disp);
 800d31c:	f006 fabc 	bl	8013898 <lv_disp_get_hor_res>
 800d320:	4682      	mov	sl, r0
    size_t mask_buf_size = LV_MATH_MIN(lv_area_get_size(&draw_area), hor_res);
 800d322:	a80f      	add	r0, sp, #60	; 0x3c
 800d324:	f006 fdfe 	bl	8013f24 <lv_area_get_size>
 800d328:	4582      	cmp	sl, r0
 800d32a:	f200 8269 	bhi.w	800d800 <lv_draw_line+0x734>
    lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
 800d32e:	4650      	mov	r0, sl
 800d330:	f008 f8fa 	bl	8015528 <_lv_mem_buf_get>

    lv_area_t fill_area;
    fill_area.x1 = draw_area.x1 + disp_area->x1;
 800d334:	9f07      	ldr	r7, [sp, #28]
 800d336:	f8bd b03c 	ldrh.w	fp, [sp, #60]	; 0x3c

    int32_t x = vdb->area.x1 + draw_area.x1;

    uint32_t mask_p = 0;

    _lv_memset_ff(mask_buf, mask_buf_size);
 800d33a:	4651      	mov	r1, sl
    fill_area.x1 = draw_area.x1 + disp_area->x1;
 800d33c:	8a3d      	ldrh	r5, [r7, #16]
    lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
 800d33e:	4681      	mov	r9, r0
    fill_area.y1 = draw_area.y1 + disp_area->y1;
 800d340:	8a7e      	ldrh	r6, [r7, #18]
 800d342:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
    fill_area.x1 = draw_area.x1 + disp_area->x1;
 800d346:	44ab      	add	fp, r5
    fill_area.x2 = draw_area.x2 + disp_area->x1;
 800d348:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
    fill_area.y1 = draw_area.y1 + disp_area->y1;
 800d34c:	4433      	add	r3, r6
    fill_area.x1 = draw_area.x1 + disp_area->x1;
 800d34e:	fa0f fb8b 	sxth.w	fp, fp
    fill_area.x2 = draw_area.x2 + disp_area->x1;
 800d352:	442a      	add	r2, r5
    fill_area.y1 = draw_area.y1 + disp_area->y1;
 800d354:	b21b      	sxth	r3, r3
    fill_area.x1 = draw_area.x1 + disp_area->x1;
 800d356:	f8ad b044 	strh.w	fp, [sp, #68]	; 0x44
    fill_area.x2 = draw_area.x2 + disp_area->x1;
 800d35a:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
    fill_area.y1 = draw_area.y1 + disp_area->y1;
 800d35e:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
    fill_area.y2 = fill_area.y1;
 800d362:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
    _lv_memset_ff(mask_buf, mask_buf_size);
 800d366:	f008 fa6d 	bl	8015844 <_lv_memset_ff>
    /*Fill the first row with 'color'*/
    for(h = draw_area.y1 + disp_area->y1; h <= draw_area.y2 + disp_area->y1; h++) {
 800d36a:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 800d36e:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 800d372:	f9b7 7012 	ldrsh.w	r7, [r7, #18]
 800d376:	429a      	cmp	r2, r3
 800d378:	441f      	add	r7, r3
 800d37a:	db1e      	blt.n	800d3ba <lv_draw_line+0x2ee>
    uint32_t mask_p = 0;
 800d37c:	2500      	movs	r5, #0
 800d37e:	4646      	mov	r6, r8

        lv_draw_mask_res_t mask_res = lv_draw_mask_apply(&mask_buf[mask_p], x, h, draw_area_w);
 800d380:	444d      	add	r5, r9
 800d382:	4643      	mov	r3, r8
 800d384:	b23a      	sxth	r2, r7
 800d386:	4659      	mov	r1, fp
 800d388:	4628      	mov	r0, r5
 800d38a:	f001 f9df 	bl	800e74c <lv_draw_mask_apply>
        if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
 800d38e:	2800      	cmp	r0, #0
 800d390:	f000 81da 	beq.w	800d748 <lv_draw_line+0x67c>
            _lv_memset_00(&mask_buf[mask_p], draw_area_w);
        }

        mask_p += draw_area_w;
 800d394:	4635      	mov	r5, r6
        if((uint32_t) mask_p + draw_area_w < mask_buf_size) {
 800d396:	4446      	add	r6, r8
 800d398:	45b2      	cmp	sl, r6
 800d39a:	f240 81ae 	bls.w	800d6fa <lv_draw_line+0x62e>
    for(h = draw_area.y1 + disp_area->y1; h <= draw_area.y2 + disp_area->y1; h++) {
 800d39e:	9907      	ldr	r1, [sp, #28]
 800d3a0:	3701      	adds	r7, #1
 800d3a2:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 800d3a6:	f9b1 1012 	ldrsh.w	r1, [r1, #18]
            fill_area.y2 ++;
 800d3aa:	f8bd 204a 	ldrh.w	r2, [sp, #74]	; 0x4a
    for(h = draw_area.y1 + disp_area->y1; h <= draw_area.y2 + disp_area->y1; h++) {
 800d3ae:	440b      	add	r3, r1
            fill_area.y2 ++;
 800d3b0:	3201      	adds	r2, #1
    for(h = draw_area.y1 + disp_area->y1; h <= draw_area.y2 + disp_area->y1; h++) {
 800d3b2:	429f      	cmp	r7, r3
            fill_area.y2 ++;
 800d3b4:	f8ad 204a 	strh.w	r2, [sp, #74]	; 0x4a
    for(h = draw_area.y1 + disp_area->y1; h <= draw_area.y2 + disp_area->y1; h++) {
 800d3b8:	dde2      	ble.n	800d380 <lv_draw_line+0x2b4>
            _lv_memset_ff(mask_buf, mask_buf_size);
        }
    }

    /*Flush the last part*/
    if(fill_area.y1 != fill_area.y2) {
 800d3ba:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
 800d3be:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 800d3c2:	429a      	cmp	r2, r3
 800d3c4:	d010      	beq.n	800d3e8 <lv_draw_line+0x31c>
        fill_area.y2--;
        _lv_blend_fill(&fill_area, clip,
                       dsc->color, mask_buf, LV_DRAW_MASK_RES_CHANGED, dsc->opa,
                       dsc->blend_mode);
 800d3c6:	7ae0      	ldrb	r0, [r4, #11]
        _lv_blend_fill(&fill_area, clip,
 800d3c8:	2202      	movs	r2, #2
 800d3ca:	7aa6      	ldrb	r6, [r4, #10]
        fill_area.y2--;
 800d3cc:	1e5d      	subs	r5, r3, #1
        _lv_blend_fill(&fill_area, clip,
 800d3ce:	f000 0003 	and.w	r0, r0, #3
 800d3d2:	9200      	str	r2, [sp, #0]
 800d3d4:	9601      	str	r6, [sp, #4]
 800d3d6:	a90d      	add	r1, sp, #52	; 0x34
 800d3d8:	9002      	str	r0, [sp, #8]
 800d3da:	464b      	mov	r3, r9
 800d3dc:	a811      	add	r0, sp, #68	; 0x44
 800d3de:	6822      	ldr	r2, [r4, #0]
        fill_area.y2--;
 800d3e0:	f8ad 504a 	strh.w	r5, [sp, #74]	; 0x4a
        _lv_blend_fill(&fill_area, clip,
 800d3e4:	f7fc fcba 	bl	8009d5c <_lv_blend_fill>

    }

    _lv_mem_buf_release(mask_buf);
 800d3e8:	4648      	mov	r0, r9
 800d3ea:	f007 fd75 	bl	8014ed8 <_lv_mem_buf_release>

    lv_draw_mask_remove_id(mask_left_id);
 800d3ee:	ee18 0a10 	vmov	r0, s16
 800d3f2:	f001 f9d5 	bl	800e7a0 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_right_id);
 800d3f6:	ee18 0a90 	vmov	r0, s17
 800d3fa:	f001 f9d1 	bl	800e7a0 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_top_id);
 800d3fe:	ee19 0a10 	vmov	r0, s18
 800d402:	f001 f9cd 	bl	800e7a0 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_bottom_id);
 800d406:	9808      	ldr	r0, [sp, #32]
 800d408:	f001 f9ca 	bl	800e7a0 <lv_draw_mask_remove_id>
    if(dsc->round_end || dsc->round_start) {
 800d40c:	7ae3      	ldrb	r3, [r4, #11]
 800d40e:	f013 0f0c 	tst.w	r3, #12
 800d412:	d019      	beq.n	800d448 <lv_draw_line+0x37c>
        lv_draw_rect_dsc_init(&cir_dsc);
 800d414:	ad34      	add	r5, sp, #208	; 0xd0
 800d416:	4628      	mov	r0, r5
 800d418:	f001 ff8e 	bl	800f338 <lv_draw_rect_dsc_init>
        cir_dsc.bg_color = dsc->color;
 800d41c:	6822      	ldr	r2, [r4, #0]
        int32_t r = (dsc->width >> 1);
 800d41e:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
        cir_dsc.radius = LV_RADIUS_CIRCLE;
 800d422:	f647 70ff 	movw	r0, #32767	; 0x7fff
        cir_dsc.bg_opa = dsc->opa;
 800d426:	7aa1      	ldrb	r1, [r4, #10]
        cir_dsc.bg_color = dsc->color;
 800d428:	9235      	str	r2, [sp, #212]	; 0xd4
        cir_dsc.radius = LV_RADIUS_CIRCLE;
 800d42a:	43df      	mvns	r7, r3
        if(dsc->round_start) {
 800d42c:	7ae2      	ldrb	r2, [r4, #11]
        int32_t r = (dsc->width >> 1);
 800d42e:	105e      	asrs	r6, r3, #1
        cir_dsc.bg_opa = dsc->opa;
 800d430:	f88d 10e2 	strb.w	r1, [sp, #226]	; 0xe2
 800d434:	f007 0701 	and.w	r7, r7, #1
        if(dsc->round_start) {
 800d438:	0751      	lsls	r1, r2, #29
        cir_dsc.radius = LV_RADIUS_CIRCLE;
 800d43a:	f8ad 00d0 	strh.w	r0, [sp, #208]	; 0xd0
        if(dsc->round_start) {
 800d43e:	f100 81e4 	bmi.w	800d80a <lv_draw_line+0x73e>
        if(dsc->round_end) {
 800d442:	0713      	lsls	r3, r2, #28
 800d444:	f100 810a 	bmi.w	800d65c <lv_draw_line+0x590>
}
 800d448:	b04f      	add	sp, #316	; 0x13c
 800d44a:	ecbd 8b04 	vpop	{d8-d9}
 800d44e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(point1->x == point2->x && point1->y == point2->y) return;
 800d452:	9905      	ldr	r1, [sp, #20]
 800d454:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
 800d458:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 800d45c:	4288      	cmp	r0, r1
 800d45e:	f47f ae52 	bne.w	800d106 <lv_draw_line+0x3a>
 800d462:	e7f1      	b.n	800d448 <lv_draw_line+0x37c>
    lv_opa_t opa = dsc->opa;
 800d464:	7aa7      	ldrb	r7, [r4, #10]
    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
 800d466:	f7fa ff85 	bl	8008374 <_lv_refr_get_disp_refreshing>
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 800d46a:	f006 fa7b 	bl	8013964 <lv_disp_get_buf>
    int32_t w = dsc->width - 1;
 800d46e:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
 800d472:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 800d476:	4606      	mov	r6, r0
    int32_t w = dsc->width - 1;
 800d478:	3b01      	subs	r3, #1
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 800d47a:	f003 0801 	and.w	r8, r3, #1
    int32_t w_half0 = w >> 1;
 800d47e:	ea4f 0963 	mov.w	r9, r3, asr #1
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 800d482:	eb08 0863 	add.w	r8, r8, r3, asr #1
    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
 800d486:	b15a      	cbz	r2, 800d4a0 <lv_draw_line+0x3d4>
 800d488:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800d48c:	b143      	cbz	r3, 800d4a0 <lv_draw_line+0x3d4>
 800d48e:	2501      	movs	r5, #1
    if(lv_draw_mask_get_cnt()) simple_mode = false;
 800d490:	f04f 0b00 	mov.w	fp, #0
 800d494:	f001 fa3e 	bl	800e914 <lv_draw_mask_get_cnt>
 800d498:	e009      	b.n	800d4ae <lv_draw_line+0x3e2>
 800d49a:	bf00      	nop
 800d49c:	0801e318 	.word	0x0801e318
 800d4a0:	f001 fa38 	bl	800e914 <lv_draw_mask_get_cnt>
 800d4a4:	fab0 fb80 	clz	fp, r0
    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
 800d4a8:	2500      	movs	r5, #0
    if(lv_draw_mask_get_cnt()) simple_mode = false;
 800d4aa:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
    draw_area.y1 = LV_MATH_MIN(point1->y, point2->y);
 800d4ae:	9b05      	ldr	r3, [sp, #20]
 800d4b0:	9a04      	ldr	r2, [sp, #16]
 800d4b2:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
 800d4b6:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
    draw_area.y2 = LV_MATH_MAX(point1->y, point2->y) - 1;
 800d4ba:	4601      	mov	r1, r0
    draw_area.x1 = point1->x - w_half1;
 800d4bc:	8812      	ldrh	r2, [r2, #0]
    draw_area.y2 = LV_MATH_MAX(point1->y, point2->y) - 1;
 800d4be:	4298      	cmp	r0, r3
 800d4c0:	bfb8      	it	lt
 800d4c2:	4619      	movlt	r1, r3
    draw_area.y1 = LV_MATH_MIN(point1->y, point2->y);
 800d4c4:	4298      	cmp	r0, r3
    draw_area.y2 = LV_MATH_MAX(point1->y, point2->y) - 1;
 800d4c6:	f101 31ff 	add.w	r1, r1, #4294967295
    draw_area.y1 = LV_MATH_MIN(point1->y, point2->y);
 800d4ca:	bfa8      	it	ge
 800d4cc:	4618      	movge	r0, r3
    draw_area.x1 = point1->x - w_half1;
 800d4ce:	eba2 0308 	sub.w	r3, r2, r8
    draw_area.x2 = point1->x + w_half0;
 800d4d2:	444a      	add	r2, r9
    draw_area.y1 = LV_MATH_MIN(point1->y, point2->y);
 800d4d4:	f8ad 00a6 	strh.w	r0, [sp, #166]	; 0xa6
    draw_area.x1 = point1->x - w_half1;
 800d4d8:	f8ad 30a4 	strh.w	r3, [sp, #164]	; 0xa4
    draw_area.y2 = LV_MATH_MAX(point1->y, point2->y) - 1;
 800d4dc:	f8ad 10aa 	strh.w	r1, [sp, #170]	; 0xaa
    draw_area.x2 = point1->x + w_half0;
 800d4e0:	f8ad 20a8 	strh.w	r2, [sp, #168]	; 0xa8
    if(simple_mode) {
 800d4e4:	f1bb 0f00 	cmp.w	fp, #0
 800d4e8:	f040 80aa 	bne.w	800d640 <lv_draw_line+0x574>
        is_common = _lv_area_intersect(&draw_area, clip, &draw_area);
 800d4ec:	aa29      	add	r2, sp, #164	; 0xa4
 800d4ee:	a90d      	add	r1, sp, #52	; 0x34
 800d4f0:	4610      	mov	r0, r2
 800d4f2:	f006 fd25 	bl	8013f40 <_lv_area_intersect>
        if(!is_common) return;
 800d4f6:	2800      	cmp	r0, #0
 800d4f8:	d088      	beq.n	800d40c <lv_draw_line+0x340>
        draw_area.x2 -= vdb->area.x1;
 800d4fa:	f9bd c0a8 	ldrsh.w	ip, [sp, #168]	; 0xa8
        draw_area.x1 -= vdb->area.x1;
 800d4fe:	f9bd 70a4 	ldrsh.w	r7, [sp, #164]	; 0xa4
        draw_area.x2 -= vdb->area.x1;
 800d502:	fa1f f28c 	uxth.w	r2, ip
        draw_area.x1 -= vdb->area.x1;
 800d506:	8a33      	ldrh	r3, [r6, #16]
 800d508:	b2b9      	uxth	r1, r7
        draw_area.y1 -= vdb->area.y1;
 800d50a:	8a70      	ldrh	r0, [r6, #18]
 800d50c:	f102 0801 	add.w	r8, r2, #1
        draw_area.x2 -= vdb->area.x1;
 800d510:	1ad2      	subs	r2, r2, r3
        draw_area.x1 -= vdb->area.x1;
 800d512:	1acb      	subs	r3, r1, r3
        fill_area.x1 = draw_area.x1 + disp_area->x1;
 800d514:	f8ad 70d0 	strh.w	r7, [sp, #208]	; 0xd0
 800d518:	eba8 0801 	sub.w	r8, r8, r1
        draw_area.x2 -= vdb->area.x1;
 800d51c:	f8ad 20a8 	strh.w	r2, [sp, #168]	; 0xa8
        draw_area.y1 -= vdb->area.y1;
 800d520:	f9bd 10a6 	ldrsh.w	r1, [sp, #166]	; 0xa6
        draw_area.y2 -= vdb->area.y1;
 800d524:	f8bd 20aa 	ldrh.w	r2, [sp, #170]	; 0xaa
 800d528:	fa0f f888 	sxth.w	r8, r8
        draw_area.y1 -= vdb->area.y1;
 800d52c:	1a0f      	subs	r7, r1, r0
        fill_area.x2 = draw_area.x2 + disp_area->x1;
 800d52e:	f8ad c0d4 	strh.w	ip, [sp, #212]	; 0xd4
        draw_area.y2 -= vdb->area.y1;
 800d532:	1a12      	subs	r2, r2, r0
        lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
 800d534:	4640      	mov	r0, r8
        draw_area.y1 -= vdb->area.y1;
 800d536:	f8ad 70a6 	strh.w	r7, [sp, #166]	; 0xa6
        draw_area.x1 -= vdb->area.x1;
 800d53a:	f8ad 30a4 	strh.w	r3, [sp, #164]	; 0xa4
        fill_area.y1 = draw_area.y1 + disp_area->y1;
 800d53e:	f8ad 10d2 	strh.w	r1, [sp, #210]	; 0xd2
        fill_area.y2 = fill_area.y1;
 800d542:	f8ad 10d6 	strh.w	r1, [sp, #214]	; 0xd6
        draw_area.y2 -= vdb->area.y1;
 800d546:	f8ad 20aa 	strh.w	r2, [sp, #170]	; 0xaa
        lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
 800d54a:	f007 ffed 	bl	8015528 <_lv_mem_buf_get>
            dash_start = (vdb->area.y1 + draw_area.y1) % (dsc->dash_gap + dsc->dash_width);
 800d54e:	f9bd 90a6 	ldrsh.w	r9, [sp, #166]	; 0xa6
        lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
 800d552:	4607      	mov	r7, r0
        if(dashed) {
 800d554:	2d00      	cmp	r5, #0
 800d556:	f040 8228 	bne.w	800d9aa <lv_draw_line+0x8de>
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800d55a:	f9bd 30aa 	ldrsh.w	r3, [sp, #170]	; 0xaa
 800d55e:	4599      	cmp	r9, r3
 800d560:	dc2c      	bgt.n	800d5bc <lv_draw_line+0x4f0>
            _lv_blend_fill(clip, &fill_area,
 800d562:	46aa      	mov	sl, r5
 800d564:	ad34      	add	r5, sp, #208	; 0xd0
            _lv_memset_ff(mask_buf, draw_area_w);
 800d566:	4641      	mov	r1, r8
 800d568:	4638      	mov	r0, r7
 800d56a:	f008 f96b 	bl	8015844 <_lv_memset_ff>
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
 800d56e:	f8bd c0a4 	ldrh.w	ip, [sp, #164]	; 0xa4
 800d572:	8a72      	ldrh	r2, [r6, #18]
 800d574:	4643      	mov	r3, r8
 800d576:	8a31      	ldrh	r1, [r6, #16]
 800d578:	4638      	mov	r0, r7
 800d57a:	444a      	add	r2, r9
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800d57c:	f109 0901 	add.w	r9, r9, #1
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
 800d580:	4461      	add	r1, ip
 800d582:	b212      	sxth	r2, r2
 800d584:	b209      	sxth	r1, r1
 800d586:	f001 f8e1 	bl	800e74c <lv_draw_mask_apply>
            _lv_blend_fill(clip, &fill_area,
 800d58a:	7aa2      	ldrb	r2, [r4, #10]
 800d58c:	463b      	mov	r3, r7
 800d58e:	9000      	str	r0, [sp, #0]
 800d590:	4629      	mov	r1, r5
 800d592:	f8cd a008 	str.w	sl, [sp, #8]
 800d596:	9201      	str	r2, [sp, #4]
 800d598:	a80d      	add	r0, sp, #52	; 0x34
 800d59a:	6822      	ldr	r2, [r4, #0]
 800d59c:	f7fc fbde 	bl	8009d5c <_lv_blend_fill>
            fill_area.y1++;
 800d5a0:	f8bd 20d2 	ldrh.w	r2, [sp, #210]	; 0xd2
            fill_area.y2++;
 800d5a4:	f8bd 30d6 	ldrh.w	r3, [sp, #214]	; 0xd6
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800d5a8:	f9bd 10aa 	ldrsh.w	r1, [sp, #170]	; 0xaa
            fill_area.y1++;
 800d5ac:	3201      	adds	r2, #1
            fill_area.y2++;
 800d5ae:	3301      	adds	r3, #1
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800d5b0:	4549      	cmp	r1, r9
            fill_area.y1++;
 800d5b2:	f8ad 20d2 	strh.w	r2, [sp, #210]	; 0xd2
            fill_area.y2++;
 800d5b6:	f8ad 30d6 	strh.w	r3, [sp, #214]	; 0xd6
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800d5ba:	dad4      	bge.n	800d566 <lv_draw_line+0x49a>
        _lv_mem_buf_release(mask_buf);
 800d5bc:	4638      	mov	r0, r7
 800d5be:	f007 fc8b 	bl	8014ed8 <_lv_mem_buf_release>
 800d5c2:	e723      	b.n	800d40c <lv_draw_line+0x340>
    else wcorr_i = (LV_MATH_ABS(xdiff) << 5) / LV_MATH_ABS(ydiff);
 800d5c4:	0159      	lsls	r1, r3, #5
 800d5c6:	fbb1 f1f2 	udiv	r1, r1, r2
 800d5ca:	e5f7      	b.n	800d1bc <lv_draw_line+0xf0>
    lv_opa_t opa = dsc->opa;
 800d5cc:	7aa5      	ldrb	r5, [r4, #10]
    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
 800d5ce:	f7fa fed1 	bl	8008374 <_lv_refr_get_disp_refreshing>
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 800d5d2:	f006 f9c7 	bl	8013964 <lv_disp_get_buf>
    int32_t w = dsc->width - 1;
 800d5d6:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
 800d5da:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 800d5de:	4681      	mov	r9, r0
    int32_t w = dsc->width - 1;
 800d5e0:	3b01      	subs	r3, #1
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 800d5e2:	f003 0601 	and.w	r6, r3, #1
    int32_t w_half0 = w >> 1;
 800d5e6:	105f      	asrs	r7, r3, #1
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 800d5e8:	eb06 0663 	add.w	r6, r6, r3, asr #1
    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
 800d5ec:	2a00      	cmp	r2, #0
 800d5ee:	d14d      	bne.n	800d68c <lv_draw_line+0x5c0>
    if(lv_draw_mask_get_cnt()) simple_mode = false;
 800d5f0:	f001 f990 	bl	800e914 <lv_draw_mask_get_cnt>
 800d5f4:	fab0 f080 	clz	r0, r0
    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
 800d5f8:	f04f 0a00 	mov.w	sl, #0
    if(lv_draw_mask_get_cnt()) simple_mode = false;
 800d5fc:	0940      	lsrs	r0, r0, #5
    draw_area.x1 = LV_MATH_MIN(point1->x, point2->x);
 800d5fe:	9b05      	ldr	r3, [sp, #20]
 800d600:	9a04      	ldr	r2, [sp, #16]
 800d602:	f9b3 1000 	ldrsh.w	r1, [r3]
 800d606:	f9b2 3000 	ldrsh.w	r3, [r2]
    draw_area.x2 = LV_MATH_MAX(point1->x, point2->x)  - 1;
 800d60a:	468c      	mov	ip, r1
    draw_area.y1 = point1->y - w_half1;
 800d60c:	8852      	ldrh	r2, [r2, #2]
    draw_area.x2 = LV_MATH_MAX(point1->x, point2->x)  - 1;
 800d60e:	4299      	cmp	r1, r3
 800d610:	bfb8      	it	lt
 800d612:	469c      	movlt	ip, r3
    draw_area.x1 = LV_MATH_MIN(point1->x, point2->x);
 800d614:	4299      	cmp	r1, r3
    draw_area.x2 = LV_MATH_MAX(point1->x, point2->x)  - 1;
 800d616:	f10c 3cff 	add.w	ip, ip, #4294967295
    draw_area.x1 = LV_MATH_MIN(point1->x, point2->x);
 800d61a:	bfa8      	it	ge
 800d61c:	4619      	movge	r1, r3
    draw_area.y1 = point1->y - w_half1;
 800d61e:	1b93      	subs	r3, r2, r6
    draw_area.y2 = point1->y + w_half0;
 800d620:	443a      	add	r2, r7
    draw_area.x1 = LV_MATH_MIN(point1->x, point2->x);
 800d622:	f8ad 10a4 	strh.w	r1, [sp, #164]	; 0xa4
    draw_area.y1 = point1->y - w_half1;
 800d626:	f8ad 30a6 	strh.w	r3, [sp, #166]	; 0xa6
    draw_area.x2 = LV_MATH_MAX(point1->x, point2->x)  - 1;
 800d62a:	f8ad c0a8 	strh.w	ip, [sp, #168]	; 0xa8
    draw_area.y2 = point1->y + w_half0;
 800d62e:	f8ad 20aa 	strh.w	r2, [sp, #170]	; 0xaa
    if(simple_mode) {
 800d632:	2800      	cmp	r0, #0
 800d634:	f000 8106 	beq.w	800d844 <lv_draw_line+0x778>
                       dsc->blend_mode);
 800d638:	7ae1      	ldrb	r1, [r4, #11]
        _lv_blend_fill(clip, &draw_area,
 800d63a:	2301      	movs	r3, #1
 800d63c:	9501      	str	r5, [sp, #4]
 800d63e:	e002      	b.n	800d646 <lv_draw_line+0x57a>
        _lv_blend_fill(clip, &draw_area,
 800d640:	2301      	movs	r3, #1
                       dsc->blend_mode);
 800d642:	7ae1      	ldrb	r1, [r4, #11]
        _lv_blend_fill(clip, &draw_area,
 800d644:	9701      	str	r7, [sp, #4]
 800d646:	f001 0103 	and.w	r1, r1, #3
 800d64a:	9300      	str	r3, [sp, #0]
 800d64c:	a80d      	add	r0, sp, #52	; 0x34
 800d64e:	6822      	ldr	r2, [r4, #0]
 800d650:	2300      	movs	r3, #0
 800d652:	9102      	str	r1, [sp, #8]
 800d654:	a929      	add	r1, sp, #164	; 0xa4
 800d656:	f7fc fb81 	bl	8009d5c <_lv_blend_fill>
 800d65a:	e6d7      	b.n	800d40c <lv_draw_line+0x340>
            cir_area.x1 = point2->x - r;
 800d65c:	9a05      	ldr	r2, [sp, #20]
 800d65e:	b2b3      	uxth	r3, r6
 800d660:	8810      	ldrh	r0, [r2, #0]
            cir_area.y1 = point2->y - r;
 800d662:	8851      	ldrh	r1, [r2, #2]
            lv_draw_rect(&cir_area, clip, &cir_dsc);
 800d664:	462a      	mov	r2, r5
            cir_area.x1 = point2->x - r;
 800d666:	1ac4      	subs	r4, r0, r3
            cir_area.x2 = point2->x + r - r_corr;
 800d668:	18c5      	adds	r5, r0, r3
            cir_area.y2 = point2->y + r - r_corr ;
 800d66a:	1858      	adds	r0, r3, r1
            cir_area.y1 = point2->y - r;
 800d66c:	1acb      	subs	r3, r1, r3
            cir_area.x2 = point2->x + r - r_corr;
 800d66e:	1bed      	subs	r5, r5, r7
            lv_draw_rect(&cir_area, clip, &cir_dsc);
 800d670:	9906      	ldr	r1, [sp, #24]
            cir_area.y2 = point2->y + r - r_corr ;
 800d672:	1bc7      	subs	r7, r0, r7
            lv_draw_rect(&cir_area, clip, &cir_dsc);
 800d674:	a829      	add	r0, sp, #164	; 0xa4
            cir_area.x2 = point2->x + r - r_corr;
 800d676:	f8ad 50a8 	strh.w	r5, [sp, #168]	; 0xa8
            cir_area.x1 = point2->x - r;
 800d67a:	f8ad 40a4 	strh.w	r4, [sp, #164]	; 0xa4
            cir_area.y2 = point2->y + r - r_corr ;
 800d67e:	f8ad 70aa 	strh.w	r7, [sp, #170]	; 0xaa
            cir_area.y1 = point2->y - r;
 800d682:	f8ad 30a6 	strh.w	r3, [sp, #166]	; 0xa6
            lv_draw_rect(&cir_area, clip, &cir_dsc);
 800d686:	f001 fe7b 	bl	800f380 <lv_draw_rect>
 800d68a:	e6dd      	b.n	800d448 <lv_draw_line+0x37c>
    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
 800d68c:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800d690:	2b00      	cmp	r3, #0
 800d692:	d0ad      	beq.n	800d5f0 <lv_draw_line+0x524>
    if(lv_draw_mask_get_cnt()) simple_mode = false;
 800d694:	f001 f93e 	bl	800e914 <lv_draw_mask_get_cnt>
    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
 800d698:	f04f 0a01 	mov.w	sl, #1
    if(lv_draw_mask_get_cnt()) simple_mode = false;
 800d69c:	2000      	movs	r0, #0
 800d69e:	e7ae      	b.n	800d5fe <lv_draw_line+0x532>
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
 800d6a0:	fa1f f388 	uxth.w	r3, r8
 800d6a4:	aa13      	add	r2, sp, #76	; 0x4c
 800d6a6:	fa1f f885 	uxth.w	r8, r5
 800d6aa:	9907      	ldr	r1, [sp, #28]
 800d6ac:	4610      	mov	r0, r2
 800d6ae:	fa1f fa86 	uxth.w	sl, r6
 800d6b2:	eb03 0c08 	add.w	ip, r3, r8
 800d6b6:	ee08 2a10 	vmov	s16, r2
 800d6ba:	2200      	movs	r2, #0
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
 800d6bc:	f10d 0978 	add.w	r9, sp, #120	; 0x78
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
 800d6c0:	fa0f fc8c 	sxth.w	ip, ip
 800d6c4:	9201      	str	r2, [sp, #4]
 800d6c6:	eb0a 0203 	add.w	r2, sl, r3
 800d6ca:	f8cd c000 	str.w	ip, [sp]
 800d6ce:	465b      	mov	r3, fp
 800d6d0:	b212      	sxth	r2, r2
 800d6d2:	f001 f963 	bl	800e99c <lv_draw_mask_line_points_init>
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
 800d6d6:	2301      	movs	r3, #1
 800d6d8:	b2ba      	uxth	r2, r7
 800d6da:	4648      	mov	r0, r9
 800d6dc:	9301      	str	r3, [sp, #4]
 800d6de:	465b      	mov	r3, fp
 800d6e0:	eba8 0802 	sub.w	r8, r8, r2
 800d6e4:	ebaa 0202 	sub.w	r2, sl, r2
 800d6e8:	9907      	ldr	r1, [sp, #28]
 800d6ea:	fa0f f888 	sxth.w	r8, r8
 800d6ee:	b212      	sxth	r2, r2
 800d6f0:	f8cd 8000 	str.w	r8, [sp]
 800d6f4:	f001 f952 	bl	800e99c <lv_draw_mask_line_points_init>
 800d6f8:	e5d2      	b.n	800d2a0 <lv_draw_line+0x1d4>
                           dsc->blend_mode);
 800d6fa:	7ae2      	ldrb	r2, [r4, #11]
            _lv_blend_fill(&fill_area, clip,
 800d6fc:	2502      	movs	r5, #2
 800d6fe:	7aa0      	ldrb	r0, [r4, #10]
 800d700:	464b      	mov	r3, r9
 800d702:	f002 0203 	and.w	r2, r2, #3
 800d706:	a90d      	add	r1, sp, #52	; 0x34
    for(h = draw_area.y1 + disp_area->y1; h <= draw_area.y2 + disp_area->y1; h++) {
 800d708:	3701      	adds	r7, #1
 800d70a:	4646      	mov	r6, r8
            _lv_blend_fill(&fill_area, clip,
 800d70c:	9202      	str	r2, [sp, #8]
 800d70e:	e9cd 5000 	strd	r5, r0, [sp]
 800d712:	a811      	add	r0, sp, #68	; 0x44
 800d714:	6822      	ldr	r2, [r4, #0]
 800d716:	f7fc fb21 	bl	8009d5c <_lv_blend_fill>
            fill_area.y1 = fill_area.y2 + 1;
 800d71a:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
            _lv_memset_ff(mask_buf, mask_buf_size);
 800d71e:	4651      	mov	r1, sl
 800d720:	4648      	mov	r0, r9
            fill_area.y1 = fill_area.y2 + 1;
 800d722:	3301      	adds	r3, #1
            mask_p = 0;
 800d724:	2500      	movs	r5, #0
            fill_area.y1 = fill_area.y2 + 1;
 800d726:	b21b      	sxth	r3, r3
 800d728:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
            fill_area.y2 = fill_area.y1;
 800d72c:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
            _lv_memset_ff(mask_buf, mask_buf_size);
 800d730:	f008 f888 	bl	8015844 <_lv_memset_ff>
    for(h = draw_area.y1 + disp_area->y1; h <= draw_area.y2 + disp_area->y1; h++) {
 800d734:	9a07      	ldr	r2, [sp, #28]
 800d736:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 800d73a:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 800d73e:	4413      	add	r3, r2
 800d740:	429f      	cmp	r7, r3
 800d742:	f77f ae1d 	ble.w	800d380 <lv_draw_line+0x2b4>
 800d746:	e638      	b.n	800d3ba <lv_draw_line+0x2ee>
            _lv_memset_00(&mask_buf[mask_p], draw_area_w);
 800d748:	4628      	mov	r0, r5
 800d74a:	4641      	mov	r1, r8
 800d74c:	f008 f814 	bl	8015778 <_lv_memset_00>
 800d750:	e620      	b.n	800d394 <lv_draw_line+0x2c8>
        lv_draw_mask_line_points_init(&mask_top_param, p1.x, p1.y, p1.x - ydiff, p1.y + xdiff, LV_DRAW_MASK_LINE_SIDE_BOTTOM);
 800d752:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
 800d756:	4632      	mov	r2, r6
 800d758:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
 800d75c:	2003      	movs	r0, #3
 800d75e:	eb09 0c06 	add.w	ip, r9, r6
 800d762:	9b07      	ldr	r3, [sp, #28]
        lv_draw_mask_line_points_init(&mask_bottom_param, p2.x, p2.y, p2.x - ydiff, p2.y + xdiff,  LV_DRAW_MASK_LINE_SIDE_TOP);
 800d764:	44a9      	add	r9, r5
        lv_draw_mask_line_points_init(&mask_top_param, p1.x, p1.y, p1.x - ydiff, p1.y + xdiff, LV_DRAW_MASK_LINE_SIDE_BOTTOM);
 800d766:	9907      	ldr	r1, [sp, #28]
 800d768:	fa0f f68c 	sxth.w	r6, ip
 800d76c:	eba3 030a 	sub.w	r3, r3, sl
 800d770:	9001      	str	r0, [sp, #4]
 800d772:	a829      	add	r0, sp, #164	; 0xa4
 800d774:	b21b      	sxth	r3, r3
 800d776:	9600      	str	r6, [sp, #0]
 800d778:	f001 f910 	bl	800e99c <lv_draw_mask_line_points_init>
        lv_draw_mask_line_points_init(&mask_bottom_param, p2.x, p2.y, p2.x - ydiff, p2.y + xdiff,  LV_DRAW_MASK_LINE_SIDE_TOP);
 800d77c:	2602      	movs	r6, #2
 800d77e:	fa0f f089 	sxth.w	r0, r9
 800d782:	ebab 030a 	sub.w	r3, fp, sl
 800d786:	462a      	mov	r2, r5
 800d788:	4659      	mov	r1, fp
 800d78a:	b21b      	sxth	r3, r3
 800d78c:	9000      	str	r0, [sp, #0]
 800d78e:	9601      	str	r6, [sp, #4]
 800d790:	a834      	add	r0, sp, #208	; 0xd0
 800d792:	f001 f903 	bl	800e99c <lv_draw_mask_line_points_init>
        mask_top_id = lv_draw_mask_add(&mask_top_param, NULL);
 800d796:	4641      	mov	r1, r8
 800d798:	a829      	add	r0, sp, #164	; 0xa4
 800d79a:	f000 ff79 	bl	800e690 <lv_draw_mask_add>
 800d79e:	4603      	mov	r3, r0
        mask_bottom_id = lv_draw_mask_add(&mask_bottom_param, NULL);
 800d7a0:	4641      	mov	r1, r8
 800d7a2:	a834      	add	r0, sp, #208	; 0xd0
        mask_top_id = lv_draw_mask_add(&mask_top_param, NULL);
 800d7a4:	ee09 3a10 	vmov	s18, r3
        mask_bottom_id = lv_draw_mask_add(&mask_bottom_param, NULL);
 800d7a8:	f000 ff72 	bl	800e690 <lv_draw_mask_add>
 800d7ac:	9008      	str	r0, [sp, #32]
 800d7ae:	e590      	b.n	800d2d2 <lv_draw_line+0x206>
        lv_draw_mask_line_points_init(&mask_left_param, p1.x + w_half1, p1.y, p2.x + w_half1, p2.y,
 800d7b0:	fa1f f288 	uxth.w	r2, r8
 800d7b4:	f8bd a01c 	ldrh.w	sl, [sp, #28]
 800d7b8:	fa1f f88b 	uxth.w	r8, fp
 800d7bc:	f04f 0c00 	mov.w	ip, #0
 800d7c0:	eb0a 0102 	add.w	r1, sl, r2
 800d7c4:	a813      	add	r0, sp, #76	; 0x4c
 800d7c6:	eb02 0308 	add.w	r3, r2, r8
 800d7ca:	9500      	str	r5, [sp, #0]
 800d7cc:	4632      	mov	r2, r6
 800d7ce:	b209      	sxth	r1, r1
 800d7d0:	b21b      	sxth	r3, r3
 800d7d2:	f8cd c004 	str.w	ip, [sp, #4]
 800d7d6:	ee08 0a10 	vmov	s16, r0
 800d7da:	f001 f8df 	bl	800e99c <lv_draw_mask_line_points_init>
        lv_draw_mask_line_points_init(&mask_right_param, p1.x - w_half0, p1.y, p2.x - w_half0, p2.y,
 800d7de:	b2b9      	uxth	r1, r7
 800d7e0:	2301      	movs	r3, #1
 800d7e2:	f10d 0978 	add.w	r9, sp, #120	; 0x78
 800d7e6:	4632      	mov	r2, r6
 800d7e8:	9301      	str	r3, [sp, #4]
 800d7ea:	eba8 0301 	sub.w	r3, r8, r1
 800d7ee:	ebaa 0101 	sub.w	r1, sl, r1
 800d7f2:	4648      	mov	r0, r9
 800d7f4:	b21b      	sxth	r3, r3
 800d7f6:	9500      	str	r5, [sp, #0]
 800d7f8:	b209      	sxth	r1, r1
 800d7fa:	f001 f8cf 	bl	800e99c <lv_draw_mask_line_points_init>
 800d7fe:	e54f      	b.n	800d2a0 <lv_draw_line+0x1d4>
    size_t mask_buf_size = LV_MATH_MIN(lv_area_get_size(&draw_area), hor_res);
 800d800:	a80f      	add	r0, sp, #60	; 0x3c
 800d802:	f006 fb8f 	bl	8013f24 <lv_area_get_size>
 800d806:	4682      	mov	sl, r0
 800d808:	e591      	b.n	800d32e <lv_draw_line+0x262>
            cir_area.x1 = point1->x - r;
 800d80a:	9a04      	ldr	r2, [sp, #16]
 800d80c:	b2b3      	uxth	r3, r6
 800d80e:	8811      	ldrh	r1, [r2, #0]
            cir_area.y1 = point1->y - r;
 800d810:	f8b2 e002 	ldrh.w	lr, [r2, #2]
            lv_draw_rect(&cir_area, clip, &cir_dsc);
 800d814:	462a      	mov	r2, r5
            cir_area.x2 = point1->x + r - r_corr;
 800d816:	18c8      	adds	r0, r1, r3
            cir_area.x1 = point1->x - r;
 800d818:	1ac9      	subs	r1, r1, r3
            cir_area.y2 = point1->y + r - r_corr ;
 800d81a:	eb03 0c0e 	add.w	ip, r3, lr
            cir_area.y1 = point1->y - r;
 800d81e:	ebae 0303 	sub.w	r3, lr, r3
            cir_area.x2 = point1->x + r - r_corr;
 800d822:	1bc0      	subs	r0, r0, r7
            cir_area.x1 = point1->x - r;
 800d824:	f8ad 10a4 	strh.w	r1, [sp, #164]	; 0xa4
            cir_area.y2 = point1->y + r - r_corr ;
 800d828:	ebac 0c07 	sub.w	ip, ip, r7
            lv_draw_rect(&cir_area, clip, &cir_dsc);
 800d82c:	9906      	ldr	r1, [sp, #24]
            cir_area.x2 = point1->x + r - r_corr;
 800d82e:	f8ad 00a8 	strh.w	r0, [sp, #168]	; 0xa8
            lv_draw_rect(&cir_area, clip, &cir_dsc);
 800d832:	a829      	add	r0, sp, #164	; 0xa4
            cir_area.y2 = point1->y + r - r_corr ;
 800d834:	f8ad c0aa 	strh.w	ip, [sp, #170]	; 0xaa
            cir_area.y1 = point1->y - r;
 800d838:	f8ad 30a6 	strh.w	r3, [sp, #166]	; 0xa6
            lv_draw_rect(&cir_area, clip, &cir_dsc);
 800d83c:	f001 fda0 	bl	800f380 <lv_draw_rect>
 800d840:	7ae2      	ldrb	r2, [r4, #11]
 800d842:	e5fe      	b.n	800d442 <lv_draw_line+0x376>
        is_common = _lv_area_intersect(&draw_area, clip, &draw_area);
 800d844:	aa29      	add	r2, sp, #164	; 0xa4
 800d846:	a90d      	add	r1, sp, #52	; 0x34
 800d848:	4610      	mov	r0, r2
 800d84a:	f006 fb79 	bl	8013f40 <_lv_area_intersect>
        if(!is_common) return;
 800d84e:	2800      	cmp	r0, #0
 800d850:	f43f addc 	beq.w	800d40c <lv_draw_line+0x340>
        draw_area.x1 -= disp_area->x1;
 800d854:	f9b9 5010 	ldrsh.w	r5, [r9, #16]
        draw_area.x2 -= disp_area->x1;
 800d858:	f9bd c0a8 	ldrsh.w	ip, [sp, #168]	; 0xa8
        draw_area.x1 -= disp_area->x1;
 800d85c:	f9bd e0a4 	ldrsh.w	lr, [sp, #164]	; 0xa4
 800d860:	b2aa      	uxth	r2, r5
        draw_area.x2 -= disp_area->x1;
 800d862:	fa1f f38c 	uxth.w	r3, ip
        draw_area.y1 -= disp_area->y1;
 800d866:	f8b9 7012 	ldrh.w	r7, [r9, #18]
        draw_area.x1 -= disp_area->x1;
 800d86a:	fa1f f68e 	uxth.w	r6, lr
        draw_area.y1 -= disp_area->y1;
 800d86e:	f9bd 00a6 	ldrsh.w	r0, [sp, #166]	; 0xa6
        fill_area.x2 = draw_area.x2 + disp_area->x1;
 800d872:	f8ad c0d4 	strh.w	ip, [sp, #212]	; 0xd4
        draw_area.x1 -= disp_area->x1;
 800d876:	1ab1      	subs	r1, r6, r2
        draw_area.x2 -= disp_area->x1;
 800d878:	1a9a      	subs	r2, r3, r2
 800d87a:	3301      	adds	r3, #1
        draw_area.y1 -= disp_area->y1;
 800d87c:	eba0 0c07 	sub.w	ip, r0, r7
        draw_area.x1 -= disp_area->x1;
 800d880:	b209      	sxth	r1, r1
        fill_area.x1 = draw_area.x1 + disp_area->x1;
 800d882:	f8ad e0d0 	strh.w	lr, [sp, #208]	; 0xd0
 800d886:	1b9b      	subs	r3, r3, r6
        draw_area.y2 -= disp_area->y1;
 800d888:	f8bd 60aa 	ldrh.w	r6, [sp, #170]	; 0xaa
        draw_area.x1 -= disp_area->x1;
 800d88c:	f8ad 10a4 	strh.w	r1, [sp, #164]	; 0xa4
        draw_area.y2 -= disp_area->y1;
 800d890:	1bf7      	subs	r7, r6, r7
        draw_area.x2 -= disp_area->x1;
 800d892:	f8ad 20a8 	strh.w	r2, [sp, #168]	; 0xa8
 800d896:	b21e      	sxth	r6, r3
        fill_area.y1 = draw_area.y1 + disp_area->y1;
 800d898:	f8ad 00d2 	strh.w	r0, [sp, #210]	; 0xd2
        fill_area.y2 = fill_area.y1;
 800d89c:	f8ad 00d6 	strh.w	r0, [sp, #214]	; 0xd6
        draw_area.y1 -= disp_area->y1;
 800d8a0:	f8ad c0a6 	strh.w	ip, [sp, #166]	; 0xa6
        draw_area.y2 -= disp_area->y1;
 800d8a4:	f8ad 70aa 	strh.w	r7, [sp, #170]	; 0xaa
        if(dashed) {
 800d8a8:	f1ba 0f00 	cmp.w	sl, #0
 800d8ac:	d07a      	beq.n	800d9a4 <lv_draw_line+0x8d8>
            dash_start = (vdb->area.x1 + draw_area.x1) % (dsc->dash_gap + dsc->dash_width);
 800d8ae:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800d8b2:	4429      	add	r1, r5
 800d8b4:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 800d8b8:	4413      	add	r3, r2
 800d8ba:	fb91 f2f3 	sdiv	r2, r1, r3
 800d8be:	fb03 1112 	mls	r1, r3, r2, r1
 800d8c2:	b20b      	sxth	r3, r1
 800d8c4:	9307      	str	r3, [sp, #28]
        lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
 800d8c6:	4630      	mov	r0, r6
 800d8c8:	f007 fe2e 	bl	8015528 <_lv_mem_buf_get>
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800d8cc:	f9bd 70a6 	ldrsh.w	r7, [sp, #166]	; 0xa6
 800d8d0:	f9bd 30aa 	ldrsh.w	r3, [sp, #170]	; 0xaa
        lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
 800d8d4:	4680      	mov	r8, r0
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800d8d6:	429f      	cmp	r7, r3
 800d8d8:	dc60      	bgt.n	800d99c <lv_draw_line+0x8d0>
 800d8da:	ad34      	add	r5, sp, #208	; 0xd0
                    for(i = 0; i < draw_area_w; i++, dash_cnt++) {
 800d8dc:	f04f 0b00 	mov.w	fp, #0
 800d8e0:	462b      	mov	r3, r5
 800d8e2:	4655      	mov	r5, sl
 800d8e4:	469a      	mov	sl, r3
 800d8e6:	e01b      	b.n	800d920 <lv_draw_line+0x854>
                           dsc->blend_mode);
 800d8e8:	7ae2      	ldrb	r2, [r4, #11]
            _lv_blend_fill(clip, &fill_area,
 800d8ea:	4643      	mov	r3, r8
 800d8ec:	7aa0      	ldrb	r0, [r4, #10]
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800d8ee:	3701      	adds	r7, #1
            _lv_blend_fill(clip, &fill_area,
 800d8f0:	f002 0203 	and.w	r2, r2, #3
 800d8f4:	e9cd 1000 	strd	r1, r0, [sp]
 800d8f8:	9202      	str	r2, [sp, #8]
 800d8fa:	4651      	mov	r1, sl
 800d8fc:	6822      	ldr	r2, [r4, #0]
 800d8fe:	a80d      	add	r0, sp, #52	; 0x34
 800d900:	f7fc fa2c 	bl	8009d5c <_lv_blend_fill>
            fill_area.y1++;
 800d904:	f8bd 20d2 	ldrh.w	r2, [sp, #210]	; 0xd2
            fill_area.y2++;
 800d908:	f8bd 30d6 	ldrh.w	r3, [sp, #214]	; 0xd6
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800d90c:	f9bd 10aa 	ldrsh.w	r1, [sp, #170]	; 0xaa
            fill_area.y1++;
 800d910:	3201      	adds	r2, #1
            fill_area.y2++;
 800d912:	3301      	adds	r3, #1
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800d914:	428f      	cmp	r7, r1
            fill_area.y1++;
 800d916:	f8ad 20d2 	strh.w	r2, [sp, #210]	; 0xd2
            fill_area.y2++;
 800d91a:	f8ad 30d6 	strh.w	r3, [sp, #214]	; 0xd6
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800d91e:	dc3d      	bgt.n	800d99c <lv_draw_line+0x8d0>
            _lv_memset_ff(mask_buf, draw_area_w);
 800d920:	4631      	mov	r1, r6
 800d922:	4640      	mov	r0, r8
 800d924:	f007 ff8e 	bl	8015844 <_lv_memset_ff>
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
 800d928:	f8b9 2012 	ldrh.w	r2, [r9, #18]
 800d92c:	f8b9 1010 	ldrh.w	r1, [r9, #16]
 800d930:	4633      	mov	r3, r6
 800d932:	f8bd c0a4 	ldrh.w	ip, [sp, #164]	; 0xa4
 800d936:	443a      	add	r2, r7
 800d938:	4640      	mov	r0, r8
 800d93a:	4461      	add	r1, ip
 800d93c:	b212      	sxth	r2, r2
 800d93e:	b209      	sxth	r1, r1
 800d940:	f000 ff04 	bl	800e74c <lv_draw_mask_apply>
 800d944:	4601      	mov	r1, r0
            if(dashed) {
 800d946:	2d00      	cmp	r5, #0
 800d948:	d0ce      	beq.n	800d8e8 <lv_draw_line+0x81c>
                if(mask_res != LV_DRAW_MASK_RES_TRANSP) {
 800d94a:	2800      	cmp	r0, #0
 800d94c:	d0cc      	beq.n	800d8e8 <lv_draw_line+0x81c>
                    for(i = 0; i < draw_area_w; i++, dash_cnt++) {
 800d94e:	2e00      	cmp	r6, #0
 800d950:	dd22      	ble.n	800d998 <lv_draw_line+0x8cc>
                    lv_style_int_t dash_cnt = dash_start;
 800d952:	9807      	ldr	r0, [sp, #28]
                    for(i = 0; i < draw_area_w; i++, dash_cnt++) {
 800d954:	2300      	movs	r3, #0
 800d956:	e007      	b.n	800d968 <lv_draw_line+0x89c>
                            i += diff;
 800d958:	ebac 0200 	sub.w	r2, ip, r0
 800d95c:	b208      	sxth	r0, r1
 800d95e:	b292      	uxth	r2, r2
                    for(i = 0; i < draw_area_w; i++, dash_cnt++) {
 800d960:	3201      	adds	r2, #1
 800d962:	b213      	sxth	r3, r2
 800d964:	429e      	cmp	r6, r3
 800d966:	dd17      	ble.n	800d998 <lv_draw_line+0x8cc>
                        if(dash_cnt <= dsc->dash_width) {
 800d968:	f9b4 e006 	ldrsh.w	lr, [r4, #6]
                            int16_t diff = dsc->dash_width - dash_cnt;
 800d96c:	fa1f f18e 	uxth.w	r1, lr
                        if(dash_cnt <= dsc->dash_width) {
 800d970:	4586      	cmp	lr, r0
                            i += diff;
 800d972:	eb01 0c03 	add.w	ip, r1, r3
 800d976:	f101 0101 	add.w	r1, r1, #1
                        if(dash_cnt <= dsc->dash_width) {
 800d97a:	daed      	bge.n	800d958 <lv_draw_line+0x88c>
                        else if(dash_cnt >= dsc->dash_gap + dsc->dash_width) {
 800d97c:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 800d980:	f100 0c01 	add.w	ip, r0, #1
 800d984:	b29a      	uxth	r2, r3
 800d986:	448e      	add	lr, r1
 800d988:	4570      	cmp	r0, lr
 800d98a:	fa0f f08c 	sxth.w	r0, ip
                            mask_buf[i] = 0x00;
 800d98e:	bfb4      	ite	lt
 800d990:	f808 b003 	strblt.w	fp, [r8, r3]
                        else if(dash_cnt >= dsc->dash_gap + dsc->dash_width) {
 800d994:	2001      	movge	r0, #1
 800d996:	e7e3      	b.n	800d960 <lv_draw_line+0x894>
                    mask_res = LV_DRAW_MASK_RES_CHANGED;
 800d998:	2102      	movs	r1, #2
 800d99a:	e7a5      	b.n	800d8e8 <lv_draw_line+0x81c>
        _lv_mem_buf_release(mask_buf);
 800d99c:	4640      	mov	r0, r8
 800d99e:	f007 fa9b 	bl	8014ed8 <_lv_mem_buf_release>
 800d9a2:	e533      	b.n	800d40c <lv_draw_line+0x340>
        lv_style_int_t dash_start = 0;
 800d9a4:	f8cd a01c 	str.w	sl, [sp, #28]
 800d9a8:	e78d      	b.n	800d8c6 <lv_draw_line+0x7fa>
            dash_start = (vdb->area.y1 + draw_area.y1) % (dsc->dash_gap + dsc->dash_width);
 800d9aa:	f9b6 2012 	ldrsh.w	r2, [r6, #18]
 800d9ae:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 800d9b2:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 800d9b6:	444a      	add	r2, r9
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800d9b8:	f9bd 10aa 	ldrsh.w	r1, [sp, #170]	; 0xaa
            dash_start = (vdb->area.y1 + draw_area.y1) % (dsc->dash_gap + dsc->dash_width);
 800d9bc:	4403      	add	r3, r0
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800d9be:	4589      	cmp	r9, r1
            dash_start = (vdb->area.y1 + draw_area.y1) % (dsc->dash_gap + dsc->dash_width);
 800d9c0:	fb92 faf3 	sdiv	sl, r2, r3
 800d9c4:	fb03 231a 	mls	r3, r3, sl, r2
 800d9c8:	fa0f fa83 	sxth.w	sl, r3
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800d9cc:	f73f adf6 	bgt.w	800d5bc <lv_draw_line+0x4f0>
 800d9d0:	ad34      	add	r5, sp, #208	; 0xd0
 800d9d2:	e01d      	b.n	800da10 <lv_draw_line+0x944>
 800d9d4:	fa0f fa83 	sxth.w	sl, r3
            _lv_blend_fill(clip, &fill_area,
 800d9d8:	7aa2      	ldrb	r2, [r4, #10]
 800d9da:	463b      	mov	r3, r7
 800d9dc:	9000      	str	r0, [sp, #0]
 800d9de:	4629      	mov	r1, r5
 800d9e0:	f8cd b008 	str.w	fp, [sp, #8]
 800d9e4:	a80d      	add	r0, sp, #52	; 0x34
 800d9e6:	9201      	str	r2, [sp, #4]
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800d9e8:	f109 0901 	add.w	r9, r9, #1
            _lv_blend_fill(clip, &fill_area,
 800d9ec:	6822      	ldr	r2, [r4, #0]
 800d9ee:	f7fc f9b5 	bl	8009d5c <_lv_blend_fill>
            fill_area.y1++;
 800d9f2:	f8bd 20d2 	ldrh.w	r2, [sp, #210]	; 0xd2
            fill_area.y2++;
 800d9f6:	f8bd 30d6 	ldrh.w	r3, [sp, #214]	; 0xd6
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800d9fa:	f9bd 10aa 	ldrsh.w	r1, [sp, #170]	; 0xaa
            fill_area.y1++;
 800d9fe:	3201      	adds	r2, #1
            fill_area.y2++;
 800da00:	3301      	adds	r3, #1
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800da02:	4589      	cmp	r9, r1
            fill_area.y1++;
 800da04:	f8ad 20d2 	strh.w	r2, [sp, #210]	; 0xd2
            fill_area.y2++;
 800da08:	f8ad 30d6 	strh.w	r3, [sp, #214]	; 0xd6
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800da0c:	f73f add6 	bgt.w	800d5bc <lv_draw_line+0x4f0>
            _lv_memset_ff(mask_buf, draw_area_w);
 800da10:	4641      	mov	r1, r8
 800da12:	4638      	mov	r0, r7
 800da14:	f007 ff16 	bl	8015844 <_lv_memset_ff>
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
 800da18:	8a72      	ldrh	r2, [r6, #18]
 800da1a:	8a31      	ldrh	r1, [r6, #16]
 800da1c:	4643      	mov	r3, r8
 800da1e:	f8bd c0a4 	ldrh.w	ip, [sp, #164]	; 0xa4
 800da22:	444a      	add	r2, r9
 800da24:	4638      	mov	r0, r7
 800da26:	4461      	add	r1, ip
 800da28:	b212      	sxth	r2, r2
 800da2a:	b209      	sxth	r1, r1
 800da2c:	f000 fe8e 	bl	800e74c <lv_draw_mask_apply>
                if(mask_res != LV_DRAW_MASK_RES_TRANSP) {
 800da30:	f10a 0301 	add.w	r3, sl, #1
 800da34:	2800      	cmp	r0, #0
 800da36:	d0cd      	beq.n	800d9d4 <lv_draw_line+0x908>
                    if(dash_cnt > dsc->dash_width) {
 800da38:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800da3c:	f10a 0101 	add.w	r1, sl, #1
                    if(dash_cnt >= dsc->dash_gap + dsc->dash_width) {
 800da40:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
                        mask_res = LV_DRAW_MASK_RES_TRANSP;
 800da44:	4552      	cmp	r2, sl
 800da46:	bfb8      	it	lt
 800da48:	2000      	movlt	r0, #0
                    if(dash_cnt >= dsc->dash_gap + dsc->dash_width) {
 800da4a:	4413      	add	r3, r2
 800da4c:	459a      	cmp	sl, r3
 800da4e:	fa0f fa81 	sxth.w	sl, r1
 800da52:	bfa8      	it	ge
 800da54:	f04f 0a01 	movge.w	sl, #1
 800da58:	e7be      	b.n	800d9d8 <lv_draw_line+0x90c>
 800da5a:	bf00      	nop

0800da5c <lv_draw_mask_line>:
 **********************/

LV_ATTRIBUTE_FAST_MEM static lv_draw_mask_res_t lv_draw_mask_line(lv_opa_t * mask_buf, lv_coord_t abs_x,
                                                                  lv_coord_t abs_y, lv_coord_t len,
                                                                  lv_draw_mask_line_param_t * p)
{
 800da5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da60:	9d06      	ldr	r5, [sp, #24]
    /*Make to points relative to the vertex*/
    abs_y -= p->origo.y;
 800da62:	8aac      	ldrh	r4, [r5, #20]
    abs_x -= p->origo.x;
 800da64:	8a6e      	ldrh	r6, [r5, #18]
    abs_y -= p->origo.y;
 800da66:	1b12      	subs	r2, r2, r4

    /*Handle special cases*/
    if(p->steep == 0) {
 800da68:	6a2c      	ldr	r4, [r5, #32]
    abs_x -= p->origo.x;
 800da6a:	1b8e      	subs	r6, r1, r6
    abs_y -= p->origo.y;
 800da6c:	b212      	sxth	r2, r2
    abs_x -= p->origo.x;
 800da6e:	b236      	sxth	r6, r6
    if(p->steep == 0) {
 800da70:	bb6c      	cbnz	r4, 800dace <lv_draw_mask_line+0x72>
        /*Horizontal*/
        if(p->flat) {
 800da72:	f895 4028 	ldrb.w	r4, [r5, #40]	; 0x28
 800da76:	f014 0401 	ands.w	r4, r4, #1
 800da7a:	d011      	beq.n	800daa0 <lv_draw_mask_line+0x44>
            /*Non sense: Can't be on the right/left of a horizontal line*/
            if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT ||
 800da7c:	7c2b      	ldrb	r3, [r5, #16]
 800da7e:	0799      	lsls	r1, r3, #30
 800da80:	d50b      	bpl.n	800da9a <lv_draw_mask_line+0x3e>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP && abs_y + 1 < 0) return LV_DRAW_MASK_RES_FULL_COVER;
 800da82:	f003 0303 	and.w	r3, r3, #3
 800da86:	2b02      	cmp	r3, #2
 800da88:	f000 80e2 	beq.w	800dc50 <lv_draw_mask_line+0x1f4>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
 800da8c:	2a00      	cmp	r2, #0
 800da8e:	bfd4      	ite	le
 800da90:	2400      	movle	r4, #0
 800da92:	2401      	movgt	r4, #1
 800da94:	2b03      	cmp	r3, #3
 800da96:	bf18      	it	ne
 800da98:	2400      	movne	r4, #0
    else {
        res = line_mask_steep(mask_buf, abs_x, abs_y, len, p);
    }

    return res;
}
 800da9a:	4620      	mov	r0, r4
 800da9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP ||
 800daa0:	7c2c      	ldrb	r4, [r5, #16]
 800daa2:	f014 0102 	ands.w	r1, r4, #2
 800daa6:	f040 80c3 	bne.w	800dc30 <lv_draw_mask_line+0x1d4>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT && abs_x > 0) return LV_DRAW_MASK_RES_FULL_COVER;
 800daaa:	f004 0403 	and.w	r4, r4, #3
 800daae:	2c01      	cmp	r4, #1
 800dab0:	f000 80c2 	beq.w	800dc38 <lv_draw_mask_line+0x1dc>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT) {
 800dab4:	2c00      	cmp	r4, #0
 800dab6:	f040 80fe 	bne.w	800dcb6 <lv_draw_mask_line+0x25a>
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_FULL_COVER;
 800daba:	18f1      	adds	r1, r6, r3
 800dabc:	f100 80b8 	bmi.w	800dc30 <lv_draw_mask_line+0x1d4>
                    if(k < 0) return LV_DRAW_MASK_RES_TRANSP;
 800dac0:	2e00      	cmp	r6, #0
 800dac2:	f340 80e3 	ble.w	800dc8c <lv_draw_mask_line+0x230>
 800dac6:	2400      	movs	r4, #0
}
 800dac8:	4620      	mov	r0, r4
 800daca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(p->flat) {
 800dace:	f895 4028 	ldrb.w	r4, [r5, #40]	; 0x28
 800dad2:	07e7      	lsls	r7, r4, #31
 800dad4:	d552      	bpl.n	800db7c <lv_draw_mask_line+0x120>
LV_ATTRIBUTE_FAST_MEM static lv_draw_mask_res_t line_mask_flat(lv_opa_t * mask_buf, lv_coord_t abs_x, lv_coord_t abs_y,
                                                               lv_coord_t len,
                                                               lv_draw_mask_line_param_t * p)
{
    int32_t y_at_x;
    y_at_x = (int32_t)((int32_t)p->yx_steep * abs_x) >> 10;
 800dad6:	69e9      	ldr	r1, [r5, #28]
 800dad8:	fb06 f701 	mul.w	r7, r6, r1

    if(p->yx_steep > 0) {
 800dadc:	2900      	cmp	r1, #0
    y_at_x = (int32_t)((int32_t)p->yx_steep * abs_x) >> 10;
 800dade:	ea4f 27a7 	mov.w	r7, r7, asr #10
    if(p->yx_steep > 0) {
 800dae2:	f340 8096 	ble.w	800dc12 <lv_draw_mask_line+0x1b6>
        if(y_at_x > abs_y) {
 800dae6:	4297      	cmp	r7, r2
 800dae8:	f300 809d 	bgt.w	800dc26 <lv_draw_mask_line+0x1ca>
        }
    }

    /* At the end of the mask if the limit line is smaller then the mask's y.
     * Then the mask is in the "good" area*/
    y_at_x = (int32_t)((int32_t)p->yx_steep * (abs_x + len)) >> 10;
 800daec:	18f7      	adds	r7, r6, r3
 800daee:	fb01 f107 	mul.w	r1, r1, r7
    if(p->yx_steep > 0) {
        if(y_at_x < abs_y) {
 800daf2:	ebb2 2fa1 	cmp.w	r2, r1, asr #10
 800daf6:	f300 8094 	bgt.w	800dc22 <lv_draw_mask_line+0x1c6>
            }
        }
    }

    int32_t xe;
    if(p->yx_steep > 0) xe = ((abs_y << 8) * p->xy_steep) >> 10;
 800dafa:	0212      	lsls	r2, r2, #8
 800dafc:	69af      	ldr	r7, [r5, #24]
 800dafe:	fb07 f702 	mul.w	r7, r7, r2
 800db02:	12bf      	asrs	r7, r7, #10
    else xe = (((abs_y + 1) << 8) * p->xy_steep) >> 10;

    int32_t xei = xe >> 8;
 800db04:	123a      	asrs	r2, r7, #8
    int32_t xef = xe & 0xFF;

    int32_t px_h;
    if(xef == 0) px_h = 255;
 800db06:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
 800db0a:	f000 8113 	beq.w	800dd34 <lv_draw_mask_line+0x2d8>
    else px_h = 255 - (((255 - xef) * p->spx) >> 8);
 800db0e:	f1c7 0eff 	rsb	lr, r7, #255	; 0xff
 800db12:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    int32_t k = xei - abs_x;
    lv_opa_t m;

    if(xef) {
        if(k >= 0 && k < len) {
 800db14:	1b91      	subs	r1, r2, r6
    else px_h = 255 - (((255 - xef) * p->spx) >> 8);
 800db16:	fb07 f80e 	mul.w	r8, r7, lr
 800db1a:	ea4f 2828 	mov.w	r8, r8, asr #8
 800db1e:	f1c8 0cff 	rsb	ip, r8, #255	; 0xff
        if(k >= 0 && k < len) {
 800db22:	d402      	bmi.n	800db2a <lv_draw_mask_line+0xce>
 800db24:	4299      	cmp	r1, r3
 800db26:	f2c0 8134 	blt.w	800dd92 <lv_draw_mask_line+0x336>
            m = 255 - (((255 - xef) * (255 - px_h)) >> 9);
            if(p->inv) m = 255 - m;
            mask_buf[k] = mask_mix(mask_buf[k], m);
        }
        k++;
 800db2a:	1c4a      	adds	r2, r1, #1
 800db2c:	e005      	b.n	800db3a <lv_draw_mask_line+0xde>
            m = px_h - (p->spx >> 1);
            if(p->inv) m = 255 - m;
            mask_buf[k] = mask_mix(mask_buf[k], m);
        }
        px_h -= p->spx;
        k++;
 800db2e:	3201      	adds	r2, #1
        px_h -= p->spx;
 800db30:	ebac 0c07 	sub.w	ip, ip, r7
        if(k >= len) break;
 800db34:	429a      	cmp	r2, r3
 800db36:	f280 80b1 	bge.w	800dc9c <lv_draw_mask_line+0x240>
    while(px_h > p->spx) {
 800db3a:	45bc      	cmp	ip, r7
 800db3c:	f340 80c7 	ble.w	800dcce <lv_draw_mask_line+0x272>
        if(k >= 0 && k < len) {
 800db40:	429a      	cmp	r2, r3
 800db42:	daf4      	bge.n	800db2e <lv_draw_mask_line+0xd2>
 800db44:	2a00      	cmp	r2, #0
 800db46:	dbf2      	blt.n	800db2e <lv_draw_mask_line+0xd2>
            m = px_h - (p->spx >> 1);
 800db48:	ebac 0767 	sub.w	r7, ip, r7, asr #1
            if(p->inv) m = 255 - m;
 800db4c:	07a4      	lsls	r4, r4, #30
            m = px_h - (p->spx >> 1);
 800db4e:	b2ff      	uxtb	r7, r7
            if(p->inv) m = 255 - m;
 800db50:	d501      	bpl.n	800db56 <lv_draw_mask_line+0xfa>
 800db52:	43ff      	mvns	r7, r7
 800db54:	b2ff      	uxtb	r7, r7
    return LV_DRAW_MASK_RES_CHANGED;
}

LV_ATTRIBUTE_FAST_MEM static inline lv_opa_t mask_mix(lv_opa_t mask_act, lv_opa_t mask_new)
{
    if(mask_new >= LV_OPA_MAX) return mask_act;
 800db56:	2ffc      	cmp	r7, #252	; 0xfc
            mask_buf[k] = mask_mix(mask_buf[k], m);
 800db58:	5c84      	ldrb	r4, [r0, r2]
    if(mask_new >= LV_OPA_MAX) return mask_act;
 800db5a:	d80a      	bhi.n	800db72 <lv_draw_mask_line+0x116>
    if(mask_new <= LV_OPA_MIN) return 0;
 800db5c:	2f02      	cmp	r7, #2
 800db5e:	f240 80b4 	bls.w	800dcca <lv_draw_mask_line+0x26e>

    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
 800db62:	fb14 f707 	smulbb	r7, r4, r7
 800db66:	eb07 2407 	add.w	r4, r7, r7, lsl #8
 800db6a:	eb07 17c4 	add.w	r7, r7, r4, lsl #7
 800db6e:	f3c7 54c7 	ubfx	r4, r7, #23, #8
            mask_buf[k] = mask_mix(mask_buf[k], m);
 800db72:	5484      	strb	r4, [r0, r2]
 800db74:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 800db76:	f895 4028 	ldrb.w	r4, [r5, #40]	; 0x28
 800db7a:	e7d8      	b.n	800db2e <lv_draw_mask_line+0xd2>
    x_at_y = (int32_t)((int32_t)p->xy_steep * abs_y) >> 10;
 800db7c:	69af      	ldr	r7, [r5, #24]
 800db7e:	fb02 f107 	mul.w	r1, r2, r7
    if(p->xy_steep > 0) x_at_y++;
 800db82:	2f00      	cmp	r7, #0
    x_at_y = (int32_t)((int32_t)p->xy_steep * abs_y) >> 10;
 800db84:	ea4f 21a1 	mov.w	r1, r1, asr #10
    if(p->xy_steep > 0) x_at_y++;
 800db88:	bfcc      	ite	gt
 800db8a:	f101 0c01 	addgt.w	ip, r1, #1
    x_at_y = (int32_t)((int32_t)p->xy_steep * abs_y) >> 10;
 800db8e:	468c      	movle	ip, r1
    if(x_at_y < abs_x) {
 800db90:	4566      	cmp	r6, ip
 800db92:	dc48      	bgt.n	800dc26 <lv_draw_mask_line+0x1ca>
    if(x_at_y > abs_x + len) {
 800db94:	eb06 0c03 	add.w	ip, r6, r3
 800db98:	4561      	cmp	r1, ip
 800db9a:	dc42      	bgt.n	800dc22 <lv_draw_mask_line+0x1c6>
    int32_t xe = (((abs_y + 1) << 8) * p->xy_steep) >> 10;
 800db9c:	f102 0c01 	add.w	ip, r2, #1
    int32_t xs = ((abs_y << 8) * p->xy_steep) >> 10;
 800dba0:	0212      	lsls	r2, r2, #8
    int32_t xe = (((abs_y + 1) << 8) * p->xy_steep) >> 10;
 800dba2:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
    int32_t xs = ((abs_y << 8) * p->xy_steep) >> 10;
 800dba6:	fb07 f202 	mul.w	r2, r7, r2
    int32_t xe = (((abs_y + 1) << 8) * p->xy_steep) >> 10;
 800dbaa:	fb07 fc0c 	mul.w	ip, r7, ip
    int32_t xsf = xs & 0xFF;
 800dbae:	f3c2 2887 	ubfx	r8, r2, #10, #8
    k = xsi - abs_x;
 800dbb2:	ebc6 41a2 	rsb	r1, r6, r2, asr #18
    int32_t xei = xe >> 8;
 800dbb6:	ea4f 4eac 	mov.w	lr, ip, asr #18
    if(xsi != xei && (p->xy_steep < 0 && xsf == 0)) {
 800dbba:	ebbe 4fa2 	cmp.w	lr, r2, asr #18
 800dbbe:	d053      	beq.n	800dc68 <lv_draw_mask_line+0x20c>
 800dbc0:	2f00      	cmp	r7, #0
 800dbc2:	f280 80bd 	bge.w	800dd40 <lv_draw_mask_line+0x2e4>
 800dbc6:	f1b8 0f00 	cmp.w	r8, #0
 800dbca:	f000 8107 	beq.w	800dddc <lv_draw_mask_line+0x380>
        if(p->xy_steep < 0) {
 800dbce:	2f00      	cmp	r7, #0
 800dbd0:	f280 80b6 	bge.w	800dd40 <lv_draw_mask_line+0x2e4>
            y_inters = (xsf * (-p->yx_steep)) >> 10;
 800dbd4:	69ea      	ldr	r2, [r5, #28]
            if(k >= 0 && k < len) {
 800dbd6:	2900      	cmp	r1, #0
            y_inters = (xsf * (-p->yx_steep)) >> 10;
 800dbd8:	f1c2 0200 	rsb	r2, r2, #0
 800dbdc:	fb08 f202 	mul.w	r2, r8, r2
 800dbe0:	ea4f 22a2 	mov.w	r2, r2, asr #10
            if(k >= 0 && k < len) {
 800dbe4:	db02      	blt.n	800dbec <lv_draw_mask_line+0x190>
 800dbe6:	428b      	cmp	r3, r1
 800dbe8:	f300 8155 	bgt.w	800de96 <lv_draw_mask_line+0x43a>
            if(k >= 0 && k < len) {
 800dbec:	2900      	cmp	r1, #0
            k--;
 800dbee:	f101 36ff 	add.w	r6, r1, #4294967295
            if(k >= 0 && k < len) {
 800dbf2:	dd02      	ble.n	800dbfa <lv_draw_mask_line+0x19e>
 800dbf4:	42b3      	cmp	r3, r6
 800dbf6:	f300 816a 	bgt.w	800dece <lv_draw_mask_line+0x472>
            if(p->inv) {
 800dbfa:	07a2      	lsls	r2, r4, #30
 800dbfc:	f140 80e6 	bpl.w	800ddcc <lv_draw_mask_line+0x370>
                else if(k > 0) _lv_memset_00(&mask_buf[0],  k);
 800dc00:	42b3      	cmp	r3, r6
 800dc02:	db02      	blt.n	800dc0a <lv_draw_mask_line+0x1ae>
 800dc04:	2e00      	cmp	r6, #0
 800dc06:	f300 8184 	bgt.w	800df12 <lv_draw_mask_line+0x4b6>
    return LV_DRAW_MASK_RES_CHANGED;
 800dc0a:	2402      	movs	r4, #2
}
 800dc0c:	4620      	mov	r0, r4
 800dc0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(y_at_x < abs_y) {
 800dc12:	4297      	cmp	r7, r2
 800dc14:	db07      	blt.n	800dc26 <lv_draw_mask_line+0x1ca>
    y_at_x = (int32_t)((int32_t)p->yx_steep * (abs_x + len)) >> 10;
 800dc16:	18f7      	adds	r7, r6, r3
 800dc18:	fb01 f107 	mul.w	r1, r1, r7
        if(y_at_x > abs_y) {
 800dc1c:	ebb2 2fa1 	cmp.w	r2, r1, asr #10
 800dc20:	da1b      	bge.n	800dc5a <lv_draw_mask_line+0x1fe>
        if(p->inv) {
 800dc22:	f084 0402 	eor.w	r4, r4, #2
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
 800dc26:	f3c4 0440 	ubfx	r4, r4, #1, #1
}
 800dc2a:	4620      	mov	r0, r4
 800dc2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                if(k > len) return LV_DRAW_MASK_RES_FULL_COVER;
 800dc30:	2401      	movs	r4, #1
}
 800dc32:	4620      	mov	r0, r4
 800dc34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT && abs_x > 0) return LV_DRAW_MASK_RES_FULL_COVER;
 800dc38:	2e00      	cmp	r6, #0
 800dc3a:	f73f af2e 	bgt.w	800da9a <lv_draw_mask_line+0x3e>
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_TRANSP;
 800dc3e:	42de      	cmn	r6, r3
 800dc40:	f53f af41 	bmi.w	800dac6 <lv_draw_mask_line+0x6a>
                    int32_t k = - abs_x;
 800dc44:	4276      	negs	r6, r6
                    if(k >= len) return LV_DRAW_MASK_RES_TRANSP;
 800dc46:	429e      	cmp	r6, r3
 800dc48:	f6bf af3d 	bge.w	800dac6 <lv_draw_mask_line+0x6a>
 800dc4c:	4631      	mov	r1, r6
                    else if(k >= 0 && k < len) _lv_memset_00(&mask_buf[0], k);
 800dc4e:	e01a      	b.n	800dc86 <lv_draw_mask_line+0x22a>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
 800dc50:	3201      	adds	r2, #1
 800dc52:	bfac      	ite	ge
 800dc54:	2400      	movge	r4, #0
 800dc56:	2401      	movlt	r4, #1
 800dc58:	e71f      	b.n	800da9a <lv_draw_mask_line+0x3e>
    else xe = (((abs_y + 1) << 8) * p->xy_steep) >> 10;
 800dc5a:	3201      	adds	r2, #1
 800dc5c:	69af      	ldr	r7, [r5, #24]
 800dc5e:	0212      	lsls	r2, r2, #8
 800dc60:	fb07 f702 	mul.w	r7, r7, r2
 800dc64:	12bf      	asrs	r7, r7, #10
 800dc66:	e74d      	b.n	800db04 <lv_draw_mask_line+0xa8>
 800dc68:	1c4f      	adds	r7, r1, #1
        if(k >= 0 && k < len) {
 800dc6a:	2900      	cmp	r1, #0
 800dc6c:	db02      	blt.n	800dc74 <lv_draw_mask_line+0x218>
 800dc6e:	428b      	cmp	r3, r1
 800dc70:	f300 80f5 	bgt.w	800de5e <lv_draw_mask_line+0x402>
        if(p->inv) {
 800dc74:	07a2      	lsls	r2, r4, #30
 800dc76:	d57e      	bpl.n	800dd76 <lv_draw_mask_line+0x31a>
            k = xsi - abs_x;
 800dc78:	ebae 0106 	sub.w	r1, lr, r6
            if(k >= len) {
 800dc7c:	428b      	cmp	r3, r1
 800dc7e:	f77f af22 	ble.w	800dac6 <lv_draw_mask_line+0x6a>
                if(k >= 0) _lv_memset_00(&mask_buf[0],  k);
 800dc82:	2900      	cmp	r1, #0
 800dc84:	dbc1      	blt.n	800dc0a <lv_draw_mask_line+0x1ae>
                else if(k > 0) _lv_memset_00(&mask_buf[k],  len - k);
 800dc86:	f007 fd77 	bl	8015778 <_lv_memset_00>
 800dc8a:	e7be      	b.n	800dc0a <lv_draw_mask_line+0x1ae>
                    int32_t k = - abs_x;
 800dc8c:	4276      	negs	r6, r6
                    if(k >= 0 && k < len) _lv_memset_00(&mask_buf[k], len - k);
 800dc8e:	42b3      	cmp	r3, r6
 800dc90:	ddbb      	ble.n	800dc0a <lv_draw_mask_line+0x1ae>
 800dc92:	4430      	add	r0, r6
                    return LV_DRAW_MASK_RES_CHANGED;
 800dc94:	2402      	movs	r4, #2
                    if(k >= 0 && k < len) _lv_memset_00(&mask_buf[k], len - k);
 800dc96:	f007 fd6f 	bl	8015778 <_lv_memset_00>
 800dc9a:	e6fe      	b.n	800da9a <lv_draw_mask_line+0x3e>
    if(p->inv) {
 800dc9c:	07a5      	lsls	r5, r4, #30
 800dc9e:	d407      	bmi.n	800dcb0 <lv_draw_mask_line+0x254>
        if(k < 0) {
 800dca0:	3201      	adds	r2, #1
 800dca2:	f53f af10 	bmi.w	800dac6 <lv_draw_mask_line+0x6a>
        if(k <= len) {
 800dca6:	429a      	cmp	r2, r3
 800dca8:	dcaf      	bgt.n	800dc0a <lv_draw_mask_line+0x1ae>
                else if(k > 0) _lv_memset_00(&mask_buf[k],  len - k);
 800dcaa:	1a99      	subs	r1, r3, r2
 800dcac:	4410      	add	r0, r2
 800dcae:	e7ea      	b.n	800dc86 <lv_draw_mask_line+0x22a>
                if(k > len)  return LV_DRAW_MASK_RES_TRANSP;
 800dcb0:	428b      	cmp	r3, r1
 800dcb2:	dae6      	bge.n	800dc82 <lv_draw_mask_line+0x226>
 800dcb4:	e707      	b.n	800dac6 <lv_draw_mask_line+0x6a>
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_TRANSP;
 800dcb6:	42de      	cmn	r6, r3
 800dcb8:	f53f af05 	bmi.w	800dac6 <lv_draw_mask_line+0x6a>
                    if(k < 0) k = 0;
 800dcbc:	2e00      	cmp	r6, #0
 800dcbe:	f340 8139 	ble.w	800df34 <lv_draw_mask_line+0x4d8>
                    if(k >= len) return LV_DRAW_MASK_RES_TRANSP;
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	f77f aeff 	ble.w	800dac6 <lv_draw_mask_line+0x6a>
 800dcc8:	e7dd      	b.n	800dc86 <lv_draw_mask_line+0x22a>
    if(mask_new <= LV_OPA_MIN) return 0;
 800dcca:	2400      	movs	r4, #0
 800dccc:	e751      	b.n	800db72 <lv_draw_mask_line+0x116>
    if(k < len && k >= 0) {
 800dcce:	429a      	cmp	r2, r3
 800dcd0:	dae4      	bge.n	800dc9c <lv_draw_mask_line+0x240>
 800dcd2:	2a00      	cmp	r2, #0
 800dcd4:	dbe2      	blt.n	800dc9c <lv_draw_mask_line+0x240>
        int32_t x_inters = (px_h * p->xy_steep) >> 10;
 800dcd6:	69af      	ldr	r7, [r5, #24]
        if(p->yx_steep < 0) m = 255 - m;
 800dcd8:	69ee      	ldr	r6, [r5, #28]
        int32_t x_inters = (px_h * p->xy_steep) >> 10;
 800dcda:	fb07 f70c 	mul.w	r7, r7, ip
        if(p->yx_steep < 0) m = 255 - m;
 800dcde:	2e00      	cmp	r6, #0
        int32_t x_inters = (px_h * p->xy_steep) >> 10;
 800dce0:	ea4f 27a7 	mov.w	r7, r7, asr #10
        m = (x_inters * px_h) >> 9;
 800dce4:	fb0c fc07 	mul.w	ip, ip, r7
 800dce8:	f3cc 2c47 	ubfx	ip, ip, #9, #8
        if(p->yx_steep < 0) m = 255 - m;
 800dcec:	da03      	bge.n	800dcf6 <lv_draw_mask_line+0x29a>
 800dcee:	ea6f 0c0c 	mvn.w	ip, ip
 800dcf2:	fa5f fc8c 	uxtb.w	ip, ip
        if(p->inv) m = 255 - m;
 800dcf6:	07a7      	lsls	r7, r4, #30
 800dcf8:	d503      	bpl.n	800dd02 <lv_draw_mask_line+0x2a6>
 800dcfa:	ea6f 0c0c 	mvn.w	ip, ip
 800dcfe:	fa5f fc8c 	uxtb.w	ip, ip
    if(mask_new >= LV_OPA_MAX) return mask_act;
 800dd02:	f1bc 0ffc 	cmp.w	ip, #252	; 0xfc
        mask_buf[k] = mask_mix(mask_buf[k], m);
 800dd06:	eb00 0602 	add.w	r6, r0, r2
 800dd0a:	5c84      	ldrb	r4, [r0, r2]
    if(mask_new >= LV_OPA_MAX) return mask_act;
 800dd0c:	d80b      	bhi.n	800dd26 <lv_draw_mask_line+0x2ca>
    if(mask_new <= LV_OPA_MIN) return 0;
 800dd0e:	f1bc 0f02 	cmp.w	ip, #2
 800dd12:	f240 80fc 	bls.w	800df0e <lv_draw_mask_line+0x4b2>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
 800dd16:	fb14 f40c 	smulbb	r4, r4, ip
 800dd1a:	eb04 2704 	add.w	r7, r4, r4, lsl #8
 800dd1e:	eb04 14c7 	add.w	r4, r4, r7, lsl #7
 800dd22:	f3c4 54c7 	ubfx	r4, r4, #23, #8
        mask_buf[k] = mask_mix(mask_buf[k], m);
 800dd26:	7034      	strb	r4, [r6, #0]
    if(p->inv) {
 800dd28:	f895 4028 	ldrb.w	r4, [r5, #40]	; 0x28
 800dd2c:	07a6      	lsls	r6, r4, #30
 800dd2e:	d4bf      	bmi.n	800dcb0 <lv_draw_mask_line+0x254>
        k++;
 800dd30:	3201      	adds	r2, #1
        if(k < 0) {
 800dd32:	e7b8      	b.n	800dca6 <lv_draw_mask_line+0x24a>
    int32_t k = xei - abs_x;
 800dd34:	1b92      	subs	r2, r2, r6
    if(xef) {
 800dd36:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    if(xef == 0) px_h = 255;
 800dd38:	f04f 0cff 	mov.w	ip, #255	; 0xff
    int32_t k = xei - abs_x;
 800dd3c:	4611      	mov	r1, r2
 800dd3e:	e6fc      	b.n	800db3a <lv_draw_mask_line+0xde>
            y_inters = ((255 - xsf) * p->yx_steep) >> 10;
 800dd40:	f1c8 08ff 	rsb	r8, r8, #255	; 0xff
 800dd44:	69ea      	ldr	r2, [r5, #28]
            if(k >= 0 && k < len) {
 800dd46:	2900      	cmp	r1, #0
            y_inters = ((255 - xsf) * p->yx_steep) >> 10;
 800dd48:	fb02 f208 	mul.w	r2, r2, r8
 800dd4c:	ea4f 22a2 	mov.w	r2, r2, asr #10
            if(k >= 0 && k < len) {
 800dd50:	db01      	blt.n	800dd56 <lv_draw_mask_line+0x2fa>
 800dd52:	428b      	cmp	r3, r1
 800dd54:	dc47      	bgt.n	800dde6 <lv_draw_mask_line+0x38a>
            if(k >= 0 && k < len) {
 800dd56:	1c4e      	adds	r6, r1, #1
 800dd58:	d401      	bmi.n	800dd5e <lv_draw_mask_line+0x302>
 800dd5a:	42b3      	cmp	r3, r6
 800dd5c:	dc60      	bgt.n	800de20 <lv_draw_mask_line+0x3c4>
            if(p->inv) {
 800dd5e:	07a2      	lsls	r2, r4, #30
 800dd60:	d4a6      	bmi.n	800dcb0 <lv_draw_mask_line+0x254>
            k++;
 800dd62:	1c8a      	adds	r2, r1, #2
 800dd64:	429a      	cmp	r2, r3
 800dd66:	bfa8      	it	ge
 800dd68:	461a      	movge	r2, r3
                if(k == 0) return LV_DRAW_MASK_RES_TRANSP;
 800dd6a:	2a00      	cmp	r2, #0
 800dd6c:	f43f aeab 	beq.w	800dac6 <lv_draw_mask_line+0x6a>
                else if(k > 0) _lv_memset_00(&mask_buf[k],  len - k);
 800dd70:	f77f af4b 	ble.w	800dc0a <lv_draw_mask_line+0x1ae>
 800dd74:	e799      	b.n	800dcaa <lv_draw_mask_line+0x24e>
            if(k > len) k = len;
 800dd76:	429f      	cmp	r7, r3
 800dd78:	bfa8      	it	ge
 800dd7a:	461f      	movge	r7, r3
            if(k == 0) return LV_DRAW_MASK_RES_TRANSP;
 800dd7c:	2f00      	cmp	r7, #0
 800dd7e:	f43f aea2 	beq.w	800dac6 <lv_draw_mask_line+0x6a>
            else if(k > 0) _lv_memset_00(&mask_buf[k],  len - k);
 800dd82:	f77f af42 	ble.w	800dc0a <lv_draw_mask_line+0x1ae>
 800dd86:	1bd9      	subs	r1, r3, r7
 800dd88:	4438      	add	r0, r7
    return LV_DRAW_MASK_RES_CHANGED;
 800dd8a:	2402      	movs	r4, #2
            else if(k > 0) _lv_memset_00(&mask_buf[k],  len - k);
 800dd8c:	f007 fcf4 	bl	8015778 <_lv_memset_00>
 800dd90:	e683      	b.n	800da9a <lv_draw_mask_line+0x3e>
            m = 255 - (((255 - xef) * (255 - px_h)) >> 9);
 800dd92:	fb08 f20e 	mul.w	r2, r8, lr
            if(p->inv) m = 255 - m;
 800dd96:	07a6      	lsls	r6, r4, #30
            m = 255 - (((255 - xef) * (255 - px_h)) >> 9);
 800dd98:	f3c2 2247 	ubfx	r2, r2, #9, #8
            if(p->inv) m = 255 - m;
 800dd9c:	d401      	bmi.n	800dda2 <lv_draw_mask_line+0x346>
            m = 255 - (((255 - xef) * (255 - px_h)) >> 9);
 800dd9e:	43d2      	mvns	r2, r2
 800dda0:	b2d2      	uxtb	r2, r2
    if(mask_new >= LV_OPA_MAX) return mask_act;
 800dda2:	2afc      	cmp	r2, #252	; 0xfc
            mask_buf[k] = mask_mix(mask_buf[k], m);
 800dda4:	eb00 0601 	add.w	r6, r0, r1
 800dda8:	5c44      	ldrb	r4, [r0, r1]
    if(mask_new >= LV_OPA_MAX) return mask_act;
 800ddaa:	d80a      	bhi.n	800ddc2 <lv_draw_mask_line+0x366>
    if(mask_new <= LV_OPA_MIN) return 0;
 800ddac:	2a02      	cmp	r2, #2
 800ddae:	f240 80b5 	bls.w	800df1c <lv_draw_mask_line+0x4c0>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
 800ddb2:	fb14 f202 	smulbb	r2, r4, r2
 800ddb6:	eb02 2402 	add.w	r4, r2, r2, lsl #8
 800ddba:	eb02 12c4 	add.w	r2, r2, r4, lsl #7
 800ddbe:	f3c2 54c7 	ubfx	r4, r2, #23, #8
            mask_buf[k] = mask_mix(mask_buf[k], m);
 800ddc2:	7034      	strb	r4, [r6, #0]
 800ddc4:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 800ddc6:	f895 4028 	ldrb.w	r4, [r5, #40]	; 0x28
 800ddca:	e6ae      	b.n	800db2a <lv_draw_mask_line+0xce>
            k += 2;
 800ddcc:	1c4a      	adds	r2, r1, #1
                if(k > len) return LV_DRAW_MASK_RES_FULL_COVER;
 800ddce:	4293      	cmp	r3, r2
 800ddd0:	f6ff af2e 	blt.w	800dc30 <lv_draw_mask_line+0x1d4>
                if(k >= 0) _lv_memset_00(&mask_buf[k],  len - k);
 800ddd4:	2a00      	cmp	r2, #0
 800ddd6:	f6ff af18 	blt.w	800dc0a <lv_draw_mask_line+0x1ae>
 800ddda:	e766      	b.n	800dcaa <lv_draw_mask_line+0x24e>
    k = xsi - abs_x;
 800dddc:	460f      	mov	r7, r1
        xsf = 0xFF;
 800ddde:	f04f 08ff 	mov.w	r8, #255	; 0xff
        k--;
 800dde2:	3901      	subs	r1, #1
 800dde4:	e741      	b.n	800dc6a <lv_draw_mask_line+0x20e>
                m = 255 - ((y_inters * (255 - xsf)) >> 9);
 800dde6:	fb02 f808 	mul.w	r8, r2, r8
                if(p->inv) m = 255 - m;
 800ddea:	07a7      	lsls	r7, r4, #30
                m = 255 - ((y_inters * (255 - xsf)) >> 9);
 800ddec:	f3c8 2647 	ubfx	r6, r8, #9, #8
                if(p->inv) m = 255 - m;
 800ddf0:	d401      	bmi.n	800ddf6 <lv_draw_mask_line+0x39a>
                m = 255 - ((y_inters * (255 - xsf)) >> 9);
 800ddf2:	43f6      	mvns	r6, r6
 800ddf4:	b2f6      	uxtb	r6, r6
    if(mask_new >= LV_OPA_MAX) return mask_act;
 800ddf6:	2efc      	cmp	r6, #252	; 0xfc
                mask_buf[k] = mask_mix(mask_buf[k], m);
 800ddf8:	eb00 0701 	add.w	r7, r0, r1
 800ddfc:	5c44      	ldrb	r4, [r0, r1]
    if(mask_new >= LV_OPA_MAX) return mask_act;
 800ddfe:	d80a      	bhi.n	800de16 <lv_draw_mask_line+0x3ba>
    if(mask_new <= LV_OPA_MIN) return 0;
 800de00:	2e02      	cmp	r6, #2
 800de02:	f240 808f 	bls.w	800df24 <lv_draw_mask_line+0x4c8>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
 800de06:	fb14 f406 	smulbb	r4, r4, r6
 800de0a:	eb04 2604 	add.w	r6, r4, r4, lsl #8
 800de0e:	eb04 14c6 	add.w	r4, r4, r6, lsl #7
 800de12:	f3c4 54c7 	ubfx	r4, r4, #23, #8
                mask_buf[k] = mask_mix(mask_buf[k], m);
 800de16:	703c      	strb	r4, [r7, #0]
 800de18:	69af      	ldr	r7, [r5, #24]
 800de1a:	f895 4028 	ldrb.w	r4, [r5, #40]	; 0x28
 800de1e:	e79a      	b.n	800dd56 <lv_draw_mask_line+0x2fa>
            int32_t x_inters = ((255 - y_inters) * p->xy_steep) >> 10;
 800de20:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
                if(p->inv) m = 255 - m;
 800de24:	07a4      	lsls	r4, r4, #30
            int32_t x_inters = ((255 - y_inters) * p->xy_steep) >> 10;
 800de26:	fb07 f702 	mul.w	r7, r7, r2
 800de2a:	ea4f 27a7 	mov.w	r7, r7, asr #10
                m = ((255 - y_inters) * x_inters) >> 9;
 800de2e:	fb02 f207 	mul.w	r2, r2, r7
 800de32:	f3c2 2247 	ubfx	r2, r2, #9, #8
                if(p->inv) m = 255 - m;
 800de36:	d501      	bpl.n	800de3c <lv_draw_mask_line+0x3e0>
 800de38:	43d2      	mvns	r2, r2
 800de3a:	b2d2      	uxtb	r2, r2
    if(mask_new >= LV_OPA_MAX) return mask_act;
 800de3c:	2afc      	cmp	r2, #252	; 0xfc
                mask_buf[k] = mask_mix(mask_buf[k], m);
 800de3e:	5d84      	ldrb	r4, [r0, r6]
    if(mask_new >= LV_OPA_MAX) return mask_act;
 800de40:	d809      	bhi.n	800de56 <lv_draw_mask_line+0x3fa>
    if(mask_new <= LV_OPA_MIN) return 0;
 800de42:	2a02      	cmp	r2, #2
 800de44:	d96c      	bls.n	800df20 <lv_draw_mask_line+0x4c4>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
 800de46:	fb14 f202 	smulbb	r2, r4, r2
 800de4a:	eb02 2402 	add.w	r4, r2, r2, lsl #8
 800de4e:	eb02 12c4 	add.w	r2, r2, r4, lsl #7
 800de52:	f3c2 54c7 	ubfx	r4, r2, #23, #8
                mask_buf[k] = mask_mix(mask_buf[k], m);
 800de56:	5584      	strb	r4, [r0, r6]
 800de58:	f895 4028 	ldrb.w	r4, [r5, #40]	; 0x28
 800de5c:	e77f      	b.n	800dd5e <lv_draw_mask_line+0x302>
    int32_t xef = xe & 0xFF;
 800de5e:	f3cc 2287 	ubfx	r2, ip, #10, #8
            if(p->inv) m = 255 - m;
 800de62:	07a4      	lsls	r4, r4, #30
            m = (xsf + xef) >> 1;
 800de64:	4442      	add	r2, r8
 800de66:	f3c2 0247 	ubfx	r2, r2, #1, #8
            if(p->inv) m = 255 - m;
 800de6a:	d501      	bpl.n	800de70 <lv_draw_mask_line+0x414>
 800de6c:	43d2      	mvns	r2, r2
 800de6e:	b2d2      	uxtb	r2, r2
    if(mask_new >= LV_OPA_MAX) return mask_act;
 800de70:	2afc      	cmp	r2, #252	; 0xfc
            mask_buf[k] = mask_mix(mask_buf[k], m);
 800de72:	eb00 0401 	add.w	r4, r0, r1
 800de76:	5c41      	ldrb	r1, [r0, r1]
    if(mask_new >= LV_OPA_MAX) return mask_act;
 800de78:	d809      	bhi.n	800de8e <lv_draw_mask_line+0x432>
    if(mask_new <= LV_OPA_MIN) return 0;
 800de7a:	2a02      	cmp	r2, #2
 800de7c:	d954      	bls.n	800df28 <lv_draw_mask_line+0x4cc>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
 800de7e:	fb11 f202 	smulbb	r2, r1, r2
 800de82:	eb02 2102 	add.w	r1, r2, r2, lsl #8
 800de86:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
 800de8a:	f3c2 51c7 	ubfx	r1, r2, #23, #8
            mask_buf[k] = mask_mix(mask_buf[k], m);
 800de8e:	7021      	strb	r1, [r4, #0]
 800de90:	f895 4028 	ldrb.w	r4, [r5, #40]	; 0x28
 800de94:	e6ee      	b.n	800dc74 <lv_draw_mask_line+0x218>
                m = (y_inters * xsf) >> 9;
 800de96:	fb02 f608 	mul.w	r6, r2, r8
                if(p->inv) m = 255 - m;
 800de9a:	07a7      	lsls	r7, r4, #30
                m = (y_inters * xsf) >> 9;
 800de9c:	f3c6 2647 	ubfx	r6, r6, #9, #8
                if(p->inv) m = 255 - m;
 800dea0:	d501      	bpl.n	800dea6 <lv_draw_mask_line+0x44a>
 800dea2:	43f6      	mvns	r6, r6
 800dea4:	b2f6      	uxtb	r6, r6
    if(mask_new >= LV_OPA_MAX) return mask_act;
 800dea6:	2efc      	cmp	r6, #252	; 0xfc
                mask_buf[k] = mask_mix(mask_buf[k], m);
 800dea8:	eb00 0701 	add.w	r7, r0, r1
 800deac:	5c44      	ldrb	r4, [r0, r1]
    if(mask_new >= LV_OPA_MAX) return mask_act;
 800deae:	d809      	bhi.n	800dec4 <lv_draw_mask_line+0x468>
    if(mask_new <= LV_OPA_MIN) return 0;
 800deb0:	2e02      	cmp	r6, #2
 800deb2:	d93b      	bls.n	800df2c <lv_draw_mask_line+0x4d0>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
 800deb4:	fb14 f406 	smulbb	r4, r4, r6
 800deb8:	eb04 2604 	add.w	r6, r4, r4, lsl #8
 800debc:	eb04 14c6 	add.w	r4, r4, r6, lsl #7
 800dec0:	f3c4 54c7 	ubfx	r4, r4, #23, #8
                mask_buf[k] = mask_mix(mask_buf[k], m);
 800dec4:	703c      	strb	r4, [r7, #0]
 800dec6:	69af      	ldr	r7, [r5, #24]
 800dec8:	f895 4028 	ldrb.w	r4, [r5, #40]	; 0x28
 800decc:	e68e      	b.n	800dbec <lv_draw_mask_line+0x190>
            int32_t x_inters = ((255 - y_inters) * (-p->xy_steep)) >> 10;
 800dece:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 800ded2:	427f      	negs	r7, r7
                if(p->inv) m = 255 - m;
 800ded4:	07a4      	lsls	r4, r4, #30
            int32_t x_inters = ((255 - y_inters) * (-p->xy_steep)) >> 10;
 800ded6:	fb02 f707 	mul.w	r7, r2, r7
 800deda:	ea4f 27a7 	mov.w	r7, r7, asr #10
                m = 255 - (((255 - y_inters) * x_inters) >> 9);
 800dede:	fb02 f207 	mul.w	r2, r2, r7
 800dee2:	f3c2 2247 	ubfx	r2, r2, #9, #8
                if(p->inv) m = 255 - m;
 800dee6:	d401      	bmi.n	800deec <lv_draw_mask_line+0x490>
                m = 255 - (((255 - y_inters) * x_inters) >> 9);
 800dee8:	43d2      	mvns	r2, r2
 800deea:	b2d2      	uxtb	r2, r2
    if(mask_new >= LV_OPA_MAX) return mask_act;
 800deec:	2afc      	cmp	r2, #252	; 0xfc
                mask_buf[k] = mask_mix(mask_buf[k], m);
 800deee:	5d84      	ldrb	r4, [r0, r6]
    if(mask_new >= LV_OPA_MAX) return mask_act;
 800def0:	d809      	bhi.n	800df06 <lv_draw_mask_line+0x4aa>
    if(mask_new <= LV_OPA_MIN) return 0;
 800def2:	2a02      	cmp	r2, #2
 800def4:	d91c      	bls.n	800df30 <lv_draw_mask_line+0x4d4>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
 800def6:	fb14 f202 	smulbb	r2, r4, r2
 800defa:	eb02 2402 	add.w	r4, r2, r2, lsl #8
 800defe:	eb02 12c4 	add.w	r2, r2, r4, lsl #7
 800df02:	f3c2 54c7 	ubfx	r4, r2, #23, #8
                mask_buf[k] = mask_mix(mask_buf[k], m);
 800df06:	5584      	strb	r4, [r0, r6]
 800df08:	f895 4028 	ldrb.w	r4, [r5, #40]	; 0x28
 800df0c:	e675      	b.n	800dbfa <lv_draw_mask_line+0x19e>
    if(mask_new <= LV_OPA_MIN) return 0;
 800df0e:	2400      	movs	r4, #0
 800df10:	e709      	b.n	800dd26 <lv_draw_mask_line+0x2ca>
                else if(k > 0) _lv_memset_00(&mask_buf[0],  k);
 800df12:	4631      	mov	r1, r6
    return LV_DRAW_MASK_RES_CHANGED;
 800df14:	2402      	movs	r4, #2
                else if(k > 0) _lv_memset_00(&mask_buf[0],  k);
 800df16:	f007 fc2f 	bl	8015778 <_lv_memset_00>
 800df1a:	e5be      	b.n	800da9a <lv_draw_mask_line+0x3e>
    if(mask_new <= LV_OPA_MIN) return 0;
 800df1c:	2400      	movs	r4, #0
 800df1e:	e750      	b.n	800ddc2 <lv_draw_mask_line+0x366>
 800df20:	2400      	movs	r4, #0
 800df22:	e798      	b.n	800de56 <lv_draw_mask_line+0x3fa>
 800df24:	2400      	movs	r4, #0
 800df26:	e776      	b.n	800de16 <lv_draw_mask_line+0x3ba>
 800df28:	2100      	movs	r1, #0
 800df2a:	e7b0      	b.n	800de8e <lv_draw_mask_line+0x432>
 800df2c:	2400      	movs	r4, #0
 800df2e:	e7c9      	b.n	800dec4 <lv_draw_mask_line+0x468>
 800df30:	2400      	movs	r4, #0
 800df32:	e7e8      	b.n	800df06 <lv_draw_mask_line+0x4aa>
                    int32_t k = - abs_x;
 800df34:	4276      	negs	r6, r6
                    if(k >= len) return LV_DRAW_MASK_RES_TRANSP;
 800df36:	42b3      	cmp	r3, r6
 800df38:	f77f adc5 	ble.w	800dac6 <lv_draw_mask_line+0x6a>
 800df3c:	4631      	mov	r1, r6
                    else if(k >= 0 && k < len) _lv_memset_00(&mask_buf[0], k);
 800df3e:	e6a2      	b.n	800dc86 <lv_draw_mask_line+0x22a>

0800df40 <lv_draw_mask_radius>:
{
 800df40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df44:	b08d      	sub	sp, #52	; 0x34
 800df46:	4606      	mov	r6, r0
 800df48:	460f      	mov	r7, r1
 800df4a:	461d      	mov	r5, r3
 800df4c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
    bool outer = p->cfg.outer;
 800df50:	ac0a      	add	r4, sp, #40	; 0x28
 800df52:	46c4      	mov	ip, r8
 800df54:	f898 e012 	ldrb.w	lr, [r8, #18]
    int32_t radius = p->cfg.radius;
 800df58:	f9b8 9010 	ldrsh.w	r9, [r8, #16]
    if(outer == false) {
 800df5c:	f85c 0f08 	ldr.w	r0, [ip, #8]!
 800df60:	f01e 0301 	ands.w	r3, lr, #1
 800df64:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800df68:	9300      	str	r3, [sp, #0]
 800df6a:	c403      	stmia	r4!, {r0, r1}
        if(abs_y < rect.y1 || abs_y > rect.y2) {
 800df6c:	f9bd 002a 	ldrsh.w	r0, [sp, #42]	; 0x2a
    if(outer == false) {
 800df70:	d109      	bne.n	800df86 <lv_draw_mask_radius+0x46>
        if(abs_y < rect.y1 || abs_y > rect.y2) {
 800df72:	4290      	cmp	r0, r2
 800df74:	dc03      	bgt.n	800df7e <lv_draw_mask_radius+0x3e>
 800df76:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 800df7a:	4293      	cmp	r3, r2
 800df7c:	da09      	bge.n	800df92 <lv_draw_mask_radius+0x52>
                    return LV_DRAW_MASK_RES_TRANSP;
 800df7e:	2000      	movs	r0, #0
}
 800df80:	b00d      	add	sp, #52	; 0x34
 800df82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(abs_y < rect.y1 || abs_y > rect.y2) {
 800df86:	4290      	cmp	r0, r2
 800df88:	dc35      	bgt.n	800dff6 <lv_draw_mask_radius+0xb6>
 800df8a:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 800df8e:	4293      	cmp	r3, r2
 800df90:	db31      	blt.n	800dff6 <lv_draw_mask_radius+0xb6>
    if((abs_x >= rect.x1 + radius && abs_x + len <= rect.x2 - radius) ||
 800df92:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 800df96:	eb01 0409 	add.w	r4, r1, r9
 800df9a:	42a7      	cmp	r7, r4
 800df9c:	db07      	blt.n	800dfae <lv_draw_mask_radius+0x6e>
 800df9e:	f9bd 402c 	ldrsh.w	r4, [sp, #44]	; 0x2c
 800dfa2:	eb07 0c05 	add.w	ip, r7, r5
 800dfa6:	eba4 0409 	sub.w	r4, r4, r9
 800dfaa:	45a4      	cmp	ip, r4
 800dfac:	dd07      	ble.n	800dfbe <lv_draw_mask_radius+0x7e>
       (abs_y >= rect.y1 + radius && abs_y <= rect.y2 - radius)) {
 800dfae:	eb00 0409 	add.w	r4, r0, r9
    if((abs_x >= rect.x1 + radius && abs_x + len <= rect.x2 - radius) ||
 800dfb2:	42a2      	cmp	r2, r4
 800dfb4:	db23      	blt.n	800dffe <lv_draw_mask_radius+0xbe>
       (abs_y >= rect.y1 + radius && abs_y <= rect.y2 - radius)) {
 800dfb6:	eba3 0409 	sub.w	r4, r3, r9
 800dfba:	42a2      	cmp	r2, r4
 800dfbc:	dc1f      	bgt.n	800dffe <lv_draw_mask_radius+0xbe>
        if(outer == false) {
 800dfbe:	9b00      	ldr	r3, [sp, #0]
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	f040 832c 	bne.w	800e61e <lv_draw_mask_radius+0x6de>
            int32_t last =  rect.x1 - abs_x;
 800dfc6:	1bcc      	subs	r4, r1, r7
            if(last > len) return LV_DRAW_MASK_RES_TRANSP;
 800dfc8:	42ac      	cmp	r4, r5
 800dfca:	dcd8      	bgt.n	800df7e <lv_draw_mask_radius+0x3e>
            if(last >= 0) {
 800dfcc:	2c00      	cmp	r4, #0
 800dfce:	db03      	blt.n	800dfd8 <lv_draw_mask_radius+0x98>
                _lv_memset_00(&mask_buf[0], last);
 800dfd0:	4621      	mov	r1, r4
 800dfd2:	4630      	mov	r0, r6
 800dfd4:	f007 fbd0 	bl	8015778 <_lv_memset_00>
            int32_t first = rect.x2 - abs_x + 1;
 800dfd8:	f9bd 002c 	ldrsh.w	r0, [sp, #44]	; 0x2c
 800dfdc:	1bc7      	subs	r7, r0, r7
 800dfde:	1c78      	adds	r0, r7, #1
            if(first <= 0) return LV_DRAW_MASK_RES_TRANSP;
 800dfe0:	2800      	cmp	r0, #0
 800dfe2:	ddcc      	ble.n	800df7e <lv_draw_mask_radius+0x3e>
            else if(first < len) {
 800dfe4:	42a8      	cmp	r0, r5
 800dfe6:	f2c0 82b6 	blt.w	800e556 <lv_draw_mask_radius+0x616>
            if(last == 0 && first == len) return LV_DRAW_MASK_RES_FULL_COVER;
 800dfea:	2c00      	cmp	r4, #0
 800dfec:	f040 8143 	bne.w	800e276 <lv_draw_mask_radius+0x336>
 800dff0:	42a8      	cmp	r0, r5
 800dff2:	f040 8140 	bne.w	800e276 <lv_draw_mask_radius+0x336>
 800dff6:	2001      	movs	r0, #1
}
 800dff8:	b00d      	add	sp, #52	; 0x34
 800dffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800dffe:	b280      	uxth	r0, r0
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800e000:	f8bd b02c 	ldrh.w	fp, [sp, #44]	; 0x2c
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800e004:	3301      	adds	r3, #1
    int32_t k = rect.x1 - abs_x; /*First relevant coordinate on the of the mask*/
 800e006:	1bcf      	subs	r7, r1, r7
    abs_y -= rect.y1;
 800e008:	1a14      	subs	r4, r2, r0
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800e00a:	f10b 0b01 	add.w	fp, fp, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800e00e:	1a1b      	subs	r3, r3, r0
    uint32_t r2 = p->cfg.radius * p->cfg.radius;
 800e010:	fb09 fa09 	mul.w	sl, r9, r9
    abs_y -= rect.y1;
 800e014:	b224      	sxth	r4, r4
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800e016:	ebab 0101 	sub.w	r1, fp, r1
    int32_t h = lv_area_get_height(&rect);
 800e01a:	b21b      	sxth	r3, r3
    if(abs_y < radius || abs_y > h - radius - 1) {
 800e01c:	45a1      	cmp	r9, r4
    int32_t w = lv_area_get_width(&rect);
 800e01e:	fa0f fb81 	sxth.w	fp, r1
    if(abs_y < radius || abs_y > h - radius - 1) {
 800e022:	f340 812c 	ble.w	800e27e <lv_draw_mask_radius+0x33e>
        if(radius <= 256) sqrt_mask = 0x800;
 800e026:	f5b9 7f80 	cmp.w	r9, #256	; 0x100
            y = radius - abs_y;
 800e02a:	eba9 0404 	sub.w	r4, r9, r4
            if(y == p->y_prev) {
 800e02e:	f8d8 3014 	ldr.w	r3, [r8, #20]
        if(radius <= 256) sqrt_mask = 0x800;
 800e032:	bfd4      	ite	le
 800e034:	f44f 6200 	movle.w	r2, #2048	; 0x800
 800e038:	f44f 4200 	movgt.w	r2, #32768	; 0x8000
            if(y == p->y_prev) {
 800e03c:	42a3      	cmp	r3, r4
 800e03e:	f040 8294 	bne.w	800e56a <lv_draw_mask_radius+0x62a>
                x0.i = p->y_prev_x.i;
 800e042:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800e046:	9306      	str	r3, [sp, #24]
            _lv_sqrt(r2 - ((y - 1) * (y - 1)), &x1, sqrt_mask);
 800e048:	1e63      	subs	r3, r4, #1
 800e04a:	a907      	add	r1, sp, #28
 800e04c:	9202      	str	r2, [sp, #8]
 800e04e:	fb03 a013 	mls	r0, r3, r3, sl
 800e052:	9301      	str	r3, [sp, #4]
 800e054:	f006 fe46 	bl	8014ce4 <_lv_sqrt>
            p->y_prev = y - 1;
 800e058:	9b01      	ldr	r3, [sp, #4]
            p->y_prev_x.i = x1.i;
 800e05a:	9907      	ldr	r1, [sp, #28]
 800e05c:	f8bd 001c 	ldrh.w	r0, [sp, #28]
 800e060:	9a02      	ldr	r2, [sp, #8]
 800e062:	e9c8 3105 	strd	r3, r1, [r8, #20]
 800e066:	f8bd 3018 	ldrh.w	r3, [sp, #24]
        if(x0.i == x1.i - 1 && x1.f == 0) {
 800e06a:	1e41      	subs	r1, r0, #1
 800e06c:	428b      	cmp	r3, r1
 800e06e:	f000 817a 	beq.w	800e366 <lv_draw_mask_radius+0x426>
        if(x0.i == x1.i) {
 800e072:	4298      	cmp	r0, r3
 800e074:	f000 812a 	beq.w	800e2cc <lv_draw_mask_radius+0x38c>
            int32_t ofs = radius - (x0.i + 1);
 800e078:	f103 0801 	add.w	r8, r3, #1
 800e07c:	eba9 0908 	sub.w	r9, r9, r8
            int32_t kr = k + (w - ofs - 1);
 800e080:	ebab 0109 	sub.w	r1, fp, r9
            int32_t kl = k + ofs;
 800e084:	eb07 0009 	add.w	r0, r7, r9
            int32_t kr = k + (w - ofs - 1);
 800e088:	3901      	subs	r1, #1
            int32_t kl = k + ofs;
 800e08a:	9001      	str	r0, [sp, #4]
            int32_t kr = k + (w - ofs - 1);
 800e08c:	4439      	add	r1, r7
            if(outer) {
 800e08e:	9f00      	ldr	r7, [sp, #0]
            int32_t kr = k + (w - ofs - 1);
 800e090:	9102      	str	r1, [sp, #8]
            if(outer) {
 800e092:	b19f      	cbz	r7, 800e0bc <lv_draw_mask_radius+0x17c>
                int32_t first = kl + 1;
 800e094:	3001      	adds	r0, #1
                if(len_tmp + first > len) len_tmp = len - first;
 800e096:	428d      	cmp	r5, r1
 800e098:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
                int32_t len_tmp = kr - first;
 800e09c:	bfac      	ite	ge
 800e09e:	1a09      	subge	r1, r1, r0
                if(len_tmp + first > len) len_tmp = len - first;
 800e0a0:	1a29      	sublt	r1, r5, r0
                if(first < len && len_tmp >= 0) {
 800e0a2:	42a8      	cmp	r0, r5
 800e0a4:	da0a      	bge.n	800e0bc <lv_draw_mask_radius+0x17c>
 800e0a6:	2900      	cmp	r1, #0
 800e0a8:	db08      	blt.n	800e0bc <lv_draw_mask_radius+0x17c>
                    _lv_memset_00(&mask_buf[first], len_tmp);
 800e0aa:	4430      	add	r0, r6
 800e0ac:	9203      	str	r2, [sp, #12]
 800e0ae:	f007 fb63 	bl	8015778 <_lv_memset_00>
 800e0b2:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 800e0b6:	9a03      	ldr	r2, [sp, #12]
 800e0b8:	f103 0801 	add.w	r8, r3, #1
            _lv_sqrt(r2 - (x0.i * x0.i), &y_prev, sqrt_mask);
 800e0bc:	fb03 a013 	mls	r0, r3, r3, sl
 800e0c0:	a908      	add	r1, sp, #32
 800e0c2:	9205      	str	r2, [sp, #20]
            uint32_t i = x0.i + 1;
 800e0c4:	e9cd 8303 	strd	r8, r3, [sp, #12]
            _lv_sqrt(r2 - (x0.i * x0.i), &y_prev, sqrt_mask);
 800e0c8:	f006 fe0c 	bl	8014ce4 <_lv_sqrt>
            if(y_prev.f == 0) {
 800e0cc:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
                y_prev.i--;
 800e0d0:	f8bd 0020 	ldrh.w	r0, [sp, #32]
            if(y_prev.f == 0) {
 800e0d4:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800e0d8:	b939      	cbnz	r1, 800e0ea <lv_draw_mask_radius+0x1aa>
                y_prev.f = 0xFF;
 800e0da:	27ff      	movs	r7, #255	; 0xff
                y_prev.i--;
 800e0dc:	3801      	subs	r0, #1
                y_prev.f = 0xFF;
 800e0de:	4639      	mov	r1, r7
                y_prev.i--;
 800e0e0:	b280      	uxth	r0, r0
                y_prev.f = 0xFF;
 800e0e2:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
                y_prev.i--;
 800e0e6:	f8ad 0020 	strh.w	r0, [sp, #32]
            if(y_prev.i >= y) {
 800e0ea:	42a0      	cmp	r0, r4
 800e0ec:	f280 8245 	bge.w	800e57a <lv_draw_mask_radius+0x63a>
            for(; i <= x1.i; i++) {
 800e0f0:	f8bd b01c 	ldrh.w	fp, [sp, #28]
 800e0f4:	45d8      	cmp	r8, fp
 800e0f6:	f200 8142 	bhi.w	800e37e <lv_draw_mask_radius+0x43e>
 */
LV_ATTRIBUTE_FAST_MEM static inline void sqrt_approx(lv_sqrt_res_t * q, lv_sqrt_res_t * ref, uint32_t x)
{
    x = x << 8; /*Upscale for extra precision*/

    uint32_t raw = (ref->i << 4) + (ref->f >> 4);
 800e0fa:	f8bd 7020 	ldrh.w	r7, [sp, #32]
 800e0fe:	9b00      	ldr	r3, [sp, #0]
 800e100:	013f      	lsls	r7, r7, #4
 800e102:	2b00      	cmp	r3, #0
 800e104:	f040 8178 	bne.w	800e3f8 <lv_draw_mask_radius+0x4b8>
 800e108:	9b02      	ldr	r3, [sp, #8]
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	f280 8203 	bge.w	800e516 <lv_draw_mask_radius+0x5d6>
 800e110:	f10b 0201 	add.w	r2, fp, #1
 800e114:	f8dd e00c 	ldr.w	lr, [sp, #12]
 800e118:	469c      	mov	ip, r3
 800e11a:	461c      	mov	r4, r3
 800e11c:	9204      	str	r2, [sp, #16]
 800e11e:	4672      	mov	r2, lr
 800e120:	9b04      	ldr	r3, [sp, #16]
 800e122:	9801      	ldr	r0, [sp, #4]
 800e124:	eba3 0e0e 	sub.w	lr, r3, lr
 800e128:	44e6      	add	lr, ip
 800e12a:	ea0e 7eee 	and.w	lr, lr, lr, asr #31
 800e12e:	eb07 1811 	add.w	r8, r7, r1, lsr #4
    uint32_t raw2 = raw * raw;

    int32_t d = x - raw2;
    d = (int32_t)d / (int32_t)(2 * raw) + raw;
 800e132:	468c      	mov	ip, r1
                sqrt_approx(&y_next, &y_prev, r2 - (i * i));
 800e134:	fb02 a312 	mls	r3, r2, r2, sl
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
 800e138:	2800      	cmp	r0, #0
    uint32_t raw2 = raw * raw;
 800e13a:	fb08 f108 	mul.w	r1, r8, r8
    d = (int32_t)d / (int32_t)(2 * raw) + raw;
 800e13e:	ea4f 0948 	mov.w	r9, r8, lsl #1
    int32_t d = x - raw2;
 800e142:	ebc1 2303 	rsb	r3, r1, r3, lsl #8
    d = (int32_t)d / (int32_t)(2 * raw) + raw;
 800e146:	fb93 f3f9 	sdiv	r3, r3, r9
 800e14a:	4443      	add	r3, r8

    q->i = d >> 4;
    q->f = (d & 0xF) << 4;
 800e14c:	ea4f 1103 	mov.w	r1, r3, lsl #4
 800e150:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
                m = (y_prev.f + y_next.f) >> 1;
 800e154:	448c      	add	ip, r1
 800e156:	f3cc 0c47 	ubfx	ip, ip, #1, #8
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
 800e15a:	db14      	blt.n	800e186 <lv_draw_mask_radius+0x246>
 800e15c:	4285      	cmp	r5, r0
 800e15e:	dd12      	ble.n	800e186 <lv_draw_mask_radius+0x246>
 800e160:	f816 8000 	ldrb.w	r8, [r6, r0]
    if(mask_new >= LV_OPA_MAX) return mask_act;
 800e164:	f1bc 0ffc 	cmp.w	ip, #252	; 0xfc
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
 800e168:	fb08 f90c 	mul.w	r9, r8, ip
    if(mask_new >= LV_OPA_MAX) return mask_act;
 800e16c:	d809      	bhi.n	800e182 <lv_draw_mask_radius+0x242>
    if(mask_new <= LV_OPA_MIN) return 0;
 800e16e:	f1bc 0f02 	cmp.w	ip, #2
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
 800e172:	eb09 2809 	add.w	r8, r9, r9, lsl #8
    if(mask_new <= LV_OPA_MIN) return 0;
 800e176:	f240 826c 	bls.w	800e652 <lv_draw_mask_radius+0x712>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
 800e17a:	eb09 18c8 	add.w	r8, r9, r8, lsl #7
 800e17e:	f3c8 58c7 	ubfx	r8, r8, #23, #8
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
 800e182:	f806 8000 	strb.w	r8, [r6, r0]
                kr++;
 800e186:	3401      	adds	r4, #1
                kl--;
 800e188:	3801      	subs	r0, #1
            for(; i <= x1.i; i++) {
 800e18a:	3201      	adds	r2, #1
 800e18c:	45a6      	cmp	lr, r4
 800e18e:	dcce      	bgt.n	800e12e <lv_draw_mask_radius+0x1ee>
 800e190:	455a      	cmp	r2, fp
 800e192:	d845      	bhi.n	800e220 <lv_draw_mask_radius+0x2e0>
    uint32_t raw = (ref->i << 4) + (ref->f >> 4);
 800e194:	eb07 1e11 	add.w	lr, r7, r1, lsr #4
    d = (int32_t)d / (int32_t)(2 * raw) + raw;
 800e198:	468c      	mov	ip, r1
                sqrt_approx(&y_next, &y_prev, r2 - (i * i));
 800e19a:	fb02 a312 	mls	r3, r2, r2, sl
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
 800e19e:	2800      	cmp	r0, #0
    uint32_t raw2 = raw * raw;
 800e1a0:	fb0e f10e 	mul.w	r1, lr, lr
    d = (int32_t)d / (int32_t)(2 * raw) + raw;
 800e1a4:	ea4f 084e 	mov.w	r8, lr, lsl #1
    int32_t d = x - raw2;
 800e1a8:	ebc1 2303 	rsb	r3, r1, r3, lsl #8
    d = (int32_t)d / (int32_t)(2 * raw) + raw;
 800e1ac:	fb93 f3f8 	sdiv	r3, r3, r8
 800e1b0:	4473      	add	r3, lr
    q->f = (d & 0xF) << 4;
 800e1b2:	ea4f 1103 	mov.w	r1, r3, lsl #4
 800e1b6:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
                m = (y_prev.f + y_next.f) >> 1;
 800e1ba:	448c      	add	ip, r1
 800e1bc:	f3cc 0c47 	ubfx	ip, ip, #1, #8
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
 800e1c0:	db14      	blt.n	800e1ec <lv_draw_mask_radius+0x2ac>
 800e1c2:	4285      	cmp	r5, r0
 800e1c4:	dd12      	ble.n	800e1ec <lv_draw_mask_radius+0x2ac>
    if(mask_new >= LV_OPA_MAX) return mask_act;
 800e1c6:	f1bc 0ffc 	cmp.w	ip, #252	; 0xfc
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
 800e1ca:	f816 e000 	ldrb.w	lr, [r6, r0]
    if(mask_new >= LV_OPA_MAX) return mask_act;
 800e1ce:	d80b      	bhi.n	800e1e8 <lv_draw_mask_radius+0x2a8>
    if(mask_new <= LV_OPA_MIN) return 0;
 800e1d0:	f1bc 0f02 	cmp.w	ip, #2
 800e1d4:	f240 8243 	bls.w	800e65e <lv_draw_mask_radius+0x71e>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
 800e1d8:	fb0e fe0c 	mul.w	lr, lr, ip
 800e1dc:	eb0e 280e 	add.w	r8, lr, lr, lsl #8
 800e1e0:	eb0e 1ec8 	add.w	lr, lr, r8, lsl #7
 800e1e4:	f3ce 5ec7 	ubfx	lr, lr, #23, #8
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
 800e1e8:	f806 e000 	strb.w	lr, [r6, r0]
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
 800e1ec:	42a5      	cmp	r5, r4
 800e1ee:	dd12      	ble.n	800e216 <lv_draw_mask_radius+0x2d6>
    if(mask_new >= LV_OPA_MAX) return mask_act;
 800e1f0:	f1bc 0ffc 	cmp.w	ip, #252	; 0xfc
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
 800e1f4:	f816 e004 	ldrb.w	lr, [r6, r4]
    if(mask_new >= LV_OPA_MAX) return mask_act;
 800e1f8:	d80b      	bhi.n	800e212 <lv_draw_mask_radius+0x2d2>
    if(mask_new <= LV_OPA_MIN) return 0;
 800e1fa:	f1bc 0f02 	cmp.w	ip, #2
 800e1fe:	f240 822b 	bls.w	800e658 <lv_draw_mask_radius+0x718>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
 800e202:	fb0e fc0c 	mul.w	ip, lr, ip
 800e206:	eb0c 2e0c 	add.w	lr, ip, ip, lsl #8
 800e20a:	eb0c 1cce 	add.w	ip, ip, lr, lsl #7
 800e20e:	f3cc 5ec7 	ubfx	lr, ip, #23, #8
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
 800e212:	f806 e004 	strb.w	lr, [r6, r4]
            for(; i <= x1.i; i++) {
 800e216:	3201      	adds	r2, #1
                kl--;
 800e218:	3801      	subs	r0, #1
                kr++;
 800e21a:	3401      	adds	r4, #1
            for(; i <= x1.i; i++) {
 800e21c:	455a      	cmp	r2, fp
 800e21e:	d9b9      	bls.n	800e194 <lv_draw_mask_radius+0x254>
 800e220:	9803      	ldr	r0, [sp, #12]
    q->i = d >> 4;
 800e222:	111b      	asrs	r3, r3, #4
 800e224:	9a01      	ldr	r2, [sp, #4]
 800e226:	9c04      	ldr	r4, [sp, #16]
 800e228:	eba0 0b0b 	sub.w	fp, r0, fp
 800e22c:	3a01      	subs	r2, #1
 800e22e:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
 800e232:	4627      	mov	r7, r4
 800e234:	9c02      	ldr	r4, [sp, #8]
 800e236:	445a      	add	r2, fp
 800e238:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 800e23c:	4427      	add	r7, r4
 800e23e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 800e242:	9201      	str	r2, [sp, #4]
 800e244:	1a3a      	subs	r2, r7, r0
 800e246:	9202      	str	r2, [sp, #8]
            if(y_prev.f) {
 800e248:	2900      	cmp	r1, #0
 800e24a:	f040 8098 	bne.w	800e37e <lv_draw_mask_radius+0x43e>
            if(outer == 0) {
 800e24e:	9b00      	ldr	r3, [sp, #0]
 800e250:	b98b      	cbnz	r3, 800e276 <lv_draw_mask_radius+0x336>
                kl++;
 800e252:	9901      	ldr	r1, [sp, #4]
 800e254:	3101      	adds	r1, #1
                if(kl > len) {
 800e256:	428d      	cmp	r5, r1
 800e258:	f6ff ae91 	blt.w	800df7e <lv_draw_mask_radius+0x3e>
                if(kl >= 0) _lv_memset_00(&mask_buf[0], kl);
 800e25c:	2900      	cmp	r1, #0
 800e25e:	f280 8180 	bge.w	800e562 <lv_draw_mask_radius+0x622>
                if(kr < 0) {
 800e262:	9b02      	ldr	r3, [sp, #8]
 800e264:	2b00      	cmp	r3, #0
 800e266:	f6ff ae8a 	blt.w	800df7e <lv_draw_mask_radius+0x3e>
                if(kr < len) _lv_memset_00(&mask_buf[kr], len - kr);
 800e26a:	429d      	cmp	r5, r3
 800e26c:	dd03      	ble.n	800e276 <lv_draw_mask_radius+0x336>
 800e26e:	1ae9      	subs	r1, r5, r3
 800e270:	18f0      	adds	r0, r6, r3
 800e272:	f007 fa81 	bl	8015778 <_lv_memset_00>
    return LV_DRAW_MASK_RES_CHANGED;
 800e276:	2002      	movs	r0, #2
}
 800e278:	b00d      	add	sp, #52	; 0x34
 800e27a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(abs_y < radius || abs_y > h - radius - 1) {
 800e27e:	eba3 0209 	sub.w	r2, r3, r9
 800e282:	4294      	cmp	r4, r2
 800e284:	dbf7      	blt.n	800e276 <lv_draw_mask_radius+0x336>
            y = radius - (h - abs_y) + 1;
 800e286:	1b1b      	subs	r3, r3, r4
        if(radius <= 256) sqrt_mask = 0x800;
 800e288:	f5b9 7f80 	cmp.w	r9, #256	; 0x100
            if((y - 1) == p->y_prev) {
 800e28c:	f8d8 1014 	ldr.w	r1, [r8, #20]
            y = radius - (h - abs_y) + 1;
 800e290:	eba9 0003 	sub.w	r0, r9, r3
        if(radius <= 256) sqrt_mask = 0x800;
 800e294:	bfd4      	ite	le
 800e296:	f44f 6200 	movle.w	r2, #2048	; 0x800
 800e29a:	f44f 4200 	movgt.w	r2, #32768	; 0x8000
            if((y - 1) == p->y_prev) {
 800e29e:	4288      	cmp	r0, r1
            y = radius - (h - abs_y) + 1;
 800e2a0:	f100 0401 	add.w	r4, r0, #1
            if((y - 1) == p->y_prev) {
 800e2a4:	f040 813e 	bne.w	800e524 <lv_draw_mask_radius+0x5e4>
                x1.i = p->y_prev_x.i;
 800e2a8:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800e2ac:	9307      	str	r3, [sp, #28]
            _lv_sqrt(r2 - (y * y), &x0, sqrt_mask);
 800e2ae:	a906      	add	r1, sp, #24
 800e2b0:	fb04 a014 	mls	r0, r4, r4, sl
 800e2b4:	9201      	str	r2, [sp, #4]
 800e2b6:	f006 fd15 	bl	8014ce4 <_lv_sqrt>
            p->y_prev_x.i = x0.i;
 800e2ba:	9906      	ldr	r1, [sp, #24]
 800e2bc:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 800e2c0:	f8bd 001c 	ldrh.w	r0, [sp, #28]
 800e2c4:	9a01      	ldr	r2, [sp, #4]
 800e2c6:	e9c8 4105 	strd	r4, r1, [r8, #20]
 800e2ca:	e6ce      	b.n	800e06a <lv_draw_mask_radius+0x12a>
            lv_opa_t m = (x0.f + x1.f) >> 1;
 800e2cc:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 800e2d0:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 800e2d4:	440a      	add	r2, r1
            if(outer) m = 255 - m;
 800e2d6:	9900      	ldr	r1, [sp, #0]
            lv_opa_t m = (x0.f + x1.f) >> 1;
 800e2d8:	f3c2 0247 	ubfx	r2, r2, #1, #8
            if(outer) m = 255 - m;
 800e2dc:	b109      	cbz	r1, 800e2e2 <lv_draw_mask_radius+0x3a2>
 800e2de:	43d2      	mvns	r2, r2
 800e2e0:	b2d2      	uxtb	r2, r2
            int32_t ofs = radius - x0.i - 1;
 800e2e2:	eba9 0303 	sub.w	r3, r9, r3
 800e2e6:	3b01      	subs	r3, #1
            if(kl >= 0 && kl < len) {
 800e2e8:	18f9      	adds	r1, r7, r3
 800e2ea:	d410      	bmi.n	800e30e <lv_draw_mask_radius+0x3ce>
 800e2ec:	428d      	cmp	r5, r1
 800e2ee:	dd0e      	ble.n	800e30e <lv_draw_mask_radius+0x3ce>
    if(mask_new >= LV_OPA_MAX) return mask_act;
 800e2f0:	2afc      	cmp	r2, #252	; 0xfc
                mask_buf[kl] = mask_mix(mask_buf[kl], m);
 800e2f2:	5c70      	ldrb	r0, [r6, r1]
    if(mask_new >= LV_OPA_MAX) return mask_act;
 800e2f4:	d80a      	bhi.n	800e30c <lv_draw_mask_radius+0x3cc>
    if(mask_new <= LV_OPA_MIN) return 0;
 800e2f6:	2a02      	cmp	r2, #2
 800e2f8:	f240 81c0 	bls.w	800e67c <lv_draw_mask_radius+0x73c>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
 800e2fc:	fb10 f002 	smulbb	r0, r0, r2
 800e300:	eb00 2400 	add.w	r4, r0, r0, lsl #8
 800e304:	eb00 10c4 	add.w	r0, r0, r4, lsl #7
 800e308:	f3c0 50c7 	ubfx	r0, r0, #23, #8
                mask_buf[kl] = mask_mix(mask_buf[kl], m);
 800e30c:	5470      	strb	r0, [r6, r1]
            int32_t kr = k + (w - ofs - 1);
 800e30e:	ebab 0303 	sub.w	r3, fp, r3
 800e312:	3b01      	subs	r3, #1
            if(kr >= 0 && kr < len) {
 800e314:	19df      	adds	r7, r3, r7
 800e316:	d410      	bmi.n	800e33a <lv_draw_mask_radius+0x3fa>
 800e318:	42af      	cmp	r7, r5
 800e31a:	da0e      	bge.n	800e33a <lv_draw_mask_radius+0x3fa>
    if(mask_new >= LV_OPA_MAX) return mask_act;
 800e31c:	2afc      	cmp	r2, #252	; 0xfc
                mask_buf[kr] = mask_mix(mask_buf[kr], m);
 800e31e:	5df3      	ldrb	r3, [r6, r7]
    if(mask_new >= LV_OPA_MAX) return mask_act;
 800e320:	d80a      	bhi.n	800e338 <lv_draw_mask_radius+0x3f8>
    if(mask_new <= LV_OPA_MIN) return 0;
 800e322:	2a02      	cmp	r2, #2
 800e324:	f240 81a4 	bls.w	800e670 <lv_draw_mask_radius+0x730>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
 800e328:	fb13 f302 	smulbb	r3, r3, r2
 800e32c:	eb03 2203 	add.w	r2, r3, r3, lsl #8
 800e330:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 800e334:	f3c3 53c7 	ubfx	r3, r3, #23, #8
                mask_buf[kr] = mask_mix(mask_buf[kr], m);
 800e338:	55f3      	strb	r3, [r6, r7]
            if(outer == false) {
 800e33a:	9b00      	ldr	r3, [sp, #0]
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	f040 80f9 	bne.w	800e534 <lv_draw_mask_radius+0x5f4>
                if(kl > len)  {
 800e342:	42a9      	cmp	r1, r5
 800e344:	f73f ae1b 	bgt.w	800df7e <lv_draw_mask_radius+0x3e>
                if(kl >= 0) {
 800e348:	2900      	cmp	r1, #0
 800e34a:	db02      	blt.n	800e352 <lv_draw_mask_radius+0x412>
                    _lv_memset_00(&mask_buf[0], kl);
 800e34c:	4630      	mov	r0, r6
 800e34e:	f007 fa13 	bl	8015778 <_lv_memset_00>
                if(kr < 0) {
 800e352:	3701      	adds	r7, #1
 800e354:	f53f ae13 	bmi.w	800df7e <lv_draw_mask_radius+0x3e>
                if(kr <= len) {
 800e358:	42af      	cmp	r7, r5
 800e35a:	dc8c      	bgt.n	800e276 <lv_draw_mask_radius+0x336>
                    _lv_memset_00(&mask_buf[kr], len - kr);
 800e35c:	1be9      	subs	r1, r5, r7
 800e35e:	19f0      	adds	r0, r6, r7
 800e360:	f007 fa0a 	bl	8015778 <_lv_memset_00>
 800e364:	e787      	b.n	800e276 <lv_draw_mask_radius+0x336>
        if(x0.i == x1.i - 1 && x1.f == 0) {
 800e366:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 800e36a:	2900      	cmp	r1, #0
 800e36c:	f47f ae81 	bne.w	800e072 <lv_draw_mask_radius+0x132>
            x1.i--;
 800e370:	b298      	uxth	r0, r3
            x1.f = 0xFF;
 800e372:	21ff      	movs	r1, #255	; 0xff
            x1.i--;
 800e374:	f8ad 001c 	strh.w	r0, [sp, #28]
            x1.f = 0xFF;
 800e378:	f8ad 101e 	strh.w	r1, [sp, #30]
 800e37c:	e679      	b.n	800e072 <lv_draw_mask_radius+0x132>
                m = (y_prev.f * x1.f) >> 9;
 800e37e:	f8bd 301e 	ldrh.w	r3, [sp, #30]
                if(outer) m = 255 - m;
 800e382:	9a00      	ldr	r2, [sp, #0]
                m = (y_prev.f * x1.f) >> 9;
 800e384:	fb01 f303 	mul.w	r3, r1, r3
 800e388:	f3c3 2347 	ubfx	r3, r3, #9, #8
                if(outer) m = 255 - m;
 800e38c:	b10a      	cbz	r2, 800e392 <lv_draw_mask_radius+0x452>
 800e38e:	43db      	mvns	r3, r3
 800e390:	b2db      	uxtb	r3, r3
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
 800e392:	9a01      	ldr	r2, [sp, #4]
 800e394:	2a00      	cmp	r2, #0
 800e396:	db12      	blt.n	800e3be <lv_draw_mask_radius+0x47e>
 800e398:	4295      	cmp	r5, r2
 800e39a:	dd10      	ble.n	800e3be <lv_draw_mask_radius+0x47e>
    if(mask_new >= LV_OPA_MAX) return mask_act;
 800e39c:	2bfc      	cmp	r3, #252	; 0xfc
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
 800e39e:	eb06 0102 	add.w	r1, r6, r2
 800e3a2:	5cb2      	ldrb	r2, [r6, r2]
    if(mask_new >= LV_OPA_MAX) return mask_act;
 800e3a4:	d80a      	bhi.n	800e3bc <lv_draw_mask_radius+0x47c>
    if(mask_new <= LV_OPA_MIN) return 0;
 800e3a6:	2b02      	cmp	r3, #2
 800e3a8:	f240 8165 	bls.w	800e676 <lv_draw_mask_radius+0x736>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
 800e3ac:	fb12 f203 	smulbb	r2, r2, r3
 800e3b0:	eb02 2002 	add.w	r0, r2, r2, lsl #8
 800e3b4:	eb02 12c0 	add.w	r2, r2, r0, lsl #7
 800e3b8:	f3c2 52c7 	ubfx	r2, r2, #23, #8
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
 800e3bc:	700a      	strb	r2, [r1, #0]
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
 800e3be:	9a02      	ldr	r2, [sp, #8]
 800e3c0:	2a00      	cmp	r2, #0
 800e3c2:	db12      	blt.n	800e3ea <lv_draw_mask_radius+0x4aa>
 800e3c4:	4295      	cmp	r5, r2
 800e3c6:	dd10      	ble.n	800e3ea <lv_draw_mask_radius+0x4aa>
    if(mask_new >= LV_OPA_MAX) return mask_act;
 800e3c8:	2bfc      	cmp	r3, #252	; 0xfc
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
 800e3ca:	eb06 0102 	add.w	r1, r6, r2
 800e3ce:	5cb2      	ldrb	r2, [r6, r2]
    if(mask_new >= LV_OPA_MAX) return mask_act;
 800e3d0:	d80a      	bhi.n	800e3e8 <lv_draw_mask_radius+0x4a8>
    if(mask_new <= LV_OPA_MIN) return 0;
 800e3d2:	2b02      	cmp	r3, #2
 800e3d4:	f240 8155 	bls.w	800e682 <lv_draw_mask_radius+0x742>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
 800e3d8:	fb12 f303 	smulbb	r3, r2, r3
 800e3dc:	eb03 2203 	add.w	r2, r3, r3, lsl #8
 800e3e0:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 800e3e4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
 800e3e8:	700a      	strb	r2, [r1, #0]
                kl--;
 800e3ea:	9b01      	ldr	r3, [sp, #4]
 800e3ec:	3b01      	subs	r3, #1
 800e3ee:	9301      	str	r3, [sp, #4]
                kr++;
 800e3f0:	9b02      	ldr	r3, [sp, #8]
 800e3f2:	3301      	adds	r3, #1
 800e3f4:	9302      	str	r3, [sp, #8]
 800e3f6:	e72a      	b.n	800e24e <lv_draw_mask_radius+0x30e>
 800e3f8:	9b02      	ldr	r3, [sp, #8]
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	da3f      	bge.n	800e47e <lv_draw_mask_radius+0x53e>
 800e3fe:	f10b 0401 	add.w	r4, fp, #1
    uint32_t raw = (ref->i << 4) + (ref->f >> 4);
 800e402:	f8dd e00c 	ldr.w	lr, [sp, #12]
 800e406:	469c      	mov	ip, r3
 800e408:	9801      	ldr	r0, [sp, #4]
 800e40a:	4672      	mov	r2, lr
 800e40c:	eba4 0e0e 	sub.w	lr, r4, lr
 800e410:	9404      	str	r4, [sp, #16]
 800e412:	449e      	add	lr, r3
 800e414:	ea0e 7eee 	and.w	lr, lr, lr, asr #31
 800e418:	eb07 1811 	add.w	r8, r7, r1, lsr #4
                sqrt_approx(&y_next, &y_prev, r2 - (i * i));
 800e41c:	fb02 a312 	mls	r3, r2, r2, sl
 800e420:	460c      	mov	r4, r1
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
 800e422:	2800      	cmp	r0, #0
    uint32_t raw2 = raw * raw;
 800e424:	fb08 f908 	mul.w	r9, r8, r8
    d = (int32_t)d / (int32_t)(2 * raw) + raw;
 800e428:	ea4f 0148 	mov.w	r1, r8, lsl #1
    int32_t d = x - raw2;
 800e42c:	ebc9 2303 	rsb	r3, r9, r3, lsl #8
    d = (int32_t)d / (int32_t)(2 * raw) + raw;
 800e430:	fb93 f3f1 	sdiv	r3, r3, r1
 800e434:	4443      	add	r3, r8
    q->f = (d & 0xF) << 4;
 800e436:	ea4f 1103 	mov.w	r1, r3, lsl #4
 800e43a:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
                m = (y_prev.f + y_next.f) >> 1;
 800e43e:	440c      	add	r4, r1
                if(outer) m = 255 - m;
 800e440:	f484 74ff 	eor.w	r4, r4, #510	; 0x1fe
 800e444:	f3c4 0447 	ubfx	r4, r4, #1, #8
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
 800e448:	db12      	blt.n	800e470 <lv_draw_mask_radius+0x530>
 800e44a:	4285      	cmp	r5, r0
 800e44c:	dd10      	ble.n	800e470 <lv_draw_mask_radius+0x530>
 800e44e:	f816 8000 	ldrb.w	r8, [r6, r0]
    if(mask_new >= LV_OPA_MAX) return mask_act;
 800e452:	2cfc      	cmp	r4, #252	; 0xfc
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
 800e454:	fb18 f904 	smulbb	r9, r8, r4
    if(mask_new >= LV_OPA_MAX) return mask_act;
 800e458:	d808      	bhi.n	800e46c <lv_draw_mask_radius+0x52c>
    if(mask_new <= LV_OPA_MIN) return 0;
 800e45a:	2c02      	cmp	r4, #2
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
 800e45c:	eb09 2809 	add.w	r8, r9, r9, lsl #8
    if(mask_new <= LV_OPA_MIN) return 0;
 800e460:	f240 80f4 	bls.w	800e64c <lv_draw_mask_radius+0x70c>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
 800e464:	eb09 18c8 	add.w	r8, r9, r8, lsl #7
 800e468:	f3c8 58c7 	ubfx	r8, r8, #23, #8
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
 800e46c:	f806 8000 	strb.w	r8, [r6, r0]
                kr++;
 800e470:	f10c 0c01 	add.w	ip, ip, #1
                kl--;
 800e474:	3801      	subs	r0, #1
            for(; i <= x1.i; i++) {
 800e476:	3201      	adds	r2, #1
 800e478:	45f4      	cmp	ip, lr
 800e47a:	dbcd      	blt.n	800e418 <lv_draw_mask_radius+0x4d8>
 800e47c:	e048      	b.n	800e510 <lv_draw_mask_radius+0x5d0>
 800e47e:	469c      	mov	ip, r3
    uint32_t raw = (ref->i << 4) + (ref->f >> 4);
 800e480:	9a03      	ldr	r2, [sp, #12]
 800e482:	f10b 0301 	add.w	r3, fp, #1
 800e486:	9801      	ldr	r0, [sp, #4]
 800e488:	9304      	str	r3, [sp, #16]
 800e48a:	eb07 1e11 	add.w	lr, r7, r1, lsr #4
    d = (int32_t)d / (int32_t)(2 * raw) + raw;
 800e48e:	460c      	mov	r4, r1
                sqrt_approx(&y_next, &y_prev, r2 - (i * i));
 800e490:	fb02 a312 	mls	r3, r2, r2, sl
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
 800e494:	2800      	cmp	r0, #0
    uint32_t raw2 = raw * raw;
 800e496:	fb0e f10e 	mul.w	r1, lr, lr
    d = (int32_t)d / (int32_t)(2 * raw) + raw;
 800e49a:	ea4f 084e 	mov.w	r8, lr, lsl #1
    int32_t d = x - raw2;
 800e49e:	ebc1 2303 	rsb	r3, r1, r3, lsl #8
    d = (int32_t)d / (int32_t)(2 * raw) + raw;
 800e4a2:	fb93 f3f8 	sdiv	r3, r3, r8
 800e4a6:	4473      	add	r3, lr
    q->f = (d & 0xF) << 4;
 800e4a8:	ea4f 1103 	mov.w	r1, r3, lsl #4
 800e4ac:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
                m = (y_prev.f + y_next.f) >> 1;
 800e4b0:	440c      	add	r4, r1
                if(outer) m = 255 - m;
 800e4b2:	f484 74ff 	eor.w	r4, r4, #510	; 0x1fe
 800e4b6:	f3c4 0447 	ubfx	r4, r4, #1, #8
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
 800e4ba:	db12      	blt.n	800e4e2 <lv_draw_mask_radius+0x5a2>
 800e4bc:	42a8      	cmp	r0, r5
 800e4be:	da10      	bge.n	800e4e2 <lv_draw_mask_radius+0x5a2>
    if(mask_new >= LV_OPA_MAX) return mask_act;
 800e4c0:	2cfc      	cmp	r4, #252	; 0xfc
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
 800e4c2:	f816 e000 	ldrb.w	lr, [r6, r0]
    if(mask_new >= LV_OPA_MAX) return mask_act;
 800e4c6:	d80a      	bhi.n	800e4de <lv_draw_mask_radius+0x59e>
    if(mask_new <= LV_OPA_MIN) return 0;
 800e4c8:	2c02      	cmp	r4, #2
 800e4ca:	f240 80ce 	bls.w	800e66a <lv_draw_mask_radius+0x72a>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
 800e4ce:	fb14 fe0e 	smulbb	lr, r4, lr
 800e4d2:	eb0e 280e 	add.w	r8, lr, lr, lsl #8
 800e4d6:	eb0e 1ec8 	add.w	lr, lr, r8, lsl #7
 800e4da:	f3ce 5ec7 	ubfx	lr, lr, #23, #8
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
 800e4de:	f806 e000 	strb.w	lr, [r6, r0]
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
 800e4e2:	45ac      	cmp	ip, r5
 800e4e4:	da10      	bge.n	800e508 <lv_draw_mask_radius+0x5c8>
    if(mask_new >= LV_OPA_MAX) return mask_act;
 800e4e6:	2cfc      	cmp	r4, #252	; 0xfc
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
 800e4e8:	f816 e00c 	ldrb.w	lr, [r6, ip]
    if(mask_new >= LV_OPA_MAX) return mask_act;
 800e4ec:	d80a      	bhi.n	800e504 <lv_draw_mask_radius+0x5c4>
    if(mask_new <= LV_OPA_MIN) return 0;
 800e4ee:	2c02      	cmp	r4, #2
 800e4f0:	f240 80b8 	bls.w	800e664 <lv_draw_mask_radius+0x724>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
 800e4f4:	fb1e f404 	smulbb	r4, lr, r4
 800e4f8:	eb04 2e04 	add.w	lr, r4, r4, lsl #8
 800e4fc:	eb04 14ce 	add.w	r4, r4, lr, lsl #7
 800e500:	f3c4 5ec7 	ubfx	lr, r4, #23, #8
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
 800e504:	f806 e00c 	strb.w	lr, [r6, ip]
            for(; i <= x1.i; i++) {
 800e508:	3201      	adds	r2, #1
                kl--;
 800e50a:	3801      	subs	r0, #1
                kr++;
 800e50c:	f10c 0c01 	add.w	ip, ip, #1
            for(; i <= x1.i; i++) {
 800e510:	455a      	cmp	r2, fp
 800e512:	d9ba      	bls.n	800e48a <lv_draw_mask_radius+0x54a>
 800e514:	e684      	b.n	800e220 <lv_draw_mask_radius+0x2e0>
 800e516:	461c      	mov	r4, r3
 800e518:	f10b 0301 	add.w	r3, fp, #1
    uint32_t raw = (ref->i << 4) + (ref->f >> 4);
 800e51c:	9a03      	ldr	r2, [sp, #12]
 800e51e:	9801      	ldr	r0, [sp, #4]
 800e520:	9304      	str	r3, [sp, #16]
 800e522:	e637      	b.n	800e194 <lv_draw_mask_radius+0x254>
                _lv_sqrt(r2 - ((y - 1) * (y - 1)), &x1, sqrt_mask);
 800e524:	fb00 a010 	mls	r0, r0, r0, sl
 800e528:	a907      	add	r1, sp, #28
 800e52a:	9201      	str	r2, [sp, #4]
 800e52c:	f006 fbda 	bl	8014ce4 <_lv_sqrt>
 800e530:	9a01      	ldr	r2, [sp, #4]
 800e532:	e6bc      	b.n	800e2ae <lv_draw_mask_radius+0x36e>
                kl++;
 800e534:	1c48      	adds	r0, r1, #1
                if(len_tmp + first > len) len_tmp = len - first;
 800e536:	42af      	cmp	r7, r5
 800e538:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
                int32_t len_tmp = kr - first;
 800e53c:	bfd4      	ite	le
 800e53e:	1a39      	suble	r1, r7, r0
                if(len_tmp + first > len) len_tmp = len - first;
 800e540:	1a29      	subgt	r1, r5, r0
                if(first < len && len_tmp >= 0) {
 800e542:	2900      	cmp	r1, #0
 800e544:	f6ff ae97 	blt.w	800e276 <lv_draw_mask_radius+0x336>
 800e548:	42a8      	cmp	r0, r5
 800e54a:	f6bf ae94 	bge.w	800e276 <lv_draw_mask_radius+0x336>
                    _lv_memset_00(&mask_buf[first], len_tmp);
 800e54e:	4430      	add	r0, r6
 800e550:	f007 f912 	bl	8015778 <_lv_memset_00>
 800e554:	e68f      	b.n	800e276 <lv_draw_mask_radius+0x336>
                _lv_memset_00(&mask_buf[first], len - first);
 800e556:	1a29      	subs	r1, r5, r0
 800e558:	4430      	add	r0, r6
 800e55a:	f007 f90d 	bl	8015778 <_lv_memset_00>
            else return LV_DRAW_MASK_RES_CHANGED;
 800e55e:	2002      	movs	r0, #2
 800e560:	e50e      	b.n	800df80 <lv_draw_mask_radius+0x40>
                if(kl >= 0) _lv_memset_00(&mask_buf[0], kl);
 800e562:	4630      	mov	r0, r6
 800e564:	f007 f908 	bl	8015778 <_lv_memset_00>
 800e568:	e67b      	b.n	800e262 <lv_draw_mask_radius+0x322>
                _lv_sqrt(r2 - (y * y), &x0, sqrt_mask);
 800e56a:	a906      	add	r1, sp, #24
 800e56c:	fb04 a014 	mls	r0, r4, r4, sl
 800e570:	9201      	str	r2, [sp, #4]
 800e572:	f006 fbb7 	bl	8014ce4 <_lv_sqrt>
 800e576:	9a01      	ldr	r2, [sp, #4]
 800e578:	e566      	b.n	800e048 <lv_draw_mask_radius+0x108>
                _lv_sqrt(r2 - (i * i), &y_next, sqrt_mask);
 800e57a:	fb08 a018 	mls	r0, r8, r8, sl
 800e57e:	a909      	add	r1, sp, #36	; 0x24
 800e580:	9303      	str	r3, [sp, #12]
 800e582:	f006 fbaf 	bl	8014ce4 <_lv_sqrt>
                m = 255 - (((255 - x0.f) * (255 - y_next.f)) >> 9);
 800e586:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 800e58a:	f8bd 001a 	ldrh.w	r0, [sp, #26]
 800e58e:	f1c1 02ff 	rsb	r2, r1, #255	; 0xff
                if(outer) m = 255 - m;
 800e592:	9b03      	ldr	r3, [sp, #12]
                m = 255 - (((255 - x0.f) * (255 - y_next.f)) >> 9);
 800e594:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 800e598:	fb02 f200 	mul.w	r2, r2, r0
                if(outer) m = 255 - m;
 800e59c:	9800      	ldr	r0, [sp, #0]
                m = 255 - (((255 - x0.f) * (255 - y_next.f)) >> 9);
 800e59e:	f3c2 2247 	ubfx	r2, r2, #9, #8
                if(outer) m = 255 - m;
 800e5a2:	b908      	cbnz	r0, 800e5a8 <lv_draw_mask_radius+0x668>
                m = 255 - (((255 - x0.f) * (255 - y_next.f)) >> 9);
 800e5a4:	43d2      	mvns	r2, r2
 800e5a6:	b2d2      	uxtb	r2, r2
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
 800e5a8:	9801      	ldr	r0, [sp, #4]
 800e5aa:	2800      	cmp	r0, #0
 800e5ac:	db11      	blt.n	800e5d2 <lv_draw_mask_radius+0x692>
 800e5ae:	4285      	cmp	r5, r0
 800e5b0:	dd0f      	ble.n	800e5d2 <lv_draw_mask_radius+0x692>
    if(mask_new >= LV_OPA_MAX) return mask_act;
 800e5b2:	2afc      	cmp	r2, #252	; 0xfc
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
 800e5b4:	eb06 0400 	add.w	r4, r6, r0
 800e5b8:	5c30      	ldrb	r0, [r6, r0]
    if(mask_new >= LV_OPA_MAX) return mask_act;
 800e5ba:	d809      	bhi.n	800e5d0 <lv_draw_mask_radius+0x690>
    if(mask_new <= LV_OPA_MIN) return 0;
 800e5bc:	2a02      	cmp	r2, #2
 800e5be:	d963      	bls.n	800e688 <lv_draw_mask_radius+0x748>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
 800e5c0:	fb10 f002 	smulbb	r0, r0, r2
 800e5c4:	eb00 2700 	add.w	r7, r0, r0, lsl #8
 800e5c8:	eb00 10c7 	add.w	r0, r0, r7, lsl #7
 800e5cc:	f3c0 50c7 	ubfx	r0, r0, #23, #8
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
 800e5d0:	7020      	strb	r0, [r4, #0]
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
 800e5d2:	9802      	ldr	r0, [sp, #8]
 800e5d4:	2800      	cmp	r0, #0
 800e5d6:	db11      	blt.n	800e5fc <lv_draw_mask_radius+0x6bc>
 800e5d8:	4285      	cmp	r5, r0
 800e5da:	dd0f      	ble.n	800e5fc <lv_draw_mask_radius+0x6bc>
    if(mask_new >= LV_OPA_MAX) return mask_act;
 800e5dc:	2afc      	cmp	r2, #252	; 0xfc
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
 800e5de:	eb06 0400 	add.w	r4, r6, r0
 800e5e2:	5c30      	ldrb	r0, [r6, r0]
    if(mask_new >= LV_OPA_MAX) return mask_act;
 800e5e4:	d809      	bhi.n	800e5fa <lv_draw_mask_radius+0x6ba>
    if(mask_new <= LV_OPA_MIN) return 0;
 800e5e6:	2a02      	cmp	r2, #2
 800e5e8:	d950      	bls.n	800e68c <lv_draw_mask_radius+0x74c>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
 800e5ea:	fb10 f002 	smulbb	r0, r0, r2
 800e5ee:	eb00 2200 	add.w	r2, r0, r0, lsl #8
 800e5f2:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
 800e5f6:	f3c0 50c7 	ubfx	r0, r0, #23, #8
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
 800e5fa:	7020      	strb	r0, [r4, #0]
                kl--;
 800e5fc:	9a01      	ldr	r2, [sp, #4]
                i++;
 800e5fe:	3302      	adds	r3, #2
            for(; i <= x1.i; i++) {
 800e600:	f8bd b01c 	ldrh.w	fp, [sp, #28]
                kl--;
 800e604:	3a01      	subs	r2, #1
                i++;
 800e606:	9303      	str	r3, [sp, #12]
            for(; i <= x1.i; i++) {
 800e608:	455b      	cmp	r3, fp
                y_prev.f = y_next.f;
 800e60a:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
                kl--;
 800e60e:	9201      	str	r2, [sp, #4]
                kr++;
 800e610:	9a02      	ldr	r2, [sp, #8]
 800e612:	f102 0201 	add.w	r2, r2, #1
 800e616:	9202      	str	r2, [sp, #8]
            for(; i <= x1.i; i++) {
 800e618:	f67f ad6f 	bls.w	800e0fa <lv_draw_mask_radius+0x1ba>
 800e61c:	e614      	b.n	800e248 <lv_draw_mask_radius+0x308>
            int32_t first = rect.x1 - abs_x;
 800e61e:	1bc9      	subs	r1, r1, r7
            if(first < 0) first = 0;
 800e620:	ea21 70e1 	bic.w	r0, r1, r1, asr #31
            if(first <= len) {
 800e624:	42a8      	cmp	r0, r5
 800e626:	f73f ae26 	bgt.w	800e276 <lv_draw_mask_radius+0x336>
                int32_t last =  rect.x2 - abs_x - first + 1;
 800e62a:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	; 0x2c
 800e62e:	1bc9      	subs	r1, r1, r7
 800e630:	1a09      	subs	r1, r1, r0
 800e632:	3101      	adds	r1, #1
                if(first + last > len) last = len - first;
 800e634:	1843      	adds	r3, r0, r1
 800e636:	42ab      	cmp	r3, r5
 800e638:	bfc8      	it	gt
 800e63a:	1a29      	subgt	r1, r5, r0
                if(last >= 0) {
 800e63c:	2900      	cmp	r1, #0
 800e63e:	f6ff ae1a 	blt.w	800e276 <lv_draw_mask_radius+0x336>
                    _lv_memset_00(&mask_buf[first], last);
 800e642:	4430      	add	r0, r6
 800e644:	f007 f898 	bl	8015778 <_lv_memset_00>
        return LV_DRAW_MASK_RES_CHANGED;
 800e648:	2002      	movs	r0, #2
 800e64a:	e499      	b.n	800df80 <lv_draw_mask_radius+0x40>
    if(mask_new <= LV_OPA_MIN) return 0;
 800e64c:	f04f 0800 	mov.w	r8, #0
 800e650:	e70c      	b.n	800e46c <lv_draw_mask_radius+0x52c>
 800e652:	f04f 0800 	mov.w	r8, #0
 800e656:	e594      	b.n	800e182 <lv_draw_mask_radius+0x242>
 800e658:	f04f 0e00 	mov.w	lr, #0
 800e65c:	e5d9      	b.n	800e212 <lv_draw_mask_radius+0x2d2>
 800e65e:	f04f 0e00 	mov.w	lr, #0
 800e662:	e5c1      	b.n	800e1e8 <lv_draw_mask_radius+0x2a8>
 800e664:	f04f 0e00 	mov.w	lr, #0
 800e668:	e74c      	b.n	800e504 <lv_draw_mask_radius+0x5c4>
 800e66a:	f04f 0e00 	mov.w	lr, #0
 800e66e:	e736      	b.n	800e4de <lv_draw_mask_radius+0x59e>
 800e670:	2300      	movs	r3, #0
                mask_buf[kr] = mask_mix(mask_buf[kr], m);
 800e672:	55f3      	strb	r3, [r6, r7]
 800e674:	e661      	b.n	800e33a <lv_draw_mask_radius+0x3fa>
    if(mask_new <= LV_OPA_MIN) return 0;
 800e676:	2200      	movs	r2, #0
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
 800e678:	700a      	strb	r2, [r1, #0]
 800e67a:	e6a0      	b.n	800e3be <lv_draw_mask_radius+0x47e>
    if(mask_new <= LV_OPA_MIN) return 0;
 800e67c:	2000      	movs	r0, #0
                mask_buf[kl] = mask_mix(mask_buf[kl], m);
 800e67e:	5470      	strb	r0, [r6, r1]
 800e680:	e645      	b.n	800e30e <lv_draw_mask_radius+0x3ce>
    if(mask_new <= LV_OPA_MIN) return 0;
 800e682:	2200      	movs	r2, #0
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
 800e684:	700a      	strb	r2, [r1, #0]
 800e686:	e6b0      	b.n	800e3ea <lv_draw_mask_radius+0x4aa>
    if(mask_new <= LV_OPA_MIN) return 0;
 800e688:	2000      	movs	r0, #0
 800e68a:	e7a1      	b.n	800e5d0 <lv_draw_mask_radius+0x690>
 800e68c:	2000      	movs	r0, #0
 800e68e:	e7b4      	b.n	800e5fa <lv_draw_mask_radius+0x6ba>

0800e690 <lv_draw_mask_add>:
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param == NULL) break;
 800e690:	4b2d      	ldr	r3, [pc, #180]	; (800e748 <lv_draw_mask_add+0xb8>)
 800e692:	681a      	ldr	r2, [r3, #0]
{
 800e694:	b430      	push	{r4, r5}
 800e696:	4605      	mov	r5, r0
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param == NULL) break;
 800e698:	b312      	cbz	r2, 800e6e0 <lv_draw_mask_add+0x50>
 800e69a:	689a      	ldr	r2, [r3, #8]
 800e69c:	b34a      	cbz	r2, 800e6f2 <lv_draw_mask_add+0x62>
 800e69e:	691a      	ldr	r2, [r3, #16]
 800e6a0:	b36a      	cbz	r2, 800e6fe <lv_draw_mask_add+0x6e>
 800e6a2:	699a      	ldr	r2, [r3, #24]
 800e6a4:	b372      	cbz	r2, 800e704 <lv_draw_mask_add+0x74>
 800e6a6:	6a1a      	ldr	r2, [r3, #32]
 800e6a8:	b37a      	cbz	r2, 800e70a <lv_draw_mask_add+0x7a>
 800e6aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e6ac:	b382      	cbz	r2, 800e710 <lv_draw_mask_add+0x80>
 800e6ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e6b0:	b38a      	cbz	r2, 800e716 <lv_draw_mask_add+0x86>
 800e6b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e6b4:	b392      	cbz	r2, 800e71c <lv_draw_mask_add+0x8c>
 800e6b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e6b8:	b39a      	cbz	r2, 800e722 <lv_draw_mask_add+0x92>
 800e6ba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e6bc:	b3a2      	cbz	r2, 800e728 <lv_draw_mask_add+0x98>
 800e6be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e6c0:	b3aa      	cbz	r2, 800e72e <lv_draw_mask_add+0x9e>
 800e6c2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e6c4:	b3b2      	cbz	r2, 800e734 <lv_draw_mask_add+0xa4>
 800e6c6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800e6c8:	b1b2      	cbz	r2, 800e6f8 <lv_draw_mask_add+0x68>
 800e6ca:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800e6cc:	b3aa      	cbz	r2, 800e73a <lv_draw_mask_add+0xaa>
 800e6ce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800e6d0:	b3b2      	cbz	r2, 800e740 <lv_draw_mask_add+0xb0>
 800e6d2:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800e6d4:	b11a      	cbz	r2, 800e6de <lv_draw_mask_add+0x4e>
        return LV_MASK_ID_INV;
 800e6d6:	f04f 30ff 	mov.w	r0, #4294967295
}
 800e6da:	bc30      	pop	{r4, r5}
 800e6dc:	4770      	bx	lr
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 800e6de:	220f      	movs	r2, #15
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param == NULL) break;
 800e6e0:	4614      	mov	r4, r2
    LV_GC_ROOT(_lv_draw_mask_list[i]).param = param;
 800e6e2:	f843 5034 	str.w	r5, [r3, r4, lsl #3]
    LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id = custom_id;
 800e6e6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
    return i;
 800e6ea:	b210      	sxth	r0, r2
    LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id = custom_id;
 800e6ec:	6059      	str	r1, [r3, #4]
}
 800e6ee:	bc30      	pop	{r4, r5}
 800e6f0:	4770      	bx	lr
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 800e6f2:	2201      	movs	r2, #1
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param == NULL) break;
 800e6f4:	4614      	mov	r4, r2
 800e6f6:	e7f4      	b.n	800e6e2 <lv_draw_mask_add+0x52>
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 800e6f8:	220c      	movs	r2, #12
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param == NULL) break;
 800e6fa:	4614      	mov	r4, r2
 800e6fc:	e7f1      	b.n	800e6e2 <lv_draw_mask_add+0x52>
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 800e6fe:	2202      	movs	r2, #2
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param == NULL) break;
 800e700:	4614      	mov	r4, r2
 800e702:	e7ee      	b.n	800e6e2 <lv_draw_mask_add+0x52>
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 800e704:	2203      	movs	r2, #3
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param == NULL) break;
 800e706:	4614      	mov	r4, r2
 800e708:	e7eb      	b.n	800e6e2 <lv_draw_mask_add+0x52>
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 800e70a:	2204      	movs	r2, #4
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param == NULL) break;
 800e70c:	4614      	mov	r4, r2
 800e70e:	e7e8      	b.n	800e6e2 <lv_draw_mask_add+0x52>
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 800e710:	2205      	movs	r2, #5
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param == NULL) break;
 800e712:	4614      	mov	r4, r2
 800e714:	e7e5      	b.n	800e6e2 <lv_draw_mask_add+0x52>
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 800e716:	2206      	movs	r2, #6
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param == NULL) break;
 800e718:	4614      	mov	r4, r2
 800e71a:	e7e2      	b.n	800e6e2 <lv_draw_mask_add+0x52>
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 800e71c:	2207      	movs	r2, #7
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param == NULL) break;
 800e71e:	4614      	mov	r4, r2
 800e720:	e7df      	b.n	800e6e2 <lv_draw_mask_add+0x52>
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 800e722:	2208      	movs	r2, #8
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param == NULL) break;
 800e724:	4614      	mov	r4, r2
 800e726:	e7dc      	b.n	800e6e2 <lv_draw_mask_add+0x52>
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 800e728:	2209      	movs	r2, #9
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param == NULL) break;
 800e72a:	4614      	mov	r4, r2
 800e72c:	e7d9      	b.n	800e6e2 <lv_draw_mask_add+0x52>
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 800e72e:	220a      	movs	r2, #10
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param == NULL) break;
 800e730:	4614      	mov	r4, r2
 800e732:	e7d6      	b.n	800e6e2 <lv_draw_mask_add+0x52>
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 800e734:	220b      	movs	r2, #11
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param == NULL) break;
 800e736:	4614      	mov	r4, r2
 800e738:	e7d3      	b.n	800e6e2 <lv_draw_mask_add+0x52>
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 800e73a:	220d      	movs	r2, #13
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param == NULL) break;
 800e73c:	4614      	mov	r4, r2
 800e73e:	e7d0      	b.n	800e6e2 <lv_draw_mask_add+0x52>
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 800e740:	220e      	movs	r2, #14
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param == NULL) break;
 800e742:	4614      	mov	r4, r2
 800e744:	e7cd      	b.n	800e6e2 <lv_draw_mask_add+0x52>
 800e746:	bf00      	nop
 800e748:	20020504 	.word	0x20020504

0800e74c <lv_draw_mask_apply>:
{
 800e74c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    while(m->param) {
 800e750:	4d12      	ldr	r5, [pc, #72]	; (800e79c <lv_draw_mask_apply+0x50>)
{
 800e752:	b082      	sub	sp, #8
    while(m->param) {
 800e754:	682c      	ldr	r4, [r5, #0]
 800e756:	b1c4      	cbz	r4, 800e78a <lv_draw_mask_apply+0x3e>
 800e758:	4607      	mov	r7, r0
 800e75a:	4688      	mov	r8, r1
 800e75c:	4691      	mov	r9, r2
 800e75e:	469a      	mov	sl, r3
    bool changed = false;
 800e760:	2600      	movs	r6, #0
 800e762:	e005      	b.n	800e770 <lv_draw_mask_apply+0x24>
        else if(res == LV_DRAW_MASK_RES_CHANGED) changed = true;
 800e764:	2802      	cmp	r0, #2
    while(m->param) {
 800e766:	f855 4f08 	ldr.w	r4, [r5, #8]!
        else if(res == LV_DRAW_MASK_RES_CHANGED) changed = true;
 800e76a:	bf08      	it	eq
 800e76c:	2601      	moveq	r6, #1
    while(m->param) {
 800e76e:	b15c      	cbz	r4, 800e788 <lv_draw_mask_apply+0x3c>
        res = dsc->cb(mask_buf, abs_x, abs_y, len, (void *)m->param);
 800e770:	9400      	str	r4, [sp, #0]
 800e772:	4653      	mov	r3, sl
 800e774:	6824      	ldr	r4, [r4, #0]
 800e776:	464a      	mov	r2, r9
 800e778:	4641      	mov	r1, r8
 800e77a:	4638      	mov	r0, r7
 800e77c:	47a0      	blx	r4
        if(res == LV_DRAW_MASK_RES_TRANSP) return LV_DRAW_MASK_RES_TRANSP;
 800e77e:	2800      	cmp	r0, #0
 800e780:	d1f0      	bne.n	800e764 <lv_draw_mask_apply+0x18>
}
 800e782:	b002      	add	sp, #8
 800e784:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return changed ? LV_DRAW_MASK_RES_CHANGED : LV_DRAW_MASK_RES_FULL_COVER;
 800e788:	b91e      	cbnz	r6, 800e792 <lv_draw_mask_apply+0x46>
 800e78a:	2001      	movs	r0, #1
}
 800e78c:	b002      	add	sp, #8
 800e78e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return changed ? LV_DRAW_MASK_RES_CHANGED : LV_DRAW_MASK_RES_FULL_COVER;
 800e792:	2002      	movs	r0, #2
}
 800e794:	b002      	add	sp, #8
 800e796:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e79a:	bf00      	nop
 800e79c:	20020504 	.word	0x20020504

0800e7a0 <lv_draw_mask_remove_id>:
    if(id != LV_MASK_ID_INV) {
 800e7a0:	1c43      	adds	r3, r0, #1
 800e7a2:	d00d      	beq.n	800e7c0 <lv_draw_mask_remove_id+0x20>
        p = LV_GC_ROOT(_lv_draw_mask_list[id]).param;
 800e7a4:	4a07      	ldr	r2, [pc, #28]	; (800e7c4 <lv_draw_mask_remove_id+0x24>)
 800e7a6:	4603      	mov	r3, r0
        LV_GC_ROOT(_lv_draw_mask_list[id]).param = NULL;
 800e7a8:	2100      	movs	r1, #0
{
 800e7aa:	b410      	push	{r4}
        LV_GC_ROOT(_lv_draw_mask_list[id]).custom_id = NULL;
 800e7ac:	eb02 04c0 	add.w	r4, r2, r0, lsl #3
        p = LV_GC_ROOT(_lv_draw_mask_list[id]).param;
 800e7b0:	f852 0030 	ldr.w	r0, [r2, r0, lsl #3]
        LV_GC_ROOT(_lv_draw_mask_list[id]).param = NULL;
 800e7b4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
        LV_GC_ROOT(_lv_draw_mask_list[id]).custom_id = NULL;
 800e7b8:	6061      	str	r1, [r4, #4]
}
 800e7ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e7be:	4770      	bx	lr
    void * p = NULL;
 800e7c0:	2000      	movs	r0, #0
}
 800e7c2:	4770      	bx	lr
 800e7c4:	20020504 	.word	0x20020504

0800e7c8 <lv_draw_mask_remove_custom>:
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id == custom_id) {
 800e7c8:	4b51      	ldr	r3, [pc, #324]	; (800e910 <lv_draw_mask_remove_custom+0x148>)
 800e7ca:	685a      	ldr	r2, [r3, #4]
 800e7cc:	4290      	cmp	r0, r2
 800e7ce:	d02f      	beq.n	800e830 <lv_draw_mask_remove_custom+0x68>
 800e7d0:	68da      	ldr	r2, [r3, #12]
    void * p = NULL;
 800e7d2:	2100      	movs	r1, #0
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id == custom_id) {
 800e7d4:	4290      	cmp	r0, r2
 800e7d6:	d032      	beq.n	800e83e <lv_draw_mask_remove_custom+0x76>
 800e7d8:	695a      	ldr	r2, [r3, #20]
 800e7da:	4290      	cmp	r0, r2
 800e7dc:	d036      	beq.n	800e84c <lv_draw_mask_remove_custom+0x84>
 800e7de:	69da      	ldr	r2, [r3, #28]
 800e7e0:	4290      	cmp	r0, r2
 800e7e2:	d03a      	beq.n	800e85a <lv_draw_mask_remove_custom+0x92>
 800e7e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e7e6:	4290      	cmp	r0, r2
 800e7e8:	d03e      	beq.n	800e868 <lv_draw_mask_remove_custom+0xa0>
 800e7ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e7ec:	4290      	cmp	r0, r2
 800e7ee:	d042      	beq.n	800e876 <lv_draw_mask_remove_custom+0xae>
 800e7f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e7f2:	4290      	cmp	r0, r2
 800e7f4:	d046      	beq.n	800e884 <lv_draw_mask_remove_custom+0xbc>
 800e7f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e7f8:	4290      	cmp	r0, r2
 800e7fa:	d04a      	beq.n	800e892 <lv_draw_mask_remove_custom+0xca>
 800e7fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e7fe:	4290      	cmp	r0, r2
 800e800:	d04e      	beq.n	800e8a0 <lv_draw_mask_remove_custom+0xd8>
 800e802:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e804:	4290      	cmp	r0, r2
 800e806:	d052      	beq.n	800e8ae <lv_draw_mask_remove_custom+0xe6>
 800e808:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e80a:	4290      	cmp	r0, r2
 800e80c:	d056      	beq.n	800e8bc <lv_draw_mask_remove_custom+0xf4>
 800e80e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e810:	4290      	cmp	r0, r2
 800e812:	d05a      	beq.n	800e8ca <lv_draw_mask_remove_custom+0x102>
 800e814:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800e816:	4290      	cmp	r0, r2
 800e818:	d05e      	beq.n	800e8d8 <lv_draw_mask_remove_custom+0x110>
 800e81a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800e81c:	4290      	cmp	r0, r2
 800e81e:	d062      	beq.n	800e8e6 <lv_draw_mask_remove_custom+0x11e>
 800e820:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800e822:	4290      	cmp	r0, r2
 800e824:	d066      	beq.n	800e8f4 <lv_draw_mask_remove_custom+0x12c>
 800e826:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800e828:	4282      	cmp	r2, r0
 800e82a:	d06a      	beq.n	800e902 <lv_draw_mask_remove_custom+0x13a>
}
 800e82c:	4608      	mov	r0, r1
 800e82e:	4770      	bx	lr
            LV_GC_ROOT(_lv_draw_mask_list[i]).param = NULL;
 800e830:	2200      	movs	r2, #0
            p = LV_GC_ROOT(_lv_draw_mask_list[i]).param;
 800e832:	6819      	ldr	r1, [r3, #0]
            LV_GC_ROOT(_lv_draw_mask_list[i]).param = NULL;
 800e834:	e9c3 2200 	strd	r2, r2, [r3]
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id == custom_id) {
 800e838:	68da      	ldr	r2, [r3, #12]
 800e83a:	4290      	cmp	r0, r2
 800e83c:	d1cc      	bne.n	800e7d8 <lv_draw_mask_remove_custom+0x10>
            LV_GC_ROOT(_lv_draw_mask_list[i]).param = NULL;
 800e83e:	2200      	movs	r2, #0
            p = LV_GC_ROOT(_lv_draw_mask_list[i]).param;
 800e840:	6899      	ldr	r1, [r3, #8]
            LV_GC_ROOT(_lv_draw_mask_list[i]).param = NULL;
 800e842:	e9c3 2202 	strd	r2, r2, [r3, #8]
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id == custom_id) {
 800e846:	695a      	ldr	r2, [r3, #20]
 800e848:	4290      	cmp	r0, r2
 800e84a:	d1c8      	bne.n	800e7de <lv_draw_mask_remove_custom+0x16>
            LV_GC_ROOT(_lv_draw_mask_list[i]).param = NULL;
 800e84c:	2200      	movs	r2, #0
            p = LV_GC_ROOT(_lv_draw_mask_list[i]).param;
 800e84e:	6919      	ldr	r1, [r3, #16]
            LV_GC_ROOT(_lv_draw_mask_list[i]).param = NULL;
 800e850:	e9c3 2204 	strd	r2, r2, [r3, #16]
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id == custom_id) {
 800e854:	69da      	ldr	r2, [r3, #28]
 800e856:	4290      	cmp	r0, r2
 800e858:	d1c4      	bne.n	800e7e4 <lv_draw_mask_remove_custom+0x1c>
            LV_GC_ROOT(_lv_draw_mask_list[i]).param = NULL;
 800e85a:	2200      	movs	r2, #0
            p = LV_GC_ROOT(_lv_draw_mask_list[i]).param;
 800e85c:	6999      	ldr	r1, [r3, #24]
            LV_GC_ROOT(_lv_draw_mask_list[i]).param = NULL;
 800e85e:	e9c3 2206 	strd	r2, r2, [r3, #24]
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id == custom_id) {
 800e862:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e864:	4290      	cmp	r0, r2
 800e866:	d1c0      	bne.n	800e7ea <lv_draw_mask_remove_custom+0x22>
            LV_GC_ROOT(_lv_draw_mask_list[i]).param = NULL;
 800e868:	2200      	movs	r2, #0
            p = LV_GC_ROOT(_lv_draw_mask_list[i]).param;
 800e86a:	6a19      	ldr	r1, [r3, #32]
            LV_GC_ROOT(_lv_draw_mask_list[i]).param = NULL;
 800e86c:	e9c3 2208 	strd	r2, r2, [r3, #32]
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id == custom_id) {
 800e870:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e872:	4290      	cmp	r0, r2
 800e874:	d1bc      	bne.n	800e7f0 <lv_draw_mask_remove_custom+0x28>
            LV_GC_ROOT(_lv_draw_mask_list[i]).param = NULL;
 800e876:	2200      	movs	r2, #0
            p = LV_GC_ROOT(_lv_draw_mask_list[i]).param;
 800e878:	6a99      	ldr	r1, [r3, #40]	; 0x28
            LV_GC_ROOT(_lv_draw_mask_list[i]).param = NULL;
 800e87a:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id == custom_id) {
 800e87e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e880:	4290      	cmp	r0, r2
 800e882:	d1b8      	bne.n	800e7f6 <lv_draw_mask_remove_custom+0x2e>
            LV_GC_ROOT(_lv_draw_mask_list[i]).param = NULL;
 800e884:	2200      	movs	r2, #0
            p = LV_GC_ROOT(_lv_draw_mask_list[i]).param;
 800e886:	6b19      	ldr	r1, [r3, #48]	; 0x30
            LV_GC_ROOT(_lv_draw_mask_list[i]).param = NULL;
 800e888:	e9c3 220c 	strd	r2, r2, [r3, #48]	; 0x30
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id == custom_id) {
 800e88c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e88e:	4290      	cmp	r0, r2
 800e890:	d1b4      	bne.n	800e7fc <lv_draw_mask_remove_custom+0x34>
            LV_GC_ROOT(_lv_draw_mask_list[i]).param = NULL;
 800e892:	2200      	movs	r2, #0
            p = LV_GC_ROOT(_lv_draw_mask_list[i]).param;
 800e894:	6b99      	ldr	r1, [r3, #56]	; 0x38
            LV_GC_ROOT(_lv_draw_mask_list[i]).param = NULL;
 800e896:	e9c3 220e 	strd	r2, r2, [r3, #56]	; 0x38
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id == custom_id) {
 800e89a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e89c:	4290      	cmp	r0, r2
 800e89e:	d1b0      	bne.n	800e802 <lv_draw_mask_remove_custom+0x3a>
            LV_GC_ROOT(_lv_draw_mask_list[i]).param = NULL;
 800e8a0:	2200      	movs	r2, #0
            p = LV_GC_ROOT(_lv_draw_mask_list[i]).param;
 800e8a2:	6c19      	ldr	r1, [r3, #64]	; 0x40
            LV_GC_ROOT(_lv_draw_mask_list[i]).param = NULL;
 800e8a4:	e9c3 2210 	strd	r2, r2, [r3, #64]	; 0x40
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id == custom_id) {
 800e8a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e8aa:	4290      	cmp	r0, r2
 800e8ac:	d1ac      	bne.n	800e808 <lv_draw_mask_remove_custom+0x40>
            LV_GC_ROOT(_lv_draw_mask_list[i]).param = NULL;
 800e8ae:	2200      	movs	r2, #0
            p = LV_GC_ROOT(_lv_draw_mask_list[i]).param;
 800e8b0:	6c99      	ldr	r1, [r3, #72]	; 0x48
            LV_GC_ROOT(_lv_draw_mask_list[i]).param = NULL;
 800e8b2:	e9c3 2212 	strd	r2, r2, [r3, #72]	; 0x48
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id == custom_id) {
 800e8b6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e8b8:	4290      	cmp	r0, r2
 800e8ba:	d1a8      	bne.n	800e80e <lv_draw_mask_remove_custom+0x46>
            LV_GC_ROOT(_lv_draw_mask_list[i]).param = NULL;
 800e8bc:	2200      	movs	r2, #0
            p = LV_GC_ROOT(_lv_draw_mask_list[i]).param;
 800e8be:	6d19      	ldr	r1, [r3, #80]	; 0x50
            LV_GC_ROOT(_lv_draw_mask_list[i]).param = NULL;
 800e8c0:	e9c3 2214 	strd	r2, r2, [r3, #80]	; 0x50
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id == custom_id) {
 800e8c4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e8c6:	4290      	cmp	r0, r2
 800e8c8:	d1a4      	bne.n	800e814 <lv_draw_mask_remove_custom+0x4c>
            LV_GC_ROOT(_lv_draw_mask_list[i]).param = NULL;
 800e8ca:	2200      	movs	r2, #0
            p = LV_GC_ROOT(_lv_draw_mask_list[i]).param;
 800e8cc:	6d99      	ldr	r1, [r3, #88]	; 0x58
            LV_GC_ROOT(_lv_draw_mask_list[i]).param = NULL;
 800e8ce:	e9c3 2216 	strd	r2, r2, [r3, #88]	; 0x58
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id == custom_id) {
 800e8d2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800e8d4:	4290      	cmp	r0, r2
 800e8d6:	d1a0      	bne.n	800e81a <lv_draw_mask_remove_custom+0x52>
            LV_GC_ROOT(_lv_draw_mask_list[i]).param = NULL;
 800e8d8:	2200      	movs	r2, #0
            p = LV_GC_ROOT(_lv_draw_mask_list[i]).param;
 800e8da:	6e19      	ldr	r1, [r3, #96]	; 0x60
            LV_GC_ROOT(_lv_draw_mask_list[i]).param = NULL;
 800e8dc:	e9c3 2218 	strd	r2, r2, [r3, #96]	; 0x60
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id == custom_id) {
 800e8e0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800e8e2:	4290      	cmp	r0, r2
 800e8e4:	d19c      	bne.n	800e820 <lv_draw_mask_remove_custom+0x58>
            LV_GC_ROOT(_lv_draw_mask_list[i]).param = NULL;
 800e8e6:	2200      	movs	r2, #0
            p = LV_GC_ROOT(_lv_draw_mask_list[i]).param;
 800e8e8:	6e99      	ldr	r1, [r3, #104]	; 0x68
            LV_GC_ROOT(_lv_draw_mask_list[i]).param = NULL;
 800e8ea:	e9c3 221a 	strd	r2, r2, [r3, #104]	; 0x68
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id == custom_id) {
 800e8ee:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800e8f0:	4290      	cmp	r0, r2
 800e8f2:	d198      	bne.n	800e826 <lv_draw_mask_remove_custom+0x5e>
            LV_GC_ROOT(_lv_draw_mask_list[i]).param = NULL;
 800e8f4:	2200      	movs	r2, #0
            p = LV_GC_ROOT(_lv_draw_mask_list[i]).param;
 800e8f6:	6f19      	ldr	r1, [r3, #112]	; 0x70
            LV_GC_ROOT(_lv_draw_mask_list[i]).param = NULL;
 800e8f8:	e9c3 221c 	strd	r2, r2, [r3, #112]	; 0x70
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id == custom_id) {
 800e8fc:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800e8fe:	4282      	cmp	r2, r0
 800e900:	d194      	bne.n	800e82c <lv_draw_mask_remove_custom+0x64>
            p = LV_GC_ROOT(_lv_draw_mask_list[i]).param;
 800e902:	6f99      	ldr	r1, [r3, #120]	; 0x78
            LV_GC_ROOT(_lv_draw_mask_list[i]).param = NULL;
 800e904:	2200      	movs	r2, #0
}
 800e906:	4608      	mov	r0, r1
            LV_GC_ROOT(_lv_draw_mask_list[i]).param = NULL;
 800e908:	e9c3 221e 	strd	r2, r2, [r3, #120]	; 0x78
}
 800e90c:	4770      	bx	lr
 800e90e:	bf00      	nop
 800e910:	20020504 	.word	0x20020504

0800e914 <lv_draw_mask_get_cnt>:
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param) cnt++;
 800e914:	4b20      	ldr	r3, [pc, #128]	; (800e998 <lv_draw_mask_get_cnt+0x84>)
 800e916:	6818      	ldr	r0, [r3, #0]
 800e918:	689a      	ldr	r2, [r3, #8]
    uint8_t cnt = 0;
 800e91a:	3800      	subs	r0, #0
 800e91c:	bf18      	it	ne
 800e91e:	2001      	movne	r0, #1
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param) cnt++;
 800e920:	b102      	cbz	r2, 800e924 <lv_draw_mask_get_cnt+0x10>
 800e922:	3001      	adds	r0, #1
 800e924:	691a      	ldr	r2, [r3, #16]
 800e926:	b10a      	cbz	r2, 800e92c <lv_draw_mask_get_cnt+0x18>
 800e928:	3001      	adds	r0, #1
 800e92a:	b2c0      	uxtb	r0, r0
 800e92c:	699a      	ldr	r2, [r3, #24]
 800e92e:	b10a      	cbz	r2, 800e934 <lv_draw_mask_get_cnt+0x20>
 800e930:	3001      	adds	r0, #1
 800e932:	b2c0      	uxtb	r0, r0
 800e934:	6a1a      	ldr	r2, [r3, #32]
 800e936:	b10a      	cbz	r2, 800e93c <lv_draw_mask_get_cnt+0x28>
 800e938:	3001      	adds	r0, #1
 800e93a:	b2c0      	uxtb	r0, r0
 800e93c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e93e:	b10a      	cbz	r2, 800e944 <lv_draw_mask_get_cnt+0x30>
 800e940:	3001      	adds	r0, #1
 800e942:	b2c0      	uxtb	r0, r0
 800e944:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e946:	b10a      	cbz	r2, 800e94c <lv_draw_mask_get_cnt+0x38>
 800e948:	3001      	adds	r0, #1
 800e94a:	b2c0      	uxtb	r0, r0
 800e94c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e94e:	b10a      	cbz	r2, 800e954 <lv_draw_mask_get_cnt+0x40>
 800e950:	3001      	adds	r0, #1
 800e952:	b2c0      	uxtb	r0, r0
 800e954:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e956:	b10a      	cbz	r2, 800e95c <lv_draw_mask_get_cnt+0x48>
 800e958:	3001      	adds	r0, #1
 800e95a:	b2c0      	uxtb	r0, r0
 800e95c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e95e:	b10a      	cbz	r2, 800e964 <lv_draw_mask_get_cnt+0x50>
 800e960:	3001      	adds	r0, #1
 800e962:	b2c0      	uxtb	r0, r0
 800e964:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e966:	b10a      	cbz	r2, 800e96c <lv_draw_mask_get_cnt+0x58>
 800e968:	3001      	adds	r0, #1
 800e96a:	b2c0      	uxtb	r0, r0
 800e96c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e96e:	b10a      	cbz	r2, 800e974 <lv_draw_mask_get_cnt+0x60>
 800e970:	3001      	adds	r0, #1
 800e972:	b2c0      	uxtb	r0, r0
 800e974:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800e976:	b10a      	cbz	r2, 800e97c <lv_draw_mask_get_cnt+0x68>
 800e978:	3001      	adds	r0, #1
 800e97a:	b2c0      	uxtb	r0, r0
 800e97c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800e97e:	b10a      	cbz	r2, 800e984 <lv_draw_mask_get_cnt+0x70>
 800e980:	3001      	adds	r0, #1
 800e982:	b2c0      	uxtb	r0, r0
 800e984:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800e986:	b10a      	cbz	r2, 800e98c <lv_draw_mask_get_cnt+0x78>
 800e988:	3001      	adds	r0, #1
 800e98a:	b2c0      	uxtb	r0, r0
 800e98c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e98e:	b10b      	cbz	r3, 800e994 <lv_draw_mask_get_cnt+0x80>
 800e990:	3001      	adds	r0, #1
 800e992:	b2c0      	uxtb	r0, r0
}
 800e994:	4770      	bx	lr
 800e996:	bf00      	nop
 800e998:	20020504 	.word	0x20020504

0800e99c <lv_draw_mask_line_points_init>:
{
 800e99c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e9a0:	4615      	mov	r5, r2
 800e9a2:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 800e9a6:	460e      	mov	r6, r1
    _lv_memset_00(param, sizeof(lv_draw_mask_line_param_t));
 800e9a8:	212c      	movs	r1, #44	; 0x2c
{
 800e9aa:	461f      	mov	r7, r3
 800e9ac:	4604      	mov	r4, r0
 800e9ae:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
    _lv_memset_00(param, sizeof(lv_draw_mask_line_param_t));
 800e9b2:	f006 fee1 	bl	8015778 <_lv_memset_00>
    if(p1y > p2y) {
 800e9b6:	4545      	cmp	r5, r8
 800e9b8:	dd05      	ble.n	800e9c6 <lv_draw_mask_line_points_init+0x2a>
 800e9ba:	462a      	mov	r2, r5
 800e9bc:	4633      	mov	r3, r6
 800e9be:	4645      	mov	r5, r8
        p1x = t;
 800e9c0:	463e      	mov	r6, r7
    if(p1y > p2y) {
 800e9c2:	4690      	mov	r8, r2
        p2x = p1x;
 800e9c4:	461f      	mov	r7, r3
    param->flat = (LV_MATH_ABS(p2x - p1x) > LV_MATH_ABS(p2y - p1y)) ? 1 : 0;
 800e9c6:	1bb9      	subs	r1, r7, r6
 800e9c8:	eba8 0205 	sub.w	r2, r8, r5
 800e9cc:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800e9d0:	ea81 70e1 	eor.w	r0, r1, r1, asr #31
    param->cfg.p2.x = p2x;
 800e9d4:	81a7      	strh	r7, [r4, #12]
    param->flat = (LV_MATH_ABS(p2x - p1x) > LV_MATH_ABS(p2y - p1y)) ? 1 : 0;
 800e9d6:	ea82 7ce2 	eor.w	ip, r2, r2, asr #31
    param->cfg.side = side;
 800e9da:	7c27      	ldrb	r7, [r4, #16]
    param->flat = (LV_MATH_ABS(p2x - p1x) > LV_MATH_ABS(p2y - p1y)) ? 1 : 0;
 800e9dc:	eba0 70e1 	sub.w	r0, r0, r1, asr #31
    param->cfg.p1.y = p1y;
 800e9e0:	8165      	strh	r5, [r4, #10]
    param->flat = (LV_MATH_ABS(p2x - p1x) > LV_MATH_ABS(p2y - p1y)) ? 1 : 0;
 800e9e2:	ebac 7ce2 	sub.w	ip, ip, r2, asr #31
    param->cfg.side = side;
 800e9e6:	f369 0701 	bfi	r7, r9, #0, #2
    param->origo.y = p1y;
 800e9ea:	82a5      	strh	r5, [r4, #20]
    param->flat = (LV_MATH_ABS(p2x - p1x) > LV_MATH_ABS(p2y - p1y)) ? 1 : 0;
 800e9ec:	4560      	cmp	r0, ip
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_line;
 800e9ee:	4d3b      	ldr	r5, [pc, #236]	; (800eadc <lv_draw_mask_line_points_init+0x140>)
    param->cfg.p1.x = p1x;
 800e9f0:	8126      	strh	r6, [r4, #8]
    param->flat = (LV_MATH_ABS(p2x - p1x) > LV_MATH_ABS(p2y - p1y)) ? 1 : 0;
 800e9f2:	bfd4      	ite	le
 800e9f4:	2000      	movle	r0, #0
 800e9f6:	2001      	movgt	r0, #1
    param->cfg.p2.y = p2y;
 800e9f8:	f8a4 800e 	strh.w	r8, [r4, #14]
    param->flat = (LV_MATH_ABS(p2x - p1x) > LV_MATH_ABS(p2y - p1y)) ? 1 : 0;
 800e9fc:	f360 0300 	bfi	r3, r0, #0, #1
    param->yx_steep = 0;
 800ea00:	2000      	movs	r0, #0
    param->origo.x = p1x;
 800ea02:	8266      	strh	r6, [r4, #18]
    param->flat = (LV_MATH_ABS(p2x - p1x) > LV_MATH_ABS(p2y - p1y)) ? 1 : 0;
 800ea04:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    if(param->flat) {
 800ea08:	07db      	lsls	r3, r3, #31
    param->cfg.side = side;
 800ea0a:	7427      	strb	r7, [r4, #16]
    param->dsc.type = LV_DRAW_MASK_TYPE_LINE;
 800ea0c:	7120      	strb	r0, [r4, #4]
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_line;
 800ea0e:	6025      	str	r5, [r4, #0]
    param->xy_steep = 0;
 800ea10:	e9c4 0006 	strd	r0, r0, [r4, #24]
    if(param->flat) {
 800ea14:	d527      	bpl.n	800ea66 <lv_draw_mask_line_points_init+0xca>
        if(dx) {
 800ea16:	2900      	cmp	r1, #0
 800ea18:	d04c      	beq.n	800eab4 <lv_draw_mask_line_points_init+0x118>
            m = (1 << 20) / dx;  /*m is multiplier to normalize y (upscaled by 1024)*/
 800ea1a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800ea1e:	fb93 f3f1 	sdiv	r3, r3, r1
            param->yx_steep = (m * dy) >> 10;
 800ea22:	fb02 f303 	mul.w	r3, r2, r3
 800ea26:	129d      	asrs	r5, r3, #10
 800ea28:	131b      	asrs	r3, r3, #12
 800ea2a:	61e5      	str	r5, [r4, #28]
        if(dy) {
 800ea2c:	b372      	cbz	r2, 800ea8c <lv_draw_mask_line_points_init+0xf0>
            m = (1 << 20) / dy;  /*m is multiplier to normalize x (upscaled by 1024)*/
 800ea2e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
        param->steep = param->xy_steep;
 800ea32:	6225      	str	r5, [r4, #32]
            m = (1 << 20) / dy;  /*m is multiplier to normalize x (upscaled by 1024)*/
 800ea34:	fb90 f2f2 	sdiv	r2, r0, r2
            param->xy_steep = (m * dx) >> 10;
 800ea38:	fb01 f102 	mul.w	r1, r1, r2
    if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT) param->inv = 0;
 800ea3c:	7c22      	ldrb	r2, [r4, #16]
            param->xy_steep = (m * dx) >> 10;
 800ea3e:	1289      	asrs	r1, r1, #10
    if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT) param->inv = 0;
 800ea40:	f012 0203 	ands.w	r2, r2, #3
            param->xy_steep = (m * dx) >> 10;
 800ea44:	61a1      	str	r1, [r4, #24]
    if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT) param->inv = 0;
 800ea46:	d026      	beq.n	800ea96 <lv_draw_mask_line_points_init+0xfa>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) param->inv = 1;
 800ea48:	2a01      	cmp	r2, #1
 800ea4a:	d036      	beq.n	800eaba <lv_draw_mask_line_points_init+0x11e>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP) {
 800ea4c:	2a02      	cmp	r2, #2
 800ea4e:	d03b      	beq.n	800eac8 <lv_draw_mask_line_points_init+0x12c>
        if(param->steep > 0) param->inv = 0;
 800ea50:	2d00      	cmp	r5, #0
 800ea52:	dd32      	ble.n	800eaba <lv_draw_mask_line_points_init+0x11e>
 800ea54:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800ea58:	f36f 0241 	bfc	r2, #1, #1
 800ea5c:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
    param->spx = param->steep >> 2;
 800ea60:	6263      	str	r3, [r4, #36]	; 0x24
}
 800ea62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(dy) {
 800ea66:	b312      	cbz	r2, 800eaae <lv_draw_mask_line_points_init+0x112>
            m = (1 << 20) / dy;  /*m is multiplier to normalize x (upscaled by 1024)*/
 800ea68:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800ea6c:	fb93 f3f2 	sdiv	r3, r3, r2
            param->xy_steep = (m * dx) >> 10;
 800ea70:	fb01 f303 	mul.w	r3, r1, r3
 800ea74:	129d      	asrs	r5, r3, #10
 800ea76:	131b      	asrs	r3, r3, #12
 800ea78:	61a5      	str	r5, [r4, #24]
        if(dx) {
 800ea7a:	b139      	cbz	r1, 800ea8c <lv_draw_mask_line_points_init+0xf0>
            m = (1 << 20) / dx;  /*m is multiplier to normalize x (upscaled by 1024)*/
 800ea7c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800ea80:	fb90 f1f1 	sdiv	r1, r0, r1
            param->yx_steep = (m * dy) >> 10;
 800ea84:	fb02 f201 	mul.w	r2, r2, r1
 800ea88:	1292      	asrs	r2, r2, #10
 800ea8a:	61e2      	str	r2, [r4, #28]
    if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT) param->inv = 0;
 800ea8c:	7c22      	ldrb	r2, [r4, #16]
        param->steep = param->xy_steep;
 800ea8e:	6225      	str	r5, [r4, #32]
    if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT) param->inv = 0;
 800ea90:	f012 0203 	ands.w	r2, r2, #3
 800ea94:	d1d8      	bne.n	800ea48 <lv_draw_mask_line_points_init+0xac>
 800ea96:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800ea9a:	f36f 0241 	bfc	r2, #1, #1
 800ea9e:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
    if(param->steep < 0) param->spx = -param->spx;
 800eaa2:	2d00      	cmp	r5, #0
 800eaa4:	dadc      	bge.n	800ea60 <lv_draw_mask_line_points_init+0xc4>
 800eaa6:	425b      	negs	r3, r3
 800eaa8:	6263      	str	r3, [r4, #36]	; 0x24
}
 800eaaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eaae:	4613      	mov	r3, r2
 800eab0:	4615      	mov	r5, r2
 800eab2:	e7e2      	b.n	800ea7a <lv_draw_mask_line_points_init+0xde>
 800eab4:	460b      	mov	r3, r1
 800eab6:	460d      	mov	r5, r1
 800eab8:	e7b8      	b.n	800ea2c <lv_draw_mask_line_points_init+0x90>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) param->inv = 1;
 800eaba:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800eabe:	f042 0202 	orr.w	r2, r2, #2
 800eac2:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
 800eac6:	e7ec      	b.n	800eaa2 <lv_draw_mask_line_points_init+0x106>
        if(param->steep > 0) param->inv = 1;
 800eac8:	2d00      	cmp	r5, #0
 800eaca:	dde4      	ble.n	800ea96 <lv_draw_mask_line_points_init+0xfa>
 800eacc:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800ead0:	f042 0202 	orr.w	r2, r2, #2
 800ead4:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
 800ead8:	e7c2      	b.n	800ea60 <lv_draw_mask_line_points_init+0xc4>
 800eada:	bf00      	nop
 800eadc:	0800da5d 	.word	0x0800da5d

0800eae0 <lv_draw_mask_radius_init>:
{
 800eae0:	b4f0      	push	{r4, r5, r6, r7}
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800eae2:	88cc      	ldrh	r4, [r1, #6]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800eae4:	888d      	ldrh	r5, [r1, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800eae6:	3401      	adds	r4, #1
 800eae8:	884f      	ldrh	r7, [r1, #2]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800eaea:	3501      	adds	r5, #1
 800eaec:	880e      	ldrh	r6, [r1, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800eaee:	1be4      	subs	r4, r4, r7
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800eaf0:	1bad      	subs	r5, r5, r6
    int32_t short_side = LV_MATH_MIN(w, h);
 800eaf2:	b224      	sxth	r4, r4
 800eaf4:	b22d      	sxth	r5, r5
 800eaf6:	42ac      	cmp	r4, r5
 800eaf8:	bfa8      	it	ge
 800eafa:	462c      	movge	r4, r5
    if(radius > short_side >> 1) radius = short_side >> 1;
 800eafc:	ebb2 0f64 	cmp.w	r2, r4, asr #1
 800eb00:	dd01      	ble.n	800eb06 <lv_draw_mask_radius_init+0x26>
 800eb02:	1065      	asrs	r5, r4, #1
 800eb04:	b22a      	sxth	r2, r5
    while(len) {
 800eb06:	f100 0408 	add.w	r4, r0, #8
 800eb0a:	1d0d      	adds	r5, r1, #4
 800eb0c:	42ac      	cmp	r4, r5
 800eb0e:	d203      	bcs.n	800eb18 <lv_draw_mask_radius_init+0x38>
 800eb10:	f100 040c 	add.w	r4, r0, #12
 800eb14:	42a1      	cmp	r1, r4
 800eb16:	d313      	bcc.n	800eb40 <lv_draw_mask_radius_init+0x60>
        *d8 = *s8;
 800eb18:	680c      	ldr	r4, [r1, #0]
 800eb1a:	6084      	str	r4, [r0, #8]
 800eb1c:	6849      	ldr	r1, [r1, #4]
 800eb1e:	60c1      	str	r1, [r0, #12]
    param->cfg.outer = inv ? 1 : 0;
 800eb20:	7c81      	ldrb	r1, [r0, #18]
    param->dsc.type = LV_DRAW_MASK_TYPE_RADIUS;
 800eb22:	2502      	movs	r5, #2
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_radius;
 800eb24:	4e0f      	ldr	r6, [pc, #60]	; (800eb64 <lv_draw_mask_radius_init+0x84>)
    param->y_prev = INT32_MIN;
 800eb26:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
    param->cfg.outer = inv ? 1 : 0;
 800eb2a:	f363 0100 	bfi	r1, r3, #0, #1
    param->y_prev_x.i = 0;
 800eb2e:	2300      	movs	r3, #0
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_radius;
 800eb30:	6006      	str	r6, [r0, #0]
    param->dsc.type = LV_DRAW_MASK_TYPE_RADIUS;
 800eb32:	7105      	strb	r5, [r0, #4]
    param->cfg.radius = radius;
 800eb34:	8202      	strh	r2, [r0, #16]
    param->cfg.outer = inv ? 1 : 0;
 800eb36:	7481      	strb	r1, [r0, #18]
    param->y_prev_x.i = 0;
 800eb38:	e9c0 4305 	strd	r4, r3, [r0, #20]
}
 800eb3c:	bcf0      	pop	{r4, r5, r6, r7}
 800eb3e:	4770      	bx	lr
 800eb40:	780c      	ldrb	r4, [r1, #0]
 800eb42:	7204      	strb	r4, [r0, #8]
 800eb44:	784c      	ldrb	r4, [r1, #1]
 800eb46:	7244      	strb	r4, [r0, #9]
 800eb48:	788c      	ldrb	r4, [r1, #2]
 800eb4a:	7284      	strb	r4, [r0, #10]
 800eb4c:	78cc      	ldrb	r4, [r1, #3]
 800eb4e:	72c4      	strb	r4, [r0, #11]
 800eb50:	790c      	ldrb	r4, [r1, #4]
 800eb52:	7304      	strb	r4, [r0, #12]
 800eb54:	794c      	ldrb	r4, [r1, #5]
 800eb56:	7344      	strb	r4, [r0, #13]
 800eb58:	798c      	ldrb	r4, [r1, #6]
 800eb5a:	7384      	strb	r4, [r0, #14]
 800eb5c:	79c9      	ldrb	r1, [r1, #7]
 800eb5e:	73c1      	strb	r1, [r0, #15]
    while(len) {
 800eb60:	e7de      	b.n	800eb20 <lv_draw_mask_radius_init+0x40>
 800eb62:	bf00      	nop
 800eb64:	0800df41 	.word	0x0800df41

0800eb68 <shadow_blur_corner>:
#endif

}

LV_ATTRIBUTE_FAST_MEM static void shadow_blur_corner(lv_coord_t size, lv_coord_t sw, uint16_t * sh_ups_buf)
{
 800eb68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int32_t s_left = sw >> 1;
    int32_t s_right = (sw >> 1);
    if((sw & 1) == 0) s_left--;
 800eb6c:	07cb      	lsls	r3, r1, #31
{
 800eb6e:	4605      	mov	r5, r0
 800eb70:	4616      	mov	r6, r2
    int32_t s_left = sw >> 1;
 800eb72:	ea4f 0861 	mov.w	r8, r1, asr #1
{
 800eb76:	ed2d 8b02 	vpush	{d8}
 800eb7a:	b089      	sub	sp, #36	; 0x24
 800eb7c:	9101      	str	r1, [sp, #4]
    if((sw & 1) == 0) s_left--;
 800eb7e:	f100 80cd 	bmi.w	800ed1c <shadow_blur_corner+0x1b4>
 800eb82:	f108 33ff 	add.w	r3, r8, #4294967295
 800eb86:	9305      	str	r3, [sp, #20]

    /*Horizontal blur*/
    uint16_t * sh_ups_blur_buf = _lv_mem_buf_get(size * sizeof(uint16_t));
 800eb88:	006c      	lsls	r4, r5, #1
 800eb8a:	4620      	mov	r0, r4
 800eb8c:	f006 fccc 	bl	8015528 <_lv_mem_buf_get>
    int32_t x;
    int32_t y;

    uint16_t * sh_ups_tmp_buf = sh_ups_buf;

    for(y = 0; y < size; y++) {
 800eb90:	2d00      	cmp	r5, #0
    uint16_t * sh_ups_blur_buf = _lv_mem_buf_get(size * sizeof(uint16_t));
 800eb92:	ee08 0a10 	vmov	s16, r0
    for(y = 0; y < size; y++) {
 800eb96:	f340 811e 	ble.w	800edd6 <shadow_blur_corner+0x26e>
        int32_t v = sh_ups_tmp_buf[size - 1] * sw;
 800eb9a:	1ea2      	subs	r2, r4, #2
 800eb9c:	f108 0a01 	add.w	sl, r8, #1
 800eba0:	1e6b      	subs	r3, r5, #1
 800eba2:	4637      	mov	r7, r6
 800eba4:	9202      	str	r2, [sp, #8]
    for(y = 0; y < size; y++) {
 800eba6:	f04f 0b00 	mov.w	fp, #0
 800ebaa:	9a05      	ldr	r2, [sp, #20]
 800ebac:	9306      	str	r3, [sp, #24]
 800ebae:	4492      	add	sl, r2
 800ebb0:	eb08 0902 	add.w	r9, r8, r2
 800ebb4:	9607      	str	r6, [sp, #28]
 800ebb6:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 800ebba:	ebca 7aca 	rsb	sl, sl, sl, lsl #31
 800ebbe:	4443      	add	r3, r8
 800ebc0:	9203      	str	r2, [sp, #12]
 800ebc2:	eb06 0a4a 	add.w	sl, r6, sl, lsl #1
 800ebc6:	4626      	mov	r6, r4
 800ebc8:	4604      	mov	r4, r0
 800ebca:	9304      	str	r3, [sp, #16]
        int32_t v = sh_ups_tmp_buf[size - 1] * sw;
 800ebcc:	9b02      	ldr	r3, [sp, #8]
 800ebce:	9a01      	ldr	r2, [sp, #4]
 800ebd0:	5af9      	ldrh	r1, [r7, r3]
 800ebd2:	e9dd e303 	ldrd	lr, r3, [sp, #12]
 800ebd6:	fb02 f101 	mul.w	r1, r2, r1
        for(x = size - 1; x >= 0; x--) {
            sh_ups_blur_buf[x] = v;

            /*Forget the right pixel*/
            uint32_t right_val = 0;
            if(x + s_right < size) right_val = sh_ups_tmp_buf[x + s_right];
 800ebda:	429d      	cmp	r5, r3
            v -= right_val;

            /*Add the left pixel*/
            uint32_t left_val;
            if(x - s_left - 1 < 0) left_val = sh_ups_tmp_buf[0];
 800ebdc:	eba3 0209 	sub.w	r2, r3, r9
            uint32_t right_val = 0;
 800ebe0:	f04f 0000 	mov.w	r0, #0
            sh_ups_blur_buf[x] = v;
 800ebe4:	f82e 1902 	strh.w	r1, [lr], #-2
            if(x + s_right < size) right_val = sh_ups_tmp_buf[x + s_right];
 800ebe8:	bfc8      	it	gt
 800ebea:	f837 0013 	ldrhgt.w	r0, [r7, r3, lsl #1]
            if(x - s_left - 1 < 0) left_val = sh_ups_tmp_buf[0];
 800ebee:	2a00      	cmp	r2, #0
            v -= right_val;
 800ebf0:	eba1 0100 	sub.w	r1, r1, r0
            if(x - s_left - 1 < 0) left_val = sh_ups_tmp_buf[0];
 800ebf4:	f103 30ff 	add.w	r0, r3, #4294967295
 800ebf8:	dd06      	ble.n	800ec08 <shadow_blur_corner+0xa0>
            else left_val = sh_ups_tmp_buf[x - s_left - 1];
 800ebfa:	f83a 2013 	ldrh.w	r2, [sl, r3, lsl #1]
        for(x = size - 1; x >= 0; x--) {
 800ebfe:	4543      	cmp	r3, r8
            v += left_val;
 800ec00:	4411      	add	r1, r2
        for(x = size - 1; x >= 0; x--) {
 800ec02:	d005      	beq.n	800ec10 <shadow_blur_corner+0xa8>
        int32_t v = sh_ups_tmp_buf[size - 1] * sw;
 800ec04:	4603      	mov	r3, r0
 800ec06:	e7e8      	b.n	800ebda <shadow_blur_corner+0x72>
            if(x - s_left - 1 < 0) left_val = sh_ups_tmp_buf[0];
 800ec08:	883a      	ldrh	r2, [r7, #0]
        for(x = size - 1; x >= 0; x--) {
 800ec0a:	4543      	cmp	r3, r8
            v += left_val;
 800ec0c:	4411      	add	r1, r2
        for(x = size - 1; x >= 0; x--) {
 800ec0e:	d1f9      	bne.n	800ec04 <shadow_blur_corner+0x9c>
    for(y = 0; y < size; y++) {
 800ec10:	f10b 0b01 	add.w	fp, fp, #1
        }
        _lv_memcpy(sh_ups_tmp_buf, sh_ups_blur_buf, size * sizeof(uint16_t));
 800ec14:	4638      	mov	r0, r7
 800ec16:	4632      	mov	r2, r6
 800ec18:	4621      	mov	r1, r4
 800ec1a:	f006 fa2f 	bl	801507c <_lv_memcpy>
    for(y = 0; y < size; y++) {
 800ec1e:	455d      	cmp	r5, fp
 800ec20:	44b2      	add	sl, r6
        sh_ups_tmp_buf += size;
 800ec22:	4437      	add	r7, r6
    for(y = 0; y < size; y++) {
 800ec24:	d1d2      	bne.n	800ebcc <shadow_blur_corner+0x64>
 800ec26:	4634      	mov	r4, r6
 800ec28:	9e07      	ldr	r6, [sp, #28]
    }

    /*Vertical blur*/
    uint32_t i;
    sh_ups_buf[0] = sh_ups_buf[0] / sw;
 800ec2a:	9901      	ldr	r1, [sp, #4]
    for(i = 1; i < (uint32_t)size * size; i++) {
 800ec2c:	fb05 f305 	mul.w	r3, r5, r5
    sh_ups_buf[0] = sh_ups_buf[0] / sw;
 800ec30:	8832      	ldrh	r2, [r6, #0]
    for(i = 1; i < (uint32_t)size * size; i++) {
 800ec32:	2b01      	cmp	r3, #1
    sh_ups_buf[0] = sh_ups_buf[0] / sw;
 800ec34:	fb92 f2f1 	sdiv	r2, r2, r1
 800ec38:	b292      	uxth	r2, r2
 800ec3a:	8032      	strh	r2, [r6, #0]
    for(i = 1; i < (uint32_t)size * size; i++) {
 800ec3c:	f240 80d7 	bls.w	800edee <shadow_blur_corner+0x286>
 800ec40:	1eb1      	subs	r1, r6, #2
 800ec42:	4630      	mov	r0, r6
 800ec44:	eb01 0143 	add.w	r1, r1, r3, lsl #1
        if(sh_ups_buf[i] == sh_ups_buf[i - 1]) sh_ups_buf[i] = sh_ups_buf[i - 1];
 800ec48:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800ec4c:	4293      	cmp	r3, r2
 800ec4e:	d062      	beq.n	800ed16 <shadow_blur_corner+0x1ae>
        else sh_ups_buf[i] = sh_ups_buf[i] / sw;
 800ec50:	9a01      	ldr	r2, [sp, #4]
    for(i = 1; i < (uint32_t)size * size; i++) {
 800ec52:	4288      	cmp	r0, r1
        else sh_ups_buf[i] = sh_ups_buf[i] / sw;
 800ec54:	fb93 f3f2 	sdiv	r3, r3, r2
 800ec58:	b29a      	uxth	r2, r3
 800ec5a:	8002      	strh	r2, [r0, #0]
    for(i = 1; i < (uint32_t)size * size; i++) {
 800ec5c:	d1f4      	bne.n	800ec48 <shadow_blur_corner+0xe0>
    }

    for(x = 0; x < size; x++) {
 800ec5e:	2d00      	cmp	r5, #0
 800ec60:	dd40      	ble.n	800ece4 <shadow_blur_corner+0x17c>
 800ec62:	1e6b      	subs	r3, r5, #1
 800ec64:	9306      	str	r3, [sp, #24]
 800ec66:	2d01      	cmp	r5, #1
            v -= top_val;

            /*Add the bottom pixel*/
            uint32_t bottom_val;
            if(y + s_left + 1 < size) bottom_val = sh_ups_buf[(y + s_left + 1) * size + x];
            else bottom_val = sh_ups_buf[(size - 1) * size + x];
 800ec68:	fb05 f903 	mul.w	r9, r5, r3
 800ec6c:	ea6f 0808 	mvn.w	r8, r8
 800ec70:	9a05      	ldr	r2, [sp, #20]
 800ec72:	d156      	bne.n	800ed22 <shadow_blur_corner+0x1ba>
 800ec74:	1c51      	adds	r1, r2, #1
        int32_t v = sh_ups_tmp_buf[0] * sw;
 800ec76:	8833      	ldrh	r3, [r6, #0]
 800ec78:	eba8 0802 	sub.w	r8, r8, r2
 800ec7c:	9a01      	ldr	r2, [sp, #4]
 800ec7e:	eb06 0b49 	add.w	fp, r6, r9, lsl #1
 800ec82:	ee18 7a10 	vmov	r7, s16
 800ec86:	eba1 0909 	sub.w	r9, r1, r9
 800ec8a:	fb02 f203 	mul.w	r2, r2, r3
            if(y - s_right <= 0) top_val = sh_ups_tmp_buf[0];
 800ec8e:	46c2      	mov	sl, r8
        int32_t v = sh_ups_tmp_buf[0] * sw;
 800ec90:	46b6      	mov	lr, r6
 800ec92:	4613      	mov	r3, r2
        for(y = 0; y < size ; y++, sh_ups_tmp_buf += size) {
 800ec94:	eb0b 0549 	add.w	r5, fp, r9, lsl #1
 800ec98:	ee18 2a10 	vmov	r2, s16
 800ec9c:	eb04 0907 	add.w	r9, r4, r7
            if(y - s_right <= 0) top_val = sh_ups_tmp_buf[0];
 800eca0:	eb0a 0001 	add.w	r0, sl, r1
            sh_ups_blur_buf[y] = v < 0 ? 0 : (v >> SHADOW_UPSCALE_SHIFT);
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	f04f 0c00 	mov.w	ip, #0
 800ecaa:	bfa8      	it	ge
 800ecac:	f3c3 1c8f 	ubfxge	ip, r3, #6, #16
            if(y - s_right <= 0) top_val = sh_ups_tmp_buf[0];
 800ecb0:	2800      	cmp	r0, #0
            sh_ups_blur_buf[y] = v < 0 ? 0 : (v >> SHADOW_UPSCALE_SHIFT);
 800ecb2:	f827 cb02 	strh.w	ip, [r7], #2
            if(y - s_right <= 0) top_val = sh_ups_tmp_buf[0];
 800ecb6:	bfd4      	ite	le
 800ecb8:	f8be 0000 	ldrhle.w	r0, [lr]
            else top_val = sh_ups_buf[(y - s_right) * size + x];
 800ecbc:	f835 0018 	ldrhgt.w	r0, [r5, r8, lsl #1]
            if(y + s_left + 1 < size) bottom_val = sh_ups_buf[(y + s_left + 1) * size + x];
 800ecc0:	2900      	cmp	r1, #0
            v -= top_val;
 800ecc2:	eba3 0300 	sub.w	r3, r3, r0
            if(y + s_left + 1 < size) bottom_val = sh_ups_buf[(y + s_left + 1) * size + x];
 800ecc6:	dc16      	bgt.n	800ecf6 <shadow_blur_corner+0x18e>
 800ecc8:	8828      	ldrh	r0, [r5, #0]
        for(y = 0; y < size ; y++, sh_ups_tmp_buf += size) {
 800ecca:	45b9      	cmp	r9, r7
 800eccc:	44a6      	add	lr, r4
 800ecce:	f101 0101 	add.w	r1, r1, #1
 800ecd2:	4425      	add	r5, r4
            v += bottom_val;
 800ecd4:	4403      	add	r3, r0
        for(y = 0; y < size ; y++, sh_ups_tmp_buf += size) {
 800ecd6:	d1e3      	bne.n	800eca0 <shadow_blur_corner+0x138>
        }

        /*Write back the result into `sh_ups_buf`*/
        sh_ups_tmp_buf = &sh_ups_buf[x];
        for(y = 0; y < size; y++, sh_ups_tmp_buf += size) {
            (*sh_ups_tmp_buf) = sh_ups_blur_buf[y];
 800ecd8:	f832 3b02 	ldrh.w	r3, [r2], #2
        for(y = 0; y < size; y++, sh_ups_tmp_buf += size) {
 800ecdc:	4591      	cmp	r9, r2
            (*sh_ups_tmp_buf) = sh_ups_blur_buf[y];
 800ecde:	8033      	strh	r3, [r6, #0]
        for(y = 0; y < size; y++, sh_ups_tmp_buf += size) {
 800ece0:	4426      	add	r6, r4
 800ece2:	d1f9      	bne.n	800ecd8 <shadow_blur_corner+0x170>
        }
    }

    _lv_mem_buf_release(sh_ups_blur_buf);
 800ece4:	ee18 0a10 	vmov	r0, s16
}
 800ece8:	b009      	add	sp, #36	; 0x24
 800ecea:	ecbd 8b02 	vpop	{d8}
 800ecee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    _lv_mem_buf_release(sh_ups_blur_buf);
 800ecf2:	f006 b8f1 	b.w	8014ed8 <_lv_mem_buf_release>
            else bottom_val = sh_ups_buf[(size - 1) * size + x];
 800ecf6:	f8bb 0000 	ldrh.w	r0, [fp]
        for(y = 0; y < size ; y++, sh_ups_tmp_buf += size) {
 800ecfa:	45b9      	cmp	r9, r7
 800ecfc:	44a6      	add	lr, r4
 800ecfe:	4425      	add	r5, r4
 800ed00:	f101 0101 	add.w	r1, r1, #1
            v += bottom_val;
 800ed04:	4403      	add	r3, r0
        for(y = 0; y < size ; y++, sh_ups_tmp_buf += size) {
 800ed06:	d1cb      	bne.n	800eca0 <shadow_blur_corner+0x138>
            (*sh_ups_tmp_buf) = sh_ups_blur_buf[y];
 800ed08:	f832 3b02 	ldrh.w	r3, [r2], #2
        for(y = 0; y < size; y++, sh_ups_tmp_buf += size) {
 800ed0c:	4591      	cmp	r9, r2
            (*sh_ups_tmp_buf) = sh_ups_blur_buf[y];
 800ed0e:	8033      	strh	r3, [r6, #0]
        for(y = 0; y < size; y++, sh_ups_tmp_buf += size) {
 800ed10:	4426      	add	r6, r4
 800ed12:	d1e1      	bne.n	800ecd8 <shadow_blur_corner+0x170>
 800ed14:	e7e6      	b.n	800ece4 <shadow_blur_corner+0x17c>
    for(i = 1; i < (uint32_t)size * size; i++) {
 800ed16:	4288      	cmp	r0, r1
 800ed18:	d196      	bne.n	800ec48 <shadow_blur_corner+0xe0>
 800ed1a:	e7a0      	b.n	800ec5e <shadow_blur_corner+0xf6>
    int32_t s_left = sw >> 1;
 800ed1c:	f8cd 8014 	str.w	r8, [sp, #20]
 800ed20:	e732      	b.n	800eb88 <shadow_blur_corner+0x20>
 800ed22:	fb02 5305 	mla	r3, r2, r5, r5
 800ed26:	eba8 0a02 	sub.w	sl, r8, r2
 800ed2a:	1c51      	adds	r1, r2, #1
 800ed2c:	ee18 2a10 	vmov	r2, s16
 800ed30:	eba3 0309 	sub.w	r3, r3, r9
 800ed34:	fb05 fb0a 	mul.w	fp, r5, sl
 800ed38:	eb06 0949 	add.w	r9, r6, r9, lsl #1
 800ed3c:	eb04 0802 	add.w	r8, r4, r2
 800ed40:	005b      	lsls	r3, r3, #1
 800ed42:	9603      	str	r6, [sp, #12]
 800ed44:	9104      	str	r1, [sp, #16]
 800ed46:	9305      	str	r3, [sp, #20]
    for(x = 0; x < size; x++) {
 800ed48:	2300      	movs	r3, #0
 800ed4a:	9302      	str	r3, [sp, #8]
        sh_ups_tmp_buf = &sh_ups_buf[x];
 800ed4c:	9b03      	ldr	r3, [sp, #12]
        int32_t v = sh_ups_tmp_buf[0] * sw;
 800ed4e:	ee18 7a10 	vmov	r7, s16
 800ed52:	9a05      	ldr	r2, [sp, #20]
        sh_ups_tmp_buf = &sh_ups_buf[x];
 800ed54:	4618      	mov	r0, r3
        int32_t v = sh_ups_tmp_buf[0] * sw;
 800ed56:	3302      	adds	r3, #2
 800ed58:	9901      	ldr	r1, [sp, #4]
 800ed5a:	eb09 0602 	add.w	r6, r9, r2
 800ed5e:	9303      	str	r3, [sp, #12]
 800ed60:	4686      	mov	lr, r0
 800ed62:	8803      	ldrh	r3, [r0, #0]
 800ed64:	9a04      	ldr	r2, [sp, #16]
 800ed66:	fb01 f303 	mul.w	r3, r1, r3
            if(y - s_right <= 0) top_val = sh_ups_tmp_buf[0];
 800ed6a:	eb0a 0102 	add.w	r1, sl, r2
            sh_ups_blur_buf[y] = v < 0 ? 0 : (v >> SHADOW_UPSCALE_SHIFT);
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	f04f 0c00 	mov.w	ip, #0
 800ed74:	bfa8      	it	ge
 800ed76:	f3c3 1c8f 	ubfxge	ip, r3, #6, #16
            if(y - s_right <= 0) top_val = sh_ups_tmp_buf[0];
 800ed7a:	2900      	cmp	r1, #0
            sh_ups_blur_buf[y] = v < 0 ? 0 : (v >> SHADOW_UPSCALE_SHIFT);
 800ed7c:	f827 cb02 	strh.w	ip, [r7], #2
            if(y - s_right <= 0) top_val = sh_ups_tmp_buf[0];
 800ed80:	bfd4      	ite	le
 800ed82:	f8be 1000 	ldrhle.w	r1, [lr]
            else top_val = sh_ups_buf[(y - s_right) * size + x];
 800ed86:	f836 101b 	ldrhgt.w	r1, [r6, fp, lsl #1]
            if(y + s_left + 1 < size) bottom_val = sh_ups_buf[(y + s_left + 1) * size + x];
 800ed8a:	4295      	cmp	r5, r2
            v -= top_val;
 800ed8c:	eba3 0301 	sub.w	r3, r3, r1
            if(y + s_left + 1 < size) bottom_val = sh_ups_buf[(y + s_left + 1) * size + x];
 800ed90:	dd17      	ble.n	800edc2 <shadow_blur_corner+0x25a>
 800ed92:	8831      	ldrh	r1, [r6, #0]
        for(y = 0; y < size ; y++, sh_ups_tmp_buf += size) {
 800ed94:	4547      	cmp	r7, r8
 800ed96:	44a6      	add	lr, r4
 800ed98:	f102 0201 	add.w	r2, r2, #1
 800ed9c:	4426      	add	r6, r4
            v += bottom_val;
 800ed9e:	440b      	add	r3, r1
        for(y = 0; y < size ; y++, sh_ups_tmp_buf += size) {
 800eda0:	d1e3      	bne.n	800ed6a <shadow_blur_corner+0x202>
 800eda2:	ee18 3a10 	vmov	r3, s16
            (*sh_ups_tmp_buf) = sh_ups_blur_buf[y];
 800eda6:	f833 2b02 	ldrh.w	r2, [r3], #2
        for(y = 0; y < size; y++, sh_ups_tmp_buf += size) {
 800edaa:	4543      	cmp	r3, r8
            (*sh_ups_tmp_buf) = sh_ups_blur_buf[y];
 800edac:	8002      	strh	r2, [r0, #0]
        for(y = 0; y < size; y++, sh_ups_tmp_buf += size) {
 800edae:	4420      	add	r0, r4
 800edb0:	d1f9      	bne.n	800eda6 <shadow_blur_corner+0x23e>
    for(x = 0; x < size; x++) {
 800edb2:	9b02      	ldr	r3, [sp, #8]
 800edb4:	f109 0902 	add.w	r9, r9, #2
 800edb8:	3301      	adds	r3, #1
 800edba:	429d      	cmp	r5, r3
 800edbc:	9302      	str	r3, [sp, #8]
 800edbe:	d1c5      	bne.n	800ed4c <shadow_blur_corner+0x1e4>
 800edc0:	e790      	b.n	800ece4 <shadow_blur_corner+0x17c>
            else bottom_val = sh_ups_buf[(size - 1) * size + x];
 800edc2:	f8b9 1000 	ldrh.w	r1, [r9]
        for(y = 0; y < size ; y++, sh_ups_tmp_buf += size) {
 800edc6:	4547      	cmp	r7, r8
 800edc8:	44a6      	add	lr, r4
 800edca:	4426      	add	r6, r4
 800edcc:	f102 0201 	add.w	r2, r2, #1
            v += bottom_val;
 800edd0:	440b      	add	r3, r1
        for(y = 0; y < size ; y++, sh_ups_tmp_buf += size) {
 800edd2:	d1ca      	bne.n	800ed6a <shadow_blur_corner+0x202>
 800edd4:	e7e5      	b.n	800eda2 <shadow_blur_corner+0x23a>
    sh_ups_buf[0] = sh_ups_buf[0] / sw;
 800edd6:	8832      	ldrh	r2, [r6, #0]
    for(i = 1; i < (uint32_t)size * size; i++) {
 800edd8:	fb05 f305 	mul.w	r3, r5, r5
    sh_ups_buf[0] = sh_ups_buf[0] / sw;
 800eddc:	9901      	ldr	r1, [sp, #4]
    for(i = 1; i < (uint32_t)size * size; i++) {
 800edde:	2b01      	cmp	r3, #1
    sh_ups_buf[0] = sh_ups_buf[0] / sw;
 800ede0:	fb92 f2f1 	sdiv	r2, r2, r1
 800ede4:	b292      	uxth	r2, r2
 800ede6:	8032      	strh	r2, [r6, #0]
    for(i = 1; i < (uint32_t)size * size; i++) {
 800ede8:	f63f af2a 	bhi.w	800ec40 <shadow_blur_corner+0xd8>
 800edec:	e77a      	b.n	800ece4 <shadow_blur_corner+0x17c>
 800edee:	9b06      	ldr	r3, [sp, #24]
 800edf0:	e739      	b.n	800ec66 <shadow_blur_corner+0xfe>
 800edf2:	bf00      	nop

0800edf4 <draw_full_border>:
}
#endif

static void draw_full_border(const lv_area_t * area_inner, const lv_area_t * area_outer, const lv_area_t * clip,
                             lv_coord_t radius, bool radius_is_in, lv_color_t color, lv_opa_t opa, lv_blend_mode_t blend_mode)
{
 800edf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edf8:	ed2d 8b04 	vpush	{d8-d9}
 800edfc:	b0a5      	sub	sp, #148	; 0x94
 800edfe:	4698      	mov	r8, r3
 800ee00:	460c      	mov	r4, r1
 800ee02:	4605      	mov	r5, r0
 800ee04:	f89d 30d0 	ldrb.w	r3, [sp, #208]	; 0xd0
 800ee08:	ee08 2a10 	vmov	s16, r2
 800ee0c:	f89d 60c8 	ldrb.w	r6, [sp, #200]	; 0xc8
 800ee10:	9305      	str	r3, [sp, #20]
 800ee12:	f89d 30d4 	ldrb.w	r3, [sp, #212]	; 0xd4
 800ee16:	f8dd 90cc 	ldr.w	r9, [sp, #204]	; 0xcc
 800ee1a:	9304      	str	r3, [sp, #16]
    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
 800ee1c:	f7ff fd7a 	bl	800e914 <lv_draw_mask_get_cnt>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800ee20:	88ab      	ldrh	r3, [r5, #4]
 800ee22:	4683      	mov	fp, r0
    bool simple_mode = true;
    if(other_mask_cnt) simple_mode = false;

    int32_t inner_w = lv_area_get_width(area_inner);
    int32_t inner_h = lv_area_get_height(area_inner);
    lv_coord_t border_width = area_outer->x2 - area_inner->x2;
 800ee24:	88a2      	ldrh	r2, [r4, #4]
 800ee26:	930c      	str	r3, [sp, #48]	; 0x30
 800ee28:	920b      	str	r2, [sp, #44]	; 0x2c
 800ee2a:	1ad2      	subs	r2, r2, r3
    int32_t inner_w = lv_area_get_width(area_inner);
 800ee2c:	f9b5 c000 	ldrsh.w	ip, [r5]
    lv_coord_t border_width = area_outer->x2 - area_inner->x2;
 800ee30:	b290      	uxth	r0, r2
    int32_t inner_h = lv_area_get_height(area_inner);
 800ee32:	f9b5 e002 	ldrsh.w	lr, [r5, #2]
    lv_coord_t border_width = area_outer->x2 - area_inner->x2;
 800ee36:	b212      	sxth	r2, r2
    int32_t inner_h = lv_area_get_height(area_inner);
 800ee38:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
    lv_coord_t border_width = area_outer->x2 - area_inner->x2;
 800ee3c:	900d      	str	r0, [sp, #52]	; 0x34
 800ee3e:	4617      	mov	r7, r2
 800ee40:	9207      	str	r2, [sp, #28]

    int32_t coords_out_w = lv_area_get_width(area_outer);
 800ee42:	f9b4 3000 	ldrsh.w	r3, [r4]
    int32_t coords_out_h = lv_area_get_height(area_outer);
 800ee46:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 800ee4a:	f9b4 2006 	ldrsh.w	r2, [r4, #6]

    int32_t rin;
    int32_t rout;
    if(radius_is_in) {
 800ee4e:	b32e      	cbz	r6, 800ee9c <draw_full_border+0xa8>
 800ee50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800ee52:	3101      	adds	r1, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800ee54:	3301      	adds	r3, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800ee56:	eba1 0e0e 	sub.w	lr, r1, lr
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800ee5a:	eba3 0c0c 	sub.w	ip, r3, ip
    int32_t inner_h = lv_area_get_height(area_inner);
 800ee5e:	fa0f fe8e 	sxth.w	lr, lr
    int32_t inner_w = lv_area_get_width(area_inner);
 800ee62:	fa0f f38c 	sxth.w	r3, ip
        rin = radius;
        int32_t short_side = LV_MATH_MIN(inner_w, inner_h);
 800ee66:	4573      	cmp	r3, lr
 800ee68:	bfa8      	it	ge
 800ee6a:	4673      	movge	r3, lr
        if(rin > short_side >> 1) rin = short_side >> 1;
 800ee6c:	105b      	asrs	r3, r3, #1
 800ee6e:	4598      	cmp	r8, r3
 800ee70:	bfa8      	it	ge
 800ee72:	4698      	movge	r8, r3

        /*Get the outer area*/
        rout = rin + border_width;
 800ee74:	eb07 0308 	add.w	r3, r7, r8
 800ee78:	9306      	str	r3, [sp, #24]
        rin = rout - border_width;
        if(rin < 0) rin = 0;

    }

    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
 800ee7a:	f7f9 fa7b 	bl	8008374 <_lv_refr_get_disp_refreshing>
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 800ee7e:	f004 fd71 	bl	8013964 <lv_disp_get_buf>

    /* Get clipped fill area which is the real draw area.
     * It is always the same or inside `fill_area` */
    lv_area_t draw_area;
    bool is_common;
    is_common = _lv_area_intersect(&draw_area, area_outer, clip);
 800ee82:	ee18 2a10 	vmov	r2, s16
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 800ee86:	4606      	mov	r6, r0
    is_common = _lv_area_intersect(&draw_area, area_outer, clip);
 800ee88:	4621      	mov	r1, r4
 800ee8a:	a812      	add	r0, sp, #72	; 0x48
 800ee8c:	f005 f858 	bl	8013f40 <_lv_area_intersect>
    if(is_common == false) return;
 800ee90:	b9c8      	cbnz	r0, 800eec6 <draw_full_border+0xd2>
        }
    }
    lv_draw_mask_remove_id(mask_rin_id);
    lv_draw_mask_remove_id(mask_rout_id);
    _lv_mem_buf_release(mask_buf);
}
 800ee92:	b025      	add	sp, #148	; 0x94
 800ee94:	ecbd 8b04 	vpop	{d8-d9}
 800ee98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee9c:	990b      	ldr	r1, [sp, #44]	; 0x2c
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800ee9e:	3201      	adds	r2, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800eea0:	3101      	adds	r1, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800eea2:	1a10      	subs	r0, r2, r0
        rin = rout - border_width;
 800eea4:	9a07      	ldr	r2, [sp, #28]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800eea6:	1ac9      	subs	r1, r1, r3
    int32_t coords_out_h = lv_area_get_height(area_outer);
 800eea8:	b200      	sxth	r0, r0
    int32_t coords_out_w = lv_area_get_width(area_outer);
 800eeaa:	b20b      	sxth	r3, r1
        int32_t short_side = LV_MATH_MIN(coords_out_w, coords_out_h);
 800eeac:	4283      	cmp	r3, r0
 800eeae:	bfa8      	it	ge
 800eeb0:	4603      	movge	r3, r0
        if(rout > short_side >> 1) rout = short_side >> 1;
 800eeb2:	105b      	asrs	r3, r3, #1
 800eeb4:	4543      	cmp	r3, r8
 800eeb6:	bfa8      	it	ge
 800eeb8:	4643      	movge	r3, r8
        rin = rout - border_width;
 800eeba:	eba3 0802 	sub.w	r8, r3, r2
 800eebe:	9306      	str	r3, [sp, #24]
        if(rin < 0) rin = 0;
 800eec0:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 800eec4:	e7d9      	b.n	800ee7a <draw_full_border+0x86>
    draw_area.x2 -= disp_area->x1;
 800eec6:	f8bd a04c 	ldrh.w	sl, [sp, #76]	; 0x4c
    lv_draw_mask_radius_init(&mask_rin_param, area_inner, rin, true);
 800eeca:	fa0f f288 	sxth.w	r2, r8
    draw_area.x1 -= disp_area->x1;
 800eece:	f8bd 0048 	ldrh.w	r0, [sp, #72]	; 0x48
    lv_draw_mask_radius_init(&mask_rin_param, area_inner, rin, true);
 800eed2:	4629      	mov	r1, r5
    draw_area.x1 -= disp_area->x1;
 800eed4:	8a33      	ldrh	r3, [r6, #16]
 800eed6:	f10a 0801 	add.w	r8, sl, #1
    draw_area.y1 -= disp_area->y1;
 800eeda:	f8b6 e012 	ldrh.w	lr, [r6, #18]
 800eede:	f8bd c04a 	ldrh.w	ip, [sp, #74]	; 0x4a
 800eee2:	eba8 0800 	sub.w	r8, r8, r0
    draw_area.y2 -= disp_area->y1;
 800eee6:	f8bd 504e 	ldrh.w	r5, [sp, #78]	; 0x4e
    draw_area.x1 -= disp_area->x1;
 800eeea:	1ac0      	subs	r0, r0, r3
    draw_area.x2 -= disp_area->x1;
 800eeec:	ebaa 0303 	sub.w	r3, sl, r3
    draw_area.y1 -= disp_area->y1;
 800eef0:	ebac 0c0e 	sub.w	ip, ip, lr
    draw_area.y2 -= disp_area->y1;
 800eef4:	eba5 050e 	sub.w	r5, r5, lr
    draw_area.x1 -= disp_area->x1;
 800eef8:	f8ad 0048 	strh.w	r0, [sp, #72]	; 0x48
    draw_area.x2 -= disp_area->x1;
 800eefc:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
    lv_draw_mask_radius_init(&mask_rin_param, area_inner, rin, true);
 800ef00:	a816      	add	r0, sp, #88	; 0x58
 800ef02:	2301      	movs	r3, #1
    draw_area.y1 -= disp_area->y1;
 800ef04:	f8ad c04a 	strh.w	ip, [sp, #74]	; 0x4a
    draw_area.y2 -= disp_area->y1;
 800ef08:	f8ad 504e 	strh.w	r5, [sp, #78]	; 0x4e
    lv_draw_mask_radius_init(&mask_rin_param, area_inner, rin, true);
 800ef0c:	f7ff fde8 	bl	800eae0 <lv_draw_mask_radius_init>
    int16_t mask_rin_id = lv_draw_mask_add(&mask_rin_param, NULL);
 800ef10:	2100      	movs	r1, #0
 800ef12:	a816      	add	r0, sp, #88	; 0x58
 800ef14:	f7ff fbbc 	bl	800e690 <lv_draw_mask_add>
    lv_draw_mask_radius_init(&mask_rout_param, area_outer, rout, false);
 800ef18:	9f06      	ldr	r7, [sp, #24]
    int16_t mask_rin_id = lv_draw_mask_add(&mask_rin_param, NULL);
 800ef1a:	4605      	mov	r5, r0
    lv_draw_mask_radius_init(&mask_rout_param, area_outer, rout, false);
 800ef1c:	2300      	movs	r3, #0
 800ef1e:	b23a      	sxth	r2, r7
 800ef20:	a81d      	add	r0, sp, #116	; 0x74
 800ef22:	4621      	mov	r1, r4
 800ef24:	fa0f f888 	sxth.w	r8, r8
 800ef28:	f7ff fdda 	bl	800eae0 <lv_draw_mask_radius_init>
    int16_t mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
 800ef2c:	2100      	movs	r1, #0
 800ef2e:	a81d      	add	r0, sp, #116	; 0x74
    int16_t mask_rin_id = lv_draw_mask_add(&mask_rin_param, NULL);
 800ef30:	ee08 5a90 	vmov	s17, r5
    int16_t mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
 800ef34:	f7ff fbac 	bl	800e690 <lv_draw_mask_add>
 800ef38:	4603      	mov	r3, r0
    lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
 800ef3a:	4640      	mov	r0, r8
    int16_t mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
 800ef3c:	ee09 3a10 	vmov	s18, r3
    lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
 800ef40:	f006 faf2 	bl	8015528 <_lv_mem_buf_get>
    int32_t corner_size = LV_MATH_MAX(rout, border_width - 1);
 800ef44:	9b07      	ldr	r3, [sp, #28]
    lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
 800ef46:	4605      	mov	r5, r0
    int32_t corner_size = LV_MATH_MAX(rout, border_width - 1);
 800ef48:	429f      	cmp	r7, r3
 800ef4a:	bfb4      	ite	lt
 800ef4c:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800ef50:	9b06      	ldrge	r3, [sp, #24]
 800ef52:	930e      	str	r3, [sp, #56]	; 0x38
    if(simple_mode) {
 800ef54:	f1bb 0f00 	cmp.w	fp, #0
 800ef58:	f040 81ab 	bne.w	800f2b2 <draw_full_border+0x4be>
        int32_t upper_corner_end = area_outer->y1 - disp_area->y1 + corner_size;
 800ef5c:	f9b6 1012 	ldrsh.w	r1, [r6, #18]
 800ef60:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 800ef64:	9f0e      	ldr	r7, [sp, #56]	; 0x38
        fill_area.y1 = disp_area->y1 + draw_area.y1;
 800ef66:	b28b      	uxth	r3, r1
        int32_t upper_corner_end = area_outer->y1 - disp_area->y1 + corner_size;
 800ef68:	1a40      	subs	r0, r0, r1
        fill_area.y1 = disp_area->y1 + draw_area.y1;
 800ef6a:	f9bd 204a 	ldrsh.w	r2, [sp, #74]	; 0x4a
        fill_area.x1 = area_outer->x1;
 800ef6e:	f8b4 c000 	ldrh.w	ip, [r4]
        int32_t upper_corner_end = area_outer->y1 - disp_area->y1 + corner_size;
 800ef72:	4438      	add	r0, r7
        for(h = draw_area.y1; h <= upper_corner_end; h++) {
 800ef74:	4692      	mov	sl, r2
        fill_area.y1 = disp_area->y1 + draw_area.y1;
 800ef76:	441a      	add	r2, r3
        fill_area.x1 = area_outer->x1;
 800ef78:	f8ad c050 	strh.w	ip, [sp, #80]	; 0x50
        int32_t upper_corner_end = area_outer->y1 - disp_area->y1 + corner_size;
 800ef7c:	4607      	mov	r7, r0
 800ef7e:	900f      	str	r0, [sp, #60]	; 0x3c
        fill_area.y1 = disp_area->y1 + draw_area.y1;
 800ef80:	b212      	sxth	r2, r2
        fill_area.x2 = area_outer->x2;
 800ef82:	88a0      	ldrh	r0, [r4, #4]
        for(h = draw_area.y1; h <= upper_corner_end; h++) {
 800ef84:	4557      	cmp	r7, sl
        fill_area.y1 = disp_area->y1 + draw_area.y1;
 800ef86:	f8ad 2052 	strh.w	r2, [sp, #82]	; 0x52
        fill_area.y2 = fill_area.y1;
 800ef8a:	f8ad 2056 	strh.w	r2, [sp, #86]	; 0x56
        fill_area.x2 = area_outer->x2;
 800ef8e:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
        for(h = draw_area.y1; h <= upper_corner_end; h++) {
 800ef92:	f2c0 8099 	blt.w	800f0c8 <draw_full_border+0x2d4>
 800ef96:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 800ef9a:	f10d 0b40 	add.w	fp, sp, #64	; 0x40
                _lv_blend_fill(clip, &fill_area2, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 800ef9e:	9609      	str	r6, [sp, #36]	; 0x24
 800efa0:	4656      	mov	r6, sl
 800efa2:	9308      	str	r3, [sp, #32]
 800efa4:	1c7b      	adds	r3, r7, #1
 800efa6:	46a2      	mov	sl, r4
 800efa8:	ee18 7a10 	vmov	r7, s16
 800efac:	930a      	str	r3, [sp, #40]	; 0x28
 800efae:	e02d      	b.n	800f00c <draw_full_border+0x218>
            fill_area2.x1 = area_outer->x2 - rout + 1;
 800efb0:	f9ba 3004 	ldrsh.w	r3, [sl, #4]
            _lv_blend_fill(clip, &fill_area2, color, mask_buf + mask_ofs, mask_res, opa, blend_mode);
 800efb4:	464a      	mov	r2, r9
            int32_t mask_ofs = (area_outer->x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
 800efb6:	9906      	ldr	r1, [sp, #24]
            fill_area2.x1 = area_outer->x2 - rout + 1;
 800efb8:	1c58      	adds	r0, r3, #1
            fill_area2.x2 = area_outer->x2;
 800efba:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
            int32_t mask_ofs = (area_outer->x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
 800efbe:	1a5b      	subs	r3, r3, r1
            fill_area2.x1 = area_outer->x2 - rout + 1;
 800efc0:	9908      	ldr	r1, [sp, #32]
            int32_t mask_ofs = (area_outer->x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
 800efc2:	f9bd c048 	ldrsh.w	ip, [sp, #72]	; 0x48
            fill_area2.x1 = area_outer->x2 - rout + 1;
 800efc6:	1a40      	subs	r0, r0, r1
            int32_t mask_ofs = (area_outer->x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
 800efc8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800efca:	3301      	adds	r3, #1
            fill_area2.x1 = area_outer->x2 - rout + 1;
 800efcc:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
            int32_t mask_ofs = (area_outer->x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
 800efd0:	f9b1 0010 	ldrsh.w	r0, [r1, #16]
            _lv_blend_fill(clip, &fill_area2, color, mask_buf + mask_ofs, mask_res, opa, blend_mode);
 800efd4:	9904      	ldr	r1, [sp, #16]
            int32_t mask_ofs = (area_outer->x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
 800efd6:	4460      	add	r0, ip
            _lv_blend_fill(clip, &fill_area2, color, mask_buf + mask_ofs, mask_res, opa, blend_mode);
 800efd8:	9102      	str	r1, [sp, #8]
            int32_t mask_ofs = (area_outer->x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
 800efda:	1a1b      	subs	r3, r3, r0
            _lv_blend_fill(clip, &fill_area2, color, mask_buf + mask_ofs, mask_res, opa, blend_mode);
 800efdc:	9905      	ldr	r1, [sp, #20]
 800efde:	4638      	mov	r0, r7
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	bfac      	ite	ge
 800efe4:	18eb      	addge	r3, r5, r3
 800efe6:	1c2b      	addlt	r3, r5, #0
 800efe8:	e9cd 4100 	strd	r4, r1, [sp]
 800efec:	4659      	mov	r1, fp
 800efee:	f7fa feb5 	bl	8009d5c <_lv_blend_fill>
            fill_area.y2++;
 800eff2:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
            fill_area.y1++;
 800eff6:	f8bd 2052 	ldrh.w	r2, [sp, #82]	; 0x52
            fill_area.y2++;
 800effa:	3301      	adds	r3, #1
            fill_area.y1++;
 800effc:	3201      	adds	r2, #1
            fill_area.y2++;
 800effe:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
        for(h = draw_area.y1; h <= upper_corner_end; h++) {
 800f002:	9b0a      	ldr	r3, [sp, #40]	; 0x28
            fill_area.y1++;
 800f004:	f8ad 2052 	strh.w	r2, [sp, #82]	; 0x52
        for(h = draw_area.y1; h <= upper_corner_end; h++) {
 800f008:	42b3      	cmp	r3, r6
 800f00a:	d056      	beq.n	800f0ba <draw_full_border+0x2c6>
            _lv_memset_ff(mask_buf, draw_area_w);
 800f00c:	4641      	mov	r1, r8
 800f00e:	4628      	mov	r0, r5
 800f010:	f006 fc18 	bl	8015844 <_lv_memset_ff>
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
 800f014:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f016:	f8bd 4048 	ldrh.w	r4, [sp, #72]	; 0x48
 800f01a:	4628      	mov	r0, r5
 800f01c:	8a5a      	ldrh	r2, [r3, #18]
 800f01e:	8a19      	ldrh	r1, [r3, #16]
 800f020:	4643      	mov	r3, r8
 800f022:	4432      	add	r2, r6
 800f024:	3601      	adds	r6, #1
 800f026:	4421      	add	r1, r4
 800f028:	b212      	sxth	r2, r2
 800f02a:	b209      	sxth	r1, r1
 800f02c:	f7ff fb8e 	bl	800e74c <lv_draw_mask_apply>
            fill_area2.x1 = area_outer->x1;
 800f030:	f9ba 2000 	ldrsh.w	r2, [sl]
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
 800f034:	9b04      	ldr	r3, [sp, #16]
            fill_area2.x1 = area_outer->x1;
 800f036:	f04f 0c00 	mov.w	ip, #0
            fill_area2.x2 = area_outer->x1 + rout - 1;
 800f03a:	9908      	ldr	r1, [sp, #32]
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
 800f03c:	4604      	mov	r4, r0
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
 800f03e:	9302      	str	r3, [sp, #8]
            fill_area2.x2 = area_outer->x1 + rout - 1;
 800f040:	1e53      	subs	r3, r2, #1
            fill_area2.x1 = area_outer->x1;
 800f042:	46e6      	mov	lr, ip
 800f044:	f362 0c0f 	bfi	ip, r2, #0, #16
            fill_area2.x2 = area_outer->x1 + rout - 1;
 800f048:	440b      	add	r3, r1
            fill_area2.x1 = area_outer->x1;
 800f04a:	f8bd 2056 	ldrh.w	r2, [sp, #86]	; 0x56
 800f04e:	f8bd 1052 	ldrh.w	r1, [sp, #82]	; 0x52
 800f052:	f363 0e0f 	bfi	lr, r3, #0, #16
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
 800f056:	9b05      	ldr	r3, [sp, #20]
            fill_area2.x1 = area_outer->x1;
 800f058:	f361 4c1f 	bfi	ip, r1, #16, #16
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
 800f05c:	9000      	str	r0, [sp, #0]
            fill_area2.x1 = area_outer->x1;
 800f05e:	f362 4e1f 	bfi	lr, r2, #16, #16
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
 800f062:	4659      	mov	r1, fp
 800f064:	464a      	mov	r2, r9
 800f066:	9301      	str	r3, [sp, #4]
 800f068:	4638      	mov	r0, r7
 800f06a:	462b      	mov	r3, r5
            fill_area2.x1 = area_outer->x1;
 800f06c:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
 800f070:	f8cd e044 	str.w	lr, [sp, #68]	; 0x44
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
 800f074:	f7fa fe72 	bl	8009d5c <_lv_blend_fill>
            if(fill_area2.y2 < area_outer->y1 + border_width) {
 800f078:	f9ba 3002 	ldrsh.w	r3, [sl, #2]
 800f07c:	9907      	ldr	r1, [sp, #28]
 800f07e:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 800f082:	440b      	add	r3, r1
 800f084:	429a      	cmp	r2, r3
 800f086:	da93      	bge.n	800efb0 <draw_full_border+0x1bc>
                fill_area2.x1 = area_outer->x1 + rout;
 800f088:	f8ba e000 	ldrh.w	lr, [sl]
                _lv_blend_fill(clip, &fill_area2, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 800f08c:	2300      	movs	r3, #0
                fill_area2.x2 = area_outer->x2 - rout;
 800f08e:	f8ba c004 	ldrh.w	ip, [sl, #4]
                _lv_blend_fill(clip, &fill_area2, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 800f092:	464a      	mov	r2, r9
                fill_area2.x1 = area_outer->x1 + rout;
 800f094:	9908      	ldr	r1, [sp, #32]
                _lv_blend_fill(clip, &fill_area2, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 800f096:	9804      	ldr	r0, [sp, #16]
                fill_area2.x1 = area_outer->x1 + rout;
 800f098:	448e      	add	lr, r1
                fill_area2.x2 = area_outer->x2 - rout;
 800f09a:	ebac 0c01 	sub.w	ip, ip, r1
                _lv_blend_fill(clip, &fill_area2, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 800f09e:	9905      	ldr	r1, [sp, #20]
 800f0a0:	9002      	str	r0, [sp, #8]
 800f0a2:	4638      	mov	r0, r7
 800f0a4:	9101      	str	r1, [sp, #4]
 800f0a6:	2101      	movs	r1, #1
                fill_area2.x1 = area_outer->x1 + rout;
 800f0a8:	f8ad e040 	strh.w	lr, [sp, #64]	; 0x40
                _lv_blend_fill(clip, &fill_area2, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 800f0ac:	9100      	str	r1, [sp, #0]
 800f0ae:	4659      	mov	r1, fp
                fill_area2.x2 = area_outer->x2 - rout;
 800f0b0:	f8ad c044 	strh.w	ip, [sp, #68]	; 0x44
                _lv_blend_fill(clip, &fill_area2, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 800f0b4:	f7fa fe52 	bl	8009d5c <_lv_blend_fill>
 800f0b8:	e77a      	b.n	800efb0 <draw_full_border+0x1bc>
 800f0ba:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800f0bc:	4654      	mov	r4, sl
 800f0be:	ee08 7a10 	vmov	s16, r7
 800f0c2:	f9b6 1012 	ldrsh.w	r1, [r6, #18]
 800f0c6:	b28b      	uxth	r3, r1
        int32_t lower_corner_end = area_outer->y2 - disp_area->y1 - corner_size;
 800f0c8:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800f0cc:	980e      	ldr	r0, [sp, #56]	; 0x38
 800f0ce:	1a51      	subs	r1, r2, r1
 800f0d0:	eba1 0a00 	sub.w	sl, r1, r0
        if(lower_corner_end <= upper_corner_end) lower_corner_end = upper_corner_end + 1;
 800f0d4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800f0d6:	4551      	cmp	r1, sl
 800f0d8:	bfa8      	it	ge
 800f0da:	f101 0a01 	addge.w	sl, r1, #1
        for(h = lower_corner_end; h <= draw_area.y2; h++) {
 800f0de:	f9bd 104e 	ldrsh.w	r1, [sp, #78]	; 0x4e
        fill_area.y1 = disp_area->y1 + lower_corner_end;
 800f0e2:	4453      	add	r3, sl
        for(h = lower_corner_end; h <= draw_area.y2; h++) {
 800f0e4:	458a      	cmp	sl, r1
        fill_area.y1 = disp_area->y1 + lower_corner_end;
 800f0e6:	b21b      	sxth	r3, r3
 800f0e8:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52
        fill_area.y2 = fill_area.y1;
 800f0ec:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
        for(h = lower_corner_end; h <= draw_area.y2; h++) {
 800f0f0:	f300 8094 	bgt.w	800f21c <draw_full_border+0x428>
 800f0f4:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 800f0f8:	f10d 0b40 	add.w	fp, sp, #64	; 0x40
                _lv_blend_fill(clip, &fill_area2, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 800f0fc:	ee18 7a10 	vmov	r7, s16
 800f100:	9609      	str	r6, [sp, #36]	; 0x24
 800f102:	9308      	str	r3, [sp, #32]
 800f104:	e02e      	b.n	800f164 <draw_full_border+0x370>
            fill_area2.x1 = area_outer->x2 - rout + 1;
 800f106:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
            _lv_blend_fill(clip, &fill_area2, color, mask_buf + mask_ofs, mask_res, opa, blend_mode);
 800f10a:	464a      	mov	r2, r9
            int32_t mask_ofs = (area_outer->x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
 800f10c:	9906      	ldr	r1, [sp, #24]
            fill_area2.x1 = area_outer->x2 - rout + 1;
 800f10e:	1c58      	adds	r0, r3, #1
            fill_area2.x2 = area_outer->x2;
 800f110:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
            int32_t mask_ofs = (area_outer->x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
 800f114:	1a5b      	subs	r3, r3, r1
            fill_area2.x1 = area_outer->x2 - rout + 1;
 800f116:	9908      	ldr	r1, [sp, #32]
            int32_t mask_ofs = (area_outer->x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
 800f118:	f9bd c048 	ldrsh.w	ip, [sp, #72]	; 0x48
            fill_area2.x1 = area_outer->x2 - rout + 1;
 800f11c:	1a40      	subs	r0, r0, r1
            int32_t mask_ofs = (area_outer->x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
 800f11e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f120:	3301      	adds	r3, #1
            fill_area2.x1 = area_outer->x2 - rout + 1;
 800f122:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
            int32_t mask_ofs = (area_outer->x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
 800f126:	f9b1 0010 	ldrsh.w	r0, [r1, #16]
            _lv_blend_fill(clip, &fill_area2, color, mask_buf + mask_ofs, mask_res, opa, blend_mode);
 800f12a:	9904      	ldr	r1, [sp, #16]
            int32_t mask_ofs = (area_outer->x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
 800f12c:	4460      	add	r0, ip
            _lv_blend_fill(clip, &fill_area2, color, mask_buf + mask_ofs, mask_res, opa, blend_mode);
 800f12e:	9102      	str	r1, [sp, #8]
            int32_t mask_ofs = (area_outer->x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
 800f130:	1a1b      	subs	r3, r3, r0
            _lv_blend_fill(clip, &fill_area2, color, mask_buf + mask_ofs, mask_res, opa, blend_mode);
 800f132:	9905      	ldr	r1, [sp, #20]
 800f134:	4638      	mov	r0, r7
 800f136:	2b00      	cmp	r3, #0
 800f138:	bfac      	ite	ge
 800f13a:	18eb      	addge	r3, r5, r3
 800f13c:	1c2b      	addlt	r3, r5, #0
 800f13e:	e9cd 6100 	strd	r6, r1, [sp]
 800f142:	4659      	mov	r1, fp
 800f144:	f7fa fe0a 	bl	8009d5c <_lv_blend_fill>
            fill_area.y1++;
 800f148:	f8bd 2052 	ldrh.w	r2, [sp, #82]	; 0x52
            fill_area.y2++;
 800f14c:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
        for(h = lower_corner_end; h <= draw_area.y2; h++) {
 800f150:	f9bd 104e 	ldrsh.w	r1, [sp, #78]	; 0x4e
            fill_area.y1++;
 800f154:	3201      	adds	r2, #1
            fill_area.y2++;
 800f156:	3301      	adds	r3, #1
        for(h = lower_corner_end; h <= draw_area.y2; h++) {
 800f158:	4551      	cmp	r1, sl
            fill_area.y1++;
 800f15a:	f8ad 2052 	strh.w	r2, [sp, #82]	; 0x52
            fill_area.y2++;
 800f15e:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
        for(h = lower_corner_end; h <= draw_area.y2; h++) {
 800f162:	db57      	blt.n	800f214 <draw_full_border+0x420>
            _lv_memset_ff(mask_buf, draw_area_w);
 800f164:	4641      	mov	r1, r8
 800f166:	4628      	mov	r0, r5
 800f168:	f006 fb6c 	bl	8015844 <_lv_memset_ff>
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
 800f16c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f16e:	f8bd 6048 	ldrh.w	r6, [sp, #72]	; 0x48
 800f172:	4628      	mov	r0, r5
 800f174:	8a5a      	ldrh	r2, [r3, #18]
 800f176:	8a19      	ldrh	r1, [r3, #16]
 800f178:	4643      	mov	r3, r8
 800f17a:	4452      	add	r2, sl
 800f17c:	f10a 0a01 	add.w	sl, sl, #1
 800f180:	4431      	add	r1, r6
 800f182:	b212      	sxth	r2, r2
 800f184:	b209      	sxth	r1, r1
 800f186:	f7ff fae1 	bl	800e74c <lv_draw_mask_apply>
            fill_area2.x1 = area_outer->x1;
 800f18a:	f9b4 2000 	ldrsh.w	r2, [r4]
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
 800f18e:	9b04      	ldr	r3, [sp, #16]
            fill_area2.x1 = area_outer->x1;
 800f190:	f04f 0c00 	mov.w	ip, #0
            fill_area2.x2 = area_outer->x1 + rout - 1;
 800f194:	9908      	ldr	r1, [sp, #32]
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
 800f196:	4606      	mov	r6, r0
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
 800f198:	9302      	str	r3, [sp, #8]
            fill_area2.x2 = area_outer->x1 + rout - 1;
 800f19a:	1e53      	subs	r3, r2, #1
            fill_area2.x1 = area_outer->x1;
 800f19c:	46e6      	mov	lr, ip
 800f19e:	f362 0c0f 	bfi	ip, r2, #0, #16
            fill_area2.x2 = area_outer->x1 + rout - 1;
 800f1a2:	440b      	add	r3, r1
            fill_area2.x1 = area_outer->x1;
 800f1a4:	f8bd 2056 	ldrh.w	r2, [sp, #86]	; 0x56
 800f1a8:	f8bd 1052 	ldrh.w	r1, [sp, #82]	; 0x52
 800f1ac:	f363 0e0f 	bfi	lr, r3, #0, #16
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
 800f1b0:	9b05      	ldr	r3, [sp, #20]
            fill_area2.x1 = area_outer->x1;
 800f1b2:	f361 4c1f 	bfi	ip, r1, #16, #16
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
 800f1b6:	9000      	str	r0, [sp, #0]
            fill_area2.x1 = area_outer->x1;
 800f1b8:	f362 4e1f 	bfi	lr, r2, #16, #16
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
 800f1bc:	4659      	mov	r1, fp
 800f1be:	464a      	mov	r2, r9
 800f1c0:	9301      	str	r3, [sp, #4]
 800f1c2:	4638      	mov	r0, r7
 800f1c4:	462b      	mov	r3, r5
            fill_area2.x1 = area_outer->x1;
 800f1c6:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
 800f1ca:	f8cd e044 	str.w	lr, [sp, #68]	; 0x44
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
 800f1ce:	f7fa fdc5 	bl	8009d5c <_lv_blend_fill>
            if(fill_area2.y2 > area_outer->y2 - border_width) {
 800f1d2:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800f1d6:	9907      	ldr	r1, [sp, #28]
 800f1d8:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 800f1dc:	1a5b      	subs	r3, r3, r1
 800f1de:	429a      	cmp	r2, r3
 800f1e0:	dd91      	ble.n	800f106 <draw_full_border+0x312>
                fill_area2.x1 = area_outer->x1 + rout;
 800f1e2:	f8b4 e000 	ldrh.w	lr, [r4]
                _lv_blend_fill(clip, &fill_area2, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 800f1e6:	2300      	movs	r3, #0
                fill_area2.x2 = area_outer->x2 - rout;
 800f1e8:	f8b4 c004 	ldrh.w	ip, [r4, #4]
                _lv_blend_fill(clip, &fill_area2, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 800f1ec:	464a      	mov	r2, r9
                fill_area2.x1 = area_outer->x1 + rout;
 800f1ee:	9908      	ldr	r1, [sp, #32]
                _lv_blend_fill(clip, &fill_area2, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 800f1f0:	9804      	ldr	r0, [sp, #16]
                fill_area2.x1 = area_outer->x1 + rout;
 800f1f2:	448e      	add	lr, r1
                fill_area2.x2 = area_outer->x2 - rout;
 800f1f4:	ebac 0c01 	sub.w	ip, ip, r1
                _lv_blend_fill(clip, &fill_area2, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 800f1f8:	9905      	ldr	r1, [sp, #20]
 800f1fa:	9002      	str	r0, [sp, #8]
 800f1fc:	4638      	mov	r0, r7
 800f1fe:	9101      	str	r1, [sp, #4]
 800f200:	2101      	movs	r1, #1
                fill_area2.x1 = area_outer->x1 + rout;
 800f202:	f8ad e040 	strh.w	lr, [sp, #64]	; 0x40
                _lv_blend_fill(clip, &fill_area2, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 800f206:	9100      	str	r1, [sp, #0]
 800f208:	4659      	mov	r1, fp
                fill_area2.x2 = area_outer->x2 - rout;
 800f20a:	f8ad c044 	strh.w	ip, [sp, #68]	; 0x44
                _lv_blend_fill(clip, &fill_area2, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 800f20e:	f7fa fda5 	bl	8009d5c <_lv_blend_fill>
 800f212:	e778      	b.n	800f106 <draw_full_border+0x312>
 800f214:	ee08 7a10 	vmov	s16, r7
 800f218:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
        fill_area.y1 = area_outer->y1 + corner_size + 1;
 800f21c:	8860      	ldrh	r0, [r4, #2]
        fill_area.x1 = area_outer->x1;
 800f21e:	f9b4 c000 	ldrsh.w	ip, [r4]
        fill_area.y1 = area_outer->y1 + corner_size + 1;
 800f222:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 800f226:	1c43      	adds	r3, r0, #1
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 800f228:	9804      	ldr	r0, [sp, #16]
        fill_area.x2 = area_outer->x1 + border_width - 1;
 800f22a:	f10c 3eff 	add.w	lr, ip, #4294967295
        fill_area.y2 = area_outer->y2 - corner_size - 1;
 800f22e:	43ce      	mvns	r6, r1
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 800f230:	9f05      	ldr	r7, [sp, #20]
 800f232:	9002      	str	r0, [sp, #8]
        fill_area.y1 = area_outer->y1 + corner_size + 1;
 800f234:	18c8      	adds	r0, r1, r3
        fill_area.x2 = area_outer->x1 + border_width - 1;
 800f236:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        fill_area.y2 = area_outer->y2 - corner_size - 1;
 800f238:	4432      	add	r2, r6
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 800f23a:	2601      	movs	r6, #1
 800f23c:	a914      	add	r1, sp, #80	; 0x50
        fill_area.x2 = area_outer->x1 + border_width - 1;
 800f23e:	4473      	add	r3, lr
        fill_area.y2 = area_outer->y2 - corner_size - 1;
 800f240:	f8ad 2056 	strh.w	r2, [sp, #86]	; 0x56
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 800f244:	9600      	str	r6, [sp, #0]
 800f246:	464a      	mov	r2, r9
        fill_area.x2 = area_outer->x1 + border_width - 1;
 800f248:	469e      	mov	lr, r3
        fill_area.y1 = area_outer->y1 + corner_size + 1;
 800f24a:	f8ad 0052 	strh.w	r0, [sp, #82]	; 0x52
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 800f24e:	2300      	movs	r3, #0
 800f250:	ee18 0a10 	vmov	r0, s16
 800f254:	9701      	str	r7, [sp, #4]
        fill_area.x1 = area_outer->x1;
 800f256:	f8ad c050 	strh.w	ip, [sp, #80]	; 0x50
        fill_area.x2 = area_outer->x1 + border_width - 1;
 800f25a:	f8ad e054 	strh.w	lr, [sp, #84]	; 0x54
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 800f25e:	f7fa fd7d 	bl	8009d5c <_lv_blend_fill>
        fill_area.x1 = area_outer->x2 - border_width + 1;
 800f262:	f9b4 c004 	ldrsh.w	ip, [r4, #4]
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 800f266:	a914      	add	r1, sp, #80	; 0x50
        fill_area.x1 = area_outer->x2 - border_width + 1;
 800f268:	9b0c      	ldr	r3, [sp, #48]	; 0x30
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 800f26a:	464a      	mov	r2, r9
        fill_area.x1 = area_outer->x2 - border_width + 1;
 800f26c:	eb0c 0406 	add.w	r4, ip, r6
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 800f270:	9600      	str	r6, [sp, #0]
        fill_area.x1 = area_outer->x2 - border_width + 1;
 800f272:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800f274:	4423      	add	r3, r4
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 800f276:	9804      	ldr	r0, [sp, #16]
 800f278:	9701      	str	r7, [sp, #4]
        fill_area.x1 = area_outer->x2 - border_width + 1;
 800f27a:	461c      	mov	r4, r3
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 800f27c:	9002      	str	r0, [sp, #8]
 800f27e:	2300      	movs	r3, #0
 800f280:	ee18 0a10 	vmov	r0, s16
        fill_area.x1 = area_outer->x2 - border_width + 1;
 800f284:	1ba4      	subs	r4, r4, r6
        fill_area.x2 = area_outer->x2;
 800f286:	f8ad c054 	strh.w	ip, [sp, #84]	; 0x54
        fill_area.x1 = area_outer->x2 - border_width + 1;
 800f28a:	f8ad 4050 	strh.w	r4, [sp, #80]	; 0x50
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 800f28e:	f7fa fd65 	bl	8009d5c <_lv_blend_fill>
    lv_draw_mask_remove_id(mask_rin_id);
 800f292:	ee18 0a90 	vmov	r0, s17
 800f296:	f7ff fa83 	bl	800e7a0 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_rout_id);
 800f29a:	ee19 0a10 	vmov	r0, s18
 800f29e:	f7ff fa7f 	bl	800e7a0 <lv_draw_mask_remove_id>
    _lv_mem_buf_release(mask_buf);
 800f2a2:	4628      	mov	r0, r5
 800f2a4:	f005 fe18 	bl	8014ed8 <_lv_mem_buf_release>
}
 800f2a8:	b025      	add	sp, #148	; 0x94
 800f2aa:	ecbd 8b04 	vpop	{d8-d9}
 800f2ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        fill_area.y1 = disp_area->y1 + draw_area.y1;
 800f2b2:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
 800f2b6:	8a72      	ldrh	r2, [r6, #18]
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800f2b8:	469a      	mov	sl, r3
        fill_area.x2 = area_outer->x2;
 800f2ba:	88a1      	ldrh	r1, [r4, #4]
        fill_area.y1 = disp_area->y1 + draw_area.y1;
 800f2bc:	4413      	add	r3, r2
        fill_area.x1 = area_outer->x1;
 800f2be:	8822      	ldrh	r2, [r4, #0]
        fill_area.x2 = area_outer->x2;
 800f2c0:	f8ad 1054 	strh.w	r1, [sp, #84]	; 0x54
        fill_area.x1 = area_outer->x1;
 800f2c4:	f8ad 2050 	strh.w	r2, [sp, #80]	; 0x50
        fill_area.y1 = disp_area->y1 + draw_area.y1;
 800f2c8:	b21b      	sxth	r3, r3
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800f2ca:	f9bd 204e 	ldrsh.w	r2, [sp, #78]	; 0x4e
        fill_area.y1 = disp_area->y1 + draw_area.y1;
 800f2ce:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800f2d2:	4592      	cmp	sl, r2
        fill_area.y2 = fill_area.y1;
 800f2d4:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800f2d8:	dcdb      	bgt.n	800f292 <draw_full_border+0x49e>
 800f2da:	ee18 7a10 	vmov	r7, s16
 800f2de:	e9dd b404 	ldrd	fp, r4, [sp, #16]
            _lv_memset_ff(mask_buf, draw_area_w);
 800f2e2:	4641      	mov	r1, r8
 800f2e4:	4628      	mov	r0, r5
 800f2e6:	f006 faad 	bl	8015844 <_lv_memset_ff>
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
 800f2ea:	f8bd c048 	ldrh.w	ip, [sp, #72]	; 0x48
 800f2ee:	8a72      	ldrh	r2, [r6, #18]
 800f2f0:	4643      	mov	r3, r8
 800f2f2:	8a31      	ldrh	r1, [r6, #16]
 800f2f4:	4628      	mov	r0, r5
 800f2f6:	4452      	add	r2, sl
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800f2f8:	f10a 0a01 	add.w	sl, sl, #1
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
 800f2fc:	4461      	add	r1, ip
 800f2fe:	b212      	sxth	r2, r2
 800f300:	b209      	sxth	r1, r1
 800f302:	f7ff fa23 	bl	800e74c <lv_draw_mask_apply>
            _lv_blend_fill(clip, &fill_area, color, mask_buf, mask_res, opa, blend_mode);
 800f306:	462b      	mov	r3, r5
 800f308:	464a      	mov	r2, r9
 800f30a:	a914      	add	r1, sp, #80	; 0x50
 800f30c:	9000      	str	r0, [sp, #0]
 800f30e:	4638      	mov	r0, r7
 800f310:	f8cd b008 	str.w	fp, [sp, #8]
 800f314:	9401      	str	r4, [sp, #4]
 800f316:	f7fa fd21 	bl	8009d5c <_lv_blend_fill>
            fill_area.y1++;
 800f31a:	f8bd 2052 	ldrh.w	r2, [sp, #82]	; 0x52
            fill_area.y2++;
 800f31e:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800f322:	f9bd 104e 	ldrsh.w	r1, [sp, #78]	; 0x4e
            fill_area.y1++;
 800f326:	3201      	adds	r2, #1
            fill_area.y2++;
 800f328:	3301      	adds	r3, #1
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800f32a:	4551      	cmp	r1, sl
            fill_area.y1++;
 800f32c:	f8ad 2052 	strh.w	r2, [sp, #82]	; 0x52
            fill_area.y2++;
 800f330:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800f334:	dad5      	bge.n	800f2e2 <draw_full_border+0x4ee>
 800f336:	e7ac      	b.n	800f292 <draw_full_border+0x49e>

0800f338 <lv_draw_rect_dsc_init>:
{
 800f338:	b538      	push	{r3, r4, r5, lr}
    _lv_memset_00(dsc, sizeof(lv_draw_rect_dsc_t));
 800f33a:	2168      	movs	r1, #104	; 0x68
{
 800f33c:	4604      	mov	r4, r0
    dsc->border_side = LV_BORDER_SIDE_FULL;
 800f33e:	250f      	movs	r5, #15
    _lv_memset_00(dsc, sizeof(lv_draw_rect_dsc_t));
 800f340:	f006 fa1a 	bl	8015778 <_lv_memset_00>
    dsc->bg_color = LV_COLOR_WHITE;
 800f344:	f04f 33ff 	mov.w	r3, #4294967295
 800f348:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
    dsc->bg_grad_color_stop = 0xFF;
 800f34c:	20ff      	movs	r0, #255	; 0xff
    dsc->pattern_font = LV_THEME_DEFAULT_FONT_NORMAL;
 800f34e:	490b      	ldr	r1, [pc, #44]	; (800f37c <lv_draw_rect_dsc_init+0x44>)
    dsc->border_side = LV_BORDER_SIDE_FULL;
 800f350:	8365      	strh	r5, [r4, #26]
    dsc->bg_color = LV_COLOR_WHITE;
 800f352:	6063      	str	r3, [r4, #4]
    dsc->bg_opa = LV_OPA_COVER;
 800f354:	74a3      	strb	r3, [r4, #18]
    dsc->border_opa = LV_OPA_COVER;
 800f356:	7723      	strb	r3, [r4, #28]
    dsc->pattern_opa = LV_OPA_COVER;
 800f358:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    dsc->value_opa = LV_OPA_COVER;
 800f35c:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
    dsc->shadow_opa = LV_OPA_COVER;
 800f360:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    dsc->bg_color = LV_COLOR_WHITE;
 800f364:	60a2      	str	r2, [r4, #8]
    dsc->border_color = LV_COLOR_BLACK;
 800f366:	6162      	str	r2, [r4, #20]
    dsc->pattern_recolor = LV_COLOR_BLACK;
 800f368:	6462      	str	r2, [r4, #68]	; 0x44
    dsc->value_color = LV_COLOR_BLACK;
 800f36a:	65a2      	str	r2, [r4, #88]	; 0x58
    dsc->shadow_color = LV_COLOR_BLACK;
 800f36c:	62e2      	str	r2, [r4, #44]	; 0x2c
    dsc->bg_grad_color_stop = 0xFF;
 800f36e:	8220      	strh	r0, [r4, #16]
    dsc->outline_opa = LV_OPA_COVER;
 800f370:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    dsc->pattern_font = LV_THEME_DEFAULT_FONT_NORMAL;
 800f374:	6421      	str	r1, [r4, #64]	; 0x40
    dsc->value_font = LV_THEME_DEFAULT_FONT_NORMAL;
 800f376:	6521      	str	r1, [r4, #80]	; 0x50
}
 800f378:	bd38      	pop	{r3, r4, r5, pc}
 800f37a:	bf00      	nop
 800f37c:	20000020 	.word	0x20000020

0800f380 <lv_draw_rect>:
{
 800f380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800f384:	88c4      	ldrh	r4, [r0, #6]
 800f386:	8846      	ldrh	r6, [r0, #2]
 800f388:	1c63      	adds	r3, r4, #1
 800f38a:	1b9b      	subs	r3, r3, r6
    if(lv_area_get_height(coords) < 1 || lv_area_get_width(coords) < 1) return;
 800f38c:	b21b      	sxth	r3, r3
{
 800f38e:	ed2d 8b04 	vpush	{d8-d9}
    if(lv_area_get_height(coords) < 1 || lv_area_get_width(coords) < 1) return;
 800f392:	2b00      	cmp	r3, #0
{
 800f394:	b0b3      	sub	sp, #204	; 0xcc
 800f396:	9005      	str	r0, [sp, #20]
    if(lv_area_get_height(coords) < 1 || lv_area_get_width(coords) < 1) return;
 800f398:	f340 8440 	ble.w	800fc1c <lv_draw_rect+0x89c>
 800f39c:	4693      	mov	fp, r2
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800f39e:	8882      	ldrh	r2, [r0, #4]
 800f3a0:	8805      	ldrh	r5, [r0, #0]
 800f3a2:	1c53      	adds	r3, r2, #1
 800f3a4:	1b5b      	subs	r3, r3, r5
 800f3a6:	b21b      	sxth	r3, r3
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	f340 8437 	ble.w	800fc1c <lv_draw_rect+0x89c>
    if(dsc->shadow_width == 0) return;
 800f3ae:	f9bb 9030 	ldrsh.w	r9, [fp, #48]	; 0x30
 800f3b2:	468a      	mov	sl, r1
 800f3b4:	f1b9 0f00 	cmp.w	r9, #0
 800f3b8:	f000 85f4 	beq.w	800ffa4 <lv_draw_rect+0xc24>
    if(dsc->shadow_opa <= LV_OPA_MIN) return;
 800f3bc:	f89b 3038 	ldrb.w	r3, [fp, #56]	; 0x38
 800f3c0:	2b02      	cmp	r3, #2
 800f3c2:	9307      	str	r3, [sp, #28]
 800f3c4:	f240 85ee 	bls.w	800ffa4 <lv_draw_rect+0xc24>
    if(dsc->shadow_width == 1 && dsc->shadow_ofs_x == 0 &&
 800f3c8:	f8db 3030 	ldr.w	r3, [fp, #48]	; 0x30
       dsc->shadow_ofs_y == 0 && dsc->shadow_spread <= 0) {
 800f3cc:	f9bb 1034 	ldrsh.w	r1, [fp, #52]	; 0x34
    if(dsc->shadow_width == 1 && dsc->shadow_ofs_x == 0 &&
 800f3d0:	2b01      	cmp	r3, #1
       dsc->shadow_ofs_y == 0 && dsc->shadow_spread <= 0) {
 800f3d2:	f9bb 8036 	ldrsh.w	r8, [fp, #54]	; 0x36
    if(dsc->shadow_width == 1 && dsc->shadow_ofs_x == 0 &&
 800f3d6:	f000 872f 	beq.w	8010238 <lv_draw_rect+0xeb8>
    sh_rect_area.x1 = coords->x1  + dsc->shadow_ofs_x - dsc->shadow_spread;
 800f3da:	f8bb 7032 	ldrh.w	r7, [fp, #50]	; 0x32
 800f3de:	fa1f f888 	uxth.w	r8, r8
    sh_rect_area.y1 = coords->y1  + dsc->shadow_ofs_y - dsc->shadow_spread;
 800f3e2:	b289      	uxth	r1, r1
    sh_area.x1 = sh_rect_area.x1 - sw / 2 - 1;
 800f3e4:	f1b9 0f00 	cmp.w	r9, #0
 800f3e8:	443d      	add	r5, r7
    sh_rect_area.x2 = coords->x2  + dsc->shadow_ofs_x + dsc->shadow_spread;
 800f3ea:	4417      	add	r7, r2
 800f3ec:	440e      	add	r6, r1
    sh_area.x1 = sh_rect_area.x1 - sw / 2 - 1;
 800f3ee:	464b      	mov	r3, r9
 800f3f0:	b2ad      	uxth	r5, r5
 800f3f2:	bfb8      	it	lt
 800f3f4:	f109 0301 	addlt.w	r3, r9, #1
    sh_rect_area.y2 = coords->y2  + dsc->shadow_ofs_y + dsc->shadow_spread;
 800f3f8:	4441      	add	r1, r8
 800f3fa:	b2b6      	uxth	r6, r6
    sh_rect_area.x1 = coords->x1  + dsc->shadow_ofs_x - dsc->shadow_spread;
 800f3fc:	eba5 0208 	sub.w	r2, r5, r8
    sh_area.x2 = sh_rect_area.x2 + sw / 2 + 1;
 800f400:	f1b9 0f00 	cmp.w	r9, #0
    sh_rect_area.y2 = coords->y2  + dsc->shadow_ofs_y + dsc->shadow_spread;
 800f404:	440c      	add	r4, r1
    sh_rect_area.y1 = coords->y1  + dsc->shadow_ofs_y - dsc->shadow_spread;
 800f406:	eba6 0108 	sub.w	r1, r6, r8
    sh_rect_area.x1 = coords->x1  + dsc->shadow_ofs_x - dsc->shadow_spread;
 800f40a:	b292      	uxth	r2, r2
    sh_rect_area.x2 = coords->x2  + dsc->shadow_ofs_x + dsc->shadow_spread;
 800f40c:	4447      	add	r7, r8
    sh_rect_area.y1 = coords->y1  + dsc->shadow_ofs_y - dsc->shadow_spread;
 800f40e:	b289      	uxth	r1, r1
    sh_rect_area.x1 = coords->x1  + dsc->shadow_ofs_x - dsc->shadow_spread;
 800f410:	9204      	str	r2, [sp, #16]
    sh_rect_area.y2 = coords->y2  + dsc->shadow_ofs_y + dsc->shadow_spread;
 800f412:	b2a4      	uxth	r4, r4
    sh_rect_area.x1 = coords->x1  + dsc->shadow_ofs_x - dsc->shadow_spread;
 800f414:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
    sh_area.x1 = sh_rect_area.x1 - sw / 2 - 1;
 800f418:	ea6f 0263 	mvn.w	r2, r3, asr #1
 800f41c:	9804      	ldr	r0, [sp, #16]
    sh_area.x2 = sh_rect_area.x2 + sw / 2 + 1;
 800f41e:	464b      	mov	r3, r9
 800f420:	b292      	uxth	r2, r2
 800f422:	bfb8      	it	lt
 800f424:	f109 0301 	addlt.w	r3, r9, #1
    sh_rect_area.y1 = coords->y1  + dsc->shadow_ofs_y - dsc->shadow_spread;
 800f428:	f8ad 104a 	strh.w	r1, [sp, #74]	; 0x4a
    sh_rect_area.x2 = coords->x2  + dsc->shadow_ofs_x + dsc->shadow_spread;
 800f42c:	b2bf      	uxth	r7, r7
    sh_area.x1 = sh_rect_area.x1 - sw / 2 - 1;
 800f42e:	4410      	add	r0, r2
    sh_area.x2 = sh_rect_area.x2 + sw / 2 + 1;
 800f430:	105b      	asrs	r3, r3, #1
    sh_area.y1 = sh_rect_area.y1 - sw / 2 - 1;
 800f432:	440a      	add	r2, r1
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 800f434:	9907      	ldr	r1, [sp, #28]
 800f436:	3301      	adds	r3, #1
    sh_rect_area.y2 = coords->y2  + dsc->shadow_ofs_y + dsc->shadow_spread;
 800f438:	f8ad 404e 	strh.w	r4, [sp, #78]	; 0x4e
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 800f43c:	29fe      	cmp	r1, #254	; 0xfe
    sh_area.y1 = sh_rect_area.y1 - sw / 2 - 1;
 800f43e:	f8ad 2052 	strh.w	r2, [sp, #82]	; 0x52
 800f442:	b29b      	uxth	r3, r3
    sh_rect_area.x2 = coords->x2  + dsc->shadow_ofs_x + dsc->shadow_spread;
 800f444:	f8ad 704c 	strh.w	r7, [sp, #76]	; 0x4c
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 800f448:	bf34      	ite	cc
 800f44a:	460a      	movcc	r2, r1
 800f44c:	22ff      	movcs	r2, #255	; 0xff
    sh_area.x1 = sh_rect_area.x1 - sw / 2 - 1;
 800f44e:	f8ad 0050 	strh.w	r0, [sp, #80]	; 0x50
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 800f452:	9207      	str	r2, [sp, #28]
    sh_area.x2 = sh_rect_area.x2 + sw / 2 + 1;
 800f454:	18fa      	adds	r2, r7, r3
    sh_area.y2 = sh_rect_area.y2 + sw / 2 + 1;
 800f456:	4423      	add	r3, r4
    sh_area.x2 = sh_rect_area.x2 + sw / 2 + 1;
 800f458:	f8ad 2054 	strh.w	r2, [sp, #84]	; 0x54
    sh_area.y2 = sh_rect_area.y2 + sw / 2 + 1;
 800f45c:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
 800f460:	f7f8 ff88 	bl	8008374 <_lv_refr_get_disp_refreshing>
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 800f464:	f004 fa7e 	bl	8013964 <lv_disp_get_buf>
 800f468:	4603      	mov	r3, r0
    is_common = _lv_area_intersect(&draw_area, &sh_area, clip);
 800f46a:	4652      	mov	r2, sl
 800f46c:	a914      	add	r1, sp, #80	; 0x50
 800f46e:	a816      	add	r0, sp, #88	; 0x58
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 800f470:	9306      	str	r3, [sp, #24]
    is_common = _lv_area_intersect(&draw_area, &sh_area, clip);
 800f472:	f004 fd65 	bl	8013f40 <_lv_area_intersect>
    if(is_common == false) return;
 800f476:	900d      	str	r0, [sp, #52]	; 0x34
 800f478:	2800      	cmp	r0, #0
 800f47a:	f000 8593 	beq.w	800ffa4 <lv_draw_rect+0xc24>
    draw_area.x1 -= disp_area->x1;
 800f47e:	aa18      	add	r2, sp, #96	; 0x60
 800f480:	3701      	adds	r7, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800f482:	eba8 0606 	sub.w	r6, r8, r6
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800f486:	eba8 0505 	sub.w	r5, r8, r5
 800f48a:	b2bf      	uxth	r7, r7
 800f48c:	4613      	mov	r3, r2
 800f48e:	9209      	str	r2, [sp, #36]	; 0x24
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800f490:	3401      	adds	r4, #1
 800f492:	9a05      	ldr	r2, [sp, #20]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800f494:	443d      	add	r5, r7
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800f496:	4434      	add	r4, r6
    draw_area.x2 -= disp_area->x1;
 800f498:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 800f49c:	6810      	ldr	r0, [r2, #0]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800f49e:	b22d      	sxth	r5, r5
 800f4a0:	6851      	ldr	r1, [r2, #4]
    draw_area.x1 -= disp_area->x1;
 800f4a2:	9a06      	ldr	r2, [sp, #24]
 800f4a4:	f8b2 e010 	ldrh.w	lr, [r2, #16]
    draw_area.y1 -= disp_area->y1;
 800f4a8:	f8b2 c012 	ldrh.w	ip, [r2, #18]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800f4ac:	b222      	sxth	r2, r4
 800f4ae:	b2a4      	uxth	r4, r4
    short_side = LV_MATH_MIN(lv_area_get_width(&sh_rect_area), lv_area_get_height(&sh_rect_area));
 800f4b0:	4295      	cmp	r5, r2
 800f4b2:	940b      	str	r4, [sp, #44]	; 0x2c
 800f4b4:	bfa8      	it	ge
 800f4b6:	4615      	movge	r5, r2
    int32_t r_bg = dsc->radius;
 800f4b8:	f9bb 4000 	ldrsh.w	r4, [fp]
    if(r_sh > short_side >> 1) r_sh = short_side >> 1;
 800f4bc:	106d      	asrs	r5, r5, #1
 800f4be:	c303      	stmia	r3!, {r0, r1}
 800f4c0:	42a5      	cmp	r5, r4
    bg_coords.x1 += 1;
 800f4c2:	f8bd 2060 	ldrh.w	r2, [sp, #96]	; 0x60
    bg_coords.y1 += 1;
 800f4c6:	f8bd 1062 	ldrh.w	r1, [sp, #98]	; 0x62
 800f4ca:	bfa8      	it	ge
 800f4cc:	4625      	movge	r5, r4
    bg_coords.x1 += 1;
 800f4ce:	3201      	adds	r2, #1
    bg_coords.y1 += 1;
 800f4d0:	3101      	adds	r1, #1
    bg_coords.x2 -= 1;
 800f4d2:	f8bd 0064 	ldrh.w	r0, [sp, #100]	; 0x64
    bg_coords.y2 -= 1;
 800f4d6:	f8bd 6066 	ldrh.w	r6, [sp, #102]	; 0x66
    bg_coords.x1 += 1;
 800f4da:	b292      	uxth	r2, r2
    bg_coords.y1 += 1;
 800f4dc:	b289      	uxth	r1, r1
    int32_t corner_size = sw  + r_sh;
 800f4de:	eb09 0305 	add.w	r3, r9, r5
    bg_coords.x1 += 1;
 800f4e2:	f8ad 2060 	strh.w	r2, [sp, #96]	; 0x60
    int32_t corner_size = sw  + r_sh;
 800f4e6:	9306      	str	r3, [sp, #24]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800f4e8:	1a83      	subs	r3, r0, r2
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800f4ea:	1a72      	subs	r2, r6, r1
    bg_coords.x2 -= 1;
 800f4ec:	3801      	subs	r0, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800f4ee:	b21b      	sxth	r3, r3
    bg_coords.y2 -= 1;
 800f4f0:	3e01      	subs	r6, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800f4f2:	b212      	sxth	r2, r2
    bg_coords.x2 -= 1;
 800f4f4:	f8ad 0064 	strh.w	r0, [sp, #100]	; 0x64
    bg_coords.y1 += 1;
 800f4f8:	f8ad 1062 	strh.w	r1, [sp, #98]	; 0x62
    int32_t short_side = LV_MATH_MIN(lv_area_get_width(&bg_coords), lv_area_get_height(&bg_coords));
 800f4fc:	4293      	cmp	r3, r2
    draw_area.x1 -= disp_area->x1;
 800f4fe:	f8bd 1058 	ldrh.w	r1, [sp, #88]	; 0x58
    bg_coords.y2 -= 1;
 800f502:	f8ad 6066 	strh.w	r6, [sp, #102]	; 0x66
    int32_t short_side = LV_MATH_MIN(lv_area_get_width(&bg_coords), lv_area_get_height(&bg_coords));
 800f506:	bfa8      	it	ge
 800f508:	4613      	movge	r3, r2
    sh_buf = _lv_mem_buf_get(corner_size * corner_size * sizeof(uint16_t));
 800f50a:	9a06      	ldr	r2, [sp, #24]
    draw_area.y2 -= disp_area->y1;
 800f50c:	f8bd 605e 	ldrh.w	r6, [sp, #94]	; 0x5e
    draw_area.x1 -= disp_area->x1;
 800f510:	eba1 010e 	sub.w	r1, r1, lr
    if(r_bg > short_side >> 1) r_bg = short_side >> 1;
 800f514:	105b      	asrs	r3, r3, #1
    sh_buf = _lv_mem_buf_get(corner_size * corner_size * sizeof(uint16_t));
 800f516:	fb02 f002 	mul.w	r0, r2, r2
    draw_area.y1 -= disp_area->y1;
 800f51a:	f8bd 205a 	ldrh.w	r2, [sp, #90]	; 0x5a
    draw_area.x2 -= disp_area->x1;
 800f51e:	eba8 0e0e 	sub.w	lr, r8, lr
 800f522:	42a3      	cmp	r3, r4
    sh_buf = _lv_mem_buf_get(corner_size * corner_size * sizeof(uint16_t));
 800f524:	ea4f 0040 	mov.w	r0, r0, lsl #1
    draw_area.y1 -= disp_area->y1;
 800f528:	eba2 020c 	sub.w	r2, r2, ip
    draw_area.y2 -= disp_area->y1;
 800f52c:	eba6 0c0c 	sub.w	ip, r6, ip
 800f530:	bfa8      	it	ge
 800f532:	4623      	movge	r3, r4
    draw_area.x1 -= disp_area->x1;
 800f534:	f8ad 1058 	strh.w	r1, [sp, #88]	; 0x58
    draw_area.x2 -= disp_area->x1;
 800f538:	f8ad e05c 	strh.w	lr, [sp, #92]	; 0x5c
    lv_draw_mask_radius_init(&mask_param, &sh_area, r, false);
 800f53c:	ae21      	add	r6, sp, #132	; 0x84
 800f53e:	930e      	str	r3, [sp, #56]	; 0x38
    draw_area.y1 -= disp_area->y1;
 800f540:	f8ad 205a 	strh.w	r2, [sp, #90]	; 0x5a
    draw_area.y2 -= disp_area->y1;
 800f544:	f8ad c05e 	strh.w	ip, [sp, #94]	; 0x5e
    sh_buf = _lv_mem_buf_get(corner_size * corner_size * sizeof(uint16_t));
 800f548:	f005 ffee 	bl	8015528 <_lv_mem_buf_get>
    shadow_draw_corner_buf(&sh_rect_area, (uint16_t *)sh_buf, dsc->shadow_width, r_sh);
 800f54c:	f9bb 8030 	ldrsh.w	r8, [fp, #48]	; 0x30
    sh_area.x1 = sh_area.x2 - lv_area_get_width(coords);
 800f550:	9a04      	ldr	r2, [sp, #16]
    sh_area.x2 = sw / 2 + r - 1  - ((sw & 1) ? 0 : 1);
 800f552:	f1b8 0f00 	cmp.w	r8, #0
 800f556:	4643      	mov	r3, r8
 800f558:	f068 0101 	orn	r1, r8, #1
    int32_t size = sw_ori  + r;
 800f55c:	eb05 0408 	add.w	r4, r5, r8
    sh_area.x2 = sw / 2 + r - 1  - ((sw & 1) ? 0 : 1);
 800f560:	bfb8      	it	lt
 800f562:	f108 0301 	addlt.w	r3, r8, #1
    sh_area.x1 = sh_area.x2 - lv_area_get_width(coords);
 800f566:	1bd7      	subs	r7, r2, r7
    lv_draw_mask_radius_init(&mask_param, &sh_area, r, false);
 800f568:	462a      	mov	r2, r5
 800f56a:	960a      	str	r6, [sp, #40]	; 0x28
    sh_area.x2 = sw / 2 + r - 1  - ((sw & 1) ? 0 : 1);
 800f56c:	f3c3 034f 	ubfx	r3, r3, #1, #16
    sh_buf = _lv_mem_buf_get(corner_size * corner_size * sizeof(uint16_t));
 800f570:	9008      	str	r0, [sp, #32]
    lv_draw_mask_radius_init(&mask_param, &sh_area, r, false);
 800f572:	a828      	add	r0, sp, #160	; 0xa0
    sh_area.x2 = sw / 2 + r - 1  - ((sw & 1) ? 0 : 1);
 800f574:	4419      	add	r1, r3
    sh_area.y1 = sw / 2 + 1;
 800f576:	3301      	adds	r3, #1
    lv_draw_mask_radius_init(&mask_param, &sh_area, r, false);
 800f578:	9004      	str	r0, [sp, #16]
    sh_area.x2 = sw / 2 + r - 1  - ((sw & 1) ? 0 : 1);
 800f57a:	440d      	add	r5, r1
    sh_area.y1 = sw / 2 + 1;
 800f57c:	b29b      	uxth	r3, r3
    lv_draw_mask_radius_init(&mask_param, &sh_area, r, false);
 800f57e:	4631      	mov	r1, r6
    sh_area.y2 = sh_area.y1 + lv_area_get_height(coords);
 800f580:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    sh_area.x2 = sw / 2 + r - 1  - ((sw & 1) ? 0 : 1);
 800f582:	b2ad      	uxth	r5, r5
    sh_area.y1 = sw / 2 + 1;
 800f584:	f8ad 3086 	strh.w	r3, [sp, #134]	; 0x86
    sh_area.y2 = sh_area.y1 + lv_area_get_height(coords);
 800f588:	441e      	add	r6, r3
    lv_draw_mask_radius_init(&mask_param, &sh_area, r, false);
 800f58a:	2300      	movs	r3, #0
    sh_area.x1 = sh_area.x2 - lv_area_get_width(coords);
 800f58c:	442f      	add	r7, r5
    sh_area.x2 = sw / 2 + r - 1  - ((sw & 1) ? 0 : 1);
 800f58e:	f8ad 5088 	strh.w	r5, [sp, #136]	; 0x88
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800f592:	f008 0501 	and.w	r5, r8, #1
    sh_area.y2 = sh_area.y1 + lv_area_get_height(coords);
 800f596:	f8ad 608a 	strh.w	r6, [sp, #138]	; 0x8a
    sh_area.x1 = sh_area.x2 - lv_area_get_width(coords);
 800f59a:	f8ad 7084 	strh.w	r7, [sp, #132]	; 0x84
    lv_draw_mask_radius_init(&mask_param, &sh_area, r, false);
 800f59e:	9510      	str	r5, [sp, #64]	; 0x40
 800f5a0:	f7ff fa9e 	bl	800eae0 <lv_draw_mask_radius_init>
    if(sw_ori == 1) sw = 1;
 800f5a4:	f1b8 0f01 	cmp.w	r8, #1
    lv_opa_t * mask_line = _lv_mem_buf_get(size);
 800f5a8:	4620      	mov	r0, r4
    if(sw_ori == 1) sw = 1;
 800f5aa:	f001 8098 	beq.w	80106de <lv_draw_rect+0x135e>
    else sw = sw_ori >> 1;
 800f5ae:	ea4f 0368 	mov.w	r3, r8, asr #1
 800f5b2:	930c      	str	r3, [sp, #48]	; 0x30
    lv_opa_t * mask_line = _lv_mem_buf_get(size);
 800f5b4:	f005 ffb8 	bl	8015528 <_lv_mem_buf_get>
    for(y = 0; y < size; y++) {
 800f5b8:	2c00      	cmp	r4, #0
    lv_opa_t * mask_line = _lv_mem_buf_get(size);
 800f5ba:	4681      	mov	r9, r0
    for(y = 0; y < size; y++) {
 800f5bc:	dd49      	ble.n	800f652 <lv_draw_rect+0x2d2>
 800f5be:	1e63      	subs	r3, r4, #1
 800f5c0:	b222      	sxth	r2, r4
 800f5c2:	ee08 aa10 	vmov	s16, sl
 800f5c6:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
 800f5ca:	444b      	add	r3, r9
            _lv_memset_00(sh_ups_tmp_buf, size * sizeof(sh_ups_tmp_buf[0]));
 800f5cc:	ea4f 0844 	mov.w	r8, r4, lsl #1
    sh_buf = _lv_mem_buf_get(corner_size * corner_size * sizeof(uint16_t));
 800f5d0:	9e08      	ldr	r6, [sp, #32]
    for(y = 0; y < size; y++) {
 800f5d2:	2500      	movs	r5, #0
 800f5d4:	4692      	mov	sl, r2
 800f5d6:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 800f5da:	930b      	str	r3, [sp, #44]	; 0x2c
 800f5dc:	e007      	b.n	800f5ee <lv_draw_rect+0x26e>
            _lv_memset_00(sh_ups_tmp_buf, size * sizeof(sh_ups_tmp_buf[0]));
 800f5de:	4641      	mov	r1, r8
 800f5e0:	4630      	mov	r0, r6
 800f5e2:	f006 f8c9 	bl	8015778 <_lv_memset_00>
    for(y = 0; y < size; y++) {
 800f5e6:	3501      	adds	r5, #1
        sh_ups_tmp_buf += size;
 800f5e8:	4446      	add	r6, r8
    for(y = 0; y < size; y++) {
 800f5ea:	42ac      	cmp	r4, r5
 800f5ec:	dd2d      	ble.n	800f64a <lv_draw_rect+0x2ca>
        _lv_memset_ff(mask_line, size);
 800f5ee:	4621      	mov	r1, r4
 800f5f0:	4648      	mov	r0, r9
 800f5f2:	f006 f927 	bl	8015844 <_lv_memset_ff>
        lv_draw_mask_res_t mask_res = mask_param.dsc.cb(mask_line, 0, y, size, &mask_param);
 800f5f6:	9b04      	ldr	r3, [sp, #16]
 800f5f8:	9f28      	ldr	r7, [sp, #160]	; 0xa0
 800f5fa:	b22a      	sxth	r2, r5
 800f5fc:	9300      	str	r3, [sp, #0]
 800f5fe:	2100      	movs	r1, #0
 800f600:	4653      	mov	r3, sl
 800f602:	4648      	mov	r0, r9
 800f604:	47b8      	blx	r7
        if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
 800f606:	2800      	cmp	r0, #0
 800f608:	d0e9      	beq.n	800f5de <lv_draw_rect+0x25e>
            sh_ups_tmp_buf[0] = (mask_line[0] << SHADOW_UPSCALE_SHIFT) / sw;
 800f60a:	f899 3000 	ldrb.w	r3, [r9]
            for(i = 1; i < size; i++) {
 800f60e:	2c01      	cmp	r4, #1
            sh_ups_tmp_buf[0] = (mask_line[0] << SHADOW_UPSCALE_SHIFT) / sw;
 800f610:	ea4f 1383 	mov.w	r3, r3, lsl #6
 800f614:	fb93 f3fb 	sdiv	r3, r3, fp
 800f618:	8033      	strh	r3, [r6, #0]
            for(i = 1; i < size; i++) {
 800f61a:	d0e4      	beq.n	800f5e6 <lv_draw_rect+0x266>
 800f61c:	464a      	mov	r2, r9
 800f61e:	4633      	mov	r3, r6
 800f620:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
                else sh_ups_tmp_buf[i] = (mask_line[i] << SHADOW_UPSCALE_SHIFT) / sw;
 800f624:	4617      	mov	r7, r2
                if(mask_line[i] == mask_line[i - 1]) sh_ups_tmp_buf[i] = sh_ups_tmp_buf[i - 1];
 800f626:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800f62a:	3302      	adds	r3, #2
 800f62c:	783f      	ldrb	r7, [r7, #0]
                else sh_ups_tmp_buf[i] = (mask_line[i] << SHADOW_UPSCALE_SHIFT) / sw;
 800f62e:	0181      	lsls	r1, r0, #6
                if(mask_line[i] == mask_line[i - 1]) sh_ups_tmp_buf[i] = sh_ups_tmp_buf[i - 1];
 800f630:	4287      	cmp	r7, r0
                else sh_ups_tmp_buf[i] = (mask_line[i] << SHADOW_UPSCALE_SHIFT) / sw;
 800f632:	bf14      	ite	ne
 800f634:	fb91 f1fb 	sdivne	r1, r1, fp
                if(mask_line[i] == mask_line[i - 1]) sh_ups_tmp_buf[i] = sh_ups_tmp_buf[i - 1];
 800f638:	f833 1c02 	ldrheq.w	r1, [r3, #-2]
            for(i = 1; i < size; i++) {
 800f63c:	4594      	cmp	ip, r2
                else sh_ups_tmp_buf[i] = (mask_line[i] << SHADOW_UPSCALE_SHIFT) / sw;
 800f63e:	8019      	strh	r1, [r3, #0]
            for(i = 1; i < size; i++) {
 800f640:	d1f0      	bne.n	800f624 <lv_draw_rect+0x2a4>
    for(y = 0; y < size; y++) {
 800f642:	3501      	adds	r5, #1
        sh_ups_tmp_buf += size;
 800f644:	4446      	add	r6, r8
    for(y = 0; y < size; y++) {
 800f646:	42ac      	cmp	r4, r5
 800f648:	dcd1      	bgt.n	800f5ee <lv_draw_rect+0x26e>
 800f64a:	ee18 aa10 	vmov	sl, s16
 800f64e:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
    _lv_mem_buf_release(mask_line);
 800f652:	4648      	mov	r0, r9
 800f654:	f005 fc40 	bl	8014ed8 <_lv_mem_buf_release>
    if(sw == 1) {
 800f658:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f65a:	2b01      	cmp	r3, #1
 800f65c:	f001 8026 	beq.w	80106ac <lv_draw_rect+0x132c>
    shadow_blur_corner(size, sw, sh_buf);
 800f660:	b220      	sxth	r0, r4
 800f662:	4619      	mov	r1, r3
 800f664:	9a08      	ldr	r2, [sp, #32]
 800f666:	461d      	mov	r5, r3
 800f668:	900b      	str	r0, [sp, #44]	; 0x2c
 800f66a:	f7ff fa7d 	bl	800eb68 <shadow_blur_corner>
    sw += sw_ori & 1;
 800f66e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    if(sw > 1) {
 800f670:	980b      	ldr	r0, [sp, #44]	; 0x2c
    sw += sw_ori & 1;
 800f672:	442b      	add	r3, r5
    if(sw > 1) {
 800f674:	2b01      	cmp	r3, #1
    sw += sw_ori & 1;
 800f676:	4619      	mov	r1, r3
    if(sw > 1) {
 800f678:	f340 82d5 	ble.w	800fc26 <lv_draw_rect+0x8a6>
        sh_buf[0] = (sh_buf[0] << SHADOW_UPSCALE_SHIFT) / sw;
 800f67c:	9a08      	ldr	r2, [sp, #32]
        for(i = 1; i < (uint32_t) size * size; i++) {
 800f67e:	fb04 f404 	mul.w	r4, r4, r4
        sh_buf[0] = (sh_buf[0] << SHADOW_UPSCALE_SHIFT) / sw;
 800f682:	8813      	ldrh	r3, [r2, #0]
        for(i = 1; i < (uint32_t) size * size; i++) {
 800f684:	2c01      	cmp	r4, #1
        sh_buf[0] = (sh_buf[0] << SHADOW_UPSCALE_SHIFT) / sw;
 800f686:	ea4f 1383 	mov.w	r3, r3, lsl #6
 800f68a:	fbb3 f3f1 	udiv	r3, r3, r1
 800f68e:	b29b      	uxth	r3, r3
 800f690:	8013      	strh	r3, [r2, #0]
        for(i = 1; i < (uint32_t) size * size; i++) {
 800f692:	d910      	bls.n	800f6b6 <lv_draw_rect+0x336>
 800f694:	1e97      	subs	r7, r2, #2
 800f696:	4615      	mov	r5, r2
 800f698:	eb07 0744 	add.w	r7, r7, r4, lsl #1
            if(sh_buf[i] == sh_buf[i - 1]) sh_buf[i] = sh_buf[i - 1];
 800f69c:	f835 2f02 	ldrh.w	r2, [r5, #2]!
 800f6a0:	429a      	cmp	r2, r3
            else sh_buf[i] = (sh_buf[i] << SHADOW_UPSCALE_SHIFT) / sw;
 800f6a2:	ea4f 1682 	mov.w	r6, r2, lsl #6
            if(sh_buf[i] == sh_buf[i - 1]) sh_buf[i] = sh_buf[i - 1];
 800f6a6:	f000 875d 	beq.w	8010564 <lv_draw_rect+0x11e4>
        for(i = 1; i < (uint32_t) size * size; i++) {
 800f6aa:	42bd      	cmp	r5, r7
            else sh_buf[i] = (sh_buf[i] << SHADOW_UPSCALE_SHIFT) / sw;
 800f6ac:	fbb6 f6f1 	udiv	r6, r6, r1
 800f6b0:	b2b3      	uxth	r3, r6
 800f6b2:	802b      	strh	r3, [r5, #0]
        for(i = 1; i < (uint32_t) size * size; i++) {
 800f6b4:	d1f2      	bne.n	800f69c <lv_draw_rect+0x31c>
        shadow_blur_corner(size, sw, sh_buf);
 800f6b6:	9a08      	ldr	r2, [sp, #32]
 800f6b8:	f7ff fa56 	bl	800eb68 <shadow_blur_corner>
 800f6bc:	e2b5      	b.n	800fc2a <lv_draw_rect+0x8aa>
 800f6be:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800f6c2:	ee18 7a10 	vmov	r7, s16
 800f6c6:	ee18 aa90 	vmov	sl, s17
        if(grad_dir == LV_GRAD_DIR_NONE && other_mask_cnt == 0 && split) {
 800f6ca:	9b04      	ldr	r3, [sp, #16]
 800f6cc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	bf08      	it	eq
 800f6d2:	2a00      	cmpeq	r2, #0
 800f6d4:	d103      	bne.n	800f6de <lv_draw_rect+0x35e>
 800f6d6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	f041 8480 	bne.w	8010fde <lv_draw_rect+0x1c5e>
        if(grad_map) _lv_mem_buf_release(grad_map);
 800f6de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f6e0:	b113      	cbz	r3, 800f6e8 <lv_draw_rect+0x368>
 800f6e2:	4618      	mov	r0, r3
 800f6e4:	f005 fbf8 	bl	8014ed8 <_lv_mem_buf_release>
    lv_draw_mask_remove_id(mask_rout_id);
 800f6e8:	ee19 0a10 	vmov	r0, s18
 800f6ec:	f7ff f858 	bl	800e7a0 <lv_draw_mask_remove_id>
    _lv_mem_buf_release(mask_buf);
 800f6f0:	4638      	mov	r0, r7
 800f6f2:	f005 fbf1 	bl	8014ed8 <_lv_mem_buf_release>
    if(dsc->pattern_image == NULL) return;
 800f6f6:	f8db 003c 	ldr.w	r0, [fp, #60]	; 0x3c
 800f6fa:	2800      	cmp	r0, #0
 800f6fc:	d07f      	beq.n	800f7fe <lv_draw_rect+0x47e>
    if(dsc->pattern_opa <= LV_OPA_MIN) return;
 800f6fe:	f89b 3048 	ldrb.w	r3, [fp, #72]	; 0x48
 800f702:	2b02      	cmp	r3, #2
 800f704:	d97b      	bls.n	800f7fe <lv_draw_rect+0x47e>
    lv_img_src_t src_type = lv_img_src_get_type(dsc->pattern_image);
 800f706:	f7fc fd59 	bl	800c1bc <lv_img_src_get_type>
    if(src_type == LV_IMG_SRC_FILE || src_type == LV_IMG_SRC_VARIABLE) {
 800f70a:	2801      	cmp	r0, #1
    lv_img_src_t src_type = lv_img_src_get_type(dsc->pattern_image);
 800f70c:	4605      	mov	r5, r0
    if(src_type == LV_IMG_SRC_FILE || src_type == LV_IMG_SRC_VARIABLE) {
 800f70e:	f240 87a0 	bls.w	8010652 <lv_draw_rect+0x12d2>
    else if(src_type == LV_IMG_SRC_SYMBOL) {
 800f712:	2802      	cmp	r0, #2
 800f714:	f040 8588 	bne.w	8010228 <lv_draw_rect+0xea8>
        lv_draw_label_dsc_init(&label_dsc);
 800f718:	ab28      	add	r3, sp, #160	; 0xa0
 800f71a:	4618      	mov	r0, r3
 800f71c:	9304      	str	r3, [sp, #16]
 800f71e:	f7fc fd5d 	bl	800c1dc <lv_draw_label_dsc_init>
        _lv_txt_get_size(&s, dsc->pattern_image, label_dsc.font, label_dsc.letter_space, label_dsc.line_space, LV_COORD_MAX,
 800f722:	2000      	movs	r0, #0
 800f724:	f647 4118 	movw	r1, #31768	; 0x7c18
 800f728:	f9bd 30b2 	ldrsh.w	r3, [sp, #178]	; 0xb2
        label_dsc.font = dsc->pattern_font;
 800f72c:	f8db 2040 	ldr.w	r2, [fp, #64]	; 0x40
        _lv_txt_get_size(&s, dsc->pattern_image, label_dsc.font, label_dsc.letter_space, label_dsc.line_space, LV_COORD_MAX,
 800f730:	9002      	str	r0, [sp, #8]
 800f732:	a821      	add	r0, sp, #132	; 0x84
 800f734:	9101      	str	r1, [sp, #4]
        label_dsc.color = dsc->pattern_recolor;
 800f736:	f8db 1044 	ldr.w	r1, [fp, #68]	; 0x44
        _lv_txt_get_size(&s, dsc->pattern_image, label_dsc.font, label_dsc.letter_space, label_dsc.line_space, LV_COORD_MAX,
 800f73a:	9300      	str	r3, [sp, #0]
        label_dsc.opa = dsc->pattern_opa;
 800f73c:	f89b 4048 	ldrb.w	r4, [fp, #72]	; 0x48
        label_dsc.color = dsc->pattern_recolor;
 800f740:	9128      	str	r1, [sp, #160]	; 0xa0
        _lv_txt_get_size(&s, dsc->pattern_image, label_dsc.font, label_dsc.letter_space, label_dsc.line_space, LV_COORD_MAX,
 800f742:	f9bd 30b4 	ldrsh.w	r3, [sp, #180]	; 0xb4
 800f746:	f8db 103c 	ldr.w	r1, [fp, #60]	; 0x3c
        label_dsc.opa = dsc->pattern_opa;
 800f74a:	f88d 40b0 	strb.w	r4, [sp, #176]	; 0xb0
        label_dsc.font = dsc->pattern_font;
 800f74e:	922b      	str	r2, [sp, #172]	; 0xac
        _lv_txt_get_size(&s, dsc->pattern_image, label_dsc.font, label_dsc.letter_space, label_dsc.line_space, LV_COORD_MAX,
 800f750:	f006 fce8 	bl	8016124 <_lv_txt_get_size>
        img_w = s.x;
 800f754:	f9bd 4084 	ldrsh.w	r4, [sp, #132]	; 0x84
        img_h = s.y;
 800f758:	f9bd 6086 	ldrsh.w	r6, [sp, #134]	; 0x86
    if(img_w == 0 || img_h == 0) return;
 800f75c:	2c00      	cmp	r4, #0
 800f75e:	d04e      	beq.n	800f7fe <lv_draw_rect+0x47e>
 800f760:	fab6 f786 	clz	r7, r6
 800f764:	097f      	lsrs	r7, r7, #5
 800f766:	2e00      	cmp	r6, #0
 800f768:	d049      	beq.n	800f7fe <lv_draw_rect+0x47e>
    if(dsc->pattern_repeat) {
 800f76a:	f89b 304a 	ldrb.w	r3, [fp, #74]	; 0x4a
 800f76e:	07db      	lsls	r3, r3, #31
 800f770:	f100 8571 	bmi.w	8010256 <lv_draw_rect+0xed6>
 800f774:	9a05      	ldr	r2, [sp, #20]
 800f776:	8810      	ldrh	r0, [r2, #0]
 800f778:	4611      	mov	r1, r2
 800f77a:	8893      	ldrh	r3, [r2, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800f77c:	88d2      	ldrh	r2, [r2, #6]
 800f77e:	8849      	ldrh	r1, [r1, #2]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800f780:	3301      	adds	r3, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800f782:	3201      	adds	r2, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800f784:	1a1b      	subs	r3, r3, r0
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800f786:	1a52      	subs	r2, r2, r1
        int32_t obj_w = lv_area_get_width(coords);
 800f788:	b21b      	sxth	r3, r3
        int32_t obj_h = lv_area_get_height(coords);
 800f78a:	b212      	sxth	r2, r2
        coords_tmp.x1 = coords->x1 + (obj_w - img_w) / 2;
 800f78c:	1b1b      	subs	r3, r3, r4
        coords_tmp.x2 = coords_tmp.x1 + img_w - 1;
 800f78e:	f104 34ff 	add.w	r4, r4, #4294967295
        coords_tmp.y1 = coords->y1 + (obj_h - img_h) / 2;
 800f792:	eba2 0206 	sub.w	r2, r2, r6
        coords_tmp.y2 = coords_tmp.y1 + img_h - 1;
 800f796:	f106 36ff 	add.w	r6, r6, #4294967295
        coords_tmp.x1 = coords->x1 + (obj_w - img_w) / 2;
 800f79a:	bf48      	it	mi
 800f79c:	3301      	addmi	r3, #1
        coords_tmp.y1 = coords->y1 + (obj_h - img_h) / 2;
 800f79e:	2a00      	cmp	r2, #0
        coords_tmp.x1 = coords->x1 + (obj_w - img_w) / 2;
 800f7a0:	eb00 0363 	add.w	r3, r0, r3, asr #1
        coords_tmp.y1 = coords->y1 + (obj_h - img_h) / 2;
 800f7a4:	4610      	mov	r0, r2
 800f7a6:	bfb8      	it	lt
 800f7a8:	1c50      	addlt	r0, r2, #1
        if(src_type == LV_IMG_SRC_SYMBOL) {
 800f7aa:	2d02      	cmp	r5, #2
        coords_tmp.x1 = coords->x1 + (obj_w - img_w) / 2;
 800f7ac:	b29b      	uxth	r3, r3
        coords_tmp.y1 = coords->y1 + (obj_h - img_h) / 2;
 800f7ae:	eb01 0160 	add.w	r1, r1, r0, asr #1
        coords_tmp.x2 = coords_tmp.x1 + img_w - 1;
 800f7b2:	441c      	add	r4, r3
        coords_tmp.x1 = coords->x1 + (obj_w - img_w) / 2;
 800f7b4:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
        coords_tmp.y1 = coords->y1 + (obj_h - img_h) / 2;
 800f7b8:	b289      	uxth	r1, r1
        coords_tmp.x2 = coords_tmp.x1 + img_w - 1;
 800f7ba:	f8ad 406c 	strh.w	r4, [sp, #108]	; 0x6c
        coords_tmp.y2 = coords_tmp.y1 + img_h - 1;
 800f7be:	eb01 0306 	add.w	r3, r1, r6
        coords_tmp.y1 = coords->y1 + (obj_h - img_h) / 2;
 800f7c2:	f8ad 106a 	strh.w	r1, [sp, #106]	; 0x6a
        coords_tmp.y2 = coords_tmp.y1 + img_h - 1;
 800f7c6:	b29b      	uxth	r3, r3
 800f7c8:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
        if(src_type == LV_IMG_SRC_SYMBOL) {
 800f7cc:	f001 84a2 	beq.w	8011114 <lv_draw_rect+0x1d94>
        if(_lv_area_is_in(&coords_tmp, coords, dsc->radius) == false) {
 800f7d0:	ac1a      	add	r4, sp, #104	; 0x68
 800f7d2:	f9bb 2000 	ldrsh.w	r2, [fp]
 800f7d6:	9905      	ldr	r1, [sp, #20]
 800f7d8:	4620      	mov	r0, r4
 800f7da:	f004 fd27 	bl	801422c <_lv_area_is_in>
 800f7de:	4605      	mov	r5, r0
 800f7e0:	2800      	cmp	r0, #0
 800f7e2:	f001 8527 	beq.w	8011234 <lv_draw_rect+0x1eb4>
        int16_t radius_mask_id = LV_MASK_ID_INV;
 800f7e6:	f04f 35ff 	mov.w	r5, #4294967295
        else lv_draw_img(&coords_tmp, clip, dsc->pattern_image, &img_dsc);
 800f7ea:	4620      	mov	r0, r4
 800f7ec:	ab1c      	add	r3, sp, #112	; 0x70
 800f7ee:	f8db 203c 	ldr.w	r2, [fp, #60]	; 0x3c
 800f7f2:	4651      	mov	r1, sl
 800f7f4:	f7fc fb6a 	bl	800becc <lv_draw_img>
        lv_draw_mask_remove_id(radius_mask_id);
 800f7f8:	4628      	mov	r0, r5
 800f7fa:	f7fe ffd1 	bl	800e7a0 <lv_draw_mask_remove_id>
    if(dsc->border_opa <= LV_OPA_MIN) return;
 800f7fe:	f89b 401c 	ldrb.w	r4, [fp, #28]
 800f802:	2c02      	cmp	r4, #2
 800f804:	f240 8152 	bls.w	800faac <lv_draw_rect+0x72c>
    if(dsc->border_width == 0) return;
 800f808:	f9bb 2018 	ldrsh.w	r2, [fp, #24]
 800f80c:	2a00      	cmp	r2, #0
 800f80e:	f000 814d 	beq.w	800faac <lv_draw_rect+0x72c>
    if(dsc->border_side == LV_BORDER_SIDE_NONE) return;
 800f812:	f9bb 501a 	ldrsh.w	r5, [fp, #26]
 800f816:	2d00      	cmp	r5, #0
 800f818:	f000 8148 	beq.w	800faac <lv_draw_rect+0x72c>
    if(dsc->border_post) return;
 800f81c:	f89b 301e 	ldrb.w	r3, [fp, #30]
 800f820:	07de      	lsls	r6, r3, #31
 800f822:	f100 8143 	bmi.w	800faac <lv_draw_rect+0x72c>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800f826:	9805      	ldr	r0, [sp, #20]
 800f828:	ab18      	add	r3, sp, #96	; 0x60
    area_inner.x1 += ((dsc->border_side & LV_BORDER_SIDE_LEFT) ? dsc->border_width : - (dsc->border_width + rout));
 800f82a:	b2ae      	uxth	r6, r5
 800f82c:	f8b0 9004 	ldrh.w	r9, [r0, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800f830:	88c7      	ldrh	r7, [r0, #6]
 800f832:	8841      	ldrh	r1, [r0, #2]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800f834:	f109 0901 	add.w	r9, r9, #1
 800f838:	9309      	str	r3, [sp, #36]	; 0x24
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800f83a:	3701      	adds	r7, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800f83c:	8803      	ldrh	r3, [r0, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800f83e:	1a7f      	subs	r7, r7, r1
 800f840:	4601      	mov	r1, r0
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800f842:	eba9 0903 	sub.w	r9, r9, r3
    int32_t rout = dsc->radius;
 800f846:	f9bb 3000 	ldrsh.w	r3, [fp]
    int32_t coords_h = lv_area_get_height(coords);
 800f84a:	b23f      	sxth	r7, r7
 800f84c:	6800      	ldr	r0, [r0, #0]
    int32_t coords_w = lv_area_get_width(coords);
 800f84e:	fa0f f989 	sxth.w	r9, r9
 800f852:	6849      	ldr	r1, [r1, #4]
 800f854:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    int32_t short_side = LV_MATH_MIN(coords_w, coords_h);
 800f858:	45b9      	cmp	r9, r7
 800f85a:	bfa8      	it	ge
 800f85c:	46b9      	movge	r9, r7
    if(rout > short_side >> 1) rout = short_side >> 1;
 800f85e:	ea4f 0969 	mov.w	r9, r9, asr #1
 800f862:	4599      	cmp	r9, r3
 800f864:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 800f868:	bfa8      	it	ge
 800f86a:	4699      	movge	r9, r3
    area_inner.x1 += ((dsc->border_side & LV_BORDER_SIDE_LEFT) ? dsc->border_width : - (dsc->border_width + rout));
 800f86c:	0768      	lsls	r0, r5, #29
 800f86e:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
 800f872:	f100 84ec 	bmi.w	801024e <lv_draw_rect+0xece>
 800f876:	b290      	uxth	r0, r2
 800f878:	eb00 0209 	add.w	r2, r0, r9
 800f87c:	4252      	negs	r2, r2
 800f87e:	b292      	uxth	r2, r2
 800f880:	440a      	add	r2, r1
    area_inner.x2 -= ((dsc->border_side & LV_BORDER_SIDE_RIGHT) ? dsc->border_width : - (dsc->border_width + rout));
 800f882:	f8bd 7064 	ldrh.w	r7, [sp, #100]	; 0x64
    area_inner.x1 += ((dsc->border_side & LV_BORDER_SIDE_LEFT) ? dsc->border_width : - (dsc->border_width + rout));
 800f886:	f8ad 2060 	strh.w	r2, [sp, #96]	; 0x60
    area_inner.x2 -= ((dsc->border_side & LV_BORDER_SIDE_RIGHT) ? dsc->border_width : - (dsc->border_width + rout));
 800f88a:	0732      	lsls	r2, r6, #28
 800f88c:	f100 8721 	bmi.w	80106d2 <lv_draw_rect+0x1352>
 800f890:	eb00 0109 	add.w	r1, r0, r9
 800f894:	4249      	negs	r1, r1
 800f896:	b289      	uxth	r1, r1
 800f898:	1a79      	subs	r1, r7, r1
    area_inner.y1 += ((dsc->border_side & LV_BORDER_SIDE_TOP) ? dsc->border_width : - (dsc->border_width + rout));
 800f89a:	f8bd 2062 	ldrh.w	r2, [sp, #98]	; 0x62
    area_inner.x2 -= ((dsc->border_side & LV_BORDER_SIDE_RIGHT) ? dsc->border_width : - (dsc->border_width + rout));
 800f89e:	f8ad 1064 	strh.w	r1, [sp, #100]	; 0x64
    area_inner.y1 += ((dsc->border_side & LV_BORDER_SIDE_TOP) ? dsc->border_width : - (dsc->border_width + rout));
 800f8a2:	07b1      	lsls	r1, r6, #30
 800f8a4:	f100 8718 	bmi.w	80106d8 <lv_draw_rect+0x1358>
 800f8a8:	eb00 0109 	add.w	r1, r0, r9
 800f8ac:	4249      	negs	r1, r1
 800f8ae:	b289      	uxth	r1, r1
 800f8b0:	440a      	add	r2, r1
    area_inner.y2 -= ((dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? dsc->border_width : - (dsc->border_width + rout));
 800f8b2:	f8bd 1066 	ldrh.w	r1, [sp, #102]	; 0x66
    area_inner.y1 += ((dsc->border_side & LV_BORDER_SIDE_TOP) ? dsc->border_width : - (dsc->border_width + rout));
 800f8b6:	f8ad 2062 	strh.w	r2, [sp, #98]	; 0x62
    area_inner.y2 -= ((dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? dsc->border_width : - (dsc->border_width + rout));
 800f8ba:	07f2      	lsls	r2, r6, #31
 800f8bc:	d403      	bmi.n	800f8c6 <lv_draw_rect+0x546>
 800f8be:	eb00 0209 	add.w	r2, r0, r9
 800f8c2:	4252      	negs	r2, r2
 800f8c4:	b290      	uxth	r0, r2
 800f8c6:	1a0a      	subs	r2, r1, r0
    if(dsc->border_side == LV_BORDER_SIDE_FULL) {
 800f8c8:	2d0f      	cmp	r5, #15
    area_inner.y2 -= ((dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? dsc->border_width : - (dsc->border_width + rout));
 800f8ca:	f8ad 2066 	strh.w	r2, [sp, #102]	; 0x66
    if(dsc->border_side == LV_BORDER_SIDE_FULL) {
 800f8ce:	f001 83fc 	beq.w	80110ca <lv_draw_rect+0x1d4a>
        if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 800f8d2:	2cfe      	cmp	r4, #254	; 0xfe
 800f8d4:	bf28      	it	cs
 800f8d6:	24ff      	movcs	r4, #255	; 0xff
        lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
 800f8d8:	f7f8 fd4c 	bl	8008374 <_lv_refr_get_disp_refreshing>
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 800f8dc:	f004 f842 	bl	8013964 <lv_disp_get_buf>
        is_common = _lv_area_intersect(&draw_area, coords, clip);
 800f8e0:	f8dd 8014 	ldr.w	r8, [sp, #20]
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 800f8e4:	4603      	mov	r3, r0
        is_common = _lv_area_intersect(&draw_area, coords, clip);
 800f8e6:	4652      	mov	r2, sl
 800f8e8:	4641      	mov	r1, r8
 800f8ea:	a81a      	add	r0, sp, #104	; 0x68
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 800f8ec:	461d      	mov	r5, r3
 800f8ee:	9308      	str	r3, [sp, #32]
        is_common = _lv_area_intersect(&draw_area, coords, clip);
 800f8f0:	f004 fb26 	bl	8013f40 <_lv_area_intersect>
        if(is_common == false) return;
 800f8f4:	2800      	cmp	r0, #0
 800f8f6:	f000 80d9 	beq.w	800faac <lv_draw_rect+0x72c>
        draw_area.x2 -= disp_area->x1;
 800f8fa:	f8bd 206c 	ldrh.w	r2, [sp, #108]	; 0x6c
        draw_area.x1 -= disp_area->x1;
 800f8fe:	f8bd 1068 	ldrh.w	r1, [sp, #104]	; 0x68
 800f902:	1c56      	adds	r6, r2, #1
 800f904:	8a2b      	ldrh	r3, [r5, #16]
        draw_area.y1 -= disp_area->y1;
 800f906:	8a68      	ldrh	r0, [r5, #18]
 800f908:	1a76      	subs	r6, r6, r1
 800f90a:	f8bd 506a 	ldrh.w	r5, [sp, #106]	; 0x6a
        draw_area.x1 -= disp_area->x1;
 800f90e:	1ac9      	subs	r1, r1, r3
        draw_area.x2 -= disp_area->x1;
 800f910:	1ad2      	subs	r2, r2, r3
        draw_area.y2 -= disp_area->y1;
 800f912:	f8bd 306e 	ldrh.w	r3, [sp, #110]	; 0x6e
 800f916:	b236      	sxth	r6, r6
        draw_area.y1 -= disp_area->y1;
 800f918:	1a2d      	subs	r5, r5, r0
        draw_area.x1 -= disp_area->x1;
 800f91a:	f8ad 1068 	strh.w	r1, [sp, #104]	; 0x68
        draw_area.y2 -= disp_area->y1;
 800f91e:	1a1b      	subs	r3, r3, r0
        lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
 800f920:	4630      	mov	r0, r6
        draw_area.x2 -= disp_area->x1;
 800f922:	f8ad 206c 	strh.w	r2, [sp, #108]	; 0x6c
        draw_area.y1 -= disp_area->y1;
 800f926:	f8ad 506a 	strh.w	r5, [sp, #106]	; 0x6a
        draw_area.y2 -= disp_area->y1;
 800f92a:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
        lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
 800f92e:	f005 fdfb 	bl	8015528 <_lv_mem_buf_get>
        if(rout > 0) {
 800f932:	f1b9 0f00 	cmp.w	r9, #0
        lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
 800f936:	4607      	mov	r7, r0
        if(rout > 0) {
 800f938:	f301 83dd 	bgt.w	80110f6 <lv_draw_rect+0x1d76>
        int16_t mask_rout_id = LV_MASK_ID_INV;
 800f93c:	f04f 33ff 	mov.w	r3, #4294967295
 800f940:	ee08 3a10 	vmov	s16, r3
        lv_draw_mask_radius_init(&mask_rin_param, &area_inner, rout - dsc->border_width, true);
 800f944:	f8bb 2018 	ldrh.w	r2, [fp, #24]
 800f948:	2301      	movs	r3, #1
 800f94a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f94c:	a828      	add	r0, sp, #160	; 0xa0
 800f94e:	eba9 0202 	sub.w	r2, r9, r2
 800f952:	b212      	sxth	r2, r2
 800f954:	f7ff f8c4 	bl	800eae0 <lv_draw_mask_radius_init>
        int16_t mask_rin_id = lv_draw_mask_add(&mask_rin_param, NULL);
 800f958:	2100      	movs	r1, #0
 800f95a:	a828      	add	r0, sp, #160	; 0xa0
 800f95c:	f7fe fe98 	bl	800e690 <lv_draw_mask_add>
        int32_t corner_size = LV_MATH_MAX(rout, dsc->border_width - 1);
 800f960:	f9bb 3018 	ldrsh.w	r3, [fp, #24]
        fill_area.x1 = coords->x1;
 800f964:	9a05      	ldr	r2, [sp, #20]
        int16_t mask_rin_id = lv_draw_mask_add(&mask_rin_param, NULL);
 800f966:	ee08 0a90 	vmov	s17, r0
        int32_t corner_size = LV_MATH_MAX(rout, dsc->border_width - 1);
 800f96a:	4599      	cmp	r9, r3
        fill_area.y1 = disp_area->y1 + draw_area.y1;
 800f96c:	f9bd 506a 	ldrsh.w	r5, [sp, #106]	; 0x6a
        fill_area.x1 = coords->x1;
 800f970:	f9b2 1000 	ldrsh.w	r1, [r2]
        int32_t corner_size = LV_MATH_MAX(rout, dsc->border_width - 1);
 800f974:	bfb8      	it	lt
 800f976:	f103 39ff 	addlt.w	r9, r3, #4294967295
        fill_area.y1 = disp_area->y1 + draw_area.y1;
 800f97a:	9b08      	ldr	r3, [sp, #32]
        fill_area.x2 = coords->x2;
 800f97c:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
        fill_area.y1 = disp_area->y1 + draw_area.y1;
 800f980:	8a5b      	ldrh	r3, [r3, #18]
        lv_color_t color = dsc->border_color;
 800f982:	f8db 2014 	ldr.w	r2, [fp, #20]
        fill_area.y1 = disp_area->y1 + draw_area.y1;
 800f986:	442b      	add	r3, r5
        if(dsc->border_side == LV_BORDER_SIDE_LEFT) fill_area.x2 = coords->x1 + corner_size;
 800f988:	f9bb 001a 	ldrsh.w	r0, [fp, #26]
        lv_color_t color = dsc->border_color;
 800f98c:	4696      	mov	lr, r2
        lv_blend_mode_t blend_mode = dsc->border_blend_mode;
 800f98e:	f89b 201d 	ldrb.w	r2, [fp, #29]
        fill_area.y1 = disp_area->y1 + draw_area.y1;
 800f992:	b21b      	sxth	r3, r3
        if(dsc->border_side == LV_BORDER_SIDE_LEFT) fill_area.x2 = coords->x1 + corner_size;
 800f994:	2804      	cmp	r0, #4
        fill_area.x1 = coords->x1;
 800f996:	f8ad 1070 	strh.w	r1, [sp, #112]	; 0x70
        fill_area.x2 = coords->x2;
 800f99a:	f8ad c074 	strh.w	ip, [sp, #116]	; 0x74
        fill_area.y1 = disp_area->y1 + draw_area.y1;
 800f99e:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
        fill_area.y2 = fill_area.y1;
 800f9a2:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
        lv_blend_mode_t blend_mode = dsc->border_blend_mode;
 800f9a6:	9204      	str	r2, [sp, #16]
        if(dsc->border_side == LV_BORDER_SIDE_LEFT) fill_area.x2 = coords->x1 + corner_size;
 800f9a8:	f001 83d4 	beq.w	8011154 <lv_draw_rect+0x1dd4>
        else if(dsc->border_side == LV_BORDER_SIDE_RIGHT) {
 800f9ac:	2808      	cmp	r0, #8
 800f9ae:	f001 844f 	beq.w	8011250 <lv_draw_rect+0x1ed0>
        volatile bool top_only = false;
 800f9b2:	f04f 0800 	mov.w	r8, #0
        if(dsc->border_side == LV_BORDER_SIDE_TOP) top_only = true;
 800f9b6:	2802      	cmp	r0, #2
        volatile bool top_only = false;
 800f9b8:	f88d 8048 	strb.w	r8, [sp, #72]	; 0x48
        volatile bool bottom_only = false;
 800f9bc:	f88d 8050 	strb.w	r8, [sp, #80]	; 0x50
        if(dsc->border_side == LV_BORDER_SIDE_TOP) top_only = true;
 800f9c0:	f041 83d3 	bne.w	801116a <lv_draw_rect+0x1dea>
 800f9c4:	2201      	movs	r2, #1
 800f9c6:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
        volatile bool normal = !top_only && !bottom_only ? true : false;
 800f9ca:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 800f9ce:	2a00      	cmp	r2, #0
 800f9d0:	f041 838b 	bne.w	80110ea <lv_draw_rect+0x1d6a>
 800f9d4:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 800f9d8:	f082 0201 	eor.w	r2, r2, #1
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800f9dc:	f9bd c06e 	ldrsh.w	ip, [sp, #110]	; 0x6e
        volatile bool normal = !top_only && !bottom_only ? true : false;
 800f9e0:	f88d 2058 	strb.w	r2, [sp, #88]	; 0x58
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800f9e4:	4565      	cmp	r5, ip
 800f9e6:	dc56      	bgt.n	800fa96 <lv_draw_rect+0x716>
                _lv_blend_fill(clip, &fill_area, color, mask_buf + buf_ofs, mask_res, opa, blend_mode);
 800f9e8:	44b8      	add	r8, r7
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800f9ea:	461a      	mov	r2, r3
                _lv_blend_fill(clip, &fill_area, color, mask_buf + buf_ofs, mask_res, opa, blend_mode);
 800f9ec:	e9cd 4906 	strd	r4, r9, [sp, #24]
 800f9f0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f9f4:	f8cd b020 	str.w	fp, [sp, #32]
 800f9f8:	46f3      	mov	fp, lr
            if(normal ||
 800f9fa:	f89d e058 	ldrb.w	lr, [sp, #88]	; 0x58
                _lv_memset_ff(mask_buf, draw_area_w);
 800f9fe:	4631      	mov	r1, r6
 800fa00:	4638      	mov	r0, r7
            if(normal ||
 800fa02:	f1be 0f00 	cmp.w	lr, #0
 800fa06:	d118      	bne.n	800fa3a <lv_draw_rect+0x6ba>
               (top_only && fill_area.y1 <= coords->y1 + corner_size) ||
 800fa08:	f89d e048 	ldrb.w	lr, [sp, #72]	; 0x48
            if(normal ||
 800fa0c:	f1be 0f00 	cmp.w	lr, #0
 800fa10:	d006      	beq.n	800fa20 <lv_draw_rect+0x6a0>
               (top_only && fill_area.y1 <= coords->y1 + corner_size) ||
 800fa12:	9c05      	ldr	r4, [sp, #20]
 800fa14:	f9b4 e002 	ldrsh.w	lr, [r4, #2]
 800fa18:	9c07      	ldr	r4, [sp, #28]
 800fa1a:	44a6      	add	lr, r4
 800fa1c:	4573      	cmp	r3, lr
 800fa1e:	dd0c      	ble.n	800fa3a <lv_draw_rect+0x6ba>
               (bottom_only && fill_area.y1 >= coords->y2 - corner_size)) {
 800fa20:	f89d e050 	ldrb.w	lr, [sp, #80]	; 0x50
               (top_only && fill_area.y1 <= coords->y1 + corner_size) ||
 800fa24:	f1be 0f00 	cmp.w	lr, #0
 800fa28:	d028      	beq.n	800fa7c <lv_draw_rect+0x6fc>
               (bottom_only && fill_area.y1 >= coords->y2 - corner_size)) {
 800fa2a:	9c05      	ldr	r4, [sp, #20]
 800fa2c:	f9b4 e006 	ldrsh.w	lr, [r4, #6]
 800fa30:	9c07      	ldr	r4, [sp, #28]
 800fa32:	ebae 0e04 	sub.w	lr, lr, r4
 800fa36:	4573      	cmp	r3, lr
 800fa38:	db20      	blt.n	800fa7c <lv_draw_rect+0x6fc>
                _lv_memset_ff(mask_buf, draw_area_w);
 800fa3a:	f005 ff03 	bl	8015844 <_lv_memset_ff>
                mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
 800fa3e:	f8bd c068 	ldrh.w	ip, [sp, #104]	; 0x68
 800fa42:	f8b9 2012 	ldrh.w	r2, [r9, #18]
 800fa46:	4633      	mov	r3, r6
 800fa48:	f8b9 1010 	ldrh.w	r1, [r9, #16]
 800fa4c:	4638      	mov	r0, r7
 800fa4e:	442a      	add	r2, r5
 800fa50:	4461      	add	r1, ip
 800fa52:	b212      	sxth	r2, r2
 800fa54:	b209      	sxth	r1, r1
 800fa56:	f7fe fe79 	bl	800e74c <lv_draw_mask_apply>
                _lv_blend_fill(clip, &fill_area, color, mask_buf + buf_ofs, mask_res, opa, blend_mode);
 800fa5a:	9b04      	ldr	r3, [sp, #16]
 800fa5c:	9906      	ldr	r1, [sp, #24]
 800fa5e:	465a      	mov	r2, fp
 800fa60:	9302      	str	r3, [sp, #8]
 800fa62:	4643      	mov	r3, r8
 800fa64:	9000      	str	r0, [sp, #0]
 800fa66:	4650      	mov	r0, sl
 800fa68:	9101      	str	r1, [sp, #4]
 800fa6a:	a91c      	add	r1, sp, #112	; 0x70
 800fa6c:	f7fa f976 	bl	8009d5c <_lv_blend_fill>
 800fa70:	f9bd 3072 	ldrsh.w	r3, [sp, #114]	; 0x72
 800fa74:	f9bd 2076 	ldrsh.w	r2, [sp, #118]	; 0x76
 800fa78:	f9bd c06e 	ldrsh.w	ip, [sp, #110]	; 0x6e
            fill_area.y1++;
 800fa7c:	3301      	adds	r3, #1
            fill_area.y2++;
 800fa7e:	3201      	adds	r2, #1
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800fa80:	3501      	adds	r5, #1
            fill_area.y1++;
 800fa82:	b21b      	sxth	r3, r3
            fill_area.y2++;
 800fa84:	b212      	sxth	r2, r2
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800fa86:	4565      	cmp	r5, ip
            fill_area.y1++;
 800fa88:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
            fill_area.y2++;
 800fa8c:	f8ad 2076 	strh.w	r2, [sp, #118]	; 0x76
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800fa90:	ddb3      	ble.n	800f9fa <lv_draw_rect+0x67a>
 800fa92:	f8dd b020 	ldr.w	fp, [sp, #32]
        lv_draw_mask_remove_id(mask_rin_id);
 800fa96:	ee18 0a90 	vmov	r0, s17
 800fa9a:	f7fe fe81 	bl	800e7a0 <lv_draw_mask_remove_id>
        lv_draw_mask_remove_id(mask_rout_id);
 800fa9e:	ee18 0a10 	vmov	r0, s16
 800faa2:	f7fe fe7d 	bl	800e7a0 <lv_draw_mask_remove_id>
        _lv_mem_buf_release(mask_buf);
 800faa6:	4638      	mov	r0, r7
 800faa8:	f005 fa16 	bl	8014ed8 <_lv_mem_buf_release>
    if(dsc->value_str == NULL) return;
 800faac:	f8db 404c 	ldr.w	r4, [fp, #76]	; 0x4c
 800fab0:	2c00      	cmp	r4, #0
 800fab2:	d062      	beq.n	800fb7a <lv_draw_rect+0x7fa>
    if(dsc->value_opa <= LV_OPA_MIN) return;
 800fab4:	f89b 3054 	ldrb.w	r3, [fp, #84]	; 0x54
 800fab8:	2b02      	cmp	r3, #2
 800faba:	d95e      	bls.n	800fb7a <lv_draw_rect+0x7fa>
    _lv_txt_get_size(&s, str, dsc->value_font, dsc->value_letter_space, dsc->value_line_space, LV_COORD_MAX,
 800fabc:	f9bb 3062 	ldrsh.w	r3, [fp, #98]	; 0x62
 800fac0:	2500      	movs	r5, #0
 800fac2:	f647 4218 	movw	r2, #31768	; 0x7c18
 800fac6:	4621      	mov	r1, r4
 800fac8:	9502      	str	r5, [sp, #8]
 800faca:	a81a      	add	r0, sp, #104	; 0x68
 800facc:	e9cd 3200 	strd	r3, r2, [sp]
 800fad0:	f9bb 3060 	ldrsh.w	r3, [fp, #96]	; 0x60
 800fad4:	f8db 2050 	ldr.w	r2, [fp, #80]	; 0x50
 800fad8:	f006 fb24 	bl	8016124 <_lv_txt_get_size>
    value_area.x2 = s.x - 1;
 800fadc:	f8bd 0068 	ldrh.w	r0, [sp, #104]	; 0x68
    value_area.y2 = s.y - 1;
 800fae0:	f8bd 206a 	ldrh.w	r2, [sp, #106]	; 0x6a
    _lv_area_align(coords, &value_area, dsc->value_align, &p_align);
 800fae4:	a921      	add	r1, sp, #132	; 0x84
    value_area.x2 = s.x - 1;
 800fae6:	3801      	subs	r0, #1
    _lv_area_align(coords, &value_area, dsc->value_align, &p_align);
 800fae8:	ab1c      	add	r3, sp, #112	; 0x70
    value_area.y2 = s.y - 1;
 800faea:	3a01      	subs	r2, #1
    value_area.x1 = 0;
 800faec:	9521      	str	r5, [sp, #132]	; 0x84
    value_area.x2 = s.x - 1;
 800faee:	f8ad 0088 	strh.w	r0, [sp, #136]	; 0x88
    value_area.y2 = s.y - 1;
 800faf2:	f8ad 208a 	strh.w	r2, [sp, #138]	; 0x8a
    _lv_area_align(coords, &value_area, dsc->value_align, &p_align);
 800faf6:	9805      	ldr	r0, [sp, #20]
 800faf8:	f89b 2064 	ldrb.w	r2, [fp, #100]	; 0x64
 800fafc:	f004 fbe0 	bl	80142c0 <_lv_area_align>
    value_area.x1 += p_align.x + dsc->value_ofs_x;
 800fb00:	f8bb 105c 	ldrh.w	r1, [fp, #92]	; 0x5c
 800fb04:	f8bd 2070 	ldrh.w	r2, [sp, #112]	; 0x70
    lv_draw_label_dsc_init(&label_dsc);
 800fb08:	a828      	add	r0, sp, #160	; 0xa0
    value_area.y1 += p_align.y + dsc->value_ofs_y;
 800fb0a:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
    value_area.x1 += p_align.x + dsc->value_ofs_x;
 800fb0e:	440a      	add	r2, r1
    value_area.y1 += p_align.y + dsc->value_ofs_y;
 800fb10:	f8bb 105e 	ldrh.w	r1, [fp, #94]	; 0x5e
    value_area.x1 += p_align.x + dsc->value_ofs_x;
 800fb14:	f8bd 6084 	ldrh.w	r6, [sp, #132]	; 0x84
    value_area.y1 += p_align.y + dsc->value_ofs_y;
 800fb18:	440b      	add	r3, r1
    value_area.x1 += p_align.x + dsc->value_ofs_x;
 800fb1a:	b292      	uxth	r2, r2
    value_area.x2 += p_align.x + dsc->value_ofs_x;
 800fb1c:	f8bd 1088 	ldrh.w	r1, [sp, #136]	; 0x88
    value_area.y2 += p_align.y + dsc->value_ofs_y;
 800fb20:	f8bd 708a 	ldrh.w	r7, [sp, #138]	; 0x8a
    value_area.x1 += p_align.x + dsc->value_ofs_x;
 800fb24:	4416      	add	r6, r2
    value_area.y1 += p_align.y + dsc->value_ofs_y;
 800fb26:	b29b      	uxth	r3, r3
    value_area.x2 += p_align.x + dsc->value_ofs_x;
 800fb28:	440a      	add	r2, r1
    value_area.y1 += p_align.y + dsc->value_ofs_y;
 800fb2a:	f8bd 1086 	ldrh.w	r1, [sp, #134]	; 0x86
    value_area.x1 += p_align.x + dsc->value_ofs_x;
 800fb2e:	f8ad 6084 	strh.w	r6, [sp, #132]	; 0x84
    value_area.y1 += p_align.y + dsc->value_ofs_y;
 800fb32:	4419      	add	r1, r3
    value_area.y2 += p_align.y + dsc->value_ofs_y;
 800fb34:	443b      	add	r3, r7
    value_area.x2 += p_align.x + dsc->value_ofs_x;
 800fb36:	f8ad 2088 	strh.w	r2, [sp, #136]	; 0x88
    value_area.y1 += p_align.y + dsc->value_ofs_y;
 800fb3a:	f8ad 1086 	strh.w	r1, [sp, #134]	; 0x86
    value_area.y2 += p_align.y + dsc->value_ofs_y;
 800fb3e:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
    lv_draw_label_dsc_init(&label_dsc);
 800fb42:	f7fc fb4b 	bl	800c1dc <lv_draw_label_dsc_init>
    label_dsc.font = dsc->value_font;
 800fb46:	f8db e050 	ldr.w	lr, [fp, #80]	; 0x50
    lv_draw_label(&value_area, clip, &label_dsc, str, NULL);
 800fb4a:	4623      	mov	r3, r4
    label_dsc.letter_space = dsc->value_letter_space;
 800fb4c:	f8bb c060 	ldrh.w	ip, [fp, #96]	; 0x60
    lv_draw_label(&value_area, clip, &label_dsc, str, NULL);
 800fb50:	aa28      	add	r2, sp, #160	; 0xa0
    label_dsc.line_space = dsc->value_line_space;
 800fb52:	f8bb 7062 	ldrh.w	r7, [fp, #98]	; 0x62
    lv_draw_label(&value_area, clip, &label_dsc, str, NULL);
 800fb56:	a821      	add	r0, sp, #132	; 0x84
    label_dsc.color = dsc->value_color;
 800fb58:	f8db 6058 	ldr.w	r6, [fp, #88]	; 0x58
    lv_draw_label(&value_area, clip, &label_dsc, str, NULL);
 800fb5c:	4651      	mov	r1, sl
 800fb5e:	9500      	str	r5, [sp, #0]
    label_dsc.opa = dsc->value_opa;
 800fb60:	f89b 4054 	ldrb.w	r4, [fp, #84]	; 0x54
    label_dsc.font = dsc->value_font;
 800fb64:	f8cd e0ac 	str.w	lr, [sp, #172]	; 0xac
    label_dsc.letter_space = dsc->value_letter_space;
 800fb68:	f8ad c0b4 	strh.w	ip, [sp, #180]	; 0xb4
    label_dsc.line_space = dsc->value_line_space;
 800fb6c:	f8ad 70b2 	strh.w	r7, [sp, #178]	; 0xb2
    label_dsc.color = dsc->value_color;
 800fb70:	9628      	str	r6, [sp, #160]	; 0xa0
    label_dsc.opa = dsc->value_opa;
 800fb72:	f88d 40b0 	strb.w	r4, [sp, #176]	; 0xb0
    lv_draw_label(&value_area, clip, &label_dsc, str, NULL);
 800fb76:	f7fc fb4d 	bl	800c214 <lv_draw_label>
    if(dsc->outline_opa <= LV_OPA_MIN) return;
 800fb7a:	f89b 3028 	ldrb.w	r3, [fp, #40]	; 0x28
 800fb7e:	2b02      	cmp	r3, #2
 800fb80:	d94c      	bls.n	800fc1c <lv_draw_rect+0x89c>
    if(dsc->outline_width == 0) return;
 800fb82:	f9bb 4024 	ldrsh.w	r4, [fp, #36]	; 0x24
 800fb86:	2c00      	cmp	r4, #0
 800fb88:	d048      	beq.n	800fc1c <lv_draw_rect+0x89c>
 800fb8a:	ae21      	add	r6, sp, #132	; 0x84
 800fb8c:	9a05      	ldr	r2, [sp, #20]
    draw_full_border(&area_inner, &area_outer, clip, dsc->radius, true, dsc->outline_color, dsc->outline_opa,
 800fb8e:	f04f 0c01 	mov.w	ip, #1
 800fb92:	af28      	add	r7, sp, #160	; 0xa0
 800fb94:	6810      	ldr	r0, [r2, #0]
 800fb96:	4635      	mov	r5, r6
 800fb98:	6851      	ldr	r1, [r2, #4]
    area_outer.x1 -= dsc->outline_width;
 800fb9a:	b2a4      	uxth	r4, r4
    draw_full_border(&area_inner, &area_outer, clip, dsc->radius, true, dsc->outline_color, dsc->outline_opa,
 800fb9c:	9302      	str	r3, [sp, #8]
 800fb9e:	4652      	mov	r2, sl
    area_inner.x1 -= dsc->outline_pad;
 800fba0:	f8bb 3026 	ldrh.w	r3, [fp, #38]	; 0x26
 800fba4:	c503      	stmia	r5!, {r0, r1}
    draw_full_border(&area_inner, &area_outer, clip, dsc->radius, true, dsc->outline_color, dsc->outline_opa,
 800fba6:	f8cd c000 	str.w	ip, [sp]
    area_inner.x1 -= dsc->outline_pad;
 800fbaa:	f8bd 5084 	ldrh.w	r5, [sp, #132]	; 0x84
    area_inner.y2 += dsc->outline_pad;
 800fbae:	f8bd c08a 	ldrh.w	ip, [sp, #138]	; 0x8a
    area_inner.y1 -= dsc->outline_pad;
 800fbb2:	f8bd 0086 	ldrh.w	r0, [sp, #134]	; 0x86
    area_inner.x1 -= dsc->outline_pad;
 800fbb6:	1aed      	subs	r5, r5, r3
    area_inner.x2 += dsc->outline_pad;
 800fbb8:	f8bd 1088 	ldrh.w	r1, [sp, #136]	; 0x88
    area_inner.y1 -= dsc->outline_pad;
 800fbbc:	1ac0      	subs	r0, r0, r3
    area_inner.x1 -= dsc->outline_pad;
 800fbbe:	f8ad 5084 	strh.w	r5, [sp, #132]	; 0x84
    area_inner.x2 += dsc->outline_pad;
 800fbc2:	4419      	add	r1, r3
    area_inner.y2 += dsc->outline_pad;
 800fbc4:	4463      	add	r3, ip
    area_inner.y1 -= dsc->outline_pad;
 800fbc6:	f8ad 0086 	strh.w	r0, [sp, #134]	; 0x86
    area_inner.y2 += dsc->outline_pad;
 800fbca:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
    draw_full_border(&area_inner, &area_outer, clip, dsc->radius, true, dsc->outline_color, dsc->outline_opa,
 800fbce:	f89b 3029 	ldrb.w	r3, [fp, #41]	; 0x29
    area_inner.x2 += dsc->outline_pad;
 800fbd2:	f8ad 1088 	strh.w	r1, [sp, #136]	; 0x88
LV_ATTRIBUTE_FAST_MEM static inline void * _lv_memcpy_small(void * dst, const void * src, size_t len)
{
    uint8_t * d8 = (uint8_t *)dst;
    const uint8_t * s8 = (const uint8_t *)src;

    while(len) {
 800fbd6:	e896 0003 	ldmia.w	r6, {r0, r1}
    draw_full_border(&area_inner, &area_outer, clip, dsc->radius, true, dsc->outline_color, dsc->outline_opa,
 800fbda:	9303      	str	r3, [sp, #12]
 800fbdc:	f8db 5020 	ldr.w	r5, [fp, #32]
 800fbe0:	f9bb 3000 	ldrsh.w	r3, [fp]
 800fbe4:	9501      	str	r5, [sp, #4]
 800fbe6:	e887 0003 	stmia.w	r7, {r0, r1}
 800fbea:	4639      	mov	r1, r7
    area_outer.x1 -= dsc->outline_width;
 800fbec:	f8bd c0a0 	ldrh.w	ip, [sp, #160]	; 0xa0
    area_outer.x2 += dsc->outline_width;
 800fbf0:	f8bd 70a4 	ldrh.w	r7, [sp, #164]	; 0xa4
    draw_full_border(&area_inner, &area_outer, clip, dsc->radius, true, dsc->outline_color, dsc->outline_opa,
 800fbf4:	4630      	mov	r0, r6
    area_outer.y1 -= dsc->outline_width;
 800fbf6:	f8bd 50a2 	ldrh.w	r5, [sp, #162]	; 0xa2
    area_outer.x1 -= dsc->outline_width;
 800fbfa:	ebac 0c04 	sub.w	ip, ip, r4
    area_outer.y2 += dsc->outline_width;
 800fbfe:	f8bd e0a6 	ldrh.w	lr, [sp, #166]	; 0xa6
    area_outer.x2 += dsc->outline_width;
 800fc02:	19e6      	adds	r6, r4, r7
    area_outer.y1 -= dsc->outline_width;
 800fc04:	1b2d      	subs	r5, r5, r4
    area_outer.x1 -= dsc->outline_width;
 800fc06:	f8ad c0a0 	strh.w	ip, [sp, #160]	; 0xa0
    area_outer.y2 += dsc->outline_width;
 800fc0a:	4474      	add	r4, lr
    area_outer.x2 += dsc->outline_width;
 800fc0c:	f8ad 60a4 	strh.w	r6, [sp, #164]	; 0xa4
    area_outer.y1 -= dsc->outline_width;
 800fc10:	f8ad 50a2 	strh.w	r5, [sp, #162]	; 0xa2
    area_outer.y2 += dsc->outline_width;
 800fc14:	f8ad 40a6 	strh.w	r4, [sp, #166]	; 0xa6
    draw_full_border(&area_inner, &area_outer, clip, dsc->radius, true, dsc->outline_color, dsc->outline_opa,
 800fc18:	f7ff f8ec 	bl	800edf4 <draw_full_border>
}
 800fc1c:	b033      	add	sp, #204	; 0xcc
 800fc1e:	ecbd 8b04 	vpop	{d8-d9}
 800fc22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc26:	fb04 f404 	mul.w	r4, r4, r4
    for(x = 0; x < size * size; x++) {
 800fc2a:	2c00      	cmp	r4, #0
 800fc2c:	dd0a      	ble.n	800fc44 <lv_draw_rect+0x8c4>
 800fc2e:	9a08      	ldr	r2, [sp, #32]
 800fc30:	1e93      	subs	r3, r2, #2
 800fc32:	3a01      	subs	r2, #1
 800fc34:	eb03 0444 	add.w	r4, r3, r4, lsl #1
        res_buf[x] = sh_buf[x];
 800fc38:	f833 1f02 	ldrh.w	r1, [r3, #2]!
    for(x = 0; x < size * size; x++) {
 800fc3c:	429c      	cmp	r4, r3
        res_buf[x] = sh_buf[x];
 800fc3e:	f802 1f01 	strb.w	r1, [r2, #1]!
    for(x = 0; x < size * size; x++) {
 800fc42:	d1f9      	bne.n	800fc38 <lv_draw_rect+0x8b8>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800fc44:	f8bd 2056 	ldrh.w	r2, [sp, #86]	; 0x56
    lv_coord_t h_half = sh_area.y1 + lv_area_get_height(&sh_area) / 2;
 800fc48:	f8bd 1052 	ldrh.w	r1, [sp, #82]	; 0x52
 800fc4c:	3201      	adds	r2, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800fc4e:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800fc52:	1a52      	subs	r2, r2, r1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800fc54:	3301      	adds	r3, #1
 800fc56:	b212      	sxth	r2, r2
 800fc58:	2a00      	cmp	r2, #0
 800fc5a:	bfb8      	it	lt
 800fc5c:	3201      	addlt	r2, #1
 800fc5e:	eb01 0262 	add.w	r2, r1, r2, asr #1
    lv_coord_t w_half = sh_area.x1 + lv_area_get_width(&sh_area) / 2;
 800fc62:	f8bd 1050 	ldrh.w	r1, [sp, #80]	; 0x50
 800fc66:	1a5b      	subs	r3, r3, r1
    lv_coord_t h_half = sh_area.y1 + lv_area_get_height(&sh_area) / 2;
 800fc68:	b290      	uxth	r0, r2
 800fc6a:	b212      	sxth	r2, r2
    lv_coord_t w_half = sh_area.x1 + lv_area_get_width(&sh_area) / 2;
 800fc6c:	b21b      	sxth	r3, r3
    lv_coord_t h_half = sh_area.y1 + lv_area_get_height(&sh_area) / 2;
 800fc6e:	9011      	str	r0, [sp, #68]	; 0x44
 800fc70:	920c      	str	r2, [sp, #48]	; 0x30
    lv_coord_t w_half = sh_area.x1 + lv_area_get_width(&sh_area) / 2;
 800fc72:	2b00      	cmp	r3, #0
 800fc74:	bfb8      	it	lt
 800fc76:	3301      	addlt	r3, #1
 800fc78:	eb01 0363 	add.w	r3, r1, r3, asr #1
 800fc7c:	b29a      	uxth	r2, r3
 800fc7e:	b21b      	sxth	r3, r3
 800fc80:	9210      	str	r2, [sp, #64]	; 0x40
 800fc82:	930f      	str	r3, [sp, #60]	; 0x3c
    if(lv_draw_mask_get_cnt() > 0) simple_mode = false;
 800fc84:	f7fe fe46 	bl	800e914 <lv_draw_mask_get_cnt>
 800fc88:	2800      	cmp	r0, #0
 800fc8a:	f000 84a6 	beq.w	80105da <lv_draw_rect+0x125a>
 800fc8e:	2300      	movs	r3, #0
 800fc90:	930b      	str	r3, [sp, #44]	; 0x2c
 800fc92:	f8bd 0054 	ldrh.w	r0, [sp, #84]	; 0x54
    bool has_com = _lv_area_intersect(&ca, &a, clip);
 800fc96:	ac1a      	add	r4, sp, #104	; 0x68
 800fc98:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 800fc9c:	3001      	adds	r0, #1
    lv_draw_mask_radius_init(&mask_rout_param, &bg_coords, r_bg, true);
 800fc9e:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
    a.x1 = a.x2 - corner_size + 1;
 800fca2:	f8bd 9018 	ldrh.w	r9, [sp, #24]
 800fca6:	1ac0      	subs	r0, r0, r3
    lv_draw_mask_radius_init(&mask_rout_param, &bg_coords, r_bg, true);
 800fca8:	ee08 6a10 	vmov	s16, r6
    lv_opa_t * mask_buf = _lv_mem_buf_get(lv_area_get_width(&sh_area));
 800fcac:	b200      	sxth	r0, r0
 800fcae:	f005 fc3b 	bl	8015528 <_lv_mem_buf_get>
    lv_draw_mask_radius_init(&mask_rout_param, &bg_coords, r_bg, true);
 800fcb2:	4632      	mov	r2, r6
 800fcb4:	9e04      	ldr	r6, [sp, #16]
 800fcb6:	2301      	movs	r3, #1
 800fcb8:	9909      	ldr	r1, [sp, #36]	; 0x24
    lv_opa_t * mask_buf = _lv_mem_buf_get(lv_area_get_width(&sh_area));
 800fcba:	4605      	mov	r5, r0
    lv_draw_mask_radius_init(&mask_rout_param, &bg_coords, r_bg, true);
 800fcbc:	4630      	mov	r0, r6
 800fcbe:	f7fe ff0f 	bl	800eae0 <lv_draw_mask_radius_init>
    int16_t mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
 800fcc2:	4630      	mov	r0, r6
 800fcc4:	2100      	movs	r1, #0
 800fcc6:	f7fe fce3 	bl	800e690 <lv_draw_mask_add>
    a.y1 = sh_area.y1;
 800fcca:	f9bd 2052 	ldrsh.w	r2, [sp, #82]	; 0x52
    int16_t mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
 800fcce:	4603      	mov	r3, r0
    a.x2 = sh_area.x2;
 800fcd0:	f9bd 7054 	ldrsh.w	r7, [sp, #84]	; 0x54
    a.y1 = sh_area.y1;
 800fcd4:	f8ad 206a 	strh.w	r2, [sp, #106]	; 0x6a
    bool has_com = _lv_area_intersect(&ca, &a, clip);
 800fcd8:	4621      	mov	r1, r4
    a.x1 = a.x2 - corner_size + 1;
 800fcda:	1c7e      	adds	r6, r7, #1
    int16_t mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
 800fcdc:	ee08 3a90 	vmov	s17, r3
    a.y2 = a.y1 + corner_size - 1;
 800fce0:	1e53      	subs	r3, r2, #1
    bool has_com = _lv_area_intersect(&ca, &a, clip);
 800fce2:	a81c      	add	r0, sp, #112	; 0x70
    a.x1 = a.x2 - corner_size + 1;
 800fce4:	eba6 0609 	sub.w	r6, r6, r9
    bool has_com = _lv_area_intersect(&ca, &a, clip);
 800fce8:	4652      	mov	r2, sl
    a.y2 = a.y1 + corner_size - 1;
 800fcea:	444b      	add	r3, r9
    a.x2 = sh_area.x2;
 800fcec:	f8ad 706c 	strh.w	r7, [sp, #108]	; 0x6c
    a.x1 = a.x2 - corner_size + 1;
 800fcf0:	f8ad 6068 	strh.w	r6, [sp, #104]	; 0x68
    a.y2 = a.y1 + corner_size - 1;
 800fcf4:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
    bool has_com = _lv_area_intersect(&ca, &a, clip);
 800fcf8:	f004 f922 	bl	8013f40 <_lv_area_intersect>
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
 800fcfc:	2800      	cmp	r0, #0
 800fcfe:	f041 803d 	bne.w	8010d7c <lv_draw_rect+0x19fc>
    a.x1 = a.x2 - corner_size + 1;
 800fd02:	f8bd 6054 	ldrh.w	r6, [sp, #84]	; 0x54
    has_com = _lv_area_intersect(&ca, &a, clip);
 800fd06:	4652      	mov	r2, sl
    a.y1 = sh_area.y2 - corner_size + 1;
 800fd08:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
    has_com = _lv_area_intersect(&ca, &a, clip);
 800fd0c:	4621      	mov	r1, r4
    a.x1 = a.x2 - corner_size + 1;
 800fd0e:	3601      	adds	r6, #1
    a.x2 = sh_area.x2;
 800fd10:	9815      	ldr	r0, [sp, #84]	; 0x54
    a.y1 = sh_area.y2 - corner_size + 1;
 800fd12:	3301      	adds	r3, #1
    a.x1 = a.x2 - corner_size + 1;
 800fd14:	eba6 0609 	sub.w	r6, r6, r9
    a.x2 = sh_area.x2;
 800fd18:	901b      	str	r0, [sp, #108]	; 0x6c
    a.y1 = sh_area.y2 - corner_size + 1;
 800fd1a:	eba3 0309 	sub.w	r3, r3, r9
    has_com = _lv_area_intersect(&ca, &a, clip);
 800fd1e:	a81c      	add	r0, sp, #112	; 0x70
    a.x1 = a.x2 - corner_size + 1;
 800fd20:	f8ad 6068 	strh.w	r6, [sp, #104]	; 0x68
    a.y1 = sh_area.y2 - corner_size + 1;
 800fd24:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
    has_com = _lv_area_intersect(&ca, &a, clip);
 800fd28:	f004 f90a 	bl	8013f40 <_lv_area_intersect>
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
 800fd2c:	2800      	cmp	r0, #0
 800fd2e:	f040 84df 	bne.w	80106f0 <lv_draw_rect+0x1370>
    a.x2 = sh_area.x2;
 800fd32:	f9bd 7054 	ldrsh.w	r7, [sp, #84]	; 0x54
    has_com = _lv_area_intersect(&ca, &a, clip);
 800fd36:	4652      	mov	r2, sl
    a.y1 = sh_area.y1 + corner_size;
 800fd38:	f8bd 0052 	ldrh.w	r0, [sp, #82]	; 0x52
    has_com = _lv_area_intersect(&ca, &a, clip);
 800fd3c:	4621      	mov	r1, r4
    a.x1 = a.x2 - corner_size + 1;
 800fd3e:	1c7e      	adds	r6, r7, #1
    a.y2 = sh_area.y2 - corner_size;
 800fd40:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
    a.y1 = sh_area.y1 + corner_size;
 800fd44:	4448      	add	r0, r9
    a.x2 = sh_area.x2;
 800fd46:	f8ad 706c 	strh.w	r7, [sp, #108]	; 0x6c
    a.x1 = a.x2 - corner_size + 1;
 800fd4a:	eba6 0609 	sub.w	r6, r6, r9
    a.y2 = sh_area.y2 - corner_size;
 800fd4e:	eba3 0309 	sub.w	r3, r3, r9
    a.y1 = sh_area.y1 + corner_size;
 800fd52:	f8ad 006a 	strh.w	r0, [sp, #106]	; 0x6a
    has_com = _lv_area_intersect(&ca, &a, clip);
 800fd56:	a81c      	add	r0, sp, #112	; 0x70
    a.x1 = a.x2 - corner_size + 1;
 800fd58:	f8ad 6068 	strh.w	r6, [sp, #104]	; 0x68
    a.y2 = sh_area.y2 - corner_size;
 800fd5c:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
    has_com = _lv_area_intersect(&ca, &a, clip);
 800fd60:	f004 f8ee 	bl	8013f40 <_lv_area_intersect>
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
 800fd64:	2800      	cmp	r0, #0
 800fd66:	f040 879e 	bne.w	8010ca6 <lv_draw_rect+0x1926>
    for(y = 0; y < corner_size; y++) {
 800fd6a:	9a06      	ldr	r2, [sp, #24]
 800fd6c:	2a00      	cmp	r2, #0
 800fd6e:	dd19      	ble.n	800fda4 <lv_draw_rect+0xa24>
 800fd70:	ea5f 0e62 	movs.w	lr, r2, asr #1
 800fd74:	d016      	beq.n	800fda4 <lv_draw_rect+0xa24>
 800fd76:	f10e 3eff 	add.w	lr, lr, #4294967295
    sh_buf = _lv_mem_buf_get(corner_size * corner_size * sizeof(uint16_t));
 800fd7a:	9b08      	ldr	r3, [sp, #32]
        for(x = 0; x < corner_size / 2; x++) {
 800fd7c:	2000      	movs	r0, #0
 800fd7e:	4690      	mov	r8, r2
 800fd80:	eb03 0608 	add.w	r6, r3, r8
 800fd84:	1e5a      	subs	r2, r3, #1
 800fd86:	4473      	add	r3, lr
 800fd88:	4631      	mov	r1, r6
            lv_opa_t tmp = sh_buf_tmp[x];
 800fd8a:	f812 7f01 	ldrb.w	r7, [r2, #1]!
            sh_buf_tmp[x] = sh_buf_tmp[corner_size - x - 1];
 800fd8e:	f811 cd01 	ldrb.w	ip, [r1, #-1]!
        for(x = 0; x < corner_size / 2; x++) {
 800fd92:	429a      	cmp	r2, r3
            sh_buf_tmp[x] = sh_buf_tmp[corner_size - x - 1];
 800fd94:	f882 c000 	strb.w	ip, [r2]
            sh_buf_tmp[corner_size - x - 1] = tmp;
 800fd98:	700f      	strb	r7, [r1, #0]
        for(x = 0; x < corner_size / 2; x++) {
 800fd9a:	d1f6      	bne.n	800fd8a <lv_draw_rect+0xa0a>
    for(y = 0; y < corner_size; y++) {
 800fd9c:	3001      	adds	r0, #1
        sh_buf_tmp += corner_size;
 800fd9e:	4633      	mov	r3, r6
    for(y = 0; y < corner_size; y++) {
 800fda0:	4580      	cmp	r8, r0
 800fda2:	d1ed      	bne.n	800fd80 <lv_draw_rect+0xa00>
    a.x2 = a.x1 + corner_size - 1;
 800fda4:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
    has_com = _lv_area_intersect(&ca, &a, clip);
 800fda8:	4652      	mov	r2, sl
    a.y1 = sh_area.y1;
 800fdaa:	f9bd 3052 	ldrsh.w	r3, [sp, #82]	; 0x52
    has_com = _lv_area_intersect(&ca, &a, clip);
 800fdae:	4621      	mov	r1, r4
    a.x2 = a.x1 + corner_size - 1;
 800fdb0:	3e01      	subs	r6, #1
    a.x1 = sh_area.x1;
 800fdb2:	9814      	ldr	r0, [sp, #80]	; 0x50
    a.y2 = a.y1 + corner_size - 1;
 800fdb4:	3b01      	subs	r3, #1
    a.x2 = a.x1 + corner_size - 1;
 800fdb6:	444e      	add	r6, r9
    a.x1 = sh_area.x1;
 800fdb8:	901a      	str	r0, [sp, #104]	; 0x68
    a.y2 = a.y1 + corner_size - 1;
 800fdba:	444b      	add	r3, r9
    has_com = _lv_area_intersect(&ca, &a, clip);
 800fdbc:	a81c      	add	r0, sp, #112	; 0x70
    a.x2 = a.x1 + corner_size - 1;
 800fdbe:	f8ad 606c 	strh.w	r6, [sp, #108]	; 0x6c
    a.y2 = a.y1 + corner_size - 1;
 800fdc2:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
    has_com = _lv_area_intersect(&ca, &a, clip);
 800fdc6:	f004 f8bb 	bl	8013f40 <_lv_area_intersect>
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
 800fdca:	2800      	cmp	r0, #0
 800fdcc:	f040 8680 	bne.w	8010ad0 <lv_draw_rect+0x1750>
    a.x1 = sh_area.x1;
 800fdd0:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	; 0x50
    has_com = _lv_area_intersect(&ca, &a, clip);
 800fdd4:	4652      	mov	r2, sl
    a.y1 = sh_area.y2 - corner_size + 1;
 800fdd6:	f9bd 0056 	ldrsh.w	r0, [sp, #86]	; 0x56
    has_com = _lv_area_intersect(&ca, &a, clip);
 800fdda:	4621      	mov	r1, r4
    a.x2 = a.x1 + corner_size - 1;
 800fddc:	1e5e      	subs	r6, r3, #1
    a.x1 = sh_area.x1;
 800fdde:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    a.y1 = sh_area.y2 - corner_size + 1;
 800fde2:	1c43      	adds	r3, r0, #1
    a.y2 = sh_area.y2;
 800fde4:	f8ad 006e 	strh.w	r0, [sp, #110]	; 0x6e
    a.x2 = a.x1 + corner_size - 1;
 800fde8:	444e      	add	r6, r9
    has_com = _lv_area_intersect(&ca, &a, clip);
 800fdea:	a81c      	add	r0, sp, #112	; 0x70
    a.y1 = sh_area.y2 - corner_size + 1;
 800fdec:	eba3 0309 	sub.w	r3, r3, r9
    a.x2 = a.x1 + corner_size - 1;
 800fdf0:	f8ad 606c 	strh.w	r6, [sp, #108]	; 0x6c
    a.y1 = sh_area.y2 - corner_size + 1;
 800fdf4:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
    has_com = _lv_area_intersect(&ca, &a, clip);
 800fdf8:	f004 f8a2 	bl	8013f40 <_lv_area_intersect>
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
 800fdfc:	2800      	cmp	r0, #0
 800fdfe:	f040 85e6 	bne.w	80109ce <lv_draw_rect+0x164e>
    a.x1 = sh_area.x1;
 800fe02:	f9bd 7050 	ldrsh.w	r7, [sp, #80]	; 0x50
    has_com = _lv_area_intersect(&ca, &a, clip);
 800fe06:	4652      	mov	r2, sl
    a.y1 = sh_area.y1 + corner_size;
 800fe08:	f8bd 0052 	ldrh.w	r0, [sp, #82]	; 0x52
    has_com = _lv_area_intersect(&ca, &a, clip);
 800fe0c:	4621      	mov	r1, r4
    a.x2 = a.x1 + corner_size - 1;
 800fe0e:	1e7e      	subs	r6, r7, #1
    a.y2 = sh_area.y2 - corner_size;
 800fe10:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
    a.y1 = sh_area.y1 + corner_size;
 800fe14:	4448      	add	r0, r9
    a.x1 = sh_area.x1;
 800fe16:	f8ad 7068 	strh.w	r7, [sp, #104]	; 0x68
    a.x2 = a.x1 + corner_size - 1;
 800fe1a:	444e      	add	r6, r9
    a.y2 = sh_area.y2 - corner_size;
 800fe1c:	eba3 0309 	sub.w	r3, r3, r9
    a.y1 = sh_area.y1 + corner_size;
 800fe20:	f8ad 006a 	strh.w	r0, [sp, #106]	; 0x6a
    has_com = _lv_area_intersect(&ca, &a, clip);
 800fe24:	a81c      	add	r0, sp, #112	; 0x70
    a.x2 = a.x1 + corner_size - 1;
 800fe26:	f8ad 606c 	strh.w	r6, [sp, #108]	; 0x6c
    a.y2 = sh_area.y2 - corner_size;
 800fe2a:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
    has_com = _lv_area_intersect(&ca, &a, clip);
 800fe2e:	f004 f887 	bl	8013f40 <_lv_area_intersect>
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
 800fe32:	2800      	cmp	r0, #0
 800fe34:	f040 86ca 	bne.w	8010bcc <lv_draw_rect+0x184c>
    a.y1 = sh_area.y1;
 800fe38:	f9bd 7052 	ldrsh.w	r7, [sp, #82]	; 0x52
    has_com = _lv_area_intersect(&ca, &a, clip);
 800fe3c:	4652      	mov	r2, sl
    a.x1 = sh_area.x1 + corner_size;
 800fe3e:	f8bd 0050 	ldrh.w	r0, [sp, #80]	; 0x50
    has_com = _lv_area_intersect(&ca, &a, clip);
 800fe42:	4621      	mov	r1, r4
    a.y2 = sh_area.y1 + corner_size - 1;
 800fe44:	1e7e      	subs	r6, r7, #1
    a.x2 = sh_area.x2 - corner_size;
 800fe46:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
    a.x1 = sh_area.x1 + corner_size;
 800fe4a:	4448      	add	r0, r9
    a.y1 = sh_area.y1;
 800fe4c:	f8ad 706a 	strh.w	r7, [sp, #106]	; 0x6a
    a.y2 = sh_area.y1 + corner_size - 1;
 800fe50:	444e      	add	r6, r9
    a.x2 = sh_area.x2 - corner_size;
 800fe52:	eba3 0309 	sub.w	r3, r3, r9
    a.x1 = sh_area.x1 + corner_size;
 800fe56:	f8ad 0068 	strh.w	r0, [sp, #104]	; 0x68
    has_com = _lv_area_intersect(&ca, &a, clip);
 800fe5a:	a81c      	add	r0, sp, #112	; 0x70
    a.y2 = sh_area.y1 + corner_size - 1;
 800fe5c:	f8ad 606e 	strh.w	r6, [sp, #110]	; 0x6e
    a.x2 = sh_area.x2 - corner_size;
 800fe60:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
    has_com = _lv_area_intersect(&ca, &a, clip);
 800fe64:	f004 f86c 	bl	8013f40 <_lv_area_intersect>
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
 800fe68:	2800      	cmp	r0, #0
 800fe6a:	f040 84bf 	bne.w	80107ec <lv_draw_rect+0x146c>
    a.y1 = sh_area.y2 - corner_size + 1;
 800fe6e:	f9bd 7056 	ldrsh.w	r7, [sp, #86]	; 0x56
    has_com = _lv_area_intersect(&ca, &a, clip);
 800fe72:	4652      	mov	r2, sl
    a.x1 = sh_area.x1 + corner_size;
 800fe74:	f8bd 0050 	ldrh.w	r0, [sp, #80]	; 0x50
    has_com = _lv_area_intersect(&ca, &a, clip);
 800fe78:	4621      	mov	r1, r4
    a.y1 = sh_area.y2 - corner_size + 1;
 800fe7a:	1c7e      	adds	r6, r7, #1
    a.x2 = sh_area.x2 - corner_size;
 800fe7c:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
    a.x1 = sh_area.x1 + corner_size;
 800fe80:	4448      	add	r0, r9
    a.y2 = sh_area.y2;
 800fe82:	f8ad 706e 	strh.w	r7, [sp, #110]	; 0x6e
    a.y1 = sh_area.y2 - corner_size + 1;
 800fe86:	eba6 0609 	sub.w	r6, r6, r9
    a.x2 = sh_area.x2 - corner_size;
 800fe8a:	eba3 0309 	sub.w	r3, r3, r9
    a.x1 = sh_area.x1 + corner_size;
 800fe8e:	f8ad 0068 	strh.w	r0, [sp, #104]	; 0x68
    has_com = _lv_area_intersect(&ca, &a, clip);
 800fe92:	a81c      	add	r0, sp, #112	; 0x70
    a.y1 = sh_area.y2 - corner_size + 1;
 800fe94:	f8ad 606a 	strh.w	r6, [sp, #106]	; 0x6a
    a.x2 = sh_area.x2 - corner_size;
 800fe98:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
    has_com = _lv_area_intersect(&ca, &a, clip);
 800fe9c:	f004 f850 	bl	8013f40 <_lv_area_intersect>
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
 800fea0:	2800      	cmp	r0, #0
 800fea2:	f040 851c 	bne.w	80108de <lv_draw_rect+0x155e>
    a.x2 = sh_area.x2 - corner_size;
 800fea6:	f8bd 1054 	ldrh.w	r1, [sp, #84]	; 0x54
    has_com = _lv_area_intersect(&ca, &a, clip);
 800feaa:	4652      	mov	r2, sl
    a.y1 = sh_area.y1 + corner_size;
 800feac:	f8bd 0052 	ldrh.w	r0, [sp, #82]	; 0x52
    a.x1 = sh_area.x1 + corner_size;
 800feb0:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
    a.x2 = sh_area.x2 - corner_size;
 800feb4:	eba1 0109 	sub.w	r1, r1, r9
    a.y2 = sh_area.y2 - corner_size;
 800feb8:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
    a.y1 = sh_area.y1 + corner_size;
 800febc:	4448      	add	r0, r9
    a.x1 = sh_area.x1 + corner_size;
 800febe:	444e      	add	r6, r9
    a.x2 = sh_area.x2 - corner_size;
 800fec0:	f8ad 106c 	strh.w	r1, [sp, #108]	; 0x6c
    a.y2 = sh_area.y2 - corner_size;
 800fec4:	eba3 0309 	sub.w	r3, r3, r9
    a.y1 = sh_area.y1 + corner_size;
 800fec8:	f8ad 006a 	strh.w	r0, [sp, #106]	; 0x6a
    has_com = _lv_area_intersect(&ca, &a, clip);
 800fecc:	4621      	mov	r1, r4
 800fece:	a81c      	add	r0, sp, #112	; 0x70
    a.x1 = sh_area.x1 + corner_size;
 800fed0:	f8ad 6068 	strh.w	r6, [sp, #104]	; 0x68
    a.y2 = sh_area.y2 - corner_size;
 800fed4:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
    has_com = _lv_area_intersect(&ca, &a, clip);
 800fed8:	f004 f832 	bl	8013f40 <_lv_area_intersect>
    if(has_com && simple_mode == false &&  _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
 800fedc:	2800      	cmp	r0, #0
 800fede:	d057      	beq.n	800ff90 <lv_draw_rect+0xc10>
 800fee0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	d054      	beq.n	800ff90 <lv_draw_rect+0xc10>
 800fee6:	4620      	mov	r0, r4
 800fee8:	ee18 2a10 	vmov	r2, s16
 800feec:	9909      	ldr	r1, [sp, #36]	; 0x24
 800feee:	f004 f99d 	bl	801422c <_lv_area_is_in>
 800fef2:	4604      	mov	r4, r0
 800fef4:	2800      	cmp	r0, #0
 800fef6:	d14b      	bne.n	800ff90 <lv_draw_rect+0xc10>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800fef8:	f8bd 7076 	ldrh.w	r7, [sp, #118]	; 0x76
 800fefc:	f8bd 2072 	ldrh.w	r2, [sp, #114]	; 0x72
 800ff00:	3701      	adds	r7, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800ff02:	f8bd 6074 	ldrh.w	r6, [sp, #116]	; 0x74
 800ff06:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800ff0a:	1abf      	subs	r7, r7, r2
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800ff0c:	3601      	adds	r6, #1
 800ff0e:	aa1c      	add	r2, sp, #112	; 0x70
 800ff10:	1af6      	subs	r6, r6, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800ff12:	b23f      	sxth	r7, r7
 800ff14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
        for(y = 0; y < h; y++) {
 800ff16:	2f00      	cmp	r7, #0
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800ff18:	b236      	sxth	r6, r6
        fa.y2 = fa.y1;
 800ff1a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ff1e:	e883 0003 	stmia.w	r3, {r0, r1}
 800ff22:	f8bd 3086 	ldrh.w	r3, [sp, #134]	; 0x86
 800ff26:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
        for(y = 0; y < h; y++) {
 800ff2a:	dd31      	ble.n	800ff90 <lv_draw_rect+0xc10>
            _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 800ff2c:	f04f 08ff 	mov.w	r8, #255	; 0xff
 800ff30:	f04f 0902 	mov.w	r9, #2
            _lv_memset(mask_buf, dsc->shadow_opa, w);
 800ff34:	4632      	mov	r2, r6
 800ff36:	f89b 1038 	ldrb.w	r1, [fp, #56]	; 0x38
 800ff3a:	4628      	mov	r0, r5
 800ff3c:	f005 fbba 	bl	80156b4 <_lv_memset>
            mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
 800ff40:	4633      	mov	r3, r6
 800ff42:	f9bd 2086 	ldrsh.w	r2, [sp, #134]	; 0x86
 800ff46:	4628      	mov	r0, r5
 800ff48:	f9bd 1084 	ldrsh.w	r1, [sp, #132]	; 0x84
 800ff4c:	f7fe fbfe 	bl	800e74c <lv_draw_mask_apply>
 800ff50:	4602      	mov	r2, r0
            _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 800ff52:	462b      	mov	r3, r5
 800ff54:	990a      	ldr	r1, [sp, #40]	; 0x28
            if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
 800ff56:	2a01      	cmp	r2, #1
            _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 800ff58:	4650      	mov	r0, sl
            if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
 800ff5a:	f000 8355 	beq.w	8010608 <lv_draw_rect+0x1288>
            _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 800ff5e:	f89b c039 	ldrb.w	ip, [fp, #57]	; 0x39
        for(y = 0; y < h; y++) {
 800ff62:	3401      	adds	r4, #1
            _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 800ff64:	e9cd 2800 	strd	r2, r8, [sp]
 800ff68:	f8cd c008 	str.w	ip, [sp, #8]
 800ff6c:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 800ff70:	f7f9 fef4 	bl	8009d5c <_lv_blend_fill>
            fa.y1++;
 800ff74:	f8bd 2086 	ldrh.w	r2, [sp, #134]	; 0x86
            fa.y2++;
 800ff78:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
        for(y = 0; y < h; y++) {
 800ff7c:	42bc      	cmp	r4, r7
            fa.y1++;
 800ff7e:	f102 0201 	add.w	r2, r2, #1
            fa.y2++;
 800ff82:	f103 0301 	add.w	r3, r3, #1
            fa.y1++;
 800ff86:	f8ad 2086 	strh.w	r2, [sp, #134]	; 0x86
            fa.y2++;
 800ff8a:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
        for(y = 0; y < h; y++) {
 800ff8e:	d1d1      	bne.n	800ff34 <lv_draw_rect+0xbb4>
    lv_draw_mask_remove_id(mask_rout_id);
 800ff90:	ee18 0a90 	vmov	r0, s17
 800ff94:	f7fe fc04 	bl	800e7a0 <lv_draw_mask_remove_id>
    _lv_mem_buf_release(mask_buf);
 800ff98:	4628      	mov	r0, r5
 800ff9a:	f004 ff9d 	bl	8014ed8 <_lv_mem_buf_release>
    _lv_mem_buf_release(sh_buf);
 800ff9e:	9808      	ldr	r0, [sp, #32]
 800ffa0:	f004 ff9a 	bl	8014ed8 <_lv_mem_buf_release>
    if(dsc->bg_opa <= LV_OPA_MIN) return;
 800ffa4:	f89b 8012 	ldrb.w	r8, [fp, #18]
 800ffa8:	f1b8 0f02 	cmp.w	r8, #2
 800ffac:	f67f aba3 	bls.w	800f6f6 <lv_draw_rect+0x376>
 800ffb0:	9b05      	ldr	r3, [sp, #20]
 800ffb2:	ac1a      	add	r4, sp, #104	; 0x68
    if(dsc->border_width > 1 && dsc->border_opa >= LV_OPA_MAX && dsc->radius != 0) {
 800ffb4:	f9bb 2018 	ldrsh.w	r2, [fp, #24]
 800ffb8:	6818      	ldr	r0, [r3, #0]
 800ffba:	6859      	ldr	r1, [r3, #4]
 800ffbc:	2a01      	cmp	r2, #1
 800ffbe:	4623      	mov	r3, r4
 800ffc0:	c303      	stmia	r3!, {r0, r1}
 800ffc2:	dd24      	ble.n	801000e <lv_draw_rect+0xc8e>
 800ffc4:	f89b 301c 	ldrb.w	r3, [fp, #28]
 800ffc8:	2bfc      	cmp	r3, #252	; 0xfc
 800ffca:	d920      	bls.n	801000e <lv_draw_rect+0xc8e>
 800ffcc:	f9bb 3000 	ldrsh.w	r3, [fp]
 800ffd0:	b1eb      	cbz	r3, 801000e <lv_draw_rect+0xc8e>
        coords_bg.x1 += (dsc->border_side & LV_BORDER_SIDE_LEFT) ? 1 : 0;
 800ffd2:	f8bb 301a 	ldrh.w	r3, [fp, #26]
 800ffd6:	f8bd 6068 	ldrh.w	r6, [sp, #104]	; 0x68
 800ffda:	f3c3 0280 	ubfx	r2, r3, #2, #1
        coords_bg.y1 += (dsc->border_side & LV_BORDER_SIDE_TOP) ? 1 : 0;
 800ffde:	f8bd 106a 	ldrh.w	r1, [sp, #106]	; 0x6a
 800ffe2:	f3c3 0040 	ubfx	r0, r3, #1, #1
        coords_bg.x2 -= (dsc->border_side & LV_BORDER_SIDE_RIGHT) ? 1 : 0;
 800ffe6:	f3c3 05c0 	ubfx	r5, r3, #3, #1
        coords_bg.x1 += (dsc->border_side & LV_BORDER_SIDE_LEFT) ? 1 : 0;
 800ffea:	4432      	add	r2, r6
        coords_bg.y2 -= (dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? 1 : 0;
 800ffec:	f003 0301 	and.w	r3, r3, #1
        coords_bg.y1 += (dsc->border_side & LV_BORDER_SIDE_TOP) ? 1 : 0;
 800fff0:	4408      	add	r0, r1
        coords_bg.x2 -= (dsc->border_side & LV_BORDER_SIDE_RIGHT) ? 1 : 0;
 800fff2:	f8bd 106c 	ldrh.w	r1, [sp, #108]	; 0x6c
        coords_bg.x1 += (dsc->border_side & LV_BORDER_SIDE_LEFT) ? 1 : 0;
 800fff6:	f8ad 2068 	strh.w	r2, [sp, #104]	; 0x68
        coords_bg.y2 -= (dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? 1 : 0;
 800fffa:	f8bd 206e 	ldrh.w	r2, [sp, #110]	; 0x6e
        coords_bg.x2 -= (dsc->border_side & LV_BORDER_SIDE_RIGHT) ? 1 : 0;
 800fffe:	1b49      	subs	r1, r1, r5
        coords_bg.y1 += (dsc->border_side & LV_BORDER_SIDE_TOP) ? 1 : 0;
 8010000:	f8ad 006a 	strh.w	r0, [sp, #106]	; 0x6a
        coords_bg.y2 -= (dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? 1 : 0;
 8010004:	1ad3      	subs	r3, r2, r3
        coords_bg.x2 -= (dsc->border_side & LV_BORDER_SIDE_RIGHT) ? 1 : 0;
 8010006:	f8ad 106c 	strh.w	r1, [sp, #108]	; 0x6c
        coords_bg.y2 -= (dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? 1 : 0;
 801000a:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 801000e:	f1b8 0ffe 	cmp.w	r8, #254	; 0xfe
 8010012:	bf28      	it	cs
 8010014:	f04f 08ff 	movcs.w	r8, #255	; 0xff
    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
 8010018:	f7f8 f9ac 	bl	8008374 <_lv_refr_get_disp_refreshing>
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 801001c:	f003 fca2 	bl	8013964 <lv_disp_get_buf>
 8010020:	4603      	mov	r3, r0
    is_common = _lv_area_intersect(&draw_area, &coords_bg, clip);
 8010022:	4652      	mov	r2, sl
 8010024:	4621      	mov	r1, r4
 8010026:	a81c      	add	r0, sp, #112	; 0x70
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 8010028:	461d      	mov	r5, r3
 801002a:	9307      	str	r3, [sp, #28]
    is_common = _lv_area_intersect(&draw_area, &coords_bg, clip);
 801002c:	f003 ff88 	bl	8013f40 <_lv_area_intersect>
    if(is_common == false) return;
 8010030:	2800      	cmp	r0, #0
 8010032:	f43f ab60 	beq.w	800f6f6 <lv_draw_rect+0x376>
    draw_area.x2 -= disp_area->x1;
 8010036:	f8bd 6074 	ldrh.w	r6, [sp, #116]	; 0x74
    draw_area.x1 -= disp_area->x1;
 801003a:	f8bd 2070 	ldrh.w	r2, [sp, #112]	; 0x70
 801003e:	1c71      	adds	r1, r6, #1
 8010040:	8a2b      	ldrh	r3, [r5, #16]
    draw_area.y1 -= disp_area->y1;
 8010042:	8a68      	ldrh	r0, [r5, #18]
 8010044:	1a89      	subs	r1, r1, r2
 8010046:	f8bd 5072 	ldrh.w	r5, [sp, #114]	; 0x72
    draw_area.x1 -= disp_area->x1;
 801004a:	1ad2      	subs	r2, r2, r3
    draw_area.x2 -= disp_area->x1;
 801004c:	1af3      	subs	r3, r6, r3
 801004e:	b20e      	sxth	r6, r1
    draw_area.y2 -= disp_area->y1;
 8010050:	f8bd 1076 	ldrh.w	r1, [sp, #118]	; 0x76
    draw_area.y1 -= disp_area->y1;
 8010054:	1a2d      	subs	r5, r5, r0
    draw_area.x1 -= disp_area->x1;
 8010056:	f8ad 2070 	strh.w	r2, [sp, #112]	; 0x70
    draw_area.y2 -= disp_area->y1;
 801005a:	1a0a      	subs	r2, r1, r0
    lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
 801005c:	4630      	mov	r0, r6
    draw_area.x2 -= disp_area->x1;
 801005e:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
 8010062:	ee09 6a90 	vmov	s19, r6
    draw_area.y2 -= disp_area->y1;
 8010066:	f8ad 2076 	strh.w	r2, [sp, #118]	; 0x76
    draw_area.y1 -= disp_area->y1;
 801006a:	f8ad 5072 	strh.w	r5, [sp, #114]	; 0x72
    lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
 801006e:	f005 fa5b 	bl	8015528 <_lv_mem_buf_get>
 8010072:	4607      	mov	r7, r0
    if(dsc->bg_color.full == dsc->bg_grad_color.full) grad_dir = LV_GRAD_DIR_NONE;
 8010074:	e9db 2301 	ldrd	r2, r3, [fp, #4]
 8010078:	429a      	cmp	r2, r3
 801007a:	f000 82df 	beq.w	801063c <lv_draw_rect+0x12bc>
    lv_grad_dir_t grad_dir = dsc->bg_grad_dir;
 801007e:	f89b 500c 	ldrb.w	r5, [fp, #12]
 8010082:	9504      	str	r5, [sp, #16]
    uint16_t other_mask_cnt = lv_draw_mask_get_cnt();
 8010084:	f7fe fc46 	bl	800e914 <lv_draw_mask_get_cnt>
 8010088:	b283      	uxth	r3, r0
 801008a:	930f      	str	r3, [sp, #60]	; 0x3c
    if(other_mask_cnt) simple_mode = false;
 801008c:	2b00      	cmp	r3, #0
 801008e:	f040 80db 	bne.w	8010248 <lv_draw_rect+0xec8>
    else if(grad_dir == LV_GRAD_DIR_HOR) simple_mode = false;
 8010092:	1eab      	subs	r3, r5, #2
 8010094:	bf18      	it	ne
 8010096:	2301      	movne	r3, #1
 8010098:	930b      	str	r3, [sp, #44]	; 0x2c
 801009a:	f8bd 206c 	ldrh.w	r2, [sp, #108]	; 0x6c
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801009e:	f8bd 306e 	ldrh.w	r3, [sp, #110]	; 0x6e
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80100a2:	1c50      	adds	r0, r2, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80100a4:	f8bd 106a 	ldrh.w	r1, [sp, #106]	; 0x6a
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80100a8:	f8bd 2068 	ldrh.w	r2, [sp, #104]	; 0x68
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80100ac:	3301      	adds	r3, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80100ae:	1a80      	subs	r0, r0, r2
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80100b0:	1a5b      	subs	r3, r3, r1
    int32_t rout = dsc->radius;
 80100b2:	f9bb 2000 	ldrsh.w	r2, [fp]
    int32_t coords_h = lv_area_get_height(&coords_bg);
 80100b6:	b21b      	sxth	r3, r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80100b8:	b206      	sxth	r6, r0
    int32_t short_side = LV_MATH_MIN(coords_w, coords_h);
 80100ba:	42b3      	cmp	r3, r6
 80100bc:	bfa8      	it	ge
 80100be:	4633      	movge	r3, r6
    if(rout > short_side >> 1) rout = short_side >> 1;
 80100c0:	105b      	asrs	r3, r3, #1
 80100c2:	4293      	cmp	r3, r2
 80100c4:	bfa8      	it	ge
 80100c6:	4613      	movge	r3, r2
 80100c8:	9306      	str	r3, [sp, #24]
    if(simple_mode && rout == 0 && (grad_dir == LV_GRAD_DIR_NONE)) {
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	f040 824f 	bne.w	801056e <lv_draw_rect+0x11ee>
 80100d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	f000 824b 	beq.w	801056e <lv_draw_rect+0x11ee>
 80100d8:	9b04      	ldr	r3, [sp, #16]
 80100da:	2b00      	cmp	r3, #0
 80100dc:	f000 876a 	beq.w	8010fb4 <lv_draw_rect+0x1c34>
    int16_t mask_rout_id = LV_MASK_ID_INV;
 80100e0:	f04f 33ff 	mov.w	r3, #4294967295
 80100e4:	ee09 3a10 	vmov	s18, r3
        if(grad_dir == LV_GRAD_DIR_HOR) {
 80100e8:	9b04      	ldr	r3, [sp, #16]
        lv_color_t grad_color = dsc->bg_color;
 80100ea:	f8db 9004 	ldr.w	r9, [fp, #4]
        if(grad_dir == LV_GRAD_DIR_HOR) {
 80100ee:	2b02      	cmp	r3, #2
 80100f0:	f000 86c4 	beq.w	8010e7c <lv_draw_rect+0x1afc>
        lv_color_t * grad_map = NULL;
 80100f4:	2300      	movs	r3, #0
 80100f6:	930e      	str	r3, [sp, #56]	; 0x38
        if(lv_area_get_width(&coords_bg) - 2 * rout > SPLIT_LIMIT) split = true;
 80100f8:	f9bd 206c 	ldrsh.w	r2, [sp, #108]	; 0x6c
 80100fc:	f9bd 1068 	ldrsh.w	r1, [sp, #104]	; 0x68
 8010100:	1c53      	adds	r3, r2, #1
        fill_area.y1 = disp_area->y1 + draw_area.y1;
 8010102:	9e07      	ldr	r6, [sp, #28]
 8010104:	f9bd 5072 	ldrsh.w	r5, [sp, #114]	; 0x72
 8010108:	1a5b      	subs	r3, r3, r1
 801010a:	f9b6 c012 	ldrsh.w	ip, [r6, #18]
        fill_area.x1 = coords_bg.x1;
 801010e:	f8ad 1084 	strh.w	r1, [sp, #132]	; 0x84
        if(lv_area_get_width(&coords_bg) - 2 * rout > SPLIT_LIMIT) split = true;
 8010112:	b21b      	sxth	r3, r3
 8010114:	9906      	ldr	r1, [sp, #24]
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 8010116:	f9bd 0076 	ldrsh.w	r0, [sp, #118]	; 0x76
        if(lv_area_get_width(&coords_bg) - 2 * rout > SPLIT_LIMIT) split = true;
 801011a:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
        fill_area.x2 = coords_bg.x2;
 801011e:	f8ad 2088 	strh.w	r2, [sp, #136]	; 0x88
        fill_area.y1 = disp_area->y1 + draw_area.y1;
 8010122:	eb0c 0205 	add.w	r2, ip, r5
        if(lv_area_get_width(&coords_bg) - 2 * rout > SPLIT_LIMIT) split = true;
 8010126:	460c      	mov	r4, r1
 8010128:	2b32      	cmp	r3, #50	; 0x32
        fill_area.y1 = disp_area->y1 + draw_area.y1;
 801012a:	b212      	sxth	r2, r2
        if(lv_area_get_width(&coords_bg) - 2 * rout > SPLIT_LIMIT) split = true;
 801012c:	bfd4      	ite	le
 801012e:	2400      	movle	r4, #0
 8010130:	2401      	movgt	r4, #1
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 8010132:	4285      	cmp	r5, r0
        fill_area.y1 = disp_area->y1 + draw_area.y1;
 8010134:	f8ad 2086 	strh.w	r2, [sp, #134]	; 0x86
        if(lv_area_get_width(&coords_bg) - 2 * rout > SPLIT_LIMIT) split = true;
 8010138:	9410      	str	r4, [sp, #64]	; 0x40
        fill_area.y2 = fill_area.y1;
 801013a:	f8ad 208a 	strh.w	r2, [sp, #138]	; 0x8a
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 801013e:	f73f aac4 	bgt.w	800f6ca <lv_draw_rect+0x34a>
            if(simple_mode && split &&
 8010142:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
                else if(other_mask_cnt != 0 || !split) {
 8010144:	2b32      	cmp	r3, #50	; 0x32
 8010146:	ee08 aa90 	vmov	s17, sl
 801014a:	f8cd 801c 	str.w	r8, [sp, #28]
            if(simple_mode && split &&
 801014e:	ea02 0204 	and.w	r2, r2, r4
                else if(other_mask_cnt != 0 || !split) {
 8010152:	bfcc      	ite	gt
 8010154:	2300      	movgt	r3, #0
 8010156:	2301      	movle	r3, #1
 8010158:	46b0      	mov	r8, r6
            if(simple_mode && split &&
 801015a:	9209      	str	r2, [sp, #36]	; 0x24
                fill_area2.x2 = coords_bg.x1 + rout - 1;
 801015c:	b28a      	uxth	r2, r1
                else if(other_mask_cnt != 0 || !split) {
 801015e:	ee08 7a10 	vmov	s16, r7
 8010162:	4664      	mov	r4, ip
                fill_area2.x2 = coords_bg.x1 + rout - 1;
 8010164:	920a      	str	r2, [sp, #40]	; 0x28
                else if(other_mask_cnt != 0 || !split) {
 8010166:	ee19 aa90 	vmov	sl, s19
 801016a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801016c:	2a00      	cmp	r2, #0
 801016e:	bf18      	it	ne
 8010170:	2301      	movne	r3, #1
 8010172:	930d      	str	r3, [sp, #52]	; 0x34
 8010174:	e028      	b.n	80101c8 <lv_draw_rect+0xe48>
 8010176:	f9bd 306a 	ldrsh.w	r3, [sp, #106]	; 0x6a
               (y < coords_bg.y1 + rout + 1 ||
 801017a:	9a06      	ldr	r2, [sp, #24]
 801017c:	4413      	add	r3, r2
            if(simple_mode && split &&
 801017e:	429c      	cmp	r4, r3
 8010180:	f340 81a2 	ble.w	80104c8 <lv_draw_rect+0x1148>
                y > coords_bg.y2 - rout - 1)) {
 8010184:	f9bd 306e 	ldrsh.w	r3, [sp, #110]	; 0x6e
 8010188:	1a9b      	subs	r3, r3, r2
               (y < coords_bg.y1 + rout + 1 ||
 801018a:	429c      	cmp	r4, r3
 801018c:	f280 819c 	bge.w	80104c8 <lv_draw_rect+0x1148>
                if(grad_dir == LV_GRAD_DIR_HOR) {
 8010190:	9b04      	ldr	r3, [sp, #16]
 8010192:	2b02      	cmp	r3, #2
 8010194:	d039      	beq.n	801020a <lv_draw_rect+0xe8a>
                else if(grad_dir == LV_GRAD_DIR_VER) {
 8010196:	2b01      	cmp	r3, #1
 8010198:	f000 8187 	beq.w	80104aa <lv_draw_rect+0x112a>
                else if(other_mask_cnt != 0 || !split) {
 801019c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801019e:	2b00      	cmp	r3, #0
 80101a0:	f040 8183 	bne.w	80104aa <lv_draw_rect+0x112a>
            fill_area.y1++;
 80101a4:	f8bd 2086 	ldrh.w	r2, [sp, #134]	; 0x86
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 80101a8:	3501      	adds	r5, #1
            fill_area.y2++;
 80101aa:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 80101ae:	f9bd 1076 	ldrsh.w	r1, [sp, #118]	; 0x76
            fill_area.y1++;
 80101b2:	3201      	adds	r2, #1
            fill_area.y2++;
 80101b4:	3301      	adds	r3, #1
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 80101b6:	428d      	cmp	r5, r1
            fill_area.y1++;
 80101b8:	f8ad 2086 	strh.w	r2, [sp, #134]	; 0x86
            fill_area.y2++;
 80101bc:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 80101c0:	f73f aa7d 	bgt.w	800f6be <lv_draw_rect+0x33e>
 80101c4:	f9b8 4012 	ldrsh.w	r4, [r8, #18]
            if(y > coords_bg.y1 + rout + 1 &&
 80101c8:	f9bd 306a 	ldrsh.w	r3, [sp, #106]	; 0x6a
            int32_t y = h + vdb->area.y1;
 80101cc:	442c      	add	r4, r5
            if(y > coords_bg.y1 + rout + 1 &&
 80101ce:	9a06      	ldr	r2, [sp, #24]
 80101d0:	4413      	add	r3, r2
 80101d2:	3301      	adds	r3, #1
 80101d4:	429c      	cmp	r4, r3
 80101d6:	f340 80e2 	ble.w	801039e <lv_draw_rect+0x101e>
               y < coords_bg.y2 - rout - 1) {
 80101da:	f9bd 306e 	ldrsh.w	r3, [sp, #110]	; 0x6e
 80101de:	1a9b      	subs	r3, r3, r2
 80101e0:	3b01      	subs	r3, #1
            if(y > coords_bg.y1 + rout + 1 &&
 80101e2:	429c      	cmp	r4, r3
 80101e4:	f280 80db 	bge.w	801039e <lv_draw_rect+0x101e>
                if(simple_mode == false) {
 80101e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	f000 80d7 	beq.w	801039e <lv_draw_rect+0x101e>
            opa2 = opa;
 80101f0:	9b07      	ldr	r3, [sp, #28]
                mask_res = LV_DRAW_MASK_RES_FULL_COVER;
 80101f2:	2601      	movs	r6, #1
            opa2 = opa;
 80101f4:	9308      	str	r3, [sp, #32]
            if(grad_dir == LV_GRAD_DIR_VER) {
 80101f6:	9b04      	ldr	r3, [sp, #16]
 80101f8:	2b01      	cmp	r3, #1
 80101fa:	f000 80ef 	beq.w	80103dc <lv_draw_rect+0x105c>
            if(simple_mode && split &&
 80101fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010200:	2b00      	cmp	r3, #0
 8010202:	d1b8      	bne.n	8010176 <lv_draw_rect+0xdf6>
                if(grad_dir == LV_GRAD_DIR_HOR) {
 8010204:	9b04      	ldr	r3, [sp, #16]
 8010206:	2b02      	cmp	r3, #2
 8010208:	d1c8      	bne.n	801019c <lv_draw_rect+0xe1c>
                    _lv_blend_map(clip, &fill_area, grad_map, mask_buf, mask_res, opa2, dsc->bg_blend_mode);
 801020a:	f89b 0013 	ldrb.w	r0, [fp, #19]
 801020e:	ee18 3a10 	vmov	r3, s16
 8010212:	9a08      	ldr	r2, [sp, #32]
 8010214:	a921      	add	r1, sp, #132	; 0x84
 8010216:	9002      	str	r0, [sp, #8]
 8010218:	ee18 0a90 	vmov	r0, s17
 801021c:	9201      	str	r2, [sp, #4]
 801021e:	9600      	str	r6, [sp, #0]
 8010220:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010222:	f7fa fbdd 	bl	800a9e0 <_lv_blend_map>
 8010226:	e7bd      	b.n	80101a4 <lv_draw_rect+0xe24>
        lv_draw_img(coords, clip, NULL, NULL);
 8010228:	2300      	movs	r3, #0
 801022a:	4651      	mov	r1, sl
 801022c:	9805      	ldr	r0, [sp, #20]
 801022e:	461a      	mov	r2, r3
 8010230:	f7fb fe4c 	bl	800becc <lv_draw_img>
        return;
 8010234:	f7ff bae3 	b.w	800f7fe <lv_draw_rect+0x47e>
    if(dsc->shadow_width == 1 && dsc->shadow_ofs_x == 0 &&
 8010238:	2900      	cmp	r1, #0
 801023a:	f47f a8ce 	bne.w	800f3da <lv_draw_rect+0x5a>
       dsc->shadow_ofs_y == 0 && dsc->shadow_spread <= 0) {
 801023e:	f1b8 0f00 	cmp.w	r8, #0
 8010242:	f73f a8ca 	bgt.w	800f3da <lv_draw_rect+0x5a>
 8010246:	e6ad      	b.n	800ffa4 <lv_draw_rect+0xc24>
    if(other_mask_cnt) simple_mode = false;
 8010248:	2300      	movs	r3, #0
 801024a:	930b      	str	r3, [sp, #44]	; 0x2c
 801024c:	e725      	b.n	801009a <lv_draw_rect+0xd1a>
    area_inner.x1 += ((dsc->border_side & LV_BORDER_SIDE_LEFT) ? dsc->border_width : - (dsc->border_width + rout));
 801024e:	b292      	uxth	r2, r2
 8010250:	4610      	mov	r0, r2
 8010252:	f7ff bb15 	b.w	800f880 <lv_draw_rect+0x500>
        lv_draw_mask_radius_init(&radius_mask_param, coords, dsc->radius, false);
 8010256:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801025a:	463b      	mov	r3, r7
 801025c:	f9bb 2000 	ldrsh.w	r2, [fp]
 8010260:	a821      	add	r0, sp, #132	; 0x84
 8010262:	4641      	mov	r1, r8
 8010264:	f7fe fc3c 	bl	800eae0 <lv_draw_mask_radius_init>
        int16_t radius_mask_id = lv_draw_mask_add(&radius_mask_param, NULL);
 8010268:	4639      	mov	r1, r7
 801026a:	a821      	add	r0, sp, #132	; 0x84
 801026c:	f7fe fa10 	bl	800e690 <lv_draw_mask_add>
        int32_t ofs_x = (lv_area_get_width(coords) - (lv_area_get_width(coords) / img_w) * img_w) / 2;
 8010270:	f9b8 3004 	ldrsh.w	r3, [r8, #4]
 8010274:	f9b8 1000 	ldrsh.w	r1, [r8]
        int16_t radius_mask_id = lv_draw_mask_add(&radius_mask_param, NULL);
 8010278:	ee08 0a10 	vmov	s16, r0
 801027c:	1c5a      	adds	r2, r3, #1
 801027e:	1a52      	subs	r2, r2, r1
        int32_t ofs_x = (lv_area_get_width(coords) - (lv_area_get_width(coords) / img_w) * img_w) / 2;
 8010280:	b212      	sxth	r2, r2
 8010282:	fb92 f9f4 	sdiv	r9, r2, r4
 8010286:	fb04 2919 	mls	r9, r4, r9, r2
        int32_t ofs_y = (lv_area_get_height(coords) - (lv_area_get_height(coords) / img_h) * img_h) / 2;
 801028a:	9a05      	ldr	r2, [sp, #20]
 801028c:	f9b2 0006 	ldrsh.w	r0, [r2, #6]
        int32_t ofs_x = (lv_area_get_width(coords) - (lv_area_get_width(coords) / img_w) * img_w) / 2;
 8010290:	f1b9 0f00 	cmp.w	r9, #0
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8010294:	8857      	ldrh	r7, [r2, #2]
 8010296:	f100 0c01 	add.w	ip, r0, #1
 801029a:	bfb8      	it	lt
 801029c:	f109 0901 	addlt.w	r9, r9, #1
 80102a0:	ebac 0c07 	sub.w	ip, ip, r7
 80102a4:	ea4f 0969 	mov.w	r9, r9, asr #1
        int32_t ofs_y = (lv_area_get_height(coords) - (lv_area_get_height(coords) / img_h) * img_h) / 2;
 80102a8:	fa0f fc8c 	sxth.w	ip, ip
 80102ac:	fb9c f2f6 	sdiv	r2, ip, r6
 80102b0:	fb06 c212 	mls	r2, r6, r2, ip
        coords_tmp.y2 = coords_tmp.y1 + img_h - 1;
 80102b4:	b2b6      	uxth	r6, r6
        int32_t ofs_y = (lv_area_get_height(coords) - (lv_area_get_height(coords) / img_h) * img_h) / 2;
 80102b6:	2a00      	cmp	r2, #0
 80102b8:	bfb8      	it	lt
 80102ba:	3201      	addlt	r2, #1
        coords_tmp.y1 = coords->y1 - ofs_y;
 80102bc:	eba7 0262 	sub.w	r2, r7, r2, asr #1
        coords_tmp.y2 = coords_tmp.y1 + img_h - 1;
 80102c0:	1e77      	subs	r7, r6, #1
        coords_tmp.y1 = coords->y1 - ofs_y;
 80102c2:	fa0f fc82 	sxth.w	ip, r2
        coords_tmp.y2 = coords_tmp.y1 + img_h - 1;
 80102c6:	fa17 f282 	uxtah	r2, r7, r2
        for(; coords_tmp.y1 <= coords->y2; coords_tmp.y1 += img_h, coords_tmp.y2 += img_h) {
 80102ca:	4560      	cmp	r0, ip
        coords_tmp.y2 = coords_tmp.y1 + img_h - 1;
 80102cc:	b212      	sxth	r2, r2
        coords_tmp.y1 = coords->y1 - ofs_y;
 80102ce:	f8ad c06a 	strh.w	ip, [sp, #106]	; 0x6a
        coords_tmp.y2 = coords_tmp.y1 + img_h - 1;
 80102d2:	f8ad 206e 	strh.w	r2, [sp, #110]	; 0x6e
        for(; coords_tmp.y1 <= coords->y2; coords_tmp.y1 += img_h, coords_tmp.y2 += img_h) {
 80102d6:	f2c0 86f2 	blt.w	80110be <lv_draw_rect+0x1d3e>
 80102da:	b2a4      	uxth	r4, r4
 80102dc:	9508      	str	r5, [sp, #32]
 80102de:	fa1f f989 	uxth.w	r9, r9
                if(src_type == LV_IMG_SRC_SYMBOL)  lv_draw_label(&coords_tmp, clip, &label_dsc, dsc->pattern_image, NULL);
 80102e2:	2700      	movs	r7, #0
 80102e4:	f104 38ff 	add.w	r8, r4, #4294967295
 80102e8:	fa1f f888 	uxth.w	r8, r8
 80102ec:	e9cd 4806 	strd	r4, r8, [sp, #24]
 80102f0:	e9dd 8504 	ldrd	r8, r5, [sp, #16]
            coords_tmp.x1 = coords->x1 - ofs_x;
 80102f4:	eba1 0109 	sub.w	r1, r1, r9
            coords_tmp.x2 = coords_tmp.x1 + img_w - 1;
 80102f8:	9c07      	ldr	r4, [sp, #28]
            coords_tmp.x1 = coords->x1 - ofs_x;
 80102fa:	fa0f fe81 	sxth.w	lr, r1
            coords_tmp.x2 = coords_tmp.x1 + img_w - 1;
 80102fe:	fa14 f181 	uxtah	r1, r4, r1
            for(; coords_tmp.x1 <= coords->x2; coords_tmp.x1 += img_w, coords_tmp.x2 += img_w) {
 8010302:	459e      	cmp	lr, r3
            coords_tmp.x1 = coords->x1 - ofs_x;
 8010304:	f8ad e068 	strh.w	lr, [sp, #104]	; 0x68
            coords_tmp.x2 = coords_tmp.x1 + img_w - 1;
 8010308:	f8ad 106c 	strh.w	r1, [sp, #108]	; 0x6c
            for(; coords_tmp.x1 <= coords->x2; coords_tmp.x1 += img_w, coords_tmp.x2 += img_w) {
 801030c:	dc20      	bgt.n	8010350 <lv_draw_rect+0xfd0>
 801030e:	9b08      	ldr	r3, [sp, #32]
 8010310:	9c06      	ldr	r4, [sp, #24]
 8010312:	2b02      	cmp	r3, #2
 8010314:	d02b      	beq.n	801036e <lv_draw_rect+0xfee>
                else lv_draw_img(&coords_tmp, clip, dsc->pattern_image, &img_dsc);
 8010316:	ab1c      	add	r3, sp, #112	; 0x70
 8010318:	f8db 203c 	ldr.w	r2, [fp, #60]	; 0x3c
 801031c:	4651      	mov	r1, sl
 801031e:	a81a      	add	r0, sp, #104	; 0x68
 8010320:	f7fb fdd4 	bl	800becc <lv_draw_img>
            for(; coords_tmp.x1 <= coords->x2; coords_tmp.x1 += img_w, coords_tmp.x2 += img_w) {
 8010324:	f8bd 2068 	ldrh.w	r2, [sp, #104]	; 0x68
 8010328:	f8bd 106c 	ldrh.w	r1, [sp, #108]	; 0x6c
 801032c:	4422      	add	r2, r4
 801032e:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8010332:	4421      	add	r1, r4
 8010334:	b212      	sxth	r2, r2
 8010336:	f8ad 106c 	strh.w	r1, [sp, #108]	; 0x6c
 801033a:	4293      	cmp	r3, r2
 801033c:	f8ad 2068 	strh.w	r2, [sp, #104]	; 0x68
 8010340:	dae9      	bge.n	8010316 <lv_draw_rect+0xf96>
 8010342:	f9bd c06a 	ldrsh.w	ip, [sp, #106]	; 0x6a
 8010346:	f9bd 206e 	ldrsh.w	r2, [sp, #110]	; 0x6e
 801034a:	f9b5 0006 	ldrsh.w	r0, [r5, #6]
 801034e:	9406      	str	r4, [sp, #24]
        for(; coords_tmp.y1 <= coords->y2; coords_tmp.y1 += img_h, coords_tmp.y2 += img_h) {
 8010350:	44b4      	add	ip, r6
 8010352:	4432      	add	r2, r6
 8010354:	fa0f fc8c 	sxth.w	ip, ip
 8010358:	b212      	sxth	r2, r2
 801035a:	4584      	cmp	ip, r0
 801035c:	f8ad c06a 	strh.w	ip, [sp, #106]	; 0x6a
 8010360:	f8ad 206e 	strh.w	r2, [sp, #110]	; 0x6e
 8010364:	f300 86ab 	bgt.w	80110be <lv_draw_rect+0x1d3e>
 8010368:	f9b5 1000 	ldrsh.w	r1, [r5]
 801036c:	e7c2      	b.n	80102f4 <lv_draw_rect+0xf74>
                if(src_type == LV_IMG_SRC_SYMBOL)  lv_draw_label(&coords_tmp, clip, &label_dsc, dsc->pattern_image, NULL);
 801036e:	4642      	mov	r2, r8
 8010370:	a81a      	add	r0, sp, #104	; 0x68
 8010372:	9700      	str	r7, [sp, #0]
 8010374:	4651      	mov	r1, sl
 8010376:	f8db 303c 	ldr.w	r3, [fp, #60]	; 0x3c
 801037a:	f7fb ff4b 	bl	800c214 <lv_draw_label>
            for(; coords_tmp.x1 <= coords->x2; coords_tmp.x1 += img_w, coords_tmp.x2 += img_w) {
 801037e:	f8bd 0068 	ldrh.w	r0, [sp, #104]	; 0x68
 8010382:	f8bd 206c 	ldrh.w	r2, [sp, #108]	; 0x6c
 8010386:	4420      	add	r0, r4
 8010388:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 801038c:	4422      	add	r2, r4
 801038e:	b200      	sxth	r0, r0
 8010390:	f8ad 206c 	strh.w	r2, [sp, #108]	; 0x6c
 8010394:	4298      	cmp	r0, r3
 8010396:	f8ad 0068 	strh.w	r0, [sp, #104]	; 0x68
 801039a:	dde8      	ble.n	801036e <lv_draw_rect+0xfee>
 801039c:	e7d1      	b.n	8010342 <lv_draw_rect+0xfc2>
                _lv_memset(mask_buf, opa, draw_area_w);
 801039e:	4652      	mov	r2, sl
 80103a0:	9907      	ldr	r1, [sp, #28]
 80103a2:	ee18 0a10 	vmov	r0, s16
 80103a6:	f005 f985 	bl	80156b4 <_lv_memset>
                mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
 80103aa:	f8bd 6070 	ldrh.w	r6, [sp, #112]	; 0x70
 80103ae:	f8b8 2012 	ldrh.w	r2, [r8, #18]
 80103b2:	4653      	mov	r3, sl
 80103b4:	f8b8 1010 	ldrh.w	r1, [r8, #16]
 80103b8:	ee18 0a10 	vmov	r0, s16
 80103bc:	442a      	add	r2, r5
 80103be:	4431      	add	r1, r6
 80103c0:	b212      	sxth	r2, r2
 80103c2:	b209      	sxth	r1, r1
 80103c4:	f7fe f9c2 	bl	800e74c <lv_draw_mask_apply>
                opa2 = LV_OPA_COVER;
 80103c8:	2802      	cmp	r0, #2
 80103ca:	9b07      	ldr	r3, [sp, #28]
                mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
 80103cc:	4606      	mov	r6, r0
                opa2 = LV_OPA_COVER;
 80103ce:	bf08      	it	eq
 80103d0:	23ff      	moveq	r3, #255	; 0xff
 80103d2:	9308      	str	r3, [sp, #32]
            if(grad_dir == LV_GRAD_DIR_VER) {
 80103d4:	9b04      	ldr	r3, [sp, #16]
 80103d6:	2b01      	cmp	r3, #1
 80103d8:	f47f af11 	bne.w	80101fe <lv_draw_rect+0xe7e>
                grad_color = grad_get(dsc, lv_area_get_height(&coords_bg), y - coords_bg.y1);
 80103dc:	f9bd 306a 	ldrsh.w	r3, [sp, #106]	; 0x6a
 80103e0:	f8bd 206e 	ldrh.w	r2, [sp, #110]	; 0x6e
 80103e4:	b298      	uxth	r0, r3
    int32_t min = (dsc->bg_main_color_stop * s) >> 8;
 80103e6:	f9bb e00e 	ldrsh.w	lr, [fp, #14]
 80103ea:	3201      	adds	r2, #1
                grad_color = grad_get(dsc, lv_area_get_height(&coords_bg), y - coords_bg.y1);
 80103ec:	1a21      	subs	r1, r4, r0
 80103ee:	1a12      	subs	r2, r2, r0
    if(i <= min) return dsc->bg_color;
 80103f0:	b208      	sxth	r0, r1
 80103f2:	b212      	sxth	r2, r2
                grad_color = grad_get(dsc, lv_area_get_height(&coords_bg), y - coords_bg.y1);
 80103f4:	b289      	uxth	r1, r1
    int32_t min = (dsc->bg_main_color_stop * s) >> 8;
 80103f6:	fb0e fc02 	mul.w	ip, lr, r2
    if(i <= min) return dsc->bg_color;
 80103fa:	ebb0 2f2c 	cmp.w	r0, ip, asr #8
    int32_t min = (dsc->bg_main_color_stop * s) >> 8;
 80103fe:	ea4f 292c 	mov.w	r9, ip, asr #8
    if(i <= min) return dsc->bg_color;
 8010402:	f340 80c4 	ble.w	801058e <lv_draw_rect+0x120e>
    int32_t max = (dsc->bg_grad_color_stop * s) >> 8;
 8010406:	f9bb c010 	ldrsh.w	ip, [fp, #16]
 801040a:	fb02 f70c 	mul.w	r7, r2, ip
    if(i >= max) return dsc->bg_grad_color;
 801040e:	ebb0 2f27 	cmp.w	r0, r7, asr #8
 8010412:	f280 813f 	bge.w	8010694 <lv_draw_rect+0x1314>
    int32_t d = dsc->bg_grad_color_stop - dsc->bg_main_color_stop;
 8010416:	ebac 0c0e 	sub.w	ip, ip, lr
    i -= min;
 801041a:	eba1 0109 	sub.w	r1, r1, r9
    return ret;
 801041e:	20ff      	movs	r0, #255	; 0xff
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8010420:	f89b 7004 	ldrb.w	r7, [fp, #4]
    d = (s * d) >> 8;
 8010424:	fb02 f20c 	mul.w	r2, r2, ip
    lv_opa_t mix = (i * 255) / d;
 8010428:	b209      	sxth	r1, r1
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 801042a:	f89b e006 	ldrb.w	lr, [fp, #6]
 801042e:	ebc1 2101 	rsb	r1, r1, r1, lsl #8
    return ret;
 8010432:	900c      	str	r0, [sp, #48]	; 0x30
    d = (s * d) >> 8;
 8010434:	1212      	asrs	r2, r2, #8
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8010436:	f89b 0005 	ldrb.w	r0, [fp, #5]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 801043a:	f89b c00a 	ldrb.w	ip, [fp, #10]
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 801043e:	f89b 9009 	ldrb.w	r9, [fp, #9]
    lv_opa_t mix = (i * 255) / d;
 8010442:	fb91 f2f2 	sdiv	r2, r1, r2
 8010446:	b2d2      	uxtb	r2, r2
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8010448:	f1c2 01ff 	rsb	r1, r2, #255	; 0xff
 801044c:	fb01 fe0e 	mul.w	lr, r1, lr
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8010450:	fb01 f000 	mul.w	r0, r1, r0
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8010454:	fb01 f107 	mul.w	r1, r1, r7
 8010458:	f89b 7008 	ldrb.w	r7, [fp, #8]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 801045c:	fb02 ee0c 	mla	lr, r2, ip, lr
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8010460:	fb02 0009 	mla	r0, r2, r9, r0
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8010464:	fb02 1107 	mla	r1, r2, r7, r1
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8010468:	eb0e 2c0e 	add.w	ip, lr, lr, lsl #8
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 801046c:	eb00 2900 	add.w	r9, r0, r0, lsl #8
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8010470:	eb01 2201 	add.w	r2, r1, r1, lsl #8
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8010474:	eb0e 1ecc 	add.w	lr, lr, ip, lsl #7
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8010478:	eb00 10c9 	add.w	r0, r0, r9, lsl #7
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 801047c:	eb01 12c2 	add.w	r2, r1, r2, lsl #7
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8010480:	f3ce 5ec7 	ubfx	lr, lr, #23, #8
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8010484:	f3c0 50c7 	ubfx	r0, r0, #23, #8
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8010488:	f3c2 52c7 	ubfx	r2, r2, #23, #8
    return ret;
 801048c:	f04f 0900 	mov.w	r9, #0
 8010490:	f362 0907 	bfi	r9, r2, #0, #8
 8010494:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010496:	f360 290f 	bfi	r9, r0, #8, #8
 801049a:	f36e 4917 	bfi	r9, lr, #16, #8
 801049e:	f362 691f 	bfi	r9, r2, #24, #8
            if(simple_mode && split &&
 80104a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80104a4:	2a00      	cmp	r2, #0
 80104a6:	f47f ae68 	bne.w	801017a <lv_draw_rect+0xdfa>
                    _lv_blend_fill(clip, &fill_area,
 80104aa:	f89b 0013 	ldrb.w	r0, [fp, #19]
 80104ae:	ee18 3a10 	vmov	r3, s16
 80104b2:	9a08      	ldr	r2, [sp, #32]
 80104b4:	a921      	add	r1, sp, #132	; 0x84
 80104b6:	9002      	str	r0, [sp, #8]
 80104b8:	ee18 0a90 	vmov	r0, s17
 80104bc:	9201      	str	r2, [sp, #4]
 80104be:	464a      	mov	r2, r9
 80104c0:	9600      	str	r6, [sp, #0]
 80104c2:	f7f9 fc4b 	bl	8009d5c <_lv_blend_fill>
 80104c6:	e66d      	b.n	80101a4 <lv_draw_rect+0xe24>
                fill_area2.x1 = coords_bg.x1;
 80104c8:	f9bd c068 	ldrsh.w	ip, [sp, #104]	; 0x68
 80104cc:	2400      	movs	r4, #0
                _lv_blend_fill(clip, &fill_area2,
 80104ce:	9f08      	ldr	r7, [sp, #32]
 80104d0:	a918      	add	r1, sp, #96	; 0x60
                fill_area2.x2 = coords_bg.x1 + rout - 1;
 80104d2:	f10c 33ff 	add.w	r3, ip, #4294967295
                fill_area2.x1 = coords_bg.x1;
 80104d6:	4620      	mov	r0, r4
                _lv_blend_fill(clip, &fill_area2,
 80104d8:	9701      	str	r7, [sp, #4]
                fill_area2.x1 = coords_bg.x1;
 80104da:	f36c 040f 	bfi	r4, ip, #0, #16
                fill_area2.x2 = coords_bg.x1 + rout - 1;
 80104de:	9f0a      	ldr	r7, [sp, #40]	; 0x28
                fill_area2.x1 = coords_bg.x1;
 80104e0:	f8bd 208a 	ldrh.w	r2, [sp, #138]	; 0x8a
                fill_area2.x2 = coords_bg.x1 + rout - 1;
 80104e4:	443b      	add	r3, r7
                fill_area2.x1 = coords_bg.x1;
 80104e6:	f8bd c086 	ldrh.w	ip, [sp, #134]	; 0x86
                _lv_blend_fill(clip, &fill_area2,
 80104ea:	9600      	str	r6, [sp, #0]
                fill_area2.x1 = coords_bg.x1;
 80104ec:	f363 000f 	bfi	r0, r3, #0, #16
                _lv_blend_fill(clip, &fill_area2,
 80104f0:	f89b 3013 	ldrb.w	r3, [fp, #19]
                fill_area2.x1 = coords_bg.x1;
 80104f4:	f36c 441f 	bfi	r4, ip, #16, #16
                _lv_blend_fill(clip, &fill_area2,
 80104f8:	910c      	str	r1, [sp, #48]	; 0x30
                fill_area2.x1 = coords_bg.x1;
 80104fa:	f362 401f 	bfi	r0, r2, #16, #16
                _lv_blend_fill(clip, &fill_area2,
 80104fe:	9302      	str	r3, [sp, #8]
 8010500:	464a      	mov	r2, r9
 8010502:	ee18 3a10 	vmov	r3, s16
                fill_area2.x1 = coords_bg.x1;
 8010506:	9019      	str	r0, [sp, #100]	; 0x64
                _lv_blend_fill(clip, &fill_area2,
 8010508:	ee18 0a90 	vmov	r0, s17
                fill_area2.x1 = coords_bg.x1;
 801050c:	9418      	str	r4, [sp, #96]	; 0x60
                _lv_blend_fill(clip, &fill_area2,
 801050e:	f7f9 fc25 	bl	8009d5c <_lv_blend_fill>
                if(grad_dir == LV_GRAD_DIR_VER) {
 8010512:	9b04      	ldr	r3, [sp, #16]
 8010514:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010516:	2b01      	cmp	r3, #1
 8010518:	d043      	beq.n	80105a2 <lv_draw_rect+0x1222>
                fill_area2.x1 = coords_bg.x2 - rout + 1;
 801051a:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	; 0x6c
                int32_t mask_ofs = (coords_bg.x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
 801051e:	9c06      	ldr	r4, [sp, #24]
                fill_area2.x1 = coords_bg.x2 - rout + 1;
 8010520:	1c5a      	adds	r2, r3, #1
                fill_area2.x2 = coords_bg.x2;
 8010522:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
                int32_t mask_ofs = (coords_bg.x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
 8010526:	1b1b      	subs	r3, r3, r4
                fill_area2.x1 = coords_bg.x2 - rout + 1;
 8010528:	9c0a      	ldr	r4, [sp, #40]	; 0x28
                int32_t mask_ofs = (coords_bg.x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
 801052a:	f9bd 0070 	ldrsh.w	r0, [sp, #112]	; 0x70
                fill_area2.x1 = coords_bg.x2 - rout + 1;
 801052e:	1b12      	subs	r2, r2, r4
                int32_t mask_ofs = (coords_bg.x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
 8010530:	3301      	adds	r3, #1
                fill_area2.x1 = coords_bg.x2 - rout + 1;
 8010532:	f8ad 2060 	strh.w	r2, [sp, #96]	; 0x60
                _lv_blend_fill(clip, &fill_area2,
 8010536:	9a08      	ldr	r2, [sp, #32]
                int32_t mask_ofs = (coords_bg.x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
 8010538:	f9b8 c010 	ldrsh.w	ip, [r8, #16]
                _lv_blend_fill(clip, &fill_area2,
 801053c:	9201      	str	r2, [sp, #4]
 801053e:	464a      	mov	r2, r9
 8010540:	f89b 4013 	ldrb.w	r4, [fp, #19]
                int32_t mask_ofs = (coords_bg.x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
 8010544:	4484      	add	ip, r0
                _lv_blend_fill(clip, &fill_area2,
 8010546:	9600      	str	r6, [sp, #0]
 8010548:	ee18 0a90 	vmov	r0, s17
                int32_t mask_ofs = (coords_bg.x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
 801054c:	eba3 030c 	sub.w	r3, r3, ip
                _lv_blend_fill(clip, &fill_area2,
 8010550:	9402      	str	r4, [sp, #8]
 8010552:	ee18 4a10 	vmov	r4, s16
 8010556:	2b00      	cmp	r3, #0
 8010558:	bfa8      	it	ge
 801055a:	18e4      	addge	r4, r4, r3
 801055c:	4623      	mov	r3, r4
 801055e:	f7f9 fbfd 	bl	8009d5c <_lv_blend_fill>
                y > coords_bg.y2 - rout - 1)) {
 8010562:	e61f      	b.n	80101a4 <lv_draw_rect+0xe24>
        for(i = 1; i < (uint32_t) size * size; i++) {
 8010564:	42bd      	cmp	r5, r7
 8010566:	f47f a899 	bne.w	800f69c <lv_draw_rect+0x31c>
 801056a:	f7ff b8a4 	b.w	800f6b6 <lv_draw_rect+0x336>
        if(rout > 0) {
 801056e:	9a06      	ldr	r2, [sp, #24]
 8010570:	2a00      	cmp	r2, #0
 8010572:	f77f adb5 	ble.w	80100e0 <lv_draw_rect+0xd60>
            lv_draw_mask_radius_init(&mask_rout_param, &coords_bg, rout, false);
 8010576:	4621      	mov	r1, r4
 8010578:	2300      	movs	r3, #0
 801057a:	a828      	add	r0, sp, #160	; 0xa0
 801057c:	f7fe fab0 	bl	800eae0 <lv_draw_mask_radius_init>
            mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
 8010580:	a828      	add	r0, sp, #160	; 0xa0
 8010582:	2100      	movs	r1, #0
 8010584:	f7fe f884 	bl	800e690 <lv_draw_mask_add>
 8010588:	ee09 0a10 	vmov	s18, r0
 801058c:	e5ac      	b.n	80100e8 <lv_draw_rect+0xd68>
    if(i <= min) return dsc->bg_color;
 801058e:	f89b 1007 	ldrb.w	r1, [fp, #7]
 8010592:	f89b 2004 	ldrb.w	r2, [fp, #4]
 8010596:	f89b 0005 	ldrb.w	r0, [fp, #5]
 801059a:	f89b e006 	ldrb.w	lr, [fp, #6]
 801059e:	910c      	str	r1, [sp, #48]	; 0x30
 80105a0:	e774      	b.n	801048c <lv_draw_rect+0x110c>
                    fill_area2.x1 = coords_bg.x1 + rout;
 80105a2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
                    _lv_blend_fill(clip, &fill_area2,
 80105a4:	2300      	movs	r3, #0
                    fill_area2.x2 = coords_bg.x2 - rout;
 80105a6:	f8bd 406c 	ldrh.w	r4, [sp, #108]	; 0x6c
                    _lv_blend_fill(clip, &fill_area2,
 80105aa:	464a      	mov	r2, r9
                    fill_area2.x1 = coords_bg.x1 + rout;
 80105ac:	f8bd e068 	ldrh.w	lr, [sp, #104]	; 0x68
 80105b0:	4638      	mov	r0, r7
                    fill_area2.x2 = coords_bg.x2 - rout;
 80105b2:	1be4      	subs	r4, r4, r7
                    _lv_blend_fill(clip, &fill_area2,
 80105b4:	9f07      	ldr	r7, [sp, #28]
 80105b6:	f89b c013 	ldrb.w	ip, [fp, #19]
                    fill_area2.x1 = coords_bg.x1 + rout;
 80105ba:	4470      	add	r0, lr
                    _lv_blend_fill(clip, &fill_area2,
 80105bc:	9701      	str	r7, [sp, #4]
 80105be:	9f04      	ldr	r7, [sp, #16]
                    fill_area2.x1 = coords_bg.x1 + rout;
 80105c0:	f8ad 0060 	strh.w	r0, [sp, #96]	; 0x60
                    _lv_blend_fill(clip, &fill_area2,
 80105c4:	ee18 0a90 	vmov	r0, s17
 80105c8:	9700      	str	r7, [sp, #0]
 80105ca:	f8cd c008 	str.w	ip, [sp, #8]
                    fill_area2.x2 = coords_bg.x2 - rout;
 80105ce:	f8ad 4064 	strh.w	r4, [sp, #100]	; 0x64
                    _lv_blend_fill(clip, &fill_area2,
 80105d2:	f7f9 fbc3 	bl	8009d5c <_lv_blend_fill>
 80105d6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80105d8:	e79f      	b.n	801051a <lv_draw_rect+0x119a>
    else if(dsc->shadow_ofs_x != 0 || dsc->shadow_ofs_y != 0) simple_mode = false;
 80105da:	f9bb 3032 	ldrsh.w	r3, [fp, #50]	; 0x32
 80105de:	2b00      	cmp	r3, #0
 80105e0:	f040 8449 	bne.w	8010e76 <lv_draw_rect+0x1af6>
 80105e4:	f9bb 2034 	ldrsh.w	r2, [fp, #52]	; 0x34
 80105e8:	2a00      	cmp	r2, #0
 80105ea:	f040 8581 	bne.w	80110f0 <lv_draw_rect+0x1d70>
    else if(dsc->shadow_spread != 0) simple_mode = false;
 80105ee:	f9bb 3036 	ldrsh.w	r3, [fp, #54]	; 0x36
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	bf0c      	ite	eq
 80105f6:	2301      	moveq	r3, #1
 80105f8:	2300      	movne	r3, #0
 80105fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80105fc:	bf14      	ite	ne
 80105fe:	2301      	movne	r3, #1
 8010600:	2300      	moveq	r3, #0
 8010602:	930d      	str	r3, [sp, #52]	; 0x34
 8010604:	f7ff bb45 	b.w	800fc92 <lv_draw_rect+0x912>
            _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 8010608:	f89b 2039 	ldrb.w	r2, [fp, #57]	; 0x39
        for(y = 0; y < h; y++) {
 801060c:	3401      	adds	r4, #1
            _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 801060e:	e9cd 9800 	strd	r9, r8, [sp]
 8010612:	9202      	str	r2, [sp, #8]
 8010614:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 8010618:	f7f9 fba0 	bl	8009d5c <_lv_blend_fill>
            fa.y1++;
 801061c:	f8bd 2086 	ldrh.w	r2, [sp, #134]	; 0x86
            fa.y2++;
 8010620:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
        for(y = 0; y < h; y++) {
 8010624:	42a7      	cmp	r7, r4
            fa.y1++;
 8010626:	f102 0201 	add.w	r2, r2, #1
            fa.y2++;
 801062a:	f103 0301 	add.w	r3, r3, #1
            fa.y1++;
 801062e:	f8ad 2086 	strh.w	r2, [sp, #134]	; 0x86
            fa.y2++;
 8010632:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
        for(y = 0; y < h; y++) {
 8010636:	f47f ac7d 	bne.w	800ff34 <lv_draw_rect+0xbb4>
 801063a:	e4a9      	b.n	800ff90 <lv_draw_rect+0xc10>
    uint16_t other_mask_cnt = lv_draw_mask_get_cnt();
 801063c:	f7fe f96a 	bl	800e914 <lv_draw_mask_get_cnt>
    if(dsc->bg_color.full == dsc->bg_grad_color.full) grad_dir = LV_GRAD_DIR_NONE;
 8010640:	2300      	movs	r3, #0
 8010642:	9304      	str	r3, [sp, #16]
    uint16_t other_mask_cnt = lv_draw_mask_get_cnt();
 8010644:	b283      	uxth	r3, r0
 8010646:	930f      	str	r3, [sp, #60]	; 0x3c
    if(other_mask_cnt) simple_mode = false;
 8010648:	fab3 f383 	clz	r3, r3
 801064c:	095b      	lsrs	r3, r3, #5
 801064e:	930b      	str	r3, [sp, #44]	; 0x2c
 8010650:	e523      	b.n	801009a <lv_draw_rect+0xd1a>
        lv_res_t res = lv_img_decoder_get_info(dsc->pattern_image, &header);
 8010652:	ab28      	add	r3, sp, #160	; 0xa0
 8010654:	f8db 003c 	ldr.w	r0, [fp, #60]	; 0x3c
 8010658:	4619      	mov	r1, r3
 801065a:	9304      	str	r3, [sp, #16]
 801065c:	f002 f802 	bl	8012664 <lv_img_decoder_get_info>
        if(res != LV_RES_OK) {
 8010660:	2801      	cmp	r0, #1
 8010662:	f47f a8cc 	bne.w	800f7fe <lv_draw_rect+0x47e>
        lv_draw_img_dsc_init(&img_dsc);
 8010666:	a81c      	add	r0, sp, #112	; 0x70
        img_w = header.w;
 8010668:	9c28      	ldr	r4, [sp, #160]	; 0xa0
        img_h = header.h;
 801066a:	f8bd 60a2 	ldrh.w	r6, [sp, #162]	; 0xa2
        lv_draw_img_dsc_init(&img_dsc);
 801066e:	f7fb fc1b 	bl	800bea8 <lv_draw_img_dsc_init>
        img_dsc.opa = dsc->pattern_opa;
 8010672:	f89b 3048 	ldrb.w	r3, [fp, #72]	; 0x48
        img_w = header.w;
 8010676:	f3c4 248a 	ubfx	r4, r4, #10, #11
        img_dsc.recolor_opa = dsc->pattern_recolor_opa;
 801067a:	f89b 2049 	ldrb.w	r2, [fp, #73]	; 0x49
        img_h = header.h;
 801067e:	f3c6 164a 	ubfx	r6, r6, #5, #11
        img_dsc.opa = dsc->pattern_opa;
 8010682:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
        img_dsc.recolor = dsc->pattern_recolor;
 8010686:	f8db 3044 	ldr.w	r3, [fp, #68]	; 0x44
        img_dsc.recolor_opa = dsc->pattern_recolor_opa;
 801068a:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
        img_dsc.recolor = dsc->pattern_recolor;
 801068e:	931f      	str	r3, [sp, #124]	; 0x7c
 8010690:	f7ff b864 	b.w	800f75c <lv_draw_rect+0x3dc>
    if(i >= max) return dsc->bg_grad_color;
 8010694:	f89b 100b 	ldrb.w	r1, [fp, #11]
 8010698:	f89b 2008 	ldrb.w	r2, [fp, #8]
 801069c:	f89b 0009 	ldrb.w	r0, [fp, #9]
 80106a0:	f89b e00a 	ldrb.w	lr, [fp, #10]
 80106a4:	910c      	str	r1, [sp, #48]	; 0x30
 80106a6:	e6f1      	b.n	801048c <lv_draw_rect+0x110c>
    _lv_mem_buf_release(mask_line);
 80106a8:	f004 fc16 	bl	8014ed8 <_lv_mem_buf_release>
        for(i = 0; i < size * size; i++) {
 80106ac:	fb04 f404 	mul.w	r4, r4, r4
 80106b0:	2c00      	cmp	r4, #0
 80106b2:	f77f aac7 	ble.w	800fc44 <lv_draw_rect+0x8c4>
 80106b6:	9b08      	ldr	r3, [sp, #32]
 80106b8:	1e9a      	subs	r2, r3, #2
 80106ba:	1e59      	subs	r1, r3, #1
 80106bc:	eb02 0444 	add.w	r4, r2, r4, lsl #1
            res_buf[i] = (sh_buf[i] >> SHADOW_UPSCALE_SHIFT);
 80106c0:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 80106c4:	099b      	lsrs	r3, r3, #6
        for(i = 0; i < size * size; i++) {
 80106c6:	42a2      	cmp	r2, r4
            res_buf[i] = (sh_buf[i] >> SHADOW_UPSCALE_SHIFT);
 80106c8:	f801 3f01 	strb.w	r3, [r1, #1]!
        for(i = 0; i < size * size; i++) {
 80106cc:	d1f8      	bne.n	80106c0 <lv_draw_rect+0x1340>
 80106ce:	f7ff bab9 	b.w	800fc44 <lv_draw_rect+0x8c4>
    area_inner.x2 -= ((dsc->border_side & LV_BORDER_SIDE_RIGHT) ? dsc->border_width : - (dsc->border_width + rout));
 80106d2:	4601      	mov	r1, r0
 80106d4:	f7ff b8e0 	b.w	800f898 <lv_draw_rect+0x518>
    area_inner.y1 += ((dsc->border_side & LV_BORDER_SIDE_TOP) ? dsc->border_width : - (dsc->border_width + rout));
 80106d8:	4601      	mov	r1, r0
 80106da:	f7ff b8e9 	b.w	800f8b0 <lv_draw_rect+0x530>
    lv_opa_t * mask_line = _lv_mem_buf_get(size);
 80106de:	f004 ff23 	bl	8015528 <_lv_mem_buf_get>
    for(y = 0; y < size; y++) {
 80106e2:	2c00      	cmp	r4, #0
    lv_opa_t * mask_line = _lv_mem_buf_get(size);
 80106e4:	4681      	mov	r9, r0
    for(y = 0; y < size; y++) {
 80106e6:	dddf      	ble.n	80106a8 <lv_draw_rect+0x1328>
    if(sw_ori == 1) sw = 1;
 80106e8:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 80106ec:	f7fe bf67 	b.w	800f5be <lv_draw_rect+0x23e>
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
 80106f0:	ee18 2a10 	vmov	r2, s16
 80106f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80106f6:	4620      	mov	r0, r4
 80106f8:	f003 fd98 	bl	801422c <_lv_area_is_in>
 80106fc:	2800      	cmp	r0, #0
 80106fe:	f47f ab18 	bne.w	800fd32 <lv_draw_rect+0x9b2>
        if(ca.y1 <= h_half) ca.y1 = h_half + 1;
 8010702:	f9bd 3072 	ldrsh.w	r3, [sp, #114]	; 0x72
 8010706:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010708:	429a      	cmp	r2, r3
 801070a:	f280 8553 	bge.w	80111b4 <lv_draw_rect+0x1e34>
 801070e:	b29b      	uxth	r3, r3
        if(ca.x1 <= w_half) ca.x1 = w_half + 1;
 8010710:	f9bd 2070 	ldrsh.w	r2, [sp, #112]	; 0x70
 8010714:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8010716:	4291      	cmp	r1, r2
 8010718:	f280 8544 	bge.w	80111a4 <lv_draw_rect+0x1e24>
 801071c:	b291      	uxth	r1, r2
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801071e:	f8bd 7074 	ldrh.w	r7, [sp, #116]	; 0x74
 8010722:	3701      	adds	r7, #1
 8010724:	1a7f      	subs	r7, r7, r1
 8010726:	b23f      	sxth	r7, r7
        if(w > 0) {
 8010728:	2f00      	cmp	r7, #0
 801072a:	f77f ab02 	ble.w	800fd32 <lv_draw_rect+0x9b2>
        lv_coord_t h = lv_area_get_height(&ca);
 801072e:	f9bd 1076 	ldrsh.w	r1, [sp, #118]	; 0x76
            sh_buf_tmp = sh_buf + (ca.x1 - a.x1);
 8010732:	f9bd 0068 	ldrsh.w	r0, [sp, #104]	; 0x68
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8010736:	f101 0c01 	add.w	ip, r1, #1
            sh_buf_tmp += corner_size * (a.y2 - ca.y2);
 801073a:	f9bd 606e 	ldrsh.w	r6, [sp, #110]	; 0x6e
            sh_buf_tmp = sh_buf + (ca.x1 - a.x1);
 801073e:	1a12      	subs	r2, r2, r0
 8010740:	ebac 0303 	sub.w	r3, ip, r3
            sh_buf_tmp += corner_size * (a.y2 - ca.y2);
 8010744:	1a76      	subs	r6, r6, r1
 8010746:	a91c      	add	r1, sp, #112	; 0x70
            for(y = 0; y < h; y++) {
 8010748:	b21b      	sxth	r3, r3
 801074a:	9304      	str	r3, [sp, #16]
            sh_buf_tmp += corner_size * (a.y2 - ca.y2);
 801074c:	9b06      	ldr	r3, [sp, #24]
 801074e:	c903      	ldmia	r1, {r0, r1}
 8010750:	fb03 2206 	mla	r2, r3, r6, r2
 8010754:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8010756:	e886 0003 	stmia.w	r6, {r0, r1}
            fa.y1 = fa.y2;    /*Fill from bottom to top*/
 801075a:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
            sh_buf_tmp += corner_size * (a.y2 - ca.y2);
 801075e:	9908      	ldr	r1, [sp, #32]
            fa.y1 = fa.y2;    /*Fill from bottom to top*/
 8010760:	f8ad 3086 	strh.w	r3, [sp, #134]	; 0x86
            for(y = 0; y < h; y++) {
 8010764:	9b04      	ldr	r3, [sp, #16]
            sh_buf_tmp += corner_size * (a.y2 - ca.y2);
 8010766:	188e      	adds	r6, r1, r2
            for(y = 0; y < h; y++) {
 8010768:	2b00      	cmp	r3, #0
 801076a:	f77f aae2 	ble.w	800fd32 <lv_draw_rect+0x9b2>
 801076e:	f8cd 9010 	str.w	r9, [sp, #16]
 8010772:	f04f 0800 	mov.w	r8, #0
 8010776:	4699      	mov	r9, r3
 8010778:	ee09 4a90 	vmov	s19, r4
 801077c:	ed9d 9a0a 	vldr	s18, [sp, #40]	; 0x28
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
 8010780:	4631      	mov	r1, r6
 8010782:	463a      	mov	r2, r7
 8010784:	4628      	mov	r0, r5
            for(y = 0; y < h; y++) {
 8010786:	f108 0801 	add.w	r8, r8, #1
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
 801078a:	f004 fc77 	bl	801507c <_lv_memcpy>
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
 801078e:	463b      	mov	r3, r7
 8010790:	f9bd 2086 	ldrsh.w	r2, [sp, #134]	; 0x86
 8010794:	4628      	mov	r0, r5
 8010796:	f9bd 1084 	ldrsh.w	r1, [sp, #132]	; 0x84
                sh_buf_tmp += corner_size;
 801079a:	9c06      	ldr	r4, [sp, #24]
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
 801079c:	f7fd ffd6 	bl	800e74c <lv_draw_mask_apply>
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 80107a0:	f89b 2039 	ldrb.w	r2, [fp, #57]	; 0x39
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
 80107a4:	2801      	cmp	r0, #1
 80107a6:	bf08      	it	eq
 80107a8:	2002      	moveq	r0, #2
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 80107aa:	9907      	ldr	r1, [sp, #28]
 80107ac:	462b      	mov	r3, r5
 80107ae:	9000      	str	r0, [sp, #0]
 80107b0:	4650      	mov	r0, sl
                sh_buf_tmp += corner_size;
 80107b2:	4426      	add	r6, r4
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 80107b4:	e9cd 1201 	strd	r1, r2, [sp, #4]
 80107b8:	ee19 1a10 	vmov	r1, s18
 80107bc:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 80107c0:	f7f9 facc 	bl	8009d5c <_lv_blend_fill>
                fa.y1--;
 80107c4:	f8bd 2086 	ldrh.w	r2, [sp, #134]	; 0x86
                fa.y2--;
 80107c8:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
            for(y = 0; y < h; y++) {
 80107cc:	45c8      	cmp	r8, r9
                fa.y1--;
 80107ce:	f102 32ff 	add.w	r2, r2, #4294967295
                fa.y2--;
 80107d2:	f103 33ff 	add.w	r3, r3, #4294967295
                fa.y1--;
 80107d6:	f8ad 2086 	strh.w	r2, [sp, #134]	; 0x86
                fa.y2--;
 80107da:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
            for(y = 0; y < h; y++) {
 80107de:	d1cf      	bne.n	8010780 <lv_draw_rect+0x1400>
 80107e0:	f8dd 9010 	ldr.w	r9, [sp, #16]
 80107e4:	ee19 4a90 	vmov	r4, s19
 80107e8:	f7ff baa3 	b.w	800fd32 <lv_draw_rect+0x9b2>
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
 80107ec:	ee18 2a10 	vmov	r2, s16
 80107f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80107f2:	4620      	mov	r0, r4
 80107f4:	f003 fd1a 	bl	801422c <_lv_area_is_in>
 80107f8:	2800      	cmp	r0, #0
 80107fa:	f47f ab38 	bne.w	800fe6e <lv_draw_rect+0xaee>
        if(simple_mode) ca.y2 = LV_MATH_MIN(ca.y2, coords->y1);
 80107fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010800:	2b00      	cmp	r3, #0
 8010802:	f040 84f6 	bne.w	80111f2 <lv_draw_rect+0x1e72>
 8010806:	f9bd 0076 	ldrsh.w	r0, [sp, #118]	; 0x76
        sh_buf_tmp = sh_buf + corner_size - 1;
 801080a:	9f06      	ldr	r7, [sp, #24]
        lv_coord_t h = lv_area_get_height(&ca);
 801080c:	f9bd 3072 	ldrsh.w	r3, [sp, #114]	; 0x72
        sh_buf_tmp += corner_size * (ca.y1 - a.y1);
 8010810:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	; 0x6a
        sh_buf_tmp = sh_buf + corner_size - 1;
 8010814:	1e7e      	subs	r6, r7, #1
 8010816:	f1c3 0101 	rsb	r1, r3, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801081a:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
        sh_buf_tmp += corner_size * (ca.y1 - a.y1);
 801081e:	1a9b      	subs	r3, r3, r2
 8010820:	f8bd 2070 	ldrh.w	r2, [sp, #112]	; 0x70
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8010824:	4401      	add	r1, r0
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8010826:	f108 0801 	add.w	r8, r8, #1
 801082a:	fb07 6603 	mla	r6, r7, r3, r6
 801082e:	9b08      	ldr	r3, [sp, #32]
        for(y = 0; y < h; y++) {
 8010830:	b20f      	sxth	r7, r1
 8010832:	eba8 0802 	sub.w	r8, r8, r2
        sh_buf_tmp += corner_size * (ca.y1 - a.y1);
 8010836:	441e      	add	r6, r3
 8010838:	ab1c      	add	r3, sp, #112	; 0x70
 801083a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
        for(y = 0; y < h; y++) {
 801083c:	2f00      	cmp	r7, #0
 801083e:	fa0f f888 	sxth.w	r8, r8
 8010842:	9704      	str	r7, [sp, #16]
 8010844:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010848:	e9c2 0100 	strd	r0, r1, [r2]
        fa.y2 = fa.y1;
 801084c:	f8bd 3086 	ldrh.w	r3, [sp, #134]	; 0x86
 8010850:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
        for(y = 0; y < h; y++) {
 8010854:	f77f ab0b 	ble.w	800fe6e <lv_draw_rect+0xaee>
            _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 8010858:	ee09 4a10 	vmov	s18, r4
 801085c:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
        for(y = 0; y < h; y++) {
 8010860:	2700      	movs	r7, #0
            _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 8010862:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8010866:	4614      	mov	r4, r2
 8010868:	e01b      	b.n	80108a2 <lv_draw_rect+0x1522>
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
 801086a:	2002      	movs	r0, #2
            _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 801086c:	f89b 2039 	ldrb.w	r2, [fp, #57]	; 0x39
 8010870:	21ff      	movs	r1, #255	; 0xff
 8010872:	9000      	str	r0, [sp, #0]
 8010874:	462b      	mov	r3, r5
 8010876:	9101      	str	r1, [sp, #4]
 8010878:	4650      	mov	r0, sl
 801087a:	9202      	str	r2, [sp, #8]
 801087c:	4621      	mov	r1, r4
 801087e:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 8010882:	f7f9 fa6b 	bl	8009d5c <_lv_blend_fill>
            fa.y2++;
 8010886:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
            fa.y1++;
 801088a:	f8bd 2086 	ldrh.w	r2, [sp, #134]	; 0x86
            fa.y2++;
 801088e:	3301      	adds	r3, #1
            fa.y1++;
 8010890:	3201      	adds	r2, #1
            fa.y2++;
 8010892:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
        for(y = 0; y < h; y++) {
 8010896:	9b04      	ldr	r3, [sp, #16]
            fa.y1++;
 8010898:	f8ad 2086 	strh.w	r2, [sp, #134]	; 0x86
        for(y = 0; y < h; y++) {
 801089c:	42bb      	cmp	r3, r7
 801089e:	f000 8402 	beq.w	80110a6 <lv_draw_rect+0x1d26>
            lv_opa_t opa_tmp = sh_buf_tmp[0];
 80108a2:	7831      	ldrb	r1, [r6, #0]
            _lv_memset(mask_buf, opa_tmp, w);
 80108a4:	4642      	mov	r2, r8
            sh_buf_tmp += corner_size;
 80108a6:	9b06      	ldr	r3, [sp, #24]
            _lv_memset(mask_buf, opa_tmp, w);
 80108a8:	4628      	mov	r0, r5
            if(opa_tmp != LV_OPA_COVER || opa != LV_OPA_COVER) opa_tmp = (opa * opa_tmp) >> 8;
 80108aa:	fb19 fc01 	smulbb	ip, r9, r1
        for(y = 0; y < h; y++) {
 80108ae:	3701      	adds	r7, #1
            sh_buf_tmp += corner_size;
 80108b0:	441e      	add	r6, r3
            if(opa_tmp != LV_OPA_COVER || opa != LV_OPA_COVER) opa_tmp = (opa * opa_tmp) >> 8;
 80108b2:	ea09 0301 	and.w	r3, r9, r1
 80108b6:	2bff      	cmp	r3, #255	; 0xff
 80108b8:	bf18      	it	ne
 80108ba:	f3cc 2107 	ubfxne	r1, ip, #8, #8
            _lv_memset(mask_buf, opa_tmp, w);
 80108be:	f004 fef9 	bl	80156b4 <_lv_memset>
            if(simple_mode) {
 80108c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d1d0      	bne.n	801086a <lv_draw_rect+0x14ea>
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
 80108c8:	4643      	mov	r3, r8
 80108ca:	f9bd 2086 	ldrsh.w	r2, [sp, #134]	; 0x86
 80108ce:	f9bd 1084 	ldrsh.w	r1, [sp, #132]	; 0x84
 80108d2:	4628      	mov	r0, r5
 80108d4:	f7fd ff3a 	bl	800e74c <lv_draw_mask_apply>
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
 80108d8:	2801      	cmp	r0, #1
 80108da:	d1c7      	bne.n	801086c <lv_draw_rect+0x14ec>
 80108dc:	e7c5      	b.n	801086a <lv_draw_rect+0x14ea>
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
 80108de:	ee18 2a10 	vmov	r2, s16
 80108e2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80108e4:	4620      	mov	r0, r4
 80108e6:	f003 fca1 	bl	801422c <_lv_area_is_in>
 80108ea:	2800      	cmp	r0, #0
 80108ec:	f47f aadb 	bne.w	800fea6 <lv_draw_rect+0xb26>
        if(simple_mode) ca.y1 = LV_MATH_MAX(ca.y1, coords->y2);
 80108f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	f040 8470 	bne.w	80111d8 <lv_draw_rect+0x1e58>
 80108f8:	f9bd 0072 	ldrsh.w	r0, [sp, #114]	; 0x72
        lv_coord_t h = lv_area_get_height(&ca);
 80108fc:	f9bd 3076 	ldrsh.w	r3, [sp, #118]	; 0x76
        sh_buf_tmp = sh_buf + corner_size - 1;
 8010900:	9f06      	ldr	r7, [sp, #24]
        sh_buf_tmp += corner_size * (a.y2 - ca.y2);
 8010902:	f9bd 206e 	ldrsh.w	r2, [sp, #110]	; 0x6e
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8010906:	1c59      	adds	r1, r3, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8010908:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
        sh_buf_tmp = sh_buf + corner_size - 1;
 801090c:	1e7e      	subs	r6, r7, #1
        sh_buf_tmp += corner_size * (a.y2 - ca.y2);
 801090e:	1ad2      	subs	r2, r2, r3
 8010910:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8010914:	f108 0801 	add.w	r8, r8, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8010918:	1a09      	subs	r1, r1, r0
 801091a:	fb07 6602 	mla	r6, r7, r2, r6
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801091e:	eba8 0803 	sub.w	r8, r8, r3
 8010922:	9b08      	ldr	r3, [sp, #32]
        for(y = 0; y < h; y++) {
 8010924:	b20a      	sxth	r2, r1
        sh_buf_tmp += corner_size * (a.y2 - ca.y2);
 8010926:	441e      	add	r6, r3
 8010928:	ab1c      	add	r3, sp, #112	; 0x70
        for(y = 0; y < h; y++) {
 801092a:	2a00      	cmp	r2, #0
 801092c:	fa0f f888 	sxth.w	r8, r8
 8010930:	9204      	str	r2, [sp, #16]
 8010932:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010936:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010938:	e883 0003 	stmia.w	r3, {r0, r1}
        fa.y1 = fa.y2;
 801093c:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
 8010940:	f8ad 3086 	strh.w	r3, [sp, #134]	; 0x86
        for(y = 0; y < h; y++) {
 8010944:	f77f aaaf 	ble.w	800fea6 <lv_draw_rect+0xb26>
            _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 8010948:	ee09 4a10 	vmov	s18, r4
 801094c:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
        for(y = 0; y < h; y++) {
 8010950:	2700      	movs	r7, #0
            _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 8010952:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8010956:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8010958:	e01b      	b.n	8010992 <lv_draw_rect+0x1612>
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
 801095a:	2002      	movs	r0, #2
            _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 801095c:	f89b 2039 	ldrb.w	r2, [fp, #57]	; 0x39
 8010960:	21ff      	movs	r1, #255	; 0xff
 8010962:	9000      	str	r0, [sp, #0]
 8010964:	462b      	mov	r3, r5
 8010966:	9101      	str	r1, [sp, #4]
 8010968:	4650      	mov	r0, sl
 801096a:	9202      	str	r2, [sp, #8]
 801096c:	4621      	mov	r1, r4
 801096e:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 8010972:	f7f9 f9f3 	bl	8009d5c <_lv_blend_fill>
            fa.y2--;
 8010976:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
            fa.y1--;
 801097a:	f8bd 2086 	ldrh.w	r2, [sp, #134]	; 0x86
            fa.y2--;
 801097e:	3b01      	subs	r3, #1
            fa.y1--;
 8010980:	3a01      	subs	r2, #1
            fa.y2--;
 8010982:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
        for(y = 0; y < h; y++) {
 8010986:	9b04      	ldr	r3, [sp, #16]
            fa.y1--;
 8010988:	f8ad 2086 	strh.w	r2, [sp, #134]	; 0x86
        for(y = 0; y < h; y++) {
 801098c:	42bb      	cmp	r3, r7
 801098e:	f000 8390 	beq.w	80110b2 <lv_draw_rect+0x1d32>
            lv_opa_t opa_tmp = sh_buf_tmp[0];
 8010992:	7831      	ldrb	r1, [r6, #0]
            _lv_memset(mask_buf, opa_tmp, w);
 8010994:	4642      	mov	r2, r8
            sh_buf_tmp += corner_size;
 8010996:	9b06      	ldr	r3, [sp, #24]
            _lv_memset(mask_buf, opa_tmp, w);
 8010998:	4628      	mov	r0, r5
            if(opa_tmp != LV_OPA_COVER || opa != LV_OPA_COVER) opa_tmp = (opa * opa_tmp) >> 8;
 801099a:	fb19 fc01 	smulbb	ip, r9, r1
        for(y = 0; y < h; y++) {
 801099e:	3701      	adds	r7, #1
            sh_buf_tmp += corner_size;
 80109a0:	441e      	add	r6, r3
            if(opa_tmp != LV_OPA_COVER || opa != LV_OPA_COVER) opa_tmp = (opa * opa_tmp) >> 8;
 80109a2:	ea09 0301 	and.w	r3, r9, r1
 80109a6:	2bff      	cmp	r3, #255	; 0xff
 80109a8:	bf18      	it	ne
 80109aa:	f3cc 2107 	ubfxne	r1, ip, #8, #8
            _lv_memset(mask_buf, opa_tmp, w);
 80109ae:	f004 fe81 	bl	80156b4 <_lv_memset>
            if(simple_mode) {
 80109b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	d1d0      	bne.n	801095a <lv_draw_rect+0x15da>
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
 80109b8:	4643      	mov	r3, r8
 80109ba:	f9bd 2086 	ldrsh.w	r2, [sp, #134]	; 0x86
 80109be:	f9bd 1084 	ldrsh.w	r1, [sp, #132]	; 0x84
 80109c2:	4628      	mov	r0, r5
 80109c4:	f7fd fec2 	bl	800e74c <lv_draw_mask_apply>
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
 80109c8:	2801      	cmp	r0, #1
 80109ca:	d1c7      	bne.n	801095c <lv_draw_rect+0x15dc>
 80109cc:	e7c5      	b.n	801095a <lv_draw_rect+0x15da>
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
 80109ce:	ee18 2a10 	vmov	r2, s16
 80109d2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80109d4:	4620      	mov	r0, r4
 80109d6:	f003 fc29 	bl	801422c <_lv_area_is_in>
 80109da:	2800      	cmp	r0, #0
 80109dc:	f47f aa11 	bne.w	800fe02 <lv_draw_rect+0xa82>
        if(ca.y1 <= h_half) ca.y1 = h_half + 1;
 80109e0:	f9bd 3072 	ldrsh.w	r3, [sp, #114]	; 0x72
 80109e4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80109e6:	429a      	cmp	r2, r3
 80109e8:	f280 841d 	bge.w	8011226 <lv_draw_rect+0x1ea6>
 80109ec:	b29b      	uxth	r3, r3
        if(ca.x2 > w_half) ca.x2 = w_half;
 80109ee:	f9bd 2074 	ldrsh.w	r2, [sp, #116]	; 0x74
 80109f2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80109f4:	4291      	cmp	r1, r2
 80109f6:	f2c0 8412 	blt.w	801121e <lv_draw_rect+0x1e9e>
 80109fa:	b292      	uxth	r2, r2
 80109fc:	9210      	str	r2, [sp, #64]	; 0x40
        lv_coord_t w = lv_area_get_width(&ca);
 80109fe:	f9bd 2070 	ldrsh.w	r2, [sp, #112]	; 0x70
 8010a02:	9910      	ldr	r1, [sp, #64]	; 0x40
 8010a04:	f1c2 0601 	rsb	r6, r2, #1
 8010a08:	4431      	add	r1, r6
 8010a0a:	b20e      	sxth	r6, r1
        if(w > 0) {
 8010a0c:	2e00      	cmp	r6, #0
 8010a0e:	f77f a9f8 	ble.w	800fe02 <lv_draw_rect+0xa82>
        lv_coord_t h = lv_area_get_height(&ca);
 8010a12:	f9bd 1076 	ldrsh.w	r1, [sp, #118]	; 0x76
            sh_buf_tmp = sh_buf + (ca.x1 - a.x1);
 8010a16:	f9bd 0068 	ldrsh.w	r0, [sp, #104]	; 0x68
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8010a1a:	f101 0c01 	add.w	ip, r1, #1
            sh_buf_tmp += corner_size * (a.y2 - ca.y2);
 8010a1e:	f9bd 706e 	ldrsh.w	r7, [sp, #110]	; 0x6e
            sh_buf_tmp = sh_buf + (ca.x1 - a.x1);
 8010a22:	1a12      	subs	r2, r2, r0
 8010a24:	ebac 0303 	sub.w	r3, ip, r3
            sh_buf_tmp += corner_size * (a.y2 - ca.y2);
 8010a28:	1a7f      	subs	r7, r7, r1
 8010a2a:	a91c      	add	r1, sp, #112	; 0x70
            for(y = 0; y < h; y++) {
 8010a2c:	b21b      	sxth	r3, r3
 8010a2e:	9304      	str	r3, [sp, #16]
            sh_buf_tmp += corner_size * (a.y2 - ca.y2);
 8010a30:	9b06      	ldr	r3, [sp, #24]
 8010a32:	c903      	ldmia	r1, {r0, r1}
 8010a34:	fb03 2207 	mla	r2, r3, r7, r2
 8010a38:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8010a3a:	e887 0003 	stmia.w	r7, {r0, r1}
            fa.y1 = fa.y2;    /*Fill from bottom to top*/
 8010a3e:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
            sh_buf_tmp += corner_size * (a.y2 - ca.y2);
 8010a42:	9908      	ldr	r1, [sp, #32]
            fa.y1 = fa.y2;    /*Fill from bottom to top*/
 8010a44:	f8ad 3086 	strh.w	r3, [sp, #134]	; 0x86
            for(y = 0; y < h; y++) {
 8010a48:	9b04      	ldr	r3, [sp, #16]
            sh_buf_tmp += corner_size * (a.y2 - ca.y2);
 8010a4a:	188f      	adds	r7, r1, r2
            for(y = 0; y < h; y++) {
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	f77f a9d8 	ble.w	800fe02 <lv_draw_rect+0xa82>
 8010a52:	f8cd 9010 	str.w	r9, [sp, #16]
 8010a56:	f04f 0800 	mov.w	r8, #0
 8010a5a:	4699      	mov	r9, r3
 8010a5c:	ee09 4a90 	vmov	s19, r4
 8010a60:	ed9d 9a0a 	vldr	s18, [sp, #40]	; 0x28
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
 8010a64:	4639      	mov	r1, r7
 8010a66:	4632      	mov	r2, r6
 8010a68:	4628      	mov	r0, r5
            for(y = 0; y < h; y++) {
 8010a6a:	f108 0801 	add.w	r8, r8, #1
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
 8010a6e:	f004 fb05 	bl	801507c <_lv_memcpy>
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
 8010a72:	4633      	mov	r3, r6
 8010a74:	f9bd 2086 	ldrsh.w	r2, [sp, #134]	; 0x86
 8010a78:	4628      	mov	r0, r5
 8010a7a:	f9bd 1084 	ldrsh.w	r1, [sp, #132]	; 0x84
                sh_buf_tmp += corner_size;
 8010a7e:	9c06      	ldr	r4, [sp, #24]
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
 8010a80:	f7fd fe64 	bl	800e74c <lv_draw_mask_apply>
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 8010a84:	f89b 2039 	ldrb.w	r2, [fp, #57]	; 0x39
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
 8010a88:	2801      	cmp	r0, #1
 8010a8a:	bf08      	it	eq
 8010a8c:	2002      	moveq	r0, #2
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 8010a8e:	9907      	ldr	r1, [sp, #28]
 8010a90:	462b      	mov	r3, r5
 8010a92:	9000      	str	r0, [sp, #0]
 8010a94:	4650      	mov	r0, sl
                sh_buf_tmp += corner_size;
 8010a96:	4427      	add	r7, r4
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 8010a98:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8010a9c:	ee19 1a10 	vmov	r1, s18
 8010aa0:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 8010aa4:	f7f9 f95a 	bl	8009d5c <_lv_blend_fill>
                fa.y1--;
 8010aa8:	f8bd 2086 	ldrh.w	r2, [sp, #134]	; 0x86
                fa.y2--;
 8010aac:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
            for(y = 0; y < h; y++) {
 8010ab0:	45c8      	cmp	r8, r9
                fa.y1--;
 8010ab2:	f102 32ff 	add.w	r2, r2, #4294967295
                fa.y2--;
 8010ab6:	f103 33ff 	add.w	r3, r3, #4294967295
                fa.y1--;
 8010aba:	f8ad 2086 	strh.w	r2, [sp, #134]	; 0x86
                fa.y2--;
 8010abe:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
            for(y = 0; y < h; y++) {
 8010ac2:	d1cf      	bne.n	8010a64 <lv_draw_rect+0x16e4>
 8010ac4:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8010ac8:	ee19 4a90 	vmov	r4, s19
 8010acc:	f7ff b999 	b.w	800fe02 <lv_draw_rect+0xa82>
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
 8010ad0:	ee18 2a10 	vmov	r2, s16
 8010ad4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010ad6:	4620      	mov	r0, r4
 8010ad8:	f003 fba8 	bl	801422c <_lv_area_is_in>
 8010adc:	2800      	cmp	r0, #0
 8010ade:	f47f a977 	bne.w	800fdd0 <lv_draw_rect+0xa50>
        if(ca.y2 > h_half) ca.y2 = h_half;
 8010ae2:	f9bd 3076 	ldrsh.w	r3, [sp, #118]	; 0x76
 8010ae6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010ae8:	429a      	cmp	r2, r3
 8010aea:	f2c0 8393 	blt.w	8011214 <lv_draw_rect+0x1e94>
 8010aee:	b29a      	uxth	r2, r3
        if(ca.x2 > w_half) ca.x2 = w_half;
 8010af0:	f9bd 3074 	ldrsh.w	r3, [sp, #116]	; 0x74
 8010af4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8010af6:	4299      	cmp	r1, r3
 8010af8:	f2c0 8388 	blt.w	801120c <lv_draw_rect+0x1e8c>
 8010afc:	b29f      	uxth	r7, r3
        lv_coord_t w = lv_area_get_width(&ca);
 8010afe:	f9bd 3070 	ldrsh.w	r3, [sp, #112]	; 0x70
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8010b02:	f1c3 0101 	rsb	r1, r3, #1
 8010b06:	440f      	add	r7, r1
 8010b08:	b23f      	sxth	r7, r7
        if(w > 0) {
 8010b0a:	2f00      	cmp	r7, #0
 8010b0c:	f77f a960 	ble.w	800fdd0 <lv_draw_rect+0xa50>
        lv_coord_t h = lv_area_get_height(&ca);
 8010b10:	f9bd 6072 	ldrsh.w	r6, [sp, #114]	; 0x72
            sh_buf_tmp += corner_size * (ca.y1 - a.y1);
 8010b14:	f9bd 006a 	ldrsh.w	r0, [sp, #106]	; 0x6a
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8010b18:	f1c6 0c01 	rsb	ip, r6, #1
            sh_buf_tmp = sh_buf + (ca.x1 - a.x1);
 8010b1c:	f9bd 1068 	ldrsh.w	r1, [sp, #104]	; 0x68
            sh_buf_tmp += corner_size * (ca.y1 - a.y1);
 8010b20:	1a36      	subs	r6, r6, r0
 8010b22:	4462      	add	r2, ip
            sh_buf_tmp = sh_buf + (ca.x1 - a.x1);
 8010b24:	1a5b      	subs	r3, r3, r1
 8010b26:	a91c      	add	r1, sp, #112	; 0x70
            for(y = 0; y < h; y++) {
 8010b28:	b212      	sxth	r2, r2
 8010b2a:	9204      	str	r2, [sp, #16]
            sh_buf_tmp += corner_size * (ca.y1 - a.y1);
 8010b2c:	9a06      	ldr	r2, [sp, #24]
 8010b2e:	c903      	ldmia	r1, {r0, r1}
 8010b30:	fb02 3306 	mla	r3, r2, r6, r3
 8010b34:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8010b36:	e886 0003 	stmia.w	r6, {r0, r1}
 8010b3a:	9908      	ldr	r1, [sp, #32]
            fa.y2 = fa.y1;
 8010b3c:	f8bd 2086 	ldrh.w	r2, [sp, #134]	; 0x86
            sh_buf_tmp += corner_size * (ca.y1 - a.y1);
 8010b40:	18ce      	adds	r6, r1, r3
            for(y = 0; y < h; y++) {
 8010b42:	9b04      	ldr	r3, [sp, #16]
            fa.y2 = fa.y1;
 8010b44:	f8ad 208a 	strh.w	r2, [sp, #138]	; 0x8a
            for(y = 0; y < h; y++) {
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	f77f a941 	ble.w	800fdd0 <lv_draw_rect+0xa50>
 8010b4e:	f8cd 9010 	str.w	r9, [sp, #16]
 8010b52:	f04f 0800 	mov.w	r8, #0
 8010b56:	4699      	mov	r9, r3
 8010b58:	ee09 4a90 	vmov	s19, r4
 8010b5c:	ed9d 9a0a 	vldr	s18, [sp, #40]	; 0x28
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
 8010b60:	4631      	mov	r1, r6
 8010b62:	463a      	mov	r2, r7
 8010b64:	4628      	mov	r0, r5
            for(y = 0; y < h; y++) {
 8010b66:	f108 0801 	add.w	r8, r8, #1
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
 8010b6a:	f004 fa87 	bl	801507c <_lv_memcpy>
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
 8010b6e:	463b      	mov	r3, r7
 8010b70:	f9bd 2086 	ldrsh.w	r2, [sp, #134]	; 0x86
 8010b74:	4628      	mov	r0, r5
 8010b76:	f9bd 1084 	ldrsh.w	r1, [sp, #132]	; 0x84
                sh_buf_tmp += corner_size;
 8010b7a:	9c06      	ldr	r4, [sp, #24]
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
 8010b7c:	f7fd fde6 	bl	800e74c <lv_draw_mask_apply>
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 8010b80:	f89b 2039 	ldrb.w	r2, [fp, #57]	; 0x39
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
 8010b84:	2801      	cmp	r0, #1
 8010b86:	bf08      	it	eq
 8010b88:	2002      	moveq	r0, #2
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 8010b8a:	9907      	ldr	r1, [sp, #28]
 8010b8c:	462b      	mov	r3, r5
 8010b8e:	9000      	str	r0, [sp, #0]
 8010b90:	4650      	mov	r0, sl
                sh_buf_tmp += corner_size;
 8010b92:	4426      	add	r6, r4
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 8010b94:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8010b98:	ee19 1a10 	vmov	r1, s18
 8010b9c:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 8010ba0:	f7f9 f8dc 	bl	8009d5c <_lv_blend_fill>
                fa.y1++;
 8010ba4:	f8bd 2086 	ldrh.w	r2, [sp, #134]	; 0x86
                fa.y2++;
 8010ba8:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
            for(y = 0; y < h; y++) {
 8010bac:	45c8      	cmp	r8, r9
                fa.y1++;
 8010bae:	f102 0201 	add.w	r2, r2, #1
                fa.y2++;
 8010bb2:	f103 0301 	add.w	r3, r3, #1
                fa.y1++;
 8010bb6:	f8ad 2086 	strh.w	r2, [sp, #134]	; 0x86
                fa.y2++;
 8010bba:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
            for(y = 0; y < h; y++) {
 8010bbe:	d1cf      	bne.n	8010b60 <lv_draw_rect+0x17e0>
 8010bc0:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8010bc4:	ee19 4a90 	vmov	r4, s19
 8010bc8:	f7ff b902 	b.w	800fdd0 <lv_draw_rect+0xa50>
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
 8010bcc:	ee18 2a10 	vmov	r2, s16
 8010bd0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010bd2:	4620      	mov	r0, r4
 8010bd4:	f003 fb2a 	bl	801422c <_lv_area_is_in>
 8010bd8:	2800      	cmp	r0, #0
 8010bda:	f47f a92d 	bne.w	800fe38 <lv_draw_rect+0xab8>
        if(simple_mode) ca.x2 = LV_MATH_MIN(coords->x1, ca.x2);
 8010bde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	f040 82d4 	bne.w	801118e <lv_draw_rect+0x1e0e>
 8010be6:	f9bd 2074 	ldrsh.w	r2, [sp, #116]	; 0x74
        lv_coord_t w = lv_area_get_width(&ca);
 8010bea:	f9bd 1070 	ldrsh.w	r1, [sp, #112]	; 0x70
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8010bee:	f1c1 0701 	rsb	r7, r1, #1
 8010bf2:	4417      	add	r7, r2
 8010bf4:	b23f      	sxth	r7, r7
        if(w > 0) {
 8010bf6:	2f00      	cmp	r7, #0
 8010bf8:	f77f a91e 	ble.w	800fe38 <lv_draw_rect+0xab8>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8010bfc:	f8bd 3076 	ldrh.w	r3, [sp, #118]	; 0x76
            sh_buf_tmp = sh_buf + corner_size * (corner_size - 1);
 8010c00:	9e06      	ldr	r6, [sp, #24]
 8010c02:	1c58      	adds	r0, r3, #1
 8010c04:	f8bd 2072 	ldrh.w	r2, [sp, #114]	; 0x72
            sh_buf_tmp += ca.x1 - a.x1;
 8010c08:	f9bd 3068 	ldrsh.w	r3, [sp, #104]	; 0x68
            sh_buf_tmp = sh_buf + corner_size * (corner_size - 1);
 8010c0c:	f106 38ff 	add.w	r8, r6, #4294967295
 8010c10:	1a82      	subs	r2, r0, r2
            sh_buf_tmp += ca.x1 - a.x1;
 8010c12:	1acb      	subs	r3, r1, r3
 8010c14:	a91c      	add	r1, sp, #112	; 0x70
 8010c16:	b212      	sxth	r2, r2
 8010c18:	fb06 3308 	mla	r3, r6, r8, r3
 8010c1c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8010c1e:	9204      	str	r2, [sp, #16]
 8010c20:	c903      	ldmia	r1, {r0, r1}
 8010c22:	e886 0003 	stmia.w	r6, {r0, r1}
            fa.y2 = fa.y1;
 8010c26:	f8bd 2086 	ldrh.w	r2, [sp, #134]	; 0x86
            sh_buf_tmp += ca.x1 - a.x1;
 8010c2a:	9908      	ldr	r1, [sp, #32]
            fa.y2 = fa.y1;
 8010c2c:	f8ad 208a 	strh.w	r2, [sp, #138]	; 0x8a
            for(y = 0; y < h; y++) {
 8010c30:	9a04      	ldr	r2, [sp, #16]
            sh_buf_tmp += ca.x1 - a.x1;
 8010c32:	eb01 0803 	add.w	r8, r1, r3
            for(y = 0; y < h; y++) {
 8010c36:	2a00      	cmp	r2, #0
 8010c38:	f77f a8fe 	ble.w	800fe38 <lv_draw_rect+0xab8>
 8010c3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	f000 8322 	beq.w	8011288 <lv_draw_rect+0x1f08>
                _lv_blend_fill(clip, &fa,
 8010c44:	ee09 4a10 	vmov	s18, r4
 8010c48:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
            for(y = 0; y < h; y++) {
 8010c4c:	2600      	movs	r6, #0
                _lv_blend_fill(clip, &fa,
 8010c4e:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8010c52:	9c0a      	ldr	r4, [sp, #40]	; 0x28
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
 8010c54:	463a      	mov	r2, r7
 8010c56:	4641      	mov	r1, r8
 8010c58:	4628      	mov	r0, r5
            for(y = 0; y < h; y++) {
 8010c5a:	3601      	adds	r6, #1
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
 8010c5c:	f004 fa0e 	bl	801507c <_lv_memcpy>
                _lv_blend_fill(clip, &fa,
 8010c60:	f89b 0039 	ldrb.w	r0, [fp, #57]	; 0x39
 8010c64:	f89b 2038 	ldrb.w	r2, [fp, #56]	; 0x38
 8010c68:	2102      	movs	r1, #2
 8010c6a:	9002      	str	r0, [sp, #8]
 8010c6c:	462b      	mov	r3, r5
 8010c6e:	9100      	str	r1, [sp, #0]
 8010c70:	4650      	mov	r0, sl
 8010c72:	9201      	str	r2, [sp, #4]
 8010c74:	4621      	mov	r1, r4
 8010c76:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 8010c7a:	f7f9 f86f 	bl	8009d5c <_lv_blend_fill>
                fa.y1++;
 8010c7e:	f8bd 2086 	ldrh.w	r2, [sp, #134]	; 0x86
                fa.y2++;
 8010c82:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
            for(y = 0; y < h; y++) {
 8010c86:	454e      	cmp	r6, r9
                fa.y1++;
 8010c88:	f102 0201 	add.w	r2, r2, #1
                fa.y2++;
 8010c8c:	f103 0301 	add.w	r3, r3, #1
                fa.y1++;
 8010c90:	f8ad 2086 	strh.w	r2, [sp, #134]	; 0x86
                fa.y2++;
 8010c94:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
            for(y = 0; y < h; y++) {
 8010c98:	d1dc      	bne.n	8010c54 <lv_draw_rect+0x18d4>
 8010c9a:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8010c9e:	ee19 4a10 	vmov	r4, s18
 8010ca2:	f7ff b8c9 	b.w	800fe38 <lv_draw_rect+0xab8>
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
 8010ca6:	ee18 2a10 	vmov	r2, s16
 8010caa:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010cac:	4620      	mov	r0, r4
 8010cae:	f003 fabd 	bl	801422c <_lv_area_is_in>
 8010cb2:	2800      	cmp	r0, #0
 8010cb4:	f47f a859 	bne.w	800fd6a <lv_draw_rect+0x9ea>
        if(simple_mode) ca.x1 = LV_MATH_MAX(ca.x1, coords->x2);
 8010cb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	f040 825c 	bne.w	8011178 <lv_draw_rect+0x1df8>
 8010cc0:	f9bd 3070 	ldrsh.w	r3, [sp, #112]	; 0x70
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8010cc4:	f8bd 7074 	ldrh.w	r7, [sp, #116]	; 0x74
 8010cc8:	3701      	adds	r7, #1
 8010cca:	1aff      	subs	r7, r7, r3
 8010ccc:	b23f      	sxth	r7, r7
        if(w > 0) {
 8010cce:	2f00      	cmp	r7, #0
 8010cd0:	f77f a84b 	ble.w	800fd6a <lv_draw_rect+0x9ea>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8010cd4:	f8bd 2076 	ldrh.w	r2, [sp, #118]	; 0x76
            sh_buf_tmp = sh_buf + corner_size * (corner_size - 1);
 8010cd8:	9906      	ldr	r1, [sp, #24]
 8010cda:	1c50      	adds	r0, r2, #1
            sh_buf_tmp += ca.x1 - a.x1;
 8010cdc:	f9bd 2068 	ldrsh.w	r2, [sp, #104]	; 0x68
            sh_buf_tmp = sh_buf + corner_size * (corner_size - 1);
 8010ce0:	f101 38ff 	add.w	r8, r1, #4294967295
 8010ce4:	f8bd 1072 	ldrh.w	r1, [sp, #114]	; 0x72
            sh_buf_tmp += ca.x1 - a.x1;
 8010ce8:	1a9b      	subs	r3, r3, r2
 8010cea:	9a06      	ldr	r2, [sp, #24]
 8010cec:	1a46      	subs	r6, r0, r1
 8010cee:	a81c      	add	r0, sp, #112	; 0x70
 8010cf0:	fb02 3308 	mla	r3, r2, r8, r3
 8010cf4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010cf6:	b236      	sxth	r6, r6
 8010cf8:	c803      	ldmia	r0, {r0, r1}
            for(y = 0; y < h; y++) {
 8010cfa:	2e00      	cmp	r6, #0
 8010cfc:	46b4      	mov	ip, r6
            sh_buf_tmp += ca.x1 - a.x1;
 8010cfe:	e882 0003 	stmia.w	r2, {r0, r1}
 8010d02:	9908      	ldr	r1, [sp, #32]
            fa.y2 = fa.y1;
 8010d04:	f8bd 2086 	ldrh.w	r2, [sp, #134]	; 0x86
            sh_buf_tmp += ca.x1 - a.x1;
 8010d08:	eb01 0803 	add.w	r8, r1, r3
            fa.y2 = fa.y1;
 8010d0c:	f8ad 208a 	strh.w	r2, [sp, #138]	; 0x8a
            for(y = 0; y < h; y++) {
 8010d10:	f77f a82b 	ble.w	800fd6a <lv_draw_rect+0x9ea>
 8010d14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010d16:	2b00      	cmp	r3, #0
 8010d18:	f000 82eb 	beq.w	80112f2 <lv_draw_rect+0x1f72>
                _lv_blend_fill(clip, &fa,
 8010d1c:	ee09 4a10 	vmov	s18, r4
 8010d20:	f8cd 9010 	str.w	r9, [sp, #16]
            for(y = 0; y < h; y++) {
 8010d24:	2600      	movs	r6, #0
                _lv_blend_fill(clip, &fa,
 8010d26:	46e1      	mov	r9, ip
 8010d28:	9c0a      	ldr	r4, [sp, #40]	; 0x28
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
 8010d2a:	463a      	mov	r2, r7
 8010d2c:	4641      	mov	r1, r8
 8010d2e:	4628      	mov	r0, r5
            for(y = 0; y < h; y++) {
 8010d30:	3601      	adds	r6, #1
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
 8010d32:	f004 f9a3 	bl	801507c <_lv_memcpy>
                _lv_blend_fill(clip, &fa,
 8010d36:	f89b 0039 	ldrb.w	r0, [fp, #57]	; 0x39
 8010d3a:	f89b 2038 	ldrb.w	r2, [fp, #56]	; 0x38
 8010d3e:	2102      	movs	r1, #2
 8010d40:	9002      	str	r0, [sp, #8]
 8010d42:	462b      	mov	r3, r5
 8010d44:	9100      	str	r1, [sp, #0]
 8010d46:	4650      	mov	r0, sl
 8010d48:	9201      	str	r2, [sp, #4]
 8010d4a:	4621      	mov	r1, r4
 8010d4c:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 8010d50:	f7f9 f804 	bl	8009d5c <_lv_blend_fill>
                fa.y1++;
 8010d54:	f8bd 2086 	ldrh.w	r2, [sp, #134]	; 0x86
                fa.y2++;
 8010d58:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
            for(y = 0; y < h; y++) {
 8010d5c:	454e      	cmp	r6, r9
                fa.y1++;
 8010d5e:	f102 0201 	add.w	r2, r2, #1
                fa.y2++;
 8010d62:	f103 0301 	add.w	r3, r3, #1
                fa.y1++;
 8010d66:	f8ad 2086 	strh.w	r2, [sp, #134]	; 0x86
                fa.y2++;
 8010d6a:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
            for(y = 0; y < h; y++) {
 8010d6e:	d1dc      	bne.n	8010d2a <lv_draw_rect+0x19aa>
 8010d70:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8010d74:	ee19 4a10 	vmov	r4, s18
 8010d78:	f7fe bff7 	b.w	800fd6a <lv_draw_rect+0x9ea>
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
 8010d7c:	ee18 2a10 	vmov	r2, s16
 8010d80:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010d82:	4620      	mov	r0, r4
 8010d84:	f003 fa52 	bl	801422c <_lv_area_is_in>
 8010d88:	2800      	cmp	r0, #0
 8010d8a:	f47e afba 	bne.w	800fd02 <lv_draw_rect+0x982>
        if(ca.y2 > h_half) ca.y2 = h_half;
 8010d8e:	f9bd 2076 	ldrsh.w	r2, [sp, #118]	; 0x76
 8010d92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010d94:	4293      	cmp	r3, r2
 8010d96:	f2c0 821b 	blt.w	80111d0 <lv_draw_rect+0x1e50>
 8010d9a:	b292      	uxth	r2, r2
        if(ca.x1 <= w_half) ca.x1 = w_half + 1;
 8010d9c:	f9bd 3070 	ldrsh.w	r3, [sp, #112]	; 0x70
 8010da0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8010da2:	4299      	cmp	r1, r3
 8010da4:	f280 820d 	bge.w	80111c2 <lv_draw_rect+0x1e42>
 8010da8:	b299      	uxth	r1, r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8010daa:	f8bd 7074 	ldrh.w	r7, [sp, #116]	; 0x74
 8010dae:	3701      	adds	r7, #1
 8010db0:	1a7f      	subs	r7, r7, r1
 8010db2:	b23f      	sxth	r7, r7
        if(w > 0) {
 8010db4:	2f00      	cmp	r7, #0
 8010db6:	f77e afa4 	ble.w	800fd02 <lv_draw_rect+0x982>
        lv_coord_t h = lv_area_get_height(&ca);
 8010dba:	f9bd 6072 	ldrsh.w	r6, [sp, #114]	; 0x72
            sh_buf_tmp += corner_size * (ca.y1 - a.y1);
 8010dbe:	f9bd 006a 	ldrsh.w	r0, [sp, #106]	; 0x6a
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8010dc2:	f1c6 0c01 	rsb	ip, r6, #1
            sh_buf_tmp = sh_buf + (ca.x1 - a.x1);
 8010dc6:	f9bd 1068 	ldrsh.w	r1, [sp, #104]	; 0x68
            sh_buf_tmp += corner_size * (ca.y1 - a.y1);
 8010dca:	1a36      	subs	r6, r6, r0
 8010dcc:	4462      	add	r2, ip
            sh_buf_tmp = sh_buf + (ca.x1 - a.x1);
 8010dce:	1a5b      	subs	r3, r3, r1
 8010dd0:	a91c      	add	r1, sp, #112	; 0x70
            for(y = 0; y < h; y++) {
 8010dd2:	b212      	sxth	r2, r2
 8010dd4:	9204      	str	r2, [sp, #16]
            sh_buf_tmp += corner_size * (ca.y1 - a.y1);
 8010dd6:	9a06      	ldr	r2, [sp, #24]
 8010dd8:	c903      	ldmia	r1, {r0, r1}
 8010dda:	fb02 3306 	mla	r3, r2, r6, r3
 8010dde:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8010de0:	e886 0003 	stmia.w	r6, {r0, r1}
 8010de4:	9908      	ldr	r1, [sp, #32]
            fa.y2 = fa.y1;
 8010de6:	f8bd 2086 	ldrh.w	r2, [sp, #134]	; 0x86
            sh_buf_tmp += corner_size * (ca.y1 - a.y1);
 8010dea:	18ce      	adds	r6, r1, r3
            for(y = 0; y < h; y++) {
 8010dec:	9b04      	ldr	r3, [sp, #16]
            fa.y2 = fa.y1;
 8010dee:	f8ad 208a 	strh.w	r2, [sp, #138]	; 0x8a
            for(y = 0; y < h; y++) {
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	f77e af85 	ble.w	800fd02 <lv_draw_rect+0x982>
 8010df8:	f8cd 9010 	str.w	r9, [sp, #16]
 8010dfc:	f04f 0800 	mov.w	r8, #0
 8010e00:	4699      	mov	r9, r3
 8010e02:	ee09 4a90 	vmov	s19, r4
 8010e06:	ed9d 9a0a 	vldr	s18, [sp, #40]	; 0x28
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
 8010e0a:	4631      	mov	r1, r6
 8010e0c:	463a      	mov	r2, r7
 8010e0e:	4628      	mov	r0, r5
            for(y = 0; y < h; y++) {
 8010e10:	f108 0801 	add.w	r8, r8, #1
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
 8010e14:	f004 f932 	bl	801507c <_lv_memcpy>
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
 8010e18:	463b      	mov	r3, r7
 8010e1a:	f9bd 2086 	ldrsh.w	r2, [sp, #134]	; 0x86
 8010e1e:	4628      	mov	r0, r5
 8010e20:	f9bd 1084 	ldrsh.w	r1, [sp, #132]	; 0x84
                sh_buf_tmp += corner_size;
 8010e24:	9c06      	ldr	r4, [sp, #24]
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
 8010e26:	f7fd fc91 	bl	800e74c <lv_draw_mask_apply>
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 8010e2a:	f89b 2039 	ldrb.w	r2, [fp, #57]	; 0x39
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
 8010e2e:	2801      	cmp	r0, #1
 8010e30:	bf08      	it	eq
 8010e32:	2002      	moveq	r0, #2
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 8010e34:	9907      	ldr	r1, [sp, #28]
 8010e36:	462b      	mov	r3, r5
 8010e38:	9000      	str	r0, [sp, #0]
 8010e3a:	4650      	mov	r0, sl
                sh_buf_tmp += corner_size;
 8010e3c:	4426      	add	r6, r4
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 8010e3e:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8010e42:	ee19 1a10 	vmov	r1, s18
 8010e46:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 8010e4a:	f7f8 ff87 	bl	8009d5c <_lv_blend_fill>
                fa.y1++;
 8010e4e:	f8bd 2086 	ldrh.w	r2, [sp, #134]	; 0x86
                fa.y2++;
 8010e52:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
            for(y = 0; y < h; y++) {
 8010e56:	45c8      	cmp	r8, r9
                fa.y1++;
 8010e58:	f102 0201 	add.w	r2, r2, #1
                fa.y2++;
 8010e5c:	f103 0301 	add.w	r3, r3, #1
                fa.y1++;
 8010e60:	f8ad 2086 	strh.w	r2, [sp, #134]	; 0x86
                fa.y2++;
 8010e64:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
            for(y = 0; y < h; y++) {
 8010e68:	d1cf      	bne.n	8010e0a <lv_draw_rect+0x1a8a>
 8010e6a:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8010e6e:	ee19 4a90 	vmov	r4, s19
 8010e72:	f7fe bf46 	b.w	800fd02 <lv_draw_rect+0x982>
    if(lv_draw_mask_get_cnt() > 0) simple_mode = false;
 8010e76:	900b      	str	r0, [sp, #44]	; 0x2c
 8010e78:	f7fe bf0b 	b.w	800fc92 <lv_draw_rect+0x912>
            grad_map = _lv_mem_buf_get(coords_w * sizeof(lv_color_t));
 8010e7c:	00b0      	lsls	r0, r6, #2
 8010e7e:	f004 fb53 	bl	8015528 <_lv_mem_buf_get>
            for(i = 0; i < coords_w; i++) {
 8010e82:	2e00      	cmp	r6, #0
            grad_map = _lv_mem_buf_get(coords_w * sizeof(lv_color_t));
 8010e84:	4602      	mov	r2, r0
 8010e86:	900e      	str	r0, [sp, #56]	; 0x38
            for(i = 0; i < coords_w; i++) {
 8010e88:	f77f a936 	ble.w	80100f8 <lv_draw_rect+0xd78>
    int32_t min = (dsc->bg_main_color_stop * s) >> 8;
 8010e8c:	f9bb 400e 	ldrsh.w	r4, [fp, #14]
 8010e90:	fb06 f004 	mul.w	r0, r6, r4
    i -= min;
 8010e94:	f3c0 230f 	ubfx	r3, r0, #8, #16
 8010e98:	1201      	asrs	r1, r0, #8
 8010e9a:	9309      	str	r3, [sp, #36]	; 0x24
 8010e9c:	f100 809d 	bmi.w	8010fda <lv_draw_rect+0x1c5a>
 8010ea0:	1e70      	subs	r0, r6, #1
 8010ea2:	1f13      	subs	r3, r2, #4
            for(i = 0; i < coords_w; i++) {
 8010ea4:	2200      	movs	r2, #0
 8010ea6:	4288      	cmp	r0, r1
 8010ea8:	bfa8      	it	ge
 8010eaa:	4608      	movge	r0, r1
 8010eac:	3201      	adds	r2, #1
    if(i <= min) return dsc->bg_color;
 8010eae:	f8db 1004 	ldr.w	r1, [fp, #4]
            for(i = 0; i < coords_w; i++) {
 8010eb2:	4282      	cmp	r2, r0
                grad_map[i] = grad_get(dsc, coords_w, i);
 8010eb4:	f843 1f04 	str.w	r1, [r3, #4]!
            for(i = 0; i < coords_w; i++) {
 8010eb8:	ddf8      	ble.n	8010eac <lv_draw_rect+0x1b2c>
 8010eba:	4296      	cmp	r6, r2
 8010ebc:	f77f a91c 	ble.w	80100f8 <lv_draw_rect+0xd78>
    int32_t max = (dsc->bg_grad_color_stop * s) >> 8;
 8010ec0:	f9bb 1010 	ldrsh.w	r1, [fp, #16]
 8010ec4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
    d = (s * d) >> 8;
 8010ec8:	ee07 7a90 	vmov	s15, r7
    int32_t d = dsc->bg_grad_color_stop - dsc->bg_main_color_stop;
 8010ecc:	1b0c      	subs	r4, r1, r4
    int32_t max = (dsc->bg_grad_color_stop * s) >> 8;
 8010ece:	fb06 f101 	mul.w	r1, r6, r1
 8010ed2:	4413      	add	r3, r2
 8010ed4:	1209      	asrs	r1, r1, #8
    d = (s * d) >> 8;
 8010ed6:	fb06 f404 	mul.w	r4, r6, r4
    int32_t max = (dsc->bg_grad_color_stop * s) >> 8;
 8010eda:	910a      	str	r1, [sp, #40]	; 0x28
 8010edc:	990e      	ldr	r1, [sp, #56]	; 0x38
 8010ede:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    d = (s * d) >> 8;
 8010ee2:	1221      	asrs	r1, r4, #8
 8010ee4:	9308      	str	r3, [sp, #32]
 8010ee6:	910c      	str	r1, [sp, #48]	; 0x30
    lv_opa_t mix = (i * 255) / d;
 8010ee8:	9b09      	ldr	r3, [sp, #36]	; 0x24
                grad_map[i] = grad_get(dsc, coords_w, i);
 8010eea:	2000      	movs	r0, #0
    if(i >= max) return dsc->bg_grad_color;
 8010eec:	990a      	ldr	r1, [sp, #40]	; 0x28
    lv_opa_t mix = (i * 255) / d;
 8010eee:	1ad3      	subs	r3, r2, r3
    if(i >= max) return dsc->bg_grad_color;
 8010ef0:	4291      	cmp	r1, r2
    lv_opa_t mix = (i * 255) / d;
 8010ef2:	b21b      	sxth	r3, r3
    if(i >= max) return dsc->bg_grad_color;
 8010ef4:	dd45      	ble.n	8010f82 <lv_draw_rect+0x1c02>
    lv_opa_t mix = (i * 255) / d;
 8010ef6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8010ef8:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8010efc:	f89b 1004 	ldrb.w	r1, [fp, #4]
            for(i = 0; i < coords_w; i++) {
 8010f00:	3201      	adds	r2, #1
 8010f02:	f89b 5008 	ldrb.w	r5, [fp, #8]
 8010f06:	460c      	mov	r4, r1
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8010f08:	f89b 1009 	ldrb.w	r1, [fp, #9]
 8010f0c:	f89b e005 	ldrb.w	lr, [fp, #5]
 8010f10:	4296      	cmp	r6, r2
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8010f12:	f89b c00a 	ldrb.w	ip, [fp, #10]
    lv_opa_t mix = (i * 255) / d;
 8010f16:	fb93 f3f7 	sdiv	r3, r3, r7
 8010f1a:	b2db      	uxtb	r3, r3
 8010f1c:	f1c3 07ff 	rsb	r7, r3, #255	; 0xff
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8010f20:	fb03 f505 	mul.w	r5, r3, r5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8010f24:	fb03 f101 	mul.w	r1, r3, r1
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8010f28:	fb07 5504 	mla	r5, r7, r4, r5
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8010f2c:	f89b 4006 	ldrb.w	r4, [fp, #6]
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8010f30:	fb07 1e0e 	mla	lr, r7, lr, r1
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8010f34:	fb03 f30c 	mul.w	r3, r3, ip
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8010f38:	eb05 2105 	add.w	r1, r5, r5, lsl #8
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8010f3c:	fb07 3304 	mla	r3, r7, r4, r3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8010f40:	eb05 15c1 	add.w	r5, r5, r1, lsl #7
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8010f44:	eb0e 210e 	add.w	r1, lr, lr, lsl #8
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8010f48:	ea4f 55d5 	mov.w	r5, r5, lsr #23
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8010f4c:	eb0e 1ec1 	add.w	lr, lr, r1, lsl #7
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8010f50:	eb03 2103 	add.w	r1, r3, r3, lsl #8
                grad_map[i] = grad_get(dsc, coords_w, i);
 8010f54:	f365 0007 	bfi	r0, r5, #0, #8
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8010f58:	ea4f 5ede 	mov.w	lr, lr, lsr #23
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8010f5c:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
 8010f60:	f36e 200f 	bfi	r0, lr, #8, #8
 8010f64:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 8010f68:	f363 4017 	bfi	r0, r3, #16, #8
 8010f6c:	9b08      	ldr	r3, [sp, #32]
 8010f6e:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8010f72:	f843 0f04 	str.w	r0, [r3, #4]!
 8010f76:	9308      	str	r3, [sp, #32]
            for(i = 0; i < coords_w; i++) {
 8010f78:	dcb6      	bgt.n	8010ee8 <lv_draw_rect+0x1b68>
 8010f7a:	ee17 7a90 	vmov	r7, s15
 8010f7e:	f7ff b8bb 	b.w	80100f8 <lv_draw_rect+0xd78>
                grad_map[i] = grad_get(dsc, coords_w, i);
 8010f82:	4603      	mov	r3, r0
 8010f84:	f89b 0008 	ldrb.w	r0, [fp, #8]
 8010f88:	f89b 1009 	ldrb.w	r1, [fp, #9]
            for(i = 0; i < coords_w; i++) {
 8010f8c:	3201      	adds	r2, #1
                grad_map[i] = grad_get(dsc, coords_w, i);
 8010f8e:	f360 0307 	bfi	r3, r0, #0, #8
 8010f92:	f89b 000a 	ldrb.w	r0, [fp, #10]
            for(i = 0; i < coords_w; i++) {
 8010f96:	4296      	cmp	r6, r2
                grad_map[i] = grad_get(dsc, coords_w, i);
 8010f98:	f361 230f 	bfi	r3, r1, #8, #8
 8010f9c:	f89b 100b 	ldrb.w	r1, [fp, #11]
 8010fa0:	f360 4317 	bfi	r3, r0, #16, #8
 8010fa4:	f361 631f 	bfi	r3, r1, #24, #8
 8010fa8:	9908      	ldr	r1, [sp, #32]
 8010faa:	f841 3f04 	str.w	r3, [r1, #4]!
 8010fae:	9108      	str	r1, [sp, #32]
            for(i = 0; i < coords_w; i++) {
 8010fb0:	dc9a      	bgt.n	8010ee8 <lv_draw_rect+0x1b68>
 8010fb2:	e7e2      	b.n	8010f7a <lv_draw_rect+0x1bfa>
        _lv_blend_fill(clip, &coords_bg,
 8010fb4:	f89b 0013 	ldrb.w	r0, [fp, #19]
 8010fb8:	2201      	movs	r2, #1
 8010fba:	4621      	mov	r1, r4
    int16_t mask_rout_id = LV_MASK_ID_INV;
 8010fbc:	f04f 34ff 	mov.w	r4, #4294967295
        _lv_blend_fill(clip, &coords_bg,
 8010fc0:	9002      	str	r0, [sp, #8]
 8010fc2:	4650      	mov	r0, sl
 8010fc4:	f8cd 8004 	str.w	r8, [sp, #4]
    int16_t mask_rout_id = LV_MASK_ID_INV;
 8010fc8:	ee09 4a10 	vmov	s18, r4
        _lv_blend_fill(clip, &coords_bg,
 8010fcc:	9200      	str	r2, [sp, #0]
 8010fce:	f8db 2004 	ldr.w	r2, [fp, #4]
 8010fd2:	f7f8 fec3 	bl	8009d5c <_lv_blend_fill>
 8010fd6:	f7fe bb87 	b.w	800f6e8 <lv_draw_rect+0x368>
    i -= min;
 8010fda:	2200      	movs	r2, #0
 8010fdc:	e770      	b.n	8010ec0 <lv_draw_rect+0x1b40>
            fill_area.x1 = coords_bg.x1 + rout;
 8010fde:	f8bd 4018 	ldrh.w	r4, [sp, #24]
            _lv_blend_fill(clip, &fill_area,
 8010fe2:	a921      	add	r1, sp, #132	; 0x84
            fill_area.x1 = coords_bg.x1 + rout;
 8010fe4:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
            fill_area.x2 = coords_bg.x2 - rout;
 8010fe8:	f8bd 206c 	ldrh.w	r2, [sp, #108]	; 0x6c
            fill_area.y1 = coords_bg.y1;
 8010fec:	f9bd 606a 	ldrsh.w	r6, [sp, #106]	; 0x6a
            fill_area.x1 = coords_bg.x1 + rout;
 8010ff0:	4423      	add	r3, r4
            _lv_blend_fill(clip, &fill_area,
 8010ff2:	f89b 0013 	ldrb.w	r0, [fp, #19]
            fill_area.x2 = coords_bg.x2 - rout;
 8010ff6:	1b12      	subs	r2, r2, r4
            _lv_blend_fill(clip, &fill_area,
 8010ff8:	910a      	str	r1, [sp, #40]	; 0x28
 8010ffa:	2101      	movs	r1, #1
            fill_area.y2 = coords_bg.y1 + rout;
 8010ffc:	19a5      	adds	r5, r4, r6
            fill_area.x1 = coords_bg.x1 + rout;
 8010ffe:	f8ad 3084 	strh.w	r3, [sp, #132]	; 0x84
            _lv_blend_fill(clip, &fill_area,
 8011002:	9100      	str	r1, [sp, #0]
 8011004:	2300      	movs	r3, #0
            fill_area.x2 = coords_bg.x2 - rout;
 8011006:	f8ad 2088 	strh.w	r2, [sp, #136]	; 0x88
            _lv_blend_fill(clip, &fill_area,
 801100a:	990a      	ldr	r1, [sp, #40]	; 0x28
            fill_area.y1 = coords_bg.y1;
 801100c:	f8ad 6086 	strh.w	r6, [sp, #134]	; 0x86
            fill_area.y2 = coords_bg.y1 + rout;
 8011010:	f8ad 508a 	strh.w	r5, [sp, #138]	; 0x8a
            _lv_blend_fill(clip, &fill_area,
 8011014:	e9cd 8001 	strd	r8, r0, [sp, #4]
 8011018:	4650      	mov	r0, sl
 801101a:	f8db 2004 	ldr.w	r2, [fp, #4]
 801101e:	f7f8 fe9d 	bl	8009d5c <_lv_blend_fill>
            fill_area.y1 = coords_bg.y2 - rout;
 8011022:	f9bd 606e 	ldrsh.w	r6, [sp, #110]	; 0x6e
            if(fill_area.y1 <= fill_area.y2) fill_area.y1 = fill_area.y2 + 1;    /*Avoid overdrawing the last line*/
 8011026:	f9bd 208a 	ldrsh.w	r2, [sp, #138]	; 0x8a
            fill_area.y1 = coords_bg.y2 - rout;
 801102a:	1b33      	subs	r3, r6, r4
 801102c:	b21b      	sxth	r3, r3
            if(fill_area.y1 <= fill_area.y2) fill_area.y1 = fill_area.y2 + 1;    /*Avoid overdrawing the last line*/
 801102e:	4293      	cmp	r3, r2
            fill_area.y1 = coords_bg.y2 - rout;
 8011030:	f8ad 3086 	strh.w	r3, [sp, #134]	; 0x86
            if(fill_area.y1 <= fill_area.y2) fill_area.y1 = fill_area.y2 + 1;    /*Avoid overdrawing the last line*/
 8011034:	dc02      	bgt.n	801103c <lv_draw_rect+0x1cbc>
 8011036:	3201      	adds	r2, #1
 8011038:	f8ad 2086 	strh.w	r2, [sp, #134]	; 0x86
            _lv_blend_fill(clip, &fill_area,
 801103c:	f89b 2013 	ldrb.w	r2, [fp, #19]
 8011040:	2501      	movs	r5, #1
 8011042:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8011046:	4650      	mov	r0, sl
 8011048:	9500      	str	r5, [sp, #0]
 801104a:	2300      	movs	r3, #0
 801104c:	4649      	mov	r1, r9
 801104e:	f8cd 8004 	str.w	r8, [sp, #4]
 8011052:	9202      	str	r2, [sp, #8]
 8011054:	f8db 2004 	ldr.w	r2, [fp, #4]
            fill_area.y2 = coords_bg.y2;
 8011058:	f8ad 608a 	strh.w	r6, [sp, #138]	; 0x8a
            _lv_blend_fill(clip, &fill_area,
 801105c:	f7f8 fe7e 	bl	8009d5c <_lv_blend_fill>
            fill_area.y1 = coords_bg.y1 + rout + 1;
 8011060:	f8bd 606a 	ldrh.w	r6, [sp, #106]	; 0x6a
            _lv_blend_fill(clip, &fill_area,
 8011064:	4649      	mov	r1, r9
            fill_area.y2 = coords_bg.y2 - rout - 1;
 8011066:	f8bd 006e 	ldrh.w	r0, [sp, #110]	; 0x6e
            _lv_blend_fill(clip, &fill_area,
 801106a:	2300      	movs	r3, #0
            fill_area.y1 = coords_bg.y1 + rout + 1;
 801106c:	442e      	add	r6, r5
            _lv_blend_fill(clip, &fill_area,
 801106e:	f89b 2013 	ldrb.w	r2, [fp, #19]
            fill_area.y2 = coords_bg.y2 - rout - 1;
 8011072:	3801      	subs	r0, #1
            _lv_blend_fill(clip, &fill_area,
 8011074:	9500      	str	r5, [sp, #0]
            fill_area.y1 = coords_bg.y1 + rout + 1;
 8011076:	4426      	add	r6, r4
            fill_area.x1 = coords_bg.x1;
 8011078:	f8bd c068 	ldrh.w	ip, [sp, #104]	; 0x68
            fill_area.y2 = coords_bg.y2 - rout - 1;
 801107c:	1b04      	subs	r4, r0, r4
            fill_area.x2 = coords_bg.x2;
 801107e:	f8bd 506c 	ldrh.w	r5, [sp, #108]	; 0x6c
            _lv_blend_fill(clip, &fill_area,
 8011082:	f8cd 8004 	str.w	r8, [sp, #4]
 8011086:	4650      	mov	r0, sl
 8011088:	9202      	str	r2, [sp, #8]
 801108a:	f8db 2004 	ldr.w	r2, [fp, #4]
            fill_area.y1 = coords_bg.y1 + rout + 1;
 801108e:	f8ad 6086 	strh.w	r6, [sp, #134]	; 0x86
            fill_area.y2 = coords_bg.y2 - rout - 1;
 8011092:	f8ad 408a 	strh.w	r4, [sp, #138]	; 0x8a
            fill_area.x1 = coords_bg.x1;
 8011096:	f8ad c084 	strh.w	ip, [sp, #132]	; 0x84
            fill_area.x2 = coords_bg.x2;
 801109a:	f8ad 5088 	strh.w	r5, [sp, #136]	; 0x88
            _lv_blend_fill(clip, &fill_area,
 801109e:	f7f8 fe5d 	bl	8009d5c <_lv_blend_fill>
 80110a2:	f7fe bb1c 	b.w	800f6de <lv_draw_rect+0x35e>
 80110a6:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 80110aa:	ee19 4a10 	vmov	r4, s18
 80110ae:	f7fe bede 	b.w	800fe6e <lv_draw_rect+0xaee>
 80110b2:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 80110b6:	ee19 4a10 	vmov	r4, s18
 80110ba:	f7fe bef4 	b.w	800fea6 <lv_draw_rect+0xb26>
        lv_draw_mask_remove_id(radius_mask_id);
 80110be:	ee18 0a10 	vmov	r0, s16
 80110c2:	f7fd fb6d 	bl	800e7a0 <lv_draw_mask_remove_id>
 80110c6:	f7fe bb9a 	b.w	800f7fe <lv_draw_rect+0x47e>
        draw_full_border(&area_inner, coords, clip, dsc->radius, false, dsc->border_color, dsc->border_opa,
 80110ca:	f89b 201d 	ldrb.w	r2, [fp, #29]
 80110ce:	2500      	movs	r5, #0
 80110d0:	9402      	str	r4, [sp, #8]
 80110d2:	f8db 1014 	ldr.w	r1, [fp, #20]
 80110d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80110d8:	9203      	str	r2, [sp, #12]
 80110da:	4652      	mov	r2, sl
 80110dc:	9101      	str	r1, [sp, #4]
 80110de:	9500      	str	r5, [sp, #0]
 80110e0:	9905      	ldr	r1, [sp, #20]
 80110e2:	f7fd fe87 	bl	800edf4 <draw_full_border>
 80110e6:	f7fe bce1 	b.w	800faac <lv_draw_rect+0x72c>
 80110ea:	2200      	movs	r2, #0
 80110ec:	f7fe bc76 	b.w	800f9dc <lv_draw_rect+0x65c>
    if(lv_draw_mask_get_cnt() > 0) simple_mode = false;
 80110f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80110f2:	f7fe bdce 	b.w	800fc92 <lv_draw_rect+0x912>
            lv_draw_mask_radius_init(&mask_rout_param, coords, rout, false);
 80110f6:	2300      	movs	r3, #0
 80110f8:	fa0f f289 	sxth.w	r2, r9
 80110fc:	4641      	mov	r1, r8
 80110fe:	a821      	add	r0, sp, #132	; 0x84
 8011100:	f7fd fcee 	bl	800eae0 <lv_draw_mask_radius_init>
            mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
 8011104:	a821      	add	r0, sp, #132	; 0x84
 8011106:	2100      	movs	r1, #0
 8011108:	f7fd fac2 	bl	800e690 <lv_draw_mask_add>
 801110c:	ee08 0a10 	vmov	s16, r0
 8011110:	f7fe bc18 	b.w	800f944 <lv_draw_rect+0x5c4>
            coords_tmp.y1 += y_corr;
 8011114:	f002 0001 	and.w	r0, r2, #1
        if(_lv_area_is_in(&coords_tmp, coords, dsc->radius) == false) {
 8011118:	ac1a      	add	r4, sp, #104	; 0x68
 801111a:	f9bb 2000 	ldrsh.w	r2, [fp]
            coords_tmp.y1 += y_corr;
 801111e:	180d      	adds	r5, r1, r0
            coords_tmp.y2 += y_corr;
 8011120:	4403      	add	r3, r0
        if(_lv_area_is_in(&coords_tmp, coords, dsc->radius) == false) {
 8011122:	9905      	ldr	r1, [sp, #20]
 8011124:	4620      	mov	r0, r4
            coords_tmp.y1 += y_corr;
 8011126:	f8ad 506a 	strh.w	r5, [sp, #106]	; 0x6a
            coords_tmp.y2 += y_corr;
 801112a:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
        if(_lv_area_is_in(&coords_tmp, coords, dsc->radius) == false) {
 801112e:	f003 f87d 	bl	801422c <_lv_area_is_in>
 8011132:	4605      	mov	r5, r0
 8011134:	2800      	cmp	r0, #0
 8011136:	f000 809a 	beq.w	801126e <lv_draw_rect+0x1eee>
        int16_t radius_mask_id = LV_MASK_ID_INV;
 801113a:	f04f 35ff 	mov.w	r5, #4294967295
        if(src_type == LV_IMG_SRC_SYMBOL)  lv_draw_label(&coords_tmp, clip, &label_dsc, dsc->pattern_image, NULL);
 801113e:	2100      	movs	r1, #0
 8011140:	f8db 303c 	ldr.w	r3, [fp, #60]	; 0x3c
 8011144:	9a04      	ldr	r2, [sp, #16]
 8011146:	4620      	mov	r0, r4
 8011148:	9100      	str	r1, [sp, #0]
 801114a:	4651      	mov	r1, sl
 801114c:	f7fb f862 	bl	800c214 <lv_draw_label>
 8011150:	f7fe bb52 	b.w	800f7f8 <lv_draw_rect+0x478>
        volatile bool top_only = false;
 8011154:	2200      	movs	r2, #0
        if(dsc->border_side == LV_BORDER_SIDE_LEFT) fill_area.x2 = coords->x1 + corner_size;
 8011156:	4449      	add	r1, r9
        volatile bool top_only = false;
 8011158:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
        uint32_t buf_ofs = 0;
 801115c:	4690      	mov	r8, r2
        if(dsc->border_side == LV_BORDER_SIDE_LEFT) fill_area.x2 = coords->x1 + corner_size;
 801115e:	f8ad 1074 	strh.w	r1, [sp, #116]	; 0x74
        volatile bool bottom_only = false;
 8011162:	f88d 2050 	strb.w	r2, [sp, #80]	; 0x50
        if(dsc->border_side == (LV_BORDER_SIDE_TOP | LV_BORDER_SIDE_BOTTOM)) {
 8011166:	f7fe bc30 	b.w	800f9ca <lv_draw_rect+0x64a>
        if(dsc->border_side == LV_BORDER_SIDE_BOTTOM) bottom_only = true;
 801116a:	2801      	cmp	r0, #1
 801116c:	f040 80f6 	bne.w	801135c <lv_draw_rect+0x1fdc>
 8011170:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
        if(dsc->border_side == (LV_BORDER_SIDE_TOP | LV_BORDER_SIDE_BOTTOM)) {
 8011174:	f7fe bc29 	b.w	800f9ca <lv_draw_rect+0x64a>
        if(simple_mode) ca.x1 = LV_MATH_MAX(ca.x1, coords->x2);
 8011178:	9b05      	ldr	r3, [sp, #20]
 801117a:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 801117e:	f9bd 3070 	ldrsh.w	r3, [sp, #112]	; 0x70
 8011182:	4293      	cmp	r3, r2
 8011184:	bfb8      	it	lt
 8011186:	4613      	movlt	r3, r2
 8011188:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
 801118c:	e59a      	b.n	8010cc4 <lv_draw_rect+0x1944>
        if(simple_mode) ca.x2 = LV_MATH_MIN(coords->x1, ca.x2);
 801118e:	9b05      	ldr	r3, [sp, #20]
 8011190:	f9bd 7074 	ldrsh.w	r7, [sp, #116]	; 0x74
 8011194:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011198:	42ba      	cmp	r2, r7
 801119a:	bfa8      	it	ge
 801119c:	463a      	movge	r2, r7
 801119e:	f8ad 2074 	strh.w	r2, [sp, #116]	; 0x74
 80111a2:	e522      	b.n	8010bea <lv_draw_rect+0x186a>
        if(ca.x1 <= w_half) ca.x1 = w_half + 1;
 80111a4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80111a6:	1c51      	adds	r1, r2, #1
 80111a8:	b20a      	sxth	r2, r1
 80111aa:	b289      	uxth	r1, r1
 80111ac:	f8ad 2070 	strh.w	r2, [sp, #112]	; 0x70
 80111b0:	f7ff bab5 	b.w	801071e <lv_draw_rect+0x139e>
        if(ca.y1 <= h_half) ca.y1 = h_half + 1;
 80111b4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80111b6:	3301      	adds	r3, #1
 80111b8:	b29b      	uxth	r3, r3
 80111ba:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
 80111be:	f7ff baa7 	b.w	8010710 <lv_draw_rect+0x1390>
        if(ca.x1 <= w_half) ca.x1 = w_half + 1;
 80111c2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80111c4:	1c59      	adds	r1, r3, #1
 80111c6:	b20b      	sxth	r3, r1
 80111c8:	b289      	uxth	r1, r1
 80111ca:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
 80111ce:	e5ec      	b.n	8010daa <lv_draw_rect+0x1a2a>
        if(ca.y2 > h_half) ca.y2 = h_half;
 80111d0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80111d2:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
 80111d6:	e5e1      	b.n	8010d9c <lv_draw_rect+0x1a1c>
        if(simple_mode) ca.y1 = LV_MATH_MAX(ca.y1, coords->y2);
 80111d8:	9b05      	ldr	r3, [sp, #20]
 80111da:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80111de:	f9bd 3072 	ldrsh.w	r3, [sp, #114]	; 0x72
 80111e2:	429a      	cmp	r2, r3
 80111e4:	bfb8      	it	lt
 80111e6:	461a      	movlt	r2, r3
 80111e8:	4610      	mov	r0, r2
 80111ea:	f8ad 2072 	strh.w	r2, [sp, #114]	; 0x72
 80111ee:	f7ff bb85 	b.w	80108fc <lv_draw_rect+0x157c>
        if(simple_mode) ca.y2 = LV_MATH_MIN(ca.y2, coords->y1);
 80111f2:	9b05      	ldr	r3, [sp, #20]
 80111f4:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80111f8:	f9bd 3076 	ldrsh.w	r3, [sp, #118]	; 0x76
 80111fc:	429a      	cmp	r2, r3
 80111fe:	bfa8      	it	ge
 8011200:	461a      	movge	r2, r3
 8011202:	4610      	mov	r0, r2
 8011204:	f8ad 2076 	strh.w	r2, [sp, #118]	; 0x76
 8011208:	f7ff baff 	b.w	801080a <lv_draw_rect+0x148a>
        if(ca.x2 > w_half) ca.x2 = w_half;
 801120c:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801120e:	f8ad 1074 	strh.w	r1, [sp, #116]	; 0x74
 8011212:	e474      	b.n	8010afe <lv_draw_rect+0x177e>
 8011214:	4613      	mov	r3, r2
        if(ca.y2 > h_half) ca.y2 = h_half;
 8011216:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011218:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
 801121c:	e468      	b.n	8010af0 <lv_draw_rect+0x1770>
        if(ca.x2 > w_half) ca.x2 = w_half;
 801121e:	f8ad 1074 	strh.w	r1, [sp, #116]	; 0x74
 8011222:	f7ff bbec 	b.w	80109fe <lv_draw_rect+0x167e>
        if(ca.y1 <= h_half) ca.y1 = h_half + 1;
 8011226:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011228:	3301      	adds	r3, #1
 801122a:	b29b      	uxth	r3, r3
 801122c:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
 8011230:	f7ff bbdd 	b.w	80109ee <lv_draw_rect+0x166e>
            lv_draw_mask_radius_init(&radius_mask_param, coords, dsc->radius, false);
 8011234:	4603      	mov	r3, r0
 8011236:	f9bb 2000 	ldrsh.w	r2, [fp]
 801123a:	9905      	ldr	r1, [sp, #20]
 801123c:	a821      	add	r0, sp, #132	; 0x84
 801123e:	f7fd fc4f 	bl	800eae0 <lv_draw_mask_radius_init>
            radius_mask_id = lv_draw_mask_add(&radius_mask_param, NULL);
 8011242:	4629      	mov	r1, r5
 8011244:	a821      	add	r0, sp, #132	; 0x84
 8011246:	f7fd fa23 	bl	800e690 <lv_draw_mask_add>
 801124a:	4605      	mov	r5, r0
        if(src_type == LV_IMG_SRC_SYMBOL)  lv_draw_label(&coords_tmp, clip, &label_dsc, dsc->pattern_image, NULL);
 801124c:	f7fe bacd 	b.w	800f7ea <lv_draw_rect+0x46a>
            fill_area.x1 = coords->x2 - corner_size;
 8011250:	ebac 0809 	sub.w	r8, ip, r9
        volatile bool top_only = false;
 8011254:	2200      	movs	r2, #0
            fill_area.x1 = coords->x2 - corner_size;
 8011256:	fa0f f888 	sxth.w	r8, r8
        volatile bool top_only = false;
 801125a:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
        volatile bool bottom_only = false;
 801125e:	f88d 2050 	strb.w	r2, [sp, #80]	; 0x50
            fill_area.x1 = coords->x2 - corner_size;
 8011262:	f8ad 8070 	strh.w	r8, [sp, #112]	; 0x70
            buf_ofs = fill_area.x1 - coords->x1;
 8011266:	eba8 0801 	sub.w	r8, r8, r1
        if(dsc->border_side == LV_BORDER_SIDE_BOTTOM) bottom_only = true;
 801126a:	f7fe bbae 	b.w	800f9ca <lv_draw_rect+0x64a>
            lv_draw_mask_radius_init(&radius_mask_param, coords, dsc->radius, false);
 801126e:	4603      	mov	r3, r0
 8011270:	f9bb 2000 	ldrsh.w	r2, [fp]
 8011274:	9905      	ldr	r1, [sp, #20]
 8011276:	a821      	add	r0, sp, #132	; 0x84
 8011278:	f7fd fc32 	bl	800eae0 <lv_draw_mask_radius_init>
            radius_mask_id = lv_draw_mask_add(&radius_mask_param, NULL);
 801127c:	4629      	mov	r1, r5
 801127e:	a821      	add	r0, sp, #132	; 0x84
 8011280:	f7fd fa06 	bl	800e690 <lv_draw_mask_add>
 8011284:	4605      	mov	r5, r0
        if(src_type == LV_IMG_SRC_SYMBOL)  lv_draw_label(&coords_tmp, clip, &label_dsc, dsc->pattern_image, NULL);
 8011286:	e75a      	b.n	801113e <lv_draw_rect+0x1dbe>
            for(y = 0; y < h; y++) {
 8011288:	ee09 4a10 	vmov	s18, r4
 801128c:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8011290:	461e      	mov	r6, r3
 8011292:	4691      	mov	r9, r2
 8011294:	9c0a      	ldr	r4, [sp, #40]	; 0x28
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
 8011296:	463a      	mov	r2, r7
 8011298:	4641      	mov	r1, r8
 801129a:	4628      	mov	r0, r5
            for(y = 0; y < h; y++) {
 801129c:	3601      	adds	r6, #1
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
 801129e:	f003 feed 	bl	801507c <_lv_memcpy>
                    mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
 80112a2:	463b      	mov	r3, r7
 80112a4:	f9bd 2086 	ldrsh.w	r2, [sp, #134]	; 0x86
 80112a8:	4628      	mov	r0, r5
 80112aa:	f9bd 1084 	ldrsh.w	r1, [sp, #132]	; 0x84
 80112ae:	f7fd fa4d 	bl	800e74c <lv_draw_mask_apply>
                _lv_blend_fill(clip, &fa,
 80112b2:	f89b 1039 	ldrb.w	r1, [fp, #57]	; 0x39
 80112b6:	f89b 2038 	ldrb.w	r2, [fp, #56]	; 0x38
                    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
 80112ba:	2801      	cmp	r0, #1
 80112bc:	bf08      	it	eq
 80112be:	2002      	moveq	r0, #2
                _lv_blend_fill(clip, &fa,
 80112c0:	9102      	str	r1, [sp, #8]
 80112c2:	462b      	mov	r3, r5
 80112c4:	9000      	str	r0, [sp, #0]
 80112c6:	4621      	mov	r1, r4
 80112c8:	9201      	str	r2, [sp, #4]
 80112ca:	4650      	mov	r0, sl
 80112cc:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 80112d0:	f7f8 fd44 	bl	8009d5c <_lv_blend_fill>
                fa.y1++;
 80112d4:	f8bd 2086 	ldrh.w	r2, [sp, #134]	; 0x86
                fa.y2++;
 80112d8:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
            for(y = 0; y < h; y++) {
 80112dc:	45b1      	cmp	r9, r6
                fa.y1++;
 80112de:	f102 0201 	add.w	r2, r2, #1
                fa.y2++;
 80112e2:	f103 0301 	add.w	r3, r3, #1
                fa.y1++;
 80112e6:	f8ad 2086 	strh.w	r2, [sp, #134]	; 0x86
                fa.y2++;
 80112ea:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
            for(y = 0; y < h; y++) {
 80112ee:	d1d2      	bne.n	8011296 <lv_draw_rect+0x1f16>
 80112f0:	e4d3      	b.n	8010c9a <lv_draw_rect+0x191a>
            for(y = 0; y < h; y++) {
 80112f2:	ee09 4a10 	vmov	s18, r4
 80112f6:	f8cd 9010 	str.w	r9, [sp, #16]
 80112fa:	461e      	mov	r6, r3
 80112fc:	46e1      	mov	r9, ip
 80112fe:	9c0a      	ldr	r4, [sp, #40]	; 0x28
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
 8011300:	463a      	mov	r2, r7
 8011302:	4641      	mov	r1, r8
 8011304:	4628      	mov	r0, r5
            for(y = 0; y < h; y++) {
 8011306:	3601      	adds	r6, #1
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
 8011308:	f003 feb8 	bl	801507c <_lv_memcpy>
                    mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
 801130c:	463b      	mov	r3, r7
 801130e:	f9bd 2086 	ldrsh.w	r2, [sp, #134]	; 0x86
 8011312:	4628      	mov	r0, r5
 8011314:	f9bd 1084 	ldrsh.w	r1, [sp, #132]	; 0x84
 8011318:	f7fd fa18 	bl	800e74c <lv_draw_mask_apply>
                _lv_blend_fill(clip, &fa,
 801131c:	f89b 1039 	ldrb.w	r1, [fp, #57]	; 0x39
 8011320:	f89b 2038 	ldrb.w	r2, [fp, #56]	; 0x38
                    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
 8011324:	2801      	cmp	r0, #1
 8011326:	bf08      	it	eq
 8011328:	2002      	moveq	r0, #2
                _lv_blend_fill(clip, &fa,
 801132a:	9102      	str	r1, [sp, #8]
 801132c:	462b      	mov	r3, r5
 801132e:	9000      	str	r0, [sp, #0]
 8011330:	4621      	mov	r1, r4
 8011332:	9201      	str	r2, [sp, #4]
 8011334:	4650      	mov	r0, sl
 8011336:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 801133a:	f7f8 fd0f 	bl	8009d5c <_lv_blend_fill>
                fa.y1++;
 801133e:	f8bd 2086 	ldrh.w	r2, [sp, #134]	; 0x86
                fa.y2++;
 8011342:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
            for(y = 0; y < h; y++) {
 8011346:	45b1      	cmp	r9, r6
                fa.y1++;
 8011348:	f102 0201 	add.w	r2, r2, #1
                fa.y2++;
 801134c:	f103 0301 	add.w	r3, r3, #1
                fa.y1++;
 8011350:	f8ad 2086 	strh.w	r2, [sp, #134]	; 0x86
                fa.y2++;
 8011354:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
            for(y = 0; y < h; y++) {
 8011358:	d1d2      	bne.n	8011300 <lv_draw_rect+0x1f80>
 801135a:	e509      	b.n	8010d70 <lv_draw_rect+0x19f0>
        if(dsc->border_side == (LV_BORDER_SIDE_TOP | LV_BORDER_SIDE_BOTTOM)) {
 801135c:	2803      	cmp	r0, #3
 801135e:	f47e ab34 	bne.w	800f9ca <lv_draw_rect+0x64a>
            top_only = true;
 8011362:	2201      	movs	r2, #1
 8011364:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
            bottom_only = true;
 8011368:	f88d 2050 	strb.w	r2, [sp, #80]	; 0x50
 801136c:	f7fe bb2d 	b.w	800f9ca <lv_draw_rect+0x64a>

08011370 <lv_img_buf_get_px_color>:
 * Not used in other cases.
 * @param safe true: check out of bounds
 * @return color of the point
 */
lv_color_t lv_img_buf_get_px_color(lv_img_dsc_t * dsc, lv_coord_t x, lv_coord_t y, lv_color_t color)
{
 8011370:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011372:	4604      	mov	r4, r0
    lv_color_t p_color = LV_COLOR_BLACK;
    uint8_t * buf_u8 = (uint8_t *)dsc->data;

    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED ||
 8011374:	7800      	ldrb	r0, [r0, #0]
{
 8011376:	4616      	mov	r6, r2
 8011378:	460d      	mov	r5, r1
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED ||
 801137a:	f000 021f 	and.w	r2, r0, #31
{
 801137e:	b083      	sub	sp, #12
    lv_color_t p_color = LV_COLOR_BLACK;
 8011380:	f04f 4c7f 	mov.w	ip, #4278190080	; 0xff000000
    uint8_t * buf_u8 = (uint8_t *)dsc->data;
 8011384:	68a7      	ldr	r7, [r4, #8]
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED ||
 8011386:	1f11      	subs	r1, r2, #4
    lv_color_t p_color = LV_COLOR_BLACK;
 8011388:	f8cd c004 	str.w	ip, [sp, #4]
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED ||
 801138c:	2902      	cmp	r1, #2
 801138e:	d81a      	bhi.n	80113c6 <lv_img_buf_get_px_color+0x56>
       dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA) {
        uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf) >> 3;
 8011390:	4610      	mov	r0, r2
 8011392:	f7fa feef 	bl	800c174 <lv_img_cf_get_px_size>
        uint32_t px     = dsc->header.w * y * px_size + x * px_size;
 8011396:	6824      	ldr	r4, [r4, #0]
        uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf) >> 3;
 8011398:	f3c0 00c7 	ubfx	r0, r0, #3, #8
        _lv_memcpy_small(&p_color, &buf_u8[px], sizeof(lv_color_t));
#if LV_COLOR_SIZE == 32
        p_color.ch.alpha = 0xFF; /*Only the color should be get so use a default alpha value*/
 801139c:	22ff      	movs	r2, #255	; 0xff
        uint32_t px     = dsc->header.w * y * px_size + x * px_size;
 801139e:	f3c4 248a 	ubfx	r4, r4, #10, #11
 80113a2:	fb10 f505 	smulbb	r5, r0, r5
        p_color.ch.alpha = 0xFF; /*Only the color should be get so use a default alpha value*/
 80113a6:	f88d 2007 	strb.w	r2, [sp, #7]
        uint32_t px     = dsc->header.w * y * px_size + x * px_size;
 80113aa:	fb14 f306 	smulbb	r3, r4, r6
 80113ae:	fb00 5503 	mla	r5, r0, r3, r5
        _lv_memcpy_small(&p_color, &buf_u8[px], sizeof(lv_color_t));
 80113b2:	197b      	adds	r3, r7, r5
 80113b4:	5b7a      	ldrh	r2, [r7, r5]
 80113b6:	789b      	ldrb	r3, [r3, #2]
 80113b8:	f8ad 2004 	strh.w	r2, [sp, #4]
 80113bc:	f88d 3006 	strb.w	r3, [sp, #6]
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
            dsc->header.cf == LV_IMG_CF_ALPHA_4BIT || dsc->header.cf == LV_IMG_CF_ALPHA_8BIT) {
        p_color = color;
    }
    return p_color;
}
 80113c0:	9801      	ldr	r0, [sp, #4]
 80113c2:	b003      	add	sp, #12
 80113c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_1BIT) {
 80113c6:	2a07      	cmp	r2, #7
 80113c8:	d020      	beq.n	801140c <lv_img_buf_get_px_color+0x9c>
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_2BIT) {
 80113ca:	2a08      	cmp	r2, #8
 80113cc:	d008      	beq.n	80113e0 <lv_img_buf_get_px_color+0x70>
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_4BIT) {
 80113ce:	2a09      	cmp	r2, #9
 80113d0:	d032      	beq.n	8011438 <lv_img_buf_get_px_color+0xc8>
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_8BIT) {
 80113d2:	2a0a      	cmp	r2, #10
 80113d4:	d047      	beq.n	8011466 <lv_img_buf_get_px_color+0xf6>
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
 80113d6:	3a0b      	subs	r2, #11
 80113d8:	2a03      	cmp	r2, #3
        p_color = color;
 80113da:	bf98      	it	ls
 80113dc:	9301      	strls	r3, [sp, #4]
 80113de:	e7ef      	b.n	80113c0 <lv_img_buf_get_px_color+0x50>
        uint32_t px  = ((dsc->header.w + 3) >> 2) * y + x;
 80113e0:	6823      	ldr	r3, [r4, #0]
        p_color.full = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
 80113e2:	2103      	movs	r1, #3
        uint8_t bit = (x & 0x3) * 2;
 80113e4:	f005 0203 	and.w	r2, r5, #3
        uint32_t px  = ((dsc->header.w + 3) >> 2) * y + x;
 80113e8:	f3c3 238a 	ubfx	r3, r3, #10, #11
        p_color.full = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
 80113ec:	0052      	lsls	r2, r2, #1
        uint32_t px  = ((dsc->header.w + 3) >> 2) * y + x;
 80113ee:	440b      	add	r3, r1
        p_color.full = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
 80113f0:	f1c2 0206 	rsb	r2, r2, #6
        uint32_t px  = ((dsc->header.w + 3) >> 2) * y + x;
 80113f4:	109b      	asrs	r3, r3, #2
        p_color.full = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
 80113f6:	4091      	lsls	r1, r2
 80113f8:	fb06 7603 	mla	r6, r6, r3, r7
 80113fc:	eb06 05a5 	add.w	r5, r6, r5, asr #2
 8011400:	7c2b      	ldrb	r3, [r5, #16]
 8011402:	400b      	ands	r3, r1
 8011404:	fa43 f202 	asr.w	r2, r3, r2
 8011408:	9201      	str	r2, [sp, #4]
 801140a:	e7d9      	b.n	80113c0 <lv_img_buf_get_px_color+0x50>
        uint32_t px  = ((dsc->header.w + 7) >> 3) * y + x;
 801140c:	6823      	ldr	r3, [r4, #0]
        p_color.full = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
 801140e:	f005 0207 	and.w	r2, r5, #7
 8011412:	2101      	movs	r1, #1
        uint32_t px  = ((dsc->header.w + 7) >> 3) * y + x;
 8011414:	f3c3 238a 	ubfx	r3, r3, #10, #11
        p_color.full = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
 8011418:	f1c2 0207 	rsb	r2, r2, #7
        uint32_t px  = ((dsc->header.w + 7) >> 3) * y + x;
 801141c:	3307      	adds	r3, #7
        p_color.full = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
 801141e:	4091      	lsls	r1, r2
        uint32_t px  = ((dsc->header.w + 7) >> 3) * y + x;
 8011420:	10db      	asrs	r3, r3, #3
        p_color.full = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
 8011422:	fb06 7603 	mla	r6, r6, r3, r7
 8011426:	eb06 05e5 	add.w	r5, r6, r5, asr #3
 801142a:	7a2b      	ldrb	r3, [r5, #8]
 801142c:	400b      	ands	r3, r1
 801142e:	4113      	asrs	r3, r2
 8011430:	9301      	str	r3, [sp, #4]
}
 8011432:	9801      	ldr	r0, [sp, #4]
 8011434:	b003      	add	sp, #12
 8011436:	bdf0      	pop	{r4, r5, r6, r7, pc}
        uint32_t px  = ((dsc->header.w + 1) >> 1) * y + x;
 8011438:	6823      	ldr	r3, [r4, #0]
        uint8_t bit = (x & 0x1) * 4;
 801143a:	f005 0201 	and.w	r2, r5, #1
        p_color.full = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
 801143e:	210f      	movs	r1, #15
        uint32_t px  = ((dsc->header.w + 1) >> 1) * y + x;
 8011440:	f3c3 238a 	ubfx	r3, r3, #10, #11
        p_color.full = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
 8011444:	0092      	lsls	r2, r2, #2
        uint32_t px  = ((dsc->header.w + 1) >> 1) * y + x;
 8011446:	3301      	adds	r3, #1
        p_color.full = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
 8011448:	f1c2 0204 	rsb	r2, r2, #4
        uint32_t px  = ((dsc->header.w + 1) >> 1) * y + x;
 801144c:	105b      	asrs	r3, r3, #1
        p_color.full = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
 801144e:	4091      	lsls	r1, r2
 8011450:	fb06 7303 	mla	r3, r6, r3, r7
 8011454:	eb03 0565 	add.w	r5, r3, r5, asr #1
 8011458:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
 801145c:	400b      	ands	r3, r1
 801145e:	fa43 f202 	asr.w	r2, r3, r2
 8011462:	9201      	str	r2, [sp, #4]
 8011464:	e7ac      	b.n	80113c0 <lv_img_buf_get_px_color+0x50>
        uint32_t px  = dsc->header.w * y + x;
 8011466:	6823      	ldr	r3, [r4, #0]
 8011468:	f3c3 238a 	ubfx	r3, r3, #10, #11
 801146c:	fb16 5303 	smlabb	r3, r6, r3, r5
        p_color.full = buf_u8[px];
 8011470:	441f      	add	r7, r3
 8011472:	f897 3400 	ldrb.w	r3, [r7, #1024]	; 0x400
 8011476:	9301      	str	r3, [sp, #4]
 8011478:	e7a2      	b.n	80113c0 <lv_img_buf_get_px_color+0x50>
 801147a:	bf00      	nop

0801147c <lv_img_buf_get_px_alpha>:
 */
lv_opa_t lv_img_buf_get_px_alpha(lv_img_dsc_t * dsc, lv_coord_t x, lv_coord_t y)
{
    uint8_t * buf_u8 = (uint8_t *)dsc->data;

    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA) {
 801147c:	7803      	ldrb	r3, [r0, #0]
 801147e:	f003 031f 	and.w	r3, r3, #31
 8011482:	2b05      	cmp	r3, #5
{
 8011484:	b430      	push	{r4, r5}
    uint8_t * buf_u8 = (uint8_t *)dsc->data;
 8011486:	6884      	ldr	r4, [r0, #8]
{
 8011488:	b084      	sub	sp, #16
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA) {
 801148a:	d00b      	beq.n	80114a4 <lv_img_buf_get_px_alpha+0x28>
        uint32_t px = dsc->header.w * y * LV_IMG_PX_SIZE_ALPHA_BYTE + x * LV_IMG_PX_SIZE_ALPHA_BYTE;
        return buf_u8[px + LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
    }
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT) {
 801148c:	2b0b      	cmp	r3, #11
 801148e:	d02f      	beq.n	80114f0 <lv_img_buf_get_px_alpha+0x74>
         * so the possible real width are 8 ,16, 24 ...*/
        uint32_t px    = ((dsc->header.w + 7) >> 3) * y + x;
        uint8_t px_opa = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
        return px_opa ? LV_OPA_TRANSP : LV_OPA_COVER;
    }
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_2BIT) {
 8011490:	2b0c      	cmp	r3, #12
 8011492:	d012      	beq.n	80114ba <lv_img_buf_get_px_alpha+0x3e>
         * so the possible real width are 4 ,8, 12 ...*/
        uint32_t px    = ((dsc->header.w + 3) >> 2) * y + x;
        uint8_t px_opa = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
        return opa_table[px_opa];
    }
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_4BIT) {
 8011494:	2b0d      	cmp	r3, #13
 8011496:	d04b      	beq.n	8011530 <lv_img_buf_get_px_alpha+0xb4>
         * so the possible real width are 2 ,4, 6 ...*/
        uint32_t px    = ((dsc->header.w + 1) >> 1) * y + x;
        uint8_t px_opa = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
        return opa_table[px_opa];
    }
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_8BIT) {
 8011498:	2b0e      	cmp	r3, #14
 801149a:	d040      	beq.n	801151e <lv_img_buf_get_px_alpha+0xa2>
        uint32_t px = dsc->header.w * y + x;
        return buf_u8[px];
    }

    return LV_OPA_COVER;
 801149c:	20ff      	movs	r0, #255	; 0xff
}
 801149e:	b004      	add	sp, #16
 80114a0:	bc30      	pop	{r4, r5}
 80114a2:	4770      	bx	lr
        uint32_t px = dsc->header.w * y * LV_IMG_PX_SIZE_ALPHA_BYTE + x * LV_IMG_PX_SIZE_ALPHA_BYTE;
 80114a4:	6803      	ldr	r3, [r0, #0]
 80114a6:	f3c3 238a 	ubfx	r3, r3, #10, #11
 80114aa:	fb12 1203 	smlabb	r2, r2, r3, r1
        return buf_u8[px + LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 80114ae:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80114b2:	78d0      	ldrb	r0, [r2, #3]
}
 80114b4:	b004      	add	sp, #16
 80114b6:	bc30      	pop	{r4, r5}
 80114b8:	4770      	bx	lr
        uint32_t px    = ((dsc->header.w + 3) >> 2) * y + x;
 80114ba:	6803      	ldr	r3, [r0, #0]
        uint8_t px_opa = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
 80114bc:	2503      	movs	r5, #3
        uint8_t bit = (x & 0x3) * 2;
 80114be:	f001 0003 	and.w	r0, r1, #3
        uint32_t px    = ((dsc->header.w + 3) >> 2) * y + x;
 80114c2:	1089      	asrs	r1, r1, #2
 80114c4:	f3c3 238a 	ubfx	r3, r3, #10, #11
        uint8_t px_opa = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
 80114c8:	0040      	lsls	r0, r0, #1
        uint32_t px    = ((dsc->header.w + 3) >> 2) * y + x;
 80114ca:	442b      	add	r3, r5
        uint8_t px_opa = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
 80114cc:	f1c0 0006 	rsb	r0, r0, #6
        uint32_t px    = ((dsc->header.w + 3) >> 2) * y + x;
 80114d0:	109b      	asrs	r3, r3, #2
        uint8_t px_opa = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
 80114d2:	4085      	lsls	r5, r0
 80114d4:	fb02 4203 	mla	r2, r2, r3, r4
        const uint8_t opa_table[4] = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
 80114d8:	4c24      	ldr	r4, [pc, #144]	; (801156c <lv_img_buf_get_px_alpha+0xf0>)
        uint8_t px_opa = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
 80114da:	5c53      	ldrb	r3, [r2, r1]
        return opa_table[px_opa];
 80114dc:	aa04      	add	r2, sp, #16
        const uint8_t opa_table[4] = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
 80114de:	9400      	str	r4, [sp, #0]
        uint8_t px_opa = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
 80114e0:	402b      	ands	r3, r5
 80114e2:	4103      	asrs	r3, r0
        return opa_table[px_opa];
 80114e4:	4413      	add	r3, r2
 80114e6:	f813 0c10 	ldrb.w	r0, [r3, #-16]
}
 80114ea:	b004      	add	sp, #16
 80114ec:	bc30      	pop	{r4, r5}
 80114ee:	4770      	bx	lr
        uint32_t px    = ((dsc->header.w + 7) >> 3) * y + x;
 80114f0:	6803      	ldr	r3, [r0, #0]
        uint8_t px_opa = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
 80114f2:	f001 0007 	and.w	r0, r1, #7
 80114f6:	2501      	movs	r5, #1
        uint32_t px    = ((dsc->header.w + 7) >> 3) * y + x;
 80114f8:	10c9      	asrs	r1, r1, #3
 80114fa:	f3c3 238a 	ubfx	r3, r3, #10, #11
        uint8_t px_opa = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
 80114fe:	f1c0 0007 	rsb	r0, r0, #7
        uint32_t px    = ((dsc->header.w + 7) >> 3) * y + x;
 8011502:	3307      	adds	r3, #7
        uint8_t px_opa = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
 8011504:	4085      	lsls	r5, r0
        uint32_t px    = ((dsc->header.w + 7) >> 3) * y + x;
 8011506:	10db      	asrs	r3, r3, #3
        uint8_t px_opa = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
 8011508:	fb02 4203 	mla	r2, r2, r3, r4
 801150c:	5c53      	ldrb	r3, [r2, r1]
 801150e:	402b      	ands	r3, r5
        return px_opa ? LV_OPA_TRANSP : LV_OPA_COVER;
 8011510:	4103      	asrs	r3, r0
 8011512:	bf0c      	ite	eq
 8011514:	20ff      	moveq	r0, #255	; 0xff
 8011516:	2000      	movne	r0, #0
}
 8011518:	b004      	add	sp, #16
 801151a:	bc30      	pop	{r4, r5}
 801151c:	4770      	bx	lr
        uint32_t px = dsc->header.w * y + x;
 801151e:	6803      	ldr	r3, [r0, #0]
 8011520:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8011524:	fb12 1203 	smlabb	r2, r2, r3, r1
        return buf_u8[px];
 8011528:	5ca0      	ldrb	r0, [r4, r2]
}
 801152a:	b004      	add	sp, #16
 801152c:	bc30      	pop	{r4, r5}
 801152e:	4770      	bx	lr
        uint32_t px    = ((dsc->header.w + 1) >> 1) * y + x;
 8011530:	6803      	ldr	r3, [r0, #0]
        uint8_t bit = (x & 0x1) * 4;
 8011532:	f001 0001 	and.w	r0, r1, #1
        uint8_t px_opa = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
 8011536:	250f      	movs	r5, #15
        uint32_t px    = ((dsc->header.w + 1) >> 1) * y + x;
 8011538:	1049      	asrs	r1, r1, #1
 801153a:	f3c3 238a 	ubfx	r3, r3, #10, #11
        uint8_t px_opa = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
 801153e:	0080      	lsls	r0, r0, #2
        uint32_t px    = ((dsc->header.w + 1) >> 1) * y + x;
 8011540:	3301      	adds	r3, #1
        uint8_t px_opa = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
 8011542:	f1c0 0004 	rsb	r0, r0, #4
        uint32_t px    = ((dsc->header.w + 1) >> 1) * y + x;
 8011546:	105b      	asrs	r3, r3, #1
        uint8_t px_opa = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
 8011548:	4085      	lsls	r5, r0
 801154a:	fb02 4203 	mla	r2, r2, r3, r4
        const uint8_t opa_table[16] = {0,  17, 34,  51, /*Opacity mapping with bpp = 4*/
 801154e:	4b08      	ldr	r3, [pc, #32]	; (8011570 <lv_img_buf_get_px_alpha+0xf4>)
        uint8_t px_opa = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
 8011550:	5c54      	ldrb	r4, [r2, r1]
 8011552:	402c      	ands	r4, r5
        return opa_table[px_opa];
 8011554:	ad04      	add	r5, sp, #16
        uint8_t px_opa = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
 8011556:	4104      	asrs	r4, r0
        const uint8_t opa_table[16] = {0,  17, 34,  51, /*Opacity mapping with bpp = 4*/
 8011558:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
        return opa_table[px_opa];
 801155a:	442c      	add	r4, r5
        const uint8_t opa_table[16] = {0,  17, 34,  51, /*Opacity mapping with bpp = 4*/
 801155c:	e905 000f 	stmdb	r5, {r0, r1, r2, r3}
        return opa_table[px_opa];
 8011560:	f814 0c10 	ldrb.w	r0, [r4, #-16]
}
 8011564:	b004      	add	sp, #16
 8011566:	bc30      	pop	{r4, r5}
 8011568:	4770      	bx	lr
 801156a:	bf00      	nop
 801156c:	ffaa5500 	.word	0xffaa5500
 8011570:	0801e18c 	.word	0x0801e18c

08011574 <_lv_img_buf_transform_init>:
/**
 * Initialize a descriptor to transform an image
 * @param dsc pointer to an `lv_img_transform_dsc_t` variable whose `cfg` field is initialized
 */
void _lv_img_buf_transform_init(lv_img_transform_dsc_t * dsc)
{
 8011574:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    dsc->tmp.pivot_x_256 = dsc->cfg.pivot_x * 256;
    dsc->tmp.pivot_y_256 = dsc->cfg.pivot_y * 256;

    int32_t angle_low = dsc->cfg.angle / 10;
 8011578:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
{
 801157c:	4604      	mov	r4, r0
    int32_t angle_low = dsc->cfg.angle / 10;
 801157e:	f8df 9110 	ldr.w	r9, [pc, #272]	; 8011690 <_lv_img_buf_transform_init+0x11c>
    int32_t angle_high = angle_low + 1;
    int32_t angle_rem = dsc->cfg.angle  - (angle_low * 10);
 8011582:	f64f 76f6 	movw	r6, #65526	; 0xfff6
    int32_t angle_low = dsc->cfg.angle / 10;
 8011586:	17df      	asrs	r7, r3, #31
    dsc->tmp.pivot_x_256 = dsc->cfg.pivot_x * 256;
 8011588:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
    int32_t angle_low = dsc->cfg.angle / 10;
 801158c:	fb89 2003 	smull	r2, r0, r9, r3
    dsc->tmp.pivot_y_256 = dsc->cfg.pivot_y * 256;
 8011590:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
    dsc->tmp.pivot_x_256 = dsc->cfg.pivot_x * 256;
 8011594:	0209      	lsls	r1, r1, #8
    int32_t angle_low = dsc->cfg.angle / 10;
 8011596:	ebc7 07a0 	rsb	r7, r7, r0, asr #2
    dsc->tmp.pivot_y_256 = dsc->cfg.pivot_y * 256;
 801159a:	0212      	lsls	r2, r2, #8
    dsc->tmp.pivot_x_256 = dsc->cfg.pivot_x * 256;
 801159c:	62e1      	str	r1, [r4, #44]	; 0x2c
    int32_t angle_low = dsc->cfg.angle / 10;
 801159e:	fa0f f887 	sxth.w	r8, r7

    int32_t s1 = _lv_trigo_sin(-angle_low);
 80115a2:	b2bd      	uxth	r5, r7
    dsc->tmp.pivot_y_256 = dsc->cfg.pivot_y * 256;
 80115a4:	6322      	str	r2, [r4, #48]	; 0x30
    int32_t angle_rem = dsc->cfg.angle  - (angle_low * 10);
 80115a6:	fb17 3706 	smlabb	r7, r7, r6, r3
    int32_t angle_high = angle_low + 1;
 80115aa:	f108 0801 	add.w	r8, r8, #1
    int32_t s1 = _lv_trigo_sin(-angle_low);
 80115ae:	4268      	negs	r0, r5
    int32_t s2 = _lv_trigo_sin(-angle_high);

    int32_t c1 = _lv_trigo_sin(-angle_low + 90);
 80115b0:	f1c5 055a 	rsb	r5, r5, #90	; 0x5a
    int32_t s2 = _lv_trigo_sin(-angle_high);
 80115b4:	fa1f f888 	uxth.w	r8, r8
    int32_t s1 = _lv_trigo_sin(-angle_low);
 80115b8:	b200      	sxth	r0, r0
 80115ba:	f003 fb59 	bl	8014c70 <_lv_trigo_sin>
 80115be:	4606      	mov	r6, r0
    int32_t s2 = _lv_trigo_sin(-angle_high);
 80115c0:	f1c8 0000 	rsb	r0, r8, #0
    int32_t c2 = _lv_trigo_sin(-angle_high + 90);
 80115c4:	f1c8 085a 	rsb	r8, r8, #90	; 0x5a
    int32_t s2 = _lv_trigo_sin(-angle_high);
 80115c8:	b200      	sxth	r0, r0
 80115ca:	f003 fb51 	bl	8014c70 <_lv_trigo_sin>
 80115ce:	4682      	mov	sl, r0
    int32_t c1 = _lv_trigo_sin(-angle_low + 90);
 80115d0:	b228      	sxth	r0, r5
 80115d2:	f003 fb4d 	bl	8014c70 <_lv_trigo_sin>
 80115d6:	4605      	mov	r5, r0
    int32_t c2 = _lv_trigo_sin(-angle_high + 90);
 80115d8:	fa0f f088 	sxth.w	r0, r8
 80115dc:	f003 fb48 	bl	8014c70 <_lv_trigo_sin>

    dsc->tmp.sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
 80115e0:	f1c7 010a 	rsb	r1, r7, #10
    dsc->tmp.cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
 80115e4:	fb07 f300 	mul.w	r3, r7, r0

    /*Use smaller value to avoid overflow*/
    dsc->tmp.sinma = dsc->tmp.sinma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
    dsc->tmp.cosma = dsc->tmp.cosma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);

    dsc->tmp.chroma_keyed = lv_img_cf_is_chroma_keyed(dsc->cfg.cf) ? 1 : 0;
 80115e8:	7d20      	ldrb	r0, [r4, #20]
    dsc->tmp.sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
 80115ea:	fb07 f20a 	mul.w	r2, r7, sl

    /* The inverse of the zoom will be sued during the transformation
     *  + dsc->cfg.zoom / 2 for rounding*/
    dsc->tmp.zoom_inv = (((256 * 256) << _LV_ZOOM_INV_UPSCALE) + dsc->cfg.zoom / 2) / dsc->cfg.zoom;

    dsc->res.opa = LV_OPA_COVER;
 80115ee:	27ff      	movs	r7, #255	; 0xff
    dsc->tmp.cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
 80115f0:	fb01 3305 	mla	r3, r1, r5, r3
    dsc->tmp.sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
 80115f4:	fb01 2206 	mla	r2, r1, r6, r2
 80115f8:	fb89 5102 	smull	r5, r1, r9, r2
 80115fc:	17d2      	asrs	r2, r2, #31
    dsc->tmp.cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
 80115fe:	fb89 5903 	smull	r5, r9, r9, r3
 8011602:	17db      	asrs	r3, r3, #31
    dsc->tmp.sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
 8011604:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
    dsc->tmp.cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
 8011608:	ebc3 03a9 	rsb	r3, r3, r9, asr #2
    dsc->tmp.sinma = dsc->tmp.sinma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
 801160c:	1152      	asrs	r2, r2, #5
    dsc->tmp.cosma = dsc->tmp.cosma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
 801160e:	115b      	asrs	r3, r3, #5
 8011610:	e9c4 230d 	strd	r2, r3, [r4, #52]	; 0x34
    dsc->tmp.chroma_keyed = lv_img_cf_is_chroma_keyed(dsc->cfg.cf) ? 1 : 0;
 8011614:	f7fa fdba 	bl	800c18c <lv_img_cf_is_chroma_keyed>
 8011618:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 801161c:	4602      	mov	r2, r0
    dsc->tmp.has_alpha = lv_img_cf_has_alpha(dsc->cfg.cf) ? 1 : 0;
 801161e:	7d20      	ldrb	r0, [r4, #20]
    dsc->tmp.chroma_keyed = lv_img_cf_is_chroma_keyed(dsc->cfg.cf) ? 1 : 0;
 8011620:	f362 0300 	bfi	r3, r2, #0, #1
 8011624:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    dsc->tmp.has_alpha = lv_img_cf_has_alpha(dsc->cfg.cf) ? 1 : 0;
 8011628:	f7fa fdba 	bl	800c1a0 <lv_img_cf_has_alpha>
    if(dsc->cfg.cf == LV_IMG_CF_TRUE_COLOR || dsc->cfg.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 801162c:	7d23      	ldrb	r3, [r4, #20]
    dsc->tmp.zoom_inv = (((256 * 256) << _LV_ZOOM_INV_UPSCALE) + dsc->cfg.zoom / 2) / dsc->cfg.zoom;
 801162e:	89e5      	ldrh	r5, [r4, #14]
    dsc->tmp.has_alpha = lv_img_cf_has_alpha(dsc->cfg.cf) ? 1 : 0;
 8011630:	0040      	lsls	r0, r0, #1
    if(dsc->cfg.cf == LV_IMG_CF_TRUE_COLOR || dsc->cfg.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 8011632:	1f1a      	subs	r2, r3, #4
    dsc->tmp.img_dsc.header.cf = dsc->cfg.cf;
 8011634:	88a1      	ldrh	r1, [r4, #4]
    dsc->tmp.zoom_inv = (((256 * 256) << _LV_ZOOM_INV_UPSCALE) + dsc->cfg.zoom / 2) / dsc->cfg.zoom;
 8011636:	ea4f 0c55 	mov.w	ip, r5, lsr #1
    dsc->tmp.img_dsc.header.cf = dsc->cfg.cf;
 801163a:	f003 031f 	and.w	r3, r3, #31
    if(dsc->cfg.cf == LV_IMG_CF_TRUE_COLOR || dsc->cfg.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 801163e:	2a02      	cmp	r2, #2
    dsc->tmp.img_dsc.header.cf = dsc->cfg.cf;
 8011640:	f3c1 010a 	ubfx	r1, r1, #0, #11
    dsc->tmp.has_alpha = lv_img_cf_has_alpha(dsc->cfg.cf) ? 1 : 0;
 8011644:	f894 603c 	ldrb.w	r6, [r4, #60]	; 0x3c
    if(dsc->cfg.cf == LV_IMG_CF_TRUE_COLOR || dsc->cfg.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 8011648:	bf8c      	ite	hi
 801164a:	2200      	movhi	r2, #0
 801164c:	2201      	movls	r2, #1
    dsc->tmp.img_dsc.header.cf = dsc->cfg.cf;
 801164e:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
    dsc->tmp.zoom_inv = (((256 * 256) << _LV_ZOOM_INV_UPSCALE) + dsc->cfg.zoom / 2) / dsc->cfg.zoom;
 8011652:	f50c 1100 	add.w	r1, ip, #2097152	; 0x200000
    dsc->tmp.has_alpha = lv_img_cf_has_alpha(dsc->cfg.cf) ? 1 : 0;
 8011656:	ea40 0282 	orr.w	r2, r0, r2, lsl #2
    dsc->tmp.img_dsc.header.cf = dsc->cfg.cf;
 801165a:	f9b4 c006 	ldrsh.w	ip, [r4, #6]
 801165e:	6a20      	ldr	r0, [r4, #32]
    dsc->tmp.has_alpha = lv_img_cf_has_alpha(dsc->cfg.cf) ? 1 : 0;
 8011660:	f026 0606 	bic.w	r6, r6, #6
 8011664:	f002 0206 	and.w	r2, r2, #6
    dsc->tmp.img_dsc.header.cf = dsc->cfg.cf;
 8011668:	ea43 534c 	orr.w	r3, r3, ip, lsl #21
 801166c:	f400 7040 	and.w	r0, r0, #768	; 0x300
    dsc->res.opa = LV_OPA_COVER;
 8011670:	7727      	strb	r7, [r4, #28]
    dsc->tmp.has_alpha = lv_img_cf_has_alpha(dsc->cfg.cf) ? 1 : 0;
 8011672:	4332      	orrs	r2, r6
    dsc->tmp.img_dsc.data = dsc->cfg.src;
 8011674:	6826      	ldr	r6, [r4, #0]
    dsc->tmp.img_dsc.header.cf = dsc->cfg.cf;
 8011676:	4303      	orrs	r3, r0
    dsc->res.color = dsc->cfg.color;
 8011678:	6920      	ldr	r0, [r4, #16]
    dsc->tmp.has_alpha = lv_img_cf_has_alpha(dsc->cfg.cf) ? 1 : 0;
 801167a:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    dsc->tmp.img_dsc.header.cf = dsc->cfg.cf;
 801167e:	6223      	str	r3, [r4, #32]
    dsc->tmp.img_dsc.data = dsc->cfg.src;
 8011680:	62a6      	str	r6, [r4, #40]	; 0x28
    dsc->res.color = dsc->cfg.color;
 8011682:	61a0      	str	r0, [r4, #24]
    dsc->tmp.zoom_inv = (((256 * 256) << _LV_ZOOM_INV_UPSCALE) + dsc->cfg.zoom / 2) / dsc->cfg.zoom;
 8011684:	fbb1 f1f5 	udiv	r1, r1, r5
 8011688:	6421      	str	r1, [r4, #64]	; 0x40
}
 801168a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801168e:	bf00      	nop
 8011690:	66666667 	.word	0x66666667

08011694 <_lv_img_buf_get_transformed_area>:
 * @param zoom zoom, (256 no zoom)
 * @param pivot x,y pivot coordinates of rotation
 */
void _lv_img_buf_get_transformed_area(lv_area_t * res, lv_coord_t w, lv_coord_t h, int16_t angle, uint16_t zoom,
                                      const lv_point_t * pivot)
{
 8011694:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011698:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801169a:	4604      	mov	r4, r0
 801169c:	f8bd e028 	ldrh.w	lr, [sp, #40]	; 0x28
#if LV_USE_IMG_TRANSFORM
    if(angle == 0 && zoom == LV_IMG_ZOOM_NONE) {
 80116a0:	b94b      	cbnz	r3, 80116b6 <_lv_img_buf_get_transformed_area+0x22>
 80116a2:	f5be 7f80 	cmp.w	lr, #256	; 0x100
 80116a6:	d106      	bne.n	80116b6 <_lv_img_buf_get_transformed_area+0x22>
        res->x1 = 0;
        res->y1 = 0;
        res->x2 = w - 1;
 80116a8:	3901      	subs	r1, #1
        res->y2 = h - 1;
 80116aa:	3a01      	subs	r2, #1
        res->x1 = 0;
 80116ac:	6003      	str	r3, [r0, #0]
        res->x2 = w - 1;
 80116ae:	8081      	strh	r1, [r0, #4]
        res->y2 = h - 1;
 80116b0:	80c2      	strh	r2, [r0, #6]
    res->x1 = 0;
    res->y1 = 0;
    res->x2 = w - 1;
    res->y2 = h - 1;
#endif
}
 80116b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    res->x1 = (((-pivot->x) * zoom) >> 8) - 1;
 80116b6:	f9b5 6000 	ldrsh.w	r6, [r5]
    res->y1 = (((-pivot->y) * zoom) >> 8) - 1;
 80116ba:	f9b5 0002 	ldrsh.w	r0, [r5, #2]
    res->x2 = (((w - pivot->x) * zoom) >> 8) + 2;
 80116be:	1b89      	subs	r1, r1, r6
    res->x1 = (((-pivot->x) * zoom) >> 8) - 1;
 80116c0:	f1c6 0800 	rsb	r8, r6, #0
    res->y2 = (((h - pivot->y) * zoom) >> 8) + 2;
 80116c4:	1a17      	subs	r7, r2, r0
    res->y1 = (((-pivot->y) * zoom) >> 8) - 1;
 80116c6:	4242      	negs	r2, r0
    res->x2 = (((w - pivot->x) * zoom) >> 8) + 2;
 80116c8:	fb0e fc01 	mul.w	ip, lr, r1
    res->x1 = (((-pivot->x) * zoom) >> 8) - 1;
 80116cc:	fb0e f808 	mul.w	r8, lr, r8
    res->y2 = (((h - pivot->y) * zoom) >> 8) + 2;
 80116d0:	fb0e f107 	mul.w	r1, lr, r7
    res->x2 = (((w - pivot->x) * zoom) >> 8) + 2;
 80116d4:	ea4f 272c 	mov.w	r7, ip, asr #8
    res->y1 = (((-pivot->y) * zoom) >> 8) - 1;
 80116d8:	fb0e f202 	mul.w	r2, lr, r2
    res->x1 = (((-pivot->x) * zoom) >> 8) - 1;
 80116dc:	ea4f 2c28 	mov.w	ip, r8, asr #8
    res->y2 = (((h - pivot->y) * zoom) >> 8) + 2;
 80116e0:	1209      	asrs	r1, r1, #8
    res->x2 = (((w - pivot->x) * zoom) >> 8) + 2;
 80116e2:	3702      	adds	r7, #2
    res->y1 = (((-pivot->y) * zoom) >> 8) - 1;
 80116e4:	1212      	asrs	r2, r2, #8
    res->x1 = (((-pivot->x) * zoom) >> 8) - 1;
 80116e6:	f10c 3cff 	add.w	ip, ip, #4294967295
    res->y2 = (((h - pivot->y) * zoom) >> 8) + 2;
 80116ea:	3102      	adds	r1, #2
    res->x2 = (((w - pivot->x) * zoom) >> 8) + 2;
 80116ec:	b2bf      	uxth	r7, r7
    res->y1 = (((-pivot->y) * zoom) >> 8) - 1;
 80116ee:	3a01      	subs	r2, #1
    res->x1 = (((-pivot->x) * zoom) >> 8) - 1;
 80116f0:	fa1f fc8c 	uxth.w	ip, ip
    res->y2 = (((h - pivot->y) * zoom) >> 8) + 2;
 80116f4:	b289      	uxth	r1, r1
    res->x2 = (((w - pivot->x) * zoom) >> 8) + 2;
 80116f6:	80a7      	strh	r7, [r4, #4]
    res->y1 = (((-pivot->y) * zoom) >> 8) - 1;
 80116f8:	b292      	uxth	r2, r2
    res->x1 = (((-pivot->x) * zoom) >> 8) - 1;
 80116fa:	f8a4 c000 	strh.w	ip, [r4]
    res->y2 = (((h - pivot->y) * zoom) >> 8) + 2;
 80116fe:	80e1      	strh	r1, [r4, #6]
    res->y1 = (((-pivot->y) * zoom) >> 8) - 1;
 8011700:	8062      	strh	r2, [r4, #2]
    if(angle == 0) {
 8011702:	b963      	cbnz	r3, 801171e <_lv_img_buf_get_transformed_area+0x8a>
        res->x1 += pivot->x;
 8011704:	b2b6      	uxth	r6, r6
        res->y1 += pivot->y;
 8011706:	b280      	uxth	r0, r0
        res->x1 += pivot->x;
 8011708:	44b4      	add	ip, r6
        res->x2 += pivot->x;
 801170a:	443e      	add	r6, r7
        res->y1 += pivot->y;
 801170c:	4402      	add	r2, r0
        res->y2 += pivot->y;
 801170e:	4408      	add	r0, r1
        res->x1 += pivot->x;
 8011710:	f8a4 c000 	strh.w	ip, [r4]
        res->x2 += pivot->x;
 8011714:	80a6      	strh	r6, [r4, #4]
        res->y1 += pivot->y;
 8011716:	8062      	strh	r2, [r4, #2]
        res->y2 += pivot->y;
 8011718:	80e0      	strh	r0, [r4, #6]
}
 801171a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    int32_t angle_low = angle / 10;
 801171e:	f8df 914c 	ldr.w	r9, [pc, #332]	; 801186c <_lv_img_buf_get_transformed_area+0x1d8>
 8011722:	17de      	asrs	r6, r3, #31
    int32_t angle_rem = angle  - (angle_low * 10);
 8011724:	f64f 7bf6 	movw	fp, #65526	; 0xfff6
    int32_t angle_low = angle / 10;
 8011728:	fb89 2003 	smull	r2, r0, r9, r3
 801172c:	ebc6 06a0 	rsb	r6, r6, r0, asr #2
 8011730:	b236      	sxth	r6, r6
    int32_t angle_high = angle_low + 1;
 8011732:	1c77      	adds	r7, r6, #1
    int32_t s1 = _lv_trigo_sin(angle_low);
 8011734:	4630      	mov	r0, r6
    int32_t angle_rem = angle  - (angle_low * 10);
 8011736:	fb16 3b0b 	smlabb	fp, r6, fp, r3
    int32_t s1 = _lv_trigo_sin(angle_low);
 801173a:	f003 fa99 	bl	8014c70 <_lv_trigo_sin>
 801173e:	4680      	mov	r8, r0
    int32_t s2 = _lv_trigo_sin(angle_high);
 8011740:	b238      	sxth	r0, r7
 8011742:	f003 fa95 	bl	8014c70 <_lv_trigo_sin>
 8011746:	4682      	mov	sl, r0
    int32_t c1 = _lv_trigo_sin(angle_low + 90);
 8011748:	f106 005a 	add.w	r0, r6, #90	; 0x5a
    int32_t c2 = _lv_trigo_sin(angle_high + 90);
 801174c:	365b      	adds	r6, #91	; 0x5b
    int32_t c1 = _lv_trigo_sin(angle_low + 90);
 801174e:	b200      	sxth	r0, r0
 8011750:	f003 fa8e 	bl	8014c70 <_lv_trigo_sin>
 8011754:	4607      	mov	r7, r0
    int32_t c2 = _lv_trigo_sin(angle_high + 90);
 8011756:	b230      	sxth	r0, r6
    int32_t sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
 8011758:	fb0b f60a 	mul.w	r6, fp, sl
    int32_t c2 = _lv_trigo_sin(angle_high + 90);
 801175c:	f003 fa88 	bl	8014c70 <_lv_trigo_sin>
    int32_t sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
 8011760:	f1cb 020a 	rsb	r2, fp, #10
    int32_t cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
 8011764:	fb0b f000 	mul.w	r0, fp, r0
    lt.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 8011768:	f9b4 c000 	ldrsh.w	ip, [r4]
    int32_t sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
 801176c:	fb02 6608 	mla	r6, r2, r8, r6
    lt.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 8011770:	f9b4 e002 	ldrsh.w	lr, [r4, #2]
    int32_t cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
 8011774:	fb02 0107 	mla	r1, r2, r7, r0
    rt.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 8011778:	f9b4 7004 	ldrsh.w	r7, [r4, #4]
    int32_t sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
 801177c:	fb89 3206 	smull	r3, r2, r9, r6
 8011780:	17f0      	asrs	r0, r6, #31
    int32_t cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
 8011782:	fb89 6301 	smull	r6, r3, r9, r1
 8011786:	17c9      	asrs	r1, r1, #31
    int32_t sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
 8011788:	ebc0 00a2 	rsb	r0, r0, r2, asr #2
    lt.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 801178c:	882e      	ldrh	r6, [r5, #0]
    int32_t cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
 801178e:	ebc1 01a3 	rsb	r1, r1, r3, asr #2
    lt.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 8011792:	886a      	ldrh	r2, [r5, #2]
    sinma = sinma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
 8011794:	1140      	asrs	r0, r0, #5
    lb.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 8011796:	f9b4 9006 	ldrsh.w	r9, [r4, #6]
    cosma = cosma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
 801179a:	114b      	asrs	r3, r1, #5
    lt.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 801179c:	fb00 f80c 	mul.w	r8, r0, ip
    rt.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 80117a0:	fb03 f107 	mul.w	r1, r3, r7
    lt.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 80117a4:	fb00 f50e 	mul.w	r5, r0, lr
 80117a8:	fb03 fc0c 	mul.w	ip, r3, ip
    rt.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 80117ac:	fb00 f707 	mul.w	r7, r0, r7
    lt.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 80117b0:	ebac 0b05 	sub.w	fp, ip, r5
    rt.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 80117b4:	1b4d      	subs	r5, r1, r5
    lt.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 80117b6:	fb03 fe0e 	mul.w	lr, r3, lr
    lt.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 80117ba:	eb06 2bab 	add.w	fp, r6, fp, asr #10
    lb.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 80117be:	fb00 f009 	mul.w	r0, r0, r9
    rt.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 80117c2:	eb06 25a5 	add.w	r5, r6, r5, asr #10
    lt.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 80117c6:	eb08 0a0e 	add.w	sl, r8, lr
    lt.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 80117ca:	fa0f fb8b 	sxth.w	fp, fp
    rt.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 80117ce:	44be      	add	lr, r7
    rt.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 80117d0:	b22d      	sxth	r5, r5
    lb.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 80117d2:	fb03 f309 	mul.w	r3, r3, r9
    lt.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 80117d6:	eb02 2aaa 	add.w	sl, r2, sl, asr #10
    lb.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 80117da:	ebac 0c00 	sub.w	ip, ip, r0
    res->x1 = LV_MATH_MIN4(lb.x, lt.x, rb.x, rt.x);
 80117de:	45ab      	cmp	fp, r5
    rt.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 80117e0:	eb02 2eae 	add.w	lr, r2, lr, asr #10
    rb.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 80117e4:	eb07 0903 	add.w	r9, r7, r3
    lb.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 80117e8:	4498      	add	r8, r3
    rb.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 80117ea:	eba1 0000 	sub.w	r0, r1, r0
    lt.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 80117ee:	fa0f f38a 	sxth.w	r3, sl
    rt.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 80117f2:	fa0f f18e 	sxth.w	r1, lr
    res->x1 = LV_MATH_MIN4(lb.x, lt.x, rb.x, rt.x);
 80117f6:	46da      	mov	sl, fp
 80117f8:	bfa8      	it	ge
 80117fa:	46aa      	movge	sl, r5
    res->x2 = LV_MATH_MAX4(lb.x, lt.x, rb.x, rt.x);
 80117fc:	455d      	cmp	r5, fp
    lb.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 80117fe:	eb06 2cac 	add.w	ip, r6, ip, asr #10
    res->y1 = LV_MATH_MIN4(lb.y, lt.y, rb.y, rt.y);
 8011802:	461f      	mov	r7, r3
    res->x2 = LV_MATH_MAX4(lb.x, lt.x, rb.x, rt.x);
 8011804:	bfb8      	it	lt
 8011806:	465d      	movlt	r5, fp
    res->y1 = LV_MATH_MIN4(lb.y, lt.y, rb.y, rt.y);
 8011808:	428b      	cmp	r3, r1
    lb.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 801180a:	fa0f fc8c 	sxth.w	ip, ip
    res->y1 = LV_MATH_MIN4(lb.y, lt.y, rb.y, rt.y);
 801180e:	bfa8      	it	ge
 8011810:	460f      	movge	r7, r1
    res->y2 = LV_MATH_MAX4(lb.y, lt.y, rb.y, rt.y);
 8011812:	4299      	cmp	r1, r3
    lb.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 8011814:	eb02 28a8 	add.w	r8, r2, r8, asr #10
    res->y2 = LV_MATH_MAX4(lb.y, lt.y, rb.y, rt.y);
 8011818:	bfb8      	it	lt
 801181a:	4619      	movlt	r1, r3
    res->x1 = LV_MATH_MIN4(lb.x, lt.x, rb.x, rt.x);
 801181c:	45e2      	cmp	sl, ip
    lb.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 801181e:	fa0f f888 	sxth.w	r8, r8
    res->x1 = LV_MATH_MIN4(lb.x, lt.x, rb.x, rt.x);
 8011822:	bfa8      	it	ge
 8011824:	46e2      	movge	sl, ip
    res->x2 = LV_MATH_MAX4(lb.x, lt.x, rb.x, rt.x);
 8011826:	4565      	cmp	r5, ip
    rb.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 8011828:	eb06 20a0 	add.w	r0, r6, r0, asr #10
    res->x2 = LV_MATH_MAX4(lb.x, lt.x, rb.x, rt.x);
 801182c:	bfb8      	it	lt
 801182e:	4665      	movlt	r5, ip
    res->y1 = LV_MATH_MIN4(lb.y, lt.y, rb.y, rt.y);
 8011830:	4547      	cmp	r7, r8
    rb.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 8011832:	b200      	sxth	r0, r0
    res->y1 = LV_MATH_MIN4(lb.y, lt.y, rb.y, rt.y);
 8011834:	bfa8      	it	ge
 8011836:	4647      	movge	r7, r8
    res->y2 = LV_MATH_MAX4(lb.y, lt.y, rb.y, rt.y);
 8011838:	4541      	cmp	r1, r8
    rb.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 801183a:	eb02 22a9 	add.w	r2, r2, r9, asr #10
    res->y2 = LV_MATH_MAX4(lb.y, lt.y, rb.y, rt.y);
 801183e:	bfb8      	it	lt
 8011840:	4641      	movlt	r1, r8
    res->x1 = LV_MATH_MIN4(lb.x, lt.x, rb.x, rt.x);
 8011842:	4582      	cmp	sl, r0
    rb.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 8011844:	b213      	sxth	r3, r2
    res->y1 = LV_MATH_MIN4(lb.y, lt.y, rb.y, rt.y);
 8011846:	463a      	mov	r2, r7
    res->x1 = LV_MATH_MIN4(lb.x, lt.x, rb.x, rt.x);
 8011848:	bfa8      	it	ge
 801184a:	4682      	movge	sl, r0
    res->x2 = LV_MATH_MAX4(lb.x, lt.x, rb.x, rt.x);
 801184c:	4285      	cmp	r5, r0
 801184e:	bfb8      	it	lt
 8011850:	4605      	movlt	r5, r0
    res->y1 = LV_MATH_MIN4(lb.y, lt.y, rb.y, rt.y);
 8011852:	429f      	cmp	r7, r3
    res->x1 = LV_MATH_MIN4(lb.x, lt.x, rb.x, rt.x);
 8011854:	f8a4 a000 	strh.w	sl, [r4]
    res->y1 = LV_MATH_MIN4(lb.y, lt.y, rb.y, rt.y);
 8011858:	bfa8      	it	ge
 801185a:	461a      	movge	r2, r3
    res->y2 = LV_MATH_MAX4(lb.y, lt.y, rb.y, rt.y);
 801185c:	428b      	cmp	r3, r1
    res->x2 = LV_MATH_MAX4(lb.x, lt.x, rb.x, rt.x);
 801185e:	80a5      	strh	r5, [r4, #4]
    res->y2 = LV_MATH_MAX4(lb.y, lt.y, rb.y, rt.y);
 8011860:	bfb8      	it	lt
 8011862:	460b      	movlt	r3, r1
    res->y1 = LV_MATH_MIN4(lb.y, lt.y, rb.y, rt.y);
 8011864:	8062      	strh	r2, [r4, #2]
    res->y2 = LV_MATH_MAX4(lb.y, lt.y, rb.y, rt.y);
 8011866:	80e3      	strh	r3, [r4, #6]
}
 8011868:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801186c:	66666667 	.word	0x66666667

08011870 <_lv_img_buf_transform_anti_alias>:
/**
 * Continue transformation by taking the neighbors into account
 * @param dsc pointer to the transformation descriptor
 */
bool _lv_img_buf_transform_anti_alias(lv_img_transform_dsc_t * dsc)
{
 8011870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    const uint8_t * src_u8 = dsc->cfg.src;

    /*Get the fractional part of the source pixel*/
    int xs_fract = dsc->tmp.xs & 0xff;
 8011874:	f9b0 6044 	ldrsh.w	r6, [r0, #68]	; 0x44
{
 8011878:	b08b      	sub	sp, #44	; 0x2c
    int ys_fract = dsc->tmp.ys & 0xff;
 801187a:	f9b0 5046 	ldrsh.w	r5, [r0, #70]	; 0x46
{
 801187e:	4604      	mov	r4, r0
    int xs_fract = dsc->tmp.xs & 0xff;
 8011880:	b2f2      	uxtb	r2, r6
    int ys_fract = dsc->tmp.ys & 0xff;
 8011882:	b2eb      	uxtb	r3, r5
    int32_t xn;      /*x neighbor*/
    lv_opa_t xr; /*x mix ratio*/

    if(xs_fract < 0x70) {
 8011884:	2a6f      	cmp	r2, #111	; 0x6f
 8011886:	f200 80fd 	bhi.w	8011a84 <_lv_img_buf_transform_anti_alias+0x214>
        xn = - 1;
        if(dsc->tmp.xs_int + xn < 0) xn = 0;
 801188a:	f9b0 7048 	ldrsh.w	r7, [r0, #72]	; 0x48
        xr = xs_fract + 0x80;
 801188e:	3e80      	subs	r6, #128	; 0x80
        if(dsc->tmp.xs_int + xn < 0) xn = 0;
 8011890:	2f00      	cmp	r7, #0
        xr = xs_fract + 0x80;
 8011892:	b2f6      	uxtb	r6, r6
        if(dsc->tmp.xs_int + xn < 0) xn = 0;
 8011894:	bfd4      	ite	le
 8011896:	2700      	movle	r7, #0
 8011898:	2701      	movgt	r7, #1
 801189a:	427f      	negs	r7, r7
    }

    int32_t yn;      /*x neighbor*/
    lv_opa_t yr; /*x mix ratio*/

    if(ys_fract < 0x70) {
 801189c:	2b6f      	cmp	r3, #111	; 0x6f
 801189e:	f200 80e0 	bhi.w	8011a62 <_lv_img_buf_transform_anti_alias+0x1f2>
        yn = - 1;
        if(dsc->tmp.ys_int + yn < 0) yn = 0;
 80118a2:	f9b4 304a 	ldrsh.w	r3, [r4, #74]	; 0x4a

        yr = ys_fract + 0x80;
 80118a6:	3d80      	subs	r5, #128	; 0x80
        if(dsc->tmp.ys_int + yn < 0) yn = 0;
 80118a8:	2b00      	cmp	r3, #0
        yr = ys_fract + 0x80;
 80118aa:	b2ed      	uxtb	r5, r5
        if(dsc->tmp.ys_int + yn < 0) yn = 0;
 80118ac:	bfd4      	ite	le
 80118ae:	2300      	movle	r3, #0
 80118b0:	2301      	movgt	r3, #1
 80118b2:	f1c3 0c00 	rsb	ip, r3, #0
    else {
        yn = 0;
        yr = 0xFF;
    }

    lv_color_t c00 = dsc->res.color;
 80118b6:	7ee3      	ldrb	r3, [r4, #27]
    lv_opa_t a00 = dsc->res.opa;
    lv_opa_t a10 = 0;
    lv_opa_t a01 = 0;
    lv_opa_t a11 = 0;

    if(dsc->tmp.native_color) {
 80118b8:	f894 e03c 	ldrb.w	lr, [r4, #60]	; 0x3c
    lv_color_t c00 = dsc->res.color;
 80118bc:	9301      	str	r3, [sp, #4]
    if(dsc->tmp.native_color) {
 80118be:	f01e 0f04 	tst.w	lr, #4
    lv_opa_t a00 = dsc->res.opa;
 80118c2:	7f23      	ldrb	r3, [r4, #28]
    lv_color_t c00 = dsc->res.color;
 80118c4:	f894 8018 	ldrb.w	r8, [r4, #24]
 80118c8:	f894 9019 	ldrb.w	r9, [r4, #25]
 80118cc:	f894 a01a 	ldrb.w	sl, [r4, #26]
    lv_opa_t a00 = dsc->res.opa;
 80118d0:	9302      	str	r3, [sp, #8]
    if(dsc->tmp.native_color) {
 80118d2:	d043      	beq.n	801195c <_lv_img_buf_transform_anti_alias+0xec>
        _lv_memcpy_small(&c01, &src_u8[dsc->tmp.pxi + dsc->tmp.px_size * xn], sizeof(lv_color_t));
 80118d4:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
        _lv_memcpy_small(&c10, &src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn], sizeof(lv_color_t));
        _lv_memcpy_small(&c11, &src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn + dsc->tmp.px_size * xn],
                         sizeof(lv_color_t));
        if(dsc->tmp.has_alpha) {
 80118d8:	f01e 0f02 	tst.w	lr, #2
        _lv_memcpy_small(&c10, &src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn], sizeof(lv_color_t));
 80118dc:	88a3      	ldrh	r3, [r4, #4]
        _lv_memcpy_small(&c01, &src_u8[dsc->tmp.pxi + dsc->tmp.px_size * xn], sizeof(lv_color_t));
 80118de:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
        _lv_memcpy_small(&c10, &src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn], sizeof(lv_color_t));
 80118e0:	fb13 f300 	smulbb	r3, r3, r0
    const uint8_t * src_u8 = dsc->cfg.src;
 80118e4:	6822      	ldr	r2, [r4, #0]
        _lv_memcpy_small(&c01, &src_u8[dsc->tmp.pxi + dsc->tmp.px_size * xn], sizeof(lv_color_t));
 80118e6:	fb07 1700 	mla	r7, r7, r0, r1
        _lv_memcpy_small(&c10, &src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn], sizeof(lv_color_t));
 80118ea:	fb0c f303 	mul.w	r3, ip, r3
 80118ee:	f852 c007 	ldr.w	ip, [r2, r7]
 80118f2:	4419      	add	r1, r3
        _lv_memcpy_small(&c11, &src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn + dsc->tmp.px_size * xn],
 80118f4:	443b      	add	r3, r7
 80118f6:	f8cd c01c 	str.w	ip, [sp, #28]
 80118fa:	f852 b001 	ldr.w	fp, [r2, r1]
 80118fe:	f852 c003 	ldr.w	ip, [r2, r3]
 8011902:	e9cd bc08 	strd	fp, ip, [sp, #32]
        if(dsc->tmp.has_alpha) {
 8011906:	d05c      	beq.n	80119c2 <_lv_img_buf_transform_anti_alias+0x152>
            a10 = src_u8[dsc->tmp.pxi + dsc->tmp.px_size * xn + dsc->tmp.px_size - 1];
 8011908:	3801      	subs	r0, #1
 801190a:	4417      	add	r7, r2
            a01 = src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn + dsc->tmp.px_size - 1];
 801190c:	4411      	add	r1, r2
            a11 = src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn + dsc->tmp.px_size * xn + dsc->tmp.px_size - 1];
 801190e:	441a      	add	r2, r3
            a10 = src_u8[dsc->tmp.pxi + dsc->tmp.px_size * xn + dsc->tmp.px_size - 1];
 8011910:	5c3b      	ldrb	r3, [r7, r0]
            a01 = src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn + dsc->tmp.px_size - 1];
 8011912:	5c0f      	ldrb	r7, [r1, r0]
            a11 = src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn + dsc->tmp.px_size * xn + dsc->tmp.px_size - 1];
 8011914:	5c10      	ldrb	r0, [r2, r0]
    }

    lv_opa_t xr0 = xr;
    lv_opa_t xr1 = xr;
    if(dsc->tmp.has_alpha) {
        lv_opa_t a0 = (a00 * xr + (a10 * (255 - xr))) >> 8;
 8011916:	9a02      	ldr	r2, [sp, #8]
 8011918:	f1c6 0eff 	rsb	lr, r6, #255	; 0xff
        lv_opa_t a1 = (a01 * xr + (a11 * (255 - xr))) >> 8;
        dsc->res.opa = (a0 * yr + (a1 * (255 - yr))) >> 8;
 801191c:	f1c5 01ff 	rsb	r1, r5, #255	; 0xff
        lv_opa_t a0 = (a00 * xr + (a10 * (255 - xr))) >> 8;
 8011920:	fb12 f206 	smulbb	r2, r2, r6
        lv_opa_t a1 = (a01 * xr + (a11 * (255 - xr))) >> 8;
 8011924:	fb0e fc00 	mul.w	ip, lr, r0
        lv_opa_t a0 = (a00 * xr + (a10 * (255 - xr))) >> 8;
 8011928:	fb0e 2203 	mla	r2, lr, r3, r2
        lv_opa_t a1 = (a01 * xr + (a11 * (255 - xr))) >> 8;
 801192c:	fb16 cc07 	smlabb	ip, r6, r7, ip
        lv_opa_t a0 = (a00 * xr + (a10 * (255 - xr))) >> 8;
 8011930:	f3c2 2207 	ubfx	r2, r2, #8, #8
        lv_opa_t a1 = (a01 * xr + (a11 * (255 - xr))) >> 8;
 8011934:	f3cc 2c07 	ubfx	ip, ip, #8, #8
        dsc->res.opa = (a0 * yr + (a1 * (255 - yr))) >> 8;
 8011938:	fb05 fe02 	mul.w	lr, r5, r2

        if(a0 <= LV_OPA_MIN && a1 <= LV_OPA_MIN) return false;
 801193c:	2a02      	cmp	r2, #2
        dsc->res.opa = (a0 * yr + (a1 * (255 - yr))) >> 8;
 801193e:	fb0c e101 	mla	r1, ip, r1, lr
 8011942:	ea4f 2121 	mov.w	r1, r1, asr #8
 8011946:	7721      	strb	r1, [r4, #28]
        if(a0 <= LV_OPA_MIN && a1 <= LV_OPA_MIN) return false;
 8011948:	f200 8159 	bhi.w	8011bfe <_lv_img_buf_transform_anti_alias+0x38e>
 801194c:	f1bc 0f02 	cmp.w	ip, #2
 8011950:	f200 8133 	bhi.w	8011bba <_lv_img_buf_transform_anti_alias+0x34a>
 8011954:	2000      	movs	r0, #0
    if(yr == LV_OPA_TRANSP) dsc->res.color = c1;
    else if(yr == LV_OPA_COVER) dsc->res.color = c0;
    else dsc->res.color = lv_color_mix(c0, c1, yr);

    return true;
}
 8011956:	b00b      	add	sp, #44	; 0x2c
 8011958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        c01 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int, dsc->cfg.color);
 801195c:	b2ba      	uxth	r2, r7
 801195e:	f8b4 1048 	ldrh.w	r1, [r4, #72]	; 0x48
 8011962:	f104 0b20 	add.w	fp, r4, #32
 8011966:	6923      	ldr	r3, [r4, #16]
 8011968:	4411      	add	r1, r2
 801196a:	9203      	str	r2, [sp, #12]
 801196c:	4658      	mov	r0, fp
 801196e:	f9b4 204a 	ldrsh.w	r2, [r4, #74]	; 0x4a
 8011972:	b209      	sxth	r1, r1
        c10 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int, dsc->tmp.ys_int + yn, dsc->cfg.color);
 8011974:	fa1f f78c 	uxth.w	r7, ip
        c01 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int, dsc->cfg.color);
 8011978:	f7ff fcfa 	bl	8011370 <lv_img_buf_get_px_color>
        c10 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int, dsc->tmp.ys_int + yn, dsc->cfg.color);
 801197c:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
        c01 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int, dsc->cfg.color);
 8011980:	4684      	mov	ip, r0
        c10 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int, dsc->tmp.ys_int + yn, dsc->cfg.color);
 8011982:	6923      	ldr	r3, [r4, #16]
 8011984:	443a      	add	r2, r7
 8011986:	f9b4 1048 	ldrsh.w	r1, [r4, #72]	; 0x48
 801198a:	4658      	mov	r0, fp
        c01 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int, dsc->cfg.color);
 801198c:	f8cd c01c 	str.w	ip, [sp, #28]
        c10 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int, dsc->tmp.ys_int + yn, dsc->cfg.color);
 8011990:	b212      	sxth	r2, r2
 8011992:	f7ff fced 	bl	8011370 <lv_img_buf_get_px_color>
        c11 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int + yn, dsc->cfg.color);
 8011996:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 801199a:	f8b4 1048 	ldrh.w	r1, [r4, #72]	; 0x48
        c10 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int, dsc->tmp.ys_int + yn, dsc->cfg.color);
 801199e:	4603      	mov	r3, r0
        c11 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int + yn, dsc->cfg.color);
 80119a0:	443a      	add	r2, r7
 80119a2:	9704      	str	r7, [sp, #16]
 80119a4:	9f03      	ldr	r7, [sp, #12]
 80119a6:	4658      	mov	r0, fp
        c10 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int, dsc->tmp.ys_int + yn, dsc->cfg.color);
 80119a8:	9308      	str	r3, [sp, #32]
        c11 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int + yn, dsc->cfg.color);
 80119aa:	b212      	sxth	r2, r2
 80119ac:	4439      	add	r1, r7
 80119ae:	6923      	ldr	r3, [r4, #16]
 80119b0:	b209      	sxth	r1, r1
 80119b2:	f7ff fcdd 	bl	8011370 <lv_img_buf_get_px_color>
        if(dsc->tmp.has_alpha) {
 80119b6:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
        c11 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int + yn, dsc->cfg.color);
 80119ba:	9009      	str	r0, [sp, #36]	; 0x24
        if(dsc->tmp.has_alpha) {
 80119bc:	079b      	lsls	r3, r3, #30
 80119be:	f100 80d9 	bmi.w	8011b74 <_lv_img_buf_transform_anti_alias+0x304>
        dsc->res.opa = LV_OPA_COVER;
 80119c2:	22ff      	movs	r2, #255	; 0xff
        xr1 = xr;
 80119c4:	4633      	mov	r3, r6
        dsc->res.opa = LV_OPA_COVER;
 80119c6:	7722      	strb	r2, [r4, #28]
    if(xr0 == LV_OPA_TRANSP) c0 = c01;
 80119c8:	2e00      	cmp	r6, #0
 80119ca:	d171      	bne.n	8011ab0 <_lv_img_buf_transform_anti_alias+0x240>
 80119cc:	f89d 201f 	ldrb.w	r2, [sp, #31]
 80119d0:	f89d 801c 	ldrb.w	r8, [sp, #28]
 80119d4:	f89d 901d 	ldrb.w	r9, [sp, #29]
 80119d8:	f89d a01e 	ldrb.w	sl, [sp, #30]
 80119dc:	9201      	str	r2, [sp, #4]
    if(xr1 == LV_OPA_TRANSP) c1 = c11;
 80119de:	2b00      	cmp	r3, #0
 80119e0:	f000 8094 	beq.w	8011b0c <_lv_img_buf_transform_anti_alias+0x29c>
    else if(xr1 == LV_OPA_COVER) c1 = c10;
 80119e4:	2bff      	cmp	r3, #255	; 0xff
 80119e6:	f000 80f6 	beq.w	8011bd6 <_lv_img_buf_transform_anti_alias+0x366>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 80119ea:	f89d 7022 	ldrb.w	r7, [sp, #34]	; 0x22
 80119ee:	f1c3 00ff 	rsb	r0, r3, #255	; 0xff
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 80119f2:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
    return ret;
 80119f6:	26ff      	movs	r6, #255	; 0xff
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 80119f8:	fb17 f703 	smulbb	r7, r7, r3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 80119fc:	f89d 1020 	ldrb.w	r1, [sp, #32]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8011a00:	f89d e026 	ldrb.w	lr, [sp, #38]	; 0x26
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8011a04:	fb12 f203 	smulbb	r2, r2, r3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8011a08:	fb11 f103 	smulbb	r1, r1, r3
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8011a0c:	f89d c025 	ldrb.w	ip, [sp, #37]	; 0x25
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8011a10:	fb00 730e 	mla	r3, r0, lr, r7
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8011a14:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8011a18:	fb00 220c 	mla	r2, r0, ip, r2
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8011a1c:	fb00 1107 	mla	r1, r0, r7, r1
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8011a20:	eb03 2003 	add.w	r0, r3, r3, lsl #8
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8011a24:	eb02 2702 	add.w	r7, r2, r2, lsl #8
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8011a28:	eb03 13c0 	add.w	r3, r3, r0, lsl #7
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8011a2c:	eb01 2001 	add.w	r0, r1, r1, lsl #8
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8011a30:	eb02 12c7 	add.w	r2, r2, r7, lsl #7
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8011a34:	f3c3 53c7 	ubfx	r3, r3, #23, #8
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8011a38:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8011a3c:	f3c2 52c7 	ubfx	r2, r2, #23, #8
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8011a40:	f3c1 51c7 	ubfx	r1, r1, #23, #8
    if(yr == LV_OPA_TRANSP) dsc->res.color = c1;
 8011a44:	2d00      	cmp	r5, #0
 8011a46:	d16b      	bne.n	8011b20 <_lv_img_buf_transform_anti_alias+0x2b0>
 8011a48:	f361 0507 	bfi	r5, r1, #0, #8
    return true;
 8011a4c:	2001      	movs	r0, #1
    if(yr == LV_OPA_TRANSP) dsc->res.color = c1;
 8011a4e:	f362 250f 	bfi	r5, r2, #8, #8
 8011a52:	f363 4517 	bfi	r5, r3, #16, #8
 8011a56:	f366 651f 	bfi	r5, r6, #24, #8
 8011a5a:	61a5      	str	r5, [r4, #24]
}
 8011a5c:	b00b      	add	sp, #44	; 0x2c
 8011a5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if(ys_fract > 0x90) {
 8011a62:	2b90      	cmp	r3, #144	; 0x90
 8011a64:	d920      	bls.n	8011aa8 <_lv_img_buf_transform_anti_alias+0x238>
        if(dsc->tmp.ys_int + yn >= dsc->cfg.src_h) yn = 0;
 8011a66:	f9b4 304a 	ldrsh.w	r3, [r4, #74]	; 0x4a
        yr = (0xFF - ys_fract) + 0x80;
 8011a6a:	f1c5 057f 	rsb	r5, r5, #127	; 0x7f
        if(dsc->tmp.ys_int + yn >= dsc->cfg.src_h) yn = 0;
 8011a6e:	f9b4 c006 	ldrsh.w	ip, [r4, #6]
 8011a72:	3301      	adds	r3, #1
        yr = (0xFF - ys_fract) + 0x80;
 8011a74:	b2ed      	uxtb	r5, r5
        if(dsc->tmp.ys_int + yn >= dsc->cfg.src_h) yn = 0;
 8011a76:	4563      	cmp	r3, ip
 8011a78:	bfac      	ite	ge
 8011a7a:	f04f 0c00 	movge.w	ip, #0
 8011a7e:	f04f 0c01 	movlt.w	ip, #1
        yr = (0xFF - ys_fract) + 0x80;
 8011a82:	e718      	b.n	80118b6 <_lv_img_buf_transform_anti_alias+0x46>
    else if(xs_fract > 0x90) {
 8011a84:	2a90      	cmp	r2, #144	; 0x90
 8011a86:	d90c      	bls.n	8011aa2 <_lv_img_buf_transform_anti_alias+0x232>
        if(dsc->tmp.xs_int + xn >= dsc->cfg.src_w) xn = 0;
 8011a88:	f9b0 7048 	ldrsh.w	r7, [r0, #72]	; 0x48
        xr = (0xFF - xs_fract) + 0x80;
 8011a8c:	f1c6 067f 	rsb	r6, r6, #127	; 0x7f
        if(dsc->tmp.xs_int + xn >= dsc->cfg.src_w) xn = 0;
 8011a90:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8011a94:	3701      	adds	r7, #1
        xr = (0xFF - xs_fract) + 0x80;
 8011a96:	b2f6      	uxtb	r6, r6
        if(dsc->tmp.xs_int + xn >= dsc->cfg.src_w) xn = 0;
 8011a98:	4297      	cmp	r7, r2
 8011a9a:	bfac      	ite	ge
 8011a9c:	2700      	movge	r7, #0
 8011a9e:	2701      	movlt	r7, #1
        xr = (0xFF - xs_fract) + 0x80;
 8011aa0:	e6fc      	b.n	801189c <_lv_img_buf_transform_anti_alias+0x2c>
        xr = 0xFF;
 8011aa2:	26ff      	movs	r6, #255	; 0xff
        xn = 0;
 8011aa4:	2700      	movs	r7, #0
 8011aa6:	e6f9      	b.n	801189c <_lv_img_buf_transform_anti_alias+0x2c>
        yr = 0xFF;
 8011aa8:	25ff      	movs	r5, #255	; 0xff
        yn = 0;
 8011aaa:	f04f 0c00 	mov.w	ip, #0
 8011aae:	e702      	b.n	80118b6 <_lv_img_buf_transform_anti_alias+0x46>
    else if(xr0 == LV_OPA_COVER) c0 = c00;
 8011ab0:	2eff      	cmp	r6, #255	; 0xff
 8011ab2:	f000 80c2 	beq.w	8011c3a <_lv_img_buf_transform_anti_alias+0x3ca>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8011ab6:	fb1a f206 	smulbb	r2, sl, r6
 8011aba:	f1c6 01ff 	rsb	r1, r6, #255	; 0xff
 8011abe:	f89d a01e 	ldrb.w	sl, [sp, #30]
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8011ac2:	fb16 f009 	smulbb	r0, r6, r9
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8011ac6:	fb16 f808 	smulbb	r8, r6, r8
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8011aca:	f89d 901d 	ldrb.w	r9, [sp, #29]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8011ace:	fb01 2a0a 	mla	sl, r1, sl, r2
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8011ad2:	f89d 201c 	ldrb.w	r2, [sp, #28]
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8011ad6:	fb01 0909 	mla	r9, r1, r9, r0
    return ret;
 8011ada:	20ff      	movs	r0, #255	; 0xff
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8011adc:	fb01 8802 	mla	r8, r1, r2, r8
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8011ae0:	eb0a 220a 	add.w	r2, sl, sl, lsl #8
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8011ae4:	eb09 2109 	add.w	r1, r9, r9, lsl #8
    return ret;
 8011ae8:	9001      	str	r0, [sp, #4]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8011aea:	eb0a 1ac2 	add.w	sl, sl, r2, lsl #7
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8011aee:	eb08 2208 	add.w	r2, r8, r8, lsl #8
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8011af2:	eb09 19c1 	add.w	r9, r9, r1, lsl #7
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8011af6:	f3ca 5ac7 	ubfx	sl, sl, #23, #8
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8011afa:	eb08 18c2 	add.w	r8, r8, r2, lsl #7
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8011afe:	f3c9 59c7 	ubfx	r9, r9, #23, #8
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8011b02:	f3c8 58c7 	ubfx	r8, r8, #23, #8
    if(xr1 == LV_OPA_TRANSP) c1 = c11;
 8011b06:	2b00      	cmp	r3, #0
 8011b08:	f47f af6c 	bne.w	80119e4 <_lv_img_buf_transform_anti_alias+0x174>
 8011b0c:	f89d 1024 	ldrb.w	r1, [sp, #36]	; 0x24
 8011b10:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
 8011b14:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
 8011b18:	f89d 6027 	ldrb.w	r6, [sp, #39]	; 0x27
    if(yr == LV_OPA_TRANSP) dsc->res.color = c1;
 8011b1c:	2d00      	cmp	r5, #0
 8011b1e:	d093      	beq.n	8011a48 <_lv_img_buf_transform_anti_alias+0x1d8>
    else if(yr == LV_OPA_COVER) dsc->res.color = c0;
 8011b20:	2dff      	cmp	r5, #255	; 0xff
 8011b22:	d071      	beq.n	8011c08 <_lv_img_buf_transform_anti_alias+0x398>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8011b24:	f1c5 00ff 	rsb	r0, r5, #255	; 0xff
    else dsc->res.color = lv_color_mix(c0, c1, yr);
 8011b28:	f04f 0cff 	mov.w	ip, #255	; 0xff
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8011b2c:	fb15 f808 	smulbb	r8, r5, r8
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8011b30:	fb15 f909 	smulbb	r9, r5, r9
 8011b34:	f884 c01b 	strb.w	ip, [r4, #27]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8011b38:	fb1a f505 	smulbb	r5, sl, r5
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8011b3c:	fb00 8101 	mla	r1, r0, r1, r8
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8011b40:	fb00 9202 	mla	r2, r0, r2, r9
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8011b44:	fb00 5303 	mla	r3, r0, r3, r5
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8011b48:	eb01 2701 	add.w	r7, r1, r1, lsl #8
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8011b4c:	eb02 2602 	add.w	r6, r2, r2, lsl #8
    return true;
 8011b50:	2001      	movs	r0, #1
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8011b52:	eb03 2503 	add.w	r5, r3, r3, lsl #8
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8011b56:	eb01 11c7 	add.w	r1, r1, r7, lsl #7
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8011b5a:	eb02 12c6 	add.w	r2, r2, r6, lsl #7
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8011b5e:	eb03 13c5 	add.w	r3, r3, r5, lsl #7
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8011b62:	0dc9      	lsrs	r1, r1, #23
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8011b64:	0dd2      	lsrs	r2, r2, #23
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8011b66:	0ddb      	lsrs	r3, r3, #23
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8011b68:	7621      	strb	r1, [r4, #24]
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8011b6a:	7662      	strb	r2, [r4, #25]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8011b6c:	76a3      	strb	r3, [r4, #26]
}
 8011b6e:	b00b      	add	sp, #44	; 0x2c
 8011b70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            a10 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int);
 8011b74:	f9b4 3048 	ldrsh.w	r3, [r4, #72]	; 0x48
 8011b78:	4658      	mov	r0, fp
 8011b7a:	f9b4 204a 	ldrsh.w	r2, [r4, #74]	; 0x4a
 8011b7e:	441f      	add	r7, r3
 8011b80:	9305      	str	r3, [sp, #20]
 8011b82:	9203      	str	r2, [sp, #12]
 8011b84:	b23f      	sxth	r7, r7
 8011b86:	4639      	mov	r1, r7
 8011b88:	f7ff fc78 	bl	801147c <lv_img_buf_get_px_alpha>
            a01 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int, dsc->tmp.ys_int + yn);
 8011b8c:	9b05      	ldr	r3, [sp, #20]
            a10 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int);
 8011b8e:	4684      	mov	ip, r0
            a01 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int, dsc->tmp.ys_int + yn);
 8011b90:	4658      	mov	r0, fp
 8011b92:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
            a10 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int);
 8011b96:	f8cd c010 	str.w	ip, [sp, #16]
            a01 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int, dsc->tmp.ys_int + yn);
 8011b9a:	4411      	add	r1, r2
 8011b9c:	460a      	mov	r2, r1
 8011b9e:	4619      	mov	r1, r3
 8011ba0:	b212      	sxth	r2, r2
 8011ba2:	9203      	str	r2, [sp, #12]
 8011ba4:	f7ff fc6a 	bl	801147c <lv_img_buf_get_px_alpha>
 8011ba8:	4684      	mov	ip, r0
            a11 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int + yn);
 8011baa:	4639      	mov	r1, r7
 8011bac:	9a03      	ldr	r2, [sp, #12]
 8011bae:	4658      	mov	r0, fp
            a01 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int, dsc->tmp.ys_int + yn);
 8011bb0:	4667      	mov	r7, ip
            a11 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int + yn);
 8011bb2:	f7ff fc63 	bl	801147c <lv_img_buf_get_px_alpha>
 8011bb6:	9b04      	ldr	r3, [sp, #16]
 8011bb8:	e6ad      	b.n	8011916 <_lv_img_buf_transform_anti_alias+0xa6>
        if(a0 <= LV_OPA_MIN) yr = LV_OPA_TRANSP;
 8011bba:	2a02      	cmp	r2, #2
 8011bbc:	d81f      	bhi.n	8011bfe <_lv_img_buf_transform_anti_alias+0x38e>
 8011bbe:	2500      	movs	r5, #0
        if(a00 <= LV_OPA_MIN) xr0 = LV_OPA_TRANSP;
 8011bc0:	9a02      	ldr	r2, [sp, #8]
 8011bc2:	2a02      	cmp	r2, #2
 8011bc4:	bf8c      	ite	hi
 8011bc6:	4632      	movhi	r2, r6
 8011bc8:	2200      	movls	r2, #0
        if(a10 <= LV_OPA_MIN) xr0 = LV_OPA_COVER;
 8011bca:	2b02      	cmp	r3, #2
 8011bcc:	d80c      	bhi.n	8011be8 <_lv_img_buf_transform_anti_alias+0x378>
        if(a01 <= LV_OPA_MIN) xr1 = LV_OPA_TRANSP;
 8011bce:	2f02      	cmp	r7, #2
 8011bd0:	d829      	bhi.n	8011c26 <_lv_img_buf_transform_anti_alias+0x3b6>
        if(a11 <= LV_OPA_MIN) xr1 = LV_OPA_COVER;
 8011bd2:	2802      	cmp	r0, #2
 8011bd4:	d89a      	bhi.n	8011b0c <_lv_img_buf_transform_anti_alias+0x29c>
    else if(xr1 == LV_OPA_COVER) c1 = c10;
 8011bd6:	f89d 1020 	ldrb.w	r1, [sp, #32]
 8011bda:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
 8011bde:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
 8011be2:	f89d 6023 	ldrb.w	r6, [sp, #35]	; 0x23
 8011be6:	e72d      	b.n	8011a44 <_lv_img_buf_transform_anti_alias+0x1d4>
        if(a01 <= LV_OPA_MIN) xr1 = LV_OPA_TRANSP;
 8011be8:	2f02      	cmp	r7, #2
 8011bea:	bf98      	it	ls
 8011bec:	2600      	movls	r6, #0
        if(a11 <= LV_OPA_MIN) xr1 = LV_OPA_COVER;
 8011bee:	2802      	cmp	r0, #2
 8011bf0:	d81d      	bhi.n	8011c2e <_lv_img_buf_transform_anti_alias+0x3be>
 8011bf2:	4616      	mov	r6, r2
 8011bf4:	23ff      	movs	r3, #255	; 0xff
    if(xr0 == LV_OPA_TRANSP) c0 = c01;
 8011bf6:	2e00      	cmp	r6, #0
 8011bf8:	f43f aee8 	beq.w	80119cc <_lv_img_buf_transform_anti_alias+0x15c>
 8011bfc:	e758      	b.n	8011ab0 <_lv_img_buf_transform_anti_alias+0x240>
        if(a1 <= LV_OPA_MIN) yr = LV_OPA_COVER;
 8011bfe:	f1bc 0f02 	cmp.w	ip, #2
 8011c02:	bf98      	it	ls
 8011c04:	25ff      	movls	r5, #255	; 0xff
 8011c06:	e7db      	b.n	8011bc0 <_lv_img_buf_transform_anti_alias+0x350>
    else if(yr == LV_OPA_COVER) dsc->res.color = c0;
 8011c08:	2300      	movs	r3, #0
 8011c0a:	9a01      	ldr	r2, [sp, #4]
    return true;
 8011c0c:	2001      	movs	r0, #1
    else if(yr == LV_OPA_COVER) dsc->res.color = c0;
 8011c0e:	f368 0307 	bfi	r3, r8, #0, #8
 8011c12:	f369 230f 	bfi	r3, r9, #8, #8
 8011c16:	f36a 4317 	bfi	r3, sl, #16, #8
 8011c1a:	f362 631f 	bfi	r3, r2, #24, #8
 8011c1e:	61a3      	str	r3, [r4, #24]
}
 8011c20:	b00b      	add	sp, #44	; 0x2c
 8011c22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(a11 <= LV_OPA_MIN) xr1 = LV_OPA_COVER;
 8011c26:	2802      	cmp	r0, #2
 8011c28:	d9d5      	bls.n	8011bd6 <_lv_img_buf_transform_anti_alias+0x366>
    else if(xr0 == LV_OPA_COVER) c0 = c00;
 8011c2a:	4633      	mov	r3, r6
 8011c2c:	e6d7      	b.n	80119de <_lv_img_buf_transform_anti_alias+0x16e>
 8011c2e:	4633      	mov	r3, r6
 8011c30:	4616      	mov	r6, r2
    if(xr0 == LV_OPA_TRANSP) c0 = c01;
 8011c32:	2e00      	cmp	r6, #0
 8011c34:	f43f aeca 	beq.w	80119cc <_lv_img_buf_transform_anti_alias+0x15c>
 8011c38:	e73a      	b.n	8011ab0 <_lv_img_buf_transform_anti_alias+0x240>
 8011c3a:	461e      	mov	r6, r3
    else if(xr0 == LV_OPA_COVER) c0 = c00;
 8011c3c:	4633      	mov	r3, r6
 8011c3e:	e6ce      	b.n	80119de <_lv_img_buf_transform_anti_alias+0x16e>

08011c40 <_lv_img_cache_open>:
 * @param src source of the image. Path to file or pointer to an `lv_img_dsc_t` variable
 * @param color color The color of the image with `LV_IMG_CF_ALPHA_...`
 * @return pointer to the cache entry or NULL if can open the image
 */
lv_img_cache_entry_t * _lv_img_cache_open(const void * src, lv_color_t color)
{
 8011c40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    /*Is the image cached?*/
    lv_img_cache_entry_t * cached_src = NULL;

#if LV_IMG_CACHE_DEF_SIZE
    if(entry_cnt == 0) {
 8011c44:	4e4b      	ldr	r6, [pc, #300]	; (8011d74 <_lv_img_cache_open+0x134>)
 8011c46:	8835      	ldrh	r5, [r6, #0]
 8011c48:	2d00      	cmp	r5, #0
 8011c4a:	d03f      	beq.n	8011ccc <_lv_img_cache_open+0x8c>
        LV_LOG_WARN("lv_img_cache_open: the cache size is 0");
        return NULL;
    }

    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
 8011c4c:	3d01      	subs	r5, #1
 8011c4e:	4b4a      	ldr	r3, [pc, #296]	; (8011d78 <_lv_img_cache_open+0x138>)
 8011c50:	4689      	mov	r9, r1
 8011c52:	4680      	mov	r8, r0
 8011c54:	b2a9      	uxth	r1, r5
 8011c56:	681d      	ldr	r5, [r3, #0]

    /*Decrement all lifes. Make the entries older*/
    uint16_t i;
    for(i = 0; i < entry_cnt; i++) {
        if(cache[i].life > INT32_MIN + LV_IMG_CACHE_AGING) {
 8011c58:	4848      	ldr	r0, [pc, #288]	; (8011d7c <_lv_img_cache_open+0x13c>)
 8011c5a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8011c5e:	f105 0728 	add.w	r7, r5, #40	; 0x28
    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
 8011c62:	462b      	mov	r3, r5
 8011c64:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
        if(cache[i].life > INT32_MIN + LV_IMG_CACHE_AGING) {
 8011c68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011c6a:	3328      	adds	r3, #40	; 0x28
 8011c6c:	4282      	cmp	r2, r0
            cache[i].life -= LV_IMG_CACHE_AGING;
 8011c6e:	f102 32ff 	add.w	r2, r2, #4294967295
 8011c72:	bfa8      	it	ge
 8011c74:	f843 2c04 	strge.w	r2, [r3, #-4]
    for(i = 0; i < entry_cnt; i++) {
 8011c78:	428b      	cmp	r3, r1
 8011c7a:	d1f5      	bne.n	8011c68 <_lv_img_cache_open+0x28>
 8011c7c:	f04f 0a00 	mov.w	sl, #0
 8011c80:	e007      	b.n	8011c92 <_lv_img_cache_open+0x52>

    for(i = 0; i < entry_cnt; i++) {
        bool match = false;
        lv_img_src_t src_type = lv_img_src_get_type(cache[i].dec_dsc.src);
        if(src_type == LV_IMG_SRC_VARIABLE) {
            if(cache[i].dec_dsc.src == src && cache[i].dec_dsc.color.full == color.full) match = true;
 8011c82:	6863      	ldr	r3, [r4, #4]
 8011c84:	4543      	cmp	r3, r8
 8011c86:	d024      	beq.n	8011cd2 <_lv_img_cache_open+0x92>
    for(i = 0; i < entry_cnt; i++) {
 8011c88:	8833      	ldrh	r3, [r6, #0]
 8011c8a:	fa1f f28a 	uxth.w	r2, sl
 8011c8e:	4293      	cmp	r3, r2
 8011c90:	d927      	bls.n	8011ce2 <_lv_img_cache_open+0xa2>
        lv_img_src_t src_type = lv_img_src_get_type(cache[i].dec_dsc.src);
 8011c92:	fa1f f38a 	uxth.w	r3, sl
 8011c96:	f10a 0a01 	add.w	sl, sl, #1
 8011c9a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8011c9e:	eb05 04c3 	add.w	r4, r5, r3, lsl #3
 8011ca2:	6860      	ldr	r0, [r4, #4]
 8011ca4:	f7fa fa8a 	bl	800c1bc <lv_img_src_get_type>
        if(src_type == LV_IMG_SRC_VARIABLE) {
 8011ca8:	2800      	cmp	r0, #0
 8011caa:	d0ea      	beq.n	8011c82 <_lv_img_cache_open+0x42>
        }
        else if(src_type == LV_IMG_SRC_FILE) {
 8011cac:	2801      	cmp	r0, #1
 8011cae:	d1eb      	bne.n	8011c88 <_lv_img_cache_open+0x48>
            if(strcmp(cache[i].dec_dsc.src, src) == 0) match = true;
 8011cb0:	4641      	mov	r1, r8
 8011cb2:	6860      	ldr	r0, [r4, #4]
 8011cb4:	f7ee faa8 	bl	8000208 <strcmp>
 8011cb8:	2800      	cmp	r0, #0
 8011cba:	d1e5      	bne.n	8011c88 <_lv_img_cache_open+0x48>
        if(match) {
            /* If opened increment its life.
             * Image difficult to open should live longer to keep avoid frequent their recaching.
             * Therefore increase `life` with `time_to_open`*/
            cached_src = &cache[i];
            cached_src->life += cached_src->dec_dsc.time_to_open * LV_IMG_CACHE_LIFE_GAIN;
 8011cbc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011cbe:	69a2      	ldr	r2, [r4, #24]
 8011cc0:	4413      	add	r3, r2
            if(cached_src->life > LV_IMG_CACHE_LIFE_LIMIT) cached_src->life = LV_IMG_CACHE_LIFE_LIMIT;
 8011cc2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8011cc6:	dc3d      	bgt.n	8011d44 <_lv_img_cache_open+0x104>
            cached_src->life += cached_src->dec_dsc.time_to_open * LV_IMG_CACHE_LIFE_GAIN;
 8011cc8:	4625      	mov	r5, r4
 8011cca:	6263      	str	r3, [r4, #36]	; 0x24
    }

    if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;

    return cached_src;
}
 8011ccc:	4628      	mov	r0, r5
 8011cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            if(cache[i].dec_dsc.src == src && cache[i].dec_dsc.color.full == color.full) match = true;
 8011cd2:	68a3      	ldr	r3, [r4, #8]
 8011cd4:	454b      	cmp	r3, r9
 8011cd6:	d0f1      	beq.n	8011cbc <_lv_img_cache_open+0x7c>
    for(i = 0; i < entry_cnt; i++) {
 8011cd8:	8833      	ldrh	r3, [r6, #0]
 8011cda:	fa1f f28a 	uxth.w	r2, sl
 8011cde:	4293      	cmp	r3, r2
 8011ce0:	d8d7      	bhi.n	8011c92 <_lv_img_cache_open+0x52>
    for(i = 1; i < entry_cnt; i++) {
 8011ce2:	2b01      	cmp	r3, #1
 8011ce4:	d910      	bls.n	8011d08 <_lv_img_cache_open+0xc8>
 8011ce6:	3b02      	subs	r3, #2
 8011ce8:	f105 0250 	add.w	r2, r5, #80	; 0x50
 8011cec:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8011cee:	b29b      	uxth	r3, r3
 8011cf0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8011cf4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
        if(cache[i].life < cached_src->life) {
 8011cf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011cfa:	4291      	cmp	r1, r2
 8011cfc:	dd01      	ble.n	8011d02 <_lv_img_cache_open+0xc2>
 8011cfe:	4611      	mov	r1, r2
 8011d00:	463d      	mov	r5, r7
 8011d02:	3728      	adds	r7, #40	; 0x28
    for(i = 1; i < entry_cnt; i++) {
 8011d04:	42bb      	cmp	r3, r7
 8011d06:	d1f7      	bne.n	8011cf8 <_lv_img_cache_open+0xb8>
    if(cached_src->dec_dsc.src) {
 8011d08:	686b      	ldr	r3, [r5, #4]
 8011d0a:	b113      	cbz	r3, 8011d12 <_lv_img_cache_open+0xd2>
        lv_img_decoder_close(&cached_src->dec_dsc);
 8011d0c:	4628      	mov	r0, r5
 8011d0e:	f000 fd2d 	bl	801276c <lv_img_decoder_close>
    cached_src->dec_dsc.time_to_open = 0;
 8011d12:	2700      	movs	r7, #0
    t_start                          = lv_tick_get();
 8011d14:	f001 feea 	bl	8013aec <lv_tick_get>
    lv_res_t open_res                = lv_img_decoder_open(&cached_src->dec_dsc, src, color);
 8011d18:	464a      	mov	r2, r9
    t_start                          = lv_tick_get();
 8011d1a:	4606      	mov	r6, r0
    lv_res_t open_res                = lv_img_decoder_open(&cached_src->dec_dsc, src, color);
 8011d1c:	4641      	mov	r1, r8
 8011d1e:	4628      	mov	r0, r5
    cached_src->dec_dsc.time_to_open = 0;
 8011d20:	61af      	str	r7, [r5, #24]
    lv_res_t open_res                = lv_img_decoder_open(&cached_src->dec_dsc, src, color);
 8011d22:	f000 fcc5 	bl	80126b0 <lv_img_decoder_open>
    if(open_res == LV_RES_INV) {
 8011d26:	4604      	mov	r4, r0
 8011d28:	b188      	cbz	r0, 8011d4e <_lv_img_cache_open+0x10e>
    if(cached_src->dec_dsc.time_to_open == 0) {
 8011d2a:	69ab      	ldr	r3, [r5, #24]
    cached_src->life = 0;
 8011d2c:	626f      	str	r7, [r5, #36]	; 0x24
    if(cached_src->dec_dsc.time_to_open == 0) {
 8011d2e:	2b00      	cmp	r3, #0
 8011d30:	d1cc      	bne.n	8011ccc <_lv_img_cache_open+0x8c>
        cached_src->dec_dsc.time_to_open = lv_tick_elaps(t_start);
 8011d32:	4630      	mov	r0, r6
 8011d34:	f001 fee8 	bl	8013b08 <lv_tick_elaps>
    if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;
 8011d38:	b9c8      	cbnz	r0, 8011d6e <_lv_img_cache_open+0x12e>
 8011d3a:	2301      	movs	r3, #1
}
 8011d3c:	4628      	mov	r0, r5
    if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;
 8011d3e:	61ab      	str	r3, [r5, #24]
}
 8011d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            if(cached_src->life > LV_IMG_CACHE_LIFE_LIMIT) cached_src->life = LV_IMG_CACHE_LIFE_LIMIT;
 8011d44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8011d48:	4625      	mov	r5, r4
 8011d4a:	6263      	str	r3, [r4, #36]	; 0x24
 8011d4c:	e7be      	b.n	8011ccc <_lv_img_cache_open+0x8c>
        lv_img_decoder_close(&cached_src->dec_dsc);
 8011d4e:	4628      	mov	r0, r5
 8011d50:	f000 fd0c 	bl	801276c <lv_img_decoder_close>
        _lv_memset_00(&cached_src->dec_dsc, sizeof(lv_img_decoder_dsc_t));
 8011d54:	4628      	mov	r0, r5
 8011d56:	2124      	movs	r1, #36	; 0x24
 8011d58:	f003 fd0e 	bl	8015778 <_lv_memset_00>
        _lv_memset_00(cached_src, sizeof(lv_img_cache_entry_t));
 8011d5c:	4628      	mov	r0, r5
 8011d5e:	2128      	movs	r1, #40	; 0x28
 8011d60:	f003 fd0a 	bl	8015778 <_lv_memset_00>
        cached_src->life = INT32_MIN; /*Make the empty entry very "weak" to force its use  */
 8011d64:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011d68:	626b      	str	r3, [r5, #36]	; 0x24
        return NULL;
 8011d6a:	4625      	mov	r5, r4
 8011d6c:	e7ae      	b.n	8011ccc <_lv_img_cache_open+0x8c>
        cached_src->dec_dsc.time_to_open = lv_tick_elaps(t_start);
 8011d6e:	61a8      	str	r0, [r5, #24]
 8011d70:	e7ac      	b.n	8011ccc <_lv_img_cache_open+0x8c>
 8011d72:	bf00      	nop
 8011d74:	2001812e 	.word	0x2001812e
 8011d78:	200204f0 	.word	0x200204f0
 8011d7c:	80000002 	.word	0x80000002

08011d80 <lv_img_cache_set_size>:
 * More cached images mean more opened image at same time which might mean more memory usage.
 * E.g. if 20 PNG or JPG images are open in the RAM they consume memory while opened in the cache.
 * @param new_entry_cnt number of image to cache
 */
void lv_img_cache_set_size(uint16_t new_entry_cnt)
{
 8011d80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
#if LV_IMG_CACHE_DEF_SIZE == 0
    LV_UNUSED(new_entry_cnt);
    LV_LOG_WARN("Can't change cache size because it's disabled by LV_IMG_CACHE_DEF_SIZE = 0");
#else
    if(LV_GC_ROOT(_lv_img_cache_array) != NULL) {
 8011d84:	4d2e      	ldr	r5, [pc, #184]	; (8011e40 <lv_img_cache_set_size+0xc0>)
{
 8011d86:	4680      	mov	r8, r0
{
#if LV_IMG_CACHE_DEF_SIZE
    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);

    uint16_t i;
    for(i = 0; i < entry_cnt; i++) {
 8011d88:	4e2e      	ldr	r6, [pc, #184]	; (8011e44 <lv_img_cache_set_size+0xc4>)
    if(LV_GC_ROOT(_lv_img_cache_array) != NULL) {
 8011d8a:	f8d5 9000 	ldr.w	r9, [r5]
 8011d8e:	f1b9 0f00 	cmp.w	r9, #0
 8011d92:	d023      	beq.n	8011ddc <lv_img_cache_set_size+0x5c>
    for(i = 0; i < entry_cnt; i++) {
 8011d94:	8833      	ldrh	r3, [r6, #0]
 8011d96:	b1f3      	cbz	r3, 8011dd6 <lv_img_cache_set_size+0x56>
 8011d98:	2700      	movs	r7, #0
 8011d9a:	e00e      	b.n	8011dba <lv_img_cache_set_size+0x3a>
        if(cache[i].dec_dsc.src == src || src == NULL) {
            if(cache[i].dec_dsc.src != NULL) {
                lv_img_decoder_close(&cache[i].dec_dsc);
 8011d9c:	f000 fce6 	bl	801276c <lv_img_decoder_close>
            }

            _lv_memset_00(&cache[i].dec_dsc, sizeof(lv_img_decoder_dsc_t));
 8011da0:	3701      	adds	r7, #1
 8011da2:	2124      	movs	r1, #36	; 0x24
 8011da4:	4620      	mov	r0, r4
 8011da6:	f003 fce7 	bl	8015778 <_lv_memset_00>
            _lv_memset_00(&cache[i], sizeof(lv_img_cache_entry_t));
 8011daa:	4620      	mov	r0, r4
 8011dac:	2128      	movs	r1, #40	; 0x28
 8011dae:	f003 fce3 	bl	8015778 <_lv_memset_00>
    for(i = 0; i < entry_cnt; i++) {
 8011db2:	8832      	ldrh	r2, [r6, #0]
 8011db4:	b2bb      	uxth	r3, r7
 8011db6:	429a      	cmp	r2, r3
 8011db8:	d90b      	bls.n	8011dd2 <lv_img_cache_set_size+0x52>
        if(cache[i].dec_dsc.src == src || src == NULL) {
 8011dba:	b2bc      	uxth	r4, r7
            _lv_memset_00(&cache[i].dec_dsc, sizeof(lv_img_decoder_dsc_t));
 8011dbc:	2124      	movs	r1, #36	; 0x24
        if(cache[i].dec_dsc.src == src || src == NULL) {
 8011dbe:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8011dc2:	eb09 04c4 	add.w	r4, r9, r4, lsl #3
            if(cache[i].dec_dsc.src != NULL) {
 8011dc6:	6863      	ldr	r3, [r4, #4]
                lv_img_decoder_close(&cache[i].dec_dsc);
 8011dc8:	4620      	mov	r0, r4
            if(cache[i].dec_dsc.src != NULL) {
 8011dca:	2b00      	cmp	r3, #0
 8011dcc:	d1e6      	bne.n	8011d9c <lv_img_cache_set_size+0x1c>
 8011dce:	3701      	adds	r7, #1
 8011dd0:	e7e9      	b.n	8011da6 <lv_img_cache_set_size+0x26>
 8011dd2:	f8d5 9000 	ldr.w	r9, [r5]
        lv_mem_free(LV_GC_ROOT(_lv_img_cache_array));
 8011dd6:	4648      	mov	r0, r9
 8011dd8:	f003 f828 	bl	8014e2c <lv_mem_free>
    LV_GC_ROOT(_lv_img_cache_array) = lv_mem_alloc(sizeof(lv_img_cache_entry_t) * new_entry_cnt);
 8011ddc:	eb08 0088 	add.w	r0, r8, r8, lsl #2
 8011de0:	00c0      	lsls	r0, r0, #3
 8011de2:	f002 ffdd 	bl	8014da0 <lv_mem_alloc>
 8011de6:	6028      	str	r0, [r5, #0]
    LV_ASSERT_MEM(LV_GC_ROOT(_lv_img_cache_array));
 8011de8:	f002 fcee 	bl	80147c8 <lv_debug_check_null>
 8011dec:	4603      	mov	r3, r0
 8011dee:	b1f0      	cbz	r0, 8011e2e <lv_img_cache_set_size+0xae>
    if(LV_GC_ROOT(_lv_img_cache_array) == NULL) {
 8011df0:	6828      	ldr	r0, [r5, #0]
 8011df2:	b308      	cbz	r0, 8011e38 <lv_img_cache_set_size+0xb8>
    entry_cnt = new_entry_cnt;
 8011df4:	f8a6 8000 	strh.w	r8, [r6]
    for(i = 0; i < entry_cnt; i++) {
 8011df8:	f1b8 0f00 	cmp.w	r8, #0
 8011dfc:	d015      	beq.n	8011e2a <lv_img_cache_set_size+0xaa>
 8011dfe:	2700      	movs	r7, #0
 8011e00:	e000      	b.n	8011e04 <lv_img_cache_set_size+0x84>
 8011e02:	6828      	ldr	r0, [r5, #0]
        _lv_memset_00(&LV_GC_ROOT(_lv_img_cache_array)[i].dec_dsc, sizeof(lv_img_decoder_dsc_t));
 8011e04:	b2bb      	uxth	r3, r7
 8011e06:	2124      	movs	r1, #36	; 0x24
 8011e08:	3701      	adds	r7, #1
 8011e0a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8011e0e:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 8011e12:	00dc      	lsls	r4, r3, #3
 8011e14:	f003 fcb0 	bl	8015778 <_lv_memset_00>
        _lv_memset_00(&LV_GC_ROOT(_lv_img_cache_array)[i], sizeof(lv_img_cache_entry_t));
 8011e18:	6828      	ldr	r0, [r5, #0]
 8011e1a:	2128      	movs	r1, #40	; 0x28
 8011e1c:	4420      	add	r0, r4
 8011e1e:	f003 fcab 	bl	8015778 <_lv_memset_00>
    for(i = 0; i < entry_cnt; i++) {
 8011e22:	8832      	ldrh	r2, [r6, #0]
 8011e24:	b2bb      	uxth	r3, r7
 8011e26:	429a      	cmp	r2, r3
 8011e28:	d8eb      	bhi.n	8011e02 <lv_img_cache_set_size+0x82>
}
 8011e2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    LV_ASSERT_MEM(LV_GC_ROOT(_lv_img_cache_array));
 8011e2e:	682a      	ldr	r2, [r5, #0]
 8011e30:	4805      	ldr	r0, [pc, #20]	; (8011e48 <lv_img_cache_set_size+0xc8>)
 8011e32:	f002 fccd 	bl	80147d0 <lv_debug_log_error>
 8011e36:	e7fe      	b.n	8011e36 <lv_img_cache_set_size+0xb6>
        entry_cnt = 0;
 8011e38:	8030      	strh	r0, [r6, #0]
}
 8011e3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011e3e:	bf00      	nop
 8011e40:	200204f0 	.word	0x200204f0
 8011e44:	2001812e 	.word	0x2001812e
 8011e48:	0801e1c4 	.word	0x0801e1c4

08011e4c <lv_img_decoder_built_in_close>:
 * Close the pending decoding. Free resources etc.
 * @param decoder pointer to the decoder the function associated with
 * @param dsc pointer to decoder descriptor
 */
void lv_img_decoder_built_in_close(lv_img_decoder_t * decoder, lv_img_decoder_dsc_t * dsc)
{
 8011e4c:	b538      	push	{r3, r4, r5, lr}
    (void)decoder; /*Unused*/

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 8011e4e:	6a0c      	ldr	r4, [r1, #32]
    if(user_data) {
 8011e50:	b1a4      	cbz	r4, 8011e7c <lv_img_decoder_built_in_close+0x30>
#if LV_USE_FILESYSTEM
        if(user_data->f) {
 8011e52:	6820      	ldr	r0, [r4, #0]
 8011e54:	460d      	mov	r5, r1
 8011e56:	b120      	cbz	r0, 8011e62 <lv_img_decoder_built_in_close+0x16>
            lv_fs_close(user_data->f);
 8011e58:	f002 fd48 	bl	80148ec <lv_fs_close>
            lv_mem_free(user_data->f);
 8011e5c:	6820      	ldr	r0, [r4, #0]
 8011e5e:	f002 ffe5 	bl	8014e2c <lv_mem_free>
        }
#endif
        if(user_data->palette) lv_mem_free(user_data->palette);
 8011e62:	6860      	ldr	r0, [r4, #4]
 8011e64:	b108      	cbz	r0, 8011e6a <lv_img_decoder_built_in_close+0x1e>
 8011e66:	f002 ffe1 	bl	8014e2c <lv_mem_free>
        if(user_data->opa) lv_mem_free(user_data->opa);
 8011e6a:	68a0      	ldr	r0, [r4, #8]
 8011e6c:	b108      	cbz	r0, 8011e72 <lv_img_decoder_built_in_close+0x26>
 8011e6e:	f002 ffdd 	bl	8014e2c <lv_mem_free>

        lv_mem_free(user_data);
 8011e72:	4620      	mov	r0, r4
 8011e74:	f002 ffda 	bl	8014e2c <lv_mem_free>

        dsc->user_data = NULL;
 8011e78:	2300      	movs	r3, #0
 8011e7a:	622b      	str	r3, [r5, #32]
    }
}
 8011e7c:	bd38      	pop	{r3, r4, r5, pc}
 8011e7e:	bf00      	nop

08011e80 <lv_img_decoder_built_in_info>:
{
 8011e80:	b570      	push	{r4, r5, r6, lr}
    lv_img_src_t src_type = lv_img_src_get_type(src);
 8011e82:	4608      	mov	r0, r1
{
 8011e84:	b084      	sub	sp, #16
 8011e86:	460d      	mov	r5, r1
 8011e88:	4616      	mov	r6, r2
    lv_img_src_t src_type = lv_img_src_get_type(src);
 8011e8a:	f7fa f997 	bl	800c1bc <lv_img_src_get_type>
    if(src_type == LV_IMG_SRC_VARIABLE) {
 8011e8e:	4604      	mov	r4, r0
 8011e90:	b9c8      	cbnz	r0, 8011ec6 <lv_img_decoder_built_in_info+0x46>
        lv_img_cf_t cf = ((lv_img_dsc_t *)src)->header.cf;
 8011e92:	782b      	ldrb	r3, [r5, #0]
 8011e94:	f3c3 0304 	ubfx	r3, r3, #0, #5
        if(cf < CF_BUILT_IN_FIRST || cf > CF_BUILT_IN_LAST) return LV_RES_INV;
 8011e98:	3b04      	subs	r3, #4
 8011e9a:	b2db      	uxtb	r3, r3
 8011e9c:	2b0a      	cmp	r3, #10
 8011e9e:	d80f      	bhi.n	8011ec0 <lv_img_decoder_built_in_info+0x40>
        header->h  = ((lv_img_dsc_t *)src)->header.h;
 8011ea0:	886b      	ldrh	r3, [r5, #2]
    return LV_RES_OK;
 8011ea2:	2401      	movs	r4, #1
        header->h  = ((lv_img_dsc_t *)src)->header.h;
 8011ea4:	8871      	ldrh	r1, [r6, #2]
 8011ea6:	f3c3 134a 	ubfx	r3, r3, #5, #11
        lv_img_cf_t cf = ((lv_img_dsc_t *)src)->header.cf;
 8011eaa:	6828      	ldr	r0, [r5, #0]
        header->cf = ((lv_img_dsc_t *)src)->header.cf;
 8011eac:	4a1d      	ldr	r2, [pc, #116]	; (8011f24 <lv_img_decoder_built_in_info+0xa4>)
        header->h  = ((lv_img_dsc_t *)src)->header.h;
 8011eae:	f363 114f 	bfi	r1, r3, #5, #11
        header->cf = ((lv_img_dsc_t *)src)->header.cf;
 8011eb2:	4b1d      	ldr	r3, [pc, #116]	; (8011f28 <lv_img_decoder_built_in_info+0xa8>)
 8011eb4:	4002      	ands	r2, r0
        header->h  = ((lv_img_dsc_t *)src)->header.h;
 8011eb6:	8071      	strh	r1, [r6, #2]
        header->cf = ((lv_img_dsc_t *)src)->header.cf;
 8011eb8:	6831      	ldr	r1, [r6, #0]
 8011eba:	400b      	ands	r3, r1
 8011ebc:	4313      	orrs	r3, r2
 8011ebe:	6033      	str	r3, [r6, #0]
}
 8011ec0:	4620      	mov	r0, r4
 8011ec2:	b004      	add	sp, #16
 8011ec4:	bd70      	pop	{r4, r5, r6, pc}
    else if(src_type == LV_IMG_SRC_FILE) {
 8011ec6:	2801      	cmp	r0, #1
 8011ec8:	d01d      	beq.n	8011f06 <lv_img_decoder_built_in_info+0x86>
    else if(src_type == LV_IMG_SRC_SYMBOL) {
 8011eca:	2802      	cmp	r0, #2
 8011ecc:	d117      	bne.n	8011efe <lv_img_decoder_built_in_info+0x7e>
        header->cf = LV_IMG_CF_ALPHA_1BIT;
 8011ece:	6832      	ldr	r2, [r6, #0]
    return LV_RES_OK;
 8011ed0:	2401      	movs	r4, #1
        header->cf = LV_IMG_CF_ALPHA_1BIT;
 8011ed2:	4b16      	ldr	r3, [pc, #88]	; (8011f2c <lv_img_decoder_built_in_info+0xac>)
 8011ed4:	f402 7278 	and.w	r2, r2, #992	; 0x3e0
}
 8011ed8:	4620      	mov	r0, r4
        header->cf = LV_IMG_CF_ALPHA_1BIT;
 8011eda:	4313      	orrs	r3, r2
 8011edc:	6033      	str	r3, [r6, #0]
}
 8011ede:	b004      	add	sp, #16
 8011ee0:	bd70      	pop	{r4, r5, r6, pc}
            res = lv_fs_read(&file, header, sizeof(lv_img_header_t), &rn);
 8011ee2:	ab01      	add	r3, sp, #4
 8011ee4:	2204      	movs	r2, #4
 8011ee6:	4631      	mov	r1, r6
 8011ee8:	a802      	add	r0, sp, #8
 8011eea:	f002 fd15 	bl	8014918 <lv_fs_read>
 8011eee:	4605      	mov	r5, r0
            lv_fs_close(&file);
 8011ef0:	a802      	add	r0, sp, #8
 8011ef2:	f002 fcfb 	bl	80148ec <lv_fs_close>
            if(res != LV_FS_RES_OK || rn != sizeof(lv_img_header_t)) {
 8011ef6:	b915      	cbnz	r5, 8011efe <lv_img_decoder_built_in_info+0x7e>
 8011ef8:	9b01      	ldr	r3, [sp, #4]
 8011efa:	2b04      	cmp	r3, #4
 8011efc:	d00a      	beq.n	8011f14 <lv_img_decoder_built_in_info+0x94>
        if(cf < CF_BUILT_IN_FIRST || cf > CF_BUILT_IN_LAST) return LV_RES_INV;
 8011efe:	2400      	movs	r4, #0
}
 8011f00:	4620      	mov	r0, r4
 8011f02:	b004      	add	sp, #16
 8011f04:	bd70      	pop	{r4, r5, r6, pc}
        res = lv_fs_open(&file, src, LV_FS_MODE_RD);
 8011f06:	4629      	mov	r1, r5
 8011f08:	2202      	movs	r2, #2
 8011f0a:	a802      	add	r0, sp, #8
 8011f0c:	f002 fc76 	bl	80147fc <lv_fs_open>
        if(res == LV_FS_RES_OK) {
 8011f10:	2800      	cmp	r0, #0
 8011f12:	d0e6      	beq.n	8011ee2 <lv_img_decoder_built_in_info+0x62>
        if(header->cf < CF_BUILT_IN_FIRST || header->cf > CF_BUILT_IN_LAST) return LV_RES_INV;
 8011f14:	7833      	ldrb	r3, [r6, #0]
 8011f16:	331c      	adds	r3, #28
 8011f18:	f003 031f 	and.w	r3, r3, #31
 8011f1c:	2b0a      	cmp	r3, #10
 8011f1e:	d9cf      	bls.n	8011ec0 <lv_img_decoder_built_in_info+0x40>
 8011f20:	e7ed      	b.n	8011efe <lv_img_decoder_built_in_info+0x7e>
 8011f22:	bf00      	nop
 8011f24:	001ffc1f 	.word	0x001ffc1f
 8011f28:	ffe003e0 	.word	0xffe003e0
 8011f2c:	0020040b 	.word	0x0020040b

08011f30 <lv_img_decoder_built_in_read_line>:
{
 8011f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 8011f34:	7c0c      	ldrb	r4, [r1, #16]
{
 8011f36:	469a      	mov	sl, r3
 8011f38:	b089      	sub	sp, #36	; 0x24
 8011f3a:	460d      	mov	r5, r1
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 8011f3c:	f004 031e 	and.w	r3, r4, #30
{
 8011f40:	4693      	mov	fp, r2
 8011f42:	f9bd 6048 	ldrsh.w	r6, [sp, #72]	; 0x48
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 8011f46:	2b04      	cmp	r3, #4
 8011f48:	d010      	beq.n	8011f6c <lv_img_decoder_built_in_read_line+0x3c>
       dsc->header.cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 8011f4a:	f004 031f 	and.w	r3, r4, #31
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 8011f4e:	2b06      	cmp	r3, #6
 8011f50:	d00c      	beq.n	8011f6c <lv_img_decoder_built_in_read_line+0x3c>
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
 8011f52:	f1a3 020b 	sub.w	r2, r3, #11
 8011f56:	2a03      	cmp	r2, #3
 8011f58:	d94d      	bls.n	8011ff6 <lv_img_decoder_built_in_read_line+0xc6>
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_1BIT || dsc->header.cf == LV_IMG_CF_INDEXED_2BIT ||
 8011f5a:	3b07      	subs	r3, #7
 8011f5c:	2b03      	cmp	r3, #3
 8011f5e:	d930      	bls.n	8011fc2 <lv_img_decoder_built_in_read_line+0x92>
    lv_res_t res = LV_RES_INV;
 8011f60:	f04f 0800 	mov.w	r8, #0
}
 8011f64:	4640      	mov	r0, r8
 8011f66:	b009      	add	sp, #36	; 0x24
 8011f68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 8011f6c:	f895 800c 	ldrb.w	r8, [r5, #12]
 8011f70:	f1b8 0f01 	cmp.w	r8, #1
 8011f74:	d1f4      	bne.n	8011f60 <lv_img_decoder_built_in_read_line+0x30>
                                                        lv_coord_t len, uint8_t * buf)
{
#if LV_USE_FILESYSTEM
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
    lv_fs_res_t res;
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
 8011f76:	f004 001f 	and.w	r0, r4, #31
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 8011f7a:	6a2c      	ldr	r4, [r5, #32]
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
 8011f7c:	f7fa f8fa 	bl	800c174 <lv_img_cf_get_px_size>

    uint32_t pos = ((y * dsc->header.w + x) * px_size) >> 3;
 8011f80:	6929      	ldr	r1, [r5, #16]
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
 8011f82:	4605      	mov	r5, r0
    pos += 4; /*Skip the header*/
    res = lv_fs_seek(user_data->f, pos);
 8011f84:	6820      	ldr	r0, [r4, #0]
    uint32_t pos = ((y * dsc->header.w + x) * px_size) >> 3;
 8011f86:	f3c1 218a 	ubfx	r1, r1, #10, #11
 8011f8a:	fb1a b101 	smlabb	r1, sl, r1, fp
 8011f8e:	fb05 f101 	mul.w	r1, r5, r1
 8011f92:	10c9      	asrs	r1, r1, #3
    res = lv_fs_seek(user_data->f, pos);
 8011f94:	3104      	adds	r1, #4
 8011f96:	f002 fcdf 	bl	8014958 <lv_fs_seek>
    if(res != LV_FS_RES_OK) {
 8011f9a:	4602      	mov	r2, r0
 8011f9c:	2800      	cmp	r0, #0
 8011f9e:	d1df      	bne.n	8011f60 <lv_img_decoder_built_in_read_line+0x30>
        LV_LOG_WARN("Built-in image decoder seek failed");
        return LV_RES_INV;
    }
    uint32_t btr = len * (px_size >> 3);
 8011fa0:	f3c5 05c7 	ubfx	r5, r5, #3, #8
    uint32_t br  = 0;
    res = lv_fs_read(user_data->f, buf, btr, &br);
 8011fa4:	6820      	ldr	r0, [r4, #0]
 8011fa6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8011fa8:	ab04      	add	r3, sp, #16
    uint32_t btr = len * (px_size >> 3);
 8011faa:	fb15 f606 	smulbb	r6, r5, r6
    uint32_t br  = 0;
 8011fae:	9204      	str	r2, [sp, #16]
    res = lv_fs_read(user_data->f, buf, btr, &br);
 8011fb0:	4632      	mov	r2, r6
 8011fb2:	f002 fcb1 	bl	8014918 <lv_fs_read>
    if(res != LV_FS_RES_OK || btr != br) {
 8011fb6:	2800      	cmp	r0, #0
 8011fb8:	d1d2      	bne.n	8011f60 <lv_img_decoder_built_in_read_line+0x30>
 8011fba:	9b04      	ldr	r3, [sp, #16]
 8011fbc:	429e      	cmp	r6, r3
 8011fbe:	d1cf      	bne.n	8011f60 <lv_img_decoder_built_in_read_line+0x30>
 8011fc0:	e7d0      	b.n	8011f64 <lv_img_decoder_built_in_read_line+0x34>
static lv_res_t lv_img_decoder_built_in_line_indexed(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                     lv_coord_t len, uint8_t * buf)
{

#if LV_IMG_CF_INDEXED
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
 8011fc2:	f004 001f 	and.w	r0, r4, #31
    uint16_t mask   = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 8011fc6:	f04f 0801 	mov.w	r8, #1
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
 8011fca:	f7fa f8d3 	bl	800c174 <lv_img_cf_get_px_size>

    lv_coord_t w = 0;
    int8_t pos   = 0;
    uint32_t ofs = 0;
    switch(dsc->header.cf) {
 8011fce:	7c2b      	ldrb	r3, [r5, #16]
    uint16_t mask   = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 8011fd0:	fa08 f800 	lsl.w	r8, r8, r0
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
 8011fd4:	4681      	mov	r9, r0
    uint16_t mask   = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 8011fd6:	f003 031f 	and.w	r3, r3, #31
 8011fda:	f108 38ff 	add.w	r8, r8, #4294967295
 8011fde:	3b07      	subs	r3, #7
 8011fe0:	fa1f f888 	uxth.w	r8, r8
    switch(dsc->header.cf) {
 8011fe4:	2b03      	cmp	r3, #3
 8011fe6:	f200 8199 	bhi.w	801231c <lv_img_decoder_built_in_read_line+0x3ec>
 8011fea:	e8df f013 	tbh	[pc, r3, lsl #1]
 8011fee:	015d      	.short	0x015d
 8011ff0:	01340148 	.word	0x01340148
 8011ff4:	00f0      	.short	0x00f0
    const lv_opa_t alpha4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
 8011ff6:	4bbe      	ldr	r3, [pc, #760]	; (80122f0 <lv_img_decoder_built_in_read_line+0x3c0>)
 8011ff8:	f10d 0910 	add.w	r9, sp, #16
    const lv_opa_t alpha2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
 8011ffc:	4fbd      	ldr	r7, [pc, #756]	; (80122f4 <lv_img_decoder_built_in_read_line+0x3c4>)
    const lv_opa_t alpha1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
 8011ffe:	f44f 4c7f 	mov.w	ip, #65280	; 0xff00
    for(i = 0; i < len; i++) {
 8012002:	2e00      	cmp	r6, #0
    const lv_opa_t alpha2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
 8012004:	9703      	str	r7, [sp, #12]
    const lv_opa_t alpha1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
 8012006:	f8ad c008 	strh.w	ip, [sp, #8]
    lv_color_t bg_color = dsc->color;
 801200a:	68af      	ldr	r7, [r5, #8]
    const lv_opa_t alpha4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
 801200c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801200e:	e889 000f 	stmia.w	r9, {r0, r1, r2, r3}
    for(i = 0; i < len; i++) {
 8012012:	dd46      	ble.n	80120a2 <lv_img_decoder_built_in_read_line+0x172>
 8012014:	b2b2      	uxth	r2, r6
 8012016:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012018:	1e51      	subs	r1, r2, #1
 801201a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801201e:	2905      	cmp	r1, #5
 8012020:	f240 817a 	bls.w	8012318 <lv_img_decoder_built_in_read_line+0x3e8>
 8012024:	2b00      	cmp	r3, #0
 8012026:	f000 8175 	beq.w	8012314 <lv_img_decoder_built_in_read_line+0x3e4>
        *((uint32_t *)&buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE]) = bg_color.full;
 801202a:	9913      	ldr	r1, [sp, #76]	; 0x4c
    for(i = 0; i < len; i++) {
 801202c:	2001      	movs	r0, #1
        *((uint32_t *)&buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE]) = bg_color.full;
 801202e:	600f      	str	r7, [r1, #0]
    for(i = 0; i < len; i++) {
 8012030:	1ad1      	subs	r1, r2, r3
 8012032:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8012034:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012038:	f3c1 024e 	ubfx	r2, r1, #1, #15
 801203c:	b289      	uxth	r1, r1
 801203e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        *((uint32_t *)&buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE]) = bg_color.full;
 8012042:	e9c3 7700 	strd	r7, r7, [r3]
    for(i = 0; i < len; i++) {
 8012046:	3308      	adds	r3, #8
 8012048:	429a      	cmp	r2, r3
 801204a:	d1fa      	bne.n	8012042 <lv_img_decoder_built_in_read_line+0x112>
 801204c:	f021 0201 	bic.w	r2, r1, #1
 8012050:	1883      	adds	r3, r0, r2
 8012052:	428a      	cmp	r2, r1
 8012054:	b21b      	sxth	r3, r3
 8012056:	d023      	beq.n	80120a0 <lv_img_decoder_built_in_read_line+0x170>
        *((uint32_t *)&buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE]) = bg_color.full;
 8012058:	9913      	ldr	r1, [sp, #76]	; 0x4c
    for(i = 0; i < len; i++) {
 801205a:	b29a      	uxth	r2, r3
        *((uint32_t *)&buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE]) = bg_color.full;
 801205c:	f841 7023 	str.w	r7, [r1, r3, lsl #2]
    for(i = 0; i < len; i++) {
 8012060:	1c51      	adds	r1, r2, #1
 8012062:	b209      	sxth	r1, r1
 8012064:	428e      	cmp	r6, r1
 8012066:	dd1b      	ble.n	80120a0 <lv_img_decoder_built_in_read_line+0x170>
 8012068:	1c93      	adds	r3, r2, #2
        *((uint32_t *)&buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE]) = bg_color.full;
 801206a:	9813      	ldr	r0, [sp, #76]	; 0x4c
    for(i = 0; i < len; i++) {
 801206c:	b21b      	sxth	r3, r3
        *((uint32_t *)&buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE]) = bg_color.full;
 801206e:	f840 7021 	str.w	r7, [r0, r1, lsl #2]
    for(i = 0; i < len; i++) {
 8012072:	429e      	cmp	r6, r3
 8012074:	dd14      	ble.n	80120a0 <lv_img_decoder_built_in_read_line+0x170>
 8012076:	1cd1      	adds	r1, r2, #3
        *((uint32_t *)&buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE]) = bg_color.full;
 8012078:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
    for(i = 0; i < len; i++) {
 801207c:	b20b      	sxth	r3, r1
 801207e:	429e      	cmp	r6, r3
 8012080:	dd0e      	ble.n	80120a0 <lv_img_decoder_built_in_read_line+0x170>
 8012082:	1d11      	adds	r1, r2, #4
        *((uint32_t *)&buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE]) = bg_color.full;
 8012084:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
    for(i = 0; i < len; i++) {
 8012088:	b209      	sxth	r1, r1
 801208a:	428e      	cmp	r6, r1
 801208c:	dd08      	ble.n	80120a0 <lv_img_decoder_built_in_read_line+0x170>
 801208e:	1d53      	adds	r3, r2, #5
        *((uint32_t *)&buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE]) = bg_color.full;
 8012090:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    for(i = 0; i < len; i++) {
 8012092:	b21b      	sxth	r3, r3
        *((uint32_t *)&buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE]) = bg_color.full;
 8012094:	f842 7021 	str.w	r7, [r2, r1, lsl #2]
    for(i = 0; i < len; i++) {
 8012098:	429e      	cmp	r6, r3
        *((uint32_t *)&buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE]) = bg_color.full;
 801209a:	bfc8      	it	gt
 801209c:	f842 7023 	strgt.w	r7, [r2, r3, lsl #2]
    for(i = 0; i < len; i++) {
 80120a0:	7c2c      	ldrb	r4, [r5, #16]
    uint8_t px_size            = lv_img_cf_get_px_size(dsc->header.cf);
 80120a2:	f004 001f 	and.w	r0, r4, #31
    uint16_t mask              = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 80120a6:	2701      	movs	r7, #1
    uint8_t px_size            = lv_img_cf_get_px_size(dsc->header.cf);
 80120a8:	f7fa f864 	bl	800c174 <lv_img_cf_get_px_size>
    switch(dsc->header.cf) {
 80120ac:	7c2b      	ldrb	r3, [r5, #16]
    uint16_t mask              = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 80120ae:	4087      	lsls	r7, r0
    uint8_t px_size            = lv_img_cf_get_px_size(dsc->header.cf);
 80120b0:	4680      	mov	r8, r0
    uint16_t mask              = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 80120b2:	f003 031f 	and.w	r3, r3, #31
 80120b6:	3f01      	subs	r7, #1
 80120b8:	3b0b      	subs	r3, #11
 80120ba:	b2bf      	uxth	r7, r7
    switch(dsc->header.cf) {
 80120bc:	2b03      	cmp	r3, #3
 80120be:	f200 8131 	bhi.w	8012324 <lv_img_decoder_built_in_read_line+0x3f4>
 80120c2:	e8df f003 	tbb	[pc, r3]
 80120c6:	5b70      	.short	0x5b70
 80120c8:	0249      	.short	0x0249
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 80120ca:	692a      	ldr	r2, [r5, #16]
            pos = 0;
 80120cc:	2400      	movs	r4, #0
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 80120ce:	f3c2 238a 	ubfx	r3, r2, #10, #11
    const lv_opa_t * opa_table = NULL;
 80120d2:	46a1      	mov	r9, r4
            ofs += w * y + x;  /*First pixel*/
 80120d4:	fb1a bb03 	smlabb	fp, sl, r3, fp
            break;
 80120d8:	461a      	mov	r2, r3
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 80120da:	6a2b      	ldr	r3, [r5, #32]
    uint8_t * fs_buf = _lv_mem_buf_get(w);
 80120dc:	4610      	mov	r0, r2
 80120de:	9200      	str	r2, [sp, #0]
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 80120e0:	9301      	str	r3, [sp, #4]
    uint8_t * fs_buf = _lv_mem_buf_get(w);
 80120e2:	f003 fa21 	bl	8015528 <_lv_mem_buf_get>
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 80120e6:	7b2b      	ldrb	r3, [r5, #12]
    uint8_t * fs_buf = _lv_mem_buf_get(w);
 80120e8:	4682      	mov	sl, r0
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 80120ea:	9a00      	ldr	r2, [sp, #0]
 80120ec:	2b00      	cmp	r3, #0
 80120ee:	f040 80ef 	bne.w	80122d0 <lv_img_decoder_built_in_read_line+0x3a0>
        data_tmp = img_dsc->data + ofs;
 80120f2:	686b      	ldr	r3, [r5, #4]
 80120f4:	6898      	ldr	r0, [r3, #8]
 80120f6:	4458      	add	r0, fp
    for(i = 0; i < len; i++) {
 80120f8:	2e00      	cmp	r6, #0
 80120fa:	dd24      	ble.n	8012146 <lv_img_decoder_built_in_read_line+0x216>
 80120fc:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80120fe:	3e01      	subs	r6, #1
            pos = 8 - px_size;
 8012100:	f1c8 0c08 	rsb	ip, r8, #8
 8012104:	b2b6      	uxth	r6, r6
 8012106:	1d0b      	adds	r3, r1, #4
 8012108:	fa4f fc8c 	sxtb.w	ip, ip
 801210c:	eb03 0686 	add.w	r6, r3, r6, lsl #2
        uint8_t val_act = (*data_tmp & (mask << pos)) >> pos;
 8012110:	7802      	ldrb	r2, [r0, #0]
 8012112:	fa07 f304 	lsl.w	r3, r7, r4
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];
 8012116:	f895 e010 	ldrb.w	lr, [r5, #16]
 801211a:	3104      	adds	r1, #4
        uint8_t val_act = (*data_tmp & (mask << pos)) >> pos;
 801211c:	4013      	ands	r3, r2
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 801211e:	f00e 021f 	and.w	r2, lr, #31
        uint8_t val_act = (*data_tmp & (mask << pos)) >> pos;
 8012122:	4123      	asrs	r3, r4
        pos -= px_size;
 8012124:	eba4 0408 	sub.w	r4, r4, r8
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 8012128:	2a0e      	cmp	r2, #14
        pos -= px_size;
 801212a:	b264      	sxtb	r4, r4
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];
 801212c:	b2da      	uxtb	r2, r3
        uint8_t val_act = (*data_tmp & (mask << pos)) >> pos;
 801212e:	bf0c      	ite	eq
 8012130:	4613      	moveq	r3, r2
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 8012132:	f819 3002 	ldrbne.w	r3, [r9, r2]
        if(pos < 0) {
 8012136:	2c00      	cmp	r4, #0
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 8012138:	f801 3c01 	strb.w	r3, [r1, #-1]
        if(pos < 0) {
 801213c:	da01      	bge.n	8012142 <lv_img_decoder_built_in_read_line+0x212>
            data_tmp++;
 801213e:	3001      	adds	r0, #1
            pos = 8 - px_size;
 8012140:	4664      	mov	r4, ip
    for(i = 0; i < len; i++) {
 8012142:	42b1      	cmp	r1, r6
 8012144:	d1e4      	bne.n	8012110 <lv_img_decoder_built_in_read_line+0x1e0>
        res = lv_img_decoder_built_in_line_alpha(dsc, x, y, len, buf);
 8012146:	f04f 0801 	mov.w	r8, #1
    _lv_mem_buf_release(fs_buf);
 801214a:	4650      	mov	r0, sl
 801214c:	f002 fec4 	bl	8014ed8 <_lv_mem_buf_release>
}
 8012150:	4640      	mov	r0, r8
 8012152:	b009      	add	sp, #36	; 0x24
 8012154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 8012158:	692a      	ldr	r2, [r5, #16]
 801215a:	f3c2 23c9 	ubfx	r3, r2, #11, #10
            if(dsc->header.w & 0x1) w++;
 801215e:	0551      	lsls	r1, r2, #21
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 8012160:	bf54      	ite	pl
 8012162:	b21b      	sxthpl	r3, r3
            if(dsc->header.w & 0x1) w++;
 8012164:	3301      	addmi	r3, #1
            ofs += w * y + (x >> 1); /*First pixel*/
 8012166:	f01b 0f01 	tst.w	fp, #1
 801216a:	ea4f 0b6b 	mov.w	fp, fp, asr #1
 801216e:	461a      	mov	r2, r3
 8012170:	fb03 bb0a 	mla	fp, r3, sl, fp
            pos       = 4 - ((x & 0x1) * 4);
 8012174:	bf14      	ite	ne
 8012176:	2400      	movne	r4, #0
 8012178:	2404      	moveq	r4, #4
 801217a:	e7ae      	b.n	80120da <lv_img_decoder_built_in_read_line+0x1aa>
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 801217c:	692a      	ldr	r2, [r5, #16]
            pos       = 6 - ((x & 0x3) * 2);
 801217e:	ea6f 040b 	mvn.w	r4, fp
            ofs += w * y + (x >> 2); /*First pixel*/
 8012182:	ea4f 0bab 	mov.w	fp, fp, asr #2
            opa_table = alpha2_opa_table;
 8012186:	f10d 090c 	add.w	r9, sp, #12
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 801218a:	f3c2 3308 	ubfx	r3, r2, #12, #9
            if(dsc->header.w & 0x3) w++;
 801218e:	f412 6f40 	tst.w	r2, #3072	; 0xc00
            pos       = 6 - ((x & 0x3) * 2);
 8012192:	f004 0403 	and.w	r4, r4, #3
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 8012196:	bf0c      	ite	eq
 8012198:	b21b      	sxtheq	r3, r3
            if(dsc->header.w & 0x3) w++;
 801219a:	3301      	addne	r3, #1
            pos       = 6 - ((x & 0x3) * 2);
 801219c:	0064      	lsls	r4, r4, #1
 801219e:	461a      	mov	r2, r3
            ofs += w * y + (x >> 2); /*First pixel*/
 80121a0:	fb03 bb0a 	mla	fp, r3, sl, fp
            break;
 80121a4:	e799      	b.n	80120da <lv_img_decoder_built_in_read_line+0x1aa>
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
 80121a6:	692a      	ldr	r2, [r5, #16]
            pos       = 7 - (x & 0x7);
 80121a8:	ea6f 040b 	mvn.w	r4, fp
            ofs += w * y + (x >> 3); /*First pixel*/
 80121ac:	ea4f 01eb 	mov.w	r1, fp, asr #3
            opa_table = alpha1_opa_table;
 80121b0:	f10d 0908 	add.w	r9, sp, #8
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
 80121b4:	f3c2 3347 	ubfx	r3, r2, #13, #8
            if(dsc->header.w & 0x7) w++;
 80121b8:	f412 5fe0 	tst.w	r2, #7168	; 0x1c00
            pos       = 7 - (x & 0x7);
 80121bc:	f004 0407 	and.w	r4, r4, #7
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
 80121c0:	bf0c      	ite	eq
 80121c2:	b21b      	sxtheq	r3, r3
            if(dsc->header.w & 0x7) w++;
 80121c4:	3301      	addne	r3, #1
            ofs += w * y + (x >> 3); /*First pixel*/
 80121c6:	461a      	mov	r2, r3
 80121c8:	fb03 1b0a 	mla	fp, r3, sl, r1
            break;
 80121cc:	e785      	b.n	80120da <lv_img_decoder_built_in_read_line+0x1aa>
            ofs += w * y + (x >> 1); /*First pixel*/
            ofs += 64;               /*Skip the palette*/
            pos = 4 - ((x & 0x1) * 4);
            break;
        case LV_IMG_CF_INDEXED_8BIT:
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 80121ce:	692a      	ldr	r2, [r5, #16]
            ofs += w * y + x;  /*First pixel*/
            ofs += 1024;       /*Skip the palette*/
            pos = 0;
 80121d0:	2700      	movs	r7, #0
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 80121d2:	f3c2 238a 	ubfx	r3, r2, #10, #11
            ofs += w * y + x;  /*First pixel*/
 80121d6:	fb1a ba03 	smlabb	sl, sl, r3, fp
 80121da:	461a      	mov	r2, r3
            ofs += 1024;       /*Skip the palette*/
 80121dc:	f50a 6a80 	add.w	sl, sl, #1024	; 0x400
    }

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;

#if LV_USE_FILESYSTEM
    uint8_t * fs_buf = _lv_mem_buf_get(w);
 80121e0:	4610      	mov	r0, r2
 80121e2:	9200      	str	r2, [sp, #0]
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 80121e4:	6a2c      	ldr	r4, [r5, #32]
    uint8_t * fs_buf = _lv_mem_buf_get(w);
 80121e6:	f003 f99f 	bl	8015528 <_lv_mem_buf_get>
#endif
    const uint8_t * data_tmp = NULL;
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 80121ea:	7b2b      	ldrb	r3, [r5, #12]
    uint8_t * fs_buf = _lv_mem_buf_get(w);
 80121ec:	4683      	mov	fp, r0
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 80121ee:	9a00      	ldr	r2, [sp, #0]
 80121f0:	2b00      	cmp	r3, #0
 80121f2:	f040 8081 	bne.w	80122f8 <lv_img_decoder_built_in_read_line+0x3c8>
        const lv_img_dsc_t * img_dsc = dsc->src;
        data_tmp                     = img_dsc->data + ofs;
 80121f6:	686b      	ldr	r3, [r5, #4]
 80121f8:	689b      	ldr	r3, [r3, #8]
 80121fa:	449a      	add	sl, r3
        return LV_RES_INV;
#endif
    }

    lv_coord_t i;
    for(i = 0; i < len; i++) {
 80121fc:	2e00      	cmp	r6, #0
 80121fe:	dd21      	ble.n	8012244 <lv_img_decoder_built_in_read_line+0x314>
 8012200:	3e01      	subs	r6, #1
 8012202:	9b13      	ldr	r3, [sp, #76]	; 0x4c
#endif
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] = user_data->opa[val_act];

        pos -= px_size;
        if(pos < 0) {
            pos = 8 - px_size;
 8012204:	f1c9 0008 	rsb	r0, r9, #8
 8012208:	b2b6      	uxth	r6, r6
 801220a:	1f19      	subs	r1, r3, #4
 801220c:	b240      	sxtb	r0, r0
 801220e:	eb03 0686 	add.w	r6, r3, r6, lsl #2
        uint8_t val_act = (*data_tmp & (mask << pos)) >> pos;
 8012212:	f89a 5000 	ldrb.w	r5, [sl]
 8012216:	fa08 f307 	lsl.w	r3, r8, r7
        lv_color_t color = user_data->palette[val_act];
 801221a:	6862      	ldr	r2, [r4, #4]
        uint8_t val_act = (*data_tmp & (mask << pos)) >> pos;
 801221c:	402b      	ands	r3, r5
        pos -= px_size;
 801221e:	eba7 0509 	sub.w	r5, r7, r9
        uint8_t val_act = (*data_tmp & (mask << pos)) >> pos;
 8012222:	413b      	asrs	r3, r7
        pos -= px_size;
 8012224:	b26f      	sxtb	r7, r5
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] = user_data->opa[val_act];
 8012226:	68a5      	ldr	r5, [r4, #8]
        lv_color_t color = user_data->palette[val_act];
 8012228:	b2db      	uxtb	r3, r3
        if(pos < 0) {
 801222a:	2f00      	cmp	r7, #0
        lv_color_t color = user_data->palette[val_act];
 801222c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        *((uint32_t *)&buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE]) = color.full;
 8012230:	f841 2f04 	str.w	r2, [r1, #4]!
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] = user_data->opa[val_act];
 8012234:	5ceb      	ldrb	r3, [r5, r3]
 8012236:	70cb      	strb	r3, [r1, #3]
        if(pos < 0) {
 8012238:	da02      	bge.n	8012240 <lv_img_decoder_built_in_read_line+0x310>
            data_tmp++;
 801223a:	f10a 0a01 	add.w	sl, sl, #1
            pos = 8 - px_size;
 801223e:	4607      	mov	r7, r0
    for(i = 0; i < len; i++) {
 8012240:	428e      	cmp	r6, r1
 8012242:	d1e6      	bne.n	8012212 <lv_img_decoder_built_in_read_line+0x2e2>
        res = lv_img_decoder_built_in_line_indexed(dsc, x, y, len, buf);
 8012244:	f04f 0801 	mov.w	r8, #1
        }
    }
#if LV_USE_FILESYSTEM
    _lv_mem_buf_release(fs_buf);
 8012248:	4658      	mov	r0, fp
 801224a:	f002 fe45 	bl	8014ed8 <_lv_mem_buf_release>
}
 801224e:	4640      	mov	r0, r8
 8012250:	b009      	add	sp, #36	; 0x24
 8012252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 8012256:	692a      	ldr	r2, [r5, #16]
            ofs += w * y + (x >> 1); /*First pixel*/
 8012258:	ea4f 016b 	mov.w	r1, fp, asr #1
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 801225c:	f3c2 23c9 	ubfx	r3, r2, #11, #10
            if(dsc->header.w & 0x1) w++;
 8012260:	0552      	lsls	r2, r2, #21
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 8012262:	bf54      	ite	pl
 8012264:	b21b      	sxthpl	r3, r3
            if(dsc->header.w & 0x1) w++;
 8012266:	3301      	addmi	r3, #1
            ofs += 64;               /*Skip the palette*/
 8012268:	f01b 0f01 	tst.w	fp, #1
            ofs += w * y + (x >> 1); /*First pixel*/
 801226c:	fb03 1a0a 	mla	sl, r3, sl, r1
 8012270:	461a      	mov	r2, r3
 8012272:	bf14      	ite	ne
 8012274:	2700      	movne	r7, #0
 8012276:	2704      	moveq	r7, #4
            ofs += 64;               /*Skip the palette*/
 8012278:	f10a 0a40 	add.w	sl, sl, #64	; 0x40
            pos = 4 - ((x & 0x1) * 4);
 801227c:	e7b0      	b.n	80121e0 <lv_img_decoder_built_in_read_line+0x2b0>
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 801227e:	692a      	ldr	r2, [r5, #16]
            ofs += w * y + (x >> 2); /*First pixel*/
 8012280:	ea4f 01ab 	mov.w	r1, fp, asr #2
            pos = 6 - ((x & 0x3) * 2);
 8012284:	ea6f 070b 	mvn.w	r7, fp
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 8012288:	f3c2 3308 	ubfx	r3, r2, #12, #9
            if(dsc->header.w & 0x3) w++;
 801228c:	f412 6f40 	tst.w	r2, #3072	; 0xc00
            pos = 6 - ((x & 0x3) * 2);
 8012290:	f007 0703 	and.w	r7, r7, #3
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 8012294:	bf0c      	ite	eq
 8012296:	b21b      	sxtheq	r3, r3
            if(dsc->header.w & 0x3) w++;
 8012298:	3301      	addne	r3, #1
            pos = 6 - ((x & 0x3) * 2);
 801229a:	007f      	lsls	r7, r7, #1
            ofs += w * y + (x >> 2); /*First pixel*/
 801229c:	fb03 1a0a 	mla	sl, r3, sl, r1
 80122a0:	461a      	mov	r2, r3
            ofs += 16;               /*Skip the palette*/
 80122a2:	f10a 0a10 	add.w	sl, sl, #16
            break;
 80122a6:	e79b      	b.n	80121e0 <lv_img_decoder_built_in_read_line+0x2b0>
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
 80122a8:	692a      	ldr	r2, [r5, #16]
            ofs += w * y + (x >> 3); /*First pixel*/
 80122aa:	ea4f 01eb 	mov.w	r1, fp, asr #3
            pos = 7 - (x & 0x7);
 80122ae:	ea6f 070b 	mvn.w	r7, fp
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
 80122b2:	f3c2 3347 	ubfx	r3, r2, #13, #8
            if(dsc->header.w & 0x7) w++;
 80122b6:	f412 5fe0 	tst.w	r2, #7168	; 0x1c00
            pos = 7 - (x & 0x7);
 80122ba:	f007 0707 	and.w	r7, r7, #7
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
 80122be:	bf0c      	ite	eq
 80122c0:	b21b      	sxtheq	r3, r3
            if(dsc->header.w & 0x7) w++;
 80122c2:	3301      	addne	r3, #1
            ofs += w * y + (x >> 3); /*First pixel*/
 80122c4:	fb03 1a0a 	mla	sl, r3, sl, r1
 80122c8:	461a      	mov	r2, r3
            ofs += 8;                /*Skip the palette*/
 80122ca:	f10a 0a08 	add.w	sl, sl, #8
            break;
 80122ce:	e787      	b.n	80121e0 <lv_img_decoder_built_in_read_line+0x2b0>
        lv_fs_seek(user_data->f, ofs + 4); /*+4 to skip the header*/
 80122d0:	9b01      	ldr	r3, [sp, #4]
 80122d2:	f10b 0104 	add.w	r1, fp, #4
 80122d6:	9200      	str	r2, [sp, #0]
 80122d8:	6818      	ldr	r0, [r3, #0]
 80122da:	f002 fb3d 	bl	8014958 <lv_fs_seek>
        lv_fs_read(user_data->f, fs_buf, w, NULL);
 80122de:	4651      	mov	r1, sl
 80122e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80122e4:	6818      	ldr	r0, [r3, #0]
 80122e6:	2300      	movs	r3, #0
 80122e8:	f002 fb16 	bl	8014918 <lv_fs_read>
        data_tmp = fs_buf;
 80122ec:	4650      	mov	r0, sl
 80122ee:	e703      	b.n	80120f8 <lv_img_decoder_built_in_read_line+0x1c8>
 80122f0:	0801e19c 	.word	0x0801e19c
 80122f4:	ffaa5500 	.word	0xffaa5500
        lv_fs_seek(user_data->f, ofs + 4); /*+4 to skip the header*/
 80122f8:	f10a 0104 	add.w	r1, sl, #4
 80122fc:	6820      	ldr	r0, [r4, #0]
 80122fe:	9200      	str	r2, [sp, #0]
 8012300:	f002 fb2a 	bl	8014958 <lv_fs_seek>
        lv_fs_read(user_data->f, fs_buf, w, NULL);
 8012304:	9a00      	ldr	r2, [sp, #0]
 8012306:	2300      	movs	r3, #0
 8012308:	4659      	mov	r1, fp
 801230a:	6820      	ldr	r0, [r4, #0]
        data_tmp = fs_buf;
 801230c:	46da      	mov	sl, fp
        lv_fs_read(user_data->f, fs_buf, w, NULL);
 801230e:	f002 fb03 	bl	8014918 <lv_fs_read>
        data_tmp = fs_buf;
 8012312:	e773      	b.n	80121fc <lv_img_decoder_built_in_read_line+0x2cc>
    for(i = 0; i < len; i++) {
 8012314:	4618      	mov	r0, r3
 8012316:	e68b      	b.n	8012030 <lv_img_decoder_built_in_read_line+0x100>
 8012318:	2300      	movs	r3, #0
 801231a:	e69d      	b.n	8012058 <lv_img_decoder_built_in_read_line+0x128>
    switch(dsc->header.cf) {
 801231c:	2200      	movs	r2, #0
 801231e:	4692      	mov	sl, r2
 8012320:	4617      	mov	r7, r2
 8012322:	e75d      	b.n	80121e0 <lv_img_decoder_built_in_read_line+0x2b0>
    switch(dsc->header.cf) {
 8012324:	2200      	movs	r2, #0
 8012326:	4614      	mov	r4, r2
 8012328:	4693      	mov	fp, r2
 801232a:	4691      	mov	r9, r2
 801232c:	e6d5      	b.n	80120da <lv_img_decoder_built_in_read_line+0x1aa>
 801232e:	bf00      	nop

08012330 <lv_img_decoder_built_in_open>:
{
 8012330:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if(dsc->src_type == LV_IMG_SRC_FILE) {
 8012334:	7b0b      	ldrb	r3, [r1, #12]
{
 8012336:	b083      	sub	sp, #12
 8012338:	460c      	mov	r4, r1
    if(dsc->src_type == LV_IMG_SRC_FILE) {
 801233a:	2b01      	cmp	r3, #1
 801233c:	d03b      	beq.n	80123b6 <lv_img_decoder_built_in_open+0x86>
    else if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 801233e:	b18b      	cbz	r3, 8012364 <lv_img_decoder_built_in_open+0x34>
    lv_img_cf_t cf = dsc->header.cf;
 8012340:	7c08      	ldrb	r0, [r1, #16]
 8012342:	f000 001f 	and.w	r0, r0, #31
    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_ALPHA || cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 8012346:	1f03      	subs	r3, r0, #4
 8012348:	2b02      	cmp	r3, #2
 801234a:	d905      	bls.n	8012358 <lv_img_decoder_built_in_open+0x28>
    else if(cf == LV_IMG_CF_INDEXED_1BIT || cf == LV_IMG_CF_INDEXED_2BIT || cf == LV_IMG_CF_INDEXED_4BIT ||
 801234c:	1fc3      	subs	r3, r0, #7
 801234e:	2b03      	cmp	r3, #3
 8012350:	d97e      	bls.n	8012450 <lv_img_decoder_built_in_open+0x120>
    else if(cf == LV_IMG_CF_ALPHA_1BIT || cf == LV_IMG_CF_ALPHA_2BIT || cf == LV_IMG_CF_ALPHA_4BIT ||
 8012352:	380b      	subs	r0, #11
 8012354:	2803      	cmp	r0, #3
 8012356:	d863      	bhi.n	8012420 <lv_img_decoder_built_in_open+0xf0>
            dsc->img_data = NULL;
 8012358:	2300      	movs	r3, #0
            return LV_RES_OK;
 801235a:	2001      	movs	r0, #1
            dsc->img_data = NULL;
 801235c:	6163      	str	r3, [r4, #20]
}
 801235e:	b003      	add	sp, #12
 8012360:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if(((lv_img_dsc_t *)dsc->src)->data == NULL) {
 8012364:	684b      	ldr	r3, [r1, #4]
 8012366:	689a      	ldr	r2, [r3, #8]
 8012368:	b30a      	cbz	r2, 80123ae <lv_img_decoder_built_in_open+0x7e>
    lv_img_cf_t cf = dsc->header.cf;
 801236a:	7c08      	ldrb	r0, [r1, #16]
 801236c:	f000 001f 	and.w	r0, r0, #31
    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_ALPHA || cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 8012370:	1f02      	subs	r2, r0, #4
 8012372:	2a02      	cmp	r2, #2
 8012374:	d8ea      	bhi.n	801234c <lv_img_decoder_built_in_open+0x1c>
            dsc->img_data = ((lv_img_dsc_t *)dsc->src)->data;
 8012376:	689b      	ldr	r3, [r3, #8]
            return LV_RES_OK;
 8012378:	2001      	movs	r0, #1
            dsc->img_data = ((lv_img_dsc_t *)dsc->src)->data;
 801237a:	6163      	str	r3, [r4, #20]
}
 801237c:	b003      	add	sp, #12
 801237e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 8012382:	6a25      	ldr	r5, [r4, #32]
    if(user_data) {
 8012384:	b19d      	cbz	r5, 80123ae <lv_img_decoder_built_in_open+0x7e>
        if(user_data->f) {
 8012386:	6828      	ldr	r0, [r5, #0]
 8012388:	b120      	cbz	r0, 8012394 <lv_img_decoder_built_in_open+0x64>
            lv_fs_close(user_data->f);
 801238a:	f002 faaf 	bl	80148ec <lv_fs_close>
            lv_mem_free(user_data->f);
 801238e:	6828      	ldr	r0, [r5, #0]
 8012390:	f002 fd4c 	bl	8014e2c <lv_mem_free>
        if(user_data->palette) lv_mem_free(user_data->palette);
 8012394:	6868      	ldr	r0, [r5, #4]
 8012396:	b108      	cbz	r0, 801239c <lv_img_decoder_built_in_open+0x6c>
 8012398:	f002 fd48 	bl	8014e2c <lv_mem_free>
        if(user_data->opa) lv_mem_free(user_data->opa);
 801239c:	68a8      	ldr	r0, [r5, #8]
 801239e:	b108      	cbz	r0, 80123a4 <lv_img_decoder_built_in_open+0x74>
 80123a0:	f002 fd44 	bl	8014e2c <lv_mem_free>
        lv_mem_free(user_data);
 80123a4:	4628      	mov	r0, r5
 80123a6:	f002 fd41 	bl	8014e2c <lv_mem_free>
        dsc->user_data = NULL;
 80123aa:	2300      	movs	r3, #0
 80123ac:	6223      	str	r3, [r4, #32]
            return LV_RES_INV;
 80123ae:	2000      	movs	r0, #0
}
 80123b0:	b003      	add	sp, #12
 80123b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if(strcmp(lv_fs_get_ext(dsc->src), "bin")) return LV_RES_INV;
 80123b6:	6848      	ldr	r0, [r1, #4]
 80123b8:	f002 fae0 	bl	801497c <lv_fs_get_ext>
 80123bc:	498b      	ldr	r1, [pc, #556]	; (80125ec <lv_img_decoder_built_in_open+0x2bc>)
 80123be:	f7ed ff23 	bl	8000208 <strcmp>
 80123c2:	2800      	cmp	r0, #0
 80123c4:	d1f3      	bne.n	80123ae <lv_img_decoder_built_in_open+0x7e>
        lv_fs_res_t res = lv_fs_open(&f, dsc->src, LV_FS_MODE_RD);
 80123c6:	2202      	movs	r2, #2
 80123c8:	6861      	ldr	r1, [r4, #4]
 80123ca:	4668      	mov	r0, sp
 80123cc:	f002 fa16 	bl	80147fc <lv_fs_open>
        if(res != LV_FS_RES_OK) {
 80123d0:	2800      	cmp	r0, #0
 80123d2:	d1ec      	bne.n	80123ae <lv_img_decoder_built_in_open+0x7e>
        if(dsc->user_data == NULL) {
 80123d4:	6a25      	ldr	r5, [r4, #32]
 80123d6:	2d00      	cmp	r5, #0
 80123d8:	f000 80d8 	beq.w	801258c <lv_img_decoder_built_in_open+0x25c>
        user_data->f = lv_mem_alloc(sizeof(f));
 80123dc:	2008      	movs	r0, #8
 80123de:	f002 fcdf 	bl	8014da0 <lv_mem_alloc>
 80123e2:	6028      	str	r0, [r5, #0]
        LV_ASSERT_MEM(user_data->f);
 80123e4:	f002 f9f0 	bl	80147c8 <lv_debug_check_null>
 80123e8:	4603      	mov	r3, r0
 80123ea:	2800      	cmp	r0, #0
 80123ec:	f000 80c9 	beq.w	8012582 <lv_img_decoder_built_in_open+0x252>
        if(user_data->f == NULL) {
 80123f0:	682b      	ldr	r3, [r5, #0]
 80123f2:	2b00      	cmp	r3, #0
 80123f4:	d0c5      	beq.n	8012382 <lv_img_decoder_built_in_open+0x52>
 80123f6:	f10d 0203 	add.w	r2, sp, #3
 80123fa:	1ad2      	subs	r2, r2, r3
 80123fc:	2a06      	cmp	r2, #6
 80123fe:	f240 80d6 	bls.w	80125ae <lv_img_decoder_built_in_open+0x27e>
        *d8 = *s8;
 8012402:	9a00      	ldr	r2, [sp, #0]
 8012404:	601a      	str	r2, [r3, #0]
 8012406:	9a01      	ldr	r2, [sp, #4]
 8012408:	605a      	str	r2, [r3, #4]
    lv_img_cf_t cf = dsc->header.cf;
 801240a:	7c20      	ldrb	r0, [r4, #16]
 801240c:	f000 001f 	and.w	r0, r0, #31
    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_ALPHA || cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 8012410:	1f03      	subs	r3, r0, #4
 8012412:	2b02      	cmp	r3, #2
 8012414:	d89a      	bhi.n	801234c <lv_img_decoder_built_in_open+0x1c>
        if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 8012416:	7b23      	ldrb	r3, [r4, #12]
 8012418:	2b00      	cmp	r3, #0
 801241a:	d19d      	bne.n	8012358 <lv_img_decoder_built_in_open+0x28>
 801241c:	6863      	ldr	r3, [r4, #4]
 801241e:	e7aa      	b.n	8012376 <lv_img_decoder_built_in_open+0x46>
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 8012420:	6a25      	ldr	r5, [r4, #32]
    if(user_data) {
 8012422:	2d00      	cmp	r5, #0
 8012424:	d0c3      	beq.n	80123ae <lv_img_decoder_built_in_open+0x7e>
        if(user_data->f) {
 8012426:	6828      	ldr	r0, [r5, #0]
 8012428:	b120      	cbz	r0, 8012434 <lv_img_decoder_built_in_open+0x104>
            lv_fs_close(user_data->f);
 801242a:	f002 fa5f 	bl	80148ec <lv_fs_close>
            lv_mem_free(user_data->f);
 801242e:	6828      	ldr	r0, [r5, #0]
 8012430:	f002 fcfc 	bl	8014e2c <lv_mem_free>
        if(user_data->palette) lv_mem_free(user_data->palette);
 8012434:	6868      	ldr	r0, [r5, #4]
 8012436:	b108      	cbz	r0, 801243c <lv_img_decoder_built_in_open+0x10c>
 8012438:	f002 fcf8 	bl	8014e2c <lv_mem_free>
        if(user_data->opa) lv_mem_free(user_data->opa);
 801243c:	68a8      	ldr	r0, [r5, #8]
 801243e:	b108      	cbz	r0, 8012444 <lv_img_decoder_built_in_open+0x114>
 8012440:	f002 fcf4 	bl	8014e2c <lv_mem_free>
        lv_mem_free(user_data);
 8012444:	4628      	mov	r0, r5
 8012446:	f002 fcf1 	bl	8014e2c <lv_mem_free>
        dsc->user_data = NULL;
 801244a:	2000      	movs	r0, #0
 801244c:	6220      	str	r0, [r4, #32]
 801244e:	e786      	b.n	801235e <lv_img_decoder_built_in_open+0x2e>
        uint8_t px_size       = lv_img_cf_get_px_size(cf);
 8012450:	f7f9 fe90 	bl	800c174 <lv_img_cf_get_px_size>
        if(dsc->user_data == NULL) {
 8012454:	6a25      	ldr	r5, [r4, #32]
        uint8_t px_size       = lv_img_cf_get_px_size(cf);
 8012456:	4606      	mov	r6, r0
        if(dsc->user_data == NULL) {
 8012458:	2d00      	cmp	r5, #0
 801245a:	d053      	beq.n	8012504 <lv_img_decoder_built_in_open+0x1d4>
        user_data->palette                         = lv_mem_alloc(palette_size * sizeof(lv_color_t));
 801245c:	f04f 0804 	mov.w	r8, #4
 8012460:	fa08 f006 	lsl.w	r0, r8, r6
 8012464:	f002 fc9c 	bl	8014da0 <lv_mem_alloc>
 8012468:	6068      	str	r0, [r5, #4]
        LV_ASSERT_MEM(user_data->palette);
 801246a:	f002 f9ad 	bl	80147c8 <lv_debug_check_null>
 801246e:	4603      	mov	r3, r0
 8012470:	b920      	cbnz	r0, 801247c <lv_img_decoder_built_in_open+0x14c>
 8012472:	686a      	ldr	r2, [r5, #4]
 8012474:	485e      	ldr	r0, [pc, #376]	; (80125f0 <lv_img_decoder_built_in_open+0x2c0>)
 8012476:	f002 f9ab 	bl	80147d0 <lv_debug_log_error>
 801247a:	e7fe      	b.n	801247a <lv_img_decoder_built_in_open+0x14a>
        uint32_t palette_size = 1 << px_size;
 801247c:	2701      	movs	r7, #1
 801247e:	fa07 f606 	lsl.w	r6, r7, r6
        user_data->opa                             = lv_mem_alloc(palette_size * sizeof(lv_opa_t));
 8012482:	4630      	mov	r0, r6
 8012484:	f002 fc8c 	bl	8014da0 <lv_mem_alloc>
 8012488:	60a8      	str	r0, [r5, #8]
        LV_ASSERT_MEM(user_data->opa);
 801248a:	f002 f99d 	bl	80147c8 <lv_debug_check_null>
 801248e:	4603      	mov	r3, r0
 8012490:	2800      	cmp	r0, #0
 8012492:	d06c      	beq.n	801256e <lv_img_decoder_built_in_open+0x23e>
        if(user_data->palette == NULL || user_data->opa == NULL) {
 8012494:	686a      	ldr	r2, [r5, #4]
 8012496:	2a00      	cmp	r2, #0
 8012498:	d0c2      	beq.n	8012420 <lv_img_decoder_built_in_open+0xf0>
 801249a:	68a8      	ldr	r0, [r5, #8]
 801249c:	2800      	cmp	r0, #0
 801249e:	d0bf      	beq.n	8012420 <lv_img_decoder_built_in_open+0xf0>
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 80124a0:	7b23      	ldrb	r3, [r4, #12]
 80124a2:	2b01      	cmp	r3, #1
 80124a4:	d03f      	beq.n	8012526 <lv_img_decoder_built_in_open+0x1f6>
            lv_color32_t * palette_p = (lv_color32_t *)((lv_img_dsc_t *)dsc->src)->data;
 80124a6:	6863      	ldr	r3, [r4, #4]
 80124a8:	689b      	ldr	r3, [r3, #8]
            for(i = 0; i < palette_size; i++) {
 80124aa:	2e00      	cmp	r6, #0
 80124ac:	f43f af54 	beq.w	8012358 <lv_img_decoder_built_in_open+0x28>
                user_data->palette[i] = lv_color_make(palette_p[i].ch.red, palette_p[i].ch.green, palette_p[i].ch.blue);
 80124b0:	f893 e002 	ldrb.w	lr, [r3, #2]
 80124b4:	21ff      	movs	r1, #255	; 0xff
 80124b6:	f8b3 c000 	ldrh.w	ip, [r3]
            for(i = 0; i < palette_size; i++) {
 80124ba:	2e01      	cmp	r6, #1
                user_data->palette[i] = lv_color_make(palette_p[i].ch.red, palette_p[i].ch.green, palette_p[i].ch.blue);
 80124bc:	f882 e002 	strb.w	lr, [r2, #2]
 80124c0:	f8a2 c000 	strh.w	ip, [r2]
 80124c4:	70d1      	strb	r1, [r2, #3]
                user_data->opa[i]     = palette_p[i].ch.alpha;
 80124c6:	78da      	ldrb	r2, [r3, #3]
 80124c8:	7002      	strb	r2, [r0, #0]
            for(i = 0; i < palette_size; i++) {
 80124ca:	f43f af45 	beq.w	8012358 <lv_img_decoder_built_in_open+0x28>
 80124ce:	463a      	mov	r2, r7
                user_data->palette[i] = lv_color_make(palette_p[i].ch.red, palette_p[i].ch.green, palette_p[i].ch.blue);
 80124d0:	686f      	ldr	r7, [r5, #4]
 80124d2:	3304      	adds	r3, #4
 80124d4:	f893 e002 	ldrb.w	lr, [r3, #2]
 80124d8:	f893 8001 	ldrb.w	r8, [r3, #1]
 80124dc:	eb07 0082 	add.w	r0, r7, r2, lsl #2
 80124e0:	f893 9000 	ldrb.w	r9, [r3]
 80124e4:	f8d5 c008 	ldr.w	ip, [r5, #8]
 80124e8:	f807 9022 	strb.w	r9, [r7, r2, lsl #2]
 80124ec:	f880 8001 	strb.w	r8, [r0, #1]
 80124f0:	f880 e002 	strb.w	lr, [r0, #2]
 80124f4:	70c1      	strb	r1, [r0, #3]
                user_data->opa[i]     = palette_p[i].ch.alpha;
 80124f6:	78d8      	ldrb	r0, [r3, #3]
 80124f8:	f80c 0002 	strb.w	r0, [ip, r2]
            for(i = 0; i < palette_size; i++) {
 80124fc:	3201      	adds	r2, #1
 80124fe:	4296      	cmp	r6, r2
 8012500:	d1e6      	bne.n	80124d0 <lv_img_decoder_built_in_open+0x1a0>
 8012502:	e729      	b.n	8012358 <lv_img_decoder_built_in_open+0x28>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
 8012504:	200c      	movs	r0, #12
 8012506:	f002 fc4b 	bl	8014da0 <lv_mem_alloc>
 801250a:	6220      	str	r0, [r4, #32]
            LV_ASSERT_MEM(dsc->user_data);
 801250c:	f002 f95c 	bl	80147c8 <lv_debug_check_null>
 8012510:	4603      	mov	r3, r0
 8012512:	b388      	cbz	r0, 8012578 <lv_img_decoder_built_in_open+0x248>
            if(dsc->user_data == NULL) {
 8012514:	6a20      	ldr	r0, [r4, #32]
 8012516:	2800      	cmp	r0, #0
 8012518:	f43f af49 	beq.w	80123ae <lv_img_decoder_built_in_open+0x7e>
            _lv_memset_00(dsc->user_data, sizeof(lv_img_decoder_built_in_data_t));
 801251c:	210c      	movs	r1, #12
 801251e:	f003 f92b 	bl	8015778 <_lv_memset_00>
 8012522:	6a25      	ldr	r5, [r4, #32]
 8012524:	e79a      	b.n	801245c <lv_img_decoder_built_in_open+0x12c>
            lv_fs_seek(user_data->f, 4); /*Skip the header*/
 8012526:	4641      	mov	r1, r8
 8012528:	6828      	ldr	r0, [r5, #0]
 801252a:	f002 fa15 	bl	8014958 <lv_fs_seek>
            for(i = 0; i < palette_size; i++) {
 801252e:	2e00      	cmp	r6, #0
 8012530:	f43f af12 	beq.w	8012358 <lv_img_decoder_built_in_open+0x28>
 8012534:	2700      	movs	r7, #0
                user_data->palette[i] = lv_color_make(cur_color.ch.red, cur_color.ch.green, cur_color.ch.blue);
 8012536:	f04f 08ff 	mov.w	r8, #255	; 0xff
                lv_fs_read(user_data->f, &cur_color, sizeof(lv_color32_t), NULL);
 801253a:	2300      	movs	r3, #0
 801253c:	2204      	movs	r2, #4
 801253e:	4669      	mov	r1, sp
 8012540:	6828      	ldr	r0, [r5, #0]
 8012542:	f002 f9e9 	bl	8014918 <lv_fs_read>
                user_data->palette[i] = lv_color_make(cur_color.ch.red, cur_color.ch.green, cur_color.ch.blue);
 8012546:	686a      	ldr	r2, [r5, #4]
 8012548:	f89d 0002 	ldrb.w	r0, [sp, #2]
 801254c:	f8bd c000 	ldrh.w	ip, [sp]
 8012550:	eb02 0387 	add.w	r3, r2, r7, lsl #2
                user_data->opa[i]     = cur_color.ch.alpha;
 8012554:	68a9      	ldr	r1, [r5, #8]
                user_data->palette[i] = lv_color_make(cur_color.ch.red, cur_color.ch.green, cur_color.ch.blue);
 8012556:	f822 c027 	strh.w	ip, [r2, r7, lsl #2]
 801255a:	7098      	strb	r0, [r3, #2]
 801255c:	f883 8003 	strb.w	r8, [r3, #3]
                user_data->opa[i]     = cur_color.ch.alpha;
 8012560:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8012564:	55cb      	strb	r3, [r1, r7]
            for(i = 0; i < palette_size; i++) {
 8012566:	3701      	adds	r7, #1
 8012568:	42be      	cmp	r6, r7
 801256a:	d1e6      	bne.n	801253a <lv_img_decoder_built_in_open+0x20a>
 801256c:	e6f4      	b.n	8012358 <lv_img_decoder_built_in_open+0x28>
        LV_ASSERT_MEM(user_data->opa);
 801256e:	68aa      	ldr	r2, [r5, #8]
 8012570:	481f      	ldr	r0, [pc, #124]	; (80125f0 <lv_img_decoder_built_in_open+0x2c0>)
 8012572:	f002 f92d 	bl	80147d0 <lv_debug_log_error>
 8012576:	e7fe      	b.n	8012576 <lv_img_decoder_built_in_open+0x246>
            LV_ASSERT_MEM(dsc->user_data);
 8012578:	6a22      	ldr	r2, [r4, #32]
 801257a:	481d      	ldr	r0, [pc, #116]	; (80125f0 <lv_img_decoder_built_in_open+0x2c0>)
 801257c:	f002 f928 	bl	80147d0 <lv_debug_log_error>
 8012580:	e7fe      	b.n	8012580 <lv_img_decoder_built_in_open+0x250>
        LV_ASSERT_MEM(user_data->f);
 8012582:	682a      	ldr	r2, [r5, #0]
 8012584:	481a      	ldr	r0, [pc, #104]	; (80125f0 <lv_img_decoder_built_in_open+0x2c0>)
 8012586:	f002 f923 	bl	80147d0 <lv_debug_log_error>
 801258a:	e7fe      	b.n	801258a <lv_img_decoder_built_in_open+0x25a>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
 801258c:	200c      	movs	r0, #12
 801258e:	f002 fc07 	bl	8014da0 <lv_mem_alloc>
 8012592:	6220      	str	r0, [r4, #32]
            LV_ASSERT_MEM(dsc->user_data);
 8012594:	f002 f918 	bl	80147c8 <lv_debug_check_null>
 8012598:	4603      	mov	r3, r0
 801259a:	b308      	cbz	r0, 80125e0 <lv_img_decoder_built_in_open+0x2b0>
            if(dsc->user_data == NULL) {
 801259c:	6a20      	ldr	r0, [r4, #32]
 801259e:	2800      	cmp	r0, #0
 80125a0:	f43f af05 	beq.w	80123ae <lv_img_decoder_built_in_open+0x7e>
            _lv_memset_00(dsc->user_data, sizeof(lv_img_decoder_built_in_data_t));
 80125a4:	210c      	movs	r1, #12
 80125a6:	f003 f8e7 	bl	8015778 <_lv_memset_00>
 80125aa:	6a25      	ldr	r5, [r4, #32]
 80125ac:	e716      	b.n	80123dc <lv_img_decoder_built_in_open+0xac>
 80125ae:	f89d 2000 	ldrb.w	r2, [sp]
 80125b2:	701a      	strb	r2, [r3, #0]
 80125b4:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80125b8:	705a      	strb	r2, [r3, #1]
 80125ba:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80125be:	709a      	strb	r2, [r3, #2]
 80125c0:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80125c4:	70da      	strb	r2, [r3, #3]
 80125c6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80125ca:	711a      	strb	r2, [r3, #4]
 80125cc:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80125d0:	715a      	strb	r2, [r3, #5]
 80125d2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80125d6:	719a      	strb	r2, [r3, #6]
 80125d8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80125dc:	71da      	strb	r2, [r3, #7]
    while(len) {
 80125de:	e714      	b.n	801240a <lv_img_decoder_built_in_open+0xda>
            LV_ASSERT_MEM(dsc->user_data);
 80125e0:	6a22      	ldr	r2, [r4, #32]
 80125e2:	4803      	ldr	r0, [pc, #12]	; (80125f0 <lv_img_decoder_built_in_open+0x2c0>)
 80125e4:	f002 f8f4 	bl	80147d0 <lv_debug_log_error>
 80125e8:	e7fe      	b.n	80125e8 <lv_img_decoder_built_in_open+0x2b8>
 80125ea:	bf00      	nop
 80125ec:	0801e33c 	.word	0x0801e33c
 80125f0:	0801e1c4 	.word	0x0801e1c4

080125f4 <_lv_img_decoder_init>:
{
 80125f4:	b510      	push	{r4, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_img_defoder_ll), sizeof(lv_img_decoder_t));
 80125f6:	2110      	movs	r1, #16
 80125f8:	4814      	ldr	r0, [pc, #80]	; (801264c <_lv_img_decoder_init+0x58>)
 80125fa:	f002 f9d9 	bl	80149b0 <_lv_ll_init>
    decoder = _lv_ll_ins_head(&LV_GC_ROOT(_lv_img_defoder_ll));
 80125fe:	4813      	ldr	r0, [pc, #76]	; (801264c <_lv_img_decoder_init+0x58>)
 8012600:	f002 f9de 	bl	80149c0 <_lv_ll_ins_head>
 8012604:	4604      	mov	r4, r0
    LV_ASSERT_MEM(decoder);
 8012606:	f002 f8df 	bl	80147c8 <lv_debug_check_null>
 801260a:	b168      	cbz	r0, 8012628 <_lv_img_decoder_init+0x34>
    if(decoder == NULL) return NULL;
 801260c:	b194      	cbz	r4, 8012634 <_lv_img_decoder_init+0x40>
    _lv_memset_00(decoder, sizeof(lv_img_decoder_t));
 801260e:	2110      	movs	r1, #16
 8012610:	4620      	mov	r0, r4
 8012612:	f003 f8b1 	bl	8015778 <_lv_memset_00>
    decoder->info_cb = info_cb;
 8012616:	480e      	ldr	r0, [pc, #56]	; (8012650 <_lv_img_decoder_init+0x5c>)
    decoder->open_cb = open_cb;
 8012618:	490e      	ldr	r1, [pc, #56]	; (8012654 <_lv_img_decoder_init+0x60>)
    decoder->read_line_cb = read_line_cb;
 801261a:	4a0f      	ldr	r2, [pc, #60]	; (8012658 <_lv_img_decoder_init+0x64>)
    decoder->close_cb = close_cb;
 801261c:	4b0f      	ldr	r3, [pc, #60]	; (801265c <_lv_img_decoder_init+0x68>)
    decoder->open_cb = open_cb;
 801261e:	e9c4 0100 	strd	r0, r1, [r4]
    decoder->close_cb = close_cb;
 8012622:	e9c4 2302 	strd	r2, r3, [r4, #8]
}
 8012626:	bd10      	pop	{r4, pc}
 8012628:	4603      	mov	r3, r0
    LV_ASSERT_MEM(decoder);
 801262a:	4622      	mov	r2, r4
 801262c:	480c      	ldr	r0, [pc, #48]	; (8012660 <_lv_img_decoder_init+0x6c>)
 801262e:	f002 f8cf 	bl	80147d0 <lv_debug_log_error>
 8012632:	e7fe      	b.n	8012632 <_lv_img_decoder_init+0x3e>
        LV_ASSERT_MEM(decoder);
 8012634:	4620      	mov	r0, r4
 8012636:	f002 f8c7 	bl	80147c8 <lv_debug_check_null>
 801263a:	2800      	cmp	r0, #0
 801263c:	d1f3      	bne.n	8012626 <_lv_img_decoder_init+0x32>
 801263e:	2200      	movs	r2, #0
 8012640:	2300      	movs	r3, #0
 8012642:	4807      	ldr	r0, [pc, #28]	; (8012660 <_lv_img_decoder_init+0x6c>)
 8012644:	f002 f8c4 	bl	80147d0 <lv_debug_log_error>
 8012648:	e7fe      	b.n	8012648 <_lv_img_decoder_init+0x54>
 801264a:	bf00      	nop
 801264c:	2002043c 	.word	0x2002043c
 8012650:	08011e81 	.word	0x08011e81
 8012654:	08012331 	.word	0x08012331
 8012658:	08011f31 	.word	0x08011f31
 801265c:	08011e4d 	.word	0x08011e4d
 8012660:	0801e1c4 	.word	0x0801e1c4

08012664 <lv_img_decoder_get_info>:
    header->cf = LV_IMG_CF_UNKNOWN;
 8012664:	680b      	ldr	r3, [r1, #0]
 8012666:	f403 7340 	and.w	r3, r3, #768	; 0x300
{
 801266a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801266e:	4607      	mov	r7, r0
    header->cf = LV_IMG_CF_UNKNOWN;
 8012670:	600b      	str	r3, [r1, #0]
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
 8012672:	480e      	ldr	r0, [pc, #56]	; (80126ac <lv_img_decoder_get_info+0x48>)
{
 8012674:	460e      	mov	r6, r1
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
 8012676:	f002 fa79 	bl	8014b6c <_lv_ll_get_head>
 801267a:	4604      	mov	r4, r0
 801267c:	b1a0      	cbz	r0, 80126a8 <lv_img_decoder_get_info+0x44>
 801267e:	f8df 802c 	ldr.w	r8, [pc, #44]	; 80126ac <lv_img_decoder_get_info+0x48>
        if(d->info_cb) {
 8012682:	6825      	ldr	r5, [r4, #0]
            res = d->info_cb(d, src, header);
 8012684:	4632      	mov	r2, r6
 8012686:	4639      	mov	r1, r7
 8012688:	4620      	mov	r0, r4
        if(d->info_cb) {
 801268a:	b11d      	cbz	r5, 8012694 <lv_img_decoder_get_info+0x30>
            res = d->info_cb(d, src, header);
 801268c:	47a8      	blx	r5
            if(res == LV_RES_OK) break;
 801268e:	2801      	cmp	r0, #1
            res = d->info_cb(d, src, header);
 8012690:	4605      	mov	r5, r0
            if(res == LV_RES_OK) break;
 8012692:	d006      	beq.n	80126a2 <lv_img_decoder_get_info+0x3e>
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
 8012694:	4621      	mov	r1, r4
 8012696:	4640      	mov	r0, r8
 8012698:	f002 fa70 	bl	8014b7c <_lv_ll_get_next>
 801269c:	4604      	mov	r4, r0
 801269e:	2800      	cmp	r0, #0
 80126a0:	d1ef      	bne.n	8012682 <lv_img_decoder_get_info+0x1e>
}
 80126a2:	4628      	mov	r0, r5
 80126a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    lv_res_t res = LV_RES_INV;
 80126a8:	4605      	mov	r5, r0
 80126aa:	e7fa      	b.n	80126a2 <lv_img_decoder_get_info+0x3e>
 80126ac:	2002043c 	.word	0x2002043c

080126b0 <lv_img_decoder_open>:
{
 80126b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126b4:	4606      	mov	r6, r0
    dsc->color     = color;
 80126b6:	6082      	str	r2, [r0, #8]
    dsc->src_type  = lv_img_src_get_type(src);
 80126b8:	4608      	mov	r0, r1
{
 80126ba:	468b      	mov	fp, r1
    dsc->src_type  = lv_img_src_get_type(src);
 80126bc:	f7f9 fd7e 	bl	800c1bc <lv_img_src_get_type>
    dsc->user_data = NULL;
 80126c0:	2300      	movs	r3, #0
    if(dsc->src_type == LV_IMG_SRC_FILE) {
 80126c2:	2801      	cmp	r0, #1
    dsc->src_type  = lv_img_src_get_type(src);
 80126c4:	7330      	strb	r0, [r6, #12]
    dsc->user_data = NULL;
 80126c6:	6233      	str	r3, [r6, #32]
    if(dsc->src_type == LV_IMG_SRC_FILE) {
 80126c8:	d02d      	beq.n	8012726 <lv_img_decoder_open+0x76>
        dsc->src       = src;
 80126ca:	f8c6 b004 	str.w	fp, [r6, #4]
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
 80126ce:	481c      	ldr	r0, [pc, #112]	; (8012740 <lv_img_decoder_open+0x90>)
 80126d0:	f002 fa4c 	bl	8014b6c <_lv_ll_get_head>
 80126d4:	4604      	mov	r4, r0
 80126d6:	b388      	cbz	r0, 801273c <lv_img_decoder_open+0x8c>
    lv_res_t res = LV_RES_INV;
 80126d8:	2500      	movs	r5, #0
        res = d->info_cb(d, src, &dsc->header);
 80126da:	f106 0810 	add.w	r8, r6, #16
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
 80126de:	f8df 9060 	ldr.w	r9, [pc, #96]	; 8012740 <lv_img_decoder_open+0x90>
        dsc->error_msg = NULL;
 80126e2:	46aa      	mov	sl, r5
        if(d->info_cb == NULL || d->open_cb == NULL) continue;
 80126e4:	6823      	ldr	r3, [r4, #0]
        res = d->info_cb(d, src, &dsc->header);
 80126e6:	4642      	mov	r2, r8
 80126e8:	4659      	mov	r1, fp
 80126ea:	4620      	mov	r0, r4
        if(d->info_cb == NULL || d->open_cb == NULL) continue;
 80126ec:	b18b      	cbz	r3, 8012712 <lv_img_decoder_open+0x62>
 80126ee:	6867      	ldr	r7, [r4, #4]
 80126f0:	b17f      	cbz	r7, 8012712 <lv_img_decoder_open+0x62>
        res = d->info_cb(d, src, &dsc->header);
 80126f2:	4798      	blx	r3
 80126f4:	4605      	mov	r5, r0
        res = d->open_cb(d, dsc);
 80126f6:	4631      	mov	r1, r6
 80126f8:	4620      	mov	r0, r4
        if(res != LV_RES_OK) continue;
 80126fa:	2d01      	cmp	r5, #1
 80126fc:	d109      	bne.n	8012712 <lv_img_decoder_open+0x62>
        res = d->open_cb(d, dsc);
 80126fe:	6863      	ldr	r3, [r4, #4]
        dsc->error_msg = NULL;
 8012700:	f8c6 a01c 	str.w	sl, [r6, #28]
        dsc->img_data  = NULL;
 8012704:	f8c6 a014 	str.w	sl, [r6, #20]
        dsc->decoder   = d;
 8012708:	6034      	str	r4, [r6, #0]
        res = d->open_cb(d, dsc);
 801270a:	4798      	blx	r3
        if(res == LV_RES_OK) break;
 801270c:	2801      	cmp	r0, #1
        res = d->open_cb(d, dsc);
 801270e:	4605      	mov	r5, r0
        if(res == LV_RES_OK) break;
 8012710:	d006      	beq.n	8012720 <lv_img_decoder_open+0x70>
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
 8012712:	4621      	mov	r1, r4
 8012714:	4648      	mov	r0, r9
 8012716:	f002 fa31 	bl	8014b7c <_lv_ll_get_next>
 801271a:	4604      	mov	r4, r0
 801271c:	2800      	cmp	r0, #0
 801271e:	d1e1      	bne.n	80126e4 <lv_img_decoder_open+0x34>
}
 8012720:	4628      	mov	r0, r5
 8012722:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        size_t fnlen = strlen(src);
 8012726:	4658      	mov	r0, fp
 8012728:	f7ed fd78 	bl	800021c <strlen>
        dsc->src = lv_mem_alloc(fnlen + 1);
 801272c:	3001      	adds	r0, #1
 801272e:	f002 fb37 	bl	8014da0 <lv_mem_alloc>
        strcpy((char *)dsc->src, src);
 8012732:	4659      	mov	r1, fp
        dsc->src = lv_mem_alloc(fnlen + 1);
 8012734:	6070      	str	r0, [r6, #4]
        strcpy((char *)dsc->src, src);
 8012736:	f00b fd15 	bl	801e164 <strcpy>
 801273a:	e7c8      	b.n	80126ce <lv_img_decoder_open+0x1e>
    lv_res_t res = LV_RES_INV;
 801273c:	4605      	mov	r5, r0
 801273e:	e7ef      	b.n	8012720 <lv_img_decoder_open+0x70>
 8012740:	2002043c 	.word	0x2002043c

08012744 <lv_img_decoder_read_line>:
{
 8012744:	b570      	push	{r4, r5, r6, lr}
    if(dsc->decoder->read_line_cb) res = dsc->decoder->read_line_cb(dsc->decoder, dsc, x, y, len, buf);
 8012746:	6806      	ldr	r6, [r0, #0]
{
 8012748:	b082      	sub	sp, #8
    if(dsc->decoder->read_line_cb) res = dsc->decoder->read_line_cb(dsc->decoder, dsc, x, y, len, buf);
 801274a:	68b4      	ldr	r4, [r6, #8]
 801274c:	b154      	cbz	r4, 8012764 <lv_img_decoder_read_line+0x20>
 801274e:	461d      	mov	r5, r3
 8012750:	9b06      	ldr	r3, [sp, #24]
 8012752:	9301      	str	r3, [sp, #4]
 8012754:	4613      	mov	r3, r2
 8012756:	460a      	mov	r2, r1
 8012758:	4601      	mov	r1, r0
 801275a:	9500      	str	r5, [sp, #0]
 801275c:	4630      	mov	r0, r6
 801275e:	47a0      	blx	r4
}
 8012760:	b002      	add	sp, #8
 8012762:	bd70      	pop	{r4, r5, r6, pc}
    lv_res_t res = LV_RES_INV;
 8012764:	4620      	mov	r0, r4
}
 8012766:	b002      	add	sp, #8
 8012768:	bd70      	pop	{r4, r5, r6, pc}
 801276a:	bf00      	nop

0801276c <lv_img_decoder_close>:
{
 801276c:	b510      	push	{r4, lr}
 801276e:	4604      	mov	r4, r0
    if(dsc->decoder) {
 8012770:	6800      	ldr	r0, [r0, #0]
 8012772:	b130      	cbz	r0, 8012782 <lv_img_decoder_close+0x16>
        if(dsc->decoder->close_cb) dsc->decoder->close_cb(dsc->decoder, dsc);
 8012774:	68c3      	ldr	r3, [r0, #12]
 8012776:	b10b      	cbz	r3, 801277c <lv_img_decoder_close+0x10>
 8012778:	4621      	mov	r1, r4
 801277a:	4798      	blx	r3
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 801277c:	7b23      	ldrb	r3, [r4, #12]
 801277e:	2b01      	cmp	r3, #1
 8012780:	d000      	beq.n	8012784 <lv_img_decoder_close+0x18>
}
 8012782:	bd10      	pop	{r4, pc}
            lv_mem_free(dsc->src);
 8012784:	6860      	ldr	r0, [r4, #4]
 8012786:	f002 fb51 	bl	8014e2c <lv_mem_free>
            dsc->src = NULL;
 801278a:	2300      	movs	r3, #0
 801278c:	6063      	str	r3, [r4, #4]
}
 801278e:	bd10      	pop	{r4, pc}

08012790 <lv_font_get_glyph_bitmap>:
 * @param letter an UNICODE character code
 * @return pointer to the bitmap of the letter
 */
const uint8_t * lv_font_get_glyph_bitmap(const lv_font_t * font_p, uint32_t letter)
{
    return font_p->get_glyph_bitmap(font_p, letter);
 8012790:	6843      	ldr	r3, [r0, #4]
 8012792:	4718      	bx	r3

08012794 <lv_font_get_glyph_dsc>:
 * @return true: descriptor is successfully loaded into `dsc_out`.
 *         false: the letter was not found, no data is loaded to `dsc_out`
 */
bool lv_font_get_glyph_dsc(const lv_font_t * font_p, lv_font_glyph_dsc_t * dsc_out, uint32_t letter,
                           uint32_t letter_next)
{
 8012794:	b410      	push	{r4}
    return font_p->get_glyph_dsc(font_p, dsc_out, letter, letter_next);
 8012796:	6804      	ldr	r4, [r0, #0]
 8012798:	46a4      	mov	ip, r4
}
 801279a:	f85d 4b04 	ldr.w	r4, [sp], #4
    return font_p->get_glyph_dsc(font_p, dsc_out, letter, letter_next);
 801279e:	4760      	bx	ip

080127a0 <lv_font_get_glyph_width>:
 * @param letter an UNICODE letter
 * @param letter_next the next letter after `letter`. Used for kerning
 * @return the width of the glyph
 */
uint16_t lv_font_get_glyph_width(const lv_font_t * font, uint32_t letter, uint32_t letter_next)
{
 80127a0:	b510      	push	{r4, lr}
 80127a2:	460c      	mov	r4, r1
 80127a4:	b084      	sub	sp, #16
 80127a6:	4613      	mov	r3, r2
    return font_p->get_glyph_dsc(font_p, dsc_out, letter, letter_next);
 80127a8:	a901      	add	r1, sp, #4
 80127aa:	4622      	mov	r2, r4
 80127ac:	6804      	ldr	r4, [r0, #0]
 80127ae:	47a0      	blx	r4
    lv_font_glyph_dsc_t g;
    bool ret;
    ret = lv_font_get_glyph_dsc(font, &g, letter, letter_next);
    if(ret) return g.adv_w;
 80127b0:	b108      	cbz	r0, 80127b6 <lv_font_get_glyph_width+0x16>
 80127b2:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    else return 0;
}
 80127b6:	b004      	add	sp, #16
 80127b8:	bd10      	pop	{r4, pc}
 80127ba:	bf00      	nop

080127bc <kern_pair_8_compare>:
{
    const uint8_t * ref8_p = ref;
    const uint8_t * element8_p = element;

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref8_p[0] != element8_p[0]) return (int32_t)ref8_p[0] - element8_p[0];
 80127bc:	7803      	ldrb	r3, [r0, #0]
 80127be:	780a      	ldrb	r2, [r1, #0]
 80127c0:	4293      	cmp	r3, r2
 80127c2:	d001      	beq.n	80127c8 <kern_pair_8_compare+0xc>
 80127c4:	1a98      	subs	r0, r3, r2
 80127c6:	4770      	bx	lr
    else return (int32_t) ref8_p[1] - element8_p[1];
 80127c8:	7840      	ldrb	r0, [r0, #1]
 80127ca:	784b      	ldrb	r3, [r1, #1]
 80127cc:	1ac0      	subs	r0, r0, r3

}
 80127ce:	4770      	bx	lr

080127d0 <kern_pair_16_compare>:
{
    const uint16_t * ref16_p = ref;
    const uint16_t * element16_p = element;

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref16_p[0] != element16_p[0]) return (int32_t)ref16_p[0] - element16_p[0];
 80127d0:	8803      	ldrh	r3, [r0, #0]
 80127d2:	880a      	ldrh	r2, [r1, #0]
 80127d4:	4293      	cmp	r3, r2
 80127d6:	d001      	beq.n	80127dc <kern_pair_16_compare+0xc>
 80127d8:	1a98      	subs	r0, r3, r2
 80127da:	4770      	bx	lr
    else return (int32_t) ref16_p[1] - element16_p[1];
 80127dc:	8840      	ldrh	r0, [r0, #2]
 80127de:	884b      	ldrh	r3, [r1, #2]
 80127e0:	1ac0      	subs	r0, r0, r3
}
 80127e2:	4770      	bx	lr

080127e4 <unicode_list_compare>:
 *  @retval > 0   Reference is greater than element.
 *
 */
static int32_t unicode_list_compare(const void * ref, const void * element)
{
    return ((int32_t)(*(uint16_t *)ref)) - ((int32_t)(*(uint16_t *)element));
 80127e4:	8800      	ldrh	r0, [r0, #0]
 80127e6:	880b      	ldrh	r3, [r1, #0]
}
 80127e8:	1ac0      	subs	r0, r0, r3
 80127ea:	4770      	bx	lr

080127ec <get_glyph_dsc_id.isra.0.part.0>:
static uint32_t get_glyph_dsc_id(const lv_font_t * font, uint32_t letter)
 80127ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
 80127ee:	6805      	ldr	r5, [r0, #0]
static uint32_t get_glyph_dsc_id(const lv_font_t * font, uint32_t letter)
 80127f0:	b085      	sub	sp, #20
    if(letter == fdsc->last_letter) return fdsc->last_glyph_id;
 80127f2:	696b      	ldr	r3, [r5, #20]
 80127f4:	428b      	cmp	r3, r1
 80127f6:	d030      	beq.n	801285a <get_glyph_dsc_id.isra.0.part.0+0x6e>
    for(i = 0; i < fdsc->cmap_num; i++) {
 80127f8:	8a6b      	ldrh	r3, [r5, #18]
 80127fa:	460c      	mov	r4, r1
 80127fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012800:	b303      	cbz	r3, 8012844 <get_glyph_dsc_id.isra.0.part.0+0x58>
 8012802:	3b01      	subs	r3, #1
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
 8012804:	68a8      	ldr	r0, [r5, #8]
 8012806:	2600      	movs	r6, #0
 8012808:	b29b      	uxth	r3, r3
 801280a:	4601      	mov	r1, r0
 801280c:	3301      	adds	r3, #1
 801280e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8012812:	009b      	lsls	r3, r3, #2
 8012814:	5982      	ldr	r2, [r0, r6]
        if(rcp > fdsc->cmaps[i].range_length) continue;
 8012816:	888f      	ldrh	r7, [r1, #4]
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
 8012818:	1aa2      	subs	r2, r4, r2
        if(rcp > fdsc->cmaps[i].range_length) continue;
 801281a:	42ba      	cmp	r2, r7
 801281c:	d80e      	bhi.n	801283c <get_glyph_dsc_id.isra.0.part.0+0x50>
        if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_TINY) {
 801281e:	7c8b      	ldrb	r3, [r1, #18]
 8012820:	2b02      	cmp	r3, #2
 8012822:	d008      	beq.n	8012836 <get_glyph_dsc_id.isra.0.part.0+0x4a>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_FULL) {
 8012824:	b99b      	cbnz	r3, 801284e <get_glyph_dsc_id.isra.0.part.0+0x62>
            glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_8[rcp];
 8012826:	68c8      	ldr	r0, [r1, #12]
 8012828:	88cb      	ldrh	r3, [r1, #6]
 801282a:	5c80      	ldrb	r0, [r0, r2]
 801282c:	4418      	add	r0, r3
        fdsc->last_glyph_id = glyph_id;
 801282e:	e9c5 4005 	strd	r4, r0, [r5, #20]
}
 8012832:	b005      	add	sp, #20
 8012834:	bdf0      	pop	{r4, r5, r6, r7, pc}
            glyph_id = fdsc->cmaps[i].glyph_id_start + rcp;
 8012836:	88c8      	ldrh	r0, [r1, #6]
 8012838:	4410      	add	r0, r2
 801283a:	e7f8      	b.n	801282e <get_glyph_dsc_id.isra.0.part.0+0x42>
    for(i = 0; i < fdsc->cmap_num; i++) {
 801283c:	3614      	adds	r6, #20
 801283e:	3114      	adds	r1, #20
 8012840:	42b3      	cmp	r3, r6
 8012842:	d1e7      	bne.n	8012814 <get_glyph_dsc_id.isra.0.part.0+0x28>
    fdsc->last_glyph_id = 0;
 8012844:	2300      	movs	r3, #0
    fdsc->last_letter = letter;
 8012846:	616c      	str	r4, [r5, #20]
    return 0;
 8012848:	4618      	mov	r0, r3
    fdsc->last_glyph_id = 0;
 801284a:	61ab      	str	r3, [r5, #24]
    return 0;
 801284c:	e7f1      	b.n	8012832 <get_glyph_dsc_id.isra.0.part.0+0x46>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_TINY) {
 801284e:	2b03      	cmp	r3, #3
 8012850:	d006      	beq.n	8012860 <get_glyph_dsc_id.isra.0.part.0+0x74>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_FULL) {
 8012852:	2b01      	cmp	r3, #1
 8012854:	d019      	beq.n	801288a <get_glyph_dsc_id.isra.0.part.0+0x9e>
        uint32_t glyph_id = 0;
 8012856:	2000      	movs	r0, #0
 8012858:	e7e9      	b.n	801282e <get_glyph_dsc_id.isra.0.part.0+0x42>
    if(letter == fdsc->last_letter) return fdsc->last_glyph_id;
 801285a:	69a8      	ldr	r0, [r5, #24]
}
 801285c:	b005      	add	sp, #20
 801285e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            uint16_t * p = _lv_utils_bsearch(&key, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
 8012860:	4f15      	ldr	r7, [pc, #84]	; (80128b8 <get_glyph_dsc_id.isra.0.part.0+0xcc>)
 8012862:	2302      	movs	r3, #2
            uint16_t key = rcp;
 8012864:	f8ad 200e 	strh.w	r2, [sp, #14]
            uint16_t * p = _lv_utils_bsearch(&key, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
 8012868:	f10d 000e 	add.w	r0, sp, #14
 801286c:	8a0a      	ldrh	r2, [r1, #16]
 801286e:	6889      	ldr	r1, [r1, #8]
 8012870:	9700      	str	r7, [sp, #0]
 8012872:	f003 fcd9 	bl	8016228 <_lv_utils_bsearch>
            if(p) {
 8012876:	2800      	cmp	r0, #0
 8012878:	d0d9      	beq.n	801282e <get_glyph_dsc_id.isra.0.part.0+0x42>
                lv_uintptr_t ofs = p - fdsc->cmaps[i].unicode_list;
 801287a:	68ab      	ldr	r3, [r5, #8]
 801287c:	441e      	add	r6, r3
 801287e:	68b3      	ldr	r3, [r6, #8]
                glyph_id = fdsc->cmaps[i].glyph_id_start + ofs;
 8012880:	88f2      	ldrh	r2, [r6, #6]
                lv_uintptr_t ofs = p - fdsc->cmaps[i].unicode_list;
 8012882:	1ac0      	subs	r0, r0, r3
                glyph_id = fdsc->cmaps[i].glyph_id_start + ofs;
 8012884:	eb02 0060 	add.w	r0, r2, r0, asr #1
 8012888:	e7d1      	b.n	801282e <get_glyph_dsc_id.isra.0.part.0+0x42>
            uint16_t * p = _lv_utils_bsearch(&key, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
 801288a:	4f0b      	ldr	r7, [pc, #44]	; (80128b8 <get_glyph_dsc_id.isra.0.part.0+0xcc>)
 801288c:	2302      	movs	r3, #2
            uint16_t key = rcp;
 801288e:	f8ad 200e 	strh.w	r2, [sp, #14]
            uint16_t * p = _lv_utils_bsearch(&key, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
 8012892:	f10d 000e 	add.w	r0, sp, #14
 8012896:	8a0a      	ldrh	r2, [r1, #16]
 8012898:	6889      	ldr	r1, [r1, #8]
 801289a:	9700      	str	r7, [sp, #0]
 801289c:	f003 fcc4 	bl	8016228 <_lv_utils_bsearch>
            if(p) {
 80128a0:	2800      	cmp	r0, #0
 80128a2:	d0c4      	beq.n	801282e <get_glyph_dsc_id.isra.0.part.0+0x42>
                lv_uintptr_t ofs = p - fdsc->cmaps[i].unicode_list;
 80128a4:	68ab      	ldr	r3, [r5, #8]
 80128a6:	441e      	add	r6, r3
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
 80128a8:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
                lv_uintptr_t ofs = p - fdsc->cmaps[i].unicode_list;
 80128ac:	1ac0      	subs	r0, r0, r3
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
 80128ae:	88f3      	ldrh	r3, [r6, #6]
 80128b0:	5a12      	ldrh	r2, [r2, r0]
 80128b2:	18d0      	adds	r0, r2, r3
 80128b4:	e7bb      	b.n	801282e <get_glyph_dsc_id.isra.0.part.0+0x42>
 80128b6:	bf00      	nop
 80128b8:	080127e5 	.word	0x080127e5

080128bc <lv_font_get_bitmap_fmt_txt>:
    if(unicode_letter == '\t') unicode_letter = ' ';
 80128bc:	2909      	cmp	r1, #9
{
 80128be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80128c2:	b097      	sub	sp, #92	; 0x5c
    if(unicode_letter == '\t') unicode_letter = ' ';
 80128c4:	f000 81a5 	beq.w	8012c12 <lv_font_get_bitmap_fmt_txt+0x356>
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
 80128c8:	6907      	ldr	r7, [r0, #16]
    if(letter == '\0') return 0;
 80128ca:	b1e9      	cbz	r1, 8012908 <lv_font_get_bitmap_fmt_txt+0x4c>
 80128cc:	3010      	adds	r0, #16
 80128ce:	f7ff ff8d 	bl	80127ec <get_glyph_dsc_id.isra.0.part.0>
    if(!gid) return NULL;
 80128d2:	4680      	mov	r8, r0
 80128d4:	b1c0      	cbz	r0, 8012908 <lv_font_get_bitmap_fmt_txt+0x4c>
    if(fdsc->bitmap_format == LV_FONT_FMT_TXT_PLAIN) {
 80128d6:	7cfb      	ldrb	r3, [r7, #19]
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
 80128d8:	f8d7 9004 	ldr.w	r9, [r7, #4]
    if(fdsc->bitmap_format == LV_FONT_FMT_TXT_PLAIN) {
 80128dc:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
 80128e0:	eb09 06c0 	add.w	r6, r9, r0, lsl #3
    if(fdsc->bitmap_format == LV_FONT_FMT_TXT_PLAIN) {
 80128e4:	f000 8199 	beq.w	8012c1a <lv_font_get_bitmap_fmt_txt+0x35e>
        uint32_t gsize = gdsc->box_w * gdsc->box_h;
 80128e8:	7934      	ldrb	r4, [r6, #4]
 80128ea:	7972      	ldrb	r2, [r6, #5]
 80128ec:	fb14 f402 	smulbb	r4, r4, r2
        if(gsize == 0) return NULL;
 80128f0:	b154      	cbz	r4, 8012908 <lv_font_get_bitmap_fmt_txt+0x4c>
        switch(fdsc->bpp) {
 80128f2:	f3c3 0343 	ubfx	r3, r3, #1, #4
 80128f6:	3b01      	subs	r3, #1
 80128f8:	2b03      	cmp	r3, #3
 80128fa:	d80b      	bhi.n	8012914 <lv_font_get_bitmap_fmt_txt+0x58>
 80128fc:	e8df f013 	tbh	[pc, r3, lsl #1]
 8012900:	019b019e 	.word	0x019b019e
 8012904:	00080008 	.word	0x00080008
    if(!gid) return NULL;
 8012908:	2000      	movs	r0, #0
}
 801290a:	b017      	add	sp, #92	; 0x5c
 801290c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                buf_size = (gsize + 1) >> 1;
 8012910:	3401      	adds	r4, #1
 8012912:	0864      	lsrs	r4, r4, #1
        if(_lv_mem_get_size(LV_GC_ROOT(_lv_font_decompr_buf)) < buf_size) {
 8012914:	4bb2      	ldr	r3, [pc, #712]	; (8012be0 <lv_font_get_bitmap_fmt_txt+0x324>)
 8012916:	6818      	ldr	r0, [r3, #0]
 8012918:	f002 fad0 	bl	8014ebc <_lv_mem_get_size>
 801291c:	42a0      	cmp	r0, r4
 801291e:	f080 8507 	bcs.w	8013330 <lv_font_get_bitmap_fmt_txt+0xa74>
            uint8_t * tmp = lv_mem_realloc(LV_GC_ROOT(_lv_font_decompr_buf), buf_size);
 8012922:	4baf      	ldr	r3, [pc, #700]	; (8012be0 <lv_font_get_bitmap_fmt_txt+0x324>)
 8012924:	4621      	mov	r1, r4
 8012926:	6818      	ldr	r0, [r3, #0]
 8012928:	f002 fda4 	bl	8015474 <lv_mem_realloc>
 801292c:	4605      	mov	r5, r0
            LV_ASSERT_MEM(tmp);
 801292e:	f001 ff4b 	bl	80147c8 <lv_debug_check_null>
 8012932:	4603      	mov	r3, r0
 8012934:	2800      	cmp	r0, #0
 8012936:	f000 8179 	beq.w	8012c2c <lv_font_get_bitmap_fmt_txt+0x370>
            if(tmp == NULL) return NULL;
 801293a:	2d00      	cmp	r5, #0
 801293c:	d0e4      	beq.n	8012908 <lv_font_get_bitmap_fmt_txt+0x4c>
            LV_GC_ROOT(_lv_font_decompr_buf) = tmp;
 801293e:	4ba8      	ldr	r3, [pc, #672]	; (8012be0 <lv_font_get_bitmap_fmt_txt+0x324>)
 8012940:	601d      	str	r5, [r3, #0]
        bool prefilter = fdsc->bitmap_format == LV_FONT_FMT_TXT_COMPRESSED ? true : false;
 8012942:	7cf9      	ldrb	r1, [r7, #19]
    rle_state = RLE_STATE_SINGLE;
 8012944:	2400      	movs	r4, #0
        decompress(&fdsc->glyph_bitmap[gdsc->bitmap_index], LV_GC_ROOT(_lv_font_decompr_buf), gdsc->box_w, gdsc->box_h,
 8012946:	683a      	ldr	r2, [r7, #0]
 8012948:	f859 3038 	ldr.w	r3, [r9, r8, lsl #3]
                   (uint8_t)fdsc->bpp, prefilter);
 801294c:	f3c1 0743 	ubfx	r7, r1, #1, #4
        decompress(&fdsc->glyph_bitmap[gdsc->bitmap_index], LV_GC_ROOT(_lv_font_decompr_buf), gdsc->box_w, gdsc->box_h,
 8012950:	f896 9004 	ldrb.w	r9, [r6, #4]
    if(bpp == 3) wr_size = 4;
 8012954:	2f03      	cmp	r7, #3
        decompress(&fdsc->glyph_bitmap[gdsc->bitmap_index], LV_GC_ROOT(_lv_font_decompr_buf), gdsc->box_w, gdsc->box_h,
 8012956:	f3c3 0313 	ubfx	r3, r3, #0, #20
                   (uint8_t)fdsc->bpp, prefilter);
 801295a:	9709      	str	r7, [sp, #36]	; 0x24
    uint8_t * line_buf1 = _lv_mem_buf_get(w);
 801295c:	4648      	mov	r0, r9
        decompress(&fdsc->glyph_bitmap[gdsc->bitmap_index], LV_GC_ROOT(_lv_font_decompr_buf), gdsc->box_w, gdsc->box_h,
 801295e:	4413      	add	r3, r2
                   (uint8_t)fdsc->bpp, prefilter);
 8012960:	463a      	mov	r2, r7
    if(bpp == 3) wr_size = 4;
 8012962:	bf08      	it	eq
 8012964:	2704      	moveq	r7, #4
 8012966:	9700      	str	r7, [sp, #0]
        bool prefilter = fdsc->bitmap_format == LV_FONT_FMT_TXT_COMPRESSED ? true : false;
 8012968:	f001 07c0 	and.w	r7, r1, #192	; 0xc0
        decompress(&fdsc->glyph_bitmap[gdsc->bitmap_index], LV_GC_ROOT(_lv_font_decompr_buf), gdsc->box_w, gdsc->box_h,
 801296c:	fa0f f189 	sxth.w	r1, r9
        bool prefilter = fdsc->bitmap_format == LV_FONT_FMT_TXT_COMPRESSED ? true : false;
 8012970:	970f      	str	r7, [sp, #60]	; 0x3c
        decompress(&fdsc->glyph_bitmap[gdsc->bitmap_index], LV_GC_ROOT(_lv_font_decompr_buf), gdsc->box_w, gdsc->box_h,
 8012972:	9108      	str	r1, [sp, #32]
    rle_in = in;
 8012974:	499b      	ldr	r1, [pc, #620]	; (8012be4 <lv_font_get_bitmap_fmt_txt+0x328>)
 8012976:	600b      	str	r3, [r1, #0]
    rle_bpp = bpp;
 8012978:	4b9b      	ldr	r3, [pc, #620]	; (8012be8 <lv_font_get_bitmap_fmt_txt+0x32c>)
 801297a:	701a      	strb	r2, [r3, #0]
        decompress(&fdsc->glyph_bitmap[gdsc->bitmap_index], LV_GC_ROOT(_lv_font_decompr_buf), gdsc->box_w, gdsc->box_h,
 801297c:	7973      	ldrb	r3, [r6, #5]
 801297e:	930d      	str	r3, [sp, #52]	; 0x34
    rle_state = RLE_STATE_SINGLE;
 8012980:	4b9a      	ldr	r3, [pc, #616]	; (8012bec <lv_font_get_bitmap_fmt_txt+0x330>)
 8012982:	701c      	strb	r4, [r3, #0]
    rle_rdp = 0;
 8012984:	4b9a      	ldr	r3, [pc, #616]	; (8012bf0 <lv_font_get_bitmap_fmt_txt+0x334>)
 8012986:	601c      	str	r4, [r3, #0]
    rle_prev_v = 0;
 8012988:	4b9a      	ldr	r3, [pc, #616]	; (8012bf4 <lv_font_get_bitmap_fmt_txt+0x338>)
 801298a:	701c      	strb	r4, [r3, #0]
    rle_cnt = 0;
 801298c:	4b9a      	ldr	r3, [pc, #616]	; (8012bf8 <lv_font_get_bitmap_fmt_txt+0x33c>)
 801298e:	701c      	strb	r4, [r3, #0]
    uint8_t * line_buf1 = _lv_mem_buf_get(w);
 8012990:	f002 fdca 	bl	8015528 <_lv_mem_buf_get>
    if(prefilter) {
 8012994:	2f40      	cmp	r7, #64	; 0x40
    uint8_t * line_buf1 = _lv_mem_buf_get(w);
 8012996:	9003      	str	r0, [sp, #12]
    if(prefilter) {
 8012998:	f000 855c 	beq.w	8013454 <lv_font_get_bitmap_fmt_txt+0xb98>
    uint8_t * line_buf2 = NULL;
 801299c:	940e      	str	r4, [sp, #56]	; 0x38
    for(i = 0; i < w; i++) {
 801299e:	9b08      	ldr	r3, [sp, #32]
 80129a0:	2b00      	cmp	r3, #0
 80129a2:	f000 858f 	beq.w	80134c4 <lv_font_get_bitmap_fmt_txt+0xc08>
            ret = get_bits(rle_in, rle_rdp, rle_bpp);
 80129a6:	4b90      	ldr	r3, [pc, #576]	; (8012be8 <lv_font_get_bitmap_fmt_txt+0x32c>)
 80129a8:	f109 32ff 	add.w	r2, r9, #4294967295
 80129ac:	9903      	ldr	r1, [sp, #12]
    if(bit_pos + len >= 8) {
 80129ae:	2000      	movs	r0, #0
            ret = get_bits(rle_in, rle_rdp, rle_bpp);
 80129b0:	f893 e000 	ldrb.w	lr, [r3]
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
 80129b4:	2301      	movs	r3, #1
 80129b6:	b294      	uxth	r4, r2
 80129b8:	f101 3bff 	add.w	fp, r1, #4294967295
 80129bc:	fa03 f30e 	lsl.w	r3, r3, lr
 80129c0:	950a      	str	r5, [sp, #40]	; 0x28
 80129c2:	4421      	add	r1, r4
 80129c4:	9404      	str	r4, [sp, #16]
 80129c6:	3b01      	subs	r3, #1
 80129c8:	f10e 32ff 	add.w	r2, lr, #4294967295
 80129cc:	9101      	str	r1, [sp, #4]
    if(bit_pos + len >= 8) {
 80129ce:	4680      	mov	r8, r0
 80129d0:	b25b      	sxtb	r3, r3
 80129d2:	4684      	mov	ip, r0
 80129d4:	4605      	mov	r5, r0
 80129d6:	f8cd b018 	str.w	fp, [sp, #24]
 80129da:	9302      	str	r3, [sp, #8]
            ret = get_bits(rle_in, rle_rdp, rle_bpp);
 80129dc:	4b81      	ldr	r3, [pc, #516]	; (8012be4 <lv_font_get_bitmap_fmt_txt+0x328>)
 80129de:	f8cd 901c 	str.w	r9, [sp, #28]
 80129e2:	681f      	ldr	r7, [r3, #0]
 80129e4:	4b84      	ldr	r3, [pc, #528]	; (8012bf8 <lv_font_get_bitmap_fmt_txt+0x33c>)
 80129e6:	f8cd b014 	str.w	fp, [sp, #20]
 80129ea:	7819      	ldrb	r1, [r3, #0]
 80129ec:	4b7f      	ldr	r3, [pc, #508]	; (8012bec <lv_font_get_bitmap_fmt_txt+0x330>)
 80129ee:	781e      	ldrb	r6, [r3, #0]
 80129f0:	4b80      	ldr	r3, [pc, #512]	; (8012bf4 <lv_font_get_bitmap_fmt_txt+0x338>)
 80129f2:	f893 a000 	ldrb.w	sl, [r3]
 80129f6:	4b7e      	ldr	r3, [pc, #504]	; (8012bf0 <lv_font_get_bitmap_fmt_txt+0x334>)
 80129f8:	681c      	ldr	r4, [r3, #0]
    if(rle_state == RLE_STATE_SINGLE) {
 80129fa:	2e00      	cmp	r6, #0
 80129fc:	f000 8121 	beq.w	8012c42 <lv_font_get_bitmap_fmt_txt+0x386>
    else if(rle_state == RLE_STATE_REPEATE) {
 8012a00:	2e01      	cmp	r6, #1
 8012a02:	f000 8169 	beq.w	8012cd8 <lv_font_get_bitmap_fmt_txt+0x41c>
    else if(rle_state == RLE_STATE_COUNTER) {
 8012a06:	2e02      	cmp	r6, #2
 8012a08:	f000 8460 	beq.w	80132cc <lv_font_get_bitmap_fmt_txt+0xa10>
    uint8_t ret = 0;
 8012a0c:	2300      	movs	r3, #0
        out[i] = rle_next();
 8012a0e:	f80b 3f01 	strb.w	r3, [fp, #1]!
    for(i = 0; i < w; i++) {
 8012a12:	9b01      	ldr	r3, [sp, #4]
 8012a14:	455b      	cmp	r3, fp
 8012a16:	d1f0      	bne.n	80129fa <lv_font_get_bitmap_fmt_txt+0x13e>
 8012a18:	462b      	mov	r3, r5
 8012a1a:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8012a1e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8012a20:	f8dd b014 	ldr.w	fp, [sp, #20]
 8012a24:	b10b      	cbz	r3, 8012a2a <lv_font_get_bitmap_fmt_txt+0x16e>
 8012a26:	4b71      	ldr	r3, [pc, #452]	; (8012bec <lv_font_get_bitmap_fmt_txt+0x330>)
 8012a28:	701e      	strb	r6, [r3, #0]
 8012a2a:	f1bc 0f00 	cmp.w	ip, #0
 8012a2e:	d001      	beq.n	8012a34 <lv_font_get_bitmap_fmt_txt+0x178>
 8012a30:	4b6f      	ldr	r3, [pc, #444]	; (8012bf0 <lv_font_get_bitmap_fmt_txt+0x334>)
 8012a32:	601c      	str	r4, [r3, #0]
 8012a34:	f1b8 0f00 	cmp.w	r8, #0
 8012a38:	d002      	beq.n	8012a40 <lv_font_get_bitmap_fmt_txt+0x184>
 8012a3a:	4b6e      	ldr	r3, [pc, #440]	; (8012bf4 <lv_font_get_bitmap_fmt_txt+0x338>)
 8012a3c:	f883 a000 	strb.w	sl, [r3]
 8012a40:	b108      	cbz	r0, 8012a46 <lv_font_get_bitmap_fmt_txt+0x18a>
 8012a42:	4b6d      	ldr	r3, [pc, #436]	; (8012bf8 <lv_font_get_bitmap_fmt_txt+0x33c>)
 8012a44:	7019      	strb	r1, [r3, #0]
 8012a46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012a48:	2a03      	cmp	r2, #3
 8012a4a:	f000 84e6 	beq.w	801341a <lv_font_get_bitmap_fmt_txt+0xb5e>
 8012a4e:	f04f 33ff 	mov.w	r3, #4294967295
 8012a52:	2600      	movs	r6, #0
 8012a54:	f1c2 0708 	rsb	r7, r2, #8
 8012a58:	4093      	lsls	r3, r2
 8012a5a:	f063 0cff 	orn	ip, r3, #255	; 0xff
    bit_pos = bit_pos & 0x7;
 8012a5e:	f006 0207 	and.w	r2, r6, #7
    out[byte_pos] &= ((~bit_mask) << bit_pos);
 8012a62:	f3c6 00cf 	ubfx	r0, r6, #3, #16
        wrp += wr_size;
 8012a66:	9b00      	ldr	r3, [sp, #0]
    bit_pos = 8 - bit_pos - len;
 8012a68:	1aba      	subs	r2, r7, r2
    out[byte_pos] |= (val << bit_pos);
 8012a6a:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
    out[byte_pos] &= ((~bit_mask) << bit_pos);
 8012a6e:	5c2c      	ldrb	r4, [r5, r0]
        wrp += wr_size;
 8012a70:	441e      	add	r6, r3
    out[byte_pos] &= ((~bit_mask) << bit_pos);
 8012a72:	fa0c f302 	lsl.w	r3, ip, r2
    out[byte_pos] |= (val << bit_pos);
 8012a76:	fa01 f202 	lsl.w	r2, r1, r2
    out[byte_pos] &= ((~bit_mask) << bit_pos);
 8012a7a:	4023      	ands	r3, r4
    out[byte_pos] |= (val << bit_pos);
 8012a7c:	4313      	orrs	r3, r2
 8012a7e:	542b      	strb	r3, [r5, r0]
    for(x = 0; x < w; x++) {
 8012a80:	9b01      	ldr	r3, [sp, #4]
 8012a82:	455b      	cmp	r3, fp
 8012a84:	d1eb      	bne.n	8012a5e <lv_font_get_bitmap_fmt_txt+0x1a2>
 8012a86:	9b00      	ldr	r3, [sp, #0]
 8012a88:	9a04      	ldr	r2, [sp, #16]
 8012a8a:	fb02 3303 	mla	r3, r2, r3, r3
 8012a8e:	9301      	str	r3, [sp, #4]
    for(y = 1; y < h; y++) {
 8012a90:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012a92:	2b01      	cmp	r3, #1
 8012a94:	f340 80b2 	ble.w	8012bfc <lv_font_get_bitmap_fmt_txt+0x340>
            ret = get_bits(rle_in, rle_rdp, rle_bpp);
 8012a98:	4b53      	ldr	r3, [pc, #332]	; (8012be8 <lv_font_get_bitmap_fmt_txt+0x32c>)
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
 8012a9a:	2101      	movs	r1, #1
 8012a9c:	f109 30ff 	add.w	r0, r9, #4294967295
            ret = get_bits(rle_in, rle_rdp, rle_bpp);
 8012aa0:	4e50      	ldr	r6, [pc, #320]	; (8012be4 <lv_font_get_bitmap_fmt_txt+0x328>)
 8012aa2:	781c      	ldrb	r4, [r3, #0]
    if(bit_pos + len >= 8) {
 8012aa4:	f04f 0b00 	mov.w	fp, #0
 8012aa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012aaa:	b280      	uxth	r0, r0
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
 8012aac:	fa01 f204 	lsl.w	r2, r1, r4
    for(y = 1; y < h; y++) {
 8012ab0:	910a      	str	r1, [sp, #40]	; 0x28
 8012ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8012ab6:	9900      	ldr	r1, [sp, #0]
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
 8012ab8:	3a01      	subs	r2, #1
            ret = get_bits(rle_in, rle_rdp, rle_bpp);
 8012aba:	9410      	str	r4, [sp, #64]	; 0x40
 8012abc:	fb01 f100 	mul.w	r1, r1, r0
 8012ac0:	425b      	negs	r3, r3
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
 8012ac2:	b2d2      	uxtb	r2, r2
            ret = get_bits(rle_in, rle_rdp, rle_bpp);
 8012ac4:	6836      	ldr	r6, [r6, #0]
 8012ac6:	910b      	str	r1, [sp, #44]	; 0x2c
 8012ac8:	f063 03ff 	orn	r3, r3, #255	; 0xff
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
 8012acc:	9211      	str	r2, [sp, #68]	; 0x44
 8012ace:	4a4a      	ldr	r2, [pc, #296]	; (8012bf8 <lv_font_get_bitmap_fmt_txt+0x33c>)
 8012ad0:	9313      	str	r3, [sp, #76]	; 0x4c
 8012ad2:	1e63      	subs	r3, r4, #1
 8012ad4:	7812      	ldrb	r2, [r2, #0]
 8012ad6:	9012      	str	r0, [sp, #72]	; 0x48
 8012ad8:	9206      	str	r2, [sp, #24]
 8012ada:	4a45      	ldr	r2, [pc, #276]	; (8012bf0 <lv_font_get_bitmap_fmt_txt+0x334>)
    if(bit_pos + len >= 8) {
 8012adc:	f8cd b01c 	str.w	fp, [sp, #28]
 8012ae0:	6811      	ldr	r1, [r2, #0]
 8012ae2:	4a44      	ldr	r2, [pc, #272]	; (8012bf4 <lv_font_get_bitmap_fmt_txt+0x338>)
 8012ae4:	f8cd b010 	str.w	fp, [sp, #16]
 8012ae8:	7812      	ldrb	r2, [r2, #0]
 8012aea:	f8cd b008 	str.w	fp, [sp, #8]
 8012aee:	9205      	str	r2, [sp, #20]
 8012af0:	4a3e      	ldr	r2, [pc, #248]	; (8012bec <lv_font_get_bitmap_fmt_txt+0x330>)
 8012af2:	7814      	ldrb	r4, [r2, #0]
        if(prefilter) {
 8012af4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012af6:	2a40      	cmp	r2, #64	; 0x40
    for(i = 0; i < w; i++) {
 8012af8:	9a08      	ldr	r2, [sp, #32]
        if(prefilter) {
 8012afa:	f000 81dd 	beq.w	8012eb8 <lv_font_get_bitmap_fmt_txt+0x5fc>
    for(i = 0; i < w; i++) {
 8012afe:	2a00      	cmp	r2, #0
 8012b00:	d053      	beq.n	8012baa <lv_font_get_bitmap_fmt_txt+0x2ee>
 8012b02:	9a03      	ldr	r2, [sp, #12]
 8012b04:	9812      	ldr	r0, [sp, #72]	; 0x48
 8012b06:	1e57      	subs	r7, r2, #1
 8012b08:	f99d 9044 	ldrsb.w	r9, [sp, #68]	; 0x44
 8012b0c:	eb02 0a00 	add.w	sl, r2, r0
 8012b10:	f8dd e010 	ldr.w	lr, [sp, #16]
 8012b14:	46bc      	mov	ip, r7
 8012b16:	950c      	str	r5, [sp, #48]	; 0x30
 8012b18:	9714      	str	r7, [sp, #80]	; 0x50
 8012b1a:	f8cd 9010 	str.w	r9, [sp, #16]
 8012b1e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8012b20:	9807      	ldr	r0, [sp, #28]
 8012b22:	9f05      	ldr	r7, [sp, #20]
 8012b24:	f8dd 9018 	ldr.w	r9, [sp, #24]
    if(rle_state == RLE_STATE_SINGLE) {
 8012b28:	2c00      	cmp	r4, #0
 8012b2a:	f000 8122 	beq.w	8012d72 <lv_font_get_bitmap_fmt_txt+0x4b6>
    else if(rle_state == RLE_STATE_REPEATE) {
 8012b2e:	2c01      	cmp	r4, #1
 8012b30:	f000 8168 	beq.w	8012e04 <lv_font_get_bitmap_fmt_txt+0x548>
    else if(rle_state == RLE_STATE_COUNTER) {
 8012b34:	2c02      	cmp	r4, #2
 8012b36:	f000 8300 	beq.w	801313a <lv_font_get_bitmap_fmt_txt+0x87e>
    uint8_t ret = 0;
 8012b3a:	2200      	movs	r2, #0
        out[i] = rle_next();
 8012b3c:	f80c 2f01 	strb.w	r2, [ip, #1]!
    for(i = 0; i < w; i++) {
 8012b40:	45e2      	cmp	sl, ip
 8012b42:	d1f1      	bne.n	8012b28 <lv_font_get_bitmap_fmt_txt+0x26c>
 8012b44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012b46:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012b48:	2a03      	cmp	r2, #3
 8012b4a:	e9cd e704 	strd	lr, r7, [sp, #16]
 8012b4e:	e9cd 9006 	strd	r9, r0, [sp, #24]
 8012b52:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8012b54:	f000 8397 	beq.w	8013286 <lv_font_get_bitmap_fmt_txt+0x9ca>
 8012b58:	9414      	str	r4, [sp, #80]	; 0x50
 8012b5a:	f1c2 0908 	rsb	r9, r2, #8
 8012b5e:	9315      	str	r3, [sp, #84]	; 0x54
 8012b60:	f8dd c004 	ldr.w	ip, [sp, #4]
 8012b64:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8012b66:	9b00      	ldr	r3, [sp, #0]
 8012b68:	910c      	str	r1, [sp, #48]	; 0x30
    bit_pos = bit_pos & 0x7;
 8012b6a:	f00c 0107 	and.w	r1, ip, #7
    out[byte_pos] &= ((~bit_mask) << bit_pos);
 8012b6e:	f3cc 0ecf 	ubfx	lr, ip, #3, #16
    out[byte_pos] |= (val << bit_pos);
 8012b72:	f817 0f01 	ldrb.w	r0, [r7, #1]!
                wrp += wr_size;
 8012b76:	449c      	add	ip, r3
    bit_pos = 8 - bit_pos - len;
 8012b78:	eba9 0101 	sub.w	r1, r9, r1
    out[byte_pos] &= ((~bit_mask) << bit_pos);
 8012b7c:	f815 800e 	ldrb.w	r8, [r5, lr]
            for(x = 0; x < w; x++) {
 8012b80:	45ba      	cmp	sl, r7
    out[byte_pos] &= ((~bit_mask) << bit_pos);
 8012b82:	fa04 f201 	lsl.w	r2, r4, r1
    out[byte_pos] |= (val << bit_pos);
 8012b86:	fa00 f101 	lsl.w	r1, r0, r1
    out[byte_pos] &= ((~bit_mask) << bit_pos);
 8012b8a:	ea02 0208 	and.w	r2, r2, r8
    out[byte_pos] |= (val << bit_pos);
 8012b8e:	ea42 0201 	orr.w	r2, r2, r1
 8012b92:	f805 200e 	strb.w	r2, [r5, lr]
            for(x = 0; x < w; x++) {
 8012b96:	d1e8      	bne.n	8012b6a <lv_font_get_bitmap_fmt_txt+0x2ae>
 8012b98:	990c      	ldr	r1, [sp, #48]	; 0x30
 8012b9a:	e9dd 4314 	ldrd	r4, r3, [sp, #80]	; 0x50
 8012b9e:	9800      	ldr	r0, [sp, #0]
 8012ba0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012ba2:	4402      	add	r2, r0
 8012ba4:	9801      	ldr	r0, [sp, #4]
 8012ba6:	4410      	add	r0, r2
 8012ba8:	9001      	str	r0, [sp, #4]
    for(y = 1; y < h; y++) {
 8012baa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012bac:	980d      	ldr	r0, [sp, #52]	; 0x34
 8012bae:	3201      	adds	r2, #1
 8012bb0:	b212      	sxth	r2, r2
 8012bb2:	4290      	cmp	r0, r2
 8012bb4:	920a      	str	r2, [sp, #40]	; 0x28
 8012bb6:	d19d      	bne.n	8012af4 <lv_font_get_bitmap_fmt_txt+0x238>
 8012bb8:	9b02      	ldr	r3, [sp, #8]
 8012bba:	b10b      	cbz	r3, 8012bc0 <lv_font_get_bitmap_fmt_txt+0x304>
 8012bbc:	4b0b      	ldr	r3, [pc, #44]	; (8012bec <lv_font_get_bitmap_fmt_txt+0x330>)
 8012bbe:	701c      	strb	r4, [r3, #0]
 8012bc0:	9b04      	ldr	r3, [sp, #16]
 8012bc2:	b10b      	cbz	r3, 8012bc8 <lv_font_get_bitmap_fmt_txt+0x30c>
 8012bc4:	4b0a      	ldr	r3, [pc, #40]	; (8012bf0 <lv_font_get_bitmap_fmt_txt+0x334>)
 8012bc6:	6019      	str	r1, [r3, #0]
 8012bc8:	9b07      	ldr	r3, [sp, #28]
 8012bca:	b113      	cbz	r3, 8012bd2 <lv_font_get_bitmap_fmt_txt+0x316>
 8012bcc:	4b09      	ldr	r3, [pc, #36]	; (8012bf4 <lv_font_get_bitmap_fmt_txt+0x338>)
 8012bce:	9a05      	ldr	r2, [sp, #20]
 8012bd0:	701a      	strb	r2, [r3, #0]
 8012bd2:	f1bb 0f00 	cmp.w	fp, #0
 8012bd6:	d011      	beq.n	8012bfc <lv_font_get_bitmap_fmt_txt+0x340>
 8012bd8:	4b07      	ldr	r3, [pc, #28]	; (8012bf8 <lv_font_get_bitmap_fmt_txt+0x33c>)
 8012bda:	9a06      	ldr	r2, [sp, #24]
 8012bdc:	701a      	strb	r2, [r3, #0]
 8012bde:	e00d      	b.n	8012bfc <lv_font_get_bitmap_fmt_txt+0x340>
 8012be0:	20020420 	.word	0x20020420
 8012be4:	20018134 	.word	0x20018134
 8012be8:	20018130 	.word	0x20018130
 8012bec:	20018140 	.word	0x20018140
 8012bf0:	2001813c 	.word	0x2001813c
 8012bf4:	20018138 	.word	0x20018138
 8012bf8:	20018131 	.word	0x20018131
    _lv_mem_buf_release(line_buf1);
 8012bfc:	9803      	ldr	r0, [sp, #12]
 8012bfe:	f002 f96b 	bl	8014ed8 <_lv_mem_buf_release>
    _lv_mem_buf_release(line_buf2);
 8012c02:	980e      	ldr	r0, [sp, #56]	; 0x38
 8012c04:	f002 f968 	bl	8014ed8 <_lv_mem_buf_release>
        return LV_GC_ROOT(_lv_font_decompr_buf);
 8012c08:	4ba9      	ldr	r3, [pc, #676]	; (8012eb0 <lv_font_get_bitmap_fmt_txt+0x5f4>)
 8012c0a:	6818      	ldr	r0, [r3, #0]
}
 8012c0c:	b017      	add	sp, #92	; 0x5c
 8012c0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(unicode_letter == '\t') unicode_letter = ' ';
 8012c12:	2120      	movs	r1, #32
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
 8012c14:	f850 7f10 	ldr.w	r7, [r0, #16]!
    if(letter == '\0') return 0;
 8012c18:	e659      	b.n	80128ce <lv_font_get_bitmap_fmt_txt+0x12>
        return &fdsc->glyph_bitmap[gdsc->bitmap_index];
 8012c1a:	f859 3030 	ldr.w	r3, [r9, r0, lsl #3]
 8012c1e:	6838      	ldr	r0, [r7, #0]
 8012c20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012c24:	4418      	add	r0, r3
}
 8012c26:	b017      	add	sp, #92	; 0x5c
 8012c28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            LV_ASSERT_MEM(tmp);
 8012c2c:	462a      	mov	r2, r5
 8012c2e:	48a1      	ldr	r0, [pc, #644]	; (8012eb4 <lv_font_get_bitmap_fmt_txt+0x5f8>)
 8012c30:	f001 fdce 	bl	80147d0 <lv_debug_log_error>
 8012c34:	e7fe      	b.n	8012c34 <lv_font_get_bitmap_fmt_txt+0x378>
                buf_size = (gsize + 3) >> 2;
 8012c36:	3403      	adds	r4, #3
 8012c38:	08a4      	lsrs	r4, r4, #2
                break;
 8012c3a:	e66b      	b.n	8012914 <lv_font_get_bitmap_fmt_txt+0x58>
                buf_size = (gsize + 7) >> 3;
 8012c3c:	3407      	adds	r4, #7
 8012c3e:	08e4      	lsrs	r4, r4, #3
                break;
 8012c40:	e668      	b.n	8012914 <lv_font_get_bitmap_fmt_txt+0x58>
    switch(len) {
 8012c42:	2a07      	cmp	r2, #7
 8012c44:	d83f      	bhi.n	8012cc6 <lv_font_get_bitmap_fmt_txt+0x40a>
 8012c46:	e8df f002 	tbb	[pc, r2]
 8012c4a:	042b      	.short	0x042b
 8012c4c:	3e3e4345 	.word	0x3e3e4345
 8012c50:	403e      	.short	0x403e
    if(rle_state == RLE_STATE_SINGLE) {
 8012c52:	2303      	movs	r3, #3
    bit_pos = bit_pos & 0x7;
 8012c54:	f004 0c07 	and.w	ip, r4, #7
    uint32_t byte_pos = bit_pos >> 3;
 8012c58:	ea4f 08d4 	mov.w	r8, r4, lsr #3
    if(bit_pos + len >= 8) {
 8012c5c:	44f4      	add	ip, lr
 8012c5e:	f1bc 0f07 	cmp.w	ip, #7
 8012c62:	d926      	bls.n	8012cb2 <lv_font_get_bitmap_fmt_txt+0x3f6>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
 8012c64:	eb07 0908 	add.w	r9, r7, r8
 8012c68:	f817 8008 	ldrb.w	r8, [r7, r8]
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
 8012c6c:	f1cc 0c10 	rsb	ip, ip, #16
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
 8012c70:	f899 9001 	ldrb.w	r9, [r9, #1]
 8012c74:	eb09 2808 	add.w	r8, r9, r8, lsl #8
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
 8012c78:	fa1f f888 	uxth.w	r8, r8
 8012c7c:	fa48 fc0c 	asr.w	ip, r8, ip
 8012c80:	ea03 030c 	and.w	r3, r3, ip
 8012c84:	b2db      	uxtb	r3, r3
        if(rle_rdp != 0 && rle_prev_v == ret) {
 8012c86:	b12c      	cbz	r4, 8012c94 <lv_font_get_bitmap_fmt_txt+0x3d8>
 8012c88:	4553      	cmp	r3, sl
 8012c8a:	d103      	bne.n	8012c94 <lv_font_get_bitmap_fmt_txt+0x3d8>
 8012c8c:	2001      	movs	r0, #1
            rle_cnt = 0;
 8012c8e:	2100      	movs	r1, #0
 8012c90:	4605      	mov	r5, r0
            rle_state = RLE_STATE_REPEATE;
 8012c92:	4606      	mov	r6, r0
        rle_rdp += rle_bpp;
 8012c94:	f04f 0801 	mov.w	r8, #1
 8012c98:	4474      	add	r4, lr
 8012c9a:	469a      	mov	sl, r3
 8012c9c:	46c4      	mov	ip, r8
 8012c9e:	e6b6      	b.n	8012a0e <lv_font_get_bitmap_fmt_txt+0x152>
    bit_pos = bit_pos & 0x7;
 8012ca0:	f004 0c07 	and.w	ip, r4, #7
    if(rle_state == RLE_STATE_SINGLE) {
 8012ca4:	2301      	movs	r3, #1
    uint32_t byte_pos = bit_pos >> 3;
 8012ca6:	ea4f 08d4 	mov.w	r8, r4, lsr #3
    if(bit_pos + len >= 8) {
 8012caa:	44f4      	add	ip, lr
 8012cac:	f1bc 0f07 	cmp.w	ip, #7
 8012cb0:	d8d8      	bhi.n	8012c64 <lv_font_get_bitmap_fmt_txt+0x3a8>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
 8012cb2:	f817 8008 	ldrb.w	r8, [r7, r8]
 8012cb6:	f1cc 0c08 	rsb	ip, ip, #8
 8012cba:	fa48 fc0c 	asr.w	ip, r8, ip
 8012cbe:	ea03 030c 	and.w	r3, r3, ip
 8012cc2:	b2db      	uxtb	r3, r3
 8012cc4:	e7df      	b.n	8012c86 <lv_font_get_bitmap_fmt_txt+0x3ca>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
 8012cc6:	9b02      	ldr	r3, [sp, #8]
 8012cc8:	e7c4      	b.n	8012c54 <lv_font_get_bitmap_fmt_txt+0x398>
            break;
 8012cca:	f04f 33ff 	mov.w	r3, #4294967295
 8012cce:	e7c1      	b.n	8012c54 <lv_font_get_bitmap_fmt_txt+0x398>
            break;
 8012cd0:	230f      	movs	r3, #15
 8012cd2:	e7bf      	b.n	8012c54 <lv_font_get_bitmap_fmt_txt+0x398>
            break;
 8012cd4:	2307      	movs	r3, #7
 8012cd6:	e7bd      	b.n	8012c54 <lv_font_get_bitmap_fmt_txt+0x398>
    bit_pos = bit_pos & 0x7;
 8012cd8:	f004 0307 	and.w	r3, r4, #7
    uint32_t byte_pos = bit_pos >> 3;
 8012cdc:	08e6      	lsrs	r6, r4, #3
    if(bit_pos + len >= 8) {
 8012cde:	2b07      	cmp	r3, #7
 8012ce0:	f103 0001 	add.w	r0, r3, #1
 8012ce4:	f040 8377 	bne.w	80133d6 <lv_font_get_bitmap_fmt_txt+0xb1a>
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
 8012ce8:	5dbe      	ldrb	r6, [r7, r6]
 8012cea:	f006 0601 	and.w	r6, r6, #1
        rle_cnt++;
 8012cee:	3101      	adds	r1, #1
        if(v == 1) {
 8012cf0:	2e01      	cmp	r6, #1
        rle_rdp += 1;
 8012cf2:	f104 0c01 	add.w	ip, r4, #1
        rle_cnt++;
 8012cf6:	b2c9      	uxtb	r1, r1
        if(v == 1) {
 8012cf8:	f000 8365 	beq.w	80133c6 <lv_font_get_bitmap_fmt_txt+0xb0a>
    switch(len) {
 8012cfc:	2a07      	cmp	r2, #7
 8012cfe:	f200 83bf 	bhi.w	8013480 <lv_font_get_bitmap_fmt_txt+0xbc4>
 8012d02:	e8df f012 	tbh	[pc, r2, lsl #1]
 8012d06:	0026      	.short	0x0026
 8012d08:	03bb0008 	.word	0x03bb0008
 8012d0c:	03bd03b9 	.word	0x03bd03b9
 8012d10:	03bd03bd 	.word	0x03bd03bd
 8012d14:	03b6      	.short	0x03b6
        if(v == 1) {
 8012d16:	2303      	movs	r3, #3
    bit_pos = bit_pos & 0x7;
 8012d18:	f00c 0007 	and.w	r0, ip, #7
    uint32_t byte_pos = bit_pos >> 3;
 8012d1c:	ea4f 04dc 	mov.w	r4, ip, lsr #3
    if(bit_pos + len >= 8) {
 8012d20:	4470      	add	r0, lr
 8012d22:	2807      	cmp	r0, #7
 8012d24:	d91d      	bls.n	8012d62 <lv_font_get_bitmap_fmt_txt+0x4a6>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
 8012d26:	eb07 0804 	add.w	r8, r7, r4
 8012d2a:	5d3c      	ldrb	r4, [r7, r4]
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
 8012d2c:	f1c0 0010 	rsb	r0, r0, #16
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
 8012d30:	f898 8001 	ldrb.w	r8, [r8, #1]
 8012d34:	eb08 2404 	add.w	r4, r8, r4, lsl #8
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
 8012d38:	b2a4      	uxth	r4, r4
 8012d3a:	fa44 f000 	asr.w	r0, r4, r0
 8012d3e:	4003      	ands	r3, r0
 8012d40:	b2db      	uxtb	r3, r3
            rle_rdp += rle_bpp;
 8012d42:	2001      	movs	r0, #1
 8012d44:	eb0c 040e 	add.w	r4, ip, lr
            rle_prev_v = ret;
 8012d48:	469a      	mov	sl, r3
            rle_rdp += rle_bpp;
 8012d4a:	4680      	mov	r8, r0
 8012d4c:	4684      	mov	ip, r0
 8012d4e:	4605      	mov	r5, r0
 8012d50:	e65d      	b.n	8012a0e <lv_font_get_bitmap_fmt_txt+0x152>
    bit_pos = bit_pos & 0x7;
 8012d52:	f00c 0007 	and.w	r0, ip, #7
        if(v == 1) {
 8012d56:	2301      	movs	r3, #1
    uint32_t byte_pos = bit_pos >> 3;
 8012d58:	ea4f 04dc 	mov.w	r4, ip, lsr #3
    if(bit_pos + len >= 8) {
 8012d5c:	4470      	add	r0, lr
 8012d5e:	2807      	cmp	r0, #7
 8012d60:	d8e1      	bhi.n	8012d26 <lv_font_get_bitmap_fmt_txt+0x46a>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
 8012d62:	5d3c      	ldrb	r4, [r7, r4]
 8012d64:	f1c0 0008 	rsb	r0, r0, #8
 8012d68:	fa44 f000 	asr.w	r0, r4, r0
 8012d6c:	4003      	ands	r3, r0
 8012d6e:	b2db      	uxtb	r3, r3
 8012d70:	e7e7      	b.n	8012d42 <lv_font_get_bitmap_fmt_txt+0x486>
    switch(len) {
 8012d72:	2b07      	cmp	r3, #7
 8012d74:	d83d      	bhi.n	8012df2 <lv_font_get_bitmap_fmt_txt+0x536>
 8012d76:	e8df f003 	tbb	[pc, r3]
 8012d7a:	042b      	.short	0x042b
 8012d7c:	3c3c4143 	.word	0x3c3c4143
 8012d80:	3e3c      	.short	0x3e3c
    if(rle_state == RLE_STATE_SINGLE) {
 8012d82:	2203      	movs	r2, #3
    bit_pos = bit_pos & 0x7;
 8012d84:	f001 0007 	and.w	r0, r1, #7
    uint32_t byte_pos = bit_pos >> 3;
 8012d88:	ea4f 0ed1 	mov.w	lr, r1, lsr #3
    if(bit_pos + len >= 8) {
 8012d8c:	4428      	add	r0, r5
 8012d8e:	2807      	cmp	r0, #7
 8012d90:	d926      	bls.n	8012de0 <lv_font_get_bitmap_fmt_txt+0x524>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
 8012d92:	eb06 080e 	add.w	r8, r6, lr
 8012d96:	f816 e00e 	ldrb.w	lr, [r6, lr]
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
 8012d9a:	f1c0 0010 	rsb	r0, r0, #16
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
 8012d9e:	f898 8001 	ldrb.w	r8, [r8, #1]
 8012da2:	eb08 2e0e 	add.w	lr, r8, lr, lsl #8
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
 8012da6:	fa1f fe8e 	uxth.w	lr, lr
 8012daa:	fa4e f000 	asr.w	r0, lr, r0
 8012dae:	4002      	ands	r2, r0
 8012db0:	b2d2      	uxtb	r2, r2
        if(rle_rdp != 0 && rle_prev_v == ret) {
 8012db2:	b141      	cbz	r1, 8012dc6 <lv_font_get_bitmap_fmt_txt+0x50a>
 8012db4:	42ba      	cmp	r2, r7
 8012db6:	d106      	bne.n	8012dc6 <lv_font_get_bitmap_fmt_txt+0x50a>
 8012db8:	f04f 0b01 	mov.w	fp, #1
            rle_cnt = 0;
 8012dbc:	f04f 0900 	mov.w	r9, #0
            rle_state = RLE_STATE_REPEATE;
 8012dc0:	465c      	mov	r4, fp
 8012dc2:	f8cd b008 	str.w	fp, [sp, #8]
        rle_rdp += rle_bpp;
 8012dc6:	2001      	movs	r0, #1
 8012dc8:	4429      	add	r1, r5
 8012dca:	4617      	mov	r7, r2
 8012dcc:	4686      	mov	lr, r0
 8012dce:	e6b5      	b.n	8012b3c <lv_font_get_bitmap_fmt_txt+0x280>
    bit_pos = bit_pos & 0x7;
 8012dd0:	f001 0007 	and.w	r0, r1, #7
    if(rle_state == RLE_STATE_SINGLE) {
 8012dd4:	2201      	movs	r2, #1
    uint32_t byte_pos = bit_pos >> 3;
 8012dd6:	ea4f 0ed1 	mov.w	lr, r1, lsr #3
    if(bit_pos + len >= 8) {
 8012dda:	4428      	add	r0, r5
 8012ddc:	2807      	cmp	r0, #7
 8012dde:	d8d8      	bhi.n	8012d92 <lv_font_get_bitmap_fmt_txt+0x4d6>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
 8012de0:	f816 e00e 	ldrb.w	lr, [r6, lr]
 8012de4:	f1c0 0008 	rsb	r0, r0, #8
 8012de8:	fa4e f000 	asr.w	r0, lr, r0
 8012dec:	4002      	ands	r2, r0
 8012dee:	b2d2      	uxtb	r2, r2
 8012df0:	e7df      	b.n	8012db2 <lv_font_get_bitmap_fmt_txt+0x4f6>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
 8012df2:	9a04      	ldr	r2, [sp, #16]
 8012df4:	e7c6      	b.n	8012d84 <lv_font_get_bitmap_fmt_txt+0x4c8>
            break;
 8012df6:	f04f 32ff 	mov.w	r2, #4294967295
 8012dfa:	e7c3      	b.n	8012d84 <lv_font_get_bitmap_fmt_txt+0x4c8>
            break;
 8012dfc:	220f      	movs	r2, #15
 8012dfe:	e7c1      	b.n	8012d84 <lv_font_get_bitmap_fmt_txt+0x4c8>
            break;
 8012e00:	2207      	movs	r2, #7
 8012e02:	e7bf      	b.n	8012d84 <lv_font_get_bitmap_fmt_txt+0x4c8>
    bit_pos = bit_pos & 0x7;
 8012e04:	f001 0207 	and.w	r2, r1, #7
    uint32_t byte_pos = bit_pos >> 3;
 8012e08:	ea4f 0ed1 	mov.w	lr, r1, lsr #3
    if(bit_pos + len >= 8) {
 8012e0c:	2a07      	cmp	r2, #7
 8012e0e:	f102 0401 	add.w	r4, r2, #1
 8012e12:	f040 81d8 	bne.w	80131c6 <lv_font_get_bitmap_fmt_txt+0x90a>
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
 8012e16:	f816 400e 	ldrb.w	r4, [r6, lr]
        rle_cnt++;
 8012e1a:	f109 0201 	add.w	r2, r9, #1
        rle_rdp += 1;
 8012e1e:	f101 0e01 	add.w	lr, r1, #1
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
 8012e22:	f004 0401 	and.w	r4, r4, #1
        rle_cnt++;
 8012e26:	fa5f f982 	uxtb.w	r9, r2
        if(v == 1) {
 8012e2a:	2c01      	cmp	r4, #1
 8012e2c:	f000 81dc 	beq.w	80131e8 <lv_font_get_bitmap_fmt_txt+0x92c>
    switch(len) {
 8012e30:	2b07      	cmp	r3, #7
 8012e32:	d833      	bhi.n	8012e9c <lv_font_get_bitmap_fmt_txt+0x5e0>
 8012e34:	e8df f003 	tbb	[pc, r3]
 8012e38:	37390422 	.word	0x37390422
 8012e3c:	34323232 	.word	0x34323232
        if(v == 1) {
 8012e40:	2203      	movs	r2, #3
    bit_pos = bit_pos & 0x7;
 8012e42:	f00e 0107 	and.w	r1, lr, #7
    uint32_t byte_pos = bit_pos >> 3;
 8012e46:	ea4f 00de 	mov.w	r0, lr, lsr #3
    if(bit_pos + len >= 8) {
 8012e4a:	4429      	add	r1, r5
 8012e4c:	2907      	cmp	r1, #7
 8012e4e:	d91d      	bls.n	8012e8c <lv_font_get_bitmap_fmt_txt+0x5d0>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
 8012e50:	1837      	adds	r7, r6, r0
 8012e52:	5c30      	ldrb	r0, [r6, r0]
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
 8012e54:	f1c1 0110 	rsb	r1, r1, #16
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
 8012e58:	787f      	ldrb	r7, [r7, #1]
 8012e5a:	eb07 2000 	add.w	r0, r7, r0, lsl #8
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
 8012e5e:	b280      	uxth	r0, r0
 8012e60:	fa40 f101 	asr.w	r1, r0, r1
 8012e64:	400a      	ands	r2, r1
 8012e66:	b2d2      	uxtb	r2, r2
            rle_rdp += rle_bpp;
 8012e68:	f04f 0b01 	mov.w	fp, #1
 8012e6c:	eb0e 0105 	add.w	r1, lr, r5
            rle_prev_v = ret;
 8012e70:	4617      	mov	r7, r2
            rle_rdp += rle_bpp;
 8012e72:	4658      	mov	r0, fp
 8012e74:	46de      	mov	lr, fp
 8012e76:	f8cd b008 	str.w	fp, [sp, #8]
 8012e7a:	e65f      	b.n	8012b3c <lv_font_get_bitmap_fmt_txt+0x280>
    bit_pos = bit_pos & 0x7;
 8012e7c:	f00e 0107 	and.w	r1, lr, #7
        if(v == 1) {
 8012e80:	2201      	movs	r2, #1
    uint32_t byte_pos = bit_pos >> 3;
 8012e82:	ea4f 00de 	mov.w	r0, lr, lsr #3
    if(bit_pos + len >= 8) {
 8012e86:	4429      	add	r1, r5
 8012e88:	2907      	cmp	r1, #7
 8012e8a:	d8e1      	bhi.n	8012e50 <lv_font_get_bitmap_fmt_txt+0x594>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
 8012e8c:	5c30      	ldrb	r0, [r6, r0]
 8012e8e:	f1c1 0108 	rsb	r1, r1, #8
 8012e92:	fa40 f101 	asr.w	r1, r0, r1
 8012e96:	400a      	ands	r2, r1
 8012e98:	b2d2      	uxtb	r2, r2
 8012e9a:	e7e5      	b.n	8012e68 <lv_font_get_bitmap_fmt_txt+0x5ac>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
 8012e9c:	9a04      	ldr	r2, [sp, #16]
 8012e9e:	e7d0      	b.n	8012e42 <lv_font_get_bitmap_fmt_txt+0x586>
            break;
 8012ea0:	f04f 32ff 	mov.w	r2, #4294967295
 8012ea4:	e7cd      	b.n	8012e42 <lv_font_get_bitmap_fmt_txt+0x586>
            break;
 8012ea6:	220f      	movs	r2, #15
 8012ea8:	e7cb      	b.n	8012e42 <lv_font_get_bitmap_fmt_txt+0x586>
            break;
 8012eaa:	2207      	movs	r2, #7
 8012eac:	e7c9      	b.n	8012e42 <lv_font_get_bitmap_fmt_txt+0x586>
 8012eae:	bf00      	nop
 8012eb0:	20020420 	.word	0x20020420
 8012eb4:	0801e1c4 	.word	0x0801e1c4
    for(i = 0; i < w; i++) {
 8012eb8:	2a00      	cmp	r2, #0
 8012eba:	f43f ae76 	beq.w	8012baa <lv_font_get_bitmap_fmt_txt+0x2ee>
 8012ebe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012ec0:	9812      	ldr	r0, [sp, #72]	; 0x48
 8012ec2:	1e57      	subs	r7, r2, #1
 8012ec4:	f99d 9044 	ldrsb.w	r9, [sp, #68]	; 0x44
 8012ec8:	4402      	add	r2, r0
 8012eca:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8012ece:	46bc      	mov	ip, r7
 8012ed0:	9514      	str	r5, [sp, #80]	; 0x50
 8012ed2:	9715      	str	r7, [sp, #84]	; 0x54
 8012ed4:	4696      	mov	lr, r2
 8012ed6:	f8cd 9010 	str.w	r9, [sp, #16]
 8012eda:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8012edc:	9f05      	ldr	r7, [sp, #20]
 8012ede:	9807      	ldr	r0, [sp, #28]
 8012ee0:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8012ee4:	920c      	str	r2, [sp, #48]	; 0x30
    if(rle_state == RLE_STATE_SINGLE) {
 8012ee6:	2c00      	cmp	r4, #0
 8012ee8:	d043      	beq.n	8012f72 <lv_font_get_bitmap_fmt_txt+0x6b6>
    else if(rle_state == RLE_STATE_REPEATE) {
 8012eea:	2c01      	cmp	r4, #1
 8012eec:	f000 808a 	beq.w	8013004 <lv_font_get_bitmap_fmt_txt+0x748>
    else if(rle_state == RLE_STATE_COUNTER) {
 8012ef0:	2c02      	cmp	r4, #2
 8012ef2:	f000 80dc 	beq.w	80130ae <lv_font_get_bitmap_fmt_txt+0x7f2>
    uint8_t ret = 0;
 8012ef6:	2200      	movs	r2, #0
        out[i] = rle_next();
 8012ef8:	f80c 2f01 	strb.w	r2, [ip, #1]!
    for(i = 0; i < w; i++) {
 8012efc:	45e6      	cmp	lr, ip
 8012efe:	d1f2      	bne.n	8012ee6 <lv_font_get_bitmap_fmt_txt+0x62a>
 8012f00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012f02:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8012f04:	2a03      	cmp	r2, #3
 8012f06:	f8cd 9018 	str.w	r9, [sp, #24]
 8012f0a:	9007      	str	r0, [sp, #28]
 8012f0c:	e9cd 8704 	strd	r8, r7, [sp, #16]
 8012f10:	9f15      	ldr	r7, [sp, #84]	; 0x54
 8012f12:	f000 818c 	beq.w	801322e <lv_font_get_bitmap_fmt_txt+0x972>
 8012f16:	9803      	ldr	r0, [sp, #12]
 8012f18:	f1c2 0908 	rsb	r9, r2, #8
 8012f1c:	f8dd c004 	ldr.w	ip, [sp, #4]
 8012f20:	f100 3eff 	add.w	lr, r0, #4294967295
 8012f24:	e9cd 1414 	strd	r1, r4, [sp, #80]	; 0x50
 8012f28:	990c      	ldr	r1, [sp, #48]	; 0x30
 8012f2a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8012f2c:	930c      	str	r3, [sp, #48]	; 0x30
 8012f2e:	9b00      	ldr	r3, [sp, #0]
                line_buf1[x] = line_buf2[x] ^ line_buf1[x];
 8012f30:	f817 0f01 	ldrb.w	r0, [r7, #1]!
    bit_pos = bit_pos & 0x7;
 8012f34:	f00c 0a07 	and.w	sl, ip, #7
                line_buf1[x] = line_buf2[x] ^ line_buf1[x];
 8012f38:	f81e 2f01 	ldrb.w	r2, [lr, #1]!
    out[byte_pos] &= ((~bit_mask) << bit_pos);
 8012f3c:	f3cc 08cf 	ubfx	r8, ip, #3, #16
    bit_pos = 8 - bit_pos - len;
 8012f40:	eba9 0a0a 	sub.w	sl, r9, sl
            for(x = 0; x < w; x++) {
 8012f44:	428f      	cmp	r7, r1
                line_buf1[x] = line_buf2[x] ^ line_buf1[x];
 8012f46:	ea82 0200 	eor.w	r2, r2, r0
                wrp += wr_size;
 8012f4a:	449c      	add	ip, r3
    out[byte_pos] &= ((~bit_mask) << bit_pos);
 8012f4c:	fa04 f00a 	lsl.w	r0, r4, sl
                line_buf1[x] = line_buf2[x] ^ line_buf1[x];
 8012f50:	f88e 2000 	strb.w	r2, [lr]
    out[byte_pos] |= (val << bit_pos);
 8012f54:	fa02 f20a 	lsl.w	r2, r2, sl
    out[byte_pos] &= ((~bit_mask) << bit_pos);
 8012f58:	f815 a008 	ldrb.w	sl, [r5, r8]
 8012f5c:	ea00 000a 	and.w	r0, r0, sl
    out[byte_pos] |= (val << bit_pos);
 8012f60:	ea42 0200 	orr.w	r2, r2, r0
 8012f64:	f805 2008 	strb.w	r2, [r5, r8]
            for(x = 0; x < w; x++) {
 8012f68:	d1e2      	bne.n	8012f30 <lv_font_get_bitmap_fmt_txt+0x674>
 8012f6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012f6c:	e9dd 1414 	ldrd	r1, r4, [sp, #80]	; 0x50
 8012f70:	e615      	b.n	8012b9e <lv_font_get_bitmap_fmt_txt+0x2e2>
    switch(len) {
 8012f72:	2b07      	cmp	r3, #7
 8012f74:	d83d      	bhi.n	8012ff2 <lv_font_get_bitmap_fmt_txt+0x736>
 8012f76:	e8df f003 	tbb	[pc, r3]
 8012f7a:	042b      	.short	0x042b
 8012f7c:	3c3c4143 	.word	0x3c3c4143
 8012f80:	3e3c      	.short	0x3e3c
    if(rle_state == RLE_STATE_SINGLE) {
 8012f82:	2203      	movs	r2, #3
    bit_pos = bit_pos & 0x7;
 8012f84:	f001 0007 	and.w	r0, r1, #7
    uint32_t byte_pos = bit_pos >> 3;
 8012f88:	ea4f 08d1 	mov.w	r8, r1, lsr #3
    if(bit_pos + len >= 8) {
 8012f8c:	4428      	add	r0, r5
 8012f8e:	2807      	cmp	r0, #7
 8012f90:	d926      	bls.n	8012fe0 <lv_font_get_bitmap_fmt_txt+0x724>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
 8012f92:	eb06 0a08 	add.w	sl, r6, r8
 8012f96:	f816 8008 	ldrb.w	r8, [r6, r8]
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
 8012f9a:	f1c0 0010 	rsb	r0, r0, #16
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
 8012f9e:	f89a a001 	ldrb.w	sl, [sl, #1]
 8012fa2:	eb0a 2808 	add.w	r8, sl, r8, lsl #8
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
 8012fa6:	fa1f f888 	uxth.w	r8, r8
 8012faa:	fa48 f000 	asr.w	r0, r8, r0
 8012fae:	4002      	ands	r2, r0
 8012fb0:	b2d2      	uxtb	r2, r2
        if(rle_rdp != 0 && rle_prev_v == ret) {
 8012fb2:	b141      	cbz	r1, 8012fc6 <lv_font_get_bitmap_fmt_txt+0x70a>
 8012fb4:	42ba      	cmp	r2, r7
 8012fb6:	d106      	bne.n	8012fc6 <lv_font_get_bitmap_fmt_txt+0x70a>
 8012fb8:	f04f 0b01 	mov.w	fp, #1
            rle_cnt = 0;
 8012fbc:	f04f 0900 	mov.w	r9, #0
            rle_state = RLE_STATE_REPEATE;
 8012fc0:	465c      	mov	r4, fp
 8012fc2:	f8cd b008 	str.w	fp, [sp, #8]
        rle_rdp += rle_bpp;
 8012fc6:	2001      	movs	r0, #1
 8012fc8:	4429      	add	r1, r5
 8012fca:	4617      	mov	r7, r2
 8012fcc:	4680      	mov	r8, r0
 8012fce:	e793      	b.n	8012ef8 <lv_font_get_bitmap_fmt_txt+0x63c>
    bit_pos = bit_pos & 0x7;
 8012fd0:	f001 0007 	and.w	r0, r1, #7
    if(rle_state == RLE_STATE_SINGLE) {
 8012fd4:	2201      	movs	r2, #1
    uint32_t byte_pos = bit_pos >> 3;
 8012fd6:	ea4f 08d1 	mov.w	r8, r1, lsr #3
    if(bit_pos + len >= 8) {
 8012fda:	4428      	add	r0, r5
 8012fdc:	2807      	cmp	r0, #7
 8012fde:	d8d8      	bhi.n	8012f92 <lv_font_get_bitmap_fmt_txt+0x6d6>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
 8012fe0:	f816 8008 	ldrb.w	r8, [r6, r8]
 8012fe4:	f1c0 0008 	rsb	r0, r0, #8
 8012fe8:	fa48 f000 	asr.w	r0, r8, r0
 8012fec:	4002      	ands	r2, r0
 8012fee:	b2d2      	uxtb	r2, r2
 8012ff0:	e7df      	b.n	8012fb2 <lv_font_get_bitmap_fmt_txt+0x6f6>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
 8012ff2:	9a04      	ldr	r2, [sp, #16]
 8012ff4:	e7c6      	b.n	8012f84 <lv_font_get_bitmap_fmt_txt+0x6c8>
            break;
 8012ff6:	f04f 32ff 	mov.w	r2, #4294967295
 8012ffa:	e7c3      	b.n	8012f84 <lv_font_get_bitmap_fmt_txt+0x6c8>
            break;
 8012ffc:	220f      	movs	r2, #15
 8012ffe:	e7c1      	b.n	8012f84 <lv_font_get_bitmap_fmt_txt+0x6c8>
            break;
 8013000:	2207      	movs	r2, #7
 8013002:	e7bf      	b.n	8012f84 <lv_font_get_bitmap_fmt_txt+0x6c8>
    bit_pos = bit_pos & 0x7;
 8013004:	f001 0207 	and.w	r2, r1, #7
    uint32_t byte_pos = bit_pos >> 3;
 8013008:	ea4f 08d1 	mov.w	r8, r1, lsr #3
    if(bit_pos + len >= 8) {
 801300c:	2a07      	cmp	r2, #7
 801300e:	f102 0401 	add.w	r4, r2, #1
 8013012:	f040 80f2 	bne.w	80131fa <lv_font_get_bitmap_fmt_txt+0x93e>
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
 8013016:	f816 4008 	ldrb.w	r4, [r6, r8]
        rle_cnt++;
 801301a:	f109 0201 	add.w	r2, r9, #1
        rle_rdp += 1;
 801301e:	f101 0801 	add.w	r8, r1, #1
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
 8013022:	f004 0401 	and.w	r4, r4, #1
        rle_cnt++;
 8013026:	fa5f f982 	uxtb.w	r9, r2
        if(v == 1) {
 801302a:	2c01      	cmp	r4, #1
 801302c:	f000 80f6 	beq.w	801321c <lv_font_get_bitmap_fmt_txt+0x960>
    switch(len) {
 8013030:	2b07      	cmp	r3, #7
 8013032:	d833      	bhi.n	801309c <lv_font_get_bitmap_fmt_txt+0x7e0>
 8013034:	e8df f003 	tbb	[pc, r3]
 8013038:	37390422 	.word	0x37390422
 801303c:	34323232 	.word	0x34323232
        if(v == 1) {
 8013040:	2203      	movs	r2, #3
    bit_pos = bit_pos & 0x7;
 8013042:	f008 0107 	and.w	r1, r8, #7
    uint32_t byte_pos = bit_pos >> 3;
 8013046:	ea4f 00d8 	mov.w	r0, r8, lsr #3
    if(bit_pos + len >= 8) {
 801304a:	4429      	add	r1, r5
 801304c:	2907      	cmp	r1, #7
 801304e:	d91d      	bls.n	801308c <lv_font_get_bitmap_fmt_txt+0x7d0>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
 8013050:	1837      	adds	r7, r6, r0
 8013052:	5c30      	ldrb	r0, [r6, r0]
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
 8013054:	f1c1 0110 	rsb	r1, r1, #16
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
 8013058:	787f      	ldrb	r7, [r7, #1]
 801305a:	eb07 2000 	add.w	r0, r7, r0, lsl #8
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
 801305e:	b280      	uxth	r0, r0
 8013060:	fa40 f101 	asr.w	r1, r0, r1
 8013064:	400a      	ands	r2, r1
 8013066:	b2d2      	uxtb	r2, r2
            rle_rdp += rle_bpp;
 8013068:	f04f 0b01 	mov.w	fp, #1
 801306c:	eb08 0105 	add.w	r1, r8, r5
            rle_prev_v = ret;
 8013070:	4617      	mov	r7, r2
            rle_rdp += rle_bpp;
 8013072:	4658      	mov	r0, fp
 8013074:	46d8      	mov	r8, fp
 8013076:	f8cd b008 	str.w	fp, [sp, #8]
 801307a:	e73d      	b.n	8012ef8 <lv_font_get_bitmap_fmt_txt+0x63c>
    bit_pos = bit_pos & 0x7;
 801307c:	f008 0107 	and.w	r1, r8, #7
        if(v == 1) {
 8013080:	2201      	movs	r2, #1
    uint32_t byte_pos = bit_pos >> 3;
 8013082:	ea4f 00d8 	mov.w	r0, r8, lsr #3
    if(bit_pos + len >= 8) {
 8013086:	4429      	add	r1, r5
 8013088:	2907      	cmp	r1, #7
 801308a:	d8e1      	bhi.n	8013050 <lv_font_get_bitmap_fmt_txt+0x794>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
 801308c:	5c30      	ldrb	r0, [r6, r0]
 801308e:	f1c1 0108 	rsb	r1, r1, #8
 8013092:	fa40 f101 	asr.w	r1, r0, r1
 8013096:	400a      	ands	r2, r1
 8013098:	b2d2      	uxtb	r2, r2
 801309a:	e7e5      	b.n	8013068 <lv_font_get_bitmap_fmt_txt+0x7ac>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
 801309c:	9a04      	ldr	r2, [sp, #16]
 801309e:	e7d0      	b.n	8013042 <lv_font_get_bitmap_fmt_txt+0x786>
            break;
 80130a0:	f04f 32ff 	mov.w	r2, #4294967295
 80130a4:	e7cd      	b.n	8013042 <lv_font_get_bitmap_fmt_txt+0x786>
            break;
 80130a6:	220f      	movs	r2, #15
 80130a8:	e7cb      	b.n	8013042 <lv_font_get_bitmap_fmt_txt+0x786>
            break;
 80130aa:	2207      	movs	r2, #7
 80130ac:	e7c9      	b.n	8013042 <lv_font_get_bitmap_fmt_txt+0x786>
        rle_cnt--;
 80130ae:	f109 32ff 	add.w	r2, r9, #4294967295
        if(rle_cnt == 0) {
 80130b2:	f012 09ff 	ands.w	r9, r2, #255	; 0xff
 80130b6:	d003      	beq.n	80130c0 <lv_font_get_bitmap_fmt_txt+0x804>
 80130b8:	463a      	mov	r2, r7
 80130ba:	f04f 0b01 	mov.w	fp, #1
 80130be:	e71b      	b.n	8012ef8 <lv_font_get_bitmap_fmt_txt+0x63c>
    switch(len) {
 80130c0:	2b07      	cmp	r3, #7
 80130c2:	d831      	bhi.n	8013128 <lv_font_get_bitmap_fmt_txt+0x86c>
 80130c4:	e8df f003 	tbb	[pc, r3]
 80130c8:	35370421 	.word	0x35370421
 80130cc:	32303030 	.word	0x32303030
        if(rle_cnt == 0) {
 80130d0:	2203      	movs	r2, #3
    bit_pos = bit_pos & 0x7;
 80130d2:	f001 0007 	and.w	r0, r1, #7
    uint32_t byte_pos = bit_pos >> 3;
 80130d6:	08cc      	lsrs	r4, r1, #3
    if(bit_pos + len >= 8) {
 80130d8:	4428      	add	r0, r5
 80130da:	2807      	cmp	r0, #7
 80130dc:	d91c      	bls.n	8013118 <lv_font_get_bitmap_fmt_txt+0x85c>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
 80130de:	1937      	adds	r7, r6, r4
 80130e0:	5d34      	ldrb	r4, [r6, r4]
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
 80130e2:	f1c0 0010 	rsb	r0, r0, #16
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
 80130e6:	787f      	ldrb	r7, [r7, #1]
 80130e8:	eb07 2404 	add.w	r4, r7, r4, lsl #8
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
 80130ec:	b2a4      	uxth	r4, r4
 80130ee:	fa44 f000 	asr.w	r0, r4, r0
 80130f2:	4002      	ands	r2, r0
 80130f4:	b2d2      	uxtb	r2, r2
            rle_rdp += rle_bpp;
 80130f6:	f04f 0b01 	mov.w	fp, #1
 80130fa:	4429      	add	r1, r5
            rle_prev_v = ret;
 80130fc:	4617      	mov	r7, r2
            rle_state = RLE_STATE_SINGLE;
 80130fe:	2400      	movs	r4, #0
            rle_rdp += rle_bpp;
 8013100:	4658      	mov	r0, fp
 8013102:	46d8      	mov	r8, fp
 8013104:	f8cd b008 	str.w	fp, [sp, #8]
 8013108:	e6f6      	b.n	8012ef8 <lv_font_get_bitmap_fmt_txt+0x63c>
    bit_pos = bit_pos & 0x7;
 801310a:	f001 0007 	and.w	r0, r1, #7
        if(rle_cnt == 0) {
 801310e:	2201      	movs	r2, #1
    uint32_t byte_pos = bit_pos >> 3;
 8013110:	08cc      	lsrs	r4, r1, #3
    if(bit_pos + len >= 8) {
 8013112:	4428      	add	r0, r5
 8013114:	2807      	cmp	r0, #7
 8013116:	d8e2      	bhi.n	80130de <lv_font_get_bitmap_fmt_txt+0x822>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
 8013118:	5d34      	ldrb	r4, [r6, r4]
 801311a:	f1c0 0008 	rsb	r0, r0, #8
 801311e:	fa44 f000 	asr.w	r0, r4, r0
 8013122:	4002      	ands	r2, r0
 8013124:	b2d2      	uxtb	r2, r2
 8013126:	e7e6      	b.n	80130f6 <lv_font_get_bitmap_fmt_txt+0x83a>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
 8013128:	9a04      	ldr	r2, [sp, #16]
 801312a:	e7d2      	b.n	80130d2 <lv_font_get_bitmap_fmt_txt+0x816>
            break;
 801312c:	f04f 32ff 	mov.w	r2, #4294967295
 8013130:	e7cf      	b.n	80130d2 <lv_font_get_bitmap_fmt_txt+0x816>
            break;
 8013132:	220f      	movs	r2, #15
 8013134:	e7cd      	b.n	80130d2 <lv_font_get_bitmap_fmt_txt+0x816>
            break;
 8013136:	2207      	movs	r2, #7
 8013138:	e7cb      	b.n	80130d2 <lv_font_get_bitmap_fmt_txt+0x816>
        rle_cnt--;
 801313a:	f109 32ff 	add.w	r2, r9, #4294967295
        if(rle_cnt == 0) {
 801313e:	f012 09ff 	ands.w	r9, r2, #255	; 0xff
 8013142:	d003      	beq.n	801314c <lv_font_get_bitmap_fmt_txt+0x890>
 8013144:	463a      	mov	r2, r7
 8013146:	f04f 0b01 	mov.w	fp, #1
 801314a:	e4f7      	b.n	8012b3c <lv_font_get_bitmap_fmt_txt+0x280>
    switch(len) {
 801314c:	2b07      	cmp	r3, #7
 801314e:	d831      	bhi.n	80131b4 <lv_font_get_bitmap_fmt_txt+0x8f8>
 8013150:	e8df f003 	tbb	[pc, r3]
 8013154:	35370421 	.word	0x35370421
 8013158:	32303030 	.word	0x32303030
        if(rle_cnt == 0) {
 801315c:	2203      	movs	r2, #3
    bit_pos = bit_pos & 0x7;
 801315e:	f001 0007 	and.w	r0, r1, #7
    uint32_t byte_pos = bit_pos >> 3;
 8013162:	08cc      	lsrs	r4, r1, #3
    if(bit_pos + len >= 8) {
 8013164:	4428      	add	r0, r5
 8013166:	2807      	cmp	r0, #7
 8013168:	d91c      	bls.n	80131a4 <lv_font_get_bitmap_fmt_txt+0x8e8>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
 801316a:	1937      	adds	r7, r6, r4
 801316c:	5d34      	ldrb	r4, [r6, r4]
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
 801316e:	f1c0 0010 	rsb	r0, r0, #16
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
 8013172:	787f      	ldrb	r7, [r7, #1]
 8013174:	eb07 2404 	add.w	r4, r7, r4, lsl #8
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
 8013178:	b2a4      	uxth	r4, r4
 801317a:	fa44 f000 	asr.w	r0, r4, r0
 801317e:	4002      	ands	r2, r0
 8013180:	b2d2      	uxtb	r2, r2
            rle_rdp += rle_bpp;
 8013182:	f04f 0b01 	mov.w	fp, #1
 8013186:	4429      	add	r1, r5
            rle_prev_v = ret;
 8013188:	4617      	mov	r7, r2
            rle_state = RLE_STATE_SINGLE;
 801318a:	2400      	movs	r4, #0
            rle_rdp += rle_bpp;
 801318c:	4658      	mov	r0, fp
 801318e:	46de      	mov	lr, fp
 8013190:	f8cd b008 	str.w	fp, [sp, #8]
 8013194:	e4d2      	b.n	8012b3c <lv_font_get_bitmap_fmt_txt+0x280>
    bit_pos = bit_pos & 0x7;
 8013196:	f001 0007 	and.w	r0, r1, #7
        if(rle_cnt == 0) {
 801319a:	2201      	movs	r2, #1
    uint32_t byte_pos = bit_pos >> 3;
 801319c:	08cc      	lsrs	r4, r1, #3
    if(bit_pos + len >= 8) {
 801319e:	4428      	add	r0, r5
 80131a0:	2807      	cmp	r0, #7
 80131a2:	d8e2      	bhi.n	801316a <lv_font_get_bitmap_fmt_txt+0x8ae>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
 80131a4:	5d34      	ldrb	r4, [r6, r4]
 80131a6:	f1c0 0008 	rsb	r0, r0, #8
 80131aa:	fa44 f000 	asr.w	r0, r4, r0
 80131ae:	4002      	ands	r2, r0
 80131b0:	b2d2      	uxtb	r2, r2
 80131b2:	e7e6      	b.n	8013182 <lv_font_get_bitmap_fmt_txt+0x8c6>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
 80131b4:	9a04      	ldr	r2, [sp, #16]
 80131b6:	e7d2      	b.n	801315e <lv_font_get_bitmap_fmt_txt+0x8a2>
            break;
 80131b8:	f04f 32ff 	mov.w	r2, #4294967295
 80131bc:	e7cf      	b.n	801315e <lv_font_get_bitmap_fmt_txt+0x8a2>
            break;
 80131be:	220f      	movs	r2, #15
 80131c0:	e7cd      	b.n	801315e <lv_font_get_bitmap_fmt_txt+0x8a2>
            break;
 80131c2:	2207      	movs	r2, #7
 80131c4:	e7cb      	b.n	801315e <lv_font_get_bitmap_fmt_txt+0x8a2>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
 80131c6:	f816 200e 	ldrb.w	r2, [r6, lr]
 80131ca:	f1c4 0408 	rsb	r4, r4, #8
        rle_rdp += 1;
 80131ce:	f101 0e01 	add.w	lr, r1, #1
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
 80131d2:	fa42 f404 	asr.w	r4, r2, r4
        rle_cnt++;
 80131d6:	f109 0201 	add.w	r2, r9, #1
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
 80131da:	f004 0401 	and.w	r4, r4, #1
        rle_cnt++;
 80131de:	fa5f f982 	uxtb.w	r9, r2
        if(v == 1) {
 80131e2:	2c01      	cmp	r4, #1
 80131e4:	f47f ae24 	bne.w	8012e30 <lv_font_get_bitmap_fmt_txt+0x574>
            if(rle_cnt == 11) {
 80131e8:	f1b9 0f0b 	cmp.w	r9, #11
 80131ec:	f000 80c7 	beq.w	801337e <lv_font_get_bitmap_fmt_txt+0xac2>
        rle_rdp += 1;
 80131f0:	4671      	mov	r1, lr
 80131f2:	463a      	mov	r2, r7
 80131f4:	46a3      	mov	fp, r4
 80131f6:	46a6      	mov	lr, r4
 80131f8:	e4a0      	b.n	8012b3c <lv_font_get_bitmap_fmt_txt+0x280>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
 80131fa:	f816 2008 	ldrb.w	r2, [r6, r8]
 80131fe:	f1c4 0408 	rsb	r4, r4, #8
        rle_rdp += 1;
 8013202:	f101 0801 	add.w	r8, r1, #1
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
 8013206:	fa42 f404 	asr.w	r4, r2, r4
        rle_cnt++;
 801320a:	f109 0201 	add.w	r2, r9, #1
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
 801320e:	f004 0401 	and.w	r4, r4, #1
        rle_cnt++;
 8013212:	fa5f f982 	uxtb.w	r9, r2
        if(v == 1) {
 8013216:	2c01      	cmp	r4, #1
 8013218:	f47f af0a 	bne.w	8013030 <lv_font_get_bitmap_fmt_txt+0x774>
            if(rle_cnt == 11) {
 801321c:	f1b9 0f0b 	cmp.w	r9, #11
 8013220:	f000 808a 	beq.w	8013338 <lv_font_get_bitmap_fmt_txt+0xa7c>
        rle_rdp += 1;
 8013224:	4641      	mov	r1, r8
 8013226:	463a      	mov	r2, r7
 8013228:	46a3      	mov	fp, r4
 801322a:	46a0      	mov	r8, r4
 801322c:	e664      	b.n	8012ef8 <lv_font_get_bitmap_fmt_txt+0x63c>
 801322e:	9a03      	ldr	r2, [sp, #12]
    for(i = 0; i < w; i++) {
 8013230:	f8dd c004 	ldr.w	ip, [sp, #4]
 8013234:	f102 3eff 	add.w	lr, r2, #4294967295
    out[byte_pos] &= ((~bit_mask) << bit_pos);
 8013238:	9314      	str	r3, [sp, #80]	; 0x50
                wrp += wr_size;
 801323a:	9a00      	ldr	r2, [sp, #0]
    bit_pos = bit_pos & 0x7;
 801323c:	f00c 0007 	and.w	r0, ip, #7
                line_buf1[x] = line_buf2[x] ^ line_buf1[x];
 8013240:	f817 af01 	ldrb.w	sl, [r7, #1]!
    out[byte_pos] &= ((~bit_mask) << bit_pos);
 8013244:	f3cc 08cf 	ubfx	r8, ip, #3, #16
                wrp += wr_size;
 8013248:	4494      	add	ip, r2
                line_buf1[x] = line_buf2[x] ^ line_buf1[x];
 801324a:	f81e 2f01 	ldrb.w	r2, [lr, #1]!
    bit_pos = 8 - bit_pos - len;
 801324e:	f1c0 0004 	rsb	r0, r0, #4
    out[byte_pos] &= ((~bit_mask) << bit_pos);
 8013252:	f06f 030f 	mvn.w	r3, #15
                line_buf1[x] = line_buf2[x] ^ line_buf1[x];
 8013256:	ea8a 0202 	eor.w	r2, sl, r2
    out[byte_pos] &= ((~bit_mask) << bit_pos);
 801325a:	fa03 f900 	lsl.w	r9, r3, r0
 801325e:	2a07      	cmp	r2, #7
                line_buf1[x] = line_buf2[x] ^ line_buf1[x];
 8013260:	f88e 2000 	strb.w	r2, [lr]
        switch(val) {
 8013264:	d801      	bhi.n	801326a <lv_font_get_bitmap_fmt_txt+0x9ae>
 8013266:	4b9d      	ldr	r3, [pc, #628]	; (80134dc <lv_font_get_bitmap_fmt_txt+0xc20>)
 8013268:	5c9a      	ldrb	r2, [r3, r2]
    out[byte_pos] &= ((~bit_mask) << bit_pos);
 801326a:	f815 a008 	ldrb.w	sl, [r5, r8]
    out[byte_pos] |= (val << bit_pos);
 801326e:	4082      	lsls	r2, r0
    out[byte_pos] &= ((~bit_mask) << bit_pos);
 8013270:	ea0a 0909 	and.w	r9, sl, r9
    out[byte_pos] |= (val << bit_pos);
 8013274:	ea49 0202 	orr.w	r2, r9, r2
 8013278:	f805 2008 	strb.w	r2, [r5, r8]
            for(x = 0; x < w; x++) {
 801327c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801327e:	4297      	cmp	r7, r2
 8013280:	d1db      	bne.n	801323a <lv_font_get_bitmap_fmt_txt+0x97e>
 8013282:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013284:	e48b      	b.n	8012b9e <lv_font_get_bitmap_fmt_txt+0x2e2>
    for(i = 0; i < w; i++) {
 8013286:	f8dd e004 	ldr.w	lr, [sp, #4]
    bit_pos = bit_pos & 0x7;
 801328a:	f00e 0207 	and.w	r2, lr, #7
                wrp += wr_size;
 801328e:	9800      	ldr	r0, [sp, #0]
                bits_write(out, wrp, line_buf1[x], bpp);
 8013290:	f817 cf01 	ldrb.w	ip, [r7, #1]!
    out[byte_pos] &= ((~bit_mask) << bit_pos);
 8013294:	f3ce 08cf 	ubfx	r8, lr, #3, #16
    bit_pos = 8 - bit_pos - len;
 8013298:	f1c2 0204 	rsb	r2, r2, #4
                wrp += wr_size;
 801329c:	4486      	add	lr, r0
 801329e:	f1bc 0f07 	cmp.w	ip, #7
    out[byte_pos] &= ((~bit_mask) << bit_pos);
 80132a2:	f06f 000f 	mvn.w	r0, #15
 80132a6:	fa00 f902 	lsl.w	r9, r0, r2
 80132aa:	d802      	bhi.n	80132b2 <lv_font_get_bitmap_fmt_txt+0x9f6>
 80132ac:	488b      	ldr	r0, [pc, #556]	; (80134dc <lv_font_get_bitmap_fmt_txt+0xc20>)
 80132ae:	f810 c00c 	ldrb.w	ip, [r0, ip]
 80132b2:	f815 0008 	ldrb.w	r0, [r5, r8]
    out[byte_pos] |= (val << bit_pos);
 80132b6:	fa0c f202 	lsl.w	r2, ip, r2
            for(x = 0; x < w; x++) {
 80132ba:	45ba      	cmp	sl, r7
    out[byte_pos] &= ((~bit_mask) << bit_pos);
 80132bc:	ea00 0009 	and.w	r0, r0, r9
    out[byte_pos] |= (val << bit_pos);
 80132c0:	ea42 0200 	orr.w	r2, r2, r0
 80132c4:	f805 2008 	strb.w	r2, [r5, r8]
            for(x = 0; x < w; x++) {
 80132c8:	d1df      	bne.n	801328a <lv_font_get_bitmap_fmt_txt+0x9ce>
 80132ca:	e468      	b.n	8012b9e <lv_font_get_bitmap_fmt_txt+0x2e2>
        rle_cnt--;
 80132cc:	3901      	subs	r1, #1
        if(rle_cnt == 0) {
 80132ce:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 80132d2:	d003      	beq.n	80132dc <lv_font_get_bitmap_fmt_txt+0xa20>
 80132d4:	4653      	mov	r3, sl
 80132d6:	2001      	movs	r0, #1
 80132d8:	f7ff bb99 	b.w	8012a0e <lv_font_get_bitmap_fmt_txt+0x152>
    switch(len) {
 80132dc:	2a07      	cmp	r2, #7
 80132de:	f200 80c6 	bhi.w	801346e <lv_font_get_bitmap_fmt_txt+0xbb2>
 80132e2:	e8df f002 	tbb	[pc, r2]
 80132e6:	0423      	.short	0x0423
 80132e8:	c4c4c0c2 	.word	0xc4c4c0c2
 80132ec:	bdc4      	.short	0xbdc4
        if(rle_cnt == 0) {
 80132ee:	2303      	movs	r3, #3
    bit_pos = bit_pos & 0x7;
 80132f0:	f004 0007 	and.w	r0, r4, #7
    uint32_t byte_pos = bit_pos >> 3;
 80132f4:	08e6      	lsrs	r6, r4, #3
    if(bit_pos + len >= 8) {
 80132f6:	4470      	add	r0, lr
 80132f8:	2807      	cmp	r0, #7
 80132fa:	f240 8086 	bls.w	801340a <lv_font_get_bitmap_fmt_txt+0xb4e>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
 80132fe:	eb07 0c06 	add.w	ip, r7, r6
 8013302:	5dbe      	ldrb	r6, [r7, r6]
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
 8013304:	f1c0 0010 	rsb	r0, r0, #16
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
 8013308:	f89c c001 	ldrb.w	ip, [ip, #1]
 801330c:	eb0c 2606 	add.w	r6, ip, r6, lsl #8
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
 8013310:	b2b6      	uxth	r6, r6
 8013312:	fa46 f000 	asr.w	r0, r6, r0
 8013316:	4003      	ands	r3, r0
 8013318:	b2db      	uxtb	r3, r3
            rle_rdp += rle_bpp;
 801331a:	2001      	movs	r0, #1
 801331c:	4474      	add	r4, lr
            rle_prev_v = ret;
 801331e:	469a      	mov	sl, r3
            rle_state = RLE_STATE_SINGLE;
 8013320:	2600      	movs	r6, #0
            rle_rdp += rle_bpp;
 8013322:	4680      	mov	r8, r0
 8013324:	4684      	mov	ip, r0
 8013326:	4605      	mov	r5, r0
 8013328:	f7ff bb71 	b.w	8012a0e <lv_font_get_bitmap_fmt_txt+0x152>
        if(rle_cnt == 0) {
 801332c:	2301      	movs	r3, #1
 801332e:	e7df      	b.n	80132f0 <lv_font_get_bitmap_fmt_txt+0xa34>
 8013330:	4b6b      	ldr	r3, [pc, #428]	; (80134e0 <lv_font_get_bitmap_fmt_txt+0xc24>)
 8013332:	681d      	ldr	r5, [r3, #0]
 8013334:	f7ff bb05 	b.w	8012942 <lv_font_get_bitmap_fmt_txt+0x86>
    bit_pos = bit_pos & 0x7;
 8013338:	f008 0207 	and.w	r2, r8, #7
    uint32_t byte_pos = bit_pos >> 3;
 801333c:	ea4f 08d8 	mov.w	r8, r8, lsr #3
    if(bit_pos + len >= 8) {
 8013340:	3206      	adds	r2, #6
 8013342:	2a07      	cmp	r2, #7
 8013344:	d94f      	bls.n	80133e6 <lv_font_get_bitmap_fmt_txt+0xb2a>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
 8013346:	eb06 0a08 	add.w	sl, r6, r8
 801334a:	f816 4008 	ldrb.w	r4, [r6, r8]
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
 801334e:	f1c2 0210 	rsb	r2, r2, #16
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
 8013352:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8013356:	eb08 2404 	add.w	r4, r8, r4, lsl #8
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
 801335a:	b2a4      	uxth	r4, r4
 801335c:	fa44 f202 	asr.w	r2, r4, r2
 8013360:	f002 093f 	and.w	r9, r2, #63	; 0x3f
                rle_rdp += 6;
 8013364:	3107      	adds	r1, #7
                if(rle_cnt != 0) {
 8013366:	f1b9 0f00 	cmp.w	r9, #0
 801336a:	f43f aea9 	beq.w	80130c0 <lv_font_get_bitmap_fmt_txt+0x804>
 801336e:	f04f 0b01 	mov.w	fp, #1
 8013372:	463a      	mov	r2, r7
                    rle_state = RLE_STATE_COUNTER;
 8013374:	2402      	movs	r4, #2
 8013376:	46d8      	mov	r8, fp
 8013378:	f8cd b008 	str.w	fp, [sp, #8]
 801337c:	e5bc      	b.n	8012ef8 <lv_font_get_bitmap_fmt_txt+0x63c>
    bit_pos = bit_pos & 0x7;
 801337e:	f00e 0207 	and.w	r2, lr, #7
    uint32_t byte_pos = bit_pos >> 3;
 8013382:	ea4f 0ede 	mov.w	lr, lr, lsr #3
    if(bit_pos + len >= 8) {
 8013386:	3206      	adds	r2, #6
 8013388:	2a07      	cmp	r2, #7
 801338a:	d935      	bls.n	80133f8 <lv_font_get_bitmap_fmt_txt+0xb3c>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
 801338c:	eb06 080e 	add.w	r8, r6, lr
 8013390:	f816 400e 	ldrb.w	r4, [r6, lr]
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
 8013394:	f1c2 0210 	rsb	r2, r2, #16
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
 8013398:	f898 e001 	ldrb.w	lr, [r8, #1]
 801339c:	eb0e 2404 	add.w	r4, lr, r4, lsl #8
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
 80133a0:	b2a4      	uxth	r4, r4
 80133a2:	fa44 f202 	asr.w	r2, r4, r2
 80133a6:	f002 093f 	and.w	r9, r2, #63	; 0x3f
                rle_rdp += 6;
 80133aa:	3107      	adds	r1, #7
                if(rle_cnt != 0) {
 80133ac:	f1b9 0f00 	cmp.w	r9, #0
 80133b0:	f43f aecc 	beq.w	801314c <lv_font_get_bitmap_fmt_txt+0x890>
 80133b4:	f04f 0b01 	mov.w	fp, #1
 80133b8:	463a      	mov	r2, r7
                    rle_state = RLE_STATE_COUNTER;
 80133ba:	2402      	movs	r4, #2
 80133bc:	46de      	mov	lr, fp
 80133be:	f8cd b008 	str.w	fp, [sp, #8]
 80133c2:	f7ff bbbb 	b.w	8012b3c <lv_font_get_bitmap_fmt_txt+0x280>
            if(rle_cnt == 11) {
 80133c6:	290b      	cmp	r1, #11
 80133c8:	d05c      	beq.n	8013484 <lv_font_get_bitmap_fmt_txt+0xbc8>
        rle_rdp += 1;
 80133ca:	4664      	mov	r4, ip
 80133cc:	4653      	mov	r3, sl
 80133ce:	4630      	mov	r0, r6
 80133d0:	46b4      	mov	ip, r6
 80133d2:	f7ff bb1c 	b.w	8012a0e <lv_font_get_bitmap_fmt_txt+0x152>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
 80133d6:	5dbb      	ldrb	r3, [r7, r6]
 80133d8:	f1c0 0008 	rsb	r0, r0, #8
 80133dc:	fa43 f000 	asr.w	r0, r3, r0
 80133e0:	f000 0601 	and.w	r6, r0, #1
 80133e4:	e483      	b.n	8012cee <lv_font_get_bitmap_fmt_txt+0x432>
 80133e6:	f816 4008 	ldrb.w	r4, [r6, r8]
 80133ea:	f1c2 0208 	rsb	r2, r2, #8
 80133ee:	fa44 f202 	asr.w	r2, r4, r2
 80133f2:	f002 093f 	and.w	r9, r2, #63	; 0x3f
 80133f6:	e7b5      	b.n	8013364 <lv_font_get_bitmap_fmt_txt+0xaa8>
 80133f8:	f816 400e 	ldrb.w	r4, [r6, lr]
 80133fc:	f1c2 0208 	rsb	r2, r2, #8
 8013400:	fa44 f202 	asr.w	r2, r4, r2
 8013404:	f002 093f 	and.w	r9, r2, #63	; 0x3f
 8013408:	e7cf      	b.n	80133aa <lv_font_get_bitmap_fmt_txt+0xaee>
 801340a:	5dbe      	ldrb	r6, [r7, r6]
 801340c:	f1c0 0008 	rsb	r0, r0, #8
 8013410:	fa46 f000 	asr.w	r0, r6, r0
 8013414:	4003      	ands	r3, r0
 8013416:	b2db      	uxtb	r3, r3
 8013418:	e77f      	b.n	801331a <lv_font_get_bitmap_fmt_txt+0xa5e>
 801341a:	2100      	movs	r1, #0
 801341c:	4f2f      	ldr	r7, [pc, #188]	; (80134dc <lv_font_get_bitmap_fmt_txt+0xc20>)
    out[byte_pos] &= ((~bit_mask) << bit_pos);
 801341e:	f06f 0c0f 	mvn.w	ip, #15
        bits_write(out, wrp, line_buf1[x], bpp);
 8013422:	f81b 3f01 	ldrb.w	r3, [fp, #1]!
    bit_pos = bit_pos & 0x7;
 8013426:	f001 0007 	and.w	r0, r1, #7
    out[byte_pos] &= ((~bit_mask) << bit_pos);
 801342a:	f3c1 04cf 	ubfx	r4, r1, #3, #16
        wrp += wr_size;
 801342e:	9a00      	ldr	r2, [sp, #0]
 8013430:	2b07      	cmp	r3, #7
    bit_pos = 8 - bit_pos - len;
 8013432:	f1c0 0004 	rsb	r0, r0, #4
        wrp += wr_size;
 8013436:	4411      	add	r1, r2
    out[byte_pos] &= ((~bit_mask) << bit_pos);
 8013438:	5d2a      	ldrb	r2, [r5, r4]
 801343a:	bf98      	it	ls
 801343c:	5cfb      	ldrbls	r3, [r7, r3]
 801343e:	fa0c f600 	lsl.w	r6, ip, r0
    out[byte_pos] |= (val << bit_pos);
 8013442:	4083      	lsls	r3, r0
    out[byte_pos] &= ((~bit_mask) << bit_pos);
 8013444:	4032      	ands	r2, r6
    out[byte_pos] |= (val << bit_pos);
 8013446:	4313      	orrs	r3, r2
 8013448:	552b      	strb	r3, [r5, r4]
    for(x = 0; x < w; x++) {
 801344a:	9b01      	ldr	r3, [sp, #4]
 801344c:	455b      	cmp	r3, fp
 801344e:	d1e8      	bne.n	8013422 <lv_font_get_bitmap_fmt_txt+0xb66>
 8013450:	f7ff bb19 	b.w	8012a86 <lv_font_get_bitmap_fmt_txt+0x1ca>
        line_buf2 = _lv_mem_buf_get(w);
 8013454:	4648      	mov	r0, r9
 8013456:	f002 f867 	bl	8015528 <_lv_mem_buf_get>
 801345a:	900e      	str	r0, [sp, #56]	; 0x38
 801345c:	f7ff ba9f 	b.w	801299e <lv_font_get_bitmap_fmt_txt+0xe2>
            break;
 8013460:	f04f 33ff 	mov.w	r3, #4294967295
 8013464:	e744      	b.n	80132f0 <lv_font_get_bitmap_fmt_txt+0xa34>
            break;
 8013466:	230f      	movs	r3, #15
 8013468:	e742      	b.n	80132f0 <lv_font_get_bitmap_fmt_txt+0xa34>
            break;
 801346a:	2307      	movs	r3, #7
 801346c:	e740      	b.n	80132f0 <lv_font_get_bitmap_fmt_txt+0xa34>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
 801346e:	9b02      	ldr	r3, [sp, #8]
 8013470:	e73e      	b.n	80132f0 <lv_font_get_bitmap_fmt_txt+0xa34>
            break;
 8013472:	f04f 33ff 	mov.w	r3, #4294967295
 8013476:	e44f      	b.n	8012d18 <lv_font_get_bitmap_fmt_txt+0x45c>
            break;
 8013478:	230f      	movs	r3, #15
 801347a:	e44d      	b.n	8012d18 <lv_font_get_bitmap_fmt_txt+0x45c>
            break;
 801347c:	2307      	movs	r3, #7
 801347e:	e44b      	b.n	8012d18 <lv_font_get_bitmap_fmt_txt+0x45c>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
 8013480:	9b02      	ldr	r3, [sp, #8]
 8013482:	e449      	b.n	8012d18 <lv_font_get_bitmap_fmt_txt+0x45c>
    bit_pos = bit_pos & 0x7;
 8013484:	f00c 0307 	and.w	r3, ip, #7
    uint32_t byte_pos = bit_pos >> 3;
 8013488:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
    if(bit_pos + len >= 8) {
 801348c:	3306      	adds	r3, #6
 801348e:	2b07      	cmp	r3, #7
 8013490:	d91b      	bls.n	80134ca <lv_font_get_bitmap_fmt_txt+0xc0e>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
 8013492:	eb07 000c 	add.w	r0, r7, ip
 8013496:	f817 100c 	ldrb.w	r1, [r7, ip]
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
 801349a:	f1c3 0310 	rsb	r3, r3, #16
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
 801349e:	7840      	ldrb	r0, [r0, #1]
 80134a0:	eb00 2101 	add.w	r1, r0, r1, lsl #8
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
 80134a4:	b289      	uxth	r1, r1
 80134a6:	fa41 f303 	asr.w	r3, r1, r3
 80134aa:	f003 013f 	and.w	r1, r3, #63	; 0x3f
                rle_rdp += 6;
 80134ae:	3407      	adds	r4, #7
                if(rle_cnt != 0) {
 80134b0:	2900      	cmp	r1, #0
 80134b2:	f43f af13 	beq.w	80132dc <lv_font_get_bitmap_fmt_txt+0xa20>
 80134b6:	2001      	movs	r0, #1
 80134b8:	4653      	mov	r3, sl
                    rle_state = RLE_STATE_COUNTER;
 80134ba:	2602      	movs	r6, #2
 80134bc:	4684      	mov	ip, r0
 80134be:	4605      	mov	r5, r0
 80134c0:	f7ff baa5 	b.w	8012a0e <lv_font_get_bitmap_fmt_txt+0x152>
    uint32_t wrp = 0;
 80134c4:	9301      	str	r3, [sp, #4]
 80134c6:	f7ff bae3 	b.w	8012a90 <lv_font_get_bitmap_fmt_txt+0x1d4>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
 80134ca:	f817 100c 	ldrb.w	r1, [r7, ip]
 80134ce:	f1c3 0308 	rsb	r3, r3, #8
 80134d2:	fa41 f303 	asr.w	r3, r1, r3
 80134d6:	f003 013f 	and.w	r1, r3, #63	; 0x3f
 80134da:	e7e8      	b.n	80134ae <lv_font_get_bitmap_fmt_txt+0xbf2>
 80134dc:	0801e340 	.word	0x0801e340
 80134e0:	20020420 	.word	0x20020420

080134e4 <lv_font_get_glyph_dsc_fmt_txt>:
    if(unicode_letter == '\t') {
 80134e4:	2a09      	cmp	r2, #9
{
 80134e6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134ea:	4680      	mov	r8, r0
 80134ec:	b085      	sub	sp, #20
 80134ee:	460e      	mov	r6, r1
 80134f0:	469a      	mov	sl, r3
    if(unicode_letter == '\t') {
 80134f2:	d009      	beq.n	8013508 <lv_font_get_glyph_dsc_fmt_txt+0x24>
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
 80134f4:	4615      	mov	r5, r2
 80134f6:	6907      	ldr	r7, [r0, #16]
    if(letter == '\0') return 0;
 80134f8:	2a00      	cmp	r2, #0
 80134fa:	d139      	bne.n	8013570 <lv_font_get_glyph_dsc_fmt_txt+0x8c>
    if(!gid) return false;
 80134fc:	f04f 0900 	mov.w	r9, #0
}
 8013500:	4648      	mov	r0, r9
 8013502:	b005      	add	sp, #20
 8013504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
 8013508:	4683      	mov	fp, r0
        unicode_letter = ' ';
 801350a:	2520      	movs	r5, #32
        is_tab = true;
 801350c:	f04f 0901 	mov.w	r9, #1
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
 8013510:	f85b 7f10 	ldr.w	r7, [fp, #16]!
    if(letter == fdsc->last_letter) return fdsc->last_glyph_id;
 8013514:	697b      	ldr	r3, [r7, #20]
 8013516:	42ab      	cmp	r3, r5
 8013518:	d031      	beq.n	801357e <lv_font_get_glyph_dsc_fmt_txt+0x9a>
    for(i = 0; i < fdsc->cmap_num; i++) {
 801351a:	8a7c      	ldrh	r4, [r7, #18]
 801351c:	f3c4 0408 	ubfx	r4, r4, #0, #9
 8013520:	b1cc      	cbz	r4, 8013556 <lv_font_get_glyph_dsc_fmt_txt+0x72>
 8013522:	1e63      	subs	r3, r4, #1
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
 8013524:	68ba      	ldr	r2, [r7, #8]
 8013526:	2400      	movs	r4, #0
 8013528:	b29b      	uxth	r3, r3
 801352a:	4611      	mov	r1, r2
 801352c:	3301      	adds	r3, #1
 801352e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8013532:	009b      	lsls	r3, r3, #2
 8013534:	5910      	ldr	r0, [r2, r4]
        if(rcp > fdsc->cmaps[i].range_length) continue;
 8013536:	f8b1 c004 	ldrh.w	ip, [r1, #4]
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
 801353a:	1a28      	subs	r0, r5, r0
        if(rcp > fdsc->cmaps[i].range_length) continue;
 801353c:	4560      	cmp	r0, ip
 801353e:	d812      	bhi.n	8013566 <lv_font_get_glyph_dsc_fmt_txt+0x82>
        if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_TINY) {
 8013540:	7c8b      	ldrb	r3, [r1, #18]
 8013542:	2b02      	cmp	r3, #2
 8013544:	d062      	beq.n	801360c <lv_font_get_glyph_dsc_fmt_txt+0x128>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_FULL) {
 8013546:	2b00      	cmp	r3, #0
 8013548:	d053      	beq.n	80135f2 <lv_font_get_glyph_dsc_fmt_txt+0x10e>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_TINY) {
 801354a:	2b03      	cmp	r3, #3
 801354c:	f000 8097 	beq.w	801367e <lv_font_get_glyph_dsc_fmt_txt+0x19a>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_FULL) {
 8013550:	2b01      	cmp	r3, #1
 8013552:	f000 80a9 	beq.w	80136a8 <lv_font_get_glyph_dsc_fmt_txt+0x1c4>
    fdsc->last_glyph_id = 0;
 8013556:	2300      	movs	r3, #0
    if(!gid) return false;
 8013558:	4699      	mov	r9, r3
}
 801355a:	4648      	mov	r0, r9
    fdsc->last_glyph_id = 0;
 801355c:	e9c7 5305 	strd	r5, r3, [r7, #20]
}
 8013560:	b005      	add	sp, #20
 8013562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for(i = 0; i < fdsc->cmap_num; i++) {
 8013566:	3414      	adds	r4, #20
 8013568:	3114      	adds	r1, #20
 801356a:	42a3      	cmp	r3, r4
 801356c:	d1e2      	bne.n	8013534 <lv_font_get_glyph_dsc_fmt_txt+0x50>
 801356e:	e7f2      	b.n	8013556 <lv_font_get_glyph_dsc_fmt_txt+0x72>
    if(letter == fdsc->last_letter) return fdsc->last_glyph_id;
 8013570:	697b      	ldr	r3, [r7, #20]
 8013572:	f100 0b10 	add.w	fp, r0, #16
    bool is_tab = false;
 8013576:	f04f 0900 	mov.w	r9, #0
    if(letter == fdsc->last_letter) return fdsc->last_glyph_id;
 801357a:	42ab      	cmp	r3, r5
 801357c:	d1cd      	bne.n	801351a <lv_font_get_glyph_dsc_fmt_txt+0x36>
 801357e:	69bc      	ldr	r4, [r7, #24]
    if(!gid) return false;
 8013580:	2c00      	cmp	r4, #0
 8013582:	d0bb      	beq.n	80134fc <lv_font_get_glyph_dsc_fmt_txt+0x18>
    if(fdsc->kern_dsc) {
 8013584:	68fb      	ldr	r3, [r7, #12]
    if(letter == '\0') return 0;
 8013586:	b143      	cbz	r3, 801359a <lv_font_get_glyph_dsc_fmt_txt+0xb6>
 8013588:	f1ba 0f00 	cmp.w	sl, #0
 801358c:	d005      	beq.n	801359a <lv_font_get_glyph_dsc_fmt_txt+0xb6>
 801358e:	4651      	mov	r1, sl
 8013590:	4658      	mov	r0, fp
 8013592:	f7ff f92b 	bl	80127ec <get_glyph_dsc_id.isra.0.part.0>
        if(gid_next) {
 8013596:	2800      	cmp	r0, #0
 8013598:	d13b      	bne.n	8013612 <lv_font_get_glyph_dsc_fmt_txt+0x12e>
 801359a:	2300      	movs	r3, #0
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
 801359c:	6879      	ldr	r1, [r7, #4]
    int32_t kv = ((int32_t)((int32_t)kvalue * fdsc->kern_scale) >> 4);
 801359e:	8a3a      	ldrh	r2, [r7, #16]
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
 80135a0:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
    int32_t kv = ((int32_t)((int32_t)kvalue * fdsc->kern_scale) >> 4);
 80135a4:	fb03 f302 	mul.w	r3, r3, r2
    uint32_t adv_w = gdsc->adv_w;
 80135a8:	8862      	ldrh	r2, [r4, #2]
    int32_t kv = ((int32_t)((int32_t)kvalue * fdsc->kern_scale) >> 4);
 80135aa:	111b      	asrs	r3, r3, #4
    uint32_t adv_w = gdsc->adv_w;
 80135ac:	f3c2 110b 	ubfx	r1, r2, #4, #12
 80135b0:	460a      	mov	r2, r1
    if(is_tab) adv_w *= 2;
 80135b2:	f1b9 0f00 	cmp.w	r9, #0
 80135b6:	d001      	beq.n	80135bc <lv_font_get_glyph_dsc_fmt_txt+0xd8>
 80135b8:	b20a      	sxth	r2, r1
 80135ba:	0052      	lsls	r2, r2, #1
    adv_w  = (adv_w + (1 << 3)) >> 4;
 80135bc:	3308      	adds	r3, #8
    dsc_out->bpp   = (uint8_t)fdsc->bpp;
 80135be:	7cf9      	ldrb	r1, [r7, #19]
    adv_w  = (adv_w + (1 << 3)) >> 4;
 80135c0:	4413      	add	r3, r2
    dsc_out->bpp   = (uint8_t)fdsc->bpp;
 80135c2:	f3c1 0243 	ubfx	r2, r1, #1, #4
    adv_w  = (adv_w + (1 << 3)) >> 4;
 80135c6:	091b      	lsrs	r3, r3, #4
    dsc_out->adv_w = adv_w;
 80135c8:	8033      	strh	r3, [r6, #0]
    dsc_out->box_h = gdsc->box_h;
 80135ca:	7963      	ldrb	r3, [r4, #5]
 80135cc:	80b3      	strh	r3, [r6, #4]
    dsc_out->box_w = gdsc->box_w;
 80135ce:	7923      	ldrb	r3, [r4, #4]
 80135d0:	8073      	strh	r3, [r6, #2]
    dsc_out->ofs_x = gdsc->ofs_x;
 80135d2:	f994 1006 	ldrsb.w	r1, [r4, #6]
 80135d6:	80f1      	strh	r1, [r6, #6]
    dsc_out->ofs_y = gdsc->ofs_y;
 80135d8:	f994 1007 	ldrsb.w	r1, [r4, #7]
    dsc_out->bpp   = (uint8_t)fdsc->bpp;
 80135dc:	72b2      	strb	r2, [r6, #10]
    dsc_out->ofs_y = gdsc->ofs_y;
 80135de:	8131      	strh	r1, [r6, #8]
    if(is_tab) dsc_out->box_w = dsc_out->box_w * 2;
 80135e0:	f1b9 0f00 	cmp.w	r9, #0
 80135e4:	d00c      	beq.n	8013600 <lv_font_get_glyph_dsc_fmt_txt+0x11c>
 80135e6:	005b      	lsls	r3, r3, #1
}
 80135e8:	4648      	mov	r0, r9
    if(is_tab) dsc_out->box_w = dsc_out->box_w * 2;
 80135ea:	8073      	strh	r3, [r6, #2]
}
 80135ec:	b005      	add	sp, #20
 80135ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_8[rcp];
 80135f2:	68ca      	ldr	r2, [r1, #12]
 80135f4:	88cb      	ldrh	r3, [r1, #6]
 80135f6:	5c14      	ldrb	r4, [r2, r0]
 80135f8:	441c      	add	r4, r3
        fdsc->last_glyph_id = glyph_id;
 80135fa:	e9c7 5405 	strd	r5, r4, [r7, #20]
        return glyph_id;
 80135fe:	e7bf      	b.n	8013580 <lv_font_get_glyph_dsc_fmt_txt+0x9c>
    return true;
 8013600:	f04f 0901 	mov.w	r9, #1
}
 8013604:	4648      	mov	r0, r9
 8013606:	b005      	add	sp, #20
 8013608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            glyph_id = fdsc->cmaps[i].glyph_id_start + rcp;
 801360c:	88cc      	ldrh	r4, [r1, #6]
 801360e:	4404      	add	r4, r0
 8013610:	e7f3      	b.n	80135fa <lv_font_get_glyph_dsc_fmt_txt+0x116>
            kvalue = get_kern_value(font, gid, gid_next);
 8013612:	f8d8 3010 	ldr.w	r3, [r8, #16]
    if(fdsc->kern_classes == 0) {
 8013616:	7cda      	ldrb	r2, [r3, #19]
 8013618:	0692      	lsls	r2, r2, #26
 801361a:	d41e      	bmi.n	801365a <lv_font_get_glyph_dsc_fmt_txt+0x176>
        const lv_font_fmt_txt_kern_pair_t * kdsc = fdsc->kern_dsc;
 801361c:	68dd      	ldr	r5, [r3, #12]
        if(kdsc->glyph_ids_size == 0) {
 801361e:	7aeb      	ldrb	r3, [r5, #11]
 8013620:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
 8013624:	d05a      	beq.n	80136dc <lv_font_get_glyph_dsc_fmt_txt+0x1f8>
        else if(kdsc->glyph_ids_size == 1) {
 8013626:	2b40      	cmp	r3, #64	; 0x40
 8013628:	d1b7      	bne.n	801359a <lv_font_get_glyph_dsc_fmt_txt+0xb6>
            const uint32_t * g_ids = kdsc->glyph_ids;
 801362a:	f8d5 8000 	ldr.w	r8, [r5]
            uint32_t g_id_both = (gid_right << 16) + gid_left; /*Create one number from the ids*/
 801362e:	eb04 4c00 	add.w	ip, r4, r0, lsl #16
            uint32_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 4, kern_pair_16_compare);
 8013632:	68aa      	ldr	r2, [r5, #8]
 8013634:	2304      	movs	r3, #4
 8013636:	4836      	ldr	r0, [pc, #216]	; (8013710 <lv_font_get_glyph_dsc_fmt_txt+0x22c>)
 8013638:	4641      	mov	r1, r8
 801363a:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
            uint32_t g_id_both = (gid_right << 16) + gid_left; /*Create one number from the ids*/
 801363e:	f8cd c00c 	str.w	ip, [sp, #12]
            uint32_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 4, kern_pair_16_compare);
 8013642:	9000      	str	r0, [sp, #0]
 8013644:	a803      	add	r0, sp, #12
 8013646:	f002 fdef 	bl	8016228 <_lv_utils_bsearch>
            if(kid_p) {
 801364a:	2800      	cmp	r0, #0
 801364c:	d0a5      	beq.n	801359a <lv_font_get_glyph_dsc_fmt_txt+0xb6>
                lv_uintptr_t ofs = kid_p - g_ids;
 801364e:	eba0 0308 	sub.w	r3, r0, r8
                value = kdsc->values[ofs];
 8013652:	686a      	ldr	r2, [r5, #4]
                lv_uintptr_t ofs = kid_p - g_ids;
 8013654:	109b      	asrs	r3, r3, #2
 8013656:	56d3      	ldrsb	r3, [r2, r3]
 8013658:	e7a0      	b.n	801359c <lv_font_get_glyph_dsc_fmt_txt+0xb8>
        const lv_font_fmt_txt_kern_classes_t * kdsc = fdsc->kern_dsc;
 801365a:	68da      	ldr	r2, [r3, #12]
        uint8_t right_class = kdsc->right_class_mapping[gid_right];
 801365c:	e9d2 3101 	ldrd	r3, r1, [r2, #4]
        uint8_t left_class = kdsc->left_class_mapping[gid_left];
 8013660:	5d1b      	ldrb	r3, [r3, r4]
        uint8_t right_class = kdsc->right_class_mapping[gid_right];
 8013662:	5c09      	ldrb	r1, [r1, r0]
        if(left_class > 0 && right_class > 0) {
 8013664:	2b00      	cmp	r3, #0
 8013666:	d098      	beq.n	801359a <lv_font_get_glyph_dsc_fmt_txt+0xb6>
 8013668:	2900      	cmp	r1, #0
 801366a:	d096      	beq.n	801359a <lv_font_get_glyph_dsc_fmt_txt+0xb6>
            value = kdsc->class_pair_values[(left_class - 1) * kdsc->right_class_cnt + (right_class - 1)];
 801366c:	6810      	ldr	r0, [r2, #0]
 801366e:	3b01      	subs	r3, #1
 8013670:	7b52      	ldrb	r2, [r2, #13]
 8013672:	4401      	add	r1, r0
 8013674:	fb02 1303 	mla	r3, r2, r3, r1
 8013678:	f913 3c01 	ldrsb.w	r3, [r3, #-1]
 801367c:	e78e      	b.n	801359c <lv_font_get_glyph_dsc_fmt_txt+0xb8>
            uint16_t * p = _lv_utils_bsearch(&key, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
 801367e:	f8df c098 	ldr.w	ip, [pc, #152]	; 8013718 <lv_font_get_glyph_dsc_fmt_txt+0x234>
 8013682:	2302      	movs	r3, #2
            uint16_t key = rcp;
 8013684:	f8ad 000c 	strh.w	r0, [sp, #12]
            uint16_t * p = _lv_utils_bsearch(&key, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
 8013688:	a803      	add	r0, sp, #12
 801368a:	8a0a      	ldrh	r2, [r1, #16]
 801368c:	6889      	ldr	r1, [r1, #8]
 801368e:	f8cd c000 	str.w	ip, [sp]
 8013692:	f002 fdc9 	bl	8016228 <_lv_utils_bsearch>
            if(p) {
 8013696:	b1e8      	cbz	r0, 80136d4 <lv_font_get_glyph_dsc_fmt_txt+0x1f0>
                lv_uintptr_t ofs = p - fdsc->cmaps[i].unicode_list;
 8013698:	68bb      	ldr	r3, [r7, #8]
 801369a:	441c      	add	r4, r3
 801369c:	68a3      	ldr	r3, [r4, #8]
                glyph_id = fdsc->cmaps[i].glyph_id_start + ofs;
 801369e:	88e4      	ldrh	r4, [r4, #6]
                lv_uintptr_t ofs = p - fdsc->cmaps[i].unicode_list;
 80136a0:	1ac0      	subs	r0, r0, r3
                glyph_id = fdsc->cmaps[i].glyph_id_start + ofs;
 80136a2:	eb04 0460 	add.w	r4, r4, r0, asr #1
 80136a6:	e7a8      	b.n	80135fa <lv_font_get_glyph_dsc_fmt_txt+0x116>
            uint16_t * p = _lv_utils_bsearch(&key, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
 80136a8:	f8df c06c 	ldr.w	ip, [pc, #108]	; 8013718 <lv_font_get_glyph_dsc_fmt_txt+0x234>
 80136ac:	2302      	movs	r3, #2
            uint16_t key = rcp;
 80136ae:	f8ad 000c 	strh.w	r0, [sp, #12]
            uint16_t * p = _lv_utils_bsearch(&key, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
 80136b2:	a803      	add	r0, sp, #12
 80136b4:	8a0a      	ldrh	r2, [r1, #16]
 80136b6:	6889      	ldr	r1, [r1, #8]
 80136b8:	f8cd c000 	str.w	ip, [sp]
 80136bc:	f002 fdb4 	bl	8016228 <_lv_utils_bsearch>
            if(p) {
 80136c0:	b140      	cbz	r0, 80136d4 <lv_font_get_glyph_dsc_fmt_txt+0x1f0>
                lv_uintptr_t ofs = p - fdsc->cmaps[i].unicode_list;
 80136c2:	68bb      	ldr	r3, [r7, #8]
 80136c4:	441c      	add	r4, r3
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
 80136c6:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
                lv_uintptr_t ofs = p - fdsc->cmaps[i].unicode_list;
 80136ca:	1ac0      	subs	r0, r0, r3
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
 80136cc:	88e3      	ldrh	r3, [r4, #6]
 80136ce:	5a14      	ldrh	r4, [r2, r0]
 80136d0:	441c      	add	r4, r3
 80136d2:	e792      	b.n	80135fa <lv_font_get_glyph_dsc_fmt_txt+0x116>
    if(!gid) return false;
 80136d4:	4681      	mov	r9, r0
        fdsc->last_letter = letter;
 80136d6:	617d      	str	r5, [r7, #20]
        fdsc->last_glyph_id = glyph_id;
 80136d8:	61b8      	str	r0, [r7, #24]
    if(!gid) return false;
 80136da:	e711      	b.n	8013500 <lv_font_get_glyph_dsc_fmt_txt+0x1c>
            const uint16_t * g_ids = kdsc->glyph_ids;
 80136dc:	f8d5 8000 	ldr.w	r8, [r5]
            uint16_t g_id_both = (gid_right << 8) + gid_left; /*Create one number from the ids*/
 80136e0:	eb04 2c00 	add.w	ip, r4, r0, lsl #8
            uint16_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 2, kern_pair_8_compare);
 80136e4:	68aa      	ldr	r2, [r5, #8]
 80136e6:	2302      	movs	r3, #2
 80136e8:	480a      	ldr	r0, [pc, #40]	; (8013714 <lv_font_get_glyph_dsc_fmt_txt+0x230>)
 80136ea:	4641      	mov	r1, r8
 80136ec:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
            uint16_t g_id_both = (gid_right << 8) + gid_left; /*Create one number from the ids*/
 80136f0:	f8ad c00c 	strh.w	ip, [sp, #12]
            uint16_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 2, kern_pair_8_compare);
 80136f4:	9000      	str	r0, [sp, #0]
 80136f6:	a803      	add	r0, sp, #12
 80136f8:	f002 fd96 	bl	8016228 <_lv_utils_bsearch>
            if(kid_p) {
 80136fc:	2800      	cmp	r0, #0
 80136fe:	f43f af4c 	beq.w	801359a <lv_font_get_glyph_dsc_fmt_txt+0xb6>
                lv_uintptr_t ofs = kid_p - g_ids;
 8013702:	eba0 0308 	sub.w	r3, r0, r8
                value = kdsc->values[ofs];
 8013706:	686a      	ldr	r2, [r5, #4]
                lv_uintptr_t ofs = kid_p - g_ids;
 8013708:	105b      	asrs	r3, r3, #1
 801370a:	56d3      	ldrsb	r3, [r2, r3]
 801370c:	e746      	b.n	801359c <lv_font_get_glyph_dsc_fmt_txt+0xb8>
 801370e:	bf00      	nop
 8013710:	080127d1 	.word	0x080127d1
 8013714:	080127bd 	.word	0x080127bd
 8013718:	080127e5 	.word	0x080127e5

0801371c <_lv_font_clean_up_fmt_txt>:
{
 801371c:	b510      	push	{r4, lr}
    if(LV_GC_ROOT(_lv_font_decompr_buf)) {
 801371e:	4c04      	ldr	r4, [pc, #16]	; (8013730 <_lv_font_clean_up_fmt_txt+0x14>)
 8013720:	6820      	ldr	r0, [r4, #0]
 8013722:	b118      	cbz	r0, 801372c <_lv_font_clean_up_fmt_txt+0x10>
        lv_mem_free(LV_GC_ROOT(_lv_font_decompr_buf));
 8013724:	f001 fb82 	bl	8014e2c <lv_mem_free>
        LV_GC_ROOT(_lv_font_decompr_buf) = NULL;
 8013728:	2300      	movs	r3, #0
 801372a:	6023      	str	r3, [r4, #0]
}
 801372c:	bd10      	pop	{r4, pc}
 801372e:	bf00      	nop
 8013730:	20020420 	.word	0x20020420

08013734 <lv_disp_drv_init>:
 * It is used to surly have known values in the fields ant not memory junk.
 * After it you can set the fields.
 * @param driver pointer to driver variable to initialize
 */
void lv_disp_drv_init(lv_disp_drv_t * driver)
{
 8013734:	b510      	push	{r4, lr}
 8013736:	4604      	mov	r4, r0
    _lv_memset_00(driver, sizeof(lv_disp_drv_t));
 8013738:	2134      	movs	r1, #52	; 0x34
 801373a:	f002 f81d 	bl	8015778 <_lv_memset_00>
    driver->flush_cb         = NULL;
    driver->hor_res          = LV_HOR_RES_MAX;
    driver->ver_res          = LV_VER_RES_MAX;
    driver->buffer           = NULL;
    driver->rotated          = 0;
    driver->color_chroma_key = LV_COLOR_TRANSP;
 801373e:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
    driver->dpi = LV_DPI;

#if LV_ANTIALIAS
    driver->antialiasing = true;
 8013742:	8922      	ldrh	r2, [r4, #8]
 8013744:	f240 2109 	movw	r1, #521	; 0x209
    driver->flush_cb         = NULL;
 8013748:	2300      	movs	r3, #0
    driver->color_chroma_key = LV_COLOR_TRANSP;
 801374a:	6320      	str	r0, [r4, #48]	; 0x30
    driver->antialiasing = true;
 801374c:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
    driver->hor_res          = LV_HOR_RES_MAX;
 8013750:	4805      	ldr	r0, [pc, #20]	; (8013768 <lv_disp_drv_init+0x34>)
    driver->flush_cb         = NULL;
 8013752:	60e3      	str	r3, [r4, #12]
    driver->antialiasing = true;
 8013754:	f022 020f 	bic.w	r2, r2, #15

#if LV_USE_USER_DATA
    driver->user_data = NULL;
#endif

    driver->set_px_cb = NULL;
 8013758:	6163      	str	r3, [r4, #20]
    driver->antialiasing = true;
 801375a:	4311      	orrs	r1, r2
    driver->buffer           = NULL;
 801375c:	e9c4 0300 	strd	r0, r3, [r4]
    driver->gpu_fill_cb  = NULL;
 8013760:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
    driver->antialiasing = true;
 8013764:	8121      	strh	r1, [r4, #8]
}
 8013766:	bd10      	pop	{r4, pc}
 8013768:	011001e0 	.word	0x011001e0

0801376c <lv_disp_buf_init>:
 *             It lets LVGL to render next frame into the other buffer while previous is being
 * sent. Set to `NULL` if unused.
 * @param size_in_px_cnt size of the `buf1` and `buf2` in pixel count.
 */
void lv_disp_buf_init(lv_disp_buf_t * disp_buf, void * buf1, void * buf2, uint32_t size_in_px_cnt)
{
 801376c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801376e:	460d      	mov	r5, r1
 8013770:	4604      	mov	r4, r0
 8013772:	4617      	mov	r7, r2
 8013774:	461e      	mov	r6, r3
    _lv_memset_00(disp_buf, sizeof(lv_disp_buf_t));
 8013776:	2124      	movs	r1, #36	; 0x24
 8013778:	f001 fffe 	bl	8015778 <_lv_memset_00>

    disp_buf->buf1    = buf1;
 801377c:	e9c4 5700 	strd	r5, r7, [r4]
    disp_buf->buf2    = buf2;
    disp_buf->buf_act = disp_buf->buf1;
    disp_buf->size    = size_in_px_cnt;
 8013780:	e9c4 5602 	strd	r5, r6, [r4, #8]
}
 8013784:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013786:	bf00      	nop

08013788 <lv_disp_drv_register>:
 * Automatically set the first display as active.
 * @param driver pointer to an initialized 'lv_disp_drv_t' variable (can be local variable)
 * @return pointer to the new display or NULL on error
 */
lv_disp_t * lv_disp_drv_register(lv_disp_drv_t * driver)
{
 8013788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801378a:	4606      	mov	r6, r0
    lv_disp_t * disp = _lv_ll_ins_head(&LV_GC_ROOT(_lv_disp_ll));
 801378c:	483b      	ldr	r0, [pc, #236]	; (801387c <lv_disp_drv_register+0xf4>)
 801378e:	f001 f917 	bl	80149c0 <_lv_ll_ins_head>
    if(!disp) {
 8013792:	2800      	cmp	r0, #0
 8013794:	d065      	beq.n	8013862 <lv_disp_drv_register+0xda>
        LV_ASSERT_MEM(disp);
        return NULL;
    }

    _lv_memset_00(disp, sizeof(lv_disp_t));
 8013796:	4604      	mov	r4, r0
 8013798:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 801379c:	f001 ffec 	bl	8015778 <_lv_memset_00>
    _lv_memcpy(&disp->driver, driver, sizeof(lv_disp_drv_t));

    _lv_ll_init(&disp->scr_ll, sizeof(lv_obj_t));
    disp->last_activity_time = 0;
 80137a0:	2500      	movs	r5, #0
    _lv_memcpy(&disp->driver, driver, sizeof(lv_disp_drv_t));
 80137a2:	4631      	mov	r1, r6
 80137a4:	2234      	movs	r2, #52	; 0x34

    if(disp_def == NULL) disp_def = disp;
 80137a6:	4f36      	ldr	r7, [pc, #216]	; (8013880 <lv_disp_drv_register+0xf8>)
    _lv_memcpy(&disp->driver, driver, sizeof(lv_disp_drv_t));
 80137a8:	4620      	mov	r0, r4
 80137aa:	f001 fc67 	bl	801507c <_lv_memcpy>
    _lv_ll_init(&disp->scr_ll, sizeof(lv_obj_t));
 80137ae:	214c      	movs	r1, #76	; 0x4c
 80137b0:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80137b4:	f001 f8fc 	bl	80149b0 <_lv_ll_init>

    lv_disp_t * disp_def_tmp = disp_def;
    disp_def                 = disp; /*Temporarily change the default screen to create the default screens on the
                                        new display*/
    /*Create a refresh task*/
    disp->refr_task = lv_task_create(_lv_disp_refr_task, LV_DISP_DEF_REFR_PERIOD, LV_REFR_TASK_PRIO, disp);
 80137b8:	4623      	mov	r3, r4
    if(disp_def == NULL) disp_def = disp;
 80137ba:	683e      	ldr	r6, [r7, #0]
    disp->refr_task = lv_task_create(_lv_disp_refr_task, LV_DISP_DEF_REFR_PERIOD, LV_REFR_TASK_PRIO, disp);
 80137bc:	2203      	movs	r2, #3
 80137be:	211e      	movs	r1, #30
 80137c0:	4830      	ldr	r0, [pc, #192]	; (8013884 <lv_disp_drv_register+0xfc>)
    disp->last_activity_time = 0;
 80137c2:	f8c4 5188 	str.w	r5, [r4, #392]	; 0x188
    if(disp_def == NULL) disp_def = disp;
 80137c6:	42ae      	cmp	r6, r5
 80137c8:	bf08      	it	eq
 80137ca:	4626      	moveq	r6, r4
    disp_def                 = disp; /*Temporarily change the default screen to create the default screens on the
 80137cc:	603c      	str	r4, [r7, #0]
    disp->refr_task = lv_task_create(_lv_disp_refr_task, LV_DISP_DEF_REFR_PERIOD, LV_REFR_TASK_PRIO, disp);
 80137ce:	f002 f9b7 	bl	8015b40 <lv_task_create>
 80137d2:	6360      	str	r0, [r4, #52]	; 0x34
    LV_ASSERT_MEM(disp->refr_task);
 80137d4:	f000 fff8 	bl	80147c8 <lv_debug_check_null>
 80137d8:	4603      	mov	r3, r0
 80137da:	2800      	cmp	r0, #0
 80137dc:	d03c      	beq.n	8013858 <lv_disp_drv_register+0xd0>
    if(disp->refr_task == NULL) return NULL;
 80137de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80137e0:	2b00      	cmp	r3, #0
 80137e2:	d047      	beq.n	8013874 <lv_disp_drv_register+0xec>

    disp->inv_p = 0;
 80137e4:	f8b4 2186 	ldrh.w	r2, [r4, #390]	; 0x186
    disp->last_activity_time = 0;

    disp->bg_color = LV_COLOR_WHITE;
 80137e8:	f04f 33ff 	mov.w	r3, #4294967295
#else
    disp->bg_opa = LV_OPA_COVER;
#endif

    disp->prev_scr  = NULL;
    disp->act_scr   = lv_obj_create(NULL, NULL); /*Create a default screen on the display*/
 80137ec:	4629      	mov	r1, r5
 80137ee:	4628      	mov	r0, r5
    disp->inv_p = 0;
 80137f0:	f365 0209 	bfi	r2, r5, #0, #10
    disp->bg_color = LV_COLOR_WHITE;
 80137f4:	65e3      	str	r3, [r4, #92]	; 0x5c
    disp->bg_opa = LV_OPA_COVER;
 80137f6:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    disp->inv_p = 0;
 80137fa:	f8a4 2186 	strh.w	r2, [r4, #390]	; 0x186
    disp->last_activity_time = 0;
 80137fe:	f8c4 5188 	str.w	r5, [r4, #392]	; 0x188
    disp->bg_img = NULL;
 8013802:	6625      	str	r5, [r4, #96]	; 0x60
    disp->prev_scr  = NULL;
 8013804:	64a5      	str	r5, [r4, #72]	; 0x48
    disp->act_scr   = lv_obj_create(NULL, NULL); /*Create a default screen on the display*/
 8013806:	f7f0 ff23 	bl	8004650 <lv_obj_create>
 801380a:	4603      	mov	r3, r0
    disp->top_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
 801380c:	4629      	mov	r1, r5
 801380e:	4628      	mov	r0, r5
    disp->act_scr   = lv_obj_create(NULL, NULL); /*Create a default screen on the display*/
 8013810:	6463      	str	r3, [r4, #68]	; 0x44
    disp->top_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
 8013812:	f7f0 ff1d 	bl	8004650 <lv_obj_create>
 8013816:	4603      	mov	r3, r0
    disp->sys_layer = lv_obj_create(NULL, NULL); /*Create sys layer on the display*/
 8013818:	4629      	mov	r1, r5
 801381a:	4628      	mov	r0, r5
    disp->top_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
 801381c:	6523      	str	r3, [r4, #80]	; 0x50
    disp->sys_layer = lv_obj_create(NULL, NULL); /*Create sys layer on the display*/
 801381e:	f7f0 ff17 	bl	8004650 <lv_obj_create>
 8013822:	4603      	mov	r3, r0
    lv_obj_reset_style_list(disp->top_layer, LV_OBJ_PART_MAIN);
 8013824:	4629      	mov	r1, r5
 8013826:	6d20      	ldr	r0, [r4, #80]	; 0x50
    disp->sys_layer = lv_obj_create(NULL, NULL); /*Create sys layer on the display*/
 8013828:	6563      	str	r3, [r4, #84]	; 0x54
    lv_obj_reset_style_list(disp->top_layer, LV_OBJ_PART_MAIN);
 801382a:	f7f2 fcab 	bl	8006184 <lv_obj_reset_style_list>
    lv_obj_reset_style_list(disp->sys_layer, LV_OBJ_PART_MAIN);
 801382e:	4629      	mov	r1, r5
 8013830:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013832:	f7f2 fca7 	bl	8006184 <lv_obj_reset_style_list>
    lv_obj_set_click(disp->top_layer, false);
 8013836:	4629      	mov	r1, r5
 8013838:	6d20      	ldr	r0, [r4, #80]	; 0x50
 801383a:	f7ef ff17 	bl	800366c <lv_obj_set_click>
    lv_obj_set_click(disp->sys_layer, false);
 801383e:	4629      	mov	r1, r5
 8013840:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013842:	f7ef ff13 	bl	800366c <lv_obj_set_click>

    lv_obj_invalidate(disp->act_scr);
 8013846:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8013848:	f7f0 f9a2 	bl	8003b90 <lv_obj_invalidate>

    disp_def = disp_def_tmp; /*Revert the default display*/

    lv_task_ready(disp->refr_task); /*Be sure the screen will be refreshed immediately on start up*/
 801384c:	6b60      	ldr	r0, [r4, #52]	; 0x34
    disp_def = disp_def_tmp; /*Revert the default display*/
 801384e:	603e      	str	r6, [r7, #0]
    lv_task_ready(disp->refr_task); /*Be sure the screen will be refreshed immediately on start up*/
 8013850:	f002 fa10 	bl	8015c74 <lv_task_ready>
    if(lv_disp_is_true_double_buf(disp) && disp->driver.set_px_cb) {
        LV_LOG_ERROR("Can't handle 2 screen sized buffers with set_px_cb. Display will not be refreshed.");
    }

    return disp;
}
 8013854:	4620      	mov	r0, r4
 8013856:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    LV_ASSERT_MEM(disp->refr_task);
 8013858:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801385a:	480b      	ldr	r0, [pc, #44]	; (8013888 <lv_disp_drv_register+0x100>)
 801385c:	f000 ffb8 	bl	80147d0 <lv_debug_log_error>
 8013860:	e7fe      	b.n	8013860 <lv_disp_drv_register+0xd8>
        LV_ASSERT_MEM(disp);
 8013862:	f000 ffb1 	bl	80147c8 <lv_debug_check_null>
 8013866:	b928      	cbnz	r0, 8013874 <lv_disp_drv_register+0xec>
 8013868:	2200      	movs	r2, #0
 801386a:	2300      	movs	r3, #0
 801386c:	4806      	ldr	r0, [pc, #24]	; (8013888 <lv_disp_drv_register+0x100>)
 801386e:	f000 ffaf 	bl	80147d0 <lv_debug_log_error>
 8013872:	e7fe      	b.n	8013872 <lv_disp_drv_register+0xea>
        return NULL;
 8013874:	2400      	movs	r4, #0
}
 8013876:	4620      	mov	r0, r4
 8013878:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801387a:	bf00      	nop
 801387c:	20020430 	.word	0x20020430
 8013880:	20018144 	.word	0x20018144
 8013884:	08008381 	.word	0x08008381
 8013888:	0801e1c4 	.word	0x0801e1c4

0801388c <lv_disp_get_default>:
 * Get the default display
 * @return pointer to the default display
 */
lv_disp_t * lv_disp_get_default(void)
{
    return disp_def;
 801388c:	4b01      	ldr	r3, [pc, #4]	; (8013894 <lv_disp_get_default+0x8>)
}
 801388e:	6818      	ldr	r0, [r3, #0]
 8013890:	4770      	bx	lr
 8013892:	bf00      	nop
 8013894:	20018144 	.word	0x20018144

08013898 <lv_disp_get_hor_res>:
 * @param disp pointer to a display (NULL to use the default display)
 * @return the horizontal resolution of the display
 */
lv_coord_t lv_disp_get_hor_res(lv_disp_t * disp)
{
    if(disp == NULL) disp = lv_disp_get_default();
 8013898:	b138      	cbz	r0, 80138aa <lv_disp_get_hor_res+0x12>

    if(disp == NULL)
        return LV_HOR_RES_MAX;
    else
        return disp->driver.rotated == 0 ? disp->driver.hor_res : disp->driver.ver_res;
 801389a:	7a03      	ldrb	r3, [r0, #8]
 801389c:	079b      	lsls	r3, r3, #30
 801389e:	bf54      	ite	pl
 80138a0:	f9b0 0000 	ldrshpl.w	r0, [r0]
 80138a4:	f9b0 0002 	ldrshmi.w	r0, [r0, #2]
 80138a8:	4770      	bx	lr
    return disp_def;
 80138aa:	4b03      	ldr	r3, [pc, #12]	; (80138b8 <lv_disp_get_hor_res+0x20>)
 80138ac:	6818      	ldr	r0, [r3, #0]
    if(disp == NULL)
 80138ae:	2800      	cmp	r0, #0
 80138b0:	d1f3      	bne.n	801389a <lv_disp_get_hor_res+0x2>
        return LV_HOR_RES_MAX;
 80138b2:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
}
 80138b6:	4770      	bx	lr
 80138b8:	20018144 	.word	0x20018144

080138bc <lv_disp_get_ver_res>:
 * @param disp pointer to a display (NULL to use the default display)
 * @return the vertical resolution of the display
 */
lv_coord_t lv_disp_get_ver_res(lv_disp_t * disp)
{
    if(disp == NULL) disp = lv_disp_get_default();
 80138bc:	b138      	cbz	r0, 80138ce <lv_disp_get_ver_res+0x12>

    if(disp == NULL)
        return LV_VER_RES_MAX;
    else
        return disp->driver.rotated == 0 ? disp->driver.ver_res : disp->driver.hor_res;
 80138be:	7a03      	ldrb	r3, [r0, #8]
 80138c0:	079b      	lsls	r3, r3, #30
 80138c2:	bf54      	ite	pl
 80138c4:	f9b0 0002 	ldrshpl.w	r0, [r0, #2]
 80138c8:	f9b0 0000 	ldrshmi.w	r0, [r0]
 80138cc:	4770      	bx	lr
    return disp_def;
 80138ce:	4b03      	ldr	r3, [pc, #12]	; (80138dc <lv_disp_get_ver_res+0x20>)
 80138d0:	6818      	ldr	r0, [r3, #0]
    if(disp == NULL)
 80138d2:	2800      	cmp	r0, #0
 80138d4:	d1f3      	bne.n	80138be <lv_disp_get_ver_res+0x2>
        return LV_VER_RES_MAX;
 80138d6:	f44f 7088 	mov.w	r0, #272	; 0x110
}
 80138da:	4770      	bx	lr
 80138dc:	20018144 	.word	0x20018144

080138e0 <lv_disp_get_dpi>:
 * @param disp pointer to a display (NULL to use the default display)
 * @return dpi of the display
 */
lv_coord_t lv_disp_get_dpi(lv_disp_t * disp)
{
    if(disp == NULL) disp = lv_disp_get_default();
 80138e0:	b118      	cbz	r0, 80138ea <lv_disp_get_dpi+0xa>
    if(disp == NULL) return LV_DPI;  /*Do not return 0 because it might be a divider*/
    return disp->driver.dpi;
 80138e2:	8900      	ldrh	r0, [r0, #8]
 80138e4:	f3c0 0089 	ubfx	r0, r0, #2, #10
 80138e8:	4770      	bx	lr
    return disp_def;
 80138ea:	4b03      	ldr	r3, [pc, #12]	; (80138f8 <lv_disp_get_dpi+0x18>)
 80138ec:	6818      	ldr	r0, [r3, #0]
    if(disp == NULL) return LV_DPI;  /*Do not return 0 because it might be a divider*/
 80138ee:	2800      	cmp	r0, #0
 80138f0:	d1f7      	bne.n	80138e2 <lv_disp_get_dpi+0x2>
 80138f2:	2082      	movs	r0, #130	; 0x82
}
 80138f4:	4770      	bx	lr
 80138f6:	bf00      	nop
 80138f8:	20018144 	.word	0x20018144

080138fc <lv_disp_get_size_category>:
 * @param disp pointer to a display (NULL to use the default display)
 * @return LV_DISP_SIZE_SMALL/MEDIUM/LARGE/EXTRA_LARGE
 */
lv_disp_size_t lv_disp_get_size_category(lv_disp_t * disp)
{
    if(disp == NULL) disp = lv_disp_get_default();
 80138fc:	b1c8      	cbz	r0, 8013932 <lv_disp_get_size_category+0x36>
        return disp->driver.rotated == 0 ? disp->driver.hor_res : disp->driver.ver_res;
 80138fe:	7a03      	ldrb	r3, [r0, #8]
    return disp->driver.dpi;
 8013900:	8902      	ldrh	r2, [r0, #8]
        return disp->driver.rotated == 0 ? disp->driver.hor_res : disp->driver.ver_res;
 8013902:	079b      	lsls	r3, r3, #30
 8013904:	f3c2 0289 	ubfx	r2, r2, #2, #10
 8013908:	bf54      	ite	pl
 801390a:	f9b0 3000 	ldrshpl.w	r3, [r0]
 801390e:	f9b0 3002 	ldrshmi.w	r3, [r0, #2]
    return disp->driver.dpi;
 8013912:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8013916:	005b      	lsls	r3, r3, #1
 8013918:	fbb3 f3f2 	udiv	r3, r3, r2

    uint32_t dpi = lv_disp_get_dpi(disp);

    w = w * 10 / dpi;

    if(w < LV_DISP_SMALL_LIMIT) return LV_DISP_SIZE_SMALL;
 801391c:	2b1d      	cmp	r3, #29
 801391e:	d801      	bhi.n	8013924 <lv_disp_get_size_category+0x28>
 8013920:	2000      	movs	r0, #0
 8013922:	4770      	bx	lr
    if(w < LV_DISP_MEDIUM_LIMIT) return LV_DISP_SIZE_MEDIUM;
 8013924:	2b31      	cmp	r3, #49	; 0x31
 8013926:	d908      	bls.n	801393a <lv_disp_get_size_category+0x3e>
    if(w < LV_DISP_LARGE_LIMIT) return LV_DISP_SIZE_LARGE;
    else return LV_DISP_SIZE_EXTRA_LARGE;
 8013928:	2b46      	cmp	r3, #70	; 0x46
 801392a:	bf34      	ite	cc
 801392c:	2002      	movcc	r0, #2
 801392e:	2003      	movcs	r0, #3
 8013930:	4770      	bx	lr
    return disp_def;
 8013932:	4b03      	ldr	r3, [pc, #12]	; (8013940 <lv_disp_get_size_category+0x44>)
 8013934:	6818      	ldr	r0, [r3, #0]
    if(disp == NULL) w = LV_HOR_RES_MAX;
 8013936:	2800      	cmp	r0, #0
 8013938:	d1e1      	bne.n	80138fe <lv_disp_get_size_category+0x2>
    if(w < LV_DISP_MEDIUM_LIMIT) return LV_DISP_SIZE_MEDIUM;
 801393a:	2001      	movs	r0, #1
}
 801393c:	4770      	bx	lr
 801393e:	bf00      	nop
 8013940:	20018144 	.word	0x20018144

08013944 <lv_disp_flush_ready>:
    if(disp_drv->screen_transp) {
        _lv_memset_00(disp_drv->buffer->buf_act, disp_drv->buffer->size * sizeof(lv_color32_t));
    }
#endif

    disp_drv->buffer->flushing = 0;
 8013944:	2200      	movs	r2, #0
 8013946:	6843      	ldr	r3, [r0, #4]
 8013948:	619a      	str	r2, [r3, #24]
    disp_drv->buffer->flushing_last = 0;
 801394a:	61da      	str	r2, [r3, #28]
}
 801394c:	4770      	bx	lr
 801394e:	bf00      	nop

08013950 <lv_disp_get_next>:
 * @param disp pointer to the current display. NULL to initialize.
 * @return the next display or NULL if no more. Give the first display when the parameter is NULL
 */
lv_disp_t * lv_disp_get_next(lv_disp_t * disp)
{
    if(disp == NULL)
 8013950:	4601      	mov	r1, r0
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_disp_ll));
 8013952:	4803      	ldr	r0, [pc, #12]	; (8013960 <lv_disp_get_next+0x10>)
    if(disp == NULL)
 8013954:	b109      	cbz	r1, 801395a <lv_disp_get_next+0xa>
    else
        return _lv_ll_get_next(&LV_GC_ROOT(_lv_disp_ll), disp);
 8013956:	f001 b911 	b.w	8014b7c <_lv_ll_get_next>
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_disp_ll));
 801395a:	f001 b907 	b.w	8014b6c <_lv_ll_get_head>
 801395e:	bf00      	nop
 8013960:	20020430 	.word	0x20020430

08013964 <lv_disp_get_buf>:
 * @return pointer to the internal buffers
 */
lv_disp_buf_t * lv_disp_get_buf(lv_disp_t * disp)
{
    return disp->driver.buffer;
}
 8013964:	6840      	ldr	r0, [r0, #4]
 8013966:	4770      	bx	lr

08013968 <lv_disp_get_inv_buf_size>:
 * Get the number of areas in the buffer
 * @return number of invalid areas
 */
uint16_t lv_disp_get_inv_buf_size(lv_disp_t * disp)
{
    return disp->inv_p;
 8013968:	f8b0 0186 	ldrh.w	r0, [r0, #390]	; 0x186
}
 801396c:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8013970:	4770      	bx	lr
 8013972:	bf00      	nop

08013974 <_lv_disp_pop_from_inv_buf>:
 * @param num number of areas to delete
 */
void _lv_disp_pop_from_inv_buf(lv_disp_t * disp, uint16_t num)
{

    if(disp->inv_p < num)
 8013974:	f8b0 2186 	ldrh.w	r2, [r0, #390]	; 0x186
 8013978:	f3c2 0309 	ubfx	r3, r2, #0, #10
 801397c:	428b      	cmp	r3, r1
 801397e:	db09      	blt.n	8013994 <_lv_disp_pop_from_inv_buf+0x20>
        disp->inv_p = 0;
    else
        disp->inv_p -= num;
 8013980:	1a5b      	subs	r3, r3, r1
 8013982:	f8b0 2186 	ldrh.w	r2, [r0, #390]	; 0x186
 8013986:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801398a:	f363 0209 	bfi	r2, r3, #0, #10
 801398e:	f8a0 2186 	strh.w	r2, [r0, #390]	; 0x186
}
 8013992:	4770      	bx	lr
 8013994:	f8b0 2186 	ldrh.w	r2, [r0, #390]	; 0x186
        disp->inv_p = 0;
 8013998:	2300      	movs	r3, #0
 801399a:	f363 0209 	bfi	r2, r3, #0, #10
 801399e:	f8a0 2186 	strh.w	r2, [r0, #390]	; 0x186
}
 80139a2:	4770      	bx	lr

080139a4 <lv_disp_is_double_buf>:
 * @param disp pointer to to display to check
 * @return true: double buffered; false: not double buffered
 */
bool lv_disp_is_double_buf(lv_disp_t * disp)
{
    if(disp->driver.buffer->buf1 && disp->driver.buffer->buf2)
 80139a4:	6843      	ldr	r3, [r0, #4]
 80139a6:	6818      	ldr	r0, [r3, #0]
 80139a8:	b118      	cbz	r0, 80139b2 <lv_disp_is_double_buf+0xe>
 80139aa:	6858      	ldr	r0, [r3, #4]
 80139ac:	3800      	subs	r0, #0
 80139ae:	bf18      	it	ne
 80139b0:	2001      	movne	r0, #1
        return true;
    else
        return false;
}
 80139b2:	4770      	bx	lr

080139b4 <lv_disp_is_true_double_buf>:
    if(disp->driver.buffer->buf1 && disp->driver.buffer->buf2)
 80139b4:	6842      	ldr	r2, [r0, #4]
 80139b6:	6813      	ldr	r3, [r2, #0]
 80139b8:	b15b      	cbz	r3, 80139d2 <lv_disp_is_true_double_buf+0x1e>
 80139ba:	6853      	ldr	r3, [r2, #4]
 80139bc:	b14b      	cbz	r3, 80139d2 <lv_disp_is_true_double_buf+0x1e>
 * @param disp pointer to to display to check
 * @return true: double buffered; false: not double buffered
 */
bool lv_disp_is_true_double_buf(lv_disp_t * disp)
{
    uint32_t scr_size = disp->driver.hor_res * disp->driver.ver_res;
 80139be:	8803      	ldrh	r3, [r0, #0]
 80139c0:	8840      	ldrh	r0, [r0, #2]

    if(lv_disp_is_double_buf(disp) && disp->driver.buffer->size == scr_size) {
 80139c2:	68d2      	ldr	r2, [r2, #12]
    uint32_t scr_size = disp->driver.hor_res * disp->driver.ver_res;
 80139c4:	fb13 f000 	smulbb	r0, r3, r0
    if(lv_disp_is_double_buf(disp) && disp->driver.buffer->size == scr_size) {
 80139c8:	1a80      	subs	r0, r0, r2
 80139ca:	fab0 f080 	clz	r0, r0
 80139ce:	0940      	lsrs	r0, r0, #5
 80139d0:	4770      	bx	lr
        return true;
    }
    else {
        return false;
 80139d2:	4618      	mov	r0, r3
    }
}
 80139d4:	4770      	bx	lr
 80139d6:	bf00      	nop

080139d8 <lv_indev_drv_init>:
 * After it you can set the fields.
 * @param driver pointer to driver variable to initialize
 */
void lv_indev_drv_init(lv_indev_drv_t * driver)
{
    _lv_memset_00(driver, sizeof(lv_indev_drv_t));
 80139d8:	211c      	movs	r1, #28
{
 80139da:	b510      	push	{r4, lr}
 80139dc:	4604      	mov	r4, r0
    _lv_memset_00(driver, sizeof(lv_indev_drv_t));
 80139de:	f001 fecb 	bl	8015778 <_lv_memset_00>

    driver->type                 = LV_INDEV_TYPE_NONE;
 80139e2:	2100      	movs	r1, #0
    driver->drag_limit           = LV_INDEV_DEF_DRAG_LIMIT;
    driver->drag_throw           = LV_INDEV_DEF_DRAG_THROW;
    driver->long_press_time      = LV_INDEV_DEF_LONG_PRESS_TIME;
 80139e4:	4a02      	ldr	r2, [pc, #8]	; (80139f0 <lv_indev_drv_init+0x18>)
    driver->drag_limit           = LV_INDEV_DEF_DRAG_LIMIT;
 80139e6:	4b03      	ldr	r3, [pc, #12]	; (80139f4 <lv_indev_drv_init+0x1c>)
    driver->type                 = LV_INDEV_TYPE_NONE;
 80139e8:	7021      	strb	r1, [r4, #0]
    driver->drag_limit           = LV_INDEV_DEF_DRAG_LIMIT;
 80139ea:	e9c4 3205 	strd	r3, r2, [r4, #20]
    driver->long_press_rep_time  = LV_INDEV_DEF_LONG_PRESS_REP_TIME;
    driver->gesture_limit        = LV_INDEV_DEF_GESTURE_LIMIT;
    driver->gesture_min_velocity = LV_INDEV_DEF_GESTURE_MIN_VELOCITY;
}
 80139ee:	bd10      	pop	{r4, pc}
 80139f0:	00640190 	.word	0x00640190
 80139f4:	32030a0a 	.word	0x32030a0a

080139f8 <lv_indev_drv_register>:
 * Register an initialized input device driver.
 * @param driver pointer to an initialized 'lv_indev_drv_t' variable (can be local variable)
 * @return pointer to the new input device or NULL on error
 */
lv_indev_t * lv_indev_drv_register(lv_indev_drv_t * driver)
{
 80139f8:	b538      	push	{r3, r4, r5, lr}

    if(driver->disp == NULL) driver->disp = lv_disp_get_default();
 80139fa:	68c3      	ldr	r3, [r0, #12]
{
 80139fc:	4605      	mov	r5, r0
    if(driver->disp == NULL) driver->disp = lv_disp_get_default();
 80139fe:	b343      	cbz	r3, 8013a52 <lv_indev_drv_register+0x5a>
        LV_LOG_WARN("lv_indev_drv_register: no display registered hence can't attach the indev to "
                    "a display");
        return NULL;
    }

    lv_indev_t * indev = _lv_ll_ins_head(&LV_GC_ROOT(_lv_indev_ll));
 8013a00:	4818      	ldr	r0, [pc, #96]	; (8013a64 <lv_indev_drv_register+0x6c>)
 8013a02:	f000 ffdd 	bl	80149c0 <_lv_ll_ins_head>
    if(!indev) {
 8013a06:	4604      	mov	r4, r0
 8013a08:	b1d0      	cbz	r0, 8013a40 <lv_indev_drv_register+0x48>
        LV_ASSERT_MEM(indev);
        return NULL;
    }

    _lv_memset_00(indev, sizeof(lv_indev_t));
 8013a0a:	2160      	movs	r1, #96	; 0x60
 8013a0c:	f001 feb4 	bl	8015778 <_lv_memset_00>
    _lv_memcpy(&indev->driver, driver, sizeof(lv_indev_drv_t));
 8013a10:	4629      	mov	r1, r5
 8013a12:	221c      	movs	r2, #28
 8013a14:	4620      	mov	r0, r4
 8013a16:	f001 fb31 	bl	801507c <_lv_memcpy>

    indev->proc.reset_query = 1;
 8013a1a:	f894 5050 	ldrb.w	r5, [r4, #80]	; 0x50
    indev->cursor           = NULL;
 8013a1e:	2000      	movs	r0, #0
    indev->group            = NULL;
    indev->btn_points       = NULL;

    indev->driver.read_task = lv_task_create(_lv_indev_read_task, LV_INDEV_DEF_READ_PERIOD, LV_TASK_PRIO_HIGH, indev);
 8013a20:	4623      	mov	r3, r4
    indev->proc.reset_query = 1;
 8013a22:	f045 0502 	orr.w	r5, r5, #2
    indev->driver.read_task = lv_task_create(_lv_indev_read_task, LV_INDEV_DEF_READ_PERIOD, LV_TASK_PRIO_HIGH, indev);
 8013a26:	2204      	movs	r2, #4
    indev->cursor           = NULL;
 8013a28:	6560      	str	r0, [r4, #84]	; 0x54
    indev->driver.read_task = lv_task_create(_lv_indev_read_task, LV_INDEV_DEF_READ_PERIOD, LV_TASK_PRIO_HIGH, indev);
 8013a2a:	211e      	movs	r1, #30
    indev->proc.reset_query = 1;
 8013a2c:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
    indev->btn_points       = NULL;
 8013a30:	e9c4 0016 	strd	r0, r0, [r4, #88]	; 0x58
    indev->driver.read_task = lv_task_create(_lv_indev_read_task, LV_INDEV_DEF_READ_PERIOD, LV_TASK_PRIO_HIGH, indev);
 8013a34:	480c      	ldr	r0, [pc, #48]	; (8013a68 <lv_indev_drv_register+0x70>)
 8013a36:	f002 f883 	bl	8015b40 <lv_task_create>
 8013a3a:	6120      	str	r0, [r4, #16]

    return indev;
}
 8013a3c:	4620      	mov	r0, r4
 8013a3e:	bd38      	pop	{r3, r4, r5, pc}
        LV_ASSERT_MEM(indev);
 8013a40:	f000 fec2 	bl	80147c8 <lv_debug_check_null>
 8013a44:	b950      	cbnz	r0, 8013a5c <lv_indev_drv_register+0x64>
 8013a46:	2200      	movs	r2, #0
 8013a48:	2300      	movs	r3, #0
 8013a4a:	4808      	ldr	r0, [pc, #32]	; (8013a6c <lv_indev_drv_register+0x74>)
 8013a4c:	f000 fec0 	bl	80147d0 <lv_debug_log_error>
 8013a50:	e7fe      	b.n	8013a50 <lv_indev_drv_register+0x58>
    if(driver->disp == NULL) driver->disp = lv_disp_get_default();
 8013a52:	f7ff ff1b 	bl	801388c <lv_disp_get_default>
 8013a56:	60e8      	str	r0, [r5, #12]
    if(driver->disp == NULL) {
 8013a58:	2800      	cmp	r0, #0
 8013a5a:	d1d1      	bne.n	8013a00 <lv_indev_drv_register+0x8>
        return NULL;
 8013a5c:	2400      	movs	r4, #0
}
 8013a5e:	4620      	mov	r0, r4
 8013a60:	bd38      	pop	{r3, r4, r5, pc}
 8013a62:	bf00      	nop
 8013a64:	20020424 	.word	0x20020424
 8013a68:	08002809 	.word	0x08002809
 8013a6c:	0801e1c4 	.word	0x0801e1c4

08013a70 <lv_indev_get_next>:
 * @return the next input devise or NULL if no more. Give the first input device when the parameter
 * is NULL
 */
lv_indev_t * lv_indev_get_next(lv_indev_t * indev)
{
    if(indev == NULL)
 8013a70:	4601      	mov	r1, r0
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
 8013a72:	4803      	ldr	r0, [pc, #12]	; (8013a80 <lv_indev_get_next+0x10>)
    if(indev == NULL)
 8013a74:	b109      	cbz	r1, 8013a7a <lv_indev_get_next+0xa>
    else
        return _lv_ll_get_next(&LV_GC_ROOT(_lv_indev_ll), indev);
 8013a76:	f001 b881 	b.w	8014b7c <_lv_ll_get_next>
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
 8013a7a:	f001 b877 	b.w	8014b6c <_lv_ll_get_head>
 8013a7e:	bf00      	nop
 8013a80:	20020424 	.word	0x20020424

08013a84 <_lv_indev_read>:
 * @param indev pointer to an input device
 * @param data input device will write its data here
 * @return false: no more data; true: there more data to read (buffered)
 */
bool _lv_indev_read(lv_indev_t * indev, lv_indev_data_t * data)
{
 8013a84:	b570      	push	{r4, r5, r6, lr}
 8013a86:	460d      	mov	r5, r1
 8013a88:	4604      	mov	r4, r0
    bool cont = false;

    _lv_memset_00(data, sizeof(lv_indev_data_t));
 8013a8a:	2110      	movs	r1, #16
 8013a8c:	4628      	mov	r0, r5
 8013a8e:	f001 fe73 	bl	8015778 <_lv_memset_00>

    /* For touchpad sometimes users don't the last pressed coordinate on release.
     * So be sure a coordinates are initialized to the last point */
    if(indev->driver.type == LV_INDEV_TYPE_POINTER) {
 8013a92:	7823      	ldrb	r3, [r4, #0]
 8013a94:	2b01      	cmp	r3, #1
 8013a96:	d015      	beq.n	8013ac4 <_lv_indev_read+0x40>
        data->point.x = indev->proc.types.pointer.act_point.x;
        data->point.y = indev->proc.types.pointer.act_point.y;
    }
    /*Similarly set at least the last key in case of the user doesn't set it on release*/
    else if(indev->driver.type == LV_INDEV_TYPE_KEYPAD) {
 8013a98:	2b02      	cmp	r3, #2
 8013a9a:	d009      	beq.n	8013ab0 <_lv_indev_read+0x2c>
        data->key = indev->proc.types.keypad.last_key;
    }
    /*For compatibility assume that used button was enter (encoder push) */
    else if(indev->driver.type == LV_INDEV_TYPE_ENCODER) {
 8013a9c:	2b04      	cmp	r3, #4
 8013a9e:	d109      	bne.n	8013ab4 <_lv_indev_read+0x30>
        data->key = LV_KEY_ENTER;
        data->enc_diff = 0;
 8013aa0:	2300      	movs	r3, #0
        data->key = LV_KEY_ENTER;
 8013aa2:	220a      	movs	r2, #10
        data->enc_diff = 0;
 8013aa4:	81ab      	strh	r3, [r5, #12]
    }

    if(indev->driver.read_cb) {
 8013aa6:	6863      	ldr	r3, [r4, #4]
        data->key = LV_KEY_ENTER;
 8013aa8:	606a      	str	r2, [r5, #4]
    if(indev->driver.read_cb) {
 8013aaa:	b933      	cbnz	r3, 8013aba <_lv_indev_read+0x36>
    else {
        LV_LOG_WARN("indev function registered");
    }

    return cont;
}
 8013aac:	4618      	mov	r0, r3
 8013aae:	bd70      	pop	{r4, r5, r6, pc}
        data->key = indev->proc.types.keypad.last_key;
 8013ab0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013ab2:	606b      	str	r3, [r5, #4]
    if(indev->driver.read_cb) {
 8013ab4:	6863      	ldr	r3, [r4, #4]
 8013ab6:	2b00      	cmp	r3, #0
 8013ab8:	d0f8      	beq.n	8013aac <_lv_indev_read+0x28>
        cont = indev->driver.read_cb(&indev->driver, data);
 8013aba:	4629      	mov	r1, r5
 8013abc:	4620      	mov	r0, r4
}
 8013abe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        cont = indev->driver.read_cb(&indev->driver, data);
 8013ac2:	4718      	bx	r3
        data->point.x = indev->proc.types.pointer.act_point.x;
 8013ac4:	6a23      	ldr	r3, [r4, #32]
 8013ac6:	602b      	str	r3, [r5, #0]
 8013ac8:	e7f4      	b.n	8013ab4 <_lv_indev_read+0x30>
 8013aca:	bf00      	nop

08013acc <lv_tick_inc>:
 * @param tick_period the call period of this function in milliseconds
 */
LV_ATTRIBUTE_TICK_INC void lv_tick_inc(uint32_t tick_period)
{
    tick_irq_flag = 0;
    sys_time += tick_period;
 8013acc:	4a05      	ldr	r2, [pc, #20]	; (8013ae4 <lv_tick_inc+0x18>)
    tick_irq_flag = 0;
 8013ace:	4906      	ldr	r1, [pc, #24]	; (8013ae8 <lv_tick_inc+0x1c>)
    sys_time += tick_period;
 8013ad0:	6813      	ldr	r3, [r2, #0]
{
 8013ad2:	b410      	push	{r4}
    tick_irq_flag = 0;
 8013ad4:	2400      	movs	r4, #0
    sys_time += tick_period;
 8013ad6:	4418      	add	r0, r3
    tick_irq_flag = 0;
 8013ad8:	700c      	strb	r4, [r1, #0]
}
 8013ada:	f85d 4b04 	ldr.w	r4, [sp], #4
    sys_time += tick_period;
 8013ade:	6010      	str	r0, [r2, #0]
}
 8013ae0:	4770      	bx	lr
 8013ae2:	bf00      	nop
 8013ae4:	20018148 	.word	0x20018148
 8013ae8:	2001814c 	.word	0x2001814c

08013aec <lv_tick_get>:
     * If `tick_irq_flag` was cleared in `lv_tick_inc` try to read again
     * until `tick_irq_flag` remains `1`. */
    uint32_t result;
    do {
        tick_irq_flag = 1;
        result        = sys_time;
 8013aec:	4a04      	ldr	r2, [pc, #16]	; (8013b00 <lv_tick_get+0x14>)
        tick_irq_flag = 1;
 8013aee:	2101      	movs	r1, #1
 8013af0:	4b04      	ldr	r3, [pc, #16]	; (8013b04 <lv_tick_get+0x18>)
        result        = sys_time;
 8013af2:	6810      	ldr	r0, [r2, #0]
        tick_irq_flag = 1;
 8013af4:	7019      	strb	r1, [r3, #0]
    } while(!tick_irq_flag); /*Continue until see a non interrupted cycle */
 8013af6:	781a      	ldrb	r2, [r3, #0]
 8013af8:	2a00      	cmp	r2, #0
 8013afa:	d0fb      	beq.n	8013af4 <lv_tick_get+0x8>

    return result;
#else
    return LV_TICK_CUSTOM_SYS_TIME_EXPR;
#endif
}
 8013afc:	4770      	bx	lr
 8013afe:	bf00      	nop
 8013b00:	20018148 	.word	0x20018148
 8013b04:	2001814c 	.word	0x2001814c

08013b08 <lv_tick_elaps>:
        result        = sys_time;
 8013b08:	4a06      	ldr	r2, [pc, #24]	; (8013b24 <lv_tick_elaps+0x1c>)
        tick_irq_flag = 1;
 8013b0a:	2101      	movs	r1, #1
 8013b0c:	4b06      	ldr	r3, [pc, #24]	; (8013b28 <lv_tick_elaps+0x20>)
 * Get the elapsed milliseconds since a previous time stamp
 * @param prev_tick a previous time stamp (return value of lv_tick_get() )
 * @return the elapsed milliseconds since 'prev_tick'
 */
uint32_t lv_tick_elaps(uint32_t prev_tick)
{
 8013b0e:	b410      	push	{r4}
        result        = sys_time;
 8013b10:	6814      	ldr	r4, [r2, #0]
        tick_irq_flag = 1;
 8013b12:	7019      	strb	r1, [r3, #0]
    } while(!tick_irq_flag); /*Continue until see a non interrupted cycle */
 8013b14:	781a      	ldrb	r2, [r3, #0]
 8013b16:	2a00      	cmp	r2, #0
 8013b18:	d0fb      	beq.n	8013b12 <lv_tick_elaps+0xa>
        prev_tick = UINT32_MAX - prev_tick + 1;
        prev_tick += act_time;
    }

    return prev_tick;
}
 8013b1a:	1a20      	subs	r0, r4, r0
 8013b1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013b20:	4770      	bx	lr
 8013b22:	bf00      	nop
 8013b24:	20018148 	.word	0x20018148
 8013b28:	2001814c 	.word	0x2001814c

08013b2c <lv_anim_path_linear>:
{
    LV_UNUSED(path);

    /*Calculate the current step*/
    uint32_t step;
    if(a->time == a->act_time) {
 8013b2c:	e9d1 2009 	ldrd	r2, r0, [r1, #36]	; 0x24
 8013b30:	4282      	cmp	r2, r0
 8013b32:	d00b      	beq.n	8013b4c <lv_anim_path_linear+0x20>
        step = LV_ANIM_RESOLUTION; /*Use the last value if the time fully elapsed*/
    }
    else {
        step = ((int32_t)a->act_time * LV_ANIM_RESOLUTION) / a->time;
 8013b34:	0280      	lsls	r0, r0, #10
 8013b36:	fb90 f0f2 	sdiv	r0, r0, r2
    }

    /* Get the new value which will be proportional to `step`
     * and the `start` and `end` values*/
    int32_t new_value;
    new_value = (int32_t)step * (a->end - a->start);
 8013b3a:	698a      	ldr	r2, [r1, #24]
 8013b3c:	6a0b      	ldr	r3, [r1, #32]
 8013b3e:	1a9b      	subs	r3, r3, r2
 8013b40:	fb00 f003 	mul.w	r0, r0, r3
    new_value = new_value >> LV_ANIM_RES_SHIFT;
    new_value += a->start;
 8013b44:	eb02 20a0 	add.w	r0, r2, r0, asr #10

    return (lv_anim_value_t)new_value;
}
 8013b48:	b200      	sxth	r0, r0
 8013b4a:	4770      	bx	lr
 8013b4c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8013b50:	e7f3      	b.n	8013b3a <lv_anim_path_linear+0xe>
 8013b52:	bf00      	nop

08013b54 <anim_task>:
/**
 * Periodically handle the animations.
 * @param param unused
 */
static void anim_task(lv_task_t * param)
{
 8013b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    (void)param;

    lv_anim_t * a;
    _LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a) {
 8013b58:	4872      	ldr	r0, [pc, #456]	; (8013d24 <anim_task+0x1d0>)
{
 8013b5a:	b093      	sub	sp, #76	; 0x4c
    _LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a) {
 8013b5c:	f001 f806 	bl	8014b6c <_lv_ll_get_head>
 8013b60:	b168      	cbz	r0, 8013b7e <anim_task+0x2a>
 8013b62:	4601      	mov	r1, r0
 8013b64:	4c6f      	ldr	r4, [pc, #444]	; (8013d24 <anim_task+0x1d0>)
        a->has_run = 0;
 8013b66:	f891 3040 	ldrb.w	r3, [r1, #64]	; 0x40
    _LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a) {
 8013b6a:	4620      	mov	r0, r4
        a->has_run = 0;
 8013b6c:	f36f 0341 	bfc	r3, #1, #1
 8013b70:	f881 3040 	strb.w	r3, [r1, #64]	; 0x40
    _LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a) {
 8013b74:	f001 f802 	bl	8014b7c <_lv_ll_get_next>
 8013b78:	4601      	mov	r1, r0
 8013b7a:	2800      	cmp	r0, #0
 8013b7c:	d1f3      	bne.n	8013b66 <anim_task+0x12>
    }

    uint32_t elaps = lv_tick_elaps(last_task_run);
 8013b7e:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8013d2c <anim_task+0x1d8>
 8013b82:	f8d9 0000 	ldr.w	r0, [r9]
 8013b86:	f7ff ffbf 	bl	8013b08 <lv_tick_elaps>
 8013b8a:	4606      	mov	r6, r0

    a = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 8013b8c:	4865      	ldr	r0, [pc, #404]	; (8013d24 <anim_task+0x1d0>)
 8013b8e:	f000 ffed 	bl	8014b6c <_lv_ll_get_head>

    while(a != NULL) {
 8013b92:	4604      	mov	r4, r0
 8013b94:	2800      	cmp	r0, #0
 8013b96:	d03a      	beq.n	8013c0e <anim_task+0xba>
 8013b98:	4d63      	ldr	r5, [pc, #396]	; (8013d28 <anim_task+0x1d4>)
        /*It can be set by `lv_anim_del()` typically in `end_cb`. If set then an animation delete
         * happened in `anim_ready_handler` which could make this linked list reading corrupt
         * because the list is changed meanwhile
         */
        anim_list_changed = false;
 8013b9a:	f04f 0800 	mov.w	r8, #0
        /* If the linked list changed due to anim. delete then it's not safe to continue
         * the reading of the list from here -> start from the head*/
        if(anim_list_changed)
            a = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
        else
            a = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 8013b9e:	4f61      	ldr	r7, [pc, #388]	; (8013d24 <anim_task+0x1d0>)
{
    anim_list_changed = true;
    if(_lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll)) == NULL)
        lv_task_set_prio(_lv_anim_task, LV_TASK_PRIO_OFF);
    else
        lv_task_set_prio(_lv_anim_task, LV_ANIM_TASK_PRIO);
 8013ba0:	f8df a18c 	ldr.w	sl, [pc, #396]	; 8013d30 <anim_task+0x1dc>
        if(!a->has_run) {
 8013ba4:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
        anim_list_changed = false;
 8013ba8:	f885 8000 	strb.w	r8, [r5]
        if(!a->has_run) {
 8013bac:	079a      	lsls	r2, r3, #30
 8013bae:	d435      	bmi.n	8013c1c <anim_task+0xc8>
            a->has_run = 1; /*The list readying might be reset so need to know which anim has run already*/
 8013bb0:	f043 0302 	orr.w	r3, r3, #2
            int32_t new_act_time = a->act_time + elaps;
 8013bb4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
            a->has_run = 1; /*The list readying might be reset so need to know which anim has run already*/
 8013bb6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
            if(a->act_time <= 0 && new_act_time >= 0) {
 8013bba:	1993      	adds	r3, r2, r6
 8013bbc:	d401      	bmi.n	8013bc2 <anim_task+0x6e>
 8013bbe:	2a00      	cmp	r2, #0
 8013bc0:	dd45      	ble.n	8013c4e <anim_task+0xfa>
            if(a->act_time >= 0) {
 8013bc2:	2b00      	cmp	r3, #0
            a->act_time += elaps;
 8013bc4:	62a3      	str	r3, [r4, #40]	; 0x28
            if(a->act_time >= 0) {
 8013bc6:	db1a      	blt.n	8013bfe <anim_task+0xaa>
                if(a->act_time > a->time) a->act_time = a->time;
 8013bc8:	6a62      	ldr	r2, [r4, #36]	; 0x24
                if(a->path.cb) new_value = a->path.cb(&a->path, a);
 8013bca:	f8d4 b010 	ldr.w	fp, [r4, #16]
                if(a->act_time > a->time) a->act_time = a->time;
 8013bce:	429a      	cmp	r2, r3
 8013bd0:	da2c      	bge.n	8013c2c <anim_task+0xd8>
 8013bd2:	62a2      	str	r2, [r4, #40]	; 0x28
                if(a->path.cb) new_value = a->path.cb(&a->path, a);
 8013bd4:	f1bb 0f00 	cmp.w	fp, #0
 8013bd8:	f000 808a 	beq.w	8013cf0 <anim_task+0x19c>
 8013bdc:	4621      	mov	r1, r4
 8013bde:	f104 0010 	add.w	r0, r4, #16
 8013be2:	47d8      	blx	fp
 8013be4:	4601      	mov	r1, r0
                if(new_value != a->current) {
 8013be6:	69e3      	ldr	r3, [r4, #28]
 8013be8:	428b      	cmp	r3, r1
 8013bea:	d004      	beq.n	8013bf6 <anim_task+0xa2>
                    if(a->exec_cb) a->exec_cb(a->var, new_value);
 8013bec:	6863      	ldr	r3, [r4, #4]
                    a->current = new_value;
 8013bee:	61e1      	str	r1, [r4, #28]
                    if(a->exec_cb) a->exec_cb(a->var, new_value);
 8013bf0:	b10b      	cbz	r3, 8013bf6 <anim_task+0xa2>
 8013bf2:	6820      	ldr	r0, [r4, #0]
 8013bf4:	4798      	blx	r3
                if(a->act_time >= a->time) {
 8013bf6:	e9d4 3209 	ldrd	r3, r2, [r4, #36]	; 0x24
 8013bfa:	429a      	cmp	r2, r3
 8013bfc:	da2f      	bge.n	8013c5e <anim_task+0x10a>
        if(anim_list_changed)
 8013bfe:	782b      	ldrb	r3, [r5, #0]
 8013c00:	b163      	cbz	r3, 8013c1c <anim_task+0xc8>
            a = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 8013c02:	4638      	mov	r0, r7
 8013c04:	f000 ffb2 	bl	8014b6c <_lv_ll_get_head>
 8013c08:	4604      	mov	r4, r0
    while(a != NULL) {
 8013c0a:	2c00      	cmp	r4, #0
 8013c0c:	d1ca      	bne.n	8013ba4 <anim_task+0x50>
    last_task_run = lv_tick_get();
 8013c0e:	f7ff ff6d 	bl	8013aec <lv_tick_get>
 8013c12:	f8c9 0000 	str.w	r0, [r9]
}
 8013c16:	b013      	add	sp, #76	; 0x4c
 8013c18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            a = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 8013c1c:	4621      	mov	r1, r4
 8013c1e:	4638      	mov	r0, r7
 8013c20:	f000 ffac 	bl	8014b7c <_lv_ll_get_next>
 8013c24:	4604      	mov	r4, r0
    while(a != NULL) {
 8013c26:	2c00      	cmp	r4, #0
 8013c28:	d1bc      	bne.n	8013ba4 <anim_task+0x50>
 8013c2a:	e7f0      	b.n	8013c0e <anim_task+0xba>
                if(a->path.cb) new_value = a->path.cb(&a->path, a);
 8013c2c:	f1bb 0f00 	cmp.w	fp, #0
 8013c30:	d1d4      	bne.n	8013bdc <anim_task+0x88>
    if(a->time == a->act_time) {
 8013c32:	429a      	cmp	r2, r3
 8013c34:	d05c      	beq.n	8013cf0 <anim_task+0x19c>
        step = ((int32_t)a->act_time * LV_ANIM_RESOLUTION) / a->time;
 8013c36:	029b      	lsls	r3, r3, #10
 8013c38:	fb93 f3f2 	sdiv	r3, r3, r2
    new_value = (int32_t)step * (a->end - a->start);
 8013c3c:	69a0      	ldr	r0, [r4, #24]
 8013c3e:	6a22      	ldr	r2, [r4, #32]
 8013c40:	1a12      	subs	r2, r2, r0
 8013c42:	fb03 f302 	mul.w	r3, r3, r2
    new_value += a->start;
 8013c46:	eb00 20a3 	add.w	r0, r0, r3, asr #10
    return (lv_anim_value_t)new_value;
 8013c4a:	b201      	sxth	r1, r0
 8013c4c:	e7cb      	b.n	8013be6 <anim_task+0x92>
                if(a->start_cb) a->start_cb(a);
 8013c4e:	68a2      	ldr	r2, [r4, #8]
 8013c50:	2a00      	cmp	r2, #0
 8013c52:	d04b      	beq.n	8013cec <anim_task+0x198>
 8013c54:	4620      	mov	r0, r4
 8013c56:	4790      	blx	r2
 8013c58:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8013c5a:	4433      	add	r3, r6
 8013c5c:	e7b1      	b.n	8013bc2 <anim_task+0x6e>
    if(a->playback_now == 0 && a->repeat_cnt > 0 && a->repeat_cnt != LV_ANIM_REPEAT_INFINITE) {
 8013c5e:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8013c62:	f013 0301 	ands.w	r3, r3, #1
 8013c66:	d122      	bne.n	8013cae <anim_task+0x15a>
 8013c68:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 8013c6a:	f64f 70fd 	movw	r0, #65533	; 0xfffd
 8013c6e:	1e4a      	subs	r2, r1, #1
 8013c70:	b292      	uxth	r2, r2
 8013c72:	4282      	cmp	r2, r0
 8013c74:	d94a      	bls.n	8013d0c <anim_task+0x1b8>
    if(a->repeat_cnt == 0 && ((a->playback_time == 0) || (a->playback_time && a->playback_now == 1))) {
 8013c76:	2900      	cmp	r1, #0
 8013c78:	d03d      	beq.n	8013cf6 <anim_task+0x1a2>
        if(a->playback_time != 0) {
 8013c7a:	e9d4 210c 	ldrd	r2, r1, [r4, #48]	; 0x30
        a->act_time = -(int32_t)(a->repeat_delay); /*Restart the animation*/
 8013c7e:	4249      	negs	r1, r1
 8013c80:	62a1      	str	r1, [r4, #40]	; 0x28
        if(a->playback_time != 0) {
 8013c82:	2a00      	cmp	r2, #0
 8013c84:	d0bb      	beq.n	8013bfe <anim_task+0xaa>
            if(a->playback_now == 0) a->act_time = -(int32_t)(a->playback_delay);
 8013c86:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8013c88:	4249      	negs	r1, r1
 8013c8a:	62a1      	str	r1, [r4, #40]	; 0x28
            a->playback_now = a->playback_now == 0 ? 1 : 0;
 8013c8c:	f083 0301 	eor.w	r3, r3, #1
 8013c90:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
            tmp      = a->start;
 8013c94:	69a0      	ldr	r0, [r4, #24]
            a->playback_now = a->playback_now == 0 ? 1 : 0;
 8013c96:	f363 0100 	bfi	r1, r3, #0, #1
            a->start = a->end;
 8013c9a:	6a23      	ldr	r3, [r4, #32]
            a->end   = tmp;
 8013c9c:	6220      	str	r0, [r4, #32]
            a->start = a->end;
 8013c9e:	61a3      	str	r3, [r4, #24]
            a->time = a->playback_now == 0 ? a->time_orig : a->playback_time;
 8013ca0:	07cb      	lsls	r3, r1, #31
            a->playback_now = a->playback_now == 0 ? 1 : 0;
 8013ca2:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
            a->time = a->playback_now == 0 ? a->time_orig : a->playback_time;
 8013ca6:	bf58      	it	pl
 8013ca8:	6be2      	ldrpl	r2, [r4, #60]	; 0x3c
 8013caa:	6262      	str	r2, [r4, #36]	; 0x24
 8013cac:	e7a7      	b.n	8013bfe <anim_task+0xaa>
    if(a->repeat_cnt == 0 && ((a->playback_time == 0) || (a->playback_time && a->playback_now == 1))) {
 8013cae:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 8013cb0:	bb2a      	cbnz	r2, 8013cfe <anim_task+0x1aa>
        _lv_memcpy(&a_tmp, a, sizeof(lv_anim_t));
 8013cb2:	2244      	movs	r2, #68	; 0x44
 8013cb4:	4621      	mov	r1, r4
 8013cb6:	a801      	add	r0, sp, #4
 8013cb8:	f001 f9e0 	bl	801507c <_lv_memcpy>
        _lv_ll_remove(&LV_GC_ROOT(_lv_anim_ll), a);
 8013cbc:	4621      	mov	r1, r4
 8013cbe:	4638      	mov	r0, r7
 8013cc0:	f000 fed8 	bl	8014a74 <_lv_ll_remove>
        lv_mem_free(a);
 8013cc4:	4620      	mov	r0, r4
 8013cc6:	f001 f8b1 	bl	8014e2c <lv_mem_free>
    anim_list_changed = true;
 8013cca:	2301      	movs	r3, #1
    if(_lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll)) == NULL)
 8013ccc:	4638      	mov	r0, r7
    anim_list_changed = true;
 8013cce:	702b      	strb	r3, [r5, #0]
    if(_lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll)) == NULL)
 8013cd0:	f000 ff4c 	bl	8014b6c <_lv_ll_get_head>
 8013cd4:	b1f8      	cbz	r0, 8013d16 <anim_task+0x1c2>
        lv_task_set_prio(_lv_anim_task, LV_ANIM_TASK_PRIO);
 8013cd6:	2104      	movs	r1, #4
 8013cd8:	f8da 0000 	ldr.w	r0, [sl]
 8013cdc:	f001 ff96 	bl	8015c0c <lv_task_set_prio>
        if(a_tmp.ready_cb != NULL) a_tmp.ready_cb(&a_tmp);
 8013ce0:	9b04      	ldr	r3, [sp, #16]
 8013ce2:	2b00      	cmp	r3, #0
 8013ce4:	d08b      	beq.n	8013bfe <anim_task+0xaa>
 8013ce6:	a801      	add	r0, sp, #4
 8013ce8:	4798      	blx	r3
    if(a->repeat_cnt == 0 && ((a->playback_time == 0) || (a->playback_time && a->playback_now == 1))) {
 8013cea:	e788      	b.n	8013bfe <anim_task+0xaa>
            a->act_time += elaps;
 8013cec:	62a3      	str	r3, [r4, #40]	; 0x28
            if(a->act_time >= 0) {
 8013cee:	e76b      	b.n	8013bc8 <anim_task+0x74>
{
 8013cf0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013cf4:	e7a2      	b.n	8013c3c <anim_task+0xe8>
    if(a->repeat_cnt == 0 && ((a->playback_time == 0) || (a->playback_time && a->playback_now == 1))) {
 8013cf6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8013cf8:	2a00      	cmp	r2, #0
 8013cfa:	d1c4      	bne.n	8013c86 <anim_task+0x132>
 8013cfc:	e7d9      	b.n	8013cb2 <anim_task+0x15e>
        if(a->playback_time != 0) {
 8013cfe:	e9d4 210c 	ldrd	r2, r1, [r4, #48]	; 0x30
        a->act_time = -(int32_t)(a->repeat_delay); /*Restart the animation*/
 8013d02:	4249      	negs	r1, r1
 8013d04:	62a1      	str	r1, [r4, #40]	; 0x28
        if(a->playback_time != 0) {
 8013d06:	2a00      	cmp	r2, #0
 8013d08:	d1c0      	bne.n	8013c8c <anim_task+0x138>
 8013d0a:	e778      	b.n	8013bfe <anim_task+0xaa>
        a->repeat_cnt--;
 8013d0c:	4611      	mov	r1, r2
 8013d0e:	8722      	strh	r2, [r4, #56]	; 0x38
    if(a->repeat_cnt == 0 && ((a->playback_time == 0) || (a->playback_time && a->playback_now == 1))) {
 8013d10:	2900      	cmp	r1, #0
 8013d12:	d1b2      	bne.n	8013c7a <anim_task+0x126>
 8013d14:	e7ef      	b.n	8013cf6 <anim_task+0x1a2>
        lv_task_set_prio(_lv_anim_task, LV_TASK_PRIO_OFF);
 8013d16:	4601      	mov	r1, r0
 8013d18:	f8da 0000 	ldr.w	r0, [sl]
 8013d1c:	f001 ff76 	bl	8015c0c <lv_task_set_prio>
}
 8013d20:	e7de      	b.n	8013ce0 <anim_task+0x18c>
 8013d22:	bf00      	nop
 8013d24:	200204f4 	.word	0x200204f4
 8013d28:	20018154 	.word	0x20018154
 8013d2c:	20018158 	.word	0x20018158
 8013d30:	20018150 	.word	0x20018150

08013d34 <_lv_anim_core_init>:
{
 8013d34:	b538      	push	{r3, r4, r5, lr}
    last_task_run = lv_tick_get();
 8013d36:	4c13      	ldr	r4, [pc, #76]	; (8013d84 <_lv_anim_core_init+0x50>)
    _lv_ll_init(&LV_GC_ROOT(_lv_anim_ll), sizeof(lv_anim_t));
 8013d38:	2144      	movs	r1, #68	; 0x44
 8013d3a:	4813      	ldr	r0, [pc, #76]	; (8013d88 <_lv_anim_core_init+0x54>)
 8013d3c:	f000 fe38 	bl	80149b0 <_lv_ll_init>
    _lv_anim_task = lv_task_create(anim_task, LV_DISP_DEF_REFR_PERIOD, LV_ANIM_TASK_PRIO, NULL);
 8013d40:	4d12      	ldr	r5, [pc, #72]	; (8013d8c <_lv_anim_core_init+0x58>)
    last_task_run = lv_tick_get();
 8013d42:	f7ff fed3 	bl	8013aec <lv_tick_get>
    _lv_anim_task = lv_task_create(anim_task, LV_DISP_DEF_REFR_PERIOD, LV_ANIM_TASK_PRIO, NULL);
 8013d46:	2300      	movs	r3, #0
    last_task_run = lv_tick_get();
 8013d48:	6020      	str	r0, [r4, #0]
    _lv_anim_task = lv_task_create(anim_task, LV_DISP_DEF_REFR_PERIOD, LV_ANIM_TASK_PRIO, NULL);
 8013d4a:	2204      	movs	r2, #4
 8013d4c:	211e      	movs	r1, #30
 8013d4e:	4810      	ldr	r0, [pc, #64]	; (8013d90 <_lv_anim_core_init+0x5c>)
 8013d50:	f001 fef6 	bl	8015b40 <lv_task_create>
    anim_list_changed = true;
 8013d54:	4c0f      	ldr	r4, [pc, #60]	; (8013d94 <_lv_anim_core_init+0x60>)
    _lv_anim_task = lv_task_create(anim_task, LV_DISP_DEF_REFR_PERIOD, LV_ANIM_TASK_PRIO, NULL);
 8013d56:	4602      	mov	r2, r0
    anim_list_changed = true;
 8013d58:	2301      	movs	r3, #1
    if(_lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll)) == NULL)
 8013d5a:	480b      	ldr	r0, [pc, #44]	; (8013d88 <_lv_anim_core_init+0x54>)
    _lv_anim_task = lv_task_create(anim_task, LV_DISP_DEF_REFR_PERIOD, LV_ANIM_TASK_PRIO, NULL);
 8013d5c:	602a      	str	r2, [r5, #0]
    anim_list_changed = true;
 8013d5e:	7023      	strb	r3, [r4, #0]
    if(_lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll)) == NULL)
 8013d60:	f000 ff04 	bl	8014b6c <_lv_ll_get_head>
 8013d64:	b130      	cbz	r0, 8013d74 <_lv_anim_core_init+0x40>
        lv_task_set_prio(_lv_anim_task, LV_ANIM_TASK_PRIO);
 8013d66:	6828      	ldr	r0, [r5, #0]
 8013d68:	2104      	movs	r1, #4
 8013d6a:	f001 ff4f 	bl	8015c0c <lv_task_set_prio>
    anim_list_changed = false; /*The list has not actually changed*/
 8013d6e:	2300      	movs	r3, #0
 8013d70:	7023      	strb	r3, [r4, #0]
}
 8013d72:	bd38      	pop	{r3, r4, r5, pc}
        lv_task_set_prio(_lv_anim_task, LV_TASK_PRIO_OFF);
 8013d74:	4601      	mov	r1, r0
 8013d76:	6828      	ldr	r0, [r5, #0]
 8013d78:	f001 ff48 	bl	8015c0c <lv_task_set_prio>
    anim_list_changed = false; /*The list has not actually changed*/
 8013d7c:	2300      	movs	r3, #0
 8013d7e:	7023      	strb	r3, [r4, #0]
}
 8013d80:	bd38      	pop	{r3, r4, r5, pc}
 8013d82:	bf00      	nop
 8013d84:	20018158 	.word	0x20018158
 8013d88:	200204f4 	.word	0x200204f4
 8013d8c:	20018150 	.word	0x20018150
 8013d90:	08013b55 	.word	0x08013b55
 8013d94:	20018154 	.word	0x20018154

08013d98 <lv_anim_init>:
{
 8013d98:	b570      	push	{r4, r5, r6, lr}
 8013d9a:	4604      	mov	r4, r0
    _lv_memset_00(a, sizeof(lv_anim_t));
 8013d9c:	2144      	movs	r1, #68	; 0x44
 8013d9e:	f001 fceb 	bl	8015778 <_lv_memset_00>
    a->repeat_cnt = 1;
 8013da2:	2201      	movs	r2, #1
    a->early_apply = 1;
 8013da4:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
    a->time    = 500;
 8013da8:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
    a->start   = 0;
 8013dac:	2500      	movs	r5, #0
    a->end     = 100;
 8013dae:	2064      	movs	r0, #100	; 0x64
 8013db0:	4904      	ldr	r1, [pc, #16]	; (8013dc4 <lv_anim_init+0x2c>)
    a->early_apply = 1;
 8013db2:	4313      	orrs	r3, r2
    a->time    = 500;
 8013db4:	6266      	str	r6, [r4, #36]	; 0x24
    a->start   = 0;
 8013db6:	61a5      	str	r5, [r4, #24]
    a->end     = 100;
 8013db8:	6220      	str	r0, [r4, #32]
LV_ATTRIBUTE_FAST_MEM static inline void * _lv_memcpy_small(void * dst, const void * src, size_t len)
{
    uint8_t * d8 = (uint8_t *)dst;
    const uint8_t * s8 = (const uint8_t *)src;

    while(len) {
 8013dba:	6121      	str	r1, [r4, #16]
    a->repeat_cnt = 1;
 8013dbc:	8722      	strh	r2, [r4, #56]	; 0x38
    a->early_apply = 1;
 8013dbe:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8013dc2:	bd70      	pop	{r4, r5, r6, pc}
 8013dc4:	08013b2d 	.word	0x08013b2d

08013dc8 <lv_anim_del>:
{
 8013dc8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013dcc:	4607      	mov	r7, r0
    a        = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 8013dce:	4824      	ldr	r0, [pc, #144]	; (8013e60 <lv_anim_del+0x98>)
{
 8013dd0:	460d      	mov	r5, r1
    a        = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 8013dd2:	f000 fecb 	bl	8014b6c <_lv_ll_get_head>
    while(a != NULL) {
 8013dd6:	4604      	mov	r4, r0
 8013dd8:	2800      	cmp	r0, #0
 8013dda:	d03d      	beq.n	8013e58 <lv_anim_del+0x90>
    bool del = false;
 8013ddc:	f04f 0800 	mov.w	r8, #0
        a_next = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 8013de0:	4e1f      	ldr	r6, [pc, #124]	; (8013e60 <lv_anim_del+0x98>)
    anim_list_changed = true;
 8013de2:	f8df 9084 	ldr.w	r9, [pc, #132]	; 8013e68 <lv_anim_del+0xa0>
        a_next = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 8013de6:	4621      	mov	r1, r4
 8013de8:	4630      	mov	r0, r6
 8013dea:	f000 fec7 	bl	8014b7c <_lv_ll_get_next>
        if(a->var == var && (a->exec_cb == exec_cb || exec_cb == NULL)) {
 8013dee:	6823      	ldr	r3, [r4, #0]
 8013df0:	46a2      	mov	sl, r4
        a_next = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 8013df2:	4604      	mov	r4, r0
        if(a->var == var && (a->exec_cb == exec_cb || exec_cb == NULL)) {
 8013df4:	42bb      	cmp	r3, r7
 8013df6:	d004      	beq.n	8013e02 <lv_anim_del+0x3a>
    while(a != NULL) {
 8013df8:	2c00      	cmp	r4, #0
 8013dfa:	d1f4      	bne.n	8013de6 <lv_anim_del+0x1e>
}
 8013dfc:	4640      	mov	r0, r8
 8013dfe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(a->var == var && (a->exec_cb == exec_cb || exec_cb == NULL)) {
 8013e02:	f8da 3004 	ldr.w	r3, [sl, #4]
            _lv_ll_remove(&LV_GC_ROOT(_lv_anim_ll), a);
 8013e06:	4651      	mov	r1, sl
 8013e08:	4630      	mov	r0, r6
        if(a->var == var && (a->exec_cb == exec_cb || exec_cb == NULL)) {
 8013e0a:	2d00      	cmp	r5, #0
 8013e0c:	bf18      	it	ne
 8013e0e:	42ab      	cmpne	r3, r5
 8013e10:	bf0c      	ite	eq
 8013e12:	f04f 0b01 	moveq.w	fp, #1
 8013e16:	f04f 0b00 	movne.w	fp, #0
 8013e1a:	d1ed      	bne.n	8013df8 <lv_anim_del+0x30>
            _lv_ll_remove(&LV_GC_ROOT(_lv_anim_ll), a);
 8013e1c:	f000 fe2a 	bl	8014a74 <_lv_ll_remove>
            lv_mem_free(a);
 8013e20:	4650      	mov	r0, sl
 8013e22:	f001 f803 	bl	8014e2c <lv_mem_free>
    anim_list_changed = true;
 8013e26:	2301      	movs	r3, #1
    if(_lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll)) == NULL)
 8013e28:	4630      	mov	r0, r6
            del = true;
 8013e2a:	46d8      	mov	r8, fp
    anim_list_changed = true;
 8013e2c:	f889 3000 	strb.w	r3, [r9]
    if(_lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll)) == NULL)
 8013e30:	f000 fe9c 	bl	8014b6c <_lv_ll_get_head>
        lv_task_set_prio(_lv_anim_task, LV_ANIM_TASK_PRIO);
 8013e34:	2104      	movs	r1, #4
    if(_lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll)) == NULL)
 8013e36:	4603      	mov	r3, r0
 8013e38:	b130      	cbz	r0, 8013e48 <lv_anim_del+0x80>
        lv_task_set_prio(_lv_anim_task, LV_ANIM_TASK_PRIO);
 8013e3a:	4b0a      	ldr	r3, [pc, #40]	; (8013e64 <lv_anim_del+0x9c>)
 8013e3c:	6818      	ldr	r0, [r3, #0]
 8013e3e:	f001 fee5 	bl	8015c0c <lv_task_set_prio>
    while(a != NULL) {
 8013e42:	2c00      	cmp	r4, #0
 8013e44:	d1cf      	bne.n	8013de6 <lv_anim_del+0x1e>
 8013e46:	e7d9      	b.n	8013dfc <lv_anim_del+0x34>
        lv_task_set_prio(_lv_anim_task, LV_TASK_PRIO_OFF);
 8013e48:	4a06      	ldr	r2, [pc, #24]	; (8013e64 <lv_anim_del+0x9c>)
 8013e4a:	4619      	mov	r1, r3
 8013e4c:	6810      	ldr	r0, [r2, #0]
 8013e4e:	f001 fedd 	bl	8015c0c <lv_task_set_prio>
    while(a != NULL) {
 8013e52:	2c00      	cmp	r4, #0
 8013e54:	d1c7      	bne.n	8013de6 <lv_anim_del+0x1e>
 8013e56:	e7d1      	b.n	8013dfc <lv_anim_del+0x34>
    bool del = false;
 8013e58:	4680      	mov	r8, r0
}
 8013e5a:	4640      	mov	r0, r8
 8013e5c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e60:	200204f4 	.word	0x200204f4
 8013e64:	20018150 	.word	0x20018150
 8013e68:	20018154 	.word	0x20018154

08013e6c <lv_anim_start>:
    if(a->exec_cb != NULL) lv_anim_del(a->var, a->exec_cb); /*fp == NULL would delete all animations of var*/
 8013e6c:	6841      	ldr	r1, [r0, #4]
{
 8013e6e:	b538      	push	{r3, r4, r5, lr}
 8013e70:	4605      	mov	r5, r0
    if(a->exec_cb != NULL) lv_anim_del(a->var, a->exec_cb); /*fp == NULL would delete all animations of var*/
 8013e72:	b111      	cbz	r1, 8013e7a <lv_anim_start+0xe>
 8013e74:	6800      	ldr	r0, [r0, #0]
 8013e76:	f7ff ffa7 	bl	8013dc8 <lv_anim_del>
    if(_lv_ll_is_empty(&LV_GC_ROOT(_lv_anim_ll))) {
 8013e7a:	481d      	ldr	r0, [pc, #116]	; (8013ef0 <lv_anim_start+0x84>)
 8013e7c:	f000 feec 	bl	8014c58 <_lv_ll_is_empty>
 8013e80:	bb78      	cbnz	r0, 8013ee2 <lv_anim_start+0x76>
    lv_anim_t * new_anim = _lv_ll_ins_head(&LV_GC_ROOT(_lv_anim_ll));
 8013e82:	481b      	ldr	r0, [pc, #108]	; (8013ef0 <lv_anim_start+0x84>)
 8013e84:	f000 fd9c 	bl	80149c0 <_lv_ll_ins_head>
 8013e88:	4604      	mov	r4, r0
    LV_ASSERT_MEM(new_anim);
 8013e8a:	f000 fc9d 	bl	80147c8 <lv_debug_check_null>
 8013e8e:	4603      	mov	r3, r0
 8013e90:	b310      	cbz	r0, 8013ed8 <lv_anim_start+0x6c>
    if(new_anim == NULL) return;
 8013e92:	b304      	cbz	r4, 8013ed6 <lv_anim_start+0x6a>
    a->time_orig = a->time;
 8013e94:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    _lv_memcpy(new_anim, a, sizeof(lv_anim_t));
 8013e96:	4629      	mov	r1, r5
 8013e98:	2244      	movs	r2, #68	; 0x44
 8013e9a:	4620      	mov	r0, r4
    a->time_orig = a->time;
 8013e9c:	63eb      	str	r3, [r5, #60]	; 0x3c
    _lv_memcpy(new_anim, a, sizeof(lv_anim_t));
 8013e9e:	f001 f8ed 	bl	801507c <_lv_memcpy>
    if(new_anim->early_apply) {
 8013ea2:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 8013ea6:	07db      	lsls	r3, r3, #31
 8013ea8:	d506      	bpl.n	8013eb8 <lv_anim_start+0x4c>
        if(new_anim->exec_cb && new_anim->var) new_anim->exec_cb(new_anim->var, new_anim->start);
 8013eaa:	6863      	ldr	r3, [r4, #4]
 8013eac:	b123      	cbz	r3, 8013eb8 <lv_anim_start+0x4c>
 8013eae:	6820      	ldr	r0, [r4, #0]
 8013eb0:	b110      	cbz	r0, 8013eb8 <lv_anim_start+0x4c>
 8013eb2:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
 8013eb6:	4798      	blx	r3
    anim_list_changed = true;
 8013eb8:	4b0e      	ldr	r3, [pc, #56]	; (8013ef4 <lv_anim_start+0x88>)
 8013eba:	2201      	movs	r2, #1
    if(_lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll)) == NULL)
 8013ebc:	480c      	ldr	r0, [pc, #48]	; (8013ef0 <lv_anim_start+0x84>)
    anim_list_changed = true;
 8013ebe:	701a      	strb	r2, [r3, #0]
    if(_lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll)) == NULL)
 8013ec0:	f000 fe54 	bl	8014b6c <_lv_ll_get_head>
        lv_task_set_prio(_lv_anim_task, LV_TASK_PRIO_OFF);
 8013ec4:	4b0c      	ldr	r3, [pc, #48]	; (8013ef8 <lv_anim_start+0x8c>)
    if(_lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll)) == NULL)
 8013ec6:	4601      	mov	r1, r0
 8013ec8:	b100      	cbz	r0, 8013ecc <lv_anim_start+0x60>
        lv_task_set_prio(_lv_anim_task, LV_ANIM_TASK_PRIO);
 8013eca:	2104      	movs	r1, #4
 8013ecc:	6818      	ldr	r0, [r3, #0]
}
 8013ece:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        lv_task_set_prio(_lv_anim_task, LV_ANIM_TASK_PRIO);
 8013ed2:	f001 be9b 	b.w	8015c0c <lv_task_set_prio>
}
 8013ed6:	bd38      	pop	{r3, r4, r5, pc}
    LV_ASSERT_MEM(new_anim);
 8013ed8:	4622      	mov	r2, r4
 8013eda:	4808      	ldr	r0, [pc, #32]	; (8013efc <lv_anim_start+0x90>)
 8013edc:	f000 fc78 	bl	80147d0 <lv_debug_log_error>
 8013ee0:	e7fe      	b.n	8013ee0 <lv_anim_start+0x74>
        last_task_run = lv_tick_get() - 1;
 8013ee2:	f7ff fe03 	bl	8013aec <lv_tick_get>
 8013ee6:	4b06      	ldr	r3, [pc, #24]	; (8013f00 <lv_anim_start+0x94>)
 8013ee8:	3801      	subs	r0, #1
 8013eea:	6018      	str	r0, [r3, #0]
 8013eec:	e7c9      	b.n	8013e82 <lv_anim_start+0x16>
 8013eee:	bf00      	nop
 8013ef0:	200204f4 	.word	0x200204f4
 8013ef4:	20018154 	.word	0x20018154
 8013ef8:	20018150 	.word	0x20018150
 8013efc:	0801e1c4 	.word	0x0801e1c4
 8013f00:	20018158 	.word	0x20018158

08013f04 <lv_area_set>:
 * @param y1 top coordinate of the area
 * @param x2 right coordinate of the area
 * @param y2 bottom coordinate of the area
 */
void lv_area_set(lv_area_t * area_p, lv_coord_t x1, lv_coord_t y1, lv_coord_t x2, lv_coord_t y2)
{
 8013f04:	b410      	push	{r4}
 8013f06:	f9bd 4004 	ldrsh.w	r4, [sp, #4]
    area_p->x1 = x1;
 8013f0a:	8001      	strh	r1, [r0, #0]
    area_p->y1 = y1;
    area_p->x2 = x2;
    area_p->y2 = y2;
 8013f0c:	80c4      	strh	r4, [r0, #6]
    area_p->y1 = y1;
 8013f0e:	8042      	strh	r2, [r0, #2]
}
 8013f10:	f85d 4b04 	ldr.w	r4, [sp], #4
    area_p->x2 = x2;
 8013f14:	8083      	strh	r3, [r0, #4]
}
 8013f16:	4770      	bx	lr

08013f18 <lv_area_set_height>:
 * @param area_p pointer to an area
 * @param h the new height of the area (h == 1 makes y1 == y2)
 */
void lv_area_set_height(lv_area_t * area_p, lv_coord_t h)
{
    area_p->y2 = area_p->y1 + h - 1;
 8013f18:	3901      	subs	r1, #1
 8013f1a:	8843      	ldrh	r3, [r0, #2]
 8013f1c:	4419      	add	r1, r3
 8013f1e:	80c1      	strh	r1, [r0, #6]
}
 8013f20:	4770      	bx	lr
 8013f22:	bf00      	nop

08013f24 <lv_area_get_size>:
 */
uint32_t lv_area_get_size(const lv_area_t * area_p)
{
    uint32_t size;

    size = (uint32_t)(area_p->x2 - area_p->x1 + 1) * (area_p->y2 - area_p->y1 + 1);
 8013f24:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8013f28:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8013f2c:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8013f30:	1a5b      	subs	r3, r3, r1
 8013f32:	f9b0 1000 	ldrsh.w	r1, [r0]
 8013f36:	1c58      	adds	r0, r3, #1
 8013f38:	1a52      	subs	r2, r2, r1

    return size;
}
 8013f3a:	fb02 0000 	mla	r0, r2, r0, r0
 8013f3e:	4770      	bx	lr

08013f40 <_lv_area_intersect>:
 * @return false: the two area has NO common parts, res_p is invalid
 */
bool _lv_area_intersect(lv_area_t * res_p, const lv_area_t * a1_p, const lv_area_t * a2_p)
{
    /* Get the smaller area from 'a1_p' and 'a2_p' */
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
 8013f40:	f9b2 3000 	ldrsh.w	r3, [r2]
{
 8013f44:	b4f0      	push	{r4, r5, r6, r7}
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
 8013f46:	f9b1 5000 	ldrsh.w	r5, [r1]
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
 8013f4a:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 8013f4e:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
 8013f52:	42ab      	cmp	r3, r5
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
 8013f54:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
 8013f58:	bfb8      	it	lt
 8013f5a:	462b      	movlt	r3, r5
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
 8013f5c:	f9b2 5004 	ldrsh.w	r5, [r2, #4]
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
 8013f60:	42b4      	cmp	r4, r6
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
 8013f62:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
 8013f66:	bfb8      	it	lt
 8013f68:	4634      	movlt	r4, r6
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
 8013f6a:	f9b1 6006 	ldrsh.w	r6, [r1, #6]
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
 8013f6e:	42bd      	cmp	r5, r7
 8013f70:	4629      	mov	r1, r5
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
 8013f72:	8003      	strh	r3, [r0, #0]
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
 8013f74:	bfa8      	it	ge
 8013f76:	4639      	movge	r1, r7
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
 8013f78:	42b2      	cmp	r2, r6
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
 8013f7a:	8044      	strh	r4, [r0, #2]
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
 8013f7c:	bfa8      	it	ge
 8013f7e:	4632      	movge	r2, r6
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
 8013f80:	8081      	strh	r1, [r0, #4]

    /*If x1 or y1 greater then x2 or y2 then the areas union is empty*/
    bool union_ok = true;
    if((res_p->x1 > res_p->x2) || (res_p->y1 > res_p->y2)) {
 8013f82:	4294      	cmp	r4, r2
 8013f84:	bfd8      	it	le
 8013f86:	428b      	cmple	r3, r1
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
 8013f88:	80c2      	strh	r2, [r0, #6]
    if((res_p->x1 > res_p->x2) || (res_p->y1 > res_p->y2)) {
 8013f8a:	bfcc      	ite	gt
 8013f8c:	2301      	movgt	r3, #1
 8013f8e:	2300      	movle	r3, #0
        union_ok = false;
    }

    return union_ok;
}
 8013f90:	bcf0      	pop	{r4, r5, r6, r7}
 8013f92:	f083 0001 	eor.w	r0, r3, #1
 8013f96:	4770      	bx	lr

08013f98 <_lv_area_join>:
 * @param a1_p pointer to the first area
 * @param a2_p pointer to the second area
 */
void _lv_area_join(lv_area_t * a_res_p, const lv_area_t * a1_p, const lv_area_t * a2_p)
{
    a_res_p->x1 = LV_MATH_MIN(a1_p->x1, a2_p->x1);
 8013f98:	f9b1 3000 	ldrsh.w	r3, [r1]
{
 8013f9c:	b4f0      	push	{r4, r5, r6, r7}
    a_res_p->x1 = LV_MATH_MIN(a1_p->x1, a2_p->x1);
 8013f9e:	f9b2 6000 	ldrsh.w	r6, [r2]
    a_res_p->y1 = LV_MATH_MIN(a1_p->y1, a2_p->y1);
 8013fa2:	f9b2 5002 	ldrsh.w	r5, [r2, #2]
 8013fa6:	f9b1 7002 	ldrsh.w	r7, [r1, #2]
    a_res_p->x1 = LV_MATH_MIN(a1_p->x1, a2_p->x1);
 8013faa:	429e      	cmp	r6, r3
    a_res_p->x2 = LV_MATH_MAX(a1_p->x2, a2_p->x2);
 8013fac:	f9b2 4004 	ldrsh.w	r4, [r2, #4]
    a_res_p->x1 = LV_MATH_MIN(a1_p->x1, a2_p->x1);
 8013fb0:	bfa8      	it	ge
 8013fb2:	461e      	movge	r6, r3
    a_res_p->y2 = LV_MATH_MAX(a1_p->y2, a2_p->y2);
 8013fb4:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
    a_res_p->y1 = LV_MATH_MIN(a1_p->y1, a2_p->y1);
 8013fb8:	42bd      	cmp	r5, r7
    a_res_p->x2 = LV_MATH_MAX(a1_p->x2, a2_p->x2);
 8013fba:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
    a_res_p->y2 = LV_MATH_MAX(a1_p->y2, a2_p->y2);
 8013fbe:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
    a_res_p->y1 = LV_MATH_MIN(a1_p->y1, a2_p->y1);
 8013fc2:	bfa8      	it	ge
 8013fc4:	463d      	movge	r5, r7
    a_res_p->x2 = LV_MATH_MAX(a1_p->x2, a2_p->x2);
 8013fc6:	42a2      	cmp	r2, r4
    a_res_p->x1 = LV_MATH_MIN(a1_p->x1, a2_p->x1);
 8013fc8:	8006      	strh	r6, [r0, #0]
    a_res_p->x2 = LV_MATH_MAX(a1_p->x2, a2_p->x2);
 8013fca:	bfb8      	it	lt
 8013fcc:	4622      	movlt	r2, r4
    a_res_p->y2 = LV_MATH_MAX(a1_p->y2, a2_p->y2);
 8013fce:	428b      	cmp	r3, r1
    a_res_p->y1 = LV_MATH_MIN(a1_p->y1, a2_p->y1);
 8013fd0:	8045      	strh	r5, [r0, #2]
    a_res_p->y2 = LV_MATH_MAX(a1_p->y2, a2_p->y2);
 8013fd2:	bfb8      	it	lt
 8013fd4:	460b      	movlt	r3, r1
    a_res_p->x2 = LV_MATH_MAX(a1_p->x2, a2_p->x2);
 8013fd6:	8082      	strh	r2, [r0, #4]
}
 8013fd8:	bcf0      	pop	{r4, r5, r6, r7}
    a_res_p->y2 = LV_MATH_MAX(a1_p->y2, a2_p->y2);
 8013fda:	80c3      	strh	r3, [r0, #6]
}
 8013fdc:	4770      	bx	lr
 8013fde:	bf00      	nop

08013fe0 <_lv_area_is_point_on>:
 * @param p_p pointer to a point
 * @param radius radius of area (e.g. for rounded rectangle)
 * @return false:the point is out of the area
 */
bool _lv_area_is_point_on(const lv_area_t * a_p, const lv_point_t * p_p, lv_coord_t radius)
{
 8013fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    /*First check the basic area*/
    bool is_on_rect = false;
    if((p_p->x >= a_p->x1 && p_p->x <= a_p->x2) && ((p_p->y >= a_p->y1 && p_p->y <= a_p->y2))) {
 8013fe4:	f9b1 5000 	ldrsh.w	r5, [r1]
{
 8013fe8:	b089      	sub	sp, #36	; 0x24
    if((p_p->x >= a_p->x1 && p_p->x <= a_p->x2) && ((p_p->y >= a_p->y1 && p_p->y <= a_p->y2))) {
 8013fea:	f9b0 7000 	ldrsh.w	r7, [r0]
 8013fee:	42bd      	cmp	r5, r7
 8013ff0:	db70      	blt.n	80140d4 <_lv_area_is_point_on+0xf4>
 8013ff2:	f9b0 9004 	ldrsh.w	r9, [r0, #4]
 8013ff6:	454d      	cmp	r5, r9
 8013ff8:	dc6c      	bgt.n	80140d4 <_lv_area_is_point_on+0xf4>
 8013ffa:	f9b1 8002 	ldrsh.w	r8, [r1, #2]
 8013ffe:	f9b0 a002 	ldrsh.w	sl, [r0, #2]
 8014002:	45d0      	cmp	r8, sl
 8014004:	db66      	blt.n	80140d4 <_lv_area_is_point_on+0xf4>
 8014006:	f9b0 b006 	ldrsh.w	fp, [r0, #6]
 801400a:	45d8      	cmp	r8, fp
 801400c:	dc62      	bgt.n	80140d4 <_lv_area_is_point_on+0xf4>
        is_on_rect = true;
    }
    if(!is_on_rect)
        return false;
    /*Now handle potential rounded rectangles*/
    if(radius <= 0) {
 801400e:	2a00      	cmp	r2, #0
 8014010:	4616      	mov	r6, r2
 8014012:	dd63      	ble.n	80140dc <_lv_area_is_point_on+0xfc>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8014014:	fa1f f389 	uxth.w	r3, r9
    /*Top left*/
    corner_area.x1 = a_p->x1;
    corner_area.x2 = a_p->x1 + radius;
    corner_area.y1 = a_p->y1;
    corner_area.y2 = a_p->y1 + radius;
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 8014018:	a806      	add	r0, sp, #24
 801401a:	9103      	str	r1, [sp, #12]
 801401c:	461a      	mov	r2, r3
 801401e:	9304      	str	r3, [sp, #16]
 8014020:	b2bb      	uxth	r3, r7
    corner_area.x1 = a_p->x1;
 8014022:	f8ad 7018 	strh.w	r7, [sp, #24]
 8014026:	f102 0c01 	add.w	ip, r2, #1
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801402a:	fa1f f28b 	uxth.w	r2, fp
    corner_area.x2 = a_p->x1 + radius;
 801402e:	9302      	str	r3, [sp, #8]
 8014030:	9201      	str	r2, [sp, #4]
 8014032:	fa1f f28a 	uxth.w	r2, sl
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8014036:	ebac 0c03 	sub.w	ip, ip, r3
    corner_area.y1 = a_p->y1;
 801403a:	f8ad a01a 	strh.w	sl, [sp, #26]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801403e:	9200      	str	r2, [sp, #0]
 8014040:	9a01      	ldr	r2, [sp, #4]
    lv_coord_t w = lv_area_get_width(a_p) / 2;
 8014042:	fa0f fc8c 	sxth.w	ip, ip
 8014046:	1c54      	adds	r4, r2, #1
 8014048:	9a00      	ldr	r2, [sp, #0]
 801404a:	f1bc 0f00 	cmp.w	ip, #0
 801404e:	eba4 0402 	sub.w	r4, r4, r2
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 8014052:	f04f 0200 	mov.w	r2, #0
    lv_coord_t w = lv_area_get_width(a_p) / 2;
 8014056:	bfb8      	it	lt
 8014058:	f10c 0c01 	addlt.w	ip, ip, #1
    lv_coord_t h = lv_area_get_height(a_p) / 2;
 801405c:	b224      	sxth	r4, r4
    lv_coord_t w = lv_area_get_width(a_p) / 2;
 801405e:	ea4f 0c6c 	mov.w	ip, ip, asr #1
    lv_coord_t h = lv_area_get_height(a_p) / 2;
 8014062:	2c00      	cmp	r4, #0
    lv_coord_t max_radius = LV_MATH_MIN(w, h);
 8014064:	fa0f fc8c 	sxth.w	ip, ip
    lv_coord_t h = lv_area_get_height(a_p) / 2;
 8014068:	bfb8      	it	lt
 801406a:	3401      	addlt	r4, #1
    lv_coord_t max_radius = LV_MATH_MIN(w, h);
 801406c:	1064      	asrs	r4, r4, #1
    corner_area.x2 = a_p->x1 + radius;
 801406e:	4564      	cmp	r4, ip
 8014070:	bfa8      	it	ge
 8014072:	4664      	movge	r4, ip
 8014074:	42b4      	cmp	r4, r6
 8014076:	bfa8      	it	ge
 8014078:	4634      	movge	r4, r6
 801407a:	b2a6      	uxth	r6, r4
 801407c:	18f4      	adds	r4, r6, r3
    corner_area.y2 = a_p->y1 + radius;
 801407e:	9b00      	ldr	r3, [sp, #0]
 8014080:	eb06 0c03 	add.w	ip, r6, r3
    corner_area.x2 = a_p->x1 + radius;
 8014084:	b2a4      	uxth	r4, r4
    corner_area.y2 = a_p->y1 + radius;
 8014086:	fa0f f38c 	sxth.w	r3, ip
    corner_area.x2 = a_p->x1 + radius;
 801408a:	f8ad 401c 	strh.w	r4, [sp, #28]
    corner_area.y2 = a_p->y1 + radius;
 801408e:	9305      	str	r3, [sp, #20]
 8014090:	f8ad 301e 	strh.w	r3, [sp, #30]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 8014094:	f7ff ffa4 	bl	8013fe0 <_lv_area_is_point_on>
 8014098:	e9dd 3102 	ldrd	r3, r1, [sp, #8]
 801409c:	b300      	cbz	r0, 80140e0 <_lv_area_is_point_on+0x100>
        corner_area.x2 += radius;
 801409e:	4434      	add	r4, r6
    lv_coord_t cx = area->x1 + r;
    lv_coord_t cy = area->y1 + r;

    /*Simplify the code by moving everything to (0, 0) */
    lv_coord_t px = p->x - cx;
    lv_coord_t py = p->y - cy;
 80140a0:	9a00      	ldr	r2, [sp, #0]
    lv_coord_t px = p->x - cx;
 80140a2:	1aeb      	subs	r3, r5, r3
    lv_coord_t r = (area->x2 - area->x1) / 2;
 80140a4:	b224      	sxth	r4, r4
    lv_coord_t py = p->y - cy;
 80140a6:	eba8 0802 	sub.w	r8, r8, r2
    lv_coord_t r = (area->x2 - area->x1) / 2;
 80140aa:	1be7      	subs	r7, r4, r7
 80140ac:	bf48      	it	mi
 80140ae:	3701      	addmi	r7, #1
    lv_coord_t cx = area->x1 + r;
 80140b0:	f3c7 004f 	ubfx	r0, r7, #1, #16
    lv_coord_t r = (area->x2 - area->x1) / 2;
 80140b4:	107f      	asrs	r7, r7, #1
    lv_coord_t py = p->y - cy;
 80140b6:	eba8 0800 	sub.w	r8, r8, r0
    lv_coord_t px = p->x - cx;
 80140ba:	1a1b      	subs	r3, r3, r0

    uint32_t r_sqrd = r * r;
 80140bc:	fb07 f707 	mul.w	r7, r7, r7
    uint32_t dist = (px * px) + (py * py);
 80140c0:	fb18 f808 	smulbb	r8, r8, r8
    lv_coord_t px = p->x - cx;
 80140c4:	b218      	sxth	r0, r3
    uint32_t dist = (px * px) + (py * py);
 80140c6:	fb00 8000 	mla	r0, r0, r0, r8

    if(dist <= r_sqrd)
 80140ca:	4287      	cmp	r7, r0
 80140cc:	bf34      	ite	cc
 80140ce:	2000      	movcc	r0, #0
 80140d0:	2001      	movcs	r0, #1
 80140d2:	e000      	b.n	80140d6 <_lv_area_is_point_on+0xf6>
        return false;
 80140d4:	2000      	movs	r0, #0
}
 80140d6:	b009      	add	sp, #36	; 0x24
 80140d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return true;
 80140dc:	2001      	movs	r0, #1
 80140de:	e7fa      	b.n	80140d6 <_lv_area_is_point_on+0xf6>
    corner_area.y1 = a_p->y2 - radius;
 80140e0:	9303      	str	r3, [sp, #12]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 80140e2:	4602      	mov	r2, r0
    corner_area.y1 = a_p->y2 - radius;
 80140e4:	9b01      	ldr	r3, [sp, #4]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 80140e6:	a806      	add	r0, sp, #24
 80140e8:	9102      	str	r1, [sp, #8]
    corner_area.y1 = a_p->y2 - radius;
 80140ea:	eba3 0c06 	sub.w	ip, r3, r6
    corner_area.y2 = a_p->y2;
 80140ee:	f8ad b01e 	strh.w	fp, [sp, #30]
    corner_area.y1 = a_p->y2 - radius;
 80140f2:	f8ad c01a 	strh.w	ip, [sp, #26]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 80140f6:	f7ff ff73 	bl	8013fe0 <_lv_area_is_point_on>
 80140fa:	9902      	ldr	r1, [sp, #8]
 80140fc:	b1e0      	cbz	r0, 8014138 <_lv_area_is_point_on+0x158>
        corner_area.x2 += radius;
 80140fe:	4434      	add	r4, r6
    lv_coord_t py = p->y - cy;
 8014100:	9a01      	ldr	r2, [sp, #4]
    lv_coord_t r = (area->x2 - area->x1) / 2;
 8014102:	9b03      	ldr	r3, [sp, #12]
 8014104:	b224      	sxth	r4, r4
    lv_coord_t py = p->y - cy;
 8014106:	eba8 0802 	sub.w	r8, r8, r2
    lv_coord_t px = p->x - cx;
 801410a:	1aeb      	subs	r3, r5, r3
    lv_coord_t r = (area->x2 - area->x1) / 2;
 801410c:	1be7      	subs	r7, r4, r7
    lv_coord_t py = p->y - cy;
 801410e:	eb08 0646 	add.w	r6, r8, r6, lsl #1
    lv_coord_t r = (area->x2 - area->x1) / 2;
 8014112:	bf48      	it	mi
 8014114:	3701      	addmi	r7, #1
    lv_coord_t cx = area->x1 + r;
 8014116:	f3c7 004f 	ubfx	r0, r7, #1, #16
    lv_coord_t r = (area->x2 - area->x1) / 2;
 801411a:	107f      	asrs	r7, r7, #1
    lv_coord_t py = p->y - cy;
 801411c:	1a36      	subs	r6, r6, r0
    lv_coord_t px = p->x - cx;
 801411e:	1a1b      	subs	r3, r3, r0
    uint32_t r_sqrd = r * r;
 8014120:	fb07 f707 	mul.w	r7, r7, r7
    uint32_t dist = (px * px) + (py * py);
 8014124:	fb16 f606 	smulbb	r6, r6, r6
    lv_coord_t px = p->x - cx;
 8014128:	b218      	sxth	r0, r3
    uint32_t dist = (px * px) + (py * py);
 801412a:	fb00 6000 	mla	r0, r0, r0, r6
    if(dist <= r_sqrd)
 801412e:	4287      	cmp	r7, r0
 8014130:	bf34      	ite	cc
 8014132:	2000      	movcc	r0, #0
 8014134:	2001      	movcs	r0, #1
 8014136:	e7ce      	b.n	80140d6 <_lv_area_is_point_on+0xf6>
    corner_area.x1 = a_p->x2 - radius;
 8014138:	9b04      	ldr	r3, [sp, #16]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 801413a:	4602      	mov	r2, r0
 801413c:	a806      	add	r0, sp, #24
 801413e:	9102      	str	r1, [sp, #8]
    corner_area.x1 = a_p->x2 - radius;
 8014140:	1b9c      	subs	r4, r3, r6
    corner_area.x2 = a_p->x2;
 8014142:	f8ad 901c 	strh.w	r9, [sp, #28]
    corner_area.x1 = a_p->x2 - radius;
 8014146:	b2a4      	uxth	r4, r4
 8014148:	f8ad 4018 	strh.w	r4, [sp, #24]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 801414c:	f7ff ff48 	bl	8013fe0 <_lv_area_is_point_on>
 8014150:	9902      	ldr	r1, [sp, #8]
 8014152:	b310      	cbz	r0, 801419a <_lv_area_is_point_on+0x1ba>
        corner_area.x1 -= radius;
 8014154:	1ba3      	subs	r3, r4, r6
    lv_coord_t px = p->x - cx;
 8014156:	9a04      	ldr	r2, [sp, #16]
    lv_coord_t r = (area->x2 - area->x1) / 2;
 8014158:	b21b      	sxth	r3, r3
    lv_coord_t px = p->x - cx;
 801415a:	1aa8      	subs	r0, r5, r2
    lv_coord_t py = p->y - cy;
 801415c:	9a01      	ldr	r2, [sp, #4]
    lv_coord_t r = (area->x2 - area->x1) / 2;
 801415e:	ebb9 0903 	subs.w	r9, r9, r3
 8014162:	ea4f 0346 	mov.w	r3, r6, lsl #1
    lv_coord_t py = p->y - cy;
 8014166:	eba8 0802 	sub.w	r8, r8, r2
    lv_coord_t r = (area->x2 - area->x1) / 2;
 801416a:	bf48      	it	mi
 801416c:	f109 0901 	addmi.w	r9, r9, #1
 8014170:	b29b      	uxth	r3, r3
    lv_coord_t cx = area->x1 + r;
 8014172:	f3c9 024f 	ubfx	r2, r9, #1, #16
    lv_coord_t px = p->x - cx;
 8014176:	4418      	add	r0, r3
    lv_coord_t py = p->y - cy;
 8014178:	4443      	add	r3, r8
    lv_coord_t r = (area->x2 - area->x1) / 2;
 801417a:	ea4f 0969 	mov.w	r9, r9, asr #1
    lv_coord_t px = p->x - cx;
 801417e:	1a80      	subs	r0, r0, r2
    lv_coord_t py = p->y - cy;
 8014180:	1a9b      	subs	r3, r3, r2
    uint32_t r_sqrd = r * r;
 8014182:	fb09 f909 	mul.w	r9, r9, r9
    lv_coord_t px = p->x - cx;
 8014186:	b200      	sxth	r0, r0
    uint32_t dist = (px * px) + (py * py);
 8014188:	fb13 f303 	smulbb	r3, r3, r3
 801418c:	fb00 3000 	mla	r0, r0, r0, r3
    if(dist <= r_sqrd)
 8014190:	4581      	cmp	r9, r0
 8014192:	bf34      	ite	cc
 8014194:	2000      	movcc	r0, #0
 8014196:	2001      	movcs	r0, #1
 8014198:	e79d      	b.n	80140d6 <_lv_area_is_point_on+0xf6>
    corner_area.y2 = a_p->y1 + radius;
 801419a:	9b05      	ldr	r3, [sp, #20]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 801419c:	4602      	mov	r2, r0
 801419e:	a806      	add	r0, sp, #24
    corner_area.y1 = a_p->y1;
 80141a0:	f8ad a01a 	strh.w	sl, [sp, #26]
    corner_area.y2 = a_p->y1 + radius;
 80141a4:	f8ad 301e 	strh.w	r3, [sp, #30]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 80141a8:	f7ff ff1a 	bl	8013fe0 <_lv_area_is_point_on>
 80141ac:	2800      	cmp	r0, #0
 80141ae:	d095      	beq.n	80140dc <_lv_area_is_point_on+0xfc>
        corner_area.x1 -= radius;
 80141b0:	1ba3      	subs	r3, r4, r6
    lv_coord_t py = p->y - cy;
 80141b2:	9a00      	ldr	r2, [sp, #0]
    lv_coord_t r = (area->x2 - area->x1) / 2;
 80141b4:	b21b      	sxth	r3, r3
    lv_coord_t py = p->y - cy;
 80141b6:	eba8 0002 	sub.w	r0, r8, r2
    lv_coord_t r = (area->x2 - area->x1) / 2;
 80141ba:	ebb9 0903 	subs.w	r9, r9, r3
    lv_coord_t px = p->x - cx;
 80141be:	9b04      	ldr	r3, [sp, #16]
    lv_coord_t r = (area->x2 - area->x1) / 2;
 80141c0:	bf48      	it	mi
 80141c2:	f109 0901 	addmi.w	r9, r9, #1
    lv_coord_t px = p->x - cx;
 80141c6:	1aeb      	subs	r3, r5, r3
    lv_coord_t cx = area->x1 + r;
 80141c8:	f3c9 024f 	ubfx	r2, r9, #1, #16
    lv_coord_t px = p->x - cx;
 80141cc:	eb03 0346 	add.w	r3, r3, r6, lsl #1
    lv_coord_t r = (area->x2 - area->x1) / 2;
 80141d0:	ea4f 0969 	mov.w	r9, r9, asr #1
    lv_coord_t py = p->y - cy;
 80141d4:	1a80      	subs	r0, r0, r2
    lv_coord_t px = p->x - cx;
 80141d6:	1a9b      	subs	r3, r3, r2
    uint32_t r_sqrd = r * r;
 80141d8:	fb09 f909 	mul.w	r9, r9, r9
    uint32_t dist = (px * px) + (py * py);
 80141dc:	fb10 f200 	smulbb	r2, r0, r0
    lv_coord_t px = p->x - cx;
 80141e0:	b218      	sxth	r0, r3
    uint32_t dist = (px * px) + (py * py);
 80141e2:	fb00 2000 	mla	r0, r0, r0, r2
    if(dist <= r_sqrd)
 80141e6:	4581      	cmp	r9, r0
 80141e8:	bf34      	ite	cc
 80141ea:	2000      	movcc	r0, #0
 80141ec:	2001      	movcs	r0, #1
 80141ee:	e772      	b.n	80140d6 <_lv_area_is_point_on+0xf6>

080141f0 <_lv_area_is_on>:
    if((a1_p->x1 <= a2_p->x2) && (a1_p->x2 >= a2_p->x1) && (a1_p->y1 <= a2_p->y2) && (a1_p->y2 >= a2_p->y1)) {
 80141f0:	f9b0 2000 	ldrsh.w	r2, [r0]
 80141f4:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 80141f8:	429a      	cmp	r2, r3
 80141fa:	dc14      	bgt.n	8014226 <_lv_area_is_on+0x36>
 80141fc:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8014200:	f9b1 3000 	ldrsh.w	r3, [r1]
 8014204:	429a      	cmp	r2, r3
 8014206:	db0e      	blt.n	8014226 <_lv_area_is_on+0x36>
 8014208:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801420c:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8014210:	429a      	cmp	r2, r3
 8014212:	dc08      	bgt.n	8014226 <_lv_area_is_on+0x36>
 8014214:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8014218:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801421c:	4298      	cmp	r0, r3
 801421e:	bfb4      	ite	lt
 8014220:	2000      	movlt	r0, #0
 8014222:	2001      	movge	r0, #1
 8014224:	4770      	bx	lr
        return false;
 8014226:	2000      	movs	r0, #0
}
 8014228:	4770      	bx	lr
 801422a:	bf00      	nop

0801422c <_lv_area_is_in>:
{
 801422c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
 8014230:	f9b1 3000 	ldrsh.w	r3, [r1]
{
 8014234:	b082      	sub	sp, #8
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
 8014236:	f9b0 6000 	ldrsh.w	r6, [r0]
 801423a:	42b3      	cmp	r3, r6
 801423c:	dc1d      	bgt.n	801427a <_lv_area_is_in+0x4e>
 801423e:	460c      	mov	r4, r1
 8014240:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8014244:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8014248:	4299      	cmp	r1, r3
 801424a:	dc16      	bgt.n	801427a <_lv_area_is_in+0x4e>
 801424c:	f9b0 7004 	ldrsh.w	r7, [r0, #4]
 8014250:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8014254:	42b9      	cmp	r1, r7
 8014256:	db10      	blt.n	801427a <_lv_area_is_in+0x4e>
       ain_p->y2 <= aholder_p->y2) {
 8014258:	f9b0 8006 	ldrsh.w	r8, [r0, #6]
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
 801425c:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8014260:	4541      	cmp	r1, r8
 8014262:	db0a      	blt.n	801427a <_lv_area_is_in+0x4e>
    if(radius == 0) return true;
 8014264:	4615      	mov	r5, r2
 8014266:	b162      	cbz	r2, 8014282 <_lv_area_is_in+0x56>
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 8014268:	4620      	mov	r0, r4
 801426a:	a901      	add	r1, sp, #4
    p.x = ain_p->x1;
 801426c:	f8ad 6004 	strh.w	r6, [sp, #4]
    p.y = ain_p->y1;
 8014270:	f8ad 3006 	strh.w	r3, [sp, #6]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 8014274:	f7ff feb4 	bl	8013fe0 <_lv_area_is_point_on>
 8014278:	b928      	cbnz	r0, 8014286 <_lv_area_is_in+0x5a>
    if(!is_in) return false;
 801427a:	2000      	movs	r0, #0
}
 801427c:	b002      	add	sp, #8
 801427e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(radius == 0) return true;
 8014282:	2001      	movs	r0, #1
 8014284:	e7fa      	b.n	801427c <_lv_area_is_in+0x50>
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 8014286:	462a      	mov	r2, r5
 8014288:	a901      	add	r1, sp, #4
 801428a:	4620      	mov	r0, r4
    p.x = ain_p->x2;
 801428c:	f8ad 7004 	strh.w	r7, [sp, #4]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 8014290:	f7ff fea6 	bl	8013fe0 <_lv_area_is_point_on>
 8014294:	2800      	cmp	r0, #0
 8014296:	d0f0      	beq.n	801427a <_lv_area_is_in+0x4e>
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 8014298:	462a      	mov	r2, r5
 801429a:	a901      	add	r1, sp, #4
 801429c:	4620      	mov	r0, r4
    p.x = ain_p->x1;
 801429e:	f8ad 6004 	strh.w	r6, [sp, #4]
    p.y = ain_p->y2;
 80142a2:	f8ad 8006 	strh.w	r8, [sp, #6]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 80142a6:	f7ff fe9b 	bl	8013fe0 <_lv_area_is_point_on>
 80142aa:	2800      	cmp	r0, #0
 80142ac:	d0e5      	beq.n	801427a <_lv_area_is_in+0x4e>
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 80142ae:	462a      	mov	r2, r5
 80142b0:	a901      	add	r1, sp, #4
 80142b2:	4620      	mov	r0, r4
    p.x = ain_p->x2;
 80142b4:	f8ad 7004 	strh.w	r7, [sp, #4]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 80142b8:	f7ff fe92 	bl	8013fe0 <_lv_area_is_point_on>
 80142bc:	e7de      	b.n	801427c <_lv_area_is_in+0x50>
 80142be:	bf00      	nop

080142c0 <_lv_area_align>:
{
 80142c0:	b4f0      	push	{r4, r5, r6, r7}
 80142c2:	2a14      	cmp	r2, #20
 80142c4:	f200 819b 	bhi.w	80145fe <_lv_area_align+0x33e>
 80142c8:	e8df f012 	tbh	[pc, r2, lsl #1]
 80142cc:	0168016c 	.word	0x0168016c
 80142d0:	01480150 	.word	0x01480150
 80142d4:	011a013b 	.word	0x011a013b
 80142d8:	00f90113 	.word	0x00f90113
 80142dc:	00e800f2 	.word	0x00e800f2
 80142e0:	00bb00ca 	.word	0x00bb00ca
 80142e4:	009300b1 	.word	0x009300b1
 80142e8:	00780084 	.word	0x00780084
 80142ec:	004a005d 	.word	0x004a005d
 80142f0:	00290045 	.word	0x00290045
 80142f4:	0015      	.short	0x0015
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80142f6:	8882      	ldrh	r2, [r0, #4]
 80142f8:	8804      	ldrh	r4, [r0, #0]
 80142fa:	3201      	adds	r2, #1
 80142fc:	b295      	uxth	r5, r2
 80142fe:	1b2a      	subs	r2, r5, r4
            res->x = lv_area_get_width(base);
 8014300:	801a      	strh	r2, [r3, #0]
            res->y = lv_area_get_height(base) - lv_area_get_height(to_align);
 8014302:	884a      	ldrh	r2, [r1, #2]
 8014304:	88c9      	ldrh	r1, [r1, #6]
 8014306:	88c4      	ldrh	r4, [r0, #6]
 8014308:	1a52      	subs	r2, r2, r1
 801430a:	8841      	ldrh	r1, [r0, #2]
 801430c:	4422      	add	r2, r4
 801430e:	1a52      	subs	r2, r2, r1
 8014310:	b292      	uxth	r2, r2
    res->y += base->y1;
 8014312:	8841      	ldrh	r1, [r0, #2]
    res->x += base->x1;
 8014314:	801d      	strh	r5, [r3, #0]
    res->y += base->y1;
 8014316:	440a      	add	r2, r1
}
 8014318:	bcf0      	pop	{r4, r5, r6, r7}
    res->y += base->y1;
 801431a:	805a      	strh	r2, [r3, #2]
}
 801431c:	4770      	bx	lr
 801431e:	8882      	ldrh	r2, [r0, #4]
 8014320:	8804      	ldrh	r4, [r0, #0]
 8014322:	3201      	adds	r2, #1
 8014324:	b295      	uxth	r5, r2
 8014326:	1b2a      	subs	r2, r5, r4
            res->x = lv_area_get_width(base);
 8014328:	801a      	strh	r2, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801432a:	88c4      	ldrh	r4, [r0, #6]
 801432c:	8842      	ldrh	r2, [r0, #2]
 801432e:	3401      	adds	r4, #1
 8014330:	1aa4      	subs	r4, r4, r2
 8014332:	88ca      	ldrh	r2, [r1, #6]
 8014334:	8849      	ldrh	r1, [r1, #2]
 8014336:	3201      	adds	r2, #1
            res->y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
 8014338:	b224      	sxth	r4, r4
 801433a:	1a52      	subs	r2, r2, r1
 801433c:	2c00      	cmp	r4, #0
 801433e:	b212      	sxth	r2, r2
 8014340:	bfb8      	it	lt
 8014342:	3401      	addlt	r4, #1
 8014344:	2a00      	cmp	r2, #0
 8014346:	ea4f 0464 	mov.w	r4, r4, asr #1
 801434a:	bfb8      	it	lt
 801434c:	3201      	addlt	r2, #1
 801434e:	eba4 0462 	sub.w	r4, r4, r2, asr #1
 8014352:	b2a2      	uxth	r2, r4
            break;
 8014354:	e7dd      	b.n	8014312 <_lv_area_align+0x52>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8014356:	8885      	ldrh	r5, [r0, #4]
            break;
 8014358:	2200      	movs	r2, #0
 801435a:	3501      	adds	r5, #1
 801435c:	b2ad      	uxth	r5, r5
 801435e:	e7d8      	b.n	8014312 <_lv_area_align+0x52>
            res->x = -lv_area_get_width(to_align);
 8014360:	880d      	ldrh	r5, [r1, #0]
 8014362:	888a      	ldrh	r2, [r1, #4]
 8014364:	3d01      	subs	r5, #1
 8014366:	1aad      	subs	r5, r5, r2
 8014368:	b2ad      	uxth	r5, r5
 801436a:	801d      	strh	r5, [r3, #0]
            res->y = lv_area_get_height(base) - lv_area_get_height(to_align);
 801436c:	884a      	ldrh	r2, [r1, #2]
 801436e:	88c9      	ldrh	r1, [r1, #6]
 8014370:	88c4      	ldrh	r4, [r0, #6]
 8014372:	1a52      	subs	r2, r2, r1
 8014374:	8841      	ldrh	r1, [r0, #2]
 8014376:	4422      	add	r2, r4
 8014378:	1a52      	subs	r2, r2, r1
 801437a:	b292      	uxth	r2, r2
 801437c:	805a      	strh	r2, [r3, #2]
            break;
 801437e:	8801      	ldrh	r1, [r0, #0]
 8014380:	440d      	add	r5, r1
 8014382:	b2ad      	uxth	r5, r5
 8014384:	e7c5      	b.n	8014312 <_lv_area_align+0x52>
            res->x = -lv_area_get_width(to_align);
 8014386:	880d      	ldrh	r5, [r1, #0]
 8014388:	888a      	ldrh	r2, [r1, #4]
 801438a:	3d01      	subs	r5, #1
 801438c:	1aad      	subs	r5, r5, r2
 801438e:	b2ad      	uxth	r5, r5
 8014390:	801d      	strh	r5, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8014392:	88c2      	ldrh	r2, [r0, #6]
 8014394:	8844      	ldrh	r4, [r0, #2]
 8014396:	3201      	adds	r2, #1
 8014398:	884e      	ldrh	r6, [r1, #2]
 801439a:	1b12      	subs	r2, r2, r4
 801439c:	88cc      	ldrh	r4, [r1, #6]
 801439e:	1c61      	adds	r1, r4, #1
            res->y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
 80143a0:	b212      	sxth	r2, r2
 80143a2:	1b89      	subs	r1, r1, r6
 80143a4:	2a00      	cmp	r2, #0
 80143a6:	b209      	sxth	r1, r1
 80143a8:	bfb8      	it	lt
 80143aa:	3201      	addlt	r2, #1
 80143ac:	2900      	cmp	r1, #0
 80143ae:	ea4f 0262 	mov.w	r2, r2, asr #1
 80143b2:	bfb8      	it	lt
 80143b4:	3101      	addlt	r1, #1
 80143b6:	eba2 0261 	sub.w	r2, r2, r1, asr #1
 80143ba:	e7de      	b.n	801437a <_lv_area_align+0xba>
            res->x = -lv_area_get_width(to_align);
 80143bc:	880d      	ldrh	r5, [r1, #0]
            res->y = 0;
 80143be:	2200      	movs	r2, #0
            res->x = -lv_area_get_width(to_align);
 80143c0:	8889      	ldrh	r1, [r1, #4]
 80143c2:	3d01      	subs	r5, #1
            res->y = 0;
 80143c4:	805a      	strh	r2, [r3, #2]
            res->x = -lv_area_get_width(to_align);
 80143c6:	1a6d      	subs	r5, r5, r1
 80143c8:	b2ad      	uxth	r5, r5
 80143ca:	801d      	strh	r5, [r3, #0]
            break;
 80143cc:	8801      	ldrh	r1, [r0, #0]
 80143ce:	440d      	add	r5, r1
 80143d0:	b2ad      	uxth	r5, r5
 80143d2:	e79e      	b.n	8014312 <_lv_area_align+0x52>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80143d4:	880a      	ldrh	r2, [r1, #0]
 80143d6:	8889      	ldrh	r1, [r1, #4]
 80143d8:	8885      	ldrh	r5, [r0, #4]
 80143da:	1a52      	subs	r2, r2, r1
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
 80143dc:	8801      	ldrh	r1, [r0, #0]
 80143de:	442a      	add	r2, r5
 80143e0:	b295      	uxth	r5, r2
 80143e2:	1a6a      	subs	r2, r5, r1
 80143e4:	801a      	strh	r2, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80143e6:	88c2      	ldrh	r2, [r0, #6]
 80143e8:	8841      	ldrh	r1, [r0, #2]
 80143ea:	3201      	adds	r2, #1
 80143ec:	1a52      	subs	r2, r2, r1
 80143ee:	b292      	uxth	r2, r2
            break;
 80143f0:	e78f      	b.n	8014312 <_lv_area_align+0x52>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80143f2:	8882      	ldrh	r2, [r0, #4]
 80143f4:	8804      	ldrh	r4, [r0, #0]
 80143f6:	888d      	ldrh	r5, [r1, #4]
 80143f8:	3201      	adds	r2, #1
 80143fa:	880e      	ldrh	r6, [r1, #0]
 80143fc:	1b12      	subs	r2, r2, r4
 80143fe:	1c69      	adds	r1, r5, #1
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
 8014400:	b212      	sxth	r2, r2
 8014402:	1b89      	subs	r1, r1, r6
 8014404:	2a00      	cmp	r2, #0
 8014406:	b209      	sxth	r1, r1
 8014408:	bfb8      	it	lt
 801440a:	3201      	addlt	r2, #1
 801440c:	2900      	cmp	r1, #0
 801440e:	ea4f 0262 	mov.w	r2, r2, asr #1
 8014412:	bfb8      	it	lt
 8014414:	3101      	addlt	r1, #1
 8014416:	eba2 0261 	sub.w	r2, r2, r1, asr #1
 801441a:	b292      	uxth	r2, r2
 801441c:	801a      	strh	r2, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801441e:	4422      	add	r2, r4
 8014420:	88c1      	ldrh	r1, [r0, #6]
 8014422:	8844      	ldrh	r4, [r0, #2]
 8014424:	b295      	uxth	r5, r2
 8014426:	1c4a      	adds	r2, r1, #1
 8014428:	1b12      	subs	r2, r2, r4
 801442a:	b292      	uxth	r2, r2
            break;
 801442c:	e771      	b.n	8014312 <_lv_area_align+0x52>
            res->x = 0;
 801442e:	2200      	movs	r2, #0
 8014430:	801a      	strh	r2, [r3, #0]
 8014432:	88c2      	ldrh	r2, [r0, #6]
 8014434:	8841      	ldrh	r1, [r0, #2]
 8014436:	3201      	adds	r2, #1
 8014438:	1a52      	subs	r2, r2, r1
 801443a:	b292      	uxth	r2, r2
            res->y = lv_area_get_height(base);
 801443c:	805a      	strh	r2, [r3, #2]
            break;
 801443e:	8805      	ldrh	r5, [r0, #0]
 8014440:	e767      	b.n	8014312 <_lv_area_align+0x52>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8014442:	888c      	ldrh	r4, [r1, #4]
 8014444:	880a      	ldrh	r2, [r1, #0]
 8014446:	8885      	ldrh	r5, [r0, #4]
 8014448:	1b12      	subs	r2, r2, r4
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
 801444a:	8804      	ldrh	r4, [r0, #0]
 801444c:	442a      	add	r2, r5
 801444e:	b295      	uxth	r5, r2
 8014450:	1b2a      	subs	r2, r5, r4
 8014452:	801a      	strh	r2, [r3, #0]
            res->y = -lv_area_get_height(to_align);
 8014454:	884a      	ldrh	r2, [r1, #2]
 8014456:	88c9      	ldrh	r1, [r1, #6]
 8014458:	3a01      	subs	r2, #1
 801445a:	1a52      	subs	r2, r2, r1
 801445c:	b292      	uxth	r2, r2
            break;
 801445e:	e758      	b.n	8014312 <_lv_area_align+0x52>
 8014460:	8882      	ldrh	r2, [r0, #4]
 8014462:	8805      	ldrh	r5, [r0, #0]
 8014464:	888c      	ldrh	r4, [r1, #4]
 8014466:	3201      	adds	r2, #1
 8014468:	880e      	ldrh	r6, [r1, #0]
 801446a:	1b52      	subs	r2, r2, r5
 801446c:	3401      	adds	r4, #1
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
 801446e:	b212      	sxth	r2, r2
 8014470:	1ba4      	subs	r4, r4, r6
 8014472:	2a00      	cmp	r2, #0
 8014474:	b224      	sxth	r4, r4
 8014476:	bfb8      	it	lt
 8014478:	3201      	addlt	r2, #1
 801447a:	2c00      	cmp	r4, #0
 801447c:	ea4f 0262 	mov.w	r2, r2, asr #1
 8014480:	bfb8      	it	lt
 8014482:	3401      	addlt	r4, #1
 8014484:	eba2 0264 	sub.w	r2, r2, r4, asr #1
 8014488:	b292      	uxth	r2, r2
 801448a:	801a      	strh	r2, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801448c:	442a      	add	r2, r5
            res->y = -lv_area_get_height(to_align);
 801448e:	884c      	ldrh	r4, [r1, #2]
 8014490:	b295      	uxth	r5, r2
 8014492:	88c9      	ldrh	r1, [r1, #6]
 8014494:	1e62      	subs	r2, r4, #1
 8014496:	1a52      	subs	r2, r2, r1
 8014498:	b292      	uxth	r2, r2
            break;
 801449a:	e73a      	b.n	8014312 <_lv_area_align+0x52>
            res->x = 0;
 801449c:	2200      	movs	r2, #0
 801449e:	801a      	strh	r2, [r3, #0]
            res->y = -lv_area_get_height(to_align);
 80144a0:	884a      	ldrh	r2, [r1, #2]
 80144a2:	88c9      	ldrh	r1, [r1, #6]
 80144a4:	3a01      	subs	r2, #1
 80144a6:	1a52      	subs	r2, r2, r1
 80144a8:	b292      	uxth	r2, r2
 80144aa:	805a      	strh	r2, [r3, #2]
            break;
 80144ac:	8805      	ldrh	r5, [r0, #0]
 80144ae:	e730      	b.n	8014312 <_lv_area_align+0x52>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80144b0:	888c      	ldrh	r4, [r1, #4]
 80144b2:	880a      	ldrh	r2, [r1, #0]
 80144b4:	8885      	ldrh	r5, [r0, #4]
 80144b6:	1b12      	subs	r2, r2, r4
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
 80144b8:	8804      	ldrh	r4, [r0, #0]
 80144ba:	442a      	add	r2, r5
 80144bc:	e732      	b.n	8014324 <_lv_area_align+0x64>
            res->x = 0;
 80144be:	2200      	movs	r2, #0
 80144c0:	801a      	strh	r2, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80144c2:	88c2      	ldrh	r2, [r0, #6]
 80144c4:	8844      	ldrh	r4, [r0, #2]
 80144c6:	3201      	adds	r2, #1
 80144c8:	884d      	ldrh	r5, [r1, #2]
 80144ca:	1b12      	subs	r2, r2, r4
 80144cc:	88cc      	ldrh	r4, [r1, #6]
 80144ce:	1c61      	adds	r1, r4, #1
            res->y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
 80144d0:	b212      	sxth	r2, r2
 80144d2:	1b49      	subs	r1, r1, r5
 80144d4:	2a00      	cmp	r2, #0
 80144d6:	b209      	sxth	r1, r1
 80144d8:	bfb8      	it	lt
 80144da:	3201      	addlt	r2, #1
 80144dc:	2900      	cmp	r1, #0
 80144de:	ea4f 0262 	mov.w	r2, r2, asr #1
 80144e2:	bfb8      	it	lt
 80144e4:	3101      	addlt	r1, #1
 80144e6:	eba2 0261 	sub.w	r2, r2, r1, asr #1
 80144ea:	b292      	uxth	r2, r2
 80144ec:	805a      	strh	r2, [r3, #2]
            break;
 80144ee:	8805      	ldrh	r5, [r0, #0]
 80144f0:	e70f      	b.n	8014312 <_lv_area_align+0x52>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80144f2:	888c      	ldrh	r4, [r1, #4]
 80144f4:	880a      	ldrh	r2, [r1, #0]
 80144f6:	8885      	ldrh	r5, [r0, #4]
 80144f8:	1b12      	subs	r2, r2, r4
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
 80144fa:	8804      	ldrh	r4, [r0, #0]
 80144fc:	442a      	add	r2, r5
 80144fe:	e6fd      	b.n	80142fc <_lv_area_align+0x3c>
 8014500:	8882      	ldrh	r2, [r0, #4]
 8014502:	8805      	ldrh	r5, [r0, #0]
 8014504:	888c      	ldrh	r4, [r1, #4]
 8014506:	3201      	adds	r2, #1
 8014508:	880e      	ldrh	r6, [r1, #0]
 801450a:	1b52      	subs	r2, r2, r5
 801450c:	3401      	adds	r4, #1
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
 801450e:	b212      	sxth	r2, r2
 8014510:	1ba4      	subs	r4, r4, r6
 8014512:	2a00      	cmp	r2, #0
 8014514:	b224      	sxth	r4, r4
 8014516:	bfb8      	it	lt
 8014518:	3201      	addlt	r2, #1
 801451a:	2c00      	cmp	r4, #0
 801451c:	ea4f 0262 	mov.w	r2, r2, asr #1
 8014520:	bfb8      	it	lt
 8014522:	3401      	addlt	r4, #1
 8014524:	eba2 0264 	sub.w	r2, r2, r4, asr #1
 8014528:	b292      	uxth	r2, r2
 801452a:	801a      	strh	r2, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801452c:	442a      	add	r2, r5
            res->y = lv_area_get_height(base) - lv_area_get_height(to_align);
 801452e:	884c      	ldrh	r4, [r1, #2]
 8014530:	88c9      	ldrh	r1, [r1, #6]
 8014532:	b295      	uxth	r5, r2
 8014534:	88c6      	ldrh	r6, [r0, #6]
 8014536:	1a62      	subs	r2, r4, r1
 8014538:	8841      	ldrh	r1, [r0, #2]
 801453a:	4432      	add	r2, r6
 801453c:	1a52      	subs	r2, r2, r1
 801453e:	b292      	uxth	r2, r2
            break;
 8014540:	e6e7      	b.n	8014312 <_lv_area_align+0x52>
            res->x = 0;
 8014542:	2200      	movs	r2, #0
 8014544:	801a      	strh	r2, [r3, #0]
            res->y = lv_area_get_height(base) - lv_area_get_height(to_align);
 8014546:	884a      	ldrh	r2, [r1, #2]
 8014548:	88c9      	ldrh	r1, [r1, #6]
 801454a:	88c4      	ldrh	r4, [r0, #6]
 801454c:	1a52      	subs	r2, r2, r1
 801454e:	8841      	ldrh	r1, [r0, #2]
 8014550:	4422      	add	r2, r4
 8014552:	1a52      	subs	r2, r2, r1
 8014554:	b292      	uxth	r2, r2
 8014556:	805a      	strh	r2, [r3, #2]
            break;
 8014558:	8805      	ldrh	r5, [r0, #0]
 801455a:	e6da      	b.n	8014312 <_lv_area_align+0x52>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801455c:	880d      	ldrh	r5, [r1, #0]
            break;
 801455e:	2200      	movs	r2, #0
 8014560:	888c      	ldrh	r4, [r1, #4]
 8014562:	8881      	ldrh	r1, [r0, #4]
 8014564:	1b2d      	subs	r5, r5, r4
 8014566:	440d      	add	r5, r1
 8014568:	b2ad      	uxth	r5, r5
 801456a:	e6d2      	b.n	8014312 <_lv_area_align+0x52>
 801456c:	8884      	ldrh	r4, [r0, #4]
 801456e:	8805      	ldrh	r5, [r0, #0]
 8014570:	888a      	ldrh	r2, [r1, #4]
 8014572:	3401      	adds	r4, #1
 8014574:	880e      	ldrh	r6, [r1, #0]
 8014576:	1b64      	subs	r4, r4, r5
 8014578:	1c51      	adds	r1, r2, #1
            break;
 801457a:	2200      	movs	r2, #0
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
 801457c:	b224      	sxth	r4, r4
 801457e:	1b89      	subs	r1, r1, r6
 8014580:	2c00      	cmp	r4, #0
 8014582:	b209      	sxth	r1, r1
 8014584:	bfb8      	it	lt
 8014586:	3401      	addlt	r4, #1
 8014588:	2900      	cmp	r1, #0
 801458a:	ea4f 0464 	mov.w	r4, r4, asr #1
 801458e:	bfb8      	it	lt
 8014590:	3101      	addlt	r1, #1
 8014592:	eba4 0461 	sub.w	r4, r4, r1, asr #1
 8014596:	4425      	add	r5, r4
 8014598:	b2ad      	uxth	r5, r5
            break;
 801459a:	e6ba      	b.n	8014312 <_lv_area_align+0x52>
            res->x = 0;
 801459c:	2200      	movs	r2, #0
 801459e:	601a      	str	r2, [r3, #0]
            break;
 80145a0:	8805      	ldrh	r5, [r0, #0]
 80145a2:	e6b6      	b.n	8014312 <_lv_area_align+0x52>
 80145a4:	8882      	ldrh	r2, [r0, #4]
 80145a6:	8806      	ldrh	r6, [r0, #0]
 80145a8:	3201      	adds	r2, #1
 80145aa:	888c      	ldrh	r4, [r1, #4]
 80145ac:	880f      	ldrh	r7, [r1, #0]
 80145ae:	1b92      	subs	r2, r2, r6
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
 80145b0:	b212      	sxth	r2, r2
 80145b2:	2a00      	cmp	r2, #0
 80145b4:	bfb8      	it	lt
 80145b6:	3201      	addlt	r2, #1
 80145b8:	1055      	asrs	r5, r2, #1
 80145ba:	1c62      	adds	r2, r4, #1
 80145bc:	1bd2      	subs	r2, r2, r7
 80145be:	b212      	sxth	r2, r2
 80145c0:	2a00      	cmp	r2, #0
 80145c2:	bfb8      	it	lt
 80145c4:	3201      	addlt	r2, #1
 80145c6:	eba5 0562 	sub.w	r5, r5, r2, asr #1
 80145ca:	b2ad      	uxth	r5, r5
 80145cc:	801d      	strh	r5, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80145ce:	4435      	add	r5, r6
 80145d0:	88c4      	ldrh	r4, [r0, #6]
 80145d2:	8842      	ldrh	r2, [r0, #2]
 80145d4:	b2ad      	uxth	r5, r5
 80145d6:	3401      	adds	r4, #1
 80145d8:	1aa4      	subs	r4, r4, r2
 80145da:	88ca      	ldrh	r2, [r1, #6]
 80145dc:	8849      	ldrh	r1, [r1, #2]
 80145de:	3201      	adds	r2, #1
            res->y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
 80145e0:	b224      	sxth	r4, r4
 80145e2:	1a52      	subs	r2, r2, r1
 80145e4:	2c00      	cmp	r4, #0
 80145e6:	b212      	sxth	r2, r2
 80145e8:	bfb8      	it	lt
 80145ea:	3401      	addlt	r4, #1
 80145ec:	2a00      	cmp	r2, #0
 80145ee:	ea4f 0464 	mov.w	r4, r4, asr #1
 80145f2:	bfb8      	it	lt
 80145f4:	3201      	addlt	r2, #1
 80145f6:	eba4 0462 	sub.w	r4, r4, r2, asr #1
 80145fa:	b2a2      	uxth	r2, r4
            break;
 80145fc:	e689      	b.n	8014312 <_lv_area_align+0x52>
 80145fe:	8805      	ldrh	r5, [r0, #0]
 8014600:	8819      	ldrh	r1, [r3, #0]
 8014602:	885a      	ldrh	r2, [r3, #2]
 8014604:	440d      	add	r5, r1
 8014606:	b2ad      	uxth	r5, r5
 8014608:	e683      	b.n	8014312 <_lv_area_align+0x52>
 801460a:	bf00      	nop

0801460c <lv_color_fill>:
        *buf = color;
        buf++;
        px_num --;
    }
#else
    while(px_num > 16) {
 801460c:	2a10      	cmp	r2, #16
 801460e:	d954      	bls.n	80146ba <lv_color_fill+0xae>
 8014610:	f100 0340 	add.w	r3, r0, #64	; 0x40
{
 8014614:	b410      	push	{r4}
    while(px_num > 16) {
 8014616:	4614      	mov	r4, r2
        *buf = color;
        buf++;
        *buf = color;
        buf++;

        px_num -= 16;
 8014618:	3c10      	subs	r4, #16
    while(px_num > 16) {
 801461a:	2c10      	cmp	r4, #16
        *buf = color;
 801461c:	e943 1110 	strd	r1, r1, [r3, #-64]	; 0x40
        *buf = color;
 8014620:	e943 110e 	strd	r1, r1, [r3, #-56]	; 0x38
        *buf = color;
 8014624:	e943 110c 	strd	r1, r1, [r3, #-48]	; 0x30
        *buf = color;
 8014628:	e943 110a 	strd	r1, r1, [r3, #-40]	; 0x28
        *buf = color;
 801462c:	e943 1108 	strd	r1, r1, [r3, #-32]
        *buf = color;
 8014630:	e943 1106 	strd	r1, r1, [r3, #-24]
        *buf = color;
 8014634:	e943 1104 	strd	r1, r1, [r3, #-16]
        *buf = color;
 8014638:	e943 1102 	strd	r1, r1, [r3, #-8]
    while(px_num > 16) {
 801463c:	f103 0340 	add.w	r3, r3, #64	; 0x40
 8014640:	d8ea      	bhi.n	8014618 <lv_color_fill+0xc>
 8014642:	f1a2 0311 	sub.w	r3, r2, #17
 8014646:	3a10      	subs	r2, #16
 8014648:	091b      	lsrs	r3, r3, #4
 801464a:	ebc3 7403 	rsb	r4, r3, r3, lsl #28
 801464e:	3301      	adds	r3, #1
 8014650:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 8014654:	eb00 1083 	add.w	r0, r0, r3, lsl #6
    }
    while(px_num) {
 8014658:	2a01      	cmp	r2, #1
        *buf = color;
 801465a:	6001      	str	r1, [r0, #0]
    while(px_num) {
 801465c:	d02a      	beq.n	80146b4 <lv_color_fill+0xa8>
 801465e:	2a02      	cmp	r2, #2
        *buf = color;
 8014660:	6041      	str	r1, [r0, #4]
    while(px_num) {
 8014662:	d027      	beq.n	80146b4 <lv_color_fill+0xa8>
 8014664:	2a03      	cmp	r2, #3
        *buf = color;
 8014666:	6081      	str	r1, [r0, #8]
    while(px_num) {
 8014668:	d024      	beq.n	80146b4 <lv_color_fill+0xa8>
 801466a:	2a04      	cmp	r2, #4
        *buf = color;
 801466c:	60c1      	str	r1, [r0, #12]
    while(px_num) {
 801466e:	d021      	beq.n	80146b4 <lv_color_fill+0xa8>
 8014670:	2a05      	cmp	r2, #5
        *buf = color;
 8014672:	6101      	str	r1, [r0, #16]
    while(px_num) {
 8014674:	d01e      	beq.n	80146b4 <lv_color_fill+0xa8>
 8014676:	2a06      	cmp	r2, #6
        *buf = color;
 8014678:	6141      	str	r1, [r0, #20]
    while(px_num) {
 801467a:	d01b      	beq.n	80146b4 <lv_color_fill+0xa8>
 801467c:	2a07      	cmp	r2, #7
        *buf = color;
 801467e:	6181      	str	r1, [r0, #24]
    while(px_num) {
 8014680:	d018      	beq.n	80146b4 <lv_color_fill+0xa8>
 8014682:	2a08      	cmp	r2, #8
        *buf = color;
 8014684:	61c1      	str	r1, [r0, #28]
    while(px_num) {
 8014686:	d015      	beq.n	80146b4 <lv_color_fill+0xa8>
 8014688:	2a09      	cmp	r2, #9
        *buf = color;
 801468a:	6201      	str	r1, [r0, #32]
    while(px_num) {
 801468c:	d012      	beq.n	80146b4 <lv_color_fill+0xa8>
 801468e:	2a0a      	cmp	r2, #10
        *buf = color;
 8014690:	6241      	str	r1, [r0, #36]	; 0x24
    while(px_num) {
 8014692:	d00f      	beq.n	80146b4 <lv_color_fill+0xa8>
 8014694:	2a0b      	cmp	r2, #11
        *buf = color;
 8014696:	6281      	str	r1, [r0, #40]	; 0x28
    while(px_num) {
 8014698:	d00c      	beq.n	80146b4 <lv_color_fill+0xa8>
 801469a:	2a0c      	cmp	r2, #12
        *buf = color;
 801469c:	62c1      	str	r1, [r0, #44]	; 0x2c
    while(px_num) {
 801469e:	d009      	beq.n	80146b4 <lv_color_fill+0xa8>
 80146a0:	2a0d      	cmp	r2, #13
        *buf = color;
 80146a2:	6301      	str	r1, [r0, #48]	; 0x30
    while(px_num) {
 80146a4:	d006      	beq.n	80146b4 <lv_color_fill+0xa8>
 80146a6:	3a0e      	subs	r2, #14
        *buf = color;
 80146a8:	6341      	str	r1, [r0, #52]	; 0x34
    while(px_num) {
 80146aa:	d003      	beq.n	80146b4 <lv_color_fill+0xa8>
 80146ac:	2a01      	cmp	r2, #1
        *buf = color;
 80146ae:	6381      	str	r1, [r0, #56]	; 0x38
 80146b0:	bf18      	it	ne
 80146b2:	63c1      	strne	r1, [r0, #60]	; 0x3c
        buf++;
        px_num --;
    }
#endif
}
 80146b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80146b8:	4770      	bx	lr
    while(px_num) {
 80146ba:	b902      	cbnz	r2, 80146be <lv_color_fill+0xb2>
 80146bc:	4770      	bx	lr
 80146be:	2a01      	cmp	r2, #1
        *buf = color;
 80146c0:	6001      	str	r1, [r0, #0]
    while(px_num) {
 80146c2:	d0fb      	beq.n	80146bc <lv_color_fill+0xb0>
 80146c4:	2a02      	cmp	r2, #2
        *buf = color;
 80146c6:	6041      	str	r1, [r0, #4]
    while(px_num) {
 80146c8:	d0f8      	beq.n	80146bc <lv_color_fill+0xb0>
 80146ca:	2a03      	cmp	r2, #3
        *buf = color;
 80146cc:	6081      	str	r1, [r0, #8]
    while(px_num) {
 80146ce:	d0f5      	beq.n	80146bc <lv_color_fill+0xb0>
 80146d0:	2a04      	cmp	r2, #4
        *buf = color;
 80146d2:	60c1      	str	r1, [r0, #12]
    while(px_num) {
 80146d4:	d0f2      	beq.n	80146bc <lv_color_fill+0xb0>
 80146d6:	2a05      	cmp	r2, #5
        *buf = color;
 80146d8:	6101      	str	r1, [r0, #16]
    while(px_num) {
 80146da:	d0ef      	beq.n	80146bc <lv_color_fill+0xb0>
 80146dc:	2a06      	cmp	r2, #6
        *buf = color;
 80146de:	6141      	str	r1, [r0, #20]
    while(px_num) {
 80146e0:	d0ec      	beq.n	80146bc <lv_color_fill+0xb0>
 80146e2:	2a07      	cmp	r2, #7
        *buf = color;
 80146e4:	6181      	str	r1, [r0, #24]
    while(px_num) {
 80146e6:	d0e9      	beq.n	80146bc <lv_color_fill+0xb0>
 80146e8:	2a08      	cmp	r2, #8
        *buf = color;
 80146ea:	61c1      	str	r1, [r0, #28]
    while(px_num) {
 80146ec:	d0e6      	beq.n	80146bc <lv_color_fill+0xb0>
 80146ee:	2a09      	cmp	r2, #9
        *buf = color;
 80146f0:	6201      	str	r1, [r0, #32]
    while(px_num) {
 80146f2:	d0e3      	beq.n	80146bc <lv_color_fill+0xb0>
 80146f4:	2a0a      	cmp	r2, #10
        *buf = color;
 80146f6:	6241      	str	r1, [r0, #36]	; 0x24
    while(px_num) {
 80146f8:	d0e0      	beq.n	80146bc <lv_color_fill+0xb0>
 80146fa:	2a0b      	cmp	r2, #11
        *buf = color;
 80146fc:	6281      	str	r1, [r0, #40]	; 0x28
    while(px_num) {
 80146fe:	d0dd      	beq.n	80146bc <lv_color_fill+0xb0>
 8014700:	2a0c      	cmp	r2, #12
        *buf = color;
 8014702:	62c1      	str	r1, [r0, #44]	; 0x2c
    while(px_num) {
 8014704:	d0da      	beq.n	80146bc <lv_color_fill+0xb0>
 8014706:	2a0d      	cmp	r2, #13
        *buf = color;
 8014708:	6301      	str	r1, [r0, #48]	; 0x30
    while(px_num) {
 801470a:	d0d7      	beq.n	80146bc <lv_color_fill+0xb0>
 801470c:	3a0e      	subs	r2, #14
        *buf = color;
 801470e:	6341      	str	r1, [r0, #52]	; 0x34
    while(px_num) {
 8014710:	d0d4      	beq.n	80146bc <lv_color_fill+0xb0>
 8014712:	2a01      	cmp	r2, #1
        *buf = color;
 8014714:	6381      	str	r1, [r0, #56]	; 0x38
    while(px_num) {
 8014716:	d0d1      	beq.n	80146bc <lv_color_fill+0xb0>
        *buf = color;
 8014718:	63c1      	str	r1, [r0, #60]	; 0x3c
    while(px_num) {
 801471a:	4770      	bx	lr

0801471c <lv_color_lighten>:

lv_color_t lv_color_lighten(lv_color_t c, lv_opa_t lvl)
{
 801471c:	b470      	push	{r4, r5, r6}
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 801471e:	b2c2      	uxtb	r2, r0
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8014720:	f1c1 05ff 	rsb	r5, r1, #255	; 0xff
 8014724:	ebc1 2101 	rsb	r1, r1, r1, lsl #8
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8014728:	f3c0 2307 	ubfx	r3, r0, #8, #8
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 801472c:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8014730:	2400      	movs	r4, #0
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8014732:	fb05 1202 	mla	r2, r5, r2, r1
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8014736:	fb05 1303 	mla	r3, r5, r3, r1
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 801473a:	eb02 2602 	add.w	r6, r2, r2, lsl #8
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 801473e:	fb05 1100 	mla	r1, r5, r0, r1
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8014742:	eb03 2003 	add.w	r0, r3, r3, lsl #8
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8014746:	eb02 12c6 	add.w	r2, r2, r6, lsl #7
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 801474a:	eb03 13c0 	add.w	r3, r3, r0, lsl #7
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 801474e:	0dd2      	lsrs	r2, r2, #23
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8014750:	eb01 2001 	add.w	r0, r1, r1, lsl #8
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8014754:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 8014758:	f362 0407 	bfi	r4, r2, #0, #8
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 801475c:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
 8014760:	f363 240f 	bfi	r4, r3, #8, #8
 8014764:	f3c1 51c7 	ubfx	r1, r1, #23, #8
#else
    /*LV_COLOR_DEPTH == 1*/
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
#endif

    return ret;
 8014768:	f361 4417 	bfi	r4, r1, #16, #8
    return lv_color_mix(LV_COLOR_WHITE, c, lvl);
}
 801476c:	f044 407f 	orr.w	r0, r4, #4278190080	; 0xff000000
 8014770:	bc70      	pop	{r4, r5, r6}
 8014772:	4770      	bx	lr

08014774 <lv_color_darken>:
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8014774:	f1c1 01ff 	rsb	r1, r1, #255	; 0xff
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8014778:	b2c2      	uxtb	r2, r0
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 801477a:	f3c0 2307 	ubfx	r3, r0, #8, #8
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 801477e:	f3c0 4007 	ubfx	r0, r0, #16, #8
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8014782:	fb01 f202 	mul.w	r2, r1, r2
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8014786:	fb01 f303 	mul.w	r3, r1, r3
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 801478a:	fb01 f100 	mul.w	r1, r1, r0
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 801478e:	eb03 2003 	add.w	r0, r3, r3, lsl #8

lv_color_t lv_color_darken(lv_color_t c, lv_opa_t lvl)
{
 8014792:	b430      	push	{r4, r5}
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8014794:	eb02 2502 	add.w	r5, r2, r2, lsl #8
 8014798:	2400      	movs	r4, #0
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 801479a:	eb03 13c0 	add.w	r3, r3, r0, lsl #7
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 801479e:	eb02 12c5 	add.w	r2, r2, r5, lsl #7
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 80147a2:	eb01 2001 	add.w	r0, r1, r1, lsl #8
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 80147a6:	f3c3 53c7 	ubfx	r3, r3, #23, #8
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 80147aa:	0dd2      	lsrs	r2, r2, #23
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 80147ac:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
 80147b0:	f362 0407 	bfi	r4, r2, #0, #8
 80147b4:	f3c1 51c7 	ubfx	r1, r1, #23, #8
    return ret;
 80147b8:	f363 240f 	bfi	r4, r3, #8, #8
 80147bc:	f361 4417 	bfi	r4, r1, #16, #8
    return lv_color_mix(LV_COLOR_BLACK, c, lvl);
}
 80147c0:	f044 407f 	orr.w	r0, r4, #4278190080	; 0xff000000
 80147c4:	bc30      	pop	{r4, r5}
 80147c6:	4770      	bx	lr

080147c8 <lv_debug_check_null>:
bool lv_debug_check_null(const void * p)
{
    if(p) return true;

    return false;
}
 80147c8:	3800      	subs	r0, #0
 80147ca:	bf18      	it	ne
 80147cc:	2001      	movne	r0, #1
 80147ce:	4770      	bx	lr

080147d0 <lv_debug_log_error>:
    LV_LOG_WARN("lv_debug_check_str: string is longer than LV_DEBUG_STR_MAX_LENGTH");
    return false;
}

void lv_debug_log_error(const char * msg, uint64_t value)
{
 80147d0:	b510      	push	{r4, lr}
 80147d2:	b0c0      	sub	sp, #256	; 0x100
 80147d4:	4604      	mov	r4, r0
    static const char hex[] = "0123456789ABCDEF";

    size_t msg_len = strlen(msg);
 80147d6:	f7eb fd21 	bl	800021c <strlen>
    uint32_t value_len = sizeof(unsigned long int);

    if(msg_len < 230) {
 80147da:	28e5      	cmp	r0, #229	; 0xe5
 80147dc:	d901      	bls.n	80147e2 <lv_debug_log_error+0x12>
        LV_LOG_ERROR(buf);
    }
    else {
        LV_LOG_ERROR(msg);
    }
}
 80147de:	b040      	add	sp, #256	; 0x100
 80147e0:	bd10      	pop	{r4, pc}
        _lv_memcpy(bufp, msg, msg_len);
 80147e2:	4602      	mov	r2, r0
 80147e4:	4621      	mov	r1, r4
 80147e6:	4668      	mov	r0, sp
 80147e8:	f000 fc48 	bl	801507c <_lv_memcpy>
}
 80147ec:	b040      	add	sp, #256	; 0x100
 80147ee:	bd10      	pop	{r4, pc}

080147f0 <_lv_fs_init>:
/**
 * Initialize the File system interface
 */
void _lv_fs_init(void)
{
    _lv_ll_init(&LV_GC_ROOT(_lv_drv_ll), sizeof(lv_fs_drv_t));
 80147f0:	2144      	movs	r1, #68	; 0x44
 80147f2:	4801      	ldr	r0, [pc, #4]	; (80147f8 <_lv_fs_init+0x8>)
 80147f4:	f000 b8dc 	b.w	80149b0 <_lv_ll_init>
 80147f8:	200204c8 	.word	0x200204c8

080147fc <lv_fs_open>:
 * @param mode read: FS_MODE_RD, write: FS_MODE_WR, both: FS_MODE_RD | FS_MODE_WR
 * @return LV_FS_RES_OK or any error from lv_fs_res_t enum
 */
lv_fs_res_t lv_fs_open(lv_fs_file_t * file_p, const char * path, lv_fs_mode_t mode)
{
    file_p->drv    = NULL;
 80147fc:	2300      	movs	r3, #0
{
 80147fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    file_p->file_d = NULL;
 8014802:	e9c0 3300 	strd	r3, r3, [r0]

    if(path == NULL) return LV_FS_RES_INV_PARAM;
 8014806:	2900      	cmp	r1, #0
 8014808:	d065      	beq.n	80148d6 <lv_fs_open+0xda>

    char letter = path[0];
 801480a:	4606      	mov	r6, r0
 */
lv_fs_drv_t * lv_fs_get_drv(char letter)
{
    lv_fs_drv_t * drv;

    _LV_LL_READ(LV_GC_ROOT(_lv_drv_ll), drv) {
 801480c:	4835      	ldr	r0, [pc, #212]	; (80148e4 <lv_fs_open+0xe8>)
 801480e:	460d      	mov	r5, r1
 8014810:	4617      	mov	r7, r2
    char letter = path[0];
 8014812:	f891 9000 	ldrb.w	r9, [r1]
    _LV_LL_READ(LV_GC_ROOT(_lv_drv_ll), drv) {
 8014816:	f000 f9a9 	bl	8014b6c <_lv_ll_get_head>
 801481a:	4604      	mov	r4, r0
 801481c:	b378      	cbz	r0, 801487e <lv_fs_open+0x82>
 801481e:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 80148e4 <lv_fs_open+0xe8>
 8014822:	e003      	b.n	801482c <lv_fs_open+0x30>
 8014824:	f000 f9aa 	bl	8014b7c <_lv_ll_get_next>
 8014828:	4604      	mov	r4, r0
 801482a:	b340      	cbz	r0, 801487e <lv_fs_open+0x82>
        if(drv->letter == letter) {
 801482c:	7823      	ldrb	r3, [r4, #0]
    _LV_LL_READ(LV_GC_ROOT(_lv_drv_ll), drv) {
 801482e:	4621      	mov	r1, r4
 8014830:	4640      	mov	r0, r8
        if(drv->letter == letter) {
 8014832:	454b      	cmp	r3, r9
 8014834:	d1f6      	bne.n	8014824 <lv_fs_open+0x28>
    if(file_p->drv->ready_cb != NULL) {
 8014836:	68a3      	ldr	r3, [r4, #8]
    file_p->drv = lv_fs_get_drv(letter);
 8014838:	6074      	str	r4, [r6, #4]
    if(file_p->drv->ready_cb != NULL) {
 801483a:	b123      	cbz	r3, 8014846 <lv_fs_open+0x4a>
        if(file_p->drv->ready_cb(file_p->drv) == false) {
 801483c:	4620      	mov	r0, r4
 801483e:	4798      	blx	r3
 8014840:	2800      	cmp	r0, #0
 8014842:	d03a      	beq.n	80148ba <lv_fs_open+0xbe>
 8014844:	6874      	ldr	r4, [r6, #4]
    if(file_p->drv->open_cb == NULL) {
 8014846:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 801484a:	f1be 0f00 	cmp.w	lr, #0
 801484e:	d03e      	beq.n	80148ce <lv_fs_open+0xd2>
    /* Example path: "S:/folder/file.txt"
     * Leave the letter and the : / \ characters*/

    path++; /*Ignore the driver letter*/

    while(*path != '\0') {
 8014850:	786b      	ldrb	r3, [r5, #1]
    path++; /*Ignore the driver letter*/
 8014852:	3501      	adds	r5, #1
    while(*path != '\0') {
 8014854:	b14b      	cbz	r3, 801486a <lv_fs_open+0x6e>
        if(*path == ':' || *path == '\\' || *path == '/') {
 8014856:	2b5c      	cmp	r3, #92	; 0x5c
 8014858:	bf18      	it	ne
 801485a:	2b3a      	cmpne	r3, #58	; 0x3a
 801485c:	d001      	beq.n	8014862 <lv_fs_open+0x66>
 801485e:	2b2f      	cmp	r3, #47	; 0x2f
 8014860:	d103      	bne.n	801486a <lv_fs_open+0x6e>
    while(*path != '\0') {
 8014862:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8014866:	2b00      	cmp	r3, #0
 8014868:	d1f5      	bne.n	8014856 <lv_fs_open+0x5a>
    if(file_p->drv->file_size == 0) {  /*Is file_d zero size?*/
 801486a:	8860      	ldrh	r0, [r4, #2]
 801486c:	b968      	cbnz	r0, 801488a <lv_fs_open+0x8e>
        return file_p->drv->open_cb(file_p->drv, &file_p->file_d, real_path, mode);
 801486e:	463b      	mov	r3, r7
 8014870:	462a      	mov	r2, r5
 8014872:	4631      	mov	r1, r6
 8014874:	4620      	mov	r0, r4
 8014876:	46f4      	mov	ip, lr
}
 8014878:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        return file_p->drv->open_cb(file_p->drv, &file_p->file_d, real_path, mode);
 801487c:	4760      	bx	ip
    file_p->drv = lv_fs_get_drv(letter);
 801487e:	2300      	movs	r3, #0
        return LV_FS_RES_NOT_EX;
 8014880:	2403      	movs	r4, #3
    file_p->drv = lv_fs_get_drv(letter);
 8014882:	6073      	str	r3, [r6, #4]
}
 8014884:	4620      	mov	r0, r4
 8014886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    file_p->file_d = lv_mem_alloc(file_p->drv->file_size);
 801488a:	f000 fa89 	bl	8014da0 <lv_mem_alloc>
 801488e:	6030      	str	r0, [r6, #0]
    LV_ASSERT_MEM(file_p->file_d);
 8014890:	f7ff ff9a 	bl	80147c8 <lv_debug_check_null>
 8014894:	4603      	mov	r3, r0
 8014896:	b1a8      	cbz	r0, 80148c4 <lv_fs_open+0xc8>
    if(file_p->file_d == NULL) {
 8014898:	6831      	ldr	r1, [r6, #0]
 801489a:	b301      	cbz	r1, 80148de <lv_fs_open+0xe2>
    lv_fs_res_t res = file_p->drv->open_cb(file_p->drv, file_p->file_d, real_path, mode);
 801489c:	6870      	ldr	r0, [r6, #4]
 801489e:	463b      	mov	r3, r7
 80148a0:	462a      	mov	r2, r5
 80148a2:	68c4      	ldr	r4, [r0, #12]
 80148a4:	47a0      	blx	r4
    if(res != LV_FS_RES_OK) {
 80148a6:	4604      	mov	r4, r0
 80148a8:	2800      	cmp	r0, #0
 80148aa:	d0eb      	beq.n	8014884 <lv_fs_open+0x88>
        lv_mem_free(file_p->file_d);
 80148ac:	6830      	ldr	r0, [r6, #0]
 80148ae:	f000 fabd 	bl	8014e2c <lv_mem_free>
        file_p->file_d = NULL;
 80148b2:	2300      	movs	r3, #0
        file_p->drv    = NULL;
 80148b4:	e9c6 3300 	strd	r3, r3, [r6]
 80148b8:	e7e4      	b.n	8014884 <lv_fs_open+0x88>
            return LV_FS_RES_HW_ERR;
 80148ba:	2401      	movs	r4, #1
            file_p->drv = NULL;
 80148bc:	6070      	str	r0, [r6, #4]
}
 80148be:	4620      	mov	r0, r4
 80148c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    LV_ASSERT_MEM(file_p->file_d);
 80148c4:	6832      	ldr	r2, [r6, #0]
 80148c6:	4808      	ldr	r0, [pc, #32]	; (80148e8 <lv_fs_open+0xec>)
 80148c8:	f7ff ff82 	bl	80147d0 <lv_debug_log_error>
 80148cc:	e7fe      	b.n	80148cc <lv_fs_open+0xd0>
        return LV_FS_RES_NOT_IMP;
 80148ce:	2409      	movs	r4, #9
        file_p->drv = NULL;
 80148d0:	f8c6 e004 	str.w	lr, [r6, #4]
        return LV_FS_RES_NOT_IMP;
 80148d4:	e7d6      	b.n	8014884 <lv_fs_open+0x88>
    if(path == NULL) return LV_FS_RES_INV_PARAM;
 80148d6:	240b      	movs	r4, #11
}
 80148d8:	4620      	mov	r0, r4
 80148da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return LV_FS_RES_OUT_OF_MEM; /* Out of memory */
 80148de:	240a      	movs	r4, #10
        file_p->drv = NULL;
 80148e0:	6071      	str	r1, [r6, #4]
        return LV_FS_RES_OUT_OF_MEM; /* Out of memory */
 80148e2:	e7cf      	b.n	8014884 <lv_fs_open+0x88>
 80148e4:	200204c8 	.word	0x200204c8
 80148e8:	0801e1c4 	.word	0x0801e1c4

080148ec <lv_fs_close>:
{
 80148ec:	b538      	push	{r3, r4, r5, lr}
 80148ee:	4604      	mov	r4, r0
    if(file_p->drv == NULL) {
 80148f0:	6840      	ldr	r0, [r0, #4]
 80148f2:	b160      	cbz	r0, 801490e <lv_fs_close+0x22>
    if(file_p->drv->close_cb == NULL) {
 80148f4:	6903      	ldr	r3, [r0, #16]
 80148f6:	b16b      	cbz	r3, 8014914 <lv_fs_close+0x28>
    lv_fs_res_t res = file_p->drv->close_cb(file_p->drv, file_p->file_d);
 80148f8:	6821      	ldr	r1, [r4, #0]
 80148fa:	4798      	blx	r3
 80148fc:	4605      	mov	r5, r0
    lv_mem_free(file_p->file_d); /*Clean up*/
 80148fe:	6820      	ldr	r0, [r4, #0]
 8014900:	f000 fa94 	bl	8014e2c <lv_mem_free>
    file_p->file_d = NULL;
 8014904:	2300      	movs	r3, #0
    file_p->drv    = NULL;
 8014906:	e9c4 3300 	strd	r3, r3, [r4]
}
 801490a:	4628      	mov	r0, r5
 801490c:	bd38      	pop	{r3, r4, r5, pc}
        return LV_FS_RES_INV_PARAM;
 801490e:	250b      	movs	r5, #11
}
 8014910:	4628      	mov	r0, r5
 8014912:	bd38      	pop	{r3, r4, r5, pc}
        return LV_FS_RES_NOT_IMP;
 8014914:	2509      	movs	r5, #9
 8014916:	e7f8      	b.n	801490a <lv_fs_close+0x1e>

08014918 <lv_fs_read>:
{
 8014918:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(br != NULL) *br = 0;
 801491a:	461c      	mov	r4, r3
{
 801491c:	b085      	sub	sp, #20
    if(br != NULL) *br = 0;
 801491e:	b10b      	cbz	r3, 8014924 <lv_fs_read+0xc>
 8014920:	2300      	movs	r3, #0
 8014922:	6023      	str	r3, [r4, #0]
    if(file_p->drv == NULL) return LV_FS_RES_INV_PARAM;
 8014924:	6845      	ldr	r5, [r0, #4]
 8014926:	b18d      	cbz	r5, 801494c <lv_fs_read+0x34>
    if(file_p->drv->read_cb == NULL) return LV_FS_RES_NOT_IMP;
 8014928:	69ae      	ldr	r6, [r5, #24]
 801492a:	b196      	cbz	r6, 8014952 <lv_fs_read+0x3a>
    uint32_t br_tmp = 0;
 801492c:	f04f 0c00 	mov.w	ip, #0
    lv_fs_res_t res = file_p->drv->read_cb(file_p->drv, file_p->file_d, buf, btr, &br_tmp);
 8014930:	af03      	add	r7, sp, #12
 8014932:	4613      	mov	r3, r2
 8014934:	460a      	mov	r2, r1
    uint32_t br_tmp = 0;
 8014936:	f8cd c00c 	str.w	ip, [sp, #12]
    lv_fs_res_t res = file_p->drv->read_cb(file_p->drv, file_p->file_d, buf, btr, &br_tmp);
 801493a:	6801      	ldr	r1, [r0, #0]
 801493c:	4628      	mov	r0, r5
 801493e:	9700      	str	r7, [sp, #0]
 8014940:	47b0      	blx	r6
    if(br != NULL) *br = br_tmp;
 8014942:	b10c      	cbz	r4, 8014948 <lv_fs_read+0x30>
 8014944:	9b03      	ldr	r3, [sp, #12]
 8014946:	6023      	str	r3, [r4, #0]
}
 8014948:	b005      	add	sp, #20
 801494a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(file_p->drv == NULL) return LV_FS_RES_INV_PARAM;
 801494c:	200b      	movs	r0, #11
}
 801494e:	b005      	add	sp, #20
 8014950:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(file_p->drv->read_cb == NULL) return LV_FS_RES_NOT_IMP;
 8014952:	2009      	movs	r0, #9
 8014954:	e7f8      	b.n	8014948 <lv_fs_read+0x30>
 8014956:	bf00      	nop

08014958 <lv_fs_seek>:
    if(file_p->drv == NULL) {
 8014958:	6843      	ldr	r3, [r0, #4]
 801495a:	b14b      	cbz	r3, 8014970 <lv_fs_seek+0x18>
{
 801495c:	b410      	push	{r4}
    if(file_p->drv->seek_cb == NULL) {
 801495e:	6a1c      	ldr	r4, [r3, #32]
 8014960:	b144      	cbz	r4, 8014974 <lv_fs_seek+0x1c>
    lv_fs_res_t res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, pos);
 8014962:	460a      	mov	r2, r1
 8014964:	6801      	ldr	r1, [r0, #0]
 8014966:	4618      	mov	r0, r3
 8014968:	4623      	mov	r3, r4
}
 801496a:	f85d 4b04 	ldr.w	r4, [sp], #4
    lv_fs_res_t res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, pos);
 801496e:	4718      	bx	r3
        return LV_FS_RES_INV_PARAM;
 8014970:	200b      	movs	r0, #11
}
 8014972:	4770      	bx	lr
        return LV_FS_RES_NOT_IMP;
 8014974:	2009      	movs	r0, #9
}
 8014976:	f85d 4b04 	ldr.w	r4, [sp], #4
 801497a:	4770      	bx	lr

0801497c <lv_fs_get_ext>:
{
 801497c:	b510      	push	{r4, lr}
 801497e:	4604      	mov	r4, r0
    for(i = strlen(fn); i > 0; i--) {
 8014980:	f7eb fc4c 	bl	800021c <strlen>
 8014984:	b178      	cbz	r0, 80149a6 <lv_fs_get_ext+0x2a>
 8014986:	1c42      	adds	r2, r0, #1
 8014988:	4422      	add	r2, r4
 801498a:	e005      	b.n	8014998 <lv_fs_get_ext+0x1c>
        else if(fn[i] == '/' || fn[i] == '\\') {
 801498c:	2b2f      	cmp	r3, #47	; 0x2f
 801498e:	d00a      	beq.n	80149a6 <lv_fs_get_ext+0x2a>
 8014990:	2b5c      	cmp	r3, #92	; 0x5c
 8014992:	d008      	beq.n	80149a6 <lv_fs_get_ext+0x2a>
    for(i = strlen(fn); i > 0; i--) {
 8014994:	3801      	subs	r0, #1
 8014996:	d006      	beq.n	80149a6 <lv_fs_get_ext+0x2a>
        if(fn[i] == '.') {
 8014998:	f812 3d01 	ldrb.w	r3, [r2, #-1]!
 801499c:	2b2e      	cmp	r3, #46	; 0x2e
 801499e:	d1f5      	bne.n	801498c <lv_fs_get_ext+0x10>
            return &fn[i + 1];
 80149a0:	1c43      	adds	r3, r0, #1
 80149a2:	18e0      	adds	r0, r4, r3
}
 80149a4:	bd10      	pop	{r4, pc}
    return ""; /*Empty string if no '.' in the file name. */
 80149a6:	4801      	ldr	r0, [pc, #4]	; (80149ac <lv_fs_get_ext+0x30>)
}
 80149a8:	bd10      	pop	{r4, pc}
 80149aa:	bf00      	nop
 80149ac:	08021864 	.word	0x08021864

080149b0 <_lv_ll_init>:
#ifdef LV_ARCH_64
    /*Round the size up to 8*/
    node_size = (node_size + 7) & (~0x7);
#else
    /*Round the size up to 4*/
    node_size = (node_size + 3) & (~0x3);
 80149b0:	3103      	adds	r1, #3
    ll_p->head = NULL;
 80149b2:	2300      	movs	r3, #0
    node_size = (node_size + 3) & (~0x3);
 80149b4:	f021 0103 	bic.w	r1, r1, #3
    ll_p->tail = NULL;
 80149b8:	e9c0 3301 	strd	r3, r3, [r0, #4]
#endif

    ll_p->n_size = node_size;
 80149bc:	6001      	str	r1, [r0, #0]
}
 80149be:	4770      	bx	lr

080149c0 <_lv_ll_ins_head>:
 * Add a new head to a linked list
 * @param ll_p pointer to linked list
 * @return pointer to the new head
 */
void * _lv_ll_ins_head(lv_ll_t * ll_p)
{
 80149c0:	b510      	push	{r4, lr}
 80149c2:	4604      	mov	r4, r0
    lv_ll_node_t * n_new;

    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 80149c4:	6800      	ldr	r0, [r0, #0]
 80149c6:	3008      	adds	r0, #8
 80149c8:	f000 f9ea 	bl	8014da0 <lv_mem_alloc>

    if(n_new != NULL) {
 80149cc:	b150      	cbz	r0, 80149e4 <_lv_ll_ins_head+0x24>
{
    if(act == NULL) return; /*Can't set the prev node of `NULL`*/

    uint8_t * act8 = (uint8_t *) act;

    act8 += LL_PREV_P_OFFSET(ll_p);
 80149ce:	6823      	ldr	r3, [r4, #0]

    lv_ll_node_t ** act_node_p = (lv_ll_node_t **) act8;
    lv_ll_node_t ** prev_node_p = (lv_ll_node_t **) &prev;

    *act_node_p = *prev_node_p;
 80149d0:	2200      	movs	r2, #0

    act8 += LL_NEXT_P_OFFSET(ll_p);
    lv_ll_node_t ** act_node_p = (lv_ll_node_t **) act8;
    lv_ll_node_t ** next_node_p = (lv_ll_node_t **) &next;

    *act_node_p = *next_node_p;
 80149d2:	18c1      	adds	r1, r0, r3
    *act_node_p = *prev_node_p;
 80149d4:	50c2      	str	r2, [r0, r3]
        node_set_next(ll_p, n_new, ll_p->head); /*After new comes the old head*/
 80149d6:	6862      	ldr	r2, [r4, #4]
    *act_node_p = *next_node_p;
 80149d8:	604a      	str	r2, [r1, #4]
        if(ll_p->head != NULL) { /*If there is old head then before it goes the new*/
 80149da:	b102      	cbz	r2, 80149de <_lv_ll_ins_head+0x1e>
    *act_node_p = *prev_node_p;
 80149dc:	50d0      	str	r0, [r2, r3]
        if(ll_p->tail == NULL) { /*If there is no tail (1. node) set the tail too*/
 80149de:	68a3      	ldr	r3, [r4, #8]
        ll_p->head = n_new;      /*Set the new head in the dsc.*/
 80149e0:	6060      	str	r0, [r4, #4]
        if(ll_p->tail == NULL) { /*If there is no tail (1. node) set the tail too*/
 80149e2:	b103      	cbz	r3, 80149e6 <_lv_ll_ins_head+0x26>
}
 80149e4:	bd10      	pop	{r4, pc}
            ll_p->tail = n_new;
 80149e6:	60a0      	str	r0, [r4, #8]
}
 80149e8:	bd10      	pop	{r4, pc}
 80149ea:	bf00      	nop

080149ec <_lv_ll_ins_prev>:
    if(NULL == ll_p || NULL == n_act) return NULL;
 80149ec:	b350      	cbz	r0, 8014a44 <_lv_ll_ins_prev+0x58>
{
 80149ee:	b570      	push	{r4, r5, r6, lr}
    if(NULL == ll_p || NULL == n_act) return NULL;
 80149f0:	fab1 f681 	clz	r6, r1
 80149f4:	460c      	mov	r4, r1
 80149f6:	0976      	lsrs	r6, r6, #5
 80149f8:	b1a9      	cbz	r1, 8014a26 <_lv_ll_ins_prev+0x3a>
 80149fa:	4605      	mov	r5, r0
    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 80149fc:	e9d0 0300 	ldrd	r0, r3, [r0]
    if(_lv_ll_get_head(ll_p) == n_act) {
 8014a00:	4299      	cmp	r1, r3
    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 8014a02:	f100 0008 	add.w	r0, r0, #8
    if(_lv_ll_get_head(ll_p) == n_act) {
 8014a06:	d00b      	beq.n	8014a20 <_lv_ll_ins_prev+0x34>
        n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 8014a08:	f000 f9ca 	bl	8014da0 <lv_mem_alloc>
        if(n_new == NULL) return NULL;
 8014a0c:	b158      	cbz	r0, 8014a26 <_lv_ll_ins_prev+0x3a>
    n_act_d += LL_PREV_P_OFFSET(ll_p);
 8014a0e:	682b      	ldr	r3, [r5, #0]
    return *((lv_ll_node_t **)n_act_d);
 8014a10:	58e2      	ldr	r2, [r4, r3]
    if(act == NULL) return; /*Can't set the next node of `NULL`*/
 8014a12:	1d19      	adds	r1, r3, #4
 8014a14:	b102      	cbz	r2, 8014a18 <_lv_ll_ins_prev+0x2c>
    *act_node_p = *next_node_p;
 8014a16:	5050      	str	r0, [r2, r1]
    *act_node_p = *prev_node_p;
 8014a18:	50c2      	str	r2, [r0, r3]
 8014a1a:	50e0      	str	r0, [r4, r3]
    *act_node_p = *next_node_p;
 8014a1c:	5044      	str	r4, [r0, r1]
}
 8014a1e:	bd70      	pop	{r4, r5, r6, pc}
    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 8014a20:	f000 f9be 	bl	8014da0 <lv_mem_alloc>
    if(n_new != NULL) {
 8014a24:	b908      	cbnz	r0, 8014a2a <_lv_ll_ins_prev+0x3e>
    if(NULL == ll_p || NULL == n_act) return NULL;
 8014a26:	2000      	movs	r0, #0
}
 8014a28:	bd70      	pop	{r4, r5, r6, pc}
    act8 += LL_PREV_P_OFFSET(ll_p);
 8014a2a:	682b      	ldr	r3, [r5, #0]
    *act_node_p = *prev_node_p;
 8014a2c:	50c6      	str	r6, [r0, r3]
    *act_node_p = *next_node_p;
 8014a2e:	18c1      	adds	r1, r0, r3
        node_set_next(ll_p, n_new, ll_p->head); /*After new comes the old head*/
 8014a30:	686a      	ldr	r2, [r5, #4]
    *act_node_p = *next_node_p;
 8014a32:	604a      	str	r2, [r1, #4]
        if(ll_p->head != NULL) { /*If there is old head then before it goes the new*/
 8014a34:	b102      	cbz	r2, 8014a38 <_lv_ll_ins_prev+0x4c>
    *act_node_p = *prev_node_p;
 8014a36:	50d0      	str	r0, [r2, r3]
        if(ll_p->tail == NULL) { /*If there is no tail (1. node) set the tail too*/
 8014a38:	68ab      	ldr	r3, [r5, #8]
        ll_p->head = n_new;      /*Set the new head in the dsc.*/
 8014a3a:	6068      	str	r0, [r5, #4]
        if(ll_p->tail == NULL) { /*If there is no tail (1. node) set the tail too*/
 8014a3c:	2b00      	cmp	r3, #0
 8014a3e:	d1ee      	bne.n	8014a1e <_lv_ll_ins_prev+0x32>
            ll_p->tail = n_new;
 8014a40:	60a8      	str	r0, [r5, #8]
}
 8014a42:	bd70      	pop	{r4, r5, r6, pc}
    if(NULL == ll_p || NULL == n_act) return NULL;
 8014a44:	2000      	movs	r0, #0
}
 8014a46:	4770      	bx	lr

08014a48 <_lv_ll_ins_tail>:
{
 8014a48:	b510      	push	{r4, lr}
 8014a4a:	4604      	mov	r4, r0
    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 8014a4c:	6800      	ldr	r0, [r0, #0]
 8014a4e:	3008      	adds	r0, #8
 8014a50:	f000 f9a6 	bl	8014da0 <lv_mem_alloc>
    if(n_new != NULL) {
 8014a54:	b150      	cbz	r0, 8014a6c <_lv_ll_ins_tail+0x24>
    act8 += LL_NEXT_P_OFFSET(ll_p);
 8014a56:	6822      	ldr	r2, [r4, #0]
    *act_node_p = *next_node_p;
 8014a58:	2300      	movs	r3, #0
    act8 += LL_NEXT_P_OFFSET(ll_p);
 8014a5a:	1d11      	adds	r1, r2, #4
    *act_node_p = *next_node_p;
 8014a5c:	5043      	str	r3, [r0, r1]
        node_set_prev(ll_p, n_new, ll_p->tail); /*The prev. before new is the old tail*/
 8014a5e:	68a3      	ldr	r3, [r4, #8]
    *act_node_p = *prev_node_p;
 8014a60:	5083      	str	r3, [r0, r2]
        if(ll_p->tail != NULL) {                /*If there is old tail then the new comes after it*/
 8014a62:	b103      	cbz	r3, 8014a66 <_lv_ll_ins_tail+0x1e>
    *act_node_p = *next_node_p;
 8014a64:	5058      	str	r0, [r3, r1]
        if(ll_p->head == NULL) { /*If there is no head (1. node) set the head too*/
 8014a66:	6863      	ldr	r3, [r4, #4]
        ll_p->tail = n_new;      /*Set the new tail in the dsc.*/
 8014a68:	60a0      	str	r0, [r4, #8]
        if(ll_p->head == NULL) { /*If there is no head (1. node) set the head too*/
 8014a6a:	b103      	cbz	r3, 8014a6e <_lv_ll_ins_tail+0x26>
}
 8014a6c:	bd10      	pop	{r4, pc}
            ll_p->head = n_new;
 8014a6e:	6060      	str	r0, [r4, #4]
}
 8014a70:	bd10      	pop	{r4, pc}
 8014a72:	bf00      	nop

08014a74 <_lv_ll_remove>:
    if(ll_p != NULL) {
 8014a74:	b308      	cbz	r0, 8014aba <_lv_ll_remove+0x46>
    if(_lv_ll_get_head(ll_p) == node_p) {
 8014a76:	6843      	ldr	r3, [r0, #4]
 8014a78:	4299      	cmp	r1, r3
 8014a7a:	d00e      	beq.n	8014a9a <_lv_ll_remove+0x26>
    else if(_lv_ll_get_tail(ll_p) == node_p) {
 8014a7c:	6883      	ldr	r3, [r0, #8]
 8014a7e:	4299      	cmp	r1, r3
 8014a80:	d013      	beq.n	8014aaa <_lv_ll_remove+0x36>
    n_act_d += LL_PREV_P_OFFSET(ll_p);
 8014a82:	6803      	ldr	r3, [r0, #0]
{
 8014a84:	b410      	push	{r4}
    return *((lv_ll_node_t **)n_act_d);
 8014a86:	58c8      	ldr	r0, [r1, r3]
    n_act_d += LL_NEXT_P_OFFSET(ll_p);
 8014a88:	1d1c      	adds	r4, r3, #4
    return *((lv_ll_node_t **)n_act_d);
 8014a8a:	590a      	ldr	r2, [r1, r4]
    if(act == NULL) return; /*Can't set the next node of `NULL`*/
 8014a8c:	b100      	cbz	r0, 8014a90 <_lv_ll_remove+0x1c>
    *act_node_p = *next_node_p;
 8014a8e:	5102      	str	r2, [r0, r4]
    if(act == NULL) return; /*Can't set the prev node of `NULL`*/
 8014a90:	b102      	cbz	r2, 8014a94 <_lv_ll_remove+0x20>
    *act_node_p = *prev_node_p;
 8014a92:	50d0      	str	r0, [r2, r3]
}
 8014a94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014a98:	4770      	bx	lr
    n_act_d += LL_NEXT_P_OFFSET(ll_p);
 8014a9a:	6802      	ldr	r2, [r0, #0]
    return *((lv_ll_node_t **)n_act_d);
 8014a9c:	4411      	add	r1, r2
 8014a9e:	684b      	ldr	r3, [r1, #4]
        ll_p->head = _lv_ll_get_next(ll_p, node_p);
 8014aa0:	6043      	str	r3, [r0, #4]
        if(ll_p->head == NULL) {
 8014aa2:	b163      	cbz	r3, 8014abe <_lv_ll_remove+0x4a>
    *act_node_p = *prev_node_p;
 8014aa4:	2100      	movs	r1, #0
 8014aa6:	5099      	str	r1, [r3, r2]
 8014aa8:	4770      	bx	lr
    n_act_d += LL_PREV_P_OFFSET(ll_p);
 8014aaa:	6802      	ldr	r2, [r0, #0]
    return *((lv_ll_node_t **)n_act_d);
 8014aac:	588b      	ldr	r3, [r1, r2]
        ll_p->tail = _lv_ll_get_prev(ll_p, node_p);
 8014aae:	6083      	str	r3, [r0, #8]
        if(ll_p->tail == NULL) {
 8014ab0:	b13b      	cbz	r3, 8014ac2 <_lv_ll_remove+0x4e>
    *act_node_p = *next_node_p;
 8014ab2:	4413      	add	r3, r2
 8014ab4:	2200      	movs	r2, #0
 8014ab6:	605a      	str	r2, [r3, #4]
 8014ab8:	4770      	bx	lr
    if(_lv_ll_get_head(ll_p) == node_p) {
 8014aba:	b121      	cbz	r1, 8014ac6 <_lv_ll_remove+0x52>
 8014abc:	4770      	bx	lr
            ll_p->tail = NULL;
 8014abe:	6083      	str	r3, [r0, #8]
 8014ac0:	4770      	bx	lr
            ll_p->head = NULL;
 8014ac2:	6043      	str	r3, [r0, #4]
 8014ac4:	4770      	bx	lr
        ll_p->head = _lv_ll_get_next(ll_p, node_p);
 8014ac6:	6049      	str	r1, [r1, #4]
 8014ac8:	deff      	udf	#255	; 0xff
 8014aca:	bf00      	nop

08014acc <_lv_ll_chg_list>:
{
 8014acc:	b470      	push	{r4, r5, r6}
    if(ll_p != NULL) {
 8014ace:	2800      	cmp	r0, #0
 8014ad0:	d043      	beq.n	8014b5a <_lv_ll_chg_list+0x8e>
    if(_lv_ll_get_head(ll_p) == node_p) {
 8014ad2:	6844      	ldr	r4, [r0, #4]
 8014ad4:	42a2      	cmp	r2, r4
 8014ad6:	d02d      	beq.n	8014b34 <_lv_ll_chg_list+0x68>
    else if(_lv_ll_get_tail(ll_p) == node_p) {
 8014ad8:	6884      	ldr	r4, [r0, #8]
 8014ada:	42a2      	cmp	r2, r4
 8014adc:	d032      	beq.n	8014b44 <_lv_ll_chg_list+0x78>
    n_act_d += LL_PREV_P_OFFSET(ll_p);
 8014ade:	6800      	ldr	r0, [r0, #0]
    n_act_d += LL_NEXT_P_OFFSET(ll_p);
 8014ae0:	1d06      	adds	r6, r0, #4
    return *((lv_ll_node_t **)n_act_d);
 8014ae2:	5815      	ldr	r5, [r2, r0]
    return *((lv_ll_node_t **)n_act_d);
 8014ae4:	5994      	ldr	r4, [r2, r6]
    if(act == NULL) return; /*Can't set the next node of `NULL`*/
 8014ae6:	b105      	cbz	r5, 8014aea <_lv_ll_chg_list+0x1e>
    *act_node_p = *next_node_p;
 8014ae8:	51ac      	str	r4, [r5, r6]
    if(act == NULL) return; /*Can't set the prev node of `NULL`*/
 8014aea:	b104      	cbz	r4, 8014aee <_lv_ll_chg_list+0x22>
    *act_node_p = *prev_node_p;
 8014aec:	5025      	str	r5, [r4, r0]
    if(head) {
 8014aee:	b17b      	cbz	r3, 8014b10 <_lv_ll_chg_list+0x44>
    if(act == NULL) return; /*Can't set the prev node of `NULL`*/
 8014af0:	b12a      	cbz	r2, 8014afe <_lv_ll_chg_list+0x32>
    act8 += LL_PREV_P_OFFSET(ll_p);
 8014af2:	680b      	ldr	r3, [r1, #0]
    *act_node_p = *prev_node_p;
 8014af4:	2400      	movs	r4, #0
    *act_node_p = *next_node_p;
 8014af6:	18d0      	adds	r0, r2, r3
    *act_node_p = *prev_node_p;
 8014af8:	50d4      	str	r4, [r2, r3]
        node_set_next(ll_new_p, node, ll_new_p->head);
 8014afa:	684b      	ldr	r3, [r1, #4]
    *act_node_p = *next_node_p;
 8014afc:	6043      	str	r3, [r0, #4]
        if(ll_new_p->head != NULL) { /*If there is old head then before it goes the new*/
 8014afe:	684b      	ldr	r3, [r1, #4]
 8014b00:	b10b      	cbz	r3, 8014b06 <_lv_ll_chg_list+0x3a>
    *act_node_p = *prev_node_p;
 8014b02:	6808      	ldr	r0, [r1, #0]
 8014b04:	501a      	str	r2, [r3, r0]
        if(ll_new_p->tail == NULL) { /*If there is no tail (first node) set the tail too*/
 8014b06:	688b      	ldr	r3, [r1, #8]
        ll_new_p->head = node;       /*Set the new head in the dsc.*/
 8014b08:	604a      	str	r2, [r1, #4]
        if(ll_new_p->tail == NULL) { /*If there is no tail (first node) set the tail too*/
 8014b0a:	b31b      	cbz	r3, 8014b54 <_lv_ll_chg_list+0x88>
}
 8014b0c:	bc70      	pop	{r4, r5, r6}
 8014b0e:	4770      	bx	lr
        node_set_prev(ll_new_p, node, ll_new_p->tail);
 8014b10:	6888      	ldr	r0, [r1, #8]
    if(act == NULL) return; /*Can't set the prev node of `NULL`*/
 8014b12:	b122      	cbz	r2, 8014b1e <_lv_ll_chg_list+0x52>
    act8 += LL_PREV_P_OFFSET(ll_p);
 8014b14:	680c      	ldr	r4, [r1, #0]
    *act_node_p = *next_node_p;
 8014b16:	1915      	adds	r5, r2, r4
    *act_node_p = *prev_node_p;
 8014b18:	5110      	str	r0, [r2, r4]
    *act_node_p = *next_node_p;
 8014b1a:	606b      	str	r3, [r5, #4]
 8014b1c:	6888      	ldr	r0, [r1, #8]
        if(ll_new_p->tail != NULL) { /*If there is old tail then after it goes the new*/
 8014b1e:	b110      	cbz	r0, 8014b26 <_lv_ll_chg_list+0x5a>
    *act_node_p = *next_node_p;
 8014b20:	680b      	ldr	r3, [r1, #0]
 8014b22:	4418      	add	r0, r3
 8014b24:	6042      	str	r2, [r0, #4]
        if(ll_new_p->head == NULL) { /*If there is no head (first node) set the head too*/
 8014b26:	684b      	ldr	r3, [r1, #4]
        ll_new_p->tail = node;       /*Set the new tail in the dsc.*/
 8014b28:	608a      	str	r2, [r1, #8]
        if(ll_new_p->head == NULL) { /*If there is no head (first node) set the head too*/
 8014b2a:	2b00      	cmp	r3, #0
 8014b2c:	d1ee      	bne.n	8014b0c <_lv_ll_chg_list+0x40>
            ll_new_p->head = node;
 8014b2e:	604a      	str	r2, [r1, #4]
}
 8014b30:	bc70      	pop	{r4, r5, r6}
 8014b32:	4770      	bx	lr
    n_act_d += LL_NEXT_P_OFFSET(ll_p);
 8014b34:	6805      	ldr	r5, [r0, #0]
    return *((lv_ll_node_t **)n_act_d);
 8014b36:	1954      	adds	r4, r2, r5
 8014b38:	6864      	ldr	r4, [r4, #4]
        ll_p->head = _lv_ll_get_next(ll_p, node_p);
 8014b3a:	6044      	str	r4, [r0, #4]
        if(ll_p->head == NULL) {
 8014b3c:	b18c      	cbz	r4, 8014b62 <_lv_ll_chg_list+0x96>
    *act_node_p = *prev_node_p;
 8014b3e:	2000      	movs	r0, #0
 8014b40:	5160      	str	r0, [r4, r5]
 8014b42:	e7d4      	b.n	8014aee <_lv_ll_chg_list+0x22>
    n_act_d += LL_PREV_P_OFFSET(ll_p);
 8014b44:	6805      	ldr	r5, [r0, #0]
    return *((lv_ll_node_t **)n_act_d);
 8014b46:	5954      	ldr	r4, [r2, r5]
        ll_p->tail = _lv_ll_get_prev(ll_p, node_p);
 8014b48:	6084      	str	r4, [r0, #8]
        if(ll_p->tail == NULL) {
 8014b4a:	b164      	cbz	r4, 8014b66 <_lv_ll_chg_list+0x9a>
    *act_node_p = *next_node_p;
 8014b4c:	442c      	add	r4, r5
 8014b4e:	2000      	movs	r0, #0
 8014b50:	6060      	str	r0, [r4, #4]
 8014b52:	e7cc      	b.n	8014aee <_lv_ll_chg_list+0x22>
}
 8014b54:	bc70      	pop	{r4, r5, r6}
            ll_new_p->tail = node;
 8014b56:	608a      	str	r2, [r1, #8]
}
 8014b58:	4770      	bx	lr
    if(_lv_ll_get_head(ll_p) == node_p) {
 8014b5a:	2a00      	cmp	r2, #0
 8014b5c:	d1c7      	bne.n	8014aee <_lv_ll_chg_list+0x22>
        ll_p->head = _lv_ll_get_next(ll_p, node_p);
 8014b5e:	6052      	str	r2, [r2, #4]
 8014b60:	deff      	udf	#255	; 0xff
            ll_p->tail = NULL;
 8014b62:	6084      	str	r4, [r0, #8]
 8014b64:	e7c3      	b.n	8014aee <_lv_ll_chg_list+0x22>
            ll_p->head = NULL;
 8014b66:	6044      	str	r4, [r0, #4]
 8014b68:	e7c1      	b.n	8014aee <_lv_ll_chg_list+0x22>
 8014b6a:	bf00      	nop

08014b6c <_lv_ll_get_head>:
    if(ll_p != NULL) {
 8014b6c:	b100      	cbz	r0, 8014b70 <_lv_ll_get_head+0x4>
        head = ll_p->head;
 8014b6e:	6840      	ldr	r0, [r0, #4]
}
 8014b70:	4770      	bx	lr
 8014b72:	bf00      	nop

08014b74 <_lv_ll_get_tail>:
    if(ll_p != NULL) {
 8014b74:	b100      	cbz	r0, 8014b78 <_lv_ll_get_tail+0x4>
        tail = ll_p->tail;
 8014b76:	6880      	ldr	r0, [r0, #8]
}
 8014b78:	4770      	bx	lr
 8014b7a:	bf00      	nop

08014b7c <_lv_ll_get_next>:
    if(ll_p == NULL) return NULL;
 8014b7c:	b110      	cbz	r0, 8014b84 <_lv_ll_get_next+0x8>
    return *((lv_ll_node_t **)n_act_d);
 8014b7e:	6803      	ldr	r3, [r0, #0]
 8014b80:	4419      	add	r1, r3
 8014b82:	6848      	ldr	r0, [r1, #4]
}
 8014b84:	4770      	bx	lr
 8014b86:	bf00      	nop

08014b88 <_lv_ll_get_prev>:
    if(ll_p == NULL) return NULL;
 8014b88:	b108      	cbz	r0, 8014b8e <_lv_ll_get_prev+0x6>
    return *((lv_ll_node_t **)n_act_d);
 8014b8a:	6803      	ldr	r3, [r0, #0]
 8014b8c:	58c8      	ldr	r0, [r1, r3]
}
 8014b8e:	4770      	bx	lr

08014b90 <_lv_ll_get_len>:
    if(ll_p != NULL) {
 8014b90:	b160      	cbz	r0, 8014bac <_lv_ll_get_len+0x1c>
        head = ll_p->head;
 8014b92:	6843      	ldr	r3, [r0, #4]
    for(node = _lv_ll_get_head(ll_p); node != NULL; node = _lv_ll_get_next(ll_p, node)) {
 8014b94:	b14b      	cbz	r3, 8014baa <_lv_ll_get_len+0x1a>
    n_act_d += LL_NEXT_P_OFFSET(ll_p);
 8014b96:	6802      	ldr	r2, [r0, #0]
        len++;
 8014b98:	2001      	movs	r0, #1
    n_act_d += LL_NEXT_P_OFFSET(ll_p);
 8014b9a:	3204      	adds	r2, #4
    return *((lv_ll_node_t **)n_act_d);
 8014b9c:	589b      	ldr	r3, [r3, r2]
    for(node = _lv_ll_get_head(ll_p); node != NULL; node = _lv_ll_get_next(ll_p, node)) {
 8014b9e:	b133      	cbz	r3, 8014bae <_lv_ll_get_len+0x1e>
    return *((lv_ll_node_t **)n_act_d);
 8014ba0:	589b      	ldr	r3, [r3, r2]
        len++;
 8014ba2:	3001      	adds	r0, #1
    for(node = _lv_ll_get_head(ll_p); node != NULL; node = _lv_ll_get_next(ll_p, node)) {
 8014ba4:	2b00      	cmp	r3, #0
 8014ba6:	d1fb      	bne.n	8014ba0 <_lv_ll_get_len+0x10>
 8014ba8:	4770      	bx	lr
 8014baa:	4618      	mov	r0, r3
}
 8014bac:	4770      	bx	lr
 8014bae:	4770      	bx	lr

08014bb0 <_lv_ll_move_before>:
    if(n_act == n_after) return; /*Can't move before itself*/
 8014bb0:	4291      	cmp	r1, r2
 8014bb2:	d02a      	beq.n	8014c0a <_lv_ll_move_before+0x5a>
{
 8014bb4:	b4f0      	push	{r4, r5, r6, r7}
    if(n_after != NULL)
 8014bb6:	b312      	cbz	r2, 8014bfe <_lv_ll_move_before+0x4e>
    if(ll_p == NULL) return NULL;
 8014bb8:	2800      	cmp	r0, #0
 8014bba:	d044      	beq.n	8014c46 <_lv_ll_move_before+0x96>
    return *((lv_ll_node_t **)n_act_d);
 8014bbc:	6803      	ldr	r3, [r0, #0]
 8014bbe:	58d3      	ldr	r3, [r2, r3]
    if(n_act == n_before) return; /*Already before `n_after`*/
 8014bc0:	4299      	cmp	r1, r3
 8014bc2:	d01a      	beq.n	8014bfa <_lv_ll_move_before+0x4a>
    if(_lv_ll_get_head(ll_p) == node_p) {
 8014bc4:	6844      	ldr	r4, [r0, #4]
 8014bc6:	42a1      	cmp	r1, r4
 8014bc8:	d020      	beq.n	8014c0c <_lv_ll_move_before+0x5c>
    else if(_lv_ll_get_tail(ll_p) == node_p) {
 8014bca:	6884      	ldr	r4, [r0, #8]
 8014bcc:	42a1      	cmp	r1, r4
 8014bce:	d025      	beq.n	8014c1c <_lv_ll_move_before+0x6c>
    n_act_d += LL_PREV_P_OFFSET(ll_p);
 8014bd0:	6804      	ldr	r4, [r0, #0]
    n_act_d += LL_NEXT_P_OFFSET(ll_p);
 8014bd2:	1d27      	adds	r7, r4, #4
    return *((lv_ll_node_t **)n_act_d);
 8014bd4:	590e      	ldr	r6, [r1, r4]
    return *((lv_ll_node_t **)n_act_d);
 8014bd6:	59cd      	ldr	r5, [r1, r7]
    if(act == NULL) return; /*Can't set the next node of `NULL`*/
 8014bd8:	b106      	cbz	r6, 8014bdc <_lv_ll_move_before+0x2c>
    *act_node_p = *next_node_p;
 8014bda:	51f5      	str	r5, [r6, r7]
    if(act == NULL) return; /*Can't set the prev node of `NULL`*/
 8014bdc:	b105      	cbz	r5, 8014be0 <_lv_ll_move_before+0x30>
    *act_node_p = *prev_node_p;
 8014bde:	512e      	str	r6, [r5, r4]
    if(act == NULL) return; /*Can't set the next node of `NULL`*/
 8014be0:	b113      	cbz	r3, 8014be8 <_lv_ll_move_before+0x38>
    *act_node_p = *next_node_p;
 8014be2:	6804      	ldr	r4, [r0, #0]
 8014be4:	441c      	add	r4, r3
 8014be6:	6061      	str	r1, [r4, #4]
    if(act == NULL) return; /*Can't set the prev node of `NULL`*/
 8014be8:	b301      	cbz	r1, 8014c2c <_lv_ll_move_before+0x7c>
    *act_node_p = *prev_node_p;
 8014bea:	6804      	ldr	r4, [r0, #0]
 8014bec:	510b      	str	r3, [r1, r4]
    if(act == NULL) return; /*Can't set the prev node of `NULL`*/
 8014bee:	b31a      	cbz	r2, 8014c38 <_lv_ll_move_before+0x88>
    *act_node_p = *prev_node_p;
 8014bf0:	5111      	str	r1, [r2, r4]
    if(act == NULL) return; /*Can't set the next node of `NULL`*/
 8014bf2:	b109      	cbz	r1, 8014bf8 <_lv_ll_move_before+0x48>
    *act_node_p = *next_node_p;
 8014bf4:	440c      	add	r4, r1
 8014bf6:	6062      	str	r2, [r4, #4]
    if(n_before == NULL) ll_p->head = n_act;
 8014bf8:	b123      	cbz	r3, 8014c04 <_lv_ll_move_before+0x54>
}
 8014bfa:	bcf0      	pop	{r4, r5, r6, r7}
 8014bfc:	4770      	bx	lr
    if(ll_p != NULL) {
 8014bfe:	b310      	cbz	r0, 8014c46 <_lv_ll_move_before+0x96>
        tail = ll_p->tail;
 8014c00:	6883      	ldr	r3, [r0, #8]
 8014c02:	e7dd      	b.n	8014bc0 <_lv_ll_move_before+0x10>
}
 8014c04:	bcf0      	pop	{r4, r5, r6, r7}
    if(n_before == NULL) ll_p->head = n_act;
 8014c06:	6041      	str	r1, [r0, #4]
}
 8014c08:	4770      	bx	lr
 8014c0a:	4770      	bx	lr
    n_act_d += LL_NEXT_P_OFFSET(ll_p);
 8014c0c:	6805      	ldr	r5, [r0, #0]
    return *((lv_ll_node_t **)n_act_d);
 8014c0e:	194c      	adds	r4, r1, r5
 8014c10:	6864      	ldr	r4, [r4, #4]
        ll_p->head = _lv_ll_get_next(ll_p, node_p);
 8014c12:	6044      	str	r4, [r0, #4]
        if(ll_p->head == NULL) {
 8014c14:	b1dc      	cbz	r4, 8014c4e <_lv_ll_move_before+0x9e>
    *act_node_p = *prev_node_p;
 8014c16:	2600      	movs	r6, #0
 8014c18:	5166      	str	r6, [r4, r5]
 8014c1a:	e7e1      	b.n	8014be0 <_lv_ll_move_before+0x30>
    n_act_d += LL_PREV_P_OFFSET(ll_p);
 8014c1c:	6805      	ldr	r5, [r0, #0]
    return *((lv_ll_node_t **)n_act_d);
 8014c1e:	594c      	ldr	r4, [r1, r5]
        ll_p->tail = _lv_ll_get_prev(ll_p, node_p);
 8014c20:	6084      	str	r4, [r0, #8]
        if(ll_p->tail == NULL) {
 8014c22:	b1b4      	cbz	r4, 8014c52 <_lv_ll_move_before+0xa2>
    *act_node_p = *next_node_p;
 8014c24:	442c      	add	r4, r5
 8014c26:	2500      	movs	r5, #0
 8014c28:	6065      	str	r5, [r4, #4]
 8014c2a:	e7d9      	b.n	8014be0 <_lv_ll_move_before+0x30>
    if(act == NULL) return; /*Can't set the prev node of `NULL`*/
 8014c2c:	b13a      	cbz	r2, 8014c3e <_lv_ll_move_before+0x8e>
    *act_node_p = *prev_node_p;
 8014c2e:	6804      	ldr	r4, [r0, #0]
 8014c30:	5111      	str	r1, [r2, r4]
    if(n_before == NULL) ll_p->head = n_act;
 8014c32:	2b00      	cmp	r3, #0
 8014c34:	d1e1      	bne.n	8014bfa <_lv_ll_move_before+0x4a>
 8014c36:	e7e5      	b.n	8014c04 <_lv_ll_move_before+0x54>
    *act_node_p = *next_node_p;
 8014c38:	6804      	ldr	r4, [r0, #0]
 8014c3a:	440c      	add	r4, r1
 8014c3c:	6062      	str	r2, [r4, #4]
    if(n_after == NULL) ll_p->tail = n_act;
 8014c3e:	6081      	str	r1, [r0, #8]
    if(n_before == NULL) ll_p->head = n_act;
 8014c40:	2b00      	cmp	r3, #0
 8014c42:	d1da      	bne.n	8014bfa <_lv_ll_move_before+0x4a>
 8014c44:	e7de      	b.n	8014c04 <_lv_ll_move_before+0x54>
    if(n_act == n_before) return; /*Already before `n_after`*/
 8014c46:	2900      	cmp	r1, #0
 8014c48:	d0d7      	beq.n	8014bfa <_lv_ll_move_before+0x4a>
 8014c4a:	2300      	movs	r3, #0
 8014c4c:	e7cd      	b.n	8014bea <_lv_ll_move_before+0x3a>
            ll_p->tail = NULL;
 8014c4e:	6084      	str	r4, [r0, #8]
 8014c50:	e7c6      	b.n	8014be0 <_lv_ll_move_before+0x30>
            ll_p->head = NULL;
 8014c52:	6044      	str	r4, [r0, #4]
 8014c54:	e7c4      	b.n	8014be0 <_lv_ll_move_before+0x30>
 8014c56:	bf00      	nop

08014c58 <_lv_ll_is_empty>:
    if(ll_p == NULL) return true;
 8014c58:	b140      	cbz	r0, 8014c6c <_lv_ll_is_empty+0x14>
    if(ll_p->head == NULL && ll_p->tail == NULL) return true;
 8014c5a:	6843      	ldr	r3, [r0, #4]
 8014c5c:	b10b      	cbz	r3, 8014c62 <_lv_ll_is_empty+0xa>
    return false;
 8014c5e:	2000      	movs	r0, #0
}
 8014c60:	4770      	bx	lr
    if(ll_p->head == NULL && ll_p->tail == NULL) return true;
 8014c62:	6880      	ldr	r0, [r0, #8]
 8014c64:	fab0 f080 	clz	r0, r0
 8014c68:	0940      	lsrs	r0, r0, #5
 8014c6a:	4770      	bx	lr
    if(ll_p == NULL) return true;
 8014c6c:	2001      	movs	r0, #1
 8014c6e:	4770      	bx	lr

08014c70 <_lv_trigo_sin>:
 * @return sinus of 'angle'. sin(-90) = -32767, sin(90) = 32767
 */
LV_ATTRIBUTE_FAST_MEM int16_t _lv_trigo_sin(int16_t angle)
{
    int16_t ret = 0;
    angle       = angle % 360;
 8014c70:	4a1a      	ldr	r2, [pc, #104]	; (8014cdc <_lv_trigo_sin+0x6c>)
 8014c72:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8014c76:	fb82 3200 	smull	r3, r2, r2, r0
 8014c7a:	17c3      	asrs	r3, r0, #31
 8014c7c:	4402      	add	r2, r0
 8014c7e:	ebc3 2322 	rsb	r3, r3, r2, asr #8
 8014c82:	fb01 0013 	mls	r0, r1, r3, r0
 8014c86:	b200      	sxth	r0, r0

    if(angle < 0) angle = 360 + angle;
 8014c88:	2800      	cmp	r0, #0
 8014c8a:	da01      	bge.n	8014c90 <_lv_trigo_sin+0x20>
 8014c8c:	4408      	add	r0, r1
 8014c8e:	b200      	sxth	r0, r0

    if(angle < 90) {
 8014c90:	2859      	cmp	r0, #89	; 0x59
 8014c92:	dc03      	bgt.n	8014c9c <_lv_trigo_sin+0x2c>
        ret = sin0_90_table[angle];
 8014c94:	4b12      	ldr	r3, [pc, #72]	; (8014ce0 <_lv_trigo_sin+0x70>)
 8014c96:	f933 0010 	ldrsh.w	r0, [r3, r0, lsl #1]
 8014c9a:	4770      	bx	lr
    }
    else if(angle >= 90 && angle < 180) {
 8014c9c:	b280      	uxth	r0, r0
 8014c9e:	f1a0 035a 	sub.w	r3, r0, #90	; 0x5a
 8014ca2:	2b59      	cmp	r3, #89	; 0x59
 8014ca4:	d806      	bhi.n	8014cb4 <_lv_trigo_sin+0x44>
        angle = 180 - angle;
 8014ca6:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
        ret   = sin0_90_table[angle];
 8014caa:	4b0d      	ldr	r3, [pc, #52]	; (8014ce0 <_lv_trigo_sin+0x70>)
 8014cac:	b280      	uxth	r0, r0
 8014cae:	f933 0010 	ldrsh.w	r0, [r3, r0, lsl #1]
 8014cb2:	4770      	bx	lr
    }
    else if(angle >= 180 && angle < 270) {
 8014cb4:	f1a0 03b4 	sub.w	r3, r0, #180	; 0xb4
 8014cb8:	b29b      	uxth	r3, r3
 8014cba:	2b59      	cmp	r3, #89	; 0x59
 8014cbc:	d805      	bhi.n	8014cca <_lv_trigo_sin+0x5a>
        angle = angle - 180;
        ret   = -sin0_90_table[angle];
 8014cbe:	4a08      	ldr	r2, [pc, #32]	; (8014ce0 <_lv_trigo_sin+0x70>)
 8014cc0:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 8014cc4:	4240      	negs	r0, r0
 8014cc6:	b200      	sxth	r0, r0
 8014cc8:	4770      	bx	lr
    }
    else {   /*angle >=270*/
        angle = 360 - angle;
 8014cca:	f5c0 70b4 	rsb	r0, r0, #360	; 0x168
        ret   = -sin0_90_table[angle];
 8014cce:	4b04      	ldr	r3, [pc, #16]	; (8014ce0 <_lv_trigo_sin+0x70>)
 8014cd0:	b280      	uxth	r0, r0
 8014cd2:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8014cd6:	4240      	negs	r0, r0
 8014cd8:	b200      	sxth	r0, r0
    }

    return ret;
}
 8014cda:	4770      	bx	lr
 8014cdc:	b60b60b7 	.word	0xb60b60b7
 8014ce0:	0802175c 	.word	0x0802175c

08014ce4 <_lv_sqrt>:
 * If root < 16: mask = 0x80
 * If root < 256: mask = 0x800
 * Else: mask = 0x8000
 */
LV_ATTRIBUTE_FAST_MEM void _lv_sqrt(uint32_t x, lv_sqrt_res_t * q, uint32_t mask)
{
 8014ce4:	b430      	push	{r4, r5}
    x = x << 8; /*To get 4 bit precision. (sqrt(256) = 16 = 4 bit)*/
 8014ce6:	0200      	lsls	r0, r0, #8

    uint32_t root = 0;
 8014ce8:	2400      	movs	r4, #0
    uint32_t trial;
    // http://ww1.microchip.com/...en/AppNotes/91040a.pdf
    do {
        trial = root + mask;
 8014cea:	18a3      	adds	r3, r4, r2
        if(trial * trial <= x) root = trial;
 8014cec:	fb03 f503 	mul.w	r5, r3, r3
        trial = root + mask;
 8014cf0:	42a8      	cmp	r0, r5
 8014cf2:	bf28      	it	cs
 8014cf4:	461c      	movcs	r4, r3
        mask = mask >> 1;
    } while(mask);
 8014cf6:	0852      	lsrs	r2, r2, #1
 8014cf8:	d1f7      	bne.n	8014cea <_lv_sqrt+0x6>

    q->i = root >> 4;
    q->f = (root & 0xf) << 4;
 8014cfa:	0123      	lsls	r3, r4, #4
    q->i = root >> 4;
 8014cfc:	0924      	lsrs	r4, r4, #4
    q->f = (root & 0xf) << 4;
 8014cfe:	b2db      	uxtb	r3, r3
    q->i = root >> 4;
 8014d00:	800c      	strh	r4, [r1, #0]
    q->f = (root & 0xf) << 4;
 8014d02:	804b      	strh	r3, [r1, #2]
}
 8014d04:	bc30      	pop	{r4, r5}
 8014d06:	4770      	bx	lr

08014d08 <lv_mem_alloc.part.0>:
    }
    else {   /*Get the next entry */
        uint8_t * data = &act_e->first_data;
        next_e         = (lv_mem_ent_t *)&data[act_e->header.s.d_size];

        if(&next_e->first_data >= &work_mem[LV_MEM_SIZE]) next_e = NULL;
 8014d08:	4b1d      	ldr	r3, [pc, #116]	; (8014d80 <lv_mem_alloc.part.0+0x78>)
void * lv_mem_alloc(size_t size)
 8014d0a:	b470      	push	{r4, r5, r6}
        if(&next_e->first_data >= &work_mem[LV_MEM_SIZE]) next_e = NULL;
 8014d0c:	681e      	ldr	r6, [r3, #0]
    lv_mem_ent_t * e = NULL;
 8014d0e:	b916      	cbnz	r6, 8014d16 <lv_mem_alloc.part.0+0xe>
 8014d10:	2000      	movs	r0, #0
}
 8014d12:	bc70      	pop	{r4, r5, r6}
 8014d14:	4770      	bx	lr
 8014d16:	3003      	adds	r0, #3
 8014d18:	f506 4200 	add.w	r2, r6, #32768	; 0x8000
        if(&next_e->first_data >= &work_mem[LV_MEM_SIZE]) next_e = NULL;
 8014d1c:	4634      	mov	r4, r6
 8014d1e:	1d35      	adds	r5, r6, #4
 8014d20:	f020 0103 	bic.w	r1, r0, #3
 */
static void * ent_alloc(lv_mem_ent_t * e, size_t size)
{
    void * alloc = NULL;
    /*If the memory is free and big enough then use it */
    if(e->header.s.used == 0 && e->header.s.d_size >= size) {
 8014d24:	7823      	ldrb	r3, [r4, #0]
 8014d26:	6820      	ldr	r0, [r4, #0]
 8014d28:	07db      	lsls	r3, r3, #31
 8014d2a:	d423      	bmi.n	8014d74 <lv_mem_alloc.part.0+0x6c>
 8014d2c:	ebb1 0f50 	cmp.w	r1, r0, lsr #1
 8014d30:	f3c0 035e 	ubfx	r3, r0, #1, #31
 8014d34:	d81e      	bhi.n	8014d74 <lv_mem_alloc.part.0+0x6c>
{
    /*Round the size up to ALIGN_MASK*/
    size = (size + ALIGN_MASK) & (~ALIGN_MASK);

    /*Don't let empty space only for a header without data*/
    if(e->header.s.d_size == size + sizeof(lv_mem_header_t)) {
 8014d36:	1d08      	adds	r0, r1, #4
        size = e->header.s.d_size;
    }

    /* Create the new entry after the current if there is space for it */
    if(e->header.s.d_size != size) {
 8014d38:	4298      	cmp	r0, r3
 8014d3a:	d019      	beq.n	8014d70 <lv_mem_alloc.part.0+0x68>
 8014d3c:	428b      	cmp	r3, r1
 8014d3e:	d017      	beq.n	8014d70 <lv_mem_alloc.part.0+0x68>
        uint8_t * e_data             = &e->first_data;
        lv_mem_ent_t * after_new_e   = (lv_mem_ent_t *)&e_data[size];
        after_new_e->header.s.used   = 0;
        after_new_e->header.s.d_size = (uint32_t)e->header.s.d_size - size - sizeof(lv_mem_header_t);
 8014d40:	1a5b      	subs	r3, r3, r1
        uint8_t * e_data             = &e->first_data;
 8014d42:	4628      	mov	r0, r5
        after_new_e->header.s.d_size = (uint32_t)e->header.s.d_size - size - sizeof(lv_mem_header_t);
 8014d44:	3b04      	subs	r3, #4
        after_new_e->header.s.used   = 0;
 8014d46:	005b      	lsls	r3, r3, #1
 8014d48:	506b      	str	r3, [r5, r1]

        /* Set the new size for the original entry */
        e->header.s.d_size = (uint32_t)size;
 8014d4a:	6823      	ldr	r3, [r4, #0]
 8014d4c:	f361 035f 	bfi	r3, r1, #1, #31
 8014d50:	6023      	str	r3, [r4, #0]
        e->header.s.used = 1;
 8014d52:	7823      	ldrb	r3, [r4, #0]
        if((uintptr_t) alloc > (uintptr_t) work_mem) {
 8014d54:	42b5      	cmp	r5, r6
        e->header.s.used = 1;
 8014d56:	f043 0301 	orr.w	r3, r3, #1
 8014d5a:	7023      	strb	r3, [r4, #0]
        if((uintptr_t) alloc > (uintptr_t) work_mem) {
 8014d5c:	d9d9      	bls.n	8014d12 <lv_mem_alloc.part.0+0xa>
            if((((uintptr_t) alloc - (uintptr_t) work_mem) + size) > mem_max_size) {
 8014d5e:	1b89      	subs	r1, r1, r6
 8014d60:	4b08      	ldr	r3, [pc, #32]	; (8014d84 <lv_mem_alloc.part.0+0x7c>)
 8014d62:	4429      	add	r1, r5
 8014d64:	681a      	ldr	r2, [r3, #0]
 8014d66:	4291      	cmp	r1, r2
 8014d68:	d9d3      	bls.n	8014d12 <lv_mem_alloc.part.0+0xa>
                mem_max_size = ((uintptr_t) alloc - (uintptr_t) work_mem) + size;
 8014d6a:	6019      	str	r1, [r3, #0]
}
 8014d6c:	bc70      	pop	{r4, r5, r6}
 8014d6e:	4770      	bx	lr
 8014d70:	4628      	mov	r0, r5
 8014d72:	e7ee      	b.n	8014d52 <lv_mem_alloc.part.0+0x4a>
        next_e         = (lv_mem_ent_t *)&data[act_e->header.s.d_size];
 8014d74:	eb05 0450 	add.w	r4, r5, r0, lsr #1
        if(&next_e->first_data >= &work_mem[LV_MEM_SIZE]) next_e = NULL;
 8014d78:	1d25      	adds	r5, r4, #4
 8014d7a:	42aa      	cmp	r2, r5
 8014d7c:	d8d2      	bhi.n	8014d24 <lv_mem_alloc.part.0+0x1c>
 8014d7e:	e7c7      	b.n	8014d10 <lv_mem_alloc.part.0+0x8>
 8014d80:	20018184 	.word	0x20018184
 8014d84:	20018180 	.word	0x20018180

08014d88 <_lv_mem_init>:
    work_mem = (uint8_t *)work_mem_int;
 8014d88:	4b03      	ldr	r3, [pc, #12]	; (8014d98 <_lv_mem_init+0x10>)
    full->header.s.used = 0;
 8014d8a:	f64f 72f8 	movw	r2, #65528	; 0xfff8
    work_mem = (uint8_t *)work_mem_int;
 8014d8e:	4903      	ldr	r1, [pc, #12]	; (8014d9c <_lv_mem_init+0x14>)
    full->header.s.used = 0;
 8014d90:	601a      	str	r2, [r3, #0]
    work_mem = (uint8_t *)work_mem_int;
 8014d92:	600b      	str	r3, [r1, #0]
}
 8014d94:	4770      	bx	lr
 8014d96:	bf00      	nop
 8014d98:	20018188 	.word	0x20018188
 8014d9c:	20018184 	.word	0x20018184

08014da0 <lv_mem_alloc>:
    if(size == 0) {
 8014da0:	b108      	cbz	r0, 8014da6 <lv_mem_alloc+0x6>
 8014da2:	f7ff bfb1 	b.w	8014d08 <lv_mem_alloc.part.0>
}
 8014da6:	4801      	ldr	r0, [pc, #4]	; (8014dac <lv_mem_alloc+0xc>)
 8014da8:	4770      	bx	lr
 8014daa:	bf00      	nop
 8014dac:	20020188 	.word	0x20020188

08014db0 <lv_mem_defrag>:
        next_e = (lv_mem_ent_t *)work_mem;
 8014db0:	4b1d      	ldr	r3, [pc, #116]	; (8014e28 <lv_mem_defrag+0x78>)
 8014db2:	6818      	ldr	r0, [r3, #0]
        while(e_free != NULL) {
 8014db4:	2800      	cmp	r0, #0
 8014db6:	d036      	beq.n	8014e26 <lv_mem_defrag+0x76>
 8014db8:	4601      	mov	r1, r0
{
 8014dba:	b470      	push	{r4, r5, r6}
 8014dbc:	f811 4b04 	ldrb.w	r4, [r1], #4
 8014dc0:	f500 4600 	add.w	r6, r0, #32768	; 0x8000
 8014dc4:	f004 0501 	and.w	r5, r4, #1
            if(e_free->header.s.used != 0) {
 8014dc8:	b155      	cbz	r5, 8014de0 <lv_mem_defrag+0x30>
        next_e         = (lv_mem_ent_t *)&data[act_e->header.s.d_size];
 8014dca:	6800      	ldr	r0, [r0, #0]
 8014dcc:	eb01 0050 	add.w	r0, r1, r0, lsr #1
        if(&next_e->first_data >= &work_mem[LV_MEM_SIZE]) next_e = NULL;
 8014dd0:	1d01      	adds	r1, r0, #4
 8014dd2:	42b1      	cmp	r1, r6
 8014dd4:	d223      	bcs.n	8014e1e <lv_mem_defrag+0x6e>
 8014dd6:	7804      	ldrb	r4, [r0, #0]
 8014dd8:	f004 0501 	and.w	r5, r4, #1
            if(e_free->header.s.used != 0) {
 8014ddc:	2d00      	cmp	r5, #0
 8014dde:	d1f4      	bne.n	8014dca <lv_mem_defrag+0x1a>
        next_e         = (lv_mem_ent_t *)&data[act_e->header.s.d_size];
 8014de0:	6802      	ldr	r2, [r0, #0]
 8014de2:	eb01 0352 	add.w	r3, r1, r2, lsr #1
 8014de6:	f3c2 025e 	ubfx	r2, r2, #1, #31
        if(&next_e->first_data >= &work_mem[LV_MEM_SIZE]) next_e = NULL;
 8014dea:	1d19      	adds	r1, r3, #4
 8014dec:	42b1      	cmp	r1, r6
 8014dee:	d216      	bcs.n	8014e1e <lv_mem_defrag+0x6e>
            if(e_next->header.s.used == 0) {
 8014df0:	781c      	ldrb	r4, [r3, #0]
                e_free->header.s.d_size += e_next->header.s.d_size + sizeof(e_next->header);
 8014df2:	3204      	adds	r2, #4
            if(e_next->header.s.used == 0) {
 8014df4:	f004 0501 	and.w	r5, r4, #1
 8014df8:	07e4      	lsls	r4, r4, #31
 8014dfa:	d412      	bmi.n	8014e22 <lv_mem_defrag+0x72>
                e_free->header.s.d_size += e_next->header.s.d_size + sizeof(e_next->header);
 8014dfc:	681d      	ldr	r5, [r3, #0]
 8014dfe:	6804      	ldr	r4, [r0, #0]
 8014e00:	eb02 0255 	add.w	r2, r2, r5, lsr #1
 8014e04:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8014e08:	f362 045f 	bfi	r4, r2, #1, #31
 8014e0c:	6004      	str	r4, [r0, #0]
        next_e         = (lv_mem_ent_t *)&data[act_e->header.s.d_size];
 8014e0e:	681b      	ldr	r3, [r3, #0]
 8014e10:	eb01 0353 	add.w	r3, r1, r3, lsr #1
        if(&next_e->first_data >= &work_mem[LV_MEM_SIZE]) next_e = NULL;
 8014e14:	1d19      	adds	r1, r3, #4
 8014e16:	42b1      	cmp	r1, r6
 8014e18:	d201      	bcs.n	8014e1e <lv_mem_defrag+0x6e>
        while(e_next != NULL) {
 8014e1a:	2b00      	cmp	r3, #0
 8014e1c:	d1e8      	bne.n	8014df0 <lv_mem_defrag+0x40>
}
 8014e1e:	bc70      	pop	{r4, r5, r6}
 8014e20:	4770      	bx	lr
 8014e22:	4618      	mov	r0, r3
        while(e_free != NULL) {
 8014e24:	e7d0      	b.n	8014dc8 <lv_mem_defrag+0x18>
 8014e26:	4770      	bx	lr
 8014e28:	20018184 	.word	0x20018184

08014e2c <lv_mem_free>:
    if(data == NULL) return;
 8014e2c:	2800      	cmp	r0, #0
 8014e2e:	d03e      	beq.n	8014eae <lv_mem_free+0x82>
    if(data == &zero_mem) return;
 8014e30:	4a1f      	ldr	r2, [pc, #124]	; (8014eb0 <lv_mem_free+0x84>)
    if(data == NULL) return;
 8014e32:	1a82      	subs	r2, r0, r2
 8014e34:	fab2 f282 	clz	r2, r2
 8014e38:	0952      	lsrs	r2, r2, #5
 8014e3a:	2a00      	cmp	r2, #0
 8014e3c:	d137      	bne.n	8014eae <lv_mem_free+0x82>
    full_defrag_cnt++;
 8014e3e:	491d      	ldr	r1, [pc, #116]	; (8014eb4 <lv_mem_free+0x88>)
 8014e40:	880b      	ldrh	r3, [r1, #0]
 8014e42:	3301      	adds	r3, #1
{
 8014e44:	b470      	push	{r4, r5, r6}
    full_defrag_cnt++;
 8014e46:	b29b      	uxth	r3, r3
    e->header.s.used = 0;
 8014e48:	f810 4c04 	ldrb.w	r4, [r0, #-4]
    if(full_defrag_cnt < LV_MEM_FULL_DEFRAG_CNT) {
 8014e4c:	2b0f      	cmp	r3, #15
    e->header.s.used = 0;
 8014e4e:	f362 0400 	bfi	r4, r2, #0, #1
    full_defrag_cnt++;
 8014e52:	800b      	strh	r3, [r1, #0]
    e->header.s.used = 0;
 8014e54:	f800 4c04 	strb.w	r4, [r0, #-4]
    if(full_defrag_cnt < LV_MEM_FULL_DEFRAG_CNT) {
 8014e58:	d825      	bhi.n	8014ea6 <lv_mem_free+0x7a>
        next_e         = (lv_mem_ent_t *)&data[act_e->header.s.d_size];
 8014e5a:	f850 2c04 	ldr.w	r2, [r0, #-4]
        if(&next_e->first_data >= &work_mem[LV_MEM_SIZE]) next_e = NULL;
 8014e5e:	4916      	ldr	r1, [pc, #88]	; (8014eb8 <lv_mem_free+0x8c>)
        next_e         = (lv_mem_ent_t *)&data[act_e->header.s.d_size];
 8014e60:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8014e64:	f3c2 025e 	ubfx	r2, r2, #1, #31
        if(&next_e->first_data >= &work_mem[LV_MEM_SIZE]) next_e = NULL;
 8014e68:	680d      	ldr	r5, [r1, #0]
 8014e6a:	1d19      	adds	r1, r3, #4
 8014e6c:	f505 4500 	add.w	r5, r5, #32768	; 0x8000
 8014e70:	42a9      	cmp	r1, r5
 8014e72:	d216      	bcs.n	8014ea2 <lv_mem_free+0x76>
            if(e_next->header.s.used == 0) {
 8014e74:	781c      	ldrb	r4, [r3, #0]
                e->header.s.d_size += e_next->header.s.d_size + sizeof(e->header);
 8014e76:	3204      	adds	r2, #4
            if(e_next->header.s.used == 0) {
 8014e78:	07e4      	lsls	r4, r4, #31
 8014e7a:	d412      	bmi.n	8014ea2 <lv_mem_free+0x76>
                e->header.s.d_size += e_next->header.s.d_size + sizeof(e->header);
 8014e7c:	681e      	ldr	r6, [r3, #0]
 8014e7e:	f850 4c04 	ldr.w	r4, [r0, #-4]
 8014e82:	eb02 0256 	add.w	r2, r2, r6, lsr #1
 8014e86:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8014e8a:	f362 045f 	bfi	r4, r2, #1, #31
 8014e8e:	f840 4c04 	str.w	r4, [r0, #-4]
        next_e         = (lv_mem_ent_t *)&data[act_e->header.s.d_size];
 8014e92:	681b      	ldr	r3, [r3, #0]
 8014e94:	eb01 0353 	add.w	r3, r1, r3, lsr #1
        if(&next_e->first_data >= &work_mem[LV_MEM_SIZE]) next_e = NULL;
 8014e98:	1d19      	adds	r1, r3, #4
 8014e9a:	428d      	cmp	r5, r1
 8014e9c:	d901      	bls.n	8014ea2 <lv_mem_free+0x76>
        while(e_next != NULL) {
 8014e9e:	2b00      	cmp	r3, #0
 8014ea0:	d1e8      	bne.n	8014e74 <lv_mem_free+0x48>
}
 8014ea2:	bc70      	pop	{r4, r5, r6}
 8014ea4:	4770      	bx	lr
 8014ea6:	bc70      	pop	{r4, r5, r6}
        full_defrag_cnt = 0;
 8014ea8:	800a      	strh	r2, [r1, #0]
        lv_mem_defrag();
 8014eaa:	f7ff bf81 	b.w	8014db0 <lv_mem_defrag>
 8014eae:	4770      	bx	lr
 8014eb0:	20020188 	.word	0x20020188
 8014eb4:	2001815c 	.word	0x2001815c
 8014eb8:	20018184 	.word	0x20018184

08014ebc <_lv_mem_get_size>:
    if(data == &zero_mem) return 0;
 8014ebc:	b138      	cbz	r0, 8014ece <_lv_mem_get_size+0x12>
 8014ebe:	4b05      	ldr	r3, [pc, #20]	; (8014ed4 <_lv_mem_get_size+0x18>)
 8014ec0:	4298      	cmp	r0, r3
 8014ec2:	d004      	beq.n	8014ece <_lv_mem_get_size+0x12>
    return e->header.s.d_size;
 8014ec4:	f850 0c04 	ldr.w	r0, [r0, #-4]
 8014ec8:	f3c0 005e 	ubfx	r0, r0, #1, #31
 8014ecc:	4770      	bx	lr
    if(data == &zero_mem) return 0;
 8014ece:	2000      	movs	r0, #0
}
 8014ed0:	4770      	bx	lr
 8014ed2:	bf00      	nop
 8014ed4:	20020188 	.word	0x20020188

08014ed8 <_lv_mem_buf_release>:
        if(mem_buf_small[i].p == p) {
 8014ed8:	4b2f      	ldr	r3, [pc, #188]	; (8014f98 <_lv_mem_buf_release+0xc0>)
 8014eda:	681a      	ldr	r2, [r3, #0]
 8014edc:	4290      	cmp	r0, r2
 8014ede:	d034      	beq.n	8014f4a <_lv_mem_buf_release+0x72>
 8014ee0:	689a      	ldr	r2, [r3, #8]
 8014ee2:	4290      	cmp	r0, r2
 8014ee4:	d039      	beq.n	8014f5a <_lv_mem_buf_release+0x82>
        if(LV_GC_ROOT(_lv_mem_buf[i]).p == p) {
 8014ee6:	4b2d      	ldr	r3, [pc, #180]	; (8014f9c <_lv_mem_buf_release+0xc4>)
 8014ee8:	681a      	ldr	r2, [r3, #0]
 8014eea:	4290      	cmp	r0, r2
 8014eec:	d02d      	beq.n	8014f4a <_lv_mem_buf_release+0x72>
 8014eee:	689a      	ldr	r2, [r3, #8]
 8014ef0:	4290      	cmp	r0, r2
 8014ef2:	d032      	beq.n	8014f5a <_lv_mem_buf_release+0x82>
 8014ef4:	691a      	ldr	r2, [r3, #16]
 8014ef6:	4290      	cmp	r0, r2
 8014ef8:	d033      	beq.n	8014f62 <_lv_mem_buf_release+0x8a>
 8014efa:	699a      	ldr	r2, [r3, #24]
 8014efc:	4290      	cmp	r0, r2
 8014efe:	d032      	beq.n	8014f66 <_lv_mem_buf_release+0x8e>
 8014f00:	6a1a      	ldr	r2, [r3, #32]
 8014f02:	4290      	cmp	r0, r2
 8014f04:	d031      	beq.n	8014f6a <_lv_mem_buf_release+0x92>
 8014f06:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8014f08:	4290      	cmp	r0, r2
 8014f0a:	d030      	beq.n	8014f6e <_lv_mem_buf_release+0x96>
 8014f0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014f0e:	4290      	cmp	r0, r2
 8014f10:	d02f      	beq.n	8014f72 <_lv_mem_buf_release+0x9a>
 8014f12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014f14:	4290      	cmp	r0, r2
 8014f16:	d02e      	beq.n	8014f76 <_lv_mem_buf_release+0x9e>
 8014f18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8014f1a:	4290      	cmp	r0, r2
 8014f1c:	d02d      	beq.n	8014f7a <_lv_mem_buf_release+0xa2>
 8014f1e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8014f20:	4290      	cmp	r0, r2
 8014f22:	d02c      	beq.n	8014f7e <_lv_mem_buf_release+0xa6>
 8014f24:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014f26:	4290      	cmp	r0, r2
 8014f28:	d019      	beq.n	8014f5e <_lv_mem_buf_release+0x86>
 8014f2a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8014f2c:	4290      	cmp	r0, r2
 8014f2e:	d028      	beq.n	8014f82 <_lv_mem_buf_release+0xaa>
 8014f30:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8014f32:	4290      	cmp	r0, r2
 8014f34:	d027      	beq.n	8014f86 <_lv_mem_buf_release+0xae>
 8014f36:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8014f38:	4290      	cmp	r0, r2
 8014f3a:	d026      	beq.n	8014f8a <_lv_mem_buf_release+0xb2>
 8014f3c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8014f3e:	4290      	cmp	r0, r2
 8014f40:	d025      	beq.n	8014f8e <_lv_mem_buf_release+0xb6>
 8014f42:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8014f44:	4282      	cmp	r2, r0
 8014f46:	d024      	beq.n	8014f92 <_lv_mem_buf_release+0xba>
}
 8014f48:	4770      	bx	lr
        if(LV_GC_ROOT(_lv_mem_buf[i]).p == p) {
 8014f4a:	2200      	movs	r2, #0
            LV_GC_ROOT(_lv_mem_buf[i]).used = 0;
 8014f4c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014f50:	799a      	ldrb	r2, [r3, #6]
 8014f52:	f36f 0200 	bfc	r2, #0, #1
 8014f56:	719a      	strb	r2, [r3, #6]
}
 8014f58:	4770      	bx	lr
        if(LV_GC_ROOT(_lv_mem_buf[i]).p == p) {
 8014f5a:	2201      	movs	r2, #1
 8014f5c:	e7f6      	b.n	8014f4c <_lv_mem_buf_release+0x74>
 8014f5e:	220a      	movs	r2, #10
 8014f60:	e7f4      	b.n	8014f4c <_lv_mem_buf_release+0x74>
 8014f62:	2202      	movs	r2, #2
 8014f64:	e7f2      	b.n	8014f4c <_lv_mem_buf_release+0x74>
 8014f66:	2203      	movs	r2, #3
 8014f68:	e7f0      	b.n	8014f4c <_lv_mem_buf_release+0x74>
 8014f6a:	2204      	movs	r2, #4
 8014f6c:	e7ee      	b.n	8014f4c <_lv_mem_buf_release+0x74>
 8014f6e:	2205      	movs	r2, #5
 8014f70:	e7ec      	b.n	8014f4c <_lv_mem_buf_release+0x74>
 8014f72:	2206      	movs	r2, #6
 8014f74:	e7ea      	b.n	8014f4c <_lv_mem_buf_release+0x74>
 8014f76:	2207      	movs	r2, #7
 8014f78:	e7e8      	b.n	8014f4c <_lv_mem_buf_release+0x74>
 8014f7a:	2208      	movs	r2, #8
 8014f7c:	e7e6      	b.n	8014f4c <_lv_mem_buf_release+0x74>
 8014f7e:	2209      	movs	r2, #9
 8014f80:	e7e4      	b.n	8014f4c <_lv_mem_buf_release+0x74>
 8014f82:	220b      	movs	r2, #11
 8014f84:	e7e2      	b.n	8014f4c <_lv_mem_buf_release+0x74>
 8014f86:	220c      	movs	r2, #12
 8014f88:	e7e0      	b.n	8014f4c <_lv_mem_buf_release+0x74>
 8014f8a:	220d      	movs	r2, #13
 8014f8c:	e7de      	b.n	8014f4c <_lv_mem_buf_release+0x74>
 8014f8e:	220e      	movs	r2, #14
 8014f90:	e7dc      	b.n	8014f4c <_lv_mem_buf_release+0x74>
 8014f92:	220f      	movs	r2, #15
 8014f94:	e7da      	b.n	8014f4c <_lv_mem_buf_release+0x74>
 8014f96:	bf00      	nop
 8014f98:	20000034 	.word	0x20000034
 8014f9c:	20020448 	.word	0x20020448

08014fa0 <_lv_mem_buf_free_all>:
{
 8014fa0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        mem_buf_small[i].used = 0;
 8014fa4:	4b30      	ldr	r3, [pc, #192]	; (8015068 <_lv_mem_buf_free_all+0xc8>)
 8014fa6:	2400      	movs	r4, #0
 8014fa8:	4d30      	ldr	r5, [pc, #192]	; (801506c <_lv_mem_buf_free_all+0xcc>)
 8014faa:	7999      	ldrb	r1, [r3, #6]
 8014fac:	7b9a      	ldrb	r2, [r3, #14]
            LV_GC_ROOT(_lv_mem_buf[i]).size = 0;
 8014fae:	f105 0904 	add.w	r9, r5, #4
        mem_buf_small[i].used = 0;
 8014fb2:	f36f 0100 	bfc	r1, #0, #1
    if(data == &zero_mem) return;
 8014fb6:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 8015074 <_lv_mem_buf_free_all+0xd4>
        mem_buf_small[i].used = 0;
 8014fba:	f36f 0200 	bfc	r2, #0, #1
    full_defrag_cnt++;
 8014fbe:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 8015078 <_lv_mem_buf_free_all+0xd8>
        mem_buf_small[i].used = 0;
 8014fc2:	7199      	strb	r1, [r3, #6]
 8014fc4:	739a      	strb	r2, [r3, #14]
        if(LV_GC_ROOT(_lv_mem_buf[i]).p) {
 8014fc6:	f855 1034 	ldr.w	r1, [r5, r4, lsl #3]
 8014fca:	00e6      	lsls	r6, r4, #3
 8014fcc:	2900      	cmp	r1, #0
 8014fce:	d03f      	beq.n	8015050 <_lv_mem_buf_free_all+0xb0>
    if(data == &zero_mem) return;
 8014fd0:	4541      	cmp	r1, r8
 8014fd2:	d033      	beq.n	801503c <_lv_mem_buf_free_all+0x9c>
    full_defrag_cnt++;
 8014fd4:	f8bb 3000 	ldrh.w	r3, [fp]
    e->header.s.used = 0;
 8014fd8:	f811 2c04 	ldrb.w	r2, [r1, #-4]
    full_defrag_cnt++;
 8014fdc:	3301      	adds	r3, #1
    e->header.s.used = 0;
 8014fde:	f36f 0200 	bfc	r2, #0, #1
    full_defrag_cnt++;
 8014fe2:	b29b      	uxth	r3, r3
    e->header.s.used = 0;
 8014fe4:	f801 2c04 	strb.w	r2, [r1, #-4]
    if(full_defrag_cnt < LV_MEM_FULL_DEFRAG_CNT) {
 8014fe8:	2b0f      	cmp	r3, #15
    full_defrag_cnt++;
 8014fea:	f8ab 3000 	strh.w	r3, [fp]
    if(full_defrag_cnt < LV_MEM_FULL_DEFRAG_CNT) {
 8014fee:	d834      	bhi.n	801505a <_lv_mem_buf_free_all+0xba>
        next_e         = (lv_mem_ent_t *)&data[act_e->header.s.d_size];
 8014ff0:	f851 2c04 	ldr.w	r2, [r1, #-4]
        if(&next_e->first_data >= &work_mem[LV_MEM_SIZE]) next_e = NULL;
 8014ff4:	481e      	ldr	r0, [pc, #120]	; (8015070 <_lv_mem_buf_free_all+0xd0>)
        next_e         = (lv_mem_ent_t *)&data[act_e->header.s.d_size];
 8014ff6:	eb01 0352 	add.w	r3, r1, r2, lsr #1
 8014ffa:	f3c2 025e 	ubfx	r2, r2, #1, #31
        if(&next_e->first_data >= &work_mem[LV_MEM_SIZE]) next_e = NULL;
 8014ffe:	6800      	ldr	r0, [r0, #0]
 8015000:	f103 0c04 	add.w	ip, r3, #4
 8015004:	f500 4a00 	add.w	sl, r0, #32768	; 0x8000
 8015008:	45d4      	cmp	ip, sl
 801500a:	d217      	bcs.n	801503c <_lv_mem_buf_free_all+0x9c>
            if(e_next->header.s.used == 0) {
 801500c:	7818      	ldrb	r0, [r3, #0]
                e->header.s.d_size += e_next->header.s.d_size + sizeof(e->header);
 801500e:	3204      	adds	r2, #4
            if(e_next->header.s.used == 0) {
 8015010:	07c0      	lsls	r0, r0, #31
 8015012:	d413      	bmi.n	801503c <_lv_mem_buf_free_all+0x9c>
                e->header.s.d_size += e_next->header.s.d_size + sizeof(e->header);
 8015014:	681f      	ldr	r7, [r3, #0]
 8015016:	f851 0c04 	ldr.w	r0, [r1, #-4]
 801501a:	eb02 0257 	add.w	r2, r2, r7, lsr #1
 801501e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8015022:	f362 005f 	bfi	r0, r2, #1, #31
 8015026:	f841 0c04 	str.w	r0, [r1, #-4]
        next_e         = (lv_mem_ent_t *)&data[act_e->header.s.d_size];
 801502a:	681b      	ldr	r3, [r3, #0]
 801502c:	eb0c 0353 	add.w	r3, ip, r3, lsr #1
        if(&next_e->first_data >= &work_mem[LV_MEM_SIZE]) next_e = NULL;
 8015030:	f103 0c04 	add.w	ip, r3, #4
 8015034:	45e2      	cmp	sl, ip
 8015036:	d901      	bls.n	801503c <_lv_mem_buf_free_all+0x9c>
        while(e_next != NULL) {
 8015038:	2b00      	cmp	r3, #0
 801503a:	d1e7      	bne.n	801500c <_lv_mem_buf_free_all+0x6c>
            LV_GC_ROOT(_lv_mem_buf[i]).p = NULL;
 801503c:	2200      	movs	r2, #0
            LV_GC_ROOT(_lv_mem_buf[i]).used = 0;
 801503e:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
            LV_GC_ROOT(_lv_mem_buf[i]).p = NULL;
 8015042:	51aa      	str	r2, [r5, r6]
            LV_GC_ROOT(_lv_mem_buf[i]).used = 0;
 8015044:	7999      	ldrb	r1, [r3, #6]
 8015046:	f362 0100 	bfi	r1, r2, #0, #1
 801504a:	7199      	strb	r1, [r3, #6]
            LV_GC_ROOT(_lv_mem_buf[i]).size = 0;
 801504c:	f829 2006 	strh.w	r2, [r9, r6]
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 8015050:	3401      	adds	r4, #1
 8015052:	2c10      	cmp	r4, #16
 8015054:	d1b7      	bne.n	8014fc6 <_lv_mem_buf_free_all+0x26>
}
 8015056:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        full_defrag_cnt = 0;
 801505a:	2300      	movs	r3, #0
 801505c:	f8ab 3000 	strh.w	r3, [fp]
        lv_mem_defrag();
 8015060:	f7ff fea6 	bl	8014db0 <lv_mem_defrag>
 8015064:	e7ea      	b.n	801503c <_lv_mem_buf_free_all+0x9c>
 8015066:	bf00      	nop
 8015068:	20000034 	.word	0x20000034
 801506c:	20020448 	.word	0x20020448
 8015070:	20018184 	.word	0x20018184
 8015074:	20020188 	.word	0x20020188
 8015078:	2001815c 	.word	0x2001815c

0801507c <_lv_memcpy>:
{
 801507c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_uintptr_t d_align = (lv_uintptr_t)d8 & ALIGN_MASK;
 8015080:	f000 0403 	and.w	r4, r0, #3
    lv_uintptr_t s_align = (lv_uintptr_t)s8 & ALIGN_MASK;
 8015084:	f001 0503 	and.w	r5, r1, #3
{
 8015088:	b08b      	sub	sp, #44	; 0x2c
 801508a:	4606      	mov	r6, r0
    if(s_align != d_align) {
 801508c:	42ac      	cmp	r4, r5
    lv_uintptr_t d_align = (lv_uintptr_t)d8 & ALIGN_MASK;
 801508e:	4603      	mov	r3, r0
{
 8015090:	9006      	str	r0, [sp, #24]
    lv_uintptr_t s_align = (lv_uintptr_t)s8 & ALIGN_MASK;
 8015092:	4608      	mov	r0, r1
    if(s_align != d_align) {
 8015094:	f000 809e 	beq.w	80151d4 <_lv_memcpy+0x158>
        while(len > 32) {
 8015098:	2a20      	cmp	r2, #32
 801509a:	f240 811a 	bls.w	80152d2 <_lv_memcpy+0x256>
 801509e:	4634      	mov	r4, r6
 80150a0:	341f      	adds	r4, #31
 80150a2:	1a64      	subs	r4, r4, r1
 80150a4:	2c3e      	cmp	r4, #62	; 0x3e
 80150a6:	f1a2 0421 	sub.w	r4, r2, #33	; 0x21
 80150aa:	9407      	str	r4, [sp, #28]
 80150ac:	f240 811e 	bls.w	80152ec <_lv_memcpy+0x270>
 80150b0:	0964      	lsrs	r4, r4, #5
 80150b2:	f101 070c 	add.w	r7, r1, #12
 80150b6:	f101 0c08 	add.w	ip, r1, #8
 80150ba:	f101 0e04 	add.w	lr, r1, #4
 80150be:	3401      	adds	r4, #1
 80150c0:	f101 0610 	add.w	r6, r1, #16
 80150c4:	f101 0514 	add.w	r5, r1, #20
 80150c8:	f101 0b18 	add.w	fp, r1, #24
 80150cc:	9405      	str	r4, [sp, #20]
 80150ce:	2400      	movs	r4, #0
 80150d0:	9108      	str	r1, [sp, #32]
 80150d2:	4639      	mov	r1, r7
 80150d4:	9209      	str	r2, [sp, #36]	; 0x24
 80150d6:	f8cd c004 	str.w	ip, [sp, #4]
            REPEAT8(COPY8);
 80150da:	9a01      	ldr	r2, [sp, #4]
 80150dc:	3401      	adds	r4, #1
 80150de:	f8d0 a000 	ldr.w	sl, [r0]
 80150e2:	3320      	adds	r3, #32
 80150e4:	f852 8b20 	ldr.w	r8, [r2], #32
 80150e8:	3020      	adds	r0, #32
 80150ea:	f85e 9b20 	ldr.w	r9, [lr], #32
 80150ee:	9201      	str	r2, [sp, #4]
 80150f0:	f855 2b20 	ldr.w	r2, [r5], #32
 80150f4:	f851 cb20 	ldr.w	ip, [r1], #32
 80150f8:	9202      	str	r2, [sp, #8]
 80150fa:	f85b 2b20 	ldr.w	r2, [fp], #32
 80150fe:	f856 7b20 	ldr.w	r7, [r6], #32
 8015102:	9203      	str	r2, [sp, #12]
 8015104:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8015108:	f843 ac20 	str.w	sl, [r3, #-32]
 801510c:	9204      	str	r2, [sp, #16]
 801510e:	9a02      	ldr	r2, [sp, #8]
 8015110:	f843 9c1c 	str.w	r9, [r3, #-28]
 8015114:	f843 2c0c 	str.w	r2, [r3, #-12]
 8015118:	9a03      	ldr	r2, [sp, #12]
 801511a:	f843 8c18 	str.w	r8, [r3, #-24]
 801511e:	f843 2c08 	str.w	r2, [r3, #-8]
 8015122:	9a04      	ldr	r2, [sp, #16]
 8015124:	f843 cc14 	str.w	ip, [r3, #-20]
 8015128:	f843 2c04 	str.w	r2, [r3, #-4]
        while(len > 32) {
 801512c:	9a05      	ldr	r2, [sp, #20]
            REPEAT8(COPY8);
 801512e:	f843 7c10 	str.w	r7, [r3, #-16]
 8015132:	42a2      	cmp	r2, r4
 8015134:	d8d1      	bhi.n	80150da <_lv_memcpy+0x5e>
 8015136:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 801513a:	9b07      	ldr	r3, [sp, #28]
 801513c:	3a20      	subs	r2, #32
 801513e:	095b      	lsrs	r3, r3, #5
 8015140:	ebc3 60c3 	rsb	r0, r3, r3, lsl #27
 8015144:	3301      	adds	r3, #1
 8015146:	eb02 1240 	add.w	r2, r2, r0, lsl #5
 801514a:	9806      	ldr	r0, [sp, #24]
 801514c:	eb01 1143 	add.w	r1, r1, r3, lsl #5
 8015150:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8015154:	1cc8      	adds	r0, r1, #3
 8015156:	1ac0      	subs	r0, r0, r3
 8015158:	2806      	cmp	r0, #6
 801515a:	f240 80be 	bls.w	80152da <_lv_memcpy+0x25e>
 801515e:	1e50      	subs	r0, r2, #1
 8015160:	2807      	cmp	r0, #7
 8015162:	f240 80ba 	bls.w	80152da <_lv_memcpy+0x25e>
 8015166:	0890      	lsrs	r0, r2, #2
            COPY8
 8015168:	680c      	ldr	r4, [r1, #0]
 801516a:	2801      	cmp	r0, #1
 801516c:	601c      	str	r4, [r3, #0]
        while(len) {
 801516e:	d019      	beq.n	80151a4 <_lv_memcpy+0x128>
            COPY8
 8015170:	684c      	ldr	r4, [r1, #4]
 8015172:	2802      	cmp	r0, #2
 8015174:	605c      	str	r4, [r3, #4]
        while(len) {
 8015176:	d015      	beq.n	80151a4 <_lv_memcpy+0x128>
            COPY8
 8015178:	688c      	ldr	r4, [r1, #8]
 801517a:	2803      	cmp	r0, #3
 801517c:	609c      	str	r4, [r3, #8]
        while(len) {
 801517e:	d011      	beq.n	80151a4 <_lv_memcpy+0x128>
            COPY8
 8015180:	68cc      	ldr	r4, [r1, #12]
 8015182:	2804      	cmp	r0, #4
 8015184:	60dc      	str	r4, [r3, #12]
        while(len) {
 8015186:	d00d      	beq.n	80151a4 <_lv_memcpy+0x128>
            COPY8
 8015188:	690c      	ldr	r4, [r1, #16]
 801518a:	2805      	cmp	r0, #5
 801518c:	611c      	str	r4, [r3, #16]
        while(len) {
 801518e:	d009      	beq.n	80151a4 <_lv_memcpy+0x128>
            COPY8
 8015190:	694c      	ldr	r4, [r1, #20]
 8015192:	2806      	cmp	r0, #6
 8015194:	615c      	str	r4, [r3, #20]
        while(len) {
 8015196:	d005      	beq.n	80151a4 <_lv_memcpy+0x128>
            COPY8
 8015198:	698c      	ldr	r4, [r1, #24]
 801519a:	2807      	cmp	r0, #7
 801519c:	619c      	str	r4, [r3, #24]
        while(len) {
 801519e:	d001      	beq.n	80151a4 <_lv_memcpy+0x128>
            COPY8
 80151a0:	69c8      	ldr	r0, [r1, #28]
 80151a2:	61d8      	str	r0, [r3, #28]
        while(len) {
 80151a4:	f022 0003 	bic.w	r0, r2, #3
 80151a8:	f002 0403 	and.w	r4, r2, #3
 80151ac:	4282      	cmp	r2, r0
 80151ae:	eb03 0500 	add.w	r5, r3, r0
 80151b2:	eb01 0600 	add.w	r6, r1, r0
 80151b6:	d077      	beq.n	80152a8 <_lv_memcpy+0x22c>
            COPY8
 80151b8:	5c0a      	ldrb	r2, [r1, r0]
        while(len) {
 80151ba:	2c01      	cmp	r4, #1
            COPY8
 80151bc:	541a      	strb	r2, [r3, r0]
        while(len) {
 80151be:	d073      	beq.n	80152a8 <_lv_memcpy+0x22c>
            COPY8
 80151c0:	7873      	ldrb	r3, [r6, #1]
        while(len) {
 80151c2:	2c02      	cmp	r4, #2
            COPY8
 80151c4:	706b      	strb	r3, [r5, #1]
        while(len) {
 80151c6:	d06f      	beq.n	80152a8 <_lv_memcpy+0x22c>
            COPY8
 80151c8:	78b3      	ldrb	r3, [r6, #2]
}
 80151ca:	9806      	ldr	r0, [sp, #24]
            COPY8
 80151cc:	70ab      	strb	r3, [r5, #2]
}
 80151ce:	b00b      	add	sp, #44	; 0x2c
 80151d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(d_align) {
 80151d4:	2c00      	cmp	r4, #0
 80151d6:	d16b      	bne.n	80152b0 <_lv_memcpy+0x234>
 80151d8:	46b4      	mov	ip, r6
    while(len > 32) {
 80151da:	2a20      	cmp	r2, #32
 80151dc:	f240 8143 	bls.w	8015466 <_lv_memcpy+0x3ea>
 80151e0:	f101 031f 	add.w	r3, r1, #31
 80151e4:	ea41 000c 	orr.w	r0, r1, ip
 80151e8:	f1a2 0a21 	sub.w	sl, r2, #33	; 0x21
 80151ec:	eba3 030c 	sub.w	r3, r3, ip
 80151f0:	f3c0 0002 	ubfx	r0, r0, #0, #3
 80151f4:	2b3e      	cmp	r3, #62	; 0x3e
 80151f6:	bf94      	ite	ls
 80151f8:	2300      	movls	r3, #0
 80151fa:	2301      	movhi	r3, #1
 80151fc:	2800      	cmp	r0, #0
 80151fe:	bf18      	it	ne
 8015200:	2300      	movne	r3, #0
 8015202:	2b00      	cmp	r3, #0
 8015204:	f000 80ff 	beq.w	8015406 <_lv_memcpy+0x38a>
 8015208:	f1ba 0f1f 	cmp.w	sl, #31
 801520c:	f240 80fb 	bls.w	8015406 <_lv_memcpy+0x38a>
 8015210:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8015214:	f101 0020 	add.w	r0, r1, #32
 8015218:	f10c 0320 	add.w	r3, ip, #32
 801521c:	f04f 0e00 	mov.w	lr, #0
 8015220:	f10a 0b01 	add.w	fp, sl, #1
 8015224:	e9cd 1201 	strd	r1, r2, [sp, #4]
        REPEAT8(COPY32)
 8015228:	f10e 0e01 	add.w	lr, lr, #1
 801522c:	3020      	adds	r0, #32
 801522e:	3320      	adds	r3, #32
 8015230:	45f3      	cmp	fp, lr
 8015232:	e950 890e 	ldrd	r8, r9, [r0, #-56]	; 0x38
 8015236:	e950 670c 	ldrd	r6, r7, [r0, #-48]	; 0x30
 801523a:	e950 450a 	ldrd	r4, r5, [r0, #-40]	; 0x28
 801523e:	e950 1210 	ldrd	r1, r2, [r0, #-64]	; 0x40
 8015242:	e943 890e 	strd	r8, r9, [r3, #-56]	; 0x38
 8015246:	e943 1210 	strd	r1, r2, [r3, #-64]	; 0x40
 801524a:	e943 670c 	strd	r6, r7, [r3, #-48]	; 0x30
 801524e:	e943 450a 	strd	r4, r5, [r3, #-40]	; 0x28
    while(len > 32) {
 8015252:	d8e9      	bhi.n	8015228 <_lv_memcpy+0x1ac>
 8015254:	e9dd 1201 	ldrd	r1, r2, [sp, #4]
 8015258:	ebca 63ca 	rsb	r3, sl, sl, lsl #27
 801525c:	3a20      	subs	r2, #32
 801525e:	f10a 0a01 	add.w	sl, sl, #1
 8015262:	eb02 1243 	add.w	r2, r2, r3, lsl #5
 8015266:	eb0c 1c4a 	add.w	ip, ip, sl, lsl #5
    while(len > 4) {
 801526a:	2a04      	cmp	r2, #4
 801526c:	eb01 114a 	add.w	r1, r1, sl, lsl #5
 8015270:	d908      	bls.n	8015284 <_lv_memcpy+0x208>
 8015272:	460b      	mov	r3, r1
        len -= 4;
 8015274:	3a04      	subs	r2, #4
        COPY32;
 8015276:	f853 1b04 	ldr.w	r1, [r3], #4
    while(len > 4) {
 801527a:	2a04      	cmp	r2, #4
        COPY32;
 801527c:	f84c 1b04 	str.w	r1, [ip], #4
 8015280:	4619      	mov	r1, r3
    while(len > 4) {
 8015282:	d8f7      	bhi.n	8015274 <_lv_memcpy+0x1f8>
        COPY8
 8015284:	780b      	ldrb	r3, [r1, #0]
    while(len) {
 8015286:	2a01      	cmp	r2, #1
        COPY8
 8015288:	f88c 3000 	strb.w	r3, [ip]
    while(len) {
 801528c:	d00c      	beq.n	80152a8 <_lv_memcpy+0x22c>
        COPY8
 801528e:	784b      	ldrb	r3, [r1, #1]
    while(len) {
 8015290:	3a02      	subs	r2, #2
        COPY8
 8015292:	f88c 3001 	strb.w	r3, [ip, #1]
    while(len) {
 8015296:	d007      	beq.n	80152a8 <_lv_memcpy+0x22c>
        COPY8
 8015298:	788b      	ldrb	r3, [r1, #2]
    while(len) {
 801529a:	2a01      	cmp	r2, #1
        COPY8
 801529c:	f88c 3002 	strb.w	r3, [ip, #2]
    while(len) {
 80152a0:	d002      	beq.n	80152a8 <_lv_memcpy+0x22c>
        COPY8
 80152a2:	78cb      	ldrb	r3, [r1, #3]
 80152a4:	f88c 3003 	strb.w	r3, [ip, #3]
}
 80152a8:	9806      	ldr	r0, [sp, #24]
 80152aa:	b00b      	add	sp, #44	; 0x2c
 80152ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        d_align = ALIGN_MASK + 1 - d_align;
 80152b0:	f1c4 0404 	rsb	r4, r4, #4
        while(d_align && len) {
 80152b4:	2a00      	cmp	r2, #0
 80152b6:	d0f7      	beq.n	80152a8 <_lv_memcpy+0x22c>
 80152b8:	4434      	add	r4, r6
    uint8_t * d8 = dst;
 80152ba:	46b4      	mov	ip, r6
            COPY8;
 80152bc:	f810 3b01 	ldrb.w	r3, [r0], #1
            len--;
 80152c0:	3a01      	subs	r2, #1
            COPY8;
 80152c2:	f80c 3b01 	strb.w	r3, [ip], #1
        while(d_align && len) {
 80152c6:	45a4      	cmp	ip, r4
            COPY8;
 80152c8:	4601      	mov	r1, r0
        while(d_align && len) {
 80152ca:	d086      	beq.n	80151da <_lv_memcpy+0x15e>
 80152cc:	2a00      	cmp	r2, #0
 80152ce:	d1f5      	bne.n	80152bc <_lv_memcpy+0x240>
 80152d0:	e783      	b.n	80151da <_lv_memcpy+0x15e>
        while(len) {
 80152d2:	2a00      	cmp	r2, #0
 80152d4:	d0e8      	beq.n	80152a8 <_lv_memcpy+0x22c>
    uint8_t * d8 = dst;
 80152d6:	9b06      	ldr	r3, [sp, #24]
 80152d8:	e73c      	b.n	8015154 <_lv_memcpy+0xd8>
 80152da:	3901      	subs	r1, #1
 80152dc:	441a      	add	r2, r3
            COPY8
 80152de:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80152e2:	f803 0b01 	strb.w	r0, [r3], #1
        while(len) {
 80152e6:	4293      	cmp	r3, r2
 80152e8:	d1f9      	bne.n	80152de <_lv_memcpy+0x262>
 80152ea:	e7dd      	b.n	80152a8 <_lv_memcpy+0x22c>
 80152ec:	f024 051f 	bic.w	r5, r4, #31
 80152f0:	3320      	adds	r3, #32
 80152f2:	f101 0020 	add.w	r0, r1, #32
 80152f6:	4435      	add	r5, r6
 80152f8:	3540      	adds	r5, #64	; 0x40
            REPEAT8(COPY8);
 80152fa:	f810 4c20 	ldrb.w	r4, [r0, #-32]
 80152fe:	3320      	adds	r3, #32
 8015300:	3020      	adds	r0, #32
 8015302:	f803 4c40 	strb.w	r4, [r3, #-64]
 8015306:	f810 4c3f 	ldrb.w	r4, [r0, #-63]
 801530a:	f803 4c3f 	strb.w	r4, [r3, #-63]
 801530e:	f810 4c3e 	ldrb.w	r4, [r0, #-62]
 8015312:	f803 4c3e 	strb.w	r4, [r3, #-62]
 8015316:	f810 4c3d 	ldrb.w	r4, [r0, #-61]
 801531a:	f803 4c3d 	strb.w	r4, [r3, #-61]
 801531e:	f810 4c3c 	ldrb.w	r4, [r0, #-60]
 8015322:	f803 4c3c 	strb.w	r4, [r3, #-60]
 8015326:	f810 4c3b 	ldrb.w	r4, [r0, #-59]
 801532a:	f803 4c3b 	strb.w	r4, [r3, #-59]
 801532e:	f810 4c3a 	ldrb.w	r4, [r0, #-58]
 8015332:	f803 4c3a 	strb.w	r4, [r3, #-58]
 8015336:	f810 4c39 	ldrb.w	r4, [r0, #-57]
 801533a:	f803 4c39 	strb.w	r4, [r3, #-57]
            REPEAT8(COPY8);
 801533e:	f810 4c38 	ldrb.w	r4, [r0, #-56]
 8015342:	f803 4c38 	strb.w	r4, [r3, #-56]
 8015346:	f810 4c37 	ldrb.w	r4, [r0, #-55]
 801534a:	f803 4c37 	strb.w	r4, [r3, #-55]
 801534e:	f810 4c36 	ldrb.w	r4, [r0, #-54]
 8015352:	f803 4c36 	strb.w	r4, [r3, #-54]
 8015356:	f810 4c35 	ldrb.w	r4, [r0, #-53]
 801535a:	f803 4c35 	strb.w	r4, [r3, #-53]
 801535e:	f810 4c34 	ldrb.w	r4, [r0, #-52]
 8015362:	f803 4c34 	strb.w	r4, [r3, #-52]
 8015366:	f810 4c33 	ldrb.w	r4, [r0, #-51]
 801536a:	f803 4c33 	strb.w	r4, [r3, #-51]
 801536e:	f810 4c32 	ldrb.w	r4, [r0, #-50]
 8015372:	f803 4c32 	strb.w	r4, [r3, #-50]
 8015376:	f810 4c31 	ldrb.w	r4, [r0, #-49]
 801537a:	f803 4c31 	strb.w	r4, [r3, #-49]
            REPEAT8(COPY8);
 801537e:	f810 4c30 	ldrb.w	r4, [r0, #-48]
 8015382:	f803 4c30 	strb.w	r4, [r3, #-48]
 8015386:	f810 4c2f 	ldrb.w	r4, [r0, #-47]
 801538a:	f803 4c2f 	strb.w	r4, [r3, #-47]
 801538e:	f810 4c2e 	ldrb.w	r4, [r0, #-46]
 8015392:	f803 4c2e 	strb.w	r4, [r3, #-46]
 8015396:	f810 4c2d 	ldrb.w	r4, [r0, #-45]
 801539a:	f803 4c2d 	strb.w	r4, [r3, #-45]
 801539e:	f810 4c2c 	ldrb.w	r4, [r0, #-44]
 80153a2:	f803 4c2c 	strb.w	r4, [r3, #-44]
 80153a6:	f810 4c2b 	ldrb.w	r4, [r0, #-43]
 80153aa:	f803 4c2b 	strb.w	r4, [r3, #-43]
 80153ae:	f810 4c2a 	ldrb.w	r4, [r0, #-42]
 80153b2:	f803 4c2a 	strb.w	r4, [r3, #-42]
 80153b6:	f810 4c29 	ldrb.w	r4, [r0, #-41]
 80153ba:	f803 4c29 	strb.w	r4, [r3, #-41]
            REPEAT8(COPY8);
 80153be:	f810 4c28 	ldrb.w	r4, [r0, #-40]
 80153c2:	f803 4c28 	strb.w	r4, [r3, #-40]
 80153c6:	f810 4c27 	ldrb.w	r4, [r0, #-39]
 80153ca:	f803 4c27 	strb.w	r4, [r3, #-39]
 80153ce:	f810 4c26 	ldrb.w	r4, [r0, #-38]
 80153d2:	f803 4c26 	strb.w	r4, [r3, #-38]
 80153d6:	f810 4c25 	ldrb.w	r4, [r0, #-37]
 80153da:	f803 4c25 	strb.w	r4, [r3, #-37]
 80153de:	f810 4c24 	ldrb.w	r4, [r0, #-36]
 80153e2:	f803 4c24 	strb.w	r4, [r3, #-36]
 80153e6:	f810 4c23 	ldrb.w	r4, [r0, #-35]
 80153ea:	f803 4c23 	strb.w	r4, [r3, #-35]
 80153ee:	f810 4c22 	ldrb.w	r4, [r0, #-34]
 80153f2:	f803 4c22 	strb.w	r4, [r3, #-34]
 80153f6:	f810 4c21 	ldrb.w	r4, [r0, #-33]
 80153fa:	f803 4c21 	strb.w	r4, [r3, #-33]
        while(len > 32) {
 80153fe:	42ab      	cmp	r3, r5
 8015400:	f47f af7b 	bne.w	80152fa <_lv_memcpy+0x27e>
 8015404:	e699      	b.n	801513a <_lv_memcpy+0xbe>
 8015406:	f02a 001f 	bic.w	r0, sl, #31
 801540a:	f10c 0540 	add.w	r5, ip, #64	; 0x40
 801540e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8015412:	f10c 0320 	add.w	r3, ip, #32
 8015416:	4405      	add	r5, r0
 8015418:	f101 0020 	add.w	r0, r1, #32
        REPEAT8(COPY32)
 801541c:	f850 4c20 	ldr.w	r4, [r0, #-32]
 8015420:	3320      	adds	r3, #32
 8015422:	3020      	adds	r0, #32
 8015424:	f843 4c40 	str.w	r4, [r3, #-64]
 8015428:	f850 4c3c 	ldr.w	r4, [r0, #-60]
 801542c:	f843 4c3c 	str.w	r4, [r3, #-60]
 8015430:	f850 4c38 	ldr.w	r4, [r0, #-56]
 8015434:	f843 4c38 	str.w	r4, [r3, #-56]
 8015438:	f850 4c34 	ldr.w	r4, [r0, #-52]
 801543c:	f843 4c34 	str.w	r4, [r3, #-52]
 8015440:	f850 4c30 	ldr.w	r4, [r0, #-48]
 8015444:	f843 4c30 	str.w	r4, [r3, #-48]
 8015448:	f850 4c2c 	ldr.w	r4, [r0, #-44]
 801544c:	f843 4c2c 	str.w	r4, [r3, #-44]
 8015450:	f850 4c28 	ldr.w	r4, [r0, #-40]
 8015454:	f843 4c28 	str.w	r4, [r3, #-40]
 8015458:	f850 4c24 	ldr.w	r4, [r0, #-36]
 801545c:	f843 4c24 	str.w	r4, [r3, #-36]
    while(len > 32) {
 8015460:	42ab      	cmp	r3, r5
 8015462:	d1db      	bne.n	801541c <_lv_memcpy+0x3a0>
 8015464:	e6f8      	b.n	8015258 <_lv_memcpy+0x1dc>
    while(len > 4) {
 8015466:	2a04      	cmp	r2, #4
 8015468:	f63f af03 	bhi.w	8015272 <_lv_memcpy+0x1f6>
    while(len) {
 801546c:	2a00      	cmp	r2, #0
 801546e:	f43f af1b 	beq.w	80152a8 <_lv_memcpy+0x22c>
 8015472:	e707      	b.n	8015284 <_lv_memcpy+0x208>

08015474 <lv_mem_realloc>:
{
 8015474:	b570      	push	{r4, r5, r6, lr}
    new_size = (new_size + ALIGN_MASK) & (~ALIGN_MASK);
 8015476:	1ccc      	adds	r4, r1, #3
{
 8015478:	b082      	sub	sp, #8
    new_size = (new_size + ALIGN_MASK) & (~ALIGN_MASK);
 801547a:	f024 0403 	bic.w	r4, r4, #3
    if(data_p != NULL) {
 801547e:	b120      	cbz	r0, 801548a <lv_mem_realloc+0x16>
        if(e->header.s.used == 0) {
 8015480:	f810 3c04 	ldrb.w	r3, [r0, #-4]
 8015484:	4605      	mov	r5, r0
 8015486:	07db      	lsls	r3, r3, #31
 8015488:	d406      	bmi.n	8015498 <lv_mem_realloc+0x24>
    if(old_size == new_size) return data_p; /*Also avoid reallocating the same memory*/
 801548a:	b314      	cbz	r4, 80154d2 <lv_mem_realloc+0x5e>
 801548c:	4620      	mov	r0, r4
}
 801548e:	b002      	add	sp, #8
 8015490:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015494:	f7ff bc38 	b.w	8014d08 <lv_mem_alloc.part.0>
    if(data == &zero_mem) return 0;
 8015498:	4e22      	ldr	r6, [pc, #136]	; (8015524 <lv_mem_realloc+0xb0>)
 801549a:	42b0      	cmp	r0, r6
 801549c:	d028      	beq.n	80154f0 <lv_mem_realloc+0x7c>
    return e->header.s.d_size;
 801549e:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80154a2:	f3c2 025e 	ubfx	r2, r2, #1, #31
    if(old_size == new_size) return data_p; /*Also avoid reallocating the same memory*/
 80154a6:	4294      	cmp	r4, r2
 80154a8:	d017      	beq.n	80154da <lv_mem_realloc+0x66>
    if(new_size < old_size) {
 80154aa:	d21a      	bcs.n	80154e2 <lv_mem_realloc+0x6e>
    if(e->header.s.d_size == size + sizeof(lv_mem_header_t)) {
 80154ac:	1d23      	adds	r3, r4, #4
    if(e->header.s.d_size != size) {
 80154ae:	4293      	cmp	r3, r2
 80154b0:	d013      	beq.n	80154da <lv_mem_realloc+0x66>
 80154b2:	42a2      	cmp	r2, r4
 80154b4:	d011      	beq.n	80154da <lv_mem_realloc+0x66>
        after_new_e->header.s.d_size = (uint32_t)e->header.s.d_size - size - sizeof(lv_mem_header_t);
 80154b6:	3a04      	subs	r2, #4
        uint8_t * e_data             = &e->first_data;
 80154b8:	4606      	mov	r6, r0
        after_new_e->header.s.d_size = (uint32_t)e->header.s.d_size - size - sizeof(lv_mem_header_t);
 80154ba:	1b12      	subs	r2, r2, r4
        after_new_e->header.s.used   = 0;
 80154bc:	0052      	lsls	r2, r2, #1
 80154be:	5102      	str	r2, [r0, r4]
        e->header.s.d_size = (uint32_t)size;
 80154c0:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80154c4:	f364 035f 	bfi	r3, r4, #1, #31
 80154c8:	f840 3c04 	str.w	r3, [r0, #-4]
}
 80154cc:	4630      	mov	r0, r6
 80154ce:	b002      	add	sp, #8
 80154d0:	bd70      	pop	{r4, r5, r6, pc}
    if(old_size == new_size) return data_p; /*Also avoid reallocating the same memory*/
 80154d2:	4626      	mov	r6, r4
}
 80154d4:	4630      	mov	r0, r6
 80154d6:	b002      	add	sp, #8
 80154d8:	bd70      	pop	{r4, r5, r6, pc}
    if(old_size == new_size) return data_p; /*Also avoid reallocating the same memory*/
 80154da:	462e      	mov	r6, r5
}
 80154dc:	4630      	mov	r0, r6
 80154de:	b002      	add	sp, #8
 80154e0:	bd70      	pop	{r4, r5, r6, pc}
    if(size == 0) {
 80154e2:	b974      	cbnz	r4, 8015502 <lv_mem_realloc+0x8e>
        lv_mem_free(data_p);
 80154e4:	4628      	mov	r0, r5
 80154e6:	f7ff fca1 	bl	8014e2c <lv_mem_free>
}
 80154ea:	4630      	mov	r0, r6
 80154ec:	b002      	add	sp, #8
 80154ee:	bd70      	pop	{r4, r5, r6, pc}
    if(old_size == new_size) return data_p; /*Also avoid reallocating the same memory*/
 80154f0:	2c00      	cmp	r4, #0
 80154f2:	d0f2      	beq.n	80154da <lv_mem_realloc+0x66>
 80154f4:	4620      	mov	r0, r4
 80154f6:	f7ff fc07 	bl	8014d08 <lv_mem_alloc.part.0>
    if(new_p == NULL) {
 80154fa:	4606      	mov	r6, r0
 80154fc:	2800      	cmp	r0, #0
 80154fe:	d1f1      	bne.n	80154e4 <lv_mem_realloc+0x70>
 8015500:	e7e4      	b.n	80154cc <lv_mem_realloc+0x58>
 8015502:	4620      	mov	r0, r4
 8015504:	9201      	str	r2, [sp, #4]
 8015506:	f7ff fbff 	bl	8014d08 <lv_mem_alloc.part.0>
 801550a:	9a01      	ldr	r2, [sp, #4]
 801550c:	4606      	mov	r6, r0
 801550e:	2800      	cmp	r0, #0
 8015510:	d0dc      	beq.n	80154cc <lv_mem_realloc+0x58>
        if(old_size != 0 && new_size != 0) {
 8015512:	2a00      	cmp	r2, #0
 8015514:	d0e6      	beq.n	80154e4 <lv_mem_realloc+0x70>
            _lv_memcpy(new_p, data_p, LV_MATH_MIN(new_size, old_size));
 8015516:	42a2      	cmp	r2, r4
 8015518:	4629      	mov	r1, r5
 801551a:	bf28      	it	cs
 801551c:	4622      	movcs	r2, r4
 801551e:	f7ff fdad 	bl	801507c <_lv_memcpy>
 8015522:	e7df      	b.n	80154e4 <lv_mem_realloc+0x70>
 8015524:	20020188 	.word	0x20020188

08015528 <_lv_mem_buf_get>:
{
 8015528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(size == 0) return NULL;
 801552a:	4606      	mov	r6, r0
 801552c:	2800      	cmp	r0, #0
 801552e:	d073      	beq.n	8015618 <_lv_mem_buf_get+0xf0>
    if(size <= MEM_BUF_SMALL_SIZE) {
 8015530:	2810      	cmp	r0, #16
 8015532:	d972      	bls.n	801561a <_lv_mem_buf_get+0xf2>
 8015534:	4c5b      	ldr	r4, [pc, #364]	; (80156a4 <_lv_mem_buf_get+0x17c>)
            if(mem_buf_small[i].used == 0) {
 8015536:	2300      	movs	r3, #0
 8015538:	f04f 31ff 	mov.w	r1, #4294967295
        if(LV_GC_ROOT(_lv_mem_buf[i]).used == 0 && LV_GC_ROOT(_lv_mem_buf[i]).size >= size) {
 801553c:	1d27      	adds	r7, r4, #4
 801553e:	eb04 05c3 	add.w	r5, r4, r3, lsl #3
 8015542:	79aa      	ldrb	r2, [r5, #6]
 8015544:	4610      	mov	r0, r2
 8015546:	07d2      	lsls	r2, r2, #31
 8015548:	d40d      	bmi.n	8015566 <_lv_mem_buf_get+0x3e>
 801554a:	f837 2033 	ldrh.w	r2, [r7, r3, lsl #3]
 801554e:	42b2      	cmp	r2, r6
 8015550:	d309      	bcc.n	8015566 <_lv_mem_buf_get+0x3e>
            else if(LV_GC_ROOT(_lv_mem_buf[i]).size < LV_GC_ROOT(_lv_mem_buf[i_guess]).size) {
 8015552:	eb04 0cc1 	add.w	ip, r4, r1, lsl #3
            if(LV_GC_ROOT(_lv_mem_buf[i]).size == size) {
 8015556:	d07b      	beq.n	8015650 <_lv_mem_buf_get+0x128>
            else if(i_guess < 0) {
 8015558:	1c4d      	adds	r5, r1, #1
 801555a:	d003      	beq.n	8015564 <_lv_mem_buf_get+0x3c>
            else if(LV_GC_ROOT(_lv_mem_buf[i]).size < LV_GC_ROOT(_lv_mem_buf[i_guess]).size) {
 801555c:	f8bc 0004 	ldrh.w	r0, [ip, #4]
 8015560:	4290      	cmp	r0, r2
 8015562:	d900      	bls.n	8015566 <_lv_mem_buf_get+0x3e>
                i_guess = i;
 8015564:	b259      	sxtb	r1, r3
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 8015566:	3301      	adds	r3, #1
 8015568:	2b10      	cmp	r3, #16
 801556a:	d1e8      	bne.n	801553e <_lv_mem_buf_get+0x16>
    if(i_guess >= 0) {
 801556c:	1c48      	adds	r0, r1, #1
 801556e:	d166      	bne.n	801563e <_lv_mem_buf_get+0x116>
        if(LV_GC_ROOT(_lv_mem_buf[i]).used == 0) {
 8015570:	79a3      	ldrb	r3, [r4, #6]
 8015572:	f013 0301 	ands.w	r3, r3, #1
 8015576:	f000 808b 	beq.w	8015690 <_lv_mem_buf_get+0x168>
 801557a:	7ba3      	ldrb	r3, [r4, #14]
 801557c:	07d9      	lsls	r1, r3, #31
 801557e:	d56d      	bpl.n	801565c <_lv_mem_buf_get+0x134>
 8015580:	7da3      	ldrb	r3, [r4, #22]
 8015582:	07da      	lsls	r2, r3, #31
 8015584:	d572      	bpl.n	801566c <_lv_mem_buf_get+0x144>
 8015586:	7fa3      	ldrb	r3, [r4, #30]
 8015588:	07db      	lsls	r3, r3, #31
 801558a:	d571      	bpl.n	8015670 <_lv_mem_buf_get+0x148>
 801558c:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8015590:	07df      	lsls	r7, r3, #31
 8015592:	d56f      	bpl.n	8015674 <_lv_mem_buf_get+0x14c>
 8015594:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8015598:	07dd      	lsls	r5, r3, #31
 801559a:	d571      	bpl.n	8015680 <_lv_mem_buf_get+0x158>
 801559c:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 80155a0:	07d8      	lsls	r0, r3, #31
 80155a2:	d56f      	bpl.n	8015684 <_lv_mem_buf_get+0x15c>
 80155a4:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 80155a8:	07d9      	lsls	r1, r3, #31
 80155aa:	d56d      	bpl.n	8015688 <_lv_mem_buf_get+0x160>
 80155ac:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80155b0:	07da      	lsls	r2, r3, #31
 80155b2:	d56b      	bpl.n	801568c <_lv_mem_buf_get+0x164>
 80155b4:	f894 304e 	ldrb.w	r3, [r4, #78]	; 0x4e
 80155b8:	07db      	lsls	r3, r3, #31
 80155ba:	d55d      	bpl.n	8015678 <_lv_mem_buf_get+0x150>
 80155bc:	f894 3056 	ldrb.w	r3, [r4, #86]	; 0x56
 80155c0:	07df      	lsls	r7, r3, #31
 80155c2:	d55b      	bpl.n	801567c <_lv_mem_buf_get+0x154>
 80155c4:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
 80155c8:	07dd      	lsls	r5, r3, #31
 80155ca:	d515      	bpl.n	80155f8 <_lv_mem_buf_get+0xd0>
 80155cc:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 80155d0:	07d8      	lsls	r0, r3, #31
 80155d2:	d565      	bpl.n	80156a0 <_lv_mem_buf_get+0x178>
 80155d4:	f894 306e 	ldrb.w	r3, [r4, #110]	; 0x6e
 80155d8:	07d9      	lsls	r1, r3, #31
 80155da:	d55f      	bpl.n	801569c <_lv_mem_buf_get+0x174>
 80155dc:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
 80155e0:	07da      	lsls	r2, r3, #31
 80155e2:	d559      	bpl.n	8015698 <_lv_mem_buf_get+0x170>
 80155e4:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
 80155e8:	07db      	lsls	r3, r3, #31
 80155ea:	d553      	bpl.n	8015694 <_lv_mem_buf_get+0x16c>
    LV_DEBUG_ASSERT(false, "No free buffer. Increase LV_MEM_BUF_MAX_NUM.", 0x00);
 80155ec:	2200      	movs	r2, #0
 80155ee:	2300      	movs	r3, #0
 80155f0:	482d      	ldr	r0, [pc, #180]	; (80156a8 <_lv_mem_buf_get+0x180>)
 80155f2:	f7ff f8ed 	bl	80147d0 <lv_debug_log_error>
 80155f6:	e7fe      	b.n	80155f6 <_lv_mem_buf_get+0xce>
        if(LV_GC_ROOT(_lv_mem_buf[i]).used == 0) {
 80155f8:	250b      	movs	r5, #11
            void * buf = lv_mem_realloc(LV_GC_ROOT(_lv_mem_buf[i]).p, size);
 80155fa:	4631      	mov	r1, r6
 80155fc:	f854 0035 	ldr.w	r0, [r4, r5, lsl #3]
 8015600:	f7ff ff38 	bl	8015474 <lv_mem_realloc>
            if(buf == NULL) {
 8015604:	b360      	cbz	r0, 8015660 <_lv_mem_buf_get+0x138>
            LV_GC_ROOT(_lv_mem_buf[i]).used = 1;
 8015606:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
            LV_GC_ROOT(_lv_mem_buf[i]).p    = buf;
 801560a:	f844 0035 	str.w	r0, [r4, r5, lsl #3]
            LV_GC_ROOT(_lv_mem_buf[i]).used = 1;
 801560e:	799a      	ldrb	r2, [r3, #6]
            LV_GC_ROOT(_lv_mem_buf[i]).size = size;
 8015610:	809e      	strh	r6, [r3, #4]
            LV_GC_ROOT(_lv_mem_buf[i]).used = 1;
 8015612:	f042 0201 	orr.w	r2, r2, #1
 8015616:	719a      	strb	r2, [r3, #6]
}
 8015618:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if(mem_buf_small[i].used == 0) {
 801561a:	4a24      	ldr	r2, [pc, #144]	; (80156ac <_lv_mem_buf_get+0x184>)
 801561c:	7993      	ldrb	r3, [r2, #6]
 801561e:	f013 0301 	ands.w	r3, r3, #1
 8015622:	d003      	beq.n	801562c <_lv_mem_buf_get+0x104>
 8015624:	7b93      	ldrb	r3, [r2, #14]
 8015626:	07d9      	lsls	r1, r3, #31
 8015628:	d484      	bmi.n	8015534 <_lv_mem_buf_get+0xc>
 801562a:	2301      	movs	r3, #1
                mem_buf_small[i].used = 1;
 801562c:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
                return mem_buf_small[i].p;
 8015630:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
                mem_buf_small[i].used = 1;
 8015634:	798b      	ldrb	r3, [r1, #6]
 8015636:	f043 0301 	orr.w	r3, r3, #1
 801563a:	718b      	strb	r3, [r1, #6]
}
 801563c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        LV_GC_ROOT(_lv_mem_buf[i_guess]).used = 1;
 801563e:	eb04 02c1 	add.w	r2, r4, r1, lsl #3
        return LV_GC_ROOT(_lv_mem_buf[i_guess]).p;
 8015642:	f854 0031 	ldr.w	r0, [r4, r1, lsl #3]
        LV_GC_ROOT(_lv_mem_buf[i_guess]).used = 1;
 8015646:	7993      	ldrb	r3, [r2, #6]
 8015648:	f043 0301 	orr.w	r3, r3, #1
 801564c:	7193      	strb	r3, [r2, #6]
}
 801564e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                LV_GC_ROOT(_lv_mem_buf[i]).used = 1;
 8015650:	f040 0201 	orr.w	r2, r0, #1
                return LV_GC_ROOT(_lv_mem_buf[i]).p;
 8015654:	f854 0033 	ldr.w	r0, [r4, r3, lsl #3]
                LV_GC_ROOT(_lv_mem_buf[i]).used = 1;
 8015658:	71aa      	strb	r2, [r5, #6]
}
 801565a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if(LV_GC_ROOT(_lv_mem_buf[i]).used == 0) {
 801565c:	2501      	movs	r5, #1
 801565e:	e7cc      	b.n	80155fa <_lv_mem_buf_get+0xd2>
                LV_DEBUG_ASSERT(false, "Out of memory, can't allocate a new buffer (increase your LV_MEM_SIZE/heap size)", 0x00);
 8015660:	2200      	movs	r2, #0
 8015662:	2300      	movs	r3, #0
 8015664:	4812      	ldr	r0, [pc, #72]	; (80156b0 <_lv_mem_buf_get+0x188>)
 8015666:	f7ff f8b3 	bl	80147d0 <lv_debug_log_error>
 801566a:	e7fe      	b.n	801566a <_lv_mem_buf_get+0x142>
        if(LV_GC_ROOT(_lv_mem_buf[i]).used == 0) {
 801566c:	2502      	movs	r5, #2
 801566e:	e7c4      	b.n	80155fa <_lv_mem_buf_get+0xd2>
 8015670:	2503      	movs	r5, #3
 8015672:	e7c2      	b.n	80155fa <_lv_mem_buf_get+0xd2>
 8015674:	2504      	movs	r5, #4
 8015676:	e7c0      	b.n	80155fa <_lv_mem_buf_get+0xd2>
 8015678:	2509      	movs	r5, #9
 801567a:	e7be      	b.n	80155fa <_lv_mem_buf_get+0xd2>
 801567c:	250a      	movs	r5, #10
 801567e:	e7bc      	b.n	80155fa <_lv_mem_buf_get+0xd2>
 8015680:	2505      	movs	r5, #5
 8015682:	e7ba      	b.n	80155fa <_lv_mem_buf_get+0xd2>
 8015684:	2506      	movs	r5, #6
 8015686:	e7b8      	b.n	80155fa <_lv_mem_buf_get+0xd2>
 8015688:	2507      	movs	r5, #7
 801568a:	e7b6      	b.n	80155fa <_lv_mem_buf_get+0xd2>
 801568c:	2508      	movs	r5, #8
 801568e:	e7b4      	b.n	80155fa <_lv_mem_buf_get+0xd2>
 8015690:	461d      	mov	r5, r3
 8015692:	e7b2      	b.n	80155fa <_lv_mem_buf_get+0xd2>
 8015694:	250f      	movs	r5, #15
 8015696:	e7b0      	b.n	80155fa <_lv_mem_buf_get+0xd2>
 8015698:	250e      	movs	r5, #14
 801569a:	e7ae      	b.n	80155fa <_lv_mem_buf_get+0xd2>
 801569c:	250d      	movs	r5, #13
 801569e:	e7ac      	b.n	80155fa <_lv_mem_buf_get+0xd2>
 80156a0:	250c      	movs	r5, #12
 80156a2:	e7aa      	b.n	80155fa <_lv_mem_buf_get+0xd2>
 80156a4:	20020448 	.word	0x20020448
 80156a8:	08021868 	.word	0x08021868
 80156ac:	20000034 	.word	0x20000034
 80156b0:	08021814 	.word	0x08021814

080156b4 <_lv_memset>:
    if(d_align) {
 80156b4:	f010 0303 	ands.w	r3, r0, #3
 80156b8:	d00c      	beq.n	80156d4 <_lv_memset+0x20>
        d_align = ALIGN_MASK + 1 - d_align;
 80156ba:	f1c3 0304 	rsb	r3, r3, #4
        while(d_align && len) {
 80156be:	2a00      	cmp	r2, #0
 80156c0:	d03e      	beq.n	8015740 <_lv_memset+0x8c>
 80156c2:	4403      	add	r3, r0
            SET8(v);
 80156c4:	f800 1b01 	strb.w	r1, [r0], #1
        while(d_align && len) {
 80156c8:	4298      	cmp	r0, r3
            len--;
 80156ca:	f102 32ff 	add.w	r2, r2, #4294967295
        while(d_align && len) {
 80156ce:	d001      	beq.n	80156d4 <_lv_memset+0x20>
 80156d0:	2a00      	cmp	r2, #0
 80156d2:	d1f7      	bne.n	80156c4 <_lv_memset+0x10>
    uint32_t v32 = v + (v << 8) + (v << 16) + (v << 24);
 80156d4:	eb01 2301 	add.w	r3, r1, r1, lsl #8
    while(len > 32) {
 80156d8:	2a20      	cmp	r2, #32
    uint32_t v32 = v + (v << 8) + (v << 16) + (v << 24);
 80156da:	eb03 4301 	add.w	r3, r3, r1, lsl #16
 80156de:	eb03 6301 	add.w	r3, r3, r1, lsl #24
    while(len > 32) {
 80156e2:	d92a      	bls.n	801573a <_lv_memset+0x86>
{
 80156e4:	b4f0      	push	{r4, r5, r6, r7}
 80156e6:	0744      	lsls	r4, r0, #29
 80156e8:	f1a2 0621 	sub.w	r6, r2, #33	; 0x21
 80156ec:	d129      	bne.n	8015742 <_lv_memset+0x8e>
 80156ee:	2e5f      	cmp	r6, #95	; 0x5f
 80156f0:	d927      	bls.n	8015742 <_lv_memset+0x8e>
 80156f2:	0976      	lsrs	r6, r6, #5
 80156f4:	f100 0420 	add.w	r4, r0, #32
    while(len > 32) {
 80156f8:	2500      	movs	r5, #0
 80156fa:	1c77      	adds	r7, r6, #1
        REPEAT8(SET32(v32));
 80156fc:	3501      	adds	r5, #1
 80156fe:	42af      	cmp	r7, r5
 8015700:	e944 3308 	strd	r3, r3, [r4, #-32]
 8015704:	e944 3306 	strd	r3, r3, [r4, #-24]
 8015708:	e944 3304 	strd	r3, r3, [r4, #-16]
 801570c:	e944 3302 	strd	r3, r3, [r4, #-8]
    while(len > 32) {
 8015710:	f104 0420 	add.w	r4, r4, #32
 8015714:	d8f2      	bhi.n	80156fc <_lv_memset+0x48>
 8015716:	ebc6 64c6 	rsb	r4, r6, r6, lsl #27
 801571a:	3a20      	subs	r2, #32
 801571c:	3601      	adds	r6, #1
 801571e:	eb02 1244 	add.w	r2, r2, r4, lsl #5
 8015722:	eb00 1046 	add.w	r0, r0, r6, lsl #5
    while(len > 4) {
 8015726:	2a04      	cmp	r2, #4
 8015728:	d904      	bls.n	8015734 <_lv_memset+0x80>
        len -= 4;
 801572a:	3a04      	subs	r2, #4
        SET32(v32);
 801572c:	f840 3b04 	str.w	r3, [r0], #4
    while(len > 4) {
 8015730:	2a04      	cmp	r2, #4
 8015732:	d8fa      	bhi.n	801572a <_lv_memset+0x76>
}
 8015734:	bcf0      	pop	{r4, r5, r6, r7}
 8015736:	f008 bd0d 	b.w	801e154 <memset>
    while(len > 4) {
 801573a:	2a04      	cmp	r2, #4
 801573c:	d815      	bhi.n	801576a <_lv_memset+0xb6>
    while(len) {
 801573e:	b9ca      	cbnz	r2, 8015774 <_lv_memset+0xc0>
 8015740:	4770      	bx	lr
 8015742:	f026 071f 	bic.w	r7, r6, #31
 8015746:	f100 0540 	add.w	r5, r0, #64	; 0x40
 801574a:	0976      	lsrs	r6, r6, #5
 801574c:	f100 0420 	add.w	r4, r0, #32
 8015750:	443d      	add	r5, r7
        REPEAT8(SET32(v32));
 8015752:	e944 3308 	strd	r3, r3, [r4, #-32]
 8015756:	e944 3306 	strd	r3, r3, [r4, #-24]
 801575a:	e944 3304 	strd	r3, r3, [r4, #-16]
 801575e:	e944 3302 	strd	r3, r3, [r4, #-8]
    while(len > 32) {
 8015762:	3420      	adds	r4, #32
 8015764:	42ac      	cmp	r4, r5
 8015766:	d1f4      	bne.n	8015752 <_lv_memset+0x9e>
 8015768:	e7d5      	b.n	8015716 <_lv_memset+0x62>
        len -= 4;
 801576a:	3a04      	subs	r2, #4
        SET32(v32);
 801576c:	f840 3b04 	str.w	r3, [r0], #4
    while(len > 4) {
 8015770:	2a04      	cmp	r2, #4
 8015772:	d8fa      	bhi.n	801576a <_lv_memset+0xb6>
 8015774:	f008 bcee 	b.w	801e154 <memset>

08015778 <_lv_memset_00>:
    if(d_align) {
 8015778:	f010 0303 	ands.w	r3, r0, #3
 801577c:	d00d      	beq.n	801579a <_lv_memset_00+0x22>
        d_align = ALIGN_MASK + 1 - d_align;
 801577e:	f1c3 0304 	rsb	r3, r3, #4
        while(d_align && len) {
 8015782:	2900      	cmp	r1, #0
 8015784:	d03d      	beq.n	8015802 <_lv_memset_00+0x8a>
 8015786:	4403      	add	r3, r0
            SET8(0);
 8015788:	2200      	movs	r2, #0
 801578a:	f800 2b01 	strb.w	r2, [r0], #1
        while(d_align && len) {
 801578e:	4298      	cmp	r0, r3
            len--;
 8015790:	f101 31ff 	add.w	r1, r1, #4294967295
        while(d_align && len) {
 8015794:	d001      	beq.n	801579a <_lv_memset_00+0x22>
 8015796:	2900      	cmp	r1, #0
 8015798:	d1f7      	bne.n	801578a <_lv_memset_00+0x12>
    while(len > 32) {
 801579a:	2920      	cmp	r1, #32
 801579c:	d92e      	bls.n	80157fc <_lv_memset_00+0x84>
 801579e:	0743      	lsls	r3, r0, #29
{
 80157a0:	b4f0      	push	{r4, r5, r6, r7}
 80157a2:	f1a1 0621 	sub.w	r6, r1, #33	; 0x21
 80157a6:	d12d      	bne.n	8015804 <_lv_memset_00+0x8c>
 80157a8:	2e5f      	cmp	r6, #95	; 0x5f
 80157aa:	d92b      	bls.n	8015804 <_lv_memset_00+0x8c>
 80157ac:	0976      	lsrs	r6, r6, #5
 80157ae:	f100 0320 	add.w	r3, r0, #32
    while(len > 32) {
 80157b2:	2200      	movs	r2, #0
        REPEAT8(SET32(0));
 80157b4:	2400      	movs	r4, #0
 80157b6:	2500      	movs	r5, #0
 80157b8:	1c77      	adds	r7, r6, #1
 80157ba:	3201      	adds	r2, #1
 80157bc:	3320      	adds	r3, #32
 80157be:	4297      	cmp	r7, r2
 80157c0:	e943 4510 	strd	r4, r5, [r3, #-64]	; 0x40
 80157c4:	e943 450e 	strd	r4, r5, [r3, #-56]	; 0x38
 80157c8:	e943 450c 	strd	r4, r5, [r3, #-48]	; 0x30
 80157cc:	e943 450a 	strd	r4, r5, [r3, #-40]	; 0x28
    while(len > 32) {
 80157d0:	d8f3      	bhi.n	80157ba <_lv_memset_00+0x42>
 80157d2:	ebc6 62c6 	rsb	r2, r6, r6, lsl #27
 80157d6:	3920      	subs	r1, #32
 80157d8:	3601      	adds	r6, #1
 80157da:	eb01 1142 	add.w	r1, r1, r2, lsl #5
 80157de:	eb00 1046 	add.w	r0, r0, r6, lsl #5
    while(len > 4) {
 80157e2:	2904      	cmp	r1, #4
 80157e4:	d905      	bls.n	80157f2 <_lv_memset_00+0x7a>
        SET32(0);
 80157e6:	2300      	movs	r3, #0
        len -= 4;
 80157e8:	3904      	subs	r1, #4
        SET32(0);
 80157ea:	f840 3b04 	str.w	r3, [r0], #4
    while(len > 4) {
 80157ee:	2904      	cmp	r1, #4
 80157f0:	d8fa      	bhi.n	80157e8 <_lv_memset_00+0x70>
 80157f2:	460a      	mov	r2, r1
 80157f4:	2100      	movs	r1, #0
}
 80157f6:	bcf0      	pop	{r4, r5, r6, r7}
 80157f8:	f008 bcac 	b.w	801e154 <memset>
    while(len > 4) {
 80157fc:	2904      	cmp	r1, #4
 80157fe:	d816      	bhi.n	801582e <_lv_memset_00+0xb6>
    while(len) {
 8015800:	b9d9      	cbnz	r1, 801583a <_lv_memset_00+0xc2>
 8015802:	4770      	bx	lr
 8015804:	f026 021f 	bic.w	r2, r6, #31
 8015808:	f100 0440 	add.w	r4, r0, #64	; 0x40
 801580c:	0976      	lsrs	r6, r6, #5
 801580e:	f100 0320 	add.w	r3, r0, #32
 8015812:	4414      	add	r4, r2
        REPEAT8(SET32(0));
 8015814:	2200      	movs	r2, #0
 8015816:	e943 2208 	strd	r2, r2, [r3, #-32]
 801581a:	e943 2206 	strd	r2, r2, [r3, #-24]
 801581e:	e943 2204 	strd	r2, r2, [r3, #-16]
 8015822:	e943 2202 	strd	r2, r2, [r3, #-8]
    while(len > 32) {
 8015826:	3320      	adds	r3, #32
 8015828:	42a3      	cmp	r3, r4
 801582a:	d1f4      	bne.n	8015816 <_lv_memset_00+0x9e>
 801582c:	e7d1      	b.n	80157d2 <_lv_memset_00+0x5a>
        SET32(0);
 801582e:	2300      	movs	r3, #0
        len -= 4;
 8015830:	3904      	subs	r1, #4
        SET32(0);
 8015832:	f840 3b04 	str.w	r3, [r0], #4
    while(len > 4) {
 8015836:	2904      	cmp	r1, #4
 8015838:	d8fa      	bhi.n	8015830 <_lv_memset_00+0xb8>
 801583a:	460a      	mov	r2, r1
 801583c:	2100      	movs	r1, #0
 801583e:	f008 bc89 	b.w	801e154 <memset>
 8015842:	bf00      	nop

08015844 <_lv_memset_ff>:
    if(d_align) {
 8015844:	f010 0303 	ands.w	r3, r0, #3
 8015848:	d00d      	beq.n	8015866 <_lv_memset_ff+0x22>
        d_align = ALIGN_MASK + 1 - d_align;
 801584a:	f1c3 0304 	rsb	r3, r3, #4
        while(d_align && len) {
 801584e:	2900      	cmp	r1, #0
 8015850:	d040      	beq.n	80158d4 <_lv_memset_ff+0x90>
 8015852:	4403      	add	r3, r0
            SET8(0xFF);
 8015854:	22ff      	movs	r2, #255	; 0xff
 8015856:	f800 2b01 	strb.w	r2, [r0], #1
        while(d_align && len) {
 801585a:	4298      	cmp	r0, r3
            len--;
 801585c:	f101 31ff 	add.w	r1, r1, #4294967295
        while(d_align && len) {
 8015860:	d001      	beq.n	8015866 <_lv_memset_ff+0x22>
 8015862:	2900      	cmp	r1, #0
 8015864:	d1f7      	bne.n	8015856 <_lv_memset_ff+0x12>
    while(len > 32) {
 8015866:	2920      	cmp	r1, #32
 8015868:	d931      	bls.n	80158ce <_lv_memset_ff+0x8a>
 801586a:	0743      	lsls	r3, r0, #29
{
 801586c:	b4f0      	push	{r4, r5, r6, r7}
 801586e:	f1a1 0621 	sub.w	r6, r1, #33	; 0x21
 8015872:	d130      	bne.n	80158d6 <_lv_memset_ff+0x92>
 8015874:	2e5f      	cmp	r6, #95	; 0x5f
 8015876:	d92e      	bls.n	80158d6 <_lv_memset_ff+0x92>
 8015878:	0976      	lsrs	r6, r6, #5
 801587a:	f100 0320 	add.w	r3, r0, #32
    while(len > 32) {
 801587e:	2200      	movs	r2, #0
        REPEAT8(SET32(0xFFFFFFFF));
 8015880:	f04f 34ff 	mov.w	r4, #4294967295
 8015884:	f04f 35ff 	mov.w	r5, #4294967295
 8015888:	1c77      	adds	r7, r6, #1
 801588a:	3201      	adds	r2, #1
 801588c:	3320      	adds	r3, #32
 801588e:	4297      	cmp	r7, r2
 8015890:	e943 4510 	strd	r4, r5, [r3, #-64]	; 0x40
 8015894:	e943 450e 	strd	r4, r5, [r3, #-56]	; 0x38
 8015898:	e943 450c 	strd	r4, r5, [r3, #-48]	; 0x30
 801589c:	e943 450a 	strd	r4, r5, [r3, #-40]	; 0x28
    while(len > 32) {
 80158a0:	d8f3      	bhi.n	801588a <_lv_memset_ff+0x46>
 80158a2:	ebc6 62c6 	rsb	r2, r6, r6, lsl #27
 80158a6:	3920      	subs	r1, #32
 80158a8:	3601      	adds	r6, #1
 80158aa:	eb01 1142 	add.w	r1, r1, r2, lsl #5
 80158ae:	eb00 1046 	add.w	r0, r0, r6, lsl #5
    while(len > 4) {
 80158b2:	2904      	cmp	r1, #4
 80158b4:	d906      	bls.n	80158c4 <_lv_memset_ff+0x80>
        SET32(0xFFFFFFFF);
 80158b6:	f04f 33ff 	mov.w	r3, #4294967295
        len -= 4;
 80158ba:	3904      	subs	r1, #4
        SET32(0xFFFFFFFF);
 80158bc:	f840 3b04 	str.w	r3, [r0], #4
    while(len > 4) {
 80158c0:	2904      	cmp	r1, #4
 80158c2:	d8fa      	bhi.n	80158ba <_lv_memset_ff+0x76>
 80158c4:	460a      	mov	r2, r1
 80158c6:	21ff      	movs	r1, #255	; 0xff
}
 80158c8:	bcf0      	pop	{r4, r5, r6, r7}
 80158ca:	f008 bc43 	b.w	801e154 <memset>
    while(len > 4) {
 80158ce:	2904      	cmp	r1, #4
 80158d0:	d817      	bhi.n	8015902 <_lv_memset_ff+0xbe>
    while(len) {
 80158d2:	b9e9      	cbnz	r1, 8015910 <_lv_memset_ff+0xcc>
 80158d4:	4770      	bx	lr
 80158d6:	f026 021f 	bic.w	r2, r6, #31
 80158da:	f100 0440 	add.w	r4, r0, #64	; 0x40
 80158de:	0976      	lsrs	r6, r6, #5
 80158e0:	f100 0320 	add.w	r3, r0, #32
 80158e4:	4414      	add	r4, r2
        REPEAT8(SET32(0xFFFFFFFF));
 80158e6:	f04f 32ff 	mov.w	r2, #4294967295
 80158ea:	e943 2208 	strd	r2, r2, [r3, #-32]
 80158ee:	e943 2206 	strd	r2, r2, [r3, #-24]
 80158f2:	e943 2204 	strd	r2, r2, [r3, #-16]
 80158f6:	e943 2202 	strd	r2, r2, [r3, #-8]
    while(len > 32) {
 80158fa:	3320      	adds	r3, #32
 80158fc:	42a3      	cmp	r3, r4
 80158fe:	d1f4      	bne.n	80158ea <_lv_memset_ff+0xa6>
 8015900:	e7cf      	b.n	80158a2 <_lv_memset_ff+0x5e>
        SET32(0xFFFFFFFF);
 8015902:	f04f 33ff 	mov.w	r3, #4294967295
        len -= 4;
 8015906:	3904      	subs	r1, #4
        SET32(0xFFFFFFFF);
 8015908:	f840 3b04 	str.w	r3, [r0], #4
    while(len > 4) {
 801590c:	2904      	cmp	r1, #4
 801590e:	d8fa      	bhi.n	8015906 <_lv_memset_ff+0xc2>
 8015910:	460a      	mov	r2, r1
 8015912:	21ff      	movs	r1, #255	; 0xff
 8015914:	f008 bc1e 	b.w	801e154 <memset>

08015918 <lv_task_exec>:
 * Execute task if its the priority is appropriate
 * @param task pointer to lv_task
 * @return true: execute, false: not executed
 */
static bool lv_task_exec(lv_task_t * task)
{
 8015918:	b570      	push	{r4, r5, r6, lr}
 801591a:	4604      	mov	r4, r0
 * @return the time remaining, or 0 if it needs to be run again
 */
static uint32_t lv_task_time_remaining(lv_task_t * task)
{
    /*Check if at least 'period' time elapsed*/
    uint32_t elp = lv_tick_elaps(task->last_run);
 801591c:	6840      	ldr	r0, [r0, #4]
 801591e:	f7fe f8f3 	bl	8013b08 <lv_tick_elaps>
    if(elp >= task->period)
 8015922:	6823      	ldr	r3, [r4, #0]
 8015924:	4298      	cmp	r0, r3
 8015926:	d201      	bcs.n	801592c <lv_task_exec+0x14>
    bool exec = false;
 8015928:	2000      	movs	r0, #0
}
 801592a:	bd70      	pop	{r4, r5, r6, pc}
        task->last_run = lv_tick_get();
 801592c:	f7fe f8de 	bl	8013aec <lv_tick_get>
        if(task->task_cb) task->task_cb(task);
 8015930:	68a3      	ldr	r3, [r4, #8]
        task->last_run = lv_tick_get();
 8015932:	6060      	str	r0, [r4, #4]
        if(task->task_cb) task->task_cb(task);
 8015934:	b10b      	cbz	r3, 801593a <lv_task_exec+0x22>
 8015936:	4620      	mov	r0, r4
 8015938:	4798      	blx	r3
        if(task_deleted == false) { /*The task might be deleted by itself as well*/
 801593a:	4e0e      	ldr	r6, [pc, #56]	; (8015974 <lv_task_exec+0x5c>)
 801593c:	7833      	ldrb	r3, [r6, #0]
 801593e:	b99b      	cbnz	r3, 8015968 <lv_task_exec+0x50>
            if(task->repeat_count > 0) {
 8015940:	6923      	ldr	r3, [r4, #16]
 8015942:	2b00      	cmp	r3, #0
 8015944:	dd01      	ble.n	801594a <lv_task_exec+0x32>
                task->repeat_count--;
 8015946:	3b01      	subs	r3, #1
 8015948:	6123      	str	r3, [r4, #16]
            if(task->repeat_count == 0) {
 801594a:	b96b      	cbnz	r3, 8015968 <lv_task_exec+0x50>
    _lv_ll_remove(&LV_GC_ROOT(_lv_task_ll), task);
 801594c:	4621      	mov	r1, r4
 801594e:	480a      	ldr	r0, [pc, #40]	; (8015978 <lv_task_exec+0x60>)
 8015950:	f7ff f890 	bl	8014a74 <_lv_ll_remove>
    task_list_changed = true;
 8015954:	2501      	movs	r5, #1
 8015956:	4b09      	ldr	r3, [pc, #36]	; (801597c <lv_task_exec+0x64>)
    lv_mem_free(task);
 8015958:	4620      	mov	r0, r4
    task_list_changed = true;
 801595a:	701d      	strb	r5, [r3, #0]
    lv_mem_free(task);
 801595c:	f7ff fa66 	bl	8014e2c <lv_mem_free>
    if(LV_GC_ROOT(_lv_task_act) == task) task_deleted = true; /*The active task was deleted*/
 8015960:	4b07      	ldr	r3, [pc, #28]	; (8015980 <lv_task_exec+0x68>)
 8015962:	681b      	ldr	r3, [r3, #0]
 8015964:	429c      	cmp	r4, r3
 8015966:	d001      	beq.n	801596c <lv_task_exec+0x54>
        exec = true;
 8015968:	2001      	movs	r0, #1
}
 801596a:	bd70      	pop	{r4, r5, r6, pc}
    if(LV_GC_ROOT(_lv_task_act) == task) task_deleted = true; /*The active task was deleted*/
 801596c:	4628      	mov	r0, r5
 801596e:	7035      	strb	r5, [r6, #0]
}
 8015970:	bd70      	pop	{r4, r5, r6, pc}
 8015972:	bf00      	nop
 8015974:	2002019e 	.word	0x2002019e
 8015978:	20020414 	.word	0x20020414
 801597c:	2002019f 	.word	0x2002019f
 8015980:	200204e4 	.word	0x200204e4

08015984 <_lv_task_core_init>:
{
 8015984:	b508      	push	{r3, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_task_ll), sizeof(lv_task_t));
 8015986:	2118      	movs	r1, #24
 8015988:	4803      	ldr	r0, [pc, #12]	; (8015998 <_lv_task_core_init+0x14>)
 801598a:	f7ff f811 	bl	80149b0 <_lv_ll_init>
    lv_task_run = en;
 801598e:	4b03      	ldr	r3, [pc, #12]	; (801599c <_lv_task_core_init+0x18>)
 8015990:	2201      	movs	r2, #1
 8015992:	701a      	strb	r2, [r3, #0]
}
 8015994:	bd08      	pop	{r3, pc}
 8015996:	bf00      	nop
 8015998:	20020414 	.word	0x20020414
 801599c:	2002019c 	.word	0x2002019c

080159a0 <lv_task_handler>:
{
 80159a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(already_running) return 1;
 80159a4:	f8df b18c 	ldr.w	fp, [pc, #396]	; 8015b34 <lv_task_handler+0x194>
 80159a8:	f89b 4000 	ldrb.w	r4, [fp]
{
 80159ac:	ed2d 8b02 	vpush	{d8}
 80159b0:	b083      	sub	sp, #12
    if(already_running) return 1;
 80159b2:	2c00      	cmp	r4, #0
 80159b4:	f040 80a5 	bne.w	8015b02 <lv_task_handler+0x162>
    if(lv_task_run == false) {
 80159b8:	4b57      	ldr	r3, [pc, #348]	; (8015b18 <lv_task_handler+0x178>)
    already_running = true;
 80159ba:	2501      	movs	r5, #1
    if(lv_task_run == false) {
 80159bc:	781b      	ldrb	r3, [r3, #0]
    already_running = true;
 80159be:	f88b 5000 	strb.w	r5, [fp]
    if(lv_task_run == false) {
 80159c2:	b93b      	cbnz	r3, 80159d4 <lv_task_handler+0x34>
}
 80159c4:	4628      	mov	r0, r5
    already_running = false; /*Release the mutex*/
 80159c6:	f88b 3000 	strb.w	r3, [fp]
}
 80159ca:	b003      	add	sp, #12
 80159cc:	ecbd 8b02 	vpop	{d8}
 80159d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint32_t handler_start = lv_tick_get();
 80159d4:	f7fe f88a 	bl	8013aec <lv_tick_get>
 80159d8:	f8df 815c 	ldr.w	r8, [pc, #348]	; 8015b38 <lv_task_handler+0x198>
        task_deleted             = false;
 80159dc:	46a2      	mov	sl, r4
 80159de:	4f4f      	ldr	r7, [pc, #316]	; (8015b1c <lv_task_handler+0x17c>)
    uint32_t handler_start = lv_tick_get();
 80159e0:	ee08 0a10 	vmov	s16, r0
    lv_task_t * task_interrupter = NULL;
 80159e4:	f8df 9154 	ldr.w	r9, [pc, #340]	; 8015b3c <lv_task_handler+0x19c>
 80159e8:	4d4d      	ldr	r5, [pc, #308]	; (8015b20 <lv_task_handler+0x180>)
        LV_GC_ROOT(_lv_task_act) = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
 80159ea:	4e4e      	ldr	r6, [pc, #312]	; (8015b24 <lv_task_handler+0x184>)
 80159ec:	4630      	mov	r0, r6
        task_deleted             = false;
 80159ee:	f888 a000 	strb.w	sl, [r8]
        task_created             = false;
 80159f2:	f887 a000 	strb.w	sl, [r7]
        task_list_changed        = false;
 80159f6:	f889 a000 	strb.w	sl, [r9]
        LV_GC_ROOT(_lv_task_act) = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
 80159fa:	f7ff f8b7 	bl	8014b6c <_lv_ll_get_head>
 80159fe:	4601      	mov	r1, r0
 8015a00:	6029      	str	r1, [r5, #0]
        while(LV_GC_ROOT(_lv_task_act)) {
 8015a02:	b361      	cbz	r1, 8015a5e <lv_task_handler+0xbe>
            next = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), LV_GC_ROOT(_lv_task_act));
 8015a04:	4630      	mov	r0, r6
 8015a06:	f7ff f8b9 	bl	8014b7c <_lv_ll_get_next>
            if(LV_GC_ROOT(_lv_task_act)->prio == LV_TASK_PRIO_OFF) {
 8015a0a:	682a      	ldr	r2, [r5, #0]
            next = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), LV_GC_ROOT(_lv_task_act));
 8015a0c:	4601      	mov	r1, r0
            if(LV_GC_ROOT(_lv_task_act)->prio == LV_TASK_PRIO_OFF) {
 8015a0e:	7d13      	ldrb	r3, [r2, #20]
 8015a10:	f013 0007 	ands.w	r0, r3, #7
 8015a14:	d023      	beq.n	8015a5e <lv_task_handler+0xbe>
            if(LV_GC_ROOT(_lv_task_act) == task_interrupter) {
 8015a16:	42a2      	cmp	r2, r4
 8015a18:	d06a      	beq.n	8015af0 <lv_task_handler+0x150>
            if(LV_GC_ROOT(_lv_task_act)->prio == LV_TASK_PRIO_HIGHEST) {
 8015a1a:	2805      	cmp	r0, #5
 8015a1c:	d06b      	beq.n	8015af6 <lv_task_handler+0x156>
            else if(task_interrupter) {
 8015a1e:	b18c      	cbz	r4, 8015a44 <lv_task_handler+0xa4>
                if(LV_GC_ROOT(_lv_task_act)->prio > task_interrupter->prio) {
 8015a20:	7d20      	ldrb	r0, [r4, #20]
 8015a22:	f003 0307 	and.w	r3, r3, #7
 8015a26:	f000 0007 	and.w	r0, r0, #7
 8015a2a:	4283      	cmp	r3, r0
 8015a2c:	d80a      	bhi.n	8015a44 <lv_task_handler+0xa4>
            if(task_created || task_deleted) {
 8015a2e:	783b      	ldrb	r3, [r7, #0]
 8015a30:	b9ab      	cbnz	r3, 8015a5e <lv_task_handler+0xbe>
 8015a32:	f898 3000 	ldrb.w	r3, [r8]
 8015a36:	b993      	cbnz	r3, 8015a5e <lv_task_handler+0xbe>
            if(task_list_changed) {
 8015a38:	f899 2000 	ldrb.w	r2, [r9]
 8015a3c:	2a00      	cmp	r2, #0
 8015a3e:	d0df      	beq.n	8015a00 <lv_task_handler+0x60>
                task_interrupter = NULL;
 8015a40:	461c      	mov	r4, r3
 8015a42:	e7d3      	b.n	80159ec <lv_task_handler+0x4c>
                if(lv_task_exec(LV_GC_ROOT(_lv_task_act))) {
 8015a44:	4610      	mov	r0, r2
 8015a46:	9101      	str	r1, [sp, #4]
 8015a48:	f7ff ff66 	bl	8015918 <lv_task_exec>
 8015a4c:	9901      	ldr	r1, [sp, #4]
 8015a4e:	2800      	cmp	r0, #0
 8015a50:	d0ed      	beq.n	8015a2e <lv_task_handler+0x8e>
                    if(!task_created && !task_deleted) {
 8015a52:	783b      	ldrb	r3, [r7, #0]
 8015a54:	b91b      	cbnz	r3, 8015a5e <lv_task_handler+0xbe>
 8015a56:	f898 3000 	ldrb.w	r3, [r8]
 8015a5a:	2b00      	cmp	r3, #0
 8015a5c:	d05a      	beq.n	8015b14 <lv_task_handler+0x174>
    next = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
 8015a5e:	4831      	ldr	r0, [pc, #196]	; (8015b24 <lv_task_handler+0x184>)
    uint32_t time_till_next = LV_NO_TASK_READY;
 8015a60:	f04f 35ff 	mov.w	r5, #4294967295
    next = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
 8015a64:	f7ff f882 	bl	8014b6c <_lv_ll_get_head>
    while(next && next->prio != LV_TASK_PRIO_OFF) {
 8015a68:	4604      	mov	r4, r0
 8015a6a:	b1e8      	cbz	r0, 8015aa8 <lv_task_handler+0x108>
        next = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), next); /*Find the next task*/
 8015a6c:	4e2d      	ldr	r6, [pc, #180]	; (8015b24 <lv_task_handler+0x184>)
 8015a6e:	e008      	b.n	8015a82 <lv_task_handler+0xe2>
 8015a70:	4285      	cmp	r5, r0
 8015a72:	4621      	mov	r1, r4
 8015a74:	bf28      	it	cs
 8015a76:	4605      	movcs	r5, r0
 8015a78:	4630      	mov	r0, r6
 8015a7a:	f7ff f87f 	bl	8014b7c <_lv_ll_get_next>
    while(next && next->prio != LV_TASK_PRIO_OFF) {
 8015a7e:	4604      	mov	r4, r0
 8015a80:	b190      	cbz	r0, 8015aa8 <lv_task_handler+0x108>
 8015a82:	7d23      	ldrb	r3, [r4, #20]
 8015a84:	075b      	lsls	r3, r3, #29
 8015a86:	d00f      	beq.n	8015aa8 <lv_task_handler+0x108>
    uint32_t elp = lv_tick_elaps(task->last_run);
 8015a88:	6860      	ldr	r0, [r4, #4]
 8015a8a:	f7fe f83d 	bl	8013b08 <lv_tick_elaps>
    if(elp >= task->period)
 8015a8e:	6823      	ldr	r3, [r4, #0]
 8015a90:	4298      	cmp	r0, r3
        return 0;
    return task->period - elp;
 8015a92:	eba3 0000 	sub.w	r0, r3, r0
    if(elp >= task->period)
 8015a96:	d3eb      	bcc.n	8015a70 <lv_task_handler+0xd0>
        next = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), next); /*Find the next task*/
 8015a98:	4621      	mov	r1, r4
 8015a9a:	4630      	mov	r0, r6
 8015a9c:	f7ff f86e 	bl	8014b7c <_lv_ll_get_next>
 8015aa0:	2500      	movs	r5, #0
    while(next && next->prio != LV_TASK_PRIO_OFF) {
 8015aa2:	4604      	mov	r4, r0
 8015aa4:	2800      	cmp	r0, #0
 8015aa6:	d1ec      	bne.n	8015a82 <lv_task_handler+0xe2>
    busy_time += lv_tick_elaps(handler_start);
 8015aa8:	4e1f      	ldr	r6, [pc, #124]	; (8015b28 <lv_task_handler+0x188>)
 8015aaa:	ee18 0a10 	vmov	r0, s16
 8015aae:	f7fe f82b 	bl	8013b08 <lv_tick_elaps>
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
 8015ab2:	4c1e      	ldr	r4, [pc, #120]	; (8015b2c <lv_task_handler+0x18c>)
    busy_time += lv_tick_elaps(handler_start);
 8015ab4:	6833      	ldr	r3, [r6, #0]
 8015ab6:	4403      	add	r3, r0
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
 8015ab8:	6820      	ldr	r0, [r4, #0]
    busy_time += lv_tick_elaps(handler_start);
 8015aba:	6033      	str	r3, [r6, #0]
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
 8015abc:	f7fe f824 	bl	8013b08 <lv_tick_elaps>
    if(idle_period_time >= IDLE_MEAS_PERIOD) {
 8015ac0:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8015ac4:	d312      	bcc.n	8015aec <lv_task_handler+0x14c>
        idle_last         = (busy_time * 100) / idle_period_time;  /*Calculate the busy percentage*/
 8015ac6:	6833      	ldr	r3, [r6, #0]
 8015ac8:	2264      	movs	r2, #100	; 0x64
 8015aca:	fb02 f203 	mul.w	r2, r2, r3
 8015ace:	fbb2 f3f0 	udiv	r3, r2, r0
 8015ad2:	b2db      	uxtb	r3, r3
        idle_last         = idle_last > 100 ? 0 : 100 - idle_last; /*But we need idle time*/
 8015ad4:	2b64      	cmp	r3, #100	; 0x64
 8015ad6:	d81b      	bhi.n	8015b10 <lv_task_handler+0x170>
 8015ad8:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8015adc:	b2db      	uxtb	r3, r3
 8015ade:	4914      	ldr	r1, [pc, #80]	; (8015b30 <lv_task_handler+0x190>)
        busy_time         = 0;
 8015ae0:	2200      	movs	r2, #0
        idle_last         = idle_last > 100 ? 0 : 100 - idle_last; /*But we need idle time*/
 8015ae2:	700b      	strb	r3, [r1, #0]
        busy_time         = 0;
 8015ae4:	6032      	str	r2, [r6, #0]
        idle_period_start = lv_tick_get();
 8015ae6:	f7fe f801 	bl	8013aec <lv_tick_get>
 8015aea:	6020      	str	r0, [r4, #0]
    already_running = false; /*Release the mutex*/
 8015aec:	2300      	movs	r3, #0
 8015aee:	e769      	b.n	80159c4 <lv_task_handler+0x24>
                task_interrupter = NULL; /*From this point only task after the interrupter comes, so
 8015af0:	2400      	movs	r4, #0
                LV_GC_ROOT(_lv_task_act) = next;
 8015af2:	6029      	str	r1, [r5, #0]
                continue; /*Load the next task*/
 8015af4:	e785      	b.n	8015a02 <lv_task_handler+0x62>
                lv_task_exec(LV_GC_ROOT(_lv_task_act));
 8015af6:	4610      	mov	r0, r2
 8015af8:	9101      	str	r1, [sp, #4]
 8015afa:	f7ff ff0d 	bl	8015918 <lv_task_exec>
 8015afe:	9901      	ldr	r1, [sp, #4]
 8015b00:	e795      	b.n	8015a2e <lv_task_handler+0x8e>
    if(already_running) return 1;
 8015b02:	2501      	movs	r5, #1
}
 8015b04:	4628      	mov	r0, r5
 8015b06:	b003      	add	sp, #12
 8015b08:	ecbd 8b02 	vpop	{d8}
 8015b0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        idle_last         = idle_last > 100 ? 0 : 100 - idle_last; /*But we need idle time*/
 8015b10:	2300      	movs	r3, #0
 8015b12:	e7e4      	b.n	8015ade <lv_task_handler+0x13e>
                        task_interrupter = LV_GC_ROOT(_lv_task_act); /*Check all tasks again from the highest priority */
 8015b14:	682c      	ldr	r4, [r5, #0]
    } while(!end_flag);
 8015b16:	e769      	b.n	80159ec <lv_task_handler+0x4c>
 8015b18:	2002019c 	.word	0x2002019c
 8015b1c:	2002019d 	.word	0x2002019d
 8015b20:	200204e4 	.word	0x200204e4
 8015b24:	20020414 	.word	0x20020414
 8015b28:	20020190 	.word	0x20020190
 8015b2c:	20020198 	.word	0x20020198
 8015b30:	20020194 	.word	0x20020194
 8015b34:	2002018c 	.word	0x2002018c
 8015b38:	2002019e 	.word	0x2002019e
 8015b3c:	2002019f 	.word	0x2002019f

08015b40 <lv_task_create>:
{
 8015b40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015b44:	4607      	mov	r7, r0
    tmp = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
 8015b46:	482d      	ldr	r0, [pc, #180]	; (8015bfc <lv_task_create+0xbc>)
{
 8015b48:	4688      	mov	r8, r1
 8015b4a:	4616      	mov	r6, r2
 8015b4c:	4699      	mov	r9, r3
    tmp = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
 8015b4e:	f7ff f80d 	bl	8014b6c <_lv_ll_get_head>
    if(NULL == tmp) {
 8015b52:	2800      	cmp	r0, #0
 8015b54:	d042      	beq.n	8015bdc <lv_task_create+0x9c>
 8015b56:	4604      	mov	r4, r0
            tmp = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), tmp);
 8015b58:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 8015bfc <lv_task_create+0xbc>
 8015b5c:	e003      	b.n	8015b66 <lv_task_create+0x26>
 8015b5e:	f7ff f80d 	bl	8014b7c <_lv_ll_get_next>
        } while(tmp != NULL);
 8015b62:	4604      	mov	r4, r0
 8015b64:	b360      	cbz	r0, 8015bc0 <lv_task_create+0x80>
            if(tmp->prio <= prio) {
 8015b66:	7d25      	ldrb	r5, [r4, #20]
            tmp = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), tmp);
 8015b68:	4621      	mov	r1, r4
 8015b6a:	4650      	mov	r0, sl
            if(tmp->prio <= prio) {
 8015b6c:	f005 0507 	and.w	r5, r5, #7
 8015b70:	42b5      	cmp	r5, r6
 8015b72:	dcf4      	bgt.n	8015b5e <lv_task_create+0x1e>
                new_task = _lv_ll_ins_prev(&LV_GC_ROOT(_lv_task_ll), tmp);
 8015b74:	4821      	ldr	r0, [pc, #132]	; (8015bfc <lv_task_create+0xbc>)
 8015b76:	f7fe ff39 	bl	80149ec <_lv_ll_ins_prev>
 8015b7a:	4605      	mov	r5, r0
                LV_ASSERT_MEM(new_task);
 8015b7c:	f7fe fe24 	bl	80147c8 <lv_debug_check_null>
 8015b80:	4603      	mov	r3, r0
 8015b82:	b1c0      	cbz	r0, 8015bb6 <lv_task_create+0x76>
        if(new_task == NULL) return NULL;
 8015b84:	2d00      	cmp	r5, #0
 8015b86:	d037      	beq.n	8015bf8 <lv_task_create+0xb8>
    new_task->prio    = prio;
 8015b88:	7d2b      	ldrb	r3, [r5, #20]
    new_task->repeat_count = -1;
 8015b8a:	f04f 31ff 	mov.w	r1, #4294967295
    task_list_changed = true;
 8015b8e:	4a1c      	ldr	r2, [pc, #112]	; (8015c00 <lv_task_create+0xc0>)
 8015b90:	2401      	movs	r4, #1
    new_task->prio    = prio;
 8015b92:	f366 0302 	bfi	r3, r6, #0, #3
    new_task->period  = period;
 8015b96:	f8c5 8000 	str.w	r8, [r5]
    new_task->task_cb = task_xcb;
 8015b9a:	60af      	str	r7, [r5, #8]
    new_task->prio    = prio;
 8015b9c:	752b      	strb	r3, [r5, #20]
    new_task->repeat_count = -1;
 8015b9e:	6129      	str	r1, [r5, #16]
    task_list_changed = true;
 8015ba0:	7014      	strb	r4, [r2, #0]
    new_task->last_run = lv_tick_get();
 8015ba2:	f7fd ffa3 	bl	8013aec <lv_tick_get>
    task_created = true;
 8015ba6:	4b17      	ldr	r3, [pc, #92]	; (8015c04 <lv_task_create+0xc4>)
    new_task->user_data = user_data;
 8015ba8:	f8c5 900c 	str.w	r9, [r5, #12]
    new_task->last_run = lv_tick_get();
 8015bac:	6068      	str	r0, [r5, #4]
    task_created = true;
 8015bae:	701c      	strb	r4, [r3, #0]
}
 8015bb0:	4628      	mov	r0, r5
 8015bb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                LV_ASSERT_MEM(new_task);
 8015bb6:	462a      	mov	r2, r5
 8015bb8:	4813      	ldr	r0, [pc, #76]	; (8015c08 <lv_task_create+0xc8>)
 8015bba:	f7fe fe09 	bl	80147d0 <lv_debug_log_error>
 8015bbe:	e7fe      	b.n	8015bbe <lv_task_create+0x7e>
            new_task = _lv_ll_ins_tail(&LV_GC_ROOT(_lv_task_ll));
 8015bc0:	480e      	ldr	r0, [pc, #56]	; (8015bfc <lv_task_create+0xbc>)
 8015bc2:	f7fe ff41 	bl	8014a48 <_lv_ll_ins_tail>
 8015bc6:	4605      	mov	r5, r0
            LV_ASSERT_MEM(new_task);
 8015bc8:	f7fe fdfe 	bl	80147c8 <lv_debug_check_null>
 8015bcc:	2800      	cmp	r0, #0
 8015bce:	d1d9      	bne.n	8015b84 <lv_task_create+0x44>
 8015bd0:	462a      	mov	r2, r5
 8015bd2:	4623      	mov	r3, r4
 8015bd4:	480c      	ldr	r0, [pc, #48]	; (8015c08 <lv_task_create+0xc8>)
 8015bd6:	f7fe fdfb 	bl	80147d0 <lv_debug_log_error>
 8015bda:	e7fe      	b.n	8015bda <lv_task_create+0x9a>
        new_task = _lv_ll_ins_head(&LV_GC_ROOT(_lv_task_ll));
 8015bdc:	4807      	ldr	r0, [pc, #28]	; (8015bfc <lv_task_create+0xbc>)
 8015bde:	f7fe feef 	bl	80149c0 <_lv_ll_ins_head>
 8015be2:	4605      	mov	r5, r0
        LV_ASSERT_MEM(new_task);
 8015be4:	f7fe fdf0 	bl	80147c8 <lv_debug_check_null>
 8015be8:	4603      	mov	r3, r0
 8015bea:	2800      	cmp	r0, #0
 8015bec:	d1ca      	bne.n	8015b84 <lv_task_create+0x44>
 8015bee:	462a      	mov	r2, r5
 8015bf0:	4805      	ldr	r0, [pc, #20]	; (8015c08 <lv_task_create+0xc8>)
 8015bf2:	f7fe fded 	bl	80147d0 <lv_debug_log_error>
 8015bf6:	e7fe      	b.n	8015bf6 <lv_task_create+0xb6>
        if(new_task == NULL) return NULL;
 8015bf8:	2500      	movs	r5, #0
 8015bfa:	e7d9      	b.n	8015bb0 <lv_task_create+0x70>
 8015bfc:	20020414 	.word	0x20020414
 8015c00:	2002019f 	.word	0x2002019f
 8015c04:	2002019d 	.word	0x2002019d
 8015c08:	0801e1c4 	.word	0x0801e1c4

08015c0c <lv_task_set_prio>:
    if(task->prio == prio) return;
 8015c0c:	7d03      	ldrb	r3, [r0, #20]
 8015c0e:	f003 0307 	and.w	r3, r3, #7
 8015c12:	428b      	cmp	r3, r1
 8015c14:	d022      	beq.n	8015c5c <lv_task_set_prio+0x50>
{
 8015c16:	b570      	push	{r4, r5, r6, lr}
 8015c18:	4606      	mov	r6, r0
    _LV_LL_READ(LV_GC_ROOT(_lv_task_ll), i) {
 8015c1a:	4814      	ldr	r0, [pc, #80]	; (8015c6c <lv_task_set_prio+0x60>)
 8015c1c:	460c      	mov	r4, r1
 8015c1e:	f7fe ffa5 	bl	8014b6c <_lv_ll_get_head>
 8015c22:	4601      	mov	r1, r0
 8015c24:	b1d8      	cbz	r0, 8015c5e <lv_task_set_prio+0x52>
 8015c26:	4d11      	ldr	r5, [pc, #68]	; (8015c6c <lv_task_set_prio+0x60>)
 8015c28:	e003      	b.n	8015c32 <lv_task_set_prio+0x26>
 8015c2a:	f7fe ffa7 	bl	8014b7c <_lv_ll_get_next>
 8015c2e:	4601      	mov	r1, r0
 8015c30:	b1a8      	cbz	r0, 8015c5e <lv_task_set_prio+0x52>
        if(i->prio <= prio) {
 8015c32:	7d0b      	ldrb	r3, [r1, #20]
    _LV_LL_READ(LV_GC_ROOT(_lv_task_ll), i) {
 8015c34:	4628      	mov	r0, r5
        if(i->prio <= prio) {
 8015c36:	f003 0307 	and.w	r3, r3, #7
 8015c3a:	429c      	cmp	r4, r3
 8015c3c:	dbf5      	blt.n	8015c2a <lv_task_set_prio+0x1e>
            if(i != task) _lv_ll_move_before(&LV_GC_ROOT(_lv_task_ll), task, i);
 8015c3e:	428e      	cmp	r6, r1
 8015c40:	d004      	beq.n	8015c4c <lv_task_set_prio+0x40>
 8015c42:	460a      	mov	r2, r1
 8015c44:	4809      	ldr	r0, [pc, #36]	; (8015c6c <lv_task_set_prio+0x60>)
 8015c46:	4631      	mov	r1, r6
 8015c48:	f7fe ffb2 	bl	8014bb0 <_lv_ll_move_before>
    task->prio = prio;
 8015c4c:	7d33      	ldrb	r3, [r6, #20]
    task_list_changed = true;
 8015c4e:	2101      	movs	r1, #1
 8015c50:	4a07      	ldr	r2, [pc, #28]	; (8015c70 <lv_task_set_prio+0x64>)
    task->prio = prio;
 8015c52:	f364 0302 	bfi	r3, r4, #0, #3
    task_list_changed = true;
 8015c56:	7011      	strb	r1, [r2, #0]
    task->prio = prio;
 8015c58:	7533      	strb	r3, [r6, #20]
}
 8015c5a:	bd70      	pop	{r4, r5, r6, pc}
 8015c5c:	4770      	bx	lr
        _lv_ll_move_before(&LV_GC_ROOT(_lv_task_ll), task, NULL);
 8015c5e:	2200      	movs	r2, #0
 8015c60:	4631      	mov	r1, r6
 8015c62:	4802      	ldr	r0, [pc, #8]	; (8015c6c <lv_task_set_prio+0x60>)
 8015c64:	f7fe ffa4 	bl	8014bb0 <_lv_ll_move_before>
 8015c68:	e7f0      	b.n	8015c4c <lv_task_set_prio+0x40>
 8015c6a:	bf00      	nop
 8015c6c:	20020414 	.word	0x20020414
 8015c70:	2002019f 	.word	0x2002019f

08015c74 <lv_task_ready>:
{
 8015c74:	b510      	push	{r4, lr}
 8015c76:	4604      	mov	r4, r0
    task->last_run = lv_tick_get() - task->period - 1;
 8015c78:	f7fd ff38 	bl	8013aec <lv_tick_get>
 8015c7c:	6823      	ldr	r3, [r4, #0]
 8015c7e:	43db      	mvns	r3, r3
 8015c80:	4403      	add	r3, r0
 8015c82:	6063      	str	r3, [r4, #4]
}
 8015c84:	bd10      	pop	{r4, pc}
 8015c86:	bf00      	nop

08015c88 <lv_txt_utf8_next>:
 *          After call it will point to the next UTF-8 char in 'txt'.
 *          NULL to use txt[0] as index
 * @return the decoded Unicode character or 0 on invalid UTF-8 code
 */
static uint32_t lv_txt_utf8_next(const char * txt, uint32_t * i)
{
 8015c88:	b470      	push	{r4, r5, r6}
     * */

    uint32_t result = 0;

    /*Dummy 'i' pointer is required*/
    uint32_t i_tmp = 0;
 8015c8a:	2300      	movs	r3, #0
{
 8015c8c:	b083      	sub	sp, #12
    uint32_t i_tmp = 0;
 8015c8e:	9301      	str	r3, [sp, #4]
    if(i == NULL) i = &i_tmp;
 8015c90:	b1e9      	cbz	r1, 8015cce <lv_txt_utf8_next+0x46>
 8015c92:	680a      	ldr	r2, [r1, #0]
 8015c94:	1883      	adds	r3, r0, r2
 8015c96:	1c54      	adds	r4, r2, #1

    /*Normal ASCII*/
    if((txt[*i] & 0x80) == 0) {
 8015c98:	f993 5000 	ldrsb.w	r5, [r3]
 8015c9c:	781b      	ldrb	r3, [r3, #0]
 8015c9e:	2d00      	cmp	r5, #0
 8015ca0:	db04      	blt.n	8015cac <lv_txt_utf8_next+0x24>
        result = txt[*i];
 8015ca2:	4618      	mov	r0, r3
        (*i)++;
 8015ca4:	600c      	str	r4, [r1, #0]
        else {
            (*i)++; /*Not UTF-8 char. Go the next.*/
        }
    }
    return result;
}
 8015ca6:	b003      	add	sp, #12
 8015ca8:	bc70      	pop	{r4, r5, r6}
 8015caa:	4770      	bx	lr
        if((txt[*i] & 0xE0) == 0xC0) {
 8015cac:	f003 05e0 	and.w	r5, r3, #224	; 0xe0
 8015cb0:	2dc0      	cmp	r5, #192	; 0xc0
 8015cb2:	d034      	beq.n	8015d1e <lv_txt_utf8_next+0x96>
        else if((txt[*i] & 0xF0) == 0xE0) {
 8015cb4:	f003 05f0 	and.w	r5, r3, #240	; 0xf0
 8015cb8:	2de0      	cmp	r5, #224	; 0xe0
 8015cba:	d00d      	beq.n	8015cd8 <lv_txt_utf8_next+0x50>
        else if((txt[*i] & 0xF8) == 0xF0) {
 8015cbc:	f003 05f8 	and.w	r5, r3, #248	; 0xf8
 8015cc0:	2df0      	cmp	r5, #240	; 0xf0
 8015cc2:	d022      	beq.n	8015d0a <lv_txt_utf8_next+0x82>
    uint32_t result = 0;
 8015cc4:	2000      	movs	r0, #0
            (*i)++; /*Not UTF-8 char. Go the next.*/
 8015cc6:	600c      	str	r4, [r1, #0]
}
 8015cc8:	b003      	add	sp, #12
 8015cca:	bc70      	pop	{r4, r5, r6}
 8015ccc:	4770      	bx	lr
 8015cce:	460a      	mov	r2, r1
 8015cd0:	4603      	mov	r3, r0
 8015cd2:	2401      	movs	r4, #1
    if(i == NULL) i = &i_tmp;
 8015cd4:	a901      	add	r1, sp, #4
 8015cd6:	e7df      	b.n	8015c98 <lv_txt_utf8_next+0x10>
            (*i)++;
 8015cd8:	600c      	str	r4, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 8015cda:	5d04      	ldrb	r4, [r0, r4]
 8015cdc:	f004 05c0 	and.w	r5, r4, #192	; 0xc0
 8015ce0:	2d80      	cmp	r5, #128	; 0x80
 8015ce2:	d118      	bne.n	8015d16 <lv_txt_utf8_next+0x8e>
            (*i)++;
 8015ce4:	1c95      	adds	r5, r2, #2
 8015ce6:	600d      	str	r5, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 8015ce8:	5d45      	ldrb	r5, [r0, r5]
 8015cea:	f005 00c0 	and.w	r0, r5, #192	; 0xc0
 8015cee:	2880      	cmp	r0, #128	; 0x80
 8015cf0:	d111      	bne.n	8015d16 <lv_txt_utf8_next+0x8e>
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
 8015cf2:	01a0      	lsls	r0, r4, #6
            result += (txt[*i] & 0x3F);
 8015cf4:	f005 053f 	and.w	r5, r5, #63	; 0x3f
            result = (uint32_t)(txt[*i] & 0x0F) << 12;
 8015cf8:	031b      	lsls	r3, r3, #12
            (*i)++;
 8015cfa:	3203      	adds	r2, #3
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
 8015cfc:	f400 607c 	and.w	r0, r0, #4032	; 0xfc0
            result = (uint32_t)(txt[*i] & 0x0F) << 12;
 8015d00:	b29b      	uxth	r3, r3
            (*i)++;
 8015d02:	600a      	str	r2, [r1, #0]
            result += (txt[*i] & 0x3F);
 8015d04:	4428      	add	r0, r5
 8015d06:	4418      	add	r0, r3
            (*i)++;
 8015d08:	e7cd      	b.n	8015ca6 <lv_txt_utf8_next+0x1e>
            (*i)++;
 8015d0a:	600c      	str	r4, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 8015d0c:	5d04      	ldrb	r4, [r0, r4]
 8015d0e:	f004 05c0 	and.w	r5, r4, #192	; 0xc0
 8015d12:	2d80      	cmp	r5, #128	; 0x80
 8015d14:	d012      	beq.n	8015d3c <lv_txt_utf8_next+0xb4>
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 8015d16:	2000      	movs	r0, #0
}
 8015d18:	b003      	add	sp, #12
 8015d1a:	bc70      	pop	{r4, r5, r6}
 8015d1c:	4770      	bx	lr
            (*i)++;
 8015d1e:	600c      	str	r4, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 8015d20:	5d00      	ldrb	r0, [r0, r4]
 8015d22:	f000 04c0 	and.w	r4, r0, #192	; 0xc0
 8015d26:	2c80      	cmp	r4, #128	; 0x80
 8015d28:	d1f5      	bne.n	8015d16 <lv_txt_utf8_next+0x8e>
            result = (uint32_t)(txt[*i] & 0x1F) << 6;
 8015d2a:	019b      	lsls	r3, r3, #6
            result += (txt[*i] & 0x3F);
 8015d2c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
            (*i)++;
 8015d30:	3202      	adds	r2, #2
            result = (uint32_t)(txt[*i] & 0x1F) << 6;
 8015d32:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
            (*i)++;
 8015d36:	600a      	str	r2, [r1, #0]
            result += (txt[*i] & 0x3F);
 8015d38:	4418      	add	r0, r3
            (*i)++;
 8015d3a:	e7b4      	b.n	8015ca6 <lv_txt_utf8_next+0x1e>
            (*i)++;
 8015d3c:	1c95      	adds	r5, r2, #2
 8015d3e:	600d      	str	r5, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 8015d40:	5d45      	ldrb	r5, [r0, r5]
 8015d42:	f005 06c0 	and.w	r6, r5, #192	; 0xc0
 8015d46:	2e80      	cmp	r6, #128	; 0x80
 8015d48:	d1e5      	bne.n	8015d16 <lv_txt_utf8_next+0x8e>
            (*i)++;
 8015d4a:	1cd6      	adds	r6, r2, #3
 8015d4c:	600e      	str	r6, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 8015d4e:	5d80      	ldrb	r0, [r0, r6]
 8015d50:	f000 06c0 	and.w	r6, r0, #192	; 0xc0
 8015d54:	2e80      	cmp	r6, #128	; 0x80
 8015d56:	d1de      	bne.n	8015d16 <lv_txt_utf8_next+0x8e>
            result += txt[*i] & 0x3F;
 8015d58:	f000 063f 	and.w	r6, r0, #63	; 0x3f
            result = (uint32_t)(txt[*i] & 0x07) << 18;
 8015d5c:	049b      	lsls	r3, r3, #18
            result += (uint32_t)(txt[*i] & 0x3F) << 12;
 8015d5e:	0320      	lsls	r0, r4, #12
            (*i)++;
 8015d60:	3204      	adds	r2, #4
            result = (uint32_t)(txt[*i] & 0x07) << 18;
 8015d62:	f403 13e0 	and.w	r3, r3, #1835008	; 0x1c0000
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
 8015d66:	01ad      	lsls	r5, r5, #6
            result += (uint32_t)(txt[*i] & 0x3F) << 12;
 8015d68:	f400 307c 	and.w	r0, r0, #258048	; 0x3f000
            (*i)++;
 8015d6c:	600a      	str	r2, [r1, #0]
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
 8015d6e:	f405 627c 	and.w	r2, r5, #4032	; 0xfc0
            result += (uint32_t)(txt[*i] & 0x3F) << 12;
 8015d72:	4303      	orrs	r3, r0
 8015d74:	4413      	add	r3, r2
            result += txt[*i] & 0x3F;
 8015d76:	18f0      	adds	r0, r6, r3
            (*i)++;
 8015d78:	e795      	b.n	8015ca6 <lv_txt_utf8_next+0x1e>
 8015d7a:	bf00      	nop

08015d7c <lv_txt_utf8_get_char_id>:
 * @param txt a '\0' terminated UTF-8 string
 * @param byte_id byte index
 * @return character index of the letter at 'byte_id'th position
 */
static uint32_t lv_txt_utf8_get_char_id(const char * txt, uint32_t byte_id)
{
 8015d7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint32_t i        = 0;
 8015d7e:	2400      	movs	r4, #0
{
 8015d80:	b083      	sub	sp, #12
    uint32_t char_cnt = 0;

    while(i < byte_id) {
 8015d82:	460d      	mov	r5, r1
    uint32_t i        = 0;
 8015d84:	9401      	str	r4, [sp, #4]
    while(i < byte_id) {
 8015d86:	b161      	cbz	r1, 8015da2 <lv_txt_utf8_get_char_id+0x26>
 8015d88:	4606      	mov	r6, r0
 8015d8a:	4f08      	ldr	r7, [pc, #32]	; (8015dac <lv_txt_utf8_get_char_id+0x30>)
        _lv_txt_encoded_next(txt, &i); /*'i' points to the next letter so use the prev. value*/
 8015d8c:	683b      	ldr	r3, [r7, #0]
 8015d8e:	a901      	add	r1, sp, #4
 8015d90:	4630      	mov	r0, r6
        char_cnt++;
 8015d92:	3401      	adds	r4, #1
        _lv_txt_encoded_next(txt, &i); /*'i' points to the next letter so use the prev. value*/
 8015d94:	4798      	blx	r3
    while(i < byte_id) {
 8015d96:	9b01      	ldr	r3, [sp, #4]
 8015d98:	42ab      	cmp	r3, r5
 8015d9a:	d3f7      	bcc.n	8015d8c <lv_txt_utf8_get_char_id+0x10>
    }

    return char_cnt;
}
 8015d9c:	4620      	mov	r0, r4
 8015d9e:	b003      	add	sp, #12
 8015da0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint32_t char_cnt = 0;
 8015da2:	460c      	mov	r4, r1
}
 8015da4:	4620      	mov	r0, r4
 8015da6:	b003      	add	sp, #12
 8015da8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015daa:	bf00      	nop
 8015dac:	20000048 	.word	0x20000048

08015db0 <_lv_txt_get_width.part.0>:
lv_coord_t _lv_txt_get_width(const char * txt, uint32_t length, const lv_font_t * font, lv_coord_t letter_space,
 8015db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t i                   = 0;
 8015db4:	2400      	movs	r4, #0
lv_coord_t _lv_txt_get_width(const char * txt, uint32_t length, const lv_font_t * font, lv_coord_t letter_space,
 8015db6:	b085      	sub	sp, #20
    if(length != 0) {
 8015db8:	460f      	mov	r7, r1
lv_coord_t _lv_txt_get_width(const char * txt, uint32_t length, const lv_font_t * font, lv_coord_t letter_space,
 8015dba:	9300      	str	r3, [sp, #0]
    uint32_t i                   = 0;
 8015dbc:	9403      	str	r4, [sp, #12]
lv_coord_t _lv_txt_get_width(const char * txt, uint32_t length, const lv_font_t * font, lv_coord_t letter_space,
 8015dbe:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    if(length != 0) {
 8015dc2:	2900      	cmp	r1, #0
 8015dc4:	d03d      	beq.n	8015e42 <_lv_txt_get_width.part.0+0x92>
        while(i < length) {
 8015dc6:	f013 0301 	ands.w	r3, r3, #1
 8015dca:	4605      	mov	r5, r0
 8015dcc:	4691      	mov	r9, r2
 8015dce:	9301      	str	r3, [sp, #4]
 8015dd0:	d045      	beq.n	8015e5e <_lv_txt_get_width.part.0+0xae>
 8015dd2:	f10d 0a0c 	add.w	sl, sp, #12
 8015dd6:	4e32      	ldr	r6, [pc, #200]	; (8015ea0 <_lv_txt_get_width.part.0+0xf0>)
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
 8015dd8:	46a3      	mov	fp, r4
 8015dda:	e010      	b.n	8015dfe <_lv_txt_get_width.part.0+0x4e>
    if(*state == LV_TXT_CMD_STATE_PAR) {
 8015ddc:	f1bb 0f01 	cmp.w	fp, #1
 8015de0:	d034      	beq.n	8015e4c <_lv_txt_get_width.part.0+0x9c>
            lv_coord_t char_width = lv_font_get_glyph_width(font, letter, letter_next);
 8015de2:	4641      	mov	r1, r8
 8015de4:	4648      	mov	r0, r9
 8015de6:	f7fc fcdb 	bl	80127a0 <lv_font_get_glyph_width>
            if(char_width > 0) {
 8015dea:	b203      	sxth	r3, r0
 8015dec:	2b00      	cmp	r3, #0
 8015dee:	dd03      	ble.n	8015df8 <_lv_txt_get_width.part.0+0x48>
                width += letter_space;
 8015df0:	9b00      	ldr	r3, [sp, #0]
 8015df2:	441c      	add	r4, r3
 8015df4:	4404      	add	r4, r0
 8015df6:	b224      	sxth	r4, r4
        while(i < length) {
 8015df8:	9b03      	ldr	r3, [sp, #12]
 8015dfa:	429f      	cmp	r7, r3
 8015dfc:	d918      	bls.n	8015e30 <_lv_txt_get_width.part.0+0x80>
            uint32_t letter      = _lv_txt_encoded_next(txt, &i);
 8015dfe:	6833      	ldr	r3, [r6, #0]
 8015e00:	4651      	mov	r1, sl
 8015e02:	4628      	mov	r0, r5
 8015e04:	4798      	blx	r3
            uint32_t letter_next = _lv_txt_encoded_next(&txt[i], NULL);
 8015e06:	9b03      	ldr	r3, [sp, #12]
            uint32_t letter      = _lv_txt_encoded_next(txt, &i);
 8015e08:	4680      	mov	r8, r0
            uint32_t letter_next = _lv_txt_encoded_next(&txt[i], NULL);
 8015e0a:	6832      	ldr	r2, [r6, #0]
 8015e0c:	2100      	movs	r1, #0
 8015e0e:	18e8      	adds	r0, r5, r3
 8015e10:	4790      	blx	r2
    if(c == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 8015e12:	f1b8 0f23 	cmp.w	r8, #35	; 0x23
            uint32_t letter_next = _lv_txt_encoded_next(&txt[i], NULL);
 8015e16:	4602      	mov	r2, r0
    if(c == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 8015e18:	d1e0      	bne.n	8015ddc <_lv_txt_get_width.part.0+0x2c>
        if(*state == LV_TXT_CMD_STATE_WAIT) { /*Start char*/
 8015e1a:	f1bb 0f00 	cmp.w	fp, #0
 8015e1e:	d01b      	beq.n	8015e58 <_lv_txt_get_width.part.0+0xa8>
        else if(*state == LV_TXT_CMD_STATE_PAR) {
 8015e20:	f1bb 0f01 	cmp.w	fp, #1
            *state = LV_TXT_CMD_STATE_WAIT;
 8015e24:	f04f 0b00 	mov.w	fp, #0
        else if(*state == LV_TXT_CMD_STATE_PAR) {
 8015e28:	d0db      	beq.n	8015de2 <_lv_txt_get_width.part.0+0x32>
        while(i < length) {
 8015e2a:	9b03      	ldr	r3, [sp, #12]
 8015e2c:	429f      	cmp	r7, r3
 8015e2e:	d8e6      	bhi.n	8015dfe <_lv_txt_get_width.part.0+0x4e>
        if(width > 0) {
 8015e30:	2c00      	cmp	r4, #0
 8015e32:	dd07      	ble.n	8015e44 <_lv_txt_get_width.part.0+0x94>
            width -= letter_space; /*Trim the last letter space. Important if the text is center
 8015e34:	9b00      	ldr	r3, [sp, #0]
 8015e36:	1ae4      	subs	r4, r4, r3
 8015e38:	b224      	sxth	r4, r4
}
 8015e3a:	4620      	mov	r0, r4
 8015e3c:	b005      	add	sp, #20
 8015e3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_coord_t width             = 0;
 8015e42:	460c      	mov	r4, r1
}
 8015e44:	4620      	mov	r0, r4
 8015e46:	b005      	add	sp, #20
 8015e48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            *state = LV_TXT_CMD_STATE_IN; /*After the parameter the text is in the command*/
 8015e4c:	f1b8 0f20 	cmp.w	r8, #32
 8015e50:	bf08      	it	eq
 8015e52:	f04f 0b02 	moveq.w	fp, #2
 8015e56:	e7cf      	b.n	8015df8 <_lv_txt_get_width.part.0+0x48>
 8015e58:	f8dd b004 	ldr.w	fp, [sp, #4]
 8015e5c:	e7cc      	b.n	8015df8 <_lv_txt_get_width.part.0+0x48>
    lv_coord_t width             = 0;
 8015e5e:	461c      	mov	r4, r3
 8015e60:	f10d 0a0c 	add.w	sl, sp, #12
 8015e64:	4e0e      	ldr	r6, [pc, #56]	; (8015ea0 <_lv_txt_get_width.part.0+0xf0>)
 8015e66:	f8dd 8000 	ldr.w	r8, [sp]
            uint32_t letter      = _lv_txt_encoded_next(txt, &i);
 8015e6a:	6833      	ldr	r3, [r6, #0]
 8015e6c:	4651      	mov	r1, sl
 8015e6e:	4628      	mov	r0, r5
 8015e70:	4798      	blx	r3
            uint32_t letter_next = _lv_txt_encoded_next(&txt[i], NULL);
 8015e72:	9a03      	ldr	r2, [sp, #12]
            uint32_t letter      = _lv_txt_encoded_next(txt, &i);
 8015e74:	4683      	mov	fp, r0
            uint32_t letter_next = _lv_txt_encoded_next(&txt[i], NULL);
 8015e76:	6833      	ldr	r3, [r6, #0]
 8015e78:	2100      	movs	r1, #0
 8015e7a:	18a8      	adds	r0, r5, r2
 8015e7c:	4798      	blx	r3
            lv_coord_t char_width = lv_font_get_glyph_width(font, letter, letter_next);
 8015e7e:	4659      	mov	r1, fp
            uint32_t letter_next = _lv_txt_encoded_next(&txt[i], NULL);
 8015e80:	4602      	mov	r2, r0
            lv_coord_t char_width = lv_font_get_glyph_width(font, letter, letter_next);
 8015e82:	4648      	mov	r0, r9
 8015e84:	f7fc fc8c 	bl	80127a0 <lv_font_get_glyph_width>
                width += letter_space;
 8015e88:	eb00 0308 	add.w	r3, r0, r8
            if(char_width > 0) {
 8015e8c:	b200      	sxth	r0, r0
                width += letter_space;
 8015e8e:	4423      	add	r3, r4
            if(char_width > 0) {
 8015e90:	2800      	cmp	r0, #0
                width += letter_space;
 8015e92:	bfc8      	it	gt
 8015e94:	b21c      	sxthgt	r4, r3
        while(i < length) {
 8015e96:	9b03      	ldr	r3, [sp, #12]
 8015e98:	429f      	cmp	r7, r3
 8015e9a:	d8e6      	bhi.n	8015e6a <_lv_txt_get_width.part.0+0xba>
 8015e9c:	e7c8      	b.n	8015e30 <_lv_txt_get_width.part.0+0x80>
 8015e9e:	bf00      	nop
 8015ea0:	20000048 	.word	0x20000048

08015ea4 <_lv_txt_get_next_line>:
{
 8015ea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ea8:	ed2d 8b02 	vpush	{d8}
 8015eac:	b08f      	sub	sp, #60	; 0x3c
 8015eae:	e9cd 3201 	strd	r3, r2, [sp, #4]
    if(txt == NULL) return 0;
 8015eb2:	9005      	str	r0, [sp, #20]
{
 8015eb4:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
    if(font == NULL) return 0;
 8015eb8:	2800      	cmp	r0, #0
 8015eba:	f000 811e 	beq.w	80160fa <_lv_txt_get_next_line+0x256>
 8015ebe:	fab1 f281 	clz	r2, r1
 8015ec2:	0952      	lsrs	r2, r2, #5
 8015ec4:	2900      	cmp	r1, #0
 8015ec6:	f000 8118 	beq.w	80160fa <_lv_txt_get_next_line+0x256>
    if((flag & LV_TXT_FLAG_EXPAND) || (flag & LV_TXT_FLAG_FIT)) {
 8015eca:	ee08 1a10 	vmov	s16, r1
 8015ece:	f013 0112 	ands.w	r1, r3, #18
 8015ed2:	f040 80b7 	bne.w	8016044 <_lv_txt_get_next_line+0x1a0>
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 8015ed6:	f013 0002 	ands.w	r0, r3, #2
 8015eda:	f647 4218 	movw	r2, #31768	; 0x7c18
 8015ede:	f003 0301 	and.w	r3, r3, #1
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
 8015ee2:	4689      	mov	r9, r1
    while(txt[i] != '\0' && max_width > 0) {
 8015ee4:	468b      	mov	fp, r1
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 8015ee6:	9009      	str	r0, [sp, #36]	; 0x24
 8015ee8:	9303      	str	r3, [sp, #12]
 8015eea:	9b01      	ldr	r3, [sp, #4]
 8015eec:	bf18      	it	ne
 8015eee:	4613      	movne	r3, r2
    uint32_t i = 0;                                        /* Iterating index into txt */
 8015ef0:	910b      	str	r1, [sp, #44]	; 0x2c
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 8015ef2:	9301      	str	r3, [sp, #4]
    while(txt[i] != '\0' && max_width > 0) {
 8015ef4:	9b05      	ldr	r3, [sp, #20]
 8015ef6:	781b      	ldrb	r3, [r3, #0]
 8015ef8:	2b00      	cmp	r3, #0
 8015efa:	f000 8093 	beq.w	8016024 <_lv_txt_get_next_line+0x180>
 8015efe:	9b01      	ldr	r3, [sp, #4]
 8015f00:	2b00      	cmp	r3, #0
 8015f02:	f340 808f 	ble.w	8016024 <_lv_txt_get_next_line+0x180>
 8015f06:	9c05      	ldr	r4, [sp, #20]
 8015f08:	461d      	mov	r5, r3
    uint32_t i = 0, i_next = 0, i_next_next = 0;  /* Iterating index into txt */
 8015f0a:	2700      	movs	r7, #0
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 8015f0c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8015f0e:	f647 4218 	movw	r2, #31768	; 0x7c18
    while(txt[i] != '\0' && max_width > 0) {
 8015f12:	eb04 0a0b 	add.w	sl, r4, fp
    letter = _lv_txt_encoded_next(txt, &i_next);
 8015f16:	4b81      	ldr	r3, [pc, #516]	; (801611c <_lv_txt_get_next_line+0x278>)
 8015f18:	a90c      	add	r1, sp, #48	; 0x30
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 8015f1a:	42be      	cmp	r6, r7
 8015f1c:	bf08      	it	eq
 8015f1e:	462a      	moveq	r2, r5
    letter = _lv_txt_encoded_next(txt, &i_next);
 8015f20:	4650      	mov	r0, sl
 8015f22:	681b      	ldr	r3, [r3, #0]
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 8015f24:	9207      	str	r2, [sp, #28]
    uint32_t i = 0, i_next = 0, i_next_next = 0;  /* Iterating index into txt */
 8015f26:	e9cd 770c 	strd	r7, r7, [sp, #48]	; 0x30
    letter = _lv_txt_encoded_next(txt, &i_next);
 8015f2a:	4798      	blx	r3
    i_next_next = i_next;
 8015f2c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    while(txt[i] != '\0') {
 8015f2e:	f814 300b 	ldrb.w	r3, [r4, fp]
    letter = _lv_txt_encoded_next(txt, &i_next);
 8015f32:	4602      	mov	r2, r0
    i_next_next = i_next;
 8015f34:	950d      	str	r5, [sp, #52]	; 0x34
    while(txt[i] != '\0') {
 8015f36:	2b00      	cmp	r3, #0
 8015f38:	f000 80e7 	beq.w	801610a <_lv_txt_get_next_line+0x266>
    uint32_t word_len = 0;   /* Number of characters in the transversed word */
 8015f3c:	f8cd b018 	str.w	fp, [sp, #24]
    uint32_t break_index = NO_BREAK_FOUND; /* only used for "long" words */
 8015f40:	f04f 35ff 	mov.w	r5, #4294967295
    uint32_t i = 0, i_next = 0, i_next_next = 0;  /* Iterating index into txt */
 8015f44:	46b8      	mov	r8, r7
    lv_coord_t cur_w = 0;  /* Pixel Width of transversed string */
 8015f46:	463c      	mov	r4, r7
    uint32_t word_len = 0;   /* Number of characters in the transversed word */
 8015f48:	46bb      	mov	fp, r7
        letter_next = _lv_txt_encoded_next(txt, &i_next_next);
 8015f4a:	4b74      	ldr	r3, [pc, #464]	; (801611c <_lv_txt_get_next_line+0x278>)
 8015f4c:	a90d      	add	r1, sp, #52	; 0x34
 8015f4e:	4650      	mov	r0, sl
 8015f50:	4616      	mov	r6, r2
 8015f52:	681b      	ldr	r3, [r3, #0]
 8015f54:	4798      	blx	r3
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 8015f56:	9b03      	ldr	r3, [sp, #12]
 8015f58:	f8cd b020 	str.w	fp, [sp, #32]
        letter_next = _lv_txt_encoded_next(txt, &i_next_next);
 8015f5c:	4602      	mov	r2, r0
        word_len++;
 8015f5e:	f10b 0b01 	add.w	fp, fp, #1
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 8015f62:	b133      	cbz	r3, 8015f72 <_lv_txt_get_next_line+0xce>
    if(c == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 8015f64:	2e23      	cmp	r6, #35	; 0x23
 8015f66:	f000 80aa 	beq.w	80160be <_lv_txt_get_next_line+0x21a>
    if(*state == LV_TXT_CMD_STATE_PAR) {
 8015f6a:	f1b9 0f01 	cmp.w	r9, #1
 8015f6e:	f000 80b8 	beq.w	80160e2 <_lv_txt_get_next_line+0x23e>
        letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 8015f72:	4631      	mov	r1, r6
 8015f74:	ee18 0a10 	vmov	r0, s16
 8015f78:	9204      	str	r2, [sp, #16]
 8015f7a:	f7fc fc11 	bl	80127a0 <lv_font_get_glyph_width>
        cur_w += letter_w;
 8015f7e:	4404      	add	r4, r0
        if(letter_w > 0) {
 8015f80:	b200      	sxth	r0, r0
 8015f82:	9a04      	ldr	r2, [sp, #16]
 8015f84:	2800      	cmp	r0, #0
        cur_w += letter_w;
 8015f86:	b2a4      	uxth	r4, r4
        if(letter_w > 0) {
 8015f88:	dd02      	ble.n	8015f90 <_lv_txt_get_next_line+0xec>
            cur_w += letter_space;
 8015f8a:	9b02      	ldr	r3, [sp, #8]
 8015f8c:	441c      	add	r4, r3
 8015f8e:	b2a4      	uxth	r4, r4
        if(break_index == NO_BREAK_FOUND && (cur_w - letter_space) > max_width) {
 8015f90:	1c69      	adds	r1, r5, #1
 8015f92:	b224      	sxth	r4, r4
 8015f94:	d105      	bne.n	8015fa2 <_lv_txt_get_next_line+0xfe>
 8015f96:	9b02      	ldr	r3, [sp, #8]
 8015f98:	9907      	ldr	r1, [sp, #28]
 8015f9a:	1ae3      	subs	r3, r4, r3
 8015f9c:	428b      	cmp	r3, r1
 8015f9e:	bfc8      	it	gt
 8015fa0:	4645      	movgt	r5, r8
        if(letter == '\n' || letter == '\r' || is_break_char(letter)) {
 8015fa2:	2e0a      	cmp	r6, #10
 8015fa4:	d00f      	beq.n	8015fc6 <_lv_txt_get_next_line+0x122>
 8015fa6:	f1a6 030d 	sub.w	r3, r6, #13
 8015faa:	fab3 f383 	clz	r3, r3
 8015fae:	095b      	lsrs	r3, r3, #5
 8015fb0:	b94b      	cbnz	r3, 8015fc6 <_lv_txt_get_next_line+0x122>
{
    uint8_t i;
    bool ret = false;

    /*Compare the letter to TXT_BREAK_CHARS*/
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
 8015fb2:	2120      	movs	r1, #32
 8015fb4:	e003      	b.n	8015fbe <_lv_txt_get_next_line+0x11a>
 8015fb6:	495a      	ldr	r1, [pc, #360]	; (8016120 <_lv_txt_get_next_line+0x27c>)
 8015fb8:	5cc9      	ldrb	r1, [r1, r3]
 8015fba:	2900      	cmp	r1, #0
 8015fbc:	d05c      	beq.n	8016078 <_lv_txt_get_next_line+0x1d4>
 8015fbe:	3301      	adds	r3, #1
        if(letter == (uint32_t)LV_TXT_BREAK_CHARS[i]) {
 8015fc0:	42b1      	cmp	r1, r6
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
 8015fc2:	b2db      	uxtb	r3, r3
        if(letter == (uint32_t)LV_TXT_BREAK_CHARS[i]) {
 8015fc4:	d1f7      	bne.n	8015fb6 <_lv_txt_get_next_line+0x112>
            if(i == 0 && break_index == NO_BREAK_FOUND && word_w_ptr != NULL) *word_w_ptr = cur_w;
 8015fc6:	f8dd b018 	ldr.w	fp, [sp, #24]
 8015fca:	f1b8 0f00 	cmp.w	r8, #0
 8015fce:	f040 8092 	bne.w	80160f6 <_lv_txt_get_next_line+0x252>
 8015fd2:	1c68      	adds	r0, r5, #1
 8015fd4:	f040 808f 	bne.w	80160f6 <_lv_txt_get_next_line+0x252>
 8015fd8:	4627      	mov	r7, r4
 8015fda:	2500      	movs	r5, #0
        if(word_len == 0 || (letter == '\r' && letter_next == '\n')) i = i_next;
 8015fdc:	9b08      	ldr	r3, [sp, #32]
 8015fde:	b2bf      	uxth	r7, r7
 8015fe0:	b11b      	cbz	r3, 8015fea <_lv_txt_get_next_line+0x146>
 8015fe2:	2e0d      	cmp	r6, #13
 8015fe4:	d102      	bne.n	8015fec <_lv_txt_get_next_line+0x148>
 8015fe6:	2a0a      	cmp	r2, #10
 8015fe8:	d100      	bne.n	8015fec <_lv_txt_get_next_line+0x148>
 8015fea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
        max_width -= word_w;
 8015fec:	9b01      	ldr	r3, [sp, #4]
 8015fee:	1bdf      	subs	r7, r3, r7
 8015ff0:	b23b      	sxth	r3, r7
 8015ff2:	9301      	str	r3, [sp, #4]
        if(advance == 0) {
 8015ff4:	2d00      	cmp	r5, #0
 8015ff6:	d055      	beq.n	80160a4 <_lv_txt_get_next_line+0x200>
        if(txt[0] == '\n' || txt[0] == '\r') break;
 8015ff8:	9905      	ldr	r1, [sp, #20]
        i += advance;
 8015ffa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
        if(txt[0] == '\n' || txt[0] == '\r') break;
 8015ffc:	780b      	ldrb	r3, [r1, #0]
        i += advance;
 8015ffe:	eb05 0b02 	add.w	fp, r5, r2
        if(txt[0] == '\n' || txt[0] == '\r') break;
 8016002:	2b0a      	cmp	r3, #10
        i += advance;
 8016004:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
        if(txt[0] == '\n' || txt[0] == '\r') break;
 8016008:	d00c      	beq.n	8016024 <_lv_txt_get_next_line+0x180>
 801600a:	2b0d      	cmp	r3, #13
 801600c:	d00a      	beq.n	8016024 <_lv_txt_get_next_line+0x180>
        if(txt[i] == '\n' || txt[i] == '\r') {
 801600e:	f811 300b 	ldrb.w	r3, [r1, fp]
 8016012:	2b0a      	cmp	r3, #10
 8016014:	d002      	beq.n	801601c <_lv_txt_get_next_line+0x178>
 8016016:	2b0d      	cmp	r3, #13
 8016018:	f47f af6e 	bne.w	8015ef8 <_lv_txt_get_next_line+0x54>
            i++;  /* Include the following newline in the current line */
 801601c:	f10b 0b01 	add.w	fp, fp, #1
 8016020:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
    if(i == 0) {
 8016024:	f1bb 0f00 	cmp.w	fp, #0
 8016028:	d106      	bne.n	8016038 <_lv_txt_get_next_line+0x194>
        _lv_txt_encoded_next(txt, &i);
 801602a:	4b3c      	ldr	r3, [pc, #240]	; (801611c <_lv_txt_get_next_line+0x278>)
 801602c:	a90b      	add	r1, sp, #44	; 0x2c
 801602e:	9805      	ldr	r0, [sp, #20]
 8016030:	681b      	ldr	r3, [r3, #0]
 8016032:	4798      	blx	r3
 8016034:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
}
 8016038:	4658      	mov	r0, fp
 801603a:	b00f      	add	sp, #60	; 0x3c
 801603c:	ecbd 8b02 	vpop	{d8}
 8016040:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        for(i = 0; txt[i] != '\n' && txt[i] != '\r' && txt[i] != '\0'; i++) {
 8016044:	7803      	ldrb	r3, [r0, #0]
 8016046:	2b0a      	cmp	r3, #10
 8016048:	d061      	beq.n	801610e <_lv_txt_get_next_line+0x26a>
 801604a:	2b0d      	cmp	r3, #13
 801604c:	d05f      	beq.n	801610e <_lv_txt_get_next_line+0x26a>
 801604e:	4693      	mov	fp, r2
 8016050:	2b00      	cmp	r3, #0
 8016052:	d0f1      	beq.n	8016038 <_lv_txt_get_next_line+0x194>
 8016054:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8016058:	f10b 0b01 	add.w	fp, fp, #1
 801605c:	2b0a      	cmp	r3, #10
 801605e:	d001      	beq.n	8016064 <_lv_txt_get_next_line+0x1c0>
 8016060:	2b0d      	cmp	r3, #13
 8016062:	d1f5      	bne.n	8016050 <_lv_txt_get_next_line+0x1ac>
        if(txt[i] != '\0') i++;    /*To go beyond `\n`*/
 8016064:	2b00      	cmp	r3, #0
 8016066:	d0e7      	beq.n	8016038 <_lv_txt_get_next_line+0x194>
 8016068:	f10b 0b01 	add.w	fp, fp, #1
}
 801606c:	4658      	mov	r0, fp
 801606e:	b00f      	add	sp, #60	; 0x3c
 8016070:	ecbd 8b02 	vpop	{d8}
 8016074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        i_next = i_next_next;
 8016078:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        if(word_w_ptr != NULL && break_index == NO_BREAK_FOUND) *word_w_ptr = cur_w;
 801607a:	f1b5 3fff 	cmp.w	r5, #4294967295
 801607e:	bf08      	it	eq
 8016080:	4627      	moveq	r7, r4
        i = i_next;
 8016082:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
        i_next = i_next_next;
 8016086:	930c      	str	r3, [sp, #48]	; 0x30
    while(txt[i] != '\0') {
 8016088:	f81a 3008 	ldrb.w	r3, [sl, r8]
 801608c:	2b00      	cmp	r3, #0
 801608e:	f47f af5c 	bne.w	8015f4a <_lv_txt_get_next_line+0xa6>
 8016092:	465b      	mov	r3, fp
        letter_next = _lv_txt_encoded_next(txt, &i_next_next);
 8016094:	4616      	mov	r6, r2
 8016096:	f8dd b018 	ldr.w	fp, [sp, #24]
    if(break_index == NO_BREAK_FOUND) {
 801609a:	1c69      	adds	r1, r5, #1
 801609c:	d03a      	beq.n	8016114 <_lv_txt_get_next_line+0x270>
    if(force) return break_index;
 801609e:	f1bb 0f00 	cmp.w	fp, #0
 80160a2:	d026      	beq.n	80160f2 <_lv_txt_get_next_line+0x24e>
            if(i == 0) _lv_txt_encoded_next(txt, &i); // prevent inf loops
 80160a4:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 80160a8:	f1bb 0f00 	cmp.w	fp, #0
 80160ac:	d1c4      	bne.n	8016038 <_lv_txt_get_next_line+0x194>
 80160ae:	4b1b      	ldr	r3, [pc, #108]	; (801611c <_lv_txt_get_next_line+0x278>)
 80160b0:	a90b      	add	r1, sp, #44	; 0x2c
 80160b2:	9805      	ldr	r0, [sp, #20]
 80160b4:	681b      	ldr	r3, [r3, #0]
 80160b6:	4798      	blx	r3
 80160b8:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 80160bc:	e7b2      	b.n	8016024 <_lv_txt_get_next_line+0x180>
        if(*state == LV_TXT_CMD_STATE_WAIT) { /*Start char*/
 80160be:	f1b9 0f00 	cmp.w	r9, #0
 80160c2:	d00c      	beq.n	80160de <_lv_txt_get_next_line+0x23a>
        else if(*state == LV_TXT_CMD_STATE_PAR) {
 80160c4:	f1b9 0f01 	cmp.w	r9, #1
 80160c8:	d010      	beq.n	80160ec <_lv_txt_get_next_line+0x248>
        else if(*state == LV_TXT_CMD_STATE_IN) {
 80160ca:	f1b9 0f02 	cmp.w	r9, #2
 80160ce:	f47f af50 	bne.w	8015f72 <_lv_txt_get_next_line+0xce>
 80160d2:	f04f 0900 	mov.w	r9, #0
                i = i_next;
 80160d6:	e9dd 830c 	ldrd	r8, r3, [sp, #48]	; 0x30
                i_next = i_next_next;
 80160da:	930c      	str	r3, [sp, #48]	; 0x30
                continue;   /*Skip the letter is it is part of a command*/
 80160dc:	e7d4      	b.n	8016088 <_lv_txt_get_next_line+0x1e4>
 80160de:	4699      	mov	r9, r3
 80160e0:	e7f9      	b.n	80160d6 <_lv_txt_get_next_line+0x232>
            *state = LV_TXT_CMD_STATE_IN; /*After the parameter the text is in the command*/
 80160e2:	2e20      	cmp	r6, #32
 80160e4:	bf08      	it	eq
 80160e6:	f04f 0902 	moveq.w	r9, #2
 80160ea:	e7f4      	b.n	80160d6 <_lv_txt_get_next_line+0x232>
 80160ec:	f04f 0900 	mov.w	r9, #0
 80160f0:	e73f      	b.n	8015f72 <_lv_txt_get_next_line+0xce>
 80160f2:	b2bf      	uxth	r7, r7
 80160f4:	e77a      	b.n	8015fec <_lv_txt_get_next_line+0x148>
 80160f6:	9b08      	ldr	r3, [sp, #32]
 80160f8:	e7cf      	b.n	801609a <_lv_txt_get_next_line+0x1f6>
    if(font == NULL) return 0;
 80160fa:	f04f 0b00 	mov.w	fp, #0
}
 80160fe:	4658      	mov	r0, fp
 8016100:	b00f      	add	sp, #60	; 0x3c
 8016102:	ecbd 8b02 	vpop	{d8}
 8016106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    while(txt[i] != '\0') {
 801610a:	461f      	mov	r7, r3
        if(word_len == 0 || (letter == '\r' && letter_next == '\n')) i = i_next;
 801610c:	e76e      	b.n	8015fec <_lv_txt_get_next_line+0x148>
        for(i = 0; txt[i] != '\n' && txt[i] != '\r' && txt[i] != '\0'; i++) {
 801610e:	f04f 0b00 	mov.w	fp, #0
 8016112:	e7a7      	b.n	8016064 <_lv_txt_get_next_line+0x1c0>
 8016114:	4645      	mov	r5, r8
 8016116:	9308      	str	r3, [sp, #32]
 8016118:	e760      	b.n	8015fdc <_lv_txt_get_next_line+0x138>
 801611a:	bf00      	nop
 801611c:	20000048 	.word	0x20000048
 8016120:	08021898 	.word	0x08021898

08016124 <_lv_txt_get_size>:
{
 8016124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016128:	4605      	mov	r5, r0
 801612a:	b089      	sub	sp, #36	; 0x24
    size_res->x = 0;
 801612c:	2000      	movs	r0, #0
    if(font == NULL) return;
 801612e:	4690      	mov	r8, r2
{
 8016130:	f9bd b04c 	ldrsh.w	fp, [sp, #76]	; 0x4c
 8016134:	f9bd 2048 	ldrsh.w	r2, [sp, #72]	; 0x48
 8016138:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    size_res->x = 0;
 801613c:	6028      	str	r0, [r5, #0]
    if(font == NULL) return;
 801613e:	f1b8 0f00 	cmp.w	r8, #0
 8016142:	d046      	beq.n	80161d2 <_lv_txt_get_size+0xae>
 8016144:	fab1 f481 	clz	r4, r1
 8016148:	460f      	mov	r7, r1
 801614a:	0964      	lsrs	r4, r4, #5
 801614c:	2900      	cmp	r1, #0
 801614e:	d040      	beq.n	80161d2 <_lv_txt_get_size+0xae>
    uint16_t letter_height = lv_font_get_line_height(font);
 8016150:	f9b8 1008 	ldrsh.w	r1, [r8, #8]
 8016154:	4699      	mov	r9, r3
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 8016156:	f01a 0f02 	tst.w	sl, #2
 801615a:	f647 4318 	movw	r3, #31768	; 0x7c18
    uint16_t letter_height = lv_font_get_line_height(font);
 801615e:	4608      	mov	r0, r1
 8016160:	9106      	str	r1, [sp, #24]
    while(text[line_start] != '\0') {
 8016162:	7839      	ldrb	r1, [r7, #0]
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 8016164:	bf18      	it	ne
 8016166:	469b      	movne	fp, r3
    uint16_t letter_height = lv_font_get_line_height(font);
 8016168:	b283      	uxth	r3, r0
    while(text[line_start] != '\0') {
 801616a:	2900      	cmp	r1, #0
 801616c:	d044      	beq.n	80161f8 <_lv_txt_get_size+0xd4>
            size_res->y += line_space;
 801616e:	b291      	uxth	r1, r2
 8016170:	441a      	add	r2, r3
    while(text[line_start] != '\0') {
 8016172:	463e      	mov	r6, r7
 8016174:	9705      	str	r7, [sp, #20]
 8016176:	440b      	add	r3, r1
            size_res->y += line_space;
 8016178:	9107      	str	r1, [sp, #28]
 801617a:	9204      	str	r2, [sp, #16]
 801617c:	b29b      	uxth	r3, r3
 801617e:	9303      	str	r3, [sp, #12]
 8016180:	e00d      	b.n	801619e <_lv_txt_get_size+0x7a>
 8016182:	f8a5 c002 	strh.w	ip, [r5, #2]
    if(font == NULL) return 0;
 8016186:	f8cd a000 	str.w	sl, [sp]
 801618a:	f7ff fe11 	bl	8015db0 <_lv_txt_get_width.part.0>
        size_res->x = LV_MATH_MAX(act_line_length, size_res->x);
 801618e:	f9b5 3000 	ldrsh.w	r3, [r5]
 8016192:	4298      	cmp	r0, r3
 8016194:	bfb8      	it	lt
 8016196:	4618      	movlt	r0, r3
 8016198:	8028      	strh	r0, [r5, #0]
    while(text[line_start] != '\0') {
 801619a:	5d3b      	ldrb	r3, [r7, r4]
 801619c:	b1e3      	cbz	r3, 80161d8 <_lv_txt_get_size+0xb4>
        new_line_start += _lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, flag);
 801619e:	465b      	mov	r3, fp
 80161a0:	464a      	mov	r2, r9
 80161a2:	4641      	mov	r1, r8
 80161a4:	4630      	mov	r0, r6
 80161a6:	f8cd a000 	str.w	sl, [sp]
 80161aa:	f7ff fe7b 	bl	8015ea4 <_lv_txt_get_next_line>
            size_res->y += line_space;
 80161ae:	9f03      	ldr	r7, [sp, #12]
        new_line_start += _lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, flag);
 80161b0:	4601      	mov	r1, r0
 80161b2:	4630      	mov	r0, r6
        if((unsigned long)size_res->y + (unsigned long)letter_height + (unsigned long)line_space > LV_MAX_OF(lv_coord_t)) {
 80161b4:	f9b5 6002 	ldrsh.w	r6, [r5, #2]
 80161b8:	464b      	mov	r3, r9
        new_line_start += _lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, flag);
 80161ba:	440c      	add	r4, r1
        if((unsigned long)size_res->y + (unsigned long)letter_height + (unsigned long)line_space > LV_MAX_OF(lv_coord_t)) {
 80161bc:	4642      	mov	r2, r8
            size_res->y += line_space;
 80161be:	eb07 0c06 	add.w	ip, r7, r6
        if((unsigned long)size_res->y + (unsigned long)letter_height + (unsigned long)line_space > LV_MAX_OF(lv_coord_t)) {
 80161c2:	9f04      	ldr	r7, [sp, #16]
 80161c4:	443e      	add	r6, r7
    while(text[line_start] != '\0') {
 80161c6:	9f05      	ldr	r7, [sp, #20]
        if((unsigned long)size_res->y + (unsigned long)letter_height + (unsigned long)line_space > LV_MAX_OF(lv_coord_t)) {
 80161c8:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
    while(text[line_start] != '\0') {
 80161cc:	eb07 0604 	add.w	r6, r7, r4
        if((unsigned long)size_res->y + (unsigned long)letter_height + (unsigned long)line_space > LV_MAX_OF(lv_coord_t)) {
 80161d0:	d3d7      	bcc.n	8016182 <_lv_txt_get_size+0x5e>
}
 80161d2:	b009      	add	sp, #36	; 0x24
 80161d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if((line_start != 0) && (text[line_start - 1] == '\n' || text[line_start - 1] == '\r')) {
 80161d8:	b12c      	cbz	r4, 80161e6 <_lv_txt_get_size+0xc2>
 80161da:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80161de:	2b0a      	cmp	r3, #10
 80161e0:	d00f      	beq.n	8016202 <_lv_txt_get_size+0xde>
 80161e2:	2b0d      	cmp	r3, #13
 80161e4:	d00d      	beq.n	8016202 <_lv_txt_get_size+0xde>
    if(size_res->y == 0)
 80161e6:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 80161ea:	b12b      	cbz	r3, 80161f8 <_lv_txt_get_size+0xd4>
        size_res->y -= line_space;
 80161ec:	9a07      	ldr	r2, [sp, #28]
 80161ee:	1a9b      	subs	r3, r3, r2
 80161f0:	806b      	strh	r3, [r5, #2]
}
 80161f2:	b009      	add	sp, #36	; 0x24
 80161f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        size_res->y = letter_height;
 80161f8:	9b06      	ldr	r3, [sp, #24]
 80161fa:	806b      	strh	r3, [r5, #2]
}
 80161fc:	b009      	add	sp, #36	; 0x24
 80161fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        size_res->y += letter_height + line_space;
 8016202:	886b      	ldrh	r3, [r5, #2]
 8016204:	9a03      	ldr	r2, [sp, #12]
 8016206:	441a      	add	r2, r3
 8016208:	b213      	sxth	r3, r2
    if(size_res->y == 0)
 801620a:	2b00      	cmp	r3, #0
 801620c:	d1ee      	bne.n	80161ec <_lv_txt_get_size+0xc8>
 801620e:	e7f3      	b.n	80161f8 <_lv_txt_get_size+0xd4>

08016210 <_lv_txt_get_width>:
{
 8016210:	b430      	push	{r4, r5}
 8016212:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if(font == NULL) return 0;
 8016216:	b120      	cbz	r0, 8016222 <_lv_txt_get_width+0x12>
 8016218:	b11a      	cbz	r2, 8016222 <_lv_txt_get_width+0x12>
 801621a:	9502      	str	r5, [sp, #8]
}
 801621c:	bc30      	pop	{r4, r5}
 801621e:	f7ff bdc7 	b.w	8015db0 <_lv_txt_get_width.part.0>
 8016222:	2000      	movs	r0, #0
 8016224:	bc30      	pop	{r4, r5}
 8016226:	4770      	bx	lr

08016228 <_lv_utils_bsearch>:
 *
 * @return a pointer to a matching item, or NULL if none exists.
 */
void * _lv_utils_bsearch(const void * key, const void * base, uint32_t n, uint32_t size,
                         int32_t (*cmp)(const void * pRef, const void * pElement))
{
 8016228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801622c:	f8dd 9020 	ldr.w	r9, [sp, #32]
    const char * middle;
    int32_t c;

    for(middle = base; n != 0;) {
 8016230:	b19a      	cbz	r2, 801625a <_lv_utils_bsearch+0x32>
 8016232:	4680      	mov	r8, r0
 8016234:	460f      	mov	r7, r1
 8016236:	461e      	mov	r6, r3
 8016238:	4614      	mov	r4, r2
        middle += (n / 2) * size;
 801623a:	0865      	lsrs	r5, r4, #1
        if((c = (*cmp)(key, middle)) > 0) {
 801623c:	4640      	mov	r0, r8
 801623e:	43e4      	mvns	r4, r4
        middle += (n / 2) * size;
 8016240:	fb06 7a05 	mla	sl, r6, r5, r7
        if((c = (*cmp)(key, middle)) > 0) {
 8016244:	f004 0401 	and.w	r4, r4, #1
 8016248:	4651      	mov	r1, sl
 801624a:	47c8      	blx	r9
 801624c:	2800      	cmp	r0, #0
 801624e:	dd09      	ble.n	8016264 <_lv_utils_bsearch+0x3c>
            n    = (n / 2) - ((n & 1) == 0);
 8016250:	1b2c      	subs	r4, r5, r4
            base = (middle += size);
 8016252:	eb0a 0706 	add.w	r7, sl, r6
    for(middle = base; n != 0;) {
 8016256:	2c00      	cmp	r4, #0
 8016258:	d1ef      	bne.n	801623a <_lv_utils_bsearch+0x12>
        }
        else {
            return (char *)middle;
        }
    }
    return NULL;
 801625a:	f04f 0a00 	mov.w	sl, #0
}
 801625e:	4650      	mov	r0, sl
 8016260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            n /= 2;
 8016264:	462c      	mov	r4, r5
        else if(c < 0) {
 8016266:	d0fa      	beq.n	801625e <_lv_utils_bsearch+0x36>
    for(middle = base; n != 0;) {
 8016268:	2c00      	cmp	r4, #0
 801626a:	d1e6      	bne.n	801623a <_lv_utils_bsearch+0x12>
 801626c:	e7f5      	b.n	801625a <_lv_utils_bsearch+0x32>
 801626e:	bf00      	nop

08016270 <apply_theme>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void apply_theme(lv_theme_t * th, lv_obj_t * obj, lv_theme_style_t name)
{
 8016270:	b570      	push	{r4, r5, r6, lr}
 8016272:	4604      	mov	r4, r0
    if(th->base) {
 8016274:	6880      	ldr	r0, [r0, #8]
{
 8016276:	460d      	mov	r5, r1
 8016278:	4616      	mov	r6, r2
    if(th->base) {
 801627a:	b108      	cbz	r0, 8016280 <apply_theme+0x10>
        apply_theme(th->base, obj, name);
 801627c:	f7ff fff8 	bl	8016270 <apply_theme>
    }

    /*apply_xcb is deprecated, use apply_cb instead*/
    if(th->apply_xcb) {
 8016280:	6863      	ldr	r3, [r4, #4]
 8016282:	b123      	cbz	r3, 801628e <apply_theme+0x1e>
        th->apply_xcb(obj, name);
 8016284:	4631      	mov	r1, r6
 8016286:	4628      	mov	r0, r5
    }
    else if(th->apply_cb) {
        th->apply_cb(act_theme, obj, name);
    }
}
 8016288:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        th->apply_xcb(obj, name);
 801628c:	4718      	bx	r3
    else if(th->apply_cb) {
 801628e:	6823      	ldr	r3, [r4, #0]
 8016290:	b133      	cbz	r3, 80162a0 <apply_theme+0x30>
        th->apply_cb(act_theme, obj, name);
 8016292:	4804      	ldr	r0, [pc, #16]	; (80162a4 <apply_theme+0x34>)
 8016294:	4632      	mov	r2, r6
 8016296:	4629      	mov	r1, r5
 8016298:	6800      	ldr	r0, [r0, #0]
}
 801629a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        th->apply_cb(act_theme, obj, name);
 801629e:	4718      	bx	r3
}
 80162a0:	bd70      	pop	{r4, r5, r6, pc}
 80162a2:	bf00      	nop
 80162a4:	200201a0 	.word	0x200201a0

080162a8 <lv_theme_set_act>:
    act_theme = th;
 80162a8:	4b01      	ldr	r3, [pc, #4]	; (80162b0 <lv_theme_set_act+0x8>)
 80162aa:	6018      	str	r0, [r3, #0]
}
 80162ac:	4770      	bx	lr
 80162ae:	bf00      	nop
 80162b0:	200201a0 	.word	0x200201a0

080162b4 <lv_theme_apply>:
    clear_styles(obj, name);
 80162b4:	1e4b      	subs	r3, r1, #1
{
 80162b6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80162ba:	4688      	mov	r8, r1
 80162bc:	b083      	sub	sp, #12
 80162be:	4604      	mov	r4, r0

static void clear_styles(lv_obj_t * obj, lv_theme_style_t name)
{
    switch(name) {
 80162c0:	2b27      	cmp	r3, #39	; 0x27
 80162c2:	d831      	bhi.n	8016328 <lv_theme_apply+0x74>
 80162c4:	e8df f013 	tbh	[pc, r3, lsl #1]
 80162c8:	007a007a 	.word	0x007a007a
 80162cc:	008f008f 	.word	0x008f008f
 80162d0:	008f007a 	.word	0x008f007a
 80162d4:	007a00be 	.word	0x007a00be
 80162d8:	00980028 	.word	0x00980028
 80162dc:	008f007a 	.word	0x008f007a
 80162e0:	00980105 	.word	0x00980105
 80162e4:	007a007a 	.word	0x007a007a
 80162e8:	007a008f 	.word	0x007a008f
 80162ec:	007a007a 	.word	0x007a007a
 80162f0:	007a00b9 	.word	0x007a00b9
 80162f4:	007a007a 	.word	0x007a007a
 80162f8:	007a00fd 	.word	0x007a00fd
 80162fc:	00b100b9 	.word	0x00b100b9
 8016300:	00b10098 	.word	0x00b10098
 8016304:	008f007a 	.word	0x008f007a
 8016308:	00e90098 	.word	0x00e90098
 801630c:	002800d5 	.word	0x002800d5
 8016310:	009800cc 	.word	0x009800cc
 8016314:	007a00c3 	.word	0x007a00c3
            break;
#endif

#if LV_USE_CHECKBOX
        case LV_THEME_CHECKBOX:
            lv_obj_clean_style_list(obj, LV_CHECKBOX_PART_BG);
 8016318:	2100      	movs	r1, #0

#if LV_USE_WIN
        case LV_THEME_WIN:
            lv_obj_clean_style_list(obj, LV_WIN_PART_BG);
            lv_obj_clean_style_list(obj, LV_WIN_PART_SCROLLBAR);
            lv_obj_clean_style_list(obj, LV_WIN_PART_CONTENT_SCROLLABLE);
 801631a:	4620      	mov	r0, r4
 801631c:	f7ed f936 	bl	800358c <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_WIN_PART_HEADER);
 8016320:	2140      	movs	r1, #64	; 0x40
 8016322:	4620      	mov	r0, r4
 8016324:	f7ed f932 	bl	800358c <lv_obj_clean_style_list>
    apply_theme(act_theme, obj, name);
 8016328:	4f7d      	ldr	r7, [pc, #500]	; (8016520 <lv_theme_apply+0x26c>)
 801632a:	683d      	ldr	r5, [r7, #0]
    if(th->base) {
 801632c:	68ae      	ldr	r6, [r5, #8]
 801632e:	2e00      	cmp	r6, #0
 8016330:	d03c      	beq.n	80163ac <lv_theme_apply+0xf8>
 8016332:	f8d6 9008 	ldr.w	r9, [r6, #8]
 8016336:	f1b9 0f00 	cmp.w	r9, #0
 801633a:	d032      	beq.n	80163a2 <lv_theme_apply+0xee>
 801633c:	f8d9 a008 	ldr.w	sl, [r9, #8]
 8016340:	f1ba 0f00 	cmp.w	sl, #0
 8016344:	d026      	beq.n	8016394 <lv_theme_apply+0xe0>
 8016346:	f8da b008 	ldr.w	fp, [sl, #8]
 801634a:	f1bb 0f00 	cmp.w	fp, #0
 801634e:	d019      	beq.n	8016384 <lv_theme_apply+0xd0>
 8016350:	f8db 3008 	ldr.w	r3, [fp, #8]
 8016354:	b173      	cbz	r3, 8016374 <lv_theme_apply+0xc0>
 8016356:	6898      	ldr	r0, [r3, #8]
 8016358:	b128      	cbz	r0, 8016366 <lv_theme_apply+0xb2>
        apply_theme(th->base, obj, name);
 801635a:	4642      	mov	r2, r8
 801635c:	4621      	mov	r1, r4
 801635e:	9301      	str	r3, [sp, #4]
 8016360:	f7ff ff86 	bl	8016270 <apply_theme>
 8016364:	9b01      	ldr	r3, [sp, #4]
    if(th->apply_xcb) {
 8016366:	685a      	ldr	r2, [r3, #4]
 8016368:	2a00      	cmp	r2, #0
 801636a:	f000 80cf 	beq.w	801650c <lv_theme_apply+0x258>
        th->apply_xcb(obj, name);
 801636e:	4641      	mov	r1, r8
 8016370:	4620      	mov	r0, r4
 8016372:	4790      	blx	r2
    if(th->apply_xcb) {
 8016374:	f8db 3004 	ldr.w	r3, [fp, #4]
 8016378:	2b00      	cmp	r3, #0
 801637a:	f000 80bd 	beq.w	80164f8 <lv_theme_apply+0x244>
        th->apply_xcb(obj, name);
 801637e:	4641      	mov	r1, r8
 8016380:	4620      	mov	r0, r4
 8016382:	4798      	blx	r3
    if(th->apply_xcb) {
 8016384:	f8da 3004 	ldr.w	r3, [sl, #4]
 8016388:	2b00      	cmp	r3, #0
 801638a:	f000 80ab 	beq.w	80164e4 <lv_theme_apply+0x230>
        th->apply_xcb(obj, name);
 801638e:	4641      	mov	r1, r8
 8016390:	4620      	mov	r0, r4
 8016392:	4798      	blx	r3
    if(th->apply_xcb) {
 8016394:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8016398:	2b00      	cmp	r3, #0
 801639a:	d03d      	beq.n	8016418 <lv_theme_apply+0x164>
        th->apply_xcb(obj, name);
 801639c:	4641      	mov	r1, r8
 801639e:	4620      	mov	r0, r4
 80163a0:	4798      	blx	r3
    if(th->apply_xcb) {
 80163a2:	6873      	ldr	r3, [r6, #4]
 80163a4:	b1bb      	cbz	r3, 80163d6 <lv_theme_apply+0x122>
        th->apply_xcb(obj, name);
 80163a6:	4641      	mov	r1, r8
 80163a8:	4620      	mov	r0, r4
 80163aa:	4798      	blx	r3
    if(th->apply_xcb) {
 80163ac:	686b      	ldr	r3, [r5, #4]
 80163ae:	b14b      	cbz	r3, 80163c4 <lv_theme_apply+0x110>
        th->apply_xcb(obj, name);
 80163b0:	4641      	mov	r1, r8
 80163b2:	4620      	mov	r0, r4
}
 80163b4:	b003      	add	sp, #12
 80163b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        th->apply_xcb(obj, name);
 80163ba:	4718      	bx	r3
            lv_obj_clean_style_list(obj, LV_OBJ_PART_MAIN);
 80163bc:	2100      	movs	r1, #0
 80163be:	f7ed f8e5 	bl	800358c <lv_obj_clean_style_list>
            break;
 80163c2:	e7b1      	b.n	8016328 <lv_theme_apply+0x74>
    else if(th->apply_cb) {
 80163c4:	682b      	ldr	r3, [r5, #0]
 80163c6:	b323      	cbz	r3, 8016412 <lv_theme_apply+0x15e>
        th->apply_cb(act_theme, obj, name);
 80163c8:	4642      	mov	r2, r8
 80163ca:	4621      	mov	r1, r4
 80163cc:	6838      	ldr	r0, [r7, #0]
}
 80163ce:	b003      	add	sp, #12
 80163d0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        th->apply_cb(act_theme, obj, name);
 80163d4:	4718      	bx	r3
    else if(th->apply_cb) {
 80163d6:	6833      	ldr	r3, [r6, #0]
 80163d8:	2b00      	cmp	r3, #0
 80163da:	d0e7      	beq.n	80163ac <lv_theme_apply+0xf8>
        th->apply_cb(act_theme, obj, name);
 80163dc:	4642      	mov	r2, r8
 80163de:	4621      	mov	r1, r4
 80163e0:	6838      	ldr	r0, [r7, #0]
 80163e2:	4798      	blx	r3
 80163e4:	e7e2      	b.n	80163ac <lv_theme_apply+0xf8>
            lv_obj_clean_style_list(obj, LV_BTNMATRIX_PART_BG);
 80163e6:	2100      	movs	r1, #0

#if LV_USE_TEXTAREA
        case LV_THEME_TEXTAREA:
            lv_obj_clean_style_list(obj, LV_TEXTAREA_PART_BG);
            lv_obj_clean_style_list(obj, LV_TEXTAREA_PART_PLACEHOLDER);
            lv_obj_clean_style_list(obj, LV_TEXTAREA_PART_CURSOR);
 80163e8:	4620      	mov	r0, r4
 80163ea:	f7ed f8cf 	bl	800358c <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_TEXTAREA_PART_SCROLLBAR);
 80163ee:	2101      	movs	r1, #1
 80163f0:	4620      	mov	r0, r4
 80163f2:	f7ed f8cb 	bl	800358c <lv_obj_clean_style_list>
            break;
 80163f6:	e797      	b.n	8016328 <lv_theme_apply+0x74>
            lv_obj_clean_style_list(obj, LV_SWITCH_PART_BG);
 80163f8:	2100      	movs	r1, #0
#endif

#if LV_USE_CALENDAR
        case LV_THEME_CALENDAR:
            lv_obj_clean_style_list(obj, LV_CALENDAR_PART_BG);
            lv_obj_clean_style_list(obj, LV_CALENDAR_PART_DATE);
 80163fa:	4620      	mov	r0, r4
 80163fc:	f7ed f8c6 	bl	800358c <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_CALENDAR_PART_HEADER);
 8016400:	4620      	mov	r0, r4
 8016402:	2101      	movs	r1, #1
 8016404:	f7ed f8c2 	bl	800358c <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_CALENDAR_PART_DAY_NAMES);
 8016408:	2102      	movs	r1, #2
 801640a:	4620      	mov	r0, r4
 801640c:	f7ed f8be 	bl	800358c <lv_obj_clean_style_list>
            break;
 8016410:	e78a      	b.n	8016328 <lv_theme_apply+0x74>
}
 8016412:	b003      	add	sp, #12
 8016414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if(th->apply_cb) {
 8016418:	f8d9 3000 	ldr.w	r3, [r9]
 801641c:	2b00      	cmp	r3, #0
 801641e:	d0c0      	beq.n	80163a2 <lv_theme_apply+0xee>
        th->apply_cb(act_theme, obj, name);
 8016420:	4642      	mov	r2, r8
 8016422:	4621      	mov	r1, r4
 8016424:	6838      	ldr	r0, [r7, #0]
 8016426:	4798      	blx	r3
 8016428:	e7bb      	b.n	80163a2 <lv_theme_apply+0xee>
            lv_obj_clean_style_list(obj, LV_ROLLER_PART_BG);
 801642a:	2100      	movs	r1, #0
 801642c:	f7ed f8ae 	bl	800358c <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_ROLLER_PART_SELECTED);
 8016430:	2103      	movs	r1, #3
 8016432:	4620      	mov	r0, r4
 8016434:	f7ed f8aa 	bl	800358c <lv_obj_clean_style_list>
            break;
 8016438:	e776      	b.n	8016328 <lv_theme_apply+0x74>
            lv_obj_clean_style_list(obj, LV_PAGE_PART_BG);
 801643a:	2100      	movs	r1, #0
 801643c:	f7ed f8a6 	bl	800358c <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_PAGE_PART_SCROLLABLE);
 8016440:	2140      	movs	r1, #64	; 0x40
 8016442:	e7d1      	b.n	80163e8 <lv_theme_apply+0x134>
            lv_obj_clean_style_list(obj, LV_CALENDAR_PART_BG);
 8016444:	2100      	movs	r1, #0
 8016446:	f7ed f8a1 	bl	800358c <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_CALENDAR_PART_DATE);
 801644a:	2103      	movs	r1, #3
 801644c:	e7d5      	b.n	80163fa <lv_theme_apply+0x146>
            lv_obj_clean_style_list(obj, LV_WIN_PART_BG);
 801644e:	2100      	movs	r1, #0
 8016450:	f7ed f89c 	bl	800358c <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_WIN_PART_SCROLLBAR);
 8016454:	2142      	movs	r1, #66	; 0x42
 8016456:	4620      	mov	r0, r4
 8016458:	f7ed f898 	bl	800358c <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_WIN_PART_CONTENT_SCROLLABLE);
 801645c:	2141      	movs	r1, #65	; 0x41
 801645e:	e75c      	b.n	801631a <lv_theme_apply+0x66>
            lv_obj_clean_style_list(obj, LV_TEXTAREA_PART_BG);
 8016460:	2100      	movs	r1, #0
 8016462:	f7ed f893 	bl	800358c <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_TEXTAREA_PART_PLACEHOLDER);
 8016466:	2104      	movs	r1, #4
 8016468:	4620      	mov	r0, r4
 801646a:	f7ed f88f 	bl	800358c <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_TEXTAREA_PART_CURSOR);
 801646e:	2103      	movs	r1, #3
 8016470:	e7ba      	b.n	80163e8 <lv_theme_apply+0x134>
            lv_obj_clean_style_list(obj, LV_TABVIEW_PART_BG);
 8016472:	2100      	movs	r1, #0
 8016474:	f7ed f88a 	bl	800358c <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_TABVIEW_PART_BG_SCROLLABLE);
 8016478:	2140      	movs	r1, #64	; 0x40
 801647a:	4620      	mov	r0, r4
 801647c:	f7ed f886 	bl	800358c <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_TABVIEW_PART_TAB_BG);
 8016480:	2141      	movs	r1, #65	; 0x41
 8016482:	4620      	mov	r0, r4
 8016484:	f7ed f882 	bl	800358c <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_TABVIEW_PART_INDIC);
 8016488:	2143      	movs	r1, #67	; 0x43
            lv_obj_clean_style_list(obj, LV_DROPDOWN_PART_SCROLLBAR);
 801648a:	4620      	mov	r0, r4
 801648c:	f7ed f87e 	bl	800358c <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_DROPDOWN_PART_SELECTED);
 8016490:	2142      	movs	r1, #66	; 0x42
 8016492:	4620      	mov	r0, r4
 8016494:	f7ed f87a 	bl	800358c <lv_obj_clean_style_list>
            break;
 8016498:	e746      	b.n	8016328 <lv_theme_apply+0x74>
            lv_obj_clean_style_list(obj, LV_TABLE_PART_BG);
 801649a:	2100      	movs	r1, #0
 801649c:	f7ed f876 	bl	800358c <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_TABLE_PART_CELL1);
 80164a0:	4620      	mov	r0, r4
 80164a2:	2101      	movs	r1, #1
 80164a4:	f7ed f872 	bl	800358c <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_TABLE_PART_CELL2);
 80164a8:	4620      	mov	r0, r4
 80164aa:	2102      	movs	r1, #2
 80164ac:	f7ed f86e 	bl	800358c <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_TABLE_PART_CELL3);
 80164b0:	4620      	mov	r0, r4
 80164b2:	2103      	movs	r1, #3
 80164b4:	f7ed f86a 	bl	800358c <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_TABLE_PART_CELL4);
 80164b8:	2104      	movs	r1, #4
 80164ba:	4620      	mov	r0, r4
 80164bc:	f7ed f866 	bl	800358c <lv_obj_clean_style_list>
            break;
 80164c0:	e732      	b.n	8016328 <lv_theme_apply+0x74>
            lv_obj_clean_style_list(obj, LV_MSGBOX_PART_BTN_BG);
 80164c2:	2140      	movs	r1, #64	; 0x40
 80164c4:	f7ed f862 	bl	800358c <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_MSGBOX_PART_BTN);
 80164c8:	2141      	movs	r1, #65	; 0x41
 80164ca:	4620      	mov	r0, r4
 80164cc:	f7ed f85e 	bl	800358c <lv_obj_clean_style_list>
            break;
 80164d0:	e72a      	b.n	8016328 <lv_theme_apply+0x74>
            lv_obj_clean_style_list(obj, LV_DROPDOWN_PART_MAIN);
 80164d2:	2100      	movs	r1, #0
 80164d4:	f7ed f85a 	bl	800358c <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_DROPDOWN_PART_LIST);
 80164d8:	2140      	movs	r1, #64	; 0x40
 80164da:	4620      	mov	r0, r4
 80164dc:	f7ed f856 	bl	800358c <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_DROPDOWN_PART_SCROLLBAR);
 80164e0:	2141      	movs	r1, #65	; 0x41
 80164e2:	e7d2      	b.n	801648a <lv_theme_apply+0x1d6>
    else if(th->apply_cb) {
 80164e4:	f8da 3000 	ldr.w	r3, [sl]
 80164e8:	2b00      	cmp	r3, #0
 80164ea:	f43f af53 	beq.w	8016394 <lv_theme_apply+0xe0>
        th->apply_cb(act_theme, obj, name);
 80164ee:	4642      	mov	r2, r8
 80164f0:	4621      	mov	r1, r4
 80164f2:	6838      	ldr	r0, [r7, #0]
 80164f4:	4798      	blx	r3
 80164f6:	e74d      	b.n	8016394 <lv_theme_apply+0xe0>
    else if(th->apply_cb) {
 80164f8:	f8db 3000 	ldr.w	r3, [fp]
 80164fc:	2b00      	cmp	r3, #0
 80164fe:	f43f af41 	beq.w	8016384 <lv_theme_apply+0xd0>
        th->apply_cb(act_theme, obj, name);
 8016502:	4642      	mov	r2, r8
 8016504:	4621      	mov	r1, r4
 8016506:	6838      	ldr	r0, [r7, #0]
 8016508:	4798      	blx	r3
 801650a:	e73b      	b.n	8016384 <lv_theme_apply+0xd0>
    else if(th->apply_cb) {
 801650c:	681b      	ldr	r3, [r3, #0]
 801650e:	2b00      	cmp	r3, #0
 8016510:	f43f af30 	beq.w	8016374 <lv_theme_apply+0xc0>
        th->apply_cb(act_theme, obj, name);
 8016514:	4642      	mov	r2, r8
 8016516:	4621      	mov	r1, r4
 8016518:	6838      	ldr	r0, [r7, #0]
 801651a:	4798      	blx	r3
 801651c:	e72a      	b.n	8016374 <lv_theme_apply+0xc0>
 801651e:	bf00      	nop
 8016520:	200201a0 	.word	0x200201a0

08016524 <lv_theme_get_font_normal>:
    return act_theme->font_normal;
 8016524:	4b01      	ldr	r3, [pc, #4]	; (801652c <lv_theme_get_font_normal+0x8>)
 8016526:	681b      	ldr	r3, [r3, #0]
}
 8016528:	6998      	ldr	r0, [r3, #24]
 801652a:	4770      	bx	lr
 801652c:	200201a0 	.word	0x200201a0

08016530 <theme_apply>:
{
    LV_UNUSED(th);

    lv_style_list_t * list;

    switch(name) {
 8016530:	3a01      	subs	r2, #1
{
 8016532:	b570      	push	{r4, r5, r6, lr}
 8016534:	460c      	mov	r4, r1
 8016536:	2a27      	cmp	r2, #39	; 0x27
 8016538:	d850      	bhi.n	80165dc <theme_apply+0xac>
 801653a:	e8df f012 	tbh	[pc, r2, lsl #1]
 801653e:	008b      	.short	0x008b
 8016540:	00600056 	.word	0x00600056
 8016544:	030e0318 	.word	0x030e0318
 8016548:	02de0300 	.word	0x02de0300
 801654c:	02c6004f 	.word	0x02c6004f
 8016550:	00560293 	.word	0x00560293
 8016554:	024e0281 	.word	0x024e0281
 8016558:	004f022e 	.word	0x004f022e
 801655c:	0211004f 	.word	0x0211004f
 8016560:	0207004f 	.word	0x0207004f
 8016564:	01f9004f 	.word	0x01f9004f
 8016568:	01df01ef 	.word	0x01df01ef
 801656c:	01ba01cf 	.word	0x01ba01cf
 8016570:	01a501b5 	.word	0x01a501b5
 8016574:	016d018d 	.word	0x016d018d
 8016578:	01450155 	.word	0x01450155
 801657c:	01190133 	.word	0x01190133
 8016580:	00e20103 	.word	0x00e20103
 8016584:	002800d8 	.word	0x002800d8
 8016588:	009e00bf 	.word	0x009e00bf
 801658c:	0094      	.short	0x0094
#endif

#if LV_USE_TEXTAREA
        case LV_THEME_TEXTAREA:
            list = lv_obj_get_style_list(obj, LV_TEXTAREA_PART_BG);
            _lv_style_list_add_style(list, &styles->bg);
 801658e:	4dd2      	ldr	r5, [pc, #840]	; (80168d8 <theme_apply+0x3a8>)
            list = lv_obj_get_style_list(obj, LV_TEXTAREA_PART_BG);
 8016590:	2100      	movs	r1, #0
 8016592:	4620      	mov	r0, r4
 8016594:	f7ee fc24 	bl	8004de0 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->bg);
 8016598:	6829      	ldr	r1, [r5, #0]
            list = lv_obj_get_style_list(obj, LV_TEXTAREA_PART_BG);
 801659a:	4606      	mov	r6, r0
            _lv_style_list_add_style(list, &styles->bg);
 801659c:	3104      	adds	r1, #4
 801659e:	f7f2 fb65 	bl	8008c6c <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->pad_small);
 80165a2:	6829      	ldr	r1, [r5, #0]
 80165a4:	4630      	mov	r0, r6
 80165a6:	3118      	adds	r1, #24
 80165a8:	f7f2 fb60 	bl	8008c6c <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_TEXTAREA_PART_PLACEHOLDER);
 80165ac:	2104      	movs	r1, #4
 80165ae:	4620      	mov	r0, r4
 80165b0:	f7ee fc16 	bl	8004de0 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->ta_placeholder);
 80165b4:	6829      	ldr	r1, [r5, #0]
 80165b6:	31bc      	adds	r1, #188	; 0xbc
 80165b8:	f7f2 fb58 	bl	8008c6c <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_TEXTAREA_PART_CURSOR);
 80165bc:	2103      	movs	r1, #3
 80165be:	4620      	mov	r0, r4
 80165c0:	f7ee fc0e 	bl	8004de0 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->ta_cursor);
 80165c4:	6829      	ldr	r1, [r5, #0]
 80165c6:	31b8      	adds	r1, #184	; 0xb8
 80165c8:	f7f2 fb50 	bl	8008c6c <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_TEXTAREA_PART_SCROLLBAR);
 80165cc:	2101      	movs	r1, #1
 80165ce:	4620      	mov	r0, r4
 80165d0:	f7ee fc06 	bl	8004de0 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->sb);
 80165d4:	6829      	ldr	r1, [r5, #0]
 80165d6:	3184      	adds	r1, #132	; 0x84
 80165d8:	f7f2 fb48 	bl	8008c6c <_lv_style_list_add_style>
#endif
        default:
            break;
    }

    lv_obj_refresh_style(obj, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
 80165dc:	22ff      	movs	r2, #255	; 0xff
 80165de:	4620      	mov	r0, r4
 80165e0:	4611      	mov	r1, r2
}
 80165e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_obj_refresh_style(obj, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
 80165e6:	f7ef bc41 	b.w	8005e6c <lv_obj_refresh_style>
            list = lv_obj_get_style_list(obj, LV_OBJ_PART_MAIN);
 80165ea:	2100      	movs	r1, #0
 80165ec:	4620      	mov	r0, r4
 80165ee:	f7ee fbf7 	bl	8004de0 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->bg);
 80165f2:	4bb9      	ldr	r3, [pc, #740]	; (80168d8 <theme_apply+0x3a8>)
 80165f4:	6819      	ldr	r1, [r3, #0]
 80165f6:	3104      	adds	r1, #4
 80165f8:	f7f2 fb38 	bl	8008c6c <_lv_style_list_add_style>
            break;
 80165fc:	e7ee      	b.n	80165dc <theme_apply+0xac>
            _lv_style_list_add_style(list, &styles->bg);
 80165fe:	4db6      	ldr	r5, [pc, #728]	; (80168d8 <theme_apply+0x3a8>)
            list = lv_obj_get_style_list(obj, LV_ARC_PART_BG);
 8016600:	2100      	movs	r1, #0
 8016602:	4620      	mov	r0, r4
 8016604:	f7ee fbec 	bl	8004de0 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->bg);
 8016608:	6829      	ldr	r1, [r5, #0]
            list = lv_obj_get_style_list(obj, LV_ARC_PART_BG);
 801660a:	4606      	mov	r6, r0
            _lv_style_list_add_style(list, &styles->bg);
 801660c:	3104      	adds	r1, #4
 801660e:	f7f2 fb2d 	bl	8008c6c <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->arc_bg);
 8016612:	6829      	ldr	r1, [r5, #0]
 8016614:	4630      	mov	r0, r6
 8016616:	3120      	adds	r1, #32
 8016618:	f7f2 fb28 	bl	8008c6c <_lv_style_list_add_style>
            list = lv_obj_get_style_list(obj, LV_ARC_PART_INDIC);
 801661c:	2101      	movs	r1, #1
 801661e:	4620      	mov	r0, r4
 8016620:	f7ee fbde 	bl	8004de0 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->arc_indic);
 8016624:	6829      	ldr	r1, [r5, #0]
 8016626:	311c      	adds	r1, #28
 8016628:	f7f2 fb20 	bl	8008c6c <_lv_style_list_add_style>
            list = lv_obj_get_style_list(obj, LV_ARC_PART_KNOB);
 801662c:	2102      	movs	r1, #2
 801662e:	4620      	mov	r0, r4
 8016630:	f7ee fbd6 	bl	8004de0 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->bg);
 8016634:	6829      	ldr	r1, [r5, #0]
            list = lv_obj_get_style_list(obj, LV_ARC_PART_KNOB);
 8016636:	4606      	mov	r6, r0
            _lv_style_list_add_style(list, &styles->bg);
 8016638:	3104      	adds	r1, #4
 801663a:	f7f2 fb17 	bl	8008c6c <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->bg_click);
 801663e:	6829      	ldr	r1, [r5, #0]
 8016640:	4630      	mov	r0, r6
 8016642:	3108      	adds	r1, #8
 8016644:	f7f2 fb12 	bl	8008c6c <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->arc_knob);
 8016648:	6829      	ldr	r1, [r5, #0]
 801664a:	4630      	mov	r0, r6
 801664c:	3124      	adds	r1, #36	; 0x24
 801664e:	f7f2 fb0d 	bl	8008c6c <_lv_style_list_add_style>
            break;
 8016652:	e7c3      	b.n	80165dc <theme_apply+0xac>
            list = lv_obj_get_style_list(obj, LV_OBJ_PART_MAIN);
 8016654:	2100      	movs	r1, #0
 8016656:	4620      	mov	r0, r4
 8016658:	f7ee fbc2 	bl	8004de0 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->scr);
 801665c:	4b9e      	ldr	r3, [pc, #632]	; (80168d8 <theme_apply+0x3a8>)
 801665e:	6819      	ldr	r1, [r3, #0]
 8016660:	f7f2 fb04 	bl	8008c6c <_lv_style_list_add_style>
            break;
 8016664:	e7ba      	b.n	80165dc <theme_apply+0xac>
            list = lv_obj_get_style_list(obj, LV_BTN_PART_MAIN);
 8016666:	2100      	movs	r1, #0
 8016668:	4620      	mov	r0, r4
 801666a:	f7ee fbb9 	bl	8004de0 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->tabview_btns);
 801666e:	4b9a      	ldr	r3, [pc, #616]	; (80168d8 <theme_apply+0x3a8>)
 8016670:	6819      	ldr	r1, [r3, #0]
 8016672:	31a8      	adds	r1, #168	; 0xa8
 8016674:	f7f2 fafa 	bl	8008c6c <_lv_style_list_add_style>
            break;
 8016678:	e7b0      	b.n	80165dc <theme_apply+0xac>
            _lv_style_list_add_style(list, &styles->scr);
 801667a:	4d97      	ldr	r5, [pc, #604]	; (80168d8 <theme_apply+0x3a8>)
            list = lv_obj_get_style_list(obj, LV_WIN_PART_BG);
 801667c:	2100      	movs	r1, #0
 801667e:	4620      	mov	r0, r4
 8016680:	f7ee fbae 	bl	8004de0 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->scr);
 8016684:	6829      	ldr	r1, [r5, #0]
 8016686:	f7f2 faf1 	bl	8008c6c <_lv_style_list_add_style>
            list = lv_obj_get_style_list(obj, LV_WIN_PART_SCROLLBAR);
 801668a:	2142      	movs	r1, #66	; 0x42
 801668c:	4620      	mov	r0, r4
 801668e:	f7ee fba7 	bl	8004de0 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->sb);
 8016692:	6829      	ldr	r1, [r5, #0]
 8016694:	3184      	adds	r1, #132	; 0x84
 8016696:	f7f2 fae9 	bl	8008c6c <_lv_style_list_add_style>
            list = lv_obj_get_style_list(obj, LV_WIN_PART_CONTENT_SCROLLABLE);
 801669a:	2141      	movs	r1, #65	; 0x41
 801669c:	4620      	mov	r0, r4
 801669e:	f7ee fb9f 	bl	8004de0 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->tabview_page_scrl);
 80166a2:	6829      	ldr	r1, [r5, #0]
 80166a4:	31b4      	adds	r1, #180	; 0xb4
 80166a6:	f7f2 fae1 	bl	8008c6c <_lv_style_list_add_style>
            list = lv_obj_get_style_list(obj, LV_WIN_PART_HEADER);
 80166aa:	2140      	movs	r1, #64	; 0x40
 80166ac:	4620      	mov	r0, r4
 80166ae:	f7ee fb97 	bl	8004de0 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->tabview_btns_bg);
 80166b2:	6829      	ldr	r1, [r5, #0]
 80166b4:	31ac      	adds	r1, #172	; 0xac
 80166b6:	f7f2 fad9 	bl	8008c6c <_lv_style_list_add_style>
            break;
 80166ba:	e78f      	b.n	80165dc <theme_apply+0xac>
            _lv_style_list_add_style(list, &styles->scr);
 80166bc:	4d86      	ldr	r5, [pc, #536]	; (80168d8 <theme_apply+0x3a8>)
            list = lv_obj_get_style_list(obj, LV_TILEVIEW_PART_BG);
 80166be:	2100      	movs	r1, #0
 80166c0:	4620      	mov	r0, r4
 80166c2:	f7ee fb8d 	bl	8004de0 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->scr);
 80166c6:	6829      	ldr	r1, [r5, #0]
 80166c8:	f7f2 fad0 	bl	8008c6c <_lv_style_list_add_style>
            list = lv_obj_get_style_list(obj, LV_TILEVIEW_PART_SCROLLBAR);
 80166cc:	2101      	movs	r1, #1
 80166ce:	4620      	mov	r0, r4
 80166d0:	f7ee fb86 	bl	8004de0 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->sb);
 80166d4:	6829      	ldr	r1, [r5, #0]
 80166d6:	3184      	adds	r1, #132	; 0x84
 80166d8:	f7f2 fac8 	bl	8008c6c <_lv_style_list_add_style>
            list = lv_obj_get_style_list(obj, LV_TILEVIEW_PART_EDGE_FLASH);
 80166dc:	2102      	movs	r1, #2
 80166de:	4620      	mov	r0, r4
 80166e0:	f7ee fb7e 	bl	8004de0 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->edge_flash);
 80166e4:	6829      	ldr	r1, [r5, #0]
 80166e6:	3188      	adds	r1, #136	; 0x88
 80166e8:	f7f2 fac0 	bl	8008c6c <_lv_style_list_add_style>
            break;
 80166ec:	e776      	b.n	80165dc <theme_apply+0xac>
            list = lv_obj_get_style_list(obj, LV_PAGE_PART_SCROLLABLE);
 80166ee:	2140      	movs	r1, #64	; 0x40
 80166f0:	4620      	mov	r0, r4
 80166f2:	f7ee fb75 	bl	8004de0 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->tabview_page_scrl);
 80166f6:	4b78      	ldr	r3, [pc, #480]	; (80168d8 <theme_apply+0x3a8>)
 80166f8:	6819      	ldr	r1, [r3, #0]
 80166fa:	31b4      	adds	r1, #180	; 0xb4
 80166fc:	f7f2 fab6 	bl	8008c6c <_lv_style_list_add_style>
            break;
 8016700:	e76c      	b.n	80165dc <theme_apply+0xac>
            _lv_style_list_add_style(list, &styles->scr);
 8016702:	4d75      	ldr	r5, [pc, #468]	; (80168d8 <theme_apply+0x3a8>)
            list = lv_obj_get_style_list(obj, LV_TABVIEW_PART_BG);
 8016704:	2100      	movs	r1, #0
 8016706:	4620      	mov	r0, r4
 8016708:	f7ee fb6a 	bl	8004de0 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->scr);
 801670c:	6829      	ldr	r1, [r5, #0]
 801670e:	f7f2 faad 	bl	8008c6c <_lv_style_list_add_style>
            list = lv_obj_get_style_list(obj, LV_TABVIEW_PART_TAB_BG);
 8016712:	2141      	movs	r1, #65	; 0x41
 8016714:	4620      	mov	r0, r4
 8016716:	f7ee fb63 	bl	8004de0 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->tabview_btns_bg);
 801671a:	6829      	ldr	r1, [r5, #0]
 801671c:	31ac      	adds	r1, #172	; 0xac
 801671e:	f7f2 faa5 	bl	8008c6c <_lv_style_list_add_style>
            list = lv_obj_get_style_list(obj, LV_TABVIEW_PART_INDIC);
 8016722:	2143      	movs	r1, #67	; 0x43
 8016724:	4620      	mov	r0, r4
 8016726:	f7ee fb5b 	bl	8004de0 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->tabview_indic);
 801672a:	6829      	ldr	r1, [r5, #0]
 801672c:	31b0      	adds	r1, #176	; 0xb0
 801672e:	f7f2 fa9d 	bl	8008c6c <_lv_style_list_add_style>
            list = lv_obj_get_style_list(obj, LV_TABVIEW_PART_TAB_BTN);
 8016732:	2142      	movs	r1, #66	; 0x42
 8016734:	4620      	mov	r0, r4
 8016736:	f7ee fb53 	bl	8004de0 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->tabview_btns);
 801673a:	6829      	ldr	r1, [r5, #0]
 801673c:	31a8      	adds	r1, #168	; 0xa8
 801673e:	f7f2 fa95 	bl	8008c6c <_lv_style_list_add_style>
            break;
 8016742:	e74b      	b.n	80165dc <theme_apply+0xac>
                _lv_style_list_add_style(list, &styles->bg);
 8016744:	4e64      	ldr	r6, [pc, #400]	; (80168d8 <theme_apply+0x3a8>)
                list = lv_obj_get_style_list(obj, LV_TABLE_PART_BG);
 8016746:	2100      	movs	r1, #0
 8016748:	4620      	mov	r0, r4
                int idx = 1; /* start value should be 1, not zero, since cell styles
 801674a:	2501      	movs	r5, #1
                list = lv_obj_get_style_list(obj, LV_TABLE_PART_BG);
 801674c:	f7ee fb48 	bl	8004de0 <lv_obj_get_style_list>
                _lv_style_list_add_style(list, &styles->bg);
 8016750:	6831      	ldr	r1, [r6, #0]
 8016752:	3104      	adds	r1, #4
 8016754:	f7f2 fa8a 	bl	8008c6c <_lv_style_list_add_style>
                    list = lv_obj_get_style_list(obj, idx);
 8016758:	b2e9      	uxtb	r1, r5
 801675a:	4620      	mov	r0, r4
 801675c:	f7ee fb40 	bl	8004de0 <lv_obj_get_style_list>
                    _lv_style_list_add_style(list, &styles->table_cell);
 8016760:	6831      	ldr	r1, [r6, #0]
                for(; idx <= LV_TABLE_CELL_STYLE_CNT; idx ++) {
 8016762:	3501      	adds	r5, #1
                    _lv_style_list_add_style(list, &styles->table_cell);
 8016764:	31a4      	adds	r1, #164	; 0xa4
 8016766:	f7f2 fa81 	bl	8008c6c <_lv_style_list_add_style>
                for(; idx <= LV_TABLE_CELL_STYLE_CNT; idx ++) {
 801676a:	2d05      	cmp	r5, #5
 801676c:	d1f4      	bne.n	8016758 <theme_apply+0x228>
 801676e:	e735      	b.n	80165dc <theme_apply+0xac>
            _lv_style_list_add_style(list, &styles->bar_bg);
 8016770:	4d59      	ldr	r5, [pc, #356]	; (80168d8 <theme_apply+0x3a8>)
            list = lv_obj_get_style_list(obj, LV_SWITCH_PART_BG);
 8016772:	2100      	movs	r1, #0
 8016774:	4620      	mov	r0, r4
 8016776:	f7ee fb33 	bl	8004de0 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->bar_bg);
 801677a:	6829      	ldr	r1, [r5, #0]
 801677c:	3128      	adds	r1, #40	; 0x28
 801677e:	f7f2 fa75 	bl	8008c6c <_lv_style_list_add_style>
            list = lv_obj_get_style_list(obj, LV_SWITCH_PART_INDIC);
 8016782:	2101      	movs	r1, #1
 8016784:	4620      	mov	r0, r4
 8016786:	f7ee fb2b 	bl	8004de0 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->bar_indic);
 801678a:	6829      	ldr	r1, [r5, #0]
 801678c:	312c      	adds	r1, #44	; 0x2c
 801678e:	f7f2 fa6d 	bl	8008c6c <_lv_style_list_add_style>
            list = lv_obj_get_style_list(obj, LV_SWITCH_PART_KNOB);
 8016792:	2102      	movs	r1, #2
 8016794:	4620      	mov	r0, r4
 8016796:	f7ee fb23 	bl	8004de0 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->sw_knob);
 801679a:	6829      	ldr	r1, [r5, #0]
 801679c:	31a0      	adds	r1, #160	; 0xa0
 801679e:	f7f2 fa65 	bl	8008c6c <_lv_style_list_add_style>
            break;
 80167a2:	e71b      	b.n	80165dc <theme_apply+0xac>
            _lv_style_list_add_style(list, &styles->arc_bg);
 80167a4:	4d4c      	ldr	r5, [pc, #304]	; (80168d8 <theme_apply+0x3a8>)
            list = lv_obj_get_style_list(obj, LV_SPINNER_PART_BG);
 80167a6:	2100      	movs	r1, #0
 80167a8:	4620      	mov	r0, r4
 80167aa:	f7ee fb19 	bl	8004de0 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->arc_bg);
 80167ae:	6829      	ldr	r1, [r5, #0]
 80167b0:	3120      	adds	r1, #32
 80167b2:	f7f2 fa5b 	bl	8008c6c <_lv_style_list_add_style>
            list = lv_obj_get_style_list(obj, LV_SPINNER_PART_INDIC);
 80167b6:	2101      	movs	r1, #1
 80167b8:	4620      	mov	r0, r4
 80167ba:	f7ee fb11 	bl	8004de0 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->arc_indic);
 80167be:	6829      	ldr	r1, [r5, #0]
 80167c0:	311c      	adds	r1, #28
 80167c2:	f7f2 fa53 	bl	8008c6c <_lv_style_list_add_style>
            break;
 80167c6:	e709      	b.n	80165dc <theme_apply+0xac>
            _lv_style_list_add_style(list, &styles->bg);
 80167c8:	4e43      	ldr	r6, [pc, #268]	; (80168d8 <theme_apply+0x3a8>)
            list = lv_obj_get_style_list(obj, LV_BTN_PART_MAIN);
 80167ca:	2100      	movs	r1, #0
 80167cc:	4620      	mov	r0, r4
 80167ce:	f7ee fb07 	bl	8004de0 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->bg);
 80167d2:	6831      	ldr	r1, [r6, #0]
            list = lv_obj_get_style_list(obj, LV_BTN_PART_MAIN);
 80167d4:	4605      	mov	r5, r0
            _lv_style_list_add_style(list, &styles->bg);
 80167d6:	3104      	adds	r1, #4
 80167d8:	f7f2 fa48 	bl	8008c6c <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->bg_click);
 80167dc:	6831      	ldr	r1, [r6, #0]
 80167de:	4628      	mov	r0, r5
 80167e0:	3108      	adds	r1, #8
 80167e2:	f7f2 fa43 	bl	8008c6c <_lv_style_list_add_style>
            break;
 80167e6:	e6f9      	b.n	80165dc <theme_apply+0xac>
            _lv_style_list_add_style(list, &styles->bg);
 80167e8:	4d3b      	ldr	r5, [pc, #236]	; (80168d8 <theme_apply+0x3a8>)
            list = lv_obj_get_style_list(obj, LV_SPINBOX_PART_BG);
 80167ea:	2100      	movs	r1, #0
 80167ec:	4620      	mov	r0, r4
 80167ee:	f7ee faf7 	bl	8004de0 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->bg);
 80167f2:	6829      	ldr	r1, [r5, #0]
            list = lv_obj_get_style_list(obj, LV_SPINBOX_PART_BG);
 80167f4:	4606      	mov	r6, r0
            _lv_style_list_add_style(list, &styles->bg);
 80167f6:	3104      	adds	r1, #4
 80167f8:	f7f2 fa38 	bl	8008c6c <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->pad_small);
 80167fc:	6829      	ldr	r1, [r5, #0]
 80167fe:	4630      	mov	r0, r6
 8016800:	3118      	adds	r1, #24
 8016802:	f7f2 fa33 	bl	8008c6c <_lv_style_list_add_style>
            list = lv_obj_get_style_list(obj, LV_SPINBOX_PART_CURSOR);
 8016806:	2103      	movs	r1, #3
 8016808:	4620      	mov	r0, r4
 801680a:	f7ee fae9 	bl	8004de0 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->spinbox_cursor);
 801680e:	6829      	ldr	r1, [r5, #0]
 8016810:	319c      	adds	r1, #156	; 0x9c
 8016812:	f7f2 fa2b 	bl	8008c6c <_lv_style_list_add_style>
            break;
 8016816:	e6e1      	b.n	80165dc <theme_apply+0xac>
            _lv_style_list_add_style(list, &styles->bar_bg);
 8016818:	4d2f      	ldr	r5, [pc, #188]	; (80168d8 <theme_apply+0x3a8>)
            list = lv_obj_get_style_list(obj, LV_SLIDER_PART_BG);
 801681a:	2100      	movs	r1, #0
 801681c:	4620      	mov	r0, r4
 801681e:	f7ee fadf 	bl	8004de0 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->bar_bg);
 8016822:	6829      	ldr	r1, [r5, #0]
            list = lv_obj_get_style_list(obj, LV_SLIDER_PART_BG);
 8016824:	4606      	mov	r6, r0
            _lv_style_list_add_style(list, &styles->bar_bg);
 8016826:	3128      	adds	r1, #40	; 0x28
 8016828:	f7f2 fa20 	bl	8008c6c <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->slider_bg);
 801682c:	6829      	ldr	r1, [r5, #0]
 801682e:	4630      	mov	r0, r6
 8016830:	3198      	adds	r1, #152	; 0x98
 8016832:	f7f2 fa1b 	bl	8008c6c <_lv_style_list_add_style>
            list = lv_obj_get_style_list(obj, LV_SLIDER_PART_INDIC);
 8016836:	2101      	movs	r1, #1
 8016838:	4620      	mov	r0, r4
 801683a:	f7ee fad1 	bl	8004de0 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->bar_indic);
 801683e:	6829      	ldr	r1, [r5, #0]
 8016840:	312c      	adds	r1, #44	; 0x2c
 8016842:	f7f2 fa13 	bl	8008c6c <_lv_style_list_add_style>
            list = lv_obj_get_style_list(obj, LV_SLIDER_PART_KNOB);
 8016846:	2102      	movs	r1, #2
 8016848:	4620      	mov	r0, r4
 801684a:	f7ee fac9 	bl	8004de0 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->slider_knob);
 801684e:	6829      	ldr	r1, [r5, #0]
 8016850:	3194      	adds	r1, #148	; 0x94
 8016852:	f7f2 fa0b 	bl	8008c6c <_lv_style_list_add_style>
            break;
 8016856:	e6c1      	b.n	80165dc <theme_apply+0xac>
            _lv_style_list_add_style(list, &styles->bg);
 8016858:	4d1f      	ldr	r5, [pc, #124]	; (80168d8 <theme_apply+0x3a8>)
            list = lv_obj_get_style_list(obj, LV_ROLLER_PART_BG);
 801685a:	2100      	movs	r1, #0
 801685c:	4620      	mov	r0, r4
 801685e:	f7ee fabf 	bl	8004de0 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->bg);
 8016862:	6829      	ldr	r1, [r5, #0]
            list = lv_obj_get_style_list(obj, LV_ROLLER_PART_BG);
 8016864:	4606      	mov	r6, r0
            _lv_style_list_add_style(list, &styles->bg);
 8016866:	3104      	adds	r1, #4
 8016868:	f7f2 fa00 	bl	8008c6c <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->roller_bg);
 801686c:	6829      	ldr	r1, [r5, #0]
 801686e:	4630      	mov	r0, r6
 8016870:	318c      	adds	r1, #140	; 0x8c
 8016872:	f7f2 f9fb 	bl	8008c6c <_lv_style_list_add_style>
            list = lv_obj_get_style_list(obj, LV_ROLLER_PART_SELECTED);
 8016876:	2103      	movs	r1, #3
 8016878:	4620      	mov	r0, r4
 801687a:	f7ee fab1 	bl	8004de0 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->roller_sel);
 801687e:	6829      	ldr	r1, [r5, #0]
 8016880:	3190      	adds	r1, #144	; 0x90
 8016882:	f7f2 f9f3 	bl	8008c6c <_lv_style_list_add_style>
            break;
 8016886:	e6a9      	b.n	80165dc <theme_apply+0xac>
            _lv_style_list_add_style(list, &styles->bg);
 8016888:	4d13      	ldr	r5, [pc, #76]	; (80168d8 <theme_apply+0x3a8>)
            list = lv_obj_get_style_list(obj, LV_PAGE_PART_BG);
 801688a:	2100      	movs	r1, #0
 801688c:	4620      	mov	r0, r4
 801688e:	f7ee faa7 	bl	8004de0 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->bg);
 8016892:	6829      	ldr	r1, [r5, #0]
 8016894:	3104      	adds	r1, #4
 8016896:	f7f2 f9e9 	bl	8008c6c <_lv_style_list_add_style>
            list = lv_obj_get_style_list(obj, LV_PAGE_PART_SCROLLABLE);
 801689a:	2140      	movs	r1, #64	; 0x40
 801689c:	4620      	mov	r0, r4
 801689e:	f7ee fa9f 	bl	8004de0 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->pad_inner);
 80168a2:	6829      	ldr	r1, [r5, #0]
 80168a4:	3114      	adds	r1, #20
 80168a6:	e70f      	b.n	80166c8 <theme_apply+0x198>
            list = lv_obj_get_style_list(obj, LV_OBJMASK_PART_MAIN);
 80168a8:	2100      	movs	r1, #0
 80168aa:	4620      	mov	r0, r4
 80168ac:	f7ee fa98 	bl	8004de0 <lv_obj_get_style_list>
            break;
 80168b0:	e694      	b.n	80165dc <theme_apply+0xac>
            _lv_style_list_add_style(list, &styles->pad_small);
 80168b2:	4d09      	ldr	r5, [pc, #36]	; (80168d8 <theme_apply+0x3a8>)
            list = lv_obj_get_style_list(obj, LV_MSGBOX_PART_BTN_BG);
 80168b4:	2140      	movs	r1, #64	; 0x40
 80168b6:	4620      	mov	r0, r4
 80168b8:	f7ee fa92 	bl	8004de0 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->pad_small);
 80168bc:	6829      	ldr	r1, [r5, #0]
 80168be:	3118      	adds	r1, #24
 80168c0:	f7f2 f9d4 	bl	8008c6c <_lv_style_list_add_style>
            list = lv_obj_get_style_list(obj, LV_MSGBOX_PART_BTN);
 80168c4:	2141      	movs	r1, #65	; 0x41
 80168c6:	4620      	mov	r0, r4
 80168c8:	f7ee fa8a 	bl	8004de0 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->btn);
 80168cc:	6829      	ldr	r1, [r5, #0]
 80168ce:	3110      	adds	r1, #16
 80168d0:	f7f2 f9cc 	bl	8008c6c <_lv_style_list_add_style>
            break;
 80168d4:	e682      	b.n	80165dc <theme_apply+0xac>
 80168d6:	bf00      	nop
 80168d8:	200201a8 	.word	0x200201a8
            _lv_style_list_add_style(list, &styles->bg);
 80168dc:	4ead      	ldr	r6, [pc, #692]	; (8016b94 <theme_apply+0x664>)
            list = lv_obj_get_style_list(obj, LV_MSGBOX_PART_BG);
 80168de:	2100      	movs	r1, #0
 80168e0:	4620      	mov	r0, r4
 80168e2:	f7ee fa7d 	bl	8004de0 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->bg);
 80168e6:	6831      	ldr	r1, [r6, #0]
            list = lv_obj_get_style_list(obj, LV_MSGBOX_PART_BG);
 80168e8:	4605      	mov	r5, r0
            _lv_style_list_add_style(list, &styles->bg);
 80168ea:	3104      	adds	r1, #4
 80168ec:	f7f2 f9be 	bl	8008c6c <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->mbox_bg);
 80168f0:	6831      	ldr	r1, [r6, #0]
 80168f2:	4628      	mov	r0, r5
 80168f4:	3180      	adds	r1, #128	; 0x80
 80168f6:	f7f2 f9b9 	bl	8008c6c <_lv_style_list_add_style>
            break;
 80168fa:	e66f      	b.n	80165dc <theme_apply+0xac>
            _lv_style_list_add_style(list, &styles->bg);
 80168fc:	4ea5      	ldr	r6, [pc, #660]	; (8016b94 <theme_apply+0x664>)
            list = lv_obj_get_style_list(obj, LV_LINEMETER_PART_MAIN);
 80168fe:	2100      	movs	r1, #0
 8016900:	4620      	mov	r0, r4
 8016902:	f7ee fa6d 	bl	8004de0 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->bg);
 8016906:	6831      	ldr	r1, [r6, #0]
            list = lv_obj_get_style_list(obj, LV_LINEMETER_PART_MAIN);
 8016908:	4605      	mov	r5, r0
            _lv_style_list_add_style(list, &styles->bg);
 801690a:	3104      	adds	r1, #4
 801690c:	f7f2 f9ae 	bl	8008c6c <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->lmeter);
 8016910:	6831      	ldr	r1, [r6, #0]
 8016912:	4628      	mov	r0, r5
 8016914:	3174      	adds	r1, #116	; 0x74
 8016916:	f7f2 f9a9 	bl	8008c6c <_lv_style_list_add_style>
            break;
 801691a:	e65f      	b.n	80165dc <theme_apply+0xac>
            list = lv_obj_get_style_list(obj, LV_BTN_PART_MAIN);
 801691c:	2100      	movs	r1, #0
 801691e:	4620      	mov	r0, r4
 8016920:	f7ee fa5e 	bl	8004de0 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->list_btn);
 8016924:	4b9b      	ldr	r3, [pc, #620]	; (8016b94 <theme_apply+0x664>)
 8016926:	6819      	ldr	r1, [r3, #0]
 8016928:	317c      	adds	r1, #124	; 0x7c
 801692a:	f7f2 f99f 	bl	8008c6c <_lv_style_list_add_style>
            break;
 801692e:	e655      	b.n	80165dc <theme_apply+0xac>
            _lv_style_list_add_style(list, &styles->bg);
 8016930:	4d98      	ldr	r5, [pc, #608]	; (8016b94 <theme_apply+0x664>)
            list = lv_obj_get_style_list(obj, LV_LIST_PART_BG);
 8016932:	2100      	movs	r1, #0
 8016934:	4620      	mov	r0, r4
 8016936:	f7ee fa53 	bl	8004de0 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->bg);
 801693a:	6829      	ldr	r1, [r5, #0]
            list = lv_obj_get_style_list(obj, LV_LIST_PART_BG);
 801693c:	4606      	mov	r6, r0
            _lv_style_list_add_style(list, &styles->bg);
 801693e:	3104      	adds	r1, #4
 8016940:	f7f2 f994 	bl	8008c6c <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->list_bg);
 8016944:	6829      	ldr	r1, [r5, #0]
 8016946:	4630      	mov	r0, r6
 8016948:	3178      	adds	r1, #120	; 0x78
 801694a:	e63d      	b.n	80165c8 <theme_apply+0x98>
            list = lv_obj_get_style_list(obj, LV_LED_PART_MAIN);
 801694c:	2100      	movs	r1, #0
 801694e:	4620      	mov	r0, r4
 8016950:	f7ee fa46 	bl	8004de0 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->led);
 8016954:	4b8f      	ldr	r3, [pc, #572]	; (8016b94 <theme_apply+0x664>)
 8016956:	6819      	ldr	r1, [r3, #0]
 8016958:	3170      	adds	r1, #112	; 0x70
 801695a:	f7f2 f987 	bl	8008c6c <_lv_style_list_add_style>
            break;
 801695e:	e63d      	b.n	80165dc <theme_apply+0xac>
            _lv_style_list_add_style(list, &styles->scr);
 8016960:	4d8c      	ldr	r5, [pc, #560]	; (8016b94 <theme_apply+0x664>)
            list = lv_obj_get_style_list(obj, LV_KEYBOARD_PART_BG);
 8016962:	2100      	movs	r1, #0
 8016964:	4620      	mov	r0, r4
 8016966:	f7ee fa3b 	bl	8004de0 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->scr);
 801696a:	6829      	ldr	r1, [r5, #0]
            list = lv_obj_get_style_list(obj, LV_KEYBOARD_PART_BG);
 801696c:	4606      	mov	r6, r0
            _lv_style_list_add_style(list, &styles->scr);
 801696e:	f7f2 f97d 	bl	8008c6c <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->kb_bg);
 8016972:	6829      	ldr	r1, [r5, #0]
 8016974:	4630      	mov	r0, r6
 8016976:	316c      	adds	r1, #108	; 0x6c
 8016978:	f7f2 f978 	bl	8008c6c <_lv_style_list_add_style>
            list = lv_obj_get_style_list(obj, LV_KEYBOARD_PART_BTN);
 801697c:	2101      	movs	r1, #1
 801697e:	4620      	mov	r0, r4
 8016980:	f7ee fa2e 	bl	8004de0 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->bg);
 8016984:	6829      	ldr	r1, [r5, #0]
            list = lv_obj_get_style_list(obj, LV_KEYBOARD_PART_BTN);
 8016986:	4606      	mov	r6, r0
            _lv_style_list_add_style(list, &styles->bg);
 8016988:	3104      	adds	r1, #4
 801698a:	f7f2 f96f 	bl	8008c6c <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->bg_click);
 801698e:	6829      	ldr	r1, [r5, #0]
 8016990:	4630      	mov	r0, r6
 8016992:	3108      	adds	r1, #8
 8016994:	f7f2 f96a 	bl	8008c6c <_lv_style_list_add_style>
            break;
 8016998:	e620      	b.n	80165dc <theme_apply+0xac>
            _lv_style_list_add_style(list, &styles->bg);
 801699a:	4d7e      	ldr	r5, [pc, #504]	; (8016b94 <theme_apply+0x664>)
            list = lv_obj_get_style_list(obj, LV_GAUGE_PART_MAIN);
 801699c:	2100      	movs	r1, #0
 801699e:	4620      	mov	r0, r4
 80169a0:	f7ee fa1e 	bl	8004de0 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->bg);
 80169a4:	6829      	ldr	r1, [r5, #0]
            list = lv_obj_get_style_list(obj, LV_GAUGE_PART_MAIN);
 80169a6:	4606      	mov	r6, r0
            _lv_style_list_add_style(list, &styles->bg);
 80169a8:	3104      	adds	r1, #4
 80169aa:	f7f2 f95f 	bl	8008c6c <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->gauge_main);
 80169ae:	6829      	ldr	r1, [r5, #0]
 80169b0:	4630      	mov	r0, r6
 80169b2:	3160      	adds	r1, #96	; 0x60
 80169b4:	f7f2 f95a 	bl	8008c6c <_lv_style_list_add_style>
            list = lv_obj_get_style_list(obj, LV_GAUGE_PART_MAJOR);
 80169b8:	2101      	movs	r1, #1
 80169ba:	4620      	mov	r0, r4
 80169bc:	f7ee fa10 	bl	8004de0 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->gauge_strong);
 80169c0:	6829      	ldr	r1, [r5, #0]
 80169c2:	3164      	adds	r1, #100	; 0x64
 80169c4:	f7f2 f952 	bl	8008c6c <_lv_style_list_add_style>
            list = lv_obj_get_style_list(obj, LV_GAUGE_PART_NEEDLE);
 80169c8:	2102      	movs	r1, #2
 80169ca:	4620      	mov	r0, r4
 80169cc:	f7ee fa08 	bl	8004de0 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->gauge_needle);
 80169d0:	6829      	ldr	r1, [r5, #0]
 80169d2:	3168      	adds	r1, #104	; 0x68
 80169d4:	f7f2 f94a 	bl	8008c6c <_lv_style_list_add_style>
            break;
 80169d8:	e600      	b.n	80165dc <theme_apply+0xac>
            _lv_style_list_add_style(list, &styles->bg);
 80169da:	4d6e      	ldr	r5, [pc, #440]	; (8016b94 <theme_apply+0x664>)
            list = lv_obj_get_style_list(obj, LV_DROPDOWN_PART_MAIN);
 80169dc:	2100      	movs	r1, #0
 80169de:	4620      	mov	r0, r4
 80169e0:	f7ee f9fe 	bl	8004de0 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->bg);
 80169e4:	6829      	ldr	r1, [r5, #0]
            list = lv_obj_get_style_list(obj, LV_DROPDOWN_PART_MAIN);
 80169e6:	4606      	mov	r6, r0
            _lv_style_list_add_style(list, &styles->bg);
 80169e8:	3104      	adds	r1, #4
 80169ea:	f7f2 f93f 	bl	8008c6c <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->bg_click);
 80169ee:	6829      	ldr	r1, [r5, #0]
 80169f0:	4630      	mov	r0, r6
 80169f2:	3108      	adds	r1, #8
 80169f4:	f7f2 f93a 	bl	8008c6c <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->pad_small);
 80169f8:	6829      	ldr	r1, [r5, #0]
 80169fa:	4630      	mov	r0, r6
 80169fc:	3118      	adds	r1, #24
 80169fe:	f7f2 f935 	bl	8008c6c <_lv_style_list_add_style>
            list = lv_obj_get_style_list(obj, LV_DROPDOWN_PART_LIST);
 8016a02:	2140      	movs	r1, #64	; 0x40
 8016a04:	4620      	mov	r0, r4
 8016a06:	f7ee f9eb 	bl	8004de0 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->bg);
 8016a0a:	6829      	ldr	r1, [r5, #0]
            list = lv_obj_get_style_list(obj, LV_DROPDOWN_PART_LIST);
 8016a0c:	4606      	mov	r6, r0
            _lv_style_list_add_style(list, &styles->bg);
 8016a0e:	3104      	adds	r1, #4
 8016a10:	f7f2 f92c 	bl	8008c6c <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->ddlist_page);
 8016a14:	6829      	ldr	r1, [r5, #0]
 8016a16:	4630      	mov	r0, r6
 8016a18:	3158      	adds	r1, #88	; 0x58
 8016a1a:	f7f2 f927 	bl	8008c6c <_lv_style_list_add_style>
            list = lv_obj_get_style_list(obj, LV_DROPDOWN_PART_SCROLLBAR);
 8016a1e:	2141      	movs	r1, #65	; 0x41
 8016a20:	4620      	mov	r0, r4
 8016a22:	f7ee f9dd 	bl	8004de0 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->sb);
 8016a26:	6829      	ldr	r1, [r5, #0]
 8016a28:	3184      	adds	r1, #132	; 0x84
 8016a2a:	f7f2 f91f 	bl	8008c6c <_lv_style_list_add_style>
            list = lv_obj_get_style_list(obj, LV_DROPDOWN_PART_SELECTED);
 8016a2e:	2142      	movs	r1, #66	; 0x42
 8016a30:	4620      	mov	r0, r4
 8016a32:	f7ee f9d5 	bl	8004de0 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->ddlist_sel);
 8016a36:	6829      	ldr	r1, [r5, #0]
 8016a38:	315c      	adds	r1, #92	; 0x5c
 8016a3a:	f7f2 f917 	bl	8008c6c <_lv_style_list_add_style>
            break;
 8016a3e:	e5cd      	b.n	80165dc <theme_apply+0xac>
            _lv_style_list_add_style(list, &styles->cpicker_bg);
 8016a40:	4d54      	ldr	r5, [pc, #336]	; (8016b94 <theme_apply+0x664>)
            list = lv_obj_get_style_list(obj, LV_CPICKER_PART_MAIN);
 8016a42:	2100      	movs	r1, #0
 8016a44:	4620      	mov	r0, r4
 8016a46:	f7ee f9cb 	bl	8004de0 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->cpicker_bg);
 8016a4a:	6829      	ldr	r1, [r5, #0]
 8016a4c:	313c      	adds	r1, #60	; 0x3c
 8016a4e:	f7f2 f90d 	bl	8008c6c <_lv_style_list_add_style>
            list = lv_obj_get_style_list(obj, LV_CPICKER_PART_KNOB);
 8016a52:	2101      	movs	r1, #1
 8016a54:	4620      	mov	r0, r4
 8016a56:	f7ee f9c3 	bl	8004de0 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->cpicker_indic);
 8016a5a:	6829      	ldr	r1, [r5, #0]
 8016a5c:	3140      	adds	r1, #64	; 0x40
 8016a5e:	f7f2 f905 	bl	8008c6c <_lv_style_list_add_style>
            break;
 8016a62:	e5bb      	b.n	80165dc <theme_apply+0xac>
            _lv_style_list_add_style(list, &styles->bg);
 8016a64:	4d4b      	ldr	r5, [pc, #300]	; (8016b94 <theme_apply+0x664>)
            list = lv_obj_get_style_list(obj, LV_CHART_PART_BG);
 8016a66:	2100      	movs	r1, #0
 8016a68:	4620      	mov	r0, r4
 8016a6a:	f7ee f9b9 	bl	8004de0 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->bg);
 8016a6e:	6829      	ldr	r1, [r5, #0]
            list = lv_obj_get_style_list(obj, LV_CHART_PART_BG);
 8016a70:	4606      	mov	r6, r0
            _lv_style_list_add_style(list, &styles->bg);
 8016a72:	3104      	adds	r1, #4
 8016a74:	f7f2 f8fa 	bl	8008c6c <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->chart_bg);
 8016a78:	6829      	ldr	r1, [r5, #0]
 8016a7a:	4630      	mov	r0, r6
 8016a7c:	3144      	adds	r1, #68	; 0x44
 8016a7e:	f7f2 f8f5 	bl	8008c6c <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->pad_small);
 8016a82:	6829      	ldr	r1, [r5, #0]
 8016a84:	4630      	mov	r0, r6
 8016a86:	3118      	adds	r1, #24
 8016a88:	f7f2 f8f0 	bl	8008c6c <_lv_style_list_add_style>
            list = lv_obj_get_style_list(obj, LV_CHART_PART_SERIES_BG);
 8016a8c:	2101      	movs	r1, #1
 8016a8e:	4620      	mov	r0, r4
 8016a90:	f7ee f9a6 	bl	8004de0 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->pad_small);
 8016a94:	6829      	ldr	r1, [r5, #0]
            list = lv_obj_get_style_list(obj, LV_CHART_PART_SERIES_BG);
 8016a96:	4606      	mov	r6, r0
            _lv_style_list_add_style(list, &styles->pad_small);
 8016a98:	3118      	adds	r1, #24
 8016a9a:	f7f2 f8e7 	bl	8008c6c <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->chart_series_bg);
 8016a9e:	6829      	ldr	r1, [r5, #0]
 8016aa0:	4630      	mov	r0, r6
 8016aa2:	3148      	adds	r1, #72	; 0x48
 8016aa4:	f7f2 f8e2 	bl	8008c6c <_lv_style_list_add_style>
            list = lv_obj_get_style_list(obj, LV_CHART_PART_CURSOR);
 8016aa8:	2103      	movs	r1, #3
 8016aaa:	4620      	mov	r0, r4
 8016aac:	f7ee f998 	bl	8004de0 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->chart_series_bg);
 8016ab0:	6829      	ldr	r1, [r5, #0]
 8016ab2:	3148      	adds	r1, #72	; 0x48
 8016ab4:	f7f2 f8da 	bl	8008c6c <_lv_style_list_add_style>
            list = lv_obj_get_style_list(obj, LV_CHART_PART_SERIES);
 8016ab8:	2102      	movs	r1, #2
 8016aba:	4620      	mov	r0, r4
 8016abc:	f7ee f990 	bl	8004de0 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->chart_series);
 8016ac0:	6829      	ldr	r1, [r5, #0]
 8016ac2:	314c      	adds	r1, #76	; 0x4c
 8016ac4:	f7f2 f8d2 	bl	8008c6c <_lv_style_list_add_style>
            break;
 8016ac8:	e588      	b.n	80165dc <theme_apply+0xac>
            _lv_style_list_add_style(list, &styles->cb_bg);
 8016aca:	4e32      	ldr	r6, [pc, #200]	; (8016b94 <theme_apply+0x664>)
            list = lv_obj_get_style_list(obj, LV_CHECKBOX_PART_BG);
 8016acc:	2100      	movs	r1, #0
 8016ace:	4620      	mov	r0, r4
 8016ad0:	f7ee f986 	bl	8004de0 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->cb_bg);
 8016ad4:	6831      	ldr	r1, [r6, #0]
 8016ad6:	3150      	adds	r1, #80	; 0x50
 8016ad8:	f7f2 f8c8 	bl	8008c6c <_lv_style_list_add_style>
            list = lv_obj_get_style_list(obj, LV_CHECKBOX_PART_BULLET);
 8016adc:	2140      	movs	r1, #64	; 0x40
 8016ade:	4620      	mov	r0, r4
 8016ae0:	f7ee f97e 	bl	8004de0 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->btn);
 8016ae4:	6831      	ldr	r1, [r6, #0]
            list = lv_obj_get_style_list(obj, LV_CHECKBOX_PART_BULLET);
 8016ae6:	4605      	mov	r5, r0
            _lv_style_list_add_style(list, &styles->btn);
 8016ae8:	3110      	adds	r1, #16
 8016aea:	f7f2 f8bf 	bl	8008c6c <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->cb_bullet);
 8016aee:	6831      	ldr	r1, [r6, #0]
 8016af0:	4628      	mov	r0, r5
 8016af2:	3154      	adds	r1, #84	; 0x54
 8016af4:	f7f2 f8ba 	bl	8008c6c <_lv_style_list_add_style>
            break;
 8016af8:	e570      	b.n	80165dc <theme_apply+0xac>
            _lv_style_list_add_style(list, &styles->bg);
 8016afa:	4d26      	ldr	r5, [pc, #152]	; (8016b94 <theme_apply+0x664>)
            list = lv_obj_get_style_list(obj, LV_CALENDAR_PART_BG);
 8016afc:	2100      	movs	r1, #0
 8016afe:	4620      	mov	r0, r4
 8016b00:	f7ee f96e 	bl	8004de0 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->bg);
 8016b04:	6829      	ldr	r1, [r5, #0]
 8016b06:	3104      	adds	r1, #4
 8016b08:	f7f2 f8b0 	bl	8008c6c <_lv_style_list_add_style>
            list = lv_obj_get_style_list(obj, LV_CALENDAR_PART_DATE);
 8016b0c:	2103      	movs	r1, #3
 8016b0e:	4620      	mov	r0, r4
 8016b10:	f7ee f966 	bl	8004de0 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->calendar_date_nums);
 8016b14:	6829      	ldr	r1, [r5, #0]
 8016b16:	3130      	adds	r1, #48	; 0x30
 8016b18:	f7f2 f8a8 	bl	8008c6c <_lv_style_list_add_style>
            list = lv_obj_get_style_list(obj, LV_CALENDAR_PART_HEADER);
 8016b1c:	2101      	movs	r1, #1
 8016b1e:	4620      	mov	r0, r4
 8016b20:	f7ee f95e 	bl	8004de0 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->calendar_header);
 8016b24:	6829      	ldr	r1, [r5, #0]
 8016b26:	3134      	adds	r1, #52	; 0x34
 8016b28:	f7f2 f8a0 	bl	8008c6c <_lv_style_list_add_style>
            list = lv_obj_get_style_list(obj, LV_CALENDAR_PART_DAY_NAMES);
 8016b2c:	2102      	movs	r1, #2
 8016b2e:	4620      	mov	r0, r4
 8016b30:	f7ee f956 	bl	8004de0 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->calendar_daynames);
 8016b34:	6829      	ldr	r1, [r5, #0]
 8016b36:	3138      	adds	r1, #56	; 0x38
 8016b38:	f7f2 f898 	bl	8008c6c <_lv_style_list_add_style>
            break;
 8016b3c:	e54e      	b.n	80165dc <theme_apply+0xac>
            _lv_style_list_add_style(list, &styles->bg);
 8016b3e:	4d15      	ldr	r5, [pc, #84]	; (8016b94 <theme_apply+0x664>)
            list = lv_obj_get_style_list(obj, LV_BTNMATRIX_PART_BG);
 8016b40:	2100      	movs	r1, #0
 8016b42:	4620      	mov	r0, r4
 8016b44:	f7ee f94c 	bl	8004de0 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->bg);
 8016b48:	6829      	ldr	r1, [r5, #0]
            list = lv_obj_get_style_list(obj, LV_BTNMATRIX_PART_BG);
 8016b4a:	4606      	mov	r6, r0
            _lv_style_list_add_style(list, &styles->bg);
 8016b4c:	3104      	adds	r1, #4
 8016b4e:	f7f2 f88d 	bl	8008c6c <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->pad_small);
 8016b52:	6829      	ldr	r1, [r5, #0]
 8016b54:	4630      	mov	r0, r6
 8016b56:	3118      	adds	r1, #24
 8016b58:	e70e      	b.n	8016978 <theme_apply+0x448>
            list = lv_obj_get_style_list(obj, LV_BTN_PART_MAIN);
 8016b5a:	2100      	movs	r1, #0
 8016b5c:	4620      	mov	r0, r4
 8016b5e:	f7ee f93f 	bl	8004de0 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->btn);
 8016b62:	4b0c      	ldr	r3, [pc, #48]	; (8016b94 <theme_apply+0x664>)
 8016b64:	6819      	ldr	r1, [r3, #0]
 8016b66:	3110      	adds	r1, #16
 8016b68:	f7f2 f880 	bl	8008c6c <_lv_style_list_add_style>
            break;
 8016b6c:	e536      	b.n	80165dc <theme_apply+0xac>
            _lv_style_list_add_style(list, &styles->bar_bg);
 8016b6e:	4d09      	ldr	r5, [pc, #36]	; (8016b94 <theme_apply+0x664>)
            list = lv_obj_get_style_list(obj, LV_BAR_PART_BG);
 8016b70:	2100      	movs	r1, #0
 8016b72:	4620      	mov	r0, r4
 8016b74:	f7ee f934 	bl	8004de0 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->bar_bg);
 8016b78:	6829      	ldr	r1, [r5, #0]
 8016b7a:	3128      	adds	r1, #40	; 0x28
 8016b7c:	f7f2 f876 	bl	8008c6c <_lv_style_list_add_style>
            list = lv_obj_get_style_list(obj, LV_BAR_PART_INDIC);
 8016b80:	2101      	movs	r1, #1
 8016b82:	4620      	mov	r0, r4
 8016b84:	f7ee f92c 	bl	8004de0 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->bar_indic);
 8016b88:	6829      	ldr	r1, [r5, #0]
 8016b8a:	312c      	adds	r1, #44	; 0x2c
 8016b8c:	f7f2 f86e 	bl	8008c6c <_lv_style_list_add_style>
            break;
 8016b90:	e524      	b.n	80165dc <theme_apply+0xac>
 8016b92:	bf00      	nop
 8016b94:	200201a8 	.word	0x200201a8

08016b98 <cpicker_init>:
{
 8016b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    style_init_reset(&styles->cpicker_bg);
 8016b9a:	4c98      	ldr	r4, [pc, #608]	; (8016dfc <cpicker_init+0x264>)
 *   STATIC FUNCTIONS
 **********************/

static void style_init_reset(lv_style_t * style)
{
    if(inited) lv_style_reset(style);
 8016b9c:	4d98      	ldr	r5, [pc, #608]	; (8016e00 <cpicker_init+0x268>)
    style_init_reset(&styles->cpicker_bg);
 8016b9e:	6820      	ldr	r0, [r4, #0]
    if(inited) lv_style_reset(style);
 8016ba0:	782b      	ldrb	r3, [r5, #0]
    style_init_reset(&styles->cpicker_bg);
 8016ba2:	303c      	adds	r0, #60	; 0x3c
    if(inited) lv_style_reset(style);
 8016ba4:	2b00      	cmp	r3, #0
 8016ba6:	f000 80c4 	beq.w	8016d32 <cpicker_init+0x19a>
 8016baa:	f7f2 f9bd 	bl	8008f28 <lv_style_reset>
    lv_style_set_scale_width(&styles->cpicker_bg, LV_STATE_DEFAULT, LV_DPX(30));
 8016bae:	2000      	movs	r0, #0
 8016bb0:	6826      	ldr	r6, [r4, #0]
 8016bb2:	f7fc fe95 	bl	80138e0 <lv_disp_get_dpi>
 8016bb6:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8016bba:	363c      	adds	r6, #60	; 0x3c
 8016bbc:	0040      	lsls	r0, r0, #1
 8016bbe:	28ef      	cmp	r0, #239	; 0xef
 8016bc0:	f300 80bd 	bgt.w	8016d3e <cpicker_init+0x1a6>
 8016bc4:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PATH, transition_path, lv_anim_path_t *, _ptr, scalar)
#else
/*For compatibility*/
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PATH, transition_path, const void *, _ptr, scalar)
#endif
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_WIDTH, scale_width, lv_style_int_t, _int, scalar)
 8016bc6:	4630      	mov	r0, r6
 8016bc8:	21c0      	movs	r1, #192	; 0xc0
 8016bca:	f7f2 f9b5 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_bg_opa(&styles->cpicker_bg, LV_STATE_DEFAULT, LV_OPA_COVER);
 8016bce:	6820      	ldr	r0, [r4, #0]
    lv_style_set_bg_color(&styles->cpicker_bg, LV_STATE_DEFAULT, COLOR_SCR);
 8016bd0:	4e8c      	ldr	r6, [pc, #560]	; (8016e04 <cpicker_init+0x26c>)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
 8016bd2:	22ff      	movs	r2, #255	; 0xff
 8016bd4:	212c      	movs	r1, #44	; 0x2c
 8016bd6:	303c      	adds	r0, #60	; 0x3c
 8016bd8:	f7f2 fb46 	bl	8009268 <_lv_style_set_opa>
 8016bdc:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8016bde:	2200      	movs	r2, #0
 8016be0:	6820      	ldr	r0, [r4, #0]
 8016be2:	f003 0302 	and.w	r3, r3, #2
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
 8016be6:	2129      	movs	r1, #41	; 0x29
 8016be8:	303c      	adds	r0, #60	; 0x3c
 8016bea:	4293      	cmp	r3, r2
 8016bec:	bf15      	itete	ne
 8016bee:	23f3      	movne	r3, #243	; 0xf3
 8016bf0:	235a      	moveq	r3, #90	; 0x5a
 8016bf2:	27ef      	movne	r7, #239	; 0xef
 8016bf4:	274b      	moveq	r7, #75	; 0x4b
 8016bf6:	f363 0207 	bfi	r2, r3, #0, #8
 8016bfa:	bf14      	ite	ne
 8016bfc:	23ea      	movne	r3, #234	; 0xea
 8016bfe:	2344      	moveq	r3, #68	; 0x44
 8016c00:	f367 220f 	bfi	r2, r7, #8, #8
 8016c04:	f363 4217 	bfi	r2, r3, #16, #8
 8016c08:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 8016c0c:	f7f2 fa62 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_pad_inner(&styles->cpicker_bg, LV_STATE_DEFAULT, LV_DPX(20));
 8016c10:	2000      	movs	r0, #0
 8016c12:	6827      	ldr	r7, [r4, #0]
 8016c14:	f7fc fe64 	bl	80138e0 <lv_disp_get_dpi>
 8016c18:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8016c1c:	373c      	adds	r7, #60	; 0x3c
 8016c1e:	0080      	lsls	r0, r0, #2
 8016c20:	28ef      	cmp	r0, #239	; 0xef
 8016c22:	f300 80dc 	bgt.w	8016dde <cpicker_init+0x246>
 8016c26:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
 8016c28:	4638      	mov	r0, r7
 8016c2a:	2114      	movs	r1, #20
 8016c2c:	f7f2 f984 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_radius(&styles->cpicker_bg, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
 8016c30:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
 8016c32:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8016c36:	2101      	movs	r1, #1
 8016c38:	303c      	adds	r0, #60	; 0x3c
 8016c3a:	f7f2 f97d 	bl	8008f38 <_lv_style_set_int>
    style_init_reset(&styles->cpicker_indic);
 8016c3e:	6820      	ldr	r0, [r4, #0]
    if(inited) lv_style_reset(style);
 8016c40:	782b      	ldrb	r3, [r5, #0]
    style_init_reset(&styles->cpicker_indic);
 8016c42:	3040      	adds	r0, #64	; 0x40
    if(inited) lv_style_reset(style);
 8016c44:	2b00      	cmp	r3, #0
 8016c46:	d077      	beq.n	8016d38 <cpicker_init+0x1a0>
 8016c48:	f7f2 f96e 	bl	8008f28 <lv_style_reset>
    lv_style_set_radius(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
 8016c4c:	6820      	ldr	r0, [r4, #0]
 8016c4e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8016c52:	2101      	movs	r1, #1
 8016c54:	3040      	adds	r0, #64	; 0x40
 8016c56:	f7f2 f96f 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_bg_color(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_COLOR_WHITE);
 8016c5a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
 8016c5c:	f04f 32ff 	mov.w	r2, #4294967295
 8016c60:	2129      	movs	r1, #41	; 0x29
 8016c62:	3040      	adds	r0, #64	; 0x40
 8016c64:	f7f2 fa36 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_bg_opa(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_OPA_COVER);
 8016c68:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
 8016c6a:	22ff      	movs	r2, #255	; 0xff
 8016c6c:	212c      	movs	r1, #44	; 0x2c
 8016c6e:	3040      	adds	r0, #64	; 0x40
 8016c70:	f7f2 fafa 	bl	8009268 <_lv_style_set_opa>
    lv_style_set_border_width(&styles->cpicker_indic, LV_STATE_DEFAULT, 2);
 8016c74:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
 8016c76:	2202      	movs	r2, #2
 8016c78:	2130      	movs	r1, #48	; 0x30
 8016c7a:	3040      	adds	r0, #64	; 0x40
 8016c7c:	f7f2 f95c 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_border_color(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_COLOR_GRAY);
 8016c80:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
 8016c82:	4a61      	ldr	r2, [pc, #388]	; (8016e08 <cpicker_init+0x270>)
 8016c84:	2139      	movs	r1, #57	; 0x39
 8016c86:	3040      	adds	r0, #64	; 0x40
 8016c88:	f7f2 fa24 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_border_color(&styles->cpicker_indic, LV_STATE_FOCUSED, theme.color_primary);
 8016c8c:	6820      	ldr	r0, [r4, #0]
 8016c8e:	68f2      	ldr	r2, [r6, #12]
 8016c90:	f240 2139 	movw	r1, #569	; 0x239
 8016c94:	3040      	adds	r0, #64	; 0x40
 8016c96:	f7f2 fa1d 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_border_color(&styles->cpicker_indic, LV_STATE_EDITED, theme.color_secondary);
 8016c9a:	6820      	ldr	r0, [r4, #0]
 8016c9c:	6932      	ldr	r2, [r6, #16]
 8016c9e:	f240 4139 	movw	r1, #1081	; 0x439
 8016ca2:	3040      	adds	r0, #64	; 0x40
 8016ca4:	f7f2 fa16 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_pad_left(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
 8016ca8:	6823      	ldr	r3, [r4, #0]
 8016caa:	2000      	movs	r0, #0
 8016cac:	f103 0540 	add.w	r5, r3, #64	; 0x40
 8016cb0:	f7fc fe16 	bl	80138e0 <lv_disp_get_dpi>
 8016cb4:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8016cb8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8016cbc:	28ef      	cmp	r0, #239	; 0xef
 8016cbe:	dc7f      	bgt.n	8016dc0 <cpicker_init+0x228>
 8016cc0:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
 8016cc2:	4628      	mov	r0, r5
 8016cc4:	2112      	movs	r1, #18
 8016cc6:	f7f2 f937 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_pad_right(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
 8016cca:	6823      	ldr	r3, [r4, #0]
 8016ccc:	2000      	movs	r0, #0
 8016cce:	f103 0540 	add.w	r5, r3, #64	; 0x40
 8016cd2:	f7fc fe05 	bl	80138e0 <lv_disp_get_dpi>
 8016cd6:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8016cda:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8016cde:	28ef      	cmp	r0, #239	; 0xef
 8016ce0:	dc5f      	bgt.n	8016da2 <cpicker_init+0x20a>
 8016ce2:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
 8016ce4:	4628      	mov	r0, r5
 8016ce6:	2113      	movs	r1, #19
 8016ce8:	f7f2 f926 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_pad_top(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
 8016cec:	6823      	ldr	r3, [r4, #0]
 8016cee:	2000      	movs	r0, #0
 8016cf0:	f103 0540 	add.w	r5, r3, #64	; 0x40
 8016cf4:	f7fc fdf4 	bl	80138e0 <lv_disp_get_dpi>
 8016cf8:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8016cfc:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8016d00:	28ef      	cmp	r0, #239	; 0xef
 8016d02:	dc3f      	bgt.n	8016d84 <cpicker_init+0x1ec>
 8016d04:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
 8016d06:	4628      	mov	r0, r5
 8016d08:	2110      	movs	r1, #16
 8016d0a:	f7f2 f915 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_pad_bottom(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
 8016d0e:	2000      	movs	r0, #0
 8016d10:	6824      	ldr	r4, [r4, #0]
 8016d12:	f7fc fde5 	bl	80138e0 <lv_disp_get_dpi>
 8016d16:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8016d1a:	3440      	adds	r4, #64	; 0x40
 8016d1c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8016d20:	28ef      	cmp	r0, #239	; 0xef
 8016d22:	dc1b      	bgt.n	8016d5c <cpicker_init+0x1c4>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
 8016d24:	4620      	mov	r0, r4
 8016d26:	2201      	movs	r2, #1
 8016d28:	2111      	movs	r1, #17
}
 8016d2a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8016d2e:	f7f2 b903 	b.w	8008f38 <_lv_style_set_int>
    else lv_style_init(style);
 8016d32:	f7f1 fde3 	bl	80088fc <lv_style_init>
 8016d36:	e73a      	b.n	8016bae <cpicker_init+0x16>
 8016d38:	f7f1 fde0 	bl	80088fc <lv_style_init>
 8016d3c:	e786      	b.n	8016c4c <cpicker_init+0xb4>
    lv_style_set_scale_width(&styles->cpicker_bg, LV_STATE_DEFAULT, LV_DPX(30));
 8016d3e:	2000      	movs	r0, #0
 8016d40:	f7fc fdce 	bl	80138e0 <lv_disp_get_dpi>
 8016d44:	231e      	movs	r3, #30
 8016d46:	2150      	movs	r1, #80	; 0x50
 8016d48:	4a30      	ldr	r2, [pc, #192]	; (8016e0c <cpicker_init+0x274>)
 8016d4a:	fb00 1003 	mla	r0, r0, r3, r1
 8016d4e:	fb82 2300 	smull	r2, r3, r2, r0
 8016d52:	17c2      	asrs	r2, r0, #31
 8016d54:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 8016d58:	b212      	sxth	r2, r2
 8016d5a:	e734      	b.n	8016bc6 <cpicker_init+0x2e>
    lv_style_set_pad_bottom(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
 8016d5c:	2000      	movs	r0, #0
 8016d5e:	f7fc fdbf 	bl	80138e0 <lv_disp_get_dpi>
 8016d62:	230d      	movs	r3, #13
 8016d64:	2150      	movs	r1, #80	; 0x50
 8016d66:	4a29      	ldr	r2, [pc, #164]	; (8016e0c <cpicker_init+0x274>)
 8016d68:	fb00 1003 	mla	r0, r0, r3, r1
 8016d6c:	2111      	movs	r1, #17
 8016d6e:	fb82 2300 	smull	r2, r3, r2, r0
 8016d72:	17c2      	asrs	r2, r0, #31
 8016d74:	4620      	mov	r0, r4
 8016d76:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
}
 8016d7a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    lv_style_set_pad_bottom(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
 8016d7e:	b212      	sxth	r2, r2
 8016d80:	f7f2 b8da 	b.w	8008f38 <_lv_style_set_int>
    lv_style_set_pad_top(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
 8016d84:	2000      	movs	r0, #0
 8016d86:	f7fc fdab 	bl	80138e0 <lv_disp_get_dpi>
 8016d8a:	230d      	movs	r3, #13
 8016d8c:	2150      	movs	r1, #80	; 0x50
 8016d8e:	4a1f      	ldr	r2, [pc, #124]	; (8016e0c <cpicker_init+0x274>)
 8016d90:	fb00 1003 	mla	r0, r0, r3, r1
 8016d94:	fb82 2300 	smull	r2, r3, r2, r0
 8016d98:	17c2      	asrs	r2, r0, #31
 8016d9a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 8016d9e:	b212      	sxth	r2, r2
 8016da0:	e7b1      	b.n	8016d06 <cpicker_init+0x16e>
    lv_style_set_pad_right(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
 8016da2:	2000      	movs	r0, #0
 8016da4:	f7fc fd9c 	bl	80138e0 <lv_disp_get_dpi>
 8016da8:	230d      	movs	r3, #13
 8016daa:	2150      	movs	r1, #80	; 0x50
 8016dac:	4a17      	ldr	r2, [pc, #92]	; (8016e0c <cpicker_init+0x274>)
 8016dae:	fb00 1003 	mla	r0, r0, r3, r1
 8016db2:	fb82 2300 	smull	r2, r3, r2, r0
 8016db6:	17c2      	asrs	r2, r0, #31
 8016db8:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 8016dbc:	b212      	sxth	r2, r2
 8016dbe:	e791      	b.n	8016ce4 <cpicker_init+0x14c>
    lv_style_set_pad_left(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
 8016dc0:	2000      	movs	r0, #0
 8016dc2:	f7fc fd8d 	bl	80138e0 <lv_disp_get_dpi>
 8016dc6:	230d      	movs	r3, #13
 8016dc8:	2150      	movs	r1, #80	; 0x50
 8016dca:	4a10      	ldr	r2, [pc, #64]	; (8016e0c <cpicker_init+0x274>)
 8016dcc:	fb00 1003 	mla	r0, r0, r3, r1
 8016dd0:	fb82 2300 	smull	r2, r3, r2, r0
 8016dd4:	17c2      	asrs	r2, r0, #31
 8016dd6:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 8016dda:	b212      	sxth	r2, r2
 8016ddc:	e771      	b.n	8016cc2 <cpicker_init+0x12a>
    lv_style_set_pad_inner(&styles->cpicker_bg, LV_STATE_DEFAULT, LV_DPX(20));
 8016dde:	2000      	movs	r0, #0
 8016de0:	f7fc fd7e 	bl	80138e0 <lv_disp_get_dpi>
 8016de4:	2314      	movs	r3, #20
 8016de6:	2150      	movs	r1, #80	; 0x50
 8016de8:	4a08      	ldr	r2, [pc, #32]	; (8016e0c <cpicker_init+0x274>)
 8016dea:	fb00 1003 	mla	r0, r0, r3, r1
 8016dee:	fb82 2300 	smull	r2, r3, r2, r0
 8016df2:	17c2      	asrs	r2, r0, #31
 8016df4:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 8016df8:	b212      	sxth	r2, r2
 8016dfa:	e715      	b.n	8016c28 <cpicker_init+0x90>
 8016dfc:	200201a8 	.word	0x200201a8
 8016e00:	200201a4 	.word	0x200201a4
 8016e04:	200201ac 	.word	0x200201ac
 8016e08:	ff808080 	.word	0xff808080
 8016e0c:	66666667 	.word	0x66666667

08016e10 <checkbox_init>:
{
 8016e10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    style_init_reset(&styles->cb_bg);
 8016e14:	4cbb      	ldr	r4, [pc, #748]	; (8017104 <checkbox_init+0x2f4>)
    if(inited) lv_style_reset(style);
 8016e16:	4dbc      	ldr	r5, [pc, #752]	; (8017108 <checkbox_init+0x2f8>)
    style_init_reset(&styles->cb_bg);
 8016e18:	6820      	ldr	r0, [r4, #0]
    if(inited) lv_style_reset(style);
 8016e1a:	782b      	ldrb	r3, [r5, #0]
    style_init_reset(&styles->cb_bg);
 8016e1c:	3050      	adds	r0, #80	; 0x50
    if(inited) lv_style_reset(style);
 8016e1e:	2b00      	cmp	r3, #0
 8016e20:	f000 80df 	beq.w	8016fe2 <checkbox_init+0x1d2>
 8016e24:	f7f2 f880 	bl	8008f28 <lv_style_reset>
    lv_style_set_radius(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(4));
 8016e28:	6823      	ldr	r3, [r4, #0]
 8016e2a:	2000      	movs	r0, #0
 8016e2c:	f103 0650 	add.w	r6, r3, #80	; 0x50
 8016e30:	f7fc fd56 	bl	80138e0 <lv_disp_get_dpi>
 8016e34:	283b      	cmp	r0, #59	; 0x3b
 8016e36:	f300 80da 	bgt.w	8016fee <checkbox_init+0x1de>
 8016e3a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
 8016e3c:	4630      	mov	r0, r6
 8016e3e:	2101      	movs	r1, #1
 8016e40:	f7f2 f87a 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_pad_inner(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(10));
 8016e44:	2000      	movs	r0, #0
 8016e46:	6826      	ldr	r6, [r4, #0]
 8016e48:	f7fc fd4a 	bl	80138e0 <lv_disp_get_dpi>
 8016e4c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8016e50:	3650      	adds	r6, #80	; 0x50
 8016e52:	0040      	lsls	r0, r0, #1
 8016e54:	28ef      	cmp	r0, #239	; 0xef
 8016e56:	f300 8139 	bgt.w	80170cc <checkbox_init+0x2bc>
 8016e5a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
 8016e5c:	4630      	mov	r0, r6
 8016e5e:	2114      	movs	r1, #20
 8016e60:	f7f2 f86a 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_outline_color(&styles->cb_bg, LV_STATE_DEFAULT, theme.color_primary);
 8016e64:	4ea9      	ldr	r6, [pc, #676]	; (801710c <checkbox_init+0x2fc>)
 8016e66:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_COLOR, outline_color, lv_color_t, _color, nonscalar)
 8016e68:	2149      	movs	r1, #73	; 0x49
 8016e6a:	68f2      	ldr	r2, [r6, #12]
 8016e6c:	3050      	adds	r0, #80	; 0x50
 8016e6e:	f7f2 f931 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_outline_opa(&styles->cb_bg, LV_STATE_DEFAULT, LV_OPA_TRANSP);
 8016e72:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa, scalar)
 8016e74:	2200      	movs	r2, #0
 8016e76:	214c      	movs	r1, #76	; 0x4c
 8016e78:	3050      	adds	r0, #80	; 0x50
 8016e7a:	f7f2 f9f5 	bl	8009268 <_lv_style_set_opa>
    lv_style_set_outline_opa(&styles->cb_bg, LV_STATE_FOCUSED, LV_OPA_50);
 8016e7e:	6820      	ldr	r0, [r4, #0]
 8016e80:	227f      	movs	r2, #127	; 0x7f
 8016e82:	f44f 7113 	mov.w	r1, #588	; 0x24c
 8016e86:	3050      	adds	r0, #80	; 0x50
 8016e88:	f7f2 f9ee 	bl	8009268 <_lv_style_set_opa>
    lv_style_set_outline_width(&styles->cb_bg, LV_STATE_DEFAULT, OUTLINE_WIDTH);
 8016e8c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8016e8e:	6822      	ldr	r2, [r4, #0]
 8016e90:	f013 0720 	ands.w	r7, r3, #32
 8016e94:	f102 0850 	add.w	r8, r2, #80	; 0x50
 8016e98:	f000 8111 	beq.w	80170be <checkbox_init+0x2ae>
 8016e9c:	2200      	movs	r2, #0
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int, scalar)
 8016e9e:	4640      	mov	r0, r8
 8016ea0:	2140      	movs	r1, #64	; 0x40
 8016ea2:	f7f2 f849 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_outline_pad(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(10));
 8016ea6:	2000      	movs	r0, #0
 8016ea8:	6827      	ldr	r7, [r4, #0]
 8016eaa:	f7fc fd19 	bl	80138e0 <lv_disp_get_dpi>
 8016eae:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8016eb2:	3750      	adds	r7, #80	; 0x50
 8016eb4:	0040      	lsls	r0, r0, #1
 8016eb6:	28ef      	cmp	r0, #239	; 0xef
 8016eb8:	f300 80f2 	bgt.w	80170a0 <checkbox_init+0x290>
 8016ebc:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_PAD, outline_pad, lv_style_int_t, _int, scalar)
 8016ebe:	4638      	mov	r0, r7
 8016ec0:	2141      	movs	r1, #65	; 0x41
 8016ec2:	f7f2 f839 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_transition_time(&styles->cb_bg, LV_STATE_DEFAULT, TRANSITION_TIME);
 8016ec6:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int, scalar)
 8016ec8:	2200      	movs	r2, #0
 8016eca:	21b0      	movs	r1, #176	; 0xb0
 8016ecc:	3050      	adds	r0, #80	; 0x50
 8016ece:	f7f2 f833 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_transition_prop_6(&styles->cb_bg, LV_STATE_DEFAULT, LV_STYLE_OUTLINE_OPA);
 8016ed2:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int, scalar)
 8016ed4:	224c      	movs	r2, #76	; 0x4c
 8016ed6:	21b7      	movs	r1, #183	; 0xb7
 8016ed8:	3050      	adds	r0, #80	; 0x50
 8016eda:	f7f2 f82d 	bl	8008f38 <_lv_style_set_int>
    style_init_reset(&styles->cb_bullet);
 8016ede:	6820      	ldr	r0, [r4, #0]
    if(inited) lv_style_reset(style);
 8016ee0:	782b      	ldrb	r3, [r5, #0]
    style_init_reset(&styles->cb_bullet);
 8016ee2:	3054      	adds	r0, #84	; 0x54
    if(inited) lv_style_reset(style);
 8016ee4:	2b00      	cmp	r3, #0
 8016ee6:	d07f      	beq.n	8016fe8 <checkbox_init+0x1d8>
 8016ee8:	f7f2 f81e 	bl	8008f28 <lv_style_reset>
    lv_style_set_outline_opa(&styles->cb_bullet, LV_STATE_FOCUSED, LV_OPA_TRANSP);
 8016eec:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa, scalar)
 8016eee:	2200      	movs	r2, #0
 8016ef0:	f44f 7113 	mov.w	r1, #588	; 0x24c
 8016ef4:	3054      	adds	r0, #84	; 0x54
 8016ef6:	f7f2 f9b7 	bl	8009268 <_lv_style_set_opa>
    lv_style_set_radius(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(4));
 8016efa:	6823      	ldr	r3, [r4, #0]
 8016efc:	2000      	movs	r0, #0
 8016efe:	f103 0554 	add.w	r5, r3, #84	; 0x54
 8016f02:	f7fc fced 	bl	80138e0 <lv_disp_get_dpi>
 8016f06:	283b      	cmp	r0, #59	; 0x3b
 8016f08:	f300 80be 	bgt.w	8017088 <checkbox_init+0x278>
 8016f0c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
 8016f0e:	4628      	mov	r0, r5
 8016f10:	2101      	movs	r1, #1
 8016f12:	f7f2 f811 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_pattern_image(&styles->cb_bullet, LV_STATE_CHECKED, LV_SYMBOL_OK);
 8016f16:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_IMAGE, pattern_image, const void *, _ptr, scalar)
 8016f18:	4a7d      	ldr	r2, [pc, #500]	; (8017110 <checkbox_init+0x300>)
 8016f1a:	f44f 71b7 	mov.w	r1, #366	; 0x16e
 8016f1e:	3054      	adds	r0, #84	; 0x54
 8016f20:	f7f2 fa64 	bl	80093ec <_lv_style_set_ptr>
    lv_style_set_pattern_recolor(&styles->cb_bullet, LV_STATE_CHECKED, LV_COLOR_WHITE);
 8016f24:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_RECOLOR, pattern_recolor, lv_color_t, _color, nonscalar)
 8016f26:	f04f 32ff 	mov.w	r2, #4294967295
 8016f2a:	f240 1169 	movw	r1, #361	; 0x169
 8016f2e:	3054      	adds	r0, #84	; 0x54
 8016f30:	f7f2 f8d0 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_pattern_opa(&styles->cb_bullet, LV_STATE_DEFAULT, LV_OPA_TRANSP);
 8016f34:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_OPA, pattern_opa, lv_opa_t, _opa, scalar)
 8016f36:	2200      	movs	r2, #0
 8016f38:	216c      	movs	r1, #108	; 0x6c
 8016f3a:	3054      	adds	r0, #84	; 0x54
 8016f3c:	f7f2 f994 	bl	8009268 <_lv_style_set_opa>
    lv_style_set_pattern_opa(&styles->cb_bullet, LV_STATE_CHECKED, LV_OPA_COVER);
 8016f40:	6820      	ldr	r0, [r4, #0]
 8016f42:	22ff      	movs	r2, #255	; 0xff
 8016f44:	f44f 71b6 	mov.w	r1, #364	; 0x16c
 8016f48:	3054      	adds	r0, #84	; 0x54
 8016f4a:	f7f2 f98d 	bl	8009268 <_lv_style_set_opa>
    lv_style_set_transition_prop_3(&styles->cb_bullet, LV_STATE_DEFAULT, LV_STYLE_PATTERN_OPA);
 8016f4e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_3, transition_prop_3, lv_style_int_t, _int, scalar)
 8016f50:	226c      	movs	r2, #108	; 0x6c
 8016f52:	21b4      	movs	r1, #180	; 0xb4
 8016f54:	3054      	adds	r0, #84	; 0x54
 8016f56:	f7f1 ffef 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_text_font(&styles->cb_bullet, LV_STATE_CHECKED, theme.font_small);
 8016f5a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
 8016f5c:	6972      	ldr	r2, [r6, #20]
 8016f5e:	f248 118e 	movw	r1, #33166	; 0x818e
 8016f62:	3054      	adds	r0, #84	; 0x54
 8016f64:	f7f2 fa42 	bl	80093ec <_lv_style_set_ptr>
    lv_style_set_pad_left(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
 8016f68:	6823      	ldr	r3, [r4, #0]
 8016f6a:	2000      	movs	r0, #0
 8016f6c:	f103 0554 	add.w	r5, r3, #84	; 0x54
 8016f70:	f7fc fcb6 	bl	80138e0 <lv_disp_get_dpi>
 8016f74:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8016f78:	28ef      	cmp	r0, #239	; 0xef
 8016f7a:	dc76      	bgt.n	801706a <checkbox_init+0x25a>
 8016f7c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
 8016f7e:	4628      	mov	r0, r5
 8016f80:	2112      	movs	r1, #18
 8016f82:	f7f1 ffd9 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_pad_right(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
 8016f86:	6823      	ldr	r3, [r4, #0]
 8016f88:	2000      	movs	r0, #0
 8016f8a:	f103 0554 	add.w	r5, r3, #84	; 0x54
 8016f8e:	f7fc fca7 	bl	80138e0 <lv_disp_get_dpi>
 8016f92:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8016f96:	28ef      	cmp	r0, #239	; 0xef
 8016f98:	dc58      	bgt.n	801704c <checkbox_init+0x23c>
 8016f9a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
 8016f9c:	4628      	mov	r0, r5
 8016f9e:	2113      	movs	r1, #19
 8016fa0:	f7f1 ffca 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_pad_top(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
 8016fa4:	6823      	ldr	r3, [r4, #0]
 8016fa6:	2000      	movs	r0, #0
 8016fa8:	f103 0554 	add.w	r5, r3, #84	; 0x54
 8016fac:	f7fc fc98 	bl	80138e0 <lv_disp_get_dpi>
 8016fb0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8016fb4:	28ef      	cmp	r0, #239	; 0xef
 8016fb6:	dc3a      	bgt.n	801702e <checkbox_init+0x21e>
 8016fb8:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
 8016fba:	4628      	mov	r0, r5
 8016fbc:	2110      	movs	r1, #16
 8016fbe:	f7f1 ffbb 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_pad_bottom(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
 8016fc2:	2000      	movs	r0, #0
 8016fc4:	6824      	ldr	r4, [r4, #0]
 8016fc6:	f7fc fc8b 	bl	80138e0 <lv_disp_get_dpi>
 8016fca:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8016fce:	3454      	adds	r4, #84	; 0x54
 8016fd0:	28ef      	cmp	r0, #239	; 0xef
 8016fd2:	dc18      	bgt.n	8017006 <checkbox_init+0x1f6>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
 8016fd4:	4620      	mov	r0, r4
 8016fd6:	2201      	movs	r2, #1
 8016fd8:	2111      	movs	r1, #17
}
 8016fda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016fde:	f7f1 bfab 	b.w	8008f38 <_lv_style_set_int>
    else lv_style_init(style);
 8016fe2:	f7f1 fc8b 	bl	80088fc <lv_style_init>
 8016fe6:	e71f      	b.n	8016e28 <checkbox_init+0x18>
 8016fe8:	f7f1 fc88 	bl	80088fc <lv_style_init>
 8016fec:	e77e      	b.n	8016eec <checkbox_init+0xdc>
    lv_style_set_radius(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(4));
 8016fee:	2000      	movs	r0, #0
 8016ff0:	f7fc fc76 	bl	80138e0 <lv_disp_get_dpi>
 8016ff4:	4b47      	ldr	r3, [pc, #284]	; (8017114 <checkbox_init+0x304>)
 8016ff6:	3014      	adds	r0, #20
 8016ff8:	fb83 2300 	smull	r2, r3, r3, r0
 8016ffc:	17c2      	asrs	r2, r0, #31
 8016ffe:	ebc2 1223 	rsb	r2, r2, r3, asr #4
 8017002:	b212      	sxth	r2, r2
 8017004:	e71a      	b.n	8016e3c <checkbox_init+0x2c>
    lv_style_set_pad_bottom(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
 8017006:	2000      	movs	r0, #0
 8017008:	f7fc fc6a 	bl	80138e0 <lv_disp_get_dpi>
 801700c:	2303      	movs	r3, #3
 801700e:	2150      	movs	r1, #80	; 0x50
 8017010:	4a40      	ldr	r2, [pc, #256]	; (8017114 <checkbox_init+0x304>)
 8017012:	fb00 1003 	mla	r0, r0, r3, r1
 8017016:	2111      	movs	r1, #17
 8017018:	fb82 2300 	smull	r2, r3, r2, r0
 801701c:	17c2      	asrs	r2, r0, #31
 801701e:	4620      	mov	r0, r4
 8017020:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
}
 8017024:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    lv_style_set_pad_bottom(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
 8017028:	b212      	sxth	r2, r2
 801702a:	f7f1 bf85 	b.w	8008f38 <_lv_style_set_int>
    lv_style_set_pad_top(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
 801702e:	2000      	movs	r0, #0
 8017030:	f7fc fc56 	bl	80138e0 <lv_disp_get_dpi>
 8017034:	2303      	movs	r3, #3
 8017036:	2150      	movs	r1, #80	; 0x50
 8017038:	4a36      	ldr	r2, [pc, #216]	; (8017114 <checkbox_init+0x304>)
 801703a:	fb00 1003 	mla	r0, r0, r3, r1
 801703e:	fb82 2300 	smull	r2, r3, r2, r0
 8017042:	17c2      	asrs	r2, r0, #31
 8017044:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 8017048:	b212      	sxth	r2, r2
 801704a:	e7b6      	b.n	8016fba <checkbox_init+0x1aa>
    lv_style_set_pad_right(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
 801704c:	2000      	movs	r0, #0
 801704e:	f7fc fc47 	bl	80138e0 <lv_disp_get_dpi>
 8017052:	2303      	movs	r3, #3
 8017054:	2150      	movs	r1, #80	; 0x50
 8017056:	4a2f      	ldr	r2, [pc, #188]	; (8017114 <checkbox_init+0x304>)
 8017058:	fb00 1003 	mla	r0, r0, r3, r1
 801705c:	fb82 2300 	smull	r2, r3, r2, r0
 8017060:	17c2      	asrs	r2, r0, #31
 8017062:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 8017066:	b212      	sxth	r2, r2
 8017068:	e798      	b.n	8016f9c <checkbox_init+0x18c>
    lv_style_set_pad_left(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
 801706a:	2000      	movs	r0, #0
 801706c:	f7fc fc38 	bl	80138e0 <lv_disp_get_dpi>
 8017070:	2303      	movs	r3, #3
 8017072:	2150      	movs	r1, #80	; 0x50
 8017074:	4a27      	ldr	r2, [pc, #156]	; (8017114 <checkbox_init+0x304>)
 8017076:	fb00 1003 	mla	r0, r0, r3, r1
 801707a:	fb82 2300 	smull	r2, r3, r2, r0
 801707e:	17c2      	asrs	r2, r0, #31
 8017080:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 8017084:	b212      	sxth	r2, r2
 8017086:	e77a      	b.n	8016f7e <checkbox_init+0x16e>
    lv_style_set_radius(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(4));
 8017088:	2000      	movs	r0, #0
 801708a:	f7fc fc29 	bl	80138e0 <lv_disp_get_dpi>
 801708e:	4b21      	ldr	r3, [pc, #132]	; (8017114 <checkbox_init+0x304>)
 8017090:	3014      	adds	r0, #20
 8017092:	fb83 2300 	smull	r2, r3, r3, r0
 8017096:	17c2      	asrs	r2, r0, #31
 8017098:	ebc2 1223 	rsb	r2, r2, r3, asr #4
 801709c:	b212      	sxth	r2, r2
 801709e:	e736      	b.n	8016f0e <checkbox_init+0xfe>
    lv_style_set_outline_pad(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(10));
 80170a0:	2000      	movs	r0, #0
 80170a2:	f7fc fc1d 	bl	80138e0 <lv_disp_get_dpi>
 80170a6:	230a      	movs	r3, #10
 80170a8:	2150      	movs	r1, #80	; 0x50
 80170aa:	4a1a      	ldr	r2, [pc, #104]	; (8017114 <checkbox_init+0x304>)
 80170ac:	fb00 1003 	mla	r0, r0, r3, r1
 80170b0:	fb82 2300 	smull	r2, r3, r2, r0
 80170b4:	17c2      	asrs	r2, r0, #31
 80170b6:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 80170ba:	b212      	sxth	r2, r2
 80170bc:	e6ff      	b.n	8016ebe <checkbox_init+0xae>
    lv_style_set_outline_width(&styles->cb_bg, LV_STATE_DEFAULT, OUTLINE_WIDTH);
 80170be:	4638      	mov	r0, r7
 80170c0:	f7fc fc0e 	bl	80138e0 <lv_disp_get_dpi>
 80170c4:	2877      	cmp	r0, #119	; 0x77
 80170c6:	dc10      	bgt.n	80170ea <checkbox_init+0x2da>
 80170c8:	2201      	movs	r2, #1
 80170ca:	e6e8      	b.n	8016e9e <checkbox_init+0x8e>
    lv_style_set_pad_inner(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(10));
 80170cc:	2000      	movs	r0, #0
 80170ce:	f7fc fc07 	bl	80138e0 <lv_disp_get_dpi>
 80170d2:	230a      	movs	r3, #10
 80170d4:	2150      	movs	r1, #80	; 0x50
 80170d6:	4a0f      	ldr	r2, [pc, #60]	; (8017114 <checkbox_init+0x304>)
 80170d8:	fb00 1003 	mla	r0, r0, r3, r1
 80170dc:	fb82 2300 	smull	r2, r3, r2, r0
 80170e0:	17c2      	asrs	r2, r0, #31
 80170e2:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 80170e6:	b212      	sxth	r2, r2
 80170e8:	e6b8      	b.n	8016e5c <checkbox_init+0x4c>
    lv_style_set_outline_width(&styles->cb_bg, LV_STATE_DEFAULT, OUTLINE_WIDTH);
 80170ea:	4638      	mov	r0, r7
 80170ec:	f7fc fbf8 	bl	80138e0 <lv_disp_get_dpi>
 80170f0:	4b08      	ldr	r3, [pc, #32]	; (8017114 <checkbox_init+0x304>)
 80170f2:	3028      	adds	r0, #40	; 0x28
 80170f4:	fb83 2300 	smull	r2, r3, r3, r0
 80170f8:	17c2      	asrs	r2, r0, #31
 80170fa:	ebc2 1263 	rsb	r2, r2, r3, asr #5
 80170fe:	b212      	sxth	r2, r2
 8017100:	e6cd      	b.n	8016e9e <checkbox_init+0x8e>
 8017102:	bf00      	nop
 8017104:	200201a8 	.word	0x200201a8
 8017108:	200201a4 	.word	0x200201a4
 801710c:	200201ac 	.word	0x200201ac
 8017110:	080218a0 	.word	0x080218a0
 8017114:	66666667 	.word	0x66666667

08017118 <gauge_init>:
{
 8017118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    style_init_reset(&styles->gauge_main);
 801711a:	4cd8      	ldr	r4, [pc, #864]	; (801747c <gauge_init+0x364>)
    if(inited) lv_style_reset(style);
 801711c:	4ed8      	ldr	r6, [pc, #864]	; (8017480 <gauge_init+0x368>)
    style_init_reset(&styles->gauge_main);
 801711e:	6820      	ldr	r0, [r4, #0]
    if(inited) lv_style_reset(style);
 8017120:	7833      	ldrb	r3, [r6, #0]
    style_init_reset(&styles->gauge_main);
 8017122:	3060      	adds	r0, #96	; 0x60
    if(inited) lv_style_reset(style);
 8017124:	2b00      	cmp	r3, #0
 8017126:	f000 814a 	beq.w	80173be <gauge_init+0x2a6>
 801712a:	f7f1 fefd 	bl	8008f28 <lv_style_reset>
    lv_style_set_line_color(&styles->gauge_main, LV_STATE_DEFAULT, lv_color_hex3(0x888));
 801712e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
 8017130:	2199      	movs	r1, #153	; 0x99
 8017132:	4ad4      	ldr	r2, [pc, #848]	; (8017484 <gauge_init+0x36c>)
 8017134:	3060      	adds	r0, #96	; 0x60
 8017136:	4dd4      	ldr	r5, [pc, #848]	; (8017488 <gauge_init+0x370>)
 8017138:	f7f1 ffcc 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_scale_grad_color(&styles->gauge_main, LV_STATE_DEFAULT, lv_color_hex3(0x888));
 801713c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_BORDER_WIDTH, scale_border_width, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_BORDER_WIDTH, scale_end_border_width, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_LINE_WIDTH, scale_end_line_width, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_GRAD_COLOR, scale_grad_color, lv_color_t, _color, nonscalar)
 801713e:	4ad1      	ldr	r2, [pc, #836]	; (8017484 <gauge_init+0x36c>)
 8017140:	21c9      	movs	r1, #201	; 0xc9
 8017142:	3060      	adds	r0, #96	; 0x60
 8017144:	f7f1 ffc6 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_scale_end_color(&styles->gauge_main, LV_STATE_DEFAULT, theme.color_primary);
 8017148:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_COLOR, scale_end_color, lv_color_t, _color, nonscalar)
 801714a:	68ea      	ldr	r2, [r5, #12]
 801714c:	21ca      	movs	r1, #202	; 0xca
 801714e:	3060      	adds	r0, #96	; 0x60
 8017150:	f7f1 ffc0 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_line_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(5));
 8017154:	2000      	movs	r0, #0
 8017156:	6827      	ldr	r7, [r4, #0]
 8017158:	f7fc fbc2 	bl	80138e0 <lv_disp_get_dpi>
 801715c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8017160:	3760      	adds	r7, #96	; 0x60
 8017162:	28ef      	cmp	r0, #239	; 0xef
 8017164:	f300 813c 	bgt.w	80173e0 <gauge_init+0x2c8>
 8017168:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
 801716a:	4638      	mov	r0, r7
 801716c:	2190      	movs	r1, #144	; 0x90
 801716e:	f7f1 fee3 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_scale_end_line_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(4));
 8017172:	6823      	ldr	r3, [r4, #0]
 8017174:	2000      	movs	r0, #0
 8017176:	f103 0760 	add.w	r7, r3, #96	; 0x60
 801717a:	f7fc fbb1 	bl	80138e0 <lv_disp_get_dpi>
 801717e:	283b      	cmp	r0, #59	; 0x3b
 8017180:	f300 81f5 	bgt.w	801756e <gauge_init+0x456>
 8017184:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_LINE_WIDTH, scale_end_line_width, lv_style_int_t, _int, scalar)
 8017186:	4638      	mov	r0, r7
 8017188:	21c3      	movs	r1, #195	; 0xc3
 801718a:	f7f1 fed5 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_scale_end_border_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(8));
 801718e:	6823      	ldr	r3, [r4, #0]
 8017190:	2000      	movs	r0, #0
 8017192:	f103 0760 	add.w	r7, r3, #96	; 0x60
 8017196:	f7fc fba3 	bl	80138e0 <lv_disp_get_dpi>
 801719a:	281d      	cmp	r0, #29
 801719c:	f300 81db 	bgt.w	8017556 <gauge_init+0x43e>
 80171a0:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_BORDER_WIDTH, scale_end_border_width, lv_style_int_t, _int, scalar)
 80171a2:	4638      	mov	r0, r7
 80171a4:	21c2      	movs	r1, #194	; 0xc2
 80171a6:	f7f1 fec7 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_pad_left(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
 80171aa:	2000      	movs	r0, #0
 80171ac:	6827      	ldr	r7, [r4, #0]
 80171ae:	f7fc fb97 	bl	80138e0 <lv_disp_get_dpi>
 80171b2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80171b6:	3760      	adds	r7, #96	; 0x60
 80171b8:	0080      	lsls	r0, r0, #2
 80171ba:	28ef      	cmp	r0, #239	; 0xef
 80171bc:	f300 81bc 	bgt.w	8017538 <gauge_init+0x420>
 80171c0:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
 80171c2:	4638      	mov	r0, r7
 80171c4:	2112      	movs	r1, #18
 80171c6:	f7f1 feb7 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_pad_right(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
 80171ca:	2000      	movs	r0, #0
 80171cc:	6827      	ldr	r7, [r4, #0]
 80171ce:	f7fc fb87 	bl	80138e0 <lv_disp_get_dpi>
 80171d2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80171d6:	3760      	adds	r7, #96	; 0x60
 80171d8:	0080      	lsls	r0, r0, #2
 80171da:	28ef      	cmp	r0, #239	; 0xef
 80171dc:	f300 819d 	bgt.w	801751a <gauge_init+0x402>
 80171e0:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
 80171e2:	4638      	mov	r0, r7
 80171e4:	2113      	movs	r1, #19
 80171e6:	f7f1 fea7 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_pad_top(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
 80171ea:	2000      	movs	r0, #0
 80171ec:	6827      	ldr	r7, [r4, #0]
 80171ee:	f7fc fb77 	bl	80138e0 <lv_disp_get_dpi>
 80171f2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80171f6:	3760      	adds	r7, #96	; 0x60
 80171f8:	0080      	lsls	r0, r0, #2
 80171fa:	28ef      	cmp	r0, #239	; 0xef
 80171fc:	f300 817e 	bgt.w	80174fc <gauge_init+0x3e4>
 8017200:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
 8017202:	4638      	mov	r0, r7
 8017204:	2110      	movs	r1, #16
 8017206:	f7f1 fe97 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_pad_inner(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
 801720a:	2000      	movs	r0, #0
 801720c:	6827      	ldr	r7, [r4, #0]
 801720e:	f7fc fb67 	bl	80138e0 <lv_disp_get_dpi>
 8017212:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8017216:	3760      	adds	r7, #96	; 0x60
 8017218:	0080      	lsls	r0, r0, #2
 801721a:	28ef      	cmp	r0, #239	; 0xef
 801721c:	f300 815f 	bgt.w	80174de <gauge_init+0x3c6>
 8017220:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
 8017222:	4638      	mov	r0, r7
 8017224:	2114      	movs	r1, #20
 8017226:	f7f1 fe87 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_scale_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(15));
 801722a:	2000      	movs	r0, #0
 801722c:	6827      	ldr	r7, [r4, #0]
 801722e:	f7fc fb57 	bl	80138e0 <lv_disp_get_dpi>
 8017232:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8017236:	3760      	adds	r7, #96	; 0x60
 8017238:	28ef      	cmp	r0, #239	; 0xef
 801723a:	f300 8141 	bgt.w	80174c0 <gauge_init+0x3a8>
 801723e:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_WIDTH, scale_width, lv_style_int_t, _int, scalar)
 8017240:	4638      	mov	r0, r7
 8017242:	21c0      	movs	r1, #192	; 0xc0
 8017244:	f7f1 fe78 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_radius(&styles->gauge_main, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
 8017248:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
 801724a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801724e:	2101      	movs	r1, #1
 8017250:	3060      	adds	r0, #96	; 0x60
 8017252:	f7f1 fe71 	bl	8008f38 <_lv_style_set_int>
    style_init_reset(&styles->gauge_strong);
 8017256:	6820      	ldr	r0, [r4, #0]
    if(inited) lv_style_reset(style);
 8017258:	7833      	ldrb	r3, [r6, #0]
    style_init_reset(&styles->gauge_strong);
 801725a:	3064      	adds	r0, #100	; 0x64
    if(inited) lv_style_reset(style);
 801725c:	2b00      	cmp	r3, #0
 801725e:	f000 80bc 	beq.w	80173da <gauge_init+0x2c2>
 8017262:	f7f1 fe61 	bl	8008f28 <lv_style_reset>
    lv_style_set_line_color(&styles->gauge_strong, LV_STATE_DEFAULT, lv_color_hex3(0x888));
 8017266:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
 8017268:	2199      	movs	r1, #153	; 0x99
 801726a:	4a86      	ldr	r2, [pc, #536]	; (8017484 <gauge_init+0x36c>)
 801726c:	3064      	adds	r0, #100	; 0x64
 801726e:	f7f1 ff31 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_scale_grad_color(&styles->gauge_strong, LV_STATE_DEFAULT, lv_color_hex3(0x888));
 8017272:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_GRAD_COLOR, scale_grad_color, lv_color_t, _color, nonscalar)
 8017274:	4a83      	ldr	r2, [pc, #524]	; (8017484 <gauge_init+0x36c>)
 8017276:	21c9      	movs	r1, #201	; 0xc9
 8017278:	3064      	adds	r0, #100	; 0x64
 801727a:	f7f1 ff2b 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_scale_end_color(&styles->gauge_strong, LV_STATE_DEFAULT, theme.color_primary);
 801727e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_COLOR, scale_end_color, lv_color_t, _color, nonscalar)
 8017280:	68ea      	ldr	r2, [r5, #12]
 8017282:	21ca      	movs	r1, #202	; 0xca
 8017284:	3064      	adds	r0, #100	; 0x64
 8017286:	f7f1 ff25 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_line_width(&styles->gauge_strong, LV_STATE_DEFAULT, LV_DPX(8));
 801728a:	6823      	ldr	r3, [r4, #0]
 801728c:	2000      	movs	r0, #0
 801728e:	f103 0764 	add.w	r7, r3, #100	; 0x64
 8017292:	f7fc fb25 	bl	80138e0 <lv_disp_get_dpi>
 8017296:	281d      	cmp	r0, #29
 8017298:	f300 8106 	bgt.w	80174a8 <gauge_init+0x390>
 801729c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
 801729e:	4638      	mov	r0, r7
 80172a0:	2190      	movs	r1, #144	; 0x90
 80172a2:	f7f1 fe49 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_scale_end_line_width(&styles->gauge_strong, LV_STATE_DEFAULT, LV_DPX(8));
 80172a6:	6823      	ldr	r3, [r4, #0]
 80172a8:	2000      	movs	r0, #0
 80172aa:	f103 0764 	add.w	r7, r3, #100	; 0x64
 80172ae:	f7fc fb17 	bl	80138e0 <lv_disp_get_dpi>
 80172b2:	281d      	cmp	r0, #29
 80172b4:	f300 80ec 	bgt.w	8017490 <gauge_init+0x378>
 80172b8:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_LINE_WIDTH, scale_end_line_width, lv_style_int_t, _int, scalar)
 80172ba:	4638      	mov	r0, r7
 80172bc:	21c3      	movs	r1, #195	; 0xc3
 80172be:	f7f1 fe3b 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_scale_width(&styles->gauge_strong, LV_STATE_DEFAULT, LV_DPX(25));
 80172c2:	2000      	movs	r0, #0
 80172c4:	6827      	ldr	r7, [r4, #0]
 80172c6:	f7fc fb0b 	bl	80138e0 <lv_disp_get_dpi>
 80172ca:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80172ce:	3764      	adds	r7, #100	; 0x64
 80172d0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80172d4:	28ef      	cmp	r0, #239	; 0xef
 80172d6:	f300 80c1 	bgt.w	801745c <gauge_init+0x344>
 80172da:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_WIDTH, scale_width, lv_style_int_t, _int, scalar)
 80172dc:	4638      	mov	r0, r7
 80172de:	21c0      	movs	r1, #192	; 0xc0
 80172e0:	f7f1 fe2a 	bl	8008f38 <_lv_style_set_int>
    style_init_reset(&styles->gauge_needle);
 80172e4:	6820      	ldr	r0, [r4, #0]
    if(inited) lv_style_reset(style);
 80172e6:	7833      	ldrb	r3, [r6, #0]
    style_init_reset(&styles->gauge_needle);
 80172e8:	3068      	adds	r0, #104	; 0x68
    if(inited) lv_style_reset(style);
 80172ea:	2b00      	cmp	r3, #0
 80172ec:	d072      	beq.n	80173d4 <gauge_init+0x2bc>
 80172ee:	f7f1 fe1b 	bl	8008f28 <lv_style_reset>
    lv_style_set_line_color(&styles->gauge_needle, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x464b5b) : LV_COLOR_WHITE);
 80172f2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80172f4:	6820      	ldr	r0, [r4, #0]
 80172f6:	079a      	lsls	r2, r3, #30
 80172f8:	f100 0068 	add.w	r0, r0, #104	; 0x68
 80172fc:	d466      	bmi.n	80173cc <gauge_init+0x2b4>
 80172fe:	23ff      	movs	r3, #255	; 0xff
 8017300:	461e      	mov	r6, r3
 8017302:	461f      	mov	r7, r3
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
 8017304:	2200      	movs	r2, #0
 8017306:	2199      	movs	r1, #153	; 0x99
 8017308:	f367 0207 	bfi	r2, r7, #0, #8
 801730c:	f366 220f 	bfi	r2, r6, #8, #8
 8017310:	f363 4217 	bfi	r2, r3, #16, #8
 8017314:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 8017318:	f7f1 fedc 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_line_width(&styles->gauge_needle, LV_STATE_DEFAULT, LV_DPX(8));
 801731c:	6823      	ldr	r3, [r4, #0]
 801731e:	2000      	movs	r0, #0
 8017320:	f103 0668 	add.w	r6, r3, #104	; 0x68
 8017324:	f7fc fadc 	bl	80138e0 <lv_disp_get_dpi>
 8017328:	281d      	cmp	r0, #29
 801732a:	f300 808b 	bgt.w	8017444 <gauge_init+0x32c>
 801732e:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
 8017330:	4630      	mov	r0, r6
 8017332:	2190      	movs	r1, #144	; 0x90
 8017334:	f7f1 fe00 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_bg_opa(&styles->gauge_needle, LV_STATE_DEFAULT, LV_OPA_COVER);
 8017338:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
 801733a:	22ff      	movs	r2, #255	; 0xff
 801733c:	212c      	movs	r1, #44	; 0x2c
 801733e:	3068      	adds	r0, #104	; 0x68
 8017340:	f7f1 ff92 	bl	8009268 <_lv_style_set_opa>
    lv_style_set_bg_color(&styles->gauge_needle, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x464b5b) : LV_COLOR_WHITE);
 8017344:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8017346:	6820      	ldr	r0, [r4, #0]
 8017348:	079b      	lsls	r3, r3, #30
 801734a:	f100 0068 	add.w	r0, r0, #104	; 0x68
 801734e:	d439      	bmi.n	80173c4 <gauge_init+0x2ac>
 8017350:	23ff      	movs	r3, #255	; 0xff
 8017352:	461d      	mov	r5, r3
 8017354:	461e      	mov	r6, r3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
 8017356:	2200      	movs	r2, #0
 8017358:	2129      	movs	r1, #41	; 0x29
 801735a:	f366 0207 	bfi	r2, r6, #0, #8
 801735e:	f365 220f 	bfi	r2, r5, #8, #8
 8017362:	f363 4217 	bfi	r2, r3, #16, #8
 8017366:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 801736a:	f7f1 feb3 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_radius(&styles->gauge_needle, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
 801736e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
 8017370:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8017374:	2101      	movs	r1, #1
 8017376:	3068      	adds	r0, #104	; 0x68
 8017378:	f7f1 fdde 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_size(&styles->gauge_needle, LV_STATE_DEFAULT, LV_DPX(30));
 801737c:	6823      	ldr	r3, [r4, #0]
 801737e:	2000      	movs	r0, #0
 8017380:	f103 0568 	add.w	r5, r3, #104	; 0x68
 8017384:	f7fc faac 	bl	80138e0 <lv_disp_get_dpi>
 8017388:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 801738c:	0040      	lsls	r0, r0, #1
 801738e:	28ef      	cmp	r0, #239	; 0xef
 8017390:	dc49      	bgt.n	8017426 <gauge_init+0x30e>
 8017392:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int, scalar)
 8017394:	4628      	mov	r0, r5
 8017396:	2103      	movs	r1, #3
 8017398:	f7f1 fdce 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_pad_inner(&styles->gauge_needle, LV_STATE_DEFAULT, LV_DPX(10));
 801739c:	2000      	movs	r0, #0
 801739e:	6824      	ldr	r4, [r4, #0]
 80173a0:	f7fc fa9e 	bl	80138e0 <lv_disp_get_dpi>
 80173a4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80173a8:	3468      	adds	r4, #104	; 0x68
 80173aa:	0040      	lsls	r0, r0, #1
 80173ac:	28ef      	cmp	r0, #239	; 0xef
 80173ae:	dc26      	bgt.n	80173fe <gauge_init+0x2e6>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
 80173b0:	4620      	mov	r0, r4
 80173b2:	2201      	movs	r2, #1
 80173b4:	2114      	movs	r1, #20
}
 80173b6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80173ba:	f7f1 bdbd 	b.w	8008f38 <_lv_style_set_int>
    else lv_style_init(style);
 80173be:	f7f1 fa9d 	bl	80088fc <lv_style_init>
 80173c2:	e6b4      	b.n	801712e <gauge_init+0x16>
 80173c4:	2346      	movs	r3, #70	; 0x46
 80173c6:	254b      	movs	r5, #75	; 0x4b
 80173c8:	265b      	movs	r6, #91	; 0x5b
 80173ca:	e7c4      	b.n	8017356 <gauge_init+0x23e>
 80173cc:	2346      	movs	r3, #70	; 0x46
 80173ce:	264b      	movs	r6, #75	; 0x4b
 80173d0:	275b      	movs	r7, #91	; 0x5b
 80173d2:	e797      	b.n	8017304 <gauge_init+0x1ec>
 80173d4:	f7f1 fa92 	bl	80088fc <lv_style_init>
 80173d8:	e78b      	b.n	80172f2 <gauge_init+0x1da>
 80173da:	f7f1 fa8f 	bl	80088fc <lv_style_init>
 80173de:	e742      	b.n	8017266 <gauge_init+0x14e>
    lv_style_set_line_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(5));
 80173e0:	2000      	movs	r0, #0
 80173e2:	f7fc fa7d 	bl	80138e0 <lv_disp_get_dpi>
 80173e6:	2305      	movs	r3, #5
 80173e8:	2150      	movs	r1, #80	; 0x50
 80173ea:	4a28      	ldr	r2, [pc, #160]	; (801748c <gauge_init+0x374>)
 80173ec:	fb00 1003 	mla	r0, r0, r3, r1
 80173f0:	fb82 2300 	smull	r2, r3, r2, r0
 80173f4:	17c2      	asrs	r2, r0, #31
 80173f6:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 80173fa:	b212      	sxth	r2, r2
 80173fc:	e6b5      	b.n	801716a <gauge_init+0x52>
    lv_style_set_pad_inner(&styles->gauge_needle, LV_STATE_DEFAULT, LV_DPX(10));
 80173fe:	2000      	movs	r0, #0
 8017400:	f7fc fa6e 	bl	80138e0 <lv_disp_get_dpi>
 8017404:	230a      	movs	r3, #10
 8017406:	2150      	movs	r1, #80	; 0x50
 8017408:	4a20      	ldr	r2, [pc, #128]	; (801748c <gauge_init+0x374>)
 801740a:	fb00 1003 	mla	r0, r0, r3, r1
 801740e:	2114      	movs	r1, #20
 8017410:	fb82 2300 	smull	r2, r3, r2, r0
 8017414:	17c2      	asrs	r2, r0, #31
 8017416:	4620      	mov	r0, r4
 8017418:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
}
 801741c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    lv_style_set_pad_inner(&styles->gauge_needle, LV_STATE_DEFAULT, LV_DPX(10));
 8017420:	b212      	sxth	r2, r2
 8017422:	f7f1 bd89 	b.w	8008f38 <_lv_style_set_int>
    lv_style_set_size(&styles->gauge_needle, LV_STATE_DEFAULT, LV_DPX(30));
 8017426:	2000      	movs	r0, #0
 8017428:	f7fc fa5a 	bl	80138e0 <lv_disp_get_dpi>
 801742c:	231e      	movs	r3, #30
 801742e:	2150      	movs	r1, #80	; 0x50
 8017430:	4a16      	ldr	r2, [pc, #88]	; (801748c <gauge_init+0x374>)
 8017432:	fb00 1003 	mla	r0, r0, r3, r1
 8017436:	fb82 2300 	smull	r2, r3, r2, r0
 801743a:	17c2      	asrs	r2, r0, #31
 801743c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 8017440:	b212      	sxth	r2, r2
 8017442:	e7a7      	b.n	8017394 <gauge_init+0x27c>
    lv_style_set_line_width(&styles->gauge_needle, LV_STATE_DEFAULT, LV_DPX(8));
 8017444:	2000      	movs	r0, #0
 8017446:	f7fc fa4b 	bl	80138e0 <lv_disp_get_dpi>
 801744a:	4b10      	ldr	r3, [pc, #64]	; (801748c <gauge_init+0x374>)
 801744c:	300a      	adds	r0, #10
 801744e:	fb83 2300 	smull	r2, r3, r3, r0
 8017452:	17c2      	asrs	r2, r0, #31
 8017454:	ebc2 02e3 	rsb	r2, r2, r3, asr #3
 8017458:	b212      	sxth	r2, r2
 801745a:	e769      	b.n	8017330 <gauge_init+0x218>
    lv_style_set_scale_width(&styles->gauge_strong, LV_STATE_DEFAULT, LV_DPX(25));
 801745c:	2000      	movs	r0, #0
 801745e:	f7fc fa3f 	bl	80138e0 <lv_disp_get_dpi>
 8017462:	2319      	movs	r3, #25
 8017464:	2150      	movs	r1, #80	; 0x50
 8017466:	4a09      	ldr	r2, [pc, #36]	; (801748c <gauge_init+0x374>)
 8017468:	fb00 1003 	mla	r0, r0, r3, r1
 801746c:	fb82 2300 	smull	r2, r3, r2, r0
 8017470:	17c2      	asrs	r2, r0, #31
 8017472:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 8017476:	b212      	sxth	r2, r2
 8017478:	e730      	b.n	80172dc <gauge_init+0x1c4>
 801747a:	bf00      	nop
 801747c:	200201a8 	.word	0x200201a8
 8017480:	200201a4 	.word	0x200201a4
 8017484:	ff888888 	.word	0xff888888
 8017488:	200201ac 	.word	0x200201ac
 801748c:	66666667 	.word	0x66666667
    lv_style_set_scale_end_line_width(&styles->gauge_strong, LV_STATE_DEFAULT, LV_DPX(8));
 8017490:	2000      	movs	r0, #0
 8017492:	f7fc fa25 	bl	80138e0 <lv_disp_get_dpi>
 8017496:	4b3c      	ldr	r3, [pc, #240]	; (8017588 <gauge_init+0x470>)
 8017498:	300a      	adds	r0, #10
 801749a:	fb83 2300 	smull	r2, r3, r3, r0
 801749e:	17c2      	asrs	r2, r0, #31
 80174a0:	ebc2 02e3 	rsb	r2, r2, r3, asr #3
 80174a4:	b212      	sxth	r2, r2
 80174a6:	e708      	b.n	80172ba <gauge_init+0x1a2>
    lv_style_set_line_width(&styles->gauge_strong, LV_STATE_DEFAULT, LV_DPX(8));
 80174a8:	2000      	movs	r0, #0
 80174aa:	f7fc fa19 	bl	80138e0 <lv_disp_get_dpi>
 80174ae:	4b36      	ldr	r3, [pc, #216]	; (8017588 <gauge_init+0x470>)
 80174b0:	300a      	adds	r0, #10
 80174b2:	fb83 2300 	smull	r2, r3, r3, r0
 80174b6:	17c2      	asrs	r2, r0, #31
 80174b8:	ebc2 02e3 	rsb	r2, r2, r3, asr #3
 80174bc:	b212      	sxth	r2, r2
 80174be:	e6ee      	b.n	801729e <gauge_init+0x186>
    lv_style_set_scale_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(15));
 80174c0:	2000      	movs	r0, #0
 80174c2:	f7fc fa0d 	bl	80138e0 <lv_disp_get_dpi>
 80174c6:	230f      	movs	r3, #15
 80174c8:	2150      	movs	r1, #80	; 0x50
 80174ca:	4a2f      	ldr	r2, [pc, #188]	; (8017588 <gauge_init+0x470>)
 80174cc:	fb00 1003 	mla	r0, r0, r3, r1
 80174d0:	fb82 2300 	smull	r2, r3, r2, r0
 80174d4:	17c2      	asrs	r2, r0, #31
 80174d6:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 80174da:	b212      	sxth	r2, r2
 80174dc:	e6b0      	b.n	8017240 <gauge_init+0x128>
    lv_style_set_pad_inner(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
 80174de:	2000      	movs	r0, #0
 80174e0:	f7fc f9fe 	bl	80138e0 <lv_disp_get_dpi>
 80174e4:	2314      	movs	r3, #20
 80174e6:	2150      	movs	r1, #80	; 0x50
 80174e8:	4a27      	ldr	r2, [pc, #156]	; (8017588 <gauge_init+0x470>)
 80174ea:	fb00 1003 	mla	r0, r0, r3, r1
 80174ee:	fb82 2300 	smull	r2, r3, r2, r0
 80174f2:	17c2      	asrs	r2, r0, #31
 80174f4:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 80174f8:	b212      	sxth	r2, r2
 80174fa:	e692      	b.n	8017222 <gauge_init+0x10a>
    lv_style_set_pad_top(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
 80174fc:	2000      	movs	r0, #0
 80174fe:	f7fc f9ef 	bl	80138e0 <lv_disp_get_dpi>
 8017502:	2314      	movs	r3, #20
 8017504:	2150      	movs	r1, #80	; 0x50
 8017506:	4a20      	ldr	r2, [pc, #128]	; (8017588 <gauge_init+0x470>)
 8017508:	fb00 1003 	mla	r0, r0, r3, r1
 801750c:	fb82 2300 	smull	r2, r3, r2, r0
 8017510:	17c2      	asrs	r2, r0, #31
 8017512:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 8017516:	b212      	sxth	r2, r2
 8017518:	e673      	b.n	8017202 <gauge_init+0xea>
    lv_style_set_pad_right(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
 801751a:	2000      	movs	r0, #0
 801751c:	f7fc f9e0 	bl	80138e0 <lv_disp_get_dpi>
 8017520:	2314      	movs	r3, #20
 8017522:	2150      	movs	r1, #80	; 0x50
 8017524:	4a18      	ldr	r2, [pc, #96]	; (8017588 <gauge_init+0x470>)
 8017526:	fb00 1003 	mla	r0, r0, r3, r1
 801752a:	fb82 2300 	smull	r2, r3, r2, r0
 801752e:	17c2      	asrs	r2, r0, #31
 8017530:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 8017534:	b212      	sxth	r2, r2
 8017536:	e654      	b.n	80171e2 <gauge_init+0xca>
    lv_style_set_pad_left(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
 8017538:	2000      	movs	r0, #0
 801753a:	f7fc f9d1 	bl	80138e0 <lv_disp_get_dpi>
 801753e:	2314      	movs	r3, #20
 8017540:	2150      	movs	r1, #80	; 0x50
 8017542:	4a11      	ldr	r2, [pc, #68]	; (8017588 <gauge_init+0x470>)
 8017544:	fb00 1003 	mla	r0, r0, r3, r1
 8017548:	fb82 2300 	smull	r2, r3, r2, r0
 801754c:	17c2      	asrs	r2, r0, #31
 801754e:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 8017552:	b212      	sxth	r2, r2
 8017554:	e635      	b.n	80171c2 <gauge_init+0xaa>
    lv_style_set_scale_end_border_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(8));
 8017556:	2000      	movs	r0, #0
 8017558:	f7fc f9c2 	bl	80138e0 <lv_disp_get_dpi>
 801755c:	4b0a      	ldr	r3, [pc, #40]	; (8017588 <gauge_init+0x470>)
 801755e:	300a      	adds	r0, #10
 8017560:	fb83 2300 	smull	r2, r3, r3, r0
 8017564:	17c2      	asrs	r2, r0, #31
 8017566:	ebc2 02e3 	rsb	r2, r2, r3, asr #3
 801756a:	b212      	sxth	r2, r2
 801756c:	e619      	b.n	80171a2 <gauge_init+0x8a>
    lv_style_set_scale_end_line_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(4));
 801756e:	2000      	movs	r0, #0
 8017570:	f7fc f9b6 	bl	80138e0 <lv_disp_get_dpi>
 8017574:	4b04      	ldr	r3, [pc, #16]	; (8017588 <gauge_init+0x470>)
 8017576:	3014      	adds	r0, #20
 8017578:	fb83 2300 	smull	r2, r3, r3, r0
 801757c:	17c2      	asrs	r2, r0, #31
 801757e:	ebc2 1223 	rsb	r2, r2, r3, asr #4
 8017582:	b212      	sxth	r2, r2
 8017584:	e5ff      	b.n	8017186 <gauge_init+0x6e>
 8017586:	bf00      	nop
 8017588:	66666667 	.word	0x66666667

0801758c <calendar_init>:
{
 801758c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    style_init_reset(&styles->calendar_header);
 801758e:	4ce0      	ldr	r4, [pc, #896]	; (8017910 <calendar_init+0x384>)
    if(inited) lv_style_reset(style);
 8017590:	4ee0      	ldr	r6, [pc, #896]	; (8017914 <calendar_init+0x388>)
    style_init_reset(&styles->calendar_header);
 8017592:	6820      	ldr	r0, [r4, #0]
    if(inited) lv_style_reset(style);
 8017594:	7833      	ldrb	r3, [r6, #0]
    style_init_reset(&styles->calendar_header);
 8017596:	3034      	adds	r0, #52	; 0x34
    if(inited) lv_style_reset(style);
 8017598:	2b00      	cmp	r3, #0
 801759a:	f000 81ee 	beq.w	801797a <calendar_init+0x3ee>
 801759e:	f7f1 fcc3 	bl	8008f28 <lv_style_reset>
    lv_style_set_pad_top(&styles->calendar_header, LV_STATE_DEFAULT, 0);
 80175a2:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
 80175a4:	2200      	movs	r2, #0
 80175a6:	2110      	movs	r1, #16
 80175a8:	3034      	adds	r0, #52	; 0x34
 80175aa:	f7f1 fcc5 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_pad_left(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
 80175ae:	2000      	movs	r0, #0
 80175b0:	6825      	ldr	r5, [r4, #0]
 80175b2:	f7fc f9a3 	bl	80138fc <lv_disp_get_size_category>
 80175b6:	2801      	cmp	r0, #1
 80175b8:	f04f 0000 	mov.w	r0, #0
 80175bc:	f105 0534 	add.w	r5, r5, #52	; 0x34
 80175c0:	f240 81ea 	bls.w	8017998 <calendar_init+0x40c>
 80175c4:	f7fc f98c 	bl	80138e0 <lv_disp_get_dpi>
 80175c8:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 80175cc:	0040      	lsls	r0, r0, #1
 80175ce:	28ef      	cmp	r0, #239	; 0xef
 80175d0:	f300 827c 	bgt.w	8017acc <calendar_init+0x540>
 80175d4:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
 80175d6:	4628      	mov	r0, r5
 80175d8:	2112      	movs	r1, #18
 80175da:	f7f1 fcad 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_pad_right(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
 80175de:	2000      	movs	r0, #0
 80175e0:	6825      	ldr	r5, [r4, #0]
 80175e2:	f7fc f98b 	bl	80138fc <lv_disp_get_size_category>
 80175e6:	2801      	cmp	r0, #1
 80175e8:	f04f 0000 	mov.w	r0, #0
 80175ec:	f105 0534 	add.w	r5, r5, #52	; 0x34
 80175f0:	f240 81c6 	bls.w	8017980 <calendar_init+0x3f4>
 80175f4:	f7fc f974 	bl	80138e0 <lv_disp_get_dpi>
 80175f8:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 80175fc:	0040      	lsls	r0, r0, #1
 80175fe:	28ef      	cmp	r0, #239	; 0xef
 8017600:	f300 8273 	bgt.w	8017aea <calendar_init+0x55e>
 8017604:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
 8017606:	4628      	mov	r0, r5
 8017608:	2113      	movs	r1, #19
 801760a:	f7f1 fc95 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_pad_bottom(&styles->calendar_header, LV_STATE_DEFAULT, 0);
 801760e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
 8017610:	2200      	movs	r2, #0
 8017612:	2111      	movs	r1, #17
 8017614:	3034      	adds	r0, #52	; 0x34
 8017616:	f7f1 fc8f 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_margin_top(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
 801761a:	2000      	movs	r0, #0
 801761c:	6825      	ldr	r5, [r4, #0]
 801761e:	f7fc f96d 	bl	80138fc <lv_disp_get_size_category>
 8017622:	2801      	cmp	r0, #1
 8017624:	f04f 0000 	mov.w	r0, #0
 8017628:	f105 0534 	add.w	r5, r5, #52	; 0x34
 801762c:	f240 81cc 	bls.w	80179c8 <calendar_init+0x43c>
 8017630:	f7fc f956 	bl	80138e0 <lv_disp_get_dpi>
 8017634:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8017638:	0040      	lsls	r0, r0, #1
 801763a:	28ef      	cmp	r0, #239	; 0xef
 801763c:	f300 8264 	bgt.w	8017b08 <calendar_init+0x57c>
 8017640:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int, scalar)
 8017642:	4628      	mov	r0, r5
 8017644:	2115      	movs	r1, #21
 8017646:	f7f1 fc77 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_margin_bottom(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
 801764a:	2000      	movs	r0, #0
 801764c:	6827      	ldr	r7, [r4, #0]
 801764e:	f7fc f955 	bl	80138fc <lv_disp_get_size_category>
 8017652:	2801      	cmp	r0, #1
 8017654:	f04f 0000 	mov.w	r0, #0
 8017658:	f107 0734 	add.w	r7, r7, #52	; 0x34
 801765c:	f240 81a8 	bls.w	80179b0 <calendar_init+0x424>
 8017660:	f7fc f93e 	bl	80138e0 <lv_disp_get_dpi>
 8017664:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8017668:	0040      	lsls	r0, r0, #1
 801766a:	28ef      	cmp	r0, #239	; 0xef
 801766c:	f300 825b 	bgt.w	8017b26 <calendar_init+0x59a>
 8017670:	2201      	movs	r2, #1
    lv_style_set_text_color(&styles->calendar_header, LV_STATE_PRESSED, IS_LIGHT ? lv_color_hex(0x888888) : LV_COLOR_WHITE);
 8017672:	4da9      	ldr	r5, [pc, #676]	; (8017918 <calendar_init+0x38c>)
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
 8017674:	4638      	mov	r0, r7
 8017676:	2116      	movs	r1, #22
 8017678:	f7f1 fc5e 	bl	8008f38 <_lv_style_set_int>
 801767c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801767e:	2200      	movs	r2, #0
 8017680:	6820      	ldr	r0, [r4, #0]
 8017682:	f013 0f02 	tst.w	r3, #2
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
 8017686:	f249 0189 	movw	r1, #37001	; 0x9089
 801768a:	f100 0034 	add.w	r0, r0, #52	; 0x34
 801768e:	bf14      	ite	ne
 8017690:	2388      	movne	r3, #136	; 0x88
 8017692:	23ff      	moveq	r3, #255	; 0xff
 8017694:	f363 0207 	bfi	r2, r3, #0, #8
 8017698:	f363 220f 	bfi	r2, r3, #8, #8
 801769c:	f363 4217 	bfi	r2, r3, #16, #8
 80176a0:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 80176a4:	f7f1 fd16 	bl	80090d4 <_lv_style_set_color>
    style_init_reset(&styles->calendar_daynames);
 80176a8:	6820      	ldr	r0, [r4, #0]
    if(inited) lv_style_reset(style);
 80176aa:	7833      	ldrb	r3, [r6, #0]
    style_init_reset(&styles->calendar_daynames);
 80176ac:	3038      	adds	r0, #56	; 0x38
    if(inited) lv_style_reset(style);
 80176ae:	2b00      	cmp	r3, #0
 80176b0:	f000 8160 	beq.w	8017974 <calendar_init+0x3e8>
 80176b4:	f7f1 fc38 	bl	8008f28 <lv_style_reset>
                            IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex3(0xeee));
 80176b8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    lv_style_set_text_color(&styles->calendar_daynames, LV_STATE_DEFAULT,
 80176ba:	6820      	ldr	r0, [r4, #0]
 80176bc:	079a      	lsls	r2, r3, #30
 80176be:	f100 0038 	add.w	r0, r0, #56	; 0x38
 80176c2:	f100 8152 	bmi.w	801796a <calendar_init+0x3de>
 80176c6:	23ee      	movs	r3, #238	; 0xee
 80176c8:	461f      	mov	r7, r3
 80176ca:	469c      	mov	ip, r3
 80176cc:	2200      	movs	r2, #0
 80176ce:	f248 0189 	movw	r1, #32905	; 0x8089
 80176d2:	f36c 0207 	bfi	r2, ip, #0, #8
 80176d6:	f367 220f 	bfi	r2, r7, #8, #8
 80176da:	f363 4217 	bfi	r2, r3, #16, #8
 80176de:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 80176e2:	f7f1 fcf7 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_pad_left(&styles->calendar_daynames, LV_STATE_DEFAULT, PAD_DEF);
 80176e6:	2000      	movs	r0, #0
 80176e8:	6827      	ldr	r7, [r4, #0]
 80176ea:	f7fc f907 	bl	80138fc <lv_disp_get_size_category>
 80176ee:	2801      	cmp	r0, #1
 80176f0:	f04f 0000 	mov.w	r0, #0
 80176f4:	f107 0738 	add.w	r7, r7, #56	; 0x38
 80176f8:	f240 817e 	bls.w	80179f8 <calendar_init+0x46c>
 80176fc:	f7fc f8f0 	bl	80138e0 <lv_disp_get_dpi>
 8017700:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8017704:	0040      	lsls	r0, r0, #1
 8017706:	28ef      	cmp	r0, #239	; 0xef
 8017708:	f300 821c 	bgt.w	8017b44 <calendar_init+0x5b8>
 801770c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
 801770e:	4638      	mov	r0, r7
 8017710:	2112      	movs	r1, #18
 8017712:	f7f1 fc11 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_pad_right(&styles->calendar_daynames, LV_STATE_DEFAULT, PAD_DEF);
 8017716:	2000      	movs	r0, #0
 8017718:	6827      	ldr	r7, [r4, #0]
 801771a:	f7fc f8ef 	bl	80138fc <lv_disp_get_size_category>
 801771e:	2801      	cmp	r0, #1
 8017720:	f04f 0000 	mov.w	r0, #0
 8017724:	f107 0738 	add.w	r7, r7, #56	; 0x38
 8017728:	f240 815a 	bls.w	80179e0 <calendar_init+0x454>
 801772c:	f7fc f8d8 	bl	80138e0 <lv_disp_get_dpi>
 8017730:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8017734:	0040      	lsls	r0, r0, #1
 8017736:	28ef      	cmp	r0, #239	; 0xef
 8017738:	f300 8213 	bgt.w	8017b62 <calendar_init+0x5d6>
 801773c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
 801773e:	4638      	mov	r0, r7
 8017740:	2113      	movs	r1, #19
 8017742:	f7f1 fbf9 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_pad_bottom(&styles->calendar_daynames, LV_STATE_DEFAULT, PAD_DEF);
 8017746:	2000      	movs	r0, #0
 8017748:	6827      	ldr	r7, [r4, #0]
 801774a:	f7fc f8d7 	bl	80138fc <lv_disp_get_size_category>
 801774e:	2801      	cmp	r0, #1
 8017750:	f04f 0000 	mov.w	r0, #0
 8017754:	f107 0738 	add.w	r7, r7, #56	; 0x38
 8017758:	f240 817d 	bls.w	8017a56 <calendar_init+0x4ca>
 801775c:	f7fc f8c0 	bl	80138e0 <lv_disp_get_dpi>
 8017760:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8017764:	0040      	lsls	r0, r0, #1
 8017766:	28ef      	cmp	r0, #239	; 0xef
 8017768:	f300 820a 	bgt.w	8017b80 <calendar_init+0x5f4>
 801776c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
 801776e:	4638      	mov	r0, r7
 8017770:	2111      	movs	r1, #17
 8017772:	f7f1 fbe1 	bl	8008f38 <_lv_style_set_int>
    style_init_reset(&styles->calendar_date_nums);
 8017776:	6820      	ldr	r0, [r4, #0]
    if(inited) lv_style_reset(style);
 8017778:	7833      	ldrb	r3, [r6, #0]
    style_init_reset(&styles->calendar_date_nums);
 801777a:	3030      	adds	r0, #48	; 0x30
    if(inited) lv_style_reset(style);
 801777c:	2b00      	cmp	r3, #0
 801777e:	f000 80f1 	beq.w	8017964 <calendar_init+0x3d8>
 8017782:	f7f1 fbd1 	bl	8008f28 <lv_style_reset>
    lv_style_set_radius(&styles->calendar_date_nums, LV_STATE_DEFAULT, LV_DPX(4));
 8017786:	6823      	ldr	r3, [r4, #0]
 8017788:	2000      	movs	r0, #0
 801778a:	f103 0630 	add.w	r6, r3, #48	; 0x30
 801778e:	f7fc f8a7 	bl	80138e0 <lv_disp_get_dpi>
 8017792:	283b      	cmp	r0, #59	; 0x3b
 8017794:	f300 817a 	bgt.w	8017a8c <calendar_init+0x500>
 8017798:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
 801779a:	4630      	mov	r0, r6
 801779c:	2101      	movs	r1, #1
 801779e:	f7f1 fbcb 	bl	8008f38 <_lv_style_set_int>
                            IS_LIGHT ? lv_color_hex(0x31404f) : LV_COLOR_WHITE);
 80177a2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    lv_style_set_text_color(&styles->calendar_date_nums, LV_STATE_CHECKED,
 80177a4:	6820      	ldr	r0, [r4, #0]
 80177a6:	079b      	lsls	r3, r3, #30
 80177a8:	f100 0030 	add.w	r0, r0, #48	; 0x30
 80177ac:	f100 80d6 	bmi.w	801795c <calendar_init+0x3d0>
 80177b0:	23ff      	movs	r3, #255	; 0xff
 80177b2:	461e      	mov	r6, r3
 80177b4:	461f      	mov	r7, r3
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
 80177b6:	2200      	movs	r2, #0
 80177b8:	f248 1189 	movw	r1, #33161	; 0x8189
 80177bc:	f367 0207 	bfi	r2, r7, #0, #8
 80177c0:	f366 220f 	bfi	r2, r6, #8, #8
 80177c4:	f363 4217 	bfi	r2, r3, #16, #8
 80177c8:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 80177cc:	f7f1 fc82 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_text_color(&styles->calendar_date_nums, LV_STATE_DISABLED, LV_COLOR_GRAY);
 80177d0:	6820      	ldr	r0, [r4, #0]
 80177d2:	4a52      	ldr	r2, [pc, #328]	; (801791c <calendar_init+0x390>)
 80177d4:	f24a 0189 	movw	r1, #41097	; 0xa089
 80177d8:	3030      	adds	r0, #48	; 0x30
 80177da:	f7f1 fc7b 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_bg_opa(&styles->calendar_date_nums, LV_STATE_CHECKED, IS_LIGHT ? LV_OPA_20 : LV_OPA_40);
 80177de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80177e0:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
 80177e2:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80177e6:	f013 0f02 	tst.w	r3, #2
 80177ea:	f100 0030 	add.w	r0, r0, #48	; 0x30
 80177ee:	bf14      	ite	ne
 80177f0:	2233      	movne	r2, #51	; 0x33
 80177f2:	2266      	moveq	r2, #102	; 0x66
 80177f4:	f7f1 fd38 	bl	8009268 <_lv_style_set_opa>
    lv_style_set_bg_opa(&styles->calendar_date_nums, LV_STATE_PRESSED, LV_OPA_20);
 80177f8:	6820      	ldr	r0, [r4, #0]
 80177fa:	2233      	movs	r2, #51	; 0x33
 80177fc:	f241 012c 	movw	r1, #4140	; 0x102c
 8017800:	3030      	adds	r0, #48	; 0x30
 8017802:	f7f1 fd31 	bl	8009268 <_lv_style_set_opa>
    lv_style_set_bg_opa(&styles->calendar_date_nums, LV_STATE_FOCUSED, LV_OPA_COVER);
 8017806:	6820      	ldr	r0, [r4, #0]
 8017808:	22ff      	movs	r2, #255	; 0xff
 801780a:	f44f 710b 	mov.w	r1, #556	; 0x22c
 801780e:	3030      	adds	r0, #48	; 0x30
 8017810:	f7f1 fd2a 	bl	8009268 <_lv_style_set_opa>
    lv_style_set_text_color(&styles->calendar_date_nums, LV_STATE_FOCUSED, LV_COLOR_WHITE);
 8017814:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
 8017816:	f04f 32ff 	mov.w	r2, #4294967295
 801781a:	f248 2189 	movw	r1, #33417	; 0x8289
 801781e:	3030      	adds	r0, #48	; 0x30
 8017820:	f7f1 fc58 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_bg_color(&styles->calendar_date_nums, LV_STATE_FOCUSED, theme.color_primary);
 8017824:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
 8017826:	68ea      	ldr	r2, [r5, #12]
 8017828:	f240 2129 	movw	r1, #553	; 0x229
 801782c:	3030      	adds	r0, #48	; 0x30
 801782e:	f7f1 fc51 	bl	80090d4 <_lv_style_set_color>
                          IS_LIGHT ? lv_color_hex(0x666666) : LV_COLOR_WHITE);
 8017832:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8017834:	2200      	movs	r2, #0
    lv_style_set_bg_color(&styles->calendar_date_nums, LV_STATE_DEFAULT,
 8017836:	6820      	ldr	r0, [r4, #0]
 8017838:	f013 0f02 	tst.w	r3, #2
 801783c:	f04f 0129 	mov.w	r1, #41	; 0x29
 8017840:	f100 0030 	add.w	r0, r0, #48	; 0x30
 8017844:	bf14      	ite	ne
 8017846:	2366      	movne	r3, #102	; 0x66
 8017848:	23ff      	moveq	r3, #255	; 0xff
 801784a:	f363 0207 	bfi	r2, r3, #0, #8
 801784e:	f363 220f 	bfi	r2, r3, #8, #8
 8017852:	f363 4217 	bfi	r2, r3, #16, #8
 8017856:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 801785a:	f7f1 fc3b 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_bg_color(&styles->calendar_date_nums, LV_STATE_CHECKED, theme.color_primary);
 801785e:	6820      	ldr	r0, [r4, #0]
 8017860:	68ea      	ldr	r2, [r5, #12]
 8017862:	f240 1129 	movw	r1, #297	; 0x129
 8017866:	3030      	adds	r0, #48	; 0x30
 8017868:	f7f1 fc34 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_border_width(&styles->calendar_date_nums, LV_STATE_CHECKED, 2);
 801786c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
 801786e:	2202      	movs	r2, #2
 8017870:	f44f 7198 	mov.w	r1, #304	; 0x130
 8017874:	3030      	adds	r0, #48	; 0x30
 8017876:	f7f1 fb5f 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_border_side(&styles->calendar_date_nums, LV_STATE_CHECKED, LV_BORDER_SIDE_LEFT);
 801787a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
 801787c:	2204      	movs	r2, #4
 801787e:	f240 1131 	movw	r1, #305	; 0x131
 8017882:	3030      	adds	r0, #48	; 0x30
 8017884:	f7f1 fb58 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_border_color(&styles->calendar_date_nums, LV_STATE_CHECKED, theme.color_primary);
 8017888:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
 801788a:	68ea      	ldr	r2, [r5, #12]
 801788c:	f240 1139 	movw	r1, #313	; 0x139
 8017890:	3030      	adds	r0, #48	; 0x30
 8017892:	f7f1 fc1f 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_pad_inner(&styles->calendar_date_nums, LV_STATE_DEFAULT, LV_DPX(3));
 8017896:	6823      	ldr	r3, [r4, #0]
 8017898:	2000      	movs	r0, #0
 801789a:	f103 0530 	add.w	r5, r3, #48	; 0x30
 801789e:	f7fc f81f 	bl	80138e0 <lv_disp_get_dpi>
 80178a2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80178a6:	28ef      	cmp	r0, #239	; 0xef
 80178a8:	f300 80e1 	bgt.w	8017a6e <calendar_init+0x4e2>
 80178ac:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
 80178ae:	4628      	mov	r0, r5
 80178b0:	2114      	movs	r1, #20
 80178b2:	f7f1 fb41 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_pad_left(&styles->calendar_date_nums, LV_STATE_DEFAULT, PAD_DEF);
 80178b6:	2000      	movs	r0, #0
 80178b8:	6825      	ldr	r5, [r4, #0]
 80178ba:	f7fc f81f 	bl	80138fc <lv_disp_get_size_category>
 80178be:	2801      	cmp	r0, #1
 80178c0:	f04f 0000 	mov.w	r0, #0
 80178c4:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80178c8:	f240 80b9 	bls.w	8017a3e <calendar_init+0x4b2>
 80178cc:	f7fc f808 	bl	80138e0 <lv_disp_get_dpi>
 80178d0:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 80178d4:	0040      	lsls	r0, r0, #1
 80178d6:	28ef      	cmp	r0, #239	; 0xef
 80178d8:	f300 8161 	bgt.w	8017b9e <calendar_init+0x612>
 80178dc:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
 80178de:	4628      	mov	r0, r5
 80178e0:	2112      	movs	r1, #18
 80178e2:	f7f1 fb29 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_pad_right(&styles->calendar_date_nums, LV_STATE_DEFAULT, PAD_DEF);
 80178e6:	2000      	movs	r0, #0
 80178e8:	6825      	ldr	r5, [r4, #0]
 80178ea:	f7fc f807 	bl	80138fc <lv_disp_get_size_category>
 80178ee:	2801      	cmp	r0, #1
 80178f0:	f04f 0000 	mov.w	r0, #0
 80178f4:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80178f8:	f240 8095 	bls.w	8017a26 <calendar_init+0x49a>
 80178fc:	f7fb fff0 	bl	80138e0 <lv_disp_get_dpi>
 8017900:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8017904:	0040      	lsls	r0, r0, #1
 8017906:	28ef      	cmp	r0, #239	; 0xef
 8017908:	f300 8158 	bgt.w	8017bbc <calendar_init+0x630>
 801790c:	e008      	b.n	8017920 <calendar_init+0x394>
 801790e:	bf00      	nop
 8017910:	200201a8 	.word	0x200201a8
 8017914:	200201a4 	.word	0x200201a4
 8017918:	200201ac 	.word	0x200201ac
 801791c:	ff808080 	.word	0xff808080
 8017920:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
 8017922:	4628      	mov	r0, r5
 8017924:	2113      	movs	r1, #19
 8017926:	f7f1 fb07 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_pad_bottom(&styles->calendar_date_nums, LV_STATE_DEFAULT, PAD_DEF);
 801792a:	2000      	movs	r0, #0
 801792c:	6824      	ldr	r4, [r4, #0]
 801792e:	f7fb ffe5 	bl	80138fc <lv_disp_get_size_category>
 8017932:	2801      	cmp	r0, #1
 8017934:	f04f 0000 	mov.w	r0, #0
 8017938:	f104 0430 	add.w	r4, r4, #48	; 0x30
 801793c:	d968      	bls.n	8017a10 <calendar_init+0x484>
 801793e:	f7fb ffcf 	bl	80138e0 <lv_disp_get_dpi>
 8017942:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8017946:	0040      	lsls	r0, r0, #1
 8017948:	28ef      	cmp	r0, #239	; 0xef
 801794a:	f300 80ab 	bgt.w	8017aa4 <calendar_init+0x518>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
 801794e:	4620      	mov	r0, r4
 8017950:	2201      	movs	r2, #1
 8017952:	2111      	movs	r1, #17
}
 8017954:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8017958:	f7f1 baee 	b.w	8008f38 <_lv_style_set_int>
 801795c:	2331      	movs	r3, #49	; 0x31
 801795e:	2640      	movs	r6, #64	; 0x40
 8017960:	274f      	movs	r7, #79	; 0x4f
 8017962:	e728      	b.n	80177b6 <calendar_init+0x22a>
    else lv_style_init(style);
 8017964:	f7f0 ffca 	bl	80088fc <lv_style_init>
 8017968:	e70d      	b.n	8017786 <calendar_init+0x1fa>
 801796a:	2331      	movs	r3, #49	; 0x31
 801796c:	2740      	movs	r7, #64	; 0x40
 801796e:	f04f 0c4f 	mov.w	ip, #79	; 0x4f
 8017972:	e6ab      	b.n	80176cc <calendar_init+0x140>
 8017974:	f7f0 ffc2 	bl	80088fc <lv_style_init>
 8017978:	e69e      	b.n	80176b8 <calendar_init+0x12c>
 801797a:	f7f0 ffbf 	bl	80088fc <lv_style_init>
 801797e:	e610      	b.n	80175a2 <calendar_init+0x16>
    lv_style_set_pad_right(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
 8017980:	f7fb ffae 	bl	80138e0 <lv_disp_get_dpi>
 8017984:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8017988:	28ef      	cmp	r0, #239	; 0xef
 801798a:	f77f ae3b 	ble.w	8017604 <calendar_init+0x78>
 801798e:	2000      	movs	r0, #0
 8017990:	f7fb ffa6 	bl	80138e0 <lv_disp_get_dpi>
 8017994:	230f      	movs	r3, #15
 8017996:	e0ac      	b.n	8017af2 <calendar_init+0x566>
    lv_style_set_pad_left(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
 8017998:	f7fb ffa2 	bl	80138e0 <lv_disp_get_dpi>
 801799c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 80179a0:	28ef      	cmp	r0, #239	; 0xef
 80179a2:	f77f ae17 	ble.w	80175d4 <calendar_init+0x48>
 80179a6:	2000      	movs	r0, #0
 80179a8:	f7fb ff9a 	bl	80138e0 <lv_disp_get_dpi>
 80179ac:	230f      	movs	r3, #15
 80179ae:	e091      	b.n	8017ad4 <calendar_init+0x548>
    lv_style_set_margin_bottom(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
 80179b0:	f7fb ff96 	bl	80138e0 <lv_disp_get_dpi>
 80179b4:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 80179b8:	28ef      	cmp	r0, #239	; 0xef
 80179ba:	f77f ae59 	ble.w	8017670 <calendar_init+0xe4>
 80179be:	2000      	movs	r0, #0
 80179c0:	f7fb ff8e 	bl	80138e0 <lv_disp_get_dpi>
 80179c4:	230f      	movs	r3, #15
 80179c6:	e0b2      	b.n	8017b2e <calendar_init+0x5a2>
    lv_style_set_margin_top(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
 80179c8:	f7fb ff8a 	bl	80138e0 <lv_disp_get_dpi>
 80179cc:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 80179d0:	28ef      	cmp	r0, #239	; 0xef
 80179d2:	f77f ae35 	ble.w	8017640 <calendar_init+0xb4>
 80179d6:	2000      	movs	r0, #0
 80179d8:	f7fb ff82 	bl	80138e0 <lv_disp_get_dpi>
 80179dc:	230f      	movs	r3, #15
 80179de:	e097      	b.n	8017b10 <calendar_init+0x584>
    lv_style_set_pad_right(&styles->calendar_daynames, LV_STATE_DEFAULT, PAD_DEF);
 80179e0:	f7fb ff7e 	bl	80138e0 <lv_disp_get_dpi>
 80179e4:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 80179e8:	28ef      	cmp	r0, #239	; 0xef
 80179ea:	f77f aea7 	ble.w	801773c <calendar_init+0x1b0>
 80179ee:	2000      	movs	r0, #0
 80179f0:	f7fb ff76 	bl	80138e0 <lv_disp_get_dpi>
 80179f4:	230f      	movs	r3, #15
 80179f6:	e0b8      	b.n	8017b6a <calendar_init+0x5de>
    lv_style_set_pad_left(&styles->calendar_daynames, LV_STATE_DEFAULT, PAD_DEF);
 80179f8:	f7fb ff72 	bl	80138e0 <lv_disp_get_dpi>
 80179fc:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8017a00:	28ef      	cmp	r0, #239	; 0xef
 8017a02:	f77f ae83 	ble.w	801770c <calendar_init+0x180>
 8017a06:	2000      	movs	r0, #0
 8017a08:	f7fb ff6a 	bl	80138e0 <lv_disp_get_dpi>
 8017a0c:	230f      	movs	r3, #15
 8017a0e:	e09d      	b.n	8017b4c <calendar_init+0x5c0>
    lv_style_set_pad_bottom(&styles->calendar_date_nums, LV_STATE_DEFAULT, PAD_DEF);
 8017a10:	f7fb ff66 	bl	80138e0 <lv_disp_get_dpi>
 8017a14:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8017a18:	28ef      	cmp	r0, #239	; 0xef
 8017a1a:	dd98      	ble.n	801794e <calendar_init+0x3c2>
 8017a1c:	2000      	movs	r0, #0
 8017a1e:	f7fb ff5f 	bl	80138e0 <lv_disp_get_dpi>
 8017a22:	230f      	movs	r3, #15
 8017a24:	e042      	b.n	8017aac <calendar_init+0x520>
    lv_style_set_pad_right(&styles->calendar_date_nums, LV_STATE_DEFAULT, PAD_DEF);
 8017a26:	f7fb ff5b 	bl	80138e0 <lv_disp_get_dpi>
 8017a2a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8017a2e:	28ef      	cmp	r0, #239	; 0xef
 8017a30:	f77f af76 	ble.w	8017920 <calendar_init+0x394>
 8017a34:	2000      	movs	r0, #0
 8017a36:	f7fb ff53 	bl	80138e0 <lv_disp_get_dpi>
 8017a3a:	230f      	movs	r3, #15
 8017a3c:	e0c2      	b.n	8017bc4 <calendar_init+0x638>
    lv_style_set_pad_left(&styles->calendar_date_nums, LV_STATE_DEFAULT, PAD_DEF);
 8017a3e:	f7fb ff4f 	bl	80138e0 <lv_disp_get_dpi>
 8017a42:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8017a46:	28ef      	cmp	r0, #239	; 0xef
 8017a48:	f77f af48 	ble.w	80178dc <calendar_init+0x350>
 8017a4c:	2000      	movs	r0, #0
 8017a4e:	f7fb ff47 	bl	80138e0 <lv_disp_get_dpi>
 8017a52:	230f      	movs	r3, #15
 8017a54:	e0a7      	b.n	8017ba6 <calendar_init+0x61a>
    lv_style_set_pad_bottom(&styles->calendar_daynames, LV_STATE_DEFAULT, PAD_DEF);
 8017a56:	f7fb ff43 	bl	80138e0 <lv_disp_get_dpi>
 8017a5a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8017a5e:	28ef      	cmp	r0, #239	; 0xef
 8017a60:	f77f ae84 	ble.w	801776c <calendar_init+0x1e0>
 8017a64:	2000      	movs	r0, #0
 8017a66:	f7fb ff3b 	bl	80138e0 <lv_disp_get_dpi>
 8017a6a:	230f      	movs	r3, #15
 8017a6c:	e08c      	b.n	8017b88 <calendar_init+0x5fc>
    lv_style_set_pad_inner(&styles->calendar_date_nums, LV_STATE_DEFAULT, LV_DPX(3));
 8017a6e:	2000      	movs	r0, #0
 8017a70:	f7fb ff36 	bl	80138e0 <lv_disp_get_dpi>
 8017a74:	2303      	movs	r3, #3
 8017a76:	2150      	movs	r1, #80	; 0x50
 8017a78:	4a58      	ldr	r2, [pc, #352]	; (8017bdc <calendar_init+0x650>)
 8017a7a:	fb00 1003 	mla	r0, r0, r3, r1
 8017a7e:	fb82 2300 	smull	r2, r3, r2, r0
 8017a82:	17c2      	asrs	r2, r0, #31
 8017a84:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 8017a88:	b212      	sxth	r2, r2
 8017a8a:	e710      	b.n	80178ae <calendar_init+0x322>
    lv_style_set_radius(&styles->calendar_date_nums, LV_STATE_DEFAULT, LV_DPX(4));
 8017a8c:	2000      	movs	r0, #0
 8017a8e:	f7fb ff27 	bl	80138e0 <lv_disp_get_dpi>
 8017a92:	4b52      	ldr	r3, [pc, #328]	; (8017bdc <calendar_init+0x650>)
 8017a94:	3014      	adds	r0, #20
 8017a96:	fb83 2300 	smull	r2, r3, r3, r0
 8017a9a:	17c2      	asrs	r2, r0, #31
 8017a9c:	ebc2 1223 	rsb	r2, r2, r3, asr #4
 8017aa0:	b212      	sxth	r2, r2
 8017aa2:	e67a      	b.n	801779a <calendar_init+0x20e>
    lv_style_set_pad_bottom(&styles->calendar_date_nums, LV_STATE_DEFAULT, PAD_DEF);
 8017aa4:	2000      	movs	r0, #0
 8017aa6:	f7fb ff1b 	bl	80138e0 <lv_disp_get_dpi>
 8017aaa:	231e      	movs	r3, #30
 8017aac:	2150      	movs	r1, #80	; 0x50
 8017aae:	4a4b      	ldr	r2, [pc, #300]	; (8017bdc <calendar_init+0x650>)
 8017ab0:	fb00 1003 	mla	r0, r0, r3, r1
 8017ab4:	2111      	movs	r1, #17
 8017ab6:	fb82 2300 	smull	r2, r3, r2, r0
 8017aba:	17c2      	asrs	r2, r0, #31
 8017abc:	4620      	mov	r0, r4
 8017abe:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
}
 8017ac2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    lv_style_set_pad_bottom(&styles->calendar_date_nums, LV_STATE_DEFAULT, PAD_DEF);
 8017ac6:	b212      	sxth	r2, r2
 8017ac8:	f7f1 ba36 	b.w	8008f38 <_lv_style_set_int>
    lv_style_set_pad_left(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
 8017acc:	2000      	movs	r0, #0
 8017ace:	f7fb ff07 	bl	80138e0 <lv_disp_get_dpi>
 8017ad2:	231e      	movs	r3, #30
 8017ad4:	2150      	movs	r1, #80	; 0x50
 8017ad6:	4a41      	ldr	r2, [pc, #260]	; (8017bdc <calendar_init+0x650>)
 8017ad8:	fb00 1003 	mla	r0, r0, r3, r1
 8017adc:	fb82 2300 	smull	r2, r3, r2, r0
 8017ae0:	17c2      	asrs	r2, r0, #31
 8017ae2:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 8017ae6:	b212      	sxth	r2, r2
 8017ae8:	e575      	b.n	80175d6 <calendar_init+0x4a>
    lv_style_set_pad_right(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
 8017aea:	2000      	movs	r0, #0
 8017aec:	f7fb fef8 	bl	80138e0 <lv_disp_get_dpi>
 8017af0:	231e      	movs	r3, #30
 8017af2:	2150      	movs	r1, #80	; 0x50
 8017af4:	4a39      	ldr	r2, [pc, #228]	; (8017bdc <calendar_init+0x650>)
 8017af6:	fb00 1003 	mla	r0, r0, r3, r1
 8017afa:	fb82 2300 	smull	r2, r3, r2, r0
 8017afe:	17c2      	asrs	r2, r0, #31
 8017b00:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 8017b04:	b212      	sxth	r2, r2
 8017b06:	e57e      	b.n	8017606 <calendar_init+0x7a>
    lv_style_set_margin_top(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
 8017b08:	2000      	movs	r0, #0
 8017b0a:	f7fb fee9 	bl	80138e0 <lv_disp_get_dpi>
 8017b0e:	231e      	movs	r3, #30
 8017b10:	2150      	movs	r1, #80	; 0x50
 8017b12:	4a32      	ldr	r2, [pc, #200]	; (8017bdc <calendar_init+0x650>)
 8017b14:	fb00 1003 	mla	r0, r0, r3, r1
 8017b18:	fb82 2300 	smull	r2, r3, r2, r0
 8017b1c:	17c2      	asrs	r2, r0, #31
 8017b1e:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 8017b22:	b212      	sxth	r2, r2
 8017b24:	e58d      	b.n	8017642 <calendar_init+0xb6>
    lv_style_set_margin_bottom(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
 8017b26:	2000      	movs	r0, #0
 8017b28:	f7fb feda 	bl	80138e0 <lv_disp_get_dpi>
 8017b2c:	231e      	movs	r3, #30
 8017b2e:	2150      	movs	r1, #80	; 0x50
 8017b30:	4a2a      	ldr	r2, [pc, #168]	; (8017bdc <calendar_init+0x650>)
 8017b32:	fb00 1003 	mla	r0, r0, r3, r1
 8017b36:	fb82 2300 	smull	r2, r3, r2, r0
 8017b3a:	17c2      	asrs	r2, r0, #31
 8017b3c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 8017b40:	b212      	sxth	r2, r2
 8017b42:	e596      	b.n	8017672 <calendar_init+0xe6>
    lv_style_set_pad_left(&styles->calendar_daynames, LV_STATE_DEFAULT, PAD_DEF);
 8017b44:	2000      	movs	r0, #0
 8017b46:	f7fb fecb 	bl	80138e0 <lv_disp_get_dpi>
 8017b4a:	231e      	movs	r3, #30
 8017b4c:	2150      	movs	r1, #80	; 0x50
 8017b4e:	4a23      	ldr	r2, [pc, #140]	; (8017bdc <calendar_init+0x650>)
 8017b50:	fb00 1003 	mla	r0, r0, r3, r1
 8017b54:	fb82 2300 	smull	r2, r3, r2, r0
 8017b58:	17c2      	asrs	r2, r0, #31
 8017b5a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 8017b5e:	b212      	sxth	r2, r2
 8017b60:	e5d5      	b.n	801770e <calendar_init+0x182>
    lv_style_set_pad_right(&styles->calendar_daynames, LV_STATE_DEFAULT, PAD_DEF);
 8017b62:	2000      	movs	r0, #0
 8017b64:	f7fb febc 	bl	80138e0 <lv_disp_get_dpi>
 8017b68:	231e      	movs	r3, #30
 8017b6a:	2150      	movs	r1, #80	; 0x50
 8017b6c:	4a1b      	ldr	r2, [pc, #108]	; (8017bdc <calendar_init+0x650>)
 8017b6e:	fb00 1003 	mla	r0, r0, r3, r1
 8017b72:	fb82 2300 	smull	r2, r3, r2, r0
 8017b76:	17c2      	asrs	r2, r0, #31
 8017b78:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 8017b7c:	b212      	sxth	r2, r2
 8017b7e:	e5de      	b.n	801773e <calendar_init+0x1b2>
    lv_style_set_pad_bottom(&styles->calendar_daynames, LV_STATE_DEFAULT, PAD_DEF);
 8017b80:	2000      	movs	r0, #0
 8017b82:	f7fb fead 	bl	80138e0 <lv_disp_get_dpi>
 8017b86:	231e      	movs	r3, #30
 8017b88:	2150      	movs	r1, #80	; 0x50
 8017b8a:	4a14      	ldr	r2, [pc, #80]	; (8017bdc <calendar_init+0x650>)
 8017b8c:	fb00 1003 	mla	r0, r0, r3, r1
 8017b90:	fb82 2300 	smull	r2, r3, r2, r0
 8017b94:	17c2      	asrs	r2, r0, #31
 8017b96:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 8017b9a:	b212      	sxth	r2, r2
 8017b9c:	e5e7      	b.n	801776e <calendar_init+0x1e2>
    lv_style_set_pad_left(&styles->calendar_date_nums, LV_STATE_DEFAULT, PAD_DEF);
 8017b9e:	2000      	movs	r0, #0
 8017ba0:	f7fb fe9e 	bl	80138e0 <lv_disp_get_dpi>
 8017ba4:	231e      	movs	r3, #30
 8017ba6:	2150      	movs	r1, #80	; 0x50
 8017ba8:	4a0c      	ldr	r2, [pc, #48]	; (8017bdc <calendar_init+0x650>)
 8017baa:	fb00 1003 	mla	r0, r0, r3, r1
 8017bae:	fb82 2300 	smull	r2, r3, r2, r0
 8017bb2:	17c2      	asrs	r2, r0, #31
 8017bb4:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 8017bb8:	b212      	sxth	r2, r2
 8017bba:	e690      	b.n	80178de <calendar_init+0x352>
    lv_style_set_pad_right(&styles->calendar_date_nums, LV_STATE_DEFAULT, PAD_DEF);
 8017bbc:	2000      	movs	r0, #0
 8017bbe:	f7fb fe8f 	bl	80138e0 <lv_disp_get_dpi>
 8017bc2:	231e      	movs	r3, #30
 8017bc4:	2150      	movs	r1, #80	; 0x50
 8017bc6:	4a05      	ldr	r2, [pc, #20]	; (8017bdc <calendar_init+0x650>)
 8017bc8:	fb00 1003 	mla	r0, r0, r3, r1
 8017bcc:	fb82 2300 	smull	r2, r3, r2, r0
 8017bd0:	17c2      	asrs	r2, r0, #31
 8017bd2:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 8017bd6:	b212      	sxth	r2, r2
 8017bd8:	e6a3      	b.n	8017922 <calendar_init+0x396>
 8017bda:	bf00      	nop
 8017bdc:	66666667 	.word	0x66666667

08017be0 <basic_init>:
{
 8017be0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if(inited) lv_style_reset(style);
 8017be4:	4ec3      	ldr	r6, [pc, #780]	; (8017ef4 <basic_init+0x314>)
{
 8017be6:	b082      	sub	sp, #8
    style_init_reset(&styles->scr);
 8017be8:	4cc3      	ldr	r4, [pc, #780]	; (8017ef8 <basic_init+0x318>)
    if(inited) lv_style_reset(style);
 8017bea:	7833      	ldrb	r3, [r6, #0]
    style_init_reset(&styles->scr);
 8017bec:	6820      	ldr	r0, [r4, #0]
    if(inited) lv_style_reset(style);
 8017bee:	2b00      	cmp	r3, #0
 8017bf0:	f000 8727 	beq.w	8018a42 <basic_init+0xe62>
 8017bf4:	f7f1 f998 	bl	8008f28 <lv_style_reset>
    lv_style_set_bg_color(&styles->scr, LV_STATE_DEFAULT, COLOR_SCR);
 8017bf8:	4dc0      	ldr	r5, [pc, #768]	; (8017efc <basic_init+0x31c>)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
 8017bfa:	22ff      	movs	r2, #255	; 0xff
 8017bfc:	212c      	movs	r1, #44	; 0x2c
 8017bfe:	6820      	ldr	r0, [r4, #0]
 8017c00:	f7f1 fb32 	bl	8009268 <_lv_style_set_opa>
 8017c04:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8017c06:	2200      	movs	r2, #0
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
 8017c08:	2129      	movs	r1, #41	; 0x29
 8017c0a:	f003 0302 	and.w	r3, r3, #2
 8017c0e:	6820      	ldr	r0, [r4, #0]
 8017c10:	4293      	cmp	r3, r2
 8017c12:	bf15      	itete	ne
 8017c14:	23f3      	movne	r3, #243	; 0xf3
 8017c16:	235a      	moveq	r3, #90	; 0x5a
 8017c18:	27ef      	movne	r7, #239	; 0xef
 8017c1a:	274b      	moveq	r7, #75	; 0x4b
 8017c1c:	f363 0207 	bfi	r2, r3, #0, #8
 8017c20:	bf14      	ite	ne
 8017c22:	23ea      	movne	r3, #234	; 0xea
 8017c24:	2344      	moveq	r3, #68	; 0x44
 8017c26:	f367 220f 	bfi	r2, r7, #8, #8
 8017c2a:	f363 4217 	bfi	r2, r3, #16, #8
 8017c2e:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 8017c32:	f7f1 fa4f 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_text_color(&styles->scr, LV_STATE_DEFAULT, COLOR_SCR_TEXT);
 8017c36:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8017c38:	2200      	movs	r2, #0
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
 8017c3a:	f248 0189 	movw	r1, #32905	; 0x8089
 8017c3e:	f003 0302 	and.w	r3, r3, #2
 8017c42:	6820      	ldr	r0, [r4, #0]
 8017c44:	4293      	cmp	r3, r2
 8017c46:	bf15      	itete	ne
 8017c48:	2342      	movne	r3, #66	; 0x42
 8017c4a:	23ec      	moveq	r3, #236	; 0xec
 8017c4c:	273e      	movne	r7, #62	; 0x3e
 8017c4e:	27e9      	moveq	r7, #233	; 0xe9
 8017c50:	f363 0207 	bfi	r2, r3, #0, #8
 8017c54:	bf14      	ite	ne
 8017c56:	233b      	movne	r3, #59	; 0x3b
 8017c58:	23e7      	moveq	r3, #231	; 0xe7
 8017c5a:	f367 220f 	bfi	r2, r7, #8, #8
 8017c5e:	f363 4217 	bfi	r2, r3, #16, #8
 8017c62:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 8017c66:	f7f1 fa35 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_value_color(&styles->scr, LV_STATE_DEFAULT, COLOR_SCR_TEXT);
 8017c6a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8017c6c:	2200      	movs	r2, #0
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
 8017c6e:	2179      	movs	r1, #121	; 0x79
 8017c70:	f003 0302 	and.w	r3, r3, #2
 8017c74:	6820      	ldr	r0, [r4, #0]
 8017c76:	4293      	cmp	r3, r2
 8017c78:	bf15      	itete	ne
 8017c7a:	2342      	movne	r3, #66	; 0x42
 8017c7c:	23ec      	moveq	r3, #236	; 0xec
 8017c7e:	273e      	movne	r7, #62	; 0x3e
 8017c80:	27e9      	moveq	r7, #233	; 0xe9
 8017c82:	f363 0207 	bfi	r2, r3, #0, #8
 8017c86:	bf14      	ite	ne
 8017c88:	233b      	movne	r3, #59	; 0x3b
 8017c8a:	23e7      	moveq	r3, #231	; 0xe7
 8017c8c:	f367 220f 	bfi	r2, r7, #8, #8
 8017c90:	f363 4217 	bfi	r2, r3, #16, #8
 8017c94:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 8017c98:	f7f1 fa1c 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_text_sel_color(&styles->scr, LV_STATE_DEFAULT, COLOR_SCR_TEXT);
 8017c9c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8017c9e:	2200      	movs	r2, #0
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_COLOR, text_sel_color, lv_color_t, _color, nonscalar)
 8017ca0:	f248 018a 	movw	r1, #32906	; 0x808a
 8017ca4:	f003 0302 	and.w	r3, r3, #2
 8017ca8:	6820      	ldr	r0, [r4, #0]
 8017caa:	4293      	cmp	r3, r2
 8017cac:	bf15      	itete	ne
 8017cae:	2342      	movne	r3, #66	; 0x42
 8017cb0:	23ec      	moveq	r3, #236	; 0xec
 8017cb2:	273e      	movne	r7, #62	; 0x3e
 8017cb4:	27e9      	moveq	r7, #233	; 0xe9
 8017cb6:	f363 0207 	bfi	r2, r3, #0, #8
 8017cba:	bf14      	ite	ne
 8017cbc:	233b      	movne	r3, #59	; 0x3b
 8017cbe:	23e7      	moveq	r3, #231	; 0xe7
 8017cc0:	f367 220f 	bfi	r2, r7, #8, #8
 8017cc4:	f363 4217 	bfi	r2, r3, #16, #8
 8017cc8:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 8017ccc:	f7f1 fa02 	bl	80090d4 <_lv_style_set_color>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_BG_COLOR, text_sel_bg_color, lv_color_t, _color, nonscalar)
 8017cd0:	68ea      	ldr	r2, [r5, #12]
 8017cd2:	f248 018b 	movw	r1, #32907	; 0x808b
 8017cd6:	6820      	ldr	r0, [r4, #0]
 8017cd8:	f7f1 f9fc 	bl	80090d4 <_lv_style_set_color>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_FONT, value_font, const lv_font_t *, _ptr, scalar)
 8017cdc:	6820      	ldr	r0, [r4, #0]
 8017cde:	69aa      	ldr	r2, [r5, #24]
 8017ce0:	217e      	movs	r1, #126	; 0x7e
 8017ce2:	f7f1 fb83 	bl	80093ec <_lv_style_set_ptr>
    style_init_reset(&styles->bg);
 8017ce6:	6820      	ldr	r0, [r4, #0]
    if(inited) lv_style_reset(style);
 8017ce8:	7833      	ldrb	r3, [r6, #0]
    style_init_reset(&styles->bg);
 8017cea:	3004      	adds	r0, #4
    if(inited) lv_style_reset(style);
 8017cec:	2b00      	cmp	r3, #0
 8017cee:	f000 86a4 	beq.w	8018a3a <basic_init+0xe5a>
 8017cf2:	f7f1 f919 	bl	8008f28 <lv_style_reset>
    lv_style_set_radius(&styles->bg, LV_STATE_DEFAULT, LV_DPX(8));
 8017cf6:	6823      	ldr	r3, [r4, #0]
 8017cf8:	2000      	movs	r0, #0
 8017cfa:	1d1f      	adds	r7, r3, #4
 8017cfc:	f7fb fdf0 	bl	80138e0 <lv_disp_get_dpi>
 8017d00:	281d      	cmp	r0, #29
 8017d02:	f300 8761 	bgt.w	8018bc8 <basic_init+0xfe8>
 8017d06:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
 8017d08:	4638      	mov	r0, r7
 8017d0a:	2101      	movs	r1, #1
 8017d0c:	f7f1 f914 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_bg_opa(&styles->bg, LV_STATE_DEFAULT, LV_OPA_COVER);
 8017d10:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
 8017d12:	22ff      	movs	r2, #255	; 0xff
 8017d14:	212c      	movs	r1, #44	; 0x2c
 8017d16:	3004      	adds	r0, #4
 8017d18:	f7f1 faa6 	bl	8009268 <_lv_style_set_opa>
    lv_style_set_bg_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG);
 8017d1c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8017d1e:	6820      	ldr	r0, [r4, #0]
 8017d20:	079f      	lsls	r7, r3, #30
 8017d22:	f100 0004 	add.w	r0, r0, #4
 8017d26:	f100 8683 	bmi.w	8018a30 <basic_init+0xe50>
 8017d2a:	2358      	movs	r3, #88	; 0x58
 8017d2c:	2762      	movs	r7, #98	; 0x62
 8017d2e:	f04f 0c73 	mov.w	ip, #115	; 0x73
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
 8017d32:	2200      	movs	r2, #0
 8017d34:	2129      	movs	r1, #41	; 0x29
 8017d36:	f36c 0207 	bfi	r2, ip, #0, #8
 8017d3a:	f367 220f 	bfi	r2, r7, #8, #8
 8017d3e:	f363 4217 	bfi	r2, r3, #16, #8
 8017d42:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 8017d46:	f7f1 f9c5 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_border_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_BORDER);
 8017d4a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8017d4c:	2200      	movs	r2, #0
 8017d4e:	6820      	ldr	r0, [r4, #0]
 8017d50:	f003 0302 	and.w	r3, r3, #2
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
 8017d54:	2139      	movs	r1, #57	; 0x39
 8017d56:	3004      	adds	r0, #4
 8017d58:	4293      	cmp	r3, r2
 8017d5a:	bf15      	itete	ne
 8017d5c:	f04f 0ce3 	movne.w	ip, #227	; 0xe3
 8017d60:	f04f 0c97 	moveq.w	ip, #151	; 0x97
 8017d64:	27dd      	movne	r7, #221	; 0xdd
 8017d66:	278a      	moveq	r7, #138	; 0x8a
 8017d68:	f36c 0207 	bfi	r2, ip, #0, #8
 8017d6c:	bf14      	ite	ne
 8017d6e:	23d6      	movne	r3, #214	; 0xd6
 8017d70:	2380      	moveq	r3, #128	; 0x80
 8017d72:	f367 220f 	bfi	r2, r7, #8, #8
 8017d76:	f363 4217 	bfi	r2, r3, #16, #8
 8017d7a:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 8017d7e:	f7f1 f9a9 	bl	80090d4 <_lv_style_set_color>
    if((theme.flags & LV_THEME_MATERIAL_FLAG_NO_FOCUS) == 0)lv_style_set_border_color(&styles->bg, LV_STATE_FOCUSED,
 8017d82:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8017d84:	0698      	lsls	r0, r3, #26
 8017d86:	f140 8716 	bpl.w	8018bb6 <basic_init+0xfd6>
    lv_style_set_border_color(&styles->bg, LV_STATE_EDITED, theme.color_secondary);
 8017d8a:	6820      	ldr	r0, [r4, #0]
 8017d8c:	f240 4139 	movw	r1, #1081	; 0x439
 8017d90:	692a      	ldr	r2, [r5, #16]
 8017d92:	3004      	adds	r0, #4
 8017d94:	f7f1 f99e 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_border_width(&styles->bg, LV_STATE_DEFAULT, BORDER_WIDTH);
 8017d98:	6823      	ldr	r3, [r4, #0]
 8017d9a:	2000      	movs	r0, #0
 8017d9c:	1d1f      	adds	r7, r3, #4
 8017d9e:	f7fb fd9f 	bl	80138e0 <lv_disp_get_dpi>
 8017da2:	2877      	cmp	r0, #119	; 0x77
 8017da4:	f300 86fa 	bgt.w	8018b9c <basic_init+0xfbc>
 8017da8:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
 8017daa:	4638      	mov	r0, r7
 8017dac:	2130      	movs	r1, #48	; 0x30
 8017dae:	f7f1 f8c3 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_border_post(&styles->bg, LV_STATE_DEFAULT, true);
 8017db2:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
 8017db4:	2133      	movs	r1, #51	; 0x33
 8017db6:	2201      	movs	r2, #1
 8017db8:	3004      	adds	r0, #4
 8017dba:	f7f1 f8bd 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_text_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_TEXT);
 8017dbe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8017dc0:	6820      	ldr	r0, [r4, #0]
 8017dc2:	0799      	lsls	r1, r3, #30
 8017dc4:	f100 0004 	add.w	r0, r0, #4
 8017dc8:	f100 862c 	bmi.w	8018a24 <basic_init+0xe44>
 8017dcc:	23ff      	movs	r3, #255	; 0xff
 8017dce:	461f      	mov	r7, r3
 8017dd0:	469c      	mov	ip, r3
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
 8017dd2:	2200      	movs	r2, #0
 8017dd4:	f248 0189 	movw	r1, #32905	; 0x8089
 8017dd8:	f36c 0207 	bfi	r2, ip, #0, #8
 8017ddc:	f367 220f 	bfi	r2, r7, #8, #8
 8017de0:	f363 4217 	bfi	r2, r3, #16, #8
 8017de4:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 8017de8:	f7f1 f974 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_value_font(&styles->bg, LV_STATE_DEFAULT, theme.font_normal);
 8017dec:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_FONT, value_font, const lv_font_t *, _ptr, scalar)
 8017dee:	69aa      	ldr	r2, [r5, #24]
 8017df0:	217e      	movs	r1, #126	; 0x7e
 8017df2:	3004      	adds	r0, #4
 8017df4:	f7f1 fafa 	bl	80093ec <_lv_style_set_ptr>
    lv_style_set_value_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_TEXT);
 8017df8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8017dfa:	6820      	ldr	r0, [r4, #0]
 8017dfc:	079a      	lsls	r2, r3, #30
 8017dfe:	f100 0004 	add.w	r0, r0, #4
 8017e02:	f100 8609 	bmi.w	8018a18 <basic_init+0xe38>
 8017e06:	23ff      	movs	r3, #255	; 0xff
 8017e08:	461f      	mov	r7, r3
 8017e0a:	469c      	mov	ip, r3
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
 8017e0c:	2200      	movs	r2, #0
 8017e0e:	2179      	movs	r1, #121	; 0x79
 8017e10:	f36c 0207 	bfi	r2, ip, #0, #8
 8017e14:	f367 220f 	bfi	r2, r7, #8, #8
 8017e18:	f363 4217 	bfi	r2, r3, #16, #8
 8017e1c:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 8017e20:	f7f1 f958 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_image_recolor(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_TEXT);
 8017e24:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8017e26:	6820      	ldr	r0, [r4, #0]
 8017e28:	079b      	lsls	r3, r3, #30
 8017e2a:	f100 0004 	add.w	r0, r0, #4
 8017e2e:	f100 85ed 	bmi.w	8018a0c <basic_init+0xe2c>
 8017e32:	23ff      	movs	r3, #255	; 0xff
 8017e34:	461f      	mov	r7, r3
 8017e36:	469c      	mov	ip, r3
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
 8017e38:	2200      	movs	r2, #0
 8017e3a:	f248 01a9 	movw	r1, #32937	; 0x80a9
 8017e3e:	f36c 0207 	bfi	r2, ip, #0, #8
 8017e42:	f367 220f 	bfi	r2, r7, #8, #8
 8017e46:	f363 4217 	bfi	r2, r3, #16, #8
 8017e4a:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 8017e4e:	f7f1 f941 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_line_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_TEXT);
 8017e52:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8017e54:	6820      	ldr	r0, [r4, #0]
 8017e56:	079f      	lsls	r7, r3, #30
 8017e58:	f100 0004 	add.w	r0, r0, #4
 8017e5c:	f100 85d0 	bmi.w	8018a00 <basic_init+0xe20>
 8017e60:	23ff      	movs	r3, #255	; 0xff
 8017e62:	461f      	mov	r7, r3
 8017e64:	469c      	mov	ip, r3
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
 8017e66:	2200      	movs	r2, #0
 8017e68:	2199      	movs	r1, #153	; 0x99
 8017e6a:	f36c 0207 	bfi	r2, ip, #0, #8
 8017e6e:	f367 220f 	bfi	r2, r7, #8, #8
 8017e72:	f363 4217 	bfi	r2, r3, #16, #8
 8017e76:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 8017e7a:	f7f1 f92b 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_line_width(&styles->bg, LV_STATE_DEFAULT, 1);
 8017e7e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
 8017e80:	2201      	movs	r2, #1
 8017e82:	2190      	movs	r1, #144	; 0x90
 8017e84:	3004      	adds	r0, #4
 8017e86:	f7f1 f857 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_pad_left(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
 8017e8a:	6823      	ldr	r3, [r4, #0]
 8017e8c:	2000      	movs	r0, #0
 8017e8e:	f103 0804 	add.w	r8, r3, #4
 8017e92:	f7fb fd33 	bl	80138fc <lv_disp_get_size_category>
 8017e96:	2801      	cmp	r0, #1
 8017e98:	f04f 0000 	mov.w	r0, #0
 8017e9c:	f240 8605 	bls.w	8018aaa <basic_init+0xeca>
 8017ea0:	f7fb fd1e 	bl	80138e0 <lv_disp_get_dpi>
 8017ea4:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8017ea8:	0040      	lsls	r0, r0, #1
 8017eaa:	28ef      	cmp	r0, #239	; 0xef
 8017eac:	f300 86db 	bgt.w	8018c66 <basic_init+0x1086>
 8017eb0:	2701      	movs	r7, #1
 8017eb2:	2000      	movs	r0, #0
 8017eb4:	f7fb fd14 	bl	80138e0 <lv_disp_get_dpi>
 8017eb8:	2877      	cmp	r0, #119	; 0x77
 8017eba:	f300 8692 	bgt.w	8018be2 <basic_init+0x1002>
 8017ebe:	2201      	movs	r2, #1
 8017ec0:	443a      	add	r2, r7
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
 8017ec2:	4640      	mov	r0, r8
 8017ec4:	2112      	movs	r1, #18
 8017ec6:	b212      	sxth	r2, r2
 8017ec8:	f7f1 f836 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_pad_right(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
 8017ecc:	6823      	ldr	r3, [r4, #0]
 8017ece:	2000      	movs	r0, #0
 8017ed0:	f103 0804 	add.w	r8, r3, #4
 8017ed4:	f7fb fd12 	bl	80138fc <lv_disp_get_size_category>
 8017ed8:	2801      	cmp	r0, #1
 8017eda:	f04f 0000 	mov.w	r0, #0
 8017ede:	f240 85d8 	bls.w	8018a92 <basic_init+0xeb2>
 8017ee2:	f7fb fcfd 	bl	80138e0 <lv_disp_get_dpi>
 8017ee6:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8017eea:	0040      	lsls	r0, r0, #1
 8017eec:	28ef      	cmp	r0, #239	; 0xef
 8017eee:	f300 86ca 	bgt.w	8018c86 <basic_init+0x10a6>
 8017ef2:	e005      	b.n	8017f00 <basic_init+0x320>
 8017ef4:	200201a4 	.word	0x200201a4
 8017ef8:	200201a8 	.word	0x200201a8
 8017efc:	200201ac 	.word	0x200201ac
 8017f00:	2701      	movs	r7, #1
 8017f02:	2000      	movs	r0, #0
 8017f04:	f7fb fcec 	bl	80138e0 <lv_disp_get_dpi>
 8017f08:	2877      	cmp	r0, #119	; 0x77
 8017f0a:	f300 8690 	bgt.w	8018c2e <basic_init+0x104e>
 8017f0e:	2201      	movs	r2, #1
 8017f10:	443a      	add	r2, r7
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
 8017f12:	4640      	mov	r0, r8
 8017f14:	2113      	movs	r1, #19
 8017f16:	b212      	sxth	r2, r2
 8017f18:	f7f1 f80e 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_pad_top(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
 8017f1c:	6823      	ldr	r3, [r4, #0]
 8017f1e:	2000      	movs	r0, #0
 8017f20:	f103 0804 	add.w	r8, r3, #4
 8017f24:	f7fb fcea 	bl	80138fc <lv_disp_get_size_category>
 8017f28:	2801      	cmp	r0, #1
 8017f2a:	f04f 0000 	mov.w	r0, #0
 8017f2e:	f240 85a4 	bls.w	8018a7a <basic_init+0xe9a>
 8017f32:	f7fb fcd5 	bl	80138e0 <lv_disp_get_dpi>
 8017f36:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8017f3a:	0040      	lsls	r0, r0, #1
 8017f3c:	28ef      	cmp	r0, #239	; 0xef
 8017f3e:	f300 86b2 	bgt.w	8018ca6 <basic_init+0x10c6>
 8017f42:	2701      	movs	r7, #1
 8017f44:	2000      	movs	r0, #0
 8017f46:	f7fb fccb 	bl	80138e0 <lv_disp_get_dpi>
 8017f4a:	2877      	cmp	r0, #119	; 0x77
 8017f4c:	f300 8619 	bgt.w	8018b82 <basic_init+0xfa2>
 8017f50:	2201      	movs	r2, #1
 8017f52:	443a      	add	r2, r7
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
 8017f54:	4640      	mov	r0, r8
 8017f56:	2110      	movs	r1, #16
 8017f58:	b212      	sxth	r2, r2
 8017f5a:	f7f0 ffed 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_pad_bottom(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
 8017f5e:	6823      	ldr	r3, [r4, #0]
 8017f60:	2000      	movs	r0, #0
 8017f62:	f103 0804 	add.w	r8, r3, #4
 8017f66:	f7fb fcc9 	bl	80138fc <lv_disp_get_size_category>
 8017f6a:	2801      	cmp	r0, #1
 8017f6c:	f04f 0000 	mov.w	r0, #0
 8017f70:	f240 856b 	bls.w	8018a4a <basic_init+0xe6a>
 8017f74:	f7fb fcb4 	bl	80138e0 <lv_disp_get_dpi>
 8017f78:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8017f7c:	0040      	lsls	r0, r0, #1
 8017f7e:	28ef      	cmp	r0, #239	; 0xef
 8017f80:	f300 86a1 	bgt.w	8018cc6 <basic_init+0x10e6>
 8017f84:	2701      	movs	r7, #1
 8017f86:	2000      	movs	r0, #0
 8017f88:	f7fb fcaa 	bl	80138e0 <lv_disp_get_dpi>
 8017f8c:	2877      	cmp	r0, #119	; 0x77
 8017f8e:	f300 8641 	bgt.w	8018c14 <basic_init+0x1034>
 8017f92:	2201      	movs	r2, #1
 8017f94:	443a      	add	r2, r7
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
 8017f96:	4640      	mov	r0, r8
 8017f98:	2111      	movs	r1, #17
 8017f9a:	b212      	sxth	r2, r2
 8017f9c:	f7f0 ffcc 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_pad_inner(&styles->bg, LV_STATE_DEFAULT, PAD_DEF);
 8017fa0:	2000      	movs	r0, #0
 8017fa2:	6827      	ldr	r7, [r4, #0]
 8017fa4:	f7fb fcaa 	bl	80138fc <lv_disp_get_size_category>
 8017fa8:	2801      	cmp	r0, #1
 8017faa:	f04f 0000 	mov.w	r0, #0
 8017fae:	f107 0704 	add.w	r7, r7, #4
 8017fb2:	f240 8556 	bls.w	8018a62 <basic_init+0xe82>
 8017fb6:	f7fb fc93 	bl	80138e0 <lv_disp_get_dpi>
 8017fba:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8017fbe:	0040      	lsls	r0, r0, #1
 8017fc0:	28ef      	cmp	r0, #239	; 0xef
 8017fc2:	f300 8690 	bgt.w	8018ce6 <basic_init+0x1106>
 8017fc6:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
 8017fc8:	4638      	mov	r0, r7
 8017fca:	2114      	movs	r1, #20
 8017fcc:	f7f0 ffb4 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_transition_time(&styles->bg, LV_STATE_DEFAULT, TRANSITION_TIME);
 8017fd0:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int, scalar)
 8017fd2:	2200      	movs	r2, #0
 8017fd4:	21b0      	movs	r1, #176	; 0xb0
 8017fd6:	3004      	adds	r0, #4
 8017fd8:	f7f0 ffae 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_transition_prop_6(&styles->bg, LV_STATE_DEFAULT, LV_STYLE_BORDER_COLOR);
 8017fdc:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int, scalar)
 8017fde:	2239      	movs	r2, #57	; 0x39
 8017fe0:	21b7      	movs	r1, #183	; 0xb7
 8017fe2:	3004      	adds	r0, #4
 8017fe4:	f7f0 ffa8 	bl	8008f38 <_lv_style_set_int>
    style_init_reset(&styles->bg_sec);
 8017fe8:	6820      	ldr	r0, [r4, #0]
    if(inited) lv_style_reset(style);
 8017fea:	7833      	ldrb	r3, [r6, #0]
    style_init_reset(&styles->bg_sec);
 8017fec:	300c      	adds	r0, #12
    if(inited) lv_style_reset(style);
 8017fee:	2b00      	cmp	r3, #0
 8017ff0:	f000 8502 	beq.w	80189f8 <basic_init+0xe18>
 8017ff4:	f7f0 ff98 	bl	8008f28 <lv_style_reset>
    lv_style_copy(&styles->bg_sec, &styles->bg);
 8017ff8:	6820      	ldr	r0, [r4, #0]
 8017ffa:	1d01      	adds	r1, r0, #4
 8017ffc:	300c      	adds	r0, #12
 8017ffe:	f7f0 fc81 	bl	8008904 <lv_style_copy>
    lv_style_set_bg_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC);
 8018002:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8018004:	2200      	movs	r2, #0
 8018006:	6820      	ldr	r0, [r4, #0]
 8018008:	f003 0302 	and.w	r3, r3, #2
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
 801800c:	2129      	movs	r1, #41	; 0x29
 801800e:	300c      	adds	r0, #12
 8018010:	4293      	cmp	r3, r2
 8018012:	bf15      	itete	ne
 8018014:	23d9      	movne	r3, #217	; 0xd9
 8018016:	234d      	moveq	r3, #77	; 0x4d
 8018018:	27d7      	movne	r7, #215	; 0xd7
 801801a:	2749      	moveq	r7, #73	; 0x49
 801801c:	f363 0207 	bfi	r2, r3, #0, #8
 8018020:	bf14      	ite	ne
 8018022:	23d4      	movne	r3, #212	; 0xd4
 8018024:	2345      	moveq	r3, #69	; 0x45
 8018026:	f367 220f 	bfi	r2, r7, #8, #8
 801802a:	f363 4217 	bfi	r2, r3, #16, #8
 801802e:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 8018032:	f7f1 f84f 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_border_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_BORDER);
 8018036:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8018038:	6820      	ldr	r0, [r4, #0]
 801803a:	0799      	lsls	r1, r3, #30
 801803c:	f100 000c 	add.w	r0, r0, #12
 8018040:	f100 84d4 	bmi.w	80189ec <basic_init+0xe0c>
 8018044:	2340      	movs	r3, #64	; 0x40
 8018046:	461f      	mov	r7, r3
 8018048:	469c      	mov	ip, r3
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
 801804a:	2200      	movs	r2, #0
 801804c:	2139      	movs	r1, #57	; 0x39
 801804e:	f36c 0207 	bfi	r2, ip, #0, #8
 8018052:	f367 220f 	bfi	r2, r7, #8, #8
 8018056:	f363 4217 	bfi	r2, r3, #16, #8
 801805a:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 801805e:	f7f1 f839 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_text_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
 8018062:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8018064:	2200      	movs	r2, #0
 8018066:	6820      	ldr	r0, [r4, #0]
 8018068:	f003 0302 	and.w	r3, r3, #2
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
 801806c:	f248 0189 	movw	r1, #32905	; 0x8089
 8018070:	300c      	adds	r0, #12
 8018072:	4293      	cmp	r3, r2
 8018074:	bf15      	itete	ne
 8018076:	f04f 0c4f 	movne.w	ip, #79	; 0x4f
 801807a:	f04f 0cad 	moveq.w	ip, #173	; 0xad
 801807e:	2740      	movne	r7, #64	; 0x40
 8018080:	27a8      	moveq	r7, #168	; 0xa8
 8018082:	f36c 0207 	bfi	r2, ip, #0, #8
 8018086:	bf14      	ite	ne
 8018088:	2331      	movne	r3, #49	; 0x31
 801808a:	23a5      	moveq	r3, #165	; 0xa5
 801808c:	f367 220f 	bfi	r2, r7, #8, #8
 8018090:	f363 4217 	bfi	r2, r3, #16, #8
 8018094:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 8018098:	f7f1 f81c 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_value_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
 801809c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801809e:	2200      	movs	r2, #0
 80180a0:	6820      	ldr	r0, [r4, #0]
 80180a2:	f003 0302 	and.w	r3, r3, #2
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
 80180a6:	2179      	movs	r1, #121	; 0x79
 80180a8:	300c      	adds	r0, #12
 80180aa:	4293      	cmp	r3, r2
 80180ac:	bf15      	itete	ne
 80180ae:	f04f 0c4f 	movne.w	ip, #79	; 0x4f
 80180b2:	f04f 0cad 	moveq.w	ip, #173	; 0xad
 80180b6:	2740      	movne	r7, #64	; 0x40
 80180b8:	27a8      	moveq	r7, #168	; 0xa8
 80180ba:	f36c 0207 	bfi	r2, ip, #0, #8
 80180be:	bf14      	ite	ne
 80180c0:	2331      	movne	r3, #49	; 0x31
 80180c2:	23a5      	moveq	r3, #165	; 0xa5
 80180c4:	f367 220f 	bfi	r2, r7, #8, #8
 80180c8:	f363 4217 	bfi	r2, r3, #16, #8
 80180cc:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 80180d0:	f7f1 f800 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_image_recolor(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
 80180d4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80180d6:	2200      	movs	r2, #0
 80180d8:	6820      	ldr	r0, [r4, #0]
 80180da:	f003 0302 	and.w	r3, r3, #2
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
 80180de:	f248 01a9 	movw	r1, #32937	; 0x80a9
 80180e2:	300c      	adds	r0, #12
 80180e4:	4293      	cmp	r3, r2
 80180e6:	bf15      	itete	ne
 80180e8:	f04f 0c4f 	movne.w	ip, #79	; 0x4f
 80180ec:	f04f 0cad 	moveq.w	ip, #173	; 0xad
 80180f0:	2740      	movne	r7, #64	; 0x40
 80180f2:	27a8      	moveq	r7, #168	; 0xa8
 80180f4:	f36c 0207 	bfi	r2, ip, #0, #8
 80180f8:	bf14      	ite	ne
 80180fa:	2331      	movne	r3, #49	; 0x31
 80180fc:	23a5      	moveq	r3, #165	; 0xa5
 80180fe:	f367 220f 	bfi	r2, r7, #8, #8
 8018102:	f363 4217 	bfi	r2, r3, #16, #8
 8018106:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 801810a:	f7f0 ffe3 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_line_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
 801810e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8018110:	2200      	movs	r2, #0
 8018112:	6820      	ldr	r0, [r4, #0]
 8018114:	f003 0302 	and.w	r3, r3, #2
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
 8018118:	2199      	movs	r1, #153	; 0x99
 801811a:	300c      	adds	r0, #12
 801811c:	4293      	cmp	r3, r2
 801811e:	bf15      	itete	ne
 8018120:	f04f 0c4f 	movne.w	ip, #79	; 0x4f
 8018124:	f04f 0cad 	moveq.w	ip, #173	; 0xad
 8018128:	2740      	movne	r7, #64	; 0x40
 801812a:	27a8      	moveq	r7, #168	; 0xa8
 801812c:	f36c 0207 	bfi	r2, ip, #0, #8
 8018130:	bf14      	ite	ne
 8018132:	2331      	movne	r3, #49	; 0x31
 8018134:	23a5      	moveq	r3, #165	; 0xa5
 8018136:	f367 220f 	bfi	r2, r7, #8, #8
 801813a:	f363 4217 	bfi	r2, r3, #16, #8
 801813e:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 8018142:	f7f0 ffc7 	bl	80090d4 <_lv_style_set_color>
    style_init_reset(&styles->bg_click);
 8018146:	6820      	ldr	r0, [r4, #0]
    if(inited) lv_style_reset(style);
 8018148:	7833      	ldrb	r3, [r6, #0]
    style_init_reset(&styles->bg_click);
 801814a:	3008      	adds	r0, #8
    if(inited) lv_style_reset(style);
 801814c:	2b00      	cmp	r3, #0
 801814e:	f000 8449 	beq.w	80189e4 <basic_init+0xe04>
 8018152:	f7f0 fee9 	bl	8008f28 <lv_style_reset>
    lv_style_set_bg_color(&styles->bg_click, LV_STATE_PRESSED, COLOR_BG_PR);
 8018156:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8018158:	6820      	ldr	r0, [r4, #0]
 801815a:	079a      	lsls	r2, r3, #30
 801815c:	f100 0008 	add.w	r0, r0, #8
 8018160:	f100 843b 	bmi.w	80189da <basic_init+0xdfa>
 8018164:	2349      	movs	r3, #73	; 0x49
 8018166:	274f      	movs	r7, #79	; 0x4f
 8018168:	f04f 0c57 	mov.w	ip, #87	; 0x57
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
 801816c:	2200      	movs	r2, #0
 801816e:	f241 0129 	movw	r1, #4137	; 0x1029
 8018172:	f36c 0207 	bfi	r2, ip, #0, #8
 8018176:	f367 220f 	bfi	r2, r7, #8, #8
 801817a:	f363 4217 	bfi	r2, r3, #16, #8
 801817e:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 8018182:	f7f0 ffa7 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_bg_color(&styles->bg_click, LV_STATE_CHECKED, COLOR_BG_CHK);
 8018186:	6820      	ldr	r0, [r4, #0]
 8018188:	68ea      	ldr	r2, [r5, #12]
 801818a:	f240 1129 	movw	r1, #297	; 0x129
 801818e:	3008      	adds	r0, #8
 8018190:	f7f0 ffa0 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_bg_color(&styles->bg_click, LV_STATE_PRESSED | LV_STATE_CHECKED, COLOR_BG_PR_CHK);
 8018194:	6823      	ldr	r3, [r4, #0]
 8018196:	2133      	movs	r1, #51	; 0x33
 8018198:	68e8      	ldr	r0, [r5, #12]
 801819a:	f103 0708 	add.w	r7, r3, #8
 801819e:	f7fc fae9 	bl	8014774 <lv_color_darken>
 80181a2:	f241 1129 	movw	r1, #4393	; 0x1129
 80181a6:	4602      	mov	r2, r0
 80181a8:	4638      	mov	r0, r7
 80181aa:	f7f0 ff93 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_bg_color(&styles->bg_click, LV_STATE_DISABLED, COLOR_BG_DIS);
 80181ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80181b0:	6820      	ldr	r0, [r4, #0]
 80181b2:	079b      	lsls	r3, r3, #30
 80181b4:	f100 0008 	add.w	r0, r0, #8
 80181b8:	f100 840a 	bmi.w	80189d0 <basic_init+0xdf0>
 80181bc:	2358      	movs	r3, #88	; 0x58
 80181be:	2762      	movs	r7, #98	; 0x62
 80181c0:	f04f 0c73 	mov.w	ip, #115	; 0x73
 80181c4:	2200      	movs	r2, #0
 80181c6:	f242 0129 	movw	r1, #8233	; 0x2029
 80181ca:	f36c 0207 	bfi	r2, ip, #0, #8
 80181ce:	f367 220f 	bfi	r2, r7, #8, #8
 80181d2:	f363 4217 	bfi	r2, r3, #16, #8
 80181d6:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 80181da:	f7f0 ff7b 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_border_width(&styles->bg_click, LV_STATE_CHECKED, 0);
 80181de:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
 80181e0:	2200      	movs	r2, #0
 80181e2:	f44f 7198 	mov.w	r1, #304	; 0x130
 80181e6:	3008      	adds	r0, #8
 80181e8:	f7f0 fea6 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_border_color(&styles->bg_click, LV_STATE_FOCUSED | LV_STATE_PRESSED, lv_color_darken(theme.color_primary,
 80181ec:	6823      	ldr	r3, [r4, #0]
 80181ee:	2133      	movs	r1, #51	; 0x33
 80181f0:	68e8      	ldr	r0, [r5, #12]
 80181f2:	f103 0708 	add.w	r7, r3, #8
 80181f6:	f7fc fabd 	bl	8014774 <lv_color_darken>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
 80181fa:	f241 2139 	movw	r1, #4665	; 0x1239
 80181fe:	4602      	mov	r2, r0
 8018200:	4638      	mov	r0, r7
 8018202:	f7f0 ff67 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_border_color(&styles->bg_click, LV_STATE_PRESSED, COLOR_BG_BORDER_PR);
 8018206:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8018208:	6820      	ldr	r0, [r4, #0]
 801820a:	079f      	lsls	r7, r3, #30
 801820c:	f100 0008 	add.w	r0, r0, #8
 8018210:	f100 83da 	bmi.w	80189c8 <basic_init+0xde8>
 8018214:	235f      	movs	r3, #95	; 0x5f
 8018216:	2765      	movs	r7, #101	; 0x65
 8018218:	f04f 0c6e 	mov.w	ip, #110	; 0x6e
 801821c:	2200      	movs	r2, #0
 801821e:	f241 0139 	movw	r1, #4153	; 0x1039
 8018222:	f36c 0207 	bfi	r2, ip, #0, #8
 8018226:	f367 220f 	bfi	r2, r7, #8, #8
 801822a:	f363 4217 	bfi	r2, r3, #16, #8
 801822e:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 8018232:	f7f0 ff4f 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_border_color(&styles->bg_click, LV_STATE_CHECKED, COLOR_BG_BORDER_CHK);
 8018236:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8018238:	2200      	movs	r2, #0
 801823a:	6820      	ldr	r0, [r4, #0]
 801823c:	f003 0302 	and.w	r3, r3, #2
 8018240:	f240 1139 	movw	r1, #313	; 0x139
 8018244:	3008      	adds	r0, #8
 8018246:	4293      	cmp	r3, r2
 8018248:	bf15      	itete	ne
 801824a:	f04f 0c42 	movne.w	ip, #66	; 0x42
 801824e:	f04f 0c6e 	moveq.w	ip, #110	; 0x6e
 8018252:	273e      	movne	r7, #62	; 0x3e
 8018254:	2765      	moveq	r7, #101	; 0x65
 8018256:	f36c 0207 	bfi	r2, ip, #0, #8
 801825a:	bf14      	ite	ne
 801825c:	233b      	movne	r3, #59	; 0x3b
 801825e:	235f      	moveq	r3, #95	; 0x5f
 8018260:	f367 220f 	bfi	r2, r7, #8, #8
 8018264:	f363 4217 	bfi	r2, r3, #16, #8
 8018268:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 801826c:	f7f0 ff32 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_border_color(&styles->bg_click, LV_STATE_PRESSED | LV_STATE_CHECKED, COLOR_BG_BORDER_CHK_PR);
 8018270:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8018272:	2200      	movs	r2, #0
 8018274:	6820      	ldr	r0, [r4, #0]
 8018276:	f003 0302 	and.w	r3, r3, #2
 801827a:	f241 1139 	movw	r1, #4409	; 0x1139
 801827e:	3008      	adds	r0, #8
 8018280:	4293      	cmp	r3, r2
 8018282:	bf15      	itete	ne
 8018284:	f04f 0c42 	movne.w	ip, #66	; 0x42
 8018288:	f04f 0c6e 	moveq.w	ip, #110	; 0x6e
 801828c:	273e      	movne	r7, #62	; 0x3e
 801828e:	2765      	moveq	r7, #101	; 0x65
 8018290:	f36c 0207 	bfi	r2, ip, #0, #8
 8018294:	bf14      	ite	ne
 8018296:	233b      	movne	r3, #59	; 0x3b
 8018298:	235f      	moveq	r3, #95	; 0x5f
 801829a:	f367 220f 	bfi	r2, r7, #8, #8
 801829e:	f363 4217 	bfi	r2, r3, #16, #8
 80182a2:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 80182a6:	f7f0 ff15 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_border_color(&styles->bg_click, LV_STATE_DISABLED, COLOR_BG_BORDER_DIS);
 80182aa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80182ac:	2200      	movs	r2, #0
 80182ae:	6820      	ldr	r0, [r4, #0]
 80182b0:	f003 0302 	and.w	r3, r3, #2
 80182b4:	f242 0139 	movw	r1, #8249	; 0x2039
 80182b8:	3008      	adds	r0, #8
 80182ba:	4293      	cmp	r3, r2
 80182bc:	bf15      	itete	ne
 80182be:	f04f 0ce3 	movne.w	ip, #227	; 0xe3
 80182c2:	f04f 0c6e 	moveq.w	ip, #110	; 0x6e
 80182c6:	27dd      	movne	r7, #221	; 0xdd
 80182c8:	2765      	moveq	r7, #101	; 0x65
 80182ca:	f36c 0207 	bfi	r2, ip, #0, #8
 80182ce:	bf14      	ite	ne
 80182d0:	23d6      	movne	r3, #214	; 0xd6
 80182d2:	235f      	moveq	r3, #95	; 0x5f
 80182d4:	f367 220f 	bfi	r2, r7, #8, #8
 80182d8:	f363 4217 	bfi	r2, r3, #16, #8
 80182dc:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 80182e0:	f7f0 fef8 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_text_color(&styles->bg_click, LV_STATE_PRESSED, COLOR_BG_TEXT_PR);
 80182e4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80182e6:	6820      	ldr	r0, [r4, #0]
 80182e8:	0799      	lsls	r1, r3, #30
 80182ea:	f100 0008 	add.w	r0, r0, #8
 80182ee:	f100 8366 	bmi.w	80189be <basic_init+0xdde>
 80182f2:	23ff      	movs	r3, #255	; 0xff
 80182f4:	461f      	mov	r7, r3
 80182f6:	469c      	mov	ip, r3
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
 80182f8:	2200      	movs	r2, #0
 80182fa:	f249 0189 	movw	r1, #37001	; 0x9089
 80182fe:	f36c 0207 	bfi	r2, ip, #0, #8
 8018302:	f367 220f 	bfi	r2, r7, #8, #8
 8018306:	f363 4217 	bfi	r2, r3, #16, #8
 801830a:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 801830e:	f7f0 fee1 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_text_color(&styles->bg_click, LV_STATE_CHECKED, COLOR_BG_TEXT_CHK);
 8018312:	6820      	ldr	r0, [r4, #0]
 8018314:	f04f 32ff 	mov.w	r2, #4294967295
 8018318:	f248 1189 	movw	r1, #33161	; 0x8189
 801831c:	3008      	adds	r0, #8
 801831e:	f7f0 fed9 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_text_color(&styles->bg_click, LV_STATE_PRESSED | LV_STATE_CHECKED, COLOR_BG_TEXT_CHK_PR);
 8018322:	6820      	ldr	r0, [r4, #0]
 8018324:	f04f 32ff 	mov.w	r2, #4294967295
 8018328:	f249 1189 	movw	r1, #37257	; 0x9189
 801832c:	3008      	adds	r0, #8
 801832e:	f7f0 fed1 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_text_color(&styles->bg_click, LV_STATE_DISABLED, COLOR_BG_TEXT_DIS);
 8018332:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8018334:	2200      	movs	r2, #0
 8018336:	6820      	ldr	r0, [r4, #0]
 8018338:	f013 0f02 	tst.w	r3, #2
 801833c:	f24a 0189 	movw	r1, #41097	; 0xa089
 8018340:	f100 0008 	add.w	r0, r0, #8
 8018344:	bf14      	ite	ne
 8018346:	23aa      	movne	r3, #170	; 0xaa
 8018348:	2399      	moveq	r3, #153	; 0x99
 801834a:	f363 0207 	bfi	r2, r3, #0, #8
 801834e:	f363 220f 	bfi	r2, r3, #8, #8
 8018352:	f363 4217 	bfi	r2, r3, #16, #8
 8018356:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 801835a:	f7f0 febb 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_image_recolor(&styles->bg_click, LV_STATE_PRESSED, COLOR_BG_TEXT_PR);
 801835e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8018360:	6820      	ldr	r0, [r4, #0]
 8018362:	079a      	lsls	r2, r3, #30
 8018364:	f100 0008 	add.w	r0, r0, #8
 8018368:	f100 8324 	bmi.w	80189b4 <basic_init+0xdd4>
 801836c:	23ff      	movs	r3, #255	; 0xff
 801836e:	461f      	mov	r7, r3
 8018370:	469c      	mov	ip, r3
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
 8018372:	2200      	movs	r2, #0
 8018374:	f249 01a9 	movw	r1, #37033	; 0x90a9
 8018378:	f36c 0207 	bfi	r2, ip, #0, #8
 801837c:	f367 220f 	bfi	r2, r7, #8, #8
 8018380:	f363 4217 	bfi	r2, r3, #16, #8
 8018384:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 8018388:	f7f0 fea4 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_image_recolor(&styles->bg_click, LV_STATE_CHECKED, COLOR_BG_TEXT_CHK);
 801838c:	6820      	ldr	r0, [r4, #0]
 801838e:	f04f 32ff 	mov.w	r2, #4294967295
 8018392:	f248 11a9 	movw	r1, #33193	; 0x81a9
 8018396:	3008      	adds	r0, #8
 8018398:	f7f0 fe9c 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_image_recolor(&styles->bg_click, LV_STATE_PRESSED | LV_STATE_CHECKED, COLOR_BG_TEXT_CHK_PR);
 801839c:	6820      	ldr	r0, [r4, #0]
 801839e:	f04f 32ff 	mov.w	r2, #4294967295
 80183a2:	f249 11a9 	movw	r1, #37289	; 0x91a9
 80183a6:	3008      	adds	r0, #8
 80183a8:	f7f0 fe94 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_image_recolor(&styles->bg_click, LV_STATE_DISABLED, COLOR_BG_TEXT_DIS);
 80183ac:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80183ae:	2200      	movs	r2, #0
 80183b0:	6820      	ldr	r0, [r4, #0]
 80183b2:	f013 0f02 	tst.w	r3, #2
 80183b6:	f24a 01a9 	movw	r1, #41129	; 0xa0a9
 80183ba:	f100 0008 	add.w	r0, r0, #8
 80183be:	bf14      	ite	ne
 80183c0:	23aa      	movne	r3, #170	; 0xaa
 80183c2:	2399      	moveq	r3, #153	; 0x99
 80183c4:	f363 0207 	bfi	r2, r3, #0, #8
 80183c8:	f363 220f 	bfi	r2, r3, #8, #8
 80183cc:	f363 4217 	bfi	r2, r3, #16, #8
 80183d0:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 80183d4:	f7f0 fe7e 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_transition_prop_5(&styles->bg_click, LV_STATE_DEFAULT, LV_STYLE_BG_COLOR);
 80183d8:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_5, transition_prop_5, lv_style_int_t, _int, scalar)
 80183da:	2229      	movs	r2, #41	; 0x29
 80183dc:	21b6      	movs	r1, #182	; 0xb6
 80183de:	3008      	adds	r0, #8
 80183e0:	f7f0 fdaa 	bl	8008f38 <_lv_style_set_int>
    style_init_reset(&styles->btn);
 80183e4:	6820      	ldr	r0, [r4, #0]
    if(inited) lv_style_reset(style);
 80183e6:	7833      	ldrb	r3, [r6, #0]
    style_init_reset(&styles->btn);
 80183e8:	3010      	adds	r0, #16
    if(inited) lv_style_reset(style);
 80183ea:	2b00      	cmp	r3, #0
 80183ec:	f000 82df 	beq.w	80189ae <basic_init+0xdce>
 80183f0:	f7f0 fd9a 	bl	8008f28 <lv_style_reset>
    lv_style_set_radius(&styles->btn, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
 80183f4:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
 80183f6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80183fa:	2101      	movs	r1, #1
 80183fc:	3010      	adds	r0, #16
 80183fe:	f7f0 fd9b 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_bg_opa(&styles->btn, LV_STATE_DEFAULT, LV_OPA_COVER);
 8018402:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
 8018404:	22ff      	movs	r2, #255	; 0xff
 8018406:	212c      	movs	r1, #44	; 0x2c
 8018408:	3010      	adds	r0, #16
 801840a:	f7f0 ff2d 	bl	8009268 <_lv_style_set_opa>
    lv_style_set_bg_color(&styles->btn, LV_STATE_DEFAULT, COLOR_BTN);
 801840e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8018410:	6820      	ldr	r0, [r4, #0]
 8018412:	079b      	lsls	r3, r3, #30
 8018414:	f100 0010 	add.w	r0, r0, #16
 8018418:	f100 82c5 	bmi.w	80189a6 <basic_init+0xdc6>
 801841c:	2358      	movs	r3, #88	; 0x58
 801841e:	2762      	movs	r7, #98	; 0x62
 8018420:	f04f 0c73 	mov.w	ip, #115	; 0x73
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
 8018424:	2200      	movs	r2, #0
 8018426:	2129      	movs	r1, #41	; 0x29
 8018428:	f36c 0207 	bfi	r2, ip, #0, #8
 801842c:	f367 220f 	bfi	r2, r7, #8, #8
 8018430:	f363 4217 	bfi	r2, r3, #16, #8
 8018434:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 8018438:	f7f0 fe4c 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_bg_color(&styles->btn, LV_STATE_PRESSED, COLOR_BTN_PR);
 801843c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801843e:	6820      	ldr	r0, [r4, #0]
 8018440:	079f      	lsls	r7, r3, #30
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8018442:	f895 c00e 	ldrb.w	ip, [r5, #14]
 8018446:	f100 0010 	add.w	r0, r0, #16
 801844a:	f140 829e 	bpl.w	801898a <basic_init+0xdaa>
 801844e:	2333      	movs	r3, #51	; 0x33
 8018450:	f64c 3234 	movw	r2, #52020	; 0xcb34
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8018454:	7b6f      	ldrb	r7, [r5, #13]
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8018456:	7b29      	ldrb	r1, [r5, #12]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8018458:	fb13 2c0c 	smlabb	ip, r3, ip, r2
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 801845c:	fb13 2707 	smlabb	r7, r3, r7, r2
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8018460:	fb13 2301 	smlabb	r3, r3, r1, r2
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8018464:	eb07 2107 	add.w	r1, r7, r7, lsl #8
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8018468:	eb0c 2e0c 	add.w	lr, ip, ip, lsl #8
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 801846c:	eb03 2203 	add.w	r2, r3, r3, lsl #8
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8018470:	eb07 17c1 	add.w	r7, r7, r1, lsl #7
 8018474:	f241 0129 	movw	r1, #4137	; 0x1029
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8018478:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 801847c:	2200      	movs	r2, #0
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 801847e:	eb0c 1cce 	add.w	ip, ip, lr, lsl #7
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8018482:	f3c7 57c7 	ubfx	r7, r7, #23, #8
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8018486:	f3c3 53c7 	ubfx	r3, r3, #23, #8
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 801848a:	f3cc 5cc7 	ubfx	ip, ip, #23, #8
 801848e:	f363 0207 	bfi	r2, r3, #0, #8
 8018492:	f367 220f 	bfi	r2, r7, #8, #8
 8018496:	f36c 4217 	bfi	r2, ip, #16, #8
 801849a:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 801849e:	f7f0 fe19 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_bg_color(&styles->btn, LV_STATE_CHECKED, COLOR_BTN_CHK);
 80184a2:	6820      	ldr	r0, [r4, #0]
 80184a4:	68ea      	ldr	r2, [r5, #12]
 80184a6:	f240 1129 	movw	r1, #297	; 0x129
 80184aa:	3010      	adds	r0, #16
 80184ac:	f7f0 fe12 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_bg_color(&styles->btn, LV_STATE_CHECKED | LV_STATE_PRESSED, COLOR_BTN_CHK_PR);
 80184b0:	6823      	ldr	r3, [r4, #0]
 80184b2:	214c      	movs	r1, #76	; 0x4c
 80184b4:	68e8      	ldr	r0, [r5, #12]
 80184b6:	f103 0710 	add.w	r7, r3, #16
 80184ba:	f7fc f95b 	bl	8014774 <lv_color_darken>
 80184be:	f241 1129 	movw	r1, #4393	; 0x1129
 80184c2:	4602      	mov	r2, r0
 80184c4:	4638      	mov	r0, r7
 80184c6:	f7f0 fe05 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_bg_color(&styles->btn, LV_STATE_DISABLED, COLOR_BTN);
 80184ca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80184cc:	6820      	ldr	r0, [r4, #0]
 80184ce:	0799      	lsls	r1, r3, #30
 80184d0:	f100 0010 	add.w	r0, r0, #16
 80184d4:	f100 8255 	bmi.w	8018982 <basic_init+0xda2>
 80184d8:	2358      	movs	r3, #88	; 0x58
 80184da:	2762      	movs	r7, #98	; 0x62
 80184dc:	f04f 0c73 	mov.w	ip, #115	; 0x73
 80184e0:	2200      	movs	r2, #0
 80184e2:	f242 0129 	movw	r1, #8233	; 0x2029
 80184e6:	f36c 0207 	bfi	r2, ip, #0, #8
 80184ea:	f367 220f 	bfi	r2, r7, #8, #8
 80184ee:	f363 4217 	bfi	r2, r3, #16, #8
 80184f2:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 80184f6:	f7f0 fded 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_bg_color(&styles->btn, LV_STATE_DISABLED | LV_STATE_CHECKED, COLOR_BTN_DIS);
 80184fa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80184fc:	2200      	movs	r2, #0
 80184fe:	6820      	ldr	r0, [r4, #0]
 8018500:	f013 0f02 	tst.w	r3, #2
 8018504:	f242 1129 	movw	r1, #8489	; 0x2129
 8018508:	f100 0010 	add.w	r0, r0, #16
 801850c:	bf14      	ite	ne
 801850e:	23cc      	movne	r3, #204	; 0xcc
 8018510:	2388      	moveq	r3, #136	; 0x88
 8018512:	f363 0207 	bfi	r2, r3, #0, #8
 8018516:	f363 220f 	bfi	r2, r3, #8, #8
 801851a:	f363 4217 	bfi	r2, r3, #16, #8
 801851e:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 8018522:	f7f0 fdd7 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_border_color(&styles->btn, LV_STATE_DEFAULT, COLOR_BTN_BORDER);
 8018526:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
 8018528:	68ea      	ldr	r2, [r5, #12]
 801852a:	2139      	movs	r1, #57	; 0x39
 801852c:	3010      	adds	r0, #16
 801852e:	f7f0 fdd1 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_border_color(&styles->btn, LV_STATE_PRESSED, COLOR_BTN_BORDER_PR);
 8018532:	6820      	ldr	r0, [r4, #0]
 8018534:	68ea      	ldr	r2, [r5, #12]
 8018536:	f241 0139 	movw	r1, #4153	; 0x1039
 801853a:	3010      	adds	r0, #16
 801853c:	f7f0 fdca 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_border_color(&styles->btn, LV_STATE_DISABLED, COLOR_BTN_BORDER_INA);
 8018540:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8018542:	2200      	movs	r2, #0
 8018544:	6820      	ldr	r0, [r4, #0]
 8018546:	f013 0f02 	tst.w	r3, #2
 801854a:	f242 0139 	movw	r1, #8249	; 0x2039
 801854e:	f100 0010 	add.w	r0, r0, #16
 8018552:	bf14      	ite	ne
 8018554:	2388      	movne	r3, #136	; 0x88
 8018556:	2340      	moveq	r3, #64	; 0x40
 8018558:	f363 0207 	bfi	r2, r3, #0, #8
 801855c:	f363 220f 	bfi	r2, r3, #8, #8
 8018560:	f363 4217 	bfi	r2, r3, #16, #8
 8018564:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 8018568:	f7f0 fdb4 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_border_width(&styles->btn, LV_STATE_DEFAULT, BORDER_WIDTH);
 801856c:	6823      	ldr	r3, [r4, #0]
 801856e:	2000      	movs	r0, #0
 8018570:	f103 0710 	add.w	r7, r3, #16
 8018574:	f7fb f9b4 	bl	80138e0 <lv_disp_get_dpi>
 8018578:	2877      	cmp	r0, #119	; 0x77
 801857a:	f300 833f 	bgt.w	8018bfc <basic_init+0x101c>
 801857e:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
 8018580:	4638      	mov	r0, r7
 8018582:	2130      	movs	r1, #48	; 0x30
 8018584:	f7f0 fcd8 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_border_opa(&styles->btn, LV_STATE_CHECKED, LV_OPA_TRANSP);
 8018588:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_OPA, border_opa, lv_opa_t, _opa, scalar)
 801858a:	2200      	movs	r2, #0
 801858c:	f44f 719e 	mov.w	r1, #316	; 0x13c
 8018590:	3010      	adds	r0, #16
 8018592:	f7f0 fe69 	bl	8009268 <_lv_style_set_opa>
    lv_style_set_text_color(&styles->btn, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
 8018596:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8018598:	6820      	ldr	r0, [r4, #0]
 801859a:	079a      	lsls	r2, r3, #30
 801859c:	f100 0010 	add.w	r0, r0, #16
 80185a0:	f100 81ea 	bmi.w	8018978 <basic_init+0xd98>
 80185a4:	23ff      	movs	r3, #255	; 0xff
 80185a6:	461f      	mov	r7, r3
 80185a8:	469c      	mov	ip, r3
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
 80185aa:	2200      	movs	r2, #0
 80185ac:	f248 0189 	movw	r1, #32905	; 0x8089
 80185b0:	f36c 0207 	bfi	r2, ip, #0, #8
 80185b4:	f367 220f 	bfi	r2, r7, #8, #8
 80185b8:	f363 4217 	bfi	r2, r3, #16, #8
 80185bc:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 80185c0:	f7f0 fd88 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_text_color(&styles->btn, LV_STATE_PRESSED, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
 80185c4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80185c6:	6820      	ldr	r0, [r4, #0]
 80185c8:	079b      	lsls	r3, r3, #30
 80185ca:	f100 0010 	add.w	r0, r0, #16
 80185ce:	f100 81cc 	bmi.w	801896a <basic_init+0xd8a>
 80185d2:	23ff      	movs	r3, #255	; 0xff
 80185d4:	461f      	mov	r7, r3
 80185d6:	469c      	mov	ip, r3
 80185d8:	2200      	movs	r2, #0
 80185da:	f249 0189 	movw	r1, #37001	; 0x9089
 80185de:	f36c 0207 	bfi	r2, ip, #0, #8
 80185e2:	f367 220f 	bfi	r2, r7, #8, #8
 80185e6:	f363 4217 	bfi	r2, r3, #16, #8
 80185ea:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 80185ee:	f7f0 fd71 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_text_color(&styles->btn, LV_STATE_CHECKED,  lv_color_hex(0xffffff));
 80185f2:	6820      	ldr	r0, [r4, #0]
 80185f4:	f04f 32ff 	mov.w	r2, #4294967295
 80185f8:	f248 1189 	movw	r1, #33161	; 0x8189
 80185fc:	3010      	adds	r0, #16
 80185fe:	f7f0 fd69 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_text_color(&styles->btn, LV_STATE_CHECKED | LV_STATE_PRESSED, lv_color_hex(0xffffff));
 8018602:	6820      	ldr	r0, [r4, #0]
 8018604:	f04f 32ff 	mov.w	r2, #4294967295
 8018608:	f249 1189 	movw	r1, #37257	; 0x9189
 801860c:	3010      	adds	r0, #16
 801860e:	f7f0 fd61 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_text_color(&styles->btn, LV_STATE_DISABLED, IS_LIGHT ? lv_color_hex(0x888888) : lv_color_hex(0x888888));
 8018612:	6820      	ldr	r0, [r4, #0]
 8018614:	4ad7      	ldr	r2, [pc, #860]	; (8018974 <basic_init+0xd94>)
 8018616:	f24a 0189 	movw	r1, #41097	; 0xa089
 801861a:	3010      	adds	r0, #16
 801861c:	f7f0 fd5a 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_image_recolor(&styles->btn, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
 8018620:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8018622:	6820      	ldr	r0, [r4, #0]
 8018624:	079f      	lsls	r7, r3, #30
 8018626:	f100 0010 	add.w	r0, r0, #16
 801862a:	f100 8199 	bmi.w	8018960 <basic_init+0xd80>
 801862e:	23ff      	movs	r3, #255	; 0xff
 8018630:	461f      	mov	r7, r3
 8018632:	469c      	mov	ip, r3
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
 8018634:	2200      	movs	r2, #0
 8018636:	f248 01a9 	movw	r1, #32937	; 0x80a9
 801863a:	f36c 0207 	bfi	r2, ip, #0, #8
 801863e:	f367 220f 	bfi	r2, r7, #8, #8
 8018642:	f363 4217 	bfi	r2, r3, #16, #8
 8018646:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 801864a:	f7f0 fd43 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_image_recolor(&styles->btn, LV_STATE_PRESSED, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
 801864e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8018650:	6820      	ldr	r0, [r4, #0]
 8018652:	0799      	lsls	r1, r3, #30
 8018654:	f100 0010 	add.w	r0, r0, #16
 8018658:	f100 817d 	bmi.w	8018956 <basic_init+0xd76>
 801865c:	23ff      	movs	r3, #255	; 0xff
 801865e:	461f      	mov	r7, r3
 8018660:	469c      	mov	ip, r3
 8018662:	2200      	movs	r2, #0
 8018664:	f249 01a9 	movw	r1, #37033	; 0x90a9
 8018668:	f36c 0207 	bfi	r2, ip, #0, #8
 801866c:	f367 220f 	bfi	r2, r7, #8, #8
 8018670:	f363 4217 	bfi	r2, r3, #16, #8
 8018674:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 8018678:	f7f0 fd2c 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_image_recolor(&styles->btn, LV_STATE_PRESSED, lv_color_hex(0xffffff));
 801867c:	6820      	ldr	r0, [r4, #0]
 801867e:	f04f 32ff 	mov.w	r2, #4294967295
 8018682:	f249 01a9 	movw	r1, #37033	; 0x90a9
 8018686:	3010      	adds	r0, #16
 8018688:	f7f0 fd24 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_image_recolor(&styles->btn, LV_STATE_CHECKED | LV_STATE_PRESSED, lv_color_hex(0xffffff));
 801868c:	6820      	ldr	r0, [r4, #0]
 801868e:	f04f 32ff 	mov.w	r2, #4294967295
 8018692:	f249 11a9 	movw	r1, #37289	; 0x91a9
 8018696:	3010      	adds	r0, #16
 8018698:	f7f0 fd1c 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_image_recolor(&styles->btn, LV_STATE_DISABLED, IS_LIGHT ? lv_color_hex(0x888888) : lv_color_hex(0x888888));
 801869c:	6820      	ldr	r0, [r4, #0]
 801869e:	4ab5      	ldr	r2, [pc, #724]	; (8018974 <basic_init+0xd94>)
 80186a0:	f24a 01a9 	movw	r1, #41129	; 0xa0a9
 80186a4:	3010      	adds	r0, #16
 80186a6:	f7f0 fd15 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_value_color(&styles->btn, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
 80186aa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80186ac:	6820      	ldr	r0, [r4, #0]
 80186ae:	079a      	lsls	r2, r3, #30
 80186b0:	f100 0010 	add.w	r0, r0, #16
 80186b4:	f100 814a 	bmi.w	801894c <basic_init+0xd6c>
 80186b8:	23ff      	movs	r3, #255	; 0xff
 80186ba:	461f      	mov	r7, r3
 80186bc:	469c      	mov	ip, r3
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
 80186be:	2200      	movs	r2, #0
 80186c0:	2179      	movs	r1, #121	; 0x79
 80186c2:	f36c 0207 	bfi	r2, ip, #0, #8
 80186c6:	f367 220f 	bfi	r2, r7, #8, #8
 80186ca:	f363 4217 	bfi	r2, r3, #16, #8
 80186ce:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 80186d2:	f7f0 fcff 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_value_color(&styles->btn, LV_STATE_PRESSED, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
 80186d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80186d8:	6820      	ldr	r0, [r4, #0]
 80186da:	079b      	lsls	r3, r3, #30
 80186dc:	f100 0010 	add.w	r0, r0, #16
 80186e0:	f100 812f 	bmi.w	8018942 <basic_init+0xd62>
 80186e4:	23ff      	movs	r3, #255	; 0xff
 80186e6:	461f      	mov	r7, r3
 80186e8:	469c      	mov	ip, r3
 80186ea:	2200      	movs	r2, #0
 80186ec:	f241 0179 	movw	r1, #4217	; 0x1079
 80186f0:	f36c 0207 	bfi	r2, ip, #0, #8
 80186f4:	f367 220f 	bfi	r2, r7, #8, #8
 80186f8:	f363 4217 	bfi	r2, r3, #16, #8
 80186fc:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 8018700:	f7f0 fce8 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_value_color(&styles->btn, LV_STATE_CHECKED,  lv_color_hex(0xffffff));
 8018704:	6820      	ldr	r0, [r4, #0]
 8018706:	f04f 32ff 	mov.w	r2, #4294967295
 801870a:	f240 1179 	movw	r1, #377	; 0x179
 801870e:	3010      	adds	r0, #16
 8018710:	f7f0 fce0 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_value_color(&styles->btn, LV_STATE_CHECKED | LV_STATE_PRESSED, lv_color_hex(0xffffff));
 8018714:	6820      	ldr	r0, [r4, #0]
 8018716:	f04f 32ff 	mov.w	r2, #4294967295
 801871a:	f241 1179 	movw	r1, #4473	; 0x1179
 801871e:	3010      	adds	r0, #16
 8018720:	f7f0 fcd8 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_value_color(&styles->btn, LV_STATE_DISABLED, IS_LIGHT ? lv_color_hex(0x888888) : lv_color_hex(0x888888));
 8018724:	6820      	ldr	r0, [r4, #0]
 8018726:	4a93      	ldr	r2, [pc, #588]	; (8018974 <basic_init+0xd94>)
 8018728:	f242 0179 	movw	r1, #8313	; 0x2079
 801872c:	3010      	adds	r0, #16
 801872e:	f7f0 fcd1 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_pad_left(&styles->btn, LV_STATE_DEFAULT, LV_DPX(40));
 8018732:	2000      	movs	r0, #0
 8018734:	6827      	ldr	r7, [r4, #0]
 8018736:	f7fb f8d3 	bl	80138e0 <lv_disp_get_dpi>
 801873a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801873e:	3710      	adds	r7, #16
 8018740:	00c0      	lsls	r0, r0, #3
 8018742:	28ef      	cmp	r0, #239	; 0xef
 8018744:	f300 81d9 	bgt.w	8018afa <basic_init+0xf1a>
 8018748:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
 801874a:	4638      	mov	r0, r7
 801874c:	2112      	movs	r1, #18
 801874e:	f7f0 fbf3 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_pad_right(&styles->btn, LV_STATE_DEFAULT, LV_DPX(40));
 8018752:	2000      	movs	r0, #0
 8018754:	6827      	ldr	r7, [r4, #0]
 8018756:	f7fb f8c3 	bl	80138e0 <lv_disp_get_dpi>
 801875a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801875e:	3710      	adds	r7, #16
 8018760:	00c0      	lsls	r0, r0, #3
 8018762:	28ef      	cmp	r0, #239	; 0xef
 8018764:	f300 81ba 	bgt.w	8018adc <basic_init+0xefc>
 8018768:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
 801876a:	4638      	mov	r0, r7
 801876c:	2113      	movs	r1, #19
 801876e:	f7f0 fbe3 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_pad_top(&styles->btn, LV_STATE_DEFAULT, LV_DPX(15));
 8018772:	2000      	movs	r0, #0
 8018774:	6827      	ldr	r7, [r4, #0]
 8018776:	f7fb f8b3 	bl	80138e0 <lv_disp_get_dpi>
 801877a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 801877e:	3710      	adds	r7, #16
 8018780:	28ef      	cmp	r0, #239	; 0xef
 8018782:	f300 81ef 	bgt.w	8018b64 <basic_init+0xf84>
 8018786:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
 8018788:	4638      	mov	r0, r7
 801878a:	2110      	movs	r1, #16
 801878c:	f7f0 fbd4 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_pad_bottom(&styles->btn, LV_STATE_DEFAULT, LV_DPX(15));
 8018790:	2000      	movs	r0, #0
 8018792:	6827      	ldr	r7, [r4, #0]
 8018794:	f7fb f8a4 	bl	80138e0 <lv_disp_get_dpi>
 8018798:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 801879c:	3710      	adds	r7, #16
 801879e:	28ef      	cmp	r0, #239	; 0xef
 80187a0:	f300 81d1 	bgt.w	8018b46 <basic_init+0xf66>
 80187a4:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
 80187a6:	4638      	mov	r0, r7
 80187a8:	2111      	movs	r1, #17
 80187aa:	f7f0 fbc5 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_pad_inner(&styles->btn, LV_STATE_DEFAULT, LV_DPX(20));
 80187ae:	2000      	movs	r0, #0
 80187b0:	6827      	ldr	r7, [r4, #0]
 80187b2:	f7fb f895 	bl	80138e0 <lv_disp_get_dpi>
 80187b6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80187ba:	3710      	adds	r7, #16
 80187bc:	0080      	lsls	r0, r0, #2
 80187be:	28ef      	cmp	r0, #239	; 0xef
 80187c0:	f300 81b2 	bgt.w	8018b28 <basic_init+0xf48>
 80187c4:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
 80187c6:	4638      	mov	r0, r7
 80187c8:	2114      	movs	r1, #20
 80187ca:	f7f0 fbb5 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_outline_width(&styles->btn, LV_STATE_DEFAULT, OUTLINE_WIDTH);
 80187ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80187d0:	6822      	ldr	r2, [r4, #0]
 80187d2:	f013 0720 	ands.w	r7, r3, #32
 80187d6:	f102 0810 	add.w	r8, r2, #16
 80187da:	f000 819d 	beq.w	8018b18 <basic_init+0xf38>
 80187de:	2200      	movs	r2, #0
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int, scalar)
 80187e0:	4640      	mov	r0, r8
 80187e2:	2140      	movs	r1, #64	; 0x40
 80187e4:	f7f0 fba8 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_outline_opa(&styles->btn, LV_STATE_DEFAULT, LV_OPA_0);
 80187e8:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa, scalar)
 80187ea:	2200      	movs	r2, #0
 80187ec:	214c      	movs	r1, #76	; 0x4c
 80187ee:	3010      	adds	r0, #16
 80187f0:	f7f0 fd3a 	bl	8009268 <_lv_style_set_opa>
    lv_style_set_outline_opa(&styles->btn, LV_STATE_FOCUSED, LV_OPA_50);
 80187f4:	6820      	ldr	r0, [r4, #0]
 80187f6:	227f      	movs	r2, #127	; 0x7f
 80187f8:	f44f 7113 	mov.w	r1, #588	; 0x24c
 80187fc:	3010      	adds	r0, #16
 80187fe:	f7f0 fd33 	bl	8009268 <_lv_style_set_opa>
    lv_style_set_outline_color(&styles->btn, LV_STATE_DEFAULT, theme.color_primary);
 8018802:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_COLOR, outline_color, lv_color_t, _color, nonscalar)
 8018804:	68ea      	ldr	r2, [r5, #12]
 8018806:	2149      	movs	r1, #73	; 0x49
 8018808:	3010      	adds	r0, #16
 801880a:	f7f0 fc63 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_outline_color(&styles->btn, LV_STATE_EDITED, theme.color_secondary);
 801880e:	6820      	ldr	r0, [r4, #0]
 8018810:	692a      	ldr	r2, [r5, #16]
 8018812:	f240 4149 	movw	r1, #1097	; 0x449
 8018816:	3010      	adds	r0, #16
 8018818:	f7f0 fc5c 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_transition_time(&styles->btn, LV_STATE_DEFAULT, TRANSITION_TIME);
 801881c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int, scalar)
 801881e:	2200      	movs	r2, #0
 8018820:	21b0      	movs	r1, #176	; 0xb0
 8018822:	3010      	adds	r0, #16
 8018824:	f7f0 fb88 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_transition_prop_4(&styles->btn, LV_STATE_DEFAULT, LV_STYLE_BORDER_OPA);
 8018828:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_4, transition_prop_4, lv_style_int_t, _int, scalar)
 801882a:	223c      	movs	r2, #60	; 0x3c
 801882c:	21b5      	movs	r1, #181	; 0xb5
 801882e:	3010      	adds	r0, #16
 8018830:	f7f0 fb82 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_transition_prop_5(&styles->btn, LV_STATE_DEFAULT, LV_STYLE_BG_COLOR);
 8018834:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_5, transition_prop_5, lv_style_int_t, _int, scalar)
 8018836:	2229      	movs	r2, #41	; 0x29
 8018838:	21b6      	movs	r1, #182	; 0xb6
 801883a:	3010      	adds	r0, #16
 801883c:	f7f0 fb7c 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_transition_prop_6(&styles->btn, LV_STATE_DEFAULT, LV_STYLE_OUTLINE_OPA);
 8018840:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int, scalar)
 8018842:	224c      	movs	r2, #76	; 0x4c
 8018844:	21b7      	movs	r1, #183	; 0xb7
 8018846:	3010      	adds	r0, #16
 8018848:	f7f0 fb76 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_transition_delay(&styles->btn, LV_STATE_DEFAULT, TRANSITION_TIME);
 801884c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_DELAY, transition_delay, lv_style_int_t, _int, scalar)
 801884e:	2200      	movs	r2, #0
 8018850:	21b1      	movs	r1, #177	; 0xb1
 8018852:	3010      	adds	r0, #16
 8018854:	f7f0 fb70 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_transition_delay(&styles->btn, LV_STATE_PRESSED, 0);
 8018858:	6820      	ldr	r0, [r4, #0]
 801885a:	2200      	movs	r2, #0
 801885c:	f241 01b1 	movw	r1, #4273	; 0x10b1
 8018860:	3010      	adds	r0, #16
 8018862:	f7f0 fb69 	bl	8008f38 <_lv_style_set_int>
    style_init_reset(&styles->pad_inner);
 8018866:	6820      	ldr	r0, [r4, #0]
    if(inited) lv_style_reset(style);
 8018868:	7833      	ldrb	r3, [r6, #0]
    style_init_reset(&styles->pad_inner);
 801886a:	3014      	adds	r0, #20
    if(inited) lv_style_reset(style);
 801886c:	2b00      	cmp	r3, #0
 801886e:	d065      	beq.n	801893c <basic_init+0xd5c>
 8018870:	f7f0 fb5a 	bl	8008f28 <lv_style_reset>
                           lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(20) : LV_DPX(40));
 8018874:	2000      	movs	r0, #0
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
 8018876:	6825      	ldr	r5, [r4, #0]
                           lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(20) : LV_DPX(40));
 8018878:	f7fb f840 	bl	80138fc <lv_disp_get_size_category>
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
 801887c:	2801      	cmp	r0, #1
 801887e:	f105 0514 	add.w	r5, r5, #20
                           lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(20) : LV_DPX(40));
 8018882:	f04f 0000 	mov.w	r0, #0
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
 8018886:	f240 811c 	bls.w	8018ac2 <basic_init+0xee2>
                           lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(20) : LV_DPX(40));
 801888a:	f7fb f829 	bl	80138e0 <lv_disp_get_dpi>
 801888e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8018892:	00c0      	lsls	r0, r0, #3
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
 8018894:	28ef      	cmp	r0, #239	; 0xef
 8018896:	f300 8236 	bgt.w	8018d06 <basic_init+0x1126>
 801889a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
 801889c:	4628      	mov	r0, r5
 801889e:	2114      	movs	r1, #20
 80188a0:	f7f0 fb4a 	bl	8008f38 <_lv_style_set_int>
    style_init_reset(&styles->pad_small);
 80188a4:	6820      	ldr	r0, [r4, #0]
    if(inited) lv_style_reset(style);
 80188a6:	7833      	ldrb	r3, [r6, #0]
    style_init_reset(&styles->pad_small);
 80188a8:	3018      	adds	r0, #24
    if(inited) lv_style_reset(style);
 80188aa:	b393      	cbz	r3, 8018912 <basic_init+0xd32>
 80188ac:	f7f0 fb3c 	bl	8008f28 <lv_style_reset>
    lv_style_int_t pad_small_value = lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(10) : LV_DPX(20);
 80188b0:	2000      	movs	r0, #0
 80188b2:	f7fb f823 	bl	80138fc <lv_disp_get_size_category>
 80188b6:	2801      	cmp	r0, #1
 80188b8:	f04f 0000 	mov.w	r0, #0
 80188bc:	d932      	bls.n	8018924 <basic_init+0xd44>
 80188be:	f7fb f80f 	bl	80138e0 <lv_disp_get_dpi>
 80188c2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80188c6:	0080      	lsls	r0, r0, #2
 80188c8:	28ef      	cmp	r0, #239	; 0xef
 80188ca:	f300 81bd 	bgt.w	8018c48 <basic_init+0x1068>
 80188ce:	2201      	movs	r2, #1
    lv_style_set_pad_left(&styles->pad_small, LV_STATE_DEFAULT,  pad_small_value);
 80188d0:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
 80188d2:	2112      	movs	r1, #18
 80188d4:	9201      	str	r2, [sp, #4]
 80188d6:	3018      	adds	r0, #24
 80188d8:	f7f0 fb2e 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_pad_right(&styles->pad_small, LV_STATE_DEFAULT, pad_small_value);
 80188dc:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
 80188de:	9a01      	ldr	r2, [sp, #4]
 80188e0:	2113      	movs	r1, #19
 80188e2:	3018      	adds	r0, #24
 80188e4:	f7f0 fb28 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_pad_top(&styles->pad_small, LV_STATE_DEFAULT,  pad_small_value);
 80188e8:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
 80188ea:	9a01      	ldr	r2, [sp, #4]
 80188ec:	2110      	movs	r1, #16
 80188ee:	3018      	adds	r0, #24
 80188f0:	f7f0 fb22 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_pad_bottom(&styles->pad_small, LV_STATE_DEFAULT, pad_small_value);
 80188f4:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
 80188f6:	9a01      	ldr	r2, [sp, #4]
 80188f8:	2111      	movs	r1, #17
 80188fa:	3018      	adds	r0, #24
 80188fc:	f7f0 fb1c 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_pad_inner(&styles->pad_small, LV_STATE_DEFAULT, pad_small_value);
 8018900:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
 8018902:	9a01      	ldr	r2, [sp, #4]
 8018904:	2114      	movs	r1, #20
 8018906:	3018      	adds	r0, #24
}
 8018908:	b002      	add	sp, #8
 801890a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801890e:	f7f0 bb13 	b.w	8008f38 <_lv_style_set_int>
    else lv_style_init(style);
 8018912:	f7ef fff3 	bl	80088fc <lv_style_init>
    lv_style_int_t pad_small_value = lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(10) : LV_DPX(20);
 8018916:	2000      	movs	r0, #0
 8018918:	f7fa fff0 	bl	80138fc <lv_disp_get_size_category>
 801891c:	2801      	cmp	r0, #1
 801891e:	f04f 0000 	mov.w	r0, #0
 8018922:	d8cc      	bhi.n	80188be <basic_init+0xcde>
 8018924:	f7fa ffdc 	bl	80138e0 <lv_disp_get_dpi>
 8018928:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801892c:	0040      	lsls	r0, r0, #1
 801892e:	28ef      	cmp	r0, #239	; 0xef
 8018930:	ddcd      	ble.n	80188ce <basic_init+0xcee>
 8018932:	2000      	movs	r0, #0
 8018934:	f7fa ffd4 	bl	80138e0 <lv_disp_get_dpi>
 8018938:	230a      	movs	r3, #10
 801893a:	e189      	b.n	8018c50 <basic_init+0x1070>
    else lv_style_init(style);
 801893c:	f7ef ffde 	bl	80088fc <lv_style_init>
 8018940:	e798      	b.n	8018874 <basic_init+0xc94>
 8018942:	2331      	movs	r3, #49	; 0x31
 8018944:	2740      	movs	r7, #64	; 0x40
 8018946:	f04f 0c4f 	mov.w	ip, #79	; 0x4f
 801894a:	e6ce      	b.n	80186ea <basic_init+0xb0a>
 801894c:	2331      	movs	r3, #49	; 0x31
 801894e:	2740      	movs	r7, #64	; 0x40
 8018950:	f04f 0c4f 	mov.w	ip, #79	; 0x4f
 8018954:	e6b3      	b.n	80186be <basic_init+0xade>
 8018956:	2331      	movs	r3, #49	; 0x31
 8018958:	2740      	movs	r7, #64	; 0x40
 801895a:	f04f 0c4f 	mov.w	ip, #79	; 0x4f
 801895e:	e680      	b.n	8018662 <basic_init+0xa82>
 8018960:	2331      	movs	r3, #49	; 0x31
 8018962:	2740      	movs	r7, #64	; 0x40
 8018964:	f04f 0c4f 	mov.w	ip, #79	; 0x4f
 8018968:	e664      	b.n	8018634 <basic_init+0xa54>
 801896a:	2331      	movs	r3, #49	; 0x31
 801896c:	2740      	movs	r7, #64	; 0x40
 801896e:	f04f 0c4f 	mov.w	ip, #79	; 0x4f
 8018972:	e631      	b.n	80185d8 <basic_init+0x9f8>
 8018974:	ff888888 	.word	0xff888888
 8018978:	2331      	movs	r3, #49	; 0x31
 801897a:	2740      	movs	r7, #64	; 0x40
 801897c:	f04f 0c4f 	mov.w	ip, #79	; 0x4f
 8018980:	e613      	b.n	80185aa <basic_init+0x9ca>
 8018982:	23ff      	movs	r3, #255	; 0xff
 8018984:	461f      	mov	r7, r3
 8018986:	469c      	mov	ip, r3
 8018988:	e5aa      	b.n	80184e0 <basic_init+0x900>
 801898a:	234c      	movs	r3, #76	; 0x4c
 801898c:	f643 5288 	movw	r2, #15752	; 0x3d88
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8018990:	7b6f      	ldrb	r7, [r5, #13]
 8018992:	f244 4e86 	movw	lr, #17542	; 0x4486
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8018996:	fb13 2c0c 	smlabb	ip, r3, ip, r2
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 801899a:	7b29      	ldrb	r1, [r5, #12]
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 801899c:	fb13 e707 	smlabb	r7, r3, r7, lr
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 80189a0:	f245 0269 	movw	r2, #20585	; 0x5069
 80189a4:	e55c      	b.n	8018460 <basic_init+0x880>
 80189a6:	23ff      	movs	r3, #255	; 0xff
 80189a8:	461f      	mov	r7, r3
 80189aa:	469c      	mov	ip, r3
 80189ac:	e53a      	b.n	8018424 <basic_init+0x844>
 80189ae:	f7ef ffa5 	bl	80088fc <lv_style_init>
 80189b2:	e51f      	b.n	80183f4 <basic_init+0x814>
 80189b4:	233b      	movs	r3, #59	; 0x3b
 80189b6:	273e      	movs	r7, #62	; 0x3e
 80189b8:	f04f 0c42 	mov.w	ip, #66	; 0x42
 80189bc:	e4d9      	b.n	8018372 <basic_init+0x792>
 80189be:	233b      	movs	r3, #59	; 0x3b
 80189c0:	273e      	movs	r7, #62	; 0x3e
 80189c2:	f04f 0c42 	mov.w	ip, #66	; 0x42
 80189c6:	e497      	b.n	80182f8 <basic_init+0x718>
 80189c8:	23cc      	movs	r3, #204	; 0xcc
 80189ca:	461f      	mov	r7, r3
 80189cc:	469c      	mov	ip, r3
 80189ce:	e425      	b.n	801821c <basic_init+0x63c>
 80189d0:	23ff      	movs	r3, #255	; 0xff
 80189d2:	461f      	mov	r7, r3
 80189d4:	469c      	mov	ip, r3
 80189d6:	f7ff bbf5 	b.w	80181c4 <basic_init+0x5e4>
 80189da:	23ee      	movs	r3, #238	; 0xee
 80189dc:	461f      	mov	r7, r3
 80189de:	469c      	mov	ip, r3
 80189e0:	f7ff bbc4 	b.w	801816c <basic_init+0x58c>
 80189e4:	f7ef ff8a 	bl	80088fc <lv_style_init>
 80189e8:	f7ff bbb5 	b.w	8018156 <basic_init+0x576>
 80189ec:	23df      	movs	r3, #223	; 0xdf
 80189ee:	27e7      	movs	r7, #231	; 0xe7
 80189f0:	f04f 0ced 	mov.w	ip, #237	; 0xed
 80189f4:	f7ff bb29 	b.w	801804a <basic_init+0x46a>
 80189f8:	f7ef ff80 	bl	80088fc <lv_style_init>
 80189fc:	f7ff bafc 	b.w	8017ff8 <basic_init+0x418>
 8018a00:	233b      	movs	r3, #59	; 0x3b
 8018a02:	273e      	movs	r7, #62	; 0x3e
 8018a04:	f04f 0c42 	mov.w	ip, #66	; 0x42
 8018a08:	f7ff ba2d 	b.w	8017e66 <basic_init+0x286>
 8018a0c:	233b      	movs	r3, #59	; 0x3b
 8018a0e:	273e      	movs	r7, #62	; 0x3e
 8018a10:	f04f 0c42 	mov.w	ip, #66	; 0x42
 8018a14:	f7ff ba10 	b.w	8017e38 <basic_init+0x258>
 8018a18:	233b      	movs	r3, #59	; 0x3b
 8018a1a:	273e      	movs	r7, #62	; 0x3e
 8018a1c:	f04f 0c42 	mov.w	ip, #66	; 0x42
 8018a20:	f7ff b9f4 	b.w	8017e0c <basic_init+0x22c>
 8018a24:	233b      	movs	r3, #59	; 0x3b
 8018a26:	273e      	movs	r7, #62	; 0x3e
 8018a28:	f04f 0c42 	mov.w	ip, #66	; 0x42
 8018a2c:	f7ff b9d1 	b.w	8017dd2 <basic_init+0x1f2>
 8018a30:	23ff      	movs	r3, #255	; 0xff
 8018a32:	461f      	mov	r7, r3
 8018a34:	469c      	mov	ip, r3
 8018a36:	f7ff b97c 	b.w	8017d32 <basic_init+0x152>
 8018a3a:	f7ef ff5f 	bl	80088fc <lv_style_init>
 8018a3e:	f7ff b95a 	b.w	8017cf6 <basic_init+0x116>
 8018a42:	f7ef ff5b 	bl	80088fc <lv_style_init>
 8018a46:	f7ff b8d7 	b.w	8017bf8 <basic_init+0x18>
    lv_style_set_pad_bottom(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
 8018a4a:	f7fa ff49 	bl	80138e0 <lv_disp_get_dpi>
 8018a4e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8018a52:	28ef      	cmp	r0, #239	; 0xef
 8018a54:	f77f aa96 	ble.w	8017f84 <basic_init+0x3a4>
 8018a58:	2000      	movs	r0, #0
 8018a5a:	f7fa ff41 	bl	80138e0 <lv_disp_get_dpi>
 8018a5e:	230f      	movs	r3, #15
 8018a60:	e135      	b.n	8018cce <basic_init+0x10ee>
    lv_style_set_pad_inner(&styles->bg, LV_STATE_DEFAULT, PAD_DEF);
 8018a62:	f7fa ff3d 	bl	80138e0 <lv_disp_get_dpi>
 8018a66:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8018a6a:	28ef      	cmp	r0, #239	; 0xef
 8018a6c:	f77f aaab 	ble.w	8017fc6 <basic_init+0x3e6>
 8018a70:	2000      	movs	r0, #0
 8018a72:	f7fa ff35 	bl	80138e0 <lv_disp_get_dpi>
 8018a76:	230f      	movs	r3, #15
 8018a78:	e139      	b.n	8018cee <basic_init+0x110e>
    lv_style_set_pad_top(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
 8018a7a:	f7fa ff31 	bl	80138e0 <lv_disp_get_dpi>
 8018a7e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8018a82:	28ef      	cmp	r0, #239	; 0xef
 8018a84:	f77f aa5d 	ble.w	8017f42 <basic_init+0x362>
 8018a88:	2000      	movs	r0, #0
 8018a8a:	f7fa ff29 	bl	80138e0 <lv_disp_get_dpi>
 8018a8e:	230f      	movs	r3, #15
 8018a90:	e10d      	b.n	8018cae <basic_init+0x10ce>
    lv_style_set_pad_right(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
 8018a92:	f7fa ff25 	bl	80138e0 <lv_disp_get_dpi>
 8018a96:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8018a9a:	28ef      	cmp	r0, #239	; 0xef
 8018a9c:	f77f aa30 	ble.w	8017f00 <basic_init+0x320>
 8018aa0:	2000      	movs	r0, #0
 8018aa2:	f7fa ff1d 	bl	80138e0 <lv_disp_get_dpi>
 8018aa6:	230f      	movs	r3, #15
 8018aa8:	e0f1      	b.n	8018c8e <basic_init+0x10ae>
    lv_style_set_pad_left(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
 8018aaa:	f7fa ff19 	bl	80138e0 <lv_disp_get_dpi>
 8018aae:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8018ab2:	28ef      	cmp	r0, #239	; 0xef
 8018ab4:	f77f a9fc 	ble.w	8017eb0 <basic_init+0x2d0>
 8018ab8:	2000      	movs	r0, #0
 8018aba:	f7fa ff11 	bl	80138e0 <lv_disp_get_dpi>
 8018abe:	230f      	movs	r3, #15
 8018ac0:	e0d5      	b.n	8018c6e <basic_init+0x108e>
                           lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(20) : LV_DPX(40));
 8018ac2:	f7fa ff0d 	bl	80138e0 <lv_disp_get_dpi>
 8018ac6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8018aca:	0080      	lsls	r0, r0, #2
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
 8018acc:	28ef      	cmp	r0, #239	; 0xef
 8018ace:	f77f aee4 	ble.w	801889a <basic_init+0xcba>
                           lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(20) : LV_DPX(40));
 8018ad2:	2000      	movs	r0, #0
 8018ad4:	f7fa ff04 	bl	80138e0 <lv_disp_get_dpi>
 8018ad8:	2314      	movs	r3, #20
 8018ada:	e118      	b.n	8018d0e <basic_init+0x112e>
    lv_style_set_pad_right(&styles->btn, LV_STATE_DEFAULT, LV_DPX(40));
 8018adc:	2000      	movs	r0, #0
 8018ade:	f7fa feff 	bl	80138e0 <lv_disp_get_dpi>
 8018ae2:	2328      	movs	r3, #40	; 0x28
 8018ae4:	2150      	movs	r1, #80	; 0x50
 8018ae6:	4a95      	ldr	r2, [pc, #596]	; (8018d3c <basic_init+0x115c>)
 8018ae8:	fb00 1003 	mla	r0, r0, r3, r1
 8018aec:	fb82 2300 	smull	r2, r3, r2, r0
 8018af0:	17c2      	asrs	r2, r0, #31
 8018af2:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 8018af6:	b212      	sxth	r2, r2
 8018af8:	e637      	b.n	801876a <basic_init+0xb8a>
    lv_style_set_pad_left(&styles->btn, LV_STATE_DEFAULT, LV_DPX(40));
 8018afa:	2000      	movs	r0, #0
 8018afc:	f7fa fef0 	bl	80138e0 <lv_disp_get_dpi>
 8018b00:	2328      	movs	r3, #40	; 0x28
 8018b02:	2150      	movs	r1, #80	; 0x50
 8018b04:	4a8d      	ldr	r2, [pc, #564]	; (8018d3c <basic_init+0x115c>)
 8018b06:	fb00 1003 	mla	r0, r0, r3, r1
 8018b0a:	fb82 2300 	smull	r2, r3, r2, r0
 8018b0e:	17c2      	asrs	r2, r0, #31
 8018b10:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 8018b14:	b212      	sxth	r2, r2
 8018b16:	e618      	b.n	801874a <basic_init+0xb6a>
    lv_style_set_outline_width(&styles->btn, LV_STATE_DEFAULT, OUTLINE_WIDTH);
 8018b18:	4638      	mov	r0, r7
 8018b1a:	f7fa fee1 	bl	80138e0 <lv_disp_get_dpi>
 8018b1e:	2877      	cmp	r0, #119	; 0x77
 8018b20:	f300 8100 	bgt.w	8018d24 <basic_init+0x1144>
 8018b24:	2201      	movs	r2, #1
 8018b26:	e65b      	b.n	80187e0 <basic_init+0xc00>
    lv_style_set_pad_inner(&styles->btn, LV_STATE_DEFAULT, LV_DPX(20));
 8018b28:	2000      	movs	r0, #0
 8018b2a:	f7fa fed9 	bl	80138e0 <lv_disp_get_dpi>
 8018b2e:	2314      	movs	r3, #20
 8018b30:	2150      	movs	r1, #80	; 0x50
 8018b32:	4a82      	ldr	r2, [pc, #520]	; (8018d3c <basic_init+0x115c>)
 8018b34:	fb00 1003 	mla	r0, r0, r3, r1
 8018b38:	fb82 2300 	smull	r2, r3, r2, r0
 8018b3c:	17c2      	asrs	r2, r0, #31
 8018b3e:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 8018b42:	b212      	sxth	r2, r2
 8018b44:	e63f      	b.n	80187c6 <basic_init+0xbe6>
    lv_style_set_pad_bottom(&styles->btn, LV_STATE_DEFAULT, LV_DPX(15));
 8018b46:	2000      	movs	r0, #0
 8018b48:	f7fa feca 	bl	80138e0 <lv_disp_get_dpi>
 8018b4c:	230f      	movs	r3, #15
 8018b4e:	2150      	movs	r1, #80	; 0x50
 8018b50:	4a7a      	ldr	r2, [pc, #488]	; (8018d3c <basic_init+0x115c>)
 8018b52:	fb00 1003 	mla	r0, r0, r3, r1
 8018b56:	fb82 2300 	smull	r2, r3, r2, r0
 8018b5a:	17c2      	asrs	r2, r0, #31
 8018b5c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 8018b60:	b212      	sxth	r2, r2
 8018b62:	e620      	b.n	80187a6 <basic_init+0xbc6>
    lv_style_set_pad_top(&styles->btn, LV_STATE_DEFAULT, LV_DPX(15));
 8018b64:	2000      	movs	r0, #0
 8018b66:	f7fa febb 	bl	80138e0 <lv_disp_get_dpi>
 8018b6a:	230f      	movs	r3, #15
 8018b6c:	2150      	movs	r1, #80	; 0x50
 8018b6e:	4a73      	ldr	r2, [pc, #460]	; (8018d3c <basic_init+0x115c>)
 8018b70:	fb00 1003 	mla	r0, r0, r3, r1
 8018b74:	fb82 2300 	smull	r2, r3, r2, r0
 8018b78:	17c2      	asrs	r2, r0, #31
 8018b7a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 8018b7e:	b212      	sxth	r2, r2
 8018b80:	e602      	b.n	8018788 <basic_init+0xba8>
    lv_style_set_pad_top(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
 8018b82:	2000      	movs	r0, #0
 8018b84:	f7fa feac 	bl	80138e0 <lv_disp_get_dpi>
 8018b88:	4b6c      	ldr	r3, [pc, #432]	; (8018d3c <basic_init+0x115c>)
 8018b8a:	3028      	adds	r0, #40	; 0x28
 8018b8c:	fb83 2300 	smull	r2, r3, r3, r0
 8018b90:	17c2      	asrs	r2, r0, #31
 8018b92:	ebc2 1263 	rsb	r2, r2, r3, asr #5
 8018b96:	b292      	uxth	r2, r2
 8018b98:	f7ff b9db 	b.w	8017f52 <basic_init+0x372>
    lv_style_set_border_width(&styles->bg, LV_STATE_DEFAULT, BORDER_WIDTH);
 8018b9c:	2000      	movs	r0, #0
 8018b9e:	f7fa fe9f 	bl	80138e0 <lv_disp_get_dpi>
 8018ba2:	4b66      	ldr	r3, [pc, #408]	; (8018d3c <basic_init+0x115c>)
 8018ba4:	3028      	adds	r0, #40	; 0x28
 8018ba6:	fb83 2300 	smull	r2, r3, r3, r0
 8018baa:	17c2      	asrs	r2, r0, #31
 8018bac:	ebc2 1263 	rsb	r2, r2, r3, asr #5
 8018bb0:	b212      	sxth	r2, r2
 8018bb2:	f7ff b8fa 	b.w	8017daa <basic_init+0x1ca>
    if((theme.flags & LV_THEME_MATERIAL_FLAG_NO_FOCUS) == 0)lv_style_set_border_color(&styles->bg, LV_STATE_FOCUSED,
 8018bb6:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
 8018bb8:	f240 2139 	movw	r1, #569	; 0x239
 8018bbc:	68ea      	ldr	r2, [r5, #12]
 8018bbe:	3004      	adds	r0, #4
 8018bc0:	f7f0 fa88 	bl	80090d4 <_lv_style_set_color>
 8018bc4:	f7ff b8e1 	b.w	8017d8a <basic_init+0x1aa>
    lv_style_set_radius(&styles->bg, LV_STATE_DEFAULT, LV_DPX(8));
 8018bc8:	2000      	movs	r0, #0
 8018bca:	f7fa fe89 	bl	80138e0 <lv_disp_get_dpi>
 8018bce:	4b5b      	ldr	r3, [pc, #364]	; (8018d3c <basic_init+0x115c>)
 8018bd0:	300a      	adds	r0, #10
 8018bd2:	fb83 2300 	smull	r2, r3, r3, r0
 8018bd6:	17c2      	asrs	r2, r0, #31
 8018bd8:	ebc2 02e3 	rsb	r2, r2, r3, asr #3
 8018bdc:	b212      	sxth	r2, r2
 8018bde:	f7ff b893 	b.w	8017d08 <basic_init+0x128>
    lv_style_set_pad_left(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
 8018be2:	2000      	movs	r0, #0
 8018be4:	f7fa fe7c 	bl	80138e0 <lv_disp_get_dpi>
 8018be8:	4b54      	ldr	r3, [pc, #336]	; (8018d3c <basic_init+0x115c>)
 8018bea:	3028      	adds	r0, #40	; 0x28
 8018bec:	fb83 2300 	smull	r2, r3, r3, r0
 8018bf0:	17c2      	asrs	r2, r0, #31
 8018bf2:	ebc2 1263 	rsb	r2, r2, r3, asr #5
 8018bf6:	b292      	uxth	r2, r2
 8018bf8:	f7ff b962 	b.w	8017ec0 <basic_init+0x2e0>
    lv_style_set_border_width(&styles->btn, LV_STATE_DEFAULT, BORDER_WIDTH);
 8018bfc:	2000      	movs	r0, #0
 8018bfe:	f7fa fe6f 	bl	80138e0 <lv_disp_get_dpi>
 8018c02:	4b4e      	ldr	r3, [pc, #312]	; (8018d3c <basic_init+0x115c>)
 8018c04:	3028      	adds	r0, #40	; 0x28
 8018c06:	fb83 2300 	smull	r2, r3, r3, r0
 8018c0a:	17c2      	asrs	r2, r0, #31
 8018c0c:	ebc2 1263 	rsb	r2, r2, r3, asr #5
 8018c10:	b212      	sxth	r2, r2
 8018c12:	e4b5      	b.n	8018580 <basic_init+0x9a0>
    lv_style_set_pad_bottom(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
 8018c14:	2000      	movs	r0, #0
 8018c16:	f7fa fe63 	bl	80138e0 <lv_disp_get_dpi>
 8018c1a:	4b48      	ldr	r3, [pc, #288]	; (8018d3c <basic_init+0x115c>)
 8018c1c:	3028      	adds	r0, #40	; 0x28
 8018c1e:	fb83 2300 	smull	r2, r3, r3, r0
 8018c22:	17c2      	asrs	r2, r0, #31
 8018c24:	ebc2 1263 	rsb	r2, r2, r3, asr #5
 8018c28:	b292      	uxth	r2, r2
 8018c2a:	f7ff b9b3 	b.w	8017f94 <basic_init+0x3b4>
    lv_style_set_pad_right(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
 8018c2e:	2000      	movs	r0, #0
 8018c30:	f7fa fe56 	bl	80138e0 <lv_disp_get_dpi>
 8018c34:	4b41      	ldr	r3, [pc, #260]	; (8018d3c <basic_init+0x115c>)
 8018c36:	3028      	adds	r0, #40	; 0x28
 8018c38:	fb83 2300 	smull	r2, r3, r3, r0
 8018c3c:	17c2      	asrs	r2, r0, #31
 8018c3e:	ebc2 1263 	rsb	r2, r2, r3, asr #5
 8018c42:	b292      	uxth	r2, r2
 8018c44:	f7ff b964 	b.w	8017f10 <basic_init+0x330>
    lv_style_int_t pad_small_value = lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(10) : LV_DPX(20);
 8018c48:	2000      	movs	r0, #0
 8018c4a:	f7fa fe49 	bl	80138e0 <lv_disp_get_dpi>
 8018c4e:	2314      	movs	r3, #20
 8018c50:	2150      	movs	r1, #80	; 0x50
 8018c52:	4a3a      	ldr	r2, [pc, #232]	; (8018d3c <basic_init+0x115c>)
 8018c54:	fb00 1003 	mla	r0, r0, r3, r1
 8018c58:	fb82 2300 	smull	r2, r3, r2, r0
 8018c5c:	17c2      	asrs	r2, r0, #31
 8018c5e:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 8018c62:	b212      	sxth	r2, r2
 8018c64:	e634      	b.n	80188d0 <basic_init+0xcf0>
    lv_style_set_pad_left(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
 8018c66:	2000      	movs	r0, #0
 8018c68:	f7fa fe3a 	bl	80138e0 <lv_disp_get_dpi>
 8018c6c:	231e      	movs	r3, #30
 8018c6e:	2250      	movs	r2, #80	; 0x50
 8018c70:	4f32      	ldr	r7, [pc, #200]	; (8018d3c <basic_init+0x115c>)
 8018c72:	fb00 2003 	mla	r0, r0, r3, r2
 8018c76:	fb87 3200 	smull	r3, r2, r7, r0
 8018c7a:	17c7      	asrs	r7, r0, #31
 8018c7c:	ebc7 17a2 	rsb	r7, r7, r2, asr #6
 8018c80:	b2bf      	uxth	r7, r7
 8018c82:	f7ff b916 	b.w	8017eb2 <basic_init+0x2d2>
    lv_style_set_pad_right(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
 8018c86:	2000      	movs	r0, #0
 8018c88:	f7fa fe2a 	bl	80138e0 <lv_disp_get_dpi>
 8018c8c:	231e      	movs	r3, #30
 8018c8e:	2250      	movs	r2, #80	; 0x50
 8018c90:	4f2a      	ldr	r7, [pc, #168]	; (8018d3c <basic_init+0x115c>)
 8018c92:	fb00 2003 	mla	r0, r0, r3, r2
 8018c96:	fb87 3200 	smull	r3, r2, r7, r0
 8018c9a:	17c7      	asrs	r7, r0, #31
 8018c9c:	ebc7 17a2 	rsb	r7, r7, r2, asr #6
 8018ca0:	b2bf      	uxth	r7, r7
 8018ca2:	f7ff b92e 	b.w	8017f02 <basic_init+0x322>
    lv_style_set_pad_top(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
 8018ca6:	2000      	movs	r0, #0
 8018ca8:	f7fa fe1a 	bl	80138e0 <lv_disp_get_dpi>
 8018cac:	231e      	movs	r3, #30
 8018cae:	2250      	movs	r2, #80	; 0x50
 8018cb0:	4f22      	ldr	r7, [pc, #136]	; (8018d3c <basic_init+0x115c>)
 8018cb2:	fb00 2003 	mla	r0, r0, r3, r2
 8018cb6:	fb87 3200 	smull	r3, r2, r7, r0
 8018cba:	17c7      	asrs	r7, r0, #31
 8018cbc:	ebc7 17a2 	rsb	r7, r7, r2, asr #6
 8018cc0:	b2bf      	uxth	r7, r7
 8018cc2:	f7ff b93f 	b.w	8017f44 <basic_init+0x364>
    lv_style_set_pad_bottom(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
 8018cc6:	2000      	movs	r0, #0
 8018cc8:	f7fa fe0a 	bl	80138e0 <lv_disp_get_dpi>
 8018ccc:	231e      	movs	r3, #30
 8018cce:	2250      	movs	r2, #80	; 0x50
 8018cd0:	4f1a      	ldr	r7, [pc, #104]	; (8018d3c <basic_init+0x115c>)
 8018cd2:	fb00 2003 	mla	r0, r0, r3, r2
 8018cd6:	fb87 3200 	smull	r3, r2, r7, r0
 8018cda:	17c7      	asrs	r7, r0, #31
 8018cdc:	ebc7 17a2 	rsb	r7, r7, r2, asr #6
 8018ce0:	b2bf      	uxth	r7, r7
 8018ce2:	f7ff b950 	b.w	8017f86 <basic_init+0x3a6>
    lv_style_set_pad_inner(&styles->bg, LV_STATE_DEFAULT, PAD_DEF);
 8018ce6:	2000      	movs	r0, #0
 8018ce8:	f7fa fdfa 	bl	80138e0 <lv_disp_get_dpi>
 8018cec:	231e      	movs	r3, #30
 8018cee:	2150      	movs	r1, #80	; 0x50
 8018cf0:	4a12      	ldr	r2, [pc, #72]	; (8018d3c <basic_init+0x115c>)
 8018cf2:	fb00 1003 	mla	r0, r0, r3, r1
 8018cf6:	fb82 2300 	smull	r2, r3, r2, r0
 8018cfa:	17c2      	asrs	r2, r0, #31
 8018cfc:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 8018d00:	b212      	sxth	r2, r2
 8018d02:	f7ff b961 	b.w	8017fc8 <basic_init+0x3e8>
                           lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(20) : LV_DPX(40));
 8018d06:	2000      	movs	r0, #0
 8018d08:	f7fa fdea 	bl	80138e0 <lv_disp_get_dpi>
 8018d0c:	2328      	movs	r3, #40	; 0x28
 8018d0e:	2150      	movs	r1, #80	; 0x50
 8018d10:	4a0a      	ldr	r2, [pc, #40]	; (8018d3c <basic_init+0x115c>)
 8018d12:	fb00 1003 	mla	r0, r0, r3, r1
 8018d16:	fb82 2300 	smull	r2, r3, r2, r0
 8018d1a:	17c2      	asrs	r2, r0, #31
 8018d1c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
 8018d20:	b212      	sxth	r2, r2
 8018d22:	e5bb      	b.n	801889c <basic_init+0xcbc>
    lv_style_set_outline_width(&styles->btn, LV_STATE_DEFAULT, OUTLINE_WIDTH);
 8018d24:	4638      	mov	r0, r7
 8018d26:	f7fa fddb 	bl	80138e0 <lv_disp_get_dpi>
 8018d2a:	4b04      	ldr	r3, [pc, #16]	; (8018d3c <basic_init+0x115c>)
 8018d2c:	3028      	adds	r0, #40	; 0x28
 8018d2e:	fb83 2300 	smull	r2, r3, r3, r0
 8018d32:	17c2      	asrs	r2, r0, #31
 8018d34:	ebc2 1263 	rsb	r2, r2, r3, asr #5
 8018d38:	b212      	sxth	r2, r2
 8018d3a:	e551      	b.n	80187e0 <basic_init+0xc00>
 8018d3c:	66666667 	.word	0x66666667

08018d40 <lv_theme_material_init>:
{
 8018d40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if(!inited) {
 8018d44:	f8df 9384 	ldr.w	r9, [pc, #900]	; 80190cc <lv_theme_material_init+0x38c>
{
 8018d48:	4682      	mov	sl, r0
 8018d4a:	460f      	mov	r7, r1
 8018d4c:	4615      	mov	r5, r2
    if(!inited) {
 8018d4e:	f899 4000 	ldrb.w	r4, [r9]
{
 8018d52:	461e      	mov	r6, r3
    if(!inited) {
 8018d54:	2c00      	cmp	r4, #0
 8018d56:	f002 806c 	beq.w	801ae32 <lv_theme_material_init+0x20f2>
 8018d5a:	4cda      	ldr	r4, [pc, #872]	; (80190c4 <lv_theme_material_init+0x384>)
    theme.color_primary = color_primary;
 8018d5c:	f8df 8370 	ldr.w	r8, [pc, #880]	; 80190d0 <lv_theme_material_init+0x390>
    theme.font_normal = font_normal;
 8018d60:	9b08      	ldr	r3, [sp, #32]
    theme.font_small = font_small;
 8018d62:	f8c8 6014 	str.w	r6, [r8, #20]
    theme.font_normal = font_normal;
 8018d66:	f8c8 3018 	str.w	r3, [r8, #24]
    theme.font_subtitle = font_subtitle;
 8018d6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018d6c:	f8c8 301c 	str.w	r3, [r8, #28]
    theme.font_title = font_title;
 8018d70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    theme.color_secondary = color_secondary;
 8018d72:	e9c8 a703 	strd	sl, r7, [r8, #12]
    theme.flags = flags;
 8018d76:	e9c8 3508 	strd	r3, r5, [r8, #32]
    basic_init();
 8018d7a:	f7fe ff31 	bl	8017be0 <basic_init>
    style_init_reset(&styles->bar_bg);
 8018d7e:	6820      	ldr	r0, [r4, #0]
    if(inited) lv_style_reset(style);
 8018d80:	f899 3000 	ldrb.w	r3, [r9]
    style_init_reset(&styles->bar_bg);
 8018d84:	3028      	adds	r0, #40	; 0x28
    if(inited) lv_style_reset(style);
 8018d86:	2b00      	cmp	r3, #0
 8018d88:	f001 83a4 	beq.w	801a4d4 <lv_theme_material_init+0x1794>
 8018d8c:	f7f0 f8cc 	bl	8008f28 <lv_style_reset>
    lv_style_set_radius(&styles->bar_bg, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
 8018d90:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
 8018d92:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8018d96:	2101      	movs	r1, #1
 8018d98:	3028      	adds	r0, #40	; 0x28
 8018d9a:	f7f0 f8cd 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_bg_opa(&styles->bar_bg, LV_STATE_DEFAULT, LV_OPA_COVER);
 8018d9e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
 8018da0:	22ff      	movs	r2, #255	; 0xff
 8018da2:	212c      	movs	r1, #44	; 0x2c
 8018da4:	3028      	adds	r0, #40	; 0x28
 8018da6:	f7f0 fa5f 	bl	8009268 <_lv_style_set_opa>
    lv_style_set_bg_color(&styles->bar_bg, LV_STATE_DEFAULT, COLOR_BG_SEC);
 8018daa:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 8018dae:	2200      	movs	r2, #0
 8018db0:	6820      	ldr	r0, [r4, #0]
 8018db2:	f003 0302 	and.w	r3, r3, #2
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
 8018db6:	2129      	movs	r1, #41	; 0x29
 8018db8:	3028      	adds	r0, #40	; 0x28
 8018dba:	4293      	cmp	r3, r2
 8018dbc:	bf15      	itete	ne
 8018dbe:	23d9      	movne	r3, #217	; 0xd9
 8018dc0:	234d      	moveq	r3, #77	; 0x4d
 8018dc2:	25d7      	movne	r5, #215	; 0xd7
 8018dc4:	2549      	moveq	r5, #73	; 0x49
 8018dc6:	f363 0207 	bfi	r2, r3, #0, #8
 8018dca:	bf14      	ite	ne
 8018dcc:	23d4      	movne	r3, #212	; 0xd4
 8018dce:	2345      	moveq	r3, #69	; 0x45
 8018dd0:	f365 220f 	bfi	r2, r5, #8, #8
 8018dd4:	f363 4217 	bfi	r2, r3, #16, #8
 8018dd8:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 8018ddc:	f7f0 f97a 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_value_color(&styles->bar_bg, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : LV_COLOR_WHITE);
 8018de0:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 8018de4:	6820      	ldr	r0, [r4, #0]
 8018de6:	079a      	lsls	r2, r3, #30
 8018de8:	f100 0028 	add.w	r0, r0, #40	; 0x28
 8018dec:	f101 836d 	bmi.w	801a4ca <lv_theme_material_init+0x178a>
 8018df0:	23ff      	movs	r3, #255	; 0xff
 8018df2:	461d      	mov	r5, r3
 8018df4:	461e      	mov	r6, r3
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
 8018df6:	2200      	movs	r2, #0
 8018df8:	2179      	movs	r1, #121	; 0x79
 8018dfa:	f366 0207 	bfi	r2, r6, #0, #8
 8018dfe:	f365 220f 	bfi	r2, r5, #8, #8
 8018e02:	f363 4217 	bfi	r2, r3, #16, #8
 8018e06:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 8018e0a:	f7f0 f963 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_outline_color(&styles->bar_bg, LV_STATE_DEFAULT, theme.color_primary);
 8018e0e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_COLOR, outline_color, lv_color_t, _color, nonscalar)
 8018e10:	f8d8 200c 	ldr.w	r2, [r8, #12]
 8018e14:	2149      	movs	r1, #73	; 0x49
 8018e16:	3028      	adds	r0, #40	; 0x28
 8018e18:	f7f0 f95c 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_outline_color(&styles->bar_bg, LV_STATE_EDITED, theme.color_secondary);
 8018e1c:	6820      	ldr	r0, [r4, #0]
 8018e1e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8018e22:	f240 4149 	movw	r1, #1097	; 0x449
 8018e26:	3028      	adds	r0, #40	; 0x28
 8018e28:	f7f0 f954 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_outline_opa(&styles->bar_bg, LV_STATE_DEFAULT, LV_OPA_TRANSP);
 8018e2c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa, scalar)
 8018e2e:	2200      	movs	r2, #0
 8018e30:	214c      	movs	r1, #76	; 0x4c
 8018e32:	3028      	adds	r0, #40	; 0x28
 8018e34:	f7f0 fa18 	bl	8009268 <_lv_style_set_opa>
    lv_style_set_outline_opa(&styles->bar_bg, LV_STATE_FOCUSED, LV_OPA_50);
 8018e38:	6820      	ldr	r0, [r4, #0]
 8018e3a:	227f      	movs	r2, #127	; 0x7f
 8018e3c:	f44f 7113 	mov.w	r1, #588	; 0x24c
 8018e40:	3028      	adds	r0, #40	; 0x28
 8018e42:	f7f0 fa11 	bl	8009268 <_lv_style_set_opa>
    lv_style_set_outline_width(&styles->bar_bg, LV_STATE_DEFAULT, OUTLINE_WIDTH);
 8018e46:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 8018e4a:	6826      	ldr	r6, [r4, #0]
 8018e4c:	f013 0520 	ands.w	r5, r3, #32
 8018e50:	f106 0628 	add.w	r6, r6, #40	; 0x28
 8018e54:	f001 87e4 	beq.w	801ae20 <lv_theme_material_init+0x20e0>
 8018e58:	2200      	movs	r2, #0
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int, scalar)
 8018e5a:	4630      	mov	r0, r6
 8018e5c:	2140      	movs	r1, #64	; 0x40
 8018e5e:	f7f0 f86b 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_transition_time(&styles->bar_bg, LV_STATE_DEFAULT, TRANSITION_TIME);
 8018e62:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int, scalar)
 8018e64:	2200      	movs	r2, #0
 8018e66:	21b0      	movs	r1, #176	; 0xb0
 8018e68:	3028      	adds	r0, #40	; 0x28
 8018e6a:	f7f0 f865 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_transition_prop_6(&styles->bar_bg, LV_STATE_DEFAULT, LV_STYLE_OUTLINE_OPA);
 8018e6e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int, scalar)
 8018e70:	224c      	movs	r2, #76	; 0x4c
 8018e72:	21b7      	movs	r1, #183	; 0xb7
 8018e74:	3028      	adds	r0, #40	; 0x28
 8018e76:	f7f0 f85f 	bl	8008f38 <_lv_style_set_int>
    style_init_reset(&styles->bar_indic);
 8018e7a:	6820      	ldr	r0, [r4, #0]
    if(inited) lv_style_reset(style);
 8018e7c:	f899 3000 	ldrb.w	r3, [r9]
    style_init_reset(&styles->bar_indic);
 8018e80:	302c      	adds	r0, #44	; 0x2c
    if(inited) lv_style_reset(style);
 8018e82:	2b00      	cmp	r3, #0
 8018e84:	f001 831d 	beq.w	801a4c2 <lv_theme_material_init+0x1782>
 8018e88:	f7f0 f84e 	bl	8008f28 <lv_style_reset>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
 8018e8c:	212c      	movs	r1, #44	; 0x2c
    lv_style_set_bg_opa(&styles->bar_indic, LV_STATE_DEFAULT, LV_OPA_COVER);
 8018e8e:	6820      	ldr	r0, [r4, #0]
 8018e90:	22ff      	movs	r2, #255	; 0xff
 8018e92:	4408      	add	r0, r1
 8018e94:	f7f0 f9e8 	bl	8009268 <_lv_style_set_opa>
    lv_style_set_radius(&styles->bar_indic, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
 8018e98:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
 8018e9a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8018e9e:	2101      	movs	r1, #1
 8018ea0:	302c      	adds	r0, #44	; 0x2c
 8018ea2:	f7f0 f849 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_bg_color(&styles->bar_indic, LV_STATE_DEFAULT, theme.color_primary);
 8018ea6:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
 8018ea8:	f8d8 200c 	ldr.w	r2, [r8, #12]
 8018eac:	2129      	movs	r1, #41	; 0x29
 8018eae:	302c      	adds	r0, #44	; 0x2c
 8018eb0:	f7f0 f910 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_bg_color(&styles->bar_indic, LV_STATE_DISABLED, lv_color_hex3(0x888));
 8018eb4:	6820      	ldr	r0, [r4, #0]
 8018eb6:	4a84      	ldr	r2, [pc, #528]	; (80190c8 <lv_theme_material_init+0x388>)
 8018eb8:	f242 0129 	movw	r1, #8233	; 0x2029
 8018ebc:	302c      	adds	r0, #44	; 0x2c
 8018ebe:	f7f0 f909 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_value_color(&styles->bar_indic, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x41404f) : LV_COLOR_WHITE);
 8018ec2:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 8018ec6:	6820      	ldr	r0, [r4, #0]
 8018ec8:	079b      	lsls	r3, r3, #30
 8018eca:	f100 002c 	add.w	r0, r0, #44	; 0x2c
 8018ece:	f101 82f3 	bmi.w	801a4b8 <lv_theme_material_init+0x1778>
 8018ed2:	23ff      	movs	r3, #255	; 0xff
 8018ed4:	461d      	mov	r5, r3
 8018ed6:	461e      	mov	r6, r3
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
 8018ed8:	2200      	movs	r2, #0
 8018eda:	2179      	movs	r1, #121	; 0x79
 8018edc:	f366 0207 	bfi	r2, r6, #0, #8
 8018ee0:	f365 220f 	bfi	r2, r5, #8, #8
 8018ee4:	f363 4217 	bfi	r2, r3, #16, #8
 8018ee8:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 8018eec:	f7f0 f8f2 	bl	80090d4 <_lv_style_set_color>
    style_init_reset(&styles->led);
 8018ef0:	6820      	ldr	r0, [r4, #0]
    if(inited) lv_style_reset(style);
 8018ef2:	f899 3000 	ldrb.w	r3, [r9]
    style_init_reset(&styles->led);
 8018ef6:	3070      	adds	r0, #112	; 0x70
    if(inited) lv_style_reset(style);
 8018ef8:	2b00      	cmp	r3, #0
 8018efa:	f001 82d9 	beq.w	801a4b0 <lv_theme_material_init+0x1770>
 8018efe:	f7f0 f813 	bl	8008f28 <lv_style_reset>
    lv_style_set_bg_opa(&styles->led, LV_STATE_DEFAULT, LV_OPA_COVER);
 8018f02:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
 8018f04:	22ff      	movs	r2, #255	; 0xff
 8018f06:	212c      	movs	r1, #44	; 0x2c
 8018f08:	3070      	adds	r0, #112	; 0x70
 8018f0a:	f7f0 f9ad 	bl	8009268 <_lv_style_set_opa>
    lv_style_set_bg_color(&styles->led, LV_STATE_DEFAULT, theme.color_primary);
 8018f0e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
 8018f10:	f8d8 200c 	ldr.w	r2, [r8, #12]
 8018f14:	2129      	movs	r1, #41	; 0x29
 8018f16:	3070      	adds	r0, #112	; 0x70
 8018f18:	f7f0 f8dc 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_border_width(&styles->led, LV_STATE_DEFAULT, 2);
 8018f1c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
 8018f1e:	2202      	movs	r2, #2
 8018f20:	2130      	movs	r1, #48	; 0x30
 8018f22:	3070      	adds	r0, #112	; 0x70
 8018f24:	f7f0 f808 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_border_opa(&styles->led, LV_STATE_DEFAULT, LV_OPA_50);
 8018f28:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_OPA, border_opa, lv_opa_t, _opa, scalar)
 8018f2a:	227f      	movs	r2, #127	; 0x7f
 8018f2c:	213c      	movs	r1, #60	; 0x3c
 8018f2e:	3070      	adds	r0, #112	; 0x70
 8018f30:	f7f0 f99a 	bl	8009268 <_lv_style_set_opa>
    lv_style_set_border_color(&styles->led, LV_STATE_DEFAULT, lv_color_lighten(theme.color_primary, LV_OPA_30));
 8018f34:	6823      	ldr	r3, [r4, #0]
 8018f36:	214c      	movs	r1, #76	; 0x4c
 8018f38:	f8d8 000c 	ldr.w	r0, [r8, #12]
 8018f3c:	f103 0570 	add.w	r5, r3, #112	; 0x70
 8018f40:	f7fb fbec 	bl	801471c <lv_color_lighten>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
 8018f44:	2139      	movs	r1, #57	; 0x39
 8018f46:	4602      	mov	r2, r0
 8018f48:	4628      	mov	r0, r5
 8018f4a:	f7f0 f8c3 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_radius(&styles->led, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
 8018f4e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
 8018f50:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8018f54:	2101      	movs	r1, #1
 8018f56:	3070      	adds	r0, #112	; 0x70
 8018f58:	f7ef ffee 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_shadow_width(&styles->led, LV_STATE_DEFAULT, LV_DPX(15));
 8018f5c:	2000      	movs	r0, #0
 8018f5e:	6825      	ldr	r5, [r4, #0]
 8018f60:	f7fa fcbe 	bl	80138e0 <lv_disp_get_dpi>
 8018f64:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8018f68:	3570      	adds	r5, #112	; 0x70
 8018f6a:	28ef      	cmp	r0, #239	; 0xef
 8018f6c:	f301 8748 	bgt.w	801ae00 <lv_theme_material_init+0x20c0>
 8018f70:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_WIDTH, shadow_width, lv_style_int_t, _int, scalar)
 8018f72:	4628      	mov	r0, r5
 8018f74:	2150      	movs	r1, #80	; 0x50
 8018f76:	f7ef ffdf 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_shadow_color(&styles->led, LV_STATE_DEFAULT, theme.color_primary);
 8018f7a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_COLOR, shadow_color, lv_color_t, _color, nonscalar)
 8018f7c:	f8d8 200c 	ldr.w	r2, [r8, #12]
 8018f80:	2159      	movs	r1, #89	; 0x59
 8018f82:	3070      	adds	r0, #112	; 0x70
 8018f84:	f7f0 f8a6 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_shadow_spread(&styles->led, LV_STATE_DEFAULT, LV_DPX(5));
 8018f88:	2000      	movs	r0, #0
 8018f8a:	6825      	ldr	r5, [r4, #0]
 8018f8c:	f7fa fca8 	bl	80138e0 <lv_disp_get_dpi>
 8018f90:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8018f94:	3570      	adds	r5, #112	; 0x70
 8018f96:	28ef      	cmp	r0, #239	; 0xef
 8018f98:	f301 8722 	bgt.w	801ade0 <lv_theme_material_init+0x20a0>
 8018f9c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_SPREAD, shadow_spread, lv_style_int_t, _int, scalar)
 8018f9e:	4628      	mov	r0, r5
 8018fa0:	2153      	movs	r1, #83	; 0x53
 8018fa2:	f7ef ffc9 	bl	8008f38 <_lv_style_set_int>
    style_init_reset(&styles->slider_knob);
 8018fa6:	6820      	ldr	r0, [r4, #0]
    if(inited) lv_style_reset(style);
 8018fa8:	f899 3000 	ldrb.w	r3, [r9]
    style_init_reset(&styles->slider_knob);
 8018fac:	3094      	adds	r0, #148	; 0x94
    if(inited) lv_style_reset(style);
 8018fae:	2b00      	cmp	r3, #0
 8018fb0:	f001 827a 	beq.w	801a4a8 <lv_theme_material_init+0x1768>
 8018fb4:	f7ef ffb8 	bl	8008f28 <lv_style_reset>
    lv_style_set_bg_opa(&styles->slider_knob, LV_STATE_DEFAULT, LV_OPA_COVER);
 8018fb8:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
 8018fba:	22ff      	movs	r2, #255	; 0xff
 8018fbc:	212c      	movs	r1, #44	; 0x2c
 8018fbe:	3094      	adds	r0, #148	; 0x94
 8018fc0:	f7f0 f952 	bl	8009268 <_lv_style_set_opa>
    lv_style_set_bg_color(&styles->slider_knob, LV_STATE_DEFAULT, IS_LIGHT ? theme.color_primary : LV_COLOR_WHITE);
 8018fc4:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 8018fc8:	6820      	ldr	r0, [r4, #0]
 8018fca:	079f      	lsls	r7, r3, #30
 8018fcc:	f100 0094 	add.w	r0, r0, #148	; 0x94
 8018fd0:	f141 825b 	bpl.w	801a48a <lv_theme_material_init+0x174a>
 8018fd4:	f898 700c 	ldrb.w	r7, [r8, #12]
 8018fd8:	f898 600d 	ldrb.w	r6, [r8, #13]
 8018fdc:	f898 500e 	ldrb.w	r5, [r8, #14]
 8018fe0:	f898 300f 	ldrb.w	r3, [r8, #15]
 8018fe4:	2200      	movs	r2, #0
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
 8018fe6:	2129      	movs	r1, #41	; 0x29
 8018fe8:	f367 0207 	bfi	r2, r7, #0, #8
 8018fec:	f366 220f 	bfi	r2, r6, #8, #8
 8018ff0:	f365 4217 	bfi	r2, r5, #16, #8
 8018ff4:	f363 621f 	bfi	r2, r3, #24, #8
 8018ff8:	f7f0 f86c 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_value_color(&styles->slider_knob, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : LV_COLOR_WHITE);
 8018ffc:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 8019000:	6820      	ldr	r0, [r4, #0]
 8019002:	079e      	lsls	r6, r3, #30
 8019004:	f100 0094 	add.w	r0, r0, #148	; 0x94
 8019008:	f101 823a 	bmi.w	801a480 <lv_theme_material_init+0x1740>
 801900c:	23ff      	movs	r3, #255	; 0xff
 801900e:	461d      	mov	r5, r3
 8019010:	461e      	mov	r6, r3
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
 8019012:	2200      	movs	r2, #0
 8019014:	2179      	movs	r1, #121	; 0x79
 8019016:	f366 0207 	bfi	r2, r6, #0, #8
 801901a:	f365 220f 	bfi	r2, r5, #8, #8
 801901e:	f363 4217 	bfi	r2, r3, #16, #8
 8019022:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 8019026:	f7f0 f855 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_radius(&styles->slider_knob, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
 801902a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
 801902c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8019030:	2101      	movs	r1, #1
 8019032:	3094      	adds	r0, #148	; 0x94
 8019034:	f7ef ff80 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_pad_left(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
 8019038:	2000      	movs	r0, #0
 801903a:	6825      	ldr	r5, [r4, #0]
 801903c:	f7fa fc50 	bl	80138e0 <lv_disp_get_dpi>
 8019040:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8019044:	3594      	adds	r5, #148	; 0x94
 8019046:	28ef      	cmp	r0, #239	; 0xef
 8019048:	f301 86ba 	bgt.w	801adc0 <lv_theme_material_init+0x2080>
 801904c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
 801904e:	4628      	mov	r0, r5
 8019050:	2112      	movs	r1, #18
 8019052:	f7ef ff71 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_pad_right(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
 8019056:	2000      	movs	r0, #0
 8019058:	6825      	ldr	r5, [r4, #0]
 801905a:	f7fa fc41 	bl	80138e0 <lv_disp_get_dpi>
 801905e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8019062:	3594      	adds	r5, #148	; 0x94
 8019064:	28ef      	cmp	r0, #239	; 0xef
 8019066:	f301 869b 	bgt.w	801ada0 <lv_theme_material_init+0x2060>
 801906a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
 801906c:	4628      	mov	r0, r5
 801906e:	2113      	movs	r1, #19
 8019070:	f7ef ff62 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_pad_top(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
 8019074:	2000      	movs	r0, #0
 8019076:	6825      	ldr	r5, [r4, #0]
 8019078:	f7fa fc32 	bl	80138e0 <lv_disp_get_dpi>
 801907c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8019080:	3594      	adds	r5, #148	; 0x94
 8019082:	28ef      	cmp	r0, #239	; 0xef
 8019084:	f301 867c 	bgt.w	801ad80 <lv_theme_material_init+0x2040>
 8019088:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
 801908a:	4628      	mov	r0, r5
 801908c:	2110      	movs	r1, #16
 801908e:	f7ef ff53 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_pad_bottom(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
 8019092:	2000      	movs	r0, #0
 8019094:	6825      	ldr	r5, [r4, #0]
 8019096:	f7fa fc23 	bl	80138e0 <lv_disp_get_dpi>
 801909a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 801909e:	3594      	adds	r5, #148	; 0x94
 80190a0:	28ef      	cmp	r0, #239	; 0xef
 80190a2:	f301 865d 	bgt.w	801ad60 <lv_theme_material_init+0x2020>
 80190a6:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
 80190a8:	4628      	mov	r0, r5
 80190aa:	2111      	movs	r1, #17
 80190ac:	f7ef ff44 	bl	8008f38 <_lv_style_set_int>
    style_init_reset(&styles->slider_bg);
 80190b0:	6820      	ldr	r0, [r4, #0]
    if(inited) lv_style_reset(style);
 80190b2:	f899 3000 	ldrb.w	r3, [r9]
    style_init_reset(&styles->slider_bg);
 80190b6:	3098      	adds	r0, #152	; 0x98
    if(inited) lv_style_reset(style);
 80190b8:	2b00      	cmp	r3, #0
 80190ba:	f001 81dd 	beq.w	801a478 <lv_theme_material_init+0x1738>
 80190be:	f7ef ff33 	bl	8008f28 <lv_style_reset>
 80190c2:	e007      	b.n	80190d4 <lv_theme_material_init+0x394>
 80190c4:	200201a8 	.word	0x200201a8
 80190c8:	ff888888 	.word	0xff888888
 80190cc:	200201a4 	.word	0x200201a4
 80190d0:	200201ac 	.word	0x200201ac
    lv_style_set_margin_left(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
 80190d4:	2000      	movs	r0, #0
 80190d6:	6825      	ldr	r5, [r4, #0]
 80190d8:	f7fa fc02 	bl	80138e0 <lv_disp_get_dpi>
 80190dc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80190e0:	3598      	adds	r5, #152	; 0x98
 80190e2:	0040      	lsls	r0, r0, #1
 80190e4:	28ef      	cmp	r0, #239	; 0xef
 80190e6:	f301 862b 	bgt.w	801ad40 <lv_theme_material_init+0x2000>
 80190ea:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_LEFT, margin_left, lv_style_int_t, _int, scalar)
 80190ec:	4628      	mov	r0, r5
 80190ee:	2117      	movs	r1, #23
 80190f0:	f7ef ff22 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_margin_right(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
 80190f4:	2000      	movs	r0, #0
 80190f6:	6825      	ldr	r5, [r4, #0]
 80190f8:	f7fa fbf2 	bl	80138e0 <lv_disp_get_dpi>
 80190fc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8019100:	3598      	adds	r5, #152	; 0x98
 8019102:	0040      	lsls	r0, r0, #1
 8019104:	28ef      	cmp	r0, #239	; 0xef
 8019106:	f301 860b 	bgt.w	801ad20 <lv_theme_material_init+0x1fe0>
 801910a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_RIGHT, margin_right, lv_style_int_t, _int, scalar)
 801910c:	4628      	mov	r0, r5
 801910e:	2118      	movs	r1, #24
 8019110:	f7ef ff12 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_margin_top(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
 8019114:	2000      	movs	r0, #0
 8019116:	6825      	ldr	r5, [r4, #0]
 8019118:	f7fa fbe2 	bl	80138e0 <lv_disp_get_dpi>
 801911c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8019120:	3598      	adds	r5, #152	; 0x98
 8019122:	0040      	lsls	r0, r0, #1
 8019124:	28ef      	cmp	r0, #239	; 0xef
 8019126:	f301 85eb 	bgt.w	801ad00 <lv_theme_material_init+0x1fc0>
 801912a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int, scalar)
 801912c:	4628      	mov	r0, r5
 801912e:	2115      	movs	r1, #21
 8019130:	f7ef ff02 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_margin_bottom(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
 8019134:	2000      	movs	r0, #0
 8019136:	6825      	ldr	r5, [r4, #0]
 8019138:	f7fa fbd2 	bl	80138e0 <lv_disp_get_dpi>
 801913c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8019140:	3598      	adds	r5, #152	; 0x98
 8019142:	0040      	lsls	r0, r0, #1
 8019144:	28ef      	cmp	r0, #239	; 0xef
 8019146:	f301 85cb 	bgt.w	801ace0 <lv_theme_material_init+0x1fa0>
 801914a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
 801914c:	4628      	mov	r0, r5
 801914e:	2116      	movs	r1, #22
 8019150:	f7ef fef2 	bl	8008f38 <_lv_style_set_int>
    style_init_reset(&styles->sw_knob);
 8019154:	6820      	ldr	r0, [r4, #0]
    if(inited) lv_style_reset(style);
 8019156:	f899 3000 	ldrb.w	r3, [r9]
    style_init_reset(&styles->sw_knob);
 801915a:	30a0      	adds	r0, #160	; 0xa0
    if(inited) lv_style_reset(style);
 801915c:	2b00      	cmp	r3, #0
 801915e:	f001 8187 	beq.w	801a470 <lv_theme_material_init+0x1730>
 8019162:	f7ef fee1 	bl	8008f28 <lv_style_reset>
    lv_style_set_bg_opa(&styles->sw_knob, LV_STATE_DEFAULT, LV_OPA_COVER);
 8019166:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
 8019168:	22ff      	movs	r2, #255	; 0xff
 801916a:	212c      	movs	r1, #44	; 0x2c
 801916c:	30a0      	adds	r0, #160	; 0xa0
 801916e:	f7f0 f87b 	bl	8009268 <_lv_style_set_opa>
    lv_style_set_bg_color(&styles->sw_knob, LV_STATE_DEFAULT, LV_COLOR_WHITE);
 8019172:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
 8019174:	f04f 32ff 	mov.w	r2, #4294967295
 8019178:	2129      	movs	r1, #41	; 0x29
 801917a:	30a0      	adds	r0, #160	; 0xa0
 801917c:	f7ef ffaa 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_radius(&styles->sw_knob, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
 8019180:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
 8019182:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8019186:	2101      	movs	r1, #1
 8019188:	30a0      	adds	r0, #160	; 0xa0
 801918a:	f7ef fed5 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_pad_top(&styles->sw_knob, LV_STATE_DEFAULT,    - LV_DPX(4));
 801918e:	6823      	ldr	r3, [r4, #0]
 8019190:	2000      	movs	r0, #0
 8019192:	f103 05a0 	add.w	r5, r3, #160	; 0xa0
 8019196:	f7fa fba3 	bl	80138e0 <lv_disp_get_dpi>
 801919a:	283b      	cmp	r0, #59	; 0x3b
 801919c:	f301 8593 	bgt.w	801acc6 <lv_theme_material_init+0x1f86>
 80191a0:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
 80191a4:	4628      	mov	r0, r5
 80191a6:	2110      	movs	r1, #16
 80191a8:	f7ef fec6 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_pad_bottom(&styles->sw_knob, LV_STATE_DEFAULT, - LV_DPX(4));
 80191ac:	6823      	ldr	r3, [r4, #0]
 80191ae:	2000      	movs	r0, #0
 80191b0:	f103 05a0 	add.w	r5, r3, #160	; 0xa0
 80191b4:	f7fa fb94 	bl	80138e0 <lv_disp_get_dpi>
 80191b8:	283b      	cmp	r0, #59	; 0x3b
 80191ba:	f301 8577 	bgt.w	801acac <lv_theme_material_init+0x1f6c>
 80191be:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
 80191c2:	4628      	mov	r0, r5
 80191c4:	2111      	movs	r1, #17
 80191c6:	f7ef feb7 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_pad_left(&styles->sw_knob, LV_STATE_DEFAULT,   - LV_DPX(4));
 80191ca:	6823      	ldr	r3, [r4, #0]
 80191cc:	2000      	movs	r0, #0
 80191ce:	f103 05a0 	add.w	r5, r3, #160	; 0xa0
 80191d2:	f7fa fb85 	bl	80138e0 <lv_disp_get_dpi>
 80191d6:	283b      	cmp	r0, #59	; 0x3b
 80191d8:	f301 855b 	bgt.w	801ac92 <lv_theme_material_init+0x1f52>
 80191dc:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
 80191e0:	4628      	mov	r0, r5
 80191e2:	2112      	movs	r1, #18
 80191e4:	f7ef fea8 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_pad_right(&styles->sw_knob, LV_STATE_DEFAULT,  - LV_DPX(4));
 80191e8:	6823      	ldr	r3, [r4, #0]
 80191ea:	2000      	movs	r0, #0
 80191ec:	f103 05a0 	add.w	r5, r3, #160	; 0xa0
 80191f0:	f7fa fb76 	bl	80138e0 <lv_disp_get_dpi>
 80191f4:	283b      	cmp	r0, #59	; 0x3b
 80191f6:	f301 853f 	bgt.w	801ac78 <lv_theme_material_init+0x1f38>
 80191fa:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
 80191fe:	4628      	mov	r0, r5
 8019200:	2113      	movs	r1, #19
 8019202:	f7ef fe99 	bl	8008f38 <_lv_style_set_int>
    style_init_reset(&styles->lmeter);
 8019206:	6820      	ldr	r0, [r4, #0]
    if(inited) lv_style_reset(style);
 8019208:	f899 3000 	ldrb.w	r3, [r9]
    style_init_reset(&styles->lmeter);
 801920c:	3074      	adds	r0, #116	; 0x74
    if(inited) lv_style_reset(style);
 801920e:	2b00      	cmp	r3, #0
 8019210:	f001 812a 	beq.w	801a468 <lv_theme_material_init+0x1728>
 8019214:	f7ef fe88 	bl	8008f28 <lv_style_reset>
    lv_style_set_radius(&styles->lmeter, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
 8019218:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
 801921a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801921e:	2101      	movs	r1, #1
 8019220:	3074      	adds	r0, #116	; 0x74
 8019222:	f7ef fe89 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_pad_left(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(20));
 8019226:	2000      	movs	r0, #0
 8019228:	6825      	ldr	r5, [r4, #0]
 801922a:	f7fa fb59 	bl	80138e0 <lv_disp_get_dpi>
 801922e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8019232:	3574      	adds	r5, #116	; 0x74
 8019234:	0080      	lsls	r0, r0, #2
 8019236:	28ef      	cmp	r0, #239	; 0xef
 8019238:	f301 850e 	bgt.w	801ac58 <lv_theme_material_init+0x1f18>
 801923c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
 801923e:	4628      	mov	r0, r5
 8019240:	2112      	movs	r1, #18
 8019242:	f7ef fe79 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_pad_right(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(20));
 8019246:	2000      	movs	r0, #0
 8019248:	6825      	ldr	r5, [r4, #0]
 801924a:	f7fa fb49 	bl	80138e0 <lv_disp_get_dpi>
 801924e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8019252:	3574      	adds	r5, #116	; 0x74
 8019254:	0080      	lsls	r0, r0, #2
 8019256:	28ef      	cmp	r0, #239	; 0xef
 8019258:	f301 84eb 	bgt.w	801ac32 <lv_theme_material_init+0x1ef2>
 801925c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
 801925e:	4628      	mov	r0, r5
 8019260:	2113      	movs	r1, #19
 8019262:	f7ef fe69 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_pad_top(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(20));
 8019266:	2000      	movs	r0, #0
 8019268:	6825      	ldr	r5, [r4, #0]
 801926a:	f7fa fb39 	bl	80138e0 <lv_disp_get_dpi>
 801926e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8019272:	3574      	adds	r5, #116	; 0x74
 8019274:	0080      	lsls	r0, r0, #2
 8019276:	28ef      	cmp	r0, #239	; 0xef
 8019278:	f301 84cb 	bgt.w	801ac12 <lv_theme_material_init+0x1ed2>
 801927c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
 801927e:	4628      	mov	r0, r5
 8019280:	2110      	movs	r1, #16
 8019282:	f7ef fe59 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_pad_inner(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(30));
 8019286:	2000      	movs	r0, #0
 8019288:	6825      	ldr	r5, [r4, #0]
 801928a:	f7fa fb29 	bl	80138e0 <lv_disp_get_dpi>
 801928e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8019292:	3574      	adds	r5, #116	; 0x74
 8019294:	0040      	lsls	r0, r0, #1
 8019296:	28ef      	cmp	r0, #239	; 0xef
 8019298:	f301 84ab 	bgt.w	801abf2 <lv_theme_material_init+0x1eb2>
 801929c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
 801929e:	4628      	mov	r0, r5
 80192a0:	2114      	movs	r1, #20
 80192a2:	f7ef fe49 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_scale_width(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(25));
 80192a6:	2000      	movs	r0, #0
 80192a8:	6825      	ldr	r5, [r4, #0]
 80192aa:	f7fa fb19 	bl	80138e0 <lv_disp_get_dpi>
 80192ae:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80192b2:	3574      	adds	r5, #116	; 0x74
 80192b4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80192b8:	28ef      	cmp	r0, #239	; 0xef
 80192ba:	f301 848a 	bgt.w	801abd2 <lv_theme_material_init+0x1e92>
 80192be:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_WIDTH, scale_width, lv_style_int_t, _int, scalar)
 80192c0:	4628      	mov	r0, r5
 80192c2:	21c0      	movs	r1, #192	; 0xc0
 80192c4:	f7ef fe38 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_line_color(&styles->lmeter, LV_STATE_DEFAULT, theme.color_primary);
 80192c8:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
 80192ca:	f8d8 200c 	ldr.w	r2, [r8, #12]
 80192ce:	2199      	movs	r1, #153	; 0x99
 80192d0:	3074      	adds	r0, #116	; 0x74
 80192d2:	f7ef feff 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_scale_grad_color(&styles->lmeter, LV_STATE_DEFAULT, theme.color_primary);
 80192d6:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_GRAD_COLOR, scale_grad_color, lv_color_t, _color, nonscalar)
 80192d8:	f8d8 200c 	ldr.w	r2, [r8, #12]
 80192dc:	21c9      	movs	r1, #201	; 0xc9
 80192de:	3074      	adds	r0, #116	; 0x74
 80192e0:	f7ef fef8 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_scale_end_color(&styles->lmeter, LV_STATE_DEFAULT, lv_color_hex3(0x888));
 80192e4:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_COLOR, scale_end_color, lv_color_t, _color, nonscalar)
 80192e6:	4adc      	ldr	r2, [pc, #880]	; (8019658 <lv_theme_material_init+0x918>)
 80192e8:	21ca      	movs	r1, #202	; 0xca
 80192ea:	3074      	adds	r0, #116	; 0x74
 80192ec:	f7ef fef2 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_line_width(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(10));
 80192f0:	2000      	movs	r0, #0
 80192f2:	6825      	ldr	r5, [r4, #0]
 80192f4:	f7fa faf4 	bl	80138e0 <lv_disp_get_dpi>
 80192f8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80192fc:	3574      	adds	r5, #116	; 0x74
 80192fe:	0040      	lsls	r0, r0, #1
 8019300:	28ef      	cmp	r0, #239	; 0xef
 8019302:	f301 8456 	bgt.w	801abb2 <lv_theme_material_init+0x1e72>
 8019306:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
 8019308:	4628      	mov	r0, r5
 801930a:	2190      	movs	r1, #144	; 0x90
 801930c:	f7ef fe14 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_scale_end_line_width(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(7));
 8019310:	2000      	movs	r0, #0
 8019312:	6825      	ldr	r5, [r4, #0]
 8019314:	f7fa fae4 	bl	80138e0 <lv_disp_get_dpi>
 8019318:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 801931c:	3574      	adds	r5, #116	; 0x74
 801931e:	28ef      	cmp	r0, #239	; 0xef
 8019320:	f301 8437 	bgt.w	801ab92 <lv_theme_material_init+0x1e52>
 8019324:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_LINE_WIDTH, scale_end_line_width, lv_style_int_t, _int, scalar)
 8019326:	4628      	mov	r0, r5
 8019328:	21c3      	movs	r1, #195	; 0xc3
 801932a:	f7ef fe05 	bl	8008f38 <_lv_style_set_int>
    gauge_init();
 801932e:	f7fd fef3 	bl	8017118 <gauge_init>
    style_init_reset(&styles->arc_indic);
 8019332:	6820      	ldr	r0, [r4, #0]
    if(inited) lv_style_reset(style);
 8019334:	f899 3000 	ldrb.w	r3, [r9]
    style_init_reset(&styles->arc_indic);
 8019338:	301c      	adds	r0, #28
    if(inited) lv_style_reset(style);
 801933a:	2b00      	cmp	r3, #0
 801933c:	f001 8090 	beq.w	801a460 <lv_theme_material_init+0x1720>
 8019340:	f7ef fdf2 	bl	8008f28 <lv_style_reset>
    lv_style_set_line_color(&styles->arc_indic, LV_STATE_DEFAULT, theme.color_primary);
 8019344:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
 8019346:	2199      	movs	r1, #153	; 0x99
 8019348:	f8d8 200c 	ldr.w	r2, [r8, #12]
 801934c:	301c      	adds	r0, #28
 801934e:	f7ef fec1 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_line_width(&styles->arc_indic, LV_STATE_DEFAULT, LV_DPX(25));
 8019352:	2000      	movs	r0, #0
 8019354:	6825      	ldr	r5, [r4, #0]
 8019356:	f7fa fac3 	bl	80138e0 <lv_disp_get_dpi>
 801935a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801935e:	351c      	adds	r5, #28
 8019360:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8019364:	28ef      	cmp	r0, #239	; 0xef
 8019366:	f301 8404 	bgt.w	801ab72 <lv_theme_material_init+0x1e32>
 801936a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
 801936c:	4628      	mov	r0, r5
 801936e:	2190      	movs	r1, #144	; 0x90
 8019370:	f7ef fde2 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_line_rounded(&styles->arc_indic, LV_STATE_DEFAULT, true);
 8019374:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_ROUNDED, line_rounded, bool, _int, scalar)
 8019376:	2201      	movs	r2, #1
 8019378:	2194      	movs	r1, #148	; 0x94
 801937a:	301c      	adds	r0, #28
 801937c:	f7ef fddc 	bl	8008f38 <_lv_style_set_int>
    style_init_reset(&styles->arc_bg);
 8019380:	6820      	ldr	r0, [r4, #0]
    if(inited) lv_style_reset(style);
 8019382:	f899 3000 	ldrb.w	r3, [r9]
    style_init_reset(&styles->arc_bg);
 8019386:	3020      	adds	r0, #32
    if(inited) lv_style_reset(style);
 8019388:	2b00      	cmp	r3, #0
 801938a:	f001 8065 	beq.w	801a458 <lv_theme_material_init+0x1718>
 801938e:	f7ef fdcb 	bl	8008f28 <lv_style_reset>
    lv_style_set_line_color(&styles->arc_bg, LV_STATE_DEFAULT, COLOR_BG_SEC);
 8019392:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 8019396:	2200      	movs	r2, #0
 8019398:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
 801939a:	2199      	movs	r1, #153	; 0x99
 801939c:	f003 0302 	and.w	r3, r3, #2
 80193a0:	3020      	adds	r0, #32
 80193a2:	4293      	cmp	r3, r2
 80193a4:	bf15      	itete	ne
 80193a6:	23d9      	movne	r3, #217	; 0xd9
 80193a8:	234d      	moveq	r3, #77	; 0x4d
 80193aa:	25d7      	movne	r5, #215	; 0xd7
 80193ac:	2549      	moveq	r5, #73	; 0x49
 80193ae:	f363 0207 	bfi	r2, r3, #0, #8
 80193b2:	bf14      	ite	ne
 80193b4:	23d4      	movne	r3, #212	; 0xd4
 80193b6:	2345      	moveq	r3, #69	; 0x45
 80193b8:	f365 220f 	bfi	r2, r5, #8, #8
 80193bc:	f363 4217 	bfi	r2, r3, #16, #8
 80193c0:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 80193c4:	f7ef fe86 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_line_width(&styles->arc_bg, LV_STATE_DEFAULT, LV_DPX(25));
 80193c8:	2000      	movs	r0, #0
 80193ca:	6825      	ldr	r5, [r4, #0]
 80193cc:	f7fa fa88 	bl	80138e0 <lv_disp_get_dpi>
 80193d0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80193d4:	3520      	adds	r5, #32
 80193d6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80193da:	28ef      	cmp	r0, #239	; 0xef
 80193dc:	f301 83b9 	bgt.w	801ab52 <lv_theme_material_init+0x1e12>
 80193e0:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
 80193e2:	4628      	mov	r0, r5
 80193e4:	2190      	movs	r1, #144	; 0x90
 80193e6:	f7ef fda7 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_line_rounded(&styles->arc_bg, LV_STATE_DEFAULT, true);
 80193ea:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_ROUNDED, line_rounded, bool, _int, scalar)
 80193ec:	2201      	movs	r2, #1
 80193ee:	2194      	movs	r1, #148	; 0x94
 80193f0:	3020      	adds	r0, #32
 80193f2:	f7ef fda1 	bl	8008f38 <_lv_style_set_int>
    style_init_reset(&styles->arc_knob);
 80193f6:	6820      	ldr	r0, [r4, #0]
    if(inited) lv_style_reset(style);
 80193f8:	f899 3000 	ldrb.w	r3, [r9]
    style_init_reset(&styles->arc_knob);
 80193fc:	3024      	adds	r0, #36	; 0x24
    if(inited) lv_style_reset(style);
 80193fe:	2b00      	cmp	r3, #0
 8019400:	f001 8026 	beq.w	801a450 <lv_theme_material_init+0x1710>
 8019404:	f7ef fd90 	bl	8008f28 <lv_style_reset>
    lv_style_set_radius(&styles->arc_knob, LV_STATE_DEFAULT,   LV_RADIUS_CIRCLE);
 8019408:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
 801940a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801940e:	2101      	movs	r1, #1
 8019410:	3024      	adds	r0, #36	; 0x24
 8019412:	f7ef fd91 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_pad_top(&styles->arc_knob, LV_STATE_DEFAULT,  LV_DPX(0));
 8019416:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
 8019418:	2200      	movs	r2, #0
 801941a:	2110      	movs	r1, #16
 801941c:	3024      	adds	r0, #36	; 0x24
 801941e:	f7ef fd8b 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_pad_bottom(&styles->arc_knob, LV_STATE_DEFAULT,  LV_DPX(0));
 8019422:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
 8019424:	2200      	movs	r2, #0
 8019426:	2111      	movs	r1, #17
 8019428:	3024      	adds	r0, #36	; 0x24
 801942a:	f7ef fd85 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_pad_left(&styles->arc_knob, LV_STATE_DEFAULT,    LV_DPX(0));
 801942e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
 8019430:	2200      	movs	r2, #0
 8019432:	2112      	movs	r1, #18
 8019434:	3024      	adds	r0, #36	; 0x24
 8019436:	f7ef fd7f 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_pad_right(&styles->arc_knob, LV_STATE_DEFAULT,   LV_DPX(0));
 801943a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
 801943c:	2200      	movs	r2, #0
 801943e:	2113      	movs	r1, #19
 8019440:	3024      	adds	r0, #36	; 0x24
 8019442:	f7ef fd79 	bl	8008f38 <_lv_style_set_int>
    style_init_reset(&styles->chart_bg);
 8019446:	6820      	ldr	r0, [r4, #0]
    if(inited) lv_style_reset(style);
 8019448:	f899 3000 	ldrb.w	r3, [r9]
    style_init_reset(&styles->chart_bg);
 801944c:	3044      	adds	r0, #68	; 0x44
    if(inited) lv_style_reset(style);
 801944e:	2b00      	cmp	r3, #0
 8019450:	f000 87fa 	beq.w	801a448 <lv_theme_material_init+0x1708>
 8019454:	f7ef fd68 	bl	8008f28 <lv_style_reset>
    lv_style_set_text_color(&styles->chart_bg, LV_STATE_DEFAULT, IS_LIGHT ? COLOR_BG_TEXT_DIS : lv_color_hex(0xa1adbd));
 8019458:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 801945c:	6820      	ldr	r0, [r4, #0]
 801945e:	079d      	lsls	r5, r3, #30
 8019460:	f100 0044 	add.w	r0, r0, #68	; 0x44
 8019464:	f100 87eb 	bmi.w	801a43e <lv_theme_material_init+0x16fe>
 8019468:	23a1      	movs	r3, #161	; 0xa1
 801946a:	25ad      	movs	r5, #173	; 0xad
 801946c:	26bd      	movs	r6, #189	; 0xbd
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
 801946e:	2200      	movs	r2, #0
 8019470:	f248 0189 	movw	r1, #32905	; 0x8089
 8019474:	f366 0207 	bfi	r2, r6, #0, #8
 8019478:	f365 220f 	bfi	r2, r5, #8, #8
 801947c:	f363 4217 	bfi	r2, r3, #16, #8
 8019480:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 8019484:	f7ef fe26 	bl	80090d4 <_lv_style_set_color>
    style_init_reset(&styles->chart_series_bg);
 8019488:	6820      	ldr	r0, [r4, #0]
    if(inited) lv_style_reset(style);
 801948a:	f899 3000 	ldrb.w	r3, [r9]
    style_init_reset(&styles->chart_series_bg);
 801948e:	3048      	adds	r0, #72	; 0x48
    if(inited) lv_style_reset(style);
 8019490:	2b00      	cmp	r3, #0
 8019492:	f000 87d0 	beq.w	801a436 <lv_theme_material_init+0x16f6>
 8019496:	f7ef fd47 	bl	8008f28 <lv_style_reset>
    lv_style_set_line_width(&styles->chart_series_bg, LV_STATE_DEFAULT, LV_DPX(1));
 801949a:	6823      	ldr	r3, [r4, #0]
 801949c:	2000      	movs	r0, #0
 801949e:	f103 0548 	add.w	r5, r3, #72	; 0x48
 80194a2:	f7fa fa1d 	bl	80138e0 <lv_disp_get_dpi>
 80194a6:	28ef      	cmp	r0, #239	; 0xef
 80194a8:	f301 8346 	bgt.w	801ab38 <lv_theme_material_init+0x1df8>
 80194ac:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
 80194ae:	4628      	mov	r0, r5
 80194b0:	2190      	movs	r1, #144	; 0x90
 80194b2:	f7ef fd41 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_line_dash_width(&styles->chart_series_bg, LV_STATE_DEFAULT, LV_DPX(10));
 80194b6:	2000      	movs	r0, #0
 80194b8:	6825      	ldr	r5, [r4, #0]
 80194ba:	f7fa fa11 	bl	80138e0 <lv_disp_get_dpi>
 80194be:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80194c2:	3548      	adds	r5, #72	; 0x48
 80194c4:	0040      	lsls	r0, r0, #1
 80194c6:	28ef      	cmp	r0, #239	; 0xef
 80194c8:	f301 8326 	bgt.w	801ab18 <lv_theme_material_init+0x1dd8>
 80194cc:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_DASH_WIDTH, line_dash_width, lv_style_int_t, _int, scalar)
 80194ce:	4628      	mov	r0, r5
 80194d0:	2192      	movs	r1, #146	; 0x92
 80194d2:	f7ef fd31 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_line_dash_gap(&styles->chart_series_bg, LV_STATE_DEFAULT, LV_DPX(10));
 80194d6:	2000      	movs	r0, #0
 80194d8:	6825      	ldr	r5, [r4, #0]
 80194da:	f7fa fa01 	bl	80138e0 <lv_disp_get_dpi>
 80194de:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80194e2:	3548      	adds	r5, #72	; 0x48
 80194e4:	0040      	lsls	r0, r0, #1
 80194e6:	28ef      	cmp	r0, #239	; 0xef
 80194e8:	f301 8306 	bgt.w	801aaf8 <lv_theme_material_init+0x1db8>
 80194ec:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_DASH_GAP, line_dash_gap, lv_style_int_t, _int, scalar)
 80194ee:	4628      	mov	r0, r5
 80194f0:	2193      	movs	r1, #147	; 0x93
 80194f2:	f7ef fd21 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_line_color(&styles->chart_series_bg, LV_STATE_DEFAULT, COLOR_BG_BORDER);
 80194f6:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 80194fa:	2200      	movs	r2, #0
 80194fc:	6820      	ldr	r0, [r4, #0]
 80194fe:	f003 0302 	and.w	r3, r3, #2
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
 8019502:	2199      	movs	r1, #153	; 0x99
 8019504:	3048      	adds	r0, #72	; 0x48
 8019506:	4293      	cmp	r3, r2
 8019508:	bf15      	itete	ne
 801950a:	23e3      	movne	r3, #227	; 0xe3
 801950c:	2397      	moveq	r3, #151	; 0x97
 801950e:	25dd      	movne	r5, #221	; 0xdd
 8019510:	258a      	moveq	r5, #138	; 0x8a
 8019512:	f363 0207 	bfi	r2, r3, #0, #8
 8019516:	bf14      	ite	ne
 8019518:	23d6      	movne	r3, #214	; 0xd6
 801951a:	2380      	moveq	r3, #128	; 0x80
 801951c:	f365 220f 	bfi	r2, r5, #8, #8
 8019520:	f363 4217 	bfi	r2, r3, #16, #8
 8019524:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 8019528:	f7ef fdd4 	bl	80090d4 <_lv_style_set_color>
    style_init_reset(&styles->chart_series);
 801952c:	6820      	ldr	r0, [r4, #0]
    if(inited) lv_style_reset(style);
 801952e:	f899 3000 	ldrb.w	r3, [r9]
    style_init_reset(&styles->chart_series);
 8019532:	304c      	adds	r0, #76	; 0x4c
    if(inited) lv_style_reset(style);
 8019534:	2b00      	cmp	r3, #0
 8019536:	f000 877a 	beq.w	801a42e <lv_theme_material_init+0x16ee>
 801953a:	f7ef fcf5 	bl	8008f28 <lv_style_reset>
    lv_style_set_line_width(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(3));
 801953e:	2000      	movs	r0, #0
 8019540:	6825      	ldr	r5, [r4, #0]
 8019542:	f7fa f9cd 	bl	80138e0 <lv_disp_get_dpi>
 8019546:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801954a:	354c      	adds	r5, #76	; 0x4c
 801954c:	28ef      	cmp	r0, #239	; 0xef
 801954e:	f301 82c3 	bgt.w	801aad8 <lv_theme_material_init+0x1d98>
 8019552:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
 8019554:	4628      	mov	r0, r5
 8019556:	2190      	movs	r1, #144	; 0x90
 8019558:	f7ef fcee 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_size(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(4));
 801955c:	6823      	ldr	r3, [r4, #0]
 801955e:	2000      	movs	r0, #0
 8019560:	f103 054c 	add.w	r5, r3, #76	; 0x4c
 8019564:	f7fa f9bc 	bl	80138e0 <lv_disp_get_dpi>
 8019568:	283b      	cmp	r0, #59	; 0x3b
 801956a:	f301 82a8 	bgt.w	801aabe <lv_theme_material_init+0x1d7e>
 801956e:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int, scalar)
 8019570:	4628      	mov	r0, r5
 8019572:	2103      	movs	r1, #3
 8019574:	f7ef fce0 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_pad_inner(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(2));     /*Space between columns*/
 8019578:	6823      	ldr	r3, [r4, #0]
 801957a:	2000      	movs	r0, #0
 801957c:	f103 054c 	add.w	r5, r3, #76	; 0x4c
 8019580:	f7fa f9ae 	bl	80138e0 <lv_disp_get_dpi>
 8019584:	2877      	cmp	r0, #119	; 0x77
 8019586:	f301 828d 	bgt.w	801aaa4 <lv_theme_material_init+0x1d64>
 801958a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
 801958c:	4628      	mov	r0, r5
 801958e:	2114      	movs	r1, #20
 8019590:	f7ef fcd2 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_radius(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(1));
 8019594:	6823      	ldr	r3, [r4, #0]
 8019596:	2000      	movs	r0, #0
 8019598:	f103 054c 	add.w	r5, r3, #76	; 0x4c
 801959c:	f7fa f9a0 	bl	80138e0 <lv_disp_get_dpi>
 80195a0:	28ef      	cmp	r0, #239	; 0xef
 80195a2:	f301 8272 	bgt.w	801aa8a <lv_theme_material_init+0x1d4a>
 80195a6:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
 80195a8:	4628      	mov	r0, r5
 80195aa:	2101      	movs	r1, #1
 80195ac:	f7ef fcc4 	bl	8008f38 <_lv_style_set_int>
    calendar_init();
 80195b0:	f7fd ffec 	bl	801758c <calendar_init>
    cpicker_init();
 80195b4:	f7fd faf0 	bl	8016b98 <cpicker_init>
    checkbox_init();
 80195b8:	f7fd fc2a 	bl	8016e10 <checkbox_init>
    style_init_reset(&styles->kb_bg);
 80195bc:	6820      	ldr	r0, [r4, #0]
    if(inited) lv_style_reset(style);
 80195be:	f899 3000 	ldrb.w	r3, [r9]
    style_init_reset(&styles->kb_bg);
 80195c2:	306c      	adds	r0, #108	; 0x6c
    if(inited) lv_style_reset(style);
 80195c4:	2b00      	cmp	r3, #0
 80195c6:	f000 872e 	beq.w	801a426 <lv_theme_material_init+0x16e6>
 80195ca:	f7ef fcad 	bl	8008f28 <lv_style_reset>
    lv_style_set_radius(&styles->kb_bg, LV_STATE_DEFAULT, 0);
 80195ce:	6820      	ldr	r0, [r4, #0]
 80195d0:	2200      	movs	r2, #0
 80195d2:	2101      	movs	r1, #1
 80195d4:	306c      	adds	r0, #108	; 0x6c
 80195d6:	f7ef fcaf 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_border_width(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(4));
 80195da:	6823      	ldr	r3, [r4, #0]
 80195dc:	2000      	movs	r0, #0
 80195de:	f103 056c 	add.w	r5, r3, #108	; 0x6c
 80195e2:	f7fa f97d 	bl	80138e0 <lv_disp_get_dpi>
 80195e6:	283b      	cmp	r0, #59	; 0x3b
 80195e8:	f301 8242 	bgt.w	801aa70 <lv_theme_material_init+0x1d30>
 80195ec:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
 80195ee:	4628      	mov	r0, r5
 80195f0:	2130      	movs	r1, #48	; 0x30
 80195f2:	f7ef fca1 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_border_side(&styles->kb_bg, LV_STATE_DEFAULT, LV_BORDER_SIDE_TOP);
 80195f6:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
 80195f8:	2202      	movs	r2, #2
 80195fa:	2131      	movs	r1, #49	; 0x31
 80195fc:	306c      	adds	r0, #108	; 0x6c
 80195fe:	f7ef fc9b 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_border_color(&styles->kb_bg, LV_STATE_DEFAULT, IS_LIGHT ? COLOR_BG_TEXT : LV_COLOR_BLACK);
 8019602:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 8019606:	6820      	ldr	r0, [r4, #0]
 8019608:	f013 0302 	ands.w	r3, r3, #2
 801960c:	f100 006c 	add.w	r0, r0, #108	; 0x6c
 8019610:	f040 8704 	bne.w	801a41c <lv_theme_material_init+0x16dc>
 8019614:	461d      	mov	r5, r3
 8019616:	461e      	mov	r6, r3
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
 8019618:	2200      	movs	r2, #0
 801961a:	2139      	movs	r1, #57	; 0x39
 801961c:	f366 0207 	bfi	r2, r6, #0, #8
 8019620:	f365 220f 	bfi	r2, r5, #8, #8
 8019624:	f363 4217 	bfi	r2, r3, #16, #8
 8019628:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 801962c:	f7ef fd52 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_border_color(&styles->kb_bg, LV_STATE_EDITED, theme.color_secondary);
 8019630:	6820      	ldr	r0, [r4, #0]
 8019632:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8019636:	f240 4139 	movw	r1, #1081	; 0x439
 801963a:	306c      	adds	r0, #108	; 0x6c
 801963c:	f7ef fd4a 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_pad_left(&styles->kb_bg, LV_STATE_DEFAULT,  LV_DPX(5));
 8019640:	2000      	movs	r0, #0
 8019642:	6825      	ldr	r5, [r4, #0]
 8019644:	f7fa f94c 	bl	80138e0 <lv_disp_get_dpi>
 8019648:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801964c:	356c      	adds	r5, #108	; 0x6c
 801964e:	28ef      	cmp	r0, #239	; 0xef
 8019650:	f301 81fe 	bgt.w	801aa50 <lv_theme_material_init+0x1d10>
 8019654:	2201      	movs	r2, #1
 8019656:	e001      	b.n	801965c <lv_theme_material_init+0x91c>
 8019658:	ff888888 	.word	0xff888888
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
 801965c:	4628      	mov	r0, r5
 801965e:	2112      	movs	r1, #18
 8019660:	f7ef fc6a 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_pad_right(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(5));
 8019664:	2000      	movs	r0, #0
 8019666:	6825      	ldr	r5, [r4, #0]
 8019668:	f7fa f93a 	bl	80138e0 <lv_disp_get_dpi>
 801966c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8019670:	356c      	adds	r5, #108	; 0x6c
 8019672:	28ef      	cmp	r0, #239	; 0xef
 8019674:	f301 81dc 	bgt.w	801aa30 <lv_theme_material_init+0x1cf0>
 8019678:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
 801967a:	4628      	mov	r0, r5
 801967c:	2113      	movs	r1, #19
 801967e:	f7ef fc5b 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_pad_top(&styles->kb_bg, LV_STATE_DEFAULT,  LV_DPX(5));
 8019682:	2000      	movs	r0, #0
 8019684:	6825      	ldr	r5, [r4, #0]
 8019686:	f7fa f92b 	bl	80138e0 <lv_disp_get_dpi>
 801968a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801968e:	356c      	adds	r5, #108	; 0x6c
 8019690:	28ef      	cmp	r0, #239	; 0xef
 8019692:	f301 81bd 	bgt.w	801aa10 <lv_theme_material_init+0x1cd0>
 8019696:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
 8019698:	4628      	mov	r0, r5
 801969a:	2110      	movs	r1, #16
 801969c:	f7ef fc4c 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_pad_bottom(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(5));
 80196a0:	2000      	movs	r0, #0
 80196a2:	6825      	ldr	r5, [r4, #0]
 80196a4:	f7fa f91c 	bl	80138e0 <lv_disp_get_dpi>
 80196a8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80196ac:	356c      	adds	r5, #108	; 0x6c
 80196ae:	28ef      	cmp	r0, #239	; 0xef
 80196b0:	f301 819e 	bgt.w	801a9f0 <lv_theme_material_init+0x1cb0>
 80196b4:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
 80196b6:	4628      	mov	r0, r5
 80196b8:	2111      	movs	r1, #17
 80196ba:	f7ef fc3d 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_pad_inner(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(3));
 80196be:	2000      	movs	r0, #0
 80196c0:	6825      	ldr	r5, [r4, #0]
 80196c2:	f7fa f90d 	bl	80138e0 <lv_disp_get_dpi>
 80196c6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80196ca:	356c      	adds	r5, #108	; 0x6c
 80196cc:	28ef      	cmp	r0, #239	; 0xef
 80196ce:	f301 817f 	bgt.w	801a9d0 <lv_theme_material_init+0x1c90>
 80196d2:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
 80196d4:	4628      	mov	r0, r5
 80196d6:	2114      	movs	r1, #20
 80196d8:	f7ef fc2e 	bl	8008f38 <_lv_style_set_int>
    style_init_reset(&styles->mbox_bg);
 80196dc:	6820      	ldr	r0, [r4, #0]
    if(inited) lv_style_reset(style);
 80196de:	f899 3000 	ldrb.w	r3, [r9]
    style_init_reset(&styles->mbox_bg);
 80196e2:	3080      	adds	r0, #128	; 0x80
    if(inited) lv_style_reset(style);
 80196e4:	2b00      	cmp	r3, #0
 80196e6:	f000 8695 	beq.w	801a414 <lv_theme_material_init+0x16d4>
 80196ea:	f7ef fc1d 	bl	8008f28 <lv_style_reset>
    lv_style_set_shadow_width(&styles->mbox_bg, LV_STATE_DEFAULT, LV_DPX(50));
 80196ee:	2000      	movs	r0, #0
 80196f0:	6825      	ldr	r5, [r4, #0]
 80196f2:	f7fa f8f5 	bl	80138e0 <lv_disp_get_dpi>
 80196f6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80196fa:	3580      	adds	r5, #128	; 0x80
 80196fc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8019700:	0040      	lsls	r0, r0, #1
 8019702:	28ef      	cmp	r0, #239	; 0xef
 8019704:	f301 8154 	bgt.w	801a9b0 <lv_theme_material_init+0x1c70>
 8019708:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_WIDTH, shadow_width, lv_style_int_t, _int, scalar)
 801970a:	4628      	mov	r0, r5
 801970c:	2150      	movs	r1, #80	; 0x50
 801970e:	f7ef fc13 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_shadow_color(&styles->mbox_bg, LV_STATE_DEFAULT, IS_LIGHT ? LV_COLOR_SILVER : lv_color_hex3(0x999));
 8019712:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 8019716:	2200      	movs	r2, #0
 8019718:	6820      	ldr	r0, [r4, #0]
 801971a:	f013 0f02 	tst.w	r3, #2
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_COLOR, shadow_color, lv_color_t, _color, nonscalar)
 801971e:	f04f 0159 	mov.w	r1, #89	; 0x59
 8019722:	f100 0080 	add.w	r0, r0, #128	; 0x80
 8019726:	bf14      	ite	ne
 8019728:	23c0      	movne	r3, #192	; 0xc0
 801972a:	2399      	moveq	r3, #153	; 0x99
 801972c:	f363 0207 	bfi	r2, r3, #0, #8
 8019730:	f363 220f 	bfi	r2, r3, #8, #8
 8019734:	f363 4217 	bfi	r2, r3, #16, #8
 8019738:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 801973c:	f7ef fcca 	bl	80090d4 <_lv_style_set_color>
    style_init_reset(&styles->sb);
 8019740:	6820      	ldr	r0, [r4, #0]
    if(inited) lv_style_reset(style);
 8019742:	f899 3000 	ldrb.w	r3, [r9]
    style_init_reset(&styles->sb);
 8019746:	3084      	adds	r0, #132	; 0x84
    if(inited) lv_style_reset(style);
 8019748:	2b00      	cmp	r3, #0
 801974a:	f000 865f 	beq.w	801a40c <lv_theme_material_init+0x16cc>
 801974e:	f7ef fbeb 	bl	8008f28 <lv_style_reset>
    lv_style_set_bg_opa(&styles->sb, LV_STATE_DEFAULT, LV_OPA_COVER);
 8019752:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
 8019754:	22ff      	movs	r2, #255	; 0xff
 8019756:	212c      	movs	r1, #44	; 0x2c
 8019758:	3084      	adds	r0, #132	; 0x84
 801975a:	f7ef fd85 	bl	8009268 <_lv_style_set_opa>
    lv_style_set_bg_color(&styles->sb, LV_STATE_DEFAULT, (IS_LIGHT ? lv_color_hex(0xcccfd1) : lv_color_hex(0x777f85)));
 801975e:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 8019762:	2200      	movs	r2, #0
 8019764:	6820      	ldr	r0, [r4, #0]
 8019766:	f003 0302 	and.w	r3, r3, #2
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
 801976a:	2129      	movs	r1, #41	; 0x29
 801976c:	3084      	adds	r0, #132	; 0x84
 801976e:	4293      	cmp	r3, r2
 8019770:	bf15      	itete	ne
 8019772:	23d1      	movne	r3, #209	; 0xd1
 8019774:	2385      	moveq	r3, #133	; 0x85
 8019776:	25cf      	movne	r5, #207	; 0xcf
 8019778:	257f      	moveq	r5, #127	; 0x7f
 801977a:	f363 0207 	bfi	r2, r3, #0, #8
 801977e:	bf14      	ite	ne
 8019780:	23cc      	movne	r3, #204	; 0xcc
 8019782:	2377      	moveq	r3, #119	; 0x77
 8019784:	f365 220f 	bfi	r2, r5, #8, #8
 8019788:	f363 4217 	bfi	r2, r3, #16, #8
 801978c:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 8019790:	f7ef fca0 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_radius(&styles->sb, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
 8019794:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
 8019796:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801979a:	2101      	movs	r1, #1
 801979c:	3084      	adds	r0, #132	; 0x84
 801979e:	f7ef fbcb 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_size(&styles->sb, LV_STATE_DEFAULT, LV_DPX(7));
 80197a2:	2000      	movs	r0, #0
 80197a4:	6825      	ldr	r5, [r4, #0]
 80197a6:	f7fa f89b 	bl	80138e0 <lv_disp_get_dpi>
 80197aa:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 80197ae:	3584      	adds	r5, #132	; 0x84
 80197b0:	28ef      	cmp	r0, #239	; 0xef
 80197b2:	f301 80ed 	bgt.w	801a990 <lv_theme_material_init+0x1c50>
 80197b6:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int, scalar)
 80197b8:	4628      	mov	r0, r5
 80197ba:	2103      	movs	r1, #3
 80197bc:	f7ef fbbc 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_pad_right(&styles->sb, LV_STATE_DEFAULT,  LV_DPX(7));
 80197c0:	2000      	movs	r0, #0
 80197c2:	6825      	ldr	r5, [r4, #0]
 80197c4:	f7fa f88c 	bl	80138e0 <lv_disp_get_dpi>
 80197c8:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 80197cc:	3584      	adds	r5, #132	; 0x84
 80197ce:	28ef      	cmp	r0, #239	; 0xef
 80197d0:	f301 80ce 	bgt.w	801a970 <lv_theme_material_init+0x1c30>
 80197d4:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
 80197d6:	4628      	mov	r0, r5
 80197d8:	2113      	movs	r1, #19
 80197da:	f7ef fbad 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_pad_bottom(&styles->sb, LV_STATE_DEFAULT,  LV_DPX(7));
 80197de:	2000      	movs	r0, #0
 80197e0:	6825      	ldr	r5, [r4, #0]
 80197e2:	f7fa f87d 	bl	80138e0 <lv_disp_get_dpi>
 80197e6:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 80197ea:	3584      	adds	r5, #132	; 0x84
 80197ec:	28ef      	cmp	r0, #239	; 0xef
 80197ee:	f301 80af 	bgt.w	801a950 <lv_theme_material_init+0x1c10>
 80197f2:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
 80197f4:	4628      	mov	r0, r5
 80197f6:	2111      	movs	r1, #17
 80197f8:	f7ef fb9e 	bl	8008f38 <_lv_style_set_int>
    style_init_reset(&styles->edge_flash);
 80197fc:	6820      	ldr	r0, [r4, #0]
    if(inited) lv_style_reset(style);
 80197fe:	f899 3000 	ldrb.w	r3, [r9]
    style_init_reset(&styles->edge_flash);
 8019802:	3088      	adds	r0, #136	; 0x88
    if(inited) lv_style_reset(style);
 8019804:	2b00      	cmp	r3, #0
 8019806:	f000 85fd 	beq.w	801a404 <lv_theme_material_init+0x16c4>
 801980a:	f7ef fb8d 	bl	8008f28 <lv_style_reset>
    lv_style_set_bg_opa(&styles->edge_flash, LV_STATE_DEFAULT, LV_OPA_COVER);
 801980e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
 8019810:	22ff      	movs	r2, #255	; 0xff
 8019812:	212c      	movs	r1, #44	; 0x2c
 8019814:	3088      	adds	r0, #136	; 0x88
 8019816:	f7ef fd27 	bl	8009268 <_lv_style_set_opa>
    lv_style_set_bg_color(&styles->edge_flash, LV_STATE_DEFAULT,  lv_color_hex3(0x888));
 801981a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
 801981c:	4ac4      	ldr	r2, [pc, #784]	; (8019b30 <lv_theme_material_init+0xdf0>)
 801981e:	2129      	movs	r1, #41	; 0x29
 8019820:	3088      	adds	r0, #136	; 0x88
 8019822:	f7ef fc57 	bl	80090d4 <_lv_style_set_color>
    style_init_reset(&styles->ta_cursor);
 8019826:	6820      	ldr	r0, [r4, #0]
    if(inited) lv_style_reset(style);
 8019828:	f899 3000 	ldrb.w	r3, [r9]
    style_init_reset(&styles->ta_cursor);
 801982c:	30b8      	adds	r0, #184	; 0xb8
    if(inited) lv_style_reset(style);
 801982e:	2b00      	cmp	r3, #0
 8019830:	f000 85e4 	beq.w	801a3fc <lv_theme_material_init+0x16bc>
 8019834:	f7ef fb78 	bl	8008f28 <lv_style_reset>
    lv_style_set_border_color(&styles->ta_cursor, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
 8019838:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 801983c:	2200      	movs	r2, #0
 801983e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
 8019840:	2139      	movs	r1, #57	; 0x39
 8019842:	f003 0302 	and.w	r3, r3, #2
 8019846:	30b8      	adds	r0, #184	; 0xb8
 8019848:	4293      	cmp	r3, r2
 801984a:	bf15      	itete	ne
 801984c:	234f      	movne	r3, #79	; 0x4f
 801984e:	23ad      	moveq	r3, #173	; 0xad
 8019850:	2540      	movne	r5, #64	; 0x40
 8019852:	25a8      	moveq	r5, #168	; 0xa8
 8019854:	f363 0207 	bfi	r2, r3, #0, #8
 8019858:	bf14      	ite	ne
 801985a:	2331      	movne	r3, #49	; 0x31
 801985c:	23a5      	moveq	r3, #165	; 0xa5
 801985e:	f365 220f 	bfi	r2, r5, #8, #8
 8019862:	f363 4217 	bfi	r2, r3, #16, #8
 8019866:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 801986a:	f7ef fc33 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_border_width(&styles->ta_cursor, LV_STATE_DEFAULT, LV_DPX(2));
 801986e:	6823      	ldr	r3, [r4, #0]
 8019870:	2000      	movs	r0, #0
 8019872:	f103 05b8 	add.w	r5, r3, #184	; 0xb8
 8019876:	f7fa f833 	bl	80138e0 <lv_disp_get_dpi>
 801987a:	2877      	cmp	r0, #119	; 0x77
 801987c:	f301 805b 	bgt.w	801a936 <lv_theme_material_init+0x1bf6>
 8019880:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
 8019882:	4628      	mov	r0, r5
 8019884:	2130      	movs	r1, #48	; 0x30
 8019886:	f7ef fb57 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_pad_left(&styles->ta_cursor, LV_STATE_DEFAULT, LV_DPX(1));
 801988a:	6823      	ldr	r3, [r4, #0]
 801988c:	2000      	movs	r0, #0
 801988e:	f103 05b8 	add.w	r5, r3, #184	; 0xb8
 8019892:	f7fa f825 	bl	80138e0 <lv_disp_get_dpi>
 8019896:	28ef      	cmp	r0, #239	; 0xef
 8019898:	f301 8040 	bgt.w	801a91c <lv_theme_material_init+0x1bdc>
 801989c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
 801989e:	4628      	mov	r0, r5
 80198a0:	2112      	movs	r1, #18
 80198a2:	f7ef fb49 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_border_side(&styles->ta_cursor, LV_STATE_DEFAULT, LV_BORDER_SIDE_LEFT);
 80198a6:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
 80198a8:	2204      	movs	r2, #4
 80198aa:	2131      	movs	r1, #49	; 0x31
 80198ac:	30b8      	adds	r0, #184	; 0xb8
 80198ae:	f7ef fb43 	bl	8008f38 <_lv_style_set_int>
    style_init_reset(&styles->ta_placeholder);
 80198b2:	6820      	ldr	r0, [r4, #0]
    if(inited) lv_style_reset(style);
 80198b4:	f899 3000 	ldrb.w	r3, [r9]
    style_init_reset(&styles->ta_placeholder);
 80198b8:	30bc      	adds	r0, #188	; 0xbc
    if(inited) lv_style_reset(style);
 80198ba:	2b00      	cmp	r3, #0
 80198bc:	f000 859a 	beq.w	801a3f4 <lv_theme_material_init+0x16b4>
 80198c0:	f7ef fb32 	bl	8008f28 <lv_style_reset>
                            IS_LIGHT ? COLOR_BG_TEXT_DIS : lv_color_hex(0xa1adbd));
 80198c4:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
    lv_style_set_text_color(&styles->ta_placeholder, LV_STATE_DEFAULT,
 80198c8:	6820      	ldr	r0, [r4, #0]
 80198ca:	0799      	lsls	r1, r3, #30
 80198cc:	f100 00bc 	add.w	r0, r0, #188	; 0xbc
 80198d0:	f100 858b 	bmi.w	801a3ea <lv_theme_material_init+0x16aa>
 80198d4:	23a1      	movs	r3, #161	; 0xa1
 80198d6:	25ad      	movs	r5, #173	; 0xad
 80198d8:	26bd      	movs	r6, #189	; 0xbd
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
 80198da:	2200      	movs	r2, #0
 80198dc:	f248 0189 	movw	r1, #32905	; 0x8089
 80198e0:	f366 0207 	bfi	r2, r6, #0, #8
 80198e4:	f365 220f 	bfi	r2, r5, #8, #8
 80198e8:	f363 4217 	bfi	r2, r3, #16, #8
 80198ec:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 80198f0:	f7ef fbf0 	bl	80090d4 <_lv_style_set_color>
    style_init_reset(&styles->spinbox_cursor);
 80198f4:	6820      	ldr	r0, [r4, #0]
    if(inited) lv_style_reset(style);
 80198f6:	f899 3000 	ldrb.w	r3, [r9]
    style_init_reset(&styles->spinbox_cursor);
 80198fa:	309c      	adds	r0, #156	; 0x9c
    if(inited) lv_style_reset(style);
 80198fc:	2b00      	cmp	r3, #0
 80198fe:	f000 8570 	beq.w	801a3e2 <lv_theme_material_init+0x16a2>
 8019902:	f7ef fb11 	bl	8008f28 <lv_style_reset>
    lv_style_set_bg_opa(&styles->spinbox_cursor, LV_STATE_DEFAULT, LV_OPA_COVER);
 8019906:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
 8019908:	22ff      	movs	r2, #255	; 0xff
 801990a:	212c      	movs	r1, #44	; 0x2c
 801990c:	309c      	adds	r0, #156	; 0x9c
 801990e:	f7ef fcab 	bl	8009268 <_lv_style_set_opa>
    lv_style_set_bg_color(&styles->spinbox_cursor, LV_STATE_DEFAULT, theme.color_primary);
 8019912:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
 8019914:	f8d8 200c 	ldr.w	r2, [r8, #12]
 8019918:	2129      	movs	r1, #41	; 0x29
 801991a:	309c      	adds	r0, #156	; 0x9c
 801991c:	f7ef fbda 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_text_color(&styles->spinbox_cursor, LV_STATE_DEFAULT, LV_COLOR_WHITE);
 8019920:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
 8019922:	f04f 32ff 	mov.w	r2, #4294967295
 8019926:	f248 0189 	movw	r1, #32905	; 0x8089
 801992a:	309c      	adds	r0, #156	; 0x9c
 801992c:	f7ef fbd2 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_pad_top(&styles->spinbox_cursor, LV_STATE_DEFAULT, LV_DPX(100));
 8019930:	2000      	movs	r0, #0
 8019932:	6825      	ldr	r5, [r4, #0]
 8019934:	f7f9 ffd4 	bl	80138e0 <lv_disp_get_dpi>
 8019938:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801993c:	359c      	adds	r5, #156	; 0x9c
 801993e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8019942:	0080      	lsls	r0, r0, #2
 8019944:	28ef      	cmp	r0, #239	; 0xef
 8019946:	f300 87d9 	bgt.w	801a8fc <lv_theme_material_init+0x1bbc>
 801994a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
 801994c:	4628      	mov	r0, r5
 801994e:	2110      	movs	r1, #16
 8019950:	f7ef faf2 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_pad_bottom(&styles->spinbox_cursor, LV_STATE_DEFAULT, LV_DPX(100));
 8019954:	2000      	movs	r0, #0
 8019956:	6825      	ldr	r5, [r4, #0]
 8019958:	f7f9 ffc2 	bl	80138e0 <lv_disp_get_dpi>
 801995c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8019960:	359c      	adds	r5, #156	; 0x9c
 8019962:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8019966:	0080      	lsls	r0, r0, #2
 8019968:	28ef      	cmp	r0, #239	; 0xef
 801996a:	f300 87b7 	bgt.w	801a8dc <lv_theme_material_init+0x1b9c>
 801996e:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
 8019970:	4628      	mov	r0, r5
 8019972:	2111      	movs	r1, #17
 8019974:	f7ef fae0 	bl	8008f38 <_lv_style_set_int>
    style_init_reset(&styles->list_bg);
 8019978:	6820      	ldr	r0, [r4, #0]
    if(inited) lv_style_reset(style);
 801997a:	f899 3000 	ldrb.w	r3, [r9]
    style_init_reset(&styles->list_bg);
 801997e:	3078      	adds	r0, #120	; 0x78
    if(inited) lv_style_reset(style);
 8019980:	2b00      	cmp	r3, #0
 8019982:	f000 852a 	beq.w	801a3da <lv_theme_material_init+0x169a>
 8019986:	f7ef facf 	bl	8008f28 <lv_style_reset>
    lv_style_set_clip_corner(&styles->list_bg, LV_STATE_DEFAULT, true);
 801998a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
 801998c:	2201      	movs	r2, #1
 801998e:	2102      	movs	r1, #2
 8019990:	3078      	adds	r0, #120	; 0x78
 8019992:	f7ef fad1 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_pad_left(&styles->list_bg, LV_STATE_DEFAULT, 0);
 8019996:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
 8019998:	2200      	movs	r2, #0
 801999a:	2112      	movs	r1, #18
 801999c:	3078      	adds	r0, #120	; 0x78
 801999e:	f7ef facb 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_pad_right(&styles->list_bg, LV_STATE_DEFAULT, 0);
 80199a2:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
 80199a4:	2200      	movs	r2, #0
 80199a6:	2113      	movs	r1, #19
 80199a8:	3078      	adds	r0, #120	; 0x78
 80199aa:	f7ef fac5 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_pad_top(&styles->list_bg, LV_STATE_DEFAULT, 0);
 80199ae:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
 80199b0:	2200      	movs	r2, #0
 80199b2:	2110      	movs	r1, #16
 80199b4:	3078      	adds	r0, #120	; 0x78
 80199b6:	f7ef fabf 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_pad_bottom(&styles->list_bg, LV_STATE_DEFAULT, 0);
 80199ba:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
 80199bc:	2200      	movs	r2, #0
 80199be:	2111      	movs	r1, #17
 80199c0:	3078      	adds	r0, #120	; 0x78
 80199c2:	f7ef fab9 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_pad_inner(&styles->list_bg, LV_STATE_DEFAULT, 0);
 80199c6:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
 80199c8:	2200      	movs	r2, #0
 80199ca:	2114      	movs	r1, #20
 80199cc:	3078      	adds	r0, #120	; 0x78
 80199ce:	f7ef fab3 	bl	8008f38 <_lv_style_set_int>
    style_init_reset(&styles->list_btn);
 80199d2:	6820      	ldr	r0, [r4, #0]
    if(inited) lv_style_reset(style);
 80199d4:	f899 3000 	ldrb.w	r3, [r9]
    style_init_reset(&styles->list_btn);
 80199d8:	307c      	adds	r0, #124	; 0x7c
    if(inited) lv_style_reset(style);
 80199da:	2b00      	cmp	r3, #0
 80199dc:	f000 84f9 	beq.w	801a3d2 <lv_theme_material_init+0x1692>
 80199e0:	f7ef faa2 	bl	8008f28 <lv_style_reset>
    lv_style_set_bg_opa(&styles->list_btn, LV_STATE_DEFAULT, LV_OPA_COVER);
 80199e4:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
 80199e6:	22ff      	movs	r2, #255	; 0xff
 80199e8:	212c      	movs	r1, #44	; 0x2c
 80199ea:	307c      	adds	r0, #124	; 0x7c
 80199ec:	f7ef fc3c 	bl	8009268 <_lv_style_set_opa>
    lv_style_set_bg_color(&styles->list_btn, LV_STATE_DEFAULT, COLOR_BG);
 80199f0:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 80199f4:	6820      	ldr	r0, [r4, #0]
 80199f6:	079a      	lsls	r2, r3, #30
 80199f8:	f100 007c 	add.w	r0, r0, #124	; 0x7c
 80199fc:	f100 84e4 	bmi.w	801a3c8 <lv_theme_material_init+0x1688>
 8019a00:	2358      	movs	r3, #88	; 0x58
 8019a02:	2562      	movs	r5, #98	; 0x62
 8019a04:	2673      	movs	r6, #115	; 0x73
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
 8019a06:	2200      	movs	r2, #0
 8019a08:	2129      	movs	r1, #41	; 0x29
 8019a0a:	f366 0207 	bfi	r2, r6, #0, #8
 8019a0e:	f365 220f 	bfi	r2, r5, #8, #8
 8019a12:	f363 4217 	bfi	r2, r3, #16, #8
 8019a16:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 8019a1a:	f7ef fb5b 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_bg_color(&styles->list_btn, LV_STATE_PRESSED, COLOR_BG_PR);
 8019a1e:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 8019a22:	6820      	ldr	r0, [r4, #0]
 8019a24:	079b      	lsls	r3, r3, #30
 8019a26:	f100 007c 	add.w	r0, r0, #124	; 0x7c
 8019a2a:	f100 84c8 	bmi.w	801a3be <lv_theme_material_init+0x167e>
 8019a2e:	2349      	movs	r3, #73	; 0x49
 8019a30:	254f      	movs	r5, #79	; 0x4f
 8019a32:	2657      	movs	r6, #87	; 0x57
 8019a34:	2200      	movs	r2, #0
 8019a36:	f241 0129 	movw	r1, #4137	; 0x1029
 8019a3a:	f366 0207 	bfi	r2, r6, #0, #8
 8019a3e:	f365 220f 	bfi	r2, r5, #8, #8
 8019a42:	f363 4217 	bfi	r2, r3, #16, #8
 8019a46:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 8019a4a:	f7ef fb43 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_bg_color(&styles->list_btn, LV_STATE_DISABLED, COLOR_BG_DIS);
 8019a4e:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 8019a52:	6820      	ldr	r0, [r4, #0]
 8019a54:	079f      	lsls	r7, r3, #30
 8019a56:	f100 007c 	add.w	r0, r0, #124	; 0x7c
 8019a5a:	f100 84ab 	bmi.w	801a3b4 <lv_theme_material_init+0x1674>
 8019a5e:	2358      	movs	r3, #88	; 0x58
 8019a60:	2562      	movs	r5, #98	; 0x62
 8019a62:	2673      	movs	r6, #115	; 0x73
 8019a64:	2200      	movs	r2, #0
 8019a66:	f242 0129 	movw	r1, #8233	; 0x2029
 8019a6a:	f366 0207 	bfi	r2, r6, #0, #8
 8019a6e:	f365 220f 	bfi	r2, r5, #8, #8
 8019a72:	f363 4217 	bfi	r2, r3, #16, #8
 8019a76:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 8019a7a:	f7ef fb2b 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_bg_color(&styles->list_btn, LV_STATE_CHECKED, COLOR_BG_CHK);
 8019a7e:	6820      	ldr	r0, [r4, #0]
 8019a80:	f8d8 200c 	ldr.w	r2, [r8, #12]
 8019a84:	f240 1129 	movw	r1, #297	; 0x129
 8019a88:	307c      	adds	r0, #124	; 0x7c
 8019a8a:	f7ef fb23 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_bg_color(&styles->list_btn, LV_STATE_CHECKED | LV_STATE_PRESSED, COLOR_BG_PR_CHK);
 8019a8e:	6823      	ldr	r3, [r4, #0]
 8019a90:	2133      	movs	r1, #51	; 0x33
 8019a92:	f8d8 000c 	ldr.w	r0, [r8, #12]
 8019a96:	f103 057c 	add.w	r5, r3, #124	; 0x7c
 8019a9a:	f7fa fe6b 	bl	8014774 <lv_color_darken>
 8019a9e:	f241 1129 	movw	r1, #4393	; 0x1129
 8019aa2:	4602      	mov	r2, r0
 8019aa4:	4628      	mov	r0, r5
 8019aa6:	f7ef fb15 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_text_color(&styles->list_btn, LV_STATE_DEFAULT, COLOR_BG_TEXT);
 8019aaa:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 8019aae:	6820      	ldr	r0, [r4, #0]
 8019ab0:	079e      	lsls	r6, r3, #30
 8019ab2:	f100 007c 	add.w	r0, r0, #124	; 0x7c
 8019ab6:	f100 8478 	bmi.w	801a3aa <lv_theme_material_init+0x166a>
 8019aba:	23ff      	movs	r3, #255	; 0xff
 8019abc:	461d      	mov	r5, r3
 8019abe:	461e      	mov	r6, r3
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
 8019ac0:	2200      	movs	r2, #0
 8019ac2:	f248 0189 	movw	r1, #32905	; 0x8089
 8019ac6:	f366 0207 	bfi	r2, r6, #0, #8
 8019aca:	f365 220f 	bfi	r2, r5, #8, #8
 8019ace:	f363 4217 	bfi	r2, r3, #16, #8
 8019ad2:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 8019ad6:	f7ef fafd 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_text_color(&styles->list_btn, LV_STATE_CHECKED, COLOR_BG_TEXT_CHK);
 8019ada:	6820      	ldr	r0, [r4, #0]
 8019adc:	f04f 32ff 	mov.w	r2, #4294967295
 8019ae0:	f248 1189 	movw	r1, #33161	; 0x8189
 8019ae4:	307c      	adds	r0, #124	; 0x7c
 8019ae6:	f7ef faf5 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_text_color(&styles->list_btn, LV_STATE_DISABLED, COLOR_BG_TEXT_DIS);
 8019aea:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 8019aee:	2200      	movs	r2, #0
 8019af0:	6820      	ldr	r0, [r4, #0]
 8019af2:	f013 0f02 	tst.w	r3, #2
 8019af6:	f24a 0189 	movw	r1, #41097	; 0xa089
 8019afa:	f100 007c 	add.w	r0, r0, #124	; 0x7c
 8019afe:	bf14      	ite	ne
 8019b00:	23aa      	movne	r3, #170	; 0xaa
 8019b02:	2399      	moveq	r3, #153	; 0x99
 8019b04:	f363 0207 	bfi	r2, r3, #0, #8
 8019b08:	f363 220f 	bfi	r2, r3, #8, #8
 8019b0c:	f363 4217 	bfi	r2, r3, #16, #8
 8019b10:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 8019b14:	f7ef fade 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_image_recolor(&styles->list_btn, LV_STATE_DEFAULT, COLOR_BG_TEXT);
 8019b18:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 8019b1c:	6820      	ldr	r0, [r4, #0]
 8019b1e:	079d      	lsls	r5, r3, #30
 8019b20:	f100 007c 	add.w	r0, r0, #124	; 0x7c
 8019b24:	f100 843c 	bmi.w	801a3a0 <lv_theme_material_init+0x1660>
 8019b28:	23ff      	movs	r3, #255	; 0xff
 8019b2a:	461d      	mov	r5, r3
 8019b2c:	461e      	mov	r6, r3
 8019b2e:	e001      	b.n	8019b34 <lv_theme_material_init+0xdf4>
 8019b30:	ff888888 	.word	0xff888888
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
 8019b34:	2200      	movs	r2, #0
 8019b36:	f248 01a9 	movw	r1, #32937	; 0x80a9
 8019b3a:	f366 0207 	bfi	r2, r6, #0, #8
 8019b3e:	f365 220f 	bfi	r2, r5, #8, #8
 8019b42:	f363 4217 	bfi	r2, r3, #16, #8
 8019b46:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 8019b4a:	f7ef fac3 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_image_recolor(&styles->list_btn, LV_STATE_CHECKED, COLOR_BG_TEXT_CHK);
 8019b4e:	6820      	ldr	r0, [r4, #0]
 8019b50:	f04f 32ff 	mov.w	r2, #4294967295
 8019b54:	f248 11a9 	movw	r1, #33193	; 0x81a9
 8019b58:	307c      	adds	r0, #124	; 0x7c
 8019b5a:	f7ef fabb 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_image_recolor(&styles->list_btn, LV_STATE_DISABLED, COLOR_BG_TEXT_DIS);
 8019b5e:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 8019b62:	2200      	movs	r2, #0
 8019b64:	6820      	ldr	r0, [r4, #0]
 8019b66:	f013 0f02 	tst.w	r3, #2
 8019b6a:	f24a 01a9 	movw	r1, #41129	; 0xa0a9
 8019b6e:	f100 007c 	add.w	r0, r0, #124	; 0x7c
 8019b72:	bf14      	ite	ne
 8019b74:	23aa      	movne	r3, #170	; 0xaa
 8019b76:	2399      	moveq	r3, #153	; 0x99
 8019b78:	f363 0207 	bfi	r2, r3, #0, #8
 8019b7c:	f363 220f 	bfi	r2, r3, #8, #8
 8019b80:	f363 4217 	bfi	r2, r3, #16, #8
 8019b84:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 8019b88:	f7ef faa4 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_border_side(&styles->list_btn, LV_STATE_DEFAULT, LV_BORDER_SIDE_BOTTOM);
 8019b8c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
 8019b8e:	2201      	movs	r2, #1
 8019b90:	2131      	movs	r1, #49	; 0x31
 8019b92:	307c      	adds	r0, #124	; 0x7c
 8019b94:	f7ef f9d0 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_border_color(&styles->list_btn, LV_STATE_DEFAULT, COLOR_BG_BORDER);
 8019b98:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 8019b9c:	2200      	movs	r2, #0
 8019b9e:	6820      	ldr	r0, [r4, #0]
 8019ba0:	f003 0302 	and.w	r3, r3, #2
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
 8019ba4:	2139      	movs	r1, #57	; 0x39
 8019ba6:	307c      	adds	r0, #124	; 0x7c
 8019ba8:	4293      	cmp	r3, r2
 8019baa:	bf15      	itete	ne
 8019bac:	26e3      	movne	r6, #227	; 0xe3
 8019bae:	2697      	moveq	r6, #151	; 0x97
 8019bb0:	25dd      	movne	r5, #221	; 0xdd
 8019bb2:	258a      	moveq	r5, #138	; 0x8a
 8019bb4:	f366 0207 	bfi	r2, r6, #0, #8
 8019bb8:	bf14      	ite	ne
 8019bba:	23d6      	movne	r3, #214	; 0xd6
 8019bbc:	2380      	moveq	r3, #128	; 0x80
 8019bbe:	f365 220f 	bfi	r2, r5, #8, #8
 8019bc2:	f363 4217 	bfi	r2, r3, #16, #8
 8019bc6:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 8019bca:	f7ef fa83 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_border_color(&styles->list_btn, LV_STATE_FOCUSED, theme.color_primary);
 8019bce:	6820      	ldr	r0, [r4, #0]
 8019bd0:	f8d8 200c 	ldr.w	r2, [r8, #12]
 8019bd4:	f240 2139 	movw	r1, #569	; 0x239
 8019bd8:	307c      	adds	r0, #124	; 0x7c
 8019bda:	f7ef fa7b 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_border_width(&styles->list_btn, LV_STATE_DEFAULT, 1);
 8019bde:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
 8019be0:	2201      	movs	r2, #1
 8019be2:	2130      	movs	r1, #48	; 0x30
 8019be4:	307c      	adds	r0, #124	; 0x7c
 8019be6:	f7ef f9a7 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_outline_color(&styles->list_btn, LV_STATE_FOCUSED, theme.color_secondary);
 8019bea:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_COLOR, outline_color, lv_color_t, _color, nonscalar)
 8019bec:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8019bf0:	f240 2149 	movw	r1, #585	; 0x249
 8019bf4:	307c      	adds	r0, #124	; 0x7c
 8019bf6:	f7ef fa6d 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_outline_width(&styles->list_btn, LV_STATE_FOCUSED, OUTLINE_WIDTH);
 8019bfa:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 8019bfe:	6826      	ldr	r6, [r4, #0]
 8019c00:	f013 0520 	ands.w	r5, r3, #32
 8019c04:	f106 067c 	add.w	r6, r6, #124	; 0x7c
 8019c08:	f000 865d 	beq.w	801a8c6 <lv_theme_material_init+0x1b86>
 8019c0c:	2200      	movs	r2, #0
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int, scalar)
 8019c0e:	4630      	mov	r0, r6
 8019c10:	f44f 7110 	mov.w	r1, #576	; 0x240
 8019c14:	f7ef f990 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_outline_pad(&styles->list_btn, LV_STATE_FOCUSED, -BORDER_WIDTH);
 8019c18:	6823      	ldr	r3, [r4, #0]
 8019c1a:	2000      	movs	r0, #0
 8019c1c:	f103 057c 	add.w	r5, r3, #124	; 0x7c
 8019c20:	f7f9 fe5e 	bl	80138e0 <lv_disp_get_dpi>
 8019c24:	2877      	cmp	r0, #119	; 0x77
 8019c26:	f300 8641 	bgt.w	801a8ac <lv_theme_material_init+0x1b6c>
 8019c2a:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_PAD, outline_pad, lv_style_int_t, _int, scalar)
 8019c2e:	4628      	mov	r0, r5
 8019c30:	f240 2141 	movw	r1, #577	; 0x241
 8019c34:	f7ef f980 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_pad_left(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
 8019c38:	2000      	movs	r0, #0
 8019c3a:	6825      	ldr	r5, [r4, #0]
 8019c3c:	f7f9 fe5e 	bl	80138fc <lv_disp_get_size_category>
 8019c40:	2801      	cmp	r0, #1
 8019c42:	f04f 0000 	mov.w	r0, #0
 8019c46:	f105 057c 	add.w	r5, r5, #124	; 0x7c
 8019c4a:	f240 847b 	bls.w	801a544 <lv_theme_material_init+0x1804>
 8019c4e:	f7f9 fe47 	bl	80138e0 <lv_disp_get_dpi>
 8019c52:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8019c56:	0040      	lsls	r0, r0, #1
 8019c58:	28ef      	cmp	r0, #239	; 0xef
 8019c5a:	f301 8103 	bgt.w	801ae64 <lv_theme_material_init+0x2124>
 8019c5e:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
 8019c60:	4628      	mov	r0, r5
 8019c62:	2112      	movs	r1, #18
 8019c64:	f7ef f968 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_pad_right(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
 8019c68:	2000      	movs	r0, #0
 8019c6a:	6825      	ldr	r5, [r4, #0]
 8019c6c:	f7f9 fe46 	bl	80138fc <lv_disp_get_size_category>
 8019c70:	2801      	cmp	r0, #1
 8019c72:	f04f 0000 	mov.w	r0, #0
 8019c76:	f105 057c 	add.w	r5, r5, #124	; 0x7c
 8019c7a:	f240 8456 	bls.w	801a52a <lv_theme_material_init+0x17ea>
 8019c7e:	f7f9 fe2f 	bl	80138e0 <lv_disp_get_dpi>
 8019c82:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8019c86:	0040      	lsls	r0, r0, #1
 8019c88:	28ef      	cmp	r0, #239	; 0xef
 8019c8a:	f301 80fb 	bgt.w	801ae84 <lv_theme_material_init+0x2144>
 8019c8e:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
 8019c90:	4628      	mov	r0, r5
 8019c92:	2113      	movs	r1, #19
 8019c94:	f7ef f950 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_pad_top(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
 8019c98:	2000      	movs	r0, #0
 8019c9a:	6825      	ldr	r5, [r4, #0]
 8019c9c:	f7f9 fe2e 	bl	80138fc <lv_disp_get_size_category>
 8019ca0:	2801      	cmp	r0, #1
 8019ca2:	f04f 0000 	mov.w	r0, #0
 8019ca6:	f105 057c 	add.w	r5, r5, #124	; 0x7c
 8019caa:	f240 84bd 	bls.w	801a628 <lv_theme_material_init+0x18e8>
 8019cae:	f7f9 fe17 	bl	80138e0 <lv_disp_get_dpi>
 8019cb2:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8019cb6:	0040      	lsls	r0, r0, #1
 8019cb8:	28ef      	cmp	r0, #239	; 0xef
 8019cba:	f301 80f3 	bgt.w	801aea4 <lv_theme_material_init+0x2164>
 8019cbe:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
 8019cc0:	4628      	mov	r0, r5
 8019cc2:	2110      	movs	r1, #16
 8019cc4:	f7ef f938 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_pad_bottom(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
 8019cc8:	2000      	movs	r0, #0
 8019cca:	6825      	ldr	r5, [r4, #0]
 8019ccc:	f7f9 fe16 	bl	80138fc <lv_disp_get_size_category>
 8019cd0:	2801      	cmp	r0, #1
 8019cd2:	f04f 0000 	mov.w	r0, #0
 8019cd6:	f105 057c 	add.w	r5, r5, #124	; 0x7c
 8019cda:	f240 8498 	bls.w	801a60e <lv_theme_material_init+0x18ce>
 8019cde:	f7f9 fdff 	bl	80138e0 <lv_disp_get_dpi>
 8019ce2:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8019ce6:	0040      	lsls	r0, r0, #1
 8019ce8:	28ef      	cmp	r0, #239	; 0xef
 8019cea:	f301 80eb 	bgt.w	801aec4 <lv_theme_material_init+0x2184>
 8019cee:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
 8019cf0:	4628      	mov	r0, r5
 8019cf2:	2111      	movs	r1, #17
 8019cf4:	f7ef f920 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_pad_inner(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
 8019cf8:	2000      	movs	r0, #0
 8019cfa:	6825      	ldr	r5, [r4, #0]
 8019cfc:	f7f9 fdfe 	bl	80138fc <lv_disp_get_size_category>
 8019d00:	2801      	cmp	r0, #1
 8019d02:	f04f 0000 	mov.w	r0, #0
 8019d06:	f105 057c 	add.w	r5, r5, #124	; 0x7c
 8019d0a:	f240 84a6 	bls.w	801a65a <lv_theme_material_init+0x191a>
 8019d0e:	f7f9 fde7 	bl	80138e0 <lv_disp_get_dpi>
 8019d12:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8019d16:	0040      	lsls	r0, r0, #1
 8019d18:	28ef      	cmp	r0, #239	; 0xef
 8019d1a:	f301 80e3 	bgt.w	801aee4 <lv_theme_material_init+0x21a4>
 8019d1e:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
 8019d20:	4628      	mov	r0, r5
 8019d22:	2114      	movs	r1, #20
 8019d24:	f7ef f908 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_DEFAULT, - PAD_DEF);
 8019d28:	2000      	movs	r0, #0
 8019d2a:	6825      	ldr	r5, [r4, #0]
 8019d2c:	f7f9 fde6 	bl	80138fc <lv_disp_get_size_category>
 8019d30:	2801      	cmp	r0, #1
 8019d32:	f04f 0000 	mov.w	r0, #0
 8019d36:	f105 057c 	add.w	r5, r5, #124	; 0x7c
 8019d3a:	f240 8482 	bls.w	801a642 <lv_theme_material_init+0x1902>
 8019d3e:	f7f9 fdcf 	bl	80138e0 <lv_disp_get_dpi>
 8019d42:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8019d46:	0040      	lsls	r0, r0, #1
 8019d48:	28ef      	cmp	r0, #239	; 0xef
 8019d4a:	f301 807b 	bgt.w	801ae44 <lv_theme_material_init+0x2104>
 8019d4e:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
 8019d52:	4628      	mov	r0, r5
 8019d54:	2104      	movs	r1, #4
 8019d56:	f7ef f8ef 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_PRESSED, -BORDER_WIDTH);
 8019d5a:	6823      	ldr	r3, [r4, #0]
 8019d5c:	2000      	movs	r0, #0
 8019d5e:	f103 057c 	add.w	r5, r3, #124	; 0x7c
 8019d62:	f7f9 fdbd 	bl	80138e0 <lv_disp_get_dpi>
 8019d66:	2877      	cmp	r0, #119	; 0x77
 8019d68:	f300 8519 	bgt.w	801a79e <lv_theme_material_init+0x1a5e>
 8019d6c:	f04f 32ff 	mov.w	r2, #4294967295
 8019d70:	4628      	mov	r0, r5
 8019d72:	f241 0104 	movw	r1, #4100	; 0x1004
 8019d76:	f7ef f8df 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_CHECKED, -BORDER_WIDTH);
 8019d7a:	6823      	ldr	r3, [r4, #0]
 8019d7c:	2000      	movs	r0, #0
 8019d7e:	f103 057c 	add.w	r5, r3, #124	; 0x7c
 8019d82:	f7f9 fdad 	bl	80138e0 <lv_disp_get_dpi>
 8019d86:	2877      	cmp	r0, #119	; 0x77
 8019d88:	f300 84fc 	bgt.w	801a784 <lv_theme_material_init+0x1a44>
 8019d8c:	f04f 32ff 	mov.w	r2, #4294967295
 8019d90:	4628      	mov	r0, r5
 8019d92:	f44f 7182 	mov.w	r1, #260	; 0x104
 8019d96:	f7ef f8cf 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_DISABLED, -BORDER_WIDTH);
 8019d9a:	6823      	ldr	r3, [r4, #0]
 8019d9c:	2000      	movs	r0, #0
 8019d9e:	f103 057c 	add.w	r5, r3, #124	; 0x7c
 8019da2:	f7f9 fd9d 	bl	80138e0 <lv_disp_get_dpi>
 8019da6:	2877      	cmp	r0, #119	; 0x77
 8019da8:	f300 84df 	bgt.w	801a76a <lv_theme_material_init+0x1a2a>
 8019dac:	f04f 32ff 	mov.w	r2, #4294967295
 8019db0:	4628      	mov	r0, r5
 8019db2:	f242 0104 	movw	r1, #8196	; 0x2004
 8019db6:	f7ef f8bf 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_FOCUSED, - BORDER_WIDTH);
 8019dba:	6823      	ldr	r3, [r4, #0]
 8019dbc:	2000      	movs	r0, #0
 8019dbe:	f103 057c 	add.w	r5, r3, #124	; 0x7c
 8019dc2:	f7f9 fd8d 	bl	80138e0 <lv_disp_get_dpi>
 8019dc6:	2877      	cmp	r0, #119	; 0x77
 8019dc8:	f300 84c2 	bgt.w	801a750 <lv_theme_material_init+0x1a10>
 8019dcc:	f04f 32ff 	mov.w	r2, #4294967295
 8019dd0:	4628      	mov	r0, r5
 8019dd2:	f44f 7101 	mov.w	r1, #516	; 0x204
 8019dd6:	f7ef f8af 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_transition_time(&styles->list_btn, LV_STATE_DEFAULT, TRANSITION_TIME);
 8019dda:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int, scalar)
 8019ddc:	2200      	movs	r2, #0
 8019dde:	21b0      	movs	r1, #176	; 0xb0
 8019de0:	307c      	adds	r0, #124	; 0x7c
 8019de2:	f7ef f8a9 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_transition_prop_6(&styles->list_btn, LV_STATE_DEFAULT, LV_STYLE_BG_COLOR);
 8019de6:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int, scalar)
 8019de8:	2229      	movs	r2, #41	; 0x29
 8019dea:	21b7      	movs	r1, #183	; 0xb7
 8019dec:	307c      	adds	r0, #124	; 0x7c
 8019dee:	f7ef f8a3 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_transition_prop_5(&styles->list_btn, LV_STATE_DEFAULT, LV_STYLE_TRANSFORM_WIDTH);
 8019df2:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_5, transition_prop_5, lv_style_int_t, _int, scalar)
 8019df4:	2204      	movs	r2, #4
 8019df6:	21b6      	movs	r1, #182	; 0xb6
 8019df8:	307c      	adds	r0, #124	; 0x7c
 8019dfa:	f7ef f89d 	bl	8008f38 <_lv_style_set_int>
    style_init_reset(&styles->ddlist_page);
 8019dfe:	6820      	ldr	r0, [r4, #0]
    if(inited) lv_style_reset(style);
 8019e00:	f899 3000 	ldrb.w	r3, [r9]
    style_init_reset(&styles->ddlist_page);
 8019e04:	3058      	adds	r0, #88	; 0x58
    if(inited) lv_style_reset(style);
 8019e06:	2b00      	cmp	r3, #0
 8019e08:	f040 8368 	bne.w	801a4dc <lv_theme_material_init+0x179c>
    else lv_style_init(style);
 8019e0c:	f7ee fd76 	bl	80088fc <lv_style_init>
    lv_style_set_text_line_space(&styles->ddlist_page, LV_STATE_DEFAULT, LV_DPX(20));
 8019e10:	2000      	movs	r0, #0
 8019e12:	6825      	ldr	r5, [r4, #0]
 8019e14:	f7f9 fd64 	bl	80138e0 <lv_disp_get_dpi>
 8019e18:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8019e1c:	3558      	adds	r5, #88	; 0x58
 8019e1e:	0080      	lsls	r0, r0, #2
 8019e20:	28ef      	cmp	r0, #239	; 0xef
 8019e22:	f300 84f7 	bgt.w	801a814 <lv_theme_material_init+0x1ad4>
 8019e26:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
 8019e28:	4628      	mov	r0, r5
 8019e2a:	f248 0181 	movw	r1, #32897	; 0x8081
 8019e2e:	f7ef f883 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_clip_corner(&styles->ddlist_page, LV_STATE_DEFAULT, true);
 8019e32:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
 8019e34:	2201      	movs	r2, #1
 8019e36:	2102      	movs	r1, #2
 8019e38:	3058      	adds	r0, #88	; 0x58
 8019e3a:	f7ef f87d 	bl	8008f38 <_lv_style_set_int>
    style_init_reset(&styles->ddlist_sel);
 8019e3e:	6820      	ldr	r0, [r4, #0]
    if(inited) lv_style_reset(style);
 8019e40:	f899 3000 	ldrb.w	r3, [r9]
    style_init_reset(&styles->ddlist_sel);
 8019e44:	305c      	adds	r0, #92	; 0x5c
    if(inited) lv_style_reset(style);
 8019e46:	2b00      	cmp	r3, #0
 8019e48:	f000 8363 	beq.w	801a512 <lv_theme_material_init+0x17d2>
 8019e4c:	f7ef f86c 	bl	8008f28 <lv_style_reset>
    lv_style_set_bg_opa(&styles->ddlist_sel, LV_STATE_DEFAULT, LV_OPA_COVER);
 8019e50:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
 8019e52:	22ff      	movs	r2, #255	; 0xff
 8019e54:	212c      	movs	r1, #44	; 0x2c
 8019e56:	305c      	adds	r0, #92	; 0x5c
 8019e58:	f7ef fa06 	bl	8009268 <_lv_style_set_opa>
    lv_style_set_bg_color(&styles->ddlist_sel, LV_STATE_DEFAULT, theme.color_primary);
 8019e5c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
 8019e5e:	f8d8 200c 	ldr.w	r2, [r8, #12]
 8019e62:	2129      	movs	r1, #41	; 0x29
 8019e64:	305c      	adds	r0, #92	; 0x5c
 8019e66:	f7ef f935 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_text_color(&styles->ddlist_sel, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex3(0xfff) : lv_color_hex3(0xfff));
 8019e6a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
 8019e6c:	f248 0189 	movw	r1, #32905	; 0x8089
 8019e70:	f04f 32ff 	mov.w	r2, #4294967295
 8019e74:	305c      	adds	r0, #92	; 0x5c
 8019e76:	f7ef f92d 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_bg_color(&styles->ddlist_sel, LV_STATE_PRESSED, COLOR_BG_PR);
 8019e7a:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 8019e7e:	6820      	ldr	r0, [r4, #0]
 8019e80:	0799      	lsls	r1, r3, #30
 8019e82:	f100 005c 	add.w	r0, r0, #92	; 0x5c
 8019e86:	f100 8340 	bmi.w	801a50a <lv_theme_material_init+0x17ca>
 8019e8a:	2349      	movs	r3, #73	; 0x49
 8019e8c:	254f      	movs	r5, #79	; 0x4f
 8019e8e:	2657      	movs	r6, #87	; 0x57
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
 8019e90:	2200      	movs	r2, #0
 8019e92:	f241 0129 	movw	r1, #4137	; 0x1029
 8019e96:	f366 0207 	bfi	r2, r6, #0, #8
 8019e9a:	f365 220f 	bfi	r2, r5, #8, #8
 8019e9e:	f363 4217 	bfi	r2, r3, #16, #8
 8019ea2:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 8019ea6:	f7ef f915 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_text_color(&styles->ddlist_sel, LV_STATE_PRESSED, COLOR_BG_TEXT_PR);
 8019eaa:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 8019eae:	6820      	ldr	r0, [r4, #0]
 8019eb0:	079a      	lsls	r2, r3, #30
 8019eb2:	f100 005c 	add.w	r0, r0, #92	; 0x5c
 8019eb6:	f100 8324 	bmi.w	801a502 <lv_theme_material_init+0x17c2>
 8019eba:	23ff      	movs	r3, #255	; 0xff
 8019ebc:	461d      	mov	r5, r3
 8019ebe:	461e      	mov	r6, r3
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
 8019ec0:	2200      	movs	r2, #0
 8019ec2:	f249 0189 	movw	r1, #37001	; 0x9089
 8019ec6:	f366 0207 	bfi	r2, r6, #0, #8
 8019eca:	f365 220f 	bfi	r2, r5, #8, #8
 8019ece:	f363 4217 	bfi	r2, r3, #16, #8
 8019ed2:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 8019ed6:	f7ef f8fd 	bl	80090d4 <_lv_style_set_color>
    style_init_reset(&styles->roller_bg);
 8019eda:	6820      	ldr	r0, [r4, #0]
    if(inited) lv_style_reset(style);
 8019edc:	f899 3000 	ldrb.w	r3, [r9]
    style_init_reset(&styles->roller_bg);
 8019ee0:	308c      	adds	r0, #140	; 0x8c
    if(inited) lv_style_reset(style);
 8019ee2:	2b00      	cmp	r3, #0
 8019ee4:	f000 830a 	beq.w	801a4fc <lv_theme_material_init+0x17bc>
 8019ee8:	f7ef f81e 	bl	8008f28 <lv_style_reset>
    lv_style_set_text_line_space(&styles->roller_bg, LV_STATE_DEFAULT, LV_DPX(25));
 8019eec:	2000      	movs	r0, #0
 8019eee:	6825      	ldr	r5, [r4, #0]
 8019ef0:	f7f9 fcf6 	bl	80138e0 <lv_disp_get_dpi>
 8019ef4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8019ef8:	358c      	adds	r5, #140	; 0x8c
 8019efa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8019efe:	28ef      	cmp	r0, #239	; 0xef
 8019f00:	f300 8478 	bgt.w	801a7f4 <lv_theme_material_init+0x1ab4>
 8019f04:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
 8019f06:	4628      	mov	r0, r5
 8019f08:	f248 0181 	movw	r1, #32897	; 0x8081
 8019f0c:	f7ef f814 	bl	8008f38 <_lv_style_set_int>
    style_init_reset(&styles->roller_sel);
 8019f10:	6820      	ldr	r0, [r4, #0]
    if(inited) lv_style_reset(style);
 8019f12:	f899 3000 	ldrb.w	r3, [r9]
    style_init_reset(&styles->roller_sel);
 8019f16:	3090      	adds	r0, #144	; 0x90
    if(inited) lv_style_reset(style);
 8019f18:	2b00      	cmp	r3, #0
 8019f1a:	f000 82ec 	beq.w	801a4f6 <lv_theme_material_init+0x17b6>
 8019f1e:	f7ef f803 	bl	8008f28 <lv_style_reset>
    lv_style_set_bg_opa(&styles->roller_sel, LV_STATE_DEFAULT, LV_OPA_COVER);
 8019f22:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
 8019f24:	22ff      	movs	r2, #255	; 0xff
 8019f26:	212c      	movs	r1, #44	; 0x2c
 8019f28:	3090      	adds	r0, #144	; 0x90
 8019f2a:	f7ef f99d 	bl	8009268 <_lv_style_set_opa>
    lv_style_set_bg_color(&styles->roller_sel, LV_STATE_DEFAULT, theme.color_primary);
 8019f2e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
 8019f30:	f8d8 200c 	ldr.w	r2, [r8, #12]
 8019f34:	2129      	movs	r1, #41	; 0x29
 8019f36:	3090      	adds	r0, #144	; 0x90
 8019f38:	f7ef f8cc 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_text_color(&styles->roller_sel, LV_STATE_DEFAULT, LV_COLOR_WHITE);
 8019f3c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
 8019f3e:	f04f 32ff 	mov.w	r2, #4294967295
 8019f42:	f248 0189 	movw	r1, #32905	; 0x8089
 8019f46:	3090      	adds	r0, #144	; 0x90
 8019f48:	f7ef f8c4 	bl	80090d4 <_lv_style_set_color>
    style_init_reset(&styles->table_cell);
 8019f4c:	6820      	ldr	r0, [r4, #0]
    if(inited) lv_style_reset(style);
 8019f4e:	f899 3000 	ldrb.w	r3, [r9]
    style_init_reset(&styles->table_cell);
 8019f52:	30a4      	adds	r0, #164	; 0xa4
    if(inited) lv_style_reset(style);
 8019f54:	2b00      	cmp	r3, #0
 8019f56:	f000 82cb 	beq.w	801a4f0 <lv_theme_material_init+0x17b0>
 8019f5a:	f7ee ffe5 	bl	8008f28 <lv_style_reset>
    lv_style_set_border_color(&styles->table_cell, LV_STATE_DEFAULT, COLOR_BG_BORDER);
 8019f5e:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 8019f62:	2200      	movs	r2, #0
 8019f64:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
 8019f66:	2139      	movs	r1, #57	; 0x39
 8019f68:	f003 0302 	and.w	r3, r3, #2
 8019f6c:	30a4      	adds	r0, #164	; 0xa4
 8019f6e:	4293      	cmp	r3, r2
 8019f70:	bf15      	itete	ne
 8019f72:	23e3      	movne	r3, #227	; 0xe3
 8019f74:	2397      	moveq	r3, #151	; 0x97
 8019f76:	25dd      	movne	r5, #221	; 0xdd
 8019f78:	258a      	moveq	r5, #138	; 0x8a
 8019f7a:	f363 0207 	bfi	r2, r3, #0, #8
 8019f7e:	bf14      	ite	ne
 8019f80:	23d6      	movne	r3, #214	; 0xd6
 8019f82:	2380      	moveq	r3, #128	; 0x80
 8019f84:	f365 220f 	bfi	r2, r5, #8, #8
 8019f88:	f363 4217 	bfi	r2, r3, #16, #8
 8019f8c:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 8019f90:	f7ef f8a0 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_border_width(&styles->table_cell, LV_STATE_DEFAULT, 1);
 8019f94:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
 8019f96:	2201      	movs	r2, #1
 8019f98:	2130      	movs	r1, #48	; 0x30
 8019f9a:	30a4      	adds	r0, #164	; 0xa4
 8019f9c:	f7ee ffcc 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_border_side(&styles->table_cell, LV_STATE_DEFAULT, LV_BORDER_SIDE_TOP | LV_BORDER_SIDE_BOTTOM);
 8019fa0:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
 8019fa2:	2203      	movs	r2, #3
 8019fa4:	2131      	movs	r1, #49	; 0x31
 8019fa6:	30a4      	adds	r0, #164	; 0xa4
 8019fa8:	f7ee ffc6 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_pad_left(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
 8019fac:	2000      	movs	r0, #0
 8019fae:	6825      	ldr	r5, [r4, #0]
 8019fb0:	f7f9 fca4 	bl	80138fc <lv_disp_get_size_category>
 8019fb4:	2801      	cmp	r0, #1
 8019fb6:	f04f 0000 	mov.w	r0, #0
 8019fba:	f105 05a4 	add.w	r5, r5, #164	; 0xa4
 8019fbe:	f240 8310 	bls.w	801a5e2 <lv_theme_material_init+0x18a2>
 8019fc2:	f7f9 fc8d 	bl	80138e0 <lv_disp_get_dpi>
 8019fc6:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8019fca:	0040      	lsls	r0, r0, #1
 8019fcc:	28ef      	cmp	r0, #239	; 0xef
 8019fce:	f300 87b1 	bgt.w	801af34 <lv_theme_material_init+0x21f4>
 8019fd2:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
 8019fd4:	4628      	mov	r0, r5
 8019fd6:	2112      	movs	r1, #18
 8019fd8:	f7ee ffae 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_pad_right(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
 8019fdc:	2000      	movs	r0, #0
 8019fde:	6825      	ldr	r5, [r4, #0]
 8019fe0:	f7f9 fc8c 	bl	80138fc <lv_disp_get_size_category>
 8019fe4:	2801      	cmp	r0, #1
 8019fe6:	f04f 0000 	mov.w	r0, #0
 8019fea:	f105 05a4 	add.w	r5, r5, #164	; 0xa4
 8019fee:	f240 82e2 	bls.w	801a5b6 <lv_theme_material_init+0x1876>
 8019ff2:	f7f9 fc75 	bl	80138e0 <lv_disp_get_dpi>
 8019ff6:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8019ffa:	0040      	lsls	r0, r0, #1
 8019ffc:	28ef      	cmp	r0, #239	; 0xef
 8019ffe:	f300 8793 	bgt.w	801af28 <lv_theme_material_init+0x21e8>
 801a002:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
 801a004:	4628      	mov	r0, r5
 801a006:	2113      	movs	r1, #19
 801a008:	f7ee ff96 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_pad_top(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
 801a00c:	2000      	movs	r0, #0
 801a00e:	6825      	ldr	r5, [r4, #0]
 801a010:	f7f9 fc74 	bl	80138fc <lv_disp_get_size_category>
 801a014:	2801      	cmp	r0, #1
 801a016:	f04f 0000 	mov.w	r0, #0
 801a01a:	f105 05a4 	add.w	r5, r5, #164	; 0xa4
 801a01e:	f240 82b4 	bls.w	801a58a <lv_theme_material_init+0x184a>
 801a022:	f7f9 fc5d 	bl	80138e0 <lv_disp_get_dpi>
 801a026:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 801a02a:	0040      	lsls	r0, r0, #1
 801a02c:	28ef      	cmp	r0, #239	; 0xef
 801a02e:	f300 8799 	bgt.w	801af64 <lv_theme_material_init+0x2224>
 801a032:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
 801a034:	4628      	mov	r0, r5
 801a036:	2110      	movs	r1, #16
 801a038:	f7ee ff7e 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_pad_bottom(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
 801a03c:	2000      	movs	r0, #0
 801a03e:	6825      	ldr	r5, [r4, #0]
 801a040:	f7f9 fc5c 	bl	80138fc <lv_disp_get_size_category>
 801a044:	2801      	cmp	r0, #1
 801a046:	f04f 0000 	mov.w	r0, #0
 801a04a:	f105 05a4 	add.w	r5, r5, #164	; 0xa4
 801a04e:	f240 8286 	bls.w	801a55e <lv_theme_material_init+0x181e>
 801a052:	f7f9 fc45 	bl	80138e0 <lv_disp_get_dpi>
 801a056:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 801a05a:	0040      	lsls	r0, r0, #1
 801a05c:	28ef      	cmp	r0, #239	; 0xef
 801a05e:	f300 877b 	bgt.w	801af58 <lv_theme_material_init+0x2218>
 801a062:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
 801a064:	4628      	mov	r0, r5
 801a066:	2111      	movs	r1, #17
 801a068:	f7ee ff66 	bl	8008f38 <_lv_style_set_int>
    style_init_reset(&styles->tabview_btns_bg);
 801a06c:	6820      	ldr	r0, [r4, #0]
    if(inited) lv_style_reset(style);
 801a06e:	f899 3000 	ldrb.w	r3, [r9]
    style_init_reset(&styles->tabview_btns_bg);
 801a072:	30ac      	adds	r0, #172	; 0xac
    if(inited) lv_style_reset(style);
 801a074:	2b00      	cmp	r3, #0
 801a076:	f000 8238 	beq.w	801a4ea <lv_theme_material_init+0x17aa>
 801a07a:	f7ee ff55 	bl	8008f28 <lv_style_reset>
    lv_style_set_bg_opa(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_OPA_COVER);
 801a07e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
 801a080:	22ff      	movs	r2, #255	; 0xff
 801a082:	212c      	movs	r1, #44	; 0x2c
 801a084:	30ac      	adds	r0, #172	; 0xac
 801a086:	f7ef f8ef 	bl	8009268 <_lv_style_set_opa>
    lv_style_set_bg_color(&styles->tabview_btns_bg, LV_STATE_DEFAULT, COLOR_BG);
 801a08a:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 801a08e:	6820      	ldr	r0, [r4, #0]
 801a090:	079b      	lsls	r3, r3, #30
 801a092:	f100 00ac 	add.w	r0, r0, #172	; 0xac
 801a096:	f100 8224 	bmi.w	801a4e2 <lv_theme_material_init+0x17a2>
 801a09a:	2358      	movs	r3, #88	; 0x58
 801a09c:	2562      	movs	r5, #98	; 0x62
 801a09e:	2673      	movs	r6, #115	; 0x73
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
 801a0a0:	2200      	movs	r2, #0
 801a0a2:	2129      	movs	r1, #41	; 0x29
 801a0a4:	f366 0207 	bfi	r2, r6, #0, #8
 801a0a8:	f365 220f 	bfi	r2, r5, #8, #8
 801a0ac:	f363 4217 	bfi	r2, r3, #16, #8
 801a0b0:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 801a0b4:	f7ef f80e 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_text_color(&styles->tabview_btns_bg, LV_STATE_DEFAULT, COLOR_SCR_TEXT);
 801a0b8:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 801a0bc:	2200      	movs	r2, #0
 801a0be:	6820      	ldr	r0, [r4, #0]
 801a0c0:	f003 0302 	and.w	r3, r3, #2
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
 801a0c4:	f248 0189 	movw	r1, #32905	; 0x8089
 801a0c8:	30ac      	adds	r0, #172	; 0xac
 801a0ca:	4293      	cmp	r3, r2
 801a0cc:	bf15      	itete	ne
 801a0ce:	2642      	movne	r6, #66	; 0x42
 801a0d0:	26ec      	moveq	r6, #236	; 0xec
 801a0d2:	253e      	movne	r5, #62	; 0x3e
 801a0d4:	25e9      	moveq	r5, #233	; 0xe9
 801a0d6:	f366 0207 	bfi	r2, r6, #0, #8
 801a0da:	bf14      	ite	ne
 801a0dc:	233b      	movne	r3, #59	; 0x3b
 801a0de:	23e7      	moveq	r3, #231	; 0xe7
 801a0e0:	f365 220f 	bfi	r2, r5, #8, #8
 801a0e4:	f363 4217 	bfi	r2, r3, #16, #8
 801a0e8:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 801a0ec:	f7ee fff2 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_image_recolor(&styles->tabview_btns_bg, LV_STATE_DEFAULT, lv_color_hex(0x979a9f));
 801a0f0:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
 801a0f2:	4ae9      	ldr	r2, [pc, #932]	; (801a498 <lv_theme_material_init+0x1758>)
 801a0f4:	f248 01a9 	movw	r1, #32937	; 0x80a9
 801a0f8:	30ac      	adds	r0, #172	; 0xac
 801a0fa:	f7ee ffeb 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_pad_top(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(7));
 801a0fe:	2000      	movs	r0, #0
 801a100:	6825      	ldr	r5, [r4, #0]
 801a102:	f7f9 fbed 	bl	80138e0 <lv_disp_get_dpi>
 801a106:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 801a10a:	35ac      	adds	r5, #172	; 0xac
 801a10c:	28ef      	cmp	r0, #239	; 0xef
 801a10e:	f300 83be 	bgt.w	801a88e <lv_theme_material_init+0x1b4e>
 801a112:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
 801a114:	4628      	mov	r0, r5
 801a116:	2110      	movs	r1, #16
 801a118:	f7ee ff0e 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_pad_left(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(7));
 801a11c:	2000      	movs	r0, #0
 801a11e:	6825      	ldr	r5, [r4, #0]
 801a120:	f7f9 fbde 	bl	80138e0 <lv_disp_get_dpi>
 801a124:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 801a128:	35ac      	adds	r5, #172	; 0xac
 801a12a:	28ef      	cmp	r0, #239	; 0xef
 801a12c:	f300 83a0 	bgt.w	801a870 <lv_theme_material_init+0x1b30>
 801a130:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
 801a132:	4628      	mov	r0, r5
 801a134:	2112      	movs	r1, #18
 801a136:	f7ee feff 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_pad_right(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(7));
 801a13a:	2000      	movs	r0, #0
 801a13c:	6825      	ldr	r5, [r4, #0]
 801a13e:	f7f9 fbcf 	bl	80138e0 <lv_disp_get_dpi>
 801a142:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 801a146:	35ac      	adds	r5, #172	; 0xac
 801a148:	28ef      	cmp	r0, #239	; 0xef
 801a14a:	f300 8335 	bgt.w	801a7b8 <lv_theme_material_init+0x1a78>
 801a14e:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
 801a150:	4628      	mov	r0, r5
 801a152:	2113      	movs	r1, #19
 801a154:	f7ee fef0 	bl	8008f38 <_lv_style_set_int>
    style_init_reset(&styles->tabview_btns);
 801a158:	6820      	ldr	r0, [r4, #0]
    if(inited) lv_style_reset(style);
 801a15a:	f899 3000 	ldrb.w	r3, [r9]
    style_init_reset(&styles->tabview_btns);
 801a15e:	30a8      	adds	r0, #168	; 0xa8
    if(inited) lv_style_reset(style);
 801a160:	2b00      	cmp	r3, #0
 801a162:	f000 81df 	beq.w	801a524 <lv_theme_material_init+0x17e4>
 801a166:	f7ee fedf 	bl	8008f28 <lv_style_reset>
    lv_style_set_bg_opa(&styles->tabview_btns, LV_STATE_PRESSED, LV_OPA_50);
 801a16a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
 801a16c:	227f      	movs	r2, #127	; 0x7f
 801a16e:	f241 012c 	movw	r1, #4140	; 0x102c
 801a172:	30a8      	adds	r0, #168	; 0xa8
 801a174:	f7ef f878 	bl	8009268 <_lv_style_set_opa>
    lv_style_set_bg_color(&styles->tabview_btns, LV_STATE_PRESSED, lv_color_hex3(0x888));
 801a178:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
 801a17a:	4ac8      	ldr	r2, [pc, #800]	; (801a49c <lv_theme_material_init+0x175c>)
 801a17c:	f241 0129 	movw	r1, #4137	; 0x1029
 801a180:	30a8      	adds	r0, #168	; 0xa8
 801a182:	f7ee ffa7 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_text_color(&styles->tabview_btns, LV_STATE_CHECKED, COLOR_SCR_TEXT);
 801a186:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 801a18a:	2200      	movs	r2, #0
 801a18c:	6820      	ldr	r0, [r4, #0]
 801a18e:	f003 0302 	and.w	r3, r3, #2
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
 801a192:	f248 1189 	movw	r1, #33161	; 0x8189
 801a196:	30a8      	adds	r0, #168	; 0xa8
 801a198:	4293      	cmp	r3, r2
 801a19a:	bf15      	itete	ne
 801a19c:	2342      	movne	r3, #66	; 0x42
 801a19e:	23ec      	moveq	r3, #236	; 0xec
 801a1a0:	253e      	movne	r5, #62	; 0x3e
 801a1a2:	25e9      	moveq	r5, #233	; 0xe9
 801a1a4:	f363 0207 	bfi	r2, r3, #0, #8
 801a1a8:	bf14      	ite	ne
 801a1aa:	233b      	movne	r3, #59	; 0x3b
 801a1ac:	23e7      	moveq	r3, #231	; 0xe7
 801a1ae:	f365 220f 	bfi	r2, r5, #8, #8
 801a1b2:	f363 4217 	bfi	r2, r3, #16, #8
 801a1b6:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 801a1ba:	f7ee ff8b 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_pad_top(&styles->tabview_btns, LV_STATE_DEFAULT, LV_DPX(20));
 801a1be:	2000      	movs	r0, #0
 801a1c0:	6825      	ldr	r5, [r4, #0]
 801a1c2:	f7f9 fb8d 	bl	80138e0 <lv_disp_get_dpi>
 801a1c6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801a1ca:	35a8      	adds	r5, #168	; 0xa8
 801a1cc:	0080      	lsls	r0, r0, #2
 801a1ce:	28ef      	cmp	r0, #239	; 0xef
 801a1d0:	f300 833f 	bgt.w	801a852 <lv_theme_material_init+0x1b12>
 801a1d4:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
 801a1d6:	4628      	mov	r0, r5
 801a1d8:	2110      	movs	r1, #16
 801a1da:	f7ee fead 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_pad_bottom(&styles->tabview_btns, LV_STATE_DEFAULT, LV_DPX(20));
 801a1de:	2000      	movs	r0, #0
 801a1e0:	6825      	ldr	r5, [r4, #0]
 801a1e2:	f7f9 fb7d 	bl	80138e0 <lv_disp_get_dpi>
 801a1e6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801a1ea:	35a8      	adds	r5, #168	; 0xa8
 801a1ec:	0080      	lsls	r0, r0, #2
 801a1ee:	28ef      	cmp	r0, #239	; 0xef
 801a1f0:	f300 8320 	bgt.w	801a834 <lv_theme_material_init+0x1af4>
 801a1f4:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
 801a1f6:	4628      	mov	r0, r5
 801a1f8:	2111      	movs	r1, #17
 801a1fa:	f7ee fe9d 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_text_color(&styles->tabview_btns, LV_STATE_FOCUSED, theme.color_primary);
 801a1fe:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
 801a200:	f8d8 200c 	ldr.w	r2, [r8, #12]
 801a204:	f248 2189 	movw	r1, #33417	; 0x8289
 801a208:	30a8      	adds	r0, #168	; 0xa8
 801a20a:	f7ee ff63 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_text_color(&styles->tabview_btns, LV_STATE_EDITED, theme.color_secondary);
 801a20e:	6820      	ldr	r0, [r4, #0]
 801a210:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801a214:	f248 4189 	movw	r1, #33929	; 0x8489
 801a218:	30a8      	adds	r0, #168	; 0xa8
 801a21a:	f7ee ff5b 	bl	80090d4 <_lv_style_set_color>
    style_init_reset(&styles->tabview_indic);
 801a21e:	6820      	ldr	r0, [r4, #0]
    if(inited) lv_style_reset(style);
 801a220:	f899 3000 	ldrb.w	r3, [r9]
    style_init_reset(&styles->tabview_indic);
 801a224:	30b0      	adds	r0, #176	; 0xb0
    if(inited) lv_style_reset(style);
 801a226:	2b00      	cmp	r3, #0
 801a228:	f000 8179 	beq.w	801a51e <lv_theme_material_init+0x17de>
 801a22c:	f7ee fe7c 	bl	8008f28 <lv_style_reset>
    lv_style_set_bg_opa(&styles->tabview_indic, LV_STATE_DEFAULT, LV_OPA_COVER);
 801a230:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
 801a232:	22ff      	movs	r2, #255	; 0xff
 801a234:	212c      	movs	r1, #44	; 0x2c
 801a236:	30b0      	adds	r0, #176	; 0xb0
 801a238:	f7ef f816 	bl	8009268 <_lv_style_set_opa>
    lv_style_set_bg_color(&styles->tabview_indic, LV_STATE_DEFAULT, theme.color_primary);
 801a23c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
 801a23e:	f8d8 200c 	ldr.w	r2, [r8, #12]
 801a242:	2129      	movs	r1, #41	; 0x29
 801a244:	30b0      	adds	r0, #176	; 0xb0
 801a246:	f7ee ff45 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_bg_color(&styles->tabview_indic, LV_STATE_EDITED, theme.color_secondary);
 801a24a:	6820      	ldr	r0, [r4, #0]
 801a24c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801a250:	f240 4129 	movw	r1, #1065	; 0x429
 801a254:	30b0      	adds	r0, #176	; 0xb0
 801a256:	f7ee ff3d 	bl	80090d4 <_lv_style_set_color>
    lv_style_set_size(&styles->tabview_indic, LV_STATE_DEFAULT, LV_DPX(5));
 801a25a:	2000      	movs	r0, #0
 801a25c:	6825      	ldr	r5, [r4, #0]
 801a25e:	f7f9 fb3f 	bl	80138e0 <lv_disp_get_dpi>
 801a262:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801a266:	35b0      	adds	r5, #176	; 0xb0
 801a268:	28ef      	cmp	r0, #239	; 0xef
 801a26a:	f300 82b4 	bgt.w	801a7d6 <lv_theme_material_init+0x1a96>
 801a26e:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int, scalar)
 801a270:	4628      	mov	r0, r5
 801a272:	2103      	movs	r1, #3
 801a274:	f7ee fe60 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_radius(&styles->tabview_indic, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
 801a278:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
 801a27a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801a27e:	2101      	movs	r1, #1
 801a280:	30b0      	adds	r0, #176	; 0xb0
 801a282:	f7ee fe59 	bl	8008f38 <_lv_style_set_int>
    style_init_reset(&styles->tabview_page_scrl);
 801a286:	6820      	ldr	r0, [r4, #0]
    if(inited) lv_style_reset(style);
 801a288:	f899 3000 	ldrb.w	r3, [r9]
    style_init_reset(&styles->tabview_page_scrl);
 801a28c:	30b4      	adds	r0, #180	; 0xb4
    if(inited) lv_style_reset(style);
 801a28e:	2b00      	cmp	r3, #0
 801a290:	f000 8142 	beq.w	801a518 <lv_theme_material_init+0x17d8>
 801a294:	f7ee fe48 	bl	8008f28 <lv_style_reset>
    lv_style_set_pad_top(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
 801a298:	2000      	movs	r0, #0
 801a29a:	6825      	ldr	r5, [r4, #0]
 801a29c:	f7f9 fb2e 	bl	80138fc <lv_disp_get_size_category>
 801a2a0:	2801      	cmp	r0, #1
 801a2a2:	f105 05b4 	add.w	r5, r5, #180	; 0xb4
 801a2a6:	f04f 0000 	mov.w	r0, #0
 801a2aa:	f240 81e3 	bls.w	801a674 <lv_theme_material_init+0x1934>
 801a2ae:	f7f9 fb17 	bl	80138e0 <lv_disp_get_dpi>
 801a2b2:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 801a2b6:	0040      	lsls	r0, r0, #1
 801a2b8:	28ef      	cmp	r0, #239	; 0xef
 801a2ba:	f300 8647 	bgt.w	801af4c <lv_theme_material_init+0x220c>
 801a2be:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
 801a2c0:	4628      	mov	r0, r5
 801a2c2:	2110      	movs	r1, #16
 801a2c4:	f7ee fe38 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_pad_bottom(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
 801a2c8:	2000      	movs	r0, #0
 801a2ca:	6825      	ldr	r5, [r4, #0]
 801a2cc:	f7f9 fb16 	bl	80138fc <lv_disp_get_size_category>
 801a2d0:	2801      	cmp	r0, #1
 801a2d2:	f04f 0000 	mov.w	r0, #0
 801a2d6:	f105 05b4 	add.w	r5, r5, #180	; 0xb4
 801a2da:	f240 8223 	bls.w	801a724 <lv_theme_material_init+0x19e4>
 801a2de:	f7f9 faff 	bl	80138e0 <lv_disp_get_dpi>
 801a2e2:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 801a2e6:	0040      	lsls	r0, r0, #1
 801a2e8:	28ef      	cmp	r0, #239	; 0xef
 801a2ea:	f300 8629 	bgt.w	801af40 <lv_theme_material_init+0x2200>
 801a2ee:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
 801a2f0:	4628      	mov	r0, r5
 801a2f2:	2111      	movs	r1, #17
 801a2f4:	f7ee fe20 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_pad_left(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
 801a2f8:	2000      	movs	r0, #0
 801a2fa:	6825      	ldr	r5, [r4, #0]
 801a2fc:	f7f9 fafe 	bl	80138fc <lv_disp_get_size_category>
 801a300:	2801      	cmp	r0, #1
 801a302:	f04f 0000 	mov.w	r0, #0
 801a306:	f105 05b4 	add.w	r5, r5, #180	; 0xb4
 801a30a:	f240 81f5 	bls.w	801a6f8 <lv_theme_material_init+0x19b8>
 801a30e:	f7f9 fae7 	bl	80138e0 <lv_disp_get_dpi>
 801a312:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 801a316:	0040      	lsls	r0, r0, #1
 801a318:	28ef      	cmp	r0, #239	; 0xef
 801a31a:	f300 85ff 	bgt.w	801af1c <lv_theme_material_init+0x21dc>
 801a31e:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
 801a320:	4628      	mov	r0, r5
 801a322:	2112      	movs	r1, #18
 801a324:	f7ee fe08 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_pad_right(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
 801a328:	2000      	movs	r0, #0
 801a32a:	6825      	ldr	r5, [r4, #0]
 801a32c:	f7f9 fae6 	bl	80138fc <lv_disp_get_size_category>
 801a330:	2801      	cmp	r0, #1
 801a332:	f04f 0000 	mov.w	r0, #0
 801a336:	f105 05b4 	add.w	r5, r5, #180	; 0xb4
 801a33a:	f240 81c7 	bls.w	801a6cc <lv_theme_material_init+0x198c>
 801a33e:	f7f9 facf 	bl	80138e0 <lv_disp_get_dpi>
 801a342:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 801a346:	0040      	lsls	r0, r0, #1
 801a348:	28ef      	cmp	r0, #239	; 0xef
 801a34a:	f300 85e1 	bgt.w	801af10 <lv_theme_material_init+0x21d0>
 801a34e:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
 801a350:	4628      	mov	r0, r5
 801a352:	2113      	movs	r1, #19
 801a354:	f7ee fdf0 	bl	8008f38 <_lv_style_set_int>
    lv_style_set_pad_inner(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
 801a358:	2000      	movs	r0, #0
 801a35a:	6824      	ldr	r4, [r4, #0]
 801a35c:	f7f9 face 	bl	80138fc <lv_disp_get_size_category>
 801a360:	2801      	cmp	r0, #1
 801a362:	f04f 0000 	mov.w	r0, #0
 801a366:	f104 04b4 	add.w	r4, r4, #180	; 0xb4
 801a36a:	f240 8199 	bls.w	801a6a0 <lv_theme_material_init+0x1960>
 801a36e:	f7f9 fab7 	bl	80138e0 <lv_disp_get_dpi>
 801a372:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 801a376:	0040      	lsls	r0, r0, #1
 801a378:	28ef      	cmp	r0, #239	; 0xef
 801a37a:	f300 85c3 	bgt.w	801af04 <lv_theme_material_init+0x21c4>
 801a37e:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
 801a380:	4620      	mov	r0, r4
 801a382:	2114      	movs	r1, #20
 801a384:	f7ee fdd8 	bl	8008f38 <_lv_style_set_int>
    theme.apply_xcb = NULL;
 801a388:	2000      	movs	r0, #0
    theme.apply_cb = theme_apply;
 801a38a:	4a45      	ldr	r2, [pc, #276]	; (801a4a0 <lv_theme_material_init+0x1760>)
    inited = true;
 801a38c:	2301      	movs	r3, #1
    theme.apply_cb = theme_apply;
 801a38e:	e9c8 2000 	strd	r2, r0, [r8]
    inited = true;
 801a392:	f889 3000 	strb.w	r3, [r9]
    lv_obj_report_style_mod(NULL);
 801a396:	f7eb fed5 	bl	8006144 <lv_obj_report_style_mod>
}
 801a39a:	4842      	ldr	r0, [pc, #264]	; (801a4a4 <lv_theme_material_init+0x1764>)
 801a39c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a3a0:	233b      	movs	r3, #59	; 0x3b
 801a3a2:	253e      	movs	r5, #62	; 0x3e
 801a3a4:	2642      	movs	r6, #66	; 0x42
 801a3a6:	f7ff bbc5 	b.w	8019b34 <lv_theme_material_init+0xdf4>
 801a3aa:	233b      	movs	r3, #59	; 0x3b
 801a3ac:	253e      	movs	r5, #62	; 0x3e
 801a3ae:	2642      	movs	r6, #66	; 0x42
 801a3b0:	f7ff bb86 	b.w	8019ac0 <lv_theme_material_init+0xd80>
 801a3b4:	23ff      	movs	r3, #255	; 0xff
 801a3b6:	461d      	mov	r5, r3
 801a3b8:	461e      	mov	r6, r3
 801a3ba:	f7ff bb53 	b.w	8019a64 <lv_theme_material_init+0xd24>
 801a3be:	23ee      	movs	r3, #238	; 0xee
 801a3c0:	461d      	mov	r5, r3
 801a3c2:	461e      	mov	r6, r3
 801a3c4:	f7ff bb36 	b.w	8019a34 <lv_theme_material_init+0xcf4>
 801a3c8:	23ff      	movs	r3, #255	; 0xff
 801a3ca:	461d      	mov	r5, r3
 801a3cc:	461e      	mov	r6, r3
 801a3ce:	f7ff bb1a 	b.w	8019a06 <lv_theme_material_init+0xcc6>
    else lv_style_init(style);
 801a3d2:	f7ee fa93 	bl	80088fc <lv_style_init>
 801a3d6:	f7ff bb05 	b.w	80199e4 <lv_theme_material_init+0xca4>
 801a3da:	f7ee fa8f 	bl	80088fc <lv_style_init>
 801a3de:	f7ff bad4 	b.w	801998a <lv_theme_material_init+0xc4a>
 801a3e2:	f7ee fa8b 	bl	80088fc <lv_style_init>
 801a3e6:	f7ff ba8e 	b.w	8019906 <lv_theme_material_init+0xbc6>
 801a3ea:	23aa      	movs	r3, #170	; 0xaa
 801a3ec:	461d      	mov	r5, r3
 801a3ee:	461e      	mov	r6, r3
 801a3f0:	f7ff ba73 	b.w	80198da <lv_theme_material_init+0xb9a>
 801a3f4:	f7ee fa82 	bl	80088fc <lv_style_init>
 801a3f8:	f7ff ba64 	b.w	80198c4 <lv_theme_material_init+0xb84>
 801a3fc:	f7ee fa7e 	bl	80088fc <lv_style_init>
 801a400:	f7ff ba1a 	b.w	8019838 <lv_theme_material_init+0xaf8>
 801a404:	f7ee fa7a 	bl	80088fc <lv_style_init>
 801a408:	f7ff ba01 	b.w	801980e <lv_theme_material_init+0xace>
 801a40c:	f7ee fa76 	bl	80088fc <lv_style_init>
 801a410:	f7ff b99f 	b.w	8019752 <lv_theme_material_init+0xa12>
 801a414:	f7ee fa72 	bl	80088fc <lv_style_init>
 801a418:	f7ff b969 	b.w	80196ee <lv_theme_material_init+0x9ae>
 801a41c:	233b      	movs	r3, #59	; 0x3b
 801a41e:	253e      	movs	r5, #62	; 0x3e
 801a420:	2642      	movs	r6, #66	; 0x42
 801a422:	f7ff b8f9 	b.w	8019618 <lv_theme_material_init+0x8d8>
 801a426:	f7ee fa69 	bl	80088fc <lv_style_init>
 801a42a:	f7ff b8d0 	b.w	80195ce <lv_theme_material_init+0x88e>
 801a42e:	f7ee fa65 	bl	80088fc <lv_style_init>
 801a432:	f7ff b884 	b.w	801953e <lv_theme_material_init+0x7fe>
 801a436:	f7ee fa61 	bl	80088fc <lv_style_init>
 801a43a:	f7ff b82e 	b.w	801949a <lv_theme_material_init+0x75a>
 801a43e:	23aa      	movs	r3, #170	; 0xaa
 801a440:	461d      	mov	r5, r3
 801a442:	461e      	mov	r6, r3
 801a444:	f7ff b813 	b.w	801946e <lv_theme_material_init+0x72e>
 801a448:	f7ee fa58 	bl	80088fc <lv_style_init>
 801a44c:	f7ff b804 	b.w	8019458 <lv_theme_material_init+0x718>
 801a450:	f7ee fa54 	bl	80088fc <lv_style_init>
 801a454:	f7fe bfd8 	b.w	8019408 <lv_theme_material_init+0x6c8>
 801a458:	f7ee fa50 	bl	80088fc <lv_style_init>
 801a45c:	f7fe bf99 	b.w	8019392 <lv_theme_material_init+0x652>
 801a460:	f7ee fa4c 	bl	80088fc <lv_style_init>
 801a464:	f7fe bf6e 	b.w	8019344 <lv_theme_material_init+0x604>
 801a468:	f7ee fa48 	bl	80088fc <lv_style_init>
 801a46c:	f7fe bed4 	b.w	8019218 <lv_theme_material_init+0x4d8>
 801a470:	f7ee fa44 	bl	80088fc <lv_style_init>
 801a474:	f7fe be77 	b.w	8019166 <lv_theme_material_init+0x426>
 801a478:	f7ee fa40 	bl	80088fc <lv_style_init>
 801a47c:	f7fe be2a 	b.w	80190d4 <lv_theme_material_init+0x394>
 801a480:	2331      	movs	r3, #49	; 0x31
 801a482:	2540      	movs	r5, #64	; 0x40
 801a484:	264f      	movs	r6, #79	; 0x4f
 801a486:	f7fe bdc4 	b.w	8019012 <lv_theme_material_init+0x2d2>
    lv_style_set_bg_color(&styles->slider_knob, LV_STATE_DEFAULT, IS_LIGHT ? theme.color_primary : LV_COLOR_WHITE);
 801a48a:	23ff      	movs	r3, #255	; 0xff
 801a48c:	461d      	mov	r5, r3
 801a48e:	461e      	mov	r6, r3
 801a490:	461f      	mov	r7, r3
 801a492:	f7fe bda7 	b.w	8018fe4 <lv_theme_material_init+0x2a4>
 801a496:	bf00      	nop
 801a498:	ff979a9f 	.word	0xff979a9f
 801a49c:	ff888888 	.word	0xff888888
 801a4a0:	08016531 	.word	0x08016531
 801a4a4:	200201ac 	.word	0x200201ac
    else lv_style_init(style);
 801a4a8:	f7ee fa28 	bl	80088fc <lv_style_init>
 801a4ac:	f7fe bd84 	b.w	8018fb8 <lv_theme_material_init+0x278>
 801a4b0:	f7ee fa24 	bl	80088fc <lv_style_init>
 801a4b4:	f7fe bd25 	b.w	8018f02 <lv_theme_material_init+0x1c2>
 801a4b8:	2341      	movs	r3, #65	; 0x41
 801a4ba:	2540      	movs	r5, #64	; 0x40
 801a4bc:	264f      	movs	r6, #79	; 0x4f
 801a4be:	f7fe bd0b 	b.w	8018ed8 <lv_theme_material_init+0x198>
 801a4c2:	f7ee fa1b 	bl	80088fc <lv_style_init>
 801a4c6:	f7fe bce1 	b.w	8018e8c <lv_theme_material_init+0x14c>
 801a4ca:	2331      	movs	r3, #49	; 0x31
 801a4cc:	2540      	movs	r5, #64	; 0x40
 801a4ce:	264f      	movs	r6, #79	; 0x4f
 801a4d0:	f7fe bc91 	b.w	8018df6 <lv_theme_material_init+0xb6>
 801a4d4:	f7ee fa12 	bl	80088fc <lv_style_init>
 801a4d8:	f7fe bc5a 	b.w	8018d90 <lv_theme_material_init+0x50>
    if(inited) lv_style_reset(style);
 801a4dc:	f7ee fd24 	bl	8008f28 <lv_style_reset>
 801a4e0:	e496      	b.n	8019e10 <lv_theme_material_init+0x10d0>
 801a4e2:	23ff      	movs	r3, #255	; 0xff
 801a4e4:	461d      	mov	r5, r3
 801a4e6:	461e      	mov	r6, r3
 801a4e8:	e5da      	b.n	801a0a0 <lv_theme_material_init+0x1360>
    else lv_style_init(style);
 801a4ea:	f7ee fa07 	bl	80088fc <lv_style_init>
 801a4ee:	e5c6      	b.n	801a07e <lv_theme_material_init+0x133e>
 801a4f0:	f7ee fa04 	bl	80088fc <lv_style_init>
 801a4f4:	e533      	b.n	8019f5e <lv_theme_material_init+0x121e>
 801a4f6:	f7ee fa01 	bl	80088fc <lv_style_init>
 801a4fa:	e512      	b.n	8019f22 <lv_theme_material_init+0x11e2>
 801a4fc:	f7ee f9fe 	bl	80088fc <lv_style_init>
 801a500:	e4f4      	b.n	8019eec <lv_theme_material_init+0x11ac>
 801a502:	233b      	movs	r3, #59	; 0x3b
 801a504:	253e      	movs	r5, #62	; 0x3e
 801a506:	2642      	movs	r6, #66	; 0x42
 801a508:	e4da      	b.n	8019ec0 <lv_theme_material_init+0x1180>
 801a50a:	23ee      	movs	r3, #238	; 0xee
 801a50c:	461d      	mov	r5, r3
 801a50e:	461e      	mov	r6, r3
 801a510:	e4be      	b.n	8019e90 <lv_theme_material_init+0x1150>
 801a512:	f7ee f9f3 	bl	80088fc <lv_style_init>
 801a516:	e49b      	b.n	8019e50 <lv_theme_material_init+0x1110>
 801a518:	f7ee f9f0 	bl	80088fc <lv_style_init>
 801a51c:	e6bc      	b.n	801a298 <lv_theme_material_init+0x1558>
 801a51e:	f7ee f9ed 	bl	80088fc <lv_style_init>
 801a522:	e685      	b.n	801a230 <lv_theme_material_init+0x14f0>
 801a524:	f7ee f9ea 	bl	80088fc <lv_style_init>
 801a528:	e61f      	b.n	801a16a <lv_theme_material_init+0x142a>
    lv_style_set_pad_right(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
 801a52a:	f7f9 f9d9 	bl	80138e0 <lv_disp_get_dpi>
 801a52e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 801a532:	28ef      	cmp	r0, #239	; 0xef
 801a534:	f77f abab 	ble.w	8019c8e <lv_theme_material_init+0xf4e>
 801a538:	2000      	movs	r0, #0
 801a53a:	f7f9 f9d1 	bl	80138e0 <lv_disp_get_dpi>
 801a53e:	230f      	movs	r3, #15
 801a540:	f000 bca4 	b.w	801ae8c <lv_theme_material_init+0x214c>
    lv_style_set_pad_left(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
 801a544:	f7f9 f9cc 	bl	80138e0 <lv_disp_get_dpi>
 801a548:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 801a54c:	28ef      	cmp	r0, #239	; 0xef
 801a54e:	f77f ab86 	ble.w	8019c5e <lv_theme_material_init+0xf1e>
 801a552:	2000      	movs	r0, #0
 801a554:	f7f9 f9c4 	bl	80138e0 <lv_disp_get_dpi>
 801a558:	230f      	movs	r3, #15
 801a55a:	f000 bc87 	b.w	801ae6c <lv_theme_material_init+0x212c>
    lv_style_set_pad_bottom(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
 801a55e:	f7f9 f9bf 	bl	80138e0 <lv_disp_get_dpi>
 801a562:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 801a566:	28ef      	cmp	r0, #239	; 0xef
 801a568:	f77f ad7b 	ble.w	801a062 <lv_theme_material_init+0x1322>
 801a56c:	2000      	movs	r0, #0
 801a56e:	f7f9 f9b7 	bl	80138e0 <lv_disp_get_dpi>
 801a572:	230f      	movs	r3, #15
 801a574:	2150      	movs	r1, #80	; 0x50
 801a576:	4ad8      	ldr	r2, [pc, #864]	; (801a8d8 <lv_theme_material_init+0x1b98>)
 801a578:	fb00 1003 	mla	r0, r0, r3, r1
 801a57c:	fb82 2300 	smull	r2, r3, r2, r0
 801a580:	17c2      	asrs	r2, r0, #31
 801a582:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 801a586:	b212      	sxth	r2, r2
 801a588:	e56c      	b.n	801a064 <lv_theme_material_init+0x1324>
    lv_style_set_pad_top(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
 801a58a:	f7f9 f9a9 	bl	80138e0 <lv_disp_get_dpi>
 801a58e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 801a592:	28ef      	cmp	r0, #239	; 0xef
 801a594:	f77f ad4d 	ble.w	801a032 <lv_theme_material_init+0x12f2>
 801a598:	2000      	movs	r0, #0
 801a59a:	f7f9 f9a1 	bl	80138e0 <lv_disp_get_dpi>
 801a59e:	230f      	movs	r3, #15
 801a5a0:	2150      	movs	r1, #80	; 0x50
 801a5a2:	4acd      	ldr	r2, [pc, #820]	; (801a8d8 <lv_theme_material_init+0x1b98>)
 801a5a4:	fb00 1003 	mla	r0, r0, r3, r1
 801a5a8:	fb82 2300 	smull	r2, r3, r2, r0
 801a5ac:	17c2      	asrs	r2, r0, #31
 801a5ae:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 801a5b2:	b212      	sxth	r2, r2
 801a5b4:	e53e      	b.n	801a034 <lv_theme_material_init+0x12f4>
    lv_style_set_pad_right(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
 801a5b6:	f7f9 f993 	bl	80138e0 <lv_disp_get_dpi>
 801a5ba:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 801a5be:	28ef      	cmp	r0, #239	; 0xef
 801a5c0:	f77f ad1f 	ble.w	801a002 <lv_theme_material_init+0x12c2>
 801a5c4:	2000      	movs	r0, #0
 801a5c6:	f7f9 f98b 	bl	80138e0 <lv_disp_get_dpi>
 801a5ca:	230f      	movs	r3, #15
 801a5cc:	2150      	movs	r1, #80	; 0x50
 801a5ce:	4ac2      	ldr	r2, [pc, #776]	; (801a8d8 <lv_theme_material_init+0x1b98>)
 801a5d0:	fb00 1003 	mla	r0, r0, r3, r1
 801a5d4:	fb82 2300 	smull	r2, r3, r2, r0
 801a5d8:	17c2      	asrs	r2, r0, #31
 801a5da:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 801a5de:	b212      	sxth	r2, r2
 801a5e0:	e510      	b.n	801a004 <lv_theme_material_init+0x12c4>
    lv_style_set_pad_left(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
 801a5e2:	f7f9 f97d 	bl	80138e0 <lv_disp_get_dpi>
 801a5e6:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 801a5ea:	28ef      	cmp	r0, #239	; 0xef
 801a5ec:	f77f acf1 	ble.w	8019fd2 <lv_theme_material_init+0x1292>
 801a5f0:	2000      	movs	r0, #0
 801a5f2:	f7f9 f975 	bl	80138e0 <lv_disp_get_dpi>
 801a5f6:	230f      	movs	r3, #15
 801a5f8:	2150      	movs	r1, #80	; 0x50
 801a5fa:	4ab7      	ldr	r2, [pc, #732]	; (801a8d8 <lv_theme_material_init+0x1b98>)
 801a5fc:	fb00 1003 	mla	r0, r0, r3, r1
 801a600:	fb82 2300 	smull	r2, r3, r2, r0
 801a604:	17c2      	asrs	r2, r0, #31
 801a606:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 801a60a:	b212      	sxth	r2, r2
 801a60c:	e4e2      	b.n	8019fd4 <lv_theme_material_init+0x1294>
    lv_style_set_pad_bottom(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
 801a60e:	f7f9 f967 	bl	80138e0 <lv_disp_get_dpi>
 801a612:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 801a616:	28ef      	cmp	r0, #239	; 0xef
 801a618:	f77f ab69 	ble.w	8019cee <lv_theme_material_init+0xfae>
 801a61c:	2000      	movs	r0, #0
 801a61e:	f7f9 f95f 	bl	80138e0 <lv_disp_get_dpi>
 801a622:	230f      	movs	r3, #15
 801a624:	f000 bc52 	b.w	801aecc <lv_theme_material_init+0x218c>
    lv_style_set_pad_top(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
 801a628:	f7f9 f95a 	bl	80138e0 <lv_disp_get_dpi>
 801a62c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 801a630:	28ef      	cmp	r0, #239	; 0xef
 801a632:	f77f ab44 	ble.w	8019cbe <lv_theme_material_init+0xf7e>
 801a636:	2000      	movs	r0, #0
 801a638:	f7f9 f952 	bl	80138e0 <lv_disp_get_dpi>
 801a63c:	230f      	movs	r3, #15
 801a63e:	f000 bc35 	b.w	801aeac <lv_theme_material_init+0x216c>
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_DEFAULT, - PAD_DEF);
 801a642:	f7f9 f94d 	bl	80138e0 <lv_disp_get_dpi>
 801a646:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 801a64a:	28ef      	cmp	r0, #239	; 0xef
 801a64c:	f77f ab7f 	ble.w	8019d4e <lv_theme_material_init+0x100e>
 801a650:	2000      	movs	r0, #0
 801a652:	f7f9 f945 	bl	80138e0 <lv_disp_get_dpi>
 801a656:	230f      	movs	r3, #15
 801a658:	e3f8      	b.n	801ae4c <lv_theme_material_init+0x210c>
    lv_style_set_pad_inner(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
 801a65a:	f7f9 f941 	bl	80138e0 <lv_disp_get_dpi>
 801a65e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 801a662:	28ef      	cmp	r0, #239	; 0xef
 801a664:	f77f ab5b 	ble.w	8019d1e <lv_theme_material_init+0xfde>
 801a668:	2000      	movs	r0, #0
 801a66a:	f7f9 f939 	bl	80138e0 <lv_disp_get_dpi>
 801a66e:	230f      	movs	r3, #15
 801a670:	f000 bc3c 	b.w	801aeec <lv_theme_material_init+0x21ac>
    lv_style_set_pad_top(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
 801a674:	f7f9 f934 	bl	80138e0 <lv_disp_get_dpi>
 801a678:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 801a67c:	28ef      	cmp	r0, #239	; 0xef
 801a67e:	f77f ae1e 	ble.w	801a2be <lv_theme_material_init+0x157e>
 801a682:	2000      	movs	r0, #0
 801a684:	f7f9 f92c 	bl	80138e0 <lv_disp_get_dpi>
 801a688:	230f      	movs	r3, #15
 801a68a:	2150      	movs	r1, #80	; 0x50
 801a68c:	4a92      	ldr	r2, [pc, #584]	; (801a8d8 <lv_theme_material_init+0x1b98>)
 801a68e:	fb00 1003 	mla	r0, r0, r3, r1
 801a692:	fb82 2300 	smull	r2, r3, r2, r0
 801a696:	17c2      	asrs	r2, r0, #31
 801a698:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 801a69c:	b212      	sxth	r2, r2
 801a69e:	e60f      	b.n	801a2c0 <lv_theme_material_init+0x1580>
    lv_style_set_pad_inner(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
 801a6a0:	f7f9 f91e 	bl	80138e0 <lv_disp_get_dpi>
 801a6a4:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 801a6a8:	28ef      	cmp	r0, #239	; 0xef
 801a6aa:	f77f ae68 	ble.w	801a37e <lv_theme_material_init+0x163e>
 801a6ae:	2000      	movs	r0, #0
 801a6b0:	f7f9 f916 	bl	80138e0 <lv_disp_get_dpi>
 801a6b4:	230f      	movs	r3, #15
 801a6b6:	2150      	movs	r1, #80	; 0x50
 801a6b8:	4a87      	ldr	r2, [pc, #540]	; (801a8d8 <lv_theme_material_init+0x1b98>)
 801a6ba:	fb00 1003 	mla	r0, r0, r3, r1
 801a6be:	fb82 2300 	smull	r2, r3, r2, r0
 801a6c2:	17c2      	asrs	r2, r0, #31
 801a6c4:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 801a6c8:	b212      	sxth	r2, r2
 801a6ca:	e659      	b.n	801a380 <lv_theme_material_init+0x1640>
    lv_style_set_pad_right(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
 801a6cc:	f7f9 f908 	bl	80138e0 <lv_disp_get_dpi>
 801a6d0:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 801a6d4:	28ef      	cmp	r0, #239	; 0xef
 801a6d6:	f77f ae3a 	ble.w	801a34e <lv_theme_material_init+0x160e>
 801a6da:	2000      	movs	r0, #0
 801a6dc:	f7f9 f900 	bl	80138e0 <lv_disp_get_dpi>
 801a6e0:	230f      	movs	r3, #15
 801a6e2:	2150      	movs	r1, #80	; 0x50
 801a6e4:	4a7c      	ldr	r2, [pc, #496]	; (801a8d8 <lv_theme_material_init+0x1b98>)
 801a6e6:	fb00 1003 	mla	r0, r0, r3, r1
 801a6ea:	fb82 2300 	smull	r2, r3, r2, r0
 801a6ee:	17c2      	asrs	r2, r0, #31
 801a6f0:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 801a6f4:	b212      	sxth	r2, r2
 801a6f6:	e62b      	b.n	801a350 <lv_theme_material_init+0x1610>
    lv_style_set_pad_left(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
 801a6f8:	f7f9 f8f2 	bl	80138e0 <lv_disp_get_dpi>
 801a6fc:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 801a700:	28ef      	cmp	r0, #239	; 0xef
 801a702:	f77f ae0c 	ble.w	801a31e <lv_theme_material_init+0x15de>
 801a706:	2000      	movs	r0, #0
 801a708:	f7f9 f8ea 	bl	80138e0 <lv_disp_get_dpi>
 801a70c:	230f      	movs	r3, #15
 801a70e:	2150      	movs	r1, #80	; 0x50
 801a710:	4a71      	ldr	r2, [pc, #452]	; (801a8d8 <lv_theme_material_init+0x1b98>)
 801a712:	fb00 1003 	mla	r0, r0, r3, r1
 801a716:	fb82 2300 	smull	r2, r3, r2, r0
 801a71a:	17c2      	asrs	r2, r0, #31
 801a71c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 801a720:	b212      	sxth	r2, r2
 801a722:	e5fd      	b.n	801a320 <lv_theme_material_init+0x15e0>
    lv_style_set_pad_bottom(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
 801a724:	f7f9 f8dc 	bl	80138e0 <lv_disp_get_dpi>
 801a728:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 801a72c:	28ef      	cmp	r0, #239	; 0xef
 801a72e:	f77f adde 	ble.w	801a2ee <lv_theme_material_init+0x15ae>
 801a732:	2000      	movs	r0, #0
 801a734:	f7f9 f8d4 	bl	80138e0 <lv_disp_get_dpi>
 801a738:	230f      	movs	r3, #15
 801a73a:	2150      	movs	r1, #80	; 0x50
 801a73c:	4a66      	ldr	r2, [pc, #408]	; (801a8d8 <lv_theme_material_init+0x1b98>)
 801a73e:	fb00 1003 	mla	r0, r0, r3, r1
 801a742:	fb82 2300 	smull	r2, r3, r2, r0
 801a746:	17c2      	asrs	r2, r0, #31
 801a748:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 801a74c:	b212      	sxth	r2, r2
 801a74e:	e5cf      	b.n	801a2f0 <lv_theme_material_init+0x15b0>
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_FOCUSED, - BORDER_WIDTH);
 801a750:	2000      	movs	r0, #0
 801a752:	f7f9 f8c5 	bl	80138e0 <lv_disp_get_dpi>
 801a756:	4b60      	ldr	r3, [pc, #384]	; (801a8d8 <lv_theme_material_init+0x1b98>)
 801a758:	3028      	adds	r0, #40	; 0x28
 801a75a:	fb83 2300 	smull	r2, r3, r3, r0
 801a75e:	17c2      	asrs	r2, r0, #31
 801a760:	eba2 1263 	sub.w	r2, r2, r3, asr #5
 801a764:	b212      	sxth	r2, r2
 801a766:	f7ff bb33 	b.w	8019dd0 <lv_theme_material_init+0x1090>
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_DISABLED, -BORDER_WIDTH);
 801a76a:	2000      	movs	r0, #0
 801a76c:	f7f9 f8b8 	bl	80138e0 <lv_disp_get_dpi>
 801a770:	4b59      	ldr	r3, [pc, #356]	; (801a8d8 <lv_theme_material_init+0x1b98>)
 801a772:	3028      	adds	r0, #40	; 0x28
 801a774:	fb83 2300 	smull	r2, r3, r3, r0
 801a778:	17c2      	asrs	r2, r0, #31
 801a77a:	eba2 1263 	sub.w	r2, r2, r3, asr #5
 801a77e:	b212      	sxth	r2, r2
 801a780:	f7ff bb16 	b.w	8019db0 <lv_theme_material_init+0x1070>
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_CHECKED, -BORDER_WIDTH);
 801a784:	2000      	movs	r0, #0
 801a786:	f7f9 f8ab 	bl	80138e0 <lv_disp_get_dpi>
 801a78a:	4b53      	ldr	r3, [pc, #332]	; (801a8d8 <lv_theme_material_init+0x1b98>)
 801a78c:	3028      	adds	r0, #40	; 0x28
 801a78e:	fb83 2300 	smull	r2, r3, r3, r0
 801a792:	17c2      	asrs	r2, r0, #31
 801a794:	eba2 1263 	sub.w	r2, r2, r3, asr #5
 801a798:	b212      	sxth	r2, r2
 801a79a:	f7ff baf9 	b.w	8019d90 <lv_theme_material_init+0x1050>
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_PRESSED, -BORDER_WIDTH);
 801a79e:	2000      	movs	r0, #0
 801a7a0:	f7f9 f89e 	bl	80138e0 <lv_disp_get_dpi>
 801a7a4:	4b4c      	ldr	r3, [pc, #304]	; (801a8d8 <lv_theme_material_init+0x1b98>)
 801a7a6:	3028      	adds	r0, #40	; 0x28
 801a7a8:	fb83 2300 	smull	r2, r3, r3, r0
 801a7ac:	17c2      	asrs	r2, r0, #31
 801a7ae:	eba2 1263 	sub.w	r2, r2, r3, asr #5
 801a7b2:	b212      	sxth	r2, r2
 801a7b4:	f7ff badc 	b.w	8019d70 <lv_theme_material_init+0x1030>
    lv_style_set_pad_right(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(7));
 801a7b8:	2000      	movs	r0, #0
 801a7ba:	f7f9 f891 	bl	80138e0 <lv_disp_get_dpi>
 801a7be:	2307      	movs	r3, #7
 801a7c0:	2150      	movs	r1, #80	; 0x50
 801a7c2:	4a45      	ldr	r2, [pc, #276]	; (801a8d8 <lv_theme_material_init+0x1b98>)
 801a7c4:	fb00 1003 	mla	r0, r0, r3, r1
 801a7c8:	fb82 2300 	smull	r2, r3, r2, r0
 801a7cc:	17c2      	asrs	r2, r0, #31
 801a7ce:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 801a7d2:	b212      	sxth	r2, r2
 801a7d4:	e4bc      	b.n	801a150 <lv_theme_material_init+0x1410>
    lv_style_set_size(&styles->tabview_indic, LV_STATE_DEFAULT, LV_DPX(5));
 801a7d6:	2000      	movs	r0, #0
 801a7d8:	f7f9 f882 	bl	80138e0 <lv_disp_get_dpi>
 801a7dc:	2305      	movs	r3, #5
 801a7de:	2150      	movs	r1, #80	; 0x50
 801a7e0:	4a3d      	ldr	r2, [pc, #244]	; (801a8d8 <lv_theme_material_init+0x1b98>)
 801a7e2:	fb00 1003 	mla	r0, r0, r3, r1
 801a7e6:	fb82 2300 	smull	r2, r3, r2, r0
 801a7ea:	17c2      	asrs	r2, r0, #31
 801a7ec:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 801a7f0:	b212      	sxth	r2, r2
 801a7f2:	e53d      	b.n	801a270 <lv_theme_material_init+0x1530>
    lv_style_set_text_line_space(&styles->roller_bg, LV_STATE_DEFAULT, LV_DPX(25));
 801a7f4:	2000      	movs	r0, #0
 801a7f6:	f7f9 f873 	bl	80138e0 <lv_disp_get_dpi>
 801a7fa:	2319      	movs	r3, #25
 801a7fc:	2150      	movs	r1, #80	; 0x50
 801a7fe:	4a36      	ldr	r2, [pc, #216]	; (801a8d8 <lv_theme_material_init+0x1b98>)
 801a800:	fb00 1003 	mla	r0, r0, r3, r1
 801a804:	fb82 2300 	smull	r2, r3, r2, r0
 801a808:	17c2      	asrs	r2, r0, #31
 801a80a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 801a80e:	b212      	sxth	r2, r2
 801a810:	f7ff bb79 	b.w	8019f06 <lv_theme_material_init+0x11c6>
    lv_style_set_text_line_space(&styles->ddlist_page, LV_STATE_DEFAULT, LV_DPX(20));
 801a814:	2000      	movs	r0, #0
 801a816:	f7f9 f863 	bl	80138e0 <lv_disp_get_dpi>
 801a81a:	2314      	movs	r3, #20
 801a81c:	2150      	movs	r1, #80	; 0x50
 801a81e:	4a2e      	ldr	r2, [pc, #184]	; (801a8d8 <lv_theme_material_init+0x1b98>)
 801a820:	fb00 1003 	mla	r0, r0, r3, r1
 801a824:	fb82 2300 	smull	r2, r3, r2, r0
 801a828:	17c2      	asrs	r2, r0, #31
 801a82a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 801a82e:	b212      	sxth	r2, r2
 801a830:	f7ff bafa 	b.w	8019e28 <lv_theme_material_init+0x10e8>
    lv_style_set_pad_bottom(&styles->tabview_btns, LV_STATE_DEFAULT, LV_DPX(20));
 801a834:	2000      	movs	r0, #0
 801a836:	f7f9 f853 	bl	80138e0 <lv_disp_get_dpi>
 801a83a:	2314      	movs	r3, #20
 801a83c:	2150      	movs	r1, #80	; 0x50
 801a83e:	4a26      	ldr	r2, [pc, #152]	; (801a8d8 <lv_theme_material_init+0x1b98>)
 801a840:	fb00 1003 	mla	r0, r0, r3, r1
 801a844:	fb82 2300 	smull	r2, r3, r2, r0
 801a848:	17c2      	asrs	r2, r0, #31
 801a84a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 801a84e:	b212      	sxth	r2, r2
 801a850:	e4d1      	b.n	801a1f6 <lv_theme_material_init+0x14b6>
    lv_style_set_pad_top(&styles->tabview_btns, LV_STATE_DEFAULT, LV_DPX(20));
 801a852:	2000      	movs	r0, #0
 801a854:	f7f9 f844 	bl	80138e0 <lv_disp_get_dpi>
 801a858:	2314      	movs	r3, #20
 801a85a:	2150      	movs	r1, #80	; 0x50
 801a85c:	4a1e      	ldr	r2, [pc, #120]	; (801a8d8 <lv_theme_material_init+0x1b98>)
 801a85e:	fb00 1003 	mla	r0, r0, r3, r1
 801a862:	fb82 2300 	smull	r2, r3, r2, r0
 801a866:	17c2      	asrs	r2, r0, #31
 801a868:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 801a86c:	b212      	sxth	r2, r2
 801a86e:	e4b2      	b.n	801a1d6 <lv_theme_material_init+0x1496>
    lv_style_set_pad_left(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(7));
 801a870:	2000      	movs	r0, #0
 801a872:	f7f9 f835 	bl	80138e0 <lv_disp_get_dpi>
 801a876:	2307      	movs	r3, #7
 801a878:	2150      	movs	r1, #80	; 0x50
 801a87a:	4a17      	ldr	r2, [pc, #92]	; (801a8d8 <lv_theme_material_init+0x1b98>)
 801a87c:	fb00 1003 	mla	r0, r0, r3, r1
 801a880:	fb82 2300 	smull	r2, r3, r2, r0
 801a884:	17c2      	asrs	r2, r0, #31
 801a886:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 801a88a:	b212      	sxth	r2, r2
 801a88c:	e451      	b.n	801a132 <lv_theme_material_init+0x13f2>
    lv_style_set_pad_top(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(7));
 801a88e:	2000      	movs	r0, #0
 801a890:	f7f9 f826 	bl	80138e0 <lv_disp_get_dpi>
 801a894:	2307      	movs	r3, #7
 801a896:	2150      	movs	r1, #80	; 0x50
 801a898:	4a0f      	ldr	r2, [pc, #60]	; (801a8d8 <lv_theme_material_init+0x1b98>)
 801a89a:	fb00 1003 	mla	r0, r0, r3, r1
 801a89e:	fb82 2300 	smull	r2, r3, r2, r0
 801a8a2:	17c2      	asrs	r2, r0, #31
 801a8a4:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 801a8a8:	b212      	sxth	r2, r2
 801a8aa:	e433      	b.n	801a114 <lv_theme_material_init+0x13d4>
    lv_style_set_outline_pad(&styles->list_btn, LV_STATE_FOCUSED, -BORDER_WIDTH);
 801a8ac:	2000      	movs	r0, #0
 801a8ae:	f7f9 f817 	bl	80138e0 <lv_disp_get_dpi>
 801a8b2:	4b09      	ldr	r3, [pc, #36]	; (801a8d8 <lv_theme_material_init+0x1b98>)
 801a8b4:	3028      	adds	r0, #40	; 0x28
 801a8b6:	fb83 2300 	smull	r2, r3, r3, r0
 801a8ba:	17c2      	asrs	r2, r0, #31
 801a8bc:	eba2 1263 	sub.w	r2, r2, r3, asr #5
 801a8c0:	b212      	sxth	r2, r2
 801a8c2:	f7ff b9b4 	b.w	8019c2e <lv_theme_material_init+0xeee>
    lv_style_set_outline_width(&styles->list_btn, LV_STATE_FOCUSED, OUTLINE_WIDTH);
 801a8c6:	4628      	mov	r0, r5
 801a8c8:	f7f9 f80a 	bl	80138e0 <lv_disp_get_dpi>
 801a8cc:	2877      	cmp	r0, #119	; 0x77
 801a8ce:	f300 835c 	bgt.w	801af8a <lv_theme_material_init+0x224a>
 801a8d2:	2201      	movs	r2, #1
 801a8d4:	f7ff b99b 	b.w	8019c0e <lv_theme_material_init+0xece>
 801a8d8:	66666667 	.word	0x66666667
    lv_style_set_pad_bottom(&styles->spinbox_cursor, LV_STATE_DEFAULT, LV_DPX(100));
 801a8dc:	2000      	movs	r0, #0
 801a8de:	f7f8 ffff 	bl	80138e0 <lv_disp_get_dpi>
 801a8e2:	2364      	movs	r3, #100	; 0x64
 801a8e4:	2150      	movs	r1, #80	; 0x50
 801a8e6:	4adb      	ldr	r2, [pc, #876]	; (801ac54 <lv_theme_material_init+0x1f14>)
 801a8e8:	fb00 1003 	mla	r0, r0, r3, r1
 801a8ec:	fb82 2300 	smull	r2, r3, r2, r0
 801a8f0:	17c2      	asrs	r2, r0, #31
 801a8f2:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 801a8f6:	b212      	sxth	r2, r2
 801a8f8:	f7ff b83a 	b.w	8019970 <lv_theme_material_init+0xc30>
    lv_style_set_pad_top(&styles->spinbox_cursor, LV_STATE_DEFAULT, LV_DPX(100));
 801a8fc:	2000      	movs	r0, #0
 801a8fe:	f7f8 ffef 	bl	80138e0 <lv_disp_get_dpi>
 801a902:	2364      	movs	r3, #100	; 0x64
 801a904:	2150      	movs	r1, #80	; 0x50
 801a906:	4ad3      	ldr	r2, [pc, #844]	; (801ac54 <lv_theme_material_init+0x1f14>)
 801a908:	fb00 1003 	mla	r0, r0, r3, r1
 801a90c:	fb82 2300 	smull	r2, r3, r2, r0
 801a910:	17c2      	asrs	r2, r0, #31
 801a912:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 801a916:	b212      	sxth	r2, r2
 801a918:	f7ff b818 	b.w	801994c <lv_theme_material_init+0xc0c>
    lv_style_set_pad_left(&styles->ta_cursor, LV_STATE_DEFAULT, LV_DPX(1));
 801a91c:	2000      	movs	r0, #0
 801a91e:	f7f8 ffdf 	bl	80138e0 <lv_disp_get_dpi>
 801a922:	4bcc      	ldr	r3, [pc, #816]	; (801ac54 <lv_theme_material_init+0x1f14>)
 801a924:	3050      	adds	r0, #80	; 0x50
 801a926:	fb83 2300 	smull	r2, r3, r3, r0
 801a92a:	17c2      	asrs	r2, r0, #31
 801a92c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 801a930:	b212      	sxth	r2, r2
 801a932:	f7fe bfb4 	b.w	801989e <lv_theme_material_init+0xb5e>
    lv_style_set_border_width(&styles->ta_cursor, LV_STATE_DEFAULT, LV_DPX(2));
 801a936:	2000      	movs	r0, #0
 801a938:	f7f8 ffd2 	bl	80138e0 <lv_disp_get_dpi>
 801a93c:	4bc5      	ldr	r3, [pc, #788]	; (801ac54 <lv_theme_material_init+0x1f14>)
 801a93e:	3028      	adds	r0, #40	; 0x28
 801a940:	fb83 2300 	smull	r2, r3, r3, r0
 801a944:	17c2      	asrs	r2, r0, #31
 801a946:	ebc2 1263 	rsb	r2, r2, r3, asr #5
 801a94a:	b212      	sxth	r2, r2
 801a94c:	f7fe bf99 	b.w	8019882 <lv_theme_material_init+0xb42>
    lv_style_set_pad_bottom(&styles->sb, LV_STATE_DEFAULT,  LV_DPX(7));
 801a950:	2000      	movs	r0, #0
 801a952:	f7f8 ffc5 	bl	80138e0 <lv_disp_get_dpi>
 801a956:	2307      	movs	r3, #7
 801a958:	2150      	movs	r1, #80	; 0x50
 801a95a:	4abe      	ldr	r2, [pc, #760]	; (801ac54 <lv_theme_material_init+0x1f14>)
 801a95c:	fb00 1003 	mla	r0, r0, r3, r1
 801a960:	fb82 2300 	smull	r2, r3, r2, r0
 801a964:	17c2      	asrs	r2, r0, #31
 801a966:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 801a96a:	b212      	sxth	r2, r2
 801a96c:	f7fe bf42 	b.w	80197f4 <lv_theme_material_init+0xab4>
    lv_style_set_pad_right(&styles->sb, LV_STATE_DEFAULT,  LV_DPX(7));
 801a970:	2000      	movs	r0, #0
 801a972:	f7f8 ffb5 	bl	80138e0 <lv_disp_get_dpi>
 801a976:	2307      	movs	r3, #7
 801a978:	2150      	movs	r1, #80	; 0x50
 801a97a:	4ab6      	ldr	r2, [pc, #728]	; (801ac54 <lv_theme_material_init+0x1f14>)
 801a97c:	fb00 1003 	mla	r0, r0, r3, r1
 801a980:	fb82 2300 	smull	r2, r3, r2, r0
 801a984:	17c2      	asrs	r2, r0, #31
 801a986:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 801a98a:	b212      	sxth	r2, r2
 801a98c:	f7fe bf23 	b.w	80197d6 <lv_theme_material_init+0xa96>
    lv_style_set_size(&styles->sb, LV_STATE_DEFAULT, LV_DPX(7));
 801a990:	2000      	movs	r0, #0
 801a992:	f7f8 ffa5 	bl	80138e0 <lv_disp_get_dpi>
 801a996:	2307      	movs	r3, #7
 801a998:	2150      	movs	r1, #80	; 0x50
 801a99a:	4aae      	ldr	r2, [pc, #696]	; (801ac54 <lv_theme_material_init+0x1f14>)
 801a99c:	fb00 1003 	mla	r0, r0, r3, r1
 801a9a0:	fb82 2300 	smull	r2, r3, r2, r0
 801a9a4:	17c2      	asrs	r2, r0, #31
 801a9a6:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 801a9aa:	b212      	sxth	r2, r2
 801a9ac:	f7fe bf04 	b.w	80197b8 <lv_theme_material_init+0xa78>
    lv_style_set_shadow_width(&styles->mbox_bg, LV_STATE_DEFAULT, LV_DPX(50));
 801a9b0:	2000      	movs	r0, #0
 801a9b2:	f7f8 ff95 	bl	80138e0 <lv_disp_get_dpi>
 801a9b6:	2332      	movs	r3, #50	; 0x32
 801a9b8:	2150      	movs	r1, #80	; 0x50
 801a9ba:	4aa6      	ldr	r2, [pc, #664]	; (801ac54 <lv_theme_material_init+0x1f14>)
 801a9bc:	fb00 1003 	mla	r0, r0, r3, r1
 801a9c0:	fb82 2300 	smull	r2, r3, r2, r0
 801a9c4:	17c2      	asrs	r2, r0, #31
 801a9c6:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 801a9ca:	b212      	sxth	r2, r2
 801a9cc:	f7fe be9d 	b.w	801970a <lv_theme_material_init+0x9ca>
    lv_style_set_pad_inner(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(3));
 801a9d0:	2000      	movs	r0, #0
 801a9d2:	f7f8 ff85 	bl	80138e0 <lv_disp_get_dpi>
 801a9d6:	2303      	movs	r3, #3
 801a9d8:	2150      	movs	r1, #80	; 0x50
 801a9da:	4a9e      	ldr	r2, [pc, #632]	; (801ac54 <lv_theme_material_init+0x1f14>)
 801a9dc:	fb00 1003 	mla	r0, r0, r3, r1
 801a9e0:	fb82 2300 	smull	r2, r3, r2, r0
 801a9e4:	17c2      	asrs	r2, r0, #31
 801a9e6:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 801a9ea:	b212      	sxth	r2, r2
 801a9ec:	f7fe be72 	b.w	80196d4 <lv_theme_material_init+0x994>
    lv_style_set_pad_bottom(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(5));
 801a9f0:	2000      	movs	r0, #0
 801a9f2:	f7f8 ff75 	bl	80138e0 <lv_disp_get_dpi>
 801a9f6:	2305      	movs	r3, #5
 801a9f8:	2150      	movs	r1, #80	; 0x50
 801a9fa:	4a96      	ldr	r2, [pc, #600]	; (801ac54 <lv_theme_material_init+0x1f14>)
 801a9fc:	fb00 1003 	mla	r0, r0, r3, r1
 801aa00:	fb82 2300 	smull	r2, r3, r2, r0
 801aa04:	17c2      	asrs	r2, r0, #31
 801aa06:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 801aa0a:	b212      	sxth	r2, r2
 801aa0c:	f7fe be53 	b.w	80196b6 <lv_theme_material_init+0x976>
    lv_style_set_pad_top(&styles->kb_bg, LV_STATE_DEFAULT,  LV_DPX(5));
 801aa10:	2000      	movs	r0, #0
 801aa12:	f7f8 ff65 	bl	80138e0 <lv_disp_get_dpi>
 801aa16:	2305      	movs	r3, #5
 801aa18:	2150      	movs	r1, #80	; 0x50
 801aa1a:	4a8e      	ldr	r2, [pc, #568]	; (801ac54 <lv_theme_material_init+0x1f14>)
 801aa1c:	fb00 1003 	mla	r0, r0, r3, r1
 801aa20:	fb82 2300 	smull	r2, r3, r2, r0
 801aa24:	17c2      	asrs	r2, r0, #31
 801aa26:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 801aa2a:	b212      	sxth	r2, r2
 801aa2c:	f7fe be34 	b.w	8019698 <lv_theme_material_init+0x958>
    lv_style_set_pad_right(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(5));
 801aa30:	2000      	movs	r0, #0
 801aa32:	f7f8 ff55 	bl	80138e0 <lv_disp_get_dpi>
 801aa36:	2305      	movs	r3, #5
 801aa38:	2150      	movs	r1, #80	; 0x50
 801aa3a:	4a86      	ldr	r2, [pc, #536]	; (801ac54 <lv_theme_material_init+0x1f14>)
 801aa3c:	fb00 1003 	mla	r0, r0, r3, r1
 801aa40:	fb82 2300 	smull	r2, r3, r2, r0
 801aa44:	17c2      	asrs	r2, r0, #31
 801aa46:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 801aa4a:	b212      	sxth	r2, r2
 801aa4c:	f7fe be15 	b.w	801967a <lv_theme_material_init+0x93a>
    lv_style_set_pad_left(&styles->kb_bg, LV_STATE_DEFAULT,  LV_DPX(5));
 801aa50:	2000      	movs	r0, #0
 801aa52:	f7f8 ff45 	bl	80138e0 <lv_disp_get_dpi>
 801aa56:	2305      	movs	r3, #5
 801aa58:	2150      	movs	r1, #80	; 0x50
 801aa5a:	4a7e      	ldr	r2, [pc, #504]	; (801ac54 <lv_theme_material_init+0x1f14>)
 801aa5c:	fb00 1003 	mla	r0, r0, r3, r1
 801aa60:	fb82 2300 	smull	r2, r3, r2, r0
 801aa64:	17c2      	asrs	r2, r0, #31
 801aa66:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 801aa6a:	b212      	sxth	r2, r2
 801aa6c:	f7fe bdf6 	b.w	801965c <lv_theme_material_init+0x91c>
    lv_style_set_border_width(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(4));
 801aa70:	2000      	movs	r0, #0
 801aa72:	f7f8 ff35 	bl	80138e0 <lv_disp_get_dpi>
 801aa76:	4b77      	ldr	r3, [pc, #476]	; (801ac54 <lv_theme_material_init+0x1f14>)
 801aa78:	3014      	adds	r0, #20
 801aa7a:	fb83 2300 	smull	r2, r3, r3, r0
 801aa7e:	17c2      	asrs	r2, r0, #31
 801aa80:	ebc2 1223 	rsb	r2, r2, r3, asr #4
 801aa84:	b212      	sxth	r2, r2
 801aa86:	f7fe bdb2 	b.w	80195ee <lv_theme_material_init+0x8ae>
    lv_style_set_radius(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(1));
 801aa8a:	2000      	movs	r0, #0
 801aa8c:	f7f8 ff28 	bl	80138e0 <lv_disp_get_dpi>
 801aa90:	4b70      	ldr	r3, [pc, #448]	; (801ac54 <lv_theme_material_init+0x1f14>)
 801aa92:	3050      	adds	r0, #80	; 0x50
 801aa94:	fb83 2300 	smull	r2, r3, r3, r0
 801aa98:	17c2      	asrs	r2, r0, #31
 801aa9a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 801aa9e:	b212      	sxth	r2, r2
 801aaa0:	f7fe bd82 	b.w	80195a8 <lv_theme_material_init+0x868>
    lv_style_set_pad_inner(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(2));     /*Space between columns*/
 801aaa4:	2000      	movs	r0, #0
 801aaa6:	f7f8 ff1b 	bl	80138e0 <lv_disp_get_dpi>
 801aaaa:	4b6a      	ldr	r3, [pc, #424]	; (801ac54 <lv_theme_material_init+0x1f14>)
 801aaac:	3028      	adds	r0, #40	; 0x28
 801aaae:	fb83 2300 	smull	r2, r3, r3, r0
 801aab2:	17c2      	asrs	r2, r0, #31
 801aab4:	ebc2 1263 	rsb	r2, r2, r3, asr #5
 801aab8:	b212      	sxth	r2, r2
 801aaba:	f7fe bd67 	b.w	801958c <lv_theme_material_init+0x84c>
    lv_style_set_size(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(4));
 801aabe:	2000      	movs	r0, #0
 801aac0:	f7f8 ff0e 	bl	80138e0 <lv_disp_get_dpi>
 801aac4:	4b63      	ldr	r3, [pc, #396]	; (801ac54 <lv_theme_material_init+0x1f14>)
 801aac6:	3014      	adds	r0, #20
 801aac8:	fb83 2300 	smull	r2, r3, r3, r0
 801aacc:	17c2      	asrs	r2, r0, #31
 801aace:	ebc2 1223 	rsb	r2, r2, r3, asr #4
 801aad2:	b212      	sxth	r2, r2
 801aad4:	f7fe bd4c 	b.w	8019570 <lv_theme_material_init+0x830>
    lv_style_set_line_width(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(3));
 801aad8:	2000      	movs	r0, #0
 801aada:	f7f8 ff01 	bl	80138e0 <lv_disp_get_dpi>
 801aade:	2303      	movs	r3, #3
 801aae0:	2150      	movs	r1, #80	; 0x50
 801aae2:	4a5c      	ldr	r2, [pc, #368]	; (801ac54 <lv_theme_material_init+0x1f14>)
 801aae4:	fb00 1003 	mla	r0, r0, r3, r1
 801aae8:	fb82 2300 	smull	r2, r3, r2, r0
 801aaec:	17c2      	asrs	r2, r0, #31
 801aaee:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 801aaf2:	b212      	sxth	r2, r2
 801aaf4:	f7fe bd2e 	b.w	8019554 <lv_theme_material_init+0x814>
    lv_style_set_line_dash_gap(&styles->chart_series_bg, LV_STATE_DEFAULT, LV_DPX(10));
 801aaf8:	2000      	movs	r0, #0
 801aafa:	f7f8 fef1 	bl	80138e0 <lv_disp_get_dpi>
 801aafe:	230a      	movs	r3, #10
 801ab00:	2150      	movs	r1, #80	; 0x50
 801ab02:	4a54      	ldr	r2, [pc, #336]	; (801ac54 <lv_theme_material_init+0x1f14>)
 801ab04:	fb00 1003 	mla	r0, r0, r3, r1
 801ab08:	fb82 2300 	smull	r2, r3, r2, r0
 801ab0c:	17c2      	asrs	r2, r0, #31
 801ab0e:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 801ab12:	b212      	sxth	r2, r2
 801ab14:	f7fe bceb 	b.w	80194ee <lv_theme_material_init+0x7ae>
    lv_style_set_line_dash_width(&styles->chart_series_bg, LV_STATE_DEFAULT, LV_DPX(10));
 801ab18:	2000      	movs	r0, #0
 801ab1a:	f7f8 fee1 	bl	80138e0 <lv_disp_get_dpi>
 801ab1e:	230a      	movs	r3, #10
 801ab20:	2150      	movs	r1, #80	; 0x50
 801ab22:	4a4c      	ldr	r2, [pc, #304]	; (801ac54 <lv_theme_material_init+0x1f14>)
 801ab24:	fb00 1003 	mla	r0, r0, r3, r1
 801ab28:	fb82 2300 	smull	r2, r3, r2, r0
 801ab2c:	17c2      	asrs	r2, r0, #31
 801ab2e:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 801ab32:	b212      	sxth	r2, r2
 801ab34:	f7fe bccb 	b.w	80194ce <lv_theme_material_init+0x78e>
    lv_style_set_line_width(&styles->chart_series_bg, LV_STATE_DEFAULT, LV_DPX(1));
 801ab38:	2000      	movs	r0, #0
 801ab3a:	f7f8 fed1 	bl	80138e0 <lv_disp_get_dpi>
 801ab3e:	4b45      	ldr	r3, [pc, #276]	; (801ac54 <lv_theme_material_init+0x1f14>)
 801ab40:	3050      	adds	r0, #80	; 0x50
 801ab42:	fb83 2300 	smull	r2, r3, r3, r0
 801ab46:	17c2      	asrs	r2, r0, #31
 801ab48:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 801ab4c:	b212      	sxth	r2, r2
 801ab4e:	f7fe bcae 	b.w	80194ae <lv_theme_material_init+0x76e>
    lv_style_set_line_width(&styles->arc_bg, LV_STATE_DEFAULT, LV_DPX(25));
 801ab52:	2000      	movs	r0, #0
 801ab54:	f7f8 fec4 	bl	80138e0 <lv_disp_get_dpi>
 801ab58:	2319      	movs	r3, #25
 801ab5a:	2150      	movs	r1, #80	; 0x50
 801ab5c:	4a3d      	ldr	r2, [pc, #244]	; (801ac54 <lv_theme_material_init+0x1f14>)
 801ab5e:	fb00 1003 	mla	r0, r0, r3, r1
 801ab62:	fb82 2300 	smull	r2, r3, r2, r0
 801ab66:	17c2      	asrs	r2, r0, #31
 801ab68:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 801ab6c:	b212      	sxth	r2, r2
 801ab6e:	f7fe bc38 	b.w	80193e2 <lv_theme_material_init+0x6a2>
    lv_style_set_line_width(&styles->arc_indic, LV_STATE_DEFAULT, LV_DPX(25));
 801ab72:	2000      	movs	r0, #0
 801ab74:	f7f8 feb4 	bl	80138e0 <lv_disp_get_dpi>
 801ab78:	2319      	movs	r3, #25
 801ab7a:	2150      	movs	r1, #80	; 0x50
 801ab7c:	4a35      	ldr	r2, [pc, #212]	; (801ac54 <lv_theme_material_init+0x1f14>)
 801ab7e:	fb00 1003 	mla	r0, r0, r3, r1
 801ab82:	fb82 2300 	smull	r2, r3, r2, r0
 801ab86:	17c2      	asrs	r2, r0, #31
 801ab88:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 801ab8c:	b212      	sxth	r2, r2
 801ab8e:	f7fe bbed 	b.w	801936c <lv_theme_material_init+0x62c>
    lv_style_set_scale_end_line_width(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(7));
 801ab92:	2000      	movs	r0, #0
 801ab94:	f7f8 fea4 	bl	80138e0 <lv_disp_get_dpi>
 801ab98:	2307      	movs	r3, #7
 801ab9a:	2150      	movs	r1, #80	; 0x50
 801ab9c:	4a2d      	ldr	r2, [pc, #180]	; (801ac54 <lv_theme_material_init+0x1f14>)
 801ab9e:	fb00 1003 	mla	r0, r0, r3, r1
 801aba2:	fb82 2300 	smull	r2, r3, r2, r0
 801aba6:	17c2      	asrs	r2, r0, #31
 801aba8:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 801abac:	b212      	sxth	r2, r2
 801abae:	f7fe bbba 	b.w	8019326 <lv_theme_material_init+0x5e6>
    lv_style_set_line_width(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(10));
 801abb2:	2000      	movs	r0, #0
 801abb4:	f7f8 fe94 	bl	80138e0 <lv_disp_get_dpi>
 801abb8:	230a      	movs	r3, #10
 801abba:	2150      	movs	r1, #80	; 0x50
 801abbc:	4a25      	ldr	r2, [pc, #148]	; (801ac54 <lv_theme_material_init+0x1f14>)
 801abbe:	fb00 1003 	mla	r0, r0, r3, r1
 801abc2:	fb82 2300 	smull	r2, r3, r2, r0
 801abc6:	17c2      	asrs	r2, r0, #31
 801abc8:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 801abcc:	b212      	sxth	r2, r2
 801abce:	f7fe bb9b 	b.w	8019308 <lv_theme_material_init+0x5c8>
    lv_style_set_scale_width(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(25));
 801abd2:	2000      	movs	r0, #0
 801abd4:	f7f8 fe84 	bl	80138e0 <lv_disp_get_dpi>
 801abd8:	2319      	movs	r3, #25
 801abda:	2150      	movs	r1, #80	; 0x50
 801abdc:	4a1d      	ldr	r2, [pc, #116]	; (801ac54 <lv_theme_material_init+0x1f14>)
 801abde:	fb00 1003 	mla	r0, r0, r3, r1
 801abe2:	fb82 2300 	smull	r2, r3, r2, r0
 801abe6:	17c2      	asrs	r2, r0, #31
 801abe8:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 801abec:	b212      	sxth	r2, r2
 801abee:	f7fe bb67 	b.w	80192c0 <lv_theme_material_init+0x580>
    lv_style_set_pad_inner(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(30));
 801abf2:	2000      	movs	r0, #0
 801abf4:	f7f8 fe74 	bl	80138e0 <lv_disp_get_dpi>
 801abf8:	231e      	movs	r3, #30
 801abfa:	2150      	movs	r1, #80	; 0x50
 801abfc:	4a15      	ldr	r2, [pc, #84]	; (801ac54 <lv_theme_material_init+0x1f14>)
 801abfe:	fb00 1003 	mla	r0, r0, r3, r1
 801ac02:	fb82 2300 	smull	r2, r3, r2, r0
 801ac06:	17c2      	asrs	r2, r0, #31
 801ac08:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 801ac0c:	b212      	sxth	r2, r2
 801ac0e:	f7fe bb46 	b.w	801929e <lv_theme_material_init+0x55e>
    lv_style_set_pad_top(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(20));
 801ac12:	2000      	movs	r0, #0
 801ac14:	f7f8 fe64 	bl	80138e0 <lv_disp_get_dpi>
 801ac18:	2314      	movs	r3, #20
 801ac1a:	2150      	movs	r1, #80	; 0x50
 801ac1c:	4a0d      	ldr	r2, [pc, #52]	; (801ac54 <lv_theme_material_init+0x1f14>)
 801ac1e:	fb00 1003 	mla	r0, r0, r3, r1
 801ac22:	fb82 2300 	smull	r2, r3, r2, r0
 801ac26:	17c2      	asrs	r2, r0, #31
 801ac28:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 801ac2c:	b212      	sxth	r2, r2
 801ac2e:	f7fe bb26 	b.w	801927e <lv_theme_material_init+0x53e>
    lv_style_set_pad_right(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(20));
 801ac32:	2000      	movs	r0, #0
 801ac34:	f7f8 fe54 	bl	80138e0 <lv_disp_get_dpi>
 801ac38:	2314      	movs	r3, #20
 801ac3a:	2150      	movs	r1, #80	; 0x50
 801ac3c:	4a05      	ldr	r2, [pc, #20]	; (801ac54 <lv_theme_material_init+0x1f14>)
 801ac3e:	fb00 1003 	mla	r0, r0, r3, r1
 801ac42:	fb82 2300 	smull	r2, r3, r2, r0
 801ac46:	17c2      	asrs	r2, r0, #31
 801ac48:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 801ac4c:	b212      	sxth	r2, r2
 801ac4e:	f7fe bb06 	b.w	801925e <lv_theme_material_init+0x51e>
 801ac52:	bf00      	nop
 801ac54:	66666667 	.word	0x66666667
    lv_style_set_pad_left(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(20));
 801ac58:	2000      	movs	r0, #0
 801ac5a:	f7f8 fe41 	bl	80138e0 <lv_disp_get_dpi>
 801ac5e:	2314      	movs	r3, #20
 801ac60:	2150      	movs	r1, #80	; 0x50
 801ac62:	4ad0      	ldr	r2, [pc, #832]	; (801afa4 <lv_theme_material_init+0x2264>)
 801ac64:	fb00 1003 	mla	r0, r0, r3, r1
 801ac68:	fb82 2300 	smull	r2, r3, r2, r0
 801ac6c:	17c2      	asrs	r2, r0, #31
 801ac6e:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 801ac72:	b212      	sxth	r2, r2
 801ac74:	f7fe bae3 	b.w	801923e <lv_theme_material_init+0x4fe>
    lv_style_set_pad_right(&styles->sw_knob, LV_STATE_DEFAULT,  - LV_DPX(4));
 801ac78:	2000      	movs	r0, #0
 801ac7a:	f7f8 fe31 	bl	80138e0 <lv_disp_get_dpi>
 801ac7e:	4bc9      	ldr	r3, [pc, #804]	; (801afa4 <lv_theme_material_init+0x2264>)
 801ac80:	3014      	adds	r0, #20
 801ac82:	fb83 2300 	smull	r2, r3, r3, r0
 801ac86:	17c2      	asrs	r2, r0, #31
 801ac88:	eba2 1223 	sub.w	r2, r2, r3, asr #4
 801ac8c:	b212      	sxth	r2, r2
 801ac8e:	f7fe bab6 	b.w	80191fe <lv_theme_material_init+0x4be>
    lv_style_set_pad_left(&styles->sw_knob, LV_STATE_DEFAULT,   - LV_DPX(4));
 801ac92:	2000      	movs	r0, #0
 801ac94:	f7f8 fe24 	bl	80138e0 <lv_disp_get_dpi>
 801ac98:	4bc2      	ldr	r3, [pc, #776]	; (801afa4 <lv_theme_material_init+0x2264>)
 801ac9a:	3014      	adds	r0, #20
 801ac9c:	fb83 2300 	smull	r2, r3, r3, r0
 801aca0:	17c2      	asrs	r2, r0, #31
 801aca2:	eba2 1223 	sub.w	r2, r2, r3, asr #4
 801aca6:	b212      	sxth	r2, r2
 801aca8:	f7fe ba9a 	b.w	80191e0 <lv_theme_material_init+0x4a0>
    lv_style_set_pad_bottom(&styles->sw_knob, LV_STATE_DEFAULT, - LV_DPX(4));
 801acac:	2000      	movs	r0, #0
 801acae:	f7f8 fe17 	bl	80138e0 <lv_disp_get_dpi>
 801acb2:	4bbc      	ldr	r3, [pc, #752]	; (801afa4 <lv_theme_material_init+0x2264>)
 801acb4:	3014      	adds	r0, #20
 801acb6:	fb83 2300 	smull	r2, r3, r3, r0
 801acba:	17c2      	asrs	r2, r0, #31
 801acbc:	eba2 1223 	sub.w	r2, r2, r3, asr #4
 801acc0:	b212      	sxth	r2, r2
 801acc2:	f7fe ba7e 	b.w	80191c2 <lv_theme_material_init+0x482>
    lv_style_set_pad_top(&styles->sw_knob, LV_STATE_DEFAULT,    - LV_DPX(4));
 801acc6:	2000      	movs	r0, #0
 801acc8:	f7f8 fe0a 	bl	80138e0 <lv_disp_get_dpi>
 801accc:	4bb5      	ldr	r3, [pc, #724]	; (801afa4 <lv_theme_material_init+0x2264>)
 801acce:	3014      	adds	r0, #20
 801acd0:	fb83 2300 	smull	r2, r3, r3, r0
 801acd4:	17c2      	asrs	r2, r0, #31
 801acd6:	eba2 1223 	sub.w	r2, r2, r3, asr #4
 801acda:	b212      	sxth	r2, r2
 801acdc:	f7fe ba62 	b.w	80191a4 <lv_theme_material_init+0x464>
    lv_style_set_margin_bottom(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
 801ace0:	2000      	movs	r0, #0
 801ace2:	f7f8 fdfd 	bl	80138e0 <lv_disp_get_dpi>
 801ace6:	230a      	movs	r3, #10
 801ace8:	2150      	movs	r1, #80	; 0x50
 801acea:	4aae      	ldr	r2, [pc, #696]	; (801afa4 <lv_theme_material_init+0x2264>)
 801acec:	fb00 1003 	mla	r0, r0, r3, r1
 801acf0:	fb82 2300 	smull	r2, r3, r2, r0
 801acf4:	17c2      	asrs	r2, r0, #31
 801acf6:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 801acfa:	b212      	sxth	r2, r2
 801acfc:	f7fe ba26 	b.w	801914c <lv_theme_material_init+0x40c>
    lv_style_set_margin_top(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
 801ad00:	2000      	movs	r0, #0
 801ad02:	f7f8 fded 	bl	80138e0 <lv_disp_get_dpi>
 801ad06:	230a      	movs	r3, #10
 801ad08:	2150      	movs	r1, #80	; 0x50
 801ad0a:	4aa6      	ldr	r2, [pc, #664]	; (801afa4 <lv_theme_material_init+0x2264>)
 801ad0c:	fb00 1003 	mla	r0, r0, r3, r1
 801ad10:	fb82 2300 	smull	r2, r3, r2, r0
 801ad14:	17c2      	asrs	r2, r0, #31
 801ad16:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 801ad1a:	b212      	sxth	r2, r2
 801ad1c:	f7fe ba06 	b.w	801912c <lv_theme_material_init+0x3ec>
    lv_style_set_margin_right(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
 801ad20:	2000      	movs	r0, #0
 801ad22:	f7f8 fddd 	bl	80138e0 <lv_disp_get_dpi>
 801ad26:	230a      	movs	r3, #10
 801ad28:	2150      	movs	r1, #80	; 0x50
 801ad2a:	4a9e      	ldr	r2, [pc, #632]	; (801afa4 <lv_theme_material_init+0x2264>)
 801ad2c:	fb00 1003 	mla	r0, r0, r3, r1
 801ad30:	fb82 2300 	smull	r2, r3, r2, r0
 801ad34:	17c2      	asrs	r2, r0, #31
 801ad36:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 801ad3a:	b212      	sxth	r2, r2
 801ad3c:	f7fe b9e6 	b.w	801910c <lv_theme_material_init+0x3cc>
    lv_style_set_margin_left(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
 801ad40:	2000      	movs	r0, #0
 801ad42:	f7f8 fdcd 	bl	80138e0 <lv_disp_get_dpi>
 801ad46:	230a      	movs	r3, #10
 801ad48:	2150      	movs	r1, #80	; 0x50
 801ad4a:	4a96      	ldr	r2, [pc, #600]	; (801afa4 <lv_theme_material_init+0x2264>)
 801ad4c:	fb00 1003 	mla	r0, r0, r3, r1
 801ad50:	fb82 2300 	smull	r2, r3, r2, r0
 801ad54:	17c2      	asrs	r2, r0, #31
 801ad56:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 801ad5a:	b212      	sxth	r2, r2
 801ad5c:	f7fe b9c6 	b.w	80190ec <lv_theme_material_init+0x3ac>
    lv_style_set_pad_bottom(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
 801ad60:	2000      	movs	r0, #0
 801ad62:	f7f8 fdbd 	bl	80138e0 <lv_disp_get_dpi>
 801ad66:	2307      	movs	r3, #7
 801ad68:	2150      	movs	r1, #80	; 0x50
 801ad6a:	4a8e      	ldr	r2, [pc, #568]	; (801afa4 <lv_theme_material_init+0x2264>)
 801ad6c:	fb00 1003 	mla	r0, r0, r3, r1
 801ad70:	fb82 2300 	smull	r2, r3, r2, r0
 801ad74:	17c2      	asrs	r2, r0, #31
 801ad76:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 801ad7a:	b212      	sxth	r2, r2
 801ad7c:	f7fe b994 	b.w	80190a8 <lv_theme_material_init+0x368>
    lv_style_set_pad_top(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
 801ad80:	2000      	movs	r0, #0
 801ad82:	f7f8 fdad 	bl	80138e0 <lv_disp_get_dpi>
 801ad86:	2307      	movs	r3, #7
 801ad88:	2150      	movs	r1, #80	; 0x50
 801ad8a:	4a86      	ldr	r2, [pc, #536]	; (801afa4 <lv_theme_material_init+0x2264>)
 801ad8c:	fb00 1003 	mla	r0, r0, r3, r1
 801ad90:	fb82 2300 	smull	r2, r3, r2, r0
 801ad94:	17c2      	asrs	r2, r0, #31
 801ad96:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 801ad9a:	b212      	sxth	r2, r2
 801ad9c:	f7fe b975 	b.w	801908a <lv_theme_material_init+0x34a>
    lv_style_set_pad_right(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
 801ada0:	2000      	movs	r0, #0
 801ada2:	f7f8 fd9d 	bl	80138e0 <lv_disp_get_dpi>
 801ada6:	2307      	movs	r3, #7
 801ada8:	2150      	movs	r1, #80	; 0x50
 801adaa:	4a7e      	ldr	r2, [pc, #504]	; (801afa4 <lv_theme_material_init+0x2264>)
 801adac:	fb00 1003 	mla	r0, r0, r3, r1
 801adb0:	fb82 2300 	smull	r2, r3, r2, r0
 801adb4:	17c2      	asrs	r2, r0, #31
 801adb6:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 801adba:	b212      	sxth	r2, r2
 801adbc:	f7fe b956 	b.w	801906c <lv_theme_material_init+0x32c>
    lv_style_set_pad_left(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
 801adc0:	2000      	movs	r0, #0
 801adc2:	f7f8 fd8d 	bl	80138e0 <lv_disp_get_dpi>
 801adc6:	2307      	movs	r3, #7
 801adc8:	2150      	movs	r1, #80	; 0x50
 801adca:	4a76      	ldr	r2, [pc, #472]	; (801afa4 <lv_theme_material_init+0x2264>)
 801adcc:	fb00 1003 	mla	r0, r0, r3, r1
 801add0:	fb82 2300 	smull	r2, r3, r2, r0
 801add4:	17c2      	asrs	r2, r0, #31
 801add6:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 801adda:	b212      	sxth	r2, r2
 801addc:	f7fe b937 	b.w	801904e <lv_theme_material_init+0x30e>
    lv_style_set_shadow_spread(&styles->led, LV_STATE_DEFAULT, LV_DPX(5));
 801ade0:	2000      	movs	r0, #0
 801ade2:	f7f8 fd7d 	bl	80138e0 <lv_disp_get_dpi>
 801ade6:	2305      	movs	r3, #5
 801ade8:	2150      	movs	r1, #80	; 0x50
 801adea:	4a6e      	ldr	r2, [pc, #440]	; (801afa4 <lv_theme_material_init+0x2264>)
 801adec:	fb00 1003 	mla	r0, r0, r3, r1
 801adf0:	fb82 2300 	smull	r2, r3, r2, r0
 801adf4:	17c2      	asrs	r2, r0, #31
 801adf6:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 801adfa:	b212      	sxth	r2, r2
 801adfc:	f7fe b8cf 	b.w	8018f9e <lv_theme_material_init+0x25e>
    lv_style_set_shadow_width(&styles->led, LV_STATE_DEFAULT, LV_DPX(15));
 801ae00:	2000      	movs	r0, #0
 801ae02:	f7f8 fd6d 	bl	80138e0 <lv_disp_get_dpi>
 801ae06:	230f      	movs	r3, #15
 801ae08:	2150      	movs	r1, #80	; 0x50
 801ae0a:	4a66      	ldr	r2, [pc, #408]	; (801afa4 <lv_theme_material_init+0x2264>)
 801ae0c:	fb00 1003 	mla	r0, r0, r3, r1
 801ae10:	fb82 2300 	smull	r2, r3, r2, r0
 801ae14:	17c2      	asrs	r2, r0, #31
 801ae16:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 801ae1a:	b212      	sxth	r2, r2
 801ae1c:	f7fe b8a9 	b.w	8018f72 <lv_theme_material_init+0x232>
    lv_style_set_outline_width(&styles->bar_bg, LV_STATE_DEFAULT, OUTLINE_WIDTH);
 801ae20:	4628      	mov	r0, r5
 801ae22:	f7f8 fd5d 	bl	80138e0 <lv_disp_get_dpi>
 801ae26:	2877      	cmp	r0, #119	; 0x77
 801ae28:	f300 80a2 	bgt.w	801af70 <lv_theme_material_init+0x2230>
 801ae2c:	2201      	movs	r2, #1
 801ae2e:	f7fe b814 	b.w	8018e5a <lv_theme_material_init+0x11a>
        LV_GC_ROOT(_lv_theme_material_styles) = lv_mem_alloc(sizeof(theme_styles_t));
 801ae32:	20c0      	movs	r0, #192	; 0xc0
        styles = (theme_styles_t *)LV_GC_ROOT(_lv_theme_material_styles);
 801ae34:	4c5c      	ldr	r4, [pc, #368]	; (801afa8 <lv_theme_material_init+0x2268>)
        LV_GC_ROOT(_lv_theme_material_styles) = lv_mem_alloc(sizeof(theme_styles_t));
 801ae36:	f7f9 ffb3 	bl	8014da0 <lv_mem_alloc>
 801ae3a:	4b5c      	ldr	r3, [pc, #368]	; (801afac <lv_theme_material_init+0x226c>)
        styles = (theme_styles_t *)LV_GC_ROOT(_lv_theme_material_styles);
 801ae3c:	6020      	str	r0, [r4, #0]
        LV_GC_ROOT(_lv_theme_material_styles) = lv_mem_alloc(sizeof(theme_styles_t));
 801ae3e:	6018      	str	r0, [r3, #0]
        styles = (theme_styles_t *)LV_GC_ROOT(_lv_theme_material_styles);
 801ae40:	f7fd bf8c 	b.w	8018d5c <lv_theme_material_init+0x1c>
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_DEFAULT, - PAD_DEF);
 801ae44:	2000      	movs	r0, #0
 801ae46:	f7f8 fd4b 	bl	80138e0 <lv_disp_get_dpi>
 801ae4a:	231e      	movs	r3, #30
 801ae4c:	2150      	movs	r1, #80	; 0x50
 801ae4e:	4a55      	ldr	r2, [pc, #340]	; (801afa4 <lv_theme_material_init+0x2264>)
 801ae50:	fb00 1003 	mla	r0, r0, r3, r1
 801ae54:	fb82 2300 	smull	r2, r3, r2, r0
 801ae58:	17c2      	asrs	r2, r0, #31
 801ae5a:	eba2 12a3 	sub.w	r2, r2, r3, asr #6
 801ae5e:	b212      	sxth	r2, r2
 801ae60:	f7fe bf77 	b.w	8019d52 <lv_theme_material_init+0x1012>
    lv_style_set_pad_left(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
 801ae64:	2000      	movs	r0, #0
 801ae66:	f7f8 fd3b 	bl	80138e0 <lv_disp_get_dpi>
 801ae6a:	231e      	movs	r3, #30
 801ae6c:	2150      	movs	r1, #80	; 0x50
 801ae6e:	4a4d      	ldr	r2, [pc, #308]	; (801afa4 <lv_theme_material_init+0x2264>)
 801ae70:	fb00 1003 	mla	r0, r0, r3, r1
 801ae74:	fb82 2300 	smull	r2, r3, r2, r0
 801ae78:	17c2      	asrs	r2, r0, #31
 801ae7a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 801ae7e:	b212      	sxth	r2, r2
 801ae80:	f7fe beee 	b.w	8019c60 <lv_theme_material_init+0xf20>
    lv_style_set_pad_right(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
 801ae84:	2000      	movs	r0, #0
 801ae86:	f7f8 fd2b 	bl	80138e0 <lv_disp_get_dpi>
 801ae8a:	231e      	movs	r3, #30
 801ae8c:	2150      	movs	r1, #80	; 0x50
 801ae8e:	4a45      	ldr	r2, [pc, #276]	; (801afa4 <lv_theme_material_init+0x2264>)
 801ae90:	fb00 1003 	mla	r0, r0, r3, r1
 801ae94:	fb82 2300 	smull	r2, r3, r2, r0
 801ae98:	17c2      	asrs	r2, r0, #31
 801ae9a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 801ae9e:	b212      	sxth	r2, r2
 801aea0:	f7fe bef6 	b.w	8019c90 <lv_theme_material_init+0xf50>
    lv_style_set_pad_top(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
 801aea4:	2000      	movs	r0, #0
 801aea6:	f7f8 fd1b 	bl	80138e0 <lv_disp_get_dpi>
 801aeaa:	231e      	movs	r3, #30
 801aeac:	2150      	movs	r1, #80	; 0x50
 801aeae:	4a3d      	ldr	r2, [pc, #244]	; (801afa4 <lv_theme_material_init+0x2264>)
 801aeb0:	fb00 1003 	mla	r0, r0, r3, r1
 801aeb4:	fb82 2300 	smull	r2, r3, r2, r0
 801aeb8:	17c2      	asrs	r2, r0, #31
 801aeba:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 801aebe:	b212      	sxth	r2, r2
 801aec0:	f7fe befe 	b.w	8019cc0 <lv_theme_material_init+0xf80>
    lv_style_set_pad_bottom(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
 801aec4:	2000      	movs	r0, #0
 801aec6:	f7f8 fd0b 	bl	80138e0 <lv_disp_get_dpi>
 801aeca:	231e      	movs	r3, #30
 801aecc:	2150      	movs	r1, #80	; 0x50
 801aece:	4a35      	ldr	r2, [pc, #212]	; (801afa4 <lv_theme_material_init+0x2264>)
 801aed0:	fb00 1003 	mla	r0, r0, r3, r1
 801aed4:	fb82 2300 	smull	r2, r3, r2, r0
 801aed8:	17c2      	asrs	r2, r0, #31
 801aeda:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 801aede:	b212      	sxth	r2, r2
 801aee0:	f7fe bf06 	b.w	8019cf0 <lv_theme_material_init+0xfb0>
    lv_style_set_pad_inner(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
 801aee4:	2000      	movs	r0, #0
 801aee6:	f7f8 fcfb 	bl	80138e0 <lv_disp_get_dpi>
 801aeea:	231e      	movs	r3, #30
 801aeec:	2150      	movs	r1, #80	; 0x50
 801aeee:	4a2d      	ldr	r2, [pc, #180]	; (801afa4 <lv_theme_material_init+0x2264>)
 801aef0:	fb00 1003 	mla	r0, r0, r3, r1
 801aef4:	fb82 2300 	smull	r2, r3, r2, r0
 801aef8:	17c2      	asrs	r2, r0, #31
 801aefa:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 801aefe:	b212      	sxth	r2, r2
 801af00:	f7fe bf0e 	b.w	8019d20 <lv_theme_material_init+0xfe0>
    lv_style_set_pad_inner(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
 801af04:	2000      	movs	r0, #0
 801af06:	f7f8 fceb 	bl	80138e0 <lv_disp_get_dpi>
 801af0a:	231e      	movs	r3, #30
 801af0c:	f7ff bbd3 	b.w	801a6b6 <lv_theme_material_init+0x1976>
    lv_style_set_pad_right(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
 801af10:	2000      	movs	r0, #0
 801af12:	f7f8 fce5 	bl	80138e0 <lv_disp_get_dpi>
 801af16:	231e      	movs	r3, #30
 801af18:	f7ff bbe3 	b.w	801a6e2 <lv_theme_material_init+0x19a2>
    lv_style_set_pad_left(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
 801af1c:	2000      	movs	r0, #0
 801af1e:	f7f8 fcdf 	bl	80138e0 <lv_disp_get_dpi>
 801af22:	231e      	movs	r3, #30
 801af24:	f7ff bbf3 	b.w	801a70e <lv_theme_material_init+0x19ce>
    lv_style_set_pad_right(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
 801af28:	2000      	movs	r0, #0
 801af2a:	f7f8 fcd9 	bl	80138e0 <lv_disp_get_dpi>
 801af2e:	231e      	movs	r3, #30
 801af30:	f7ff bb4c 	b.w	801a5cc <lv_theme_material_init+0x188c>
    lv_style_set_pad_left(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
 801af34:	2000      	movs	r0, #0
 801af36:	f7f8 fcd3 	bl	80138e0 <lv_disp_get_dpi>
 801af3a:	231e      	movs	r3, #30
 801af3c:	f7ff bb5c 	b.w	801a5f8 <lv_theme_material_init+0x18b8>
    lv_style_set_pad_bottom(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
 801af40:	2000      	movs	r0, #0
 801af42:	f7f8 fccd 	bl	80138e0 <lv_disp_get_dpi>
 801af46:	231e      	movs	r3, #30
 801af48:	f7ff bbf7 	b.w	801a73a <lv_theme_material_init+0x19fa>
    lv_style_set_pad_top(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
 801af4c:	2000      	movs	r0, #0
 801af4e:	f7f8 fcc7 	bl	80138e0 <lv_disp_get_dpi>
 801af52:	231e      	movs	r3, #30
 801af54:	f7ff bb99 	b.w	801a68a <lv_theme_material_init+0x194a>
    lv_style_set_pad_bottom(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
 801af58:	2000      	movs	r0, #0
 801af5a:	f7f8 fcc1 	bl	80138e0 <lv_disp_get_dpi>
 801af5e:	231e      	movs	r3, #30
 801af60:	f7ff bb08 	b.w	801a574 <lv_theme_material_init+0x1834>
    lv_style_set_pad_top(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
 801af64:	2000      	movs	r0, #0
 801af66:	f7f8 fcbb 	bl	80138e0 <lv_disp_get_dpi>
 801af6a:	231e      	movs	r3, #30
 801af6c:	f7ff bb18 	b.w	801a5a0 <lv_theme_material_init+0x1860>
    lv_style_set_outline_width(&styles->bar_bg, LV_STATE_DEFAULT, OUTLINE_WIDTH);
 801af70:	4628      	mov	r0, r5
 801af72:	f7f8 fcb5 	bl	80138e0 <lv_disp_get_dpi>
 801af76:	4b0b      	ldr	r3, [pc, #44]	; (801afa4 <lv_theme_material_init+0x2264>)
 801af78:	3028      	adds	r0, #40	; 0x28
 801af7a:	fb83 2300 	smull	r2, r3, r3, r0
 801af7e:	17c2      	asrs	r2, r0, #31
 801af80:	ebc2 1263 	rsb	r2, r2, r3, asr #5
 801af84:	b212      	sxth	r2, r2
 801af86:	f7fd bf68 	b.w	8018e5a <lv_theme_material_init+0x11a>
    lv_style_set_outline_width(&styles->list_btn, LV_STATE_FOCUSED, OUTLINE_WIDTH);
 801af8a:	4628      	mov	r0, r5
 801af8c:	f7f8 fca8 	bl	80138e0 <lv_disp_get_dpi>
 801af90:	4b04      	ldr	r3, [pc, #16]	; (801afa4 <lv_theme_material_init+0x2264>)
 801af92:	3028      	adds	r0, #40	; 0x28
 801af94:	fb83 2300 	smull	r2, r3, r3, r0
 801af98:	17c2      	asrs	r2, r0, #31
 801af9a:	ebc2 1263 	rsb	r2, r2, r3, asr #5
 801af9e:	b212      	sxth	r2, r2
 801afa0:	f7fe be35 	b.w	8019c0e <lv_theme_material_init+0xece>
 801afa4:	66666667 	.word	0x66666667
 801afa8:	200201a8 	.word	0x200201a8
 801afac:	200204e0 	.word	0x200204e0

0801afb0 <lv_btn_design>:
 *             LV_DESIGN_DRAW_POST: drawing after every children are drawn
 * @param return an element of `lv_design_res_t`
 */
static lv_design_res_t lv_btn_design(lv_obj_t * btn, const lv_area_t * clip_area, lv_design_mode_t mode)
{
    if(mode == LV_DESIGN_COVER_CHK) {
 801afb0:	2a02      	cmp	r2, #2
 801afb2:	d00a      	beq.n	801afca <lv_btn_design+0x1a>
{
 801afb4:	b510      	push	{r4, lr}
        return ancestor_design(btn, clip_area, mode);
    }
    else if(mode == LV_DESIGN_DRAW_MAIN) {
 801afb6:	b922      	cbnz	r2, 801afc2 <lv_btn_design+0x12>
        ancestor_design(btn, clip_area, mode);
    }
    else if(mode == LV_DESIGN_DRAW_POST) {
        ancestor_design(btn, clip_area, mode);
 801afb8:	4b05      	ldr	r3, [pc, #20]	; (801afd0 <lv_btn_design+0x20>)
 801afba:	681b      	ldr	r3, [r3, #0]
 801afbc:	4798      	blx	r3
    }

    return LV_DESIGN_RES_OK;
}
 801afbe:	2000      	movs	r0, #0
 801afc0:	bd10      	pop	{r4, pc}
    else if(mode == LV_DESIGN_DRAW_POST) {
 801afc2:	2a01      	cmp	r2, #1
 801afc4:	d0f8      	beq.n	801afb8 <lv_btn_design+0x8>
}
 801afc6:	2000      	movs	r0, #0
 801afc8:	bd10      	pop	{r4, pc}
        return ancestor_design(btn, clip_area, mode);
 801afca:	4b01      	ldr	r3, [pc, #4]	; (801afd0 <lv_btn_design+0x20>)
 801afcc:	681b      	ldr	r3, [r3, #0]
 801afce:	4718      	bx	r3
 801afd0:	200201d8 	.word	0x200201d8

0801afd4 <lv_btn_signal>:
static lv_res_t lv_btn_signal(lv_obj_t * btn, lv_signal_t sign, void * param)
{
    lv_res_t res;

    /* Include the ancient signal function */
    res = ancestor_signal(btn, sign, param);
 801afd4:	4b61      	ldr	r3, [pc, #388]	; (801b15c <lv_btn_signal+0x188>)
{
 801afd6:	b5f0      	push	{r4, r5, r6, r7, lr}
    res = ancestor_signal(btn, sign, param);
 801afd8:	681b      	ldr	r3, [r3, #0]
{
 801afda:	b083      	sub	sp, #12
 801afdc:	4607      	mov	r7, r0
 801afde:	460e      	mov	r6, r1
 801afe0:	4615      	mov	r5, r2
    res = ancestor_signal(btn, sign, param);
 801afe2:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 801afe4:	2801      	cmp	r0, #1
    res = ancestor_signal(btn, sign, param);
 801afe6:	4604      	mov	r4, r0
    if(res != LV_RES_OK) return res;
 801afe8:	d146      	bne.n	801b078 <lv_btn_signal+0xa4>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
 801afea:	2e07      	cmp	r6, #7
 801afec:	d04d      	beq.n	801b08a <lv_btn_signal+0xb6>
    LV_ASSERT_OBJ(btn, LV_OBJX_NAME);
 801afee:	4638      	mov	r0, r7
 801aff0:	f7f9 fbea 	bl	80147c8 <lv_debug_check_null>
 801aff4:	2800      	cmp	r0, #0
 801aff6:	d042      	beq.n	801b07e <lv_btn_signal+0xaa>
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 801aff8:	4638      	mov	r0, r7
 801affa:	f7eb fa5f 	bl	80064bc <lv_obj_get_ext_attr>

    bool tgl           = lv_btn_get_checkable(btn);

    if(sign == LV_SIGNAL_RELEASED) {
 801affe:	2e0e      	cmp	r6, #14
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 801b000:	4603      	mov	r3, r0
    if(sign == LV_SIGNAL_RELEASED) {
 801b002:	d015      	beq.n	801b030 <lv_btn_signal+0x5c>

            res = lv_event_send(btn, LV_EVENT_VALUE_CHANGED, &toggled);
            if(res != LV_RES_OK) return res;
        }
    }
    else if(sign == LV_SIGNAL_CONTROL) {
 801b004:	2e18      	cmp	r6, #24
 801b006:	d137      	bne.n	801b078 <lv_btn_signal+0xa4>
#if LV_USE_GROUP
        char c = *((char *)param);
 801b008:	782b      	ldrb	r3, [r5, #0]
        if(c == LV_KEY_RIGHT || c == LV_KEY_UP) {
 801b00a:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 801b00e:	2a11      	cmp	r2, #17
 801b010:	d043      	beq.n	801b09a <lv_btn_signal+0xc6>
                res            = lv_event_send(btn, LV_EVENT_VALUE_CHANGED, &state);
                if(res != LV_RES_OK) return res;
            }

        }
        else if(c == LV_KEY_LEFT || c == LV_KEY_DOWN) {
 801b012:	2b14      	cmp	r3, #20
 801b014:	d001      	beq.n	801b01a <lv_btn_signal+0x46>
 801b016:	2b12      	cmp	r3, #18
 801b018:	d12e      	bne.n	801b078 <lv_btn_signal+0xa4>
    LV_ASSERT_OBJ(btn, LV_OBJX_NAME);
 801b01a:	4638      	mov	r0, r7
 801b01c:	f7f9 fbd4 	bl	80147c8 <lv_debug_check_null>
 801b020:	2800      	cmp	r0, #0
 801b022:	d15f      	bne.n	801b0e4 <lv_btn_signal+0x110>
 801b024:	4603      	mov	r3, r0
 801b026:	463a      	mov	r2, r7
 801b028:	484d      	ldr	r0, [pc, #308]	; (801b160 <lv_btn_signal+0x18c>)
 801b02a:	f7f9 fbd1 	bl	80147d0 <lv_debug_log_error>
 801b02e:	e7fe      	b.n	801b02e <lv_btn_signal+0x5a>
        if(lv_indev_is_dragging(param) == false && tgl) {
 801b030:	4628      	mov	r0, r5
    return ext->checkable != 0 ? true : false;
 801b032:	789d      	ldrb	r5, [r3, #2]
        if(lv_indev_is_dragging(param) == false && tgl) {
 801b034:	f7e6 ff16 	bl	8001e64 <lv_indev_is_dragging>
 801b038:	f080 0001 	eor.w	r0, r0, #1
 801b03c:	f010 0fff 	tst.w	r0, #255	; 0xff
 801b040:	d01a      	beq.n	801b078 <lv_btn_signal+0xa4>
 801b042:	07e9      	lsls	r1, r5, #31
 801b044:	d518      	bpl.n	801b078 <lv_btn_signal+0xa4>
            uint32_t toggled = 0;
 801b046:	2500      	movs	r5, #0
            if(lv_obj_get_state(btn, LV_BTN_PART_MAIN) & LV_STATE_CHECKED) {
 801b048:	4638      	mov	r0, r7
 801b04a:	4629      	mov	r1, r5
            uint32_t toggled = 0;
 801b04c:	9501      	str	r5, [sp, #4]
            if(lv_obj_get_state(btn, LV_BTN_PART_MAIN) & LV_STATE_CHECKED) {
 801b04e:	f7eb f9eb 	bl	8006428 <lv_obj_get_state>
 801b052:	f010 0f01 	tst.w	r0, #1
    LV_ASSERT_OBJ(btn, LV_OBJX_NAME);
 801b056:	4638      	mov	r0, r7
            if(lv_obj_get_state(btn, LV_BTN_PART_MAIN) & LV_STATE_CHECKED) {
 801b058:	d05b      	beq.n	801b112 <lv_btn_signal+0x13e>
    LV_ASSERT_OBJ(btn, LV_OBJX_NAME);
 801b05a:	f7f9 fbb5 	bl	80147c8 <lv_debug_check_null>
 801b05e:	2800      	cmp	r0, #0
 801b060:	d064      	beq.n	801b12c <lv_btn_signal+0x158>
            lv_obj_clear_state(btn, LV_STATE_PRESSED | LV_STATE_CHECKED | LV_STATE_DISABLED);
 801b062:	2131      	movs	r1, #49	; 0x31
 801b064:	4638      	mov	r0, r7
 801b066:	f7ec fbc7 	bl	80077f8 <lv_obj_clear_state>
                toggled = 0;
 801b06a:	9501      	str	r5, [sp, #4]
            res = lv_event_send(btn, LV_EVENT_VALUE_CHANGED, &toggled);
 801b06c:	4638      	mov	r0, r7
 801b06e:	aa01      	add	r2, sp, #4
 801b070:	2110      	movs	r1, #16
 801b072:	f7e8 fb9f 	bl	80037b4 <lv_event_send>
 801b076:	4604      	mov	r4, r0
        }
#endif
    }

    return res;
}
 801b078:	4620      	mov	r0, r4
 801b07a:	b003      	add	sp, #12
 801b07c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    LV_ASSERT_OBJ(btn, LV_OBJX_NAME);
 801b07e:	4603      	mov	r3, r0
 801b080:	463a      	mov	r2, r7
 801b082:	4837      	ldr	r0, [pc, #220]	; (801b160 <lv_btn_signal+0x18c>)
 801b084:	f7f9 fba4 	bl	80147d0 <lv_debug_log_error>
 801b088:	e7fe      	b.n	801b088 <lv_btn_signal+0xb4>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
 801b08a:	4628      	mov	r0, r5
 801b08c:	4935      	ldr	r1, [pc, #212]	; (801b164 <lv_btn_signal+0x190>)
 801b08e:	f7eb fa7b 	bl	8006588 <lv_obj_handle_get_type_signal>
 801b092:	4604      	mov	r4, r0
}
 801b094:	4620      	mov	r0, r4
 801b096:	b003      	add	sp, #12
 801b098:	bdf0      	pop	{r4, r5, r6, r7, pc}
    LV_ASSERT_OBJ(btn, LV_OBJX_NAME);
 801b09a:	4638      	mov	r0, r7
 801b09c:	f7f9 fb94 	bl	80147c8 <lv_debug_check_null>
 801b0a0:	b928      	cbnz	r0, 801b0ae <lv_btn_signal+0xda>
 801b0a2:	4603      	mov	r3, r0
 801b0a4:	463a      	mov	r2, r7
 801b0a6:	482e      	ldr	r0, [pc, #184]	; (801b160 <lv_btn_signal+0x18c>)
 801b0a8:	f7f9 fb92 	bl	80147d0 <lv_debug_log_error>
 801b0ac:	e7fe      	b.n	801b0ac <lv_btn_signal+0xd8>
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 801b0ae:	4638      	mov	r0, r7
 801b0b0:	f7eb fa04 	bl	80064bc <lv_obj_get_ext_attr>
    return ext->checkable != 0 ? true : false;
 801b0b4:	7883      	ldrb	r3, [r0, #2]
            if(lv_btn_get_checkable(btn)) {
 801b0b6:	07da      	lsls	r2, r3, #31
 801b0b8:	d5de      	bpl.n	801b078 <lv_btn_signal+0xa4>
    LV_ASSERT_OBJ(btn, LV_OBJX_NAME);
 801b0ba:	4638      	mov	r0, r7
 801b0bc:	f7f9 fb84 	bl	80147c8 <lv_debug_check_null>
 801b0c0:	2800      	cmp	r0, #0
 801b0c2:	d03f      	beq.n	801b144 <lv_btn_signal+0x170>
            lv_obj_add_state(btn, LV_STATE_CHECKED);
 801b0c4:	4621      	mov	r1, r4
 801b0c6:	4638      	mov	r0, r7
 801b0c8:	f7ec fb6a 	bl	80077a0 <lv_obj_add_state>
            lv_obj_clear_state(btn, LV_STATE_PRESSED | LV_STATE_DISABLED);
 801b0cc:	2130      	movs	r1, #48	; 0x30
 801b0ce:	4638      	mov	r0, r7
 801b0d0:	f7ec fb92 	bl	80077f8 <lv_obj_clear_state>
                res            = lv_event_send(btn, LV_EVENT_VALUE_CHANGED, &state);
 801b0d4:	4638      	mov	r0, r7
 801b0d6:	aa01      	add	r2, sp, #4
 801b0d8:	2110      	movs	r1, #16
                uint32_t state = 1;
 801b0da:	9401      	str	r4, [sp, #4]
                res            = lv_event_send(btn, LV_EVENT_VALUE_CHANGED, &state);
 801b0dc:	f7e8 fb6a 	bl	80037b4 <lv_event_send>
 801b0e0:	4604      	mov	r4, r0
                if(res != LV_RES_OK) return res;
 801b0e2:	e7c9      	b.n	801b078 <lv_btn_signal+0xa4>
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 801b0e4:	4638      	mov	r0, r7
 801b0e6:	f7eb f9e9 	bl	80064bc <lv_obj_get_ext_attr>
    return ext->checkable != 0 ? true : false;
 801b0ea:	7883      	ldrb	r3, [r0, #2]
            if(lv_btn_get_checkable(btn)) {
 801b0ec:	07db      	lsls	r3, r3, #31
 801b0ee:	d5c3      	bpl.n	801b078 <lv_btn_signal+0xa4>
    LV_ASSERT_OBJ(btn, LV_OBJX_NAME);
 801b0f0:	4638      	mov	r0, r7
 801b0f2:	f7f9 fb69 	bl	80147c8 <lv_debug_check_null>
 801b0f6:	b358      	cbz	r0, 801b150 <lv_btn_signal+0x17c>
            lv_obj_clear_state(btn, LV_STATE_PRESSED | LV_STATE_CHECKED | LV_STATE_DISABLED);
 801b0f8:	2131      	movs	r1, #49	; 0x31
 801b0fa:	4638      	mov	r0, r7
 801b0fc:	f7ec fb7c 	bl	80077f8 <lv_obj_clear_state>
                uint32_t state = 0;
 801b100:	2300      	movs	r3, #0
                res            = lv_event_send(btn, LV_EVENT_VALUE_CHANGED, &state);
 801b102:	4638      	mov	r0, r7
 801b104:	aa01      	add	r2, sp, #4
 801b106:	2110      	movs	r1, #16
                uint32_t state = 0;
 801b108:	9301      	str	r3, [sp, #4]
                res            = lv_event_send(btn, LV_EVENT_VALUE_CHANGED, &state);
 801b10a:	f7e8 fb53 	bl	80037b4 <lv_event_send>
 801b10e:	4604      	mov	r4, r0
                if(res != LV_RES_OK) return res;
 801b110:	e7b2      	b.n	801b078 <lv_btn_signal+0xa4>
    LV_ASSERT_OBJ(btn, LV_OBJX_NAME);
 801b112:	f7f9 fb59 	bl	80147c8 <lv_debug_check_null>
 801b116:	b178      	cbz	r0, 801b138 <lv_btn_signal+0x164>
            lv_obj_add_state(btn, LV_STATE_CHECKED);
 801b118:	4621      	mov	r1, r4
 801b11a:	4638      	mov	r0, r7
 801b11c:	f7ec fb40 	bl	80077a0 <lv_obj_add_state>
            lv_obj_clear_state(btn, LV_STATE_PRESSED | LV_STATE_DISABLED);
 801b120:	2130      	movs	r1, #48	; 0x30
 801b122:	4638      	mov	r0, r7
 801b124:	f7ec fb68 	bl	80077f8 <lv_obj_clear_state>
                toggled = 1;
 801b128:	9401      	str	r4, [sp, #4]
 801b12a:	e79f      	b.n	801b06c <lv_btn_signal+0x98>
    LV_ASSERT_OBJ(btn, LV_OBJX_NAME);
 801b12c:	4603      	mov	r3, r0
 801b12e:	463a      	mov	r2, r7
 801b130:	480b      	ldr	r0, [pc, #44]	; (801b160 <lv_btn_signal+0x18c>)
 801b132:	f7f9 fb4d 	bl	80147d0 <lv_debug_log_error>
 801b136:	e7fe      	b.n	801b136 <lv_btn_signal+0x162>
 801b138:	4603      	mov	r3, r0
 801b13a:	463a      	mov	r2, r7
 801b13c:	4808      	ldr	r0, [pc, #32]	; (801b160 <lv_btn_signal+0x18c>)
 801b13e:	f7f9 fb47 	bl	80147d0 <lv_debug_log_error>
 801b142:	e7fe      	b.n	801b142 <lv_btn_signal+0x16e>
 801b144:	4603      	mov	r3, r0
 801b146:	463a      	mov	r2, r7
 801b148:	4805      	ldr	r0, [pc, #20]	; (801b160 <lv_btn_signal+0x18c>)
 801b14a:	f7f9 fb41 	bl	80147d0 <lv_debug_log_error>
 801b14e:	e7fe      	b.n	801b14e <lv_btn_signal+0x17a>
 801b150:	4603      	mov	r3, r0
 801b152:	463a      	mov	r2, r7
 801b154:	4802      	ldr	r0, [pc, #8]	; (801b160 <lv_btn_signal+0x18c>)
 801b156:	f7f9 fb3b 	bl	80147d0 <lv_debug_log_error>
 801b15a:	e7fe      	b.n	801b15a <lv_btn_signal+0x186>
 801b15c:	200201dc 	.word	0x200201dc
 801b160:	0801e1d4 	.word	0x0801e1d4
 801b164:	080218a4 	.word	0x080218a4

0801b168 <lv_btn_create>:
{
 801b168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b16a:	4607      	mov	r7, r0
 801b16c:	460e      	mov	r6, r1
    btn = lv_cont_create(par, copy);
 801b16e:	f000 fea1 	bl	801beb4 <lv_cont_create>
 801b172:	4604      	mov	r4, r0
    LV_ASSERT_MEM(btn);
 801b174:	f7f9 fb28 	bl	80147c8 <lv_debug_check_null>
 801b178:	2800      	cmp	r0, #0
 801b17a:	d034      	beq.n	801b1e6 <lv_btn_create+0x7e>
    if(btn == NULL) return NULL;
 801b17c:	b364      	cbz	r4, 801b1d8 <lv_btn_create+0x70>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(btn);
 801b17e:	4d30      	ldr	r5, [pc, #192]	; (801b240 <lv_btn_create+0xd8>)
 801b180:	682b      	ldr	r3, [r5, #0]
 801b182:	2b00      	cmp	r3, #0
 801b184:	d049      	beq.n	801b21a <lv_btn_create+0xb2>
    if(ancestor_design == NULL) ancestor_design = lv_obj_get_design_cb(btn);
 801b186:	4d2f      	ldr	r5, [pc, #188]	; (801b244 <lv_btn_create+0xdc>)
 801b188:	682b      	ldr	r3, [r5, #0]
 801b18a:	2b00      	cmp	r3, #0
 801b18c:	d04d      	beq.n	801b22a <lv_btn_create+0xc2>
    lv_btn_ext_t * ext = lv_obj_allocate_ext_attr(btn, sizeof(lv_btn_ext_t));
 801b18e:	2103      	movs	r1, #3
 801b190:	4620      	mov	r0, r4
 801b192:	f7e8 fb53 	bl	800383c <lv_obj_allocate_ext_attr>
 801b196:	4605      	mov	r5, r0
    LV_ASSERT_MEM(ext);
 801b198:	f7f9 fb16 	bl	80147c8 <lv_debug_check_null>
 801b19c:	4603      	mov	r3, r0
 801b19e:	b1e8      	cbz	r0, 801b1dc <lv_btn_create+0x74>
    if(ext == NULL) {
 801b1a0:	2d00      	cmp	r5, #0
 801b1a2:	d047      	beq.n	801b234 <lv_btn_create+0xcc>
    ext->checkable = 0;
 801b1a4:	78ab      	ldrb	r3, [r5, #2]
    lv_obj_set_signal_cb(btn, lv_btn_signal);
 801b1a6:	4620      	mov	r0, r4
 801b1a8:	4927      	ldr	r1, [pc, #156]	; (801b248 <lv_btn_create+0xe0>)
    ext->checkable = 0;
 801b1aa:	f36f 0300 	bfc	r3, #0, #1
 801b1ae:	70ab      	strb	r3, [r5, #2]
    lv_obj_set_signal_cb(btn, lv_btn_signal);
 801b1b0:	f7e8 fb1e 	bl	80037f0 <lv_obj_set_signal_cb>
    lv_obj_set_design_cb(btn, lv_btn_design);
 801b1b4:	4925      	ldr	r1, [pc, #148]	; (801b24c <lv_btn_create+0xe4>)
 801b1b6:	4620      	mov	r0, r4
 801b1b8:	f7e8 fb30 	bl	800381c <lv_obj_set_design_cb>
    if(copy == NULL) {
 801b1bc:	b1ce      	cbz	r6, 801b1f2 <lv_btn_create+0x8a>
        lv_btn_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 801b1be:	4630      	mov	r0, r6
 801b1c0:	f7eb f97c 	bl	80064bc <lv_obj_get_ext_attr>
        ext->checkable             = copy_ext->checkable;
 801b1c4:	78ab      	ldrb	r3, [r5, #2]
 801b1c6:	7881      	ldrb	r1, [r0, #2]
        lv_obj_refresh_style(btn, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
 801b1c8:	22ff      	movs	r2, #255	; 0xff
 801b1ca:	4620      	mov	r0, r4
        ext->checkable             = copy_ext->checkable;
 801b1cc:	f361 0300 	bfi	r3, r1, #0, #1
        lv_obj_refresh_style(btn, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
 801b1d0:	4611      	mov	r1, r2
        ext->checkable             = copy_ext->checkable;
 801b1d2:	70ab      	strb	r3, [r5, #2]
        lv_obj_refresh_style(btn, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
 801b1d4:	f7ea fe4a 	bl	8005e6c <lv_obj_refresh_style>
}
 801b1d8:	4620      	mov	r0, r4
 801b1da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    LV_ASSERT_MEM(ext);
 801b1dc:	462a      	mov	r2, r5
 801b1de:	481c      	ldr	r0, [pc, #112]	; (801b250 <lv_btn_create+0xe8>)
 801b1e0:	f7f9 faf6 	bl	80147d0 <lv_debug_log_error>
 801b1e4:	e7fe      	b.n	801b1e4 <lv_btn_create+0x7c>
 801b1e6:	4603      	mov	r3, r0
    LV_ASSERT_MEM(btn);
 801b1e8:	4622      	mov	r2, r4
 801b1ea:	4819      	ldr	r0, [pc, #100]	; (801b250 <lv_btn_create+0xe8>)
 801b1ec:	f7f9 faf0 	bl	80147d0 <lv_debug_log_error>
 801b1f0:	e7fe      	b.n	801b1f0 <lv_btn_create+0x88>
        if(par) {
 801b1f2:	b147      	cbz	r7, 801b206 <lv_btn_create+0x9e>
            lv_obj_set_size(btn, LV_DPI, LV_DPI / 3);
 801b1f4:	2182      	movs	r1, #130	; 0x82
 801b1f6:	4620      	mov	r0, r4
 801b1f8:	222b      	movs	r2, #43	; 0x2b
 801b1fa:	f7e9 fcad 	bl	8004b58 <lv_obj_set_size>
 * @param btn pointer to a button object
 * @param layout a layout from 'lv_cont_layout_t'
 */
static inline void lv_btn_set_layout(lv_obj_t * btn, lv_layout_t layout)
{
    lv_cont_set_layout(btn, layout);
 801b1fe:	2101      	movs	r1, #1
 801b200:	4620      	mov	r0, r4
 801b202:	f000 fed9 	bl	801bfb8 <lv_cont_set_layout>
        lv_obj_set_click(btn, true); /*Be sure the button is clickable*/
 801b206:	4620      	mov	r0, r4
 801b208:	2101      	movs	r1, #1
 801b20a:	f7e8 fa2f 	bl	800366c <lv_obj_set_click>
        lv_theme_apply(btn, LV_THEME_BTN);
 801b20e:	4620      	mov	r0, r4
 801b210:	2105      	movs	r1, #5
 801b212:	f7fb f84f 	bl	80162b4 <lv_theme_apply>
}
 801b216:	4620      	mov	r0, r4
 801b218:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(btn);
 801b21a:	4620      	mov	r0, r4
 801b21c:	f7eb f92e 	bl	800647c <lv_obj_get_signal_cb>
 801b220:	6028      	str	r0, [r5, #0]
    if(ancestor_design == NULL) ancestor_design = lv_obj_get_design_cb(btn);
 801b222:	4d08      	ldr	r5, [pc, #32]	; (801b244 <lv_btn_create+0xdc>)
 801b224:	682b      	ldr	r3, [r5, #0]
 801b226:	2b00      	cmp	r3, #0
 801b228:	d1b1      	bne.n	801b18e <lv_btn_create+0x26>
 801b22a:	4620      	mov	r0, r4
 801b22c:	f7eb f936 	bl	800649c <lv_obj_get_design_cb>
 801b230:	6028      	str	r0, [r5, #0]
 801b232:	e7ac      	b.n	801b18e <lv_btn_create+0x26>
        lv_obj_del(btn);
 801b234:	4620      	mov	r0, r4
        return NULL;
 801b236:	462c      	mov	r4, r5
        lv_obj_del(btn);
 801b238:	f7e9 fcc8 	bl	8004bcc <lv_obj_del>
        return NULL;
 801b23c:	e7cc      	b.n	801b1d8 <lv_btn_create+0x70>
 801b23e:	bf00      	nop
 801b240:	200201dc 	.word	0x200201dc
 801b244:	200201d8 	.word	0x200201d8
 801b248:	0801afd5 	.word	0x0801afd5
 801b24c:	0801afb1 	.word	0x0801afb1
 801b250:	0801e1c4 	.word	0x0801e1c4

0801b254 <lv_cont_refr_autofit.part.0>:

/**
 * Handle auto fit. Set the size of the object to involve all children.
 * @param cont pointer to an object which size will be modified
 */
static void lv_cont_refr_autofit(lv_obj_t * cont)
 801b254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b258:	b08d      	sub	sp, #52	; 0x34
 801b25a:	4604      	mov	r4, r0
{
    if(lv_obj_is_protected(cont, LV_PROTECT_CHILD_CHG)) return;
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 801b25c:	f7eb f92e 	bl	80064bc <lv_obj_get_ext_attr>

    if(ext->fit_left == LV_FIT_NONE && ext->fit_right == LV_FIT_NONE && ext->fit_top == LV_FIT_NONE &&
 801b260:	7803      	ldrb	r3, [r0, #0]
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 801b262:	4605      	mov	r5, r0
    if(ext->fit_left == LV_FIT_NONE && ext->fit_right == LV_FIT_NONE && ext->fit_top == LV_FIT_NONE &&
 801b264:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 801b268:	d102      	bne.n	801b270 <lv_cont_refr_autofit.part.0+0x1c>
 801b26a:	7843      	ldrb	r3, [r0, #1]
 801b26c:	071b      	lsls	r3, r3, #28
 801b26e:	d006      	beq.n	801b27e <lv_cont_refr_autofit.part.0+0x2a>
       ext->fit_bottom == LV_FIT_NONE) {
        return;
    }

    static int recursion_level = 0;
    recursion_level++;
 801b270:	4fd0      	ldr	r7, [pc, #832]	; (801b5b4 <lv_cont_refr_autofit.part.0+0x360>)
 801b272:	683b      	ldr	r3, [r7, #0]
 801b274:	1c5a      	adds	r2, r3, #1
    /*Ensure it won't keep recursing forever*/
    if(recursion_level <= LV_LAYOUT_MAX_RECURSION) {
 801b276:	2a0a      	cmp	r2, #10
    recursion_level++;
 801b278:	603a      	str	r2, [r7, #0]
    if(recursion_level <= LV_LAYOUT_MAX_RECURSION) {
 801b27a:	dd03      	ble.n	801b284 <lv_cont_refr_autofit.part.0+0x30>
    }
    else {
        LV_LOG_ERROR("LV_LAYOUT_MAX_RECURSION reached! You may have encountered issue #1539.");
    }

    recursion_level--;
 801b27c:	603b      	str	r3, [r7, #0]
}
 801b27e:	b00d      	add	sp, #52	; 0x34
 801b280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        lv_obj_t * par               = lv_obj_get_parent(cont);
 801b284:	4620      	mov	r0, r4
        lv_obj_get_coords(cont, &ori);
 801b286:	f10d 0818 	add.w	r8, sp, #24
        lv_obj_t * par               = lv_obj_get_parent(cont);
 801b28a:	f7e9 fcd3 	bl	8004c34 <lv_obj_get_parent>
 801b28e:	4601      	mov	r1, r0
 801b290:	4681      	mov	r9, r0
LV_ATTRIBUTE_FAST_MEM static inline void * _lv_memcpy_small(void * dst, const void * src, size_t len)
{
    uint8_t * d8 = (uint8_t *)dst;
    const uint8_t * s8 = (const uint8_t *)src;

    while(len) {
 801b292:	ab08      	add	r3, sp, #32
 801b294:	f851 0f10 	ldr.w	r0, [r1, #16]!
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ANGLE, transform_angle, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ZOOM, transform_zoom, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
 801b298:	2212      	movs	r2, #18
        bool has_children = _lv_ll_is_empty(&cont->child_ll) ? false : true;
 801b29a:	1d26      	adds	r6, r4, #4
 801b29c:	6849      	ldr	r1, [r1, #4]
 801b29e:	c303      	stmia	r3!, {r0, r1}
 801b2a0:	2100      	movs	r1, #0
 801b2a2:	4648      	mov	r0, r9
 801b2a4:	f7ea f97c 	bl	80055a0 <_lv_obj_get_style_int>
        parent_area.x1 += lv_obj_get_style_pad_left(par, LV_OBJ_PART_MAIN);
 801b2a8:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801b2ac:	4682      	mov	sl, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
 801b2ae:	2213      	movs	r2, #19
 801b2b0:	2100      	movs	r1, #0
 801b2b2:	4648      	mov	r0, r9
 801b2b4:	449a      	add	sl, r3
 801b2b6:	fa0f fa8a 	sxth.w	sl, sl
 801b2ba:	f8ad a020 	strh.w	sl, [sp, #32]
 801b2be:	f7ea f96f 	bl	80055a0 <_lv_obj_get_style_int>
        parent_area.x2 -= lv_obj_get_style_pad_right(par, LV_OBJ_PART_MAIN);
 801b2c2:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801b2c6:	4683      	mov	fp, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
 801b2c8:	2210      	movs	r2, #16
 801b2ca:	2100      	movs	r1, #0
 801b2cc:	eba3 0b0b 	sub.w	fp, r3, fp
 801b2d0:	4648      	mov	r0, r9
 801b2d2:	fa0f f38b 	sxth.w	r3, fp
 801b2d6:	9301      	str	r3, [sp, #4]
 801b2d8:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 801b2dc:	f7ea f960 	bl	80055a0 <_lv_obj_get_style_int>
        parent_area.y1 += lv_obj_get_style_pad_top(par, LV_OBJ_PART_MAIN);
 801b2e0:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 801b2e4:	4603      	mov	r3, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
 801b2e6:	2211      	movs	r2, #17
 801b2e8:	4648      	mov	r0, r9
 801b2ea:	440b      	add	r3, r1
 801b2ec:	2100      	movs	r1, #0
 801b2ee:	b21b      	sxth	r3, r3
 801b2f0:	9302      	str	r3, [sp, #8]
 801b2f2:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801b2f6:	f7ea f953 	bl	80055a0 <_lv_obj_get_style_int>
        parent_area.y2 -= lv_obj_get_style_pad_bottom(par, LV_OBJ_PART_MAIN);
 801b2fa:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
        lv_obj_get_coords(cont, &ori);
 801b2fe:	4641      	mov	r1, r8
        parent_area.y2 -= lv_obj_get_style_pad_bottom(par, LV_OBJ_PART_MAIN);
 801b300:	1a13      	subs	r3, r2, r0
        lv_obj_get_coords(cont, &ori);
 801b302:	4620      	mov	r0, r4
        parent_area.y2 -= lv_obj_get_style_pad_bottom(par, LV_OBJ_PART_MAIN);
 801b304:	b21b      	sxth	r3, r3
 801b306:	9303      	str	r3, [sp, #12]
 801b308:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
        lv_obj_get_coords(cont, &ori);
 801b30c:	f7e9 fcbc 	bl	8004c88 <lv_obj_get_coords>
        lv_obj_get_coords(cont, &tight_area);
 801b310:	a904      	add	r1, sp, #16
 801b312:	4620      	mov	r0, r4
 801b314:	f7e9 fcb8 	bl	8004c88 <lv_obj_get_coords>
        bool has_children = _lv_ll_is_empty(&cont->child_ll) ? false : true;
 801b318:	4630      	mov	r0, r6
 801b31a:	f7f9 fc9d 	bl	8014c58 <_lv_ll_is_empty>
 801b31e:	f080 0001 	eor.w	r0, r0, #1
        if(has_children) {
 801b322:	f010 03ff 	ands.w	r3, r0, #255	; 0xff
 801b326:	9300      	str	r3, [sp, #0]
 801b328:	d17c      	bne.n	801b424 <lv_cont_refr_autofit.part.0+0x1d0>
        switch(ext->fit_left) {
 801b32a:	782a      	ldrb	r2, [r5, #0]
 801b32c:	ab0a      	add	r3, sp, #40	; 0x28
 801b32e:	f3c2 1c01 	ubfx	ip, r2, #4, #2
 801b332:	e898 0003 	ldmia.w	r8, {r0, r1}
 801b336:	f1bc 0f02 	cmp.w	ip, #2
 801b33a:	e883 0003 	stmia.w	r3, {r0, r1}
 801b33e:	d069      	beq.n	801b414 <lv_cont_refr_autofit.part.0+0x1c0>
 801b340:	f1bc 0f03 	cmp.w	ip, #3
 801b344:	d05f      	beq.n	801b406 <lv_cont_refr_autofit.part.0+0x1b2>
 801b346:	f1bc 0f01 	cmp.w	ip, #1
 801b34a:	d066      	beq.n	801b41a <lv_cont_refr_autofit.part.0+0x1c6>
 801b34c:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
        switch(ext->fit_right) {
 801b350:	0992      	lsrs	r2, r2, #6
 801b352:	2a02      	cmp	r2, #2
 801b354:	f000 811c 	beq.w	801b590 <lv_cont_refr_autofit.part.0+0x33c>
 801b358:	2a03      	cmp	r2, #3
 801b35a:	f000 8110 	beq.w	801b57e <lv_cont_refr_autofit.part.0+0x32a>
 801b35e:	2a01      	cmp	r2, #1
 801b360:	f000 811e 	beq.w	801b5a0 <lv_cont_refr_autofit.part.0+0x34c>
        switch(ext->fit_top) {
 801b364:	786a      	ldrb	r2, [r5, #1]
 801b366:	f002 0103 	and.w	r1, r2, #3
 801b36a:	2902      	cmp	r1, #2
 801b36c:	f000 8103 	beq.w	801b576 <lv_cont_refr_autofit.part.0+0x322>
 801b370:	2903      	cmp	r1, #3
 801b372:	f000 80f7 	beq.w	801b564 <lv_cont_refr_autofit.part.0+0x310>
 801b376:	2901      	cmp	r1, #1
 801b378:	f000 8122 	beq.w	801b5c0 <lv_cont_refr_autofit.part.0+0x36c>
        switch(ext->fit_bottom) {
 801b37c:	f3c2 0281 	ubfx	r2, r2, #2, #2
 801b380:	2a02      	cmp	r2, #2
 801b382:	f000 80eb 	beq.w	801b55c <lv_cont_refr_autofit.part.0+0x308>
 801b386:	2a03      	cmp	r2, #3
 801b388:	f000 80df 	beq.w	801b54a <lv_cont_refr_autofit.part.0+0x2f6>
 801b38c:	2a01      	cmp	r2, #1
 801b38e:	f000 810c 	beq.w	801b5aa <lv_cont_refr_autofit.part.0+0x356>
        if(cont->coords.x1 != new_area.x1 || cont->coords.y1 != new_area.y1 || cont->coords.x2 != new_area.x2 ||
 801b392:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
 801b396:	4552      	cmp	r2, sl
 801b398:	d106      	bne.n	801b3a8 <lv_cont_refr_autofit.part.0+0x154>
 801b39a:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
 801b39e:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801b3a2:	4291      	cmp	r1, r2
 801b3a4:	f000 8111 	beq.w	801b5ca <lv_cont_refr_autofit.part.0+0x376>
            lv_obj_invalidate(cont);
 801b3a8:	4620      	mov	r0, r4
 801b3aa:	f7e8 fbf1 	bl	8003b90 <lv_obj_invalidate>
 801b3ae:	ab0a      	add	r3, sp, #40	; 0x28
 801b3b0:	cb03      	ldmia	r3!, {r0, r1}
 801b3b2:	6120      	str	r0, [r4, #16]
            lv_obj_invalidate(cont);
 801b3b4:	4620      	mov	r0, r4
 801b3b6:	6161      	str	r1, [r4, #20]
 801b3b8:	f7e8 fbea 	bl	8003b90 <lv_obj_invalidate>
            cont->signal_cb(cont, LV_SIGNAL_COORD_CHG, &ori);
 801b3bc:	69e3      	ldr	r3, [r4, #28]
 801b3be:	4642      	mov	r2, r8
 801b3c0:	2102      	movs	r1, #2
 801b3c2:	4620      	mov	r0, r4
 801b3c4:	4798      	blx	r3
            par->signal_cb(par, LV_SIGNAL_CHILD_CHG, cont);
 801b3c6:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801b3ca:	4648      	mov	r0, r9
 801b3cc:	4622      	mov	r2, r4
 801b3ce:	2101      	movs	r1, #1
 801b3d0:	4798      	blx	r3
            if(lv_obj_get_auto_realign(cont)) {
 801b3d2:	4620      	mov	r0, r4
 801b3d4:	f7e9 fcf2 	bl	8004dbc <lv_obj_get_auto_realign>
 801b3d8:	2800      	cmp	r0, #0
 801b3da:	f040 80dd 	bne.w	801b598 <lv_cont_refr_autofit.part.0+0x344>
            _LV_LL_READ(cont->child_ll, child_i) {
 801b3de:	4630      	mov	r0, r6
 801b3e0:	f7f9 fbc4 	bl	8014b6c <_lv_ll_get_head>
 801b3e4:	4604      	mov	r4, r0
 801b3e6:	b158      	cbz	r0, 801b400 <lv_cont_refr_autofit.part.0+0x1ac>
                child_i->signal_cb(child_i, LV_SIGNAL_PARENT_SIZE_CHG, &ori);
 801b3e8:	69e3      	ldr	r3, [r4, #28]
 801b3ea:	4642      	mov	r2, r8
 801b3ec:	2103      	movs	r1, #3
 801b3ee:	4620      	mov	r0, r4
 801b3f0:	4798      	blx	r3
            _LV_LL_READ(cont->child_ll, child_i) {
 801b3f2:	4621      	mov	r1, r4
 801b3f4:	4630      	mov	r0, r6
 801b3f6:	f7f9 fbc1 	bl	8014b7c <_lv_ll_get_next>
 801b3fa:	4604      	mov	r4, r0
 801b3fc:	2800      	cmp	r0, #0
 801b3fe:	d1f3      	bne.n	801b3e8 <lv_cont_refr_autofit.part.0+0x194>
 801b400:	683b      	ldr	r3, [r7, #0]
 801b402:	3b01      	subs	r3, #1
 801b404:	e73a      	b.n	801b27c <lv_cont_refr_autofit.part.0+0x28>
                new_area.x1 = has_children ? LV_MATH_MIN(tight_area.x1, parent_area.x1) : parent_area.x1;
 801b406:	9900      	ldr	r1, [sp, #0]
 801b408:	b121      	cbz	r1, 801b414 <lv_cont_refr_autofit.part.0+0x1c0>
 801b40a:	f9bd 1010 	ldrsh.w	r1, [sp, #16]
 801b40e:	458a      	cmp	sl, r1
 801b410:	bfa8      	it	ge
 801b412:	468a      	movge	sl, r1
 801b414:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
                break;
 801b418:	e79a      	b.n	801b350 <lv_cont_refr_autofit.part.0+0xfc>
                new_area.x1 = tight_area.x1;
 801b41a:	f9bd a010 	ldrsh.w	sl, [sp, #16]
 801b41e:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
                break;
 801b422:	e795      	b.n	801b350 <lv_cont_refr_autofit.part.0+0xfc>
            tight_area.x1 = LV_COORD_MAX;
 801b424:	4a64      	ldr	r2, [pc, #400]	; (801b5b8 <lv_cont_refr_autofit.part.0+0x364>)
            _LV_LL_READ(cont->child_ll, child_i) {
 801b426:	4630      	mov	r0, r6
            tight_area.x1 = LV_COORD_MAX;
 801b428:	4b64      	ldr	r3, [pc, #400]	; (801b5bc <lv_cont_refr_autofit.part.0+0x368>)
 801b42a:	e9cd 2304 	strd	r2, r3, [sp, #16]
            _LV_LL_READ(cont->child_ll, child_i) {
 801b42e:	f7f9 fb9d 	bl	8014b6c <_lv_ll_get_head>
 801b432:	4683      	mov	fp, r0
 801b434:	2800      	cmp	r0, #0
 801b436:	d05d      	beq.n	801b4f4 <lv_cont_refr_autofit.part.0+0x2a0>
                if(lv_obj_get_hidden(child_i) != false) continue;
 801b438:	4658      	mov	r0, fp
 801b43a:	f7ea ff67 	bl	800630c <lv_obj_get_hidden>
 801b43e:	4601      	mov	r1, r0
 801b440:	2800      	cmp	r0, #0
 801b442:	d150      	bne.n	801b4e6 <lv_cont_refr_autofit.part.0+0x292>
                if(ext->fit_left != LV_FIT_PARENT) {
 801b444:	782b      	ldrb	r3, [r5, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_LEFT, margin_left, lv_style_int_t, _int, scalar)
 801b446:	2217      	movs	r2, #23
 801b448:	4658      	mov	r0, fp
 801b44a:	f003 0c30 	and.w	ip, r3, #48	; 0x30
 801b44e:	f1bc 0f20 	cmp.w	ip, #32
 801b452:	d00c      	beq.n	801b46e <lv_cont_refr_autofit.part.0+0x21a>
 801b454:	f7ea f8a4 	bl	80055a0 <_lv_obj_get_style_int>
                    tight_area.x1 = LV_MATH_MIN(tight_area.x1, child_i->coords.x1 - mleft);
 801b458:	f9bb 3010 	ldrsh.w	r3, [fp, #16]
 801b45c:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801b460:	1a18      	subs	r0, r3, r0
 801b462:	782b      	ldrb	r3, [r5, #0]
 801b464:	4290      	cmp	r0, r2
 801b466:	bfa8      	it	ge
 801b468:	4610      	movge	r0, r2
 801b46a:	f8ad 0010 	strh.w	r0, [sp, #16]
                if(ext->fit_right != LV_FIT_PARENT) {
 801b46e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_RIGHT, margin_right, lv_style_int_t, _int, scalar)
 801b472:	2218      	movs	r2, #24
 801b474:	2100      	movs	r1, #0
 801b476:	4658      	mov	r0, fp
 801b478:	2b80      	cmp	r3, #128	; 0x80
 801b47a:	d00b      	beq.n	801b494 <lv_cont_refr_autofit.part.0+0x240>
 801b47c:	f7ea f890 	bl	80055a0 <_lv_obj_get_style_int>
                    tight_area.x2 = LV_MATH_MAX(tight_area.x2, child_i->coords.x2 + mright);
 801b480:	f9bb 3014 	ldrsh.w	r3, [fp, #20]
 801b484:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 801b488:	4403      	add	r3, r0
 801b48a:	4293      	cmp	r3, r2
 801b48c:	bfb8      	it	lt
 801b48e:	4613      	movlt	r3, r2
 801b490:	f8ad 3014 	strh.w	r3, [sp, #20]
                if(ext->fit_top != LV_FIT_PARENT) {
 801b494:	786b      	ldrb	r3, [r5, #1]
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int, scalar)
 801b496:	2215      	movs	r2, #21
 801b498:	2100      	movs	r1, #0
 801b49a:	4658      	mov	r0, fp
 801b49c:	f003 0c03 	and.w	ip, r3, #3
 801b4a0:	f1bc 0f02 	cmp.w	ip, #2
 801b4a4:	d00c      	beq.n	801b4c0 <lv_cont_refr_autofit.part.0+0x26c>
 801b4a6:	f7ea f87b 	bl	80055a0 <_lv_obj_get_style_int>
                    tight_area.y1 = LV_MATH_MIN(tight_area.y1, child_i->coords.y1 - mtop);
 801b4aa:	f9bb 3012 	ldrsh.w	r3, [fp, #18]
 801b4ae:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 801b4b2:	1a18      	subs	r0, r3, r0
 801b4b4:	786b      	ldrb	r3, [r5, #1]
 801b4b6:	4290      	cmp	r0, r2
 801b4b8:	bfa8      	it	ge
 801b4ba:	4610      	movge	r0, r2
 801b4bc:	f8ad 0012 	strh.w	r0, [sp, #18]
                if(ext->fit_bottom != LV_FIT_PARENT) {
 801b4c0:	f003 030c 	and.w	r3, r3, #12
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
 801b4c4:	2216      	movs	r2, #22
 801b4c6:	2100      	movs	r1, #0
 801b4c8:	4658      	mov	r0, fp
 801b4ca:	2b08      	cmp	r3, #8
 801b4cc:	d00b      	beq.n	801b4e6 <lv_cont_refr_autofit.part.0+0x292>
 801b4ce:	f7ea f867 	bl	80055a0 <_lv_obj_get_style_int>
                    tight_area.y2 = LV_MATH_MAX(tight_area.y2, child_i->coords.y2 + mbottom);
 801b4d2:	f9bb 3016 	ldrsh.w	r3, [fp, #22]
 801b4d6:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
 801b4da:	4403      	add	r3, r0
 801b4dc:	4293      	cmp	r3, r2
 801b4de:	bfb8      	it	lt
 801b4e0:	4613      	movlt	r3, r2
 801b4e2:	f8ad 3016 	strh.w	r3, [sp, #22]
            _LV_LL_READ(cont->child_ll, child_i) {
 801b4e6:	4659      	mov	r1, fp
 801b4e8:	4630      	mov	r0, r6
 801b4ea:	f7f9 fb47 	bl	8014b7c <_lv_ll_get_next>
 801b4ee:	4683      	mov	fp, r0
 801b4f0:	2800      	cmp	r0, #0
 801b4f2:	d1a1      	bne.n	801b438 <lv_cont_refr_autofit.part.0+0x1e4>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
 801b4f4:	2212      	movs	r2, #18
 801b4f6:	2100      	movs	r1, #0
 801b4f8:	4620      	mov	r0, r4
 801b4fa:	f7ea f851 	bl	80055a0 <_lv_obj_get_style_int>
            tight_area.x1 -= lv_obj_get_style_pad_left(cont, LV_CONT_PART_MAIN);
 801b4fe:	f8bd c010 	ldrh.w	ip, [sp, #16]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
 801b502:	2213      	movs	r2, #19
 801b504:	2100      	movs	r1, #0
 801b506:	ebac 0300 	sub.w	r3, ip, r0
 801b50a:	4620      	mov	r0, r4
 801b50c:	f8ad 3010 	strh.w	r3, [sp, #16]
 801b510:	f7ea f846 	bl	80055a0 <_lv_obj_get_style_int>
            tight_area.x2 += lv_obj_get_style_pad_right(cont, LV_CONT_PART_MAIN);
 801b514:	f8bd 3014 	ldrh.w	r3, [sp, #20]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
 801b518:	2210      	movs	r2, #16
 801b51a:	2100      	movs	r1, #0
 801b51c:	4403      	add	r3, r0
 801b51e:	4620      	mov	r0, r4
 801b520:	f8ad 3014 	strh.w	r3, [sp, #20]
 801b524:	f7ea f83c 	bl	80055a0 <_lv_obj_get_style_int>
            tight_area.y1 -= lv_obj_get_style_pad_top(cont, LV_CONT_PART_MAIN);
 801b528:	f8bd c012 	ldrh.w	ip, [sp, #18]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
 801b52c:	2211      	movs	r2, #17
 801b52e:	2100      	movs	r1, #0
 801b530:	ebac 0300 	sub.w	r3, ip, r0
 801b534:	4620      	mov	r0, r4
 801b536:	f8ad 3012 	strh.w	r3, [sp, #18]
 801b53a:	f7ea f831 	bl	80055a0 <_lv_obj_get_style_int>
            tight_area.y2 += lv_obj_get_style_pad_bottom(cont, LV_CONT_PART_MAIN);
 801b53e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801b542:	4418      	add	r0, r3
 801b544:	f8ad 0016 	strh.w	r0, [sp, #22]
 801b548:	e6ef      	b.n	801b32a <lv_cont_refr_autofit.part.0+0xd6>
                new_area.y2 = has_children ? LV_MATH_MAX(tight_area.y2, parent_area.y2) : parent_area.y2;
 801b54a:	9a00      	ldr	r2, [sp, #0]
 801b54c:	b132      	cbz	r2, 801b55c <lv_cont_refr_autofit.part.0+0x308>
 801b54e:	9903      	ldr	r1, [sp, #12]
 801b550:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
 801b554:	4291      	cmp	r1, r2
 801b556:	bfb8      	it	lt
 801b558:	4611      	movlt	r1, r2
 801b55a:	9103      	str	r1, [sp, #12]
 801b55c:	9a03      	ldr	r2, [sp, #12]
 801b55e:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
                break;
 801b562:	e716      	b.n	801b392 <lv_cont_refr_autofit.part.0+0x13e>
                new_area.y1 = has_children ? LV_MATH_MIN(tight_area.y1, parent_area.y1) : parent_area.y1;
 801b564:	9900      	ldr	r1, [sp, #0]
 801b566:	b131      	cbz	r1, 801b576 <lv_cont_refr_autofit.part.0+0x322>
 801b568:	9802      	ldr	r0, [sp, #8]
 801b56a:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 801b56e:	4288      	cmp	r0, r1
 801b570:	bfa8      	it	ge
 801b572:	4608      	movge	r0, r1
 801b574:	9002      	str	r0, [sp, #8]
 801b576:	9902      	ldr	r1, [sp, #8]
 801b578:	f8ad 102a 	strh.w	r1, [sp, #42]	; 0x2a
                break;
 801b57c:	e6fe      	b.n	801b37c <lv_cont_refr_autofit.part.0+0x128>
                new_area.x2 = has_children ? LV_MATH_MAX(tight_area.x2, parent_area.x2) : parent_area.x2;
 801b57e:	9a00      	ldr	r2, [sp, #0]
 801b580:	b132      	cbz	r2, 801b590 <lv_cont_refr_autofit.part.0+0x33c>
 801b582:	9901      	ldr	r1, [sp, #4]
 801b584:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 801b588:	4291      	cmp	r1, r2
 801b58a:	bfb8      	it	lt
 801b58c:	4611      	movlt	r1, r2
 801b58e:	9101      	str	r1, [sp, #4]
 801b590:	9a01      	ldr	r2, [sp, #4]
 801b592:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
                break;
 801b596:	e6e5      	b.n	801b364 <lv_cont_refr_autofit.part.0+0x110>
                lv_obj_realign(cont);
 801b598:	4620      	mov	r0, r4
 801b59a:	f7e8 ffc1 	bl	8004520 <lv_obj_realign>
 801b59e:	e71e      	b.n	801b3de <lv_cont_refr_autofit.part.0+0x18a>
                new_area.x2 = tight_area.x2;
 801b5a0:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801b5a4:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
                break;
 801b5a8:	e6dc      	b.n	801b364 <lv_cont_refr_autofit.part.0+0x110>
                new_area.y2 = tight_area.y2;
 801b5aa:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801b5ae:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
                break;
 801b5b2:	e6ee      	b.n	801b392 <lv_cont_refr_autofit.part.0+0x13e>
 801b5b4:	200201e8 	.word	0x200201e8
 801b5b8:	7c187c18 	.word	0x7c187c18
 801b5bc:	83e883e8 	.word	0x83e883e8
                new_area.y1 = tight_area.y1;
 801b5c0:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 801b5c4:	f8ad 102a 	strh.w	r1, [sp, #42]	; 0x2a
                break;
 801b5c8:	e6d8      	b.n	801b37c <lv_cont_refr_autofit.part.0+0x128>
        if(cont->coords.x1 != new_area.x1 || cont->coords.y1 != new_area.y1 || cont->coords.x2 != new_area.x2 ||
 801b5ca:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 801b5ce:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 801b5d2:	4291      	cmp	r1, r2
 801b5d4:	f47f aee8 	bne.w	801b3a8 <lv_cont_refr_autofit.part.0+0x154>
 801b5d8:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 801b5dc:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 801b5e0:	4291      	cmp	r1, r2
 801b5e2:	f47f aee1 	bne.w	801b3a8 <lv_cont_refr_autofit.part.0+0x154>
 801b5e6:	e70b      	b.n	801b400 <lv_cont_refr_autofit.part.0+0x1ac>

0801b5e8 <lv_cont_refr_layout.part.0>:
static void lv_cont_refr_layout(lv_obj_t * cont)
 801b5e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b5ec:	ed2d 8b02 	vpush	{d8}
 801b5f0:	b08f      	sub	sp, #60	; 0x3c
 801b5f2:	4683      	mov	fp, r0
    LV_ASSERT_OBJ(cont, LV_OBJX_NAME);
 801b5f4:	f7f9 f8e8 	bl	80147c8 <lv_debug_check_null>
 801b5f8:	b928      	cbnz	r0, 801b606 <lv_cont_refr_layout.part.0+0x1e>
 801b5fa:	4603      	mov	r3, r0
 801b5fc:	465a      	mov	r2, fp
 801b5fe:	48cc      	ldr	r0, [pc, #816]	; (801b930 <lv_cont_refr_layout.part.0+0x348>)
 801b600:	f7f9 f8e6 	bl	80147d0 <lv_debug_log_error>
 801b604:	e7fe      	b.n	801b604 <lv_cont_refr_layout.part.0+0x1c>
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 801b606:	4658      	mov	r0, fp
 801b608:	f7ea ff58 	bl	80064bc <lv_obj_get_ext_attr>
 801b60c:	4603      	mov	r3, r0
    if(lv_obj_get_child(cont, NULL) == NULL) return;
 801b60e:	2100      	movs	r1, #0
 801b610:	4658      	mov	r0, fp
    return ext->layout;
 801b612:	781c      	ldrb	r4, [r3, #0]
 801b614:	f004 040f 	and.w	r4, r4, #15
    if(lv_obj_get_child(cont, NULL) == NULL) return;
 801b618:	f7e9 fb1c 	bl	8004c54 <lv_obj_get_child>
    if(type == LV_LAYOUT_OFF) return;
 801b61c:	b1ac      	cbz	r4, 801b64a <lv_cont_refr_layout.part.0+0x62>
 801b61e:	fab0 f780 	clz	r7, r0
 801b622:	097f      	lsrs	r7, r7, #5
 801b624:	b188      	cbz	r0, 801b64a <lv_cont_refr_layout.part.0+0x62>
    if(type == LV_LAYOUT_CENTER) {
 801b626:	2c01      	cmp	r4, #1
 801b628:	f000 809b 	beq.w	801b762 <lv_cont_refr_layout.part.0+0x17a>
    else if(type == LV_LAYOUT_COLUMN_LEFT || type == LV_LAYOUT_COLUMN_MID || type == LV_LAYOUT_COLUMN_RIGHT) {
 801b62c:	1ea3      	subs	r3, r4, #2
 801b62e:	2b02      	cmp	r3, #2
 801b630:	d910      	bls.n	801b654 <lv_cont_refr_layout.part.0+0x6c>
    else if(type == LV_LAYOUT_ROW_TOP || type == LV_LAYOUT_ROW_MID || type == LV_LAYOUT_ROW_BOTTOM) {
 801b632:	1f63      	subs	r3, r4, #5
 801b634:	2b02      	cmp	r3, #2
 801b636:	f240 8166 	bls.w	801b906 <lv_cont_refr_layout.part.0+0x31e>
    else if(type == LV_LAYOUT_PRETTY_MID || type == LV_LAYOUT_PRETTY_TOP || type == LV_LAYOUT_PRETTY_BOTTOM) {
 801b63a:	f1a4 0308 	sub.w	r3, r4, #8
 801b63e:	2b02      	cmp	r3, #2
 801b640:	f240 816b 	bls.w	801b91a <lv_cont_refr_layout.part.0+0x332>
    else if(type == LV_LAYOUT_GRID) {
 801b644:	2c0b      	cmp	r4, #11
 801b646:	f000 80fd 	beq.w	801b844 <lv_cont_refr_layout.part.0+0x25c>
}
 801b64a:	b00f      	add	sp, #60	; 0x3c
 801b64c:	ecbd 8b02 	vpop	{d8}
 801b650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
 801b654:	2212      	movs	r2, #18
 801b656:	4639      	mov	r1, r7
 801b658:	4658      	mov	r0, fp
 801b65a:	f7e9 ffa1 	bl	80055a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
 801b65e:	2213      	movs	r2, #19
 801b660:	4639      	mov	r1, r7
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
 801b662:	4606      	mov	r6, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
 801b664:	4658      	mov	r0, fp
 801b666:	f7e9 ff9b 	bl	80055a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
 801b66a:	2210      	movs	r2, #16
 801b66c:	4639      	mov	r1, r7
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
 801b66e:	4604      	mov	r4, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
 801b670:	4658      	mov	r0, fp
 801b672:	f7e9 ff95 	bl	80055a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
 801b676:	2214      	movs	r2, #20
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
 801b678:	4681      	mov	r9, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
 801b67a:	4639      	mov	r1, r7
 801b67c:	4658      	mov	r0, fp
 801b67e:	f7e9 ff8f 	bl	80055a0 <_lv_obj_get_style_int>
 801b682:	4682      	mov	sl, r0
    LV_ASSERT_OBJ(cont, LV_OBJX_NAME);
 801b684:	4658      	mov	r0, fp
 801b686:	f8cd a00c 	str.w	sl, [sp, #12]
 801b68a:	f7f9 f89d 	bl	80147c8 <lv_debug_check_null>
 801b68e:	2800      	cmp	r0, #0
 801b690:	f000 80d2 	beq.w	801b838 <lv_cont_refr_layout.part.0+0x250>
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 801b694:	4658      	mov	r0, fp
 801b696:	f7ea ff11 	bl	80064bc <lv_obj_get_ext_attr>
    return ext->layout;
 801b69a:	7803      	ldrb	r3, [r0, #0]
 801b69c:	f003 030f 	and.w	r3, r3, #15
    switch(type) {
 801b6a0:	2b03      	cmp	r3, #3
 801b6a2:	f000 82e9 	beq.w	801bc78 <lv_cont_refr_layout.part.0+0x690>
 801b6a6:	2b04      	cmp	r3, #4
 801b6a8:	f000 82eb 	beq.w	801bc82 <lv_cont_refr_layout.part.0+0x69a>
            align     = LV_ALIGN_IN_TOP_LEFT;
 801b6ac:	2b02      	cmp	r3, #2
 801b6ae:	f04f 0301 	mov.w	r3, #1
 801b6b2:	bf18      	it	ne
 801b6b4:	2600      	movne	r6, #0
 801b6b6:	ee08 3a10 	vmov	s16, r3
    _LV_LL_READ_BACK(cont->child_ll, child) {
 801b6ba:	f10b 0804 	add.w	r8, fp, #4
    lv_obj_add_protect(cont, LV_PROTECT_CHILD_CHG);
 801b6be:	2101      	movs	r1, #1
 801b6c0:	4658      	mov	r0, fp
 801b6c2:	f7e7 ffe9 	bl	8003698 <lv_obj_add_protect>
    _LV_LL_READ_BACK(cont->child_ll, child) {
 801b6c6:	4640      	mov	r0, r8
 801b6c8:	f7f9 fa54 	bl	8014b74 <_lv_ll_get_tail>
 801b6cc:	4604      	mov	r4, r0
 801b6ce:	2800      	cmp	r0, #0
 801b6d0:	d03e      	beq.n	801b750 <lv_cont_refr_layout.part.0+0x168>
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 801b6d2:	4620      	mov	r0, r4
 801b6d4:	f7ea fe1a 	bl	800630c <lv_obj_get_hidden>
 801b6d8:	4603      	mov	r3, r0
 801b6da:	2104      	movs	r1, #4
 801b6dc:	4620      	mov	r0, r4
 801b6de:	bb83      	cbnz	r3, 801b742 <lv_cont_refr_layout.part.0+0x15a>
 801b6e0:	f7ea fe8c 	bl	80063fc <lv_obj_is_protected>
 801b6e4:	4682      	mov	sl, r0
        lv_obj_align(child, cont, align, hpad_corr + mleft, last_cord + mtop);
 801b6e6:	fa1f f589 	uxth.w	r5, r9
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int, scalar)
 801b6ea:	2215      	movs	r2, #21
 801b6ec:	4620      	mov	r0, r4
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 801b6ee:	f1ba 0f00 	cmp.w	sl, #0
 801b6f2:	d126      	bne.n	801b742 <lv_cont_refr_layout.part.0+0x15a>
 801b6f4:	4651      	mov	r1, sl
 801b6f6:	f7e9 ff53 	bl	80055a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
 801b6fa:	2216      	movs	r2, #22
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int, scalar)
 801b6fc:	4607      	mov	r7, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
 801b6fe:	4651      	mov	r1, sl
 801b700:	4620      	mov	r0, r4
 801b702:	f7e9 ff4d 	bl	80055a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_LEFT, margin_left, lv_style_int_t, _int, scalar)
 801b706:	4651      	mov	r1, sl
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
 801b708:	4681      	mov	r9, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_LEFT, margin_left, lv_style_int_t, _int, scalar)
 801b70a:	2217      	movs	r2, #23
 801b70c:	4620      	mov	r0, r4
 801b70e:	f7e9 ff47 	bl	80055a0 <_lv_obj_get_style_int>
        lv_obj_align(child, cont, align, hpad_corr + mleft, last_cord + mtop);
 801b712:	eb05 0c07 	add.w	ip, r5, r7
 801b716:	1833      	adds	r3, r6, r0
 801b718:	ee18 2a10 	vmov	r2, s16
 801b71c:	fa0f fc8c 	sxth.w	ip, ip
 801b720:	4659      	mov	r1, fp
 801b722:	b21b      	sxth	r3, r3
 801b724:	4620      	mov	r0, r4
 801b726:	f8cd c000 	str.w	ip, [sp]
 801b72a:	f7e8 fbc1 	bl	8003eb0 <lv_obj_align>
        last_cord += lv_obj_get_height(child) + inner + mtop + mbottom;
 801b72e:	4620      	mov	r0, r4
 801b730:	f7e9 fb30 	bl	8004d94 <lv_obj_get_height>
 801b734:	9b03      	ldr	r3, [sp, #12]
 801b736:	4418      	add	r0, r3
 801b738:	4407      	add	r7, r0
 801b73a:	44b9      	add	r9, r7
 801b73c:	44a9      	add	r9, r5
 801b73e:	fa0f f989 	sxth.w	r9, r9
    _LV_LL_READ_BACK(cont->child_ll, child) {
 801b742:	4621      	mov	r1, r4
 801b744:	4640      	mov	r0, r8
 801b746:	f7f9 fa1f 	bl	8014b88 <_lv_ll_get_prev>
 801b74a:	4604      	mov	r4, r0
 801b74c:	2800      	cmp	r0, #0
 801b74e:	d1c0      	bne.n	801b6d2 <lv_cont_refr_layout.part.0+0xea>
    lv_obj_clear_protect(cont, LV_PROTECT_CHILD_CHG);
 801b750:	4658      	mov	r0, fp
 801b752:	2101      	movs	r1, #1
}
 801b754:	b00f      	add	sp, #60	; 0x3c
 801b756:	ecbd 8b02 	vpop	{d8}
 801b75a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_obj_clear_protect(cont, LV_PROTECT_CHILD_CHG);
 801b75e:	f7e7 bfaf 	b.w	80036c0 <lv_obj_clear_protect>
    _LV_LL_READ(cont->child_ll, child) {
 801b762:	f10b 0804 	add.w	r8, fp, #4
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
 801b766:	2214      	movs	r2, #20
 801b768:	4639      	mov	r1, r7
 801b76a:	4658      	mov	r0, fp
 801b76c:	f7e9 ff18 	bl	80055a0 <_lv_obj_get_style_int>
 801b770:	4681      	mov	r9, r0
 801b772:	4640      	mov	r0, r8
 801b774:	f7f9 f9fa 	bl	8014b6c <_lv_ll_get_head>
 801b778:	4604      	mov	r4, r0
 801b77a:	2800      	cmp	r0, #0
 801b77c:	f43f af65 	beq.w	801b64a <lv_cont_refr_layout.part.0+0x62>
    lv_coord_t h_tot         = 0;
 801b780:	463d      	mov	r5, r7
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 801b782:	4620      	mov	r0, r4
 801b784:	f7ea fdc2 	bl	800630c <lv_obj_get_hidden>
 801b788:	4603      	mov	r3, r0
 801b78a:	2104      	movs	r1, #4
 801b78c:	4620      	mov	r0, r4
 801b78e:	b953      	cbnz	r3, 801b7a6 <lv_cont_refr_layout.part.0+0x1be>
 801b790:	f7ea fe34 	bl	80063fc <lv_obj_is_protected>
 801b794:	4603      	mov	r3, r0
        h_tot += lv_obj_get_height(child) + inner;
 801b796:	4620      	mov	r0, r4
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 801b798:	b92b      	cbnz	r3, 801b7a6 <lv_cont_refr_layout.part.0+0x1be>
        h_tot += lv_obj_get_height(child) + inner;
 801b79a:	f7e9 fafb 	bl	8004d94 <lv_obj_get_height>
 801b79e:	4448      	add	r0, r9
        obj_num++;
 801b7a0:	3701      	adds	r7, #1
        h_tot += lv_obj_get_height(child) + inner;
 801b7a2:	4405      	add	r5, r0
 801b7a4:	b22d      	sxth	r5, r5
    _LV_LL_READ(cont->child_ll, child) {
 801b7a6:	4621      	mov	r1, r4
 801b7a8:	4640      	mov	r0, r8
 801b7aa:	f7f9 f9e7 	bl	8014b7c <_lv_ll_get_next>
 801b7ae:	4604      	mov	r4, r0
 801b7b0:	2800      	cmp	r0, #0
 801b7b2:	d1e6      	bne.n	801b782 <lv_cont_refr_layout.part.0+0x19a>
    if(obj_num == 0) return;
 801b7b4:	2f00      	cmp	r7, #0
 801b7b6:	f43f af48 	beq.w	801b64a <lv_cont_refr_layout.part.0+0x62>
    h_tot -= inner;
 801b7ba:	eba5 0509 	sub.w	r5, r5, r9
    lv_obj_add_protect(cont, LV_PROTECT_CHILD_CHG);
 801b7be:	2101      	movs	r1, #1
 801b7c0:	4658      	mov	r0, fp
    h_tot -= inner;
 801b7c2:	b2ad      	uxth	r5, r5
    lv_obj_add_protect(cont, LV_PROTECT_CHILD_CHG);
 801b7c4:	f7e7 ff68 	bl	8003698 <lv_obj_add_protect>
    _LV_LL_READ_BACK(cont->child_ll, child) {
 801b7c8:	4640      	mov	r0, r8
    lv_coord_t last_cord = -(h_tot / 2);
 801b7ca:	b22b      	sxth	r3, r5
 801b7cc:	2b00      	cmp	r3, #0
 801b7ce:	bfb8      	it	lt
 801b7d0:	3301      	addlt	r3, #1
 801b7d2:	105e      	asrs	r6, r3, #1
    _LV_LL_READ_BACK(cont->child_ll, child) {
 801b7d4:	f7f9 f9ce 	bl	8014b74 <_lv_ll_get_tail>
 801b7d8:	4604      	mov	r4, r0
    lv_coord_t last_cord = -(h_tot / 2);
 801b7da:	4276      	negs	r6, r6
 801b7dc:	b236      	sxth	r6, r6
    _LV_LL_READ_BACK(cont->child_ll, child) {
 801b7de:	2800      	cmp	r0, #0
 801b7e0:	d0b6      	beq.n	801b750 <lv_cont_refr_layout.part.0+0x168>
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 801b7e2:	4620      	mov	r0, r4
 801b7e4:	f7ea fd92 	bl	800630c <lv_obj_get_hidden>
 801b7e8:	4603      	mov	r3, r0
 801b7ea:	2104      	movs	r1, #4
 801b7ec:	4620      	mov	r0, r4
 801b7ee:	b9db      	cbnz	r3, 801b828 <lv_cont_refr_layout.part.0+0x240>
 801b7f0:	f7ea fe04 	bl	80063fc <lv_obj_is_protected>
 801b7f4:	4603      	mov	r3, r0
        lv_obj_align(child, cont, LV_ALIGN_CENTER, 0, last_cord + lv_obj_get_height(child) / 2);
 801b7f6:	b2b7      	uxth	r7, r6
 801b7f8:	4620      	mov	r0, r4
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 801b7fa:	b9ab      	cbnz	r3, 801b828 <lv_cont_refr_layout.part.0+0x240>
        lv_obj_align(child, cont, LV_ALIGN_CENTER, 0, last_cord + lv_obj_get_height(child) / 2);
 801b7fc:	f7e9 faca 	bl	8004d94 <lv_obj_get_height>
 801b800:	4605      	mov	r5, r0
 801b802:	2300      	movs	r3, #0
 801b804:	4659      	mov	r1, fp
 801b806:	2d00      	cmp	r5, #0
 801b808:	4620      	mov	r0, r4
 801b80a:	461a      	mov	r2, r3
 801b80c:	bfb8      	it	lt
 801b80e:	3501      	addlt	r5, #1
 801b810:	eb07 0565 	add.w	r5, r7, r5, asr #1
 801b814:	b22d      	sxth	r5, r5
 801b816:	9500      	str	r5, [sp, #0]
 801b818:	f7e8 fb4a 	bl	8003eb0 <lv_obj_align>
        last_cord += lv_obj_get_height(child) + inner;
 801b81c:	4620      	mov	r0, r4
 801b81e:	f7e9 fab9 	bl	8004d94 <lv_obj_get_height>
 801b822:	4448      	add	r0, r9
 801b824:	4407      	add	r7, r0
 801b826:	b23e      	sxth	r6, r7
    _LV_LL_READ_BACK(cont->child_ll, child) {
 801b828:	4621      	mov	r1, r4
 801b82a:	4640      	mov	r0, r8
 801b82c:	f7f9 f9ac 	bl	8014b88 <_lv_ll_get_prev>
 801b830:	4604      	mov	r4, r0
 801b832:	2800      	cmp	r0, #0
 801b834:	d1d5      	bne.n	801b7e2 <lv_cont_refr_layout.part.0+0x1fa>
 801b836:	e78b      	b.n	801b750 <lv_cont_refr_layout.part.0+0x168>
    LV_ASSERT_OBJ(cont, LV_OBJX_NAME);
 801b838:	4603      	mov	r3, r0
 801b83a:	465a      	mov	r2, fp
 801b83c:	483c      	ldr	r0, [pc, #240]	; (801b930 <lv_cont_refr_layout.part.0+0x348>)
 801b83e:	f7f8 ffc7 	bl	80147d0 <lv_debug_log_error>
 801b842:	e7fe      	b.n	801b842 <lv_cont_refr_layout.part.0+0x25a>
    lv_coord_t w_fit         =  lv_obj_get_width_fit(cont);
 801b844:	4658      	mov	r0, fp
    _LV_LL_READ_BACK(cont->child_ll, child) {
 801b846:	f10b 0604 	add.w	r6, fp, #4
    lv_coord_t w_fit         =  lv_obj_get_width_fit(cont);
 801b84a:	f7ea f87b 	bl	8005944 <lv_obj_get_width_fit>
 801b84e:	2214      	movs	r2, #20
 801b850:	4639      	mov	r1, r7
 801b852:	4605      	mov	r5, r0
 801b854:	4658      	mov	r0, fp
 801b856:	f7e9 fea3 	bl	80055a0 <_lv_obj_get_style_int>
    lv_coord_t y_ofs = inner + lv_obj_get_height(lv_obj_get_child(cont, NULL));
 801b85a:	4639      	mov	r1, r7
 801b85c:	4680      	mov	r8, r0
 801b85e:	4658      	mov	r0, fp
 801b860:	f7e9 f9f8 	bl	8004c54 <lv_obj_get_child>
 801b864:	f7e9 fa96 	bl	8004d94 <lv_obj_get_height>
 801b868:	4681      	mov	r9, r0
 801b86a:	fa1f f888 	uxth.w	r8, r8
    lv_obj_add_protect(cont, LV_PROTECT_CHILD_CHG);
 801b86e:	2101      	movs	r1, #1
 801b870:	4658      	mov	r0, fp
    lv_coord_t y_ofs = inner + lv_obj_get_height(lv_obj_get_child(cont, NULL));
 801b872:	44c1      	add	r9, r8
 801b874:	fa1f f389 	uxth.w	r3, r9
 801b878:	9303      	str	r3, [sp, #12]
    lv_obj_add_protect(cont, LV_PROTECT_CHILD_CHG);
 801b87a:	f7e7 ff0d 	bl	8003698 <lv_obj_add_protect>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
 801b87e:	4639      	mov	r1, r7
 801b880:	2212      	movs	r2, #18
 801b882:	4658      	mov	r0, fp
 801b884:	f7e9 fe8c 	bl	80055a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
 801b888:	4639      	mov	r1, r7
 801b88a:	2210      	movs	r2, #16
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
 801b88c:	4682      	mov	sl, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
 801b88e:	4658      	mov	r0, fp
 801b890:	f7e9 fe86 	bl	80055a0 <_lv_obj_get_style_int>
 801b894:	4607      	mov	r7, r0
    _LV_LL_READ_BACK(cont->child_ll, child) {
 801b896:	4630      	mov	r0, r6
 801b898:	f7f9 f96c 	bl	8014b74 <_lv_ll_get_tail>
 801b89c:	4604      	mov	r4, r0
 801b89e:	2800      	cmp	r0, #0
 801b8a0:	f43f af56 	beq.w	801b750 <lv_cont_refr_layout.part.0+0x168>
        if(act_x + obj_w > w_fit + left) {
 801b8a4:	eb05 030a 	add.w	r3, r5, sl
    lv_coord_t act_x = left;
 801b8a8:	46d1      	mov	r9, sl
 801b8aa:	4655      	mov	r5, sl
 801b8ac:	ee08 ba10 	vmov	s16, fp
 801b8b0:	469a      	mov	sl, r3
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 801b8b2:	4620      	mov	r0, r4
 801b8b4:	f7ea fd2a 	bl	800630c <lv_obj_get_hidden>
 801b8b8:	4603      	mov	r3, r0
 801b8ba:	2104      	movs	r1, #4
 801b8bc:	4620      	mov	r0, r4
 801b8be:	b9c3      	cbnz	r3, 801b8f2 <lv_cont_refr_layout.part.0+0x30a>
 801b8c0:	f7ea fd9c 	bl	80063fc <lv_obj_is_protected>
 801b8c4:	4603      	mov	r3, r0
        lv_coord_t obj_w = lv_obj_get_width(child);
 801b8c6:	4620      	mov	r0, r4
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 801b8c8:	b99b      	cbnz	r3, 801b8f2 <lv_cont_refr_layout.part.0+0x30a>
        lv_coord_t obj_w = lv_obj_get_width(child);
 801b8ca:	f7e9 fa4f 	bl	8004d6c <lv_obj_get_width>
            act_y += y_ofs;
 801b8ce:	9b03      	ldr	r3, [sp, #12]
        lv_coord_t obj_w = lv_obj_get_width(child);
 801b8d0:	4683      	mov	fp, r0
        lv_obj_set_pos(child, act_x, act_y);
 801b8d2:	4620      	mov	r0, r4
            act_y += y_ofs;
 801b8d4:	19da      	adds	r2, r3, r7
        if(act_x + obj_w > w_fit + left) {
 801b8d6:	eb05 030b 	add.w	r3, r5, fp
 801b8da:	4553      	cmp	r3, sl
 801b8dc:	dd01      	ble.n	801b8e2 <lv_cont_refr_layout.part.0+0x2fa>
            act_y += y_ofs;
 801b8de:	b217      	sxth	r7, r2
            act_x = left;
 801b8e0:	464d      	mov	r5, r9
        lv_obj_set_pos(child, act_x, act_y);
 801b8e2:	4629      	mov	r1, r5
 801b8e4:	463a      	mov	r2, r7
 801b8e6:	f7e8 fa53 	bl	8003d90 <lv_obj_set_pos>
        act_x += inner + obj_w;
 801b8ea:	eb08 030b 	add.w	r3, r8, fp
 801b8ee:	441d      	add	r5, r3
 801b8f0:	b22d      	sxth	r5, r5
    _LV_LL_READ_BACK(cont->child_ll, child) {
 801b8f2:	4621      	mov	r1, r4
 801b8f4:	4630      	mov	r0, r6
 801b8f6:	f7f9 f947 	bl	8014b88 <_lv_ll_get_prev>
 801b8fa:	4604      	mov	r4, r0
 801b8fc:	2800      	cmp	r0, #0
 801b8fe:	d1d8      	bne.n	801b8b2 <lv_cont_refr_layout.part.0+0x2ca>
 801b900:	ee18 ba10 	vmov	fp, s16
 801b904:	e724      	b.n	801b750 <lv_cont_refr_layout.part.0+0x168>
    LV_ASSERT_OBJ(cont, LV_OBJX_NAME);
 801b906:	4658      	mov	r0, fp
 801b908:	f7f8 ff5e 	bl	80147c8 <lv_debug_check_null>
 801b90c:	b990      	cbnz	r0, 801b934 <lv_cont_refr_layout.part.0+0x34c>
 801b90e:	4603      	mov	r3, r0
 801b910:	465a      	mov	r2, fp
 801b912:	4807      	ldr	r0, [pc, #28]	; (801b930 <lv_cont_refr_layout.part.0+0x348>)
 801b914:	f7f8 ff5c 	bl	80147d0 <lv_debug_log_error>
 801b918:	e7fe      	b.n	801b918 <lv_cont_refr_layout.part.0+0x330>
 801b91a:	4658      	mov	r0, fp
 801b91c:	f7f8 ff54 	bl	80147c8 <lv_debug_check_null>
 801b920:	4603      	mov	r3, r0
 801b922:	2800      	cmp	r0, #0
 801b924:	d15c      	bne.n	801b9e0 <lv_cont_refr_layout.part.0+0x3f8>
 801b926:	465a      	mov	r2, fp
 801b928:	4801      	ldr	r0, [pc, #4]	; (801b930 <lv_cont_refr_layout.part.0+0x348>)
 801b92a:	f7f8 ff51 	bl	80147d0 <lv_debug_log_error>
 801b92e:	e7fe      	b.n	801b92e <lv_cont_refr_layout.part.0+0x346>
 801b930:	0801e1d4 	.word	0x0801e1d4
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 801b934:	4658      	mov	r0, fp
 801b936:	f7ea fdc1 	bl	80064bc <lv_obj_get_ext_attr>
 801b93a:	4603      	mov	r3, r0
    lv_bidi_dir_t base_dir = lv_obj_get_base_dir(cont);
 801b93c:	4658      	mov	r0, fp
    return ext->layout;
 801b93e:	781c      	ldrb	r4, [r3, #0]
    lv_bidi_dir_t base_dir = lv_obj_get_base_dir(cont);
 801b940:	f7ea fd4a 	bl	80063d8 <lv_obj_get_base_dir>
 801b944:	4605      	mov	r5, r0
    return ext->layout;
 801b946:	f004 040f 	and.w	r4, r4, #15
    switch(type) {
 801b94a:	2c06      	cmp	r4, #6
 801b94c:	f000 81f0 	beq.w	801bd30 <lv_cont_refr_layout.part.0+0x748>
 801b950:	2c07      	cmp	r4, #7
 801b952:	f000 81f2 	beq.w	801bd3a <lv_cont_refr_layout.part.0+0x752>
 801b956:	2c05      	cmp	r4, #5
 801b958:	f000 819f 	beq.w	801bc9a <lv_cont_refr_layout.part.0+0x6b2>
            align     = base_dir == LV_BIDI_DIR_RTL ? LV_ALIGN_IN_TOP_RIGHT : LV_ALIGN_IN_TOP_LEFT;
 801b95c:	2801      	cmp	r0, #1
            vpad_corr = 0;
 801b95e:	f04f 0700 	mov.w	r7, #0
            align     = base_dir == LV_BIDI_DIR_RTL ? LV_ALIGN_IN_TOP_RIGHT : LV_ALIGN_IN_TOP_LEFT;
 801b962:	f000 81a3 	beq.w	801bcac <lv_cont_refr_layout.part.0+0x6c4>
 801b966:	f04f 0901 	mov.w	r9, #1
    lv_obj_add_protect(cont, LV_PROTECT_CHILD_CHG);
 801b96a:	2101      	movs	r1, #1
 801b96c:	4658      	mov	r0, fp
 801b96e:	f7e7 fe93 	bl	8003698 <lv_obj_add_protect>
    _LV_LL_READ_BACK(cont->child_ll, child) {
 801b972:	f10b 0604 	add.w	r6, fp, #4
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
 801b976:	2212      	movs	r2, #18
 801b978:	2100      	movs	r1, #0
 801b97a:	4658      	mov	r0, fp
 801b97c:	f7e9 fe10 	bl	80055a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
 801b980:	2214      	movs	r2, #20
 801b982:	2100      	movs	r1, #0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
 801b984:	4605      	mov	r5, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
 801b986:	4658      	mov	r0, fp
 801b988:	f7e9 fe0a 	bl	80055a0 <_lv_obj_get_style_int>
 801b98c:	4680      	mov	r8, r0
 801b98e:	4630      	mov	r0, r6
 801b990:	f7f9 f8f0 	bl	8014b74 <_lv_ll_get_tail>
 801b994:	4604      	mov	r4, r0
 801b996:	2800      	cmp	r0, #0
 801b998:	f43f aeda 	beq.w	801b750 <lv_cont_refr_layout.part.0+0x168>
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 801b99c:	4620      	mov	r0, r4
 801b99e:	f7ea fcb5 	bl	800630c <lv_obj_get_hidden>
 801b9a2:	4603      	mov	r3, r0
 801b9a4:	2104      	movs	r1, #4
 801b9a6:	4620      	mov	r0, r4
 801b9a8:	b993      	cbnz	r3, 801b9d0 <lv_cont_refr_layout.part.0+0x3e8>
 801b9aa:	f7ea fd27 	bl	80063fc <lv_obj_is_protected>
 801b9ae:	4684      	mov	ip, r0
        else lv_obj_align(child, cont, align, last_cord, vpad_corr);
 801b9b0:	462b      	mov	r3, r5
 801b9b2:	464a      	mov	r2, r9
 801b9b4:	4659      	mov	r1, fp
 801b9b6:	4620      	mov	r0, r4
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 801b9b8:	f1bc 0f00 	cmp.w	ip, #0
 801b9bc:	d108      	bne.n	801b9d0 <lv_cont_refr_layout.part.0+0x3e8>
        else lv_obj_align(child, cont, align, last_cord, vpad_corr);
 801b9be:	9700      	str	r7, [sp, #0]
 801b9c0:	f7e8 fa76 	bl	8003eb0 <lv_obj_align>
        last_cord += lv_obj_get_width(child) + inner;
 801b9c4:	4620      	mov	r0, r4
 801b9c6:	f7e9 f9d1 	bl	8004d6c <lv_obj_get_width>
 801b9ca:	4440      	add	r0, r8
 801b9cc:	4405      	add	r5, r0
 801b9ce:	b22d      	sxth	r5, r5
    _LV_LL_READ_BACK(cont->child_ll, child) {
 801b9d0:	4621      	mov	r1, r4
 801b9d2:	4630      	mov	r0, r6
 801b9d4:	f7f9 f8d8 	bl	8014b88 <_lv_ll_get_prev>
 801b9d8:	4604      	mov	r4, r0
 801b9da:	2800      	cmp	r0, #0
 801b9dc:	d1de      	bne.n	801b99c <lv_cont_refr_layout.part.0+0x3b4>
 801b9de:	e6b7      	b.n	801b750 <lv_cont_refr_layout.part.0+0x168>
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 801b9e0:	4658      	mov	r0, fp
    child_rs = _lv_ll_get_tail(&cont->child_ll); /*Set the row starter child*/
 801b9e2:	f10b 0604 	add.w	r6, fp, #4
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 801b9e6:	f7ea fd69 	bl	80064bc <lv_obj_get_ext_attr>
 801b9ea:	4603      	mov	r3, r0
    lv_coord_t w_obj         = lv_obj_get_width(cont);
 801b9ec:	4658      	mov	r0, fp
    return ext->layout;
 801b9ee:	781b      	ldrb	r3, [r3, #0]
 801b9f0:	f003 030f 	and.w	r3, r3, #15
 801b9f4:	9308      	str	r3, [sp, #32]
    lv_coord_t w_obj         = lv_obj_get_width(cont);
 801b9f6:	f7e9 f9b9 	bl	8004d6c <lv_obj_get_width>
 801b9fa:	4603      	mov	r3, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
 801b9fc:	2210      	movs	r2, #16
 801b9fe:	4639      	mov	r1, r7
 801ba00:	4658      	mov	r0, fp
 801ba02:	9305      	str	r3, [sp, #20]
 801ba04:	f7e9 fdcc 	bl	80055a0 <_lv_obj_get_style_int>
 801ba08:	4681      	mov	r9, r0
    child_rs = _lv_ll_get_tail(&cont->child_ll); /*Set the row starter child*/
 801ba0a:	4630      	mov	r0, r6
 801ba0c:	f8cd 9018 	str.w	r9, [sp, #24]
 801ba10:	f7f9 f8b0 	bl	8014b74 <_lv_ll_get_tail>
    if(child_rs == NULL) return;                /*Return if no child*/
 801ba14:	4604      	mov	r4, r0
 801ba16:	2800      	cmp	r0, #0
 801ba18:	f43f ae17 	beq.w	801b64a <lv_cont_refr_layout.part.0+0x62>
    lv_obj_add_protect(cont, LV_PROTECT_CHILD_CHG);
 801ba1c:	2101      	movs	r1, #1
 801ba1e:	4658      	mov	r0, fp
 801ba20:	f7e7 fe3a 	bl	8003698 <lv_obj_add_protect>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
 801ba24:	2212      	movs	r2, #18
 801ba26:	4639      	mov	r1, r7
 801ba28:	4658      	mov	r0, fp
 801ba2a:	f7e9 fdb9 	bl	80055a0 <_lv_obj_get_style_int>
 801ba2e:	4603      	mov	r3, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
 801ba30:	2213      	movs	r2, #19
 801ba32:	4639      	mov	r1, r7
 801ba34:	4658      	mov	r0, fp
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
 801ba36:	4698      	mov	r8, r3
 801ba38:	930b      	str	r3, [sp, #44]	; 0x2c
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
 801ba3a:	f7e9 fdb1 	bl	80055a0 <_lv_obj_get_style_int>
 801ba3e:	4605      	mov	r5, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
 801ba40:	4639      	mov	r1, r7
 801ba42:	2214      	movs	r2, #20
 801ba44:	4658      	mov	r0, fp
 801ba46:	4445      	add	r5, r8
 801ba48:	f7e9 fdaa 	bl	80055a0 <_lv_obj_get_style_int>
 801ba4c:	ee08 ba10 	vmov	s16, fp
 801ba50:	9004      	str	r0, [sp, #16]
    while(child_rs != NULL) {
 801ba52:	b22b      	sxth	r3, r5
 801ba54:	9307      	str	r3, [sp, #28]
        uint32_t obj_num = 0;
 801ba56:	2700      	movs	r7, #0
        lv_coord_t w_row = pleft + pright; /*The width is at least the left+right pad*/
 801ba58:	f8dd 901c 	ldr.w	r9, [sp, #28]
 801ba5c:	4625      	mov	r5, r4
        lv_coord_t h_row = 0;
 801ba5e:	46b8      	mov	r8, r7
            if(lv_obj_get_hidden(child_rc) == false && lv_obj_is_protected(child_rc, LV_PROTECT_POS) == false) {
 801ba60:	4620      	mov	r0, r4
 801ba62:	f7ea fc53 	bl	800630c <lv_obj_get_hidden>
 801ba66:	4603      	mov	r3, r0
 801ba68:	2104      	movs	r1, #4
 801ba6a:	4620      	mov	r0, r4
 801ba6c:	b923      	cbnz	r3, 801ba78 <lv_cont_refr_layout.part.0+0x490>
 801ba6e:	f7ea fcc5 	bl	80063fc <lv_obj_is_protected>
 801ba72:	4683      	mov	fp, r0
 801ba74:	2800      	cmp	r0, #0
 801ba76:	d036      	beq.n	801bae6 <lv_cont_refr_layout.part.0+0x4fe>
            child_rc = _lv_ll_get_prev(&cont->child_ll, child_rc); /*Load the next object*/
 801ba78:	4621      	mov	r1, r4
 801ba7a:	4630      	mov	r0, r6
 801ba7c:	f7f9 f884 	bl	8014b88 <_lv_ll_get_prev>
 801ba80:	4604      	mov	r4, r0
            if(obj_num == 0)
 801ba82:	b35f      	cbz	r7, 801badc <lv_cont_refr_layout.part.0+0x4f4>
        } while(child_rc != NULL);
 801ba84:	2800      	cmp	r0, #0
 801ba86:	d1eb      	bne.n	801ba60 <lv_cont_refr_layout.part.0+0x478>
        else if(obj_num == 1) {
 801ba88:	2f01      	cmp	r7, #1
 801ba8a:	f040 8098 	bne.w	801bbbe <lv_cont_refr_layout.part.0+0x5d6>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int, scalar)
 801ba8e:	2215      	movs	r2, #21
 801ba90:	2100      	movs	r1, #0
 801ba92:	4628      	mov	r0, r5
 801ba94:	f7e9 fd84 	bl	80055a0 <_lv_obj_get_style_int>
                         act_y + lv_obj_get_style_margin_top(child_rs, LV_OBJ_PART_MAIN));
 801ba98:	9906      	ldr	r1, [sp, #24]
 801ba9a:	4602      	mov	r2, r0
            lv_obj_align(child_rs, cont, LV_ALIGN_IN_TOP_MID,
 801ba9c:	4628      	mov	r0, r5
 801ba9e:	2300      	movs	r3, #0
                         act_y + lv_obj_get_style_margin_top(child_rs, LV_OBJ_PART_MAIN));
 801baa0:	1855      	adds	r5, r2, r1
            lv_obj_align(child_rs, cont, LV_ALIGN_IN_TOP_MID,
 801baa2:	2202      	movs	r2, #2
 801baa4:	ee18 1a10 	vmov	r1, s16
 801baa8:	b22d      	sxth	r5, r5
 801baaa:	9500      	str	r5, [sp, #0]
 801baac:	f7e8 fa00 	bl	8003eb0 <lv_obj_align>
        if(child_rc == NULL) break;
 801bab0:	2c00      	cmp	r4, #0
 801bab2:	f43f af25 	beq.w	801b900 <lv_cont_refr_layout.part.0+0x318>
 801bab6:	f8bd 5018 	ldrh.w	r5, [sp, #24]
 801baba:	fa1f f888 	uxth.w	r8, r8
 801babe:	f8bd a010 	ldrh.w	sl, [sp, #16]
        act_y += pinner + h_row;           /*y increment*/
 801bac2:	44c2      	add	sl, r8
        child_rs = _lv_ll_get_prev(&cont->child_ll, child_rc); /*Go to the next object*/
 801bac4:	4621      	mov	r1, r4
 801bac6:	4630      	mov	r0, r6
        act_y += pinner + h_row;           /*y increment*/
 801bac8:	44aa      	add	sl, r5
 801baca:	fa0f f38a 	sxth.w	r3, sl
 801bace:	9306      	str	r3, [sp, #24]
        child_rs = _lv_ll_get_prev(&cont->child_ll, child_rc); /*Go to the next object*/
 801bad0:	f7f9 f85a 	bl	8014b88 <_lv_ll_get_prev>
    while(child_rs != NULL) {
 801bad4:	4604      	mov	r4, r0
 801bad6:	2800      	cmp	r0, #0
 801bad8:	d1bd      	bne.n	801ba56 <lv_cont_refr_layout.part.0+0x46e>
 801bada:	e711      	b.n	801b900 <lv_cont_refr_layout.part.0+0x318>
        } while(child_rc != NULL);
 801badc:	2800      	cmp	r0, #0
 801bade:	f43f af0f 	beq.w	801b900 <lv_cont_refr_layout.part.0+0x318>
            child_rc = _lv_ll_get_prev(&cont->child_ll, child_rc); /*Load the next object*/
 801bae2:	4625      	mov	r5, r4
 801bae4:	e7bc      	b.n	801ba60 <lv_cont_refr_layout.part.0+0x478>
                lv_coord_t w = lv_obj_get_width(child_rc);
 801bae6:	4620      	mov	r0, r4
                w_row += w + pinner; /*Add the object width + inner padding*/
 801bae8:	f8bd a010 	ldrh.w	sl, [sp, #16]
                lv_coord_t w = lv_obj_get_width(child_rc);
 801baec:	f7e9 f93e 	bl	8004d6c <lv_obj_get_width>
 801baf0:	4603      	mov	r3, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_LEFT, margin_left, lv_style_int_t, _int, scalar)
 801baf2:	2217      	movs	r2, #23
 801baf4:	4659      	mov	r1, fp
 801baf6:	4620      	mov	r0, r4
 801baf8:	9303      	str	r3, [sp, #12]
 801bafa:	f7e9 fd51 	bl	80055a0 <_lv_obj_get_style_int>
                w += lv_obj_get_style_margin_left(child_rc, LV_OBJ_PART_MAIN);
 801bafe:	9b03      	ldr	r3, [sp, #12]
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_RIGHT, margin_right, lv_style_int_t, _int, scalar)
 801bb00:	2218      	movs	r2, #24
 801bb02:	4659      	mov	r1, fp
 801bb04:	4403      	add	r3, r0
 801bb06:	4620      	mov	r0, r4
 801bb08:	b29b      	uxth	r3, r3
 801bb0a:	9303      	str	r3, [sp, #12]
 801bb0c:	f7e9 fd48 	bl	80055a0 <_lv_obj_get_style_int>
                w += lv_obj_get_style_margin_right(child_rc, LV_OBJ_PART_MAIN);
 801bb10:	9a03      	ldr	r2, [sp, #12]
 801bb12:	4603      	mov	r3, r0
                w_row += w + pinner; /*Add the object width + inner padding*/
 801bb14:	eb0a 0109 	add.w	r1, sl, r9
                lv_coord_t h = lv_obj_get_height(child_rc);
 801bb18:	4620      	mov	r0, r4
                w += lv_obj_get_style_margin_right(child_rc, LV_OBJ_PART_MAIN);
 801bb1a:	4413      	add	r3, r2
                if(w_row + w > w_obj) {
 801bb1c:	fa09 f283 	sxtah	r2, r9, r3
                w += lv_obj_get_style_margin_right(child_rc, LV_OBJ_PART_MAIN);
 801bb20:	b29b      	uxth	r3, r3
                w_row += w + pinner; /*Add the object width + inner padding*/
 801bb22:	440b      	add	r3, r1
                if(w_row + w > w_obj) {
 801bb24:	9905      	ldr	r1, [sp, #20]
 801bb26:	428a      	cmp	r2, r1
 801bb28:	f300 80a0 	bgt.w	801bc6c <lv_cont_refr_layout.part.0+0x684>
                w_row += w + pinner; /*Add the object width + inner padding*/
 801bb2c:	fa0f f983 	sxth.w	r9, r3
                obj_num++;
 801bb30:	3701      	adds	r7, #1
                lv_coord_t h = lv_obj_get_height(child_rc);
 801bb32:	f7e9 f92f 	bl	8004d94 <lv_obj_get_height>
 801bb36:	4603      	mov	r3, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int, scalar)
 801bb38:	4659      	mov	r1, fp
 801bb3a:	2215      	movs	r2, #21
 801bb3c:	4620      	mov	r0, r4
 801bb3e:	9303      	str	r3, [sp, #12]
 801bb40:	f7e9 fd2e 	bl	80055a0 <_lv_obj_get_style_int>
                h += lv_obj_get_style_margin_top(child_rc, LV_OBJ_PART_MAIN);
 801bb44:	9b03      	ldr	r3, [sp, #12]
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
 801bb46:	4659      	mov	r1, fp
 801bb48:	2216      	movs	r2, #22
 801bb4a:	eb00 0b03 	add.w	fp, r0, r3
 801bb4e:	4620      	mov	r0, r4
 801bb50:	f7e9 fd26 	bl	80055a0 <_lv_obj_get_style_int>
 801bb54:	4603      	mov	r3, r0
 801bb56:	fa1f fb8b 	uxth.w	fp, fp
                if(lv_obj_is_protected(child_rc, LV_PROTECT_FOLLOW))
 801bb5a:	2108      	movs	r1, #8
 801bb5c:	4620      	mov	r0, r4
                h += lv_obj_get_style_margin_bottom(child_rc, LV_OBJ_PART_MAIN);
 801bb5e:	449b      	add	fp, r3
                h_row = LV_MATH_MAX(h_row, h);         /*Search the highest object*/
 801bb60:	fa0f fb8b 	sxth.w	fp, fp
 801bb64:	45d8      	cmp	r8, fp
 801bb66:	bfb8      	it	lt
 801bb68:	46d8      	movlt	r8, fp
                if(lv_obj_is_protected(child_rc, LV_PROTECT_FOLLOW))
 801bb6a:	f7ea fc47 	bl	80063fc <lv_obj_is_protected>
 801bb6e:	2800      	cmp	r0, #0
 801bb70:	d082      	beq.n	801ba78 <lv_cont_refr_layout.part.0+0x490>
        if(obj_num == 0) {
 801bb72:	2f00      	cmp	r7, #0
 801bb74:	d188      	bne.n	801ba88 <lv_cont_refr_layout.part.0+0x4a0>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int, scalar)
 801bb76:	2215      	movs	r2, #21
 801bb78:	2100      	movs	r1, #0
 801bb7a:	4620      	mov	r0, r4
                lv_obj_align(child_rc, cont, LV_ALIGN_IN_TOP_MID, 0, act_y + mtop);
 801bb7c:	f8bd 5018 	ldrh.w	r5, [sp, #24]
 801bb80:	f7e9 fd0e 	bl	80055a0 <_lv_obj_get_style_int>
 801bb84:	2300      	movs	r3, #0
 801bb86:	b287      	uxth	r7, r0
 801bb88:	2202      	movs	r2, #2
 801bb8a:	ee18 1a10 	vmov	r1, s16
 801bb8e:	4620      	mov	r0, r4
 801bb90:	eb05 0c07 	add.w	ip, r5, r7
 801bb94:	fa0f fc8c 	sxth.w	ip, ip
 801bb98:	f8cd c000 	str.w	ip, [sp]
 801bb9c:	f7e8 f988 	bl	8003eb0 <lv_obj_align>
                h_row = lv_obj_get_height(child_rc); /*Not set previously because of the early break*/
 801bba0:	4620      	mov	r0, r4
 801bba2:	f7e9 f8f7 	bl	8004d94 <lv_obj_get_height>
                h_row += mtop;
 801bba6:	4407      	add	r7, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
 801bba8:	2216      	movs	r2, #22
 801bbaa:	2100      	movs	r1, #0
 801bbac:	b2bf      	uxth	r7, r7
 801bbae:	4620      	mov	r0, r4
 801bbb0:	f7e9 fcf6 	bl	80055a0 <_lv_obj_get_style_int>
                h_row += lv_obj_get_style_margin_bottom(child_rc, LV_OBJ_PART_MAIN);
 801bbb4:	eb07 0800 	add.w	r8, r7, r0
 801bbb8:	fa1f f888 	uxth.w	r8, r8
 801bbbc:	e781      	b.n	801bac2 <lv_cont_refr_layout.part.0+0x4da>
            w_row -= pinner * obj_num;
 801bbbe:	9b04      	ldr	r3, [sp, #16]
            if(lv_obj_get_base_dir(cont) == LV_BIDI_DIR_RTL) {
 801bbc0:	ee18 0a10 	vmov	r0, s16
            lv_coord_t new_pinner = (w_obj - w_row) / (obj_num - 1);
 801bbc4:	9a05      	ldr	r2, [sp, #20]
            w_row -= pinner * obj_num;
 801bbc6:	fb13 f307 	smulbb	r3, r3, r7
            lv_coord_t new_pinner = (w_obj - w_row) / (obj_num - 1);
 801bbca:	3f01      	subs	r7, #1
            w_row -= pinner * obj_num;
 801bbcc:	eba9 0303 	sub.w	r3, r9, r3
            lv_coord_t new_pinner = (w_obj - w_row) / (obj_num - 1);
 801bbd0:	b21b      	sxth	r3, r3
 801bbd2:	1ad3      	subs	r3, r2, r3
 801bbd4:	fbb3 f7f7 	udiv	r7, r3, r7
 801bbd8:	b23b      	sxth	r3, r7
 801bbda:	9303      	str	r3, [sp, #12]
            if(lv_obj_get_base_dir(cont) == LV_BIDI_DIR_RTL) {
 801bbdc:	f7ea fbfc 	bl	80063d8 <lv_obj_get_base_dir>
 801bbe0:	2801      	cmp	r0, #1
 801bbe2:	d054      	beq.n	801bc8e <lv_cont_refr_layout.part.0+0x6a6>
 801bbe4:	2301      	movs	r3, #1
                align = LV_ALIGN_IN_TOP_LEFT;
 801bbe6:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
            while(child_tmp != NULL) {
 801bbea:	2d00      	cmp	r5, #0
 801bbec:	f43f af60 	beq.w	801bab0 <lv_cont_refr_layout.part.0+0x4c8>
                                         act_y + h_row - lv_obj_get_height(child_tmp) - lv_obj_get_style_margin_bottom(child_tmp, LV_OBJ_PART_MAIN));
 801bbf0:	9b06      	ldr	r3, [sp, #24]
            while(child_tmp != NULL) {
 801bbf2:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
                                         act_y + h_row - lv_obj_get_height(child_tmp) - lv_obj_get_style_margin_bottom(child_tmp, LV_OBJ_PART_MAIN));
 801bbf6:	4443      	add	r3, r8
 801bbf8:	b29b      	uxth	r3, r3
 801bbfa:	930c      	str	r3, [sp, #48]	; 0x30
 801bbfc:	e00a      	b.n	801bc14 <lv_cont_refr_layout.part.0+0x62c>
                if(child_tmp == child_rc) break;
 801bbfe:	42a5      	cmp	r5, r4
 801bc00:	f43f af59 	beq.w	801bab6 <lv_cont_refr_layout.part.0+0x4ce>
                child_tmp = _lv_ll_get_prev(&cont->child_ll, child_tmp);
 801bc04:	4629      	mov	r1, r5
 801bc06:	4630      	mov	r0, r6
 801bc08:	f7f8 ffbe 	bl	8014b88 <_lv_ll_get_prev>
            while(child_tmp != NULL) {
 801bc0c:	4605      	mov	r5, r0
 801bc0e:	2800      	cmp	r0, #0
 801bc10:	f43f af4e 	beq.w	801bab0 <lv_cont_refr_layout.part.0+0x4c8>
                if(lv_obj_get_hidden(child_tmp) == false && lv_obj_is_protected(child_tmp, LV_PROTECT_POS) == false) {
 801bc14:	4628      	mov	r0, r5
 801bc16:	f7ea fb79 	bl	800630c <lv_obj_get_hidden>
 801bc1a:	2800      	cmp	r0, #0
 801bc1c:	d1ef      	bne.n	801bbfe <lv_cont_refr_layout.part.0+0x616>
 801bc1e:	2104      	movs	r1, #4
 801bc20:	4628      	mov	r0, r5
 801bc22:	f7ea fbeb 	bl	80063fc <lv_obj_is_protected>
 801bc26:	4683      	mov	fp, r0
 801bc28:	2800      	cmp	r0, #0
 801bc2a:	d1e8      	bne.n	801bbfe <lv_cont_refr_layout.part.0+0x616>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_LEFT, margin_left, lv_style_int_t, _int, scalar)
 801bc2c:	4601      	mov	r1, r0
 801bc2e:	2217      	movs	r2, #23
 801bc30:	4628      	mov	r0, r5
 801bc32:	f7e9 fcb5 	bl	80055a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_RIGHT, margin_right, lv_style_int_t, _int, scalar)
 801bc36:	2218      	movs	r2, #24
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_LEFT, margin_left, lv_style_int_t, _int, scalar)
 801bc38:	4607      	mov	r7, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_RIGHT, margin_right, lv_style_int_t, _int, scalar)
 801bc3a:	4659      	mov	r1, fp
 801bc3c:	4628      	mov	r0, r5
 801bc3e:	f7e9 fcaf 	bl	80055a0 <_lv_obj_get_style_int>
                    switch(type) {
 801bc42:	9b08      	ldr	r3, [sp, #32]
 801bc44:	4681      	mov	r9, r0
 801bc46:	2b09      	cmp	r3, #9
 801bc48:	f000 80b2 	beq.w	801bdb0 <lv_cont_refr_layout.part.0+0x7c8>
 801bc4c:	2b0a      	cmp	r3, #10
 801bc4e:	f000 809a 	beq.w	801bd86 <lv_cont_refr_layout.part.0+0x79e>
 801bc52:	2b08      	cmp	r3, #8
 801bc54:	d07e      	beq.n	801bd54 <lv_cont_refr_layout.part.0+0x76c>
                    act_x += lv_obj_get_width(child_tmp) + new_pinner + mleft + mright;
 801bc56:	4628      	mov	r0, r5
 801bc58:	f7e9 f888 	bl	8004d6c <lv_obj_get_width>
 801bc5c:	9b03      	ldr	r3, [sp, #12]
 801bc5e:	4418      	add	r0, r3
 801bc60:	4407      	add	r7, r0
 801bc62:	44b9      	add	r9, r7
 801bc64:	44ca      	add	sl, r9
 801bc66:	fa0f fa8a 	sxth.w	sl, sl
 801bc6a:	e7c8      	b.n	801bbfe <lv_cont_refr_layout.part.0+0x616>
                    if(child_rc != NULL && obj_num != 0) {
 801bc6c:	2f00      	cmp	r7, #0
 801bc6e:	f040 80ba 	bne.w	801bde6 <lv_cont_refr_layout.part.0+0x7fe>
 801bc72:	f8bd a010 	ldrh.w	sl, [sp, #16]
 801bc76:	e77e      	b.n	801bb76 <lv_cont_refr_layout.part.0+0x58e>
    switch(type) {
 801bc78:	2302      	movs	r3, #2
 801bc7a:	463e      	mov	r6, r7
 801bc7c:	ee08 3a10 	vmov	s16, r3
 801bc80:	e51b      	b.n	801b6ba <lv_cont_refr_layout.part.0+0xd2>
            hpad_corr = -right;
 801bc82:	4264      	negs	r4, r4
            align     = LV_ALIGN_IN_TOP_RIGHT;
 801bc84:	2303      	movs	r3, #3
            hpad_corr = -right;
 801bc86:	b226      	sxth	r6, r4
            align     = LV_ALIGN_IN_TOP_RIGHT;
 801bc88:	ee08 3a10 	vmov	s16, r3
            break;
 801bc8c:	e515      	b.n	801b6ba <lv_cont_refr_layout.part.0+0xd2>
                align = LV_ALIGN_IN_TOP_RIGHT;
 801bc8e:	2303      	movs	r3, #3
 801bc90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801bc94:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 801bc98:	e7a7      	b.n	801bbea <lv_cont_refr_layout.part.0+0x602>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
 801bc9a:	2210      	movs	r2, #16
 801bc9c:	2100      	movs	r1, #0
 801bc9e:	4658      	mov	r0, fp
 801bca0:	f7e9 fc7e 	bl	80055a0 <_lv_obj_get_style_int>
            align     = base_dir == LV_BIDI_DIR_RTL ? LV_ALIGN_IN_TOP_RIGHT : LV_ALIGN_IN_TOP_LEFT;
 801bca4:	2d01      	cmp	r5, #1
 801bca6:	4607      	mov	r7, r0
 801bca8:	f47f ae5d 	bne.w	801b966 <lv_cont_refr_layout.part.0+0x37e>
            align     = base_dir == LV_BIDI_DIR_RTL ? LV_ALIGN_IN_TOP_RIGHT : LV_ALIGN_IN_TOP_LEFT;
 801bcac:	f04f 0903 	mov.w	r9, #3
    lv_obj_add_protect(cont, LV_PROTECT_CHILD_CHG);
 801bcb0:	2101      	movs	r1, #1
 801bcb2:	4658      	mov	r0, fp
 801bcb4:	f7e7 fcf0 	bl	8003698 <lv_obj_add_protect>
    _LV_LL_READ_BACK(cont->child_ll, child) {
 801bcb8:	f10b 0604 	add.w	r6, fp, #4
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
 801bcbc:	2213      	movs	r2, #19
 801bcbe:	2100      	movs	r1, #0
 801bcc0:	4658      	mov	r0, fp
 801bcc2:	f7e9 fc6d 	bl	80055a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
 801bcc6:	2214      	movs	r2, #20
 801bcc8:	2100      	movs	r1, #0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
 801bcca:	4605      	mov	r5, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
 801bccc:	4658      	mov	r0, fp
 801bcce:	f7e9 fc67 	bl	80055a0 <_lv_obj_get_style_int>
 801bcd2:	4680      	mov	r8, r0
 801bcd4:	4630      	mov	r0, r6
 801bcd6:	f7f8 ff4d 	bl	8014b74 <_lv_ll_get_tail>
 801bcda:	4604      	mov	r4, r0
 801bcdc:	2800      	cmp	r0, #0
 801bcde:	f43f ad37 	beq.w	801b750 <lv_cont_refr_layout.part.0+0x168>
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 801bce2:	4620      	mov	r0, r4
 801bce4:	f7ea fb12 	bl	800630c <lv_obj_get_hidden>
 801bce8:	4603      	mov	r3, r0
 801bcea:	2104      	movs	r1, #4
 801bcec:	4620      	mov	r0, r4
 801bcee:	b9bb      	cbnz	r3, 801bd20 <lv_cont_refr_layout.part.0+0x738>
        if(base_dir == LV_BIDI_DIR_RTL) lv_obj_align(child, cont, align, -last_cord, vpad_corr);
 801bcf0:	fa1f fa85 	uxth.w	sl, r5
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 801bcf4:	f7ea fb82 	bl	80063fc <lv_obj_is_protected>
 801bcf8:	4684      	mov	ip, r0
        if(base_dir == LV_BIDI_DIR_RTL) lv_obj_align(child, cont, align, -last_cord, vpad_corr);
 801bcfa:	f1ca 0300 	rsb	r3, sl, #0
 801bcfe:	464a      	mov	r2, r9
 801bd00:	4659      	mov	r1, fp
 801bd02:	4620      	mov	r0, r4
 801bd04:	b21b      	sxth	r3, r3
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 801bd06:	f1bc 0f00 	cmp.w	ip, #0
 801bd0a:	d109      	bne.n	801bd20 <lv_cont_refr_layout.part.0+0x738>
        if(base_dir == LV_BIDI_DIR_RTL) lv_obj_align(child, cont, align, -last_cord, vpad_corr);
 801bd0c:	9700      	str	r7, [sp, #0]
 801bd0e:	f7e8 f8cf 	bl	8003eb0 <lv_obj_align>
        last_cord += lv_obj_get_width(child) + inner;
 801bd12:	4620      	mov	r0, r4
 801bd14:	f7e9 f82a 	bl	8004d6c <lv_obj_get_width>
 801bd18:	eb00 0508 	add.w	r5, r0, r8
 801bd1c:	4455      	add	r5, sl
 801bd1e:	b22d      	sxth	r5, r5
    _LV_LL_READ_BACK(cont->child_ll, child) {
 801bd20:	4621      	mov	r1, r4
 801bd22:	4630      	mov	r0, r6
 801bd24:	f7f8 ff30 	bl	8014b88 <_lv_ll_get_prev>
 801bd28:	4604      	mov	r4, r0
 801bd2a:	2800      	cmp	r0, #0
 801bd2c:	d1d9      	bne.n	801bce2 <lv_cont_refr_layout.part.0+0x6fa>
 801bd2e:	e50f      	b.n	801b750 <lv_cont_refr_layout.part.0+0x168>
            align     = base_dir == LV_BIDI_DIR_RTL ? LV_ALIGN_IN_RIGHT_MID : LV_ALIGN_IN_LEFT_MID;
 801bd30:	2801      	cmp	r0, #1
 801bd32:	d05e      	beq.n	801bdf2 <lv_cont_refr_layout.part.0+0x80a>
 801bd34:	f04f 0907 	mov.w	r9, #7
 801bd38:	e617      	b.n	801b96a <lv_cont_refr_layout.part.0+0x382>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
 801bd3a:	4639      	mov	r1, r7
 801bd3c:	2211      	movs	r2, #17
 801bd3e:	4658      	mov	r0, fp
 801bd40:	f7e9 fc2e 	bl	80055a0 <_lv_obj_get_style_int>
            align     = base_dir == LV_BIDI_DIR_RTL ? LV_ALIGN_IN_BOTTOM_RIGHT : LV_ALIGN_IN_BOTTOM_LEFT;
 801bd44:	2d01      	cmp	r5, #1
            vpad_corr = -lv_obj_get_style_pad_bottom(cont, LV_CONT_PART_MAIN);
 801bd46:	f1c0 0700 	rsb	r7, r0, #0
 801bd4a:	b23f      	sxth	r7, r7
            align     = base_dir == LV_BIDI_DIR_RTL ? LV_ALIGN_IN_BOTTOM_RIGHT : LV_ALIGN_IN_BOTTOM_LEFT;
 801bd4c:	d054      	beq.n	801bdf8 <lv_cont_refr_layout.part.0+0x810>
 801bd4e:	f04f 0904 	mov.w	r9, #4
 801bd52:	e60a      	b.n	801b96a <lv_cont_refr_layout.part.0+0x382>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int, scalar)
 801bd54:	4659      	mov	r1, fp
 801bd56:	2215      	movs	r2, #21
 801bd58:	4628      	mov	r0, r5
 801bd5a:	f7e9 fc21 	bl	80055a0 <_lv_obj_get_style_int>
                                         act_y + lv_obj_get_style_margin_top(child_tmp, LV_OBJ_PART_MAIN));
 801bd5e:	9906      	ldr	r1, [sp, #24]
                                         inv * (act_x + mleft),
 801bd60:	eb0a 0307 	add.w	r3, sl, r7
                            lv_obj_align(child_tmp, cont, align,
 801bd64:	9a09      	ldr	r2, [sp, #36]	; 0x24
                                         act_y + lv_obj_get_style_margin_top(child_tmp, LV_OBJ_PART_MAIN));
 801bd66:	eb00 0c01 	add.w	ip, r0, r1
                            lv_obj_align(child_tmp, cont, align,
 801bd6a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801bd6c:	fa0f fc8c 	sxth.w	ip, ip
 801bd70:	ee18 1a10 	vmov	r1, s16
 801bd74:	fb13 f300 	smulbb	r3, r3, r0
 801bd78:	f8cd c000 	str.w	ip, [sp]
 801bd7c:	4628      	mov	r0, r5
 801bd7e:	b21b      	sxth	r3, r3
 801bd80:	f7e8 f896 	bl	8003eb0 <lv_obj_align>
                            break;
 801bd84:	e767      	b.n	801bc56 <lv_cont_refr_layout.part.0+0x66e>
                                         act_y + h_row - lv_obj_get_height(child_tmp) - lv_obj_get_style_margin_bottom(child_tmp, LV_OBJ_PART_MAIN));
 801bd86:	4628      	mov	r0, r5
 801bd88:	f7e9 f804 	bl	8004d94 <lv_obj_get_height>
 801bd8c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
 801bd8e:	4659      	mov	r1, fp
 801bd90:	2216      	movs	r2, #22
 801bd92:	eba3 0c00 	sub.w	ip, r3, r0
 801bd96:	4628      	mov	r0, r5
 801bd98:	fa1f f38c 	uxth.w	r3, ip
 801bd9c:	930d      	str	r3, [sp, #52]	; 0x34
 801bd9e:	f7e9 fbff 	bl	80055a0 <_lv_obj_get_style_int>
 801bda2:	990d      	ldr	r1, [sp, #52]	; 0x34
                                         inv * (act_x + mleft),
 801bda4:	eb0a 0307 	add.w	r3, sl, r7
                            lv_obj_align(child_tmp, cont, align,
 801bda8:	9a09      	ldr	r2, [sp, #36]	; 0x24
                                         act_y + h_row - lv_obj_get_height(child_tmp) - lv_obj_get_style_margin_bottom(child_tmp, LV_OBJ_PART_MAIN));
 801bdaa:	eba1 0c00 	sub.w	ip, r1, r0
 801bdae:	e7dc      	b.n	801bd6a <lv_cont_refr_layout.part.0+0x782>
                                         act_y + (h_row - lv_obj_get_height(child_tmp)) / 2);
 801bdb0:	4628      	mov	r0, r5
 801bdb2:	f7e8 ffef 	bl	8004d94 <lv_obj_get_height>
                            lv_obj_align(child_tmp, cont, align,
 801bdb6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
                                         act_y + (h_row - lv_obj_get_height(child_tmp)) / 2);
 801bdb8:	ebb8 0000 	subs.w	r0, r8, r0
                                         inv * (act_x + mleft),
 801bdbc:	eb0a 0307 	add.w	r3, sl, r7
                            lv_obj_align(child_tmp, cont, align,
 801bdc0:	ee18 1a10 	vmov	r1, s16
 801bdc4:	fb13 f302 	smulbb	r3, r3, r2
                                         act_y + (h_row - lv_obj_get_height(child_tmp)) / 2);
 801bdc8:	bf48      	it	mi
 801bdca:	3001      	addmi	r0, #1
 801bdcc:	9a06      	ldr	r2, [sp, #24]
                            lv_obj_align(child_tmp, cont, align,
 801bdce:	b21b      	sxth	r3, r3
                                         act_y + (h_row - lv_obj_get_height(child_tmp)) / 2);
 801bdd0:	eb02 0060 	add.w	r0, r2, r0, asr #1
                            lv_obj_align(child_tmp, cont, align,
 801bdd4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801bdd6:	fa0f fc80 	sxth.w	ip, r0
 801bdda:	4628      	mov	r0, r5
 801bddc:	f8cd c000 	str.w	ip, [sp]
 801bde0:	f7e8 f866 	bl	8003eb0 <lv_obj_align>
                            break;
 801bde4:	e737      	b.n	801bc56 <lv_cont_refr_layout.part.0+0x66e>
                        child_rc = _lv_ll_get_next(&cont->child_ll, child_rc);
 801bde6:	4621      	mov	r1, r4
 801bde8:	4630      	mov	r0, r6
 801bdea:	f7f8 fec7 	bl	8014b7c <_lv_ll_get_next>
 801bdee:	4604      	mov	r4, r0
        if(obj_num == 0) {
 801bdf0:	e64a      	b.n	801ba88 <lv_cont_refr_layout.part.0+0x4a0>
            align     = base_dir == LV_BIDI_DIR_RTL ? LV_ALIGN_IN_RIGHT_MID : LV_ALIGN_IN_LEFT_MID;
 801bdf2:	f04f 0908 	mov.w	r9, #8
 801bdf6:	e75b      	b.n	801bcb0 <lv_cont_refr_layout.part.0+0x6c8>
            align     = base_dir == LV_BIDI_DIR_RTL ? LV_ALIGN_IN_BOTTOM_RIGHT : LV_ALIGN_IN_BOTTOM_LEFT;
 801bdf8:	f04f 0906 	mov.w	r9, #6
 801bdfc:	e758      	b.n	801bcb0 <lv_cont_refr_layout.part.0+0x6c8>
 801bdfe:	bf00      	nop

0801be00 <lv_cont_signal>:
    if(sign == LV_SIGNAL_GET_STYLE) {
 801be00:	2908      	cmp	r1, #8
{
 801be02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801be06:	4606      	mov	r6, r0
 801be08:	4617      	mov	r7, r2
    if(sign == LV_SIGNAL_GET_STYLE) {
 801be0a:	d013      	beq.n	801be34 <lv_cont_signal+0x34>
    res = ancestor_signal(cont, sign, param);
 801be0c:	4b27      	ldr	r3, [pc, #156]	; (801beac <lv_cont_signal+0xac>)
 801be0e:	460c      	mov	r4, r1
 801be10:	681b      	ldr	r3, [r3, #0]
 801be12:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 801be14:	2801      	cmp	r0, #1
    res = ancestor_signal(cont, sign, param);
 801be16:	4605      	mov	r5, r0
    if(res != LV_RES_OK) return res;
 801be18:	d109      	bne.n	801be2e <lv_cont_signal+0x2e>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
 801be1a:	2c07      	cmp	r4, #7
 801be1c:	d03f      	beq.n	801be9e <lv_cont_signal+0x9e>
    if(sign == LV_SIGNAL_STYLE_CHG) { /*Recalculate the padding if the style changed*/
 801be1e:	2c04      	cmp	r4, #4
 801be20:	d024      	beq.n	801be6c <lv_cont_signal+0x6c>
    else if(sign == LV_SIGNAL_CHILD_CHG) {
 801be22:	2c01      	cmp	r4, #1
 801be24:	d022      	beq.n	801be6c <lv_cont_signal+0x6c>
    else if(sign == LV_SIGNAL_COORD_CHG) {
 801be26:	2c02      	cmp	r4, #2
 801be28:	d00c      	beq.n	801be44 <lv_cont_signal+0x44>
    else if(sign == LV_SIGNAL_PARENT_SIZE_CHG) {
 801be2a:	2c03      	cmp	r4, #3
 801be2c:	d026      	beq.n	801be7c <lv_cont_signal+0x7c>
}
 801be2e:	4628      	mov	r0, r5
 801be30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    switch(type) {
 801be34:	7813      	ldrb	r3, [r2, #0]
 801be36:	bb5b      	cbnz	r3, 801be90 <lv_cont_signal+0x90>
            style_dsc_p = &cont->style_list;
 801be38:	3628      	adds	r6, #40	; 0x28
        if(info->result != NULL) return LV_RES_OK;
 801be3a:	2501      	movs	r5, #1
        info->result = lv_cont_get_style(cont, info->part);
 801be3c:	6056      	str	r6, [r2, #4]
}
 801be3e:	4628      	mov	r0, r5
 801be40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(lv_obj_get_width(cont) != lv_area_get_width(param) || lv_obj_get_height(cont) != lv_area_get_height(param)) {
 801be44:	4630      	mov	r0, r6
 801be46:	f7e8 ff91 	bl	8004d6c <lv_obj_get_width>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801be4a:	88bb      	ldrh	r3, [r7, #4]
 801be4c:	883a      	ldrh	r2, [r7, #0]
 801be4e:	3301      	adds	r3, #1
 801be50:	1a9b      	subs	r3, r3, r2
 801be52:	b21b      	sxth	r3, r3
 801be54:	4298      	cmp	r0, r3
 801be56:	d109      	bne.n	801be6c <lv_cont_signal+0x6c>
 801be58:	4630      	mov	r0, r6
 801be5a:	f7e8 ff9b 	bl	8004d94 <lv_obj_get_height>
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801be5e:	88fb      	ldrh	r3, [r7, #6]
 801be60:	887a      	ldrh	r2, [r7, #2]
 801be62:	3301      	adds	r3, #1
 801be64:	1a9b      	subs	r3, r3, r2
 801be66:	b21b      	sxth	r3, r3
 801be68:	4298      	cmp	r0, r3
 801be6a:	d0e0      	beq.n	801be2e <lv_cont_signal+0x2e>
    if(lv_obj_is_protected(cont, LV_PROTECT_CHILD_CHG)) return;
 801be6c:	2101      	movs	r1, #1
 801be6e:	4630      	mov	r0, r6
 801be70:	f7ea fac4 	bl	80063fc <lv_obj_is_protected>
 801be74:	b910      	cbnz	r0, 801be7c <lv_cont_signal+0x7c>
 801be76:	4630      	mov	r0, r6
 801be78:	f7ff fbb6 	bl	801b5e8 <lv_cont_refr_layout.part.0>
    if(lv_obj_is_protected(cont, LV_PROTECT_CHILD_CHG)) return;
 801be7c:	2101      	movs	r1, #1
 801be7e:	4630      	mov	r0, r6
 801be80:	f7ea fabc 	bl	80063fc <lv_obj_is_protected>
 801be84:	2800      	cmp	r0, #0
 801be86:	d1d2      	bne.n	801be2e <lv_cont_signal+0x2e>
 801be88:	4630      	mov	r0, r6
 801be8a:	f7ff f9e3 	bl	801b254 <lv_cont_refr_autofit.part.0>
 801be8e:	e7ce      	b.n	801be2e <lv_cont_signal+0x2e>
        info->result = lv_cont_get_style(cont, info->part);
 801be90:	2400      	movs	r4, #0
        else return ancestor_signal(cont, sign, param);
 801be92:	4b06      	ldr	r3, [pc, #24]	; (801beac <lv_cont_signal+0xac>)
        info->result = lv_cont_get_style(cont, info->part);
 801be94:	6054      	str	r4, [r2, #4]
        else return ancestor_signal(cont, sign, param);
 801be96:	681b      	ldr	r3, [r3, #0]
}
 801be98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        else return ancestor_signal(cont, sign, param);
 801be9c:	4718      	bx	r3
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
 801be9e:	4638      	mov	r0, r7
 801bea0:	4903      	ldr	r1, [pc, #12]	; (801beb0 <lv_cont_signal+0xb0>)
}
 801bea2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
 801bea6:	f7ea bb6f 	b.w	8006588 <lv_obj_handle_get_type_signal>
 801beaa:	bf00      	nop
 801beac:	200201e4 	.word	0x200201e4
 801beb0:	080218ac 	.word	0x080218ac

0801beb4 <lv_cont_create>:
{
 801beb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801beb6:	4607      	mov	r7, r0
 801beb8:	460e      	mov	r6, r1
    lv_obj_t * cont = lv_obj_create(par, copy);
 801beba:	f7e8 fbc9 	bl	8004650 <lv_obj_create>
 801bebe:	4605      	mov	r5, r0
    LV_ASSERT_MEM(cont);
 801bec0:	f7f8 fc82 	bl	80147c8 <lv_debug_check_null>
 801bec4:	2800      	cmp	r0, #0
 801bec6:	d04f      	beq.n	801bf68 <lv_cont_create+0xb4>
    if(cont == NULL) return NULL;
 801bec8:	2d00      	cmp	r5, #0
 801beca:	d04b      	beq.n	801bf64 <lv_cont_create+0xb0>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(cont);
 801becc:	4c36      	ldr	r4, [pc, #216]	; (801bfa8 <lv_cont_create+0xf4>)
 801bece:	6823      	ldr	r3, [r4, #0]
 801bed0:	2b00      	cmp	r3, #0
 801bed2:	d056      	beq.n	801bf82 <lv_cont_create+0xce>
    if(ancestor_design == NULL) ancestor_design = lv_obj_get_design_cb(cont);
 801bed4:	4c35      	ldr	r4, [pc, #212]	; (801bfac <lv_cont_create+0xf8>)
 801bed6:	6823      	ldr	r3, [r4, #0]
 801bed8:	2b00      	cmp	r3, #0
 801beda:	d05a      	beq.n	801bf92 <lv_cont_create+0xde>
    lv_obj_allocate_ext_attr(cont, sizeof(lv_cont_ext_t));
 801bedc:	2102      	movs	r1, #2
 801bede:	4628      	mov	r0, r5
 801bee0:	f7e7 fcac 	bl	800383c <lv_obj_allocate_ext_attr>
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 801bee4:	4628      	mov	r0, r5
 801bee6:	f7ea fae9 	bl	80064bc <lv_obj_get_ext_attr>
    if(ext == NULL) {
 801beea:	4604      	mov	r4, r0
 801beec:	2800      	cmp	r0, #0
 801beee:	d055      	beq.n	801bf9c <lv_cont_create+0xe8>
    LV_ASSERT_MEM(ext);
 801bef0:	f7f8 fc6a 	bl	80147c8 <lv_debug_check_null>
 801bef4:	4603      	mov	r3, r0
 801bef6:	b920      	cbnz	r0, 801bf02 <lv_cont_create+0x4e>
 801bef8:	4622      	mov	r2, r4
 801befa:	482d      	ldr	r0, [pc, #180]	; (801bfb0 <lv_cont_create+0xfc>)
 801befc:	f7f8 fc68 	bl	80147d0 <lv_debug_log_error>
 801bf00:	e7fe      	b.n	801bf00 <lv_cont_create+0x4c>
    ext->fit_top    = LV_FIT_NONE;
 801bf02:	7863      	ldrb	r3, [r4, #1]
    ext->layout     = LV_LAYOUT_OFF;
 801bf04:	2200      	movs	r2, #0
    lv_obj_set_signal_cb(cont, lv_cont_signal);
 801bf06:	492b      	ldr	r1, [pc, #172]	; (801bfb4 <lv_cont_create+0x100>)
 801bf08:	4628      	mov	r0, r5
    ext->fit_top    = LV_FIT_NONE;
 801bf0a:	f023 030f 	bic.w	r3, r3, #15
    ext->layout     = LV_LAYOUT_OFF;
 801bf0e:	7022      	strb	r2, [r4, #0]
    ext->fit_top    = LV_FIT_NONE;
 801bf10:	7063      	strb	r3, [r4, #1]
    lv_obj_set_signal_cb(cont, lv_cont_signal);
 801bf12:	f7e7 fc6d 	bl	80037f0 <lv_obj_set_signal_cb>
    if(copy == NULL) {
 801bf16:	b36e      	cbz	r6, 801bf74 <lv_cont_create+0xc0>
        lv_cont_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 801bf18:	4630      	mov	r0, r6
 801bf1a:	f7ea facf 	bl	80064bc <lv_obj_get_ext_attr>
        ext->fit_left            = copy_ext->fit_left;
 801bf1e:	7803      	ldrb	r3, [r0, #0]
 801bf20:	7821      	ldrb	r1, [r4, #0]
        lv_obj_refresh_style(cont, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
 801bf22:	22ff      	movs	r2, #255	; 0xff
        ext->fit_left            = copy_ext->fit_left;
 801bf24:	f3c3 1301 	ubfx	r3, r3, #4, #2
        ext->fit_top             = copy_ext->fit_top;
 801bf28:	7866      	ldrb	r6, [r4, #1]
        ext->fit_left            = copy_ext->fit_left;
 801bf2a:	f363 1105 	bfi	r1, r3, #4, #2
 801bf2e:	7021      	strb	r1, [r4, #0]
        ext->fit_right           = copy_ext->fit_right;
 801bf30:	b2cf      	uxtb	r7, r1
 801bf32:	7803      	ldrb	r3, [r0, #0]
        lv_obj_refresh_style(cont, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
 801bf34:	4611      	mov	r1, r2
        ext->fit_right           = copy_ext->fit_right;
 801bf36:	099b      	lsrs	r3, r3, #6
 801bf38:	f363 1787 	bfi	r7, r3, #6, #2
 801bf3c:	7027      	strb	r7, [r4, #0]
        ext->fit_top             = copy_ext->fit_top;
 801bf3e:	7843      	ldrb	r3, [r0, #1]
 801bf40:	f363 0601 	bfi	r6, r3, #0, #2
 801bf44:	7066      	strb	r6, [r4, #1]
        ext->fit_bottom          = copy_ext->fit_bottom;
 801bf46:	b2f6      	uxtb	r6, r6
 801bf48:	7843      	ldrb	r3, [r0, #1]
 801bf4a:	f3c3 0381 	ubfx	r3, r3, #2, #2
 801bf4e:	f363 0683 	bfi	r6, r3, #2, #2
        ext->layout              = copy_ext->layout;
 801bf52:	b2fb      	uxtb	r3, r7
        ext->fit_bottom          = copy_ext->fit_bottom;
 801bf54:	7066      	strb	r6, [r4, #1]
        ext->layout              = copy_ext->layout;
 801bf56:	7806      	ldrb	r6, [r0, #0]
        lv_obj_refresh_style(cont, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
 801bf58:	4628      	mov	r0, r5
        ext->layout              = copy_ext->layout;
 801bf5a:	f366 0303 	bfi	r3, r6, #0, #4
 801bf5e:	7023      	strb	r3, [r4, #0]
        lv_obj_refresh_style(cont, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
 801bf60:	f7e9 ff84 	bl	8005e6c <lv_obj_refresh_style>
}
 801bf64:	4628      	mov	r0, r5
 801bf66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bf68:	4603      	mov	r3, r0
    LV_ASSERT_MEM(cont);
 801bf6a:	462a      	mov	r2, r5
 801bf6c:	4810      	ldr	r0, [pc, #64]	; (801bfb0 <lv_cont_create+0xfc>)
 801bf6e:	f7f8 fc2f 	bl	80147d0 <lv_debug_log_error>
 801bf72:	e7fe      	b.n	801bf72 <lv_cont_create+0xbe>
        if(par != NULL) {
 801bf74:	2f00      	cmp	r7, #0
 801bf76:	d0f5      	beq.n	801bf64 <lv_cont_create+0xb0>
            lv_theme_apply(cont, LV_THEME_CONT);
 801bf78:	210b      	movs	r1, #11
 801bf7a:	4628      	mov	r0, r5
 801bf7c:	f7fa f99a 	bl	80162b4 <lv_theme_apply>
 801bf80:	e7f0      	b.n	801bf64 <lv_cont_create+0xb0>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(cont);
 801bf82:	4628      	mov	r0, r5
 801bf84:	f7ea fa7a 	bl	800647c <lv_obj_get_signal_cb>
 801bf88:	6020      	str	r0, [r4, #0]
    if(ancestor_design == NULL) ancestor_design = lv_obj_get_design_cb(cont);
 801bf8a:	4c08      	ldr	r4, [pc, #32]	; (801bfac <lv_cont_create+0xf8>)
 801bf8c:	6823      	ldr	r3, [r4, #0]
 801bf8e:	2b00      	cmp	r3, #0
 801bf90:	d1a4      	bne.n	801bedc <lv_cont_create+0x28>
 801bf92:	4628      	mov	r0, r5
 801bf94:	f7ea fa82 	bl	800649c <lv_obj_get_design_cb>
 801bf98:	6020      	str	r0, [r4, #0]
 801bf9a:	e79f      	b.n	801bedc <lv_cont_create+0x28>
        lv_obj_del(cont);
 801bf9c:	4628      	mov	r0, r5
        return NULL;
 801bf9e:	4625      	mov	r5, r4
        lv_obj_del(cont);
 801bfa0:	f7e8 fe14 	bl	8004bcc <lv_obj_del>
        return NULL;
 801bfa4:	e7de      	b.n	801bf64 <lv_cont_create+0xb0>
 801bfa6:	bf00      	nop
 801bfa8:	200201e4 	.word	0x200201e4
 801bfac:	200201e0 	.word	0x200201e0
 801bfb0:	0801e1c4 	.word	0x0801e1c4
 801bfb4:	0801be01 	.word	0x0801be01

0801bfb8 <lv_cont_set_layout>:
{
 801bfb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bfbc:	460e      	mov	r6, r1
 801bfbe:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(cont, LV_OBJX_NAME);
 801bfc0:	f7f8 fc02 	bl	80147c8 <lv_debug_check_null>
 801bfc4:	b928      	cbnz	r0, 801bfd2 <lv_cont_set_layout+0x1a>
 801bfc6:	4603      	mov	r3, r0
 801bfc8:	4622      	mov	r2, r4
 801bfca:	480d      	ldr	r0, [pc, #52]	; (801c000 <lv_cont_set_layout+0x48>)
 801bfcc:	f7f8 fc00 	bl	80147d0 <lv_debug_log_error>
 801bfd0:	e7fe      	b.n	801bfd0 <lv_cont_set_layout+0x18>
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 801bfd2:	4620      	mov	r0, r4
 801bfd4:	f7ea fa72 	bl	80064bc <lv_obj_get_ext_attr>
    if(ext->layout == layout) return;
 801bfd8:	7803      	ldrb	r3, [r0, #0]
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 801bfda:	4605      	mov	r5, r0
    if(ext->layout == layout) return;
 801bfdc:	f003 020f 	and.w	r2, r3, #15
 801bfe0:	42b2      	cmp	r2, r6
 801bfe2:	d00a      	beq.n	801bffa <lv_cont_set_layout+0x42>
    cont->signal_cb(cont, LV_SIGNAL_CHILD_CHG, NULL);
 801bfe4:	69e7      	ldr	r7, [r4, #28]
    ext->layout = layout;
 801bfe6:	f366 0303 	bfi	r3, r6, #0, #4
    cont->signal_cb(cont, LV_SIGNAL_CHILD_CHG, NULL);
 801bfea:	4620      	mov	r0, r4
 801bfec:	2200      	movs	r2, #0
    ext->layout = layout;
 801bfee:	702b      	strb	r3, [r5, #0]
    cont->signal_cb(cont, LV_SIGNAL_CHILD_CHG, NULL);
 801bff0:	2101      	movs	r1, #1
 801bff2:	463b      	mov	r3, r7
}
 801bff4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    cont->signal_cb(cont, LV_SIGNAL_CHILD_CHG, NULL);
 801bff8:	4718      	bx	r3
}
 801bffa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bffe:	bf00      	nop
 801c000:	0801e1d4 	.word	0x0801e1d4

0801c004 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 801c004:	b508      	push	{r3, lr}
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 801c006:	2003      	movs	r0, #3
 801c008:	f000 f82c 	bl	801c064 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 801c00c:	2000      	movs	r0, #0
 801c00e:	f7e5 f981 	bl	8001314 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 801c012:	f7e5 f967 	bl	80012e4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 801c016:	2000      	movs	r0, #0
 801c018:	bd08      	pop	{r3, pc}
 801c01a:	bf00      	nop

0801c01c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 801c01c:	4a03      	ldr	r2, [pc, #12]	; (801c02c <HAL_IncTick+0x10>)
 801c01e:	4b04      	ldr	r3, [pc, #16]	; (801c030 <HAL_IncTick+0x14>)
 801c020:	6811      	ldr	r1, [r2, #0]
 801c022:	781b      	ldrb	r3, [r3, #0]
 801c024:	440b      	add	r3, r1
 801c026:	6013      	str	r3, [r2, #0]
}
 801c028:	4770      	bx	lr
 801c02a:	bf00      	nop
 801c02c:	2002059c 	.word	0x2002059c
 801c030:	2000004c 	.word	0x2000004c

0801c034 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 801c034:	4b01      	ldr	r3, [pc, #4]	; (801c03c <HAL_GetTick+0x8>)
 801c036:	6818      	ldr	r0, [r3, #0]
}
 801c038:	4770      	bx	lr
 801c03a:	bf00      	nop
 801c03c:	2002059c 	.word	0x2002059c

0801c040 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 801c040:	b538      	push	{r3, r4, r5, lr}
 801c042:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 801c044:	f7ff fff6 	bl	801c034 <HAL_GetTick>
 801c048:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 801c04a:	1c63      	adds	r3, r4, #1
 801c04c:	d002      	beq.n	801c054 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 801c04e:	4b04      	ldr	r3, [pc, #16]	; (801c060 <HAL_Delay+0x20>)
 801c050:	781b      	ldrb	r3, [r3, #0]
 801c052:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 801c054:	f7ff ffee 	bl	801c034 <HAL_GetTick>
 801c058:	1b43      	subs	r3, r0, r5
 801c05a:	42a3      	cmp	r3, r4
 801c05c:	d3fa      	bcc.n	801c054 <HAL_Delay+0x14>
  {
  }
}
 801c05e:	bd38      	pop	{r3, r4, r5, pc}
 801c060:	2000004c 	.word	0x2000004c

0801c064 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 801c064:	4907      	ldr	r1, [pc, #28]	; (801c084 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 801c066:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 801c068:	4b07      	ldr	r3, [pc, #28]	; (801c088 <HAL_NVIC_SetPriorityGrouping+0x24>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 801c06a:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 801c06c:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801c070:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801c072:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 801c076:	4022      	ands	r2, r4
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 801c078:	f85d 4b04 	ldr.w	r4, [sp], #4
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 801c07c:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 801c07e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 801c080:	60cb      	str	r3, [r1, #12]
 801c082:	4770      	bx	lr
 801c084:	e000ed00 	.word	0xe000ed00
 801c088:	05fa0000 	.word	0x05fa0000

0801c08c <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 801c08c:	4b19      	ldr	r3, [pc, #100]	; (801c0f4 <HAL_NVIC_SetPriority+0x68>)
 801c08e:	68db      	ldr	r3, [r3, #12]
 801c090:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 801c094:	b430      	push	{r4, r5}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 801c096:	f1c3 0507 	rsb	r5, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801c09a:	1d1c      	adds	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 801c09c:	2d04      	cmp	r5, #4
 801c09e:	bf28      	it	cs
 801c0a0:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801c0a2:	2c06      	cmp	r4, #6
 801c0a4:	d919      	bls.n	801c0da <HAL_NVIC_SetPriority+0x4e>
 801c0a6:	3b03      	subs	r3, #3
 801c0a8:	f04f 34ff 	mov.w	r4, #4294967295
 801c0ac:	409c      	lsls	r4, r3
 801c0ae:	ea22 0204 	bic.w	r2, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801c0b2:	f04f 34ff 	mov.w	r4, #4294967295
  if ((int32_t)(IRQn) >= 0)
 801c0b6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801c0b8:	fa04 f405 	lsl.w	r4, r4, r5
 801c0bc:	ea21 0104 	bic.w	r1, r1, r4
 801c0c0:	fa01 f103 	lsl.w	r1, r1, r3
 801c0c4:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 801c0c8:	db0a      	blt.n	801c0e0 <HAL_NVIC_SetPriority+0x54>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801c0ca:	0109      	lsls	r1, r1, #4
 801c0cc:	4b0a      	ldr	r3, [pc, #40]	; (801c0f8 <HAL_NVIC_SetPriority+0x6c>)
 801c0ce:	b2c9      	uxtb	r1, r1
 801c0d0:	4403      	add	r3, r0
 801c0d2:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 801c0d6:	bc30      	pop	{r4, r5}
 801c0d8:	4770      	bx	lr
 801c0da:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801c0dc:	4613      	mov	r3, r2
 801c0de:	e7e8      	b.n	801c0b2 <HAL_NVIC_SetPriority+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801c0e0:	f000 000f 	and.w	r0, r0, #15
 801c0e4:	0109      	lsls	r1, r1, #4
 801c0e6:	4b05      	ldr	r3, [pc, #20]	; (801c0fc <HAL_NVIC_SetPriority+0x70>)
 801c0e8:	b2c9      	uxtb	r1, r1
 801c0ea:	4403      	add	r3, r0
 801c0ec:	7619      	strb	r1, [r3, #24]
 801c0ee:	bc30      	pop	{r4, r5}
 801c0f0:	4770      	bx	lr
 801c0f2:	bf00      	nop
 801c0f4:	e000ed00 	.word	0xe000ed00
 801c0f8:	e000e100 	.word	0xe000e100
 801c0fc:	e000ecfc 	.word	0xe000ecfc

0801c100 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 801c100:	2800      	cmp	r0, #0
 801c102:	db07      	blt.n	801c114 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801c104:	f000 011f 	and.w	r1, r0, #31
 801c108:	2301      	movs	r3, #1
 801c10a:	0940      	lsrs	r0, r0, #5
 801c10c:	4a02      	ldr	r2, [pc, #8]	; (801c118 <HAL_NVIC_EnableIRQ+0x18>)
 801c10e:	408b      	lsls	r3, r1
 801c110:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 801c114:	4770      	bx	lr
 801c116:	bf00      	nop
 801c118:	e000e100 	.word	0xe000e100

0801c11c <HAL_DMA_IRQHandler>:
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
  uint32_t tmpisr;
  __IO uint32_t count = 0;
  uint32_t timeout = SystemCoreClock / 9600;
 801c11c:	4b75      	ldr	r3, [pc, #468]	; (801c2f4 <HAL_DMA_IRQHandler+0x1d8>)
  __IO uint32_t count = 0;
 801c11e:	2100      	movs	r1, #0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;

  tmpisr = regs->ISR;

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 801c120:	2208      	movs	r2, #8
{
 801c122:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t timeout = SystemCoreClock / 9600;
 801c126:	681d      	ldr	r5, [r3, #0]
{
 801c128:	b082      	sub	sp, #8
 801c12a:	4680      	mov	r8, r0
  __IO uint32_t count = 0;
 801c12c:	9101      	str	r1, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 801c12e:	e9d0 6316 	ldrd	r6, r3, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 801c132:	6834      	ldr	r4, [r6, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 801c134:	409a      	lsls	r2, r3
 801c136:	4222      	tst	r2, r4
 801c138:	d004      	beq.n	801c144 <HAL_DMA_IRQHandler+0x28>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 801c13a:	6801      	ldr	r1, [r0, #0]
 801c13c:	680f      	ldr	r7, [r1, #0]
 801c13e:	0778      	lsls	r0, r7, #29
 801c140:	f100 808a 	bmi.w	801c258 <HAL_DMA_IRQHandler+0x13c>
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 801c144:	2201      	movs	r2, #1
 801c146:	409a      	lsls	r2, r3
 801c148:	4222      	tst	r2, r4
 801c14a:	d004      	beq.n	801c156 <HAL_DMA_IRQHandler+0x3a>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 801c14c:	f8d8 1000 	ldr.w	r1, [r8]
 801c150:	6949      	ldr	r1, [r1, #20]
 801c152:	0609      	lsls	r1, r1, #24
 801c154:	d478      	bmi.n	801c248 <HAL_DMA_IRQHandler+0x12c>
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 801c156:	2204      	movs	r2, #4
 801c158:	409a      	lsls	r2, r3
 801c15a:	4222      	tst	r2, r4
 801c15c:	d004      	beq.n	801c168 <HAL_DMA_IRQHandler+0x4c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 801c15e:	f8d8 1000 	ldr.w	r1, [r8]
 801c162:	6809      	ldr	r1, [r1, #0]
 801c164:	078f      	lsls	r7, r1, #30
 801c166:	d467      	bmi.n	801c238 <HAL_DMA_IRQHandler+0x11c>
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 801c168:	2210      	movs	r2, #16
 801c16a:	409a      	lsls	r2, r3
 801c16c:	4222      	tst	r2, r4
 801c16e:	d004      	beq.n	801c17a <HAL_DMA_IRQHandler+0x5e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 801c170:	f8d8 1000 	ldr.w	r1, [r8]
 801c174:	680f      	ldr	r7, [r1, #0]
 801c176:	0738      	lsls	r0, r7, #28
 801c178:	d449      	bmi.n	801c20e <HAL_DMA_IRQHandler+0xf2>
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 801c17a:	2220      	movs	r2, #32
 801c17c:	409a      	lsls	r2, r3
 801c17e:	4222      	tst	r2, r4
 801c180:	d017      	beq.n	801c1b2 <HAL_DMA_IRQHandler+0x96>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 801c182:	f8d8 1000 	ldr.w	r1, [r8]
 801c186:	680c      	ldr	r4, [r1, #0]
 801c188:	06e0      	lsls	r0, r4, #27
 801c18a:	d512      	bpl.n	801c1b2 <HAL_DMA_IRQHandler+0x96>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 801c18c:	60b2      	str	r2, [r6, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 801c18e:	f898 2035 	ldrb.w	r2, [r8, #53]	; 0x35
 801c192:	2a05      	cmp	r2, #5
 801c194:	d073      	beq.n	801c27e <HAL_DMA_IRQHandler+0x162>
          hdma->XferAbortCallback(hdma);
        }
        return;
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 801c196:	680b      	ldr	r3, [r1, #0]
 801c198:	f413 2f80 	tst.w	r3, #262144	; 0x40000
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 801c19c:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 801c19e:	f000 8090 	beq.w	801c2c2 <HAL_DMA_IRQHandler+0x1a6>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 801c1a2:	0319      	lsls	r1, r3, #12
 801c1a4:	f140 809b 	bpl.w	801c2de <HAL_DMA_IRQHandler+0x1c2>

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
        }

        if(hdma->XferCpltCallback != NULL)
 801c1a8:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 801c1ac:	b10b      	cbz	r3, 801c1b2 <HAL_DMA_IRQHandler+0x96>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 801c1ae:	4640      	mov	r0, r8
 801c1b0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 801c1b2:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 801c1b6:	b33b      	cbz	r3, 801c208 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 801c1b8:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 801c1bc:	07da      	lsls	r2, r3, #31
 801c1be:	d51b      	bpl.n	801c1f8 <HAL_DMA_IRQHandler+0xdc>
    {
      hdma->State = HAL_DMA_STATE_ABORT;

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 801c1c0:	f8d8 2000 	ldr.w	r2, [r8]
      hdma->State = HAL_DMA_STATE_ABORT;
 801c1c4:	2105      	movs	r1, #5
  uint32_t timeout = SystemCoreClock / 9600;
 801c1c6:	4b4c      	ldr	r3, [pc, #304]	; (801c2f8 <HAL_DMA_IRQHandler+0x1dc>)
      hdma->State = HAL_DMA_STATE_ABORT;
 801c1c8:	f888 1035 	strb.w	r1, [r8, #53]	; 0x35
  uint32_t timeout = SystemCoreClock / 9600;
 801c1cc:	fba3 3505 	umull	r3, r5, r3, r5
      __HAL_DMA_DISABLE(hdma);
 801c1d0:	6813      	ldr	r3, [r2, #0]
 801c1d2:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600;
 801c1d6:	0aad      	lsrs	r5, r5, #10
      __HAL_DMA_DISABLE(hdma);
 801c1d8:	6013      	str	r3, [r2, #0]
 801c1da:	e002      	b.n	801c1e2 <HAL_DMA_IRQHandler+0xc6>
        if (++count > timeout)
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 801c1dc:	6813      	ldr	r3, [r2, #0]
 801c1de:	07db      	lsls	r3, r3, #31
 801c1e0:	d504      	bpl.n	801c1ec <HAL_DMA_IRQHandler+0xd0>
        if (++count > timeout)
 801c1e2:	9b01      	ldr	r3, [sp, #4]
 801c1e4:	3301      	adds	r3, #1
 801c1e6:	42ab      	cmp	r3, r5
 801c1e8:	9301      	str	r3, [sp, #4]
 801c1ea:	d9f7      	bls.n	801c1dc <HAL_DMA_IRQHandler+0xc0>

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 801c1ec:	2200      	movs	r2, #0

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 801c1ee:	2301      	movs	r3, #1
      __HAL_UNLOCK(hdma);
 801c1f0:	f888 2034 	strb.w	r2, [r8, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 801c1f4:	f888 3035 	strb.w	r3, [r8, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 801c1f8:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 801c1fc:	b123      	cbz	r3, 801c208 <HAL_DMA_IRQHandler+0xec>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 801c1fe:	4640      	mov	r0, r8
    }
  }
}
 801c200:	b002      	add	sp, #8
 801c202:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      hdma->XferErrorCallback(hdma);
 801c206:	4718      	bx	r3
}
 801c208:	b002      	add	sp, #8
 801c20a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 801c20e:	60b2      	str	r2, [r6, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 801c210:	680a      	ldr	r2, [r1, #0]
 801c212:	f412 2f80 	tst.w	r2, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 801c216:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 801c218:	d12a      	bne.n	801c270 <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 801c21a:	05d7      	lsls	r7, r2, #23
 801c21c:	d403      	bmi.n	801c226 <HAL_DMA_IRQHandler+0x10a>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 801c21e:	680a      	ldr	r2, [r1, #0]
 801c220:	f022 0208 	bic.w	r2, r2, #8
 801c224:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 801c226:	f8d8 2040 	ldr.w	r2, [r8, #64]	; 0x40
 801c22a:	2a00      	cmp	r2, #0
 801c22c:	d0a5      	beq.n	801c17a <HAL_DMA_IRQHandler+0x5e>
          hdma->XferHalfCpltCallback(hdma);
 801c22e:	4640      	mov	r0, r8
 801c230:	4790      	blx	r2
 801c232:	f8d8 305c 	ldr.w	r3, [r8, #92]	; 0x5c
 801c236:	e7a0      	b.n	801c17a <HAL_DMA_IRQHandler+0x5e>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 801c238:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 801c23a:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 801c23e:	f042 0204 	orr.w	r2, r2, #4
 801c242:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 801c246:	e78f      	b.n	801c168 <HAL_DMA_IRQHandler+0x4c>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 801c248:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 801c24a:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 801c24e:	f042 0202 	orr.w	r2, r2, #2
 801c252:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 801c256:	e77e      	b.n	801c156 <HAL_DMA_IRQHandler+0x3a>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 801c258:	680f      	ldr	r7, [r1, #0]
 801c25a:	f027 0704 	bic.w	r7, r7, #4
 801c25e:	600f      	str	r7, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 801c260:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 801c262:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 801c266:	f042 0201 	orr.w	r2, r2, #1
 801c26a:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 801c26e:	e769      	b.n	801c144 <HAL_DMA_IRQHandler+0x28>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 801c270:	0312      	lsls	r2, r2, #12
 801c272:	d5d8      	bpl.n	801c226 <HAL_DMA_IRQHandler+0x10a>
          if(hdma->XferM1HalfCpltCallback != NULL)
 801c274:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
 801c278:	2a00      	cmp	r2, #0
 801c27a:	d1d8      	bne.n	801c22e <HAL_DMA_IRQHandler+0x112>
 801c27c:	e77d      	b.n	801c17a <HAL_DMA_IRQHandler+0x5e>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 801c27e:	680a      	ldr	r2, [r1, #0]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 801c280:	f8d8 4040 	ldr.w	r4, [r8, #64]	; 0x40
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 801c284:	f022 0216 	bic.w	r2, r2, #22
 801c288:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 801c28a:	694a      	ldr	r2, [r1, #20]
 801c28c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801c290:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 801c292:	b354      	cbz	r4, 801c2ea <HAL_DMA_IRQHandler+0x1ce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 801c294:	680a      	ldr	r2, [r1, #0]
 801c296:	f022 0208 	bic.w	r2, r2, #8
 801c29a:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 801c29c:	223f      	movs	r2, #63	; 0x3f
        __HAL_UNLOCK(hdma);
 801c29e:	2400      	movs	r4, #0
        hdma->State = HAL_DMA_STATE_READY;
 801c2a0:	2101      	movs	r1, #1
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 801c2a2:	fa02 f303 	lsl.w	r3, r2, r3
        if(hdma->XferAbortCallback != NULL)
 801c2a6:	f8d8 2050 	ldr.w	r2, [r8, #80]	; 0x50
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 801c2aa:	60b3      	str	r3, [r6, #8]
        __HAL_UNLOCK(hdma);
 801c2ac:	f888 4034 	strb.w	r4, [r8, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 801c2b0:	f888 1035 	strb.w	r1, [r8, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 801c2b4:	2a00      	cmp	r2, #0
 801c2b6:	d0a7      	beq.n	801c208 <HAL_DMA_IRQHandler+0xec>
          hdma->XferAbortCallback(hdma);
 801c2b8:	4640      	mov	r0, r8
}
 801c2ba:	b002      	add	sp, #8
 801c2bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
          hdma->XferAbortCallback(hdma);
 801c2c0:	4710      	bx	r2
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 801c2c2:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 801c2c6:	f47f af6f 	bne.w	801c1a8 <HAL_DMA_IRQHandler+0x8c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 801c2ca:	680a      	ldr	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 801c2cc:	2401      	movs	r4, #1
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 801c2ce:	f022 0210 	bic.w	r2, r2, #16
 801c2d2:	600a      	str	r2, [r1, #0]
          __HAL_UNLOCK(hdma);
 801c2d4:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 801c2d8:	f888 4035 	strb.w	r4, [r8, #53]	; 0x35
 801c2dc:	e764      	b.n	801c1a8 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1CpltCallback != NULL)
 801c2de:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 801c2e2:	2b00      	cmp	r3, #0
 801c2e4:	f47f af63 	bne.w	801c1ae <HAL_DMA_IRQHandler+0x92>
 801c2e8:	e763      	b.n	801c1b2 <HAL_DMA_IRQHandler+0x96>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 801c2ea:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
 801c2ee:	2a00      	cmp	r2, #0
 801c2f0:	d1d0      	bne.n	801c294 <HAL_DMA_IRQHandler+0x178>
 801c2f2:	e7d3      	b.n	801c29c <HAL_DMA_IRQHandler+0x180>
 801c2f4:	20000000 	.word	0x20000000
 801c2f8:	1b4e81b5 	.word	0x1b4e81b5

0801c2fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801c2fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 801c300:	2300      	movs	r3, #0
{
 801c302:	b085      	sub	sp, #20
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801c304:	f8df b22c 	ldr.w	fp, [pc, #556]	; 801c534 <HAL_GPIO_Init+0x238>
 801c308:	680d      	ldr	r5, [r1, #0]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 801c30a:	f8df e22c 	ldr.w	lr, [pc, #556]	; 801c538 <HAL_GPIO_Init+0x23c>
 801c30e:	e002      	b.n	801c316 <HAL_GPIO_Init+0x1a>
  for(position = 0; position < GPIO_NUMBER; position++)
 801c310:	3301      	adds	r3, #1
 801c312:	2b10      	cmp	r3, #16
 801c314:	d057      	beq.n	801c3c6 <HAL_GPIO_Init+0xca>
    ioposition = ((uint32_t)0x01) << position;
 801c316:	2201      	movs	r2, #1
 801c318:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 801c31a:	ea02 0a05 	and.w	sl, r2, r5
    if(iocurrent == ioposition)
 801c31e:	43aa      	bics	r2, r5
 801c320:	d1f6      	bne.n	801c310 <HAL_GPIO_Init+0x14>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 801c322:	684a      	ldr	r2, [r1, #4]
 801c324:	005f      	lsls	r7, r3, #1
 801c326:	f022 0c10 	bic.w	ip, r2, #16
 801c32a:	f10c 34ff 	add.w	r4, ip, #4294967295
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 801c32e:	2c01      	cmp	r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 801c330:	f04f 0403 	mov.w	r4, #3
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 801c334:	f200 80c0 	bhi.w	801c4b8 <HAL_GPIO_Init+0x1bc>
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 801c338:	f3c2 1600 	ubfx	r6, r2, #4, #1
        temp = GPIOx->OSPEEDR; 
 801c33c:	f8d0 8008 	ldr.w	r8, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 801c340:	40bc      	lsls	r4, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 801c342:	409e      	lsls	r6, r3
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 801c344:	ea28 0804 	bic.w	r8, r8, r4
 801c348:	43e4      	mvns	r4, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 801c34a:	9601      	str	r6, [sp, #4]
        temp |= (GPIO_Init->Speed << (position * 2));
 801c34c:	68ce      	ldr	r6, [r1, #12]
 801c34e:	fa06 f907 	lsl.w	r9, r6, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 801c352:	9e01      	ldr	r6, [sp, #4]
        temp |= (GPIO_Init->Speed << (position * 2));
 801c354:	ea49 0808 	orr.w	r8, r9, r8
        GPIOx->OSPEEDR = temp;
 801c358:	f8c0 8008 	str.w	r8, [r0, #8]
        temp = GPIOx->OTYPER;
 801c35c:	f8d0 8004 	ldr.w	r8, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 801c360:	ea28 080a 	bic.w	r8, r8, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 801c364:	ea46 0608 	orr.w	r6, r6, r8
        GPIOx->OTYPER = temp;
 801c368:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 801c36a:	68c6      	ldr	r6, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 801c36c:	f1bc 0f02 	cmp.w	ip, #2
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 801c370:	ea06 0804 	and.w	r8, r6, r4
      temp |= ((GPIO_Init->Pull) << (position * 2));
 801c374:	688e      	ldr	r6, [r1, #8]
 801c376:	fa06 f607 	lsl.w	r6, r6, r7
 801c37a:	ea46 0608 	orr.w	r6, r6, r8
      GPIOx->PUPDR = temp;
 801c37e:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 801c380:	d124      	bne.n	801c3cc <HAL_GPIO_Init+0xd0>
        temp = GPIOx->AFR[position >> 3];
 801c382:	08de      	lsrs	r6, r3, #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 801c384:	f003 0c07 	and.w	ip, r3, #7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 801c388:	f002 0203 	and.w	r2, r2, #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 801c38c:	f04f 080f 	mov.w	r8, #15
 801c390:	eb00 0686 	add.w	r6, r0, r6, lsl #2
  for(position = 0; position < GPIO_NUMBER; position++)
 801c394:	3301      	adds	r3, #1
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 801c396:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 801c39a:	fa02 f707 	lsl.w	r7, r2, r7
        temp = GPIOx->AFR[position >> 3];
 801c39e:	f8d6 9020 	ldr.w	r9, [r6, #32]
  for(position = 0; position < GPIO_NUMBER; position++)
 801c3a2:	2b10      	cmp	r3, #16
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 801c3a4:	690a      	ldr	r2, [r1, #16]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 801c3a6:	fa08 f80c 	lsl.w	r8, r8, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 801c3aa:	fa02 fc0c 	lsl.w	ip, r2, ip
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 801c3ae:	ea29 0208 	bic.w	r2, r9, r8
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 801c3b2:	ea4c 0202 	orr.w	r2, ip, r2
        GPIOx->AFR[position >> 3] = temp;
 801c3b6:	6232      	str	r2, [r6, #32]
      temp = GPIOx->MODER;
 801c3b8:	6802      	ldr	r2, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 801c3ba:	ea04 0402 	and.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 801c3be:	ea44 0407 	orr.w	r4, r4, r7
      GPIOx->MODER = temp;
 801c3c2:	6004      	str	r4, [r0, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 801c3c4:	d1a7      	bne.n	801c316 <HAL_GPIO_Init+0x1a>
        }
        EXTI->FTSR = temp;
      }
    }
  }
}
 801c3c6:	b005      	add	sp, #20
 801c3c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      temp = GPIOx->MODER;
 801c3cc:	f8d0 c000 	ldr.w	ip, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 801c3d0:	f002 0603 	and.w	r6, r2, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 801c3d4:	ea0c 0c04 	and.w	ip, ip, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 801c3d8:	fa06 f707 	lsl.w	r7, r6, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 801c3dc:	00d4      	lsls	r4, r2, #3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 801c3de:	ea47 070c 	orr.w	r7, r7, ip
      GPIOx->MODER = temp;
 801c3e2:	6007      	str	r7, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 801c3e4:	d594      	bpl.n	801c310 <HAL_GPIO_Init+0x14>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801c3e6:	f8db 7044 	ldr.w	r7, [fp, #68]	; 0x44
 801c3ea:	f023 0c03 	bic.w	ip, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 801c3ee:	f003 0403 	and.w	r4, r3, #3
 801c3f2:	260f      	movs	r6, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801c3f4:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 801c3f8:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 801c3fc:	00a4      	lsls	r4, r4, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801c3fe:	f8cb 7044 	str.w	r7, [fp, #68]	; 0x44
 801c402:	f50c 3c9c 	add.w	ip, ip, #79872	; 0x13800
 801c406:	f8db 7044 	ldr.w	r7, [fp, #68]	; 0x44
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 801c40a:	fa06 f804 	lsl.w	r8, r6, r4
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801c40e:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 801c412:	9703      	str	r7, [sp, #12]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 801c414:	4f3e      	ldr	r7, [pc, #248]	; (801c510 <HAL_GPIO_Init+0x214>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801c416:	9e03      	ldr	r6, [sp, #12]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 801c418:	42b8      	cmp	r0, r7
        temp = SYSCFG->EXTICR[position >> 2];
 801c41a:	f8dc 6008 	ldr.w	r6, [ip, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 801c41e:	ea26 0608 	bic.w	r6, r6, r8
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 801c422:	d020      	beq.n	801c466 <HAL_GPIO_Init+0x16a>
 801c424:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 801c428:	42b8      	cmp	r0, r7
 801c42a:	d048      	beq.n	801c4be <HAL_GPIO_Init+0x1c2>
 801c42c:	4f39      	ldr	r7, [pc, #228]	; (801c514 <HAL_GPIO_Init+0x218>)
 801c42e:	42b8      	cmp	r0, r7
 801c430:	d04a      	beq.n	801c4c8 <HAL_GPIO_Init+0x1cc>
 801c432:	4f39      	ldr	r7, [pc, #228]	; (801c518 <HAL_GPIO_Init+0x21c>)
 801c434:	42b8      	cmp	r0, r7
 801c436:	d04c      	beq.n	801c4d2 <HAL_GPIO_Init+0x1d6>
 801c438:	4f38      	ldr	r7, [pc, #224]	; (801c51c <HAL_GPIO_Init+0x220>)
 801c43a:	42b8      	cmp	r0, r7
 801c43c:	d04e      	beq.n	801c4dc <HAL_GPIO_Init+0x1e0>
 801c43e:	4f38      	ldr	r7, [pc, #224]	; (801c520 <HAL_GPIO_Init+0x224>)
 801c440:	42b8      	cmp	r0, r7
 801c442:	d055      	beq.n	801c4f0 <HAL_GPIO_Init+0x1f4>
 801c444:	4f37      	ldr	r7, [pc, #220]	; (801c524 <HAL_GPIO_Init+0x228>)
 801c446:	42b8      	cmp	r0, r7
 801c448:	d057      	beq.n	801c4fa <HAL_GPIO_Init+0x1fe>
 801c44a:	4f37      	ldr	r7, [pc, #220]	; (801c528 <HAL_GPIO_Init+0x22c>)
 801c44c:	42b8      	cmp	r0, r7
 801c44e:	d04a      	beq.n	801c4e6 <HAL_GPIO_Init+0x1ea>
 801c450:	4f36      	ldr	r7, [pc, #216]	; (801c52c <HAL_GPIO_Init+0x230>)
 801c452:	42b8      	cmp	r0, r7
 801c454:	d056      	beq.n	801c504 <HAL_GPIO_Init+0x208>
 801c456:	4f36      	ldr	r7, [pc, #216]	; (801c530 <HAL_GPIO_Init+0x234>)
 801c458:	42b8      	cmp	r0, r7
 801c45a:	bf0c      	ite	eq
 801c45c:	2709      	moveq	r7, #9
 801c45e:	270a      	movne	r7, #10
 801c460:	fa07 f404 	lsl.w	r4, r7, r4
 801c464:	4326      	orrs	r6, r4
        SYSCFG->EXTICR[position >> 2] = temp;
 801c466:	f8cc 6008 	str.w	r6, [ip, #8]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 801c46a:	03d7      	lsls	r7, r2, #15
        temp = EXTI->IMR;
 801c46c:	f8de 4000 	ldr.w	r4, [lr]
        temp &= ~((uint32_t)iocurrent);
 801c470:	ea6f 060a 	mvn.w	r6, sl
          temp |= iocurrent;
 801c474:	bf4c      	ite	mi
 801c476:	ea4a 0404 	orrmi.w	r4, sl, r4
        temp &= ~((uint32_t)iocurrent);
 801c47a:	4034      	andpl	r4, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 801c47c:	0397      	lsls	r7, r2, #14
        EXTI->IMR = temp;
 801c47e:	f8ce 4000 	str.w	r4, [lr]
        temp = EXTI->EMR;
 801c482:	f8de 4004 	ldr.w	r4, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
 801c486:	bf54      	ite	pl
 801c488:	4034      	andpl	r4, r6
          temp |= iocurrent;
 801c48a:	ea4a 0404 	orrmi.w	r4, sl, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 801c48e:	02d7      	lsls	r7, r2, #11
        EXTI->EMR = temp;
 801c490:	f8ce 4004 	str.w	r4, [lr, #4]
        temp = EXTI->RTSR;
 801c494:	f8de 4008 	ldr.w	r4, [lr, #8]
        temp &= ~((uint32_t)iocurrent);
 801c498:	bf54      	ite	pl
 801c49a:	4034      	andpl	r4, r6
          temp |= iocurrent;
 801c49c:	ea4a 0404 	orrmi.w	r4, sl, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 801c4a0:	0292      	lsls	r2, r2, #10
        EXTI->RTSR = temp;
 801c4a2:	f8ce 4008 	str.w	r4, [lr, #8]
        temp = EXTI->FTSR;
 801c4a6:	f8de 400c 	ldr.w	r4, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
 801c4aa:	bf54      	ite	pl
 801c4ac:	4034      	andpl	r4, r6
          temp |= iocurrent;
 801c4ae:	ea4a 0404 	orrmi.w	r4, sl, r4
        EXTI->FTSR = temp;
 801c4b2:	f8ce 400c 	str.w	r4, [lr, #12]
 801c4b6:	e72b      	b.n	801c310 <HAL_GPIO_Init+0x14>
 801c4b8:	40bc      	lsls	r4, r7
 801c4ba:	43e4      	mvns	r4, r4
 801c4bc:	e755      	b.n	801c36a <HAL_GPIO_Init+0x6e>
 801c4be:	2701      	movs	r7, #1
 801c4c0:	fa07 f404 	lsl.w	r4, r7, r4
 801c4c4:	4326      	orrs	r6, r4
 801c4c6:	e7ce      	b.n	801c466 <HAL_GPIO_Init+0x16a>
 801c4c8:	2702      	movs	r7, #2
 801c4ca:	fa07 f404 	lsl.w	r4, r7, r4
 801c4ce:	4326      	orrs	r6, r4
 801c4d0:	e7c9      	b.n	801c466 <HAL_GPIO_Init+0x16a>
 801c4d2:	2703      	movs	r7, #3
 801c4d4:	fa07 f404 	lsl.w	r4, r7, r4
 801c4d8:	4326      	orrs	r6, r4
 801c4da:	e7c4      	b.n	801c466 <HAL_GPIO_Init+0x16a>
 801c4dc:	2704      	movs	r7, #4
 801c4de:	fa07 f404 	lsl.w	r4, r7, r4
 801c4e2:	4326      	orrs	r6, r4
 801c4e4:	e7bf      	b.n	801c466 <HAL_GPIO_Init+0x16a>
 801c4e6:	2707      	movs	r7, #7
 801c4e8:	fa07 f404 	lsl.w	r4, r7, r4
 801c4ec:	4326      	orrs	r6, r4
 801c4ee:	e7ba      	b.n	801c466 <HAL_GPIO_Init+0x16a>
 801c4f0:	2705      	movs	r7, #5
 801c4f2:	fa07 f404 	lsl.w	r4, r7, r4
 801c4f6:	4326      	orrs	r6, r4
 801c4f8:	e7b5      	b.n	801c466 <HAL_GPIO_Init+0x16a>
 801c4fa:	2706      	movs	r7, #6
 801c4fc:	fa07 f404 	lsl.w	r4, r7, r4
 801c500:	4326      	orrs	r6, r4
 801c502:	e7b0      	b.n	801c466 <HAL_GPIO_Init+0x16a>
 801c504:	2708      	movs	r7, #8
 801c506:	fa07 f404 	lsl.w	r4, r7, r4
 801c50a:	4326      	orrs	r6, r4
 801c50c:	e7ab      	b.n	801c466 <HAL_GPIO_Init+0x16a>
 801c50e:	bf00      	nop
 801c510:	40020000 	.word	0x40020000
 801c514:	40020800 	.word	0x40020800
 801c518:	40020c00 	.word	0x40020c00
 801c51c:	40021000 	.word	0x40021000
 801c520:	40021400 	.word	0x40021400
 801c524:	40021800 	.word	0x40021800
 801c528:	40021c00 	.word	0x40021c00
 801c52c:	40022000 	.word	0x40022000
 801c530:	40022400 	.word	0x40022400
 801c534:	40023800 	.word	0x40023800
 801c538:	40013c00 	.word	0x40013c00

0801c53c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 801c53c:	b902      	cbnz	r2, 801c540 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 801c53e:	0409      	lsls	r1, r1, #16
 801c540:	6181      	str	r1, [r0, #24]
  }
}
 801c542:	4770      	bx	lr

0801c544 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 801c544:	b570      	push	{r4, r5, r6, lr}
 801c546:	4604      	mov	r4, r0
 801c548:	460d      	mov	r5, r1
 801c54a:	4616      	mov	r6, r2
 801c54c:	1c6a      	adds	r2, r5, #1
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 801c54e:	6823      	ldr	r3, [r4, #0]
 801c550:	d12c      	bne.n	801c5ac <I2C_WaitOnTXISFlagUntilTimeout+0x68>
 801c552:	699a      	ldr	r2, [r3, #24]
 801c554:	0790      	lsls	r0, r2, #30
 801c556:	d427      	bmi.n	801c5a8 <I2C_WaitOnTXISFlagUntilTimeout+0x64>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 801c558:	699a      	ldr	r2, [r3, #24]
 801c55a:	06d1      	lsls	r1, r2, #27
 801c55c:	d5f9      	bpl.n	801c552 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801c55e:	699a      	ldr	r2, [r3, #24]
 801c560:	0691      	lsls	r1, r2, #26
 801c562:	d5fc      	bpl.n	801c55e <I2C_WaitOnTXISFlagUntilTimeout+0x1a>

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801c564:	2220      	movs	r2, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801c566:	2110      	movs	r1, #16
 801c568:	61d9      	str	r1, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801c56a:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 801c56c:	699a      	ldr	r2, [r3, #24]
 801c56e:	0790      	lsls	r0, r2, #30
 801c570:	d501      	bpl.n	801c576 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
    hi2c->Instance->TXDR = 0x00U;
 801c572:	2200      	movs	r2, #0
 801c574:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 801c576:	699a      	ldr	r2, [r3, #24]
 801c578:	07d1      	lsls	r1, r2, #31
 801c57a:	d403      	bmi.n	801c584 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 801c57c:	699a      	ldr	r2, [r3, #24]
 801c57e:	f042 0201 	orr.w	r2, r2, #1
 801c582:	619a      	str	r2, [r3, #24]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 801c584:	685a      	ldr	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;
 801c586:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
 801c588:	4e1b      	ldr	r6, [pc, #108]	; (801c5f8 <I2C_WaitOnTXISFlagUntilTimeout+0xb4>)
    hi2c->State = HAL_I2C_STATE_READY;
 801c58a:	2520      	movs	r5, #32
      return HAL_ERROR;
 801c58c:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 801c58e:	4032      	ands	r2, r6
 801c590:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801c592:	6c63      	ldr	r3, [r4, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801c594:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801c598:	f043 0304 	orr.w	r3, r3, #4
 801c59c:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 801c59e:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 801c5a2:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
}
 801c5a6:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 801c5a8:	2000      	movs	r0, #0
}
 801c5aa:	bd70      	pop	{r4, r5, r6, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 801c5ac:	699a      	ldr	r2, [r3, #24]
 801c5ae:	0792      	lsls	r2, r2, #30
 801c5b0:	d4fa      	bmi.n	801c5a8 <I2C_WaitOnTXISFlagUntilTimeout+0x64>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 801c5b2:	699a      	ldr	r2, [r3, #24]
 801c5b4:	06d0      	lsls	r0, r2, #27
 801c5b6:	d41b      	bmi.n	801c5f0 <I2C_WaitOnTXISFlagUntilTimeout+0xac>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801c5b8:	f7ff fd3c 	bl	801c034 <HAL_GetTick>
 801c5bc:	1b80      	subs	r0, r0, r6
 801c5be:	42a8      	cmp	r0, r5
 801c5c0:	d801      	bhi.n	801c5c6 <I2C_WaitOnTXISFlagUntilTimeout+0x82>
 801c5c2:	2d00      	cmp	r5, #0
 801c5c4:	d1c2      	bne.n	801c54c <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801c5c6:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 801c5c8:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801c5ca:	2200      	movs	r2, #0
        __HAL_UNLOCK(hi2c);
 801c5cc:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801c5ce:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 801c5d0:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801c5d4:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 801c5d6:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801c5da:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 801c5de:	bd70      	pop	{r4, r5, r6, pc}
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801c5e0:	f7ff fd28 	bl	801c034 <HAL_GetTick>
 801c5e4:	1b80      	subs	r0, r0, r6
 801c5e6:	4285      	cmp	r5, r0
 801c5e8:	d3ed      	bcc.n	801c5c6 <I2C_WaitOnTXISFlagUntilTimeout+0x82>
 801c5ea:	2d00      	cmp	r5, #0
 801c5ec:	d0eb      	beq.n	801c5c6 <I2C_WaitOnTXISFlagUntilTimeout+0x82>
 801c5ee:	6823      	ldr	r3, [r4, #0]
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801c5f0:	6999      	ldr	r1, [r3, #24]
 801c5f2:	068a      	lsls	r2, r1, #26
 801c5f4:	d5f4      	bpl.n	801c5e0 <I2C_WaitOnTXISFlagUntilTimeout+0x9c>
 801c5f6:	e7b5      	b.n	801c564 <I2C_WaitOnTXISFlagUntilTimeout+0x20>
 801c5f8:	fe00e800 	.word	0xfe00e800

0801c5fc <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 801c5fc:	b570      	push	{r4, r5, r6, lr}
 801c5fe:	4604      	mov	r4, r0
 801c600:	460d      	mov	r5, r1
 801c602:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801c604:	6823      	ldr	r3, [r4, #0]
 801c606:	6999      	ldr	r1, [r3, #24]
 801c608:	068a      	lsls	r2, r1, #26
 801c60a:	d449      	bmi.n	801c6a0 <I2C_WaitOnSTOPFlagUntilTimeout+0xa4>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 801c60c:	6999      	ldr	r1, [r3, #24]
 801c60e:	06ca      	lsls	r2, r1, #27
 801c610:	d526      	bpl.n	801c660 <I2C_WaitOnSTOPFlagUntilTimeout+0x64>
 801c612:	1c68      	adds	r0, r5, #1
 801c614:	d138      	bne.n	801c688 <I2C_WaitOnSTOPFlagUntilTimeout+0x8c>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801c616:	699a      	ldr	r2, [r3, #24]
 801c618:	0691      	lsls	r1, r2, #26
 801c61a:	d5fc      	bpl.n	801c616 <I2C_WaitOnSTOPFlagUntilTimeout+0x1a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801c61c:	2220      	movs	r2, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801c61e:	2110      	movs	r1, #16
 801c620:	61d9      	str	r1, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801c622:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 801c624:	699a      	ldr	r2, [r3, #24]
 801c626:	0790      	lsls	r0, r2, #30
 801c628:	d501      	bpl.n	801c62e <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
    hi2c->Instance->TXDR = 0x00U;
 801c62a:	2200      	movs	r2, #0
 801c62c:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 801c62e:	699a      	ldr	r2, [r3, #24]
 801c630:	07d1      	lsls	r1, r2, #31
 801c632:	d403      	bmi.n	801c63c <I2C_WaitOnSTOPFlagUntilTimeout+0x40>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 801c634:	699a      	ldr	r2, [r3, #24]
 801c636:	f042 0201 	orr.w	r2, r2, #1
 801c63a:	619a      	str	r2, [r3, #24]
    I2C_RESET_CR2(hi2c);
 801c63c:	685a      	ldr	r2, [r3, #4]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 801c63e:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
 801c640:	4e18      	ldr	r6, [pc, #96]	; (801c6a4 <I2C_WaitOnSTOPFlagUntilTimeout+0xa8>)
    hi2c->State = HAL_I2C_STATE_READY;
 801c642:	2520      	movs	r5, #32
      return HAL_ERROR;
 801c644:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 801c646:	4032      	ands	r2, r6
 801c648:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801c64a:	6c63      	ldr	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 801c64c:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801c650:	f043 0304 	orr.w	r3, r3, #4
 801c654:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 801c656:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 801c65a:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
}
 801c65e:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801c660:	f7ff fce8 	bl	801c034 <HAL_GetTick>
 801c664:	1b80      	subs	r0, r0, r6
 801c666:	42a8      	cmp	r0, r5
 801c668:	d801      	bhi.n	801c66e <I2C_WaitOnSTOPFlagUntilTimeout+0x72>
 801c66a:	2d00      	cmp	r5, #0
 801c66c:	d1ca      	bne.n	801c604 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801c66e:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 801c670:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801c672:	2200      	movs	r2, #0
        __HAL_UNLOCK(hi2c);
 801c674:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801c676:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 801c678:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801c67c:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 801c67e:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801c682:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 801c686:	bd70      	pop	{r4, r5, r6, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801c688:	699a      	ldr	r2, [r3, #24]
 801c68a:	0692      	lsls	r2, r2, #26
 801c68c:	d4c6      	bmi.n	801c61c <I2C_WaitOnSTOPFlagUntilTimeout+0x20>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801c68e:	f7ff fcd1 	bl	801c034 <HAL_GetTick>
 801c692:	1b80      	subs	r0, r0, r6
 801c694:	4285      	cmp	r5, r0
 801c696:	d3ea      	bcc.n	801c66e <I2C_WaitOnSTOPFlagUntilTimeout+0x72>
 801c698:	2d00      	cmp	r5, #0
 801c69a:	d0e8      	beq.n	801c66e <I2C_WaitOnSTOPFlagUntilTimeout+0x72>
 801c69c:	6823      	ldr	r3, [r4, #0]
 801c69e:	e7b8      	b.n	801c612 <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 801c6a0:	2000      	movs	r0, #0
}
 801c6a2:	bd70      	pop	{r4, r5, r6, pc}
 801c6a4:	fe00e800 	.word	0xfe00e800

0801c6a8 <HAL_I2C_Init>:
  if (hi2c == NULL)
 801c6a8:	2800      	cmp	r0, #0
 801c6aa:	d04d      	beq.n	801c748 <HAL_I2C_Init+0xa0>
{
 801c6ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 801c6ae:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 801c6b2:	4604      	mov	r4, r0
 801c6b4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 801c6b8:	2b00      	cmp	r3, #0
 801c6ba:	d040      	beq.n	801c73e <HAL_I2C_Init+0x96>
  hi2c->State = HAL_I2C_STATE_BUSY;
 801c6bc:	2124      	movs	r1, #36	; 0x24
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 801c6be:	68e0      	ldr	r0, [r4, #12]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 801c6c0:	e9d4 3200 	ldrd	r3, r2, [r4]
  hi2c->State = HAL_I2C_STATE_BUSY;
 801c6c4:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 801c6c8:	2801      	cmp	r0, #1
  __HAL_I2C_DISABLE(hi2c);
 801c6ca:	6819      	ldr	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 801c6cc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
  __HAL_I2C_DISABLE(hi2c);
 801c6d0:	f021 0101 	bic.w	r1, r1, #1
 801c6d4:	6019      	str	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 801c6d6:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 801c6d8:	689a      	ldr	r2, [r3, #8]
 801c6da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801c6de:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 801c6e0:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 801c6e2:	d028      	beq.n	801c736 <HAL_I2C_Init+0x8e>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 801c6e4:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 801c6e8:	2802      	cmp	r0, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 801c6ea:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 801c6ec:	d102      	bne.n	801c6f4 <HAL_I2C_Init+0x4c>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 801c6ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801c6f2:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 801c6f4:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801c6f6:	2100      	movs	r1, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 801c6f8:	4814      	ldr	r0, [pc, #80]	; (801c74c <HAL_I2C_Init+0xa4>)
  hi2c->State = HAL_I2C_STATE_READY;
 801c6fa:	2720      	movs	r7, #32
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 801c6fc:	69a6      	ldr	r6, [r4, #24]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 801c6fe:	4310      	orrs	r0, r2
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 801c700:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 801c704:	6058      	str	r0, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 801c706:	432a      	orrs	r2, r5
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 801c708:	68d8      	ldr	r0, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 801c70a:	69e5      	ldr	r5, [r4, #28]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 801c70c:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 801c710:	6a26      	ldr	r6, [r4, #32]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 801c712:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 801c716:	4335      	orrs	r5, r6
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 801c718:	60d8      	str	r0, [r3, #12]
  return HAL_OK;
 801c71a:	4608      	mov	r0, r1
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 801c71c:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 801c71e:	601d      	str	r5, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 801c720:	681a      	ldr	r2, [r3, #0]
 801c722:	f042 0201 	orr.w	r2, r2, #1
 801c726:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801c728:	6461      	str	r1, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 801c72a:	f884 7041 	strb.w	r7, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 801c72e:	6321      	str	r1, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 801c730:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
}
 801c734:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 801c736:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801c73a:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 801c73c:	e7da      	b.n	801c6f4 <HAL_I2C_Init+0x4c>
    hi2c->Lock = HAL_UNLOCKED;
 801c73e:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 801c742:	f7e4 fb17 	bl	8000d74 <HAL_I2C_MspInit>
 801c746:	e7b9      	b.n	801c6bc <HAL_I2C_Init+0x14>
    return HAL_ERROR;
 801c748:	2001      	movs	r0, #1
}
 801c74a:	4770      	bx	lr
 801c74c:	02008000 	.word	0x02008000

0801c750 <HAL_I2C_Mem_Read>:
{
 801c750:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c754:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 801c756:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 801c75a:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
  if (hi2c->State == HAL_I2C_STATE_READY)
 801c75e:	2b20      	cmp	r3, #32
{
 801c760:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 801c762:	f040 80b3 	bne.w	801c8cc <HAL_I2C_Mem_Read+0x17c>
    if ((pData == NULL) || (Size == 0U))
 801c766:	9b08      	ldr	r3, [sp, #32]
 801c768:	4604      	mov	r4, r0
 801c76a:	2b00      	cmp	r3, #0
 801c76c:	f000 80a8 	beq.w	801c8c0 <HAL_I2C_Mem_Read+0x170>
 801c770:	f1ba 0f00 	cmp.w	sl, #0
 801c774:	f000 80a4 	beq.w	801c8c0 <HAL_I2C_Mem_Read+0x170>
    __HAL_LOCK(hi2c);
 801c778:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 801c77c:	2b01      	cmp	r3, #1
 801c77e:	f000 80a5 	beq.w	801c8cc <HAL_I2C_Mem_Read+0x17c>
 801c782:	2301      	movs	r3, #1
 801c784:	460f      	mov	r7, r1
 801c786:	4690      	mov	r8, r2
 801c788:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 801c78c:	f7ff fc52 	bl	801c034 <HAL_GetTick>
 801c790:	4606      	mov	r6, r0
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
 801c792:	e005      	b.n	801c7a0 <HAL_I2C_Mem_Read+0x50>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801c794:	f7ff fc4e 	bl	801c034 <HAL_GetTick>
 801c798:	1b80      	subs	r0, r0, r6
 801c79a:	2819      	cmp	r0, #25
 801c79c:	f200 8082 	bhi.w	801c8a4 <HAL_I2C_Mem_Read+0x154>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801c7a0:	f8d4 c000 	ldr.w	ip, [r4]
 801c7a4:	f8dc 3018 	ldr.w	r3, [ip, #24]
 801c7a8:	f413 4300 	ands.w	r3, r3, #32768	; 0x8000
 801c7ac:	d1f2      	bne.n	801c794 <HAL_I2C_Mem_Read+0x44>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 801c7ae:	2122      	movs	r1, #34	; 0x22
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 801c7b0:	2240      	movs	r2, #64	; 0x40
    hi2c->pBuffPtr  = pData;
 801c7b2:	9808      	ldr	r0, [sp, #32]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 801c7b4:	f3c7 0709 	ubfx	r7, r7, #0, #10
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 801c7b8:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  MODIFY_REG(hi2c->Instance->CR2,
 801c7bc:	f8df e1f0 	ldr.w	lr, [pc, #496]	; 801c9b0 <HAL_I2C_Mem_Read+0x260>
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 801c7c0:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801c7c4:	4632      	mov	r2, r6
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801c7c6:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 801c7c8:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2,
 801c7cc:	f8dc 1004 	ldr.w	r1, [ip, #4]
    hi2c->pBuffPtr  = pData;
 801c7d0:	6260      	str	r0, [r4, #36]	; 0x24
  MODIFY_REG(hi2c->Instance->CR2,
 801c7d2:	fa5f f089 	uxtb.w	r0, r9
 801c7d6:	ea01 010e 	and.w	r1, r1, lr
    hi2c->XferISR   = NULL;
 801c7da:	6363      	str	r3, [r4, #52]	; 0x34
  MODIFY_REG(hi2c->Instance->CR2,
 801c7dc:	f8df e1e0 	ldr.w	lr, [pc, #480]	; 801c9c0 <HAL_I2C_Mem_Read+0x270>
 801c7e0:	ea41 4300 	orr.w	r3, r1, r0, lsl #16
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801c7e4:	4629      	mov	r1, r5
 801c7e6:	4620      	mov	r0, r4
  MODIFY_REG(hi2c->Instance->CR2,
 801c7e8:	433b      	orrs	r3, r7
 801c7ea:	ea43 0e0e 	orr.w	lr, r3, lr
 801c7ee:	f8cc e004 	str.w	lr, [ip, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801c7f2:	f7ff fea7 	bl	801c544 <I2C_WaitOnTXISFlagUntilTimeout>
 801c7f6:	2800      	cmp	r0, #0
 801c7f8:	d174      	bne.n	801c8e4 <HAL_I2C_Mem_Read+0x194>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 801c7fa:	f1b9 0f01 	cmp.w	r9, #1
 801c7fe:	d00a      	beq.n	801c816 <HAL_I2C_Mem_Read+0xc6>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 801c800:	ea4f 2018 	mov.w	r0, r8, lsr #8
 801c804:	6823      	ldr	r3, [r4, #0]
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801c806:	4632      	mov	r2, r6
 801c808:	4629      	mov	r1, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 801c80a:	6298      	str	r0, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801c80c:	4620      	mov	r0, r4
 801c80e:	f7ff fe99 	bl	801c544 <I2C_WaitOnTXISFlagUntilTimeout>
 801c812:	2800      	cmp	r0, #0
 801c814:	d166      	bne.n	801c8e4 <HAL_I2C_Mem_Read+0x194>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 801c816:	fa5f f288 	uxtb.w	r2, r8
 801c81a:	6823      	ldr	r3, [r4, #0]
 801c81c:	629a      	str	r2, [r3, #40]	; 0x28
 801c81e:	1c68      	adds	r0, r5, #1
 801c820:	f040 8091 	bne.w	801c946 <HAL_I2C_Mem_Read+0x1f6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801c824:	699a      	ldr	r2, [r3, #24]
 801c826:	0651      	lsls	r1, r2, #25
 801c828:	d5fc      	bpl.n	801c824 <HAL_I2C_Mem_Read+0xd4>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801c82a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 801c82c:	b292      	uxth	r2, r2
 801c82e:	2aff      	cmp	r2, #255	; 0xff
 801c830:	f240 8096 	bls.w	801c960 <HAL_I2C_Mem_Read+0x210>
  MODIFY_REG(hi2c->Instance->CR2,
 801c834:	685a      	ldr	r2, [r3, #4]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801c836:	20ff      	movs	r0, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2,
 801c838:	495d      	ldr	r1, [pc, #372]	; (801c9b0 <HAL_I2C_Mem_Read+0x260>)
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801c83a:	8520      	strh	r0, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 801c83c:	400a      	ands	r2, r1
 801c83e:	495d      	ldr	r1, [pc, #372]	; (801c9b4 <HAL_I2C_Mem_Read+0x264>)
 801c840:	433a      	orrs	r2, r7
 801c842:	4311      	orrs	r1, r2
 801c844:	6059      	str	r1, [r3, #4]
 801c846:	1c68      	adds	r0, r5, #1
 801c848:	f8df 8178 	ldr.w	r8, [pc, #376]	; 801c9c4 <HAL_I2C_Mem_Read+0x274>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 801c84c:	f04f 0aff 	mov.w	sl, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2,
 801c850:	f8df 9174 	ldr.w	r9, [pc, #372]	; 801c9c8 <HAL_I2C_Mem_Read+0x278>
 801c854:	d11c      	bne.n	801c890 <HAL_I2C_Mem_Read+0x140>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801c856:	699a      	ldr	r2, [r3, #24]
 801c858:	0751      	lsls	r1, r2, #29
 801c85a:	d5fc      	bpl.n	801c856 <HAL_I2C_Mem_Read+0x106>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 801c85c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801c85e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c860:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 801c862:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 801c864:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 801c866:	3901      	subs	r1, #1
      hi2c->pBuffPtr++;
 801c868:	6a62      	ldr	r2, [r4, #36]	; 0x24
      hi2c->XferSize--;
 801c86a:	3b01      	subs	r3, #1
      hi2c->XferCount--;
 801c86c:	b289      	uxth	r1, r1
      hi2c->pBuffPtr++;
 801c86e:	3201      	adds	r2, #1
      hi2c->XferSize--;
 801c870:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
 801c872:	8561      	strh	r1, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 801c874:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 801c876:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 801c878:	b289      	uxth	r1, r1
      hi2c->pBuffPtr++;
 801c87a:	6262      	str	r2, [r4, #36]	; 0x24
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 801c87c:	b90b      	cbnz	r3, 801c882 <HAL_I2C_Mem_Read+0x132>
 801c87e:	2900      	cmp	r1, #0
 801c880:	d13f      	bne.n	801c902 <HAL_I2C_Mem_Read+0x1b2>
    } while (hi2c->XferCount > 0U);
 801c882:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 801c884:	b29b      	uxth	r3, r3
 801c886:	2b00      	cmp	r3, #0
 801c888:	d07b      	beq.n	801c982 <HAL_I2C_Mem_Read+0x232>
 801c88a:	1c68      	adds	r0, r5, #1
 801c88c:	6823      	ldr	r3, [r4, #0]
 801c88e:	d0e2      	beq.n	801c856 <HAL_I2C_Mem_Read+0x106>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801c890:	699a      	ldr	r2, [r3, #24]
 801c892:	0752      	lsls	r2, r2, #29
 801c894:	d4e2      	bmi.n	801c85c <HAL_I2C_Mem_Read+0x10c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801c896:	f7ff fbcd 	bl	801c034 <HAL_GetTick>
 801c89a:	1b80      	subs	r0, r0, r6
 801c89c:	4285      	cmp	r5, r0
 801c89e:	d301      	bcc.n	801c8a4 <HAL_I2C_Mem_Read+0x154>
 801c8a0:	2d00      	cmp	r5, #0
 801c8a2:	d1f2      	bne.n	801c88a <HAL_I2C_Mem_Read+0x13a>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801c8a4:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 801c8a6:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801c8a8:	2200      	movs	r2, #0
          return HAL_ERROR;
 801c8aa:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801c8ac:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 801c8ae:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801c8b2:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 801c8b4:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801c8b8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 801c8bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 801c8c0:	f44f 7300 	mov.w	r3, #512	; 0x200
      return  HAL_ERROR;
 801c8c4:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 801c8c6:	6463      	str	r3, [r4, #68]	; 0x44
}
 801c8c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return HAL_BUSY;
 801c8cc:	2002      	movs	r0, #2
}
 801c8ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801c8d2:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 801c8d4:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801c8d6:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801c8d8:	430b      	orrs	r3, r1
 801c8da:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 801c8dc:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801c8e0:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 801c8e4:	2300      	movs	r3, #0
      return HAL_ERROR;
 801c8e6:	2001      	movs	r0, #1
      __HAL_UNLOCK(hi2c);
 801c8e8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 801c8ec:	e7ec      	b.n	801c8c8 <HAL_I2C_Mem_Read+0x178>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801c8ee:	6993      	ldr	r3, [r2, #24]
 801c8f0:	061b      	lsls	r3, r3, #24
 801c8f2:	d40c      	bmi.n	801c90e <HAL_I2C_Mem_Read+0x1be>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801c8f4:	f7ff fb9e 	bl	801c034 <HAL_GetTick>
 801c8f8:	1b80      	subs	r0, r0, r6
 801c8fa:	4285      	cmp	r5, r0
 801c8fc:	d3d2      	bcc.n	801c8a4 <HAL_I2C_Mem_Read+0x154>
 801c8fe:	2d00      	cmp	r5, #0
 801c900:	d0d0      	beq.n	801c8a4 <HAL_I2C_Mem_Read+0x154>
 801c902:	1c68      	adds	r0, r5, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801c904:	6822      	ldr	r2, [r4, #0]
 801c906:	d1f2      	bne.n	801c8ee <HAL_I2C_Mem_Read+0x19e>
 801c908:	6993      	ldr	r3, [r2, #24]
 801c90a:	0619      	lsls	r1, r3, #24
 801c90c:	d5fc      	bpl.n	801c908 <HAL_I2C_Mem_Read+0x1b8>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801c90e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 801c910:	b29b      	uxth	r3, r3
 801c912:	2bff      	cmp	r3, #255	; 0xff
 801c914:	d909      	bls.n	801c92a <HAL_I2C_Mem_Read+0x1da>
  MODIFY_REG(hi2c->Instance->CR2,
 801c916:	6853      	ldr	r3, [r2, #4]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 801c918:	f8a4 a028 	strh.w	sl, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 801c91c:	ea03 0308 	and.w	r3, r3, r8
 801c920:	433b      	orrs	r3, r7
 801c922:	ea43 0309 	orr.w	r3, r3, r9
 801c926:	6053      	str	r3, [r2, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 801c928:	e7ab      	b.n	801c882 <HAL_I2C_Mem_Read+0x132>
          hi2c->XferSize = hi2c->XferCount;
 801c92a:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2,
 801c92c:	6853      	ldr	r3, [r2, #4]
          hi2c->XferSize = hi2c->XferCount;
 801c92e:	b289      	uxth	r1, r1
  MODIFY_REG(hi2c->Instance->CR2,
 801c930:	ea03 0308 	and.w	r3, r3, r8
 801c934:	b2c8      	uxtb	r0, r1
          hi2c->XferSize = hi2c->XferCount;
 801c936:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 801c938:	433b      	orrs	r3, r7
 801c93a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801c93e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 801c942:	6053      	str	r3, [r2, #4]
}
 801c944:	e79d      	b.n	801c882 <HAL_I2C_Mem_Read+0x132>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801c946:	699a      	ldr	r2, [r3, #24]
 801c948:	0652      	lsls	r2, r2, #25
 801c94a:	f53f af6e 	bmi.w	801c82a <HAL_I2C_Mem_Read+0xda>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801c94e:	f7ff fb71 	bl	801c034 <HAL_GetTick>
 801c952:	1b80      	subs	r0, r0, r6
 801c954:	4285      	cmp	r5, r0
 801c956:	d3bc      	bcc.n	801c8d2 <HAL_I2C_Mem_Read+0x182>
 801c958:	2d00      	cmp	r5, #0
 801c95a:	d0ba      	beq.n	801c8d2 <HAL_I2C_Mem_Read+0x182>
 801c95c:	6823      	ldr	r3, [r4, #0]
 801c95e:	e75e      	b.n	801c81e <HAL_I2C_Mem_Read+0xce>
      hi2c->XferSize = hi2c->XferCount;
 801c960:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2,
 801c962:	f8df c04c 	ldr.w	ip, [pc, #76]	; 801c9b0 <HAL_I2C_Mem_Read+0x260>
 801c966:	685a      	ldr	r2, [r3, #4]
      hi2c->XferSize = hi2c->XferCount;
 801c968:	b289      	uxth	r1, r1
  MODIFY_REG(hi2c->Instance->CR2,
 801c96a:	4813      	ldr	r0, [pc, #76]	; (801c9b8 <HAL_I2C_Mem_Read+0x268>)
 801c96c:	ea02 020c 	and.w	r2, r2, ip
 801c970:	fa5f fc81 	uxtb.w	ip, r1
      hi2c->XferSize = hi2c->XferCount;
 801c974:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 801c976:	433a      	orrs	r2, r7
 801c978:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 801c97c:	4310      	orrs	r0, r2
 801c97e:	6058      	str	r0, [r3, #4]
}
 801c980:	e761      	b.n	801c846 <HAL_I2C_Mem_Read+0xf6>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801c982:	4632      	mov	r2, r6
 801c984:	4629      	mov	r1, r5
 801c986:	4620      	mov	r0, r4
 801c988:	f7ff fe38 	bl	801c5fc <I2C_WaitOnSTOPFlagUntilTimeout>
 801c98c:	b968      	cbnz	r0, 801c9aa <HAL_I2C_Mem_Read+0x25a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801c98e:	6823      	ldr	r3, [r4, #0]
 801c990:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 801c992:	4d0a      	ldr	r5, [pc, #40]	; (801c9bc <HAL_I2C_Mem_Read+0x26c>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801c994:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 801c996:	685a      	ldr	r2, [r3, #4]
 801c998:	402a      	ands	r2, r5
 801c99a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 801c99c:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 801c9a0:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 801c9a4:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 801c9a8:	e78e      	b.n	801c8c8 <HAL_I2C_Mem_Read+0x178>
      return HAL_ERROR;
 801c9aa:	2001      	movs	r0, #1
 801c9ac:	e78c      	b.n	801c8c8 <HAL_I2C_Mem_Read+0x178>
 801c9ae:	bf00      	nop
 801c9b0:	fc009800 	.word	0xfc009800
 801c9b4:	81ff2400 	.word	0x81ff2400
 801c9b8:	82002400 	.word	0x82002400
 801c9bc:	fe00e800 	.word	0xfe00e800
 801c9c0:	80002000 	.word	0x80002000
 801c9c4:	fc009c00 	.word	0xfc009c00
 801c9c8:	01ff0000 	.word	0x01ff0000

0801c9cc <HAL_I2C_EV_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 801c9cc:	6802      	ldr	r2, [r0, #0]
  if (hi2c->XferISR != NULL)
 801c9ce:	6b43      	ldr	r3, [r0, #52]	; 0x34
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 801c9d0:	6991      	ldr	r1, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 801c9d2:	6812      	ldr	r2, [r2, #0]
  if (hi2c->XferISR != NULL)
 801c9d4:	b103      	cbz	r3, 801c9d8 <HAL_I2C_EV_IRQHandler+0xc>
    hi2c->XferISR(hi2c, itflags, itsources);
 801c9d6:	4718      	bx	r3
}
 801c9d8:	4770      	bx	lr
 801c9da:	bf00      	nop

0801c9dc <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801c9dc:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 801c9e0:	2a20      	cmp	r2, #32
 801c9e2:	d121      	bne.n	801ca28 <HAL_I2CEx_ConfigAnalogFilter+0x4c>
 801c9e4:	4603      	mov	r3, r0
{
 801c9e6:	b470      	push	{r4, r5, r6}
 801c9e8:	b2d5      	uxtb	r5, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801c9ea:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 801c9ee:	2a01      	cmp	r2, #1
 801c9f0:	d01c      	beq.n	801ca2c <HAL_I2CEx_ConfigAnalogFilter+0x50>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 801c9f2:	681a      	ldr	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 801c9f4:	2024      	movs	r0, #36	; 0x24
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801c9f6:	2600      	movs	r6, #0
    hi2c->State = HAL_I2C_STATE_BUSY;
 801c9f8:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 801c9fc:	6814      	ldr	r4, [r2, #0]

    return HAL_OK;
 801c9fe:	4630      	mov	r0, r6
    __HAL_I2C_DISABLE(hi2c);
 801ca00:	f024 0401 	bic.w	r4, r4, #1
 801ca04:	6014      	str	r4, [r2, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 801ca06:	6814      	ldr	r4, [r2, #0]
 801ca08:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 801ca0c:	6014      	str	r4, [r2, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 801ca0e:	6814      	ldr	r4, [r2, #0]
 801ca10:	4321      	orrs	r1, r4
 801ca12:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 801ca14:	6811      	ldr	r1, [r2, #0]
 801ca16:	f041 0101 	orr.w	r1, r1, #1
 801ca1a:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 801ca1c:	f883 5041 	strb.w	r5, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 801ca20:	f883 6040 	strb.w	r6, [r3, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 801ca24:	bc70      	pop	{r4, r5, r6}
 801ca26:	4770      	bx	lr
    return HAL_BUSY;
 801ca28:	2002      	movs	r0, #2
}
 801ca2a:	4770      	bx	lr
    return HAL_BUSY;
 801ca2c:	2002      	movs	r0, #2
}
 801ca2e:	bc70      	pop	{r4, r5, r6}
 801ca30:	4770      	bx	lr
 801ca32:	bf00      	nop

0801ca34 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801ca34:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 801ca38:	2a20      	cmp	r2, #32
 801ca3a:	d120      	bne.n	801ca7e <HAL_I2CEx_ConfigDigitalFilter+0x4a>
 801ca3c:	4603      	mov	r3, r0
{
 801ca3e:	b470      	push	{r4, r5, r6}
 801ca40:	b2d6      	uxtb	r6, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801ca42:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 801ca46:	2a01      	cmp	r2, #1
 801ca48:	d01b      	beq.n	801ca82 <HAL_I2CEx_ConfigDigitalFilter+0x4e>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 801ca4a:	681a      	ldr	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 801ca4c:	2024      	movs	r0, #36	; 0x24
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801ca4e:	2500      	movs	r5, #0
    hi2c->State = HAL_I2C_STATE_BUSY;
 801ca50:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 801ca54:	6814      	ldr	r4, [r2, #0]

    return HAL_OK;
 801ca56:	4628      	mov	r0, r5
    __HAL_I2C_DISABLE(hi2c);
 801ca58:	f024 0401 	bic.w	r4, r4, #1
 801ca5c:	6014      	str	r4, [r2, #0]
    tmpreg = hi2c->Instance->CR1;
 801ca5e:	6814      	ldr	r4, [r2, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 801ca60:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
    tmpreg |= DigitalFilter << 8U;
 801ca64:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    hi2c->Instance->CR1 = tmpreg;
 801ca68:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 801ca6a:	6811      	ldr	r1, [r2, #0]
 801ca6c:	f041 0101 	orr.w	r1, r1, #1
 801ca70:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 801ca72:	f883 6041 	strb.w	r6, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 801ca76:	f883 5040 	strb.w	r5, [r3, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 801ca7a:	bc70      	pop	{r4, r5, r6}
 801ca7c:	4770      	bx	lr
    return HAL_BUSY;
 801ca7e:	2002      	movs	r0, #2
}
 801ca80:	4770      	bx	lr
    return HAL_BUSY;
 801ca82:	2002      	movs	r0, #2
}
 801ca84:	bc70      	pop	{r4, r5, r6}
 801ca86:	4770      	bx	lr

0801ca88 <HAL_LTDC_Init>:
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 801ca88:	2800      	cmp	r0, #0
 801ca8a:	d06d      	beq.n	801cb68 <HAL_LTDC_Init+0xe0>
{
 801ca8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 801ca8e:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 801ca92:	4604      	mov	r4, r0
 801ca94:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 801ca98:	2b00      	cmp	r3, #0
 801ca9a:	d060      	beq.n	801cb5e <HAL_LTDC_Init+0xd6>
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 801ca9c:	68a0      	ldr	r0, [r4, #8]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 801ca9e:	2502      	movs	r5, #2
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 801caa0:	68e6      	ldr	r6, [r4, #12]

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 801caa2:	2100      	movs	r1, #0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 801caa4:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 801caa8:	6925      	ldr	r5, [r4, #16]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 801caaa:	6967      	ldr	r7, [r4, #20]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 801caac:	f8d4 c018 	ldr.w	ip, [r4, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 801cab0:	e9d4 3200 	ldrd	r3, r2, [r4]
 801cab4:	4302      	orrs	r2, r0
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 801cab6:	6998      	ldr	r0, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 801cab8:	4332      	orrs	r2, r6
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 801caba:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 801cabe:	4e2b      	ldr	r6, [pc, #172]	; (801cb6c <HAL_LTDC_Init+0xe4>)
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 801cac0:	6198      	str	r0, [r3, #24]
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 801cac2:	432a      	orrs	r2, r5
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 801cac4:	6998      	ldr	r0, [r3, #24]

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 801cac6:	2501      	movs	r5, #1
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 801cac8:	4302      	orrs	r2, r0
 801caca:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 801cacc:	689a      	ldr	r2, [r3, #8]
 801cace:	4032      	ands	r2, r6
 801cad0:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 801cad2:	6898      	ldr	r0, [r3, #8]
 801cad4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 801cad8:	69e7      	ldr	r7, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 801cada:	ea40 000c 	orr.w	r0, r0, ip
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 801cade:	f8d4 c020 	ldr.w	ip, [r4, #32]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 801cae2:	6098      	str	r0, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 801cae4:	68d8      	ldr	r0, [r3, #12]
 801cae6:	4030      	ands	r0, r6
 801cae8:	60d8      	str	r0, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 801caea:	68da      	ldr	r2, [r3, #12]
 801caec:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 801caf0:	6a67      	ldr	r7, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 801caf2:	ea42 020c 	orr.w	r2, r2, ip
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 801caf6:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 801cafa:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 801cafc:	691a      	ldr	r2, [r3, #16]
 801cafe:	4032      	ands	r2, r6
 801cb00:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 801cb02:	6918      	ldr	r0, [r3, #16]
 801cb04:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
  tmp = (hltdc->Init.TotalWidth << 16U);
 801cb08:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 801cb0a:	ea40 000c 	orr.w	r0, r0, ip
 801cb0e:	6118      	str	r0, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 801cb10:	6958      	ldr	r0, [r3, #20]
 801cb12:	4006      	ands	r6, r0
 801cb14:	615e      	str	r6, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 801cb16:	695a      	ldr	r2, [r3, #20]
 801cb18:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801cb1a:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 801cb1e:	4302      	orrs	r2, r0
 801cb20:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 801cb22:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 801cb24:	f894 7035 	ldrb.w	r7, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 801cb28:	f000 407f 	and.w	r0, r0, #4278190080	; 0xff000000
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 801cb2c:	f894 6036 	ldrb.w	r6, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 801cb30:	62d8      	str	r0, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 801cb32:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 801cb34:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 801cb38:	4302      	orrs	r2, r0

  return HAL_OK;
 801cb3a:	4608      	mov	r0, r1
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 801cb3c:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 801cb40:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 801cb44:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 801cb46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801cb48:	f042 0206 	orr.w	r2, r2, #6
 801cb4c:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 801cb4e:	699a      	ldr	r2, [r3, #24]
 801cb50:	432a      	orrs	r2, r5
 801cb52:	619a      	str	r2, [r3, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 801cb54:	f8c4 10a4 	str.w	r1, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 801cb58:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
}
 801cb5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hltdc->Lock = HAL_UNLOCKED;
 801cb5e:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 801cb62:	f7e4 f94d 	bl	8000e00 <HAL_LTDC_MspInit>
 801cb66:	e799      	b.n	801ca9c <HAL_LTDC_Init+0x14>
    return HAL_ERROR;
 801cb68:	2001      	movs	r0, #1
}
 801cb6a:	4770      	bx	lr
 801cb6c:	f000f800 	.word	0xf000f800

0801cb70 <HAL_LTDC_ConfigLayer>:
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 801cb70:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 801cb74:	2b01      	cmp	r3, #1
 801cb76:	f000 80b7 	beq.w	801cce8 <HAL_LTDC_ConfigLayer+0x178>
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 801cb7a:	ea4f 1cc2 	mov.w	ip, r2, lsl #7
  hltdc->State = HAL_LTDC_STATE_BUSY;
 801cb7e:	2302      	movs	r3, #2
{
 801cb80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 801cb84:	f04f 0834 	mov.w	r8, #52	; 0x34
 801cb88:	460d      	mov	r5, r1
 801cb8a:	4689      	mov	r9, r1
  __HAL_LOCK(hltdc);
 801cb8c:	f04f 0101 	mov.w	r1, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 801cb90:	fb08 0202 	mla	r2, r8, r2, r0
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 801cb94:	6807      	ldr	r7, [r0, #0]
  __HAL_LOCK(hltdc);
 801cb96:	f880 10a0 	strb.w	r1, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 801cb9a:	4606      	mov	r6, r0
 801cb9c:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 801cba0:	f102 0838 	add.w	r8, r2, #56	; 0x38
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 801cba4:	f8d7 a00c 	ldr.w	sl, [r7, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 801cba8:	f10c 0c84 	add.w	ip, ip, #132	; 0x84
  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 801cbac:	f8df e144 	ldr.w	lr, [pc, #324]	; 801ccf4 <HAL_LTDC_ConfigLayer+0x184>
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 801cbb0:	eb07 040c 	add.w	r4, r7, ip
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 801cbb4:	f3ca 4a0b 	ubfx	sl, sl, #16, #12
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 801cbb8:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 801cbbc:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 801cbc0:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 801cbc4:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 801cbc8:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 801cbcc:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 801cbd0:	6862      	ldr	r2, [r4, #4]
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 801cbd2:	f8d9 3000 	ldr.w	r3, [r9]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 801cbd6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 801cbda:	f8c8 3000 	str.w	r3, [r8]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 801cbde:	686b      	ldr	r3, [r5, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 801cbe0:	6062      	str	r2, [r4, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 801cbe2:	68f9      	ldr	r1, [r7, #12]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 801cbe4:	449a      	add	sl, r3
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 801cbe6:	f8d5 8000 	ldr.w	r8, [r5]
 801cbea:	f3c1 410b 	ubfx	r1, r1, #16, #12
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 801cbee:	f8d5 900c 	ldr.w	r9, [r5, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 801cbf2:	f108 0001 	add.w	r0, r8, #1
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 801cbf6:	68aa      	ldr	r2, [r5, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 801cbf8:	4401      	add	r1, r0
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 801cbfa:	6928      	ldr	r0, [r5, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 801cbfc:	3201      	adds	r2, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 801cbfe:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 801cc02:	f8d5 a018 	ldr.w	sl, [r5, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 801cc06:	6061      	str	r1, [r4, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 801cc08:	68f9      	ldr	r1, [r7, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 801cc0a:	f8d4 b008 	ldr.w	fp, [r4, #8]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 801cc0e:	f3c1 010a 	ubfx	r1, r1, #0, #11
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 801cc12:	f40b 4b70 	and.w	fp, fp, #61440	; 0xf000
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 801cc16:	4449      	add	r1, r9
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 801cc18:	f8d5 9014 	ldr.w	r9, [r5, #20]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 801cc1c:	f8c4 b008 	str.w	fp, [r4, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 801cc20:	f8d7 b00c 	ldr.w	fp, [r7, #12]
 801cc24:	f3cb 0b0a 	ubfx	fp, fp, #0, #11
 801cc28:	445a      	add	r2, fp
 801cc2a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 801cc2e:	60a2      	str	r2, [r4, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 801cc30:	6922      	ldr	r2, [r4, #16]
 801cc32:	f022 0207 	bic.w	r2, r2, #7
 801cc36:	6122      	str	r2, [r4, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 801cc38:	6120      	str	r0, [r4, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 801cc3a:	69a2      	ldr	r2, [r4, #24]
 801cc3c:	2200      	movs	r2, #0
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 801cc3e:	f895 1031 	ldrb.w	r1, [r5, #49]	; 0x31
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 801cc42:	f895 b032 	ldrb.w	fp, [r5, #50]	; 0x32
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 801cc46:	61a2      	str	r2, [r4, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 801cc48:	f895 2030 	ldrb.w	r2, [r5, #48]	; 0x30
 801cc4c:	ea42 620a 	orr.w	r2, r2, sl, lsl #24
 801cc50:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 801cc54:	6a29      	ldr	r1, [r5, #32]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 801cc56:	ea42 4a0b 	orr.w	sl, r2, fp, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 801cc5a:	69ea      	ldr	r2, [r5, #28]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 801cc5c:	f8c4 a018 	str.w	sl, [r4, #24]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 801cc60:	4311      	orrs	r1, r2
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 801cc62:	6962      	ldr	r2, [r4, #20]
 801cc64:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 801cc68:	6162      	str	r2, [r4, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 801cc6a:	f8c4 9014 	str.w	r9, [r4, #20]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 801cc6e:	69e2      	ldr	r2, [r4, #28]
 801cc70:	ea02 0e0e 	and.w	lr, r2, lr
 801cc74:	f8c4 e01c 	str.w	lr, [r4, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 801cc78:	61e1      	str	r1, [r4, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 801cc7a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 801cc7c:	2200      	movs	r2, #0
 801cc7e:	62a2      	str	r2, [r4, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 801cc80:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 801cc82:	62a2      	str	r2, [r4, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 801cc84:	bb28      	cbnz	r0, 801ccd2 <HAL_LTDC_ConfigLayer+0x162>
  {
    tmp = 4U;
 801cc86:	2204      	movs	r2, #4
    tmp = 1U;
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 801cc88:	eba3 0308 	sub.w	r3, r3, r8
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 801cc8c:	e9d5 1e0a 	ldrd	r1, lr, [r5, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 801cc90:	fb02 f303 	mul.w	r3, r2, r3
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 801cc94:	2501      	movs	r5, #1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 801cc96:	fb01 f202 	mul.w	r2, r1, r2
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 801cc9a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 801cc9c:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 801cc9e:	f001 21e0 	and.w	r1, r1, #3758153728	; 0xe000e000
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 801cca2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 801cca6:	4a12      	ldr	r2, [pc, #72]	; (801ccf0 <HAL_LTDC_ConfigLayer+0x180>)
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 801cca8:	62e1      	str	r1, [r4, #44]	; 0x2c
  __HAL_UNLOCK(hltdc);
 801ccaa:	2100      	movs	r1, #0
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 801ccac:	62e3      	str	r3, [r4, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 801ccae:	6b23      	ldr	r3, [r4, #48]	; 0x30
  return HAL_OK;
 801ccb0:	4608      	mov	r0, r1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 801ccb2:	401a      	ands	r2, r3
 801ccb4:	6322      	str	r2, [r4, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 801ccb6:	f8c4 e030 	str.w	lr, [r4, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 801ccba:	f857 300c 	ldr.w	r3, [r7, ip]
 801ccbe:	432b      	orrs	r3, r5
 801ccc0:	f847 300c 	str.w	r3, [r7, ip]
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 801ccc4:	627d      	str	r5, [r7, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 801ccc6:	f886 50a1 	strb.w	r5, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 801ccca:	f886 10a0 	strb.w	r1, [r6, #160]	; 0xa0
}
 801ccce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 801ccd2:	2801      	cmp	r0, #1
 801ccd4:	d00a      	beq.n	801ccec <HAL_LTDC_ConfigLayer+0x17c>
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 801ccd6:	1e82      	subs	r2, r0, #2
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 801ccd8:	2a02      	cmp	r2, #2
 801ccda:	d903      	bls.n	801cce4 <HAL_LTDC_ConfigLayer+0x174>
 801ccdc:	2807      	cmp	r0, #7
 801ccde:	d001      	beq.n	801cce4 <HAL_LTDC_ConfigLayer+0x174>
    tmp = 1U;
 801cce0:	2201      	movs	r2, #1
 801cce2:	e7d1      	b.n	801cc88 <HAL_LTDC_ConfigLayer+0x118>
    tmp = 2U;
 801cce4:	2202      	movs	r2, #2
 801cce6:	e7cf      	b.n	801cc88 <HAL_LTDC_ConfigLayer+0x118>
  __HAL_LOCK(hltdc);
 801cce8:	2002      	movs	r0, #2
}
 801ccea:	4770      	bx	lr
    tmp = 3U;
 801ccec:	2203      	movs	r2, #3
 801ccee:	e7cb      	b.n	801cc88 <HAL_LTDC_ConfigLayer+0x118>
 801ccf0:	fffff800 	.word	0xfffff800
 801ccf4:	fffff8f8 	.word	0xfffff8f8

0801ccf8 <HAL_LTDC_EnableDither>:
  __HAL_LOCK(hltdc);
 801ccf8:	f890 20a0 	ldrb.w	r2, [r0, #160]	; 0xa0
 801ccfc:	2a01      	cmp	r2, #1
 801ccfe:	d012      	beq.n	801cd26 <HAL_LTDC_EnableDither+0x2e>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 801cd00:	2202      	movs	r2, #2
 801cd02:	4603      	mov	r3, r0
  __HAL_UNLOCK(hltdc);
 801cd04:	2100      	movs	r1, #0
{
 801cd06:	b430      	push	{r4, r5}
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 801cd08:	4c08      	ldr	r4, [pc, #32]	; (801cd2c <HAL_LTDC_EnableDither+0x34>)
  hltdc->State = HAL_LTDC_STATE_READY;
 801cd0a:	2501      	movs	r5, #1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 801cd0c:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
  return HAL_OK;
 801cd10:	4608      	mov	r0, r1
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 801cd12:	69a2      	ldr	r2, [r4, #24]
 801cd14:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 801cd18:	61a2      	str	r2, [r4, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 801cd1a:	f883 50a1 	strb.w	r5, [r3, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 801cd1e:	f883 10a0 	strb.w	r1, [r3, #160]	; 0xa0
}
 801cd22:	bc30      	pop	{r4, r5}
 801cd24:	4770      	bx	lr
  __HAL_LOCK(hltdc);
 801cd26:	2002      	movs	r0, #2
}
 801cd28:	4770      	bx	lr
 801cd2a:	bf00      	nop
 801cd2c:	40016800 	.word	0x40016800

0801cd30 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 801cd30:	4a1b      	ldr	r2, [pc, #108]	; (801cda0 <HAL_PWREx_EnableOverDrive+0x70>)
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 801cd32:	4b1c      	ldr	r3, [pc, #112]	; (801cda4 <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_RCC_PWR_CLK_ENABLE();
 801cd34:	6c11      	ldr	r1, [r2, #64]	; 0x40
 801cd36:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
{
 801cd3a:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 801cd3c:	6411      	str	r1, [r2, #64]	; 0x40
{
 801cd3e:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 801cd40:	6c12      	ldr	r2, [r2, #64]	; 0x40

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 801cd42:	461d      	mov	r5, r3
  __HAL_RCC_PWR_CLK_ENABLE();
 801cd44:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 801cd48:	9201      	str	r2, [sp, #4]
 801cd4a:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 801cd4c:	681a      	ldr	r2, [r3, #0]
 801cd4e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 801cd52:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 801cd54:	f7ff f96e 	bl	801c034 <HAL_GetTick>
 801cd58:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 801cd5a:	e005      	b.n	801cd68 <HAL_PWREx_EnableOverDrive+0x38>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 801cd5c:	f7ff f96a 	bl	801c034 <HAL_GetTick>
 801cd60:	1b00      	subs	r0, r0, r4
 801cd62:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 801cd66:	d817      	bhi.n	801cd98 <HAL_PWREx_EnableOverDrive+0x68>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 801cd68:	686b      	ldr	r3, [r5, #4]
 801cd6a:	03da      	lsls	r2, r3, #15
 801cd6c:	d5f6      	bpl.n	801cd5c <HAL_PWREx_EnableOverDrive+0x2c>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 801cd6e:	682b      	ldr	r3, [r5, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 801cd70:	4e0c      	ldr	r6, [pc, #48]	; (801cda4 <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 801cd72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801cd76:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 801cd78:	f7ff f95c 	bl	801c034 <HAL_GetTick>
 801cd7c:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 801cd7e:	e005      	b.n	801cd8c <HAL_PWREx_EnableOverDrive+0x5c>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 801cd80:	f7ff f958 	bl	801c034 <HAL_GetTick>
 801cd84:	1b00      	subs	r0, r0, r4
 801cd86:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 801cd8a:	d805      	bhi.n	801cd98 <HAL_PWREx_EnableOverDrive+0x68>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 801cd8c:	6873      	ldr	r3, [r6, #4]
 801cd8e:	039b      	lsls	r3, r3, #14
 801cd90:	d5f6      	bpl.n	801cd80 <HAL_PWREx_EnableOverDrive+0x50>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 801cd92:	2000      	movs	r0, #0
}
 801cd94:	b002      	add	sp, #8
 801cd96:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_TIMEOUT;
 801cd98:	2003      	movs	r0, #3
}
 801cd9a:	b002      	add	sp, #8
 801cd9c:	bd70      	pop	{r4, r5, r6, pc}
 801cd9e:	bf00      	nop
 801cda0:	40023800 	.word	0x40023800
 801cda4:	40007000 	.word	0x40007000

0801cda8 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 801cda8:	2800      	cmp	r0, #0
 801cdaa:	f000 81c1 	beq.w	801d130 <HAL_RCC_OscConfig+0x388>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801cdae:	6803      	ldr	r3, [r0, #0]
{
 801cdb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801cdb4:	07dd      	lsls	r5, r3, #31
{
 801cdb6:	b082      	sub	sp, #8
 801cdb8:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801cdba:	d535      	bpl.n	801ce28 <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 801cdbc:	49ac      	ldr	r1, [pc, #688]	; (801d070 <HAL_RCC_OscConfig+0x2c8>)
 801cdbe:	688a      	ldr	r2, [r1, #8]
 801cdc0:	f002 020c 	and.w	r2, r2, #12
 801cdc4:	2a04      	cmp	r2, #4
 801cdc6:	f000 80e6 	beq.w	801cf96 <HAL_RCC_OscConfig+0x1ee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801cdca:	688a      	ldr	r2, [r1, #8]
 801cdcc:	f002 020c 	and.w	r2, r2, #12
 801cdd0:	2a08      	cmp	r2, #8
 801cdd2:	f000 80dc 	beq.w	801cf8e <HAL_RCC_OscConfig+0x1e6>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801cdd6:	6863      	ldr	r3, [r4, #4]
 801cdd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801cddc:	d010      	beq.n	801ce00 <HAL_RCC_OscConfig+0x58>
 801cdde:	2b00      	cmp	r3, #0
 801cde0:	f000 8104 	beq.w	801cfec <HAL_RCC_OscConfig+0x244>
 801cde4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801cde8:	4ba1      	ldr	r3, [pc, #644]	; (801d070 <HAL_RCC_OscConfig+0x2c8>)
 801cdea:	681a      	ldr	r2, [r3, #0]
 801cdec:	f000 8190 	beq.w	801d110 <HAL_RCC_OscConfig+0x368>
 801cdf0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 801cdf4:	601a      	str	r2, [r3, #0]
 801cdf6:	681a      	ldr	r2, [r3, #0]
 801cdf8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 801cdfc:	601a      	str	r2, [r3, #0]
 801cdfe:	e004      	b.n	801ce0a <HAL_RCC_OscConfig+0x62>
 801ce00:	4a9b      	ldr	r2, [pc, #620]	; (801d070 <HAL_RCC_OscConfig+0x2c8>)
 801ce02:	6813      	ldr	r3, [r2, #0]
 801ce04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801ce08:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801ce0a:	f7ff f913 	bl	801c034 <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801ce0e:	4e98      	ldr	r6, [pc, #608]	; (801d070 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 801ce10:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801ce12:	e005      	b.n	801ce20 <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801ce14:	f7ff f90e 	bl	801c034 <HAL_GetTick>
 801ce18:	1b40      	subs	r0, r0, r5
 801ce1a:	2864      	cmp	r0, #100	; 0x64
 801ce1c:	f200 80e2 	bhi.w	801cfe4 <HAL_RCC_OscConfig+0x23c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801ce20:	6833      	ldr	r3, [r6, #0]
 801ce22:	039a      	lsls	r2, r3, #14
 801ce24:	d5f6      	bpl.n	801ce14 <HAL_RCC_OscConfig+0x6c>
 801ce26:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801ce28:	079f      	lsls	r7, r3, #30
 801ce2a:	d529      	bpl.n	801ce80 <HAL_RCC_OscConfig+0xd8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 801ce2c:	4a90      	ldr	r2, [pc, #576]	; (801d070 <HAL_RCC_OscConfig+0x2c8>)
 801ce2e:	6891      	ldr	r1, [r2, #8]
 801ce30:	f011 0f0c 	tst.w	r1, #12
 801ce34:	f000 8082 	beq.w	801cf3c <HAL_RCC_OscConfig+0x194>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801ce38:	6891      	ldr	r1, [r2, #8]
 801ce3a:	f001 010c 	and.w	r1, r1, #12
 801ce3e:	2908      	cmp	r1, #8
 801ce40:	d079      	beq.n	801cf36 <HAL_RCC_OscConfig+0x18e>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 801ce42:	68e3      	ldr	r3, [r4, #12]
 801ce44:	2b00      	cmp	r3, #0
 801ce46:	f000 8109 	beq.w	801d05c <HAL_RCC_OscConfig+0x2b4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 801ce4a:	4b89      	ldr	r3, [pc, #548]	; (801d070 <HAL_RCC_OscConfig+0x2c8>)
 801ce4c:	681a      	ldr	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801ce4e:	461e      	mov	r6, r3
        __HAL_RCC_HSI_ENABLE();
 801ce50:	f042 0201 	orr.w	r2, r2, #1
 801ce54:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 801ce56:	f7ff f8ed 	bl	801c034 <HAL_GetTick>
 801ce5a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801ce5c:	e005      	b.n	801ce6a <HAL_RCC_OscConfig+0xc2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801ce5e:	f7ff f8e9 	bl	801c034 <HAL_GetTick>
 801ce62:	1b40      	subs	r0, r0, r5
 801ce64:	2802      	cmp	r0, #2
 801ce66:	f200 80bd 	bhi.w	801cfe4 <HAL_RCC_OscConfig+0x23c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801ce6a:	6833      	ldr	r3, [r6, #0]
 801ce6c:	0798      	lsls	r0, r3, #30
 801ce6e:	d5f6      	bpl.n	801ce5e <HAL_RCC_OscConfig+0xb6>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801ce70:	6833      	ldr	r3, [r6, #0]
 801ce72:	6922      	ldr	r2, [r4, #16]
 801ce74:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 801ce78:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801ce7c:	6033      	str	r3, [r6, #0]
 801ce7e:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801ce80:	071a      	lsls	r2, r3, #28
 801ce82:	d41f      	bmi.n	801cec4 <HAL_RCC_OscConfig+0x11c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801ce84:	075d      	lsls	r5, r3, #29
 801ce86:	d535      	bpl.n	801cef4 <HAL_RCC_OscConfig+0x14c>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 801ce88:	4b79      	ldr	r3, [pc, #484]	; (801d070 <HAL_RCC_OscConfig+0x2c8>)
 801ce8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801ce8c:	00d0      	lsls	r0, r2, #3
 801ce8e:	d573      	bpl.n	801cf78 <HAL_RCC_OscConfig+0x1d0>
  FlagStatus pwrclkchanged = RESET;
 801ce90:	2500      	movs	r5, #0
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801ce92:	4b78      	ldr	r3, [pc, #480]	; (801d074 <HAL_RCC_OscConfig+0x2cc>)
 801ce94:	681a      	ldr	r2, [r3, #0]
 801ce96:	05d1      	lsls	r1, r2, #23
 801ce98:	f140 8093 	bpl.w	801cfc2 <HAL_RCC_OscConfig+0x21a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801ce9c:	68a3      	ldr	r3, [r4, #8]
 801ce9e:	2b01      	cmp	r3, #1
 801cea0:	f000 80f4 	beq.w	801d08c <HAL_RCC_OscConfig+0x2e4>
 801cea4:	2b00      	cmp	r3, #0
 801cea6:	f000 80b8 	beq.w	801d01a <HAL_RCC_OscConfig+0x272>
 801ceaa:	2b05      	cmp	r3, #5
 801ceac:	4b70      	ldr	r3, [pc, #448]	; (801d070 <HAL_RCC_OscConfig+0x2c8>)
 801ceae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801ceb0:	f000 8136 	beq.w	801d120 <HAL_RCC_OscConfig+0x378>
 801ceb4:	f022 0201 	bic.w	r2, r2, #1
 801ceb8:	671a      	str	r2, [r3, #112]	; 0x70
 801ceba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801cebc:	f022 0204 	bic.w	r2, r2, #4
 801cec0:	671a      	str	r2, [r3, #112]	; 0x70
 801cec2:	e0e8      	b.n	801d096 <HAL_RCC_OscConfig+0x2ee>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 801cec4:	6963      	ldr	r3, [r4, #20]
 801cec6:	2b00      	cmp	r3, #0
 801cec8:	d043      	beq.n	801cf52 <HAL_RCC_OscConfig+0x1aa>
      __HAL_RCC_LSI_ENABLE();
 801ceca:	4b69      	ldr	r3, [pc, #420]	; (801d070 <HAL_RCC_OscConfig+0x2c8>)
 801cecc:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801cece:	461e      	mov	r6, r3
      __HAL_RCC_LSI_ENABLE();
 801ced0:	f042 0201 	orr.w	r2, r2, #1
 801ced4:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 801ced6:	f7ff f8ad 	bl	801c034 <HAL_GetTick>
 801ceda:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801cedc:	e004      	b.n	801cee8 <HAL_RCC_OscConfig+0x140>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801cede:	f7ff f8a9 	bl	801c034 <HAL_GetTick>
 801cee2:	1b40      	subs	r0, r0, r5
 801cee4:	2802      	cmp	r0, #2
 801cee6:	d87d      	bhi.n	801cfe4 <HAL_RCC_OscConfig+0x23c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801cee8:	6f73      	ldr	r3, [r6, #116]	; 0x74
 801ceea:	079b      	lsls	r3, r3, #30
 801ceec:	d5f7      	bpl.n	801cede <HAL_RCC_OscConfig+0x136>
 801ceee:	6823      	ldr	r3, [r4, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801cef0:	075d      	lsls	r5, r3, #29
 801cef2:	d4c9      	bmi.n	801ce88 <HAL_RCC_OscConfig+0xe0>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801cef4:	69a0      	ldr	r0, [r4, #24]
 801cef6:	b1d0      	cbz	r0, 801cf2e <HAL_RCC_OscConfig+0x186>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801cef8:	4b5d      	ldr	r3, [pc, #372]	; (801d070 <HAL_RCC_OscConfig+0x2c8>)
 801cefa:	689a      	ldr	r2, [r3, #8]
 801cefc:	f002 020c 	and.w	r2, r2, #12
 801cf00:	2a08      	cmp	r2, #8
 801cf02:	f000 80db 	beq.w	801d0bc <HAL_RCC_OscConfig+0x314>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801cf06:	681a      	ldr	r2, [r3, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801cf08:	2802      	cmp	r0, #2

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801cf0a:	461d      	mov	r5, r3
        __HAL_RCC_PLL_DISABLE();
 801cf0c:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 801cf10:	601a      	str	r2, [r3, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801cf12:	f000 810f 	beq.w	801d134 <HAL_RCC_OscConfig+0x38c>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801cf16:	f7ff f88d 	bl	801c034 <HAL_GetTick>
 801cf1a:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801cf1c:	e004      	b.n	801cf28 <HAL_RCC_OscConfig+0x180>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801cf1e:	f7ff f889 	bl	801c034 <HAL_GetTick>
 801cf22:	1b00      	subs	r0, r0, r4
 801cf24:	2802      	cmp	r0, #2
 801cf26:	d85d      	bhi.n	801cfe4 <HAL_RCC_OscConfig+0x23c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801cf28:	682b      	ldr	r3, [r5, #0]
 801cf2a:	019b      	lsls	r3, r3, #6
 801cf2c:	d4f7      	bmi.n	801cf1e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 801cf2e:	2000      	movs	r0, #0
}
 801cf30:	b002      	add	sp, #8
 801cf32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801cf36:	6852      	ldr	r2, [r2, #4]
 801cf38:	0256      	lsls	r6, r2, #9
 801cf3a:	d482      	bmi.n	801ce42 <HAL_RCC_OscConfig+0x9a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801cf3c:	4a4c      	ldr	r2, [pc, #304]	; (801d070 <HAL_RCC_OscConfig+0x2c8>)
 801cf3e:	6812      	ldr	r2, [r2, #0]
 801cf40:	0795      	lsls	r5, r2, #30
 801cf42:	d532      	bpl.n	801cfaa <HAL_RCC_OscConfig+0x202>
 801cf44:	68e2      	ldr	r2, [r4, #12]
 801cf46:	2a01      	cmp	r2, #1
 801cf48:	d02f      	beq.n	801cfaa <HAL_RCC_OscConfig+0x202>
        return HAL_ERROR;
 801cf4a:	2001      	movs	r0, #1
}
 801cf4c:	b002      	add	sp, #8
 801cf4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 801cf52:	4b47      	ldr	r3, [pc, #284]	; (801d070 <HAL_RCC_OscConfig+0x2c8>)
 801cf54:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801cf56:	461e      	mov	r6, r3
      __HAL_RCC_LSI_DISABLE();
 801cf58:	f022 0201 	bic.w	r2, r2, #1
 801cf5c:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 801cf5e:	f7ff f869 	bl	801c034 <HAL_GetTick>
 801cf62:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801cf64:	e004      	b.n	801cf70 <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801cf66:	f7ff f865 	bl	801c034 <HAL_GetTick>
 801cf6a:	1b40      	subs	r0, r0, r5
 801cf6c:	2802      	cmp	r0, #2
 801cf6e:	d839      	bhi.n	801cfe4 <HAL_RCC_OscConfig+0x23c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801cf70:	6f73      	ldr	r3, [r6, #116]	; 0x74
 801cf72:	079f      	lsls	r7, r3, #30
 801cf74:	d4f7      	bmi.n	801cf66 <HAL_RCC_OscConfig+0x1be>
 801cf76:	e7ba      	b.n	801ceee <HAL_RCC_OscConfig+0x146>
      __HAL_RCC_PWR_CLK_ENABLE();
 801cf78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 801cf7a:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 801cf7c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 801cf80:	641a      	str	r2, [r3, #64]	; 0x40
 801cf82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801cf84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801cf88:	9301      	str	r3, [sp, #4]
 801cf8a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 801cf8c:	e781      	b.n	801ce92 <HAL_RCC_OscConfig+0xea>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801cf8e:	684a      	ldr	r2, [r1, #4]
 801cf90:	0250      	lsls	r0, r2, #9
 801cf92:	f57f af20 	bpl.w	801cdd6 <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801cf96:	4a36      	ldr	r2, [pc, #216]	; (801d070 <HAL_RCC_OscConfig+0x2c8>)
 801cf98:	6812      	ldr	r2, [r2, #0]
 801cf9a:	0391      	lsls	r1, r2, #14
 801cf9c:	f57f af44 	bpl.w	801ce28 <HAL_RCC_OscConfig+0x80>
 801cfa0:	6862      	ldr	r2, [r4, #4]
 801cfa2:	2a00      	cmp	r2, #0
 801cfa4:	f47f af40 	bne.w	801ce28 <HAL_RCC_OscConfig+0x80>
 801cfa8:	e7cf      	b.n	801cf4a <HAL_RCC_OscConfig+0x1a2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801cfaa:	4931      	ldr	r1, [pc, #196]	; (801d070 <HAL_RCC_OscConfig+0x2c8>)
 801cfac:	6920      	ldr	r0, [r4, #16]
 801cfae:	680a      	ldr	r2, [r1, #0]
 801cfb0:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 801cfb4:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 801cfb8:	600a      	str	r2, [r1, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801cfba:	071a      	lsls	r2, r3, #28
 801cfbc:	f57f af62 	bpl.w	801ce84 <HAL_RCC_OscConfig+0xdc>
 801cfc0:	e780      	b.n	801cec4 <HAL_RCC_OscConfig+0x11c>
      PWR->CR1 |= PWR_CR1_DBP;
 801cfc2:	681a      	ldr	r2, [r3, #0]
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801cfc4:	461f      	mov	r7, r3
      PWR->CR1 |= PWR_CR1_DBP;
 801cfc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801cfca:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 801cfcc:	f7ff f832 	bl	801c034 <HAL_GetTick>
 801cfd0:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801cfd2:	683b      	ldr	r3, [r7, #0]
 801cfd4:	05da      	lsls	r2, r3, #23
 801cfd6:	f53f af61 	bmi.w	801ce9c <HAL_RCC_OscConfig+0xf4>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801cfda:	f7ff f82b 	bl	801c034 <HAL_GetTick>
 801cfde:	1b80      	subs	r0, r0, r6
 801cfe0:	2864      	cmp	r0, #100	; 0x64
 801cfe2:	d9f6      	bls.n	801cfd2 <HAL_RCC_OscConfig+0x22a>
            return HAL_TIMEOUT;
 801cfe4:	2003      	movs	r0, #3
}
 801cfe6:	b002      	add	sp, #8
 801cfe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801cfec:	4b20      	ldr	r3, [pc, #128]	; (801d070 <HAL_RCC_OscConfig+0x2c8>)
 801cfee:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801cff0:	461e      	mov	r6, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801cff2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 801cff6:	601a      	str	r2, [r3, #0]
 801cff8:	681a      	ldr	r2, [r3, #0]
 801cffa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 801cffe:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 801d000:	f7ff f818 	bl	801c034 <HAL_GetTick>
 801d004:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801d006:	e004      	b.n	801d012 <HAL_RCC_OscConfig+0x26a>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801d008:	f7ff f814 	bl	801c034 <HAL_GetTick>
 801d00c:	1b40      	subs	r0, r0, r5
 801d00e:	2864      	cmp	r0, #100	; 0x64
 801d010:	d8e8      	bhi.n	801cfe4 <HAL_RCC_OscConfig+0x23c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801d012:	6833      	ldr	r3, [r6, #0]
 801d014:	039b      	lsls	r3, r3, #14
 801d016:	d4f7      	bmi.n	801d008 <HAL_RCC_OscConfig+0x260>
 801d018:	e705      	b.n	801ce26 <HAL_RCC_OscConfig+0x7e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801d01a:	4b15      	ldr	r3, [pc, #84]	; (801d070 <HAL_RCC_OscConfig+0x2c8>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801d01c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801d020:	6f1a      	ldr	r2, [r3, #112]	; 0x70
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801d022:	461f      	mov	r7, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801d024:	f022 0201 	bic.w	r2, r2, #1
 801d028:	671a      	str	r2, [r3, #112]	; 0x70
 801d02a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801d02c:	f022 0204 	bic.w	r2, r2, #4
 801d030:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 801d032:	f7fe ffff 	bl	801c034 <HAL_GetTick>
 801d036:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801d038:	e004      	b.n	801d044 <HAL_RCC_OscConfig+0x29c>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801d03a:	f7fe fffb 	bl	801c034 <HAL_GetTick>
 801d03e:	1b80      	subs	r0, r0, r6
 801d040:	4540      	cmp	r0, r8
 801d042:	d8cf      	bhi.n	801cfe4 <HAL_RCC_OscConfig+0x23c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801d044:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d046:	0798      	lsls	r0, r3, #30
 801d048:	d4f7      	bmi.n	801d03a <HAL_RCC_OscConfig+0x292>
    if (pwrclkchanged == SET)
 801d04a:	2d00      	cmp	r5, #0
 801d04c:	f43f af52 	beq.w	801cef4 <HAL_RCC_OscConfig+0x14c>
      __HAL_RCC_PWR_CLK_DISABLE();
 801d050:	4a07      	ldr	r2, [pc, #28]	; (801d070 <HAL_RCC_OscConfig+0x2c8>)
 801d052:	6c13      	ldr	r3, [r2, #64]	; 0x40
 801d054:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801d058:	6413      	str	r3, [r2, #64]	; 0x40
 801d05a:	e74b      	b.n	801cef4 <HAL_RCC_OscConfig+0x14c>
        __HAL_RCC_HSI_DISABLE();
 801d05c:	4b04      	ldr	r3, [pc, #16]	; (801d070 <HAL_RCC_OscConfig+0x2c8>)
 801d05e:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801d060:	461e      	mov	r6, r3
        __HAL_RCC_HSI_DISABLE();
 801d062:	f022 0201 	bic.w	r2, r2, #1
 801d066:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 801d068:	f7fe ffe4 	bl	801c034 <HAL_GetTick>
 801d06c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801d06e:	e008      	b.n	801d082 <HAL_RCC_OscConfig+0x2da>
 801d070:	40023800 	.word	0x40023800
 801d074:	40007000 	.word	0x40007000
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801d078:	f7fe ffdc 	bl	801c034 <HAL_GetTick>
 801d07c:	1b40      	subs	r0, r0, r5
 801d07e:	2802      	cmp	r0, #2
 801d080:	d8b0      	bhi.n	801cfe4 <HAL_RCC_OscConfig+0x23c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801d082:	6833      	ldr	r3, [r6, #0]
 801d084:	0799      	lsls	r1, r3, #30
 801d086:	d4f7      	bmi.n	801d078 <HAL_RCC_OscConfig+0x2d0>
 801d088:	6823      	ldr	r3, [r4, #0]
 801d08a:	e6f9      	b.n	801ce80 <HAL_RCC_OscConfig+0xd8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801d08c:	4a42      	ldr	r2, [pc, #264]	; (801d198 <HAL_RCC_OscConfig+0x3f0>)
 801d08e:	6f13      	ldr	r3, [r2, #112]	; 0x70
 801d090:	f043 0301 	orr.w	r3, r3, #1
 801d094:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 801d096:	f7fe ffcd 	bl	801c034 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801d09a:	4f3f      	ldr	r7, [pc, #252]	; (801d198 <HAL_RCC_OscConfig+0x3f0>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801d09c:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 801d0a0:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801d0a2:	e004      	b.n	801d0ae <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801d0a4:	f7fe ffc6 	bl	801c034 <HAL_GetTick>
 801d0a8:	1b80      	subs	r0, r0, r6
 801d0aa:	4540      	cmp	r0, r8
 801d0ac:	d89a      	bhi.n	801cfe4 <HAL_RCC_OscConfig+0x23c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801d0ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d0b0:	079b      	lsls	r3, r3, #30
 801d0b2:	d5f7      	bpl.n	801d0a4 <HAL_RCC_OscConfig+0x2fc>
    if (pwrclkchanged == SET)
 801d0b4:	2d00      	cmp	r5, #0
 801d0b6:	f43f af1d 	beq.w	801cef4 <HAL_RCC_OscConfig+0x14c>
 801d0ba:	e7c9      	b.n	801d050 <HAL_RCC_OscConfig+0x2a8>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801d0bc:	2801      	cmp	r0, #1
      pll_config = RCC->PLLCFGR;
 801d0be:	685a      	ldr	r2, [r3, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801d0c0:	f43f af36 	beq.w	801cf30 <HAL_RCC_OscConfig+0x188>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801d0c4:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801d0c8:	69e1      	ldr	r1, [r4, #28]
 801d0ca:	428b      	cmp	r3, r1
 801d0cc:	f47f af3d 	bne.w	801cf4a <HAL_RCC_OscConfig+0x1a2>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 801d0d0:	f002 033f 	and.w	r3, r2, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801d0d4:	6a21      	ldr	r1, [r4, #32]
 801d0d6:	428b      	cmp	r3, r1
 801d0d8:	f47f af37 	bne.w	801cf4a <HAL_RCC_OscConfig+0x1a2>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 801d0dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 801d0e0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801d0e2:	4013      	ands	r3, r2
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 801d0e4:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 801d0e8:	f47f af2f 	bne.w	801cf4a <HAL_RCC_OscConfig+0x1a2>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 801d0ec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801d0ee:	f402 3140 	and.w	r1, r2, #196608	; 0x30000
 801d0f2:	085b      	lsrs	r3, r3, #1
 801d0f4:	3b01      	subs	r3, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 801d0f6:	ebb1 4f03 	cmp.w	r1, r3, lsl #16
 801d0fa:	f47f af26 	bne.w	801cf4a <HAL_RCC_OscConfig+0x1a2>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 801d0fe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801d100:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 801d104:	ebb2 6f03 	cmp.w	r2, r3, lsl #24
  return HAL_OK;
 801d108:	bf14      	ite	ne
 801d10a:	2001      	movne	r0, #1
 801d10c:	2000      	moveq	r0, #0
 801d10e:	e70f      	b.n	801cf30 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801d110:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 801d114:	601a      	str	r2, [r3, #0]
 801d116:	681a      	ldr	r2, [r3, #0]
 801d118:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 801d11c:	601a      	str	r2, [r3, #0]
 801d11e:	e674      	b.n	801ce0a <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801d120:	f042 0204 	orr.w	r2, r2, #4
 801d124:	671a      	str	r2, [r3, #112]	; 0x70
 801d126:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801d128:	f042 0201 	orr.w	r2, r2, #1
 801d12c:	671a      	str	r2, [r3, #112]	; 0x70
 801d12e:	e7b2      	b.n	801d096 <HAL_RCC_OscConfig+0x2ee>
    return HAL_ERROR;
 801d130:	2001      	movs	r0, #1
}
 801d132:	4770      	bx	lr
        tickstart = HAL_GetTick();
 801d134:	f7fe ff7e 	bl	801c034 <HAL_GetTick>
 801d138:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801d13a:	e005      	b.n	801d148 <HAL_RCC_OscConfig+0x3a0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801d13c:	f7fe ff7a 	bl	801c034 <HAL_GetTick>
 801d140:	1b80      	subs	r0, r0, r6
 801d142:	2802      	cmp	r0, #2
 801d144:	f63f af4e 	bhi.w	801cfe4 <HAL_RCC_OscConfig+0x23c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801d148:	682b      	ldr	r3, [r5, #0]
 801d14a:	0199      	lsls	r1, r3, #6
 801d14c:	d4f6      	bmi.n	801d13c <HAL_RCC_OscConfig+0x394>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801d14e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 801d150:	69e3      	ldr	r3, [r4, #28]
 801d152:	0852      	lsrs	r2, r2, #1
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801d154:	4e10      	ldr	r6, [pc, #64]	; (801d198 <HAL_RCC_OscConfig+0x3f0>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801d156:	e9d4 1008 	ldrd	r1, r0, [r4, #32]
 801d15a:	3a01      	subs	r2, #1
 801d15c:	430b      	orrs	r3, r1
 801d15e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801d160:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801d164:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 801d168:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 801d16c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801d170:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 801d172:	682b      	ldr	r3, [r5, #0]
 801d174:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801d178:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 801d17a:	f7fe ff5b 	bl	801c034 <HAL_GetTick>
 801d17e:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801d180:	e005      	b.n	801d18e <HAL_RCC_OscConfig+0x3e6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801d182:	f7fe ff57 	bl	801c034 <HAL_GetTick>
 801d186:	1b00      	subs	r0, r0, r4
 801d188:	2802      	cmp	r0, #2
 801d18a:	f63f af2b 	bhi.w	801cfe4 <HAL_RCC_OscConfig+0x23c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801d18e:	6833      	ldr	r3, [r6, #0]
 801d190:	019a      	lsls	r2, r3, #6
 801d192:	d5f6      	bpl.n	801d182 <HAL_RCC_OscConfig+0x3da>
 801d194:	e6cb      	b.n	801cf2e <HAL_RCC_OscConfig+0x186>
 801d196:	bf00      	nop
 801d198:	40023800 	.word	0x40023800

0801d19c <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart = 0;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 801d19c:	2800      	cmp	r0, #0
 801d19e:	f000 80b4 	beq.w	801d30a <HAL_RCC_ClockConfig+0x16e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 801d1a2:	4a61      	ldr	r2, [pc, #388]	; (801d328 <HAL_RCC_ClockConfig+0x18c>)
 801d1a4:	6813      	ldr	r3, [r2, #0]
 801d1a6:	f003 030f 	and.w	r3, r3, #15
 801d1aa:	428b      	cmp	r3, r1
{
 801d1ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d1b0:	4604      	mov	r4, r0
 801d1b2:	460d      	mov	r5, r1
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 801d1b4:	d20c      	bcs.n	801d1d0 <HAL_RCC_ClockConfig+0x34>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801d1b6:	6813      	ldr	r3, [r2, #0]
 801d1b8:	f023 030f 	bic.w	r3, r3, #15
 801d1bc:	430b      	orrs	r3, r1
 801d1be:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801d1c0:	6813      	ldr	r3, [r2, #0]
 801d1c2:	f003 030f 	and.w	r3, r3, #15
 801d1c6:	428b      	cmp	r3, r1
 801d1c8:	d002      	beq.n	801d1d0 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 801d1ca:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);

  return HAL_OK;
}
 801d1cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801d1d0:	6823      	ldr	r3, [r4, #0]
 801d1d2:	0798      	lsls	r0, r3, #30
 801d1d4:	d514      	bpl.n	801d200 <HAL_RCC_ClockConfig+0x64>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801d1d6:	0759      	lsls	r1, r3, #29
 801d1d8:	d504      	bpl.n	801d1e4 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 801d1da:	4954      	ldr	r1, [pc, #336]	; (801d32c <HAL_RCC_ClockConfig+0x190>)
 801d1dc:	688a      	ldr	r2, [r1, #8]
 801d1de:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 801d1e2:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801d1e4:	071a      	lsls	r2, r3, #28
 801d1e6:	d504      	bpl.n	801d1f2 <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 801d1e8:	4950      	ldr	r1, [pc, #320]	; (801d32c <HAL_RCC_ClockConfig+0x190>)
 801d1ea:	688a      	ldr	r2, [r1, #8]
 801d1ec:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 801d1f0:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801d1f2:	494e      	ldr	r1, [pc, #312]	; (801d32c <HAL_RCC_ClockConfig+0x190>)
 801d1f4:	68a0      	ldr	r0, [r4, #8]
 801d1f6:	688a      	ldr	r2, [r1, #8]
 801d1f8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 801d1fc:	4302      	orrs	r2, r0
 801d1fe:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801d200:	07df      	lsls	r7, r3, #31
 801d202:	d521      	bpl.n	801d248 <HAL_RCC_ClockConfig+0xac>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801d204:	6862      	ldr	r2, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801d206:	4b49      	ldr	r3, [pc, #292]	; (801d32c <HAL_RCC_ClockConfig+0x190>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801d208:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801d20a:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801d20c:	d07f      	beq.n	801d30e <HAL_RCC_ClockConfig+0x172>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801d20e:	2a02      	cmp	r2, #2
 801d210:	d078      	beq.n	801d304 <HAL_RCC_ClockConfig+0x168>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801d212:	0799      	lsls	r1, r3, #30
 801d214:	d5d9      	bpl.n	801d1ca <HAL_RCC_ClockConfig+0x2e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801d216:	4945      	ldr	r1, [pc, #276]	; (801d32c <HAL_RCC_ClockConfig+0x190>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801d218:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801d21c:	688b      	ldr	r3, [r1, #8]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801d21e:	460f      	mov	r7, r1
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801d220:	f023 0303 	bic.w	r3, r3, #3
 801d224:	4313      	orrs	r3, r2
 801d226:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 801d228:	f7fe ff04 	bl	801c034 <HAL_GetTick>
 801d22c:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801d22e:	e004      	b.n	801d23a <HAL_RCC_ClockConfig+0x9e>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801d230:	f7fe ff00 	bl	801c034 <HAL_GetTick>
 801d234:	1b80      	subs	r0, r0, r6
 801d236:	4540      	cmp	r0, r8
 801d238:	d86c      	bhi.n	801d314 <HAL_RCC_ClockConfig+0x178>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801d23a:	68bb      	ldr	r3, [r7, #8]
 801d23c:	6862      	ldr	r2, [r4, #4]
 801d23e:	f003 030c 	and.w	r3, r3, #12
 801d242:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 801d246:	d1f3      	bne.n	801d230 <HAL_RCC_ClockConfig+0x94>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 801d248:	4a37      	ldr	r2, [pc, #220]	; (801d328 <HAL_RCC_ClockConfig+0x18c>)
 801d24a:	6813      	ldr	r3, [r2, #0]
 801d24c:	f003 030f 	and.w	r3, r3, #15
 801d250:	42ab      	cmp	r3, r5
 801d252:	d909      	bls.n	801d268 <HAL_RCC_ClockConfig+0xcc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 801d254:	6813      	ldr	r3, [r2, #0]
 801d256:	f023 030f 	bic.w	r3, r3, #15
 801d25a:	432b      	orrs	r3, r5
 801d25c:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801d25e:	6813      	ldr	r3, [r2, #0]
 801d260:	f003 030f 	and.w	r3, r3, #15
 801d264:	42ab      	cmp	r3, r5
 801d266:	d1b0      	bne.n	801d1ca <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801d268:	6823      	ldr	r3, [r4, #0]
 801d26a:	075a      	lsls	r2, r3, #29
 801d26c:	d506      	bpl.n	801d27c <HAL_RCC_ClockConfig+0xe0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801d26e:	492f      	ldr	r1, [pc, #188]	; (801d32c <HAL_RCC_ClockConfig+0x190>)
 801d270:	68e0      	ldr	r0, [r4, #12]
 801d272:	688a      	ldr	r2, [r1, #8]
 801d274:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 801d278:	4302      	orrs	r2, r0
 801d27a:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801d27c:	071b      	lsls	r3, r3, #28
 801d27e:	d431      	bmi.n	801d2e4 <HAL_RCC_ClockConfig+0x148>
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 801d280:	492a      	ldr	r1, [pc, #168]	; (801d32c <HAL_RCC_ClockConfig+0x190>)
 801d282:	688b      	ldr	r3, [r1, #8]
 801d284:	f003 030c 	and.w	r3, r3, #12
 801d288:	2b04      	cmp	r3, #4
 801d28a:	d039      	beq.n	801d300 <HAL_RCC_ClockConfig+0x164>
 801d28c:	2b08      	cmp	r3, #8
 801d28e:	d118      	bne.n	801d2c2 <HAL_RCC_ClockConfig+0x126>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 801d290:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 801d292:	684b      	ldr	r3, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 801d294:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801d298:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 801d29a:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
 801d29e:	d03b      	beq.n	801d318 <HAL_RCC_ClockConfig+0x17c>
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801d2a0:	4823      	ldr	r0, [pc, #140]	; (801d330 <HAL_RCC_ClockConfig+0x194>)
 801d2a2:	f3c1 1188 	ubfx	r1, r1, #6, #9
 801d2a6:	2300      	movs	r3, #0
 801d2a8:	fba1 0100 	umull	r0, r1, r1, r0
 801d2ac:	f7e2 ffbe 	bl	800022c <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 801d2b0:	4b1e      	ldr	r3, [pc, #120]	; (801d32c <HAL_RCC_ClockConfig+0x190>)
 801d2b2:	685b      	ldr	r3, [r3, #4]
 801d2b4:	f3c3 4301 	ubfx	r3, r3, #16, #2
 801d2b8:	3301      	adds	r3, #1
 801d2ba:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 801d2bc:	fbb0 f3f3 	udiv	r3, r0, r3
    {
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
 801d2c0:	e000      	b.n	801d2c4 <HAL_RCC_ClockConfig+0x128>
      sysclockfreq = HSI_VALUE;
 801d2c2:	4b1c      	ldr	r3, [pc, #112]	; (801d334 <HAL_RCC_ClockConfig+0x198>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 801d2c4:	4a19      	ldr	r2, [pc, #100]	; (801d32c <HAL_RCC_ClockConfig+0x190>)
 801d2c6:	4c1c      	ldr	r4, [pc, #112]	; (801d338 <HAL_RCC_ClockConfig+0x19c>)
 801d2c8:	6892      	ldr	r2, [r2, #8]
  HAL_InitTick(uwTickPrio);
 801d2ca:	481c      	ldr	r0, [pc, #112]	; (801d33c <HAL_RCC_ClockConfig+0x1a0>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 801d2cc:	f3c2 1203 	ubfx	r2, r2, #4, #4
 801d2d0:	491b      	ldr	r1, [pc, #108]	; (801d340 <HAL_RCC_ClockConfig+0x1a4>)
  HAL_InitTick(uwTickPrio);
 801d2d2:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 801d2d4:	5ca2      	ldrb	r2, [r4, r2]
 801d2d6:	40d3      	lsrs	r3, r2
 801d2d8:	600b      	str	r3, [r1, #0]
  HAL_InitTick(uwTickPrio);
 801d2da:	f7e4 f81b 	bl	8001314 <HAL_InitTick>
  return HAL_OK;
 801d2de:	2000      	movs	r0, #0
}
 801d2e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 801d2e4:	4a11      	ldr	r2, [pc, #68]	; (801d32c <HAL_RCC_ClockConfig+0x190>)
 801d2e6:	6921      	ldr	r1, [r4, #16]
 801d2e8:	6893      	ldr	r3, [r2, #8]
 801d2ea:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 801d2ee:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
  switch (RCC->CFGR & RCC_CFGR_SWS)
 801d2f2:	490e      	ldr	r1, [pc, #56]	; (801d32c <HAL_RCC_ClockConfig+0x190>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 801d2f4:	6093      	str	r3, [r2, #8]
  switch (RCC->CFGR & RCC_CFGR_SWS)
 801d2f6:	688b      	ldr	r3, [r1, #8]
 801d2f8:	f003 030c 	and.w	r3, r3, #12
 801d2fc:	2b04      	cmp	r3, #4
 801d2fe:	d1c5      	bne.n	801d28c <HAL_RCC_ClockConfig+0xf0>
 801d300:	4b0b      	ldr	r3, [pc, #44]	; (801d330 <HAL_RCC_ClockConfig+0x194>)
 801d302:	e7df      	b.n	801d2c4 <HAL_RCC_ClockConfig+0x128>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801d304:	0198      	lsls	r0, r3, #6
 801d306:	d486      	bmi.n	801d216 <HAL_RCC_ClockConfig+0x7a>
 801d308:	e75f      	b.n	801d1ca <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 801d30a:	2001      	movs	r0, #1
}
 801d30c:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801d30e:	039e      	lsls	r6, r3, #14
 801d310:	d481      	bmi.n	801d216 <HAL_RCC_ClockConfig+0x7a>
 801d312:	e75a      	b.n	801d1ca <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 801d314:	2003      	movs	r0, #3
 801d316:	e759      	b.n	801d1cc <HAL_RCC_ClockConfig+0x30>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801d318:	4806      	ldr	r0, [pc, #24]	; (801d334 <HAL_RCC_ClockConfig+0x198>)
 801d31a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 801d31e:	fba1 0100 	umull	r0, r1, r1, r0
 801d322:	f7e2 ff83 	bl	800022c <__aeabi_uldivmod>
 801d326:	e7c3      	b.n	801d2b0 <HAL_RCC_ClockConfig+0x114>
 801d328:	40023c00 	.word	0x40023c00
 801d32c:	40023800 	.word	0x40023800
 801d330:	017d7840 	.word	0x017d7840
 801d334:	00f42400 	.word	0x00f42400
 801d338:	0801e1ac 	.word	0x0801e1ac
 801d33c:	20000050 	.word	0x20000050
 801d340:	20000000 	.word	0x20000000

0801d344 <HAL_RCC_EnableCSS>:
  SET_BIT(RCC->CR, RCC_CR_CSSON);
 801d344:	4a02      	ldr	r2, [pc, #8]	; (801d350 <HAL_RCC_EnableCSS+0xc>)
 801d346:	6813      	ldr	r3, [r2, #0]
 801d348:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801d34c:	6013      	str	r3, [r2, #0]
}
 801d34e:	4770      	bx	lr
 801d350:	40023800 	.word	0x40023800

0801d354 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 801d354:	4b04      	ldr	r3, [pc, #16]	; (801d368 <HAL_RCC_GetPCLK2Freq+0x14>)
 801d356:	4a05      	ldr	r2, [pc, #20]	; (801d36c <HAL_RCC_GetPCLK2Freq+0x18>)
 801d358:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 801d35a:	4905      	ldr	r1, [pc, #20]	; (801d370 <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 801d35c:	f3c3 3342 	ubfx	r3, r3, #13, #3
 801d360:	6808      	ldr	r0, [r1, #0]
 801d362:	5cd3      	ldrb	r3, [r2, r3]
}
 801d364:	40d8      	lsrs	r0, r3
 801d366:	4770      	bx	lr
 801d368:	40023800 	.word	0x40023800
 801d36c:	0801e1bc 	.word	0x0801e1bc
 801d370:	20000000 	.word	0x20000000

0801d374 <HAL_RCC_GetClockConfig>:
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 801d374:	4b0e      	ldr	r3, [pc, #56]	; (801d3b0 <HAL_RCC_GetClockConfig+0x3c>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 801d376:	220f      	movs	r2, #15
 801d378:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 801d37a:	689a      	ldr	r2, [r3, #8]
 801d37c:	f002 0203 	and.w	r2, r2, #3
 801d380:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 801d382:	689a      	ldr	r2, [r3, #8]
 801d384:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 801d388:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 801d38a:	689a      	ldr	r2, [r3, #8]
 801d38c:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 801d390:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 801d392:	689b      	ldr	r3, [r3, #8]
 801d394:	08db      	lsrs	r3, r3, #3
{
 801d396:	b410      	push	{r4}
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 801d398:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 801d39c:	4c05      	ldr	r4, [pc, #20]	; (801d3b4 <HAL_RCC_GetClockConfig+0x40>)
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 801d39e:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 801d3a0:	6823      	ldr	r3, [r4, #0]
}
 801d3a2:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 801d3a6:	f003 030f 	and.w	r3, r3, #15
 801d3aa:	600b      	str	r3, [r1, #0]
}
 801d3ac:	4770      	bx	lr
 801d3ae:	bf00      	nop
 801d3b0:	40023800 	.word	0x40023800
 801d3b4:	40023c00 	.word	0x40023c00

0801d3b8 <HAL_RCC_CSSCallback>:
__weak void HAL_RCC_CSSCallback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 801d3b8:	4770      	bx	lr
 801d3ba:	bf00      	nop

0801d3bc <HAL_RCC_NMI_IRQHandler>:
{
 801d3bc:	b508      	push	{r3, lr}
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 801d3be:	4b05      	ldr	r3, [pc, #20]	; (801d3d4 <HAL_RCC_NMI_IRQHandler+0x18>)
 801d3c0:	68db      	ldr	r3, [r3, #12]
 801d3c2:	061b      	lsls	r3, r3, #24
 801d3c4:	d400      	bmi.n	801d3c8 <HAL_RCC_NMI_IRQHandler+0xc>
}
 801d3c6:	bd08      	pop	{r3, pc}
    HAL_RCC_CSSCallback();
 801d3c8:	f7ff fff6 	bl	801d3b8 <HAL_RCC_CSSCallback>
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 801d3cc:	4b02      	ldr	r3, [pc, #8]	; (801d3d8 <HAL_RCC_NMI_IRQHandler+0x1c>)
 801d3ce:	2280      	movs	r2, #128	; 0x80
 801d3d0:	701a      	strb	r2, [r3, #0]
}
 801d3d2:	bd08      	pop	{r3, pc}
 801d3d4:	40023800 	.word	0x40023800
 801d3d8:	4002380e 	.word	0x4002380e

0801d3dc <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 801d3dc:	6803      	ldr	r3, [r0, #0]
{
 801d3de:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 801d3e2:	f013 0601 	ands.w	r6, r3, #1
{
 801d3e6:	b083      	sub	sp, #12
 801d3e8:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 801d3ea:	d00b      	beq.n	801d404 <HAL_RCCEx_PeriphCLKConfig+0x28>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 801d3ec:	4abb      	ldr	r2, [pc, #748]	; (801d6dc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 801d3ee:	6891      	ldr	r1, [r2, #8]
 801d3f0:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 801d3f4:	6091      	str	r1, [r2, #8]
 801d3f6:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801d3f8:	6891      	ldr	r1, [r2, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 801d3fa:	fab0 f680 	clz	r6, r0
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 801d3fe:	4301      	orrs	r1, r0
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 801d400:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 801d402:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 801d404:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 801d408:	d010      	beq.n	801d42c <HAL_RCCEx_PeriphCLKConfig+0x50>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 801d40a:	49b4      	ldr	r1, [pc, #720]	; (801d6dc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 801d40c:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 801d40e:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 801d412:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 801d416:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 801d41a:	ea42 0205 	orr.w	r2, r2, r5
 801d41e:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 801d422:	f000 8219 	beq.w	801d858 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 801d426:	fab5 f585 	clz	r5, r5
 801d42a:	096d      	lsrs	r5, r5, #5
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 801d42c:	02df      	lsls	r7, r3, #11
 801d42e:	d510      	bpl.n	801d452 <HAL_RCCEx_PeriphCLKConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 801d430:	48aa      	ldr	r0, [pc, #680]	; (801d6dc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 801d432:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801d434:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 801d438:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 801d43c:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 801d440:	ea42 0201 	orr.w	r2, r2, r1
 801d444:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 801d448:	f000 8209 	beq.w	801d85e <HAL_RCCEx_PeriphCLKConfig+0x482>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 801d44c:	2900      	cmp	r1, #0
 801d44e:	bf08      	it	eq
 801d450:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 801d452:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 801d456:	bf18      	it	ne
 801d458:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 801d45a:	0698      	lsls	r0, r3, #26
 801d45c:	f100 81b6 	bmi.w	801d7cc <HAL_RCCEx_PeriphCLKConfig+0x3f0>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 801d460:	06df      	lsls	r7, r3, #27
 801d462:	d50c      	bpl.n	801d47e <HAL_RCCEx_PeriphCLKConfig+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 801d464:	4a9d      	ldr	r2, [pc, #628]	; (801d6dc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 801d466:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 801d46a:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 801d46e:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 801d472:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 801d476:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801d478:	4301      	orrs	r1, r0
 801d47a:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 801d47e:	0458      	lsls	r0, r3, #17
 801d480:	d508      	bpl.n	801d494 <HAL_RCCEx_PeriphCLKConfig+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 801d482:	4996      	ldr	r1, [pc, #600]	; (801d6dc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 801d484:	6e60      	ldr	r0, [r4, #100]	; 0x64
 801d486:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 801d48a:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 801d48e:	4302      	orrs	r2, r0
 801d490:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 801d494:	0419      	lsls	r1, r3, #16
 801d496:	d508      	bpl.n	801d4aa <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 801d498:	4990      	ldr	r1, [pc, #576]	; (801d6dc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 801d49a:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 801d49c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 801d4a0:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 801d4a4:	4302      	orrs	r2, r0
 801d4a6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 801d4aa:	03da      	lsls	r2, r3, #15
 801d4ac:	d508      	bpl.n	801d4c0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 801d4ae:	498b      	ldr	r1, [pc, #556]	; (801d6dc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 801d4b0:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 801d4b2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 801d4b6:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 801d4ba:	4302      	orrs	r2, r0
 801d4bc:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 801d4c0:	039f      	lsls	r7, r3, #14
 801d4c2:	d508      	bpl.n	801d4d6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 801d4c4:	4985      	ldr	r1, [pc, #532]	; (801d6dc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 801d4c6:	6f20      	ldr	r0, [r4, #112]	; 0x70
 801d4c8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 801d4cc:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 801d4d0:	4302      	orrs	r2, r0
 801d4d2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 801d4d6:	0658      	lsls	r0, r3, #25
 801d4d8:	d508      	bpl.n	801d4ec <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 801d4da:	4980      	ldr	r1, [pc, #512]	; (801d6dc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 801d4dc:	6c60      	ldr	r0, [r4, #68]	; 0x44
 801d4de:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 801d4e2:	f022 0203 	bic.w	r2, r2, #3
 801d4e6:	4302      	orrs	r2, r0
 801d4e8:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 801d4ec:	0619      	lsls	r1, r3, #24
 801d4ee:	d508      	bpl.n	801d502 <HAL_RCCEx_PeriphCLKConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 801d4f0:	497a      	ldr	r1, [pc, #488]	; (801d6dc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 801d4f2:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 801d4f4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 801d4f8:	f022 020c 	bic.w	r2, r2, #12
 801d4fc:	4302      	orrs	r2, r0
 801d4fe:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 801d502:	05da      	lsls	r2, r3, #23
 801d504:	d508      	bpl.n	801d518 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 801d506:	4975      	ldr	r1, [pc, #468]	; (801d6dc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 801d508:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 801d50a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 801d50e:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 801d512:	4302      	orrs	r2, r0
 801d514:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 801d518:	059f      	lsls	r7, r3, #22
 801d51a:	d508      	bpl.n	801d52e <HAL_RCCEx_PeriphCLKConfig+0x152>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 801d51c:	496f      	ldr	r1, [pc, #444]	; (801d6dc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 801d51e:	6d20      	ldr	r0, [r4, #80]	; 0x50
 801d520:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 801d524:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 801d528:	4302      	orrs	r2, r0
 801d52a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 801d52e:	0558      	lsls	r0, r3, #21
 801d530:	d508      	bpl.n	801d544 <HAL_RCCEx_PeriphCLKConfig+0x168>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 801d532:	496a      	ldr	r1, [pc, #424]	; (801d6dc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 801d534:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801d536:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 801d53a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 801d53e:	4302      	orrs	r2, r0
 801d540:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 801d544:	0519      	lsls	r1, r3, #20
 801d546:	d508      	bpl.n	801d55a <HAL_RCCEx_PeriphCLKConfig+0x17e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 801d548:	4964      	ldr	r1, [pc, #400]	; (801d6dc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 801d54a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d54c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 801d550:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 801d554:	4302      	orrs	r2, r0
 801d556:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 801d55a:	04da      	lsls	r2, r3, #19
 801d55c:	d508      	bpl.n	801d570 <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 801d55e:	495f      	ldr	r1, [pc, #380]	; (801d6dc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 801d560:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 801d562:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 801d566:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 801d56a:	4302      	orrs	r2, r0
 801d56c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 801d570:	049f      	lsls	r7, r3, #18
 801d572:	d508      	bpl.n	801d586 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 801d574:	4959      	ldr	r1, [pc, #356]	; (801d6dc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 801d576:	6e20      	ldr	r0, [r4, #96]	; 0x60
 801d578:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 801d57c:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 801d580:	4302      	orrs	r2, r0
 801d582:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 801d586:	0258      	lsls	r0, r3, #9
 801d588:	d508      	bpl.n	801d59c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 801d58a:	4954      	ldr	r1, [pc, #336]	; (801d6dc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 801d58c:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 801d58e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 801d592:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 801d596:	4302      	orrs	r2, r0
 801d598:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 801d59c:	0299      	lsls	r1, r3, #10
 801d59e:	d50c      	bpl.n	801d5ba <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 801d5a0:	494e      	ldr	r1, [pc, #312]	; (801d6dc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 801d5a2:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 801d5a4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 801d5a8:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 801d5ac:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 801d5b0:	bf08      	it	eq
 801d5b2:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 801d5b4:	4302      	orrs	r2, r0
 801d5b6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 801d5ba:	f013 0f08 	tst.w	r3, #8
 801d5be:	bf18      	it	ne
 801d5c0:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 801d5c2:	035a      	lsls	r2, r3, #13
 801d5c4:	d508      	bpl.n	801d5d8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 801d5c6:	4945      	ldr	r1, [pc, #276]	; (801d6dc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 801d5c8:	6f60      	ldr	r0, [r4, #116]	; 0x74
 801d5ca:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 801d5ce:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 801d5d2:	4302      	orrs	r2, r0
 801d5d4:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 801d5d8:	021f      	lsls	r7, r3, #8
 801d5da:	d46a      	bmi.n	801d6b2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 801d5dc:	2e01      	cmp	r6, #1
 801d5de:	d001      	beq.n	801d5e4 <HAL_RCCEx_PeriphCLKConfig+0x208>
 801d5e0:	0198      	lsls	r0, r3, #6
 801d5e2:	d560      	bpl.n	801d6a6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 801d5e4:	4b3d      	ldr	r3, [pc, #244]	; (801d6dc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 801d5e6:	681a      	ldr	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 801d5e8:	461f      	mov	r7, r3
    __HAL_RCC_PLLI2S_DISABLE();
 801d5ea:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 801d5ee:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 801d5f0:	f7fe fd20 	bl	801c034 <HAL_GetTick>
 801d5f4:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 801d5f6:	e005      	b.n	801d604 <HAL_RCCEx_PeriphCLKConfig+0x228>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 801d5f8:	f7fe fd1c 	bl	801c034 <HAL_GetTick>
 801d5fc:	1b83      	subs	r3, r0, r6
 801d5fe:	2b64      	cmp	r3, #100	; 0x64
 801d600:	f200 80e0 	bhi.w	801d7c4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 801d604:	683b      	ldr	r3, [r7, #0]
 801d606:	0119      	lsls	r1, r3, #4
 801d608:	d4f6      	bmi.n	801d5f8 <HAL_RCCEx_PeriphCLKConfig+0x21c>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 801d60a:	6823      	ldr	r3, [r4, #0]
 801d60c:	07da      	lsls	r2, r3, #31
 801d60e:	d512      	bpl.n	801d636 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 801d610:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801d612:	b982      	cbnz	r2, 801d636 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 801d614:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 801d618:	f8d7 6084 	ldr.w	r6, [r7, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 801d61c:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 801d620:	6860      	ldr	r0, [r4, #4]
 801d622:	f006 6670 	and.w	r6, r6, #251658240	; 0xf000000
 801d626:	68a1      	ldr	r1, [r4, #8]
 801d628:	4332      	orrs	r2, r6
 801d62a:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 801d62e:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 801d632:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 801d636:	031e      	lsls	r6, r3, #12
 801d638:	d504      	bpl.n	801d644 <HAL_RCCEx_PeriphCLKConfig+0x268>
 801d63a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 801d63c:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 801d640:	f000 811e 	beq.w	801d880 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 801d644:	02d8      	lsls	r0, r3, #11
 801d646:	d504      	bpl.n	801d652 <HAL_RCCEx_PeriphCLKConfig+0x276>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 801d648:	6c22      	ldr	r2, [r4, #64]	; 0x40
 801d64a:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 801d64e:	f000 8117 	beq.w	801d880 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 801d652:	01d9      	lsls	r1, r3, #7
 801d654:	d511      	bpl.n	801d67a <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 801d656:	4e21      	ldr	r6, [pc, #132]	; (801d6dc <HAL_RCCEx_PeriphCLKConfig+0x300>)
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 801d658:	6860      	ldr	r0, [r4, #4]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 801d65a:	f8d6 2084 	ldr.w	r2, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 801d65e:	f8d6 7084 	ldr.w	r7, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 801d662:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 801d666:	6921      	ldr	r1, [r4, #16]
 801d668:	f007 47e0 	and.w	r7, r7, #1879048192	; 0x70000000
 801d66c:	433a      	orrs	r2, r7
 801d66e:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 801d672:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 801d676:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 801d67a:	019a      	lsls	r2, r3, #6
 801d67c:	f100 80f1 	bmi.w	801d862 <HAL_RCCEx_PeriphCLKConfig+0x486>
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 801d680:	4b16      	ldr	r3, [pc, #88]	; (801d6dc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 801d682:	681a      	ldr	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 801d684:	461f      	mov	r7, r3
    __HAL_RCC_PLLI2S_ENABLE();
 801d686:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 801d68a:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 801d68c:	f7fe fcd2 	bl	801c034 <HAL_GetTick>
 801d690:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 801d692:	e005      	b.n	801d6a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 801d694:	f7fe fcce 	bl	801c034 <HAL_GetTick>
 801d698:	1b80      	subs	r0, r0, r6
 801d69a:	2864      	cmp	r0, #100	; 0x64
 801d69c:	f200 8092 	bhi.w	801d7c4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 801d6a0:	683b      	ldr	r3, [r7, #0]
 801d6a2:	011b      	lsls	r3, r3, #4
 801d6a4:	d5f6      	bpl.n	801d694 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 801d6a6:	2d01      	cmp	r5, #1
 801d6a8:	d00e      	beq.n	801d6c8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 801d6aa:	2000      	movs	r0, #0
}
 801d6ac:	b003      	add	sp, #12
 801d6ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 801d6b2:	490a      	ldr	r1, [pc, #40]	; (801d6dc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 801d6b4:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 801d6b8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 801d6bc:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 801d6c0:	4302      	orrs	r2, r0
 801d6c2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
 801d6c6:	e789      	b.n	801d5dc <HAL_RCCEx_PeriphCLKConfig+0x200>
    __HAL_RCC_PLLSAI_DISABLE();
 801d6c8:	4b04      	ldr	r3, [pc, #16]	; (801d6dc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 801d6ca:	681a      	ldr	r2, [r3, #0]
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 801d6cc:	461e      	mov	r6, r3
    __HAL_RCC_PLLSAI_DISABLE();
 801d6ce:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 801d6d2:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 801d6d4:	f7fe fcae 	bl	801c034 <HAL_GetTick>
 801d6d8:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 801d6da:	e006      	b.n	801d6ea <HAL_RCCEx_PeriphCLKConfig+0x30e>
 801d6dc:	40023800 	.word	0x40023800
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 801d6e0:	f7fe fca8 	bl	801c034 <HAL_GetTick>
 801d6e4:	1b40      	subs	r0, r0, r5
 801d6e6:	2864      	cmp	r0, #100	; 0x64
 801d6e8:	d86c      	bhi.n	801d7c4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 801d6ea:	6833      	ldr	r3, [r6, #0]
 801d6ec:	009f      	lsls	r7, r3, #2
 801d6ee:	d4f7      	bmi.n	801d6e0 <HAL_RCCEx_PeriphCLKConfig+0x304>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 801d6f0:	6823      	ldr	r3, [r4, #0]
 801d6f2:	031d      	lsls	r5, r3, #12
 801d6f4:	f140 80fd 	bpl.w	801d8f2 <HAL_RCCEx_PeriphCLKConfig+0x516>
 801d6f8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 801d6fa:	2a00      	cmp	r2, #0
 801d6fc:	f040 80f9 	bne.w	801d8f2 <HAL_RCCEx_PeriphCLKConfig+0x516>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 801d700:	4980      	ldr	r1, [pc, #512]	; (801d904 <HAL_RCCEx_PeriphCLKConfig+0x528>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 801d702:	6965      	ldr	r5, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 801d704:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 801d708:	f8d1 6088 	ldr.w	r6, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 801d70c:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 801d710:	69a0      	ldr	r0, [r4, #24]
 801d712:	f006 46e0 	and.w	r6, r6, #1879048192	; 0x70000000
 801d716:	4332      	orrs	r2, r6
 801d718:	ea42 1285 	orr.w	r2, r2, r5, lsl #6
 801d71c:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 801d720:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 801d724:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 801d728:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801d72a:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 801d72e:	3801      	subs	r0, #1
 801d730:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 801d734:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 801d738:	0299      	lsls	r1, r3, #10
 801d73a:	d515      	bpl.n	801d768 <HAL_RCCEx_PeriphCLKConfig+0x38c>
 801d73c:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 801d73e:	f1b2 6f00 	cmp.w	r2, #134217728	; 0x8000000
 801d742:	d111      	bne.n	801d768 <HAL_RCCEx_PeriphCLKConfig+0x38c>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 801d744:	496f      	ldr	r1, [pc, #444]	; (801d904 <HAL_RCCEx_PeriphCLKConfig+0x528>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 801d746:	6965      	ldr	r5, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 801d748:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 801d74c:	f8d1 6088 	ldr.w	r6, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 801d750:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 801d754:	6a20      	ldr	r0, [r4, #32]
 801d756:	f006 46e0 	and.w	r6, r6, #1879048192	; 0x70000000
 801d75a:	4332      	orrs	r2, r6
 801d75c:	ea42 1285 	orr.w	r2, r2, r5, lsl #6
 801d760:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 801d764:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 801d768:	071a      	lsls	r2, r3, #28
 801d76a:	d519      	bpl.n	801d7a0 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 801d76c:	4a65      	ldr	r2, [pc, #404]	; (801d904 <HAL_RCCEx_PeriphCLKConfig+0x528>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 801d76e:	6965      	ldr	r5, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 801d770:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 801d774:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 801d778:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 801d77c:	69e0      	ldr	r0, [r4, #28]
 801d77e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 801d782:	430b      	orrs	r3, r1
 801d784:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 801d788:	ea43 7300 	orr.w	r3, r3, r0, lsl #28
 801d78c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 801d790:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 801d794:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801d796:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 801d79a:	430b      	orrs	r3, r1
 801d79c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 801d7a0:	4b58      	ldr	r3, [pc, #352]	; (801d904 <HAL_RCCEx_PeriphCLKConfig+0x528>)
 801d7a2:	681a      	ldr	r2, [r3, #0]
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 801d7a4:	461d      	mov	r5, r3
    __HAL_RCC_PLLSAI_ENABLE();
 801d7a6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 801d7aa:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 801d7ac:	f7fe fc42 	bl	801c034 <HAL_GetTick>
 801d7b0:	4604      	mov	r4, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 801d7b2:	682b      	ldr	r3, [r5, #0]
 801d7b4:	009b      	lsls	r3, r3, #2
 801d7b6:	f53f af78 	bmi.w	801d6aa <HAL_RCCEx_PeriphCLKConfig+0x2ce>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 801d7ba:	f7fe fc3b 	bl	801c034 <HAL_GetTick>
 801d7be:	1b00      	subs	r0, r0, r4
 801d7c0:	2864      	cmp	r0, #100	; 0x64
 801d7c2:	d9f6      	bls.n	801d7b2 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
        return HAL_TIMEOUT;
 801d7c4:	2003      	movs	r0, #3
}
 801d7c6:	b003      	add	sp, #12
 801d7c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 801d7cc:	4a4d      	ldr	r2, [pc, #308]	; (801d904 <HAL_RCCEx_PeriphCLKConfig+0x528>)
    PWR->CR1 |= PWR_CR1_DBP;
 801d7ce:	4b4e      	ldr	r3, [pc, #312]	; (801d908 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
    __HAL_RCC_PWR_CLK_ENABLE();
 801d7d0:	6c11      	ldr	r1, [r2, #64]	; 0x40
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 801d7d2:	4698      	mov	r8, r3
    __HAL_RCC_PWR_CLK_ENABLE();
 801d7d4:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 801d7d8:	6411      	str	r1, [r2, #64]	; 0x40
 801d7da:	6c12      	ldr	r2, [r2, #64]	; 0x40
 801d7dc:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 801d7e0:	9201      	str	r2, [sp, #4]
 801d7e2:	9a01      	ldr	r2, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 801d7e4:	681a      	ldr	r2, [r3, #0]
 801d7e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801d7ea:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 801d7ec:	f7fe fc22 	bl	801c034 <HAL_GetTick>
 801d7f0:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 801d7f2:	e004      	b.n	801d7fe <HAL_RCCEx_PeriphCLKConfig+0x422>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801d7f4:	f7fe fc1e 	bl	801c034 <HAL_GetTick>
 801d7f8:	1bc0      	subs	r0, r0, r7
 801d7fa:	2864      	cmp	r0, #100	; 0x64
 801d7fc:	d8e2      	bhi.n	801d7c4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 801d7fe:	f8d8 3000 	ldr.w	r3, [r8]
 801d802:	05d9      	lsls	r1, r3, #23
 801d804:	d5f6      	bpl.n	801d7f4 <HAL_RCCEx_PeriphCLKConfig+0x418>
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 801d806:	4f3f      	ldr	r7, [pc, #252]	; (801d904 <HAL_RCCEx_PeriphCLKConfig+0x528>)
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 801d808:	6b23      	ldr	r3, [r4, #48]	; 0x30
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 801d80a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 801d80c:	f403 7140 	and.w	r1, r3, #768	; 0x300
 801d810:	f412 7240 	ands.w	r2, r2, #768	; 0x300
 801d814:	d010      	beq.n	801d838 <HAL_RCCEx_PeriphCLKConfig+0x45c>
 801d816:	4291      	cmp	r1, r2
 801d818:	d00e      	beq.n	801d838 <HAL_RCCEx_PeriphCLKConfig+0x45c>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 801d81a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 801d81c:	6f38      	ldr	r0, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 801d81e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 801d822:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 801d826:	6738      	str	r0, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 801d828:	6f38      	ldr	r0, [r7, #112]	; 0x70
 801d82a:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 801d82e:	6738      	str	r0, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 801d830:	673a      	str	r2, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 801d832:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801d834:	07d2      	lsls	r2, r2, #31
 801d836:	d448      	bmi.n	801d8ca <HAL_RCCEx_PeriphCLKConfig+0x4ee>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801d838:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 801d83c:	d03c      	beq.n	801d8b8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 801d83e:	4931      	ldr	r1, [pc, #196]	; (801d904 <HAL_RCCEx_PeriphCLKConfig+0x528>)
 801d840:	688a      	ldr	r2, [r1, #8]
 801d842:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 801d846:	608a      	str	r2, [r1, #8]
 801d848:	4a2e      	ldr	r2, [pc, #184]	; (801d904 <HAL_RCCEx_PeriphCLKConfig+0x528>)
 801d84a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801d84e:	6f11      	ldr	r1, [r2, #112]	; 0x70
 801d850:	430b      	orrs	r3, r1
 801d852:	6713      	str	r3, [r2, #112]	; 0x70
 801d854:	6823      	ldr	r3, [r4, #0]
 801d856:	e603      	b.n	801d460 <HAL_RCCEx_PeriphCLKConfig+0x84>
  uint32_t pllsaiused = 0;
 801d858:	2500      	movs	r5, #0
      plli2sused = 1;
 801d85a:	2601      	movs	r6, #1
 801d85c:	e5e6      	b.n	801d42c <HAL_RCCEx_PeriphCLKConfig+0x50>
      plli2sused = 1;
 801d85e:	2601      	movs	r6, #1
 801d860:	e5f7      	b.n	801d452 <HAL_RCCEx_PeriphCLKConfig+0x76>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 801d862:	6923      	ldr	r3, [r4, #16]
 801d864:	6862      	ldr	r2, [r4, #4]
 801d866:	041b      	lsls	r3, r3, #16
 801d868:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
 801d86c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 801d870:	4a24      	ldr	r2, [pc, #144]	; (801d904 <HAL_RCCEx_PeriphCLKConfig+0x528>)
 801d872:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 801d876:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 801d87a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 801d87e:	e6ff      	b.n	801d680 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 801d880:	4e20      	ldr	r6, [pc, #128]	; (801d904 <HAL_RCCEx_PeriphCLKConfig+0x528>)
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 801d882:	6860      	ldr	r0, [r4, #4]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 801d884:	f8d6 2084 	ldr.w	r2, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 801d888:	f8d6 7084 	ldr.w	r7, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 801d88c:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 801d890:	68e1      	ldr	r1, [r4, #12]
 801d892:	f007 47e0 	and.w	r7, r7, #1879048192	; 0x70000000
 801d896:	433a      	orrs	r2, r7
 801d898:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 801d89c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 801d8a0:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 801d8a4:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
 801d8a8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801d8aa:	f021 011f 	bic.w	r1, r1, #31
 801d8ae:	3a01      	subs	r2, #1
 801d8b0:	430a      	orrs	r2, r1
 801d8b2:	f8c6 208c 	str.w	r2, [r6, #140]	; 0x8c
 801d8b6:	e6cc      	b.n	801d652 <HAL_RCCEx_PeriphCLKConfig+0x276>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801d8b8:	4812      	ldr	r0, [pc, #72]	; (801d904 <HAL_RCCEx_PeriphCLKConfig+0x528>)
 801d8ba:	4914      	ldr	r1, [pc, #80]	; (801d90c <HAL_RCCEx_PeriphCLKConfig+0x530>)
 801d8bc:	6882      	ldr	r2, [r0, #8]
 801d8be:	4019      	ands	r1, r3
 801d8c0:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 801d8c4:	430a      	orrs	r2, r1
 801d8c6:	6082      	str	r2, [r0, #8]
 801d8c8:	e7be      	b.n	801d848 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        tickstart = HAL_GetTick();
 801d8ca:	f7fe fbb3 	bl	801c034 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801d8ce:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 801d8d2:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801d8d4:	e006      	b.n	801d8e4 <HAL_RCCEx_PeriphCLKConfig+0x508>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801d8d6:	f7fe fbad 	bl	801c034 <HAL_GetTick>
 801d8da:	eba0 0008 	sub.w	r0, r0, r8
 801d8de:	4548      	cmp	r0, r9
 801d8e0:	f63f af70 	bhi.w	801d7c4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801d8e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d8e6:	079b      	lsls	r3, r3, #30
 801d8e8:	d5f5      	bpl.n	801d8d6 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 801d8ea:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801d8ec:	f403 7140 	and.w	r1, r3, #768	; 0x300
 801d8f0:	e7a2      	b.n	801d838 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 801d8f2:	02d8      	lsls	r0, r3, #11
 801d8f4:	f57f af20 	bpl.w	801d738 <HAL_RCCEx_PeriphCLKConfig+0x35c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 801d8f8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 801d8fa:	2a00      	cmp	r2, #0
 801d8fc:	f47f af1c 	bne.w	801d738 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 801d900:	e6fe      	b.n	801d700 <HAL_RCCEx_PeriphCLKConfig+0x324>
 801d902:	bf00      	nop
 801d904:	40023800 	.word	0x40023800
 801d908:	40007000 	.word	0x40007000
 801d90c:	0ffffcff 	.word	0x0ffffcff

0801d910 <HAL_SDRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 801d910:	b1f0      	cbz	r0, 801d950 <HAL_SDRAM_Init+0x40>
{   
 801d912:	b538      	push	{r3, r4, r5, lr}
  {
    return HAL_ERROR;
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 801d914:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 801d918:	460d      	mov	r5, r1
 801d91a:	4604      	mov	r4, r0
 801d91c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 801d920:	b18b      	cbz	r3, 801d946 <HAL_SDRAM_Init+0x36>
    HAL_SDRAM_MspInit(hsdram);
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 801d922:	2302      	movs	r3, #2
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 801d924:	4621      	mov	r1, r4
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 801d926:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 801d92a:	f851 0b04 	ldr.w	r0, [r1], #4
 801d92e:	f000 fb0d 	bl	801df4c <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 801d932:	4629      	mov	r1, r5
 801d934:	e9d4 0200 	ldrd	r0, r2, [r4]
 801d938:	f000 fb44 	bl	801dfc4 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 801d93c:	2301      	movs	r3, #1
  
  return HAL_OK;
 801d93e:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 801d940:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 801d944:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 801d946:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 801d94a:	f7e3 f8d3 	bl	8000af4 <HAL_SDRAM_MspInit>
 801d94e:	e7e8      	b.n	801d922 <HAL_SDRAM_Init+0x12>
    return HAL_ERROR;
 801d950:	2001      	movs	r0, #1
}
 801d952:	4770      	bx	lr

0801d954 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 801d954:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 801d956:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 801d95a:	4604      	mov	r4, r0
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 801d95c:	2b02      	cmp	r3, #2
 801d95e:	b2d8      	uxtb	r0, r3
 801d960:	d00e      	beq.n	801d980 <HAL_SDRAM_SendCommand+0x2c>
  {
    return HAL_BUSY;
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 801d962:	2302      	movs	r3, #2
 801d964:	460d      	mov	r5, r1
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 801d966:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 801d968:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 801d96c:	f000 fb78 	bl	801e060 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 801d970:	682b      	ldr	r3, [r5, #0]
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  
  return HAL_OK;  
 801d972:	2000      	movs	r0, #0
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 801d974:	2b02      	cmp	r3, #2
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 801d976:	bf0c      	ite	eq
 801d978:	2305      	moveq	r3, #5
    hsdram->State = HAL_SDRAM_STATE_READY;
 801d97a:	2301      	movne	r3, #1
 801d97c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 801d980:	bd38      	pop	{r3, r4, r5, pc}
 801d982:	bf00      	nop

0801d984 <HAL_SDRAM_SetAutoRefreshNumber>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SetAutoRefreshNumber(SDRAM_HandleTypeDef *hsdram, uint32_t AutoRefreshNumber)
{
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 801d984:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 801d988:	2b02      	cmp	r3, #2
 801d98a:	d00c      	beq.n	801d9a6 <HAL_SDRAM_SetAutoRefreshNumber+0x22>
  {
    return HAL_BUSY;
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 801d98c:	2302      	movs	r3, #2
{
 801d98e:	b510      	push	{r4, lr}
 801d990:	4604      	mov	r4, r0
  
  /* Set the Auto-Refresh number */
  FMC_SDRAM_SetAutoRefreshNumber(hsdram->Instance ,AutoRefreshNumber);
 801d992:	6800      	ldr	r0, [r0, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 801d994:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_SetAutoRefreshNumber(hsdram->Instance ,AutoRefreshNumber);
 801d998:	f000 fb78 	bl	801e08c <FMC_SDRAM_SetAutoRefreshNumber>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 801d99c:	2301      	movs	r3, #1
  
  return HAL_OK;
 801d99e:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 801d9a0:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 801d9a4:	bd10      	pop	{r4, pc}
 801d9a6:	b2d8      	uxtb	r0, r3
 801d9a8:	4770      	bx	lr
 801d9aa:	bf00      	nop

0801d9ac <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801d9ac:	2800      	cmp	r0, #0
 801d9ae:	f000 8094 	beq.w	801dada <HAL_TIM_Base_Init+0x12e>
{
 801d9b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801d9b4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 801d9b8:	4604      	mov	r4, r0
 801d9ba:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 801d9be:	2b00      	cmp	r3, #0
 801d9c0:	d07b      	beq.n	801daba <HAL_TIM_Base_Init+0x10e>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801d9c2:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 801d9c4:	2302      	movs	r3, #2
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801d9c6:	4947      	ldr	r1, [pc, #284]	; (801dae4 <HAL_TIM_Base_Init+0x138>)
 801d9c8:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->State = HAL_TIM_STATE_BUSY;
 801d9cc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801d9d0:	eba2 0101 	sub.w	r1, r2, r1
  tmpcr1 = TIMx->CR1;
 801d9d4:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801d9d6:	fab1 f181 	clz	r1, r1
 801d9da:	ea4f 1151 	mov.w	r1, r1, lsr #5
 801d9de:	d050      	beq.n	801da82 <HAL_TIM_Base_Init+0xd6>
 801d9e0:	2900      	cmp	r1, #0
 801d9e2:	d14e      	bne.n	801da82 <HAL_TIM_Base_Init+0xd6>
 801d9e4:	4d40      	ldr	r5, [pc, #256]	; (801dae8 <HAL_TIM_Base_Init+0x13c>)
 801d9e6:	4841      	ldr	r0, [pc, #260]	; (801daec <HAL_TIM_Base_Init+0x140>)
 801d9e8:	4282      	cmp	r2, r0
 801d9ea:	bf18      	it	ne
 801d9ec:	42aa      	cmpne	r2, r5
 801d9ee:	d048      	beq.n	801da82 <HAL_TIM_Base_Init+0xd6>
 801d9f0:	4f3f      	ldr	r7, [pc, #252]	; (801daf0 <HAL_TIM_Base_Init+0x144>)
 801d9f2:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 801d9f6:	1bd7      	subs	r7, r2, r7
 801d9f8:	42aa      	cmp	r2, r5
 801d9fa:	fab7 f787 	clz	r7, r7
 801d9fe:	ea4f 1757 	mov.w	r7, r7, lsr #5
 801da02:	d05f      	beq.n	801dac4 <HAL_TIM_Base_Init+0x118>
 801da04:	2f00      	cmp	r7, #0
 801da06:	d15d      	bne.n	801dac4 <HAL_TIM_Base_Init+0x118>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801da08:	4f3a      	ldr	r7, [pc, #232]	; (801daf4 <HAL_TIM_Base_Init+0x148>)
 801da0a:	483b      	ldr	r0, [pc, #236]	; (801daf8 <HAL_TIM_Base_Init+0x14c>)
 801da0c:	4282      	cmp	r2, r0
 801da0e:	bf18      	it	ne
 801da10:	42ba      	cmpne	r2, r7
 801da12:	bf0c      	ite	eq
 801da14:	2701      	moveq	r7, #1
 801da16:	2700      	movne	r7, #0
 801da18:	d061      	beq.n	801dade <HAL_TIM_Base_Init+0x132>
 801da1a:	4d38      	ldr	r5, [pc, #224]	; (801dafc <HAL_TIM_Base_Init+0x150>)
 801da1c:	f5a0 3096 	sub.w	r0, r0, #76800	; 0x12c00
 801da20:	4282      	cmp	r2, r0
 801da22:	bf18      	it	ne
 801da24:	42aa      	cmpne	r2, r5
 801da26:	d035      	beq.n	801da94 <HAL_TIM_Base_Init+0xe8>
 801da28:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 801da2c:	4282      	cmp	r2, r0
 801da2e:	d056      	beq.n	801dade <HAL_TIM_Base_Init+0x132>
 801da30:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 801da34:	4282      	cmp	r2, r0
 801da36:	d052      	beq.n	801dade <HAL_TIM_Base_Init+0x132>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801da38:	69a1      	ldr	r1, [r4, #24]
 801da3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801da3e:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801da40:	430b      	orrs	r3, r1

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801da42:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 801da44:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 801da46:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 801da48:	6291      	str	r1, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801da4a:	2301      	movs	r3, #1
  return HAL_OK;
 801da4c:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
 801da4e:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801da50:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801da54:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 801da58:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 801da5c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 801da60:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 801da64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801da68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801da6c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 801da70:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801da74:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 801da78:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 801da7c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 801da80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801da82:	4f1b      	ldr	r7, [pc, #108]	; (801daf0 <HAL_TIM_Base_Init+0x144>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801da84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 801da88:	68a5      	ldr	r5, [r4, #8]
 801da8a:	1bd7      	subs	r7, r2, r7
 801da8c:	432b      	orrs	r3, r5
 801da8e:	fab7 f787 	clz	r7, r7
 801da92:	097f      	lsrs	r7, r7, #5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801da94:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 801da96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801da9a:	69a5      	ldr	r5, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801da9c:	4303      	orrs	r3, r0
  TIMx->ARR = (uint32_t)Structure->Period ;
 801da9e:	68e6      	ldr	r6, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 801daa0:	6860      	ldr	r0, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801daa2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801daa6:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 801daa8:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 801daaa:	62d6      	str	r6, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 801daac:	6290      	str	r0, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801daae:	b909      	cbnz	r1, 801dab4 <HAL_TIM_Base_Init+0x108>
 801dab0:	2f00      	cmp	r7, #0
 801dab2:	d0ca      	beq.n	801da4a <HAL_TIM_Base_Init+0x9e>
    TIMx->RCR = Structure->RepetitionCounter;
 801dab4:	6963      	ldr	r3, [r4, #20]
 801dab6:	6313      	str	r3, [r2, #48]	; 0x30
 801dab8:	e7c7      	b.n	801da4a <HAL_TIM_Base_Init+0x9e>
    htim->Lock = HAL_UNLOCKED;
 801daba:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 801dabe:	f7e3 fcdd 	bl	800147c <HAL_TIM_Base_MspInit>
 801dac2:	e77e      	b.n	801d9c2 <HAL_TIM_Base_Init+0x16>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801dac4:	480e      	ldr	r0, [pc, #56]	; (801db00 <HAL_TIM_Base_Init+0x154>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801dac6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 801daca:	68a5      	ldr	r5, [r4, #8]
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801dacc:	4282      	cmp	r2, r0
    tmpcr1 |= Structure->CounterMode;
 801dace:	ea43 0305 	orr.w	r3, r3, r5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801dad2:	d0df      	beq.n	801da94 <HAL_TIM_Base_Init+0xe8>
 801dad4:	2f00      	cmp	r7, #0
 801dad6:	d1dd      	bne.n	801da94 <HAL_TIM_Base_Init+0xe8>
 801dad8:	e796      	b.n	801da08 <HAL_TIM_Base_Init+0x5c>
    return HAL_ERROR;
 801dada:	2001      	movs	r0, #1
}
 801dadc:	4770      	bx	lr
 801dade:	2700      	movs	r7, #0
 801dae0:	e7d8      	b.n	801da94 <HAL_TIM_Base_Init+0xe8>
 801dae2:	bf00      	nop
 801dae4:	40010000 	.word	0x40010000
 801dae8:	40000400 	.word	0x40000400
 801daec:	40000800 	.word	0x40000800
 801daf0:	40010400 	.word	0x40010400
 801daf4:	40014000 	.word	0x40014000
 801daf8:	40014400 	.word	0x40014400
 801dafc:	40014800 	.word	0x40014800
 801db00:	40000c00 	.word	0x40000c00

0801db04 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 801db04:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 801db08:	2b01      	cmp	r3, #1
 801db0a:	d141      	bne.n	801db90 <HAL_TIM_Base_Start_IT+0x8c>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801db0c:	6802      	ldr	r2, [r0, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801db0e:	4b25      	ldr	r3, [pc, #148]	; (801dba4 <HAL_TIM_Base_Start_IT+0xa0>)
 801db10:	4925      	ldr	r1, [pc, #148]	; (801dba8 <HAL_TIM_Base_Start_IT+0xa4>)
 801db12:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 801db16:	bf18      	it	ne
 801db18:	429a      	cmpne	r2, r3
{
 801db1a:	b430      	push	{r4, r5}
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801db1c:	bf0c      	ite	eq
 801db1e:	2301      	moveq	r3, #1
 801db20:	2300      	movne	r3, #0
 801db22:	4c22      	ldr	r4, [pc, #136]	; (801dbac <HAL_TIM_Base_Start_IT+0xa8>)
  htim->State = HAL_TIM_STATE_BUSY;
 801db24:	2502      	movs	r5, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801db26:	42a2      	cmp	r2, r4
 801db28:	bf08      	it	eq
 801db2a:	f043 0301 	orreq.w	r3, r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 801db2e:	f880 503d 	strb.w	r5, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801db32:	4d1f      	ldr	r5, [pc, #124]	; (801dbb0 <HAL_TIM_Base_Start_IT+0xac>)
 801db34:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
 801db38:	428a      	cmp	r2, r1
 801db3a:	bf08      	it	eq
 801db3c:	f043 0301 	orreq.w	r3, r3, #1
 801db40:	481c      	ldr	r0, [pc, #112]	; (801dbb4 <HAL_TIM_Base_Start_IT+0xb0>)
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801db42:	68d1      	ldr	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801db44:	42aa      	cmp	r2, r5
 801db46:	bf08      	it	eq
 801db48:	f043 0301 	orreq.w	r3, r3, #1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801db4c:	f041 0101 	orr.w	r1, r1, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801db50:	42a2      	cmp	r2, r4
 801db52:	bf08      	it	eq
 801db54:	f043 0301 	orreq.w	r3, r3, #1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801db58:	60d1      	str	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801db5a:	4282      	cmp	r2, r0
 801db5c:	bf08      	it	eq
 801db5e:	f043 0301 	orreq.w	r3, r3, #1
 801db62:	b933      	cbnz	r3, 801db72 <HAL_TIM_Base_Start_IT+0x6e>
 801db64:	f5a0 3094 	sub.w	r0, r0, #75776	; 0x12800
 801db68:	1a10      	subs	r0, r2, r0
 801db6a:	fab0 f080 	clz	r0, r0
 801db6e:	0940      	lsrs	r0, r0, #5
 801db70:	b198      	cbz	r0, 801db9a <HAL_TIM_Base_Start_IT+0x96>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801db72:	6891      	ldr	r1, [r2, #8]
 801db74:	4b10      	ldr	r3, [pc, #64]	; (801dbb8 <HAL_TIM_Base_Start_IT+0xb4>)
 801db76:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801db78:	2b06      	cmp	r3, #6
 801db7a:	d00b      	beq.n	801db94 <HAL_TIM_Base_Start_IT+0x90>
 801db7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801db80:	d008      	beq.n	801db94 <HAL_TIM_Base_Start_IT+0x90>
      __HAL_TIM_ENABLE(htim);
 801db82:	6813      	ldr	r3, [r2, #0]
  return HAL_OK;
 801db84:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 801db86:	f043 0301 	orr.w	r3, r3, #1
 801db8a:	6013      	str	r3, [r2, #0]
}
 801db8c:	bc30      	pop	{r4, r5}
 801db8e:	4770      	bx	lr
    return HAL_ERROR;
 801db90:	2001      	movs	r0, #1
}
 801db92:	4770      	bx	lr
  return HAL_OK;
 801db94:	2000      	movs	r0, #0
}
 801db96:	bc30      	pop	{r4, r5}
 801db98:	4770      	bx	lr
    __HAL_TIM_ENABLE(htim);
 801db9a:	6813      	ldr	r3, [r2, #0]
 801db9c:	f043 0301 	orr.w	r3, r3, #1
 801dba0:	6013      	str	r3, [r2, #0]
 801dba2:	e7f3      	b.n	801db8c <HAL_TIM_Base_Start_IT+0x88>
 801dba4:	40010000 	.word	0x40010000
 801dba8:	40000800 	.word	0x40000800
 801dbac:	40000400 	.word	0x40000400
 801dbb0:	40000c00 	.word	0x40000c00
 801dbb4:	40014000 	.word	0x40014000
 801dbb8:	00010007 	.word	0x00010007

0801dbbc <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 801dbbc:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 801dbc0:	2a01      	cmp	r2, #1
 801dbc2:	d073      	beq.n	801dcac <HAL_TIM_ConfigClockSource+0xf0>
 801dbc4:	4603      	mov	r3, r0
  htim->State = HAL_TIM_STATE_BUSY;
 801dbc6:	2202      	movs	r2, #2
  tmpsmcr = htim->Instance->SMCR;
 801dbc8:	6800      	ldr	r0, [r0, #0]
{
 801dbca:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(htim);
 801dbcc:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 801dbce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  __HAL_LOCK(htim);
 801dbd2:	f883 403c 	strb.w	r4, [r3, #60]	; 0x3c
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801dbd6:	4c4b      	ldr	r4, [pc, #300]	; (801dd04 <HAL_TIM_ConfigClockSource+0x148>)
  tmpsmcr = htim->Instance->SMCR;
 801dbd8:	6885      	ldr	r5, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 801dbda:	680a      	ldr	r2, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801dbdc:	402c      	ands	r4, r5
  switch (sClockSourceConfig->ClockSource)
 801dbde:	2a60      	cmp	r2, #96	; 0x60
  htim->Instance->SMCR = tmpsmcr;
 801dbe0:	6084      	str	r4, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 801dbe2:	d065      	beq.n	801dcb0 <HAL_TIM_ConfigClockSource+0xf4>
 801dbe4:	d831      	bhi.n	801dc4a <HAL_TIM_ConfigClockSource+0x8e>
 801dbe6:	2a40      	cmp	r2, #64	; 0x40
 801dbe8:	d048      	beq.n	801dc7c <HAL_TIM_ConfigClockSource+0xc0>
 801dbea:	d921      	bls.n	801dc30 <HAL_TIM_ConfigClockSource+0x74>
 801dbec:	2a50      	cmp	r2, #80	; 0x50
 801dbee:	d116      	bne.n	801dc1e <HAL_TIM_ConfigClockSource+0x62>
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 801dbf0:	6a06      	ldr	r6, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801dbf2:	6a05      	ldr	r5, [r0, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 801dbf4:	684c      	ldr	r4, [r1, #4]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801dbf6:	f026 060a 	bic.w	r6, r6, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801dbfa:	f025 0501 	bic.w	r5, r5, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 801dbfe:	68cf      	ldr	r7, [r1, #12]
  tmpccer |= TIM_ICPolarity;
 801dc00:	4334      	orrs	r4, r6
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801dc02:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 801dc04:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801dc06:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 801dc0a:	ea42 1207 	orr.w	r2, r2, r7, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801dc0e:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 801dc10:	6204      	str	r4, [r0, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801dc12:	6882      	ldr	r2, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801dc14:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801dc18:	f042 0257 	orr.w	r2, r2, #87	; 0x57
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801dc1c:	6082      	str	r2, [r0, #8]
  __HAL_UNLOCK(htim);
 801dc1e:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 801dc20:	2101      	movs	r1, #1
  return HAL_OK;
 801dc22:	4610      	mov	r0, r2
  htim->State = HAL_TIM_STATE_READY;
 801dc24:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 801dc28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 801dc2c:	bcf0      	pop	{r4, r5, r6, r7}
 801dc2e:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 801dc30:	2a20      	cmp	r2, #32
 801dc32:	d002      	beq.n	801dc3a <HAL_TIM_ConfigClockSource+0x7e>
 801dc34:	d91e      	bls.n	801dc74 <HAL_TIM_ConfigClockSource+0xb8>
 801dc36:	2a30      	cmp	r2, #48	; 0x30
 801dc38:	d1f1      	bne.n	801dc1e <HAL_TIM_ConfigClockSource+0x62>
  tmpsmcr = TIMx->SMCR;
 801dc3a:	6881      	ldr	r1, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 801dc3c:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801dc40:	430a      	orrs	r2, r1
 801dc42:	f042 0207 	orr.w	r2, r2, #7
  TIMx->SMCR = tmpsmcr;
 801dc46:	6082      	str	r2, [r0, #8]
}
 801dc48:	e7e9      	b.n	801dc1e <HAL_TIM_ConfigClockSource+0x62>
  switch (sClockSourceConfig->ClockSource)
 801dc4a:	2a70      	cmp	r2, #112	; 0x70
 801dc4c:	d049      	beq.n	801dce2 <HAL_TIM_ConfigClockSource+0x126>
 801dc4e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 801dc52:	d1e4      	bne.n	801dc1e <HAL_TIM_ConfigClockSource+0x62>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801dc54:	68cc      	ldr	r4, [r1, #12]
 801dc56:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 801dc5a:	6881      	ldr	r1, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801dc5c:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801dc5e:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801dc62:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 801dc66:	430a      	orrs	r2, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801dc68:	6082      	str	r2, [r0, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 801dc6a:	6882      	ldr	r2, [r0, #8]
 801dc6c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801dc70:	6082      	str	r2, [r0, #8]
      break;
 801dc72:	e7d4      	b.n	801dc1e <HAL_TIM_ConfigClockSource+0x62>
  switch (sClockSourceConfig->ClockSource)
 801dc74:	f032 0110 	bics.w	r1, r2, #16
 801dc78:	d1d1      	bne.n	801dc1e <HAL_TIM_ConfigClockSource+0x62>
 801dc7a:	e7de      	b.n	801dc3a <HAL_TIM_ConfigClockSource+0x7e>
  tmpccer = TIMx->CCER;
 801dc7c:	6a06      	ldr	r6, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801dc7e:	6a05      	ldr	r5, [r0, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 801dc80:	684c      	ldr	r4, [r1, #4]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801dc82:	f026 060a 	bic.w	r6, r6, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801dc86:	f025 0501 	bic.w	r5, r5, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 801dc8a:	68cf      	ldr	r7, [r1, #12]
  tmpccer |= TIM_ICPolarity;
 801dc8c:	4334      	orrs	r4, r6
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801dc8e:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 801dc90:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801dc92:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 801dc96:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 801dc9a:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 801dc9c:	6204      	str	r4, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 801dc9e:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 801dca0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801dca4:	f042 0247 	orr.w	r2, r2, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 801dca8:	6082      	str	r2, [r0, #8]
}
 801dcaa:	e7b8      	b.n	801dc1e <HAL_TIM_ConfigClockSource+0x62>
  __HAL_LOCK(htim);
 801dcac:	2002      	movs	r0, #2
}
 801dcae:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801dcb0:	6a04      	ldr	r4, [r0, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 801dcb2:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801dcb4:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 801dcb8:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801dcba:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 801dcbc:	6981      	ldr	r1, [r0, #24]
  tmpccer = TIMx->CCER;
 801dcbe:	6a02      	ldr	r2, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801dcc0:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801dcc4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801dcc8:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 801dccc:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 801dcd0:	6181      	str	r1, [r0, #24]
  TIMx->CCER = tmpccer;
 801dcd2:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 801dcd4:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 801dcd6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801dcda:	f042 0267 	orr.w	r2, r2, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 801dcde:	6082      	str	r2, [r0, #8]
}
 801dce0:	e79d      	b.n	801dc1e <HAL_TIM_ConfigClockSource+0x62>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801dce2:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
 801dce6:	68cc      	ldr	r4, [r1, #12]
 801dce8:	432a      	orrs	r2, r5
  tmpsmcr = TIMx->SMCR;
 801dcea:	6881      	ldr	r1, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801dcec:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801dcf0:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801dcf4:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 801dcf6:	6082      	str	r2, [r0, #8]
      tmpsmcr = htim->Instance->SMCR;
 801dcf8:	6882      	ldr	r2, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801dcfa:	f042 0277 	orr.w	r2, r2, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 801dcfe:	6082      	str	r2, [r0, #8]
      break;
 801dd00:	e78d      	b.n	801dc1e <HAL_TIM_ConfigClockSource+0x62>
 801dd02:	bf00      	nop
 801dd04:	fffe0088 	.word	0xfffe0088

0801dd08 <HAL_TIM_OC_DelayElapsedCallback>:
 801dd08:	4770      	bx	lr
 801dd0a:	bf00      	nop

0801dd0c <HAL_TIM_IC_CaptureCallback>:
 801dd0c:	4770      	bx	lr
 801dd0e:	bf00      	nop

0801dd10 <HAL_TIM_PWM_PulseFinishedCallback>:
 801dd10:	4770      	bx	lr
 801dd12:	bf00      	nop

0801dd14 <HAL_TIM_TriggerCallback>:
 801dd14:	4770      	bx	lr
 801dd16:	bf00      	nop

0801dd18 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801dd18:	6803      	ldr	r3, [r0, #0]
 801dd1a:	691a      	ldr	r2, [r3, #16]
 801dd1c:	0791      	lsls	r1, r2, #30
{
 801dd1e:	b510      	push	{r4, lr}
 801dd20:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801dd22:	d502      	bpl.n	801dd2a <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801dd24:	68da      	ldr	r2, [r3, #12]
 801dd26:	0792      	lsls	r2, r2, #30
 801dd28:	d468      	bmi.n	801ddfc <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801dd2a:	691a      	ldr	r2, [r3, #16]
 801dd2c:	0752      	lsls	r2, r2, #29
 801dd2e:	d502      	bpl.n	801dd36 <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801dd30:	68da      	ldr	r2, [r3, #12]
 801dd32:	0750      	lsls	r0, r2, #29
 801dd34:	d44f      	bmi.n	801ddd6 <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801dd36:	691a      	ldr	r2, [r3, #16]
 801dd38:	0711      	lsls	r1, r2, #28
 801dd3a:	d502      	bpl.n	801dd42 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801dd3c:	68da      	ldr	r2, [r3, #12]
 801dd3e:	0712      	lsls	r2, r2, #28
 801dd40:	d437      	bmi.n	801ddb2 <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801dd42:	691a      	ldr	r2, [r3, #16]
 801dd44:	06d0      	lsls	r0, r2, #27
 801dd46:	d502      	bpl.n	801dd4e <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801dd48:	68da      	ldr	r2, [r3, #12]
 801dd4a:	06d1      	lsls	r1, r2, #27
 801dd4c:	d41e      	bmi.n	801dd8c <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801dd4e:	691a      	ldr	r2, [r3, #16]
 801dd50:	07d2      	lsls	r2, r2, #31
 801dd52:	d502      	bpl.n	801dd5a <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801dd54:	68da      	ldr	r2, [r3, #12]
 801dd56:	07d0      	lsls	r0, r2, #31
 801dd58:	d469      	bmi.n	801de2e <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801dd5a:	691a      	ldr	r2, [r3, #16]
 801dd5c:	0611      	lsls	r1, r2, #24
 801dd5e:	d502      	bpl.n	801dd66 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801dd60:	68da      	ldr	r2, [r3, #12]
 801dd62:	0612      	lsls	r2, r2, #24
 801dd64:	d46b      	bmi.n	801de3e <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 801dd66:	691a      	ldr	r2, [r3, #16]
 801dd68:	05d0      	lsls	r0, r2, #23
 801dd6a:	d502      	bpl.n	801dd72 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801dd6c:	68da      	ldr	r2, [r3, #12]
 801dd6e:	0611      	lsls	r1, r2, #24
 801dd70:	d46d      	bmi.n	801de4e <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801dd72:	691a      	ldr	r2, [r3, #16]
 801dd74:	0652      	lsls	r2, r2, #25
 801dd76:	d502      	bpl.n	801dd7e <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801dd78:	68da      	ldr	r2, [r3, #12]
 801dd7a:	0650      	lsls	r0, r2, #25
 801dd7c:	d46f      	bmi.n	801de5e <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801dd7e:	691a      	ldr	r2, [r3, #16]
 801dd80:	0691      	lsls	r1, r2, #26
 801dd82:	d502      	bpl.n	801dd8a <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801dd84:	68da      	ldr	r2, [r3, #12]
 801dd86:	0692      	lsls	r2, r2, #26
 801dd88:	d449      	bmi.n	801de1e <HAL_TIM_IRQHandler+0x106>
}
 801dd8a:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801dd8c:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801dd90:	2208      	movs	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 801dd92:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801dd94:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801dd96:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801dd98:	69db      	ldr	r3, [r3, #28]
 801dd9a:	f413 7f40 	tst.w	r3, #768	; 0x300
 801dd9e:	d16f      	bne.n	801de80 <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801dda0:	f7ff ffb2 	bl	801dd08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801dda4:	4620      	mov	r0, r4
 801dda6:	f7ff ffb3 	bl	801dd10 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801ddaa:	2200      	movs	r2, #0
 801ddac:	6823      	ldr	r3, [r4, #0]
 801ddae:	7722      	strb	r2, [r4, #28]
 801ddb0:	e7cd      	b.n	801dd4e <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801ddb2:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801ddb6:	2204      	movs	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 801ddb8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801ddba:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801ddbc:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801ddbe:	69db      	ldr	r3, [r3, #28]
 801ddc0:	079b      	lsls	r3, r3, #30
 801ddc2:	d15a      	bne.n	801de7a <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801ddc4:	f7ff ffa0 	bl	801dd08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801ddc8:	4620      	mov	r0, r4
 801ddca:	f7ff ffa1 	bl	801dd10 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801ddce:	2200      	movs	r2, #0
 801ddd0:	6823      	ldr	r3, [r4, #0]
 801ddd2:	7722      	strb	r2, [r4, #28]
 801ddd4:	e7b5      	b.n	801dd42 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801ddd6:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801ddda:	2202      	movs	r2, #2
        HAL_TIM_IC_CaptureCallback(htim);
 801dddc:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801ddde:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801dde0:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801dde2:	699b      	ldr	r3, [r3, #24]
 801dde4:	f413 7f40 	tst.w	r3, #768	; 0x300
 801dde8:	d144      	bne.n	801de74 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801ddea:	f7ff ff8d 	bl	801dd08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801ddee:	4620      	mov	r0, r4
 801ddf0:	f7ff ff8e 	bl	801dd10 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801ddf4:	2200      	movs	r2, #0
 801ddf6:	6823      	ldr	r3, [r4, #0]
 801ddf8:	7722      	strb	r2, [r4, #28]
 801ddfa:	e79c      	b.n	801dd36 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801ddfc:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801de00:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801de02:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801de04:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801de06:	699b      	ldr	r3, [r3, #24]
 801de08:	0799      	lsls	r1, r3, #30
 801de0a:	d130      	bne.n	801de6e <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801de0c:	f7ff ff7c 	bl	801dd08 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801de10:	4620      	mov	r0, r4
 801de12:	f7ff ff7d 	bl	801dd10 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801de16:	2200      	movs	r2, #0
 801de18:	6823      	ldr	r3, [r4, #0]
 801de1a:	7722      	strb	r2, [r4, #28]
 801de1c:	e785      	b.n	801dd2a <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801de1e:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 801de22:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801de24:	611a      	str	r2, [r3, #16]
}
 801de26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 801de2a:	f000 b889 	b.w	801df40 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801de2e:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 801de32:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801de34:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 801de36:	f7e3 fa3d 	bl	80012b4 <HAL_TIM_PeriodElapsedCallback>
 801de3a:	6823      	ldr	r3, [r4, #0]
 801de3c:	e78d      	b.n	801dd5a <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801de3e:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 801de42:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801de44:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 801de46:	f000 f87d 	bl	801df44 <HAL_TIMEx_BreakCallback>
 801de4a:	6823      	ldr	r3, [r4, #0]
 801de4c:	e78b      	b.n	801dd66 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801de4e:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
 801de52:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801de54:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 801de56:	f000 f877 	bl	801df48 <HAL_TIMEx_Break2Callback>
 801de5a:	6823      	ldr	r3, [r4, #0]
 801de5c:	e789      	b.n	801dd72 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801de5e:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 801de62:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801de64:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 801de66:	f7ff ff55 	bl	801dd14 <HAL_TIM_TriggerCallback>
 801de6a:	6823      	ldr	r3, [r4, #0]
 801de6c:	e787      	b.n	801dd7e <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 801de6e:	f7ff ff4d 	bl	801dd0c <HAL_TIM_IC_CaptureCallback>
 801de72:	e7d0      	b.n	801de16 <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 801de74:	f7ff ff4a 	bl	801dd0c <HAL_TIM_IC_CaptureCallback>
 801de78:	e7bc      	b.n	801ddf4 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 801de7a:	f7ff ff47 	bl	801dd0c <HAL_TIM_IC_CaptureCallback>
 801de7e:	e7a6      	b.n	801ddce <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 801de80:	f7ff ff44 	bl	801dd0c <HAL_TIM_IC_CaptureCallback>
 801de84:	e791      	b.n	801ddaa <HAL_TIM_IRQHandler+0x92>
 801de86:	bf00      	nop

0801de88 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801de88:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 801de8c:	2b01      	cmp	r3, #1
 801de8e:	d048      	beq.n	801df22 <HAL_TIMEx_MasterConfigSynchronization+0x9a>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801de90:	4602      	mov	r2, r0
 801de92:	2002      	movs	r0, #2

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801de94:	6813      	ldr	r3, [r2, #0]
{
 801de96:	b4f0      	push	{r4, r5, r6, r7}

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 801de98:	4d23      	ldr	r5, [pc, #140]	; (801df28 <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
  htim->State = HAL_TIM_STATE_BUSY;
 801de9a:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 801de9e:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 801dea0:	6858      	ldr	r0, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 801dea2:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 801dea4:	d026      	beq.n	801def4 <HAL_TIMEx_MasterConfigSynchronization+0x6c>
 801dea6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 801deaa:	42ab      	cmp	r3, r5
 801deac:	d022      	beq.n	801def4 <HAL_TIMEx_MasterConfigSynchronization+0x6c>
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801deae:	4d1f      	ldr	r5, [pc, #124]	; (801df2c <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
  tmpcr2 &= ~TIM_CR2_MMS;
 801deb0:	f020 0070 	bic.w	r0, r0, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801deb4:	680e      	ldr	r6, [r1, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801deb6:	42ab      	cmp	r3, r5
 801deb8:	bf18      	it	ne
 801deba:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 801debe:	4f1c      	ldr	r7, [pc, #112]	; (801df30 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801dec0:	ea40 0006 	orr.w	r0, r0, r6
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801dec4:	4e1b      	ldr	r6, [pc, #108]	; (801df34 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 801dec6:	bf0c      	ite	eq
 801dec8:	2501      	moveq	r5, #1
 801deca:	2500      	movne	r5, #0
  htim->Instance->CR2 = tmpcr2;
 801decc:	6058      	str	r0, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801dece:	42bb      	cmp	r3, r7
 801ded0:	bf08      	it	eq
 801ded2:	f045 0501 	orreq.w	r5, r5, #1
 801ded6:	42b3      	cmp	r3, r6
 801ded8:	bf14      	ite	ne
 801deda:	4628      	movne	r0, r5
 801dedc:	f045 0001 	orreq.w	r0, r5, #1
 801dee0:	4d15      	ldr	r5, [pc, #84]	; (801df38 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 801dee2:	42ab      	cmp	r3, r5
 801dee4:	bf08      	it	eq
 801dee6:	f040 0001 	orreq.w	r0, r0, #1
 801deea:	b960      	cbnz	r0, 801df06 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 801deec:	4813      	ldr	r0, [pc, #76]	; (801df3c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 801deee:	4283      	cmp	r3, r0
 801def0:	d009      	beq.n	801df06 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 801def2:	e00d      	b.n	801df10 <HAL_TIMEx_MasterConfigSynchronization+0x88>
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801def4:	e9d1 5600 	ldrd	r5, r6, [r1]
    tmpcr2 &= ~TIM_CR2_MMS2;
 801def8:	f420 0070 	bic.w	r0, r0, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 801defc:	4330      	orrs	r0, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 801defe:	f020 0070 	bic.w	r0, r0, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801df02:	4328      	orrs	r0, r5
  htim->Instance->CR2 = tmpcr2;
 801df04:	6058      	str	r0, [r3, #4]
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801df06:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 801df08:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801df0c:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801df0e:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 801df10:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 801df12:	2101      	movs	r1, #1

  return HAL_OK;
 801df14:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 801df16:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 801df1a:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 801df1e:	bcf0      	pop	{r4, r5, r6, r7}
 801df20:	4770      	bx	lr
  __HAL_LOCK(htim);
 801df22:	2002      	movs	r0, #2
}
 801df24:	4770      	bx	lr
 801df26:	bf00      	nop
 801df28:	40010000 	.word	0x40010000
 801df2c:	40000400 	.word	0x40000400
 801df30:	40000800 	.word	0x40000800
 801df34:	40000c00 	.word	0x40000c00
 801df38:	40014000 	.word	0x40014000
 801df3c:	40001800 	.word	0x40001800

0801df40 <HAL_TIMEx_CommutCallback>:
 801df40:	4770      	bx	lr
 801df42:	bf00      	nop

0801df44 <HAL_TIMEx_BreakCallback>:
 801df44:	4770      	bx	lr
 801df46:	bf00      	nop

0801df48 <HAL_TIMEx_Break2Callback>:
 801df48:	4770      	bx	lr
 801df4a:	bf00      	nop

0801df4c <FMC_SDRAM_Init>:
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 801df4c:	680b      	ldr	r3, [r1, #0]
 801df4e:	2b01      	cmp	r3, #1
{
 801df50:	b4f0      	push	{r4, r5, r6, r7}
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 801df52:	d018      	beq.n	801df86 <FMC_SDRAM_Init+0x3a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 801df54:	6802      	ldr	r2, [r0, #0]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 801df56:	4b1a      	ldr	r3, [pc, #104]	; (801dfc0 <FMC_SDRAM_Init+0x74>)
 801df58:	684c      	ldr	r4, [r1, #4]
 801df5a:	4013      	ands	r3, r2
 801df5c:	698e      	ldr	r6, [r1, #24]
 801df5e:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 801df62:	4323      	orrs	r3, r4
 801df64:	690c      	ldr	r4, [r1, #16]
 801df66:	4313      	orrs	r3, r2
 801df68:	694a      	ldr	r2, [r1, #20]
 801df6a:	432b      	orrs	r3, r5
 801df6c:	69cd      	ldr	r5, [r1, #28]
 801df6e:	4323      	orrs	r3, r4
 801df70:	4313      	orrs	r3, r2
 801df72:	4333      	orrs	r3, r6
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 801df74:	e9d1 4208 	ldrd	r4, r2, [r1, #32]
 801df78:	432b      	orrs	r3, r5
 801df7a:	4323      	orrs	r3, r4
 801df7c:	4313      	orrs	r3, r2
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 801df7e:	bcf0      	pop	{r4, r5, r6, r7}
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 801df80:	6003      	str	r3, [r0, #0]
}
 801df82:	2000      	movs	r0, #0
 801df84:	4770      	bx	lr
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 801df86:	6807      	ldr	r7, [r0, #0]
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 801df88:	4b0d      	ldr	r3, [pc, #52]	; (801dfc0 <FMC_SDRAM_Init+0x74>)
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 801df8a:	6844      	ldr	r4, [r0, #4]
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 801df8c:	f427 47f8 	bic.w	r7, r7, #31744	; 0x7c00
 801df90:	684a      	ldr	r2, [r1, #4]
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 801df92:	4023      	ands	r3, r4
 801df94:	690c      	ldr	r4, [r1, #16]
 801df96:	e9d1 6502 	ldrd	r6, r5, [r1, #8]
 801df9a:	4313      	orrs	r3, r2
 801df9c:	69ca      	ldr	r2, [r1, #28]
 801df9e:	4333      	orrs	r3, r6
 801dfa0:	433a      	orrs	r2, r7
 801dfa2:	6a0e      	ldr	r6, [r1, #32]
 801dfa4:	432b      	orrs	r3, r5
 801dfa6:	694d      	ldr	r5, [r1, #20]
 801dfa8:	4332      	orrs	r2, r6
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 801dfaa:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 801dfac:	4323      	orrs	r3, r4
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 801dfae:	6989      	ldr	r1, [r1, #24]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 801dfb0:	4332      	orrs	r2, r6
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 801dfb2:	432b      	orrs	r3, r5
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 801dfb4:	6002      	str	r2, [r0, #0]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 801dfb6:	430b      	orrs	r3, r1
}
 801dfb8:	bcf0      	pop	{r4, r5, r6, r7}
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 801dfba:	6043      	str	r3, [r0, #4]
}
 801dfbc:	2000      	movs	r0, #0
 801dfbe:	4770      	bx	lr
 801dfc0:	ffff8000 	.word	0xffff8000

0801dfc4 <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 801dfc4:	2a01      	cmp	r2, #1
{
 801dfc6:	b4f0      	push	{r4, r5, r6, r7}
  if (Bank != FMC_SDRAM_BANK2) 
 801dfc8:	d021      	beq.n	801e00e <FMC_SDRAM_Timing_Init+0x4a>
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 801dfca:	684c      	ldr	r4, [r1, #4]
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 801dfcc:	6882      	ldr	r2, [r0, #8]
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 801dfce:	680d      	ldr	r5, [r1, #0]
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 801dfd0:	1e63      	subs	r3, r4, #1
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 801dfd2:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 801dfd6:	688c      	ldr	r4, [r1, #8]
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 801dfd8:	1e6e      	subs	r6, r5, #1
 801dfda:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 801dfde:	1e65      	subs	r5, r4, #1
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 801dfe0:	68cc      	ldr	r4, [r1, #12]
 801dfe2:	4333      	orrs	r3, r6
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 801dfe4:	690a      	ldr	r2, [r1, #16]
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 801dfe6:	1e66      	subs	r6, r4, #1
                       (((Timing->RPDelay)-1) << 20)             |\
 801dfe8:	694c      	ldr	r4, [r1, #20]
 801dfea:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 801dfee:	1e55      	subs	r5, r2, #1
                       (((Timing->RCDDelay)-1) << 24));
 801dff0:	698a      	ldr	r2, [r1, #24]
                       (((Timing->RPDelay)-1) << 20)             |\
 801dff2:	1e61      	subs	r1, r4, #1
 801dff4:	ea43 3306 	orr.w	r3, r3, r6, lsl #12
                       (((Timing->RCDDelay)-1) << 24));
 801dff8:	3a01      	subs	r2, #1
 801dffa:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 801dffe:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 801e002:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 801e006:	bcf0      	pop	{r4, r5, r6, r7}
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 801e008:	6083      	str	r3, [r0, #8]
}
 801e00a:	2000      	movs	r0, #0
 801e00c:	4770      	bx	lr
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 801e00e:	6885      	ldr	r5, [r0, #8]
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 801e010:	684a      	ldr	r2, [r1, #4]
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 801e012:	68c3      	ldr	r3, [r0, #12]
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 801e014:	680c      	ldr	r4, [r1, #0]
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 801e016:	1e56      	subs	r6, r2, #1
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 801e018:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 801e01c:	4a0f      	ldr	r2, [pc, #60]	; (801e05c <FMC_SDRAM_Timing_Init+0x98>)
 801e01e:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
 801e022:	402a      	ands	r2, r5
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 801e024:	1e66      	subs	r6, r4, #1
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 801e026:	68cd      	ldr	r5, [r1, #12]
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 801e028:	688c      	ldr	r4, [r1, #8]
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 801e02a:	1e6f      	subs	r7, r5, #1
 801e02c:	4333      	orrs	r3, r6
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 801e02e:	690d      	ldr	r5, [r1, #16]
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 801e030:	1e66      	subs	r6, r4, #1
                        (((Timing->RPDelay)-1) << 20)); 
 801e032:	694c      	ldr	r4, [r1, #20]
 801e034:	ea42 3207 	orr.w	r2, r2, r7, lsl #12
                       (((Timing->RCDDelay)-1) << 24));   
 801e038:	6989      	ldr	r1, [r1, #24]
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 801e03a:	3d01      	subs	r5, #1
 801e03c:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
                        (((Timing->RPDelay)-1) << 20)); 
 801e040:	3c01      	subs	r4, #1
                       (((Timing->RCDDelay)-1) << 24));   
 801e042:	3901      	subs	r1, #1
 801e044:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 801e048:	ea42 5204 	orr.w	r2, r2, r4, lsl #20
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 801e04c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 801e050:	6082      	str	r2, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 801e052:	60c3      	str	r3, [r0, #12]
}
 801e054:	2000      	movs	r0, #0
 801e056:	bcf0      	pop	{r4, r5, r6, r7}
 801e058:	4770      	bx	lr
 801e05a:	bf00      	nop
 801e05c:	ff0f0fff 	.word	0xff0f0fff

0801e060 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{ 
 801e060:	b470      	push	{r4, r5, r6}
 801e062:	4602      	mov	r2, r0
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 801e064:	68ce      	ldr	r6, [r1, #12]
 801e066:	4c08      	ldr	r4, [pc, #32]	; (801e088 <FMC_SDRAM_SendCommand+0x28>)
             FMC_SDCMR_NRFS | FMC_SDCMR_MRD), ((Command->CommandMode) | 
             (Command->CommandTarget) | (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
             ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  
  return HAL_OK;  
}
 801e068:	2000      	movs	r0, #0
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 801e06a:	e9d1 3500 	ldrd	r3, r5, [r1]
 801e06e:	6889      	ldr	r1, [r1, #8]
 801e070:	432b      	orrs	r3, r5
 801e072:	6915      	ldr	r5, [r2, #16]
 801e074:	3901      	subs	r1, #1
 801e076:	ea43 2346 	orr.w	r3, r3, r6, lsl #9
 801e07a:	402c      	ands	r4, r5
 801e07c:	4323      	orrs	r3, r4
 801e07e:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
}
 801e082:	bc70      	pop	{r4, r5, r6}
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 801e084:	6113      	str	r3, [r2, #16]
}
 801e086:	4770      	bx	lr
 801e088:	ffc00000 	.word	0xffc00000

0801e08c <FMC_SDRAM_SetAutoRefreshNumber>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  AutoRefreshNumber Specifies the auto Refresh number.       
  * @retval None
  */
HAL_StatusTypeDef FMC_SDRAM_SetAutoRefreshNumber(FMC_SDRAM_TypeDef *Device, uint32_t AutoRefreshNumber)
{
 801e08c:	4603      	mov	r3, r0
  
  /* Set the Auto-refresh number in command register */
  Device->SDCMR |= (AutoRefreshNumber << 5); 

  return HAL_OK;  
}
 801e08e:	2000      	movs	r0, #0
  Device->SDCMR |= (AutoRefreshNumber << 5); 
 801e090:	691a      	ldr	r2, [r3, #16]
 801e092:	ea42 1141 	orr.w	r1, r2, r1, lsl #5
 801e096:	6119      	str	r1, [r3, #16]
}
 801e098:	4770      	bx	lr
 801e09a:	bf00      	nop

0801e09c <__cxa_guard_acquire>:
 801e09c:	6803      	ldr	r3, [r0, #0]
 801e09e:	07db      	lsls	r3, r3, #31
 801e0a0:	d406      	bmi.n	801e0b0 <__cxa_guard_acquire+0x14>
 801e0a2:	7843      	ldrb	r3, [r0, #1]
 801e0a4:	b103      	cbz	r3, 801e0a8 <__cxa_guard_acquire+0xc>
 801e0a6:	deff      	udf	#255	; 0xff
 801e0a8:	2301      	movs	r3, #1
 801e0aa:	7043      	strb	r3, [r0, #1]
 801e0ac:	4618      	mov	r0, r3
 801e0ae:	4770      	bx	lr
 801e0b0:	2000      	movs	r0, #0
 801e0b2:	4770      	bx	lr

0801e0b4 <__cxa_guard_release>:
 801e0b4:	2301      	movs	r3, #1
 801e0b6:	6003      	str	r3, [r0, #0]
 801e0b8:	4770      	bx	lr
	...

0801e0bc <__libc_init_array>:
 801e0bc:	b570      	push	{r4, r5, r6, lr}
 801e0be:	4d0d      	ldr	r5, [pc, #52]	; (801e0f4 <__libc_init_array+0x38>)
 801e0c0:	4c0d      	ldr	r4, [pc, #52]	; (801e0f8 <__libc_init_array+0x3c>)
 801e0c2:	1b64      	subs	r4, r4, r5
 801e0c4:	10a4      	asrs	r4, r4, #2
 801e0c6:	2600      	movs	r6, #0
 801e0c8:	42a6      	cmp	r6, r4
 801e0ca:	d109      	bne.n	801e0e0 <__libc_init_array+0x24>
 801e0cc:	4d0b      	ldr	r5, [pc, #44]	; (801e0fc <__libc_init_array+0x40>)
 801e0ce:	4c0c      	ldr	r4, [pc, #48]	; (801e100 <__libc_init_array+0x44>)
 801e0d0:	f000 f850 	bl	801e174 <_init>
 801e0d4:	1b64      	subs	r4, r4, r5
 801e0d6:	10a4      	asrs	r4, r4, #2
 801e0d8:	2600      	movs	r6, #0
 801e0da:	42a6      	cmp	r6, r4
 801e0dc:	d105      	bne.n	801e0ea <__libc_init_array+0x2e>
 801e0de:	bd70      	pop	{r4, r5, r6, pc}
 801e0e0:	f855 3b04 	ldr.w	r3, [r5], #4
 801e0e4:	4798      	blx	r3
 801e0e6:	3601      	adds	r6, #1
 801e0e8:	e7ee      	b.n	801e0c8 <__libc_init_array+0xc>
 801e0ea:	f855 3b04 	ldr.w	r3, [r5], #4
 801e0ee:	4798      	blx	r3
 801e0f0:	3601      	adds	r6, #1
 801e0f2:	e7f2      	b.n	801e0da <__libc_init_array+0x1e>
 801e0f4:	080218bc 	.word	0x080218bc
 801e0f8:	080218bc 	.word	0x080218bc
 801e0fc:	080218bc 	.word	0x080218bc
 801e100:	080218c4 	.word	0x080218c4

0801e104 <memcmp>:
 801e104:	b530      	push	{r4, r5, lr}
 801e106:	3901      	subs	r1, #1
 801e108:	2400      	movs	r4, #0
 801e10a:	42a2      	cmp	r2, r4
 801e10c:	d101      	bne.n	801e112 <memcmp+0xe>
 801e10e:	2000      	movs	r0, #0
 801e110:	e005      	b.n	801e11e <memcmp+0x1a>
 801e112:	5d03      	ldrb	r3, [r0, r4]
 801e114:	3401      	adds	r4, #1
 801e116:	5d0d      	ldrb	r5, [r1, r4]
 801e118:	42ab      	cmp	r3, r5
 801e11a:	d0f6      	beq.n	801e10a <memcmp+0x6>
 801e11c:	1b58      	subs	r0, r3, r5
 801e11e:	bd30      	pop	{r4, r5, pc}

0801e120 <memmove>:
 801e120:	4288      	cmp	r0, r1
 801e122:	b510      	push	{r4, lr}
 801e124:	eb01 0402 	add.w	r4, r1, r2
 801e128:	d902      	bls.n	801e130 <memmove+0x10>
 801e12a:	4284      	cmp	r4, r0
 801e12c:	4623      	mov	r3, r4
 801e12e:	d807      	bhi.n	801e140 <memmove+0x20>
 801e130:	1e43      	subs	r3, r0, #1
 801e132:	42a1      	cmp	r1, r4
 801e134:	d008      	beq.n	801e148 <memmove+0x28>
 801e136:	f811 2b01 	ldrb.w	r2, [r1], #1
 801e13a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801e13e:	e7f8      	b.n	801e132 <memmove+0x12>
 801e140:	4402      	add	r2, r0
 801e142:	4601      	mov	r1, r0
 801e144:	428a      	cmp	r2, r1
 801e146:	d100      	bne.n	801e14a <memmove+0x2a>
 801e148:	bd10      	pop	{r4, pc}
 801e14a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801e14e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801e152:	e7f7      	b.n	801e144 <memmove+0x24>

0801e154 <memset>:
 801e154:	4402      	add	r2, r0
 801e156:	4603      	mov	r3, r0
 801e158:	4293      	cmp	r3, r2
 801e15a:	d100      	bne.n	801e15e <memset+0xa>
 801e15c:	4770      	bx	lr
 801e15e:	f803 1b01 	strb.w	r1, [r3], #1
 801e162:	e7f9      	b.n	801e158 <memset+0x4>

0801e164 <strcpy>:
 801e164:	4603      	mov	r3, r0
 801e166:	f811 2b01 	ldrb.w	r2, [r1], #1
 801e16a:	f803 2b01 	strb.w	r2, [r3], #1
 801e16e:	2a00      	cmp	r2, #0
 801e170:	d1f9      	bne.n	801e166 <strcpy+0x2>
 801e172:	4770      	bx	lr

0801e174 <_init>:
 801e174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e176:	bf00      	nop
 801e178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e17a:	bc08      	pop	{r3}
 801e17c:	469e      	mov	lr, r3
 801e17e:	4770      	bx	lr

0801e180 <_fini>:
 801e180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e182:	bf00      	nop
 801e184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e186:	bc08      	pop	{r3}
 801e188:	469e      	mov	lr, r3
 801e18a:	4770      	bx	lr
