
SD_Card_File_System.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00024d78  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004aa4  08024f48  08024f48  00034f48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080299ec  080299ec  00040248  2**0
                  CONTENTS
  4 .ARM          00000008  080299ec  080299ec  000399ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080299f4  080299f4  00040248  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  080299f4  080299f4  000399f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   0000000c  08029a04  08029a04  00039a04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000248  20000000  08029a10  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ad50  20000248  08029c58  00040248  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000af98  08029c58  0004af98  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040248  2**0
                  CONTENTS, READONLY
 12 .debug_info   00148420  00000000  00000000  00040278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0001d526  00000000  00000000  00188698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00065946  00000000  00000000  001a5bbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003898  00000000  00000000  0020b508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 0000d970  00000000  00000000  0020eda0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000203bb  00000000  00000000  0021c710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000aaa6b  00000000  00000000  0023cacb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0012f9d0  00000000  00000000  002e7536  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00416f06  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000bd60  00000000  00000000  00416f5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000248 	.word	0x20000248
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08024f30 	.word	0x08024f30

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000024c 	.word	0x2000024c
 800020c:	08024f30 	.word	0x08024f30

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strcmp>:
 80002b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002b8:	2a01      	cmp	r2, #1
 80002ba:	bf28      	it	cs
 80002bc:	429a      	cmpcs	r2, r3
 80002be:	d0f7      	beq.n	80002b0 <strcmp>
 80002c0:	1ad0      	subs	r0, r2, r3
 80002c2:	4770      	bx	lr

080002c4 <strlen>:
 80002c4:	4603      	mov	r3, r0
 80002c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002ca:	2a00      	cmp	r2, #0
 80002cc:	d1fb      	bne.n	80002c6 <strlen+0x2>
 80002ce:	1a18      	subs	r0, r3, r0
 80002d0:	3801      	subs	r0, #1
 80002d2:	4770      	bx	lr

080002d4 <__aeabi_drsub>:
 80002d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d8:	e002      	b.n	80002e0 <__adddf3>
 80002da:	bf00      	nop

080002dc <__aeabi_dsub>:
 80002dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002e0 <__adddf3>:
 80002e0:	b530      	push	{r4, r5, lr}
 80002e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ea:	ea94 0f05 	teq	r4, r5
 80002ee:	bf08      	it	eq
 80002f0:	ea90 0f02 	teqeq	r0, r2
 80002f4:	bf1f      	itttt	ne
 80002f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000302:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000306:	f000 80e2 	beq.w	80004ce <__adddf3+0x1ee>
 800030a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000312:	bfb8      	it	lt
 8000314:	426d      	neglt	r5, r5
 8000316:	dd0c      	ble.n	8000332 <__adddf3+0x52>
 8000318:	442c      	add	r4, r5
 800031a:	ea80 0202 	eor.w	r2, r0, r2
 800031e:	ea81 0303 	eor.w	r3, r1, r3
 8000322:	ea82 0000 	eor.w	r0, r2, r0
 8000326:	ea83 0101 	eor.w	r1, r3, r1
 800032a:	ea80 0202 	eor.w	r2, r0, r2
 800032e:	ea81 0303 	eor.w	r3, r1, r3
 8000332:	2d36      	cmp	r5, #54	; 0x36
 8000334:	bf88      	it	hi
 8000336:	bd30      	pophi	{r4, r5, pc}
 8000338:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800033c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000340:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000344:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x70>
 800034a:	4240      	negs	r0, r0
 800034c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000350:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000354:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000358:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800035c:	d002      	beq.n	8000364 <__adddf3+0x84>
 800035e:	4252      	negs	r2, r2
 8000360:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000364:	ea94 0f05 	teq	r4, r5
 8000368:	f000 80a7 	beq.w	80004ba <__adddf3+0x1da>
 800036c:	f1a4 0401 	sub.w	r4, r4, #1
 8000370:	f1d5 0e20 	rsbs	lr, r5, #32
 8000374:	db0d      	blt.n	8000392 <__adddf3+0xb2>
 8000376:	fa02 fc0e 	lsl.w	ip, r2, lr
 800037a:	fa22 f205 	lsr.w	r2, r2, r5
 800037e:	1880      	adds	r0, r0, r2
 8000380:	f141 0100 	adc.w	r1, r1, #0
 8000384:	fa03 f20e 	lsl.w	r2, r3, lr
 8000388:	1880      	adds	r0, r0, r2
 800038a:	fa43 f305 	asr.w	r3, r3, r5
 800038e:	4159      	adcs	r1, r3
 8000390:	e00e      	b.n	80003b0 <__adddf3+0xd0>
 8000392:	f1a5 0520 	sub.w	r5, r5, #32
 8000396:	f10e 0e20 	add.w	lr, lr, #32
 800039a:	2a01      	cmp	r2, #1
 800039c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003a0:	bf28      	it	cs
 80003a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	18c0      	adds	r0, r0, r3
 80003ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b4:	d507      	bpl.n	80003c6 <__adddf3+0xe6>
 80003b6:	f04f 0e00 	mov.w	lr, #0
 80003ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80003be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003ca:	d31b      	bcc.n	8000404 <__adddf3+0x124>
 80003cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003d0:	d30c      	bcc.n	80003ec <__adddf3+0x10c>
 80003d2:	0849      	lsrs	r1, r1, #1
 80003d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003dc:	f104 0401 	add.w	r4, r4, #1
 80003e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e8:	f080 809a 	bcs.w	8000520 <__adddf3+0x240>
 80003ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003f0:	bf08      	it	eq
 80003f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f6:	f150 0000 	adcs.w	r0, r0, #0
 80003fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fe:	ea41 0105 	orr.w	r1, r1, r5
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000408:	4140      	adcs	r0, r0
 800040a:	eb41 0101 	adc.w	r1, r1, r1
 800040e:	3c01      	subs	r4, #1
 8000410:	bf28      	it	cs
 8000412:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000416:	d2e9      	bcs.n	80003ec <__adddf3+0x10c>
 8000418:	f091 0f00 	teq	r1, #0
 800041c:	bf04      	itt	eq
 800041e:	4601      	moveq	r1, r0
 8000420:	2000      	moveq	r0, #0
 8000422:	fab1 f381 	clz	r3, r1
 8000426:	bf08      	it	eq
 8000428:	3320      	addeq	r3, #32
 800042a:	f1a3 030b 	sub.w	r3, r3, #11
 800042e:	f1b3 0220 	subs.w	r2, r3, #32
 8000432:	da0c      	bge.n	800044e <__adddf3+0x16e>
 8000434:	320c      	adds	r2, #12
 8000436:	dd08      	ble.n	800044a <__adddf3+0x16a>
 8000438:	f102 0c14 	add.w	ip, r2, #20
 800043c:	f1c2 020c 	rsb	r2, r2, #12
 8000440:	fa01 f00c 	lsl.w	r0, r1, ip
 8000444:	fa21 f102 	lsr.w	r1, r1, r2
 8000448:	e00c      	b.n	8000464 <__adddf3+0x184>
 800044a:	f102 0214 	add.w	r2, r2, #20
 800044e:	bfd8      	it	le
 8000450:	f1c2 0c20 	rsble	ip, r2, #32
 8000454:	fa01 f102 	lsl.w	r1, r1, r2
 8000458:	fa20 fc0c 	lsr.w	ip, r0, ip
 800045c:	bfdc      	itt	le
 800045e:	ea41 010c 	orrle.w	r1, r1, ip
 8000462:	4090      	lslle	r0, r2
 8000464:	1ae4      	subs	r4, r4, r3
 8000466:	bfa2      	ittt	ge
 8000468:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800046c:	4329      	orrge	r1, r5
 800046e:	bd30      	popge	{r4, r5, pc}
 8000470:	ea6f 0404 	mvn.w	r4, r4
 8000474:	3c1f      	subs	r4, #31
 8000476:	da1c      	bge.n	80004b2 <__adddf3+0x1d2>
 8000478:	340c      	adds	r4, #12
 800047a:	dc0e      	bgt.n	800049a <__adddf3+0x1ba>
 800047c:	f104 0414 	add.w	r4, r4, #20
 8000480:	f1c4 0220 	rsb	r2, r4, #32
 8000484:	fa20 f004 	lsr.w	r0, r0, r4
 8000488:	fa01 f302 	lsl.w	r3, r1, r2
 800048c:	ea40 0003 	orr.w	r0, r0, r3
 8000490:	fa21 f304 	lsr.w	r3, r1, r4
 8000494:	ea45 0103 	orr.w	r1, r5, r3
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	f1c4 040c 	rsb	r4, r4, #12
 800049e:	f1c4 0220 	rsb	r2, r4, #32
 80004a2:	fa20 f002 	lsr.w	r0, r0, r2
 80004a6:	fa01 f304 	lsl.w	r3, r1, r4
 80004aa:	ea40 0003 	orr.w	r0, r0, r3
 80004ae:	4629      	mov	r1, r5
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	fa21 f004 	lsr.w	r0, r1, r4
 80004b6:	4629      	mov	r1, r5
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	f094 0f00 	teq	r4, #0
 80004be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004c2:	bf06      	itte	eq
 80004c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c8:	3401      	addeq	r4, #1
 80004ca:	3d01      	subne	r5, #1
 80004cc:	e74e      	b.n	800036c <__adddf3+0x8c>
 80004ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004d2:	bf18      	it	ne
 80004d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d8:	d029      	beq.n	800052e <__adddf3+0x24e>
 80004da:	ea94 0f05 	teq	r4, r5
 80004de:	bf08      	it	eq
 80004e0:	ea90 0f02 	teqeq	r0, r2
 80004e4:	d005      	beq.n	80004f2 <__adddf3+0x212>
 80004e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ea:	bf04      	itt	eq
 80004ec:	4619      	moveq	r1, r3
 80004ee:	4610      	moveq	r0, r2
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	ea91 0f03 	teq	r1, r3
 80004f6:	bf1e      	ittt	ne
 80004f8:	2100      	movne	r1, #0
 80004fa:	2000      	movne	r0, #0
 80004fc:	bd30      	popne	{r4, r5, pc}
 80004fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000502:	d105      	bne.n	8000510 <__adddf3+0x230>
 8000504:	0040      	lsls	r0, r0, #1
 8000506:	4149      	adcs	r1, r1
 8000508:	bf28      	it	cs
 800050a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050e:	bd30      	pop	{r4, r5, pc}
 8000510:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000514:	bf3c      	itt	cc
 8000516:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800051a:	bd30      	popcc	{r4, r5, pc}
 800051c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000520:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000524:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000528:	f04f 0000 	mov.w	r0, #0
 800052c:	bd30      	pop	{r4, r5, pc}
 800052e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000532:	bf1a      	itte	ne
 8000534:	4619      	movne	r1, r3
 8000536:	4610      	movne	r0, r2
 8000538:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800053c:	bf1c      	itt	ne
 800053e:	460b      	movne	r3, r1
 8000540:	4602      	movne	r2, r0
 8000542:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000546:	bf06      	itte	eq
 8000548:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800054c:	ea91 0f03 	teqeq	r1, r3
 8000550:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	bf00      	nop

08000558 <__aeabi_ui2d>:
 8000558:	f090 0f00 	teq	r0, #0
 800055c:	bf04      	itt	eq
 800055e:	2100      	moveq	r1, #0
 8000560:	4770      	bxeq	lr
 8000562:	b530      	push	{r4, r5, lr}
 8000564:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000568:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056c:	f04f 0500 	mov.w	r5, #0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e750      	b.n	8000418 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_i2d>:
 8000578:	f090 0f00 	teq	r0, #0
 800057c:	bf04      	itt	eq
 800057e:	2100      	moveq	r1, #0
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000588:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800058c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000590:	bf48      	it	mi
 8000592:	4240      	negmi	r0, r0
 8000594:	f04f 0100 	mov.w	r1, #0
 8000598:	e73e      	b.n	8000418 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_f2d>:
 800059c:	0042      	lsls	r2, r0, #1
 800059e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005aa:	bf1f      	itttt	ne
 80005ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b8:	4770      	bxne	lr
 80005ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005be:	bf08      	it	eq
 80005c0:	4770      	bxeq	lr
 80005c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c6:	bf04      	itt	eq
 80005c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005cc:	4770      	bxeq	lr
 80005ce:	b530      	push	{r4, r5, lr}
 80005d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005dc:	e71c      	b.n	8000418 <__adddf3+0x138>
 80005de:	bf00      	nop

080005e0 <__aeabi_ul2d>:
 80005e0:	ea50 0201 	orrs.w	r2, r0, r1
 80005e4:	bf08      	it	eq
 80005e6:	4770      	bxeq	lr
 80005e8:	b530      	push	{r4, r5, lr}
 80005ea:	f04f 0500 	mov.w	r5, #0
 80005ee:	e00a      	b.n	8000606 <__aeabi_l2d+0x16>

080005f0 <__aeabi_l2d>:
 80005f0:	ea50 0201 	orrs.w	r2, r0, r1
 80005f4:	bf08      	it	eq
 80005f6:	4770      	bxeq	lr
 80005f8:	b530      	push	{r4, r5, lr}
 80005fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fe:	d502      	bpl.n	8000606 <__aeabi_l2d+0x16>
 8000600:	4240      	negs	r0, r0
 8000602:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000606:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800060a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000612:	f43f aed8 	beq.w	80003c6 <__adddf3+0xe6>
 8000616:	f04f 0203 	mov.w	r2, #3
 800061a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061e:	bf18      	it	ne
 8000620:	3203      	addne	r2, #3
 8000622:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000626:	bf18      	it	ne
 8000628:	3203      	addne	r2, #3
 800062a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062e:	f1c2 0320 	rsb	r3, r2, #32
 8000632:	fa00 fc03 	lsl.w	ip, r0, r3
 8000636:	fa20 f002 	lsr.w	r0, r0, r2
 800063a:	fa01 fe03 	lsl.w	lr, r1, r3
 800063e:	ea40 000e 	orr.w	r0, r0, lr
 8000642:	fa21 f102 	lsr.w	r1, r1, r2
 8000646:	4414      	add	r4, r2
 8000648:	e6bd      	b.n	80003c6 <__adddf3+0xe6>
 800064a:	bf00      	nop

0800064c <__aeabi_dmul>:
 800064c:	b570      	push	{r4, r5, r6, lr}
 800064e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000652:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000656:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800065a:	bf1d      	ittte	ne
 800065c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000660:	ea94 0f0c 	teqne	r4, ip
 8000664:	ea95 0f0c 	teqne	r5, ip
 8000668:	f000 f8de 	bleq	8000828 <__aeabi_dmul+0x1dc>
 800066c:	442c      	add	r4, r5
 800066e:	ea81 0603 	eor.w	r6, r1, r3
 8000672:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000676:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800067a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067e:	bf18      	it	ne
 8000680:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800068c:	d038      	beq.n	8000700 <__aeabi_dmul+0xb4>
 800068e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000692:	f04f 0500 	mov.w	r5, #0
 8000696:	fbe1 e502 	umlal	lr, r5, r1, r2
 800069a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069e:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006a2:	f04f 0600 	mov.w	r6, #0
 80006a6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006aa:	f09c 0f00 	teq	ip, #0
 80006ae:	bf18      	it	ne
 80006b0:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006bc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006c0:	d204      	bcs.n	80006cc <__aeabi_dmul+0x80>
 80006c2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c6:	416d      	adcs	r5, r5
 80006c8:	eb46 0606 	adc.w	r6, r6, r6
 80006cc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006d0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006dc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006e0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e4:	bf88      	it	hi
 80006e6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ea:	d81e      	bhi.n	800072a <__aeabi_dmul+0xde>
 80006ec:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006f0:	bf08      	it	eq
 80006f2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f6:	f150 0000 	adcs.w	r0, r0, #0
 80006fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fe:	bd70      	pop	{r4, r5, r6, pc}
 8000700:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000704:	ea46 0101 	orr.w	r1, r6, r1
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000714:	bfc2      	ittt	gt
 8000716:	ebd4 050c 	rsbsgt	r5, r4, ip
 800071a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071e:	bd70      	popgt	{r4, r5, r6, pc}
 8000720:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000724:	f04f 0e00 	mov.w	lr, #0
 8000728:	3c01      	subs	r4, #1
 800072a:	f300 80ab 	bgt.w	8000884 <__aeabi_dmul+0x238>
 800072e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000732:	bfde      	ittt	le
 8000734:	2000      	movle	r0, #0
 8000736:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800073a:	bd70      	pople	{r4, r5, r6, pc}
 800073c:	f1c4 0400 	rsb	r4, r4, #0
 8000740:	3c20      	subs	r4, #32
 8000742:	da35      	bge.n	80007b0 <__aeabi_dmul+0x164>
 8000744:	340c      	adds	r4, #12
 8000746:	dc1b      	bgt.n	8000780 <__aeabi_dmul+0x134>
 8000748:	f104 0414 	add.w	r4, r4, #20
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f305 	lsl.w	r3, r0, r5
 8000754:	fa20 f004 	lsr.w	r0, r0, r4
 8000758:	fa01 f205 	lsl.w	r2, r1, r5
 800075c:	ea40 0002 	orr.w	r0, r0, r2
 8000760:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000764:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	fa21 f604 	lsr.w	r6, r1, r4
 8000770:	eb42 0106 	adc.w	r1, r2, r6
 8000774:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000778:	bf08      	it	eq
 800077a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077e:	bd70      	pop	{r4, r5, r6, pc}
 8000780:	f1c4 040c 	rsb	r4, r4, #12
 8000784:	f1c4 0520 	rsb	r5, r4, #32
 8000788:	fa00 f304 	lsl.w	r3, r0, r4
 800078c:	fa20 f005 	lsr.w	r0, r0, r5
 8000790:	fa01 f204 	lsl.w	r2, r1, r4
 8000794:	ea40 0002 	orr.w	r0, r0, r2
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007a0:	f141 0100 	adc.w	r1, r1, #0
 80007a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a8:	bf08      	it	eq
 80007aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ae:	bd70      	pop	{r4, r5, r6, pc}
 80007b0:	f1c4 0520 	rsb	r5, r4, #32
 80007b4:	fa00 f205 	lsl.w	r2, r0, r5
 80007b8:	ea4e 0e02 	orr.w	lr, lr, r2
 80007bc:	fa20 f304 	lsr.w	r3, r0, r4
 80007c0:	fa01 f205 	lsl.w	r2, r1, r5
 80007c4:	ea43 0302 	orr.w	r3, r3, r2
 80007c8:	fa21 f004 	lsr.w	r0, r1, r4
 80007cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d0:	fa21 f204 	lsr.w	r2, r1, r4
 80007d4:	ea20 0002 	bic.w	r0, r0, r2
 80007d8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007e0:	bf08      	it	eq
 80007e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e6:	bd70      	pop	{r4, r5, r6, pc}
 80007e8:	f094 0f00 	teq	r4, #0
 80007ec:	d10f      	bne.n	800080e <__aeabi_dmul+0x1c2>
 80007ee:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007f2:	0040      	lsls	r0, r0, #1
 80007f4:	eb41 0101 	adc.w	r1, r1, r1
 80007f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007fc:	bf08      	it	eq
 80007fe:	3c01      	subeq	r4, #1
 8000800:	d0f7      	beq.n	80007f2 <__aeabi_dmul+0x1a6>
 8000802:	ea41 0106 	orr.w	r1, r1, r6
 8000806:	f095 0f00 	teq	r5, #0
 800080a:	bf18      	it	ne
 800080c:	4770      	bxne	lr
 800080e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000812:	0052      	lsls	r2, r2, #1
 8000814:	eb43 0303 	adc.w	r3, r3, r3
 8000818:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800081c:	bf08      	it	eq
 800081e:	3d01      	subeq	r5, #1
 8000820:	d0f7      	beq.n	8000812 <__aeabi_dmul+0x1c6>
 8000822:	ea43 0306 	orr.w	r3, r3, r6
 8000826:	4770      	bx	lr
 8000828:	ea94 0f0c 	teq	r4, ip
 800082c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000830:	bf18      	it	ne
 8000832:	ea95 0f0c 	teqne	r5, ip
 8000836:	d00c      	beq.n	8000852 <__aeabi_dmul+0x206>
 8000838:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800083c:	bf18      	it	ne
 800083e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000842:	d1d1      	bne.n	80007e8 <__aeabi_dmul+0x19c>
 8000844:	ea81 0103 	eor.w	r1, r1, r3
 8000848:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000856:	bf06      	itte	eq
 8000858:	4610      	moveq	r0, r2
 800085a:	4619      	moveq	r1, r3
 800085c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000860:	d019      	beq.n	8000896 <__aeabi_dmul+0x24a>
 8000862:	ea94 0f0c 	teq	r4, ip
 8000866:	d102      	bne.n	800086e <__aeabi_dmul+0x222>
 8000868:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800086c:	d113      	bne.n	8000896 <__aeabi_dmul+0x24a>
 800086e:	ea95 0f0c 	teq	r5, ip
 8000872:	d105      	bne.n	8000880 <__aeabi_dmul+0x234>
 8000874:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000878:	bf1c      	itt	ne
 800087a:	4610      	movne	r0, r2
 800087c:	4619      	movne	r1, r3
 800087e:	d10a      	bne.n	8000896 <__aeabi_dmul+0x24a>
 8000880:	ea81 0103 	eor.w	r1, r1, r3
 8000884:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000888:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800088c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000890:	f04f 0000 	mov.w	r0, #0
 8000894:	bd70      	pop	{r4, r5, r6, pc}
 8000896:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800089a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089e:	bd70      	pop	{r4, r5, r6, pc}

080008a0 <__aeabi_ddiv>:
 80008a0:	b570      	push	{r4, r5, r6, lr}
 80008a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ae:	bf1d      	ittte	ne
 80008b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b4:	ea94 0f0c 	teqne	r4, ip
 80008b8:	ea95 0f0c 	teqne	r5, ip
 80008bc:	f000 f8a7 	bleq	8000a0e <__aeabi_ddiv+0x16e>
 80008c0:	eba4 0405 	sub.w	r4, r4, r5
 80008c4:	ea81 0e03 	eor.w	lr, r1, r3
 80008c8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008d0:	f000 8088 	beq.w	80009e4 <__aeabi_ddiv+0x144>
 80008d4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008dc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008e0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008ec:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008f0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f8:	429d      	cmp	r5, r3
 80008fa:	bf08      	it	eq
 80008fc:	4296      	cmpeq	r6, r2
 80008fe:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000902:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000906:	d202      	bcs.n	800090e <__aeabi_ddiv+0x6e>
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	1ab6      	subs	r6, r6, r2
 8000910:	eb65 0503 	sbc.w	r5, r5, r3
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000922:	ebb6 0e02 	subs.w	lr, r6, r2
 8000926:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092a:	bf22      	ittt	cs
 800092c:	1ab6      	subcs	r6, r6, r2
 800092e:	4675      	movcs	r5, lr
 8000930:	ea40 000c 	orrcs.w	r0, r0, ip
 8000934:	085b      	lsrs	r3, r3, #1
 8000936:	ea4f 0232 	mov.w	r2, r2, rrx
 800093a:	ebb6 0e02 	subs.w	lr, r6, r2
 800093e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000942:	bf22      	ittt	cs
 8000944:	1ab6      	subcs	r6, r6, r2
 8000946:	4675      	movcs	r5, lr
 8000948:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800094c:	085b      	lsrs	r3, r3, #1
 800094e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000952:	ebb6 0e02 	subs.w	lr, r6, r2
 8000956:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095a:	bf22      	ittt	cs
 800095c:	1ab6      	subcs	r6, r6, r2
 800095e:	4675      	movcs	r5, lr
 8000960:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000964:	085b      	lsrs	r3, r3, #1
 8000966:	ea4f 0232 	mov.w	r2, r2, rrx
 800096a:	ebb6 0e02 	subs.w	lr, r6, r2
 800096e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000972:	bf22      	ittt	cs
 8000974:	1ab6      	subcs	r6, r6, r2
 8000976:	4675      	movcs	r5, lr
 8000978:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800097c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000980:	d018      	beq.n	80009b4 <__aeabi_ddiv+0x114>
 8000982:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000986:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800098a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000992:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000996:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800099a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099e:	d1c0      	bne.n	8000922 <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	d10b      	bne.n	80009be <__aeabi_ddiv+0x11e>
 80009a6:	ea41 0100 	orr.w	r1, r1, r0
 80009aa:	f04f 0000 	mov.w	r0, #0
 80009ae:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009b2:	e7b6      	b.n	8000922 <__aeabi_ddiv+0x82>
 80009b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b8:	bf04      	itt	eq
 80009ba:	4301      	orreq	r1, r0
 80009bc:	2000      	moveq	r0, #0
 80009be:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009c2:	bf88      	it	hi
 80009c4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c8:	f63f aeaf 	bhi.w	800072a <__aeabi_dmul+0xde>
 80009cc:	ebb5 0c03 	subs.w	ip, r5, r3
 80009d0:	bf04      	itt	eq
 80009d2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009da:	f150 0000 	adcs.w	r0, r0, #0
 80009de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009e2:	bd70      	pop	{r4, r5, r6, pc}
 80009e4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009ec:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009f0:	bfc2      	ittt	gt
 80009f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009fa:	bd70      	popgt	{r4, r5, r6, pc}
 80009fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a00:	f04f 0e00 	mov.w	lr, #0
 8000a04:	3c01      	subs	r4, #1
 8000a06:	e690      	b.n	800072a <__aeabi_dmul+0xde>
 8000a08:	ea45 0e06 	orr.w	lr, r5, r6
 8000a0c:	e68d      	b.n	800072a <__aeabi_dmul+0xde>
 8000a0e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a12:	ea94 0f0c 	teq	r4, ip
 8000a16:	bf08      	it	eq
 8000a18:	ea95 0f0c 	teqeq	r5, ip
 8000a1c:	f43f af3b 	beq.w	8000896 <__aeabi_dmul+0x24a>
 8000a20:	ea94 0f0c 	teq	r4, ip
 8000a24:	d10a      	bne.n	8000a3c <__aeabi_ddiv+0x19c>
 8000a26:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a2a:	f47f af34 	bne.w	8000896 <__aeabi_dmul+0x24a>
 8000a2e:	ea95 0f0c 	teq	r5, ip
 8000a32:	f47f af25 	bne.w	8000880 <__aeabi_dmul+0x234>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e72c      	b.n	8000896 <__aeabi_dmul+0x24a>
 8000a3c:	ea95 0f0c 	teq	r5, ip
 8000a40:	d106      	bne.n	8000a50 <__aeabi_ddiv+0x1b0>
 8000a42:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a46:	f43f aefd 	beq.w	8000844 <__aeabi_dmul+0x1f8>
 8000a4a:	4610      	mov	r0, r2
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	e722      	b.n	8000896 <__aeabi_dmul+0x24a>
 8000a50:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a54:	bf18      	it	ne
 8000a56:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a5a:	f47f aec5 	bne.w	80007e8 <__aeabi_dmul+0x19c>
 8000a5e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a62:	f47f af0d 	bne.w	8000880 <__aeabi_dmul+0x234>
 8000a66:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a6a:	f47f aeeb 	bne.w	8000844 <__aeabi_dmul+0x1f8>
 8000a6e:	e712      	b.n	8000896 <__aeabi_dmul+0x24a>

08000a70 <__gedf2>:
 8000a70:	f04f 3cff 	mov.w	ip, #4294967295
 8000a74:	e006      	b.n	8000a84 <__cmpdf2+0x4>
 8000a76:	bf00      	nop

08000a78 <__ledf2>:
 8000a78:	f04f 0c01 	mov.w	ip, #1
 8000a7c:	e002      	b.n	8000a84 <__cmpdf2+0x4>
 8000a7e:	bf00      	nop

08000a80 <__cmpdf2>:
 8000a80:	f04f 0c01 	mov.w	ip, #1
 8000a84:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	bf18      	it	ne
 8000a96:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a9a:	d01b      	beq.n	8000ad4 <__cmpdf2+0x54>
 8000a9c:	b001      	add	sp, #4
 8000a9e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aa2:	bf0c      	ite	eq
 8000aa4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa8:	ea91 0f03 	teqne	r1, r3
 8000aac:	bf02      	ittt	eq
 8000aae:	ea90 0f02 	teqeq	r0, r2
 8000ab2:	2000      	moveq	r0, #0
 8000ab4:	4770      	bxeq	lr
 8000ab6:	f110 0f00 	cmn.w	r0, #0
 8000aba:	ea91 0f03 	teq	r1, r3
 8000abe:	bf58      	it	pl
 8000ac0:	4299      	cmppl	r1, r3
 8000ac2:	bf08      	it	eq
 8000ac4:	4290      	cmpeq	r0, r2
 8000ac6:	bf2c      	ite	cs
 8000ac8:	17d8      	asrcs	r0, r3, #31
 8000aca:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ace:	f040 0001 	orr.w	r0, r0, #1
 8000ad2:	4770      	bx	lr
 8000ad4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__cmpdf2+0x64>
 8000ade:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ae2:	d107      	bne.n	8000af4 <__cmpdf2+0x74>
 8000ae4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d1d6      	bne.n	8000a9c <__cmpdf2+0x1c>
 8000aee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000af2:	d0d3      	beq.n	8000a9c <__cmpdf2+0x1c>
 8000af4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <__aeabi_cdrcmple>:
 8000afc:	4684      	mov	ip, r0
 8000afe:	4610      	mov	r0, r2
 8000b00:	4662      	mov	r2, ip
 8000b02:	468c      	mov	ip, r1
 8000b04:	4619      	mov	r1, r3
 8000b06:	4663      	mov	r3, ip
 8000b08:	e000      	b.n	8000b0c <__aeabi_cdcmpeq>
 8000b0a:	bf00      	nop

08000b0c <__aeabi_cdcmpeq>:
 8000b0c:	b501      	push	{r0, lr}
 8000b0e:	f7ff ffb7 	bl	8000a80 <__cmpdf2>
 8000b12:	2800      	cmp	r0, #0
 8000b14:	bf48      	it	mi
 8000b16:	f110 0f00 	cmnmi.w	r0, #0
 8000b1a:	bd01      	pop	{r0, pc}

08000b1c <__aeabi_dcmpeq>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff fff4 	bl	8000b0c <__aeabi_cdcmpeq>
 8000b24:	bf0c      	ite	eq
 8000b26:	2001      	moveq	r0, #1
 8000b28:	2000      	movne	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmplt>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffea 	bl	8000b0c <__aeabi_cdcmpeq>
 8000b38:	bf34      	ite	cc
 8000b3a:	2001      	movcc	r0, #1
 8000b3c:	2000      	movcs	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmple>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffe0 	bl	8000b0c <__aeabi_cdcmpeq>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpge>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffce 	bl	8000afc <__aeabi_cdrcmple>
 8000b60:	bf94      	ite	ls
 8000b62:	2001      	movls	r0, #1
 8000b64:	2000      	movhi	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpgt>:
 8000b6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b70:	f7ff ffc4 	bl	8000afc <__aeabi_cdrcmple>
 8000b74:	bf34      	ite	cc
 8000b76:	2001      	movcc	r0, #1
 8000b78:	2000      	movcs	r0, #0
 8000b7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7e:	bf00      	nop

08000b80 <__aeabi_dcmpun>:
 8000b80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b88:	d102      	bne.n	8000b90 <__aeabi_dcmpun+0x10>
 8000b8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8e:	d10a      	bne.n	8000ba6 <__aeabi_dcmpun+0x26>
 8000b90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b98:	d102      	bne.n	8000ba0 <__aeabi_dcmpun+0x20>
 8000b9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9e:	d102      	bne.n	8000ba6 <__aeabi_dcmpun+0x26>
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	f04f 0001 	mov.w	r0, #1
 8000baa:	4770      	bx	lr

08000bac <__aeabi_d2iz>:
 8000bac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb4:	d215      	bcs.n	8000be2 <__aeabi_d2iz+0x36>
 8000bb6:	d511      	bpl.n	8000bdc <__aeabi_d2iz+0x30>
 8000bb8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bbc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc0:	d912      	bls.n	8000be8 <__aeabi_d2iz+0x3c>
 8000bc2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bce:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bd2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd6:	bf18      	it	ne
 8000bd8:	4240      	negne	r0, r0
 8000bda:	4770      	bx	lr
 8000bdc:	f04f 0000 	mov.w	r0, #0
 8000be0:	4770      	bx	lr
 8000be2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be6:	d105      	bne.n	8000bf4 <__aeabi_d2iz+0x48>
 8000be8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	bf08      	it	eq
 8000bee:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bf2:	4770      	bx	lr
 8000bf4:	f04f 0000 	mov.w	r0, #0
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop

08000bfc <__aeabi_uldivmod>:
 8000bfc:	b953      	cbnz	r3, 8000c14 <__aeabi_uldivmod+0x18>
 8000bfe:	b94a      	cbnz	r2, 8000c14 <__aeabi_uldivmod+0x18>
 8000c00:	2900      	cmp	r1, #0
 8000c02:	bf08      	it	eq
 8000c04:	2800      	cmpeq	r0, #0
 8000c06:	bf1c      	itt	ne
 8000c08:	f04f 31ff 	movne.w	r1, #4294967295
 8000c0c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c10:	f000 b96e 	b.w	8000ef0 <__aeabi_idiv0>
 8000c14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c1c:	f000 f806 	bl	8000c2c <__udivmoddi4>
 8000c20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c28:	b004      	add	sp, #16
 8000c2a:	4770      	bx	lr

08000c2c <__udivmoddi4>:
 8000c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c30:	9d08      	ldr	r5, [sp, #32]
 8000c32:	4604      	mov	r4, r0
 8000c34:	468c      	mov	ip, r1
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	f040 8083 	bne.w	8000d42 <__udivmoddi4+0x116>
 8000c3c:	428a      	cmp	r2, r1
 8000c3e:	4617      	mov	r7, r2
 8000c40:	d947      	bls.n	8000cd2 <__udivmoddi4+0xa6>
 8000c42:	fab2 f282 	clz	r2, r2
 8000c46:	b142      	cbz	r2, 8000c5a <__udivmoddi4+0x2e>
 8000c48:	f1c2 0020 	rsb	r0, r2, #32
 8000c4c:	fa24 f000 	lsr.w	r0, r4, r0
 8000c50:	4091      	lsls	r1, r2
 8000c52:	4097      	lsls	r7, r2
 8000c54:	ea40 0c01 	orr.w	ip, r0, r1
 8000c58:	4094      	lsls	r4, r2
 8000c5a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c5e:	0c23      	lsrs	r3, r4, #16
 8000c60:	fbbc f6f8 	udiv	r6, ip, r8
 8000c64:	fa1f fe87 	uxth.w	lr, r7
 8000c68:	fb08 c116 	mls	r1, r8, r6, ip
 8000c6c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c70:	fb06 f10e 	mul.w	r1, r6, lr
 8000c74:	4299      	cmp	r1, r3
 8000c76:	d909      	bls.n	8000c8c <__udivmoddi4+0x60>
 8000c78:	18fb      	adds	r3, r7, r3
 8000c7a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c7e:	f080 8119 	bcs.w	8000eb4 <__udivmoddi4+0x288>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 8116 	bls.w	8000eb4 <__udivmoddi4+0x288>
 8000c88:	3e02      	subs	r6, #2
 8000c8a:	443b      	add	r3, r7
 8000c8c:	1a5b      	subs	r3, r3, r1
 8000c8e:	b2a4      	uxth	r4, r4
 8000c90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c94:	fb08 3310 	mls	r3, r8, r0, r3
 8000c98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c9c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ca0:	45a6      	cmp	lr, r4
 8000ca2:	d909      	bls.n	8000cb8 <__udivmoddi4+0x8c>
 8000ca4:	193c      	adds	r4, r7, r4
 8000ca6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000caa:	f080 8105 	bcs.w	8000eb8 <__udivmoddi4+0x28c>
 8000cae:	45a6      	cmp	lr, r4
 8000cb0:	f240 8102 	bls.w	8000eb8 <__udivmoddi4+0x28c>
 8000cb4:	3802      	subs	r0, #2
 8000cb6:	443c      	add	r4, r7
 8000cb8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cbc:	eba4 040e 	sub.w	r4, r4, lr
 8000cc0:	2600      	movs	r6, #0
 8000cc2:	b11d      	cbz	r5, 8000ccc <__udivmoddi4+0xa0>
 8000cc4:	40d4      	lsrs	r4, r2
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e9c5 4300 	strd	r4, r3, [r5]
 8000ccc:	4631      	mov	r1, r6
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	b902      	cbnz	r2, 8000cd6 <__udivmoddi4+0xaa>
 8000cd4:	deff      	udf	#255	; 0xff
 8000cd6:	fab2 f282 	clz	r2, r2
 8000cda:	2a00      	cmp	r2, #0
 8000cdc:	d150      	bne.n	8000d80 <__udivmoddi4+0x154>
 8000cde:	1bcb      	subs	r3, r1, r7
 8000ce0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ce4:	fa1f f887 	uxth.w	r8, r7
 8000ce8:	2601      	movs	r6, #1
 8000cea:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cee:	0c21      	lsrs	r1, r4, #16
 8000cf0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cf4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf8:	fb08 f30c 	mul.w	r3, r8, ip
 8000cfc:	428b      	cmp	r3, r1
 8000cfe:	d907      	bls.n	8000d10 <__udivmoddi4+0xe4>
 8000d00:	1879      	adds	r1, r7, r1
 8000d02:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d06:	d202      	bcs.n	8000d0e <__udivmoddi4+0xe2>
 8000d08:	428b      	cmp	r3, r1
 8000d0a:	f200 80e9 	bhi.w	8000ee0 <__udivmoddi4+0x2b4>
 8000d0e:	4684      	mov	ip, r0
 8000d10:	1ac9      	subs	r1, r1, r3
 8000d12:	b2a3      	uxth	r3, r4
 8000d14:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d18:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d1c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d20:	fb08 f800 	mul.w	r8, r8, r0
 8000d24:	45a0      	cmp	r8, r4
 8000d26:	d907      	bls.n	8000d38 <__udivmoddi4+0x10c>
 8000d28:	193c      	adds	r4, r7, r4
 8000d2a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d2e:	d202      	bcs.n	8000d36 <__udivmoddi4+0x10a>
 8000d30:	45a0      	cmp	r8, r4
 8000d32:	f200 80d9 	bhi.w	8000ee8 <__udivmoddi4+0x2bc>
 8000d36:	4618      	mov	r0, r3
 8000d38:	eba4 0408 	sub.w	r4, r4, r8
 8000d3c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d40:	e7bf      	b.n	8000cc2 <__udivmoddi4+0x96>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d909      	bls.n	8000d5a <__udivmoddi4+0x12e>
 8000d46:	2d00      	cmp	r5, #0
 8000d48:	f000 80b1 	beq.w	8000eae <__udivmoddi4+0x282>
 8000d4c:	2600      	movs	r6, #0
 8000d4e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d52:	4630      	mov	r0, r6
 8000d54:	4631      	mov	r1, r6
 8000d56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5a:	fab3 f683 	clz	r6, r3
 8000d5e:	2e00      	cmp	r6, #0
 8000d60:	d14a      	bne.n	8000df8 <__udivmoddi4+0x1cc>
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d302      	bcc.n	8000d6c <__udivmoddi4+0x140>
 8000d66:	4282      	cmp	r2, r0
 8000d68:	f200 80b8 	bhi.w	8000edc <__udivmoddi4+0x2b0>
 8000d6c:	1a84      	subs	r4, r0, r2
 8000d6e:	eb61 0103 	sbc.w	r1, r1, r3
 8000d72:	2001      	movs	r0, #1
 8000d74:	468c      	mov	ip, r1
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	d0a8      	beq.n	8000ccc <__udivmoddi4+0xa0>
 8000d7a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d7e:	e7a5      	b.n	8000ccc <__udivmoddi4+0xa0>
 8000d80:	f1c2 0320 	rsb	r3, r2, #32
 8000d84:	fa20 f603 	lsr.w	r6, r0, r3
 8000d88:	4097      	lsls	r7, r2
 8000d8a:	fa01 f002 	lsl.w	r0, r1, r2
 8000d8e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d92:	40d9      	lsrs	r1, r3
 8000d94:	4330      	orrs	r0, r6
 8000d96:	0c03      	lsrs	r3, r0, #16
 8000d98:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d9c:	fa1f f887 	uxth.w	r8, r7
 8000da0:	fb0e 1116 	mls	r1, lr, r6, r1
 8000da4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da8:	fb06 f108 	mul.w	r1, r6, r8
 8000dac:	4299      	cmp	r1, r3
 8000dae:	fa04 f402 	lsl.w	r4, r4, r2
 8000db2:	d909      	bls.n	8000dc8 <__udivmoddi4+0x19c>
 8000db4:	18fb      	adds	r3, r7, r3
 8000db6:	f106 3cff 	add.w	ip, r6, #4294967295
 8000dba:	f080 808d 	bcs.w	8000ed8 <__udivmoddi4+0x2ac>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 808a 	bls.w	8000ed8 <__udivmoddi4+0x2ac>
 8000dc4:	3e02      	subs	r6, #2
 8000dc6:	443b      	add	r3, r7
 8000dc8:	1a5b      	subs	r3, r3, r1
 8000dca:	b281      	uxth	r1, r0
 8000dcc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dd0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dd4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dd8:	fb00 f308 	mul.w	r3, r0, r8
 8000ddc:	428b      	cmp	r3, r1
 8000dde:	d907      	bls.n	8000df0 <__udivmoddi4+0x1c4>
 8000de0:	1879      	adds	r1, r7, r1
 8000de2:	f100 3cff 	add.w	ip, r0, #4294967295
 8000de6:	d273      	bcs.n	8000ed0 <__udivmoddi4+0x2a4>
 8000de8:	428b      	cmp	r3, r1
 8000dea:	d971      	bls.n	8000ed0 <__udivmoddi4+0x2a4>
 8000dec:	3802      	subs	r0, #2
 8000dee:	4439      	add	r1, r7
 8000df0:	1acb      	subs	r3, r1, r3
 8000df2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000df6:	e778      	b.n	8000cea <__udivmoddi4+0xbe>
 8000df8:	f1c6 0c20 	rsb	ip, r6, #32
 8000dfc:	fa03 f406 	lsl.w	r4, r3, r6
 8000e00:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e04:	431c      	orrs	r4, r3
 8000e06:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e0a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e0e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e12:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e16:	431f      	orrs	r7, r3
 8000e18:	0c3b      	lsrs	r3, r7, #16
 8000e1a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e1e:	fa1f f884 	uxth.w	r8, r4
 8000e22:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e26:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e2a:	fb09 fa08 	mul.w	sl, r9, r8
 8000e2e:	458a      	cmp	sl, r1
 8000e30:	fa02 f206 	lsl.w	r2, r2, r6
 8000e34:	fa00 f306 	lsl.w	r3, r0, r6
 8000e38:	d908      	bls.n	8000e4c <__udivmoddi4+0x220>
 8000e3a:	1861      	adds	r1, r4, r1
 8000e3c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e40:	d248      	bcs.n	8000ed4 <__udivmoddi4+0x2a8>
 8000e42:	458a      	cmp	sl, r1
 8000e44:	d946      	bls.n	8000ed4 <__udivmoddi4+0x2a8>
 8000e46:	f1a9 0902 	sub.w	r9, r9, #2
 8000e4a:	4421      	add	r1, r4
 8000e4c:	eba1 010a 	sub.w	r1, r1, sl
 8000e50:	b2bf      	uxth	r7, r7
 8000e52:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e56:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e5a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e5e:	fb00 f808 	mul.w	r8, r0, r8
 8000e62:	45b8      	cmp	r8, r7
 8000e64:	d907      	bls.n	8000e76 <__udivmoddi4+0x24a>
 8000e66:	19e7      	adds	r7, r4, r7
 8000e68:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e6c:	d22e      	bcs.n	8000ecc <__udivmoddi4+0x2a0>
 8000e6e:	45b8      	cmp	r8, r7
 8000e70:	d92c      	bls.n	8000ecc <__udivmoddi4+0x2a0>
 8000e72:	3802      	subs	r0, #2
 8000e74:	4427      	add	r7, r4
 8000e76:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e7a:	eba7 0708 	sub.w	r7, r7, r8
 8000e7e:	fba0 8902 	umull	r8, r9, r0, r2
 8000e82:	454f      	cmp	r7, r9
 8000e84:	46c6      	mov	lr, r8
 8000e86:	4649      	mov	r1, r9
 8000e88:	d31a      	bcc.n	8000ec0 <__udivmoddi4+0x294>
 8000e8a:	d017      	beq.n	8000ebc <__udivmoddi4+0x290>
 8000e8c:	b15d      	cbz	r5, 8000ea6 <__udivmoddi4+0x27a>
 8000e8e:	ebb3 020e 	subs.w	r2, r3, lr
 8000e92:	eb67 0701 	sbc.w	r7, r7, r1
 8000e96:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e9a:	40f2      	lsrs	r2, r6
 8000e9c:	ea4c 0202 	orr.w	r2, ip, r2
 8000ea0:	40f7      	lsrs	r7, r6
 8000ea2:	e9c5 2700 	strd	r2, r7, [r5]
 8000ea6:	2600      	movs	r6, #0
 8000ea8:	4631      	mov	r1, r6
 8000eaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eae:	462e      	mov	r6, r5
 8000eb0:	4628      	mov	r0, r5
 8000eb2:	e70b      	b.n	8000ccc <__udivmoddi4+0xa0>
 8000eb4:	4606      	mov	r6, r0
 8000eb6:	e6e9      	b.n	8000c8c <__udivmoddi4+0x60>
 8000eb8:	4618      	mov	r0, r3
 8000eba:	e6fd      	b.n	8000cb8 <__udivmoddi4+0x8c>
 8000ebc:	4543      	cmp	r3, r8
 8000ebe:	d2e5      	bcs.n	8000e8c <__udivmoddi4+0x260>
 8000ec0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ec4:	eb69 0104 	sbc.w	r1, r9, r4
 8000ec8:	3801      	subs	r0, #1
 8000eca:	e7df      	b.n	8000e8c <__udivmoddi4+0x260>
 8000ecc:	4608      	mov	r0, r1
 8000ece:	e7d2      	b.n	8000e76 <__udivmoddi4+0x24a>
 8000ed0:	4660      	mov	r0, ip
 8000ed2:	e78d      	b.n	8000df0 <__udivmoddi4+0x1c4>
 8000ed4:	4681      	mov	r9, r0
 8000ed6:	e7b9      	b.n	8000e4c <__udivmoddi4+0x220>
 8000ed8:	4666      	mov	r6, ip
 8000eda:	e775      	b.n	8000dc8 <__udivmoddi4+0x19c>
 8000edc:	4630      	mov	r0, r6
 8000ede:	e74a      	b.n	8000d76 <__udivmoddi4+0x14a>
 8000ee0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ee4:	4439      	add	r1, r7
 8000ee6:	e713      	b.n	8000d10 <__udivmoddi4+0xe4>
 8000ee8:	3802      	subs	r0, #2
 8000eea:	443c      	add	r4, r7
 8000eec:	e724      	b.n	8000d38 <__udivmoddi4+0x10c>
 8000eee:	bf00      	nop

08000ef0 <__aeabi_idiv0>:
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop

08000ef4 <_ZN6driver9displayerC1Ev>:
{

displayer::displayer()
{
	; /*TODO : It may be filled later.*/
}
 8000ef4:	4770      	bx	lr

08000ef6 <_ZN6driver9displayer12config_layerEv>:
	this->config_layer();

}

void displayer::config_layer()
{
 8000ef6:	b538      	push	{r3, r4, r5, lr}
	lcd_handle.LayerCfg[0].WindowX0 = 0;
	lcd_handle.LayerCfg[0].WindowX1 = displayer_width;
	lcd_handle.LayerCfg[0].WindowY0 = 0;
	lcd_handle.LayerCfg[0].WindowY1 = displayer_height;
	lcd_handle.LayerCfg[0].PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000ef8:	f44f 7288 	mov.w	r2, #272	; 0x110
 8000efc:	2502      	movs	r5, #2
	lcd_handle.LayerCfg[0].WindowX1 = displayer_width;
 8000efe:	2300      	movs	r3, #0
	lcd_handle.LayerCfg[0].Alpha = 255;
	lcd_handle.LayerCfg[0].Alpha0 = 0;
	lcd_handle.LayerCfg[0].BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
	lcd_handle.LayerCfg[0].BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000f00:	f44f 6cc0 	mov.w	ip, #1536	; 0x600
	lcd_handle.LayerCfg[0].WindowX1 = displayer_width;
 8000f04:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
{
 8000f08:	4604      	mov	r4, r0
	lcd_handle.LayerCfg[0].WindowY0 = 0;
 8000f0a:	6403      	str	r3, [r0, #64]	; 0x40
	lcd_handle.LayerCfg[0].FBStartAdress = (uint32_t)fb_start_address;
	lcd_handle.LayerCfg[0].ImageWidth = displayer_width;
	lcd_handle.LayerCfg[0].ImageHeight = displayer_height;
 8000f0c:	6642      	str	r2, [r0, #100]	; 0x64
	lcd_handle.LayerCfg[0].Backcolor.Blue = 0;
 8000f0e:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
	lcd_handle.LayerCfg[0].Backcolor.Green = 0;
	lcd_handle.LayerCfg[0].Backcolor.Red = 0;
 8000f12:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
	lcd_handle.LayerCfg[0].PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000f16:	e9c0 2511 	strd	r2, r5, [r0, #68]	; 0x44
	lcd_handle.LayerCfg[0].Alpha = 255;
 8000f1a:	25ff      	movs	r5, #255	; 0xff
    HAL_LTDC_ConfigLayer(&lcd_handle, &lcd_handle.LayerCfg[0], 1);
 8000f1c:	2201      	movs	r2, #1
	lcd_handle.LayerCfg[0].Alpha0 = 0;
 8000f1e:	e9c0 5313 	strd	r5, r3, [r0, #76]	; 0x4c
	lcd_handle.LayerCfg[0].BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000f22:	2507      	movs	r5, #7
 8000f24:	e9c0 c515 	strd	ip, r5, [r0, #84]	; 0x54
	lcd_handle.LayerCfg[0].FBStartAdress = (uint32_t)fb_start_address;
 8000f28:	f04f 4540 	mov.w	r5, #3221225472	; 0xc0000000
	lcd_handle.LayerCfg[0].WindowX1 = displayer_width;
 8000f2c:	e9c0 310e 	strd	r3, r1, [r0, #56]	; 0x38
	lcd_handle.LayerCfg[0].ImageWidth = displayer_width;
 8000f30:	e9c0 5117 	strd	r5, r1, [r0, #92]	; 0x5c
    HAL_LTDC_ConfigLayer(&lcd_handle, &lcd_handle.LayerCfg[0], 1);
 8000f34:	f100 0138 	add.w	r1, r0, #56	; 0x38
 8000f38:	f020 f904 	bl	8021144 <HAL_LTDC_ConfigLayer>
	HAL_LTDC_EnableDither(&lcd_handle);
 8000f3c:	4620      	mov	r0, r4
}
 8000f3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_LTDC_EnableDither(&lcd_handle);
 8000f42:	f020 b92d 	b.w	80211a0 <HAL_LTDC_EnableDither>
	...

08000f48 <_ZN6driver9displayer4initEv>:
{
 8000f48:	b510      	push	{r4, lr}
	static constexpr uint16_t displayer_height  = 272; /* LCD PIXEL HEIGHT           */

private:
	LTDC_HandleTypeDef lcd_handle;

	static auto inline lcd_backlight_state = [](GPIO_PinState pin_state){ HAL_GPIO_WritePin(GPIOK, GPIO_PIN_3, pin_state); };
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	4604      	mov	r4, r0
 8000f4e:	2108      	movs	r1, #8
 8000f50:	4817      	ldr	r0, [pc, #92]	; (8000fb0 <_ZN6driver9displayer4initEv+0x68>)
 8000f52:	f01f fd93 	bl	8020a7c <HAL_GPIO_WritePin>
	static auto inline lcd_display_state   = [](GPIO_PinState pin_state){ HAL_GPIO_WritePin(GPIOI, GPIO_PIN_12, pin_state); };
 8000f56:	2201      	movs	r2, #1
 8000f58:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f5c:	4815      	ldr	r0, [pc, #84]	; (8000fb4 <_ZN6driver9displayer4initEv+0x6c>)
 8000f5e:	f01f fd8d 	bl	8020a7c <HAL_GPIO_WritePin>
	lcd_handle.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000f62:	2300      	movs	r3, #0
 8000f64:	4a14      	ldr	r2, [pc, #80]	; (8000fb8 <_ZN6driver9displayer4initEv+0x70>)
	lcd_handle.Init.VerticalSync = (displayer_vsync - 1);
 8000f66:	2128      	movs	r1, #40	; 0x28
	lcd_handle.Init.AccumulatedVBP = (displayer_vsync + displayer_vbp - 1);
 8000f68:	2035      	movs	r0, #53	; 0x35
	lcd_handle.Init.AccumulatedActiveH = (displayer_height + displayer_vsync
 8000f6a:	f240 2c15 	movw	ip, #533	; 0x215
	lcd_handle.Init.TotalHeigh = (displayer_height + displayer_vsync
 8000f6e:	f240 2e35 	movw	lr, #565	; 0x235
	lcd_handle.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000f72:	6123      	str	r3, [r4, #16]
	lcd_handle.Init.Backcolor.Blue = 0;
 8000f74:	86a3      	strh	r3, [r4, #52]	; 0x34
	lcd_handle.Init.Backcolor.Red = 0;
 8000f76:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
	lcd_handle.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000f7a:	e9c4 2300 	strd	r2, r3, [r4]
	lcd_handle.Init.VerticalSync = (displayer_vsync - 1);
 8000f7e:	2209      	movs	r2, #9
 8000f80:	e9c4 1205 	strd	r1, r2, [r4, #20]
	lcd_handle.Init.AccumulatedVBP = (displayer_vsync + displayer_vbp - 1);
 8000f84:	220b      	movs	r2, #11
 8000f86:	e9c4 0207 	strd	r0, r2, [r4, #28]
	lcd_handle.Init.AccumulatedActiveH = (displayer_height + displayer_vsync
 8000f8a:	f240 121b 	movw	r2, #283	; 0x11b
	HAL_LTDC_Init(&lcd_handle);
 8000f8e:	4620      	mov	r0, r4
	lcd_handle.Init.AccumulatedActiveH = (displayer_height + displayer_vsync
 8000f90:	e9c4 c209 	strd	ip, r2, [r4, #36]	; 0x24
	lcd_handle.Init.TotalHeigh = (displayer_height + displayer_vsync
 8000f94:	f240 121d 	movw	r2, #285	; 0x11d
	lcd_handle.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000f98:	e9c4 3302 	strd	r3, r3, [r4, #8]
	lcd_handle.Init.TotalHeigh = (displayer_height + displayer_vsync
 8000f9c:	e9c4 e20b 	strd	lr, r2, [r4, #44]	; 0x2c
	HAL_LTDC_Init(&lcd_handle);
 8000fa0:	f020 f864 	bl	802106c <HAL_LTDC_Init>
	this->config_layer();
 8000fa4:	4620      	mov	r0, r4
}
 8000fa6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	this->config_layer();
 8000faa:	f7ff bfa4 	b.w	8000ef6 <_ZN6driver9displayer12config_layerEv>
 8000fae:	bf00      	nop
 8000fb0:	40022800 	.word	0x40022800
 8000fb4:	40022000 	.word	0x40022000
 8000fb8:	40016800 	.word	0x40016800

08000fbc <_ZN6driver9displayer10draw_pixelEsst>:

void displayer::draw_pixel(int16_t x_pos, int16_t y_pos, uint16_t color)
{
 8000fbc:	b510      	push	{r4, lr}
	*(volatile uint16_t *)(lcd_handle.LayerCfg[0].FBStartAdress+( 2 * (y_pos * lcd_handle.LayerCfg [0] .ImageWidth + x_pos))) = color;
 8000fbe:	6e04      	ldr	r4, [r0, #96]	; 0x60
 8000fc0:	fb04 1102 	mla	r1, r4, r2, r1
 8000fc4:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8000fc6:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
}
 8000fca:	bd10      	pop	{r4, pc}

08000fcc <_ZN3gui20displayer_gui_driver19displayer_interfaceEP14_lv_disp_drv_tPK9lv_area_tP12lv_color16_t>:
	lv_disp_flush_ready(&disp_drv);

}

void displayer_gui_driver::displayer_interface(lv_disp_drv_t *disp,const lv_area_t* area,lv_color_t* color_p)
{
 8000fcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    static int32_t x, y;

    for(y = area->y1; y <= area->y2; y++)
 8000fd0:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
{
 8000fd4:	4681      	mov	r9, r0
    for(y = area->y1; y <= area->y2; y++)
 8000fd6:	4c15      	ldr	r4, [pc, #84]	; (800102c <_ZN3gui20displayer_gui_driver19displayer_interfaceEP14_lv_disp_drv_tPK9lv_area_tP12lv_color16_t+0x60>)
{
 8000fd8:	460d      	mov	r5, r1
 8000fda:	4617      	mov	r7, r2
    {
        for(x = area->x1; x <= area->x2; x++)
 8000fdc:	f8df 8050 	ldr.w	r8, [pc, #80]	; 8001030 <_ZN3gui20displayer_gui_driver19displayer_interfaceEP14_lv_disp_drv_tPK9lv_area_tP12lv_color16_t+0x64>
        {
        	display.draw_pixel(x, y, (uint32_t)color_p->full);
 8000fe0:	f8df a050 	ldr.w	sl, [pc, #80]	; 8001034 <_ZN3gui20displayer_gui_driver19displayer_interfaceEP14_lv_disp_drv_tPK9lv_area_tP12lv_color16_t+0x68>
    for(y = area->y1; y <= area->y2; y++)
 8000fe4:	6023      	str	r3, [r4, #0]
 8000fe6:	f9b5 2006 	ldrsh.w	r2, [r5, #6]
 8000fea:	6823      	ldr	r3, [r4, #0]
 8000fec:	429a      	cmp	r2, r3
 8000fee:	db18      	blt.n	8001022 <_ZN3gui20displayer_gui_driver19displayer_interfaceEP14_lv_disp_drv_tPK9lv_area_tP12lv_color16_t+0x56>
        for(x = area->x1; x <= area->x2; x++)
 8000ff0:	f9b5 3000 	ldrsh.w	r3, [r5]
 8000ff4:	f8c8 3000 	str.w	r3, [r8]
 8000ff8:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8000ffc:	f8d8 1000 	ldr.w	r1, [r8]
 8001000:	6826      	ldr	r6, [r4, #0]
 8001002:	428b      	cmp	r3, r1
 8001004:	db0a      	blt.n	800101c <_ZN3gui20displayer_gui_driver19displayer_interfaceEP14_lv_disp_drv_tPK9lv_area_tP12lv_color16_t+0x50>
        	display.draw_pixel(x, y, (uint32_t)color_p->full);
 8001006:	f837 3b02 	ldrh.w	r3, [r7], #2
 800100a:	b232      	sxth	r2, r6
 800100c:	b209      	sxth	r1, r1
 800100e:	4650      	mov	r0, sl
 8001010:	f7ff ffd4 	bl	8000fbc <_ZN6driver9displayer10draw_pixelEsst>
        for(x = area->x1; x <= area->x2; x++)
 8001014:	f8d8 3000 	ldr.w	r3, [r8]
 8001018:	3301      	adds	r3, #1
 800101a:	e7eb      	b.n	8000ff4 <_ZN3gui20displayer_gui_driver19displayer_interfaceEP14_lv_disp_drv_tPK9lv_area_tP12lv_color16_t+0x28>
    for(y = area->y1; y <= area->y2; y++)
 800101c:	3601      	adds	r6, #1
 800101e:	6026      	str	r6, [r4, #0]
 8001020:	e7e1      	b.n	8000fe6 <_ZN3gui20displayer_gui_driver19displayer_interfaceEP14_lv_disp_drv_tPK9lv_area_tP12lv_color16_t+0x1a>
            color_p++;
        }
    }

    lv_disp_flush_ready(disp);
 8001022:	4648      	mov	r0, r9
}
 8001024:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    lv_disp_flush_ready(disp);
 8001028:	f015 bc72 	b.w	8016910 <lv_disp_flush_ready>
 800102c:	20000350 	.word	0x20000350
 8001030:	2000034c 	.word	0x2000034c
 8001034:	200002a4 	.word	0x200002a4

08001038 <_ZN3gui20displayer_gui_driver8gui_initEv>:
{
 8001038:	b538      	push	{r3, r4, r5, lr}
	sdram.init();
 800103a:	4810      	ldr	r0, [pc, #64]	; (800107c <_ZN3gui20displayer_gui_driver8gui_initEv+0x44>)
	lv_disp_draw_buf_init(&disp_buf, buf_1, NULL, display.displayer_width*10);
 800103c:	4d10      	ldr	r5, [pc, #64]	; (8001080 <_ZN3gui20displayer_gui_driver8gui_initEv+0x48>)
	sdram.init();
 800103e:	f000 f913 	bl	8001268 <_ZN6driver13sdram_handler4initEv>
	lv_disp_drv_init(&disp_drv);
 8001042:	4c10      	ldr	r4, [pc, #64]	; (8001084 <_ZN3gui20displayer_gui_driver8gui_initEv+0x4c>)
	display.init();
 8001044:	4810      	ldr	r0, [pc, #64]	; (8001088 <_ZN3gui20displayer_gui_driver8gui_initEv+0x50>)
 8001046:	f7ff ff7f 	bl	8000f48 <_ZN6driver9displayer4initEv>
	lv_init();
 800104a:	f002 fe29 	bl	8003ca0 <lv_init>
	lv_disp_draw_buf_init(&disp_buf, buf_1, NULL, display.displayer_width*10);
 800104e:	f44f 5396 	mov.w	r3, #4800	; 0x12c0
 8001052:	2200      	movs	r2, #0
 8001054:	490d      	ldr	r1, [pc, #52]	; (800108c <_ZN3gui20displayer_gui_driver8gui_initEv+0x54>)
 8001056:	4628      	mov	r0, r5
 8001058:	f015 fb98 	bl	801678c <lv_disp_draw_buf_init>
	lv_disp_drv_init(&disp_drv);
 800105c:	4620      	mov	r0, r4
 800105e:	f015 fb7f 	bl	8016760 <lv_disp_drv_init>
	disp_drv.hor_res =  display.displayer_width;
 8001062:	4b0b      	ldr	r3, [pc, #44]	; (8001090 <_ZN3gui20displayer_gui_driver8gui_initEv+0x58>)
	lv_disp_drv_register(&disp_drv);
 8001064:	4620      	mov	r0, r4
	disp_drv.draw_buf = &disp_buf;
 8001066:	6065      	str	r5, [r4, #4]
	disp_drv.hor_res =  display.displayer_width;
 8001068:	6023      	str	r3, [r4, #0]
	disp_drv.flush_cb = this->displayer_interface;
 800106a:	4b0a      	ldr	r3, [pc, #40]	; (8001094 <_ZN3gui20displayer_gui_driver8gui_initEv+0x5c>)
 800106c:	60e3      	str	r3, [r4, #12]
	lv_disp_drv_register(&disp_drv);
 800106e:	f015 fb9b 	bl	80167a8 <lv_disp_drv_register>
	lv_disp_flush_ready(&disp_drv);
 8001072:	4620      	mov	r0, r4
}
 8001074:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lv_disp_flush_ready(&disp_drv);
 8001078:	f015 bc4a 	b.w	8016910 <lv_disp_flush_ready>
 800107c:	2000026c 	.word	0x2000026c
 8001080:	200028d4 	.word	0x200028d4
 8001084:	200028f8 	.word	0x200028f8
 8001088:	200002a4 	.word	0x200002a4
 800108c:	20000354 	.word	0x20000354
 8001090:	011001e0 	.word	0x011001e0
 8001094:	08000fcd 	.word	0x08000fcd

08001098 <_GLOBAL__sub_I__ZN3gui20displayer_gui_driver8gui_initEv>:
public:
	displayer_gui_driver() = default;
	void gui_init();
	static void displayer_interface(lv_disp_drv_t * disp, const lv_area_t * area, lv_color_t * color_p);
private:
	static inline driver::displayer display;
 8001098:	4a07      	ldr	r2, [pc, #28]	; (80010b8 <_GLOBAL__sub_I__ZN3gui20displayer_gui_driver8gui_initEv+0x20>)

}
 800109a:	b508      	push	{r3, lr}
 800109c:	6813      	ldr	r3, [r2, #0]
 800109e:	3301      	adds	r3, #1
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	6013      	str	r3, [r2, #0]
 80010a4:	d102      	bne.n	80010ac <_GLOBAL__sub_I__ZN3gui20displayer_gui_driver8gui_initEv+0x14>
 80010a6:	4805      	ldr	r0, [pc, #20]	; (80010bc <_GLOBAL__sub_I__ZN3gui20displayer_gui_driver8gui_initEv+0x24>)
 80010a8:	f7ff ff24 	bl	8000ef4 <_ZN6driver9displayerC1Ev>
	static inline driver::sdram_handler sdram;
 80010ac:	4a04      	ldr	r2, [pc, #16]	; (80010c0 <_GLOBAL__sub_I__ZN3gui20displayer_gui_driver8gui_initEv+0x28>)
 80010ae:	6813      	ldr	r3, [r2, #0]
 80010b0:	3301      	adds	r3, #1
 80010b2:	6013      	str	r3, [r2, #0]
 80010b4:	bd08      	pop	{r3, pc}
 80010b6:	bf00      	nop
 80010b8:	20000268 	.word	0x20000268
 80010bc:	200002a4 	.word	0x200002a4
 80010c0:	20000264 	.word	0x20000264

080010c4 <_ZN6driver12touch_screen10is_pressedEv>:
{

#define I2C_Handle (&hi2c3)  /* XXX:touch screen driver port is connected to I2C3*/

bool touch_screen::is_pressed()
{
 80010c4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t temp_touch_number;

	HAL_I2C_Mem_Read(I2C_Handle, address_read , touch_num, I2C_MEMADD_SIZE_8BIT, &temp_touch_number, 1, 10);
 80010c6:	2301      	movs	r3, #1
 80010c8:	220a      	movs	r2, #10
 80010ca:	2171      	movs	r1, #113	; 0x71
 80010cc:	4808      	ldr	r0, [pc, #32]	; (80010f0 <_ZN6driver12touch_screen10is_pressedEv+0x2c>)
 80010ce:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80010d2:	f10d 0217 	add.w	r2, sp, #23
 80010d6:	9200      	str	r2, [sp, #0]
 80010d8:	2202      	movs	r2, #2
 80010da:	f01f fe33 	bl	8020d44 <HAL_I2C_Mem_Read>

	if(temp_touch_number > 0)
 80010de:	f89d 0017 	ldrb.w	r0, [sp, #23]
	}
	else
	{
		return false;
	}
}
 80010e2:	3800      	subs	r0, #0
 80010e4:	bf18      	it	ne
 80010e6:	2001      	movne	r0, #1
 80010e8:	b007      	add	sp, #28
 80010ea:	f85d fb04 	ldr.w	pc, [sp], #4
 80010ee:	bf00      	nop
 80010f0:	2000ab9c 	.word	0x2000ab9c

080010f4 <_ZN6driver12touch_screen17read_touch_screenEPtS1_>:

void touch_screen::read_touch_screen(uint16_t* touch_x, uint16_t* touch_y)
{
 80010f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80010f8:	b086      	sub	sp, #24
	uint8_t ts_x[2];
	uint8_t ts_y[2];

	HAL_I2C_Mem_Read(I2C_Handle, address_read , touch_x_h, I2C_MEMADD_SIZE_8BIT, &ts_x[0], 1, 10);
 80010fa:	2401      	movs	r4, #1
 80010fc:	4e21      	ldr	r6, [pc, #132]	; (8001184 <_ZN6driver12touch_screen17read_touch_screenEPtS1_+0x90>)
 80010fe:	270a      	movs	r7, #10
 8001100:	ab04      	add	r3, sp, #16
{
 8001102:	4688      	mov	r8, r1
 8001104:	4615      	mov	r5, r2
	HAL_I2C_Mem_Read(I2C_Handle, address_read , touch_x_h, I2C_MEMADD_SIZE_8BIT, &ts_x[0], 1, 10);
 8001106:	2171      	movs	r1, #113	; 0x71
 8001108:	9300      	str	r3, [sp, #0]
 800110a:	2203      	movs	r2, #3
 800110c:	4623      	mov	r3, r4
 800110e:	4630      	mov	r0, r6
 8001110:	e9cd 4701 	strd	r4, r7, [sp, #4]
 8001114:	f01f fe16 	bl	8020d44 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C_Handle, address_read , touch_x_l, I2C_MEMADD_SIZE_8BIT, &ts_x[1], 1, 10);
 8001118:	f10d 0311 	add.w	r3, sp, #17
 800111c:	2204      	movs	r2, #4
 800111e:	2171      	movs	r1, #113	; 0x71
 8001120:	9300      	str	r3, [sp, #0]
 8001122:	4630      	mov	r0, r6
 8001124:	4623      	mov	r3, r4
 8001126:	e9cd 4701 	strd	r4, r7, [sp, #4]
 800112a:	f01f fe0b 	bl	8020d44 <HAL_I2C_Mem_Read>

	HAL_I2C_Mem_Read(I2C_Handle, address_read , touch_y_h, I2C_MEMADD_SIZE_8BIT, &ts_y[0], 1, 10);
 800112e:	ab05      	add	r3, sp, #20
 8001130:	2205      	movs	r2, #5
 8001132:	2171      	movs	r1, #113	; 0x71
 8001134:	9300      	str	r3, [sp, #0]
 8001136:	4630      	mov	r0, r6
 8001138:	4623      	mov	r3, r4
 800113a:	e9cd 4701 	strd	r4, r7, [sp, #4]
 800113e:	f01f fe01 	bl	8020d44 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C_Handle, address_read , touch_y_l, I2C_MEMADD_SIZE_8BIT, &ts_y[1], 1, 10);
 8001142:	f10d 0315 	add.w	r3, sp, #21
 8001146:	2206      	movs	r2, #6
 8001148:	2171      	movs	r1, #113	; 0x71
 800114a:	9300      	str	r3, [sp, #0]
 800114c:	4630      	mov	r0, r6
 800114e:	4623      	mov	r3, r4
 8001150:	e9cd 4701 	strd	r4, r7, [sp, #4]
 8001154:	f01f fdf6 	bl	8020d44 <HAL_I2C_Mem_Read>

	*touch_x = ts_x[1] + ((ts_x[0] & 0x0F) << 8);
 8001158:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800115c:	f89d 2011 	ldrb.w	r2, [sp, #17]
 8001160:	021b      	lsls	r3, r3, #8
 8001162:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001166:	4413      	add	r3, r2
	*touch_y = ts_y[1] + ((ts_y[0] & 0x0F) << 8);
 8001168:	f89d 2015 	ldrb.w	r2, [sp, #21]
	*touch_x = ts_x[1] + ((ts_x[0] & 0x0F) << 8);
 800116c:	f8a8 3000 	strh.w	r3, [r8]
	*touch_y = ts_y[1] + ((ts_y[0] & 0x0F) << 8);
 8001170:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8001174:	021b      	lsls	r3, r3, #8
 8001176:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800117a:	4413      	add	r3, r2
 800117c:	802b      	strh	r3, [r5, #0]
}
 800117e:	b006      	add	sp, #24
 8001180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001184:	2000ab9c 	.word	0x2000ab9c

08001188 <_ZN3gui23touch_screen_gui_driver12ts_interfaceEP15_lv_indev_drv_tP15lv_indev_data_t>:
	indev_drv.read_cb = this->ts_interface;
	lv_indev_drv_register(&indev_drv);
}

void touch_screen_gui_driver::ts_interface(struct _lv_indev_drv_t * indev, lv_indev_data_t * data)
{
 8001188:	b513      	push	{r0, r1, r4, lr}

	uint16_t ts_x;
	uint16_t ts_y;

	data->state =  ts.is_pressed() ? LV_INDEV_STATE_PR : LV_INDEV_STATE_REL;
 800118a:	480b      	ldr	r0, [pc, #44]	; (80011b8 <_ZN3gui23touch_screen_gui_driver12ts_interfaceEP15_lv_indev_drv_tP15lv_indev_data_t+0x30>)
{
 800118c:	460c      	mov	r4, r1
	data->state =  ts.is_pressed() ? LV_INDEV_STATE_PR : LV_INDEV_STATE_REL;
 800118e:	f7ff ff99 	bl	80010c4 <_ZN6driver12touch_screen10is_pressedEv>
 8001192:	b178      	cbz	r0, 80011b4 <_ZN3gui23touch_screen_gui_driver12ts_interfaceEP15_lv_indev_drv_tP15lv_indev_data_t+0x2c>
 8001194:	2301      	movs	r3, #1

	if (data->state == LV_INDEV_STATE_PR)
	{
		ts.read_touch_screen(&ts_x, &ts_y);
 8001196:	f10d 0206 	add.w	r2, sp, #6
 800119a:	a901      	add	r1, sp, #4
 800119c:	4806      	ldr	r0, [pc, #24]	; (80011b8 <_ZN3gui23touch_screen_gui_driver12ts_interfaceEP15_lv_indev_drv_tP15lv_indev_data_t+0x30>)
	data->state =  ts.is_pressed() ? LV_INDEV_STATE_PR : LV_INDEV_STATE_REL;
 800119e:	73a3      	strb	r3, [r4, #14]
		ts.read_touch_screen(&ts_x, &ts_y);
 80011a0:	f7ff ffa8 	bl	80010f4 <_ZN6driver12touch_screen17read_touch_screenEPtS1_>
	}

	data->point.x = (int16_t)ts_y;
 80011a4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80011a8:	8023      	strh	r3, [r4, #0]
	data->point.y = (int16_t)ts_x;
 80011aa:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80011ae:	8063      	strh	r3, [r4, #2]

}
 80011b0:	b002      	add	sp, #8
 80011b2:	bd10      	pop	{r4, pc}
	data->state =  ts.is_pressed() ? LV_INDEV_STATE_PR : LV_INDEV_STATE_REL;
 80011b4:	73a0      	strb	r0, [r4, #14]
	if (data->state == LV_INDEV_STATE_PR)
 80011b6:	e7f5      	b.n	80011a4 <_ZN3gui23touch_screen_gui_driver12ts_interfaceEP15_lv_indev_drv_tP15lv_indev_data_t+0x1c>
 80011b8:	20002930 	.word	0x20002930

080011bc <_ZN3gui23touch_screen_gui_driver7ts_initEv>:
{
 80011bc:	b510      	push	{r4, lr}
	lv_indev_drv_init(&indev_drv);
 80011be:	4c07      	ldr	r4, [pc, #28]	; (80011dc <_ZN3gui23touch_screen_gui_driver7ts_initEv+0x20>)
	MX_I2C3_Init();
 80011c0:	f000 f9a4 	bl	800150c <MX_I2C3_Init>
	lv_indev_drv_init(&indev_drv);
 80011c4:	4620      	mov	r0, r4
 80011c6:	f015 fbb7 	bl	8016938 <lv_indev_drv_init>
	indev_drv.type = LV_INDEV_TYPE_POINTER;
 80011ca:	2301      	movs	r3, #1
	lv_indev_drv_register(&indev_drv);
 80011cc:	4620      	mov	r0, r4
	indev_drv.type = LV_INDEV_TYPE_POINTER;
 80011ce:	7023      	strb	r3, [r4, #0]
	indev_drv.read_cb = this->ts_interface;
 80011d0:	4b03      	ldr	r3, [pc, #12]	; (80011e0 <_ZN3gui23touch_screen_gui_driver7ts_initEv+0x24>)
 80011d2:	6063      	str	r3, [r4, #4]
}
 80011d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lv_indev_drv_register(&indev_drv);
 80011d8:	f015 bbbe 	b.w	8016958 <lv_indev_drv_register>
 80011dc:	20002934 	.word	0x20002934
 80011e0:	08001189 	.word	0x08001189

080011e4 <_ZN6driver13sdram_handler13init_sequenceEP19SDRAM_HandleTypeDefP24FMC_SDRAM_CommandTypeDef>:

}

void sdram_handler::init_sequence(SDRAM_HandleTypeDef *sdram_handle,
		                          FMC_SDRAM_CommandTypeDef *command)
{
 80011e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80011e8:	4614      	mov	r4, r2
 80011ea:	460d      	mov	r5, r1
	  volatile uint32_t temp_val;

	  command->CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
	  command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80011ec:	2601      	movs	r6, #1
 80011ee:	2710      	movs	r7, #16
	  command->AutoRefreshNumber = 1;
	  command->ModeRegisterDefinition = 0;
 80011f0:	f04f 0900 	mov.w	r9, #0
{
 80011f4:	4680      	mov	r8, r0

	  HAL_SDRAM_SendCommand(sdram_handle, command, timeout);
 80011f6:	4621      	mov	r1, r4
	  command->AutoRefreshNumber = 1;
 80011f8:	6096      	str	r6, [r2, #8]
	  command->ModeRegisterDefinition = 0;
 80011fa:	f8c2 900c 	str.w	r9, [r2, #12]
	  HAL_SDRAM_SendCommand(sdram_handle, command, timeout);
 80011fe:	4628      	mov	r0, r5
	  command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8001200:	e9c2 6700 	strd	r6, r7, [r2]
	  HAL_SDRAM_SendCommand(sdram_handle, command, timeout);
 8001204:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001208:	f020 fd96 	bl	8021d38 <HAL_SDRAM_SendCommand>

	  command->CommandMode = FMC_SDRAM_CMD_PALL;
 800120c:	2302      	movs	r3, #2
	  command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
	  command->AutoRefreshNumber = 1;
	  command->ModeRegisterDefinition = 0;

	  HAL_SDRAM_SendCommand(sdram_handle, command, timeout);
 800120e:	4621      	mov	r1, r4
 8001210:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001214:	4628      	mov	r0, r5
	  command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8001216:	e9c4 3700 	strd	r3, r7, [r4]
	  command->ModeRegisterDefinition = 0;
 800121a:	e9c4 6902 	strd	r6, r9, [r4, #8]
	  HAL_SDRAM_SendCommand(sdram_handle, command, timeout);
 800121e:	f020 fd8b 	bl	8021d38 <HAL_SDRAM_SendCommand>

	  command->CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8001222:	2303      	movs	r3, #3
	  command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
	  command->AutoRefreshNumber = 8;
	  command->ModeRegisterDefinition = 0;

	  HAL_SDRAM_SendCommand(sdram_handle, command, timeout);
 8001224:	4621      	mov	r1, r4
 8001226:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800122a:	4628      	mov	r0, r5
	  command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800122c:	e9c4 3700 	strd	r3, r7, [r4]
	  command->AutoRefreshNumber = 8;
 8001230:	2308      	movs	r3, #8
	  command->ModeRegisterDefinition = 0;
 8001232:	e9c4 3902 	strd	r3, r9, [r4, #8]
	  HAL_SDRAM_SendCommand(sdram_handle, command, timeout);
 8001236:	f020 fd7f 	bl	8021d38 <HAL_SDRAM_SendCommand>

	  temp_val = (uint32_t)burst_length|burst_type_seq|cas_latency| \
 800123a:	f44f 7308 	mov.w	r3, #544	; 0x220
	  command->CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
	  command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
	  command->AutoRefreshNumber = 1;
	  command->ModeRegisterDefinition = temp_val;

	  HAL_SDRAM_SendCommand(sdram_handle, command, timeout);
 800123e:	4621      	mov	r1, r4
 8001240:	f64f 72ff 	movw	r2, #65535	; 0xffff
	  temp_val = (uint32_t)burst_length|burst_type_seq|cas_latency| \
 8001244:	9301      	str	r3, [sp, #4]
	  command->CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 8001246:	2304      	movs	r3, #4
	  HAL_SDRAM_SendCommand(sdram_handle, command, timeout);
 8001248:	4628      	mov	r0, r5
	  command->AutoRefreshNumber = 1;
 800124a:	60a6      	str	r6, [r4, #8]
	  command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800124c:	e9c4 3700 	strd	r3, r7, [r4]
	  command->ModeRegisterDefinition = temp_val;
 8001250:	9b01      	ldr	r3, [sp, #4]
 8001252:	60e3      	str	r3, [r4, #12]
	  HAL_SDRAM_SendCommand(sdram_handle, command, timeout);
 8001254:	f020 fd70 	bl	8021d38 <HAL_SDRAM_SendCommand>
	  HAL_SDRAM_SetAutoRefreshNumber(&hsdram1, refresh_time);
 8001258:	f240 6103 	movw	r1, #1539	; 0x603
 800125c:	4640      	mov	r0, r8

}
 800125e:	b003      	add	sp, #12
 8001260:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	  HAL_SDRAM_SetAutoRefreshNumber(&hsdram1, refresh_time);
 8001264:	f020 bd7f 	b.w	8021d66 <HAL_SDRAM_SetAutoRefreshNumber>

08001268 <_ZN6driver13sdram_handler4initEv>:
    hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001268:	2300      	movs	r3, #0
 800126a:	4a15      	ldr	r2, [pc, #84]	; (80012c0 <_ZN6driver13sdram_handler4initEv+0x58>)
    hsdram1.Init.MemoryDataWidth = memory_width;
 800126c:	2104      	movs	r1, #4
    hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800126e:	f44f 6c00 	mov.w	ip, #2048	; 0x800
{
 8001272:	b510      	push	{r4, lr}
    hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001274:	e9c0 2300 	strd	r2, r3, [r0]
    hsdram1.Init.MemoryDataWidth = memory_width;
 8001278:	2210      	movs	r2, #16
{
 800127a:	b08c      	sub	sp, #48	; 0x30
 800127c:	4604      	mov	r4, r0
    hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800127e:	6083      	str	r3, [r0, #8]
    hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_2;
 8001280:	6143      	str	r3, [r0, #20]
    hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001282:	6283      	str	r3, [r0, #40]	; 0x28
    hsdram1.Init.MemoryDataWidth = memory_width;
 8001284:	e9c0 1203 	strd	r1, r2, [r0, #12]
    hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8001288:	f44f 7280 	mov.w	r2, #256	; 0x100
    hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800128c:	e9c0 2306 	strd	r2, r3, [r0, #24]
    hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8001290:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    SdramTiming.ExitSelfRefreshDelay = 6;
 8001294:	2302      	movs	r3, #2
    hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8001296:	e9c0 c208 	strd	ip, r2, [r0, #32]
    SdramTiming.ExitSelfRefreshDelay = 6;
 800129a:	2206      	movs	r2, #6
    SdramTiming.RCDDelay = 2;
 800129c:	930b      	str	r3, [sp, #44]	; 0x2c
    SdramTiming.RowCycleDelay = 6;
 800129e:	e9cd 1207 	strd	r1, r2, [sp, #28]
    HAL_SDRAM_Init(&hsdram1, &SdramTiming);
 80012a2:	a905      	add	r1, sp, #20
    SdramTiming.ExitSelfRefreshDelay = 6;
 80012a4:	e9cd 3205 	strd	r3, r2, [sp, #20]
    SdramTiming.RPDelay = 2;
 80012a8:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
    HAL_SDRAM_Init(&hsdram1, &SdramTiming);
 80012ac:	f020 fd24 	bl	8021cf8 <HAL_SDRAM_Init>
    this->init_sequence(&hsdram1, &command);
 80012b0:	aa01      	add	r2, sp, #4
 80012b2:	4621      	mov	r1, r4
 80012b4:	4620      	mov	r0, r4
 80012b6:	f7ff ff95 	bl	80011e4 <_ZN6driver13sdram_handler13init_sequenceEP19SDRAM_HandleTypeDefP24FMC_SDRAM_CommandTypeDef>
}
 80012ba:	b00c      	add	sp, #48	; 0x30
 80012bc:	bd10      	pop	{r4, pc}
 80012be:	bf00      	nop
 80012c0:	a0000140 	.word	0xa0000140

080012c4 <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80012c4:	4b0e      	ldr	r3, [pc, #56]	; (8001300 <MX_DMA_Init+0x3c>)
{
 80012c6:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_DMA2_CLK_ENABLE();
 80012c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80012ca:	203b      	movs	r0, #59	; 0x3b
  __HAL_RCC_DMA2_CLK_ENABLE();
 80012cc:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80012d0:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80012d2:	2200      	movs	r2, #0
  __HAL_RCC_DMA2_CLK_ENABLE();
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80012d6:	4611      	mov	r1, r2
  __HAL_RCC_DMA2_CLK_ENABLE();
 80012d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012dc:	9301      	str	r3, [sp, #4]
 80012de:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80012e0:	f01f f9e8 	bl	80206b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80012e4:	203b      	movs	r0, #59	; 0x3b
 80012e6:	f01f fa17 	bl	8020718 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80012ea:	2200      	movs	r2, #0
 80012ec:	2045      	movs	r0, #69	; 0x45
 80012ee:	4611      	mov	r1, r2
 80012f0:	f01f f9e0 	bl	80206b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80012f4:	2045      	movs	r0, #69	; 0x45

}
 80012f6:	b003      	add	sp, #12
 80012f8:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80012fc:	f01f ba0c 	b.w	8020718 <HAL_NVIC_EnableIRQ>
 8001300:	40023800 	.word	0x40023800

08001304 <HAL_SDRAM_MspInit>:
static void HAL_FMC_MspInit(void){
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if (FMC_Initialized) {
 8001304:	4b2b      	ldr	r3, [pc, #172]	; (80013b4 <HAL_SDRAM_MspInit+0xb0>)
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8001306:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (FMC_Initialized) {
 8001308:	681c      	ldr	r4, [r3, #0]
void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 800130a:	b087      	sub	sp, #28
  if (FMC_Initialized) {
 800130c:	2c00      	cmp	r4, #0
 800130e:	d14e      	bne.n	80013ae <HAL_SDRAM_MspInit+0xaa>
  FMC_Initialized = 1;
 8001310:	2201      	movs	r2, #1
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001312:	2702      	movs	r7, #2
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001314:	2603      	movs	r6, #3
 8001316:	250c      	movs	r5, #12
  FMC_Initialized = 1;
 8001318:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800131a:	a901      	add	r1, sp, #4
  __HAL_RCC_FMC_CLK_ENABLE();
 800131c:	4b26      	ldr	r3, [pc, #152]	; (80013b8 <HAL_SDRAM_MspInit+0xb4>)
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800131e:	4827      	ldr	r0, [pc, #156]	; (80013bc <HAL_SDRAM_MspInit+0xb8>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8001320:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001322:	f042 0201 	orr.w	r2, r2, #1
 8001326:	639a      	str	r2, [r3, #56]	; 0x38
 8001328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132a:	9403      	str	r4, [sp, #12]
  __HAL_RCC_FMC_CLK_ENABLE();
 800132c:	f003 0301 	and.w	r3, r3, #1
 8001330:	9300      	str	r3, [sp, #0]
 8001332:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001334:	f64f 7383 	movw	r3, #65411	; 0xff83
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001338:	e9cd 6504 	strd	r6, r5, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800133c:	e9cd 3701 	strd	r3, r7, [sp, #4]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001340:	f01f fab6 	bl	80208b0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
 8001344:	f248 1313 	movw	r3, #33043	; 0x8113
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001348:	a901      	add	r1, sp, #4
 800134a:	481d      	ldr	r0, [pc, #116]	; (80013c0 <HAL_SDRAM_MspInit+0xbc>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800134c:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134e:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001352:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001356:	f01f faab 	bl	80208b0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 800135a:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800135e:	a901      	add	r1, sp, #4
 8001360:	4818      	ldr	r0, [pc, #96]	; (80013c4 <HAL_SDRAM_MspInit+0xc0>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001362:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001364:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001368:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800136c:	f01f faa0 	bl	80208b0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001370:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001374:	a901      	add	r1, sp, #4
 8001376:	4814      	ldr	r0, [pc, #80]	; (80013c8 <HAL_SDRAM_MspInit+0xc4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001378:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137a:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800137e:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001382:	f01f fa95 	bl	80208b0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3;
 8001386:	2328      	movs	r3, #40	; 0x28
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001388:	a901      	add	r1, sp, #4
 800138a:	4810      	ldr	r0, [pc, #64]	; (80013cc <HAL_SDRAM_MspInit+0xc8>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800138c:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138e:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001392:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001396:	f01f fa8b 	bl	80208b0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800139a:	2308      	movs	r3, #8
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800139c:	a901      	add	r1, sp, #4
 800139e:	480c      	ldr	r0, [pc, #48]	; (80013d0 <HAL_SDRAM_MspInit+0xcc>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80013a0:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a2:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a6:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013aa:	f01f fa81 	bl	80208b0 <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80013ae:	b007      	add	sp, #28
 80013b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013b2:	bf00      	nop
 80013b4:	20002954 	.word	0x20002954
 80013b8:	40023800 	.word	0x40023800
 80013bc:	40021000 	.word	0x40021000
 80013c0:	40021800 	.word	0x40021800
 80013c4:	40020c00 	.word	0x40020c00
 80013c8:	40021400 	.word	0x40021400
 80013cc:	40021c00 	.word	0x40021c00
 80013d0:	40020800 	.word	0x40020800

080013d4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80013d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013d8:	b090      	sub	sp, #64	; 0x40

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013da:	2214      	movs	r2, #20
 80013dc:	2100      	movs	r1, #0
  __HAL_RCC_GPIOH_CLK_ENABLE();



  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOK, GPIO_PIN_3, GPIO_PIN_SET);
 80013de:	f8df 8128 	ldr.w	r8, [pc, #296]	; 8001508 <MX_GPIO_Init+0x134>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e2:	a80b      	add	r0, sp, #44	; 0x2c

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1|GPIO_PIN_12, GPIO_PIN_SET);
 80013e4:	4d45      	ldr	r5, [pc, #276]	; (80014fc <MX_GPIO_Init+0x128>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e6:	f021 f911 	bl	802260c <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013ea:	4b45      	ldr	r3, [pc, #276]	; (8001500 <MX_GPIO_Init+0x12c>)
  HAL_GPIO_WritePin(GPIOK, GPIO_PIN_3, GPIO_PIN_SET);
 80013ec:	4640      	mov	r0, r8
 80013ee:	2108      	movs	r1, #8
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30



  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013f2:	2400      	movs	r4, #0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pin : PK3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f4:	2701      	movs	r7, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013f6:	2603      	movs	r6, #3
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013f8:	f042 0210 	orr.w	r2, r2, #16
 80013fc:	631a      	str	r2, [r3, #48]	; 0x30
 80013fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001400:	f002 0210 	and.w	r2, r2, #16
 8001404:	9201      	str	r2, [sp, #4]
 8001406:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001408:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800140a:	f042 0204 	orr.w	r2, r2, #4
 800140e:	631a      	str	r2, [r3, #48]	; 0x30
 8001410:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001412:	f002 0204 	and.w	r2, r2, #4
 8001416:	9202      	str	r2, [sp, #8]
 8001418:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800141a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800141c:	f042 0201 	orr.w	r2, r2, #1
 8001420:	631a      	str	r2, [r3, #48]	; 0x30
 8001422:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001424:	f002 0201 	and.w	r2, r2, #1
 8001428:	9203      	str	r2, [sp, #12]
 800142a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800142c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800142e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001432:	631a      	str	r2, [r3, #48]	; 0x30
 8001434:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001436:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800143a:	9204      	str	r2, [sp, #16]
 800143c:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800143e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001440:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001444:	631a      	str	r2, [r3, #48]	; 0x30
 8001446:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001448:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800144c:	9205      	str	r2, [sp, #20]
 800144e:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001450:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001452:	f042 0208 	orr.w	r2, r2, #8
 8001456:	631a      	str	r2, [r3, #48]	; 0x30
 8001458:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800145a:	f002 0208 	and.w	r2, r2, #8
 800145e:	9206      	str	r2, [sp, #24]
 8001460:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001462:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001464:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001468:	631a      	str	r2, [r3, #48]	; 0x30
 800146a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800146c:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8001470:	9207      	str	r2, [sp, #28]
 8001472:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001474:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001476:	f042 0220 	orr.w	r2, r2, #32
 800147a:	631a      	str	r2, [r3, #48]	; 0x30
 800147c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800147e:	f002 0220 	and.w	r2, r2, #32
 8001482:	9208      	str	r2, [sp, #32]
 8001484:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001486:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001488:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800148c:	631a      	str	r2, [r3, #48]	; 0x30
 800148e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001490:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8001494:	9209      	str	r2, [sp, #36]	; 0x24
 8001496:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001498:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800149a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800149e:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOK, GPIO_PIN_3, GPIO_PIN_SET);
 80014a0:	2201      	movs	r2, #1
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014a8:	930a      	str	r3, [sp, #40]	; 0x28
 80014aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  HAL_GPIO_WritePin(GPIOK, GPIO_PIN_3, GPIO_PIN_SET);
 80014ac:	f01f fae6 	bl	8020a7c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1|GPIO_PIN_12, GPIO_PIN_SET);
 80014b0:	2201      	movs	r2, #1
 80014b2:	4628      	mov	r0, r5
 80014b4:	f241 0102 	movw	r1, #4098	; 0x1002
 80014b8:	f01f fae0 	bl	8020a7c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014c0:	a90b      	add	r1, sp, #44	; 0x2c
 80014c2:	4810      	ldr	r0, [pc, #64]	; (8001504 <MX_GPIO_Init+0x130>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c4:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014c6:	e9cd 340b 	strd	r3, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014ca:	f01f f9f1 	bl	80208b0 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ce:	2308      	movs	r3, #8
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80014d0:	a90b      	add	r1, sp, #44	; 0x2c
 80014d2:	4640      	mov	r0, r8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d4:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d6:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014d8:	e9cd 370b 	strd	r3, r7, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80014dc:	f01f f9e8 	bl	80208b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI1 PI12 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_12;
 80014e0:	f241 0302 	movw	r3, #4098	; 0x1002
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80014e4:	a90b      	add	r1, sp, #44	; 0x2c
 80014e6:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e8:	e9cd 370b 	strd	r3, r7, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ec:	e9cd 460d 	strd	r4, r6, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80014f0:	f01f f9de 	bl	80208b0 <HAL_GPIO_Init>

}
 80014f4:	b010      	add	sp, #64	; 0x40
 80014f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80014fa:	bf00      	nop
 80014fc:	40022000 	.word	0x40022000
 8001500:	40023800 	.word	0x40023800
 8001504:	40020800 	.word	0x40020800
 8001508:	40022800 	.word	0x40022800

0800150c <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 800150c:	b508      	push	{r3, lr}
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800150e:	4812      	ldr	r0, [pc, #72]	; (8001558 <MX_I2C3_Init+0x4c>)
  hi2c3.Init.Timing = 0x0040EAFF;
  hi2c3.Init.OwnAddress1 = 224;
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001510:	21e0      	movs	r1, #224	; 0xe0
  hi2c3.Init.Timing = 0x0040EAFF;
 8001512:	4b12      	ldr	r3, [pc, #72]	; (800155c <MX_I2C3_Init+0x50>)
 8001514:	4a12      	ldr	r2, [pc, #72]	; (8001560 <MX_I2C3_Init+0x54>)
 8001516:	e9c0 2300 	strd	r2, r3, [r0]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800151a:	2301      	movs	r3, #1
 800151c:	e9c0 1302 	strd	r1, r3, [r0, #8]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001520:	2300      	movs	r3, #0
  hi2c3.Init.OwnAddress2 = 0;
 8001522:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001526:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800152a:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800152c:	f01f fbb8 	bl	8020ca0 <HAL_I2C_Init>
 8001530:	b108      	cbz	r0, 8001536 <MX_I2C3_Init+0x2a>
  {
    Error_Handler();
 8001532:	f000 f9b1 	bl	8001898 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001536:	2100      	movs	r1, #0
 8001538:	4807      	ldr	r0, [pc, #28]	; (8001558 <MX_I2C3_Init+0x4c>)
 800153a:	f01f fcc6 	bl	8020eca <HAL_I2CEx_ConfigAnalogFilter>
 800153e:	b108      	cbz	r0, 8001544 <MX_I2C3_Init+0x38>
  {
    Error_Handler();
 8001540:	f000 f9aa 	bl	8001898 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001544:	2100      	movs	r1, #0
 8001546:	4804      	ldr	r0, [pc, #16]	; (8001558 <MX_I2C3_Init+0x4c>)
 8001548:	f01f fce5 	bl	8020f16 <HAL_I2CEx_ConfigDigitalFilter>
 800154c:	b118      	cbz	r0, 8001556 <MX_I2C3_Init+0x4a>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800154e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001552:	f000 b9a1 	b.w	8001898 <Error_Handler>
}
 8001556:	bd08      	pop	{r3, pc}
 8001558:	2000ab9c 	.word	0x2000ab9c
 800155c:	0040eaff 	.word	0x0040eaff
 8001560:	40005c00 	.word	0x40005c00

08001564 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001564:	b510      	push	{r4, lr}
 8001566:	b088      	sub	sp, #32
 8001568:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800156a:	2214      	movs	r2, #20
 800156c:	2100      	movs	r1, #0
 800156e:	a803      	add	r0, sp, #12
 8001570:	f021 f84c 	bl	802260c <memset>
  if(i2cHandle->Instance==I2C3)
 8001574:	6822      	ldr	r2, [r4, #0]
 8001576:	4b17      	ldr	r3, [pc, #92]	; (80015d4 <HAL_I2C_MspInit+0x70>)
 8001578:	429a      	cmp	r2, r3
 800157a:	d129      	bne.n	80015d0 <HAL_I2C_MspInit+0x6c>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOH_CLK_ENABLE();
 800157c:	4c16      	ldr	r4, [pc, #88]	; (80015d8 <HAL_I2C_MspInit+0x74>)
    /**I2C3 GPIO Configuration
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800157e:	f44f 72c0 	mov.w	r2, #384	; 0x180
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001582:	2101      	movs	r1, #1
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001584:	4815      	ldr	r0, [pc, #84]	; (80015dc <HAL_I2C_MspInit+0x78>)
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001586:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001588:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800158c:	6323      	str	r3, [r4, #48]	; 0x30
 800158e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001590:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001594:	9301      	str	r3, [sp, #4]
 8001596:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001598:	2312      	movs	r3, #18
 800159a:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800159e:	2303      	movs	r3, #3
 80015a0:	e9cd 1305 	strd	r1, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80015a4:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80015a6:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80015a8:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80015aa:	f01f f981 	bl	80208b0 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80015ae:	6c23      	ldr	r3, [r4, #64]	; 0x40

    /* I2C3 interrupt Init */
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 80015b0:	2200      	movs	r2, #0
 80015b2:	2048      	movs	r0, #72	; 0x48
    __HAL_RCC_I2C3_CLK_ENABLE();
 80015b4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 80015b8:	4611      	mov	r1, r2
    __HAL_RCC_I2C3_CLK_ENABLE();
 80015ba:	6423      	str	r3, [r4, #64]	; 0x40
 80015bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80015be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80015c2:	9302      	str	r3, [sp, #8]
 80015c4:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 80015c6:	f01f f875 	bl	80206b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 80015ca:	2048      	movs	r0, #72	; 0x48
 80015cc:	f01f f8a4 	bl	8020718 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80015d0:	b008      	add	sp, #32
 80015d2:	bd10      	pop	{r4, pc}
 80015d4:	40005c00 	.word	0x40005c00
 80015d8:	40023800 	.word	0x40023800
 80015dc:	40021c00 	.word	0x40021c00

080015e0 <HAL_LTDC_MspInit>:
  /* USER CODE END LTDC_Init 2 */

}

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 80015e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015e2:	b08d      	sub	sp, #52	; 0x34
 80015e4:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e6:	2214      	movs	r2, #20
 80015e8:	2100      	movs	r1, #0
 80015ea:	a807      	add	r0, sp, #28
 80015ec:	f021 f80e 	bl	802260c <memset>
  if(ltdcHandle->Instance==LTDC)
 80015f0:	6822      	ldr	r2, [r4, #0]
 80015f2:	4b3b      	ldr	r3, [pc, #236]	; (80016e0 <HAL_LTDC_MspInit+0x100>)
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d171      	bne.n	80016dc <HAL_LTDC_MspInit+0xfc>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80015f8:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fc:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015fe:	2500      	movs	r5, #0
 8001600:	2403      	movs	r4, #3
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001602:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001604:	270e      	movs	r7, #14
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001606:	a907      	add	r1, sp, #28
 8001608:	4836      	ldr	r0, [pc, #216]	; (80016e4 <HAL_LTDC_MspInit+0x104>)
    __HAL_RCC_LTDC_CLK_ENABLE();
 800160a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800160e:	645a      	str	r2, [r3, #68]	; 0x44
 8001610:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001612:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8001616:	9201      	str	r2, [sp, #4]
 8001618:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800161a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800161c:	f042 0210 	orr.w	r2, r2, #16
 8001620:	631a      	str	r2, [r3, #48]	; 0x30
 8001622:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001624:	f002 0210 	and.w	r2, r2, #16
 8001628:	9202      	str	r2, [sp, #8]
 800162a:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800162c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800162e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001632:	631a      	str	r2, [r3, #48]	; 0x30
 8001634:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001636:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800163a:	9203      	str	r2, [sp, #12]
 800163c:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 800163e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001640:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001644:	631a      	str	r2, [r3, #48]	; 0x30
 8001646:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001648:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 800164c:	9204      	str	r2, [sp, #16]
 800164e:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001650:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001652:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001656:	631a      	str	r2, [r3, #48]	; 0x30
 8001658:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800165a:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800165e:	9205      	str	r2, [sp, #20]
 8001660:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001662:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001664:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001668:	631a      	str	r2, [r3, #48]	; 0x30
 800166a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001670:	9306      	str	r3, [sp, #24]
 8001672:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001674:	2310      	movs	r3, #16
 8001676:	e9cd 3607 	strd	r3, r6, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800167a:	e9cd 5409 	strd	r5, r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800167e:	970b      	str	r7, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001680:	f01f f916 	bl	80208b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_11
 8001684:	f64e 73ff 	movw	r3, #61439	; 0xefff
                          |GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001688:	a907      	add	r1, sp, #28
 800168a:	4817      	ldr	r0, [pc, #92]	; (80016e8 <HAL_LTDC_MspInit+0x108>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800168c:	970b      	str	r7, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800168e:	e9cd 3607 	strd	r3, r6, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001692:	e9cd 5409 	strd	r5, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001696:	f01f f90b 	bl	80208b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4
 800169a:	23f7      	movs	r3, #247	; 0xf7
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800169c:	a907      	add	r1, sp, #28
 800169e:	4813      	ldr	r0, [pc, #76]	; (80016ec <HAL_LTDC_MspInit+0x10c>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80016a0:	970b      	str	r7, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a2:	e9cd 3607 	strd	r3, r6, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a6:	e9cd 5409 	strd	r5, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80016aa:	f01f f901 	bl	80208b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80016ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016b2:	a907      	add	r1, sp, #28
 80016b4:	480e      	ldr	r0, [pc, #56]	; (80016f0 <HAL_LTDC_MspInit+0x110>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b6:	e9cd 3607 	strd	r3, r6, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80016ba:	2309      	movs	r3, #9
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016bc:	e9cd 5409 	strd	r5, r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80016c0:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016c2:	f01f f8f5 	bl	80208b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_15|GPIO_PIN_14;
 80016c6:	f44f 4346 	mov.w	r3, #50688	; 0xc600
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80016ca:	a907      	add	r1, sp, #28
 80016cc:	4809      	ldr	r0, [pc, #36]	; (80016f4 <HAL_LTDC_MspInit+0x114>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80016ce:	970b      	str	r7, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d0:	e9cd 3607 	strd	r3, r6, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d4:	e9cd 5409 	strd	r5, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80016d8:	f01f f8ea 	bl	80208b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 80016dc:	b00d      	add	sp, #52	; 0x34
 80016de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016e0:	40016800 	.word	0x40016800
 80016e4:	40021000 	.word	0x40021000
 80016e8:	40022400 	.word	0x40022400
 80016ec:	40022800 	.word	0x40022800
 80016f0:	40021800 	.word	0x40021800
 80016f4:	40022000 	.word	0x40022000

080016f8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016fa:	b0b5      	sub	sp, #212	; 0xd4
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016fc:	2210      	movs	r2, #16
 80016fe:	2100      	movs	r1, #0
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001700:	2402      	movs	r4, #2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001702:	a809      	add	r0, sp, #36	; 0x24
  RCC_OscInitStruct.PLL.PLLM = 15;
  RCC_OscInitStruct.PLL.PLLN = 240;
 8001704:	270f      	movs	r7, #15
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001706:	f020 ff81 	bl	802260c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800170a:	2214      	movs	r2, #20
 800170c:	2100      	movs	r1, #0
 800170e:	a802      	add	r0, sp, #8
 8001710:	f020 ff7c 	bl	802260c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001714:	2284      	movs	r2, #132	; 0x84
 8001716:	2100      	movs	r1, #0
 8001718:	a813      	add	r0, sp, #76	; 0x4c
 800171a:	f020 ff77 	bl	802260c <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 800171e:	4b2a      	ldr	r3, [pc, #168]	; (80017c8 <_Z18SystemClock_Configv+0xd0>)
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001720:	2601      	movs	r6, #1
 8001722:	f44f 3580 	mov.w	r5, #65536	; 0x10000
  __HAL_RCC_PWR_CLK_ENABLE();
 8001726:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001728:	a807      	add	r0, sp, #28
  __HAL_RCC_PWR_CLK_ENABLE();
 800172a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800172e:	641a      	str	r2, [r3, #64]	; 0x40
 8001730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001736:	9300      	str	r3, [sp, #0]
 8001738:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800173a:	4b24      	ldr	r3, [pc, #144]	; (80017cc <_Z18SystemClock_Configv+0xd4>)
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001742:	601a      	str	r2, [r3, #0]
 8001744:	681b      	ldr	r3, [r3, #0]
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001746:	9411      	str	r4, [sp, #68]	; 0x44
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001748:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800174c:	9301      	str	r3, [sp, #4]
 800174e:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001750:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001754:	e9cd 430d 	strd	r4, r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 240;
 8001758:	23f0      	movs	r3, #240	; 0xf0
 800175a:	e9cd 730f 	strd	r7, r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800175e:	2309      	movs	r3, #9
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001760:	e9cd 6507 	strd	r6, r5, [sp, #28]
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001764:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001766:	f01f fd6b 	bl	8021240 <HAL_RCC_OscConfig>
 800176a:	b100      	cbz	r0, 800176e <_Z18SystemClock_Configv+0x76>
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  while (1)
 800176c:	e7fe      	b.n	800176c <_Z18SystemClock_Configv+0x74>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800176e:	f01f fd2f 	bl	80211d0 <HAL_PWREx_EnableOverDrive>
 8001772:	b100      	cbz	r0, 8001776 <_Z18SystemClock_Configv+0x7e>
  while (1)
 8001774:	e7fe      	b.n	8001774 <_Z18SystemClock_Configv+0x7c>
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001776:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800177a:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800177c:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001780:	2106      	movs	r1, #6
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001782:	e9cd 0305 	strd	r0, r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001786:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001788:	e9cd 7402 	strd	r7, r4, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800178c:	f01f ff4c 	bl	8021628 <HAL_RCC_ClockConfig>
 8001790:	b100      	cbz	r0, 8001794 <_Z18SystemClock_Configv+0x9c>
  while (1)
 8001792:	e7fe      	b.n	8001792 <_Z18SystemClock_Configv+0x9a>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_I2C3
 8001794:	4b0e      	ldr	r3, [pc, #56]	; (80017d0 <_Z18SystemClock_Configv+0xd8>)
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001796:	902e      	str	r0, [sp, #184]	; 0xb8
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_I2C3
 8001798:	9313      	str	r3, [sp, #76]	; 0x4c
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 114;
 800179a:	2372      	movs	r3, #114	; 0x72
 800179c:	9318      	str	r3, [sp, #96]	; 0x60
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 800179e:	2305      	movs	r3, #5
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80017a0:	e9cd 4319 	strd	r4, r3, [sp, #100]	; 0x64
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 80017a4:	2303      	movs	r3, #3
 80017a6:	931b      	str	r3, [sp, #108]	; 0x6c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 80017a8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 80017ac:	e9cd 3032 	strd	r3, r0, [sp, #200]	; 0xc8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017b0:	a813      	add	r0, sp, #76	; 0x4c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 80017b2:	e9cd 651d 	strd	r6, r5, [sp, #116]	; 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017b6:	f020 f817 	bl	80217e8 <HAL_RCCEx_PeriphCLKConfig>
 80017ba:	b100      	cbz	r0, 80017be <_Z18SystemClock_Configv+0xc6>
  while (1)
 80017bc:	e7fe      	b.n	80017bc <_Z18SystemClock_Configv+0xc4>
  HAL_RCC_EnableCSS();
 80017be:	f01f fefd 	bl	80215bc <HAL_RCC_EnableCSS>
}
 80017c2:	b035      	add	sp, #212	; 0xd4
 80017c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017c6:	bf00      	nop
 80017c8:	40023800 	.word	0x40023800
 80017cc:	40007000 	.word	0x40007000
 80017d0:	00a10008 	.word	0x00a10008

080017d4 <main>:
{
 80017d4:	b508      	push	{r3, lr}
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80017d6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80017da:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80017de:	4b24      	ldr	r3, [pc, #144]	; (8001870 <main+0x9c>)
 80017e0:	2100      	movs	r1, #0
 80017e2:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80017e6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80017ea:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80017ee:	695a      	ldr	r2, [r3, #20]
 80017f0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80017f4:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80017f6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80017fa:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80017fe:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001802:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001806:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800180a:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800180e:	f3c2 00c9 	ubfx	r0, r2, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001812:	f3c2 324e 	ubfx	r2, r2, #13, #15
 8001816:	0152      	lsls	r2, r2, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001818:	ea02 0604 	and.w	r6, r2, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800181c:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800181e:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001822:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001824:	f8c3 5260 	str.w	r5, [r3, #608]	; 0x260
      } while (ways-- != 0U);
 8001828:	d2f9      	bcs.n	800181e <main+0x4a>
    } while(sets-- != 0U);
 800182a:	3a20      	subs	r2, #32
 800182c:	f112 0f20 	cmn.w	r2, #32
 8001830:	d1f2      	bne.n	8001818 <main+0x44>
 8001832:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001836:	695a      	ldr	r2, [r3, #20]
 8001838:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800183c:	615a      	str	r2, [r3, #20]
 800183e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001842:	f3bf 8f6f 	isb	sy
	  app.app_run();
 8001846:	4c0b      	ldr	r4, [pc, #44]	; (8001874 <main+0xa0>)
  HAL_Init();
 8001848:	f01e ff04 	bl	8020654 <HAL_Init>
  SystemClock_Config();
 800184c:	f7ff ff54 	bl	80016f8 <_Z18SystemClock_Configv>
  MX_GPIO_Init();
 8001850:	f7ff fdc0 	bl	80013d4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001854:	f7ff fd36 	bl	80012c4 <MX_DMA_Init>
  MX_TIM2_Init();
 8001858:	f000 f94a 	bl	8001af0 <MX_TIM2_Init>
  app.app_init();
 800185c:	4805      	ldr	r0, [pc, #20]	; (8001874 <main+0xa0>)
 800185e:	f000 f9c7 	bl	8001bf0 <_ZN3app11application8app_initEv>
	  app.app_run();
 8001862:	4620      	mov	r0, r4
 8001864:	f000 f9e2 	bl	8001c2c <_ZN3app11application7app_runEv>
 * GLOBAL PROTOTYPES
 **********************/

static inline LV_ATTRIBUTE_TIMER_HANDLER uint32_t lv_task_handler(void)
{
    return lv_timer_handler();
 8001868:	f016 ff50 	bl	801870c <lv_timer_handler>
 800186c:	e7f9      	b.n	8001862 <main+0x8e>
 800186e:	bf00      	nop
 8001870:	e000ed00 	.word	0xe000ed00
 8001874:	2000298c 	.word	0x2000298c

08001878 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM1) {
 8001878:	6802      	ldr	r2, [r0, #0]
{
 800187a:	b508      	push	{r3, lr}
  if (htim->Instance == TIM1) {
 800187c:	4b05      	ldr	r3, [pc, #20]	; (8001894 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 800187e:	429a      	cmp	r2, r3
 8001880:	d106      	bne.n	8001890 <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 8001882:	f01e fef3 	bl	802066c <HAL_IncTick>
    lv_tick_inc(1);
 8001886:	2001      	movs	r0, #1
}
 8001888:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    lv_tick_inc(1);
 800188c:	f015 b8b4 	b.w	80169f8 <lv_tick_inc>
}
 8001890:	bd08      	pop	{r3, pc}
 8001892:	bf00      	nop
 8001894:	40010000 	.word	0x40010000

08001898 <Error_Handler>:
  while (1)
 8001898:	e7fe      	b.n	8001898 <Error_Handler>

0800189a <_ZNSt8_Rb_treeI10file_typesSt4pairIKS0_PKcESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>:
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800189a:	b570      	push	{r4, r5, r6, lr}
 800189c:	4605      	mov	r5, r0
 800189e:	460c      	mov	r4, r1
    _M_erase(_Link_type __x)
    {
      // Erase without rebalancing.
      while (__x != 0)
 80018a0:	b14c      	cbz	r4, 80018b6 <_ZNSt8_Rb_treeI10file_typesSt4pairIKS0_PKcESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x1c>
	{
	  _M_erase(_S_right(__x));
 80018a2:	68e1      	ldr	r1, [r4, #12]
 80018a4:	4628      	mov	r0, r5
 80018a6:	f7ff fff8 	bl	800189a <_ZNSt8_Rb_treeI10file_typesSt4pairIKS0_PKcESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>
	  _Link_type __y = _S_left(__x);
 80018aa:	68a6      	ldr	r6, [r4, #8]
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
 80018ac:	4620      	mov	r0, r4
 80018ae:	f020 fd72 	bl	8022396 <_ZdlPv>
	  _M_drop_node(__x);
	  __x = __y;
 80018b2:	4634      	mov	r4, r6
      while (__x != 0)
 80018b4:	e7f4      	b.n	80018a0 <_ZNSt8_Rb_treeI10file_typesSt4pairIKS0_PKcESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x6>
	}
    }
 80018b6:	bd70      	pop	{r4, r5, r6, pc}

080018b8 <_GLOBAL__sub_I_main>:
public:
	displayer_gui_driver() = default;
	void gui_init();
	static void displayer_interface(lv_disp_drv_t * disp, const lv_area_t * area, lv_color_t * color_p);
private:
	static inline driver::displayer display;
 80018b8:	4a0e      	ldr	r2, [pc, #56]	; (80018f4 <_GLOBAL__sub_I_main+0x3c>)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80018ba:	b508      	push	{r3, lr}
 80018bc:	6813      	ldr	r3, [r2, #0]
 80018be:	3301      	adds	r3, #1
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	6013      	str	r3, [r2, #0]
 80018c4:	d102      	bne.n	80018cc <_GLOBAL__sub_I_main+0x14>
 80018c6:	480c      	ldr	r0, [pc, #48]	; (80018f8 <_GLOBAL__sub_I_main+0x40>)
 80018c8:	f7ff fb14 	bl	8000ef4 <_ZN6driver9displayerC1Ev>
	static inline driver::sdram_handler sdram;
 80018cc:	4a0b      	ldr	r2, [pc, #44]	; (80018fc <_GLOBAL__sub_I_main+0x44>)
 80018ce:	6813      	ldr	r3, [r2, #0]
 80018d0:	3301      	adds	r3, #1
 80018d2:	6013      	str	r3, [r2, #0]
{
public:
	void app_init();
	void app_run();
private:
	static inline gui::displayer_gui_driver gui;
 80018d4:	4a0a      	ldr	r2, [pc, #40]	; (8001900 <_GLOBAL__sub_I_main+0x48>)
 80018d6:	6813      	ldr	r3, [r2, #0]
 80018d8:	3301      	adds	r3, #1
 80018da:	6013      	str	r3, [r2, #0]
	static inline gui::touch_screen_gui_driver ts;
	static inline main_window mw;
 80018dc:	4a09      	ldr	r2, [pc, #36]	; (8001904 <_GLOBAL__sub_I_main+0x4c>)
 80018de:	6813      	ldr	r3, [r2, #0]
 80018e0:	3301      	adds	r3, #1
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	6013      	str	r3, [r2, #0]
 80018e6:	d104      	bne.n	80018f2 <_GLOBAL__sub_I_main+0x3a>
 80018e8:	4807      	ldr	r0, [pc, #28]	; (8001908 <_GLOBAL__sub_I_main+0x50>)
 80018ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80018ee:	f000 ba05 	b.w	8001cfc <_ZN11main_windowC1Ev>
 80018f2:	bd08      	pop	{r3, pc}
 80018f4:	20000268 	.word	0x20000268
 80018f8:	200002a4 	.word	0x200002a4
 80018fc:	20000264 	.word	0x20000264
 8001900:	2000295c 	.word	0x2000295c
 8001904:	20002958 	.word	0x20002958
 8001908:	20002960 	.word	0x20002960

0800190c <_GLOBAL__sub_D_main>:
 800190c:	4a05      	ldr	r2, [pc, #20]	; (8001924 <_GLOBAL__sub_D_main+0x18>)
 800190e:	b508      	push	{r3, lr}
 8001910:	6813      	ldr	r3, [r2, #0]
 8001912:	3b01      	subs	r3, #1
 8001914:	6013      	str	r3, [r2, #0]
 8001916:	b91b      	cbnz	r3, 8001920 <_GLOBAL__sub_D_main+0x14>
      { _M_erase(_M_begin()); }
 8001918:	4803      	ldr	r0, [pc, #12]	; (8001928 <_GLOBAL__sub_D_main+0x1c>)
 800191a:	6881      	ldr	r1, [r0, #8]
 800191c:	f7ff ffbd 	bl	800189a <_ZNSt8_Rb_treeI10file_typesSt4pairIKS0_PKcESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>
 8001920:	bd08      	pop	{r3, pc}
 8001922:	bf00      	nop
 8001924:	20002958 	.word	0x20002958
 8001928:	20002960 	.word	0x20002960

0800192c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800192c:	4b0a      	ldr	r3, [pc, #40]	; (8001958 <HAL_MspInit+0x2c>)
{
 800192e:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 8001930:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001932:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001936:	641a      	str	r2, [r3, #64]	; 0x40
 8001938:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800193a:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800193e:	9200      	str	r2, [sp, #0]
 8001940:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001942:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001944:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001948:	645a      	str	r2, [r3, #68]	; 0x44
 800194a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001950:	9301      	str	r3, [sp, #4]
 8001952:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001954:	b002      	add	sp, #8
 8001956:	4770      	bx	lr
 8001958:	40023800 	.word	0x40023800

0800195c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800195c:	b510      	push	{r4, lr}
 800195e:	4601      	mov	r1, r0
 8001960:	b088      	sub	sp, #32
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8001962:	2200      	movs	r2, #0
 8001964:	2019      	movs	r0, #25
 8001966:	f01e fea5 	bl	80206b4 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800196a:	2019      	movs	r0, #25
 800196c:	f01e fed4 	bl	8020718 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001970:	4b14      	ldr	r3, [pc, #80]	; (80019c4 <HAL_InitTick+0x68>)

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001972:	a901      	add	r1, sp, #4
 8001974:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001976:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001978:	4c13      	ldr	r4, [pc, #76]	; (80019c8 <HAL_InitTick+0x6c>)
  __HAL_RCC_TIM1_CLK_ENABLE();
 800197a:	f042 0201 	orr.w	r2, r2, #1
 800197e:	645a      	str	r2, [r3, #68]	; 0x44
 8001980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001982:	f003 0301 	and.w	r3, r3, #1
 8001986:	9302      	str	r3, [sp, #8]
 8001988:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800198a:	f01f fefd 	bl	8021788 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800198e:	f01f feeb 	bl	8021768 <HAL_RCC_GetPCLK2Freq>
  htim1.Instance = TIM1;
 8001992:	4b0e      	ldr	r3, [pc, #56]	; (80019cc <HAL_InitTick+0x70>)
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001994:	0040      	lsls	r0, r0, #1
  htim1.Instance = TIM1;
 8001996:	6023      	str	r3, [r4, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001998:	f240 33e7 	movw	r3, #999	; 0x3e7
 800199c:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800199e:	4b0c      	ldr	r3, [pc, #48]	; (80019d0 <HAL_InitTick+0x74>)
 80019a0:	fbb0 f0f3 	udiv	r0, r0, r3
 80019a4:	3801      	subs	r0, #1
  htim1.Init.Prescaler = uwPrescalerValue;
  htim1.Init.ClockDivision = 0;
 80019a6:	2300      	movs	r3, #0
  htim1.Init.Prescaler = uwPrescalerValue;
 80019a8:	6060      	str	r0, [r4, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80019aa:	4620      	mov	r0, r4
  htim1.Init.ClockDivision = 0;
 80019ac:	6123      	str	r3, [r4, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019ae:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80019b0:	f020 fb44 	bl	802203c <HAL_TIM_Base_Init>
 80019b4:	b920      	cbnz	r0, 80019c0 <HAL_InitTick+0x64>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80019b6:	4620      	mov	r0, r4
 80019b8:	f020 f9e8 	bl	8021d8c <HAL_TIM_Base_Start_IT>
  }

  /* Return function status */
  return HAL_ERROR;
}
 80019bc:	b008      	add	sp, #32
 80019be:	bd10      	pop	{r4, pc}
  return HAL_ERROR;
 80019c0:	2001      	movs	r0, #1
 80019c2:	e7fb      	b.n	80019bc <HAL_InitTick+0x60>
 80019c4:	40023800 	.word	0x40023800
 80019c8:	2000ad2c 	.word	0x2000ad2c
 80019cc:	40010000 	.word	0x40010000
 80019d0:	000f4240 	.word	0x000f4240

080019d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019d4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80019d6:	f01f fef7 	bl	80217c8 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019da:	e7fe      	b.n	80019da <NMI_Handler+0x6>

080019dc <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019dc:	e7fe      	b.n	80019dc <HardFault_Handler>

080019de <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019de:	e7fe      	b.n	80019de <MemManage_Handler>

080019e0 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019e0:	e7fe      	b.n	80019e0 <BusFault_Handler>

080019e2 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019e2:	e7fe      	b.n	80019e2 <UsageFault_Handler>

080019e4 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019e4:	4770      	bx	lr

080019e6 <DebugMon_Handler>:
 80019e6:	4770      	bx	lr

080019e8 <PendSV_Handler>:
 80019e8:	4770      	bx	lr

080019ea <SysTick_Handler>:
 80019ea:	4770      	bx	lr

080019ec <TIM1_UP_TIM10_IRQHandler>:
void TIM1_UP_TIM10_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80019ec:	4801      	ldr	r0, [pc, #4]	; (80019f4 <TIM1_UP_TIM10_IRQHandler+0x8>)
 80019ee:	f020 ba0f 	b.w	8021e10 <HAL_TIM_IRQHandler>
 80019f2:	bf00      	nop
 80019f4:	2000ad2c 	.word	0x2000ad2c

080019f8 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80019f8:	4801      	ldr	r0, [pc, #4]	; (8001a00 <TIM2_IRQHandler+0x8>)
 80019fa:	f020 ba09 	b.w	8021e10 <HAL_TIM_IRQHandler>
 80019fe:	bf00      	nop
 8001a00:	2000ad78 	.word	0x2000ad78

08001a04 <DMA2_Stream3_IRQHandler>:
void DMA2_Stream3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8001a04:	4801      	ldr	r0, [pc, #4]	; (8001a0c <DMA2_Stream3_IRQHandler+0x8>)
 8001a06:	f01e be95 	b.w	8020734 <HAL_DMA_IRQHandler>
 8001a0a:	bf00      	nop
 8001a0c:	2000ac6c 	.word	0x2000ac6c

08001a10 <DMA2_Stream6_IRQHandler>:
void DMA2_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8001a10:	4801      	ldr	r0, [pc, #4]	; (8001a18 <DMA2_Stream6_IRQHandler+0x8>)
 8001a12:	f01e be8f 	b.w	8020734 <HAL_DMA_IRQHandler>
 8001a16:	bf00      	nop
 8001a18:	2000accc 	.word	0x2000accc

08001a1c <I2C3_EV_IRQHandler>:
void I2C3_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8001a1c:	4801      	ldr	r0, [pc, #4]	; (8001a24 <I2C3_EV_IRQHandler+0x8>)
 8001a1e:	f01f ba4d 	b.w	8020ebc <HAL_I2C_EV_IRQHandler>
 8001a22:	bf00      	nop
 8001a24:	2000ab9c 	.word	0x2000ab9c

08001a28 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001a28:	2001      	movs	r0, #1
 8001a2a:	4770      	bx	lr

08001a2c <_kill>:

int _kill(int pid, int sig)
{
 8001a2c:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001a2e:	f020 fd93 	bl	8022558 <__errno>
 8001a32:	2316      	movs	r3, #22
 8001a34:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001a36:	f04f 30ff 	mov.w	r0, #4294967295
 8001a3a:	bd08      	pop	{r3, pc}

08001a3c <_exit>:

void _exit (int status)
{
 8001a3c:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001a3e:	f020 fd8b 	bl	8022558 <__errno>
 8001a42:	2316      	movs	r3, #22
 8001a44:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8001a46:	e7fe      	b.n	8001a46 <_exit+0xa>

08001a48 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a48:	b570      	push	{r4, r5, r6, lr}
 8001a4a:	460e      	mov	r6, r1
 8001a4c:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a4e:	2500      	movs	r5, #0
 8001a50:	42a5      	cmp	r5, r4
 8001a52:	db01      	blt.n	8001a58 <_read+0x10>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8001a54:	4620      	mov	r0, r4
 8001a56:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8001a58:	f3af 8000 	nop.w
 8001a5c:	5570      	strb	r0, [r6, r5]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a5e:	3501      	adds	r5, #1
 8001a60:	e7f6      	b.n	8001a50 <_read+0x8>

08001a62 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a62:	b570      	push	{r4, r5, r6, lr}
 8001a64:	460e      	mov	r6, r1
 8001a66:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a68:	2500      	movs	r5, #0
 8001a6a:	42a5      	cmp	r5, r4
 8001a6c:	db01      	blt.n	8001a72 <_write+0x10>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8001a6e:	4620      	mov	r0, r4
 8001a70:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8001a72:	5d70      	ldrb	r0, [r6, r5]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a74:	3501      	adds	r5, #1
		__io_putchar(*ptr++);
 8001a76:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a7a:	e7f6      	b.n	8001a6a <_write+0x8>

08001a7c <_close>:

int _close(int file)
{
	return -1;
}
 8001a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a80:	4770      	bx	lr

08001a82 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001a82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8001a86:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8001a88:	604b      	str	r3, [r1, #4]
}
 8001a8a:	4770      	bx	lr

08001a8c <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001a8c:	2001      	movs	r0, #1
 8001a8e:	4770      	bx	lr

08001a90 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001a90:	2000      	movs	r0, #0
 8001a92:	4770      	bx	lr

08001a94 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a94:	4b0b      	ldr	r3, [pc, #44]	; (8001ac4 <_sbrk+0x30>)
{
 8001a96:	4602      	mov	r2, r0
  if (NULL == __sbrk_heap_end)
 8001a98:	6819      	ldr	r1, [r3, #0]
{
 8001a9a:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8001a9c:	b909      	cbnz	r1, 8001aa2 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8001a9e:	490a      	ldr	r1, [pc, #40]	; (8001ac8 <_sbrk+0x34>)
 8001aa0:	6019      	str	r1, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001aa2:	6818      	ldr	r0, [r3, #0]
 8001aa4:	4909      	ldr	r1, [pc, #36]	; (8001acc <_sbrk+0x38>)
 8001aa6:	4c0a      	ldr	r4, [pc, #40]	; (8001ad0 <_sbrk+0x3c>)
 8001aa8:	4402      	add	r2, r0
 8001aaa:	1b09      	subs	r1, r1, r4
 8001aac:	428a      	cmp	r2, r1
 8001aae:	d906      	bls.n	8001abe <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001ab0:	f020 fd52 	bl	8022558 <__errno>
 8001ab4:	230c      	movs	r3, #12
 8001ab6:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001ab8:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001abc:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8001abe:	601a      	str	r2, [r3, #0]
  return (void *)prev_heap_end;
 8001ac0:	e7fc      	b.n	8001abc <_sbrk+0x28>
 8001ac2:	bf00      	nop
 8001ac4:	20002990 	.word	0x20002990
 8001ac8:	2000af98 	.word	0x2000af98
 8001acc:	20050000 	.word	0x20050000
 8001ad0:	00000400 	.word	0x00000400

08001ad4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ad4:	4b05      	ldr	r3, [pc, #20]	; (8001aec <SystemInit+0x18>)
 8001ad6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001ada:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8001ade:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001ae2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ae6:	609a      	str	r2, [r3, #8]
#endif
}
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	e000ed00 	.word	0xe000ed00

08001af0 <MX_TIM2_Init>:

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001af0:	2210      	movs	r2, #16
 8001af2:	2100      	movs	r1, #0
{
 8001af4:	b500      	push	{lr}
 8001af6:	b089      	sub	sp, #36	; 0x24
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001af8:	eb0d 0002 	add.w	r0, sp, r2
 8001afc:	f020 fd86 	bl	802260c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b00:	4816      	ldr	r0, [pc, #88]	; (8001b5c <MX_TIM2_Init+0x6c>)
  htim2.Init.Prescaler = 10000;
 8001b02:	f242 7210 	movw	r2, #10000	; 0x2710
 8001b06:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b0a:	2300      	movs	r3, #0
  htim2.Init.Prescaler = 10000;
 8001b0c:	e9c0 1200 	strd	r1, r2, [r0]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 100;
 8001b10:	2264      	movs	r2, #100	; 0x64
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b12:	9303      	str	r3, [sp, #12]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b14:	6083      	str	r3, [r0, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b16:	6183      	str	r3, [r0, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b18:	e9cd 3301 	strd	r3, r3, [sp, #4]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b1c:	e9c0 2303 	strd	r2, r3, [r0, #12]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b20:	f020 fa8c 	bl	802203c <HAL_TIM_Base_Init>
 8001b24:	b108      	cbz	r0, 8001b2a <MX_TIM2_Init+0x3a>
  {
    Error_Handler();
 8001b26:	f7ff feb7 	bl	8001898 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b2e:	a904      	add	r1, sp, #16
 8001b30:	480a      	ldr	r0, [pc, #40]	; (8001b5c <MX_TIM2_Init+0x6c>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b32:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b34:	f020 fabc 	bl	80220b0 <HAL_TIM_ConfigClockSource>
 8001b38:	b108      	cbz	r0, 8001b3e <MX_TIM2_Init+0x4e>
  {
    Error_Handler();
 8001b3a:	f7ff fead 	bl	8001898 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001b3e:	2320      	movs	r3, #32
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b40:	a901      	add	r1, sp, #4
 8001b42:	4806      	ldr	r0, [pc, #24]	; (8001b5c <MX_TIM2_Init+0x6c>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001b44:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b46:	2300      	movs	r3, #0
 8001b48:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b4a:	f020 fb45 	bl	80221d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001b4e:	b108      	cbz	r0, 8001b54 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8001b50:	f7ff fea2 	bl	8001898 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b54:	b009      	add	sp, #36	; 0x24
 8001b56:	f85d fb04 	ldr.w	pc, [sp], #4
 8001b5a:	bf00      	nop
 8001b5c:	2000ad78 	.word	0x2000ad78

08001b60 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM2)
 8001b60:	6803      	ldr	r3, [r0, #0]
 8001b62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 8001b66:	b507      	push	{r0, r1, r2, lr}
  if(tim_baseHandle->Instance==TIM2)
 8001b68:	d115      	bne.n	8001b96 <HAL_TIM_Base_MspInit+0x36>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b6a:	f503 330e 	add.w	r3, r3, #145408	; 0x23800

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001b6e:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b72:	f042 0201 	orr.w	r2, r2, #1
 8001b76:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001b78:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001b7c:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b7e:	f003 0301 	and.w	r3, r3, #1
 8001b82:	9301      	str	r3, [sp, #4]
 8001b84:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001b86:	f01e fd95 	bl	80206b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001b8a:	201c      	movs	r0, #28
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001b8c:	b003      	add	sp, #12
 8001b8e:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001b92:	f01e bdc1 	b.w	8020718 <HAL_NVIC_EnableIRQ>
}
 8001b96:	b003      	add	sp, #12
 8001b98:	f85d fb04 	ldr.w	pc, [sp], #4

08001b9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bd4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001ba0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001ba2:	e003      	b.n	8001bac <LoopCopyDataInit>

08001ba4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001ba4:	4b0c      	ldr	r3, [pc, #48]	; (8001bd8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001ba6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001ba8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001baa:	3104      	adds	r1, #4

08001bac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001bac:	480b      	ldr	r0, [pc, #44]	; (8001bdc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001bae:	4b0c      	ldr	r3, [pc, #48]	; (8001be0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001bb0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001bb2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001bb4:	d3f6      	bcc.n	8001ba4 <CopyDataInit>
  ldr  r2, =_sbss
 8001bb6:	4a0b      	ldr	r2, [pc, #44]	; (8001be4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001bb8:	e002      	b.n	8001bc0 <LoopFillZerobss>

08001bba <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001bba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001bbc:	f842 3b04 	str.w	r3, [r2], #4

08001bc0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001bc0:	4b09      	ldr	r3, [pc, #36]	; (8001be8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001bc2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001bc4:	d3f9      	bcc.n	8001bba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001bc6:	f7ff ff85 	bl	8001ad4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bca:	f020 fcdd 	bl	8022588 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bce:	f7ff fe01 	bl	80017d4 <main>
  bx  lr    
 8001bd2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001bd4:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8001bd8:	08029a10 	.word	0x08029a10
  ldr  r0, =_sdata
 8001bdc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001be0:	20000248 	.word	0x20000248
  ldr  r2, =_sbss
 8001be4:	20000248 	.word	0x20000248
  ldr  r3, = _ebss
 8001be8:	2000af98 	.word	0x2000af98

08001bec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bec:	e7fe      	b.n	8001bec <ADC_IRQHandler>
	...

08001bf0 <_ZN3app11application8app_initEv>:
{



void application::app_init()
{
 8001bf0:	b510      	push	{r4, lr}
	gui.gui_init();
 8001bf2:	480c      	ldr	r0, [pc, #48]	; (8001c24 <_ZN3app11application8app_initEv+0x34>)
 8001bf4:	f7ff fa20 	bl	8001038 <_ZN3gui20displayer_gui_driver8gui_initEv>

	ts.ts_init();
 8001bf8:	480b      	ldr	r0, [pc, #44]	; (8001c28 <_ZN3app11application8app_initEv+0x38>)
 8001bfa:	f7ff fadf 	bl	80011bc <_ZN3gui23touch_screen_gui_driver7ts_initEv>
 * Get the active screen of the default display
 * @return pointer to the active screen
 */
static inline lv_obj_t * lv_scr_act(void)
{
    return lv_disp_get_scr_act(lv_disp_get_default());
 8001bfe:	f014 fe53 	bl	80168a8 <lv_disp_get_default>
 8001c02:	f000 f8c7 	bl	8001d94 <lv_disp_get_scr_act>

	lv_obj_t* button = lv_btn_create(lv_scr_act());
 8001c06:	f018 ffdb 	bl	801abc0 <lv_btn_create>

	lv_obj_set_pos(button, 10, 10);
 8001c0a:	220a      	movs	r2, #10
	lv_obj_t* button = lv_btn_create(lv_scr_act());
 8001c0c:	4604      	mov	r4, r0
	lv_obj_set_pos(button, 10, 10);
 8001c0e:	4611      	mov	r1, r2
 8001c10:	f003 f88c 	bl	8004d2c <lv_obj_set_pos>
	lv_obj_set_size(button, 100, 40);
 8001c14:	4620      	mov	r0, r4
 8001c16:	2228      	movs	r2, #40	; 0x28
 8001c18:	2164      	movs	r1, #100	; 0x64


}
 8001c1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lv_obj_set_size(button, 100, 40);
 8001c1e:	f003 b809 	b.w	8004c34 <lv_obj_set_size>
 8001c22:	bf00      	nop
 8001c24:	20002995 	.word	0x20002995
 8001c28:	20002994 	.word	0x20002994

08001c2c <_ZN3app11application7app_runEv>:
void application::app_run()
{



}
 8001c2c:	4770      	bx	lr
	...

08001c30 <_GLOBAL__sub_I__ZN3app11application8app_initEv>:
	static inline driver::displayer display;
 8001c30:	4a0e      	ldr	r2, [pc, #56]	; (8001c6c <_GLOBAL__sub_I__ZN3app11application8app_initEv+0x3c>)

}
 8001c32:	b508      	push	{r3, lr}
 8001c34:	6813      	ldr	r3, [r2, #0]
 8001c36:	3301      	adds	r3, #1
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	6013      	str	r3, [r2, #0]
 8001c3c:	d102      	bne.n	8001c44 <_GLOBAL__sub_I__ZN3app11application8app_initEv+0x14>
 8001c3e:	480c      	ldr	r0, [pc, #48]	; (8001c70 <_GLOBAL__sub_I__ZN3app11application8app_initEv+0x40>)
 8001c40:	f7ff f958 	bl	8000ef4 <_ZN6driver9displayerC1Ev>
	static inline driver::sdram_handler sdram;
 8001c44:	4a0b      	ldr	r2, [pc, #44]	; (8001c74 <_GLOBAL__sub_I__ZN3app11application8app_initEv+0x44>)
 8001c46:	6813      	ldr	r3, [r2, #0]
 8001c48:	3301      	adds	r3, #1
 8001c4a:	6013      	str	r3, [r2, #0]
{
public:
	void app_init();
	void app_run();
private:
	static inline gui::displayer_gui_driver gui;
 8001c4c:	4a0a      	ldr	r2, [pc, #40]	; (8001c78 <_GLOBAL__sub_I__ZN3app11application8app_initEv+0x48>)
 8001c4e:	6813      	ldr	r3, [r2, #0]
 8001c50:	3301      	adds	r3, #1
 8001c52:	6013      	str	r3, [r2, #0]
	static inline gui::touch_screen_gui_driver ts;
	static inline main_window mw;
 8001c54:	4a09      	ldr	r2, [pc, #36]	; (8001c7c <_GLOBAL__sub_I__ZN3app11application8app_initEv+0x4c>)
 8001c56:	6813      	ldr	r3, [r2, #0]
 8001c58:	3301      	adds	r3, #1
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	6013      	str	r3, [r2, #0]
 8001c5e:	d104      	bne.n	8001c6a <_GLOBAL__sub_I__ZN3app11application8app_initEv+0x3a>
 8001c60:	4807      	ldr	r0, [pc, #28]	; (8001c80 <_GLOBAL__sub_I__ZN3app11application8app_initEv+0x50>)
 8001c62:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001c66:	f000 b849 	b.w	8001cfc <_ZN11main_windowC1Ev>
 8001c6a:	bd08      	pop	{r3, pc}
 8001c6c:	20000268 	.word	0x20000268
 8001c70:	200002a4 	.word	0x200002a4
 8001c74:	20000264 	.word	0x20000264
 8001c78:	2000295c 	.word	0x2000295c
 8001c7c:	20002958 	.word	0x20002958
 8001c80:	20002960 	.word	0x20002960

08001c84 <_GLOBAL__sub_D__ZN3app11application8app_initEv>:
 8001c84:	4a05      	ldr	r2, [pc, #20]	; (8001c9c <_GLOBAL__sub_D__ZN3app11application8app_initEv+0x18>)
 8001c86:	b508      	push	{r3, lr}
 8001c88:	6813      	ldr	r3, [r2, #0]
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	6013      	str	r3, [r2, #0]
 8001c8e:	b91b      	cbnz	r3, 8001c98 <_GLOBAL__sub_D__ZN3app11application8app_initEv+0x14>
 8001c90:	4803      	ldr	r0, [pc, #12]	; (8001ca0 <_GLOBAL__sub_D__ZN3app11application8app_initEv+0x1c>)
 8001c92:	6881      	ldr	r1, [r0, #8]
 8001c94:	f7ff fe01 	bl	800189a <_ZNSt8_Rb_treeI10file_typesSt4pairIKS0_PKcESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>
 8001c98:	bd08      	pop	{r3, pc}
 8001c9a:	bf00      	nop
 8001c9c:	20002958 	.word	0x20002958
 8001ca0:	20002960 	.word	0x20002960

08001ca4 <_ZNSt8_Rb_treeI10file_typesSt4pairIKS0_PKcESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_>:
	   typename _Compare, typename _Alloc>
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
			   _Compare, _Alloc>::_Base_ptr,
	 typename _Rb_tree<_Key, _Val, _KeyOfValue,
			   _Compare, _Alloc>::_Base_ptr>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001ca4:	b570      	push	{r4, r5, r6, lr}
    _M_get_insert_unique_pos(const key_type& __k)
    {
      typedef pair<_Base_ptr, _Base_ptr> _Res;
      _Link_type __x = _M_begin();
 8001ca6:	688b      	ldr	r3, [r1, #8]
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001ca8:	4616      	mov	r6, r2
 8001caa:	4604      	mov	r4, r0
      { return &this->_M_impl._M_header; }
 8001cac:	1d0d      	adds	r5, r1, #4
      _Base_ptr __y = _M_end();
      bool __comp = true;
 8001cae:	2201      	movs	r2, #1
      while (__x != 0)
 8001cb0:	b163      	cbz	r3, 8001ccc <_ZNSt8_Rb_treeI10file_typesSt4pairIKS0_PKcESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x28>
	{
	  __y = __x;
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 8001cb2:	f996 0000 	ldrsb.w	r0, [r6]
 8001cb6:	461d      	mov	r5, r3
 8001cb8:	f993 2010 	ldrsb.w	r2, [r3, #16]
 8001cbc:	4290      	cmp	r0, r2
 8001cbe:	bfb9      	ittee	lt
 8001cc0:	6898      	ldrlt	r0, [r3, #8]
 8001cc2:	2201      	movlt	r2, #1
 8001cc4:	68d8      	ldrge	r0, [r3, #12]
 8001cc6:	2200      	movge	r2, #0
 8001cc8:	4603      	mov	r3, r0
 8001cca:	e7f1      	b.n	8001cb0 <_ZNSt8_Rb_treeI10file_typesSt4pairIKS0_PKcESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0xc>
	}
      iterator __j = iterator(__y);
      if (__comp)
 8001ccc:	b1a2      	cbz	r2, 8001cf8 <_ZNSt8_Rb_treeI10file_typesSt4pairIKS0_PKcESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x54>
	{
	  if (__j == begin())
 8001cce:	68ca      	ldr	r2, [r1, #12]
 8001cd0:	42aa      	cmp	r2, r5
 8001cd2:	d103      	bne.n	8001cdc <_ZNSt8_Rb_treeI10file_typesSt4pairIKS0_PKcESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x38>
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8001cd4:	e9c4 3500 	strd	r3, r5, [r4]
	    --__j;
	}
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
	return _Res(__x, __y);
      return _Res(__j._M_node, 0);
    }
 8001cd8:	4620      	mov	r0, r4
 8001cda:	bd70      	pop	{r4, r5, r6, pc}
	_M_node = _Rb_tree_decrement(_M_node);
 8001cdc:	4628      	mov	r0, r5
 8001cde:	f020 fbae 	bl	802243e <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 8001ce2:	f996 3000 	ldrsb.w	r3, [r6]
 8001ce6:	f990 2010 	ldrsb.w	r2, [r0, #16]
 8001cea:	429a      	cmp	r2, r3
 8001cec:	f04f 0300 	mov.w	r3, #0
 8001cf0:	dbf0      	blt.n	8001cd4 <_ZNSt8_Rb_treeI10file_typesSt4pairIKS0_PKcESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x30>
       : first(std::forward<_U1>(__x)), second(__y) { }
 8001cf2:	e9c4 0300 	strd	r0, r3, [r4]
 8001cf6:	e7ef      	b.n	8001cd8 <_ZNSt8_Rb_treeI10file_typesSt4pairIKS0_PKcESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x34>
 8001cf8:	4628      	mov	r0, r5
 8001cfa:	e7f2      	b.n	8001ce2 <_ZNSt8_Rb_treeI10file_typesSt4pairIKS0_PKcESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x3e>

08001cfc <_ZN11main_windowC1Ev>:

extern file_manager fm;

void detect_file_type(std::string file_name);

main_window::main_window()
 8001cfc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8001d00:	4d23      	ldr	r5, [pc, #140]	; (8001d90 <_ZN11main_windowC1Ev+0x94>)
      _M_header._M_color = _S_red;
 8001d02:	2300      	movs	r3, #0
	  : _Node_allocator(std::move(__a)), _Base_key_compare(__comp)
 8001d04:	f100 0804 	add.w	r8, r0, #4
 8001d08:	4604      	mov	r4, r0
 8001d0a:	f105 0918 	add.w	r9, r5, #24
      _M_header._M_color = _S_red;
 8001d0e:	7103      	strb	r3, [r0, #4]
      _M_header._M_left = &_M_header;
 8001d10:	e9c0 3802 	strd	r3, r8, [r0, #8]
      _M_node_count = 0;
 8001d14:	e9c0 8304 	strd	r8, r3, [r0, #16]

      // end()
      if (__pos._M_node == _M_end())
	{
	  if (size() > 0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 8001d18:	6963      	ldr	r3, [r4, #20]
 8001d1a:	f1a5 0a08 	sub.w	sl, r5, #8
 8001d1e:	b133      	cbz	r3, 8001d2e <_ZN11main_windowC1Ev+0x32>
 8001d20:	6926      	ldr	r6, [r4, #16]
 8001d22:	f915 3c08 	ldrsb.w	r3, [r5, #-8]
 8001d26:	f996 2010 	ldrsb.w	r2, [r6, #16]
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	db08      	blt.n	8001d40 <_ZN11main_windowC1Ev+0x44>
	    return _Res(0, _M_rightmost());
	  else
	    return _M_get_insert_unique_pos(__k);
 8001d2e:	4652      	mov	r2, sl
 8001d30:	4621      	mov	r1, r4
 8001d32:	4668      	mov	r0, sp
 8001d34:	f7ff ffb6 	bl	8001ca4 <_ZNSt8_Rb_treeI10file_typesSt4pairIKS0_PKcESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_>
 8001d38:	e9dd 3600 	ldrd	r3, r6, [sp]
			_NodeGen& __node_gen)
    {
      pair<_Base_ptr, _Base_ptr> __res
	= _M_get_insert_hint_unique_pos(__position, _KeyOfValue()(__v));

      if (__res.second)
 8001d3c:	b1ee      	cbz	r6, 8001d7a <_ZN11main_windowC1Ev+0x7e>
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 8001d3e:	bb2b      	cbnz	r3, 8001d8c <_ZN11main_windowC1Ev+0x90>
	bool __insert_left = (__x != 0 || __p == _M_end()
 8001d40:	45b0      	cmp	r8, r6
 8001d42:	d023      	beq.n	8001d8c <_ZN11main_windowC1Ev+0x90>
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 8001d44:	f915 7c08 	ldrsb.w	r7, [r5, #-8]
 8001d48:	f996 3010 	ldrsb.w	r3, [r6, #16]
 8001d4c:	429f      	cmp	r7, r3
 8001d4e:	bfac      	ite	ge
 8001d50:	2700      	movge	r7, #0
 8001d52:	2701      	movlt	r7, #1
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8001d54:	2018      	movs	r0, #24
 8001d56:	f020 fb20 	bl	802239a <_Znwj>
 8001d5a:	4684      	mov	ip, r0
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8001d5c:	f100 0310 	add.w	r3, r0, #16
	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 8001d60:	4632      	mov	r2, r6
 8001d62:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8001d66:	e883 0003 	stmia.w	r3, {r0, r1}
 8001d6a:	4643      	mov	r3, r8
 8001d6c:	4661      	mov	r1, ip
 8001d6e:	4638      	mov	r0, r7
 8001d70:	f020 fb67 	bl	8022442 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
	++_M_impl._M_node_count;
 8001d74:	6963      	ldr	r3, [r4, #20]
 8001d76:	3301      	adds	r3, #1
 8001d78:	6163      	str	r3, [r4, #20]
	  for (; __first != __last; ++__first)
 8001d7a:	3508      	adds	r5, #8
 8001d7c:	454d      	cmp	r5, r9
 8001d7e:	d1cb      	bne.n	8001d18 <_ZN11main_windowC1Ev+0x1c>
	FOLDER       = 4,  /* Not a file type but yeah Folder should be in this class. */
	UNKNOWN_FILE = -1
};


class detect_file
 8001d80:	23ff      	movs	r3, #255	; 0xff
{

}
 8001d82:	4620      	mov	r0, r4
 8001d84:	7623      	strb	r3, [r4, #24]
 8001d86:	b002      	add	sp, #8
 8001d88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 8001d8c:	2701      	movs	r7, #1
 8001d8e:	e7e1      	b.n	8001d54 <_ZN11main_windowC1Ev+0x58>
 8001d90:	08024f98 	.word	0x08024f98

08001d94 <lv_disp_get_scr_act>:
 * @param disp pointer to display which active screen should be get. (NULL to use the default
 * screen)
 * @return pointer to the active screen object (loaded by 'lv_scr_load()')
 */
lv_obj_t * lv_disp_get_scr_act(lv_disp_t * disp)
{
 8001d94:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
 8001d96:	b910      	cbnz	r0, 8001d9e <lv_disp_get_scr_act+0xa>
 8001d98:	f014 fd86 	bl	80168a8 <lv_disp_get_default>
    if(!disp) {
 8001d9c:	b100      	cbz	r0, 8001da0 <lv_disp_get_scr_act+0xc>
        LV_LOG_WARN("no display registered to get its active screen");
        return NULL;
    }

    return disp->act_scr;
 8001d9e:	6900      	ldr	r0, [r0, #16]
}
 8001da0:	bd08      	pop	{r3, pc}

08001da2 <lv_disp_get_scr_prev>:
 * @param disp pointer to display which previous screen should be get. (NULL to use the default
 * screen)
 * @return pointer to the previous screen object or NULL if not used now
 */
lv_obj_t * lv_disp_get_scr_prev(lv_disp_t * disp)
{
 8001da2:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
 8001da4:	b910      	cbnz	r0, 8001dac <lv_disp_get_scr_prev+0xa>
 8001da6:	f014 fd7f 	bl	80168a8 <lv_disp_get_default>
    if(!disp) {
 8001daa:	b100      	cbz	r0, 8001dae <lv_disp_get_scr_prev+0xc>
        LV_LOG_WARN("no display registered to get its previous screen");
        return NULL;
    }

    return disp->prev_scr;
 8001dac:	6940      	ldr	r0, [r0, #20]
}
 8001dae:	bd08      	pop	{r3, pc}

08001db0 <lv_disp_get_layer_top>:
 * Return with the top layer. (Same on every screen and it is above the normal screen layer)
 * @param disp pointer to display which top layer should be get. (NULL to use the default screen)
 * @return pointer to the top layer object  (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_top(lv_disp_t * disp)
{
 8001db0:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
 8001db2:	b910      	cbnz	r0, 8001dba <lv_disp_get_layer_top+0xa>
 8001db4:	f014 fd78 	bl	80168a8 <lv_disp_get_default>
    if(!disp) {
 8001db8:	b100      	cbz	r0, 8001dbc <lv_disp_get_layer_top+0xc>
        LV_LOG_WARN("lv_layer_top: no display registered to get its top layer");
        return NULL;
    }

    return disp->top_layer;
 8001dba:	69c0      	ldr	r0, [r0, #28]
}
 8001dbc:	bd08      	pop	{r3, pc}

08001dbe <lv_disp_get_layer_sys>:
 * layer)
 * @param disp pointer to display which sys. layer  should be get. (NULL to use the default screen)
 * @return pointer to the sys layer object  (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_sys(lv_disp_t * disp)
{
 8001dbe:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
 8001dc0:	b910      	cbnz	r0, 8001dc8 <lv_disp_get_layer_sys+0xa>
 8001dc2:	f014 fd71 	bl	80168a8 <lv_disp_get_default>
    if(!disp) {
 8001dc6:	b100      	cbz	r0, 8001dca <lv_disp_get_layer_sys+0xc>
        LV_LOG_WARN("lv_layer_sys: no display registered to get its sys. layer");
        return NULL;
    }

    return disp->sys_layer;
 8001dc8:	6a00      	ldr	r0, [r0, #32]
}
 8001dca:	bd08      	pop	{r3, pc}

08001dcc <lv_disp_get_theme>:
 * Get the theme of a display
 * @param disp pointer to a display
 * @return the display's theme (can be NULL)
 */
lv_theme_t * lv_disp_get_theme(lv_disp_t * disp)
{
 8001dcc:	b508      	push	{r3, lr}
	if(disp == NULL) disp = lv_disp_get_default();
 8001dce:	b908      	cbnz	r0, 8001dd4 <lv_disp_get_theme+0x8>
 8001dd0:	f014 fd6a 	bl	80168a8 <lv_disp_get_default>
    return disp->theme;
}
 8001dd4:	6880      	ldr	r0, [r0, #8]
 8001dd6:	bd08      	pop	{r3, pc}

08001dd8 <lv_obj_event_base>:
    return res;
}


lv_res_t lv_obj_event_base(const lv_obj_class_t * class_p, lv_event_t * e)
{
 8001dd8:	b510      	push	{r4, lr}
 8001dda:	460c      	mov	r4, r1
    const lv_obj_class_t * base;
    if(class_p == NULL) base = e->current_target->class_p;
 8001ddc:	b968      	cbnz	r0, 8001dfa <lv_obj_event_base+0x22>
 8001dde:	684b      	ldr	r3, [r1, #4]
 8001de0:	6818      	ldr	r0, [r3, #0]
    else base = class_p->base_class;

    /*Find a base in which Call the ancestor's event handler_cb is set*/
    while(base && base->event_cb == NULL) base = base->base_class;
 8001de2:	b160      	cbz	r0, 8001dfe <lv_obj_event_base+0x26>
 8001de4:	6903      	ldr	r3, [r0, #16]
 8001de6:	b143      	cbz	r3, 8001dfa <lv_obj_event_base+0x22>

    if(base == NULL) return LV_RES_OK;
    if(base->event_cb == NULL) return LV_RES_OK;

    /*Call the actual event callback*/
    e->user_data = NULL;
 8001de8:	2200      	movs	r2, #0
    base->event_cb(base, e);
 8001dea:	4621      	mov	r1, r4
    e->user_data = NULL;
 8001dec:	60e2      	str	r2, [r4, #12]
    base->event_cb(base, e);
 8001dee:	4798      	blx	r3

    lv_res_t res = LV_RES_OK;
    /*Stop if the object is deleted*/
    if(e->deleted) res = LV_RES_INV;
 8001df0:	7e20      	ldrb	r0, [r4, #24]
 8001df2:	43c0      	mvns	r0, r0
 8001df4:	f000 0001 	and.w	r0, r0, #1
 8001df8:	e002      	b.n	8001e00 <lv_obj_event_base+0x28>
    while(base && base->event_cb == NULL) base = base->base_class;
 8001dfa:	6800      	ldr	r0, [r0, #0]
 8001dfc:	e7f1      	b.n	8001de2 <lv_obj_event_base+0xa>
    if(base == NULL) return LV_RES_OK;
 8001dfe:	2001      	movs	r0, #1

    return res;
}
 8001e00:	bd10      	pop	{r4, pc}
	...

08001e04 <event_send_core>:

    return &obj->spec_attr->event_dsc[id];
}

static lv_res_t event_send_core(lv_event_t * e)
{
 8001e04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e08:	4605      	mov	r5, r0
    EVENT_TRACE("Sending event %d to %p with %p param", e->code, e->current_target, e->param);

    /*Call the input device's feedback callback if set*/
    lv_indev_t * indev_act = lv_indev_get_act();
 8001e0a:	f000 faf3 	bl	80023f4 <lv_indev_get_act>
    if(indev_act) {
 8001e0e:	b120      	cbz	r0, 8001e1a <event_send_core+0x16>
        if(indev_act->driver->feedback_cb) indev_act->driver->feedback_cb(indev_act->driver, e->code);
 8001e10:	6800      	ldr	r0, [r0, #0]
 8001e12:	6883      	ldr	r3, [r0, #8]
 8001e14:	b10b      	cbz	r3, 8001e1a <event_send_core+0x16>
 8001e16:	7a29      	ldrb	r1, [r5, #8]
 8001e18:	4798      	blx	r3
    }

    lv_event_dsc_t * event_dsc = lv_obj_get_event_dsc(e->current_target, 0);
 8001e1a:	686b      	ldr	r3, [r5, #4]
 8001e1c:	689e      	ldr	r6, [r3, #8]
    if(!obj->spec_attr) return NULL;
 8001e1e:	b116      	cbz	r6, 8001e26 <event_send_core+0x22>
    if(id >= obj->spec_attr->event_dsc_cnt) return NULL;
 8001e20:	7eb3      	ldrb	r3, [r6, #26]
 8001e22:	b17b      	cbz	r3, 8001e44 <event_send_core+0x40>
    return &obj->spec_attr->event_dsc[id];
 8001e24:	68f6      	ldr	r6, [r6, #12]
    lv_res_t res = LV_RES_OK;
    res = lv_obj_event_base(NULL, e);
 8001e26:	4629      	mov	r1, r5
 8001e28:	2000      	movs	r0, #0
 8001e2a:	f7ff ffd5 	bl	8001dd8 <lv_obj_event_base>

    uint32_t i = 0;
 8001e2e:	2700      	movs	r7, #0
    res = lv_obj_event_base(NULL, e);
 8001e30:	4604      	mov	r4, r0
    return &obj->spec_attr->event_dsc[id];
 8001e32:	f04f 080c 	mov.w	r8, #12
    while(event_dsc && res == LV_RES_OK) {
 8001e36:	2e00      	cmp	r6, #0
 8001e38:	d03e      	beq.n	8001eb8 <event_send_core+0xb4>
 8001e3a:	2c01      	cmp	r4, #1
 8001e3c:	d004      	beq.n	8001e48 <event_send_core+0x44>
            if(res != LV_RES_OK) return LV_RES_INV;
        }
    }

    return res;
}
 8001e3e:	4620      	mov	r0, r4
 8001e40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(!obj->spec_attr) return NULL;
 8001e44:	461e      	mov	r6, r3
 8001e46:	e7ee      	b.n	8001e26 <event_send_core+0x22>
        if(event_dsc->cb && (event_dsc->filter == LV_EVENT_ALL || event_dsc->filter == e->code)) {
 8001e48:	6833      	ldr	r3, [r6, #0]
 8001e4a:	bb03      	cbnz	r3, 8001e8e <event_send_core+0x8a>
        event_dsc = lv_obj_get_event_dsc(e->current_target, i);
 8001e4c:	686b      	ldr	r3, [r5, #4]
        i++;
 8001e4e:	3701      	adds	r7, #1
        event_dsc = lv_obj_get_event_dsc(e->current_target, i);
 8001e50:	689b      	ldr	r3, [r3, #8]
    if(!obj->spec_attr) return NULL;
 8001e52:	bb53      	cbnz	r3, 8001eaa <event_send_core+0xa6>

static bool event_is_bubbled(lv_event_code_t e)
{
    switch(e) {
 8001e54:	7a2b      	ldrb	r3, [r5, #8]
 8001e56:	3b11      	subs	r3, #17
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	2b15      	cmp	r3, #21
 8001e5c:	d806      	bhi.n	8001e6c <event_send_core+0x68>
 8001e5e:	2401      	movs	r4, #1
 8001e60:	4a18      	ldr	r2, [pc, #96]	; (8001ec4 <event_send_core+0xc0>)
 8001e62:	fa04 f303 	lsl.w	r3, r4, r3
 8001e66:	401a      	ands	r2, r3
 8001e68:	2a00      	cmp	r2, #0
 8001e6a:	d1e8      	bne.n	8001e3e <event_send_core+0x3a>
        if(lv_obj_has_flag(e->current_target, LV_OBJ_FLAG_EVENT_BUBBLE) && e->current_target->parent) {
 8001e6c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e70:	6868      	ldr	r0, [r5, #4]
 8001e72:	f001 ffa6 	bl	8003dc2 <lv_obj_has_flag>
 8001e76:	b310      	cbz	r0, 8001ebe <event_send_core+0xba>
 8001e78:	686b      	ldr	r3, [r5, #4]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	b1fb      	cbz	r3, 8001ebe <event_send_core+0xba>
            e->current_target = e->current_target->parent;
 8001e7e:	606b      	str	r3, [r5, #4]
            res = event_send_core(e);
 8001e80:	4628      	mov	r0, r5
 8001e82:	f7ff ffbf 	bl	8001e04 <event_send_core>
            if(e->deleted) return LV_RES_INV;
 8001e86:	1e43      	subs	r3, r0, #1
 8001e88:	425c      	negs	r4, r3
 8001e8a:	415c      	adcs	r4, r3
 8001e8c:	e7d7      	b.n	8001e3e <event_send_core+0x3a>
        if(event_dsc->cb && (event_dsc->filter == LV_EVENT_ALL || event_dsc->filter == e->code)) {
 8001e8e:	7a32      	ldrb	r2, [r6, #8]
 8001e90:	b112      	cbz	r2, 8001e98 <event_send_core+0x94>
 8001e92:	7a29      	ldrb	r1, [r5, #8]
 8001e94:	4291      	cmp	r1, r2
 8001e96:	d1d9      	bne.n	8001e4c <event_send_core+0x48>
            e->user_data = event_dsc->user_data;
 8001e98:	6872      	ldr	r2, [r6, #4]
            event_dsc->cb(e);
 8001e9a:	4628      	mov	r0, r5
            e->user_data = event_dsc->user_data;
 8001e9c:	60ea      	str	r2, [r5, #12]
            event_dsc->cb(e);
 8001e9e:	4798      	blx	r3
            if(e->deleted) return LV_RES_INV;
 8001ea0:	7e2b      	ldrb	r3, [r5, #24]
 8001ea2:	07da      	lsls	r2, r3, #31
 8001ea4:	d5d2      	bpl.n	8001e4c <event_send_core+0x48>
 8001ea6:	2400      	movs	r4, #0
 8001ea8:	e7c9      	b.n	8001e3e <event_send_core+0x3a>
    if(id >= obj->spec_attr->event_dsc_cnt) return NULL;
 8001eaa:	7e9a      	ldrb	r2, [r3, #26]
 8001eac:	4297      	cmp	r7, r2
 8001eae:	d2d1      	bcs.n	8001e54 <event_send_core+0x50>
    return &obj->spec_attr->event_dsc[id];
 8001eb0:	68de      	ldr	r6, [r3, #12]
 8001eb2:	fb08 6607 	mla	r6, r8, r7, r6
 8001eb6:	e7be      	b.n	8001e36 <event_send_core+0x32>
    if(res == LV_RES_OK && event_is_bubbled(e->code)) {
 8001eb8:	2c01      	cmp	r4, #1
 8001eba:	d1c0      	bne.n	8001e3e <event_send_core+0x3a>
 8001ebc:	e7ca      	b.n	8001e54 <event_send_core+0x50>
    res = lv_obj_event_base(NULL, e);
 8001ebe:	2401      	movs	r4, #1
 8001ec0:	e7bd      	b.n	8001e3e <event_send_core+0x3a>
 8001ec2:	bf00      	nop
 8001ec4:	002f27ff 	.word	0x002f27ff

08001ec8 <lv_event_send>:
{
 8001ec8:	b510      	push	{r4, lr}
 8001eca:	b088      	sub	sp, #32
    if(obj == NULL) return LV_RES_OK;
 8001ecc:	b1b8      	cbz	r0, 8001efe <lv_event_send+0x36>
    e.deleted = 0;
 8001ece:	f89d 301c 	ldrb.w	r3, [sp, #28]
    e.code = event_code;
 8001ed2:	f88d 100c 	strb.w	r1, [sp, #12]
    e.user_data = NULL;
 8001ed6:	2100      	movs	r1, #0
    e.prev = event_head;
 8001ed8:	4c0a      	ldr	r4, [pc, #40]	; (8001f04 <lv_event_send+0x3c>)
    e.deleted = 0;
 8001eda:	f361 0300 	bfi	r3, r1, #0, #1
    e.current_target = obj;
 8001ede:	e9cd 0001 	strd	r0, r0, [sp, #4]
    e.deleted = 0;
 8001ee2:	f88d 301c 	strb.w	r3, [sp, #28]
    event_head = &e;
 8001ee6:	a801      	add	r0, sp, #4
    e.prev = event_head;
 8001ee8:	6823      	ldr	r3, [r4, #0]
    event_head = &e;
 8001eea:	6020      	str	r0, [r4, #0]
    e.prev = event_head;
 8001eec:	9306      	str	r3, [sp, #24]
    e.param = param;
 8001eee:	e9cd 1204 	strd	r1, r2, [sp, #16]
    lv_res_t res = event_send_core(&e);
 8001ef2:	f7ff ff87 	bl	8001e04 <event_send_core>
    event_head = e.prev;
 8001ef6:	9b06      	ldr	r3, [sp, #24]
 8001ef8:	6023      	str	r3, [r4, #0]
}
 8001efa:	b008      	add	sp, #32
 8001efc:	bd10      	pop	{r4, pc}
    if(obj == NULL) return LV_RES_OK;
 8001efe:	2001      	movs	r0, #1
 8001f00:	e7fb      	b.n	8001efa <lv_event_send+0x32>
 8001f02:	bf00      	nop
 8001f04:	20002998 	.word	0x20002998

08001f08 <lv_event_get_target>:
}
 8001f08:	6800      	ldr	r0, [r0, #0]
 8001f0a:	4770      	bx	lr

08001f0c <lv_event_get_code>:
}
 8001f0c:	7a00      	ldrb	r0, [r0, #8]
 8001f0e:	4770      	bx	lr

08001f10 <lv_event_get_param>:
}
 8001f10:	6900      	ldr	r0, [r0, #16]
 8001f12:	4770      	bx	lr

08001f14 <_lv_event_mark_deleted>:
    lv_event_t * e = event_head;
 8001f14:	4b07      	ldr	r3, [pc, #28]	; (8001f34 <_lv_event_mark_deleted+0x20>)
 8001f16:	681b      	ldr	r3, [r3, #0]
    while(e) {
 8001f18:	b903      	cbnz	r3, 8001f1c <_lv_event_mark_deleted+0x8>
}
 8001f1a:	4770      	bx	lr
        if(e->current_target == obj || e->target == obj) e->deleted = 1;
 8001f1c:	685a      	ldr	r2, [r3, #4]
 8001f1e:	4282      	cmp	r2, r0
 8001f20:	d002      	beq.n	8001f28 <_lv_event_mark_deleted+0x14>
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	4282      	cmp	r2, r0
 8001f26:	d103      	bne.n	8001f30 <_lv_event_mark_deleted+0x1c>
 8001f28:	7e1a      	ldrb	r2, [r3, #24]
 8001f2a:	f042 0201 	orr.w	r2, r2, #1
 8001f2e:	761a      	strb	r2, [r3, #24]
        e = e->prev;
 8001f30:	695b      	ldr	r3, [r3, #20]
 8001f32:	e7f1      	b.n	8001f18 <_lv_event_mark_deleted+0x4>
 8001f34:	20002998 	.word	0x20002998

08001f38 <lv_obj_add_event_cb>:
{
 8001f38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001f3c:	4605      	mov	r5, r0
 8001f3e:	4617      	mov	r7, r2
 8001f40:	4698      	mov	r8, r3
 8001f42:	460e      	mov	r6, r1
    lv_obj_allocate_spec_attr(obj);
 8001f44:	f002 fa0a 	bl	800435c <lv_obj_allocate_spec_attr>
    obj->spec_attr->event_dsc_cnt++;
 8001f48:	f8d5 9008 	ldr.w	r9, [r5, #8]
 8001f4c:	f899 401a 	ldrb.w	r4, [r9, #26]
    obj->spec_attr->event_dsc = lv_mem_realloc(obj->spec_attr->event_dsc, obj->spec_attr->event_dsc_cnt * sizeof(lv_event_dsc_t));
 8001f50:	f8d9 000c 	ldr.w	r0, [r9, #12]
    obj->spec_attr->event_dsc_cnt++;
 8001f54:	3401      	adds	r4, #1
 8001f56:	b2e4      	uxtb	r4, r4
 8001f58:	f889 401a 	strb.w	r4, [r9, #26]
    obj->spec_attr->event_dsc = lv_mem_realloc(obj->spec_attr->event_dsc, obj->spec_attr->event_dsc_cnt * sizeof(lv_event_dsc_t));
 8001f5c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8001f60:	00a1      	lsls	r1, r4, #2
 8001f62:	f015 fd7f 	bl	8017a64 <lv_mem_realloc>
    LV_ASSERT_MALLOC(obj->spec_attr->event_dsc);
 8001f66:	68aa      	ldr	r2, [r5, #8]
    obj->spec_attr->event_dsc = lv_mem_realloc(obj->spec_attr->event_dsc, obj->spec_attr->event_dsc_cnt * sizeof(lv_event_dsc_t));
 8001f68:	f8c9 000c 	str.w	r0, [r9, #12]
    LV_ASSERT_MALLOC(obj->spec_attr->event_dsc);
 8001f6c:	68d3      	ldr	r3, [r2, #12]
 8001f6e:	b903      	cbnz	r3, 8001f72 <lv_obj_add_event_cb+0x3a>
 8001f70:	e7fe      	b.n	8001f70 <lv_obj_add_event_cb+0x38>
    obj->spec_attr->event_dsc[obj->spec_attr->event_dsc_cnt - 1].cb = event_cb;
 8001f72:	7e91      	ldrb	r1, [r2, #26]
 8001f74:	240c      	movs	r4, #12
 8001f76:	f06f 020b 	mvn.w	r2, #11
 8001f7a:	fb14 2401 	smlabb	r4, r4, r1, r2
 8001f7e:	1918      	adds	r0, r3, r4
 8001f80:	511e      	str	r6, [r3, r4]
    obj->spec_attr->event_dsc[obj->spec_attr->event_dsc_cnt - 1].filter = filter;
 8001f82:	7207      	strb	r7, [r0, #8]
    obj->spec_attr->event_dsc[obj->spec_attr->event_dsc_cnt - 1].user_data = user_data;
 8001f84:	f8c0 8004 	str.w	r8, [r0, #4]
}
 8001f88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08001f8c <lv_event_set_ext_draw_size>:
    if(e->code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 8001f8c:	7a03      	ldrb	r3, [r0, #8]
 8001f8e:	2b13      	cmp	r3, #19
 8001f90:	d106      	bne.n	8001fa0 <lv_event_set_ext_draw_size+0x14>
    return e->param;
 8001f92:	6902      	ldr	r2, [r0, #16]
        *cur_size = LV_MAX(*cur_size, size);
 8001f94:	f9b2 3000 	ldrsh.w	r3, [r2]
 8001f98:	4299      	cmp	r1, r3
 8001f9a:	bfb8      	it	lt
 8001f9c:	4619      	movlt	r1, r3
 8001f9e:	8011      	strh	r1, [r2, #0]
}
 8001fa0:	4770      	bx	lr

08001fa2 <get_indev>:
 * In the worst case simply return the latest indev
 * @param g     a group the find in the indevs
 * @return      the suggested indev
 */
static lv_indev_t * get_indev(const lv_group_t * g)
{
 8001fa2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    lv_indev_t * indev_encoder = NULL;
    lv_indev_t * indev_group = NULL;
 8001fa4:	2600      	movs	r6, #0
{
 8001fa6:	4607      	mov	r7, r0
    lv_indev_t * indev = lv_indev_get_next(NULL);
 8001fa8:	2000      	movs	r0, #0
 8001faa:	f014 fcfb 	bl	80169a4 <lv_indev_get_next>
    lv_indev_t * indev_encoder = NULL;
 8001fae:	4635      	mov	r5, r6
    lv_indev_t * indev = lv_indev_get_next(NULL);
 8001fb0:	4604      	mov	r4, r0
    while(indev) {
 8001fb2:	b934      	cbnz	r4, 8001fc2 <get_indev+0x20>
            indev_group = indev;
        }
        indev = lv_indev_get_next(indev);
    }

    if(indev_encoder) return indev_encoder;
 8001fb4:	b9bd      	cbnz	r5, 8001fe6 <get_indev+0x44>
    if(indev_group) return indev_group;
 8001fb6:	b9c6      	cbnz	r6, 8001fea <get_indev+0x48>

    /*In lack of a better option use the first input device. (It can be NULL if there is no input device)*/
    return lv_indev_get_next(NULL);
 8001fb8:	4630      	mov	r0, r6
}
 8001fba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return lv_indev_get_next(NULL);
 8001fbe:	f014 bcf1 	b.w	80169a4 <lv_indev_get_next>
        lv_indev_type_t indev_type = lv_indev_get_type(indev);
 8001fc2:	4620      	mov	r0, r4
 8001fc4:	f000 fa1c 	bl	8002400 <lv_indev_get_type>
        if(indev->group == g) {
 8001fc8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001fca:	42bb      	cmp	r3, r7
 8001fcc:	d105      	bne.n	8001fda <get_indev+0x38>
            if(indev_type == LV_INDEV_TYPE_KEYPAD) return indev;
 8001fce:	2802      	cmp	r0, #2
 8001fd0:	d008      	beq.n	8001fe4 <get_indev+0x42>
            if(indev_type == LV_INDEV_TYPE_ENCODER) indev_encoder = indev;
 8001fd2:	4626      	mov	r6, r4
 8001fd4:	2804      	cmp	r0, #4
 8001fd6:	bf08      	it	eq
 8001fd8:	4625      	moveq	r5, r4
        indev = lv_indev_get_next(indev);
 8001fda:	4620      	mov	r0, r4
 8001fdc:	f014 fce2 	bl	80169a4 <lv_indev_get_next>
 8001fe0:	4604      	mov	r4, r0
 8001fe2:	e7e6      	b.n	8001fb2 <get_indev+0x10>
 8001fe4:	4625      	mov	r5, r4
}
 8001fe6:	4628      	mov	r0, r5
 8001fe8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001fea:	4635      	mov	r5, r6
 8001fec:	e7fb      	b.n	8001fe6 <get_indev+0x44>

08001fee <focus_next_core.part.0>:
static void focus_next_core(lv_group_t * group, void * (*begin)(const lv_ll_t *),
 8001fee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001ff2:	4681      	mov	r9, r0
 8001ff4:	4688      	mov	r8, r1
 8001ff6:	4616      	mov	r6, r2
    lv_obj_t ** obj_next     = group->obj_focus;
 8001ff8:	68c4      	ldr	r4, [r0, #12]
    bool can_begin           = true;
 8001ffa:	2701      	movs	r7, #1
    lv_obj_t ** obj_sentinel = NULL;
 8001ffc:	2500      	movs	r5, #0
        if(obj_next == NULL) {
 8001ffe:	2c00      	cmp	r4, #0
 8002000:	d14d      	bne.n	800209e <focus_next_core.part.0+0xb0>
            if(group->wrap || obj_sentinel == NULL) {
 8002002:	f899 3018 	ldrb.w	r3, [r9, #24]
 8002006:	071a      	lsls	r2, r3, #28
 8002008:	d401      	bmi.n	800200e <focus_next_core.part.0+0x20>
 800200a:	2d00      	cmp	r5, #0
 800200c:	d150      	bne.n	80020b0 <focus_next_core.part.0+0xc2>
                if(!can_begin) return;
 800200e:	2f00      	cmp	r7, #0
 8002010:	d04e      	beq.n	80020b0 <focus_next_core.part.0+0xc2>
                obj_next  = begin(&group->obj_ll);
 8002012:	4648      	mov	r0, r9
 8002014:	47c0      	blx	r8
 8002016:	4604      	mov	r4, r0
        if(obj_sentinel == NULL) {
 8002018:	2d00      	cmp	r5, #0
 800201a:	d13c      	bne.n	8002096 <focus_next_core.part.0+0xa8>
            if(obj_sentinel == NULL) return; /*Group is empty*/
 800201c:	2800      	cmp	r0, #0
 800201e:	d047      	beq.n	80020b0 <focus_next_core.part.0+0xc2>
 8002020:	4605      	mov	r5, r0
                can_begin = false;
 8002022:	2700      	movs	r7, #0
        if(lv_obj_get_state(*obj_next) & LV_STATE_DISABLED) continue;
 8002024:	6820      	ldr	r0, [r4, #0]
 8002026:	f001 fed9 	bl	8003ddc <lv_obj_get_state>
 800202a:	0603      	lsls	r3, r0, #24
 800202c:	d4e7      	bmi.n	8001ffe <focus_next_core.part.0+0x10>
        if(lv_obj_has_flag(*obj_next, LV_OBJ_FLAG_HIDDEN) == false) break;
 800202e:	2101      	movs	r1, #1
 8002030:	6820      	ldr	r0, [r4, #0]
 8002032:	f001 fec6 	bl	8003dc2 <lv_obj_has_flag>
 8002036:	2800      	cmp	r0, #0
 8002038:	d1e1      	bne.n	8001ffe <focus_next_core.part.0+0x10>
    if(obj_next == group->obj_focus) return; /*There's only one visible object and it's already focused*/
 800203a:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800203e:	42a3      	cmp	r3, r4
 8002040:	d036      	beq.n	80020b0 <focus_next_core.part.0+0xc2>
    if(group->obj_focus) {
 8002042:	b17b      	cbz	r3, 8002064 <focus_next_core.part.0+0x76>
        lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_DEFOCUSED, get_indev(group));
 8002044:	681d      	ldr	r5, [r3, #0]
 8002046:	4648      	mov	r0, r9
 8002048:	f7ff ffab 	bl	8001fa2 <get_indev>
 800204c:	210f      	movs	r1, #15
 800204e:	4602      	mov	r2, r0
 8002050:	4628      	mov	r0, r5
 8002052:	f7ff ff39 	bl	8001ec8 <lv_event_send>
        if(res != LV_RES_OK) return;
 8002056:	2801      	cmp	r0, #1
 8002058:	d12a      	bne.n	80020b0 <focus_next_core.part.0+0xc2>
        lv_obj_invalidate(*group->obj_focus);
 800205a:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800205e:	6818      	ldr	r0, [r3, #0]
 8002060:	f003 f85a 	bl	8005118 <lv_obj_invalidate>
    group->obj_focus = obj_next;
 8002064:	f8c9 400c 	str.w	r4, [r9, #12]
    lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_FOCUSED, get_indev(group));
 8002068:	4648      	mov	r0, r9
 800206a:	6824      	ldr	r4, [r4, #0]
 800206c:	f7ff ff99 	bl	8001fa2 <get_indev>
 8002070:	210e      	movs	r1, #14
 8002072:	4602      	mov	r2, r0
 8002074:	4620      	mov	r0, r4
 8002076:	f7ff ff27 	bl	8001ec8 <lv_event_send>
    if(res != LV_RES_OK) return;
 800207a:	2801      	cmp	r0, #1
 800207c:	d118      	bne.n	80020b0 <focus_next_core.part.0+0xc2>
    lv_obj_invalidate(*group->obj_focus);
 800207e:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8002082:	6818      	ldr	r0, [r3, #0]
 8002084:	f003 f848 	bl	8005118 <lv_obj_invalidate>
    if(group->focus_cb) group->focus_cb(group);
 8002088:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800208c:	b183      	cbz	r3, 80020b0 <focus_next_core.part.0+0xc2>
 800208e:	4648      	mov	r0, r9
}
 8002090:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if(group->focus_cb) group->focus_cb(group);
 8002094:	4718      	bx	r3
                can_begin = false;
 8002096:	2700      	movs	r7, #0
        if(obj_next == NULL) continue;
 8002098:	2c00      	cmp	r4, #0
 800209a:	d1c3      	bne.n	8002024 <focus_next_core.part.0+0x36>
 800209c:	e7b1      	b.n	8002002 <focus_next_core.part.0+0x14>
        if(obj_sentinel == NULL) {
 800209e:	2d00      	cmp	r5, #0
 80020a0:	bf08      	it	eq
 80020a2:	4625      	moveq	r5, r4
            obj_next = move(&group->obj_ll, obj_next);
 80020a4:	4621      	mov	r1, r4
 80020a6:	4648      	mov	r0, r9
 80020a8:	47b0      	blx	r6
            if(obj_next == obj_sentinel) return;
 80020aa:	42a8      	cmp	r0, r5
            obj_next = move(&group->obj_ll, obj_next);
 80020ac:	4604      	mov	r4, r0
            if(obj_next == obj_sentinel) return;
 80020ae:	d1f3      	bne.n	8002098 <focus_next_core.part.0+0xaa>
}
 80020b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080020b4 <_lv_group_init>:
    _lv_ll_init(&LV_GC_ROOT(_lv_group_ll), sizeof(lv_group_t));
 80020b4:	211c      	movs	r1, #28
 80020b6:	4801      	ldr	r0, [pc, #4]	; (80020bc <_lv_group_init+0x8>)
 80020b8:	f015 b9bf 	b.w	801743a <_lv_ll_init>
 80020bc:	2000aef8 	.word	0x2000aef8

080020c0 <lv_group_get_default>:
}
 80020c0:	4b01      	ldr	r3, [pc, #4]	; (80020c8 <lv_group_get_default+0x8>)
 80020c2:	6818      	ldr	r0, [r3, #0]
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	2000299c 	.word	0x2000299c

080020cc <lv_group_focus_next>:
    if(group->frozen) return;
 80020cc:	7e03      	ldrb	r3, [r0, #24]
 80020ce:	07db      	lsls	r3, r3, #31
 80020d0:	d403      	bmi.n	80020da <lv_group_focus_next+0xe>
 80020d2:	4a02      	ldr	r2, [pc, #8]	; (80020dc <lv_group_focus_next+0x10>)
 80020d4:	4902      	ldr	r1, [pc, #8]	; (80020e0 <lv_group_focus_next+0x14>)
 80020d6:	f7ff bf8a 	b.w	8001fee <focus_next_core.part.0>
}
 80020da:	4770      	bx	lr
 80020dc:	0801753b 	.word	0x0801753b
 80020e0:	0801752f 	.word	0x0801752f

080020e4 <lv_group_focus_prev>:
    if(group->frozen) return;
 80020e4:	7e03      	ldrb	r3, [r0, #24]
 80020e6:	07db      	lsls	r3, r3, #31
 80020e8:	d403      	bmi.n	80020f2 <lv_group_focus_prev+0xe>
 80020ea:	4a02      	ldr	r2, [pc, #8]	; (80020f4 <lv_group_focus_prev+0x10>)
 80020ec:	4902      	ldr	r1, [pc, #8]	; (80020f8 <lv_group_focus_prev+0x14>)
 80020ee:	f7ff bf7e 	b.w	8001fee <focus_next_core.part.0>
}
 80020f2:	4770      	bx	lr
 80020f4:	08017543 	.word	0x08017543
 80020f8:	08017535 	.word	0x08017535

080020fc <lv_group_refocus>:
{
 80020fc:	b538      	push	{r3, r4, r5, lr}
    uint8_t temp_wrap = g->wrap;
 80020fe:	7e03      	ldrb	r3, [r0, #24]
{
 8002100:	4604      	mov	r4, r0
    uint8_t temp_wrap = g->wrap;
 8002102:	f3c3 05c0 	ubfx	r5, r3, #3, #1
    g->wrap           = 1;
 8002106:	f043 0308 	orr.w	r3, r3, #8
 800210a:	7603      	strb	r3, [r0, #24]
    if(g->refocus_policy == LV_GROUP_REFOCUS_POLICY_NEXT)
 800210c:	075b      	lsls	r3, r3, #29
 800210e:	d406      	bmi.n	800211e <lv_group_refocus+0x22>
        lv_group_focus_next(g);
 8002110:	f7ff ffdc 	bl	80020cc <lv_group_focus_next>
    g->wrap = temp_wrap;
 8002114:	7e23      	ldrb	r3, [r4, #24]
 8002116:	f365 03c3 	bfi	r3, r5, #3, #1
 800211a:	7623      	strb	r3, [r4, #24]
}
 800211c:	bd38      	pop	{r3, r4, r5, pc}
        lv_group_focus_prev(g);
 800211e:	f7ff ffe1 	bl	80020e4 <lv_group_focus_prev>
 8002122:	e7f7      	b.n	8002114 <lv_group_refocus+0x18>

08002124 <lv_group_add_obj>:
{
 8002124:	b570      	push	{r4, r5, r6, lr}
 8002126:	460c      	mov	r4, r1
    if(group == NULL) return;
 8002128:	4605      	mov	r5, r0
 800212a:	b378      	cbz	r0, 800218c <lv_group_add_obj+0x68>
    _LV_LL_READ(&group->obj_ll, obj_i) {
 800212c:	f015 f9ff 	bl	801752e <_lv_ll_get_head>
 8002130:	b9c8      	cbnz	r0, 8002166 <lv_group_add_obj+0x42>
    lv_group_t * group_cur = lv_obj_get_group(obj);
 8002132:	4620      	mov	r0, r4
 8002134:	f001 fe54 	bl	8003de0 <lv_obj_get_group>
    if(group_cur) {
 8002138:	b140      	cbz	r0, 800214c <lv_group_add_obj+0x28>
        if(obj->spec_attr->group_p && *(obj->spec_attr->group_p->obj_focus) == obj) {
 800213a:	68a3      	ldr	r3, [r4, #8]
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	b153      	cbz	r3, 8002156 <lv_group_add_obj+0x32>
 8002140:	68db      	ldr	r3, [r3, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	42a3      	cmp	r3, r4
 8002146:	d106      	bne.n	8002156 <lv_group_add_obj+0x32>
            lv_group_refocus(group_cur);
 8002148:	f7ff ffd8 	bl	80020fc <lv_group_refocus>
    if(obj->spec_attr == NULL) lv_obj_allocate_spec_attr(obj);
 800214c:	68a3      	ldr	r3, [r4, #8]
 800214e:	b913      	cbnz	r3, 8002156 <lv_group_add_obj+0x32>
 8002150:	4620      	mov	r0, r4
 8002152:	f002 f903 	bl	800435c <lv_obj_allocate_spec_attr>
    obj->spec_attr->group_p = group;
 8002156:	68a3      	ldr	r3, [r4, #8]
    lv_obj_t ** next = _lv_ll_ins_tail(&group->obj_ll);
 8002158:	4628      	mov	r0, r5
    obj->spec_attr->group_p = group;
 800215a:	609d      	str	r5, [r3, #8]
    lv_obj_t ** next = _lv_ll_ins_tail(&group->obj_ll);
 800215c:	f015 f990 	bl	8017480 <_lv_ll_ins_tail>
    LV_ASSERT_MALLOC(next);
 8002160:	4606      	mov	r6, r0
 8002162:	b940      	cbnz	r0, 8002176 <lv_group_add_obj+0x52>
 8002164:	e7fe      	b.n	8002164 <lv_group_add_obj+0x40>
        if((*obj_i) == obj) {
 8002166:	6803      	ldr	r3, [r0, #0]
 8002168:	42a3      	cmp	r3, r4
 800216a:	d00f      	beq.n	800218c <lv_group_add_obj+0x68>
    _LV_LL_READ(&group->obj_ll, obj_i) {
 800216c:	4601      	mov	r1, r0
 800216e:	4628      	mov	r0, r5
 8002170:	f015 f9e3 	bl	801753a <_lv_ll_get_next>
 8002174:	e7dc      	b.n	8002130 <lv_group_add_obj+0xc>
    *next = obj;
 8002176:	6004      	str	r4, [r0, #0]
    if(_lv_ll_get_head(&group->obj_ll) == next) {
 8002178:	4628      	mov	r0, r5
 800217a:	f015 f9d8 	bl	801752e <_lv_ll_get_head>
 800217e:	4286      	cmp	r6, r0
 8002180:	d104      	bne.n	800218c <lv_group_add_obj+0x68>
        lv_group_refocus(group);
 8002182:	4628      	mov	r0, r5
}
 8002184:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        lv_group_refocus(group);
 8002188:	f7ff bfb8 	b.w	80020fc <lv_group_refocus>
}
 800218c:	bd70      	pop	{r4, r5, r6, pc}

0800218e <lv_group_remove_obj>:
{
 800218e:	b570      	push	{r4, r5, r6, lr}
 8002190:	4606      	mov	r6, r0
    lv_group_t * g = lv_obj_get_group(obj);
 8002192:	f001 fe25 	bl	8003de0 <lv_obj_get_group>
    if(g == NULL) return;
 8002196:	4604      	mov	r4, r0
 8002198:	2800      	cmp	r0, #0
 800219a:	d038      	beq.n	800220e <lv_group_remove_obj+0x80>
    if(g->obj_focus && *g->obj_focus == obj) {
 800219c:	68c3      	ldr	r3, [r0, #12]
 800219e:	b1e3      	cbz	r3, 80021da <lv_group_remove_obj+0x4c>
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	42b3      	cmp	r3, r6
 80021a4:	d119      	bne.n	80021da <lv_group_remove_obj+0x4c>
        if(g->frozen) g->frozen = 0;
 80021a6:	7e03      	ldrb	r3, [r0, #24]
 80021a8:	07da      	lsls	r2, r3, #31
 80021aa:	bf44      	itt	mi
 80021ac:	f36f 0300 	bfcmi	r3, #0, #1
 80021b0:	7603      	strbmi	r3, [r0, #24]
        if(_lv_ll_get_head(&g->obj_ll) == g->obj_focus && _lv_ll_get_tail(&g->obj_ll) == g->obj_focus) {
 80021b2:	f015 f9bc 	bl	801752e <_lv_ll_get_head>
 80021b6:	68e3      	ldr	r3, [r4, #12]
 80021b8:	4283      	cmp	r3, r0
 80021ba:	d129      	bne.n	8002210 <lv_group_remove_obj+0x82>
 80021bc:	4620      	mov	r0, r4
 80021be:	f015 f9b9 	bl	8017534 <_lv_ll_get_tail>
 80021c2:	68e3      	ldr	r3, [r4, #12]
 80021c4:	4298      	cmp	r0, r3
 80021c6:	d123      	bne.n	8002210 <lv_group_remove_obj+0x82>
            lv_event_send(*g->obj_focus, LV_EVENT_DEFOCUSED, get_indev(g));
 80021c8:	6805      	ldr	r5, [r0, #0]
 80021ca:	4620      	mov	r0, r4
 80021cc:	f7ff fee9 	bl	8001fa2 <get_indev>
 80021d0:	210f      	movs	r1, #15
 80021d2:	4602      	mov	r2, r0
 80021d4:	4628      	mov	r0, r5
 80021d6:	f7ff fe77 	bl	8001ec8 <lv_event_send>
    if(g->obj_focus && *g->obj_focus == obj) {
 80021da:	68e3      	ldr	r3, [r4, #12]
 80021dc:	b123      	cbz	r3, 80021e8 <lv_group_remove_obj+0x5a>
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	42b3      	cmp	r3, r6
        g->obj_focus = NULL;
 80021e2:	bf04      	itt	eq
 80021e4:	2300      	moveq	r3, #0
 80021e6:	60e3      	streq	r3, [r4, #12]
    _LV_LL_READ(&g->obj_ll, i) {
 80021e8:	4620      	mov	r0, r4
 80021ea:	f015 f9a0 	bl	801752e <_lv_ll_get_head>
 80021ee:	4605      	mov	r5, r0
 80021f0:	b168      	cbz	r0, 800220e <lv_group_remove_obj+0x80>
        if(*i == obj) {
 80021f2:	682b      	ldr	r3, [r5, #0]
            _lv_ll_remove(&g->obj_ll, i);
 80021f4:	4629      	mov	r1, r5
 80021f6:	4620      	mov	r0, r4
        if(*i == obj) {
 80021f8:	42b3      	cmp	r3, r6
 80021fa:	d10d      	bne.n	8002218 <lv_group_remove_obj+0x8a>
            _lv_ll_remove(&g->obj_ll, i);
 80021fc:	f015 f95c 	bl	80174b8 <_lv_ll_remove>
            lv_mem_free(i);
 8002200:	4628      	mov	r0, r5
 8002202:	f015 fa97 	bl	8017734 <lv_mem_free>
            if(obj->spec_attr) obj->spec_attr->group_p = NULL;
 8002206:	68b3      	ldr	r3, [r6, #8]
 8002208:	b10b      	cbz	r3, 800220e <lv_group_remove_obj+0x80>
 800220a:	2200      	movs	r2, #0
 800220c:	609a      	str	r2, [r3, #8]
}
 800220e:	bd70      	pop	{r4, r5, r6, pc}
            lv_group_refocus(g);
 8002210:	4620      	mov	r0, r4
 8002212:	f7ff ff73 	bl	80020fc <lv_group_refocus>
 8002216:	e7e0      	b.n	80021da <lv_group_remove_obj+0x4c>
    _LV_LL_READ(&g->obj_ll, i) {
 8002218:	f015 f98f 	bl	801753a <_lv_ll_get_next>
 800221c:	e7e7      	b.n	80021ee <lv_group_remove_obj+0x60>

0800221e <lv_group_get_focused>:
    if(!group) return NULL;
 800221e:	b110      	cbz	r0, 8002226 <lv_group_get_focused+0x8>
    if(group->obj_focus == NULL) return NULL;
 8002220:	68c0      	ldr	r0, [r0, #12]
 8002222:	b100      	cbz	r0, 8002226 <lv_group_get_focused+0x8>
    return *group->obj_focus;
 8002224:	6800      	ldr	r0, [r0, #0]
}
 8002226:	4770      	bx	lr

08002228 <lv_group_send_data>:
{
 8002228:	b507      	push	{r0, r1, r2, lr}
 800222a:	9101      	str	r1, [sp, #4]
    lv_obj_t * act = lv_group_get_focused(group);
 800222c:	f7ff fff7 	bl	800221e <lv_group_get_focused>
    if(act == NULL) return LV_RES_OK;
 8002230:	b130      	cbz	r0, 8002240 <lv_group_send_data+0x18>
    res = lv_event_send(act, LV_EVENT_KEY, &c);
 8002232:	aa01      	add	r2, sp, #4
 8002234:	210d      	movs	r1, #13
 8002236:	f7ff fe47 	bl	8001ec8 <lv_event_send>
}
 800223a:	b003      	add	sp, #12
 800223c:	f85d fb04 	ldr.w	pc, [sp], #4
    if(act == NULL) return LV_RES_OK;
 8002240:	2001      	movs	r0, #1
 8002242:	e7fa      	b.n	800223a <lv_group_send_data+0x12>

08002244 <lv_group_set_editing>:
{
 8002244:	b538      	push	{r3, r4, r5, lr}
    if(group == NULL) return;
 8002246:	4603      	mov	r3, r0
 8002248:	b1e0      	cbz	r0, 8002284 <lv_group_set_editing+0x40>
    if(en_val == group->editing) return; /*Do not set the same mode again*/
 800224a:	7e02      	ldrb	r2, [r0, #24]
 800224c:	f3c2 0440 	ubfx	r4, r2, #1, #1
 8002250:	428c      	cmp	r4, r1
 8002252:	d017      	beq.n	8002284 <lv_group_set_editing+0x40>
    group->editing     = en_val;
 8002254:	f361 0241 	bfi	r2, r1, #1, #1
 8002258:	7602      	strb	r2, [r0, #24]
    lv_obj_t * focused = lv_group_get_focused(group);
 800225a:	f7ff ffe0 	bl	800221e <lv_group_get_focused>
    if(focused) {
 800225e:	4604      	mov	r4, r0
 8002260:	b180      	cbz	r0, 8002284 <lv_group_set_editing+0x40>
        lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_FOCUSED, get_indev(group));
 8002262:	68da      	ldr	r2, [r3, #12]
 8002264:	4618      	mov	r0, r3
 8002266:	6815      	ldr	r5, [r2, #0]
 8002268:	f7ff fe9b 	bl	8001fa2 <get_indev>
 800226c:	210e      	movs	r1, #14
 800226e:	4602      	mov	r2, r0
 8002270:	4628      	mov	r0, r5
 8002272:	f7ff fe29 	bl	8001ec8 <lv_event_send>
        if(res != LV_RES_OK) return;
 8002276:	2801      	cmp	r0, #1
 8002278:	d104      	bne.n	8002284 <lv_group_set_editing+0x40>
        lv_obj_invalidate(focused);
 800227a:	4620      	mov	r0, r4
}
 800227c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        lv_obj_invalidate(focused);
 8002280:	f002 bf4a 	b.w	8005118 <lv_obj_invalidate>
}
 8002284:	bd38      	pop	{r3, r4, r5, pc}

08002286 <lv_group_focus_obj>:
{
 8002286:	b570      	push	{r4, r5, r6, lr}
    if(obj == NULL) return;
 8002288:	4606      	mov	r6, r0
 800228a:	b170      	cbz	r0, 80022aa <lv_group_focus_obj+0x24>
    lv_group_t * g = lv_obj_get_group(obj);
 800228c:	f001 fda8 	bl	8003de0 <lv_obj_get_group>
    if(g == NULL) return;
 8002290:	4604      	mov	r4, r0
 8002292:	b150      	cbz	r0, 80022aa <lv_group_focus_obj+0x24>
    if(g->frozen != 0) return;
 8002294:	7e01      	ldrb	r1, [r0, #24]
 8002296:	f011 0101 	ands.w	r1, r1, #1
 800229a:	d106      	bne.n	80022aa <lv_group_focus_obj+0x24>
    lv_group_set_editing(g, false);
 800229c:	f7ff ffd2 	bl	8002244 <lv_group_set_editing>
    _LV_LL_READ(&g->obj_ll, i) {
 80022a0:	4620      	mov	r0, r4
 80022a2:	f015 f944 	bl	801752e <_lv_ll_get_head>
 80022a6:	4605      	mov	r5, r0
 80022a8:	b900      	cbnz	r0, 80022ac <lv_group_focus_obj+0x26>
}
 80022aa:	bd70      	pop	{r4, r5, r6, pc}
        if(*i == obj) {
 80022ac:	682b      	ldr	r3, [r5, #0]
 80022ae:	42b3      	cmp	r3, r6
 80022b0:	d127      	bne.n	8002302 <lv_group_focus_obj+0x7c>
            if(g->obj_focus != NULL) {
 80022b2:	68e3      	ldr	r3, [r4, #12]
 80022b4:	b173      	cbz	r3, 80022d4 <lv_group_focus_obj+0x4e>
                lv_res_t res = lv_event_send(*g->obj_focus, LV_EVENT_DEFOCUSED, get_indev(g));
 80022b6:	681e      	ldr	r6, [r3, #0]
 80022b8:	4620      	mov	r0, r4
 80022ba:	f7ff fe72 	bl	8001fa2 <get_indev>
 80022be:	210f      	movs	r1, #15
 80022c0:	4602      	mov	r2, r0
 80022c2:	4630      	mov	r0, r6
 80022c4:	f7ff fe00 	bl	8001ec8 <lv_event_send>
                if(res != LV_RES_OK) return;
 80022c8:	2801      	cmp	r0, #1
 80022ca:	d1ee      	bne.n	80022aa <lv_group_focus_obj+0x24>
                lv_obj_invalidate(*g->obj_focus);
 80022cc:	68e3      	ldr	r3, [r4, #12]
 80022ce:	6818      	ldr	r0, [r3, #0]
 80022d0:	f002 ff22 	bl	8005118 <lv_obj_invalidate>
                if(g->focus_cb) g->focus_cb(g);
 80022d4:	6923      	ldr	r3, [r4, #16]
            g->obj_focus = i;
 80022d6:	60e5      	str	r5, [r4, #12]
                if(g->focus_cb) g->focus_cb(g);
 80022d8:	b10b      	cbz	r3, 80022de <lv_group_focus_obj+0x58>
 80022da:	4620      	mov	r0, r4
 80022dc:	4798      	blx	r3
                lv_res_t res = lv_event_send(*g->obj_focus, LV_EVENT_FOCUSED, get_indev(g));
 80022de:	68e3      	ldr	r3, [r4, #12]
 80022e0:	4620      	mov	r0, r4
 80022e2:	681d      	ldr	r5, [r3, #0]
 80022e4:	f7ff fe5d 	bl	8001fa2 <get_indev>
 80022e8:	210e      	movs	r1, #14
 80022ea:	4602      	mov	r2, r0
 80022ec:	4628      	mov	r0, r5
 80022ee:	f7ff fdeb 	bl	8001ec8 <lv_event_send>
                if(res != LV_RES_OK) return;
 80022f2:	2801      	cmp	r0, #1
 80022f4:	d1d9      	bne.n	80022aa <lv_group_focus_obj+0x24>
                lv_obj_invalidate(*g->obj_focus);
 80022f6:	68e3      	ldr	r3, [r4, #12]
}
 80022f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                lv_obj_invalidate(*g->obj_focus);
 80022fc:	6818      	ldr	r0, [r3, #0]
 80022fe:	f002 bf0b 	b.w	8005118 <lv_obj_invalidate>
    _LV_LL_READ(&g->obj_ll, i) {
 8002302:	4629      	mov	r1, r5
 8002304:	4620      	mov	r0, r4
 8002306:	f015 f918 	bl	801753a <_lv_ll_get_next>
 800230a:	e7cc      	b.n	80022a6 <lv_group_focus_obj+0x20>

0800230c <lv_group_get_editing>:
    if(!group) return false;
 800230c:	b110      	cbz	r0, 8002314 <lv_group_get_editing+0x8>
    return group->editing ? true : false;
 800230e:	7e00      	ldrb	r0, [r0, #24]
 8002310:	f3c0 0040 	ubfx	r0, r0, #1, #1
}
 8002314:	4770      	bx	lr

08002316 <lv_group_get_obj_count>:
    return _lv_ll_get_len(&group->obj_ll);
 8002316:	f015 b917 	b.w	8017548 <_lv_ll_get_len>
	...

0800231c <indev_reset_check>:
 * @param proc pointer to an input device 'proc'
 * @return true if indev query should be immediately truncated.
 */
static bool indev_reset_check(_lv_indev_proc_t * proc)
{
    if(proc->reset_query) {
 800231c:	7840      	ldrb	r0, [r0, #1]
 800231e:	0783      	lsls	r3, r0, #30
        indev_obj_act = NULL;
    }

    return proc->reset_query ? true : false;
}
 8002320:	f3c0 0040 	ubfx	r0, r0, #1, #1
        indev_obj_act = NULL;
 8002324:	bf42      	ittt	mi
 8002326:	4b02      	ldrmi	r3, [pc, #8]	; (8002330 <indev_reset_check+0x14>)
 8002328:	2200      	movmi	r2, #0
 800232a:	601a      	strmi	r2, [r3, #0]
}
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	200029a4 	.word	0x200029a4

08002334 <indev_proc_release>:
{
 8002334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(proc->wait_until_release != 0) {
 8002336:	7843      	ldrb	r3, [r0, #1]
{
 8002338:	4604      	mov	r4, r0
    if(proc->wait_until_release != 0) {
 800233a:	071a      	lsls	r2, r3, #28
 800233c:	d507      	bpl.n	800234e <indev_proc_release+0x1a>
        proc->types.pointer.act_obj  = NULL;
 800233e:	2200      	movs	r2, #0
        proc->wait_until_release     = 0;
 8002340:	f362 03c3 	bfi	r3, r2, #3, #1
        proc->types.pointer.last_obj = NULL;
 8002344:	e9c0 2208 	strd	r2, r2, [r0, #32]
        proc->longpr_rep_timestamp   = 0;
 8002348:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
        proc->wait_until_release     = 0;
 800234c:	7043      	strb	r3, [r0, #1]
    indev_obj_act = proc->types.pointer.act_obj;
 800234e:	6a20      	ldr	r0, [r4, #32]
 8002350:	4d19      	ldr	r5, [pc, #100]	; (80023b8 <indev_proc_release+0x84>)
    lv_obj_t * scroll_obj = proc->types.pointer.scroll_obj;
 8002352:	6aa7      	ldr	r7, [r4, #40]	; 0x28
    indev_obj_act = proc->types.pointer.act_obj;
 8002354:	6028      	str	r0, [r5, #0]
    if(indev_obj_act) {
 8002356:	b168      	cbz	r0, 8002374 <indev_proc_release+0x40>
        lv_event_send(indev_obj_act, LV_EVENT_RELEASED, indev_act);
 8002358:	4e18      	ldr	r6, [pc, #96]	; (80023bc <indev_proc_release+0x88>)
 800235a:	2108      	movs	r1, #8
 800235c:	6832      	ldr	r2, [r6, #0]
 800235e:	f7ff fdb3 	bl	8001ec8 <lv_event_send>
        if(indev_reset_check(proc)) return;
 8002362:	4620      	mov	r0, r4
 8002364:	f7ff ffda 	bl	800231c <indev_reset_check>
 8002368:	b9d0      	cbnz	r0, 80023a0 <indev_proc_release+0x6c>
        if(scroll_obj == NULL) {
 800236a:	b167      	cbz	r7, 8002386 <indev_proc_release+0x52>
        proc->types.pointer.act_obj = NULL;
 800236c:	2300      	movs	r3, #0
 800236e:	6223      	str	r3, [r4, #32]
        proc->longpr_rep_timestamp  = 0;
 8002370:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
    if(scroll_obj) {
 8002374:	b1a7      	cbz	r7, 80023a0 <indev_proc_release+0x6c>
        _lv_indev_scroll_throw_handler(proc);
 8002376:	4620      	mov	r0, r4
 8002378:	f001 fa22 	bl	80037c0 <_lv_indev_scroll_throw_handler>
        if(indev_reset_check(proc)) return;
 800237c:	4620      	mov	r0, r4
}
 800237e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        if(indev_reset_check(proc)) return;
 8002382:	f7ff bfcb 	b.w	800231c <indev_reset_check>
            if(proc->long_pr_sent == 0) {
 8002386:	7863      	ldrb	r3, [r4, #1]
 8002388:	07db      	lsls	r3, r3, #31
 800238a:	d50a      	bpl.n	80023a2 <indev_proc_release+0x6e>
            lv_event_send(indev_obj_act, LV_EVENT_CLICKED, indev_act);
 800238c:	6832      	ldr	r2, [r6, #0]
 800238e:	2107      	movs	r1, #7
 8002390:	6828      	ldr	r0, [r5, #0]
 8002392:	f7ff fd99 	bl	8001ec8 <lv_event_send>
            if(indev_reset_check(proc)) return;
 8002396:	4620      	mov	r0, r4
 8002398:	f7ff ffc0 	bl	800231c <indev_reset_check>
 800239c:	2800      	cmp	r0, #0
 800239e:	d0e5      	beq.n	800236c <indev_proc_release+0x38>
}
 80023a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, indev_act);
 80023a2:	6832      	ldr	r2, [r6, #0]
 80023a4:	2104      	movs	r1, #4
 80023a6:	6828      	ldr	r0, [r5, #0]
 80023a8:	f7ff fd8e 	bl	8001ec8 <lv_event_send>
                if(indev_reset_check(proc)) return;
 80023ac:	4620      	mov	r0, r4
 80023ae:	f7ff ffb5 	bl	800231c <indev_reset_check>
 80023b2:	2800      	cmp	r0, #0
 80023b4:	d0ea      	beq.n	800238c <indev_proc_release+0x58>
 80023b6:	e7f3      	b.n	80023a0 <indev_proc_release+0x6c>
 80023b8:	200029a4 	.word	0x200029a4
 80023bc:	200029a0 	.word	0x200029a0

080023c0 <indev_proc_reset_query_handler>:
    if(indev->proc.reset_query) {
 80023c0:	7942      	ldrb	r2, [r0, #5]
 80023c2:	0793      	lsls	r3, r2, #30
 80023c4:	d513      	bpl.n	80023ee <indev_proc_reset_query_handler+0x2e>
        indev->proc.types.pointer.act_obj           = NULL;
 80023c6:	2300      	movs	r3, #0
        indev->proc.types.pointer.scroll_dir = LV_DIR_NONE;
 80023c8:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
        indev->proc.long_pr_sent                    = 0;
 80023cc:	f022 0203 	bic.w	r2, r2, #3
        indev->proc.types.pointer.scroll_dir = LV_DIR_NONE;
 80023d0:	f363 0103 	bfi	r1, r3, #0, #4
        indev->proc.types.pointer.scroll_obj          = NULL;
 80023d4:	62c3      	str	r3, [r0, #44]	; 0x2c
        indev->proc.long_pr_sent                    = 0;
 80023d6:	7142      	strb	r2, [r0, #5]
        indev_obj_act                               = NULL;
 80023d8:	4a05      	ldr	r2, [pc, #20]	; (80023f0 <indev_proc_reset_query_handler+0x30>)
        indev->proc.types.pointer.gesture_sum.x     = 0;
 80023da:	63c3      	str	r3, [r0, #60]	; 0x3c
        indev->proc.types.pointer.scroll_dir = LV_DIR_NONE;
 80023dc:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
        indev_obj_act                               = NULL;
 80023e0:	6013      	str	r3, [r2, #0]
        indev->proc.types.pointer.last_obj          = NULL;
 80023e2:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
        indev->proc.longpr_rep_timestamp            = 0;
 80023e6:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
        indev->proc.types.pointer.scroll_throw_vect.x = 0;
 80023ea:	e9c0 3306 	strd	r3, r3, [r0, #24]
}
 80023ee:	4770      	bx	lr
 80023f0:	200029a4 	.word	0x200029a4

080023f4 <lv_indev_get_act>:
}
 80023f4:	4b01      	ldr	r3, [pc, #4]	; (80023fc <lv_indev_get_act+0x8>)
 80023f6:	6818      	ldr	r0, [r3, #0]
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	200029a0 	.word	0x200029a0

08002400 <lv_indev_get_type>:
    if(indev == NULL) return LV_INDEV_TYPE_NONE;
 8002400:	b108      	cbz	r0, 8002406 <lv_indev_get_type+0x6>
    return indev->driver->type;
 8002402:	6803      	ldr	r3, [r0, #0]
 8002404:	7818      	ldrb	r0, [r3, #0]
}
 8002406:	4770      	bx	lr

08002408 <lv_indev_reset>:
{
 8002408:	b538      	push	{r3, r4, r5, lr}
 800240a:	460d      	mov	r5, r1
    if(indev) {
 800240c:	4604      	mov	r4, r0
 800240e:	2800      	cmp	r0, #0
 8002410:	d035      	beq.n	800247e <lv_indev_reset+0x76>
        indev->proc.reset_query = 1;
 8002412:	7943      	ldrb	r3, [r0, #5]
 8002414:	f043 0302 	orr.w	r3, r3, #2
 8002418:	7143      	strb	r3, [r0, #5]
        if(indev_act == indev) indev_obj_act = NULL;
 800241a:	4b1e      	ldr	r3, [pc, #120]	; (8002494 <lv_indev_reset+0x8c>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4283      	cmp	r3, r0
 8002420:	bf02      	ittt	eq
 8002422:	4b1d      	ldreq	r3, [pc, #116]	; (8002498 <lv_indev_reset+0x90>)
 8002424:	2200      	moveq	r2, #0
 8002426:	601a      	streq	r2, [r3, #0]
        if(obj == NULL || indev->proc.types.pointer.last_pressed == obj) {
 8002428:	b171      	cbz	r1, 8002448 <lv_indev_reset+0x40>
 800242a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800242c:	428b      	cmp	r3, r1
 800242e:	d00b      	beq.n	8002448 <lv_indev_reset+0x40>
        if(obj == NULL || indev->proc.types.pointer.act_obj == obj) {
 8002430:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002432:	42ab      	cmp	r3, r5
 8002434:	d102      	bne.n	800243c <lv_indev_reset+0x34>
            indev->proc.types.pointer.act_obj = NULL;
 8002436:	2300      	movs	r3, #0
 8002438:	6263      	str	r3, [r4, #36]	; 0x24
        if(obj == NULL || indev->proc.types.pointer.last_obj == obj) {
 800243a:	b115      	cbz	r5, 8002442 <lv_indev_reset+0x3a>
 800243c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800243e:	42ab      	cmp	r3, r5
 8002440:	d101      	bne.n	8002446 <lv_indev_reset+0x3e>
            indev->proc.types.pointer.last_obj = NULL;
 8002442:	2300      	movs	r3, #0
 8002444:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8002446:	bd38      	pop	{r3, r4, r5, pc}
            indev->proc.types.pointer.last_pressed = NULL;
 8002448:	2300      	movs	r3, #0
 800244a:	6323      	str	r3, [r4, #48]	; 0x30
        if(obj == NULL || indev->proc.types.pointer.act_obj == obj) {
 800244c:	2d00      	cmp	r5, #0
 800244e:	d0f2      	beq.n	8002436 <lv_indev_reset+0x2e>
 8002450:	e7ee      	b.n	8002430 <lv_indev_reset+0x28>
            i->proc.reset_query = 1;
 8002452:	7943      	ldrb	r3, [r0, #5]
 8002454:	f043 0302 	orr.w	r3, r3, #2
 8002458:	7143      	strb	r3, [r0, #5]
            if((i->driver->type == LV_INDEV_TYPE_POINTER || i->driver->type == LV_INDEV_TYPE_KEYPAD) &&
 800245a:	6803      	ldr	r3, [r0, #0]
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	3b01      	subs	r3, #1
 8002460:	2b01      	cmp	r3, #1
 8002462:	d814      	bhi.n	800248e <lv_indev_reset+0x86>
 8002464:	b195      	cbz	r5, 800248c <lv_indev_reset+0x84>
               (obj == NULL || i->proc.types.pointer.last_pressed == obj)) {
 8002466:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002468:	42ab      	cmp	r3, r5
 800246a:	d00f      	beq.n	800248c <lv_indev_reset+0x84>
            if(obj == NULL || i->proc.types.pointer.act_obj == obj) {
 800246c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800246e:	42ab      	cmp	r3, r5
 8002470:	d101      	bne.n	8002476 <lv_indev_reset+0x6e>
                i->proc.types.pointer.act_obj = NULL;
 8002472:	6244      	str	r4, [r0, #36]	; 0x24
            if(obj == NULL || i->proc.types.pointer.last_obj == obj) {
 8002474:	b115      	cbz	r5, 800247c <lv_indev_reset+0x74>
 8002476:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002478:	42ab      	cmp	r3, r5
 800247a:	d100      	bne.n	800247e <lv_indev_reset+0x76>
                i->proc.types.pointer.last_obj = NULL;
 800247c:	6284      	str	r4, [r0, #40]	; 0x28
            i = lv_indev_get_next(i);
 800247e:	f014 fa91 	bl	80169a4 <lv_indev_get_next>
        while(i) {
 8002482:	2800      	cmp	r0, #0
 8002484:	d1e5      	bne.n	8002452 <lv_indev_reset+0x4a>
        indev_obj_act = NULL;
 8002486:	4b04      	ldr	r3, [pc, #16]	; (8002498 <lv_indev_reset+0x90>)
 8002488:	6018      	str	r0, [r3, #0]
}
 800248a:	e7dc      	b.n	8002446 <lv_indev_reset+0x3e>
                i->proc.types.pointer.last_pressed = NULL;
 800248c:	6304      	str	r4, [r0, #48]	; 0x30
            if(obj == NULL || i->proc.types.pointer.act_obj == obj) {
 800248e:	2d00      	cmp	r5, #0
 8002490:	d1ec      	bne.n	800246c <lv_indev_reset+0x64>
 8002492:	e7ee      	b.n	8002472 <lv_indev_reset+0x6a>
 8002494:	200029a0 	.word	0x200029a0
 8002498:	200029a4 	.word	0x200029a4

0800249c <lv_indev_reset_long_press>:
    indev->proc.long_pr_sent         = 0;
 800249c:	7943      	ldrb	r3, [r0, #5]
 800249e:	f36f 0300 	bfc	r3, #0, #1
{
 80024a2:	b510      	push	{r4, lr}
 80024a4:	4604      	mov	r4, r0
    indev->proc.long_pr_sent         = 0;
 80024a6:	7143      	strb	r3, [r0, #5]
    indev->proc.longpr_rep_timestamp = lv_tick_get();
 80024a8:	f014 fab2 	bl	8016a10 <lv_tick_get>
 80024ac:	64a0      	str	r0, [r4, #72]	; 0x48
    indev->proc.pr_timestamp         = lv_tick_get();
 80024ae:	f014 faaf 	bl	8016a10 <lv_tick_get>
 80024b2:	6460      	str	r0, [r4, #68]	; 0x44
}
 80024b4:	bd10      	pop	{r4, pc}

080024b6 <lv_indev_get_point>:
    if(indev == NULL) {
 80024b6:	b910      	cbnz	r0, 80024be <lv_indev_get_point+0x8>
        point->x = 0;
 80024b8:	8008      	strh	r0, [r1, #0]
        point->y = 0;
 80024ba:	8048      	strh	r0, [r1, #2]
        return;
 80024bc:	4770      	bx	lr
    if(indev->driver->type != LV_INDEV_TYPE_POINTER && indev->driver->type != LV_INDEV_TYPE_BUTTON) {
 80024be:	6803      	ldr	r3, [r0, #0]
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 80024c6:	2b01      	cmp	r3, #1
        point->x = indev->proc.types.pointer.act_point.x;
 80024c8:	bf09      	itett	eq
 80024ca:	f9b0 3008 	ldrsheq.w	r3, [r0, #8]
        point->x = -1;
 80024ce:	f64f 73ff 	movwne	r3, #65535	; 0xffff
        point->x = indev->proc.types.pointer.act_point.x;
 80024d2:	800b      	strheq	r3, [r1, #0]
        point->y = indev->proc.types.pointer.act_point.y;
 80024d4:	f9b0 300a 	ldrsheq.w	r3, [r0, #10]
        point->x = -1;
 80024d8:	bf18      	it	ne
 80024da:	800b      	strhne	r3, [r1, #0]
        point->y = indev->proc.types.pointer.act_point.y;
 80024dc:	804b      	strh	r3, [r1, #2]
}
 80024de:	4770      	bx	lr

080024e0 <lv_indev_get_scroll_dir>:
    if(indev == NULL) return false;
 80024e0:	b158      	cbz	r0, 80024fa <lv_indev_get_scroll_dir+0x1a>
    if(indev->driver->type != LV_INDEV_TYPE_POINTER && indev->driver->type != LV_INDEV_TYPE_BUTTON) return false;
 80024e2:	6803      	ldr	r3, [r0, #0]
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d104      	bne.n	80024f8 <lv_indev_get_scroll_dir+0x18>
    return indev->proc.types.pointer.scroll_dir;
 80024ee:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 80024f2:	f000 000f 	and.w	r0, r0, #15
 80024f6:	4770      	bx	lr
    if(indev == NULL) return false;
 80024f8:	2000      	movs	r0, #0
}
 80024fa:	4770      	bx	lr

080024fc <lv_indev_get_scroll_obj>:
    if(indev == NULL) return NULL;
 80024fc:	b140      	cbz	r0, 8002510 <lv_indev_get_scroll_obj+0x14>
    if(indev->driver->type != LV_INDEV_TYPE_POINTER && indev->driver->type != LV_INDEV_TYPE_BUTTON) return NULL;
 80024fe:	6803      	ldr	r3, [r0, #0]
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 8002506:	2b01      	cmp	r3, #1
 8002508:	d101      	bne.n	800250e <lv_indev_get_scroll_obj+0x12>
    return indev->proc.types.pointer.scroll_obj;
 800250a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800250c:	4770      	bx	lr
    if(indev == NULL) return NULL;
 800250e:	2000      	movs	r0, #0
}
 8002510:	4770      	bx	lr

08002512 <lv_indev_get_vect>:
    point->x = 0;
 8002512:	2300      	movs	r3, #0
 8002514:	800b      	strh	r3, [r1, #0]
    point->y = 0;
 8002516:	804b      	strh	r3, [r1, #2]
    if(indev == NULL) return;
 8002518:	b158      	cbz	r0, 8002532 <lv_indev_get_vect+0x20>
    if(indev->driver->type == LV_INDEV_TYPE_POINTER || indev->driver->type == LV_INDEV_TYPE_BUTTON) {
 800251a:	6803      	ldr	r3, [r0, #0]
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 8002522:	2b01      	cmp	r3, #1
        point->x = indev->proc.types.pointer.vect.x;
 8002524:	bf01      	itttt	eq
 8002526:	f9b0 3014 	ldrsheq.w	r3, [r0, #20]
 800252a:	800b      	strheq	r3, [r1, #0]
        point->y = indev->proc.types.pointer.vect.y;
 800252c:	f9b0 3016 	ldrsheq.w	r3, [r0, #22]
 8002530:	804b      	strheq	r3, [r1, #2]
}
 8002532:	4770      	bx	lr

08002534 <lv_indev_wait_release>:
    if(indev == NULL)return;
 8002534:	b118      	cbz	r0, 800253e <lv_indev_wait_release+0xa>
    indev->proc.wait_until_release = 1;
 8002536:	7943      	ldrb	r3, [r0, #5]
 8002538:	f043 0308 	orr.w	r3, r3, #8
 800253c:	7143      	strb	r3, [r0, #5]
}
 800253e:	4770      	bx	lr

08002540 <lv_indev_get_obj_act>:
}
 8002540:	4b01      	ldr	r3, [pc, #4]	; (8002548 <lv_indev_get_obj_act+0x8>)
 8002542:	6818      	ldr	r0, [r3, #0]
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop
 8002548:	200029a4 	.word	0x200029a4

0800254c <lv_indev_search_obj>:
{
 800254c:	b570      	push	{r4, r5, r6, lr}
 800254e:	4604      	mov	r4, r0
 8002550:	460e      	mov	r6, r1
    if(lv_obj_hit_test(obj, point)) {
 8002552:	f003 f804 	bl	800555e <lv_obj_hit_test>
 8002556:	b908      	cbnz	r0, 800255c <lv_indev_search_obj+0x10>
    lv_obj_t * found_p = NULL;
 8002558:	2000      	movs	r0, #0
}
 800255a:	bd70      	pop	{r4, r5, r6, pc}
        for(i = lv_obj_get_child_cnt(obj) - 1; i >= 0; i--) {
 800255c:	4620      	mov	r0, r4
 800255e:	f005 fa5f 	bl	8007a20 <lv_obj_get_child_cnt>
 8002562:	1e45      	subs	r5, r0, #1
 8002564:	2d00      	cmp	r5, #0
 8002566:	da07      	bge.n	8002578 <lv_indev_search_obj+0x2c>
        if(found_p == NULL && lv_obj_has_flag(obj, LV_OBJ_FLAG_CLICKABLE)) {
 8002568:	2102      	movs	r1, #2
 800256a:	4620      	mov	r0, r4
 800256c:	f001 fc29 	bl	8003dc2 <lv_obj_has_flag>
 8002570:	2800      	cmp	r0, #0
 8002572:	d0f1      	beq.n	8002558 <lv_indev_search_obj+0xc>
            lv_obj_t * hidden_i = obj;
 8002574:	4625      	mov	r5, r4
 8002576:	e014      	b.n	80025a2 <lv_indev_search_obj+0x56>
            lv_obj_t * child = lv_obj_get_child(obj, i);
 8002578:	4629      	mov	r1, r5
 800257a:	4620      	mov	r0, r4
 800257c:	f005 fa41 	bl	8007a02 <lv_obj_get_child>
            found_p = lv_indev_search_obj(child, point);
 8002580:	4631      	mov	r1, r6
 8002582:	f7ff ffe3 	bl	800254c <lv_indev_search_obj>
            if(found_p != NULL) break;
 8002586:	2800      	cmp	r0, #0
 8002588:	d1e7      	bne.n	800255a <lv_indev_search_obj+0xe>
        for(i = lv_obj_get_child_cnt(obj) - 1; i >= 0; i--) {
 800258a:	3d01      	subs	r5, #1
 800258c:	e7ea      	b.n	8002564 <lv_indev_search_obj+0x18>
                if(lv_obj_has_flag(hidden_i, LV_OBJ_FLAG_HIDDEN) == true) break;
 800258e:	2101      	movs	r1, #1
 8002590:	4628      	mov	r0, r5
 8002592:	f001 fc16 	bl	8003dc2 <lv_obj_has_flag>
 8002596:	2800      	cmp	r0, #0
 8002598:	d1de      	bne.n	8002558 <lv_indev_search_obj+0xc>
                hidden_i = lv_obj_get_parent(hidden_i);
 800259a:	4628      	mov	r0, r5
 800259c:	f005 fa2e 	bl	80079fc <lv_obj_get_parent>
 80025a0:	4605      	mov	r5, r0
            while(hidden_i != NULL) {
 80025a2:	2d00      	cmp	r5, #0
 80025a4:	d1f3      	bne.n	800258e <lv_indev_search_obj+0x42>
            if(hidden_i == NULL && (lv_obj_get_state(obj) & LV_STATE_DISABLED) == false) found_p = obj;
 80025a6:	4620      	mov	r0, r4
 80025a8:	f001 fc18 	bl	8003ddc <lv_obj_get_state>
 80025ac:	0603      	lsls	r3, r0, #24
 80025ae:	d4d3      	bmi.n	8002558 <lv_indev_search_obj+0xc>
 80025b0:	4620      	mov	r0, r4
    return found_p;
 80025b2:	e7d2      	b.n	800255a <lv_indev_search_obj+0xe>

080025b4 <indev_proc_press>:
{
 80025b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80025b8:	4604      	mov	r4, r0
    indev_obj_act = proc->types.pointer.act_obj;
 80025ba:	4db5      	ldr	r5, [pc, #724]	; (8002890 <indev_proc_press+0x2dc>)
 80025bc:	6a00      	ldr	r0, [r0, #32]
    if(proc->wait_until_release != 0) return;
 80025be:	7863      	ldrb	r3, [r4, #1]
    indev_obj_act = proc->types.pointer.act_obj;
 80025c0:	6028      	str	r0, [r5, #0]
    if(proc->wait_until_release != 0) return;
 80025c2:	071a      	lsls	r2, r3, #28
 80025c4:	d428      	bmi.n	8002618 <indev_proc_press+0x64>
    lv_disp_t * disp = indev_act->driver->disp;
 80025c6:	4eb3      	ldr	r6, [pc, #716]	; (8002894 <indev_proc_press+0x2e0>)
 80025c8:	6833      	ldr	r3, [r6, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	691f      	ldr	r7, [r3, #16]
    if(indev_obj_act == NULL) {
 80025ce:	bb28      	cbnz	r0, 800261c <indev_proc_press+0x68>
        indev_obj_act = lv_indev_search_obj(lv_disp_get_layer_sys(disp), &proc->types.pointer.act_point);
 80025d0:	f104 0804 	add.w	r8, r4, #4
 80025d4:	4638      	mov	r0, r7
 80025d6:	f7ff fbf2 	bl	8001dbe <lv_disp_get_layer_sys>
 80025da:	4641      	mov	r1, r8
 80025dc:	f7ff ffb6 	bl	800254c <lv_indev_search_obj>
 80025e0:	6028      	str	r0, [r5, #0]
        if(indev_obj_act == NULL) indev_obj_act = lv_indev_search_obj(lv_disp_get_layer_top(disp),
 80025e2:	b970      	cbnz	r0, 8002602 <indev_proc_press+0x4e>
 80025e4:	4638      	mov	r0, r7
 80025e6:	f7ff fbe3 	bl	8001db0 <lv_disp_get_layer_top>
 80025ea:	4641      	mov	r1, r8
 80025ec:	f7ff ffae 	bl	800254c <lv_indev_search_obj>
 80025f0:	6028      	str	r0, [r5, #0]
        if(indev_obj_act == NULL) indev_obj_act = lv_indev_search_obj(lv_disp_get_scr_act(disp),
 80025f2:	b930      	cbnz	r0, 8002602 <indev_proc_press+0x4e>
 80025f4:	4638      	mov	r0, r7
 80025f6:	f7ff fbcd 	bl	8001d94 <lv_disp_get_scr_act>
 80025fa:	4641      	mov	r1, r8
 80025fc:	f7ff ffa6 	bl	800254c <lv_indev_search_obj>
 8002600:	6028      	str	r0, [r5, #0]
    if(new_obj_searched && proc->types.pointer.last_obj) {
 8002602:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002604:	b173      	cbz	r3, 8002624 <indev_proc_press+0x70>
        proc->types.pointer.scroll_throw_vect.x = 0;
 8002606:	2300      	movs	r3, #0
        _lv_indev_scroll_throw_handler(proc);
 8002608:	4620      	mov	r0, r4
        proc->types.pointer.scroll_throw_vect.x = 0;
 800260a:	61a3      	str	r3, [r4, #24]
        _lv_indev_scroll_throw_handler(proc);
 800260c:	f001 f8d8 	bl	80037c0 <_lv_indev_scroll_throw_handler>
        if(indev_reset_check(proc)) return;
 8002610:	4620      	mov	r0, r4
 8002612:	f7ff fe83 	bl	800231c <indev_reset_check>
 8002616:	b128      	cbz	r0, 8002624 <indev_proc_press+0x70>
}
 8002618:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if(proc->types.pointer.scroll_obj == NULL &&
 800261c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800261e:	2b00      	cmp	r3, #0
 8002620:	f000 80d7 	beq.w	80027d2 <indev_proc_press+0x21e>
    if(indev_obj_act != proc->types.pointer.act_obj) {
 8002624:	6a20      	ldr	r0, [r4, #32]
 8002626:	682b      	ldr	r3, [r5, #0]
 8002628:	4298      	cmp	r0, r3
 800262a:	f040 80da 	bne.w	80027e2 <indev_proc_press+0x22e>
    proc->types.pointer.vect.x = proc->types.pointer.act_point.x - proc->types.pointer.last_point.x;
 800262e:	8923      	ldrh	r3, [r4, #8]
 8002630:	88a2      	ldrh	r2, [r4, #4]
    proc->types.pointer.vect.y = proc->types.pointer.act_point.y - proc->types.pointer.last_point.y;
 8002632:	8961      	ldrh	r1, [r4, #10]
    proc->types.pointer.vect.x = proc->types.pointer.act_point.x - proc->types.pointer.last_point.x;
 8002634:	1ad2      	subs	r2, r2, r3
    proc->types.pointer.vect.y = proc->types.pointer.act_point.y - proc->types.pointer.last_point.y;
 8002636:	88e3      	ldrh	r3, [r4, #6]
    proc->types.pointer.scroll_throw_vect.x = (proc->types.pointer.scroll_throw_vect.x * 4) >> 3;
 8002638:	f9b4 0018 	ldrsh.w	r0, [r4, #24]
    proc->types.pointer.vect.y = proc->types.pointer.act_point.y - proc->types.pointer.last_point.y;
 800263c:	1a5b      	subs	r3, r3, r1
    proc->types.pointer.vect.x = proc->types.pointer.act_point.x - proc->types.pointer.last_point.x;
 800263e:	b212      	sxth	r2, r2
    proc->types.pointer.scroll_throw_vect.y = (proc->types.pointer.scroll_throw_vect.y * 4) >> 3;
 8002640:	f9b4 101a 	ldrsh.w	r1, [r4, #26]
    proc->types.pointer.vect.y = proc->types.pointer.act_point.y - proc->types.pointer.last_point.y;
 8002644:	b21b      	sxth	r3, r3
    proc->types.pointer.vect.x = proc->types.pointer.act_point.x - proc->types.pointer.last_point.x;
 8002646:	8222      	strh	r2, [r4, #16]
    proc->types.pointer.scroll_throw_vect.x += (proc->types.pointer.vect.x * 4) >> 3;
 8002648:	1052      	asrs	r2, r2, #1
    proc->types.pointer.vect.y = proc->types.pointer.act_point.y - proc->types.pointer.last_point.y;
 800264a:	8263      	strh	r3, [r4, #18]
    proc->types.pointer.scroll_throw_vect.y += (proc->types.pointer.vect.y * 4) >> 3;
 800264c:	105b      	asrs	r3, r3, #1
    proc->types.pointer.scroll_throw_vect.x += (proc->types.pointer.vect.x * 4) >> 3;
 800264e:	eb02 0260 	add.w	r2, r2, r0, asr #1
    if(indev_obj_act) {
 8002652:	6828      	ldr	r0, [r5, #0]
    proc->types.pointer.scroll_throw_vect.y += (proc->types.pointer.vect.y * 4) >> 3;
 8002654:	eb03 0361 	add.w	r3, r3, r1, asr #1
    proc->types.pointer.scroll_throw_vect.x += (proc->types.pointer.vect.x * 4) >> 3;
 8002658:	8322      	strh	r2, [r4, #24]
    proc->types.pointer.scroll_throw_vect.y += (proc->types.pointer.vect.y * 4) >> 3;
 800265a:	8363      	strh	r3, [r4, #26]
    proc->types.pointer.scroll_throw_vect_ori = proc->types.pointer.scroll_throw_vect;
 800265c:	69a3      	ldr	r3, [r4, #24]
 800265e:	61e3      	str	r3, [r4, #28]
    if(indev_obj_act) {
 8002660:	2800      	cmp	r0, #0
 8002662:	d0d9      	beq.n	8002618 <indev_proc_press+0x64>
        lv_event_send(indev_obj_act, LV_EVENT_PRESSING, indev_act);
 8002664:	6832      	ldr	r2, [r6, #0]
 8002666:	2102      	movs	r1, #2
 8002668:	f7ff fc2e 	bl	8001ec8 <lv_event_send>
        if(indev_reset_check(proc)) return;
 800266c:	4620      	mov	r0, r4
 800266e:	f7ff fe55 	bl	800231c <indev_reset_check>
 8002672:	2800      	cmp	r0, #0
 8002674:	d1d0      	bne.n	8002618 <indev_proc_press+0x64>
        if(indev_act->proc.wait_until_release) return;
 8002676:	6833      	ldr	r3, [r6, #0]
 8002678:	795b      	ldrb	r3, [r3, #5]
 800267a:	0718      	lsls	r0, r3, #28
 800267c:	d4cc      	bmi.n	8002618 <indev_proc_press+0x64>
        _lv_indev_scroll_handler(proc);
 800267e:	4620      	mov	r0, r4
 8002680:	f000 fe7e 	bl	8003380 <_lv_indev_scroll_handler>
        if(indev_reset_check(proc)) return;
 8002684:	4620      	mov	r0, r4
 8002686:	f7ff fe49 	bl	800231c <indev_reset_check>
 800268a:	2800      	cmp	r0, #0
 800268c:	d1c4      	bne.n	8002618 <indev_proc_press+0x64>
    if(proc->types.pointer.scroll_obj) return;
 800268e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002690:	2b00      	cmp	r3, #0
 8002692:	d159      	bne.n	8002748 <indev_proc_press+0x194>
    if(proc->types.pointer.gesture_sent) return;
 8002694:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8002698:	07d9      	lsls	r1, r3, #31
 800269a:	d455      	bmi.n	8002748 <indev_proc_press+0x194>
    lv_obj_t * gesture_obj = proc->types.pointer.act_obj;
 800269c:	6a27      	ldr	r7, [r4, #32]
    while(gesture_obj && lv_obj_has_flag(gesture_obj, LV_OBJ_FLAG_GESTURE_BUBBLE)) {
 800269e:	2f00      	cmp	r7, #0
 80026a0:	d052      	beq.n	8002748 <indev_proc_press+0x194>
 80026a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80026a6:	4638      	mov	r0, r7
 80026a8:	f001 fb8b 	bl	8003dc2 <lv_obj_has_flag>
 80026ac:	2800      	cmp	r0, #0
 80026ae:	f040 8120 	bne.w	80028f2 <indev_proc_press+0x33e>
    if((LV_ABS(proc->types.pointer.vect.x) < indev_act->driver->gesture_min_velocity) &&
 80026b2:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 80026b6:	6832      	ldr	r2, [r6, #0]
 80026b8:	ea81 73e1 	eor.w	r3, r1, r1, asr #31
 80026bc:	f9b4 c012 	ldrsh.w	ip, [r4, #18]
 80026c0:	f8d2 e000 	ldr.w	lr, [r2]
 80026c4:	eba3 73e1 	sub.w	r3, r3, r1, asr #31
 80026c8:	f89e 801a 	ldrb.w	r8, [lr, #26]
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	4543      	cmp	r3, r8
 80026d0:	d207      	bcs.n	80026e2 <indev_proc_press+0x12e>
       (LV_ABS(proc->types.pointer.vect.y) < indev_act->driver->gesture_min_velocity)) {
 80026d2:	ea8c 73ec 	eor.w	r3, ip, ip, asr #31
 80026d6:	eba3 73ec 	sub.w	r3, r3, ip, asr #31
    if((LV_ABS(proc->types.pointer.vect.x) < indev_act->driver->gesture_min_velocity) &&
 80026da:	b29b      	uxth	r3, r3
 80026dc:	4598      	cmp	r8, r3
        proc->types.pointer.gesture_sum.x = 0;
 80026de:	bf88      	it	hi
 80026e0:	63a0      	strhi	r0, [r4, #56]	; 0x38
    proc->types.pointer.gesture_sum.x += proc->types.pointer.vect.x;
 80026e2:	8f20      	ldrh	r0, [r4, #56]	; 0x38
 80026e4:	4408      	add	r0, r1
    proc->types.pointer.gesture_sum.y += proc->types.pointer.vect.y;
 80026e6:	8f61      	ldrh	r1, [r4, #58]	; 0x3a
    proc->types.pointer.gesture_sum.x += proc->types.pointer.vect.x;
 80026e8:	b200      	sxth	r0, r0
    proc->types.pointer.gesture_sum.y += proc->types.pointer.vect.y;
 80026ea:	4461      	add	r1, ip
    if((LV_ABS(proc->types.pointer.gesture_sum.x) > indev_act->driver->gesture_limit) ||
 80026ec:	ea80 7ce0 	eor.w	ip, r0, r0, asr #31
    proc->types.pointer.gesture_sum.x += proc->types.pointer.vect.x;
 80026f0:	8720      	strh	r0, [r4, #56]	; 0x38
    proc->types.pointer.gesture_sum.y += proc->types.pointer.vect.y;
 80026f2:	b209      	sxth	r1, r1
    if((LV_ABS(proc->types.pointer.gesture_sum.x) > indev_act->driver->gesture_limit) ||
 80026f4:	ebac 7ce0 	sub.w	ip, ip, r0, asr #31
 80026f8:	ea81 73e1 	eor.w	r3, r1, r1, asr #31
    proc->types.pointer.gesture_sum.y += proc->types.pointer.vect.y;
 80026fc:	8761      	strh	r1, [r4, #58]	; 0x3a
    if((LV_ABS(proc->types.pointer.gesture_sum.x) > indev_act->driver->gesture_limit) ||
 80026fe:	fa1f fc8c 	uxth.w	ip, ip
 8002702:	f89e e01b 	ldrb.w	lr, [lr, #27]
 8002706:	eba3 73e1 	sub.w	r3, r3, r1, asr #31
 800270a:	45f4      	cmp	ip, lr
 800270c:	b29b      	uxth	r3, r3
 800270e:	d801      	bhi.n	8002714 <indev_proc_press+0x160>
 8002710:	459e      	cmp	lr, r3
 8002712:	d219      	bcs.n	8002748 <indev_proc_press+0x194>
        proc->types.pointer.gesture_sent = 1;
 8002714:	f894 e03d 	ldrb.w	lr, [r4, #61]	; 0x3d
        if(LV_ABS(proc->types.pointer.gesture_sum.x) > LV_ABS(proc->types.pointer.gesture_sum.y)) {
 8002718:	459c      	cmp	ip, r3
 800271a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
        proc->types.pointer.gesture_sent = 1;
 800271e:	f04e 0e01 	orr.w	lr, lr, #1
 8002722:	f884 e03d 	strb.w	lr, [r4, #61]	; 0x3d
        if(LV_ABS(proc->types.pointer.gesture_sum.x) > LV_ABS(proc->types.pointer.gesture_sum.y)) {
 8002726:	f240 80e9 	bls.w	80028fc <indev_proc_press+0x348>
            if(proc->types.pointer.gesture_sum.x > 0)
 800272a:	2800      	cmp	r0, #0
                proc->types.pointer.gesture_dir = LV_DIR_RIGHT;
 800272c:	bfcc      	ite	gt
 800272e:	2102      	movgt	r1, #2
                proc->types.pointer.gesture_dir = LV_DIR_LEFT;
 8002730:	2101      	movle	r1, #1
                proc->types.pointer.gesture_dir = LV_DIR_TOP;
 8002732:	f361 1307 	bfi	r3, r1, #4, #4
        lv_event_send(gesture_obj, LV_EVENT_GESTURE, indev_act);
 8002736:	4638      	mov	r0, r7
 8002738:	210c      	movs	r1, #12
                proc->types.pointer.gesture_dir = LV_DIR_TOP;
 800273a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        lv_event_send(gesture_obj, LV_EVENT_GESTURE, indev_act);
 800273e:	f7ff fbc3 	bl	8001ec8 <lv_event_send>
        if(indev_reset_check(proc)) return;
 8002742:	4620      	mov	r0, r4
 8002744:	f7ff fdea 	bl	800231c <indev_reset_check>
        if(indev_reset_check(proc)) return;
 8002748:	4620      	mov	r0, r4
 800274a:	f7ff fde7 	bl	800231c <indev_reset_check>
 800274e:	2800      	cmp	r0, #0
 8002750:	f47f af62 	bne.w	8002618 <indev_proc_press+0x64>
        if(proc->types.pointer.scroll_obj == NULL && proc->long_pr_sent == 0) {
 8002754:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002756:	2b00      	cmp	r3, #0
 8002758:	f47f af5e 	bne.w	8002618 <indev_proc_press+0x64>
 800275c:	7863      	ldrb	r3, [r4, #1]
 800275e:	07da      	lsls	r2, r3, #31
 8002760:	d420      	bmi.n	80027a4 <indev_proc_press+0x1f0>
            if(lv_tick_elaps(proc->pr_timestamp) > indev_act->driver->long_press_time) {
 8002762:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002764:	f014 f962 	bl	8016a2c <lv_tick_elaps>
 8002768:	6832      	ldr	r2, [r6, #0]
 800276a:	6813      	ldr	r3, [r2, #0]
 800276c:	8b9b      	ldrh	r3, [r3, #28]
 800276e:	4298      	cmp	r0, r3
 8002770:	d910      	bls.n	8002794 <indev_proc_press+0x1e0>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED, indev_act);
 8002772:	2105      	movs	r1, #5
 8002774:	6828      	ldr	r0, [r5, #0]
 8002776:	f7ff fba7 	bl	8001ec8 <lv_event_send>
                if(indev_reset_check(proc)) return;
 800277a:	4620      	mov	r0, r4
 800277c:	f7ff fdce 	bl	800231c <indev_reset_check>
 8002780:	2800      	cmp	r0, #0
 8002782:	f47f af49 	bne.w	8002618 <indev_proc_press+0x64>
                proc->long_pr_sent = 1;
 8002786:	7863      	ldrb	r3, [r4, #1]
 8002788:	f043 0301 	orr.w	r3, r3, #1
 800278c:	7063      	strb	r3, [r4, #1]
                proc->longpr_rep_timestamp = lv_tick_get();
 800278e:	f014 f93f 	bl	8016a10 <lv_tick_get>
 8002792:	6460      	str	r0, [r4, #68]	; 0x44
        if(proc->types.pointer.scroll_obj == NULL && proc->long_pr_sent == 1) {
 8002794:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002796:	2b00      	cmp	r3, #0
 8002798:	f47f af3e 	bne.w	8002618 <indev_proc_press+0x64>
 800279c:	7863      	ldrb	r3, [r4, #1]
 800279e:	07db      	lsls	r3, r3, #31
 80027a0:	f57f af3a 	bpl.w	8002618 <indev_proc_press+0x64>
            if(lv_tick_elaps(proc->longpr_rep_timestamp) > indev_act->driver->long_press_repeat_time) {
 80027a4:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80027a6:	f014 f941 	bl	8016a2c <lv_tick_elaps>
 80027aa:	6832      	ldr	r2, [r6, #0]
 80027ac:	6813      	ldr	r3, [r2, #0]
 80027ae:	8bdb      	ldrh	r3, [r3, #30]
 80027b0:	4298      	cmp	r0, r3
 80027b2:	f67f af31 	bls.w	8002618 <indev_proc_press+0x64>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED_REPEAT, indev_act);
 80027b6:	2106      	movs	r1, #6
 80027b8:	6828      	ldr	r0, [r5, #0]
 80027ba:	f7ff fb85 	bl	8001ec8 <lv_event_send>
                if(indev_reset_check(proc)) return;
 80027be:	4620      	mov	r0, r4
 80027c0:	f7ff fdac 	bl	800231c <indev_reset_check>
 80027c4:	2800      	cmp	r0, #0
 80027c6:	f47f af27 	bne.w	8002618 <indev_proc_press+0x64>
                proc->longpr_rep_timestamp = lv_tick_get();
 80027ca:	f014 f921 	bl	8016a10 <lv_tick_get>
 80027ce:	6460      	str	r0, [r4, #68]	; 0x44
 80027d0:	e722      	b.n	8002618 <indev_proc_press+0x64>
            lv_obj_has_flag(indev_obj_act, LV_OBJ_FLAG_PRESS_LOCK) == false) {
 80027d2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80027d6:	f001 faf4 	bl	8003dc2 <lv_obj_has_flag>
    else if(proc->types.pointer.scroll_obj == NULL &&
 80027da:	2800      	cmp	r0, #0
 80027dc:	f47f af22 	bne.w	8002624 <indev_proc_press+0x70>
 80027e0:	e6f6      	b.n	80025d0 <indev_proc_press+0x1c>
        proc->types.pointer.last_point.x = proc->types.pointer.act_point.x;
 80027e2:	6863      	ldr	r3, [r4, #4]
 80027e4:	60a3      	str	r3, [r4, #8]
        if(proc->types.pointer.act_obj != NULL) {
 80027e6:	2800      	cmp	r0, #0
 80027e8:	d156      	bne.n	8002898 <indev_proc_press+0x2e4>
        proc->types.pointer.act_obj  = indev_obj_act; /*Save the pressed object*/
 80027ea:	682b      	ldr	r3, [r5, #0]
        proc->types.pointer.last_obj = indev_obj_act;
 80027ec:	e9c4 3308 	strd	r3, r3, [r4, #32]
        if(indev_obj_act != NULL) {
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	f43f af1c 	beq.w	800262e <indev_proc_press+0x7a>
            proc->pr_timestamp                 = lv_tick_get();
 80027f6:	f014 f90b 	bl	8016a10 <lv_tick_get>
            proc->long_pr_sent                 = 0;
 80027fa:	7863      	ldrb	r3, [r4, #1]
            proc->types.pointer.gesture_sum.x  = 0;
 80027fc:	2200      	movs	r2, #0
            proc->pr_timestamp                 = lv_tick_get();
 80027fe:	6420      	str	r0, [r4, #64]	; 0x40
            proc->long_pr_sent                 = 0;
 8002800:	f36f 0300 	bfc	r3, #0, #1
            lv_event_send(indev_obj_act, LV_EVENT_PRESSED, indev_act);
 8002804:	2101      	movs	r1, #1
            proc->types.pointer.gesture_sum.x  = 0;
 8002806:	63a2      	str	r2, [r4, #56]	; 0x38
            proc->long_pr_sent                 = 0;
 8002808:	7063      	strb	r3, [r4, #1]
            proc->types.pointer.scroll_dir = LV_DIR_NONE;
 800280a:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
            lv_event_send(indev_obj_act, LV_EVENT_PRESSED, indev_act);
 800280c:	6828      	ldr	r0, [r5, #0]
            proc->types.pointer.scroll_dir = LV_DIR_NONE;
 800280e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8002812:	f023 0301 	bic.w	r3, r3, #1
            proc->types.pointer.scroll_sum.x     = 0;
 8002816:	e9c4 2204 	strd	r2, r2, [r4, #16]
            proc->types.pointer.scroll_dir = LV_DIR_NONE;
 800281a:	87a3      	strh	r3, [r4, #60]	; 0x3c
            lv_event_send(indev_obj_act, LV_EVENT_PRESSED, indev_act);
 800281c:	6832      	ldr	r2, [r6, #0]
 800281e:	f7ff fb53 	bl	8001ec8 <lv_event_send>
            if(indev_reset_check(proc)) return;
 8002822:	4620      	mov	r0, r4
 8002824:	f7ff fd7a 	bl	800231c <indev_reset_check>
 8002828:	2800      	cmp	r0, #0
 800282a:	f47f aef5 	bne.w	8002618 <indev_proc_press+0x64>
            if(indev_act->proc.wait_until_release) return;
 800282e:	6837      	ldr	r7, [r6, #0]
 8002830:	797b      	ldrb	r3, [r7, #5]
 8002832:	071b      	lsls	r3, r3, #28
 8002834:	f53f aef0 	bmi.w	8002618 <indev_proc_press+0x64>
    lv_obj_t * obj_to_focus = indev_obj_act;
 8002838:	f8d5 9000 	ldr.w	r9, [r5]
    if(lv_obj_has_flag(obj_to_focus, LV_OBJ_FLAG_CLICK_FOCUSABLE) &&
 800283c:	2104      	movs	r1, #4
 800283e:	4648      	mov	r0, r9
 8002840:	f001 fabf 	bl	8003dc2 <lv_obj_has_flag>
 8002844:	b1e0      	cbz	r0, 8002880 <indev_proc_press+0x2cc>
 8002846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002848:	4599      	cmp	r9, r3
 800284a:	d019      	beq.n	8002880 <indev_proc_press+0x2cc>
        lv_group_t * g_act = lv_obj_get_group(obj_to_focus);
 800284c:	4648      	mov	r0, r9
            indev_click_focus(&indev_act->proc);
 800284e:	f107 0804 	add.w	r8, r7, #4
        lv_group_t * g_act = lv_obj_get_group(obj_to_focus);
 8002852:	f001 fac5 	bl	8003de0 <lv_obj_get_group>
 8002856:	4682      	mov	sl, r0
        lv_group_t * g_prev = proc->types.pointer.last_pressed ? lv_obj_get_group(proc->types.pointer.last_pressed) : NULL;
 8002858:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800285a:	2800      	cmp	r0, #0
 800285c:	d053      	beq.n	8002906 <indev_proc_press+0x352>
 800285e:	f001 fabf 	bl	8003de0 <lv_obj_get_group>
        if(g_act == g_prev) {
 8002862:	4582      	cmp	sl, r0
        lv_group_t * g_prev = proc->types.pointer.last_pressed ? lv_obj_get_group(proc->types.pointer.last_pressed) : NULL;
 8002864:	4603      	mov	r3, r0
        if(g_act == g_prev) {
 8002866:	d12a      	bne.n	80028be <indev_proc_press+0x30a>
            if(g_act) {
 8002868:	f1ba 0f00 	cmp.w	sl, #0
 800286c:	d04e      	beq.n	800290c <indev_proc_press+0x358>
                lv_group_focus_obj(obj_to_focus);
 800286e:	4648      	mov	r0, r9
 8002870:	f7ff fd09 	bl	8002286 <lv_group_focus_obj>
                if(indev_reset_check(proc)) return;
 8002874:	4640      	mov	r0, r8
 8002876:	f7ff fd51 	bl	800231c <indev_reset_check>
 800287a:	b908      	cbnz	r0, 8002880 <indev_proc_press+0x2cc>
        proc->types.pointer.last_pressed = obj_to_focus;
 800287c:	f8c7 9030 	str.w	r9, [r7, #48]	; 0x30
            if(indev_reset_check(proc)) return;
 8002880:	4620      	mov	r0, r4
 8002882:	f7ff fd4b 	bl	800231c <indev_reset_check>
 8002886:	2800      	cmp	r0, #0
 8002888:	f43f aed1 	beq.w	800262e <indev_proc_press+0x7a>
 800288c:	e6c4      	b.n	8002618 <indev_proc_press+0x64>
 800288e:	bf00      	nop
 8002890:	200029a4 	.word	0x200029a4
 8002894:	200029a0 	.word	0x200029a0
            lv_event_send(last_obj, LV_EVENT_PRESS_LOST, indev_act);
 8002898:	6832      	ldr	r2, [r6, #0]
 800289a:	2103      	movs	r1, #3
 800289c:	f7ff fb14 	bl	8001ec8 <lv_event_send>
            if(indev_reset_check(proc)) return;
 80028a0:	4620      	mov	r0, r4
 80028a2:	f7ff fd3b 	bl	800231c <indev_reset_check>
 80028a6:	2800      	cmp	r0, #0
 80028a8:	d09f      	beq.n	80027ea <indev_proc_press+0x236>
 80028aa:	e6b5      	b.n	8002618 <indev_proc_press+0x64>
                    lv_event_send(proc->types.pointer.last_pressed, LV_EVENT_DEFOCUSED, indev_act);
 80028ac:	6832      	ldr	r2, [r6, #0]
 80028ae:	210f      	movs	r1, #15
 80028b0:	f7ff fb0a 	bl	8001ec8 <lv_event_send>
                    if(indev_reset_check(proc)) return;
 80028b4:	4640      	mov	r0, r8
 80028b6:	f7ff fd31 	bl	800231c <indev_reset_check>
 80028ba:	b350      	cbz	r0, 8002912 <indev_proc_press+0x35e>
 80028bc:	e7e0      	b.n	8002880 <indev_proc_press+0x2cc>
            if(g_prev == NULL && proc->types.pointer.last_pressed) {
 80028be:	b978      	cbnz	r0, 80028e0 <indev_proc_press+0x32c>
 80028c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028c2:	b16b      	cbz	r3, 80028e0 <indev_proc_press+0x32c>
                lv_event_send(proc->types.pointer.last_pressed, LV_EVENT_DEFOCUSED, indev_act);
 80028c4:	6832      	ldr	r2, [r6, #0]
 80028c6:	210f      	movs	r1, #15
 80028c8:	4618      	mov	r0, r3
 80028ca:	f7ff fafd 	bl	8001ec8 <lv_event_send>
                if(indev_reset_check(proc)) return;
 80028ce:	4640      	mov	r0, r8
 80028d0:	f7ff fd24 	bl	800231c <indev_reset_check>
 80028d4:	2800      	cmp	r0, #0
 80028d6:	d1d3      	bne.n	8002880 <indev_proc_press+0x2cc>
            if(g_act) {
 80028d8:	f1ba 0f00 	cmp.w	sl, #0
 80028dc:	d1c7      	bne.n	800286e <indev_proc_press+0x2ba>
 80028de:	e018      	b.n	8002912 <indev_proc_press+0x35e>
                if(proc->types.pointer.last_pressed) {
 80028e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80028e2:	2800      	cmp	r0, #0
 80028e4:	d0f8      	beq.n	80028d8 <indev_proc_press+0x324>
                    if(g_prev == NULL) {
 80028e6:	6832      	ldr	r2, [r6, #0]
 80028e8:	b90b      	cbnz	r3, 80028ee <indev_proc_press+0x33a>
                        lv_event_send(proc->types.pointer.last_pressed, LV_EVENT_DEFOCUSED, indev_act);
 80028ea:	210f      	movs	r1, #15
 80028ec:	e7ed      	b.n	80028ca <indev_proc_press+0x316>
                        lv_event_send(proc->types.pointer.last_pressed, LV_EVENT_LEAVE, indev_act);
 80028ee:	2110      	movs	r1, #16
 80028f0:	e7eb      	b.n	80028ca <indev_proc_press+0x316>
        gesture_obj = lv_obj_get_parent(gesture_obj);
 80028f2:	4638      	mov	r0, r7
 80028f4:	f005 f882 	bl	80079fc <lv_obj_get_parent>
 80028f8:	4607      	mov	r7, r0
 80028fa:	e6d0      	b.n	800269e <indev_proc_press+0xea>
            if(proc->types.pointer.gesture_sum.y > 0)
 80028fc:	2900      	cmp	r1, #0
                proc->types.pointer.gesture_dir = LV_DIR_BOTTOM;
 80028fe:	bfcc      	ite	gt
 8002900:	2108      	movgt	r1, #8
                proc->types.pointer.gesture_dir = LV_DIR_TOP;
 8002902:	2104      	movle	r1, #4
 8002904:	e715      	b.n	8002732 <indev_proc_press+0x17e>
        if(g_act == g_prev) {
 8002906:	f1ba 0f00 	cmp.w	sl, #0
 800290a:	d1d9      	bne.n	80028c0 <indev_proc_press+0x30c>
                if(proc->types.pointer.last_pressed) {
 800290c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800290e:	2800      	cmp	r0, #0
 8002910:	d1cc      	bne.n	80028ac <indev_proc_press+0x2f8>
                lv_event_send(obj_to_focus, LV_EVENT_FOCUSED, indev_act);
 8002912:	6832      	ldr	r2, [r6, #0]
 8002914:	210e      	movs	r1, #14
 8002916:	4648      	mov	r0, r9
 8002918:	f7ff fad6 	bl	8001ec8 <lv_event_send>
                if(indev_reset_check(proc)) return;
 800291c:	e7aa      	b.n	8002874 <indev_proc_press+0x2c0>
 800291e:	bf00      	nop

08002920 <lv_indev_read_timer_cb>:
    indev_act = timer->user_data;
 8002920:	68c0      	ldr	r0, [r0, #12]
    if(indev_act->driver->disp == NULL) return; /*Not assigned to any displays*/
 8002922:	6803      	ldr	r3, [r0, #0]
{
 8002924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(indev_act->driver->disp == NULL) return; /*Not assigned to any displays*/
 8002928:	691b      	ldr	r3, [r3, #16]
{
 800292a:	b085      	sub	sp, #20
    indev_act = timer->user_data;
 800292c:	4db6      	ldr	r5, [pc, #728]	; (8002c08 <lv_indev_read_timer_cb+0x2e8>)
 800292e:	6028      	str	r0, [r5, #0]
    if(indev_act->driver->disp == NULL) return; /*Not assigned to any displays*/
 8002930:	2b00      	cmp	r3, #0
 8002932:	f000 8087 	beq.w	8002a44 <lv_indev_read_timer_cb+0x124>
    indev_proc_reset_query_handler(indev_act);
 8002936:	f7ff fd43 	bl	80023c0 <indev_proc_reset_query_handler>
    if(indev_act->proc.disabled) return;
 800293a:	7943      	ldrb	r3, [r0, #5]
 800293c:	075b      	lsls	r3, r3, #29
 800293e:	f100 8081 	bmi.w	8002a44 <lv_indev_read_timer_cb+0x124>
        indev_obj_act = NULL;
 8002942:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8002c0c <lv_indev_read_timer_cb+0x2ec>
 8002946:	464e      	mov	r6, r9
        _lv_indev_read(indev_act, &data);
 8002948:	4669      	mov	r1, sp
 800294a:	6828      	ldr	r0, [r5, #0]
 800294c:	f014 f834 	bl	80169b8 <_lv_indev_read>
        indev_proc_reset_query_handler(indev_act);
 8002950:	6828      	ldr	r0, [r5, #0]
        continue_reading = data.continue_reading;
 8002952:	f89d 800f 	ldrb.w	r8, [sp, #15]
        indev_proc_reset_query_handler(indev_act);
 8002956:	f7ff fd33 	bl	80023c0 <indev_proc_reset_query_handler>
        indev_obj_act = NULL;
 800295a:	2300      	movs	r3, #0
 800295c:	f8c9 3000 	str.w	r3, [r9]
        indev_act->proc.state = data.state;
 8002960:	f89d 300e 	ldrb.w	r3, [sp, #14]
        if(indev_act->proc.state == LV_INDEV_STATE_PRESSED) {
 8002964:	2b01      	cmp	r3, #1
        indev_act->proc.state = data.state;
 8002966:	7103      	strb	r3, [r0, #4]
        if(indev_act->proc.state == LV_INDEV_STATE_PRESSED) {
 8002968:	6803      	ldr	r3, [r0, #0]
 800296a:	d105      	bne.n	8002978 <lv_indev_read_timer_cb+0x58>
            indev_act->driver->disp->last_activity_time = lv_tick_get();
 800296c:	691c      	ldr	r4, [r3, #16]
 800296e:	f014 f84f 	bl	8016a10 <lv_tick_get>
 8002972:	f8c4 0154 	str.w	r0, [r4, #340]	; 0x154
 8002976:	e006      	b.n	8002986 <lv_indev_read_timer_cb+0x66>
        else if(indev_act->driver->type == LV_INDEV_TYPE_ENCODER && data.enc_diff) {
 8002978:	781a      	ldrb	r2, [r3, #0]
 800297a:	2a04      	cmp	r2, #4
 800297c:	d103      	bne.n	8002986 <lv_indev_read_timer_cb+0x66>
 800297e:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8002982:	2a00      	cmp	r2, #0
 8002984:	d1f2      	bne.n	800296c <lv_indev_read_timer_cb+0x4c>
        if(indev_act->driver->type == LV_INDEV_TYPE_POINTER) {
 8002986:	682c      	ldr	r4, [r5, #0]
 8002988:	6822      	ldr	r2, [r4, #0]
 800298a:	7813      	ldrb	r3, [r2, #0]
 800298c:	2b01      	cmp	r3, #1
 800298e:	d144      	bne.n	8002a1a <lv_indev_read_timer_cb+0xfa>
    lv_disp_t *disp = i->driver->disp;
 8002990:	6910      	ldr	r0, [r2, #16]
    i->proc.types.pointer.last_raw_point.y = data->point.y;
 8002992:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
    if(disp->driver->rotated == LV_DISP_ROT_180 || disp->driver->rotated == LV_DISP_ROT_270) {
 8002996:	6807      	ldr	r7, [r0, #0]
    i->proc.types.pointer.last_raw_point.x = data->point.x;
 8002998:	f9bd 2000 	ldrsh.w	r2, [sp]
    if(disp->driver->rotated == LV_DISP_ROT_180 || disp->driver->rotated == LV_DISP_ROT_270) {
 800299c:	7a39      	ldrb	r1, [r7, #8]
    i->proc.types.pointer.last_raw_point.x = data->point.x;
 800299e:	8222      	strh	r2, [r4, #16]
    if(disp->driver->rotated == LV_DISP_ROT_180 || disp->driver->rotated == LV_DISP_ROT_270) {
 80029a0:	f011 0f10 	tst.w	r1, #16
    i->proc.types.pointer.last_raw_point.y = data->point.y;
 80029a4:	8263      	strh	r3, [r4, #18]
    if(disp->driver->rotated == LV_DISP_ROT_180 || disp->driver->rotated == LV_DISP_ROT_270) {
 80029a6:	f000 82fc 	beq.w	8002fa2 <lv_indev_read_timer_cb+0x682>
        data->point.x = disp->driver->hor_res - data->point.x - 1;
 80029aa:	f8b7 c000 	ldrh.w	ip, [r7]
 80029ae:	43d2      	mvns	r2, r2
        data->point.y = disp->driver->ver_res - data->point.y - 1;
 80029b0:	43db      	mvns	r3, r3
        data->point.x = disp->driver->hor_res - data->point.x - 1;
 80029b2:	4462      	add	r2, ip
 80029b4:	f8ad 2000 	strh.w	r2, [sp]
        data->point.y = disp->driver->ver_res - data->point.y - 1;
 80029b8:	887a      	ldrh	r2, [r7, #2]
 80029ba:	4413      	add	r3, r2
 80029bc:	f8ad 3002 	strh.w	r3, [sp, #2]
    if(disp->driver->rotated == LV_DISP_ROT_90 || disp->driver->rotated == LV_DISP_ROT_270) {
 80029c0:	070b      	lsls	r3, r1, #28
 80029c2:	d50a      	bpl.n	80029da <lv_indev_read_timer_cb+0xba>
        data->point.y = data->point.x;
 80029c4:	f8bd 2000 	ldrh.w	r2, [sp]
        lv_coord_t tmp = data->point.y;
 80029c8:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
        data->point.y = data->point.x;
 80029cc:	f8ad 2002 	strh.w	r2, [sp, #2]
        data->point.x = disp->driver->ver_res - tmp - 1;
 80029d0:	43db      	mvns	r3, r3
 80029d2:	887a      	ldrh	r2, [r7, #2]
 80029d4:	4413      	add	r3, r2
 80029d6:	f8ad 3000 	strh.w	r3, [sp]
    if(data->point.x >= lv_disp_get_hor_res(i->driver->disp)) LV_LOG_WARN("X is %d which is greater than hor. res", data->point.x);
 80029da:	f013 ff6b 	bl	80168b4 <lv_disp_get_hor_res>
    if(data->point.y >= lv_disp_get_ver_res(i->driver->disp)) LV_LOG_WARN("Y is %d which is greater than hor. res", data->point.y);
 80029de:	6823      	ldr	r3, [r4, #0]
 80029e0:	6918      	ldr	r0, [r3, #16]
 80029e2:	f013 ff77 	bl	80168d4 <lv_disp_get_ver_res>
    if(i->cursor != NULL &&
 80029e6:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80029e8:	b148      	cbz	r0, 80029fe <lv_indev_read_timer_cb+0xde>
 80029ea:	68e2      	ldr	r2, [r4, #12]
 80029ec:	9b00      	ldr	r3, [sp, #0]
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d005      	beq.n	80029fe <lv_indev_read_timer_cb+0xde>
        lv_obj_set_pos(i->cursor, data->point.x, data->point.y);
 80029f2:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
 80029f6:	f9bd 1000 	ldrsh.w	r1, [sp]
 80029fa:	f002 f997 	bl	8004d2c <lv_obj_set_pos>
    i->proc.types.pointer.act_point.x = data->point.x;
 80029fe:	9b00      	ldr	r3, [sp, #0]
 8002a00:	1d20      	adds	r0, r4, #4
 8002a02:	60a3      	str	r3, [r4, #8]
    if(i->proc.state == LV_INDEV_STATE_PRESSED) {
 8002a04:	7923      	ldrb	r3, [r4, #4]
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d104      	bne.n	8002a14 <lv_indev_read_timer_cb+0xf4>
        indev_proc_press(&i->proc);
 8002a0a:	f7ff fdd3 	bl	80025b4 <indev_proc_press>
    i->proc.types.pointer.last_point.x = i->proc.types.pointer.act_point.x;
 8002a0e:	68a3      	ldr	r3, [r4, #8]
 8002a10:	60e3      	str	r3, [r4, #12]
 8002a12:	e00d      	b.n	8002a30 <lv_indev_read_timer_cb+0x110>
        indev_proc_release(&i->proc);
 8002a14:	f7ff fc8e 	bl	8002334 <indev_proc_release>
    i->proc.types.pointer.last_point.y = i->proc.types.pointer.act_point.y;
 8002a18:	e7f9      	b.n	8002a0e <lv_indev_read_timer_cb+0xee>
        else if(indev_act->driver->type == LV_INDEV_TYPE_KEYPAD) {
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	f040 80f8 	bne.w	8002c10 <lv_indev_read_timer_cb+0x2f0>
    if(data->state == LV_INDEV_STATE_PRESSED && i->proc.wait_until_release) return;
 8002a20:	f89d 100e 	ldrb.w	r1, [sp, #14]
 8002a24:	7963      	ldrb	r3, [r4, #5]
 8002a26:	2901      	cmp	r1, #1
 8002a28:	f003 0208 	and.w	r2, r3, #8
 8002a2c:	d10d      	bne.n	8002a4a <lv_indev_read_timer_cb+0x12a>
 8002a2e:	b19a      	cbz	r2, 8002a58 <lv_indev_read_timer_cb+0x138>
        indev_proc_reset_query_handler(indev_act);
 8002a30:	6828      	ldr	r0, [r5, #0]
 8002a32:	f7ff fcc5 	bl	80023c0 <indev_proc_reset_query_handler>
    } while(continue_reading);
 8002a36:	f1b8 0f00 	cmp.w	r8, #0
 8002a3a:	d185      	bne.n	8002948 <lv_indev_read_timer_cb+0x28>
    indev_act     = NULL;
 8002a3c:	f8c5 8000 	str.w	r8, [r5]
    indev_obj_act = NULL;
 8002a40:	f8c6 8000 	str.w	r8, [r6]
}
 8002a44:	b005      	add	sp, #20
 8002a46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(i->proc.wait_until_release) {
 8002a4a:	b12a      	cbz	r2, 8002a58 <lv_indev_read_timer_cb+0x138>
        i->proc.pr_timestamp            = 0;
 8002a4c:	2200      	movs	r2, #0
        i->proc.long_pr_sent            = 0;
 8002a4e:	f023 0309 	bic.w	r3, r3, #9
        i->proc.pr_timestamp            = 0;
 8002a52:	6462      	str	r2, [r4, #68]	; 0x44
        i->proc.long_pr_sent            = 0;
 8002a54:	7163      	strb	r3, [r4, #5]
        i->proc.types.keypad.last_state = LV_INDEV_STATE_RELEASED; /*To skip the processing of release*/
 8002a56:	7222      	strb	r2, [r4, #8]
    lv_group_t * g = i->group;
 8002a58:	6d27      	ldr	r7, [r4, #80]	; 0x50
    if(g == NULL) return;
 8002a5a:	2f00      	cmp	r7, #0
 8002a5c:	d0e8      	beq.n	8002a30 <lv_indev_read_timer_cb+0x110>
    indev_obj_act = lv_group_get_focused(g);
 8002a5e:	4638      	mov	r0, r7
 8002a60:	f7ff fbdd 	bl	800221e <lv_group_get_focused>
 8002a64:	6030      	str	r0, [r6, #0]
    if(indev_obj_act == NULL) return;
 8002a66:	2800      	cmp	r0, #0
 8002a68:	d0e2      	beq.n	8002a30 <lv_indev_read_timer_cb+0x110>
    i->proc.types.keypad.last_key = data->key;
 8002a6a:	9a01      	ldr	r2, [sp, #4]
    uint32_t prev_key = i->proc.types.keypad.last_key;
 8002a6c:	68e3      	ldr	r3, [r4, #12]
    i->proc.types.keypad.last_key = data->key;
 8002a6e:	60e2      	str	r2, [r4, #12]
    i->proc.types.keypad.last_state = data->state;
 8002a70:	f89d b00e 	ldrb.w	fp, [sp, #14]
    uint32_t prev_state             = i->proc.types.keypad.last_state;
 8002a74:	f894 a008 	ldrb.w	sl, [r4, #8]
    if(data->state == LV_INDEV_STATE_PRESSED && prev_state == LV_INDEV_STATE_RELEASED) {
 8002a78:	f1bb 0f01 	cmp.w	fp, #1
    i->proc.types.keypad.last_state = data->state;
 8002a7c:	f884 b008 	strb.w	fp, [r4, #8]
    if(data->state == LV_INDEV_STATE_PRESSED && prev_state == LV_INDEV_STATE_RELEASED) {
 8002a80:	f040 808d 	bne.w	8002b9e <lv_indev_read_timer_cb+0x27e>
 8002a84:	f1ba 0f00 	cmp.w	sl, #0
 8002a88:	d134      	bne.n	8002af4 <lv_indev_read_timer_cb+0x1d4>
        i->proc.pr_timestamp = lv_tick_get();
 8002a8a:	f013 ffc1 	bl	8016a10 <lv_tick_get>
        if(data->key == LV_KEY_ENTER) {
 8002a8e:	9901      	ldr	r1, [sp, #4]
        i->proc.pr_timestamp = lv_tick_get();
 8002a90:	6460      	str	r0, [r4, #68]	; 0x44
        if(data->key == LV_KEY_ENTER) {
 8002a92:	290a      	cmp	r1, #10
 8002a94:	d108      	bne.n	8002aa8 <lv_indev_read_timer_cb+0x188>
            lv_group_send_data(g, LV_KEY_ENTER);
 8002a96:	4638      	mov	r0, r7
 8002a98:	f7ff fbc6 	bl	8002228 <lv_group_send_data>
            lv_event_send(indev_obj_act, LV_EVENT_PRESSED, indev_act);
 8002a9c:	682a      	ldr	r2, [r5, #0]
 8002a9e:	4659      	mov	r1, fp
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED, indev_act);
 8002aa0:	6830      	ldr	r0, [r6, #0]
 8002aa2:	f7ff fa11 	bl	8001ec8 <lv_event_send>
 8002aa6:	e010      	b.n	8002aca <lv_indev_read_timer_cb+0x1aa>
        else if(data->key == LV_KEY_ESC) {
 8002aa8:	291b      	cmp	r1, #27
 8002aaa:	d105      	bne.n	8002ab8 <lv_indev_read_timer_cb+0x198>
            lv_group_send_data(g, LV_KEY_ESC);
 8002aac:	4638      	mov	r0, r7
 8002aae:	f7ff fbbb 	bl	8002228 <lv_group_send_data>
            lv_event_send(indev_obj_act, LV_EVENT_CANCEL, indev_act);
 8002ab2:	682a      	ldr	r2, [r5, #0]
 8002ab4:	2120      	movs	r1, #32
 8002ab6:	e7f3      	b.n	8002aa0 <lv_indev_read_timer_cb+0x180>
        else if(data->key == LV_KEY_NEXT) {
 8002ab8:	2909      	cmp	r1, #9
 8002aba:	d10b      	bne.n	8002ad4 <lv_indev_read_timer_cb+0x1b4>
            lv_group_set_editing(g, false); /*Editing is not used by KEYPAD is be sure it is disabled*/
 8002abc:	4638      	mov	r0, r7
 8002abe:	4651      	mov	r1, sl
 8002ac0:	f7ff fbc0 	bl	8002244 <lv_group_set_editing>
            lv_group_focus_next(g);
 8002ac4:	4638      	mov	r0, r7
 8002ac6:	f7ff fb01 	bl	80020cc <lv_group_focus_next>
                if(indev_reset_check(&i->proc)) return;
 8002aca:	1d20      	adds	r0, r4, #4
                if(indev_reset_check(&i->proc)) return;
 8002acc:	f7ff fc26 	bl	800231c <indev_reset_check>
 8002ad0:	b168      	cbz	r0, 8002aee <lv_indev_read_timer_cb+0x1ce>
 8002ad2:	e7ad      	b.n	8002a30 <lv_indev_read_timer_cb+0x110>
        else if(data->key == LV_KEY_PREV) {
 8002ad4:	290b      	cmp	r1, #11
 8002ad6:	d107      	bne.n	8002ae8 <lv_indev_read_timer_cb+0x1c8>
            lv_group_set_editing(g, false); /*Editing is not used by KEYPAD is be sure it is disabled*/
 8002ad8:	4638      	mov	r0, r7
 8002ada:	4651      	mov	r1, sl
 8002adc:	f7ff fbb2 	bl	8002244 <lv_group_set_editing>
            lv_group_focus_prev(g);
 8002ae0:	4638      	mov	r0, r7
 8002ae2:	f7ff faff 	bl	80020e4 <lv_group_focus_prev>
            if(indev_reset_check(&i->proc)) return;
 8002ae6:	e7f0      	b.n	8002aca <lv_indev_read_timer_cb+0x1aa>
            lv_group_send_data(g, data->key);
 8002ae8:	4638      	mov	r0, r7
 8002aea:	f7ff fb9d 	bl	8002228 <lv_group_send_data>
    indev_obj_act = NULL;
 8002aee:	2300      	movs	r3, #0
 8002af0:	6033      	str	r3, [r6, #0]
 8002af2:	e79d      	b.n	8002a30 <lv_indev_read_timer_cb+0x110>
    else if(data->state == LV_INDEV_STATE_PRESSED && prev_state == LV_INDEV_STATE_PRESSED) {
 8002af4:	f1ba 0f01 	cmp.w	sl, #1
 8002af8:	d1f9      	bne.n	8002aee <lv_indev_read_timer_cb+0x1ce>
        if(data->key == LV_KEY_ENTER) {
 8002afa:	2a0a      	cmp	r2, #10
 8002afc:	d016      	beq.n	8002b2c <lv_indev_read_timer_cb+0x20c>
        if(i->proc.long_pr_sent == 0 && lv_tick_elaps(i->proc.pr_timestamp) > i->driver->long_press_time) {
 8002afe:	7963      	ldrb	r3, [r4, #5]
 8002b00:	07d8      	lsls	r0, r3, #31
 8002b02:	d41f      	bmi.n	8002b44 <lv_indev_read_timer_cb+0x224>
 8002b04:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8002b06:	f013 ff91 	bl	8016a2c <lv_tick_elaps>
 8002b0a:	6823      	ldr	r3, [r4, #0]
 8002b0c:	8b9b      	ldrh	r3, [r3, #28]
 8002b0e:	4298      	cmp	r0, r3
            i->proc.long_pr_sent = 1;
 8002b10:	7963      	ldrb	r3, [r4, #5]
        if(i->proc.long_pr_sent == 0 && lv_tick_elaps(i->proc.pr_timestamp) > i->driver->long_press_time) {
 8002b12:	d915      	bls.n	8002b40 <lv_indev_read_timer_cb+0x220>
            i->proc.long_pr_sent = 1;
 8002b14:	f043 0301 	orr.w	r3, r3, #1
 8002b18:	7163      	strb	r3, [r4, #5]
            if(data->key == LV_KEY_ENTER) {
 8002b1a:	9b01      	ldr	r3, [sp, #4]
 8002b1c:	2b0a      	cmp	r3, #10
 8002b1e:	d1e6      	bne.n	8002aee <lv_indev_read_timer_cb+0x1ce>
                i->proc.longpr_rep_timestamp = lv_tick_get();
 8002b20:	f013 ff76 	bl	8016a10 <lv_tick_get>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED, indev_act);
 8002b24:	682a      	ldr	r2, [r5, #0]
 8002b26:	2105      	movs	r1, #5
                i->proc.longpr_rep_timestamp = lv_tick_get();
 8002b28:	64a0      	str	r0, [r4, #72]	; 0x48
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED, indev_act);
 8002b2a:	e7b9      	b.n	8002aa0 <lv_indev_read_timer_cb+0x180>
            lv_event_send(indev_obj_act, LV_EVENT_PRESSING, indev_act);
 8002b2c:	682a      	ldr	r2, [r5, #0]
 8002b2e:	2102      	movs	r1, #2
 8002b30:	f7ff f9ca 	bl	8001ec8 <lv_event_send>
            if(indev_reset_check(&i->proc)) return;
 8002b34:	1d20      	adds	r0, r4, #4
 8002b36:	f7ff fbf1 	bl	800231c <indev_reset_check>
 8002b3a:	2800      	cmp	r0, #0
 8002b3c:	d0df      	beq.n	8002afe <lv_indev_read_timer_cb+0x1de>
 8002b3e:	e777      	b.n	8002a30 <lv_indev_read_timer_cb+0x110>
        else if(i->proc.long_pr_sent != 0 &&
 8002b40:	07d9      	lsls	r1, r3, #31
 8002b42:	d5d4      	bpl.n	8002aee <lv_indev_read_timer_cb+0x1ce>
                lv_tick_elaps(i->proc.longpr_rep_timestamp) > i->driver->long_press_repeat_time) {
 8002b44:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8002b46:	f013 ff71 	bl	8016a2c <lv_tick_elaps>
 8002b4a:	6823      	ldr	r3, [r4, #0]
 8002b4c:	8bdb      	ldrh	r3, [r3, #30]
        else if(i->proc.long_pr_sent != 0 &&
 8002b4e:	4298      	cmp	r0, r3
 8002b50:	d9cd      	bls.n	8002aee <lv_indev_read_timer_cb+0x1ce>
            i->proc.longpr_rep_timestamp = lv_tick_get();
 8002b52:	f013 ff5d 	bl	8016a10 <lv_tick_get>
            if(data->key == LV_KEY_ENTER) {
 8002b56:	9901      	ldr	r1, [sp, #4]
            i->proc.longpr_rep_timestamp = lv_tick_get();
 8002b58:	64a0      	str	r0, [r4, #72]	; 0x48
            if(data->key == LV_KEY_ENTER) {
 8002b5a:	3404      	adds	r4, #4
 8002b5c:	290a      	cmp	r1, #10
 8002b5e:	d106      	bne.n	8002b6e <lv_indev_read_timer_cb+0x24e>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED_REPEAT, indev_act);
 8002b60:	682a      	ldr	r2, [r5, #0]
 8002b62:	2106      	movs	r1, #6
 8002b64:	6830      	ldr	r0, [r6, #0]
 8002b66:	f7ff f9af 	bl	8001ec8 <lv_event_send>
                if(indev_reset_check(&i->proc)) return;
 8002b6a:	4620      	mov	r0, r4
 8002b6c:	e7ae      	b.n	8002acc <lv_indev_read_timer_cb+0x1ac>
            else if(data->key == LV_KEY_NEXT) {
 8002b6e:	2909      	cmp	r1, #9
 8002b70:	d107      	bne.n	8002b82 <lv_indev_read_timer_cb+0x262>
                lv_group_set_editing(g, false); /*Editing is not used by KEYPAD is be sure it is disabled*/
 8002b72:	4638      	mov	r0, r7
 8002b74:	2100      	movs	r1, #0
 8002b76:	f7ff fb65 	bl	8002244 <lv_group_set_editing>
                lv_group_focus_next(g);
 8002b7a:	4638      	mov	r0, r7
 8002b7c:	f7ff faa6 	bl	80020cc <lv_group_focus_next>
                if(indev_reset_check(&i->proc)) return;
 8002b80:	e7f3      	b.n	8002b6a <lv_indev_read_timer_cb+0x24a>
            else if(data->key == LV_KEY_PREV) {
 8002b82:	290b      	cmp	r1, #11
 8002b84:	d107      	bne.n	8002b96 <lv_indev_read_timer_cb+0x276>
                lv_group_set_editing(g, false); /*Editing is not used by KEYPAD is be sure it is disabled*/
 8002b86:	4638      	mov	r0, r7
 8002b88:	2100      	movs	r1, #0
 8002b8a:	f7ff fb5b 	bl	8002244 <lv_group_set_editing>
                lv_group_focus_prev(g);
 8002b8e:	4638      	mov	r0, r7
 8002b90:	f7ff faa8 	bl	80020e4 <lv_group_focus_prev>
                if(indev_reset_check(&i->proc)) return;
 8002b94:	e7e9      	b.n	8002b6a <lv_indev_read_timer_cb+0x24a>
                lv_group_send_data(g, data->key);
 8002b96:	4638      	mov	r0, r7
 8002b98:	f7ff fb46 	bl	8002228 <lv_group_send_data>
                if(indev_reset_check(&i->proc)) return;
 8002b9c:	e7e5      	b.n	8002b6a <lv_indev_read_timer_cb+0x24a>
    else if(data->state == LV_INDEV_STATE_RELEASED && prev_state == LV_INDEV_STATE_PRESSED) {
 8002b9e:	f1bb 0f00 	cmp.w	fp, #0
 8002ba2:	d1a4      	bne.n	8002aee <lv_indev_read_timer_cb+0x1ce>
 8002ba4:	f1ba 0f01 	cmp.w	sl, #1
 8002ba8:	d1a1      	bne.n	8002aee <lv_indev_read_timer_cb+0x1ce>
        if(data->key == LV_KEY_ENTER) {
 8002baa:	2b0a      	cmp	r3, #10
 8002bac:	682a      	ldr	r2, [r5, #0]
        data->key = prev_key;
 8002bae:	9301      	str	r3, [sp, #4]
        if(data->key == LV_KEY_ENTER) {
 8002bb0:	d006      	beq.n	8002bc0 <lv_indev_read_timer_cb+0x2a0>
        i->proc.pr_timestamp = 0;
 8002bb2:	2200      	movs	r2, #0
        i->proc.long_pr_sent = 0;
 8002bb4:	7963      	ldrb	r3, [r4, #5]
 8002bb6:	f362 0300 	bfi	r3, r2, #0, #1
        i->proc.pr_timestamp = 0;
 8002bba:	6462      	str	r2, [r4, #68]	; 0x44
        i->proc.long_pr_sent = 0;
 8002bbc:	7163      	strb	r3, [r4, #5]
 8002bbe:	e796      	b.n	8002aee <lv_indev_read_timer_cb+0x1ce>
            if(indev_reset_check(&i->proc)) return;
 8002bc0:	1d27      	adds	r7, r4, #4
            lv_event_send(indev_obj_act, LV_EVENT_RELEASED, indev_act);
 8002bc2:	2108      	movs	r1, #8
 8002bc4:	f7ff f980 	bl	8001ec8 <lv_event_send>
            if(indev_reset_check(&i->proc)) return;
 8002bc8:	4638      	mov	r0, r7
 8002bca:	f7ff fba7 	bl	800231c <indev_reset_check>
 8002bce:	2800      	cmp	r0, #0
 8002bd0:	f47f af2e 	bne.w	8002a30 <lv_indev_read_timer_cb+0x110>
            if(i->proc.long_pr_sent == 0) {
 8002bd4:	7963      	ldrb	r3, [r4, #5]
 8002bd6:	07da      	lsls	r2, r3, #31
 8002bd8:	d50a      	bpl.n	8002bf0 <lv_indev_read_timer_cb+0x2d0>
            lv_event_send(indev_obj_act, LV_EVENT_CLICKED, indev_act);
 8002bda:	682a      	ldr	r2, [r5, #0]
 8002bdc:	2107      	movs	r1, #7
 8002bde:	6830      	ldr	r0, [r6, #0]
 8002be0:	f7ff f972 	bl	8001ec8 <lv_event_send>
            if(indev_reset_check(&i->proc)) return;
 8002be4:	4638      	mov	r0, r7
 8002be6:	f7ff fb99 	bl	800231c <indev_reset_check>
 8002bea:	2800      	cmp	r0, #0
 8002bec:	d0e1      	beq.n	8002bb2 <lv_indev_read_timer_cb+0x292>
 8002bee:	e71f      	b.n	8002a30 <lv_indev_read_timer_cb+0x110>
                lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, indev_act);
 8002bf0:	682a      	ldr	r2, [r5, #0]
 8002bf2:	2104      	movs	r1, #4
 8002bf4:	6830      	ldr	r0, [r6, #0]
 8002bf6:	f7ff f967 	bl	8001ec8 <lv_event_send>
                if(indev_reset_check(&i->proc)) return;
 8002bfa:	4638      	mov	r0, r7
 8002bfc:	f7ff fb8e 	bl	800231c <indev_reset_check>
 8002c00:	2800      	cmp	r0, #0
 8002c02:	d0ea      	beq.n	8002bda <lv_indev_read_timer_cb+0x2ba>
 8002c04:	e714      	b.n	8002a30 <lv_indev_read_timer_cb+0x110>
 8002c06:	bf00      	nop
 8002c08:	200029a0 	.word	0x200029a0
 8002c0c:	200029a4 	.word	0x200029a4
        else if(indev_act->driver->type == LV_INDEV_TYPE_ENCODER) {
 8002c10:	2b04      	cmp	r3, #4
 8002c12:	f040 818d 	bne.w	8002f30 <lv_indev_read_timer_cb+0x610>
    if(data->state == LV_INDEV_STATE_PRESSED && i->proc.wait_until_release) return;
 8002c16:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8002c1a:	7963      	ldrb	r3, [r4, #5]
 8002c1c:	2a01      	cmp	r2, #1
 8002c1e:	f003 0108 	and.w	r1, r3, #8
 8002c22:	d142      	bne.n	8002caa <lv_indev_read_timer_cb+0x38a>
 8002c24:	2900      	cmp	r1, #0
 8002c26:	f47f af03 	bne.w	8002a30 <lv_indev_read_timer_cb+0x110>
    i->proc.types.keypad.last_key   = data->key;
 8002c2a:	9b01      	ldr	r3, [sp, #4]
    lv_group_t * g = i->group;
 8002c2c:	6d27      	ldr	r7, [r4, #80]	; 0x50
    lv_indev_state_t last_state     = i->proc.types.keypad.last_state;
 8002c2e:	f894 a008 	ldrb.w	sl, [r4, #8]
    i->proc.types.keypad.last_key   = data->key;
 8002c32:	60e3      	str	r3, [r4, #12]
    i->proc.types.keypad.last_state = data->state;
 8002c34:	7222      	strb	r2, [r4, #8]
    if(g == NULL) return;
 8002c36:	2f00      	cmp	r7, #0
 8002c38:	f43f aefa 	beq.w	8002a30 <lv_indev_read_timer_cb+0x110>
    indev_obj_act = lv_group_get_focused(g);
 8002c3c:	4638      	mov	r0, r7
 8002c3e:	f7ff faee 	bl	800221e <lv_group_get_focused>
 8002c42:	6030      	str	r0, [r6, #0]
    if(indev_obj_act == NULL) return;
 8002c44:	2800      	cmp	r0, #0
 8002c46:	f43f aef3 	beq.w	8002a30 <lv_indev_read_timer_cb+0x110>
    if(data->state != LV_INDEV_STATE_RELEASED) {
 8002c4a:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8002c4e:	b113      	cbz	r3, 8002c56 <lv_indev_read_timer_cb+0x336>
        data->enc_diff = 0;
 8002c50:	2300      	movs	r3, #0
 8002c52:	f8ad 300c 	strh.w	r3, [sp, #12]
    indev_obj_act = lv_group_get_focused(g);
 8002c56:	4638      	mov	r0, r7
 8002c58:	f7ff fae1 	bl	800221e <lv_group_get_focused>
 8002c5c:	6030      	str	r0, [r6, #0]
    if(indev_obj_act == NULL) return;
 8002c5e:	2800      	cmp	r0, #0
 8002c60:	f43f aee6 	beq.w	8002a30 <lv_indev_read_timer_cb+0x110>
    if(data->state == LV_INDEV_STATE_PRESSED && last_state == LV_INDEV_STATE_RELEASED) {
 8002c64:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	f040 80bb 	bne.w	8002de4 <lv_indev_read_timer_cb+0x4c4>
 8002c6e:	f1ba 0f00 	cmp.w	sl, #0
 8002c72:	d15d      	bne.n	8002d30 <lv_indev_read_timer_cb+0x410>
        i->proc.pr_timestamp = lv_tick_get();
 8002c74:	f013 fecc 	bl	8016a10 <lv_tick_get>
        if(data->key == LV_KEY_ENTER) {
 8002c78:	9901      	ldr	r1, [sp, #4]
        i->proc.pr_timestamp = lv_tick_get();
 8002c7a:	6460      	str	r0, [r4, #68]	; 0x44
        if(data->key == LV_KEY_ENTER) {
 8002c7c:	290a      	cmp	r1, #10
 8002c7e:	d11d      	bne.n	8002cbc <lv_indev_read_timer_cb+0x39c>
            bool editable = lv_obj_is_editable(indev_obj_act);
 8002c80:	6830      	ldr	r0, [r6, #0]
 8002c82:	f001 fc18 	bl	80044b6 <lv_obj_is_editable>
 8002c86:	4682      	mov	sl, r0
            if(lv_group_get_editing(g) == true || editable == false) {
 8002c88:	4638      	mov	r0, r7
 8002c8a:	f7ff fb3f 	bl	800230c <lv_group_get_editing>
 8002c8e:	b910      	cbnz	r0, 8002c96 <lv_indev_read_timer_cb+0x376>
 8002c90:	f1ba 0f00 	cmp.w	sl, #0
 8002c94:	d12a      	bne.n	8002cec <lv_indev_read_timer_cb+0x3cc>
                lv_event_send(indev_obj_act, LV_EVENT_PRESSED, indev_act);
 8002c96:	682a      	ldr	r2, [r5, #0]
 8002c98:	2101      	movs	r1, #1
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED_REPEAT, indev_act);
 8002c9a:	6830      	ldr	r0, [r6, #0]
 8002c9c:	f7ff f914 	bl	8001ec8 <lv_event_send>
                if(indev_reset_check(&i->proc)) return;
 8002ca0:	1d20      	adds	r0, r4, #4
 8002ca2:	f7ff fb3b 	bl	800231c <indev_reset_check>
 8002ca6:	b308      	cbz	r0, 8002cec <lv_indev_read_timer_cb+0x3cc>
 8002ca8:	e6c2      	b.n	8002a30 <lv_indev_read_timer_cb+0x110>
    if(i->proc.wait_until_release) {
 8002caa:	2900      	cmp	r1, #0
 8002cac:	d0bd      	beq.n	8002c2a <lv_indev_read_timer_cb+0x30a>
        i->proc.pr_timestamp            = 0;
 8002cae:	2100      	movs	r1, #0
        i->proc.long_pr_sent            = 0;
 8002cb0:	f023 0309 	bic.w	r3, r3, #9
        i->proc.pr_timestamp            = 0;
 8002cb4:	6461      	str	r1, [r4, #68]	; 0x44
        i->proc.long_pr_sent            = 0;
 8002cb6:	7163      	strb	r3, [r4, #5]
        i->proc.types.keypad.last_state = LV_INDEV_STATE_RELEASED; /*To skip the processing of release*/
 8002cb8:	7221      	strb	r1, [r4, #8]
 8002cba:	e7b6      	b.n	8002c2a <lv_indev_read_timer_cb+0x30a>
        else if(data->key == LV_KEY_LEFT) {
 8002cbc:	2914      	cmp	r1, #20
 8002cbe:	d105      	bne.n	8002ccc <lv_indev_read_timer_cb+0x3ac>
                data->enc_diff--;
 8002cc0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8002cc4:	3b01      	subs	r3, #1
                data->enc_diff++;
 8002cc6:	f8ad 300c 	strh.w	r3, [sp, #12]
 8002cca:	e00f      	b.n	8002cec <lv_indev_read_timer_cb+0x3cc>
        else if(data->key == LV_KEY_RIGHT) {
 8002ccc:	2913      	cmp	r1, #19
 8002cce:	d103      	bne.n	8002cd8 <lv_indev_read_timer_cb+0x3b8>
                data->enc_diff++;
 8002cd0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8002cd4:	3301      	adds	r3, #1
 8002cd6:	e7f6      	b.n	8002cc6 <lv_indev_read_timer_cb+0x3a6>
        else if(data->key == LV_KEY_ESC) {
 8002cd8:	291b      	cmp	r1, #27
            lv_group_send_data(g, LV_KEY_ESC);
 8002cda:	4638      	mov	r0, r7
        else if(data->key == LV_KEY_ESC) {
 8002cdc:	d104      	bne.n	8002ce8 <lv_indev_read_timer_cb+0x3c8>
            lv_group_send_data(g, LV_KEY_ESC);
 8002cde:	f7ff faa3 	bl	8002228 <lv_group_send_data>
            lv_event_send(indev_obj_act, LV_EVENT_CANCEL, indev_act);
 8002ce2:	682a      	ldr	r2, [r5, #0]
 8002ce4:	2120      	movs	r1, #32
 8002ce6:	e7d8      	b.n	8002c9a <lv_indev_read_timer_cb+0x37a>
            lv_group_send_data(g, data->key);
 8002ce8:	f7ff fa9e 	bl	8002228 <lv_group_send_data>
    indev_obj_act = NULL;
 8002cec:	f04f 0a00 	mov.w	sl, #0
    if(data->enc_diff != 0) {
 8002cf0:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
    indev_obj_act = NULL;
 8002cf4:	f8c6 a000 	str.w	sl, [r6]
    if(data->enc_diff != 0) {
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	f43f ae99 	beq.w	8002a30 <lv_indev_read_timer_cb+0x110>
        if(lv_group_get_editing(g)) {
 8002cfe:	4638      	mov	r0, r7
 8002d00:	f7ff fb04 	bl	800230c <lv_group_get_editing>
 8002d04:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8002d08:	4604      	mov	r4, r0
 8002d0a:	2800      	cmp	r0, #0
 8002d0c:	f000 80f7 	beq.w	8002efe <lv_indev_read_timer_cb+0x5de>
            if(data->enc_diff < 0) {
 8002d10:	4553      	cmp	r3, sl
 8002d12:	f280 80e6 	bge.w	8002ee2 <lv_indev_read_timer_cb+0x5c2>
                for(s = 0; s < -data->enc_diff; s++) lv_group_send_data(g, LV_KEY_LEFT);
 8002d16:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8002d1a:	425b      	negs	r3, r3
 8002d1c:	459a      	cmp	sl, r3
 8002d1e:	f6bf ae87 	bge.w	8002a30 <lv_indev_read_timer_cb+0x110>
 8002d22:	2114      	movs	r1, #20
 8002d24:	4638      	mov	r0, r7
 8002d26:	f10a 0a01 	add.w	sl, sl, #1
 8002d2a:	f7ff fa7d 	bl	8002228 <lv_group_send_data>
 8002d2e:	e7f2      	b.n	8002d16 <lv_indev_read_timer_cb+0x3f6>
    else if(data->state == LV_INDEV_STATE_PRESSED && last_state == LV_INDEV_STATE_PRESSED) {
 8002d30:	f1ba 0f01 	cmp.w	sl, #1
 8002d34:	d1da      	bne.n	8002cec <lv_indev_read_timer_cb+0x3cc>
        if(i->proc.long_pr_sent == 0 && lv_tick_elaps(i->proc.pr_timestamp) > i->driver->long_press_time) {
 8002d36:	7963      	ldrb	r3, [r4, #5]
 8002d38:	07db      	lsls	r3, r3, #31
 8002d3a:	d50f      	bpl.n	8002d5c <lv_indev_read_timer_cb+0x43c>
        else if(i->proc.long_pr_sent != 0 && lv_tick_elaps(i->proc.longpr_rep_timestamp) > i->driver->long_press_repeat_time) {
 8002d3c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8002d3e:	f013 fe75 	bl	8016a2c <lv_tick_elaps>
 8002d42:	6823      	ldr	r3, [r4, #0]
 8002d44:	8bdb      	ldrh	r3, [r3, #30]
 8002d46:	4298      	cmp	r0, r3
 8002d48:	d9d0      	bls.n	8002cec <lv_indev_read_timer_cb+0x3cc>
            i->proc.longpr_rep_timestamp = lv_tick_get();
 8002d4a:	f013 fe61 	bl	8016a10 <lv_tick_get>
            if(data->key == LV_KEY_ENTER) {
 8002d4e:	9901      	ldr	r1, [sp, #4]
            i->proc.longpr_rep_timestamp = lv_tick_get();
 8002d50:	64a0      	str	r0, [r4, #72]	; 0x48
            if(data->key == LV_KEY_ENTER) {
 8002d52:	290a      	cmp	r1, #10
 8002d54:	d13c      	bne.n	8002dd0 <lv_indev_read_timer_cb+0x4b0>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED_REPEAT, indev_act);
 8002d56:	682a      	ldr	r2, [r5, #0]
 8002d58:	2106      	movs	r1, #6
 8002d5a:	e79e      	b.n	8002c9a <lv_indev_read_timer_cb+0x37a>
        if(i->proc.long_pr_sent == 0 && lv_tick_elaps(i->proc.pr_timestamp) > i->driver->long_press_time) {
 8002d5c:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8002d5e:	f013 fe65 	bl	8016a2c <lv_tick_elaps>
 8002d62:	6823      	ldr	r3, [r4, #0]
 8002d64:	8b9b      	ldrh	r3, [r3, #28]
 8002d66:	4298      	cmp	r0, r3
            i->proc.long_pr_sent = 1;
 8002d68:	7963      	ldrb	r3, [r4, #5]
        if(i->proc.long_pr_sent == 0 && lv_tick_elaps(i->proc.pr_timestamp) > i->driver->long_press_time) {
 8002d6a:	d92e      	bls.n	8002dca <lv_indev_read_timer_cb+0x4aa>
            i->proc.long_pr_sent = 1;
 8002d6c:	f043 0301 	orr.w	r3, r3, #1
 8002d70:	7163      	strb	r3, [r4, #5]
            i->proc.longpr_rep_timestamp = lv_tick_get();
 8002d72:	f013 fe4d 	bl	8016a10 <lv_tick_get>
            if(data->key == LV_KEY_ENTER) {
 8002d76:	9b01      	ldr	r3, [sp, #4]
            i->proc.longpr_rep_timestamp = lv_tick_get();
 8002d78:	64a0      	str	r0, [r4, #72]	; 0x48
            if(data->key == LV_KEY_ENTER) {
 8002d7a:	2b0a      	cmp	r3, #10
 8002d7c:	d115      	bne.n	8002daa <lv_indev_read_timer_cb+0x48a>
                bool editable = lv_obj_is_editable(indev_obj_act);
 8002d7e:	6830      	ldr	r0, [r6, #0]
 8002d80:	f001 fb99 	bl	80044b6 <lv_obj_is_editable>
                if(editable) {
 8002d84:	b1b0      	cbz	r0, 8002db4 <lv_indev_read_timer_cb+0x494>
                    if(lv_group_get_obj_count(g) > 1) {
 8002d86:	4638      	mov	r0, r7
 8002d88:	f7ff fac5 	bl	8002316 <lv_group_get_obj_count>
 8002d8c:	2801      	cmp	r0, #1
 8002d8e:	d90c      	bls.n	8002daa <lv_indev_read_timer_cb+0x48a>
                        lv_group_set_editing(g, lv_group_get_editing(g) ? false : true); /*Toggle edit mode on long press*/
 8002d90:	4638      	mov	r0, r7
 8002d92:	f7ff fabb 	bl	800230c <lv_group_get_editing>
 8002d96:	f080 0001 	eor.w	r0, r0, #1
 8002d9a:	b2c1      	uxtb	r1, r0
 8002d9c:	4638      	mov	r0, r7
 8002d9e:	f7ff fa51 	bl	8002244 <lv_group_set_editing>
                        lv_obj_clear_state(indev_obj_act, LV_STATE_PRESSED);    /*Remove the pressed state manually*/
 8002da2:	2120      	movs	r1, #32
 8002da4:	6830      	ldr	r0, [r6, #0]
 8002da6:	f001 f803 	bl	8003db0 <lv_obj_clear_state>
            i->proc.long_pr_sent = 1;
 8002daa:	7963      	ldrb	r3, [r4, #5]
 8002dac:	f043 0301 	orr.w	r3, r3, #1
        i->proc.long_pr_sent = 0;
 8002db0:	7163      	strb	r3, [r4, #5]
 8002db2:	e79b      	b.n	8002cec <lv_indev_read_timer_cb+0x3cc>
                    lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED, indev_act);
 8002db4:	682a      	ldr	r2, [r5, #0]
 8002db6:	2105      	movs	r1, #5
 8002db8:	6830      	ldr	r0, [r6, #0]
 8002dba:	f7ff f885 	bl	8001ec8 <lv_event_send>
                    if(indev_reset_check(&i->proc)) return;
 8002dbe:	1d20      	adds	r0, r4, #4
 8002dc0:	f7ff faac 	bl	800231c <indev_reset_check>
 8002dc4:	2800      	cmp	r0, #0
 8002dc6:	d0f0      	beq.n	8002daa <lv_indev_read_timer_cb+0x48a>
 8002dc8:	e632      	b.n	8002a30 <lv_indev_read_timer_cb+0x110>
        else if(i->proc.long_pr_sent != 0 && lv_tick_elaps(i->proc.longpr_rep_timestamp) > i->driver->long_press_repeat_time) {
 8002dca:	07d8      	lsls	r0, r3, #31
 8002dcc:	d58e      	bpl.n	8002cec <lv_indev_read_timer_cb+0x3cc>
 8002dce:	e7b5      	b.n	8002d3c <lv_indev_read_timer_cb+0x41c>
            else if(data->key == LV_KEY_LEFT) {
 8002dd0:	2914      	cmp	r1, #20
 8002dd2:	f43f af75 	beq.w	8002cc0 <lv_indev_read_timer_cb+0x3a0>
            else if(data->key == LV_KEY_RIGHT) {
 8002dd6:	2913      	cmp	r1, #19
 8002dd8:	f43f af7a 	beq.w	8002cd0 <lv_indev_read_timer_cb+0x3b0>
                lv_group_send_data(g, data->key);
 8002ddc:	4638      	mov	r0, r7
 8002dde:	f7ff fa23 	bl	8002228 <lv_group_send_data>
 8002de2:	e75d      	b.n	8002ca0 <lv_indev_read_timer_cb+0x380>
    else if(data->state == LV_INDEV_STATE_RELEASED && last_state == LV_INDEV_STATE_PRESSED) {
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d181      	bne.n	8002cec <lv_indev_read_timer_cb+0x3cc>
 8002de8:	f1ba 0f01 	cmp.w	sl, #1
 8002dec:	f47f af7e 	bne.w	8002cec <lv_indev_read_timer_cb+0x3cc>
        if(data->key == LV_KEY_ENTER) {
 8002df0:	9b01      	ldr	r3, [sp, #4]
 8002df2:	2b0a      	cmp	r3, #10
 8002df4:	d128      	bne.n	8002e48 <lv_indev_read_timer_cb+0x528>
            bool editable = lv_obj_is_editable(indev_obj_act);
 8002df6:	f001 fb5e 	bl	80044b6 <lv_obj_is_editable>
            if(editable == false) {
 8002dfa:	bb58      	cbnz	r0, 8002e54 <lv_indev_read_timer_cb+0x534>
                if(indev_reset_check(&i->proc)) return;
 8002dfc:	f104 0a04 	add.w	sl, r4, #4
                lv_event_send(indev_obj_act, LV_EVENT_RELEASED, indev_act);
 8002e00:	682a      	ldr	r2, [r5, #0]
 8002e02:	2108      	movs	r1, #8
 8002e04:	6830      	ldr	r0, [r6, #0]
 8002e06:	f7ff f85f 	bl	8001ec8 <lv_event_send>
                if(indev_reset_check(&i->proc)) return;
 8002e0a:	4650      	mov	r0, sl
 8002e0c:	f7ff fa86 	bl	800231c <indev_reset_check>
 8002e10:	2800      	cmp	r0, #0
 8002e12:	f47f ae0d 	bne.w	8002a30 <lv_indev_read_timer_cb+0x110>
                if(i->proc.long_pr_sent == 0) lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, indev_act);
 8002e16:	7963      	ldrb	r3, [r4, #5]
 8002e18:	07d9      	lsls	r1, r3, #31
 8002e1a:	d404      	bmi.n	8002e26 <lv_indev_read_timer_cb+0x506>
 8002e1c:	682a      	ldr	r2, [r5, #0]
 8002e1e:	2104      	movs	r1, #4
 8002e20:	6830      	ldr	r0, [r6, #0]
 8002e22:	f7ff f851 	bl	8001ec8 <lv_event_send>
                if(indev_reset_check(&i->proc)) return;
 8002e26:	4650      	mov	r0, sl
 8002e28:	f7ff fa78 	bl	800231c <indev_reset_check>
 8002e2c:	2800      	cmp	r0, #0
 8002e2e:	f47f adff 	bne.w	8002a30 <lv_indev_read_timer_cb+0x110>
                lv_event_send(indev_obj_act, LV_EVENT_CLICKED, indev_act);
 8002e32:	682a      	ldr	r2, [r5, #0]
 8002e34:	2107      	movs	r1, #7
 8002e36:	6830      	ldr	r0, [r6, #0]
 8002e38:	f7ff f846 	bl	8001ec8 <lv_event_send>
                if(indev_reset_check(&i->proc)) return;
 8002e3c:	4650      	mov	r0, sl
 8002e3e:	f7ff fa6d 	bl	800231c <indev_reset_check>
 8002e42:	2800      	cmp	r0, #0
 8002e44:	f47f adf4 	bne.w	8002a30 <lv_indev_read_timer_cb+0x110>
        i->proc.pr_timestamp = 0;
 8002e48:	2200      	movs	r2, #0
        i->proc.long_pr_sent = 0;
 8002e4a:	7963      	ldrb	r3, [r4, #5]
        i->proc.pr_timestamp = 0;
 8002e4c:	6462      	str	r2, [r4, #68]	; 0x44
        i->proc.long_pr_sent = 0;
 8002e4e:	f362 0300 	bfi	r3, r2, #0, #1
 8002e52:	e7ad      	b.n	8002db0 <lv_indev_read_timer_cb+0x490>
            else if(lv_group_get_editing(g)) {
 8002e54:	4638      	mov	r0, r7
 8002e56:	f7ff fa59 	bl	800230c <lv_group_get_editing>
 8002e5a:	2800      	cmp	r0, #0
 8002e5c:	d034      	beq.n	8002ec8 <lv_indev_read_timer_cb+0x5a8>
                if(!i->proc.long_pr_sent || lv_group_get_obj_count(g) <= 1) {
 8002e5e:	7963      	ldrb	r3, [r4, #5]
 8002e60:	07da      	lsls	r2, r3, #31
 8002e62:	d427      	bmi.n	8002eb4 <lv_indev_read_timer_cb+0x594>
                    if(indev_reset_check(&i->proc)) return;
 8002e64:	f104 0a04 	add.w	sl, r4, #4
                    lv_event_send(indev_obj_act, LV_EVENT_RELEASED, indev_act);
 8002e68:	682a      	ldr	r2, [r5, #0]
 8002e6a:	2108      	movs	r1, #8
 8002e6c:	6830      	ldr	r0, [r6, #0]
 8002e6e:	f7ff f82b 	bl	8001ec8 <lv_event_send>
                    if(indev_reset_check(&i->proc)) return;
 8002e72:	4650      	mov	r0, sl
 8002e74:	f7ff fa52 	bl	800231c <indev_reset_check>
 8002e78:	2800      	cmp	r0, #0
 8002e7a:	f47f add9 	bne.w	8002a30 <lv_indev_read_timer_cb+0x110>
                    lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, indev_act);
 8002e7e:	682a      	ldr	r2, [r5, #0]
 8002e80:	2104      	movs	r1, #4
 8002e82:	6830      	ldr	r0, [r6, #0]
 8002e84:	f7ff f820 	bl	8001ec8 <lv_event_send>
                    if(indev_reset_check(&i->proc)) return;
 8002e88:	4650      	mov	r0, sl
 8002e8a:	f7ff fa47 	bl	800231c <indev_reset_check>
 8002e8e:	2800      	cmp	r0, #0
 8002e90:	f47f adce 	bne.w	8002a30 <lv_indev_read_timer_cb+0x110>
                    lv_event_send(indev_obj_act, LV_EVENT_CLICKED, indev_act);
 8002e94:	682a      	ldr	r2, [r5, #0]
 8002e96:	2107      	movs	r1, #7
 8002e98:	6830      	ldr	r0, [r6, #0]
 8002e9a:	f7ff f815 	bl	8001ec8 <lv_event_send>
                    if(indev_reset_check(&i->proc)) return;
 8002e9e:	4650      	mov	r0, sl
 8002ea0:	f7ff fa3c 	bl	800231c <indev_reset_check>
 8002ea4:	2800      	cmp	r0, #0
 8002ea6:	f47f adc3 	bne.w	8002a30 <lv_indev_read_timer_cb+0x110>
                    lv_group_send_data(g, LV_KEY_ENTER);
 8002eaa:	210a      	movs	r1, #10
 8002eac:	4638      	mov	r0, r7
 8002eae:	f7ff f9bb 	bl	8002228 <lv_group_send_data>
 8002eb2:	e7c9      	b.n	8002e48 <lv_indev_read_timer_cb+0x528>
                if(!i->proc.long_pr_sent || lv_group_get_obj_count(g) <= 1) {
 8002eb4:	4638      	mov	r0, r7
 8002eb6:	f7ff fa2e 	bl	8002316 <lv_group_get_obj_count>
 8002eba:	2801      	cmp	r0, #1
 8002ebc:	d9d2      	bls.n	8002e64 <lv_indev_read_timer_cb+0x544>
                    lv_obj_clear_state(indev_obj_act, LV_STATE_PRESSED);    /*Remove the pressed state manually*/
 8002ebe:	2120      	movs	r1, #32
 8002ec0:	6830      	ldr	r0, [r6, #0]
 8002ec2:	f000 ff75 	bl	8003db0 <lv_obj_clear_state>
 8002ec6:	e7bf      	b.n	8002e48 <lv_indev_read_timer_cb+0x528>
            else if(editable && !lv_group_get_editing(g) && !i->proc.long_pr_sent) {
 8002ec8:	4638      	mov	r0, r7
 8002eca:	f7ff fa1f 	bl	800230c <lv_group_get_editing>
 8002ece:	2800      	cmp	r0, #0
 8002ed0:	d1ba      	bne.n	8002e48 <lv_indev_read_timer_cb+0x528>
 8002ed2:	7963      	ldrb	r3, [r4, #5]
 8002ed4:	07db      	lsls	r3, r3, #31
 8002ed6:	d4b7      	bmi.n	8002e48 <lv_indev_read_timer_cb+0x528>
                lv_group_set_editing(g, true); /*Set edit mode*/
 8002ed8:	4651      	mov	r1, sl
 8002eda:	4638      	mov	r0, r7
 8002edc:	f7ff f9b2 	bl	8002244 <lv_group_set_editing>
 8002ee0:	e7b2      	b.n	8002e48 <lv_indev_read_timer_cb+0x528>
            else if(data->enc_diff > 0) {
 8002ee2:	f43f ada5 	beq.w	8002a30 <lv_indev_read_timer_cb+0x110>
                for(s = 0; s < data->enc_diff; s++) lv_group_send_data(g, LV_KEY_RIGHT);
 8002ee6:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8002eea:	459a      	cmp	sl, r3
 8002eec:	f6bf ada0 	bge.w	8002a30 <lv_indev_read_timer_cb+0x110>
 8002ef0:	2113      	movs	r1, #19
 8002ef2:	4638      	mov	r0, r7
 8002ef4:	f10a 0a01 	add.w	sl, sl, #1
 8002ef8:	f7ff f996 	bl	8002228 <lv_group_send_data>
 8002efc:	e7f3      	b.n	8002ee6 <lv_indev_read_timer_cb+0x5c6>
            if(data->enc_diff < 0) {
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	da0a      	bge.n	8002f18 <lv_indev_read_timer_cb+0x5f8>
                for(s = 0; s < -data->enc_diff; s++) lv_group_focus_prev(g);
 8002f02:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8002f06:	425b      	negs	r3, r3
 8002f08:	429c      	cmp	r4, r3
 8002f0a:	f6bf ad91 	bge.w	8002a30 <lv_indev_read_timer_cb+0x110>
 8002f0e:	4638      	mov	r0, r7
 8002f10:	3401      	adds	r4, #1
 8002f12:	f7ff f8e7 	bl	80020e4 <lv_group_focus_prev>
 8002f16:	e7f4      	b.n	8002f02 <lv_indev_read_timer_cb+0x5e2>
            else if(data->enc_diff > 0) {
 8002f18:	f43f ad8a 	beq.w	8002a30 <lv_indev_read_timer_cb+0x110>
                for(s = 0; s < data->enc_diff; s++) lv_group_focus_next(g);
 8002f1c:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8002f20:	429c      	cmp	r4, r3
 8002f22:	f6bf ad85 	bge.w	8002a30 <lv_indev_read_timer_cb+0x110>
 8002f26:	4638      	mov	r0, r7
 8002f28:	3401      	adds	r4, #1
 8002f2a:	f7ff f8cf 	bl	80020cc <lv_group_focus_next>
 8002f2e:	e7f5      	b.n	8002f1c <lv_indev_read_timer_cb+0x5fc>
        else if(indev_act->driver->type == LV_INDEV_TYPE_BUTTON) {
 8002f30:	2b03      	cmp	r3, #3
 8002f32:	f47f ad7d 	bne.w	8002a30 <lv_indev_read_timer_cb+0x110>
    if(i->btn_points == NULL) {
 8002f36:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	f43f ad79 	beq.w	8002a30 <lv_indev_read_timer_cb+0x110>
    lv_coord_t x = i->btn_points[data->btn_id].x;
 8002f3e:	9a02      	ldr	r2, [sp, #8]
 8002f40:	1d27      	adds	r7, r4, #4
 8002f42:	eb03 0182 	add.w	r1, r3, r2, lsl #2
 8002f46:	f933 b022 	ldrsh.w	fp, [r3, r2, lsl #2]
    if(data->state == LV_INDEV_STATE_PRESSED) {
 8002f4a:	f89d 300e 	ldrb.w	r3, [sp, #14]
    lv_coord_t y = i->btn_points[data->btn_id].y;
 8002f4e:	f9b1 a002 	ldrsh.w	sl, [r1, #2]
    if(data->state == LV_INDEV_STATE_PRESSED) {
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d10a      	bne.n	8002f6c <lv_indev_read_timer_cb+0x64c>
        if(i->proc.types.pointer.last_point.x != x ||
 8002f56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f5a:	455b      	cmp	r3, fp
 8002f5c:	d103      	bne.n	8002f66 <lv_indev_read_timer_cb+0x646>
 8002f5e:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8002f62:	4553      	cmp	r3, sl
 8002f64:	d002      	beq.n	8002f6c <lv_indev_read_timer_cb+0x64c>
            indev_proc_release(&i->proc);
 8002f66:	4638      	mov	r0, r7
 8002f68:	f7ff f9e4 	bl	8002334 <indev_proc_release>
    if(indev_reset_check(&i->proc)) return;
 8002f6c:	4638      	mov	r0, r7
 8002f6e:	f7ff f9d5 	bl	800231c <indev_reset_check>
 8002f72:	2800      	cmp	r0, #0
 8002f74:	f47f ad5c 	bne.w	8002a30 <lv_indev_read_timer_cb+0x110>
    i->proc.types.pointer.act_point.x = x;
 8002f78:	f8a4 b008 	strh.w	fp, [r4, #8]
    if(data->state == LV_INDEV_STATE_PRESSED) indev_proc_press(&i->proc);
 8002f7c:	4638      	mov	r0, r7
    i->proc.types.pointer.act_point.y = y;
 8002f7e:	f8a4 a00a 	strh.w	sl, [r4, #10]
    if(data->state == LV_INDEV_STATE_PRESSED) indev_proc_press(&i->proc);
 8002f82:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d108      	bne.n	8002f9c <lv_indev_read_timer_cb+0x67c>
 8002f8a:	f7ff fb13 	bl	80025b4 <indev_proc_press>
    if(indev_reset_check(&i->proc)) return;
 8002f8e:	4638      	mov	r0, r7
 8002f90:	f7ff f9c4 	bl	800231c <indev_reset_check>
 8002f94:	2800      	cmp	r0, #0
 8002f96:	f43f ad3a 	beq.w	8002a0e <lv_indev_read_timer_cb+0xee>
 8002f9a:	e549      	b.n	8002a30 <lv_indev_read_timer_cb+0x110>
    else indev_proc_release(&i->proc);
 8002f9c:	f7ff f9ca 	bl	8002334 <indev_proc_release>
 8002fa0:	e7f5      	b.n	8002f8e <lv_indev_read_timer_cb+0x66e>
    if(disp->driver->rotated == LV_DISP_ROT_90 || disp->driver->rotated == LV_DISP_ROT_270) {
 8002fa2:	f001 0118 	and.w	r1, r1, #24
 8002fa6:	2908      	cmp	r1, #8
 8002fa8:	f47f ad17 	bne.w	80029da <lv_indev_read_timer_cb+0xba>
 8002fac:	e50a      	b.n	80029c4 <lv_indev_read_timer_cb+0xa4>
 8002fae:	bf00      	nop

08002fb0 <scroll_throw_predict_x.isra.0>:
    }
}



static lv_coord_t scroll_throw_predict_y(_lv_indev_proc_t * proc)
 8002fb0:	b510      	push	{r4, lr}
 8002fb2:	4604      	mov	r4, r0
{
    lv_coord_t y =  proc->types.pointer.scroll_throw_vect.y;
    lv_coord_t move = 0;

    lv_indev_t * indev_act = lv_indev_get_act();
 8002fb4:	f7ff fa1e 	bl	80023f4 <lv_indev_get_act>
    lv_coord_t scroll_throw =  indev_act->driver->scroll_throw;
 8002fb8:	6803      	ldr	r3, [r0, #0]

    while(y) {
        move += y;
        y = y * (100 - scroll_throw) / 100;
 8002fba:	2264      	movs	r2, #100	; 0x64
    lv_coord_t move = 0;
 8002fbc:	2000      	movs	r0, #0
    lv_coord_t scroll_throw =  indev_act->driver->scroll_throw;
 8002fbe:	7e5b      	ldrb	r3, [r3, #25]
        y = y * (100 - scroll_throw) / 100;
 8002fc0:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
    while(y) {
 8002fc4:	b904      	cbnz	r4, 8002fc8 <scroll_throw_predict_x.isra.0+0x18>
    }
    return move;
}
 8002fc6:	bd10      	pop	{r4, pc}
        move += y;
 8002fc8:	4420      	add	r0, r4
        y = y * (100 - scroll_throw) / 100;
 8002fca:	435c      	muls	r4, r3
 8002fcc:	fb94 f4f2 	sdiv	r4, r4, r2
        move += y;
 8002fd0:	b200      	sxth	r0, r0
        y = y * (100 - scroll_throw) / 100;
 8002fd2:	b224      	sxth	r4, r4
 8002fd4:	e7f6      	b.n	8002fc4 <scroll_throw_predict_x.isra.0+0x14>

08002fd6 <elastic_diff>:
    }
    return move;
}

static lv_coord_t elastic_diff(lv_obj_t * scroll_obj, lv_coord_t diff, lv_coord_t scroll_start, lv_coord_t scroll_end, lv_dir_t dir)
{
 8002fd6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fda:	460c      	mov	r4, r1
    if(lv_obj_has_flag(scroll_obj, LV_OBJ_FLAG_SCROLL_ELASTIC)) {
 8002fdc:	2120      	movs	r1, #32
{
 8002fde:	4683      	mov	fp, r0
 8002fe0:	4690      	mov	r8, r2
 8002fe2:	461f      	mov	r7, r3
 8002fe4:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
    if(lv_obj_has_flag(scroll_obj, LV_OBJ_FLAG_SCROLL_ELASTIC)) {
 8002fe8:	f000 feeb 	bl	8003dc2 <lv_obj_has_flag>
 8002fec:	2800      	cmp	r0, #0
 8002fee:	f000 80ad 	beq.w	800314c <elastic_diff+0x176>
        /*If there is snapping in the current direction don't use the elastic factor because
         *it's natural that the first and last items are scrolled (snapped) in.*/
        lv_scroll_snap_t snap;
        snap = dir == LV_DIR_HOR ? lv_obj_get_scroll_snap_x(scroll_obj) : lv_obj_get_scroll_snap_y(scroll_obj);
 8002ff2:	2d03      	cmp	r5, #3
 8002ff4:	4658      	mov	r0, fp
 8002ff6:	d12a      	bne.n	800304e <elastic_diff+0x78>
 8002ff8:	f002 ff5c 	bl	8005eb4 <lv_obj_get_scroll_snap_x>
 8002ffc:	4681      	mov	r9, r0

        lv_obj_t * act_obj = lv_indev_get_obj_act();
 8002ffe:	f7ff fa9f 	bl	8002540 <lv_indev_get_obj_act>
        lv_coord_t snap_point = 0;
        lv_coord_t act_obj_point = 0;

        if(dir == LV_DIR_HOR) {
 8003002:	2d03      	cmp	r5, #3
        lv_obj_t * act_obj = lv_indev_get_obj_act();
 8003004:	4682      	mov	sl, r0
        if(dir == LV_DIR_HOR) {
 8003006:	d14b      	bne.n	80030a0 <elastic_diff+0xca>
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_pad_left(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8003008:	f241 0212 	movw	r2, #4114	; 0x1012
 800300c:	2100      	movs	r1, #0
 800300e:	4658      	mov	r0, fp
 8003010:	f004 f9aa 	bl	8007368 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_pad_right(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8003014:	f241 0213 	movw	r2, #4115	; 0x1013
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8003018:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 800301a:	2100      	movs	r1, #0
 800301c:	4658      	mov	r0, fp
 800301e:	f004 f9a3 	bl	8007368 <lv_obj_get_style_prop>
            lv_coord_t pad_left = lv_obj_get_style_pad_left(scroll_obj, LV_PART_MAIN);
            lv_coord_t pad_right = lv_obj_get_style_pad_right(scroll_obj, LV_PART_MAIN);

            switch(snap) {
 8003022:	f1b9 0f02 	cmp.w	r9, #2
 8003026:	d034      	beq.n	8003092 <elastic_diff+0xbc>
 8003028:	f1b9 0f03 	cmp.w	r9, #3
 800302c:	d012      	beq.n	8003054 <elastic_diff+0x7e>
 800302e:	f1b9 0f01 	cmp.w	r9, #1
 8003032:	d16f      	bne.n	8003114 <elastic_diff+0x13e>
            case LV_SCROLL_SNAP_CENTER:
                snap_point = pad_left + (lv_area_get_width(&scroll_obj->coords) - pad_left - pad_right) / 2 + scroll_obj->coords.x1;
                act_obj_point = lv_area_get_width(&act_obj->coords) / 2 + act_obj->coords.x1;
                break;
            case LV_SCROLL_SNAP_START:
                snap_point = scroll_obj->coords.x1 + pad_left;
 8003034:	f8bb 5014 	ldrh.w	r5, [fp, #20]
 8003038:	4435      	add	r5, r6
                act_obj_point = act_obj->coords.x1;
 800303a:	f9ba 6014 	ldrsh.w	r6, [sl, #20]
                snap_point = scroll_obj->coords.x1 + pad_left;
 800303e:	b22d      	sxth	r5, r5
                act_obj_point = act_obj->coords.y2;
                break;
            }
        }

        if(scroll_end < 0) {
 8003040:	2f00      	cmp	r7, #0
 8003042:	da79      	bge.n	8003138 <elastic_diff+0x162>
            if(snap != LV_SCROLL_SNAP_NONE && act_obj_point > snap_point) return diff;
 8003044:	42b5      	cmp	r5, r6
 8003046:	da67      	bge.n	8003118 <elastic_diff+0x142>
        if(scroll_end + diff < 0) diff = - scroll_end;
        if(scroll_start - diff < 0) diff = scroll_start;
    }

    return diff;
}
 8003048:	4620      	mov	r0, r4
 800304a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        snap = dir == LV_DIR_HOR ? lv_obj_get_scroll_snap_x(scroll_obj) : lv_obj_get_scroll_snap_y(scroll_obj);
 800304e:	f002 ff37 	bl	8005ec0 <lv_obj_get_scroll_snap_y>
 8003052:	e7d3      	b.n	8002ffc <elastic_diff+0x26>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8003054:	f8bb 3018 	ldrh.w	r3, [fp, #24]
                snap_point = pad_left + (lv_area_get_width(&scroll_obj->coords) - pad_left - pad_right) / 2 + scroll_obj->coords.x1;
 8003058:	b235      	sxth	r5, r6
 800305a:	f8bb 2014 	ldrh.w	r2, [fp, #20]
 800305e:	3301      	adds	r3, #1
 8003060:	4416      	add	r6, r2
 8003062:	1a9b      	subs	r3, r3, r2
 8003064:	b21b      	sxth	r3, r3
 8003066:	1b5b      	subs	r3, r3, r5
 8003068:	b205      	sxth	r5, r0
 800306a:	1b5d      	subs	r5, r3, r5
 800306c:	f8ba 3018 	ldrh.w	r3, [sl, #24]
 8003070:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003074:	eb06 0565 	add.w	r5, r6, r5, asr #1
 8003078:	f8ba 6014 	ldrh.w	r6, [sl, #20]
 800307c:	b22d      	sxth	r5, r5
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800307e:	3301      	adds	r3, #1
 8003080:	1b9b      	subs	r3, r3, r6
                act_obj_point = lv_area_get_height(&act_obj->coords) / 2 + act_obj->coords.y1;
 8003082:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 8003086:	fa02 f383 	sxtah	r3, r2, r3
 800308a:	eb06 0663 	add.w	r6, r6, r3, asr #1
 800308e:	b236      	sxth	r6, r6
                break;
 8003090:	e7d6      	b.n	8003040 <elastic_diff+0x6a>
                snap_point = scroll_obj->coords.x2 - pad_right;
 8003092:	f8bb 5018 	ldrh.w	r5, [fp, #24]
                act_obj_point = act_obj->coords.x2;
 8003096:	f9ba 6018 	ldrsh.w	r6, [sl, #24]
                snap_point = scroll_obj->coords.x2 - pad_right;
 800309a:	1a2d      	subs	r5, r5, r0
 800309c:	b22d      	sxth	r5, r5
                break;
 800309e:	e7cf      	b.n	8003040 <elastic_diff+0x6a>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80030a0:	f241 0210 	movw	r2, #4112	; 0x1010
 80030a4:	2100      	movs	r1, #0
 80030a6:	4658      	mov	r0, fp
 80030a8:	f004 f95e 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 80030ac:	f241 0211 	movw	r2, #4113	; 0x1011
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80030b0:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 80030b2:	2100      	movs	r1, #0
 80030b4:	4658      	mov	r0, fp
 80030b6:	f004 f957 	bl	8007368 <lv_obj_get_style_prop>
            switch(snap) {
 80030ba:	f1b9 0f02 	cmp.w	r9, #2
 80030be:	d022      	beq.n	8003106 <elastic_diff+0x130>
 80030c0:	f1b9 0f03 	cmp.w	r9, #3
 80030c4:	d009      	beq.n	80030da <elastic_diff+0x104>
 80030c6:	f1b9 0f01 	cmp.w	r9, #1
 80030ca:	d123      	bne.n	8003114 <elastic_diff+0x13e>
                snap_point = scroll_obj->coords.y1 + pad_top;
 80030cc:	f8bb 5016 	ldrh.w	r5, [fp, #22]
 80030d0:	4435      	add	r5, r6
                act_obj_point = act_obj->coords.y1;
 80030d2:	f9ba 6016 	ldrsh.w	r6, [sl, #22]
                snap_point = scroll_obj->coords.y1 + pad_top;
 80030d6:	b22d      	sxth	r5, r5
                break;
 80030d8:	e7b2      	b.n	8003040 <elastic_diff+0x6a>
 80030da:	f8bb 301a 	ldrh.w	r3, [fp, #26]
                snap_point = pad_top + (lv_area_get_height(&scroll_obj->coords) - pad_top - pad_bottom) / 2 + scroll_obj->coords.y1;
 80030de:	b235      	sxth	r5, r6
 80030e0:	f8bb 2016 	ldrh.w	r2, [fp, #22]
 80030e4:	3301      	adds	r3, #1
 80030e6:	4416      	add	r6, r2
 80030e8:	1a9b      	subs	r3, r3, r2
 80030ea:	b21b      	sxth	r3, r3
 80030ec:	1b5b      	subs	r3, r3, r5
 80030ee:	b205      	sxth	r5, r0
 80030f0:	1b5d      	subs	r5, r3, r5
 80030f2:	f8ba 301a 	ldrh.w	r3, [sl, #26]
 80030f6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80030fa:	eb06 0565 	add.w	r5, r6, r5, asr #1
 80030fe:	f8ba 6016 	ldrh.w	r6, [sl, #22]
 8003102:	b22d      	sxth	r5, r5
 8003104:	e7bb      	b.n	800307e <elastic_diff+0xa8>
                snap_point = scroll_obj->coords.y2 - pad_bottom;
 8003106:	f8bb 501a 	ldrh.w	r5, [fp, #26]
                act_obj_point = act_obj->coords.y2;
 800310a:	f9ba 601a 	ldrsh.w	r6, [sl, #26]
                snap_point = scroll_obj->coords.y2 - pad_bottom;
 800310e:	1a2d      	subs	r5, r5, r0
 8003110:	b22d      	sxth	r5, r5
                break;
 8003112:	e795      	b.n	8003040 <elastic_diff+0x6a>
        if(scroll_end < 0) {
 8003114:	2f00      	cmp	r7, #0
 8003116:	da0d      	bge.n	8003134 <elastic_diff+0x15e>
            if(diff < 0) diff -= ELASTIC_SLOWNESS_FACTOR / 2;
 8003118:	2c00      	cmp	r4, #0
 800311a:	bfbc      	itt	lt
 800311c:	3c02      	sublt	r4, #2
 800311e:	b224      	sxthlt	r4, r4
            if(diff > 0) diff += ELASTIC_SLOWNESS_FACTOR / 2;
 8003120:	2c00      	cmp	r4, #0
 8003122:	bfc4      	itt	gt
 8003124:	3402      	addgt	r4, #2
 8003126:	b224      	sxthgt	r4, r4
            return diff / ELASTIC_SLOWNESS_FACTOR;
 8003128:	2c00      	cmp	r4, #0
 800312a:	bfb8      	it	lt
 800312c:	3403      	addlt	r4, #3
 800312e:	f344 048f 	sbfx	r4, r4, #2, #16
 8003132:	e789      	b.n	8003048 <elastic_diff+0x72>
 8003134:	2600      	movs	r6, #0
 8003136:	4635      	mov	r5, r6
        else if(scroll_start < 0) {
 8003138:	f1b8 0f00 	cmp.w	r8, #0
 800313c:	da84      	bge.n	8003048 <elastic_diff+0x72>
            if(snap != LV_SCROLL_SNAP_NONE && act_obj_point < snap_point) return diff;
 800313e:	f1b9 0f00 	cmp.w	r9, #0
 8003142:	d0e9      	beq.n	8003118 <elastic_diff+0x142>
 8003144:	42b5      	cmp	r5, r6
 8003146:	f73f af7f 	bgt.w	8003048 <elastic_diff+0x72>
 800314a:	e7e5      	b.n	8003118 <elastic_diff+0x142>
        if(scroll_end + diff < 0) diff = - scroll_end;
 800314c:	42e7      	cmn	r7, r4
 800314e:	bf44      	itt	mi
 8003150:	427c      	negmi	r4, r7
 8003152:	b224      	sxthmi	r4, r4
        if(scroll_start - diff < 0) diff = scroll_start;
 8003154:	eba8 0304 	sub.w	r3, r8, r4
 8003158:	ea34 0423 	bics.w	r4, r4, r3, asr #32
 800315c:	bf28      	it	cs
 800315e:	4644      	movcs	r4, r8
 8003160:	e772      	b.n	8003048 <elastic_diff+0x72>

08003162 <find_snap_point_x>:
{
 8003162:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003166:	b085      	sub	sp, #20
 8003168:	4604      	mov	r4, r0
 800316a:	469b      	mov	fp, r3
 800316c:	e9cd 1202 	strd	r1, r2, [sp, #8]
    lv_scroll_snap_t align = lv_obj_get_scroll_snap_x(obj);
 8003170:	f002 fea0 	bl	8005eb4 <lv_obj_get_scroll_snap_x>
    if(align == LV_SCROLL_SNAP_NONE) return 0;
 8003174:	4605      	mov	r5, r0
 8003176:	b918      	cbnz	r0, 8003180 <find_snap_point_x+0x1e>
 8003178:	2000      	movs	r0, #0
}
 800317a:	b005      	add	sp, #20
 800317c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8003180:	f241 0212 	movw	r2, #4114	; 0x1012
 8003184:	2100      	movs	r1, #0
 8003186:	4620      	mov	r0, r4
    for(i = 0; i < lv_obj_get_child_cnt(obj); i++) {
 8003188:	2700      	movs	r7, #0
 800318a:	f004 f8ed 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 800318e:	f241 0213 	movw	r2, #4115	; 0x1013
    return (lv_coord_t)v.num;
 8003192:	b203      	sxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8003194:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8003196:	2100      	movs	r1, #0
 8003198:	4620      	mov	r0, r4
    return (lv_coord_t)v.num;
 800319a:	9301      	str	r3, [sp, #4]
    lv_coord_t dist = LV_COORD_MAX;
 800319c:	f44f 49c0 	mov.w	r9, #24576	; 0x6000
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80031a0:	f004 f8e2 	bl	8007368 <lv_obj_get_style_prop>
 80031a4:	4680      	mov	r8, r0
    return (lv_coord_t)v.num;
 80031a6:	b203      	sxth	r3, r0
 80031a8:	9300      	str	r3, [sp, #0]
    for(i = 0; i < lv_obj_get_child_cnt(obj); i++) {
 80031aa:	4620      	mov	r0, r4
 80031ac:	f004 fc38 	bl	8007a20 <lv_obj_get_child_cnt>
 80031b0:	42b8      	cmp	r0, r7
 80031b2:	d806      	bhi.n	80031c2 <find_snap_point_x+0x60>
    return dist == LV_COORD_MAX ? 0: -dist;
 80031b4:	f5b9 4fc0 	cmp.w	r9, #24576	; 0x6000
 80031b8:	d0de      	beq.n	8003178 <find_snap_point_x+0x16>
 80031ba:	f1c9 0000 	rsb	r0, r9, #0
 80031be:	b200      	sxth	r0, r0
 80031c0:	e7db      	b.n	800317a <find_snap_point_x+0x18>
        lv_obj_t * child = lv_obj_get_child(obj, i);
 80031c2:	4639      	mov	r1, r7
 80031c4:	4620      	mov	r0, r4
 80031c6:	f004 fc1c 	bl	8007a02 <lv_obj_get_child>
        if(lv_obj_has_flag_any(child, LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 80031ca:	f04f 1101 	mov.w	r1, #65537	; 0x10001
        lv_obj_t * child = lv_obj_get_child(obj, i);
 80031ce:	4682      	mov	sl, r0
        if(lv_obj_has_flag_any(child, LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 80031d0:	f000 fdfe 	bl	8003dd0 <lv_obj_has_flag_any>
 80031d4:	bb40      	cbnz	r0, 8003228 <find_snap_point_x+0xc6>
        if(lv_obj_has_flag(child, LV_OBJ_FLAG_SNAPABLE)) {
 80031d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80031da:	4650      	mov	r0, sl
 80031dc:	f000 fdf1 	bl	8003dc2 <lv_obj_has_flag>
 80031e0:	b310      	cbz	r0, 8003228 <find_snap_point_x+0xc6>
            switch(align) {
 80031e2:	2d02      	cmp	r5, #2
 80031e4:	d022      	beq.n	800322c <find_snap_point_x+0xca>
 80031e6:	2d03      	cmp	r5, #3
 80031e8:	d026      	beq.n	8003238 <find_snap_point_x+0xd6>
 80031ea:	2d01      	cmp	r5, #1
 80031ec:	d11c      	bne.n	8003228 <find_snap_point_x+0xc6>
                x_parent = obj->coords.x1 + pad_left;
 80031ee:	8aa3      	ldrh	r3, [r4, #20]
                x_child = child->coords.x1;
 80031f0:	f9ba 0014 	ldrsh.w	r0, [sl, #20]
                x_parent = obj->coords.x1 + pad_left;
 80031f4:	4433      	add	r3, r6
            x_child += ofs;
 80031f6:	4458      	add	r0, fp
            if(x_child >= min && x_child <= max) {
 80031f8:	9a02      	ldr	r2, [sp, #8]
                x_parent = obj->coords.x1 + pad_left + (lv_area_get_width(&obj->coords) - pad_left - pad_right) / 2;
 80031fa:	b21b      	sxth	r3, r3
            x_child += ofs;
 80031fc:	b281      	uxth	r1, r0
 80031fe:	b200      	sxth	r0, r0
            if(x_child >= min && x_child <= max) {
 8003200:	4290      	cmp	r0, r2
 8003202:	db11      	blt.n	8003228 <find_snap_point_x+0xc6>
 8003204:	9a03      	ldr	r2, [sp, #12]
 8003206:	4290      	cmp	r0, r2
 8003208:	dc0e      	bgt.n	8003228 <find_snap_point_x+0xc6>
                lv_coord_t x = x_child -  x_parent;
 800320a:	1acb      	subs	r3, r1, r3
                if(LV_ABS(x) < LV_ABS(dist)) dist = x;
 800320c:	ea89 71e9 	eor.w	r1, r9, r9, asr #31
                lv_coord_t x = x_child -  x_parent;
 8003210:	b21b      	sxth	r3, r3
                if(LV_ABS(x) < LV_ABS(dist)) dist = x;
 8003212:	eba1 71e9 	sub.w	r1, r1, r9, asr #31
 8003216:	ea83 70e3 	eor.w	r0, r3, r3, asr #31
 800321a:	b289      	uxth	r1, r1
 800321c:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
 8003220:	b280      	uxth	r0, r0
 8003222:	4288      	cmp	r0, r1
 8003224:	bf38      	it	cc
 8003226:	4699      	movcc	r9, r3
    for(i = 0; i < lv_obj_get_child_cnt(obj); i++) {
 8003228:	3701      	adds	r7, #1
 800322a:	e7be      	b.n	80031aa <find_snap_point_x+0x48>
                x_parent = obj->coords.x2 - pad_right;
 800322c:	8b23      	ldrh	r3, [r4, #24]
                x_child = child->coords.x2;
 800322e:	f9ba 0018 	ldrsh.w	r0, [sl, #24]
                x_parent = obj->coords.x2 - pad_right;
 8003232:	eba3 0308 	sub.w	r3, r3, r8
 8003236:	e7de      	b.n	80031f6 <find_snap_point_x+0x94>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8003238:	f8ba 3018 	ldrh.w	r3, [sl, #24]
                x_child = child->coords.x1 + lv_area_get_width(&child->coords) / 2;
 800323c:	f8ba 0014 	ldrh.w	r0, [sl, #20]
 8003240:	3301      	adds	r3, #1
                x_parent = obj->coords.x1 + pad_left + (lv_area_get_width(&obj->coords) - pad_left - pad_right) / 2;
 8003242:	9a01      	ldr	r2, [sp, #4]
 8003244:	1a1b      	subs	r3, r3, r0
                x_child = child->coords.x1 + lv_area_get_width(&child->coords) / 2;
 8003246:	f3c3 31c0 	ubfx	r1, r3, #15, #1
 800324a:	fa01 f383 	sxtah	r3, r1, r3
                x_parent = obj->coords.x1 + pad_left + (lv_area_get_width(&obj->coords) - pad_left - pad_right) / 2;
 800324e:	8aa1      	ldrh	r1, [r4, #20]
                x_child = child->coords.x1 + lv_area_get_width(&child->coords) / 2;
 8003250:	eb00 0363 	add.w	r3, r0, r3, asr #1
 8003254:	b218      	sxth	r0, r3
 8003256:	8b23      	ldrh	r3, [r4, #24]
 8003258:	3301      	adds	r3, #1
 800325a:	1a5b      	subs	r3, r3, r1
                x_parent = obj->coords.x1 + pad_left + (lv_area_get_width(&obj->coords) - pad_left - pad_right) / 2;
 800325c:	b21b      	sxth	r3, r3
 800325e:	1a9b      	subs	r3, r3, r2
 8003260:	9a00      	ldr	r2, [sp, #0]
 8003262:	1a9b      	subs	r3, r3, r2
 8003264:	eb03 7cd3 	add.w	ip, r3, r3, lsr #31
 8003268:	198b      	adds	r3, r1, r6
 800326a:	eb03 036c 	add.w	r3, r3, ip, asr #1
 800326e:	e7c2      	b.n	80031f6 <find_snap_point_x+0x94>

08003270 <find_snap_point_y>:
{
 8003270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003274:	b085      	sub	sp, #20
 8003276:	4604      	mov	r4, r0
 8003278:	469b      	mov	fp, r3
 800327a:	e9cd 1202 	strd	r1, r2, [sp, #8]
    lv_scroll_snap_t align = lv_obj_get_scroll_snap_y(obj);
 800327e:	f002 fe1f 	bl	8005ec0 <lv_obj_get_scroll_snap_y>
    if(align == LV_SCROLL_SNAP_NONE) return 0;
 8003282:	4605      	mov	r5, r0
 8003284:	b918      	cbnz	r0, 800328e <find_snap_point_y+0x1e>
 8003286:	2000      	movs	r0, #0
}
 8003288:	b005      	add	sp, #20
 800328a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 800328e:	f241 0210 	movw	r2, #4112	; 0x1010
 8003292:	2100      	movs	r1, #0
 8003294:	4620      	mov	r0, r4
    for(i = 0; i < lv_obj_get_child_cnt(obj); i++) {
 8003296:	2700      	movs	r7, #0
 8003298:	f004 f866 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 800329c:	f241 0211 	movw	r2, #4113	; 0x1011
    return (lv_coord_t)v.num;
 80032a0:	b203      	sxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80032a2:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 80032a4:	2100      	movs	r1, #0
 80032a6:	4620      	mov	r0, r4
    return (lv_coord_t)v.num;
 80032a8:	9301      	str	r3, [sp, #4]
    lv_coord_t dist = LV_COORD_MAX;
 80032aa:	f44f 49c0 	mov.w	r9, #24576	; 0x6000
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 80032ae:	f004 f85b 	bl	8007368 <lv_obj_get_style_prop>
 80032b2:	4680      	mov	r8, r0
    return (lv_coord_t)v.num;
 80032b4:	b203      	sxth	r3, r0
 80032b6:	9300      	str	r3, [sp, #0]
    for(i = 0; i < lv_obj_get_child_cnt(obj); i++) {
 80032b8:	4620      	mov	r0, r4
 80032ba:	f004 fbb1 	bl	8007a20 <lv_obj_get_child_cnt>
 80032be:	42b8      	cmp	r0, r7
 80032c0:	d806      	bhi.n	80032d0 <find_snap_point_y+0x60>
    return dist == LV_COORD_MAX ? 0 : -dist;
 80032c2:	f5b9 4fc0 	cmp.w	r9, #24576	; 0x6000
 80032c6:	d0de      	beq.n	8003286 <find_snap_point_y+0x16>
 80032c8:	f1c9 0000 	rsb	r0, r9, #0
 80032cc:	b200      	sxth	r0, r0
 80032ce:	e7db      	b.n	8003288 <find_snap_point_y+0x18>
        lv_obj_t * child = lv_obj_get_child(obj, i);
 80032d0:	4639      	mov	r1, r7
 80032d2:	4620      	mov	r0, r4
 80032d4:	f004 fb95 	bl	8007a02 <lv_obj_get_child>
        if(lv_obj_has_flag_any(child, LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 80032d8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
        lv_obj_t * child = lv_obj_get_child(obj, i);
 80032dc:	4682      	mov	sl, r0
        if(lv_obj_has_flag_any(child, LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 80032de:	f000 fd77 	bl	8003dd0 <lv_obj_has_flag_any>
 80032e2:	bb40      	cbnz	r0, 8003336 <find_snap_point_y+0xc6>
        if(lv_obj_has_flag(child, LV_OBJ_FLAG_SNAPABLE)) {
 80032e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80032e8:	4650      	mov	r0, sl
 80032ea:	f000 fd6a 	bl	8003dc2 <lv_obj_has_flag>
 80032ee:	b310      	cbz	r0, 8003336 <find_snap_point_y+0xc6>
            switch(align) {
 80032f0:	2d02      	cmp	r5, #2
 80032f2:	d022      	beq.n	800333a <find_snap_point_y+0xca>
 80032f4:	2d03      	cmp	r5, #3
 80032f6:	d026      	beq.n	8003346 <find_snap_point_y+0xd6>
 80032f8:	2d01      	cmp	r5, #1
 80032fa:	d11c      	bne.n	8003336 <find_snap_point_y+0xc6>
                y_parent = obj->coords.y1 + pad_top;
 80032fc:	8ae3      	ldrh	r3, [r4, #22]
                y_child = child->coords.y1;
 80032fe:	f9ba 0016 	ldrsh.w	r0, [sl, #22]
                y_parent = obj->coords.y1 + pad_top;
 8003302:	4433      	add	r3, r6
            y_child += ofs;
 8003304:	4458      	add	r0, fp
            if(y_child >= min && y_child <= max) {
 8003306:	9a02      	ldr	r2, [sp, #8]
                y_parent = obj->coords.y1 + pad_top + (lv_area_get_height(&obj->coords) - pad_top - pad_bottom) / 2;
 8003308:	b21b      	sxth	r3, r3
            y_child += ofs;
 800330a:	b281      	uxth	r1, r0
 800330c:	b200      	sxth	r0, r0
            if(y_child >= min && y_child <= max) {
 800330e:	4290      	cmp	r0, r2
 8003310:	db11      	blt.n	8003336 <find_snap_point_y+0xc6>
 8003312:	9a03      	ldr	r2, [sp, #12]
 8003314:	4290      	cmp	r0, r2
 8003316:	dc0e      	bgt.n	8003336 <find_snap_point_y+0xc6>
                lv_coord_t y = y_child -  y_parent;
 8003318:	1acb      	subs	r3, r1, r3
                if(LV_ABS(y) < LV_ABS(dist)) dist = y;
 800331a:	ea89 71e9 	eor.w	r1, r9, r9, asr #31
                lv_coord_t y = y_child -  y_parent;
 800331e:	b21b      	sxth	r3, r3
                if(LV_ABS(y) < LV_ABS(dist)) dist = y;
 8003320:	eba1 71e9 	sub.w	r1, r1, r9, asr #31
 8003324:	ea83 70e3 	eor.w	r0, r3, r3, asr #31
 8003328:	b289      	uxth	r1, r1
 800332a:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
 800332e:	b280      	uxth	r0, r0
 8003330:	4288      	cmp	r0, r1
 8003332:	bf38      	it	cc
 8003334:	4699      	movcc	r9, r3
    for(i = 0; i < lv_obj_get_child_cnt(obj); i++) {
 8003336:	3701      	adds	r7, #1
 8003338:	e7be      	b.n	80032b8 <find_snap_point_y+0x48>
                y_parent = obj->coords.y2 - pad_bottom;
 800333a:	8b63      	ldrh	r3, [r4, #26]
                y_child = child->coords.y2;
 800333c:	f9ba 001a 	ldrsh.w	r0, [sl, #26]
                y_parent = obj->coords.y2 - pad_bottom;
 8003340:	eba3 0308 	sub.w	r3, r3, r8
 8003344:	e7de      	b.n	8003304 <find_snap_point_y+0x94>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8003346:	f8ba 301a 	ldrh.w	r3, [sl, #26]
                y_child = child->coords.y1 + lv_area_get_height(&child->coords) / 2;
 800334a:	f8ba 0016 	ldrh.w	r0, [sl, #22]
 800334e:	3301      	adds	r3, #1
                y_parent = obj->coords.y1 + pad_top + (lv_area_get_height(&obj->coords) - pad_top - pad_bottom) / 2;
 8003350:	9a01      	ldr	r2, [sp, #4]
 8003352:	1a1b      	subs	r3, r3, r0
                y_child = child->coords.y1 + lv_area_get_height(&child->coords) / 2;
 8003354:	f3c3 31c0 	ubfx	r1, r3, #15, #1
 8003358:	fa01 f383 	sxtah	r3, r1, r3
                y_parent = obj->coords.y1 + pad_top + (lv_area_get_height(&obj->coords) - pad_top - pad_bottom) / 2;
 800335c:	8ae1      	ldrh	r1, [r4, #22]
                y_child = child->coords.y1 + lv_area_get_height(&child->coords) / 2;
 800335e:	eb00 0363 	add.w	r3, r0, r3, asr #1
 8003362:	b218      	sxth	r0, r3
 8003364:	8b63      	ldrh	r3, [r4, #26]
 8003366:	3301      	adds	r3, #1
 8003368:	1a5b      	subs	r3, r3, r1
                y_parent = obj->coords.y1 + pad_top + (lv_area_get_height(&obj->coords) - pad_top - pad_bottom) / 2;
 800336a:	b21b      	sxth	r3, r3
 800336c:	1a9b      	subs	r3, r3, r2
 800336e:	9a00      	ldr	r2, [sp, #0]
 8003370:	1a9b      	subs	r3, r3, r2
 8003372:	eb03 7cd3 	add.w	ip, r3, r3, lsr #31
 8003376:	198b      	adds	r3, r1, r6
 8003378:	eb03 036c 	add.w	r3, r3, ip, asr #1
 800337c:	e7c2      	b.n	8003304 <find_snap_point_y+0x94>
	...

08003380 <_lv_indev_scroll_handler>:
{
 8003380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_obj_t * scroll_obj = proc->types.pointer.scroll_obj;
 8003384:	6a85      	ldr	r5, [r0, #40]	; 0x28
{
 8003386:	b089      	sub	sp, #36	; 0x24
 8003388:	4604      	mov	r4, r0
    if(scroll_obj == NULL) {
 800338a:	2d00      	cmp	r5, #0
 800338c:	f040 81af 	bne.w	80036ee <_lv_indev_scroll_handler+0x36e>
        proc->types.pointer.scroll_sum.x += proc->types.pointer.vect.x;
 8003390:	8a83      	ldrh	r3, [r0, #20]
    lv_dir_t dir_candidate = LV_DIR_NONE;
 8003392:	46a9      	mov	r9, r5
        proc->types.pointer.scroll_sum.x += proc->types.pointer.vect.x;
 8003394:	8a02      	ldrh	r2, [r0, #16]
 8003396:	4413      	add	r3, r2
        proc->types.pointer.scroll_sum.y += proc->types.pointer.vect.y;
 8003398:	8a42      	ldrh	r2, [r0, #18]
        proc->types.pointer.scroll_sum.x += proc->types.pointer.vect.x;
 800339a:	8283      	strh	r3, [r0, #20]
        proc->types.pointer.scroll_sum.y += proc->types.pointer.vect.y;
 800339c:	8ac3      	ldrh	r3, [r0, #22]
 800339e:	4413      	add	r3, r2
 80033a0:	82c3      	strh	r3, [r0, #22]
    lv_indev_t * indev_act = lv_indev_get_act();
 80033a2:	f7ff f827 	bl	80023f4 <lv_indev_get_act>
    lv_coord_t scroll_limit =  indev_act->driver->scroll_limit;
 80033a6:	6803      	ldr	r3, [r0, #0]
    lv_obj_t * obj_act = proc->types.pointer.act_obj;
 80033a8:	6a26      	ldr	r6, [r4, #32]
    lv_coord_t scroll_limit =  indev_act->driver->scroll_limit;
 80033aa:	f893 a018 	ldrb.w	sl, [r3, #24]
 80033ae:	46d3      	mov	fp, sl
                (down_en  && proc->types.pointer.scroll_sum.y <= - scroll_limit))
 80033b0:	f1ca 0a00 	rsb	sl, sl, #0
    while(obj_act) {
 80033b4:	2e00      	cmp	r6, #0
 80033b6:	f000 815e 	beq.w	8003676 <_lv_indev_scroll_handler+0x2f6>
        if(lv_obj_has_flag(obj_act, LV_OBJ_FLAG_SCROLLABLE) == false) {
 80033ba:	2110      	movs	r1, #16
 80033bc:	4630      	mov	r0, r6
 80033be:	f000 fd00 	bl	8003dc2 <lv_obj_has_flag>
 80033c2:	4607      	mov	r7, r0
 80033c4:	b960      	cbnz	r0, 80033e0 <_lv_indev_scroll_handler+0x60>
        if(lv_obj_has_flag(obj_act, LV_OBJ_FLAG_SCROLL_CHAIN) == false) break;
 80033c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80033ca:	4630      	mov	r0, r6
 80033cc:	f000 fcf9 	bl	8003dc2 <lv_obj_has_flag>
 80033d0:	2800      	cmp	r0, #0
 80033d2:	f000 8150 	beq.w	8003676 <_lv_indev_scroll_handler+0x2f6>
        obj_act = lv_obj_get_parent(obj_act);
 80033d6:	4630      	mov	r0, r6
 80033d8:	f004 fb10 	bl	80079fc <lv_obj_get_parent>
 80033dc:	4606      	mov	r6, r0
 80033de:	e7e9      	b.n	80033b4 <_lv_indev_scroll_handler+0x34>
        if(LV_ABS(proc->types.pointer.scroll_sum.x) > LV_ABS(proc->types.pointer.scroll_sum.y)) {
 80033e0:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 80033e4:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 80033e8:	2a00      	cmp	r2, #0
 80033ea:	bfb8      	it	lt
 80033ec:	4252      	neglt	r2, r2
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	bfb8      	it	lt
 80033f2:	425b      	neglt	r3, r3
 80033f4:	b292      	uxth	r2, r2
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	429a      	cmp	r2, r3
            ver_en = true;
 80033fa:	bf98      	it	ls
 80033fc:	4680      	movls	r8, r0
        lv_dir_t scroll_dir = lv_obj_get_scroll_dir(obj_act);
 80033fe:	4630      	mov	r0, r6
        bool hor_en = false;
 8003400:	bf94      	ite	ls
 8003402:	2700      	movls	r7, #0
        bool ver_en = false;
 8003404:	f04f 0800 	movhi.w	r8, #0
        lv_dir_t scroll_dir = lv_obj_get_scroll_dir(obj_act);
 8003408:	f002 fd4c 	bl	8005ea4 <lv_obj_get_scroll_dir>
        if((scroll_dir & LV_DIR_LEFT) == 0) left_en = false;
 800340c:	f010 0f01 	tst.w	r0, #1
 8003410:	bf14      	ite	ne
 8003412:	4639      	movne	r1, r7
 8003414:	2100      	moveq	r1, #0
        if((scroll_dir & LV_DIR_RIGHT) == 0) right_en = false;
 8003416:	f010 0f02 	tst.w	r0, #2
        if((scroll_dir & LV_DIR_LEFT) == 0) left_en = false;
 800341a:	9107      	str	r1, [sp, #28]
        if((scroll_dir & LV_DIR_RIGHT) == 0) right_en = false;
 800341c:	bf14      	ite	ne
 800341e:	463a      	movne	r2, r7
 8003420:	2200      	moveq	r2, #0
        if((scroll_dir & LV_DIR_TOP) == 0) up_en = false;
 8003422:	f010 0f04 	tst.w	r0, #4
        if((scroll_dir & LV_DIR_RIGHT) == 0) right_en = false;
 8003426:	9206      	str	r2, [sp, #24]
        if((scroll_dir & LV_DIR_TOP) == 0) up_en = false;
 8003428:	bf14      	ite	ne
 800342a:	4643      	movne	r3, r8
 800342c:	2300      	moveq	r3, #0
        if((scroll_dir & LV_DIR_BOTTOM) == 0) down_en = false;
 800342e:	f010 0f08 	tst.w	r0, #8
        lv_coord_t st = lv_obj_get_scroll_top(obj_act);
 8003432:	4630      	mov	r0, r6
        if((scroll_dir & LV_DIR_TOP) == 0) up_en = false;
 8003434:	9305      	str	r3, [sp, #20]
        if((scroll_dir & LV_DIR_BOTTOM) == 0) down_en = false;
 8003436:	bf08      	it	eq
 8003438:	f04f 0800 	moveq.w	r8, #0
        lv_coord_t st = lv_obj_get_scroll_top(obj_act);
 800343c:	f002 fd6a 	bl	8005f14 <lv_obj_get_scroll_top>
 8003440:	9002      	str	r0, [sp, #8]
        lv_coord_t sb = lv_obj_get_scroll_bottom(obj_act);
 8003442:	4630      	mov	r0, r6
 8003444:	f002 fd68 	bl	8005f18 <lv_obj_get_scroll_bottom>
 8003448:	9003      	str	r0, [sp, #12]
        lv_coord_t sl = lv_obj_get_scroll_left(obj_act);
 800344a:	4630      	mov	r0, r6
 800344c:	f002 fdb8 	bl	8005fc0 <lv_obj_get_scroll_left>
 8003450:	9004      	str	r0, [sp, #16]
        lv_coord_t sr = lv_obj_get_scroll_right(obj_act);
 8003452:	4630      	mov	r0, r6
 8003454:	f002 fe20 	bl	8006098 <lv_obj_get_scroll_right>
        if((st > 0 || sb > 0)  &&
 8003458:	9b02      	ldr	r3, [sp, #8]
        lv_coord_t sr = lv_obj_get_scroll_right(obj_act);
 800345a:	4686      	mov	lr, r0
        if((st > 0 || sb > 0)  &&
 800345c:	9907      	ldr	r1, [sp, #28]
 800345e:	2b00      	cmp	r3, #0
 8003460:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 8003464:	dc02      	bgt.n	800346c <_lv_indev_scroll_handler+0xec>
 8003466:	9803      	ldr	r0, [sp, #12]
 8003468:	2800      	cmp	r0, #0
 800346a:	dd0e      	ble.n	800348a <_lv_indev_scroll_handler+0x10a>
 800346c:	b11b      	cbz	r3, 8003476 <_lv_indev_scroll_handler+0xf6>
                ((up_en    && proc->types.pointer.scroll_sum.y >= scroll_limit) ||
 800346e:	f9b4 c016 	ldrsh.w	ip, [r4, #22]
 8003472:	45dc      	cmp	ip, fp
 8003474:	da46      	bge.n	8003504 <_lv_indev_scroll_handler+0x184>
 8003476:	f1b8 0f00 	cmp.w	r8, #0
 800347a:	d006      	beq.n	800348a <_lv_indev_scroll_handler+0x10a>
                        (down_en  && proc->types.pointer.scroll_sum.y <= - scroll_limit)))
 800347c:	f9b4 c016 	ldrsh.w	ip, [r4, #22]
 8003480:	45d4      	cmp	ip, sl
 8003482:	bfdc      	itt	le
 8003484:	4635      	movle	r5, r6
 8003486:	f04f 090c 	movle.w	r9, #12
        if((sl > 0 || sr > 0)  &&
 800348a:	9804      	ldr	r0, [sp, #16]
 800348c:	2800      	cmp	r0, #0
 800348e:	dc02      	bgt.n	8003496 <_lv_indev_scroll_handler+0x116>
 8003490:	f1be 0f00 	cmp.w	lr, #0
 8003494:	dd0c      	ble.n	80034b0 <_lv_indev_scroll_handler+0x130>
 8003496:	b119      	cbz	r1, 80034a0 <_lv_indev_scroll_handler+0x120>
                ((left_en    && proc->types.pointer.scroll_sum.x >=  scroll_limit) ||
 8003498:	f9b4 c014 	ldrsh.w	ip, [r4, #20]
 800349c:	45dc      	cmp	ip, fp
 800349e:	da35      	bge.n	800350c <_lv_indev_scroll_handler+0x18c>
 80034a0:	b132      	cbz	r2, 80034b0 <_lv_indev_scroll_handler+0x130>
                        (right_en  && proc->types.pointer.scroll_sum.x <= - scroll_limit)))
 80034a2:	f9b4 c014 	ldrsh.w	ip, [r4, #20]
 80034a6:	45d4      	cmp	ip, sl
 80034a8:	bfdc      	itt	le
 80034aa:	4635      	movle	r5, r6
 80034ac:	f04f 0903 	movle.w	r9, #3
        if(st <= 0) up_en = false;
 80034b0:	9802      	ldr	r0, [sp, #8]
 80034b2:	2800      	cmp	r0, #0
        if(sb <= 0) down_en = false;
 80034b4:	9803      	ldr	r0, [sp, #12]
        if(st <= 0) up_en = false;
 80034b6:	bfd8      	it	le
 80034b8:	2300      	movle	r3, #0
        if(sb <= 0) down_en = false;
 80034ba:	2800      	cmp	r0, #0
        if(sl <= 0) left_en = false;
 80034bc:	9804      	ldr	r0, [sp, #16]
        if(sb <= 0) down_en = false;
 80034be:	bfd8      	it	le
 80034c0:	f04f 0800 	movle.w	r8, #0
        if(sl <= 0) left_en = false;
 80034c4:	2800      	cmp	r0, #0
 80034c6:	f340 8174 	ble.w	80037b2 <_lv_indev_scroll_handler+0x432>
        if(sr <= 0) right_en = false;
 80034ca:	f1be 0f00 	cmp.w	lr, #0
 80034ce:	f340 80bf 	ble.w	8003650 <_lv_indev_scroll_handler+0x2d0>
        if((left_en  && proc->types.pointer.scroll_sum.x >=   scroll_limit) ||
 80034d2:	2900      	cmp	r1, #0
 80034d4:	f040 80c0 	bne.w	8003658 <_lv_indev_scroll_handler+0x2d8>
 80034d8:	b122      	cbz	r2, 80034e4 <_lv_indev_scroll_handler+0x164>
                (right_en && proc->types.pointer.scroll_sum.x <= - scroll_limit) ||
 80034da:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 80034de:	4552      	cmp	r2, sl
 80034e0:	f340 80bf 	ble.w	8003662 <_lv_indev_scroll_handler+0x2e2>
 80034e4:	b123      	cbz	r3, 80034f0 <_lv_indev_scroll_handler+0x170>
                (up_en    && proc->types.pointer.scroll_sum.y >=   scroll_limit) ||
 80034e6:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 80034ea:	455b      	cmp	r3, fp
 80034ec:	f280 80b9 	bge.w	8003662 <_lv_indev_scroll_handler+0x2e2>
 80034f0:	f1b8 0f00 	cmp.w	r8, #0
 80034f4:	f43f af67 	beq.w	80033c6 <_lv_indev_scroll_handler+0x46>
                (down_en  && proc->types.pointer.scroll_sum.y <= - scroll_limit))
 80034f8:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 80034fc:	4553      	cmp	r3, sl
 80034fe:	f73f af62 	bgt.w	80033c6 <_lv_indev_scroll_handler+0x46>
 8003502:	e0ae      	b.n	8003662 <_lv_indev_scroll_handler+0x2e2>
 8003504:	4635      	mov	r5, r6
            dir_candidate = LV_DIR_VER;
 8003506:	f04f 090c 	mov.w	r9, #12
 800350a:	e7be      	b.n	800348a <_lv_indev_scroll_handler+0x10a>
 800350c:	4635      	mov	r5, r6
            dir_candidate = LV_DIR_HOR;
 800350e:	f04f 0903 	mov.w	r9, #3
 8003512:	e7cd      	b.n	80034b0 <_lv_indev_scroll_handler+0x130>
        switch(lv_obj_get_scroll_snap_y(obj)) {
 8003514:	4628      	mov	r0, r5
 8003516:	f002 fcd3 	bl	8005ec0 <lv_obj_get_scroll_snap_y>
 800351a:	2802      	cmp	r0, #2
 800351c:	f04f 0300 	mov.w	r3, #0
 8003520:	d011      	beq.n	8003546 <_lv_indev_scroll_handler+0x1c6>
 8003522:	2803      	cmp	r0, #3
 8003524:	d03a      	beq.n	800359c <_lv_indev_scroll_handler+0x21c>
 8003526:	2801      	cmp	r0, #1
 8003528:	d14d      	bne.n	80035c6 <_lv_indev_scroll_handler+0x246>
            proc->types.pointer.scroll_area.y1 = find_snap_point_y(obj, obj->coords.y1 + 1, LV_COORD_MAX, 0);
 800352a:	8ae9      	ldrh	r1, [r5, #22]
 800352c:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 8003530:	4628      	mov	r0, r5
 8003532:	3101      	adds	r1, #1
 8003534:	b209      	sxth	r1, r1
 8003536:	f7ff fe9b 	bl	8003270 <find_snap_point_y>
            proc->types.pointer.scroll_area.y2 = find_snap_point_y(obj, LV_COORD_MIN, obj->coords.y1 - 1, 0);
 800353a:	8aea      	ldrh	r2, [r5, #22]
            proc->types.pointer.scroll_area.y1 = find_snap_point_y(obj, obj->coords.y1 + 1, LV_COORD_MAX, 0);
 800353c:	8660      	strh	r0, [r4, #50]	; 0x32
            proc->types.pointer.scroll_area.y2 = find_snap_point_y(obj, LV_COORD_MIN, obj->coords.y1 - 1, 0);
 800353e:	3a01      	subs	r2, #1
            proc->types.pointer.scroll_area.y2 = find_snap_point_y(obj, LV_COORD_MIN, y_mid - 1, 0);
 8003540:	2300      	movs	r3, #0
 8003542:	b212      	sxth	r2, r2
 8003544:	e00a      	b.n	800355c <_lv_indev_scroll_handler+0x1dc>
            proc->types.pointer.scroll_area.y1 = find_snap_point_y(obj, obj->coords.y2, LV_COORD_MAX, 0);
 8003546:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 800354a:	f9b5 101a 	ldrsh.w	r1, [r5, #26]
 800354e:	4628      	mov	r0, r5
 8003550:	f7ff fe8e 	bl	8003270 <find_snap_point_y>
            proc->types.pointer.scroll_area.y2 = find_snap_point_y(obj, LV_COORD_MIN, obj->coords.y2, 0);
 8003554:	2300      	movs	r3, #0
 8003556:	f9b5 201a 	ldrsh.w	r2, [r5, #26]
            proc->types.pointer.scroll_area.y1 = find_snap_point_y(obj, obj->coords.y2, LV_COORD_MAX, 0);
 800355a:	8660      	strh	r0, [r4, #50]	; 0x32
            proc->types.pointer.scroll_area.y2 = find_snap_point_y(obj, LV_COORD_MIN, obj->coords.y2, 0);
 800355c:	4997      	ldr	r1, [pc, #604]	; (80037bc <_lv_indev_scroll_handler+0x43c>)
 800355e:	4628      	mov	r0, r5
 8003560:	f7ff fe86 	bl	8003270 <find_snap_point_y>
 8003564:	86e0      	strh	r0, [r4, #54]	; 0x36
        switch(lv_obj_get_scroll_snap_x(obj)) {
 8003566:	4628      	mov	r0, r5
 8003568:	f002 fca4 	bl	8005eb4 <lv_obj_get_scroll_snap_x>
 800356c:	2802      	cmp	r0, #2
 800356e:	d031      	beq.n	80035d4 <_lv_indev_scroll_handler+0x254>
 8003570:	2803      	cmp	r0, #3
 8003572:	d03c      	beq.n	80035ee <_lv_indev_scroll_handler+0x26e>
 8003574:	2801      	cmp	r0, #1
 8003576:	d152      	bne.n	800361e <_lv_indev_scroll_handler+0x29e>
            proc->types.pointer.scroll_area.x1 = find_snap_point_x(obj, obj->coords.x1, LV_COORD_MAX, 0);
 8003578:	2300      	movs	r3, #0
 800357a:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 800357e:	f9b5 1014 	ldrsh.w	r1, [r5, #20]
 8003582:	4628      	mov	r0, r5
 8003584:	f7ff fded 	bl	8003162 <find_snap_point_x>
            proc->types.pointer.scroll_area.x2 = find_snap_point_x(obj, LV_COORD_MIN, obj->coords.x1, 0);
 8003588:	2300      	movs	r3, #0
 800358a:	f9b5 2014 	ldrsh.w	r2, [r5, #20]
            proc->types.pointer.scroll_area.x1 = find_snap_point_x(obj, obj->coords.x1, LV_COORD_MAX, 0);
 800358e:	8620      	strh	r0, [r4, #48]	; 0x30
            proc->types.pointer.scroll_area.x2 = find_snap_point_x(obj, LV_COORD_MIN, x_mid - 1, 0);
 8003590:	498a      	ldr	r1, [pc, #552]	; (80037bc <_lv_indev_scroll_handler+0x43c>)
 8003592:	4628      	mov	r0, r5
 8003594:	f7ff fde5 	bl	8003162 <find_snap_point_x>
 8003598:	86a0      	strh	r0, [r4, #52]	; 0x34
            break;
 800359a:	e088      	b.n	80036ae <_lv_indev_scroll_handler+0x32e>
 800359c:	8b6a      	ldrh	r2, [r5, #26]
            proc->types.pointer.scroll_area.y1 = find_snap_point_y(obj, y_mid + 1, LV_COORD_MAX, 0);
 800359e:	4628      	mov	r0, r5
            lv_coord_t y_mid = obj->coords.y1 + lv_area_get_height(&obj->coords) / 2;
 80035a0:	8aee      	ldrh	r6, [r5, #22]
 80035a2:	3201      	adds	r2, #1
 80035a4:	1b92      	subs	r2, r2, r6
 80035a6:	f3c2 31c0 	ubfx	r1, r2, #15, #1
 80035aa:	fa01 f282 	sxtah	r2, r1, r2
 80035ae:	eb06 0662 	add.w	r6, r6, r2, asr #1
            proc->types.pointer.scroll_area.y1 = find_snap_point_y(obj, y_mid + 1, LV_COORD_MAX, 0);
 80035b2:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
            lv_coord_t y_mid = obj->coords.y1 + lv_area_get_height(&obj->coords) / 2;
 80035b6:	b2b6      	uxth	r6, r6
            proc->types.pointer.scroll_area.y1 = find_snap_point_y(obj, y_mid + 1, LV_COORD_MAX, 0);
 80035b8:	1c71      	adds	r1, r6, #1
 80035ba:	b209      	sxth	r1, r1
 80035bc:	f7ff fe58 	bl	8003270 <find_snap_point_y>
            proc->types.pointer.scroll_area.y2 = find_snap_point_y(obj, LV_COORD_MIN, y_mid - 1, 0);
 80035c0:	1e72      	subs	r2, r6, #1
            proc->types.pointer.scroll_area.y1 = find_snap_point_y(obj, y_mid + 1, LV_COORD_MAX, 0);
 80035c2:	8660      	strh	r0, [r4, #50]	; 0x32
            proc->types.pointer.scroll_area.y2 = find_snap_point_y(obj, LV_COORD_MIN, y_mid - 1, 0);
 80035c4:	e7bc      	b.n	8003540 <_lv_indev_scroll_handler+0x1c0>
            proc->types.pointer.scroll_area.y1 = LV_COORD_MIN;
 80035c6:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80035ca:	8663      	strh	r3, [r4, #50]	; 0x32
            proc->types.pointer.scroll_area.y2 = LV_COORD_MAX;
 80035cc:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80035d0:	86e3      	strh	r3, [r4, #54]	; 0x36
            break;
 80035d2:	e7c8      	b.n	8003566 <_lv_indev_scroll_handler+0x1e6>
            proc->types.pointer.scroll_area.x1 = find_snap_point_x(obj, obj->coords.x2, LV_COORD_MAX, 0);
 80035d4:	2300      	movs	r3, #0
 80035d6:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 80035da:	f9b5 1018 	ldrsh.w	r1, [r5, #24]
 80035de:	4628      	mov	r0, r5
 80035e0:	f7ff fdbf 	bl	8003162 <find_snap_point_x>
            proc->types.pointer.scroll_area.x2 = find_snap_point_x(obj, LV_COORD_MIN, obj->coords.x2, 0);
 80035e4:	2300      	movs	r3, #0
 80035e6:	f9b5 2018 	ldrsh.w	r2, [r5, #24]
            proc->types.pointer.scroll_area.x1 = find_snap_point_x(obj, obj->coords.x2, LV_COORD_MAX, 0);
 80035ea:	8620      	strh	r0, [r4, #48]	; 0x30
            proc->types.pointer.scroll_area.x2 = find_snap_point_x(obj, LV_COORD_MIN, obj->coords.x2, 0);
 80035ec:	e7d0      	b.n	8003590 <_lv_indev_scroll_handler+0x210>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80035ee:	8b2a      	ldrh	r2, [r5, #24]
            proc->types.pointer.scroll_area.x1 = find_snap_point_x(obj, x_mid + 1, LV_COORD_MAX, 0);
 80035f0:	4628      	mov	r0, r5
            lv_coord_t x_mid = obj->coords.x1 + lv_area_get_width(&obj->coords) / 2;
 80035f2:	8aae      	ldrh	r6, [r5, #20]
 80035f4:	3201      	adds	r2, #1
 80035f6:	1b92      	subs	r2, r2, r6
 80035f8:	f3c2 33c0 	ubfx	r3, r2, #15, #1
 80035fc:	fa03 f282 	sxtah	r2, r3, r2
            proc->types.pointer.scroll_area.x1 = find_snap_point_x(obj, x_mid + 1, LV_COORD_MAX, 0);
 8003600:	2300      	movs	r3, #0
            lv_coord_t x_mid = obj->coords.x1 + lv_area_get_width(&obj->coords) / 2;
 8003602:	eb06 0662 	add.w	r6, r6, r2, asr #1
            proc->types.pointer.scroll_area.x1 = find_snap_point_x(obj, x_mid + 1, LV_COORD_MAX, 0);
 8003606:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
            lv_coord_t x_mid = obj->coords.x1 + lv_area_get_width(&obj->coords) / 2;
 800360a:	b2b6      	uxth	r6, r6
            proc->types.pointer.scroll_area.x1 = find_snap_point_x(obj, x_mid + 1, LV_COORD_MAX, 0);
 800360c:	1c71      	adds	r1, r6, #1
 800360e:	b209      	sxth	r1, r1
 8003610:	f7ff fda7 	bl	8003162 <find_snap_point_x>
            proc->types.pointer.scroll_area.x2 = find_snap_point_x(obj, LV_COORD_MIN, x_mid - 1, 0);
 8003614:	1e72      	subs	r2, r6, #1
 8003616:	2300      	movs	r3, #0
            proc->types.pointer.scroll_area.x1 = find_snap_point_x(obj, x_mid + 1, LV_COORD_MAX, 0);
 8003618:	8620      	strh	r0, [r4, #48]	; 0x30
            proc->types.pointer.scroll_area.x2 = find_snap_point_x(obj, LV_COORD_MIN, x_mid - 1, 0);
 800361a:	b212      	sxth	r2, r2
 800361c:	e7b8      	b.n	8003590 <_lv_indev_scroll_handler+0x210>
            proc->types.pointer.scroll_area.x1 = LV_COORD_MIN;
 800361e:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8003622:	8623      	strh	r3, [r4, #48]	; 0x30
    if(proc->types.pointer.scroll_area.x2 == 0) proc->types.pointer.scroll_area.x2 = LV_COORD_MAX;
 8003624:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8003628:	86a3      	strh	r3, [r4, #52]	; 0x34
 800362a:	e04a      	b.n	80036c2 <_lv_indev_scroll_handler+0x342>
            lv_coord_t st = lv_obj_get_scroll_top(scroll_obj);
 800362c:	f002 fc72 	bl	8005f14 <lv_obj_get_scroll_top>
 8003630:	9002      	str	r0, [sp, #8]
            lv_coord_t sb = lv_obj_get_scroll_bottom(scroll_obj);
 8003632:	4628      	mov	r0, r5
        lv_coord_t diff_x = 0;
 8003634:	2700      	movs	r7, #0
            lv_coord_t sb = lv_obj_get_scroll_bottom(scroll_obj);
 8003636:	f002 fc6f 	bl	8005f18 <lv_obj_get_scroll_bottom>
            diff_y = elastic_diff(scroll_obj, proc->types.pointer.vect.y, st, sb, LV_DIR_VER);
 800363a:	210c      	movs	r1, #12
            lv_coord_t sb = lv_obj_get_scroll_bottom(scroll_obj);
 800363c:	4603      	mov	r3, r0
            diff_y = elastic_diff(scroll_obj, proc->types.pointer.vect.y, st, sb, LV_DIR_VER);
 800363e:	9a02      	ldr	r2, [sp, #8]
 8003640:	9100      	str	r1, [sp, #0]
 8003642:	4628      	mov	r0, r5
 8003644:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
 8003648:	f7ff fcc5 	bl	8002fd6 <elastic_diff>
 800364c:	4606      	mov	r6, r0
 800364e:	e068      	b.n	8003722 <_lv_indev_scroll_handler+0x3a2>
        if((left_en  && proc->types.pointer.scroll_sum.x >=   scroll_limit) ||
 8003650:	2900      	cmp	r1, #0
 8003652:	f43f af47 	beq.w	80034e4 <_lv_indev_scroll_handler+0x164>
        if(sr <= 0) right_en = false;
 8003656:	2200      	movs	r2, #0
        if((left_en  && proc->types.pointer.scroll_sum.x >=   scroll_limit) ||
 8003658:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 800365c:	4559      	cmp	r1, fp
 800365e:	f6ff af3b 	blt.w	80034d8 <_lv_indev_scroll_handler+0x158>
            proc->types.pointer.scroll_dir = hor_en ? LV_DIR_HOR : LV_DIR_VER;
 8003662:	2f00      	cmp	r7, #0
 8003664:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8003668:	bf14      	ite	ne
 800366a:	2203      	movne	r2, #3
 800366c:	220c      	moveq	r2, #12
 800366e:	f362 0303 	bfi	r3, r2, #0, #4
 8003672:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if(obj_candidate) {
 8003676:	2d00      	cmp	r5, #0
 8003678:	f000 8098 	beq.w	80037ac <_lv_indev_scroll_handler+0x42c>
        proc->types.pointer.scroll_dir = dir_candidate;
 800367c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_SCROLL_ONE) == false) {
 8003680:	2180      	movs	r1, #128	; 0x80
 8003682:	4628      	mov	r0, r5
        proc->types.pointer.scroll_obj = obj_candidate;
 8003684:	62a5      	str	r5, [r4, #40]	; 0x28
        proc->types.pointer.scroll_dir = dir_candidate;
 8003686:	f369 0303 	bfi	r3, r9, #0, #4
 800368a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        proc->types.pointer.scroll_sum.x = 0;
 800368e:	2300      	movs	r3, #0
 8003690:	6163      	str	r3, [r4, #20]
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_SCROLL_ONE) == false) {
 8003692:	f000 fb96 	bl	8003dc2 <lv_obj_has_flag>
 8003696:	2800      	cmp	r0, #0
 8003698:	f47f af3c 	bne.w	8003514 <_lv_indev_scroll_handler+0x194>
        lv_area_set(&proc->types.pointer.scroll_area, LV_COORD_MIN, LV_COORD_MIN, LV_COORD_MAX, LV_COORD_MAX);
 800369c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80036a0:	4a46      	ldr	r2, [pc, #280]	; (80037bc <_lv_indev_scroll_handler+0x43c>)
 80036a2:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80036a6:	4611      	mov	r1, r2
 80036a8:	9300      	str	r3, [sp, #0]
 80036aa:	f013 fbb5 	bl	8016e18 <lv_area_set>
    if(proc->types.pointer.scroll_area.x1 == 0) proc->types.pointer.scroll_area.x1 = LV_COORD_MIN;
 80036ae:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 80036b2:	b913      	cbnz	r3, 80036ba <_lv_indev_scroll_handler+0x33a>
 80036b4:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80036b8:	8623      	strh	r3, [r4, #48]	; 0x30
    if(proc->types.pointer.scroll_area.x2 == 0) proc->types.pointer.scroll_area.x2 = LV_COORD_MAX;
 80036ba:	f9b4 3034 	ldrsh.w	r3, [r4, #52]	; 0x34
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d0b0      	beq.n	8003624 <_lv_indev_scroll_handler+0x2a4>
    if(proc->types.pointer.scroll_area.y1 == 0) proc->types.pointer.scroll_area.y1 = LV_COORD_MIN;
 80036c2:	f9b4 3032 	ldrsh.w	r3, [r4, #50]	; 0x32
 80036c6:	b913      	cbnz	r3, 80036ce <_lv_indev_scroll_handler+0x34e>
 80036c8:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80036cc:	8663      	strh	r3, [r4, #50]	; 0x32
    if(proc->types.pointer.scroll_area.y2 == 0) proc->types.pointer.scroll_area.y2 = LV_COORD_MAX;
 80036ce:	f9b4 3036 	ldrsh.w	r3, [r4, #54]	; 0x36
 80036d2:	b913      	cbnz	r3, 80036da <_lv_indev_scroll_handler+0x35a>
 80036d4:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80036d8:	86e3      	strh	r3, [r4, #54]	; 0x36
        lv_indev_t * indev_act = lv_indev_get_act();
 80036da:	f7fe fe8b 	bl	80023f4 <lv_indev_get_act>
        lv_event_send(scroll_obj, LV_EVENT_SCROLL_BEGIN, indev_act);
 80036de:	2109      	movs	r1, #9
        lv_indev_t * indev_act = lv_indev_get_act();
 80036e0:	4602      	mov	r2, r0
        lv_event_send(scroll_obj, LV_EVENT_SCROLL_BEGIN, indev_act);
 80036e2:	4628      	mov	r0, r5
 80036e4:	f7fe fbf0 	bl	8001ec8 <lv_event_send>
        if(proc->reset_query) return;
 80036e8:	7863      	ldrb	r3, [r4, #1]
 80036ea:	079a      	lsls	r2, r3, #30
 80036ec:	d45e      	bmi.n	80037ac <_lv_indev_scroll_handler+0x42c>
    if(proc->types.pointer.vect.x != 0 || proc->types.pointer.vect.y != 0) {
 80036ee:	6923      	ldr	r3, [r4, #16]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d05b      	beq.n	80037ac <_lv_indev_scroll_handler+0x42c>
        if(proc->types.pointer.scroll_dir == LV_DIR_HOR) {
 80036f4:	f894 603c 	ldrb.w	r6, [r4, #60]	; 0x3c
            lv_coord_t sr = lv_obj_get_scroll_right(scroll_obj);
 80036f8:	4628      	mov	r0, r5
        if(proc->types.pointer.scroll_dir == LV_DIR_HOR) {
 80036fa:	f006 060f 	and.w	r6, r6, #15
 80036fe:	2e03      	cmp	r6, #3
 8003700:	d194      	bne.n	800362c <_lv_indev_scroll_handler+0x2ac>
            lv_coord_t sr = lv_obj_get_scroll_right(scroll_obj);
 8003702:	f002 fcc9 	bl	8006098 <lv_obj_get_scroll_right>
 8003706:	9002      	str	r0, [sp, #8]
            lv_coord_t sl = lv_obj_get_scroll_left(scroll_obj);
 8003708:	4628      	mov	r0, r5
 800370a:	f002 fc59 	bl	8005fc0 <lv_obj_get_scroll_left>
            diff_x = elastic_diff(scroll_obj, proc->types.pointer.vect.x, sl, sr, LV_DIR_HOR);
 800370e:	9600      	str	r6, [sp, #0]
            lv_coord_t sl = lv_obj_get_scroll_left(scroll_obj);
 8003710:	4602      	mov	r2, r0
            diff_x = elastic_diff(scroll_obj, proc->types.pointer.vect.x, sl, sr, LV_DIR_HOR);
 8003712:	9b02      	ldr	r3, [sp, #8]
 8003714:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 8003718:	4628      	mov	r0, r5
 800371a:	f7ff fc5c 	bl	8002fd6 <elastic_diff>
        lv_coord_t diff_y = 0;
 800371e:	2600      	movs	r6, #0
            diff_x = elastic_diff(scroll_obj, proc->types.pointer.vect.x, sl, sr, LV_DIR_HOR);
 8003720:	4607      	mov	r7, r0
        lv_dir_t scroll_dir = lv_obj_get_scroll_dir(scroll_obj);
 8003722:	4628      	mov	r0, r5
 8003724:	f002 fbbe 	bl	8005ea4 <lv_obj_get_scroll_dir>
        if((scroll_dir & LV_DIR_LEFT)   == 0 && diff_x > 0) diff_x = 0;
 8003728:	07c3      	lsls	r3, r0, #31
 800372a:	bf5c      	itt	pl
 800372c:	ea07 77e7 	andpl.w	r7, r7, r7, asr #31
 8003730:	b23f      	sxthpl	r7, r7
        if((scroll_dir & LV_DIR_RIGHT)  == 0 && diff_x < 0) diff_x = 0;
 8003732:	0781      	lsls	r1, r0, #30
        if(proc->types.pointer.scroll_sum.x + *diff_x < proc->types.pointer.scroll_area.x1) {
 8003734:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8003738:	bf5c      	itt	pl
 800373a:	ea27 77e7 	bicpl.w	r7, r7, r7, asr #31
 800373e:	b23f      	sxthpl	r7, r7
        if((scroll_dir & LV_DIR_TOP)    == 0 && diff_y > 0) diff_y = 0;
 8003740:	0742      	lsls	r2, r0, #29
        if(proc->types.pointer.scroll_sum.y + *diff_y < proc->types.pointer.scroll_area.y1) {
 8003742:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 8003746:	bf5c      	itt	pl
 8003748:	ea06 76e6 	andpl.w	r6, r6, r6, asr #31
 800374c:	b236      	sxthpl	r6, r6
        if((scroll_dir & LV_DIR_BOTTOM) == 0 && diff_y < 0) diff_y = 0;
 800374e:	0703      	lsls	r3, r0, #28
        if(proc->types.pointer.scroll_sum.y + *diff_y < proc->types.pointer.scroll_area.y1) {
 8003750:	f9b4 0032 	ldrsh.w	r0, [r4, #50]	; 0x32
 8003754:	bf5c      	itt	pl
 8003756:	ea26 76e6 	bicpl.w	r6, r6, r6, asr #31
 800375a:	b236      	sxthpl	r6, r6
 800375c:	18b3      	adds	r3, r6, r2
 800375e:	4283      	cmp	r3, r0
           *diff_y = proc->types.pointer.scroll_area.y1 - proc->types.pointer.scroll_sum.y;
 8003760:	bfbc      	itt	lt
 8003762:	1a80      	sublt	r0, r0, r2
 8003764:	b206      	sxthlt	r6, r0
        if(proc->types.pointer.scroll_sum.y + *diff_y > proc->types.pointer.scroll_area.y2) {
 8003766:	f9b4 0036 	ldrsh.w	r0, [r4, #54]	; 0x36
 800376a:	18b3      	adds	r3, r6, r2
 800376c:	4283      	cmp	r3, r0
        if(proc->types.pointer.scroll_sum.x + *diff_x < proc->types.pointer.scroll_area.x1) {
 800376e:	eb07 0301 	add.w	r3, r7, r1
            *diff_y = proc->types.pointer.scroll_area.y2 - proc->types.pointer.scroll_sum.y;
 8003772:	bfc4      	itt	gt
 8003774:	1a80      	subgt	r0, r0, r2
 8003776:	b206      	sxthgt	r6, r0
        if(proc->types.pointer.scroll_sum.x + *diff_x < proc->types.pointer.scroll_area.x1) {
 8003778:	f9b4 0030 	ldrsh.w	r0, [r4, #48]	; 0x30
 800377c:	4283      	cmp	r3, r0
        lv_obj_scroll_by(scroll_obj, diff_x, diff_y, LV_ANIM_OFF);
 800377e:	4632      	mov	r2, r6
            *diff_x = proc->types.pointer.scroll_area.x1 - proc->types.pointer.scroll_sum.x;
 8003780:	bfbc      	itt	lt
 8003782:	1a40      	sublt	r0, r0, r1
 8003784:	b207      	sxthlt	r7, r0
        if(proc->types.pointer.scroll_sum.x + *diff_x > proc->types.pointer.scroll_area.x2) {
 8003786:	f9b4 0034 	ldrsh.w	r0, [r4, #52]	; 0x34
 800378a:	187b      	adds	r3, r7, r1
 800378c:	4283      	cmp	r3, r0
        lv_obj_scroll_by(scroll_obj, diff_x, diff_y, LV_ANIM_OFF);
 800378e:	f04f 0300 	mov.w	r3, #0
            *diff_x = proc->types.pointer.scroll_area.x2 - proc->types.pointer.scroll_sum.x;
 8003792:	bfc4      	itt	gt
 8003794:	1a40      	subgt	r0, r0, r1
 8003796:	b207      	sxthgt	r7, r0
        lv_obj_scroll_by(scroll_obj, diff_x, diff_y, LV_ANIM_OFF);
 8003798:	4628      	mov	r0, r5
 800379a:	4639      	mov	r1, r7
 800379c:	f002 fd00 	bl	80061a0 <lv_obj_scroll_by>
        proc->types.pointer.scroll_sum.x += diff_x;
 80037a0:	8aa1      	ldrh	r1, [r4, #20]
        proc->types.pointer.scroll_sum.y += diff_y;
 80037a2:	8ae2      	ldrh	r2, [r4, #22]
        proc->types.pointer.scroll_sum.x += diff_x;
 80037a4:	440f      	add	r7, r1
        proc->types.pointer.scroll_sum.y += diff_y;
 80037a6:	4416      	add	r6, r2
        proc->types.pointer.scroll_sum.x += diff_x;
 80037a8:	82a7      	strh	r7, [r4, #20]
        proc->types.pointer.scroll_sum.y += diff_y;
 80037aa:	82e6      	strh	r6, [r4, #22]
}
 80037ac:	b009      	add	sp, #36	; 0x24
 80037ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(sr <= 0) right_en = false;
 80037b2:	f1be 0f00 	cmp.w	lr, #0
 80037b6:	f73f ae8f 	bgt.w	80034d8 <_lv_indev_scroll_handler+0x158>
 80037ba:	e693      	b.n	80034e4 <_lv_indev_scroll_handler+0x164>
 80037bc:	ffffa000 	.word	0xffffa000

080037c0 <_lv_indev_scroll_throw_handler>:
{
 80037c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_obj_t * scroll_obj = proc->types.pointer.scroll_obj;
 80037c4:	6a85      	ldr	r5, [r0, #40]	; 0x28
{
 80037c6:	b085      	sub	sp, #20
 80037c8:	4604      	mov	r4, r0
    if(scroll_obj == NULL) return;
 80037ca:	2d00      	cmp	r5, #0
 80037cc:	f000 8083 	beq.w	80038d6 <_lv_indev_scroll_throw_handler+0x116>
    if(proc->types.pointer.scroll_dir == LV_DIR_NONE) return;
 80037d0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80037d4:	071b      	lsls	r3, r3, #28
 80037d6:	d07e      	beq.n	80038d6 <_lv_indev_scroll_throw_handler+0x116>
    lv_indev_t * indev_act = lv_indev_get_act();
 80037d8:	f7fe fe0c 	bl	80023f4 <lv_indev_get_act>
    lv_coord_t scroll_throw =  indev_act->driver->scroll_throw;
 80037dc:	6803      	ldr	r3, [r0, #0]
    lv_indev_t * indev_act = lv_indev_get_act();
 80037de:	4681      	mov	r9, r0
    if(lv_obj_has_flag(scroll_obj, LV_OBJ_FLAG_SCROLL_MOMENTUM) == false) {
 80037e0:	2140      	movs	r1, #64	; 0x40
 80037e2:	4628      	mov	r0, r5
    lv_coord_t scroll_throw =  indev_act->driver->scroll_throw;
 80037e4:	f893 a019 	ldrb.w	sl, [r3, #25]
    if(lv_obj_has_flag(scroll_obj, LV_OBJ_FLAG_SCROLL_MOMENTUM) == false) {
 80037e8:	f000 faeb 	bl	8003dc2 <lv_obj_has_flag>
 80037ec:	b900      	cbnz	r0, 80037f0 <_lv_indev_scroll_throw_handler+0x30>
        proc->types.pointer.scroll_throw_vect.x = 0;
 80037ee:	61a0      	str	r0, [r4, #24]
    lv_scroll_snap_t align_x = lv_obj_get_scroll_snap_x(scroll_obj);
 80037f0:	4628      	mov	r0, r5
 80037f2:	f002 fb5f 	bl	8005eb4 <lv_obj_get_scroll_snap_x>
 80037f6:	4607      	mov	r7, r0
    lv_scroll_snap_t align_y = lv_obj_get_scroll_snap_y(scroll_obj);
 80037f8:	4628      	mov	r0, r5
 80037fa:	f002 fb61 	bl	8005ec0 <lv_obj_get_scroll_snap_y>
    if(proc->types.pointer.scroll_dir == LV_DIR_VER) {
 80037fe:	f894 603c 	ldrb.w	r6, [r4, #60]	; 0x3c
    lv_scroll_snap_t align_y = lv_obj_get_scroll_snap_y(scroll_obj);
 8003802:	4680      	mov	r8, r0
    if(proc->types.pointer.scroll_dir == LV_DIR_VER) {
 8003804:	f006 060f 	and.w	r6, r6, #15
 8003808:	2e0c      	cmp	r6, #12
 800380a:	f040 8087 	bne.w	800391c <_lv_indev_scroll_throw_handler+0x15c>
        proc->types.pointer.scroll_throw_vect.x = 0;
 800380e:	f04f 0b00 	mov.w	fp, #0
 8003812:	f9b4 001a 	ldrsh.w	r0, [r4, #26]
 8003816:	f8a4 b018 	strh.w	fp, [r4, #24]
        if(align_y == LV_SCROLL_SNAP_NONE) {
 800381a:	f1b8 0f00 	cmp.w	r8, #0
 800381e:	d15d      	bne.n	80038dc <_lv_indev_scroll_throw_handler+0x11c>
                    proc->types.pointer.scroll_throw_vect.y * (100 - scroll_throw) / 100;
 8003820:	f1ca 0a64 	rsb	sl, sl, #100	; 0x64
 8003824:	fb00 f00a 	mul.w	r0, r0, sl
 8003828:	f04f 0a64 	mov.w	sl, #100	; 0x64
 800382c:	fb90 f0fa 	sdiv	r0, r0, sl
            proc->types.pointer.scroll_throw_vect.y =
 8003830:	8360      	strh	r0, [r4, #26]
            lv_coord_t sb = lv_obj_get_scroll_bottom(scroll_obj);
 8003832:	4628      	mov	r0, r5
 8003834:	f002 fb70 	bl	8005f18 <lv_obj_get_scroll_bottom>
 8003838:	9003      	str	r0, [sp, #12]
            lv_coord_t st = lv_obj_get_scroll_top(scroll_obj);
 800383a:	4628      	mov	r0, r5
 800383c:	f002 fb6a 	bl	8005f14 <lv_obj_get_scroll_top>
             proc->types.pointer.scroll_throw_vect.y = elastic_diff(scroll_obj, proc->types.pointer.scroll_throw_vect.y, st, sb, LV_DIR_VER);
 8003840:	9b03      	ldr	r3, [sp, #12]
            lv_coord_t st = lv_obj_get_scroll_top(scroll_obj);
 8003842:	4602      	mov	r2, r0
             proc->types.pointer.scroll_throw_vect.y = elastic_diff(scroll_obj, proc->types.pointer.scroll_throw_vect.y, st, sb, LV_DIR_VER);
 8003844:	f9b4 101a 	ldrsh.w	r1, [r4, #26]
 8003848:	4628      	mov	r0, r5
 800384a:	9600      	str	r6, [sp, #0]
 800384c:	f7ff fbc3 	bl	8002fd6 <elastic_diff>
            lv_obj_scroll_by(scroll_obj, 0, proc->types.pointer.scroll_throw_vect.y, LV_ANIM_OFF);
 8003850:	4643      	mov	r3, r8
             proc->types.pointer.scroll_throw_vect.y = elastic_diff(scroll_obj, proc->types.pointer.scroll_throw_vect.y, st, sb, LV_DIR_VER);
 8003852:	4602      	mov	r2, r0
 8003854:	8360      	strh	r0, [r4, #26]
            lv_obj_scroll_by(scroll_obj, 0, diff_y + y, LV_ANIM_ON);
 8003856:	2100      	movs	r1, #0
            lv_obj_scroll_by(scroll_obj, x + diff_x, 0, LV_ANIM_ON);
 8003858:	4628      	mov	r0, r5
 800385a:	f002 fca1 	bl	80061a0 <lv_obj_scroll_by>
    if(proc->types.pointer.scroll_throw_vect.x == 0 && proc->types.pointer.scroll_throw_vect.y == 0) {
 800385e:	69a3      	ldr	r3, [r4, #24]
 8003860:	bbcb      	cbnz	r3, 80038d6 <_lv_indev_scroll_throw_handler+0x116>
        if(align_y == LV_SCROLL_SNAP_NONE) {
 8003862:	f1b8 0f00 	cmp.w	r8, #0
 8003866:	d112      	bne.n	800388e <_lv_indev_scroll_throw_handler+0xce>
            lv_coord_t st = lv_obj_get_scroll_top(scroll_obj);
 8003868:	4628      	mov	r0, r5
 800386a:	f002 fb53 	bl	8005f14 <lv_obj_get_scroll_top>
 800386e:	4606      	mov	r6, r0
            lv_coord_t sb = lv_obj_get_scroll_bottom(scroll_obj);
 8003870:	4628      	mov	r0, r5
 8003872:	f002 fb51 	bl	8005f18 <lv_obj_get_scroll_bottom>
            if(st > 0 || sb > 0) {
 8003876:	2e00      	cmp	r6, #0
 8003878:	f300 8096 	bgt.w	80039a8 <_lv_indev_scroll_throw_handler+0x1e8>
 800387c:	2800      	cmp	r0, #0
 800387e:	dd06      	ble.n	800388e <_lv_indev_scroll_throw_handler+0xce>
                if(st < 0) {
 8003880:	b12e      	cbz	r6, 800388e <_lv_indev_scroll_throw_handler+0xce>
                    lv_obj_scroll_by(scroll_obj, 0, st, LV_ANIM_ON);
 8003882:	2301      	movs	r3, #1
 8003884:	4632      	mov	r2, r6
                    lv_obj_scroll_by(scroll_obj, 0, -sb, LV_ANIM_ON);
 8003886:	4641      	mov	r1, r8
 8003888:	4628      	mov	r0, r5
 800388a:	f002 fc89 	bl	80061a0 <lv_obj_scroll_by>
        if(align_x == LV_SCROLL_SNAP_NONE) {
 800388e:	b997      	cbnz	r7, 80038b6 <_lv_indev_scroll_throw_handler+0xf6>
            lv_coord_t sl = lv_obj_get_scroll_left(scroll_obj);
 8003890:	4628      	mov	r0, r5
 8003892:	f002 fb95 	bl	8005fc0 <lv_obj_get_scroll_left>
 8003896:	4606      	mov	r6, r0
            lv_coord_t sr = lv_obj_get_scroll_right(scroll_obj);
 8003898:	4628      	mov	r0, r5
 800389a:	f002 fbfd 	bl	8006098 <lv_obj_get_scroll_right>
            if (sl > 0 || sr > 0) {
 800389e:	2e00      	cmp	r6, #0
 80038a0:	f300 8089 	bgt.w	80039b6 <_lv_indev_scroll_throw_handler+0x1f6>
 80038a4:	2800      	cmp	r0, #0
 80038a6:	dd06      	ble.n	80038b6 <_lv_indev_scroll_throw_handler+0xf6>
                if(sl < 0) {
 80038a8:	b12e      	cbz	r6, 80038b6 <_lv_indev_scroll_throw_handler+0xf6>
                    lv_obj_scroll_by(scroll_obj, sl, 0, LV_ANIM_ON);
 80038aa:	2301      	movs	r3, #1
 80038ac:	463a      	mov	r2, r7
 80038ae:	4631      	mov	r1, r6
                    lv_obj_scroll_by(scroll_obj, -sr, 0, LV_ANIM_ON);
 80038b0:	4628      	mov	r0, r5
 80038b2:	f002 fc75 	bl	80061a0 <lv_obj_scroll_by>
        lv_event_send(scroll_obj, LV_EVENT_SCROLL_END, indev_act);
 80038b6:	464a      	mov	r2, r9
 80038b8:	210a      	movs	r1, #10
 80038ba:	4628      	mov	r0, r5
 80038bc:	f7fe fb04 	bl	8001ec8 <lv_event_send>
        if(proc->reset_query) return;
 80038c0:	7863      	ldrb	r3, [r4, #1]
 80038c2:	f013 0302 	ands.w	r3, r3, #2
        proc->types.pointer.scroll_dir = LV_DIR_NONE;
 80038c6:	bf01      	itttt	eq
 80038c8:	f894 203c 	ldrbeq.w	r2, [r4, #60]	; 0x3c
        proc->types.pointer.scroll_obj = NULL;
 80038cc:	62a3      	streq	r3, [r4, #40]	; 0x28
        proc->types.pointer.scroll_dir = LV_DIR_NONE;
 80038ce:	f363 0203 	bfieq	r2, r3, #0, #4
 80038d2:	f884 203c 	strbeq.w	r2, [r4, #60]	; 0x3c
}
 80038d6:	b005      	add	sp, #20
 80038d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            lv_coord_t diff_y = scroll_throw_predict_y(proc);
 80038dc:	f7ff fb68 	bl	8002fb0 <scroll_throw_predict_x.isra.0>
        if(proc->types.pointer.scroll_sum.y + *diff_y < proc->types.pointer.scroll_area.y1) {
 80038e0:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
            lv_coord_t diff_y = scroll_throw_predict_y(proc);
 80038e4:	4606      	mov	r6, r0
        if(proc->types.pointer.scroll_sum.y + *diff_y < proc->types.pointer.scroll_area.y1) {
 80038e6:	f9b4 0032 	ldrsh.w	r0, [r4, #50]	; 0x32
            lv_coord_t y = find_snap_point_y(scroll_obj, LV_COORD_MIN, LV_COORD_MAX, diff_y);
 80038ea:	4937      	ldr	r1, [pc, #220]	; (80039c8 <_lv_indev_scroll_throw_handler+0x208>)
        if(proc->types.pointer.scroll_sum.y + *diff_y < proc->types.pointer.scroll_area.y1) {
 80038ec:	18f2      	adds	r2, r6, r3
            proc->types.pointer.scroll_throw_vect.y = 0;
 80038ee:	f8a4 b01a 	strh.w	fp, [r4, #26]
        if(proc->types.pointer.scroll_sum.y + *diff_y < proc->types.pointer.scroll_area.y1) {
 80038f2:	4282      	cmp	r2, r0
           *diff_y = proc->types.pointer.scroll_area.y1 - proc->types.pointer.scroll_sum.y;
 80038f4:	bfbc      	itt	lt
 80038f6:	1ac0      	sublt	r0, r0, r3
 80038f8:	b206      	sxthlt	r6, r0
        if(proc->types.pointer.scroll_sum.y + *diff_y > proc->types.pointer.scroll_area.y2) {
 80038fa:	f9b4 0036 	ldrsh.w	r0, [r4, #54]	; 0x36
 80038fe:	18f2      	adds	r2, r6, r3
 8003900:	4282      	cmp	r2, r0
            lv_coord_t y = find_snap_point_y(scroll_obj, LV_COORD_MIN, LV_COORD_MAX, diff_y);
 8003902:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
            *diff_y = proc->types.pointer.scroll_area.y2 - proc->types.pointer.scroll_sum.y;
 8003906:	bfc4      	itt	gt
 8003908:	1ac0      	subgt	r0, r0, r3
 800390a:	b206      	sxthgt	r6, r0
            lv_coord_t y = find_snap_point_y(scroll_obj, LV_COORD_MIN, LV_COORD_MAX, diff_y);
 800390c:	4628      	mov	r0, r5
 800390e:	4633      	mov	r3, r6
 8003910:	f7ff fcae 	bl	8003270 <find_snap_point_y>
            lv_obj_scroll_by(scroll_obj, 0, diff_y + y, LV_ANIM_ON);
 8003914:	1832      	adds	r2, r6, r0
 8003916:	2301      	movs	r3, #1
 8003918:	b212      	sxth	r2, r2
 800391a:	e79c      	b.n	8003856 <_lv_indev_scroll_throw_handler+0x96>
    else if(proc->types.pointer.scroll_dir == LV_DIR_HOR) {
 800391c:	2e03      	cmp	r6, #3
 800391e:	d19e      	bne.n	800385e <_lv_indev_scroll_throw_handler+0x9e>
        proc->types.pointer.scroll_throw_vect.y = 0;
 8003920:	f04f 0b00 	mov.w	fp, #0
 8003924:	f9b4 0018 	ldrsh.w	r0, [r4, #24]
 8003928:	f8a4 b01a 	strh.w	fp, [r4, #26]
        if(align_x == LV_SCROLL_SNAP_NONE) {
 800392c:	b9df      	cbnz	r7, 8003966 <_lv_indev_scroll_throw_handler+0x1a6>
                    proc->types.pointer.scroll_throw_vect.x * (100 - scroll_throw) / 100;
 800392e:	f1ca 0a64 	rsb	sl, sl, #100	; 0x64
 8003932:	2364      	movs	r3, #100	; 0x64
 8003934:	fb00 f00a 	mul.w	r0, r0, sl
 8003938:	fb90 f0f3 	sdiv	r0, r0, r3
            proc->types.pointer.scroll_throw_vect.x =
 800393c:	8320      	strh	r0, [r4, #24]
            lv_coord_t sl = lv_obj_get_scroll_left(scroll_obj);
 800393e:	4628      	mov	r0, r5
 8003940:	f002 fb3e 	bl	8005fc0 <lv_obj_get_scroll_left>
 8003944:	9003      	str	r0, [sp, #12]
            lv_coord_t sr = lv_obj_get_scroll_right(scroll_obj);
 8003946:	4628      	mov	r0, r5
 8003948:	f002 fba6 	bl	8006098 <lv_obj_get_scroll_right>
            proc->types.pointer.scroll_throw_vect.x = elastic_diff(scroll_obj, proc->types.pointer.scroll_throw_vect.x, sl ,sr, LV_DIR_HOR);
 800394c:	9a03      	ldr	r2, [sp, #12]
            lv_coord_t sr = lv_obj_get_scroll_right(scroll_obj);
 800394e:	4603      	mov	r3, r0
            proc->types.pointer.scroll_throw_vect.x = elastic_diff(scroll_obj, proc->types.pointer.scroll_throw_vect.x, sl ,sr, LV_DIR_HOR);
 8003950:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
 8003954:	4628      	mov	r0, r5
 8003956:	9600      	str	r6, [sp, #0]
 8003958:	f7ff fb3d 	bl	8002fd6 <elastic_diff>
            lv_obj_scroll_by(scroll_obj, proc->types.pointer.scroll_throw_vect.x, 0, LV_ANIM_OFF);
 800395c:	463b      	mov	r3, r7
            proc->types.pointer.scroll_throw_vect.x = elastic_diff(scroll_obj, proc->types.pointer.scroll_throw_vect.x, sl ,sr, LV_DIR_HOR);
 800395e:	4601      	mov	r1, r0
            lv_obj_scroll_by(scroll_obj, proc->types.pointer.scroll_throw_vect.x, 0, LV_ANIM_OFF);
 8003960:	463a      	mov	r2, r7
            proc->types.pointer.scroll_throw_vect.x = elastic_diff(scroll_obj, proc->types.pointer.scroll_throw_vect.x, sl ,sr, LV_DIR_HOR);
 8003962:	8320      	strh	r0, [r4, #24]
            lv_obj_scroll_by(scroll_obj, proc->types.pointer.scroll_throw_vect.x, 0, LV_ANIM_OFF);
 8003964:	e778      	b.n	8003858 <_lv_indev_scroll_throw_handler+0x98>
            lv_coord_t diff_x = scroll_throw_predict_x(proc);
 8003966:	f7ff fb23 	bl	8002fb0 <scroll_throw_predict_x.isra.0>
        if(proc->types.pointer.scroll_sum.x + *diff_x < proc->types.pointer.scroll_area.x1) {
 800396a:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
            lv_coord_t diff_x = scroll_throw_predict_x(proc);
 800396e:	4606      	mov	r6, r0
        if(proc->types.pointer.scroll_sum.x + *diff_x < proc->types.pointer.scroll_area.x1) {
 8003970:	f9b4 0030 	ldrsh.w	r0, [r4, #48]	; 0x30
            lv_coord_t x = find_snap_point_x(scroll_obj, LV_COORD_MIN, LV_COORD_MAX, diff_x);
 8003974:	4914      	ldr	r1, [pc, #80]	; (80039c8 <_lv_indev_scroll_throw_handler+0x208>)
        if(proc->types.pointer.scroll_sum.x + *diff_x < proc->types.pointer.scroll_area.x1) {
 8003976:	18f2      	adds	r2, r6, r3
            proc->types.pointer.scroll_throw_vect.x = 0;
 8003978:	f8a4 b018 	strh.w	fp, [r4, #24]
        if(proc->types.pointer.scroll_sum.x + *diff_x < proc->types.pointer.scroll_area.x1) {
 800397c:	4282      	cmp	r2, r0
            *diff_x = proc->types.pointer.scroll_area.x1 - proc->types.pointer.scroll_sum.x;
 800397e:	bfbc      	itt	lt
 8003980:	1ac0      	sublt	r0, r0, r3
 8003982:	b206      	sxthlt	r6, r0
        if(proc->types.pointer.scroll_sum.x + *diff_x > proc->types.pointer.scroll_area.x2) {
 8003984:	f9b4 0034 	ldrsh.w	r0, [r4, #52]	; 0x34
 8003988:	18f2      	adds	r2, r6, r3
 800398a:	4282      	cmp	r2, r0
            lv_coord_t x = find_snap_point_x(scroll_obj, LV_COORD_MIN, LV_COORD_MAX, diff_x);
 800398c:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
            *diff_x = proc->types.pointer.scroll_area.x2 - proc->types.pointer.scroll_sum.x;
 8003990:	bfc4      	itt	gt
 8003992:	1ac0      	subgt	r0, r0, r3
 8003994:	b206      	sxthgt	r6, r0
            lv_coord_t x = find_snap_point_x(scroll_obj, LV_COORD_MIN, LV_COORD_MAX, diff_x);
 8003996:	4628      	mov	r0, r5
 8003998:	4633      	mov	r3, r6
 800399a:	f7ff fbe2 	bl	8003162 <find_snap_point_x>
            lv_obj_scroll_by(scroll_obj, x + diff_x, 0, LV_ANIM_ON);
 800399e:	4430      	add	r0, r6
 80039a0:	2301      	movs	r3, #1
 80039a2:	2200      	movs	r2, #0
 80039a4:	b201      	sxth	r1, r0
 80039a6:	e757      	b.n	8003858 <_lv_indev_scroll_throw_handler+0x98>
                else if(sb < 0) {
 80039a8:	2800      	cmp	r0, #0
 80039aa:	f6bf af70 	bge.w	800388e <_lv_indev_scroll_throw_handler+0xce>
                    lv_obj_scroll_by(scroll_obj, 0, -sb, LV_ANIM_ON);
 80039ae:	4240      	negs	r0, r0
 80039b0:	2301      	movs	r3, #1
 80039b2:	b202      	sxth	r2, r0
 80039b4:	e767      	b.n	8003886 <_lv_indev_scroll_throw_handler+0xc6>
                else if(sr < 0) {
 80039b6:	2800      	cmp	r0, #0
 80039b8:	f6bf af7d 	bge.w	80038b6 <_lv_indev_scroll_throw_handler+0xf6>
                    lv_obj_scroll_by(scroll_obj, -sr, 0, LV_ANIM_ON);
 80039bc:	4240      	negs	r0, r0
 80039be:	2301      	movs	r3, #1
 80039c0:	463a      	mov	r2, r7
 80039c2:	b201      	sxth	r1, r0
 80039c4:	e774      	b.n	80038b0 <_lv_indev_scroll_throw_handler+0xf0>
 80039c6:	bf00      	nop
 80039c8:	ffffa000 	.word	0xffffa000

080039cc <lv_indev_scroll_throw_predict>:
    if(indev == NULL) return 0;
 80039cc:	b1c0      	cbz	r0, 8003a00 <lv_indev_scroll_throw_predict+0x34>
    switch(dir) {
 80039ce:	2903      	cmp	r1, #3
 80039d0:	d00b      	beq.n	80039ea <lv_indev_scroll_throw_predict+0x1e>
 80039d2:	290c      	cmp	r1, #12
 80039d4:	d113      	bne.n	80039fe <lv_indev_scroll_throw_predict+0x32>
        v = indev->proc.types.pointer.scroll_throw_vect_ori.y;
 80039d6:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
    lv_coord_t scroll_throw = indev->driver->scroll_throw;
 80039da:	6802      	ldr	r2, [r0, #0]
        v = v * (100 - scroll_throw) / 100;
 80039dc:	2164      	movs	r1, #100	; 0x64
    lv_coord_t sum = 0;
 80039de:	2000      	movs	r0, #0
    lv_coord_t scroll_throw = indev->driver->scroll_throw;
 80039e0:	7e52      	ldrb	r2, [r2, #25]
        v = v * (100 - scroll_throw) / 100;
 80039e2:	f1c2 0264 	rsb	r2, r2, #100	; 0x64
    while(v) {
 80039e6:	b91b      	cbnz	r3, 80039f0 <lv_indev_scroll_throw_predict+0x24>
 80039e8:	4770      	bx	lr
        v = indev->proc.types.pointer.scroll_throw_vect_ori.x;
 80039ea:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
        break;
 80039ee:	e7f4      	b.n	80039da <lv_indev_scroll_throw_predict+0xe>
        sum += v;
 80039f0:	4418      	add	r0, r3
        v = v * (100 - scroll_throw) / 100;
 80039f2:	4353      	muls	r3, r2
 80039f4:	fb93 f3f1 	sdiv	r3, r3, r1
        sum += v;
 80039f8:	b200      	sxth	r0, r0
        v = v * (100 - scroll_throw) / 100;
 80039fa:	b21b      	sxth	r3, r3
 80039fc:	e7f3      	b.n	80039e6 <lv_indev_scroll_throw_predict+0x1a>
    switch(dir) {
 80039fe:	2000      	movs	r0, #0
}
 8003a00:	4770      	bx	lr

08003a02 <lv_obj_destructor>:

static void lv_obj_destructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
    LV_UNUSED(class_p);

    if(obj->spec_attr) {
 8003a02:	688b      	ldr	r3, [r1, #8]
{
 8003a04:	b510      	push	{r4, lr}
 8003a06:	460c      	mov	r4, r1
    if(obj->spec_attr) {
 8003a08:	b19b      	cbz	r3, 8003a32 <lv_obj_destructor+0x30>
        if(obj->spec_attr->children) {
 8003a0a:	6818      	ldr	r0, [r3, #0]
 8003a0c:	b120      	cbz	r0, 8003a18 <lv_obj_destructor+0x16>
            lv_mem_free(obj->spec_attr->children);
 8003a0e:	f013 fe91 	bl	8017734 <lv_mem_free>
            obj->spec_attr->children = NULL;
 8003a12:	68a3      	ldr	r3, [r4, #8]
 8003a14:	2200      	movs	r2, #0
 8003a16:	601a      	str	r2, [r3, #0]
        }
        if(obj->spec_attr->event_dsc) {
 8003a18:	68a3      	ldr	r3, [r4, #8]
 8003a1a:	68d8      	ldr	r0, [r3, #12]
 8003a1c:	b120      	cbz	r0, 8003a28 <lv_obj_destructor+0x26>
            lv_mem_free(obj->spec_attr->event_dsc);
 8003a1e:	f013 fe89 	bl	8017734 <lv_mem_free>
            obj->spec_attr->event_dsc = NULL;
 8003a22:	68a3      	ldr	r3, [r4, #8]
 8003a24:	2200      	movs	r2, #0
 8003a26:	60da      	str	r2, [r3, #12]
        }

        lv_mem_free(obj->spec_attr);
 8003a28:	68a0      	ldr	r0, [r4, #8]
 8003a2a:	f013 fe83 	bl	8017734 <lv_mem_free>
        obj->spec_attr = NULL;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	60a3      	str	r3, [r4, #8]
    }

}
 8003a32:	bd10      	pop	{r4, pc}

08003a34 <lv_obj_set_state>:
 * @param obj       pointer to an object
 * @param state     the new state
 */
static void lv_obj_set_state(lv_obj_t * obj, lv_state_t new_state)
{
    if(obj->state == new_state) return;
 8003a34:	8c03      	ldrh	r3, [r0, #32]
 8003a36:	428b      	cmp	r3, r1
{
 8003a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a3c:	4604      	mov	r4, r0
 8003a3e:	4688      	mov	r8, r1
 8003a40:	ed2d 8b02 	vpush	{d8}
    if(obj->state == new_state) return;
 8003a44:	ee08 3a10 	vmov	s16, r3
{
 8003a48:	b08b      	sub	sp, #44	; 0x2c
    if(obj->state == new_state) return;
 8003a4a:	f000 80e9 	beq.w	8003c20 <lv_obj_set_state+0x1ec>
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_state_t prev_state = obj->state;
    obj->state = new_state;

    _lv_style_state_cmp_t cmp_res = _lv_obj_style_state_compare(obj, prev_state, new_state);
 8003a4e:	460a      	mov	r2, r1
    obj->state = new_state;
 8003a50:	8401      	strh	r1, [r0, #32]
    _lv_style_state_cmp_t cmp_res = _lv_obj_style_state_compare(obj, prev_state, new_state);
 8003a52:	4619      	mov	r1, r3
 8003a54:	f003 fe8e 	bl	8007774 <_lv_obj_style_state_compare>
    /*If there is no difference in styles there is nothing else to do*/
    if(cmp_res == _LV_STYLE_STATE_CMP_SAME) return;
 8003a58:	9002      	str	r0, [sp, #8]
 8003a5a:	2800      	cmp	r0, #0
 8003a5c:	f000 80e0 	beq.w	8003c20 <lv_obj_set_state+0x1ec>

    _lv_obj_style_transition_dsc_t * ts = lv_mem_buf_get(sizeof(_lv_obj_style_transition_dsc_t) * STYLE_TRANSITION_MAX);
 8003a60:	f44f 7020 	mov.w	r0, #640	; 0x280
    lv_memset_00(ts, sizeof(_lv_obj_style_transition_dsc_t) * STYLE_TRANSITION_MAX);
    uint32_t tsi = 0;
    uint32_t i;
    for(i = 0; i < obj->style_cnt && tsi < STYLE_TRANSITION_MAX; i++) {
 8003a64:	f04f 0900 	mov.w	r9, #0
    _lv_obj_style_transition_dsc_t * ts = lv_mem_buf_get(sizeof(_lv_obj_style_transition_dsc_t) * STYLE_TRANSITION_MAX);
 8003a68:	f014 f816 	bl	8017a98 <lv_mem_buf_get>
    lv_memset_00(ts, sizeof(_lv_obj_style_transition_dsc_t) * STYLE_TRANSITION_MAX);
 8003a6c:	f44f 7120 	mov.w	r1, #640	; 0x280
    _lv_obj_style_transition_dsc_t * ts = lv_mem_buf_get(sizeof(_lv_obj_style_transition_dsc_t) * STYLE_TRANSITION_MAX);
 8003a70:	4607      	mov	r7, r0
    uint32_t tsi = 0;
 8003a72:	464d      	mov	r5, r9
    lv_memset_00(ts, sizeof(_lv_obj_style_transition_dsc_t) * STYLE_TRANSITION_MAX);
 8003a74:	f014 f85e 	bl	8017b34 <lv_memset_00>
        _lv_obj_style_t * obj_style = &obj->styles[i];
        lv_state_t state_act = lv_obj_style_get_selector_state(obj->styles[i].selector);
        lv_part_t part_act = lv_obj_style_get_selector_part(obj->styles[i].selector);
        if(state_act & (~new_state)) continue; /*Skip unrelated styles*/
 8003a78:	ea6f 0308 	mvn.w	r3, r8
 8003a7c:	9306      	str	r3, [sp, #24]
    for(i = 0; i < obj->style_cnt && tsi < STYLE_TRANSITION_MAX; i++) {
 8003a7e:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8003a80:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 8003a84:	454b      	cmp	r3, r9
 8003a86:	d901      	bls.n	8003a8c <lv_obj_set_state+0x58>
 8003a88:	2d1f      	cmp	r5, #31
 8003a8a:	d915      	bls.n	8003ab8 <lv_obj_set_state+0x84>
 8003a8c:	2314      	movs	r3, #20
 8003a8e:	463e      	mov	r6, r7
 8003a90:	fb03 7505 	mla	r5, r3, r5, r7
                tsi++;
            }
        }
    }

    for(i = 0;i < tsi; i++) {
 8003a94:	42ae      	cmp	r6, r5
 8003a96:	f040 809c 	bne.w	8003bd2 <lv_obj_set_state+0x19e>
        lv_part_t part_act = lv_obj_style_get_selector_part(ts[i].selector);
        _lv_obj_style_create_transition(obj, part_act, prev_state, new_state, &ts[i]);
    }

    lv_mem_buf_release(ts);
 8003a9a:	4638      	mov	r0, r7
 8003a9c:	f013 fe58 	bl	8017750 <lv_mem_buf_release>

    if(cmp_res == _LV_STYLE_STATE_CMP_DIFF_REDRAW) {
 8003aa0:	9b02      	ldr	r3, [sp, #8]
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	f040 80a2 	bne.w	8003bec <lv_obj_set_state+0x1b8>
        lv_obj_invalidate(obj);
 8003aa8:	4620      	mov	r0, r4
        lv_obj_refresh_style(obj, LV_PART_ANY, LV_STYLE_PROP_ANY);
    }
    else if(cmp_res == _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD) {
        lv_obj_refresh_ext_draw_size(obj);
    }
}
 8003aaa:	b00b      	add	sp, #44	; 0x2c
 8003aac:	ecbd 8b02 	vpop	{d8}
 8003ab0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        lv_obj_invalidate(obj);
 8003ab4:	f001 bb30 	b.w	8005118 <lv_obj_invalidate>
        _lv_obj_style_t * obj_style = &obj->styles[i];
 8003ab8:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 8003abc:	ea4f 06c9 	mov.w	r6, r9, lsl #3
 8003ac0:	eb0a 0bc9 	add.w	fp, sl, r9, lsl #3
        lv_state_t state_act = lv_obj_style_get_selector_state(obj->styles[i].selector);
 8003ac4:	f8db 0004 	ldr.w	r0, [fp, #4]
 8003ac8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8003acc:	f003 ff6a 	bl	80079a4 <lv_obj_style_get_selector_state>
        lv_part_t part_act = lv_obj_style_get_selector_part(obj->styles[i].selector);
 8003ad0:	68e3      	ldr	r3, [r4, #12]
        lv_state_t state_act = lv_obj_style_get_selector_state(obj->styles[i].selector);
 8003ad2:	9003      	str	r0, [sp, #12]
        lv_part_t part_act = lv_obj_style_get_selector_part(obj->styles[i].selector);
 8003ad4:	4433      	add	r3, r6
 8003ad6:	6858      	ldr	r0, [r3, #4]
 8003ad8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8003adc:	f003 ff64 	bl	80079a8 <lv_obj_style_get_selector_part>
        if(state_act & (~new_state)) continue; /*Skip unrelated styles*/
 8003ae0:	9b06      	ldr	r3, [sp, #24]
 8003ae2:	9a03      	ldr	r2, [sp, #12]
        lv_part_t part_act = lv_obj_style_get_selector_part(obj->styles[i].selector);
 8003ae4:	9004      	str	r0, [sp, #16]
        if(state_act & (~new_state)) continue; /*Skip unrelated styles*/
 8003ae6:	4213      	tst	r3, r2
 8003ae8:	d10d      	bne.n	8003b06 <lv_obj_set_state+0xd2>
        if(obj_style->is_trans) continue;
 8003aea:	f89b 3007 	ldrb.w	r3, [fp, #7]
 8003aee:	f013 0302 	ands.w	r3, r3, #2
 8003af2:	d108      	bne.n	8003b06 <lv_obj_set_state+0xd2>
        if(lv_style_get_prop_inlined(obj_style->style, LV_STYLE_TRANSITION, &v) == false) continue;
 8003af4:	f85a 1006 	ldr.w	r1, [sl, r6]
 * @note For performance reasons there are no sanity check on `style`
 * @note This function is the same as ::lv_style_get_prop but inlined. Use it only on performance critical places
 */
static inline lv_res_t lv_style_get_prop_inlined(lv_style_t * style, lv_style_prop_t prop, lv_style_value_t * value)
{
    if(style->is_const) {
 8003af8:	f991 2005 	ldrsb.w	r2, [r1, #5]
 8003afc:	2a00      	cmp	r2, #0
 8003afe:	da16      	bge.n	8003b2e <lv_obj_set_state+0xfa>
        const lv_style_const_prop_t *const_prop;
        for(const_prop = style->v_p.const_props; const_prop->prop != LV_STYLE_PROP_INV; const_prop++) {
 8003b00:	680b      	ldr	r3, [r1, #0]
 8003b02:	881a      	ldrh	r2, [r3, #0]
 8003b04:	b912      	cbnz	r2, 8003b0c <lv_obj_set_state+0xd8>
    for(i = 0; i < obj->style_cnt && tsi < STYLE_TRANSITION_MAX; i++) {
 8003b06:	f109 0901 	add.w	r9, r9, #1
 8003b0a:	e7b8      	b.n	8003a7e <lv_obj_set_state+0x4a>
            if(const_prop->prop == prop) {
 8003b0c:	2a67      	cmp	r2, #103	; 0x67
 8003b0e:	d10c      	bne.n	8003b2a <lv_obj_set_state+0xf6>
                *value = const_prop->value;
 8003b10:	685e      	ldr	r6, [r3, #4]
        for(j = 0; tr->props[j] != 0 && tsi < STYLE_TRANSITION_MAX; j++) {
 8003b12:	f04f 0a00 	mov.w	sl, #0
 8003b16:	6833      	ldr	r3, [r6, #0]
 8003b18:	f833 300a 	ldrh.w	r3, [r3, sl]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d0f2      	beq.n	8003b06 <lv_obj_set_state+0xd2>
 8003b20:	2d1f      	cmp	r5, #31
 8003b22:	d8f0      	bhi.n	8003b06 <lv_obj_set_state+0xd2>
 8003b24:	463a      	mov	r2, r7
            for(t = 0; t < tsi; t++) {
 8003b26:	2300      	movs	r3, #0
 8003b28:	e039      	b.n	8003b9e <lv_obj_set_state+0x16a>
        for(const_prop = style->v_p.const_props; const_prop->prop != LV_STYLE_PROP_INV; const_prop++) {
 8003b2a:	3308      	adds	r3, #8
 8003b2c:	e7e9      	b.n	8003b02 <lv_obj_set_state+0xce>
            }
        }
        return LV_RES_INV;
    }

    if(style->prop_cnt == 0) return LV_RES_INV;
 8003b2e:	79ca      	ldrb	r2, [r1, #7]
 8003b30:	2a00      	cmp	r2, #0
 8003b32:	d0e8      	beq.n	8003b06 <lv_obj_set_state+0xd2>

    if(style->prop_cnt > 1) {
 8003b34:	2a01      	cmp	r2, #1
 8003b36:	d90d      	bls.n	8003b54 <lv_obj_set_state+0x120>
        uint8_t * tmp = style->v_p.values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 8003b38:	6809      	ldr	r1, [r1, #0]
        uint16_t * props = (uint16_t *)tmp;
        uint32_t i;
        for(i = 0; i < style->prop_cnt; i++) {
 8003b3a:	eb01 0082 	add.w	r0, r1, r2, lsl #2
            if(props[i] == prop) {
 8003b3e:	f830 6b02 	ldrh.w	r6, [r0], #2
 8003b42:	2e67      	cmp	r6, #103	; 0x67
 8003b44:	d102      	bne.n	8003b4c <lv_obj_set_state+0x118>
                lv_style_value_t * values = (lv_style_value_t *)style->v_p.values_and_props;
                *value = values[i];
 8003b46:	f851 6023 	ldr.w	r6, [r1, r3, lsl #2]
                return LV_RES_OK;
 8003b4a:	e7e2      	b.n	8003b12 <lv_obj_set_state+0xde>
        for(i = 0; i < style->prop_cnt; i++) {
 8003b4c:	3301      	adds	r3, #1
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	d8f5      	bhi.n	8003b3e <lv_obj_set_state+0x10a>
 8003b52:	e7d8      	b.n	8003b06 <lv_obj_set_state+0xd2>
            }
        }
    } else if(style->prop1 == prop) {
 8003b54:	888b      	ldrh	r3, [r1, #4]
 8003b56:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003b5a:	2b67      	cmp	r3, #103	; 0x67
 8003b5c:	d1d3      	bne.n	8003b06 <lv_obj_set_state+0xd2>
        *value = style->v_p.value1;
 8003b5e:	680e      	ldr	r6, [r1, #0]
        return LV_RES_OK;
 8003b60:	e7d7      	b.n	8003b12 <lv_obj_set_state+0xde>
                lv_style_selector_t selector = ts[t].selector;
 8003b62:	6851      	ldr	r1, [r2, #4]
 8003b64:	9309      	str	r3, [sp, #36]	; 0x24
                lv_state_t state_ts = lv_obj_style_get_selector_state(selector);
 8003b66:	4608      	mov	r0, r1
                lv_style_selector_t selector = ts[t].selector;
 8003b68:	9208      	str	r2, [sp, #32]
                lv_state_t state_ts = lv_obj_style_get_selector_state(selector);
 8003b6a:	9107      	str	r1, [sp, #28]
 8003b6c:	f003 ff1a 	bl	80079a4 <lv_obj_style_get_selector_state>
                lv_part_t part_ts = lv_obj_style_get_selector_part(selector);
 8003b70:	9907      	ldr	r1, [sp, #28]
                lv_state_t state_ts = lv_obj_style_get_selector_state(selector);
 8003b72:	9005      	str	r0, [sp, #20]
                lv_part_t part_ts = lv_obj_style_get_selector_part(selector);
 8003b74:	4608      	mov	r0, r1
 8003b76:	f003 ff17 	bl	80079a8 <lv_obj_style_get_selector_part>
                if(ts[t].prop == tr->props[j] && part_ts == part_act && state_ts >= state_act) break;
 8003b7a:	6831      	ldr	r1, [r6, #0]
 8003b7c:	9a08      	ldr	r2, [sp, #32]
 8003b7e:	f831 100a 	ldrh.w	r1, [r1, sl]
 8003b82:	f8b2 c008 	ldrh.w	ip, [r2, #8]
 8003b86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b88:	458c      	cmp	ip, r1
 8003b8a:	d106      	bne.n	8003b9a <lv_obj_set_state+0x166>
 8003b8c:	9904      	ldr	r1, [sp, #16]
 8003b8e:	4281      	cmp	r1, r0
 8003b90:	d103      	bne.n	8003b9a <lv_obj_set_state+0x166>
 8003b92:	9903      	ldr	r1, [sp, #12]
 8003b94:	9805      	ldr	r0, [sp, #20]
 8003b96:	4281      	cmp	r1, r0
 8003b98:	d918      	bls.n	8003bcc <lv_obj_set_state+0x198>
            for(t = 0; t < tsi; t++) {
 8003b9a:	3301      	adds	r3, #1
 8003b9c:	3214      	adds	r2, #20
 8003b9e:	429d      	cmp	r5, r3
 8003ba0:	d1df      	bne.n	8003b62 <lv_obj_set_state+0x12e>
                ts[tsi].time = tr->time;
 8003ba2:	2314      	movs	r3, #20
 8003ba4:	68f0      	ldr	r0, [r6, #12]
 8003ba6:	6831      	ldr	r1, [r6, #0]
 8003ba8:	436b      	muls	r3, r5
                tsi++;
 8003baa:	3501      	adds	r5, #1
                ts[tsi].time = tr->time;
 8003bac:	52f8      	strh	r0, [r7, r3]
 8003bae:	18fa      	adds	r2, r7, r3
                ts[tsi].delay = tr->delay;
 8003bb0:	6933      	ldr	r3, [r6, #16]
 8003bb2:	8053      	strh	r3, [r2, #2]
                ts[tsi].path_cb = tr->path_xcb;
 8003bb4:	68b3      	ldr	r3, [r6, #8]
 8003bb6:	60d3      	str	r3, [r2, #12]
                ts[tsi].prop = tr->props[j];
 8003bb8:	f831 300a 	ldrh.w	r3, [r1, sl]
 8003bbc:	8113      	strh	r3, [r2, #8]
                ts[tsi].user_data = tr->user_data;
 8003bbe:	6873      	ldr	r3, [r6, #4]
 8003bc0:	6113      	str	r3, [r2, #16]
                ts[tsi].selector = obj_style->selector;
 8003bc2:	f8db 3004 	ldr.w	r3, [fp, #4]
 8003bc6:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8003bca:	6053      	str	r3, [r2, #4]
        for(j = 0; tr->props[j] != 0 && tsi < STYLE_TRANSITION_MAX; j++) {
 8003bcc:	f10a 0a02 	add.w	sl, sl, #2
 8003bd0:	e7a1      	b.n	8003b16 <lv_obj_set_state+0xe2>
        lv_part_t part_act = lv_obj_style_get_selector_part(ts[i].selector);
 8003bd2:	6870      	ldr	r0, [r6, #4]
 8003bd4:	f003 fee8 	bl	80079a8 <lv_obj_style_get_selector_part>
        _lv_obj_style_create_transition(obj, part_act, prev_state, new_state, &ts[i]);
 8003bd8:	9600      	str	r6, [sp, #0]
        lv_part_t part_act = lv_obj_style_get_selector_part(ts[i].selector);
 8003bda:	4601      	mov	r1, r0
        _lv_obj_style_create_transition(obj, part_act, prev_state, new_state, &ts[i]);
 8003bdc:	4643      	mov	r3, r8
 8003bde:	ee18 2a10 	vmov	r2, s16
 8003be2:	4620      	mov	r0, r4
 8003be4:	3614      	adds	r6, #20
 8003be6:	f003 fd2b 	bl	8007640 <_lv_obj_style_create_transition>
    for(i = 0;i < tsi; i++) {
 8003bea:	e753      	b.n	8003a94 <lv_obj_set_state+0x60>
    else if(cmp_res == _LV_STYLE_STATE_CMP_DIFF_LAYOUT) {
 8003bec:	9b02      	ldr	r3, [sp, #8]
 8003bee:	2b03      	cmp	r3, #3
 8003bf0:	d10b      	bne.n	8003c0a <lv_obj_set_state+0x1d6>
        lv_obj_refresh_style(obj, LV_PART_ANY, LV_STYLE_PROP_ANY);
 8003bf2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003bf6:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8003bfa:	4620      	mov	r0, r4
}
 8003bfc:	b00b      	add	sp, #44	; 0x2c
 8003bfe:	ecbd 8b02 	vpop	{d8}
 8003c02:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        lv_obj_refresh_style(obj, LV_PART_ANY, LV_STYLE_PROP_ANY);
 8003c06:	f003 b92b 	b.w	8006e60 <lv_obj_refresh_style>
    else if(cmp_res == _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD) {
 8003c0a:	9b02      	ldr	r3, [sp, #8]
 8003c0c:	2b02      	cmp	r3, #2
 8003c0e:	d107      	bne.n	8003c20 <lv_obj_set_state+0x1ec>
        lv_obj_refresh_ext_draw_size(obj);
 8003c10:	4620      	mov	r0, r4
}
 8003c12:	b00b      	add	sp, #44	; 0x2c
 8003c14:	ecbd 8b02 	vpop	{d8}
 8003c18:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        lv_obj_refresh_ext_draw_size(obj);
 8003c1c:	f000 bf91 	b.w	8004b42 <lv_obj_refresh_ext_draw_size>
}
 8003c20:	b00b      	add	sp, #44	; 0x2c
 8003c22:	ecbd 8b02 	vpop	{d8}
 8003c26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003c2a <lv_obj_constructor>:
{
 8003c2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    lv_obj_t * parent = obj->parent;
 8003c2e:	684f      	ldr	r7, [r1, #4]
{
 8003c30:	460c      	mov	r4, r1
    if(parent) {
 8003c32:	b38f      	cbz	r7, 8003c98 <lv_obj_constructor+0x6e>
        lv_coord_t sl = lv_obj_get_scroll_left(parent);
 8003c34:	4638      	mov	r0, r7
 8003c36:	f002 f9c3 	bl	8005fc0 <lv_obj_get_scroll_left>
 8003c3a:	4680      	mov	r8, r0
        lv_coord_t st = lv_obj_get_scroll_top(parent);
 8003c3c:	4638      	mov	r0, r7
 8003c3e:	f002 f969 	bl	8005f14 <lv_obj_get_scroll_top>
        obj->coords.y1 = parent->coords.y1 + lv_obj_get_style_pad_top(parent, LV_PART_MAIN) - st;
 8003c42:	8afe      	ldrh	r6, [r7, #22]
        lv_coord_t st = lv_obj_get_scroll_top(parent);
 8003c44:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8003c46:	f241 0210 	movw	r2, #4112	; 0x1010
 8003c4a:	2100      	movs	r1, #0
 8003c4c:	4638      	mov	r0, r7
 8003c4e:	f003 fb8b 	bl	8007368 <lv_obj_get_style_prop>
        obj->coords.y1 = parent->coords.y1 + lv_obj_get_style_pad_top(parent, LV_PART_MAIN) - st;
 8003c52:	4406      	add	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8003c54:	f241 0212 	movw	r2, #4114	; 0x1012
 8003c58:	2100      	movs	r1, #0
 8003c5a:	1b73      	subs	r3, r6, r5
        obj->coords.x1  = parent->coords.x1 + lv_obj_get_style_pad_left(parent, LV_PART_MAIN) - sl;
 8003c5c:	8abd      	ldrh	r5, [r7, #20]
 8003c5e:	4638      	mov	r0, r7
        obj->coords.y1 = parent->coords.y1 + lv_obj_get_style_pad_top(parent, LV_PART_MAIN) - st;
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	82e3      	strh	r3, [r4, #22]
        obj->coords.y2 = obj->coords.y1 - 1;
 8003c64:	3b01      	subs	r3, #1
 8003c66:	8363      	strh	r3, [r4, #26]
 8003c68:	f003 fb7e 	bl	8007368 <lv_obj_get_style_prop>
        obj->coords.x1  = parent->coords.x1 + lv_obj_get_style_pad_left(parent, LV_PART_MAIN) - sl;
 8003c6c:	4405      	add	r5, r0
    if(parent) obj->flags |= LV_OBJ_FLAG_SCROLL_CHAIN;
 8003c6e:	f640 5302 	movw	r3, #3330	; 0xd02
        obj->coords.x1  = parent->coords.x1 + lv_obj_get_style_pad_left(parent, LV_PART_MAIN) - sl;
 8003c72:	eba5 0008 	sub.w	r0, r5, r8
 8003c76:	b280      	uxth	r0, r0
 8003c78:	82a0      	strh	r0, [r4, #20]
        obj->coords.x2  = obj->coords.x1 - 1;
 8003c7a:	3801      	subs	r0, #1
 8003c7c:	8320      	strh	r0, [r4, #24]
    if(parent) obj->flags |= LV_OBJ_FLAG_SCROLL_CHAIN;
 8003c7e:	61e3      	str	r3, [r4, #28]
    obj->flags |= LV_OBJ_FLAG_CLICK_FOCUSABLE;
 8003c80:	69e3      	ldr	r3, [r4, #28]
    if(parent) obj->flags |= LV_OBJ_FLAG_GESTURE_BUBBLE;
 8003c82:	b927      	cbnz	r7, 8003c8e <lv_obj_constructor+0x64>
    obj->flags |= LV_OBJ_FLAG_SCROLL_MOMENTUM;
 8003c84:	f043 0374 	orr.w	r3, r3, #116	; 0x74
    if(parent) obj->flags |= LV_OBJ_FLAG_GESTURE_BUBBLE;
 8003c88:	61e3      	str	r3, [r4, #28]
}
 8003c8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(parent) obj->flags |= LV_OBJ_FLAG_GESTURE_BUBBLE;
 8003c8e:	f443 5301 	orr.w	r3, r3, #8256	; 0x2040
 8003c92:	f043 0334 	orr.w	r3, r3, #52	; 0x34
 8003c96:	e7f7      	b.n	8003c88 <lv_obj_constructor+0x5e>
    obj->flags |= LV_OBJ_FLAG_SNAPABLE;
 8003c98:	f240 4302 	movw	r3, #1026	; 0x402
 8003c9c:	e7ef      	b.n	8003c7e <lv_obj_constructor+0x54>
	...

08003ca0 <lv_init>:
{
 8003ca0:	b510      	push	{r4, lr}
    if(lv_initialized) {
 8003ca2:	4c10      	ldr	r4, [pc, #64]	; (8003ce4 <lv_init+0x44>)
 8003ca4:	7823      	ldrb	r3, [r4, #0]
 8003ca6:	b9e3      	cbnz	r3, 8003ce2 <lv_init+0x42>
    lv_mem_init();
 8003ca8:	f013 fd36 	bl	8017718 <lv_mem_init>
    _lv_timer_core_init();
 8003cac:	f014 fcee 	bl	801868c <_lv_timer_core_init>
    _lv_fs_init();
 8003cb0:	f013 fb22 	bl	80172f8 <_lv_fs_init>
    _lv_anim_core_init();
 8003cb4:	f012 ffa8 	bl	8016c08 <_lv_anim_core_init>
    _lv_group_init();
 8003cb8:	f7fe f9fc 	bl	80020b4 <_lv_group_init>
    _lv_obj_style_init();
 8003cbc:	f003 f8ca 	bl	8006e54 <_lv_obj_style_init>
    _lv_ll_init(&LV_GC_ROOT(_lv_disp_ll), sizeof(lv_disp_t));
 8003cc0:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8003cc4:	4808      	ldr	r0, [pc, #32]	; (8003ce8 <lv_init+0x48>)
 8003cc6:	f013 fbb8 	bl	801743a <_lv_ll_init>
    _lv_ll_init(&LV_GC_ROOT(_lv_indev_ll), sizeof(lv_indev_t));
 8003cca:	2158      	movs	r1, #88	; 0x58
 8003ccc:	4807      	ldr	r0, [pc, #28]	; (8003cec <lv_init+0x4c>)
 8003cce:	f013 fbb4 	bl	801743a <_lv_ll_init>
    _lv_refr_init();
 8003cd2:	f004 fae1 	bl	8008298 <_lv_refr_init>
    _lv_img_decoder_init();
 8003cd6:	f00b fb0b 	bl	800f2f0 <_lv_img_decoder_init>
    lv_extra_init();
 8003cda:	f00c fd8f 	bl	80107fc <lv_extra_init>
    lv_initialized = true;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	7023      	strb	r3, [r4, #0]
}
 8003ce2:	bd10      	pop	{r4, pc}
 8003ce4:	200029a8 	.word	0x200029a8
 8003ce8:	2000ae08 	.word	0x2000ae08
 8003cec:	2000adf0 	.word	0x2000adf0

08003cf0 <lv_obj_create>:
{
 8003cf0:	4601      	mov	r1, r0
    lv_obj_t * obj = lv_obj_class_create_obj(MY_CLASS, parent);
 8003cf2:	4804      	ldr	r0, [pc, #16]	; (8003d04 <lv_obj_create+0x14>)
{
 8003cf4:	b510      	push	{r4, lr}
    lv_obj_t * obj = lv_obj_class_create_obj(MY_CLASS, parent);
 8003cf6:	f000 fb65 	bl	80043c4 <lv_obj_class_create_obj>
 8003cfa:	4604      	mov	r4, r0
    lv_obj_class_init_obj(obj);
 8003cfc:	f000 fbef 	bl	80044de <lv_obj_class_init_obj>
}
 8003d00:	4620      	mov	r0, r4
 8003d02:	bd10      	pop	{r4, pc}
 8003d04:	08024fa8 	.word	0x08024fa8

08003d08 <lv_obj_add_flag>:
{
 8003d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d0a:	460d      	mov	r5, r1
 8003d0c:	4604      	mov	r4, r0
    bool was_on_layout = lv_obj_is_layout_positioned(obj);
 8003d0e:	f000 ffb7 	bl	8004c80 <lv_obj_is_layout_positioned>
 8003d12:	4606      	mov	r6, r0
    if(f & LV_OBJ_FLAG_HIDDEN) lv_obj_invalidate(obj);
 8003d14:	f015 0701 	ands.w	r7, r5, #1
 8003d18:	d002      	beq.n	8003d20 <lv_obj_add_flag+0x18>
 8003d1a:	4620      	mov	r0, r4
 8003d1c:	f001 f9fc 	bl	8005118 <lv_obj_invalidate>
    obj->flags |= f;
 8003d20:	69e3      	ldr	r3, [r4, #28]
 8003d22:	432b      	orrs	r3, r5
 8003d24:	61e3      	str	r3, [r4, #28]
    if(f & LV_OBJ_FLAG_HIDDEN) {
 8003d26:	b117      	cbz	r7, 8003d2e <lv_obj_add_flag+0x26>
        lv_obj_invalidate(obj);
 8003d28:	4620      	mov	r0, r4
 8003d2a:	f001 f9f5 	bl	8005118 <lv_obj_invalidate>
    if((was_on_layout != lv_obj_is_layout_positioned(obj)) || (f & (LV_OBJ_FLAG_LAYOUT_1 |  LV_OBJ_FLAG_LAYOUT_2))) {
 8003d2e:	4620      	mov	r0, r4
 8003d30:	f000 ffa6 	bl	8004c80 <lv_obj_is_layout_positioned>
 8003d34:	42b0      	cmp	r0, r6
 8003d36:	d102      	bne.n	8003d3e <lv_obj_add_flag+0x36>
 8003d38:	f015 7fc0 	tst.w	r5, #25165824	; 0x1800000
 8003d3c:	d006      	beq.n	8003d4c <lv_obj_add_flag+0x44>
        lv_obj_mark_layout_as_dirty(lv_obj_get_parent(obj));
 8003d3e:	4620      	mov	r0, r4
 8003d40:	f003 fe5c 	bl	80079fc <lv_obj_get_parent>
}
 8003d44:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        lv_obj_mark_layout_as_dirty(lv_obj_get_parent(obj));
 8003d48:	f000 bffb 	b.w	8004d42 <lv_obj_mark_layout_as_dirty>
}
 8003d4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003d4e <lv_obj_clear_flag>:
{
 8003d4e:	b570      	push	{r4, r5, r6, lr}
 8003d50:	4604      	mov	r4, r0
 8003d52:	460d      	mov	r5, r1
    bool was_on_layout = lv_obj_is_layout_positioned(obj);
 8003d54:	f000 ff94 	bl	8004c80 <lv_obj_is_layout_positioned>
 8003d58:	4606      	mov	r6, r0
    obj->flags &= (~f);
 8003d5a:	69e3      	ldr	r3, [r4, #28]
 8003d5c:	ea23 0305 	bic.w	r3, r3, r5
 8003d60:	61e3      	str	r3, [r4, #28]
    if(f & LV_OBJ_FLAG_HIDDEN) {
 8003d62:	07eb      	lsls	r3, r5, #31
 8003d64:	d50b      	bpl.n	8003d7e <lv_obj_clear_flag+0x30>
        lv_obj_invalidate(obj);
 8003d66:	4620      	mov	r0, r4
 8003d68:	f001 f9d6 	bl	8005118 <lv_obj_invalidate>
        if(lv_obj_is_layout_positioned(obj)) {
 8003d6c:	4620      	mov	r0, r4
 8003d6e:	f000 ff87 	bl	8004c80 <lv_obj_is_layout_positioned>
 8003d72:	b120      	cbz	r0, 8003d7e <lv_obj_clear_flag+0x30>
            lv_obj_mark_layout_as_dirty(lv_obj_get_parent(obj));
 8003d74:	4620      	mov	r0, r4
 8003d76:	f003 fe41 	bl	80079fc <lv_obj_get_parent>
 8003d7a:	f000 ffe2 	bl	8004d42 <lv_obj_mark_layout_as_dirty>
    if((was_on_layout != lv_obj_is_layout_positioned(obj)) || (f & (LV_OBJ_FLAG_LAYOUT_1 |  LV_OBJ_FLAG_LAYOUT_2))) {
 8003d7e:	4620      	mov	r0, r4
 8003d80:	f000 ff7e 	bl	8004c80 <lv_obj_is_layout_positioned>
 8003d84:	42b0      	cmp	r0, r6
 8003d86:	d102      	bne.n	8003d8e <lv_obj_clear_flag+0x40>
 8003d88:	f015 7fc0 	tst.w	r5, #25165824	; 0x1800000
 8003d8c:	d006      	beq.n	8003d9c <lv_obj_clear_flag+0x4e>
        lv_obj_mark_layout_as_dirty(lv_obj_get_parent(obj));
 8003d8e:	4620      	mov	r0, r4
 8003d90:	f003 fe34 	bl	80079fc <lv_obj_get_parent>
}
 8003d94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        lv_obj_mark_layout_as_dirty(lv_obj_get_parent(obj));
 8003d98:	f000 bfd3 	b.w	8004d42 <lv_obj_mark_layout_as_dirty>
}
 8003d9c:	bd70      	pop	{r4, r5, r6, pc}

08003d9e <lv_obj_add_state>:
{
 8003d9e:	460b      	mov	r3, r1
    lv_state_t new_state = obj->state | state;
 8003da0:	8c02      	ldrh	r2, [r0, #32]
    if(obj->state != new_state) {
 8003da2:	4393      	bics	r3, r2
    lv_state_t new_state = obj->state | state;
 8003da4:	ea42 0101 	orr.w	r1, r2, r1
    if(obj->state != new_state) {
 8003da8:	d001      	beq.n	8003dae <lv_obj_add_state+0x10>
        lv_obj_set_state(obj, new_state);
 8003daa:	f7ff be43 	b.w	8003a34 <lv_obj_set_state>
}
 8003dae:	4770      	bx	lr

08003db0 <lv_obj_clear_state>:
{
 8003db0:	460a      	mov	r2, r1
    lv_state_t new_state = obj->state & (~state);
 8003db2:	8c03      	ldrh	r3, [r0, #32]
    if(obj->state != new_state) {
 8003db4:	421a      	tst	r2, r3
    lv_state_t new_state = obj->state & (~state);
 8003db6:	ea23 0101 	bic.w	r1, r3, r1
    if(obj->state != new_state) {
 8003dba:	d001      	beq.n	8003dc0 <lv_obj_clear_state+0x10>
        lv_obj_set_state(obj, new_state);
 8003dbc:	f7ff be3a 	b.w	8003a34 <lv_obj_set_state>
}
 8003dc0:	4770      	bx	lr

08003dc2 <lv_obj_has_flag>:
    return (obj->flags & f)  == f ? true : false;
 8003dc2:	69c3      	ldr	r3, [r0, #28]
 8003dc4:	ea31 0303 	bics.w	r3, r1, r3
}
 8003dc8:	bf0c      	ite	eq
 8003dca:	2001      	moveq	r0, #1
 8003dcc:	2000      	movne	r0, #0
 8003dce:	4770      	bx	lr

08003dd0 <lv_obj_has_flag_any>:
    return (obj->flags & f) ? true : false;
 8003dd0:	69c3      	ldr	r3, [r0, #28]
 8003dd2:	4219      	tst	r1, r3
}
 8003dd4:	bf14      	ite	ne
 8003dd6:	2001      	movne	r0, #1
 8003dd8:	2000      	moveq	r0, #0
 8003dda:	4770      	bx	lr

08003ddc <lv_obj_get_state>:
}
 8003ddc:	8c00      	ldrh	r0, [r0, #32]
 8003dde:	4770      	bx	lr

08003de0 <lv_obj_get_group>:
    if(obj->spec_attr) return obj->spec_attr->group_p;
 8003de0:	6880      	ldr	r0, [r0, #8]
 8003de2:	b100      	cbz	r0, 8003de6 <lv_obj_get_group+0x6>
 8003de4:	6880      	ldr	r0, [r0, #8]
}
 8003de6:	4770      	bx	lr

08003de8 <lv_obj_event>:
{
 8003de8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    lv_event_code_t code = lv_event_get_code(e);
 8003dec:	4608      	mov	r0, r1
{
 8003dee:	460e      	mov	r6, r1
 8003df0:	b092      	sub	sp, #72	; 0x48
    lv_event_code_t code = lv_event_get_code(e);
 8003df2:	f7fe f88b 	bl	8001f0c <lv_event_get_code>
 8003df6:	4605      	mov	r5, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8003df8:	4630      	mov	r0, r6
 8003dfa:	f7fe f885 	bl	8001f08 <lv_event_get_target>
    if(code == LV_EVENT_PRESSED) {
 8003dfe:	2d01      	cmp	r5, #1
    lv_obj_t * obj = lv_event_get_target(e);
 8003e00:	4604      	mov	r4, r0
    if(code == LV_EVENT_PRESSED) {
 8003e02:	d103      	bne.n	8003e0c <lv_obj_event+0x24>
        lv_obj_add_state(obj, LV_STATE_PRESSED);
 8003e04:	2120      	movs	r1, #32
            lv_obj_add_state(obj, state);
 8003e06:	f7ff ffca 	bl	8003d9e <lv_obj_add_state>
 8003e0a:	e019      	b.n	8003e40 <lv_obj_event+0x58>
    else if(code == LV_EVENT_RELEASED) {
 8003e0c:	2d08      	cmp	r5, #8
 8003e0e:	d11a      	bne.n	8003e46 <lv_obj_event+0x5e>
        lv_obj_clear_state(obj, LV_STATE_PRESSED);
 8003e10:	2120      	movs	r1, #32
 8003e12:	f7ff ffcd 	bl	8003db0 <lv_obj_clear_state>
        void * param = lv_event_get_param(e);
 8003e16:	4630      	mov	r0, r6
 8003e18:	f7fe f87a 	bl	8001f10 <lv_event_get_param>
        if(lv_indev_get_scroll_obj(param) == NULL && lv_obj_has_flag(obj, LV_OBJ_FLAG_CHECKABLE)) {
 8003e1c:	f7fe fb6e 	bl	80024fc <lv_indev_get_scroll_obj>
 8003e20:	b970      	cbnz	r0, 8003e40 <lv_obj_event+0x58>
    return (obj->flags & f)  == f ? true : false;
 8003e22:	69e3      	ldr	r3, [r4, #28]
        if(lv_indev_get_scroll_obj(param) == NULL && lv_obj_has_flag(obj, LV_OBJ_FLAG_CHECKABLE)) {
 8003e24:	071e      	lsls	r6, r3, #28
 8003e26:	d50b      	bpl.n	8003e40 <lv_obj_event+0x58>
            if(!(lv_obj_get_state(obj) & LV_STATE_CHECKED)) lv_obj_add_state(obj, LV_STATE_CHECKED);
 8003e28:	8c23      	ldrh	r3, [r4, #32]
 8003e2a:	2101      	movs	r1, #1
 8003e2c:	4620      	mov	r0, r4
 8003e2e:	07dd      	lsls	r5, r3, #31
 8003e30:	d425      	bmi.n	8003e7e <lv_obj_event+0x96>
                lv_obj_add_state(obj, LV_STATE_CHECKED);
 8003e32:	f7ff ffb4 	bl	8003d9e <lv_obj_add_state>
            lv_res_t res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 8003e36:	2200      	movs	r2, #0
 8003e38:	211c      	movs	r1, #28
 8003e3a:	4620      	mov	r0, r4
 8003e3c:	f7fe f844 	bl	8001ec8 <lv_event_send>
}
 8003e40:	b012      	add	sp, #72	; 0x48
 8003e42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(code == LV_EVENT_PRESS_LOST) {
 8003e46:	2d03      	cmp	r5, #3
 8003e48:	d103      	bne.n	8003e52 <lv_obj_event+0x6a>
        lv_obj_clear_state(obj, LV_STATE_PRESSED);
 8003e4a:	2120      	movs	r1, #32
            lv_obj_clear_state(obj, LV_STATE_EDITED);
 8003e4c:	f7ff ffb0 	bl	8003db0 <lv_obj_clear_state>
 8003e50:	e7f6      	b.n	8003e40 <lv_obj_event+0x58>
    else if(code == LV_EVENT_KEY) {
 8003e52:	2d0d      	cmp	r5, #13
 8003e54:	d116      	bne.n	8003e84 <lv_obj_event+0x9c>
    return (obj->flags & f)  == f ? true : false;
 8003e56:	69c3      	ldr	r3, [r0, #28]
        if(lv_obj_has_flag(obj, LV_OBJ_FLAG_CHECKABLE)) {
 8003e58:	071a      	lsls	r2, r3, #28
 8003e5a:	d5f1      	bpl.n	8003e40 <lv_obj_event+0x58>
            char c = *((char *)lv_event_get_param(e));
 8003e5c:	4630      	mov	r0, r6
 8003e5e:	f7fe f857 	bl	8001f10 <lv_event_get_param>
 8003e62:	7803      	ldrb	r3, [r0, #0]
            if(c == LV_KEY_RIGHT || c == LV_KEY_UP) {
 8003e64:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 8003e68:	2a11      	cmp	r2, #17
 8003e6a:	d102      	bne.n	8003e72 <lv_obj_event+0x8a>
                lv_obj_add_state(obj, LV_STATE_CHECKED);
 8003e6c:	2101      	movs	r1, #1
 8003e6e:	4620      	mov	r0, r4
 8003e70:	e7df      	b.n	8003e32 <lv_obj_event+0x4a>
            else if(c == LV_KEY_LEFT || c == LV_KEY_DOWN) {
 8003e72:	2b14      	cmp	r3, #20
 8003e74:	d001      	beq.n	8003e7a <lv_obj_event+0x92>
 8003e76:	2b12      	cmp	r3, #18
 8003e78:	d1dd      	bne.n	8003e36 <lv_obj_event+0x4e>
                lv_obj_clear_state(obj, LV_STATE_CHECKED);
 8003e7a:	2101      	movs	r1, #1
 8003e7c:	4620      	mov	r0, r4
 8003e7e:	f7ff ff97 	bl	8003db0 <lv_obj_clear_state>
 8003e82:	e7d8      	b.n	8003e36 <lv_obj_event+0x4e>
    else if(code == LV_EVENT_FOCUSED) {
 8003e84:	2d0e      	cmp	r5, #14
 8003e86:	d122      	bne.n	8003ece <lv_obj_event+0xe6>
    return (obj->flags & f)  == f ? true : false;
 8003e88:	69c3      	ldr	r3, [r0, #28]
        if(lv_obj_has_flag(obj, LV_OBJ_FLAG_SCROLL_ON_FOCUS)) {
 8003e8a:	059b      	lsls	r3, r3, #22
 8003e8c:	d502      	bpl.n	8003e94 <lv_obj_event+0xac>
            lv_obj_scroll_to_view_recursive(obj, LV_ANIM_ON);
 8003e8e:	2101      	movs	r1, #1
 8003e90:	f002 fbbd 	bl	800660e <lv_obj_scroll_to_view_recursive>
        editing = lv_group_get_editing(lv_obj_get_group(obj));
 8003e94:	4620      	mov	r0, r4
 8003e96:	f7ff ffa3 	bl	8003de0 <lv_obj_get_group>
 8003e9a:	f7fe fa37 	bl	800230c <lv_group_get_editing>
 8003e9e:	4605      	mov	r5, r0
        lv_indev_t * indev = lv_indev_get_act();
 8003ea0:	f7fe faa8 	bl	80023f4 <lv_indev_get_act>
        lv_indev_type_t indev_type = lv_indev_get_type(indev);
 8003ea4:	f7fe faac 	bl	8002400 <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_KEYPAD || indev_type == LV_INDEV_TYPE_ENCODER) state |= LV_STATE_FOCUS_KEY;
 8003ea8:	2802      	cmp	r0, #2
 8003eaa:	d008      	beq.n	8003ebe <lv_obj_event+0xd6>
        lv_state_t state = LV_STATE_FOCUSED;
 8003eac:	2804      	cmp	r0, #4
 8003eae:	bf0c      	ite	eq
 8003eb0:	2106      	moveq	r1, #6
 8003eb2:	2102      	movne	r1, #2
        if(editing) {
 8003eb4:	b12d      	cbz	r5, 8003ec2 <lv_obj_event+0xda>
            lv_obj_add_state(obj, state);
 8003eb6:	f041 0108 	orr.w	r1, r1, #8
 8003eba:	4620      	mov	r0, r4
 8003ebc:	e7a3      	b.n	8003e06 <lv_obj_event+0x1e>
        if(indev_type == LV_INDEV_TYPE_KEYPAD || indev_type == LV_INDEV_TYPE_ENCODER) state |= LV_STATE_FOCUS_KEY;
 8003ebe:	2106      	movs	r1, #6
 8003ec0:	e7f8      	b.n	8003eb4 <lv_obj_event+0xcc>
            lv_obj_add_state(obj, state);
 8003ec2:	4620      	mov	r0, r4
 8003ec4:	f7ff ff6b 	bl	8003d9e <lv_obj_add_state>
            lv_obj_clear_state(obj, LV_STATE_EDITED);
 8003ec8:	2108      	movs	r1, #8
 8003eca:	4620      	mov	r0, r4
 8003ecc:	e7be      	b.n	8003e4c <lv_obj_event+0x64>
    else if(code == LV_EVENT_SCROLL_BEGIN) {
 8003ece:	2d09      	cmp	r5, #9
 8003ed0:	d101      	bne.n	8003ed6 <lv_obj_event+0xee>
        lv_obj_add_state(obj, LV_STATE_SCROLLED);
 8003ed2:	2140      	movs	r1, #64	; 0x40
 8003ed4:	e797      	b.n	8003e06 <lv_obj_event+0x1e>
    else if(code == LV_EVENT_SCROLL_END) {
 8003ed6:	2d0a      	cmp	r5, #10
 8003ed8:	d101      	bne.n	8003ede <lv_obj_event+0xf6>
        lv_obj_clear_state(obj, LV_STATE_SCROLLED);
 8003eda:	2140      	movs	r1, #64	; 0x40
 8003edc:	e7b6      	b.n	8003e4c <lv_obj_event+0x64>
    else if(code == LV_EVENT_DEFOCUSED) {
 8003ede:	2d0f      	cmp	r5, #15
 8003ee0:	d101      	bne.n	8003ee6 <lv_obj_event+0xfe>
        lv_obj_clear_state(obj, LV_STATE_FOCUSED | LV_STATE_EDITED | LV_STATE_FOCUS_KEY);
 8003ee2:	210e      	movs	r1, #14
 8003ee4:	e7b2      	b.n	8003e4c <lv_obj_event+0x64>
    else if(code == LV_EVENT_SIZE_CHANGED) {
 8003ee6:	2d23      	cmp	r5, #35	; 0x23
 8003ee8:	d121      	bne.n	8003f2e <lv_obj_event+0x146>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 8003eea:	f241 0209 	movw	r2, #4105	; 0x1009
 8003eee:	2100      	movs	r1, #0
 8003ef0:	f003 fa3a 	bl	8007368 <lv_obj_get_style_prop>
    return (lv_blend_mode_t)v.num;
}

static inline uint16_t lv_obj_get_style_layout(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LAYOUT);
 8003ef4:	f241 0269 	movw	r2, #4201	; 0x1069
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 8003ef8:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LAYOUT);
 8003efa:	2100      	movs	r1, #0
 8003efc:	4620      	mov	r0, r4
 8003efe:	f003 fa33 	bl	8007368 <lv_obj_get_style_prop>
    return (uint16_t)v.num;
 8003f02:	b280      	uxth	r0, r0
        if(layout || align) {
 8003f04:	b910      	cbnz	r0, 8003f0c <lv_obj_event+0x124>
 8003f06:	f015 0fff 	tst.w	r5, #255	; 0xff
 8003f0a:	d002      	beq.n	8003f12 <lv_obj_event+0x12a>
            lv_obj_mark_layout_as_dirty(obj);
 8003f0c:	4620      	mov	r0, r4
 8003f0e:	f000 ff18 	bl	8004d42 <lv_obj_mark_layout_as_dirty>
        lv_state_t state = LV_STATE_FOCUSED;
 8003f12:	2500      	movs	r5, #0
        for(i = 0; i < lv_obj_get_child_cnt(obj); i++) {
 8003f14:	4620      	mov	r0, r4
 8003f16:	f003 fd83 	bl	8007a20 <lv_obj_get_child_cnt>
 8003f1a:	42a8      	cmp	r0, r5
 8003f1c:	d990      	bls.n	8003e40 <lv_obj_event+0x58>
            lv_obj_t * child = lv_obj_get_child(obj, i);
 8003f1e:	4629      	mov	r1, r5
 8003f20:	4620      	mov	r0, r4
 8003f22:	f003 fd6e 	bl	8007a02 <lv_obj_get_child>
        for(i = 0; i < lv_obj_get_child_cnt(obj); i++) {
 8003f26:	3501      	adds	r5, #1
            lv_obj_mark_layout_as_dirty(child);
 8003f28:	f000 ff0b 	bl	8004d42 <lv_obj_mark_layout_as_dirty>
        for(i = 0; i < lv_obj_get_child_cnt(obj); i++) {
 8003f2c:	e7f2      	b.n	8003f14 <lv_obj_event+0x12c>
    else if(code == LV_EVENT_CHILD_CHANGED) {
 8003f2e:	2d22      	cmp	r5, #34	; 0x22
 8003f30:	d12b      	bne.n	8003f8a <lv_obj_event+0x1a2>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8003f32:	f241 0201 	movw	r2, #4097	; 0x1001
 8003f36:	2100      	movs	r1, #0
 8003f38:	f003 fa16 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 8003f3c:	f241 0204 	movw	r2, #4100	; 0x1004
 8003f40:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8003f42:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 8003f44:	4620      	mov	r0, r4
 8003f46:	f003 fa0f 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 8003f4a:	f241 0209 	movw	r2, #4105	; 0x1009
 8003f4e:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 8003f50:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 8003f52:	4620      	mov	r0, r4
 8003f54:	f003 fa08 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LAYOUT);
 8003f58:	f241 0269 	movw	r2, #4201	; 0x1069
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 8003f5c:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LAYOUT);
 8003f5e:	2100      	movs	r1, #0
 8003f60:	4620      	mov	r0, r4
 8003f62:	f003 fa01 	bl	8007368 <lv_obj_get_style_prop>
    return (uint16_t)v.num;
 8003f66:	b280      	uxth	r0, r0
        if(layout || align || w == LV_SIZE_CONTENT || h == LV_SIZE_CONTENT) {
 8003f68:	b958      	cbnz	r0, 8003f82 <lv_obj_event+0x19a>
 8003f6a:	f017 0fff 	tst.w	r7, #255	; 0xff
 8003f6e:	d108      	bne.n	8003f82 <lv_obj_event+0x19a>
 8003f70:	b236      	sxth	r6, r6
 8003f72:	f242 73d1 	movw	r3, #10193	; 0x27d1
 8003f76:	429e      	cmp	r6, r3
 8003f78:	d003      	beq.n	8003f82 <lv_obj_event+0x19a>
 8003f7a:	b22d      	sxth	r5, r5
 8003f7c:	429d      	cmp	r5, r3
 8003f7e:	f47f af5f 	bne.w	8003e40 <lv_obj_event+0x58>
            lv_obj_mark_layout_as_dirty(obj);
 8003f82:	4620      	mov	r0, r4
 8003f84:	f000 fedd 	bl	8004d42 <lv_obj_mark_layout_as_dirty>
 8003f88:	e75a      	b.n	8003e40 <lv_obj_event+0x58>
    else if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 8003f8a:	2d13      	cmp	r5, #19
 8003f8c:	d10e      	bne.n	8003fac <lv_obj_event+0x1c4>
        lv_coord_t * s = lv_event_get_param(e);
 8003f8e:	4630      	mov	r0, r6
 8003f90:	f7fd ffbe 	bl	8001f10 <lv_event_get_param>
 8003f94:	4605      	mov	r5, r0
        lv_coord_t d = lv_obj_calculate_ext_draw_size(obj, LV_PART_MAIN);
 8003f96:	2100      	movs	r1, #0
 8003f98:	4620      	mov	r0, r4
 8003f9a:	f000 fd54 	bl	8004a46 <lv_obj_calculate_ext_draw_size>
        *s = LV_MAX(*s, d);
 8003f9e:	f9b5 3000 	ldrsh.w	r3, [r5]
 8003fa2:	4298      	cmp	r0, r3
 8003fa4:	bfb8      	it	lt
 8003fa6:	4618      	movlt	r0, r3
 8003fa8:	8028      	strh	r0, [r5, #0]
 8003faa:	e749      	b.n	8003e40 <lv_obj_event+0x58>
    else if(code == LV_EVENT_DRAW_MAIN || code == LV_EVENT_DRAW_POST || code == LV_EVENT_COVER_CHECK) {
 8003fac:	2d18      	cmp	r5, #24
 8003fae:	f63f af47 	bhi.w	8003e40 <lv_obj_event+0x58>
 8003fb2:	f04f 7092 	mov.w	r0, #19136512	; 0x1240000
 8003fb6:	fa20 f505 	lsr.w	r5, r0, r5
 8003fba:	43ed      	mvns	r5, r5
 8003fbc:	f015 0501 	ands.w	r5, r5, #1
 8003fc0:	f47f af3e 	bne.w	8003e40 <lv_obj_event+0x58>
    lv_event_code_t code = lv_event_get_code(e);
 8003fc4:	4630      	mov	r0, r6
 8003fc6:	f7fd ffa1 	bl	8001f0c <lv_event_get_code>
 8003fca:	4607      	mov	r7, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8003fcc:	4630      	mov	r0, r6
 8003fce:	f7fd ff9b 	bl	8001f08 <lv_event_get_target>
    if(code == LV_EVENT_COVER_CHECK) {
 8003fd2:	2f12      	cmp	r7, #18
    lv_obj_t * obj = lv_event_get_target(e);
 8003fd4:	4604      	mov	r4, r0
    if(code == LV_EVENT_COVER_CHECK) {
 8003fd6:	d15c      	bne.n	8004092 <lv_obj_event+0x2aa>
        lv_cover_check_info_t * info = lv_event_get_param(e);
 8003fd8:	4630      	mov	r0, r6
 8003fda:	f7fd ff99 	bl	8001f10 <lv_event_get_param>
        if(info->res == LV_COVER_RES_MASKED) return;
 8003fde:	7803      	ldrb	r3, [r0, #0]
        lv_cover_check_info_t * info = lv_event_get_param(e);
 8003fe0:	4606      	mov	r6, r0
        if(info->res == LV_COVER_RES_MASKED) return;
 8003fe2:	2b02      	cmp	r3, #2
 8003fe4:	f43f af2c 	beq.w	8003e40 <lv_obj_event+0x58>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_CLIP_CORNER);
 8003fe8:	4629      	mov	r1, r5
 8003fea:	2261      	movs	r2, #97	; 0x61
 8003fec:	4620      	mov	r0, r4
 8003fee:	f003 f9bb 	bl	8007368 <lv_obj_get_style_prop>
        if(lv_obj_get_style_clip_corner(obj, LV_PART_MAIN)) {
 8003ff2:	4605      	mov	r5, r0
 8003ff4:	b110      	cbz	r0, 8003ffc <lv_obj_event+0x214>
            info->res = LV_COVER_RES_MASKED;
 8003ff6:	2302      	movs	r3, #2
        info->res = LV_COVER_RES_COVER;
 8003ff8:	7033      	strb	r3, [r6, #0]
 8003ffa:	e721      	b.n	8003e40 <lv_obj_event+0x58>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_RADIUS);
 8003ffc:	4601      	mov	r1, r0
 8003ffe:	2260      	movs	r2, #96	; 0x60
 8004000:	4620      	mov	r0, r4
 8004002:	f003 f9b1 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 8004006:	f640 020a 	movw	r2, #2058	; 0x80a
    return (lv_coord_t)v.num;
 800400a:	fa0f f880 	sxth.w	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 800400e:	4629      	mov	r1, r5
 8004010:	4620      	mov	r0, r4
 8004012:	f003 f9a9 	bl	8007368 <lv_obj_get_style_prop>
 8004016:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 8004018:	f640 020b 	movw	r2, #2059	; 0x80b
 800401c:	4629      	mov	r1, r5
 800401e:	4620      	mov	r0, r4
 8004020:	f003 f9a2 	bl	8007368 <lv_obj_get_style_prop>
    dest->y1 = src->y1;
 8004024:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
    dest->y2 = src->y2;
 8004028:	f9b4 c01a 	ldrsh.w	ip, [r4, #26]
        coords.x1 -= w;
 800402c:	b2bb      	uxth	r3, r7
 800402e:	8aa1      	ldrh	r1, [r4, #20]
        coords.y1 -= h;
 8004030:	b280      	uxth	r0, r0
    dest->x2 = src->x2;
 8004032:	f9b4 e018 	ldrsh.w	lr, [r4, #24]
        coords.x1 -= w;
 8004036:	1ac9      	subs	r1, r1, r3
        coords.y1 -= h;
 8004038:	1a12      	subs	r2, r2, r0
        coords.y2 += h;
 800403a:	4460      	add	r0, ip
        coords.x2 += w;
 800403c:	4473      	add	r3, lr
        coords.x1 -= w;
 800403e:	f8ad 1014 	strh.w	r1, [sp, #20]
        if(_lv_area_is_in(info->area, &coords, r) == false) {
 8004042:	a905      	add	r1, sp, #20
        coords.y1 -= h;
 8004044:	f8ad 2016 	strh.w	r2, [sp, #22]
        if(_lv_area_is_in(info->area, &coords, r) == false) {
 8004048:	4642      	mov	r2, r8
        coords.y2 += h;
 800404a:	f8ad 001a 	strh.w	r0, [sp, #26]
        if(_lv_area_is_in(info->area, &coords, r) == false) {
 800404e:	6870      	ldr	r0, [r6, #4]
        coords.x2 += w;
 8004050:	f8ad 3018 	strh.w	r3, [sp, #24]
        if(_lv_area_is_in(info->area, &coords, r) == false) {
 8004054:	f013 f81e 	bl	8017094 <_lv_area_is_in>
 8004058:	b908      	cbnz	r0, 800405e <lv_obj_event+0x276>
            info->res = LV_COVER_RES_NOT_COVER;
 800405a:	2301      	movs	r3, #1
 800405c:	e7cc      	b.n	8003ff8 <lv_obj_event+0x210>
    return v.color;
}

static inline lv_opa_t lv_obj_get_style_bg_opa(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_OPA);
 800405e:	2221      	movs	r2, #33	; 0x21
 8004060:	4629      	mov	r1, r5
 8004062:	4620      	mov	r0, r4
 8004064:	f003 f980 	bl	8007368 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8004068:	b2c0      	uxtb	r0, r0
        if(lv_obj_get_style_bg_opa(obj, LV_PART_MAIN) < LV_OPA_MAX) {
 800406a:	28fc      	cmp	r0, #252	; 0xfc
 800406c:	d9f5      	bls.n	800405a <lv_obj_event+0x272>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BLEND_MODE);
 800406e:	4629      	mov	r1, r5
 8004070:	2268      	movs	r2, #104	; 0x68
 8004072:	4620      	mov	r0, r4
 8004074:	f003 f978 	bl	8007368 <lv_obj_get_style_prop>
        if(lv_obj_get_style_blend_mode(obj, LV_PART_MAIN) != LV_BLEND_MODE_NORMAL) {
 8004078:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
 800407c:	d1ed      	bne.n	800405a <lv_obj_event+0x272>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OPA);
 800407e:	f240 4262 	movw	r2, #1122	; 0x462
 8004082:	4620      	mov	r0, r4
 8004084:	f003 f970 	bl	8007368 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8004088:	b2c0      	uxtb	r0, r0
        if(lv_obj_get_style_opa(obj, LV_PART_MAIN) < LV_OPA_MAX) {
 800408a:	28fc      	cmp	r0, #252	; 0xfc
 800408c:	d9e5      	bls.n	800405a <lv_obj_event+0x272>
        info->res = LV_COVER_RES_COVER;
 800408e:	2300      	movs	r3, #0
 8004090:	e7b2      	b.n	8003ff8 <lv_obj_event+0x210>
    else if(code == LV_EVENT_DRAW_MAIN) {
 8004092:	2f15      	cmp	r7, #21
 8004094:	d15c      	bne.n	8004150 <lv_obj_event+0x368>
        const lv_area_t * clip_area = lv_event_get_param(e);
 8004096:	4630      	mov	r0, r6
 8004098:	f7fd ff3a 	bl	8001f10 <lv_event_get_param>
 800409c:	4606      	mov	r6, r0
        lv_draw_rect_dsc_init(&draw_dsc);
 800409e:	a805      	add	r0, sp, #20
 80040a0:	f008 fcf2 	bl	800ca88 <lv_draw_rect_dsc_init>
    return (lv_border_side_t)v.num;
}

static inline bool lv_obj_get_style_border_post(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_POST);
 80040a4:	2234      	movs	r2, #52	; 0x34
 80040a6:	4629      	mov	r1, r5
 80040a8:	4620      	mov	r0, r4
 80040aa:	f003 f95d 	bl	8007368 <lv_obj_get_style_prop>
        if(lv_obj_get_style_border_post(obj, LV_PART_MAIN)) {
 80040ae:	b128      	cbz	r0, 80040bc <lv_obj_event+0x2d4>
            draw_dsc.border_post = 1;
 80040b0:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80040b4:	f043 0301 	orr.w	r3, r3, #1
 80040b8:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
        lv_obj_init_draw_rect_dsc(obj, LV_PART_MAIN, &draw_dsc);
 80040bc:	aa05      	add	r2, sp, #20
 80040be:	2100      	movs	r1, #0
 80040c0:	4620      	mov	r0, r4
 80040c2:	f000 fa4d 	bl	8004560 <lv_obj_init_draw_rect_dsc>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 80040c6:	f640 020a 	movw	r2, #2058	; 0x80a
 80040ca:	2100      	movs	r1, #0
 80040cc:	4620      	mov	r0, r4
 80040ce:	f003 f94b 	bl	8007368 <lv_obj_get_style_prop>
 80040d2:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 80040d4:	f640 020b 	movw	r2, #2059	; 0x80b
 80040d8:	2100      	movs	r1, #0
 80040da:	4620      	mov	r0, r4
 80040dc:	f003 f944 	bl	8007368 <lv_obj_get_style_prop>
 80040e0:	f9b4 c018 	ldrsh.w	ip, [r4, #24]
        coords.x1 -= w;
 80040e4:	8aa1      	ldrh	r1, [r4, #20]
 80040e6:	b2ab      	uxth	r3, r5
    dest->y1 = src->y1;
 80040e8:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 80040ec:	1ac9      	subs	r1, r1, r3
        coords.x2 += w;
 80040ee:	4463      	add	r3, ip
    dest->y2 = src->y2;
 80040f0:	f9b4 701a 	ldrsh.w	r7, [r4, #26]
 80040f4:	f8ad 3010 	strh.w	r3, [sp, #16]
        coords.y1 -= h;
 80040f8:	b283      	uxth	r3, r0
        coords.x1 -= w;
 80040fa:	f8ad 100c 	strh.w	r1, [sp, #12]
        lv_draw_rect(&coords, clip_area, &draw_dsc);
 80040fe:	a803      	add	r0, sp, #12
        coords.y1 -= h;
 8004100:	1ad2      	subs	r2, r2, r3
        coords.y2 += h;
 8004102:	443b      	add	r3, r7
        lv_draw_rect(&coords, clip_area, &draw_dsc);
 8004104:	4631      	mov	r1, r6
        coords.y1 -= h;
 8004106:	f8ad 200e 	strh.w	r2, [sp, #14]
        lv_draw_rect(&coords, clip_area, &draw_dsc);
 800410a:	aa05      	add	r2, sp, #20
        coords.y2 += h;
 800410c:	f8ad 3012 	strh.w	r3, [sp, #18]
        lv_draw_rect(&coords, clip_area, &draw_dsc);
 8004110:	f008 fcdc 	bl	800cacc <lv_draw_rect>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_CLIP_CORNER);
 8004114:	2261      	movs	r2, #97	; 0x61
 8004116:	2100      	movs	r1, #0
 8004118:	4620      	mov	r0, r4
 800411a:	f003 f925 	bl	8007368 <lv_obj_get_style_prop>
        if(lv_obj_get_style_clip_corner(obj, LV_PART_MAIN)) {
 800411e:	2800      	cmp	r0, #0
 8004120:	f43f ae8e 	beq.w	8003e40 <lv_obj_event+0x58>
            lv_draw_mask_radius_param_t * mp = lv_mem_buf_get(sizeof(lv_draw_mask_radius_param_t));
 8004124:	201c      	movs	r0, #28
 8004126:	f013 fcb7 	bl	8017a98 <lv_mem_buf_get>
 800412a:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_RADIUS);
 800412c:	2260      	movs	r2, #96	; 0x60
 800412e:	2100      	movs	r1, #0
 8004130:	4620      	mov	r0, r4
 8004132:	f003 f919 	bl	8007368 <lv_obj_get_style_prop>
            lv_draw_mask_radius_init(mp, &obj->coords, r, false);
 8004136:	f104 0114 	add.w	r1, r4, #20
 800413a:	b202      	sxth	r2, r0
 800413c:	2300      	movs	r3, #0
 800413e:	4628      	mov	r0, r5
 8004140:	f008 f904 	bl	800c34c <lv_draw_mask_radius_init>
            lv_draw_mask_add(mp, obj + 8);
 8004144:	f504 7190 	add.w	r1, r4, #288	; 0x120
 8004148:	4628      	mov	r0, r5
 800414a:	f007 ff99 	bl	800c080 <lv_draw_mask_add>
 800414e:	e677      	b.n	8003e40 <lv_obj_event+0x58>
    else if(code == LV_EVENT_DRAW_POST) {
 8004150:	2f18      	cmp	r7, #24
 8004152:	f47f ae75 	bne.w	8003e40 <lv_obj_event+0x58>
        const lv_area_t * clip_area = lv_event_get_param(e);
 8004156:	4630      	mov	r0, r6
 8004158:	f7fd feda 	bl	8001f10 <lv_event_get_param>
    lv_obj_get_scrollbar_area(obj, &hor_area, &ver_area);
 800415c:	aa03      	add	r2, sp, #12
        const lv_area_t * clip_area = lv_event_get_param(e);
 800415e:	4606      	mov	r6, r0
    lv_obj_get_scrollbar_area(obj, &hor_area, &ver_area);
 8004160:	a901      	add	r1, sp, #4
 8004162:	4620      	mov	r0, r4
 8004164:	f002 fa6e 	bl	8006644 <lv_obj_get_scrollbar_area>
    if(lv_area_get_size(&hor_area) <= 0 && lv_area_get_size(&ver_area) <= 0) return;
 8004168:	a801      	add	r0, sp, #4
 800416a:	f012 fe66 	bl	8016e3a <lv_area_get_size>
 800416e:	2800      	cmp	r0, #0
 8004170:	f000 809a 	beq.w	80042a8 <lv_obj_event+0x4c0>
    lv_draw_rect_dsc_init(dsc);
 8004174:	a805      	add	r0, sp, #20
 8004176:	f008 fc87 	bl	800ca88 <lv_draw_rect_dsc_init>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_OPA);
 800417a:	2221      	movs	r2, #33	; 0x21
 800417c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8004180:	4620      	mov	r0, r4
 8004182:	f003 f8f1 	bl	8007368 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8004186:	b2c0      	uxtb	r0, r0
    if(dsc->bg_opa > LV_OPA_MIN) {
 8004188:	2802      	cmp	r0, #2
    dsc->bg_opa = lv_obj_get_style_bg_opa(obj, LV_PART_SCROLLBAR);
 800418a:	f88d 001e 	strb.w	r0, [sp, #30]
    if(dsc->bg_opa > LV_OPA_MIN) {
 800418e:	d907      	bls.n	80041a0 <lv_obj_event+0x3b8>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_COLOR);
 8004190:	2220      	movs	r2, #32
 8004192:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8004196:	4620      	mov	r0, r4
 8004198:	f003 f8e6 	bl	8007368 <lv_obj_get_style_prop>
        dsc->bg_color = lv_obj_get_style_bg_color(obj, LV_PART_SCROLLBAR);
 800419c:	f8ad 0018 	strh.w	r0, [sp, #24]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_OPA);
 80041a0:	2231      	movs	r2, #49	; 0x31
 80041a2:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80041a6:	4620      	mov	r0, r4
 80041a8:	f003 f8de 	bl	8007368 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 80041ac:	b2c0      	uxtb	r0, r0
    if(dsc->border_opa > LV_OPA_MIN) {
 80041ae:	2802      	cmp	r0, #2
    dsc->border_opa = lv_obj_get_style_border_opa(obj, LV_PART_SCROLLBAR);
 80041b0:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    if(dsc->border_opa > LV_OPA_MIN) {
 80041b4:	d914      	bls.n	80041e0 <lv_obj_event+0x3f8>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 80041b6:	f241 0232 	movw	r2, #4146	; 0x1032
 80041ba:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80041be:	4620      	mov	r0, r4
 80041c0:	f003 f8d2 	bl	8007368 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80041c4:	b200      	sxth	r0, r0
        if(dsc->border_width > 0) {
 80041c6:	2800      	cmp	r0, #0
        dsc->border_width = lv_obj_get_style_border_width(obj, LV_PART_SCROLLBAR);
 80041c8:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
        if(dsc->border_width > 0) {
 80041cc:	f340 80bd 	ble.w	800434a <lv_obj_event+0x562>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_COLOR);
 80041d0:	2230      	movs	r2, #48	; 0x30
 80041d2:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80041d6:	4620      	mov	r0, r4
 80041d8:	f003 f8c6 	bl	8007368 <lv_obj_get_style_prop>
            dsc->border_color = lv_obj_get_style_border_color(obj, LV_PART_SCROLLBAR);
 80041dc:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
    return v.color;
}

static inline lv_opa_t lv_obj_get_style_shadow_opa(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OPA);
 80041e0:	f640 0245 	movw	r2, #2117	; 0x845
 80041e4:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80041e8:	4620      	mov	r0, r4
 80041ea:	f003 f8bd 	bl	8007368 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 80041ee:	b2c0      	uxtb	r0, r0
    if(dsc->shadow_opa > LV_OPA_MIN) {
 80041f0:	2802      	cmp	r0, #2
    dsc->shadow_opa = lv_obj_get_style_shadow_opa(obj, LV_PART_SCROLLBAR);
 80041f2:	f88d 0046 	strb.w	r0, [sp, #70]	; 0x46
    if(dsc->shadow_opa > LV_OPA_MIN) {
 80041f6:	d91d      	bls.n	8004234 <lv_obj_event+0x44c>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_WIDTH);
 80041f8:	f44f 6204 	mov.w	r2, #2112	; 0x840
 80041fc:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8004200:	4620      	mov	r0, r4
 8004202:	f003 f8b1 	bl	8007368 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8004206:	b200      	sxth	r0, r0
        if(dsc->shadow_width > 0) {
 8004208:	2800      	cmp	r0, #0
        dsc->shadow_width = lv_obj_get_style_shadow_width(obj, LV_PART_SCROLLBAR);
 800420a:	f8ad 003e 	strh.w	r0, [sp, #62]	; 0x3e
        if(dsc->shadow_width > 0) {
 800420e:	f340 80a0 	ble.w	8004352 <lv_obj_event+0x56a>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_SPREAD);
 8004212:	f640 0243 	movw	r2, #2115	; 0x843
 8004216:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800421a:	4620      	mov	r0, r4
 800421c:	f003 f8a4 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_COLOR);
 8004220:	2244      	movs	r2, #68	; 0x44
            dsc->shadow_spread = lv_obj_get_style_shadow_spread(obj, LV_PART_SCROLLBAR);
 8004222:	f8ad 0044 	strh.w	r0, [sp, #68]	; 0x44
 8004226:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800422a:	4620      	mov	r0, r4
 800422c:	f003 f89c 	bl	8007368 <lv_obj_get_style_prop>
            dsc->shadow_color = lv_obj_get_style_shadow_color(obj, LV_PART_SCROLLBAR);
 8004230:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OPA);
 8004234:	f240 4262 	movw	r2, #1122	; 0x462
 8004238:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800423c:	4620      	mov	r0, r4
 800423e:	f003 f893 	bl	8007368 <lv_obj_get_style_prop>
    if(opa < LV_OPA_MAX) {
 8004242:	b2c3      	uxtb	r3, r0
 8004244:	2bfc      	cmp	r3, #252	; 0xfc
 8004246:	d80b      	bhi.n	8004260 <lv_obj_event+0x478>
        dsc->bg_opa = (dsc->bg_opa * opa) >> 8;
 8004248:	f89d 001e 	ldrb.w	r0, [sp, #30]
 800424c:	4358      	muls	r0, r3
 800424e:	1200      	asrs	r0, r0, #8
        dsc->border_opa = (dsc->bg_opa * opa) >> 8;
 8004250:	4343      	muls	r3, r0
        dsc->bg_opa = (dsc->bg_opa * opa) >> 8;
 8004252:	f88d 001e 	strb.w	r0, [sp, #30]
        dsc->border_opa = (dsc->bg_opa * opa) >> 8;
 8004256:	0a1b      	lsrs	r3, r3, #8
 8004258:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
        dsc->shadow_opa = (dsc->bg_opa * opa) >> 8;
 800425c:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
    if(dsc->bg_opa != LV_OPA_TRANSP || dsc->border_opa != LV_OPA_TRANSP || dsc->shadow_opa != LV_OPA_TRANSP ) {
 8004260:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 8004264:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8004268:	4313      	orrs	r3, r2
 800426a:	f89d 2046 	ldrb.w	r2, [sp, #70]	; 0x46
 800426e:	4313      	orrs	r3, r2
 8004270:	d020      	beq.n	80042b4 <lv_obj_event+0x4cc>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_RADIUS);
 8004272:	2260      	movs	r2, #96	; 0x60
 8004274:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8004278:	4620      	mov	r0, r4
 800427a:	f003 f875 	bl	8007368 <lv_obj_get_style_prop>
        dsc->radius = lv_obj_get_style_radius(obj, LV_PART_SCROLLBAR);
 800427e:	f8ad 0014 	strh.w	r0, [sp, #20]
    if(lv_area_get_size(&hor_area) > 0) lv_draw_rect(&hor_area, clip_area, &draw_dsc);
 8004282:	a801      	add	r0, sp, #4
 8004284:	f012 fdd9 	bl	8016e3a <lv_area_get_size>
 8004288:	b120      	cbz	r0, 8004294 <lv_obj_event+0x4ac>
 800428a:	aa05      	add	r2, sp, #20
 800428c:	4631      	mov	r1, r6
 800428e:	a801      	add	r0, sp, #4
 8004290:	f008 fc1c 	bl	800cacc <lv_draw_rect>
    if(lv_area_get_size(&ver_area) > 0) lv_draw_rect(&ver_area, clip_area, &draw_dsc);
 8004294:	a803      	add	r0, sp, #12
 8004296:	f012 fdd0 	bl	8016e3a <lv_area_get_size>
 800429a:	b158      	cbz	r0, 80042b4 <lv_obj_event+0x4cc>
 800429c:	aa05      	add	r2, sp, #20
 800429e:	4631      	mov	r1, r6
 80042a0:	a803      	add	r0, sp, #12
 80042a2:	f008 fc13 	bl	800cacc <lv_draw_rect>
 80042a6:	e005      	b.n	80042b4 <lv_obj_event+0x4cc>
    if(lv_area_get_size(&hor_area) <= 0 && lv_area_get_size(&ver_area) <= 0) return;
 80042a8:	a803      	add	r0, sp, #12
 80042aa:	f012 fdc6 	bl	8016e3a <lv_area_get_size>
 80042ae:	2800      	cmp	r0, #0
 80042b0:	f47f af60 	bne.w	8004174 <lv_obj_event+0x38c>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_CLIP_CORNER);
 80042b4:	2261      	movs	r2, #97	; 0x61
 80042b6:	2100      	movs	r1, #0
 80042b8:	4620      	mov	r0, r4
 80042ba:	f003 f855 	bl	8007368 <lv_obj_get_style_prop>
        if(lv_obj_get_style_clip_corner(obj, LV_PART_MAIN)) {
 80042be:	b128      	cbz	r0, 80042cc <lv_obj_event+0x4e4>
            lv_draw_mask_radius_param_t * param = lv_draw_mask_remove_custom(obj + 8);
 80042c0:	f504 7090 	add.w	r0, r4, #288	; 0x120
 80042c4:	f007 ff28 	bl	800c118 <lv_draw_mask_remove_custom>
            lv_mem_buf_release(param);
 80042c8:	f013 fa42 	bl	8017750 <lv_mem_buf_release>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_POST);
 80042cc:	2234      	movs	r2, #52	; 0x34
 80042ce:	2100      	movs	r1, #0
 80042d0:	4620      	mov	r0, r4
 80042d2:	f003 f849 	bl	8007368 <lv_obj_get_style_prop>
        if(lv_obj_get_style_border_post(obj, LV_PART_MAIN)) {
 80042d6:	2800      	cmp	r0, #0
 80042d8:	f43f adb2 	beq.w	8003e40 <lv_obj_event+0x58>
            draw_dsc.bg_opa = LV_OPA_TRANSP;
 80042dc:	2700      	movs	r7, #0
            lv_draw_rect_dsc_init(&draw_dsc);
 80042de:	a805      	add	r0, sp, #20
 80042e0:	f008 fbd2 	bl	800ca88 <lv_draw_rect_dsc_init>
            lv_obj_init_draw_rect_dsc(obj, LV_PART_MAIN, &draw_dsc);
 80042e4:	aa05      	add	r2, sp, #20
 80042e6:	4639      	mov	r1, r7
 80042e8:	4620      	mov	r0, r4
            draw_dsc.bg_opa = LV_OPA_TRANSP;
 80042ea:	f88d 701e 	strb.w	r7, [sp, #30]
            draw_dsc.outline_opa = LV_OPA_TRANSP;
 80042ee:	f88d 703a 	strb.w	r7, [sp, #58]	; 0x3a
            draw_dsc.shadow_opa = LV_OPA_TRANSP;
 80042f2:	f88d 7046 	strb.w	r7, [sp, #70]	; 0x46
            lv_obj_init_draw_rect_dsc(obj, LV_PART_MAIN, &draw_dsc);
 80042f6:	f000 f933 	bl	8004560 <lv_obj_init_draw_rect_dsc>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 80042fa:	4639      	mov	r1, r7
 80042fc:	f640 020a 	movw	r2, #2058	; 0x80a
 8004300:	4620      	mov	r0, r4
 8004302:	f003 f831 	bl	8007368 <lv_obj_get_style_prop>
 8004306:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 8004308:	4639      	mov	r1, r7
 800430a:	f640 020b 	movw	r2, #2059	; 0x80b
 800430e:	4620      	mov	r0, r4
 8004310:	f003 f82a 	bl	8007368 <lv_obj_get_style_prop>
    dest->y1 = src->y1;
 8004314:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
    dest->y2 = src->y2;
 8004318:	f9b4 701a 	ldrsh.w	r7, [r4, #26]
            coords.x1 -= w;
 800431c:	b2ab      	uxth	r3, r5
 800431e:	8aa1      	ldrh	r1, [r4, #20]
            coords.y1 -= h;
 8004320:	b280      	uxth	r0, r0
    dest->x2 = src->x2;
 8004322:	f9b4 c018 	ldrsh.w	ip, [r4, #24]
            coords.x1 -= w;
 8004326:	1ac9      	subs	r1, r1, r3
            coords.y1 -= h;
 8004328:	1a12      	subs	r2, r2, r0
            coords.y2 += h;
 800432a:	4438      	add	r0, r7
            coords.x2 += w;
 800432c:	4463      	add	r3, ip
            coords.x1 -= w;
 800432e:	f8ad 100c 	strh.w	r1, [sp, #12]
            lv_draw_rect(&coords, clip_area, &draw_dsc);
 8004332:	4631      	mov	r1, r6
            coords.y1 -= h;
 8004334:	f8ad 200e 	strh.w	r2, [sp, #14]
            lv_draw_rect(&coords, clip_area, &draw_dsc);
 8004338:	aa05      	add	r2, sp, #20
            coords.y2 += h;
 800433a:	f8ad 0012 	strh.w	r0, [sp, #18]
            lv_draw_rect(&coords, clip_area, &draw_dsc);
 800433e:	a803      	add	r0, sp, #12
            coords.x2 += w;
 8004340:	f8ad 3010 	strh.w	r3, [sp, #16]
            lv_draw_rect(&coords, clip_area, &draw_dsc);
 8004344:	f008 fbc2 	bl	800cacc <lv_draw_rect>
 8004348:	e57a      	b.n	8003e40 <lv_obj_event+0x58>
            dsc->border_opa = LV_OPA_TRANSP;
 800434a:	2300      	movs	r3, #0
 800434c:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
 8004350:	e746      	b.n	80041e0 <lv_obj_event+0x3f8>
            dsc->shadow_opa = LV_OPA_TRANSP;
 8004352:	2300      	movs	r3, #0
 8004354:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 8004358:	e76c      	b.n	8004234 <lv_obj_event+0x44c>
	...

0800435c <lv_obj_allocate_spec_attr>:
    if(obj->spec_attr == NULL) {
 800435c:	6883      	ldr	r3, [r0, #8]
{
 800435e:	b510      	push	{r4, lr}
 8004360:	4604      	mov	r4, r0
    if(obj->spec_attr == NULL) {
 8004362:	b99b      	cbnz	r3, 800438c <lv_obj_allocate_spec_attr+0x30>
        x++;
 8004364:	4a0a      	ldr	r2, [pc, #40]	; (8004390 <lv_obj_allocate_spec_attr+0x34>)
        obj->spec_attr = lv_mem_alloc(sizeof(_lv_obj_spec_attr_t));
 8004366:	201c      	movs	r0, #28
        x++;
 8004368:	6813      	ldr	r3, [r2, #0]
 800436a:	3301      	adds	r3, #1
 800436c:	6013      	str	r3, [r2, #0]
        obj->spec_attr = lv_mem_alloc(sizeof(_lv_obj_spec_attr_t));
 800436e:	f013 fb63 	bl	8017a38 <lv_mem_alloc>
 8004372:	60a0      	str	r0, [r4, #8]
        LV_ASSERT_MALLOC(obj->spec_attr);
 8004374:	b900      	cbnz	r0, 8004378 <lv_obj_allocate_spec_attr+0x1c>
 8004376:	e7fe      	b.n	8004376 <lv_obj_allocate_spec_attr+0x1a>
        lv_memset_00(obj->spec_attr, sizeof(_lv_obj_spec_attr_t));
 8004378:	211c      	movs	r1, #28
 800437a:	f013 fbdb 	bl	8017b34 <lv_memset_00>
        obj->spec_attr->scroll_dir = LV_DIR_ALL;
 800437e:	68a2      	ldr	r2, [r4, #8]
        obj->spec_attr->scrollbar_mode = LV_SCROLLBAR_MODE_AUTO;
 8004380:	8b13      	ldrh	r3, [r2, #24]
 8004382:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 8004386:	f043 0303 	orr.w	r3, r3, #3
 800438a:	8313      	strh	r3, [r2, #24]
}
 800438c:	bd10      	pop	{r4, pc}
 800438e:	bf00      	nop
 8004390:	200029ac 	.word	0x200029ac

08004394 <lv_obj_check_type>:
    if(obj == NULL) return false;
 8004394:	b118      	cbz	r0, 800439e <lv_obj_check_type+0xa>
    return obj->class_p == class_p ? true : false;
 8004396:	6800      	ldr	r0, [r0, #0]
 8004398:	1a43      	subs	r3, r0, r1
 800439a:	4258      	negs	r0, r3
 800439c:	4158      	adcs	r0, r3
}
 800439e:	4770      	bx	lr

080043a0 <lv_obj_construct>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void lv_obj_construct(lv_obj_t * obj)
{
 80043a0:	b570      	push	{r4, r5, r6, lr}
    const lv_obj_class_t * original_class_p = obj->class_p;
 80043a2:	6805      	ldr	r5, [r0, #0]
{
 80043a4:	4604      	mov	r4, r0

    if(obj->class_p->base_class) {
 80043a6:	682b      	ldr	r3, [r5, #0]
 80043a8:	b113      	cbz	r3, 80043b0 <lv_obj_construct+0x10>
        /*Don't let the descendant methods run during constructing the ancestor type*/
        obj->class_p = obj->class_p->base_class;
 80043aa:	6003      	str	r3, [r0, #0]

        /*Construct the base first*/
        lv_obj_construct(obj);
 80043ac:	f7ff fff8 	bl	80043a0 <lv_obj_construct>
    }

    /*Restore the original class*/
    obj->class_p = original_class_p;

    if(obj->class_p->constructor_cb) obj->class_p->constructor_cb(obj->class_p, obj);
 80043b0:	686b      	ldr	r3, [r5, #4]
    obj->class_p = original_class_p;
 80043b2:	6025      	str	r5, [r4, #0]
    if(obj->class_p->constructor_cb) obj->class_p->constructor_cb(obj->class_p, obj);
 80043b4:	b123      	cbz	r3, 80043c0 <lv_obj_construct+0x20>
 80043b6:	4621      	mov	r1, r4
 80043b8:	4628      	mov	r0, r5
}
 80043ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    if(obj->class_p->constructor_cb) obj->class_p->constructor_cb(obj->class_p, obj);
 80043be:	4718      	bx	r3
}
 80043c0:	bd70      	pop	{r4, r5, r6, pc}
	...

080043c4 <lv_obj_class_create_obj>:
{
 80043c4:	b573      	push	{r0, r1, r4, r5, r6, lr}

static uint32_t get_instance_size(const lv_obj_class_t * class_p)
{
    /*Find a base in which instance size is set*/
    const lv_obj_class_t * base = class_p;
 80043c6:	4603      	mov	r3, r0
{
 80043c8:	4606      	mov	r6, r0
 80043ca:	460d      	mov	r5, r1
    while(base && base->instance_size == 0) base = base->base_class;
 80043cc:	4a32      	ldr	r2, [pc, #200]	; (8004498 <lv_obj_class_create_obj+0xd4>)
 80043ce:	b13b      	cbz	r3, 80043e0 <lv_obj_class_create_obj+0x1c>
 80043d0:	6999      	ldr	r1, [r3, #24]
 80043d2:	420a      	tst	r2, r1
 80043d4:	d002      	beq.n	80043dc <lv_obj_class_create_obj+0x18>

    if(base == NULL) return 0;  /*Never happens: set at least in `lv_obj` class*/

    return base->instance_size;
 80043d6:	f3c1 110f 	ubfx	r1, r1, #4, #16
 80043da:	e002      	b.n	80043e2 <lv_obj_class_create_obj+0x1e>
    while(base && base->instance_size == 0) base = base->base_class;
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	e7f6      	b.n	80043ce <lv_obj_class_create_obj+0xa>
    if(base == NULL) return 0;  /*Never happens: set at least in `lv_obj` class*/
 80043e0:	4619      	mov	r1, r3
    lv_obj_t * obj = lv_mem_alloc(s);
 80043e2:	4608      	mov	r0, r1
 80043e4:	9101      	str	r1, [sp, #4]
 80043e6:	f013 fb27 	bl	8017a38 <lv_mem_alloc>
    if(obj == NULL) return NULL;
 80043ea:	9901      	ldr	r1, [sp, #4]
 80043ec:	4604      	mov	r4, r0
 80043ee:	b918      	cbnz	r0, 80043f8 <lv_obj_class_create_obj+0x34>
 80043f0:	2400      	movs	r4, #0
}
 80043f2:	4620      	mov	r0, r4
 80043f4:	b002      	add	sp, #8
 80043f6:	bd70      	pop	{r4, r5, r6, pc}
    lv_memset_00(obj, s);
 80043f8:	f013 fb9c 	bl	8017b34 <lv_memset_00>
    obj->parent = parent;
 80043fc:	e9c4 6500 	strd	r6, r5, [r4]
    if(parent == NULL) {
 8004400:	bb45      	cbnz	r5, 8004454 <lv_obj_class_create_obj+0x90>
        lv_disp_t * disp = lv_disp_get_default();
 8004402:	f012 fa51 	bl	80168a8 <lv_disp_get_default>
        if(!disp) {
 8004406:	4605      	mov	r5, r0
 8004408:	2800      	cmp	r0, #0
 800440a:	d0f1      	beq.n	80043f0 <lv_obj_class_create_obj+0x2c>
        if(disp->screens == NULL) {
 800440c:	68c0      	ldr	r0, [r0, #12]
 800440e:	b998      	cbnz	r0, 8004438 <lv_obj_class_create_obj+0x74>
            disp->screens = lv_mem_alloc(sizeof(lv_obj_t *));
 8004410:	2004      	movs	r0, #4
 8004412:	f013 fb11 	bl	8017a38 <lv_mem_alloc>
            disp->screen_cnt = 1;
 8004416:	2301      	movs	r3, #1
            disp->screens = lv_mem_alloc(sizeof(lv_obj_t *));
 8004418:	60e8      	str	r0, [r5, #12]
            disp->screens[0] = obj;
 800441a:	6004      	str	r4, [r0, #0]
            disp->screen_cnt = 1;
 800441c:	626b      	str	r3, [r5, #36]	; 0x24
        obj->coords.x1 = 0;
 800441e:	2500      	movs	r5, #0
        obj->coords.x2 = lv_disp_get_hor_res(NULL) - 1;
 8004420:	4628      	mov	r0, r5
        obj->coords.x1 = 0;
 8004422:	6165      	str	r5, [r4, #20]
        obj->coords.x2 = lv_disp_get_hor_res(NULL) - 1;
 8004424:	f012 fa46 	bl	80168b4 <lv_disp_get_hor_res>
 8004428:	3801      	subs	r0, #1
 800442a:	8320      	strh	r0, [r4, #24]
        obj->coords.y2 = lv_disp_get_ver_res(NULL) - 1;
 800442c:	4628      	mov	r0, r5
 800442e:	f012 fa51 	bl	80168d4 <lv_disp_get_ver_res>
 8004432:	3801      	subs	r0, #1
 8004434:	8360      	strh	r0, [r4, #26]
 8004436:	e7dc      	b.n	80043f2 <lv_obj_class_create_obj+0x2e>
            disp->screen_cnt++;
 8004438:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800443a:	3101      	adds	r1, #1
 800443c:	6269      	str	r1, [r5, #36]	; 0x24
            disp->screens = lv_mem_realloc(disp->screens, sizeof(lv_obj_t *) * disp->screen_cnt);
 800443e:	0089      	lsls	r1, r1, #2
 8004440:	f013 fb10 	bl	8017a64 <lv_mem_realloc>
            disp->screens[disp->screen_cnt - 1] = obj;
 8004444:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            disp->screens = lv_mem_realloc(disp->screens, sizeof(lv_obj_t *) * disp->screen_cnt);
 8004446:	60e8      	str	r0, [r5, #12]
            disp->screens[disp->screen_cnt - 1] = obj;
 8004448:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800444c:	3b01      	subs	r3, #1
 800444e:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
 8004452:	e7e4      	b.n	800441e <lv_obj_class_create_obj+0x5a>
        if(parent->spec_attr == NULL) {
 8004454:	68ab      	ldr	r3, [r5, #8]
 8004456:	b913      	cbnz	r3, 800445e <lv_obj_class_create_obj+0x9a>
            lv_obj_allocate_spec_attr(parent);
 8004458:	4628      	mov	r0, r5
 800445a:	f7ff ff7f 	bl	800435c <lv_obj_allocate_spec_attr>
        if(parent->spec_attr->children == NULL) {
 800445e:	68ae      	ldr	r6, [r5, #8]
 8004460:	6830      	ldr	r0, [r6, #0]
 8004462:	b948      	cbnz	r0, 8004478 <lv_obj_class_create_obj+0xb4>
            parent->spec_attr->children = lv_mem_alloc(sizeof(lv_obj_t *));
 8004464:	2004      	movs	r0, #4
 8004466:	f013 fae7 	bl	8017a38 <lv_mem_alloc>
            parent->spec_attr->children[0] = obj;
 800446a:	68ab      	ldr	r3, [r5, #8]
            parent->spec_attr->children = lv_mem_alloc(sizeof(lv_obj_t *));
 800446c:	6030      	str	r0, [r6, #0]
            parent->spec_attr->children[0] = obj;
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	6014      	str	r4, [r2, #0]
            parent->spec_attr->child_cnt = 1;
 8004472:	2201      	movs	r2, #1
 8004474:	605a      	str	r2, [r3, #4]
 8004476:	e7bc      	b.n	80043f2 <lv_obj_class_create_obj+0x2e>
            parent->spec_attr->child_cnt++;
 8004478:	6871      	ldr	r1, [r6, #4]
 800447a:	3101      	adds	r1, #1
 800447c:	6071      	str	r1, [r6, #4]
            parent->spec_attr->children = lv_mem_realloc(parent->spec_attr->children, sizeof(lv_obj_t *) * parent->spec_attr->child_cnt);
 800447e:	0089      	lsls	r1, r1, #2
 8004480:	f013 faf0 	bl	8017a64 <lv_mem_realloc>
            parent->spec_attr->children[parent->spec_attr->child_cnt - 1] = obj;
 8004484:	68aa      	ldr	r2, [r5, #8]
            parent->spec_attr->children = lv_mem_realloc(parent->spec_attr->children, sizeof(lv_obj_t *) * parent->spec_attr->child_cnt);
 8004486:	6030      	str	r0, [r6, #0]
            parent->spec_attr->children[parent->spec_attr->child_cnt - 1] = obj;
 8004488:	6853      	ldr	r3, [r2, #4]
 800448a:	6812      	ldr	r2, [r2, #0]
 800448c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004490:	3b01      	subs	r3, #1
 8004492:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
 8004496:	e7ac      	b.n	80043f2 <lv_obj_class_create_obj+0x2e>
 8004498:	000ffff0 	.word	0x000ffff0

0800449c <_lv_obj_destructor>:
{
 800449c:	b510      	push	{r4, lr}
 800449e:	4604      	mov	r4, r0
    if(obj->class_p->destructor_cb) obj->class_p->destructor_cb(obj->class_p, obj);
 80044a0:	6820      	ldr	r0, [r4, #0]
 80044a2:	6883      	ldr	r3, [r0, #8]
 80044a4:	b10b      	cbz	r3, 80044aa <_lv_obj_destructor+0xe>
 80044a6:	4621      	mov	r1, r4
 80044a8:	4798      	blx	r3
    if(obj->class_p->base_class) {
 80044aa:	6823      	ldr	r3, [r4, #0]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	b10b      	cbz	r3, 80044b4 <_lv_obj_destructor+0x18>
        obj->class_p = obj->class_p->base_class;
 80044b0:	6023      	str	r3, [r4, #0]
        _lv_obj_destructor(obj);
 80044b2:	e7f5      	b.n	80044a0 <_lv_obj_destructor+0x4>
}
 80044b4:	bd10      	pop	{r4, pc}

080044b6 <lv_obj_is_editable>:
    while(class_p && class_p->editable == LV_OBJ_CLASS_EDITABLE_INHERIT) class_p = class_p->base_class;
 80044b6:	6800      	ldr	r0, [r0, #0]
 80044b8:	b130      	cbz	r0, 80044c8 <lv_obj_is_editable+0x12>
 80044ba:	7e03      	ldrb	r3, [r0, #24]
 80044bc:	f013 0303 	ands.w	r3, r3, #3
 80044c0:	d0f9      	beq.n	80044b6 <lv_obj_is_editable>
    return class_p->editable == LV_OBJ_CLASS_EDITABLE_TRUE ? true : false;
 80044c2:	3b01      	subs	r3, #1
 80044c4:	4258      	negs	r0, r3
 80044c6:	4158      	adcs	r0, r3
}
 80044c8:	4770      	bx	lr

080044ca <lv_obj_is_group_def>:
    while(class_p && class_p->group_def == LV_OBJ_CLASS_GROUP_DEF_INHERIT) class_p = class_p->base_class;
 80044ca:	6800      	ldr	r0, [r0, #0]
 80044cc:	b130      	cbz	r0, 80044dc <lv_obj_is_group_def+0x12>
 80044ce:	7e03      	ldrb	r3, [r0, #24]
 80044d0:	f013 030c 	ands.w	r3, r3, #12
 80044d4:	d0f9      	beq.n	80044ca <lv_obj_is_group_def>
    return class_p->group_def == LV_OBJ_CLASS_GROUP_DEF_TRUE ? true : false;
 80044d6:	3b04      	subs	r3, #4
 80044d8:	4258      	negs	r0, r3
 80044da:	4158      	adcs	r0, r3
}
 80044dc:	4770      	bx	lr

080044de <lv_obj_class_init_obj>:
{
 80044de:	b510      	push	{r4, lr}
 80044e0:	4604      	mov	r4, r0
    lv_obj_mark_layout_as_dirty(obj);
 80044e2:	f000 fc2e 	bl	8004d42 <lv_obj_mark_layout_as_dirty>
    lv_obj_enable_style_refresh(false);
 80044e6:	2000      	movs	r0, #0
 80044e8:	f002 ff38 	bl	800735c <lv_obj_enable_style_refresh>
    lv_theme_apply(obj);
 80044ec:	4620      	mov	r0, r4
 80044ee:	f004 f931 	bl	8008754 <lv_theme_apply>
    lv_obj_construct(obj);
 80044f2:	4620      	mov	r0, r4
 80044f4:	f7ff ff54 	bl	80043a0 <lv_obj_construct>
    lv_obj_enable_style_refresh(true);
 80044f8:	2001      	movs	r0, #1
 80044fa:	f002 ff2f 	bl	800735c <lv_obj_enable_style_refresh>
    lv_obj_refresh_style(obj, LV_PART_ANY, LV_STYLE_PROP_ANY);
 80044fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004502:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8004506:	4620      	mov	r0, r4
 8004508:	f002 fcaa 	bl	8006e60 <lv_obj_refresh_style>
    lv_obj_refresh_self_size(obj);
 800450c:	4620      	mov	r0, r4
 800450e:	f000 fd3e 	bl	8004f8e <lv_obj_refresh_self_size>
    lv_group_t * def_group = lv_group_get_default();
 8004512:	f7fd fdd5 	bl	80020c0 <lv_group_get_default>
    if(def_group && lv_obj_is_group_def(obj)) {
 8004516:	4602      	mov	r2, r0
 8004518:	b138      	cbz	r0, 800452a <lv_obj_class_init_obj+0x4c>
 800451a:	4620      	mov	r0, r4
 800451c:	f7ff ffd5 	bl	80044ca <lv_obj_is_group_def>
 8004520:	b118      	cbz	r0, 800452a <lv_obj_class_init_obj+0x4c>
        lv_group_add_obj(def_group, obj);
 8004522:	4621      	mov	r1, r4
 8004524:	4610      	mov	r0, r2
 8004526:	f7fd fdfd 	bl	8002124 <lv_group_add_obj>
    lv_obj_t * parent = lv_obj_get_parent(obj);
 800452a:	4620      	mov	r0, r4
 800452c:	f003 fa66 	bl	80079fc <lv_obj_get_parent>
    if(parent) {
 8004530:	b140      	cbz	r0, 8004544 <lv_obj_class_init_obj+0x66>
        lv_event_send(parent, LV_EVENT_CHILD_CHANGED, obj);
 8004532:	4622      	mov	r2, r4
 8004534:	2122      	movs	r1, #34	; 0x22
 8004536:	f7fd fcc7 	bl	8001ec8 <lv_event_send>
        lv_obj_invalidate(obj);
 800453a:	4620      	mov	r0, r4
}
 800453c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        lv_obj_invalidate(obj);
 8004540:	f000 bdea 	b.w	8005118 <lv_obj_invalidate>
}
 8004544:	bd10      	pop	{r4, pc}

08004546 <lv_obj_get_style_opa>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OPA);
 8004546:	f240 4262 	movw	r2, #1122	; 0x462
{
 800454a:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OPA);
 800454c:	f002 ff0c 	bl	8007368 <lv_obj_get_style_prop>
}
 8004550:	b2c0      	uxtb	r0, r0
 8004552:	bd08      	pop	{r3, pc}

08004554 <lv_obj_get_style_blend_mode>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BLEND_MODE);
 8004554:	2268      	movs	r2, #104	; 0x68
{
 8004556:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BLEND_MODE);
 8004558:	f002 ff06 	bl	8007368 <lv_obj_get_style_prop>
}
 800455c:	b2c0      	uxtb	r0, r0
 800455e:	bd08      	pop	{r3, pc}

08004560 <lv_obj_init_draw_rect_dsc>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_obj_init_draw_rect_dsc(lv_obj_t * obj, uint32_t part, lv_draw_rect_dsc_t * draw_dsc)
{
 8004560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004564:	4614      	mov	r4, r2
 8004566:	460d      	mov	r5, r1
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_RADIUS);
 8004568:	2260      	movs	r2, #96	; 0x60
 800456a:	4606      	mov	r6, r0
 800456c:	f002 fefc 	bl	8007368 <lv_obj_get_style_prop>

#if LV_DRAW_COMPLEX
    draw_dsc->radius = lv_obj_get_style_radius(obj, part);
 8004570:	8020      	strh	r0, [r4, #0]

    lv_opa_t main_opa = part != LV_PART_MAIN ? lv_obj_get_style_opa(obj, part) : LV_OPA_COVER;
 8004572:	b1bd      	cbz	r5, 80045a4 <lv_obj_init_draw_rect_dsc+0x44>
 8004574:	4629      	mov	r1, r5
 8004576:	4630      	mov	r0, r6
 8004578:	f7ff ffe5 	bl	8004546 <lv_obj_get_style_opa>
 800457c:	4680      	mov	r8, r0
    lv_opa_t opa = lv_obj_get_style_opa(obj, part);
 800457e:	4629      	mov	r1, r5
 8004580:	4630      	mov	r0, r6
 8004582:	f7ff ffe0 	bl	8004546 <lv_obj_get_style_opa>
    if(opa <= LV_OPA_MIN || main_opa <= LV_OPA_MIN) {
 8004586:	2802      	cmp	r0, #2
    lv_opa_t opa = lv_obj_get_style_opa(obj, part);
 8004588:	4607      	mov	r7, r0
    if(opa <= LV_OPA_MIN || main_opa <= LV_OPA_MIN) {
 800458a:	d902      	bls.n	8004592 <lv_obj_init_draw_rect_dsc+0x32>
 800458c:	f1b8 0f02 	cmp.w	r8, #2
 8004590:	d80b      	bhi.n	80045aa <lv_obj_init_draw_rect_dsc+0x4a>
        draw_dsc->bg_opa = LV_OPA_TRANSP;
 8004592:	2300      	movs	r3, #0
 8004594:	72a3      	strb	r3, [r4, #10]
        draw_dsc->border_opa = LV_OPA_TRANSP;
 8004596:	77a3      	strb	r3, [r4, #30]
        draw_dsc->shadow_opa = LV_OPA_TRANSP;
 8004598:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
        draw_dsc->outline_opa = LV_OPA_TRANSP;
 800459c:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
               }
            }
        }
    }
#endif
}
 80045a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    lv_opa_t main_opa = part != LV_PART_MAIN ? lv_obj_get_style_opa(obj, part) : LV_OPA_COVER;
 80045a4:	f04f 08ff 	mov.w	r8, #255	; 0xff
 80045a8:	e7e9      	b.n	800457e <lv_obj_init_draw_rect_dsc+0x1e>
    draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
 80045aa:	4629      	mov	r1, r5
 80045ac:	4630      	mov	r0, r6
 80045ae:	f7ff ffd1 	bl	8004554 <lv_obj_get_style_blend_mode>
    if(draw_dsc->bg_opa != LV_OPA_TRANSP) {
 80045b2:	7aa3      	ldrb	r3, [r4, #10]
    draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
 80045b4:	70a0      	strb	r0, [r4, #2]
    if(draw_dsc->bg_opa != LV_OPA_TRANSP) {
 80045b6:	b363      	cbz	r3, 8004612 <lv_obj_init_draw_rect_dsc+0xb2>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_OPA);
 80045b8:	2221      	movs	r2, #33	; 0x21
 80045ba:	4629      	mov	r1, r5
 80045bc:	4630      	mov	r0, r6
 80045be:	f002 fed3 	bl	8007368 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 80045c2:	b2c0      	uxtb	r0, r0
        if(draw_dsc->bg_opa > LV_OPA_MIN) {
 80045c4:	2802      	cmp	r0, #2
        draw_dsc->bg_opa = lv_obj_get_style_bg_opa(obj, part);
 80045c6:	72a0      	strb	r0, [r4, #10]
        if(draw_dsc->bg_opa > LV_OPA_MIN) {
 80045c8:	d923      	bls.n	8004612 <lv_obj_init_draw_rect_dsc+0xb2>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_COLOR_FILTERED);
 80045ca:	f244 0220 	movw	r2, #16416	; 0x4020
 80045ce:	4629      	mov	r1, r5
 80045d0:	4630      	mov	r0, r6
 80045d2:	f002 fec9 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_GRAD_DIR);
 80045d6:	2223      	movs	r2, #35	; 0x23
            draw_dsc->bg_color = lv_obj_get_style_bg_color_filtered(obj, part);
 80045d8:	80a0      	strh	r0, [r4, #4]
 80045da:	4629      	mov	r1, r5
 80045dc:	4630      	mov	r0, r6
 80045de:	f002 fec3 	bl	8007368 <lv_obj_get_style_prop>
            draw_dsc->bg_grad_dir =  lv_obj_get_style_bg_grad_dir(obj, part);
 80045e2:	7ae3      	ldrb	r3, [r4, #11]
 80045e4:	f360 0302 	bfi	r3, r0, #0, #3
 80045e8:	72e3      	strb	r3, [r4, #11]
            if(draw_dsc->bg_grad_dir != LV_GRAD_DIR_NONE) {
 80045ea:	075b      	lsls	r3, r3, #29
 80045ec:	d011      	beq.n	8004612 <lv_obj_init_draw_rect_dsc+0xb2>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_GRAD_COLOR);
 80045ee:	2222      	movs	r2, #34	; 0x22
 80045f0:	4629      	mov	r1, r5
 80045f2:	4630      	mov	r0, r6
 80045f4:	f002 feb8 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_MAIN_STOP);
 80045f8:	2224      	movs	r2, #36	; 0x24
 80045fa:	4629      	mov	r1, r5
                draw_dsc->bg_grad_color = lv_obj_get_style_bg_grad_color(obj, part);
 80045fc:	80e0      	strh	r0, [r4, #6]
 80045fe:	4630      	mov	r0, r6
 8004600:	f002 feb2 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_GRAD_STOP);
 8004604:	2225      	movs	r2, #37	; 0x25
                draw_dsc->bg_main_color_stop =  lv_obj_get_style_bg_main_stop(obj, part);
 8004606:	7220      	strb	r0, [r4, #8]
 8004608:	4629      	mov	r1, r5
 800460a:	4630      	mov	r0, r6
 800460c:	f002 feac 	bl	8007368 <lv_obj_get_style_prop>
                draw_dsc->bg_grad_color_stop =  lv_obj_get_style_bg_grad_stop(obj, part);
 8004610:	7260      	strb	r0, [r4, #9]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8004612:	f241 0232 	movw	r2, #4146	; 0x1032
 8004616:	4629      	mov	r1, r5
 8004618:	4630      	mov	r0, r6
 800461a:	f002 fea5 	bl	8007368 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800461e:	b200      	sxth	r0, r0
    draw_dsc->border_width = lv_obj_get_style_border_width(obj, part);
 8004620:	83a0      	strh	r0, [r4, #28]
    if(draw_dsc->border_width) {
 8004622:	b1d0      	cbz	r0, 800465a <lv_obj_init_draw_rect_dsc+0xfa>
        if(draw_dsc->border_opa != LV_OPA_TRANSP) {
 8004624:	7fa3      	ldrb	r3, [r4, #30]
 8004626:	b1c3      	cbz	r3, 800465a <lv_obj_init_draw_rect_dsc+0xfa>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_OPA);
 8004628:	2231      	movs	r2, #49	; 0x31
 800462a:	4629      	mov	r1, r5
 800462c:	4630      	mov	r0, r6
 800462e:	f002 fe9b 	bl	8007368 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8004632:	b2c0      	uxtb	r0, r0
            if(draw_dsc->border_opa > LV_OPA_MIN) {
 8004634:	2802      	cmp	r0, #2
            draw_dsc->border_opa = lv_obj_get_style_border_opa(obj, part);
 8004636:	77a0      	strb	r0, [r4, #30]
            if(draw_dsc->border_opa > LV_OPA_MIN) {
 8004638:	d90f      	bls.n	800465a <lv_obj_init_draw_rect_dsc+0xfa>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_SIDE);
 800463a:	2233      	movs	r2, #51	; 0x33
 800463c:	4629      	mov	r1, r5
 800463e:	4630      	mov	r0, r6
 8004640:	f002 fe92 	bl	8007368 <lv_obj_get_style_prop>
                draw_dsc->border_side = lv_obj_get_style_border_side(obj, part);
 8004644:	7fe3      	ldrb	r3, [r4, #31]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_COLOR_FILTERED);
 8004646:	f244 0230 	movw	r2, #16432	; 0x4030
 800464a:	4629      	mov	r1, r5
 800464c:	f360 0345 	bfi	r3, r0, #1, #5
 8004650:	4630      	mov	r0, r6
 8004652:	77e3      	strb	r3, [r4, #31]
 8004654:	f002 fe88 	bl	8007368 <lv_obj_get_style_prop>
                draw_dsc->border_color = lv_obj_get_style_border_color_filtered(obj, part);
 8004658:	8360      	strh	r0, [r4, #26]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_WIDTH);
 800465a:	f640 023a 	movw	r2, #2106	; 0x83a
 800465e:	4629      	mov	r1, r5
 8004660:	4630      	mov	r0, r6
 8004662:	f002 fe81 	bl	8007368 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8004666:	b200      	sxth	r0, r0
    draw_dsc->outline_width = lv_obj_get_style_outline_width(obj, part);
 8004668:	8460      	strh	r0, [r4, #34]	; 0x22
    if(draw_dsc->outline_width) {
 800466a:	b1d0      	cbz	r0, 80046a2 <lv_obj_init_draw_rect_dsc+0x142>
        if(draw_dsc->outline_opa != LV_OPA_TRANSP) {
 800466c:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8004670:	b1bb      	cbz	r3, 80046a2 <lv_obj_init_draw_rect_dsc+0x142>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_OPA);
 8004672:	f640 023c 	movw	r2, #2108	; 0x83c
 8004676:	4629      	mov	r1, r5
 8004678:	4630      	mov	r0, r6
 800467a:	f002 fe75 	bl	8007368 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 800467e:	b2c0      	uxtb	r0, r0
            if(draw_dsc->outline_opa > LV_OPA_MIN) {
 8004680:	2802      	cmp	r0, #2
            draw_dsc->outline_opa = lv_obj_get_style_outline_opa(obj, part);
 8004682:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
            if(draw_dsc->outline_opa > LV_OPA_MIN) {
 8004686:	d90c      	bls.n	80046a2 <lv_obj_init_draw_rect_dsc+0x142>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_PAD);
 8004688:	f640 023d 	movw	r2, #2109	; 0x83d
 800468c:	4629      	mov	r1, r5
 800468e:	4630      	mov	r0, r6
 8004690:	f002 fe6a 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_COLOR);
 8004694:	223b      	movs	r2, #59	; 0x3b
                draw_dsc->outline_pad = lv_obj_get_style_outline_pad(obj, part);
 8004696:	84a0      	strh	r0, [r4, #36]	; 0x24
 8004698:	4629      	mov	r1, r5
 800469a:	4630      	mov	r0, r6
 800469c:	f002 fe64 	bl	8007368 <lv_obj_get_style_prop>
                draw_dsc->outline_color = lv_obj_get_style_outline_color(obj, part);
 80046a0:	8420      	strh	r0, [r4, #32]
    if(draw_dsc->bg_img_opa != LV_OPA_TRANSP) {
 80046a2:	7da3      	ldrb	r3, [r4, #22]
 80046a4:	b313      	cbz	r3, 80046ec <lv_obj_init_draw_rect_dsc+0x18c>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_IMG_SRC);
 80046a6:	2226      	movs	r2, #38	; 0x26
 80046a8:	4629      	mov	r1, r5
 80046aa:	4630      	mov	r0, r6
 80046ac:	f002 fe5c 	bl	8007368 <lv_obj_get_style_prop>
        draw_dsc->bg_img_src = lv_obj_get_style_bg_img_src(obj, part);
 80046b0:	60e0      	str	r0, [r4, #12]
        if(draw_dsc->bg_img_src) {
 80046b2:	b1d8      	cbz	r0, 80046ec <lv_obj_init_draw_rect_dsc+0x18c>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_IMG_OPA);
 80046b4:	2227      	movs	r2, #39	; 0x27
 80046b6:	4629      	mov	r1, r5
 80046b8:	4630      	mov	r0, r6
 80046ba:	f002 fe55 	bl	8007368 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 80046be:	b2c0      	uxtb	r0, r0
            if(draw_dsc->bg_img_opa > LV_OPA_MIN) {
 80046c0:	2802      	cmp	r0, #2
            draw_dsc->bg_img_opa = lv_obj_get_style_bg_img_opa(obj, part);
 80046c2:	75a0      	strb	r0, [r4, #22]
            if(draw_dsc->bg_img_opa > LV_OPA_MIN) {
 80046c4:	d912      	bls.n	80046ec <lv_obj_init_draw_rect_dsc+0x18c>
                if(lv_img_src_get_type(draw_dsc->bg_img_src) == LV_IMG_SRC_SYMBOL) {
 80046c6:	68e0      	ldr	r0, [r4, #12]
 80046c8:	f005 ff08 	bl	800a4dc <lv_img_src_get_type>
 80046cc:	2802      	cmp	r0, #2
 80046ce:	d169      	bne.n	80047a4 <lv_obj_init_draw_rect_dsc+0x244>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 80046d0:	f241 4259 	movw	r2, #5209	; 0x1459
 80046d4:	4629      	mov	r1, r5
 80046d6:	4630      	mov	r0, r6
 80046d8:	f002 fe46 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_COLOR);
 80046dc:	f240 4257 	movw	r2, #1111	; 0x457
                    draw_dsc->bg_img_symbol_font= lv_obj_get_style_text_font(obj, part);
 80046e0:	6120      	str	r0, [r4, #16]
 80046e2:	4629      	mov	r1, r5
 80046e4:	4630      	mov	r0, r6
 80046e6:	f002 fe3f 	bl	8007368 <lv_obj_get_style_prop>
                    draw_dsc->bg_img_recolor = lv_obj_get_style_text_color(obj, part);
 80046ea:	82a0      	strh	r0, [r4, #20]
    if(draw_dsc->shadow_opa) {
 80046ec:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 80046f0:	b39b      	cbz	r3, 800475a <lv_obj_init_draw_rect_dsc+0x1fa>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_WIDTH);
 80046f2:	f44f 6204 	mov.w	r2, #2112	; 0x840
 80046f6:	4629      	mov	r1, r5
 80046f8:	4630      	mov	r0, r6
 80046fa:	f002 fe35 	bl	8007368 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80046fe:	b200      	sxth	r0, r0
        draw_dsc->shadow_width = lv_obj_get_style_shadow_width(obj, part);
 8004700:	8560      	strh	r0, [r4, #42]	; 0x2a
        if(draw_dsc->shadow_width) {
 8004702:	b350      	cbz	r0, 800475a <lv_obj_init_draw_rect_dsc+0x1fa>
            if(draw_dsc->shadow_opa > LV_OPA_MIN) {
 8004704:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 8004708:	2b02      	cmp	r3, #2
 800470a:	d926      	bls.n	800475a <lv_obj_init_draw_rect_dsc+0x1fa>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OPA);
 800470c:	f640 0245 	movw	r2, #2117	; 0x845
 8004710:	4629      	mov	r1, r5
 8004712:	4630      	mov	r0, r6
 8004714:	f002 fe28 	bl	8007368 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8004718:	b2c0      	uxtb	r0, r0
                if(draw_dsc->shadow_opa > LV_OPA_MIN) {
 800471a:	2802      	cmp	r0, #2
                draw_dsc->shadow_opa = lv_obj_get_style_shadow_opa(obj, part);
 800471c:	f884 0032 	strb.w	r0, [r4, #50]	; 0x32
                if(draw_dsc->shadow_opa > LV_OPA_MIN) {
 8004720:	d91b      	bls.n	800475a <lv_obj_init_draw_rect_dsc+0x1fa>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OFS_X);
 8004722:	f640 0241 	movw	r2, #2113	; 0x841
 8004726:	4629      	mov	r1, r5
 8004728:	4630      	mov	r0, r6
 800472a:	f002 fe1d 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OFS_Y);
 800472e:	f640 0242 	movw	r2, #2114	; 0x842
 8004732:	4629      	mov	r1, r5
                    draw_dsc->shadow_ofs_x = lv_obj_get_style_shadow_ofs_x(obj, part);
 8004734:	85a0      	strh	r0, [r4, #44]	; 0x2c
 8004736:	4630      	mov	r0, r6
 8004738:	f002 fe16 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_SPREAD);
 800473c:	f640 0243 	movw	r2, #2115	; 0x843
 8004740:	4629      	mov	r1, r5
                    draw_dsc->shadow_ofs_y = lv_obj_get_style_shadow_ofs_y(obj, part);
 8004742:	85e0      	strh	r0, [r4, #46]	; 0x2e
 8004744:	4630      	mov	r0, r6
 8004746:	f002 fe0f 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_COLOR_FILTERED);
 800474a:	f244 0244 	movw	r2, #16452	; 0x4044
                    draw_dsc->shadow_spread = lv_obj_get_style_shadow_spread(obj, part);
 800474e:	8620      	strh	r0, [r4, #48]	; 0x30
 8004750:	4629      	mov	r1, r5
 8004752:	4630      	mov	r0, r6
 8004754:	f002 fe08 	bl	8007368 <lv_obj_get_style_prop>
                    draw_dsc->shadow_color = lv_obj_get_style_shadow_color_filtered(obj, part);
 8004758:	8520      	strh	r0, [r4, #40]	; 0x28
    if(main_opa < LV_OPA_MAX) {
 800475a:	f1b8 0ffc 	cmp.w	r8, #252	; 0xfc
 800475e:	d837      	bhi.n	80047d0 <lv_obj_init_draw_rect_dsc+0x270>
        opa = (uint16_t)((uint16_t) main_opa * opa) >> 8;
 8004760:	fb18 f707 	smulbb	r7, r8, r7
 8004764:	f3c7 2707 	ubfx	r7, r7, #8, #8
        draw_dsc->bg_opa = (uint16_t)((uint16_t)draw_dsc->bg_opa * opa) >> 8;
 8004768:	b2bf      	uxth	r7, r7
 800476a:	7aa3      	ldrb	r3, [r4, #10]
        draw_dsc->outline_opa = (uint16_t)((uint16_t)draw_dsc->outline_opa * opa) >> 8;
 800476c:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
        draw_dsc->bg_opa = (uint16_t)((uint16_t)draw_dsc->bg_opa * opa) >> 8;
 8004770:	fb13 f307 	smulbb	r3, r3, r7
 8004774:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8004778:	72a3      	strb	r3, [r4, #10]
        draw_dsc->border_opa = (uint16_t)((uint16_t)draw_dsc->border_opa * opa) >> 8;
 800477a:	7fa3      	ldrb	r3, [r4, #30]
 800477c:	fb13 f307 	smulbb	r3, r3, r7
 8004780:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8004784:	77a3      	strb	r3, [r4, #30]
        draw_dsc->shadow_opa = (uint16_t)((uint16_t)draw_dsc->shadow_opa * opa) >> 8;
 8004786:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 800478a:	fb13 f307 	smulbb	r3, r3, r7
        draw_dsc->outline_opa = (uint16_t)((uint16_t)draw_dsc->outline_opa * opa) >> 8;
 800478e:	fb10 f707 	smulbb	r7, r0, r7
        draw_dsc->shadow_opa = (uint16_t)((uint16_t)draw_dsc->shadow_opa * opa) >> 8;
 8004792:	f3c3 2307 	ubfx	r3, r3, #8, #8
        draw_dsc->outline_opa = (uint16_t)((uint16_t)draw_dsc->outline_opa * opa) >> 8;
 8004796:	f3c7 2707 	ubfx	r7, r7, #8, #8
        draw_dsc->shadow_opa = (uint16_t)((uint16_t)draw_dsc->shadow_opa * opa) >> 8;
 800479a:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
        draw_dsc->outline_opa = (uint16_t)((uint16_t)draw_dsc->outline_opa * opa) >> 8;
 800479e:	f884 7026 	strb.w	r7, [r4, #38]	; 0x26
 80047a2:	e6fd      	b.n	80045a0 <lv_obj_init_draw_rect_dsc+0x40>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_IMG_RECOLOR);
 80047a4:	2228      	movs	r2, #40	; 0x28
 80047a6:	4629      	mov	r1, r5
 80047a8:	4630      	mov	r0, r6
 80047aa:	f002 fddd 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_IMG_RECOLOR_OPA);
 80047ae:	2229      	movs	r2, #41	; 0x29
 80047b0:	4629      	mov	r1, r5
                    draw_dsc->bg_img_recolor = lv_obj_get_style_bg_img_recolor(obj, part);
 80047b2:	82a0      	strh	r0, [r4, #20]
 80047b4:	4630      	mov	r0, r6
 80047b6:	f002 fdd7 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_IMG_TILED);
 80047ba:	222a      	movs	r2, #42	; 0x2a
                    draw_dsc->bg_img_recolor_opa = lv_obj_get_style_bg_img_recolor_opa(obj, part);
 80047bc:	75e0      	strb	r0, [r4, #23]
 80047be:	4629      	mov	r1, r5
 80047c0:	4630      	mov	r0, r6
 80047c2:	f002 fdd1 	bl	8007368 <lv_obj_get_style_prop>
    return (bool)v.num;
 80047c6:	3800      	subs	r0, #0
 80047c8:	bf18      	it	ne
 80047ca:	2001      	movne	r0, #1
                    draw_dsc->bg_img_tiled = lv_obj_get_style_bg_img_tiled(obj, part);
 80047cc:	7620      	strb	r0, [r4, #24]
 80047ce:	e78d      	b.n	80046ec <lv_obj_init_draw_rect_dsc+0x18c>
    if(opa < LV_OPA_MAX) {
 80047d0:	2ffc      	cmp	r7, #252	; 0xfc
 80047d2:	f63f aee5 	bhi.w	80045a0 <lv_obj_init_draw_rect_dsc+0x40>
 80047d6:	e7c7      	b.n	8004768 <lv_obj_init_draw_rect_dsc+0x208>

080047d8 <lv_obj_init_draw_label_dsc>:

void lv_obj_init_draw_label_dsc(lv_obj_t * obj, uint32_t part, lv_draw_label_dsc_t * draw_dsc)
{
 80047d8:	b570      	push	{r4, r5, r6, lr}
 80047da:	4614      	mov	r4, r2
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_OPA);
 80047dc:	f44f 628b 	mov.w	r2, #1112	; 0x458
 80047e0:	4605      	mov	r5, r0
 80047e2:	460e      	mov	r6, r1
 80047e4:	f002 fdc0 	bl	8007368 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 80047e8:	b2c0      	uxtb	r0, r0
    draw_dsc->opa = lv_obj_get_style_text_opa(obj, part);
    if(draw_dsc->opa <= LV_OPA_MIN) return;
 80047ea:	2802      	cmp	r0, #2
    draw_dsc->opa = lv_obj_get_style_text_opa(obj, part);
 80047ec:	76a0      	strb	r0, [r4, #26]
    if(draw_dsc->opa <= LV_OPA_MIN) return;
 80047ee:	d952      	bls.n	8004896 <lv_obj_init_draw_label_dsc+0xbe>

    lv_opa_t opa = lv_obj_get_style_opa(obj, part);
 80047f0:	4631      	mov	r1, r6
 80047f2:	4628      	mov	r0, r5
 80047f4:	f7ff fea7 	bl	8004546 <lv_obj_get_style_opa>
    if(opa < LV_OPA_MAX) {
 80047f8:	28fc      	cmp	r0, #252	; 0xfc
        draw_dsc->opa = (uint16_t)((uint16_t)draw_dsc->opa * opa) >> 8;
 80047fa:	bf9f      	itttt	ls
 80047fc:	7ea3      	ldrbls	r3, [r4, #26]
 80047fe:	fb13 f000 	smulbbls	r0, r3, r0
 8004802:	f3c0 2007 	ubfxls	r0, r0, #8, #8
 8004806:	76a0      	strbls	r0, [r4, #26]
    }
    if(draw_dsc->opa <= LV_OPA_MIN) return;
 8004808:	7ea3      	ldrb	r3, [r4, #26]
 800480a:	2b02      	cmp	r3, #2
 800480c:	d943      	bls.n	8004896 <lv_obj_init_draw_label_dsc+0xbe>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_COLOR_FILTERED);
 800480e:	f244 4257 	movw	r2, #17495	; 0x4457
 8004812:	4631      	mov	r1, r6
 8004814:	4628      	mov	r0, r5
 8004816:	f002 fda7 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 800481a:	f241 425a 	movw	r2, #5210	; 0x145a
 800481e:	4631      	mov	r1, r6

    draw_dsc->color = lv_obj_get_style_text_color_filtered(obj, part);
 8004820:	81a0      	strh	r0, [r4, #12]
 8004822:	4628      	mov	r0, r5
 8004824:	f002 fda0 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 8004828:	f241 425b 	movw	r2, #5211	; 0x145b
 800482c:	4631      	mov	r1, r6
    draw_dsc->letter_space = lv_obj_get_style_text_letter_space(obj, part);
 800482e:	82a0      	strh	r0, [r4, #20]
 8004830:	4628      	mov	r0, r5
 8004832:	f002 fd99 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_DECOR);
 8004836:	f240 425c 	movw	r2, #1116	; 0x45c
 800483a:	4631      	mov	r1, r6
    draw_dsc->line_space = lv_obj_get_style_text_line_space(obj, part);
 800483c:	8260      	strh	r0, [r4, #18]
 800483e:	4628      	mov	r0, r5
 8004840:	f002 fd92 	bl	8007368 <lv_obj_get_style_prop>
    draw_dsc->decor = lv_obj_get_style_text_decor(obj, part);
 8004844:	7f63      	ldrb	r3, [r4, #29]
#if LV_DRAW_COMPLEX
    draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
 8004846:	4631      	mov	r1, r6
    draw_dsc->decor = lv_obj_get_style_text_decor(obj, part);
 8004848:	f360 0384 	bfi	r3, r0, #2, #3
    draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
 800484c:	4628      	mov	r0, r5
    draw_dsc->decor = lv_obj_get_style_text_decor(obj, part);
 800484e:	7763      	strb	r3, [r4, #29]
    draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
 8004850:	f7ff fe80 	bl	8004554 <lv_obj_get_style_blend_mode>
 8004854:	7f63      	ldrb	r3, [r4, #29]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8004856:	f241 4259 	movw	r2, #5209	; 0x1459
 800485a:	4631      	mov	r1, r6
 800485c:	f360 1347 	bfi	r3, r0, #5, #3
 8004860:	4628      	mov	r0, r5
 8004862:	7763      	strb	r3, [r4, #29]
 8004864:	f002 fd80 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_ALIGN);
 8004868:	f241 425d 	movw	r2, #5213	; 0x145d
#endif

    draw_dsc->font = lv_obj_get_style_text_font(obj, part);
 800486c:	6020      	str	r0, [r4, #0]
 800486e:	4631      	mov	r1, r6
 8004870:	4628      	mov	r0, r5
 8004872:	f002 fd79 	bl	8007368 <lv_obj_get_style_prop>

#if LV_USE_BIDI
    draw_dsc->bidi_dir = lv_obj_get_style_base_dir(obj, LV_PART_MAIN);
#endif

    draw_dsc->align = lv_obj_get_style_text_align(obj, part);
 8004876:	7f62      	ldrb	r2, [r4, #29]
 8004878:	f360 0201 	bfi	r2, r0, #0, #2
    if(draw_dsc->align == LV_TEXT_ALIGN_AUTO) {
 800487c:	b2d3      	uxtb	r3, r2
    draw_dsc->align = lv_obj_get_style_text_align(obj, part);
 800487e:	7762      	strb	r2, [r4, #29]
    if(draw_dsc->align == LV_TEXT_ALIGN_AUTO) {
 8004880:	0792      	lsls	r2, r2, #30
 8004882:	d108      	bne.n	8004896 <lv_obj_init_draw_label_dsc+0xbe>
        if(draw_dsc->bidi_dir == LV_BASE_DIR_RTL) draw_dsc->align = LV_TEXT_ALIGN_RIGHT;
 8004884:	7ee2      	ldrb	r2, [r4, #27]
 8004886:	2a01      	cmp	r2, #1
        else draw_dsc->align = LV_TEXT_ALIGN_LEFT;
 8004888:	bf16      	itet	ne
 800488a:	2201      	movne	r2, #1
        if(draw_dsc->bidi_dir == LV_BASE_DIR_RTL) draw_dsc->align = LV_TEXT_ALIGN_RIGHT;
 800488c:	f043 0303 	orreq.w	r3, r3, #3
        else draw_dsc->align = LV_TEXT_ALIGN_LEFT;
 8004890:	f362 0301 	bfine	r3, r2, #0, #2
 8004894:	7763      	strb	r3, [r4, #29]
    }
}
 8004896:	bd70      	pop	{r4, r5, r6, pc}

08004898 <lv_obj_init_draw_img_dsc>:

void lv_obj_init_draw_img_dsc(lv_obj_t * obj, uint32_t part, lv_draw_img_dsc_t * draw_dsc)
{
 8004898:	b570      	push	{r4, r5, r6, lr}
 800489a:	4614      	mov	r4, r2
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_IMG_OPA);
 800489c:	2246      	movs	r2, #70	; 0x46
 800489e:	4605      	mov	r5, r0
 80048a0:	460e      	mov	r6, r1
 80048a2:	f002 fd61 	bl	8007368 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 80048a6:	b2c0      	uxtb	r0, r0
    draw_dsc->opa = lv_obj_get_style_img_opa(obj, part);
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
 80048a8:	2802      	cmp	r0, #2
    draw_dsc->opa = lv_obj_get_style_img_opa(obj, part);
 80048aa:	72e0      	strb	r0, [r4, #11]
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
 80048ac:	d93b      	bls.n	8004926 <lv_obj_init_draw_img_dsc+0x8e>

    lv_opa_t opa_scale = lv_obj_get_style_opa(obj, part);
 80048ae:	4631      	mov	r1, r6
 80048b0:	4628      	mov	r0, r5
 80048b2:	f7ff fe48 	bl	8004546 <lv_obj_get_style_opa>
    if(opa_scale < LV_OPA_MAX) {
 80048b6:	28fc      	cmp	r0, #252	; 0xfc
        draw_dsc->opa = (uint16_t)((uint16_t)draw_dsc->opa * opa_scale) >> 8;
 80048b8:	bf9f      	itttt	ls
 80048ba:	7ae3      	ldrbls	r3, [r4, #11]
 80048bc:	fb13 f000 	smulbbls	r0, r3, r0
 80048c0:	f3c0 2007 	ubfxls	r0, r0, #8, #8
 80048c4:	72e0      	strbls	r0, [r4, #11]
    }
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
 80048c6:	7ae3      	ldrb	r3, [r4, #11]
 80048c8:	2b02      	cmp	r3, #2
 80048ca:	d92c      	bls.n	8004926 <lv_obj_init_draw_img_dsc+0x8e>

    draw_dsc->angle = 0;
 80048cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_IMG_RECOLOR_OPA);
 80048d0:	4631      	mov	r1, r6
 80048d2:	4628      	mov	r0, r5
 80048d4:	6023      	str	r3, [r4, #0]
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80048d6:	8b2b      	ldrh	r3, [r5, #24]
 80048d8:	8aaa      	ldrh	r2, [r5, #20]
 80048da:	3301      	adds	r3, #1
 80048dc:	1a9b      	subs	r3, r3, r2
    draw_dsc->zoom = LV_IMG_ZOOM_NONE;
    draw_dsc->pivot.x = lv_area_get_width(&obj->coords) / 2;
 80048de:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 80048e2:	fa02 f383 	sxtah	r3, r2, r3
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80048e6:	8aea      	ldrh	r2, [r5, #22]
 80048e8:	105b      	asrs	r3, r3, #1
 80048ea:	80a3      	strh	r3, [r4, #4]
 80048ec:	8b6b      	ldrh	r3, [r5, #26]
 80048ee:	3301      	adds	r3, #1
 80048f0:	1a9b      	subs	r3, r3, r2
    draw_dsc->pivot.y = lv_area_get_height(&obj->coords) / 2;
 80048f2:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 80048f6:	fa02 f383 	sxtah	r3, r2, r3
 80048fa:	2248      	movs	r2, #72	; 0x48
 80048fc:	105b      	asrs	r3, r3, #1
 80048fe:	80e3      	strh	r3, [r4, #6]
 8004900:	f002 fd32 	bl	8007368 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8004904:	b2c0      	uxtb	r0, r0

    draw_dsc->recolor_opa = lv_obj_get_style_img_recolor_opa(obj, part);
 8004906:	72a0      	strb	r0, [r4, #10]
    if(draw_dsc->recolor_opa > 0) {
 8004908:	b128      	cbz	r0, 8004916 <lv_obj_init_draw_img_dsc+0x7e>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_IMG_RECOLOR);
 800490a:	2247      	movs	r2, #71	; 0x47
 800490c:	4631      	mov	r1, r6
 800490e:	4628      	mov	r0, r5
 8004910:	f002 fd2a 	bl	8007368 <lv_obj_get_style_prop>
        draw_dsc->recolor = lv_obj_get_style_img_recolor(obj, part);
 8004914:	8120      	strh	r0, [r4, #8]
    }
#if LV_DRAW_COMPLEX
    draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
 8004916:	4631      	mov	r1, r6
 8004918:	4628      	mov	r0, r5
 800491a:	f7ff fe1b 	bl	8004554 <lv_obj_get_style_blend_mode>
 800491e:	7b23      	ldrb	r3, [r4, #12]
 8004920:	f360 0303 	bfi	r3, r0, #0, #4
 8004924:	7323      	strb	r3, [r4, #12]
#endif
}
 8004926:	bd70      	pop	{r4, r5, r6, pc}

08004928 <lv_obj_init_draw_line_dsc>:

void lv_obj_init_draw_line_dsc(lv_obj_t * obj, uint32_t part, lv_draw_line_dsc_t * draw_dsc)
{
 8004928:	b570      	push	{r4, r5, r6, lr}
 800492a:	4614      	mov	r4, r2
}

static inline lv_coord_t lv_obj_get_style_line_width(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LINE_WIDTH);
 800492c:	f640 0249 	movw	r2, #2121	; 0x849
 8004930:	4605      	mov	r5, r0
 8004932:	460e      	mov	r6, r1
 8004934:	f002 fd18 	bl	8007368 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8004938:	b200      	sxth	r0, r0
    draw_dsc->width = lv_obj_get_style_line_width(obj, part);
 800493a:	8060      	strh	r0, [r4, #2]
    if(draw_dsc->width == 0) return;
 800493c:	2800      	cmp	r0, #0
 800493e:	d040      	beq.n	80049c2 <lv_obj_init_draw_line_dsc+0x9a>
    return v.color;
}

static inline lv_opa_t lv_obj_get_style_line_opa(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LINE_OPA);
 8004940:	224e      	movs	r2, #78	; 0x4e
 8004942:	4631      	mov	r1, r6
 8004944:	4628      	mov	r0, r5
 8004946:	f002 fd0f 	bl	8007368 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 800494a:	b2c0      	uxtb	r0, r0

    draw_dsc->opa = lv_obj_get_style_line_opa(obj, part);
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
 800494c:	2802      	cmp	r0, #2
    draw_dsc->opa = lv_obj_get_style_line_opa(obj, part);
 800494e:	7220      	strb	r0, [r4, #8]
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
 8004950:	d937      	bls.n	80049c2 <lv_obj_init_draw_line_dsc+0x9a>

    lv_opa_t opa = lv_obj_get_style_opa(obj, part);
 8004952:	4631      	mov	r1, r6
 8004954:	4628      	mov	r0, r5
 8004956:	f7ff fdf6 	bl	8004546 <lv_obj_get_style_opa>
    if(opa < LV_OPA_MAX) {
 800495a:	28fc      	cmp	r0, #252	; 0xfc
        draw_dsc->opa = (uint16_t)((uint16_t)draw_dsc->opa * opa) >> 8;
 800495c:	bf9f      	itttt	ls
 800495e:	7a23      	ldrbls	r3, [r4, #8]
 8004960:	fb13 f000 	smulbbls	r0, r3, r0
 8004964:	f3c0 2007 	ubfxls	r0, r0, #8, #8
 8004968:	7220      	strbls	r0, [r4, #8]
    }
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
 800496a:	7a23      	ldrb	r3, [r4, #8]
 800496c:	2b02      	cmp	r3, #2
 800496e:	d928      	bls.n	80049c2 <lv_obj_init_draw_line_dsc+0x9a>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LINE_COLOR);
 8004970:	224d      	movs	r2, #77	; 0x4d
 8004972:	4631      	mov	r1, r6
 8004974:	4628      	mov	r0, r5
 8004976:	f002 fcf7 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LINE_DASH_WIDTH);
 800497a:	224a      	movs	r2, #74	; 0x4a

    draw_dsc->color = lv_obj_get_style_line_color(obj, part);
 800497c:	8020      	strh	r0, [r4, #0]
 800497e:	4631      	mov	r1, r6
 8004980:	4628      	mov	r0, r5
 8004982:	f002 fcf1 	bl	8007368 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8004986:	b200      	sxth	r0, r0

    draw_dsc->dash_width = lv_obj_get_style_line_dash_width(obj, part);
 8004988:	80a0      	strh	r0, [r4, #4]
    if(draw_dsc->dash_width) {
 800498a:	b128      	cbz	r0, 8004998 <lv_obj_init_draw_line_dsc+0x70>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LINE_DASH_GAP);
 800498c:	224b      	movs	r2, #75	; 0x4b
 800498e:	4631      	mov	r1, r6
 8004990:	4628      	mov	r0, r5
 8004992:	f002 fce9 	bl	8007368 <lv_obj_get_style_prop>
        draw_dsc->dash_gap = lv_obj_get_style_line_dash_gap(obj, part);
 8004996:	80e0      	strh	r0, [r4, #6]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LINE_ROUNDED);
 8004998:	224c      	movs	r2, #76	; 0x4c
 800499a:	4631      	mov	r1, r6
 800499c:	4628      	mov	r0, r5
 800499e:	f002 fce3 	bl	8007368 <lv_obj_get_style_prop>
    }

    draw_dsc->round_start = lv_obj_get_style_line_rounded(obj, part);
 80049a2:	7a63      	ldrb	r3, [r4, #9]
 80049a4:	f000 0001 	and.w	r0, r0, #1
    draw_dsc->round_end = draw_dsc->round_start;

#if LV_DRAW_COMPLEX
    draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
 80049a8:	4631      	mov	r1, r6
    draw_dsc->round_start = lv_obj_get_style_line_rounded(obj, part);
 80049aa:	f360 0382 	bfi	r3, r0, #2, #1
    draw_dsc->round_end = draw_dsc->round_start;
 80049ae:	f360 03c3 	bfi	r3, r0, #3, #1
    draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
 80049b2:	4628      	mov	r0, r5
    draw_dsc->round_end = draw_dsc->round_start;
 80049b4:	7263      	strb	r3, [r4, #9]
    draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
 80049b6:	f7ff fdcd 	bl	8004554 <lv_obj_get_style_blend_mode>
 80049ba:	7a63      	ldrb	r3, [r4, #9]
 80049bc:	f360 0301 	bfi	r3, r0, #0, #2
 80049c0:	7263      	strb	r3, [r4, #9]
#endif
}
 80049c2:	bd70      	pop	{r4, r5, r6, pc}

080049c4 <lv_obj_init_draw_arc_dsc>:

void lv_obj_init_draw_arc_dsc(lv_obj_t * obj, uint32_t part, lv_draw_arc_dsc_t * draw_dsc)
{
 80049c4:	b570      	push	{r4, r5, r6, lr}
 80049c6:	4614      	mov	r4, r2
}

static inline lv_coord_t lv_obj_get_style_arc_width(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_WIDTH);
 80049c8:	f44f 6205 	mov.w	r2, #2128	; 0x850
 80049cc:	4605      	mov	r5, r0
 80049ce:	460e      	mov	r6, r1
 80049d0:	f002 fcca 	bl	8007368 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80049d4:	b200      	sxth	r0, r0
    draw_dsc->width = lv_obj_get_style_arc_width(obj, part);
 80049d6:	8060      	strh	r0, [r4, #2]
    if(draw_dsc->width == 0) return;
 80049d8:	b3a0      	cbz	r0, 8004a44 <lv_obj_init_draw_arc_dsc+0x80>
    return v.color;
}

static inline lv_opa_t lv_obj_get_style_arc_opa(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_OPA);
 80049da:	2253      	movs	r2, #83	; 0x53
 80049dc:	4631      	mov	r1, r6
 80049de:	4628      	mov	r0, r5
 80049e0:	f002 fcc2 	bl	8007368 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 80049e4:	b2c0      	uxtb	r0, r0

    draw_dsc->opa = lv_obj_get_style_arc_opa(obj, part);
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
 80049e6:	2802      	cmp	r0, #2
    draw_dsc->opa = lv_obj_get_style_arc_opa(obj, part);
 80049e8:	7220      	strb	r0, [r4, #8]
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
 80049ea:	d92b      	bls.n	8004a44 <lv_obj_init_draw_arc_dsc+0x80>

    lv_opa_t opa = lv_obj_get_style_opa(obj, part);
 80049ec:	4631      	mov	r1, r6
 80049ee:	4628      	mov	r0, r5
 80049f0:	f7ff fda9 	bl	8004546 <lv_obj_get_style_opa>
    if(opa < LV_OPA_MAX) {
 80049f4:	28fc      	cmp	r0, #252	; 0xfc
        draw_dsc->opa = (uint16_t)((uint16_t)draw_dsc->opa * opa) >> 8;
 80049f6:	bf9f      	itttt	ls
 80049f8:	7a23      	ldrbls	r3, [r4, #8]
 80049fa:	fb13 f000 	smulbbls	r0, r3, r0
 80049fe:	f3c0 2007 	ubfxls	r0, r0, #8, #8
 8004a02:	7220      	strbls	r0, [r4, #8]
    }
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
 8004a04:	7a23      	ldrb	r3, [r4, #8]
 8004a06:	2b02      	cmp	r3, #2
 8004a08:	d91c      	bls.n	8004a44 <lv_obj_init_draw_arc_dsc+0x80>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_COLOR);
 8004a0a:	2252      	movs	r2, #82	; 0x52
 8004a0c:	4631      	mov	r1, r6
 8004a0e:	4628      	mov	r0, r5
 8004a10:	f002 fcaa 	bl	8007368 <lv_obj_get_style_prop>
}

static inline const void * lv_obj_get_style_arc_img_src(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_IMG_SRC);
 8004a14:	2254      	movs	r2, #84	; 0x54
 8004a16:	4631      	mov	r1, r6

    draw_dsc->color = lv_obj_get_style_arc_color(obj, part);
 8004a18:	8020      	strh	r0, [r4, #0]
 8004a1a:	4628      	mov	r0, r5
 8004a1c:	f002 fca4 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_ROUNDED);
 8004a20:	2251      	movs	r2, #81	; 0x51
 8004a22:	4631      	mov	r1, r6
    draw_dsc->img_src = lv_obj_get_style_arc_img_src(obj, part);
 8004a24:	6060      	str	r0, [r4, #4]
 8004a26:	4628      	mov	r0, r5
 8004a28:	f002 fc9e 	bl	8007368 <lv_obj_get_style_prop>

    draw_dsc->rounded = lv_obj_get_style_arc_rounded(obj, part);
 8004a2c:	7a63      	ldrb	r3, [r4, #9]

#if LV_DRAW_COMPLEX
    draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
 8004a2e:	4631      	mov	r1, r6
    draw_dsc->rounded = lv_obj_get_style_arc_rounded(obj, part);
 8004a30:	f360 0382 	bfi	r3, r0, #2, #1
    draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
 8004a34:	4628      	mov	r0, r5
    draw_dsc->rounded = lv_obj_get_style_arc_rounded(obj, part);
 8004a36:	7263      	strb	r3, [r4, #9]
    draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
 8004a38:	f7ff fd8c 	bl	8004554 <lv_obj_get_style_blend_mode>
 8004a3c:	7a63      	ldrb	r3, [r4, #9]
 8004a3e:	f360 0301 	bfi	r3, r0, #0, #2
 8004a42:	7263      	strb	r3, [r4, #9]
#endif
}
 8004a44:	bd70      	pop	{r4, r5, r6, pc}

08004a46 <lv_obj_calculate_ext_draw_size>:

lv_coord_t lv_obj_calculate_ext_draw_size(lv_obj_t * obj, uint32_t part)
{
 8004a46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_WIDTH);
 8004a48:	f44f 6204 	mov.w	r2, #2112	; 0x840
 8004a4c:	4605      	mov	r5, r0
 8004a4e:	460e      	mov	r6, r1
 8004a50:	f002 fc8a 	bl	8007368 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8004a54:	b207      	sxth	r7, r0
    lv_coord_t s = 0;

    lv_coord_t sh_width = lv_obj_get_style_shadow_width(obj, part);
    if(sh_width) {
 8004a56:	bba7      	cbnz	r7, 8004ac2 <lv_obj_calculate_ext_draw_size+0x7c>
    lv_coord_t s = 0;
 8004a58:	2400      	movs	r4, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_WIDTH);
 8004a5a:	f640 023a 	movw	r2, #2106	; 0x83a
 8004a5e:	4631      	mov	r1, r6
 8004a60:	4628      	mov	r0, r5
 8004a62:	f002 fc81 	bl	8007368 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8004a66:	b207      	sxth	r7, r0
            s = LV_MAX(s, sh_width);
        }
    }

    lv_coord_t outline_width = lv_obj_get_style_outline_width(obj, part);
    if(outline_width) {
 8004a68:	b1a7      	cbz	r7, 8004a94 <lv_obj_calculate_ext_draw_size+0x4e>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_OPA);
 8004a6a:	f640 023c 	movw	r2, #2108	; 0x83c
 8004a6e:	4631      	mov	r1, r6
 8004a70:	4628      	mov	r0, r5
 8004a72:	f002 fc79 	bl	8007368 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8004a76:	b2c0      	uxtb	r0, r0
        lv_opa_t outline_opa = lv_obj_get_style_outline_opa(obj, part);
        if(outline_opa > LV_OPA_MIN) {
 8004a78:	2802      	cmp	r0, #2
 8004a7a:	d90b      	bls.n	8004a94 <lv_obj_calculate_ext_draw_size+0x4e>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_PAD);
 8004a7c:	f640 023d 	movw	r2, #2109	; 0x83d
 8004a80:	4631      	mov	r1, r6
 8004a82:	4628      	mov	r0, r5
 8004a84:	f002 fc70 	bl	8007368 <lv_obj_get_style_prop>
            lv_coord_t outline_pad = lv_obj_get_style_outline_pad(obj, part);
            s = LV_MAX(s, outline_pad + outline_width);
 8004a88:	fa07 f080 	sxtah	r0, r7, r0
 8004a8c:	4284      	cmp	r4, r0
 8004a8e:	bfb8      	it	lt
 8004a90:	4604      	movlt	r4, r0
 8004a92:	b224      	sxth	r4, r4
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 8004a94:	4631      	mov	r1, r6
 8004a96:	f640 020a 	movw	r2, #2058	; 0x80a
 8004a9a:	4628      	mov	r0, r5
 8004a9c:	f002 fc64 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 8004aa0:	f640 020b 	movw	r2, #2059	; 0x80b
    return (lv_coord_t)v.num;
 8004aa4:	b207      	sxth	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 8004aa6:	4631      	mov	r1, r6
 8004aa8:	4628      	mov	r0, r5
 8004aaa:	f002 fc5d 	bl	8007368 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8004aae:	b200      	sxth	r0, r0
        }
    }

    lv_coord_t w = lv_obj_get_style_transform_width(obj, part);
    lv_coord_t h = lv_obj_get_style_transform_height(obj, part);
    lv_coord_t wh = LV_MAX(w, h);
 8004ab0:	42b8      	cmp	r0, r7
 8004ab2:	bfb8      	it	lt
 8004ab4:	4638      	movlt	r0, r7
    if(wh > 0) s += wh;
 8004ab6:	2800      	cmp	r0, #0
 8004ab8:	bfc4      	itt	gt
 8004aba:	1824      	addgt	r4, r4, r0
 8004abc:	b224      	sxthgt	r4, r4

    return s;
}
 8004abe:	4620      	mov	r0, r4
 8004ac0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OPA);
 8004ac2:	f640 0245 	movw	r2, #2117	; 0x845
 8004ac6:	4631      	mov	r1, r6
 8004ac8:	4628      	mov	r0, r5
 8004aca:	f002 fc4d 	bl	8007368 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8004ace:	b2c0      	uxtb	r0, r0
        if(sh_opa > LV_OPA_MIN) {
 8004ad0:	2802      	cmp	r0, #2
 8004ad2:	d9c1      	bls.n	8004a58 <lv_obj_calculate_ext_draw_size+0x12>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_SPREAD);
 8004ad4:	f640 0243 	movw	r2, #2115	; 0x843
 8004ad8:	4631      	mov	r1, r6
 8004ada:	4628      	mov	r0, r5
            sh_width = sh_width / 2 + 1;    /*The blur adds only half width*/
 8004adc:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 8004ae0:	f002 fc42 	bl	8007368 <lv_obj_get_style_prop>
            sh_width += lv_obj_get_style_shadow_spread(obj, part);
 8004ae4:	3001      	adds	r0, #1
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OFS_X);
 8004ae6:	f640 0241 	movw	r2, #2113	; 0x841
 8004aea:	4631      	mov	r1, r6
 8004aec:	eb00 0767 	add.w	r7, r0, r7, asr #1
 8004af0:	4628      	mov	r0, r5
 8004af2:	f002 fc39 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OFS_Y);
 8004af6:	f640 0242 	movw	r2, #2114	; 0x842
 8004afa:	b2bc      	uxth	r4, r7
 8004afc:	4631      	mov	r1, r6
    return (lv_coord_t)v.num;
 8004afe:	b207      	sxth	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OFS_Y);
 8004b00:	4628      	mov	r0, r5
 8004b02:	f002 fc31 	bl	8007368 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8004b06:	b200      	sxth	r0, r0
            sh_width += LV_MAX(LV_ABS(sh_ofs_x), LV_ABS(sh_ofs_y));
 8004b08:	2800      	cmp	r0, #0
 8004b0a:	bfb8      	it	lt
 8004b0c:	4240      	neglt	r0, r0
 8004b0e:	2f00      	cmp	r7, #0
 8004b10:	bfb8      	it	lt
 8004b12:	427f      	neglt	r7, r7
 8004b14:	b280      	uxth	r0, r0
 8004b16:	b2bf      	uxth	r7, r7
 8004b18:	42b8      	cmp	r0, r7
 8004b1a:	bf2c      	ite	cs
 8004b1c:	1824      	addcs	r4, r4, r0
 8004b1e:	19e4      	addcc	r4, r4, r7
            s = LV_MAX(s, sh_width);
 8004b20:	b224      	sxth	r4, r4
 8004b22:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8004b26:	e798      	b.n	8004a5a <lv_obj_calculate_ext_draw_size+0x14>

08004b28 <lv_obj_draw_dsc_init>:

void lv_obj_draw_dsc_init(lv_obj_draw_part_dsc_t * dsc, const lv_area_t * clip_area)
{
 8004b28:	b538      	push	{r3, r4, r5, lr}
 8004b2a:	4604      	mov	r4, r0
 8004b2c:	460d      	mov	r5, r1
    lv_memset_00(dsc, sizeof(lv_obj_draw_part_dsc_t));
 8004b2e:	2148      	movs	r1, #72	; 0x48
 8004b30:	f013 f800 	bl	8017b34 <lv_memset_00>
    dsc->clip_area = clip_area;
 8004b34:	6025      	str	r5, [r4, #0]
}
 8004b36:	bd38      	pop	{r3, r4, r5, pc}

08004b38 <_lv_obj_get_ext_draw_size>:
    if(s_new != s_old) lv_obj_invalidate(obj);
}

lv_coord_t _lv_obj_get_ext_draw_size(const lv_obj_t * obj)
{
    if(obj->spec_attr) return obj->spec_attr->ext_draw_size;
 8004b38:	6880      	ldr	r0, [r0, #8]
 8004b3a:	b108      	cbz	r0, 8004b40 <_lv_obj_get_ext_draw_size+0x8>
 8004b3c:	f9b0 0016 	ldrsh.w	r0, [r0, #22]
    else return 0;
}
 8004b40:	4770      	bx	lr

08004b42 <lv_obj_refresh_ext_draw_size>:
{
 8004b42:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004b44:	4604      	mov	r4, r0
    lv_coord_t s_old = _lv_obj_get_ext_draw_size(obj);
 8004b46:	f7ff fff7 	bl	8004b38 <_lv_obj_get_ext_draw_size>
    lv_coord_t s_new = 0;
 8004b4a:	2300      	movs	r3, #0
    lv_coord_t s_old = _lv_obj_get_ext_draw_size(obj);
 8004b4c:	4605      	mov	r5, r0
    lv_event_send(obj, LV_EVENT_REFR_EXT_DRAW_SIZE, &s_new);
 8004b4e:	f10d 0206 	add.w	r2, sp, #6
 8004b52:	2113      	movs	r1, #19
 8004b54:	4620      	mov	r0, r4
    lv_coord_t s_new = 0;
 8004b56:	f8ad 3006 	strh.w	r3, [sp, #6]
    lv_event_send(obj, LV_EVENT_REFR_EXT_DRAW_SIZE, &s_new);
 8004b5a:	f7fd f9b5 	bl	8001ec8 <lv_event_send>
    if(s_new != s_old) lv_obj_invalidate(obj);
 8004b5e:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8004b62:	42ab      	cmp	r3, r5
 8004b64:	d002      	beq.n	8004b6c <lv_obj_refresh_ext_draw_size+0x2a>
 8004b66:	4620      	mov	r0, r4
 8004b68:	f000 fad6 	bl	8005118 <lv_obj_invalidate>
    if(obj->spec_attr) {
 8004b6c:	68a2      	ldr	r2, [r4, #8]
 8004b6e:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8004b72:	b14a      	cbz	r2, 8004b88 <lv_obj_refresh_ext_draw_size+0x46>
        obj->spec_attr->ext_draw_size = s_new;
 8004b74:	82d3      	strh	r3, [r2, #22]
    if(s_new != s_old) lv_obj_invalidate(obj);
 8004b76:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8004b7a:	42ab      	cmp	r3, r5
 8004b7c:	d002      	beq.n	8004b84 <lv_obj_refresh_ext_draw_size+0x42>
 8004b7e:	4620      	mov	r0, r4
 8004b80:	f000 faca 	bl	8005118 <lv_obj_invalidate>
}
 8004b84:	b003      	add	sp, #12
 8004b86:	bd30      	pop	{r4, r5, pc}
    else if(s_new != 0) {
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d0f4      	beq.n	8004b76 <lv_obj_refresh_ext_draw_size+0x34>
        lv_obj_allocate_spec_attr(obj);
 8004b8c:	4620      	mov	r0, r4
 8004b8e:	f7ff fbe5 	bl	800435c <lv_obj_allocate_spec_attr>
        obj->spec_attr->ext_draw_size = s_new;
 8004b92:	68a3      	ldr	r3, [r4, #8]
 8004b94:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8004b98:	82da      	strh	r2, [r3, #22]
 8004b9a:	e7ec      	b.n	8004b76 <lv_obj_refresh_ext_draw_size+0x34>

08004b9c <lv_obj_get_style_border_width.constprop.0>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8004b9c:	f241 0232 	movw	r2, #4146	; 0x1032
 8004ba0:	2100      	movs	r1, #0
static inline lv_coord_t lv_obj_get_style_border_width(const struct _lv_obj_t * obj, uint32_t part)
 8004ba2:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8004ba4:	f002 fbe0 	bl	8007368 <lv_obj_get_style_prop>
}
 8004ba8:	b200      	sxth	r0, r0
 8004baa:	bd08      	pop	{r3, pc}

08004bac <lv_obj_get_style_pad_left.constprop.0>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8004bac:	f241 0212 	movw	r2, #4114	; 0x1012
 8004bb0:	2100      	movs	r1, #0
static inline lv_coord_t lv_obj_get_style_pad_left(const struct _lv_obj_t * obj, uint32_t part)
 8004bb2:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8004bb4:	f002 fbd8 	bl	8007368 <lv_obj_get_style_prop>
}
 8004bb8:	b200      	sxth	r0, r0
 8004bba:	bd08      	pop	{r3, pc}

08004bbc <lv_obj_get_style_pad_top.constprop.0>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8004bbc:	f241 0210 	movw	r2, #4112	; 0x1010
 8004bc0:	2100      	movs	r1, #0
static inline lv_coord_t lv_obj_get_style_pad_top(const struct _lv_obj_t * obj, uint32_t part)
 8004bc2:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8004bc4:	f002 fbd0 	bl	8007368 <lv_obj_get_style_prop>
}
 8004bc8:	b200      	sxth	r0, r0
 8004bca:	bd08      	pop	{r3, pc}

08004bcc <lv_obj_set_width>:
    lv_obj_set_width(obj, w);
    lv_obj_set_height(obj, h);
}

void lv_obj_set_width(lv_obj_t * obj, lv_coord_t w)
{
 8004bcc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LV_ASSERT_OBJ(obj, MY_CLASS);
    lv_res_t res_w;
    lv_style_value_t v_w;

    res_w = lv_obj_get_local_style_prop(obj, LV_STYLE_WIDTH, &v_w, 0);
 8004bce:	2300      	movs	r3, #0
{
 8004bd0:	460c      	mov	r4, r1
    res_w = lv_obj_get_local_style_prop(obj, LV_STYLE_WIDTH, &v_w, 0);
 8004bd2:	aa01      	add	r2, sp, #4
 8004bd4:	f241 0101 	movw	r1, #4097	; 0x1001
{
 8004bd8:	4605      	mov	r5, r0
    res_w = lv_obj_get_local_style_prop(obj, LV_STYLE_WIDTH, &v_w, 0);
 8004bda:	f002 fd16 	bl	800760a <lv_obj_get_local_style_prop>

    if((res_w == LV_RES_OK && v_w.num != w) || res_w == LV_RES_INV) {
 8004bde:	2801      	cmp	r0, #1
 8004be0:	d104      	bne.n	8004bec <lv_obj_set_width+0x20>
 8004be2:	9b01      	ldr	r3, [sp, #4]
 8004be4:	42a3      	cmp	r3, r4
 8004be6:	d103      	bne.n	8004bf0 <lv_obj_set_width+0x24>
        lv_obj_set_style_width(obj, w, 0);
    }
}
 8004be8:	b003      	add	sp, #12
 8004bea:	bd30      	pop	{r4, r5, pc}
    if((res_w == LV_RES_OK && v_w.num != w) || res_w == LV_RES_INV) {
 8004bec:	2800      	cmp	r0, #0
 8004bee:	d1fb      	bne.n	8004be8 <lv_obj_set_width+0x1c>
static inline void lv_obj_set_style_width(struct _lv_obj_t * obj, lv_coord_t value, lv_style_selector_t selector)
{
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_WIDTH, v, selector);
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	4622      	mov	r2, r4
 8004bf4:	f241 0101 	movw	r1, #4097	; 0x1001
 8004bf8:	4628      	mov	r0, r5
 8004bfa:	f002 fc99 	bl	8007530 <lv_obj_set_local_style_prop>
}
 8004bfe:	e7f3      	b.n	8004be8 <lv_obj_set_width+0x1c>

08004c00 <lv_obj_set_height>:

void lv_obj_set_height(lv_obj_t * obj, lv_coord_t h)
{
 8004c00:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LV_ASSERT_OBJ(obj, MY_CLASS);
    lv_res_t res_h;
    lv_style_value_t v_h;

    res_h = lv_obj_get_local_style_prop(obj, LV_STYLE_HEIGHT, &v_h, 0);
 8004c02:	2300      	movs	r3, #0
{
 8004c04:	460c      	mov	r4, r1
    res_h = lv_obj_get_local_style_prop(obj, LV_STYLE_HEIGHT, &v_h, 0);
 8004c06:	aa01      	add	r2, sp, #4
 8004c08:	f241 0104 	movw	r1, #4100	; 0x1004
{
 8004c0c:	4605      	mov	r5, r0
    res_h = lv_obj_get_local_style_prop(obj, LV_STYLE_HEIGHT, &v_h, 0);
 8004c0e:	f002 fcfc 	bl	800760a <lv_obj_get_local_style_prop>

    if((res_h == LV_RES_OK && v_h.num != h) || res_h == LV_RES_INV) {
 8004c12:	2801      	cmp	r0, #1
 8004c14:	d104      	bne.n	8004c20 <lv_obj_set_height+0x20>
 8004c16:	9b01      	ldr	r3, [sp, #4]
 8004c18:	42a3      	cmp	r3, r4
 8004c1a:	d103      	bne.n	8004c24 <lv_obj_set_height+0x24>
        lv_obj_set_style_height(obj, h, 0);
    }
}
 8004c1c:	b003      	add	sp, #12
 8004c1e:	bd30      	pop	{r4, r5, pc}
    if((res_h == LV_RES_OK && v_h.num != h) || res_h == LV_RES_INV) {
 8004c20:	2800      	cmp	r0, #0
 8004c22:	d1fb      	bne.n	8004c1c <lv_obj_set_height+0x1c>
static inline void lv_obj_set_style_height(struct _lv_obj_t * obj, lv_coord_t value, lv_style_selector_t selector)
{
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_HEIGHT, v, selector);
 8004c24:	2300      	movs	r3, #0
 8004c26:	4622      	mov	r2, r4
 8004c28:	f241 0104 	movw	r1, #4100	; 0x1004
 8004c2c:	4628      	mov	r0, r5
 8004c2e:	f002 fc7f 	bl	8007530 <lv_obj_set_local_style_prop>
}
 8004c32:	e7f3      	b.n	8004c1c <lv_obj_set_height+0x1c>

08004c34 <lv_obj_set_size>:
{
 8004c34:	b538      	push	{r3, r4, r5, lr}
 8004c36:	4604      	mov	r4, r0
 8004c38:	4615      	mov	r5, r2
    lv_obj_set_width(obj, w);
 8004c3a:	f7ff ffc7 	bl	8004bcc <lv_obj_set_width>
    lv_obj_set_height(obj, h);
 8004c3e:	4629      	mov	r1, r5
 8004c40:	4620      	mov	r0, r4
}
 8004c42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_set_height(obj, h);
 8004c46:	f7ff bfdb 	b.w	8004c00 <lv_obj_set_height>

08004c4a <lv_obj_set_content_height>:

    lv_obj_set_width(obj, w + pleft + pright + 2 * border_width);
}

void lv_obj_set_content_height(lv_obj_t * obj, lv_coord_t h)
{
 8004c4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c4c:	4605      	mov	r5, r0
 8004c4e:	460c      	mov	r4, r1
    lv_coord_t ptop = lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 8004c50:	f7ff ffb4 	bl	8004bbc <lv_obj_get_style_pad_top.constprop.0>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8004c54:	2100      	movs	r1, #0
 8004c56:	4606      	mov	r6, r0
 8004c58:	f241 0211 	movw	r2, #4113	; 0x1011
 8004c5c:	4628      	mov	r0, r5
 8004c5e:	f002 fb83 	bl	8007368 <lv_obj_get_style_prop>
 8004c62:	4607      	mov	r7, r0
    lv_coord_t pbottom = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN);
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 8004c64:	4628      	mov	r0, r5
 8004c66:	f7ff ff99 	bl	8004b9c <lv_obj_get_style_border_width.constprop.0>

    lv_obj_set_height(obj, h + ptop + pbottom + 2 * border_width);
 8004c6a:	19e1      	adds	r1, r4, r7
 8004c6c:	198c      	adds	r4, r1, r6
 8004c6e:	eb04 0440 	add.w	r4, r4, r0, lsl #1
 8004c72:	4628      	mov	r0, r5
 8004c74:	b221      	sxth	r1, r4
}
 8004c76:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    lv_obj_set_height(obj, h + ptop + pbottom + 2 * border_width);
 8004c7a:	f7ff bfc1 	b.w	8004c00 <lv_obj_set_height>
	...

08004c80 <lv_obj_is_layout_positioned>:

    lv_obj_mark_layout_as_dirty(obj);
}

bool lv_obj_is_layout_positioned(const lv_obj_t * obj)
{
 8004c80:	b538      	push	{r3, r4, r5, lr}
    if(lv_obj_has_flag_any(obj, LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_FLOATING)) return false;
 8004c82:	490b      	ldr	r1, [pc, #44]	; (8004cb0 <lv_obj_is_layout_positioned+0x30>)
{
 8004c84:	4605      	mov	r5, r0
    if(lv_obj_has_flag_any(obj, LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_FLOATING)) return false;
 8004c86:	f7ff f8a3 	bl	8003dd0 <lv_obj_has_flag_any>
 8004c8a:	4604      	mov	r4, r0
 8004c8c:	b108      	cbz	r0, 8004c92 <lv_obj_is_layout_positioned+0x12>
 8004c8e:	2000      	movs	r0, #0
    if(parent == NULL) return false;

    uint32_t layout = lv_obj_get_style_layout(parent, LV_PART_MAIN);
    if(layout) return true;
    else return false;
}
 8004c90:	bd38      	pop	{r3, r4, r5, pc}
    lv_obj_t * parent = lv_obj_get_parent(obj);
 8004c92:	4628      	mov	r0, r5
 8004c94:	f002 feb2 	bl	80079fc <lv_obj_get_parent>
    if(parent == NULL) return false;
 8004c98:	2800      	cmp	r0, #0
 8004c9a:	d0f8      	beq.n	8004c8e <lv_obj_is_layout_positioned+0xe>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LAYOUT);
 8004c9c:	f241 0269 	movw	r2, #4201	; 0x1069
 8004ca0:	4621      	mov	r1, r4
 8004ca2:	f002 fb61 	bl	8007368 <lv_obj_get_style_prop>
    return (uint16_t)v.num;
 8004ca6:	b280      	uxth	r0, r0
    if(layout) return true;
 8004ca8:	3800      	subs	r0, #0
 8004caa:	bf18      	it	ne
 8004cac:	2001      	movne	r0, #1
 8004cae:	e7ef      	b.n	8004c90 <lv_obj_is_layout_positioned+0x10>
 8004cb0:	00018001 	.word	0x00018001

08004cb4 <lv_obj_set_x>:
{
 8004cb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004cb6:	4604      	mov	r4, r0
 8004cb8:	460d      	mov	r5, r1
    if(lv_obj_is_layout_positioned(obj)) {
 8004cba:	f7ff ffe1 	bl	8004c80 <lv_obj_is_layout_positioned>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	b950      	cbnz	r0, 8004cd8 <lv_obj_set_x+0x24>
    res_x = lv_obj_get_local_style_prop(obj, LV_STYLE_X, &v_x, 0);
 8004cc2:	aa01      	add	r2, sp, #4
 8004cc4:	f241 0107 	movw	r1, #4103	; 0x1007
 8004cc8:	4620      	mov	r0, r4
 8004cca:	f002 fc9e 	bl	800760a <lv_obj_get_local_style_prop>
    if((res_x == LV_RES_OK && v_x.num != x) || res_x == LV_RES_INV) {
 8004cce:	2801      	cmp	r0, #1
 8004cd0:	d104      	bne.n	8004cdc <lv_obj_set_x+0x28>
 8004cd2:	9b01      	ldr	r3, [sp, #4]
 8004cd4:	42ab      	cmp	r3, r5
 8004cd6:	d103      	bne.n	8004ce0 <lv_obj_set_x+0x2c>
}
 8004cd8:	b003      	add	sp, #12
 8004cda:	bd30      	pop	{r4, r5, pc}
    if((res_x == LV_RES_OK && v_x.num != x) || res_x == LV_RES_INV) {
 8004cdc:	2800      	cmp	r0, #0
 8004cde:	d1fb      	bne.n	8004cd8 <lv_obj_set_x+0x24>
static inline void lv_obj_set_style_x(struct _lv_obj_t * obj, lv_coord_t value, lv_style_selector_t selector)
{
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_X, v, selector);
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	462a      	mov	r2, r5
 8004ce4:	f241 0107 	movw	r1, #4103	; 0x1007
 8004ce8:	4620      	mov	r0, r4
 8004cea:	f002 fc21 	bl	8007530 <lv_obj_set_local_style_prop>
}
 8004cee:	e7f3      	b.n	8004cd8 <lv_obj_set_x+0x24>

08004cf0 <lv_obj_set_y>:
{
 8004cf0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004cf2:	4604      	mov	r4, r0
 8004cf4:	460d      	mov	r5, r1
    if(lv_obj_is_layout_positioned(obj)) {
 8004cf6:	f7ff ffc3 	bl	8004c80 <lv_obj_is_layout_positioned>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	b950      	cbnz	r0, 8004d14 <lv_obj_set_y+0x24>
    res_y = lv_obj_get_local_style_prop(obj, LV_STYLE_Y, &v_y, 0);
 8004cfe:	aa01      	add	r2, sp, #4
 8004d00:	f241 0108 	movw	r1, #4104	; 0x1008
 8004d04:	4620      	mov	r0, r4
 8004d06:	f002 fc80 	bl	800760a <lv_obj_get_local_style_prop>
    if((res_y == LV_RES_OK && v_y.num != y) || res_y == LV_RES_INV) {
 8004d0a:	2801      	cmp	r0, #1
 8004d0c:	d104      	bne.n	8004d18 <lv_obj_set_y+0x28>
 8004d0e:	9b01      	ldr	r3, [sp, #4]
 8004d10:	42ab      	cmp	r3, r5
 8004d12:	d103      	bne.n	8004d1c <lv_obj_set_y+0x2c>
}
 8004d14:	b003      	add	sp, #12
 8004d16:	bd30      	pop	{r4, r5, pc}
    if((res_y == LV_RES_OK && v_y.num != y) || res_y == LV_RES_INV) {
 8004d18:	2800      	cmp	r0, #0
 8004d1a:	d1fb      	bne.n	8004d14 <lv_obj_set_y+0x24>
static inline void lv_obj_set_style_y(struct _lv_obj_t * obj, lv_coord_t value, lv_style_selector_t selector)
{
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_Y, v, selector);
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	462a      	mov	r2, r5
 8004d20:	f241 0108 	movw	r1, #4104	; 0x1008
 8004d24:	4620      	mov	r0, r4
 8004d26:	f002 fc03 	bl	8007530 <lv_obj_set_local_style_prop>
}
 8004d2a:	e7f3      	b.n	8004d14 <lv_obj_set_y+0x24>

08004d2c <lv_obj_set_pos>:
{
 8004d2c:	b538      	push	{r3, r4, r5, lr}
 8004d2e:	4604      	mov	r4, r0
 8004d30:	4615      	mov	r5, r2
    lv_obj_set_x(obj, x);
 8004d32:	f7ff ffbf 	bl	8004cb4 <lv_obj_set_x>
    lv_obj_set_y(obj, y);
 8004d36:	4629      	mov	r1, r5
 8004d38:	4620      	mov	r0, r4
}
 8004d3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_set_y(obj, y);
 8004d3e:	f7ff bfd7 	b.w	8004cf0 <lv_obj_set_y>

08004d42 <lv_obj_mark_layout_as_dirty>:

void lv_obj_mark_layout_as_dirty(lv_obj_t * obj)
{
    obj->layout_inv = 1;
 8004d42:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
 8004d46:	f042 0201 	orr.w	r2, r2, #1
{
 8004d4a:	b508      	push	{r3, lr}
    obj->layout_inv = 1;
 8004d4c:	f880 2022 	strb.w	r2, [r0, #34]	; 0x22

    /*Mark the screen as dirty too to mark that there is an something to do on this screen*/
    lv_obj_t * scr = lv_obj_get_screen(obj);
 8004d50:	f002 fe2d 	bl	80079ae <lv_obj_get_screen>
    scr->scr_layout_inv = 1;
 8004d54:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
 8004d58:	f042 0202 	orr.w	r2, r2, #2
 8004d5c:	f880 2022 	strb.w	r2, [r0, #34]	; 0x22

    /*Make the display refreshing*/
    lv_disp_t * disp = lv_obj_get_disp(scr);
 8004d60:	f002 fe2c 	bl	80079bc <lv_obj_get_disp>
    lv_timer_resume(disp->refr_timer);
 8004d64:	6840      	ldr	r0, [r0, #4]
}
 8004d66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    lv_timer_resume(disp->refr_timer);
 8004d6a:	f013 bd88 	b.w	801887e <lv_timer_resume>
	...

08004d70 <lv_layout_register>:

    mutex = false;
}

uint32_t lv_layout_register(lv_layout_update_cb_t cb, void * user_data)
{
 8004d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    layout_cnt++;
 8004d72:	4e0c      	ldr	r6, [pc, #48]	; (8004da4 <lv_layout_register+0x34>)
{
 8004d74:	4605      	mov	r5, r0
    LV_GC_ROOT(_lv_layout_list) = lv_mem_realloc(LV_GC_ROOT(_lv_layout_list), layout_cnt * sizeof(lv_layout_dsc_t));
 8004d76:	4f0c      	ldr	r7, [pc, #48]	; (8004da8 <lv_layout_register+0x38>)
{
 8004d78:	460c      	mov	r4, r1
    layout_cnt++;
 8004d7a:	6833      	ldr	r3, [r6, #0]
    LV_GC_ROOT(_lv_layout_list) = lv_mem_realloc(LV_GC_ROOT(_lv_layout_list), layout_cnt * sizeof(lv_layout_dsc_t));
 8004d7c:	6838      	ldr	r0, [r7, #0]
    layout_cnt++;
 8004d7e:	3301      	adds	r3, #1
    LV_GC_ROOT(_lv_layout_list) = lv_mem_realloc(LV_GC_ROOT(_lv_layout_list), layout_cnt * sizeof(lv_layout_dsc_t));
 8004d80:	00d9      	lsls	r1, r3, #3
    layout_cnt++;
 8004d82:	6033      	str	r3, [r6, #0]
    LV_GC_ROOT(_lv_layout_list) = lv_mem_realloc(LV_GC_ROOT(_lv_layout_list), layout_cnt * sizeof(lv_layout_dsc_t));
 8004d84:	f012 fe6e 	bl	8017a64 <lv_mem_realloc>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	6038      	str	r0, [r7, #0]
    LV_ASSERT_MALLOC(LV_GC_ROOT(_lv_layout_list));
 8004d8c:	b900      	cbnz	r0, 8004d90 <lv_layout_register+0x20>
 8004d8e:	e7fe      	b.n	8004d8e <lv_layout_register+0x1e>

    LV_GC_ROOT(_lv_layout_list)[layout_cnt - 1].cb = cb;
 8004d90:	6830      	ldr	r0, [r6, #0]
 8004d92:	f100 5200 	add.w	r2, r0, #536870912	; 0x20000000
 8004d96:	3a01      	subs	r2, #1
 8004d98:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 8004d9c:	f843 5032 	str.w	r5, [r3, r2, lsl #3]
    LV_GC_ROOT(_lv_layout_list)[layout_cnt - 1].user_data = user_data;
 8004da0:	604c      	str	r4, [r1, #4]
    return layout_cnt;  /*No -1 to skip 0th index*/
}
 8004da2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004da4:	200029b0 	.word	0x200029b0
 8004da8:	2000ae5c 	.word	0x2000ae5c

08004dac <lv_obj_align>:
{
    lv_obj_set_style_align(obj, align, 0);
}

void lv_obj_align(lv_obj_t * obj, lv_align_t align, lv_coord_t x_ofs, lv_coord_t y_ofs)
{
 8004dac:	b570      	push	{r4, r5, r6, lr}
 8004dae:	4604      	mov	r4, r0
 8004db0:	4615      	mov	r5, r2
 8004db2:	461e      	mov	r6, r3
static inline void lv_obj_set_style_align(struct _lv_obj_t * obj, lv_align_t value, lv_style_selector_t selector)
{
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_ALIGN, v, selector);
 8004db4:	460a      	mov	r2, r1
 8004db6:	2300      	movs	r3, #0
 8004db8:	f241 0109 	movw	r1, #4105	; 0x1009
 8004dbc:	f002 fbb8 	bl	8007530 <lv_obj_set_local_style_prop>
    lv_obj_set_style_align(obj, align, 0);
    lv_obj_set_pos(obj, x_ofs, y_ofs);
 8004dc0:	4632      	mov	r2, r6
 8004dc2:	4629      	mov	r1, r5
 8004dc4:	4620      	mov	r0, r4
}
 8004dc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_obj_set_pos(obj, x_ofs, y_ofs);
 8004dca:	f7ff bfaf 	b.w	8004d2c <lv_obj_set_pos>

08004dce <lv_obj_get_coords>:
    dest->x1 = src->x1;
 8004dce:	f9b0 3014 	ldrsh.w	r3, [r0, #20]
 8004dd2:	800b      	strh	r3, [r1, #0]
    dest->y1 = src->y1;
 8004dd4:	f9b0 3016 	ldrsh.w	r3, [r0, #22]
 8004dd8:	804b      	strh	r3, [r1, #2]
    dest->x2 = src->x2;
 8004dda:	f9b0 3018 	ldrsh.w	r3, [r0, #24]
 8004dde:	808b      	strh	r3, [r1, #4]
    dest->y2 = src->y2;
 8004de0:	f9b0 301a 	ldrsh.w	r3, [r0, #26]
 8004de4:	80cb      	strh	r3, [r1, #6]
void lv_obj_get_coords(const lv_obj_t * obj, lv_area_t * coords)
{
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_area_copy(coords, &obj->coords);
}
 8004de6:	4770      	bx	lr

08004de8 <lv_obj_get_x>:

lv_coord_t lv_obj_get_x(const lv_obj_t * obj)
{
 8004de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dea:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_coord_t rel_x;
    lv_obj_t * parent = lv_obj_get_parent(obj);
 8004dec:	f002 fe06 	bl	80079fc <lv_obj_get_parent>
    if(parent) {
 8004df0:	4607      	mov	r7, r0
 8004df2:	b190      	cbz	r0, 8004e1a <lv_obj_get_x+0x32>
        rel_x  = obj->coords.x1 - parent->coords.x1;
 8004df4:	8aa6      	ldrh	r6, [r4, #20]
 8004df6:	8a85      	ldrh	r5, [r0, #20]
        rel_x += lv_obj_get_scroll_x(parent);
 8004df8:	f001 f868 	bl	8005ecc <lv_obj_get_scroll_x>
        rel_x  = obj->coords.x1 - parent->coords.x1;
 8004dfc:	1b76      	subs	r6, r6, r5
 8004dfe:	b2b6      	uxth	r6, r6
        rel_x += lv_obj_get_scroll_x(parent);
 8004e00:	1835      	adds	r5, r6, r0
        rel_x -= lv_obj_get_style_pad_left(parent, LV_PART_MAIN);
 8004e02:	4638      	mov	r0, r7
 8004e04:	f7ff fed2 	bl	8004bac <lv_obj_get_style_pad_left.constprop.0>
        rel_x += lv_obj_get_scroll_x(parent);
 8004e08:	b2ad      	uxth	r5, r5
        rel_x -= lv_obj_get_style_pad_left(parent, LV_PART_MAIN);
 8004e0a:	1a2c      	subs	r4, r5, r0
        rel_x -= lv_obj_get_style_border_width(parent, LV_PART_MAIN);
 8004e0c:	4638      	mov	r0, r7
 8004e0e:	f7ff fec5 	bl	8004b9c <lv_obj_get_style_border_width.constprop.0>
        rel_x -= lv_obj_get_style_pad_left(parent, LV_PART_MAIN);
 8004e12:	b2a4      	uxth	r4, r4
        rel_x -= lv_obj_get_style_border_width(parent, LV_PART_MAIN);
 8004e14:	1a20      	subs	r0, r4, r0
 8004e16:	b200      	sxth	r0, r0
    }
    else {
        rel_x = obj->coords.x1;
    }
    return rel_x;
}
 8004e18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rel_x = obj->coords.x1;
 8004e1a:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 8004e1e:	e7fb      	b.n	8004e18 <lv_obj_get_x+0x30>

08004e20 <lv_obj_get_y>:

    return lv_obj_get_x(obj) + lv_obj_get_width(obj);
}

lv_coord_t lv_obj_get_y(const lv_obj_t * obj)
{
 8004e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e22:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_coord_t rel_y;
    lv_obj_t * parent = lv_obj_get_parent(obj);
 8004e24:	f002 fdea 	bl	80079fc <lv_obj_get_parent>
    if(parent) {
 8004e28:	4607      	mov	r7, r0
 8004e2a:	b190      	cbz	r0, 8004e52 <lv_obj_get_y+0x32>
        rel_y = obj->coords.y1 - parent->coords.y1;
 8004e2c:	8ae6      	ldrh	r6, [r4, #22]
 8004e2e:	8ac5      	ldrh	r5, [r0, #22]
        rel_y += lv_obj_get_scroll_y(parent);
 8004e30:	f001 f85e 	bl	8005ef0 <lv_obj_get_scroll_y>
        rel_y = obj->coords.y1 - parent->coords.y1;
 8004e34:	1b76      	subs	r6, r6, r5
 8004e36:	b2b6      	uxth	r6, r6
        rel_y += lv_obj_get_scroll_y(parent);
 8004e38:	1835      	adds	r5, r6, r0
        rel_y -= lv_obj_get_style_pad_top(parent, LV_PART_MAIN);
 8004e3a:	4638      	mov	r0, r7
 8004e3c:	f7ff febe 	bl	8004bbc <lv_obj_get_style_pad_top.constprop.0>
        rel_y += lv_obj_get_scroll_y(parent);
 8004e40:	b2ad      	uxth	r5, r5
        rel_y -= lv_obj_get_style_pad_top(parent, LV_PART_MAIN);
 8004e42:	1a2c      	subs	r4, r5, r0
        rel_y -= lv_obj_get_style_border_width(parent, LV_PART_MAIN);
 8004e44:	4638      	mov	r0, r7
 8004e46:	f7ff fea9 	bl	8004b9c <lv_obj_get_style_border_width.constprop.0>
        rel_y -= lv_obj_get_style_pad_top(parent, LV_PART_MAIN);
 8004e4a:	b2a4      	uxth	r4, r4
        rel_y -= lv_obj_get_style_border_width(parent, LV_PART_MAIN);
 8004e4c:	1a20      	subs	r0, r4, r0
 8004e4e:	b200      	sxth	r0, r0
    }
    else {
        rel_y = obj->coords.y1;
    }
    return rel_y;
}
 8004e50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rel_y = obj->coords.y1;
 8004e52:	f9b4 0016 	ldrsh.w	r0, [r4, #22]
 8004e56:	e7fb      	b.n	8004e50 <lv_obj_get_y+0x30>

08004e58 <lv_obj_get_y2>:

lv_coord_t lv_obj_get_y2(const lv_obj_t * obj)
{
 8004e58:	b510      	push	{r4, lr}
 8004e5a:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, MY_CLASS);

    return lv_obj_get_y(obj) + lv_obj_get_height(obj);
 8004e5c:	f7ff ffe0 	bl	8004e20 <lv_obj_get_y>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8004e60:	8b63      	ldrh	r3, [r4, #26]
 8004e62:	8ae2      	ldrh	r2, [r4, #22]
 8004e64:	3301      	adds	r3, #1
 8004e66:	1a9b      	subs	r3, r3, r2
 8004e68:	4418      	add	r0, r3
}
 8004e6a:	b200      	sxth	r0, r0
 8004e6c:	bd10      	pop	{r4, pc}

08004e6e <lv_obj_get_width>:
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8004e6e:	8b03      	ldrh	r3, [r0, #24]
 8004e70:	8a80      	ldrh	r0, [r0, #20]
 8004e72:	3301      	adds	r3, #1
 8004e74:	1a18      	subs	r0, r3, r0
lv_coord_t lv_obj_get_width(const lv_obj_t * obj)
{
    LV_ASSERT_OBJ(obj, MY_CLASS);

    return lv_area_get_width(&obj->coords);
}
 8004e76:	b200      	sxth	r0, r0
 8004e78:	4770      	bx	lr

08004e7a <lv_obj_get_height>:
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8004e7a:	8b43      	ldrh	r3, [r0, #26]
 8004e7c:	8ac0      	ldrh	r0, [r0, #22]
 8004e7e:	3301      	adds	r3, #1
 8004e80:	1a18      	subs	r0, r3, r0
lv_coord_t lv_obj_get_height(const lv_obj_t * obj)
{
    LV_ASSERT_OBJ(obj, MY_CLASS);

    return lv_area_get_height(&obj->coords);
}
 8004e82:	b200      	sxth	r0, r0
 8004e84:	4770      	bx	lr

08004e86 <lv_obj_get_content_width>:

lv_coord_t lv_obj_get_content_width(const lv_obj_t * obj)
{
 8004e86:	b570      	push	{r4, r5, r6, lr}
 8004e88:	4605      	mov	r5, r0
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_coord_t left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 8004e8a:	f7ff fe8f 	bl	8004bac <lv_obj_get_style_pad_left.constprop.0>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8004e8e:	f241 0213 	movw	r2, #4115	; 0x1013
 8004e92:	4606      	mov	r6, r0
 8004e94:	2100      	movs	r1, #0
 8004e96:	4628      	mov	r0, r5
 8004e98:	f002 fa66 	bl	8007368 <lv_obj_get_style_prop>
 8004e9c:	4604      	mov	r4, r0
    lv_coord_t right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN);
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 8004e9e:	4628      	mov	r0, r5
 8004ea0:	f7ff fe7c 	bl	8004b9c <lv_obj_get_style_border_width.constprop.0>

    return lv_obj_get_width(obj) - left - right - 2 * border_width;
 8004ea4:	f1c4 0301 	rsb	r3, r4, #1
 8004ea8:	8b2c      	ldrh	r4, [r5, #24]
 8004eaa:	4423      	add	r3, r4
 8004eac:	8aac      	ldrh	r4, [r5, #20]
 8004eae:	1b1b      	subs	r3, r3, r4
 8004eb0:	1b9c      	subs	r4, r3, r6
 8004eb2:	eba4 0040 	sub.w	r0, r4, r0, lsl #1
}
 8004eb6:	b200      	sxth	r0, r0
 8004eb8:	bd70      	pop	{r4, r5, r6, pc}

08004eba <lv_obj_get_content_height>:

lv_coord_t lv_obj_get_content_height(const lv_obj_t * obj)
{
 8004eba:	b570      	push	{r4, r5, r6, lr}
 8004ebc:	4605      	mov	r5, r0
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_coord_t top = lv_obj_get_style_pad_top((lv_obj_t *)obj, LV_PART_MAIN);
 8004ebe:	f7ff fe7d 	bl	8004bbc <lv_obj_get_style_pad_top.constprop.0>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8004ec2:	f241 0211 	movw	r2, #4113	; 0x1011
 8004ec6:	4606      	mov	r6, r0
 8004ec8:	2100      	movs	r1, #0
 8004eca:	4628      	mov	r0, r5
 8004ecc:	f002 fa4c 	bl	8007368 <lv_obj_get_style_prop>
 8004ed0:	4604      	mov	r4, r0
    lv_coord_t bottom =  lv_obj_get_style_pad_bottom((lv_obj_t *)obj, LV_PART_MAIN);
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 8004ed2:	4628      	mov	r0, r5
 8004ed4:	f7ff fe62 	bl	8004b9c <lv_obj_get_style_border_width.constprop.0>

    return lv_obj_get_height(obj) - top - bottom - 2 * border_width;
 8004ed8:	f1c4 0301 	rsb	r3, r4, #1
 8004edc:	8b6c      	ldrh	r4, [r5, #26]
 8004ede:	4423      	add	r3, r4
 8004ee0:	8aec      	ldrh	r4, [r5, #22]
 8004ee2:	1b1b      	subs	r3, r3, r4
 8004ee4:	1b9c      	subs	r4, r3, r6
 8004ee6:	eba4 0040 	sub.w	r0, r4, r0, lsl #1
}
 8004eea:	b200      	sxth	r0, r0
 8004eec:	bd70      	pop	{r4, r5, r6, pc}

08004eee <lv_obj_get_content_coords>:

void lv_obj_get_content_coords(const lv_obj_t * obj, lv_area_t * area)
{
 8004eee:	b538      	push	{r3, r4, r5, lr}
 8004ef0:	4605      	mov	r5, r0
 8004ef2:	460c      	mov	r4, r1
    LV_ASSERT_OBJ(obj, MY_CLASS);
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 8004ef4:	f7ff fe52 	bl	8004b9c <lv_obj_get_style_border_width.constprop.0>

    lv_obj_get_coords(obj, area);
    lv_area_increase(area, -border_width, -border_width);
 8004ef8:	4240      	negs	r0, r0
    dest->x1 = src->x1;
 8004efa:	f9b5 3014 	ldrsh.w	r3, [r5, #20]
 8004efe:	b202      	sxth	r2, r0
 8004f00:	4620      	mov	r0, r4
 8004f02:	8023      	strh	r3, [r4, #0]
    dest->y1 = src->y1;
 8004f04:	f9b5 3016 	ldrsh.w	r3, [r5, #22]
 8004f08:	4611      	mov	r1, r2
 8004f0a:	8063      	strh	r3, [r4, #2]
    dest->x2 = src->x2;
 8004f0c:	f9b5 3018 	ldrsh.w	r3, [r5, #24]
 8004f10:	80a3      	strh	r3, [r4, #4]
    dest->y2 = src->y2;
 8004f12:	f9b5 301a 	ldrsh.w	r3, [r5, #26]
 8004f16:	80e3      	strh	r3, [r4, #6]
 8004f18:	f011 ff9d 	bl	8016e56 <lv_area_increase>
    area->x1 += lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 8004f1c:	4628      	mov	r0, r5
 8004f1e:	f7ff fe45 	bl	8004bac <lv_obj_get_style_pad_left.constprop.0>
 8004f22:	8823      	ldrh	r3, [r4, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8004f24:	f241 0213 	movw	r2, #4115	; 0x1013
 8004f28:	2100      	movs	r1, #0
 8004f2a:	4418      	add	r0, r3
 8004f2c:	8020      	strh	r0, [r4, #0]
 8004f2e:	4628      	mov	r0, r5
 8004f30:	f002 fa1a 	bl	8007368 <lv_obj_get_style_prop>
    area->x2 -= lv_obj_get_style_pad_right(obj, LV_PART_MAIN);
 8004f34:	88a3      	ldrh	r3, [r4, #4]
 8004f36:	1a18      	subs	r0, r3, r0
 8004f38:	80a0      	strh	r0, [r4, #4]
    area->y1 += lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 8004f3a:	4628      	mov	r0, r5
 8004f3c:	f7ff fe3e 	bl	8004bbc <lv_obj_get_style_pad_top.constprop.0>
 8004f40:	8863      	ldrh	r3, [r4, #2]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8004f42:	f241 0211 	movw	r2, #4113	; 0x1011
 8004f46:	2100      	movs	r1, #0
 8004f48:	4418      	add	r0, r3
 8004f4a:	8060      	strh	r0, [r4, #2]
 8004f4c:	4628      	mov	r0, r5
 8004f4e:	f002 fa0b 	bl	8007368 <lv_obj_get_style_prop>
    area->y2 -= lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN);
 8004f52:	88e3      	ldrh	r3, [r4, #6]
 8004f54:	1a18      	subs	r0, r3, r0
 8004f56:	80e0      	strh	r0, [r4, #6]

}
 8004f58:	bd38      	pop	{r3, r4, r5, pc}

08004f5a <lv_obj_get_self_width>:

lv_coord_t lv_obj_get_self_width(const lv_obj_t * obj)
{
    lv_point_t p = {0, LV_COORD_MIN};
 8004f5a:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
{
 8004f5e:	b507      	push	{r0, r1, r2, lr}
    lv_event_send((lv_obj_t * )obj, LV_EVENT_GET_SELF_SIZE, &p);
 8004f60:	2126      	movs	r1, #38	; 0x26
 8004f62:	aa01      	add	r2, sp, #4
    lv_point_t p = {0, LV_COORD_MIN};
 8004f64:	9301      	str	r3, [sp, #4]
    lv_event_send((lv_obj_t * )obj, LV_EVENT_GET_SELF_SIZE, &p);
 8004f66:	f7fc ffaf 	bl	8001ec8 <lv_event_send>
    return p.x;
}
 8004f6a:	f9bd 0004 	ldrsh.w	r0, [sp, #4]
 8004f6e:	b003      	add	sp, #12
 8004f70:	f85d fb04 	ldr.w	pc, [sp], #4

08004f74 <lv_obj_get_self_height>:

lv_coord_t lv_obj_get_self_height(const lv_obj_t * obj)
{
    lv_point_t p = {LV_COORD_MIN, 0};
 8004f74:	f44f 4320 	mov.w	r3, #40960	; 0xa000
{
 8004f78:	b507      	push	{r0, r1, r2, lr}
    lv_event_send((lv_obj_t * )obj, LV_EVENT_GET_SELF_SIZE, &p);
 8004f7a:	2126      	movs	r1, #38	; 0x26
 8004f7c:	aa01      	add	r2, sp, #4
    lv_point_t p = {LV_COORD_MIN, 0};
 8004f7e:	9301      	str	r3, [sp, #4]
    lv_event_send((lv_obj_t * )obj, LV_EVENT_GET_SELF_SIZE, &p);
 8004f80:	f7fc ffa2 	bl	8001ec8 <lv_event_send>
    return p.y;
}
 8004f84:	f9bd 0006 	ldrsh.w	r0, [sp, #6]
 8004f88:	b003      	add	sp, #12
 8004f8a:	f85d fb04 	ldr.w	pc, [sp], #4

08004f8e <lv_obj_refresh_self_size>:

bool lv_obj_refresh_self_size(lv_obj_t * obj)
{
 8004f8e:	b538      	push	{r3, r4, r5, lr}
 8004f90:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8004f92:	f241 0201 	movw	r2, #4097	; 0x1001
 8004f96:	2100      	movs	r1, #0
 8004f98:	f002 f9e6 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 8004f9c:	f241 0204 	movw	r2, #4100	; 0x1004
    return (lv_coord_t)v.num;
 8004fa0:	b205      	sxth	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 8004fa2:	2100      	movs	r1, #0
 8004fa4:	4620      	mov	r0, r4
 8004fa6:	f002 f9df 	bl	8007368 <lv_obj_get_style_prop>
    lv_coord_t w_set = lv_obj_get_style_width(obj, LV_PART_MAIN);
    lv_coord_t h_set = lv_obj_get_style_height(obj, LV_PART_MAIN);
    if(w_set != LV_SIZE_CONTENT && h_set != LV_SIZE_CONTENT) return false;
 8004faa:	f242 73d1 	movw	r3, #10193	; 0x27d1
    return (lv_coord_t)v.num;
 8004fae:	b200      	sxth	r0, r0
 8004fb0:	429d      	cmp	r5, r3
 8004fb2:	d001      	beq.n	8004fb8 <lv_obj_refresh_self_size+0x2a>
 8004fb4:	4298      	cmp	r0, r3
 8004fb6:	d104      	bne.n	8004fc2 <lv_obj_refresh_self_size+0x34>

    lv_obj_mark_layout_as_dirty(obj);
 8004fb8:	4620      	mov	r0, r4
 8004fba:	f7ff fec2 	bl	8004d42 <lv_obj_mark_layout_as_dirty>
    return true;
 8004fbe:	2001      	movs	r0, #1
}
 8004fc0:	bd38      	pop	{r3, r4, r5, pc}
    if(w_set != LV_SIZE_CONTENT && h_set != LV_SIZE_CONTENT) return false;
 8004fc2:	2000      	movs	r0, #0
 8004fc4:	e7fc      	b.n	8004fc0 <lv_obj_refresh_self_size+0x32>

08004fc6 <lv_obj_move_children_by>:
        if(on1 || (!on1 && on2)) lv_obj_scrollbar_invalidate(parent);
    }
}

void lv_obj_move_children_by(lv_obj_t * obj, lv_coord_t x_diff, lv_coord_t y_diff, bool ignore_floating)
{
 8004fc6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fca:	4606      	mov	r6, r0
 8004fcc:	460f      	mov	r7, r1
 8004fce:	4690      	mov	r8, r2
 8004fd0:	4699      	mov	r9, r3
    uint32_t i;
    for(i = 0; i < lv_obj_get_child_cnt(obj); i++) {
 8004fd2:	2500      	movs	r5, #0
        lv_obj_t * child = lv_obj_get_child(obj, i);
        if(ignore_floating && lv_obj_has_flag(child, LV_OBJ_FLAG_FLOATING)) continue;
        child->coords.x1 += x_diff;
 8004fd4:	fa1f fa81 	uxth.w	sl, r1
        child->coords.y1 += y_diff;
 8004fd8:	fa1f fb82 	uxth.w	fp, r2
    for(i = 0; i < lv_obj_get_child_cnt(obj); i++) {
 8004fdc:	4630      	mov	r0, r6
 8004fde:	f002 fd1f 	bl	8007a20 <lv_obj_get_child_cnt>
 8004fe2:	42a8      	cmp	r0, r5
 8004fe4:	d801      	bhi.n	8004fea <lv_obj_move_children_by+0x24>
        child->coords.x2 += x_diff;
        child->coords.y2 += y_diff;

        lv_obj_move_children_by(child, x_diff, y_diff, false);
    }
}
 8004fe6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        lv_obj_t * child = lv_obj_get_child(obj, i);
 8004fea:	4629      	mov	r1, r5
 8004fec:	4630      	mov	r0, r6
 8004fee:	f002 fd08 	bl	8007a02 <lv_obj_get_child>
 8004ff2:	4604      	mov	r4, r0
        if(ignore_floating && lv_obj_has_flag(child, LV_OBJ_FLAG_FLOATING)) continue;
 8004ff4:	f1b9 0f00 	cmp.w	r9, #0
 8004ff8:	d113      	bne.n	8005022 <lv_obj_move_children_by+0x5c>
        child->coords.x1 += x_diff;
 8004ffa:	8aa3      	ldrh	r3, [r4, #20]
        lv_obj_move_children_by(child, x_diff, y_diff, false);
 8004ffc:	4642      	mov	r2, r8
 8004ffe:	4639      	mov	r1, r7
 8005000:	4620      	mov	r0, r4
        child->coords.x1 += x_diff;
 8005002:	4453      	add	r3, sl
 8005004:	82a3      	strh	r3, [r4, #20]
        child->coords.y1 += y_diff;
 8005006:	8ae3      	ldrh	r3, [r4, #22]
 8005008:	445b      	add	r3, fp
 800500a:	82e3      	strh	r3, [r4, #22]
        child->coords.x2 += x_diff;
 800500c:	8b23      	ldrh	r3, [r4, #24]
 800500e:	4453      	add	r3, sl
 8005010:	8323      	strh	r3, [r4, #24]
        child->coords.y2 += y_diff;
 8005012:	8b63      	ldrh	r3, [r4, #26]
 8005014:	445b      	add	r3, fp
 8005016:	8363      	strh	r3, [r4, #26]
        lv_obj_move_children_by(child, x_diff, y_diff, false);
 8005018:	2300      	movs	r3, #0
 800501a:	f7ff ffd4 	bl	8004fc6 <lv_obj_move_children_by>
    for(i = 0; i < lv_obj_get_child_cnt(obj); i++) {
 800501e:	3501      	adds	r5, #1
 8005020:	e7dc      	b.n	8004fdc <lv_obj_move_children_by+0x16>
        if(ignore_floating && lv_obj_has_flag(child, LV_OBJ_FLAG_FLOATING)) continue;
 8005022:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8005026:	f7fe fecc 	bl	8003dc2 <lv_obj_has_flag>
 800502a:	2800      	cmp	r0, #0
 800502c:	d0e5      	beq.n	8004ffa <lv_obj_move_children_by+0x34>
 800502e:	e7f6      	b.n	800501e <lv_obj_move_children_by+0x58>

08005030 <lv_obj_area_is_visible>:
    lv_obj_invalidate_area(obj, &obj_coords);

}

bool lv_obj_area_is_visible(const lv_obj_t * obj, lv_area_t * area)
{
 8005030:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005032:	460d      	mov	r5, r1
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN)) return false;
 8005034:	2101      	movs	r1, #1
{
 8005036:	4604      	mov	r4, r0
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN)) return false;
 8005038:	f7fe fec3 	bl	8003dc2 <lv_obj_has_flag>
 800503c:	b118      	cbz	r0, 8005046 <lv_obj_area_is_visible+0x16>
    obj_coords.y2 += ext_size;

    bool is_common;

    is_common = _lv_area_intersect(area, area, &obj_coords);
    if(is_common == false) return false;  /*The area is not on the object*/
 800503e:	2600      	movs	r6, #0

        par = lv_obj_get_parent(par);
    }

    return true;
}
 8005040:	4630      	mov	r0, r6
 8005042:	b003      	add	sp, #12
 8005044:	bdf0      	pop	{r4, r5, r6, r7, pc}
    lv_obj_t * obj_scr = lv_obj_get_screen(obj);
 8005046:	4620      	mov	r0, r4
 8005048:	f002 fcb1 	bl	80079ae <lv_obj_get_screen>
 800504c:	4606      	mov	r6, r0
    lv_disp_t * disp   = lv_obj_get_disp(obj_scr);
 800504e:	f002 fcb5 	bl	80079bc <lv_obj_get_disp>
 8005052:	4607      	mov	r7, r0
    if(obj_scr != lv_disp_get_scr_act(disp) &&
 8005054:	f7fc fe9e 	bl	8001d94 <lv_disp_get_scr_act>
 8005058:	4286      	cmp	r6, r0
 800505a:	d133      	bne.n	80050c4 <lv_obj_area_is_visible+0x94>
    lv_coord_t ext_size = _lv_obj_get_ext_draw_size(obj);
 800505c:	4620      	mov	r0, r4
 800505e:	f7ff fd6b 	bl	8004b38 <_lv_obj_get_ext_draw_size>
 8005062:	f9b4 601a 	ldrsh.w	r6, [r4, #26]
    obj_coords.x1 -= ext_size;
 8005066:	b280      	uxth	r0, r0
    dest->y1 = src->y1;
 8005068:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
    dest->x2 = src->x2;
 800506c:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
 8005070:	8aa1      	ldrh	r1, [r4, #20]
    obj_coords.y1 -= ext_size;
 8005072:	1a12      	subs	r2, r2, r0
    obj_coords.x2 += ext_size;
 8005074:	4403      	add	r3, r0
    obj_coords.x1 -= ext_size;
 8005076:	1a09      	subs	r1, r1, r0
    obj_coords.y2 += ext_size;
 8005078:	4430      	add	r0, r6
    obj_coords.y1 -= ext_size;
 800507a:	f8ad 2002 	strh.w	r2, [sp, #2]
    is_common = _lv_area_intersect(area, area, &obj_coords);
 800507e:	466a      	mov	r2, sp
    obj_coords.x1 -= ext_size;
 8005080:	f8ad 1000 	strh.w	r1, [sp]
    is_common = _lv_area_intersect(area, area, &obj_coords);
 8005084:	4629      	mov	r1, r5
    obj_coords.y2 += ext_size;
 8005086:	f8ad 0006 	strh.w	r0, [sp, #6]
    is_common = _lv_area_intersect(area, area, &obj_coords);
 800508a:	4628      	mov	r0, r5
    obj_coords.x2 += ext_size;
 800508c:	f8ad 3004 	strh.w	r3, [sp, #4]
    is_common = _lv_area_intersect(area, area, &obj_coords);
 8005090:	f011 ff01 	bl	8016e96 <_lv_area_intersect>
    if(is_common == false) return false;  /*The area is not on the object*/
 8005094:	4606      	mov	r6, r0
 8005096:	2800      	cmp	r0, #0
 8005098:	d0d1      	beq.n	800503e <lv_obj_area_is_visible+0xe>
        par = lv_obj_get_parent(par);
 800509a:	4620      	mov	r0, r4
 800509c:	f002 fcae 	bl	80079fc <lv_obj_get_parent>
 80050a0:	4604      	mov	r4, r0
    while(par != NULL) {
 80050a2:	2800      	cmp	r0, #0
 80050a4:	d0cc      	beq.n	8005040 <lv_obj_area_is_visible+0x10>
        is_common = _lv_area_intersect(area, area, &par->coords);
 80050a6:	f104 0214 	add.w	r2, r4, #20
 80050aa:	4629      	mov	r1, r5
 80050ac:	4628      	mov	r0, r5
 80050ae:	f011 fef2 	bl	8016e96 <_lv_area_intersect>
        if(is_common == false) return false;       /*If no common parts with parent break;*/
 80050b2:	2800      	cmp	r0, #0
 80050b4:	d0c3      	beq.n	800503e <lv_obj_area_is_visible+0xe>
        if(lv_obj_has_flag(par, LV_OBJ_FLAG_HIDDEN)) return false; /*If the parent is hidden then the child is hidden and won't be drawn*/
 80050b6:	2101      	movs	r1, #1
 80050b8:	4620      	mov	r0, r4
 80050ba:	f7fe fe82 	bl	8003dc2 <lv_obj_has_flag>
 80050be:	2800      	cmp	r0, #0
 80050c0:	d0eb      	beq.n	800509a <lv_obj_area_is_visible+0x6a>
 80050c2:	e7bc      	b.n	800503e <lv_obj_area_is_visible+0xe>
       obj_scr != lv_disp_get_scr_prev(disp) &&
 80050c4:	4638      	mov	r0, r7
 80050c6:	f7fc fe6c 	bl	8001da2 <lv_disp_get_scr_prev>
    if(obj_scr != lv_disp_get_scr_act(disp) &&
 80050ca:	4286      	cmp	r6, r0
 80050cc:	d0c6      	beq.n	800505c <lv_obj_area_is_visible+0x2c>
       obj_scr != lv_disp_get_layer_top(disp) &&
 80050ce:	4638      	mov	r0, r7
 80050d0:	f7fc fe6e 	bl	8001db0 <lv_disp_get_layer_top>
       obj_scr != lv_disp_get_scr_prev(disp) &&
 80050d4:	4286      	cmp	r6, r0
 80050d6:	d0c1      	beq.n	800505c <lv_obj_area_is_visible+0x2c>
       obj_scr != lv_disp_get_layer_sys(disp))
 80050d8:	4638      	mov	r0, r7
 80050da:	f7fc fe70 	bl	8001dbe <lv_disp_get_layer_sys>
       obj_scr != lv_disp_get_layer_top(disp) &&
 80050de:	4286      	cmp	r6, r0
 80050e0:	d1ad      	bne.n	800503e <lv_obj_area_is_visible+0xe>
 80050e2:	e7bb      	b.n	800505c <lv_obj_area_is_visible+0x2c>

080050e4 <lv_obj_invalidate_area>:
    dest->x1 = src->x1;
 80050e4:	880b      	ldrh	r3, [r1, #0]
{
 80050e6:	b513      	push	{r0, r1, r4, lr}
 80050e8:	f8ad 3000 	strh.w	r3, [sp]
 80050ec:	4604      	mov	r4, r0
    dest->y1 = src->y1;
 80050ee:	884b      	ldrh	r3, [r1, #2]
 80050f0:	f8ad 3002 	strh.w	r3, [sp, #2]
    dest->x2 = src->x2;
 80050f4:	888b      	ldrh	r3, [r1, #4]
 80050f6:	f8ad 3004 	strh.w	r3, [sp, #4]
    dest->y2 = src->y2;
 80050fa:	88cb      	ldrh	r3, [r1, #6]
    bool visible = lv_obj_area_is_visible(obj, &area_tmp);
 80050fc:	4669      	mov	r1, sp
 80050fe:	f8ad 3006 	strh.w	r3, [sp, #6]
 8005102:	f7ff ff95 	bl	8005030 <lv_obj_area_is_visible>
    if(visible) _lv_inv_area(lv_obj_get_disp(obj), &area_tmp);
 8005106:	b128      	cbz	r0, 8005114 <lv_obj_invalidate_area+0x30>
 8005108:	4620      	mov	r0, r4
 800510a:	f002 fc57 	bl	80079bc <lv_obj_get_disp>
 800510e:	4669      	mov	r1, sp
 8005110:	f003 f8c3 	bl	800829a <_lv_inv_area>
}
 8005114:	b002      	add	sp, #8
 8005116:	bd10      	pop	{r4, pc}

08005118 <lv_obj_invalidate>:
{
 8005118:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800511a:	4604      	mov	r4, r0
    lv_coord_t ext_size = _lv_obj_get_ext_draw_size(obj);
 800511c:	f7ff fd0c 	bl	8004b38 <_lv_obj_get_ext_draw_size>
    obj_coords.x1 -= ext_size;
 8005120:	b283      	uxth	r3, r0
    dest->y1 = src->y1;
 8005122:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
    lv_obj_invalidate_area(obj, &obj_coords);
 8005126:	4620      	mov	r0, r4
    dest->x2 = src->x2;
 8005128:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
    dest->y2 = src->y2;
 800512c:	f9b4 601a 	ldrsh.w	r6, [r4, #26]
    obj_coords.y1 -= ext_size;
 8005130:	1ac9      	subs	r1, r1, r3
    obj_coords.x1 -= ext_size;
 8005132:	8aa5      	ldrh	r5, [r4, #20]
    obj_coords.x2 += ext_size;
 8005134:	441a      	add	r2, r3
    obj_coords.y1 -= ext_size;
 8005136:	f8ad 1002 	strh.w	r1, [sp, #2]
    lv_obj_invalidate_area(obj, &obj_coords);
 800513a:	4669      	mov	r1, sp
    obj_coords.x1 -= ext_size;
 800513c:	1aed      	subs	r5, r5, r3
    obj_coords.y2 += ext_size;
 800513e:	4433      	add	r3, r6
    obj_coords.x2 += ext_size;
 8005140:	f8ad 2004 	strh.w	r2, [sp, #4]
    obj_coords.x1 -= ext_size;
 8005144:	f8ad 5000 	strh.w	r5, [sp]
    obj_coords.y2 += ext_size;
 8005148:	f8ad 3006 	strh.w	r3, [sp, #6]
    lv_obj_invalidate_area(obj, &obj_coords);
 800514c:	f7ff ffca 	bl	80050e4 <lv_obj_invalidate_area>
}
 8005150:	b002      	add	sp, #8
 8005152:	bd70      	pop	{r4, r5, r6, pc}

08005154 <lv_obj_move_to>:
{
 8005154:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    lv_obj_t * parent = obj->parent;
 8005158:	6847      	ldr	r7, [r0, #4]
{
 800515a:	4604      	mov	r4, r0
    if(parent) {
 800515c:	b31f      	cbz	r7, 80051a6 <lv_obj_move_to+0x52>
        lv_coord_t pad_left = lv_obj_get_style_pad_left(parent, LV_PART_MAIN);
 800515e:	4638      	mov	r0, r7
 8005160:	b28e      	uxth	r6, r1
 8005162:	fa1f f882 	uxth.w	r8, r2
 8005166:	f7ff fd21 	bl	8004bac <lv_obj_get_style_pad_left.constprop.0>
 800516a:	4605      	mov	r5, r0
        lv_coord_t pad_top = lv_obj_get_style_pad_top(parent, LV_PART_MAIN);
 800516c:	4638      	mov	r0, r7
 800516e:	f7ff fd25 	bl	8004bbc <lv_obj_get_style_pad_top.constprop.0>
        if(lv_obj_has_flag(obj, LV_OBJ_FLAG_FLOATING)) {
 8005172:	f44f 3180 	mov.w	r1, #65536	; 0x10000
        lv_coord_t pad_top = lv_obj_get_style_pad_top(parent, LV_PART_MAIN);
 8005176:	4681      	mov	r9, r0
        if(lv_obj_has_flag(obj, LV_OBJ_FLAG_FLOATING)) {
 8005178:	4620      	mov	r0, r4
 800517a:	f7fe fe22 	bl	8003dc2 <lv_obj_has_flag>
 800517e:	2800      	cmp	r0, #0
 8005180:	d06b      	beq.n	800525a <lv_obj_move_to+0x106>
            x += pad_left + parent->coords.x1;
 8005182:	8abb      	ldrh	r3, [r7, #20]
            y += pad_top + parent->coords.y1;
 8005184:	8afa      	ldrh	r2, [r7, #22]
            x += pad_left + parent->coords.x1;
 8005186:	441e      	add	r6, r3
            y += pad_top + parent->coords.y1;
 8005188:	4490      	add	r8, r2
            x += pad_left + parent->coords.x1;
 800518a:	1970      	adds	r0, r6, r5
            y += pad_top + parent->coords.y1;
 800518c:	44c8      	add	r8, r9
            x += pad_left + parent->coords.x1;
 800518e:	b205      	sxth	r5, r0
            y += pad_top + parent->coords.y1;
 8005190:	fa0f f888 	sxth.w	r8, r8
        lv_coord_t border_width = lv_obj_get_style_border_width(parent, LV_PART_MAIN);
 8005194:	4638      	mov	r0, r7
 8005196:	f7ff fd01 	bl	8004b9c <lv_obj_get_style_border_width.constprop.0>
        x += border_width;
 800519a:	fa15 f180 	uxtah	r1, r5, r0
        y += border_width;
 800519e:	fa18 f280 	uxtah	r2, r8, r0
        x += border_width;
 80051a2:	b209      	sxth	r1, r1
        y += border_width;
 80051a4:	b212      	sxth	r2, r2
    diff.x = x - obj->coords.x1;
 80051a6:	8aa3      	ldrh	r3, [r4, #20]
    diff.y = y - obj->coords.y1;
 80051a8:	8ae0      	ldrh	r0, [r4, #22]
    diff.x = x - obj->coords.x1;
 80051aa:	1ac9      	subs	r1, r1, r3
    diff.y = y - obj->coords.y1;
 80051ac:	1a12      	subs	r2, r2, r0
    diff.x = x - obj->coords.x1;
 80051ae:	fa1f f881 	uxth.w	r8, r1
    diff.y = y - obj->coords.y1;
 80051b2:	fa1f fa82 	uxth.w	sl, r2
    diff.x = x - obj->coords.x1;
 80051b6:	b20d      	sxth	r5, r1
    if(diff.x == 0 && diff.y == 0) return;
 80051b8:	ea58 030a 	orrs.w	r3, r8, sl
    diff.y = y - obj->coords.y1;
 80051bc:	b216      	sxth	r6, r2
    if(diff.x == 0 && diff.y == 0) return;
 80051be:	d049      	beq.n	8005254 <lv_obj_move_to+0x100>
    lv_obj_invalidate(obj);
 80051c0:	4620      	mov	r0, r4
 80051c2:	f7ff ffa9 	bl	8005118 <lv_obj_invalidate>
    dest->x1 = src->x1;
 80051c6:	8aa3      	ldrh	r3, [r4, #20]
 80051c8:	f8ad 3000 	strh.w	r3, [sp]
    dest->y1 = src->y1;
 80051cc:	8ae3      	ldrh	r3, [r4, #22]
 80051ce:	f8ad 3002 	strh.w	r3, [sp, #2]
    dest->x2 = src->x2;
 80051d2:	8b23      	ldrh	r3, [r4, #24]
 80051d4:	f8ad 3004 	strh.w	r3, [sp, #4]
    dest->y2 = src->y2;
 80051d8:	8b63      	ldrh	r3, [r4, #26]
 80051da:	f8ad 3006 	strh.w	r3, [sp, #6]
    if(parent) {
 80051de:	2f00      	cmp	r7, #0
 80051e0:	d051      	beq.n	8005286 <lv_obj_move_to+0x132>
        lv_obj_get_content_coords(parent, &parent_fit_area);
 80051e2:	a902      	add	r1, sp, #8
 80051e4:	4638      	mov	r0, r7
 80051e6:	f7ff fe82 	bl	8004eee <lv_obj_get_content_coords>
        on1 = _lv_area_is_in(&ori, &parent_fit_area, 0);
 80051ea:	2200      	movs	r2, #0
 80051ec:	a902      	add	r1, sp, #8
 80051ee:	4668      	mov	r0, sp
 80051f0:	f011 ff50 	bl	8017094 <_lv_area_is_in>
        if(!on1) lv_obj_scrollbar_invalidate(parent);
 80051f4:	4681      	mov	r9, r0
 80051f6:	b910      	cbnz	r0, 80051fe <lv_obj_move_to+0xaa>
 80051f8:	4638      	mov	r0, r7
 80051fa:	f001 fd48 	bl	8006c8e <lv_obj_scrollbar_invalidate>
    obj->coords.x1 += diff.x;
 80051fe:	8aa3      	ldrh	r3, [r4, #20]
    lv_obj_move_children_by(obj, diff.x, diff.y, false);
 8005200:	4632      	mov	r2, r6
 8005202:	4629      	mov	r1, r5
 8005204:	4620      	mov	r0, r4
    obj->coords.x1 += diff.x;
 8005206:	4443      	add	r3, r8
 8005208:	82a3      	strh	r3, [r4, #20]
    obj->coords.y1 += diff.y;
 800520a:	8ae3      	ldrh	r3, [r4, #22]
 800520c:	4453      	add	r3, sl
 800520e:	82e3      	strh	r3, [r4, #22]
    obj->coords.x2 += diff.x;
 8005210:	8b23      	ldrh	r3, [r4, #24]
 8005212:	4498      	add	r8, r3
    obj->coords.y2 += diff.y;
 8005214:	8b63      	ldrh	r3, [r4, #26]
 8005216:	449a      	add	sl, r3
    obj->coords.x2 += diff.x;
 8005218:	f8a4 8018 	strh.w	r8, [r4, #24]
    lv_obj_move_children_by(obj, diff.x, diff.y, false);
 800521c:	2300      	movs	r3, #0
    obj->coords.y2 += diff.y;
 800521e:	f8a4 a01a 	strh.w	sl, [r4, #26]
    lv_obj_move_children_by(obj, diff.x, diff.y, false);
 8005222:	f7ff fed0 	bl	8004fc6 <lv_obj_move_children_by>
    if(parent) lv_event_send(parent, LV_EVENT_CHILD_CHANGED, obj);
 8005226:	b127      	cbz	r7, 8005232 <lv_obj_move_to+0xde>
 8005228:	4622      	mov	r2, r4
 800522a:	2122      	movs	r1, #34	; 0x22
 800522c:	4638      	mov	r0, r7
 800522e:	f7fc fe4b 	bl	8001ec8 <lv_event_send>
    lv_obj_invalidate(obj);
 8005232:	4620      	mov	r0, r4
 8005234:	f7ff ff70 	bl	8005118 <lv_obj_invalidate>
    if(parent) {
 8005238:	b167      	cbz	r7, 8005254 <lv_obj_move_to+0x100>
        bool on2 = _lv_area_is_in(&obj->coords, &parent_fit_area, 0);
 800523a:	2200      	movs	r2, #0
 800523c:	a902      	add	r1, sp, #8
 800523e:	f104 0014 	add.w	r0, r4, #20
 8005242:	f011 ff27 	bl	8017094 <_lv_area_is_in>
        if(on1 || (!on1 && on2)) lv_obj_scrollbar_invalidate(parent);
 8005246:	f1b9 0f00 	cmp.w	r9, #0
 800524a:	d100      	bne.n	800524e <lv_obj_move_to+0xfa>
 800524c:	b110      	cbz	r0, 8005254 <lv_obj_move_to+0x100>
 800524e:	4638      	mov	r0, r7
 8005250:	f001 fd1d 	bl	8006c8e <lv_obj_scrollbar_invalidate>
}
 8005254:	b004      	add	sp, #16
 8005256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            x += pad_left + parent->coords.x1 - lv_obj_get_scroll_x(parent);
 800525a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800525e:	4638      	mov	r0, r7
 8005260:	441d      	add	r5, r3
 8005262:	f000 fe33 	bl	8005ecc <lv_obj_get_scroll_x>
            y += pad_top + parent->coords.y1 - lv_obj_get_scroll_y(parent);
 8005266:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
            x += pad_left + parent->coords.x1 - lv_obj_get_scroll_x(parent);
 800526a:	1a2d      	subs	r5, r5, r0
            y += pad_top + parent->coords.y1 - lv_obj_get_scroll_y(parent);
 800526c:	4638      	mov	r0, r7
 800526e:	4499      	add	r9, r3
            x += pad_left + parent->coords.x1 - lv_obj_get_scroll_x(parent);
 8005270:	1971      	adds	r1, r6, r5
 8005272:	b20d      	sxth	r5, r1
            y += pad_top + parent->coords.y1 - lv_obj_get_scroll_y(parent);
 8005274:	f000 fe3c 	bl	8005ef0 <lv_obj_get_scroll_y>
 8005278:	eba9 0000 	sub.w	r0, r9, r0
 800527c:	eb08 0200 	add.w	r2, r8, r0
 8005280:	fa0f f882 	sxth.w	r8, r2
 8005284:	e786      	b.n	8005194 <lv_obj_move_to+0x40>
    bool on1 = false;
 8005286:	46b9      	mov	r9, r7
 8005288:	e7b9      	b.n	80051fe <lv_obj_move_to+0xaa>

0800528a <lv_obj_refr_pos>:
{
 800528a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800528e:	ed2d 8b02 	vpush	{d8}
 8005292:	b087      	sub	sp, #28
 8005294:	4680      	mov	r8, r0
    if(lv_obj_is_layout_positioned(obj)) return;
 8005296:	f7ff fcf3 	bl	8004c80 <lv_obj_is_layout_positioned>
 800529a:	9001      	str	r0, [sp, #4]
 800529c:	2800      	cmp	r0, #0
 800529e:	f040 811a 	bne.w	80054d6 <lv_obj_refr_pos+0x24c>
    lv_obj_t * parent = lv_obj_get_parent(obj);
 80052a2:	4640      	mov	r0, r8
 80052a4:	f002 fbaa 	bl	80079fc <lv_obj_get_parent>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_X);
 80052a8:	f241 0207 	movw	r2, #4103	; 0x1007
 80052ac:	ee08 0a10 	vmov	s16, r0
 80052b0:	9901      	ldr	r1, [sp, #4]
 80052b2:	4640      	mov	r0, r8
 80052b4:	f002 f858 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_Y);
 80052b8:	f241 0208 	movw	r2, #4104	; 0x1008
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_X);
 80052bc:	4605      	mov	r5, r0
    return (lv_coord_t)v.num;
 80052be:	b204      	sxth	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_Y);
 80052c0:	9901      	ldr	r1, [sp, #4]
 80052c2:	4640      	mov	r0, r8
 80052c4:	f002 f850 	bl	8007368 <lv_obj_get_style_prop>
    if(parent == NULL) {
 80052c8:	ee18 3a10 	vmov	r3, s16
 80052cc:	4681      	mov	r9, r0
    return (lv_coord_t)v.num;
 80052ce:	fa0f fa80 	sxth.w	sl, r0
 80052d2:	b94b      	cbnz	r3, 80052e8 <lv_obj_refr_pos+0x5e>
        lv_obj_move_to(obj, x, y);
 80052d4:	4652      	mov	r2, sl
        lv_obj_move_to(obj, x, y);
 80052d6:	4621      	mov	r1, r4
 80052d8:	4640      	mov	r0, r8
}
 80052da:	b007      	add	sp, #28
 80052dc:	ecbd 8b02 	vpop	{d8}
 80052e0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        lv_obj_move_to(obj, x, y);
 80052e4:	f7ff bf36 	b.w	8005154 <lv_obj_move_to>
    lv_coord_t pw = lv_obj_get_content_width(parent);
 80052e8:	ee18 0a10 	vmov	r0, s16
    if(LV_COORD_IS_PCT(x)) x = (pw * LV_COORD_GET_PCT(x)) / 100;
 80052ec:	f405 45c0 	and.w	r5, r5, #24576	; 0x6000
    lv_coord_t pw = lv_obj_get_content_width(parent);
 80052f0:	f7ff fdc9 	bl	8004e86 <lv_obj_get_content_width>
 80052f4:	4607      	mov	r7, r0
    lv_coord_t ph = lv_obj_get_content_height(parent);
 80052f6:	ee18 0a10 	vmov	r0, s16
 80052fa:	f7ff fdde 	bl	8004eba <lv_obj_get_content_height>
    if(LV_COORD_IS_PCT(x)) x = (pw * LV_COORD_GET_PCT(x)) / 100;
 80052fe:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
    lv_coord_t ph = lv_obj_get_content_height(parent);
 8005302:	4606      	mov	r6, r0
    if(LV_COORD_IS_PCT(x)) x = (pw * LV_COORD_GET_PCT(x)) / 100;
 8005304:	d10f      	bne.n	8005326 <lv_obj_refr_pos+0x9c>
 8005306:	f424 43c0 	bic.w	r3, r4, #24576	; 0x6000
 800530a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800530e:	dc0a      	bgt.n	8005326 <lv_obj_refr_pos+0x9c>
 8005310:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005314:	461c      	mov	r4, r3
 8005316:	bfc8      	it	gt
 8005318:	f5c3 747a 	rsbgt	r4, r3, #1000	; 0x3e8
 800531c:	2364      	movs	r3, #100	; 0x64
 800531e:	437c      	muls	r4, r7
 8005320:	fb94 f4f3 	sdiv	r4, r4, r3
 8005324:	b224      	sxth	r4, r4
    if(LV_COORD_IS_PCT(y)) y = (ph * LV_COORD_GET_PCT(y)) / 100;
 8005326:	f409 49c0 	and.w	r9, r9, #24576	; 0x6000
 800532a:	f5b9 5f00 	cmp.w	r9, #8192	; 0x2000
 800532e:	d111      	bne.n	8005354 <lv_obj_refr_pos+0xca>
 8005330:	f42a 45c0 	bic.w	r5, sl, #24576	; 0x6000
 8005334:	f5b5 6ffa 	cmp.w	r5, #2000	; 0x7d0
 8005338:	dc0c      	bgt.n	8005354 <lv_obj_refr_pos+0xca>
 800533a:	f5b5 7f7a 	cmp.w	r5, #1000	; 0x3e8
 800533e:	46aa      	mov	sl, r5
 8005340:	bfc8      	it	gt
 8005342:	f5c5 7a7a 	rsbgt	sl, r5, #1000	; 0x3e8
 8005346:	2564      	movs	r5, #100	; 0x64
 8005348:	fb0a fa06 	mul.w	sl, sl, r6
 800534c:	fb9a faf5 	sdiv	sl, sl, r5
 8005350:	fa0f fa8a 	sxth.w	sl, sl
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_X);
 8005354:	f243 020c 	movw	r2, #12300	; 0x300c
 8005358:	2100      	movs	r1, #0
 800535a:	4640      	mov	r0, r8
 800535c:	f002 f804 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_Y);
 8005360:	f243 020d 	movw	r2, #12301	; 0x300d
    return (lv_coord_t)v.num;
 8005364:	b203      	sxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_X);
 8005366:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_Y);
 8005368:	2100      	movs	r1, #0
 800536a:	4640      	mov	r0, r8
    return (lv_coord_t)v.num;
 800536c:	9305      	str	r3, [sp, #20]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_Y);
 800536e:	f001 fffb 	bl	8007368 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8005372:	f8b8 2018 	ldrh.w	r2, [r8, #24]
    if(LV_COORD_IS_PCT(tr_x)) tr_x = (w * LV_COORD_GET_PCT(tr_x)) / 100;
 8005376:	f405 45c0 	and.w	r5, r5, #24576	; 0x6000
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800537a:	f8b8 3014 	ldrh.w	r3, [r8, #20]
 800537e:	fa0f fc80 	sxth.w	ip, r0
 8005382:	3201      	adds	r2, #1
 8005384:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
 8005388:	9302      	str	r3, [sp, #8]
 800538a:	b293      	uxth	r3, r2
 800538c:	9a02      	ldr	r2, [sp, #8]
 800538e:	eba3 0202 	sub.w	r2, r3, r2
 8005392:	9301      	str	r3, [sp, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8005394:	f8b8 3016 	ldrh.w	r3, [r8, #22]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8005398:	fa0f fb82 	sxth.w	fp, r2
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800539c:	f8b8 201a 	ldrh.w	r2, [r8, #26]
 80053a0:	9303      	str	r3, [sp, #12]
 80053a2:	f102 0201 	add.w	r2, r2, #1
 80053a6:	b293      	uxth	r3, r2
 80053a8:	9a03      	ldr	r2, [sp, #12]
 80053aa:	eba3 0902 	sub.w	r9, r3, r2
 80053ae:	9304      	str	r3, [sp, #16]
 80053b0:	9b05      	ldr	r3, [sp, #20]
 80053b2:	fa0f f989 	sxth.w	r9, r9
 80053b6:	d111      	bne.n	80053dc <lv_obj_refr_pos+0x152>
 80053b8:	f423 41c0 	bic.w	r1, r3, #24576	; 0x6000
 80053bc:	f5b1 6ffa 	cmp.w	r1, #2000	; 0x7d0
 80053c0:	dc0c      	bgt.n	80053dc <lv_obj_refr_pos+0x152>
 80053c2:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 80053c6:	460b      	mov	r3, r1
 80053c8:	f04f 0264 	mov.w	r2, #100	; 0x64
 80053cc:	bfc8      	it	gt
 80053ce:	f5c1 737a 	rsbgt	r3, r1, #1000	; 0x3e8
 80053d2:	fb03 f30b 	mul.w	r3, r3, fp
 80053d6:	fb93 f3f2 	sdiv	r3, r3, r2
 80053da:	b21b      	sxth	r3, r3
    if(LV_COORD_IS_PCT(tr_y)) tr_y = (h * LV_COORD_GET_PCT(tr_y)) / 100;
 80053dc:	f400 40c0 	and.w	r0, r0, #24576	; 0x6000
 80053e0:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 80053e4:	d111      	bne.n	800540a <lv_obj_refr_pos+0x180>
 80053e6:	f42c 42c0 	bic.w	r2, ip, #24576	; 0x6000
 80053ea:	f5b2 6ffa 	cmp.w	r2, #2000	; 0x7d0
 80053ee:	dc0c      	bgt.n	800540a <lv_obj_refr_pos+0x180>
 80053f0:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 80053f4:	f04f 0564 	mov.w	r5, #100	; 0x64
 80053f8:	bfc8      	it	gt
 80053fa:	f5c2 727a 	rsbgt	r2, r2, #1000	; 0x3e8
 80053fe:	fb02 f209 	mul.w	r2, r2, r9
 8005402:	fb92 f2f5 	sdiv	r2, r2, r5
 8005406:	fa0f fc82 	sxth.w	ip, r2
    x += tr_x;
 800540a:	441c      	add	r4, r3
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 800540c:	2100      	movs	r1, #0
 800540e:	f241 0209 	movw	r2, #4105	; 0x1009
 8005412:	4640      	mov	r0, r8
 8005414:	b2a3      	uxth	r3, r4
    y += tr_y;
 8005416:	eb0a 050c 	add.w	r5, sl, ip
    x += tr_x;
 800541a:	b224      	sxth	r4, r4
 800541c:	9305      	str	r3, [sp, #20]
 800541e:	f001 ffa3 	bl	8007368 <lv_obj_get_style_prop>
    if(align == LV_ALIGN_DEFAULT) {
 8005422:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
    y += tr_y;
 8005426:	fa1f fa85 	uxth.w	sl, r5
    if(align == LV_ALIGN_DEFAULT) {
 800542a:	9b05      	ldr	r3, [sp, #20]
    y += tr_y;
 800542c:	b22d      	sxth	r5, r5
    if(align == LV_ALIGN_DEFAULT) {
 800542e:	d10c      	bne.n	800544a <lv_obj_refr_pos+0x1c0>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 8005430:	f241 426a 	movw	r2, #5226	; 0x146a
 8005434:	ee18 0a10 	vmov	r0, s16
 8005438:	9303      	str	r3, [sp, #12]
 800543a:	f001 ff95 	bl	8007368 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 800543e:	b2c0      	uxtb	r0, r0
        if(lv_obj_get_style_base_dir(parent, LV_PART_MAIN) == LV_BASE_DIR_RTL) align = LV_ALIGN_TOP_RIGHT;
 8005440:	9b03      	ldr	r3, [sp, #12]
 8005442:	2801      	cmp	r0, #1
 8005444:	d016      	beq.n	8005474 <lv_obj_refr_pos+0x1ea>
        lv_obj_move_to(obj, x, y);
 8005446:	462a      	mov	r2, r5
 8005448:	e745      	b.n	80052d6 <lv_obj_refr_pos+0x4c>
    if(align == LV_ALIGN_TOP_LEFT) {
 800544a:	2901      	cmp	r1, #1
 800544c:	d0fb      	beq.n	8005446 <lv_obj_refr_pos+0x1bc>
        switch(align) {
 800544e:	3902      	subs	r1, #2
 8005450:	2907      	cmp	r1, #7
 8005452:	d8f8      	bhi.n	8005446 <lv_obj_refr_pos+0x1bc>
 8005454:	e8df f001 	tbb	[pc, r1]
 8005458:	131c0e04 	.word	0x131c0e04
 800545c:	37282e23 	.word	0x37282e23
            x += pw / 2 - w / 2;
 8005460:	eb0b 74db 	add.w	r4, fp, fp, lsr #31
 8005464:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 8005468:	1064      	asrs	r4, r4, #1
 800546a:	ebc4 0467 	rsb	r4, r4, r7, asr #1
            x += pw - w;
 800546e:	441c      	add	r4, r3
 8005470:	b224      	sxth	r4, r4
            break;
 8005472:	e7e8      	b.n	8005446 <lv_obj_refr_pos+0x1bc>
            x += pw - w;
 8005474:	e9dd 1201 	ldrd	r1, r2, [sp, #4]
 8005478:	1a54      	subs	r4, r2, r1
 800547a:	443c      	add	r4, r7
 800547c:	e7f7      	b.n	800546e <lv_obj_refr_pos+0x1e4>
            x += pw / 2 - w / 2;
 800547e:	eb0b 74db 	add.w	r4, fp, fp, lsr #31
 8005482:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 8005486:	1064      	asrs	r4, r4, #1
 8005488:	ebc4 0467 	rsb	r4, r4, r7, asr #1
            x += pw - w;
 800548c:	441c      	add	r4, r3
 800548e:	b224      	sxth	r4, r4
            y += ph - h;
 8005490:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8005494:	1a9d      	subs	r5, r3, r2
 8005496:	4435      	add	r5, r6
            y += ph / 2 - h / 2;
 8005498:	4455      	add	r5, sl
 800549a:	b22d      	sxth	r5, r5
            break;
 800549c:	e7d3      	b.n	8005446 <lv_obj_refr_pos+0x1bc>
            x += pw - w;
 800549e:	e9dd 1201 	ldrd	r1, r2, [sp, #4]
 80054a2:	1a54      	subs	r4, r2, r1
 80054a4:	443c      	add	r4, r7
 80054a6:	e7f1      	b.n	800548c <lv_obj_refr_pos+0x202>
            x += pw - w;
 80054a8:	e9dd 1201 	ldrd	r1, r2, [sp, #4]
 80054ac:	1a54      	subs	r4, r2, r1
 80054ae:	443c      	add	r4, r7
            x += pw / 2 - w / 2;
 80054b0:	441c      	add	r4, r3
 80054b2:	b224      	sxth	r4, r4
            y += ph / 2 - h / 2;
 80054b4:	eb09 79d9 	add.w	r9, r9, r9, lsr #31
 80054b8:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
 80054bc:	ea4f 0569 	mov.w	r5, r9, asr #1
 80054c0:	ebc5 0566 	rsb	r5, r5, r6, asr #1
 80054c4:	e7e8      	b.n	8005498 <lv_obj_refr_pos+0x20e>
            x += pw / 2 - w / 2;
 80054c6:	eb0b 74db 	add.w	r4, fp, fp, lsr #31
 80054ca:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 80054ce:	1064      	asrs	r4, r4, #1
 80054d0:	ebc4 0467 	rsb	r4, r4, r7, asr #1
 80054d4:	e7ec      	b.n	80054b0 <lv_obj_refr_pos+0x226>
}
 80054d6:	b007      	add	sp, #28
 80054d8:	ecbd 8b02 	vpop	{d8}
 80054dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080054e0 <lv_obj_is_visible>:

bool lv_obj_is_visible(const lv_obj_t * obj)
{
 80054e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80054e2:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_area_t obj_coords;
    lv_coord_t ext_size = _lv_obj_get_ext_draw_size(obj);
 80054e4:	f7ff fb28 	bl	8004b38 <_lv_obj_get_ext_draw_size>
    lv_area_copy(&obj_coords, &obj->coords);
    obj_coords.x1 -= ext_size;
 80054e8:	b283      	uxth	r3, r0
    dest->y1 = src->y1;
 80054ea:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
    obj_coords.y1 -= ext_size;
    obj_coords.x2 += ext_size;
    obj_coords.y2 += ext_size;

    return lv_obj_area_is_visible(obj, &obj_coords);
 80054ee:	4620      	mov	r0, r4
    dest->x2 = src->x2;
 80054f0:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
    dest->y2 = src->y2;
 80054f4:	f9b4 601a 	ldrsh.w	r6, [r4, #26]
    obj_coords.y1 -= ext_size;
 80054f8:	1ac9      	subs	r1, r1, r3
    obj_coords.x1 -= ext_size;
 80054fa:	8aa5      	ldrh	r5, [r4, #20]
    obj_coords.x2 += ext_size;
 80054fc:	441a      	add	r2, r3
    obj_coords.y1 -= ext_size;
 80054fe:	f8ad 1002 	strh.w	r1, [sp, #2]
    return lv_obj_area_is_visible(obj, &obj_coords);
 8005502:	4669      	mov	r1, sp
    obj_coords.x1 -= ext_size;
 8005504:	1aed      	subs	r5, r5, r3
    obj_coords.y2 += ext_size;
 8005506:	4433      	add	r3, r6
    obj_coords.x2 += ext_size;
 8005508:	f8ad 2004 	strh.w	r2, [sp, #4]
    obj_coords.x1 -= ext_size;
 800550c:	f8ad 5000 	strh.w	r5, [sp]
    obj_coords.y2 += ext_size;
 8005510:	f8ad 3006 	strh.w	r3, [sp, #6]
    return lv_obj_area_is_visible(obj, &obj_coords);
 8005514:	f7ff fd8c 	bl	8005030 <lv_obj_area_is_visible>

}
 8005518:	b002      	add	sp, #8
 800551a:	bd70      	pop	{r4, r5, r6, pc}

0800551c <lv_obj_set_ext_click_area>:

void lv_obj_set_ext_click_area(lv_obj_t * obj, lv_coord_t size)
{
 800551c:	b538      	push	{r3, r4, r5, lr}
 800551e:	4605      	mov	r5, r0
 8005520:	460c      	mov	r4, r1
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_obj_allocate_spec_attr(obj);
 8005522:	f7fe ff1b 	bl	800435c <lv_obj_allocate_spec_attr>
    obj->spec_attr->ext_click_pad = size;
 8005526:	68ab      	ldr	r3, [r5, #8]
 8005528:	829c      	strh	r4, [r3, #20]
}
 800552a:	bd38      	pop	{r3, r4, r5, pc}

0800552c <lv_obj_get_click_area>:
    dest->y1 = src->y1;
 800552c:	f9b0 2016 	ldrsh.w	r2, [r0, #22]

void lv_obj_get_click_area(const lv_obj_t * obj, lv_area_t * area)
{
    lv_area_copy(area, &obj->coords);
    if(obj->spec_attr) {
 8005530:	6883      	ldr	r3, [r0, #8]
{
 8005532:	b570      	push	{r4, r5, r6, lr}
    dest->x1 = src->x1;
 8005534:	f9b0 5014 	ldrsh.w	r5, [r0, #20]
    dest->x2 = src->x2;
 8005538:	f9b0 4018 	ldrsh.w	r4, [r0, #24]
    dest->y2 = src->y2;
 800553c:	f9b0 601a 	ldrsh.w	r6, [r0, #26]
    dest->x1 = src->x1;
 8005540:	800d      	strh	r5, [r1, #0]
    dest->y1 = src->y1;
 8005542:	804a      	strh	r2, [r1, #2]
    dest->x2 = src->x2;
 8005544:	808c      	strh	r4, [r1, #4]
    dest->y2 = src->y2;
 8005546:	80ce      	strh	r6, [r1, #6]
    if(obj->spec_attr) {
 8005548:	b143      	cbz	r3, 800555c <lv_obj_get_click_area+0x30>
        area->x1 -= obj->spec_attr->ext_click_pad;
 800554a:	8a9b      	ldrh	r3, [r3, #20]
 800554c:	1aed      	subs	r5, r5, r3
        area->x2 += obj->spec_attr->ext_click_pad;
 800554e:	441c      	add	r4, r3
        area->y1 -= obj->spec_attr->ext_click_pad;
 8005550:	1ad2      	subs	r2, r2, r3
        area->y2 += obj->spec_attr->ext_click_pad;
 8005552:	4433      	add	r3, r6
        area->x1 -= obj->spec_attr->ext_click_pad;
 8005554:	800d      	strh	r5, [r1, #0]
        area->x2 += obj->spec_attr->ext_click_pad;
 8005556:	808c      	strh	r4, [r1, #4]
        area->y1 -= obj->spec_attr->ext_click_pad;
 8005558:	804a      	strh	r2, [r1, #2]
        area->y2 += obj->spec_attr->ext_click_pad;
 800555a:	80cb      	strh	r3, [r1, #6]
    }
}
 800555c:	bd70      	pop	{r4, r5, r6, pc}

0800555e <lv_obj_hit_test>:

bool lv_obj_hit_test(lv_obj_t * obj, const lv_point_t * point)
{
 800555e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8005560:	460e      	mov	r6, r1
    lv_area_t a;
    lv_obj_get_click_area(obj, &a);
 8005562:	4669      	mov	r1, sp
{
 8005564:	4605      	mov	r5, r0
    lv_obj_get_click_area(obj, &a);
 8005566:	f7ff ffe1 	bl	800552c <lv_obj_get_click_area>
    bool res = _lv_area_is_point_on(&a, point, 0);
 800556a:	2200      	movs	r2, #0
 800556c:	4631      	mov	r1, r6
 800556e:	4668      	mov	r0, sp
 8005570:	f011 fcdd 	bl	8016f2e <_lv_area_is_point_on>
    if(res == false) return false;
 8005574:	4604      	mov	r4, r0
 8005576:	b180      	cbz	r0, 800559a <lv_obj_hit_test+0x3c>

    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_ADV_HITTEST)) {
 8005578:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800557c:	4628      	mov	r0, r5
 800557e:	f7fe fc20 	bl	8003dc2 <lv_obj_has_flag>
 8005582:	b150      	cbz	r0, 800559a <lv_obj_hit_test+0x3c>
        lv_hit_test_info_t hit_info;
        hit_info.point = point;
        hit_info.res = true;
 8005584:	2301      	movs	r3, #1
        lv_event_send(obj, LV_EVENT_HIT_TEST, &hit_info);
 8005586:	aa02      	add	r2, sp, #8
 8005588:	2111      	movs	r1, #17
 800558a:	4628      	mov	r0, r5
        hit_info.point = point;
 800558c:	9602      	str	r6, [sp, #8]
        hit_info.res = true;
 800558e:	f88d 300c 	strb.w	r3, [sp, #12]
        lv_event_send(obj, LV_EVENT_HIT_TEST, &hit_info);
 8005592:	f7fc fc99 	bl	8001ec8 <lv_event_send>
        return hit_info.res;
 8005596:	f89d 400c 	ldrb.w	r4, [sp, #12]
    }

    return res;
}
 800559a:	4620      	mov	r0, r4
 800559c:	b004      	add	sp, #16
 800559e:	bd70      	pop	{r4, r5, r6, pc}

080055a0 <lv_clamp_width>:

lv_coord_t lv_clamp_width(lv_coord_t width, lv_coord_t min_width, lv_coord_t max_width, lv_coord_t ref_width)
{
 80055a0:	b530      	push	{r4, r5, lr}
    if(LV_COORD_IS_PCT(min_width)) min_width = (ref_width * LV_COORD_GET_PCT(min_width)) / 100;
 80055a2:	f401 44c0 	and.w	r4, r1, #24576	; 0x6000
 80055a6:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
 80055aa:	d110      	bne.n	80055ce <lv_clamp_width+0x2e>
 80055ac:	f421 45c0 	bic.w	r5, r1, #24576	; 0x6000
 80055b0:	f5b5 6ffa 	cmp.w	r5, #2000	; 0x7d0
 80055b4:	dc0b      	bgt.n	80055ce <lv_clamp_width+0x2e>
 80055b6:	f5b5 7f7a 	cmp.w	r5, #1000	; 0x3e8
 80055ba:	4629      	mov	r1, r5
 80055bc:	f04f 0464 	mov.w	r4, #100	; 0x64
 80055c0:	bfc8      	it	gt
 80055c2:	f5c5 717a 	rsbgt	r1, r5, #1000	; 0x3e8
 80055c6:	4359      	muls	r1, r3
 80055c8:	fb91 f1f4 	sdiv	r1, r1, r4
 80055cc:	b209      	sxth	r1, r1
    if(LV_COORD_IS_PCT(max_width)) max_width = (ref_width * LV_COORD_GET_PCT(max_width)) / 100;
 80055ce:	f402 44c0 	and.w	r4, r2, #24576	; 0x6000
 80055d2:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
 80055d6:	d10e      	bne.n	80055f6 <lv_clamp_width+0x56>
 80055d8:	f422 44c0 	bic.w	r4, r2, #24576	; 0x6000
 80055dc:	f5b4 6ffa 	cmp.w	r4, #2000	; 0x7d0
 80055e0:	dc09      	bgt.n	80055f6 <lv_clamp_width+0x56>
 80055e2:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 80055e6:	bfc8      	it	gt
 80055e8:	f5c4 747a 	rsbgt	r4, r4, #1000	; 0x3e8
 80055ec:	4363      	muls	r3, r4
 80055ee:	2464      	movs	r4, #100	; 0x64
 80055f0:	fb93 f4f4 	sdiv	r4, r3, r4
 80055f4:	b222      	sxth	r2, r4
    return LV_CLAMP(min_width, width, max_width);
 80055f6:	4290      	cmp	r0, r2
 80055f8:	bfa8      	it	ge
 80055fa:	4610      	movge	r0, r2
}
 80055fc:	4288      	cmp	r0, r1
 80055fe:	bfb8      	it	lt
 8005600:	4608      	movlt	r0, r1
 8005602:	bd30      	pop	{r4, r5, pc}

08005604 <lv_obj_refr_size>:
    if(obj->w_layout && obj->h_layout) return false;
 8005604:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
 8005608:	f003 0306 	and.w	r3, r3, #6
 800560c:	2b06      	cmp	r3, #6
{
 800560e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005612:	4604      	mov	r4, r0
 8005614:	ed2d 8b02 	vpush	{d8}
 8005618:	b087      	sub	sp, #28
    if(obj->w_layout && obj->h_layout) return false;
 800561a:	d003      	beq.n	8005624 <lv_obj_refr_size+0x20>
    lv_obj_t * parent = lv_obj_get_parent(obj);
 800561c:	f002 f9ee 	bl	80079fc <lv_obj_get_parent>
    if(parent == NULL) return false;
 8005620:	4606      	mov	r6, r0
 8005622:	b908      	cbnz	r0, 8005628 <lv_obj_refr_size+0x24>
    if(obj->w_layout && obj->h_layout) return false;
 8005624:	2000      	movs	r0, #0
 8005626:	e0c6      	b.n	80057b6 <lv_obj_refr_size+0x1b2>
    lv_coord_t sl_ori = lv_obj_get_scroll_left(obj);
 8005628:	4620      	mov	r0, r4
 800562a:	f000 fcc9 	bl	8005fc0 <lv_obj_get_scroll_left>
    if(obj->w_layout) {
 800562e:	f894 7023 	ldrb.w	r7, [r4, #35]	; 0x23
    lv_coord_t sl_ori = lv_obj_get_scroll_left(obj);
 8005632:	4680      	mov	r8, r0
    if(obj->w_layout) {
 8005634:	f017 0704 	ands.w	r7, r7, #4
 8005638:	f000 80c2 	beq.w	80057c0 <lv_obj_refr_size+0x1bc>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800563c:	8b20      	ldrh	r0, [r4, #24]
    bool w_content = false;
 800563e:	f04f 0a00 	mov.w	sl, #0
 8005642:	8aa3      	ldrh	r3, [r4, #20]
 8005644:	3001      	adds	r0, #1
 8005646:	1ac0      	subs	r0, r0, r3
 8005648:	fa0f f980 	sxth.w	r9, r0
    lv_coord_t st_ori = lv_obj_get_scroll_top(obj);
 800564c:	4620      	mov	r0, r4
 800564e:	f000 fc61 	bl	8005f14 <lv_obj_get_scroll_top>
    if(obj->h_layout) {
 8005652:	f894 5023 	ldrb.w	r5, [r4, #35]	; 0x23
    lv_coord_t st_ori = lv_obj_get_scroll_top(obj);
 8005656:	ee08 0a10 	vmov	s16, r0
    if(obj->h_layout) {
 800565a:	f015 0502 	ands.w	r5, r5, #2
 800565e:	f000 810c 	beq.w	800587a <lv_obj_refr_size+0x276>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8005662:	8b65      	ldrh	r5, [r4, #26]
 8005664:	8ae0      	ldrh	r0, [r4, #22]
 8005666:	3501      	adds	r5, #1
 8005668:	1a2d      	subs	r5, r5, r0
 800566a:	b22d      	sxth	r5, r5
    if(w_content || h_content) {
 800566c:	f1ba 0f00 	cmp.w	sl, #0
 8005670:	f040 8161 	bne.w	8005936 <lv_obj_refr_size+0x332>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8005674:	8b23      	ldrh	r3, [r4, #24]
 8005676:	8aa2      	ldrh	r2, [r4, #20]
 8005678:	3301      	adds	r3, #1
 800567a:	1a9b      	subs	r3, r3, r2
    if(lv_obj_get_width(obj) == w && lv_obj_get_height(obj) == h) return false;
 800567c:	b21b      	sxth	r3, r3
 800567e:	454b      	cmp	r3, r9
 8005680:	d106      	bne.n	8005690 <lv_obj_refr_size+0x8c>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8005682:	8b63      	ldrh	r3, [r4, #26]
 8005684:	8ae2      	ldrh	r2, [r4, #22]
 8005686:	3301      	adds	r3, #1
 8005688:	1a9b      	subs	r3, r3, r2
 800568a:	b21b      	sxth	r3, r3
 800568c:	42ab      	cmp	r3, r5
 800568e:	d0c9      	beq.n	8005624 <lv_obj_refr_size+0x20>
    lv_obj_invalidate(obj);
 8005690:	4620      	mov	r0, r4
    lv_area_copy(coords, &obj->coords);
 8005692:	f104 0814 	add.w	r8, r4, #20
    lv_obj_invalidate(obj);
 8005696:	f7ff fd3f 	bl	8005118 <lv_obj_invalidate>
    dest->x1 = src->x1;
 800569a:	8aa3      	ldrh	r3, [r4, #20]
    lv_obj_get_content_coords(parent, &parent_fit_area);
 800569c:	a904      	add	r1, sp, #16
 800569e:	4630      	mov	r0, r6
 80056a0:	f8ad 3008 	strh.w	r3, [sp, #8]
    dest->y1 = src->y1;
 80056a4:	8ae3      	ldrh	r3, [r4, #22]
 80056a6:	f8ad 300a 	strh.w	r3, [sp, #10]
    dest->x2 = src->x2;
 80056aa:	8b23      	ldrh	r3, [r4, #24]
 80056ac:	f8ad 300c 	strh.w	r3, [sp, #12]
    dest->y2 = src->y2;
 80056b0:	8b63      	ldrh	r3, [r4, #26]
 80056b2:	f8ad 300e 	strh.w	r3, [sp, #14]
 80056b6:	f7ff fc1a 	bl	8004eee <lv_obj_get_content_coords>
    bool on1 = _lv_area_is_in(&ori, &parent_fit_area, 0);
 80056ba:	2200      	movs	r2, #0
 80056bc:	a904      	add	r1, sp, #16
 80056be:	a802      	add	r0, sp, #8
 80056c0:	f011 fce8 	bl	8017094 <_lv_area_is_in>
    if(!on1) lv_obj_scrollbar_invalidate(parent);
 80056c4:	4607      	mov	r7, r0
 80056c6:	b910      	cbnz	r0, 80056ce <lv_obj_refr_size+0xca>
 80056c8:	4630      	mov	r0, r6
 80056ca:	f001 fae0 	bl	8006c8e <lv_obj_scrollbar_invalidate>
    obj->coords.y2 = obj->coords.y1 + h - 1;
 80056ce:	8ae0      	ldrh	r0, [r4, #22]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 80056d0:	f241 426a 	movw	r2, #5226	; 0x146a
 80056d4:	2100      	movs	r1, #0
 80056d6:	3801      	subs	r0, #1
 80056d8:	4405      	add	r5, r0
 80056da:	4620      	mov	r0, r4
 80056dc:	8365      	strh	r5, [r4, #26]
 80056de:	f001 fe43 	bl	8007368 <lv_obj_get_style_prop>
    lv_event_send(obj, LV_EVENT_SIZE_CHANGED, &ori);
 80056e2:	aa02      	add	r2, sp, #8
    return (lv_base_dir_t)v.num;
 80056e4:	b2c0      	uxtb	r0, r0
 80056e6:	2123      	movs	r1, #35	; 0x23
 80056e8:	fa1f f389 	uxth.w	r3, r9
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 80056ec:	2801      	cmp	r0, #1
        obj->coords.x1 = obj->coords.x2 - w + 1;
 80056ee:	bf0b      	itete	eq
 80056f0:	8b20      	ldrheq	r0, [r4, #24]
        obj->coords.x2 = obj->coords.x1 + w - 1;
 80056f2:	8aa0      	ldrhne	r0, [r4, #20]
        obj->coords.x1 = obj->coords.x2 - w + 1;
 80056f4:	3001      	addeq	r0, #1
        obj->coords.x2 = obj->coords.x1 + w - 1;
 80056f6:	f100 30ff 	addne.w	r0, r0, #4294967295
        obj->coords.x1 = obj->coords.x2 - w + 1;
 80056fa:	bf0c      	ite	eq
 80056fc:	1ac3      	subeq	r3, r0, r3
        obj->coords.x2 = obj->coords.x1 + w - 1;
 80056fe:	181b      	addne	r3, r3, r0
    lv_event_send(obj, LV_EVENT_SIZE_CHANGED, &ori);
 8005700:	4620      	mov	r0, r4
        obj->coords.x1 = obj->coords.x2 - w + 1;
 8005702:	bf0c      	ite	eq
 8005704:	82a3      	strheq	r3, [r4, #20]
        obj->coords.x2 = obj->coords.x1 + w - 1;
 8005706:	8323      	strhne	r3, [r4, #24]
    lv_event_send(obj, LV_EVENT_SIZE_CHANGED, &ori);
 8005708:	f7fc fbde 	bl	8001ec8 <lv_event_send>
    lv_event_send(parent, LV_EVENT_CHILD_CHANGED, obj);
 800570c:	4622      	mov	r2, r4
 800570e:	2122      	movs	r1, #34	; 0x22
 8005710:	4630      	mov	r0, r6
 8005712:	f7fc fbd9 	bl	8001ec8 <lv_event_send>
    lv_obj_invalidate(obj);
 8005716:	4620      	mov	r0, r4
 8005718:	f7ff fcfe 	bl	8005118 <lv_obj_invalidate>
    if(lv_obj_get_scroll_snap_y(obj) == LV_SCROLL_SNAP_NONE) {
 800571c:	4620      	mov	r0, r4
 800571e:	f000 fbcf 	bl	8005ec0 <lv_obj_get_scroll_snap_y>
 8005722:	4605      	mov	r5, r0
 8005724:	b9a8      	cbnz	r0, 8005752 <lv_obj_refr_size+0x14e>
        lv_coord_t st = lv_obj_get_scroll_top(obj);
 8005726:	4620      	mov	r0, r4
 8005728:	f000 fbf4 	bl	8005f14 <lv_obj_get_scroll_top>
 800572c:	4681      	mov	r9, r0
        lv_coord_t sb = lv_obj_get_scroll_bottom(obj);
 800572e:	4620      	mov	r0, r4
 8005730:	f000 fbf2 	bl	8005f18 <lv_obj_get_scroll_bottom>
        if(sb < 0 && st > 0) {
 8005734:	1e01      	subs	r1, r0, #0
 8005736:	da0c      	bge.n	8005752 <lv_obj_refr_size+0x14e>
 8005738:	f1b9 0f00 	cmp.w	r9, #0
 800573c:	dd09      	ble.n	8005752 <lv_obj_refr_size+0x14e>
            sb = LV_MIN(st, -sb);
 800573e:	424a      	negs	r2, r1
            lv_obj_scroll_by(obj, 0, sb, LV_ANIM_OFF);
 8005740:	462b      	mov	r3, r5
 8005742:	4629      	mov	r1, r5
 8005744:	4620      	mov	r0, r4
            sb = LV_MIN(st, -sb);
 8005746:	454a      	cmp	r2, r9
 8005748:	bfa8      	it	ge
 800574a:	464a      	movge	r2, r9
            lv_obj_scroll_by(obj, 0, sb, LV_ANIM_OFF);
 800574c:	b212      	sxth	r2, r2
 800574e:	f000 fd27 	bl	80061a0 <lv_obj_scroll_by>
    if(lv_obj_get_scroll_snap_x(obj) == LV_SCROLL_SNAP_NONE) {
 8005752:	4620      	mov	r0, r4
 8005754:	f000 fbae 	bl	8005eb4 <lv_obj_get_scroll_snap_x>
 8005758:	bb10      	cbnz	r0, 80057a0 <lv_obj_refr_size+0x19c>
 800575a:	9001      	str	r0, [sp, #4]
        lv_coord_t sl = lv_obj_get_scroll_left(obj);
 800575c:	4620      	mov	r0, r4
 800575e:	f000 fc2f 	bl	8005fc0 <lv_obj_get_scroll_left>
 8005762:	4681      	mov	r9, r0
        lv_coord_t sr = lv_obj_get_scroll_right(obj);
 8005764:	4620      	mov	r0, r4
 8005766:	f000 fc97 	bl	8006098 <lv_obj_get_scroll_right>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 800576a:	9b01      	ldr	r3, [sp, #4]
 800576c:	4605      	mov	r5, r0
 800576e:	f241 426a 	movw	r2, #5226	; 0x146a
 8005772:	4619      	mov	r1, r3
 8005774:	4620      	mov	r0, r4
 8005776:	f001 fdf7 	bl	8007368 <lv_obj_get_style_prop>
        if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) != LV_BASE_DIR_RTL) {
 800577a:	9b01      	ldr	r3, [sp, #4]
    return (lv_base_dir_t)v.num;
 800577c:	b2c0      	uxtb	r0, r0
 800577e:	2801      	cmp	r0, #1
 8005780:	f000 80e6 	beq.w	8005950 <lv_obj_refr_size+0x34c>
            if(sr < 0 && sl > 0) {
 8005784:	2d00      	cmp	r5, #0
 8005786:	da0b      	bge.n	80057a0 <lv_obj_refr_size+0x19c>
 8005788:	f1b9 0f00 	cmp.w	r9, #0
 800578c:	dd08      	ble.n	80057a0 <lv_obj_refr_size+0x19c>
                sr = LV_MIN(sl, -sr);
 800578e:	426d      	negs	r5, r5
                lv_obj_scroll_by(obj, sr, 0, LV_ANIM_OFF);
 8005790:	461a      	mov	r2, r3
                sr = LV_MIN(sl, -sr);
 8005792:	454d      	cmp	r5, r9
 8005794:	bfa8      	it	ge
 8005796:	464d      	movge	r5, r9
                lv_obj_scroll_by(obj, sr, 0, LV_ANIM_OFF);
 8005798:	b229      	sxth	r1, r5
                lv_obj_scroll_by(obj, sl, 0, LV_ANIM_OFF);
 800579a:	4620      	mov	r0, r4
 800579c:	f000 fd00 	bl	80061a0 <lv_obj_scroll_by>
    bool on2 = _lv_area_is_in(&obj->coords, &parent_fit_area, 0);
 80057a0:	2200      	movs	r2, #0
 80057a2:	a904      	add	r1, sp, #16
 80057a4:	4640      	mov	r0, r8
 80057a6:	f011 fc75 	bl	8017094 <_lv_area_is_in>
    if(on1 || (!on1 && on2)) lv_obj_scrollbar_invalidate(parent);
 80057aa:	b907      	cbnz	r7, 80057ae <lv_obj_refr_size+0x1aa>
 80057ac:	b110      	cbz	r0, 80057b4 <lv_obj_refr_size+0x1b0>
 80057ae:	4630      	mov	r0, r6
 80057b0:	f001 fa6d 	bl	8006c8e <lv_obj_scrollbar_invalidate>
    return true;
 80057b4:	2001      	movs	r0, #1
}
 80057b6:	b007      	add	sp, #28
 80057b8:	ecbd 8b02 	vpop	{d8}
 80057bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 80057c0:	f241 0201 	movw	r2, #4097	; 0x1001
 80057c4:	4639      	mov	r1, r7
 80057c6:	4620      	mov	r0, r4
 80057c8:	f001 fdce 	bl	8007368 <lv_obj_get_style_prop>
        w_content = w == LV_SIZE_CONTENT ? true : false;
 80057cc:	f242 73d1 	movw	r3, #10193	; 0x27d1
    return (lv_coord_t)v.num;
 80057d0:	b205      	sxth	r5, r0
 80057d2:	429d      	cmp	r5, r3
 80057d4:	bf0c      	ite	eq
 80057d6:	f04f 0a01 	moveq.w	sl, #1
 80057da:	f04f 0a00 	movne.w	sl, #0
        if(w_content) {
 80057de:	d112      	bne.n	8005806 <lv_obj_refr_size+0x202>
            lv_obj_scroll_to_x(obj, 0, LV_ANIM_OFF);
 80057e0:	463a      	mov	r2, r7
 80057e2:	4639      	mov	r1, r7
 80057e4:	4620      	mov	r0, r4
 80057e6:	f000 fe97 	bl	8006518 <lv_obj_scroll_to_x>
static void calc_auto_size(lv_obj_t * obj, lv_coord_t * w_out, lv_coord_t * h_out)
{
    if(!w_out && !h_out) return;
    /*Get the bounding box of the children*/
    if(w_out) {
        lv_coord_t scroll_right = lv_obj_get_scroll_right(obj);
 80057ea:	4620      	mov	r0, r4
 80057ec:	f000 fc54 	bl	8006098 <lv_obj_get_scroll_right>
 80057f0:	4607      	mov	r7, r0
        lv_coord_t scroll_left = lv_obj_get_scroll_left(obj);
 80057f2:	4620      	mov	r0, r4
 80057f4:	f000 fbe4 	bl	8005fc0 <lv_obj_get_scroll_left>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80057f8:	8b22      	ldrh	r2, [r4, #24]
 80057fa:	8aa3      	ldrh	r3, [r4, #20]
 80057fc:	3201      	adds	r2, #1
 80057fe:	1ad2      	subs	r2, r2, r3
        *w_out = lv_obj_get_width(obj) + scroll_right + scroll_left;
 8005800:	19d3      	adds	r3, r2, r7
 8005802:	4418      	add	r0, r3
 8005804:	b205      	sxth	r5, r0
        bool pct_w = LV_COORD_IS_PCT(w) ? true : false;
 8005806:	f405 43c0 	and.w	r3, r5, #24576	; 0x6000
 800580a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800580e:	d131      	bne.n	8005874 <lv_obj_refr_size+0x270>
 8005810:	f425 49c0 	bic.w	r9, r5, #24576	; 0x6000
 8005814:	f5b9 6ffa 	cmp.w	r9, #2000	; 0x7d0
 8005818:	bfcc      	ite	gt
 800581a:	f04f 0900 	movgt.w	r9, #0
 800581e:	f04f 0901 	movle.w	r9, #1
        lv_coord_t parent_w = lv_obj_get_content_width(parent);
 8005822:	4630      	mov	r0, r6
 8005824:	f7ff fb2f 	bl	8004e86 <lv_obj_get_content_width>
 8005828:	4607      	mov	r7, r0
        if(pct_w) w = (LV_COORD_GET_PCT(w) * parent_w) / 100;
 800582a:	f1b9 0f00 	cmp.w	r9, #0
 800582e:	d00b      	beq.n	8005848 <lv_obj_refr_size+0x244>
 8005830:	f425 45c0 	bic.w	r5, r5, #24576	; 0x6000
 8005834:	f5b5 7f7a 	cmp.w	r5, #1000	; 0x3e8
 8005838:	bfc8      	it	gt
 800583a:	f5c5 757a 	rsbgt	r5, r5, #1000	; 0x3e8
 800583e:	4345      	muls	r5, r0
 8005840:	2064      	movs	r0, #100	; 0x64
 8005842:	fb95 f5f0 	sdiv	r5, r5, r0
 8005846:	b22d      	sxth	r5, r5
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MIN_WIDTH);
 8005848:	f241 0202 	movw	r2, #4098	; 0x1002
 800584c:	2100      	movs	r1, #0
 800584e:	4620      	mov	r0, r4
 8005850:	f001 fd8a 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_WIDTH);
 8005854:	f241 0203 	movw	r2, #4099	; 0x1003
    return (lv_coord_t)v.num;
 8005858:	fa0f f980 	sxth.w	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_WIDTH);
 800585c:	2100      	movs	r1, #0
 800585e:	4620      	mov	r0, r4
 8005860:	f001 fd82 	bl	8007368 <lv_obj_get_style_prop>
        w = lv_clamp_width(w, minw, maxw, parent_w);
 8005864:	4649      	mov	r1, r9
 8005866:	b202      	sxth	r2, r0
 8005868:	463b      	mov	r3, r7
 800586a:	4628      	mov	r0, r5
 800586c:	f7ff fe98 	bl	80055a0 <lv_clamp_width>
 8005870:	4681      	mov	r9, r0
 8005872:	e6eb      	b.n	800564c <lv_obj_refr_size+0x48>
        bool pct_w = LV_COORD_IS_PCT(w) ? true : false;
 8005874:	f04f 0900 	mov.w	r9, #0
 8005878:	e7d3      	b.n	8005822 <lv_obj_refr_size+0x21e>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 800587a:	f241 0204 	movw	r2, #4100	; 0x1004
 800587e:	4629      	mov	r1, r5
 8005880:	4620      	mov	r0, r4
 8005882:	f001 fd71 	bl	8007368 <lv_obj_get_style_prop>
        if(h_content) {
 8005886:	f242 73d1 	movw	r3, #10193	; 0x27d1
    return (lv_coord_t)v.num;
 800588a:	b207      	sxth	r7, r0
 800588c:	429f      	cmp	r7, r3
 800588e:	d15a      	bne.n	8005946 <lv_obj_refr_size+0x342>
            lv_obj_scroll_to_y(obj, 0, LV_ANIM_OFF);
 8005890:	462a      	mov	r2, r5
 8005892:	4629      	mov	r1, r5
 8005894:	4620      	mov	r0, r4
 8005896:	f000 fe83 	bl	80065a0 <lv_obj_scroll_to_y>
    }

    if(h_out) {
        lv_coord_t scroll_bottom = lv_obj_get_scroll_bottom(obj);
 800589a:	4620      	mov	r0, r4
 800589c:	f000 fb3c 	bl	8005f18 <lv_obj_get_scroll_bottom>
 80058a0:	4683      	mov	fp, r0
        lv_coord_t scroll_top = lv_obj_get_scroll_top(obj);
 80058a2:	4620      	mov	r0, r4
 80058a4:	f000 fb36 	bl	8005f14 <lv_obj_get_scroll_top>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80058a8:	8b62      	ldrh	r2, [r4, #26]
 80058aa:	8ae3      	ldrh	r3, [r4, #22]
 80058ac:	3201      	adds	r2, #1
 80058ae:	1ad2      	subs	r2, r2, r3
        *h_out = lv_obj_get_height(obj) + scroll_bottom + scroll_top;
 80058b0:	eb02 030b 	add.w	r3, r2, fp
 80058b4:	4418      	add	r0, r3
 80058b6:	b205      	sxth	r5, r0
        bool pct_h = LV_COORD_IS_PCT(h) ? true : false;
 80058b8:	f405 43c0 	and.w	r3, r5, #24576	; 0x6000
 80058bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058c0:	d143      	bne.n	800594a <lv_obj_refr_size+0x346>
 80058c2:	f425 4bc0 	bic.w	fp, r5, #24576	; 0x6000
 80058c6:	f5bb 6ffa 	cmp.w	fp, #2000	; 0x7d0
 80058ca:	bfcc      	ite	gt
 80058cc:	f04f 0b00 	movgt.w	fp, #0
 80058d0:	f04f 0b01 	movle.w	fp, #1
        lv_coord_t parent_h = lv_obj_get_content_height(parent);
 80058d4:	4630      	mov	r0, r6
 80058d6:	f7ff faf0 	bl	8004eba <lv_obj_get_content_height>
 80058da:	4603      	mov	r3, r0
        if(pct_h) h = (LV_COORD_GET_PCT(h) * parent_h) / 100;
 80058dc:	f1bb 0f00 	cmp.w	fp, #0
 80058e0:	d00b      	beq.n	80058fa <lv_obj_refr_size+0x2f6>
 80058e2:	f425 45c0 	bic.w	r5, r5, #24576	; 0x6000
 80058e6:	f5b5 7f7a 	cmp.w	r5, #1000	; 0x3e8
 80058ea:	bfc8      	it	gt
 80058ec:	f5c5 757a 	rsbgt	r5, r5, #1000	; 0x3e8
 80058f0:	4345      	muls	r5, r0
 80058f2:	2064      	movs	r0, #100	; 0x64
 80058f4:	fb95 f5f0 	sdiv	r5, r5, r0
 80058f8:	b22d      	sxth	r5, r5
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MIN_HEIGHT);
 80058fa:	f241 0205 	movw	r2, #4101	; 0x1005
 80058fe:	2100      	movs	r1, #0
 8005900:	4620      	mov	r0, r4
 8005902:	9301      	str	r3, [sp, #4]
 8005904:	f001 fd30 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_HEIGHT);
 8005908:	f241 0206 	movw	r2, #4102	; 0x1006
    return (lv_coord_t)v.num;
 800590c:	fa0f fb80 	sxth.w	fp, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_HEIGHT);
 8005910:	2100      	movs	r1, #0
 8005912:	4620      	mov	r0, r4
 8005914:	f001 fd28 	bl	8007368 <lv_obj_get_style_prop>
        h = lv_clamp_height(h, minh, maxh, parent_h);
 8005918:	9b01      	ldr	r3, [sp, #4]
 800591a:	b202      	sxth	r2, r0
 800591c:	4659      	mov	r1, fp
 800591e:	4628      	mov	r0, r5
 8005920:	f7ff fe3e 	bl	80055a0 <lv_clamp_width>
 8005924:	4605      	mov	r5, r0
    if(w_content || h_content) {
 8005926:	f1ba 0f00 	cmp.w	sl, #0
 800592a:	d104      	bne.n	8005936 <lv_obj_refr_size+0x332>
 800592c:	f242 73d1 	movw	r3, #10193	; 0x27d1
 8005930:	429f      	cmp	r7, r3
 8005932:	f47f ae9f 	bne.w	8005674 <lv_obj_refr_size+0x70>
        lv_obj_scroll_to(obj, sl_ori, st_ori, LV_ANIM_OFF);
 8005936:	2300      	movs	r3, #0
 8005938:	ee18 2a10 	vmov	r2, s16
 800593c:	4641      	mov	r1, r8
 800593e:	4620      	mov	r0, r4
 8005940:	f000 fe56 	bl	80065f0 <lv_obj_scroll_to>
 8005944:	e696      	b.n	8005674 <lv_obj_refr_size+0x70>
 8005946:	463d      	mov	r5, r7
 8005948:	e7b6      	b.n	80058b8 <lv_obj_refr_size+0x2b4>
        bool pct_h = LV_COORD_IS_PCT(h) ? true : false;
 800594a:	f04f 0b00 	mov.w	fp, #0
 800594e:	e7c1      	b.n	80058d4 <lv_obj_refr_size+0x2d0>
            if(sl < 0 && sr > 0) {
 8005950:	f1b9 0f00 	cmp.w	r9, #0
 8005954:	f6bf af24 	bge.w	80057a0 <lv_obj_refr_size+0x19c>
 8005958:	2d00      	cmp	r5, #0
 800595a:	f77f af21 	ble.w	80057a0 <lv_obj_refr_size+0x19c>
                lv_obj_scroll_by(obj, sl, 0, LV_ANIM_OFF);
 800595e:	461a      	mov	r2, r3
 8005960:	4649      	mov	r1, r9
 8005962:	e71a      	b.n	800579a <lv_obj_refr_size+0x196>

08005964 <layout_update_core>:
    }
}

static void layout_update_core(lv_obj_t * obj)
{
 8005964:	b570      	push	{r4, r5, r6, lr}
 8005966:	4604      	mov	r4, r0
    uint32_t i;
    for(i = 0; i < lv_obj_get_child_cnt(obj); i++) {
 8005968:	2500      	movs	r5, #0
 800596a:	4620      	mov	r0, r4
 800596c:	f002 f858 	bl	8007a20 <lv_obj_get_child_cnt>
 8005970:	42a8      	cmp	r0, r5
 8005972:	d82b      	bhi.n	80059cc <layout_update_core+0x68>
        lv_obj_t * child = lv_obj_get_child(obj, i);
        layout_update_core(child);
    }

    if(obj->layout_inv == 0) return;
 8005974:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8005978:	07da      	lsls	r2, r3, #31
 800597a:	d52f      	bpl.n	80059dc <layout_update_core+0x78>

    obj->layout_inv = 0;
 800597c:	f36f 0300 	bfc	r3, #0, #1

    lv_obj_refr_size(obj);
 8005980:	4620      	mov	r0, r4
    obj->layout_inv = 0;
 8005982:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    lv_obj_refr_size(obj);
 8005986:	f7ff fe3d 	bl	8005604 <lv_obj_refr_size>
    lv_obj_refr_pos(obj);
 800598a:	4620      	mov	r0, r4
 800598c:	f7ff fc7d 	bl	800528a <lv_obj_refr_pos>

    if(lv_obj_get_child_cnt(obj) > 0) {
 8005990:	4620      	mov	r0, r4
 8005992:	f002 f845 	bl	8007a20 <lv_obj_get_child_cnt>
 8005996:	b308      	cbz	r0, 80059dc <layout_update_core+0x78>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LAYOUT);
 8005998:	f241 0269 	movw	r2, #4201	; 0x1069
 800599c:	2100      	movs	r1, #0
 800599e:	4620      	mov	r0, r4
 80059a0:	f001 fce2 	bl	8007368 <lv_obj_get_style_prop>
    return (uint16_t)v.num;
 80059a4:	b280      	uxth	r0, r0
        uint32_t layout_id = lv_obj_get_style_layout(obj, LV_PART_MAIN);
        if(layout_id > 0 && layout_id <= layout_cnt) {
 80059a6:	b1c8      	cbz	r0, 80059dc <layout_update_core+0x78>
 80059a8:	4b0d      	ldr	r3, [pc, #52]	; (80059e0 <layout_update_core+0x7c>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4283      	cmp	r3, r0
 80059ae:	d315      	bcc.n	80059dc <layout_update_core+0x78>
            void  * user_data = LV_GC_ROOT(_lv_layout_list)[layout_id -1].user_data;
 80059b0:	f100 5000 	add.w	r0, r0, #536870912	; 0x20000000
 80059b4:	4b0b      	ldr	r3, [pc, #44]	; (80059e4 <layout_update_core+0x80>)
 80059b6:	3801      	subs	r0, #1
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
            LV_GC_ROOT(_lv_layout_list)[layout_id -1].cb(obj, user_data);
 80059be:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
 80059c2:	4620      	mov	r0, r4
 80059c4:	6851      	ldr	r1, [r2, #4]
        }
    }
}
 80059c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            LV_GC_ROOT(_lv_layout_list)[layout_id -1].cb(obj, user_data);
 80059ca:	4718      	bx	r3
        lv_obj_t * child = lv_obj_get_child(obj, i);
 80059cc:	4629      	mov	r1, r5
 80059ce:	4620      	mov	r0, r4
 80059d0:	f002 f817 	bl	8007a02 <lv_obj_get_child>
    for(i = 0; i < lv_obj_get_child_cnt(obj); i++) {
 80059d4:	3501      	adds	r5, #1
        layout_update_core(child);
 80059d6:	f7ff ffc5 	bl	8005964 <layout_update_core>
    for(i = 0; i < lv_obj_get_child_cnt(obj); i++) {
 80059da:	e7c6      	b.n	800596a <layout_update_core+0x6>
}
 80059dc:	bd70      	pop	{r4, r5, r6, pc}
 80059de:	bf00      	nop
 80059e0:	200029b0 	.word	0x200029b0
 80059e4:	2000ae5c 	.word	0x2000ae5c

080059e8 <lv_obj_update_layout>:
{
 80059e8:	b538      	push	{r3, r4, r5, lr}
    if(mutex) {
 80059ea:	4c0b      	ldr	r4, [pc, #44]	; (8005a18 <lv_obj_update_layout+0x30>)
 80059ec:	7823      	ldrb	r3, [r4, #0]
 80059ee:	b953      	cbnz	r3, 8005a06 <lv_obj_update_layout+0x1e>
    mutex = true;
 80059f0:	2301      	movs	r3, #1
 80059f2:	7023      	strb	r3, [r4, #0]
    lv_obj_t * scr = lv_obj_get_screen(obj);
 80059f4:	f001 ffdb 	bl	80079ae <lv_obj_get_screen>
 80059f8:	4605      	mov	r5, r0
    while(scr->scr_layout_inv) {
 80059fa:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 80059fe:	f013 0202 	ands.w	r2, r3, #2
 8005a02:	d101      	bne.n	8005a08 <lv_obj_update_layout+0x20>
    mutex = false;
 8005a04:	7022      	strb	r2, [r4, #0]
}
 8005a06:	bd38      	pop	{r3, r4, r5, pc}
        scr->scr_layout_inv = 0;
 8005a08:	f36f 0341 	bfc	r3, #1, #1
        layout_update_core(scr);
 8005a0c:	4628      	mov	r0, r5
        scr->scr_layout_inv = 0;
 8005a0e:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
        layout_update_core(scr);
 8005a12:	f7ff ffa7 	bl	8005964 <layout_update_core>
 8005a16:	e7f0      	b.n	80059fa <lv_obj_update_layout+0x12>
 8005a18:	200029b4 	.word	0x200029b4

08005a1c <lv_obj_align_to>:
{
 8005a1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a20:	460e      	mov	r6, r1
 8005a22:	4605      	mov	r5, r0
 8005a24:	4614      	mov	r4, r2
 8005a26:	4698      	mov	r8, r3
 8005a28:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    lv_obj_update_layout(obj);
 8005a2c:	f7ff ffdc 	bl	80059e8 <lv_obj_update_layout>
    if(base == NULL) base = lv_obj_get_parent(obj);
 8005a30:	b91e      	cbnz	r6, 8005a3a <lv_obj_align_to+0x1e>
 8005a32:	4628      	mov	r0, r5
 8005a34:	f001 ffe2 	bl	80079fc <lv_obj_get_parent>
 8005a38:	4606      	mov	r6, r0
    lv_obj_t * parent = lv_obj_get_parent(obj);
 8005a3a:	4628      	mov	r0, r5
 8005a3c:	f001 ffde 	bl	80079fc <lv_obj_get_parent>
 8005a40:	4607      	mov	r7, r0
    lv_coord_t border_width = lv_obj_get_style_border_width(parent, LV_PART_MAIN);
 8005a42:	f7ff f8ab 	bl	8004b9c <lv_obj_get_style_border_width.constprop.0>
 8005a46:	4683      	mov	fp, r0
    lv_coord_t pleft = lv_obj_get_style_pad_left(parent, LV_PART_MAIN) + border_width;
 8005a48:	4638      	mov	r0, r7
 8005a4a:	f7ff f8af 	bl	8004bac <lv_obj_get_style_pad_left.constprop.0>
 8005a4e:	4682      	mov	sl, r0
    lv_coord_t ptop = lv_obj_get_style_pad_top(parent, LV_PART_MAIN) + border_width;
 8005a50:	4638      	mov	r0, r7
 8005a52:	f7ff f8b3 	bl	8004bbc <lv_obj_get_style_pad_top.constprop.0>
    if(align == LV_ALIGN_DEFAULT) {
 8005a56:	b95c      	cbnz	r4, 8005a70 <lv_obj_align_to+0x54>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 8005a58:	f241 426a 	movw	r2, #5226	; 0x146a
 8005a5c:	4621      	mov	r1, r4
 8005a5e:	4638      	mov	r0, r7
 8005a60:	f001 fc82 	bl	8007368 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 8005a64:	b2c0      	uxtb	r0, r0
        if(lv_obj_get_style_base_dir(parent, LV_PART_MAIN) == LV_BASE_DIR_RTL) align = LV_ALIGN_TOP_RIGHT;
 8005a66:	2801      	cmp	r0, #1
 8005a68:	f000 8089 	beq.w	8005b7e <lv_obj_align_to+0x162>
    lv_coord_t ptop = lv_obj_get_style_pad_top(parent, LV_PART_MAIN) + border_width;
 8005a6c:	46a2      	mov	sl, r4
 8005a6e:	e05c      	b.n	8005b2a <lv_obj_align_to+0x10e>
    lv_coord_t pleft = lv_obj_get_style_pad_left(parent, LV_PART_MAIN) + border_width;
 8005a70:	fa1a fa8b 	uxtah	sl, sl, fp
    lv_coord_t ptop = lv_obj_get_style_pad_top(parent, LV_PART_MAIN) + border_width;
 8005a74:	fa10 f08b 	uxtah	r0, r0, fp
 8005a78:	3c02      	subs	r4, #2
    lv_coord_t pleft = lv_obj_get_style_pad_left(parent, LV_PART_MAIN) + border_width;
 8005a7a:	fa1f fc8a 	uxth.w	ip, sl
    lv_coord_t ptop = lv_obj_get_style_pad_top(parent, LV_PART_MAIN) + border_width;
 8005a7e:	b281      	uxth	r1, r0
    switch(align) {
 8005a80:	2c13      	cmp	r4, #19
 8005a82:	f200 81a4 	bhi.w	8005dce <lv_obj_align_to+0x3b2>
 8005a86:	e8df f014 	tbh	[pc, r4, lsl #1]
 8005a8a:	003a      	.short	0x003a
 8005a8c:	0086007a 	.word	0x0086007a
 8005a90:	00b10092 	.word	0x00b10092
 8005a94:	00cf00bd 	.word	0x00cf00bd
 8005a98:	00db0014 	.word	0x00db0014
 8005a9c:	00ff00e5 	.word	0x00ff00e5
 8005aa0:	0114010c 	.word	0x0114010c
 8005aa4:	013b012e 	.word	0x013b012e
 8005aa8:	01670149 	.word	0x01670149
 8005aac:	017e0178 	.word	0x017e0178
 8005ab0:	019c      	.short	0x019c
        x = lv_obj_get_content_width(base) / 2 - lv_obj_get_width(obj) / 2;
 8005ab2:	4630      	mov	r0, r6
 8005ab4:	f7ff f9e7 	bl	8004e86 <lv_obj_get_content_width>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8005ab8:	8b2b      	ldrh	r3, [r5, #24]
 8005aba:	f8b5 a014 	ldrh.w	sl, [r5, #20]
 8005abe:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8005ac2:	3301      	adds	r3, #1
 8005ac4:	eba3 030a 	sub.w	r3, r3, sl
 8005ac8:	f3c3 3ac0 	ubfx	sl, r3, #15, #1
 8005acc:	fa0a fa83 	sxtah	sl, sl, r3
 8005ad0:	ea4f 0a6a 	mov.w	sl, sl, asr #1
 8005ad4:	ebca 0a60 	rsb	sl, sl, r0, asr #1
 8005ad8:	fa0f fa8a 	sxth.w	sl, sl
        y = lv_obj_get_content_height(base) / 2 - lv_obj_get_height(obj) / 2;
 8005adc:	4630      	mov	r0, r6
 8005ade:	f7ff f9ec 	bl	8004eba <lv_obj_get_content_height>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8005ae2:	8b6b      	ldrh	r3, [r5, #26]
 8005ae4:	8aec      	ldrh	r4, [r5, #22]
 8005ae6:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8005aea:	3301      	adds	r3, #1
 8005aec:	1b1b      	subs	r3, r3, r4
 8005aee:	f3c3 34c0 	ubfx	r4, r3, #15, #1
 8005af2:	fa04 f483 	sxtah	r4, r4, r3
 8005af6:	1064      	asrs	r4, r4, #1
        y = lv_obj_get_height(base) / 2 - lv_obj_get_height(obj) / 2 - ptop;
 8005af8:	ebc4 0460 	rsb	r4, r4, r0, asr #1
 8005afc:	e10c      	b.n	8005d18 <lv_obj_align_to+0x2fc>
        x = lv_obj_get_content_width(base) / 2 - lv_obj_get_width(obj) / 2;
 8005afe:	4630      	mov	r0, r6
 8005b00:	f7ff f9c1 	bl	8004e86 <lv_obj_get_content_width>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8005b04:	8b2b      	ldrh	r3, [r5, #24]
 8005b06:	f8b5 a014 	ldrh.w	sl, [r5, #20]
 8005b0a:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8005b0e:	3301      	adds	r3, #1
 8005b10:	eba3 030a 	sub.w	r3, r3, sl
 8005b14:	f3c3 3ac0 	ubfx	sl, r3, #15, #1
 8005b18:	fa0a fa83 	sxtah	sl, sl, r3
 8005b1c:	ea4f 0a6a 	mov.w	sl, sl, asr #1
 8005b20:	ebca 0a60 	rsb	sl, sl, r0, asr #1
 8005b24:	fa0f fa8a 	sxth.w	sl, sl
        y = 0;
 8005b28:	2400      	movs	r4, #0
    x += x_ofs + base->coords.x1 - parent->coords.x1 + lv_obj_get_scroll_left(parent);
 8005b2a:	f9b6 0014 	ldrsh.w	r0, [r6, #20]
 8005b2e:	4480      	add	r8, r0
 8005b30:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 8005b34:	eba8 0800 	sub.w	r8, r8, r0
 8005b38:	4638      	mov	r0, r7
 8005b3a:	f000 fa41 	bl	8005fc0 <lv_obj_get_scroll_left>
 8005b3e:	4440      	add	r0, r8
 8005b40:	4482      	add	sl, r0
    y += y_ofs + base->coords.y1 - parent->coords.y1 + lv_obj_get_scroll_top(parent);
 8005b42:	f9b6 0016 	ldrsh.w	r0, [r6, #22]
 8005b46:	4481      	add	r9, r0
 8005b48:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
    x += x_ofs + base->coords.x1 - parent->coords.x1 + lv_obj_get_scroll_left(parent);
 8005b4c:	fa1f fa8a 	uxth.w	sl, sl
    y += y_ofs + base->coords.y1 - parent->coords.y1 + lv_obj_get_scroll_top(parent);
 8005b50:	eba9 0900 	sub.w	r9, r9, r0
 8005b54:	4638      	mov	r0, r7
 8005b56:	f000 f9dd 	bl	8005f14 <lv_obj_get_scroll_top>
    lv_obj_set_local_style_prop(obj, LV_STYLE_ALIGN, v, selector);
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	4448      	add	r0, r9
 8005b5e:	2201      	movs	r2, #1
 8005b60:	f241 0109 	movw	r1, #4105	; 0x1009
 8005b64:	4404      	add	r4, r0
 8005b66:	4628      	mov	r0, r5
 8005b68:	f001 fce2 	bl	8007530 <lv_obj_set_local_style_prop>
    lv_obj_set_pos(obj, x, y);
 8005b6c:	4628      	mov	r0, r5
    y += y_ofs + base->coords.y1 - parent->coords.y1 + lv_obj_get_scroll_top(parent);
 8005b6e:	b2a4      	uxth	r4, r4
    lv_obj_set_pos(obj, x, y);
 8005b70:	fa0f f18a 	sxth.w	r1, sl
 8005b74:	b222      	sxth	r2, r4
}
 8005b76:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_obj_set_pos(obj, x, y);
 8005b7a:	f7ff b8d7 	b.w	8004d2c <lv_obj_set_pos>
        x = lv_obj_get_content_width(base) - lv_obj_get_width(obj);
 8005b7e:	4630      	mov	r0, r6
 8005b80:	f7ff f981 	bl	8004e86 <lv_obj_get_content_width>
 8005b84:	8b2b      	ldrh	r3, [r5, #24]
 8005b86:	f8b5 a014 	ldrh.w	sl, [r5, #20]
 8005b8a:	43db      	mvns	r3, r3
 8005b8c:	4453      	add	r3, sl
 8005b8e:	4418      	add	r0, r3
 8005b90:	fa0f fa80 	sxth.w	sl, r0
 8005b94:	e7c8      	b.n	8005b28 <lv_obj_align_to+0x10c>
        y = lv_obj_get_content_height(base) - lv_obj_get_height(obj);
 8005b96:	4630      	mov	r0, r6
 8005b98:	f7ff f98f 	bl	8004eba <lv_obj_get_content_height>
 8005b9c:	8b6b      	ldrh	r3, [r5, #26]
 8005b9e:	8aec      	ldrh	r4, [r5, #22]
 8005ba0:	43db      	mvns	r3, r3
 8005ba2:	4423      	add	r3, r4
 8005ba4:	4418      	add	r0, r3
 8005ba6:	b204      	sxth	r4, r0
        x = 0;
 8005ba8:	f04f 0a00 	mov.w	sl, #0
        break;
 8005bac:	e7bd      	b.n	8005b2a <lv_obj_align_to+0x10e>
        x = lv_obj_get_content_width(base) / 2 - lv_obj_get_width(obj) / 2;
 8005bae:	4630      	mov	r0, r6
 8005bb0:	f7ff f969 	bl	8004e86 <lv_obj_get_content_width>
 8005bb4:	8b2b      	ldrh	r3, [r5, #24]
 8005bb6:	f8b5 a014 	ldrh.w	sl, [r5, #20]
 8005bba:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8005bbe:	3301      	adds	r3, #1
 8005bc0:	eba3 030a 	sub.w	r3, r3, sl
 8005bc4:	f3c3 3ac0 	ubfx	sl, r3, #15, #1
 8005bc8:	fa0a fa83 	sxtah	sl, sl, r3
 8005bcc:	ea4f 0a6a 	mov.w	sl, sl, asr #1
 8005bd0:	ebca 0a60 	rsb	sl, sl, r0, asr #1
 8005bd4:	fa0f fa8a 	sxth.w	sl, sl
        y = lv_obj_get_content_height(base) - lv_obj_get_height(obj);
 8005bd8:	4630      	mov	r0, r6
 8005bda:	f7ff f96e 	bl	8004eba <lv_obj_get_content_height>
 8005bde:	8b6b      	ldrh	r3, [r5, #26]
 8005be0:	8aec      	ldrh	r4, [r5, #22]
 8005be2:	43db      	mvns	r3, r3
 8005be4:	4423      	add	r3, r4
 8005be6:	4418      	add	r0, r3
 8005be8:	b204      	sxth	r4, r0
        break;
 8005bea:	e79e      	b.n	8005b2a <lv_obj_align_to+0x10e>
        x = lv_obj_get_content_width(base) - lv_obj_get_width(obj);
 8005bec:	4630      	mov	r0, r6
 8005bee:	f7ff f94a 	bl	8004e86 <lv_obj_get_content_width>
 8005bf2:	8b2b      	ldrh	r3, [r5, #24]
 8005bf4:	f8b5 a014 	ldrh.w	sl, [r5, #20]
 8005bf8:	43db      	mvns	r3, r3
 8005bfa:	4453      	add	r3, sl
 8005bfc:	4418      	add	r0, r3
 8005bfe:	fa0f fa80 	sxth.w	sl, r0
 8005c02:	e7e9      	b.n	8005bd8 <lv_obj_align_to+0x1bc>
        y = lv_obj_get_content_height(base) / 2 - lv_obj_get_height(obj) / 2;
 8005c04:	4630      	mov	r0, r6
 8005c06:	f7ff f958 	bl	8004eba <lv_obj_get_content_height>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8005c0a:	8b6b      	ldrh	r3, [r5, #26]
 8005c0c:	8aec      	ldrh	r4, [r5, #22]
 8005c0e:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8005c12:	3301      	adds	r3, #1
 8005c14:	1b1b      	subs	r3, r3, r4
 8005c16:	f3c3 34c0 	ubfx	r4, r3, #15, #1
 8005c1a:	fa04 f483 	sxtah	r4, r4, r3
 8005c1e:	1064      	asrs	r4, r4, #1
 8005c20:	ebc4 0460 	rsb	r4, r4, r0, asr #1
 8005c24:	b224      	sxth	r4, r4
 8005c26:	e7bf      	b.n	8005ba8 <lv_obj_align_to+0x18c>
        x = lv_obj_get_content_width(base) - lv_obj_get_width(obj);
 8005c28:	4630      	mov	r0, r6
 8005c2a:	f7ff f92c 	bl	8004e86 <lv_obj_get_content_width>
 8005c2e:	8b2b      	ldrh	r3, [r5, #24]
 8005c30:	f8b5 a014 	ldrh.w	sl, [r5, #20]
 8005c34:	43db      	mvns	r3, r3
 8005c36:	4453      	add	r3, sl
 8005c38:	4418      	add	r0, r3
 8005c3a:	fa0f fa80 	sxth.w	sl, r0
 8005c3e:	e74d      	b.n	8005adc <lv_obj_align_to+0xc0>
        x = -pleft;
 8005c40:	f1cc 0a00 	rsb	sl, ip, #0
        y = -lv_obj_get_height(obj) - ptop;
 8005c44:	8aec      	ldrh	r4, [r5, #22]
        x = lv_obj_get_width(base) - lv_obj_get_width(obj) - pleft;
 8005c46:	fa0f fa8a 	sxth.w	sl, sl
        y = -lv_obj_get_height(obj) - ptop;
 8005c4a:	8b6b      	ldrh	r3, [r5, #26]
 8005c4c:	3c01      	subs	r4, #1
        y = lv_obj_get_height(base) - lv_obj_get_height(obj) - ptop;
 8005c4e:	1ae4      	subs	r4, r4, r3
 8005c50:	1a64      	subs	r4, r4, r1
 8005c52:	e061      	b.n	8005d18 <lv_obj_align_to+0x2fc>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8005c54:	f8b6 a018 	ldrh.w	sl, [r6, #24]
 8005c58:	8ab3      	ldrh	r3, [r6, #20]
 8005c5a:	f10a 0a01 	add.w	sl, sl, #1
 8005c5e:	ebaa 0a03 	sub.w	sl, sl, r3
 8005c62:	8b2b      	ldrh	r3, [r5, #24]
        x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2 - pleft;
 8005c64:	f3ca 30c0 	ubfx	r0, sl, #15, #1
 8005c68:	3301      	adds	r3, #1
 8005c6a:	fa00 f08a 	sxtah	r0, r0, sl
 8005c6e:	f8b5 a014 	ldrh.w	sl, [r5, #20]
 8005c72:	eba3 030a 	sub.w	r3, r3, sl
 8005c76:	f3c3 3ac0 	ubfx	sl, r3, #15, #1
 8005c7a:	fa0a fa83 	sxtah	sl, sl, r3
 8005c7e:	eb0c 0a6a 	add.w	sl, ip, sl, asr #1
 8005c82:	ebca 0a60 	rsb	sl, sl, r0, asr #1
 8005c86:	e7dd      	b.n	8005c44 <lv_obj_align_to+0x228>
        x = lv_obj_get_width(base) - lv_obj_get_width(obj) - pleft;
 8005c88:	8b2b      	ldrh	r3, [r5, #24]
 8005c8a:	f8b5 a014 	ldrh.w	sl, [r5, #20]
 8005c8e:	ebaa 0a03 	sub.w	sl, sl, r3
 8005c92:	8b33      	ldrh	r3, [r6, #24]
 8005c94:	449a      	add	sl, r3
 8005c96:	8ab3      	ldrh	r3, [r6, #20]
 8005c98:	ebaa 0a03 	sub.w	sl, sl, r3
 8005c9c:	ebaa 0a0c 	sub.w	sl, sl, ip
 8005ca0:	e7d0      	b.n	8005c44 <lv_obj_align_to+0x228>
        x = - pleft;
 8005ca2:	f1cc 0a00 	rsb	sl, ip, #0
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8005ca6:	8b74      	ldrh	r4, [r6, #26]
        x = lv_obj_get_width(base) - lv_obj_get_width(obj) - pleft;
 8005ca8:	fa0f fa8a 	sxth.w	sl, sl
 8005cac:	3401      	adds	r4, #1
        y = lv_obj_get_height(base) - lv_obj_get_height(obj) - ptop;
 8005cae:	8af3      	ldrh	r3, [r6, #22]
 8005cb0:	e7cd      	b.n	8005c4e <lv_obj_align_to+0x232>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8005cb2:	f8b6 a018 	ldrh.w	sl, [r6, #24]
 8005cb6:	8ab3      	ldrh	r3, [r6, #20]
 8005cb8:	f10a 0a01 	add.w	sl, sl, #1
 8005cbc:	ebaa 0a03 	sub.w	sl, sl, r3
 8005cc0:	8b2b      	ldrh	r3, [r5, #24]
        x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2 - pleft;
 8005cc2:	f3ca 30c0 	ubfx	r0, sl, #15, #1
 8005cc6:	3301      	adds	r3, #1
 8005cc8:	fa00 f08a 	sxtah	r0, r0, sl
 8005ccc:	f8b5 a014 	ldrh.w	sl, [r5, #20]
 8005cd0:	eba3 030a 	sub.w	r3, r3, sl
 8005cd4:	f3c3 3ac0 	ubfx	sl, r3, #15, #1
 8005cd8:	fa0a fa83 	sxtah	sl, sl, r3
 8005cdc:	eb0c 0a6a 	add.w	sl, ip, sl, asr #1
 8005ce0:	ebca 0a60 	rsb	sl, sl, r0, asr #1
 8005ce4:	e7df      	b.n	8005ca6 <lv_obj_align_to+0x28a>
        x = lv_obj_get_width(base) - lv_obj_get_width(obj) - pleft;
 8005ce6:	8b2b      	ldrh	r3, [r5, #24]
 8005ce8:	f8b5 a014 	ldrh.w	sl, [r5, #20]
 8005cec:	ebaa 0a03 	sub.w	sl, sl, r3
 8005cf0:	8b33      	ldrh	r3, [r6, #24]
 8005cf2:	449a      	add	sl, r3
 8005cf4:	8ab3      	ldrh	r3, [r6, #20]
 8005cf6:	ebaa 0a03 	sub.w	sl, sl, r3
 8005cfa:	ebaa 0a0c 	sub.w	sl, sl, ip
 8005cfe:	e7d2      	b.n	8005ca6 <lv_obj_align_to+0x28a>
        x = -lv_obj_get_width(obj) - pleft;
 8005d00:	f8b5 a014 	ldrh.w	sl, [r5, #20]
 8005d04:	8b2b      	ldrh	r3, [r5, #24]
 8005d06:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005d0a:	ebaa 0a03 	sub.w	sl, sl, r3
        y = - ptop;
 8005d0e:	424c      	negs	r4, r1
        x = lv_obj_get_width(base) - pleft;
 8005d10:	ebaa 0a0c 	sub.w	sl, sl, ip
 8005d14:	fa0f fa8a 	sxth.w	sl, sl
        y = lv_obj_get_height(base) - lv_obj_get_height(obj) - ptop;
 8005d18:	b224      	sxth	r4, r4
        break;
 8005d1a:	e706      	b.n	8005b2a <lv_obj_align_to+0x10e>
        x = -lv_obj_get_width(obj) - pleft;
 8005d1c:	f8b5 a014 	ldrh.w	sl, [r5, #20]
 8005d20:	8b2b      	ldrh	r3, [r5, #24]
 8005d22:	f10a 3aff 	add.w	sl, sl, #4294967295
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8005d26:	8b74      	ldrh	r4, [r6, #26]
 8005d28:	ebaa 0a03 	sub.w	sl, sl, r3
 8005d2c:	3401      	adds	r4, #1
 8005d2e:	8af3      	ldrh	r3, [r6, #22]
 8005d30:	ebaa 0a0c 	sub.w	sl, sl, ip
 8005d34:	1ae4      	subs	r4, r4, r3
 8005d36:	8b6b      	ldrh	r3, [r5, #26]
 8005d38:	fa0f fa8a 	sxth.w	sl, sl
        y = lv_obj_get_height(base) / 2 - lv_obj_get_height(obj) / 2 - ptop;
 8005d3c:	f3c4 30c0 	ubfx	r0, r4, #15, #1
 8005d40:	3301      	adds	r3, #1
 8005d42:	fa00 f084 	sxtah	r0, r0, r4
 8005d46:	8aec      	ldrh	r4, [r5, #22]
 8005d48:	1b1b      	subs	r3, r3, r4
 8005d4a:	f3c3 34c0 	ubfx	r4, r3, #15, #1
 8005d4e:	fa04 f383 	sxtah	r3, r4, r3
 8005d52:	eb01 0463 	add.w	r4, r1, r3, asr #1
 8005d56:	e6cf      	b.n	8005af8 <lv_obj_align_to+0xdc>
        x = -lv_obj_get_width(obj) - pleft;
 8005d58:	f8b5 a014 	ldrh.w	sl, [r5, #20]
 8005d5c:	8b2b      	ldrh	r3, [r5, #24]
 8005d5e:	f10a 3aff 	add.w	sl, sl, #4294967295
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8005d62:	ebaa 0a03 	sub.w	sl, sl, r3
        y = lv_obj_get_height(base) - lv_obj_get_height(obj) - ptop;
 8005d66:	8aec      	ldrh	r4, [r5, #22]
 8005d68:	8b6b      	ldrh	r3, [r5, #26]
        x = lv_obj_get_width(base) - pleft;
 8005d6a:	ebaa 0a0c 	sub.w	sl, sl, ip
        y = lv_obj_get_height(base) - lv_obj_get_height(obj) - ptop;
 8005d6e:	1ae4      	subs	r4, r4, r3
 8005d70:	8b73      	ldrh	r3, [r6, #26]
        x = lv_obj_get_width(base) - pleft;
 8005d72:	fa0f fa8a 	sxth.w	sl, sl
        y = lv_obj_get_height(base) - lv_obj_get_height(obj) - ptop;
 8005d76:	441c      	add	r4, r3
 8005d78:	e799      	b.n	8005cae <lv_obj_align_to+0x292>
 8005d7a:	f8b6 a018 	ldrh.w	sl, [r6, #24]
 8005d7e:	8ab3      	ldrh	r3, [r6, #20]
 8005d80:	f10a 0a01 	add.w	sl, sl, #1
 8005d84:	e7c1      	b.n	8005d0a <lv_obj_align_to+0x2ee>
 8005d86:	f8b6 a018 	ldrh.w	sl, [r6, #24]
 8005d8a:	8ab3      	ldrh	r3, [r6, #20]
 8005d8c:	f10a 0a01 	add.w	sl, sl, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8005d90:	8b74      	ldrh	r4, [r6, #26]
 8005d92:	8b6a      	ldrh	r2, [r5, #26]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8005d94:	ebaa 0a03 	sub.w	sl, sl, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8005d98:	3401      	adds	r4, #1
 8005d9a:	8af3      	ldrh	r3, [r6, #22]
 8005d9c:	3201      	adds	r2, #1
        x = lv_obj_get_width(base) - pleft;
 8005d9e:	ebaa 0a0c 	sub.w	sl, sl, ip
 8005da2:	1ae4      	subs	r4, r4, r3
 8005da4:	fa0f fa8a 	sxth.w	sl, sl
        y = lv_obj_get_height(base) / 2 - lv_obj_get_height(obj) / 2 - ptop;
 8005da8:	f3c4 30c0 	ubfx	r0, r4, #15, #1
 8005dac:	fa00 f084 	sxtah	r0, r0, r4
 8005db0:	8aec      	ldrh	r4, [r5, #22]
 8005db2:	1b12      	subs	r2, r2, r4
 8005db4:	f3c2 34c0 	ubfx	r4, r2, #15, #1
 8005db8:	fa04 f282 	sxtah	r2, r4, r2
 8005dbc:	eb01 0462 	add.w	r4, r1, r2, asr #1
 8005dc0:	e69a      	b.n	8005af8 <lv_obj_align_to+0xdc>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8005dc2:	f8b6 a018 	ldrh.w	sl, [r6, #24]
 8005dc6:	8ab3      	ldrh	r3, [r6, #20]
 8005dc8:	f10a 0a01 	add.w	sl, sl, #1
 8005dcc:	e7c9      	b.n	8005d62 <lv_obj_align_to+0x346>
    lv_coord_t ptop = lv_obj_get_style_pad_top(parent, LV_PART_MAIN) + border_width;
 8005dce:	2400      	movs	r4, #0
 8005dd0:	e64c      	b.n	8005a6c <lv_obj_align_to+0x50>

08005dd2 <scroll_by_raw>:
 *   STATIC FUNCTIONS
 **********************/

static void scroll_by_raw(lv_obj_t * obj, lv_coord_t x, lv_coord_t y)
{
    if(x == 0 && y == 0) return;
 8005dd2:	ea51 0302 	orrs.w	r3, r1, r2
{
 8005dd6:	b570      	push	{r4, r5, r6, lr}
 8005dd8:	4604      	mov	r4, r0
 8005dda:	460d      	mov	r5, r1
 8005ddc:	4616      	mov	r6, r2
    if(x == 0 && y == 0) return;
 8005dde:	d01a      	beq.n	8005e16 <scroll_by_raw+0x44>

    lv_obj_allocate_spec_attr(obj);
 8005de0:	f7fe fabc 	bl	800435c <lv_obj_allocate_spec_attr>

    obj->spec_attr->scroll.x += x;
 8005de4:	68a3      	ldr	r3, [r4, #8]
    obj->spec_attr->scroll.y += y;

    lv_obj_move_children_by(obj, x, y, true);
 8005de6:	4629      	mov	r1, r5
 8005de8:	4620      	mov	r0, r4
    obj->spec_attr->scroll.x += x;
 8005dea:	8a1a      	ldrh	r2, [r3, #16]
 8005dec:	442a      	add	r2, r5
 8005dee:	821a      	strh	r2, [r3, #16]
    obj->spec_attr->scroll.y += y;
 8005df0:	8a5a      	ldrh	r2, [r3, #18]
 8005df2:	4432      	add	r2, r6
 8005df4:	825a      	strh	r2, [r3, #18]
    lv_obj_move_children_by(obj, x, y, true);
 8005df6:	2301      	movs	r3, #1
 8005df8:	4632      	mov	r2, r6
 8005dfa:	f7ff f8e4 	bl	8004fc6 <lv_obj_move_children_by>
    lv_res_t res = lv_event_send(obj, LV_EVENT_SCROLL, NULL);
 8005dfe:	2200      	movs	r2, #0
 8005e00:	210b      	movs	r1, #11
 8005e02:	4620      	mov	r0, r4
 8005e04:	f7fc f860 	bl	8001ec8 <lv_event_send>
    if(res != LV_RES_OK) return;
 8005e08:	2801      	cmp	r0, #1
 8005e0a:	d104      	bne.n	8005e16 <scroll_by_raw+0x44>
    lv_obj_invalidate(obj);
 8005e0c:	4620      	mov	r0, r4
}
 8005e0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_obj_invalidate(obj);
 8005e12:	f7ff b981 	b.w	8005118 <lv_obj_invalidate>
}
 8005e16:	bd70      	pop	{r4, r5, r6, pc}

08005e18 <scroll_anim_ready_cb>:
    scroll_by_raw(obj, 0, v + lv_obj_get_scroll_y(obj));
}

static void scroll_anim_ready_cb(lv_anim_t * a)
{
    lv_event_send(a->var, LV_EVENT_SCROLL_END, NULL);
 8005e18:	2200      	movs	r2, #0
 8005e1a:	210a      	movs	r1, #10
 8005e1c:	6800      	ldr	r0, [r0, #0]
 8005e1e:	f7fc b853 	b.w	8001ec8 <lv_event_send>

08005e22 <lv_obj_set_scrollbar_mode>:
{
 8005e22:	b538      	push	{r3, r4, r5, lr}
 8005e24:	4604      	mov	r4, r0
 8005e26:	460d      	mov	r5, r1
    lv_obj_allocate_spec_attr(obj);
 8005e28:	f7fe fa98 	bl	800435c <lv_obj_allocate_spec_attr>
    if(obj->spec_attr->scrollbar_mode == mode) return;
 8005e2c:	68a2      	ldr	r2, [r4, #8]
 8005e2e:	7e13      	ldrb	r3, [r2, #24]
 8005e30:	f003 0103 	and.w	r1, r3, #3
 8005e34:	42a9      	cmp	r1, r5
 8005e36:	d007      	beq.n	8005e48 <lv_obj_set_scrollbar_mode+0x26>
    obj->spec_attr->scrollbar_mode = mode;
 8005e38:	f365 0301 	bfi	r3, r5, #0, #2
    lv_obj_invalidate(obj);
 8005e3c:	4620      	mov	r0, r4
    obj->spec_attr->scrollbar_mode = mode;
 8005e3e:	7613      	strb	r3, [r2, #24]
}
 8005e40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_invalidate(obj);
 8005e44:	f7ff b968 	b.w	8005118 <lv_obj_invalidate>
}
 8005e48:	bd38      	pop	{r3, r4, r5, pc}

08005e4a <lv_obj_set_scroll_dir>:
{
 8005e4a:	b538      	push	{r3, r4, r5, lr}
 8005e4c:	4605      	mov	r5, r0
 8005e4e:	460c      	mov	r4, r1
    lv_obj_allocate_spec_attr(obj);
 8005e50:	f7fe fa84 	bl	800435c <lv_obj_allocate_spec_attr>
    if(dir != obj->spec_attr->scroll_dir) {
 8005e54:	68aa      	ldr	r2, [r5, #8]
 8005e56:	7e53      	ldrb	r3, [r2, #25]
 8005e58:	f003 010f 	and.w	r1, r3, #15
 8005e5c:	42a1      	cmp	r1, r4
        obj->spec_attr->scroll_dir = dir;
 8005e5e:	bf1c      	itt	ne
 8005e60:	f364 0303 	bfine	r3, r4, #0, #4
 8005e64:	7653      	strbne	r3, [r2, #25]
}
 8005e66:	bd38      	pop	{r3, r4, r5, pc}

08005e68 <lv_obj_set_scroll_snap_x>:
{
 8005e68:	b538      	push	{r3, r4, r5, lr}
 8005e6a:	4605      	mov	r5, r0
 8005e6c:	460c      	mov	r4, r1
    lv_obj_allocate_spec_attr(obj);
 8005e6e:	f7fe fa75 	bl	800435c <lv_obj_allocate_spec_attr>
    obj->spec_attr->scroll_snap_x = align;
 8005e72:	68ab      	ldr	r3, [r5, #8]
 8005e74:	7e1a      	ldrb	r2, [r3, #24]
 8005e76:	f364 0283 	bfi	r2, r4, #2, #2
 8005e7a:	761a      	strb	r2, [r3, #24]
}
 8005e7c:	bd38      	pop	{r3, r4, r5, pc}

08005e7e <lv_obj_set_scroll_snap_y>:
{
 8005e7e:	b538      	push	{r3, r4, r5, lr}
 8005e80:	4605      	mov	r5, r0
 8005e82:	460c      	mov	r4, r1
    lv_obj_allocate_spec_attr(obj);
 8005e84:	f7fe fa6a 	bl	800435c <lv_obj_allocate_spec_attr>
    obj->spec_attr->scroll_snap_y = align;
 8005e88:	68ab      	ldr	r3, [r5, #8]
 8005e8a:	7e1a      	ldrb	r2, [r3, #24]
 8005e8c:	f364 1205 	bfi	r2, r4, #4, #2
 8005e90:	761a      	strb	r2, [r3, #24]
}
 8005e92:	bd38      	pop	{r3, r4, r5, pc}

08005e94 <lv_obj_get_scrollbar_mode>:
    if(obj->spec_attr) return obj->spec_attr->scrollbar_mode;
 8005e94:	6883      	ldr	r3, [r0, #8]
 8005e96:	b11b      	cbz	r3, 8005ea0 <lv_obj_get_scrollbar_mode+0xc>
 8005e98:	7e18      	ldrb	r0, [r3, #24]
 8005e9a:	f000 0003 	and.w	r0, r0, #3
 8005e9e:	4770      	bx	lr
    else return LV_SCROLLBAR_MODE_AUTO;
 8005ea0:	2003      	movs	r0, #3
}
 8005ea2:	4770      	bx	lr

08005ea4 <lv_obj_get_scroll_dir>:
    if(obj->spec_attr) return obj->spec_attr->scroll_dir;
 8005ea4:	6883      	ldr	r3, [r0, #8]
 8005ea6:	b11b      	cbz	r3, 8005eb0 <lv_obj_get_scroll_dir+0xc>
 8005ea8:	7e58      	ldrb	r0, [r3, #25]
 8005eaa:	f000 000f 	and.w	r0, r0, #15
 8005eae:	4770      	bx	lr
    else return LV_DIR_ALL;
 8005eb0:	200f      	movs	r0, #15
}
 8005eb2:	4770      	bx	lr

08005eb4 <lv_obj_get_scroll_snap_x>:
    if(obj->spec_attr) return obj->spec_attr->scroll_snap_x;
 8005eb4:	6880      	ldr	r0, [r0, #8]
 8005eb6:	b110      	cbz	r0, 8005ebe <lv_obj_get_scroll_snap_x+0xa>
 8005eb8:	7e00      	ldrb	r0, [r0, #24]
 8005eba:	f3c0 0081 	ubfx	r0, r0, #2, #2
}
 8005ebe:	4770      	bx	lr

08005ec0 <lv_obj_get_scroll_snap_y>:
    if(obj->spec_attr) return obj->spec_attr->scroll_snap_y;
 8005ec0:	6880      	ldr	r0, [r0, #8]
 8005ec2:	b110      	cbz	r0, 8005eca <lv_obj_get_scroll_snap_y+0xa>
 8005ec4:	7e00      	ldrb	r0, [r0, #24]
 8005ec6:	f3c0 1001 	ubfx	r0, r0, #4, #2
}
 8005eca:	4770      	bx	lr

08005ecc <lv_obj_get_scroll_x>:
    if(obj->spec_attr == NULL) return 0;
 8005ecc:	6880      	ldr	r0, [r0, #8]
 8005ece:	b110      	cbz	r0, 8005ed6 <lv_obj_get_scroll_x+0xa>
    return -obj->spec_attr->scroll.x;
 8005ed0:	8a00      	ldrh	r0, [r0, #16]
 8005ed2:	4240      	negs	r0, r0
 8005ed4:	b200      	sxth	r0, r0
}
 8005ed6:	4770      	bx	lr

08005ed8 <scroll_x_anim>:
{
 8005ed8:	b508      	push	{r3, lr}
 8005eda:	4603      	mov	r3, r0
    scroll_by_raw(obj, v + lv_obj_get_scroll_x(obj), 0);
 8005edc:	f7ff fff6 	bl	8005ecc <lv_obj_get_scroll_x>
 8005ee0:	4401      	add	r1, r0
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	b209      	sxth	r1, r1
}
 8005ee8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    scroll_by_raw(obj, v + lv_obj_get_scroll_x(obj), 0);
 8005eec:	f7ff bf71 	b.w	8005dd2 <scroll_by_raw>

08005ef0 <lv_obj_get_scroll_y>:
    if(obj->spec_attr == NULL) return 0;
 8005ef0:	6880      	ldr	r0, [r0, #8]
 8005ef2:	b110      	cbz	r0, 8005efa <lv_obj_get_scroll_y+0xa>
    return -obj->spec_attr->scroll.y;
 8005ef4:	8a40      	ldrh	r0, [r0, #18]
 8005ef6:	4240      	negs	r0, r0
 8005ef8:	b200      	sxth	r0, r0
}
 8005efa:	4770      	bx	lr

08005efc <scroll_y_anim>:
{
 8005efc:	b508      	push	{r3, lr}
 8005efe:	4603      	mov	r3, r0
    scroll_by_raw(obj, 0, v + lv_obj_get_scroll_y(obj));
 8005f00:	f7ff fff6 	bl	8005ef0 <lv_obj_get_scroll_y>
 8005f04:	4401      	add	r1, r0
 8005f06:	4618      	mov	r0, r3
 8005f08:	b20a      	sxth	r2, r1
 8005f0a:	2100      	movs	r1, #0
}
 8005f0c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    scroll_by_raw(obj, 0, v + lv_obj_get_scroll_y(obj));
 8005f10:	f7ff bf5f 	b.w	8005dd2 <scroll_by_raw>

08005f14 <lv_obj_get_scroll_top>:
 8005f14:	f7ff bfec 	b.w	8005ef0 <lv_obj_get_scroll_y>

08005f18 <lv_obj_get_scroll_bottom>:
{
 8005f18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f1c:	4606      	mov	r6, r0
    for(i = 0; i < lv_obj_get_child_cnt(obj); i++) {
 8005f1e:	2400      	movs	r4, #0
    lv_coord_t child_res = LV_COORD_MIN;
 8005f20:	4d26      	ldr	r5, [pc, #152]	; (8005fbc <lv_obj_get_scroll_bottom+0xa4>)
    for(i = 0; i < lv_obj_get_child_cnt(obj); i++) {
 8005f22:	4630      	mov	r0, r6
 8005f24:	f001 fd7c 	bl	8007a20 <lv_obj_get_child_cnt>
 8005f28:	42a0      	cmp	r0, r4
 8005f2a:	d835      	bhi.n	8005f98 <lv_obj_get_scroll_bottom+0x80>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8005f2c:	f241 0210 	movw	r2, #4112	; 0x1010
 8005f30:	2100      	movs	r1, #0
 8005f32:	4630      	mov	r0, r6
 8005f34:	f001 fa18 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8005f38:	f241 0211 	movw	r2, #4113	; 0x1011
 8005f3c:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8005f3e:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8005f40:	4630      	mov	r0, r6
 8005f42:	f001 fa11 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8005f46:	f241 0232 	movw	r2, #4146	; 0x1032
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8005f4a:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8005f4c:	2100      	movs	r1, #0
 8005f4e:	4630      	mov	r0, r6
 8005f50:	f001 fa0a 	bl	8007368 <lv_obj_get_style_prop>
    if(child_res != LV_COORD_MIN) {
 8005f54:	f515 4fc0 	cmn.w	r5, #24576	; 0x6000
 8005f58:	4681      	mov	r9, r0
 8005f5a:	d005      	beq.n	8005f68 <lv_obj_get_scroll_bottom+0x50>
        child_res -= (obj->coords.y2 - pad_bottom - border_width);
 8005f5c:	eb08 0700 	add.w	r7, r8, r0
 8005f60:	8b73      	ldrh	r3, [r6, #26]
 8005f62:	1aff      	subs	r7, r7, r3
 8005f64:	443d      	add	r5, r7
 8005f66:	b22d      	sxth	r5, r5
    lv_coord_t self_h = lv_obj_get_self_height(obj);
 8005f68:	4630      	mov	r0, r6
 8005f6a:	f7ff f803 	bl	8004f74 <lv_obj_get_self_height>
 8005f6e:	4607      	mov	r7, r0
    self_h = self_h - (lv_obj_get_height(obj) - pad_top - pad_bottom - 2 * border_width);
 8005f70:	4630      	mov	r0, r6
 8005f72:	f7fe ff82 	bl	8004e7a <lv_obj_get_height>
 8005f76:	eb04 0108 	add.w	r1, r4, r8
 8005f7a:	eb01 0249 	add.w	r2, r1, r9, lsl #1
 8005f7e:	19d4      	adds	r4, r2, r7
 8005f80:	1a23      	subs	r3, r4, r0
    self_h -= lv_obj_get_scroll_y(obj);
 8005f82:	4630      	mov	r0, r6
    self_h = self_h - (lv_obj_get_height(obj) - pad_top - pad_bottom - 2 * border_width);
 8005f84:	b29b      	uxth	r3, r3
    self_h -= lv_obj_get_scroll_y(obj);
 8005f86:	f7ff ffb3 	bl	8005ef0 <lv_obj_get_scroll_y>
 8005f8a:	1a18      	subs	r0, r3, r0
    return LV_MAX(child_res, self_h);
 8005f8c:	b200      	sxth	r0, r0
}
 8005f8e:	42a8      	cmp	r0, r5
 8005f90:	bfb8      	it	lt
 8005f92:	4628      	movlt	r0, r5
 8005f94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        lv_obj_t * child = lv_obj_get_child(obj, i);
 8005f98:	4621      	mov	r1, r4
 8005f9a:	4630      	mov	r0, r6
 8005f9c:	f001 fd31 	bl	8007a02 <lv_obj_get_child>
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8005fa0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
        lv_obj_t * child = lv_obj_get_child(obj, i);
 8005fa4:	4607      	mov	r7, r0
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8005fa6:	f7fd ff13 	bl	8003dd0 <lv_obj_has_flag_any>
 8005faa:	b920      	cbnz	r0, 8005fb6 <lv_obj_get_scroll_bottom+0x9e>
        child_res = LV_MAX(child_res, child->coords.y2);
 8005fac:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8005fb0:	429d      	cmp	r5, r3
 8005fb2:	bfb8      	it	lt
 8005fb4:	461d      	movlt	r5, r3
    for(i = 0; i < lv_obj_get_child_cnt(obj); i++) {
 8005fb6:	3401      	adds	r4, #1
 8005fb8:	e7b3      	b.n	8005f22 <lv_obj_get_scroll_bottom+0xa>
 8005fba:	bf00      	nop
 8005fbc:	ffffa000 	.word	0xffffa000

08005fc0 <lv_obj_get_scroll_left>:
{
 8005fc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 8005fc4:	f241 426a 	movw	r2, #5226	; 0x146a
 8005fc8:	2100      	movs	r1, #0
 8005fca:	4605      	mov	r5, r0
 8005fcc:	f001 f9cc 	bl	8007368 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 8005fd0:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) != LV_BASE_DIR_RTL) {
 8005fd2:	2801      	cmp	r0, #1
 8005fd4:	d006      	beq.n	8005fe4 <lv_obj_get_scroll_left+0x24>
        if(obj->spec_attr == NULL) return 0;
 8005fd6:	68a8      	ldr	r0, [r5, #8]
 8005fd8:	b110      	cbz	r0, 8005fe0 <lv_obj_get_scroll_left+0x20>
        return -obj->spec_attr->scroll.x;
 8005fda:	8a00      	ldrh	r0, [r0, #16]
 8005fdc:	4240      	negs	r0, r0
 8005fde:	b200      	sxth	r0, r0
}
 8005fe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8005fe4:	f241 0213 	movw	r2, #4115	; 0x1013
 8005fe8:	2100      	movs	r1, #0
 8005fea:	4628      	mov	r0, r5
    lv_coord_t x1 = LV_COORD_MAX;
 8005fec:	f44f 49c0 	mov.w	r9, #24576	; 0x6000
 8005ff0:	f001 f9ba 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8005ff4:	f241 0212 	movw	r2, #4114	; 0x1012
 8005ff8:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8005ffa:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8005ffc:	4628      	mov	r0, r5
    for(i = 0; i < lv_obj_get_child_cnt(obj); i++) {
 8005ffe:	2600      	movs	r6, #0
 8006000:	f001 f9b2 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8006004:	f241 0232 	movw	r2, #4146	; 0x1032
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8006008:	4682      	mov	sl, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 800600a:	2100      	movs	r1, #0
 800600c:	4628      	mov	r0, r5
 800600e:	f001 f9ab 	bl	8007368 <lv_obj_get_style_prop>
 8006012:	4680      	mov	r8, r0
 8006014:	4628      	mov	r0, r5
 8006016:	f001 fd03 	bl	8007a20 <lv_obj_get_child_cnt>
 800601a:	4286      	cmp	r6, r0
 800601c:	d328      	bcc.n	8006070 <lv_obj_get_scroll_left+0xb0>
    if(x1 != LV_COORD_MAX) {
 800601e:	f5b9 4fc0 	cmp.w	r9, #24576	; 0x6000
        child_res = (obj->coords.x1 + pad_left + border_width) - child_res;
 8006022:	fa1f fa8a 	uxth.w	sl, sl
 8006026:	fa1f f888 	uxth.w	r8, r8
 800602a:	bf1b      	ittet	ne
 800602c:	8aa8      	ldrhne	r0, [r5, #20]
 800602e:	eb0a 0608 	addne.w	r6, sl, r8
        child_res = LV_COORD_MIN;
 8006032:	4e18      	ldreq	r6, [pc, #96]	; (8006094 <lv_obj_get_scroll_left+0xd4>)
        child_res = (obj->coords.x1 + pad_left + border_width) - child_res;
 8006034:	1836      	addne	r6, r6, r0
    lv_coord_t self_w = lv_obj_get_self_width(obj);
 8006036:	4628      	mov	r0, r5
        child_res = (obj->coords.x1 + pad_left + border_width) - child_res;
 8006038:	bf1c      	itt	ne
 800603a:	eba6 0609 	subne.w	r6, r6, r9
 800603e:	b236      	sxthne	r6, r6
    lv_coord_t self_w = lv_obj_get_self_width(obj);
 8006040:	f7fe ff8b 	bl	8004f5a <lv_obj_get_self_width>
 8006044:	4681      	mov	r9, r0
    self_w = self_w - (lv_obj_get_width(obj) - pad_right - pad_left - 2 * border_width);
 8006046:	4628      	mov	r0, r5
 8006048:	f7fe ff11 	bl	8004e6e <lv_obj_get_width>
 800604c:	eb0a 0307 	add.w	r3, sl, r7
 8006050:	4602      	mov	r2, r0
    self_w += lv_obj_get_scroll_x(obj);
 8006052:	4628      	mov	r0, r5
 8006054:	eb03 0348 	add.w	r3, r3, r8, lsl #1
 8006058:	eb03 0409 	add.w	r4, r3, r9
 800605c:	f7ff ff36 	bl	8005ecc <lv_obj_get_scroll_x>
 8006060:	b2a4      	uxth	r4, r4
 8006062:	4404      	add	r4, r0
 8006064:	1aa0      	subs	r0, r4, r2
    return LV_MAX(child_res, self_w);
 8006066:	b200      	sxth	r0, r0
 8006068:	42b0      	cmp	r0, r6
 800606a:	bfb8      	it	lt
 800606c:	4630      	movlt	r0, r6
 800606e:	e7b7      	b.n	8005fe0 <lv_obj_get_scroll_left+0x20>
       lv_obj_t * child = lv_obj_get_child(obj, i);
 8006070:	4631      	mov	r1, r6
 8006072:	4628      	mov	r0, r5
 8006074:	f001 fcc5 	bl	8007a02 <lv_obj_get_child>
       if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8006078:	f04f 1101 	mov.w	r1, #65537	; 0x10001
       lv_obj_t * child = lv_obj_get_child(obj, i);
 800607c:	4604      	mov	r4, r0
       if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 800607e:	f7fd fea7 	bl	8003dd0 <lv_obj_has_flag_any>
 8006082:	b920      	cbnz	r0, 800608e <lv_obj_get_scroll_left+0xce>
        x1 = LV_MIN(x1, child->coords.x1);
 8006084:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 8006088:	4599      	cmp	r9, r3
 800608a:	bfa8      	it	ge
 800608c:	4699      	movge	r9, r3
    for(i = 0; i < lv_obj_get_child_cnt(obj); i++) {
 800608e:	3601      	adds	r6, #1
 8006090:	e7c0      	b.n	8006014 <lv_obj_get_scroll_left+0x54>
 8006092:	bf00      	nop
 8006094:	ffffa000 	.word	0xffffa000

08006098 <lv_obj_get_scroll_right>:
{
 8006098:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 800609c:	f241 426a 	movw	r2, #5226	; 0x146a
 80060a0:	2100      	movs	r1, #0
 80060a2:	4606      	mov	r6, r0
 80060a4:	f001 f960 	bl	8007368 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 80060a8:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 80060aa:	2801      	cmp	r0, #1
 80060ac:	d14f      	bne.n	800614e <lv_obj_get_scroll_right+0xb6>
        if(obj->spec_attr == NULL) return 0;
 80060ae:	68b0      	ldr	r0, [r6, #8]
 80060b0:	b108      	cbz	r0, 80060b6 <lv_obj_get_scroll_right+0x1e>
        return obj->spec_attr->scroll.x;
 80060b2:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
}
 80060b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        lv_obj_t * child = lv_obj_get_child(obj, i);
 80060ba:	4621      	mov	r1, r4
 80060bc:	4630      	mov	r0, r6
 80060be:	f001 fca0 	bl	8007a02 <lv_obj_get_child>
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 80060c2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
        lv_obj_t * child = lv_obj_get_child(obj, i);
 80060c6:	4605      	mov	r5, r0
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 80060c8:	f7fd fe82 	bl	8003dd0 <lv_obj_has_flag_any>
 80060cc:	b920      	cbnz	r0, 80060d8 <lv_obj_get_scroll_right+0x40>
        child_res = LV_MAX(child_res, child->coords.x2);
 80060ce:	f9b5 3018 	ldrsh.w	r3, [r5, #24]
 80060d2:	4598      	cmp	r8, r3
 80060d4:	bfb8      	it	lt
 80060d6:	4698      	movlt	r8, r3
    for(i = 0; i < lv_obj_get_child_cnt(obj); i++) {
 80060d8:	3401      	adds	r4, #1
 80060da:	4630      	mov	r0, r6
 80060dc:	f001 fca0 	bl	8007a20 <lv_obj_get_child_cnt>
 80060e0:	4284      	cmp	r4, r0
 80060e2:	d3ea      	bcc.n	80060ba <lv_obj_get_scroll_right+0x22>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80060e4:	f241 0213 	movw	r2, #4115	; 0x1013
 80060e8:	2100      	movs	r1, #0
 80060ea:	4630      	mov	r0, r6
 80060ec:	f001 f93c 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80060f0:	f241 0212 	movw	r2, #4114	; 0x1012
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80060f4:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80060f6:	2100      	movs	r1, #0
 80060f8:	4630      	mov	r0, r6
 80060fa:	f001 f935 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 80060fe:	f241 0232 	movw	r2, #4146	; 0x1032
 8006102:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8006104:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8006106:	4630      	mov	r0, r6
    child_res -= (obj->coords.x2 - pad_right - border_width);
 8006108:	b2ac      	uxth	r4, r5
 800610a:	f001 f92d 	bl	8007368 <lv_obj_get_style_prop>
 800610e:	fa1f f980 	uxth.w	r9, r0
 8006112:	8b30      	ldrh	r0, [r6, #24]
 8006114:	fa19 f585 	uxtah	r5, r9, r5
 8006118:	1a2d      	subs	r5, r5, r0
    self_w = lv_obj_get_self_width(obj);
 800611a:	4630      	mov	r0, r6
 800611c:	f7fe ff1d 	bl	8004f5a <lv_obj_get_self_width>
    child_res -= (obj->coords.x2 - pad_right - border_width);
 8006120:	4445      	add	r5, r8
    self_w = lv_obj_get_self_width(obj);
 8006122:	4680      	mov	r8, r0
    self_w = self_w - (lv_obj_get_width(obj) - pad_right - pad_left - 2 * border_width);
 8006124:	4630      	mov	r0, r6
 8006126:	f7fe fea2 	bl	8004e6e <lv_obj_get_width>
 800612a:	19e2      	adds	r2, r4, r7
    child_res -= (obj->coords.x2 - pad_right - border_width);
 800612c:	b2ad      	uxth	r5, r5
    self_w = self_w - (lv_obj_get_width(obj) - pad_right - pad_left - 2 * border_width);
 800612e:	eb02 0249 	add.w	r2, r2, r9, lsl #1
    return LV_MAX(child_res, self_w);
 8006132:	b22d      	sxth	r5, r5
    self_w = self_w - (lv_obj_get_width(obj) - pad_right - pad_left - 2 * border_width);
 8006134:	eb02 0408 	add.w	r4, r2, r8
 8006138:	1a23      	subs	r3, r4, r0
    self_w -= lv_obj_get_scroll_x(obj);
 800613a:	4630      	mov	r0, r6
    self_w = self_w - (lv_obj_get_width(obj) - pad_right - pad_left - 2 * border_width);
 800613c:	b29b      	uxth	r3, r3
    self_w -= lv_obj_get_scroll_x(obj);
 800613e:	f7ff fec5 	bl	8005ecc <lv_obj_get_scroll_x>
 8006142:	1a18      	subs	r0, r3, r0
    return LV_MAX(child_res, self_w);
 8006144:	b200      	sxth	r0, r0
 8006146:	42a8      	cmp	r0, r5
 8006148:	bfb8      	it	lt
 800614a:	4628      	movlt	r0, r5
 800614c:	e7b3      	b.n	80060b6 <lv_obj_get_scroll_right+0x1e>
    for(i = 0; i < lv_obj_get_child_cnt(obj); i++) {
 800614e:	2400      	movs	r4, #0
    lv_coord_t child_res = LV_COORD_MIN;
 8006150:	f8df 8004 	ldr.w	r8, [pc, #4]	; 8006158 <lv_obj_get_scroll_right+0xc0>
 8006154:	e7c1      	b.n	80060da <lv_obj_get_scroll_right+0x42>
 8006156:	bf00      	nop
 8006158:	ffffa000 	.word	0xffffa000

0800615c <lv_obj_get_scroll_end>:
{
 800615c:	b538      	push	{r3, r4, r5, lr}
 800615e:	460c      	mov	r4, r1
    a = lv_anim_get(obj, scroll_x_anim);
 8006160:	490d      	ldr	r1, [pc, #52]	; (8006198 <lv_obj_get_scroll_end+0x3c>)
{
 8006162:	4605      	mov	r5, r0
    a = lv_anim_get(obj, scroll_x_anim);
 8006164:	f010 fdf6 	bl	8016d54 <lv_anim_get>
    end->x = a ? -a->end_value : lv_obj_get_scroll_x(obj);
 8006168:	b168      	cbz	r0, 8006186 <lv_obj_get_scroll_end+0x2a>
 800616a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800616c:	425b      	negs	r3, r3
 800616e:	b218      	sxth	r0, r3
 8006170:	8020      	strh	r0, [r4, #0]
    a = lv_anim_get(obj, scroll_y_anim);
 8006172:	4628      	mov	r0, r5
 8006174:	4909      	ldr	r1, [pc, #36]	; (800619c <lv_obj_get_scroll_end+0x40>)
 8006176:	f010 fded 	bl	8016d54 <lv_anim_get>
    end->y = a ? -a->end_value : lv_obj_get_scroll_y(obj);
 800617a:	b140      	cbz	r0, 800618e <lv_obj_get_scroll_end+0x32>
 800617c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800617e:	4240      	negs	r0, r0
 8006180:	b200      	sxth	r0, r0
 8006182:	8060      	strh	r0, [r4, #2]
}
 8006184:	bd38      	pop	{r3, r4, r5, pc}
    end->x = a ? -a->end_value : lv_obj_get_scroll_x(obj);
 8006186:	4628      	mov	r0, r5
 8006188:	f7ff fea0 	bl	8005ecc <lv_obj_get_scroll_x>
 800618c:	e7f0      	b.n	8006170 <lv_obj_get_scroll_end+0x14>
    end->y = a ? -a->end_value : lv_obj_get_scroll_y(obj);
 800618e:	4628      	mov	r0, r5
 8006190:	f7ff feae 	bl	8005ef0 <lv_obj_get_scroll_y>
 8006194:	e7f5      	b.n	8006182 <lv_obj_get_scroll_end+0x26>
 8006196:	bf00      	nop
 8006198:	08005ed9 	.word	0x08005ed9
 800619c:	08005efd 	.word	0x08005efd

080061a0 <lv_obj_scroll_by>:
{
 80061a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061a2:	4616      	mov	r6, r2
 80061a4:	b093      	sub	sp, #76	; 0x4c
 80061a6:	4604      	mov	r4, r0
 80061a8:	460d      	mov	r5, r1
    if(x == 0 && y == 0) return;
 80061aa:	ea51 0206 	orrs.w	r2, r1, r6
 80061ae:	d05c      	beq.n	800626a <lv_obj_scroll_by+0xca>
    if(anim_en == LV_ANIM_ON) {
 80061b0:	2b01      	cmp	r3, #1
 80061b2:	d15c      	bne.n	800626e <lv_obj_scroll_by+0xce>
        lv_disp_t * d = lv_obj_get_disp(obj);
 80061b4:	f001 fc02 	bl	80079bc <lv_obj_get_disp>
 80061b8:	4607      	mov	r7, r0
        lv_anim_init(&a);
 80061ba:	a801      	add	r0, sp, #4
 80061bc:	f010 fd3e 	bl	8016c3c <lv_anim_init>
 * @param a pointer to an initialized `lv_anim_t` variable
 * @param ready_cb a function call when the animation is ready
 */
static inline void lv_anim_set_ready_cb(lv_anim_t * a, lv_anim_ready_cb_t ready_cb)
{
    a->ready_cb = ready_cb;
 80061c0:	4b31      	ldr	r3, [pc, #196]	; (8006288 <lv_obj_scroll_by+0xe8>)
    a->var = var;
 80061c2:	9401      	str	r4, [sp, #4]
    a->ready_cb = ready_cb;
 80061c4:	9304      	str	r3, [sp, #16]
        if(x) {
 80061c6:	b33d      	cbz	r5, 8006218 <lv_obj_scroll_by+0x78>
            res = lv_event_send(obj, LV_EVENT_SCROLL_BEGIN, NULL);
 80061c8:	2200      	movs	r2, #0
 80061ca:	2109      	movs	r1, #9
 80061cc:	4620      	mov	r0, r4
 80061ce:	f7fb fe7b 	bl	8001ec8 <lv_event_send>
            if(res != LV_RES_OK) return;
 80061d2:	2801      	cmp	r0, #1
 80061d4:	d149      	bne.n	800626a <lv_obj_scroll_by+0xca>
            uint32_t t = lv_anim_speed_to_time((lv_disp_get_hor_res(d) * 2) >> 2, 0, x);
 80061d6:	4638      	mov	r0, r7
 80061d8:	f010 fb6c 	bl	80168b4 <lv_disp_get_hor_res>
 80061dc:	462a      	mov	r2, r5
 80061de:	2100      	movs	r1, #0
 80061e0:	f340 005d 	sbfx	r0, r0, #1, #30
 80061e4:	f010 fdcc 	bl	8016d80 <lv_anim_speed_to_time>
            if(t < SCROLL_ANIM_TIME_MIN) t = SCROLL_ANIM_TIME_MIN;
 80061e8:	f5b0 7fc8 	cmp.w	r0, #400	; 0x190
 80061ec:	bf28      	it	cs
 80061ee:	f44f 70c8 	movcs.w	r0, #400	; 0x190
    a->time = duration;
 80061f2:	28c8      	cmp	r0, #200	; 0xc8
 80061f4:	bf38      	it	cc
 80061f6:	20c8      	movcc	r0, #200	; 0xc8
 80061f8:	900b      	str	r0, [sp, #44]	; 0x2c
            lv_coord_t sx = lv_obj_get_scroll_x(obj);
 80061fa:	4620      	mov	r0, r4
 80061fc:	f7ff fe66 	bl	8005ecc <lv_obj_get_scroll_x>
            lv_anim_set_values(&a, -sx, -sx + x);
 8006200:	4243      	negs	r3, r0
 8006202:	1a2d      	subs	r5, r5, r0
            lv_anim_start(&a);
 8006204:	a801      	add	r0, sp, #4
    a->current_value = start;
 8006206:	e9cd 3308 	strd	r3, r3, [sp, #32]
    a->exec_cb = exec_cb;
 800620a:	4b20      	ldr	r3, [pc, #128]	; (800628c <lv_obj_scroll_by+0xec>)
    a->end_value = end;
 800620c:	950a      	str	r5, [sp, #40]	; 0x28
    a->exec_cb = exec_cb;
 800620e:	9302      	str	r3, [sp, #8]
    a->path_cb = path_cb;
 8006210:	4b1f      	ldr	r3, [pc, #124]	; (8006290 <lv_obj_scroll_by+0xf0>)
 8006212:	9307      	str	r3, [sp, #28]
 8006214:	f010 fd58 	bl	8016cc8 <lv_anim_start>
        if(y) {
 8006218:	b33e      	cbz	r6, 800626a <lv_obj_scroll_by+0xca>
            res = lv_event_send(obj, LV_EVENT_SCROLL_BEGIN, NULL);
 800621a:	2200      	movs	r2, #0
 800621c:	2109      	movs	r1, #9
 800621e:	4620      	mov	r0, r4
 8006220:	f7fb fe52 	bl	8001ec8 <lv_event_send>
            if(res != LV_RES_OK) return;
 8006224:	2801      	cmp	r0, #1
 8006226:	d120      	bne.n	800626a <lv_obj_scroll_by+0xca>
            uint32_t t = lv_anim_speed_to_time((lv_disp_get_ver_res(d) * 2) >> 2, 0, y);
 8006228:	4638      	mov	r0, r7
 800622a:	f010 fb53 	bl	80168d4 <lv_disp_get_ver_res>
 800622e:	4632      	mov	r2, r6
 8006230:	2100      	movs	r1, #0
 8006232:	f340 005d 	sbfx	r0, r0, #1, #30
 8006236:	f010 fda3 	bl	8016d80 <lv_anim_speed_to_time>
            if(t < SCROLL_ANIM_TIME_MIN) t = SCROLL_ANIM_TIME_MIN;
 800623a:	f5b0 7fc8 	cmp.w	r0, #400	; 0x190
 800623e:	bf28      	it	cs
 8006240:	f44f 70c8 	movcs.w	r0, #400	; 0x190
    a->time = duration;
 8006244:	28c8      	cmp	r0, #200	; 0xc8
 8006246:	bf38      	it	cc
 8006248:	20c8      	movcc	r0, #200	; 0xc8
 800624a:	900b      	str	r0, [sp, #44]	; 0x2c
            lv_coord_t sy = lv_obj_get_scroll_y(obj);
 800624c:	4620      	mov	r0, r4
 800624e:	f7ff fe4f 	bl	8005ef0 <lv_obj_get_scroll_y>
            lv_anim_set_values(&a, -sy, -sy + y);
 8006252:	4243      	negs	r3, r0
 8006254:	1a30      	subs	r0, r6, r0
    a->current_value = start;
 8006256:	e9cd 3308 	strd	r3, r3, [sp, #32]
    a->exec_cb = exec_cb;
 800625a:	4b0e      	ldr	r3, [pc, #56]	; (8006294 <lv_obj_scroll_by+0xf4>)
    a->end_value = end;
 800625c:	900a      	str	r0, [sp, #40]	; 0x28
            lv_anim_start(&a);
 800625e:	a801      	add	r0, sp, #4
    a->exec_cb = exec_cb;
 8006260:	9302      	str	r3, [sp, #8]
    a->path_cb = path_cb;
 8006262:	4b0b      	ldr	r3, [pc, #44]	; (8006290 <lv_obj_scroll_by+0xf0>)
 8006264:	9307      	str	r3, [sp, #28]
 8006266:	f010 fd2f 	bl	8016cc8 <lv_anim_start>
}
 800626a:	b013      	add	sp, #76	; 0x4c
 800626c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        lv_anim_del(obj, scroll_y_anim);
 800626e:	4909      	ldr	r1, [pc, #36]	; (8006294 <lv_obj_scroll_by+0xf4>)
 8006270:	f010 fcfe 	bl	8016c70 <lv_anim_del>
        lv_anim_del(obj, scroll_x_anim);
 8006274:	4905      	ldr	r1, [pc, #20]	; (800628c <lv_obj_scroll_by+0xec>)
 8006276:	4620      	mov	r0, r4
 8006278:	f010 fcfa 	bl	8016c70 <lv_anim_del>
        scroll_by_raw(obj, x, y);
 800627c:	4632      	mov	r2, r6
 800627e:	4629      	mov	r1, r5
 8006280:	4620      	mov	r0, r4
 8006282:	f7ff fda6 	bl	8005dd2 <scroll_by_raw>
 8006286:	e7f0      	b.n	800626a <lv_obj_scroll_by+0xca>
 8006288:	08005e19 	.word	0x08005e19
 800628c:	08005ed9 	.word	0x08005ed9
 8006290:	08016d9d 	.word	0x08016d9d
 8006294:	08005efd 	.word	0x08005efd

08006298 <scroll_area_into_view>:
}

static void scroll_area_into_view(const lv_area_t * area, lv_obj_t * child, lv_point_t * scroll_value, lv_anim_enable_t anim_en)
{
 8006298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800629c:	b089      	sub	sp, #36	; 0x24
 800629e:	4680      	mov	r8, r0
    lv_obj_t * parent = lv_obj_get_parent(child);
 80062a0:	4608      	mov	r0, r1
{
 80062a2:	4691      	mov	r9, r2
 80062a4:	9101      	str	r1, [sp, #4]
 80062a6:	9303      	str	r3, [sp, #12]
    lv_obj_t * parent = lv_obj_get_parent(child);
 80062a8:	f001 fba8 	bl	80079fc <lv_obj_get_parent>
 80062ac:	4606      	mov	r6, r0
    lv_dir_t scroll_dir = lv_obj_get_scroll_dir(parent);
 80062ae:	f7ff fdf9 	bl	8005ea4 <lv_obj_get_scroll_dir>
 80062b2:	9000      	str	r0, [sp, #0]
    lv_coord_t snap_goal = 0;
    lv_coord_t act = 0;
    const lv_area_t * area_tmp;

    lv_coord_t y_scroll = 0;
    lv_scroll_snap_t snap_y = lv_obj_get_scroll_snap_y(parent);
 80062b4:	4630      	mov	r0, r6
 80062b6:	f7ff fe03 	bl	8005ec0 <lv_obj_get_scroll_snap_y>
    if(snap_y != LV_SCROLL_SNAP_NONE) area_tmp = &child->coords;
 80062ba:	4682      	mov	sl, r0
 80062bc:	2800      	cmp	r0, #0
 80062be:	f000 80ca 	beq.w	8006456 <scroll_area_into_view+0x1be>
 80062c2:	9b01      	ldr	r3, [sp, #4]
 80062c4:	f103 0714 	add.w	r7, r3, #20
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80062c8:	f241 0210 	movw	r2, #4112	; 0x1010
 80062cc:	2100      	movs	r1, #0
 80062ce:	4630      	mov	r0, r6
 80062d0:	f001 f84a 	bl	8007368 <lv_obj_get_style_prop>
 80062d4:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 80062d6:	f241 0211 	movw	r2, #4113	; 0x1011
 80062da:	2100      	movs	r1, #0
 80062dc:	4630      	mov	r0, r6
    else area_tmp = area;

    lv_coord_t ptop = lv_obj_get_style_pad_top(parent, LV_PART_MAIN);
    lv_coord_t pbottom = lv_obj_get_style_pad_bottom(parent, LV_PART_MAIN);
    lv_coord_t top_diff = parent->coords.y1 + ptop - area_tmp->y1 - scroll_value->y;
 80062de:	b2a4      	uxth	r4, r4
 80062e0:	f001 f842 	bl	8007368 <lv_obj_get_style_prop>
 80062e4:	f8b9 2002 	ldrh.w	r2, [r9, #2]
 80062e8:	8af1      	ldrh	r1, [r6, #22]
    lv_coord_t bottom_diff = -(parent->coords.y2 - pbottom - area_tmp->y2 - scroll_value->y);
 80062ea:	fa1f fb80 	uxth.w	fp, r0
    lv_coord_t top_diff = parent->coords.y1 + ptop - area_tmp->y1 - scroll_value->y;
 80062ee:	1aa5      	subs	r5, r4, r2
 80062f0:	fa12 f280 	uxtah	r2, r2, r0
    lv_coord_t bottom_diff = -(parent->coords.y2 - pbottom - area_tmp->y2 - scroll_value->y);
 80062f4:	88fb      	ldrh	r3, [r7, #6]
    lv_coord_t parent_h = lv_obj_get_height(parent) - ptop - pbottom;
 80062f6:	4630      	mov	r0, r6
    lv_coord_t top_diff = parent->coords.y1 + ptop - area_tmp->y1 - scroll_value->y;
 80062f8:	440d      	add	r5, r1
 80062fa:	8879      	ldrh	r1, [r7, #2]
 80062fc:	b292      	uxth	r2, r2
    lv_coord_t bottom_diff = -(parent->coords.y2 - pbottom - area_tmp->y2 - scroll_value->y);
 80062fe:	9306      	str	r3, [sp, #24]
    lv_coord_t top_diff = parent->coords.y1 + ptop - area_tmp->y1 - scroll_value->y;
 8006300:	1a6d      	subs	r5, r5, r1
    lv_coord_t bottom_diff = -(parent->coords.y2 - pbottom - area_tmp->y2 - scroll_value->y);
 8006302:	8b71      	ldrh	r1, [r6, #26]
 8006304:	9207      	str	r2, [sp, #28]
 8006306:	9102      	str	r1, [sp, #8]
 8006308:	1a51      	subs	r1, r2, r1
    lv_coord_t top_diff = parent->coords.y1 + ptop - area_tmp->y1 - scroll_value->y;
 800630a:	b22d      	sxth	r5, r5
    lv_coord_t bottom_diff = -(parent->coords.y2 - pbottom - area_tmp->y2 - scroll_value->y);
 800630c:	4419      	add	r1, r3
 800630e:	b209      	sxth	r1, r1
 8006310:	9105      	str	r1, [sp, #20]
    lv_coord_t parent_h = lv_obj_get_height(parent) - ptop - pbottom;
 8006312:	f7fe fdb2 	bl	8004e7a <lv_obj_get_height>
    if((top_diff > 0 && bottom_diff > 0)) y_scroll = 0;
 8006316:	2d00      	cmp	r5, #0
 8006318:	9a07      	ldr	r2, [sp, #28]
    lv_coord_t parent_h = lv_obj_get_height(parent) - ptop - pbottom;
 800631a:	9004      	str	r0, [sp, #16]
    if((top_diff > 0 && bottom_diff > 0)) y_scroll = 0;
 800631c:	e9dd 1305 	ldrd	r1, r3, [sp, #20]
 8006320:	f340 809b 	ble.w	800645a <scroll_area_into_view+0x1c2>
 8006324:	2900      	cmp	r1, #0
 8006326:	dc05      	bgt.n	8006334 <scroll_area_into_view+0x9c>
    else if(top_diff > 0) {
        y_scroll = top_diff;
        /*Do not let scrolling in*/
        lv_coord_t st = lv_obj_get_scroll_top(parent);
 8006328:	4630      	mov	r0, r6
 800632a:	f7ff fde1 	bl	8005ef0 <lv_obj_get_scroll_y>
        if(st - y_scroll < 0) y_scroll = 0;
 800632e:	1b40      	subs	r0, r0, r5
 8006330:	2800      	cmp	r0, #0
 8006332:	da00      	bge.n	8006336 <scroll_area_into_view+0x9e>
 8006334:	2500      	movs	r5, #0
        /*Do not let scrolling in*/
        lv_coord_t sb = lv_obj_get_scroll_bottom(parent);
        if(sb + y_scroll < 0) y_scroll = 0;
    }

    switch(snap_y) {
 8006336:	f1ba 0f02 	cmp.w	sl, #2
 800633a:	f000 809c 	beq.w	8006476 <scroll_area_into_view+0x1de>
 800633e:	f1ba 0f03 	cmp.w	sl, #3
 8006342:	f000 809e 	beq.w	8006482 <scroll_area_into_view+0x1ea>
 8006346:	f1ba 0f01 	cmp.w	sl, #1
 800634a:	d104      	bne.n	8006356 <scroll_area_into_view+0xbe>
    case LV_SCROLL_SNAP_START:
        snap_goal = parent->coords.y1 + ptop;
        act = area_tmp->y1 + y_scroll;
        y_scroll += snap_goal - act;
 800634c:	8af5      	ldrh	r5, [r6, #22]
 800634e:	4425      	add	r5, r4
 8006350:	887c      	ldrh	r4, [r7, #2]
 8006352:	1b2d      	subs	r5, r5, r4
        y_scroll += snap_goal - act;
        break;
    case LV_SCROLL_SNAP_CENTER:
        snap_goal = parent->coords.y1 + ptop + parent_h / 2;
        act = lv_area_get_height(area_tmp) / 2 + area_tmp->y1 + y_scroll;
        y_scroll += snap_goal - act;
 8006354:	b22d      	sxth	r5, r5
        break;
    }

    lv_coord_t x_scroll = 0;
    lv_scroll_snap_t snap_x = lv_obj_get_scroll_snap_x(parent);
 8006356:	4630      	mov	r0, r6
 8006358:	f7ff fdac 	bl	8005eb4 <lv_obj_get_scroll_snap_x>
    if(snap_x != LV_SCROLL_SNAP_NONE) area_tmp = &child->coords;
 800635c:	4682      	mov	sl, r0
 800635e:	b110      	cbz	r0, 8006366 <scroll_area_into_view+0xce>
 8006360:	9b01      	ldr	r3, [sp, #4]
 8006362:	f103 0814 	add.w	r8, r3, #20
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8006366:	f241 0212 	movw	r2, #4114	; 0x1012
 800636a:	2100      	movs	r1, #0
 800636c:	4630      	mov	r0, r6
 800636e:	f000 fffb 	bl	8007368 <lv_obj_get_style_prop>
 8006372:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8006374:	f241 0213 	movw	r2, #4115	; 0x1013
 8006378:	2100      	movs	r1, #0
 800637a:	4630      	mov	r0, r6
    else area_tmp = area;

    lv_coord_t pleft = lv_obj_get_style_pad_left(parent, LV_PART_MAIN);
    lv_coord_t pright = lv_obj_get_style_pad_right(parent, LV_PART_MAIN);
    lv_coord_t left_diff = parent->coords.x1 + pleft - area_tmp->x1 - scroll_value->x;
 800637c:	b2bf      	uxth	r7, r7
 800637e:	f000 fff3 	bl	8007368 <lv_obj_get_style_prop>
 8006382:	f8b9 2000 	ldrh.w	r2, [r9]
 8006386:	8ab3      	ldrh	r3, [r6, #20]
    lv_coord_t right_diff = -(parent->coords.x2 - pright - area_tmp->x2- scroll_value->x);
 8006388:	fa1f fb80 	uxth.w	fp, r0
    lv_coord_t left_diff = parent->coords.x1 + pleft - area_tmp->x1 - scroll_value->x;
 800638c:	1abc      	subs	r4, r7, r2
 800638e:	fa12 f080 	uxtah	r0, r2, r0
    lv_coord_t right_diff = -(parent->coords.x2 - pright - area_tmp->x2- scroll_value->x);
 8006392:	f8b8 1004 	ldrh.w	r1, [r8, #4]
    lv_coord_t left_diff = parent->coords.x1 + pleft - area_tmp->x1 - scroll_value->x;
 8006396:	441c      	add	r4, r3
 8006398:	f8b8 3000 	ldrh.w	r3, [r8]
 800639c:	b280      	uxth	r0, r0
 800639e:	1ae4      	subs	r4, r4, r3
    lv_coord_t right_diff = -(parent->coords.x2 - pright - area_tmp->x2- scroll_value->x);
 80063a0:	8b33      	ldrh	r3, [r6, #24]
    lv_coord_t left_diff = parent->coords.x1 + pleft - area_tmp->x1 - scroll_value->x;
 80063a2:	b224      	sxth	r4, r4
    lv_coord_t right_diff = -(parent->coords.x2 - pright - area_tmp->x2- scroll_value->x);
 80063a4:	1ac2      	subs	r2, r0, r3
    if((left_diff > 0 && right_diff > 0)) x_scroll = 0;
 80063a6:	2c00      	cmp	r4, #0
    lv_coord_t right_diff = -(parent->coords.x2 - pright - area_tmp->x2- scroll_value->x);
 80063a8:	440a      	add	r2, r1
 80063aa:	b212      	sxth	r2, r2
    if((left_diff > 0 && right_diff > 0)) x_scroll = 0;
 80063ac:	f340 8082 	ble.w	80064b4 <scroll_area_into_view+0x21c>
 80063b0:	2a00      	cmp	r2, #0
 80063b2:	dc05      	bgt.n	80063c0 <scroll_area_into_view+0x128>
    else if(left_diff > 0) {
        x_scroll = left_diff;
        /*Do not let scrolling in*/
        lv_coord_t sl = lv_obj_get_scroll_left(parent);
 80063b4:	4630      	mov	r0, r6
 80063b6:	f7ff fe03 	bl	8005fc0 <lv_obj_get_scroll_left>
        if(sl + x_scroll > 0) x_scroll = 0;
 80063ba:	4420      	add	r0, r4
 80063bc:	2800      	cmp	r0, #0
 80063be:	dd00      	ble.n	80063c2 <scroll_area_into_view+0x12a>
 80063c0:	2400      	movs	r4, #0
        /*Do not let scrolling in*/
        lv_coord_t sr = lv_obj_get_scroll_right(parent);
        if(sr + x_scroll < 0) x_scroll = 0;
    }

    lv_coord_t parent_w = lv_obj_get_width(parent) - pleft - pright;
 80063c2:	4630      	mov	r0, r6
 80063c4:	f7fe fd53 	bl	8004e6e <lv_obj_get_width>
    switch(snap_x) {
 80063c8:	f1ba 0f02 	cmp.w	sl, #2
 80063cc:	d07e      	beq.n	80064cc <scroll_area_into_view+0x234>
 80063ce:	f1ba 0f03 	cmp.w	sl, #3
 80063d2:	f000 8083 	beq.w	80064dc <scroll_area_into_view+0x244>
 80063d6:	f1ba 0f01 	cmp.w	sl, #1
 80063da:	d105      	bne.n	80063e8 <scroll_area_into_view+0x150>
    case LV_SCROLL_SNAP_START:
        snap_goal = parent->coords.x1 + pleft;
        act = area_tmp->x1 + x_scroll;
        x_scroll += snap_goal - act;
 80063dc:	8ab4      	ldrh	r4, [r6, #20]
 80063de:	443c      	add	r4, r7
 80063e0:	f8b8 7000 	ldrh.w	r7, [r8]
 80063e4:	1be4      	subs	r4, r4, r7
        break;
    case LV_SCROLL_SNAP_END:
        snap_goal = parent->coords.x2 - pright;
        act = area_tmp->x2 + x_scroll;
        x_scroll += snap_goal - act;
 80063e6:	b224      	sxth	r4, r4
        x_scroll += snap_goal - act;
        break;
    }

    /*Remove any pending scroll animations.*/
    lv_anim_del(parent, scroll_x_anim);
 80063e8:	4949      	ldr	r1, [pc, #292]	; (8006510 <scroll_area_into_view+0x278>)
 80063ea:	4630      	mov	r0, r6
 80063ec:	f010 fc40 	bl	8016c70 <lv_anim_del>
    lv_anim_del(parent, scroll_y_anim);
 80063f0:	4948      	ldr	r1, [pc, #288]	; (8006514 <scroll_area_into_view+0x27c>)
 80063f2:	4630      	mov	r0, r6
 80063f4:	f010 fc3c 	bl	8016c70 <lv_anim_del>

    if((scroll_dir & LV_DIR_LEFT) == 0 && x_scroll < 0) x_scroll = 0;
 80063f8:	9b00      	ldr	r3, [sp, #0]
 80063fa:	07d8      	lsls	r0, r3, #31
    if((scroll_dir & LV_DIR_RIGHT) == 0 && x_scroll > 0) x_scroll = 0;
 80063fc:	9b00      	ldr	r3, [sp, #0]
    if((scroll_dir & LV_DIR_TOP) == 0 && y_scroll < 0) y_scroll = 0;
    if((scroll_dir & LV_DIR_BOTTOM) == 0 && y_scroll > 0) y_scroll = 0;

    scroll_value->x += anim_en == LV_ANIM_OFF ? 0 : x_scroll;
    scroll_value->y += anim_en == LV_ANIM_OFF ? 0 : y_scroll;
    lv_obj_scroll_by(parent, x_scroll, y_scroll, anim_en);
 80063fe:	4630      	mov	r0, r6
 8006400:	bf58      	it	pl
 8006402:	ea24 74e4 	bicpl.w	r4, r4, r4, asr #31
    if((scroll_dir & LV_DIR_RIGHT) == 0 && x_scroll > 0) x_scroll = 0;
 8006406:	0799      	lsls	r1, r3, #30
    if((scroll_dir & LV_DIR_TOP) == 0 && y_scroll < 0) y_scroll = 0;
 8006408:	9b00      	ldr	r3, [sp, #0]
 800640a:	bf58      	it	pl
 800640c:	ea04 74e4 	andpl.w	r4, r4, r4, asr #31
 8006410:	075a      	lsls	r2, r3, #29
    if((scroll_dir & LV_DIR_BOTTOM) == 0 && y_scroll > 0) y_scroll = 0;
 8006412:	9b00      	ldr	r3, [sp, #0]
    scroll_value->x += anim_en == LV_ANIM_OFF ? 0 : x_scroll;
 8006414:	9a03      	ldr	r2, [sp, #12]
    lv_obj_scroll_by(parent, x_scroll, y_scroll, anim_en);
 8006416:	4621      	mov	r1, r4
 8006418:	bf58      	it	pl
 800641a:	ea25 75e5 	bicpl.w	r5, r5, r5, asr #31
    if((scroll_dir & LV_DIR_BOTTOM) == 0 && y_scroll > 0) y_scroll = 0;
 800641e:	071b      	lsls	r3, r3, #28
    scroll_value->x += anim_en == LV_ANIM_OFF ? 0 : x_scroll;
 8006420:	f8b9 3000 	ldrh.w	r3, [r9]
 8006424:	bf58      	it	pl
 8006426:	ea05 75e5 	andpl.w	r5, r5, r5, asr #31
 800642a:	2a00      	cmp	r2, #0
 800642c:	bf14      	ite	ne
 800642e:	4622      	movne	r2, r4
 8006430:	2200      	moveq	r2, #0
 8006432:	4413      	add	r3, r2
    scroll_value->y += anim_en == LV_ANIM_OFF ? 0 : y_scroll;
 8006434:	bf14      	ite	ne
 8006436:	462a      	movne	r2, r5
 8006438:	2200      	moveq	r2, #0
    scroll_value->x += anim_en == LV_ANIM_OFF ? 0 : x_scroll;
 800643a:	f8a9 3000 	strh.w	r3, [r9]
    scroll_value->y += anim_en == LV_ANIM_OFF ? 0 : y_scroll;
 800643e:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 8006442:	4413      	add	r3, r2
    lv_obj_scroll_by(parent, x_scroll, y_scroll, anim_en);
 8006444:	462a      	mov	r2, r5
    scroll_value->y += anim_en == LV_ANIM_OFF ? 0 : y_scroll;
 8006446:	f8a9 3002 	strh.w	r3, [r9, #2]
    lv_obj_scroll_by(parent, x_scroll, y_scroll, anim_en);
 800644a:	9b03      	ldr	r3, [sp, #12]
}
 800644c:	b009      	add	sp, #36	; 0x24
 800644e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_obj_scroll_by(parent, x_scroll, y_scroll, anim_en);
 8006452:	f7ff bea5 	b.w	80061a0 <lv_obj_scroll_by>
    else area_tmp = area;
 8006456:	4647      	mov	r7, r8
 8006458:	e736      	b.n	80062c8 <scroll_area_into_view+0x30>
    else if(bottom_diff > 0) {
 800645a:	2900      	cmp	r1, #0
 800645c:	f77f af6a 	ble.w	8006334 <scroll_area_into_view+0x9c>
        y_scroll = -bottom_diff;
 8006460:	9902      	ldr	r1, [sp, #8]
        lv_coord_t sb = lv_obj_get_scroll_bottom(parent);
 8006462:	4630      	mov	r0, r6
        y_scroll = -bottom_diff;
 8006464:	1a8d      	subs	r5, r1, r2
 8006466:	1aed      	subs	r5, r5, r3
        lv_coord_t sb = lv_obj_get_scroll_bottom(parent);
 8006468:	f7ff fd56 	bl	8005f18 <lv_obj_get_scroll_bottom>
        y_scroll = -bottom_diff;
 800646c:	b22d      	sxth	r5, r5
        if(sb + y_scroll < 0) y_scroll = 0;
 800646e:	42e8      	cmn	r0, r5
 8006470:	f57f af61 	bpl.w	8006336 <scroll_area_into_view+0x9e>
 8006474:	e75e      	b.n	8006334 <scroll_area_into_view+0x9c>
        y_scroll += snap_goal - act;
 8006476:	8b75      	ldrh	r5, [r6, #26]
 8006478:	88fb      	ldrh	r3, [r7, #6]
 800647a:	eba5 050b 	sub.w	r5, r5, fp
 800647e:	1aed      	subs	r5, r5, r3
 8006480:	e768      	b.n	8006354 <scroll_area_into_view+0xbc>
    lv_coord_t parent_h = lv_obj_get_height(parent) - ptop - pbottom;
 8006482:	eb04 050b 	add.w	r5, r4, fp
 8006486:	9b04      	ldr	r3, [sp, #16]
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8006488:	887a      	ldrh	r2, [r7, #2]
 800648a:	eba3 0b05 	sub.w	fp, r3, r5
 800648e:	88fb      	ldrh	r3, [r7, #6]
        snap_goal = parent->coords.y1 + ptop + parent_h / 2;
 8006490:	f3cb 35c0 	ubfx	r5, fp, #15, #1
 8006494:	3301      	adds	r3, #1
 8006496:	fa05 fb8b 	sxtah	fp, r5, fp
        y_scroll += snap_goal - act;
 800649a:	8af5      	ldrh	r5, [r6, #22]
 800649c:	1a9b      	subs	r3, r3, r2
 800649e:	4425      	add	r5, r4
 80064a0:	1aad      	subs	r5, r5, r2
        act = lv_area_get_height(area_tmp) / 2 + area_tmp->y1 + y_scroll;
 80064a2:	f3c3 32c0 	ubfx	r2, r3, #15, #1
        y_scroll += snap_goal - act;
 80064a6:	eb05 056b 	add.w	r5, r5, fp, asr #1
        act = lv_area_get_height(area_tmp) / 2 + area_tmp->y1 + y_scroll;
 80064aa:	fa02 f383 	sxtah	r3, r2, r3
        y_scroll += snap_goal - act;
 80064ae:	eba5 0563 	sub.w	r5, r5, r3, asr #1
 80064b2:	e74f      	b.n	8006354 <scroll_area_into_view+0xbc>
    else if(right_diff > 0) {
 80064b4:	2a00      	cmp	r2, #0
 80064b6:	dd83      	ble.n	80063c0 <scroll_area_into_view+0x128>
        x_scroll = -right_diff;
 80064b8:	1a1c      	subs	r4, r3, r0
        lv_coord_t sr = lv_obj_get_scroll_right(parent);
 80064ba:	4630      	mov	r0, r6
        x_scroll = -right_diff;
 80064bc:	1a64      	subs	r4, r4, r1
        lv_coord_t sr = lv_obj_get_scroll_right(parent);
 80064be:	f7ff fdeb 	bl	8006098 <lv_obj_get_scroll_right>
        x_scroll = -right_diff;
 80064c2:	b224      	sxth	r4, r4
        if(sr + x_scroll < 0) x_scroll = 0;
 80064c4:	42e0      	cmn	r0, r4
 80064c6:	f57f af7c 	bpl.w	80063c2 <scroll_area_into_view+0x12a>
 80064ca:	e779      	b.n	80063c0 <scroll_area_into_view+0x128>
        x_scroll += snap_goal - act;
 80064cc:	8b34      	ldrh	r4, [r6, #24]
 80064ce:	eba4 040b 	sub.w	r4, r4, fp
 80064d2:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80064d6:	eba4 040b 	sub.w	r4, r4, fp
 80064da:	e784      	b.n	80063e6 <scroll_area_into_view+0x14e>
        x_scroll += snap_goal - act;
 80064dc:	8ab3      	ldrh	r3, [r6, #20]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80064de:	f8b8 2000 	ldrh.w	r2, [r8]
 80064e2:	443b      	add	r3, r7
    lv_coord_t parent_w = lv_obj_get_width(parent) - pleft - pright;
 80064e4:	445f      	add	r7, fp
        x_scroll += snap_goal - act;
 80064e6:	1a9c      	subs	r4, r3, r2
 80064e8:	f8b8 3004 	ldrh.w	r3, [r8, #4]
    lv_coord_t parent_w = lv_obj_get_width(parent) - pleft - pright;
 80064ec:	1bc0      	subs	r0, r0, r7
 80064ee:	3301      	adds	r3, #1
 80064f0:	1a9b      	subs	r3, r3, r2
        act = lv_area_get_width(area_tmp) / 2 + area_tmp->x1 + x_scroll;
 80064f2:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 80064f6:	fa02 f383 	sxtah	r3, r2, r3
        x_scroll += snap_goal - act;
 80064fa:	eba4 0363 	sub.w	r3, r4, r3, asr #1
        snap_goal = parent->coords.x1 + pleft + parent_w / 2;
 80064fe:	f3c0 34c0 	ubfx	r4, r0, #15, #1
 8006502:	fa04 f080 	sxtah	r0, r4, r0
        x_scroll += snap_goal - act;
 8006506:	eb03 0060 	add.w	r0, r3, r0, asr #1
 800650a:	b204      	sxth	r4, r0
        break;
 800650c:	e76c      	b.n	80063e8 <scroll_area_into_view+0x150>
 800650e:	bf00      	nop
 8006510:	08005ed9 	.word	0x08005ed9
 8006514:	08005efd 	.word	0x08005efd

08006518 <lv_obj_scroll_to_x>:
{
 8006518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800651c:	4605      	mov	r5, r0
 800651e:	460f      	mov	r7, r1
    lv_anim_del(obj, scroll_x_anim);
 8006520:	491e      	ldr	r1, [pc, #120]	; (800659c <lv_obj_scroll_to_x+0x84>)
{
 8006522:	4616      	mov	r6, r2
    lv_anim_del(obj, scroll_x_anim);
 8006524:	f010 fba4 	bl	8016c70 <lv_anim_del>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 8006528:	f241 426a 	movw	r2, #5226	; 0x146a
 800652c:	2100      	movs	r1, #0
 800652e:	4628      	mov	r0, r5
 8006530:	f000 ff1a 	bl	8007368 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 8006534:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) != LV_BASE_DIR_RTL) {
 8006536:	2801      	cmp	r0, #1
 8006538:	d01b      	beq.n	8006572 <lv_obj_scroll_to_x+0x5a>
        if(x > 0) {
 800653a:	2f00      	cmp	r7, #0
 800653c:	dd2b      	ble.n	8006596 <lv_obj_scroll_to_x+0x7e>
            lv_coord_t  scroll_max = lv_obj_get_scroll_left(obj) + lv_obj_get_scroll_right(obj);
 800653e:	4628      	mov	r0, r5
 8006540:	f7ff fd3e 	bl	8005fc0 <lv_obj_get_scroll_left>
 8006544:	4604      	mov	r4, r0
 8006546:	4628      	mov	r0, r5
 8006548:	f7ff fda6 	bl	8006098 <lv_obj_get_scroll_right>
 800654c:	4404      	add	r4, r0
 800654e:	b224      	sxth	r4, r4
            if(x > scroll_max) x = scroll_max;
 8006550:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8006554:	42a7      	cmp	r7, r4
 8006556:	bfa8      	it	ge
 8006558:	4627      	movge	r7, r4
    lv_coord_t scroll_x = lv_obj_get_scroll_x(obj);
 800655a:	4628      	mov	r0, r5
 800655c:	f7ff fcb6 	bl	8005ecc <lv_obj_get_scroll_x>
    lv_coord_t diff = -x + scroll_x;
 8006560:	1bc0      	subs	r0, r0, r7
    lv_obj_scroll_by(obj, diff, 0, anim_en);
 8006562:	4633      	mov	r3, r6
 8006564:	2200      	movs	r2, #0
 8006566:	b201      	sxth	r1, r0
 8006568:	4628      	mov	r0, r5
}
 800656a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    lv_obj_scroll_by(obj, diff, 0, anim_en);
 800656e:	f7ff be17 	b.w	80061a0 <lv_obj_scroll_by>
        if(x < 0) {
 8006572:	2f00      	cmp	r7, #0
 8006574:	da0f      	bge.n	8006596 <lv_obj_scroll_to_x+0x7e>
            lv_coord_t  scroll_max = lv_obj_get_scroll_left(obj) + lv_obj_get_scroll_right(obj);
 8006576:	4628      	mov	r0, r5
 8006578:	f7ff fd22 	bl	8005fc0 <lv_obj_get_scroll_left>
 800657c:	4604      	mov	r4, r0
 800657e:	4628      	mov	r0, r5
 8006580:	f7ff fd8a 	bl	8006098 <lv_obj_get_scroll_right>
 8006584:	1823      	adds	r3, r4, r0
 8006586:	b21b      	sxth	r3, r3
            if(scroll_max < 0) scroll_max = 0;
 8006588:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
            if(x < -scroll_max) x = -scroll_max;
 800658c:	425b      	negs	r3, r3
 800658e:	429f      	cmp	r7, r3
 8006590:	dae3      	bge.n	800655a <lv_obj_scroll_to_x+0x42>
 8006592:	b21f      	sxth	r7, r3
 8006594:	e7e1      	b.n	800655a <lv_obj_scroll_to_x+0x42>
 8006596:	2700      	movs	r7, #0
 8006598:	e7df      	b.n	800655a <lv_obj_scroll_to_x+0x42>
 800659a:	bf00      	nop
 800659c:	08005ed9 	.word	0x08005ed9

080065a0 <lv_obj_scroll_to_y>:
{
 80065a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065a4:	460f      	mov	r7, r1
    lv_anim_del(obj, scroll_y_anim);
 80065a6:	4911      	ldr	r1, [pc, #68]	; (80065ec <lv_obj_scroll_to_y+0x4c>)
{
 80065a8:	4605      	mov	r5, r0
 80065aa:	4616      	mov	r6, r2
    lv_anim_del(obj, scroll_y_anim);
 80065ac:	f010 fb60 	bl	8016c70 <lv_anim_del>
    if(y > 0) {
 80065b0:	2f00      	cmp	r7, #0
 80065b2:	dd19      	ble.n	80065e8 <lv_obj_scroll_to_y+0x48>
        lv_coord_t  scroll_max = lv_obj_get_scroll_top(obj) + lv_obj_get_scroll_bottom(obj);
 80065b4:	4628      	mov	r0, r5
 80065b6:	f7ff fc9b 	bl	8005ef0 <lv_obj_get_scroll_y>
 80065ba:	4604      	mov	r4, r0
 80065bc:	4628      	mov	r0, r5
 80065be:	f7ff fcab 	bl	8005f18 <lv_obj_get_scroll_bottom>
 80065c2:	4404      	add	r4, r0
 80065c4:	b224      	sxth	r4, r4
        if(y > scroll_max) y = scroll_max;
 80065c6:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80065ca:	42bc      	cmp	r4, r7
 80065cc:	bfa8      	it	ge
 80065ce:	463c      	movge	r4, r7
    lv_coord_t scroll_y = lv_obj_get_scroll_y(obj);
 80065d0:	4628      	mov	r0, r5
 80065d2:	f7ff fc8d 	bl	8005ef0 <lv_obj_get_scroll_y>
    lv_coord_t diff = -y + scroll_y;
 80065d6:	1b00      	subs	r0, r0, r4
    lv_obj_scroll_by(obj, 0, diff, anim_en);
 80065d8:	4633      	mov	r3, r6
 80065da:	2100      	movs	r1, #0
 80065dc:	b202      	sxth	r2, r0
 80065de:	4628      	mov	r0, r5
}
 80065e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    lv_obj_scroll_by(obj, 0, diff, anim_en);
 80065e4:	f7ff bddc 	b.w	80061a0 <lv_obj_scroll_by>
 80065e8:	2400      	movs	r4, #0
 80065ea:	e7f1      	b.n	80065d0 <lv_obj_scroll_to_y+0x30>
 80065ec:	08005efd 	.word	0x08005efd

080065f0 <lv_obj_scroll_to>:
{
 80065f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80065f2:	4604      	mov	r4, r0
 80065f4:	4615      	mov	r5, r2
 80065f6:	461a      	mov	r2, r3
    lv_obj_scroll_to_x(obj, x, anim_en);
 80065f8:	9301      	str	r3, [sp, #4]
 80065fa:	f7ff ff8d 	bl	8006518 <lv_obj_scroll_to_x>
    lv_obj_scroll_to_y(obj, y, anim_en);
 80065fe:	9a01      	ldr	r2, [sp, #4]
 8006600:	4629      	mov	r1, r5
 8006602:	4620      	mov	r0, r4
}
 8006604:	b003      	add	sp, #12
 8006606:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    lv_obj_scroll_to_y(obj, y, anim_en);
 800660a:	f7ff bfc9 	b.w	80065a0 <lv_obj_scroll_to_y>

0800660e <lv_obj_scroll_to_view_recursive>:
{
 800660e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006610:	4604      	mov	r4, r0
 8006612:	460e      	mov	r6, r1
    lv_obj_update_layout(obj);
 8006614:	f7ff f9e8 	bl	80059e8 <lv_obj_update_layout>
    lv_point_t p = {0, 0};
 8006618:	2300      	movs	r3, #0
    lv_obj_t * parent = lv_obj_get_parent(child);
 800661a:	4620      	mov	r0, r4
    lv_point_t p = {0, 0};
 800661c:	9301      	str	r3, [sp, #4]
    lv_obj_t * parent = lv_obj_get_parent(child);
 800661e:	f001 f9ed 	bl	80079fc <lv_obj_get_parent>
    lv_obj_t * child = obj;
 8006622:	4621      	mov	r1, r4
    lv_obj_t * parent = lv_obj_get_parent(child);
 8006624:	4605      	mov	r5, r0
        scroll_area_into_view(&obj->coords, child, &p, anim_en);
 8006626:	3414      	adds	r4, #20
    while(parent) {
 8006628:	b90d      	cbnz	r5, 800662e <lv_obj_scroll_to_view_recursive+0x20>
}
 800662a:	b002      	add	sp, #8
 800662c:	bd70      	pop	{r4, r5, r6, pc}
        scroll_area_into_view(&obj->coords, child, &p, anim_en);
 800662e:	4633      	mov	r3, r6
 8006630:	aa01      	add	r2, sp, #4
 8006632:	4620      	mov	r0, r4
 8006634:	f7ff fe30 	bl	8006298 <scroll_area_into_view>
        parent = lv_obj_get_parent(parent);
 8006638:	4628      	mov	r0, r5
 800663a:	f001 f9df 	bl	80079fc <lv_obj_get_parent>
 800663e:	4629      	mov	r1, r5
 8006640:	4605      	mov	r5, r0
 8006642:	e7f1      	b.n	8006628 <lv_obj_scroll_to_view_recursive+0x1a>

08006644 <lv_obj_get_scrollbar_area>:
{
 8006644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_area_set(hor_area, 0, 0, -1, -1);
 8006648:	f04f 37ff 	mov.w	r7, #4294967295
{
 800664c:	b08f      	sub	sp, #60	; 0x3c
 800664e:	460d      	mov	r5, r1
 8006650:	4616      	mov	r6, r2
    lv_area_set(hor_area, 0, 0, -1, -1);
 8006652:	2200      	movs	r2, #0
{
 8006654:	4604      	mov	r4, r0
    lv_area_set(hor_area, 0, 0, -1, -1);
 8006656:	463b      	mov	r3, r7
 8006658:	4628      	mov	r0, r5
 800665a:	4611      	mov	r1, r2
 800665c:	9700      	str	r7, [sp, #0]
 800665e:	f010 fbdb 	bl	8016e18 <lv_area_set>
    lv_area_set(ver_area, 0, 0, -1, -1);
 8006662:	2200      	movs	r2, #0
 8006664:	463b      	mov	r3, r7
 8006666:	4630      	mov	r0, r6
 8006668:	4611      	mov	r1, r2
 800666a:	9700      	str	r7, [sp, #0]
 800666c:	f010 fbd4 	bl	8016e18 <lv_area_set>
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_SCROLLABLE) == false) return;
 8006670:	2110      	movs	r1, #16
 8006672:	4620      	mov	r0, r4
 8006674:	f7fd fba5 	bl	8003dc2 <lv_obj_has_flag>
 8006678:	9002      	str	r0, [sp, #8]
 800667a:	2800      	cmp	r0, #0
 800667c:	d047      	beq.n	800670e <lv_obj_get_scrollbar_area+0xca>
    lv_dir_t sm = lv_obj_get_scrollbar_mode(obj);
 800667e:	4620      	mov	r0, r4
 8006680:	f7ff fc08 	bl	8005e94 <lv_obj_get_scrollbar_mode>
    if(sm == LV_SCROLLBAR_MODE_OFF)  return;
 8006684:	4680      	mov	r8, r0
 8006686:	2800      	cmp	r0, #0
 8006688:	d041      	beq.n	800670e <lv_obj_get_scrollbar_area+0xca>
    lv_indev_t * indev = lv_indev_get_next(NULL);
 800668a:	2000      	movs	r0, #0
 800668c:	f010 f98a 	bl	80169a4 <lv_indev_get_next>
    if(sm == LV_SCROLLBAR_MODE_ACTIVE) {
 8006690:	f1b8 0f02 	cmp.w	r8, #2
    lv_indev_t * indev = lv_indev_get_next(NULL);
 8006694:	4682      	mov	sl, r0
    if(sm == LV_SCROLLBAR_MODE_ACTIVE) {
 8006696:	d037      	beq.n	8006708 <lv_obj_get_scrollbar_area+0xc4>
    lv_coord_t st = lv_obj_get_scroll_top(obj);
 8006698:	4620      	mov	r0, r4
 800669a:	f7ff fc29 	bl	8005ef0 <lv_obj_get_scroll_y>
 800669e:	4607      	mov	r7, r0
    lv_coord_t sb = lv_obj_get_scroll_bottom(obj);
 80066a0:	4620      	mov	r0, r4
 80066a2:	f7ff fc39 	bl	8005f18 <lv_obj_get_scroll_bottom>
 80066a6:	9009      	str	r0, [sp, #36]	; 0x24
    lv_coord_t sl = lv_obj_get_scroll_left(obj);
 80066a8:	4620      	mov	r0, r4
 80066aa:	f7ff fc89 	bl	8005fc0 <lv_obj_get_scroll_left>
 80066ae:	900c      	str	r0, [sp, #48]	; 0x30
    lv_coord_t sr = lv_obj_get_scroll_right(obj);
 80066b0:	4620      	mov	r0, r4
 80066b2:	f7ff fcf1 	bl	8006098 <lv_obj_get_scroll_right>
 80066b6:	900a      	str	r0, [sp, #40]	; 0x28
    lv_dir_t dir = lv_obj_get_scroll_dir(obj);
 80066b8:	4620      	mov	r0, r4
 80066ba:	f7ff fbf3 	bl	8005ea4 <lv_obj_get_scroll_dir>
    if((dir & LV_DIR_VER) &&
 80066be:	f010 090c 	ands.w	r9, r0, #12
    lv_dir_t dir = lv_obj_get_scroll_dir(obj);
 80066c2:	4683      	mov	fp, r0
    if((dir & LV_DIR_VER) &&
 80066c4:	d00e      	beq.n	80066e4 <lv_obj_get_scrollbar_area+0xa0>
 80066c6:	f1b8 0f01 	cmp.w	r8, #1
 80066ca:	d030      	beq.n	800672e <lv_obj_get_scrollbar_area+0xea>
            ((sm == LV_SCROLLBAR_MODE_ON) ||
 80066cc:	f1b8 0f03 	cmp.w	r8, #3
 80066d0:	d120      	bne.n	8006714 <lv_obj_get_scrollbar_area+0xd0>
                    (sm == LV_SCROLLBAR_MODE_AUTO && (st > 0 || sb > 0)) ||
 80066d2:	2f00      	cmp	r7, #0
 80066d4:	dc2b      	bgt.n	800672e <lv_obj_get_scrollbar_area+0xea>
 80066d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066d8:	2b00      	cmp	r3, #0
 80066da:	bfd4      	ite	le
 80066dc:	f04f 0900 	movle.w	r9, #0
 80066e0:	f04f 0901 	movgt.w	r9, #1
    if((dir & LV_DIR_HOR) &&
 80066e4:	f01b 0f03 	tst.w	fp, #3
 80066e8:	d127      	bne.n	800673a <lv_obj_get_scrollbar_area+0xf6>
    if(!hor_draw && !ver_draw) return;
 80066ea:	f1b9 0f00 	cmp.w	r9, #0
 80066ee:	d00e      	beq.n	800670e <lv_obj_get_scrollbar_area+0xca>
 80066f0:	2300      	movs	r3, #0
 80066f2:	9302      	str	r3, [sp, #8]
 80066f4:	e02e      	b.n	8006754 <lv_obj_get_scrollbar_area+0x110>
            if(lv_indev_get_scroll_obj(indev) == obj) break;
 80066f6:	4650      	mov	r0, sl
 80066f8:	f7fb ff00 	bl	80024fc <lv_indev_get_scroll_obj>
 80066fc:	4284      	cmp	r4, r0
 80066fe:	d0cb      	beq.n	8006698 <lv_obj_get_scrollbar_area+0x54>
            indev = lv_indev_get_next(indev);
 8006700:	4650      	mov	r0, sl
 8006702:	f010 f94f 	bl	80169a4 <lv_indev_get_next>
 8006706:	4682      	mov	sl, r0
        while(indev) {
 8006708:	f1ba 0f00 	cmp.w	sl, #0
 800670c:	d1f3      	bne.n	80066f6 <lv_obj_get_scrollbar_area+0xb2>
}
 800670e:	b00f      	add	sp, #60	; 0x3c
 8006710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    (sm == LV_SCROLLBAR_MODE_AUTO && (st > 0 || sb > 0)) ||
 8006714:	f1b8 0f02 	cmp.w	r8, #2
 8006718:	d10c      	bne.n	8006734 <lv_obj_get_scrollbar_area+0xf0>
                    (sm == LV_SCROLLBAR_MODE_ACTIVE && lv_indev_get_scroll_dir(indev) == LV_DIR_VER))) {
 800671a:	4650      	mov	r0, sl
 800671c:	f7fb fee0 	bl	80024e0 <lv_indev_get_scroll_dir>
 8006720:	f1a0 030c 	sub.w	r3, r0, #12
 8006724:	f1d3 0900 	rsbs	r9, r3, #0
 8006728:	eb49 0903 	adc.w	r9, r9, r3
 800672c:	e7da      	b.n	80066e4 <lv_obj_get_scrollbar_area+0xa0>
        ver_draw = true;
 800672e:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8006732:	e7d7      	b.n	80066e4 <lv_obj_get_scrollbar_area+0xa0>
    bool ver_draw = false;
 8006734:	f04f 0900 	mov.w	r9, #0
 8006738:	e7d4      	b.n	80066e4 <lv_obj_get_scrollbar_area+0xa0>
    if((dir & LV_DIR_HOR) &&
 800673a:	f1b8 0f01 	cmp.w	r8, #1
 800673e:	d009      	beq.n	8006754 <lv_obj_get_scrollbar_area+0x110>
            ((sm == LV_SCROLLBAR_MODE_ON) ||
 8006740:	f1b8 0f03 	cmp.w	r8, #3
 8006744:	f040 80c1 	bne.w	80068ca <lv_obj_get_scrollbar_area+0x286>
                    (sm == LV_SCROLLBAR_MODE_AUTO && (sl > 0 || sr > 0)) ||
 8006748:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800674a:	2b00      	cmp	r3, #0
 800674c:	dc02      	bgt.n	8006754 <lv_obj_get_scrollbar_area+0x110>
 800674e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006750:	2b00      	cmp	r3, #0
 8006752:	ddca      	ble.n	80066ea <lv_obj_get_scrollbar_area+0xa6>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8006754:	f241 0210 	movw	r2, #4112	; 0x1010
 8006758:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800675c:	4620      	mov	r0, r4
 800675e:	f000 fe03 	bl	8007368 <lv_obj_get_style_prop>
 8006762:	9008      	str	r0, [sp, #32]
    return (lv_coord_t)v.num;
 8006764:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8006768:	f241 0213 	movw	r2, #4115	; 0x1013
 800676c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8006770:	4620      	mov	r0, r4
    return (lv_coord_t)v.num;
 8006772:	9303      	str	r3, [sp, #12]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8006774:	f000 fdf8 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8006778:	f241 0201 	movw	r2, #4097	; 0x1001
 800677c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8006780:	9007      	str	r0, [sp, #28]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8006782:	4620      	mov	r0, r4
 8006784:	f000 fdf0 	bl	8007368 <lv_obj_get_style_prop>
 8006788:	9006      	str	r0, [sp, #24]
    lv_coord_t obj_h = lv_obj_get_height(obj);
 800678a:	4620      	mov	r0, r4
 800678c:	f7fe fb75 	bl	8004e7a <lv_obj_get_height>
 8006790:	4680      	mov	r8, r0
    lv_coord_t obj_w = lv_obj_get_width(obj);
 8006792:	4620      	mov	r0, r4
 8006794:	f7fe fb6b 	bl	8004e6e <lv_obj_get_width>
 8006798:	9004      	str	r0, [sp, #16]
    lv_coord_t ver_reg_space = ver_draw ? tickness + side_space : 0;
 800679a:	f1b9 0f00 	cmp.w	r9, #0
 800679e:	f000 809f 	beq.w	80068e0 <lv_obj_get_scrollbar_area+0x29c>
 80067a2:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80067a6:	4413      	add	r3, r2
 80067a8:	b21b      	sxth	r3, r3
 80067aa:	9305      	str	r3, [sp, #20]
    lv_coord_t hor_req_space = hor_draw ? tickness + side_space : 0;
 80067ac:	9b02      	ldr	r3, [sp, #8]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	f000 8099 	beq.w	80068e6 <lv_obj_get_scrollbar_area+0x2a2>
 80067b4:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80067b8:	4413      	add	r3, r2
 80067ba:	fa0f fa83 	sxth.w	sl, r3
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_OPA);
 80067be:	2221      	movs	r2, #33	; 0x21
 80067c0:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80067c4:	4620      	mov	r0, r4
 80067c6:	f000 fdcf 	bl	8007368 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 80067ca:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_bg_opa(obj, LV_PART_SCROLLBAR) < LV_OPA_MIN &&
 80067cc:	2801      	cmp	r0, #1
 80067ce:	f240 808d 	bls.w	80068ec <lv_obj_get_scrollbar_area+0x2a8>
    if(ver_draw && content_h) {
 80067d2:	f1b9 0f00 	cmp.w	r9, #0
 80067d6:	f040 8094 	bne.w	8006902 <lv_obj_get_scrollbar_area+0x2be>
    if(hor_draw && content_w) {
 80067da:	9b02      	ldr	r3, [sp, #8]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d096      	beq.n	800670e <lv_obj_get_scrollbar_area+0xca>
    lv_coord_t content_w = obj_w + sl + sr;
 80067e0:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 80067e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80067e6:	9302      	str	r3, [sp, #8]
 80067e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80067ea:	4413      	add	r3, r2
 80067ec:	fa1f f983 	uxth.w	r9, r3
 80067f0:	9b04      	ldr	r3, [sp, #16]
 80067f2:	fa19 f383 	uxtah	r3, r9, r3
 80067f6:	b219      	sxth	r1, r3
    if(hor_draw && content_w) {
 80067f8:	2900      	cmp	r1, #0
 80067fa:	d088      	beq.n	800670e <lv_obj_get_scrollbar_area+0xca>
        hor_area->y2 = obj->coords.y2 - side_space;
 80067fc:	8b62      	ldrh	r2, [r4, #26]
        sb_w = LV_MAX(sb_w, SCROLLBAR_MIN_SIZE);
 80067fe:	2000      	movs	r0, #0
        hor_area->y2 = obj->coords.y2 - side_space;
 8006800:	f8bd a01c 	ldrh.w	sl, [sp, #28]
        hor_area->x1 = obj->coords.x1;
 8006804:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
        hor_area->y2 = obj->coords.y2 - side_space;
 8006808:	eba2 020a 	sub.w	r2, r2, sl
        hor_area->y1 = hor_area->y2 - tickness;
 800680c:	f8bd 8018 	ldrh.w	r8, [sp, #24]
        hor_area->x1 = obj->coords.x1;
 8006810:	802b      	strh	r3, [r5, #0]
        hor_area->y2 = obj->coords.y2 - side_space;
 8006812:	b292      	uxth	r2, r2
        hor_area->x2 = obj->coords.x2;
 8006814:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
        hor_area->y2 = obj->coords.y2 - side_space;
 8006818:	80ea      	strh	r2, [r5, #6]
        hor_area->y1 = hor_area->y2 - tickness;
 800681a:	eba2 0208 	sub.w	r2, r2, r8
        hor_area->x2 = obj->coords.x2;
 800681e:	80ab      	strh	r3, [r5, #4]
        hor_area->y1 = hor_area->y2 - tickness;
 8006820:	806a      	strh	r2, [r5, #2]
        lv_coord_t sb_w = ((obj_w - end_space * 2 - ver_reg_space) * obj_w) / content_w;
 8006822:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 8006826:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 800682a:	9a05      	ldr	r2, [sp, #20]
 800682c:	1a9b      	subs	r3, r3, r2
 800682e:	9a04      	ldr	r2, [sp, #16]
 8006830:	4353      	muls	r3, r2
 8006832:	fb93 f3f1 	sdiv	r3, r3, r1
 8006836:	b21f      	sxth	r7, r3
        sb_w = LV_MAX(sb_w, SCROLLBAR_MIN_SIZE);
 8006838:	f010 f85c 	bl	80168f4 <lv_disp_get_dpi>
 800683c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006840:	0040      	lsls	r0, r0, #1
 8006842:	28ef      	cmp	r0, #239	; 0xef
 8006844:	f340 817a 	ble.w	8006b3c <lv_obj_get_scrollbar_area+0x4f8>
 8006848:	2000      	movs	r0, #0
 800684a:	f010 f853 	bl	80168f4 <lv_disp_get_dpi>
 800684e:	220a      	movs	r2, #10
 8006850:	2150      	movs	r1, #80	; 0x50
 8006852:	fb00 1002 	mla	r0, r0, r2, r1
 8006856:	22a0      	movs	r2, #160	; 0xa0
 8006858:	fb90 f0f2 	sdiv	r0, r0, r2
 800685c:	4287      	cmp	r7, r0
 800685e:	dc13      	bgt.n	8006888 <lv_obj_get_scrollbar_area+0x244>
 8006860:	2000      	movs	r0, #0
 8006862:	f010 f847 	bl	80168f4 <lv_disp_get_dpi>
 8006866:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800686a:	0040      	lsls	r0, r0, #1
 800686c:	28ef      	cmp	r0, #239	; 0xef
 800686e:	f340 8167 	ble.w	8006b40 <lv_obj_get_scrollbar_area+0x4fc>
 8006872:	2000      	movs	r0, #0
 8006874:	f010 f83e 	bl	80168f4 <lv_disp_get_dpi>
 8006878:	220a      	movs	r2, #10
 800687a:	2150      	movs	r1, #80	; 0x50
 800687c:	23a0      	movs	r3, #160	; 0xa0
 800687e:	fb00 1002 	mla	r0, r0, r2, r1
 8006882:	fb90 f3f3 	sdiv	r3, r0, r3
 8006886:	b21f      	sxth	r7, r3
        lv_coord_t scroll_w = content_w - obj_w; /*The size of the content which can be really scrolled*/
 8006888:	fa0f f989 	sxth.w	r9, r9
        rem = (obj_w - end_space * 2 - ver_reg_space) - sb_w;  /*Remaining size from the scrollbar track that is not the scrollbar itself*/
 800688c:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 8006890:	f8bd b014 	ldrh.w	fp, [sp, #20]
        if(scroll_w <= 0) {
 8006894:	f1b9 0f00 	cmp.w	r9, #0
 8006898:	8b62      	ldrh	r2, [r4, #26]
 800689a:	f300 8153 	bgt.w	8006b44 <lv_obj_get_scrollbar_area+0x500>
            hor_area->x1 = obj->coords.x1 + end_space;
 800689e:	8aa3      	ldrh	r3, [r4, #20]
            hor_area->y2 = obj->coords.y2 - side_space;
 80068a0:	eba2 0a0a 	sub.w	sl, r2, sl
            hor_area->y1 = hor_area->y2 - tickness + 1;
 80068a4:	f1c8 0801 	rsb	r8, r8, #1
            hor_area->x1 = obj->coords.x1 + end_space;
 80068a8:	4433      	add	r3, r6
            hor_area->x2 = obj->coords.x2 - end_space - ver_reg_space - 1;
 80068aa:	43f6      	mvns	r6, r6
            hor_area->y2 = obj->coords.y2 - side_space;
 80068ac:	fa1f fa8a 	uxth.w	sl, sl
            hor_area->x1 = obj->coords.x1 + end_space;
 80068b0:	802b      	strh	r3, [r5, #0]
            hor_area->x2 = obj->coords.x2 - end_space - ver_reg_space - 1;
 80068b2:	8b23      	ldrh	r3, [r4, #24]
            hor_area->y2 = obj->coords.y2 - side_space;
 80068b4:	f8a5 a006 	strh.w	sl, [r5, #6]
            hor_area->y1 = hor_area->y2 - tickness + 1;
 80068b8:	44c2      	add	sl, r8
            hor_area->x2 = obj->coords.x2 - end_space - ver_reg_space - 1;
 80068ba:	441e      	add	r6, r3
            hor_area->y1 = hor_area->y2 - tickness + 1;
 80068bc:	f8a5 a002 	strh.w	sl, [r5, #2]
            hor_area->x2 = obj->coords.x2 - end_space - ver_reg_space - 1;
 80068c0:	eba6 0b0b 	sub.w	fp, r6, fp
 80068c4:	f8a5 b004 	strh.w	fp, [r5, #4]
 80068c8:	e721      	b.n	800670e <lv_obj_get_scrollbar_area+0xca>
                    (sm == LV_SCROLLBAR_MODE_AUTO && (sl > 0 || sr > 0)) ||
 80068ca:	f1b8 0f02 	cmp.w	r8, #2
 80068ce:	f47f af0c 	bne.w	80066ea <lv_obj_get_scrollbar_area+0xa6>
                    (sm == LV_SCROLLBAR_MODE_ACTIVE && lv_indev_get_scroll_dir(indev) == LV_DIR_HOR))) {
 80068d2:	4650      	mov	r0, sl
 80068d4:	f7fb fe04 	bl	80024e0 <lv_indev_get_scroll_dir>
 80068d8:	2803      	cmp	r0, #3
 80068da:	f47f af06 	bne.w	80066ea <lv_obj_get_scrollbar_area+0xa6>
 80068de:	e739      	b.n	8006754 <lv_obj_get_scrollbar_area+0x110>
    lv_coord_t ver_reg_space = ver_draw ? tickness + side_space : 0;
 80068e0:	f8cd 9014 	str.w	r9, [sp, #20]
 80068e4:	e762      	b.n	80067ac <lv_obj_get_scrollbar_area+0x168>
    lv_coord_t hor_req_space = hor_draw ? tickness + side_space : 0;
 80068e6:	f8dd a008 	ldr.w	sl, [sp, #8]
 80068ea:	e768      	b.n	80067be <lv_obj_get_scrollbar_area+0x17a>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_OPA);
 80068ec:	2231      	movs	r2, #49	; 0x31
 80068ee:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80068f2:	4620      	mov	r0, r4
 80068f4:	f000 fd38 	bl	8007368 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 80068f8:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_bg_opa(obj, LV_PART_SCROLLBAR) < LV_OPA_MIN &&
 80068fa:	2801      	cmp	r0, #1
 80068fc:	f63f af69 	bhi.w	80067d2 <lv_obj_get_scrollbar_area+0x18e>
 8006900:	e705      	b.n	800670e <lv_obj_get_scrollbar_area+0xca>
    lv_coord_t content_h = obj_h + st + sb;
 8006902:	fa1f f388 	uxth.w	r3, r8
 8006906:	930d      	str	r3, [sp, #52]	; 0x34
 8006908:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800690a:	441f      	add	r7, r3
 800690c:	b2bf      	uxth	r7, r7
 800690e:	fa17 f388 	uxtah	r3, r7, r8
 8006912:	b219      	sxth	r1, r3
    if(ver_draw && content_h) {
 8006914:	2900      	cmp	r1, #0
 8006916:	f43f af60 	beq.w	80067da <lv_obj_get_scrollbar_area+0x196>
       ver_area->y1 = obj->coords.y1;
 800691a:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
        sb_h = LV_MAX(sb_h, SCROLLBAR_MIN_SIZE);
 800691e:	2000      	movs	r0, #0
       ver_area->x2 = obj->coords.x2 - side_space;
 8006920:	8b22      	ldrh	r2, [r4, #24]
       ver_area->y1 = obj->coords.y1;
 8006922:	8073      	strh	r3, [r6, #2]
       ver_area->y2 = obj->coords.y2;
 8006924:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
       ver_area->x2 = obj->coords.x2 - side_space;
 8006928:	f8bd b01c 	ldrh.w	fp, [sp, #28]
       ver_area->y2 = obj->coords.y2;
 800692c:	80f3      	strh	r3, [r6, #6]
        lv_coord_t sb_h = ((obj_h - end_space * 2 - hor_req_space) * obj_h) / content_h;
 800692e:	9b03      	ldr	r3, [sp, #12]
       ver_area->x2 = obj->coords.x2 - side_space;
 8006930:	eba2 020b 	sub.w	r2, r2, fp
       ver_area->x1 =ver_area->x2 - tickness;
 8006934:	f8bd 9018 	ldrh.w	r9, [sp, #24]
        lv_coord_t sb_h = ((obj_h - end_space * 2 - hor_req_space) * obj_h) / content_h;
 8006938:	eba8 0343 	sub.w	r3, r8, r3, lsl #1
       ver_area->x2 = obj->coords.x2 - side_space;
 800693c:	b292      	uxth	r2, r2
        lv_coord_t sb_h = ((obj_h - end_space * 2 - hor_req_space) * obj_h) / content_h;
 800693e:	eba3 030a 	sub.w	r3, r3, sl
       ver_area->x2 = obj->coords.x2 - side_space;
 8006942:	80b2      	strh	r2, [r6, #4]
       ver_area->x1 =ver_area->x2 - tickness;
 8006944:	eba2 0209 	sub.w	r2, r2, r9
        lv_coord_t sb_h = ((obj_h - end_space * 2 - hor_req_space) * obj_h) / content_h;
 8006948:	fb08 f303 	mul.w	r3, r8, r3
       ver_area->x1 =ver_area->x2 - tickness;
 800694c:	8032      	strh	r2, [r6, #0]
        lv_coord_t sb_h = ((obj_h - end_space * 2 - hor_req_space) * obj_h) / content_h;
 800694e:	fb93 f3f1 	sdiv	r3, r3, r1
 8006952:	b21b      	sxth	r3, r3
 8006954:	930b      	str	r3, [sp, #44]	; 0x2c
        sb_h = LV_MAX(sb_h, SCROLLBAR_MIN_SIZE);
 8006956:	f00f ffcd 	bl	80168f4 <lv_disp_get_dpi>
 800695a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800695e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006960:	0040      	lsls	r0, r0, #1
 8006962:	28ef      	cmp	r0, #239	; 0xef
 8006964:	dd43      	ble.n	80069ee <lv_obj_get_scrollbar_area+0x3aa>
 8006966:	2000      	movs	r0, #0
 8006968:	f00f ffc4 	bl	80168f4 <lv_disp_get_dpi>
 800696c:	220a      	movs	r2, #10
 800696e:	2150      	movs	r1, #80	; 0x50
 8006970:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006972:	fb00 1002 	mla	r0, r0, r2, r1
 8006976:	22a0      	movs	r2, #160	; 0xa0
 8006978:	fb90 f0f2 	sdiv	r0, r0, r2
 800697c:	4283      	cmp	r3, r0
 800697e:	dc12      	bgt.n	80069a6 <lv_obj_get_scrollbar_area+0x362>
 8006980:	2000      	movs	r0, #0
 8006982:	f00f ffb7 	bl	80168f4 <lv_disp_get_dpi>
 8006986:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800698a:	0040      	lsls	r0, r0, #1
 800698c:	28ef      	cmp	r0, #239	; 0xef
 800698e:	dd30      	ble.n	80069f2 <lv_obj_get_scrollbar_area+0x3ae>
 8006990:	2000      	movs	r0, #0
 8006992:	f00f ffaf 	bl	80168f4 <lv_disp_get_dpi>
 8006996:	220a      	movs	r2, #10
 8006998:	2150      	movs	r1, #80	; 0x50
 800699a:	23a0      	movs	r3, #160	; 0xa0
 800699c:	fb00 1002 	mla	r0, r0, r2, r1
 80069a0:	fb90 f3f3 	sdiv	r3, r0, r3
 80069a4:	b21b      	sxth	r3, r3
        rem = (obj_h - end_space * 2 - hor_req_space) - sb_h;  /*Remaining size from the scrollbar track that is not the scrollbar itself*/
 80069a6:	fa1f f28a 	uxth.w	r2, sl
 80069aa:	9908      	ldr	r1, [sp, #32]
        lv_coord_t scroll_h = content_h - obj_h; /*The size of the content which can be really scrolled*/
 80069ac:	b23f      	sxth	r7, r7
        rem = (obj_h - end_space * 2 - hor_req_space) - sb_h;  /*Remaining size from the scrollbar track that is not the scrollbar itself*/
 80069ae:	f8bd 8020 	ldrh.w	r8, [sp, #32]
 80069b2:	920b      	str	r2, [sp, #44]	; 0x2c
        if(scroll_h <= 0) {
 80069b4:	8ae2      	ldrh	r2, [r4, #22]
 80069b6:	2f00      	cmp	r7, #0
 80069b8:	fa12 f281 	uxtah	r2, r2, r1
 80069bc:	b291      	uxth	r1, r2
 80069be:	dc1a      	bgt.n	80069f6 <lv_obj_get_scrollbar_area+0x3b2>
           ver_area->y2 = obj->coords.y2 - end_space - hor_req_space - 1;
 80069c0:	8b63      	ldrh	r3, [r4, #26]
 80069c2:	ea6f 0808 	mvn.w	r8, r8
           ver_area->x1 =ver_area->x2 - tickness + 1;
 80069c6:	f1c9 0901 	rsb	r9, r9, #1
           ver_area->y1 = obj->coords.y1 + end_space;
 80069ca:	8071      	strh	r1, [r6, #2]
           ver_area->y2 = obj->coords.y2 - end_space - hor_req_space - 1;
 80069cc:	4498      	add	r8, r3
 80069ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069d0:	eba8 0a03 	sub.w	sl, r8, r3
           ver_area->x2 = obj->coords.x2 - side_space;
 80069d4:	8b23      	ldrh	r3, [r4, #24]
 80069d6:	eba3 0b0b 	sub.w	fp, r3, fp
           ver_area->y2 = obj->coords.y2 - end_space - hor_req_space - 1;
 80069da:	f8a6 a006 	strh.w	sl, [r6, #6]
           ver_area->x2 = obj->coords.x2 - side_space;
 80069de:	fa1f fb8b 	uxth.w	fp, fp
 80069e2:	f8a6 b004 	strh.w	fp, [r6, #4]
           ver_area->x1 =ver_area->x2 - tickness + 1;
 80069e6:	44cb      	add	fp, r9
 80069e8:	f8a6 b000 	strh.w	fp, [r6]
 80069ec:	e6f5      	b.n	80067da <lv_obj_get_scrollbar_area+0x196>
        sb_h = LV_MAX(sb_h, SCROLLBAR_MIN_SIZE);
 80069ee:	2001      	movs	r0, #1
 80069f0:	e7c4      	b.n	800697c <lv_obj_get_scrollbar_area+0x338>
 80069f2:	2301      	movs	r3, #1
 80069f4:	e7d7      	b.n	80069a6 <lv_obj_get_scrollbar_area+0x362>
        rem = (obj_h - end_space * 2 - hor_req_space) - sb_h;  /*Remaining size from the scrollbar track that is not the scrollbar itself*/
 80069f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80069f8:	b29b      	uxth	r3, r3
 80069fa:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80069fc:	eba2 0248 	sub.w	r2, r2, r8, lsl #1
 8006a00:	1a12      	subs	r2, r2, r0
 8006a02:	1ad2      	subs	r2, r2, r3
           ver_area->y2 =ver_area->y1 + sb_h - 1;
 8006a04:	3b01      	subs	r3, #1
        rem = (obj_h - end_space * 2 - hor_req_space) - sb_h;  /*Remaining size from the scrollbar track that is not the scrollbar itself*/
 8006a06:	b290      	uxth	r0, r2
           ver_area->y1 = obj->coords.y1 + sb_y + end_space;
 8006a08:	fa11 f282 	uxtah	r2, r1, r2
            lv_coord_t sb_y = (rem * sb) / scroll_h;
 8006a0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a0e:	fb10 f001 	smulbb	r0, r0, r1
 8006a12:	fb90 f7f7 	sdiv	r7, r0, r7
           ver_area->y1 = obj->coords.y1 + sb_y + end_space;
 8006a16:	1bd7      	subs	r7, r2, r7
 8006a18:	b23a      	sxth	r2, r7
           ver_area->y2 =ver_area->y1 + sb_h - 1;
 8006a1a:	fa13 f787 	uxtah	r7, r3, r7
           ver_area->x2 = obj->coords.x2 - side_space;
 8006a1e:	8b23      	ldrh	r3, [r4, #24]
           ver_area->y1 = obj->coords.y1 + sb_y + end_space;
 8006a20:	8072      	strh	r2, [r6, #2]
           ver_area->x2 = obj->coords.x2 - side_space;
 8006a22:	eba3 0b0b 	sub.w	fp, r3, fp
           ver_area->y2 =ver_area->y1 + sb_h - 1;
 8006a26:	80f7      	strh	r7, [r6, #6]
            if(ver_area->y1 < obj->coords.y1 + end_space) {
 8006a28:	9b03      	ldr	r3, [sp, #12]
 8006a2a:	f9b4 7016 	ldrsh.w	r7, [r4, #22]
           ver_area->x2 = obj->coords.x2 - side_space;
 8006a2e:	fa1f fb8b 	uxth.w	fp, fp
            if(ver_area->y1 < obj->coords.y1 + end_space) {
 8006a32:	18fb      	adds	r3, r7, r3
           ver_area->x2 = obj->coords.x2 - side_space;
 8006a34:	f8a6 b004 	strh.w	fp, [r6, #4]
           ver_area->x1 =ver_area->x2 - tickness;
 8006a38:	ebab 0b09 	sub.w	fp, fp, r9
            if(ver_area->y1 < obj->coords.y1 + end_space) {
 8006a3c:	429a      	cmp	r2, r3
           ver_area->x1 =ver_area->x2 - tickness;
 8006a3e:	f8a6 b000 	strh.w	fp, [r6]
            if(ver_area->y1 < obj->coords.y1 + end_space) {
 8006a42:	da2f      	bge.n	8006aa4 <lv_obj_get_scrollbar_area+0x460>
               ver_area->y1 = obj->coords.y1 + end_space;
 8006a44:	4447      	add	r7, r8
                if(ver_area->y1 + SCROLLBAR_MIN_SIZE >ver_area->y2)ver_area->y2 =ver_area->y1 + SCROLLBAR_MIN_SIZE;
 8006a46:	2000      	movs	r0, #0
               ver_area->y1 = obj->coords.y1 + end_space;
 8006a48:	b23f      	sxth	r7, r7
 8006a4a:	8077      	strh	r7, [r6, #2]
                if(ver_area->y1 + SCROLLBAR_MIN_SIZE >ver_area->y2)ver_area->y2 =ver_area->y1 + SCROLLBAR_MIN_SIZE;
 8006a4c:	f00f ff52 	bl	80168f4 <lv_disp_get_dpi>
 8006a50:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006a54:	0040      	lsls	r0, r0, #1
 8006a56:	28ef      	cmp	r0, #239	; 0xef
 8006a58:	dd68      	ble.n	8006b2c <lv_obj_get_scrollbar_area+0x4e8>
 8006a5a:	2000      	movs	r0, #0
 8006a5c:	f00f ff4a 	bl	80168f4 <lv_disp_get_dpi>
 8006a60:	230a      	movs	r3, #10
 8006a62:	2250      	movs	r2, #80	; 0x50
 8006a64:	fb00 2003 	mla	r0, r0, r3, r2
 8006a68:	23a0      	movs	r3, #160	; 0xa0
 8006a6a:	fb90 f0f3 	sdiv	r0, r0, r3
 8006a6e:	4407      	add	r7, r0
 8006a70:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8006a74:	429f      	cmp	r7, r3
 8006a76:	dd15      	ble.n	8006aa4 <lv_obj_get_scrollbar_area+0x460>
 8006a78:	2000      	movs	r0, #0
 8006a7a:	8877      	ldrh	r7, [r6, #2]
 8006a7c:	f00f ff3a 	bl	80168f4 <lv_disp_get_dpi>
 8006a80:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006a84:	0040      	lsls	r0, r0, #1
 8006a86:	28ef      	cmp	r0, #239	; 0xef
 8006a88:	dd52      	ble.n	8006b30 <lv_obj_get_scrollbar_area+0x4ec>
 8006a8a:	2000      	movs	r0, #0
 8006a8c:	f00f ff32 	bl	80168f4 <lv_disp_get_dpi>
 8006a90:	230a      	movs	r3, #10
 8006a92:	2250      	movs	r2, #80	; 0x50
 8006a94:	fb00 2003 	mla	r0, r0, r3, r2
 8006a98:	23a0      	movs	r3, #160	; 0xa0
 8006a9a:	fb90 f0f3 	sdiv	r0, r0, r3
 8006a9e:	b280      	uxth	r0, r0
 8006aa0:	4407      	add	r7, r0
 8006aa2:	80f7      	strh	r7, [r6, #6]
            if(ver_area->y2 > obj->coords.y2 - hor_req_space - end_space) {
 8006aa4:	f9b4 201a 	ldrsh.w	r2, [r4, #26]
 8006aa8:	9803      	ldr	r0, [sp, #12]
 8006aaa:	eba2 030a 	sub.w	r3, r2, sl
 8006aae:	f9b6 1006 	ldrsh.w	r1, [r6, #6]
 8006ab2:	1a1b      	subs	r3, r3, r0
 8006ab4:	4299      	cmp	r1, r3
 8006ab6:	f77f ae90 	ble.w	80067da <lv_obj_get_scrollbar_area+0x196>
               ver_area->y2 = obj->coords.y2 - hor_req_space - end_space;
 8006aba:	eba2 0808 	sub.w	r8, r2, r8
 8006abe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
                if(ver_area->y2 - SCROLLBAR_MIN_SIZE <ver_area->y1)ver_area->y1 =ver_area->y2 - SCROLLBAR_MIN_SIZE;
 8006ac0:	2000      	movs	r0, #0
               ver_area->y2 = obj->coords.y2 - hor_req_space - end_space;
 8006ac2:	eba8 0a03 	sub.w	sl, r8, r3
 8006ac6:	fa0f fa8a 	sxth.w	sl, sl
 8006aca:	f8a6 a006 	strh.w	sl, [r6, #6]
                if(ver_area->y2 - SCROLLBAR_MIN_SIZE <ver_area->y1)ver_area->y1 =ver_area->y2 - SCROLLBAR_MIN_SIZE;
 8006ace:	f00f ff11 	bl	80168f4 <lv_disp_get_dpi>
 8006ad2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006ad6:	0040      	lsls	r0, r0, #1
 8006ad8:	28ef      	cmp	r0, #239	; 0xef
 8006ada:	dd2b      	ble.n	8006b34 <lv_obj_get_scrollbar_area+0x4f0>
 8006adc:	2000      	movs	r0, #0
 8006ade:	f00f ff09 	bl	80168f4 <lv_disp_get_dpi>
 8006ae2:	230a      	movs	r3, #10
 8006ae4:	2250      	movs	r2, #80	; 0x50
 8006ae6:	fb00 2003 	mla	r0, r0, r3, r2
 8006aea:	23a0      	movs	r3, #160	; 0xa0
 8006aec:	fb90 f0f3 	sdiv	r0, r0, r3
 8006af0:	ebaa 0a00 	sub.w	sl, sl, r0
 8006af4:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8006af8:	459a      	cmp	sl, r3
 8006afa:	f6bf ae6e 	bge.w	80067da <lv_obj_get_scrollbar_area+0x196>
 8006afe:	2000      	movs	r0, #0
 8006b00:	88f7      	ldrh	r7, [r6, #6]
 8006b02:	f00f fef7 	bl	80168f4 <lv_disp_get_dpi>
 8006b06:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006b0a:	0040      	lsls	r0, r0, #1
 8006b0c:	28ef      	cmp	r0, #239	; 0xef
 8006b0e:	dd13      	ble.n	8006b38 <lv_obj_get_scrollbar_area+0x4f4>
 8006b10:	2000      	movs	r0, #0
 8006b12:	f00f feef 	bl	80168f4 <lv_disp_get_dpi>
 8006b16:	230a      	movs	r3, #10
 8006b18:	2250      	movs	r2, #80	; 0x50
 8006b1a:	fb00 2003 	mla	r0, r0, r3, r2
 8006b1e:	23a0      	movs	r3, #160	; 0xa0
 8006b20:	fb90 f0f3 	sdiv	r0, r0, r3
 8006b24:	b280      	uxth	r0, r0
 8006b26:	1a3f      	subs	r7, r7, r0
 8006b28:	8077      	strh	r7, [r6, #2]
 8006b2a:	e656      	b.n	80067da <lv_obj_get_scrollbar_area+0x196>
                if(ver_area->y1 + SCROLLBAR_MIN_SIZE >ver_area->y2)ver_area->y2 =ver_area->y1 + SCROLLBAR_MIN_SIZE;
 8006b2c:	2001      	movs	r0, #1
 8006b2e:	e79e      	b.n	8006a6e <lv_obj_get_scrollbar_area+0x42a>
 8006b30:	2001      	movs	r0, #1
 8006b32:	e7b5      	b.n	8006aa0 <lv_obj_get_scrollbar_area+0x45c>
                if(ver_area->y2 - SCROLLBAR_MIN_SIZE <ver_area->y1)ver_area->y1 =ver_area->y2 - SCROLLBAR_MIN_SIZE;
 8006b34:	2001      	movs	r0, #1
 8006b36:	e7db      	b.n	8006af0 <lv_obj_get_scrollbar_area+0x4ac>
 8006b38:	2001      	movs	r0, #1
 8006b3a:	e7f4      	b.n	8006b26 <lv_obj_get_scrollbar_area+0x4e2>
        sb_w = LV_MAX(sb_w, SCROLLBAR_MIN_SIZE);
 8006b3c:	2001      	movs	r0, #1
 8006b3e:	e68d      	b.n	800685c <lv_obj_get_scrollbar_area+0x218>
 8006b40:	2701      	movs	r7, #1
 8006b42:	e6a1      	b.n	8006888 <lv_obj_get_scrollbar_area+0x244>
        rem = (obj_w - end_space * 2 - ver_reg_space) - sb_w;  /*Remaining size from the scrollbar track that is not the scrollbar itself*/
 8006b44:	9902      	ldr	r1, [sp, #8]
 8006b46:	b2bb      	uxth	r3, r7
            hor_area->x1 = obj->coords.x1 + sb_x + end_space;
 8006b48:	8aa0      	ldrh	r0, [r4, #20]
            hor_area->y2 = obj->coords.y2 - side_space;
 8006b4a:	eba2 0a0a 	sub.w	sl, r2, sl
        rem = (obj_w - end_space * 2 - ver_reg_space) - sb_w;  /*Remaining size from the scrollbar track that is not the scrollbar itself*/
 8006b4e:	eba1 0746 	sub.w	r7, r1, r6, lsl #1
            hor_area->x1 = obj->coords.x1 + sb_x + end_space;
 8006b52:	4430      	add	r0, r6
            hor_area->y2 = obj->coords.y2 - side_space;
 8006b54:	fa1f fa8a 	uxth.w	sl, sl
        rem = (obj_w - end_space * 2 - ver_reg_space) - sb_w;  /*Remaining size from the scrollbar track that is not the scrollbar itself*/
 8006b58:	eba7 070b 	sub.w	r7, r7, fp
            hor_area->y2 = obj->coords.y2 - side_space;
 8006b5c:	f8a5 a006 	strh.w	sl, [r5, #6]
            hor_area->y1 = hor_area->y2 - tickness;
 8006b60:	ebaa 0a08 	sub.w	sl, sl, r8
        rem = (obj_w - end_space * 2 - ver_reg_space) - sb_w;  /*Remaining size from the scrollbar track that is not the scrollbar itself*/
 8006b64:	1aff      	subs	r7, r7, r3
            hor_area->x2 = hor_area->x1 + sb_w - 1;
 8006b66:	3b01      	subs	r3, #1
            hor_area->y1 = hor_area->y2 - tickness;
 8006b68:	f8a5 a002 	strh.w	sl, [r5, #2]
        rem = (obj_w - end_space * 2 - ver_reg_space) - sb_w;  /*Remaining size from the scrollbar track that is not the scrollbar itself*/
 8006b6c:	b2b9      	uxth	r1, r7
            hor_area->x1 = obj->coords.x1 + sb_x + end_space;
 8006b6e:	fa10 f787 	uxtah	r7, r0, r7
            lv_coord_t sb_x = (rem * sr) / scroll_w;
 8006b72:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006b74:	fb11 f100 	smulbb	r1, r1, r0
 8006b78:	fb91 f1f9 	sdiv	r1, r1, r9
            hor_area->x1 = obj->coords.x1 + sb_x + end_space;
 8006b7c:	eba7 0901 	sub.w	r9, r7, r1
 8006b80:	fa0f f189 	sxth.w	r1, r9
            hor_area->x2 = hor_area->x1 + sb_w - 1;
 8006b84:	fa13 f989 	uxtah	r9, r3, r9
            if(hor_area->x1 < obj->coords.x1 + end_space) {
 8006b88:	9b03      	ldr	r3, [sp, #12]
            hor_area->x1 = obj->coords.x1 + sb_x + end_space;
 8006b8a:	8029      	strh	r1, [r5, #0]
            if(hor_area->x1 < obj->coords.x1 + end_space) {
 8006b8c:	f9b4 7014 	ldrsh.w	r7, [r4, #20]
            hor_area->x2 = hor_area->x1 + sb_w - 1;
 8006b90:	f8a5 9004 	strh.w	r9, [r5, #4]
            if(hor_area->x1 < obj->coords.x1 + end_space) {
 8006b94:	18fb      	adds	r3, r7, r3
 8006b96:	4299      	cmp	r1, r3
 8006b98:	da2f      	bge.n	8006bfa <lv_obj_get_scrollbar_area+0x5b6>
                hor_area->x1 = obj->coords.x1 + end_space;
 8006b9a:	4437      	add	r7, r6
                if(hor_area->x1 + SCROLLBAR_MIN_SIZE > hor_area->x2) hor_area->x2 = hor_area->x1 + SCROLLBAR_MIN_SIZE;
 8006b9c:	2000      	movs	r0, #0
                hor_area->x1 = obj->coords.x1 + end_space;
 8006b9e:	b23f      	sxth	r7, r7
 8006ba0:	802f      	strh	r7, [r5, #0]
                if(hor_area->x1 + SCROLLBAR_MIN_SIZE > hor_area->x2) hor_area->x2 = hor_area->x1 + SCROLLBAR_MIN_SIZE;
 8006ba2:	f00f fea7 	bl	80168f4 <lv_disp_get_dpi>
 8006ba6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006baa:	0040      	lsls	r0, r0, #1
 8006bac:	28ef      	cmp	r0, #239	; 0xef
 8006bae:	dd66      	ble.n	8006c7e <lv_obj_get_scrollbar_area+0x63a>
 8006bb0:	2000      	movs	r0, #0
 8006bb2:	f00f fe9f 	bl	80168f4 <lv_disp_get_dpi>
 8006bb6:	230a      	movs	r3, #10
 8006bb8:	2250      	movs	r2, #80	; 0x50
 8006bba:	fb00 2003 	mla	r0, r0, r3, r2
 8006bbe:	23a0      	movs	r3, #160	; 0xa0
 8006bc0:	fb90 f0f3 	sdiv	r0, r0, r3
 8006bc4:	4407      	add	r7, r0
 8006bc6:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8006bca:	429f      	cmp	r7, r3
 8006bcc:	dd15      	ble.n	8006bfa <lv_obj_get_scrollbar_area+0x5b6>
 8006bce:	2000      	movs	r0, #0
 8006bd0:	882f      	ldrh	r7, [r5, #0]
 8006bd2:	f00f fe8f 	bl	80168f4 <lv_disp_get_dpi>
 8006bd6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006bda:	0040      	lsls	r0, r0, #1
 8006bdc:	28ef      	cmp	r0, #239	; 0xef
 8006bde:	dd50      	ble.n	8006c82 <lv_obj_get_scrollbar_area+0x63e>
 8006be0:	2000      	movs	r0, #0
 8006be2:	f00f fe87 	bl	80168f4 <lv_disp_get_dpi>
 8006be6:	230a      	movs	r3, #10
 8006be8:	2250      	movs	r2, #80	; 0x50
 8006bea:	fb00 2003 	mla	r0, r0, r3, r2
 8006bee:	23a0      	movs	r3, #160	; 0xa0
 8006bf0:	fb90 f0f3 	sdiv	r0, r0, r3
 8006bf4:	b280      	uxth	r0, r0
 8006bf6:	4438      	add	r0, r7
 8006bf8:	80a8      	strh	r0, [r5, #4]
            if(hor_area->x2 > obj->coords.x2 - ver_reg_space - end_space) {
 8006bfa:	f9b4 0018 	ldrsh.w	r0, [r4, #24]
 8006bfe:	9b05      	ldr	r3, [sp, #20]
 8006c00:	9903      	ldr	r1, [sp, #12]
 8006c02:	1ac3      	subs	r3, r0, r3
 8006c04:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8006c08:	1a5b      	subs	r3, r3, r1
 8006c0a:	429a      	cmp	r2, r3
 8006c0c:	f77f ad7f 	ble.w	800670e <lv_obj_get_scrollbar_area+0xca>
                hor_area->x2 = obj->coords.x2 - ver_reg_space - end_space;
 8006c10:	1b86      	subs	r6, r0, r6
                if(hor_area->x2 - SCROLLBAR_MIN_SIZE < hor_area->x1) hor_area->x1 = hor_area->x2 - SCROLLBAR_MIN_SIZE;
 8006c12:	2000      	movs	r0, #0
                hor_area->x2 = obj->coords.x2 - ver_reg_space - end_space;
 8006c14:	eba6 0b0b 	sub.w	fp, r6, fp
 8006c18:	fa0f fb8b 	sxth.w	fp, fp
 8006c1c:	f8a5 b004 	strh.w	fp, [r5, #4]
                if(hor_area->x2 - SCROLLBAR_MIN_SIZE < hor_area->x1) hor_area->x1 = hor_area->x2 - SCROLLBAR_MIN_SIZE;
 8006c20:	f00f fe68 	bl	80168f4 <lv_disp_get_dpi>
 8006c24:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006c28:	0040      	lsls	r0, r0, #1
 8006c2a:	28ef      	cmp	r0, #239	; 0xef
 8006c2c:	dd2b      	ble.n	8006c86 <lv_obj_get_scrollbar_area+0x642>
 8006c2e:	2000      	movs	r0, #0
 8006c30:	f00f fe60 	bl	80168f4 <lv_disp_get_dpi>
 8006c34:	230a      	movs	r3, #10
 8006c36:	2250      	movs	r2, #80	; 0x50
 8006c38:	fb00 2003 	mla	r0, r0, r3, r2
 8006c3c:	23a0      	movs	r3, #160	; 0xa0
 8006c3e:	fb90 f0f3 	sdiv	r0, r0, r3
 8006c42:	ebab 0b00 	sub.w	fp, fp, r0
 8006c46:	f9b5 3000 	ldrsh.w	r3, [r5]
 8006c4a:	459b      	cmp	fp, r3
 8006c4c:	f6bf ad5f 	bge.w	800670e <lv_obj_get_scrollbar_area+0xca>
 8006c50:	2000      	movs	r0, #0
 8006c52:	88ac      	ldrh	r4, [r5, #4]
 8006c54:	f00f fe4e 	bl	80168f4 <lv_disp_get_dpi>
 8006c58:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006c5c:	0040      	lsls	r0, r0, #1
 8006c5e:	28ef      	cmp	r0, #239	; 0xef
 8006c60:	dd13      	ble.n	8006c8a <lv_obj_get_scrollbar_area+0x646>
 8006c62:	2000      	movs	r0, #0
 8006c64:	f00f fe46 	bl	80168f4 <lv_disp_get_dpi>
 8006c68:	230a      	movs	r3, #10
 8006c6a:	2250      	movs	r2, #80	; 0x50
 8006c6c:	fb00 2003 	mla	r0, r0, r3, r2
 8006c70:	23a0      	movs	r3, #160	; 0xa0
 8006c72:	fb90 f0f3 	sdiv	r0, r0, r3
 8006c76:	b280      	uxth	r0, r0
 8006c78:	1a20      	subs	r0, r4, r0
 8006c7a:	8028      	strh	r0, [r5, #0]
 8006c7c:	e547      	b.n	800670e <lv_obj_get_scrollbar_area+0xca>
                if(hor_area->x1 + SCROLLBAR_MIN_SIZE > hor_area->x2) hor_area->x2 = hor_area->x1 + SCROLLBAR_MIN_SIZE;
 8006c7e:	2001      	movs	r0, #1
 8006c80:	e7a0      	b.n	8006bc4 <lv_obj_get_scrollbar_area+0x580>
 8006c82:	2001      	movs	r0, #1
 8006c84:	e7b7      	b.n	8006bf6 <lv_obj_get_scrollbar_area+0x5b2>
                if(hor_area->x2 - SCROLLBAR_MIN_SIZE < hor_area->x1) hor_area->x1 = hor_area->x2 - SCROLLBAR_MIN_SIZE;
 8006c86:	2001      	movs	r0, #1
 8006c88:	e7db      	b.n	8006c42 <lv_obj_get_scrollbar_area+0x5fe>
 8006c8a:	2001      	movs	r0, #1
 8006c8c:	e7f4      	b.n	8006c78 <lv_obj_get_scrollbar_area+0x634>

08006c8e <lv_obj_scrollbar_invalidate>:
{
 8006c8e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    lv_obj_get_scrollbar_area(obj, &hor_area, &ver_area);
 8006c90:	aa02      	add	r2, sp, #8
 8006c92:	4669      	mov	r1, sp
{
 8006c94:	4604      	mov	r4, r0
    lv_obj_get_scrollbar_area(obj, &hor_area, &ver_area);
 8006c96:	f7ff fcd5 	bl	8006644 <lv_obj_get_scrollbar_area>
    if(lv_area_get_size(&hor_area) <= 0 && lv_area_get_size(&ver_area) <= 0) return;
 8006c9a:	4668      	mov	r0, sp
 8006c9c:	f010 f8cd 	bl	8016e3a <lv_area_get_size>
 8006ca0:	b918      	cbnz	r0, 8006caa <lv_obj_scrollbar_invalidate+0x1c>
 8006ca2:	a802      	add	r0, sp, #8
 8006ca4:	f010 f8c9 	bl	8016e3a <lv_area_get_size>
 8006ca8:	b178      	cbz	r0, 8006cca <lv_obj_scrollbar_invalidate+0x3c>
    if(lv_area_get_size(&hor_area) > 0) lv_obj_invalidate_area(obj, &hor_area);
 8006caa:	4668      	mov	r0, sp
 8006cac:	f010 f8c5 	bl	8016e3a <lv_area_get_size>
 8006cb0:	b118      	cbz	r0, 8006cba <lv_obj_scrollbar_invalidate+0x2c>
 8006cb2:	4669      	mov	r1, sp
 8006cb4:	4620      	mov	r0, r4
 8006cb6:	f7fe fa15 	bl	80050e4 <lv_obj_invalidate_area>
    if(lv_area_get_size(&ver_area) > 0) lv_obj_invalidate_area(obj, &ver_area);
 8006cba:	a802      	add	r0, sp, #8
 8006cbc:	f010 f8bd 	bl	8016e3a <lv_area_get_size>
 8006cc0:	b118      	cbz	r0, 8006cca <lv_obj_scrollbar_invalidate+0x3c>
 8006cc2:	a902      	add	r1, sp, #8
 8006cc4:	4620      	mov	r0, r4
 8006cc6:	f7fe fa0d 	bl	80050e4 <lv_obj_invalidate_area>
}
 8006cca:	b004      	add	sp, #16
 8006ccc:	bd10      	pop	{r4, pc}
	...

08006cd0 <trans_del>:
 * @param part a part of object or 0xFF to remove from all parts
 * @param prop a property or 0xFF to remove all properties
 * @param tr_limit delete transitions only "older" than this. `NULL` if not used
 */
static bool trans_del(lv_obj_t * obj, lv_part_t part, lv_style_prop_t prop, trans_t * tr_limit)
{
 8006cd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cd4:	4607      	mov	r7, r0
    trans_t * tr;
    trans_t * tr_prev;
    bool removed = false;
    tr = _lv_ll_get_tail(&LV_GC_ROOT(_lv_obj_style_trans_ll));
 8006cd6:	4829      	ldr	r0, [pc, #164]	; (8006d7c <trans_del+0xac>)
{
 8006cd8:	4690      	mov	r8, r2
 8006cda:	460d      	mov	r5, r1
 8006cdc:	4699      	mov	r9, r3
    while(tr != NULL) {
        if(tr == tr_limit) break;

        /*'tr' might be deleted, so get the next object while 'tr' is valid*/
        tr_prev = _lv_ll_get_prev(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
 8006cde:	f8df b09c 	ldr.w	fp, [pc, #156]	; 8006d7c <trans_del+0xac>
    tr = _lv_ll_get_tail(&LV_GC_ROOT(_lv_obj_style_trans_ll));
 8006ce2:	f010 fc27 	bl	8017534 <_lv_ll_get_tail>
    bool removed = false;
 8006ce6:	2200      	movs	r2, #0
    tr = _lv_ll_get_tail(&LV_GC_ROOT(_lv_obj_style_trans_ll));
 8006ce8:	4604      	mov	r4, r0
    while(tr != NULL) {
 8006cea:	b91c      	cbnz	r4, 8006cf4 <trans_del+0x24>

        }
        tr = tr_prev;
    }
    return removed;
}
 8006cec:	4610      	mov	r0, r2
 8006cee:	b003      	add	sp, #12
 8006cf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(tr == tr_limit) break;
 8006cf4:	454c      	cmp	r4, r9
 8006cf6:	d0f9      	beq.n	8006cec <trans_del+0x1c>
        tr_prev = _lv_ll_get_prev(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
 8006cf8:	4621      	mov	r1, r4
 8006cfa:	4658      	mov	r0, fp
 8006cfc:	9201      	str	r2, [sp, #4]
 8006cfe:	f010 fc20 	bl	8017542 <_lv_ll_get_prev>
        if(tr->obj == obj && (part == tr->selector || part == LV_PART_ANY) && (prop == tr->prop || prop == LV_STYLE_PROP_ANY)) {
 8006d02:	6823      	ldr	r3, [r4, #0]
        tr_prev = _lv_ll_get_prev(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
 8006d04:	4682      	mov	sl, r0
        if(tr->obj == obj && (part == tr->selector || part == LV_PART_ANY) && (prop == tr->prop || prop == LV_STYLE_PROP_ANY)) {
 8006d06:	9a01      	ldr	r2, [sp, #4]
 8006d08:	42bb      	cmp	r3, r7
 8006d0a:	d135      	bne.n	8006d78 <trans_del+0xa8>
 8006d0c:	68a3      	ldr	r3, [r4, #8]
 8006d0e:	42ab      	cmp	r3, r5
 8006d10:	d002      	beq.n	8006d18 <trans_del+0x48>
 8006d12:	f5b5 2f70 	cmp.w	r5, #983040	; 0xf0000
 8006d16:	d12f      	bne.n	8006d78 <trans_del+0xa8>
 8006d18:	88a3      	ldrh	r3, [r4, #4]
 8006d1a:	4543      	cmp	r3, r8
 8006d1c:	d003      	beq.n	8006d26 <trans_del+0x56>
 8006d1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006d22:	4598      	cmp	r8, r3
 8006d24:	d128      	bne.n	8006d78 <trans_del+0xa8>
 8006d26:	2600      	movs	r6, #0
 8006d28:	e021      	b.n	8006d6e <trans_del+0x9e>
                if(obj->styles[i].is_trans && (part == LV_PART_ANY || obj->styles[i].selector == part)) {
 8006d2a:	68f8      	ldr	r0, [r7, #12]
 8006d2c:	ea4f 0cc6 	mov.w	ip, r6, lsl #3
 8006d30:	eb00 03c6 	add.w	r3, r0, r6, lsl #3
 8006d34:	79d9      	ldrb	r1, [r3, #7]
 8006d36:	0789      	lsls	r1, r1, #30
 8006d38:	d518      	bpl.n	8006d6c <trans_del+0x9c>
 8006d3a:	f5b5 2f70 	cmp.w	r5, #983040	; 0xf0000
 8006d3e:	d004      	beq.n	8006d4a <trans_del+0x7a>
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8006d46:	42ab      	cmp	r3, r5
 8006d48:	d110      	bne.n	8006d6c <trans_del+0x9c>
                    lv_style_remove_prop(obj->styles[i].style, tr->prop);
 8006d4a:	f850 000c 	ldr.w	r0, [r0, ip]
 8006d4e:	88a1      	ldrh	r1, [r4, #4]
 8006d50:	f011 fb26 	bl	80183a0 <lv_style_remove_prop>
                    lv_anim_del(tr, NULL);
 8006d54:	2100      	movs	r1, #0
 8006d56:	4620      	mov	r0, r4
 8006d58:	f00f ff8a 	bl	8016c70 <lv_anim_del>
                    _lv_ll_remove(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
 8006d5c:	4621      	mov	r1, r4
 8006d5e:	4658      	mov	r0, fp
 8006d60:	f010 fbaa 	bl	80174b8 <_lv_ll_remove>
                    lv_mem_free(tr);
 8006d64:	4620      	mov	r0, r4
 8006d66:	f010 fce5 	bl	8017734 <lv_mem_free>
                    removed = true;
 8006d6a:	2201      	movs	r2, #1
            for(i = 0; i < obj->style_cnt; i++) {
 8006d6c:	3601      	adds	r6, #1
 8006d6e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006d70:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 8006d74:	42b3      	cmp	r3, r6
 8006d76:	d8d8      	bhi.n	8006d2a <trans_del+0x5a>
 8006d78:	4654      	mov	r4, sl
 8006d7a:	e7b6      	b.n	8006cea <trans_del+0x1a>
 8006d7c:	2000ae14 	.word	0x2000ae14

08006d80 <refresh_children_style>:
{
 8006d80:	b570      	push	{r4, r5, r6, lr}
 8006d82:	4606      	mov	r6, r0
    for(i = 0; i < lv_obj_get_child_cnt(obj); i++) {
 8006d84:	2500      	movs	r5, #0
 8006d86:	4630      	mov	r0, r6
 8006d88:	f000 fe4a 	bl	8007a20 <lv_obj_get_child_cnt>
 8006d8c:	42a8      	cmp	r0, r5
 8006d8e:	d800      	bhi.n	8006d92 <refresh_children_style+0x12>
}
 8006d90:	bd70      	pop	{r4, r5, r6, pc}
        lv_obj_t * child = lv_obj_get_child(obj, i);
 8006d92:	4629      	mov	r1, r5
 8006d94:	4630      	mov	r0, r6
 8006d96:	f000 fe34 	bl	8007a02 <lv_obj_get_child>
 8006d9a:	4604      	mov	r4, r0
        lv_obj_invalidate(child);
 8006d9c:	f7fe f9bc 	bl	8005118 <lv_obj_invalidate>
        lv_event_send(child, LV_EVENT_STYLE_CHANGED, NULL);
 8006da0:	2200      	movs	r2, #0
 8006da2:	2124      	movs	r1, #36	; 0x24
 8006da4:	4620      	mov	r0, r4
 8006da6:	f7fb f88f 	bl	8001ec8 <lv_event_send>
        lv_obj_invalidate(child);
 8006daa:	4620      	mov	r0, r4
 8006dac:	f7fe f9b4 	bl	8005118 <lv_obj_invalidate>
        refresh_children_style(child); /*Check children too*/
 8006db0:	4620      	mov	r0, r4
    for(i = 0; i < lv_obj_get_child_cnt(obj); i++) {
 8006db2:	3501      	adds	r5, #1
        refresh_children_style(child); /*Check children too*/
 8006db4:	f7ff ffe4 	bl	8006d80 <refresh_children_style>
    for(i = 0; i < lv_obj_get_child_cnt(obj); i++) {
 8006db8:	e7e5      	b.n	8006d86 <refresh_children_style+0x6>

08006dba <get_trans_style>:
{
 8006dba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    for(i = 0; i < obj->style_cnt; i++) {
 8006dbc:	8c43      	ldrh	r3, [r0, #34]	; 0x22
{
 8006dbe:	4604      	mov	r4, r0
 8006dc0:	460d      	mov	r5, r1
 8006dc2:	68c0      	ldr	r0, [r0, #12]
    for(i = 0; i < obj->style_cnt; i++) {
 8006dc4:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 8006dc8:	2200      	movs	r2, #0
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d803      	bhi.n	8006dd6 <get_trans_style+0x1c>
    if(i != obj->style_cnt) return &obj->styles[i];
 8006dce:	d00e      	beq.n	8006dee <get_trans_style+0x34>
 8006dd0:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
}
 8006dd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if(obj->styles[i].is_trans && obj->styles[i].selector == selector) break;
 8006dd6:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 8006dda:	79ce      	ldrb	r6, [r1, #7]
 8006ddc:	07b6      	lsls	r6, r6, #30
 8006dde:	d504      	bpl.n	8006dea <get_trans_style+0x30>
 8006de0:	6849      	ldr	r1, [r1, #4]
 8006de2:	f3c1 0117 	ubfx	r1, r1, #0, #24
 8006de6:	42a9      	cmp	r1, r5
 8006de8:	d0f2      	beq.n	8006dd0 <get_trans_style+0x16>
    for(i = 0; i < obj->style_cnt; i++) {
 8006dea:	3201      	adds	r2, #1
 8006dec:	e7ed      	b.n	8006dca <get_trans_style+0x10>
    obj->style_cnt++;
 8006dee:	3301      	adds	r3, #1
 8006df0:	8c62      	ldrh	r2, [r4, #34]	; 0x22
 8006df2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006df6:	f363 02c8 	bfi	r2, r3, #3, #6
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 8006dfa:	00d9      	lsls	r1, r3, #3
    obj->style_cnt++;
 8006dfc:	8462      	strh	r2, [r4, #34]	; 0x22
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 8006dfe:	f010 fe31 	bl	8017a64 <lv_mem_realloc>
    for(i = obj->style_cnt - 1; i > 0 ; i--) {
 8006e02:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 8006e04:	4602      	mov	r2, r0
        obj->styles[i] = obj->styles[i - 1];
 8006e06:	f1a0 0708 	sub.w	r7, r0, #8
 8006e0a:	f3c3 03c5 	ubfx	r3, r3, #3, #6
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 8006e0e:	60e0      	str	r0, [r4, #12]
    for(i = obj->style_cnt - 1; i > 0 ; i--) {
 8006e10:	3b01      	subs	r3, #1
 8006e12:	d116      	bne.n	8006e42 <get_trans_style+0x88>
    lv_memset_00(&obj->styles[0], sizeof(_lv_obj_style_t));
 8006e14:	4610      	mov	r0, r2
 8006e16:	2108      	movs	r1, #8
 8006e18:	f010 fe8c 	bl	8017b34 <lv_memset_00>
    obj->styles[0].style = lv_mem_alloc(sizeof(lv_style_t));
 8006e1c:	2008      	movs	r0, #8
 8006e1e:	68e6      	ldr	r6, [r4, #12]
 8006e20:	f010 fe0a 	bl	8017a38 <lv_mem_alloc>
    lv_style_init(obj->styles[0].style);
 8006e24:	68e3      	ldr	r3, [r4, #12]
    obj->styles[0].style = lv_mem_alloc(sizeof(lv_style_t));
 8006e26:	6030      	str	r0, [r6, #0]
    lv_style_init(obj->styles[0].style);
 8006e28:	6818      	ldr	r0, [r3, #0]
 8006e2a:	f011 fa9a 	bl	8018362 <lv_style_init>
    obj->styles[0].is_trans = 1;
 8006e2e:	68e0      	ldr	r0, [r4, #12]
 8006e30:	79c3      	ldrb	r3, [r0, #7]
 8006e32:	f043 0302 	orr.w	r3, r3, #2
 8006e36:	71c3      	strb	r3, [r0, #7]
    obj->styles[0].selector = selector;
 8006e38:	6843      	ldr	r3, [r0, #4]
 8006e3a:	f365 0317 	bfi	r3, r5, #0, #24
 8006e3e:	6043      	str	r3, [r0, #4]
    return &obj->styles[0];
 8006e40:	e7c8      	b.n	8006dd4 <get_trans_style+0x1a>
        obj->styles[i] = obj->styles[i - 1];
 8006e42:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
 8006e46:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8006e4a:	c903      	ldmia	r1, {r0, r1}
 8006e4c:	e886 0003 	stmia.w	r6, {r0, r1}
    for(i = obj->style_cnt - 1; i > 0 ; i--) {
 8006e50:	e7de      	b.n	8006e10 <get_trans_style+0x56>
	...

08006e54 <_lv_obj_style_init>:
    _lv_ll_init(&LV_GC_ROOT(_lv_obj_style_trans_ll), sizeof(trans_t));
 8006e54:	2114      	movs	r1, #20
 8006e56:	4801      	ldr	r0, [pc, #4]	; (8006e5c <_lv_obj_style_init+0x8>)
 8006e58:	f010 baef 	b.w	801743a <_lv_ll_init>
 8006e5c:	2000ae14 	.word	0x2000ae14

08006e60 <lv_obj_refresh_style>:
    if(!style_refr) return;
 8006e60:	4b29      	ldr	r3, [pc, #164]	; (8006f08 <lv_obj_refresh_style+0xa8>)
 8006e62:	781b      	ldrb	r3, [r3, #0]
{
 8006e64:	b570      	push	{r4, r5, r6, lr}
 8006e66:	4606      	mov	r6, r0
 8006e68:	460c      	mov	r4, r1
 8006e6a:	4615      	mov	r5, r2
    if(!style_refr) return;
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d049      	beq.n	8006f04 <lv_obj_refresh_style+0xa4>
    return selector & 0xFF0000;
 8006e70:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
    lv_obj_invalidate(obj);
 8006e74:	f7fe f950 	bl	8005118 <lv_obj_invalidate>
    if((part == LV_PART_ANY || part == LV_PART_MAIN) && (prop == LV_STYLE_PROP_ANY || (prop & LV_STYLE_PROP_LAYOUT_REFR))) {
 8006e78:	f5b4 2f70 	cmp.w	r4, #983040	; 0xf0000
 8006e7c:	d000      	beq.n	8006e80 <lv_obj_refresh_style+0x20>
 8006e7e:	b9ec      	cbnz	r4, 8006ebc <lv_obj_refresh_style+0x5c>
 8006e80:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006e84:	429d      	cmp	r5, r3
 8006e86:	d001      	beq.n	8006e8c <lv_obj_refresh_style+0x2c>
 8006e88:	04e8      	lsls	r0, r5, #19
 8006e8a:	d51f      	bpl.n	8006ecc <lv_obj_refresh_style+0x6c>
        lv_event_send(obj, LV_EVENT_STYLE_CHANGED, NULL);
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	2124      	movs	r1, #36	; 0x24
 8006e90:	4630      	mov	r0, r6
 8006e92:	f7fb f819 	bl	8001ec8 <lv_event_send>
        lv_obj_mark_layout_as_dirty(obj);
 8006e96:	4630      	mov	r0, r6
 8006e98:	f7fd ff53 	bl	8004d42 <lv_obj_mark_layout_as_dirty>
    if((part == LV_PART_ANY || part == LV_PART_MAIN) && (prop == LV_STYLE_PROP_ANY || (prop & LV_STYLE_PROP_PARENT_LAYOUT_REFR))) {
 8006e9c:	f5b4 2f70 	cmp.w	r4, #983040	; 0xf0000
 8006ea0:	d10a      	bne.n	8006eb8 <lv_obj_refresh_style+0x58>
 8006ea2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006ea6:	429d      	cmp	r5, r3
 8006ea8:	d114      	bne.n	8006ed4 <lv_obj_refresh_style+0x74>
        lv_obj_t * parent = lv_obj_get_parent(obj);
 8006eaa:	4630      	mov	r0, r6
 8006eac:	f000 fda6 	bl	80079fc <lv_obj_get_parent>
        if(parent) lv_obj_mark_layout_as_dirty(parent);
 8006eb0:	b120      	cbz	r0, 8006ebc <lv_obj_refresh_style+0x5c>
 8006eb2:	f7fd ff46 	bl	8004d42 <lv_obj_mark_layout_as_dirty>
 8006eb6:	e001      	b.n	8006ebc <lv_obj_refresh_style+0x5c>
    if((part == LV_PART_ANY || part == LV_PART_MAIN) && (prop == LV_STYLE_PROP_ANY || (prop & LV_STYLE_PROP_PARENT_LAYOUT_REFR))) {
 8006eb8:	2c00      	cmp	r4, #0
 8006eba:	d0f2      	beq.n	8006ea2 <lv_obj_refresh_style+0x42>
    if(prop == LV_STYLE_PROP_ANY || (prop & LV_STYLE_PROP_EXT_DRAW)) {
 8006ebc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006ec0:	429d      	cmp	r5, r3
 8006ec2:	d109      	bne.n	8006ed8 <lv_obj_refresh_style+0x78>
        lv_obj_refresh_ext_draw_size(obj);
 8006ec4:	4630      	mov	r0, r6
 8006ec6:	f7fd fe3c 	bl	8004b42 <lv_obj_refresh_ext_draw_size>
 8006eca:	e007      	b.n	8006edc <lv_obj_refresh_style+0x7c>
    if((part == LV_PART_ANY || part == LV_PART_MAIN) && (prop == LV_STYLE_PROP_ANY || (prop & LV_STYLE_PROP_PARENT_LAYOUT_REFR))) {
 8006ecc:	f5b4 2f70 	cmp.w	r4, #983040	; 0xf0000
 8006ed0:	d000      	beq.n	8006ed4 <lv_obj_refresh_style+0x74>
 8006ed2:	b90c      	cbnz	r4, 8006ed8 <lv_obj_refresh_style+0x78>
 8006ed4:	04a9      	lsls	r1, r5, #18
 8006ed6:	d4e8      	bmi.n	8006eaa <lv_obj_refresh_style+0x4a>
    if(prop == LV_STYLE_PROP_ANY || (prop & LV_STYLE_PROP_EXT_DRAW)) {
 8006ed8:	052a      	lsls	r2, r5, #20
 8006eda:	d4f3      	bmi.n	8006ec4 <lv_obj_refresh_style+0x64>
    lv_obj_invalidate(obj);
 8006edc:	4630      	mov	r0, r6
 8006ede:	f7fe f91b 	bl	8005118 <lv_obj_invalidate>
    if(prop == LV_STYLE_PROP_ANY ||
 8006ee2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006ee6:	429d      	cmp	r5, r3
 8006ee8:	d004      	beq.n	8006ef4 <lv_obj_refresh_style+0x94>
 8006eea:	056b      	lsls	r3, r5, #21
 8006eec:	d50a      	bpl.n	8006f04 <lv_obj_refresh_style+0xa4>
      ((prop & LV_STYLE_PROP_INHERIT) && ((prop & LV_STYLE_PROP_EXT_DRAW) || (prop & LV_STYLE_PROP_LAYOUT_REFR))))
 8006eee:	f415 5fc0 	tst.w	r5, #6144	; 0x1800
 8006ef2:	d007      	beq.n	8006f04 <lv_obj_refresh_style+0xa4>
        if(part != LV_PART_SCROLLBAR) {
 8006ef4:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 8006ef8:	d004      	beq.n	8006f04 <lv_obj_refresh_style+0xa4>
            refresh_children_style(obj);
 8006efa:	4630      	mov	r0, r6
}
 8006efc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            refresh_children_style(obj);
 8006f00:	f7ff bf3e 	b.w	8006d80 <refresh_children_style>
}
 8006f04:	bd70      	pop	{r4, r5, r6, pc}
 8006f06:	bf00      	nop
 8006f08:	20000004 	.word	0x20000004

08006f0c <lv_obj_add_style>:
{
 8006f0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f10:	4615      	mov	r5, r2
 8006f12:	4604      	mov	r4, r0
    trans_del(obj, selector, LV_STYLE_PROP_ANY, NULL);
 8006f14:	2300      	movs	r3, #0
{
 8006f16:	460e      	mov	r6, r1
    trans_del(obj, selector, LV_STYLE_PROP_ANY, NULL);
 8006f18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006f1c:	4629      	mov	r1, r5
 8006f1e:	f7ff fed7 	bl	8006cd0 <trans_del>
    for(i = 0; i < obj->style_cnt; i++) {
 8006f22:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8006f24:	68e0      	ldr	r0, [r4, #12]
 8006f26:	2700      	movs	r7, #0
 8006f28:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 8006f2c:	42bb      	cmp	r3, r7
 8006f2e:	ea4f 08c7 	mov.w	r8, r7, lsl #3
 8006f32:	d829      	bhi.n	8006f88 <lv_obj_add_style+0x7c>
    obj->style_cnt++;
 8006f34:	3301      	adds	r3, #1
 8006f36:	8c62      	ldrh	r2, [r4, #34]	; 0x22
 8006f38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f3c:	f363 02c8 	bfi	r2, r3, #3, #6
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 8006f40:	00d9      	lsls	r1, r3, #3
    obj->style_cnt++;
 8006f42:	8462      	strh	r2, [r4, #34]	; 0x22
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 8006f44:	f010 fd8e 	bl	8017a64 <lv_mem_realloc>
    for(j = obj->style_cnt - 1; j > i ; j--) {
 8006f48:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 8006f4a:	4602      	mov	r2, r0
        obj->styles[j] = obj->styles[j - 1];
 8006f4c:	f1a0 0e08 	sub.w	lr, r0, #8
    for(j = obj->style_cnt - 1; j > i ; j--) {
 8006f50:	f3c3 03c5 	ubfx	r3, r3, #3, #6
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 8006f54:	60e0      	str	r0, [r4, #12]
    for(j = obj->style_cnt - 1; j > i ; j--) {
 8006f56:	3b01      	subs	r3, #1
 8006f58:	429f      	cmp	r7, r3
 8006f5a:	d31c      	bcc.n	8006f96 <lv_obj_add_style+0x8a>
    lv_memset_00(&obj->styles[i], sizeof(_lv_obj_style_t));
 8006f5c:	eb02 0008 	add.w	r0, r2, r8
 8006f60:	2108      	movs	r1, #8
 8006f62:	f010 fde7 	bl	8017b34 <lv_memset_00>
    obj->styles[i].style = style;
 8006f66:	68e2      	ldr	r2, [r4, #12]
    lv_obj_refresh_style(obj, selector, LV_STYLE_PROP_ANY);
 8006f68:	4629      	mov	r1, r5
 8006f6a:	4620      	mov	r0, r4
    obj->styles[i].style = style;
 8006f6c:	eb02 0308 	add.w	r3, r2, r8
 8006f70:	f842 6008 	str.w	r6, [r2, r8]
    obj->styles[i].selector = selector;
 8006f74:	685a      	ldr	r2, [r3, #4]
 8006f76:	f365 0217 	bfi	r2, r5, #0, #24
 8006f7a:	605a      	str	r2, [r3, #4]
    lv_obj_refresh_style(obj, selector, LV_STYLE_PROP_ANY);
 8006f7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
}
 8006f80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    lv_obj_refresh_style(obj, selector, LV_STYLE_PROP_ANY);
 8006f84:	f7ff bf6c 	b.w	8006e60 <lv_obj_refresh_style>
        if(obj->styles[i].is_trans) continue;
 8006f88:	eb00 0208 	add.w	r2, r0, r8
        if(obj->styles[i].is_local) continue;
 8006f8c:	79d2      	ldrb	r2, [r2, #7]
 8006f8e:	0792      	lsls	r2, r2, #30
 8006f90:	d0d0      	beq.n	8006f34 <lv_obj_add_style+0x28>
    for(i = 0; i < obj->style_cnt; i++) {
 8006f92:	3701      	adds	r7, #1
 8006f94:	e7ca      	b.n	8006f2c <lv_obj_add_style+0x20>
        obj->styles[j] = obj->styles[j - 1];
 8006f96:	eb0e 01c3 	add.w	r1, lr, r3, lsl #3
 8006f9a:	eb02 0cc3 	add.w	ip, r2, r3, lsl #3
    for(j = obj->style_cnt - 1; j > i ; j--) {
 8006f9e:	3b01      	subs	r3, #1
        obj->styles[j] = obj->styles[j - 1];
 8006fa0:	c903      	ldmia	r1, {r0, r1}
 8006fa2:	e88c 0003 	stmia.w	ip, {r0, r1}
    for(j = obj->style_cnt - 1; j > i ; j--) {
 8006fa6:	e7d7      	b.n	8006f58 <lv_obj_add_style+0x4c>

08006fa8 <report_style_change_core>:
    for(i = 0; i < obj->style_cnt; i++) {
 8006fa8:	8c4a      	ldrh	r2, [r1, #34]	; 0x22
 8006faa:	2300      	movs	r3, #0
{
 8006fac:	b570      	push	{r4, r5, r6, lr}
    for(i = 0; i < obj->style_cnt; i++) {
 8006fae:	f3c2 02c5 	ubfx	r2, r2, #3, #6
{
 8006fb2:	4605      	mov	r5, r0
 8006fb4:	460c      	mov	r4, r1
    for(i = 0; i < obj->style_cnt; i++) {
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	d90c      	bls.n	8006fd4 <report_style_change_core+0x2c>
        if(style == NULL || obj->styles[i].style == style) {
 8006fba:	b125      	cbz	r5, 8006fc6 <report_style_change_core+0x1e>
 8006fbc:	68e1      	ldr	r1, [r4, #12]
 8006fbe:	f851 1033 	ldr.w	r1, [r1, r3, lsl #3]
 8006fc2:	42a9      	cmp	r1, r5
 8006fc4:	d10d      	bne.n	8006fe2 <report_style_change_core+0x3a>
            lv_obj_refresh_style(obj, LV_PART_ANY, LV_STYLE_PROP_ANY);
 8006fc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006fca:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8006fce:	4620      	mov	r0, r4
 8006fd0:	f7ff ff46 	bl	8006e60 <lv_obj_refresh_style>
    for(i = 0; i < obj->style_cnt; i++) {
 8006fd4:	2600      	movs	r6, #0
    for(i = 0; i < lv_obj_get_child_cnt(obj); i++) {
 8006fd6:	4620      	mov	r0, r4
 8006fd8:	f000 fd22 	bl	8007a20 <lv_obj_get_child_cnt>
 8006fdc:	42b0      	cmp	r0, r6
 8006fde:	d802      	bhi.n	8006fe6 <report_style_change_core+0x3e>
}
 8006fe0:	bd70      	pop	{r4, r5, r6, pc}
    for(i = 0; i < obj->style_cnt; i++) {
 8006fe2:	3301      	adds	r3, #1
 8006fe4:	e7e7      	b.n	8006fb6 <report_style_change_core+0xe>
        report_style_change_core(style, lv_obj_get_child(obj, i));
 8006fe6:	4631      	mov	r1, r6
 8006fe8:	4620      	mov	r0, r4
 8006fea:	f000 fd0a 	bl	8007a02 <lv_obj_get_child>
 8006fee:	4601      	mov	r1, r0
 8006ff0:	4628      	mov	r0, r5
    for(i = 0; i < lv_obj_get_child_cnt(obj); i++) {
 8006ff2:	3601      	adds	r6, #1
        report_style_change_core(style, lv_obj_get_child(obj, i));
 8006ff4:	f7ff ffd8 	bl	8006fa8 <report_style_change_core>
    for(i = 0; i < lv_obj_get_child_cnt(obj); i++) {
 8006ff8:	e7ed      	b.n	8006fd6 <report_style_change_core+0x2e>
	...

08006ffc <lv_obj_report_style_change>:
    if(!style_refr) return;
 8006ffc:	4b0c      	ldr	r3, [pc, #48]	; (8007030 <lv_obj_report_style_change+0x34>)
 8006ffe:	781b      	ldrb	r3, [r3, #0]
{
 8007000:	b570      	push	{r4, r5, r6, lr}
 8007002:	4606      	mov	r6, r0
    if(!style_refr) return;
 8007004:	b123      	cbz	r3, 8007010 <lv_obj_report_style_change+0x14>
    lv_disp_t * d = lv_disp_get_next(NULL);
 8007006:	2000      	movs	r0, #0
        d = lv_disp_get_next(d);
 8007008:	f00f fc88 	bl	801691c <lv_disp_get_next>
 800700c:	4604      	mov	r4, r0
    while(d) {
 800700e:	b960      	cbnz	r0, 800702a <lv_obj_report_style_change+0x2e>
}
 8007010:	bd70      	pop	{r4, r5, r6, pc}
            report_style_change_core(style, d->screens[i]);
 8007012:	68e3      	ldr	r3, [r4, #12]
 8007014:	4630      	mov	r0, r6
 8007016:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
        for(i = 0; i < d->screen_cnt; i++) {
 800701a:	3501      	adds	r5, #1
            report_style_change_core(style, d->screens[i]);
 800701c:	f7ff ffc4 	bl	8006fa8 <report_style_change_core>
        for(i = 0; i < d->screen_cnt; i++) {
 8007020:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007022:	42ab      	cmp	r3, r5
 8007024:	d8f5      	bhi.n	8007012 <lv_obj_report_style_change+0x16>
        d = lv_disp_get_next(d);
 8007026:	4620      	mov	r0, r4
 8007028:	e7ee      	b.n	8007008 <lv_obj_report_style_change+0xc>
        for(i = 0; i < d->screen_cnt; i++) {
 800702a:	2500      	movs	r5, #0
 800702c:	e7f8      	b.n	8007020 <lv_obj_report_style_change+0x24>
 800702e:	bf00      	nop
 8007030:	20000004 	.word	0x20000004

08007034 <trans_anim_cb>:

static void trans_anim_cb(void * _tr, int32_t v)
{
 8007034:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    trans_t * tr = _tr;
    lv_obj_t * obj = tr->obj;

    uint32_t i;
    for(i = 0; i < obj->style_cnt; i++) {
 8007038:	2300      	movs	r3, #0
{
 800703a:	4604      	mov	r4, r0
    lv_obj_t * obj = tr->obj;
 800703c:	6806      	ldr	r6, [r0, #0]
    for(i = 0; i < obj->style_cnt; i++) {
 800703e:	8c72      	ldrh	r2, [r6, #34]	; 0x22
 8007040:	f3c2 02c5 	ubfx	r2, r2, #3, #6
 8007044:	429a      	cmp	r2, r3
 8007046:	d942      	bls.n	80070ce <trans_anim_cb+0x9a>
        if(obj->styles[i].is_trans == 0 || obj->styles[i].selector != tr->selector) continue;
 8007048:	68f0      	ldr	r0, [r6, #12]
 800704a:	00df      	lsls	r7, r3, #3
 800704c:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 8007050:	79c2      	ldrb	r2, [r0, #7]
 8007052:	0792      	lsls	r2, r2, #30
 8007054:	d505      	bpl.n	8007062 <trans_anim_cb+0x2e>
 8007056:	6842      	ldr	r2, [r0, #4]
 8007058:	68a5      	ldr	r5, [r4, #8]
 800705a:	f3c2 0217 	ubfx	r2, r2, #0, #24
 800705e:	42aa      	cmp	r2, r5
 8007060:	d001      	beq.n	8007066 <trans_anim_cb+0x32>
    for(i = 0; i < obj->style_cnt; i++) {
 8007062:	3301      	adds	r3, #1
 8007064:	e7eb      	b.n	800703e <trans_anim_cb+0xa>

        lv_style_value_t value_final;
        switch (tr->prop) {
 8007066:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 800706a:	f1bc 0f63 	cmp.w	ip, #99	; 0x63
 800706e:	d04d      	beq.n	800710c <trans_anim_cb+0xd8>
 8007070:	d830      	bhi.n	80070d4 <trans_anim_cb+0xa0>
 8007072:	f1bc 0f20 	cmp.w	ip, #32
 8007076:	d054      	beq.n	8007122 <trans_anim_cb+0xee>
 8007078:	f1ac 0330 	sub.w	r3, ip, #48	; 0x30
 800707c:	b29a      	uxth	r2, r3
 800707e:	2a17      	cmp	r2, #23
 8007080:	d82f      	bhi.n	80070e2 <trans_anim_cb+0xae>
 8007082:	2301      	movs	r3, #1
 8007084:	4093      	lsls	r3, r2
 8007086:	4a49      	ldr	r2, [pc, #292]	; (80071ac <trans_anim_cb+0x178>)
 8007088:	4213      	tst	r3, r2
 800708a:	d14a      	bne.n	8007122 <trans_anim_cb+0xee>
 800708c:	f013 0f18 	tst.w	r3, #24
 8007090:	d027      	beq.n	80070e2 <trans_anim_cb+0xae>
                if(v < 255) value_final.num = tr->start_value.num;
                else value_final.num = tr->end_value.num;
                break;
            case LV_STYLE_TRANSITION:
            case LV_STYLE_TEXT_FONT:
                if(v < 255) value_final.ptr = tr->start_value.ptr;
 8007092:	29fe      	cmp	r1, #254	; 0xfe
 8007094:	dc38      	bgt.n	8007108 <trans_anim_cb+0xd4>
 8007096:	68e5      	ldr	r5, [r4, #12]
                break;
        }

        lv_style_value_t old_value;
        bool refr = true;
        if(lv_style_get_prop(obj->styles[i].style, tr->prop, &old_value)) {
 8007098:	aa01      	add	r2, sp, #4
 800709a:	4661      	mov	r1, ip
 800709c:	6800      	ldr	r0, [r0, #0]
 800709e:	f011 f9e0 	bl	8018462 <lv_style_get_prop>
 80070a2:	2800      	cmp	r0, #0
 80070a4:	d07e      	beq.n	80071a4 <trans_anim_cb+0x170>
            if(value_final.ptr == old_value.ptr && value_final.color.full == old_value.color.full && value_final.num == old_value.num) {
 80070a6:	9b01      	ldr	r3, [sp, #4]
 80070a8:	ebb3 0805 	subs.w	r8, r3, r5
 80070ac:	bf18      	it	ne
 80070ae:	f04f 0801 	movne.w	r8, #1
                refr = false;
            }
        }
        lv_style_set_prop(obj->styles[i].style, tr->prop, value_final);
 80070b2:	68f3      	ldr	r3, [r6, #12]
 80070b4:	462a      	mov	r2, r5
 80070b6:	88a1      	ldrh	r1, [r4, #4]
 80070b8:	59d8      	ldr	r0, [r3, r7]
 80070ba:	f011 fa7a 	bl	80185b2 <lv_style_set_prop>
        if (refr) lv_obj_refresh_style(tr->obj, tr->selector, tr->prop);
 80070be:	f1b8 0f00 	cmp.w	r8, #0
 80070c2:	d004      	beq.n	80070ce <trans_anim_cb+0x9a>
 80070c4:	88a2      	ldrh	r2, [r4, #4]
 80070c6:	68a1      	ldr	r1, [r4, #8]
 80070c8:	6820      	ldr	r0, [r4, #0]
 80070ca:	f7ff fec9 	bl	8006e60 <lv_obj_refresh_style>
        break;

    }

}
 80070ce:	b002      	add	sp, #8
 80070d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        switch (tr->prop) {
 80070d4:	f1bc 0f68 	cmp.w	ip, #104	; 0x68
 80070d8:	d0db      	beq.n	8007092 <trans_anim_cb+0x5e>
 80070da:	d80d      	bhi.n	80070f8 <trans_anim_cb+0xc4>
 80070dc:	f1bc 0f67 	cmp.w	ip, #103	; 0x67
 80070e0:	d0d7      	beq.n	8007092 <trans_anim_cb+0x5e>
                if(v == 0) value_final.num = tr->start_value.num;
 80070e2:	2900      	cmp	r1, #0
 80070e4:	d0d7      	beq.n	8007096 <trans_anim_cb+0x62>
                else if(v == 255) value_final.num = tr->end_value.num;
 80070e6:	29ff      	cmp	r1, #255	; 0xff
 80070e8:	d00e      	beq.n	8007108 <trans_anim_cb+0xd4>
                else value_final.num = tr->start_value.num + ((int32_t)((int32_t)(tr->end_value.num - tr->start_value.num) * v) >> 8);
 80070ea:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
 80070ee:	1a9d      	subs	r5, r3, r2
 80070f0:	434d      	muls	r5, r1
 80070f2:	eb02 2525 	add.w	r5, r2, r5, asr #8
 80070f6:	e7cf      	b.n	8007098 <trans_anim_cb+0x64>
        switch (tr->prop) {
 80070f8:	f240 4357 	movw	r3, #1111	; 0x457
 80070fc:	459c      	cmp	ip, r3
 80070fe:	d010      	beq.n	8007122 <trans_anim_cb+0xee>
 8007100:	f241 4359 	movw	r3, #5209	; 0x1459
 8007104:	459c      	cmp	ip, r3
 8007106:	e7eb      	b.n	80070e0 <trans_anim_cb+0xac>
                else value_final.ptr = tr->end_value.ptr;
 8007108:	6925      	ldr	r5, [r4, #16]
 800710a:	e7c5      	b.n	8007098 <trans_anim_cb+0x64>
                if(tr->start_value.ptr == NULL) value_final.ptr = tr->end_value.ptr;
 800710c:	e9d4 5303 	ldrd	r5, r3, [r4, #12]
 8007110:	b90d      	cbnz	r5, 8007116 <trans_anim_cb+0xe2>
 8007112:	461d      	mov	r5, r3
 8007114:	e7c0      	b.n	8007098 <trans_anim_cb+0x64>
                else if(tr->end_value.ptr == NULL) value_final.ptr = tr->start_value.ptr;
 8007116:	2b00      	cmp	r3, #0
 8007118:	d0be      	beq.n	8007098 <trans_anim_cb+0x64>
                else if(v < 128) value_final.ptr = tr->start_value.ptr;
 800711a:	297f      	cmp	r1, #127	; 0x7f
 800711c:	bfc8      	it	gt
 800711e:	461d      	movgt	r5, r3
 8007120:	e7ba      	b.n	8007098 <trans_anim_cb+0x64>
                if(v <= 0) value_final.color = tr->start_value.color;
 8007122:	2900      	cmp	r1, #0
 8007124:	dc04      	bgt.n	8007130 <trans_anim_cb+0xfc>
 8007126:	89a3      	ldrh	r3, [r4, #12]
                else if(v >= 255) value_final.color = tr->end_value.color;
 8007128:	2500      	movs	r5, #0
 800712a:	f363 050f 	bfi	r5, r3, #0, #16
 800712e:	e7b3      	b.n	8007098 <trans_anim_cb+0x64>
 8007130:	29fe      	cmp	r1, #254	; 0xfe
 8007132:	dd01      	ble.n	8007138 <trans_anim_cb+0x104>
 8007134:	8a23      	ldrh	r3, [r4, #16]
 8007136:	e7f7      	b.n	8007128 <trans_anim_cb+0xf4>
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8007138:	89a5      	ldrh	r5, [r4, #12]
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800713a:	f1c1 0eff 	rsb	lr, r1, #255	; 0xff
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800713e:	8a23      	ldrh	r3, [r4, #16]
 8007140:	f248 0281 	movw	r2, #32897	; 0x8081
 8007144:	f3c5 1545 	ubfx	r5, r5, #5, #6
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8007148:	f894 800c 	ldrb.w	r8, [r4, #12]
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800714c:	f3c3 1345 	ubfx	r3, r3, #5, #6
 8007150:	fb0e f505 	mul.w	r5, lr, r5
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8007154:	f008 081f 	and.w	r8, r8, #31
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8007158:	fb01 5303 	mla	r3, r1, r3, r5
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800715c:	fb0e f808 	mul.w	r8, lr, r8
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8007160:	3380      	adds	r3, #128	; 0x80
 8007162:	4353      	muls	r3, r2
 8007164:	f3c3 55c5 	ubfx	r5, r3, #23, #6
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8007168:	7c23      	ldrb	r3, [r4, #16]
 800716a:	f003 031f 	and.w	r3, r3, #31
 800716e:	fb01 8303 	mla	r3, r1, r3, r8
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8007172:	f894 800d 	ldrb.w	r8, [r4, #13]
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8007176:	3380      	adds	r3, #128	; 0x80
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8007178:	ea4f 08d8 	mov.w	r8, r8, lsr #3
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800717c:	4353      	muls	r3, r2
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800717e:	fb0e fe08 	mul.w	lr, lr, r8
 8007182:	f3c3 53c4 	ubfx	r3, r3, #23, #5
 8007186:	ea43 1345 	orr.w	r3, r3, r5, lsl #5
 800718a:	7c65      	ldrb	r5, [r4, #17]
 800718c:	08ed      	lsrs	r5, r5, #3
 800718e:	fb01 e105 	mla	r1, r1, r5, lr
 8007192:	2500      	movs	r5, #0
 8007194:	3180      	adds	r1, #128	; 0x80
 8007196:	434a      	muls	r2, r1
 8007198:	0dd2      	lsrs	r2, r2, #23
 800719a:	ea43 22c2 	orr.w	r2, r3, r2, lsl #11
 800719e:	f362 050f 	bfi	r5, r2, #0, #16
 80071a2:	e779      	b.n	8007098 <trans_anim_cb+0x64>
        bool refr = true;
 80071a4:	f04f 0801 	mov.w	r8, #1
 80071a8:	e783      	b.n	80070b2 <trans_anim_cb+0x7e>
 80071aa:	bf00      	nop
 80071ac:	00900801 	.word	0x00900801

080071b0 <lv_obj_remove_style>:
{
 80071b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071b4:	4604      	mov	r4, r0
    return selector & 0xFFFF;
 80071b6:	fa1f fa82 	uxth.w	sl, r2
    return selector & 0xFF0000;
 80071ba:	f402 057f 	and.w	r5, r2, #16711680	; 0xff0000
    if(style && style->prop_cnt == 0) prop = LV_STYLE_PROP_INV;
 80071be:	4688      	mov	r8, r1
 80071c0:	b1d1      	cbz	r1, 80071f8 <lv_obj_remove_style+0x48>
 80071c2:	79ce      	ldrb	r6, [r1, #7]
 80071c4:	3e00      	subs	r6, #0
 80071c6:	bf18      	it	ne
 80071c8:	2601      	movne	r6, #1
 80071ca:	4276      	negs	r6, r6
 80071cc:	b2b6      	uxth	r6, r6
    bool deleted = false;
 80071ce:	2200      	movs	r2, #0
        if((state != LV_STATE_ANY && state_act != state) ||
 80071d0:	f64f 7bff 	movw	fp, #65535	; 0xffff
    uint32_t i = 0;
 80071d4:	4617      	mov	r7, r2
    while(i <  obj->style_cnt) {
 80071d6:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 80071d8:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 80071dc:	42bb      	cmp	r3, r7
 80071de:	d80e      	bhi.n	80071fe <lv_obj_remove_style+0x4e>
    if(deleted && prop != LV_STYLE_PROP_INV) {
 80071e0:	2a00      	cmp	r2, #0
 80071e2:	d064      	beq.n	80072ae <lv_obj_remove_style+0xfe>
 80071e4:	2e00      	cmp	r6, #0
 80071e6:	d062      	beq.n	80072ae <lv_obj_remove_style+0xfe>
        lv_obj_refresh_style(obj, part, prop);
 80071e8:	4629      	mov	r1, r5
 80071ea:	4620      	mov	r0, r4
 80071ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
}
 80071f0:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        lv_obj_refresh_style(obj, part, prop);
 80071f4:	f7ff be34 	b.w	8006e60 <lv_obj_refresh_style>
    lv_style_prop_t prop = LV_STYLE_PROP_ANY;
 80071f8:	f64f 76ff 	movw	r6, #65535	; 0xffff
 80071fc:	e7e7      	b.n	80071ce <lv_obj_remove_style+0x1e>
        lv_state_t state_act = lv_obj_style_get_selector_state(obj->styles[i].selector);
 80071fe:	68e0      	ldr	r0, [r4, #12]
        if((state != LV_STATE_ANY && state_act != state) ||
 8007200:	45da      	cmp	sl, fp
        lv_state_t state_act = lv_obj_style_get_selector_state(obj->styles[i].selector);
 8007202:	ea4f 09c7 	mov.w	r9, r7, lsl #3
 8007206:	eb00 01c7 	add.w	r1, r0, r7, lsl #3
 800720a:	684b      	ldr	r3, [r1, #4]
 800720c:	f3c3 0317 	ubfx	r3, r3, #0, #24
        if((state != LV_STATE_ANY && state_act != state) ||
 8007210:	d003      	beq.n	800721a <lv_obj_remove_style+0x6a>
 8007212:	fa1f fc83 	uxth.w	ip, r3
 8007216:	45d4      	cmp	ip, sl
 8007218:	d10d      	bne.n	8007236 <lv_obj_remove_style+0x86>
 800721a:	f5b5 2f70 	cmp.w	r5, #983040	; 0xf0000
 800721e:	d003      	beq.n	8007228 <lv_obj_remove_style+0x78>
    return selector & 0xFF0000;
 8007220:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
           (part != LV_PART_ANY && part_act != part) ||
 8007224:	42ab      	cmp	r3, r5
 8007226:	d106      	bne.n	8007236 <lv_obj_remove_style+0x86>
 8007228:	f1b8 0f00 	cmp.w	r8, #0
 800722c:	d005      	beq.n	800723a <lv_obj_remove_style+0x8a>
           (style != NULL && style != obj->styles[i].style))
 800722e:	f850 3009 	ldr.w	r3, [r0, r9]
 8007232:	4543      	cmp	r3, r8
 8007234:	d001      	beq.n	800723a <lv_obj_remove_style+0x8a>
            i++;
 8007236:	3701      	adds	r7, #1
            continue;
 8007238:	e7cd      	b.n	80071d6 <lv_obj_remove_style+0x26>
        if(obj->styles[i].is_trans) {
 800723a:	79cb      	ldrb	r3, [r1, #7]
 800723c:	0799      	lsls	r1, r3, #30
 800723e:	d506      	bpl.n	800724e <lv_obj_remove_style+0x9e>
            trans_del(obj, part, LV_STYLE_PROP_ANY, NULL);
 8007240:	2300      	movs	r3, #0
 8007242:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007246:	4629      	mov	r1, r5
 8007248:	4620      	mov	r0, r4
 800724a:	f7ff fd41 	bl	8006cd0 <trans_del>
        if(obj->styles[i].is_local || obj->styles[i].is_trans) {
 800724e:	68e3      	ldr	r3, [r4, #12]
 8007250:	eb03 0209 	add.w	r2, r3, r9
 8007254:	79d2      	ldrb	r2, [r2, #7]
 8007256:	0792      	lsls	r2, r2, #30
 8007258:	d00c      	beq.n	8007274 <lv_obj_remove_style+0xc4>
            lv_style_reset(obj->styles[i].style);
 800725a:	f853 0009 	ldr.w	r0, [r3, r9]
 800725e:	f011 f883 	bl	8018368 <lv_style_reset>
            lv_mem_free(obj->styles[i].style);
 8007262:	68e3      	ldr	r3, [r4, #12]
 8007264:	f853 0009 	ldr.w	r0, [r3, r9]
 8007268:	f010 fa64 	bl	8017734 <lv_mem_free>
            obj->styles[i].style = NULL;
 800726c:	68e3      	ldr	r3, [r4, #12]
 800726e:	2200      	movs	r2, #0
 8007270:	f843 2009 	str.w	r2, [r3, r9]
    lv_style_prop_t prop = LV_STYLE_PROP_ANY;
 8007274:	463a      	mov	r2, r7
 8007276:	e006      	b.n	8007286 <lv_obj_remove_style+0xd6>
            obj->styles[j] = obj->styles[j + 1];
 8007278:	3201      	adds	r2, #1
 800727a:	eb00 03c2 	add.w	r3, r0, r2, lsl #3
 800727e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007282:	e903 0003 	stmdb	r3, {r0, r1}
        for(j = i; j < (uint32_t)obj->style_cnt - 1 ; j++) {
 8007286:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8007288:	68e0      	ldr	r0, [r4, #12]
 800728a:	f3c3 01c5 	ubfx	r1, r3, #3, #6
 800728e:	f101 3cff 	add.w	ip, r1, #4294967295
 8007292:	4594      	cmp	ip, r2
 8007294:	d8f0      	bhi.n	8007278 <lv_obj_remove_style+0xc8>
        obj->style_cnt--;
 8007296:	313f      	adds	r1, #63	; 0x3f
 8007298:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800729c:	f361 03c8 	bfi	r3, r1, #3, #6
        obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 80072a0:	00c9      	lsls	r1, r1, #3
        obj->style_cnt--;
 80072a2:	8463      	strh	r3, [r4, #34]	; 0x22
        obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 80072a4:	f010 fbde 	bl	8017a64 <lv_mem_realloc>
        deleted = true;
 80072a8:	2201      	movs	r2, #1
        obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 80072aa:	60e0      	str	r0, [r4, #12]
        deleted = true;
 80072ac:	e793      	b.n	80071d6 <lv_obj_remove_style+0x26>
}
 80072ae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080072b4 <trans_anim_ready_cb>:
    lv_style_set_prop(style_trans->style, tr->prop, tr->start_value);   /*Be sure `trans_style` has a valid value*/

}

static void trans_anim_ready_cb(lv_anim_t * a)
{
 80072b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    trans_t * tr = a->var;
 80072b8:	6804      	ldr	r4, [r0, #0]
    /*Remove the transitioned property from trans. style
     *if there no more transitions for this property
     *It allows changing it by normal styles*/
    bool running = false;
    trans_t * tr_i;
    _LV_LL_READ(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr_i) {
 80072ba:	4e27      	ldr	r6, [pc, #156]	; (8007358 <trans_anim_ready_cb+0xa4>)
 80072bc:	4826      	ldr	r0, [pc, #152]	; (8007358 <trans_anim_ready_cb+0xa4>)
    lv_obj_t * obj = tr->obj;
 80072be:	6825      	ldr	r5, [r4, #0]
    lv_style_prop_t prop = tr->prop;
 80072c0:	88a7      	ldrh	r7, [r4, #4]
    _LV_LL_READ(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr_i) {
 80072c2:	f010 f934 	bl	801752e <_lv_ll_get_head>
 80072c6:	b930      	cbnz	r0, 80072d6 <trans_anim_ready_cb+0x22>
        }
    }

    if(!running) {
        uint32_t i;
        for(i = 0; i < obj->style_cnt; i++) {
 80072c8:	8c6a      	ldrh	r2, [r5, #34]	; 0x22
 80072ca:	f3c2 02c5 	ubfx	r2, r2, #3, #6
 80072ce:	4282      	cmp	r2, r0
 80072d0:	d814      	bhi.n	80072fc <trans_anim_ready_cb+0x48>
                }
                break;
            }
        }
    }
}
 80072d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(tr_i != tr && tr_i->obj == tr->obj && tr_i->selector == tr->selector && tr_i->prop == tr->prop) {
 80072d6:	42a0      	cmp	r0, r4
 80072d8:	d00b      	beq.n	80072f2 <trans_anim_ready_cb+0x3e>
 80072da:	6802      	ldr	r2, [r0, #0]
 80072dc:	6823      	ldr	r3, [r4, #0]
 80072de:	429a      	cmp	r2, r3
 80072e0:	d107      	bne.n	80072f2 <trans_anim_ready_cb+0x3e>
 80072e2:	6882      	ldr	r2, [r0, #8]
 80072e4:	68a3      	ldr	r3, [r4, #8]
 80072e6:	429a      	cmp	r2, r3
 80072e8:	d103      	bne.n	80072f2 <trans_anim_ready_cb+0x3e>
 80072ea:	8882      	ldrh	r2, [r0, #4]
 80072ec:	88a3      	ldrh	r3, [r4, #4]
 80072ee:	429a      	cmp	r2, r3
 80072f0:	d0ef      	beq.n	80072d2 <trans_anim_ready_cb+0x1e>
    _LV_LL_READ(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr_i) {
 80072f2:	4601      	mov	r1, r0
 80072f4:	4630      	mov	r0, r6
 80072f6:	f010 f920 	bl	801753a <_lv_ll_get_next>
 80072fa:	e7e4      	b.n	80072c6 <trans_anim_ready_cb+0x12>
            if(obj->styles[i].is_trans && obj->styles[i].selector == tr->selector) {
 80072fc:	68eb      	ldr	r3, [r5, #12]
 80072fe:	00c6      	lsls	r6, r0, #3
 8007300:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8007304:	79d9      	ldrb	r1, [r3, #7]
 8007306:	0789      	lsls	r1, r1, #30
 8007308:	d523      	bpl.n	8007352 <trans_anim_ready_cb+0x9e>
 800730a:	685b      	ldr	r3, [r3, #4]
 800730c:	68a1      	ldr	r1, [r4, #8]
 800730e:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8007312:	428b      	cmp	r3, r1
 8007314:	d11d      	bne.n	8007352 <trans_anim_ready_cb+0x9e>
                _lv_ll_remove(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
 8007316:	4621      	mov	r1, r4
 8007318:	480f      	ldr	r0, [pc, #60]	; (8007358 <trans_anim_ready_cb+0xa4>)
 800731a:	f010 f8cd 	bl	80174b8 <_lv_ll_remove>
                lv_mem_free(tr);
 800731e:	4620      	mov	r0, r4
 8007320:	f010 fa08 	bl	8017734 <lv_mem_free>
                _lv_obj_style_t * obj_style = &obj->styles[i];
 8007324:	68ec      	ldr	r4, [r5, #12]
                lv_style_remove_prop(obj_style->style, prop);
 8007326:	4639      	mov	r1, r7
 8007328:	59a0      	ldr	r0, [r4, r6]
                _lv_obj_style_t * obj_style = &obj->styles[i];
 800732a:	eb04 0806 	add.w	r8, r4, r6
                lv_style_remove_prop(obj_style->style, prop);
 800732e:	f011 f837 	bl	80183a0 <lv_style_remove_prop>
                if(lv_style_is_empty(obj->styles[i].style)) {
 8007332:	68eb      	ldr	r3, [r5, #12]
 8007334:	5998      	ldr	r0, [r3, r6]
 8007336:	f011 f92f 	bl	8018598 <lv_style_is_empty>
 800733a:	2800      	cmp	r0, #0
 800733c:	d0c9      	beq.n	80072d2 <trans_anim_ready_cb+0x1e>
                    lv_obj_remove_style(obj, obj_style->style, obj_style->selector);
 800733e:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8007342:	4628      	mov	r0, r5
 8007344:	59a1      	ldr	r1, [r4, r6]
 8007346:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
}
 800734a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
                    lv_obj_remove_style(obj, obj_style->style, obj_style->selector);
 800734e:	f7ff bf2f 	b.w	80071b0 <lv_obj_remove_style>
        for(i = 0; i < obj->style_cnt; i++) {
 8007352:	3001      	adds	r0, #1
 8007354:	e7bb      	b.n	80072ce <trans_anim_ready_cb+0x1a>
 8007356:	bf00      	nop
 8007358:	2000ae14 	.word	0x2000ae14

0800735c <lv_obj_enable_style_refresh>:
    style_refr = en;
 800735c:	4b01      	ldr	r3, [pc, #4]	; (8007364 <lv_obj_enable_style_refresh+0x8>)
 800735e:	7018      	strb	r0, [r3, #0]
}
 8007360:	4770      	bx	lr
 8007362:	bf00      	nop
 8007364:	20000004 	.word	0x20000004

08007368 <lv_obj_get_style_prop>:
{
 8007368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bool inherit = prop & LV_STYLE_PROP_INHERIT ? true : false;
 800736c:	f3c2 2380 	ubfx	r3, r2, #10, #1
{
 8007370:	b087      	sub	sp, #28
    if(filter) {
 8007372:	f412 4f80 	tst.w	r2, #16384	; 0x4000
{
 8007376:	4604      	mov	r4, r0
    bool inherit = prop & LV_STYLE_PROP_INHERIT ? true : false;
 8007378:	9301      	str	r3, [sp, #4]
    bool filter = prop & LV_STYLE_PROP_FILTER ? true : false;
 800737a:	f3c2 3380 	ubfx	r3, r2, #14, #1
{
 800737e:	460e      	mov	r6, r1
 8007380:	4693      	mov	fp, r2
    bool filter = prop & LV_STYLE_PROP_FILTER ? true : false;
 8007382:	9302      	str	r3, [sp, #8]
    if(filter) {
 8007384:	d003      	beq.n	800738e <lv_obj_get_style_prop+0x26>
        prop &= ~LV_STYLE_PROP_FILTER;
 8007386:	f422 4180 	bic.w	r1, r2, #16384	; 0x4000
 800738a:	fa1f fb81 	uxth.w	fp, r1
    while(obj) {
 800738e:	b92c      	cbnz	r4, 800739c <lv_obj_get_style_prop+0x34>
        if(part == LV_PART_MAIN && (prop == LV_STYLE_WIDTH || prop == LV_STYLE_HEIGHT)) {
 8007390:	2e00      	cmp	r6, #0
 8007392:	d076      	beq.n	8007482 <lv_obj_get_style_prop+0x11a>
            value_act = lv_style_prop_get_default(prop);
 8007394:	4658      	mov	r0, fp
 8007396:	f011 f8a9 	bl	80184ec <lv_style_prop_get_default>
 800739a:	e034      	b.n	8007406 <lv_obj_get_style_prop+0x9e>
    uint8_t group = 1 << _lv_style_get_prop_group(prop);
 800739c:	4658      	mov	r0, fp
    for(i = 0; i < obj->style_cnt; i++) {
 800739e:	2500      	movs	r5, #0
    uint8_t group = 1 << _lv_style_get_prop_group(prop);
 80073a0:	f011 f8ff 	bl	80185a2 <_lv_style_get_prop_group>
 80073a4:	2301      	movs	r3, #1
    lv_state_t state = obj->state;
 80073a6:	f8b4 a020 	ldrh.w	sl, [r4, #32]
    uint8_t group = 1 << _lv_style_get_prop_group(prop);
 80073aa:	fa03 f000 	lsl.w	r0, r3, r0
    bool skip_trans = obj->skip_trans;
 80073ae:	f894 8022 	ldrb.w	r8, [r4, #34]	; 0x22
    lv_state_t state_inv = ~state;
 80073b2:	ea6f 090a 	mvn.w	r9, sl
    uint8_t group = 1 << _lv_style_get_prop_group(prop);
 80073b6:	b2c7      	uxtb	r7, r0
    bool skip_trans = obj->skip_trans;
 80073b8:	f3c8 0880 	ubfx	r8, r8, #2, #1
    lv_state_t state_inv = ~state;
 80073bc:	fa1f f989 	uxth.w	r9, r9
    for(i = 0; i < obj->style_cnt; i++) {
 80073c0:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 80073c2:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 80073c6:	429d      	cmp	r5, r3
 80073c8:	d302      	bcc.n	80073d0 <lv_obj_get_style_prop+0x68>
 80073ca:	f04f 38ff 	mov.w	r8, #4294967295
 80073ce:	e045      	b.n	800745c <lv_obj_get_style_prop+0xf4>
        _lv_obj_style_t * obj_style = &obj->styles[i];
 80073d0:	68e2      	ldr	r2, [r4, #12]
 80073d2:	00e8      	lsls	r0, r5, #3
 80073d4:	eb02 03c5 	add.w	r3, r2, r5, lsl #3
        if(obj_style->is_trans == false) break;
 80073d8:	f893 c007 	ldrb.w	ip, [r3, #7]
 80073dc:	f01c 0f02 	tst.w	ip, #2
 80073e0:	d0f3      	beq.n	80073ca <lv_obj_get_style_prop+0x62>
        if(skip_trans) continue;
 80073e2:	f1b8 0f00 	cmp.w	r8, #0
 80073e6:	d117      	bne.n	8007418 <lv_obj_get_style_prop+0xb0>
        lv_part_t part_act = lv_obj_style_get_selector_part(obj->styles[i].selector);
 80073e8:	685b      	ldr	r3, [r3, #4]
    return selector & 0xFF0000;
 80073ea:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
        if(part_act != part) continue;
 80073ee:	429e      	cmp	r6, r3
 80073f0:	d112      	bne.n	8007418 <lv_obj_get_style_prop+0xb0>
        if((obj_style->style->has_group & group) == 0) continue;
 80073f2:	5810      	ldr	r0, [r2, r0]
 80073f4:	7983      	ldrb	r3, [r0, #6]
 80073f6:	421f      	tst	r7, r3
 80073f8:	d00e      	beq.n	8007418 <lv_obj_get_style_prop+0xb0>
        found = lv_style_get_prop(obj_style->style, prop, &value_tmp);
 80073fa:	aa05      	add	r2, sp, #20
 80073fc:	4659      	mov	r1, fp
 80073fe:	f011 f830 	bl	8018462 <lv_style_get_prop>
        if(found) {
 8007402:	b148      	cbz	r0, 8007418 <lv_obj_get_style_prop+0xb0>
        *v = value_tmp;
 8007404:	9805      	ldr	r0, [sp, #20]
    if(filter) value_act = apply_color_filter(obj, part, value_act);
 8007406:	9b02      	ldr	r3, [sp, #8]
 8007408:	b11b      	cbz	r3, 8007412 <lv_obj_get_style_prop+0xaa>
 800740a:	4605      	mov	r5, r0
    if(obj == NULL) return v;
 800740c:	2c00      	cmp	r4, #0
 800740e:	d152      	bne.n	80074b6 <lv_obj_get_style_prop+0x14e>
    if(filter) value_act = apply_color_filter(obj, part, value_act);
 8007410:	4628      	mov	r0, r5
}
 8007412:	b007      	add	sp, #28
 8007414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for(i = 0; i < obj->style_cnt; i++) {
 8007418:	3501      	adds	r5, #1
 800741a:	e7d1      	b.n	80073c0 <lv_obj_get_style_prop+0x58>
        _lv_obj_style_t * obj_style = &obj->styles[i];
 800741c:	68e0      	ldr	r0, [r4, #12]
 800741e:	eb00 03c5 	add.w	r3, r0, r5, lsl #3
        lv_part_t part_act = lv_obj_style_get_selector_part(obj->styles[i].selector);
 8007422:	685b      	ldr	r3, [r3, #4]
 8007424:	f3c3 0217 	ubfx	r2, r3, #0, #24
    return selector & 0xFF0000;
 8007428:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
        if(part_act != part) continue;
 800742c:	429e      	cmp	r6, r3
 800742e:	d114      	bne.n	800745a <lv_obj_get_style_prop+0xf2>
        if((obj_style->style->has_group & group) == 0) continue;
 8007430:	f850 0035 	ldr.w	r0, [r0, r5, lsl #3]
 8007434:	7983      	ldrb	r3, [r0, #6]
 8007436:	421f      	tst	r7, r3
 8007438:	d00f      	beq.n	800745a <lv_obj_get_style_prop+0xf2>
        if((state_act & state_inv)) continue;
 800743a:	ea12 0f09 	tst.w	r2, r9
    return selector & 0xFFFF;
 800743e:	b293      	uxth	r3, r2
        if((state_act & state_inv)) continue;
 8007440:	d10b      	bne.n	800745a <lv_obj_get_style_prop+0xf2>
        if(state_act <= weight) continue;
 8007442:	4543      	cmp	r3, r8
 8007444:	9303      	str	r3, [sp, #12]
 8007446:	dd08      	ble.n	800745a <lv_obj_get_style_prop+0xf2>
        found = lv_style_get_prop(obj_style->style, prop, &value_tmp);
 8007448:	aa05      	add	r2, sp, #20
 800744a:	4659      	mov	r1, fp
 800744c:	f011 f809 	bl	8018462 <lv_style_get_prop>
        if(found) {
 8007450:	b118      	cbz	r0, 800745a <lv_obj_get_style_prop+0xf2>
            if(state_act == state) {
 8007452:	9b03      	ldr	r3, [sp, #12]
 8007454:	459a      	cmp	sl, r3
 8007456:	d0d5      	beq.n	8007404 <lv_obj_get_style_prop+0x9c>
 8007458:	4698      	mov	r8, r3
    for(; i < obj->style_cnt; i++) {
 800745a:	3501      	adds	r5, #1
 800745c:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 800745e:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 8007462:	429d      	cmp	r5, r3
 8007464:	d3da      	bcc.n	800741c <lv_obj_get_style_prop+0xb4>
    if(weight >= 0) {
 8007466:	f1b8 3fff 	cmp.w	r8, #4294967295
 800746a:	d1cb      	bne.n	8007404 <lv_obj_get_style_prop+0x9c>
        if(!inherit) break;
 800746c:	9b01      	ldr	r3, [sp, #4]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d08e      	beq.n	8007390 <lv_obj_get_style_prop+0x28>
        if(part != LV_PART_MAIN) {
 8007472:	b926      	cbnz	r6, 800747e <lv_obj_get_style_prop+0x116>
        obj = lv_obj_get_parent(obj);
 8007474:	4620      	mov	r0, r4
 8007476:	f000 fac1 	bl	80079fc <lv_obj_get_parent>
 800747a:	4604      	mov	r4, r0
 800747c:	e787      	b.n	800738e <lv_obj_get_style_prop+0x26>
 800747e:	2600      	movs	r6, #0
 8007480:	e785      	b.n	800738e <lv_obj_get_style_prop+0x26>
        if(part == LV_PART_MAIN && (prop == LV_STYLE_WIDTH || prop == LV_STYLE_HEIGHT)) {
 8007482:	f241 0301 	movw	r3, #4097	; 0x1001
 8007486:	459b      	cmp	fp, r3
 8007488:	d003      	beq.n	8007492 <lv_obj_get_style_prop+0x12a>
 800748a:	f241 0304 	movw	r3, #4100	; 0x1004
 800748e:	459b      	cmp	fp, r3
 8007490:	d180      	bne.n	8007394 <lv_obj_get_style_prop+0x2c>
            const lv_obj_class_t * cls = obj->class_p;
 8007492:	6823      	ldr	r3, [r4, #0]
            while(cls) {
 8007494:	f241 0201 	movw	r2, #4097	; 0x1001
 8007498:	b91b      	cbnz	r3, 80074a2 <lv_obj_get_style_prop+0x13a>
            value_act.num = prop == LV_STYLE_WIDTH ? cls->width_def : cls->height_def;
 800749a:	4593      	cmp	fp, r2
 800749c:	d125      	bne.n	80074ea <lv_obj_get_style_prop+0x182>
 800749e:	8a9b      	ldrh	r3, [r3, #20]
 80074a0:	deff      	udf	#255	; 0xff
                if(prop == LV_STYLE_WIDTH) {
 80074a2:	4593      	cmp	fp, r2
                    if(cls->width_def != 0) break;
 80074a4:	bf0c      	ite	eq
 80074a6:	f9b3 0014 	ldrsheq.w	r0, [r3, #20]
                    if(cls->height_def != 0) break;
 80074aa:	f9b3 0016 	ldrshne.w	r0, [r3, #22]
 80074ae:	2800      	cmp	r0, #0
 80074b0:	d1a9      	bne.n	8007406 <lv_obj_get_style_prop+0x9e>
                cls = cls->base_class;
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	e7f0      	b.n	8007498 <lv_obj_get_style_prop+0x130>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_COLOR_FILTER_DSC);
 80074b6:	2263      	movs	r2, #99	; 0x63
 80074b8:	4631      	mov	r1, r6
 80074ba:	4620      	mov	r0, r4
 80074bc:	f7ff ff54 	bl	8007368 <lv_obj_get_style_prop>
    if(f && f->filter_cb) {
 80074c0:	4607      	mov	r7, r0
 80074c2:	2800      	cmp	r0, #0
 80074c4:	d0a4      	beq.n	8007410 <lv_obj_get_style_prop+0xa8>
 80074c6:	6803      	ldr	r3, [r0, #0]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d0a1      	beq.n	8007410 <lv_obj_get_style_prop+0xa8>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_COLOR_FILTER_OPA);
 80074cc:	2264      	movs	r2, #100	; 0x64
 80074ce:	4631      	mov	r1, r6
 80074d0:	4620      	mov	r0, r4
 80074d2:	f7ff ff49 	bl	8007368 <lv_obj_get_style_prop>
        if(f_opa != 0) v.color = f->filter_cb(f, v.color, f_opa);
 80074d6:	f010 02ff 	ands.w	r2, r0, #255	; 0xff
 80074da:	d099      	beq.n	8007410 <lv_obj_get_style_prop+0xa8>
 80074dc:	4629      	mov	r1, r5
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	4638      	mov	r0, r7
 80074e2:	4798      	blx	r3
 80074e4:	f360 050f 	bfi	r5, r0, #0, #16
 80074e8:	e792      	b.n	8007410 <lv_obj_get_style_prop+0xa8>
            value_act.num = prop == LV_STYLE_WIDTH ? cls->width_def : cls->height_def;
 80074ea:	8adb      	ldrh	r3, [r3, #22]
 80074ec:	e7d8      	b.n	80074a0 <lv_obj_get_style_prop+0x138>

080074ee <trans_anim_start_cb>:
{
 80074ee:	b537      	push	{r0, r1, r2, r4, r5, lr}
    trans_t * tr = a->var;
 80074f0:	6804      	ldr	r4, [r0, #0]
    return selector & 0xFF0000;
 80074f2:	68a1      	ldr	r1, [r4, #8]
    tr->start_value = lv_obj_get_style_prop(tr->obj, part, tr->prop);
 80074f4:	88a2      	ldrh	r2, [r4, #4]
    return selector & 0xFF0000;
 80074f6:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
    tr->start_value = lv_obj_get_style_prop(tr->obj, part, tr->prop);
 80074fa:	6820      	ldr	r0, [r4, #0]
 80074fc:	9101      	str	r1, [sp, #4]
 80074fe:	f7ff ff33 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_prop_t prop_tmp = tr->prop;
 8007502:	88a5      	ldrh	r5, [r4, #4]
    tr->prop = LV_STYLE_PROP_INV;
 8007504:	2300      	movs	r3, #0
    trans_del(tr->obj, part, prop_tmp, tr);
 8007506:	9901      	ldr	r1, [sp, #4]
 8007508:	462a      	mov	r2, r5
    tr->start_value = lv_obj_get_style_prop(tr->obj, part, tr->prop);
 800750a:	60e0      	str	r0, [r4, #12]
    tr->prop = LV_STYLE_PROP_INV;
 800750c:	80a3      	strh	r3, [r4, #4]
    trans_del(tr->obj, part, prop_tmp, tr);
 800750e:	4623      	mov	r3, r4
 8007510:	6820      	ldr	r0, [r4, #0]
 8007512:	f7ff fbdd 	bl	8006cd0 <trans_del>
    _lv_obj_style_t * style_trans = get_trans_style(tr->obj, tr->selector);
 8007516:	68a1      	ldr	r1, [r4, #8]
 8007518:	6820      	ldr	r0, [r4, #0]
    tr->prop = prop_tmp;
 800751a:	80a5      	strh	r5, [r4, #4]
    _lv_obj_style_t * style_trans = get_trans_style(tr->obj, tr->selector);
 800751c:	f7ff fc4d 	bl	8006dba <get_trans_style>
    lv_style_set_prop(style_trans->style, tr->prop, tr->start_value);   /*Be sure `trans_style` has a valid value*/
 8007520:	68e2      	ldr	r2, [r4, #12]
 8007522:	88a1      	ldrh	r1, [r4, #4]
 8007524:	6800      	ldr	r0, [r0, #0]
}
 8007526:	b003      	add	sp, #12
 8007528:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    lv_style_set_prop(style_trans->style, tr->prop, tr->start_value);   /*Be sure `trans_style` has a valid value*/
 800752c:	f011 b841 	b.w	80185b2 <lv_style_set_prop>

08007530 <lv_obj_set_local_style_prop>:
{
 8007530:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    for(i = 0; i < obj->style_cnt; i++) {
 8007534:	8c44      	ldrh	r4, [r0, #34]	; 0x22
{
 8007536:	4605      	mov	r5, r0
 8007538:	461e      	mov	r6, r3
 800753a:	460f      	mov	r7, r1
 800753c:	4690      	mov	r8, r2
    for(i = 0; i < obj->style_cnt; i++) {
 800753e:	f3c4 04c5 	ubfx	r4, r4, #3, #6
 8007542:	68c0      	ldr	r0, [r0, #12]
 8007544:	2300      	movs	r3, #0
 8007546:	42a3      	cmp	r3, r4
 8007548:	d30d      	bcc.n	8007566 <lv_obj_set_local_style_prop+0x36>
    obj->style_cnt++;
 800754a:	3401      	adds	r4, #1
 800754c:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
 800754e:	f004 043f 	and.w	r4, r4, #63	; 0x3f
 8007552:	f364 03c8 	bfi	r3, r4, #3, #6
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 8007556:	00e1      	lsls	r1, r4, #3
    obj->style_cnt++;
 8007558:	846b      	strh	r3, [r5, #34]	; 0x22
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 800755a:	f010 fa83 	bl	8017a64 <lv_mem_realloc>
 800755e:	4602      	mov	r2, r0
 8007560:	60e8      	str	r0, [r5, #12]
    LV_ASSERT_MALLOC(obj->styles);
 8007562:	b9c0      	cbnz	r0, 8007596 <lv_obj_set_local_style_prop+0x66>
 8007564:	e7fe      	b.n	8007564 <lv_obj_set_local_style_prop+0x34>
        if(obj->styles[i].is_local &&
 8007566:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 800756a:	79d1      	ldrb	r1, [r2, #7]
 800756c:	07c9      	lsls	r1, r1, #31
 800756e:	d510      	bpl.n	8007592 <lv_obj_set_local_style_prop+0x62>
           obj->styles[i].selector == selector)
 8007570:	6851      	ldr	r1, [r2, #4]
 8007572:	f3c1 0117 	ubfx	r1, r1, #0, #24
        if(obj->styles[i].is_local &&
 8007576:	428e      	cmp	r6, r1
 8007578:	d10b      	bne.n	8007592 <lv_obj_set_local_style_prop+0x62>
            return obj->styles[i].style;
 800757a:	6810      	ldr	r0, [r2, #0]
    lv_style_set_prop(style, prop, value);
 800757c:	4642      	mov	r2, r8
 800757e:	4639      	mov	r1, r7
 8007580:	f011 f817 	bl	80185b2 <lv_style_set_prop>
    lv_obj_refresh_style(obj, selector, prop);
 8007584:	463a      	mov	r2, r7
 8007586:	4631      	mov	r1, r6
 8007588:	4628      	mov	r0, r5
}
 800758a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    lv_obj_refresh_style(obj, selector, prop);
 800758e:	f7ff bc67 	b.w	8006e60 <lv_obj_refresh_style>
    for(i = 0; i < obj->style_cnt; i++) {
 8007592:	3301      	adds	r3, #1
 8007594:	e7d7      	b.n	8007546 <lv_obj_set_local_style_prop+0x16>
    for(i = obj->style_cnt - 1; i > 0 ; i--) {
 8007596:	8c6c      	ldrh	r4, [r5, #34]	; 0x22
 8007598:	f3c4 04c5 	ubfx	r4, r4, #3, #6
 800759c:	f104 3aff 	add.w	sl, r4, #4294967295
 80075a0:	f104 5400 	add.w	r4, r4, #536870912	; 0x20000000
 80075a4:	3c02      	subs	r4, #2
 80075a6:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 80075aa:	ea4f 09ca 	mov.w	r9, sl, lsl #3
 80075ae:	f1ba 0f00 	cmp.w	sl, #0
 80075b2:	d11d      	bne.n	80075f0 <lv_obj_set_local_style_prop+0xc0>
    lv_memset_00(&obj->styles[i], sizeof(_lv_obj_style_t));
 80075b4:	eb02 0009 	add.w	r0, r2, r9
 80075b8:	2108      	movs	r1, #8
 80075ba:	f010 fabb 	bl	8017b34 <lv_memset_00>
    obj->styles[i].style = lv_mem_alloc(sizeof(lv_style_t));
 80075be:	2008      	movs	r0, #8
 80075c0:	68ec      	ldr	r4, [r5, #12]
 80075c2:	f010 fa39 	bl	8017a38 <lv_mem_alloc>
    lv_style_init(obj->styles[i].style);
 80075c6:	68eb      	ldr	r3, [r5, #12]
    obj->styles[i].style = lv_mem_alloc(sizeof(lv_style_t));
 80075c8:	f844 003a 	str.w	r0, [r4, sl, lsl #3]
    lv_style_init(obj->styles[i].style);
 80075cc:	f853 003a 	ldr.w	r0, [r3, sl, lsl #3]
 80075d0:	f010 fec7 	bl	8018362 <lv_style_init>
    obj->styles[i].is_local = 1;
 80075d4:	68e9      	ldr	r1, [r5, #12]
 80075d6:	eb01 0309 	add.w	r3, r1, r9
 80075da:	79da      	ldrb	r2, [r3, #7]
 80075dc:	f042 0201 	orr.w	r2, r2, #1
 80075e0:	71da      	strb	r2, [r3, #7]
    obj->styles[i].selector = selector;
 80075e2:	685a      	ldr	r2, [r3, #4]
 80075e4:	f366 0217 	bfi	r2, r6, #0, #24
 80075e8:	605a      	str	r2, [r3, #4]
    return obj->styles[i].style;
 80075ea:	f851 003a 	ldr.w	r0, [r1, sl, lsl #3]
 80075ee:	e7c5      	b.n	800757c <lv_obj_set_local_style_prop+0x4c>
        if(obj->styles[i - 1].is_local || obj->styles[i - 1].is_trans) break;
 80075f0:	79e3      	ldrb	r3, [r4, #7]
 80075f2:	3c08      	subs	r4, #8
 80075f4:	079b      	lsls	r3, r3, #30
 80075f6:	d1dd      	bne.n	80075b4 <lv_obj_set_local_style_prop+0x84>
        obj->styles[i] = obj->styles[i - 1];
 80075f8:	eb02 0309 	add.w	r3, r2, r9
    for(i = obj->style_cnt - 1; i > 0 ; i--) {
 80075fc:	f10a 3aff 	add.w	sl, sl, #4294967295
        obj->styles[i] = obj->styles[i - 1];
 8007600:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 8007604:	e883 0003 	stmia.w	r3, {r0, r1}
    for(i = obj->style_cnt - 1; i > 0 ; i--) {
 8007608:	e7cf      	b.n	80075aa <lv_obj_set_local_style_prop+0x7a>

0800760a <lv_obj_get_local_style_prop>:
{
 800760a:	b4f0      	push	{r4, r5, r6, r7}
    for(i = 0; i < obj->style_cnt; i++) {
 800760c:	8c46      	ldrh	r6, [r0, #34]	; 0x22
 800760e:	2500      	movs	r5, #0
 8007610:	f3c6 06c5 	ubfx	r6, r6, #3, #6
 8007614:	42ae      	cmp	r6, r5
 8007616:	d802      	bhi.n	800761e <lv_obj_get_local_style_prop+0x14>
}
 8007618:	2000      	movs	r0, #0
 800761a:	bcf0      	pop	{r4, r5, r6, r7}
 800761c:	4770      	bx	lr
        if(obj->styles[i].is_local &&
 800761e:	68c4      	ldr	r4, [r0, #12]
 8007620:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007624:	79e7      	ldrb	r7, [r4, #7]
 8007626:	07ff      	lsls	r7, r7, #31
 8007628:	d508      	bpl.n	800763c <lv_obj_get_local_style_prop+0x32>
           obj->styles[i].selector ==  selector)
 800762a:	6867      	ldr	r7, [r4, #4]
 800762c:	f3c7 0717 	ubfx	r7, r7, #0, #24
        if(obj->styles[i].is_local &&
 8007630:	429f      	cmp	r7, r3
 8007632:	d103      	bne.n	800763c <lv_obj_get_local_style_prop+0x32>
            return lv_style_get_prop(obj->styles[i].style, prop, value);
 8007634:	6820      	ldr	r0, [r4, #0]
}
 8007636:	bcf0      	pop	{r4, r5, r6, r7}
            return lv_style_get_prop(obj->styles[i].style, prop, value);
 8007638:	f010 bf13 	b.w	8018462 <lv_style_get_prop>
    for(i = 0; i < obj->style_cnt; i++) {
 800763c:	3501      	adds	r5, #1
 800763e:	e7e9      	b.n	8007614 <lv_obj_get_local_style_prop+0xa>

08007640 <_lv_obj_style_create_transition>:
{
 8007640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007644:	461f      	mov	r7, r3
 8007646:	b092      	sub	sp, #72	; 0x48
    obj->skip_trans = 1;
 8007648:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
{
 800764c:	4604      	mov	r4, r0
 800764e:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8007650:	4688      	mov	r8, r1
    obj->skip_trans = 1;
 8007652:	f043 0304 	orr.w	r3, r3, #4
    obj->state = prev_state;
 8007656:	8402      	strh	r2, [r0, #32]
{
 8007658:	4691      	mov	r9, r2
    obj->skip_trans = 1;
 800765a:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
    lv_style_value_t v1 = lv_obj_get_style_prop(obj, part, tr_dsc->prop);
 800765e:	892a      	ldrh	r2, [r5, #8]
 8007660:	f7ff fe82 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v2 = lv_obj_get_style_prop(obj, part, tr_dsc->prop);
 8007664:	892a      	ldrh	r2, [r5, #8]
    lv_style_value_t v1 = lv_obj_get_style_prop(obj, part, tr_dsc->prop);
 8007666:	4682      	mov	sl, r0
    lv_style_value_t v2 = lv_obj_get_style_prop(obj, part, tr_dsc->prop);
 8007668:	4641      	mov	r1, r8
 800766a:	4620      	mov	r0, r4
    obj->state = new_state;
 800766c:	8427      	strh	r7, [r4, #32]
    lv_style_value_t v2 = lv_obj_get_style_prop(obj, part, tr_dsc->prop);
 800766e:	f7ff fe7b 	bl	8007368 <lv_obj_get_style_prop>
    obj->skip_trans = 0;
 8007672:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    if(v1.ptr == v2.ptr && v1.num == v2.num && v1.color.full == v2.color.full)  return;
 8007676:	4582      	cmp	sl, r0
    lv_style_value_t v2 = lv_obj_get_style_prop(obj, part, tr_dsc->prop);
 8007678:	4606      	mov	r6, r0
    obj->skip_trans = 0;
 800767a:	f36f 0382 	bfc	r3, #2, #1
 800767e:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    if(v1.ptr == v2.ptr && v1.num == v2.num && v1.color.full == v2.color.full)  return;
 8007682:	d06c      	beq.n	800775e <_lv_obj_style_create_transition+0x11e>
    v1 = lv_obj_get_style_prop(obj, part, tr_dsc->prop);
 8007684:	892a      	ldrh	r2, [r5, #8]
 8007686:	4641      	mov	r1, r8
    obj->state = prev_state;
 8007688:	f8a4 9020 	strh.w	r9, [r4, #32]
    v1 = lv_obj_get_style_prop(obj, part, tr_dsc->prop);
 800768c:	4620      	mov	r0, r4
 800768e:	f7ff fe6b 	bl	8007368 <lv_obj_get_style_prop>
 8007692:	4681      	mov	r9, r0
    _lv_obj_style_t * style_trans = get_trans_style(obj, part);
 8007694:	4641      	mov	r1, r8
 8007696:	4620      	mov	r0, r4
    obj->state = new_state;
 8007698:	8427      	strh	r7, [r4, #32]
    _lv_obj_style_t * style_trans = get_trans_style(obj, part);
 800769a:	f7ff fb8e 	bl	8006dba <get_trans_style>
    lv_style_set_prop(style_trans->style, tr_dsc->prop, v1);   /*Be sure `trans_style` has a valid value*/
 800769e:	464a      	mov	r2, r9
 80076a0:	8929      	ldrh	r1, [r5, #8]
 80076a2:	6800      	ldr	r0, [r0, #0]
 80076a4:	f010 ff85 	bl	80185b2 <lv_style_set_prop>
    if(tr_dsc->prop == LV_STYLE_RADIUS) {
 80076a8:	892b      	ldrh	r3, [r5, #8]
 80076aa:	2b60      	cmp	r3, #96	; 0x60
 80076ac:	d11e      	bne.n	80076ec <_lv_obj_style_create_transition+0xac>
        if(v1.num == LV_RADIUS_CIRCLE || v2.num == LV_RADIUS_CIRCLE) {
 80076ae:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80076b2:	4599      	cmp	r9, r3
 80076b4:	d001      	beq.n	80076ba <_lv_obj_style_create_transition+0x7a>
 80076b6:	429e      	cmp	r6, r3
 80076b8:	d118      	bne.n	80076ec <_lv_obj_style_create_transition+0xac>
            lv_coord_t whalf = lv_obj_get_width(obj) / 2;
 80076ba:	4620      	mov	r0, r4
 80076bc:	f7fd fbd7 	bl	8004e6e <lv_obj_get_width>
 80076c0:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80076c4:	f340 074f 	sbfx	r7, r0, #1, #16
            lv_coord_t hhalf = lv_obj_get_width(obj) / 2;
 80076c8:	4620      	mov	r0, r4
 80076ca:	f7fd fbd0 	bl	8004e6e <lv_obj_get_width>
            if(v1.num == LV_RADIUS_CIRCLE) v1.num = LV_MIN(whalf + 1, hhalf + 1);
 80076ce:	f647 72ff 	movw	r2, #32767	; 0x7fff
            lv_coord_t hhalf = lv_obj_get_width(obj) / 2;
 80076d2:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
            if(v1.num == LV_RADIUS_CIRCLE) v1.num = LV_MIN(whalf + 1, hhalf + 1);
 80076d6:	4591      	cmp	r9, r2
            lv_coord_t hhalf = lv_obj_get_width(obj) / 2;
 80076d8:	f340 034f 	sbfx	r3, r0, #1, #16
            if(v1.num == LV_RADIUS_CIRCLE) v1.num = LV_MIN(whalf + 1, hhalf + 1);
 80076dc:	d112      	bne.n	8007704 <_lv_obj_style_create_transition+0xc4>
 80076de:	429f      	cmp	r7, r3
 80076e0:	da0a      	bge.n	80076f8 <_lv_obj_style_create_transition+0xb8>
            if(v2.num == LV_RADIUS_CIRCLE) v2.num = LV_MIN(whalf + 1, hhalf + 1);
 80076e2:	4296      	cmp	r6, r2
            if(v1.num == LV_RADIUS_CIRCLE) v1.num = LV_MIN(whalf + 1, hhalf + 1);
 80076e4:	f107 0901 	add.w	r9, r7, #1
            if(v2.num == LV_RADIUS_CIRCLE) v2.num = LV_MIN(whalf + 1, hhalf + 1);
 80076e8:	d100      	bne.n	80076ec <_lv_obj_style_create_transition+0xac>
 80076ea:	1c7e      	adds	r6, r7, #1
    tr = _lv_ll_ins_head(&LV_GC_ROOT(_lv_obj_style_trans_ll));
 80076ec:	481d      	ldr	r0, [pc, #116]	; (8007764 <_lv_obj_style_create_transition+0x124>)
 80076ee:	f00f feac 	bl	801744a <_lv_ll_ins_head>
    LV_ASSERT_MALLOC(tr);
 80076f2:	4607      	mov	r7, r0
 80076f4:	b958      	cbnz	r0, 800770e <_lv_obj_style_create_transition+0xce>
 80076f6:	e7fe      	b.n	80076f6 <_lv_obj_style_create_transition+0xb6>
            if(v2.num == LV_RADIUS_CIRCLE) v2.num = LV_MIN(whalf + 1, hhalf + 1);
 80076f8:	4296      	cmp	r6, r2
            if(v1.num == LV_RADIUS_CIRCLE) v1.num = LV_MIN(whalf + 1, hhalf + 1);
 80076fa:	f103 0901 	add.w	r9, r3, #1
            if(v2.num == LV_RADIUS_CIRCLE) v2.num = LV_MIN(whalf + 1, hhalf + 1);
 80076fe:	d1f5      	bne.n	80076ec <_lv_obj_style_create_transition+0xac>
 8007700:	1c5e      	adds	r6, r3, #1
 8007702:	e7f3      	b.n	80076ec <_lv_obj_style_create_transition+0xac>
 8007704:	4296      	cmp	r6, r2
 8007706:	d1f1      	bne.n	80076ec <_lv_obj_style_create_transition+0xac>
 8007708:	429f      	cmp	r7, r3
 800770a:	dbee      	blt.n	80076ea <_lv_obj_style_create_transition+0xaa>
 800770c:	e7f8      	b.n	8007700 <_lv_obj_style_create_transition+0xc0>
        tr->prop = tr_dsc->prop;
 800770e:	892b      	ldrh	r3, [r5, #8]
        tr->obj = obj;
 8007710:	6004      	str	r4, [r0, #0]
        tr->prop = tr_dsc->prop;
 8007712:	8083      	strh	r3, [r0, #4]
        tr->selector = part;
 8007714:	f8c0 8008 	str.w	r8, [r0, #8]
    tr->end_value = v2;
 8007718:	e9c0 9603 	strd	r9, r6, [r0, #12]
        lv_anim_init(&a);
 800771c:	a801      	add	r0, sp, #4
 800771e:	f00f fa8d 	bl	8016c3c <lv_anim_init>
    a->end_value = end;
 8007722:	22ff      	movs	r2, #255	; 0xff
    a->exec_cb = exec_cb;
 8007724:	4b10      	ldr	r3, [pc, #64]	; (8007768 <_lv_obj_style_create_transition+0x128>)
        lv_anim_start(&a);
 8007726:	a801      	add	r0, sp, #4
    a->end_value = end;
 8007728:	920a      	str	r2, [sp, #40]	; 0x28
    a->time = duration;
 800772a:	882a      	ldrh	r2, [r5, #0]
    a->exec_cb = exec_cb;
 800772c:	9302      	str	r3, [sp, #8]
    a->time = duration;
 800772e:	920b      	str	r2, [sp, #44]	; 0x2c
    a->act_time = -(int32_t)(delay);
 8007730:	886a      	ldrh	r2, [r5, #2]
    a->start_cb = start_cb;
 8007732:	4b0e      	ldr	r3, [pc, #56]	; (800776c <_lv_obj_style_create_transition+0x12c>)
    a->act_time = -(int32_t)(delay);
 8007734:	4252      	negs	r2, r2
    a->var = var;
 8007736:	9701      	str	r7, [sp, #4]
    a->start_cb = start_cb;
 8007738:	9303      	str	r3, [sp, #12]
    a->act_time = -(int32_t)(delay);
 800773a:	920c      	str	r2, [sp, #48]	; 0x30
    a->ready_cb = ready_cb;
 800773c:	4b0c      	ldr	r3, [pc, #48]	; (8007770 <_lv_obj_style_create_transition+0x130>)
    a->path_cb = path_cb;
 800773e:	68ea      	ldr	r2, [r5, #12]
    a->ready_cb = ready_cb;
 8007740:	9304      	str	r3, [sp, #16]
    a->start_value = start;
 8007742:	2300      	movs	r3, #0
    a->path_cb = path_cb;
 8007744:	9207      	str	r2, [sp, #28]
 * @param en true: apply the start value immediately in `lv_anim_start`;
 *        false: apply the start value only when `delay` ms is elapsed and the animations really starts
 */
static inline void lv_anim_set_early_apply(lv_anim_t * a, bool en)
{
    a->early_apply = en;
 8007746:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
    a->current_value = start;
 800774a:	e9cd 3308 	strd	r3, r3, [sp, #32]
    a->early_apply = en;
 800774e:	f363 0200 	bfi	r2, r3, #0, #1
        a.user_data = tr_dsc->user_data;
 8007752:	692b      	ldr	r3, [r5, #16]
 8007754:	f88d 2042 	strb.w	r2, [sp, #66]	; 0x42
 8007758:	9306      	str	r3, [sp, #24]
        lv_anim_start(&a);
 800775a:	f00f fab5 	bl	8016cc8 <lv_anim_start>
}
 800775e:	b012      	add	sp, #72	; 0x48
 8007760:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007764:	2000ae14 	.word	0x2000ae14
 8007768:	08007035 	.word	0x08007035
 800776c:	080074ef 	.word	0x080074ef
 8007770:	080072b5 	.word	0x080072b5

08007774 <_lv_obj_style_state_compare>:
{
 8007774:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    for(i = 0; i < obj->style_cnt; i++) {
 8007778:	2600      	movs	r6, #0
{
 800777a:	4607      	mov	r7, r0
        bool valid1 = state_act & (~state1) ? false : true;
 800777c:	ea6f 0801 	mvn.w	r8, r1
        bool valid2 = state_act & (~state2) ? false : true;
 8007780:	ea6f 0902 	mvn.w	r9, r2
    _lv_style_state_cmp_t res = _LV_STYLE_STATE_CMP_SAME;
 8007784:	4635      	mov	r5, r6
    for(i = 0; i < obj->style_cnt; i++) {
 8007786:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007788:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800778c:	42b3      	cmp	r3, r6
 800778e:	f240 80a1 	bls.w	80078d4 <_lv_obj_style_state_compare+0x160>
        if(obj->styles[i].is_trans) continue;
 8007792:	68fa      	ldr	r2, [r7, #12]
 8007794:	00f1      	lsls	r1, r6, #3
 8007796:	eb02 03c6 	add.w	r3, r2, r6, lsl #3
 800779a:	79d8      	ldrb	r0, [r3, #7]
 800779c:	0784      	lsls	r4, r0, #30
 800779e:	f100 8093 	bmi.w	80078c8 <_lv_obj_style_state_compare+0x154>
        lv_state_t state_act = lv_obj_style_get_selector_state(obj->styles[i].selector);
 80077a2:	685b      	ldr	r3, [r3, #4]
 80077a4:	f3c3 0a17 	ubfx	sl, r3, #0, #24
        bool valid1 = state_act & (~state1) ? false : true;
 80077a8:	b29b      	uxth	r3, r3
 80077aa:	ea18 0f03 	tst.w	r8, r3
 80077ae:	bf0c      	ite	eq
 80077b0:	2001      	moveq	r0, #1
 80077b2:	2000      	movne	r0, #0
        bool valid2 = state_act & (~state2) ? false : true;
 80077b4:	ea19 0f03 	tst.w	r9, r3
        if(valid1 != valid2) {
 80077b8:	bf0c      	ite	eq
 80077ba:	2301      	moveq	r3, #1
 80077bc:	2300      	movne	r3, #0
 80077be:	4298      	cmp	r0, r3
 80077c0:	f000 8082 	beq.w	80078c8 <_lv_obj_style_state_compare+0x154>
            lv_style_t * style = obj->styles[i].style;
 80077c4:	5854      	ldr	r4, [r2, r1]
            if(lv_style_get_prop(style, LV_STYLE_PAD_TOP, &v))layout_diff = true;
 80077c6:	aa01      	add	r2, sp, #4
 80077c8:	f241 0110 	movw	r1, #4112	; 0x1010
 80077cc:	4620      	mov	r0, r4
 80077ce:	f010 fe48 	bl	8018462 <lv_style_get_prop>
 80077d2:	2800      	cmp	r0, #0
 80077d4:	d17a      	bne.n	80078cc <_lv_obj_style_state_compare+0x158>
            else if(lv_style_get_prop(style, LV_STYLE_PAD_BOTTOM, &v)) layout_diff = true;
 80077d6:	aa01      	add	r2, sp, #4
 80077d8:	f241 0111 	movw	r1, #4113	; 0x1011
 80077dc:	4620      	mov	r0, r4
 80077de:	f010 fe40 	bl	8018462 <lv_style_get_prop>
 80077e2:	2800      	cmp	r0, #0
 80077e4:	d172      	bne.n	80078cc <_lv_obj_style_state_compare+0x158>
            else if(lv_style_get_prop(style, LV_STYLE_PAD_LEFT, &v)) layout_diff = true;
 80077e6:	aa01      	add	r2, sp, #4
 80077e8:	f241 0112 	movw	r1, #4114	; 0x1012
 80077ec:	4620      	mov	r0, r4
 80077ee:	f010 fe38 	bl	8018462 <lv_style_get_prop>
 80077f2:	2800      	cmp	r0, #0
 80077f4:	d16a      	bne.n	80078cc <_lv_obj_style_state_compare+0x158>
            else if(lv_style_get_prop(style, LV_STYLE_PAD_RIGHT, &v)) layout_diff = true;
 80077f6:	aa01      	add	r2, sp, #4
 80077f8:	f241 0113 	movw	r1, #4115	; 0x1013
 80077fc:	4620      	mov	r0, r4
 80077fe:	f010 fe30 	bl	8018462 <lv_style_get_prop>
 8007802:	2800      	cmp	r0, #0
 8007804:	d162      	bne.n	80078cc <_lv_obj_style_state_compare+0x158>
            else if(lv_style_get_prop(style, LV_STYLE_PAD_COLUMN, &v)) layout_diff = true;
 8007806:	aa01      	add	r2, sp, #4
 8007808:	f241 0115 	movw	r1, #4117	; 0x1015
 800780c:	4620      	mov	r0, r4
 800780e:	f010 fe28 	bl	8018462 <lv_style_get_prop>
 8007812:	2800      	cmp	r0, #0
 8007814:	d15a      	bne.n	80078cc <_lv_obj_style_state_compare+0x158>
            else if(lv_style_get_prop(style, LV_STYLE_PAD_ROW, &v)) layout_diff = true;
 8007816:	aa01      	add	r2, sp, #4
 8007818:	f241 0114 	movw	r1, #4116	; 0x1014
 800781c:	4620      	mov	r0, r4
 800781e:	f010 fe20 	bl	8018462 <lv_style_get_prop>
 8007822:	2800      	cmp	r0, #0
 8007824:	d152      	bne.n	80078cc <_lv_obj_style_state_compare+0x158>
            else if(lv_style_get_prop(style, LV_STYLE_LAYOUT, &v)) layout_diff = true;
 8007826:	aa01      	add	r2, sp, #4
 8007828:	f241 0169 	movw	r1, #4201	; 0x1069
 800782c:	4620      	mov	r0, r4
 800782e:	f010 fe18 	bl	8018462 <lv_style_get_prop>
 8007832:	2800      	cmp	r0, #0
 8007834:	d14a      	bne.n	80078cc <_lv_obj_style_state_compare+0x158>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSLATE_X, &v)) layout_diff = true;
 8007836:	aa01      	add	r2, sp, #4
 8007838:	f243 010c 	movw	r1, #12300	; 0x300c
 800783c:	4620      	mov	r0, r4
 800783e:	f010 fe10 	bl	8018462 <lv_style_get_prop>
 8007842:	2800      	cmp	r0, #0
 8007844:	d142      	bne.n	80078cc <_lv_obj_style_state_compare+0x158>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSLATE_Y, &v)) layout_diff = true;
 8007846:	aa01      	add	r2, sp, #4
 8007848:	f243 010d 	movw	r1, #12301	; 0x300d
 800784c:	4620      	mov	r0, r4
 800784e:	f010 fe08 	bl	8018462 <lv_style_get_prop>
 8007852:	2800      	cmp	r0, #0
 8007854:	d13a      	bne.n	80078cc <_lv_obj_style_state_compare+0x158>
            else if(lv_style_get_prop(style, LV_STYLE_WIDTH, &v)) layout_diff = true;
 8007856:	aa01      	add	r2, sp, #4
 8007858:	f241 0101 	movw	r1, #4097	; 0x1001
 800785c:	4620      	mov	r0, r4
 800785e:	f010 fe00 	bl	8018462 <lv_style_get_prop>
 8007862:	bb98      	cbnz	r0, 80078cc <_lv_obj_style_state_compare+0x158>
            else if(lv_style_get_prop(style, LV_STYLE_HEIGHT, &v)) layout_diff = true;
 8007864:	aa01      	add	r2, sp, #4
 8007866:	f241 0104 	movw	r1, #4100	; 0x1004
 800786a:	4620      	mov	r0, r4
 800786c:	f010 fdf9 	bl	8018462 <lv_style_get_prop>
 8007870:	bb60      	cbnz	r0, 80078cc <_lv_obj_style_state_compare+0x158>
            else if(lv_style_get_prop(style, LV_STYLE_MIN_WIDTH, &v)) layout_diff = true;
 8007872:	aa01      	add	r2, sp, #4
 8007874:	f241 0102 	movw	r1, #4098	; 0x1002
 8007878:	4620      	mov	r0, r4
 800787a:	f010 fdf2 	bl	8018462 <lv_style_get_prop>
 800787e:	bb28      	cbnz	r0, 80078cc <_lv_obj_style_state_compare+0x158>
            else if(lv_style_get_prop(style, LV_STYLE_MAX_WIDTH, &v)) layout_diff = true;
 8007880:	aa01      	add	r2, sp, #4
 8007882:	f241 0103 	movw	r1, #4099	; 0x1003
 8007886:	4620      	mov	r0, r4
 8007888:	f010 fdeb 	bl	8018462 <lv_style_get_prop>
 800788c:	b9f0      	cbnz	r0, 80078cc <_lv_obj_style_state_compare+0x158>
            else if(lv_style_get_prop(style, LV_STYLE_MIN_HEIGHT, &v)) layout_diff = true;
 800788e:	aa01      	add	r2, sp, #4
 8007890:	f241 0105 	movw	r1, #4101	; 0x1005
 8007894:	4620      	mov	r0, r4
 8007896:	f010 fde4 	bl	8018462 <lv_style_get_prop>
 800789a:	b9b8      	cbnz	r0, 80078cc <_lv_obj_style_state_compare+0x158>
            else if(lv_style_get_prop(style, LV_STYLE_MAX_HEIGHT, &v)) layout_diff = true;
 800789c:	aa01      	add	r2, sp, #4
 800789e:	f241 0106 	movw	r1, #4102	; 0x1006
 80078a2:	4620      	mov	r0, r4
 80078a4:	f010 fddd 	bl	8018462 <lv_style_get_prop>
 80078a8:	b980      	cbnz	r0, 80078cc <_lv_obj_style_state_compare+0x158>
            else if(lv_style_get_prop(style, LV_STYLE_BORDER_WIDTH, &v)) layout_diff = true;
 80078aa:	aa01      	add	r2, sp, #4
 80078ac:	f241 0132 	movw	r1, #4146	; 0x1032
 80078b0:	4620      	mov	r0, r4
 80078b2:	f010 fdd6 	bl	8018462 <lv_style_get_prop>
 80078b6:	b948      	cbnz	r0, 80078cc <_lv_obj_style_state_compare+0x158>
            if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_WIDTH, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 80078b8:	aa01      	add	r2, sp, #4
 80078ba:	f640 010a 	movw	r1, #2058	; 0x80a
 80078be:	4620      	mov	r0, r4
 80078c0:	f010 fdcf 	bl	8018462 <lv_style_get_prop>
 80078c4:	b150      	cbz	r0, 80078dc <_lv_obj_style_state_compare+0x168>
                    res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 80078c6:	2502      	movs	r5, #2
    for(i = 0; i < obj->style_cnt; i++) {
 80078c8:	3601      	adds	r6, #1
 80078ca:	e75c      	b.n	8007786 <_lv_obj_style_state_compare+0x12>
                if(part_act == LV_PART_MAIN) {
 80078cc:	f41a 0f7f 	tst.w	sl, #16711680	; 0xff0000
 80078d0:	d1f9      	bne.n	80078c6 <_lv_obj_style_state_compare+0x152>
                    return _LV_STYLE_STATE_CMP_DIFF_LAYOUT;
 80078d2:	2503      	movs	r5, #3
}
 80078d4:	4628      	mov	r0, r5
 80078d6:	b002      	add	sp, #8
 80078d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            else if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_HEIGHT, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 80078dc:	aa01      	add	r2, sp, #4
 80078de:	f640 010b 	movw	r1, #2059	; 0x80b
 80078e2:	4620      	mov	r0, r4
 80078e4:	f010 fdbd 	bl	8018462 <lv_style_get_prop>
 80078e8:	2800      	cmp	r0, #0
 80078ea:	d1ec      	bne.n	80078c6 <_lv_obj_style_state_compare+0x152>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_ANGLE, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 80078ec:	aa01      	add	r2, sp, #4
 80078ee:	f640 010f 	movw	r1, #2063	; 0x80f
 80078f2:	4620      	mov	r0, r4
 80078f4:	f010 fdb5 	bl	8018462 <lv_style_get_prop>
 80078f8:	2800      	cmp	r0, #0
 80078fa:	d1e4      	bne.n	80078c6 <_lv_obj_style_state_compare+0x152>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_ZOOM, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 80078fc:	aa01      	add	r2, sp, #4
 80078fe:	f640 010e 	movw	r1, #2062	; 0x80e
 8007902:	4620      	mov	r0, r4
 8007904:	f010 fdad 	bl	8018462 <lv_style_get_prop>
 8007908:	2800      	cmp	r0, #0
 800790a:	d1dc      	bne.n	80078c6 <_lv_obj_style_state_compare+0x152>
            else if(lv_style_get_prop(style, LV_STYLE_OUTLINE_OPA, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800790c:	aa01      	add	r2, sp, #4
 800790e:	f640 013c 	movw	r1, #2108	; 0x83c
 8007912:	4620      	mov	r0, r4
 8007914:	f010 fda5 	bl	8018462 <lv_style_get_prop>
 8007918:	2800      	cmp	r0, #0
 800791a:	d1d4      	bne.n	80078c6 <_lv_obj_style_state_compare+0x152>
            else if(lv_style_get_prop(style, LV_STYLE_OUTLINE_PAD, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800791c:	aa01      	add	r2, sp, #4
 800791e:	f640 013d 	movw	r1, #2109	; 0x83d
 8007922:	4620      	mov	r0, r4
 8007924:	f010 fd9d 	bl	8018462 <lv_style_get_prop>
 8007928:	2800      	cmp	r0, #0
 800792a:	d1cc      	bne.n	80078c6 <_lv_obj_style_state_compare+0x152>
            else if(lv_style_get_prop(style, LV_STYLE_OUTLINE_WIDTH, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800792c:	aa01      	add	r2, sp, #4
 800792e:	f640 013a 	movw	r1, #2106	; 0x83a
 8007932:	4620      	mov	r0, r4
 8007934:	f010 fd95 	bl	8018462 <lv_style_get_prop>
 8007938:	2800      	cmp	r0, #0
 800793a:	d1c4      	bne.n	80078c6 <_lv_obj_style_state_compare+0x152>
            else if(lv_style_get_prop(style, LV_STYLE_SHADOW_WIDTH, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800793c:	aa01      	add	r2, sp, #4
 800793e:	f44f 6104 	mov.w	r1, #2112	; 0x840
 8007942:	4620      	mov	r0, r4
 8007944:	f010 fd8d 	bl	8018462 <lv_style_get_prop>
 8007948:	2800      	cmp	r0, #0
 800794a:	d1bc      	bne.n	80078c6 <_lv_obj_style_state_compare+0x152>
            else if(lv_style_get_prop(style, LV_STYLE_SHADOW_OPA, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800794c:	aa01      	add	r2, sp, #4
 800794e:	f640 0145 	movw	r1, #2117	; 0x845
 8007952:	4620      	mov	r0, r4
 8007954:	f010 fd85 	bl	8018462 <lv_style_get_prop>
 8007958:	2800      	cmp	r0, #0
 800795a:	d1b4      	bne.n	80078c6 <_lv_obj_style_state_compare+0x152>
            else if(lv_style_get_prop(style, LV_STYLE_SHADOW_OFS_X, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800795c:	aa01      	add	r2, sp, #4
 800795e:	f640 0141 	movw	r1, #2113	; 0x841
 8007962:	4620      	mov	r0, r4
 8007964:	f010 fd7d 	bl	8018462 <lv_style_get_prop>
 8007968:	2800      	cmp	r0, #0
 800796a:	d1ac      	bne.n	80078c6 <_lv_obj_style_state_compare+0x152>
            else if(lv_style_get_prop(style, LV_STYLE_SHADOW_OFS_Y, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800796c:	aa01      	add	r2, sp, #4
 800796e:	f640 0142 	movw	r1, #2114	; 0x842
 8007972:	4620      	mov	r0, r4
 8007974:	f010 fd75 	bl	8018462 <lv_style_get_prop>
 8007978:	2800      	cmp	r0, #0
 800797a:	d1a4      	bne.n	80078c6 <_lv_obj_style_state_compare+0x152>
            else if(lv_style_get_prop(style, LV_STYLE_SHADOW_SPREAD, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800797c:	aa01      	add	r2, sp, #4
 800797e:	f640 0143 	movw	r1, #2115	; 0x843
 8007982:	4620      	mov	r0, r4
 8007984:	f010 fd6d 	bl	8018462 <lv_style_get_prop>
 8007988:	2800      	cmp	r0, #0
 800798a:	d19c      	bne.n	80078c6 <_lv_obj_style_state_compare+0x152>
            else if(lv_style_get_prop(style, LV_STYLE_LINE_WIDTH, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800798c:	aa01      	add	r2, sp, #4
 800798e:	f640 0149 	movw	r1, #2121	; 0x849
 8007992:	4620      	mov	r0, r4
 8007994:	f010 fd65 	bl	8018462 <lv_style_get_prop>
 8007998:	2800      	cmp	r0, #0
 800799a:	d194      	bne.n	80078c6 <_lv_obj_style_state_compare+0x152>
            else if(res == _LV_STYLE_STATE_CMP_SAME) res = _LV_STYLE_STATE_CMP_DIFF_REDRAW;
 800799c:	2d01      	cmp	r5, #1
 800799e:	bf38      	it	cc
 80079a0:	2501      	movcc	r5, #1
 80079a2:	e791      	b.n	80078c8 <_lv_obj_style_state_compare+0x154>

080079a4 <lv_obj_style_get_selector_state>:
}
 80079a4:	b280      	uxth	r0, r0
 80079a6:	4770      	bx	lr

080079a8 <lv_obj_style_get_selector_part>:
}
 80079a8:	f400 007f 	and.w	r0, r0, #16711680	; 0xff0000
 80079ac:	4770      	bx	lr

080079ae <lv_obj_get_screen>:
    return NULL;
}

lv_obj_t * lv_obj_get_parent(const lv_obj_t * obj)
{
    if(obj == NULL) return NULL;
 80079ae:	b108      	cbz	r0, 80079b4 <lv_obj_get_screen+0x6>
    LV_ASSERT_OBJ(obj, MY_CLASS);

    return obj->parent;
 80079b0:	6843      	ldr	r3, [r0, #4]
    } while(par != NULL);
 80079b2:	b903      	cbnz	r3, 80079b6 <lv_obj_get_screen+0x8>
}
 80079b4:	4770      	bx	lr
 80079b6:	4618      	mov	r0, r3
 80079b8:	e7f9      	b.n	80079ae <lv_obj_get_screen>
	...

080079bc <lv_obj_get_disp>:
{
 80079bc:	b538      	push	{r3, r4, r5, lr}
    if(obj->parent == NULL) scr = obj;  /*`obj` is a screen*/
 80079be:	6843      	ldr	r3, [r0, #4]
{
 80079c0:	4604      	mov	r4, r0
    if(obj->parent == NULL) scr = obj;  /*`obj` is a screen*/
 80079c2:	b113      	cbz	r3, 80079ca <lv_obj_get_disp+0xe>
    else scr = lv_obj_get_screen(obj);  /*get the screen of `obj`*/
 80079c4:	f7ff fff3 	bl	80079ae <lv_obj_get_screen>
 80079c8:	4604      	mov	r4, r0
    _LV_LL_READ(&LV_GC_ROOT(_lv_disp_ll), d) {
 80079ca:	4d0b      	ldr	r5, [pc, #44]	; (80079f8 <lv_obj_get_disp+0x3c>)
 80079cc:	480a      	ldr	r0, [pc, #40]	; (80079f8 <lv_obj_get_disp+0x3c>)
 80079ce:	f00f fdae 	bl	801752e <_lv_ll_get_head>
 80079d2:	b178      	cbz	r0, 80079f4 <lv_obj_get_disp+0x38>
        for(i = 0; i < d->screen_cnt; i++) {
 80079d4:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80079d6:	2300      	movs	r3, #0
 80079d8:	e005      	b.n	80079e6 <lv_obj_get_disp+0x2a>
            if(d->screens[i] == scr) return d;
 80079da:	68c1      	ldr	r1, [r0, #12]
 80079dc:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80079e0:	42a1      	cmp	r1, r4
 80079e2:	d007      	beq.n	80079f4 <lv_obj_get_disp+0x38>
        for(i = 0; i < d->screen_cnt; i++) {
 80079e4:	3301      	adds	r3, #1
 80079e6:	429a      	cmp	r2, r3
 80079e8:	d1f7      	bne.n	80079da <lv_obj_get_disp+0x1e>
    _LV_LL_READ(&LV_GC_ROOT(_lv_disp_ll), d) {
 80079ea:	4601      	mov	r1, r0
 80079ec:	4628      	mov	r0, r5
 80079ee:	f00f fda4 	bl	801753a <_lv_ll_get_next>
 80079f2:	e7ee      	b.n	80079d2 <lv_obj_get_disp+0x16>
}
 80079f4:	bd38      	pop	{r3, r4, r5, pc}
 80079f6:	bf00      	nop
 80079f8:	2000ae08 	.word	0x2000ae08

080079fc <lv_obj_get_parent>:
    if(obj == NULL) return NULL;
 80079fc:	b100      	cbz	r0, 8007a00 <lv_obj_get_parent+0x4>
    return obj->parent;
 80079fe:	6840      	ldr	r0, [r0, #4]
}
 8007a00:	4770      	bx	lr

08007a02 <lv_obj_get_child>:

lv_obj_t * lv_obj_get_child(const lv_obj_t * obj, int32_t id)
{
    LV_ASSERT_OBJ(obj, MY_CLASS);

    if(obj->spec_attr == NULL) return NULL;
 8007a02:	6880      	ldr	r0, [r0, #8]
 8007a04:	b158      	cbz	r0, 8007a1e <lv_obj_get_child+0x1c>

    uint32_t idu;
    if(id < 0) {
 8007a06:	2900      	cmp	r1, #0
 8007a08:	6843      	ldr	r3, [r0, #4]
 8007a0a:	da01      	bge.n	8007a10 <lv_obj_get_child+0xe>
        id = obj->spec_attr->child_cnt + id;
        if(id < 0) return NULL;
 8007a0c:	18c9      	adds	r1, r1, r3
 8007a0e:	d405      	bmi.n	8007a1c <lv_obj_get_child+0x1a>
        idu = (uint32_t) id;
    } else {
        idu = id;
    }

    if(idu >= obj->spec_attr->child_cnt) return NULL;
 8007a10:	4299      	cmp	r1, r3
 8007a12:	d203      	bcs.n	8007a1c <lv_obj_get_child+0x1a>
    else return obj->spec_attr->children[id];
 8007a14:	6803      	ldr	r3, [r0, #0]
 8007a16:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8007a1a:	4770      	bx	lr
    if(obj->spec_attr == NULL) return NULL;
 8007a1c:	2000      	movs	r0, #0
}
 8007a1e:	4770      	bx	lr

08007a20 <lv_obj_get_child_cnt>:

uint32_t lv_obj_get_child_cnt(const lv_obj_t * obj)
{
    LV_ASSERT_OBJ(obj, MY_CLASS);
    if(obj->spec_attr == NULL) return 0;
 8007a20:	6880      	ldr	r0, [r0, #8]
 8007a22:	b100      	cbz	r0, 8007a26 <lv_obj_get_child_cnt+0x6>
    return obj->spec_attr->child_cnt;
 8007a24:	6840      	ldr	r0, [r0, #4]
}
 8007a26:	4770      	bx	lr

08007a28 <lv_obj_get_child_id>:

uint32_t lv_obj_get_child_id(const lv_obj_t * obj)
{
 8007a28:	b570      	push	{r4, r5, r6, lr}
    if(obj == NULL) return NULL;
 8007a2a:	4604      	mov	r4, r0
 8007a2c:	b1a0      	cbz	r0, 8007a58 <lv_obj_get_child_id+0x30>
    return obj->parent;
 8007a2e:	6845      	ldr	r5, [r0, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_obj_t * parent = lv_obj_get_parent(obj);
    if(parent == NULL) return 0;
 8007a30:	b1a5      	cbz	r5, 8007a5c <lv_obj_get_child_id+0x34>

    uint32_t i = 0;
    for(i = 0; i < lv_obj_get_child_cnt(parent); i++) {
 8007a32:	4628      	mov	r0, r5
 8007a34:	f7ff fff4 	bl	8007a20 <lv_obj_get_child_cnt>
 8007a38:	2200      	movs	r2, #0
 8007a3a:	4606      	mov	r6, r0
 8007a3c:	4296      	cmp	r6, r2
 8007a3e:	d103      	bne.n	8007a48 <lv_obj_get_child_id+0x20>
        if(lv_obj_get_child(parent, i) == obj) return i;
    }

    return 0xFFFFFFFF; /*Shouldn't happen*/
 8007a40:	f04f 32ff 	mov.w	r2, #4294967295
}
 8007a44:	4610      	mov	r0, r2
 8007a46:	bd70      	pop	{r4, r5, r6, pc}
        if(lv_obj_get_child(parent, i) == obj) return i;
 8007a48:	4611      	mov	r1, r2
 8007a4a:	4628      	mov	r0, r5
 8007a4c:	f7ff ffd9 	bl	8007a02 <lv_obj_get_child>
 8007a50:	4284      	cmp	r4, r0
 8007a52:	d0f7      	beq.n	8007a44 <lv_obj_get_child_id+0x1c>
    for(i = 0; i < lv_obj_get_child_cnt(parent); i++) {
 8007a54:	3201      	adds	r2, #1
 8007a56:	e7f1      	b.n	8007a3c <lv_obj_get_child_id+0x14>
    if(parent == NULL) return 0;
 8007a58:	4602      	mov	r2, r0
 8007a5a:	e7f3      	b.n	8007a44 <lv_obj_get_child_id+0x1c>
 8007a5c:	462a      	mov	r2, r5
 8007a5e:	e7f1      	b.n	8007a44 <lv_obj_get_child_id+0x1c>

08007a60 <obj_del_core>:

    lv_obj_del(obj);
}

static void obj_del_core(lv_obj_t * obj)
{
 8007a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    /*Let the user free the resources used in `LV_EVENT_DELETE`*/
    lv_res_t res = lv_event_send(obj, LV_EVENT_DELETE, NULL);
 8007a62:	2200      	movs	r2, #0
 8007a64:	2121      	movs	r1, #33	; 0x21
{
 8007a66:	4605      	mov	r5, r0
    lv_res_t res = lv_event_send(obj, LV_EVENT_DELETE, NULL);
 8007a68:	f7fa fa2e 	bl	8001ec8 <lv_event_send>
    if(res == LV_RES_INV) return;
 8007a6c:	2800      	cmp	r0, #0
 8007a6e:	f000 8084 	beq.w	8007b7a <obj_del_core+0x11a>

    /*Delete from the group*/
    lv_group_t * group = lv_obj_get_group(obj);
 8007a72:	4628      	mov	r0, r5
 8007a74:	f7fc f9b4 	bl	8003de0 <lv_obj_get_group>
    if(group) lv_group_remove_obj(obj);
 8007a78:	4607      	mov	r7, r0
 8007a7a:	b110      	cbz	r0, 8007a82 <obj_del_core+0x22>
 8007a7c:	4628      	mov	r0, r5
 8007a7e:	f7fa fb86 	bl	800218e <lv_group_remove_obj>

    /*Remove the animations from this object*/
    lv_anim_del(obj, NULL);
 8007a82:	2100      	movs	r1, #0
 8007a84:	4628      	mov	r0, r5
 8007a86:	f00f f8f3 	bl	8016c70 <lv_anim_del>

    /*Recursively delete the children*/
    lv_obj_t * child = lv_obj_get_child(obj, 0);
    while(child) {
        obj_del_core(child);
        child = lv_obj_get_child(obj, 0);
 8007a8a:	2100      	movs	r1, #0
 8007a8c:	4628      	mov	r0, r5
 8007a8e:	f7ff ffb8 	bl	8007a02 <lv_obj_get_child>
 8007a92:	4606      	mov	r6, r0
    while(child) {
 8007a94:	bb20      	cbnz	r0, 8007ae0 <obj_del_core+0x80>
    }

    _lv_event_mark_deleted(obj);
 8007a96:	4628      	mov	r0, r5
 8007a98:	f7fa fa3c 	bl	8001f14 <_lv_event_mark_deleted>

    /*Remove all style*/
    lv_obj_enable_style_refresh(false); /*No need to refresh the style because the object will be deleted*/
 8007a9c:	4630      	mov	r0, r6
 8007a9e:	f7ff fc5d 	bl	800735c <lv_obj_enable_style_refresh>
 * Remove all styles from an object
 * @param obj       pointer to an object
 */
static inline void lv_obj_remove_style_all(struct _lv_obj_t * obj)
{
    lv_obj_remove_style(obj, NULL, LV_PART_ANY | LV_STATE_ANY);
 8007aa2:	4a36      	ldr	r2, [pc, #216]	; (8007b7c <obj_del_core+0x11c>)
 8007aa4:	4631      	mov	r1, r6
 8007aa6:	4628      	mov	r0, r5
 8007aa8:	f7ff fb82 	bl	80071b0 <lv_obj_remove_style>
    lv_obj_remove_style_all(obj);
    lv_obj_enable_style_refresh(true);
 8007aac:	2001      	movs	r0, #1
 8007aae:	f7ff fc55 	bl	800735c <lv_obj_enable_style_refresh>

    /*Reset all input devices if the object to delete is used*/
    lv_indev_t * indev = lv_indev_get_next(NULL);
 8007ab2:	4630      	mov	r0, r6
        }

        if(indev->group == group && obj == lv_indev_get_obj_act()) {
            lv_indev_reset(indev, obj);
        }
        indev = lv_indev_get_next(indev);
 8007ab4:	f00e ff76 	bl	80169a4 <lv_indev_get_next>
 8007ab8:	4604      	mov	r4, r0
    while(indev) {
 8007aba:	b9a8      	cbnz	r0, 8007ae8 <obj_del_core+0x88>
    }

    /*All children deleted. Now clean up the object specific data*/
    _lv_obj_destructor(obj);
 8007abc:	4628      	mov	r0, r5
 8007abe:	f7fc fced 	bl	800449c <_lv_obj_destructor>

    /*Remove the screen for the screen list*/
    if(obj->parent == NULL) {
 8007ac2:	686b      	ldr	r3, [r5, #4]
        lv_disp_t * disp = lv_obj_get_disp(obj);
 8007ac4:	4628      	mov	r0, r5
    if(obj->parent == NULL) {
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d13f      	bne.n	8007b4a <obj_del_core+0xea>
        lv_disp_t * disp = lv_obj_get_disp(obj);
 8007aca:	f7ff ff77 	bl	80079bc <lv_obj_get_disp>
 8007ace:	4606      	mov	r6, r0
        uint32_t i;
        /*Find the screen in the list*/
        for(i = 0; i < disp->screen_cnt; i++) {
 8007ad0:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8007ad2:	68c0      	ldr	r0, [r0, #12]
 8007ad4:	428c      	cmp	r4, r1
 8007ad6:	d122      	bne.n	8007b1e <obj_del_core+0xbe>
 8007ad8:	eb00 0384 	add.w	r3, r0, r4, lsl #2
            if(disp->screens[i] == obj) break;
        }

        uint32_t id = i;
        for(i = id; i < disp->screen_cnt - 1; i++) {
 8007adc:	3901      	subs	r1, #1
 8007ade:	e028      	b.n	8007b32 <obj_del_core+0xd2>
        obj_del_core(child);
 8007ae0:	4630      	mov	r0, r6
 8007ae2:	f7ff ffbd 	bl	8007a60 <obj_del_core>
 8007ae6:	e7d0      	b.n	8007a8a <obj_del_core+0x2a>
        if(indev->proc.types.pointer.act_obj == obj || indev->proc.types.pointer.last_obj == obj) {
 8007ae8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007aea:	429d      	cmp	r5, r3
 8007aec:	d002      	beq.n	8007af4 <obj_del_core+0x94>
 8007aee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007af0:	429d      	cmp	r5, r3
 8007af2:	d103      	bne.n	8007afc <obj_del_core+0x9c>
            lv_indev_reset(indev, obj);
 8007af4:	4629      	mov	r1, r5
 8007af6:	4620      	mov	r0, r4
 8007af8:	f7fa fc86 	bl	8002408 <lv_indev_reset>
        if(indev->proc.types.pointer.last_pressed == obj) {
 8007afc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007afe:	429d      	cmp	r5, r3
        if(indev->group == group && obj == lv_indev_get_obj_act()) {
 8007b00:	6d23      	ldr	r3, [r4, #80]	; 0x50
            indev->proc.types.pointer.last_pressed = NULL;
 8007b02:	bf08      	it	eq
 8007b04:	6326      	streq	r6, [r4, #48]	; 0x30
        if(indev->group == group && obj == lv_indev_get_obj_act()) {
 8007b06:	429f      	cmp	r7, r3
 8007b08:	d107      	bne.n	8007b1a <obj_del_core+0xba>
 8007b0a:	f7fa fd19 	bl	8002540 <lv_indev_get_obj_act>
 8007b0e:	4285      	cmp	r5, r0
 8007b10:	d103      	bne.n	8007b1a <obj_del_core+0xba>
            lv_indev_reset(indev, obj);
 8007b12:	4629      	mov	r1, r5
 8007b14:	4620      	mov	r0, r4
 8007b16:	f7fa fc77 	bl	8002408 <lv_indev_reset>
        indev = lv_indev_get_next(indev);
 8007b1a:	4620      	mov	r0, r4
 8007b1c:	e7ca      	b.n	8007ab4 <obj_del_core+0x54>
            if(disp->screens[i] == obj) break;
 8007b1e:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
 8007b22:	429d      	cmp	r5, r3
 8007b24:	d0d8      	beq.n	8007ad8 <obj_del_core+0x78>
        for(i = 0; i < disp->screen_cnt; i++) {
 8007b26:	3401      	adds	r4, #1
 8007b28:	e7d4      	b.n	8007ad4 <obj_del_core+0x74>
            disp->screens[i] = disp->screens[i + 1];
 8007b2a:	685a      	ldr	r2, [r3, #4]
 8007b2c:	3401      	adds	r4, #1
 8007b2e:	f843 2b04 	str.w	r2, [r3], #4
        for(i = id; i < disp->screen_cnt - 1; i++) {
 8007b32:	428c      	cmp	r4, r1
 8007b34:	d3f9      	bcc.n	8007b2a <obj_del_core+0xca>
        }
        disp->screen_cnt--;
 8007b36:	6271      	str	r1, [r6, #36]	; 0x24
        disp->screens = lv_mem_realloc(disp->screens, disp->screen_cnt * sizeof(lv_obj_t *));
 8007b38:	0089      	lsls	r1, r1, #2
 8007b3a:	f00f ff93 	bl	8017a64 <lv_mem_realloc>
 8007b3e:	60f0      	str	r0, [r6, #12]
        obj->parent->spec_attr->child_cnt--;
        obj->parent->spec_attr->children = lv_mem_realloc(obj->parent->spec_attr->children, obj->parent->spec_attr->child_cnt * sizeof(lv_obj_t *));
    }

    /*Free the object itself*/
    lv_mem_free(obj);
 8007b40:	4628      	mov	r0, r5
}
 8007b42:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    lv_mem_free(obj);
 8007b46:	f00f bdf5 	b.w	8017734 <lv_mem_free>
        uint32_t id = lv_obj_get_child_id(obj);
 8007b4a:	f7ff ff6d 	bl	8007a28 <lv_obj_get_child_id>
        for(i = id; i < obj->parent->spec_attr->child_cnt - 1; i++) {
 8007b4e:	686b      	ldr	r3, [r5, #4]
 8007b50:	689c      	ldr	r4, [r3, #8]
 8007b52:	6861      	ldr	r1, [r4, #4]
 8007b54:	6823      	ldr	r3, [r4, #0]
 8007b56:	3901      	subs	r1, #1
 8007b58:	4288      	cmp	r0, r1
 8007b5a:	d306      	bcc.n	8007b6a <obj_del_core+0x10a>
        obj->parent->spec_attr->child_cnt--;
 8007b5c:	6061      	str	r1, [r4, #4]
        obj->parent->spec_attr->children = lv_mem_realloc(obj->parent->spec_attr->children, obj->parent->spec_attr->child_cnt * sizeof(lv_obj_t *));
 8007b5e:	4618      	mov	r0, r3
 8007b60:	0089      	lsls	r1, r1, #2
 8007b62:	f00f ff7f 	bl	8017a64 <lv_mem_realloc>
 8007b66:	6020      	str	r0, [r4, #0]
 8007b68:	e7ea      	b.n	8007b40 <obj_del_core+0xe0>
            obj->parent->spec_attr->children[i] = obj->parent->spec_attr->children[i + 1];
 8007b6a:	3001      	adds	r0, #1
 8007b6c:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 8007b70:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8007b74:	f843 2c04 	str.w	r2, [r3, #-4]
        for(i = id; i < obj->parent->spec_attr->child_cnt - 1; i++) {
 8007b78:	e7e9      	b.n	8007b4e <obj_del_core+0xee>
}
 8007b7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b7c:	000fffff 	.word	0x000fffff

08007b80 <lv_obj_del>:
{
 8007b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b82:	4605      	mov	r5, r0
    lv_obj_invalidate(obj);
 8007b84:	f7fd fac8 	bl	8005118 <lv_obj_invalidate>
    if(obj == NULL) return NULL;
 8007b88:	b1ed      	cbz	r5, 8007bc6 <lv_obj_del+0x46>
    return obj->parent;
 8007b8a:	686c      	ldr	r4, [r5, #4]
    if(par) {
 8007b8c:	b1dc      	cbz	r4, 8007bc6 <lv_obj_del+0x46>
    bool act_scr_del = false;
 8007b8e:	2700      	movs	r7, #0
        lv_obj_scrollbar_invalidate(par);
 8007b90:	4620      	mov	r0, r4
 8007b92:	f7ff f87c 	bl	8006c8e <lv_obj_scrollbar_invalidate>
    lv_disp_t * disp = NULL;
 8007b96:	463e      	mov	r6, r7
    obj_del_core(obj);
 8007b98:	4628      	mov	r0, r5
 8007b9a:	f7ff ff61 	bl	8007a60 <obj_del_core>
    if(par) {
 8007b9e:	b174      	cbz	r4, 8007bbe <lv_obj_del+0x3e>
        lv_obj_scroll_to(par, 0, 0, LV_ANIM_OFF);
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	4620      	mov	r0, r4
 8007ba4:	461a      	mov	r2, r3
 8007ba6:	4619      	mov	r1, r3
 8007ba8:	f7fe fd22 	bl	80065f0 <lv_obj_scroll_to>
        if(par->spec_attr) {
 8007bac:	68a3      	ldr	r3, [r4, #8]
 8007bae:	b10b      	cbz	r3, 8007bb4 <lv_obj_del+0x34>
                par->spec_attr->scroll.x = 0;
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	611a      	str	r2, [r3, #16]
        lv_event_send(par, LV_EVENT_CHILD_CHANGED, NULL);
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	2122      	movs	r1, #34	; 0x22
 8007bb8:	4620      	mov	r0, r4
 8007bba:	f7fa f985 	bl	8001ec8 <lv_event_send>
    if(act_scr_del)  {
 8007bbe:	b10f      	cbz	r7, 8007bc4 <lv_obj_del+0x44>
        disp->act_scr = NULL;
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	6133      	str	r3, [r6, #16]
}
 8007bc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        disp = lv_obj_get_disp(obj);
 8007bc6:	4628      	mov	r0, r5
 8007bc8:	f7ff fef8 	bl	80079bc <lv_obj_get_disp>
        if(!disp) return;   /*Shouldn't happen*/
 8007bcc:	4606      	mov	r6, r0
 8007bce:	2800      	cmp	r0, #0
 8007bd0:	d0f8      	beq.n	8007bc4 <lv_obj_del+0x44>
        if(disp->act_scr == obj) act_scr_del = true;
 8007bd2:	6907      	ldr	r7, [r0, #16]
 8007bd4:	2400      	movs	r4, #0
 8007bd6:	1b7b      	subs	r3, r7, r5
 8007bd8:	425f      	negs	r7, r3
 8007bda:	415f      	adcs	r7, r3
 8007bdc:	e7dc      	b.n	8007b98 <lv_obj_del+0x18>

08007bde <lv_refr_get_top_obj>:
 * @param area_p pointer to an area
 * @param obj the first object to start the searching (typically a screen)
 * @return
 */
static lv_obj_t * lv_refr_get_top_obj(const lv_area_t * area_p, lv_obj_t * obj)
{
 8007bde:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
    lv_obj_t * found_p = NULL;

    /*If this object is fully cover the draw area check the children too*/
    if(_lv_area_is_in(area_p, &obj->coords, 0) && lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN) == false) {
 8007be0:	2200      	movs	r2, #0
{
 8007be2:	460e      	mov	r6, r1
    if(_lv_area_is_in(area_p, &obj->coords, 0) && lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN) == false) {
 8007be4:	3114      	adds	r1, #20
{
 8007be6:	4607      	mov	r7, r0
    if(_lv_area_is_in(area_p, &obj->coords, 0) && lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN) == false) {
 8007be8:	f00f fa54 	bl	8017094 <_lv_area_is_in>
 8007bec:	b910      	cbnz	r0, 8007bf4 <lv_refr_get_top_obj+0x16>
    lv_obj_t * found_p = NULL;
 8007bee:	2000      	movs	r0, #0
            }
        }
    }

    return found_p;
}
 8007bf0:	b002      	add	sp, #8
 8007bf2:	bdd0      	pop	{r4, r6, r7, pc}
    if(_lv_area_is_in(area_p, &obj->coords, 0) && lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN) == false) {
 8007bf4:	2101      	movs	r1, #1
 8007bf6:	4630      	mov	r0, r6
 8007bf8:	f7fc f8e3 	bl	8003dc2 <lv_obj_has_flag>
 8007bfc:	4604      	mov	r4, r0
 8007bfe:	2800      	cmp	r0, #0
 8007c00:	d1f5      	bne.n	8007bee <lv_refr_get_top_obj+0x10>
        info.res = LV_COVER_RES_COVER;
 8007c02:	f88d 0000 	strb.w	r0, [sp]
        lv_event_send(obj, LV_EVENT_COVER_CHECK, &info);
 8007c06:	466a      	mov	r2, sp
 8007c08:	2112      	movs	r1, #18
 8007c0a:	4630      	mov	r0, r6
        info.area = area_p;
 8007c0c:	9701      	str	r7, [sp, #4]
        lv_event_send(obj, LV_EVENT_COVER_CHECK, &info);
 8007c0e:	f7fa f95b 	bl	8001ec8 <lv_event_send>
        if(info.res == LV_COVER_RES_MASKED) return NULL;
 8007c12:	f89d 3000 	ldrb.w	r3, [sp]
 8007c16:	2b02      	cmp	r3, #2
 8007c18:	d0e9      	beq.n	8007bee <lv_refr_get_top_obj+0x10>
        for(i = 0; i < lv_obj_get_child_cnt(obj); i++) {
 8007c1a:	4630      	mov	r0, r6
 8007c1c:	f7ff ff00 	bl	8007a20 <lv_obj_get_child_cnt>
 8007c20:	4284      	cmp	r4, r0
 8007c22:	d306      	bcc.n	8007c32 <lv_refr_get_top_obj+0x54>
            if(info.res == LV_COVER_RES_COVER) {
 8007c24:	f89d 3000 	ldrb.w	r3, [sp]
                found_p = obj;
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	bf0c      	ite	eq
 8007c2c:	4630      	moveq	r0, r6
 8007c2e:	2000      	movne	r0, #0
 8007c30:	e7de      	b.n	8007bf0 <lv_refr_get_top_obj+0x12>
            lv_obj_t * child = lv_obj_get_child(obj, i);
 8007c32:	4621      	mov	r1, r4
 8007c34:	4630      	mov	r0, r6
 8007c36:	f7ff fee4 	bl	8007a02 <lv_obj_get_child>
 8007c3a:	4601      	mov	r1, r0
            found_p = lv_refr_get_top_obj(area_p, child);
 8007c3c:	4638      	mov	r0, r7
 8007c3e:	f7ff ffce 	bl	8007bde <lv_refr_get_top_obj>
            if(found_p != NULL) {
 8007c42:	2800      	cmp	r0, #0
 8007c44:	d1d4      	bne.n	8007bf0 <lv_refr_get_top_obj+0x12>
        for(i = 0; i < lv_obj_get_child_cnt(obj); i++) {
 8007c46:	3401      	adds	r4, #1
 8007c48:	e7e7      	b.n	8007c1a <lv_refr_get_top_obj+0x3c>

08007c4a <lv_refr_obj>:
 * Refresh an object an all of its children. (Called recursively)
 * @param obj pointer to an object to refresh
 * @param mask_ori_p pointer to an area, the objects will be drawn only here
 */
static void lv_refr_obj(lv_obj_t * obj, const lv_area_t * mask_ori_p)
{
 8007c4a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c4c:	460f      	mov	r7, r1
 8007c4e:	b08b      	sub	sp, #44	; 0x2c
    /*Do not refresh hidden objects*/
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN)) return;
 8007c50:	2101      	movs	r1, #1
{
 8007c52:	4604      	mov	r4, r0
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN)) return;
 8007c54:	f7fc f8b5 	bl	8003dc2 <lv_obj_has_flag>
 8007c58:	4606      	mov	r6, r0
 8007c5a:	2800      	cmp	r0, #0
 8007c5c:	d14b      	bne.n	8007cf6 <lv_refr_obj+0xac>
    /*Truncate the original mask to the coordinates of the parent
     *because the parent and its children are visible only here*/
    lv_area_t obj_mask;
    lv_area_t obj_ext_mask;
    lv_area_t obj_area;
    lv_coord_t ext_size = _lv_obj_get_ext_draw_size(obj);
 8007c5e:	4620      	mov	r0, r4
 8007c60:	f7fc ff6a 	bl	8004b38 <_lv_obj_get_ext_draw_size>
 8007c64:	4605      	mov	r5, r0
    lv_obj_get_coords(obj, &obj_area);
 8007c66:	a904      	add	r1, sp, #16
 8007c68:	4620      	mov	r0, r4
 8007c6a:	f7fd f8b0 	bl	8004dce <lv_obj_get_coords>
    obj_area.x1 -= ext_size;
 8007c6e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8007c72:	b2ab      	uxth	r3, r5
    obj_area.y1 -= ext_size;
    obj_area.x2 += ext_size;
    obj_area.y2 += ext_size;
 8007c74:	f8bd 0016 	ldrh.w	r0, [sp, #22]
    union_ok = _lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
 8007c78:	4639      	mov	r1, r7
    obj_area.x1 -= ext_size;
 8007c7a:	1ad2      	subs	r2, r2, r3
 8007c7c:	f8ad 2010 	strh.w	r2, [sp, #16]
    obj_area.y1 -= ext_size;
 8007c80:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8007c84:	1ad2      	subs	r2, r2, r3
 8007c86:	f8ad 2012 	strh.w	r2, [sp, #18]
    obj_area.x2 += ext_size;
 8007c8a:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8007c8e:	441a      	add	r2, r3
    obj_area.y2 += ext_size;
 8007c90:	4403      	add	r3, r0
    union_ok = _lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
 8007c92:	a802      	add	r0, sp, #8
    obj_area.x2 += ext_size;
 8007c94:	f8ad 2014 	strh.w	r2, [sp, #20]
    union_ok = _lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
 8007c98:	aa04      	add	r2, sp, #16
    obj_area.y2 += ext_size;
 8007c9a:	f8ad 3016 	strh.w	r3, [sp, #22]
    union_ok = _lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
 8007c9e:	f00f f8fa 	bl	8016e96 <_lv_area_intersect>

    /*Draw the parent and its children only if they ore on 'mask_parent'*/
    if(union_ok != false) {
 8007ca2:	b340      	cbz	r0, 8007cf6 <lv_refr_obj+0xac>
        /*Redraw the object*/
        lv_event_send(obj, LV_EVENT_DRAW_MAIN_BEGIN, &obj_ext_mask);
 8007ca4:	aa02      	add	r2, sp, #8
 8007ca6:	2114      	movs	r1, #20
 8007ca8:	4620      	mov	r0, r4
 8007caa:	f7fa f90d 	bl	8001ec8 <lv_event_send>
        lv_event_send(obj, LV_EVENT_DRAW_MAIN, &obj_ext_mask);
 8007cae:	aa02      	add	r2, sp, #8
 8007cb0:	2115      	movs	r1, #21
 8007cb2:	4620      	mov	r0, r4
 8007cb4:	f7fa f908 	bl	8001ec8 <lv_event_send>
        lv_event_send(obj, LV_EVENT_DRAW_MAIN_END, &obj_ext_mask);
 8007cb8:	aa02      	add	r2, sp, #8
 8007cba:	2116      	movs	r1, #22
 8007cbc:	4620      	mov	r0, r4
 8007cbe:	f7fa f903 	bl	8001ec8 <lv_event_send>
        draw_dsc.border_opa = LV_OPA_30;
        draw_dsc.border_color = debug_color;
        lv_draw_rect(&obj_ext_mask, &obj_ext_mask, &draw_dsc);
#endif
        /*Create a new 'obj_mask' without 'ext_size' because the children can't be visible there*/
        lv_obj_get_coords(obj, &obj_area);
 8007cc2:	a904      	add	r1, sp, #16
 8007cc4:	4620      	mov	r0, r4
 8007cc6:	f7fd f882 	bl	8004dce <lv_obj_get_coords>
        union_ok = _lv_area_intersect(&obj_mask, mask_ori_p, &obj_area);
 8007cca:	aa04      	add	r2, sp, #16
 8007ccc:	4639      	mov	r1, r7
 8007cce:	4668      	mov	r0, sp
 8007cd0:	f00f f8e1 	bl	8016e96 <_lv_area_intersect>
        if(union_ok != false) {
 8007cd4:	2800      	cmp	r0, #0
 8007cd6:	d141      	bne.n	8007d5c <lv_refr_obj+0x112>
                }
            }
        }

        /*If all the children are redrawn make 'post draw' draw*/
        lv_event_send(obj, LV_EVENT_DRAW_POST_BEGIN, &obj_ext_mask);
 8007cd8:	aa02      	add	r2, sp, #8
 8007cda:	2117      	movs	r1, #23
 8007cdc:	4620      	mov	r0, r4
 8007cde:	f7fa f8f3 	bl	8001ec8 <lv_event_send>
        lv_event_send(obj, LV_EVENT_DRAW_POST, &obj_ext_mask);
 8007ce2:	aa02      	add	r2, sp, #8
 8007ce4:	2118      	movs	r1, #24
 8007ce6:	4620      	mov	r0, r4
 8007ce8:	f7fa f8ee 	bl	8001ec8 <lv_event_send>
        lv_event_send(obj, LV_EVENT_DRAW_POST_END, &obj_ext_mask);
 8007cec:	aa02      	add	r2, sp, #8
 8007cee:	2119      	movs	r1, #25
 8007cf0:	4620      	mov	r0, r4
 8007cf2:	f7fa f8e9 	bl	8001ec8 <lv_event_send>
    }
}
 8007cf6:	b00b      	add	sp, #44	; 0x2c
 8007cf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
                lv_obj_t * child = lv_obj_get_child(obj, i);
 8007cfa:	4629      	mov	r1, r5
 8007cfc:	4620      	mov	r0, r4
 8007cfe:	f7ff fe80 	bl	8007a02 <lv_obj_get_child>
 8007d02:	4606      	mov	r6, r0
                lv_obj_get_coords(child, &child_area);
 8007d04:	a908      	add	r1, sp, #32
 8007d06:	f7fd f862 	bl	8004dce <lv_obj_get_coords>
                ext_size = _lv_obj_get_ext_draw_size(child);
 8007d0a:	4630      	mov	r0, r6
 8007d0c:	f7fc ff14 	bl	8004b38 <_lv_obj_get_ext_draw_size>
                child_area.x1 -= ext_size;
 8007d10:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8007d14:	b283      	uxth	r3, r0
                child_area.y2 += ext_size;
 8007d16:	f8bd 0026 	ldrh.w	r0, [sp, #38]	; 0x26
                union_ok = _lv_area_intersect(&mask_child, &obj_mask, &child_area);
 8007d1a:	4669      	mov	r1, sp
                child_area.x1 -= ext_size;
 8007d1c:	1ad2      	subs	r2, r2, r3
 8007d1e:	f8ad 2020 	strh.w	r2, [sp, #32]
                child_area.y1 -= ext_size;
 8007d22:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 8007d26:	1ad2      	subs	r2, r2, r3
 8007d28:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
                child_area.x2 += ext_size;
 8007d2c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8007d30:	441a      	add	r2, r3
                child_area.y2 += ext_size;
 8007d32:	4403      	add	r3, r0
                union_ok = _lv_area_intersect(&mask_child, &obj_mask, &child_area);
 8007d34:	a806      	add	r0, sp, #24
                child_area.x2 += ext_size;
 8007d36:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
                union_ok = _lv_area_intersect(&mask_child, &obj_mask, &child_area);
 8007d3a:	aa08      	add	r2, sp, #32
                child_area.y2 += ext_size;
 8007d3c:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
                union_ok = _lv_area_intersect(&mask_child, &obj_mask, &child_area);
 8007d40:	f00f f8a9 	bl	8016e96 <_lv_area_intersect>
                if(union_ok) {
 8007d44:	b118      	cbz	r0, 8007d4e <lv_refr_obj+0x104>
                    lv_refr_obj(child, &mask_child);
 8007d46:	a906      	add	r1, sp, #24
 8007d48:	4630      	mov	r0, r6
 8007d4a:	f7ff ff7e 	bl	8007c4a <lv_refr_obj>
            for(i = 0; i < lv_obj_get_child_cnt(obj); i++) {
 8007d4e:	3501      	adds	r5, #1
 8007d50:	4620      	mov	r0, r4
 8007d52:	f7ff fe65 	bl	8007a20 <lv_obj_get_child_cnt>
 8007d56:	4285      	cmp	r5, r0
 8007d58:	d3cf      	bcc.n	8007cfa <lv_refr_obj+0xb0>
 8007d5a:	e7bd      	b.n	8007cd8 <lv_refr_obj+0x8e>
 8007d5c:	4635      	mov	r5, r6
 8007d5e:	e7f7      	b.n	8007d50 <lv_refr_obj+0x106>

08007d60 <lv_refr_obj_and_children>:
{
 8007d60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d64:	460e      	mov	r6, r1
    if(top_p == NULL) top_p = lv_disp_get_scr_act(disp_refr);
 8007d66:	4605      	mov	r5, r0
 8007d68:	b928      	cbnz	r0, 8007d76 <lv_refr_obj_and_children+0x16>
 8007d6a:	4b1f      	ldr	r3, [pc, #124]	; (8007de8 <lv_refr_obj_and_children+0x88>)
 8007d6c:	6818      	ldr	r0, [r3, #0]
 8007d6e:	f7fa f811 	bl	8001d94 <lv_disp_get_scr_act>
    if(top_p == NULL) return;  /*Shouldn't happen*/
 8007d72:	4605      	mov	r5, r0
 8007d74:	b140      	cbz	r0, 8007d88 <lv_refr_obj_and_children+0x28>
    lv_refr_obj(top_p, mask_p);
 8007d76:	4628      	mov	r0, r5
 8007d78:	4631      	mov	r1, r6
 8007d7a:	f7ff ff66 	bl	8007c4a <lv_refr_obj>
    par = lv_obj_get_parent(top_p);
 8007d7e:	4628      	mov	r0, r5
 8007d80:	f7ff fe3c 	bl	80079fc <lv_obj_get_parent>
        par = lv_obj_get_parent(par);
 8007d84:	4604      	mov	r4, r0
    while(par != NULL) {
 8007d86:	bb58      	cbnz	r0, 8007de0 <lv_refr_obj_and_children+0x80>
}
 8007d88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            lv_obj_t * child = lv_obj_get_child(par, i);
 8007d8c:	4639      	mov	r1, r7
 8007d8e:	4620      	mov	r0, r4
 8007d90:	f7ff fe37 	bl	8007a02 <lv_obj_get_child>
            if(!go) {
 8007d94:	f1b8 0f00 	cmp.w	r8, #0
 8007d98:	d11e      	bne.n	8007dd8 <lv_refr_obj_and_children+0x78>
                if(child == border_p) go = true;
 8007d9a:	1a2b      	subs	r3, r5, r0
 8007d9c:	f1d3 0800 	rsbs	r8, r3, #0
 8007da0:	eb48 0803 	adc.w	r8, r8, r3
        for(i = 0; i < lv_obj_get_child_cnt(par); i++) {
 8007da4:	3701      	adds	r7, #1
 8007da6:	4620      	mov	r0, r4
 8007da8:	f7ff fe3a 	bl	8007a20 <lv_obj_get_child_cnt>
 8007dac:	42b8      	cmp	r0, r7
 8007dae:	d8ed      	bhi.n	8007d8c <lv_refr_obj_and_children+0x2c>
        lv_event_send(par, LV_EVENT_DRAW_POST_BEGIN, (void*)mask_p);
 8007db0:	4632      	mov	r2, r6
 8007db2:	2117      	movs	r1, #23
 8007db4:	4620      	mov	r0, r4
        par = lv_obj_get_parent(par);
 8007db6:	4625      	mov	r5, r4
        lv_event_send(par, LV_EVENT_DRAW_POST_BEGIN, (void*)mask_p);
 8007db8:	f7fa f886 	bl	8001ec8 <lv_event_send>
        lv_event_send(par, LV_EVENT_DRAW_POST, (void*)mask_p);
 8007dbc:	4632      	mov	r2, r6
 8007dbe:	2118      	movs	r1, #24
 8007dc0:	4620      	mov	r0, r4
 8007dc2:	f7fa f881 	bl	8001ec8 <lv_event_send>
        lv_event_send(par, LV_EVENT_DRAW_POST_END, (void*)mask_p);
 8007dc6:	4632      	mov	r2, r6
 8007dc8:	2119      	movs	r1, #25
 8007dca:	4620      	mov	r0, r4
 8007dcc:	f7fa f87c 	bl	8001ec8 <lv_event_send>
        par = lv_obj_get_parent(par);
 8007dd0:	4620      	mov	r0, r4
 8007dd2:	f7ff fe13 	bl	80079fc <lv_obj_get_parent>
 8007dd6:	e7d5      	b.n	8007d84 <lv_refr_obj_and_children+0x24>
                lv_refr_obj(child, mask_p);
 8007dd8:	4631      	mov	r1, r6
 8007dda:	f7ff ff36 	bl	8007c4a <lv_refr_obj>
 8007dde:	e7e1      	b.n	8007da4 <lv_refr_obj_and_children+0x44>
        for(i = 0; i < lv_obj_get_child_cnt(par); i++) {
 8007de0:	2700      	movs	r7, #0
        bool go = false;
 8007de2:	46b8      	mov	r8, r7
 8007de4:	e7df      	b.n	8007da6 <lv_refr_obj_and_children+0x46>
 8007de6:	bf00      	nop
 8007de8:	200029b8 	.word	0x200029b8

08007dec <draw_buf_flush>:

/**
 * Flush the content of the draw buffer
 */
static void draw_buf_flush(void)
{
 8007dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp_refr);
 8007df0:	4dad      	ldr	r5, [pc, #692]	; (80080a8 <draw_buf_flush+0x2bc>)
{
 8007df2:	ed2d 8b02 	vpush	{d8}
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp_refr);
 8007df6:	6828      	ldr	r0, [r5, #0]
{
 8007df8:	b091      	sub	sp, #68	; 0x44
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp_refr);
 8007dfa:	f00e fd99 	bl	8016930 <lv_disp_get_draw_buf>
    lv_color_t * color_p = draw_buf->buf_act;

    draw_buf->flushing = 1;
 8007dfe:	2301      	movs	r3, #1

    if(disp_refr->driver->draw_buf->last_area && disp_refr->driver->draw_buf->last_part) draw_buf->flushing_last = 1;
 8007e00:	682f      	ldr	r7, [r5, #0]
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp_refr);
 8007e02:	4604      	mov	r4, r0
    draw_buf->flushing = 1;
 8007e04:	6183      	str	r3, [r0, #24]
    lv_color_t * color_p = draw_buf->buf_act;
 8007e06:	6882      	ldr	r2, [r0, #8]
    if(disp_refr->driver->draw_buf->last_area && disp_refr->driver->draw_buf->last_part) draw_buf->flushing_last = 1;
 8007e08:	6838      	ldr	r0, [r7, #0]
 8007e0a:	6841      	ldr	r1, [r0, #4]
 8007e0c:	6a0e      	ldr	r6, [r1, #32]
 8007e0e:	f016 0f01 	tst.w	r6, #1
 8007e12:	462e      	mov	r6, r5
 8007e14:	d04d      	beq.n	8007eb2 <draw_buf_flush+0xc6>
 8007e16:	6a09      	ldr	r1, [r1, #32]
 8007e18:	078d      	lsls	r5, r1, #30
 8007e1a:	d54a      	bpl.n	8007eb2 <draw_buf_flush+0xc6>
    else draw_buf->flushing_last = 0;
 8007e1c:	61e3      	str	r3, [r4, #28]

    /*Flush the rendered content to the display*/
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
    if(disp->driver->gpu_wait_cb) disp->driver->gpu_wait_cb(disp->driver);
 8007e1e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007e20:	b113      	cbz	r3, 8007e28 <draw_buf_flush+0x3c>
 8007e22:	9201      	str	r2, [sp, #4]
 8007e24:	4798      	blx	r3
 8007e26:	9a01      	ldr	r2, [sp, #4]

    if(disp->driver->flush_cb) {
 8007e28:	6838      	ldr	r0, [r7, #0]
 8007e2a:	68c3      	ldr	r3, [r0, #12]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	f000 80a0 	beq.w	8007f72 <draw_buf_flush+0x186>
        /*Rotate the buffer to the display's native orientation if necessary*/
        if(disp->driver->rotated != LV_DISP_ROT_NONE && disp->driver->sw_rotate) {
 8007e32:	7a01      	ldrb	r1, [r0, #8]
 8007e34:	f104 0510 	add.w	r5, r4, #16
 8007e38:	f011 0f18 	tst.w	r1, #24
 8007e3c:	ee08 5a10 	vmov	s16, r5
 8007e40:	f000 8197 	beq.w	8008172 <draw_buf_flush+0x386>
 8007e44:	0789      	lsls	r1, r1, #30
 8007e46:	f140 8194 	bpl.w	8008172 <draw_buf_flush+0x386>
    lv_disp_drv_t * drv = disp_refr->driver;
 8007e4a:	6830      	ldr	r0, [r6, #0]
            draw_buf_rotate(&draw_buf->area, draw_buf->buf_act);
 8007e4c:	68a5      	ldr	r5, [r4, #8]
    lv_disp_drv_t * drv = disp_refr->driver;
 8007e4e:	6807      	ldr	r7, [r0, #0]
    if(disp_refr->driver->full_refresh && drv->sw_rotate) {
 8007e50:	7a3b      	ldrb	r3, [r7, #8]
 8007e52:	f003 0203 	and.w	r2, r3, #3
 8007e56:	2a03      	cmp	r2, #3
 8007e58:	f000 808b 	beq.w	8007f72 <draw_buf_flush+0x186>
    if(drv->rotated == LV_DISP_ROT_180) {
 8007e5c:	f003 0218 	and.w	r2, r3, #24
 8007e60:	2a10      	cmp	r2, #16
 8007e62:	d133      	bne.n	8007ecc <draw_buf_flush+0xe0>
 8007e64:	8aa0      	ldrh	r0, [r4, #20]
    uint32_t i = total - 1, j = 0;
 8007e66:	f04f 3eff 	mov.w	lr, #4294967295
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8007e6a:	f8b4 c016 	ldrh.w	ip, [r4, #22]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8007e6e:	8a21      	ldrh	r1, [r4, #16]
 8007e70:	1c43      	adds	r3, r0, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8007e72:	8a66      	ldrh	r6, [r4, #18]
 8007e74:	f10c 0201 	add.w	r2, ip, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8007e78:	1a5b      	subs	r3, r3, r1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8007e7a:	1b92      	subs	r2, r2, r6
 8007e7c:	fb13 e302 	smlabb	r3, r3, r2, lr
 8007e80:	2200      	movs	r2, #0
    while(i > j) {
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d817      	bhi.n	8007eb6 <draw_buf_flush+0xca>
    area->y2 = drv->ver_res - area->y1 - 1;
 8007e86:	887a      	ldrh	r2, [r7, #2]
 8007e88:	883b      	ldrh	r3, [r7, #0]
 8007e8a:	3a01      	subs	r2, #1
 8007e8c:	3b01      	subs	r3, #1
 8007e8e:	b292      	uxth	r2, r2
 8007e90:	b29b      	uxth	r3, r3
 8007e92:	1b96      	subs	r6, r2, r6
    area->y1 = drv->ver_res - tmp_coord - 1;
 8007e94:	eba2 020c 	sub.w	r2, r2, ip
    area->x2 = drv->hor_res - area->x1 - 1;
 8007e98:	1a59      	subs	r1, r3, r1
    area->x1 = drv->hor_res - tmp_coord - 1;
 8007e9a:	1a1b      	subs	r3, r3, r0
    area->y1 = drv->ver_res - tmp_coord - 1;
 8007e9c:	8262      	strh	r2, [r4, #18]
}

static void call_flush_cb(lv_disp_drv_t * drv, const lv_area_t * area, lv_color_t * color_p)
{
    TRACE_REFR("Calling flush_cb on (%d;%d)(%d;%d) area with %p image pointer", area->x1, area->y1, area->x2, area->y2, color_p);
    drv->flush_cb(drv, area, color_p);
 8007e9e:	4638      	mov	r0, r7
    area->x2 = drv->hor_res - area->x1 - 1;
 8007ea0:	82a1      	strh	r1, [r4, #20]
    drv->flush_cb(drv, area, color_p);
 8007ea2:	462a      	mov	r2, r5
    area->x1 = drv->hor_res - tmp_coord - 1;
 8007ea4:	8223      	strh	r3, [r4, #16]
    drv->flush_cb(drv, area, color_p);
 8007ea6:	ee18 1a10 	vmov	r1, s16
 8007eaa:	68fb      	ldr	r3, [r7, #12]
    area->y2 = drv->ver_res - area->y1 - 1;
 8007eac:	82e6      	strh	r6, [r4, #22]
    drv->flush_cb(drv, area, color_p);
 8007eae:	4798      	blx	r3
}
 8007eb0:	e05f      	b.n	8007f72 <draw_buf_flush+0x186>
    else draw_buf->flushing_last = 0;
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	e7b2      	b.n	8007e1c <draw_buf_flush+0x30>
        tmp = color_p[i];
 8007eb6:	f835 e013 	ldrh.w	lr, [r5, r3, lsl #1]
        color_p[i] = color_p[j];
 8007eba:	f835 8012 	ldrh.w	r8, [r5, r2, lsl #1]
 8007ebe:	f825 8013 	strh.w	r8, [r5, r3, lsl #1]
        i--;
 8007ec2:	3b01      	subs	r3, #1
        color_p[j] = tmp;
 8007ec4:	f825 e012 	strh.w	lr, [r5, r2, lsl #1]
        j++;
 8007ec8:	3201      	adds	r2, #1
 8007eca:	e7da      	b.n	8007e82 <draw_buf_flush+0x96>
    } else if(drv->rotated == LV_DISP_ROT_90 || drv->rotated == LV_DISP_ROT_270) {
 8007ecc:	071b      	lsls	r3, r3, #28
 8007ece:	d550      	bpl.n	8007f72 <draw_buf_flush+0x186>
        lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp_refr);
 8007ed0:	f00e fd2e 	bl	8016930 <lv_disp_get_draw_buf>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8007ed4:	8a23      	ldrh	r3, [r4, #16]
 8007ed6:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 8007eda:	9305      	str	r3, [sp, #20]
 8007edc:	1c53      	adds	r3, r2, #1
 8007ede:	9004      	str	r0, [sp, #16]
 8007ee0:	9805      	ldr	r0, [sp, #20]
 8007ee2:	b29b      	uxth	r3, r3
 8007ee4:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 8007ee8:	1a1e      	subs	r6, r3, r0
 8007eea:	9306      	str	r3, [sp, #24]
 8007eec:	b2b3      	uxth	r3, r6
 8007eee:	b236      	sxth	r6, r6
 8007ef0:	9307      	str	r3, [sp, #28]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8007ef2:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
 8007ef6:	930a      	str	r3, [sp, #40]	; 0x28
 8007ef8:	8a63      	ldrh	r3, [r4, #18]
 8007efa:	9301      	str	r3, [sp, #4]
 8007efc:	8ae3      	ldrh	r3, [r4, #22]
 8007efe:	9801      	ldr	r0, [sp, #4]
 8007f00:	3301      	adds	r3, #1
 8007f02:	1a1b      	subs	r3, r3, r0
 8007f04:	b21b      	sxth	r3, r3
 8007f06:	9302      	str	r3, [sp, #8]
        lv_coord_t max_row = LV_MIN((lv_coord_t)((LV_DISP_ROT_MAX_BUF/sizeof(lv_color_t)) / area_w), area_h);
 8007f08:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8007f0c:	9802      	ldr	r0, [sp, #8]
 8007f0e:	fbb3 f3f6 	udiv	r3, r3, r6
 8007f12:	4283      	cmp	r3, r0
 8007f14:	bfa8      	it	ge
 8007f16:	4603      	movge	r3, r0
 8007f18:	930b      	str	r3, [sp, #44]	; 0x2c
        if(drv->rotated == LV_DISP_ROT_90) {
 8007f1a:	7a3b      	ldrb	r3, [r7, #8]
 8007f1c:	f003 0318 	and.w	r3, r3, #24
 8007f20:	2b08      	cmp	r3, #8
 8007f22:	d134      	bne.n	8007f8e <draw_buf_flush+0x1a2>
            area->y2 = drv->ver_res - area->x1 - 1;
 8007f24:	887b      	ldrh	r3, [r7, #2]
 8007f26:	9905      	ldr	r1, [sp, #20]
 8007f28:	1e5a      	subs	r2, r3, #1
 8007f2a:	1a52      	subs	r2, r2, r1
 8007f2c:	82e2      	strh	r2, [r4, #22]
            area->y1 = area->y2 - area_w + 1;
 8007f2e:	9a06      	ldr	r2, [sp, #24]
 8007f30:	1a9b      	subs	r3, r3, r2
 8007f32:	8263      	strh	r3, [r4, #18]
        draw_buf->flushing = 0;
 8007f34:	2200      	movs	r2, #0
 8007f36:	9b04      	ldr	r3, [sp, #16]
 8007f38:	619a      	str	r2, [r3, #24]
    for(lv_coord_t i = 0; i < w/2; i++) {
 8007f3a:	eb06 73d6 	add.w	r3, r6, r6, lsr #31
        lv_coord_t row = 0;
 8007f3e:	4690      	mov	r8, r2
        lv_color_t * rot_buf = NULL;
 8007f40:	4693      	mov	fp, r2
    for(lv_coord_t i = 0; i < w/2; i++) {
 8007f42:	105b      	asrs	r3, r3, #1
 8007f44:	930f      	str	r3, [sp, #60]	; 0x3c
        for(lv_coord_t j = 0; j < (w + 1)/2; j++) {
 8007f46:	1c73      	adds	r3, r6, #1
 8007f48:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8007f4c:	105b      	asrs	r3, r3, #1
 8007f4e:	930e      	str	r3, [sp, #56]	; 0x38
 8007f50:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
 8007f54:	005b      	lsls	r3, r3, #1
 8007f56:	930d      	str	r3, [sp, #52]	; 0x34
 8007f58:	9b07      	ldr	r3, [sp, #28]
 8007f5a:	3b01      	subs	r3, #1
 8007f5c:	b29b      	uxth	r3, r3
 8007f5e:	9309      	str	r3, [sp, #36]	; 0x24
        while(row < area_h) {
 8007f60:	9b02      	ldr	r3, [sp, #8]
 8007f62:	4543      	cmp	r3, r8
 8007f64:	dc16      	bgt.n	8007f94 <draw_buf_flush+0x1a8>
        if(rot_buf != NULL) lv_mem_buf_release(rot_buf);
 8007f66:	f1bb 0f00 	cmp.w	fp, #0
 8007f6a:	d002      	beq.n	8007f72 <draw_buf_flush+0x186>
 8007f6c:	4658      	mov	r0, fp
 8007f6e:	f00f fbef 	bl	8017750 <lv_mem_buf_release>
    if(draw_buf->buf1 && draw_buf->buf2) {
 8007f72:	6823      	ldr	r3, [r4, #0]
 8007f74:	b133      	cbz	r3, 8007f84 <draw_buf_flush+0x198>
 8007f76:	6862      	ldr	r2, [r4, #4]
 8007f78:	b122      	cbz	r2, 8007f84 <draw_buf_flush+0x198>
        if(draw_buf->buf_act == draw_buf->buf1)
 8007f7a:	68a1      	ldr	r1, [r4, #8]
            draw_buf->buf_act = draw_buf->buf2;
 8007f7c:	428b      	cmp	r3, r1
 8007f7e:	bf08      	it	eq
 8007f80:	4613      	moveq	r3, r2
 8007f82:	60a3      	str	r3, [r4, #8]
}
 8007f84:	b011      	add	sp, #68	; 0x44
 8007f86:	ecbd 8b02 	vpop	{d8}
 8007f8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            area->y1 = area->x1;
 8007f8e:	8261      	strh	r1, [r4, #18]
            area->y2 = area->y1 + area_w - 1;
 8007f90:	82e2      	strh	r2, [r4, #22]
 8007f92:	e7cf      	b.n	8007f34 <draw_buf_flush+0x148>
            lv_coord_t height = LV_MIN(max_row, area_h-row);
 8007f94:	9b02      	ldr	r3, [sp, #8]
 8007f96:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007f98:	eba3 0308 	sub.w	r3, r3, r8
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	bfa8      	it	ge
 8007fa0:	4613      	movge	r3, r2
            draw_buf->flushing = 1;
 8007fa2:	9a04      	ldr	r2, [sp, #16]
            lv_coord_t height = LV_MIN(max_row, area_h-row);
 8007fa4:	9303      	str	r3, [sp, #12]
            draw_buf->flushing = 1;
 8007fa6:	2301      	movs	r3, #1
            lv_coord_t height = LV_MIN(max_row, area_h-row);
 8007fa8:	f9bd 900c 	ldrsh.w	r9, [sp, #12]
            draw_buf->flushing = 1;
 8007fac:	6193      	str	r3, [r2, #24]
            if((row == 0) && (area_h >= area_w)) {
 8007fae:	f1b8 0f00 	cmp.w	r8, #0
 8007fb2:	f040 8088 	bne.w	80080c6 <draw_buf_flush+0x2da>
 8007fb6:	9b02      	ldr	r3, [sp, #8]
 8007fb8:	429e      	cmp	r6, r3
 8007fba:	f300 8084 	bgt.w	80080c6 <draw_buf_flush+0x2da>
                draw_buf_rotate_90_sqr(drv->rotated == LV_DISP_ROT_270, area_w, color_p);
 8007fbe:	7a3b      	ldrb	r3, [r7, #8]
    for(lv_coord_t i = 0; i < w/2; i++) {
 8007fc0:	46c1      	mov	r9, r8
 8007fc2:	4641      	mov	r1, r8
                draw_buf_rotate_90_sqr(drv->rotated == LV_DISP_ROT_270, area_w, color_p);
 8007fc4:	f003 0318 	and.w	r3, r3, #24
 8007fc8:	930c      	str	r3, [sp, #48]	; 0x30
    for(lv_coord_t i = 0; i < w/2; i++) {
 8007fca:	b20b      	sxth	r3, r1
 8007fcc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	da46      	bge.n	8008060 <draw_buf_flush+0x274>
 8007fd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fd4:	eba3 0c01 	sub.w	ip, r3, r1
 8007fd8:	2300      	movs	r3, #0
 8007fda:	fa0f fc8c 	sxth.w	ip, ip
 8007fde:	e023      	b.n	8008028 <draw_buf_flush+0x23c>
            lv_coord_t inv_j = (w - 1) - j;
 8007fe0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007fe2:	eb02 0a09 	add.w	sl, r2, r9
 8007fe6:	fb06 c202 	mla	r2, r6, r2, ip
 8007fea:	1ac3      	subs	r3, r0, r3
            if(is_270) {
 8007fec:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007fee:	b21b      	sxth	r3, r3
 8007ff0:	2818      	cmp	r0, #24
 8007ff2:	f835 001a 	ldrh.w	r0, [r5, sl, lsl #1]
 8007ff6:	fb06 3e0c 	mla	lr, r6, ip, r3
 8007ffa:	f8ad 0020 	strh.w	r0, [sp, #32]
 8007ffe:	fb06 1303 	mla	r3, r6, r3, r1
 8008002:	d11c      	bne.n	800803e <draw_buf_flush+0x252>
    *a = *b;
 8008004:	f835 0013 	ldrh.w	r0, [r5, r3, lsl #1]
 8008008:	f825 001a 	strh.w	r0, [r5, sl, lsl #1]
    *b = *c;
 800800c:	f835 a01e 	ldrh.w	sl, [r5, lr, lsl #1]
 8008010:	f825 a013 	strh.w	sl, [r5, r3, lsl #1]
    *c = *d;
 8008014:	f835 3012 	ldrh.w	r3, [r5, r2, lsl #1]
 8008018:	f825 301e 	strh.w	r3, [r5, lr, lsl #1]
    *d = tmp;
 800801c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8008020:	f825 3012 	strh.w	r3, [r5, r2, lsl #1]
        for(lv_coord_t j = 0; j < (w + 1)/2; j++) {
 8008024:	9b03      	ldr	r3, [sp, #12]
 8008026:	3301      	adds	r3, #1
 8008028:	9303      	str	r3, [sp, #12]
 800802a:	980e      	ldr	r0, [sp, #56]	; 0x38
 800802c:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8008030:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8008034:	4282      	cmp	r2, r0
 8008036:	dbd3      	blt.n	8007fe0 <draw_buf_flush+0x1f4>
    for(lv_coord_t i = 0; i < w/2; i++) {
 8008038:	3101      	adds	r1, #1
 800803a:	44b1      	add	r9, r6
 800803c:	e7c5      	b.n	8007fca <draw_buf_flush+0x1de>
    *a = *b;
 800803e:	f835 0012 	ldrh.w	r0, [r5, r2, lsl #1]
 8008042:	f825 001a 	strh.w	r0, [r5, sl, lsl #1]
    *b = *c;
 8008046:	f835 a01e 	ldrh.w	sl, [r5, lr, lsl #1]
 800804a:	f825 a012 	strh.w	sl, [r5, r2, lsl #1]
    *c = *d;
 800804e:	f835 2013 	ldrh.w	r2, [r5, r3, lsl #1]
 8008052:	f825 201e 	strh.w	r2, [r5, lr, lsl #1]
    *d = tmp;
 8008056:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 800805a:	f825 2013 	strh.w	r2, [r5, r3, lsl #1]
}
 800805e:	e7e1      	b.n	8008024 <draw_buf_flush+0x238>
                if(drv->rotated == LV_DISP_ROT_90) {
 8008060:	7a3b      	ldrb	r3, [r7, #8]
 8008062:	f003 0318 	and.w	r3, r3, #24
 8008066:	2b08      	cmp	r3, #8
 8008068:	d120      	bne.n	80080ac <draw_buf_flush+0x2c0>
                    area->x1 = init_y_off;
 800806a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
                    area->x2 = init_y_off + area_w - 1;
 800806c:	9a07      	ldr	r2, [sp, #28]
                    area->x1 = init_y_off;
 800806e:	8223      	strh	r3, [r4, #16]
                    area->x2 = init_y_off + area_w - 1;
 8008070:	9b01      	ldr	r3, [sp, #4]
 8008072:	3b01      	subs	r3, #1
 8008074:	4413      	add	r3, r2
 8008076:	82a3      	strh	r3, [r4, #20]
                    area->x1 = area->x2 - area_w + 1;
 8008078:	46b1      	mov	r9, r6
    drv->flush_cb(drv, area, color_p);
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	f1bb 0f00 	cmp.w	fp, #0
 8008080:	bf14      	ite	ne
 8008082:	465a      	movne	r2, fp
 8008084:	462a      	moveq	r2, r5
 8008086:	ee18 1a10 	vmov	r1, s16
 800808a:	4638      	mov	r0, r7
 800808c:	4798      	blx	r3
            while(draw_buf->flushing) {
 800808e:	9b04      	ldr	r3, [sp, #16]
 8008090:	699b      	ldr	r3, [r3, #24]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d167      	bne.n	8008166 <draw_buf_flush+0x37a>
            color_p += area_w * height;
 8008096:	fb09 f306 	mul.w	r3, r9, r6
            row += height;
 800809a:	44c8      	add	r8, r9
            color_p += area_w * height;
 800809c:	eb05 0543 	add.w	r5, r5, r3, lsl #1
            row += height;
 80080a0:	fa0f f888 	sxth.w	r8, r8
 80080a4:	e75c      	b.n	8007f60 <draw_buf_flush+0x174>
 80080a6:	bf00      	nop
 80080a8:	200029b8 	.word	0x200029b8
                    area->x2 = drv->hor_res - 1 - init_y_off;
 80080ac:	883b      	ldrh	r3, [r7, #0]
 80080ae:	9a01      	ldr	r2, [sp, #4]
 80080b0:	3b01      	subs	r3, #1
 80080b2:	1a9b      	subs	r3, r3, r2
                    area->x1 = area->x2 - area_w + 1;
 80080b4:	9a05      	ldr	r2, [sp, #20]
                    area->x2 = drv->hor_res - 1 - init_y_off;
 80080b6:	b29b      	uxth	r3, r3
                    area->x1 = area->x2 - area_w + 1;
 80080b8:	3201      	adds	r2, #1
                    area->x2 = drv->hor_res - 1 - init_y_off;
 80080ba:	82a3      	strh	r3, [r4, #20]
                    area->x1 = area->x2 - area_w + 1;
 80080bc:	4413      	add	r3, r2
 80080be:	9a06      	ldr	r2, [sp, #24]
 80080c0:	1a9b      	subs	r3, r3, r2
 80080c2:	8223      	strh	r3, [r4, #16]
 80080c4:	e7d8      	b.n	8008078 <draw_buf_flush+0x28c>
                if(rot_buf == NULL) rot_buf = lv_mem_buf_get(LV_DISP_ROT_MAX_BUF);
 80080c6:	f1bb 0f00 	cmp.w	fp, #0
 80080ca:	d104      	bne.n	80080d6 <draw_buf_flush+0x2ea>
 80080cc:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 80080d0:	f00f fce2 	bl	8017a98 <lv_mem_buf_get>
 80080d4:	4683      	mov	fp, r0
    uint32_t invert = (area_w * area_h) - 1;
 80080d6:	fb06 f309 	mul.w	r3, r6, r9
                draw_buf_rotate_90(drv->rotated == LV_DISP_ROT_270, area_w, height, color_p, rot_buf);
 80080da:	7a38      	ldrb	r0, [r7, #8]
    for(lv_coord_t y = 0; y < area_h; y++) {
 80080dc:	46ae      	mov	lr, r5
 80080de:	2100      	movs	r1, #0
    uint32_t initial_i = ((area_w - 1) * area_h);
 80080e0:	eba3 0a09 	sub.w	sl, r3, r9
 80080e4:	3b01      	subs	r3, #1
                draw_buf_rotate_90(drv->rotated == LV_DISP_ROT_270, area_w, height, color_p, rot_buf);
 80080e6:	f000 0018 	and.w	r0, r0, #24
    for(lv_coord_t y = 0; y < area_h; y++) {
 80080ea:	eba3 030a 	sub.w	r3, r3, sl
 80080ee:	9308      	str	r3, [sp, #32]
 80080f0:	b20a      	sxth	r2, r1
 80080f2:	4591      	cmp	r9, r2
 80080f4:	dc10      	bgt.n	8008118 <draw_buf_flush+0x32c>
                if(drv->rotated == LV_DISP_ROT_90) {
 80080f6:	7a3b      	ldrb	r3, [r7, #8]
 80080f8:	fa1f f188 	uxth.w	r1, r8
 80080fc:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8008100:	f003 0318 	and.w	r3, r3, #24
 8008104:	2b08      	cmp	r3, #8
 8008106:	d123      	bne.n	8008150 <draw_buf_flush+0x364>
                    area->x1 = init_y_off + row;
 8008108:	9b01      	ldr	r3, [sp, #4]
 800810a:	440b      	add	r3, r1
 800810c:	b29b      	uxth	r3, r3
 800810e:	8223      	strh	r3, [r4, #16]
                    area->x2 = init_y_off + row + height - 1;
 8008110:	3b01      	subs	r3, #1
 8008112:	4413      	add	r3, r2
 8008114:	82a3      	strh	r3, [r4, #20]
 8008116:	e7b0      	b.n	800807a <draw_buf_flush+0x28e>
        if(invert_i)
 8008118:	2818      	cmp	r0, #24
 800811a:	eb01 020a 	add.w	r2, r1, sl
    for(lv_coord_t i = 0; i < w/2; i++) {
 800811e:	f04f 0c00 	mov.w	ip, #0
 8008122:	bf04      	itt	eq
 8008124:	9b08      	ldreq	r3, [sp, #32]
 8008126:	1a5a      	subeq	r2, r3, r1
        for(lv_coord_t x = 0; x < area_w; x++) {
 8008128:	fa0f f38c 	sxth.w	r3, ip
 800812c:	429e      	cmp	r6, r3
 800812e:	dc03      	bgt.n	8008138 <draw_buf_flush+0x34c>
 8008130:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008132:	3101      	adds	r1, #1
 8008134:	449e      	add	lr, r3
    for(lv_coord_t y = 0; y < area_h; y++) {
 8008136:	e7db      	b.n	80080f0 <draw_buf_flush+0x304>
            rot_buf[i] = *(orig_color_p++);
 8008138:	f83e 301c 	ldrh.w	r3, [lr, ip, lsl #1]
            if(invert_i)
 800813c:	2818      	cmp	r0, #24
 800813e:	f10c 0c01 	add.w	ip, ip, #1
            rot_buf[i] = *(orig_color_p++);
 8008142:	f82b 3012 	strh.w	r3, [fp, r2, lsl #1]
                i += area_h;
 8008146:	bf0c      	ite	eq
 8008148:	444a      	addeq	r2, r9
                i -= area_h;
 800814a:	eba2 0209 	subne.w	r2, r2, r9
        for(lv_coord_t x = 0; x < area_w; x++) {
 800814e:	e7eb      	b.n	8008128 <draw_buf_flush+0x33c>
                    area->x2 = drv->hor_res - 1 - init_y_off - row;
 8008150:	883b      	ldrh	r3, [r7, #0]
 8008152:	9801      	ldr	r0, [sp, #4]
 8008154:	3b01      	subs	r3, #1
 8008156:	1a1b      	subs	r3, r3, r0
 8008158:	1a5b      	subs	r3, r3, r1
 800815a:	b29b      	uxth	r3, r3
 800815c:	82a3      	strh	r3, [r4, #20]
                    area->x1 = area->x2 - height + 1;
 800815e:	3301      	adds	r3, #1
 8008160:	1a9b      	subs	r3, r3, r2
 8008162:	8223      	strh	r3, [r4, #16]
 8008164:	e789      	b.n	800807a <draw_buf_flush+0x28e>
                if(drv->wait_cb) drv->wait_cb(drv);
 8008166:	69fb      	ldr	r3, [r7, #28]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d090      	beq.n	800808e <draw_buf_flush+0x2a2>
 800816c:	4638      	mov	r0, r7
 800816e:	4798      	blx	r3
 8008170:	e78d      	b.n	800808e <draw_buf_flush+0x2a2>
    drv->flush_cb(drv, area, color_p);
 8008172:	ee18 1a10 	vmov	r1, s16
 8008176:	e69a      	b.n	8007eae <draw_buf_flush+0xc2>

08008178 <lv_refr_area_part>:
{
 8008178:	b570      	push	{r4, r5, r6, lr}
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp_refr);
 800817a:	4c46      	ldr	r4, [pc, #280]	; (8008294 <lv_refr_area_part+0x11c>)
{
 800817c:	b094      	sub	sp, #80	; 0x50
 800817e:	4606      	mov	r6, r0
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp_refr);
 8008180:	6820      	ldr	r0, [r4, #0]
 8008182:	f00e fbd5 	bl	8016930 <lv_disp_get_draw_buf>
 8008186:	4605      	mov	r5, r0
        if(disp_refr->driver->wait_cb) disp_refr->driver->wait_cb(disp_refr->driver);
 8008188:	6822      	ldr	r2, [r4, #0]
    while(draw_buf->flushing) {
 800818a:	69ab      	ldr	r3, [r5, #24]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d168      	bne.n	8008262 <lv_refr_area_part+0xea>
    _lv_area_intersect(&start_mask, area_p, &draw_buf->area);
 8008190:	f105 0210 	add.w	r2, r5, #16
 8008194:	4631      	mov	r1, r6
 8008196:	a803      	add	r0, sp, #12
 8008198:	f00e fe7d 	bl	8016e96 <_lv_area_intersect>
    top_act_scr = lv_refr_get_top_obj(&start_mask, lv_disp_get_scr_act(disp_refr));
 800819c:	6820      	ldr	r0, [r4, #0]
 800819e:	f7f9 fdf9 	bl	8001d94 <lv_disp_get_scr_act>
 80081a2:	4601      	mov	r1, r0
 80081a4:	a803      	add	r0, sp, #12
 80081a6:	f7ff fd1a 	bl	8007bde <lv_refr_get_top_obj>
    if(disp_refr->prev_scr) {
 80081aa:	6823      	ldr	r3, [r4, #0]
    top_act_scr = lv_refr_get_top_obj(&start_mask, lv_disp_get_scr_act(disp_refr));
 80081ac:	4606      	mov	r6, r0
    if(disp_refr->prev_scr) {
 80081ae:	695d      	ldr	r5, [r3, #20]
 80081b0:	2d00      	cmp	r5, #0
 80081b2:	d06c      	beq.n	800828e <lv_refr_area_part+0x116>
        top_prev_scr = lv_refr_get_top_obj(&start_mask, disp_refr->prev_scr);
 80081b4:	4629      	mov	r1, r5
 80081b6:	a803      	add	r0, sp, #12
 80081b8:	f7ff fd11 	bl	8007bde <lv_refr_get_top_obj>
 80081bc:	4605      	mov	r5, r0
    if(top_act_scr == NULL && top_prev_scr == NULL) {
 80081be:	bb5e      	cbnz	r6, 8008218 <lv_refr_area_part+0xa0>
 80081c0:	bb50      	cbnz	r0, 8008218 <lv_refr_area_part+0xa0>
        if(disp_refr->bg_img) {
 80081c2:	6823      	ldr	r3, [r4, #0]
            lv_draw_img_dsc_init(&dsc);
 80081c4:	a807      	add	r0, sp, #28
        if(disp_refr->bg_img) {
 80081c6:	6add      	ldr	r5, [r3, #44]	; 0x2c
 80081c8:	2d00      	cmp	r5, #0
 80081ca:	d050      	beq.n	800826e <lv_refr_area_part+0xf6>
            lv_draw_img_dsc_init(&dsc);
 80081cc:	f002 f864 	bl	800a298 <lv_draw_img_dsc_init>
            dsc.opa = disp_refr->bg_opa;
 80081d0:	6823      	ldr	r3, [r4, #0]
            res = lv_img_decoder_get_info(disp_refr->bg_img, &header);
 80081d2:	a902      	add	r1, sp, #8
            dsc.opa = disp_refr->bg_opa;
 80081d4:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 80081d8:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
            res = lv_img_decoder_get_info(disp_refr->bg_img, &header);
 80081dc:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80081de:	f006 ffdd 	bl	800f19c <lv_img_decoder_get_info>
            if(res == LV_RES_OK) {
 80081e2:	2801      	cmp	r0, #1
 80081e4:	d117      	bne.n	8008216 <lv_refr_area_part+0x9e>
                lv_area_set(&a, 0, 0, header.w - 1, header.h - 1);
 80081e6:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80081ea:	a805      	add	r0, sp, #20
 80081ec:	9b02      	ldr	r3, [sp, #8]
 80081ee:	f3c2 124a 	ubfx	r2, r2, #5, #11
 80081f2:	f3c3 238a 	ubfx	r3, r3, #10, #11
 80081f6:	3a01      	subs	r2, #1
 80081f8:	3b01      	subs	r3, #1
 80081fa:	b212      	sxth	r2, r2
 80081fc:	b21b      	sxth	r3, r3
 80081fe:	9200      	str	r2, [sp, #0]
 8008200:	2200      	movs	r2, #0
 8008202:	4611      	mov	r1, r2
 8008204:	f00e fe08 	bl	8016e18 <lv_area_set>
                lv_draw_img(&a, &start_mask, disp_refr->bg_img, &dsc);
 8008208:	6822      	ldr	r2, [r4, #0]
 800820a:	ab07      	add	r3, sp, #28
 800820c:	a903      	add	r1, sp, #12
 800820e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008210:	a805      	add	r0, sp, #20
 8008212:	f002 f875 	bl	800a300 <lv_draw_img>
            }
 8008216:	2500      	movs	r5, #0
    if(disp_refr->prev_scr) {
 8008218:	6823      	ldr	r3, [r4, #0]
 800821a:	6958      	ldr	r0, [r3, #20]
 800821c:	b128      	cbz	r0, 800822a <lv_refr_area_part+0xb2>
        lv_refr_obj_and_children(top_prev_scr, &start_mask);
 800821e:	a903      	add	r1, sp, #12
 8008220:	2d00      	cmp	r5, #0
 8008222:	bf18      	it	ne
 8008224:	4628      	movne	r0, r5
 8008226:	f7ff fd9b 	bl	8007d60 <lv_refr_obj_and_children>
    if(top_act_scr == NULL) {
 800822a:	b90e      	cbnz	r6, 8008230 <lv_refr_area_part+0xb8>
        top_act_scr = disp_refr->act_scr;
 800822c:	6823      	ldr	r3, [r4, #0]
 800822e:	691e      	ldr	r6, [r3, #16]
    lv_refr_obj_and_children(top_act_scr, &start_mask);
 8008230:	a903      	add	r1, sp, #12
 8008232:	4630      	mov	r0, r6
 8008234:	f7ff fd94 	bl	8007d60 <lv_refr_obj_and_children>
    lv_refr_obj_and_children(lv_disp_get_layer_top(disp_refr), &start_mask);
 8008238:	6820      	ldr	r0, [r4, #0]
 800823a:	f7f9 fdb9 	bl	8001db0 <lv_disp_get_layer_top>
 800823e:	a903      	add	r1, sp, #12
 8008240:	f7ff fd8e 	bl	8007d60 <lv_refr_obj_and_children>
    lv_refr_obj_and_children(lv_disp_get_layer_sys(disp_refr), &start_mask);
 8008244:	6820      	ldr	r0, [r4, #0]
 8008246:	f7f9 fdba 	bl	8001dbe <lv_disp_get_layer_sys>
 800824a:	a903      	add	r1, sp, #12
 800824c:	f7ff fd88 	bl	8007d60 <lv_refr_obj_and_children>
    if(disp_refr->driver->full_refresh == false) {
 8008250:	6823      	ldr	r3, [r4, #0]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	7a1b      	ldrb	r3, [r3, #8]
 8008256:	07db      	lsls	r3, r3, #31
 8008258:	d401      	bmi.n	800825e <lv_refr_area_part+0xe6>
        draw_buf_flush();
 800825a:	f7ff fdc7 	bl	8007dec <draw_buf_flush>
}
 800825e:	b014      	add	sp, #80	; 0x50
 8008260:	bd70      	pop	{r4, r5, r6, pc}
        if(disp_refr->driver->wait_cb) disp_refr->driver->wait_cb(disp_refr->driver);
 8008262:	6810      	ldr	r0, [r2, #0]
 8008264:	69c3      	ldr	r3, [r0, #28]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d08f      	beq.n	800818a <lv_refr_area_part+0x12>
 800826a:	4798      	blx	r3
 800826c:	e78c      	b.n	8008188 <lv_refr_area_part+0x10>
            lv_draw_rect_dsc_init(&dsc);
 800826e:	f004 fc0b 	bl	800ca88 <lv_draw_rect_dsc_init>
            dsc.bg_color = disp_refr->bg_color;
 8008272:	6823      	ldr	r3, [r4, #0]
            lv_draw_rect(&start_mask, &start_mask, &dsc);
 8008274:	a903      	add	r1, sp, #12
            dsc.bg_color = disp_refr->bg_color;
 8008276:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
            lv_draw_rect(&start_mask, &start_mask, &dsc);
 8008278:	4608      	mov	r0, r1
            dsc.bg_color = disp_refr->bg_color;
 800827a:	f8ad 2020 	strh.w	r2, [sp, #32]
            lv_draw_rect(&start_mask, &start_mask, &dsc);
 800827e:	aa07      	add	r2, sp, #28
            dsc.bg_opa = disp_refr->bg_opa;
 8008280:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8008284:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
            lv_draw_rect(&start_mask, &start_mask, &dsc);
 8008288:	f004 fc20 	bl	800cacc <lv_draw_rect>
 800828c:	e7c4      	b.n	8008218 <lv_refr_area_part+0xa0>
    if(top_act_scr == NULL && top_prev_scr == NULL) {
 800828e:	2800      	cmp	r0, #0
 8008290:	d1c2      	bne.n	8008218 <lv_refr_area_part+0xa0>
 8008292:	e796      	b.n	80081c2 <lv_refr_area_part+0x4a>
 8008294:	200029b8 	.word	0x200029b8

08008298 <_lv_refr_init>:
}
 8008298:	4770      	bx	lr

0800829a <_lv_inv_area>:
{
 800829a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800829c:	460d      	mov	r5, r1
    if(!disp) disp = lv_disp_get_default();
 800829e:	4604      	mov	r4, r0
 80082a0:	b918      	cbnz	r0, 80082aa <_lv_inv_area+0x10>
 80082a2:	f00e fb01 	bl	80168a8 <lv_disp_get_default>
    if(!disp) return;
 80082a6:	4604      	mov	r4, r0
 80082a8:	b110      	cbz	r0, 80082b0 <_lv_inv_area+0x16>
    if(area_p == NULL) {
 80082aa:	b91d      	cbnz	r5, 80082b4 <_lv_inv_area+0x1a>
        disp->inv_p = 0;
 80082ac:	f8a4 5150 	strh.w	r5, [r4, #336]	; 0x150
}
 80082b0:	b004      	add	sp, #16
 80082b2:	bd70      	pop	{r4, r5, r6, pc}
    scr_area.x1 = 0;
 80082b4:	2300      	movs	r3, #0
    scr_area.x2 = lv_disp_get_hor_res(disp) - 1;
 80082b6:	4620      	mov	r0, r4
    suc = _lv_area_intersect(&com_area, area_p, &scr_area);
 80082b8:	466e      	mov	r6, sp
    scr_area.x1 = 0;
 80082ba:	9300      	str	r3, [sp, #0]
    scr_area.x2 = lv_disp_get_hor_res(disp) - 1;
 80082bc:	f00e fafa 	bl	80168b4 <lv_disp_get_hor_res>
 80082c0:	3801      	subs	r0, #1
 80082c2:	f8ad 0004 	strh.w	r0, [sp, #4]
    scr_area.y2 = lv_disp_get_ver_res(disp) - 1;
 80082c6:	4620      	mov	r0, r4
 80082c8:	f00e fb04 	bl	80168d4 <lv_disp_get_ver_res>
 80082cc:	3801      	subs	r0, #1
    suc = _lv_area_intersect(&com_area, area_p, &scr_area);
 80082ce:	4632      	mov	r2, r6
 80082d0:	4629      	mov	r1, r5
    scr_area.y2 = lv_disp_get_ver_res(disp) - 1;
 80082d2:	f8ad 0006 	strh.w	r0, [sp, #6]
    suc = _lv_area_intersect(&com_area, area_p, &scr_area);
 80082d6:	a802      	add	r0, sp, #8
 80082d8:	f00e fddd 	bl	8016e96 <_lv_area_intersect>
    if(suc == false)  return; /*Out of the screen*/
 80082dc:	2800      	cmp	r0, #0
 80082de:	d0e7      	beq.n	80082b0 <_lv_inv_area+0x16>
    if(disp->driver->full_refresh) {
 80082e0:	6820      	ldr	r0, [r4, #0]
 80082e2:	7a03      	ldrb	r3, [r0, #8]
 80082e4:	07db      	lsls	r3, r3, #31
 80082e6:	d50c      	bpl.n	8008302 <_lv_inv_area+0x68>
        disp->inv_areas[0] = scr_area;
 80082e8:	f104 0330 	add.w	r3, r4, #48	; 0x30
 80082ec:	e896 0003 	ldmia.w	r6, {r0, r1}
 80082f0:	e883 0003 	stmia.w	r3, {r0, r1}
        disp->inv_p = 1;
 80082f4:	2301      	movs	r3, #1
    lv_timer_resume(disp->refr_timer);
 80082f6:	6860      	ldr	r0, [r4, #4]
    disp->inv_p++;
 80082f8:	f8a4 3150 	strh.w	r3, [r4, #336]	; 0x150
    lv_timer_resume(disp->refr_timer);
 80082fc:	f010 fabf 	bl	801887e <lv_timer_resume>
 8008300:	e7d6      	b.n	80082b0 <_lv_inv_area+0x16>
    if(disp->driver->rounder_cb) disp->driver->rounder_cb(disp->driver, &com_area);
 8008302:	6903      	ldr	r3, [r0, #16]
 8008304:	b10b      	cbz	r3, 800830a <_lv_inv_area+0x70>
 8008306:	a902      	add	r1, sp, #8
 8008308:	4798      	blx	r3
{
 800830a:	2500      	movs	r5, #0
    for(i = 0; i < disp->inv_p; i++) {
 800830c:	f8b4 3150 	ldrh.w	r3, [r4, #336]	; 0x150
 8008310:	b2aa      	uxth	r2, r5
 8008312:	4293      	cmp	r3, r2
 8008314:	d813      	bhi.n	800833e <_lv_inv_area+0xa4>
    if(disp->inv_p < LV_INV_BUF_SIZE) {
 8008316:	2b1f      	cmp	r3, #31
 8008318:	d81d      	bhi.n	8008356 <_lv_inv_area+0xbc>
    dest->x1 = src->x1;
 800831a:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800831e:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8008322:	861a      	strh	r2, [r3, #48]	; 0x30
    dest->y1 = src->y1;
 8008324:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8008328:	865a      	strh	r2, [r3, #50]	; 0x32
    dest->x2 = src->x2;
 800832a:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800832e:	869a      	strh	r2, [r3, #52]	; 0x34
    dest->y2 = src->y2;
 8008330:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8008334:	86da      	strh	r2, [r3, #54]	; 0x36
    disp->inv_p++;
 8008336:	f8b4 3150 	ldrh.w	r3, [r4, #336]	; 0x150
 800833a:	3301      	adds	r3, #1
 800833c:	e7db      	b.n	80082f6 <_lv_inv_area+0x5c>
        if(_lv_area_is_in(&com_area, &disp->inv_areas[i], 0) != false) return;
 800833e:	b2a9      	uxth	r1, r5
 8008340:	2200      	movs	r2, #0
 8008342:	a802      	add	r0, sp, #8
 8008344:	3501      	adds	r5, #1
 8008346:	3106      	adds	r1, #6
 8008348:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 800834c:	f00e fea2 	bl	8017094 <_lv_area_is_in>
 8008350:	2800      	cmp	r0, #0
 8008352:	d0db      	beq.n	800830c <_lv_inv_area+0x72>
 8008354:	e7ac      	b.n	80082b0 <_lv_inv_area+0x16>
        disp->inv_p = 0;
 8008356:	2300      	movs	r3, #0
 8008358:	f8a4 3150 	strh.w	r3, [r4, #336]	; 0x150
    dest->x1 = src->x1;
 800835c:	f8bd 3000 	ldrh.w	r3, [sp]
 8008360:	8623      	strh	r3, [r4, #48]	; 0x30
    dest->y1 = src->y1;
 8008362:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8008366:	8663      	strh	r3, [r4, #50]	; 0x32
    dest->x2 = src->x2;
 8008368:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800836c:	86a3      	strh	r3, [r4, #52]	; 0x34
    dest->y2 = src->y2;
 800836e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8008372:	86e3      	strh	r3, [r4, #54]	; 0x36
}
 8008374:	e7df      	b.n	8008336 <_lv_inv_area+0x9c>
	...

08008378 <_lv_refr_get_disp_refreshing>:
}
 8008378:	4b01      	ldr	r3, [pc, #4]	; (8008380 <_lv_refr_get_disp_refreshing+0x8>)
 800837a:	6818      	ldr	r0, [r3, #0]
 800837c:	4770      	bx	lr
 800837e:	bf00      	nop
 8008380:	200029b8 	.word	0x200029b8

08008384 <_lv_disp_refr_timer>:
{
 8008384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008388:	4605      	mov	r5, r0
    disp_refr = tmr->user_data;
 800838a:	4cb9      	ldr	r4, [pc, #740]	; (8008670 <_lv_disp_refr_timer+0x2ec>)
{
 800838c:	ed2d 8b02 	vpush	{d8}
 8008390:	b089      	sub	sp, #36	; 0x24
    uint32_t start = lv_tick_get();
 8008392:	f00e fb3d 	bl	8016a10 <lv_tick_get>
    disp_refr = tmr->user_data;
 8008396:	68eb      	ldr	r3, [r5, #12]
    uint32_t start = lv_tick_get();
 8008398:	ee08 0a90 	vmov	s17, r0
    lv_timer_pause(tmr);
 800839c:	4628      	mov	r0, r5
    disp_refr = tmr->user_data;
 800839e:	6023      	str	r3, [r4, #0]
    lv_timer_pause(tmr);
 80083a0:	f010 fa68 	bl	8018874 <lv_timer_pause>
    lv_obj_update_layout(disp_refr->act_scr);
 80083a4:	6823      	ldr	r3, [r4, #0]
 80083a6:	6918      	ldr	r0, [r3, #16]
 80083a8:	f7fd fb1e 	bl	80059e8 <lv_obj_update_layout>
    if(disp_refr->prev_scr) lv_obj_update_layout(disp_refr->prev_scr);
 80083ac:	6823      	ldr	r3, [r4, #0]
 80083ae:	6958      	ldr	r0, [r3, #20]
 80083b0:	b108      	cbz	r0, 80083b6 <_lv_disp_refr_timer+0x32>
 80083b2:	f7fd fb19 	bl	80059e8 <lv_obj_update_layout>
    lv_obj_update_layout(disp_refr->top_layer);
 80083b6:	6823      	ldr	r3, [r4, #0]
 80083b8:	69d8      	ldr	r0, [r3, #28]
 80083ba:	f7fd fb15 	bl	80059e8 <lv_obj_update_layout>
    lv_obj_update_layout(disp_refr->sys_layer);
 80083be:	6823      	ldr	r3, [r4, #0]
 80083c0:	6a18      	ldr	r0, [r3, #32]
 80083c2:	f7fd fb11 	bl	80059e8 <lv_obj_update_layout>
    if(disp_refr->act_scr == NULL) {
 80083c6:	6823      	ldr	r3, [r4, #0]
 80083c8:	691a      	ldr	r2, [r3, #16]
 80083ca:	2a00      	cmp	r2, #0
 80083cc:	d167      	bne.n	800849e <_lv_disp_refr_timer+0x11a>
        disp_refr->inv_p = 0;
 80083ce:	f8a3 2150 	strh.w	r2, [r3, #336]	; 0x150
}
 80083d2:	b009      	add	sp, #36	; 0x24
 80083d4:	ecbd 8b02 	vpop	{d8}
 80083d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(disp_refr->inv_area_joined[join_in] != 0) continue;
 80083dc:	4433      	add	r3, r6
 80083de:	f893 5130 	ldrb.w	r5, [r3, #304]	; 0x130
 80083e2:	b1b5      	cbz	r5, 8008412 <_lv_disp_refr_timer+0x8e>
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
 80083e4:	3601      	adds	r6, #1
 80083e6:	6823      	ldr	r3, [r4, #0]
 80083e8:	f8b3 7150 	ldrh.w	r7, [r3, #336]	; 0x150
 80083ec:	42be      	cmp	r6, r7
 80083ee:	d3f5      	bcc.n	80083dc <_lv_disp_refr_timer+0x58>
    px_num = 0;
 80083f0:	4aa0      	ldr	r2, [pc, #640]	; (8008674 <_lv_disp_refr_timer+0x2f0>)
 80083f2:	2100      	movs	r1, #0
 80083f4:	6011      	str	r1, [r2, #0]
    if(disp_refr->inv_p == 0) return;
 80083f6:	2f00      	cmp	r7, #0
 80083f8:	d155      	bne.n	80084a6 <_lv_disp_refr_timer+0x122>
    if(disp_refr->inv_p != 0) {
 80083fa:	4b9d      	ldr	r3, [pc, #628]	; (8008670 <_lv_disp_refr_timer+0x2ec>)
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f8b3 2150 	ldrh.w	r2, [r3, #336]	; 0x150
 8008402:	2a00      	cmp	r2, #0
 8008404:	f040 8165 	bne.w	80086d2 <_lv_disp_refr_timer+0x34e>
    lv_mem_buf_free_all();
 8008408:	f00f f9b6 	bl	8017778 <lv_mem_buf_free_all>
    _lv_font_clean_up_fmt_txt();
 800840c:	f00e f9a6 	bl	801675c <_lv_font_clean_up_fmt_txt>
    TRACE_REFR("finished");
 8008410:	e7df      	b.n	80083d2 <_lv_disp_refr_timer+0x4e>
 8008412:	ea4f 0ac6 	mov.w	sl, r6, lsl #3
 8008416:	f10a 0930 	add.w	r9, sl, #48	; 0x30
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
 800841a:	6820      	ldr	r0, [r4, #0]
 800841c:	f8b0 3150 	ldrh.w	r3, [r0, #336]	; 0x150
 8008420:	429d      	cmp	r5, r3
 8008422:	d2df      	bcs.n	80083e4 <_lv_disp_refr_timer+0x60>
            if(disp_refr->inv_area_joined[join_from] != 0 || join_in == join_from) {
 8008424:	1943      	adds	r3, r0, r5
 8008426:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800842a:	2b00      	cmp	r3, #0
 800842c:	d135      	bne.n	800849a <_lv_disp_refr_timer+0x116>
 800842e:	42ae      	cmp	r6, r5
 8008430:	d033      	beq.n	800849a <_lv_disp_refr_timer+0x116>
            if(_lv_area_is_on(&disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]) == false) {
 8008432:	ea4f 0bc5 	mov.w	fp, r5, lsl #3
 8008436:	f10b 0b30 	add.w	fp, fp, #48	; 0x30
 800843a:	eb00 010b 	add.w	r1, r0, fp
 800843e:	4448      	add	r0, r9
 8008440:	f00e fe0b 	bl	801705a <_lv_area_is_on>
 8008444:	b348      	cbz	r0, 800849a <_lv_disp_refr_timer+0x116>
            _lv_area_join(&joined_area, &disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]);
 8008446:	6821      	ldr	r1, [r4, #0]
 8008448:	a806      	add	r0, sp, #24
 800844a:	eb01 020b 	add.w	r2, r1, fp
 800844e:	4449      	add	r1, r9
 8008450:	f00e fd4b 	bl	8016eea <_lv_area_join>
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
 8008454:	a806      	add	r0, sp, #24
 8008456:	f00e fcf0 	bl	8016e3a <lv_area_get_size>
 800845a:	9001      	str	r0, [sp, #4]
 800845c:	6820      	ldr	r0, [r4, #0]
 800845e:	4448      	add	r0, r9
 8008460:	f00e fceb 	bl	8016e3a <lv_area_get_size>
 8008464:	4607      	mov	r7, r0
                                                 lv_area_get_size(&disp_refr->inv_areas[join_from]))) {
 8008466:	6820      	ldr	r0, [r4, #0]
 8008468:	4458      	add	r0, fp
 800846a:	f00e fce6 	bl	8016e3a <lv_area_get_size>
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
 800846e:	9b01      	ldr	r3, [sp, #4]
 8008470:	4407      	add	r7, r0
 8008472:	42bb      	cmp	r3, r7
 8008474:	d211      	bcs.n	800849a <_lv_disp_refr_timer+0x116>
                lv_area_copy(&disp_refr->inv_areas[join_in], &joined_area);
 8008476:	6823      	ldr	r3, [r4, #0]
    dest->x1 = src->x1;
 8008478:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 800847c:	eb03 020a 	add.w	r2, r3, sl
                disp_refr->inv_area_joined[join_from] = 1;
 8008480:	442b      	add	r3, r5
 8008482:	8611      	strh	r1, [r2, #48]	; 0x30
    dest->y1 = src->y1;
 8008484:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 8008488:	8651      	strh	r1, [r2, #50]	; 0x32
    dest->x2 = src->x2;
 800848a:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 800848e:	8691      	strh	r1, [r2, #52]	; 0x34
    dest->y2 = src->y2;
 8008490:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 8008494:	86d1      	strh	r1, [r2, #54]	; 0x36
 8008496:	f883 8130 	strb.w	r8, [r3, #304]	; 0x130
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
 800849a:	3501      	adds	r5, #1
 800849c:	e7bd      	b.n	800841a <_lv_disp_refr_timer+0x96>
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
 800849e:	2600      	movs	r6, #0
                disp_refr->inv_area_joined[join_from] = 1;
 80084a0:	f04f 0801 	mov.w	r8, #1
 80084a4:	e79f      	b.n	80083e6 <_lv_disp_refr_timer+0x62>
    for(i = disp_refr->inv_p - 1; i >= 0; i--) {
 80084a6:	3f01      	subs	r7, #1
        if(disp_refr->inv_area_joined[i] == 0) {
 80084a8:	f503 7298 	add.w	r2, r3, #304	; 0x130
 80084ac:	5dd1      	ldrb	r1, [r2, r7]
 80084ae:	b111      	cbz	r1, 80084b6 <_lv_disp_refr_timer+0x132>
    for(i = disp_refr->inv_p - 1; i >= 0; i--) {
 80084b0:	3f01      	subs	r7, #1
 80084b2:	d2fb      	bcs.n	80084ac <_lv_disp_refr_timer+0x128>
    int32_t last_i = 0;
 80084b4:	2700      	movs	r7, #0
    disp_refr->driver->draw_buf->last_area = 0;
 80084b6:	681b      	ldr	r3, [r3, #0]
    for(i = 0; i < disp_refr->inv_p; i++) {
 80084b8:	f04f 0b00 	mov.w	fp, #0
 80084bc:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 8008670 <_lv_disp_refr_timer+0x2ec>
    disp_refr->driver->draw_buf->last_area = 0;
 80084c0:	685b      	ldr	r3, [r3, #4]
 80084c2:	f893 2020 	ldrb.w	r2, [r3, #32]
 80084c6:	f36f 0200 	bfc	r2, #0, #1
 80084ca:	f883 2020 	strb.w	r2, [r3, #32]
    disp_refr->driver->draw_buf->last_part = 0;
 80084ce:	f893 2020 	ldrb.w	r2, [r3, #32]
 80084d2:	f36f 0241 	bfc	r2, #1, #1
 80084d6:	f883 2020 	strb.w	r2, [r3, #32]
    for(i = 0; i < disp_refr->inv_p; i++) {
 80084da:	f8d9 5000 	ldr.w	r5, [r9]
 80084de:	f8b5 3150 	ldrh.w	r3, [r5, #336]	; 0x150
 80084e2:	459b      	cmp	fp, r3
 80084e4:	da89      	bge.n	80083fa <_lv_disp_refr_timer+0x76>
        if(disp_refr->inv_area_joined[i] == 0) {
 80084e6:	eb05 030b 	add.w	r3, r5, fp
 80084ea:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	f040 8098 	bne.w	8008624 <_lv_disp_refr_timer+0x2a0>
            if(i == last_i) disp_refr->driver->draw_buf->last_area = 1;
 80084f4:	6829      	ldr	r1, [r5, #0]
 80084f6:	45bb      	cmp	fp, r7
 80084f8:	684b      	ldr	r3, [r1, #4]
 80084fa:	d105      	bne.n	8008508 <_lv_disp_refr_timer+0x184>
 80084fc:	f893 2020 	ldrb.w	r2, [r3, #32]
 8008500:	f042 0201 	orr.w	r2, r2, #1
 8008504:	f883 2020 	strb.w	r2, [r3, #32]
            disp_refr->driver->draw_buf->last_part = 0;
 8008508:	f893 2020 	ldrb.w	r2, [r3, #32]
 800850c:	ea4f 08cb 	mov.w	r8, fp, lsl #3
        lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp_refr);
 8008510:	4628      	mov	r0, r5
            disp_refr->driver->draw_buf->last_part = 0;
 8008512:	f36f 0241 	bfc	r2, #1, #1
 8008516:	f883 2020 	strb.w	r2, [r3, #32]
            lv_refr_area(&disp_refr->inv_areas[i]);
 800851a:	f108 0330 	add.w	r3, r8, #48	; 0x30
 800851e:	9302      	str	r3, [sp, #8]
 8008520:	18eb      	adds	r3, r5, r3
 8008522:	ee08 3a10 	vmov	s16, r3
    if(disp_refr->driver->full_refresh) {
 8008526:	7a0b      	ldrb	r3, [r1, #8]
 8008528:	07da      	lsls	r2, r3, #31
 800852a:	d51d      	bpl.n	8008568 <_lv_disp_refr_timer+0x1e4>
        draw_buf->area.x1        = 0;
 800852c:	2600      	movs	r6, #0
        lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp_refr);
 800852e:	f00e f9ff 	bl	8016930 <lv_disp_get_draw_buf>
 8008532:	4605      	mov	r5, r0
        draw_buf->area.x1        = 0;
 8008534:	8206      	strh	r6, [r0, #16]
        draw_buf->area.x2        = lv_disp_get_hor_res(disp_refr) - 1;
 8008536:	6820      	ldr	r0, [r4, #0]
 8008538:	f00e f9bc 	bl	80168b4 <lv_disp_get_hor_res>
 800853c:	3801      	subs	r0, #1
        draw_buf->area.y1        = 0;
 800853e:	826e      	strh	r6, [r5, #18]
        draw_buf->area.x2        = lv_disp_get_hor_res(disp_refr) - 1;
 8008540:	82a8      	strh	r0, [r5, #20]
        draw_buf->area.y2        = lv_disp_get_ver_res(disp_refr) - 1;
 8008542:	6820      	ldr	r0, [r4, #0]
 8008544:	f00e f9c6 	bl	80168d4 <lv_disp_get_ver_res>
        disp_refr->driver->draw_buf->last_part = 1;
 8008548:	6823      	ldr	r3, [r4, #0]
        draw_buf->area.y2        = lv_disp_get_ver_res(disp_refr) - 1;
 800854a:	3801      	subs	r0, #1
        disp_refr->driver->draw_buf->last_part = 1;
 800854c:	681b      	ldr	r3, [r3, #0]
        draw_buf->area.y2        = lv_disp_get_ver_res(disp_refr) - 1;
 800854e:	82e8      	strh	r0, [r5, #22]
            disp_refr->driver->draw_buf->last_part = 1;
 8008550:	685a      	ldr	r2, [r3, #4]
            lv_refr_area_part(area_p);
 8008552:	ee18 0a10 	vmov	r0, s16
            disp_refr->driver->draw_buf->last_part = 1;
 8008556:	f892 3020 	ldrb.w	r3, [r2, #32]
 800855a:	f043 0302 	orr.w	r3, r3, #2
 800855e:	f882 3020 	strb.w	r3, [r2, #32]
            lv_refr_area_part(area_p);
 8008562:	f7ff fe09 	bl	8008178 <lv_refr_area_part>
 8008566:	e053      	b.n	8008610 <_lv_disp_refr_timer+0x28c>
        lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp_refr);
 8008568:	4445      	add	r5, r8
 800856a:	f00e f9e1 	bl	8016930 <lv_disp_get_draw_buf>
 800856e:	4606      	mov	r6, r0
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8008570:	f8b5 8034 	ldrh.w	r8, [r5, #52]	; 0x34
 8008574:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
 8008576:	f108 0801 	add.w	r8, r8, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800857a:	8e6a      	ldrh	r2, [r5, #50]	; 0x32
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800857c:	eba8 0803 	sub.w	r8, r8, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8008580:	f9b5 3036 	ldrsh.w	r3, [r5, #54]	; 0x36
 8008584:	f103 0a01 	add.w	sl, r3, #1
 8008588:	9301      	str	r3, [sp, #4]
            area_p->y2 >= lv_disp_get_ver_res(disp_refr) ? lv_disp_get_ver_res(disp_refr) - 1 : area_p->y2;
 800858a:	4b39      	ldr	r3, [pc, #228]	; (8008670 <_lv_disp_refr_timer+0x2ec>)
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800858c:	fa0f f888 	sxth.w	r8, r8
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8008590:	ebaa 0a02 	sub.w	sl, sl, r2
 8008594:	6818      	ldr	r0, [r3, #0]
 8008596:	f00e f99d 	bl	80168d4 <lv_disp_get_ver_res>
        lv_coord_t y2 =
 800859a:	9b01      	ldr	r3, [sp, #4]
 800859c:	fa0f fa8a 	sxth.w	sl, sl
 80085a0:	4283      	cmp	r3, r0
 80085a2:	db42      	blt.n	800862a <_lv_disp_refr_timer+0x2a6>
            area_p->y2 >= lv_disp_get_ver_res(disp_refr) ? lv_disp_get_ver_res(disp_refr) - 1 : area_p->y2;
 80085a4:	4b32      	ldr	r3, [pc, #200]	; (8008670 <_lv_disp_refr_timer+0x2ec>)
 80085a6:	6818      	ldr	r0, [r3, #0]
 80085a8:	f00e f994 	bl	80168d4 <lv_disp_get_ver_res>
 80085ac:	3801      	subs	r0, #1
        lv_coord_t y2 =
 80085ae:	b203      	sxth	r3, r0
        int32_t max_row = (uint32_t)draw_buf->size / w;
 80085b0:	68f2      	ldr	r2, [r6, #12]
 80085b2:	fbb2 f8f8 	udiv	r8, r2, r8
        if(max_row > h) max_row = h;
 80085b6:	45c2      	cmp	sl, r8
 80085b8:	4652      	mov	r2, sl
 80085ba:	bfa8      	it	ge
 80085bc:	4642      	movge	r2, r8
 80085be:	9201      	str	r2, [sp, #4]
        if(disp_refr->driver->rounder_cb) {
 80085c0:	4a2b      	ldr	r2, [pc, #172]	; (8008670 <_lv_disp_refr_timer+0x2ec>)
 80085c2:	6812      	ldr	r2, [r2, #0]
 80085c4:	6812      	ldr	r2, [r2, #0]
 80085c6:	6912      	ldr	r2, [r2, #16]
 80085c8:	2a00      	cmp	r2, #0
 80085ca:	d035      	beq.n	8008638 <_lv_disp_refr_timer+0x2b4>
            tmp.x1 = 0;
 80085cc:	2200      	movs	r2, #0
            lv_coord_t h_tmp = max_row;
 80085ce:	f9bd 8004 	ldrsh.w	r8, [sp, #4]
            tmp.x1 = 0;
 80085d2:	9206      	str	r2, [sp, #24]
            tmp.x2 = 0;
 80085d4:	f8ad 201c 	strh.w	r2, [sp, #28]
                disp_refr->driver->rounder_cb(disp_refr->driver, &tmp);
 80085d8:	f8d9 2000 	ldr.w	r2, [r9]
 80085dc:	46c2      	mov	sl, r8
 80085de:	f108 38ff 	add.w	r8, r8, #4294967295
 80085e2:	a906      	add	r1, sp, #24
 80085e4:	6810      	ldr	r0, [r2, #0]
 80085e6:	fa0f f888 	sxth.w	r8, r8
 80085ea:	9303      	str	r3, [sp, #12]
 80085ec:	6902      	ldr	r2, [r0, #16]
                tmp.y2 = h_tmp - 1;
 80085ee:	f8ad 801e 	strh.w	r8, [sp, #30]
                disp_refr->driver->rounder_cb(disp_refr->driver, &tmp);
 80085f2:	4790      	blx	r2
 80085f4:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 80085f8:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80085fc:	3101      	adds	r1, #1
                if(lv_area_get_height(&tmp) <= max_row) break;
 80085fe:	9b01      	ldr	r3, [sp, #4]
 8008600:	1a8a      	subs	r2, r1, r2
 8008602:	b212      	sxth	r2, r2
 8008604:	4293      	cmp	r3, r2
 8008606:	9b03      	ldr	r3, [sp, #12]
 8008608:	da12      	bge.n	8008630 <_lv_disp_refr_timer+0x2ac>
            } while(h_tmp > 0);
 800860a:	f1b8 0f00 	cmp.w	r8, #0
 800860e:	dce3      	bgt.n	80085d8 <_lv_disp_refr_timer+0x254>
            px_num += lv_area_get_size(&disp_refr->inv_areas[i]);
 8008610:	9b02      	ldr	r3, [sp, #8]
 8008612:	f8d9 0000 	ldr.w	r0, [r9]
 8008616:	4418      	add	r0, r3
 8008618:	f00e fc0f 	bl	8016e3a <lv_area_get_size>
 800861c:	4a15      	ldr	r2, [pc, #84]	; (8008674 <_lv_disp_refr_timer+0x2f0>)
 800861e:	6813      	ldr	r3, [r2, #0]
 8008620:	4418      	add	r0, r3
 8008622:	6010      	str	r0, [r2, #0]
    for(i = 0; i < disp_refr->inv_p; i++) {
 8008624:	f10b 0b01 	add.w	fp, fp, #1
 8008628:	e757      	b.n	80084da <_lv_disp_refr_timer+0x156>
        lv_coord_t y2 =
 800862a:	f9b5 3036 	ldrsh.w	r3, [r5, #54]	; 0x36
 800862e:	e7bf      	b.n	80085b0 <_lv_disp_refr_timer+0x22c>
            if(h_tmp <= 0) {
 8008630:	f1ba 0f00 	cmp.w	sl, #0
 8008634:	ddec      	ble.n	8008610 <_lv_disp_refr_timer+0x28c>
                max_row = tmp.y2 + 1;
 8008636:	9101      	str	r1, [sp, #4]
            draw_buf->area.y2 = row + max_row - 1;
 8008638:	f8bd 2004 	ldrh.w	r2, [sp, #4]
        lv_coord_t row_last = 0;
 800863c:	f04f 0800 	mov.w	r8, #0
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
 8008640:	f9b5 0032 	ldrsh.w	r0, [r5, #50]	; 0x32
 8008644:	1e51      	subs	r1, r2, #1
 8008646:	9103      	str	r1, [sp, #12]
 8008648:	9901      	ldr	r1, [sp, #4]
 800864a:	eb00 0c01 	add.w	ip, r0, r1
 800864e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008652:	459c      	cmp	ip, r3
 8008654:	dd10      	ble.n	8008678 <_lv_disp_refr_timer+0x2f4>
        if(y2 != row_last) {
 8008656:	4543      	cmp	r3, r8
 8008658:	d0da      	beq.n	8008610 <_lv_disp_refr_timer+0x28c>
            draw_buf->area.x1 = area_p->x1;
 800865a:	f9b5 1030 	ldrsh.w	r1, [r5, #48]	; 0x30
 800865e:	6822      	ldr	r2, [r4, #0]
 8008660:	8231      	strh	r1, [r6, #16]
            draw_buf->area.x2 = area_p->x2;
 8008662:	f9b5 1034 	ldrsh.w	r1, [r5, #52]	; 0x34
            draw_buf->area.y2 = y2;
 8008666:	82f3      	strh	r3, [r6, #22]
            draw_buf->area.x2 = area_p->x2;
 8008668:	82b1      	strh	r1, [r6, #20]
            disp_refr->driver->draw_buf->last_part = 1;
 800866a:	6813      	ldr	r3, [r2, #0]
            draw_buf->area.y1 = row;
 800866c:	8270      	strh	r0, [r6, #18]
            disp_refr->driver->draw_buf->last_part = 1;
 800866e:	e76f      	b.n	8008550 <_lv_disp_refr_timer+0x1cc>
 8008670:	200029b8 	.word	0x200029b8
 8008674:	200029bc 	.word	0x200029bc
            draw_buf->area.x1 = area_p->x1;
 8008678:	9903      	ldr	r1, [sp, #12]
 800867a:	fa1f fa80 	uxth.w	sl, r0
 800867e:	f9b5 c030 	ldrsh.w	ip, [r5, #48]	; 0x30
 8008682:	fa11 f880 	uxtah	r8, r1, r0
 8008686:	f8a6 c010 	strh.w	ip, [r6, #16]
            draw_buf->area.x2 = area_p->x2;
 800868a:	fa0f f888 	sxth.w	r8, r8
 800868e:	f9b5 c034 	ldrsh.w	ip, [r5, #52]	; 0x34
            draw_buf->area.y1 = row;
 8008692:	8270      	strh	r0, [r6, #18]
            draw_buf->area.y2 = row + max_row - 1;
 8008694:	4598      	cmp	r8, r3
            draw_buf->area.x2 = area_p->x2;
 8008696:	f8a6 c014 	strh.w	ip, [r6, #20]
            draw_buf->area.y2 = row + max_row - 1;
 800869a:	bfa8      	it	ge
 800869c:	4698      	movge	r8, r3
            if(y2 == row_last) disp_refr->driver->draw_buf->last_part = 1;
 800869e:	4543      	cmp	r3, r8
            draw_buf->area.y2 = row + max_row - 1;
 80086a0:	f8a6 8016 	strh.w	r8, [r6, #22]
            if(y2 == row_last) disp_refr->driver->draw_buf->last_part = 1;
 80086a4:	d109      	bne.n	80086ba <_lv_disp_refr_timer+0x336>
 80086a6:	f8d9 0000 	ldr.w	r0, [r9]
 80086aa:	6800      	ldr	r0, [r0, #0]
 80086ac:	6841      	ldr	r1, [r0, #4]
 80086ae:	f891 0020 	ldrb.w	r0, [r1, #32]
 80086b2:	f040 0002 	orr.w	r0, r0, #2
 80086b6:	f881 0020 	strb.w	r0, [r1, #32]
            lv_refr_area_part(area_p);
 80086ba:	ee18 0a10 	vmov	r0, s16
 80086be:	e9cd 3204 	strd	r3, r2, [sp, #16]
 80086c2:	f7ff fd59 	bl	8008178 <lv_refr_area_part>
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
 80086c6:	9a05      	ldr	r2, [sp, #20]
 80086c8:	9b04      	ldr	r3, [sp, #16]
 80086ca:	4492      	add	sl, r2
 80086cc:	fa0f f08a 	sxth.w	r0, sl
 80086d0:	e7ba      	b.n	8008648 <_lv_disp_refr_timer+0x2c4>
        if(disp_refr->driver->full_refresh) {
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	7a1b      	ldrb	r3, [r3, #8]
 80086d6:	07db      	lsls	r3, r3, #31
 80086d8:	d501      	bpl.n	80086de <_lv_disp_refr_timer+0x35a>
            draw_buf_flush();
 80086da:	f7ff fb87 	bl	8007dec <draw_buf_flush>
        lv_memset_00(disp_refr->inv_areas, sizeof(disp_refr->inv_areas));
 80086de:	6820      	ldr	r0, [r4, #0]
 80086e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80086e4:	3030      	adds	r0, #48	; 0x30
 80086e6:	f00f fa25 	bl	8017b34 <lv_memset_00>
        lv_memset_00(disp_refr->inv_area_joined, sizeof(disp_refr->inv_area_joined));
 80086ea:	6820      	ldr	r0, [r4, #0]
 80086ec:	2120      	movs	r1, #32
 80086ee:	f500 7098 	add.w	r0, r0, #304	; 0x130
 80086f2:	f00f fa1f 	bl	8017b34 <lv_memset_00>
        disp_refr->inv_p = 0;
 80086f6:	6823      	ldr	r3, [r4, #0]
 80086f8:	2200      	movs	r2, #0
        elaps = lv_tick_elaps(start);
 80086fa:	ee18 0a90 	vmov	r0, s17
        disp_refr->inv_p = 0;
 80086fe:	f8a3 2150 	strh.w	r2, [r3, #336]	; 0x150
        elaps = lv_tick_elaps(start);
 8008702:	f00e f993 	bl	8016a2c <lv_tick_elaps>
        if(disp_refr->driver->monitor_cb) {
 8008706:	6823      	ldr	r3, [r4, #0]
        elaps = lv_tick_elaps(start);
 8008708:	4601      	mov	r1, r0
        if(disp_refr->driver->monitor_cb) {
 800870a:	6818      	ldr	r0, [r3, #0]
 800870c:	6983      	ldr	r3, [r0, #24]
 800870e:	2b00      	cmp	r3, #0
 8008710:	f43f ae7a 	beq.w	8008408 <_lv_disp_refr_timer+0x84>
            disp_refr->driver->monitor_cb(disp_refr->driver, elaps, px_num);
 8008714:	4a01      	ldr	r2, [pc, #4]	; (800871c <_lv_disp_refr_timer+0x398>)
 8008716:	6812      	ldr	r2, [r2, #0]
 8008718:	4798      	blx	r3
 800871a:	e675      	b.n	8008408 <_lv_disp_refr_timer+0x84>
 800871c:	200029bc 	.word	0x200029bc

08008720 <apply_theme>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void apply_theme(lv_theme_t * th, lv_obj_t * obj)
{
 8008720:	b570      	push	{r4, r5, r6, lr}
 8008722:	4604      	mov	r4, r0
    if(th->parent) apply_theme(th->parent, obj);
 8008724:	6840      	ldr	r0, [r0, #4]
{
 8008726:	460d      	mov	r5, r1
    if(th->parent) apply_theme(th->parent, obj);
 8008728:	b108      	cbz	r0, 800872e <apply_theme+0xe>
 800872a:	f7ff fff9 	bl	8008720 <apply_theme>
    if(th->apply_cb) th->apply_cb(th, obj);
 800872e:	6823      	ldr	r3, [r4, #0]
 8008730:	b123      	cbz	r3, 800873c <apply_theme+0x1c>
 8008732:	4629      	mov	r1, r5
 8008734:	4620      	mov	r0, r4
}
 8008736:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    if(th->apply_cb) th->apply_cb(th, obj);
 800873a:	4718      	bx	r3
}
 800873c:	bd70      	pop	{r4, r5, r6, pc}

0800873e <lv_theme_get_from_obj>:
{
 800873e:	b508      	push	{r3, lr}
    lv_disp_t * disp = obj ? lv_obj_get_disp(obj) : lv_disp_get_default();
 8008740:	b128      	cbz	r0, 800874e <lv_theme_get_from_obj+0x10>
 8008742:	f7ff f93b 	bl	80079bc <lv_obj_get_disp>
}
 8008746:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return lv_disp_get_theme(disp);
 800874a:	f7f9 bb3f 	b.w	8001dcc <lv_disp_get_theme>
    lv_disp_t * disp = obj ? lv_obj_get_disp(obj) : lv_disp_get_default();
 800874e:	f00e f8ab 	bl	80168a8 <lv_disp_get_default>
 8008752:	e7f8      	b.n	8008746 <lv_theme_get_from_obj+0x8>

08008754 <lv_theme_apply>:
{
 8008754:	b538      	push	{r3, r4, r5, lr}
 8008756:	4605      	mov	r5, r0
    lv_theme_t * th = lv_theme_get_from_obj(obj);
 8008758:	f7ff fff1 	bl	800873e <lv_theme_get_from_obj>
    if(th == NULL) return;
 800875c:	4604      	mov	r4, r0
 800875e:	b150      	cbz	r0, 8008776 <lv_theme_apply+0x22>
 * Remove all styles from an object
 * @param obj       pointer to an object
 */
static inline void lv_obj_remove_style_all(struct _lv_obj_t * obj)
{
    lv_obj_remove_style(obj, NULL, LV_PART_ANY | LV_STATE_ANY);
 8008760:	4628      	mov	r0, r5
 8008762:	2100      	movs	r1, #0
 8008764:	4a04      	ldr	r2, [pc, #16]	; (8008778 <lv_theme_apply+0x24>)
 8008766:	f7fe fd23 	bl	80071b0 <lv_obj_remove_style>
    apply_theme(th, obj);    /*Apply the theme including the base theme(s)*/
 800876a:	4629      	mov	r1, r5
 800876c:	4620      	mov	r0, r4
}
 800876e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    apply_theme(th, obj);    /*Apply the theme including the base theme(s)*/
 8008772:	f7ff bfd5 	b.w	8008720 <apply_theme>
}
 8008776:	bd38      	pop	{r3, r4, r5, pc}
 8008778:	000fffff 	.word	0x000fffff

0800877c <lv_theme_get_color_primary>:
{
 800877c:	b508      	push	{r3, lr}
    lv_theme_t * th = lv_theme_get_from_obj(obj);
 800877e:	f7ff ffde 	bl	800873e <lv_theme_get_from_obj>
    return th ? th->color_primary : lv_palette_main(LV_PALETTE_BLUE_GREY);
 8008782:	b108      	cbz	r0, 8008788 <lv_theme_get_color_primary+0xc>
 8008784:	8a00      	ldrh	r0, [r0, #16]
}
 8008786:	bd08      	pop	{r3, pc}
    return th ? th->color_primary : lv_palette_main(LV_PALETTE_BLUE_GREY);
 8008788:	2011      	movs	r0, #17
}
 800878a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return th ? th->color_primary : lv_palette_main(LV_PALETTE_BLUE_GREY);
 800878e:	f00e bd85 	b.w	801729c <lv_palette_main>

08008792 <get_rounded_area>:
        if(ok) lv_draw_rect(q->draw_area, &quarter_area, q->draw_dsc);
    }
}

static void get_rounded_area(int16_t angle, lv_coord_t radius, uint8_t thickness, lv_area_t * res_area)
{
 8008792:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008796:	4607      	mov	r7, r0
    uint8_t thick_corr = (thickness & 0x01) ? 0 : 1;

    int32_t cir_x;
    int32_t cir_y;

    cir_x = ((radius - thick_half) * lv_trigo_sin(90 - angle)) >> (LV_TRIGO_SHIFT - ps);
 8008798:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 800879c:	eba1 0952 	sub.w	r9, r1, r2, lsr #1
{
 80087a0:	4690      	mov	r8, r2
    cir_x = ((radius - thick_half) * lv_trigo_sin(90 - angle)) >> (LV_TRIGO_SHIFT - ps);
 80087a2:	b200      	sxth	r0, r0
{
 80087a4:	461d      	mov	r5, r3
    int32_t thick_half = thickness / 2;
 80087a6:	0856      	lsrs	r6, r2, #1
    cir_x = ((radius - thick_half) * lv_trigo_sin(90 - angle)) >> (LV_TRIGO_SHIFT - ps);
 80087a8:	f00e fee8 	bl	801757c <lv_trigo_sin>
 80087ac:	fb09 f000 	mul.w	r0, r9, r0
 80087b0:	b2b6      	uxth	r6, r6
 80087b2:	11c4      	asrs	r4, r0, #7
    cir_y = ((radius - thick_half) * lv_trigo_sin(angle)) >> (LV_TRIGO_SHIFT - ps);
 80087b4:	4638      	mov	r0, r7
 80087b6:	f00e fee1 	bl	801757c <lv_trigo_sin>
 80087ba:	ea6f 0208 	mvn.w	r2, r8
 80087be:	fb09 f000 	mul.w	r0, r9, r0

    /*Actually the center of the pixel need to be calculated so apply 1/2 px offset*/
    if(cir_x > 0) {
 80087c2:	2c00      	cmp	r4, #0
 80087c4:	f002 0301 	and.w	r3, r2, #1
    cir_y = ((radius - thick_half) * lv_trigo_sin(angle)) >> (LV_TRIGO_SHIFT - ps);
 80087c8:	ea4f 10e0 	mov.w	r0, r0, asr #7
    if(cir_x > 0) {
 80087cc:	dd14      	ble.n	80087f8 <get_rounded_area+0x66>
        cir_x = (cir_x - pa) >> ps;
 80087ce:	3c7f      	subs	r4, #127	; 0x7f
        res_area->x1 = cir_x - thick_half + thick_corr;
 80087d0:	1b9a      	subs	r2, r3, r6
 80087d2:	f3c4 240f 	ubfx	r4, r4, #8, #16
 80087d6:	4422      	add	r2, r4
        res_area->x2 = cir_x + thick_half;
 80087d8:	4434      	add	r4, r6
        res_area->x1 = cir_x - thick_half + thick_corr;
 80087da:	802a      	strh	r2, [r5, #0]
        cir_x = (cir_x + pa) >> ps;
        res_area->x1 = cir_x - thick_half;
        res_area->x2 = cir_x + thick_half - thick_corr;
    }

    if(cir_y > 0) {
 80087dc:	2800      	cmp	r0, #0
        res_area->x2 = cir_x + thick_half - thick_corr;
 80087de:	80ac      	strh	r4, [r5, #4]
    if(cir_y > 0) {
 80087e0:	dd12      	ble.n	8008808 <get_rounded_area+0x76>
        cir_y = (cir_y - pa) >> ps;
 80087e2:	f1a0 017f 	sub.w	r1, r0, #127	; 0x7f
        res_area->y1 = cir_y - thick_half + thick_corr;
 80087e6:	1b9a      	subs	r2, r3, r6
 80087e8:	f3c1 210f 	ubfx	r1, r1, #8, #16
 80087ec:	440a      	add	r2, r1
        res_area->y2 = cir_y + thick_half;
 80087ee:	4431      	add	r1, r6
        res_area->y1 = cir_y - thick_half + thick_corr;
 80087f0:	806a      	strh	r2, [r5, #2]
        res_area->y2 = cir_y + thick_half;
 80087f2:	80e9      	strh	r1, [r5, #6]
    else {
        cir_y = (cir_y + pa) >> ps;
        res_area->y1 = cir_y - thick_half;
        res_area->y2 = cir_y + thick_half - thick_corr;
    }
}
 80087f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        cir_x = (cir_x + pa) >> ps;
 80087f8:	347f      	adds	r4, #127	; 0x7f
        res_area->x1 = cir_x - thick_half;
 80087fa:	f3c4 240f 	ubfx	r4, r4, #8, #16
 80087fe:	1ba2      	subs	r2, r4, r6
 8008800:	802a      	strh	r2, [r5, #0]
        res_area->x2 = cir_x + thick_half - thick_corr;
 8008802:	1af2      	subs	r2, r6, r3
 8008804:	4414      	add	r4, r2
 8008806:	e7e9      	b.n	80087dc <get_rounded_area+0x4a>
        cir_y = (cir_y + pa) >> ps;
 8008808:	307f      	adds	r0, #127	; 0x7f
        res_area->y1 = cir_y - thick_half;
 800880a:	f3c0 200f 	ubfx	r0, r0, #8, #16
 800880e:	1b82      	subs	r2, r0, r6
 8008810:	806a      	strh	r2, [r5, #2]
        res_area->y2 = cir_y + thick_half - thick_corr;
 8008812:	1af2      	subs	r2, r6, r3
 8008814:	4410      	add	r0, r2
 8008816:	80e8      	strh	r0, [r5, #6]
}
 8008818:	e7ec      	b.n	80087f4 <get_rounded_area+0x62>

0800881a <lv_draw_arc_dsc_init>:
{
 800881a:	b510      	push	{r4, lr}
    lv_memset_00(dsc, sizeof(lv_draw_arc_dsc_t));
 800881c:	210c      	movs	r1, #12
{
 800881e:	4604      	mov	r4, r0
    lv_memset_00(dsc, sizeof(lv_draw_arc_dsc_t));
 8008820:	f00f f988 	bl	8017b34 <lv_memset_00>
    dsc->opa = LV_OPA_COVER;
 8008824:	23ff      	movs	r3, #255	; 0xff
 8008826:	7223      	strb	r3, [r4, #8]
    dsc->color = lv_color_black();
 8008828:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800882c:	6023      	str	r3, [r4, #0]
}
 800882e:	bd10      	pop	{r4, pc}

08008830 <lv_draw_arc>:
{
 8008830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008834:	ed2d 8b04 	vpush	{d8-d9}
 8008838:	b0d5      	sub	sp, #340	; 0x154
 800883a:	461d      	mov	r5, r3
    if(dsc->opa <= LV_OPA_MIN) return;
 800883c:	e9dd 8363 	ldrd	r8, r3, [sp, #396]	; 0x18c
{
 8008840:	f8bd 4188 	ldrh.w	r4, [sp, #392]	; 0x188
    if(dsc->opa <= LV_OPA_MIN) return;
 8008844:	7a1b      	ldrb	r3, [r3, #8]
{
 8008846:	9205      	str	r2, [sp, #20]
    if(dsc->opa <= LV_OPA_MIN) return;
 8008848:	2b02      	cmp	r3, #2
{
 800884a:	e9cd 0106 	strd	r0, r1, [sp, #24]
    if(dsc->opa <= LV_OPA_MIN) return;
 800884e:	d972      	bls.n	8008936 <lv_draw_arc+0x106>
    if(dsc->width == 0) return;
 8008850:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8008852:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8008856:	9304      	str	r3, [sp, #16]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d06c      	beq.n	8008936 <lv_draw_arc+0x106>
    if(start_angle == end_angle) return;
 800885c:	42a5      	cmp	r5, r4
 800885e:	d06a      	beq.n	8008936 <lv_draw_arc+0x106>
    if(width > radius) width = radius;
 8008860:	4293      	cmp	r3, r2
    lv_draw_rect_dsc_init(&cir_dsc);
 8008862:	a82c      	add	r0, sp, #176	; 0xb0
    if(width > radius) width = radius;
 8008864:	bfc4      	itt	gt
 8008866:	f9bd 3014 	ldrshgt.w	r3, [sp, #20]
 800886a:	9304      	strgt	r3, [sp, #16]
    lv_draw_rect_dsc_init(&cir_dsc);
 800886c:	f004 f90c 	bl	800ca88 <lv_draw_rect_dsc_init>
    cir_dsc.blend_mode = dsc->blend_mode;
 8008870:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8008872:	7a5b      	ldrb	r3, [r3, #9]
 8008874:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8008878:	f88d 30b2 	strb.w	r3, [sp, #178]	; 0xb2
    if(dsc->img_src) {
 800887c:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800887e:	685a      	ldr	r2, [r3, #4]
 8008880:	7a1b      	ldrb	r3, [r3, #8]
 8008882:	2a00      	cmp	r2, #0
 8008884:	d05c      	beq.n	8008940 <lv_draw_arc+0x110>
        cir_dsc.bg_opa = LV_OPA_TRANSP;
 8008886:	2100      	movs	r1, #0
        cir_dsc.bg_img_src = dsc->img_src;
 8008888:	922f      	str	r2, [sp, #188]	; 0xbc
        cir_dsc.bg_img_opa = dsc->opa;
 800888a:	f88d 30c6 	strb.w	r3, [sp, #198]	; 0xc6
        cir_dsc.bg_opa = LV_OPA_TRANSP;
 800888e:	f88d 10ba 	strb.w	r1, [sp, #186]	; 0xba
    area_out.x1 = center_x - radius;
 8008892:	f8bd a018 	ldrh.w	sl, [sp, #24]
 8008896:	9b05      	ldr	r3, [sp, #20]
    area_out.y1 = center_y - radius;
 8008898:	f8bd 701c 	ldrh.w	r7, [sp, #28]
    area_out.x1 = center_x - radius;
 800889c:	ebaa 0c03 	sub.w	ip, sl, r3
    area_in.x1 += dsc->width;
 80088a0:	9964      	ldr	r1, [sp, #400]	; 0x190
    area_out.x1 = center_x - radius;
 80088a2:	fa0f f38c 	sxth.w	r3, ip
    area_in.x1 += dsc->width;
 80088a6:	f9b1 0002 	ldrsh.w	r0, [r1, #2]
 80088aa:	8849      	ldrh	r1, [r1, #2]
    area_out.x1 = center_x - radius;
 80088ac:	9308      	str	r3, [sp, #32]
 80088ae:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
    area_in.x1 += dsc->width;
 80088b2:	fa11 fc8c 	uxtah	ip, r1, ip
    area_out.y1 = center_y - radius;
 80088b6:	9b05      	ldr	r3, [sp, #20]
    area_in.x1 += dsc->width;
 80088b8:	f8ad c044 	strh.w	ip, [sp, #68]	; 0x44
    area_out.y1 = center_y - radius;
 80088bc:	1afe      	subs	r6, r7, r3
 80088be:	b233      	sxth	r3, r6
    area_in.y1 += dsc->width;
 80088c0:	fa11 f686 	uxtah	r6, r1, r6
    area_out.y1 = center_y - radius;
 80088c4:	9309      	str	r3, [sp, #36]	; 0x24
 80088c6:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
    area_out.x2 = center_x + radius - 1;  /*-1 because the center already belongs to the left/bottom part*/
 80088ca:	9b05      	ldr	r3, [sp, #20]
    area_in.y1 += dsc->width;
 80088cc:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
    area_out.x2 = center_x + radius - 1;  /*-1 because the center already belongs to the left/bottom part*/
 80088d0:	4453      	add	r3, sl
 80088d2:	b29b      	uxth	r3, r3
 80088d4:	1e5a      	subs	r2, r3, #1
 80088d6:	930a      	str	r3, [sp, #40]	; 0x28
    area_out.y2 = center_y + radius - 1;
 80088d8:	9b05      	ldr	r3, [sp, #20]
    area_out.x2 = center_x + radius - 1;  /*-1 because the center already belongs to the left/bottom part*/
 80088da:	b292      	uxth	r2, r2
    area_out.y2 = center_y + radius - 1;
 80088dc:	18fb      	adds	r3, r7, r3
    area_out.x2 = center_x + radius - 1;  /*-1 because the center already belongs to the left/bottom part*/
 80088de:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
    area_in.x2 -= dsc->width;
 80088e2:	1a52      	subs	r2, r2, r1
    area_out.y2 = center_y + radius - 1;
 80088e4:	b29b      	uxth	r3, r3
    area_in.x2 -= dsc->width;
 80088e6:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
    area_out.y2 = center_y + radius - 1;
 80088ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80088ec:	3b01      	subs	r3, #1
 80088ee:	b29b      	uxth	r3, r3
 80088f0:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
    area_in.y2 -= dsc->width;
 80088f4:	1a5b      	subs	r3, r3, r1
 80088f6:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
    if(start_angle + 360 == end_angle || start_angle == end_angle + 360) {
 80088fa:	f505 73b4 	add.w	r3, r5, #360	; 0x168
 80088fe:	42a3      	cmp	r3, r4
 8008900:	d003      	beq.n	800890a <lv_draw_arc+0xda>
 8008902:	f504 73b4 	add.w	r3, r4, #360	; 0x168
 8008906:	429d      	cmp	r5, r3
 8008908:	d124      	bne.n	8008954 <lv_draw_arc+0x124>
        cir_dsc.border_color = dsc->color;
 800890a:	9b64      	ldr	r3, [sp, #400]	; 0x190
        lv_draw_rect(&area_out, clip_area, &cir_dsc);
 800890c:	aa2c      	add	r2, sp, #176	; 0xb0
        cir_dsc.border_width = dsc->width;
 800890e:	f8ad 00cc 	strh.w	r0, [sp, #204]	; 0xcc
        lv_draw_rect(&area_out, clip_area, &cir_dsc);
 8008912:	4641      	mov	r1, r8
        cir_dsc.border_color = dsc->color;
 8008914:	881b      	ldrh	r3, [r3, #0]
        lv_draw_rect(&area_out, clip_area, &cir_dsc);
 8008916:	a80f      	add	r0, sp, #60	; 0x3c
        cir_dsc.border_color = dsc->color;
 8008918:	f8ad 30ca 	strh.w	r3, [sp, #202]	; 0xca
        cir_dsc.border_opa = dsc->opa;
 800891c:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800891e:	7a1b      	ldrb	r3, [r3, #8]
 8008920:	f88d 30ce 	strb.w	r3, [sp, #206]	; 0xce
        cir_dsc.bg_opa = LV_OPA_TRANSP;
 8008924:	2300      	movs	r3, #0
 8008926:	f88d 30ba 	strb.w	r3, [sp, #186]	; 0xba
        cir_dsc.radius = LV_RADIUS_CIRCLE;
 800892a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800892e:	f8ad 30b0 	strh.w	r3, [sp, #176]	; 0xb0
        lv_draw_rect(&area_out, clip_area, &cir_dsc);
 8008932:	f004 f8cb 	bl	800cacc <lv_draw_rect>
}
 8008936:	b055      	add	sp, #340	; 0x154
 8008938:	ecbd 8b04 	vpop	{d8-d9}
 800893c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        cir_dsc.bg_opa = dsc->opa;
 8008940:	f88d 30ba 	strb.w	r3, [sp, #186]	; 0xba
        cir_dsc.bg_color = dsc->color;
 8008944:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8008946:	881b      	ldrh	r3, [r3, #0]
 8008948:	f8ad 30b4 	strh.w	r3, [sp, #180]	; 0xb4
 800894c:	e7a1      	b.n	8008892 <lv_draw_arc+0x62>
    while(start_angle >= 360) start_angle -= 360;
 800894e:	f5a5 75b4 	sub.w	r5, r5, #360	; 0x168
 8008952:	b2ad      	uxth	r5, r5
 8008954:	f5b5 7fb4 	cmp.w	r5, #360	; 0x168
 8008958:	d2f9      	bcs.n	800894e <lv_draw_arc+0x11e>
    while(end_angle >= 360) end_angle -= 360;
 800895a:	f5b4 7fb4 	cmp.w	r4, #360	; 0x168
 800895e:	f080 8086 	bcs.w	8008a6e <lv_draw_arc+0x23e>
    lv_draw_mask_angle_init(&mask_angle_param, center_x, center_y, start_angle, end_angle);
 8008962:	b223      	sxth	r3, r4
 8008964:	a839      	add	r0, sp, #228	; 0xe4
 8008966:	fa0f f985 	sxth.w	r9, r5
 800896a:	9300      	str	r3, [sp, #0]
 800896c:	ee08 3a10 	vmov	s16, r3
 8008970:	464b      	mov	r3, r9
 8008972:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8008976:	f003 fca5 	bl	800c2c4 <lv_draw_mask_angle_init>
    int16_t mask_angle_id = lv_draw_mask_add(&mask_angle_param, NULL);
 800897a:	2100      	movs	r1, #0
 800897c:	a839      	add	r0, sp, #228	; 0xe4
 800897e:	f003 fb7f 	bl	800c080 <lv_draw_mask_add>
    lv_draw_mask_radius_init(&mask_in_param, &area_in, LV_RADIUS_CIRCLE, true);
 8008982:	2301      	movs	r3, #1
 8008984:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8008988:	a911      	add	r1, sp, #68	; 0x44
    int16_t mask_angle_id = lv_draw_mask_add(&mask_angle_param, NULL);
 800898a:	ee08 0a90 	vmov	s17, r0
    lv_draw_mask_radius_init(&mask_in_param, &area_in, LV_RADIUS_CIRCLE, true);
 800898e:	a817      	add	r0, sp, #92	; 0x5c
 8008990:	f003 fcdc 	bl	800c34c <lv_draw_mask_radius_init>
    int16_t mask_in_id = lv_draw_mask_add(&mask_in_param, NULL);
 8008994:	2100      	movs	r1, #0
 8008996:	a817      	add	r0, sp, #92	; 0x5c
 8008998:	f003 fb72 	bl	800c080 <lv_draw_mask_add>
    lv_draw_mask_radius_init(&mask_out_param, &area_out, LV_RADIUS_CIRCLE, false);
 800899c:	2300      	movs	r3, #0
 800899e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80089a2:	a90f      	add	r1, sp, #60	; 0x3c
    int16_t mask_in_id = lv_draw_mask_add(&mask_in_param, NULL);
 80089a4:	ee09 0a10 	vmov	s18, r0
    lv_draw_mask_radius_init(&mask_out_param, &area_out, LV_RADIUS_CIRCLE, false);
 80089a8:	a81e      	add	r0, sp, #120	; 0x78
 80089aa:	f003 fccf 	bl	800c34c <lv_draw_mask_radius_init>
    int16_t mask_out_id = lv_draw_mask_add(&mask_out_param, NULL);
 80089ae:	2100      	movs	r1, #0
 80089b0:	a81e      	add	r0, sp, #120	; 0x78
 80089b2:	f003 fb65 	bl	800c080 <lv_draw_mask_add>
    if(end_angle > start_angle) {
 80089b6:	42a5      	cmp	r5, r4
    int16_t mask_out_id = lv_draw_mask_add(&mask_out_param, NULL);
 80089b8:	ee09 0a90 	vmov	s19, r0
        angle_gap = 360 - (end_angle - start_angle);
 80089bc:	bf36      	itet	cc
 80089be:	1b63      	subcc	r3, r4, r5
        angle_gap = start_angle - end_angle;
 80089c0:	1b2b      	subcs	r3, r5, r4
        angle_gap = 360 - (end_angle - start_angle);
 80089c2:	f5c3 73b4 	rsbcc	r3, r3, #360	; 0x168
    if(angle_gap > SPLIT_ANGLE_GAP_LIMIT && radius > SPLIT_RADIUS_LIMIT) {
 80089c6:	2b3c      	cmp	r3, #60	; 0x3c
 80089c8:	f340 8385 	ble.w	80090d6 <lv_draw_arc+0x8a6>
 80089cc:	9b05      	ldr	r3, [sp, #20]
 80089ce:	2b0a      	cmp	r3, #10
 80089d0:	f240 8381 	bls.w	80090d6 <lv_draw_arc+0x8a6>
        q_dsc.start_quarter = (start_angle / 90) & 0x3;
 80089d4:	235a      	movs	r3, #90	; 0x5a
    if(q->start_quarter == 0 && q->end_quarter == 0 && q->start_angle < q->end_angle) {
 80089d6:	2d59      	cmp	r5, #89	; 0x59
        q_dsc.radius = radius;
 80089d8:	f9bd 6014 	ldrsh.w	r6, [sp, #20]
        q_dsc.start_quarter = (start_angle / 90) & 0x3;
 80089dc:	fbb5 f2f3 	udiv	r2, r5, r3
        q_dsc.end_quarter = (end_angle / 90) & 0x3;
 80089e0:	fbb4 fbf3 	udiv	fp, r4, r3
        q_dsc.start_quarter = (start_angle / 90) & 0x3;
 80089e4:	9203      	str	r2, [sp, #12]
    if(q->start_quarter == 0 && q->end_quarter == 0 && q->start_angle < q->end_angle) {
 80089e6:	d846      	bhi.n	8008a76 <lv_draw_arc+0x246>
 80089e8:	9b04      	ldr	r3, [sp, #16]
 80089ea:	2c59      	cmp	r4, #89	; 0x59
 80089ec:	eba6 0303 	sub.w	r3, r6, r3
 80089f0:	930c      	str	r3, [sp, #48]	; 0x30
 80089f2:	f105 035a 	add.w	r3, r5, #90	; 0x5a
 80089f6:	b21b      	sxth	r3, r3
 80089f8:	930d      	str	r3, [sp, #52]	; 0x34
 80089fa:	f200 816a 	bhi.w	8008cd2 <lv_draw_arc+0x4a2>
 80089fe:	42a5      	cmp	r5, r4
 8008a00:	f080 8167 	bcs.w	8008cd2 <lv_draw_arc+0x4a2>
        quarter_area.y1 = q->center_y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8008a04:	4648      	mov	r0, r9
 8008a06:	f00e fdb9 	bl	801757c <lv_trigo_sin>
 8008a0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008a0c:	4358      	muls	r0, r3
        quarter_area.x2 = q->center_x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 8008a0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        quarter_area.y1 = q->center_y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8008a10:	eb07 30e0 	add.w	r0, r7, r0, asr #15
 8008a14:	f8ad 0096 	strh.w	r0, [sp, #150]	; 0x96
        quarter_area.x2 = q->center_x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 8008a18:	4618      	mov	r0, r3
 8008a1a:	f00e fdaf 	bl	801757c <lv_trigo_sin>
 8008a1e:	4370      	muls	r0, r6
 8008a20:	eb0a 30e0 	add.w	r0, sl, r0, asr #15
 8008a24:	f8ad 0098 	strh.w	r0, [sp, #152]	; 0x98
        quarter_area.y2 = q->center_y + ((lv_trigo_sin(q->end_angle) * q->radius) >> LV_TRIGO_SHIFT);
 8008a28:	ee18 0a10 	vmov	r0, s16
 8008a2c:	f00e fda6 	bl	801757c <lv_trigo_sin>
 8008a30:	4370      	muls	r0, r6
 8008a32:	eb07 30e0 	add.w	r0, r7, r0, asr #15
 8008a36:	f8ad 009a 	strh.w	r0, [sp, #154]	; 0x9a
        quarter_area.x1 = q->center_x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8008a3a:	f104 005a 	add.w	r0, r4, #90	; 0x5a
 8008a3e:	b200      	sxth	r0, r0
 8008a40:	f00e fd9c 	bl	801757c <lv_trigo_sin>
 8008a44:	9b0c      	ldr	r3, [sp, #48]	; 0x30
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, q->clip_area);
 8008a46:	a925      	add	r1, sp, #148	; 0x94
 8008a48:	4642      	mov	r2, r8
        quarter_area.x1 = q->center_x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8008a4a:	4358      	muls	r0, r3
 8008a4c:	eb0a 33e0 	add.w	r3, sl, r0, asr #15
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, q->clip_area);
 8008a50:	4608      	mov	r0, r1
        quarter_area.x1 = q->center_x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8008a52:	f8ad 3094 	strh.w	r3, [sp, #148]	; 0x94
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, q->clip_area);
 8008a56:	f00e fa1e 	bl	8016e96 <_lv_area_intersect>
        if(ok) lv_draw_rect(q->draw_area, &quarter_area, q->draw_dsc);
 8008a5a:	b120      	cbz	r0, 8008a66 <lv_draw_arc+0x236>
 8008a5c:	aa2c      	add	r2, sp, #176	; 0xb0
 8008a5e:	a925      	add	r1, sp, #148	; 0x94
 8008a60:	a80f      	add	r0, sp, #60	; 0x3c
 8008a62:	f004 f833 	bl	800cacc <lv_draw_rect>
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 1 && q->end_angle < q->start_angle) ||
 8008a66:	42a5      	cmp	r5, r4
 8008a68:	f200 82a6 	bhi.w	8008fb8 <lv_draw_arc+0x788>
 8008a6c:	e25c      	b.n	8008f28 <lv_draw_arc+0x6f8>
    while(end_angle >= 360) end_angle -= 360;
 8008a6e:	f5a4 74b4 	sub.w	r4, r4, #360	; 0x168
 8008a72:	b2a4      	uxth	r4, r4
 8008a74:	e771      	b.n	800895a <lv_draw_arc+0x12a>
    else if(q->start_quarter == 0 || q->end_quarter == 0) {
 8008a76:	2c59      	cmp	r4, #89	; 0x59
 8008a78:	f200 81af 	bhi.w	8008dda <lv_draw_arc+0x5aa>
            quarter_area.x2 = q->center_x + q->radius;
 8008a7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
            quarter_area.y2 = q->center_y + ((lv_trigo_sin(q->end_angle) * q->radius) >> LV_TRIGO_SHIFT);
 8008a7e:	ee18 0a10 	vmov	r0, s16
            quarter_area.x2 = q->center_x + q->radius;
 8008a82:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
            quarter_area.y1 = q->center_y;
 8008a86:	9b07      	ldr	r3, [sp, #28]
 8008a88:	f8ad 3096 	strh.w	r3, [sp, #150]	; 0x96
            quarter_area.y2 = q->center_y + ((lv_trigo_sin(q->end_angle) * q->radius) >> LV_TRIGO_SHIFT);
 8008a8c:	f00e fd76 	bl	801757c <lv_trigo_sin>
 8008a90:	4370      	muls	r0, r6
 8008a92:	eb07 30e0 	add.w	r0, r7, r0, asr #15
 8008a96:	f8ad 009a 	strh.w	r0, [sp, #154]	; 0x9a
            quarter_area.x1 = q->center_x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8008a9a:	f104 005a 	add.w	r0, r4, #90	; 0x5a
 8008a9e:	b200      	sxth	r0, r0
 8008aa0:	f00e fd6c 	bl	801757c <lv_trigo_sin>
 8008aa4:	9b04      	ldr	r3, [sp, #16]
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, q->clip_area);
 8008aa6:	a925      	add	r1, sp, #148	; 0x94
 8008aa8:	4642      	mov	r2, r8
            quarter_area.x1 = q->center_x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8008aaa:	1af3      	subs	r3, r6, r3
 8008aac:	4358      	muls	r0, r3
 8008aae:	eb0a 30e0 	add.w	r0, sl, r0, asr #15
 8008ab2:	f8ad 0094 	strh.w	r0, [sp, #148]	; 0x94
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, q->clip_area);
 8008ab6:	4608      	mov	r0, r1
 8008ab8:	f00e f9ed 	bl	8016e96 <_lv_area_intersect>
            if(ok) lv_draw_rect(q->draw_area, &quarter_area, q->draw_dsc);
 8008abc:	b120      	cbz	r0, 8008ac8 <lv_draw_arc+0x298>
 8008abe:	aa2c      	add	r2, sp, #176	; 0xb0
 8008ac0:	a925      	add	r1, sp, #148	; 0x94
 8008ac2:	a80f      	add	r0, sp, #60	; 0x3c
 8008ac4:	f004 f802 	bl	800cacc <lv_draw_rect>
    if(q->start_quarter == 1 && q->end_quarter == 1 && q->start_angle < q->end_angle) {
 8008ac8:	9b03      	ldr	r3, [sp, #12]
 8008aca:	2b01      	cmp	r3, #1
 8008acc:	f040 81b3 	bne.w	8008e36 <lv_draw_arc+0x606>
            quarter_area.x1 = q->center_x - q->radius;
 8008ad0:	9b08      	ldr	r3, [sp, #32]
            quarter_area.y2 = q->center_y + ((lv_trigo_sin(q->start_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 8008ad2:	4648      	mov	r0, r9
            quarter_area.x1 = q->center_x - q->radius;
 8008ad4:	f8ad 3094 	strh.w	r3, [sp, #148]	; 0x94
            quarter_area.y1 = q->center_y;
 8008ad8:	9b07      	ldr	r3, [sp, #28]
 8008ada:	f8ad 3096 	strh.w	r3, [sp, #150]	; 0x96
            quarter_area.y2 = q->center_y + ((lv_trigo_sin(q->start_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 8008ade:	f00e fd4d 	bl	801757c <lv_trigo_sin>
 8008ae2:	4370      	muls	r0, r6
 8008ae4:	eb07 30e0 	add.w	r0, r7, r0, asr #15
 8008ae8:	f8ad 009a 	strh.w	r0, [sp, #154]	; 0x9a
            quarter_area.x2 = q->center_x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8008aec:	f105 005a 	add.w	r0, r5, #90	; 0x5a
 8008af0:	b200      	sxth	r0, r0
 8008af2:	f00e fd43 	bl	801757c <lv_trigo_sin>
 8008af6:	9b04      	ldr	r3, [sp, #16]
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, q->clip_area);
 8008af8:	a925      	add	r1, sp, #148	; 0x94
 8008afa:	4642      	mov	r2, r8
            quarter_area.x2 = q->center_x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8008afc:	1af3      	subs	r3, r6, r3
 8008afe:	4358      	muls	r0, r3
 8008b00:	eb0a 30e0 	add.w	r0, sl, r0, asr #15
 8008b04:	f8ad 0098 	strh.w	r0, [sp, #152]	; 0x98
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, q->clip_area);
 8008b08:	4608      	mov	r0, r1
 8008b0a:	f00e f9c4 	bl	8016e96 <_lv_area_intersect>
            if(ok) lv_draw_rect(q->draw_area, &quarter_area, q->draw_dsc);
 8008b0e:	b120      	cbz	r0, 8008b1a <lv_draw_arc+0x2ea>
 8008b10:	aa2c      	add	r2, sp, #176	; 0xb0
 8008b12:	a925      	add	r1, sp, #148	; 0x94
 8008b14:	a80f      	add	r0, sp, #60	; 0x3c
 8008b16:	f003 ffd9 	bl	800cacc <lv_draw_rect>
        if(q->end_quarter == 1) {
 8008b1a:	f1bb 0f01 	cmp.w	fp, #1
 8008b1e:	f000 818d 	beq.w	8008e3c <lv_draw_arc+0x60c>
    else if(q->start_quarter == 2 || q->end_quarter == 2) {
 8008b22:	f1bb 0f02 	cmp.w	fp, #2
 8008b26:	f040 8267 	bne.w	8008ff8 <lv_draw_arc+0x7c8>
            quarter_area.x1 = q->center_x - q->radius;
 8008b2a:	9b08      	ldr	r3, [sp, #32]
            quarter_area.x2 = q->center_x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8008b2c:	f104 005a 	add.w	r0, r4, #90	; 0x5a
            quarter_area.x1 = q->center_x - q->radius;
 8008b30:	f8ad 3094 	strh.w	r3, [sp, #148]	; 0x94
            quarter_area.y2 = q->center_y - 1;
 8008b34:	1e7b      	subs	r3, r7, #1
            quarter_area.x2 = q->center_x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8008b36:	b200      	sxth	r0, r0
            quarter_area.y2 = q->center_y - 1;
 8008b38:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
            quarter_area.x2 = q->center_x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8008b3c:	f00e fd1e 	bl	801757c <lv_trigo_sin>
 8008b40:	9b04      	ldr	r3, [sp, #16]
 8008b42:	1af3      	subs	r3, r6, r3
 8008b44:	4358      	muls	r0, r3
 8008b46:	eb0a 30e0 	add.w	r0, sl, r0, asr #15
 8008b4a:	f8ad 0098 	strh.w	r0, [sp, #152]	; 0x98
            quarter_area.y1 = q->center_y + ((lv_trigo_sin(q->end_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 8008b4e:	ee18 0a10 	vmov	r0, s16
 8008b52:	f00e fd13 	bl	801757c <lv_trigo_sin>
 8008b56:	4370      	muls	r0, r6
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, q->clip_area);
 8008b58:	a925      	add	r1, sp, #148	; 0x94
 8008b5a:	4642      	mov	r2, r8
            quarter_area.y1 = q->center_y + ((lv_trigo_sin(q->end_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 8008b5c:	eb07 30e0 	add.w	r0, r7, r0, asr #15
 8008b60:	f8ad 0096 	strh.w	r0, [sp, #150]	; 0x96
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, q->clip_area);
 8008b64:	4608      	mov	r0, r1
 8008b66:	f00e f996 	bl	8016e96 <_lv_area_intersect>
            if(ok) lv_draw_rect(q->draw_area, &quarter_area, q->draw_dsc);
 8008b6a:	b120      	cbz	r0, 8008b76 <lv_draw_arc+0x346>
 8008b6c:	aa2c      	add	r2, sp, #176	; 0xb0
 8008b6e:	a925      	add	r1, sp, #148	; 0x94
 8008b70:	a80f      	add	r0, sp, #60	; 0x3c
 8008b72:	f003 ffab 	bl	800cacc <lv_draw_rect>
    if(q->start_quarter == 3 && q->end_quarter == 3 && q->start_angle < q->end_angle) {
 8008b76:	9b03      	ldr	r3, [sp, #12]
 8008b78:	2b03      	cmp	r3, #3
 8008b7a:	f040 824d 	bne.w	8009018 <lv_draw_arc+0x7e8>
            quarter_area.x2 = q->center_x + q->radius;
 8008b7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
            quarter_area.x1 = q->center_x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8008b80:	f105 005a 	add.w	r0, r5, #90	; 0x5a
            quarter_area.x2 = q->center_x + q->radius;
 8008b84:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
            quarter_area.y2 = q->center_y - 1;
 8008b88:	1e7b      	subs	r3, r7, #1
            quarter_area.x1 = q->center_x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8008b8a:	b200      	sxth	r0, r0
            quarter_area.y2 = q->center_y - 1;
 8008b8c:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
            quarter_area.x1 = q->center_x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8008b90:	f00e fcf4 	bl	801757c <lv_trigo_sin>
 8008b94:	9b04      	ldr	r3, [sp, #16]
 8008b96:	1af3      	subs	r3, r6, r3
 8008b98:	4358      	muls	r0, r3
 8008b9a:	eb0a 30e0 	add.w	r0, sl, r0, asr #15
 8008b9e:	f8ad 0094 	strh.w	r0, [sp, #148]	; 0x94
            quarter_area.y1 = q->center_y + ((lv_trigo_sin(q->start_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 8008ba2:	4648      	mov	r0, r9
 8008ba4:	f00e fcea 	bl	801757c <lv_trigo_sin>
 8008ba8:	4370      	muls	r0, r6
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, q->clip_area);
 8008baa:	a925      	add	r1, sp, #148	; 0x94
 8008bac:	4642      	mov	r2, r8
            quarter_area.y1 = q->center_y + ((lv_trigo_sin(q->start_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 8008bae:	eb07 30e0 	add.w	r0, r7, r0, asr #15
 8008bb2:	f8ad 0096 	strh.w	r0, [sp, #150]	; 0x96
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, q->clip_area);
 8008bb6:	4608      	mov	r0, r1
 8008bb8:	f00e f96d 	bl	8016e96 <_lv_area_intersect>
            if(ok) lv_draw_rect(q->draw_area, &quarter_area, q->draw_dsc);
 8008bbc:	b120      	cbz	r0, 8008bc8 <lv_draw_arc+0x398>
 8008bbe:	aa2c      	add	r2, sp, #176	; 0xb0
 8008bc0:	a925      	add	r1, sp, #148	; 0x94
 8008bc2:	a80f      	add	r0, sp, #60	; 0x3c
 8008bc4:	f003 ff82 	bl	800cacc <lv_draw_rect>
        if(q->end_quarter == 3) {
 8008bc8:	f1bb 0f03 	cmp.w	fp, #3
 8008bcc:	f000 818f 	beq.w	8008eee <lv_draw_arc+0x6be>
    lv_draw_mask_remove_id(mask_angle_id);
 8008bd0:	ee18 0a90 	vmov	r0, s17
 8008bd4:	f003 fa8c 	bl	800c0f0 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_out_id);
 8008bd8:	ee19 0a90 	vmov	r0, s19
 8008bdc:	f003 fa88 	bl	800c0f0 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_in_id);
 8008be0:	ee19 0a10 	vmov	r0, s18
 8008be4:	f003 fa84 	bl	800c0f0 <lv_draw_mask_remove_id>
    if(dsc->rounded) {
 8008be8:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8008bea:	7a5b      	ldrb	r3, [r3, #9]
 8008bec:	075b      	lsls	r3, r3, #29
 8008bee:	f57f aea2 	bpl.w	8008936 <lv_draw_arc+0x106>
        get_rounded_area(start_angle, radius, width, &round_area);
 8008bf2:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 8008bf6:	ab13      	add	r3, sp, #76	; 0x4c
 8008bf8:	f89d 6010 	ldrb.w	r6, [sp, #16]
 8008bfc:	4648      	mov	r0, r9
 8008bfe:	4629      	mov	r1, r5
 8008c00:	4632      	mov	r2, r6
 8008c02:	f7ff fdc6 	bl	8008792 <get_rounded_area>
        round_area.x1 += center_x;
 8008c06:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
        if(_lv_area_intersect(&clip_area2, clip_area, &round_area)) {
 8008c0a:	aa13      	add	r2, sp, #76	; 0x4c
 8008c0c:	4641      	mov	r1, r8
        round_area.x1 += center_x;
 8008c0e:	4453      	add	r3, sl
        if(_lv_area_intersect(&clip_area2, clip_area, &round_area)) {
 8008c10:	a815      	add	r0, sp, #84	; 0x54
        round_area.x1 += center_x;
 8008c12:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
        round_area.x2 += center_x;
 8008c16:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8008c1a:	4453      	add	r3, sl
 8008c1c:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
        round_area.y1 += center_y;
 8008c20:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 8008c24:	443b      	add	r3, r7
 8008c26:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
        round_area.y2 += center_y;
 8008c2a:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
 8008c2e:	443b      	add	r3, r7
 8008c30:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52
        if(_lv_area_intersect(&clip_area2, clip_area, &round_area)) {
 8008c34:	f00e f92f 	bl	8016e96 <_lv_area_intersect>
 8008c38:	b198      	cbz	r0, 8008c62 <lv_draw_arc+0x432>
            lv_draw_mask_radius_init(&mask_end_param, &round_area, LV_RADIUS_CIRCLE, false);
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8008c40:	a913      	add	r1, sp, #76	; 0x4c
 8008c42:	a825      	add	r0, sp, #148	; 0x94
 8008c44:	f003 fb82 	bl	800c34c <lv_draw_mask_radius_init>
            int16_t mask_end_id = lv_draw_mask_add(&mask_end_param, NULL);
 8008c48:	2100      	movs	r1, #0
 8008c4a:	a825      	add	r0, sp, #148	; 0x94
 8008c4c:	f003 fa18 	bl	800c080 <lv_draw_mask_add>
 8008c50:	4604      	mov	r4, r0
            lv_draw_rect(&area_out, &clip_area2, &cir_dsc);
 8008c52:	aa2c      	add	r2, sp, #176	; 0xb0
 8008c54:	a80f      	add	r0, sp, #60	; 0x3c
 8008c56:	a915      	add	r1, sp, #84	; 0x54
 8008c58:	f003 ff38 	bl	800cacc <lv_draw_rect>
            lv_draw_mask_remove_id(mask_end_id);
 8008c5c:	4620      	mov	r0, r4
 8008c5e:	f003 fa47 	bl	800c0f0 <lv_draw_mask_remove_id>
        get_rounded_area(end_angle, radius, width, &round_area);
 8008c62:	ab13      	add	r3, sp, #76	; 0x4c
 8008c64:	4632      	mov	r2, r6
 8008c66:	4629      	mov	r1, r5
 8008c68:	ee18 0a10 	vmov	r0, s16
 8008c6c:	f7ff fd91 	bl	8008792 <get_rounded_area>
        round_area.x1 += center_x;
 8008c70:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
        if(_lv_area_intersect(&clip_area2, clip_area, &round_area)) {
 8008c74:	aa13      	add	r2, sp, #76	; 0x4c
 8008c76:	4641      	mov	r1, r8
        round_area.x1 += center_x;
 8008c78:	4453      	add	r3, sl
        if(_lv_area_intersect(&clip_area2, clip_area, &round_area)) {
 8008c7a:	a815      	add	r0, sp, #84	; 0x54
        round_area.x1 += center_x;
 8008c7c:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
        round_area.x2 += center_x;
 8008c80:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8008c84:	4453      	add	r3, sl
 8008c86:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
        round_area.y1 += center_y;
 8008c8a:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 8008c8e:	443b      	add	r3, r7
 8008c90:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
        round_area.y2 += center_y;
 8008c94:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
 8008c98:	441f      	add	r7, r3
 8008c9a:	f8ad 7052 	strh.w	r7, [sp, #82]	; 0x52
        if(_lv_area_intersect(&clip_area2, clip_area, &round_area)) {
 8008c9e:	f00e f8fa 	bl	8016e96 <_lv_area_intersect>
 8008ca2:	2800      	cmp	r0, #0
 8008ca4:	f43f ae47 	beq.w	8008936 <lv_draw_arc+0x106>
            lv_draw_mask_radius_init(&mask_end_param, &round_area, LV_RADIUS_CIRCLE, false);
 8008ca8:	2300      	movs	r3, #0
 8008caa:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8008cae:	a913      	add	r1, sp, #76	; 0x4c
 8008cb0:	a825      	add	r0, sp, #148	; 0x94
 8008cb2:	f003 fb4b 	bl	800c34c <lv_draw_mask_radius_init>
            int16_t mask_end_id = lv_draw_mask_add(&mask_end_param, NULL);
 8008cb6:	2100      	movs	r1, #0
 8008cb8:	a825      	add	r0, sp, #148	; 0x94
 8008cba:	f003 f9e1 	bl	800c080 <lv_draw_mask_add>
 8008cbe:	4604      	mov	r4, r0
            lv_draw_rect(&area_out, &clip_area2, &cir_dsc);
 8008cc0:	aa2c      	add	r2, sp, #176	; 0xb0
 8008cc2:	a80f      	add	r0, sp, #60	; 0x3c
 8008cc4:	a915      	add	r1, sp, #84	; 0x54
 8008cc6:	f003 ff01 	bl	800cacc <lv_draw_rect>
            lv_draw_mask_remove_id(mask_end_id);
 8008cca:	4620      	mov	r0, r4
 8008ccc:	f003 fa10 	bl	800c0f0 <lv_draw_mask_remove_id>
 8008cd0:	e631      	b.n	8008936 <lv_draw_arc+0x106>
            quarter_area.x1 = q->center_x;
 8008cd2:	9b06      	ldr	r3, [sp, #24]
            quarter_area.y1 = q->center_y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8008cd4:	4648      	mov	r0, r9
            quarter_area.x1 = q->center_x;
 8008cd6:	f8ad 3094 	strh.w	r3, [sp, #148]	; 0x94
            quarter_area.y2 = q->center_y + q->radius;
 8008cda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008cdc:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
            quarter_area.y1 = q->center_y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8008ce0:	f00e fc4c 	bl	801757c <lv_trigo_sin>
 8008ce4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008ce6:	4343      	muls	r3, r0
 8008ce8:	eb07 30e3 	add.w	r0, r7, r3, asr #15
            quarter_area.x2 = q->center_x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 8008cec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            quarter_area.y1 = q->center_y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8008cee:	f8ad 0096 	strh.w	r0, [sp, #150]	; 0x96
            quarter_area.x2 = q->center_x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	f00e fc42 	bl	801757c <lv_trigo_sin>
 8008cf8:	4370      	muls	r0, r6
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, q->clip_area);
 8008cfa:	a925      	add	r1, sp, #148	; 0x94
 8008cfc:	4642      	mov	r2, r8
            quarter_area.x2 = q->center_x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 8008cfe:	eb0a 30e0 	add.w	r0, sl, r0, asr #15
 8008d02:	f8ad 0098 	strh.w	r0, [sp, #152]	; 0x98
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, q->clip_area);
 8008d06:	4608      	mov	r0, r1
 8008d08:	f00e f8c5 	bl	8016e96 <_lv_area_intersect>
            if(ok) lv_draw_rect(q->draw_area, &quarter_area, q->draw_dsc);
 8008d0c:	b120      	cbz	r0, 8008d18 <lv_draw_arc+0x4e8>
 8008d0e:	aa2c      	add	r2, sp, #176	; 0xb0
 8008d10:	a925      	add	r1, sp, #148	; 0x94
 8008d12:	a80f      	add	r0, sp, #60	; 0x3c
 8008d14:	f003 feda 	bl	800cacc <lv_draw_rect>
        if(q->end_quarter == 0) {
 8008d18:	2c59      	cmp	r4, #89	; 0x59
 8008d1a:	f67f aeaf 	bls.w	8008a7c <lv_draw_arc+0x24c>
    if(q->start_quarter == 1 && q->end_quarter == 1 && q->start_angle < q->end_angle) {
 8008d1e:	9b03      	ldr	r3, [sp, #12]
 8008d20:	2b01      	cmp	r3, #1
 8008d22:	f040 8088 	bne.w	8008e36 <lv_draw_arc+0x606>
 8008d26:	f1bb 0f01 	cmp.w	fp, #1
 8008d2a:	f47f aed1 	bne.w	8008ad0 <lv_draw_arc+0x2a0>
 8008d2e:	42a5      	cmp	r5, r4
 8008d30:	f4bf aece 	bcs.w	8008ad0 <lv_draw_arc+0x2a0>
 8008d34:	9b04      	ldr	r3, [sp, #16]
        quarter_area.y2 = q->center_y + ((lv_trigo_sin(q->start_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 8008d36:	4648      	mov	r0, r9
 8008d38:	1af3      	subs	r3, r6, r3
 8008d3a:	9307      	str	r3, [sp, #28]
 8008d3c:	f00e fc1e 	bl	801757c <lv_trigo_sin>
 8008d40:	4370      	muls	r0, r6
 8008d42:	eb07 30e0 	add.w	r0, r7, r0, asr #15
 8008d46:	f8ad 009a 	strh.w	r0, [sp, #154]	; 0x9a
        quarter_area.x2 = q->center_x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8008d4a:	f105 005a 	add.w	r0, r5, #90	; 0x5a
 8008d4e:	b200      	sxth	r0, r0
 8008d50:	f00e fc14 	bl	801757c <lv_trigo_sin>
 8008d54:	9b07      	ldr	r3, [sp, #28]
 8008d56:	4358      	muls	r0, r3
 8008d58:	eb0a 30e0 	add.w	r0, sl, r0, asr #15
 8008d5c:	f8ad 0098 	strh.w	r0, [sp, #152]	; 0x98
        quarter_area.y1 = q->center_y + ((lv_trigo_sin(q->end_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8008d60:	ee18 0a10 	vmov	r0, s16
 8008d64:	f00e fc0a 	bl	801757c <lv_trigo_sin>
 8008d68:	9b07      	ldr	r3, [sp, #28]
 8008d6a:	4358      	muls	r0, r3
 8008d6c:	eb07 30e0 	add.w	r0, r7, r0, asr #15
 8008d70:	f8ad 0096 	strh.w	r0, [sp, #150]	; 0x96
        quarter_area.x1 = q->center_x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 8008d74:	f104 005a 	add.w	r0, r4, #90	; 0x5a
 8008d78:	b200      	sxth	r0, r0
 8008d7a:	f00e fbff 	bl	801757c <lv_trigo_sin>
 8008d7e:	4370      	muls	r0, r6
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, q->clip_area);
 8008d80:	a925      	add	r1, sp, #148	; 0x94
 8008d82:	4642      	mov	r2, r8
        quarter_area.x1 = q->center_x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 8008d84:	eb0a 30e0 	add.w	r0, sl, r0, asr #15
 8008d88:	f8ad 0094 	strh.w	r0, [sp, #148]	; 0x94
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, q->clip_area);
 8008d8c:	4608      	mov	r0, r1
 8008d8e:	f00e f882 	bl	8016e96 <_lv_area_intersect>
        if(ok) lv_draw_rect(q->draw_area, &quarter_area, q->draw_dsc);
 8008d92:	b120      	cbz	r0, 8008d9e <lv_draw_arc+0x56e>
 8008d94:	aa2c      	add	r2, sp, #176	; 0xb0
 8008d96:	a925      	add	r1, sp, #148	; 0x94
 8008d98:	a80f      	add	r0, sp, #60	; 0x3c
 8008d9a:	f003 fe97 	bl	800cacc <lv_draw_rect>
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 2 && q->end_angle < q->start_angle) ||
 8008d9e:	42a5      	cmp	r5, r4
 8008da0:	f240 812e 	bls.w	8009000 <lv_draw_arc+0x7d0>
        quarter_area.x1 = q->center_x - q->radius;
 8008da4:	9b08      	ldr	r3, [sp, #32]
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, q->clip_area);
 8008da6:	a925      	add	r1, sp, #148	; 0x94
 8008da8:	4642      	mov	r2, r8
        quarter_area.x1 = q->center_x - q->radius;
 8008daa:	f8ad 3094 	strh.w	r3, [sp, #148]	; 0x94
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, q->clip_area);
 8008dae:	4608      	mov	r0, r1
        quarter_area.y1 = q->center_y - q->radius;
 8008db0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008db2:	f8ad 3096 	strh.w	r3, [sp, #150]	; 0x96
        quarter_area.x2 = q->center_x - 1;
 8008db6:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008dba:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
        quarter_area.y2 = q->center_y - 1;
 8008dbe:	1e7b      	subs	r3, r7, #1
 8008dc0:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, q->clip_area);
 8008dc4:	f00e f867 	bl	8016e96 <_lv_area_intersect>
        if(ok) lv_draw_rect(q->draw_area, &quarter_area, q->draw_dsc);
 8008dc8:	2800      	cmp	r0, #0
 8008dca:	f000 8132 	beq.w	8009032 <lv_draw_arc+0x802>
 8008dce:	aa2c      	add	r2, sp, #176	; 0xb0
 8008dd0:	a925      	add	r1, sp, #148	; 0x94
 8008dd2:	a80f      	add	r0, sp, #60	; 0x3c
 8008dd4:	f003 fe7a 	bl	800cacc <lv_draw_rect>
 8008dd8:	e12b      	b.n	8009032 <lv_draw_arc+0x802>
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 0 && q->end_angle < q->start_angle) ||
 8008dda:	9b03      	ldr	r3, [sp, #12]
 8008ddc:	455b      	cmp	r3, fp
 8008dde:	d101      	bne.n	8008de4 <lv_draw_arc+0x5b4>
 8008de0:	42a5      	cmp	r5, r4
 8008de2:	d806      	bhi.n	8008df2 <lv_draw_arc+0x5c2>
 8008de4:	9b03      	ldr	r3, [sp, #12]
 8008de6:	2b02      	cmp	r3, #2
 8008de8:	d11c      	bne.n	8008e24 <lv_draw_arc+0x5f4>
            (q->start_quarter == 2 && q->end_quarter == 1) ||
 8008dea:	f1bb 0f01 	cmp.w	fp, #1
 8008dee:	f040 8096 	bne.w	8008f1e <lv_draw_arc+0x6ee>
        quarter_area.x1 = q->center_x;
 8008df2:	9b06      	ldr	r3, [sp, #24]
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, q->clip_area);
 8008df4:	a925      	add	r1, sp, #148	; 0x94
 8008df6:	4642      	mov	r2, r8
        quarter_area.x1 = q->center_x;
 8008df8:	f8ad 3094 	strh.w	r3, [sp, #148]	; 0x94
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, q->clip_area);
 8008dfc:	4608      	mov	r0, r1
        quarter_area.y1 = q->center_y;
 8008dfe:	9b07      	ldr	r3, [sp, #28]
 8008e00:	f8ad 3096 	strh.w	r3, [sp, #150]	; 0x96
        quarter_area.x2 = q->center_x + q->radius;
 8008e04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e06:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
        quarter_area.y2 = q->center_y + q->radius;
 8008e0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e0c:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, q->clip_area);
 8008e10:	f00e f841 	bl	8016e96 <_lv_area_intersect>
        if(ok) lv_draw_rect(q->draw_area, &quarter_area, q->draw_dsc);
 8008e14:	2800      	cmp	r0, #0
 8008e16:	d082      	beq.n	8008d1e <lv_draw_arc+0x4ee>
 8008e18:	aa2c      	add	r2, sp, #176	; 0xb0
 8008e1a:	a925      	add	r1, sp, #148	; 0x94
 8008e1c:	a80f      	add	r0, sp, #60	; 0x3c
 8008e1e:	f003 fe55 	bl	800cacc <lv_draw_rect>
 8008e22:	e77c      	b.n	8008d1e <lv_draw_arc+0x4ee>
            (q->start_quarter == 2 && q->end_quarter == 1) ||
 8008e24:	9b03      	ldr	r3, [sp, #12]
 8008e26:	2b03      	cmp	r3, #3
 8008e28:	f47f af79 	bne.w	8008d1e <lv_draw_arc+0x4ee>
            (q->start_quarter == 3 && q->end_quarter == 1)) {
 8008e2c:	f10b 33ff 	add.w	r3, fp, #4294967295
 8008e30:	b29b      	uxth	r3, r3
 8008e32:	2b01      	cmp	r3, #1
 8008e34:	d9dd      	bls.n	8008df2 <lv_draw_arc+0x5c2>
    else if(q->start_quarter == 1 || q->end_quarter == 1) {
 8008e36:	f1bb 0f01 	cmp.w	fp, #1
 8008e3a:	d170      	bne.n	8008f1e <lv_draw_arc+0x6ee>
            quarter_area.x2 = q->center_x - 1;
 8008e3c:	f10a 33ff 	add.w	r3, sl, #4294967295
            quarter_area.y1 = q->center_y + ((lv_trigo_sin(q->end_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8008e40:	ee18 0a10 	vmov	r0, s16
            quarter_area.x2 = q->center_x - 1;
 8008e44:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
            quarter_area.y2 = q->center_y + q->radius;
 8008e48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e4a:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
            quarter_area.y1 = q->center_y + ((lv_trigo_sin(q->end_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8008e4e:	f00e fb95 	bl	801757c <lv_trigo_sin>
 8008e52:	9b04      	ldr	r3, [sp, #16]
 8008e54:	1af3      	subs	r3, r6, r3
 8008e56:	4358      	muls	r0, r3
 8008e58:	eb07 30e0 	add.w	r0, r7, r0, asr #15
 8008e5c:	f8ad 0096 	strh.w	r0, [sp, #150]	; 0x96
            quarter_area.x1 = q->center_x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 8008e60:	f104 005a 	add.w	r0, r4, #90	; 0x5a
 8008e64:	b200      	sxth	r0, r0
 8008e66:	f00e fb89 	bl	801757c <lv_trigo_sin>
 8008e6a:	4370      	muls	r0, r6
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, q->clip_area);
 8008e6c:	a925      	add	r1, sp, #148	; 0x94
 8008e6e:	4642      	mov	r2, r8
            quarter_area.x1 = q->center_x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 8008e70:	eb0a 30e0 	add.w	r0, sl, r0, asr #15
 8008e74:	f8ad 0094 	strh.w	r0, [sp, #148]	; 0x94
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, q->clip_area);
 8008e78:	4608      	mov	r0, r1
 8008e7a:	f00e f80c 	bl	8016e96 <_lv_area_intersect>
            if(ok) lv_draw_rect(q->draw_area, &quarter_area, q->draw_dsc);
 8008e7e:	b120      	cbz	r0, 8008e8a <lv_draw_arc+0x65a>
 8008e80:	aa2c      	add	r2, sp, #176	; 0xb0
 8008e82:	a925      	add	r1, sp, #148	; 0x94
 8008e84:	a80f      	add	r0, sp, #60	; 0x3c
 8008e86:	f003 fe21 	bl	800cacc <lv_draw_rect>
    if(q->start_quarter == 2 && q->end_quarter == 2 && q->start_angle < q->end_angle) {
 8008e8a:	9b03      	ldr	r3, [sp, #12]
 8008e8c:	2b02      	cmp	r3, #2
 8008e8e:	f040 80b3 	bne.w	8008ff8 <lv_draw_arc+0x7c8>
            quarter_area.x2 = q->center_x - 1;
 8008e92:	f10a 33ff 	add.w	r3, sl, #4294967295
            quarter_area.x1 = q->center_x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 8008e96:	f105 005a 	add.w	r0, r5, #90	; 0x5a
            quarter_area.x2 = q->center_x - 1;
 8008e9a:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
            quarter_area.x1 = q->center_x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 8008e9e:	b200      	sxth	r0, r0
            quarter_area.y1 = q->center_y - q->radius;
 8008ea0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ea2:	f8ad 3096 	strh.w	r3, [sp, #150]	; 0x96
            quarter_area.x1 = q->center_x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 8008ea6:	f00e fb69 	bl	801757c <lv_trigo_sin>
 8008eaa:	4370      	muls	r0, r6
 8008eac:	eb0a 30e0 	add.w	r0, sl, r0, asr #15
 8008eb0:	f8ad 0094 	strh.w	r0, [sp, #148]	; 0x94
            quarter_area.y2 = q->center_y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8008eb4:	4648      	mov	r0, r9
 8008eb6:	f00e fb61 	bl	801757c <lv_trigo_sin>
 8008eba:	9b04      	ldr	r3, [sp, #16]
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, q->clip_area);
 8008ebc:	a925      	add	r1, sp, #148	; 0x94
 8008ebe:	4642      	mov	r2, r8
            quarter_area.y2 = q->center_y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8008ec0:	1af3      	subs	r3, r6, r3
 8008ec2:	4358      	muls	r0, r3
 8008ec4:	eb07 30e0 	add.w	r0, r7, r0, asr #15
 8008ec8:	f8ad 009a 	strh.w	r0, [sp, #154]	; 0x9a
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, q->clip_area);
 8008ecc:	4608      	mov	r0, r1
 8008ece:	f00d ffe2 	bl	8016e96 <_lv_area_intersect>
            if(ok) lv_draw_rect(q->draw_area, &quarter_area, q->draw_dsc);
 8008ed2:	b120      	cbz	r0, 8008ede <lv_draw_arc+0x6ae>
 8008ed4:	aa2c      	add	r2, sp, #176	; 0xb0
 8008ed6:	a925      	add	r1, sp, #148	; 0x94
 8008ed8:	a80f      	add	r0, sp, #60	; 0x3c
 8008eda:	f003 fdf7 	bl	800cacc <lv_draw_rect>
        if(q->end_quarter == 2) {
 8008ede:	f1bb 0f02 	cmp.w	fp, #2
 8008ee2:	f43f ae22 	beq.w	8008b2a <lv_draw_arc+0x2fa>
    else if(q->start_quarter == 3 || q->end_quarter == 3) {
 8008ee6:	f1bb 0f03 	cmp.w	fp, #3
 8008eea:	f040 8095 	bne.w	8009018 <lv_draw_arc+0x7e8>
            quarter_area.x1 = q->center_x;
 8008eee:	9b06      	ldr	r3, [sp, #24]
            quarter_area.x2 = q->center_x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 8008ef0:	f104 005a 	add.w	r0, r4, #90	; 0x5a
            quarter_area.x1 = q->center_x;
 8008ef4:	f8ad 3094 	strh.w	r3, [sp, #148]	; 0x94
            quarter_area.x2 = q->center_x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 8008ef8:	b200      	sxth	r0, r0
            quarter_area.y1 = q->center_y - q->radius;
 8008efa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008efc:	f8ad 3096 	strh.w	r3, [sp, #150]	; 0x96
            quarter_area.x2 = q->center_x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 8008f00:	f00e fb3c 	bl	801757c <lv_trigo_sin>
 8008f04:	4370      	muls	r0, r6
 8008f06:	eb0a 30e0 	add.w	r0, sl, r0, asr #15
 8008f0a:	f8ad 0098 	strh.w	r0, [sp, #152]	; 0x98
            quarter_area.y2 = q->center_y + ((lv_trigo_sin(q->end_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8008f0e:	ee18 0a10 	vmov	r0, s16
 8008f12:	f00e fb33 	bl	801757c <lv_trigo_sin>
 8008f16:	9b04      	ldr	r3, [sp, #16]
 8008f18:	1af6      	subs	r6, r6, r3
 8008f1a:	4370      	muls	r0, r6
 8008f1c:	e0ba      	b.n	8009094 <lv_draw_arc+0x864>
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 1 && q->end_angle < q->start_angle) ||
 8008f1e:	9b03      	ldr	r3, [sp, #12]
 8008f20:	455b      	cmp	r3, fp
 8008f22:	d047      	beq.n	8008fb4 <lv_draw_arc+0x784>
 8008f24:	2d59      	cmp	r5, #89	; 0x59
 8008f26:	d861      	bhi.n	8008fec <lv_draw_arc+0x7bc>
            (q->start_quarter == 0 && q->end_quarter == 2) ||
 8008f28:	f1ab 0302 	sub.w	r3, fp, #2
 8008f2c:	b29b      	uxth	r3, r3
 8008f2e:	2b01      	cmp	r3, #1
 8008f30:	d942      	bls.n	8008fb8 <lv_draw_arc+0x788>
    if(q->start_quarter == 2 && q->end_quarter == 2 && q->start_angle < q->end_angle) {
 8008f32:	9b03      	ldr	r3, [sp, #12]
 8008f34:	2b02      	cmp	r3, #2
 8008f36:	f47f adf4 	bne.w	8008b22 <lv_draw_arc+0x2f2>
 8008f3a:	f1bb 0f02 	cmp.w	fp, #2
 8008f3e:	d1a8      	bne.n	8008e92 <lv_draw_arc+0x662>
 8008f40:	42a5      	cmp	r5, r4
 8008f42:	d2a6      	bcs.n	8008e92 <lv_draw_arc+0x662>
        quarter_area.x1 = q->center_x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 8008f44:	f105 005a 	add.w	r0, r5, #90	; 0x5a
 8008f48:	9b04      	ldr	r3, [sp, #16]
 8008f4a:	b200      	sxth	r0, r0
 8008f4c:	eba6 0b03 	sub.w	fp, r6, r3
 8008f50:	f00e fb14 	bl	801757c <lv_trigo_sin>
 8008f54:	4370      	muls	r0, r6
 8008f56:	eb0a 30e0 	add.w	r0, sl, r0, asr #15
 8008f5a:	f8ad 0094 	strh.w	r0, [sp, #148]	; 0x94
        quarter_area.y2 = q->center_y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8008f5e:	4648      	mov	r0, r9
 8008f60:	f00e fb0c 	bl	801757c <lv_trigo_sin>
 8008f64:	fb0b f000 	mul.w	r0, fp, r0
 8008f68:	eb07 30e0 	add.w	r0, r7, r0, asr #15
 8008f6c:	f8ad 009a 	strh.w	r0, [sp, #154]	; 0x9a
        quarter_area.y1 = q->center_y + ((lv_trigo_sin(q->end_angle) * q->radius) >> LV_TRIGO_SHIFT);
 8008f70:	ee18 0a10 	vmov	r0, s16
 8008f74:	f00e fb02 	bl	801757c <lv_trigo_sin>
 8008f78:	4370      	muls	r0, r6
 8008f7a:	eb07 36e0 	add.w	r6, r7, r0, asr #15
        quarter_area.x2 = q->center_x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8008f7e:	f104 005a 	add.w	r0, r4, #90	; 0x5a
 8008f82:	b200      	sxth	r0, r0
        quarter_area.y1 = q->center_y + ((lv_trigo_sin(q->end_angle) * q->radius) >> LV_TRIGO_SHIFT);
 8008f84:	f8ad 6096 	strh.w	r6, [sp, #150]	; 0x96
        quarter_area.x2 = q->center_x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8008f88:	f00e faf8 	bl	801757c <lv_trigo_sin>
 8008f8c:	fb0b f000 	mul.w	r0, fp, r0
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, q->clip_area);
 8008f90:	a925      	add	r1, sp, #148	; 0x94
 8008f92:	4642      	mov	r2, r8
        quarter_area.x2 = q->center_x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8008f94:	eb0a 30e0 	add.w	r0, sl, r0, asr #15
 8008f98:	f8ad 0098 	strh.w	r0, [sp, #152]	; 0x98
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, q->clip_area);
 8008f9c:	4608      	mov	r0, r1
 8008f9e:	f00d ff7a 	bl	8016e96 <_lv_area_intersect>
        if(ok) lv_draw_rect(q->draw_area, &quarter_area, q->draw_dsc);
 8008fa2:	b120      	cbz	r0, 8008fae <lv_draw_arc+0x77e>
 8008fa4:	aa2c      	add	r2, sp, #176	; 0xb0
 8008fa6:	a925      	add	r1, sp, #148	; 0x94
 8008fa8:	a80f      	add	r0, sp, #60	; 0x3c
 8008faa:	f003 fd8f 	bl	800cacc <lv_draw_rect>
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 3 && q->end_angle < q->start_angle) ||
 8008fae:	42a5      	cmp	r5, r4
 8008fb0:	d938      	bls.n	8009024 <lv_draw_arc+0x7f4>
 8008fb2:	e083      	b.n	80090bc <lv_draw_arc+0x88c>
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 1 && q->end_angle < q->start_angle) ||
 8008fb4:	42a5      	cmp	r5, r4
 8008fb6:	d9b5      	bls.n	8008f24 <lv_draw_arc+0x6f4>
        quarter_area.x1 = q->center_x - q->radius;
 8008fb8:	9b08      	ldr	r3, [sp, #32]
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, q->clip_area);
 8008fba:	a925      	add	r1, sp, #148	; 0x94
 8008fbc:	4642      	mov	r2, r8
        quarter_area.x1 = q->center_x - q->radius;
 8008fbe:	f8ad 3094 	strh.w	r3, [sp, #148]	; 0x94
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, q->clip_area);
 8008fc2:	4608      	mov	r0, r1
        quarter_area.y1 = q->center_y;
 8008fc4:	9b07      	ldr	r3, [sp, #28]
 8008fc6:	f8ad 3096 	strh.w	r3, [sp, #150]	; 0x96
        quarter_area.x2 = q->center_x - 1;
 8008fca:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008fce:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
        quarter_area.y2 = q->center_y + q->radius;
 8008fd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008fd4:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, q->clip_area);
 8008fd8:	f00d ff5d 	bl	8016e96 <_lv_area_intersect>
        if(ok) lv_draw_rect(q->draw_area, &quarter_area, q->draw_dsc);
 8008fdc:	2800      	cmp	r0, #0
 8008fde:	d0a8      	beq.n	8008f32 <lv_draw_arc+0x702>
 8008fe0:	aa2c      	add	r2, sp, #176	; 0xb0
 8008fe2:	a925      	add	r1, sp, #148	; 0x94
 8008fe4:	a80f      	add	r0, sp, #60	; 0x3c
 8008fe6:	f003 fd71 	bl	800cacc <lv_draw_rect>
 8008fea:	e7a2      	b.n	8008f32 <lv_draw_arc+0x702>
            (q->start_quarter == 0 && q->end_quarter == 3) ||
 8008fec:	9b03      	ldr	r3, [sp, #12]
 8008fee:	2b03      	cmp	r3, #3
 8008ff0:	d19f      	bne.n	8008f32 <lv_draw_arc+0x702>
            (q->start_quarter == 3 && q->end_quarter == 2)) {
 8008ff2:	f1bb 0f02 	cmp.w	fp, #2
 8008ff6:	d0df      	beq.n	8008fb8 <lv_draw_arc+0x788>
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 2 && q->end_angle < q->start_angle) ||
 8008ff8:	9b03      	ldr	r3, [sp, #12]
 8008ffa:	455b      	cmp	r3, fp
 8008ffc:	f43f aecf 	beq.w	8008d9e <lv_draw_arc+0x56e>
 8009000:	2d59      	cmp	r5, #89	; 0x59
 8009002:	d912      	bls.n	800902a <lv_draw_arc+0x7fa>
            (q->start_quarter == 0 && q->end_quarter == 3) ||
 8009004:	9b03      	ldr	r3, [sp, #12]
 8009006:	2b01      	cmp	r3, #1
 8009008:	d113      	bne.n	8009032 <lv_draw_arc+0x802>
            (q->start_quarter == 1 && q->end_quarter == 3) ||
 800900a:	f1bb 0f03 	cmp.w	fp, #3
 800900e:	f43f aec9 	beq.w	8008da4 <lv_draw_arc+0x574>
            (q->start_quarter == 1 && q->end_quarter == 0)) {
 8009012:	2c59      	cmp	r4, #89	; 0x59
 8009014:	f67f aec6 	bls.w	8008da4 <lv_draw_arc+0x574>
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 3 && q->end_angle < q->start_angle) ||
 8009018:	9b03      	ldr	r3, [sp, #12]
 800901a:	455b      	cmp	r3, fp
 800901c:	d04c      	beq.n	80090b8 <lv_draw_arc+0x888>
 800901e:	9b03      	ldr	r3, [sp, #12]
 8009020:	2b02      	cmp	r3, #2
 8009022:	d15b      	bne.n	80090dc <lv_draw_arc+0x8ac>
            (q->start_quarter == 2 && q->end_quarter == 0) ||
 8009024:	2cb3      	cmp	r4, #179	; 0xb3
            (q->start_quarter == 1 && q->end_quarter == 0) ||
 8009026:	d949      	bls.n	80090bc <lv_draw_arc+0x88c>
 8009028:	e5d2      	b.n	8008bd0 <lv_draw_arc+0x3a0>
            (q->start_quarter == 0 && q->end_quarter == 3) ||
 800902a:	f1bb 0f03 	cmp.w	fp, #3
 800902e:	f43f aeb9 	beq.w	8008da4 <lv_draw_arc+0x574>
    if(q->start_quarter == 3 && q->end_quarter == 3 && q->start_angle < q->end_angle) {
 8009032:	9b03      	ldr	r3, [sp, #12]
 8009034:	2b03      	cmp	r3, #3
 8009036:	f47f af56 	bne.w	8008ee6 <lv_draw_arc+0x6b6>
 800903a:	f1bb 0f03 	cmp.w	fp, #3
 800903e:	f47f ad9e 	bne.w	8008b7e <lv_draw_arc+0x34e>
 8009042:	42a5      	cmp	r5, r4
 8009044:	f4bf ad9b 	bcs.w	8008b7e <lv_draw_arc+0x34e>
 8009048:	9b04      	ldr	r3, [sp, #16]
        quarter_area.x1 = q->center_x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 800904a:	f105 005a 	add.w	r0, r5, #90	; 0x5a
 800904e:	eba6 0b03 	sub.w	fp, r6, r3
 8009052:	b200      	sxth	r0, r0
 8009054:	f00e fa92 	bl	801757c <lv_trigo_sin>
 8009058:	fb0b f000 	mul.w	r0, fp, r0
 800905c:	eb0a 30e0 	add.w	r0, sl, r0, asr #15
 8009060:	f8ad 0094 	strh.w	r0, [sp, #148]	; 0x94
        quarter_area.y1 = q->center_y + ((lv_trigo_sin(q->start_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 8009064:	4648      	mov	r0, r9
 8009066:	f00e fa89 	bl	801757c <lv_trigo_sin>
 800906a:	4370      	muls	r0, r6
 800906c:	eb07 30e0 	add.w	r0, r7, r0, asr #15
 8009070:	f8ad 0096 	strh.w	r0, [sp, #150]	; 0x96
        quarter_area.x2 = q->center_x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 8009074:	f104 005a 	add.w	r0, r4, #90	; 0x5a
 8009078:	b200      	sxth	r0, r0
 800907a:	f00e fa7f 	bl	801757c <lv_trigo_sin>
 800907e:	4370      	muls	r0, r6
 8009080:	eb0a 36e0 	add.w	r6, sl, r0, asr #15
        quarter_area.y2 = q->center_y + ((lv_trigo_sin(q->end_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8009084:	ee18 0a10 	vmov	r0, s16
        quarter_area.x2 = q->center_x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 8009088:	f8ad 6098 	strh.w	r6, [sp, #152]	; 0x98
        quarter_area.y2 = q->center_y + ((lv_trigo_sin(q->end_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 800908c:	f00e fa76 	bl	801757c <lv_trigo_sin>
 8009090:	fb0b f000 	mul.w	r0, fp, r0
 8009094:	eb07 30e0 	add.w	r0, r7, r0, asr #15
 8009098:	f8ad 009a 	strh.w	r0, [sp, #154]	; 0x9a
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, q->clip_area);
 800909c:	a925      	add	r1, sp, #148	; 0x94
 800909e:	4642      	mov	r2, r8
 80090a0:	4608      	mov	r0, r1
 80090a2:	f00d fef8 	bl	8016e96 <_lv_area_intersect>
        if(ok) lv_draw_rect(q->draw_area, &quarter_area, q->draw_dsc);
 80090a6:	2800      	cmp	r0, #0
 80090a8:	f43f ad92 	beq.w	8008bd0 <lv_draw_arc+0x3a0>
 80090ac:	aa2c      	add	r2, sp, #176	; 0xb0
 80090ae:	a925      	add	r1, sp, #148	; 0x94
        lv_draw_rect(&area_out, clip_area, &cir_dsc);
 80090b0:	a80f      	add	r0, sp, #60	; 0x3c
 80090b2:	f003 fd0b 	bl	800cacc <lv_draw_rect>
 80090b6:	e58b      	b.n	8008bd0 <lv_draw_arc+0x3a0>
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 3 && q->end_angle < q->start_angle) ||
 80090b8:	42a5      	cmp	r5, r4
 80090ba:	d9b0      	bls.n	800901e <lv_draw_arc+0x7ee>
        quarter_area.x1 = q->center_x;
 80090bc:	9b06      	ldr	r3, [sp, #24]
 80090be:	f8ad 3094 	strh.w	r3, [sp, #148]	; 0x94
        quarter_area.y1 = q->center_y - q->radius;
 80090c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090c4:	f8ad 3096 	strh.w	r3, [sp, #150]	; 0x96
        quarter_area.x2 = q->center_x + q->radius;
 80090c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090ca:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
        quarter_area.y2 = q->center_y - 1;
 80090ce:	1e7b      	subs	r3, r7, #1
 80090d0:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, q->clip_area);
 80090d4:	e7e2      	b.n	800909c <lv_draw_arc+0x86c>
        lv_draw_rect(&area_out, clip_area, &cir_dsc);
 80090d6:	aa2c      	add	r2, sp, #176	; 0xb0
 80090d8:	4641      	mov	r1, r8
 80090da:	e7e9      	b.n	80090b0 <lv_draw_arc+0x880>
            (q->start_quarter == 2 && q->end_quarter == 0) ||
 80090dc:	9b03      	ldr	r3, [sp, #12]
 80090de:	2b01      	cmp	r3, #1
 80090e0:	f47f ad76 	bne.w	8008bd0 <lv_draw_arc+0x3a0>
            (q->start_quarter == 1 && q->end_quarter == 0) ||
 80090e4:	2c59      	cmp	r4, #89	; 0x59
 80090e6:	e79e      	b.n	8009026 <lv_draw_arc+0x7f6>

080090e8 <lv_color_mix>:
 * @param c2 the second color to mix (usually the background)
 * @param mix The ratio of the colors. 0: full `c2`, 255: full `c1`, 127: half `c1` and half`c2`
 * @return the mixed color
 */
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
 80090e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 80090ea:	f1c2 05ff 	rsb	r5, r2, #255	; 0xff
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 80090ee:	f3c1 1445 	ubfx	r4, r1, #5, #6
 80090f2:	f3c0 1345 	ubfx	r3, r0, #5, #6
 80090f6:	f248 0681 	movw	r6, #32897	; 0x8081
 80090fa:	436c      	muls	r4, r5
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 80090fc:	f001 071f 	and.w	r7, r1, #31
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8009100:	f3c1 21c4 	ubfx	r1, r1, #11, #5
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8009104:	fb03 4302 	mla	r3, r3, r2, r4
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8009108:	436f      	muls	r7, r5
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800910a:	3380      	adds	r3, #128	; 0x80
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800910c:	434d      	muls	r5, r1
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800910e:	4373      	muls	r3, r6
#else
    /*LV_COLOR_DEPTH == 1*/
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
#endif

    return ret;
 8009110:	f3c3 54c5 	ubfx	r4, r3, #23, #6
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8009114:	f000 031f 	and.w	r3, r0, #31
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8009118:	f3c0 20c4 	ubfx	r0, r0, #11, #5
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800911c:	fb03 7302 	mla	r3, r3, r2, r7
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8009120:	fb00 5202 	mla	r2, r0, r2, r5
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8009124:	3380      	adds	r3, #128	; 0x80
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8009126:	3280      	adds	r2, #128	; 0x80
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8009128:	4373      	muls	r3, r6
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800912a:	4372      	muls	r2, r6
    return ret;
 800912c:	f3c3 53c4 	ubfx	r3, r3, #23, #5
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8009130:	0dd0      	lsrs	r0, r2, #23
    return ret;
 8009132:	ea43 1344 	orr.w	r3, r3, r4, lsl #5
}
 8009136:	ea43 20c0 	orr.w	r0, r3, r0, lsl #11
 800913a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800913c <color_blend_true_color_additive>:
        }
    }
}

static inline lv_color_t color_blend_true_color_additive(lv_color_t fg, lv_color_t bg, lv_opa_t opa)
{
 800913c:	460b      	mov	r3, r1

    if(opa <= LV_OPA_MIN) return bg;
 800913e:	2a02      	cmp	r2, #2
{
 8009140:	b4f0      	push	{r4, r5, r6, r7}
 8009142:	f003 071f 	and.w	r7, r3, #31
 8009146:	f3c3 1545 	ubfx	r5, r3, #5, #6
 800914a:	f3c3 24c4 	ubfx	r4, r3, #11, #5
    if(opa <= LV_OPA_MIN) return bg;
 800914e:	d802      	bhi.n	8009156 <color_blend_true_color_additive+0x1a>
 8009150:	4608      	mov	r0, r1
#endif

    if(opa == LV_OPA_COVER) return fg;

    return lv_color_mix(fg, bg, opa);
}
 8009152:	bcf0      	pop	{r4, r5, r6, r7}
 8009154:	4770      	bx	lr
    tmp = bg.ch.red + fg.ch.red;
 8009156:	f3c0 23c4 	ubfx	r3, r0, #11, #5
 800915a:	4423      	add	r3, r4
    tmp = bg.ch.green + fg.ch.green;
 800915c:	f3c0 1445 	ubfx	r4, r0, #5, #6
    fg.ch.red = LV_MIN(tmp, 31);
 8009160:	2b1f      	cmp	r3, #31
    tmp = bg.ch.green + fg.ch.green;
 8009162:	442c      	add	r4, r5
    tmp = bg.ch.blue + fg.ch.blue;
 8009164:	f000 051f 	and.w	r5, r0, #31
    fg.ch.red = LV_MIN(tmp, 31);
 8009168:	bf28      	it	cs
 800916a:	231f      	movcs	r3, #31
    fg.ch.green = LV_MIN(tmp, 63);
 800916c:	2c3f      	cmp	r4, #63	; 0x3f
    tmp = bg.ch.blue + fg.ch.blue;
 800916e:	443d      	add	r5, r7
    fg.ch.green = LV_MIN(tmp, 63);
 8009170:	bf28      	it	cs
 8009172:	243f      	movcs	r4, #63	; 0x3f
    fg.ch.red = LV_MIN(tmp, 31);
 8009174:	f003 031f 	and.w	r3, r3, #31
    fg.ch.blue = LV_MIN(tmp, 31);
 8009178:	2d1f      	cmp	r5, #31
    fg.ch.green = LV_MIN(tmp, 63);
 800917a:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    fg.ch.blue = LV_MIN(tmp, 31);
 800917e:	bf28      	it	cs
 8009180:	251f      	movcs	r5, #31
    if(opa == LV_OPA_COVER) return fg;
 8009182:	2aff      	cmp	r2, #255	; 0xff
    fg.ch.blue = LV_MIN(tmp, 31);
 8009184:	f005 051f 	and.w	r5, r5, #31
    if(opa == LV_OPA_COVER) return fg;
 8009188:	d108      	bne.n	800919c <color_blend_true_color_additive+0x60>
 800918a:	f04f 0000 	mov.w	r0, #0
 800918e:	f365 0004 	bfi	r0, r5, #0, #5
 8009192:	f364 104a 	bfi	r0, r4, #5, #6
 8009196:	f363 20cf 	bfi	r0, r3, #11, #5
 800919a:	e7da      	b.n	8009152 <color_blend_true_color_additive+0x16>
    return lv_color_mix(fg, bg, opa);
 800919c:	f365 0004 	bfi	r0, r5, #0, #5
 80091a0:	f364 104a 	bfi	r0, r4, #5, #6
}
 80091a4:	bcf0      	pop	{r4, r5, r6, r7}
    return lv_color_mix(fg, bg, opa);
 80091a6:	f363 20cf 	bfi	r0, r3, #11, #5
 80091aa:	f7ff bf9d 	b.w	80090e8 <lv_color_mix>

080091ae <color_blend_true_color_subtractive>:

static inline lv_color_t color_blend_true_color_subtractive(lv_color_t fg, lv_color_t bg, lv_opa_t opa)
{
 80091ae:	460b      	mov	r3, r1

    if(opa <= LV_OPA_MIN) return bg;
 80091b0:	2a02      	cmp	r2, #2
{
 80091b2:	b4f0      	push	{r4, r5, r6, r7}
 80091b4:	f003 061f 	and.w	r6, r3, #31
 80091b8:	f3c3 1545 	ubfx	r5, r3, #5, #6
 80091bc:	f3c3 24c4 	ubfx	r4, r3, #11, #5
    if(opa <= LV_OPA_MIN) return bg;
 80091c0:	d802      	bhi.n	80091c8 <color_blend_true_color_subtractive+0x1a>
 80091c2:	4608      	mov	r0, r1
    fg.ch.blue = LV_MAX(tmp, 0);

    if(opa == LV_OPA_COVER) return fg;

    return lv_color_mix(fg, bg, opa);
}
 80091c4:	bcf0      	pop	{r4, r5, r6, r7}
 80091c6:	4770      	bx	lr
    tmp = bg.ch.red - fg.ch.red;
 80091c8:	f3c0 23c4 	ubfx	r3, r0, #11, #5
    if(opa == LV_OPA_COVER) return fg;
 80091cc:	2aff      	cmp	r2, #255	; 0xff
    tmp = bg.ch.red - fg.ch.red;
 80091ce:	eba4 0303 	sub.w	r3, r4, r3
    tmp = bg.ch.green - fg.ch.green;
 80091d2:	f3c0 1445 	ubfx	r4, r0, #5, #6
 80091d6:	eba5 0404 	sub.w	r4, r5, r4
    tmp = bg.ch.blue - fg.ch.blue;
 80091da:	f000 051f 	and.w	r5, r0, #31
    fg.ch.red = LV_MAX(tmp, 0);
 80091de:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    tmp = bg.ch.blue - fg.ch.blue;
 80091e2:	eba6 0505 	sub.w	r5, r6, r5
    fg.ch.green = LV_MAX(tmp, 0);
 80091e6:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
    fg.ch.red = LV_MAX(tmp, 0);
 80091ea:	f003 031f 	and.w	r3, r3, #31
    fg.ch.blue = LV_MAX(tmp, 0);
 80091ee:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
    fg.ch.green = LV_MAX(tmp, 0);
 80091f2:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    fg.ch.blue = LV_MAX(tmp, 0);
 80091f6:	f005 051f 	and.w	r5, r5, #31
    if(opa == LV_OPA_COVER) return fg;
 80091fa:	d108      	bne.n	800920e <color_blend_true_color_subtractive+0x60>
 80091fc:	f04f 0000 	mov.w	r0, #0
 8009200:	f365 0004 	bfi	r0, r5, #0, #5
 8009204:	f364 104a 	bfi	r0, r4, #5, #6
 8009208:	f363 20cf 	bfi	r0, r3, #11, #5
 800920c:	e7da      	b.n	80091c4 <color_blend_true_color_subtractive+0x16>
    return lv_color_mix(fg, bg, opa);
 800920e:	f365 0004 	bfi	r0, r5, #0, #5
 8009212:	f364 104a 	bfi	r0, r4, #5, #6
}
 8009216:	bcf0      	pop	{r4, r5, r6, r7}
    return lv_color_mix(fg, bg, opa);
 8009218:	f363 20cf 	bfi	r0, r3, #11, #5
 800921c:	f7ff bf64 	b.w	80090e8 <lv_color_mix>

08009220 <_lv_blend_fill>:
{
 8009220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009224:	b08d      	sub	sp, #52	; 0x34
 8009226:	4699      	mov	r9, r3
 8009228:	4607      	mov	r7, r0
 800922a:	4688      	mov	r8, r1
 800922c:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8009230:	4614      	mov	r4, r2
 8009232:	f89d b060 	ldrb.w	fp, [sp, #96]	; 0x60
 8009236:	9307      	str	r3, [sp, #28]
 8009238:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
    if(opa < LV_OPA_MIN) return;
 800923c:	2b01      	cmp	r3, #1
{
 800923e:	9305      	str	r3, [sp, #20]
    if(opa < LV_OPA_MIN) return;
 8009240:	f240 80a7 	bls.w	8009392 <_lv_blend_fill+0x172>
    if(mask_res == LV_DRAW_MASK_RES_TRANSP) return;
 8009244:	9b07      	ldr	r3, [sp, #28]
 8009246:	2b00      	cmp	r3, #0
 8009248:	f000 80a3 	beq.w	8009392 <_lv_blend_fill+0x172>
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 800924c:	f7ff f894 	bl	8008378 <_lv_refr_get_disp_refreshing>
 8009250:	4605      	mov	r5, r0
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp);
 8009252:	f00d fb6d 	bl	8016930 <lv_disp_get_draw_buf>
 8009256:	4606      	mov	r6, r0
    lv_color_t * disp_buf = draw_buf->buf_act;
 8009258:	f8d0 a008 	ldr.w	sl, [r0, #8]
    if(disp->driver->gpu_wait_cb) disp->driver->gpu_wait_cb(disp->driver);
 800925c:	6828      	ldr	r0, [r5, #0]
 800925e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009260:	b103      	cbz	r3, 8009264 <_lv_blend_fill+0x44>
 8009262:	4798      	blx	r3
    is_common = _lv_area_intersect(&draw_area, clip_area, fill_area);
 8009264:	4642      	mov	r2, r8
 8009266:	4639      	mov	r1, r7
 8009268:	a80a      	add	r0, sp, #40	; 0x28
 800926a:	f00d fe14 	bl	8016e96 <_lv_area_intersect>
    if(!is_common) return;
 800926e:	2800      	cmp	r0, #0
 8009270:	f000 808f 	beq.w	8009392 <_lv_blend_fill+0x172>
    draw_area.x1 -= disp_area->x1;
 8009274:	f8bd 0028 	ldrh.w	r0, [sp, #40]	; 0x28
 8009278:	8a31      	ldrh	r1, [r6, #16]
    draw_area.x2 -= disp_area->x1;
 800927a:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
    draw_area.x1 -= disp_area->x1;
 800927e:	1a43      	subs	r3, r0, r1
    draw_area.y1 -= disp_area->y1;
 8009280:	f8b6 c012 	ldrh.w	ip, [r6, #18]
 8009284:	f8bd 702a 	ldrh.w	r7, [sp, #42]	; 0x2a
    draw_area.x2 -= disp_area->x1;
 8009288:	1a51      	subs	r1, r2, r1
    draw_area.x1 -= disp_area->x1;
 800928a:	b21b      	sxth	r3, r3
    draw_area.y1 -= disp_area->y1;
 800928c:	eba7 070c 	sub.w	r7, r7, ip
    draw_area.x2 -= disp_area->x1;
 8009290:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
    draw_area.y2 -= disp_area->y1;
 8009294:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
    draw_area.y1 -= disp_area->y1;
 8009298:	b23f      	sxth	r7, r7
    draw_area.x1 -= disp_area->x1;
 800929a:	9306      	str	r3, [sp, #24]
    draw_area.y2 -= disp_area->y1;
 800929c:	eba1 0c0c 	sub.w	ip, r1, ip
    draw_area.x1 -= disp_area->x1;
 80092a0:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
    draw_area.y1 -= disp_area->y1;
 80092a4:	f8ad 702a 	strh.w	r7, [sp, #42]	; 0x2a
    draw_area.y2 -= disp_area->y1;
 80092a8:	f8ad c02e 	strh.w	ip, [sp, #46]	; 0x2e
    if(mask && disp->driver->antialiasing == 0 && mask) {
 80092ac:	f1b9 0f00 	cmp.w	r9, #0
 80092b0:	d140      	bne.n	8009334 <_lv_blend_fill+0x114>
    if(disp->driver->set_px_cb) {
 80092b2:	6829      	ldr	r1, [r5, #0]
 80092b4:	6949      	ldr	r1, [r1, #20]
 80092b6:	2900      	cmp	r1, #0
 80092b8:	d15a      	bne.n	8009370 <_lv_blend_fill+0x150>
    else if(mode == LV_BLEND_MODE_NORMAL) {
 80092ba:	f1bb 0f00 	cmp.w	fp, #0
 80092be:	f040 81e5 	bne.w	800968c <_lv_blend_fill+0x46c>
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 80092c2:	f7ff f859 	bl	8008378 <_lv_refr_get_disp_refreshing>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80092c6:	8ab3      	ldrh	r3, [r6, #20]
 80092c8:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 80092cc:	4680      	mov	r8, r0
 80092ce:	3301      	adds	r3, #1
 80092d0:	8a36      	ldrh	r6, [r6, #16]
 80092d2:	3201      	adds	r2, #1
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80092d4:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	; 0x2a
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80092d8:	1b9e      	subs	r6, r3, r6
 80092da:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 80092de:	1ad2      	subs	r2, r2, r3
 80092e0:	b236      	sxth	r6, r6
 80092e2:	b212      	sxth	r2, r2
    lv_color_t * disp_buf_first = disp_buf + disp_w * draw_area->y1 + draw_area->x1;
 80092e4:	fb06 3307 	mla	r3, r6, r7, r3
 80092e8:	9206      	str	r2, [sp, #24]
 80092ea:	eb0a 0543 	add.w	r5, sl, r3, lsl #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80092ee:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 80092f2:	3201      	adds	r2, #1
 80092f4:	1bd2      	subs	r2, r2, r7
    int32_t draw_area_h = lv_area_get_height(draw_area);
 80092f6:	b212      	sxth	r2, r2
 80092f8:	9208      	str	r2, [sp, #32]
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
 80092fa:	9a07      	ldr	r2, [sp, #28]
 80092fc:	2a01      	cmp	r2, #1
 80092fe:	f040 8109 	bne.w	8009514 <_lv_blend_fill+0x2f4>
        if(opa > LV_OPA_MAX) {
 8009302:	9b05      	ldr	r3, [sp, #20]
 8009304:	2bfd      	cmp	r3, #253	; 0xfd
 8009306:	f240 80a0 	bls.w	800944a <_lv_blend_fill+0x22a>
            if(disp->driver->gpu_fill_cb && lv_area_get_size(draw_area) > GPU_SIZE_LIMIT) {
 800930a:	6803      	ldr	r3, [r0, #0]
 800930c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800930e:	2b00      	cmp	r3, #0
 8009310:	f000 8098 	beq.w	8009444 <_lv_blend_fill+0x224>
 8009314:	a80a      	add	r0, sp, #40	; 0x28
 8009316:	f00d fd90 	bl	8016e3a <lv_area_get_size>
 800931a:	28f0      	cmp	r0, #240	; 0xf0
 800931c:	f240 8092 	bls.w	8009444 <_lv_blend_fill+0x224>
                disp->driver->gpu_fill_cb(disp->driver, disp_buf, disp_w, draw_area, color);
 8009320:	f8d8 0000 	ldr.w	r0, [r8]
 8009324:	ab0a      	add	r3, sp, #40	; 0x28
 8009326:	f8ad 4000 	strh.w	r4, [sp]
 800932a:	4632      	mov	r2, r6
 800932c:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800932e:	4651      	mov	r1, sl
 8009330:	47a0      	blx	r4
                return;
 8009332:	e02e      	b.n	8009392 <_lv_blend_fill+0x172>
    if(mask && disp->driver->antialiasing == 0 && mask) {
 8009334:	6829      	ldr	r1, [r5, #0]
 8009336:	7a09      	ldrb	r1, [r1, #8]
 8009338:	0749      	lsls	r1, r1, #29
 800933a:	d4ba      	bmi.n	80092b2 <_lv_blend_fill+0x92>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800933c:	f102 0801 	add.w	r8, r2, #1
 8009340:	f109 31ff 	add.w	r1, r9, #4294967295
        for(i = 0; i < mask_w; i++)  mask[i] = mask[i] > 128 ? LV_OPA_COVER : LV_OPA_TRANSP;
 8009344:	f1c9 0e01 	rsb	lr, r9, #1
 8009348:	eba8 0800 	sub.w	r8, r8, r0
        int32_t mask_w = lv_area_get_width(&draw_area);
 800934c:	fa0f f888 	sxth.w	r8, r8
        for(i = 0; i < mask_w; i++)  mask[i] = mask[i] > 128 ? LV_OPA_COVER : LV_OPA_TRANSP;
 8009350:	eb0e 0c01 	add.w	ip, lr, r1
 8009354:	45e0      	cmp	r8, ip
 8009356:	ddac      	ble.n	80092b2 <_lv_blend_fill+0x92>
 8009358:	f811 cf01 	ldrb.w	ip, [r1, #1]!
 800935c:	f1bc 0f80 	cmp.w	ip, #128	; 0x80
 8009360:	f04f 3cff 	mov.w	ip, #4294967295
 8009364:	bf98      	it	ls
 8009366:	f04f 0c00 	movls.w	ip, #0
 800936a:	f881 c000 	strb.w	ip, [r1]
 800936e:	e7ef      	b.n	8009350 <_lv_blend_fill+0x130>
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 8009370:	f7ff f802 	bl	8008378 <_lv_refr_get_disp_refreshing>
 8009374:	8ab2      	ldrh	r2, [r6, #20]
 8009376:	8a33      	ldrh	r3, [r6, #16]
 8009378:	3201      	adds	r2, #1
 800937a:	f9bd 502a 	ldrsh.w	r5, [sp, #42]	; 0x2a
 800937e:	9006      	str	r0, [sp, #24]
 8009380:	1ad2      	subs	r2, r2, r3
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
 8009382:	9b07      	ldr	r3, [sp, #28]
 8009384:	2b01      	cmp	r3, #1
 8009386:	b212      	sxth	r2, r2
 8009388:	d121      	bne.n	80093ce <_lv_blend_fill+0x1ae>
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800938a:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 800938e:	429d      	cmp	r5, r3
 8009390:	dd02      	ble.n	8009398 <_lv_blend_fill+0x178>
}
 8009392:	b00d      	add	sp, #52	; 0x34
 8009394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 8009398:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
                disp->driver->set_px_cb(disp->driver, (void *)disp_buf, disp_w, x, y, color, opa);
 800939c:	fa0f f885 	sxth.w	r8, r5
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 80093a0:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 80093a4:	429e      	cmp	r6, r3
 80093a6:	dd01      	ble.n	80093ac <_lv_blend_fill+0x18c>
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 80093a8:	3501      	adds	r5, #1
 80093aa:	e7ee      	b.n	800938a <_lv_blend_fill+0x16a>
                disp->driver->set_px_cb(disp->driver, (void *)disp_buf, disp_w, x, y, color, opa);
 80093ac:	9b06      	ldr	r3, [sp, #24]
 80093ae:	4651      	mov	r1, sl
 80093b0:	9207      	str	r2, [sp, #28]
 80093b2:	6818      	ldr	r0, [r3, #0]
 80093b4:	9b05      	ldr	r3, [sp, #20]
 80093b6:	f8ad 4004 	strh.w	r4, [sp, #4]
 80093ba:	9302      	str	r3, [sp, #8]
 80093bc:	b233      	sxth	r3, r6
 80093be:	f8cd 8000 	str.w	r8, [sp]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 80093c2:	3601      	adds	r6, #1
                disp->driver->set_px_cb(disp->driver, (void *)disp_buf, disp_w, x, y, color, opa);
 80093c4:	f8d0 9014 	ldr.w	r9, [r0, #20]
 80093c8:	47c8      	blx	r9
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 80093ca:	9a07      	ldr	r2, [sp, #28]
 80093cc:	e7e8      	b.n	80093a0 <_lv_blend_fill+0x180>
 80093ce:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
 80093d2:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 80093d6:	3301      	adds	r3, #1
 80093d8:	eba9 0901 	sub.w	r9, r9, r1
 80093dc:	1a5b      	subs	r3, r3, r1
 80093de:	fa0f f883 	sxth.w	r8, r3
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 80093e2:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 80093e6:	429d      	cmp	r5, r3
 80093e8:	dcd3      	bgt.n	8009392 <_lv_blend_fill+0x172>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 80093ea:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
                    disp->driver->set_px_cb(disp->driver, (void *)disp_buf, disp_w, x, y, color,
 80093ee:	fa0f fb85 	sxth.w	fp, r5
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 80093f2:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 80093f6:	429e      	cmp	r6, r3
 80093f8:	dd02      	ble.n	8009400 <_lv_blend_fill+0x1e0>
            mask_tmp += draw_area_w;
 80093fa:	44c1      	add	r9, r8
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 80093fc:	3501      	adds	r5, #1
 80093fe:	e7f0      	b.n	80093e2 <_lv_blend_fill+0x1c2>
                if(mask_tmp[x]) {
 8009400:	f819 3006 	ldrb.w	r3, [r9, r6]
 8009404:	b18b      	cbz	r3, 800942a <_lv_blend_fill+0x20a>
                    disp->driver->set_px_cb(disp->driver, (void *)disp_buf, disp_w, x, y, color,
 8009406:	9906      	ldr	r1, [sp, #24]
 8009408:	9207      	str	r2, [sp, #28]
 800940a:	6808      	ldr	r0, [r1, #0]
                                           (uint32_t)((uint32_t)opa * mask_tmp[x]) >> 8);
 800940c:	9905      	ldr	r1, [sp, #20]
                    disp->driver->set_px_cb(disp->driver, (void *)disp_buf, disp_w, x, y, color,
 800940e:	f8ad 4004 	strh.w	r4, [sp, #4]
                                           (uint32_t)((uint32_t)opa * mask_tmp[x]) >> 8);
 8009412:	fb11 f303 	smulbb	r3, r1, r3
                    disp->driver->set_px_cb(disp->driver, (void *)disp_buf, disp_w, x, y, color,
 8009416:	f8cd b000 	str.w	fp, [sp]
 800941a:	4651      	mov	r1, sl
 800941c:	0a1b      	lsrs	r3, r3, #8
 800941e:	9302      	str	r3, [sp, #8]
 8009420:	6943      	ldr	r3, [r0, #20]
 8009422:	461f      	mov	r7, r3
 8009424:	b233      	sxth	r3, r6
 8009426:	47b8      	blx	r7
 8009428:	9a07      	ldr	r2, [sp, #28]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 800942a:	3601      	adds	r6, #1
 800942c:	e7e1      	b.n	80093f2 <_lv_blend_fill+0x1d2>
                lv_color_fill(disp_buf_first, color, draw_area_w);
 800942e:	4628      	mov	r0, r5
            for(y = 0; y < draw_area_h; y++) {
 8009430:	3701      	adds	r7, #1
                disp_buf_first += disp_w;
 8009432:	4435      	add	r5, r6
                lv_color_fill(disp_buf_first, color, draw_area_w);
 8009434:	9a06      	ldr	r2, [sp, #24]
 8009436:	4621      	mov	r1, r4
 8009438:	f00d fe9f 	bl	801717a <lv_color_fill>
            for(y = 0; y < draw_area_h; y++) {
 800943c:	9b08      	ldr	r3, [sp, #32]
 800943e:	42bb      	cmp	r3, r7
 8009440:	dcf5      	bgt.n	800942e <_lv_blend_fill+0x20e>
 8009442:	e7a6      	b.n	8009392 <_lv_blend_fill+0x172>
                disp_buf_first += disp_w;
 8009444:	0076      	lsls	r6, r6, #1
 8009446:	2700      	movs	r7, #0
 8009448:	e7f8      	b.n	800943c <_lv_blend_fill+0x21c>
            lv_color_t last_res_color = lv_color_mix(color, last_dest_color, opa);
 800944a:	9a05      	ldr	r2, [sp, #20]
 800944c:	4659      	mov	r1, fp
 800944e:	4620      	mov	r0, r4
 8009450:	f7ff fe4a 	bl	80090e8 <lv_color_mix>

LV_ATTRIBUTE_FAST_MEM static inline void lv_color_premult(lv_color_t c, uint8_t mix, uint16_t * out)
{
#if LV_COLOR_DEPTH != 1
    out[0] = (uint16_t) LV_COLOR_GET_R(c) * mix;
 8009454:	9f05      	ldr	r7, [sp, #20]
 8009456:	f3c4 22c4 	ubfx	r2, r4, #11, #5
 800945a:	f000 031f 	and.w	r3, r0, #31
 800945e:	f3c0 1145 	ubfx	r1, r0, #5, #6
            for(y = 0; y < draw_area_h; y++) {
 8009462:	46dc      	mov	ip, fp
 8009464:	437a      	muls	r2, r7
            lv_color_t last_res_color = lv_color_mix(color, last_dest_color, opa);
 8009466:	f3c0 20c4 	ubfx	r0, r0, #11, #5
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix_premult(uint16_t * premult_c1, lv_color_t c2, uint8_t mix)
{
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800946a:	f248 0e81 	movw	lr, #32897	; 0x8081
    out[0] = (uint16_t) LV_COLOR_GET_R(c) * mix;
 800946e:	9207      	str	r2, [sp, #28]
    out[1] = (uint16_t) LV_COLOR_GET_G(c) * mix;
 8009470:	f3c4 1245 	ubfx	r2, r4, #5, #6
    out[2] = (uint16_t) LV_COLOR_GET_B(c) * mix;
 8009474:	f004 041f 	and.w	r4, r4, #31
    out[1] = (uint16_t) LV_COLOR_GET_G(c) * mix;
 8009478:	437a      	muls	r2, r7
    out[2] = (uint16_t) LV_COLOR_GET_B(c) * mix;
 800947a:	fb04 fa07 	mul.w	sl, r4, r7
            lv_opa_t opa_inv = 255 - opa;
 800947e:	43fc      	mvns	r4, r7
    out[1] = (uint16_t) LV_COLOR_GET_G(c) * mix;
 8009480:	9209      	str	r2, [sp, #36]	; 0x24
                disp_buf_first += disp_w;
 8009482:	0072      	lsls	r2, r6, #1
            lv_opa_t opa_inv = 255 - opa;
 8009484:	b2e4      	uxtb	r4, r4
                disp_buf_first += disp_w;
 8009486:	9205      	str	r2, [sp, #20]
            for(y = 0; y < draw_area_h; y++) {
 8009488:	9a08      	ldr	r2, [sp, #32]
 800948a:	4562      	cmp	r2, ip
 800948c:	dd81      	ble.n	8009392 <_lv_blend_fill+0x172>
 800948e:	462f      	mov	r7, r5
                for(x = 0; x < draw_area_w; x++) {
 8009490:	2600      	movs	r6, #0
 8009492:	e037      	b.n	8009504 <_lv_blend_fill+0x2e4>
                    if(last_dest_color.full != disp_buf_first[x].full) {
 8009494:	463a      	mov	r2, r7
 8009496:	f837 8b02 	ldrh.w	r8, [r7], #2
 800949a:	45d8      	cmp	r8, fp
 800949c:	d01e      	beq.n	80094dc <_lv_blend_fill+0x2bc>
    LV_COLOR_SET_R(ret, LV_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800949e:	7850      	ldrb	r0, [r2, #1]
 80094a0:	9b07      	ldr	r3, [sp, #28]
 80094a2:	08c0      	lsrs	r0, r0, #3
    LV_COLOR_SET_G(ret, LV_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 80094a4:	8811      	ldrh	r1, [r2, #0]
    LV_COLOR_SET_R(ret, LV_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 80094a6:	fb00 3004 	mla	r0, r0, r4, r3
    LV_COLOR_SET_G(ret, LV_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 80094aa:	f3c1 1145 	ubfx	r1, r1, #5, #6
 80094ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
    LV_COLOR_SET_R(ret, LV_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 80094b0:	3080      	adds	r0, #128	; 0x80
    LV_COLOR_SET_G(ret, LV_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 80094b2:	fb01 3104 	mla	r1, r1, r4, r3
    LV_COLOR_SET_B(ret, LV_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 80094b6:	7813      	ldrb	r3, [r2, #0]
    LV_COLOR_SET_R(ret, LV_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 80094b8:	fb0e f000 	mul.w	r0, lr, r0
    LV_COLOR_SET_B(ret, LV_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 80094bc:	f003 031f 	and.w	r3, r3, #31
    LV_COLOR_SET_G(ret, LV_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 80094c0:	3180      	adds	r1, #128	; 0x80
    LV_COLOR_SET_R(ret, LV_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 80094c2:	f3c0 50c4 	ubfx	r0, r0, #23, #5
    LV_COLOR_SET_B(ret, LV_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 80094c6:	fb03 a304 	mla	r3, r3, r4, sl
    LV_COLOR_SET_G(ret, LV_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 80094ca:	fb0e f101 	mul.w	r1, lr, r1
    LV_COLOR_SET_B(ret, LV_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 80094ce:	3380      	adds	r3, #128	; 0x80
    LV_COLOR_SET_G(ret, LV_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 80094d0:	f3c1 51c5 	ubfx	r1, r1, #23, #6
    LV_COLOR_SET_B(ret, LV_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 80094d4:	fb0e f303 	mul.w	r3, lr, r3
 80094d8:	f3c3 53c4 	ubfx	r3, r3, #23, #5
                    disp_buf_first[x] = last_res_color;
 80094dc:	f892 9000 	ldrb.w	r9, [r2]
                for(x = 0; x < draw_area_w; x++) {
 80094e0:	3601      	adds	r6, #1
                    if(last_dest_color.full != disp_buf_first[x].full) {
 80094e2:	46c3      	mov	fp, r8
                    disp_buf_first[x] = last_res_color;
 80094e4:	f363 0904 	bfi	r9, r3, #0, #5
 80094e8:	f882 9000 	strb.w	r9, [r2]
 80094ec:	f8b2 9000 	ldrh.w	r9, [r2]
 80094f0:	f361 194a 	bfi	r9, r1, #5, #6
 80094f4:	f8a2 9000 	strh.w	r9, [r2]
 80094f8:	f3c9 2907 	ubfx	r9, r9, #8, #8
 80094fc:	f360 09c7 	bfi	r9, r0, #3, #5
 8009500:	f882 9001 	strb.w	r9, [r2, #1]
                for(x = 0; x < draw_area_w; x++) {
 8009504:	9a06      	ldr	r2, [sp, #24]
 8009506:	42b2      	cmp	r2, r6
 8009508:	dcc4      	bgt.n	8009494 <_lv_blend_fill+0x274>
                disp_buf_first += disp_w;
 800950a:	9a05      	ldr	r2, [sp, #20]
            for(y = 0; y < draw_area_h; y++) {
 800950c:	f10c 0c01 	add.w	ip, ip, #1
                disp_buf_first += disp_w;
 8009510:	4415      	add	r5, r2
            for(y = 0; y < draw_area_h; y++) {
 8009512:	e7b9      	b.n	8009488 <_lv_blend_fill+0x268>
        if(opa > LV_OPA_MAX) {
 8009514:	9a05      	ldr	r2, [sp, #20]
 8009516:	0076      	lsls	r6, r6, #1
 8009518:	2afd      	cmp	r2, #253	; 0xfd
 800951a:	d80d      	bhi.n	8009538 <_lv_blend_fill+0x318>
        last_dest_color.full = disp_buf_first[0].full;
 800951c:	f83a c013 	ldrh.w	ip, [sl, r3, lsl #1]
            lv_opa_t opa_tmp = LV_OPA_TRANSP;
 8009520:	465a      	mov	r2, fp
        last_res_color.full = disp_buf_first[0].full;
 8009522:	4660      	mov	r0, ip
            for(y = draw_area->y1; y <= draw_area->y2; y++) {
 8009524:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 8009528:	429f      	cmp	r7, r3
 800952a:	f73f af32 	bgt.w	8009392 <_lv_blend_fill+0x172>
 800952e:	f109 3aff 	add.w	sl, r9, #4294967295
                for(x = 0; x < draw_area_w; x++) {
 8009532:	f04f 0800 	mov.w	r8, #0
 8009536:	e0a2      	b.n	800967e <_lv_blend_fill+0x45e>
        int32_t x_end4 = draw_area_w - 4;
 8009538:	9b06      	ldr	r3, [sp, #24]
 800953a:	3b04      	subs	r3, #4
 800953c:	9305      	str	r3, [sp, #20]
            for(y = 0; y < draw_area_h; y++) {
 800953e:	9b08      	ldr	r3, [sp, #32]
 8009540:	455b      	cmp	r3, fp
 8009542:	f77f af26 	ble.w	8009392 <_lv_blend_fill+0x172>
 8009546:	464f      	mov	r7, r9
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
 8009548:	f04f 0800 	mov.w	r8, #0
 800954c:	e008      	b.n	8009560 <_lv_blend_fill+0x340>
                    FILL_NORMAL_MASK_PX(x, color)
 800954e:	f817 2b01 	ldrb.w	r2, [r7], #1
 8009552:	b11a      	cbz	r2, 800955c <_lv_blend_fill+0x33c>
 8009554:	2aff      	cmp	r2, #255	; 0xff
 8009556:	d118      	bne.n	800958a <_lv_blend_fill+0x36a>
 8009558:	f825 4018 	strh.w	r4, [r5, r8, lsl #1]
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
 800955c:	f108 0801 	add.w	r8, r8, #1
 8009560:	9b06      	ldr	r3, [sp, #24]
 8009562:	46ba      	mov	sl, r7
 8009564:	4543      	cmp	r3, r8
 8009566:	dd01      	ble.n	800956c <_lv_blend_fill+0x34c>
 8009568:	07bb      	lsls	r3, r7, #30
 800956a:	d1f0      	bne.n	800954e <_lv_blend_fill+0x32e>
 800956c:	eb05 0748 	add.w	r7, r5, r8, lsl #1
                for(; x <= x_end4; x += 4) {
 8009570:	9b05      	ldr	r3, [sp, #20]
 8009572:	4543      	cmp	r3, r8
 8009574:	da11      	bge.n	800959a <_lv_blend_fill+0x37a>
 8009576:	f10a 37ff 	add.w	r7, sl, #4294967295
                for(; x < draw_area_w ; x++) {
 800957a:	9b06      	ldr	r3, [sp, #24]
 800957c:	4543      	cmp	r3, r8
 800957e:	dc4b      	bgt.n	8009618 <_lv_blend_fill+0x3f8>
                disp_buf_first += disp_w;
 8009580:	4435      	add	r5, r6
                mask += draw_area_w;
 8009582:	4499      	add	r9, r3
            for(y = 0; y < draw_area_h; y++) {
 8009584:	f10b 0b01 	add.w	fp, fp, #1
 8009588:	e7d9      	b.n	800953e <_lv_blend_fill+0x31e>
                    FILL_NORMAL_MASK_PX(x, color)
 800958a:	f835 1018 	ldrh.w	r1, [r5, r8, lsl #1]
 800958e:	4620      	mov	r0, r4
 8009590:	f7ff fdaa 	bl	80090e8 <lv_color_mix>
 8009594:	f825 0018 	strh.w	r0, [r5, r8, lsl #1]
 8009598:	e7e0      	b.n	800955c <_lv_blend_fill+0x33c>
                    if(*mask32) {
 800959a:	f8da 2000 	ldr.w	r2, [sl]
 800959e:	b12a      	cbz	r2, 80095ac <_lv_blend_fill+0x38c>
                        if((*mask32) == 0xFFFFFFFF) {
 80095a0:	3201      	adds	r2, #1
 80095a2:	d109      	bne.n	80095b8 <_lv_blend_fill+0x398>
                            disp_buf_first[x] = color;
 80095a4:	803c      	strh	r4, [r7, #0]
                            disp_buf_first[x + 1] = color;
 80095a6:	807c      	strh	r4, [r7, #2]
                            disp_buf_first[x + 2] = color;
 80095a8:	80bc      	strh	r4, [r7, #4]
                            FILL_NORMAL_MASK_PX(x + 3, color)
 80095aa:	80fc      	strh	r4, [r7, #6]
                    mask32++;
 80095ac:	f10a 0a04 	add.w	sl, sl, #4
                for(; x <= x_end4; x += 4) {
 80095b0:	f108 0804 	add.w	r8, r8, #4
 80095b4:	3708      	adds	r7, #8
 80095b6:	e7db      	b.n	8009570 <_lv_blend_fill+0x350>
                            FILL_NORMAL_MASK_PX(x, color)
 80095b8:	f89a 2000 	ldrb.w	r2, [sl]
 80095bc:	b112      	cbz	r2, 80095c4 <_lv_blend_fill+0x3a4>
 80095be:	2aff      	cmp	r2, #255	; 0xff
 80095c0:	d118      	bne.n	80095f4 <_lv_blend_fill+0x3d4>
 80095c2:	803c      	strh	r4, [r7, #0]
                            FILL_NORMAL_MASK_PX(x + 1, color)
 80095c4:	f89a 2001 	ldrb.w	r2, [sl, #1]
 80095c8:	b112      	cbz	r2, 80095d0 <_lv_blend_fill+0x3b0>
 80095ca:	2aff      	cmp	r2, #255	; 0xff
 80095cc:	d118      	bne.n	8009600 <_lv_blend_fill+0x3e0>
 80095ce:	807c      	strh	r4, [r7, #2]
                            FILL_NORMAL_MASK_PX(x + 2, color)
 80095d0:	f89a 2002 	ldrb.w	r2, [sl, #2]
 80095d4:	b112      	cbz	r2, 80095dc <_lv_blend_fill+0x3bc>
 80095d6:	2aff      	cmp	r2, #255	; 0xff
 80095d8:	d118      	bne.n	800960c <_lv_blend_fill+0x3ec>
 80095da:	80bc      	strh	r4, [r7, #4]
                            FILL_NORMAL_MASK_PX(x + 3, color)
 80095dc:	f89a 2003 	ldrb.w	r2, [sl, #3]
 80095e0:	2a00      	cmp	r2, #0
 80095e2:	d0e3      	beq.n	80095ac <_lv_blend_fill+0x38c>
 80095e4:	2aff      	cmp	r2, #255	; 0xff
 80095e6:	d0e0      	beq.n	80095aa <_lv_blend_fill+0x38a>
 80095e8:	88f9      	ldrh	r1, [r7, #6]
 80095ea:	4620      	mov	r0, r4
 80095ec:	f7ff fd7c 	bl	80090e8 <lv_color_mix>
 80095f0:	80f8      	strh	r0, [r7, #6]
 80095f2:	e7db      	b.n	80095ac <_lv_blend_fill+0x38c>
                            FILL_NORMAL_MASK_PX(x, color)
 80095f4:	8839      	ldrh	r1, [r7, #0]
 80095f6:	4620      	mov	r0, r4
 80095f8:	f7ff fd76 	bl	80090e8 <lv_color_mix>
 80095fc:	8038      	strh	r0, [r7, #0]
 80095fe:	e7e1      	b.n	80095c4 <_lv_blend_fill+0x3a4>
                            FILL_NORMAL_MASK_PX(x + 1, color)
 8009600:	8879      	ldrh	r1, [r7, #2]
 8009602:	4620      	mov	r0, r4
 8009604:	f7ff fd70 	bl	80090e8 <lv_color_mix>
 8009608:	8078      	strh	r0, [r7, #2]
 800960a:	e7e1      	b.n	80095d0 <_lv_blend_fill+0x3b0>
                            FILL_NORMAL_MASK_PX(x + 2, color)
 800960c:	88b9      	ldrh	r1, [r7, #4]
 800960e:	4620      	mov	r0, r4
 8009610:	f7ff fd6a 	bl	80090e8 <lv_color_mix>
 8009614:	80b8      	strh	r0, [r7, #4]
 8009616:	e7e1      	b.n	80095dc <_lv_blend_fill+0x3bc>
                    FILL_NORMAL_MASK_PX(x, color)
 8009618:	f817 2f01 	ldrb.w	r2, [r7, #1]!
 800961c:	b11a      	cbz	r2, 8009626 <_lv_blend_fill+0x406>
 800961e:	2aff      	cmp	r2, #255	; 0xff
 8009620:	d104      	bne.n	800962c <_lv_blend_fill+0x40c>
 8009622:	f825 4018 	strh.w	r4, [r5, r8, lsl #1]
                for(; x < draw_area_w ; x++) {
 8009626:	f108 0801 	add.w	r8, r8, #1
 800962a:	e7a6      	b.n	800957a <_lv_blend_fill+0x35a>
                    FILL_NORMAL_MASK_PX(x, color)
 800962c:	f835 1018 	ldrh.w	r1, [r5, r8, lsl #1]
 8009630:	4620      	mov	r0, r4
 8009632:	f7ff fd59 	bl	80090e8 <lv_color_mix>
 8009636:	f825 0018 	strh.w	r0, [r5, r8, lsl #1]
 800963a:	e7f4      	b.n	8009626 <_lv_blend_fill+0x406>
                    if(*mask_tmp_x) {
 800963c:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
 8009640:	b1db      	cbz	r3, 800967a <_lv_blend_fill+0x45a>
                        if(*mask_tmp_x != last_mask) opa_tmp = *mask_tmp_x == LV_OPA_COVER ? opa :
 8009642:	455b      	cmp	r3, fp
 8009644:	eb05 0148 	add.w	r1, r5, r8, lsl #1
 8009648:	d011      	beq.n	800966e <_lv_blend_fill+0x44e>
 800964a:	2bff      	cmp	r3, #255	; 0xff
                                                                   (uint32_t)((uint32_t)(*mask_tmp_x) * opa) >> 8;
 800964c:	9a05      	ldr	r2, [sp, #20]
                        if(*mask_tmp_x != last_mask) opa_tmp = *mask_tmp_x == LV_OPA_COVER ? opa :
 800964e:	d002      	beq.n	8009656 <_lv_blend_fill+0x436>
                                                                   (uint32_t)((uint32_t)(*mask_tmp_x) * opa) >> 8;
 8009650:	fb13 f202 	smulbb	r2, r3, r2
                        if(*mask_tmp_x != last_mask) opa_tmp = *mask_tmp_x == LV_OPA_COVER ? opa :
 8009654:	0a12      	lsrs	r2, r2, #8
                                else last_res_color = lv_color_mix(color, disp_buf_first[x], opa_tmp);
 8009656:	8809      	ldrh	r1, [r1, #0]
 8009658:	4620      	mov	r0, r4
 800965a:	9207      	str	r2, [sp, #28]
 800965c:	f7ff fd44 	bl	80090e8 <lv_color_mix>
                            last_mask = *mask_tmp_x;
 8009660:	f89a b000 	ldrb.w	fp, [sl]
                                else last_res_color = lv_color_mix(color, disp_buf_first[x], opa_tmp);
 8009664:	b280      	uxth	r0, r0
                            last_dest_color.full = disp_buf_first[x].full;
 8009666:	f835 c018 	ldrh.w	ip, [r5, r8, lsl #1]
 800966a:	9a07      	ldr	r2, [sp, #28]
 800966c:	e003      	b.n	8009676 <_lv_blend_fill+0x456>
                        if(*mask_tmp_x != last_mask || last_dest_color.full != disp_buf_first[x].full) {
 800966e:	f835 3018 	ldrh.w	r3, [r5, r8, lsl #1]
 8009672:	4563      	cmp	r3, ip
 8009674:	d1ef      	bne.n	8009656 <_lv_blend_fill+0x436>
                        disp_buf_first[x] = last_res_color;
 8009676:	f825 0018 	strh.w	r0, [r5, r8, lsl #1]
                for(x = 0; x < draw_area_w; x++) {
 800967a:	f108 0801 	add.w	r8, r8, #1
 800967e:	9b06      	ldr	r3, [sp, #24]
 8009680:	4543      	cmp	r3, r8
 8009682:	dcdb      	bgt.n	800963c <_lv_blend_fill+0x41c>
                disp_buf_first += disp_w;
 8009684:	4435      	add	r5, r6
                mask += draw_area_w;
 8009686:	4499      	add	r9, r3
            for(y = draw_area->y1; y <= draw_area->y2; y++) {
 8009688:	3701      	adds	r7, #1
 800968a:	e74b      	b.n	8009524 <_lv_blend_fill+0x304>
    switch(mode) {
 800968c:	f1bb 0f01 	cmp.w	fp, #1
 8009690:	d02d      	beq.n	80096ee <_lv_blend_fill+0x4ce>
 8009692:	f1bb 0f02 	cmp.w	fp, #2
 8009696:	f47f ae7c 	bne.w	8009392 <_lv_blend_fill+0x172>
 800969a:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 8009790 <_lv_blend_fill+0x570>
 800969e:	8ab5      	ldrh	r5, [r6, #20]
 80096a0:	8a31      	ldrh	r1, [r6, #16]
 80096a2:	3501      	adds	r5, #1
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
 80096a4:	9b07      	ldr	r3, [sp, #28]
 80096a6:	1a6d      	subs	r5, r5, r1
 80096a8:	2b01      	cmp	r3, #1
 80096aa:	b22d      	sxth	r5, r5
    lv_color_t * disp_buf_tmp = disp_buf + disp_w * draw_area->y1;
 80096ac:	fb05 f107 	mul.w	r1, r5, r7
 80096b0:	ea4f 0545 	mov.w	r5, r5, lsl #1
 80096b4:	eb0a 0641 	add.w	r6, sl, r1, lsl #1
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
 80096b8:	d12b      	bne.n	8009712 <_lv_blend_fill+0x4f2>
    return (uint8_t)(bright >> 3);
}

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 80096ba:	f04f 0a00 	mov.w	sl, #0
        lv_color_t last_res_color = lv_color_mix(color, last_dest_color, opa);
 80096be:	9a05      	ldr	r2, [sp, #20]
 80096c0:	4620      	mov	r0, r4
 80096c2:	4651      	mov	r1, sl
 80096c4:	f7ff fd10 	bl	80090e8 <lv_color_mix>
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 80096c8:	f9bd 902a 	ldrsh.w	r9, [sp, #42]	; 0x2a
 80096cc:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 80096d0:	4599      	cmp	r9, r3
 80096d2:	f73f ae5e 	bgt.w	8009392 <_lv_blend_fill+0x172>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 80096d6:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
 80096da:	eb06 0b47 	add.w	fp, r6, r7, lsl #1
 80096de:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 80096e2:	429f      	cmp	r7, r3
 80096e4:	dd06      	ble.n	80096f4 <_lv_blend_fill+0x4d4>
            disp_buf_tmp += disp_w;
 80096e6:	442e      	add	r6, r5
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 80096e8:	f109 0901 	add.w	r9, r9, #1
 80096ec:	e7ee      	b.n	80096cc <_lv_blend_fill+0x4ac>
            blend_fp = color_blend_true_color_additive;
 80096ee:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8009794 <_lv_blend_fill+0x574>
 80096f2:	e7d4      	b.n	800969e <_lv_blend_fill+0x47e>
                if(last_dest_color.full != disp_buf_tmp[x].full) {
 80096f4:	f8bb 3000 	ldrh.w	r3, [fp]
 80096f8:	4553      	cmp	r3, sl
 80096fa:	d005      	beq.n	8009708 <_lv_blend_fill+0x4e8>
                    last_res_color = blend_fp(color, disp_buf_tmp[x], opa);
 80096fc:	4619      	mov	r1, r3
 80096fe:	9a05      	ldr	r2, [sp, #20]
 8009700:	4620      	mov	r0, r4
 8009702:	9306      	str	r3, [sp, #24]
 8009704:	47c0      	blx	r8
 8009706:	9b06      	ldr	r3, [sp, #24]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 8009708:	3701      	adds	r7, #1
                if(last_dest_color.full != disp_buf_tmp[x].full) {
 800970a:	469a      	mov	sl, r3
                disp_buf_tmp[x] = last_res_color;
 800970c:	f82b 0b02 	strh.w	r0, [fp], #2
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 8009710:	e7e5      	b.n	80096de <_lv_blend_fill+0x4be>
 8009712:	f1c0 0001 	rsb	r0, r0, #1
 8009716:	4402      	add	r2, r0
 8009718:	b213      	sxth	r3, r2
 800971a:	9307      	str	r3, [sp, #28]
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
 800971c:	9b06      	ldr	r3, [sp, #24]
 800971e:	eba9 0903 	sub.w	r9, r9, r3
        last_dest_color.full = disp_buf_tmp[0].full;
 8009722:	f83a 3011 	ldrh.w	r3, [sl, r1, lsl #1]
        lv_opa_t last_mask = LV_OPA_TRANSP;
 8009726:	2100      	movs	r1, #0
        last_res_color.full = disp_buf_tmp[0].full;
 8009728:	4618      	mov	r0, r3
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800972a:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 800972e:	4297      	cmp	r7, r2
 8009730:	f73f ae2f 	bgt.w	8009392 <_lv_blend_fill+0x172>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 8009734:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
 8009738:	eb06 0b4a 	add.w	fp, r6, sl, lsl #1
 800973c:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 8009740:	4592      	cmp	sl, r2
 8009742:	dd04      	ble.n	800974e <_lv_blend_fill+0x52e>
            mask_tmp += draw_area_w;
 8009744:	9a07      	ldr	r2, [sp, #28]
            disp_buf_tmp += disp_w;
 8009746:	442e      	add	r6, r5
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 8009748:	3701      	adds	r7, #1
            mask_tmp += draw_area_w;
 800974a:	4491      	add	r9, r2
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800974c:	e7ed      	b.n	800972a <_lv_blend_fill+0x50a>
                if(mask_tmp[x] == 0) continue;
 800974e:	f819 200a 	ldrb.w	r2, [r9, sl]
 8009752:	b1ba      	cbz	r2, 8009784 <_lv_blend_fill+0x564>
                if(mask_tmp[x] != last_mask || last_dest_color.full != disp_buf_tmp[x].full) {
 8009754:	428a      	cmp	r2, r1
 8009756:	d103      	bne.n	8009760 <_lv_blend_fill+0x540>
 8009758:	f8bb c000 	ldrh.w	ip, [fp]
 800975c:	459c      	cmp	ip, r3
 800975e:	d00f      	beq.n	8009780 <_lv_blend_fill+0x560>
                    lv_opa_t opa_tmp = mask_tmp[x] >= LV_OPA_MAX ? opa : (uint32_t)((uint32_t)mask_tmp[x] * opa) >> 8;
 8009760:	2afc      	cmp	r2, #252	; 0xfc
                    last_res_color = blend_fp(color, disp_buf_tmp[x], opa_tmp);
 8009762:	f8bb 1000 	ldrh.w	r1, [fp]
 8009766:	4620      	mov	r0, r4
                    lv_opa_t opa_tmp = mask_tmp[x] >= LV_OPA_MAX ? opa : (uint32_t)((uint32_t)mask_tmp[x] * opa) >> 8;
 8009768:	bf97      	itett	ls
 800976a:	9b05      	ldrls	r3, [sp, #20]
 800976c:	9a05      	ldrhi	r2, [sp, #20]
 800976e:	fb12 f203 	smulbbls	r2, r2, r3
 8009772:	0a12      	lsrls	r2, r2, #8
                    last_res_color = blend_fp(color, disp_buf_tmp[x], opa_tmp);
 8009774:	47c0      	blx	r8
                    last_mask = mask_tmp[x];
 8009776:	f819 100a 	ldrb.w	r1, [r9, sl]
                    last_res_color = blend_fp(color, disp_buf_tmp[x], opa_tmp);
 800977a:	b280      	uxth	r0, r0
                    last_dest_color.full = disp_buf_tmp[x].full;
 800977c:	f8bb 3000 	ldrh.w	r3, [fp]
                disp_buf_tmp[x] = last_res_color;
 8009780:	f8ab 0000 	strh.w	r0, [fp]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 8009784:	f10a 0a01 	add.w	sl, sl, #1
 8009788:	f10b 0b02 	add.w	fp, fp, #2
 800978c:	e7d6      	b.n	800973c <_lv_blend_fill+0x51c>
 800978e:	bf00      	nop
 8009790:	080091af 	.word	0x080091af
 8009794:	0800913d 	.word	0x0800913d

08009798 <_lv_blend_map>:
{
 8009798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800979c:	b08f      	sub	sp, #60	; 0x3c
 800979e:	468b      	mov	fp, r1
 80097a0:	f89d a064 	ldrb.w	sl, [sp, #100]	; 0x64
 80097a4:	9304      	str	r3, [sp, #16]
    if(opa < LV_OPA_MIN) return;
 80097a6:	f1ba 0f01 	cmp.w	sl, #1
{
 80097aa:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 80097ae:	f89d 8068 	ldrb.w	r8, [sp, #104]	; 0x68
 80097b2:	9209      	str	r2, [sp, #36]	; 0x24
 80097b4:	9308      	str	r3, [sp, #32]
    if(opa < LV_OPA_MIN) return;
 80097b6:	f240 80d1 	bls.w	800995c <_lv_blend_map+0x1c4>
    if(mask_res == LV_DRAW_MASK_RES_TRANSP) return;
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	f000 80ce 	beq.w	800995c <_lv_blend_map+0x1c4>
    is_common = _lv_area_intersect(&draw_area, clip_area, map_area);
 80097c0:	460a      	mov	r2, r1
 80097c2:	4601      	mov	r1, r0
 80097c4:	a80c      	add	r0, sp, #48	; 0x30
 80097c6:	f00d fb66 	bl	8016e96 <_lv_area_intersect>
    if(!is_common) return;
 80097ca:	2800      	cmp	r0, #0
 80097cc:	f000 80c6 	beq.w	800995c <_lv_blend_map+0x1c4>
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 80097d0:	f7fe fdd2 	bl	8008378 <_lv_refr_get_disp_refreshing>
 80097d4:	4607      	mov	r7, r0
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp);
 80097d6:	f00d f8ab 	bl	8016930 <lv_disp_get_draw_buf>
    lv_color_t * disp_buf = draw_buf->buf_act;
 80097da:	6883      	ldr	r3, [r0, #8]
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp);
 80097dc:	4604      	mov	r4, r0
    if(disp->driver->gpu_wait_cb) disp->driver->gpu_wait_cb(disp->driver);
 80097de:	6838      	ldr	r0, [r7, #0]
    lv_color_t * disp_buf = draw_buf->buf_act;
 80097e0:	9307      	str	r3, [sp, #28]
    if(disp->driver->gpu_wait_cb) disp->driver->gpu_wait_cb(disp->driver);
 80097e2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80097e4:	b103      	cbz	r3, 80097e8 <_lv_blend_map+0x50>
 80097e6:	4798      	blx	r3
    draw_area.y1 -= disp_area->y1;
 80097e8:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
    draw_area.y2 -= disp_area->y1;
 80097ec:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
    draw_area.y1 -= disp_area->y1;
 80097f0:	930a      	str	r3, [sp, #40]	; 0x28
    draw_area.x1 -= disp_area->x1;
 80097f2:	f8bd e030 	ldrh.w	lr, [sp, #48]	; 0x30
 80097f6:	8a20      	ldrh	r0, [r4, #16]
    draw_area.y1 -= disp_area->y1;
 80097f8:	8a63      	ldrh	r3, [r4, #18]
 80097fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    draw_area.x1 -= disp_area->x1;
 80097fc:	ebae 0c00 	sub.w	ip, lr, r0
    draw_area.y2 -= disp_area->y1;
 8009800:	910b      	str	r1, [sp, #44]	; 0x2c
    draw_area.y1 -= disp_area->y1;
 8009802:	1ad6      	subs	r6, r2, r3
    draw_area.x2 -= disp_area->x1;
 8009804:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
    draw_area.y2 -= disp_area->y1;
 8009808:	1acb      	subs	r3, r1, r3
    draw_area.x1 -= disp_area->x1;
 800980a:	fa0f fc8c 	sxth.w	ip, ip
    draw_area.y1 -= disp_area->y1;
 800980e:	b236      	sxth	r6, r6
    draw_area.x2 -= disp_area->x1;
 8009810:	1a10      	subs	r0, r2, r0
    draw_area.y2 -= disp_area->y1;
 8009812:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
    if(mask && disp->driver->antialiasing == 0)
 8009816:	9b04      	ldr	r3, [sp, #16]
    draw_area.x1 -= disp_area->x1;
 8009818:	f8ad c030 	strh.w	ip, [sp, #48]	; 0x30
    draw_area.y1 -= disp_area->y1;
 800981c:	f8ad 6032 	strh.w	r6, [sp, #50]	; 0x32
    draw_area.x2 -= disp_area->x1;
 8009820:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
    if(mask && disp->driver->antialiasing == 0)
 8009824:	2b00      	cmp	r3, #0
 8009826:	d156      	bne.n	80098d6 <_lv_blend_map+0x13e>
    if(disp->driver->set_px_cb) {
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	695b      	ldr	r3, [r3, #20]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d16b      	bne.n	8009908 <_lv_blend_map+0x170>
    else if(mode == LV_BLEND_MODE_NORMAL) {
 8009830:	f1ce 0e01 	rsb	lr, lr, #1
 8009834:	8aa7      	ldrh	r7, [r4, #20]
 8009836:	f8bb 9004 	ldrh.w	r9, [fp, #4]
 800983a:	4496      	add	lr, r2
 800983c:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
 8009840:	3701      	adds	r7, #1
 8009842:	f9bb 1000 	ldrsh.w	r1, [fp]
 8009846:	fa0f f28e 	sxth.w	r2, lr
 800984a:	f109 0901 	add.w	r9, r9, #1
 800984e:	f9b4 4012 	ldrsh.w	r4, [r4, #18]
 8009852:	1aff      	subs	r7, r7, r3
 8009854:	9205      	str	r2, [sp, #20]
 8009856:	eba9 0901 	sub.w	r9, r9, r1
 800985a:	f9bb 2002 	ldrsh.w	r2, [fp, #2]
 800985e:	b23f      	sxth	r7, r7
 8009860:	fa0f f989 	sxth.w	r9, r9
 8009864:	9606      	str	r6, [sp, #24]
 8009866:	1b14      	subs	r4, r2, r4
 8009868:	fb07 f506 	mul.w	r5, r7, r6
 800986c:	1b34      	subs	r4, r6, r4
 800986e:	fb09 f404 	mul.w	r4, r9, r4
 8009872:	f1b8 0f00 	cmp.w	r8, #0
 8009876:	f040 81ad 	bne.w	8009bd4 <_lv_blend_map+0x43c>
    map_buf_first += (draw_area->x1 - (map_area->x1 - disp_area->x1));
 800987a:	1acb      	subs	r3, r1, r3
    lv_color_t * disp_buf_first = disp_buf + disp_w * draw_area->y1 + draw_area->x1;
 800987c:	fb07 c506 	mla	r5, r7, r6, ip
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8009880:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009882:	ea4f 0949 	mov.w	r9, r9, lsl #1
    map_buf_first += (draw_area->x1 - (map_area->x1 - disp_area->x1));
 8009886:	ebac 0c03 	sub.w	ip, ip, r3
 800988a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800988c:	f1c2 0b01 	rsb	fp, r2, #1
 8009890:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009892:	4464      	add	r4, ip
 8009894:	445a      	add	r2, fp
 8009896:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 800989a:	007b      	lsls	r3, r7, #1
    int32_t draw_area_h = lv_area_get_height(draw_area);
 800989c:	fa0f fb82 	sxth.w	fp, r2
    lv_color_t * disp_buf_first = disp_buf + disp_w * draw_area->y1 + draw_area->x1;
 80098a0:	9a07      	ldr	r2, [sp, #28]
 80098a2:	9306      	str	r3, [sp, #24]
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
 80098a4:	9b08      	ldr	r3, [sp, #32]
    lv_color_t * disp_buf_first = disp_buf + disp_w * draw_area->y1 + draw_area->x1;
 80098a6:	eb02 0545 	add.w	r5, r2, r5, lsl #1
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
 80098aa:	2b01      	cmp	r3, #1
 80098ac:	f040 80bf 	bne.w	8009a2e <_lv_blend_map+0x296>
        if(opa > LV_OPA_MAX) {
 80098b0:	f1ba 0ffd 	cmp.w	sl, #253	; 0xfd
 80098b4:	f240 80b7 	bls.w	8009a26 <_lv_blend_map+0x28e>
                lv_memcpy(disp_buf_first, map_buf_first, draw_area_w * sizeof(lv_color_t));
 80098b8:	9b05      	ldr	r3, [sp, #20]
 80098ba:	005e      	lsls	r6, r3, #1
            for(y = 0; y < draw_area_h; y++) {
 80098bc:	45c3      	cmp	fp, r8
 80098be:	dd4d      	ble.n	800995c <_lv_blend_map+0x1c4>
                lv_memcpy(disp_buf_first, map_buf_first, draw_area_w * sizeof(lv_color_t));
 80098c0:	4621      	mov	r1, r4
 80098c2:	4628      	mov	r0, r5
 80098c4:	4632      	mov	r2, r6
                map_buf_first += map_w;
 80098c6:	444c      	add	r4, r9
                lv_memcpy(disp_buf_first, map_buf_first, draw_area_w * sizeof(lv_color_t));
 80098c8:	f00d ff6e 	bl	80177a8 <lv_memcpy>
                disp_buf_first += disp_w;
 80098cc:	9b06      	ldr	r3, [sp, #24]
            for(y = 0; y < draw_area_h; y++) {
 80098ce:	f108 0801 	add.w	r8, r8, #1
                disp_buf_first += disp_w;
 80098d2:	441d      	add	r5, r3
            for(y = 0; y < draw_area_h; y++) {
 80098d4:	e7f2      	b.n	80098bc <_lv_blend_map+0x124>
    if(mask && disp->driver->antialiasing == 0)
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	7a1b      	ldrb	r3, [r3, #8]
 80098da:	075b      	lsls	r3, r3, #29
 80098dc:	d4a4      	bmi.n	8009828 <_lv_blend_map+0x90>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80098de:	1c53      	adds	r3, r2, #1
 80098e0:	9904      	ldr	r1, [sp, #16]
        for(i = 0; i < mask_w; i++)  mask[i] = mask[i] > 128 ? LV_OPA_COVER : LV_OPA_TRANSP;
 80098e2:	9804      	ldr	r0, [sp, #16]
 80098e4:	eba3 030e 	sub.w	r3, r3, lr
 80098e8:	3901      	subs	r1, #1
 80098ea:	f1c0 0501 	rsb	r5, r0, #1
        int32_t mask_w = lv_area_get_width(&draw_area);
 80098ee:	b21b      	sxth	r3, r3
        for(i = 0; i < mask_w; i++)  mask[i] = mask[i] > 128 ? LV_OPA_COVER : LV_OPA_TRANSP;
 80098f0:	1868      	adds	r0, r5, r1
 80098f2:	4283      	cmp	r3, r0
 80098f4:	dd98      	ble.n	8009828 <_lv_blend_map+0x90>
 80098f6:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80098fa:	2880      	cmp	r0, #128	; 0x80
 80098fc:	f04f 30ff 	mov.w	r0, #4294967295
 8009900:	bf98      	it	ls
 8009902:	2000      	movls	r0, #0
 8009904:	7008      	strb	r0, [r1, #0]
 8009906:	e7f3      	b.n	80098f0 <_lv_blend_map+0x158>
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 8009908:	f7fe fd36 	bl	8008378 <_lv_refr_get_disp_refreshing>
 800990c:	f8bb 5004 	ldrh.w	r5, [fp, #4]
 8009910:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 8009914:	f9bb 3000 	ldrsh.w	r3, [fp]
 8009918:	3501      	adds	r5, #1
 800991a:	8aa2      	ldrh	r2, [r4, #20]
    const lv_color_t * map_buf_tmp = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
 800991c:	f9bb 7002 	ldrsh.w	r7, [fp, #2]
 8009920:	1aed      	subs	r5, r5, r3
 8009922:	f9b4 4012 	ldrsh.w	r4, [r4, #18]
 8009926:	3201      	adds	r2, #1
 8009928:	f9bd 6032 	ldrsh.w	r6, [sp, #50]	; 0x32
 800992c:	b22d      	sxth	r5, r5
 800992e:	1b3c      	subs	r4, r7, r4
 8009930:	1a52      	subs	r2, r2, r1
    map_buf_tmp -= draw_area->x1;
 8009932:	1ac9      	subs	r1, r1, r3
 8009934:	9b09      	ldr	r3, [sp, #36]	; 0x24
    const lv_color_t * map_buf_tmp = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
 8009936:	1b34      	subs	r4, r6, r4
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 8009938:	9005      	str	r0, [sp, #20]
 800993a:	f9bd 0030 	ldrsh.w	r0, [sp, #48]	; 0x30
 800993e:	b212      	sxth	r2, r2
    map_buf_tmp -= draw_area->x1;
 8009940:	fb05 1404 	mla	r4, r5, r4, r1
 8009944:	006d      	lsls	r5, r5, #1
 8009946:	f1c0 0900 	rsb	r9, r0, #0
 800994a:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
 800994e:	9b08      	ldr	r3, [sp, #32]
 8009950:	2b01      	cmp	r3, #1
 8009952:	d124      	bne.n	800999e <_lv_blend_map+0x206>
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 8009954:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 8009958:	429e      	cmp	r6, r3
 800995a:	dd02      	ble.n	8009962 <_lv_blend_map+0x1ca>
}
 800995c:	b00f      	add	sp, #60	; 0x3c
 800995e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 8009962:	f9bd 7030 	ldrsh.w	r7, [sp, #48]	; 0x30
                disp->driver->set_px_cb(disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x], opa);
 8009966:	fa0f f886 	sxth.w	r8, r6
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 800996a:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 800996e:	429f      	cmp	r7, r3
 8009970:	dd02      	ble.n	8009978 <_lv_blend_map+0x1e0>
            map_buf_tmp += map_w;
 8009972:	442c      	add	r4, r5
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 8009974:	3601      	adds	r6, #1
 8009976:	e7ed      	b.n	8009954 <_lv_blend_map+0x1bc>
                disp->driver->set_px_cb(disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x], opa);
 8009978:	9b05      	ldr	r3, [sp, #20]
 800997a:	9907      	ldr	r1, [sp, #28]
 800997c:	6818      	ldr	r0, [r3, #0]
 800997e:	f8cd a008 	str.w	sl, [sp, #8]
 8009982:	f834 3017 	ldrh.w	r3, [r4, r7, lsl #1]
 8009986:	f8cd 8000 	str.w	r8, [sp]
 800998a:	f8ad 3004 	strh.w	r3, [sp, #4]
 800998e:	b23b      	sxth	r3, r7
 8009990:	f8d0 9014 	ldr.w	r9, [r0, #20]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 8009994:	3701      	adds	r7, #1
                disp->driver->set_px_cb(disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x], opa);
 8009996:	9204      	str	r2, [sp, #16]
 8009998:	47c8      	blx	r9
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 800999a:	9a04      	ldr	r2, [sp, #16]
 800999c:	e7e5      	b.n	800996a <_lv_blend_map+0x1d2>
 800999e:	f8bd 7034 	ldrh.w	r7, [sp, #52]	; 0x34
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
 80099a2:	9b04      	ldr	r3, [sp, #16]
 80099a4:	3701      	adds	r7, #1
 80099a6:	444b      	add	r3, r9
 80099a8:	1a3f      	subs	r7, r7, r0
 80099aa:	4699      	mov	r9, r3
 80099ac:	b23f      	sxth	r7, r7
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 80099ae:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 80099b2:	429e      	cmp	r6, r3
 80099b4:	dcd2      	bgt.n	800995c <_lv_blend_map+0x1c4>
                    disp->driver->set_px_cb(disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x],
 80099b6:	b233      	sxth	r3, r6
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 80099b8:	f9bd 8030 	ldrsh.w	r8, [sp, #48]	; 0x30
                    disp->driver->set_px_cb(disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x],
 80099bc:	9304      	str	r3, [sp, #16]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 80099be:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 80099c2:	4598      	cmp	r8, r3
 80099c4:	dd03      	ble.n	80099ce <_lv_blend_map+0x236>
            mask_tmp += draw_area_w;
 80099c6:	44b9      	add	r9, r7
            map_buf_tmp += map_w;
 80099c8:	442c      	add	r4, r5
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 80099ca:	3601      	adds	r6, #1
 80099cc:	e7ef      	b.n	80099ae <_lv_blend_map+0x216>
                if(mask_tmp[x]) {
 80099ce:	f819 3008 	ldrb.w	r3, [r9, r8]
 80099d2:	b19b      	cbz	r3, 80099fc <_lv_blend_map+0x264>
                                           (uint32_t)((uint32_t)opa * mask_tmp[x]) >> 8);
 80099d4:	fb1a f303 	smulbb	r3, sl, r3
                    disp->driver->set_px_cb(disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x],
 80099d8:	9905      	ldr	r1, [sp, #20]
 80099da:	9206      	str	r2, [sp, #24]
 80099dc:	0a1b      	lsrs	r3, r3, #8
 80099de:	6808      	ldr	r0, [r1, #0]
 80099e0:	9907      	ldr	r1, [sp, #28]
 80099e2:	9302      	str	r3, [sp, #8]
 80099e4:	f834 3018 	ldrh.w	r3, [r4, r8, lsl #1]
 80099e8:	f8ad 3004 	strh.w	r3, [sp, #4]
 80099ec:	9b04      	ldr	r3, [sp, #16]
 80099ee:	9300      	str	r3, [sp, #0]
 80099f0:	fa0f f388 	sxth.w	r3, r8
 80099f4:	f8d0 b014 	ldr.w	fp, [r0, #20]
 80099f8:	47d8      	blx	fp
 80099fa:	9a06      	ldr	r2, [sp, #24]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 80099fc:	f108 0801 	add.w	r8, r8, #1
 8009a00:	e7dd      	b.n	80099be <_lv_blend_map+0x226>
                        disp_buf_first[x] = lv_color_mix(map_buf_first[x], disp_buf_first[x], opa);
 8009a02:	f835 1016 	ldrh.w	r1, [r5, r6, lsl #1]
 8009a06:	4652      	mov	r2, sl
 8009a08:	f834 0016 	ldrh.w	r0, [r4, r6, lsl #1]
 8009a0c:	f7ff fb6c 	bl	80090e8 <lv_color_mix>
 8009a10:	f825 0016 	strh.w	r0, [r5, r6, lsl #1]
                for(x = 0; x < draw_area_w; x++) {
 8009a14:	3601      	adds	r6, #1
 8009a16:	9b05      	ldr	r3, [sp, #20]
 8009a18:	42b3      	cmp	r3, r6
 8009a1a:	dcf2      	bgt.n	8009a02 <_lv_blend_map+0x26a>
                disp_buf_first += disp_w;
 8009a1c:	9b06      	ldr	r3, [sp, #24]
                map_buf_first += map_w;
 8009a1e:	444c      	add	r4, r9
            for(y = 0; y < draw_area_h; y++) {
 8009a20:	f108 0801 	add.w	r8, r8, #1
                disp_buf_first += disp_w;
 8009a24:	441d      	add	r5, r3
            for(y = 0; y < draw_area_h; y++) {
 8009a26:	45c3      	cmp	fp, r8
 8009a28:	dd98      	ble.n	800995c <_lv_blend_map+0x1c4>
                for(x = 0; x < draw_area_w; x++) {
 8009a2a:	2600      	movs	r6, #0
 8009a2c:	e7f3      	b.n	8009a16 <_lv_blend_map+0x27e>
        if(opa > LV_OPA_MAX) {
 8009a2e:	f1ba 0ffd 	cmp.w	sl, #253	; 0xfd
 8009a32:	f240 80ca 	bls.w	8009bca <_lv_blend_map+0x432>
            int32_t x_end4 = draw_area_w - 4;
 8009a36:	9b05      	ldr	r3, [sp, #20]
 8009a38:	3b04      	subs	r3, #4
            for(y = 0; y < draw_area_h; y++) {
 8009a3a:	e9cd 8307 	strd	r8, r3, [sp, #28]
 8009a3e:	9b07      	ldr	r3, [sp, #28]
 8009a40:	459b      	cmp	fp, r3
 8009a42:	dd8b      	ble.n	800995c <_lv_blend_map+0x1c4>
 8009a44:	f8dd 8010 	ldr.w	r8, [sp, #16]
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
 8009a48:	2600      	movs	r6, #0
 8009a4a:	e009      	b.n	8009a60 <_lv_blend_map+0x2c8>
                    MAP_NORMAL_MASK_PX(x)
 8009a4c:	f818 2b01 	ldrb.w	r2, [r8], #1
 8009a50:	b12a      	cbz	r2, 8009a5e <_lv_blend_map+0x2c6>
 8009a52:	2aff      	cmp	r2, #255	; 0xff
 8009a54:	d122      	bne.n	8009a9c <_lv_blend_map+0x304>
 8009a56:	f834 3016 	ldrh.w	r3, [r4, r6, lsl #1]
 8009a5a:	f825 3016 	strh.w	r3, [r5, r6, lsl #1]
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
 8009a5e:	3601      	adds	r6, #1
 8009a60:	9b05      	ldr	r3, [sp, #20]
 8009a62:	4647      	mov	r7, r8
 8009a64:	42b3      	cmp	r3, r6
 8009a66:	dd02      	ble.n	8009a6e <_lv_blend_map+0x2d6>
 8009a68:	f018 0f03 	tst.w	r8, #3
 8009a6c:	d1ee      	bne.n	8009a4c <_lv_blend_map+0x2b4>
 8009a6e:	eb05 0846 	add.w	r8, r5, r6, lsl #1
 8009a72:	eb04 0a46 	add.w	sl, r4, r6, lsl #1
                for(; x < x_end4; x += 4) {
 8009a76:	9b08      	ldr	r3, [sp, #32]
 8009a78:	42b3      	cmp	r3, r6
 8009a7a:	dc18      	bgt.n	8009aae <_lv_blend_map+0x316>
 8009a7c:	f107 38ff 	add.w	r8, r7, #4294967295
                for(; x < draw_area_w ; x++) {
 8009a80:	9b05      	ldr	r3, [sp, #20]
 8009a82:	42b3      	cmp	r3, r6
 8009a84:	dc6f      	bgt.n	8009b66 <_lv_blend_map+0x3ce>
                disp_buf_first += disp_w;
 8009a86:	9b06      	ldr	r3, [sp, #24]
                map_buf_first += map_w;
 8009a88:	444c      	add	r4, r9
                disp_buf_first += disp_w;
 8009a8a:	441d      	add	r5, r3
                mask += draw_area_w;
 8009a8c:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8009a90:	4413      	add	r3, r2
 8009a92:	9304      	str	r3, [sp, #16]
            for(y = 0; y < draw_area_h; y++) {
 8009a94:	9b07      	ldr	r3, [sp, #28]
 8009a96:	3301      	adds	r3, #1
 8009a98:	9307      	str	r3, [sp, #28]
 8009a9a:	e7d0      	b.n	8009a3e <_lv_blend_map+0x2a6>
                    MAP_NORMAL_MASK_PX(x)
 8009a9c:	f835 1016 	ldrh.w	r1, [r5, r6, lsl #1]
 8009aa0:	f834 0016 	ldrh.w	r0, [r4, r6, lsl #1]
 8009aa4:	f7ff fb20 	bl	80090e8 <lv_color_mix>
 8009aa8:	f825 0016 	strh.w	r0, [r5, r6, lsl #1]
 8009aac:	e7d7      	b.n	8009a5e <_lv_blend_map+0x2c6>
                    if(*mask32) {
 8009aae:	683a      	ldr	r2, [r7, #0]
 8009ab0:	b18a      	cbz	r2, 8009ad6 <_lv_blend_map+0x33e>
                        if((*mask32) == 0xFFFFFFFF) {
 8009ab2:	3201      	adds	r2, #1
 8009ab4:	d116      	bne.n	8009ae4 <_lv_blend_map+0x34c>
                            disp_buf_first[x] = map_buf_first[x];
 8009ab6:	f8ba 2000 	ldrh.w	r2, [sl]
 8009aba:	f8a8 2000 	strh.w	r2, [r8]
                            disp_buf_first[x + 1] = map_buf_first[x + 1];
 8009abe:	f8ba 2002 	ldrh.w	r2, [sl, #2]
 8009ac2:	f8a8 2002 	strh.w	r2, [r8, #2]
                            disp_buf_first[x + 2] = map_buf_first[x + 2];
 8009ac6:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8009aca:	f8a8 2004 	strh.w	r2, [r8, #4]
                            MAP_NORMAL_MASK_PX(x + 3)
 8009ace:	f8ba 2006 	ldrh.w	r2, [sl, #6]
 8009ad2:	f8a8 2006 	strh.w	r2, [r8, #6]
                    mask32++;
 8009ad6:	3704      	adds	r7, #4
                for(; x < x_end4; x += 4) {
 8009ad8:	3604      	adds	r6, #4
 8009ada:	f108 0808 	add.w	r8, r8, #8
 8009ade:	f10a 0a08 	add.w	sl, sl, #8
 8009ae2:	e7c8      	b.n	8009a76 <_lv_blend_map+0x2de>
                            MAP_NORMAL_MASK_PX(x)
 8009ae4:	783a      	ldrb	r2, [r7, #0]
 8009ae6:	b12a      	cbz	r2, 8009af4 <_lv_blend_map+0x35c>
 8009ae8:	2aff      	cmp	r2, #255	; 0xff
 8009aea:	d121      	bne.n	8009b30 <_lv_blend_map+0x398>
 8009aec:	f8ba 2000 	ldrh.w	r2, [sl]
 8009af0:	f8a8 2000 	strh.w	r2, [r8]
                            MAP_NORMAL_MASK_PX(x + 1)
 8009af4:	787a      	ldrb	r2, [r7, #1]
 8009af6:	b12a      	cbz	r2, 8009b04 <_lv_blend_map+0x36c>
 8009af8:	2aff      	cmp	r2, #255	; 0xff
 8009afa:	d122      	bne.n	8009b42 <_lv_blend_map+0x3aa>
 8009afc:	f8ba 2002 	ldrh.w	r2, [sl, #2]
 8009b00:	f8a8 2002 	strh.w	r2, [r8, #2]
                            MAP_NORMAL_MASK_PX(x + 2)
 8009b04:	78ba      	ldrb	r2, [r7, #2]
 8009b06:	b12a      	cbz	r2, 8009b14 <_lv_blend_map+0x37c>
 8009b08:	2aff      	cmp	r2, #255	; 0xff
 8009b0a:	d123      	bne.n	8009b54 <_lv_blend_map+0x3bc>
 8009b0c:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8009b10:	f8a8 2004 	strh.w	r2, [r8, #4]
                            MAP_NORMAL_MASK_PX(x + 3)
 8009b14:	78fa      	ldrb	r2, [r7, #3]
 8009b16:	2a00      	cmp	r2, #0
 8009b18:	d0dd      	beq.n	8009ad6 <_lv_blend_map+0x33e>
 8009b1a:	2aff      	cmp	r2, #255	; 0xff
 8009b1c:	d0d7      	beq.n	8009ace <_lv_blend_map+0x336>
 8009b1e:	f8b8 1006 	ldrh.w	r1, [r8, #6]
 8009b22:	f8ba 0006 	ldrh.w	r0, [sl, #6]
 8009b26:	f7ff fadf 	bl	80090e8 <lv_color_mix>
 8009b2a:	f8a8 0006 	strh.w	r0, [r8, #6]
 8009b2e:	e7d2      	b.n	8009ad6 <_lv_blend_map+0x33e>
                            MAP_NORMAL_MASK_PX(x)
 8009b30:	f8b8 1000 	ldrh.w	r1, [r8]
 8009b34:	f8ba 0000 	ldrh.w	r0, [sl]
 8009b38:	f7ff fad6 	bl	80090e8 <lv_color_mix>
 8009b3c:	f8a8 0000 	strh.w	r0, [r8]
 8009b40:	e7d8      	b.n	8009af4 <_lv_blend_map+0x35c>
                            MAP_NORMAL_MASK_PX(x + 1)
 8009b42:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 8009b46:	f8ba 0002 	ldrh.w	r0, [sl, #2]
 8009b4a:	f7ff facd 	bl	80090e8 <lv_color_mix>
 8009b4e:	f8a8 0002 	strh.w	r0, [r8, #2]
 8009b52:	e7d7      	b.n	8009b04 <_lv_blend_map+0x36c>
                            MAP_NORMAL_MASK_PX(x + 2)
 8009b54:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 8009b58:	f8ba 0004 	ldrh.w	r0, [sl, #4]
 8009b5c:	f7ff fac4 	bl	80090e8 <lv_color_mix>
 8009b60:	f8a8 0004 	strh.w	r0, [r8, #4]
 8009b64:	e7d6      	b.n	8009b14 <_lv_blend_map+0x37c>
                    MAP_NORMAL_MASK_PX(x)
 8009b66:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 8009b6a:	b12a      	cbz	r2, 8009b78 <_lv_blend_map+0x3e0>
 8009b6c:	2aff      	cmp	r2, #255	; 0xff
 8009b6e:	d105      	bne.n	8009b7c <_lv_blend_map+0x3e4>
 8009b70:	f834 3016 	ldrh.w	r3, [r4, r6, lsl #1]
 8009b74:	f825 3016 	strh.w	r3, [r5, r6, lsl #1]
                for(; x < draw_area_w ; x++) {
 8009b78:	3601      	adds	r6, #1
 8009b7a:	e781      	b.n	8009a80 <_lv_blend_map+0x2e8>
                    MAP_NORMAL_MASK_PX(x)
 8009b7c:	f835 1016 	ldrh.w	r1, [r5, r6, lsl #1]
 8009b80:	f834 0016 	ldrh.w	r0, [r4, r6, lsl #1]
 8009b84:	f7ff fab0 	bl	80090e8 <lv_color_mix>
 8009b88:	f825 0016 	strh.w	r0, [r5, r6, lsl #1]
 8009b8c:	e7f4      	b.n	8009b78 <_lv_blend_map+0x3e0>
                    if(mask[x]) {
 8009b8e:	9b04      	ldr	r3, [sp, #16]
 8009b90:	5d9a      	ldrb	r2, [r3, r6]
 8009b92:	b16a      	cbz	r2, 8009bb0 <_lv_blend_map+0x418>
                        lv_opa_t opa_tmp = mask[x] >= LV_OPA_MAX ? opa : ((opa * mask[x]) >> 8);
 8009b94:	2afc      	cmp	r2, #252	; 0xfc
                            disp_buf_first[x] = lv_color_mix(map_buf_first[x], disp_buf_first[x], opa_tmp);
 8009b96:	f835 1016 	ldrh.w	r1, [r5, r6, lsl #1]
 8009b9a:	f834 0016 	ldrh.w	r0, [r4, r6, lsl #1]
                        lv_opa_t opa_tmp = mask[x] >= LV_OPA_MAX ? opa : ((opa * mask[x]) >> 8);
 8009b9e:	bf96      	itet	ls
 8009ba0:	fb1a f202 	smulbbls	r2, sl, r2
 8009ba4:	4652      	movhi	r2, sl
 8009ba6:	0a12      	lsrls	r2, r2, #8
                            disp_buf_first[x] = lv_color_mix(map_buf_first[x], disp_buf_first[x], opa_tmp);
 8009ba8:	f7ff fa9e 	bl	80090e8 <lv_color_mix>
 8009bac:	f825 0016 	strh.w	r0, [r5, r6, lsl #1]
                for(x = 0; x < draw_area_w; x++) {
 8009bb0:	3601      	adds	r6, #1
 8009bb2:	9b05      	ldr	r3, [sp, #20]
 8009bb4:	42b3      	cmp	r3, r6
 8009bb6:	dcea      	bgt.n	8009b8e <_lv_blend_map+0x3f6>
                disp_buf_first += disp_w;
 8009bb8:	9b06      	ldr	r3, [sp, #24]
                map_buf_first += map_w;
 8009bba:	444c      	add	r4, r9
            for(y = 0; y < draw_area_h; y++) {
 8009bbc:	f108 0801 	add.w	r8, r8, #1
                disp_buf_first += disp_w;
 8009bc0:	441d      	add	r5, r3
                mask += draw_area_w;
 8009bc2:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8009bc6:	4413      	add	r3, r2
 8009bc8:	9304      	str	r3, [sp, #16]
            for(y = 0; y < draw_area_h; y++) {
 8009bca:	45c3      	cmp	fp, r8
 8009bcc:	f77f aec6 	ble.w	800995c <_lv_blend_map+0x1c4>
                for(x = 0; x < draw_area_w; x++) {
 8009bd0:	2600      	movs	r6, #0
 8009bd2:	e7ee      	b.n	8009bb2 <_lv_blend_map+0x41a>
    switch(mode) {
 8009bd4:	f1b8 0f01 	cmp.w	r8, #1
 8009bd8:	d026      	beq.n	8009c28 <_lv_blend_map+0x490>
 8009bda:	f1b8 0f02 	cmp.w	r8, #2
 8009bde:	f47f aebd 	bne.w	800995c <_lv_blend_map+0x1c4>
 8009be2:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 8009c9c <_lv_blend_map+0x504>
    lv_color_t * disp_buf_tmp = disp_buf + disp_w * draw_area->y1;
 8009be6:	9a07      	ldr	r2, [sp, #28]
 8009be8:	007f      	lsls	r7, r7, #1
 8009bea:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8009bee:	eb02 0545 	add.w	r5, r2, r5, lsl #1
    const lv_color_t * map_buf_tmp = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
 8009bf2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009bf4:	eb02 0444 	add.w	r4, r2, r4, lsl #1
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
 8009bf8:	9a08      	ldr	r2, [sp, #32]
 8009bfa:	2a01      	cmp	r2, #1
 8009bfc:	d121      	bne.n	8009c42 <_lv_blend_map+0x4aa>
        map_buf_tmp -= draw_area->x1;
 8009bfe:	1a5b      	subs	r3, r3, r1
 8009c00:	eb04 0443 	add.w	r4, r4, r3, lsl #1
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 8009c04:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 8009c08:	9a06      	ldr	r2, [sp, #24]
 8009c0a:	429a      	cmp	r2, r3
 8009c0c:	f73f aea6 	bgt.w	800995c <_lv_blend_map+0x1c4>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 8009c10:	f9bd 6030 	ldrsh.w	r6, [sp, #48]	; 0x30
 8009c14:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8009c18:	429e      	cmp	r6, r3
 8009c1a:	dd08      	ble.n	8009c2e <_lv_blend_map+0x496>
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 8009c1c:	9b06      	ldr	r3, [sp, #24]
            disp_buf_tmp += disp_w;
 8009c1e:	443d      	add	r5, r7
            map_buf_tmp += map_w;
 8009c20:	444c      	add	r4, r9
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 8009c22:	3301      	adds	r3, #1
 8009c24:	9306      	str	r3, [sp, #24]
 8009c26:	e7ed      	b.n	8009c04 <_lv_blend_map+0x46c>
            blend_fp = color_blend_true_color_additive;
 8009c28:	f8df b074 	ldr.w	fp, [pc, #116]	; 8009ca0 <_lv_blend_map+0x508>
 8009c2c:	e7db      	b.n	8009be6 <_lv_blend_map+0x44e>
                disp_buf_tmp[x] = blend_fp(map_buf_tmp[x], disp_buf_tmp[x], opa);
 8009c2e:	f835 1016 	ldrh.w	r1, [r5, r6, lsl #1]
 8009c32:	4652      	mov	r2, sl
 8009c34:	f834 0016 	ldrh.w	r0, [r4, r6, lsl #1]
 8009c38:	47d8      	blx	fp
 8009c3a:	f825 0016 	strh.w	r0, [r5, r6, lsl #1]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 8009c3e:	3601      	adds	r6, #1
 8009c40:	e7e8      	b.n	8009c14 <_lv_blend_map+0x47c>
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
 8009c42:	9b04      	ldr	r3, [sp, #16]
        map_buf_tmp -= draw_area->x1;
 8009c44:	eba4 044c 	sub.w	r4, r4, ip, lsl #1
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
 8009c48:	eba3 060c 	sub.w	r6, r3, ip
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 8009c4c:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 8009c50:	9a06      	ldr	r2, [sp, #24]
 8009c52:	429a      	cmp	r2, r3
 8009c54:	f73f ae82 	bgt.w	800995c <_lv_blend_map+0x1c4>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 8009c58:	f9bd 8030 	ldrsh.w	r8, [sp, #48]	; 0x30
 8009c5c:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8009c60:	4598      	cmp	r8, r3
 8009c62:	dd07      	ble.n	8009c74 <_lv_blend_map+0x4dc>
            mask_tmp += draw_area_w;
 8009c64:	9b05      	ldr	r3, [sp, #20]
            disp_buf_tmp += disp_w;
 8009c66:	443d      	add	r5, r7
            map_buf_tmp += map_w;
 8009c68:	444c      	add	r4, r9
            mask_tmp += draw_area_w;
 8009c6a:	441e      	add	r6, r3
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 8009c6c:	9b06      	ldr	r3, [sp, #24]
 8009c6e:	3301      	adds	r3, #1
 8009c70:	9306      	str	r3, [sp, #24]
 8009c72:	e7eb      	b.n	8009c4c <_lv_blend_map+0x4b4>
                if(mask_tmp[x] == 0) continue;
 8009c74:	f816 2008 	ldrb.w	r2, [r6, r8]
 8009c78:	b162      	cbz	r2, 8009c94 <_lv_blend_map+0x4fc>
                lv_opa_t opa_tmp = mask_tmp[x] >= LV_OPA_MAX ? opa : ((opa * mask_tmp[x]) >> 8);
 8009c7a:	2afc      	cmp	r2, #252	; 0xfc
                disp_buf_tmp[x] = blend_fp(map_buf_tmp[x], disp_buf_tmp[x], opa_tmp);
 8009c7c:	f835 1018 	ldrh.w	r1, [r5, r8, lsl #1]
 8009c80:	f834 0018 	ldrh.w	r0, [r4, r8, lsl #1]
                lv_opa_t opa_tmp = mask_tmp[x] >= LV_OPA_MAX ? opa : ((opa * mask_tmp[x]) >> 8);
 8009c84:	bf96      	itet	ls
 8009c86:	fb1a f202 	smulbbls	r2, sl, r2
 8009c8a:	4652      	movhi	r2, sl
 8009c8c:	0a12      	lsrls	r2, r2, #8
                disp_buf_tmp[x] = blend_fp(map_buf_tmp[x], disp_buf_tmp[x], opa_tmp);
 8009c8e:	47d8      	blx	fp
 8009c90:	f825 0018 	strh.w	r0, [r5, r8, lsl #1]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 8009c94:	f108 0801 	add.w	r8, r8, #1
 8009c98:	e7e0      	b.n	8009c5c <_lv_blend_map+0x4c4>
 8009c9a:	bf00      	nop
 8009c9c:	080091af 	.word	0x080091af
 8009ca0:	0800913d 	.word	0x0800913d

08009ca4 <show_error>:
        }
    }
}

static void show_error(const lv_area_t * coords, const lv_area_t * clip_area, const char * msg)
{
 8009ca4:	b510      	push	{r4, lr}
 8009ca6:	b09a      	sub	sp, #104	; 0x68
 8009ca8:	4604      	mov	r4, r0
    lv_draw_rect_dsc_t rect_dsc;
    lv_draw_rect_dsc_init(&rect_dsc);
 8009caa:	a80d      	add	r0, sp, #52	; 0x34
{
 8009cac:	9102      	str	r1, [sp, #8]
 8009cae:	9203      	str	r2, [sp, #12]
    lv_draw_rect_dsc_init(&rect_dsc);
 8009cb0:	f002 feea 	bl	800ca88 <lv_draw_rect_dsc_init>
    rect_dsc.bg_color = lv_color_white();
 8009cb4:	f64f 72ff 	movw	r2, #65535	; 0xffff
    lv_draw_rect(coords, clip_area, &rect_dsc);
 8009cb8:	9902      	ldr	r1, [sp, #8]
 8009cba:	4620      	mov	r0, r4
    rect_dsc.bg_color = lv_color_white();
 8009cbc:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
    lv_draw_rect(coords, clip_area, &rect_dsc);
 8009cc0:	aa0d      	add	r2, sp, #52	; 0x34
 8009cc2:	f002 ff03 	bl	800cacc <lv_draw_rect>

    lv_draw_label_dsc_t label_dsc;
    lv_draw_label_dsc_init(&label_dsc);
 8009cc6:	a805      	add	r0, sp, #20
 8009cc8:	f000 fc2a 	bl	800a520 <lv_draw_label_dsc_init>
    lv_draw_label(coords, clip_area, &label_dsc, msg, NULL);
 8009ccc:	2200      	movs	r2, #0
 8009cce:	9b03      	ldr	r3, [sp, #12]
 8009cd0:	4620      	mov	r0, r4
 8009cd2:	9200      	str	r2, [sp, #0]
 8009cd4:	aa05      	add	r2, sp, #20
 8009cd6:	9902      	ldr	r1, [sp, #8]
 8009cd8:	f000 fdfa 	bl	800a8d0 <lv_draw_label>
}
 8009cdc:	b01a      	add	sp, #104	; 0x68
 8009cde:	bd10      	pop	{r4, pc}

08009ce0 <lv_draw_map>:
{
 8009ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ce4:	ed2d 8b02 	vpush	{d8}
 8009ce8:	b0b3      	sub	sp, #204	; 0xcc
 8009cea:	461c      	mov	r4, r3
 8009cec:	468b      	mov	fp, r1
 8009cee:	4615      	mov	r5, r2
 8009cf0:	f89d 30f8 	ldrb.w	r3, [sp, #248]	; 0xf8
 8009cf4:	4680      	mov	r8, r0
 8009cf6:	9309      	str	r3, [sp, #36]	; 0x24
 8009cf8:	f89d 30fc 	ldrb.w	r3, [sp, #252]	; 0xfc
 8009cfc:	9306      	str	r3, [sp, #24]
    dest->x1 = src->x1;
 8009cfe:	680b      	ldr	r3, [r1, #0]
 8009d00:	931b      	str	r3, [sp, #108]	; 0x6c
    dest->x2 = src->x2;
 8009d02:	684b      	ldr	r3, [r1, #4]
 8009d04:	931c      	str	r3, [sp, #112]	; 0x70
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 8009d06:	f7fe fb37 	bl	8008378 <_lv_refr_get_disp_refreshing>
 8009d0a:	4606      	mov	r6, r0
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp);
 8009d0c:	f00c fe10 	bl	8016930 <lv_disp_get_draw_buf>
    draw_area.x1 -= disp_area->x1;
 8009d10:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
 8009d14:	8a07      	ldrh	r7, [r0, #16]
    draw_area.y1 -= disp_area->y1;
 8009d16:	f8bd 106e 	ldrh.w	r1, [sp, #110]	; 0x6e
    draw_area.x1 -= disp_area->x1;
 8009d1a:	1bdb      	subs	r3, r3, r7
    draw_area.x2 -= disp_area->x1;
 8009d1c:	f8bd 2070 	ldrh.w	r2, [sp, #112]	; 0x70
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp);
 8009d20:	9004      	str	r0, [sp, #16]
    draw_area.x1 -= disp_area->x1;
 8009d22:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
    draw_area.x2 -= disp_area->x1;
 8009d26:	1bd2      	subs	r2, r2, r7
    draw_area.y1 -= disp_area->y1;
 8009d28:	8a40      	ldrh	r0, [r0, #18]
    draw_area.y2 -= disp_area->y1;
 8009d2a:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
    draw_area.y1 -= disp_area->y1;
 8009d2e:	1a09      	subs	r1, r1, r0
    draw_area.x2 -= disp_area->x1;
 8009d30:	f8ad 2070 	strh.w	r2, [sp, #112]	; 0x70
    draw_area.y2 -= disp_area->y1;
 8009d34:	1a1b      	subs	r3, r3, r0
    draw_area.y1 -= disp_area->y1;
 8009d36:	f8ad 106e 	strh.w	r1, [sp, #110]	; 0x6e
    draw_area.y2 -= disp_area->y1;
 8009d3a:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
 8009d3e:	f002 f9ff 	bl	800c140 <lv_draw_mask_get_cnt>
    if(other_mask_cnt == 0 && draw_dsc->angle == 0 && draw_dsc->zoom == LV_IMG_ZOOM_NONE &&
 8009d42:	9008      	str	r0, [sp, #32]
 8009d44:	b9f8      	cbnz	r0, 8009d86 <lv_draw_map+0xa6>
 8009d46:	6823      	ldr	r3, [r4, #0]
 8009d48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009d4c:	d11b      	bne.n	8009d86 <lv_draw_map+0xa6>
 8009d4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d50:	b9cb      	cbnz	r3, 8009d86 <lv_draw_map+0xa6>
       chroma_key == false && alpha_byte == false && draw_dsc->recolor_opa == LV_OPA_TRANSP) {
 8009d52:	9b06      	ldr	r3, [sp, #24]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	f040 809c 	bne.w	8009e92 <lv_draw_map+0x1b2>
 8009d5a:	7aa3      	ldrb	r3, [r4, #10]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	f040 809a 	bne.w	8009e96 <lv_draw_map+0x1b6>
                      draw_dsc->blend_mode);
 8009d62:	7b22      	ldrb	r2, [r4, #12]
        _lv_blend_map(clip_area, map_area, (lv_color_t *)map_p, NULL, LV_DRAW_MASK_RES_FULL_COVER, draw_dsc->opa,
 8009d64:	4641      	mov	r1, r8
 8009d66:	4658      	mov	r0, fp
 8009d68:	f002 020f 	and.w	r2, r2, #15
 8009d6c:	9202      	str	r2, [sp, #8]
 8009d6e:	7ae2      	ldrb	r2, [r4, #11]
 8009d70:	9201      	str	r2, [sp, #4]
 8009d72:	2201      	movs	r2, #1
 8009d74:	9200      	str	r2, [sp, #0]
 8009d76:	462a      	mov	r2, r5
 8009d78:	f7ff fd0e 	bl	8009798 <_lv_blend_map>
}
 8009d7c:	b033      	add	sp, #204	; 0xcc
 8009d7e:	ecbd 8b02 	vpop	{d8}
 8009d82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint8_t px_size_byte = alpha_byte ? LV_IMG_PX_SIZE_ALPHA_BYTE : sizeof(lv_color_t);
 8009d86:	9b06      	ldr	r3, [sp, #24]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	bf14      	ite	ne
 8009d8c:	2303      	movne	r3, #3
 8009d8e:	2302      	moveq	r3, #2
 8009d90:	9305      	str	r3, [sp, #20]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8009d92:	f8b8 9004 	ldrh.w	r9, [r8, #4]
        map_buf_tmp += map_w * (draw_area.y1 - (map_area->y1 - disp_area->y1)) * px_size_byte;
 8009d96:	9b04      	ldr	r3, [sp, #16]
 8009d98:	f9b8 0000 	ldrsh.w	r0, [r8]
 8009d9c:	f109 0901 	add.w	r9, r9, #1
 8009da0:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8009da4:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
 8009da8:	eba9 0900 	sub.w	r9, r9, r0
        map_buf_tmp += (draw_area.x1 - (map_area->x1 - disp_area->x1)) * px_size_byte;
 8009dac:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
        map_buf_tmp += map_w * (draw_area.y1 - (map_area->y1 - disp_area->y1)) * px_size_byte;
 8009db0:	f9bd 706e 	ldrsh.w	r7, [sp, #110]	; 0x6e
 8009db4:	1a89      	subs	r1, r1, r2
        map_buf_tmp += (draw_area.x1 - (map_area->x1 - disp_area->x1)) * px_size_byte;
 8009db6:	f9bd c06c 	ldrsh.w	ip, [sp, #108]	; 0x6c
 8009dba:	1ac0      	subs	r0, r0, r3
        map_buf_tmp += map_w * (draw_area.y1 - (map_area->y1 - disp_area->y1)) * px_size_byte;
 8009dbc:	1a79      	subs	r1, r7, r1
 8009dbe:	fa0f f989 	sxth.w	r9, r9
        map_buf_tmp += (draw_area.x1 - (map_area->x1 - disp_area->x1)) * px_size_byte;
 8009dc2:	ebac 0000 	sub.w	r0, ip, r0
        blend_area.x1 = draw_area.x1 + disp_area->x1;
 8009dc6:	fa13 f38c 	uxtah	r3, r3, ip
        blend_area.y1 = disp_area->y1 + draw_area.y1;
 8009dca:	fa12 f287 	uxtah	r2, r2, r7
        map_buf_tmp += (draw_area.x1 - (map_area->x1 - disp_area->x1)) * px_size_byte;
 8009dce:	fb09 0001 	mla	r0, r9, r1, r0
 8009dd2:	9905      	ldr	r1, [sp, #20]
        blend_area.x1 = draw_area.x1 + disp_area->x1;
 8009dd4:	b29b      	uxth	r3, r3
        map_buf_tmp += (draw_area.x1 - (map_area->x1 - disp_area->x1)) * px_size_byte;
 8009dd6:	fb00 5101 	mla	r1, r0, r1, r5
        blend_area.y1 = disp_area->y1 + draw_area.y1;
 8009dda:	b212      	sxth	r2, r2
        blend_area.x1 = draw_area.x1 + disp_area->x1;
 8009ddc:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
        map_buf_tmp += (draw_area.x1 - (map_area->x1 - disp_area->x1)) * px_size_byte;
 8009de0:	9107      	str	r1, [sp, #28]
 8009de2:	f8bd 1070 	ldrh.w	r1, [sp, #112]	; 0x70
        blend_area.y1 = disp_area->y1 + draw_area.y1;
 8009de6:	f8ad 2076 	strh.w	r2, [sp, #118]	; 0x76
 8009dea:	3101      	adds	r1, #1
        blend_area.y2 = blend_area.y1;
 8009dec:	f8ad 207a 	strh.w	r2, [sp, #122]	; 0x7a
 8009df0:	eba1 0c0c 	sub.w	ip, r1, ip
 8009df4:	fa1f f18c 	uxth.w	r1, ip
 8009df8:	fa0f f08c 	sxth.w	r0, ip
        blend_area.x2 = blend_area.x1 + lv_area_get_width(&draw_area) - 1;
 8009dfc:	3901      	subs	r1, #1
 8009dfe:	900d      	str	r0, [sp, #52]	; 0x34
 8009e00:	440b      	add	r3, r1
 8009e02:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8009e06:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
 8009e0a:	3301      	adds	r3, #1
 8009e0c:	1bdf      	subs	r7, r3, r7
 8009e0e:	b23b      	sxth	r3, r7
 8009e10:	9312      	str	r3, [sp, #72]	; 0x48
        bool transform = draw_dsc->angle != 0 || draw_dsc->zoom != LV_IMG_ZOOM_NONE ? true : false;
 8009e12:	6823      	ldr	r3, [r4, #0]
 8009e14:	930e      	str	r3, [sp, #56]	; 0x38
        if(other_mask_cnt == 0 && !transform && !chroma_key && draw_dsc->recolor_opa == LV_OPA_TRANSP && alpha_byte) {
 8009e16:	9b08      	ldr	r3, [sp, #32]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	f040 809e 	bne.w	8009f5a <lv_draw_map+0x27a>
 8009e1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009e20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009e24:	f040 8099 	bne.w	8009f5a <lv_draw_map+0x27a>
 8009e28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	f040 8095 	bne.w	8009f5a <lv_draw_map+0x27a>
 8009e30:	7aa3      	ldrb	r3, [r4, #10]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	f040 8091 	bne.w	8009f5a <lv_draw_map+0x27a>
 8009e38:	9b06      	ldr	r3, [sp, #24]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	f000 808d 	beq.w	8009f5a <lv_draw_map+0x27a>
            uint32_t hor_res = (uint32_t) lv_disp_get_hor_res(disp);
 8009e40:	4630      	mov	r0, r6
 8009e42:	f00c fd37 	bl	80168b4 <lv_disp_get_hor_res>
 8009e46:	4605      	mov	r5, r0
            uint32_t mask_buf_size = lv_area_get_size(&draw_area) > (uint32_t) hor_res ? hor_res : lv_area_get_size(&draw_area);
 8009e48:	a81b      	add	r0, sp, #108	; 0x6c
 8009e4a:	f00c fff6 	bl	8016e3a <lv_area_get_size>
 8009e4e:	42a8      	cmp	r0, r5
 8009e50:	d803      	bhi.n	8009e5a <lv_draw_map+0x17a>
 8009e52:	a81b      	add	r0, sp, #108	; 0x6c
 8009e54:	f00c fff1 	bl	8016e3a <lv_area_get_size>
 8009e58:	4605      	mov	r5, r0
            lv_color_t * map2 = lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
 8009e5a:	0068      	lsls	r0, r5, #1
            for(y = 0; y < draw_area_h; y++) {
 8009e5c:	f04f 0800 	mov.w	r8, #0
            lv_color_t * map2 = lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
 8009e60:	f00d fe1a 	bl	8017a98 <lv_mem_buf_get>
 8009e64:	4606      	mov	r6, r0
            lv_opa_t * mask_buf = lv_mem_buf_get(mask_buf_size);
 8009e66:	4628      	mov	r0, r5
 8009e68:	f00d fe16 	bl	8017a98 <lv_mem_buf_get>
                map_buf_tmp += map_w * px_size_byte;
 8009e6c:	9b05      	ldr	r3, [sp, #20]
 8009e6e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
            lv_opa_t * mask_buf = lv_mem_buf_get(mask_buf_size);
 8009e70:	4607      	mov	r7, r0
                map_buf_tmp += map_w * px_size_byte;
 8009e72:	fb13 f909 	smulbb	r9, r3, r9
        uint32_t px_i = 0;
 8009e76:	4643      	mov	r3, r8
 8009e78:	ea22 7ae2 	bic.w	sl, r2, r2, asr #31
            for(y = 0; y < draw_area_h; y++) {
 8009e7c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009e7e:	4542      	cmp	r2, r8
 8009e80:	dd4d      	ble.n	8009f1e <lv_draw_map+0x23e>
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
 8009e82:	2100      	movs	r1, #0
 8009e84:	eb07 0c03 	add.w	ip, r7, r3
 8009e88:	eb06 0e43 	add.w	lr, r6, r3, lsl #1
                map_px = map_buf_tmp;
 8009e8c:	9a07      	ldr	r2, [sp, #28]
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
 8009e8e:	9104      	str	r1, [sp, #16]
 8009e90:	e013      	b.n	8009eba <lv_draw_map+0x1da>
        uint8_t px_size_byte = alpha_byte ? LV_IMG_PX_SIZE_ALPHA_BYTE : sizeof(lv_color_t);
 8009e92:	2303      	movs	r3, #3
 8009e94:	e77c      	b.n	8009d90 <lv_draw_map+0xb0>
 8009e96:	2302      	movs	r3, #2
 8009e98:	e77a      	b.n	8009d90 <lv_draw_map+0xb0>
                    lv_opa_t px_opa = map_px[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 8009e9a:	7890      	ldrb	r0, [r2, #2]
                    mask_buf[px_i] = px_opa;
 8009e9c:	f80c 0b01 	strb.w	r0, [ip], #1
                    if(px_opa) {
 8009ea0:	b130      	cbz	r0, 8009eb0 <lv_draw_map+0x1d0>
                        map2[px_i].full =  map_px[0] + (map_px[1] << 8);
 8009ea2:	7811      	ldrb	r1, [r2, #0]
 8009ea4:	7850      	ldrb	r0, [r2, #1]
 8009ea6:	eb01 2000 	add.w	r0, r1, r0, lsl #8
 8009eaa:	9904      	ldr	r1, [sp, #16]
 8009eac:	f82e 0011 	strh.w	r0, [lr, r1, lsl #1]
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
 8009eb0:	9904      	ldr	r1, [sp, #16]
 8009eb2:	9805      	ldr	r0, [sp, #20]
 8009eb4:	3101      	adds	r1, #1
 8009eb6:	4402      	add	r2, r0
 8009eb8:	9104      	str	r1, [sp, #16]
 8009eba:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009ebc:	9904      	ldr	r1, [sp, #16]
 8009ebe:	4288      	cmp	r0, r1
 8009ec0:	dceb      	bgt.n	8009e9a <lv_draw_map+0x1ba>
                map_buf_tmp += map_w * px_size_byte;
 8009ec2:	9a07      	ldr	r2, [sp, #28]
 8009ec4:	4453      	add	r3, sl
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8009ec6:	f8bd 106c 	ldrh.w	r1, [sp, #108]	; 0x6c
 8009eca:	444a      	add	r2, r9
 8009ecc:	9207      	str	r2, [sp, #28]
 8009ece:	f8bd 2070 	ldrh.w	r2, [sp, #112]	; 0x70
 8009ed2:	3201      	adds	r2, #1
 8009ed4:	1a52      	subs	r2, r2, r1
                if(px_i + lv_area_get_width(&draw_area) < mask_buf_size) {
 8009ed6:	fa03 f282 	sxtah	r2, r3, r2
 8009eda:	42aa      	cmp	r2, r5
 8009edc:	d207      	bcs.n	8009eee <lv_draw_map+0x20e>
                    blend_area.y2 ++;
 8009ede:	f8bd 207a 	ldrh.w	r2, [sp, #122]	; 0x7a
 8009ee2:	3201      	adds	r2, #1
 8009ee4:	f8ad 207a 	strh.w	r2, [sp, #122]	; 0x7a
            for(y = 0; y < draw_area_h; y++) {
 8009ee8:	f108 0801 	add.w	r8, r8, #1
 8009eec:	e7c6      	b.n	8009e7c <lv_draw_map+0x19c>
                    _lv_blend_map(clip_area, &blend_area, map2, mask_buf, LV_DRAW_MASK_RES_CHANGED, draw_dsc->opa, draw_dsc->blend_mode);
 8009eee:	7b23      	ldrb	r3, [r4, #12]
 8009ef0:	4632      	mov	r2, r6
 8009ef2:	a91d      	add	r1, sp, #116	; 0x74
 8009ef4:	4658      	mov	r0, fp
 8009ef6:	f003 030f 	and.w	r3, r3, #15
 8009efa:	9302      	str	r3, [sp, #8]
 8009efc:	7ae3      	ldrb	r3, [r4, #11]
 8009efe:	9301      	str	r3, [sp, #4]
 8009f00:	2302      	movs	r3, #2
 8009f02:	9300      	str	r3, [sp, #0]
 8009f04:	463b      	mov	r3, r7
 8009f06:	f7ff fc47 	bl	8009798 <_lv_blend_map>
                    blend_area.y1 = blend_area.y2 + 1;
 8009f0a:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
 8009f0e:	3301      	adds	r3, #1
 8009f10:	b21b      	sxth	r3, r3
 8009f12:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
                    blend_area.y2 = blend_area.y1;
 8009f16:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
                    px_i = 0;
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	e7e4      	b.n	8009ee8 <lv_draw_map+0x208>
            if(blend_area.y1 != blend_area.y2) {
 8009f1e:	f9bd 307a 	ldrsh.w	r3, [sp, #122]	; 0x7a
 8009f22:	f9bd 2076 	ldrsh.w	r2, [sp, #118]	; 0x76
 8009f26:	429a      	cmp	r2, r3
 8009f28:	d010      	beq.n	8009f4c <lv_draw_map+0x26c>
                blend_area.y2--;
 8009f2a:	3b01      	subs	r3, #1
                _lv_blend_map(clip_area, &blend_area, map2, mask_buf, LV_DRAW_MASK_RES_CHANGED, draw_dsc->opa, draw_dsc->blend_mode);
 8009f2c:	4632      	mov	r2, r6
 8009f2e:	a91d      	add	r1, sp, #116	; 0x74
 8009f30:	4658      	mov	r0, fp
                blend_area.y2--;
 8009f32:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
                _lv_blend_map(clip_area, &blend_area, map2, mask_buf, LV_DRAW_MASK_RES_CHANGED, draw_dsc->opa, draw_dsc->blend_mode);
 8009f36:	7b23      	ldrb	r3, [r4, #12]
 8009f38:	f003 030f 	and.w	r3, r3, #15
 8009f3c:	9302      	str	r3, [sp, #8]
 8009f3e:	7ae3      	ldrb	r3, [r4, #11]
 8009f40:	9301      	str	r3, [sp, #4]
 8009f42:	2302      	movs	r3, #2
 8009f44:	9300      	str	r3, [sp, #0]
 8009f46:	463b      	mov	r3, r7
 8009f48:	f7ff fc26 	bl	8009798 <_lv_blend_map>
            lv_mem_buf_release(mask_buf);
 8009f4c:	4638      	mov	r0, r7
 8009f4e:	f00d fbff 	bl	8017750 <lv_mem_buf_release>
            lv_mem_buf_release(map2);
 8009f52:	4630      	mov	r0, r6
            lv_mem_buf_release(map2);
 8009f54:	f00d fbfc 	bl	8017750 <lv_mem_buf_release>
}
 8009f58:	e710      	b.n	8009d7c <lv_draw_map+0x9c>
            uint32_t hor_res = (uint32_t) lv_disp_get_hor_res(disp);
 8009f5a:	4630      	mov	r0, r6
 8009f5c:	f00c fcaa 	bl	80168b4 <lv_disp_get_hor_res>
 8009f60:	4682      	mov	sl, r0
            uint32_t mask_buf_size = lv_area_get_size(&draw_area) > hor_res ? hor_res : lv_area_get_size(&draw_area);
 8009f62:	a81b      	add	r0, sp, #108	; 0x6c
 8009f64:	f00c ff69 	bl	8016e3a <lv_area_get_size>
 8009f68:	4550      	cmp	r0, sl
 8009f6a:	d803      	bhi.n	8009f74 <lv_draw_map+0x294>
 8009f6c:	a81b      	add	r0, sp, #108	; 0x6c
 8009f6e:	f00c ff64 	bl	8016e3a <lv_area_get_size>
 8009f72:	4682      	mov	sl, r0
            lv_color_t * map2 = lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
 8009f74:	ea4f 004a 	mov.w	r0, sl, lsl #1
 8009f78:	f00d fd8e 	bl	8017a98 <lv_mem_buf_get>
 8009f7c:	ee08 0a10 	vmov	s16, r0
            lv_opa_t * mask_buf = lv_mem_buf_get(mask_buf_size);
 8009f80:	4650      	mov	r0, sl
 8009f82:	f00d fd89 	bl	8017a98 <lv_mem_buf_get>
            lv_memset_00(&trans_dsc, sizeof(_lv_img_transform_dsc_t));
 8009f86:	214c      	movs	r1, #76	; 0x4c
            lv_opa_t * mask_buf = lv_mem_buf_get(mask_buf_size);
 8009f88:	4606      	mov	r6, r0
            lv_memset_00(&trans_dsc, sizeof(_lv_img_transform_dsc_t));
 8009f8a:	a81f      	add	r0, sp, #124	; 0x7c
 8009f8c:	f00d fdd2 	bl	8017b34 <lv_memset_00>
            if(transform) {
 8009f90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009f92:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009f96:	d023      	beq.n	8009fe0 <lv_draw_map+0x300>
                if(alpha_byte) cf = LV_IMG_CF_TRUE_COLOR_ALPHA;
 8009f98:	9b06      	ldr	r3, [sp, #24]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d17b      	bne.n	800a096 <lv_draw_map+0x3b6>
                else if(chroma_key) cf = LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED;
 8009f9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	bf0c      	ite	eq
 8009fa4:	2204      	moveq	r2, #4
 8009fa6:	2206      	movne	r2, #6
                trans_dsc.cfg.angle = draw_dsc->angle;
 8009fa8:	6823      	ldr	r3, [r4, #0]
                _lv_img_buf_transform_init(&trans_dsc);
 8009faa:	a81f      	add	r0, sp, #124	; 0x7c
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8009fac:	f8b8 1002 	ldrh.w	r1, [r8, #2]
                trans_dsc.cfg.angle = draw_dsc->angle;
 8009fb0:	9322      	str	r3, [sp, #136]	; 0x88
 8009fb2:	f8b8 3006 	ldrh.w	r3, [r8, #6]
                trans_dsc.cfg.src = map_p;
 8009fb6:	951f      	str	r5, [sp, #124]	; 0x7c
 8009fb8:	3301      	adds	r3, #1
                trans_dsc.cfg.src_w = map_w;
 8009fba:	f8ad 9080 	strh.w	r9, [sp, #128]	; 0x80
                trans_dsc.cfg.cf = cf;
 8009fbe:	f88d 208e 	strb.w	r2, [sp, #142]	; 0x8e
 8009fc2:	1a5b      	subs	r3, r3, r1
                trans_dsc.cfg.src_h = lv_area_get_height(map_area);;
 8009fc4:	f8ad 3082 	strh.w	r3, [sp, #130]	; 0x82
                trans_dsc.cfg.pivot_x = draw_dsc->pivot.x;
 8009fc8:	6863      	ldr	r3, [r4, #4]
 8009fca:	9321      	str	r3, [sp, #132]	; 0x84
                trans_dsc.cfg.color = draw_dsc->recolor;
 8009fcc:	8923      	ldrh	r3, [r4, #8]
 8009fce:	f8ad 308c 	strh.w	r3, [sp, #140]	; 0x8c
                trans_dsc.cfg.antialias = draw_dsc->antialias;
 8009fd2:	7d23      	ldrb	r3, [r4, #20]
 8009fd4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009fd8:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
                _lv_img_buf_transform_init(&trans_dsc);
 8009fdc:	f004 fa9a 	bl	800e514 <_lv_img_buf_transform_init>
            lv_opa_t recolor_opa_inv = 255 - draw_dsc->recolor_opa;
 8009fe0:	7aa3      	ldrb	r3, [r4, #10]
 8009fe2:	43da      	mvns	r2, r3
 8009fe4:	b2d2      	uxtb	r2, r2
 8009fe6:	920f      	str	r2, [sp, #60]	; 0x3c
            if(draw_dsc->recolor_opa != 0) {
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d056      	beq.n	800a09a <lv_draw_map+0x3ba>
    out[0] = (uint16_t) LV_COLOR_GET_R(c) * mix;
 8009fec:	7a62      	ldrb	r2, [r4, #9]
 8009fee:	08d2      	lsrs	r2, r2, #3
 8009ff0:	435a      	muls	r2, r3
 8009ff2:	9210      	str	r2, [sp, #64]	; 0x40
    out[1] = (uint16_t) LV_COLOR_GET_G(c) * mix;
 8009ff4:	8922      	ldrh	r2, [r4, #8]
 8009ff6:	f3c2 1245 	ubfx	r2, r2, #5, #6
 8009ffa:	435a      	muls	r2, r3
 8009ffc:	9211      	str	r2, [sp, #68]	; 0x44
    out[2] = (uint16_t) LV_COLOR_GET_B(c) * mix;
 8009ffe:	7a22      	ldrb	r2, [r4, #8]
 800a000:	f002 021f 	and.w	r2, r2, #31
 800a004:	4353      	muls	r3, r2
 800a006:	930c      	str	r3, [sp, #48]	; 0x30
            mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
 800a008:	9b06      	ldr	r3, [sp, #24]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d149      	bne.n	800a0a2 <lv_draw_map+0x3c2>
 800a00e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a010:	2b00      	cmp	r3, #0
 800a012:	d146      	bne.n	800a0a2 <lv_draw_map+0x3c2>
 800a014:	6823      	ldr	r3, [r4, #0]
 800a016:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a01a:	bf14      	ite	ne
 800a01c:	2502      	movne	r5, #2
 800a01e:	2501      	moveq	r5, #1
            if(other_mask_cnt) {
 800a020:	9b08      	ldr	r3, [sp, #32]
 800a022:	b11b      	cbz	r3, 800a02c <lv_draw_map+0x34c>
                lv_memset_ff(mask_buf, mask_buf_size);
 800a024:	4651      	mov	r1, sl
 800a026:	4630      	mov	r0, r6
 800a028:	f00d fdb3 	bl	8017b92 <lv_memset_ff>
            int32_t rot_y = disp_area->y1 + draw_area.y1 - map_area->y1;
 800a02c:	9b04      	ldr	r3, [sp, #16]
 800a02e:	f9bd 206e 	ldrsh.w	r2, [sp, #110]	; 0x6e
 800a032:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800a036:	4413      	add	r3, r2
 800a038:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 800a03c:	1a9b      	subs	r3, r3, r2
 800a03e:	9313      	str	r3, [sp, #76]	; 0x4c
                map_buf_tmp += map_w * px_size_byte;
 800a040:	9b05      	ldr	r3, [sp, #20]
 800a042:	fb13 f309 	smulbb	r3, r3, r9
            for(y = 0; y < draw_area_h; y++) {
 800a046:	f04f 0900 	mov.w	r9, #0
                map_buf_tmp += map_w * px_size_byte;
 800a04a:	9315      	str	r3, [sp, #84]	; 0x54
        uint32_t px_i = 0;
 800a04c:	464f      	mov	r7, r9
 800a04e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a050:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a054:	9317      	str	r3, [sp, #92]	; 0x5c
            for(y = 0; y < draw_area_h; y++) {
 800a056:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a058:	454b      	cmp	r3, r9
 800a05a:	dc24      	bgt.n	800a0a6 <lv_draw_map+0x3c6>
            if(blend_area.y1 != blend_area.y2) {
 800a05c:	f9bd 307a 	ldrsh.w	r3, [sp, #122]	; 0x7a
 800a060:	f9bd 2076 	ldrsh.w	r2, [sp, #118]	; 0x76
 800a064:	429a      	cmp	r2, r3
 800a066:	d010      	beq.n	800a08a <lv_draw_map+0x3aa>
                blend_area.y2--;
 800a068:	3b01      	subs	r3, #1
                _lv_blend_map(clip_area, &blend_area, map2, mask_buf, mask_res, draw_dsc->opa, draw_dsc->blend_mode);
 800a06a:	ee18 2a10 	vmov	r2, s16
 800a06e:	a91d      	add	r1, sp, #116	; 0x74
 800a070:	4658      	mov	r0, fp
                blend_area.y2--;
 800a072:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
                _lv_blend_map(clip_area, &blend_area, map2, mask_buf, mask_res, draw_dsc->opa, draw_dsc->blend_mode);
 800a076:	7b23      	ldrb	r3, [r4, #12]
 800a078:	f003 030f 	and.w	r3, r3, #15
 800a07c:	9302      	str	r3, [sp, #8]
 800a07e:	7ae3      	ldrb	r3, [r4, #11]
 800a080:	e9cd 5300 	strd	r5, r3, [sp]
 800a084:	4633      	mov	r3, r6
 800a086:	f7ff fb87 	bl	8009798 <_lv_blend_map>
            lv_mem_buf_release(mask_buf);
 800a08a:	4630      	mov	r0, r6
 800a08c:	f00d fb60 	bl	8017750 <lv_mem_buf_release>
            lv_mem_buf_release(map2);
 800a090:	ee18 0a10 	vmov	r0, s16
 800a094:	e75e      	b.n	8009f54 <lv_draw_map+0x274>
                if(alpha_byte) cf = LV_IMG_CF_TRUE_COLOR_ALPHA;
 800a096:	2205      	movs	r2, #5
 800a098:	e786      	b.n	8009fa8 <lv_draw_map+0x2c8>
            uint16_t recolor_premult[3] = {0};
 800a09a:	930c      	str	r3, [sp, #48]	; 0x30
 800a09c:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 800a0a0:	e7b2      	b.n	800a008 <lv_draw_map+0x328>
            mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
 800a0a2:	2502      	movs	r5, #2
 800a0a4:	e7bc      	b.n	800a020 <lv_draw_map+0x340>
                int32_t rot_x = disp_area->x1 + draw_area.x1 - map_area->x1;
 800a0a6:	9b04      	ldr	r3, [sp, #16]
 800a0a8:	f9bd 206c 	ldrsh.w	r2, [sp, #108]	; 0x6c
 800a0ac:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800a0b0:	4413      	add	r3, r2
 800a0b2:	f9b8 2000 	ldrsh.w	r2, [r8]
 800a0b6:	1a9b      	subs	r3, r3, r2
 800a0b8:	ee18 2a10 	vmov	r2, s16
 800a0bc:	eb02 0247 	add.w	r2, r2, r7, lsl #1
 800a0c0:	9314      	str	r3, [sp, #80]	; 0x50
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
 800a0c2:	19f3      	adds	r3, r6, r7
 800a0c4:	9216      	str	r2, [sp, #88]	; 0x58
                map_px = map_buf_tmp;
 800a0c6:	9a07      	ldr	r2, [sp, #28]
 800a0c8:	ee08 3a90 	vmov	s17, r3
 800a0cc:	920a      	str	r2, [sp, #40]	; 0x28
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	920b      	str	r2, [sp, #44]	; 0x2c
                        ret = _lv_img_buf_transform(&trans_dsc, rot_x + x, rot_y + y);
 800a0d2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a0d4:	444a      	add	r2, r9
 800a0d6:	b212      	sxth	r2, r2
 800a0d8:	ee07 2a90 	vmov	s15, r2
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
 800a0dc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a0de:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a0e0:	428a      	cmp	r2, r1
 800a0e2:	dc3e      	bgt.n	800a162 <lv_draw_map+0x482>
 800a0e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a0e6:	441f      	add	r7, r3
                if(other_mask_cnt) {
 800a0e8:	9b08      	ldr	r3, [sp, #32]
 800a0ea:	b323      	cbz	r3, 800a136 <lv_draw_map+0x456>
                    mask_res_sub = lv_draw_mask_apply(mask_buf + px_i_start, draw_area.x1 + draw_buf->area.x1, y + draw_area.y1 + draw_buf->area.y1,
 800a0ec:	9804      	ldr	r0, [sp, #16]
 800a0ee:	f8bd 206e 	ldrh.w	r2, [sp, #110]	; 0x6e
 800a0f2:	8a40      	ldrh	r0, [r0, #18]
 800a0f4:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 800a0f8:	4402      	add	r2, r0
 800a0fa:	9804      	ldr	r0, [sp, #16]
 800a0fc:	f8bd 106c 	ldrh.w	r1, [sp, #108]	; 0x6c
 800a100:	3301      	adds	r3, #1
 800a102:	8a00      	ldrh	r0, [r0, #16]
 800a104:	444a      	add	r2, r9
 800a106:	1a5b      	subs	r3, r3, r1
 800a108:	4401      	add	r1, r0
 800a10a:	b212      	sxth	r2, r2
 800a10c:	b21b      	sxth	r3, r3
 800a10e:	ee18 0a90 	vmov	r0, s17
 800a112:	b209      	sxth	r1, r1
 800a114:	f001 ffca 	bl	800c0ac <lv_draw_mask_apply>
                    if(mask_res_sub == LV_DRAW_MASK_RES_TRANSP) {
 800a118:	2800      	cmp	r0, #0
 800a11a:	f040 808d 	bne.w	800a238 <lv_draw_map+0x558>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800a11e:	f8bd 1070 	ldrh.w	r1, [sp, #112]	; 0x70
                        mask_res = LV_DRAW_MASK_RES_CHANGED;
 800a122:	2502      	movs	r5, #2
 800a124:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
                        lv_memset_00(mask_buf + px_i_start, lv_area_get_width(&draw_area));
 800a128:	ee18 0a90 	vmov	r0, s17
 800a12c:	3101      	adds	r1, #1
 800a12e:	1ac9      	subs	r1, r1, r3
 800a130:	b209      	sxth	r1, r1
 800a132:	f00d fcff 	bl	8017b34 <lv_memset_00>
                map_buf_tmp += map_w * px_size_byte;
 800a136:	9b07      	ldr	r3, [sp, #28]
 800a138:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a13a:	4413      	add	r3, r2
 800a13c:	f8bd 206c 	ldrh.w	r2, [sp, #108]	; 0x6c
 800a140:	9307      	str	r3, [sp, #28]
 800a142:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 800a146:	3301      	adds	r3, #1
 800a148:	1a9b      	subs	r3, r3, r2
                if(px_i + lv_area_get_width(&draw_area) < mask_buf_size) {
 800a14a:	fa07 f383 	sxtah	r3, r7, r3
 800a14e:	4553      	cmp	r3, sl
 800a150:	d276      	bcs.n	800a240 <lv_draw_map+0x560>
                    blend_area.y2 ++;
 800a152:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
 800a156:	3301      	adds	r3, #1
 800a158:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
            for(y = 0; y < draw_area_h; y++) {
 800a15c:	f109 0901 	add.w	r9, r9, #1
 800a160:	e779      	b.n	800a056 <lv_draw_map+0x376>
                    if(transform) {
 800a162:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a164:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 800a168:	d04d      	beq.n	800a206 <lv_draw_map+0x526>
                        ret = _lv_img_buf_transform(&trans_dsc, rot_x + x, rot_y + y);
 800a16a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a16c:	a81f      	add	r0, sp, #124	; 0x7c
 800a16e:	9319      	str	r3, [sp, #100]	; 0x64
 800a170:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a172:	edcd 7a18 	vstr	s15, [sp, #96]	; 0x60
 800a176:	1899      	adds	r1, r3, r2
 800a178:	ee17 2a90 	vmov	r2, s15
 800a17c:	b209      	sxth	r1, r1
 800a17e:	f004 fc7e 	bl	800ea7e <_lv_img_buf_transform>
                        if(ret == false) {
 800a182:	eddd 7a18 	vldr	s15, [sp, #96]	; 0x60
 800a186:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a188:	b948      	cbnz	r0, 800a19e <lv_draw_map+0x4be>
                            mask_buf[px_i] = LV_OPA_TRANSP;
 800a18a:	7018      	strb	r0, [r3, #0]
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
 800a18c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a18e:	3301      	adds	r3, #1
 800a190:	9905      	ldr	r1, [sp, #20]
 800a192:	3201      	adds	r2, #1
 800a194:	920b      	str	r2, [sp, #44]	; 0x2c
 800a196:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a198:	440a      	add	r2, r1
 800a19a:	920a      	str	r2, [sp, #40]	; 0x28
 800a19c:	e79e      	b.n	800a0dc <lv_draw_map+0x3fc>
                            mask_buf[px_i] = trans_dsc.res.opa;
 800a19e:	f89d 1092 	ldrb.w	r1, [sp, #146]	; 0x92
 800a1a2:	7019      	strb	r1, [r3, #0]
                            c.full = trans_dsc.res.color.full;
 800a1a4:	f8bd 1090 	ldrh.w	r1, [sp, #144]	; 0x90
                    if(draw_dsc->recolor_opa != 0) {
 800a1a8:	7aa0      	ldrb	r0, [r4, #10]
 800a1aa:	b338      	cbz	r0, 800a1fc <lv_draw_map+0x51c>
    LV_COLOR_SET_G(ret, LV_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800a1ac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a1ae:	f3c1 1045 	ubfx	r0, r1, #5, #6
 800a1b2:	4694      	mov	ip, r2
 800a1b4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a1b6:	fb00 200c 	mla	r0, r0, ip, r2
 800a1ba:	f248 0281 	movw	r2, #32897	; 0x8081
 800a1be:	3080      	adds	r0, #128	; 0x80
 800a1c0:	4350      	muls	r0, r2
    LV_COLOR_SET_B(ret, LV_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800a1c2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a1c4:	f3c0 5cc5 	ubfx	ip, r0, #23, #6
 800a1c8:	4696      	mov	lr, r2
 800a1ca:	f001 001f 	and.w	r0, r1, #31
 800a1ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    LV_COLOR_SET_R(ret, LV_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800a1d0:	0ac9      	lsrs	r1, r1, #11
    LV_COLOR_SET_B(ret, LV_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800a1d2:	fb00 200e 	mla	r0, r0, lr, r2
 800a1d6:	f248 0281 	movw	r2, #32897	; 0x8081
 800a1da:	3080      	adds	r0, #128	; 0x80
 800a1dc:	4350      	muls	r0, r2
    LV_COLOR_SET_R(ret, LV_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800a1de:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a1e0:	fb01 210e 	mla	r1, r1, lr, r2
 800a1e4:	f248 0281 	movw	r2, #32897	; 0x8081
 800a1e8:	f3c0 50c4 	ubfx	r0, r0, #23, #5
 800a1ec:	3180      	adds	r1, #128	; 0x80
 800a1ee:	ea40 104c 	orr.w	r0, r0, ip, lsl #5
 800a1f2:	4351      	muls	r1, r2
 800a1f4:	0dc9      	lsrs	r1, r1, #23
 800a1f6:	ea40 21c1 	orr.w	r1, r0, r1, lsl #11
 800a1fa:	b289      	uxth	r1, r1
                    map2[px_i].full = c.full;
 800a1fc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a1fe:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a200:	f822 1010 	strh.w	r1, [r2, r0, lsl #1]
 800a204:	e7c2      	b.n	800a18c <lv_draw_map+0x4ac>
                        if(alpha_byte) {
 800a206:	9a06      	ldr	r2, [sp, #24]
 800a208:	b19a      	cbz	r2, 800a232 <lv_draw_map+0x552>
                            lv_opa_t px_opa = map_px[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 800a20a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a20c:	7891      	ldrb	r1, [r2, #2]
                            mask_buf[px_i] = px_opa;
 800a20e:	7019      	strb	r1, [r3, #0]
                            if(px_opa == 0) {
 800a210:	2900      	cmp	r1, #0
 800a212:	d0bb      	beq.n	800a18c <lv_draw_map+0x4ac>
                        c.full =  map_px[0] + (map_px[1] << 8);
 800a214:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a216:	7850      	ldrb	r0, [r2, #1]
 800a218:	7811      	ldrb	r1, [r2, #0]
                        if(chroma_key) {
 800a21a:	9a09      	ldr	r2, [sp, #36]	; 0x24
                        c.full =  map_px[0] + (map_px[1] << 8);
 800a21c:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 800a220:	b289      	uxth	r1, r1
                        if(chroma_key) {
 800a222:	2a00      	cmp	r2, #0
 800a224:	d0c0      	beq.n	800a1a8 <lv_draw_map+0x4c8>
                            if(c.full == chroma_keyed_color.full) {
 800a226:	f5b1 6ffc 	cmp.w	r1, #2016	; 0x7e0
 800a22a:	d1bd      	bne.n	800a1a8 <lv_draw_map+0x4c8>
                                mask_buf[px_i] = LV_OPA_TRANSP;
 800a22c:	2100      	movs	r1, #0
 800a22e:	7019      	strb	r1, [r3, #0]
                                continue;
 800a230:	e7ac      	b.n	800a18c <lv_draw_map+0x4ac>
                            mask_buf[px_i] = 0xFF;
 800a232:	21ff      	movs	r1, #255	; 0xff
 800a234:	7019      	strb	r1, [r3, #0]
 800a236:	e7ed      	b.n	800a214 <lv_draw_map+0x534>
                        mask_res = LV_DRAW_MASK_RES_CHANGED;
 800a238:	2802      	cmp	r0, #2
 800a23a:	bf08      	it	eq
 800a23c:	2502      	moveq	r5, #2
 800a23e:	e77a      	b.n	800a136 <lv_draw_map+0x456>
                    _lv_blend_map(clip_area, &blend_area, map2, mask_buf, mask_res, draw_dsc->opa, draw_dsc->blend_mode);
 800a240:	7b23      	ldrb	r3, [r4, #12]
 800a242:	ee18 2a10 	vmov	r2, s16
 800a246:	a91d      	add	r1, sp, #116	; 0x74
 800a248:	4658      	mov	r0, fp
 800a24a:	f003 030f 	and.w	r3, r3, #15
 800a24e:	9302      	str	r3, [sp, #8]
 800a250:	7ae3      	ldrb	r3, [r4, #11]
 800a252:	e9cd 5300 	strd	r5, r3, [sp]
 800a256:	4633      	mov	r3, r6
 800a258:	f7ff fa9e 	bl	8009798 <_lv_blend_map>
                    blend_area.y1 = blend_area.y2 + 1;
 800a25c:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
 800a260:	3301      	adds	r3, #1
 800a262:	b21b      	sxth	r3, r3
 800a264:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
                    blend_area.y2 = blend_area.y1;
 800a268:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
                    mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
 800a26c:	9b06      	ldr	r3, [sp, #24]
 800a26e:	b97b      	cbnz	r3, 800a290 <lv_draw_map+0x5b0>
 800a270:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a272:	b96b      	cbnz	r3, 800a290 <lv_draw_map+0x5b0>
 800a274:	6823      	ldr	r3, [r4, #0]
 800a276:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a27a:	bf14      	ite	ne
 800a27c:	2502      	movne	r5, #2
 800a27e:	2501      	moveq	r5, #1
                    if(other_mask_cnt) {
 800a280:	9b08      	ldr	r3, [sp, #32]
 800a282:	b13b      	cbz	r3, 800a294 <lv_draw_map+0x5b4>
                        lv_memset_ff(mask_buf, mask_buf_size);
 800a284:	4651      	mov	r1, sl
 800a286:	4630      	mov	r0, r6
                    px_i = 0;
 800a288:	2700      	movs	r7, #0
                        lv_memset_ff(mask_buf, mask_buf_size);
 800a28a:	f00d fc82 	bl	8017b92 <lv_memset_ff>
 800a28e:	e765      	b.n	800a15c <lv_draw_map+0x47c>
                    mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
 800a290:	2502      	movs	r5, #2
 800a292:	e7f5      	b.n	800a280 <lv_draw_map+0x5a0>
                    px_i = 0;
 800a294:	9f08      	ldr	r7, [sp, #32]
 800a296:	e761      	b.n	800a15c <lv_draw_map+0x47c>

0800a298 <lv_draw_img_dsc_init>:
{
 800a298:	b510      	push	{r4, lr}
    lv_memset_00(dsc, sizeof(lv_draw_img_dsc_t));
 800a29a:	2118      	movs	r1, #24
{
 800a29c:	4604      	mov	r4, r0
    lv_memset_00(dsc, sizeof(lv_draw_img_dsc_t));
 800a29e:	f00d fc49 	bl	8017b34 <lv_memset_00>
    dsc->recolor = lv_color_black();
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	8123      	strh	r3, [r4, #8]
    dsc->opa = LV_OPA_COVER;
 800a2a6:	23ff      	movs	r3, #255	; 0xff
 800a2a8:	72e3      	strb	r3, [r4, #11]
    dsc->zoom = LV_IMG_ZOOM_NONE;
 800a2aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a2ae:	8063      	strh	r3, [r4, #2]
    dsc->antialias = LV_COLOR_DEPTH > 8 ? 1 : 0;
 800a2b0:	7d23      	ldrb	r3, [r4, #20]
 800a2b2:	f043 0301 	orr.w	r3, r3, #1
 800a2b6:	7523      	strb	r3, [r4, #20]
}
 800a2b8:	bd10      	pop	{r4, pc}
	...

0800a2bc <lv_img_cf_get_px_size>:
    switch(cf) {
 800a2bc:	3804      	subs	r0, #4
 800a2be:	b2c0      	uxtb	r0, r0
 800a2c0:	280a      	cmp	r0, #10
 800a2c2:	bf9a      	itte	ls
 800a2c4:	4b01      	ldrls	r3, [pc, #4]	; (800a2cc <lv_img_cf_get_px_size+0x10>)
 800a2c6:	5c18      	ldrbls	r0, [r3, r0]
{
 800a2c8:	2000      	movhi	r0, #0
}
 800a2ca:	4770      	bx	lr
 800a2cc:	08024fcc 	.word	0x08024fcc

0800a2d0 <lv_img_cf_is_chroma_keyed>:
    switch(cf) {
 800a2d0:	2803      	cmp	r0, #3
 800a2d2:	d005      	beq.n	800a2e0 <lv_img_cf_is_chroma_keyed+0x10>
 800a2d4:	3806      	subs	r0, #6
 800a2d6:	2804      	cmp	r0, #4
 800a2d8:	bf8c      	ite	hi
 800a2da:	2000      	movhi	r0, #0
 800a2dc:	2001      	movls	r0, #1
 800a2de:	4770      	bx	lr
            is_chroma_keyed = true;
 800a2e0:	2001      	movs	r0, #1
}
 800a2e2:	4770      	bx	lr

0800a2e4 <lv_img_cf_has_alpha>:
    switch(cf) {
 800a2e4:	280e      	cmp	r0, #14
 800a2e6:	d809      	bhi.n	800a2fc <lv_img_cf_has_alpha+0x18>
 800a2e8:	2301      	movs	r3, #1
 800a2ea:	fa03 f000 	lsl.w	r0, r3, r0
 800a2ee:	f647 73a4 	movw	r3, #32676	; 0x7fa4
 800a2f2:	4218      	tst	r0, r3
 800a2f4:	bf14      	ite	ne
 800a2f6:	2001      	movne	r0, #1
 800a2f8:	2000      	moveq	r0, #0
 800a2fa:	4770      	bx	lr
{
 800a2fc:	2000      	movs	r0, #0
}
 800a2fe:	4770      	bx	lr

0800a300 <lv_draw_img>:
{
 800a300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a304:	4604      	mov	r4, r0
 800a306:	4688      	mov	r8, r1
 800a308:	461e      	mov	r6, r3
    if(src == NULL) {
 800a30a:	4610      	mov	r0, r2
{
 800a30c:	ed2d 8b02 	vpush	{d8}
 800a310:	b08d      	sub	sp, #52	; 0x34
    if(src == NULL) {
 800a312:	b94a      	cbnz	r2, 800a328 <lv_draw_img+0x28>
        show_error(coords, mask, "No\ndata");
 800a314:	4a70      	ldr	r2, [pc, #448]	; (800a4d8 <lv_draw_img+0x1d8>)
 800a316:	4641      	mov	r1, r8
 800a318:	4620      	mov	r0, r4
 800a31a:	f7ff fcc3 	bl	8009ca4 <show_error>
}
 800a31e:	b00d      	add	sp, #52	; 0x34
 800a320:	ecbd 8b02 	vpop	{d8}
 800a324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(dsc->opa <= LV_OPA_MIN) return;
 800a328:	7adb      	ldrb	r3, [r3, #11]
 800a32a:	2b02      	cmp	r3, #2
 800a32c:	d9f7      	bls.n	800a31e <lv_draw_img+0x1e>
    _lv_img_cache_entry_t * cdsc = _lv_img_cache_open(src, draw_dsc->recolor, draw_dsc->frame_id);
 800a32e:	6932      	ldr	r2, [r6, #16]
 800a330:	8931      	ldrh	r1, [r6, #8]
 800a332:	f004 fc43 	bl	800ebbc <_lv_img_cache_open>
    if(cdsc == NULL) return LV_RES_INV;
 800a336:	4605      	mov	r5, r0
 800a338:	2800      	cmp	r0, #0
 800a33a:	d0eb      	beq.n	800a314 <lv_draw_img+0x14>
    if(cdsc->dec_dsc.error_msg != NULL) {
 800a33c:	6a02      	ldr	r2, [r0, #32]
 800a33e:	b13a      	cbz	r2, 800a350 <lv_draw_img+0x50>
        show_error(coords, clip_area, cdsc->dec_dsc.error_msg);
 800a340:	4641      	mov	r1, r8
 800a342:	4620      	mov	r0, r4
 800a344:	f7ff fcae 	bl	8009ca4 <show_error>

static void draw_cleanup(_lv_img_cache_entry_t * cache)
{
    /*Automatically close images with no caching*/
#if LV_IMG_CACHE_DEF_SIZE == 0
    lv_img_decoder_close(&cache->dec_dsc);
 800a348:	4628      	mov	r0, r5
 800a34a:	f004 ffb1 	bl	800f2b0 <lv_img_decoder_close>
    if(res == LV_RES_INV) {
 800a34e:	e7e6      	b.n	800a31e <lv_draw_img+0x1e>
    bool chroma_keyed = lv_img_cf_is_chroma_keyed(cdsc->dec_dsc.header.cf);
 800a350:	7d03      	ldrb	r3, [r0, #20]
 800a352:	f003 031f 	and.w	r3, r3, #31
 800a356:	4618      	mov	r0, r3
 800a358:	f7ff ffba 	bl	800a2d0 <lv_img_cf_is_chroma_keyed>
 800a35c:	9004      	str	r0, [sp, #16]
    bool alpha_byte   = lv_img_cf_has_alpha(cdsc->dec_dsc.header.cf);
 800a35e:	4618      	mov	r0, r3
 800a360:	f7ff ffc0 	bl	800a2e4 <lv_img_cf_has_alpha>
    else if(cdsc->dec_dsc.img_data) {
 800a364:	69ab      	ldr	r3, [r5, #24]
    bool alpha_byte   = lv_img_cf_has_alpha(cdsc->dec_dsc.header.cf);
 800a366:	9005      	str	r0, [sp, #20]
    else if(cdsc->dec_dsc.img_data) {
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d04b      	beq.n	800a404 <lv_draw_img+0x104>
        if(draw_dsc->angle || draw_dsc->zoom != LV_IMG_ZOOM_NONE) {
 800a36c:	6833      	ldr	r3, [r6, #0]
    dest->x1 = src->x1;
 800a36e:	f9b4 1000 	ldrsh.w	r1, [r4]
    dest->y1 = src->y1;
 800a372:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 800a376:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    dest->x2 = src->x2;
 800a37a:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
    dest->y2 = src->y2;
 800a37e:	f9b4 7006 	ldrsh.w	r7, [r4, #6]
    dest->x1 = src->x1;
 800a382:	f8ad 1020 	strh.w	r1, [sp, #32]
    dest->y1 = src->y1;
 800a386:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
    dest->x2 = src->x2;
 800a38a:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
    dest->y2 = src->y2;
 800a38e:	f8ad 7026 	strh.w	r7, [sp, #38]	; 0x26
 800a392:	d025      	beq.n	800a3e0 <lv_draw_img+0xe0>
            _lv_img_buf_get_transformed_area(&map_area_rot, w, h, draw_dsc->angle, draw_dsc->zoom, &draw_dsc->pivot);
 800a394:	46b4      	mov	ip, r6
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800a396:	3001      	adds	r0, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800a398:	3701      	adds	r7, #1
 800a39a:	f93c 3b04 	ldrsh.w	r3, [ip], #4
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800a39e:	1a41      	subs	r1, r0, r1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800a3a0:	1aba      	subs	r2, r7, r2
 800a3a2:	8870      	ldrh	r0, [r6, #2]
 800a3a4:	b209      	sxth	r1, r1
 800a3a6:	f8cd c004 	str.w	ip, [sp, #4]
 800a3aa:	b212      	sxth	r2, r2
 800a3ac:	9000      	str	r0, [sp, #0]
 800a3ae:	a808      	add	r0, sp, #32
 800a3b0:	f004 f92c 	bl	800e60c <_lv_img_buf_get_transformed_area>
            map_area_rot.x1 += coords->x1;
 800a3b4:	8822      	ldrh	r2, [r4, #0]
 800a3b6:	f8bd 3020 	ldrh.w	r3, [sp, #32]
            map_area_rot.y1 += coords->y1;
 800a3ba:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
            map_area_rot.x1 += coords->x1;
 800a3be:	4413      	add	r3, r2
 800a3c0:	f8ad 3020 	strh.w	r3, [sp, #32]
            map_area_rot.y1 += coords->y1;
 800a3c4:	8863      	ldrh	r3, [r4, #2]
 800a3c6:	4419      	add	r1, r3
 800a3c8:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
            map_area_rot.x2 += coords->x1;
 800a3cc:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 800a3d0:	440a      	add	r2, r1
 800a3d2:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
            map_area_rot.y2 += coords->y1;
 800a3d6:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
 800a3da:	4413      	add	r3, r2
 800a3dc:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
        union_ok = _lv_area_intersect(&mask_com, clip_area, &map_area_rot);
 800a3e0:	aa08      	add	r2, sp, #32
 800a3e2:	4641      	mov	r1, r8
 800a3e4:	a80a      	add	r0, sp, #40	; 0x28
 800a3e6:	f00c fd56 	bl	8016e96 <_lv_area_intersect>
        if(union_ok == false) {
 800a3ea:	2800      	cmp	r0, #0
 800a3ec:	d0ac      	beq.n	800a348 <lv_draw_img+0x48>
        lv_draw_map(coords, &mask_com, cdsc->dec_dsc.img_data, draw_dsc, chroma_keyed, alpha_byte);
 800a3ee:	9b05      	ldr	r3, [sp, #20]
 800a3f0:	a90a      	add	r1, sp, #40	; 0x28
 800a3f2:	4620      	mov	r0, r4
 800a3f4:	9301      	str	r3, [sp, #4]
 800a3f6:	9b04      	ldr	r3, [sp, #16]
 800a3f8:	9300      	str	r3, [sp, #0]
 800a3fa:	4633      	mov	r3, r6
 800a3fc:	69aa      	ldr	r2, [r5, #24]
 800a3fe:	f7ff fc6f 	bl	8009ce0 <lv_draw_map>
 800a402:	e7a1      	b.n	800a348 <lv_draw_img+0x48>
        union_ok = _lv_area_intersect(&mask_com, clip_area, coords);
 800a404:	4622      	mov	r2, r4
 800a406:	4641      	mov	r1, r8
 800a408:	a806      	add	r0, sp, #24
 800a40a:	f00c fd44 	bl	8016e96 <_lv_area_intersect>
        if(union_ok == false) {
 800a40e:	2800      	cmp	r0, #0
 800a410:	d09a      	beq.n	800a348 <lv_draw_img+0x48>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800a412:	f8bd 701c 	ldrh.w	r7, [sp, #28]
        lv_area_set_height(&line, 1);
 800a416:	f10d 0a20 	add.w	sl, sp, #32
 800a41a:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 800a41e:	3701      	adds	r7, #1
 800a420:	1aff      	subs	r7, r7, r3
 800a422:	b23f      	sxth	r7, r7
        uint8_t  * buf = lv_mem_buf_get(lv_area_get_width(&mask_com) *
 800a424:	eb07 0047 	add.w	r0, r7, r7, lsl #1
 800a428:	f00d fb36 	bl	8017a98 <lv_mem_buf_get>
    dest->x1 = src->x1;
 800a42c:	9b06      	ldr	r3, [sp, #24]
        lv_area_set_height(&line, 1);
 800a42e:	2101      	movs	r1, #1
        uint8_t  * buf = lv_mem_buf_get(lv_area_get_width(&mask_com) *
 800a430:	4681      	mov	r9, r0
 800a432:	9308      	str	r3, [sp, #32]
        lv_area_set_height(&line, 1);
 800a434:	4650      	mov	r0, sl
    dest->x2 = src->x2;
 800a436:	9b07      	ldr	r3, [sp, #28]
 800a438:	9309      	str	r3, [sp, #36]	; 0x24
 800a43a:	f00c fcf9 	bl	8016e30 <lv_area_set_height>
        int32_t x = mask_com.x1 - coords->x1;
 800a43e:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 800a442:	f9b4 2000 	ldrsh.w	r2, [r4]
        int32_t y = mask_com.y1 - coords->y1;
 800a446:	f9bd b01a 	ldrsh.w	fp, [sp, #26]
            read_res = lv_img_decoder_read_line(&cdsc->dec_dsc, x, y, width, buf);
 800a44a:	1a9b      	subs	r3, r3, r2
        int32_t y = mask_com.y1 - coords->y1;
 800a44c:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
            read_res = lv_img_decoder_read_line(&cdsc->dec_dsc, x, y, width, buf);
 800a450:	b21b      	sxth	r3, r3
        int32_t y = mask_com.y1 - coords->y1;
 800a452:	ebab 0101 	sub.w	r1, fp, r1
            read_res = lv_img_decoder_read_line(&cdsc->dec_dsc, x, y, width, buf);
 800a456:	ee08 3a10 	vmov	s16, r3
        int32_t y = mask_com.y1 - coords->y1;
 800a45a:	9103      	str	r1, [sp, #12]
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
 800a45c:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 800a460:	459b      	cmp	fp, r3
 800a462:	dd03      	ble.n	800a46c <lv_draw_img+0x16c>
        lv_mem_buf_release(buf);
 800a464:	4648      	mov	r0, r9
 800a466:	f00d f973 	bl	8017750 <lv_mem_buf_release>
 800a46a:	e76d      	b.n	800a348 <lv_draw_img+0x48>
            union_ok = _lv_area_intersect(&mask_line, clip_area, &line);
 800a46c:	4652      	mov	r2, sl
 800a46e:	4641      	mov	r1, r8
 800a470:	a80a      	add	r0, sp, #40	; 0x28
 800a472:	f00c fd10 	bl	8016e96 <_lv_area_intersect>
            if(union_ok == false) continue;
 800a476:	b360      	cbz	r0, 800a4d2 <lv_draw_img+0x1d2>
            read_res = lv_img_decoder_read_line(&cdsc->dec_dsc, x, y, width, buf);
 800a478:	463b      	mov	r3, r7
 800a47a:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 800a47e:	ee18 1a10 	vmov	r1, s16
 800a482:	4628      	mov	r0, r5
 800a484:	f8cd 9000 	str.w	r9, [sp]
 800a488:	f004 ff02 	bl	800f290 <lv_img_decoder_read_line>
            if(read_res != LV_RES_OK) {
 800a48c:	2801      	cmp	r0, #1
 800a48e:	d009      	beq.n	800a4a4 <lv_draw_img+0x1a4>
                lv_img_decoder_close(&cdsc->dec_dsc);
 800a490:	4628      	mov	r0, r5
 800a492:	f004 ff0d 	bl	800f2b0 <lv_img_decoder_close>
                lv_mem_buf_release(buf);
 800a496:	4648      	mov	r0, r9
 800a498:	f00d f95a 	bl	8017750 <lv_mem_buf_release>
    lv_img_decoder_close(&cache->dec_dsc);
 800a49c:	4628      	mov	r0, r5
 800a49e:	f004 ff07 	bl	800f2b0 <lv_img_decoder_close>
    if(res == LV_RES_INV) {
 800a4a2:	e737      	b.n	800a314 <lv_draw_img+0x14>
            lv_draw_map(&line, &mask_line, buf, draw_dsc, chroma_keyed, alpha_byte);
 800a4a4:	9b05      	ldr	r3, [sp, #20]
 800a4a6:	464a      	mov	r2, r9
 800a4a8:	a90a      	add	r1, sp, #40	; 0x28
 800a4aa:	4650      	mov	r0, sl
 800a4ac:	9301      	str	r3, [sp, #4]
 800a4ae:	9b04      	ldr	r3, [sp, #16]
 800a4b0:	9300      	str	r3, [sp, #0]
 800a4b2:	4633      	mov	r3, r6
 800a4b4:	f7ff fc14 	bl	8009ce0 <lv_draw_map>
            line.y1++;
 800a4b8:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 800a4bc:	3301      	adds	r3, #1
 800a4be:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
            line.y2++;
 800a4c2:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 800a4c6:	3301      	adds	r3, #1
 800a4c8:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
            y++;
 800a4cc:	9b03      	ldr	r3, [sp, #12]
 800a4ce:	3301      	adds	r3, #1
 800a4d0:	9303      	str	r3, [sp, #12]
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
 800a4d2:	f10b 0b01 	add.w	fp, fp, #1
 800a4d6:	e7c1      	b.n	800a45c <lv_draw_img+0x15c>
 800a4d8:	08024fc4 	.word	0x08024fc4

0800a4dc <lv_img_src_get_type>:
    if(src == NULL) return img_src_type;
 800a4dc:	b150      	cbz	r0, 800a4f4 <lv_img_src_get_type+0x18>
    if(u8_p[0] >= 0x20 && u8_p[0] <= 0x7F) {
 800a4de:	7803      	ldrb	r3, [r0, #0]
 800a4e0:	f1a3 0220 	sub.w	r2, r3, #32
 800a4e4:	2a5f      	cmp	r2, #95	; 0x5f
 800a4e6:	d907      	bls.n	800a4f8 <lv_img_src_get_type+0x1c>
    else if(u8_p[0] >= 0x80) {
 800a4e8:	f013 0f80 	tst.w	r3, #128	; 0x80
        img_src_type = LV_IMG_SRC_VARIABLE; /*`lv_img_dsc_t` is draw to the first byte < 0x20*/
 800a4ec:	bf14      	ite	ne
 800a4ee:	2002      	movne	r0, #2
 800a4f0:	2000      	moveq	r0, #0
 800a4f2:	4770      	bx	lr
    if(src == NULL) return img_src_type;
 800a4f4:	2003      	movs	r0, #3
 800a4f6:	4770      	bx	lr
        img_src_type = LV_IMG_SRC_FILE; /*If it's an ASCII character then it's file name*/
 800a4f8:	2001      	movs	r0, #1
}
 800a4fa:	4770      	bx	lr

0800a4fc <hex_char_to_num>:
 */
static uint8_t hex_char_to_num(char hex)
{
    uint8_t result = 0;

    if(hex >= '0' && hex <= '9') {
 800a4fc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a500:	b2db      	uxtb	r3, r3
 800a502:	2b09      	cmp	r3, #9
 800a504:	d90a      	bls.n	800a51c <hex_char_to_num+0x20>
        result = hex - '0';
    }
    else {
        if(hex >= 'a') hex -= 'a' - 'A'; /*Convert to upper case*/
 800a506:	2860      	cmp	r0, #96	; 0x60
 800a508:	bf84      	itt	hi
 800a50a:	3820      	subhi	r0, #32
 800a50c:	b2c0      	uxtbhi	r0, r0

        switch(hex) {
 800a50e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a512:	2b05      	cmp	r3, #5
 800a514:	bf96      	itet	ls
 800a516:	3837      	subls	r0, #55	; 0x37
{
 800a518:	2300      	movhi	r3, #0
 800a51a:	b2c3      	uxtbls	r3, r0
                break;
        }
    }

    return result;
}
 800a51c:	4618      	mov	r0, r3
 800a51e:	4770      	bx	lr

0800a520 <lv_draw_label_dsc_init>:
{
 800a520:	b538      	push	{r3, r4, r5, lr}
    lv_memset_00(dsc, sizeof(lv_draw_label_dsc_t));
 800a522:	2120      	movs	r1, #32
{
 800a524:	4604      	mov	r4, r0
    lv_memset_00(dsc, sizeof(lv_draw_label_dsc_t));
 800a526:	f00d fb05 	bl	8017b34 <lv_memset_00>
    dsc->opa = LV_OPA_COVER;
 800a52a:	23ff      	movs	r3, #255	; 0xff
    dsc->color = lv_color_black();
 800a52c:	2500      	movs	r5, #0
    dsc->sel_bg_color = lv_palette_main(LV_PALETTE_BLUE);
 800a52e:	2005      	movs	r0, #5
    dsc->opa = LV_OPA_COVER;
 800a530:	76a3      	strb	r3, [r4, #26]
    dsc->font = LV_FONT_DEFAULT;
 800a532:	4b06      	ldr	r3, [pc, #24]	; (800a54c <lv_draw_label_dsc_init+0x2c>)
    dsc->color = lv_color_black();
 800a534:	60e5      	str	r5, [r4, #12]
    dsc->font = LV_FONT_DEFAULT;
 800a536:	6023      	str	r3, [r4, #0]
    dsc->sel_start = LV_DRAW_LABEL_NO_TXT_SEL;
 800a538:	f64f 73ff 	movw	r3, #65535	; 0xffff
    dsc->sel_end = LV_DRAW_LABEL_NO_TXT_SEL;
 800a53c:	e9c4 3301 	strd	r3, r3, [r4, #4]
    dsc->sel_bg_color = lv_palette_main(LV_PALETTE_BLUE);
 800a540:	f00c feac 	bl	801729c <lv_palette_main>
    dsc->bidi_dir = LV_BASE_DIR_LTR;
 800a544:	76e5      	strb	r5, [r4, #27]
    dsc->sel_bg_color = lv_palette_main(LV_PALETTE_BLUE);
 800a546:	8220      	strh	r0, [r4, #16]
}
 800a548:	bd38      	pop	{r3, r4, r5, pc}
 800a54a:	bf00      	nop
 800a54c:	08028bc8 	.word	0x08028bc8

0800a550 <lv_draw_letter>:
{
 800a550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a554:	b099      	sub	sp, #100	; 0x64
 800a556:	461f      	mov	r7, r3
 800a558:	4680      	mov	r8, r0
 800a55a:	460d      	mov	r5, r1
 800a55c:	f89d 408c 	ldrb.w	r4, [sp, #140]	; 0x8c
 800a560:	4616      	mov	r6, r2
 800a562:	f89d 3090 	ldrb.w	r3, [sp, #144]	; 0x90
    if(opa < LV_OPA_MIN) return;
 800a566:	2c01      	cmp	r4, #1
{
 800a568:	930d      	str	r3, [sp, #52]	; 0x34
    if(opa < LV_OPA_MIN) return;
 800a56a:	f240 8100 	bls.w	800a76e <lv_draw_letter+0x21e>
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 800a56e:	2cfe      	cmp	r4, #254	; 0xfe
 800a570:	bf28      	it	cs
 800a572:	24ff      	movcs	r4, #255	; 0xff
    if(font_p == NULL) {
 800a574:	2a00      	cmp	r2, #0
 800a576:	f000 80fa 	beq.w	800a76e <lv_draw_letter+0x21e>
    bool g_ret = lv_font_get_glyph_dsc(font_p, &g, letter, '\0');
 800a57a:	2300      	movs	r3, #0
 800a57c:	463a      	mov	r2, r7
 800a57e:	a915      	add	r1, sp, #84	; 0x54
 800a580:	4630      	mov	r0, r6
 800a582:	f00b ff99 	bl	80164b8 <lv_font_get_glyph_dsc>
    if(g_ret == false)  {
 800a586:	2800      	cmp	r0, #0
 800a588:	f000 80f1 	beq.w	800a76e <lv_draw_letter+0x21e>
    if((g.box_h == 0) || (g.box_w == 0)) return;
 800a58c:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
 800a590:	2b00      	cmp	r3, #0
 800a592:	f000 80ec 	beq.w	800a76e <lv_draw_letter+0x21e>
 800a596:	f8bd 2056 	ldrh.w	r2, [sp, #86]	; 0x56
 800a59a:	2a00      	cmp	r2, #0
 800a59c:	f000 80e7 	beq.w	800a76e <lv_draw_letter+0x21e>
    int32_t pos_x = pos_p->x + g.ofs_x;
 800a5a0:	f9bd 105a 	ldrsh.w	r1, [sp, #90]	; 0x5a
 800a5a4:	f9b8 b000 	ldrsh.w	fp, [r8]
 800a5a8:	448b      	add	fp, r1
    if(pos_x + g.box_w < clip_area->x1 ||
 800a5aa:	f9b5 1000 	ldrsh.w	r1, [r5]
 800a5ae:	445a      	add	r2, fp
 800a5b0:	428a      	cmp	r2, r1
 800a5b2:	f2c0 80dc 	blt.w	800a76e <lv_draw_letter+0x21e>
       pos_x > clip_area->x2 ||
 800a5b6:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
    if(pos_x + g.box_w < clip_area->x1 ||
 800a5ba:	455a      	cmp	r2, fp
 800a5bc:	f2c0 80d7 	blt.w	800a76e <lv_draw_letter+0x21e>
    int32_t pos_y = pos_p->y + (font_p->line_height - font_p->base_line) - g.box_h - g.ofs_y;
 800a5c0:	f9b6 200a 	ldrsh.w	r2, [r6, #10]
 800a5c4:	f9b6 9008 	ldrsh.w	r9, [r6, #8]
 800a5c8:	eba9 0902 	sub.w	r9, r9, r2
 800a5cc:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 800a5d0:	4491      	add	r9, r2
 800a5d2:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 800a5d6:	eba9 0903 	sub.w	r9, r9, r3
 800a5da:	eba9 0902 	sub.w	r9, r9, r2
       pos_y + g.box_h < clip_area->y1 ||
 800a5de:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 800a5e2:	444b      	add	r3, r9
       pos_x > clip_area->x2 ||
 800a5e4:	4293      	cmp	r3, r2
 800a5e6:	f2c0 80c2 	blt.w	800a76e <lv_draw_letter+0x21e>
       pos_y > clip_area->y2)  {
 800a5ea:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
       pos_y + g.box_h < clip_area->y1 ||
 800a5ee:	454b      	cmp	r3, r9
 800a5f0:	f2c0 80bd 	blt.w	800a76e <lv_draw_letter+0x21e>
    const uint8_t * map_p = lv_font_get_glyph_bitmap(font_p, letter);
 800a5f4:	4639      	mov	r1, r7
 800a5f6:	4630      	mov	r0, r6
 800a5f8:	f00b ff5c 	bl	80164b4 <lv_font_get_glyph_bitmap>
    if(map_p == NULL) {
 800a5fc:	2800      	cmp	r0, #0
 800a5fe:	f000 80b6 	beq.w	800a76e <lv_draw_letter+0x21e>
    if(font_p->subpx) {
 800a602:	7b33      	ldrb	r3, [r6, #12]
 800a604:	079e      	lsls	r6, r3, #30
 800a606:	f040 80b2 	bne.w	800a76e <lv_draw_letter+0x21e>
    uint32_t bpp = g->bpp;
 800a60a:	f89d 305e 	ldrb.w	r3, [sp, #94]	; 0x5e
        draw_letter_normal(pos_x, pos_y, &g, clip_area, map_p, color, opa, blend_mode);
 800a60e:	fa0f f18b 	sxth.w	r1, fp
 800a612:	fa0f f289 	sxth.w	r2, r9
    if(bpp == 3) bpp = 4;
 800a616:	2b03      	cmp	r3, #3
 800a618:	f000 80b3 	beq.w	800a782 <lv_draw_letter+0x232>
    switch(bpp) {
 800a61c:	3b01      	subs	r3, #1
 800a61e:	2b07      	cmp	r3, #7
 800a620:	f200 80a5 	bhi.w	800a76e <lv_draw_letter+0x21e>
 800a624:	e8df f003 	tbb	[pc, r3]
 800a628:	ada3b304 	.word	0xada3b304
 800a62c:	a6a3a3a3 	.word	0xa6a3a3a3
    if(bpp == 3) bpp = 4;
 800a630:	2780      	movs	r7, #128	; 0x80
 800a632:	2601      	movs	r6, #1
 800a634:	2302      	movs	r3, #2
 800a636:	9708      	str	r7, [sp, #32]
 800a638:	4f9e      	ldr	r7, [pc, #632]	; (800a8b4 <lv_draw_letter+0x364>)
    if(opa < LV_OPA_MAX) {
 800a63a:	2cfc      	cmp	r4, #252	; 0xfc
            bpp_opa_table_p = _lv_bpp2_opa_table;
 800a63c:	9705      	str	r7, [sp, #20]
    if(opa < LV_OPA_MAX) {
 800a63e:	d811      	bhi.n	800a664 <lv_draw_letter+0x114>
        if(prev_opa != opa || prev_bpp != bpp) {
 800a640:	4f9d      	ldr	r7, [pc, #628]	; (800a8b8 <lv_draw_letter+0x368>)
 800a642:	f897 c000 	ldrb.w	ip, [r7]
 800a646:	45a4      	cmp	ip, r4
 800a648:	46bc      	mov	ip, r7
 800a64a:	f040 80a6 	bne.w	800a79a <lv_draw_letter+0x24a>
 800a64e:	4f9b      	ldr	r7, [pc, #620]	; (800a8bc <lv_draw_letter+0x36c>)
 800a650:	683f      	ldr	r7, [r7, #0]
 800a652:	42b7      	cmp	r7, r6
 800a654:	f040 80a1 	bne.w	800a79a <lv_draw_letter+0x24a>
        prev_bpp = bpp;
 800a658:	4b98      	ldr	r3, [pc, #608]	; (800a8bc <lv_draw_letter+0x36c>)
        prev_opa = opa;
 800a65a:	f88c 4000 	strb.w	r4, [ip]
        prev_bpp = bpp;
 800a65e:	601e      	str	r6, [r3, #0]
        bpp_opa_table_p = opa_table;
 800a660:	4b97      	ldr	r3, [pc, #604]	; (800a8c0 <lv_draw_letter+0x370>)
 800a662:	9305      	str	r3, [sp, #20]
    int32_t col_start = pos_x >= clip_area->x1 ? 0 : clip_area->x1 - pos_x;
 800a664:	f9b5 7000 	ldrsh.w	r7, [r5]
    int32_t box_w = g->box_w;
 800a668:	f8bd a056 	ldrh.w	sl, [sp, #86]	; 0x56
    int32_t col_end   = pos_x + box_w <= clip_area->x2 ? box_w : clip_area->x2 - pos_x + 1;
 800a66c:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
    int32_t col_start = pos_x >= clip_area->x1 ? 0 : clip_area->x1 - pos_x;
 800a670:	42b9      	cmp	r1, r7
    int32_t col_end   = pos_x + box_w <= clip_area->x2 ? box_w : clip_area->x2 - pos_x + 1;
 800a672:	eb0a 0c01 	add.w	ip, sl, r1
    int32_t box_h = g->box_h;
 800a676:	f8bd 8058 	ldrh.w	r8, [sp, #88]	; 0x58
    int32_t col_start = pos_x >= clip_area->x1 ? 0 : clip_area->x1 - pos_x;
 800a67a:	bfb4      	ite	lt
 800a67c:	1a7f      	sublt	r7, r7, r1
 800a67e:	2700      	movge	r7, #0
    int32_t col_end   = pos_x + box_w <= clip_area->x2 ? box_w : clip_area->x2 - pos_x + 1;
 800a680:	459c      	cmp	ip, r3
    int32_t width_bit = box_w * bpp; /*Letter width in bits*/
 800a682:	fb06 f40a 	mul.w	r4, r6, sl
    int32_t col_end   = pos_x + box_w <= clip_area->x2 ? box_w : clip_area->x2 - pos_x + 1;
 800a686:	bfcc      	ite	gt
 800a688:	1a5b      	subgt	r3, r3, r1
 800a68a:	f8cd a01c 	strle.w	sl, [sp, #28]
    int32_t row_end   = pos_y + box_h <= clip_area->y2 ? box_h : clip_area->y2 - pos_y + 1;
 800a68e:	eb08 0102 	add.w	r1, r8, r2
    int32_t col_end   = pos_x + box_w <= clip_area->x2 ? box_w : clip_area->x2 - pos_x + 1;
 800a692:	bfc4      	itt	gt
 800a694:	3301      	addgt	r3, #1
 800a696:	9307      	strgt	r3, [sp, #28]
    int32_t row_start = pos_y >= clip_area->y1 ? 0 : clip_area->y1 - pos_y;
 800a698:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 800a69c:	429a      	cmp	r2, r3
 800a69e:	bfb4      	ite	lt
 800a6a0:	1a9b      	sublt	r3, r3, r2
 800a6a2:	2300      	movge	r3, #0
 800a6a4:	9306      	str	r3, [sp, #24]
    int32_t row_end   = pos_y + box_h <= clip_area->y2 ? box_h : clip_area->y2 - pos_y + 1;
 800a6a6:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800a6aa:	4299      	cmp	r1, r3
 800a6ac:	bfc8      	it	gt
 800a6ae:	1a9b      	subgt	r3, r3, r2
    uint32_t bit_ofs = (row_start * width_bit) + (col_start * bpp);
 800a6b0:	9a06      	ldr	r2, [sp, #24]
    int32_t row_end   = pos_y + box_h <= clip_area->y2 ? box_h : clip_area->y2 - pos_y + 1;
 800a6b2:	bfd2      	itee	le
 800a6b4:	f8cd 8030 	strle.w	r8, [sp, #48]	; 0x30
 800a6b8:	3301      	addgt	r3, #1
 800a6ba:	930c      	strgt	r3, [sp, #48]	; 0x30
    uint32_t bit_ofs = (row_start * width_bit) + (col_start * bpp);
 800a6bc:	fb07 f306 	mul.w	r3, r7, r6
 800a6c0:	fb02 3404 	mla	r4, r2, r4, r3
    map_p += bit_ofs >> 3;
 800a6c4:	eb00 03d4 	add.w	r3, r0, r4, lsr #3
    col_bit = bit_ofs & 0x7; /*"& 0x7" equals to "% 8" just faster*/
 800a6c8:	f004 0407 	and.w	r4, r4, #7
    map_p += bit_ofs >> 3;
 800a6cc:	9309      	str	r3, [sp, #36]	; 0x24
    lv_coord_t hor_res = lv_disp_get_hor_res(_lv_refr_get_disp_refreshing());
 800a6ce:	f7fd fe53 	bl	8008378 <_lv_refr_get_disp_refreshing>
 800a6d2:	f00c f8ef 	bl	80168b4 <lv_disp_get_hor_res>
    uint32_t mask_buf_size = box_w * box_h > hor_res ? hor_res : box_w * box_h;
 800a6d6:	fb08 f30a 	mul.w	r3, r8, sl
    uint32_t col_bit_row_ofs = (box_w + col_start - col_end) * bpp;
 800a6da:	44ba      	add	sl, r7
    uint32_t mask_buf_size = box_w * box_h > hor_res ? hor_res : box_w * box_h;
 800a6dc:	4283      	cmp	r3, r0
 800a6de:	bfa8      	it	ge
 800a6e0:	4603      	movge	r3, r0
    lv_opa_t * mask_buf = lv_mem_buf_get(mask_buf_size);
 800a6e2:	4618      	mov	r0, r3
    uint32_t mask_buf_size = box_w * box_h > hor_res ? hor_res : box_w * box_h;
 800a6e4:	930a      	str	r3, [sp, #40]	; 0x28
    lv_opa_t * mask_buf = lv_mem_buf_get(mask_buf_size);
 800a6e6:	f00d f9d7 	bl	8017a98 <lv_mem_buf_get>
    fill_area.x2 = col_end  + pos_x - 1;
 800a6ea:	9a07      	ldr	r2, [sp, #28]
    fill_area.x1 = col_start + pos_x;
 800a6ec:	fa1f f38b 	uxth.w	r3, fp
 800a6f0:	fa17 fb8b 	uxtah	fp, r7, fp
    lv_opa_t * mask_buf = lv_mem_buf_get(mask_buf_size);
 800a6f4:	4680      	mov	r8, r0
    fill_area.x2 = col_end  + pos_x - 1;
 800a6f6:	3b01      	subs	r3, #1
    fill_area.x1 = col_start + pos_x;
 800a6f8:	f8ad b04c 	strh.w	fp, [sp, #76]	; 0x4c
    fill_area.x2 = col_end  + pos_x - 1;
 800a6fc:	4413      	add	r3, r2
 800a6fe:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
    fill_area.y1 = row_start + pos_y;
 800a702:	9b06      	ldr	r3, [sp, #24]
 800a704:	4499      	add	r9, r3
 800a706:	fa0f f989 	sxth.w	r9, r9
 800a70a:	f8ad 904e 	strh.w	r9, [sp, #78]	; 0x4e
    fill_area.y2 = fill_area.y1;
 800a70e:	f8ad 9052 	strh.w	r9, [sp, #82]	; 0x52
    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
 800a712:	f001 fd15 	bl	800c140 <lv_draw_mask_get_cnt>
    uint32_t col_bit_max = 8 - bpp;
 800a716:	f1c6 0308 	rsb	r3, r6, #8
    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
 800a71a:	900f      	str	r0, [sp, #60]	; 0x3c
    uint32_t col_bit_max = 8 - bpp;
 800a71c:	930b      	str	r3, [sp, #44]	; 0x2c
    uint32_t col_bit_row_ofs = (box_w + col_start - col_end) * bpp;
 800a71e:	9b07      	ldr	r3, [sp, #28]
 800a720:	ebaa 0a03 	sub.w	sl, sl, r3
 800a724:	fb06 f30a 	mul.w	r3, r6, sl
    int32_t mask_p = 0;
 800a728:	f04f 0a00 	mov.w	sl, #0
    uint32_t col_bit_row_ofs = (box_w + col_start - col_end) * bpp;
 800a72c:	9310      	str	r3, [sp, #64]	; 0x40
    for(row = row_start ; row < row_end; row++) {
 800a72e:	9b07      	ldr	r3, [sp, #28]
 800a730:	1bdb      	subs	r3, r3, r7
 800a732:	930e      	str	r3, [sp, #56]	; 0x38
 800a734:	9b06      	ldr	r3, [sp, #24]
 800a736:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a738:	4293      	cmp	r3, r2
 800a73a:	db41      	blt.n	800a7c0 <lv_draw_letter+0x270>
    if(fill_area.y1 != fill_area.y2) {
 800a73c:	f9bd 3052 	ldrsh.w	r3, [sp, #82]	; 0x52
 800a740:	f9bd 204e 	ldrsh.w	r2, [sp, #78]	; 0x4e
 800a744:	429a      	cmp	r2, r3
 800a746:	d00f      	beq.n	800a768 <lv_draw_letter+0x218>
        fill_area.y2--;
 800a748:	3b01      	subs	r3, #1
        _lv_blend_fill(clip_area, &fill_area,
 800a74a:	22ff      	movs	r2, #255	; 0xff
 800a74c:	a913      	add	r1, sp, #76	; 0x4c
 800a74e:	4628      	mov	r0, r5
        fill_area.y2--;
 800a750:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52
        _lv_blend_fill(clip_area, &fill_area,
 800a754:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a756:	9302      	str	r3, [sp, #8]
 800a758:	2302      	movs	r3, #2
 800a75a:	e9cd 3200 	strd	r3, r2, [sp]
 800a75e:	4643      	mov	r3, r8
 800a760:	f8bd 2088 	ldrh.w	r2, [sp, #136]	; 0x88
 800a764:	f7fe fd5c 	bl	8009220 <_lv_blend_fill>
    lv_mem_buf_release(mask_buf);
 800a768:	4640      	mov	r0, r8
 800a76a:	f00c fff1 	bl	8017750 <lv_mem_buf_release>
}
 800a76e:	b019      	add	sp, #100	; 0x64
 800a770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            bitmask_init  = 0xFF;
 800a774:	27ff      	movs	r7, #255	; 0xff
            break;       /*No opa table, pixel value will be used directly*/
 800a776:	2608      	movs	r6, #8
            shades = 256;
 800a778:	f44f 7380 	mov.w	r3, #256	; 0x100
            bitmask_init  = 0xFF;
 800a77c:	9708      	str	r7, [sp, #32]
            bpp_opa_table_p = _lv_bpp8_opa_table;
 800a77e:	4f51      	ldr	r7, [pc, #324]	; (800a8c4 <lv_draw_letter+0x374>)
 800a780:	e75b      	b.n	800a63a <lv_draw_letter+0xea>
            bitmask_init  = 0xF0;
 800a782:	27f0      	movs	r7, #240	; 0xf0
    if(bpp == 3) bpp = 4;
 800a784:	2604      	movs	r6, #4
            shades = 16;
 800a786:	2310      	movs	r3, #16
            bitmask_init  = 0xF0;
 800a788:	9708      	str	r7, [sp, #32]
            bpp_opa_table_p = _lv_bpp4_opa_table;
 800a78a:	4f4f      	ldr	r7, [pc, #316]	; (800a8c8 <lv_draw_letter+0x378>)
 800a78c:	e755      	b.n	800a63a <lv_draw_letter+0xea>
            bitmask_init  = 0xC0;
 800a78e:	27c0      	movs	r7, #192	; 0xc0
    if(bpp == 3) bpp = 4;
 800a790:	2602      	movs	r6, #2
            shades = 4;
 800a792:	2304      	movs	r3, #4
            bitmask_init  = 0xC0;
 800a794:	9708      	str	r7, [sp, #32]
            bpp_opa_table_p = _lv_bpp2_opa_table;
 800a796:	4f4d      	ldr	r7, [pc, #308]	; (800a8cc <lv_draw_letter+0x37c>)
 800a798:	e74f      	b.n	800a63a <lv_draw_letter+0xea>
 800a79a:	f8dd e014 	ldr.w	lr, [sp, #20]
 800a79e:	f8df 8120 	ldr.w	r8, [pc, #288]	; 800a8c0 <lv_draw_letter+0x370>
 800a7a2:	4473      	add	r3, lr
                opa_table[i] = bpp_opa_table_p[i] == LV_OPA_COVER ? opa : ((bpp_opa_table_p[i] * opa) >> 8);
 800a7a4:	f81e 7b01 	ldrb.w	r7, [lr], #1
 800a7a8:	2fff      	cmp	r7, #255	; 0xff
 800a7aa:	bf16      	itet	ne
 800a7ac:	fb17 f704 	smulbbne	r7, r7, r4
 800a7b0:	4627      	moveq	r7, r4
 800a7b2:	f3c7 2707 	ubfxne	r7, r7, #8, #8
            for(i = 0; i < shades; i++) {
 800a7b6:	4573      	cmp	r3, lr
                opa_table[i] = bpp_opa_table_p[i] == LV_OPA_COVER ? opa : ((bpp_opa_table_p[i] * opa) >> 8);
 800a7b8:	f808 7b01 	strb.w	r7, [r8], #1
            for(i = 0; i < shades; i++) {
 800a7bc:	d1f2      	bne.n	800a7a4 <lv_draw_letter+0x254>
 800a7be:	e74b      	b.n	800a658 <lv_draw_letter+0x108>
        bitmask = bitmask_init >> col_bit;
 800a7c0:	9b08      	ldr	r3, [sp, #32]
 800a7c2:	eb08 0b0a 	add.w	fp, r8, sl
        for(col = col_start; col < col_end; col++) {
 800a7c6:	46be      	mov	lr, r7
 800a7c8:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
        bitmask = bitmask_init >> col_bit;
 800a7cc:	fa23 f204 	lsr.w	r2, r3, r4
        for(col = col_start; col < col_end; col++) {
 800a7d0:	4659      	mov	r1, fp
 800a7d2:	9b07      	ldr	r3, [sp, #28]
 800a7d4:	4573      	cmp	r3, lr
 800a7d6:	dc37      	bgt.n	800a848 <lv_draw_letter+0x2f8>
 800a7d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a7da:	9a07      	ldr	r2, [sp, #28]
 800a7dc:	4297      	cmp	r7, r2
 800a7de:	bfc8      	it	gt
 800a7e0:	2300      	movgt	r3, #0
 800a7e2:	4699      	mov	r9, r3
 800a7e4:	449a      	add	sl, r3
        if(other_mask_cnt) {
 800a7e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a7e8:	b1b3      	cbz	r3, 800a818 <lv_draw_letter+0x2c8>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800a7ea:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf + mask_p_start, fill_area.x1, fill_area.y2,
 800a7ee:	4658      	mov	r0, fp
 800a7f0:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	; 0x4c
 800a7f4:	3301      	adds	r3, #1
 800a7f6:	f9bd 2052 	ldrsh.w	r2, [sp, #82]	; 0x52
 800a7fa:	1a5b      	subs	r3, r3, r1
 800a7fc:	b21b      	sxth	r3, r3
 800a7fe:	f001 fc55 	bl	800c0ac <lv_draw_mask_apply>
            if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
 800a802:	b948      	cbnz	r0, 800a818 <lv_draw_letter+0x2c8>
 800a804:	f8bd 1050 	ldrh.w	r1, [sp, #80]	; 0x50
                lv_memset_00(mask_buf + mask_p_start, lv_area_get_width(&fill_area));
 800a808:	4658      	mov	r0, fp
 800a80a:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 800a80e:	3101      	adds	r1, #1
 800a810:	1ac9      	subs	r1, r1, r3
 800a812:	b209      	sxth	r1, r1
 800a814:	f00d f98e 	bl	8017b34 <lv_memset_00>
        if((uint32_t) mask_p + (col_end - col_start) < mask_buf_size) {
 800a818:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a81a:	4499      	add	r9, r3
 800a81c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a81e:	4499      	add	r9, r3
 800a820:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a822:	454b      	cmp	r3, r9
 800a824:	d92e      	bls.n	800a884 <lv_draw_letter+0x334>
            fill_area.y2 ++;
 800a826:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
 800a82a:	3301      	adds	r3, #1
 800a82c:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52
        col_bit += col_bit_row_ofs;
 800a830:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a832:	441c      	add	r4, r3
        map_p += (col_bit >> 3);
 800a834:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a836:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
        col_bit = col_bit & 0x7;
 800a83a:	f004 0407 	and.w	r4, r4, #7
        map_p += (col_bit >> 3);
 800a83e:	9309      	str	r3, [sp, #36]	; 0x24
    for(row = row_start ; row < row_end; row++) {
 800a840:	9b06      	ldr	r3, [sp, #24]
 800a842:	3301      	adds	r3, #1
 800a844:	9306      	str	r3, [sp, #24]
 800a846:	e775      	b.n	800a734 <lv_draw_letter+0x1e4>
            letter_px = (*map_p & bitmask) >> (col_bit_max - col_bit);
 800a848:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(col = col_start; col < col_end; col++) {
 800a84a:	f10e 0e01 	add.w	lr, lr, #1
            letter_px = (*map_p & bitmask) >> (col_bit_max - col_bit);
 800a84e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a850:	3101      	adds	r1, #1
 800a852:	781b      	ldrb	r3, [r3, #0]
 800a854:	eba0 0c04 	sub.w	ip, r0, r4
 800a858:	4013      	ands	r3, r2
 800a85a:	fa23 f30c 	lsr.w	r3, r3, ip
            if(letter_px) {
 800a85e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
                mask_buf[mask_p] = bpp_opa_table_p[letter_px];
 800a862:	bf1c      	itt	ne
 800a864:	9805      	ldrne	r0, [sp, #20]
 800a866:	5cc3      	ldrbne	r3, [r0, r3]
                mask_buf[mask_p] = 0;
 800a868:	f801 3c01 	strb.w	r3, [r1, #-1]
            if(col_bit < col_bit_max) {
 800a86c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a86e:	42a3      	cmp	r3, r4
                map_p++;
 800a870:	bf93      	iteet	ls
 800a872:	9b09      	ldrls	r3, [sp, #36]	; 0x24
                col_bit += bpp;
 800a874:	19a4      	addhi	r4, r4, r6
                bitmask = bitmask >> bpp;
 800a876:	40f2      	lsrhi	r2, r6
                bitmask = bitmask_init;
 800a878:	9a08      	ldrls	r2, [sp, #32]
                map_p++;
 800a87a:	bf9e      	ittt	ls
 800a87c:	3301      	addls	r3, #1
                col_bit = 0;
 800a87e:	2400      	movls	r4, #0
                map_p++;
 800a880:	9309      	strls	r3, [sp, #36]	; 0x24
        for(col = col_start; col < col_end; col++) {
 800a882:	e7a6      	b.n	800a7d2 <lv_draw_letter+0x282>
            _lv_blend_fill(clip_area, &fill_area,
 800a884:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a886:	21ff      	movs	r1, #255	; 0xff
 800a888:	f8bd 2088 	ldrh.w	r2, [sp, #136]	; 0x88
 800a88c:	4628      	mov	r0, r5
 800a88e:	9302      	str	r3, [sp, #8]
 800a890:	2302      	movs	r3, #2
            mask_p = 0;
 800a892:	f04f 0a00 	mov.w	sl, #0
            _lv_blend_fill(clip_area, &fill_area,
 800a896:	e9cd 3100 	strd	r3, r1, [sp]
 800a89a:	4643      	mov	r3, r8
 800a89c:	a913      	add	r1, sp, #76	; 0x4c
 800a89e:	f7fe fcbf 	bl	8009220 <_lv_blend_fill>
            fill_area.y1 = fill_area.y2 + 1;
 800a8a2:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
 800a8a6:	3301      	adds	r3, #1
 800a8a8:	b21b      	sxth	r3, r3
 800a8aa:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
            fill_area.y2 = fill_area.y1;
 800a8ae:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52
            mask_p = 0;
 800a8b2:	e7bd      	b.n	800a830 <lv_draw_letter+0x2e0>
 800a8b4:	08024fd7 	.word	0x08024fd7
 800a8b8:	20002ac4 	.word	0x20002ac4
 800a8bc:	20002ac0 	.word	0x20002ac0
 800a8c0:	200029c0 	.word	0x200029c0
 800a8c4:	08024fed 	.word	0x08024fed
 800a8c8:	08024fdd 	.word	0x08024fdd
 800a8cc:	08024fd9 	.word	0x08024fd9

0800a8d0 <lv_draw_label>:
{
 800a8d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8d4:	469b      	mov	fp, r3
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	4605      	mov	r5, r0
 800a8da:	468a      	mov	sl, r1
 800a8dc:	4614      	mov	r4, r2
 800a8de:	ed2d 8b02 	vpush	{d8}
 800a8e2:	b0ab      	sub	sp, #172	; 0xac
 800a8e4:	930b      	str	r3, [sp, #44]	; 0x2c
    if(dsc->opa <= LV_OPA_MIN) return;
 800a8e6:	7e93      	ldrb	r3, [r2, #26]
{
 800a8e8:	f8dd 90d8 	ldr.w	r9, [sp, #216]	; 0xd8
    if(dsc->opa <= LV_OPA_MIN) return;
 800a8ec:	2b02      	cmp	r3, #2
 800a8ee:	f240 80a7 	bls.w	800aa40 <lv_draw_label+0x170>
    if (txt == NULL || txt[0] == '\0')
 800a8f2:	f1bb 0f00 	cmp.w	fp, #0
 800a8f6:	f000 80a3 	beq.w	800aa40 <lv_draw_label+0x170>
 800a8fa:	f89b 3000 	ldrb.w	r3, [fp]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	f000 809e 	beq.w	800aa40 <lv_draw_label+0x170>
    const lv_font_t * font = dsc->font;
 800a904:	f8d2 8000 	ldr.w	r8, [r2]
    bool clip_ok = _lv_area_intersect(&clipped_area, coords, mask);
 800a908:	460a      	mov	r2, r1
 800a90a:	4601      	mov	r1, r0
 800a90c:	a816      	add	r0, sp, #88	; 0x58
 800a90e:	f00c fac2 	bl	8016e96 <_lv_area_intersect>
    if(!clip_ok) return;
 800a912:	2800      	cmp	r0, #0
 800a914:	f000 8094 	beq.w	800aa40 <lv_draw_label+0x170>
    if((dsc->flag & LV_TEXT_FLAG_EXPAND) == 0) {
 800a918:	7f23      	ldrb	r3, [r4, #28]
 800a91a:	0799      	lsls	r1, r3, #30
 800a91c:	f100 8095 	bmi.w	800aa4a <lv_draw_label+0x17a>
 800a920:	88ab      	ldrh	r3, [r5, #4]
 800a922:	882a      	ldrh	r2, [r5, #0]
 800a924:	3301      	adds	r3, #1
 800a926:	1a9b      	subs	r3, r3, r2
        w = lv_area_get_width(coords);
 800a928:	b21b      	sxth	r3, r3
    int32_t line_height_font = lv_font_get_line_height(font);
 800a92a:	f9b8 2008 	ldrsh.w	r2, [r8, #8]
    pos.y = coords->y1;
 800a92e:	f9b5 0002 	ldrsh.w	r0, [r5, #2]
    int32_t line_height_font = lv_font_get_line_height(font);
 800a932:	9206      	str	r2, [sp, #24]
    int32_t line_height = line_height_font + dsc->line_space;
 800a934:	9906      	ldr	r1, [sp, #24]
 800a936:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 800a93a:	440a      	add	r2, r1
    y_ofs = dsc->ofs_y;
 800a93c:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
    int32_t line_height = line_height_font + dsc->line_space;
 800a940:	9208      	str	r2, [sp, #32]
    pos.x = coords->x1;
 800a942:	882a      	ldrh	r2, [r5, #0]
 800a944:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
    x_ofs = dsc->ofs_x;
 800a948:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 800a94c:	920e      	str	r2, [sp, #56]	; 0x38
    pos.y += y_ofs;
 800a94e:	1842      	adds	r2, r0, r1
 800a950:	b292      	uxth	r2, r2
 800a952:	f8ad 204a 	strh.w	r2, [sp, #74]	; 0x4a
    if(hint && y_ofs == 0 && coords->y1 < 0) {
 800a956:	f1b9 0f00 	cmp.w	r9, #0
 800a95a:	f040 8087 	bne.w	800aa6c <lv_draw_label+0x19c>
    uint32_t line_start     = 0;
 800a95e:	2600      	movs	r6, #0
    uint32_t line_end = line_start + _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
 800a960:	b21b      	sxth	r3, r3
 800a962:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 800a966:	4641      	mov	r1, r8
 800a968:	eb0b 0006 	add.w	r0, fp, r6
 800a96c:	ee08 3a10 	vmov	s16, r3
 800a970:	7f23      	ldrb	r3, [r4, #28]
 800a972:	9300      	str	r3, [sp, #0]
 800a974:	ee18 3a10 	vmov	r3, s16
 800a978:	f00e fc62 	bl	8019240 <_lv_txt_get_next_line>
 800a97c:	1987      	adds	r7, r0, r6
    while(pos.y + line_height_font < mask->y1) {
 800a97e:	9a06      	ldr	r2, [sp, #24]
 800a980:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
 800a984:	4413      	add	r3, r2
 800a986:	f9ba 2002 	ldrsh.w	r2, [sl, #2]
 800a98a:	4293      	cmp	r3, r2
 800a98c:	f2c0 808f 	blt.w	800aaae <lv_draw_label+0x1de>
    if(dsc->align == LV_TEXT_ALIGN_CENTER) {
 800a990:	7f63      	ldrb	r3, [r4, #29]
 800a992:	eb0b 0006 	add.w	r0, fp, r6
 800a996:	f003 0303 	and.w	r3, r3, #3
 800a99a:	2b02      	cmp	r3, #2
 800a99c:	f040 80b4 	bne.w	800ab08 <lv_draw_label+0x238>
        line_width = lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
 800a9a0:	7f23      	ldrb	r3, [r4, #28]
 800a9a2:	4642      	mov	r2, r8
 800a9a4:	1bb9      	subs	r1, r7, r6
 800a9a6:	9300      	str	r3, [sp, #0]
 800a9a8:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 800a9ac:	f00e fd90 	bl	80194d0 <lv_txt_get_width>
 800a9b0:	88ab      	ldrh	r3, [r5, #4]
 800a9b2:	882a      	ldrh	r2, [r5, #0]
 800a9b4:	3301      	adds	r3, #1
 800a9b6:	1a9b      	subs	r3, r3, r2
        pos.x += (lv_area_get_width(coords) - line_width) / 2;
 800a9b8:	b21b      	sxth	r3, r3
 800a9ba:	1a18      	subs	r0, r3, r0
 800a9bc:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800a9c0:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800a9c4:	eb03 0060 	add.w	r0, r3, r0, asr #1
        pos.x += lv_area_get_width(coords) - line_width;
 800a9c8:	f8ad 0048 	strh.w	r0, [sp, #72]	; 0x48
    lv_opa_t opa = dsc->opa;
 800a9cc:	7ea3      	ldrb	r3, [r4, #26]
 800a9ce:	930f      	str	r3, [sp, #60]	; 0x3c
    uint32_t sel_start = dsc->sel_start;
 800a9d0:	6863      	ldr	r3, [r4, #4]
 800a9d2:	9305      	str	r3, [sp, #20]
    uint32_t sel_end = dsc->sel_end;
 800a9d4:	68a3      	ldr	r3, [r4, #8]
 800a9d6:	9306      	str	r3, [sp, #24]
    if(sel_start > sel_end) {
 800a9d8:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 800a9dc:	4293      	cmp	r3, r2
 800a9de:	bf88      	it	hi
 800a9e0:	e9cd 2305 	strdhi	r2, r3, [sp, #20]
    if((dsc->decor & LV_TEXT_DECOR_UNDERLINE) || (dsc->decor & LV_TEXT_DECOR_STRIKETHROUGH)) {
 800a9e4:	7f63      	ldrb	r3, [r4, #29]
 800a9e6:	f013 0f0c 	tst.w	r3, #12
 800a9ea:	d017      	beq.n	800aa1c <lv_draw_label+0x14c>
        lv_draw_line_dsc_init(&line_dsc);
 800a9ec:	a81a      	add	r0, sp, #104	; 0x68
 800a9ee:	f000 fa11 	bl	800ae14 <lv_draw_line_dsc_init>
        line_dsc.color = dsc->color;
 800a9f2:	89a3      	ldrh	r3, [r4, #12]
        line_dsc.blend_mode = dsc->blend_mode;
 800a9f4:	f89d 2071 	ldrb.w	r2, [sp, #113]	; 0x71
        line_dsc.color = dsc->color;
 800a9f8:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
        line_dsc.width = font->underline_thickness ? font->underline_thickness : 1;
 800a9fc:	f998 300e 	ldrsb.w	r3, [r8, #14]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	bf08      	it	eq
 800aa04:	2301      	moveq	r3, #1
 800aa06:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
        line_dsc.opa = dsc->opa;
 800aa0a:	7ea3      	ldrb	r3, [r4, #26]
 800aa0c:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
        line_dsc.blend_mode = dsc->blend_mode;
 800aa10:	7f63      	ldrb	r3, [r4, #29]
 800aa12:	095b      	lsrs	r3, r3, #5
 800aa14:	f363 0201 	bfi	r2, r3, #0, #2
 800aa18:	f88d 2071 	strb.w	r2, [sp, #113]	; 0x71
    lv_draw_rect_dsc_init(&draw_dsc_sel);
 800aa1c:	a81d      	add	r0, sp, #116	; 0x74
 800aa1e:	f002 f833 	bl	800ca88 <lv_draw_rect_dsc_init>
    draw_dsc_sel.bg_color = dsc->sel_bg_color;
 800aa22:	8a23      	ldrh	r3, [r4, #16]
 800aa24:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
    int32_t pos_x_start = pos.x;
 800aa28:	f9bd 3048 	ldrsh.w	r3, [sp, #72]	; 0x48
 800aa2c:	930c      	str	r3, [sp, #48]	; 0x30
    uint32_t par_start = 0;
 800aa2e:	2300      	movs	r3, #0
 800aa30:	930a      	str	r3, [sp, #40]	; 0x28
    while(txt[line_start] != '\0') {
 800aa32:	eb0b 0306 	add.w	r3, fp, r6
 800aa36:	930d      	str	r3, [sp, #52]	; 0x34
 800aa38:	f81b 3006 	ldrb.w	r3, [fp, r6]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d178      	bne.n	800ab32 <lv_draw_label+0x262>
}
 800aa40:	b02b      	add	sp, #172	; 0xac
 800aa42:	ecbd 8b02 	vpop	{d8}
 800aa46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        lv_txt_get_size(&p, txt, dsc->font, dsc->letter_space, dsc->line_space, LV_COORD_MAX,
 800aa4a:	9302      	str	r3, [sp, #8]
 800aa4c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800aa50:	6822      	ldr	r2, [r4, #0]
 800aa52:	4659      	mov	r1, fp
 800aa54:	9301      	str	r3, [sp, #4]
 800aa56:	a81d      	add	r0, sp, #116	; 0x74
 800aa58:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
 800aa5c:	9300      	str	r3, [sp, #0]
 800aa5e:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 800aa62:	f00e fd78 	bl	8019556 <lv_txt_get_size>
        w = p.x;
 800aa66:	f9bd 3074 	ldrsh.w	r3, [sp, #116]	; 0x74
 800aa6a:	e75e      	b.n	800a92a <lv_draw_label+0x5a>
    if(hint && y_ofs == 0 && coords->y1 < 0) {
 800aa6c:	2900      	cmp	r1, #0
 800aa6e:	f47f af76 	bne.w	800a95e <lv_draw_label+0x8e>
 800aa72:	2800      	cmp	r0, #0
 800aa74:	f6bf af73 	bge.w	800a95e <lv_draw_label+0x8e>
        if(LV_ABS(hint->coord_y - coords->y1) > LV_LABEL_HINT_UPDATE_TH - 2 * line_height) {
 800aa78:	f8d9 1008 	ldr.w	r1, [r9, #8]
 800aa7c:	1a09      	subs	r1, r1, r0
 800aa7e:	9808      	ldr	r0, [sp, #32]
 800aa80:	2900      	cmp	r1, #0
 800aa82:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
 800aa86:	bfb8      	it	lt
 800aa88:	4249      	neglt	r1, r1
 800aa8a:	ebb1 0f40 	cmp.w	r1, r0, lsl #1
            hint->line_start = -1;
 800aa8e:	bfc4      	itt	gt
 800aa90:	f04f 31ff 	movgt.w	r1, #4294967295
 800aa94:	f8c9 1000 	strgt.w	r1, [r9]
        last_line_start = hint->line_start;
 800aa98:	f8d9 6000 	ldr.w	r6, [r9]
    if(hint && last_line_start >= 0) {
 800aa9c:	2e00      	cmp	r6, #0
 800aa9e:	f6ff af5e 	blt.w	800a95e <lv_draw_label+0x8e>
        pos.y += hint->y;
 800aaa2:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800aaa6:	440a      	add	r2, r1
 800aaa8:	f8ad 204a 	strh.w	r2, [sp, #74]	; 0x4a
 800aaac:	e758      	b.n	800a960 <lv_draw_label+0x90>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
 800aaae:	eb0b 0307 	add.w	r3, fp, r7
 800aab2:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 800aab6:	4641      	mov	r1, r8
 800aab8:	9305      	str	r3, [sp, #20]
 800aaba:	7f23      	ldrb	r3, [r4, #28]
 800aabc:	9805      	ldr	r0, [sp, #20]
 800aabe:	9300      	str	r3, [sp, #0]
 800aac0:	ee18 3a10 	vmov	r3, s16
 800aac4:	f00e fbbc 	bl	8019240 <_lv_txt_get_next_line>
        pos.y += line_height;
 800aac8:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
 800aacc:	9a08      	ldr	r2, [sp, #32]
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
 800aace:	4438      	add	r0, r7
        pos.y += line_height;
 800aad0:	4413      	add	r3, r2
 800aad2:	b21b      	sxth	r3, r3
 800aad4:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
        if(hint && pos.y >= -LV_LABEL_HINT_UPDATE_TH && hint->line_start < 0) {
 800aad8:	f1b9 0f00 	cmp.w	r9, #0
 800aadc:	d00d      	beq.n	800aafa <lv_draw_label+0x22a>
 800aade:	f513 6f80 	cmn.w	r3, #1024	; 0x400
 800aae2:	db0a      	blt.n	800aafa <lv_draw_label+0x22a>
 800aae4:	f8d9 2000 	ldr.w	r2, [r9]
 800aae8:	2a00      	cmp	r2, #0
            hint->y          = pos.y - coords->y1;
 800aaea:	bfbf      	itttt	lt
 800aaec:	f9b5 2002 	ldrshlt.w	r2, [r5, #2]
            hint->line_start = line_start;
 800aaf0:	f8c9 7000 	strlt.w	r7, [r9]
            hint->y          = pos.y - coords->y1;
 800aaf4:	1a9b      	sublt	r3, r3, r2
            hint->coord_y    = coords->y1;
 800aaf6:	e9c9 3201 	strdlt	r3, r2, [r9, #4]
        if(txt[line_start] == '\0') return;
 800aafa:	9b05      	ldr	r3, [sp, #20]
 800aafc:	463e      	mov	r6, r7
 800aafe:	781b      	ldrb	r3, [r3, #0]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d09d      	beq.n	800aa40 <lv_draw_label+0x170>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
 800ab04:	4607      	mov	r7, r0
 800ab06:	e73a      	b.n	800a97e <lv_draw_label+0xae>
    else if(dsc->align == LV_TEXT_ALIGN_RIGHT) {
 800ab08:	2b03      	cmp	r3, #3
 800ab0a:	f47f af5f 	bne.w	800a9cc <lv_draw_label+0xfc>
        line_width = lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
 800ab0e:	7f23      	ldrb	r3, [r4, #28]
 800ab10:	4642      	mov	r2, r8
 800ab12:	1bb9      	subs	r1, r7, r6
 800ab14:	9300      	str	r3, [sp, #0]
 800ab16:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 800ab1a:	f00e fcd9 	bl	80194d0 <lv_txt_get_width>
 800ab1e:	88ab      	ldrh	r3, [r5, #4]
 800ab20:	882a      	ldrh	r2, [r5, #0]
 800ab22:	3301      	adds	r3, #1
 800ab24:	1a9b      	subs	r3, r3, r2
        pos.x += lv_area_get_width(coords) - line_width;
 800ab26:	b21b      	sxth	r3, r3
 800ab28:	1a18      	subs	r0, r3, r0
 800ab2a:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800ab2e:	4418      	add	r0, r3
 800ab30:	e74a      	b.n	800a9c8 <lv_draw_label+0xf8>
        pos.x += x_ofs;
 800ab32:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800ab36:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ab38:	4413      	add	r3, r2
 800ab3a:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
        i         = 0;
 800ab3e:	2300      	movs	r3, #0
        cmd_state = CMD_STATE_WAIT;
 800ab40:	4699      	mov	r9, r3
        i         = 0;
 800ab42:	9313      	str	r3, [sp, #76]	; 0x4c
        while(i < line_end - line_start) {
 800ab44:	1bbb      	subs	r3, r7, r6
 800ab46:	9310      	str	r3, [sp, #64]	; 0x40
 800ab48:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800ab4a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ab4c:	428b      	cmp	r3, r1
 800ab4e:	f200 8082 	bhi.w	800ac56 <lv_draw_label+0x386>
        if(dsc->decor & LV_TEXT_DECOR_STRIKETHROUGH) {
 800ab52:	7f63      	ldrb	r3, [r4, #29]
 800ab54:	f3c3 0382 	ubfx	r3, r3, #2, #3
 800ab58:	079a      	lsls	r2, r3, #30
 800ab5a:	d520      	bpl.n	800ab9e <lv_draw_label+0x2ce>
            p1.x = pos_x_start;
 800ab5c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
            lv_draw_line(&p1, &p2, mask, &line_dsc);
 800ab5e:	a918      	add	r1, sp, #96	; 0x60
 800ab60:	a815      	add	r0, sp, #84	; 0x54
            p1.x = pos_x_start;
 800ab62:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
            p1.y = pos.y + (dsc->font->line_height / 2)  + line_dsc.width / 2;
 800ab66:	f9bd 306a 	ldrsh.w	r3, [sp, #106]	; 0x6a
 800ab6a:	eb03 72d3 	add.w	r2, r3, r3, lsr #31
 800ab6e:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
 800ab72:	eb03 0362 	add.w	r3, r3, r2, asr #1
 800ab76:	6822      	ldr	r2, [r4, #0]
 800ab78:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 800ab7c:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 800ab80:	eb03 0362 	add.w	r3, r3, r2, asr #1
            p2.x = pos.x;
 800ab84:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
            p1.y = pos.y + (dsc->font->line_height / 2)  + line_dsc.width / 2;
 800ab88:	b21b      	sxth	r3, r3
            p2.x = pos.x;
 800ab8a:	f8ad 2060 	strh.w	r2, [sp, #96]	; 0x60
            lv_draw_line(&p1, &p2, mask, &line_dsc);
 800ab8e:	4652      	mov	r2, sl
            p1.y = pos.y + (dsc->font->line_height / 2)  + line_dsc.width / 2;
 800ab90:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
            p2.y = p1.y;
 800ab94:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
            lv_draw_line(&p1, &p2, mask, &line_dsc);
 800ab98:	ab1a      	add	r3, sp, #104	; 0x68
 800ab9a:	f000 f947 	bl	800ae2c <lv_draw_line>
        if(dsc->decor  & LV_TEXT_DECOR_UNDERLINE) {
 800ab9e:	7f63      	ldrb	r3, [r4, #29]
 800aba0:	075b      	lsls	r3, r3, #29
 800aba2:	d51b      	bpl.n	800abdc <lv_draw_label+0x30c>
            p1.x = pos_x_start;
 800aba4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
            lv_draw_line(&p1, &p2, mask, &line_dsc);
 800aba6:	a815      	add	r0, sp, #84	; 0x54
            p1.y = pos.y + dsc->font->line_height - dsc->font->base_line - font->underline_position;
 800aba8:	6822      	ldr	r2, [r4, #0]
            p1.x = pos_x_start;
 800abaa:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
            p1.y = pos.y + dsc->font->line_height - dsc->font->base_line - font->underline_position;
 800abae:	8911      	ldrh	r1, [r2, #8]
 800abb0:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
 800abb4:	8952      	ldrh	r2, [r2, #10]
 800abb6:	440b      	add	r3, r1
            lv_draw_line(&p1, &p2, mask, &line_dsc);
 800abb8:	a918      	add	r1, sp, #96	; 0x60
            p1.y = pos.y + dsc->font->line_height - dsc->font->base_line - font->underline_position;
 800abba:	1a9b      	subs	r3, r3, r2
 800abbc:	f998 200d 	ldrsb.w	r2, [r8, #13]
 800abc0:	1a9b      	subs	r3, r3, r2
            p2.x = pos.x;
 800abc2:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
            p1.y = pos.y + dsc->font->line_height - dsc->font->base_line - font->underline_position;
 800abc6:	b21b      	sxth	r3, r3
            p2.x = pos.x;
 800abc8:	f8ad 2060 	strh.w	r2, [sp, #96]	; 0x60
            lv_draw_line(&p1, &p2, mask, &line_dsc);
 800abcc:	4652      	mov	r2, sl
            p1.y = pos.y + dsc->font->line_height - dsc->font->base_line - font->underline_position;
 800abce:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
            p2.y = p1.y;
 800abd2:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
            lv_draw_line(&p1, &p2, mask, &line_dsc);
 800abd6:	ab1a      	add	r3, sp, #104	; 0x68
 800abd8:	f000 f928 	bl	800ae2c <lv_draw_line>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
 800abdc:	7f23      	ldrb	r3, [r4, #28]
 800abde:	eb0b 0607 	add.w	r6, fp, r7
 800abe2:	4641      	mov	r1, r8
 800abe4:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 800abe8:	9300      	str	r3, [sp, #0]
 800abea:	4630      	mov	r0, r6
 800abec:	ee18 3a10 	vmov	r3, s16
 800abf0:	f00e fb26 	bl	8019240 <_lv_txt_get_next_line>
        pos.x = coords->x1;
 800abf4:	882b      	ldrh	r3, [r5, #0]
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
 800abf6:	4601      	mov	r1, r0
 800abf8:	eb07 0900 	add.w	r9, r7, r0
        pos.x = coords->x1;
 800abfc:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
        if(dsc->align == LV_TEXT_ALIGN_CENTER) {
 800ac00:	7f63      	ldrb	r3, [r4, #29]
 800ac02:	f003 0303 	and.w	r3, r3, #3
 800ac06:	2b02      	cmp	r3, #2
 800ac08:	f040 80ed 	bne.w	800ade6 <lv_draw_label+0x516>
                lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
 800ac0c:	7f23      	ldrb	r3, [r4, #28]
 800ac0e:	4642      	mov	r2, r8
 800ac10:	4630      	mov	r0, r6
 800ac12:	9300      	str	r3, [sp, #0]
 800ac14:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 800ac18:	f00e fc5a 	bl	80194d0 <lv_txt_get_width>
 800ac1c:	88ab      	ldrh	r3, [r5, #4]
 800ac1e:	882a      	ldrh	r2, [r5, #0]
 800ac20:	3301      	adds	r3, #1
 800ac22:	1a9b      	subs	r3, r3, r2
            pos.x += (lv_area_get_width(coords) - line_width) / 2;
 800ac24:	b21b      	sxth	r3, r3
 800ac26:	1a18      	subs	r0, r3, r0
 800ac28:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800ac2c:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800ac30:	eb03 0060 	add.w	r0, r3, r0, asr #1
            pos.x += lv_area_get_width(coords) - line_width;
 800ac34:	f8ad 0048 	strh.w	r0, [sp, #72]	; 0x48
        pos.y += line_height;
 800ac38:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
        line_start = line_end;
 800ac3c:	463e      	mov	r6, r7
        pos.y += line_height;
 800ac3e:	9a08      	ldr	r2, [sp, #32]
 800ac40:	4413      	add	r3, r2
        if(pos.y > mask->y2) return;
 800ac42:	f9ba 2006 	ldrsh.w	r2, [sl, #6]
        pos.y += line_height;
 800ac46:	b21b      	sxth	r3, r3
        if(pos.y > mask->y2) return;
 800ac48:	429a      	cmp	r2, r3
        pos.y += line_height;
 800ac4a:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
        if(pos.y > mask->y2) return;
 800ac4e:	f6ff aef7 	blt.w	800aa40 <lv_draw_label+0x170>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
 800ac52:	464f      	mov	r7, r9
 800ac54:	e6ed      	b.n	800aa32 <lv_draw_label+0x162>
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
 800ac56:	9b05      	ldr	r3, [sp, #20]
 800ac58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ac5c:	4293      	cmp	r3, r2
 800ac5e:	d01c      	beq.n	800ac9a <lv_draw_label+0x3ca>
 800ac60:	9b06      	ldr	r3, [sp, #24]
 800ac62:	4293      	cmp	r3, r2
 800ac64:	d019      	beq.n	800ac9a <lv_draw_label+0x3ca>
                logical_char_pos = _lv_txt_encoded_get_char_id(txt, line_start + i);
 800ac66:	4b6a      	ldr	r3, [pc, #424]	; (800ae10 <lv_draw_label+0x540>)
 800ac68:	4431      	add	r1, r6
 800ac6a:	4658      	mov	r0, fp
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	4798      	blx	r3
 800ac70:	9007      	str	r0, [sp, #28]
            _lv_txt_encoded_letter_next_2(bidi_txt, &letter, &letter_next, &i);
 800ac72:	ab13      	add	r3, sp, #76	; 0x4c
 800ac74:	aa15      	add	r2, sp, #84	; 0x54
 800ac76:	a914      	add	r1, sp, #80	; 0x50
 800ac78:	980d      	ldr	r0, [sp, #52]	; 0x34
 800ac7a:	f00e fc0f 	bl	801949c <_lv_txt_encoded_letter_next_2>
            if((dsc->flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 800ac7e:	7f23      	ldrb	r3, [r4, #28]
 800ac80:	f013 0301 	ands.w	r3, r3, #1
 800ac84:	d05c      	beq.n	800ad40 <lv_draw_label+0x470>
                if(letter == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 800ac86:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ac88:	2a23      	cmp	r2, #35	; 0x23
 800ac8a:	d112      	bne.n	800acb2 <lv_draw_label+0x3e2>
                    if(cmd_state == CMD_STATE_WAIT) { /*Start char*/
 800ac8c:	f1b9 0f00 	cmp.w	r9, #0
 800ac90:	d106      	bne.n	800aca0 <lv_draw_label+0x3d0>
                        par_start = i;
 800ac92:	9a13      	ldr	r2, [sp, #76]	; 0x4c
                        cmd_state = CMD_STATE_PAR;
 800ac94:	4699      	mov	r9, r3
                        par_start = i;
 800ac96:	920a      	str	r2, [sp, #40]	; 0x28
                        continue;
 800ac98:	e756      	b.n	800ab48 <lv_draw_label+0x278>
            uint32_t logical_char_pos = 0;
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	9307      	str	r3, [sp, #28]
 800ac9e:	e7e8      	b.n	800ac72 <lv_draw_label+0x3a2>
                    else if(cmd_state == CMD_STATE_PAR) {   /*Other start char in parameter escaped cmd. char*/
 800aca0:	f1b9 0f01 	cmp.w	r9, #1
 800aca4:	d052      	beq.n	800ad4c <lv_draw_label+0x47c>
                    else if(cmd_state == CMD_STATE_IN) {   /*Command end*/
 800aca6:	f1b9 0f02 	cmp.w	r9, #2
 800acaa:	d151      	bne.n	800ad50 <lv_draw_label+0x480>
                        cmd_state = CMD_STATE_WAIT;
 800acac:	f04f 0900 	mov.w	r9, #0
 800acb0:	e74a      	b.n	800ab48 <lv_draw_label+0x278>
                if(cmd_state == CMD_STATE_PAR) {
 800acb2:	f1b9 0f01 	cmp.w	r9, #1
 800acb6:	d143      	bne.n	800ad40 <lv_draw_label+0x470>
                    if(letter == ' ') {
 800acb8:	2a20      	cmp	r2, #32
 800acba:	f47f af45 	bne.w	800ab48 <lv_draw_label+0x278>
                        if(i - par_start == LABEL_RECOLOR_PAR_LENGTH + 1) {
 800acbe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800acc0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800acc2:	1a9b      	subs	r3, r3, r2
 800acc4:	2b07      	cmp	r3, #7
 800acc6:	d139      	bne.n	800ad3c <lv_draw_label+0x46c>
                            lv_memcpy_small(buf, &bidi_txt[par_start], LABEL_RECOLOR_PAR_LENGTH);
 800acc8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 * @param src pointer to the source buffer
 * @param len number of byte to copy
 */
LV_ATTRIBUTE_FAST_MEM static inline void * lv_memcpy_small(void * dst, const void * src, size_t len)
{
    uint8_t * d8 = (uint8_t *)dst;
 800acca:	a918      	add	r1, sp, #96	; 0x60
 800accc:	4413      	add	r3, r2
    const uint8_t * s8 = (const uint8_t *)src;

    while(len) {
 800acce:	1e5a      	subs	r2, r3, #1
 800acd0:	3305      	adds	r3, #5
        *d8 = *s8;
 800acd2:	f812 0f01 	ldrb.w	r0, [r2, #1]!
    while(len) {
 800acd6:	4293      	cmp	r3, r2
        *d8 = *s8;
 800acd8:	f801 0b01 	strb.w	r0, [r1], #1
    while(len) {
 800acdc:	d1f9      	bne.n	800acd2 <lv_draw_label+0x402>
                            r       = (hex_char_to_num(buf[0]) << 4) + hex_char_to_num(buf[1]);
 800acde:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
 800ace2:	f7ff fc0b 	bl	800a4fc <hex_char_to_num>
 800ace6:	4602      	mov	r2, r0
 800ace8:	f89d 0061 	ldrb.w	r0, [sp, #97]	; 0x61
 800acec:	f7ff fc06 	bl	800a4fc <hex_char_to_num>
 800acf0:	eb00 1202 	add.w	r2, r0, r2, lsl #4
                            g       = (hex_char_to_num(buf[2]) << 4) + hex_char_to_num(buf[3]);
 800acf4:	f89d 0062 	ldrb.w	r0, [sp, #98]	; 0x62
 800acf8:	f7ff fc00 	bl	800a4fc <hex_char_to_num>
 800acfc:	4601      	mov	r1, r0
 800acfe:	f89d 0063 	ldrb.w	r0, [sp, #99]	; 0x63
 800ad02:	f7ff fbfb 	bl	800a4fc <hex_char_to_num>
 800ad06:	eb00 1101 	add.w	r1, r0, r1, lsl #4
                            b       = (hex_char_to_num(buf[4]) << 4) + hex_char_to_num(buf[5]);
 800ad0a:	f89d 0064 	ldrb.w	r0, [sp, #100]	; 0x64
 800ad0e:	f7ff fbf5 	bl	800a4fc <hex_char_to_num>
 800ad12:	4681      	mov	r9, r0
 800ad14:	f89d 0065 	ldrb.w	r0, [sp, #101]	; 0x65
 800ad18:	f7ff fbf0 	bl	800a4fc <hex_char_to_num>
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 800ad1c:	f3c1 0185 	ubfx	r1, r1, #2, #6
 800ad20:	eb00 1009 	add.w	r0, r0, r9, lsl #4
 800ad24:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 800ad28:	f3c0 03c4 	ubfx	r3, r0, #3, #5
 800ad2c:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
 800ad30:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
                        cmd_state = CMD_STATE_IN; /*After the parameter the text is in the command*/
 800ad34:	f04f 0902 	mov.w	r9, #2
                            recolor.full = dsc->color.full;
 800ad38:	930b      	str	r3, [sp, #44]	; 0x2c
 800ad3a:	e705      	b.n	800ab48 <lv_draw_label+0x278>
 800ad3c:	89a3      	ldrh	r3, [r4, #12]
 800ad3e:	e7f9      	b.n	800ad34 <lv_draw_label+0x464>
            if(cmd_state == CMD_STATE_IN) color = recolor;
 800ad40:	f1b9 0f02 	cmp.w	r9, #2
 800ad44:	d104      	bne.n	800ad50 <lv_draw_label+0x480>
 800ad46:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 800ad4a:	e002      	b.n	800ad52 <lv_draw_label+0x482>
                        cmd_state = CMD_STATE_WAIT;
 800ad4c:	f04f 0900 	mov.w	r9, #0
            lv_color_t color = dsc->color;
 800ad50:	89a3      	ldrh	r3, [r4, #12]
            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 800ad52:	4640      	mov	r0, r8
 800ad54:	9311      	str	r3, [sp, #68]	; 0x44
 800ad56:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
 800ad5a:	f00b fbb3 	bl	80164c4 <lv_font_get_glyph_width>
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
 800ad5e:	9b05      	ldr	r3, [sp, #20]
 800ad60:	f64f 71ff 	movw	r1, #65535	; 0xffff
            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 800ad64:	9009      	str	r0, [sp, #36]	; 0x24
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
 800ad66:	428b      	cmp	r3, r1
 800ad68:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ad6a:	d022      	beq.n	800adb2 <lv_draw_label+0x4e2>
 800ad6c:	9a06      	ldr	r2, [sp, #24]
 800ad6e:	428a      	cmp	r2, r1
 800ad70:	d01f      	beq.n	800adb2 <lv_draw_label+0x4e2>
                if(logical_char_pos >= sel_start && logical_char_pos < sel_end) {
 800ad72:	9a05      	ldr	r2, [sp, #20]
 800ad74:	9907      	ldr	r1, [sp, #28]
 800ad76:	428a      	cmp	r2, r1
 800ad78:	d81b      	bhi.n	800adb2 <lv_draw_label+0x4e2>
 800ad7a:	9a06      	ldr	r2, [sp, #24]
 800ad7c:	428a      	cmp	r2, r1
 800ad7e:	d918      	bls.n	800adb2 <lv_draw_label+0x4e2>
                    sel_coords.x1 = pos.x;
 800ad80:	f9bd 3048 	ldrsh.w	r3, [sp, #72]	; 0x48
                    sel_coords.x2 = pos.x + letter_w + dsc->letter_space - 1;
 800ad84:	8aa1      	ldrh	r1, [r4, #20]
                    sel_coords.x1 = pos.x;
 800ad86:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
                    sel_coords.x2 = pos.x + letter_w + dsc->letter_space - 1;
 800ad8a:	3b01      	subs	r3, #1
                    sel_coords.y1 = pos.y;
 800ad8c:	f9bd 204a 	ldrsh.w	r2, [sp, #74]	; 0x4a
                    sel_coords.x2 = pos.x + letter_w + dsc->letter_space - 1;
 800ad90:	440b      	add	r3, r1
                    lv_draw_rect(&sel_coords, mask, &draw_dsc_sel);
 800ad92:	4651      	mov	r1, sl
                    sel_coords.y1 = pos.y;
 800ad94:	f8ad 2062 	strh.w	r2, [sp, #98]	; 0x62
                    sel_coords.y2 = pos.y + line_height - 1;
 800ad98:	3a01      	subs	r2, #1
                    sel_coords.x2 = pos.x + letter_w + dsc->letter_space - 1;
 800ad9a:	4403      	add	r3, r0
                    lv_draw_rect(&sel_coords, mask, &draw_dsc_sel);
 800ad9c:	a818      	add	r0, sp, #96	; 0x60
                    sel_coords.x2 = pos.x + letter_w + dsc->letter_space - 1;
 800ad9e:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
                    sel_coords.y2 = pos.y + line_height - 1;
 800ada2:	9b08      	ldr	r3, [sp, #32]
 800ada4:	441a      	add	r2, r3
 800ada6:	f8ad 2066 	strh.w	r2, [sp, #102]	; 0x66
                    lv_draw_rect(&sel_coords, mask, &draw_dsc_sel);
 800adaa:	aa1d      	add	r2, sp, #116	; 0x74
 800adac:	f001 fe8e 	bl	800cacc <lv_draw_rect>
                    color = dsc->sel_color;
 800adb0:	89e3      	ldrh	r3, [r4, #14]
            lv_draw_letter(&pos, mask, font, letter, color, opa, dsc->blend_mode);
 800adb2:	7f62      	ldrb	r2, [r4, #29]
 800adb4:	4651      	mov	r1, sl
 800adb6:	f8ad 3000 	strh.w	r3, [sp]
 800adba:	a812      	add	r0, sp, #72	; 0x48
 800adbc:	0952      	lsrs	r2, r2, #5
 800adbe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800adc0:	9202      	str	r2, [sp, #8]
 800adc2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800adc4:	9201      	str	r2, [sp, #4]
 800adc6:	4642      	mov	r2, r8
 800adc8:	f7ff fbc2 	bl	800a550 <lv_draw_letter>
            if(letter_w > 0) {
 800adcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800adce:	2b00      	cmp	r3, #0
 800add0:	f43f aeba 	beq.w	800ab48 <lv_draw_label+0x278>
                pos.x += letter_w + dsc->letter_space;
 800add4:	f8bd 0048 	ldrh.w	r0, [sp, #72]	; 0x48
 800add8:	8aa3      	ldrh	r3, [r4, #20]
 800adda:	4418      	add	r0, r3
 800addc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800adde:	4403      	add	r3, r0
 800ade0:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
 800ade4:	e6b0      	b.n	800ab48 <lv_draw_label+0x278>
        else if(dsc->align == LV_TEXT_ALIGN_RIGHT) {
 800ade6:	2b03      	cmp	r3, #3
 800ade8:	f47f af26 	bne.w	800ac38 <lv_draw_label+0x368>
                lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
 800adec:	7f23      	ldrb	r3, [r4, #28]
 800adee:	4642      	mov	r2, r8
 800adf0:	4630      	mov	r0, r6
 800adf2:	9300      	str	r3, [sp, #0]
 800adf4:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 800adf8:	f00e fb6a 	bl	80194d0 <lv_txt_get_width>
 800adfc:	88ab      	ldrh	r3, [r5, #4]
 800adfe:	882a      	ldrh	r2, [r5, #0]
 800ae00:	3301      	adds	r3, #1
 800ae02:	1a9b      	subs	r3, r3, r2
            pos.x += lv_area_get_width(coords) - line_width;
 800ae04:	b21b      	sxth	r3, r3
 800ae06:	1a18      	subs	r0, r3, r0
 800ae08:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800ae0c:	4418      	add	r0, r3
 800ae0e:	e711      	b.n	800ac34 <lv_draw_label+0x364>
 800ae10:	2000003c 	.word	0x2000003c

0800ae14 <lv_draw_line_dsc_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

LV_ATTRIBUTE_FAST_MEM void lv_draw_line_dsc_init(lv_draw_line_dsc_t * dsc)
{
 800ae14:	b510      	push	{r4, lr}
    lv_memset_00(dsc, sizeof(lv_draw_line_dsc_t));
 800ae16:	210a      	movs	r1, #10
{
 800ae18:	4604      	mov	r4, r0
    lv_memset_00(dsc, sizeof(lv_draw_line_dsc_t));
 800ae1a:	f00c fe8b 	bl	8017b34 <lv_memset_00>
    dsc->width = 1;
    dsc->opa = LV_OPA_COVER;
 800ae1e:	23ff      	movs	r3, #255	; 0xff
 800ae20:	7223      	strb	r3, [r4, #8]
    dsc->color = lv_color_black();
 800ae22:	2300      	movs	r3, #0
 800ae24:	8023      	strh	r3, [r4, #0]
    dsc->width = 1;
 800ae26:	2301      	movs	r3, #1
 800ae28:	8063      	strh	r3, [r4, #2]
}
 800ae2a:	bd10      	pop	{r4, pc}

0800ae2c <lv_draw_line>:
 * @param clip the line will be drawn only in this area
 * @param dsc pointer to an initialized `lv_draw_line_dsc_t` variable
 */
LV_ATTRIBUTE_FAST_MEM void lv_draw_line(const lv_point_t * point1, const lv_point_t * point2, const lv_area_t * clip,
                                        const lv_draw_line_dsc_t * dsc)
{
 800ae2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae30:	469b      	mov	fp, r3
    if(dsc->width == 0) return;
 800ae32:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
{
 800ae36:	ed2d 8b04 	vpush	{d8-d9}
 800ae3a:	b0bf      	sub	sp, #252	; 0xfc
 800ae3c:	ee08 2a10 	vmov	s16, r2
 800ae40:	e9cd 0105 	strd	r0, r1, [sp, #20]
    if(dsc->width == 0) return;
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	f000 80dd 	beq.w	800b004 <lv_draw_line+0x1d8>
    if(dsc->opa <= LV_OPA_MIN) return;
 800ae4a:	f89b 2008 	ldrb.w	r2, [fp, #8]
 800ae4e:	2a02      	cmp	r2, #2
 800ae50:	f240 80d8 	bls.w	800b004 <lv_draw_line+0x1d8>

    if(point1->x == point2->x && point1->y == point2->y) return;
 800ae54:	f9b0 2000 	ldrsh.w	r2, [r0]
 800ae58:	f9b1 4000 	ldrsh.w	r4, [r1]
 800ae5c:	9906      	ldr	r1, [sp, #24]
 800ae5e:	42a2      	cmp	r2, r4
 800ae60:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
 800ae64:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 800ae68:	d102      	bne.n	800ae70 <lv_draw_line+0x44>
 800ae6a:	4288      	cmp	r0, r1
 800ae6c:	f000 80ca 	beq.w	800b004 <lv_draw_line+0x1d8>

    lv_area_t clip_line;
    clip_line.x1 = LV_MIN(point1->x, point2->x) - dsc->width / 2;
 800ae70:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800ae74:	f3c3 034f 	ubfx	r3, r3, #1, #16
 800ae78:	42a2      	cmp	r2, r4
 800ae7a:	bfd4      	ite	le
 800ae7c:	ebc3 0502 	rsble	r5, r3, r2
 800ae80:	ebc3 0504 	rsbgt	r5, r3, r4
    clip_line.x2 = LV_MAX(point1->x, point2->x) + dsc->width / 2;
 800ae84:	42a2      	cmp	r2, r4
 800ae86:	bfac      	ite	ge
 800ae88:	189a      	addge	r2, r3, r2
 800ae8a:	191a      	addlt	r2, r3, r4
 800ae8c:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
    clip_line.y1 = LV_MIN(point1->y, point2->y) - dsc->width / 2;
 800ae90:	4288      	cmp	r0, r1
 800ae92:	bfd4      	ite	le
 800ae94:	ebc3 0200 	rsble	r2, r3, r0
 800ae98:	ebc3 0201 	rsbgt	r2, r3, r1
    clip_line.y2 = LV_MAX(point1->y, point2->y) + dsc->width / 2;
 800ae9c:	4288      	cmp	r0, r1
 800ae9e:	bfac      	ite	ge
 800aea0:	181b      	addge	r3, r3, r0
 800aea2:	185b      	addlt	r3, r3, r1

    bool is_common;
    is_common = _lv_area_intersect(&clip_line, &clip_line, clip);
 800aea4:	a90a      	add	r1, sp, #40	; 0x28
    clip_line.y1 = LV_MIN(point1->y, point2->y) - dsc->width / 2;
 800aea6:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
    is_common = _lv_area_intersect(&clip_line, &clip_line, clip);
 800aeaa:	ee18 2a10 	vmov	r2, s16
 800aeae:	4608      	mov	r0, r1
    clip_line.x1 = LV_MIN(point1->x, point2->x) - dsc->width / 2;
 800aeb0:	f8ad 5028 	strh.w	r5, [sp, #40]	; 0x28
    clip_line.y2 = LV_MAX(point1->y, point2->y) + dsc->width / 2;
 800aeb4:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
    is_common = _lv_area_intersect(&clip_line, &clip_line, clip);
 800aeb8:	f00b ffed 	bl	8016e96 <_lv_area_intersect>
    if(!is_common) return;
 800aebc:	2800      	cmp	r0, #0
 800aebe:	f000 80a1 	beq.w	800b004 <lv_draw_line+0x1d8>

    if(point1->y == point2->y) draw_line_hor(point1, point2, &clip_line, dsc);
 800aec2:	9b05      	ldr	r3, [sp, #20]
 800aec4:	f9bb 4002 	ldrsh.w	r4, [fp, #2]
 800aec8:	f9b3 9002 	ldrsh.w	r9, [r3, #2]
 800aecc:	9b06      	ldr	r3, [sp, #24]
 800aece:	f9b3 8002 	ldrsh.w	r8, [r3, #2]
 800aed2:	45c1      	cmp	r9, r8
 800aed4:	f040 813b 	bne.w	800b14e <lv_draw_line+0x322>
                                                const lv_area_t * clip,
                                                const lv_draw_line_dsc_t * dsc)
{
    lv_opa_t opa = dsc->opa;

    int32_t w = dsc->width - 1;
 800aed8:	3c01      	subs	r4, #1
    int32_t w_half0 = w >> 1;
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/

    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
 800aeda:	f9bb 5006 	ldrsh.w	r5, [fp, #6]
    lv_opa_t opa = dsc->opa;
 800aede:	f89b 6008 	ldrb.w	r6, [fp, #8]
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 800aee2:	f004 0301 	and.w	r3, r4, #1
    int32_t w_half0 = w >> 1;
 800aee6:	1067      	asrs	r7, r4, #1
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 800aee8:	eb03 0464 	add.w	r4, r3, r4, asr #1
    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
 800aeec:	b125      	cbz	r5, 800aef8 <lv_draw_line+0xcc>
 800aeee:	f9bb 5004 	ldrsh.w	r5, [fp, #4]
 800aef2:	3d00      	subs	r5, #0
 800aef4:	bf18      	it	ne
 800aef6:	2501      	movne	r5, #1

    bool simple_mode = true;
    if(lv_draw_mask_get_cnt()) simple_mode = false;
 800aef8:	f001 f922 	bl	800c140 <lv_draw_mask_get_cnt>
 800aefc:	2800      	cmp	r0, #0
 800aefe:	f040 8086 	bne.w	800b00e <lv_draw_line+0x1e2>
    else if(dashed) simple_mode = false;
 800af02:	f085 0201 	eor.w	r2, r5, #1

    lv_area_t draw_area;
    draw_area.x1 = LV_MIN(point1->x, point2->x);
 800af06:	9b06      	ldr	r3, [sp, #24]
 800af08:	9905      	ldr	r1, [sp, #20]
 800af0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800af0e:	f9b1 1000 	ldrsh.w	r1, [r1]
 800af12:	4618      	mov	r0, r3
 800af14:	428b      	cmp	r3, r1
 800af16:	bfa8      	it	ge
 800af18:	4608      	movge	r0, r1
    draw_area.x2 = LV_MAX(point1->x, point2->x)  - 1;
 800af1a:	428b      	cmp	r3, r1
 800af1c:	bfb8      	it	lt
 800af1e:	460b      	movlt	r3, r1
    draw_area.x1 = LV_MIN(point1->x, point2->x);
 800af20:	f8ad 0098 	strh.w	r0, [sp, #152]	; 0x98
    draw_area.x2 = LV_MAX(point1->x, point2->x)  - 1;
 800af24:	3b01      	subs	r3, #1
 800af26:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
    draw_area.y1 = point1->y - w_half1;
 800af2a:	9b05      	ldr	r3, [sp, #20]
 800af2c:	885b      	ldrh	r3, [r3, #2]
 800af2e:	1b1c      	subs	r4, r3, r4
    draw_area.y2 = point1->y + w_half0;
 800af30:	441f      	add	r7, r3
    draw_area.y1 = point1->y - w_half1;
 800af32:	f8ad 409a 	strh.w	r4, [sp, #154]	; 0x9a
    draw_area.y2 = point1->y + w_half0;
 800af36:	f8ad 709e 	strh.w	r7, [sp, #158]	; 0x9e

    /*If there is no mask then simply draw a rectangle*/
    if(simple_mode) {
 800af3a:	2a00      	cmp	r2, #0
 800af3c:	d069      	beq.n	800b012 <lv_draw_line+0x1e6>

    /*If there is no mask then simply draw a rectangle*/
    if(simple_mode) {
        _lv_blend_fill(clip, &draw_area,
                       dsc->color,  NULL, LV_DRAW_MASK_RES_FULL_COVER, opa,
                       dsc->blend_mode);
 800af3e:	f89b 3009 	ldrb.w	r3, [fp, #9]
        _lv_blend_fill(clip, &draw_area,
 800af42:	a926      	add	r1, sp, #152	; 0x98
 800af44:	f8bb 2000 	ldrh.w	r2, [fp]
 800af48:	a80a      	add	r0, sp, #40	; 0x28
 800af4a:	f003 0303 	and.w	r3, r3, #3
 800af4e:	e9cd 6301 	strd	r6, r3, [sp, #4]
 800af52:	2301      	movs	r3, #1
 800af54:	9300      	str	r3, [sp, #0]
 800af56:	2300      	movs	r3, #0
 800af58:	f7fe f962 	bl	8009220 <_lv_blend_fill>
    if(dsc->round_end || dsc->round_start) {
 800af5c:	f89b 3009 	ldrb.w	r3, [fp, #9]
 800af60:	f013 0f0c 	tst.w	r3, #12
 800af64:	d04e      	beq.n	800b004 <lv_draw_line+0x1d8>
        lv_draw_rect_dsc_init(&cir_dsc);
 800af66:	a831      	add	r0, sp, #196	; 0xc4
 800af68:	f001 fd8e 	bl	800ca88 <lv_draw_rect_dsc_init>
        cir_dsc.bg_color = dsc->color;
 800af6c:	f8bb 3000 	ldrh.w	r3, [fp]
 800af70:	f8ad 30c8 	strh.w	r3, [sp, #200]	; 0xc8
        cir_dsc.radius = LV_RADIUS_CIRCLE;
 800af74:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800af78:	f8ad 30c4 	strh.w	r3, [sp, #196]	; 0xc4
        cir_dsc.bg_opa = dsc->opa;
 800af7c:	f89b 3008 	ldrb.w	r3, [fp, #8]
 800af80:	f88d 30ce 	strb.w	r3, [sp, #206]	; 0xce
        int32_t r = (dsc->width >> 1);
 800af84:	f9bb 3002 	ldrsh.w	r3, [fp, #2]
 800af88:	105c      	asrs	r4, r3, #1
        int32_t r_corr = (dsc->width & 1) ? 0 : 1;
 800af8a:	43db      	mvns	r3, r3
 800af8c:	f003 0501 	and.w	r5, r3, #1
        if(dsc->round_start) {
 800af90:	f89b 3009 	ldrb.w	r3, [fp, #9]
 800af94:	075a      	lsls	r2, r3, #29
 800af96:	d518      	bpl.n	800afca <lv_draw_line+0x19e>
            cir_area.x1 = point1->x - r;
 800af98:	9b05      	ldr	r3, [sp, #20]
 800af9a:	881a      	ldrh	r2, [r3, #0]
 800af9c:	b2a3      	uxth	r3, r4
 800af9e:	1ad1      	subs	r1, r2, r3
            cir_area.x2 = point1->x + r - r_corr;
 800afa0:	441a      	add	r2, r3
            cir_area.x1 = point1->x - r;
 800afa2:	f8ad 1098 	strh.w	r1, [sp, #152]	; 0x98
            cir_area.x2 = point1->x + r - r_corr;
 800afa6:	1b52      	subs	r2, r2, r5
            cir_area.y1 = point1->y - r;
 800afa8:	9905      	ldr	r1, [sp, #20]
            cir_area.x2 = point1->x + r - r_corr;
 800afaa:	f8ad 209c 	strh.w	r2, [sp, #156]	; 0x9c
            lv_draw_rect(&cir_area, clip, &cir_dsc);
 800afae:	aa31      	add	r2, sp, #196	; 0xc4
            cir_area.y1 = point1->y - r;
 800afb0:	8849      	ldrh	r1, [r1, #2]
 800afb2:	1ac8      	subs	r0, r1, r3
            cir_area.y2 = point1->y + r - r_corr ;
 800afb4:	440b      	add	r3, r1
            lv_draw_rect(&cir_area, clip, &cir_dsc);
 800afb6:	ee18 1a10 	vmov	r1, s16
            cir_area.y2 = point1->y + r - r_corr ;
 800afba:	1b5b      	subs	r3, r3, r5
            cir_area.y1 = point1->y - r;
 800afbc:	f8ad 009a 	strh.w	r0, [sp, #154]	; 0x9a
            lv_draw_rect(&cir_area, clip, &cir_dsc);
 800afc0:	a826      	add	r0, sp, #152	; 0x98
            cir_area.y2 = point1->y + r - r_corr ;
 800afc2:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
            lv_draw_rect(&cir_area, clip, &cir_dsc);
 800afc6:	f001 fd81 	bl	800cacc <lv_draw_rect>
        if(dsc->round_end) {
 800afca:	f89b 3009 	ldrb.w	r3, [fp, #9]
 800afce:	071b      	lsls	r3, r3, #28
 800afd0:	d518      	bpl.n	800b004 <lv_draw_line+0x1d8>
            cir_area.x1 = point2->x - r;
 800afd2:	9b06      	ldr	r3, [sp, #24]
 800afd4:	881a      	ldrh	r2, [r3, #0]
 800afd6:	b2a3      	uxth	r3, r4
 800afd8:	1ad1      	subs	r1, r2, r3
            cir_area.x2 = point2->x + r - r_corr;
 800afda:	441a      	add	r2, r3
            cir_area.x1 = point2->x - r;
 800afdc:	f8ad 1098 	strh.w	r1, [sp, #152]	; 0x98
            cir_area.x2 = point2->x + r - r_corr;
 800afe0:	1b52      	subs	r2, r2, r5
            cir_area.y1 = point2->y - r;
 800afe2:	9906      	ldr	r1, [sp, #24]
            cir_area.x2 = point2->x + r - r_corr;
 800afe4:	f8ad 209c 	strh.w	r2, [sp, #156]	; 0x9c
            lv_draw_rect(&cir_area, clip, &cir_dsc);
 800afe8:	aa31      	add	r2, sp, #196	; 0xc4
            cir_area.y1 = point2->y - r;
 800afea:	8849      	ldrh	r1, [r1, #2]
 800afec:	1ac8      	subs	r0, r1, r3
            cir_area.y2 = point2->y + r - r_corr ;
 800afee:	440b      	add	r3, r1
            lv_draw_rect(&cir_area, clip, &cir_dsc);
 800aff0:	ee18 1a10 	vmov	r1, s16
            cir_area.y2 = point2->y + r - r_corr ;
 800aff4:	1b5b      	subs	r3, r3, r5
            cir_area.y1 = point2->y - r;
 800aff6:	f8ad 009a 	strh.w	r0, [sp, #154]	; 0x9a
            lv_draw_rect(&cir_area, clip, &cir_dsc);
 800affa:	a826      	add	r0, sp, #152	; 0x98
            cir_area.y2 = point2->y + r - r_corr ;
 800affc:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
            lv_draw_rect(&cir_area, clip, &cir_dsc);
 800b000:	f001 fd64 	bl	800cacc <lv_draw_rect>
}
 800b004:	b03f      	add	sp, #252	; 0xfc
 800b006:	ecbd 8b04 	vpop	{d8-d9}
 800b00a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(lv_draw_mask_get_cnt()) simple_mode = false;
 800b00e:	2200      	movs	r2, #0
 800b010:	e779      	b.n	800af06 <lv_draw_line+0xda>
        lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 800b012:	f7fd f9b1 	bl	8008378 <_lv_refr_get_disp_refreshing>
        lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp);
 800b016:	f00b fc8b 	bl	8016930 <lv_disp_get_draw_buf>
        is_common = _lv_area_intersect(&draw_area, clip, &draw_area);
 800b01a:	aa26      	add	r2, sp, #152	; 0x98
        lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp);
 800b01c:	4607      	mov	r7, r0
        is_common = _lv_area_intersect(&draw_area, clip, &draw_area);
 800b01e:	a90a      	add	r1, sp, #40	; 0x28
 800b020:	4610      	mov	r0, r2
 800b022:	f00b ff38 	bl	8016e96 <_lv_area_intersect>
        if(!is_common) return;
 800b026:	2800      	cmp	r0, #0
 800b028:	d098      	beq.n	800af5c <lv_draw_line+0x130>
        draw_area.y1 -= disp_area->y1;
 800b02a:	8a7c      	ldrh	r4, [r7, #18]
 800b02c:	f9bd 009a 	ldrsh.w	r0, [sp, #154]	; 0x9a
        draw_area.x1 -= disp_area->x1;
 800b030:	8a39      	ldrh	r1, [r7, #16]
        draw_area.y1 -= disp_area->y1;
 800b032:	1b03      	subs	r3, r0, r4
        draw_area.x1 -= disp_area->x1;
 800b034:	f9b7 8010 	ldrsh.w	r8, [r7, #16]
 800b038:	f8bd 6098 	ldrh.w	r6, [sp, #152]	; 0x98
        draw_area.y1 -= disp_area->y1;
 800b03c:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
        draw_area.x2 -= disp_area->x1;
 800b040:	f8bd 309c 	ldrh.w	r3, [sp, #156]	; 0x9c
        draw_area.x1 -= disp_area->x1;
 800b044:	1a72      	subs	r2, r6, r1
        draw_area.x2 -= disp_area->x1;
 800b046:	f9bd c09c 	ldrsh.w	ip, [sp, #156]	; 0x9c
 800b04a:	1a59      	subs	r1, r3, r1
        draw_area.x1 -= disp_area->x1;
 800b04c:	f9bd e098 	ldrsh.w	lr, [sp, #152]	; 0x98
 800b050:	b212      	sxth	r2, r2
        fill_area.x2 = draw_area.x2 + disp_area->x1;
 800b052:	f8ad c0c8 	strh.w	ip, [sp, #200]	; 0xc8
        draw_area.x2 -= disp_area->x1;
 800b056:	f8ad 109c 	strh.w	r1, [sp, #156]	; 0x9c
        draw_area.y2 -= disp_area->y1;
 800b05a:	f8bd 109e 	ldrh.w	r1, [sp, #158]	; 0x9e
        draw_area.x1 -= disp_area->x1;
 800b05e:	f8ad 2098 	strh.w	r2, [sp, #152]	; 0x98
        draw_area.y2 -= disp_area->y1;
 800b062:	1b0c      	subs	r4, r1, r4
        fill_area.x1 = draw_area.x1 + disp_area->x1;
 800b064:	f8ad e0c4 	strh.w	lr, [sp, #196]	; 0xc4
        fill_area.y1 = draw_area.y1 + disp_area->y1;
 800b068:	f8ad 00c6 	strh.w	r0, [sp, #198]	; 0xc6
        draw_area.y2 -= disp_area->y1;
 800b06c:	f8ad 409e 	strh.w	r4, [sp, #158]	; 0x9e
 800b070:	1c5c      	adds	r4, r3, #1
        fill_area.y2 = fill_area.y1;
 800b072:	f8ad 00ca 	strh.w	r0, [sp, #202]	; 0xca
 800b076:	1ba4      	subs	r4, r4, r6
 800b078:	b224      	sxth	r4, r4
        if(dashed) {
 800b07a:	b1dd      	cbz	r5, 800b0b4 <lv_draw_line+0x288>
            dash_start = (draw_buf->area.x1 + draw_area.x1) % (dsc->dash_gap + dsc->dash_width);
 800b07c:	4490      	add	r8, r2
 800b07e:	f9bb 3006 	ldrsh.w	r3, [fp, #6]
 800b082:	f9bb 2004 	ldrsh.w	r2, [fp, #4]
 800b086:	4413      	add	r3, r2
 800b088:	fb98 f2f3 	sdiv	r2, r8, r3
 800b08c:	fb03 8812 	mls	r8, r3, r2, r8
 800b090:	fa0f f888 	sxth.w	r8, r8
        lv_opa_t * mask_buf = lv_mem_buf_get(draw_area_w);
 800b094:	4620      	mov	r0, r4
                    for(i = 0; i < draw_area_w; i++, dash_cnt++) {
 800b096:	f04f 0a00 	mov.w	sl, #0
        lv_opa_t * mask_buf = lv_mem_buf_get(draw_area_w);
 800b09a:	f00c fcfd 	bl	8017a98 <lv_mem_buf_get>
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800b09e:	f9bd 909a 	ldrsh.w	r9, [sp, #154]	; 0x9a
        lv_opa_t * mask_buf = lv_mem_buf_get(draw_area_w);
 800b0a2:	4606      	mov	r6, r0
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800b0a4:	f9bd 309e 	ldrsh.w	r3, [sp, #158]	; 0x9e
 800b0a8:	4599      	cmp	r9, r3
 800b0aa:	dd05      	ble.n	800b0b8 <lv_draw_line+0x28c>
        lv_mem_buf_release(mask_buf);
 800b0ac:	4630      	mov	r0, r6
                           LV_BLEND_MODE_NORMAL);

            fill_area.y1++;
            fill_area.y2++;
        }
        lv_mem_buf_release(mask_buf);
 800b0ae:	f00c fb4f 	bl	8017750 <lv_mem_buf_release>
 800b0b2:	e753      	b.n	800af5c <lv_draw_line+0x130>
        lv_coord_t dash_start = 0;
 800b0b4:	46a8      	mov	r8, r5
 800b0b6:	e7ed      	b.n	800b094 <lv_draw_line+0x268>
            lv_memset_ff(mask_buf, draw_area_w);
 800b0b8:	4621      	mov	r1, r4
 800b0ba:	4630      	mov	r0, r6
 800b0bc:	f00c fd69 	bl	8017b92 <lv_memset_ff>
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf, draw_buf->area.x1 + draw_area.x1, draw_buf->area.y1 + h, draw_area_w);
 800b0c0:	f8bd 3098 	ldrh.w	r3, [sp, #152]	; 0x98
 800b0c4:	8a7a      	ldrh	r2, [r7, #18]
 800b0c6:	4630      	mov	r0, r6
 800b0c8:	8a39      	ldrh	r1, [r7, #16]
 800b0ca:	444a      	add	r2, r9
 800b0cc:	4419      	add	r1, r3
 800b0ce:	4623      	mov	r3, r4
 800b0d0:	b212      	sxth	r2, r2
 800b0d2:	b209      	sxth	r1, r1
 800b0d4:	f000 ffea 	bl	800c0ac <lv_draw_mask_apply>
 800b0d8:	4602      	mov	r2, r0
            if(dashed) {
 800b0da:	b18d      	cbz	r5, 800b100 <lv_draw_line+0x2d4>
                if(mask_res != LV_DRAW_MASK_RES_TRANSP) {
 800b0dc:	b180      	cbz	r0, 800b100 <lv_draw_line+0x2d4>
                    lv_coord_t dash_cnt = dash_start;
 800b0de:	4641      	mov	r1, r8
                    for(i = 0; i < draw_area_w; i++, dash_cnt++) {
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	e00a      	b.n	800b0fa <lv_draw_line+0x2ce>
                        if(dash_cnt <= dsc->dash_width) {
 800b0e4:	f9bb 2004 	ldrsh.w	r2, [fp, #4]
 800b0e8:	428a      	cmp	r2, r1
 800b0ea:	db26      	blt.n	800b13a <lv_draw_line+0x30e>
                            i += diff;
 800b0ec:	4413      	add	r3, r2
 800b0ee:	1a5b      	subs	r3, r3, r1
 800b0f0:	b21b      	sxth	r3, r3
                    for(i = 0; i < draw_area_w; i++, dash_cnt++) {
 800b0f2:	3301      	adds	r3, #1
 800b0f4:	3201      	adds	r2, #1
 800b0f6:	b21b      	sxth	r3, r3
 800b0f8:	b211      	sxth	r1, r2
 800b0fa:	429c      	cmp	r4, r3
 800b0fc:	dcf2      	bgt.n	800b0e4 <lv_draw_line+0x2b8>
                    mask_res = LV_DRAW_MASK_RES_CHANGED;
 800b0fe:	2202      	movs	r2, #2
                           dsc->blend_mode);
 800b100:	f89b 3009 	ldrb.w	r3, [fp, #9]
            _lv_blend_fill(clip, &fill_area,
 800b104:	a931      	add	r1, sp, #196	; 0xc4
 800b106:	a80a      	add	r0, sp, #40	; 0x28
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800b108:	f109 0901 	add.w	r9, r9, #1
            _lv_blend_fill(clip, &fill_area,
 800b10c:	f003 0303 	and.w	r3, r3, #3
 800b110:	9302      	str	r3, [sp, #8]
 800b112:	f89b 3008 	ldrb.w	r3, [fp, #8]
 800b116:	e9cd 2300 	strd	r2, r3, [sp]
 800b11a:	4633      	mov	r3, r6
 800b11c:	f8bb 2000 	ldrh.w	r2, [fp]
 800b120:	f7fe f87e 	bl	8009220 <_lv_blend_fill>
            fill_area.y1++;
 800b124:	f8bd 30c6 	ldrh.w	r3, [sp, #198]	; 0xc6
 800b128:	3301      	adds	r3, #1
 800b12a:	f8ad 30c6 	strh.w	r3, [sp, #198]	; 0xc6
            fill_area.y2++;
 800b12e:	f8bd 30ca 	ldrh.w	r3, [sp, #202]	; 0xca
 800b132:	3301      	adds	r3, #1
 800b134:	f8ad 30ca 	strh.w	r3, [sp, #202]	; 0xca
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800b138:	e7b4      	b.n	800b0a4 <lv_draw_line+0x278>
                        else if(dash_cnt >= dsc->dash_gap + dsc->dash_width) {
 800b13a:	f9bb 0006 	ldrsh.w	r0, [fp, #6]
 800b13e:	4402      	add	r2, r0
 800b140:	4291      	cmp	r1, r2
                            mask_buf[i] = 0x00;
 800b142:	bfb6      	itet	lt
 800b144:	460a      	movlt	r2, r1
                            dash_cnt = 0;
 800b146:	2200      	movge	r2, #0
                            mask_buf[i] = 0x00;
 800b148:	f806 a003 	strblt.w	sl, [r6, r3]
 800b14c:	e7d1      	b.n	800b0f2 <lv_draw_line+0x2c6>
    else if(point1->x == point2->x) draw_line_ver(point1, point2, &clip_line, dsc);
 800b14e:	9b05      	ldr	r3, [sp, #20]
 800b150:	f9b3 7000 	ldrsh.w	r7, [r3]
 800b154:	9b06      	ldr	r3, [sp, #24]
 800b156:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b15a:	42b7      	cmp	r7, r6
 800b15c:	f040 80c1 	bne.w	800b2e2 <lv_draw_line+0x4b6>
    int32_t w = dsc->width - 1;
 800b160:	3c01      	subs	r4, #1
    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
 800b162:	f9bb 5006 	ldrsh.w	r5, [fp, #6]
    lv_opa_t opa = dsc->opa;
 800b166:	f89b 6008 	ldrb.w	r6, [fp, #8]
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 800b16a:	f004 0301 	and.w	r3, r4, #1
    int32_t w_half0 = w >> 1;
 800b16e:	1067      	asrs	r7, r4, #1
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 800b170:	eb03 0464 	add.w	r4, r3, r4, asr #1
    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
 800b174:	b125      	cbz	r5, 800b180 <lv_draw_line+0x354>
 800b176:	f9bb 5004 	ldrsh.w	r5, [fp, #4]
 800b17a:	3d00      	subs	r5, #0
 800b17c:	bf18      	it	ne
 800b17e:	2501      	movne	r5, #1
    if(lv_draw_mask_get_cnt()) simple_mode = false;
 800b180:	f000 ffde 	bl	800c140 <lv_draw_mask_get_cnt>
 800b184:	2800      	cmp	r0, #0
 800b186:	d16e      	bne.n	800b266 <lv_draw_line+0x43a>
    else if(dashed) simple_mode = false;
 800b188:	f085 0201 	eor.w	r2, r5, #1
    draw_area.x1 = point1->x - w_half1;
 800b18c:	9b05      	ldr	r3, [sp, #20]
    draw_area.y1 = LV_MIN(point1->y, point2->y);
 800b18e:	9905      	ldr	r1, [sp, #20]
    draw_area.x1 = point1->x - w_half1;
 800b190:	881b      	ldrh	r3, [r3, #0]
    draw_area.y1 = LV_MIN(point1->y, point2->y);
 800b192:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
    draw_area.x1 = point1->x - w_half1;
 800b196:	1b1c      	subs	r4, r3, r4
    draw_area.x2 = point1->x + w_half0;
 800b198:	443b      	add	r3, r7
 800b19a:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
    draw_area.y1 = LV_MIN(point1->y, point2->y);
 800b19e:	9b06      	ldr	r3, [sp, #24]
    draw_area.x1 = point1->x - w_half1;
 800b1a0:	f8ad 4098 	strh.w	r4, [sp, #152]	; 0x98
    draw_area.y1 = LV_MIN(point1->y, point2->y);
 800b1a4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b1a8:	428b      	cmp	r3, r1
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	bfa8      	it	ge
 800b1ae:	4608      	movge	r0, r1
    draw_area.y2 = LV_MAX(point1->y, point2->y) - 1;
 800b1b0:	428b      	cmp	r3, r1
 800b1b2:	bfb8      	it	lt
 800b1b4:	460b      	movlt	r3, r1
    draw_area.y1 = LV_MIN(point1->y, point2->y);
 800b1b6:	f8ad 009a 	strh.w	r0, [sp, #154]	; 0x9a
    draw_area.y2 = LV_MAX(point1->y, point2->y) - 1;
 800b1ba:	3b01      	subs	r3, #1
 800b1bc:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
    if(simple_mode) {
 800b1c0:	2a00      	cmp	r2, #0
 800b1c2:	f47f aebc 	bne.w	800af3e <lv_draw_line+0x112>
        lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 800b1c6:	f7fd f8d7 	bl	8008378 <_lv_refr_get_disp_refreshing>
        lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp);
 800b1ca:	f00b fbb1 	bl	8016930 <lv_disp_get_draw_buf>
        is_common = _lv_area_intersect(&draw_area, clip, &draw_area);
 800b1ce:	aa26      	add	r2, sp, #152	; 0x98
        lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp);
 800b1d0:	4680      	mov	r8, r0
        is_common = _lv_area_intersect(&draw_area, clip, &draw_area);
 800b1d2:	a90a      	add	r1, sp, #40	; 0x28
 800b1d4:	4610      	mov	r0, r2
 800b1d6:	f00b fe5e 	bl	8016e96 <_lv_area_intersect>
        if(!is_common) return;
 800b1da:	2800      	cmp	r0, #0
 800b1dc:	f43f aebe 	beq.w	800af5c <lv_draw_line+0x130>
        draw_area.x1 -= draw_buf->area.x1;
 800b1e0:	f8b8 2010 	ldrh.w	r2, [r8, #16]
 800b1e4:	f8bd 7098 	ldrh.w	r7, [sp, #152]	; 0x98
        draw_area.y1 -= draw_buf->area.y1;
 800b1e8:	f8b8 6012 	ldrh.w	r6, [r8, #18]
 800b1ec:	f9bd 109a 	ldrsh.w	r1, [sp, #154]	; 0x9a
        draw_area.x1 -= draw_buf->area.x1;
 800b1f0:	1abb      	subs	r3, r7, r2
 800b1f2:	f9bd 4098 	ldrsh.w	r4, [sp, #152]	; 0x98
 800b1f6:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
        draw_area.y1 -= draw_buf->area.y1;
 800b1fa:	1b8b      	subs	r3, r1, r6
        draw_area.x2 -= draw_buf->area.x1;
 800b1fc:	f9bd 009c 	ldrsh.w	r0, [sp, #156]	; 0x9c
        draw_area.y1 -= draw_buf->area.y1;
 800b200:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
        draw_area.x2 -= draw_buf->area.x1;
 800b204:	f8bd 309c 	ldrh.w	r3, [sp, #156]	; 0x9c
        fill_area.x2 = draw_area.x2 + disp_area->x1;
 800b208:	f8ad 00c8 	strh.w	r0, [sp, #200]	; 0xc8
        draw_area.x2 -= draw_buf->area.x1;
 800b20c:	1a9a      	subs	r2, r3, r2
        fill_area.x1 = draw_area.x1 + disp_area->x1;
 800b20e:	f8ad 40c4 	strh.w	r4, [sp, #196]	; 0xc4
        fill_area.y1 = draw_area.y1 + disp_area->y1;
 800b212:	f8ad 10c6 	strh.w	r1, [sp, #198]	; 0xc6
        draw_area.x2 -= draw_buf->area.x1;
 800b216:	f8ad 209c 	strh.w	r2, [sp, #156]	; 0x9c
        draw_area.y2 -= draw_buf->area.y1;
 800b21a:	f8bd 209e 	ldrh.w	r2, [sp, #158]	; 0x9e
        fill_area.y2 = fill_area.y1;
 800b21e:	f8ad 10ca 	strh.w	r1, [sp, #202]	; 0xca
        draw_area.y2 -= draw_buf->area.y1;
 800b222:	1b92      	subs	r2, r2, r6
 800b224:	1c5e      	adds	r6, r3, #1
 800b226:	1bf6      	subs	r6, r6, r7
 800b228:	f8ad 209e 	strh.w	r2, [sp, #158]	; 0x9e
 800b22c:	b236      	sxth	r6, r6
        lv_opa_t * mask_buf = lv_mem_buf_get(draw_area_w);
 800b22e:	4630      	mov	r0, r6
 800b230:	f00c fc32 	bl	8017a98 <lv_mem_buf_get>
 800b234:	f9bd 709a 	ldrsh.w	r7, [sp, #154]	; 0x9a
 800b238:	4681      	mov	r9, r0
        if(dashed) {
 800b23a:	b1b5      	cbz	r5, 800b26a <lv_draw_line+0x43e>
            dash_start = (draw_buf->area.y1 + draw_area.y1) % (dsc->dash_gap + dsc->dash_width);
 800b23c:	f9bb 4004 	ldrsh.w	r4, [fp, #4]
 800b240:	f9b8 2012 	ldrsh.w	r2, [r8, #18]
 800b244:	f9bb 3006 	ldrsh.w	r3, [fp, #6]
 800b248:	443a      	add	r2, r7
 800b24a:	4423      	add	r3, r4
 800b24c:	fb92 f4f3 	sdiv	r4, r2, r3
 800b250:	fb03 2414 	mls	r4, r3, r4, r2
 800b254:	b224      	sxth	r4, r4
            _lv_blend_fill(clip, &fill_area,
 800b256:	f04f 0a00 	mov.w	sl, #0
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800b25a:	f9bd 309e 	ldrsh.w	r3, [sp, #158]	; 0x9e
 800b25e:	429f      	cmp	r7, r3
 800b260:	dd05      	ble.n	800b26e <lv_draw_line+0x442>
        lv_mem_buf_release(mask_buf);
 800b262:	4648      	mov	r0, r9
 800b264:	e723      	b.n	800b0ae <lv_draw_line+0x282>
    if(lv_draw_mask_get_cnt()) simple_mode = false;
 800b266:	2200      	movs	r2, #0
 800b268:	e790      	b.n	800b18c <lv_draw_line+0x360>
        lv_coord_t dash_start = 0;
 800b26a:	462c      	mov	r4, r5
 800b26c:	e7f3      	b.n	800b256 <lv_draw_line+0x42a>
            lv_memset_ff(mask_buf, draw_area_w);
 800b26e:	4631      	mov	r1, r6
 800b270:	4648      	mov	r0, r9
 800b272:	f00c fc8e 	bl	8017b92 <lv_memset_ff>
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf, draw_buf->area.x1 + draw_area.x1, draw_buf->area.y1 + h, draw_area_w);
 800b276:	f8bd 3098 	ldrh.w	r3, [sp, #152]	; 0x98
 800b27a:	f8b8 2012 	ldrh.w	r2, [r8, #18]
 800b27e:	4648      	mov	r0, r9
 800b280:	f8b8 1010 	ldrh.w	r1, [r8, #16]
 800b284:	443a      	add	r2, r7
 800b286:	4419      	add	r1, r3
 800b288:	4633      	mov	r3, r6
 800b28a:	b212      	sxth	r2, r2
 800b28c:	b209      	sxth	r1, r1
 800b28e:	f000 ff0d 	bl	800c0ac <lv_draw_mask_apply>
            if(dashed) {
 800b292:	b16d      	cbz	r5, 800b2b0 <lv_draw_line+0x484>
                if(mask_res != LV_DRAW_MASK_RES_TRANSP) {
 800b294:	b150      	cbz	r0, 800b2ac <lv_draw_line+0x480>
                    if(dash_cnt > dsc->dash_width) {
 800b296:	f9bb 2004 	ldrsh.w	r2, [fp, #4]
                    if(dash_cnt >= dsc->dash_gap + dsc->dash_width) {
 800b29a:	f9bb 3006 	ldrsh.w	r3, [fp, #6]
                        mask_res = LV_DRAW_MASK_RES_TRANSP;
 800b29e:	42a2      	cmp	r2, r4
 800b2a0:	bfb8      	it	lt
 800b2a2:	2000      	movlt	r0, #0
                    if(dash_cnt >= dsc->dash_gap + dsc->dash_width) {
 800b2a4:	4413      	add	r3, r2
                        dash_cnt = 0;
 800b2a6:	429c      	cmp	r4, r3
 800b2a8:	bfa8      	it	ge
 800b2aa:	2400      	movge	r4, #0
                dash_cnt ++;
 800b2ac:	3401      	adds	r4, #1
 800b2ae:	b224      	sxth	r4, r4
            _lv_blend_fill(clip, &fill_area,
 800b2b0:	f89b 3008 	ldrb.w	r3, [fp, #8]
 800b2b4:	a931      	add	r1, sp, #196	; 0xc4
 800b2b6:	f8bb 2000 	ldrh.w	r2, [fp]
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800b2ba:	3701      	adds	r7, #1
            _lv_blend_fill(clip, &fill_area,
 800b2bc:	f8cd a008 	str.w	sl, [sp, #8]
 800b2c0:	e9cd 0300 	strd	r0, r3, [sp]
 800b2c4:	464b      	mov	r3, r9
 800b2c6:	a80a      	add	r0, sp, #40	; 0x28
 800b2c8:	f7fd ffaa 	bl	8009220 <_lv_blend_fill>
            fill_area.y1++;
 800b2cc:	f8bd 30c6 	ldrh.w	r3, [sp, #198]	; 0xc6
 800b2d0:	3301      	adds	r3, #1
 800b2d2:	f8ad 30c6 	strh.w	r3, [sp, #198]	; 0xc6
            fill_area.y2++;
 800b2d6:	f8bd 30ca 	ldrh.w	r3, [sp, #202]	; 0xca
 800b2da:	3301      	adds	r3, #1
 800b2dc:	f8ad 30ca 	strh.w	r3, [sp, #202]	; 0xca
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800b2e0:	e7bb      	b.n	800b25a <lv_draw_line+0x42e>
{
#if LV_DRAW_COMPLEX
    /*Keep the great y in p1*/
    lv_point_t p1;
    lv_point_t p2;
    if(point1->y < point2->y) {
 800b2e2:	45c1      	cmp	r9, r8
 800b2e4:	db05      	blt.n	800b2f2 <lv_draw_line+0x4c6>
 800b2e6:	464b      	mov	r3, r9
 800b2e8:	46c1      	mov	r9, r8
 800b2ea:	4698      	mov	r8, r3
 800b2ec:	463b      	mov	r3, r7
 800b2ee:	4637      	mov	r7, r6
 800b2f0:	461e      	mov	r6, r3
        p2.y = point1->y;
        p1.x = point2->x;
        p2.x = point1->x;
    }

    int32_t xdiff = p2.x - p1.x;
 800b2f2:	1bf3      	subs	r3, r6, r7
    int32_t w = dsc->width;
    int32_t wcorr_i = 0;
    if(flat) wcorr_i = (LV_ABS(ydiff) << 5) / LV_ABS(xdiff);
    else wcorr_i = (LV_ABS(xdiff) << 5) / LV_ABS(ydiff);

    w = (w * wcorr[wcorr_i] + 63) >> 7;     /*+ 63 for rounding*/
 800b2f4:	213f      	movs	r1, #63	; 0x3f
    int32_t xdiff = p2.x - p1.x;
 800b2f6:	9309      	str	r3, [sp, #36]	; 0x24
    int32_t ydiff = p2.y - p1.y;
 800b2f8:	eba8 0309 	sub.w	r3, r8, r9
 800b2fc:	9308      	str	r3, [sp, #32]
    bool flat = LV_ABS(xdiff) > LV_ABS(ydiff) ? true : false;
 800b2fe:	1bf3      	subs	r3, r6, r7
 800b300:	2b00      	cmp	r3, #0
 800b302:	bfb8      	it	lt
 800b304:	425b      	neglt	r3, r3
 800b306:	9307      	str	r3, [sp, #28]
 800b308:	9b08      	ldr	r3, [sp, #32]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	bfb8      	it	lt
 800b30e:	425b      	neglt	r3, r3
 800b310:	469a      	mov	sl, r3
    if(flat) wcorr_i = (LV_ABS(ydiff) << 5) / LV_ABS(xdiff);
 800b312:	9b07      	ldr	r3, [sp, #28]
 800b314:	4553      	cmp	r3, sl
    else wcorr_i = (LV_ABS(xdiff) << 5) / LV_ABS(ydiff);
 800b316:	bfd3      	iteet	le
 800b318:	9b07      	ldrle	r3, [sp, #28]
    if(flat) wcorr_i = (LV_ABS(ydiff) << 5) / LV_ABS(xdiff);
 800b31a:	ea4f 134a 	movgt.w	r3, sl, lsl #5
 800b31e:	9a07      	ldrgt	r2, [sp, #28]
    else wcorr_i = (LV_ABS(xdiff) << 5) / LV_ABS(ydiff);
 800b320:	015b      	lslle	r3, r3, #5
    if(flat) wcorr_i = (LV_ABS(ydiff) << 5) / LV_ABS(xdiff);
 800b322:	bfcc      	ite	gt
 800b324:	fbb3 f3f2 	udivgt	r3, r3, r2
    else wcorr_i = (LV_ABS(xdiff) << 5) / LV_ABS(ydiff);
 800b328:	fbb3 f3fa 	udivle	r3, r3, sl
    w = (w * wcorr[wcorr_i] + 63) >> 7;     /*+ 63 for rounding*/
 800b32c:	4ac3      	ldr	r2, [pc, #780]	; (800b63c <lv_draw_line+0x810>)
 800b32e:	5cd3      	ldrb	r3, [r2, r3]
 800b330:	fb14 1403 	smlabb	r4, r4, r3, r1
    draw_area.y2 = LV_MAX(p1.y, p2.y) + w;

    /*Get the union of `coords` and `clip`*/
    /*`clip` is already truncated to the `draw_buf` size
     *in 'lv_refr_area' function*/
    bool is_common = _lv_area_intersect(&draw_area, &draw_area, clip);
 800b334:	a90c      	add	r1, sp, #48	; 0x30
    draw_area.x1 = LV_MIN(p1.x, p2.x) - w;
 800b336:	f3c4 13cf 	ubfx	r3, r4, #7, #16
    bool is_common = _lv_area_intersect(&draw_area, &draw_area, clip);
 800b33a:	4608      	mov	r0, r1
    w = (w * wcorr[wcorr_i] + 63) >> 7;     /*+ 63 for rounding*/
 800b33c:	11e5      	asrs	r5, r4, #7
    draw_area.x1 = LV_MIN(p1.x, p2.x) - w;
 800b33e:	42be      	cmp	r6, r7
 800b340:	bfd4      	ite	le
 800b342:	ebc3 0206 	rsble	r2, r3, r6
 800b346:	ebc3 0207 	rsbgt	r2, r3, r7
 800b34a:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
    draw_area.x2 = LV_MAX(p1.x, p2.x) + w;
 800b34e:	42be      	cmp	r6, r7
 800b350:	bfac      	ite	ge
 800b352:	199a      	addge	r2, r3, r6
 800b354:	19da      	addlt	r2, r3, r7
 800b356:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
    draw_area.y1 = LV_MIN(p1.y, p2.y) - w;
 800b35a:	45c8      	cmp	r8, r9
 800b35c:	bfd4      	ite	le
 800b35e:	ebc3 0208 	rsble	r2, r3, r8
 800b362:	ebc3 0209 	rsbgt	r2, r3, r9
    draw_area.y2 = LV_MAX(p1.y, p2.y) + w;
 800b366:	45c8      	cmp	r8, r9
 800b368:	bfac      	ite	ge
 800b36a:	4443      	addge	r3, r8
 800b36c:	444b      	addlt	r3, r9
    draw_area.y1 = LV_MIN(p1.y, p2.y) - w;
 800b36e:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
    bool is_common = _lv_area_intersect(&draw_area, &draw_area, clip);
 800b372:	aa0a      	add	r2, sp, #40	; 0x28
    draw_area.y2 = LV_MAX(p1.y, p2.y) + w;
 800b374:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
    bool is_common = _lv_area_intersect(&draw_area, &draw_area, clip);
 800b378:	f00b fd8d 	bl	8016e96 <_lv_area_intersect>
    if(is_common == false) return;
 800b37c:	2800      	cmp	r0, #0
 800b37e:	f43f aded 	beq.w	800af5c <lv_draw_line+0x130>
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 800b382:	f005 0501 	and.w	r5, r5, #1
    lv_draw_mask_line_param_t mask_left_param;
    lv_draw_mask_line_param_t mask_right_param;
    lv_draw_mask_line_param_t mask_top_param;
    lv_draw_mask_line_param_t mask_bottom_param;

    if(flat) {
 800b386:	9b07      	ldr	r3, [sp, #28]
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 800b388:	eb05 2524 	add.w	r5, r5, r4, asr #8
    if(flat) {
 800b38c:	4553      	cmp	r3, sl
 800b38e:	f3c4 240f 	ubfx	r4, r4, #8, #16
 800b392:	b2ad      	uxth	r5, r5
 800b394:	f340 80f3 	ble.w	800b57e <lv_draw_line+0x752>
        if(xdiff > 0) {
 800b398:	fa15 f389 	uxtah	r3, r5, r9
 800b39c:	eba9 0a04 	sub.w	sl, r9, r4
 800b3a0:	fa15 f588 	uxtah	r5, r5, r8
 800b3a4:	eba8 0404 	sub.w	r4, r8, r4
 800b3a8:	b21b      	sxth	r3, r3
 800b3aa:	b22d      	sxth	r5, r5
 800b3ac:	ee08 3a90 	vmov	s17, r3
 800b3b0:	1bf3      	subs	r3, r6, r7
 800b3b2:	fa0f fa8a 	sxth.w	sl, sl
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	f04f 0300 	mov.w	r3, #0
 800b3bc:	b224      	sxth	r4, r4
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
 800b3be:	9301      	str	r3, [sp, #4]
        if(xdiff > 0) {
 800b3c0:	f340 80cf 	ble.w	800b562 <lv_draw_line+0x736>
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
 800b3c4:	4633      	mov	r3, r6
 800b3c6:	4652      	mov	r2, sl
 800b3c8:	4639      	mov	r1, r7
 800b3ca:	a810      	add	r0, sp, #64	; 0x40
 800b3cc:	9400      	str	r4, [sp, #0]
 800b3ce:	f000 fec5 	bl	800c15c <lv_draw_mask_line_points_init>
                                          LV_DRAW_MASK_LINE_SIDE_LEFT);
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
 800b3d2:	2301      	movs	r3, #1
 800b3d4:	ee18 2a90 	vmov	r2, s17
 800b3d8:	e9cd 5300 	strd	r5, r3, [sp]
 800b3dc:	4633      	mov	r3, r6
                                          LV_DRAW_MASK_LINE_SIDE_RIGHT);
        }
        else {
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
                                          LV_DRAW_MASK_LINE_SIDE_LEFT);
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
 800b3de:	4639      	mov	r1, r7
        }
    }
    else {
        lv_draw_mask_line_points_init(&mask_left_param, p1.x + w_half1, p1.y, p2.x + w_half1, p2.y,
                                      LV_DRAW_MASK_LINE_SIDE_LEFT);
        lv_draw_mask_line_points_init(&mask_right_param, p1.x - w_half0, p1.y, p2.x - w_half0, p2.y,
 800b3e0:	a81b      	add	r0, sp, #108	; 0x6c
 800b3e2:	f000 febb 	bl	800c15c <lv_draw_mask_line_points_init>
                                      LV_DRAW_MASK_LINE_SIDE_RIGHT);
    }

    /*Use the normal vector for the endings*/

    int16_t mask_left_id = lv_draw_mask_add(&mask_left_param, NULL);
 800b3e6:	2100      	movs	r1, #0
 800b3e8:	a810      	add	r0, sp, #64	; 0x40
 800b3ea:	f000 fe49 	bl	800c080 <lv_draw_mask_add>
    int16_t mask_right_id = lv_draw_mask_add(&mask_right_param, NULL);
 800b3ee:	2100      	movs	r1, #0
    int16_t mask_left_id = lv_draw_mask_add(&mask_left_param, NULL);
 800b3f0:	ee09 0a10 	vmov	s18, r0
    int16_t mask_right_id = lv_draw_mask_add(&mask_right_param, NULL);
 800b3f4:	a81b      	add	r0, sp, #108	; 0x6c
 800b3f6:	f000 fe43 	bl	800c080 <lv_draw_mask_add>
    int16_t mask_top_id = LV_MASK_ID_INV;
    int16_t mask_bottom_id = LV_MASK_ID_INV;

    if(!dsc->raw_end) {
 800b3fa:	f89b 5009 	ldrb.w	r5, [fp, #9]
    int16_t mask_right_id = lv_draw_mask_add(&mask_right_param, NULL);
 800b3fe:	ee09 0a90 	vmov	s19, r0
    if(!dsc->raw_end) {
 800b402:	f015 0510 	ands.w	r5, r5, #16
 800b406:	f040 80d4 	bne.w	800b5b2 <lv_draw_line+0x786>
        lv_draw_mask_line_points_init(&mask_top_param, p1.x, p1.y, p1.x - ydiff, p1.y + xdiff, LV_DRAW_MASK_LINE_SIDE_BOTTOM);
 800b40a:	2203      	movs	r2, #3
 800b40c:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 800b410:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
 800b414:	4639      	mov	r1, r7
 800b416:	9201      	str	r2, [sp, #4]
 800b418:	1bf2      	subs	r2, r6, r7
 800b41a:	1b3b      	subs	r3, r7, r4
 800b41c:	a826      	add	r0, sp, #152	; 0x98
 800b41e:	fa19 f282 	uxtah	r2, r9, r2
        lv_draw_mask_line_points_init(&mask_bottom_param, p2.x, p2.y, p2.x - ydiff, p2.y + xdiff,  LV_DRAW_MASK_LINE_SIDE_TOP);
 800b422:	44c2      	add	sl, r8
        lv_draw_mask_line_points_init(&mask_top_param, p1.x, p1.y, p1.x - ydiff, p1.y + xdiff, LV_DRAW_MASK_LINE_SIDE_BOTTOM);
 800b424:	b21b      	sxth	r3, r3
 800b426:	b212      	sxth	r2, r2
 800b428:	9200      	str	r2, [sp, #0]
 800b42a:	464a      	mov	r2, r9
 800b42c:	f000 fe96 	bl	800c15c <lv_draw_mask_line_points_init>
        lv_draw_mask_line_points_init(&mask_bottom_param, p2.x, p2.y, p2.x - ydiff, p2.y + xdiff,  LV_DRAW_MASK_LINE_SIDE_TOP);
 800b430:	2202      	movs	r2, #2
 800b432:	1b33      	subs	r3, r6, r4
 800b434:	4631      	mov	r1, r6
 800b436:	9201      	str	r2, [sp, #4]
 800b438:	fa0f f28a 	sxth.w	r2, sl
 800b43c:	b21b      	sxth	r3, r3
 800b43e:	a831      	add	r0, sp, #196	; 0xc4
 800b440:	9200      	str	r2, [sp, #0]
 800b442:	4642      	mov	r2, r8
 800b444:	f000 fe8a 	bl	800c15c <lv_draw_mask_line_points_init>
        mask_top_id = lv_draw_mask_add(&mask_top_param, NULL);
 800b448:	4629      	mov	r1, r5
 800b44a:	a826      	add	r0, sp, #152	; 0x98
 800b44c:	f000 fe18 	bl	800c080 <lv_draw_mask_add>
        mask_bottom_id = lv_draw_mask_add(&mask_bottom_param, NULL);
 800b450:	4629      	mov	r1, r5
        mask_top_id = lv_draw_mask_add(&mask_top_param, NULL);
 800b452:	9008      	str	r0, [sp, #32]
        mask_bottom_id = lv_draw_mask_add(&mask_bottom_param, NULL);
 800b454:	a831      	add	r0, sp, #196	; 0xc4
 800b456:	f000 fe13 	bl	800c080 <lv_draw_mask_add>
 800b45a:	4681      	mov	r9, r0
    }

    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 800b45c:	f7fc ff8c 	bl	8008378 <_lv_refr_get_disp_refreshing>
 800b460:	4605      	mov	r5, r0
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp);
 800b462:	f00b fa65 	bl	8016930 <lv_disp_get_draw_buf>

    const lv_area_t * disp_area = &draw_buf->area;

    /*Store the coordinates of the `draw_a` relative to the draw_buf*/
    draw_area.x1 -= disp_area->x1;
 800b466:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 800b46a:	8a02      	ldrh	r2, [r0, #16]
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp);
 800b46c:	4606      	mov	r6, r0
    draw_area.y1 -= disp_area->y1;
 800b46e:	8a40      	ldrh	r0, [r0, #18]
    draw_area.x1 -= disp_area->x1;
 800b470:	1a8b      	subs	r3, r1, r2
 800b472:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
    draw_area.y1 -= disp_area->y1;
 800b476:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 800b47a:	1a1b      	subs	r3, r3, r0
 800b47c:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
    draw_area.x2 -= disp_area->x1;
 800b480:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 800b484:	1a9a      	subs	r2, r3, r2
 800b486:	1c5c      	adds	r4, r3, #1
 800b488:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 800b48c:	1a64      	subs	r4, r4, r1
    draw_area.y2 -= disp_area->y1;
 800b48e:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
 800b492:	b224      	sxth	r4, r4
 800b494:	1a12      	subs	r2, r2, r0
     *So deal with it only with steep lines.*/
    int32_t draw_area_w = lv_area_get_width(&draw_area);

    /*Draw the background line by line*/
    int32_t h;
    uint32_t hor_res = (uint32_t)lv_disp_get_hor_res(disp);
 800b496:	4628      	mov	r0, r5
    draw_area.y2 -= disp_area->y1;
 800b498:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
    uint32_t hor_res = (uint32_t)lv_disp_get_hor_res(disp);
 800b49c:	f00b fa0a 	bl	80168b4 <lv_disp_get_hor_res>
 800b4a0:	4605      	mov	r5, r0
    size_t mask_buf_size = LV_MIN(lv_area_get_size(&draw_area), hor_res);
 800b4a2:	a80c      	add	r0, sp, #48	; 0x30
 800b4a4:	f00b fcc9 	bl	8016e3a <lv_area_get_size>
 800b4a8:	4285      	cmp	r5, r0
 800b4aa:	d903      	bls.n	800b4b4 <lv_draw_line+0x688>
 800b4ac:	a80c      	add	r0, sp, #48	; 0x30
 800b4ae:	f00b fcc4 	bl	8016e3a <lv_area_get_size>
 800b4b2:	4605      	mov	r5, r0
    lv_opa_t * mask_buf = lv_mem_buf_get(mask_buf_size);
 800b4b4:	4628      	mov	r0, r5
    fill_area.y1 = draw_area.y1 + disp_area->y1;
    fill_area.y2 = fill_area.y1;

    int32_t x = draw_buf->area.x1 + draw_area.x1;

    uint32_t mask_p = 0;
 800b4b6:	f04f 0800 	mov.w	r8, #0
    lv_opa_t * mask_buf = lv_mem_buf_get(mask_buf_size);
 800b4ba:	f00c faed 	bl	8017a98 <lv_mem_buf_get>
    fill_area.x1 = draw_area.x1 + disp_area->x1;
 800b4be:	8a33      	ldrh	r3, [r6, #16]
 800b4c0:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30

    lv_memset_ff(mask_buf, mask_buf_size);
 800b4c4:	4629      	mov	r1, r5
    lv_opa_t * mask_buf = lv_mem_buf_get(mask_buf_size);
 800b4c6:	4607      	mov	r7, r0
    fill_area.x1 = draw_area.x1 + disp_area->x1;
 800b4c8:	441a      	add	r2, r3
 800b4ca:	b212      	sxth	r2, r2
 800b4cc:	9207      	str	r2, [sp, #28]
 800b4ce:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
    fill_area.x2 = draw_area.x2 + disp_area->x1;
 800b4d2:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800b4d6:	4413      	add	r3, r2
    fill_area.y1 = draw_area.y1 + disp_area->y1;
 800b4d8:	8a72      	ldrh	r2, [r6, #18]
    fill_area.x2 = draw_area.x2 + disp_area->x1;
 800b4da:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
    fill_area.y1 = draw_area.y1 + disp_area->y1;
 800b4de:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 800b4e2:	4413      	add	r3, r2
 800b4e4:	b21b      	sxth	r3, r3
 800b4e6:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
    fill_area.y2 = fill_area.y1;
 800b4ea:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
    lv_memset_ff(mask_buf, mask_buf_size);
 800b4ee:	f00c fb50 	bl	8017b92 <lv_memset_ff>
    /*Fill the first row with 'color'*/
    for(h = draw_area.y1 + disp_area->y1; h <= draw_area.y2 + disp_area->y1; h++) {
 800b4f2:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 800b4f6:	f9b6 a012 	ldrsh.w	sl, [r6, #18]
 800b4fa:	449a      	add	sl, r3
 800b4fc:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 800b500:	f9b6 2012 	ldrsh.w	r2, [r6, #18]
 800b504:	4413      	add	r3, r2
 800b506:	459a      	cmp	sl, r3
 800b508:	dd58      	ble.n	800b5bc <lv_draw_line+0x790>
            lv_memset_ff(mask_buf, mask_buf_size);
        }
    }

    /*Flush the last part*/
    if(fill_area.y1 != fill_area.y2) {
 800b50a:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 800b50e:	f9bd 203a 	ldrsh.w	r2, [sp, #58]	; 0x3a
 800b512:	429a      	cmp	r2, r3
 800b514:	d013      	beq.n	800b53e <lv_draw_line+0x712>
        fill_area.y2--;
 800b516:	3b01      	subs	r3, #1
        _lv_blend_fill(&fill_area, clip,
 800b518:	f8bb 2000 	ldrh.w	r2, [fp]
 800b51c:	a90a      	add	r1, sp, #40	; 0x28
 800b51e:	a80e      	add	r0, sp, #56	; 0x38
        fill_area.y2--;
 800b520:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
                       dsc->color, mask_buf, LV_DRAW_MASK_RES_CHANGED, dsc->opa,
                       dsc->blend_mode);
 800b524:	f89b 3009 	ldrb.w	r3, [fp, #9]
        _lv_blend_fill(&fill_area, clip,
 800b528:	f003 0303 	and.w	r3, r3, #3
 800b52c:	9302      	str	r3, [sp, #8]
 800b52e:	f89b 3008 	ldrb.w	r3, [fp, #8]
 800b532:	9301      	str	r3, [sp, #4]
 800b534:	2302      	movs	r3, #2
 800b536:	9300      	str	r3, [sp, #0]
 800b538:	463b      	mov	r3, r7
 800b53a:	f7fd fe71 	bl	8009220 <_lv_blend_fill>

    }

    lv_mem_buf_release(mask_buf);
 800b53e:	4638      	mov	r0, r7
 800b540:	f00c f906 	bl	8017750 <lv_mem_buf_release>

    lv_draw_mask_remove_id(mask_left_id);
 800b544:	ee19 0a10 	vmov	r0, s18
 800b548:	f000 fdd2 	bl	800c0f0 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_right_id);
 800b54c:	ee19 0a90 	vmov	r0, s19
 800b550:	f000 fdce 	bl	800c0f0 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_top_id);
 800b554:	9808      	ldr	r0, [sp, #32]
 800b556:	f000 fdcb 	bl	800c0f0 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_bottom_id);
 800b55a:	4648      	mov	r0, r9
 800b55c:	f000 fdc8 	bl	800c0f0 <lv_draw_mask_remove_id>
 800b560:	e4fc      	b.n	800af5c <lv_draw_line+0x130>
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
 800b562:	4633      	mov	r3, r6
 800b564:	ee18 2a90 	vmov	r2, s17
 800b568:	4639      	mov	r1, r7
 800b56a:	a810      	add	r0, sp, #64	; 0x40
 800b56c:	9500      	str	r5, [sp, #0]
 800b56e:	f000 fdf5 	bl	800c15c <lv_draw_mask_line_points_init>
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
 800b572:	2301      	movs	r3, #1
 800b574:	4652      	mov	r2, sl
 800b576:	e9cd 4300 	strd	r4, r3, [sp]
 800b57a:	4633      	mov	r3, r6
 800b57c:	e72f      	b.n	800b3de <lv_draw_line+0x5b2>
        lv_draw_mask_line_points_init(&mask_left_param, p1.x + w_half1, p1.y, p2.x + w_half1, p2.y,
 800b57e:	fa15 f386 	uxtah	r3, r5, r6
 800b582:	2200      	movs	r2, #0
 800b584:	fa15 f587 	uxtah	r5, r5, r7
 800b588:	a810      	add	r0, sp, #64	; 0x40
 800b58a:	b21b      	sxth	r3, r3
 800b58c:	b229      	sxth	r1, r5
 800b58e:	fa1f fa87 	uxth.w	sl, r7
 800b592:	e9cd 8200 	strd	r8, r2, [sp]
 800b596:	464a      	mov	r2, r9
 800b598:	f000 fde0 	bl	800c15c <lv_draw_mask_line_points_init>
        lv_draw_mask_line_points_init(&mask_right_param, p1.x - w_half0, p1.y, p2.x - w_half0, p2.y,
 800b59c:	2201      	movs	r2, #1
 800b59e:	b2b3      	uxth	r3, r6
 800b5a0:	ebaa 0104 	sub.w	r1, sl, r4
 800b5a4:	1b1b      	subs	r3, r3, r4
 800b5a6:	b209      	sxth	r1, r1
 800b5a8:	e9cd 8200 	strd	r8, r2, [sp]
 800b5ac:	b21b      	sxth	r3, r3
 800b5ae:	464a      	mov	r2, r9
 800b5b0:	e716      	b.n	800b3e0 <lv_draw_line+0x5b4>
    int16_t mask_bottom_id = LV_MASK_ID_INV;
 800b5b2:	f04f 39ff 	mov.w	r9, #4294967295
    int16_t mask_top_id = LV_MASK_ID_INV;
 800b5b6:	f8cd 9020 	str.w	r9, [sp, #32]
 800b5ba:	e74f      	b.n	800b45c <lv_draw_line+0x630>
        lv_draw_mask_res_t mask_res = lv_draw_mask_apply(&mask_buf[mask_p], x, h, draw_area_w);
 800b5bc:	eb07 0308 	add.w	r3, r7, r8
 800b5c0:	fa0f f28a 	sxth.w	r2, sl
 800b5c4:	9907      	ldr	r1, [sp, #28]
 800b5c6:	ee08 3a90 	vmov	s17, r3
 800b5ca:	4623      	mov	r3, r4
 800b5cc:	ee18 0a90 	vmov	r0, s17
 800b5d0:	f000 fd6c 	bl	800c0ac <lv_draw_mask_apply>
        if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
 800b5d4:	b920      	cbnz	r0, 800b5e0 <lv_draw_line+0x7b4>
            lv_memset_00(&mask_buf[mask_p], draw_area_w);
 800b5d6:	4621      	mov	r1, r4
 800b5d8:	ee18 0a90 	vmov	r0, s17
 800b5dc:	f00c faaa 	bl	8017b34 <lv_memset_00>
        mask_p += draw_area_w;
 800b5e0:	44a0      	add	r8, r4
        if((uint32_t) mask_p + draw_area_w < mask_buf_size) {
 800b5e2:	eb08 0304 	add.w	r3, r8, r4
 800b5e6:	429d      	cmp	r5, r3
 800b5e8:	d907      	bls.n	800b5fa <lv_draw_line+0x7ce>
            fill_area.y2 ++;
 800b5ea:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800b5ee:	3301      	adds	r3, #1
 800b5f0:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
    for(h = draw_area.y1 + disp_area->y1; h <= draw_area.y2 + disp_area->y1; h++) {
 800b5f4:	f10a 0a01 	add.w	sl, sl, #1
 800b5f8:	e780      	b.n	800b4fc <lv_draw_line+0x6d0>
                           dsc->blend_mode);
 800b5fa:	f89b 3009 	ldrb.w	r3, [fp, #9]
            _lv_blend_fill(&fill_area, clip,
 800b5fe:	a90a      	add	r1, sp, #40	; 0x28
 800b600:	f8bb 2000 	ldrh.w	r2, [fp]
 800b604:	a80e      	add	r0, sp, #56	; 0x38
 800b606:	f003 0303 	and.w	r3, r3, #3
            mask_p = 0;
 800b60a:	f04f 0800 	mov.w	r8, #0
            _lv_blend_fill(&fill_area, clip,
 800b60e:	9302      	str	r3, [sp, #8]
 800b610:	f89b 3008 	ldrb.w	r3, [fp, #8]
 800b614:	9301      	str	r3, [sp, #4]
 800b616:	2302      	movs	r3, #2
 800b618:	9300      	str	r3, [sp, #0]
 800b61a:	463b      	mov	r3, r7
 800b61c:	f7fd fe00 	bl	8009220 <_lv_blend_fill>
            fill_area.y1 = fill_area.y2 + 1;
 800b620:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
            lv_memset_ff(mask_buf, mask_buf_size);
 800b624:	4629      	mov	r1, r5
 800b626:	4638      	mov	r0, r7
            fill_area.y1 = fill_area.y2 + 1;
 800b628:	3301      	adds	r3, #1
 800b62a:	b21b      	sxth	r3, r3
 800b62c:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
            fill_area.y2 = fill_area.y1;
 800b630:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
            lv_memset_ff(mask_buf, mask_buf_size);
 800b634:	f00c faad 	bl	8017b92 <lv_memset_ff>
 800b638:	e7dc      	b.n	800b5f4 <lv_draw_line+0x7c8>
 800b63a:	bf00      	nop
 800b63c:	080250ed 	.word	0x080250ed

0800b640 <mask_mix>:
    return LV_DRAW_MASK_RES_CHANGED;
}

LV_ATTRIBUTE_FAST_MEM static inline lv_opa_t mask_mix(lv_opa_t mask_act, lv_opa_t mask_new)
{
    if(mask_new >= LV_OPA_MAX) return mask_act;
 800b640:	29fc      	cmp	r1, #252	; 0xfc
 800b642:	d80a      	bhi.n	800b65a <mask_mix+0x1a>
    if(mask_new <= LV_OPA_MIN) return 0;
 800b644:	2902      	cmp	r1, #2
 800b646:	d907      	bls.n	800b658 <mask_mix+0x18>

    return LV_UDIV255(mask_act * mask_new);// >> 8);
 800b648:	fb10 f001 	smulbb	r0, r0, r1
 800b64c:	f248 0181 	movw	r1, #32897	; 0x8081
 800b650:	4348      	muls	r0, r1
 800b652:	f3c0 50c7 	ubfx	r0, r0, #23, #8
 800b656:	4770      	bx	lr
    if(mask_new <= LV_OPA_MIN) return 0;
 800b658:	2000      	movs	r0, #0
}
 800b65a:	4770      	bx	lr

0800b65c <lv_draw_mask_line>:
{
 800b65c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b660:	9e08      	ldr	r6, [sp, #32]
 800b662:	4605      	mov	r5, r0
    abs_y -= p->origo.y;
 800b664:	8ab4      	ldrh	r4, [r6, #20]
    abs_x -= p->origo.x;
 800b666:	f8b6 8012 	ldrh.w	r8, [r6, #18]
    abs_y -= p->origo.y;
 800b66a:	1b12      	subs	r2, r2, r4
    abs_x -= p->origo.x;
 800b66c:	eba1 0108 	sub.w	r1, r1, r8
    abs_y -= p->origo.y;
 800b670:	b214      	sxth	r4, r2
    abs_x -= p->origo.x;
 800b672:	f896 2028 	ldrb.w	r2, [r6, #40]	; 0x28
 800b676:	fa0f f881 	sxth.w	r8, r1
    if(p->steep == 0) {
 800b67a:	6a31      	ldr	r1, [r6, #32]
 800b67c:	f002 0001 	and.w	r0, r2, #1
 800b680:	2900      	cmp	r1, #0
 800b682:	d13a      	bne.n	800b6fa <lv_draw_mask_line+0x9e>
        if(p->flat) {
 800b684:	7c32      	ldrb	r2, [r6, #16]
 800b686:	f002 0602 	and.w	r6, r2, #2
 800b68a:	b180      	cbz	r0, 800b6ae <lv_draw_mask_line+0x52>
            if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT ||
 800b68c:	b13e      	cbz	r6, 800b69e <lv_draw_mask_line+0x42>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP && abs_y + 1 < 0) return LV_DRAW_MASK_RES_FULL_COVER;
 800b68e:	f002 0203 	and.w	r2, r2, #3
 800b692:	2a02      	cmp	r2, #2
 800b694:	d105      	bne.n	800b6a2 <lv_draw_mask_line+0x46>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
 800b696:	3401      	adds	r4, #1
 800b698:	bfac      	ite	ge
 800b69a:	2000      	movge	r0, #0
 800b69c:	2001      	movlt	r0, #1
}
 800b69e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM && abs_y > 0) return LV_DRAW_MASK_RES_FULL_COVER;
 800b6a2:	2a03      	cmp	r2, #3
 800b6a4:	d101      	bne.n	800b6aa <lv_draw_mask_line+0x4e>
 800b6a6:	2c00      	cmp	r4, #0
 800b6a8:	dcf9      	bgt.n	800b69e <lv_draw_mask_line+0x42>
                return LV_DRAW_MASK_RES_TRANSP;
 800b6aa:	2000      	movs	r0, #0
 800b6ac:	e7f7      	b.n	800b69e <lv_draw_mask_line+0x42>
            if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP ||
 800b6ae:	2e00      	cmp	r6, #0
 800b6b0:	f040 8173 	bne.w	800b99a <lv_draw_mask_line+0x33e>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT && abs_x > 0) return LV_DRAW_MASK_RES_FULL_COVER;
 800b6b4:	f002 0003 	and.w	r0, r2, #3
 800b6b8:	2801      	cmp	r0, #1
 800b6ba:	d10e      	bne.n	800b6da <lv_draw_mask_line+0x7e>
 800b6bc:	f1b8 0f00 	cmp.w	r8, #0
 800b6c0:	dced      	bgt.n	800b69e <lv_draw_mask_line+0x42>
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_TRANSP;
 800b6c2:	eb18 0f03 	cmn.w	r8, r3
 800b6c6:	d4f0      	bmi.n	800b6aa <lv_draw_mask_line+0x4e>
                    if(k < 0) k = 0;
 800b6c8:	f1b8 0f00 	cmp.w	r8, #0
 800b6cc:	f300 8167 	bgt.w	800b99e <lv_draw_mask_line+0x342>
                    int32_t k = - abs_x;
 800b6d0:	f1c8 0100 	rsb	r1, r8, #0
                    if(k >= len) return LV_DRAW_MASK_RES_TRANSP;
 800b6d4:	428b      	cmp	r3, r1
 800b6d6:	dde8      	ble.n	800b6aa <lv_draw_mask_line+0x4e>
 800b6d8:	e0a3      	b.n	800b822 <lv_draw_mask_line+0x1c6>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT) {
 800b6da:	2800      	cmp	r0, #0
 800b6dc:	d1f1      	bne.n	800b6c2 <lv_draw_mask_line+0x66>
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_FULL_COVER;
 800b6de:	eb13 0108 	adds.w	r1, r3, r8
 800b6e2:	f100 815a 	bmi.w	800b99a <lv_draw_mask_line+0x33e>
                    if(k < 0) return LV_DRAW_MASK_RES_TRANSP;
 800b6e6:	f1b8 0f00 	cmp.w	r8, #0
 800b6ea:	dcde      	bgt.n	800b6aa <lv_draw_mask_line+0x4e>
                    int32_t k = - abs_x;
 800b6ec:	f1c8 0000 	rsb	r0, r8, #0
                    if(k >= 0 && k < len) lv_memset_00(&mask_buf[k], len - k);
 800b6f0:	4298      	cmp	r0, r3
 800b6f2:	f2c0 80a1 	blt.w	800b838 <lv_draw_mask_line+0x1dc>
    return LV_DRAW_MASK_RES_CHANGED;
 800b6f6:	2002      	movs	r0, #2
 800b6f8:	e7d1      	b.n	800b69e <lv_draw_mask_line+0x42>
    if(p->flat) {
 800b6fa:	f002 0202 	and.w	r2, r2, #2
 800b6fe:	2800      	cmp	r0, #0
 800b700:	f000 809e 	beq.w	800b840 <lv_draw_mask_line+0x1e4>
    y_at_x = (int32_t)((int32_t)p->yx_steep * abs_x) >> 10;
 800b704:	69f0      	ldr	r0, [r6, #28]
 800b706:	b2d2      	uxtb	r2, r2
 800b708:	fb08 f100 	mul.w	r1, r8, r0
    if(p->yx_steep > 0) {
 800b70c:	2800      	cmp	r0, #0
    y_at_x = (int32_t)((int32_t)p->yx_steep * abs_x) >> 10;
 800b70e:	ea4f 21a1 	mov.w	r1, r1, asr #10
    if(p->yx_steep > 0) {
 800b712:	dd05      	ble.n	800b720 <lv_draw_mask_line+0xc4>
        if(y_at_x > abs_y) {
 800b714:	42a1      	cmp	r1, r4
 800b716:	dd05      	ble.n	800b724 <lv_draw_mask_line+0xc8>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
 800b718:	1e10      	subs	r0, r2, #0
 800b71a:	bf18      	it	ne
 800b71c:	2001      	movne	r0, #1
 800b71e:	e7be      	b.n	800b69e <lv_draw_mask_line+0x42>
        if(y_at_x < abs_y) {
 800b720:	42a1      	cmp	r1, r4
 800b722:	dbf9      	blt.n	800b718 <lv_draw_mask_line+0xbc>
    y_at_x = (int32_t)((int32_t)p->yx_steep * (abs_x + len)) >> 10;
 800b724:	eb03 0108 	add.w	r1, r3, r8
    if(p->yx_steep > 0) {
 800b728:	2800      	cmp	r0, #0
    y_at_x = (int32_t)((int32_t)p->yx_steep * (abs_x + len)) >> 10;
 800b72a:	fb00 f101 	mul.w	r1, r0, r1
 800b72e:	ea4f 21a1 	mov.w	r1, r1, asr #10
    if(p->yx_steep > 0) {
 800b732:	dd05      	ble.n	800b740 <lv_draw_mask_line+0xe4>
        if(y_at_x < abs_y) {
 800b734:	42a1      	cmp	r1, r4
 800b736:	da09      	bge.n	800b74c <lv_draw_mask_line+0xf0>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
 800b738:	fab2 f082 	clz	r0, r2
 800b73c:	0940      	lsrs	r0, r0, #5
 800b73e:	e7ae      	b.n	800b69e <lv_draw_mask_line+0x42>
        if(y_at_x > abs_y) {
 800b740:	42a1      	cmp	r1, r4
 800b742:	dcf9      	bgt.n	800b738 <lv_draw_mask_line+0xdc>
    else xe = (((abs_y + 1) * 256) * p->xy_steep) >> 10;
 800b744:	69b1      	ldr	r1, [r6, #24]
 800b746:	fb04 1401 	mla	r4, r4, r1, r1
 800b74a:	e001      	b.n	800b750 <lv_draw_mask_line+0xf4>
    if(p->yx_steep > 0) xe = ((abs_y * 256) * p->xy_steep) >> 10;
 800b74c:	69b1      	ldr	r1, [r6, #24]
 800b74e:	434c      	muls	r4, r1
    else xe = (((abs_y + 1) * 256) * p->xy_steep) >> 10;
 800b750:	f344 0495 	sbfx	r4, r4, #2, #22
    if(xef == 0) px_h = 255;
 800b754:	f014 07ff 	ands.w	r7, r4, #255	; 0xff
    int32_t xei = xe >> 8;
 800b758:	ea4f 2124 	mov.w	r1, r4, asr #8
    else px_h = 255 - (((255 - xef) * p->spx) >> 8);
 800b75c:	bf1a      	itte	ne
 800b75e:	6a70      	ldrne	r0, [r6, #36]	; 0x24
 800b760:	f1c7 04ff 	rsbne	r4, r7, #255	; 0xff
    if(xef == 0) px_h = 255;
 800b764:	24ff      	moveq	r4, #255	; 0xff
    int32_t k = xei - abs_x;
 800b766:	eba1 0808 	sub.w	r8, r1, r8
    else px_h = 255 - (((255 - xef) * p->spx) >> 8);
 800b76a:	bf1e      	ittt	ne
 800b76c:	4344      	mulne	r4, r0
 800b76e:	1224      	asrne	r4, r4, #8
 800b770:	f1c4 04ff 	rsbne	r4, r4, #255	; 0xff
    if(xef) {
 800b774:	2f00      	cmp	r7, #0
 800b776:	d056      	beq.n	800b826 <lv_draw_mask_line+0x1ca>
        if(k >= 0 && k < len) {
 800b778:	f1b8 0f00 	cmp.w	r8, #0
 800b77c:	db11      	blt.n	800b7a2 <lv_draw_mask_line+0x146>
 800b77e:	4543      	cmp	r3, r8
 800b780:	dd0f      	ble.n	800b7a2 <lv_draw_mask_line+0x146>
            m = 255 - (((255 - xef) * (255 - px_h)) >> 9);
 800b782:	f1c4 01ff 	rsb	r1, r4, #255	; 0xff
 800b786:	f1c7 07ff 	rsb	r7, r7, #255	; 0xff
 800b78a:	434f      	muls	r7, r1
 800b78c:	f3c7 2147 	ubfx	r1, r7, #9, #8
            if(p->inv) m = 255 - m;
 800b790:	b90a      	cbnz	r2, 800b796 <lv_draw_mask_line+0x13a>
            m = 255 - (((255 - xef) * (255 - px_h)) >> 9);
 800b792:	43c9      	mvns	r1, r1
 800b794:	b2c9      	uxtb	r1, r1
            mask_buf[k] = mask_mix(mask_buf[k], m);
 800b796:	f815 0008 	ldrb.w	r0, [r5, r8]
 800b79a:	f7ff ff51 	bl	800b640 <mask_mix>
 800b79e:	f805 0008 	strb.w	r0, [r5, r8]
        k++;
 800b7a2:	f108 0201 	add.w	r2, r8, #1
    while(px_h > p->spx) {
 800b7a6:	6a71      	ldr	r1, [r6, #36]	; 0x24
 800b7a8:	f896 0028 	ldrb.w	r0, [r6, #40]	; 0x28
 800b7ac:	428c      	cmp	r4, r1
 800b7ae:	f000 0002 	and.w	r0, r0, #2
 800b7b2:	dc16      	bgt.n	800b7e2 <lv_draw_mask_line+0x186>
    if(k < len && k >= 0) {
 800b7b4:	4293      	cmp	r3, r2
 800b7b6:	dd28      	ble.n	800b80a <lv_draw_mask_line+0x1ae>
 800b7b8:	2a00      	cmp	r2, #0
 800b7ba:	db26      	blt.n	800b80a <lv_draw_mask_line+0x1ae>
        int32_t x_inters = (px_h * p->xy_steep) >> 10;
 800b7bc:	69b1      	ldr	r1, [r6, #24]
 800b7be:	4361      	muls	r1, r4
 800b7c0:	1289      	asrs	r1, r1, #10
        m = (x_inters * px_h) >> 9;
 800b7c2:	4361      	muls	r1, r4
        if(p->yx_steep < 0) m = 255 - m;
 800b7c4:	69f4      	ldr	r4, [r6, #28]
        m = (x_inters * px_h) >> 9;
 800b7c6:	f3c1 2147 	ubfx	r1, r1, #9, #8
        if(p->yx_steep < 0) m = 255 - m;
 800b7ca:	2c00      	cmp	r4, #0
 800b7cc:	bfbc      	itt	lt
 800b7ce:	43c9      	mvnlt	r1, r1
 800b7d0:	b2c9      	uxtblt	r1, r1
        if(p->inv) m = 255 - m;
 800b7d2:	b108      	cbz	r0, 800b7d8 <lv_draw_mask_line+0x17c>
 800b7d4:	43c9      	mvns	r1, r1
 800b7d6:	b2c9      	uxtb	r1, r1
        mask_buf[k] = mask_mix(mask_buf[k], m);
 800b7d8:	5ca8      	ldrb	r0, [r5, r2]
 800b7da:	f7ff ff31 	bl	800b640 <mask_mix>
 800b7de:	54a8      	strb	r0, [r5, r2]
 800b7e0:	e013      	b.n	800b80a <lv_draw_mask_line+0x1ae>
        if(k >= 0 && k < len) {
 800b7e2:	2a00      	cmp	r2, #0
 800b7e4:	db0b      	blt.n	800b7fe <lv_draw_mask_line+0x1a2>
 800b7e6:	4293      	cmp	r3, r2
 800b7e8:	dd09      	ble.n	800b7fe <lv_draw_mask_line+0x1a2>
            m = px_h - (p->spx >> 1);
 800b7ea:	eba4 0161 	sub.w	r1, r4, r1, asr #1
 800b7ee:	b2c9      	uxtb	r1, r1
            if(p->inv) m = 255 - m;
 800b7f0:	b108      	cbz	r0, 800b7f6 <lv_draw_mask_line+0x19a>
 800b7f2:	43c9      	mvns	r1, r1
 800b7f4:	b2c9      	uxtb	r1, r1
            mask_buf[k] = mask_mix(mask_buf[k], m);
 800b7f6:	5ca8      	ldrb	r0, [r5, r2]
 800b7f8:	f7ff ff22 	bl	800b640 <mask_mix>
 800b7fc:	54a8      	strb	r0, [r5, r2]
        k++;
 800b7fe:	3201      	adds	r2, #1
        px_h -= p->spx;
 800b800:	6a71      	ldr	r1, [r6, #36]	; 0x24
        if(k >= len) break;
 800b802:	4293      	cmp	r3, r2
        px_h -= p->spx;
 800b804:	eba4 0401 	sub.w	r4, r4, r1
        if(k >= len) break;
 800b808:	dccd      	bgt.n	800b7a6 <lv_draw_mask_line+0x14a>
    if(p->inv) {
 800b80a:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 800b80e:	0789      	lsls	r1, r1, #30
 800b810:	d50b      	bpl.n	800b82a <lv_draw_mask_line+0x1ce>
        if(k > len) {
 800b812:	4543      	cmp	r3, r8
 800b814:	f6ff af49 	blt.w	800b6aa <lv_draw_mask_line+0x4e>
        if(k >= 0) {
 800b818:	f1b8 0f00 	cmp.w	r8, #0
 800b81c:	f6ff af6b 	blt.w	800b6f6 <lv_draw_mask_line+0x9a>
            lv_memset_00(&mask_buf[0], k);
 800b820:	4641      	mov	r1, r8
                if(k >= 0) lv_memset_00(&mask_buf[0],  k);
 800b822:	4628      	mov	r0, r5
 800b824:	e009      	b.n	800b83a <lv_draw_mask_line+0x1de>
    int32_t k = xei - abs_x;
 800b826:	4642      	mov	r2, r8
 800b828:	e7bd      	b.n	800b7a6 <lv_draw_mask_line+0x14a>
        if(k < 0) {
 800b82a:	1c50      	adds	r0, r2, #1
 800b82c:	f53f af3d 	bmi.w	800b6aa <lv_draw_mask_line+0x4e>
        if(k <= len) {
 800b830:	4283      	cmp	r3, r0
                if(k >= 0) lv_memset_00(&mask_buf[k],  len - k);
 800b832:	f6ff af60 	blt.w	800b6f6 <lv_draw_mask_line+0x9a>
 800b836:	1a19      	subs	r1, r3, r0
 800b838:	4428      	add	r0, r5
                else if(k > 0) lv_memset_00(&mask_buf[k],  len - k);
 800b83a:	f00c f97b 	bl	8017b34 <lv_memset_00>
 800b83e:	e75a      	b.n	800b6f6 <lv_draw_mask_line+0x9a>
    x_at_y = (int32_t)((int32_t)p->xy_steep * abs_y) >> 10;
 800b840:	69b0      	ldr	r0, [r6, #24]
 800b842:	b2d2      	uxtb	r2, r2
 800b844:	4344      	muls	r4, r0
    if(p->xy_steep > 0) x_at_y++;
 800b846:	2800      	cmp	r0, #0
    x_at_y = (int32_t)((int32_t)p->xy_steep * abs_y) >> 10;
 800b848:	ea4f 21a4 	mov.w	r1, r4, asr #10
    if(p->xy_steep > 0) x_at_y++;
 800b84c:	bfcc      	ite	gt
 800b84e:	1c4f      	addgt	r7, r1, #1
    x_at_y = (int32_t)((int32_t)p->xy_steep * abs_y) >> 10;
 800b850:	460f      	movle	r7, r1
    if(x_at_y < abs_x) {
 800b852:	4547      	cmp	r7, r8
 800b854:	f6ff af60 	blt.w	800b718 <lv_draw_mask_line+0xbc>
    if(x_at_y > abs_x + len) {
 800b858:	eb03 0708 	add.w	r7, r3, r8
 800b85c:	42b9      	cmp	r1, r7
 800b85e:	f73f af6b 	bgt.w	800b738 <lv_draw_mask_line+0xdc>
    int32_t xsi = xs >> 8;
 800b862:	f344 2c8d 	sbfx	ip, r4, #10, #14
    int32_t xsf = xs & 0xFF;
 800b866:	f3c4 0787 	ubfx	r7, r4, #2, #8
    int32_t xe = (((abs_y + 1) * 256) * p->xy_steep) >> 10;
 800b86a:	4404      	add	r4, r0
    int32_t xei = xe >> 8;
 800b86c:	f344 298d 	sbfx	r9, r4, #10, #14
    int32_t xe = (((abs_y + 1) * 256) * p->xy_steep) >> 10;
 800b870:	0221      	lsls	r1, r4, #8
    k = xsi - abs_x;
 800b872:	ebac 0408 	sub.w	r4, ip, r8
    if(xsi != xei && (p->xy_steep < 0 && xsf == 0)) {
 800b876:	45cc      	cmp	ip, r9
 800b878:	f000 8095 	beq.w	800b9a6 <lv_draw_mask_line+0x34a>
 800b87c:	2800      	cmp	r0, #0
 800b87e:	da52      	bge.n	800b926 <lv_draw_mask_line+0x2ca>
 800b880:	f104 3aff 	add.w	sl, r4, #4294967295
 800b884:	2f00      	cmp	r7, #0
 800b886:	f000 808c 	beq.w	800b9a2 <lv_draw_mask_line+0x346>
            y_inters = (xsf * (-p->yx_steep)) >> 10;
 800b88a:	69f1      	ldr	r1, [r6, #28]
            if(k >= 0 && k < len) {
 800b88c:	2c00      	cmp	r4, #0
            y_inters = (xsf * (-p->yx_steep)) >> 10;
 800b88e:	f1c1 0100 	rsb	r1, r1, #0
 800b892:	fb07 f101 	mul.w	r1, r7, r1
 800b896:	ea4f 28a1 	mov.w	r8, r1, asr #10
            if(k >= 0 && k < len) {
 800b89a:	db0c      	blt.n	800b8b6 <lv_draw_mask_line+0x25a>
 800b89c:	42a3      	cmp	r3, r4
 800b89e:	dd0a      	ble.n	800b8b6 <lv_draw_mask_line+0x25a>
                m = (y_inters * xsf) >> 9;
 800b8a0:	fb08 f107 	mul.w	r1, r8, r7
 800b8a4:	f3c1 2147 	ubfx	r1, r1, #9, #8
                if(p->inv) m = 255 - m;
 800b8a8:	b10a      	cbz	r2, 800b8ae <lv_draw_mask_line+0x252>
 800b8aa:	43c9      	mvns	r1, r1
 800b8ac:	b2c9      	uxtb	r1, r1
                mask_buf[k] = mask_mix(mask_buf[k], m);
 800b8ae:	5d28      	ldrb	r0, [r5, r4]
 800b8b0:	f7ff fec6 	bl	800b640 <mask_mix>
 800b8b4:	5528      	strb	r0, [r5, r4]
            if(k >= 0 && k < len) {
 800b8b6:	f1ba 0f00 	cmp.w	sl, #0
 800b8ba:	db16      	blt.n	800b8ea <lv_draw_mask_line+0x28e>
 800b8bc:	4553      	cmp	r3, sl
 800b8be:	dd14      	ble.n	800b8ea <lv_draw_mask_line+0x28e>
            int32_t x_inters = ((255 - y_inters) * (-p->xy_steep)) >> 10;
 800b8c0:	69b2      	ldr	r2, [r6, #24]
 800b8c2:	f1c8 01ff 	rsb	r1, r8, #255	; 0xff
                mask_buf[k] = mask_mix(mask_buf[k], m);
 800b8c6:	f815 000a 	ldrb.w	r0, [r5, sl]
            int32_t x_inters = ((255 - y_inters) * (-p->xy_steep)) >> 10;
 800b8ca:	4252      	negs	r2, r2
 800b8cc:	434a      	muls	r2, r1
 800b8ce:	1292      	asrs	r2, r2, #10
                m = 255 - (((255 - y_inters) * x_inters) >> 9);
 800b8d0:	4351      	muls	r1, r2
                if(p->inv) m = 255 - m;
 800b8d2:	f896 2028 	ldrb.w	r2, [r6, #40]	; 0x28
                m = 255 - (((255 - y_inters) * x_inters) >> 9);
 800b8d6:	f3c1 2147 	ubfx	r1, r1, #9, #8
                if(p->inv) m = 255 - m;
 800b8da:	0797      	lsls	r7, r2, #30
                m = 255 - (((255 - y_inters) * x_inters) >> 9);
 800b8dc:	bf5c      	itt	pl
 800b8de:	43c9      	mvnpl	r1, r1
 800b8e0:	b2c9      	uxtbpl	r1, r1
                mask_buf[k] = mask_mix(mask_buf[k], m);
 800b8e2:	f7ff fead 	bl	800b640 <mask_mix>
 800b8e6:	f805 000a 	strb.w	r0, [r5, sl]
            if(p->inv) {
 800b8ea:	f896 2028 	ldrb.w	r2, [r6, #40]	; 0x28
 800b8ee:	0796      	lsls	r6, r2, #30
 800b8f0:	d514      	bpl.n	800b91c <lv_draw_mask_line+0x2c0>
                if(k > len) k = len;
 800b8f2:	4553      	cmp	r3, sl
 800b8f4:	f6ff aeff 	blt.w	800b6f6 <lv_draw_mask_line+0x9a>
                else if(k > 0) lv_memset_00(&mask_buf[0],  k);
 800b8f8:	f1ba 0f00 	cmp.w	sl, #0
 800b8fc:	f77f aefb 	ble.w	800b6f6 <lv_draw_mask_line+0x9a>
 800b900:	4651      	mov	r1, sl
 800b902:	e78e      	b.n	800b822 <lv_draw_mask_line+0x1c6>
        k++;
 800b904:	3401      	adds	r4, #1
 800b906:	429c      	cmp	r4, r3
 800b908:	bfa8      	it	ge
 800b90a:	461c      	movge	r4, r3
                if(k == 0) return LV_DRAW_MASK_RES_TRANSP;
 800b90c:	2c00      	cmp	r4, #0
 800b90e:	f43f aecc 	beq.w	800b6aa <lv_draw_mask_line+0x4e>
                else if(k > 0) lv_memset_00(&mask_buf[k],  len - k);
 800b912:	f77f aef0 	ble.w	800b6f6 <lv_draw_mask_line+0x9a>
 800b916:	1b19      	subs	r1, r3, r4
 800b918:	1928      	adds	r0, r5, r4
 800b91a:	e78e      	b.n	800b83a <lv_draw_mask_line+0x1de>
            k += 2;
 800b91c:	1c60      	adds	r0, r4, #1
                if(k > len) return LV_DRAW_MASK_RES_FULL_COVER;
 800b91e:	4283      	cmp	r3, r0
 800b920:	db3b      	blt.n	800b99a <lv_draw_mask_line+0x33e>
                if(k >= 0) lv_memset_00(&mask_buf[k],  len - k);
 800b922:	2800      	cmp	r0, #0
 800b924:	e785      	b.n	800b832 <lv_draw_mask_line+0x1d6>
            y_inters = ((255 - xsf) * p->yx_steep) >> 10;
 800b926:	f1c7 07ff 	rsb	r7, r7, #255	; 0xff
 800b92a:	69f1      	ldr	r1, [r6, #28]
            if(k >= 0 && k < len) {
 800b92c:	2c00      	cmp	r4, #0
            y_inters = ((255 - xsf) * p->yx_steep) >> 10;
 800b92e:	fb01 f107 	mul.w	r1, r1, r7
 800b932:	ea4f 28a1 	mov.w	r8, r1, asr #10
            if(k >= 0 && k < len) {
 800b936:	db0c      	blt.n	800b952 <lv_draw_mask_line+0x2f6>
 800b938:	42a3      	cmp	r3, r4
 800b93a:	dd0a      	ble.n	800b952 <lv_draw_mask_line+0x2f6>
                m = 255 - ((y_inters * (255 - xsf)) >> 9);
 800b93c:	fb08 f707 	mul.w	r7, r8, r7
 800b940:	f3c7 2147 	ubfx	r1, r7, #9, #8
                if(p->inv) m = 255 - m;
 800b944:	b90a      	cbnz	r2, 800b94a <lv_draw_mask_line+0x2ee>
                m = 255 - ((y_inters * (255 - xsf)) >> 9);
 800b946:	43c9      	mvns	r1, r1
 800b948:	b2c9      	uxtb	r1, r1
                mask_buf[k] = mask_mix(mask_buf[k], m);
 800b94a:	5d28      	ldrb	r0, [r5, r4]
 800b94c:	f7ff fe78 	bl	800b640 <mask_mix>
 800b950:	5528      	strb	r0, [r5, r4]
            if(k >= 0 && k < len) {
 800b952:	1c62      	adds	r2, r4, #1
 800b954:	d413      	bmi.n	800b97e <lv_draw_mask_line+0x322>
 800b956:	4293      	cmp	r3, r2
 800b958:	dd11      	ble.n	800b97e <lv_draw_mask_line+0x322>
            int32_t x_inters = ((255 - y_inters) * p->xy_steep) >> 10;
 800b95a:	f1c8 01ff 	rsb	r1, r8, #255	; 0xff
 800b95e:	69b0      	ldr	r0, [r6, #24]
 800b960:	4348      	muls	r0, r1
 800b962:	1280      	asrs	r0, r0, #10
                m = ((255 - y_inters) * x_inters) >> 9;
 800b964:	4341      	muls	r1, r0
                if(p->inv) m = 255 - m;
 800b966:	f896 0028 	ldrb.w	r0, [r6, #40]	; 0x28
                m = ((255 - y_inters) * x_inters) >> 9;
 800b96a:	f3c1 2147 	ubfx	r1, r1, #9, #8
                if(p->inv) m = 255 - m;
 800b96e:	0780      	lsls	r0, r0, #30
                mask_buf[k] = mask_mix(mask_buf[k], m);
 800b970:	5ca8      	ldrb	r0, [r5, r2]
                if(p->inv) m = 255 - m;
 800b972:	bf44      	itt	mi
 800b974:	43c9      	mvnmi	r1, r1
 800b976:	b2c9      	uxtbmi	r1, r1
                mask_buf[k] = mask_mix(mask_buf[k], m);
 800b978:	f7ff fe62 	bl	800b640 <mask_mix>
 800b97c:	54a8      	strb	r0, [r5, r2]
            if(p->inv) {
 800b97e:	f896 2028 	ldrb.w	r2, [r6, #40]	; 0x28
 800b982:	0792      	lsls	r2, r2, #30
 800b984:	d507      	bpl.n	800b996 <lv_draw_mask_line+0x33a>
                if(k > len)  return LV_DRAW_MASK_RES_TRANSP;
 800b986:	42a3      	cmp	r3, r4
 800b988:	f6ff ae8f 	blt.w	800b6aa <lv_draw_mask_line+0x4e>
                if(k >= 0) lv_memset_00(&mask_buf[0],  k);
 800b98c:	2c00      	cmp	r4, #0
 800b98e:	f6ff aeb2 	blt.w	800b6f6 <lv_draw_mask_line+0x9a>
 800b992:	4621      	mov	r1, r4
 800b994:	e745      	b.n	800b822 <lv_draw_mask_line+0x1c6>
            k++;
 800b996:	3402      	adds	r4, #2
 800b998:	e7b5      	b.n	800b906 <lv_draw_mask_line+0x2aa>
                if(k > len) return LV_DRAW_MASK_RES_FULL_COVER;
 800b99a:	2001      	movs	r0, #1
 800b99c:	e67f      	b.n	800b69e <lv_draw_mask_line+0x42>
                    if(k >= len) return LV_DRAW_MASK_RES_TRANSP;
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	e699      	b.n	800b6d6 <lv_draw_mask_line+0x7a>
 800b9a2:	4654      	mov	r4, sl
        xsf = 0xFF;
 800b9a4:	27ff      	movs	r7, #255	; 0xff
        if(k >= 0 && k < len) {
 800b9a6:	2c00      	cmp	r4, #0
 800b9a8:	db0d      	blt.n	800b9c6 <lv_draw_mask_line+0x36a>
 800b9aa:	42a3      	cmp	r3, r4
 800b9ac:	dd0b      	ble.n	800b9c6 <lv_draw_mask_line+0x36a>
    int32_t xef = xe & 0xFF;
 800b9ae:	f3c1 2187 	ubfx	r1, r1, #10, #8
            m = (xsf + xef) >> 1;
 800b9b2:	4439      	add	r1, r7
 800b9b4:	f3c1 0147 	ubfx	r1, r1, #1, #8
            if(p->inv) m = 255 - m;
 800b9b8:	b10a      	cbz	r2, 800b9be <lv_draw_mask_line+0x362>
 800b9ba:	43c9      	mvns	r1, r1
 800b9bc:	b2c9      	uxtb	r1, r1
            mask_buf[k] = mask_mix(mask_buf[k], m);
 800b9be:	5d28      	ldrb	r0, [r5, r4]
 800b9c0:	f7ff fe3e 	bl	800b640 <mask_mix>
 800b9c4:	5528      	strb	r0, [r5, r4]
        if(p->inv) {
 800b9c6:	f896 2028 	ldrb.w	r2, [r6, #40]	; 0x28
 800b9ca:	0792      	lsls	r2, r2, #30
 800b9cc:	d59a      	bpl.n	800b904 <lv_draw_mask_line+0x2a8>
            k = xsi - abs_x;
 800b9ce:	eba9 0108 	sub.w	r1, r9, r8
            if(k >= len) {
 800b9d2:	428b      	cmp	r3, r1
 800b9d4:	f77f ae69 	ble.w	800b6aa <lv_draw_mask_line+0x4e>
            if(k >= 0) lv_memset_00(&mask_buf[0], k);
 800b9d8:	2900      	cmp	r1, #0
 800b9da:	f6ff ae8c 	blt.w	800b6f6 <lv_draw_mask_line+0x9a>
 800b9de:	e720      	b.n	800b822 <lv_draw_mask_line+0x1c6>

0800b9e0 <lv_draw_mask_angle>:
{
 800b9e0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800b9e4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800b9e6:	4606      	mov	r6, r0
 800b9e8:	4691      	mov	r9, r2
 800b9ea:	4688      	mov	r8, r1
    int32_t rel_y = abs_y - p->cfg.vertex_p.y;
 800b9ec:	f9b5 000a 	ldrsh.w	r0, [r5, #10]
{
 800b9f0:	461f      	mov	r7, r3
    int32_t rel_x = abs_x - p->cfg.vertex_p.x;
 800b9f2:	f9b5 4008 	ldrsh.w	r4, [r5, #8]
    int32_t rel_y = abs_y - p->cfg.vertex_p.y;
 800b9f6:	eba2 0c00 	sub.w	ip, r2, r0
    if(p->cfg.start_angle < 180 && p->cfg.end_angle < 180 &&
 800b9fa:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
    int32_t rel_x = abs_x - p->cfg.vertex_p.x;
 800b9fe:	1b09      	subs	r1, r1, r4
    if(p->cfg.start_angle < 180 && p->cfg.end_angle < 180 &&
 800ba00:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ba04:	2ab3      	cmp	r2, #179	; 0xb3
 800ba06:	dc6c      	bgt.n	800bae2 <lv_draw_mask_angle+0x102>
 800ba08:	2bb3      	cmp	r3, #179	; 0xb3
 800ba0a:	f300 80ce 	bgt.w	800bbaa <lv_draw_mask_angle+0x1ca>
 800ba0e:	2a00      	cmp	r2, #0
 800ba10:	f000 80cc 	beq.w	800bbac <lv_draw_mask_angle+0x1cc>
       p->cfg.start_angle != 0  && p->cfg.end_angle != 0 &&
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	f000 80ce 	beq.w	800bbb6 <lv_draw_mask_angle+0x1d6>
 800ba1a:	429a      	cmp	r2, r3
 800ba1c:	f340 80cb 	ble.w	800bbb6 <lv_draw_mask_angle+0x1d6>
        if(abs_y < p->cfg.vertex_p.y) {
 800ba20:	4548      	cmp	r0, r9
 800ba22:	dd04      	ble.n	800ba2e <lv_draw_mask_angle+0x4e>
            return LV_DRAW_MASK_RES_FULL_COVER;
 800ba24:	2501      	movs	r5, #1
}
 800ba26:	4628      	mov	r0, r5
 800ba28:	b002      	add	sp, #8
 800ba2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        int32_t end_angle_first = (rel_y * p->end_line.xy_steep) >> 10;
 800ba2e:	6d68      	ldr	r0, [r5, #84]	; 0x54
        if(p->cfg.start_angle > 270 && p->cfg.start_angle <= 359 && start_angle_last < 0) start_angle_last = 0;
 800ba30:	b292      	uxth	r2, r2
        int32_t start_angle_last = ((rel_y + 1) * p->start_line.xy_steep) >> 10;
 800ba32:	6aac      	ldr	r4, [r5, #40]	; 0x28
        int32_t end_angle_first = (rel_y * p->end_line.xy_steep) >> 10;
 800ba34:	fb00 f00c 	mul.w	r0, r0, ip
        int32_t start_angle_last = ((rel_y + 1) * p->start_line.xy_steep) >> 10;
 800ba38:	fb0c 4404 	mla	r4, ip, r4, r4
        else if(p->cfg.start_angle > 0 && p->cfg.start_angle <= 90 && start_angle_last < 0) start_angle_last = 0;
 800ba3c:	f102 3cff 	add.w	ip, r2, #4294967295
        int32_t end_angle_first = (rel_y * p->end_line.xy_steep) >> 10;
 800ba40:	1280      	asrs	r0, r0, #10
        else if(p->cfg.start_angle > 0 && p->cfg.start_angle <= 90 && start_angle_last < 0) start_angle_last = 0;
 800ba42:	f1bc 0f59 	cmp.w	ip, #89	; 0x59
        int32_t start_angle_last = ((rel_y + 1) * p->start_line.xy_steep) >> 10;
 800ba46:	ea4f 24a4 	mov.w	r4, r4, asr #10
        else if(p->cfg.start_angle > 0 && p->cfg.start_angle <= 90 && start_angle_last < 0) start_angle_last = 0;
 800ba4a:	d83b      	bhi.n	800bac4 <lv_draw_mask_angle+0xe4>
 800ba4c:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
        if(p->cfg.end_angle > 270 && p->cfg.end_angle <= 359 && start_angle_last < 0) start_angle_last = 0;
 800ba50:	b29b      	uxth	r3, r3
        else if(p->cfg.end_angle > 0 &&   p->cfg.end_angle <= 90 && start_angle_last < 0) start_angle_last = 0;
 800ba52:	1e5a      	subs	r2, r3, #1
 800ba54:	2a59      	cmp	r2, #89	; 0x59
 800ba56:	d83b      	bhi.n	800bad0 <lv_draw_mask_angle+0xf0>
 800ba58:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
        int32_t dist = (end_angle_first - start_angle_last) >> 1;
 800ba5c:	1b00      	subs	r0, r0, r4
        int32_t tmp = start_angle_last + dist - rel_x;
 800ba5e:	eb04 0460 	add.w	r4, r4, r0, asr #1
 800ba62:	1a64      	subs	r4, r4, r1
        if(tmp > len) tmp = len;
 800ba64:	42bc      	cmp	r4, r7
 800ba66:	bfa8      	it	ge
 800ba68:	463c      	movge	r4, r7
        if(tmp > 0) {
 800ba6a:	2c00      	cmp	r4, #0
 800ba6c:	dd36      	ble.n	800badc <lv_draw_mask_angle+0xfc>
            res1 = lv_draw_mask_line(&mask_buf[0], abs_x, abs_y, tmp, &p->start_line);
 800ba6e:	f105 0310 	add.w	r3, r5, #16
 800ba72:	464a      	mov	r2, r9
 800ba74:	4641      	mov	r1, r8
 800ba76:	4630      	mov	r0, r6
 800ba78:	9300      	str	r3, [sp, #0]
 800ba7a:	b223      	sxth	r3, r4
 800ba7c:	f7ff fdee 	bl	800b65c <lv_draw_mask_line>
            if(res1 == LV_DRAW_MASK_RES_TRANSP) {
 800ba80:	4682      	mov	sl, r0
 800ba82:	b918      	cbnz	r0, 800ba8c <lv_draw_mask_angle+0xac>
                lv_memset_00(&mask_buf[0], tmp);
 800ba84:	4621      	mov	r1, r4
 800ba86:	4630      	mov	r0, r6
 800ba88:	f00c f854 	bl	8017b34 <lv_memset_00>
        if(tmp > len) tmp = len;
 800ba8c:	42bc      	cmp	r4, r7
        res2 = lv_draw_mask_line(&mask_buf[tmp], abs_x + tmp, abs_y, len - tmp, &p->end_line);
 800ba8e:	f105 053c 	add.w	r5, r5, #60	; 0x3c
 800ba92:	bfa8      	it	ge
 800ba94:	463c      	movge	r4, r7
        if(tmp < 0) tmp = 0;
 800ba96:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
        res2 = lv_draw_mask_line(&mask_buf[tmp], abs_x + tmp, abs_y, len - tmp, &p->end_line);
 800ba9a:	b2a1      	uxth	r1, r4
 800ba9c:	4426      	add	r6, r4
 800ba9e:	1a7b      	subs	r3, r7, r1
 800baa0:	4441      	add	r1, r8
 800baa2:	9500      	str	r5, [sp, #0]
 800baa4:	b21b      	sxth	r3, r3
 800baa6:	464a      	mov	r2, r9
 800baa8:	b209      	sxth	r1, r1
 800baaa:	4630      	mov	r0, r6
 800baac:	f7ff fdd6 	bl	800b65c <lv_draw_mask_line>
        if(res2 == LV_DRAW_MASK_RES_TRANSP) {
 800bab0:	4605      	mov	r5, r0
 800bab2:	b918      	cbnz	r0, 800babc <lv_draw_mask_angle+0xdc>
            lv_memset_00(&mask_buf[tmp], len - tmp);
 800bab4:	1b39      	subs	r1, r7, r4
 800bab6:	4630      	mov	r0, r6
 800bab8:	f00c f83c 	bl	8017b34 <lv_memset_00>
        if(res1 == res2) return res1;
 800babc:	45aa      	cmp	sl, r5
 800babe:	d0b2      	beq.n	800ba26 <lv_draw_mask_angle+0x46>
        else return LV_DRAW_MASK_RES_CHANGED;
 800bac0:	2502      	movs	r5, #2
 800bac2:	e7b0      	b.n	800ba26 <lv_draw_mask_angle+0x46>
        else if(p->cfg.start_angle > 90 && p->cfg.start_angle < 270 && start_angle_last > 0) start_angle_last = 0;
 800bac4:	3a5b      	subs	r2, #91	; 0x5b
 800bac6:	2ab2      	cmp	r2, #178	; 0xb2
 800bac8:	bf98      	it	ls
 800baca:	ea04 74e4 	andls.w	r4, r4, r4, asr #31
 800bace:	e7bf      	b.n	800ba50 <lv_draw_mask_angle+0x70>
        else if(p->cfg.end_angle > 90 &&  p->cfg.end_angle < 270 && start_angle_last > 0) start_angle_last = 0;
 800bad0:	3b5b      	subs	r3, #91	; 0x5b
 800bad2:	2bb2      	cmp	r3, #178	; 0xb2
 800bad4:	bf98      	it	ls
 800bad6:	ea04 74e4 	andls.w	r4, r4, r4, asr #31
 800bada:	e7bf      	b.n	800ba5c <lv_draw_mask_angle+0x7c>
        lv_draw_mask_res_t res1 = LV_DRAW_MASK_RES_FULL_COVER;
 800badc:	f04f 0a01 	mov.w	sl, #1
 800bae0:	e7d4      	b.n	800ba8c <lv_draw_mask_angle+0xac>
    else if(p->cfg.start_angle > 180 && p->cfg.end_angle > 180 && p->cfg.start_angle > p->cfg.end_angle) {
 800bae2:	2ab4      	cmp	r2, #180	; 0xb4
 800bae4:	d051      	beq.n	800bb8a <lv_draw_mask_angle+0x1aa>
 800bae6:	2bb4      	cmp	r3, #180	; 0xb4
 800bae8:	dd72      	ble.n	800bbd0 <lv_draw_mask_angle+0x1f0>
 800baea:	429a      	cmp	r2, r3
 800baec:	dd70      	ble.n	800bbd0 <lv_draw_mask_angle+0x1f0>
        if(abs_y > p->cfg.vertex_p.y) {
 800baee:	4548      	cmp	r0, r9
 800baf0:	db98      	blt.n	800ba24 <lv_draw_mask_angle+0x44>
        int32_t end_angle_first = (rel_y * p->end_line.xy_steep) >> 10;
 800baf2:	6d68      	ldr	r0, [r5, #84]	; 0x54
        if(p->cfg.start_angle > 270 && p->cfg.start_angle <= 359 && start_angle_last < 0) start_angle_last = 0;
 800baf4:	b292      	uxth	r2, r2
        int32_t start_angle_last = ((rel_y + 1) * p->start_line.xy_steep) >> 10;
 800baf6:	6aac      	ldr	r4, [r5, #40]	; 0x28
        int32_t end_angle_first = (rel_y * p->end_line.xy_steep) >> 10;
 800baf8:	fb00 f00c 	mul.w	r0, r0, ip
        int32_t start_angle_last = ((rel_y + 1) * p->start_line.xy_steep) >> 10;
 800bafc:	fb0c 4404 	mla	r4, ip, r4, r4
        if(p->cfg.start_angle > 270 && p->cfg.start_angle <= 359 && start_angle_last < 0) start_angle_last = 0;
 800bb00:	f46f 7c87 	mvn.w	ip, #270	; 0x10e
        int32_t end_angle_first = (rel_y * p->end_line.xy_steep) >> 10;
 800bb04:	1280      	asrs	r0, r0, #10
        if(p->cfg.start_angle > 270 && p->cfg.start_angle <= 359 && start_angle_last < 0) start_angle_last = 0;
 800bb06:	4494      	add	ip, r2
        int32_t start_angle_last = ((rel_y + 1) * p->start_line.xy_steep) >> 10;
 800bb08:	12a4      	asrs	r4, r4, #10
        if(p->cfg.start_angle > 270 && p->cfg.start_angle <= 359 && start_angle_last < 0) start_angle_last = 0;
 800bb0a:	f1bc 0f58 	cmp.w	ip, #88	; 0x58
 800bb0e:	d82d      	bhi.n	800bb6c <lv_draw_mask_angle+0x18c>
 800bb10:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
        if(p->cfg.end_angle > 270 && p->cfg.end_angle <= 359 && start_angle_last < 0) start_angle_last = 0;
 800bb14:	b29b      	uxth	r3, r3
 800bb16:	f46f 7287 	mvn.w	r2, #270	; 0x10e
 800bb1a:	189a      	adds	r2, r3, r2
 800bb1c:	2a58      	cmp	r2, #88	; 0x58
 800bb1e:	d82b      	bhi.n	800bb78 <lv_draw_mask_angle+0x198>
 800bb20:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
        int32_t dist = (end_angle_first - start_angle_last) >> 1;
 800bb24:	1b00      	subs	r0, r0, r4
        int32_t tmp = start_angle_last + dist - rel_x;
 800bb26:	eb04 0460 	add.w	r4, r4, r0, asr #1
 800bb2a:	1a64      	subs	r4, r4, r1
        if(tmp > len) tmp = len;
 800bb2c:	42bc      	cmp	r4, r7
 800bb2e:	bfa8      	it	ge
 800bb30:	463c      	movge	r4, r7
        if(tmp > 0) {
 800bb32:	2c00      	cmp	r4, #0
 800bb34:	dd26      	ble.n	800bb84 <lv_draw_mask_angle+0x1a4>
            res1 = lv_draw_mask_line(&mask_buf[0], abs_x, abs_y, tmp, (lv_draw_mask_line_param_t *)&p->end_line);
 800bb36:	f105 033c 	add.w	r3, r5, #60	; 0x3c
 800bb3a:	464a      	mov	r2, r9
 800bb3c:	4641      	mov	r1, r8
 800bb3e:	4630      	mov	r0, r6
 800bb40:	9300      	str	r3, [sp, #0]
 800bb42:	b223      	sxth	r3, r4
 800bb44:	f7ff fd8a 	bl	800b65c <lv_draw_mask_line>
            if(res1 == LV_DRAW_MASK_RES_TRANSP) {
 800bb48:	4682      	mov	sl, r0
 800bb4a:	b918      	cbnz	r0, 800bb54 <lv_draw_mask_angle+0x174>
                lv_memset_00(&mask_buf[0], tmp);
 800bb4c:	4621      	mov	r1, r4
 800bb4e:	4630      	mov	r0, r6
 800bb50:	f00b fff0 	bl	8017b34 <lv_memset_00>
        if(tmp > len) tmp = len;
 800bb54:	42bc      	cmp	r4, r7
        res2 = lv_draw_mask_line(&mask_buf[tmp], abs_x + tmp, abs_y, len - tmp, (lv_draw_mask_line_param_t *)&p->start_line);
 800bb56:	f105 0510 	add.w	r5, r5, #16
 800bb5a:	bfa8      	it	ge
 800bb5c:	463c      	movge	r4, r7
        if(tmp < 0) tmp = 0;
 800bb5e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
        res2 = lv_draw_mask_line(&mask_buf[tmp], abs_x + tmp, abs_y, len - tmp, (lv_draw_mask_line_param_t *)&p->start_line);
 800bb62:	b2a1      	uxth	r1, r4
 800bb64:	4426      	add	r6, r4
 800bb66:	1a7b      	subs	r3, r7, r1
 800bb68:	4441      	add	r1, r8
 800bb6a:	e79a      	b.n	800baa2 <lv_draw_mask_angle+0xc2>
        else if(p->cfg.start_angle > 90 && p->cfg.start_angle < 270 && start_angle_last > 0) start_angle_last = 0;
 800bb6c:	3a5b      	subs	r2, #91	; 0x5b
 800bb6e:	2ab2      	cmp	r2, #178	; 0xb2
 800bb70:	bf98      	it	ls
 800bb72:	ea04 74e4 	andls.w	r4, r4, r4, asr #31
 800bb76:	e7cd      	b.n	800bb14 <lv_draw_mask_angle+0x134>
        else if(p->cfg.end_angle > 90 &&  p->cfg.end_angle < 270 && start_angle_last > 0) start_angle_last = 0;
 800bb78:	3b5b      	subs	r3, #91	; 0x5b
 800bb7a:	2bb2      	cmp	r3, #178	; 0xb2
 800bb7c:	bf98      	it	ls
 800bb7e:	ea04 74e4 	andls.w	r4, r4, r4, asr #31
 800bb82:	e7cf      	b.n	800bb24 <lv_draw_mask_angle+0x144>
        lv_draw_mask_res_t res1 = LV_DRAW_MASK_RES_FULL_COVER;
 800bb84:	f04f 0a01 	mov.w	sl, #1
 800bb88:	e7e4      	b.n	800bb54 <lv_draw_mask_angle+0x174>
            else res1 = LV_DRAW_MASK_RES_UNKNOWN;
 800bb8a:	4548      	cmp	r0, r9
 800bb8c:	bfcc      	ite	gt
 800bb8e:	2401      	movgt	r4, #1
 800bb90:	2403      	movle	r4, #3
        if(p->cfg.end_angle == 180) {
 800bb92:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bb96:	f9b5 000a 	ldrsh.w	r0, [r5, #10]
 800bb9a:	2bb4      	cmp	r3, #180	; 0xb4
 800bb9c:	d11c      	bne.n	800bbd8 <lv_draw_mask_angle+0x1f8>
            if(abs_y < p->cfg.vertex_p.y) res2 = LV_DRAW_MASK_RES_FULL_COVER;
 800bb9e:	4548      	cmp	r0, r9
 800bba0:	bfcc      	ite	gt
 800bba2:	2003      	movgt	r0, #3
 800bba4:	2001      	movle	r0, #1
        if(res1 == LV_DRAW_MASK_RES_TRANSP || res2 == LV_DRAW_MASK_RES_TRANSP) return LV_DRAW_MASK_RES_TRANSP;
 800bba6:	bb5c      	cbnz	r4, 800bc00 <lv_draw_mask_angle+0x220>
 800bba8:	e02f      	b.n	800bc0a <lv_draw_mask_angle+0x22a>
        else if(p->cfg.start_angle == 0) {
 800bbaa:	b922      	cbnz	r2, 800bbb6 <lv_draw_mask_angle+0x1d6>
            else res1 = LV_DRAW_MASK_RES_FULL_COVER;
 800bbac:	4548      	cmp	r0, r9
 800bbae:	bfcc      	ite	gt
 800bbb0:	2403      	movgt	r4, #3
 800bbb2:	2401      	movle	r4, #1
 800bbb4:	e7ed      	b.n	800bb92 <lv_draw_mask_angle+0x1b2>
        else if((p->cfg.start_angle < 180 && abs_y < p->cfg.vertex_p.y) ||
 800bbb6:	4548      	cmp	r0, r9
 800bbb8:	dc0c      	bgt.n	800bbd4 <lv_draw_mask_angle+0x1f4>
            res1 = lv_draw_mask_line(mask_buf, abs_x, abs_y, len, &p->start_line);
 800bbba:	f105 0310 	add.w	r3, r5, #16
 800bbbe:	464a      	mov	r2, r9
 800bbc0:	4641      	mov	r1, r8
 800bbc2:	4630      	mov	r0, r6
 800bbc4:	9300      	str	r3, [sp, #0]
 800bbc6:	463b      	mov	r3, r7
 800bbc8:	f7ff fd48 	bl	800b65c <lv_draw_mask_line>
 800bbcc:	4604      	mov	r4, r0
 800bbce:	e7e0      	b.n	800bb92 <lv_draw_mask_angle+0x1b2>
                (p->cfg.start_angle > 180 && abs_y >= p->cfg.vertex_p.y)) {
 800bbd0:	4548      	cmp	r0, r9
 800bbd2:	dcf2      	bgt.n	800bbba <lv_draw_mask_angle+0x1da>
            else res1 = LV_DRAW_MASK_RES_UNKNOWN;
 800bbd4:	2403      	movs	r4, #3
 800bbd6:	e7dc      	b.n	800bb92 <lv_draw_mask_angle+0x1b2>
        else if(p->cfg.end_angle == 0) {
 800bbd8:	b923      	cbnz	r3, 800bbe4 <lv_draw_mask_angle+0x204>
            if(abs_y < p->cfg.vertex_p.y) res2 = LV_DRAW_MASK_RES_FULL_COVER;
 800bbda:	4548      	cmp	r0, r9
 800bbdc:	bfd4      	ite	le
 800bbde:	2003      	movle	r0, #3
 800bbe0:	2001      	movgt	r0, #1
 800bbe2:	e7e0      	b.n	800bba6 <lv_draw_mask_angle+0x1c6>
        else if((p->cfg.end_angle < 180 && abs_y < p->cfg.vertex_p.y) ||
 800bbe4:	2bb3      	cmp	r3, #179	; 0xb3
 800bbe6:	dc12      	bgt.n	800bc0e <lv_draw_mask_angle+0x22e>
 800bbe8:	4548      	cmp	r0, r9
 800bbea:	dc12      	bgt.n	800bc12 <lv_draw_mask_angle+0x232>
            res2 = lv_draw_mask_line(mask_buf, abs_x, abs_y, len, &p->end_line);
 800bbec:	353c      	adds	r5, #60	; 0x3c
 800bbee:	463b      	mov	r3, r7
 800bbf0:	464a      	mov	r2, r9
 800bbf2:	4641      	mov	r1, r8
 800bbf4:	4630      	mov	r0, r6
 800bbf6:	9500      	str	r5, [sp, #0]
 800bbf8:	f7ff fd30 	bl	800b65c <lv_draw_mask_line>
        if(res1 == LV_DRAW_MASK_RES_TRANSP || res2 == LV_DRAW_MASK_RES_TRANSP) return LV_DRAW_MASK_RES_TRANSP;
 800bbfc:	b12c      	cbz	r4, 800bc0a <lv_draw_mask_angle+0x22a>
 800bbfe:	b120      	cbz	r0, 800bc0a <lv_draw_mask_angle+0x22a>
        else if(res1 == LV_DRAW_MASK_RES_UNKNOWN && res2 == LV_DRAW_MASK_RES_UNKNOWN) return LV_DRAW_MASK_RES_TRANSP;
 800bc00:	2c03      	cmp	r4, #3
 800bc02:	d108      	bne.n	800bc16 <lv_draw_mask_angle+0x236>
 800bc04:	2803      	cmp	r0, #3
 800bc06:	f47f af5b 	bne.w	800bac0 <lv_draw_mask_angle+0xe0>
 800bc0a:	2500      	movs	r5, #0
 800bc0c:	e70b      	b.n	800ba26 <lv_draw_mask_angle+0x46>
                (p->cfg.end_angle > 180 && abs_y >= p->cfg.vertex_p.y)) {
 800bc0e:	4548      	cmp	r0, r9
 800bc10:	dcec      	bgt.n	800bbec <lv_draw_mask_angle+0x20c>
            if(abs_y < p->cfg.vertex_p.y) res2 = LV_DRAW_MASK_RES_UNKNOWN;
 800bc12:	2003      	movs	r0, #3
 800bc14:	e7c7      	b.n	800bba6 <lv_draw_mask_angle+0x1c6>
        else if(res1 == LV_DRAW_MASK_RES_FULL_COVER &&  res2 == LV_DRAW_MASK_RES_FULL_COVER) return LV_DRAW_MASK_RES_FULL_COVER;
 800bc16:	2c01      	cmp	r4, #1
 800bc18:	f47f af52 	bne.w	800bac0 <lv_draw_mask_angle+0xe0>
 800bc1c:	2801      	cmp	r0, #1
 800bc1e:	f47f af4f 	bne.w	800bac0 <lv_draw_mask_angle+0xe0>
 800bc22:	e6ff      	b.n	800ba24 <lv_draw_mask_angle+0x44>

0800bc24 <lv_draw_mask_radius>:
{
 800bc24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc28:	b08b      	sub	sp, #44	; 0x2c
 800bc2a:	460f      	mov	r7, r1
 800bc2c:	4605      	mov	r5, r0
 800bc2e:	461c      	mov	r4, r3
 800bc30:	f8dd a050 	ldr.w	sl, [sp, #80]	; 0x50
    bool outer = p->cfg.outer;
 800bc34:	f89a b012 	ldrb.w	fp, [sl, #18]
    dest->y1 = src->y1;
 800bc38:	f9ba 000a 	ldrsh.w	r0, [sl, #10]
    if(outer == false) {
 800bc3c:	f01b 0101 	ands.w	r1, fp, #1
    dest->y2 = src->y2;
 800bc40:	f9ba 300e 	ldrsh.w	r3, [sl, #14]
 800bc44:	9101      	str	r1, [sp, #4]
 800bc46:	d134      	bne.n	800bcb2 <lv_draw_mask_radius+0x8e>
        if(abs_y < rect.y1 || abs_y > rect.y2) {
 800bc48:	4282      	cmp	r2, r0
 800bc4a:	da01      	bge.n	800bc50 <lv_draw_mask_radius+0x2c>
                    return LV_DRAW_MASK_RES_TRANSP;
 800bc4c:	2000      	movs	r0, #0
 800bc4e:	e033      	b.n	800bcb8 <lv_draw_mask_radius+0x94>
        if(abs_y < rect.y1 || abs_y > rect.y2) {
 800bc50:	429a      	cmp	r2, r3
 800bc52:	dcfb      	bgt.n	800bc4c <lv_draw_mask_radius+0x28>
    dest->x1 = src->x1;
 800bc54:	f9ba c008 	ldrsh.w	ip, [sl, #8]
    int32_t radius = p->cfg.radius;
 800bc58:	f9ba 9010 	ldrsh.w	r9, [sl, #16]
    dest->x2 = src->x2;
 800bc5c:	f9ba 600c 	ldrsh.w	r6, [sl, #12]
    if((abs_x >= rect.x1 + radius && abs_x + len <= rect.x2 - radius) ||
 800bc60:	ebac 0807 	sub.w	r8, ip, r7
 800bc64:	eb0c 0109 	add.w	r1, ip, r9
 800bc68:	428f      	cmp	r7, r1
 800bc6a:	db04      	blt.n	800bc76 <lv_draw_mask_radius+0x52>
 800bc6c:	19e1      	adds	r1, r4, r7
 800bc6e:	eba6 0e09 	sub.w	lr, r6, r9
 800bc72:	4571      	cmp	r1, lr
 800bc74:	dd07      	ble.n	800bc86 <lv_draw_mask_radius+0x62>
       (abs_y >= rect.y1 + radius && abs_y <= rect.y2 - radius)) {
 800bc76:	eb00 0109 	add.w	r1, r0, r9
    if((abs_x >= rect.x1 + radius && abs_x + len <= rect.x2 - radius) ||
 800bc7a:	428a      	cmp	r2, r1
 800bc7c:	db37      	blt.n	800bcee <lv_draw_mask_radius+0xca>
       (abs_y >= rect.y1 + radius && abs_y <= rect.y2 - radius)) {
 800bc7e:	eba3 0109 	sub.w	r1, r3, r9
 800bc82:	428a      	cmp	r2, r1
 800bc84:	dc33      	bgt.n	800bcee <lv_draw_mask_radius+0xca>
        if(outer == false) {
 800bc86:	9b01      	ldr	r3, [sp, #4]
 800bc88:	bb1b      	cbnz	r3, 800bcd2 <lv_draw_mask_radius+0xae>
            if(last > len) return LV_DRAW_MASK_RES_TRANSP;
 800bc8a:	4544      	cmp	r4, r8
 800bc8c:	dbde      	blt.n	800bc4c <lv_draw_mask_radius+0x28>
            if(last >= 0) {
 800bc8e:	f1b8 0f00 	cmp.w	r8, #0
 800bc92:	db03      	blt.n	800bc9c <lv_draw_mask_radius+0x78>
                lv_memset_00(&mask_buf[0], last);
 800bc94:	4641      	mov	r1, r8
 800bc96:	4628      	mov	r0, r5
 800bc98:	f00b ff4c 	bl	8017b34 <lv_memset_00>
            int32_t first = rect.x2 - abs_x + 1;
 800bc9c:	1bf1      	subs	r1, r6, r7
 800bc9e:	1c48      	adds	r0, r1, #1
            if(first <= 0) return LV_DRAW_MASK_RES_TRANSP;
 800bca0:	2800      	cmp	r0, #0
 800bca2:	ddd3      	ble.n	800bc4c <lv_draw_mask_radius+0x28>
            else if(first < len) {
 800bca4:	4284      	cmp	r4, r0
 800bca6:	dd0d      	ble.n	800bcc4 <lv_draw_mask_radius+0xa0>
                lv_memset_00(&mask_buf[first], len - first);
 800bca8:	1a21      	subs	r1, r4, r0
                    lv_memset_00(&mask_buf[first], len_tmp);
 800bcaa:	4428      	add	r0, r5
                if(kr < len) lv_memset_00(&mask_buf[kr], len - kr);
 800bcac:	f00b ff42 	bl	8017b34 <lv_memset_00>
 800bcb0:	e00d      	b.n	800bcce <lv_draw_mask_radius+0xaa>
        if(abs_y < rect.y1 || abs_y > rect.y2) {
 800bcb2:	4282      	cmp	r2, r0
 800bcb4:	da03      	bge.n	800bcbe <lv_draw_mask_radius+0x9a>
            return LV_DRAW_MASK_RES_FULL_COVER;
 800bcb6:	2001      	movs	r0, #1
}
 800bcb8:	b00b      	add	sp, #44	; 0x2c
 800bcba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(abs_y < rect.y1 || abs_y > rect.y2) {
 800bcbe:	429a      	cmp	r2, r3
 800bcc0:	ddc8      	ble.n	800bc54 <lv_draw_mask_radius+0x30>
 800bcc2:	e7f8      	b.n	800bcb6 <lv_draw_mask_radius+0x92>
            if(last == 0 && first == len) return LV_DRAW_MASK_RES_FULL_COVER;
 800bcc4:	f1b8 0f00 	cmp.w	r8, #0
 800bcc8:	d101      	bne.n	800bcce <lv_draw_mask_radius+0xaa>
 800bcca:	4284      	cmp	r4, r0
 800bccc:	d0f3      	beq.n	800bcb6 <lv_draw_mask_radius+0x92>
    return LV_DRAW_MASK_RES_CHANGED;
 800bcce:	2002      	movs	r0, #2
 800bcd0:	e7f2      	b.n	800bcb8 <lv_draw_mask_radius+0x94>
            if(first < 0) first = 0;
 800bcd2:	ea28 70e8 	bic.w	r0, r8, r8, asr #31
            if(first <= len) {
 800bcd6:	42a0      	cmp	r0, r4
 800bcd8:	dcf9      	bgt.n	800bcce <lv_draw_mask_radius+0xaa>
                int32_t last =  rect.x2 - abs_x - first + 1;
 800bcda:	1bf1      	subs	r1, r6, r7
 800bcdc:	1a09      	subs	r1, r1, r0
 800bcde:	3101      	adds	r1, #1
                if(first + last > len) last = len - first;
 800bce0:	1843      	adds	r3, r0, r1
 800bce2:	42a3      	cmp	r3, r4
 800bce4:	dd00      	ble.n	800bce8 <lv_draw_mask_radius+0xc4>
 800bce6:	1a21      	subs	r1, r4, r0
                if(first < len && len_tmp >= 0) {
 800bce8:	2900      	cmp	r1, #0
 800bcea:	dbf0      	blt.n	800bcce <lv_draw_mask_radius+0xaa>
 800bcec:	e7dd      	b.n	800bcaa <lv_draw_mask_radius+0x86>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800bcee:	1c71      	adds	r1, r6, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800bcf0:	b286      	uxth	r6, r0
 800bcf2:	1c58      	adds	r0, r3, #1
    uint32_t r2 = p->cfg.radius * p->cfg.radius;
 800bcf4:	fb09 fb09 	mul.w	fp, r9, r9
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800bcf8:	eba1 070c 	sub.w	r7, r1, ip
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800bcfc:	1b80      	subs	r0, r0, r6
    abs_y -= rect.y1;
 800bcfe:	1b96      	subs	r6, r2, r6
    int32_t w = lv_area_get_width(&rect);
 800bd00:	b23f      	sxth	r7, r7
    abs_y -= rect.y1;
 800bd02:	b236      	sxth	r6, r6
    int32_t h = lv_area_get_height(&rect);
 800bd04:	b200      	sxth	r0, r0
    if(abs_y < radius || abs_y > h - radius - 1) {
 800bd06:	45b1      	cmp	r9, r6
 800bd08:	f300 81a4 	bgt.w	800c054 <lv_draw_mask_radius+0x430>
 800bd0c:	eba0 0309 	sub.w	r3, r0, r9
 800bd10:	429e      	cmp	r6, r3
 800bd12:	dbdc      	blt.n	800bcce <lv_draw_mask_radius+0xaa>
            y = radius - (h - abs_y) + 1;
 800bd14:	1b86      	subs	r6, r0, r6
        if(radius <= 256) sqrt_mask = 0x800;
 800bd16:	f5b9 7f80 	cmp.w	r9, #256	; 0x100
            if((y - 1) == p->y_prev) {
 800bd1a:	f8da 3014 	ldr.w	r3, [sl, #20]
            y = radius - (h - abs_y) + 1;
 800bd1e:	eba9 0006 	sub.w	r0, r9, r6
        if(radius <= 256) sqrt_mask = 0x800;
 800bd22:	bfd4      	ite	le
 800bd24:	f44f 6200 	movle.w	r2, #2048	; 0x800
 800bd28:	f44f 4200 	movgt.w	r2, #32768	; 0x8000
            if((y - 1) == p->y_prev) {
 800bd2c:	4298      	cmp	r0, r3
            y = radius - (h - abs_y) + 1;
 800bd2e:	f100 0601 	add.w	r6, r0, #1
            if((y - 1) == p->y_prev) {
 800bd32:	d06c      	beq.n	800be0e <lv_draw_mask_radius+0x1ea>
                lv_sqrt(r2 - ((y - 1) * (y - 1)), &x1, sqrt_mask);
 800bd34:	a907      	add	r1, sp, #28
 800bd36:	fb00 b010 	mls	r0, r0, r0, fp
 800bd3a:	9202      	str	r2, [sp, #8]
 800bd3c:	f00b fc6e 	bl	801761c <lv_sqrt>
 800bd40:	9a02      	ldr	r2, [sp, #8]
 800bd42:	e067      	b.n	800be14 <lv_draw_mask_radius+0x1f0>
                x0.i = p->y_prev_x.i;
 800bd44:	f8da 3018 	ldr.w	r3, [sl, #24]
 800bd48:	9306      	str	r3, [sp, #24]
            lv_sqrt(r2 - ((y - 1) * (y - 1)), &x1, sqrt_mask);
 800bd4a:	1e73      	subs	r3, r6, #1
 800bd4c:	a907      	add	r1, sp, #28
 800bd4e:	9203      	str	r2, [sp, #12]
 800bd50:	fb03 b013 	mls	r0, r3, r3, fp
 800bd54:	9302      	str	r3, [sp, #8]
 800bd56:	f00b fc61 	bl	801761c <lv_sqrt>
            p->y_prev = y - 1;
 800bd5a:	9b02      	ldr	r3, [sp, #8]
 800bd5c:	9a03      	ldr	r2, [sp, #12]
 800bd5e:	f8ca 3014 	str.w	r3, [sl, #20]
            p->y_prev_x.i = x1.i;
 800bd62:	9b07      	ldr	r3, [sp, #28]
 800bd64:	f8ca 3018 	str.w	r3, [sl, #24]
        if(x0.i == x1.i - 1 && x1.f == 0) {
 800bd68:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 800bd6c:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 800bd70:	3901      	subs	r1, #1
 800bd72:	428b      	cmp	r3, r1
 800bd74:	d107      	bne.n	800bd86 <lv_draw_mask_radius+0x162>
 800bd76:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 800bd7a:	b921      	cbnz	r1, 800bd86 <lv_draw_mask_radius+0x162>
            x1.f = 0xFF;
 800bd7c:	21ff      	movs	r1, #255	; 0xff
            x1.i--;
 800bd7e:	f8ad 301c 	strh.w	r3, [sp, #28]
            x1.f = 0xFF;
 800bd82:	f8ad 101e 	strh.w	r1, [sp, #30]
        if(x0.i == x1.i) {
 800bd86:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 800bd8a:	4299      	cmp	r1, r3
 800bd8c:	d15b      	bne.n	800be46 <lv_draw_mask_radius+0x222>
            lv_opa_t m = (x0.f + x1.f) >> 1;
 800bd8e:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 800bd92:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 800bd96:	440a      	add	r2, r1
            if(outer) m = 255 - m;
 800bd98:	9901      	ldr	r1, [sp, #4]
            lv_opa_t m = (x0.f + x1.f) >> 1;
 800bd9a:	f3c2 0247 	ubfx	r2, r2, #1, #8
            if(outer) m = 255 - m;
 800bd9e:	b109      	cbz	r1, 800bda4 <lv_draw_mask_radius+0x180>
 800bda0:	43d2      	mvns	r2, r2
 800bda2:	b2d2      	uxtb	r2, r2
            int32_t ofs = radius - x0.i - 1;
 800bda4:	eba9 0903 	sub.w	r9, r9, r3
 800bda8:	f109 39ff 	add.w	r9, r9, #4294967295
            if(kl >= 0 && kl < len) {
 800bdac:	eb18 0609 	adds.w	r6, r8, r9
 800bdb0:	d406      	bmi.n	800bdc0 <lv_draw_mask_radius+0x19c>
 800bdb2:	42b4      	cmp	r4, r6
 800bdb4:	dd04      	ble.n	800bdc0 <lv_draw_mask_radius+0x19c>
                mask_buf[kl] = mask_mix(mask_buf[kl], m);
 800bdb6:	5da8      	ldrb	r0, [r5, r6]
 800bdb8:	4611      	mov	r1, r2
 800bdba:	f7ff fc41 	bl	800b640 <mask_mix>
 800bdbe:	55a8      	strb	r0, [r5, r6]
            int32_t kr = k + (w - ofs - 1);
 800bdc0:	eba7 0909 	sub.w	r9, r7, r9
 800bdc4:	f109 30ff 	add.w	r0, r9, #4294967295
            if(kr >= 0 && kr < len) {
 800bdc8:	eb10 0808 	adds.w	r8, r0, r8
 800bdcc:	d408      	bmi.n	800bde0 <lv_draw_mask_radius+0x1bc>
 800bdce:	4544      	cmp	r4, r8
 800bdd0:	dd06      	ble.n	800bde0 <lv_draw_mask_radius+0x1bc>
                mask_buf[kr] = mask_mix(mask_buf[kr], m);
 800bdd2:	f815 0008 	ldrb.w	r0, [r5, r8]
 800bdd6:	4611      	mov	r1, r2
 800bdd8:	f7ff fc32 	bl	800b640 <mask_mix>
 800bddc:	f805 0008 	strb.w	r0, [r5, r8]
            if(outer == false) {
 800bde0:	9b01      	ldr	r3, [sp, #4]
 800bde2:	bb23      	cbnz	r3, 800be2e <lv_draw_mask_radius+0x20a>
                if(kl > len)  {
 800bde4:	42b4      	cmp	r4, r6
 800bde6:	f6ff af31 	blt.w	800bc4c <lv_draw_mask_radius+0x28>
                if(kl >= 0) {
 800bdea:	2e00      	cmp	r6, #0
 800bdec:	db03      	blt.n	800bdf6 <lv_draw_mask_radius+0x1d2>
                    lv_memset_00(&mask_buf[0], kl);
 800bdee:	4631      	mov	r1, r6
 800bdf0:	4628      	mov	r0, r5
 800bdf2:	f00b fe9f 	bl	8017b34 <lv_memset_00>
                if(kr < 0) {
 800bdf6:	f118 0801 	adds.w	r8, r8, #1
 800bdfa:	f53f af27 	bmi.w	800bc4c <lv_draw_mask_radius+0x28>
                if(kr <= len) {
 800bdfe:	4544      	cmp	r4, r8
 800be00:	f6ff af65 	blt.w	800bcce <lv_draw_mask_radius+0xaa>
                if(kr < len) lv_memset_00(&mask_buf[kr], len - kr);
 800be04:	eba4 0108 	sub.w	r1, r4, r8
 800be08:	eb05 0008 	add.w	r0, r5, r8
 800be0c:	e74e      	b.n	800bcac <lv_draw_mask_radius+0x88>
                x1.i = p->y_prev_x.i;
 800be0e:	f8da 3018 	ldr.w	r3, [sl, #24]
 800be12:	9307      	str	r3, [sp, #28]
            lv_sqrt(r2 - (y * y), &x0, sqrt_mask);
 800be14:	a906      	add	r1, sp, #24
 800be16:	fb06 b016 	mls	r0, r6, r6, fp
 800be1a:	9202      	str	r2, [sp, #8]
 800be1c:	f00b fbfe 	bl	801761c <lv_sqrt>
            p->y_prev_x.i = x0.i;
 800be20:	9b06      	ldr	r3, [sp, #24]
 800be22:	9a02      	ldr	r2, [sp, #8]
            p->y_prev = y;
 800be24:	f8ca 6014 	str.w	r6, [sl, #20]
            p->y_prev_x.i = x0.i;
 800be28:	f8ca 3018 	str.w	r3, [sl, #24]
 800be2c:	e79c      	b.n	800bd68 <lv_draw_mask_radius+0x144>
                kl++;
 800be2e:	1c70      	adds	r0, r6, #1
                if(len_tmp + first > len) len_tmp = len - first;
 800be30:	4544      	cmp	r4, r8
 800be32:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
                int32_t len_tmp = kr - first;
 800be36:	bfac      	ite	ge
 800be38:	eba8 0100 	subge.w	r1, r8, r0
                if(len_tmp + first > len) len_tmp = len - first;
 800be3c:	1a21      	sublt	r1, r4, r0
                if(first < len && len_tmp >= 0) {
 800be3e:	42a0      	cmp	r0, r4
 800be40:	f6bf af45 	bge.w	800bcce <lv_draw_mask_radius+0xaa>
 800be44:	e750      	b.n	800bce8 <lv_draw_mask_radius+0xc4>
            int32_t ofs = radius - (x0.i + 1);
 800be46:	3301      	adds	r3, #1
 800be48:	eba9 0903 	sub.w	r9, r9, r3
            if(outer) {
 800be4c:	9b01      	ldr	r3, [sp, #4]
            int32_t kl = k + ofs;
 800be4e:	eb08 0a09 	add.w	sl, r8, r9
            int32_t kr = k + (w - ofs - 1);
 800be52:	eba7 0909 	sub.w	r9, r7, r9
 800be56:	f109 39ff 	add.w	r9, r9, #4294967295
 800be5a:	44c8      	add	r8, r9
            if(outer) {
 800be5c:	b18b      	cbz	r3, 800be82 <lv_draw_mask_radius+0x25e>
                int32_t first = kl + 1;
 800be5e:	f10a 0001 	add.w	r0, sl, #1
                if(len_tmp + first > len) len_tmp = len - first;
 800be62:	4544      	cmp	r4, r8
 800be64:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
                int32_t len_tmp = kr - first;
 800be68:	bfac      	ite	ge
 800be6a:	eba8 0100 	subge.w	r1, r8, r0
                if(len_tmp + first > len) len_tmp = len - first;
 800be6e:	1a21      	sublt	r1, r4, r0
                if(first < len && len_tmp >= 0) {
 800be70:	42a0      	cmp	r0, r4
 800be72:	da06      	bge.n	800be82 <lv_draw_mask_radius+0x25e>
 800be74:	2900      	cmp	r1, #0
 800be76:	db04      	blt.n	800be82 <lv_draw_mask_radius+0x25e>
                    lv_memset_00(&mask_buf[first], len_tmp);
 800be78:	4428      	add	r0, r5
 800be7a:	9202      	str	r2, [sp, #8]
 800be7c:	f00b fe5a 	bl	8017b34 <lv_memset_00>
 800be80:	9a02      	ldr	r2, [sp, #8]
            uint32_t i = x0.i + 1;
 800be82:	f8bd 7018 	ldrh.w	r7, [sp, #24]
            lv_sqrt(r2 - (x0.i * x0.i), &y_prev, sqrt_mask);
 800be86:	a908      	add	r1, sp, #32
 800be88:	9202      	str	r2, [sp, #8]
 800be8a:	fb07 b017 	mls	r0, r7, r7, fp
            uint32_t i = x0.i + 1;
 800be8e:	f107 0901 	add.w	r9, r7, #1
            lv_sqrt(r2 - (x0.i * x0.i), &y_prev, sqrt_mask);
 800be92:	f00b fbc3 	bl	801761c <lv_sqrt>
            if(y_prev.f == 0) {
 800be96:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 800be9a:	9a02      	ldr	r2, [sp, #8]
 800be9c:	b93b      	cbnz	r3, 800beae <lv_draw_mask_radius+0x28a>
                y_prev.i--;
 800be9e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800bea2:	3b01      	subs	r3, #1
 800bea4:	f8ad 3020 	strh.w	r3, [sp, #32]
                y_prev.f = 0xFF;
 800bea8:	23ff      	movs	r3, #255	; 0xff
 800beaa:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
            if(y_prev.i >= y) {
 800beae:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800beb2:	42b3      	cmp	r3, r6
 800beb4:	db33      	blt.n	800bf1e <lv_draw_mask_radius+0x2fa>
                lv_sqrt(r2 - (i * i), &y_next, sqrt_mask);
 800beb6:	a909      	add	r1, sp, #36	; 0x24
 800beb8:	fb09 b019 	mls	r0, r9, r9, fp
 800bebc:	f00b fbae 	bl	801761c <lv_sqrt>
                m = 255 - (((255 - x0.f) * (255 - y_next.f)) >> 9);
 800bec0:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 800bec4:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
 800bec8:	f1c3 01ff 	rsb	r1, r3, #255	; 0xff
 800becc:	f1c2 03ff 	rsb	r3, r2, #255	; 0xff
 800bed0:	434b      	muls	r3, r1
                if(outer) m = 255 - m;
 800bed2:	9901      	ldr	r1, [sp, #4]
                m = 255 - (((255 - x0.f) * (255 - y_next.f)) >> 9);
 800bed4:	f3c3 2347 	ubfx	r3, r3, #9, #8
                if(outer) m = 255 - m;
 800bed8:	b909      	cbnz	r1, 800bede <lv_draw_mask_radius+0x2ba>
                m = 255 - (((255 - x0.f) * (255 - y_next.f)) >> 9);
 800beda:	43db      	mvns	r3, r3
 800bedc:	b2db      	uxtb	r3, r3
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
 800bede:	f1ba 0f00 	cmp.w	sl, #0
 800bee2:	db08      	blt.n	800bef6 <lv_draw_mask_radius+0x2d2>
 800bee4:	4554      	cmp	r4, sl
 800bee6:	dd06      	ble.n	800bef6 <lv_draw_mask_radius+0x2d2>
 800bee8:	f815 000a 	ldrb.w	r0, [r5, sl]
 800beec:	4619      	mov	r1, r3
 800beee:	f7ff fba7 	bl	800b640 <mask_mix>
 800bef2:	f805 000a 	strb.w	r0, [r5, sl]
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
 800bef6:	f1b8 0f00 	cmp.w	r8, #0
 800befa:	db08      	blt.n	800bf0e <lv_draw_mask_radius+0x2ea>
 800befc:	4544      	cmp	r4, r8
 800befe:	dd06      	ble.n	800bf0e <lv_draw_mask_radius+0x2ea>
 800bf00:	f815 0008 	ldrb.w	r0, [r5, r8]
 800bf04:	4619      	mov	r1, r3
 800bf06:	f7ff fb9b 	bl	800b640 <mask_mix>
 800bf0a:	f805 0008 	strb.w	r0, [r5, r8]
                kl--;
 800bf0e:	f10a 3aff 	add.w	sl, sl, #4294967295
                kr++;
 800bf12:	f108 0801 	add.w	r8, r8, #1
                i++;
 800bf16:	f107 0902 	add.w	r9, r7, #2
                y_prev.f = y_next.f;
 800bf1a:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
            for(; i <= x1.i; i++) {
 800bf1e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 */
LV_ATTRIBUTE_FAST_MEM static inline void sqrt_approx(lv_sqrt_res_t * q, lv_sqrt_res_t * ref, uint32_t x)
{
    x = x << 8; /*Upscale for extra precision*/

    uint32_t raw = (ref->i << 4) + (ref->f >> 4);
 800bf22:	464f      	mov	r7, r9
 800bf24:	f8bd c022 	ldrh.w	ip, [sp, #34]	; 0x22
 800bf28:	4646      	mov	r6, r8
            for(; i <= x1.i; i++) {
 800bf2a:	9302      	str	r3, [sp, #8]
    uint32_t raw = (ref->i << 4) + (ref->f >> 4);
 800bf2c:	4652      	mov	r2, sl
 800bf2e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800bf32:	2100      	movs	r1, #0
 800bf34:	011b      	lsls	r3, r3, #4
 800bf36:	9304      	str	r3, [sp, #16]
 800bf38:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 800bf3c:	9303      	str	r3, [sp, #12]
 800bf3e:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
            for(; i <= x1.i; i++) {
 800bf42:	9802      	ldr	r0, [sp, #8]
 800bf44:	42b8      	cmp	r0, r7
 800bf46:	d251      	bcs.n	800bfec <lv_draw_mask_radius+0x3c8>
 800bf48:	4602      	mov	r2, r0
 800bf4a:	3201      	adds	r2, #1
 800bf4c:	4591      	cmp	r9, r2
 800bf4e:	eba2 0009 	sub.w	r0, r2, r9
 800bf52:	eba9 0602 	sub.w	r6, r9, r2
 800bf56:	bf84      	itt	hi
 800bf58:	2000      	movhi	r0, #0
 800bf5a:	2600      	movhi	r6, #0
 800bf5c:	4480      	add	r8, r0
 800bf5e:	44b2      	add	sl, r6
 800bf60:	b131      	cbz	r1, 800bf70 <lv_draw_mask_radius+0x34c>
 800bf62:	9a03      	ldr	r2, [sp, #12]
 800bf64:	f8ad c022 	strh.w	ip, [sp, #34]	; 0x22
 800bf68:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 800bf6c:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
            if(y_prev.f) {
 800bf70:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 800bf74:	b323      	cbz	r3, 800bfc0 <lv_draw_mask_radius+0x39c>
                m = (y_prev.f * x1.f) >> 9;
 800bf76:	f8bd 101e 	ldrh.w	r1, [sp, #30]
                if(outer) m = 255 - m;
 800bf7a:	9a01      	ldr	r2, [sp, #4]
                m = (y_prev.f * x1.f) >> 9;
 800bf7c:	434b      	muls	r3, r1
 800bf7e:	f3c3 2347 	ubfx	r3, r3, #9, #8
                if(outer) m = 255 - m;
 800bf82:	b10a      	cbz	r2, 800bf88 <lv_draw_mask_radius+0x364>
 800bf84:	43db      	mvns	r3, r3
 800bf86:	b2db      	uxtb	r3, r3
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
 800bf88:	f1ba 0f00 	cmp.w	sl, #0
 800bf8c:	db08      	blt.n	800bfa0 <lv_draw_mask_radius+0x37c>
 800bf8e:	4554      	cmp	r4, sl
 800bf90:	dd06      	ble.n	800bfa0 <lv_draw_mask_radius+0x37c>
 800bf92:	f815 000a 	ldrb.w	r0, [r5, sl]
 800bf96:	4619      	mov	r1, r3
 800bf98:	f7ff fb52 	bl	800b640 <mask_mix>
 800bf9c:	f805 000a 	strb.w	r0, [r5, sl]
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
 800bfa0:	f1b8 0f00 	cmp.w	r8, #0
 800bfa4:	db08      	blt.n	800bfb8 <lv_draw_mask_radius+0x394>
 800bfa6:	4544      	cmp	r4, r8
 800bfa8:	dd06      	ble.n	800bfb8 <lv_draw_mask_radius+0x394>
 800bfaa:	f815 0008 	ldrb.w	r0, [r5, r8]
 800bfae:	4619      	mov	r1, r3
 800bfb0:	f7ff fb46 	bl	800b640 <mask_mix>
 800bfb4:	f805 0008 	strb.w	r0, [r5, r8]
                kl--;
 800bfb8:	f10a 3aff 	add.w	sl, sl, #4294967295
                kr++;
 800bfbc:	f108 0801 	add.w	r8, r8, #1
            if(outer == 0) {
 800bfc0:	9b01      	ldr	r3, [sp, #4]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	f47f ae83 	bne.w	800bcce <lv_draw_mask_radius+0xaa>
                kl++;
 800bfc8:	f10a 0101 	add.w	r1, sl, #1
                if(kl > len) {
 800bfcc:	428c      	cmp	r4, r1
 800bfce:	f6ff ae3d 	blt.w	800bc4c <lv_draw_mask_radius+0x28>
                if(kl >= 0) lv_memset_00(&mask_buf[0], kl);
 800bfd2:	2900      	cmp	r1, #0
 800bfd4:	db02      	blt.n	800bfdc <lv_draw_mask_radius+0x3b8>
 800bfd6:	4628      	mov	r0, r5
 800bfd8:	f00b fdac 	bl	8017b34 <lv_memset_00>
                if(kr < 0) {
 800bfdc:	f1b8 0f00 	cmp.w	r8, #0
 800bfe0:	f6ff ae34 	blt.w	800bc4c <lv_draw_mask_radius+0x28>
                if(kr < len) lv_memset_00(&mask_buf[kr], len - kr);
 800bfe4:	4544      	cmp	r4, r8
 800bfe6:	f77f ae72 	ble.w	800bcce <lv_draw_mask_radius+0xaa>
 800bfea:	e70b      	b.n	800be04 <lv_draw_mask_radius+0x1e0>
    uint32_t raw = (ref->i << 4) + (ref->f >> 4);
 800bfec:	f3cc 130f 	ubfx	r3, ip, #4, #16
 800bff0:	9904      	ldr	r1, [sp, #16]
 800bff2:	1859      	adds	r1, r3, r1
                sqrt_approx(&y_next, &y_prev, r2 - (i * i));
 800bff4:	fb07 b317 	mls	r3, r7, r7, fp
    uint32_t raw2 = raw * raw;
 800bff8:	fb01 f001 	mul.w	r0, r1, r1

    int32_t d = x - raw2;
 800bffc:	ebc0 2303 	rsb	r3, r0, r3, lsl #8
    d = (int32_t)d / (int32_t)(2 * raw) + raw;
 800c000:	0048      	lsls	r0, r1, #1
 800c002:	fb93 f3f0 	sdiv	r3, r3, r0
 800c006:	440b      	add	r3, r1
                if(outer) m = 255 - m;
 800c008:	9801      	ldr	r0, [sp, #4]

    q->i = d >> 4;
 800c00a:	f3c3 110f 	ubfx	r1, r3, #4, #16
    q->f = (d & 0xF) << 4;
 800c00e:	011b      	lsls	r3, r3, #4
 800c010:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    q->i = d >> 4;
 800c014:	9103      	str	r1, [sp, #12]
                m = (y_prev.f + y_next.f) >> 1;
 800c016:	eb0c 0103 	add.w	r1, ip, r3
 800c01a:	f3c1 0147 	ubfx	r1, r1, #1, #8
                if(outer) m = 255 - m;
 800c01e:	b108      	cbz	r0, 800c024 <lv_draw_mask_radius+0x400>
 800c020:	43c9      	mvns	r1, r1
 800c022:	b2c9      	uxtb	r1, r1
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
 800c024:	2a00      	cmp	r2, #0
 800c026:	db07      	blt.n	800c038 <lv_draw_mask_radius+0x414>
 800c028:	4294      	cmp	r4, r2
 800c02a:	dd05      	ble.n	800c038 <lv_draw_mask_radius+0x414>
 800c02c:	5ca8      	ldrb	r0, [r5, r2]
 800c02e:	9105      	str	r1, [sp, #20]
 800c030:	f7ff fb06 	bl	800b640 <mask_mix>
 800c034:	9905      	ldr	r1, [sp, #20]
 800c036:	54a8      	strb	r0, [r5, r2]
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
 800c038:	2e00      	cmp	r6, #0
 800c03a:	db05      	blt.n	800c048 <lv_draw_mask_radius+0x424>
 800c03c:	42b4      	cmp	r4, r6
 800c03e:	dd03      	ble.n	800c048 <lv_draw_mask_radius+0x424>
 800c040:	5da8      	ldrb	r0, [r5, r6]
 800c042:	f7ff fafd 	bl	800b640 <mask_mix>
 800c046:	55a8      	strb	r0, [r5, r6]
                kl--;
 800c048:	3a01      	subs	r2, #1
                kr++;
 800c04a:	3601      	adds	r6, #1
            for(; i <= x1.i; i++) {
 800c04c:	3701      	adds	r7, #1
                y_prev.f = y_next.f;
 800c04e:	469c      	mov	ip, r3
            for(; i <= x1.i; i++) {
 800c050:	2101      	movs	r1, #1
 800c052:	e776      	b.n	800bf42 <lv_draw_mask_radius+0x31e>
        if(radius <= 256) sqrt_mask = 0x800;
 800c054:	f5b9 7f80 	cmp.w	r9, #256	; 0x100
            y = radius - abs_y;
 800c058:	eba9 0606 	sub.w	r6, r9, r6
            if(y == p->y_prev) {
 800c05c:	f8da 3014 	ldr.w	r3, [sl, #20]
        if(radius <= 256) sqrt_mask = 0x800;
 800c060:	bfd4      	ite	le
 800c062:	f44f 6200 	movle.w	r2, #2048	; 0x800
 800c066:	f44f 4200 	movgt.w	r2, #32768	; 0x8000
            if(y == p->y_prev) {
 800c06a:	42b3      	cmp	r3, r6
 800c06c:	f43f ae6a 	beq.w	800bd44 <lv_draw_mask_radius+0x120>
                lv_sqrt(r2 - (y * y), &x0, sqrt_mask);
 800c070:	a906      	add	r1, sp, #24
 800c072:	fb06 b016 	mls	r0, r6, r6, fp
 800c076:	9202      	str	r2, [sp, #8]
 800c078:	f00b fad0 	bl	801761c <lv_sqrt>
 800c07c:	9a02      	ldr	r2, [sp, #8]
 800c07e:	e664      	b.n	800bd4a <lv_draw_mask_radius+0x126>

0800c080 <lv_draw_mask_add>:
{
 800c080:	b570      	push	{r4, r5, r6, lr}
 800c082:	2300      	movs	r3, #0
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param == NULL) break;
 800c084:	4c08      	ldr	r4, [pc, #32]	; (800c0a8 <lv_draw_mask_add+0x28>)
 800c086:	f854 6033 	ldr.w	r6, [r4, r3, lsl #3]
 800c08a:	b2da      	uxtb	r2, r3
 800c08c:	eb04 05c3 	add.w	r5, r4, r3, lsl #3
 800c090:	b12e      	cbz	r6, 800c09e <lv_draw_mask_add+0x1e>
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 800c092:	3301      	adds	r3, #1
 800c094:	2b10      	cmp	r3, #16
 800c096:	d1f6      	bne.n	800c086 <lv_draw_mask_add+0x6>
        return LV_MASK_ID_INV;
 800c098:	f04f 30ff 	mov.w	r0, #4294967295
}
 800c09c:	bd70      	pop	{r4, r5, r6, pc}
    LV_GC_ROOT(_lv_draw_mask_list[i]).param = param;
 800c09e:	f844 0033 	str.w	r0, [r4, r3, lsl #3]
    return i;
 800c0a2:	b210      	sxth	r0, r2
    LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id = custom_id;
 800c0a4:	6069      	str	r1, [r5, #4]
    return i;
 800c0a6:	e7f9      	b.n	800c09c <lv_draw_mask_add+0x1c>
 800c0a8:	2000ae6c 	.word	0x2000ae6c

0800c0ac <lv_draw_mask_apply>:
{
 800c0ac:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800c0b0:	4607      	mov	r7, r0
 800c0b2:	4688      	mov	r8, r1
 800c0b4:	4691      	mov	r9, r2
 800c0b6:	469a      	mov	sl, r3
    _lv_draw_mask_saved_t * m = LV_GC_ROOT(_lv_draw_mask_list);
 800c0b8:	4e0c      	ldr	r6, [pc, #48]	; (800c0ec <lv_draw_mask_apply+0x40>)
    bool changed = false;
 800c0ba:	2500      	movs	r5, #0
    while(m->param) {
 800c0bc:	6834      	ldr	r4, [r6, #0]
 800c0be:	b934      	cbnz	r4, 800c0ce <lv_draw_mask_apply+0x22>
    return changed ? LV_DRAW_MASK_RES_CHANGED : LV_DRAW_MASK_RES_FULL_COVER;
 800c0c0:	2d00      	cmp	r5, #0
 800c0c2:	bf14      	ite	ne
 800c0c4:	2002      	movne	r0, #2
 800c0c6:	2001      	moveq	r0, #1
}
 800c0c8:	b002      	add	sp, #8
 800c0ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        res = dsc->cb(mask_buf, abs_x, abs_y, len, (void *)m->param);
 800c0ce:	9400      	str	r4, [sp, #0]
 800c0d0:	4653      	mov	r3, sl
 800c0d2:	6824      	ldr	r4, [r4, #0]
 800c0d4:	464a      	mov	r2, r9
 800c0d6:	4641      	mov	r1, r8
 800c0d8:	4638      	mov	r0, r7
 800c0da:	47a0      	blx	r4
        if(res == LV_DRAW_MASK_RES_TRANSP) return LV_DRAW_MASK_RES_TRANSP;
 800c0dc:	2800      	cmp	r0, #0
 800c0de:	d0f3      	beq.n	800c0c8 <lv_draw_mask_apply+0x1c>
        else if(res == LV_DRAW_MASK_RES_CHANGED) changed = true;
 800c0e0:	2802      	cmp	r0, #2
        m++;
 800c0e2:	f106 0608 	add.w	r6, r6, #8
        else if(res == LV_DRAW_MASK_RES_CHANGED) changed = true;
 800c0e6:	bf08      	it	eq
 800c0e8:	2501      	moveq	r5, #1
        m++;
 800c0ea:	e7e7      	b.n	800c0bc <lv_draw_mask_apply+0x10>
 800c0ec:	2000ae6c 	.word	0x2000ae6c

0800c0f0 <lv_draw_mask_remove_id>:
    if(id != LV_MASK_ID_INV) {
 800c0f0:	1c43      	adds	r3, r0, #1
 800c0f2:	f04f 0200 	mov.w	r2, #0
        p = LV_GC_ROOT(_lv_draw_mask_list[id]).param;
 800c0f6:	bf17      	itett	ne
 800c0f8:	4b06      	ldrne	r3, [pc, #24]	; (800c114 <lv_draw_mask_remove_id+0x24>)
    void * p = NULL;
 800c0fa:	4611      	moveq	r1, r2
        p = LV_GC_ROOT(_lv_draw_mask_list[id]).param;
 800c0fc:	f853 1030 	ldrne.w	r1, [r3, r0, lsl #3]
        LV_GC_ROOT(_lv_draw_mask_list[id]).param = NULL;
 800c100:	f843 2030 	strne.w	r2, [r3, r0, lsl #3]
        LV_GC_ROOT(_lv_draw_mask_list[id]).custom_id = NULL;
 800c104:	bf18      	it	ne
 800c106:	eb03 03c0 	addne.w	r3, r3, r0, lsl #3
}
 800c10a:	4608      	mov	r0, r1
        LV_GC_ROOT(_lv_draw_mask_list[id]).custom_id = NULL;
 800c10c:	bf18      	it	ne
 800c10e:	605a      	strne	r2, [r3, #4]
}
 800c110:	4770      	bx	lr
 800c112:	bf00      	nop
 800c114:	2000ae6c 	.word	0x2000ae6c

0800c118 <lv_draw_mask_remove_custom>:
{
 800c118:	2200      	movs	r2, #0
 800c11a:	4b08      	ldr	r3, [pc, #32]	; (800c13c <lv_draw_mask_remove_custom+0x24>)
 800c11c:	b530      	push	{r4, r5, lr}
    void * p = NULL;
 800c11e:	4611      	mov	r1, r2
            LV_GC_ROOT(_lv_draw_mask_list[i]).param = NULL;
 800c120:	4614      	mov	r4, r2
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id == custom_id) {
 800c122:	685d      	ldr	r5, [r3, #4]
 800c124:	3201      	adds	r2, #1
 800c126:	4285      	cmp	r5, r0
            p = LV_GC_ROOT(_lv_draw_mask_list[i]).param;
 800c128:	bf04      	itt	eq
 800c12a:	6819      	ldreq	r1, [r3, #0]
            LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id = NULL;
 800c12c:	e9c3 4400 	strdeq	r4, r4, [r3]
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 800c130:	2a10      	cmp	r2, #16
 800c132:	f103 0308 	add.w	r3, r3, #8
 800c136:	d1f4      	bne.n	800c122 <lv_draw_mask_remove_custom+0xa>
}
 800c138:	4608      	mov	r0, r1
 800c13a:	bd30      	pop	{r4, r5, pc}
 800c13c:	2000ae6c 	.word	0x2000ae6c

0800c140 <lv_draw_mask_get_cnt>:
{
 800c140:	2300      	movs	r3, #0
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param) cnt++;
 800c142:	4a05      	ldr	r2, [pc, #20]	; (800c158 <lv_draw_mask_get_cnt+0x18>)
    uint8_t cnt = 0;
 800c144:	4618      	mov	r0, r3
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param) cnt++;
 800c146:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800c14a:	b109      	cbz	r1, 800c150 <lv_draw_mask_get_cnt+0x10>
 800c14c:	3001      	adds	r0, #1
 800c14e:	b2c0      	uxtb	r0, r0
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 800c150:	3301      	adds	r3, #1
 800c152:	2b10      	cmp	r3, #16
 800c154:	d1f7      	bne.n	800c146 <lv_draw_mask_get_cnt+0x6>
}
 800c156:	4770      	bx	lr
 800c158:	2000ae6c 	.word	0x2000ae6c

0800c15c <lv_draw_mask_line_points_init>:
{
 800c15c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c160:	4615      	mov	r5, r2
 800c162:	f9bd 6020 	ldrsh.w	r6, [sp, #32]
 800c166:	460f      	mov	r7, r1
    lv_memset_00(param, sizeof(lv_draw_mask_line_param_t));
 800c168:	212c      	movs	r1, #44	; 0x2c
{
 800c16a:	4604      	mov	r4, r0
 800c16c:	4698      	mov	r8, r3
 800c16e:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
    lv_memset_00(param, sizeof(lv_draw_mask_line_param_t));
 800c172:	f00b fcdf 	bl	8017b34 <lv_memset_00>
    if(p1y == p2y && side == LV_DRAW_MASK_LINE_SIDE_BOTTOM) {
 800c176:	42b5      	cmp	r5, r6
 800c178:	d106      	bne.n	800c188 <lv_draw_mask_line_points_init+0x2c>
 800c17a:	f1b9 0f03 	cmp.w	r9, #3
 800c17e:	d10b      	bne.n	800c198 <lv_draw_mask_line_points_init+0x3c>
        p1y--;
 800c180:	3d01      	subs	r5, #1
        p2y--;
 800c182:	3e01      	subs	r6, #1
        p1y--;
 800c184:	b22d      	sxth	r5, r5
        p2y--;
 800c186:	b236      	sxth	r6, r6
    if(p1y > p2y) {
 800c188:	42b5      	cmp	r5, r6
 800c18a:	dd05      	ble.n	800c198 <lv_draw_mask_line_points_init+0x3c>
 800c18c:	462a      	mov	r2, r5
 800c18e:	4635      	mov	r5, r6
 800c190:	4616      	mov	r6, r2
 800c192:	463a      	mov	r2, r7
        p1x = t;
 800c194:	4647      	mov	r7, r8
        p2x = p1x;
 800c196:	4690      	mov	r8, r2
    param->cfg.side = side;
 800c198:	7c22      	ldrb	r2, [r4, #16]
    param->flat = (LV_ABS(p2x - p1x) > LV_ABS(p2y - p1y)) ? 1 : 0;
 800c19a:	eba8 0307 	sub.w	r3, r8, r7
    param->cfg.p1.y = p1y;
 800c19e:	8165      	strh	r5, [r4, #10]
    param->cfg.side = side;
 800c1a0:	f369 0201 	bfi	r2, r9, #0, #2
    param->origo.y = p1y;
 800c1a4:	82a5      	strh	r5, [r4, #20]
    param->flat = (LV_ABS(p2x - p1x) > LV_ABS(p2y - p1y)) ? 1 : 0;
 800c1a6:	1b75      	subs	r5, r6, r5
 800c1a8:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
    param->cfg.side = side;
 800c1ac:	7422      	strb	r2, [r4, #16]
    param->flat = (LV_ABS(p2x - p1x) > LV_ABS(p2y - p1y)) ? 1 : 0;
 800c1ae:	ea85 72e5 	eor.w	r2, r5, r5, asr #31
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_line;
 800c1b2:	482f      	ldr	r0, [pc, #188]	; (800c270 <lv_draw_mask_line_points_init+0x114>)
    param->flat = (LV_ABS(p2x - p1x) > LV_ABS(p2y - p1y)) ? 1 : 0;
 800c1b4:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
    param->cfg.p1.x = p1x;
 800c1b8:	8127      	strh	r7, [r4, #8]
    param->flat = (LV_ABS(p2x - p1x) > LV_ABS(p2y - p1y)) ? 1 : 0;
 800c1ba:	eba2 72e5 	sub.w	r2, r2, r5, asr #31
    param->cfg.p2.x = p2x;
 800c1be:	f8a4 800c 	strh.w	r8, [r4, #12]
    param->cfg.p2.y = p2y;
 800c1c2:	81e6      	strh	r6, [r4, #14]
    param->flat = (LV_ABS(p2x - p1x) > LV_ABS(p2y - p1y)) ? 1 : 0;
 800c1c4:	4291      	cmp	r1, r2
 800c1c6:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
    param->origo.x = p1x;
 800c1ca:	8267      	strh	r7, [r4, #18]
    param->flat = (LV_ABS(p2x - p1x) > LV_ABS(p2y - p1y)) ? 1 : 0;
 800c1cc:	bfd4      	ite	le
 800c1ce:	2100      	movle	r1, #0
 800c1d0:	2101      	movgt	r1, #1
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_line;
 800c1d2:	6020      	str	r0, [r4, #0]
    param->flat = (LV_ABS(p2x - p1x) > LV_ABS(p2y - p1y)) ? 1 : 0;
 800c1d4:	f361 0200 	bfi	r2, r1, #0, #1
    param->yx_steep = 0;
 800c1d8:	2100      	movs	r1, #0
    param->flat = (LV_ABS(p2x - p1x) > LV_ABS(p2y - p1y)) ? 1 : 0;
 800c1da:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
    if(param->flat) {
 800c1de:	07d2      	lsls	r2, r2, #31
    param->dsc.type = LV_DRAW_MASK_TYPE_LINE;
 800c1e0:	7121      	strb	r1, [r4, #4]
    param->xy_steep = 0;
 800c1e2:	e9c4 1106 	strd	r1, r1, [r4, #24]
    if(param->flat) {
 800c1e6:	d524      	bpl.n	800c232 <lv_draw_mask_line_points_init+0xd6>
        if(dx) {
 800c1e8:	b133      	cbz	r3, 800c1f8 <lv_draw_mask_line_points_init+0x9c>
            m = (1 << 20) / dx;  /*m is multiplier to normalize y (upscaled by 1024)*/
 800c1ea:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800c1ee:	fb92 f2f3 	sdiv	r2, r2, r3
            param->yx_steep = (m * dy) >> 10;
 800c1f2:	436a      	muls	r2, r5
 800c1f4:	1292      	asrs	r2, r2, #10
 800c1f6:	61e2      	str	r2, [r4, #28]
        if(dy) {
 800c1f8:	b135      	cbz	r5, 800c208 <lv_draw_mask_line_points_init+0xac>
            m = (1 << 20) / dy;  /*m is multiplier to normalize x (upscaled by 1024)*/
 800c1fa:	f44f 1680 	mov.w	r6, #1048576	; 0x100000
 800c1fe:	fb96 f5f5 	sdiv	r5, r6, r5
            param->xy_steep = (m * dx) >> 10;
 800c202:	436b      	muls	r3, r5
 800c204:	129b      	asrs	r3, r3, #10
 800c206:	61a3      	str	r3, [r4, #24]
        param->steep = param->yx_steep;
 800c208:	69e3      	ldr	r3, [r4, #28]
    if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT) param->inv = 0;
 800c20a:	7c22      	ldrb	r2, [r4, #16]
        param->steep = param->xy_steep;
 800c20c:	6223      	str	r3, [r4, #32]
    if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT) param->inv = 0;
 800c20e:	f012 0203 	ands.w	r2, r2, #3
 800c212:	6a21      	ldr	r1, [r4, #32]
 800c214:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800c218:	d11d      	bne.n	800c256 <lv_draw_mask_line_points_init+0xfa>
 800c21a:	f36f 0341 	bfc	r3, #1, #1
    if(param->steep < 0) param->spx = -param->spx;
 800c21e:	2900      	cmp	r1, #0
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) param->inv = 1;
 800c220:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    param->spx = param->steep >> 2;
 800c224:	ea4f 03a1 	mov.w	r3, r1, asr #2
    if(param->steep < 0) param->spx = -param->spx;
 800c228:	bfb8      	it	lt
 800c22a:	425b      	neglt	r3, r3
 800c22c:	6263      	str	r3, [r4, #36]	; 0x24
}
 800c22e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(dy) {
 800c232:	b135      	cbz	r5, 800c242 <lv_draw_mask_line_points_init+0xe6>
            m = (1 << 20) / dy;  /*m is multiplier to normalize x (upscaled by 1024)*/
 800c234:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800c238:	fb92 f2f5 	sdiv	r2, r2, r5
            param->xy_steep = (m * dx) >> 10;
 800c23c:	435a      	muls	r2, r3
 800c23e:	1292      	asrs	r2, r2, #10
 800c240:	61a2      	str	r2, [r4, #24]
        if(dx) {
 800c242:	b133      	cbz	r3, 800c252 <lv_draw_mask_line_points_init+0xf6>
            m = (1 << 20) / dx;  /*m is multiplier to normalize x (upscaled by 1024)*/
 800c244:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 800c248:	fb91 f3f3 	sdiv	r3, r1, r3
            param->yx_steep = (m * dy) >> 10;
 800c24c:	435d      	muls	r5, r3
 800c24e:	12ad      	asrs	r5, r5, #10
 800c250:	61e5      	str	r5, [r4, #28]
        param->steep = param->xy_steep;
 800c252:	69a3      	ldr	r3, [r4, #24]
 800c254:	e7d9      	b.n	800c20a <lv_draw_mask_line_points_init+0xae>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) param->inv = 1;
 800c256:	2a01      	cmp	r2, #1
 800c258:	d102      	bne.n	800c260 <lv_draw_mask_line_points_init+0x104>
 800c25a:	f043 0302 	orr.w	r3, r3, #2
 800c25e:	e7de      	b.n	800c21e <lv_draw_mask_line_points_init+0xc2>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP) {
 800c260:	2a02      	cmp	r2, #2
 800c262:	d102      	bne.n	800c26a <lv_draw_mask_line_points_init+0x10e>
        if(param->steep > 0) param->inv = 1;
 800c264:	2900      	cmp	r1, #0
 800c266:	dcf8      	bgt.n	800c25a <lv_draw_mask_line_points_init+0xfe>
 800c268:	e7d7      	b.n	800c21a <lv_draw_mask_line_points_init+0xbe>
        if(param->steep > 0) param->inv = 0;
 800c26a:	2900      	cmp	r1, #0
 800c26c:	dcd5      	bgt.n	800c21a <lv_draw_mask_line_points_init+0xbe>
 800c26e:	e7f4      	b.n	800c25a <lv_draw_mask_line_points_init+0xfe>
 800c270:	0800b65d 	.word	0x0800b65d

0800c274 <lv_draw_mask_line_angle_init>:
    if(angle > 180) angle -= 180; /*> 180 will swap the origo*/
 800c274:	2bb4      	cmp	r3, #180	; 0xb4
{
 800c276:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800c27a:	461c      	mov	r4, r3
    if(angle > 180) angle -= 180; /*> 180 will swap the origo*/
 800c27c:	bfc8      	it	gt
 800c27e:	f1a3 04b4 	subgt.w	r4, r3, #180	; 0xb4
{
 800c282:	4606      	mov	r6, r0
 800c284:	4690      	mov	r8, r2
    if(angle > 180) angle -= 180; /*> 180 will swap the origo*/
 800c286:	bfc8      	it	gt
 800c288:	b224      	sxthgt	r4, r4
{
 800c28a:	460f      	mov	r7, r1
    p2x = (lv_trigo_sin(angle + 90) >> 5) + p1x;
 800c28c:	f104 005a 	add.w	r0, r4, #90	; 0x5a
 800c290:	b200      	sxth	r0, r0
 800c292:	f00b f973 	bl	801757c <lv_trigo_sin>
 800c296:	4605      	mov	r5, r0
    p2y = (lv_trigo_sin(angle) >> 5) + py;
 800c298:	4620      	mov	r0, r4
 800c29a:	f00b f96f 	bl	801757c <lv_trigo_sin>
    lv_draw_mask_line_points_init(param, p1x, py, p2x, p2y, side);
 800c29e:	f89d 2020 	ldrb.w	r2, [sp, #32]
 800c2a2:	eb08 1060 	add.w	r0, r8, r0, asr #5
 800c2a6:	4639      	mov	r1, r7
 800c2a8:	eb07 1365 	add.w	r3, r7, r5, asr #5
 800c2ac:	9201      	str	r2, [sp, #4]
 800c2ae:	b200      	sxth	r0, r0
 800c2b0:	4642      	mov	r2, r8
 800c2b2:	b21b      	sxth	r3, r3
 800c2b4:	9000      	str	r0, [sp, #0]
 800c2b6:	4630      	mov	r0, r6
 800c2b8:	f7ff ff50 	bl	800c15c <lv_draw_mask_line_points_init>
}
 800c2bc:	b002      	add	sp, #8
 800c2be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800c2c4 <lv_draw_mask_angle_init>:
{
 800c2c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c2c6:	f240 1567 	movw	r5, #359	; 0x167
 800c2ca:	b085      	sub	sp, #20
 800c2cc:	4604      	mov	r4, r0
 800c2ce:	42ab      	cmp	r3, r5
 800c2d0:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
 800c2d4:	bfa8      	it	ge
 800c2d6:	462b      	movge	r3, r5
 800c2d8:	42b5      	cmp	r5, r6
 800c2da:	bfa8      	it	ge
 800c2dc:	4635      	movge	r5, r6
 800c2de:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    if(end_angle < 0)
 800c2e2:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
    if(end_angle < start_angle) {
 800c2e6:	b29f      	uxth	r7, r3
 800c2e8:	429d      	cmp	r5, r3
 800c2ea:	da28      	bge.n	800c33e <lv_draw_mask_angle_init+0x7a>
        param->delta_deg = 360 - start_angle + end_angle;
 800c2ec:	f505 70b4 	add.w	r0, r5, #360	; 0x168
 800c2f0:	1bc0      	subs	r0, r0, r7
        param->delta_deg = LV_ABS(end_angle - start_angle);
 800c2f2:	b280      	uxth	r0, r0
    lv_draw_mask_line_angle_init(&param->start_line, vertex_x, vertex_y, start_angle, start_side);
 800c2f4:	2fb3      	cmp	r7, #179	; 0xb3
    param->cfg.start_angle = start_angle;
 800c2f6:	81a3      	strh	r3, [r4, #12]
 800c2f8:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
    lv_draw_mask_line_angle_init(&param->start_line, vertex_x, vertex_y, start_angle, start_side);
 800c2fc:	bf98      	it	ls
 800c2fe:	2700      	movls	r7, #0
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_angle;
 800c300:	4811      	ldr	r0, [pc, #68]	; (800c348 <lv_draw_mask_angle_init+0x84>)
    lv_draw_mask_line_angle_init(&param->start_line, vertex_x, vertex_y, start_angle, start_side);
 800c302:	bf88      	it	hi
 800c304:	2701      	movhi	r7, #1
    param->cfg.vertex_p.x = vertex_x;
 800c306:	8121      	strh	r1, [r4, #8]
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_angle;
 800c308:	6020      	str	r0, [r4, #0]
    param->dsc.type = LV_DRAW_MASK_TYPE_ANGLE;
 800c30a:	2001      	movs	r0, #1
    param->cfg.vertex_p.y = vertex_y;
 800c30c:	8162      	strh	r2, [r4, #10]
    param->dsc.type = LV_DRAW_MASK_TYPE_ANGLE;
 800c30e:	7120      	strb	r0, [r4, #4]
    lv_draw_mask_line_angle_init(&param->start_line, vertex_x, vertex_y, start_angle, start_side);
 800c310:	f104 0010 	add.w	r0, r4, #16
    param->cfg.end_angle = end_angle;
 800c314:	81e5      	strh	r5, [r4, #14]
    lv_draw_mask_line_angle_init(&param->start_line, vertex_x, vertex_y, start_angle, start_side);
 800c316:	9700      	str	r7, [sp, #0]
 800c318:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800c31c:	f7ff ffaa 	bl	800c274 <lv_draw_mask_line_angle_init>
    lv_draw_mask_line_angle_init(&param->end_line, vertex_x, vertex_y, end_angle, end_side);
 800c320:	2eb3      	cmp	r6, #179	; 0xb3
 800c322:	462b      	mov	r3, r5
 800c324:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 800c328:	bfcc      	ite	gt
 800c32a:	2600      	movgt	r6, #0
 800c32c:	2601      	movle	r6, #1
 800c32e:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800c332:	960a      	str	r6, [sp, #40]	; 0x28
}
 800c334:	b005      	add	sp, #20
 800c336:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    lv_draw_mask_line_angle_init(&param->end_line, vertex_x, vertex_y, end_angle, end_side);
 800c33a:	f7ff bf9b 	b.w	800c274 <lv_draw_mask_line_angle_init>
        param->delta_deg = LV_ABS(end_angle - start_angle);
 800c33e:	1ae8      	subs	r0, r5, r3
 800c340:	2800      	cmp	r0, #0
 800c342:	bfb8      	it	lt
 800c344:	4240      	neglt	r0, r0
 800c346:	e7d4      	b.n	800c2f2 <lv_draw_mask_angle_init+0x2e>
 800c348:	0800b9e1 	.word	0x0800b9e1

0800c34c <lv_draw_mask_radius_init>:
{
 800c34c:	b5f0      	push	{r4, r5, r6, r7, lr}
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800c34e:	f9b1 6004 	ldrsh.w	r6, [r1, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800c352:	f9b1 5006 	ldrsh.w	r5, [r1, #6]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800c356:	f9b1 7000 	ldrsh.w	r7, [r1]
 800c35a:	1c74      	adds	r4, r6, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800c35c:	f9b1 c002 	ldrsh.w	ip, [r1, #2]
 800c360:	1c69      	adds	r1, r5, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800c362:	1be4      	subs	r4, r4, r7
    dest->x1 = src->x1;
 800c364:	8107      	strh	r7, [r0, #8]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800c366:	eba1 010c 	sub.w	r1, r1, ip
    dest->y1 = src->y1;
 800c36a:	f8a0 c00a 	strh.w	ip, [r0, #10]
    int32_t short_side = LV_MIN(w, h);
 800c36e:	b224      	sxth	r4, r4
    dest->x2 = src->x2;
 800c370:	8186      	strh	r6, [r0, #12]
 800c372:	b209      	sxth	r1, r1
    dest->y2 = src->y2;
 800c374:	81c5      	strh	r5, [r0, #14]
 800c376:	42a1      	cmp	r1, r4
 800c378:	bfa8      	it	ge
 800c37a:	4621      	movge	r1, r4
    if(radius > short_side >> 1) radius = short_side >> 1;
 800c37c:	ebb2 0f61 	cmp.w	r2, r1, asr #1
 800c380:	ea4f 0461 	mov.w	r4, r1, asr #1
 800c384:	bfc8      	it	gt
 800c386:	b222      	sxthgt	r2, r4
    param->cfg.radius = radius;
 800c388:	8202      	strh	r2, [r0, #16]
    param->cfg.outer = inv ? 1 : 0;
 800c38a:	7c82      	ldrb	r2, [r0, #18]
 800c38c:	f363 0200 	bfi	r2, r3, #0, #1
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_radius;
 800c390:	4b05      	ldr	r3, [pc, #20]	; (800c3a8 <lv_draw_mask_radius_init+0x5c>)
 800c392:	6003      	str	r3, [r0, #0]
    param->dsc.type = LV_DRAW_MASK_TYPE_RADIUS;
 800c394:	2302      	movs	r3, #2
    param->cfg.outer = inv ? 1 : 0;
 800c396:	7482      	strb	r2, [r0, #18]
    param->y_prev_x.i = 0;
 800c398:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    param->dsc.type = LV_DRAW_MASK_TYPE_RADIUS;
 800c39c:	7103      	strb	r3, [r0, #4]
    param->y_prev_x.i = 0;
 800c39e:	2300      	movs	r3, #0
 800c3a0:	e9c0 2305 	strd	r2, r3, [r0, #20]
}
 800c3a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c3a6:	bf00      	nop
 800c3a8:	0800bc25 	.word	0x0800bc25

0800c3ac <lv_area_copy>:
    dest->x1 = src->x1;
 800c3ac:	f9b1 3000 	ldrsh.w	r3, [r1]
 800c3b0:	8003      	strh	r3, [r0, #0]
    dest->y1 = src->y1;
 800c3b2:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 800c3b6:	8043      	strh	r3, [r0, #2]
    dest->x2 = src->x2;
 800c3b8:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 800c3bc:	8083      	strh	r3, [r0, #4]
    dest->y2 = src->y2;
 800c3be:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 800c3c2:	80c3      	strh	r3, [r0, #6]
}
 800c3c4:	4770      	bx	lr

0800c3c6 <grad_get>:
#endif
}

#if LV_DRAW_COMPLEX
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t grad_get(const lv_draw_rect_dsc_t * dsc, lv_coord_t s, lv_coord_t i)
{
 800c3c6:	b570      	push	{r4, r5, r6, lr}
    int32_t min = (dsc->bg_main_color_stop * s) >> 8;
 800c3c8:	7a04      	ldrb	r4, [r0, #8]
 800c3ca:	fb14 f301 	smulbb	r3, r4, r1
    if(i <= min) return dsc->bg_color;
 800c3ce:	ebb2 2f23 	cmp.w	r2, r3, asr #8
    int32_t min = (dsc->bg_main_color_stop * s) >> 8;
 800c3d2:	ea4f 2523 	mov.w	r5, r3, asr #8
    if(i <= min) return dsc->bg_color;
 800c3d6:	dc01      	bgt.n	800c3dc <grad_get+0x16>
 800c3d8:	8880      	ldrh	r0, [r0, #4]
    int32_t d = dsc->bg_grad_color_stop - dsc->bg_main_color_stop;
    d = (s * d) >> 8;
    i -= min;
    lv_opa_t mix = (i * 255) / d;
    return lv_color_mix(dsc->bg_grad_color, dsc->bg_color, mix);
}
 800c3da:	bd70      	pop	{r4, r5, r6, pc}
    int32_t max = (dsc->bg_grad_color_stop * s) >> 8;
 800c3dc:	7a43      	ldrb	r3, [r0, #9]
 800c3de:	fb13 f601 	smulbb	r6, r3, r1
    if(i >= max) return dsc->bg_grad_color;
 800c3e2:	ebb2 2f26 	cmp.w	r2, r6, asr #8
 800c3e6:	db01      	blt.n	800c3ec <grad_get+0x26>
 800c3e8:	88c0      	ldrh	r0, [r0, #6]
 800c3ea:	e7f6      	b.n	800c3da <grad_get+0x14>
    int32_t d = dsc->bg_grad_color_stop - dsc->bg_main_color_stop;
 800c3ec:	1b1b      	subs	r3, r3, r4
    i -= min;
 800c3ee:	1b52      	subs	r2, r2, r5
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800c3f0:	f248 0581 	movw	r5, #32897	; 0x8081
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800c3f4:	7906      	ldrb	r6, [r0, #4]
    d = (s * d) >> 8;
 800c3f6:	434b      	muls	r3, r1
    lv_opa_t mix = (i * 255) / d;
 800c3f8:	b212      	sxth	r2, r2
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800c3fa:	8881      	ldrh	r1, [r0, #4]
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800c3fc:	f006 061f 	and.w	r6, r6, #31
 800c400:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
    d = (s * d) >> 8;
 800c404:	121b      	asrs	r3, r3, #8
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800c406:	f3c1 1145 	ubfx	r1, r1, #5, #6
    lv_opa_t mix = (i * 255) / d;
 800c40a:	fb92 f3f3 	sdiv	r3, r2, r3
 800c40e:	b2db      	uxtb	r3, r3
 800c410:	88c2      	ldrh	r2, [r0, #6]
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800c412:	f1c3 04ff 	rsb	r4, r3, #255	; 0xff
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800c416:	f3c2 1245 	ubfx	r2, r2, #5, #6
 800c41a:	4361      	muls	r1, r4
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800c41c:	4366      	muls	r6, r4
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800c41e:	fb03 1202 	mla	r2, r3, r2, r1
 800c422:	3280      	adds	r2, #128	; 0x80
 800c424:	436a      	muls	r2, r5
 800c426:	f3c2 51c5 	ubfx	r1, r2, #23, #6
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800c42a:	7982      	ldrb	r2, [r0, #6]
 800c42c:	f002 021f 	and.w	r2, r2, #31
 800c430:	fb03 6202 	mla	r2, r3, r2, r6
 800c434:	3280      	adds	r2, #128	; 0x80
 800c436:	436a      	muls	r2, r5
 800c438:	f3c2 52c4 	ubfx	r2, r2, #23, #5
 800c43c:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800c440:	79c1      	ldrb	r1, [r0, #7]
 800c442:	7940      	ldrb	r0, [r0, #5]
 800c444:	08c9      	lsrs	r1, r1, #3
 800c446:	08c0      	lsrs	r0, r0, #3
 800c448:	4360      	muls	r0, r4
 800c44a:	fb03 0001 	mla	r0, r3, r1, r0
 800c44e:	3080      	adds	r0, #128	; 0x80
 800c450:	4368      	muls	r0, r5
 800c452:	0dc0      	lsrs	r0, r0, #23
 800c454:	ea42 20c0 	orr.w	r0, r2, r0, lsl #11
    return lv_color_mix(dsc->bg_grad_color, dsc->bg_color, mix);
 800c458:	e7bf      	b.n	800c3da <grad_get+0x14>

0800c45a <shadow_blur_corner>:
#endif

}

LV_ATTRIBUTE_FAST_MEM static void shadow_blur_corner(lv_coord_t size, lv_coord_t sw, uint16_t * sh_ups_buf)
{
 800c45a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c45e:	4614      	mov	r4, r2
    int32_t s_left = sw >> 1;
    int32_t s_right = (sw >> 1);
    if((sw & 1) == 0) s_left--;

    /*Horizontal blur*/
    uint16_t * sh_ups_blur_buf = lv_mem_buf_get(size * sizeof(uint16_t));
 800c460:	0042      	lsls	r2, r0, #1
{
 800c462:	b087      	sub	sp, #28
    int32_t s_left = sw >> 1;
 800c464:	ea4f 0861 	mov.w	r8, r1, asr #1
    if((sw & 1) == 0) s_left--;
 800c468:	07cb      	lsls	r3, r1, #31
{
 800c46a:	4605      	mov	r5, r0
    uint16_t * sh_ups_blur_buf = lv_mem_buf_get(size * sizeof(uint16_t));
 800c46c:	4610      	mov	r0, r2
    int32_t s_left = sw >> 1;
 800c46e:	46c2      	mov	sl, r8
{
 800c470:	460e      	mov	r6, r1
    if((sw & 1) == 0) s_left--;
 800c472:	bf58      	it	pl
 800c474:	f108 3aff 	addpl.w	sl, r8, #4294967295
    uint16_t * sh_ups_blur_buf = lv_mem_buf_get(size * sizeof(uint16_t));
 800c478:	9201      	str	r2, [sp, #4]
 800c47a:	f00b fb0d 	bl	8017a98 <lv_mem_buf_get>
    int32_t y;

    uint16_t * sh_ups_tmp_buf = sh_ups_buf;

    for(y = 0; y < size; y++) {
        int32_t v = sh_ups_tmp_buf[size - 1] * sw;
 800c47e:	9a01      	ldr	r2, [sp, #4]
 800c480:	f06f 0701 	mvn.w	r7, #1
    uint16_t * sh_ups_blur_buf = lv_mem_buf_get(size * sizeof(uint16_t));
 800c484:	4601      	mov	r1, r0
    for(y = 0; y < size; y++) {
 800c486:	46a1      	mov	r9, r4
        int32_t v = sh_ups_tmp_buf[size - 1] * sw;
 800c488:	1e93      	subs	r3, r2, #2
 800c48a:	fb0a 7707 	mla	r7, sl, r7, r7
    for(y = 0; y < size; y++) {
 800c48e:	f04f 0b00 	mov.w	fp, #0
        int32_t v = sh_ups_tmp_buf[size - 1] * sw;
 800c492:	9301      	str	r3, [sp, #4]
 800c494:	f10a 0301 	add.w	r3, sl, #1
 800c498:	4427      	add	r7, r4
 800c49a:	9302      	str	r3, [sp, #8]
 800c49c:	eb04 0348 	add.w	r3, r4, r8, lsl #1
    for(y = 0; y < size; y++) {
 800c4a0:	455d      	cmp	r5, fp
 800c4a2:	dc1f      	bgt.n	800c4e4 <shadow_blur_corner+0x8a>
        sh_ups_tmp_buf += size;
    }

    /*Vertical blur*/
    uint32_t i;
    sh_ups_buf[0] = sh_ups_buf[0] / sw;
 800c4a4:	8823      	ldrh	r3, [r4, #0]
    for(i = 1; i < (uint32_t)size * size; i++) {
 800c4a6:	fb05 fe05 	mul.w	lr, r5, r5
 800c4aa:	2701      	movs	r7, #1
    sh_ups_buf[0] = sh_ups_buf[0] / sw;
 800c4ac:	fb93 f3f6 	sdiv	r3, r3, r6
 800c4b0:	8023      	strh	r3, [r4, #0]
    for(i = 1; i < (uint32_t)size * size; i++) {
 800c4b2:	4623      	mov	r3, r4
 800c4b4:	45be      	cmp	lr, r7
 800c4b6:	d842      	bhi.n	800c53e <shadow_blur_corner+0xe4>
            v -= top_val;

            /*Add the bottom pixel*/
            uint32_t bottom_val;
            if(y + s_left + 1 < size) bottom_val = sh_ups_buf[(y + s_left + 1) * size + x];
            else bottom_val = sh_ups_buf[(size - 1) * size + x];
 800c4b8:	1e6f      	subs	r7, r5, #1
    for(x = 0; x < size; x++) {
 800c4ba:	f04f 0c00 	mov.w	ip, #0
 800c4be:	fb02 4307 	mla	r3, r2, r7, r4
 800c4c2:	3c02      	subs	r4, #2
 800c4c4:	9301      	str	r3, [sp, #4]
 800c4c6:	9b02      	ldr	r3, [sp, #8]
 800c4c8:	4353      	muls	r3, r2
 800c4ca:	9303      	str	r3, [sp, #12]
 800c4cc:	f1c8 0300 	rsb	r3, r8, #0
 800c4d0:	4353      	muls	r3, r2
 800c4d2:	9304      	str	r3, [sp, #16]
 800c4d4:	4565      	cmp	r5, ip
 800c4d6:	dc3f      	bgt.n	800c558 <shadow_blur_corner+0xfe>
        for(y = 0; y < size; y++, sh_ups_tmp_buf += size) {
            (*sh_ups_tmp_buf) = sh_ups_blur_buf[y];
        }
    }

    lv_mem_buf_release(sh_ups_blur_buf);
 800c4d8:	4608      	mov	r0, r1
}
 800c4da:	b007      	add	sp, #28
 800c4dc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_mem_buf_release(sh_ups_blur_buf);
 800c4e0:	f00b b936 	b.w	8017750 <lv_mem_buf_release>
        int32_t v = sh_ups_tmp_buf[size - 1] * sw;
 800c4e4:	9801      	ldr	r0, [sp, #4]
 800c4e6:	f839 c000 	ldrh.w	ip, [r9, r0]
        for(x = size - 1; x >= 0; x--) {
 800c4ea:	1e68      	subs	r0, r5, #1
        int32_t v = sh_ups_tmp_buf[size - 1] * sw;
 800c4ec:	fb06 fc0c 	mul.w	ip, r6, ip
            if(x + s_right < size) right_val = sh_ups_tmp_buf[x + s_right];
 800c4f0:	eb00 0e08 	add.w	lr, r0, r8
            sh_ups_blur_buf[x] = v;
 800c4f4:	f821 c010 	strh.w	ip, [r1, r0, lsl #1]
            if(x + s_right < size) right_val = sh_ups_tmp_buf[x + s_right];
 800c4f8:	4575      	cmp	r5, lr
 800c4fa:	bfcc      	ite	gt
 800c4fc:	f833 e010 	ldrhgt.w	lr, [r3, r0, lsl #1]
            uint32_t right_val = 0;
 800c500:	f04f 0e00 	movle.w	lr, #0
            v -= right_val;
 800c504:	ebac 0e0e 	sub.w	lr, ip, lr
            if(x - s_left - 1 < 0) left_val = sh_ups_tmp_buf[0];
 800c508:	eba0 0c0a 	sub.w	ip, r0, sl
 800c50c:	f1bc 0f00 	cmp.w	ip, #0
 800c510:	bfd4      	ite	le
 800c512:	f8b9 c000 	ldrhle.w	ip, [r9]
            else left_val = sh_ups_tmp_buf[x - s_left - 1];
 800c516:	f837 c010 	ldrhgt.w	ip, [r7, r0, lsl #1]
        for(x = size - 1; x >= 0; x--) {
 800c51a:	3801      	subs	r0, #1
            v += left_val;
 800c51c:	44f4      	add	ip, lr
        for(x = size - 1; x >= 0; x--) {
 800c51e:	d2e7      	bcs.n	800c4f0 <shadow_blur_corner+0x96>
        lv_memcpy(sh_ups_tmp_buf, sh_ups_blur_buf, size * sizeof(uint16_t));
 800c520:	4648      	mov	r0, r9
 800c522:	9103      	str	r1, [sp, #12]
    for(y = 0; y < size; y++) {
 800c524:	f10b 0b01 	add.w	fp, fp, #1
        lv_memcpy(sh_ups_tmp_buf, sh_ups_blur_buf, size * sizeof(uint16_t));
 800c528:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c52c:	f00b f93c 	bl	80177a8 <lv_memcpy>
        sh_ups_tmp_buf += size;
 800c530:	9a04      	ldr	r2, [sp, #16]
 800c532:	9b05      	ldr	r3, [sp, #20]
 800c534:	4491      	add	r9, r2
    for(y = 0; y < size; y++) {
 800c536:	4417      	add	r7, r2
 800c538:	4413      	add	r3, r2
 800c53a:	9903      	ldr	r1, [sp, #12]
 800c53c:	e7b0      	b.n	800c4a0 <shadow_blur_corner+0x46>
        if(sh_ups_buf[i] == sh_ups_buf[i - 1]) sh_ups_buf[i] = sh_ups_buf[i - 1];
 800c53e:	8858      	ldrh	r0, [r3, #2]
    for(i = 1; i < (uint32_t)size * size; i++) {
 800c540:	3701      	adds	r7, #1
        if(sh_ups_buf[i] == sh_ups_buf[i - 1]) sh_ups_buf[i] = sh_ups_buf[i - 1];
 800c542:	f833 cb02 	ldrh.w	ip, [r3], #2
 800c546:	4560      	cmp	r0, ip
        else  sh_ups_buf[i] = sh_ups_buf[i] / sw;
 800c548:	bf1c      	itt	ne
 800c54a:	fb90 f0f6 	sdivne	r0, r0, r6
 800c54e:	fa1f fc80 	uxthne.w	ip, r0
 800c552:	f8a3 c000 	strh.w	ip, [r3]
    for(i = 1; i < (uint32_t)size * size; i++) {
 800c556:	e7ad      	b.n	800c4b4 <shadow_blur_corner+0x5a>
        sh_ups_tmp_buf = &sh_ups_buf[x];
 800c558:	3402      	adds	r4, #2
 800c55a:	9803      	ldr	r0, [sp, #12]
        int32_t v = sh_ups_tmp_buf[0] * sw;
 800c55c:	8823      	ldrh	r3, [r4, #0]
 800c55e:	1820      	adds	r0, r4, r0
 800c560:	46a6      	mov	lr, r4
 800c562:	4373      	muls	r3, r6
 800c564:	46a2      	mov	sl, r4
 800c566:	4607      	mov	r7, r0
 800c568:	9804      	ldr	r0, [sp, #16]
 800c56a:	eb04 0900 	add.w	r9, r4, r0
        for(y = 0; y < size ; y++, sh_ups_tmp_buf += size) {
 800c56e:	2000      	movs	r0, #0
            sh_ups_blur_buf[y] = v < 0 ? 0 : (v >> SHADOW_UPSCALE_SHIFT);
 800c570:	2b00      	cmp	r3, #0
 800c572:	bfac      	ite	ge
 800c574:	f3c3 1b8f 	ubfxge	fp, r3, #6, #16
 800c578:	f04f 0b00 	movlt.w	fp, #0
 800c57c:	f821 b010 	strh.w	fp, [r1, r0, lsl #1]
            if(y - s_right <= 0) top_val = sh_ups_tmp_buf[0];
 800c580:	eba0 0b08 	sub.w	fp, r0, r8
 800c584:	f1bb 0f00 	cmp.w	fp, #0
 800c588:	bfd8      	it	le
 800c58a:	f8ba b000 	ldrhle.w	fp, [sl]
        for(y = 0; y < size ; y++, sh_ups_tmp_buf += size) {
 800c58e:	4492      	add	sl, r2
            else top_val = sh_ups_buf[(y - s_right) * size + x];
 800c590:	bfc8      	it	gt
 800c592:	f8b9 b000 	ldrhgt.w	fp, [r9]
            v -= top_val;
 800c596:	4491      	add	r9, r2
 800c598:	eba3 0b0b 	sub.w	fp, r3, fp
            if(y + s_left + 1 < size) bottom_val = sh_ups_buf[(y + s_left + 1) * size + x];
 800c59c:	9b02      	ldr	r3, [sp, #8]
 800c59e:	18c3      	adds	r3, r0, r3
        for(y = 0; y < size ; y++, sh_ups_tmp_buf += size) {
 800c5a0:	3001      	adds	r0, #1
            if(y + s_left + 1 < size) bottom_val = sh_ups_buf[(y + s_left + 1) * size + x];
 800c5a2:	429d      	cmp	r5, r3
 800c5a4:	bfcc      	ite	gt
 800c5a6:	463b      	movgt	r3, r7
            else bottom_val = sh_ups_buf[(size - 1) * size + x];
 800c5a8:	9b01      	ldrle	r3, [sp, #4]
        for(y = 0; y < size ; y++, sh_ups_tmp_buf += size) {
 800c5aa:	4285      	cmp	r5, r0
 800c5ac:	4417      	add	r7, r2
            else bottom_val = sh_ups_buf[(size - 1) * size + x];
 800c5ae:	881b      	ldrh	r3, [r3, #0]
            v += bottom_val;
 800c5b0:	445b      	add	r3, fp
        for(y = 0; y < size ; y++, sh_ups_tmp_buf += size) {
 800c5b2:	dcdd      	bgt.n	800c570 <shadow_blur_corner+0x116>
        for(y = 0; y < size; y++, sh_ups_tmp_buf += size) {
 800c5b4:	2300      	movs	r3, #0
            (*sh_ups_tmp_buf) = sh_ups_blur_buf[y];
 800c5b6:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
        for(y = 0; y < size; y++, sh_ups_tmp_buf += size) {
 800c5ba:	3301      	adds	r3, #1
 800c5bc:	429d      	cmp	r5, r3
            (*sh_ups_tmp_buf) = sh_ups_blur_buf[y];
 800c5be:	f8ae 0000 	strh.w	r0, [lr]
        for(y = 0; y < size; y++, sh_ups_tmp_buf += size) {
 800c5c2:	4496      	add	lr, r2
 800c5c4:	dcf7      	bgt.n	800c5b6 <shadow_blur_corner+0x15c>
    for(x = 0; x < size; x++) {
 800c5c6:	9b01      	ldr	r3, [sp, #4]
 800c5c8:	f10c 0c01 	add.w	ip, ip, #1
 800c5cc:	3302      	adds	r3, #2
 800c5ce:	9301      	str	r3, [sp, #4]
 800c5d0:	e780      	b.n	800c4d4 <shadow_blur_corner+0x7a>

0800c5d2 <draw_full_border>:
}

#if LV_DRAW_COMPLEX
static void draw_full_border(const lv_area_t * area_inner, const lv_area_t * area_outer, const lv_area_t * clip,
                             lv_coord_t radius, bool radius_is_in, lv_color_t color, lv_opa_t opa, lv_blend_mode_t blend_mode)
{
 800c5d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5d6:	ed2d 8b02 	vpush	{d8}
 800c5da:	b0a3      	sub	sp, #140	; 0x8c
 800c5dc:	461d      	mov	r5, r3
 800c5de:	4680      	mov	r8, r0
 800c5e0:	460c      	mov	r4, r1
 800c5e2:	f89d 30c0 	ldrb.w	r3, [sp, #192]	; 0xc0
 800c5e6:	4617      	mov	r7, r2
 800c5e8:	f89d 60b8 	ldrb.w	r6, [sp, #184]	; 0xb8
 800c5ec:	9305      	str	r3, [sp, #20]
 800c5ee:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 800c5f2:	f8bd 90bc 	ldrh.w	r9, [sp, #188]	; 0xbc
 800c5f6:	9306      	str	r3, [sp, #24]

    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
 800c5f8:	f7ff fda2 	bl	800c140 <lv_draw_mask_get_cnt>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800c5fc:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 800c600:	900a      	str	r0, [sp, #40]	; 0x28
 800c602:	930b      	str	r3, [sp, #44]	; 0x2c
    bool simple_mode = true;
    if(other_mask_cnt) simple_mode = false;

    int32_t inner_w = lv_area_get_width(area_inner);
    int32_t inner_h = lv_area_get_height(area_inner);
    lv_coord_t border_width = area_outer->x2 - area_inner->x2;
 800c604:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c606:	88a3      	ldrh	r3, [r4, #4]
 800c608:	f9b8 a000 	ldrsh.w	sl, [r8]
 800c60c:	9309      	str	r3, [sp, #36]	; 0x24
 800c60e:	1a9b      	subs	r3, r3, r2
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800c610:	f9b8 1006 	ldrsh.w	r1, [r8, #6]
 800c614:	b29a      	uxth	r2, r3
 800c616:	f9b8 e002 	ldrsh.w	lr, [r8, #2]
 800c61a:	b21b      	sxth	r3, r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800c61c:	f9b4 c000 	ldrsh.w	ip, [r4]
 800c620:	920d      	str	r2, [sp, #52]	; 0x34
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800c622:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 800c626:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
    int32_t coords_out_w = lv_area_get_width(area_outer);
    int32_t coords_out_h = lv_area_get_height(area_outer);

    int32_t rin;
    int32_t rout;
    if(radius_is_in) {
 800c62a:	9307      	str	r3, [sp, #28]
 800c62c:	2e00      	cmp	r6, #0
 800c62e:	f000 80eb 	beq.w	800c808 <draw_full_border+0x236>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800c632:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800c634:	3101      	adds	r1, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800c636:	3301      	adds	r3, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800c638:	eba1 0e0e 	sub.w	lr, r1, lr
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800c63c:	eba3 0a0a 	sub.w	sl, r3, sl
    int32_t inner_h = lv_area_get_height(area_inner);
 800c640:	fa0f fe8e 	sxth.w	lr, lr
    int32_t inner_w = lv_area_get_width(area_inner);
 800c644:	fa0f fa8a 	sxth.w	sl, sl
        rin = radius;
        int32_t short_side = LV_MIN(inner_w, inner_h);
 800c648:	45f2      	cmp	sl, lr
 800c64a:	bfa8      	it	ge
 800c64c:	46f2      	movge	sl, lr
        if(rin > short_side >> 1) rin = short_side >> 1;
 800c64e:	ea4f 036a 	mov.w	r3, sl, asr #1
 800c652:	429d      	cmp	r5, r3
 800c654:	bfa8      	it	ge
 800c656:	461d      	movge	r5, r3

        /*Get the outer area*/
        rout = rin + border_width;
 800c658:	9b07      	ldr	r3, [sp, #28]
 800c65a:	18eb      	adds	r3, r5, r3
 800c65c:	9304      	str	r3, [sp, #16]
        rin = rout - border_width;
        if(rin < 0) rin = 0;

    }

    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 800c65e:	f7fb fe8b 	bl	8008378 <_lv_refr_get_disp_refreshing>
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp);
 800c662:	f00a f965 	bl	8016930 <lv_disp_get_draw_buf>

    /*Get clipped fill area which is the real draw area.
     *It is always the same or inside `fill_area`*/
    lv_area_t draw_area;
    bool is_common;
    is_common = _lv_area_intersect(&draw_area, area_outer, clip);
 800c666:	463a      	mov	r2, r7
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp);
 800c668:	4683      	mov	fp, r0
    is_common = _lv_area_intersect(&draw_area, area_outer, clip);
 800c66a:	4621      	mov	r1, r4
 800c66c:	a80e      	add	r0, sp, #56	; 0x38
 800c66e:	f00a fc12 	bl	8016e96 <_lv_area_intersect>
    if(is_common == false) return;
 800c672:	2800      	cmp	r0, #0
 800c674:	f000 80c3 	beq.w	800c7fe <draw_full_border+0x22c>

    const lv_area_t * disp_area = &draw_buf->area;

    /*Now `draw_area` has absolute coordinates.
     *Make it relative to `disp_area` to simplify draw to `disp_buf`*/
    draw_area.x1 -= disp_area->x1;
 800c678:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 800c67c:	f8bb 2010 	ldrh.w	r2, [fp, #16]
    draw_area.y1 -= disp_area->y1;
 800c680:	f8bb 0012 	ldrh.w	r0, [fp, #18]
    draw_area.x1 -= disp_area->x1;
 800c684:	1a8b      	subs	r3, r1, r2
 800c686:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
    draw_area.y1 -= disp_area->y1;
 800c68a:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 800c68e:	1a1b      	subs	r3, r3, r0
 800c690:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
    draw_area.x2 -= disp_area->x1;
 800c694:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 800c698:	1a9a      	subs	r2, r3, r2
 800c69a:	1c5e      	adds	r6, r3, #1

    int32_t draw_area_w = lv_area_get_width(&draw_area);

    /*Create inner the mask*/
    lv_draw_mask_radius_param_t mask_rin_param;
    lv_draw_mask_radius_init(&mask_rin_param, area_inner, rin, true);
 800c69c:	2301      	movs	r3, #1
    draw_area.x2 -= disp_area->x1;
 800c69e:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 800c6a2:	1a76      	subs	r6, r6, r1
    draw_area.y2 -= disp_area->y1;
 800c6a4:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
    lv_draw_mask_radius_init(&mask_rin_param, area_inner, rin, true);
 800c6a8:	4641      	mov	r1, r8
 800c6aa:	b236      	sxth	r6, r6
    draw_area.y2 -= disp_area->y1;
 800c6ac:	1a12      	subs	r2, r2, r0
    lv_draw_mask_radius_init(&mask_rin_param, area_inner, rin, true);
 800c6ae:	a814      	add	r0, sp, #80	; 0x50
    draw_area.y2 -= disp_area->y1;
 800c6b0:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
    lv_draw_mask_radius_init(&mask_rin_param, area_inner, rin, true);
 800c6b4:	b22a      	sxth	r2, r5
 800c6b6:	f7ff fe49 	bl	800c34c <lv_draw_mask_radius_init>
    int16_t mask_rin_id = lv_draw_mask_add(&mask_rin_param, NULL);
 800c6ba:	2100      	movs	r1, #0
 800c6bc:	a814      	add	r0, sp, #80	; 0x50
 800c6be:	f7ff fcdf 	bl	800c080 <lv_draw_mask_add>

    lv_draw_mask_radius_param_t mask_rout_param;
    lv_draw_mask_radius_init(&mask_rout_param, area_outer, rout, false);
 800c6c2:	2300      	movs	r3, #0
 800c6c4:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 800c6c8:	4621      	mov	r1, r4
    int16_t mask_rin_id = lv_draw_mask_add(&mask_rin_param, NULL);
 800c6ca:	ee08 0a10 	vmov	s16, r0
    lv_draw_mask_radius_init(&mask_rout_param, area_outer, rout, false);
 800c6ce:	a81b      	add	r0, sp, #108	; 0x6c
 800c6d0:	f7ff fe3c 	bl	800c34c <lv_draw_mask_radius_init>
    int16_t mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
 800c6d4:	2100      	movs	r1, #0
 800c6d6:	a81b      	add	r0, sp, #108	; 0x6c
 800c6d8:	f7ff fcd2 	bl	800c080 <lv_draw_mask_add>
 800c6dc:	ee08 0a90 	vmov	s17, r0

    lv_opa_t * mask_buf = lv_mem_buf_get(draw_area_w);
 800c6e0:	4630      	mov	r0, r6
 800c6e2:	f00b f9d9 	bl	8017a98 <lv_mem_buf_get>

    int32_t corner_size = LV_MAX(rout, border_width - 1);
 800c6e6:	9b04      	ldr	r3, [sp, #16]
 800c6e8:	9a07      	ldr	r2, [sp, #28]
    lv_opa_t * mask_buf = lv_mem_buf_get(draw_area_w);
 800c6ea:	4605      	mov	r5, r0
    int32_t corner_size = LV_MAX(rout, border_width - 1);
 800c6ec:	f9bb c012 	ldrsh.w	ip, [fp, #18]
 800c6f0:	4293      	cmp	r3, r2
 800c6f2:	f9bd 803a 	ldrsh.w	r8, [sp, #58]	; 0x3a
 800c6f6:	f9b4 0000 	ldrsh.w	r0, [r4]
 800c6fa:	bfb4      	ite	lt
 800c6fc:	4613      	movlt	r3, r2
 800c6fe:	9b04      	ldrge	r3, [sp, #16]
    int32_t h;
    lv_draw_mask_res_t mask_res;
    lv_area_t fill_area;

    /*Apply some optimization if there is no other mask*/
    if(simple_mode) {
 800c700:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    int32_t corner_size = LV_MAX(rout, border_width - 1);
 800c702:	bfb8      	it	lt
 800c704:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800c708:	f9b4 e004 	ldrsh.w	lr, [r4, #4]
 800c70c:	9308      	str	r3, [sp, #32]
    if(simple_mode) {
 800c70e:	eb0c 0308 	add.w	r3, ip, r8
 800c712:	b21b      	sxth	r3, r3
 800c714:	2a00      	cmp	r2, #0
 800c716:	f040 8180 	bne.w	800ca1a <draw_full_border+0x448>
        /*Draw the upper corner area*/
        int32_t upper_corner_end = area_outer->y1 - disp_area->y1 + corner_size;
 800c71a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 800c71e:	9908      	ldr	r1, [sp, #32]
 800c720:	eba2 020c 	sub.w	r2, r2, ip
            lv_area_t fill_area2;
            fill_area2.y1 = fill_area.y1;
            fill_area2.y2 = fill_area.y2;

            fill_area2.x1 = area_outer->x1;
            fill_area2.x2 = area_outer->x1 + rout - 1;
 800c724:	f8bd a010 	ldrh.w	sl, [sp, #16]
        fill_area.x1 = area_outer->x1;
 800c728:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
        int32_t upper_corner_end = area_outer->y1 - disp_area->y1 + corner_size;
 800c72c:	440a      	add	r2, r1
        fill_area.x2 = area_outer->x2;
 800c72e:	f8ad e044 	strh.w	lr, [sp, #68]	; 0x44
        fill_area.y1 = disp_area->y1 + draw_area.y1;
 800c732:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
        int32_t upper_corner_end = area_outer->y1 - disp_area->y1 + corner_size;
 800c736:	920a      	str	r2, [sp, #40]	; 0x28
        fill_area.y2 = fill_area.y1;
 800c738:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
        for(h = draw_area.y1; h <= upper_corner_end; h++) {
 800c73c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c73e:	4598      	cmp	r8, r3
 800c740:	dd79      	ble.n	800c836 <draw_full_border+0x264>
            fill_area.y1++;
            fill_area.y2++;
        }

        /*Draw the lower corner area*/
        int32_t lower_corner_end = area_outer->y2 - disp_area->y1 - corner_size;
 800c742:	f9bb 3012 	ldrsh.w	r3, [fp, #18]
 800c746:	f9b4 8006 	ldrsh.w	r8, [r4, #6]
 800c74a:	9a08      	ldr	r2, [sp, #32]
 800c74c:	eba8 0803 	sub.w	r8, r8, r3
            lv_memset_ff(mask_buf, draw_area_w);
            mask_res = lv_draw_mask_apply(mask_buf, draw_buf->area.x1 + draw_area.x1, draw_buf->area.y1 + h, draw_area_w);

            lv_area_t fill_area2;
            fill_area2.x1 = area_outer->x1;
            fill_area2.x2 = area_outer->x1 + rout - 1;
 800c750:	f8bd a010 	ldrh.w	sl, [sp, #16]
        int32_t lower_corner_end = area_outer->y2 - disp_area->y1 - corner_size;
 800c754:	eba8 0802 	sub.w	r8, r8, r2
        if(lower_corner_end <= upper_corner_end) lower_corner_end = upper_corner_end + 1;
 800c758:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c75a:	4542      	cmp	r2, r8
 800c75c:	bfa8      	it	ge
 800c75e:	f102 0801 	addge.w	r8, r2, #1
        fill_area.y1 = disp_area->y1 + lower_corner_end;
 800c762:	4443      	add	r3, r8
 800c764:	b21b      	sxth	r3, r3
 800c766:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
        fill_area.y2 = fill_area.y1;
 800c76a:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
        for(h = lower_corner_end; h <= draw_area.y2; h++) {
 800c76e:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 800c772:	4543      	cmp	r3, r8
 800c774:	f280 80d8 	bge.w	800c928 <draw_full_border+0x356>
            fill_area.y1++;
            fill_area.y2++;
        }

        /*Draw the left vertical part*/
        fill_area.y1 = area_outer->y1 + corner_size + 1;
 800c778:	8863      	ldrh	r3, [r4, #2]
        fill_area.y2 = area_outer->y2 - corner_size - 1;

        fill_area.x1 = area_outer->x1;
        fill_area.x2 = area_outer->x1 + border_width - 1;
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 800c77a:	2601      	movs	r6, #1
        fill_area.y1 = area_outer->y1 + corner_size + 1;
 800c77c:	9a08      	ldr	r2, [sp, #32]
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 800c77e:	a910      	add	r1, sp, #64	; 0x40
        fill_area.y1 = area_outer->y1 + corner_size + 1;
 800c780:	3301      	adds	r3, #1
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 800c782:	4638      	mov	r0, r7
 800c784:	9600      	str	r6, [sp, #0]
        fill_area.y1 = area_outer->y1 + corner_size + 1;
 800c786:	fa13 f382 	uxtah	r3, r3, r2
 800c78a:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
        fill_area.y2 = area_outer->y2 - corner_size - 1;
 800c78e:	88e3      	ldrh	r3, [r4, #6]
 800c790:	3b01      	subs	r3, #1
 800c792:	1a9b      	subs	r3, r3, r2
        fill_area.x2 = area_outer->x1 + border_width - 1;
 800c794:	9a0d      	ldr	r2, [sp, #52]	; 0x34
        fill_area.y2 = area_outer->y2 - corner_size - 1;
 800c796:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
        fill_area.x1 = area_outer->x1;
 800c79a:	f9b4 3000 	ldrsh.w	r3, [r4]
 800c79e:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        fill_area.x2 = area_outer->x1 + border_width - 1;
 800c7a2:	3b01      	subs	r3, #1
 800c7a4:	441a      	add	r2, r3
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 800c7a6:	9b06      	ldr	r3, [sp, #24]
 800c7a8:	9302      	str	r3, [sp, #8]
 800c7aa:	9b05      	ldr	r3, [sp, #20]
        fill_area.x2 = area_outer->x1 + border_width - 1;
 800c7ac:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 800c7b0:	464a      	mov	r2, r9
 800c7b2:	9301      	str	r3, [sp, #4]
 800c7b4:	2300      	movs	r3, #0
 800c7b6:	f7fc fd33 	bl	8009220 <_lv_blend_fill>

        /*Draw the right vertical border*/
        fill_area.x1 = area_outer->x2 - border_width + 1;
 800c7ba:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 800c7be:	990b      	ldr	r1, [sp, #44]	; 0x2c
        fill_area.x2 = area_outer->x2;

        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 800c7c0:	4638      	mov	r0, r7
        fill_area.x1 = area_outer->x2 - border_width + 1;
 800c7c2:	1993      	adds	r3, r2, r6
        fill_area.x2 = area_outer->x2;
 800c7c4:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 800c7c8:	464a      	mov	r2, r9
        fill_area.x1 = area_outer->x2 - border_width + 1;
 800c7ca:	4419      	add	r1, r3
 800c7cc:	460b      	mov	r3, r1
 800c7ce:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c7d0:	1a5b      	subs	r3, r3, r1
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 800c7d2:	a910      	add	r1, sp, #64	; 0x40
        fill_area.x1 = area_outer->x2 - border_width + 1;
 800c7d4:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 800c7d8:	9b06      	ldr	r3, [sp, #24]
 800c7da:	9302      	str	r3, [sp, #8]
 800c7dc:	9b05      	ldr	r3, [sp, #20]
 800c7de:	e9cd 6300 	strd	r6, r3, [sp]
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	f7fc fd1c 	bl	8009220 <_lv_blend_fill>
            fill_area.y1++;
            fill_area.y2++;

        }
    }
    lv_draw_mask_remove_id(mask_rin_id);
 800c7e8:	ee18 0a10 	vmov	r0, s16
 800c7ec:	f7ff fc80 	bl	800c0f0 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_rout_id);
 800c7f0:	ee18 0a90 	vmov	r0, s17
 800c7f4:	f7ff fc7c 	bl	800c0f0 <lv_draw_mask_remove_id>
    lv_mem_buf_release(mask_buf);
 800c7f8:	4628      	mov	r0, r5
 800c7fa:	f00a ffa9 	bl	8017750 <lv_mem_buf_release>
}
 800c7fe:	b023      	add	sp, #140	; 0x8c
 800c800:	ecbd 8b02 	vpop	{d8}
 800c804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c808:	9b09      	ldr	r3, [sp, #36]	; 0x24
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800c80a:	3201      	adds	r2, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800c80c:	3301      	adds	r3, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800c80e:	1a10      	subs	r0, r2, r0
        rin = rout - border_width;
 800c810:	9a07      	ldr	r2, [sp, #28]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800c812:	eba3 0c0c 	sub.w	ip, r3, ip
    int32_t coords_out_h = lv_area_get_height(area_outer);
 800c816:	b200      	sxth	r0, r0
    int32_t coords_out_w = lv_area_get_width(area_outer);
 800c818:	fa0f fc8c 	sxth.w	ip, ip
        int32_t short_side = LV_MIN(coords_out_w, coords_out_h);
 800c81c:	4584      	cmp	ip, r0
 800c81e:	bfa8      	it	ge
 800c820:	4684      	movge	ip, r0
        if(rout > short_side >> 1) rout = short_side >> 1;
 800c822:	ea4f 036c 	mov.w	r3, ip, asr #1
 800c826:	42ab      	cmp	r3, r5
 800c828:	bfa8      	it	ge
 800c82a:	462b      	movge	r3, r5
        rin = rout - border_width;
 800c82c:	1a9d      	subs	r5, r3, r2
 800c82e:	9304      	str	r3, [sp, #16]
        if(rin < 0) rin = 0;
 800c830:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 800c834:	e713      	b.n	800c65e <draw_full_border+0x8c>
            lv_memset_ff(mask_buf, draw_area_w);
 800c836:	4631      	mov	r1, r6
 800c838:	4628      	mov	r0, r5
 800c83a:	f00b f9aa 	bl	8017b92 <lv_memset_ff>
            mask_res = lv_draw_mask_apply(mask_buf, draw_buf->area.x1 + draw_area.x1, draw_buf->area.y1 + h, draw_area_w);
 800c83e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 800c842:	f8bb 2012 	ldrh.w	r2, [fp, #18]
 800c846:	4628      	mov	r0, r5
 800c848:	f8bb 1010 	ldrh.w	r1, [fp, #16]
 800c84c:	4442      	add	r2, r8
 800c84e:	4419      	add	r1, r3
 800c850:	4633      	mov	r3, r6
 800c852:	b212      	sxth	r2, r2
 800c854:	b209      	sxth	r1, r1
 800c856:	f7ff fc29 	bl	800c0ac <lv_draw_mask_apply>
            fill_area2.y1 = fill_area.y1;
 800c85a:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
 800c85e:	464a      	mov	r2, r9
 800c860:	a912      	add	r1, sp, #72	; 0x48
            fill_area2.y1 = fill_area.y1;
 800c862:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
            fill_area2.y2 = fill_area.y2;
 800c866:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
            mask_res = lv_draw_mask_apply(mask_buf, draw_buf->area.x1 + draw_area.x1, draw_buf->area.y1 + h, draw_area_w);
 800c86a:	900c      	str	r0, [sp, #48]	; 0x30
            fill_area2.y2 = fill_area.y2;
 800c86c:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
            fill_area2.x1 = area_outer->x1;
 800c870:	f9b4 3000 	ldrsh.w	r3, [r4]
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
 800c874:	9000      	str	r0, [sp, #0]
 800c876:	4638      	mov	r0, r7
            fill_area2.x1 = area_outer->x1;
 800c878:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
            fill_area2.x2 = area_outer->x1 + rout - 1;
 800c87c:	3b01      	subs	r3, #1
 800c87e:	4453      	add	r3, sl
 800c880:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
 800c884:	9b06      	ldr	r3, [sp, #24]
 800c886:	9302      	str	r3, [sp, #8]
 800c888:	9b05      	ldr	r3, [sp, #20]
 800c88a:	9301      	str	r3, [sp, #4]
 800c88c:	462b      	mov	r3, r5
 800c88e:	f7fc fcc7 	bl	8009220 <_lv_blend_fill>
            if(fill_area2.y2 < area_outer->y1 + border_width) {
 800c892:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 800c896:	9907      	ldr	r1, [sp, #28]
 800c898:	f9bd 204e 	ldrsh.w	r2, [sp, #78]	; 0x4e
 800c89c:	440b      	add	r3, r1
 800c89e:	429a      	cmp	r2, r3
 800c8a0:	da14      	bge.n	800c8cc <draw_full_border+0x2fa>
                fill_area2.x1 = area_outer->x1 + rout;
 800c8a2:	8823      	ldrh	r3, [r4, #0]
                _lv_blend_fill(clip, &fill_area2, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 800c8a4:	464a      	mov	r2, r9
 800c8a6:	a912      	add	r1, sp, #72	; 0x48
 800c8a8:	4638      	mov	r0, r7
                fill_area2.x1 = area_outer->x1 + rout;
 800c8aa:	4453      	add	r3, sl
 800c8ac:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
                fill_area2.x2 = area_outer->x2 - rout;
 800c8b0:	88a3      	ldrh	r3, [r4, #4]
 800c8b2:	eba3 030a 	sub.w	r3, r3, sl
 800c8b6:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
                _lv_blend_fill(clip, &fill_area2, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 800c8ba:	9b06      	ldr	r3, [sp, #24]
 800c8bc:	9302      	str	r3, [sp, #8]
 800c8be:	9b05      	ldr	r3, [sp, #20]
 800c8c0:	9301      	str	r3, [sp, #4]
 800c8c2:	2301      	movs	r3, #1
 800c8c4:	9300      	str	r3, [sp, #0]
 800c8c6:	2300      	movs	r3, #0
 800c8c8:	f7fc fcaa 	bl	8009220 <_lv_blend_fill>
            fill_area2.x1 = area_outer->x2 - rout + 1;
 800c8cc:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
            _lv_blend_fill(clip, &fill_area2, color, mask_buf + mask_ofs, mask_res, opa, blend_mode);
 800c8d0:	4638      	mov	r0, r7
            int32_t mask_ofs = (area_outer->x2 - rout + 1) - (draw_buf->area.x1 + draw_area.x1);
 800c8d2:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
        for(h = draw_area.y1; h <= upper_corner_end; h++) {
 800c8d6:	f108 0801 	add.w	r8, r8, #1
            fill_area2.x1 = area_outer->x2 - rout + 1;
 800c8da:	1c5a      	adds	r2, r3, #1
            fill_area2.x2 = area_outer->x2;
 800c8dc:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
            fill_area2.x1 = area_outer->x2 - rout + 1;
 800c8e0:	eba2 020a 	sub.w	r2, r2, sl
 800c8e4:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
            int32_t mask_ofs = (area_outer->x2 - rout + 1) - (draw_buf->area.x1 + draw_area.x1);
 800c8e8:	9a04      	ldr	r2, [sp, #16]
 800c8ea:	1a9b      	subs	r3, r3, r2
 800c8ec:	f9bb 2010 	ldrsh.w	r2, [fp, #16]
 800c8f0:	3301      	adds	r3, #1
 800c8f2:	440a      	add	r2, r1
            _lv_blend_fill(clip, &fill_area2, color, mask_buf + mask_ofs, mask_res, opa, blend_mode);
 800c8f4:	a912      	add	r1, sp, #72	; 0x48
            int32_t mask_ofs = (area_outer->x2 - rout + 1) - (draw_buf->area.x1 + draw_area.x1);
 800c8f6:	1a9b      	subs	r3, r3, r2
            _lv_blend_fill(clip, &fill_area2, color, mask_buf + mask_ofs, mask_res, opa, blend_mode);
 800c8f8:	9a06      	ldr	r2, [sp, #24]
 800c8fa:	9202      	str	r2, [sp, #8]
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	bfac      	ite	ge
 800c900:	18eb      	addge	r3, r5, r3
 800c902:	1c2b      	addlt	r3, r5, #0
 800c904:	9a05      	ldr	r2, [sp, #20]
 800c906:	9201      	str	r2, [sp, #4]
 800c908:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c90a:	9200      	str	r2, [sp, #0]
 800c90c:	464a      	mov	r2, r9
 800c90e:	f7fc fc87 	bl	8009220 <_lv_blend_fill>
            fill_area.y1++;
 800c912:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 800c916:	3301      	adds	r3, #1
 800c918:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
            fill_area.y2++;
 800c91c:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
 800c920:	3301      	adds	r3, #1
 800c922:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
        for(h = draw_area.y1; h <= upper_corner_end; h++) {
 800c926:	e709      	b.n	800c73c <draw_full_border+0x16a>
            lv_memset_ff(mask_buf, draw_area_w);
 800c928:	4631      	mov	r1, r6
 800c92a:	4628      	mov	r0, r5
 800c92c:	f00b f931 	bl	8017b92 <lv_memset_ff>
            mask_res = lv_draw_mask_apply(mask_buf, draw_buf->area.x1 + draw_area.x1, draw_buf->area.y1 + h, draw_area_w);
 800c930:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 800c934:	f8bb 2012 	ldrh.w	r2, [fp, #18]
 800c938:	4628      	mov	r0, r5
 800c93a:	f8bb 1010 	ldrh.w	r1, [fp, #16]
 800c93e:	4442      	add	r2, r8
 800c940:	4419      	add	r1, r3
 800c942:	4633      	mov	r3, r6
 800c944:	b212      	sxth	r2, r2
 800c946:	b209      	sxth	r1, r1
 800c948:	f7ff fbb0 	bl	800c0ac <lv_draw_mask_apply>
            fill_area2.x1 = area_outer->x1;
 800c94c:	f9b4 3000 	ldrsh.w	r3, [r4]
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
 800c950:	464a      	mov	r2, r9
 800c952:	a912      	add	r1, sp, #72	; 0x48
            fill_area2.x1 = area_outer->x1;
 800c954:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
            fill_area2.x2 = area_outer->x1 + rout - 1;
 800c958:	3b01      	subs	r3, #1
            mask_res = lv_draw_mask_apply(mask_buf, draw_buf->area.x1 + draw_area.x1, draw_buf->area.y1 + h, draw_area_w);
 800c95a:	900a      	str	r0, [sp, #40]	; 0x28
            fill_area2.x2 = area_outer->x1 + rout - 1;
 800c95c:	4453      	add	r3, sl
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
 800c95e:	9000      	str	r0, [sp, #0]
 800c960:	4638      	mov	r0, r7
            fill_area2.x2 = area_outer->x1 + rout - 1;
 800c962:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
            fill_area2.y1 = fill_area.y1;
 800c966:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 800c96a:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
            fill_area2.y2 = fill_area.y2;
 800c96e:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
 800c972:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
 800c976:	9b06      	ldr	r3, [sp, #24]
 800c978:	9302      	str	r3, [sp, #8]
 800c97a:	9b05      	ldr	r3, [sp, #20]
 800c97c:	9301      	str	r3, [sp, #4]
 800c97e:	462b      	mov	r3, r5
 800c980:	f7fc fc4e 	bl	8009220 <_lv_blend_fill>
            if(fill_area2.y2 > area_outer->y2 - border_width) {
 800c984:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800c988:	9907      	ldr	r1, [sp, #28]
 800c98a:	f9bd 204e 	ldrsh.w	r2, [sp, #78]	; 0x4e
 800c98e:	1a5b      	subs	r3, r3, r1
 800c990:	429a      	cmp	r2, r3
 800c992:	dd14      	ble.n	800c9be <draw_full_border+0x3ec>
                fill_area2.x1 = area_outer->x1 + rout;
 800c994:	8823      	ldrh	r3, [r4, #0]
                _lv_blend_fill(clip, &fill_area2, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 800c996:	464a      	mov	r2, r9
 800c998:	a912      	add	r1, sp, #72	; 0x48
 800c99a:	4638      	mov	r0, r7
                fill_area2.x1 = area_outer->x1 + rout;
 800c99c:	4453      	add	r3, sl
 800c99e:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
                fill_area2.x2 = area_outer->x2 - rout;
 800c9a2:	88a3      	ldrh	r3, [r4, #4]
 800c9a4:	eba3 030a 	sub.w	r3, r3, sl
 800c9a8:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
                _lv_blend_fill(clip, &fill_area2, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 800c9ac:	9b06      	ldr	r3, [sp, #24]
 800c9ae:	9302      	str	r3, [sp, #8]
 800c9b0:	9b05      	ldr	r3, [sp, #20]
 800c9b2:	9301      	str	r3, [sp, #4]
 800c9b4:	2301      	movs	r3, #1
 800c9b6:	9300      	str	r3, [sp, #0]
 800c9b8:	2300      	movs	r3, #0
 800c9ba:	f7fc fc31 	bl	8009220 <_lv_blend_fill>
            fill_area2.x1 = area_outer->x2 - rout + 1;
 800c9be:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
            _lv_blend_fill(clip, &fill_area2, color, mask_buf + mask_ofs, mask_res, opa, blend_mode);
 800c9c2:	4638      	mov	r0, r7
            int32_t mask_ofs = (area_outer->x2 - rout + 1) - (draw_buf->area.x1 + draw_area.x1);
 800c9c4:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
        for(h = lower_corner_end; h <= draw_area.y2; h++) {
 800c9c8:	f108 0801 	add.w	r8, r8, #1
            fill_area2.x1 = area_outer->x2 - rout + 1;
 800c9cc:	1c5a      	adds	r2, r3, #1
            fill_area2.x2 = area_outer->x2;
 800c9ce:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
            fill_area2.x1 = area_outer->x2 - rout + 1;
 800c9d2:	eba2 020a 	sub.w	r2, r2, sl
 800c9d6:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
            int32_t mask_ofs = (area_outer->x2 - rout + 1) - (draw_buf->area.x1 + draw_area.x1);
 800c9da:	9a04      	ldr	r2, [sp, #16]
 800c9dc:	1a9b      	subs	r3, r3, r2
 800c9de:	f9bb 2010 	ldrsh.w	r2, [fp, #16]
 800c9e2:	3301      	adds	r3, #1
 800c9e4:	440a      	add	r2, r1
            _lv_blend_fill(clip, &fill_area2, color, mask_buf + mask_ofs, mask_res, opa, blend_mode);
 800c9e6:	a912      	add	r1, sp, #72	; 0x48
            int32_t mask_ofs = (area_outer->x2 - rout + 1) - (draw_buf->area.x1 + draw_area.x1);
 800c9e8:	1a9b      	subs	r3, r3, r2
            _lv_blend_fill(clip, &fill_area2, color, mask_buf + mask_ofs, mask_res, opa, blend_mode);
 800c9ea:	9a06      	ldr	r2, [sp, #24]
 800c9ec:	9202      	str	r2, [sp, #8]
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	bfac      	ite	ge
 800c9f2:	18eb      	addge	r3, r5, r3
 800c9f4:	1c2b      	addlt	r3, r5, #0
 800c9f6:	9a05      	ldr	r2, [sp, #20]
 800c9f8:	9201      	str	r2, [sp, #4]
 800c9fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c9fc:	9200      	str	r2, [sp, #0]
 800c9fe:	464a      	mov	r2, r9
 800ca00:	f7fc fc0e 	bl	8009220 <_lv_blend_fill>
            fill_area.y1++;
 800ca04:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 800ca08:	3301      	adds	r3, #1
 800ca0a:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
            fill_area.y2++;
 800ca0e:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
 800ca12:	3301      	adds	r3, #1
 800ca14:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
        for(h = lower_corner_end; h <= draw_area.y2; h++) {
 800ca18:	e6a9      	b.n	800c76e <draw_full_border+0x19c>
        fill_area.x1 = area_outer->x1;
 800ca1a:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
        fill_area.x2 = area_outer->x2;
 800ca1e:	f8ad e044 	strh.w	lr, [sp, #68]	; 0x44
        fill_area.y1 = disp_area->y1 + draw_area.y1;
 800ca22:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
        fill_area.y2 = fill_area.y1;
 800ca26:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800ca2a:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 800ca2e:	4543      	cmp	r3, r8
 800ca30:	f6ff aeda 	blt.w	800c7e8 <draw_full_border+0x216>
            lv_memset_ff(mask_buf, draw_area_w);
 800ca34:	4631      	mov	r1, r6
 800ca36:	4628      	mov	r0, r5
 800ca38:	f00b f8ab 	bl	8017b92 <lv_memset_ff>
            mask_res = lv_draw_mask_apply(mask_buf, draw_buf->area.x1 + draw_area.x1, draw_buf->area.y1 + h, draw_area_w);
 800ca3c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 800ca40:	f8bb 2012 	ldrh.w	r2, [fp, #18]
 800ca44:	4628      	mov	r0, r5
 800ca46:	f8bb 1010 	ldrh.w	r1, [fp, #16]
 800ca4a:	4442      	add	r2, r8
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800ca4c:	f108 0801 	add.w	r8, r8, #1
            mask_res = lv_draw_mask_apply(mask_buf, draw_buf->area.x1 + draw_area.x1, draw_buf->area.y1 + h, draw_area_w);
 800ca50:	4419      	add	r1, r3
 800ca52:	4633      	mov	r3, r6
 800ca54:	b212      	sxth	r2, r2
 800ca56:	b209      	sxth	r1, r1
 800ca58:	f7ff fb28 	bl	800c0ac <lv_draw_mask_apply>
            _lv_blend_fill(clip, &fill_area, color, mask_buf, mask_res, opa, blend_mode);
 800ca5c:	9b06      	ldr	r3, [sp, #24]
 800ca5e:	464a      	mov	r2, r9
 800ca60:	a910      	add	r1, sp, #64	; 0x40
 800ca62:	9302      	str	r3, [sp, #8]
 800ca64:	9b05      	ldr	r3, [sp, #20]
 800ca66:	e9cd 0300 	strd	r0, r3, [sp]
 800ca6a:	462b      	mov	r3, r5
 800ca6c:	4638      	mov	r0, r7
 800ca6e:	f7fc fbd7 	bl	8009220 <_lv_blend_fill>
            fill_area.y1++;
 800ca72:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 800ca76:	3301      	adds	r3, #1
 800ca78:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
            fill_area.y2++;
 800ca7c:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
 800ca80:	3301      	adds	r3, #1
 800ca82:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800ca86:	e7d0      	b.n	800ca2a <draw_full_border+0x458>

0800ca88 <lv_draw_rect_dsc_init>:
{
 800ca88:	b510      	push	{r4, lr}
    lv_memset_00(dsc, sizeof(lv_draw_rect_dsc_t));
 800ca8a:	2134      	movs	r1, #52	; 0x34
{
 800ca8c:	4604      	mov	r4, r0
    lv_memset_00(dsc, sizeof(lv_draw_rect_dsc_t));
 800ca8e:	f00b f851 	bl	8017b34 <lv_memset_00>
    dsc->bg_color = lv_color_white();
 800ca92:	f64f 73ff 	movw	r3, #65535	; 0xffff
    dsc->bg_img_symbol_font = LV_FONT_DEFAULT;
 800ca96:	4a0c      	ldr	r2, [pc, #48]	; (800cac8 <lv_draw_rect_dsc_init+0x40>)
    dsc->bg_color = lv_color_white();
 800ca98:	6063      	str	r3, [r4, #4]
    dsc->border_color = lv_color_black();
 800ca9a:	2300      	movs	r3, #0
    dsc->bg_img_symbol_font = LV_FONT_DEFAULT;
 800ca9c:	6122      	str	r2, [r4, #16]
    dsc->border_color = lv_color_black();
 800ca9e:	8363      	strh	r3, [r4, #26]
    dsc->shadow_color = lv_color_black();
 800caa0:	8523      	strh	r3, [r4, #40]	; 0x28
    dsc->bg_grad_color_stop = 0xFF;
 800caa2:	23ff      	movs	r3, #255	; 0xff
 800caa4:	7263      	strb	r3, [r4, #9]
    dsc->bg_opa = LV_OPA_COVER;
 800caa6:	72a3      	strb	r3, [r4, #10]
    dsc->bg_img_opa = LV_OPA_COVER;
 800caa8:	75a3      	strb	r3, [r4, #22]
    dsc->outline_opa = LV_OPA_COVER;
 800caaa:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
    dsc->shadow_opa = LV_OPA_COVER;
 800caae:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
    dsc->border_opa = LV_OPA_COVER;
 800cab2:	8be3      	ldrh	r3, [r4, #30]
 800cab4:	f423 537b 	bic.w	r3, r3, #16064	; 0x3ec0
 800cab8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800cabc:	f443 53f7 	orr.w	r3, r3, #7904	; 0x1ee0
 800cac0:	f043 031f 	orr.w	r3, r3, #31
 800cac4:	83e3      	strh	r3, [r4, #30]
}
 800cac6:	bd10      	pop	{r4, pc}
 800cac8:	08028bc8 	.word	0x08028bc8

0800cacc <lv_draw_rect>:
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800cacc:	88c3      	ldrh	r3, [r0, #6]
{
 800cace:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cad2:	4690      	mov	r8, r2
 800cad4:	8845      	ldrh	r5, [r0, #2]
 800cad6:	1c5a      	adds	r2, r3, #1
 800cad8:	468b      	mov	fp, r1
 800cada:	1b52      	subs	r2, r2, r5
    if(lv_area_get_height(coords) < 1 || lv_area_get_width(coords) < 1) return;
 800cadc:	b212      	sxth	r2, r2
{
 800cade:	ed2d 8b02 	vpush	{d8}
    if(lv_area_get_height(coords) < 1 || lv_area_get_width(coords) < 1) return;
 800cae2:	2a00      	cmp	r2, #0
{
 800cae4:	b0ad      	sub	sp, #180	; 0xb4
 800cae6:	9005      	str	r0, [sp, #20]
    if(lv_area_get_height(coords) < 1 || lv_area_get_width(coords) < 1) return;
 800cae8:	f340 877f 	ble.w	800d9ea <lv_draw_rect+0xf1e>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800caec:	4602      	mov	r2, r0
 800caee:	8880      	ldrh	r0, [r0, #4]
 800caf0:	8812      	ldrh	r2, [r2, #0]
 800caf2:	1c41      	adds	r1, r0, #1
 800caf4:	1a89      	subs	r1, r1, r2
 800caf6:	b209      	sxth	r1, r1
 800caf8:	2900      	cmp	r1, #0
 800cafa:	f340 8776 	ble.w	800d9ea <lv_draw_rect+0xf1e>
    if(dsc->shadow_width == 0) return;
 800cafe:	f9b8 402a 	ldrsh.w	r4, [r8, #42]	; 0x2a
 800cb02:	2c00      	cmp	r4, #0
 800cb04:	f000 859f 	beq.w	800d646 <lv_draw_rect+0xb7a>
    if(dsc->shadow_opa <= LV_OPA_MIN) return;
 800cb08:	f898 1032 	ldrb.w	r1, [r8, #50]	; 0x32
 800cb0c:	2902      	cmp	r1, #2
 800cb0e:	9109      	str	r1, [sp, #36]	; 0x24
 800cb10:	f240 8599 	bls.w	800d646 <lv_draw_rect+0xb7a>
    if(dsc->shadow_width == 1 && dsc->shadow_ofs_x == 0 &&
 800cb14:	2c01      	cmp	r4, #1
 800cb16:	f9b8 1030 	ldrsh.w	r1, [r8, #48]	; 0x30
 800cb1a:	d105      	bne.n	800cb28 <lv_draw_rect+0x5c>
 800cb1c:	f8d8 602c 	ldr.w	r6, [r8, #44]	; 0x2c
 800cb20:	b916      	cbnz	r6, 800cb28 <lv_draw_rect+0x5c>
       dsc->shadow_ofs_y == 0 && dsc->shadow_spread <= 0) {
 800cb22:	2900      	cmp	r1, #0
 800cb24:	f340 858f 	ble.w	800d646 <lv_draw_rect+0xb7a>
    sh_rect_area.x1 = coords->x1  + dsc->shadow_ofs_x - dsc->shadow_spread;
 800cb28:	b289      	uxth	r1, r1
 800cb2a:	f8b8 602c 	ldrh.w	r6, [r8, #44]	; 0x2c
 800cb2e:	1a77      	subs	r7, r6, r1
    sh_rect_area.x2 = coords->x2  + dsc->shadow_ofs_x + dsc->shadow_spread;
 800cb30:	440e      	add	r6, r1
 800cb32:	4430      	add	r0, r6
    sh_rect_area.y1 = coords->y1  + dsc->shadow_ofs_y - dsc->shadow_spread;
 800cb34:	f8b8 602e 	ldrh.w	r6, [r8, #46]	; 0x2e
    sh_rect_area.x1 = coords->x1  + dsc->shadow_ofs_x - dsc->shadow_spread;
 800cb38:	443a      	add	r2, r7
    sh_rect_area.y1 = coords->y1  + dsc->shadow_ofs_y - dsc->shadow_spread;
 800cb3a:	1a77      	subs	r7, r6, r1
    sh_rect_area.y2 = coords->y2  + dsc->shadow_ofs_y + dsc->shadow_spread;
 800cb3c:	4431      	add	r1, r6
    sh_rect_area.x2 = coords->x2  + dsc->shadow_ofs_x + dsc->shadow_spread;
 800cb3e:	b280      	uxth	r0, r0
    sh_rect_area.y2 = coords->y2  + dsc->shadow_ofs_y + dsc->shadow_spread;
 800cb40:	4419      	add	r1, r3
    sh_area.x1 = sh_rect_area.x1 - sw / 2 - 1;
 800cb42:	eb04 73d4 	add.w	r3, r4, r4, lsr #31
    sh_rect_area.x2 = coords->x2  + dsc->shadow_ofs_x + dsc->shadow_spread;
 800cb46:	f8ad 0048 	strh.w	r0, [sp, #72]	; 0x48
    sh_rect_area.y1 = coords->y1  + dsc->shadow_ofs_y - dsc->shadow_spread;
 800cb4a:	443d      	add	r5, r7
 800cb4c:	ea6f 0663 	mvn.w	r6, r3, asr #1
    sh_area.x2 = sh_rect_area.x2 + sw / 2 + 1;
 800cb50:	105b      	asrs	r3, r3, #1
    sh_rect_area.y2 = coords->y2  + dsc->shadow_ofs_y + dsc->shadow_spread;
 800cb52:	b289      	uxth	r1, r1
 800cb54:	3301      	adds	r3, #1
    sh_rect_area.x1 = coords->x1  + dsc->shadow_ofs_x - dsc->shadow_spread;
 800cb56:	b292      	uxth	r2, r2
    sh_rect_area.y1 = coords->y1  + dsc->shadow_ofs_y - dsc->shadow_spread;
 800cb58:	b2ad      	uxth	r5, r5
    sh_rect_area.y2 = coords->y2  + dsc->shadow_ofs_y + dsc->shadow_spread;
 800cb5a:	f8ad 104a 	strh.w	r1, [sp, #74]	; 0x4a
    sh_area.x2 = sh_rect_area.x2 + sw / 2 + 1;
 800cb5e:	fa10 f083 	uxtah	r0, r0, r3
    sh_area.y2 = sh_rect_area.y2 + sw / 2 + 1;
 800cb62:	fa11 f383 	uxtah	r3, r1, r3
    sh_rect_area.x1 = coords->x1  + dsc->shadow_ofs_x - dsc->shadow_spread;
 800cb66:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
    sh_area.x1 = sh_rect_area.x1 - sw / 2 - 1;
 800cb6a:	fa12 f286 	uxtah	r2, r2, r6
    sh_area.y2 = sh_rect_area.y2 + sw / 2 + 1;
 800cb6e:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 800cb72:	9b09      	ldr	r3, [sp, #36]	; 0x24
    sh_rect_area.y1 = coords->y1  + dsc->shadow_ofs_y - dsc->shadow_spread;
 800cb74:	f8ad 5046 	strh.w	r5, [sp, #70]	; 0x46
    sh_area.y1 = sh_rect_area.y1 - sw / 2 - 1;
 800cb78:	fa15 f586 	uxtah	r5, r5, r6
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 800cb7c:	2bfe      	cmp	r3, #254	; 0xfe
    sh_area.x1 = sh_rect_area.x1 - sw / 2 - 1;
 800cb7e:	f8ad 204c 	strh.w	r2, [sp, #76]	; 0x4c
    sh_area.y1 = sh_rect_area.y1 - sw / 2 - 1;
 800cb82:	f8ad 504e 	strh.w	r5, [sp, #78]	; 0x4e
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 800cb86:	bf28      	it	cs
 800cb88:	23ff      	movcs	r3, #255	; 0xff
    sh_area.x2 = sh_rect_area.x2 + sw / 2 + 1;
 800cb8a:	f8ad 0050 	strh.w	r0, [sp, #80]	; 0x50
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 800cb8e:	9309      	str	r3, [sp, #36]	; 0x24
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 800cb90:	f7fb fbf2 	bl	8008378 <_lv_refr_get_disp_refreshing>
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp);
 800cb94:	f009 fecc 	bl	8016930 <lv_disp_get_draw_buf>
    is_common = _lv_area_intersect(&draw_area, &sh_area, clip);
 800cb98:	465a      	mov	r2, fp
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp);
 800cb9a:	4605      	mov	r5, r0
    is_common = _lv_area_intersect(&draw_area, &sh_area, clip);
 800cb9c:	a913      	add	r1, sp, #76	; 0x4c
 800cb9e:	a815      	add	r0, sp, #84	; 0x54
 800cba0:	f00a f979 	bl	8016e96 <_lv_area_intersect>
    if(is_common == false) return;
 800cba4:	2800      	cmp	r0, #0
 800cba6:	f000 854e 	beq.w	800d646 <lv_draw_rect+0xb7a>
    draw_area.x1 -= disp_area->x1;
 800cbaa:	8a2e      	ldrh	r6, [r5, #16]
    for(y = 0; y < size; y++) {
 800cbac:	f04f 0900 	mov.w	r9, #0
    draw_area.x1 -= disp_area->x1;
 800cbb0:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
    draw_area.y1 -= disp_area->y1;
 800cbb4:	8a68      	ldrh	r0, [r5, #18]
    draw_area.x1 -= disp_area->x1;
 800cbb6:	1b9b      	subs	r3, r3, r6
    draw_area.y1 -= disp_area->y1;
 800cbb8:	f8bd 1056 	ldrh.w	r1, [sp, #86]	; 0x56
    draw_area.x2 -= disp_area->x1;
 800cbbc:	f8bd 2058 	ldrh.w	r2, [sp, #88]	; 0x58
    draw_area.x1 -= disp_area->x1;
 800cbc0:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
    draw_area.y1 -= disp_area->y1;
 800cbc4:	1a09      	subs	r1, r1, r0
    draw_area.y2 -= disp_area->y1;
 800cbc6:	f8bd 305a 	ldrh.w	r3, [sp, #90]	; 0x5a
    draw_area.x2 -= disp_area->x1;
 800cbca:	1b92      	subs	r2, r2, r6
    draw_area.y1 -= disp_area->y1;
 800cbcc:	f8ad 1056 	strh.w	r1, [sp, #86]	; 0x56
    draw_area.y2 -= disp_area->y1;
 800cbd0:	1a1b      	subs	r3, r3, r0
    lv_area_copy(&bg_coords, coords);
 800cbd2:	9905      	ldr	r1, [sp, #20]
 800cbd4:	a817      	add	r0, sp, #92	; 0x5c
    draw_area.x2 -= disp_area->x1;
 800cbd6:	f8ad 2058 	strh.w	r2, [sp, #88]	; 0x58
    draw_area.y2 -= disp_area->y1;
 800cbda:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
    lv_area_copy(&bg_coords, coords);
 800cbde:	f7ff fbe5 	bl	800c3ac <lv_area_copy>
    bg_coords.x1 += 1;
 800cbe2:	f8bd 505c 	ldrh.w	r5, [sp, #92]	; 0x5c
    bg_coords.y1 += 1;
 800cbe6:	f8bd 105e 	ldrh.w	r1, [sp, #94]	; 0x5e
    bg_coords.x2 -= 1;
 800cbea:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
    bg_coords.x1 += 1;
 800cbee:	3501      	adds	r5, #1
    bg_coords.y1 += 1;
 800cbf0:	3101      	adds	r1, #1
 800cbf2:	f8bd 6048 	ldrh.w	r6, [sp, #72]	; 0x48
    bg_coords.x2 -= 1;
 800cbf6:	1e5a      	subs	r2, r3, #1
    bg_coords.x1 += 1;
 800cbf8:	b2ad      	uxth	r5, r5
    bg_coords.y1 += 1;
 800cbfa:	b288      	uxth	r0, r1
    bg_coords.y2 -= 1;
 800cbfc:	f8bd 1062 	ldrh.w	r1, [sp, #98]	; 0x62
    bg_coords.x1 += 1;
 800cc00:	f8ad 505c 	strh.w	r5, [sp, #92]	; 0x5c
 800cc04:	1b5d      	subs	r5, r3, r5
    bg_coords.x2 -= 1;
 800cc06:	f8ad 2060 	strh.w	r2, [sp, #96]	; 0x60
    bg_coords.y2 -= 1;
 800cc0a:	1e4a      	subs	r2, r1, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800cc0c:	1a09      	subs	r1, r1, r0
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800cc0e:	b22d      	sxth	r5, r5
 800cc10:	f8ad 2062 	strh.w	r2, [sp, #98]	; 0x62
 800cc14:	3601      	adds	r6, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800cc16:	b20b      	sxth	r3, r1
    int32_t r_bg = dsc->radius;
 800cc18:	f9b8 2000 	ldrsh.w	r2, [r8]
 800cc1c:	f8bd 1046 	ldrh.w	r1, [sp, #70]	; 0x46
    int32_t short_side = LV_MIN(lv_area_get_width(&bg_coords), lv_area_get_height(&bg_coords));
 800cc20:	429d      	cmp	r5, r3
    bg_coords.y1 += 1;
 800cc22:	f8ad 005e 	strh.w	r0, [sp, #94]	; 0x5e
    int32_t short_side = LV_MIN(lv_area_get_width(&bg_coords), lv_area_get_height(&bg_coords));
 800cc26:	bfa8      	it	ge
 800cc28:	461d      	movge	r5, r3
    if(r_bg > short_side >> 1) r_bg = short_side >> 1;
 800cc2a:	106d      	asrs	r5, r5, #1
 800cc2c:	4295      	cmp	r5, r2
 800cc2e:	462b      	mov	r3, r5
 800cc30:	bfa8      	it	ge
 800cc32:	4613      	movge	r3, r2
 800cc34:	930e      	str	r3, [sp, #56]	; 0x38
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800cc36:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800cc3a:	1af6      	subs	r6, r6, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800cc3c:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
 800cc40:	3301      	adds	r3, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800cc42:	b236      	sxth	r6, r6
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800cc44:	1a5b      	subs	r3, r3, r1
 800cc46:	b21b      	sxth	r3, r3
    short_side = LV_MIN(lv_area_get_width(&sh_rect_area), lv_area_get_height(&sh_rect_area));
 800cc48:	429e      	cmp	r6, r3
 800cc4a:	bfa8      	it	ge
 800cc4c:	461e      	movge	r6, r3
    if(r_sh > short_side >> 1) r_sh = short_side >> 1;
 800cc4e:	1076      	asrs	r6, r6, #1
 800cc50:	4296      	cmp	r6, r2
 800cc52:	bfa8      	it	ge
 800cc54:	4616      	movge	r6, r2
    int32_t corner_size = sw  + r_sh;
 800cc56:	19a3      	adds	r3, r4, r6
    sh_buf = lv_mem_buf_get(corner_size * corner_size * sizeof(uint16_t));
 800cc58:	fb03 f003 	mul.w	r0, r3, r3
    int32_t corner_size = sw  + r_sh;
 800cc5c:	9306      	str	r3, [sp, #24]
    sh_buf = lv_mem_buf_get(corner_size * corner_size * sizeof(uint16_t));
 800cc5e:	0040      	lsls	r0, r0, #1
 800cc60:	f00a ff1a 	bl	8017a98 <lv_mem_buf_get>
    shadow_draw_corner_buf(&sh_rect_area, (uint16_t *)sh_buf, dsc->shadow_width, r_sh);
 800cc64:	f9b8 402a 	ldrsh.w	r4, [r8, #42]	; 0x2a
    lv_area_copy(&sh_area, coords);
 800cc68:	a911      	add	r1, sp, #68	; 0x44
    sh_buf = lv_mem_buf_get(corner_size * corner_size * sizeof(uint16_t));
 800cc6a:	9007      	str	r0, [sp, #28]
    lv_area_copy(&sh_area, coords);
 800cc6c:	a81d      	add	r0, sp, #116	; 0x74
    int32_t size = sw_ori  + r;
 800cc6e:	1935      	adds	r5, r6, r4
    lv_area_copy(&sh_area, coords);
 800cc70:	f7ff fb9c 	bl	800c3ac <lv_area_copy>
    sh_area.x2 = sw / 2 + r - 1  - ((sw & 1) ? 0 : 1);
 800cc74:	f004 0201 	and.w	r2, r4, #1
 800cc78:	eb04 73d4 	add.w	r3, r4, r4, lsr #31
    sh_area.x1 = sh_area.x2 - lv_area_get_width(coords);
 800cc7c:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
 800cc80:	920a      	str	r2, [sp, #40]	; 0x28
    sh_area.x2 = sw / 2 + r - 1  - ((sw & 1) ? 0 : 1);
 800cc82:	f064 0201 	orn	r2, r4, #1
 800cc86:	f3c3 034f 	ubfx	r3, r3, #1, #16
    sh_area.x1 = sh_area.x2 - lv_area_get_width(coords);
 800cc8a:	f8bd 0044 	ldrh.w	r0, [sp, #68]	; 0x44
 800cc8e:	43c9      	mvns	r1, r1
            lv_memset_00(sh_ups_tmp_buf, size * sizeof(sh_ups_tmp_buf[0]));
 800cc90:	ea4f 0a45 	mov.w	sl, r5, lsl #1
    sh_area.x2 = sw / 2 + r - 1  - ((sw & 1) ? 0 : 1);
 800cc94:	441a      	add	r2, r3
    sh_area.y1 = sw / 2 + 1;
 800cc96:	3301      	adds	r3, #1
    sh_area.x1 = sh_area.x2 - lv_area_get_width(coords);
 800cc98:	4401      	add	r1, r0
    lv_draw_mask_radius_init(&mask_param, &sh_area, r, false);
 800cc9a:	a824      	add	r0, sp, #144	; 0x90
    sh_area.x2 = sw / 2 + r - 1  - ((sw & 1) ? 0 : 1);
 800cc9c:	4432      	add	r2, r6
    sh_area.y1 = sw / 2 + 1;
 800cc9e:	b29b      	uxth	r3, r3
    sh_area.x2 = sw / 2 + r - 1  - ((sw & 1) ? 0 : 1);
 800cca0:	b292      	uxth	r2, r2
    sh_area.y1 = sw / 2 + 1;
 800cca2:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
    sh_area.x2 = sw / 2 + r - 1  - ((sw & 1) ? 0 : 1);
 800cca6:	f8ad 2078 	strh.w	r2, [sp, #120]	; 0x78
    sh_area.x1 = sh_area.x2 - lv_area_get_width(coords);
 800ccaa:	440a      	add	r2, r1
 800ccac:	f8bd 1046 	ldrh.w	r1, [sp, #70]	; 0x46
 800ccb0:	f8ad 2074 	strh.w	r2, [sp, #116]	; 0x74
 800ccb4:	f8bd 204a 	ldrh.w	r2, [sp, #74]	; 0x4a
 800ccb8:	3201      	adds	r2, #1
 800ccba:	1a52      	subs	r2, r2, r1
    lv_draw_mask_radius_init(&mask_param, &sh_area, r, false);
 800ccbc:	a91d      	add	r1, sp, #116	; 0x74
    sh_area.y2 = sh_area.y1 + lv_area_get_height(coords);
 800ccbe:	4413      	add	r3, r2
    lv_draw_mask_radius_init(&mask_param, &sh_area, r, false);
 800ccc0:	4632      	mov	r2, r6
    sh_area.y2 = sh_area.y1 + lv_area_get_height(coords);
 800ccc2:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
    lv_draw_mask_radius_init(&mask_param, &sh_area, r, false);
 800ccc6:	2300      	movs	r3, #0
 800ccc8:	f7ff fb40 	bl	800c34c <lv_draw_mask_radius_init>
    if(sw_ori == 1) sw = 1;
 800cccc:	2c01      	cmp	r4, #1
    lv_opa_t * mask_line = lv_mem_buf_get(size);
 800ccce:	4628      	mov	r0, r5
    else sw = sw_ori >> 1;
 800ccd0:	bf18      	it	ne
 800ccd2:	1064      	asrne	r4, r4, #1
    lv_opa_t * mask_line = lv_mem_buf_get(size);
 800ccd4:	f00a fee0 	bl	8017a98 <lv_mem_buf_get>
    sh_buf = lv_mem_buf_get(corner_size * corner_size * sizeof(uint16_t));
 800ccd8:	9b07      	ldr	r3, [sp, #28]
    lv_opa_t * mask_line = lv_mem_buf_get(size);
 800ccda:	4607      	mov	r7, r0
    sh_buf = lv_mem_buf_get(corner_size * corner_size * sizeof(uint16_t));
 800ccdc:	9308      	str	r3, [sp, #32]
        lv_draw_mask_res_t mask_res = mask_param.dsc.cb(mask_line, 0, y, size, &mask_param);
 800ccde:	b22b      	sxth	r3, r5
 800cce0:	ee08 3a10 	vmov	s16, r3
    for(y = 0; y < size; y++) {
 800cce4:	454d      	cmp	r5, r9
 800cce6:	dc09      	bgt.n	800ccfc <lv_draw_rect+0x230>
    lv_mem_buf_release(mask_line);
 800cce8:	4638      	mov	r0, r7
 800ccea:	fb05 f605 	mul.w	r6, r5, r5
 800ccee:	f00a fd2f 	bl	8017750 <lv_mem_buf_release>
    if(sw == 1) {
 800ccf2:	2c01      	cmp	r4, #1
 800ccf4:	f040 81b5 	bne.w	800d062 <lv_draw_rect+0x596>
        for(i = 0; i < size * size; i++) {
 800ccf8:	2300      	movs	r3, #0
 800ccfa:	e03c      	b.n	800cd76 <lv_draw_rect+0x2aa>
        lv_memset_ff(mask_line, size);
 800ccfc:	4629      	mov	r1, r5
 800ccfe:	4638      	mov	r0, r7
 800cd00:	f00a ff47 	bl	8017b92 <lv_memset_ff>
        lv_draw_mask_res_t mask_res = mask_param.dsc.cb(mask_line, 0, y, size, &mask_param);
 800cd04:	ab24      	add	r3, sp, #144	; 0x90
 800cd06:	fa0f f289 	sxth.w	r2, r9
 800cd0a:	2100      	movs	r1, #0
 800cd0c:	9300      	str	r3, [sp, #0]
 800cd0e:	4638      	mov	r0, r7
 800cd10:	ee18 3a10 	vmov	r3, s16
 800cd14:	9e24      	ldr	r6, [sp, #144]	; 0x90
 800cd16:	47b0      	blx	r6
        if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
 800cd18:	b948      	cbnz	r0, 800cd2e <lv_draw_rect+0x262>
            lv_memset_00(sh_ups_tmp_buf, size * sizeof(sh_ups_tmp_buf[0]));
 800cd1a:	4651      	mov	r1, sl
 800cd1c:	9808      	ldr	r0, [sp, #32]
 800cd1e:	f00a ff09 	bl	8017b34 <lv_memset_00>
        sh_ups_tmp_buf += size;
 800cd22:	9b08      	ldr	r3, [sp, #32]
    for(y = 0; y < size; y++) {
 800cd24:	f109 0901 	add.w	r9, r9, #1
        sh_ups_tmp_buf += size;
 800cd28:	4453      	add	r3, sl
 800cd2a:	9308      	str	r3, [sp, #32]
    for(y = 0; y < size; y++) {
 800cd2c:	e7da      	b.n	800cce4 <lv_draw_rect+0x218>
            sh_ups_tmp_buf[0] = (mask_line[0] << SHADOW_UPSCALE_SHIFT) / sw;
 800cd2e:	783a      	ldrb	r2, [r7, #0]
 800cd30:	4639      	mov	r1, r7
 800cd32:	9b08      	ldr	r3, [sp, #32]
 800cd34:	0192      	lsls	r2, r2, #6
 800cd36:	fb92 f2f4 	sdiv	r2, r2, r4
 800cd3a:	f823 2b02 	strh.w	r2, [r3], #2
            for(i = 1; i < size; i++) {
 800cd3e:	9a08      	ldr	r2, [sp, #32]
 800cd40:	eb0a 0002 	add.w	r0, sl, r2
 800cd44:	4298      	cmp	r0, r3
 800cd46:	d0ec      	beq.n	800cd22 <lv_draw_rect+0x256>
                if(mask_line[i] == mask_line[i - 1]) sh_ups_tmp_buf[i] = sh_ups_tmp_buf[i - 1];
 800cd48:	468c      	mov	ip, r1
 800cd4a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800cd4e:	3302      	adds	r3, #2
 800cd50:	f89c c000 	ldrb.w	ip, [ip]
 800cd54:	4594      	cmp	ip, r2
                else  sh_ups_tmp_buf[i] = (mask_line[i] << SHADOW_UPSCALE_SHIFT) / sw;
 800cd56:	bf16      	itet	ne
 800cd58:	0192      	lslne	r2, r2, #6
                if(mask_line[i] == mask_line[i - 1]) sh_ups_tmp_buf[i] = sh_ups_tmp_buf[i - 1];
 800cd5a:	f833 2c04 	ldrheq.w	r2, [r3, #-4]
                else  sh_ups_tmp_buf[i] = (mask_line[i] << SHADOW_UPSCALE_SHIFT) / sw;
 800cd5e:	fb92 f2f4 	sdivne	r2, r2, r4
 800cd62:	f823 2c02 	strh.w	r2, [r3, #-2]
            for(i = 1; i < size; i++) {
 800cd66:	e7ed      	b.n	800cd44 <lv_draw_rect+0x278>
            res_buf[i] = (sh_buf[i] >> SHADOW_UPSCALE_SHIFT);
 800cd68:	9a07      	ldr	r2, [sp, #28]
 800cd6a:	9907      	ldr	r1, [sp, #28]
 800cd6c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800cd70:	0992      	lsrs	r2, r2, #6
 800cd72:	54ca      	strb	r2, [r1, r3]
        for(i = 0; i < size * size; i++) {
 800cd74:	3301      	adds	r3, #1
 800cd76:	42b3      	cmp	r3, r6
 800cd78:	d1f6      	bne.n	800cd68 <lv_draw_rect+0x29c>
 800cd7a:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
    lv_coord_t h_half = sh_area.y1 + lv_area_get_height(&sh_area) / 2;
 800cd7e:	f8bd 204e 	ldrh.w	r2, [sp, #78]	; 0x4e
 800cd82:	3301      	adds	r3, #1
 800cd84:	1a9b      	subs	r3, r3, r2
 800cd86:	f3c3 31c0 	ubfx	r1, r3, #15, #1
 800cd8a:	fa01 f383 	sxtah	r3, r1, r3
 800cd8e:	eb02 0363 	add.w	r3, r2, r3, asr #1
 800cd92:	b29a      	uxth	r2, r3
 800cd94:	b21b      	sxth	r3, r3
 800cd96:	920c      	str	r2, [sp, #48]	; 0x30
 800cd98:	930a      	str	r3, [sp, #40]	; 0x28
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800cd9a:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
    lv_coord_t w_half = sh_area.x1 + lv_area_get_width(&sh_area) / 2;
 800cd9e:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
 800cda2:	3301      	adds	r3, #1
 800cda4:	1a9b      	subs	r3, r3, r2
 800cda6:	f3c3 31c0 	ubfx	r1, r3, #15, #1
 800cdaa:	fa01 f383 	sxtah	r3, r1, r3
 800cdae:	eb02 0363 	add.w	r3, r2, r3, asr #1
 800cdb2:	b29a      	uxth	r2, r3
 800cdb4:	b21b      	sxth	r3, r3
 800cdb6:	920d      	str	r2, [sp, #52]	; 0x34
 800cdb8:	930b      	str	r3, [sp, #44]	; 0x2c
    if(lv_draw_mask_get_cnt() > 0) simple_mode = false;
 800cdba:	f7ff f9c1 	bl	800c140 <lv_draw_mask_get_cnt>
 800cdbe:	2800      	cmp	r0, #0
 800cdc0:	f040 817f 	bne.w	800d0c2 <lv_draw_rect+0x5f6>
    else if(dsc->shadow_ofs_x != 0 || dsc->shadow_ofs_y != 0) simple_mode = false;
 800cdc4:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	f040 817c 	bne.w	800d0c6 <lv_draw_rect+0x5fa>
    else if(dsc->shadow_spread != 0) simple_mode = false;
 800cdce:	f9b8 5030 	ldrsh.w	r5, [r8, #48]	; 0x30
 800cdd2:	fab5 f385 	clz	r3, r5
 800cdd6:	095b      	lsrs	r3, r3, #5
    if(lv_draw_mask_get_cnt() > 0) simple_mode = false;
 800cdd8:	9308      	str	r3, [sp, #32]
 800cdda:	f8bd 0050 	ldrh.w	r0, [sp, #80]	; 0x50
 800cdde:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 800cde2:	3001      	adds	r0, #1
 800cde4:	1ac0      	subs	r0, r0, r3
    lv_opa_t * mask_buf = lv_mem_buf_get(lv_area_get_width(&sh_area));
 800cde6:	b200      	sxth	r0, r0
 800cde8:	f00a fe56 	bl	8017a98 <lv_mem_buf_get>
    lv_draw_mask_radius_init(&mask_rout_param, &bg_coords, r_bg, true);
 800cdec:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
 800cdf0:	a917      	add	r1, sp, #92	; 0x5c
    lv_opa_t * mask_buf = lv_mem_buf_get(lv_area_get_width(&sh_area));
 800cdf2:	4604      	mov	r4, r0
    lv_draw_mask_radius_init(&mask_rout_param, &bg_coords, r_bg, true);
 800cdf4:	ee08 3a10 	vmov	s16, r3
 800cdf8:	a824      	add	r0, sp, #144	; 0x90
 800cdfa:	2301      	movs	r3, #1
 800cdfc:	ee18 2a10 	vmov	r2, s16
 800ce00:	f7ff faa4 	bl	800c34c <lv_draw_mask_radius_init>
    int16_t mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
 800ce04:	2100      	movs	r1, #0
 800ce06:	a824      	add	r0, sp, #144	; 0x90
 800ce08:	f7ff f93a 	bl	800c080 <lv_draw_mask_add>
    a.x2 = sh_area.x2;
 800ce0c:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	; 0x50
    a.x1 = a.x2 - corner_size + 1;
 800ce10:	f8bd 5018 	ldrh.w	r5, [sp, #24]
    int16_t mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
 800ce14:	ee08 0a90 	vmov	s17, r0
    a.x2 = sh_area.x2;
 800ce18:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    a.x1 = a.x2 - corner_size + 1;
 800ce1c:	3301      	adds	r3, #1
    bool has_com = _lv_area_intersect(&ca, &a, clip);
 800ce1e:	465a      	mov	r2, fp
 800ce20:	a919      	add	r1, sp, #100	; 0x64
    a.x1 = a.x2 - corner_size + 1;
 800ce22:	1b5b      	subs	r3, r3, r5
    bool has_com = _lv_area_intersect(&ca, &a, clip);
 800ce24:	a81b      	add	r0, sp, #108	; 0x6c
    a.x1 = a.x2 - corner_size + 1;
 800ce26:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
    a.y1 = sh_area.y1;
 800ce2a:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 800ce2e:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
    a.y2 = a.y1 + corner_size - 1;
 800ce32:	3b01      	subs	r3, #1
 800ce34:	442b      	add	r3, r5
 800ce36:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
    bool has_com = _lv_area_intersect(&ca, &a, clip);
 800ce3a:	f00a f82c 	bl	8016e96 <_lv_area_intersect>
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
 800ce3e:	2800      	cmp	r0, #0
 800ce40:	d048      	beq.n	800ced4 <lv_draw_rect+0x408>
 800ce42:	ee18 2a10 	vmov	r2, s16
 800ce46:	a917      	add	r1, sp, #92	; 0x5c
 800ce48:	a819      	add	r0, sp, #100	; 0x64
 800ce4a:	f00a f923 	bl	8017094 <_lv_area_is_in>
 800ce4e:	2800      	cmp	r0, #0
 800ce50:	d140      	bne.n	800ced4 <lv_draw_rect+0x408>
        if(ca.y2 > h_half) ca.y2 = h_half;
 800ce52:	f9bd 3072 	ldrsh.w	r3, [sp, #114]	; 0x72
 800ce56:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ce58:	f8bd 7070 	ldrh.w	r7, [sp, #112]	; 0x70
 800ce5c:	4293      	cmp	r3, r2
 800ce5e:	f107 0701 	add.w	r7, r7, #1
 800ce62:	bfc8      	it	gt
 800ce64:	4613      	movgt	r3, r2
        if(ca.x1 <= w_half) ca.x1 = w_half + 1;
 800ce66:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
        if(ca.y2 > h_half) ca.y2 = h_half;
 800ce68:	bfc8      	it	gt
 800ce6a:	f8ad 3072 	strhgt.w	r3, [sp, #114]	; 0x72
        if(ca.x1 <= w_half) ca.x1 = w_half + 1;
 800ce6e:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	; 0x6c
 800ce72:	4293      	cmp	r3, r2
 800ce74:	bfde      	ittt	le
 800ce76:	9b0d      	ldrle	r3, [sp, #52]	; 0x34
 800ce78:	3301      	addle	r3, #1
 800ce7a:	f8ad 306c 	strhle.w	r3, [sp, #108]	; 0x6c
 800ce7e:	f9bd 206c 	ldrsh.w	r2, [sp, #108]	; 0x6c
 800ce82:	1abf      	subs	r7, r7, r2
 800ce84:	b23f      	sxth	r7, r7
        if(w > 0) {
 800ce86:	2f00      	cmp	r7, #0
 800ce88:	dd24      	ble.n	800ced4 <lv_draw_rect+0x408>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800ce8a:	f8bd a072 	ldrh.w	sl, [sp, #114]	; 0x72
            lv_area_copy(&fa, &ca);
 800ce8e:	a81d      	add	r0, sp, #116	; 0x74
 800ce90:	f9bd 306e 	ldrsh.w	r3, [sp, #110]	; 0x6e
            for(y = 0; y < h; y++) {
 800ce94:	f04f 0900 	mov.w	r9, #0
            sh_buf_tmp += corner_size * (ca.y1 - a.y1);
 800ce98:	f9bd 6066 	ldrsh.w	r6, [sp, #102]	; 0x66
 800ce9c:	f10a 0a01 	add.w	sl, sl, #1
 800cea0:	1b9e      	subs	r6, r3, r6
 800cea2:	ebaa 0a03 	sub.w	sl, sl, r3
            sh_buf_tmp = sh_buf + (ca.x1 - a.x1);
 800cea6:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	; 0x64
 800ceaa:	fa0f f18a 	sxth.w	r1, sl
 800ceae:	1ad2      	subs	r2, r2, r3
            sh_buf_tmp += corner_size * (ca.y1 - a.y1);
 800ceb0:	9b06      	ldr	r3, [sp, #24]
 800ceb2:	910e      	str	r1, [sp, #56]	; 0x38
            lv_area_copy(&fa, &ca);
 800ceb4:	a91b      	add	r1, sp, #108	; 0x6c
            sh_buf_tmp += corner_size * (ca.y1 - a.y1);
 800ceb6:	fb03 2606 	mla	r6, r3, r6, r2
 800ceba:	9b07      	ldr	r3, [sp, #28]
 800cebc:	441e      	add	r6, r3
            lv_area_copy(&fa, &ca);
 800cebe:	f7ff fa75 	bl	800c3ac <lv_area_copy>
            fa.y2 = fa.y1;
 800cec2:	f8bd 3076 	ldrh.w	r3, [sp, #118]	; 0x76
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 800cec6:	4682      	mov	sl, r0
            fa.y2 = fa.y1;
 800cec8:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
            for(y = 0; y < h; y++) {
 800cecc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cece:	4599      	cmp	r9, r3
 800ced0:	f2c0 80fb 	blt.w	800d0ca <lv_draw_rect+0x5fe>
    a.x2 = sh_area.x2;
 800ced4:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	; 0x50
    has_com = _lv_area_intersect(&ca, &a, clip);
 800ced8:	a919      	add	r1, sp, #100	; 0x64
    a.y1 = sh_area.y2 - corner_size + 1;
 800ceda:	f9bd 2052 	ldrsh.w	r2, [sp, #82]	; 0x52
    has_com = _lv_area_intersect(&ca, &a, clip);
 800cede:	a81b      	add	r0, sp, #108	; 0x6c
    a.x2 = sh_area.x2;
 800cee0:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    a.x1 = a.x2 - corner_size + 1;
 800cee4:	3301      	adds	r3, #1
    a.y2 = sh_area.y2;
 800cee6:	f8ad 206a 	strh.w	r2, [sp, #106]	; 0x6a
    a.x1 = a.x2 - corner_size + 1;
 800ceea:	1b5b      	subs	r3, r3, r5
 800ceec:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
    a.y1 = sh_area.y2 - corner_size + 1;
 800cef0:	1c53      	adds	r3, r2, #1
    has_com = _lv_area_intersect(&ca, &a, clip);
 800cef2:	465a      	mov	r2, fp
    a.y1 = sh_area.y2 - corner_size + 1;
 800cef4:	1b5b      	subs	r3, r3, r5
 800cef6:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
    has_com = _lv_area_intersect(&ca, &a, clip);
 800cefa:	f009 ffcc 	bl	8016e96 <_lv_area_intersect>
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
 800cefe:	2800      	cmp	r0, #0
 800cf00:	d047      	beq.n	800cf92 <lv_draw_rect+0x4c6>
 800cf02:	ee18 2a10 	vmov	r2, s16
 800cf06:	a917      	add	r1, sp, #92	; 0x5c
 800cf08:	a819      	add	r0, sp, #100	; 0x64
 800cf0a:	f00a f8c3 	bl	8017094 <_lv_area_is_in>
 800cf0e:	2800      	cmp	r0, #0
 800cf10:	d13f      	bne.n	800cf92 <lv_draw_rect+0x4c6>
        if(ca.y1 <= h_half) ca.y1 = h_half;
 800cf12:	f9bd 306e 	ldrsh.w	r3, [sp, #110]	; 0x6e
 800cf16:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800cf18:	f8bd 6070 	ldrh.w	r6, [sp, #112]	; 0x70
 800cf1c:	4293      	cmp	r3, r2
 800cf1e:	f106 0601 	add.w	r6, r6, #1
 800cf22:	bfd8      	it	le
 800cf24:	4613      	movle	r3, r2
        if(ca.x1 <= w_half) ca.x1 = w_half;
 800cf26:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
        if(ca.y1 <= h_half) ca.y1 = h_half;
 800cf28:	bfd8      	it	le
 800cf2a:	f8ad 306e 	strhle.w	r3, [sp, #110]	; 0x6e
        if(ca.x1 <= w_half) ca.x1 = w_half;
 800cf2e:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	; 0x6c
 800cf32:	4293      	cmp	r3, r2
 800cf34:	bfdc      	itt	le
 800cf36:	4613      	movle	r3, r2
 800cf38:	f8ad 306c 	strhle.w	r3, [sp, #108]	; 0x6c
 800cf3c:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	; 0x6c
 800cf40:	1af6      	subs	r6, r6, r3
 800cf42:	b236      	sxth	r6, r6
        if(w > 0) {
 800cf44:	2e00      	cmp	r6, #0
 800cf46:	dd24      	ble.n	800cf92 <lv_draw_rect+0x4c6>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800cf48:	f9bd 2072 	ldrsh.w	r2, [sp, #114]	; 0x72
            lv_area_copy(&fa, &ca);
 800cf4c:	a81d      	add	r0, sp, #116	; 0x74
            sh_buf_tmp += corner_size * (a.y2 - ca.y2);
 800cf4e:	f9bd 706a 	ldrsh.w	r7, [sp, #106]	; 0x6a
            for(y = 0; y < h; y++) {
 800cf52:	f04f 0900 	mov.w	r9, #0
 800cf56:	f8bd 106e 	ldrh.w	r1, [sp, #110]	; 0x6e
 800cf5a:	f102 0a01 	add.w	sl, r2, #1
            sh_buf_tmp += corner_size * (a.y2 - ca.y2);
 800cf5e:	1abf      	subs	r7, r7, r2
            sh_buf_tmp = sh_buf + (ca.x1 - a.x1);
 800cf60:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 800cf64:	ebaa 0a01 	sub.w	sl, sl, r1
 800cf68:	1a9b      	subs	r3, r3, r2
            sh_buf_tmp += corner_size * (a.y2 - ca.y2);
 800cf6a:	9a06      	ldr	r2, [sp, #24]
 800cf6c:	fa0f f18a 	sxth.w	r1, sl
 800cf70:	fb02 3707 	mla	r7, r2, r7, r3
 800cf74:	9b07      	ldr	r3, [sp, #28]
 800cf76:	910e      	str	r1, [sp, #56]	; 0x38
            lv_area_copy(&fa, &ca);
 800cf78:	a91b      	add	r1, sp, #108	; 0x6c
            sh_buf_tmp += corner_size * (a.y2 - ca.y2);
 800cf7a:	441f      	add	r7, r3
            lv_area_copy(&fa, &ca);
 800cf7c:	f7ff fa16 	bl	800c3ac <lv_area_copy>
            fa.y1 = fa.y2;    /*Fill from bottom to top*/
 800cf80:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 800cf84:	4682      	mov	sl, r0
            fa.y1 = fa.y2;    /*Fill from bottom to top*/
 800cf86:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
            for(y = 0; y < h; y++) {
 800cf8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cf8c:	4599      	cmp	r9, r3
 800cf8e:	f2c0 80c8 	blt.w	800d122 <lv_draw_rect+0x656>
    a.x2 = sh_area.x2;
 800cf92:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	; 0x50
    has_com = _lv_area_intersect(&ca, &a, clip);
 800cf96:	465a      	mov	r2, fp
 800cf98:	a919      	add	r1, sp, #100	; 0x64
 800cf9a:	a81b      	add	r0, sp, #108	; 0x6c
    a.x2 = sh_area.x2;
 800cf9c:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    a.x1 = a.x2 - corner_size + 1;
 800cfa0:	3301      	adds	r3, #1
 800cfa2:	1b5b      	subs	r3, r3, r5
 800cfa4:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
    a.y1 = sh_area.y1 + corner_size;
 800cfa8:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 800cfac:	442b      	add	r3, r5
 800cfae:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
    a.y2 = sh_area.y2 - corner_size;
 800cfb2:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
 800cfb6:	1b5b      	subs	r3, r3, r5
 800cfb8:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
    has_com = _lv_area_intersect(&ca, &a, clip);
 800cfbc:	f009 ff6b 	bl	8016e96 <_lv_area_intersect>
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
 800cfc0:	2800      	cmp	r0, #0
 800cfc2:	d049      	beq.n	800d058 <lv_draw_rect+0x58c>
 800cfc4:	ee18 2a10 	vmov	r2, s16
 800cfc8:	a917      	add	r1, sp, #92	; 0x5c
 800cfca:	a819      	add	r0, sp, #100	; 0x64
 800cfcc:	f00a f862 	bl	8017094 <_lv_area_is_in>
 800cfd0:	2800      	cmp	r0, #0
 800cfd2:	d141      	bne.n	800d058 <lv_draw_rect+0x58c>
        if(ca.x1 <= w_half) ca.x1 = w_half + 1;
 800cfd4:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	; 0x6c
 800cfd8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cfda:	4293      	cmp	r3, r2
 800cfdc:	bfde      	ittt	le
 800cfde:	9b0d      	ldrle	r3, [sp, #52]	; 0x34
 800cfe0:	3301      	addle	r3, #1
 800cfe2:	f8ad 306c 	strhle.w	r3, [sp, #108]	; 0x6c
        if(simple_mode) ca.x1 = LV_MAX(ca.x1, coords->x2);
 800cfe6:	9b08      	ldr	r3, [sp, #32]
 800cfe8:	b14b      	cbz	r3, 800cffe <lv_draw_rect+0x532>
 800cfea:	9b05      	ldr	r3, [sp, #20]
 800cfec:	f9bd 206c 	ldrsh.w	r2, [sp, #108]	; 0x6c
 800cff0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800cff4:	4293      	cmp	r3, r2
 800cff6:	bfb8      	it	lt
 800cff8:	4613      	movlt	r3, r2
 800cffa:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800cffe:	f8bd 6070 	ldrh.w	r6, [sp, #112]	; 0x70
 800d002:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	; 0x6c
 800d006:	3601      	adds	r6, #1
 800d008:	1af6      	subs	r6, r6, r3
 800d00a:	b236      	sxth	r6, r6
        if(w > 0) {
 800d00c:	2e00      	cmp	r6, #0
 800d00e:	dd23      	ble.n	800d058 <lv_draw_rect+0x58c>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800d010:	f8bd a072 	ldrh.w	sl, [sp, #114]	; 0x72
            lv_area_copy(&fa, &ca);
 800d014:	a81d      	add	r0, sp, #116	; 0x74
 800d016:	f8bd 206e 	ldrh.w	r2, [sp, #110]	; 0x6e
 800d01a:	a91b      	add	r1, sp, #108	; 0x6c
 800d01c:	f10a 0a01 	add.w	sl, sl, #1
            for(y = 0; y < h; y++) {
 800d020:	f04f 0900 	mov.w	r9, #0
 800d024:	ebaa 0a02 	sub.w	sl, sl, r2
 800d028:	fa0f f28a 	sxth.w	r2, sl
 800d02c:	920d      	str	r2, [sp, #52]	; 0x34
            sh_buf_tmp = sh_buf + corner_size * (corner_size - 1);
 800d02e:	9a06      	ldr	r2, [sp, #24]
 800d030:	1e57      	subs	r7, r2, #1
            sh_buf_tmp += ca.x1 - a.x1;
 800d032:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 800d036:	1a9b      	subs	r3, r3, r2
 800d038:	9a06      	ldr	r2, [sp, #24]
 800d03a:	fb02 3707 	mla	r7, r2, r7, r3
 800d03e:	9b07      	ldr	r3, [sp, #28]
 800d040:	441f      	add	r7, r3
            lv_area_copy(&fa, &ca);
 800d042:	f7ff f9b3 	bl	800c3ac <lv_area_copy>
            fa.y2 = fa.y1;
 800d046:	f8bd 3076 	ldrh.w	r3, [sp, #118]	; 0x76
                _lv_blend_fill(clip, &fa,
 800d04a:	4682      	mov	sl, r0
            fa.y2 = fa.y1;
 800d04c:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
            for(y = 0; y < h; y++) {
 800d050:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d052:	4599      	cmp	r9, r3
 800d054:	f2c0 8091 	blt.w	800d17a <lv_draw_rect+0x6ae>
        for(x = 0; x < corner_size / 2; x++) {
 800d058:	9b06      	ldr	r3, [sp, #24]
 800d05a:	2000      	movs	r0, #0
    sh_buf = lv_mem_buf_get(corner_size * corner_size * sizeof(uint16_t));
 800d05c:	9a07      	ldr	r2, [sp, #28]
        for(x = 0; x < corner_size / 2; x++) {
 800d05e:	105f      	asrs	r7, r3, #1
 800d060:	e0c7      	b.n	800d1f2 <lv_draw_rect+0x726>
    shadow_blur_corner(size, sw, sh_buf);
 800d062:	b228      	sxth	r0, r5
 800d064:	4621      	mov	r1, r4
 800d066:	9a07      	ldr	r2, [sp, #28]
 800d068:	9008      	str	r0, [sp, #32]
 800d06a:	f7ff f9f6 	bl	800c45a <shadow_blur_corner>
    sw += sw_ori & 1;
 800d06e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d070:	4423      	add	r3, r4
    if(sw > 1) {
 800d072:	2b01      	cmp	r3, #1
    sw += sw_ori & 1;
 800d074:	4619      	mov	r1, r3
    if(sw > 1) {
 800d076:	dd0d      	ble.n	800d094 <lv_draw_rect+0x5c8>
        sh_buf[0] = (sh_buf[0] << SHADOW_UPSCALE_SHIFT) / sw;
 800d078:	9b07      	ldr	r3, [sp, #28]
        for(i = 1; i < (uint32_t) size * size; i++) {
 800d07a:	2401      	movs	r4, #1
        sh_buf[0] = (sh_buf[0] << SHADOW_UPSCALE_SHIFT) / sw;
 800d07c:	9a07      	ldr	r2, [sp, #28]
 800d07e:	881b      	ldrh	r3, [r3, #0]
        for(i = 1; i < (uint32_t) size * size; i++) {
 800d080:	9808      	ldr	r0, [sp, #32]
        sh_buf[0] = (sh_buf[0] << SHADOW_UPSCALE_SHIFT) / sw;
 800d082:	019b      	lsls	r3, r3, #6
 800d084:	fbb3 f3f1 	udiv	r3, r3, r1
 800d088:	8013      	strh	r3, [r2, #0]
        for(i = 1; i < (uint32_t) size * size; i++) {
 800d08a:	42b4      	cmp	r4, r6
 800d08c:	d304      	bcc.n	800d098 <lv_draw_rect+0x5cc>
        shadow_blur_corner(size, sw, sh_buf);
 800d08e:	9a07      	ldr	r2, [sp, #28]
 800d090:	f7ff f9e3 	bl	800c45a <shadow_blur_corner>
        for(i = 1; i < (uint32_t) size * size; i++) {
 800d094:	2300      	movs	r3, #0
 800d096:	e011      	b.n	800d0bc <lv_draw_rect+0x5f0>
            if(sh_buf[i] == sh_buf[i - 1]) sh_buf[i] = sh_buf[i - 1];
 800d098:	8853      	ldrh	r3, [r2, #2]
        for(i = 1; i < (uint32_t) size * size; i++) {
 800d09a:	3401      	adds	r4, #1
            if(sh_buf[i] == sh_buf[i - 1]) sh_buf[i] = sh_buf[i - 1];
 800d09c:	f832 5b02 	ldrh.w	r5, [r2], #2
 800d0a0:	42ab      	cmp	r3, r5
            else  sh_buf[i] = (sh_buf[i] << SHADOW_UPSCALE_SHIFT) / sw;
 800d0a2:	bf1e      	ittt	ne
 800d0a4:	019b      	lslne	r3, r3, #6
 800d0a6:	fbb3 f3f1 	udivne	r3, r3, r1
 800d0aa:	b29d      	uxthne	r5, r3
 800d0ac:	8015      	strh	r5, [r2, #0]
        for(i = 1; i < (uint32_t) size * size; i++) {
 800d0ae:	e7ec      	b.n	800d08a <lv_draw_rect+0x5be>
        res_buf[x] = sh_buf[x];
 800d0b0:	9a07      	ldr	r2, [sp, #28]
 800d0b2:	9907      	ldr	r1, [sp, #28]
 800d0b4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800d0b8:	54ca      	strb	r2, [r1, r3]
    for(x = 0; x < size * size; x++) {
 800d0ba:	3301      	adds	r3, #1
 800d0bc:	42b3      	cmp	r3, r6
 800d0be:	d1f7      	bne.n	800d0b0 <lv_draw_rect+0x5e4>
 800d0c0:	e65b      	b.n	800cd7a <lv_draw_rect+0x2ae>
    if(lv_draw_mask_get_cnt() > 0) simple_mode = false;
 800d0c2:	2300      	movs	r3, #0
 800d0c4:	e688      	b.n	800cdd8 <lv_draw_rect+0x30c>
 800d0c6:	9008      	str	r0, [sp, #32]
 800d0c8:	e687      	b.n	800cdda <lv_draw_rect+0x30e>
                lv_memcpy(mask_buf, sh_buf_tmp, w);
 800d0ca:	4631      	mov	r1, r6
 800d0cc:	463a      	mov	r2, r7
 800d0ce:	4620      	mov	r0, r4
            for(y = 0; y < h; y++) {
 800d0d0:	f109 0901 	add.w	r9, r9, #1
                lv_memcpy(mask_buf, sh_buf_tmp, w);
 800d0d4:	f00a fb68 	bl	80177a8 <lv_memcpy>
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
 800d0d8:	463b      	mov	r3, r7
 800d0da:	f9bd 2076 	ldrsh.w	r2, [sp, #118]	; 0x76
 800d0de:	4620      	mov	r0, r4
 800d0e0:	f9bd 1074 	ldrsh.w	r1, [sp, #116]	; 0x74
 800d0e4:	f7fe ffe2 	bl	800c0ac <lv_draw_mask_apply>
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 800d0e8:	f898 3002 	ldrb.w	r3, [r8, #2]
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
 800d0ec:	2801      	cmp	r0, #1
 800d0ee:	bf08      	it	eq
 800d0f0:	2002      	moveq	r0, #2
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 800d0f2:	f8b8 2028 	ldrh.w	r2, [r8, #40]	; 0x28
 800d0f6:	9302      	str	r3, [sp, #8]
 800d0f8:	4651      	mov	r1, sl
 800d0fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0fc:	e9cd 0300 	strd	r0, r3, [sp]
 800d100:	4623      	mov	r3, r4
 800d102:	4658      	mov	r0, fp
 800d104:	f7fc f88c 	bl	8009220 <_lv_blend_fill>
                fa.y1++;
 800d108:	f8bd 3076 	ldrh.w	r3, [sp, #118]	; 0x76
 800d10c:	3301      	adds	r3, #1
 800d10e:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
                fa.y2++;
 800d112:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
 800d116:	3301      	adds	r3, #1
 800d118:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
                sh_buf_tmp += corner_size;
 800d11c:	9b06      	ldr	r3, [sp, #24]
 800d11e:	441e      	add	r6, r3
            for(y = 0; y < h; y++) {
 800d120:	e6d4      	b.n	800cecc <lv_draw_rect+0x400>
                lv_memcpy(mask_buf, sh_buf_tmp, w);
 800d122:	4639      	mov	r1, r7
 800d124:	4632      	mov	r2, r6
 800d126:	4620      	mov	r0, r4
            for(y = 0; y < h; y++) {
 800d128:	f109 0901 	add.w	r9, r9, #1
                lv_memcpy(mask_buf, sh_buf_tmp, w);
 800d12c:	f00a fb3c 	bl	80177a8 <lv_memcpy>
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
 800d130:	4633      	mov	r3, r6
 800d132:	f9bd 2076 	ldrsh.w	r2, [sp, #118]	; 0x76
 800d136:	4620      	mov	r0, r4
 800d138:	f9bd 1074 	ldrsh.w	r1, [sp, #116]	; 0x74
 800d13c:	f7fe ffb6 	bl	800c0ac <lv_draw_mask_apply>
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 800d140:	f898 3002 	ldrb.w	r3, [r8, #2]
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
 800d144:	2801      	cmp	r0, #1
 800d146:	bf08      	it	eq
 800d148:	2002      	moveq	r0, #2
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 800d14a:	f8b8 2028 	ldrh.w	r2, [r8, #40]	; 0x28
 800d14e:	9302      	str	r3, [sp, #8]
 800d150:	4651      	mov	r1, sl
 800d152:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d154:	e9cd 0300 	strd	r0, r3, [sp]
 800d158:	4623      	mov	r3, r4
 800d15a:	4658      	mov	r0, fp
 800d15c:	f7fc f860 	bl	8009220 <_lv_blend_fill>
                fa.y1--;
 800d160:	f8bd 3076 	ldrh.w	r3, [sp, #118]	; 0x76
 800d164:	3b01      	subs	r3, #1
 800d166:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
                fa.y2--;
 800d16a:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
 800d16e:	3b01      	subs	r3, #1
 800d170:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
                sh_buf_tmp += corner_size;
 800d174:	9b06      	ldr	r3, [sp, #24]
 800d176:	441f      	add	r7, r3
            for(y = 0; y < h; y++) {
 800d178:	e707      	b.n	800cf8a <lv_draw_rect+0x4be>
                lv_memcpy(mask_buf, sh_buf_tmp, w);
 800d17a:	4632      	mov	r2, r6
 800d17c:	4639      	mov	r1, r7
 800d17e:	4620      	mov	r0, r4
 800d180:	f00a fb12 	bl	80177a8 <lv_memcpy>
                if(simple_mode) {
 800d184:	9b08      	ldr	r3, [sp, #32]
 800d186:	b94b      	cbnz	r3, 800d19c <lv_draw_rect+0x6d0>
                    mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
 800d188:	4633      	mov	r3, r6
 800d18a:	f9bd 2076 	ldrsh.w	r2, [sp, #118]	; 0x76
 800d18e:	f9bd 1074 	ldrsh.w	r1, [sp, #116]	; 0x74
 800d192:	4620      	mov	r0, r4
 800d194:	f7fe ff8a 	bl	800c0ac <lv_draw_mask_apply>
                    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
 800d198:	2801      	cmp	r0, #1
 800d19a:	d100      	bne.n	800d19e <lv_draw_rect+0x6d2>
 800d19c:	2002      	movs	r0, #2
                _lv_blend_fill(clip, &fa,
 800d19e:	f898 3002 	ldrb.w	r3, [r8, #2]
 800d1a2:	4651      	mov	r1, sl
 800d1a4:	f8b8 2028 	ldrh.w	r2, [r8, #40]	; 0x28
            for(y = 0; y < h; y++) {
 800d1a8:	f109 0901 	add.w	r9, r9, #1
                _lv_blend_fill(clip, &fa,
 800d1ac:	9302      	str	r3, [sp, #8]
 800d1ae:	f898 3032 	ldrb.w	r3, [r8, #50]	; 0x32
 800d1b2:	e9cd 0300 	strd	r0, r3, [sp]
 800d1b6:	4623      	mov	r3, r4
 800d1b8:	4658      	mov	r0, fp
 800d1ba:	f7fc f831 	bl	8009220 <_lv_blend_fill>
                fa.y1++;
 800d1be:	f8bd 3076 	ldrh.w	r3, [sp, #118]	; 0x76
 800d1c2:	3301      	adds	r3, #1
 800d1c4:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
                fa.y2++;
 800d1c8:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
 800d1cc:	3301      	adds	r3, #1
 800d1ce:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
            for(y = 0; y < h; y++) {
 800d1d2:	e73d      	b.n	800d050 <lv_draw_rect+0x584>
            lv_opa_t tmp = sh_buf_tmp[x];
 800d1d4:	f811 cf01 	ldrb.w	ip, [r1, #1]!
            sh_buf_tmp[x] = sh_buf_tmp[corner_size - x - 1];
 800d1d8:	f813 ed01 	ldrb.w	lr, [r3, #-1]!
 800d1dc:	f881 e000 	strb.w	lr, [r1]
            sh_buf_tmp[corner_size - x - 1] = tmp;
 800d1e0:	f883 c000 	strb.w	ip, [r3]
        for(x = 0; x < corner_size / 2; x++) {
 800d1e4:	eba6 0c03 	sub.w	ip, r6, r3
 800d1e8:	4567      	cmp	r7, ip
 800d1ea:	dcf3      	bgt.n	800d1d4 <lv_draw_rect+0x708>
        sh_buf_tmp += corner_size;
 800d1ec:	9b06      	ldr	r3, [sp, #24]
    for(y = 0; y < corner_size; y++) {
 800d1ee:	3001      	adds	r0, #1
        sh_buf_tmp += corner_size;
 800d1f0:	441a      	add	r2, r3
    for(y = 0; y < corner_size; y++) {
 800d1f2:	9b06      	ldr	r3, [sp, #24]
 800d1f4:	4283      	cmp	r3, r0
 800d1f6:	dd03      	ble.n	800d200 <lv_draw_rect+0x734>
 800d1f8:	18d6      	adds	r6, r2, r3
 800d1fa:	1e51      	subs	r1, r2, #1
 800d1fc:	4633      	mov	r3, r6
 800d1fe:	e7f1      	b.n	800d1e4 <lv_draw_rect+0x718>
    a.x1 = sh_area.x1;
 800d200:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
    has_com = _lv_area_intersect(&ca, &a, clip);
 800d204:	465a      	mov	r2, fp
 800d206:	a919      	add	r1, sp, #100	; 0x64
 800d208:	a81b      	add	r0, sp, #108	; 0x6c
    a.x1 = sh_area.x1;
 800d20a:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
    a.x2 = a.x1 + corner_size - 1;
 800d20e:	3b01      	subs	r3, #1
 800d210:	442b      	add	r3, r5
 800d212:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    a.y1 = sh_area.y1;
 800d216:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 800d21a:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
    a.y2 = a.y1 + corner_size - 1;
 800d21e:	3b01      	subs	r3, #1
 800d220:	442b      	add	r3, r5
 800d222:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
    has_com = _lv_area_intersect(&ca, &a, clip);
 800d226:	f009 fe36 	bl	8016e96 <_lv_area_intersect>
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
 800d22a:	2800      	cmp	r0, #0
 800d22c:	d047      	beq.n	800d2be <lv_draw_rect+0x7f2>
 800d22e:	ee18 2a10 	vmov	r2, s16
 800d232:	a917      	add	r1, sp, #92	; 0x5c
 800d234:	a819      	add	r0, sp, #100	; 0x64
 800d236:	f009 ff2d 	bl	8017094 <_lv_area_is_in>
 800d23a:	2800      	cmp	r0, #0
 800d23c:	d13f      	bne.n	800d2be <lv_draw_rect+0x7f2>
        if(ca.y2 > h_half) ca.y2 = h_half;
 800d23e:	f9bd 3072 	ldrsh.w	r3, [sp, #114]	; 0x72
 800d242:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d244:	4293      	cmp	r3, r2
 800d246:	bfc8      	it	gt
 800d248:	4613      	movgt	r3, r2
        if(ca.x2 > w_half) ca.x2 = w_half;
 800d24a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
        if(ca.y2 > h_half) ca.y2 = h_half;
 800d24c:	bfc8      	it	gt
 800d24e:	f8ad 3072 	strhgt.w	r3, [sp, #114]	; 0x72
        if(ca.x2 > w_half) ca.x2 = w_half;
 800d252:	f9bd 3070 	ldrsh.w	r3, [sp, #112]	; 0x70
 800d256:	4293      	cmp	r3, r2
 800d258:	bfc8      	it	gt
 800d25a:	4613      	movgt	r3, r2
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800d25c:	f9bd 206c 	ldrsh.w	r2, [sp, #108]	; 0x6c
 800d260:	bfc8      	it	gt
 800d262:	f8ad 3070 	strhgt.w	r3, [sp, #112]	; 0x70
 800d266:	f8bd 7070 	ldrh.w	r7, [sp, #112]	; 0x70
 800d26a:	3701      	adds	r7, #1
 800d26c:	1abf      	subs	r7, r7, r2
 800d26e:	b23f      	sxth	r7, r7
        if(w > 0) {
 800d270:	2f00      	cmp	r7, #0
 800d272:	dd24      	ble.n	800d2be <lv_draw_rect+0x7f2>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800d274:	f8bd a072 	ldrh.w	sl, [sp, #114]	; 0x72
            lv_area_copy(&fa, &ca);
 800d278:	a81d      	add	r0, sp, #116	; 0x74
 800d27a:	f9bd 306e 	ldrsh.w	r3, [sp, #110]	; 0x6e
            for(y = 0; y < h; y++) {
 800d27e:	f04f 0900 	mov.w	r9, #0
            sh_buf_tmp += corner_size * (ca.y1 - a.y1);
 800d282:	f9bd 6066 	ldrsh.w	r6, [sp, #102]	; 0x66
 800d286:	f10a 0a01 	add.w	sl, sl, #1
 800d28a:	1b9e      	subs	r6, r3, r6
 800d28c:	ebaa 0a03 	sub.w	sl, sl, r3
            sh_buf_tmp = sh_buf + (ca.x1 - a.x1);
 800d290:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	; 0x64
 800d294:	fa0f f18a 	sxth.w	r1, sl
 800d298:	1ad2      	subs	r2, r2, r3
            sh_buf_tmp += corner_size * (ca.y1 - a.y1);
 800d29a:	9b06      	ldr	r3, [sp, #24]
 800d29c:	910d      	str	r1, [sp, #52]	; 0x34
            lv_area_copy(&fa, &ca);
 800d29e:	a91b      	add	r1, sp, #108	; 0x6c
            sh_buf_tmp += corner_size * (ca.y1 - a.y1);
 800d2a0:	fb03 2606 	mla	r6, r3, r6, r2
 800d2a4:	9b07      	ldr	r3, [sp, #28]
 800d2a6:	441e      	add	r6, r3
            lv_area_copy(&fa, &ca);
 800d2a8:	f7ff f880 	bl	800c3ac <lv_area_copy>
            fa.y2 = fa.y1;
 800d2ac:	f8bd 3076 	ldrh.w	r3, [sp, #118]	; 0x76
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 800d2b0:	4682      	mov	sl, r0
            fa.y2 = fa.y1;
 800d2b2:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
            for(y = 0; y < h; y++) {
 800d2b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d2b8:	4599      	cmp	r9, r3
 800d2ba:	f2c0 839b 	blt.w	800d9f4 <lv_draw_rect+0xf28>
    a.x1 = sh_area.x1;
 800d2be:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
    has_com = _lv_area_intersect(&ca, &a, clip);
 800d2c2:	a919      	add	r1, sp, #100	; 0x64
    a.y1 = sh_area.y2 - corner_size + 1;
 800d2c4:	f9bd 2052 	ldrsh.w	r2, [sp, #82]	; 0x52
    has_com = _lv_area_intersect(&ca, &a, clip);
 800d2c8:	a81b      	add	r0, sp, #108	; 0x6c
    a.x1 = sh_area.x1;
 800d2ca:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
    a.x2 = a.x1 + corner_size - 1;
 800d2ce:	3b01      	subs	r3, #1
    a.y2 = sh_area.y2;
 800d2d0:	f8ad 206a 	strh.w	r2, [sp, #106]	; 0x6a
    a.x2 = a.x1 + corner_size - 1;
 800d2d4:	442b      	add	r3, r5
 800d2d6:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    a.y1 = sh_area.y2 - corner_size + 1;
 800d2da:	1c53      	adds	r3, r2, #1
    has_com = _lv_area_intersect(&ca, &a, clip);
 800d2dc:	465a      	mov	r2, fp
    a.y1 = sh_area.y2 - corner_size + 1;
 800d2de:	1b5b      	subs	r3, r3, r5
 800d2e0:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
    has_com = _lv_area_intersect(&ca, &a, clip);
 800d2e4:	f009 fdd7 	bl	8016e96 <_lv_area_intersect>
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
 800d2e8:	2800      	cmp	r0, #0
 800d2ea:	d046      	beq.n	800d37a <lv_draw_rect+0x8ae>
 800d2ec:	ee18 2a10 	vmov	r2, s16
 800d2f0:	a917      	add	r1, sp, #92	; 0x5c
 800d2f2:	a819      	add	r0, sp, #100	; 0x64
 800d2f4:	f009 fece 	bl	8017094 <_lv_area_is_in>
 800d2f8:	2800      	cmp	r0, #0
 800d2fa:	d13e      	bne.n	800d37a <lv_draw_rect+0x8ae>
        if(ca.y1 <= h_half) ca.y1 = h_half + 1;
 800d2fc:	f9bd 306e 	ldrsh.w	r3, [sp, #110]	; 0x6e
 800d300:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d302:	4293      	cmp	r3, r2
        if(ca.x2 > w_half) ca.x2 = w_half;
 800d304:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
        if(ca.y1 <= h_half) ca.y1 = h_half + 1;
 800d306:	bfde      	ittt	le
 800d308:	9b0c      	ldrle	r3, [sp, #48]	; 0x30
 800d30a:	3301      	addle	r3, #1
 800d30c:	f8ad 306e 	strhle.w	r3, [sp, #110]	; 0x6e
        if(ca.x2 > w_half) ca.x2 = w_half;
 800d310:	f9bd 3070 	ldrsh.w	r3, [sp, #112]	; 0x70
 800d314:	4293      	cmp	r3, r2
 800d316:	bfc4      	itt	gt
 800d318:	4613      	movgt	r3, r2
 800d31a:	f8ad 3070 	strhgt.w	r3, [sp, #112]	; 0x70
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800d31e:	f8bd 6070 	ldrh.w	r6, [sp, #112]	; 0x70
 800d322:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	; 0x6c
 800d326:	3601      	adds	r6, #1
 800d328:	1af6      	subs	r6, r6, r3
 800d32a:	b236      	sxth	r6, r6
        if(w > 0) {
 800d32c:	2e00      	cmp	r6, #0
 800d32e:	dd24      	ble.n	800d37a <lv_draw_rect+0x8ae>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800d330:	f9bd 2072 	ldrsh.w	r2, [sp, #114]	; 0x72
            lv_area_copy(&fa, &ca);
 800d334:	a81d      	add	r0, sp, #116	; 0x74
            sh_buf_tmp += corner_size * (a.y2 - ca.y2);
 800d336:	f9bd 706a 	ldrsh.w	r7, [sp, #106]	; 0x6a
            for(y = 0; y < h; y++) {
 800d33a:	f04f 0900 	mov.w	r9, #0
 800d33e:	f8bd 106e 	ldrh.w	r1, [sp, #110]	; 0x6e
 800d342:	f102 0a01 	add.w	sl, r2, #1
            sh_buf_tmp += corner_size * (a.y2 - ca.y2);
 800d346:	1abf      	subs	r7, r7, r2
            sh_buf_tmp = sh_buf + (ca.x1 - a.x1);
 800d348:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 800d34c:	ebaa 0a01 	sub.w	sl, sl, r1
 800d350:	1a9b      	subs	r3, r3, r2
            sh_buf_tmp += corner_size * (a.y2 - ca.y2);
 800d352:	9a06      	ldr	r2, [sp, #24]
 800d354:	fa0f f18a 	sxth.w	r1, sl
 800d358:	fb02 3707 	mla	r7, r2, r7, r3
 800d35c:	9b07      	ldr	r3, [sp, #28]
 800d35e:	910d      	str	r1, [sp, #52]	; 0x34
            lv_area_copy(&fa, &ca);
 800d360:	a91b      	add	r1, sp, #108	; 0x6c
            sh_buf_tmp += corner_size * (a.y2 - ca.y2);
 800d362:	441f      	add	r7, r3
            lv_area_copy(&fa, &ca);
 800d364:	f7ff f822 	bl	800c3ac <lv_area_copy>
            fa.y1 = fa.y2;    /*Fill from bottom to top*/
 800d368:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 800d36c:	4682      	mov	sl, r0
            fa.y1 = fa.y2;    /*Fill from bottom to top*/
 800d36e:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
            for(y = 0; y < h; y++) {
 800d372:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d374:	4599      	cmp	r9, r3
 800d376:	f2c0 8369 	blt.w	800da4c <lv_draw_rect+0xf80>
    a.x1 = sh_area.x1;
 800d37a:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
    has_com = _lv_area_intersect(&ca, &a, clip);
 800d37e:	465a      	mov	r2, fp
 800d380:	a919      	add	r1, sp, #100	; 0x64
 800d382:	a81b      	add	r0, sp, #108	; 0x6c
    a.x1 = sh_area.x1;
 800d384:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
    a.x2 = a.x1 + corner_size - 1;
 800d388:	3b01      	subs	r3, #1
 800d38a:	442b      	add	r3, r5
 800d38c:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    a.y1 = sh_area.y1 + corner_size;
 800d390:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 800d394:	442b      	add	r3, r5
 800d396:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
    a.y2 = sh_area.y2 - corner_size;
 800d39a:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
 800d39e:	1b5b      	subs	r3, r3, r5
 800d3a0:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
    has_com = _lv_area_intersect(&ca, &a, clip);
 800d3a4:	f009 fd77 	bl	8016e96 <_lv_area_intersect>
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
 800d3a8:	2800      	cmp	r0, #0
 800d3aa:	d048      	beq.n	800d43e <lv_draw_rect+0x972>
 800d3ac:	ee18 2a10 	vmov	r2, s16
 800d3b0:	a917      	add	r1, sp, #92	; 0x5c
 800d3b2:	a819      	add	r0, sp, #100	; 0x64
 800d3b4:	f009 fe6e 	bl	8017094 <_lv_area_is_in>
 800d3b8:	2800      	cmp	r0, #0
 800d3ba:	d140      	bne.n	800d43e <lv_draw_rect+0x972>
        if(ca.x2 > w_half) ca.x2 = w_half;
 800d3bc:	f9bd 3070 	ldrsh.w	r3, [sp, #112]	; 0x70
 800d3c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d3c2:	4293      	cmp	r3, r2
 800d3c4:	bfc4      	itt	gt
 800d3c6:	4613      	movgt	r3, r2
 800d3c8:	f8ad 3070 	strhgt.w	r3, [sp, #112]	; 0x70
        if(simple_mode) ca.x2 = LV_MIN(coords->x1, ca.x2);
 800d3cc:	9b08      	ldr	r3, [sp, #32]
 800d3ce:	b14b      	cbz	r3, 800d3e4 <lv_draw_rect+0x918>
 800d3d0:	9b05      	ldr	r3, [sp, #20]
 800d3d2:	f9bd 2070 	ldrsh.w	r2, [sp, #112]	; 0x70
 800d3d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d3da:	4293      	cmp	r3, r2
 800d3dc:	bfa8      	it	ge
 800d3de:	4613      	movge	r3, r2
 800d3e0:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800d3e4:	f8bd 6070 	ldrh.w	r6, [sp, #112]	; 0x70
 800d3e8:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	; 0x6c
 800d3ec:	3601      	adds	r6, #1
 800d3ee:	1af6      	subs	r6, r6, r3
 800d3f0:	b236      	sxth	r6, r6
        if(w > 0) {
 800d3f2:	2e00      	cmp	r6, #0
 800d3f4:	dd23      	ble.n	800d43e <lv_draw_rect+0x972>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800d3f6:	f8bd a072 	ldrh.w	sl, [sp, #114]	; 0x72
            lv_area_copy(&fa, &ca);
 800d3fa:	a81d      	add	r0, sp, #116	; 0x74
 800d3fc:	f8bd 206e 	ldrh.w	r2, [sp, #110]	; 0x6e
 800d400:	a91b      	add	r1, sp, #108	; 0x6c
 800d402:	f10a 0a01 	add.w	sl, sl, #1
            for(y = 0; y < h; y++) {
 800d406:	f04f 0900 	mov.w	r9, #0
 800d40a:	ebaa 0a02 	sub.w	sl, sl, r2
 800d40e:	fa0f f28a 	sxth.w	r2, sl
 800d412:	920b      	str	r2, [sp, #44]	; 0x2c
            sh_buf_tmp = sh_buf + corner_size * (corner_size - 1);
 800d414:	9a06      	ldr	r2, [sp, #24]
 800d416:	1e57      	subs	r7, r2, #1
            sh_buf_tmp += ca.x1 - a.x1;
 800d418:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 800d41c:	1a9b      	subs	r3, r3, r2
 800d41e:	9a06      	ldr	r2, [sp, #24]
 800d420:	fb02 3707 	mla	r7, r2, r7, r3
 800d424:	9b07      	ldr	r3, [sp, #28]
 800d426:	441f      	add	r7, r3
            lv_area_copy(&fa, &ca);
 800d428:	f7fe ffc0 	bl	800c3ac <lv_area_copy>
            fa.y2 = fa.y1;
 800d42c:	f8bd 3076 	ldrh.w	r3, [sp, #118]	; 0x76
                _lv_blend_fill(clip, &fa,
 800d430:	4682      	mov	sl, r0
            fa.y2 = fa.y1;
 800d432:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
            for(y = 0; y < h; y++) {
 800d436:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d438:	4599      	cmp	r9, r3
 800d43a:	f2c0 8333 	blt.w	800daa4 <lv_draw_rect+0xfd8>
    a.x1 = sh_area.x1 + corner_size;
 800d43e:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
    has_com = _lv_area_intersect(&ca, &a, clip);
 800d442:	465a      	mov	r2, fp
 800d444:	a919      	add	r1, sp, #100	; 0x64
 800d446:	a81b      	add	r0, sp, #108	; 0x6c
    a.x1 = sh_area.x1 + corner_size;
 800d448:	442b      	add	r3, r5
 800d44a:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
    a.x2 = sh_area.x2 - corner_size;
 800d44e:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 800d452:	1b5b      	subs	r3, r3, r5
 800d454:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    a.y1 = sh_area.y1;
 800d458:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 800d45c:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
    a.y2 = sh_area.y1 + corner_size - 1;
 800d460:	3b01      	subs	r3, #1
 800d462:	442b      	add	r3, r5
 800d464:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
    has_com = _lv_area_intersect(&ca, &a, clip);
 800d468:	f009 fd15 	bl	8016e96 <_lv_area_intersect>
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
 800d46c:	2800      	cmp	r0, #0
 800d46e:	d043      	beq.n	800d4f8 <lv_draw_rect+0xa2c>
 800d470:	ee18 2a10 	vmov	r2, s16
 800d474:	a917      	add	r1, sp, #92	; 0x5c
 800d476:	a819      	add	r0, sp, #100	; 0x64
 800d478:	f009 fe0c 	bl	8017094 <_lv_area_is_in>
 800d47c:	2800      	cmp	r0, #0
 800d47e:	d13b      	bne.n	800d4f8 <lv_draw_rect+0xa2c>
        if(ca.y2 > h_half) ca.y2 = h_half;
 800d480:	f9bd 3072 	ldrsh.w	r3, [sp, #114]	; 0x72
 800d484:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d486:	4293      	cmp	r3, r2
 800d488:	bfc4      	itt	gt
 800d48a:	4613      	movgt	r3, r2
 800d48c:	f8ad 3072 	strhgt.w	r3, [sp, #114]	; 0x72
        if(simple_mode) ca.y2 = LV_MIN(ca.y2, coords->y1);
 800d490:	9b08      	ldr	r3, [sp, #32]
 800d492:	b14b      	cbz	r3, 800d4a8 <lv_draw_rect+0x9dc>
 800d494:	9b05      	ldr	r3, [sp, #20]
 800d496:	f9bd 2072 	ldrsh.w	r2, [sp, #114]	; 0x72
 800d49a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800d49e:	4293      	cmp	r3, r2
 800d4a0:	bfa8      	it	ge
 800d4a2:	4613      	movge	r3, r2
 800d4a4:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800d4a8:	f8bd 7070 	ldrh.w	r7, [sp, #112]	; 0x70
        lv_area_copy(&fa, &ca);
 800d4ac:	a81d      	add	r0, sp, #116	; 0x74
 800d4ae:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
 800d4b2:	a91b      	add	r1, sp, #108	; 0x6c
 800d4b4:	3701      	adds	r7, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800d4b6:	f9bd 606e 	ldrsh.w	r6, [sp, #110]	; 0x6e
        sh_buf_tmp += corner_size * (ca.y1 - a.y1);
 800d4ba:	9a06      	ldr	r2, [sp, #24]
        for(y = 0; y < h; y++) {
 800d4bc:	f04f 0900 	mov.w	r9, #0
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800d4c0:	1aff      	subs	r7, r7, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800d4c2:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
 800d4c6:	3301      	adds	r3, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800d4c8:	b23f      	sxth	r7, r7
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800d4ca:	1b9b      	subs	r3, r3, r6
 800d4cc:	b21b      	sxth	r3, r3
 800d4ce:	930b      	str	r3, [sp, #44]	; 0x2c
        sh_buf_tmp += corner_size * (ca.y1 - a.y1);
 800d4d0:	f9bd 3066 	ldrsh.w	r3, [sp, #102]	; 0x66
 800d4d4:	1af6      	subs	r6, r6, r3
        sh_buf_tmp = sh_buf + corner_size - 1;
 800d4d6:	9b06      	ldr	r3, [sp, #24]
 800d4d8:	3b01      	subs	r3, #1
        sh_buf_tmp += corner_size * (ca.y1 - a.y1);
 800d4da:	fb02 3606 	mla	r6, r2, r6, r3
 800d4de:	9b07      	ldr	r3, [sp, #28]
 800d4e0:	441e      	add	r6, r3
        lv_area_copy(&fa, &ca);
 800d4e2:	f7fe ff63 	bl	800c3ac <lv_area_copy>
        fa.y2 = fa.y1;
 800d4e6:	f8bd 3076 	ldrh.w	r3, [sp, #118]	; 0x76
            _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 800d4ea:	4682      	mov	sl, r0
        fa.y2 = fa.y1;
 800d4ec:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
        for(y = 0; y < h; y++) {
 800d4f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d4f2:	4599      	cmp	r9, r3
 800d4f4:	f2c0 8303 	blt.w	800dafe <lv_draw_rect+0x1032>
    a.x1 = sh_area.x1 + corner_size;
 800d4f8:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
    has_com = _lv_area_intersect(&ca, &a, clip);
 800d4fc:	a919      	add	r1, sp, #100	; 0x64
    a.y1 = sh_area.y2 - corner_size + 1;
 800d4fe:	f9bd 2052 	ldrsh.w	r2, [sp, #82]	; 0x52
    has_com = _lv_area_intersect(&ca, &a, clip);
 800d502:	a81b      	add	r0, sp, #108	; 0x6c
    a.x1 = sh_area.x1 + corner_size;
 800d504:	442b      	add	r3, r5
    a.y2 = sh_area.y2;
 800d506:	f8ad 206a 	strh.w	r2, [sp, #106]	; 0x6a
    a.x1 = sh_area.x1 + corner_size;
 800d50a:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
    a.x2 = sh_area.x2 - corner_size;
 800d50e:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 800d512:	1b5b      	subs	r3, r3, r5
 800d514:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    a.y1 = sh_area.y2 - corner_size + 1;
 800d518:	1c53      	adds	r3, r2, #1
    has_com = _lv_area_intersect(&ca, &a, clip);
 800d51a:	465a      	mov	r2, fp
    a.y1 = sh_area.y2 - corner_size + 1;
 800d51c:	1b5b      	subs	r3, r3, r5
 800d51e:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
    has_com = _lv_area_intersect(&ca, &a, clip);
 800d522:	f009 fcb8 	bl	8016e96 <_lv_area_intersect>
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
 800d526:	2800      	cmp	r0, #0
 800d528:	d044      	beq.n	800d5b4 <lv_draw_rect+0xae8>
 800d52a:	ee18 2a10 	vmov	r2, s16
 800d52e:	a917      	add	r1, sp, #92	; 0x5c
 800d530:	a819      	add	r0, sp, #100	; 0x64
 800d532:	f009 fdaf 	bl	8017094 <_lv_area_is_in>
 800d536:	2800      	cmp	r0, #0
 800d538:	d13c      	bne.n	800d5b4 <lv_draw_rect+0xae8>
        if(ca.y1 <= h_half) ca.y1 = h_half + 1;
 800d53a:	f9bd 306e 	ldrsh.w	r3, [sp, #110]	; 0x6e
 800d53e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d540:	4293      	cmp	r3, r2
 800d542:	bfde      	ittt	le
 800d544:	9b0c      	ldrle	r3, [sp, #48]	; 0x30
 800d546:	3301      	addle	r3, #1
 800d548:	f8ad 306e 	strhle.w	r3, [sp, #110]	; 0x6e
        if(simple_mode) ca.y1 = LV_MAX(ca.y1, coords->y2);
 800d54c:	9b08      	ldr	r3, [sp, #32]
 800d54e:	b14b      	cbz	r3, 800d564 <lv_draw_rect+0xa98>
 800d550:	9b05      	ldr	r3, [sp, #20]
 800d552:	f9bd 206e 	ldrsh.w	r2, [sp, #110]	; 0x6e
 800d556:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d55a:	4293      	cmp	r3, r2
 800d55c:	bfb8      	it	lt
 800d55e:	4613      	movlt	r3, r2
 800d560:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800d564:	f8bd 7070 	ldrh.w	r7, [sp, #112]	; 0x70
        lv_area_copy(&fa, &ca);
 800d568:	a81d      	add	r0, sp, #116	; 0x74
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800d56a:	f9bd 2072 	ldrsh.w	r2, [sp, #114]	; 0x72
        for(y = 0; y < h; y++) {
 800d56e:	f04f 0900 	mov.w	r9, #0
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800d572:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
 800d576:	3701      	adds	r7, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800d578:	f8bd 106e 	ldrh.w	r1, [sp, #110]	; 0x6e
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800d57c:	1aff      	subs	r7, r7, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800d57e:	1c53      	adds	r3, r2, #1
        sh_buf_tmp += corner_size * (a.y2 - ca.y2);
 800d580:	f9bd 606a 	ldrsh.w	r6, [sp, #106]	; 0x6a
 800d584:	1a5b      	subs	r3, r3, r1
        lv_area_copy(&fa, &ca);
 800d586:	a91b      	add	r1, sp, #108	; 0x6c
        sh_buf_tmp += corner_size * (a.y2 - ca.y2);
 800d588:	1ab6      	subs	r6, r6, r2
 800d58a:	9a06      	ldr	r2, [sp, #24]
 800d58c:	b21b      	sxth	r3, r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800d58e:	b23f      	sxth	r7, r7
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800d590:	930a      	str	r3, [sp, #40]	; 0x28
        sh_buf_tmp = sh_buf + corner_size - 1;
 800d592:	9b06      	ldr	r3, [sp, #24]
 800d594:	3b01      	subs	r3, #1
        sh_buf_tmp += corner_size * (a.y2 - ca.y2);
 800d596:	fb02 3606 	mla	r6, r2, r6, r3
 800d59a:	9b07      	ldr	r3, [sp, #28]
 800d59c:	441e      	add	r6, r3
        lv_area_copy(&fa, &ca);
 800d59e:	f7fe ff05 	bl	800c3ac <lv_area_copy>
        fa.y1 = fa.y2;
 800d5a2:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
            _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 800d5a6:	4682      	mov	sl, r0
        fa.y1 = fa.y2;
 800d5a8:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
        for(y = 0; y < h; y++) {
 800d5ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d5ae:	4599      	cmp	r9, r3
 800d5b0:	f2c0 82dd 	blt.w	800db6e <lv_draw_rect+0x10a2>
    a.x1 = sh_area.x1 + corner_size;
 800d5b4:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
    has_com = _lv_area_intersect(&ca, &a, clip);
 800d5b8:	465a      	mov	r2, fp
 800d5ba:	a919      	add	r1, sp, #100	; 0x64
 800d5bc:	a81b      	add	r0, sp, #108	; 0x6c
    a.x1 = sh_area.x1 + corner_size;
 800d5be:	442b      	add	r3, r5
 800d5c0:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
    a.x2 = sh_area.x2 - corner_size;
 800d5c4:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 800d5c8:	1b5b      	subs	r3, r3, r5
 800d5ca:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    a.y1 = sh_area.y1 + corner_size;
 800d5ce:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 800d5d2:	442b      	add	r3, r5
 800d5d4:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
    a.y2 = sh_area.y2 - corner_size;
 800d5d8:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
 800d5dc:	1b5b      	subs	r3, r3, r5
 800d5de:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
    has_com = _lv_area_intersect(&ca, &a, clip);
 800d5e2:	f009 fc58 	bl	8016e96 <_lv_area_intersect>
    if(has_com && simple_mode == false &&  _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
 800d5e6:	b320      	cbz	r0, 800d632 <lv_draw_rect+0xb66>
 800d5e8:	9b08      	ldr	r3, [sp, #32]
 800d5ea:	bb13      	cbnz	r3, 800d632 <lv_draw_rect+0xb66>
 800d5ec:	ee18 2a10 	vmov	r2, s16
 800d5f0:	a917      	add	r1, sp, #92	; 0x5c
 800d5f2:	a819      	add	r0, sp, #100	; 0x64
 800d5f4:	f009 fd4e 	bl	8017094 <_lv_area_is_in>
 800d5f8:	b9d8      	cbnz	r0, 800d632 <lv_draw_rect+0xb66>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800d5fa:	f8bd 6070 	ldrh.w	r6, [sp, #112]	; 0x70
        lv_area_copy(&fa, &ca);
 800d5fe:	a91b      	add	r1, sp, #108	; 0x6c
 800d600:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
 800d604:	a81d      	add	r0, sp, #116	; 0x74
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800d606:	f8bd 7072 	ldrh.w	r7, [sp, #114]	; 0x72
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800d60a:	3601      	adds	r6, #1
            _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 800d60c:	f04f 09ff 	mov.w	r9, #255	; 0xff
 800d610:	1af6      	subs	r6, r6, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800d612:	3701      	adds	r7, #1
 800d614:	f8bd 306e 	ldrh.w	r3, [sp, #110]	; 0x6e
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800d618:	b236      	sxth	r6, r6
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800d61a:	1aff      	subs	r7, r7, r3
        lv_area_copy(&fa, &ca);
 800d61c:	f7fe fec6 	bl	800c3ac <lv_area_copy>
        fa.y2 = fa.y1;
 800d620:	f8bd 3076 	ldrh.w	r3, [sp, #118]	; 0x76
 800d624:	b23f      	sxth	r7, r7
        for(y = 0; y < h; y++) {
 800d626:	9d08      	ldr	r5, [sp, #32]
        fa.y2 = fa.y1;
 800d628:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
        for(y = 0; y < h; y++) {
 800d62c:	42bd      	cmp	r5, r7
 800d62e:	f2c0 82d6 	blt.w	800dbde <lv_draw_rect+0x1112>
    lv_draw_mask_remove_id(mask_rout_id);
 800d632:	ee18 0a90 	vmov	r0, s17
 800d636:	f7fe fd5b 	bl	800c0f0 <lv_draw_mask_remove_id>
    lv_mem_buf_release(mask_buf);
 800d63a:	4620      	mov	r0, r4
 800d63c:	f00a f888 	bl	8017750 <lv_mem_buf_release>
    lv_mem_buf_release(sh_buf);
 800d640:	9807      	ldr	r0, [sp, #28]
 800d642:	f00a f885 	bl	8017750 <lv_mem_buf_release>
    if(dsc->bg_opa <= LV_OPA_MIN) return;
 800d646:	f898 300a 	ldrb.w	r3, [r8, #10]
 800d64a:	2b02      	cmp	r3, #2
 800d64c:	f240 80a1 	bls.w	800d792 <lv_draw_rect+0xcc6>
    lv_area_copy(&coords_bg, coords);
 800d650:	9905      	ldr	r1, [sp, #20]
 800d652:	a817      	add	r0, sp, #92	; 0x5c
 800d654:	f7fe feaa 	bl	800c3ac <lv_area_copy>
    if(dsc->border_width > 1 && dsc->border_opa >= LV_OPA_MAX && dsc->radius != 0) {
 800d658:	f9b8 301c 	ldrsh.w	r3, [r8, #28]
 800d65c:	2b01      	cmp	r3, #1
 800d65e:	dd24      	ble.n	800d6aa <lv_draw_rect+0xbde>
 800d660:	f898 301e 	ldrb.w	r3, [r8, #30]
 800d664:	2bfc      	cmp	r3, #252	; 0xfc
 800d666:	d920      	bls.n	800d6aa <lv_draw_rect+0xbde>
 800d668:	f9b8 3000 	ldrsh.w	r3, [r8]
 800d66c:	b1eb      	cbz	r3, 800d6aa <lv_draw_rect+0xbde>
        coords_bg.x1 += (dsc->border_side & LV_BORDER_SIDE_LEFT) ? 1 : 0;
 800d66e:	f898 301f 	ldrb.w	r3, [r8, #31]
 800d672:	f8bd 105c 	ldrh.w	r1, [sp, #92]	; 0x5c
 800d676:	f3c3 02c0 	ubfx	r2, r3, #3, #1
 800d67a:	440a      	add	r2, r1
        coords_bg.y1 += (dsc->border_side & LV_BORDER_SIDE_TOP) ? 1 : 0;
 800d67c:	f8bd 105e 	ldrh.w	r1, [sp, #94]	; 0x5e
        coords_bg.x1 += (dsc->border_side & LV_BORDER_SIDE_LEFT) ? 1 : 0;
 800d680:	f8ad 205c 	strh.w	r2, [sp, #92]	; 0x5c
        coords_bg.y1 += (dsc->border_side & LV_BORDER_SIDE_TOP) ? 1 : 0;
 800d684:	f3c3 0280 	ubfx	r2, r3, #2, #1
 800d688:	440a      	add	r2, r1
        coords_bg.x2 -= (dsc->border_side & LV_BORDER_SIDE_RIGHT) ? 1 : 0;
 800d68a:	f3c3 1100 	ubfx	r1, r3, #4, #1
        coords_bg.y2 -= (dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? 1 : 0;
 800d68e:	f3c3 0340 	ubfx	r3, r3, #1, #1
        coords_bg.y1 += (dsc->border_side & LV_BORDER_SIDE_TOP) ? 1 : 0;
 800d692:	f8ad 205e 	strh.w	r2, [sp, #94]	; 0x5e
        coords_bg.x2 -= (dsc->border_side & LV_BORDER_SIDE_RIGHT) ? 1 : 0;
 800d696:	f8bd 2060 	ldrh.w	r2, [sp, #96]	; 0x60
 800d69a:	1a52      	subs	r2, r2, r1
 800d69c:	f8ad 2060 	strh.w	r2, [sp, #96]	; 0x60
        coords_bg.y2 -= (dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? 1 : 0;
 800d6a0:	f8bd 2062 	ldrh.w	r2, [sp, #98]	; 0x62
 800d6a4:	1ad3      	subs	r3, r2, r3
 800d6a6:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
    lv_opa_t opa = dsc->bg_opa;
 800d6aa:	f898 500a 	ldrb.w	r5, [r8, #10]
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 800d6ae:	2dfe      	cmp	r5, #254	; 0xfe
 800d6b0:	bf28      	it	cs
 800d6b2:	25ff      	movcs	r5, #255	; 0xff
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 800d6b4:	f7fa fe60 	bl	8008378 <_lv_refr_get_disp_refreshing>
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp);
 800d6b8:	f009 f93a 	bl	8016930 <lv_disp_get_draw_buf>
    is_common = _lv_area_intersect(&draw_area, &coords_bg, clip);
 800d6bc:	465a      	mov	r2, fp
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp);
 800d6be:	4681      	mov	r9, r0
    is_common = _lv_area_intersect(&draw_area, &coords_bg, clip);
 800d6c0:	a917      	add	r1, sp, #92	; 0x5c
 800d6c2:	a819      	add	r0, sp, #100	; 0x64
 800d6c4:	f009 fbe7 	bl	8016e96 <_lv_area_intersect>
    if(is_common == false) return;
 800d6c8:	2800      	cmp	r0, #0
 800d6ca:	d062      	beq.n	800d792 <lv_draw_rect+0xcc6>
    draw_area.x1 -= disp_area->x1;
 800d6cc:	f8b9 4010 	ldrh.w	r4, [r9, #16]
 800d6d0:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
    draw_area.y1 -= disp_area->y1;
 800d6d4:	f8b9 0012 	ldrh.w	r0, [r9, #18]
    draw_area.x1 -= disp_area->x1;
 800d6d8:	1b1b      	subs	r3, r3, r4
    draw_area.x2 -= disp_area->x1;
 800d6da:	f8bd 2068 	ldrh.w	r2, [sp, #104]	; 0x68
    draw_area.y1 -= disp_area->y1;
 800d6de:	f8bd 1066 	ldrh.w	r1, [sp, #102]	; 0x66
    draw_area.x1 -= disp_area->x1;
 800d6e2:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
    draw_area.x2 -= disp_area->x1;
 800d6e6:	1b12      	subs	r2, r2, r4
    draw_area.y2 -= disp_area->y1;
 800d6e8:	f8bd 306a 	ldrh.w	r3, [sp, #106]	; 0x6a
    draw_area.y1 -= disp_area->y1;
 800d6ec:	1a09      	subs	r1, r1, r0
    lv_grad_dir_t grad_dir = dsc->bg_grad_dir;
 800d6ee:	f898 400b 	ldrb.w	r4, [r8, #11]
    draw_area.y2 -= disp_area->y1;
 800d6f2:	1a1b      	subs	r3, r3, r0
    draw_area.x2 -= disp_area->x1;
 800d6f4:	f8ad 2068 	strh.w	r2, [sp, #104]	; 0x68
    lv_grad_dir_t grad_dir = dsc->bg_grad_dir;
 800d6f8:	f004 0407 	and.w	r4, r4, #7
    if(dsc->bg_color.full == dsc->bg_grad_color.full) grad_dir = LV_GRAD_DIR_NONE;
 800d6fc:	f8b8 2004 	ldrh.w	r2, [r8, #4]
    draw_area.y2 -= disp_area->y1;
 800d700:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
    if(dsc->bg_color.full == dsc->bg_grad_color.full) grad_dir = LV_GRAD_DIR_NONE;
 800d704:	f8b8 3006 	ldrh.w	r3, [r8, #6]
    draw_area.y1 -= disp_area->y1;
 800d708:	f8ad 1066 	strh.w	r1, [sp, #102]	; 0x66
    if(dsc->bg_color.full == dsc->bg_grad_color.full) grad_dir = LV_GRAD_DIR_NONE;
 800d70c:	429a      	cmp	r2, r3
 800d70e:	bf08      	it	eq
 800d710:	2400      	moveq	r4, #0
    uint16_t other_mask_cnt = lv_draw_mask_get_cnt();
 800d712:	f7fe fd15 	bl	800c140 <lv_draw_mask_get_cnt>
 800d716:	900d      	str	r0, [sp, #52]	; 0x34
 800d718:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 800d71c:	930e      	str	r3, [sp, #56]	; 0x38
    if(other_mask_cnt) simple_mode = false;
 800d71e:	2b00      	cmp	r3, #0
 800d720:	f040 8286 	bne.w	800dc30 <lv_draw_rect+0x1164>
    else if(grad_dir == LV_GRAD_DIR_HOR) simple_mode = false;
 800d724:	1ea3      	subs	r3, r4, #2
 800d726:	bf18      	it	ne
 800d728:	2301      	movne	r3, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800d72a:	f8bd 7060 	ldrh.w	r7, [sp, #96]	; 0x60
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800d72e:	f8bd a062 	ldrh.w	sl, [sp, #98]	; 0x62
    if(other_mask_cnt) simple_mode = false;
 800d732:	9308      	str	r3, [sp, #32]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800d734:	3701      	adds	r7, #1
 800d736:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800d73a:	f10a 0a01 	add.w	sl, sl, #1
 800d73e:	f8bd 205e 	ldrh.w	r2, [sp, #94]	; 0x5e
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800d742:	1aff      	subs	r7, r7, r3
    int32_t rout = dsc->radius;
 800d744:	f9b8 3000 	ldrsh.w	r3, [r8]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800d748:	ebaa 0a02 	sub.w	sl, sl, r2
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800d74c:	b23f      	sxth	r7, r7
    int32_t coords_h = lv_area_get_height(&coords_bg);
 800d74e:	fa0f fa8a 	sxth.w	sl, sl
    int32_t short_side = LV_MIN(coords_w, coords_h);
 800d752:	45ba      	cmp	sl, r7
 800d754:	bfa8      	it	ge
 800d756:	46ba      	movge	sl, r7
    if(rout > short_side >> 1) rout = short_side >> 1;
 800d758:	ea4f 0a6a 	mov.w	sl, sl, asr #1
 800d75c:	459a      	cmp	sl, r3
 800d75e:	bfa8      	it	ge
 800d760:	469a      	movge	sl, r3
    if(simple_mode && rout == 0 && (grad_dir == LV_GRAD_DIR_NONE)) {
 800d762:	9b08      	ldr	r3, [sp, #32]
 800d764:	2b00      	cmp	r3, #0
 800d766:	f000 8265 	beq.w	800dc34 <lv_draw_rect+0x1168>
 800d76a:	f1ba 0f00 	cmp.w	sl, #0
 800d76e:	f040 8261 	bne.w	800dc34 <lv_draw_rect+0x1168>
 800d772:	2c00      	cmp	r4, #0
 800d774:	f040 825e 	bne.w	800dc34 <lv_draw_rect+0x1168>
        _lv_blend_fill(clip, &coords_bg,
 800d778:	f898 3002 	ldrb.w	r3, [r8, #2]
 800d77c:	a917      	add	r1, sp, #92	; 0x5c
 800d77e:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 800d782:	4658      	mov	r0, fp
 800d784:	e9cd 5301 	strd	r5, r3, [sp, #4]
 800d788:	2301      	movs	r3, #1
 800d78a:	9300      	str	r3, [sp, #0]
 800d78c:	4623      	mov	r3, r4
 800d78e:	f7fb fd47 	bl	8009220 <_lv_blend_fill>
    if(dsc->bg_img_src == NULL) return;
 800d792:	f8d8 000c 	ldr.w	r0, [r8, #12]
 800d796:	2800      	cmp	r0, #0
 800d798:	d05a      	beq.n	800d850 <lv_draw_rect+0xd84>
    if(dsc->bg_img_opa <= LV_OPA_MIN) return;
 800d79a:	f898 3016 	ldrb.w	r3, [r8, #22]
 800d79e:	2b02      	cmp	r3, #2
 800d7a0:	d956      	bls.n	800d850 <lv_draw_rect+0xd84>
    lv_img_src_t src_type = lv_img_src_get_type(dsc->bg_img_src);
 800d7a2:	f7fc fe9b 	bl	800a4dc <lv_img_src_get_type>
    if(src_type == LV_IMG_SRC_SYMBOL) {
 800d7a6:	2802      	cmp	r0, #2
 800d7a8:	f040 83fd 	bne.w	800dfa6 <lv_draw_rect+0x14da>
        lv_txt_get_size(&size, dsc->bg_img_src, dsc->bg_img_symbol_font, 0, 0, LV_COORD_MAX, LV_TEXT_FLAG_NONE);
 800d7ac:	2400      	movs	r4, #0
 800d7ae:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800d7b2:	a81b      	add	r0, sp, #108	; 0x6c
 800d7b4:	9400      	str	r4, [sp, #0]
 800d7b6:	e9d8 1203 	ldrd	r1, r2, [r8, #12]
 800d7ba:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d7be:	4623      	mov	r3, r4
 800d7c0:	f00b fec9 	bl	8019556 <lv_txt_get_size>
        a.x1 = coords->x1 + lv_area_get_width(coords) / 2 - size.x / 2;
 800d7c4:	9b05      	ldr	r3, [sp, #20]
 800d7c6:	f9bd 006c 	ldrsh.w	r0, [sp, #108]	; 0x6c
 800d7ca:	8899      	ldrh	r1, [r3, #4]
 800d7cc:	881a      	ldrh	r2, [r3, #0]
 800d7ce:	3101      	adds	r1, #1
 800d7d0:	1a89      	subs	r1, r1, r2
 800d7d2:	f3c1 33c0 	ubfx	r3, r1, #15, #1
 800d7d6:	fa03 f181 	sxtah	r1, r3, r1
 800d7da:	eb00 73d0 	add.w	r3, r0, r0, lsr #31
        a.x2 = a.x1 + size.x - 1;
 800d7de:	3801      	subs	r0, #1
        a.x1 = coords->x1 + lv_area_get_width(coords) / 2 - size.x / 2;
 800d7e0:	eba2 0363 	sub.w	r3, r2, r3, asr #1
 800d7e4:	eb03 0361 	add.w	r3, r3, r1, asr #1
 800d7e8:	b29b      	uxth	r3, r3
 800d7ea:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
        a.x2 = a.x1 + size.x - 1;
 800d7ee:	4403      	add	r3, r0
        a.y1 = coords->y1 + lv_area_get_height(coords) / 2 - size.y / 2;
 800d7f0:	f9bd 006e 	ldrsh.w	r0, [sp, #110]	; 0x6e
        a.x2 = a.x1 + size.x - 1;
 800d7f4:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
        a.y1 = coords->y1 + lv_area_get_height(coords) / 2 - size.y / 2;
 800d7f8:	9b05      	ldr	r3, [sp, #20]
 800d7fa:	8859      	ldrh	r1, [r3, #2]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800d7fc:	88db      	ldrh	r3, [r3, #6]
 800d7fe:	3301      	adds	r3, #1
 800d800:	1a5b      	subs	r3, r3, r1
 800d802:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 800d806:	fa02 f383 	sxtah	r3, r2, r3
 800d80a:	eb00 72d0 	add.w	r2, r0, r0, lsr #31
        a.y2 = a.y1 + size.y - 1;
 800d80e:	3801      	subs	r0, #1
        a.y1 = coords->y1 + lv_area_get_height(coords) / 2 - size.y / 2;
 800d810:	eba1 0262 	sub.w	r2, r1, r2, asr #1
 800d814:	eb02 0263 	add.w	r2, r2, r3, asr #1
 800d818:	b292      	uxth	r2, r2
 800d81a:	f8ad 2076 	strh.w	r2, [sp, #118]	; 0x76
        a.y2 = a.y1 + size.y - 1;
 800d81e:	4402      	add	r2, r0
        lv_draw_label_dsc_init(&label_draw_dsc);
 800d820:	a824      	add	r0, sp, #144	; 0x90
        a.y2 = a.y1 + size.y - 1;
 800d822:	f8ad 207a 	strh.w	r2, [sp, #122]	; 0x7a
        lv_draw_label_dsc_init(&label_draw_dsc);
 800d826:	f7fc fe7b 	bl	800a520 <lv_draw_label_dsc_init>
        label_draw_dsc.font = dsc->bg_img_symbol_font;
 800d82a:	f8d8 3010 	ldr.w	r3, [r8, #16]
        lv_draw_label(&a, clip, &label_draw_dsc, dsc->bg_img_src, NULL);
 800d82e:	aa24      	add	r2, sp, #144	; 0x90
 800d830:	4659      	mov	r1, fp
 800d832:	a81d      	add	r0, sp, #116	; 0x74
        label_draw_dsc.font = dsc->bg_img_symbol_font;
 800d834:	9324      	str	r3, [sp, #144]	; 0x90
        label_draw_dsc.color = dsc->bg_img_recolor;
 800d836:	f8b8 3014 	ldrh.w	r3, [r8, #20]
        lv_draw_label(&a, clip, &label_draw_dsc, dsc->bg_img_src, NULL);
 800d83a:	9400      	str	r4, [sp, #0]
        label_draw_dsc.color = dsc->bg_img_recolor;
 800d83c:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
        label_draw_dsc.opa = dsc->bg_img_opa;
 800d840:	f898 3016 	ldrb.w	r3, [r8, #22]
 800d844:	f88d 30aa 	strb.w	r3, [sp, #170]	; 0xaa
        lv_draw_label(&a, clip, &label_draw_dsc, dsc->bg_img_src, NULL);
 800d848:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d84c:	f7fd f840 	bl	800a8d0 <lv_draw_label>
    if(dsc->border_opa <= LV_OPA_MIN) return;
 800d850:	f898 301e 	ldrb.w	r3, [r8, #30]
 800d854:	2b02      	cmp	r3, #2
 800d856:	d974      	bls.n	800d942 <lv_draw_rect+0xe76>
    if(dsc->border_width == 0) return;
 800d858:	f9b8 301c 	ldrsh.w	r3, [r8, #28]
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d070      	beq.n	800d942 <lv_draw_rect+0xe76>
    if(dsc->border_side == LV_BORDER_SIDE_NONE) return;
 800d860:	f898 301f 	ldrb.w	r3, [r8, #31]
 800d864:	f013 0f3e 	tst.w	r3, #62	; 0x3e
 800d868:	d06b      	beq.n	800d942 <lv_draw_rect+0xe76>
    if(dsc->border_post) return;
 800d86a:	07d9      	lsls	r1, r3, #31
 800d86c:	d469      	bmi.n	800d942 <lv_draw_rect+0xe76>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800d86e:	9b05      	ldr	r3, [sp, #20]
    lv_area_copy(&area_inner, coords);
 800d870:	a817      	add	r0, sp, #92	; 0x5c
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800d872:	9905      	ldr	r1, [sp, #20]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800d874:	889c      	ldrh	r4, [r3, #4]
 800d876:	881b      	ldrh	r3, [r3, #0]
 800d878:	3401      	adds	r4, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800d87a:	8849      	ldrh	r1, [r1, #2]
    int32_t rout = dsc->radius;
 800d87c:	f9b8 2000 	ldrsh.w	r2, [r8]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800d880:	1ae4      	subs	r4, r4, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800d882:	9b05      	ldr	r3, [sp, #20]
 800d884:	88db      	ldrh	r3, [r3, #6]
    int32_t coords_w = lv_area_get_width(coords);
 800d886:	b224      	sxth	r4, r4
 800d888:	3301      	adds	r3, #1
 800d88a:	1a5b      	subs	r3, r3, r1
    lv_area_copy(&area_inner, coords);
 800d88c:	9905      	ldr	r1, [sp, #20]
    int32_t coords_h = lv_area_get_height(coords);
 800d88e:	b21b      	sxth	r3, r3
    int32_t short_side = LV_MIN(coords_w, coords_h);
 800d890:	429c      	cmp	r4, r3
 800d892:	bfa8      	it	ge
 800d894:	461c      	movge	r4, r3
    if(rout > short_side >> 1) rout = short_side >> 1;
 800d896:	1064      	asrs	r4, r4, #1
 800d898:	4294      	cmp	r4, r2
 800d89a:	bfa8      	it	ge
 800d89c:	4614      	movge	r4, r2
    lv_area_copy(&area_inner, coords);
 800d89e:	f7fe fd85 	bl	800c3ac <lv_area_copy>
    area_inner.x1 += ((dsc->border_side & LV_BORDER_SIDE_LEFT) ? dsc->border_width : - (dsc->border_width + rout));
 800d8a2:	f898 101f 	ldrb.w	r1, [r8, #31]
 800d8a6:	f8b8 301c 	ldrh.w	r3, [r8, #28]
 800d8aa:	f011 0f08 	tst.w	r1, #8
 800d8ae:	f8bd 505c 	ldrh.w	r5, [sp, #92]	; 0x5c
 800d8b2:	f3c1 0044 	ubfx	r0, r1, #1, #5
    area_inner.x2 -= ((dsc->border_side & LV_BORDER_SIDE_RIGHT) ? dsc->border_width : - (dsc->border_width + rout));
 800d8b6:	f8bd 6060 	ldrh.w	r6, [sp, #96]	; 0x60
    area_inner.x1 += ((dsc->border_side & LV_BORDER_SIDE_LEFT) ? dsc->border_width : - (dsc->border_width + rout));
 800d8ba:	bf0c      	ite	eq
 800d8bc:	18e2      	addeq	r2, r4, r3
 800d8be:	461a      	movne	r2, r3
    if(dsc->border_side == LV_BORDER_SIDE_FULL) {
 800d8c0:	f001 013e 	and.w	r1, r1, #62	; 0x3e
 800d8c4:	f898 901e 	ldrb.w	r9, [r8, #30]
    area_inner.x1 += ((dsc->border_side & LV_BORDER_SIDE_LEFT) ? dsc->border_width : - (dsc->border_width + rout));
 800d8c8:	bf04      	itt	eq
 800d8ca:	4252      	negeq	r2, r2
 800d8cc:	b292      	uxtheq	r2, r2
 800d8ce:	442a      	add	r2, r5
 800d8d0:	461d      	mov	r5, r3
 800d8d2:	f8ad 205c 	strh.w	r2, [sp, #92]	; 0x5c
    area_inner.x2 -= ((dsc->border_side & LV_BORDER_SIDE_RIGHT) ? dsc->border_width : - (dsc->border_width + rout));
 800d8d6:	0702      	lsls	r2, r0, #28
 800d8d8:	bf57      	itett	pl
 800d8da:	191a      	addpl	r2, r3, r4
 800d8dc:	461a      	movmi	r2, r3
 800d8de:	4252      	negpl	r2, r2
 800d8e0:	b292      	uxthpl	r2, r2
    area_inner.y1 += ((dsc->border_side & LV_BORDER_SIDE_TOP) ? dsc->border_width : - (dsc->border_width + rout));
 800d8e2:	0787      	lsls	r7, r0, #30
    area_inner.x2 -= ((dsc->border_side & LV_BORDER_SIDE_RIGHT) ? dsc->border_width : - (dsc->border_width + rout));
 800d8e4:	eba6 0202 	sub.w	r2, r6, r2
    area_inner.y1 += ((dsc->border_side & LV_BORDER_SIDE_TOP) ? dsc->border_width : - (dsc->border_width + rout));
 800d8e8:	f8bd 605e 	ldrh.w	r6, [sp, #94]	; 0x5e
    area_inner.x2 -= ((dsc->border_side & LV_BORDER_SIDE_RIGHT) ? dsc->border_width : - (dsc->border_width + rout));
 800d8ec:	f8ad 2060 	strh.w	r2, [sp, #96]	; 0x60
    area_inner.y1 += ((dsc->border_side & LV_BORDER_SIDE_TOP) ? dsc->border_width : - (dsc->border_width + rout));
 800d8f0:	bf57      	itett	pl
 800d8f2:	191a      	addpl	r2, r3, r4
 800d8f4:	461a      	movmi	r2, r3
 800d8f6:	4252      	negpl	r2, r2
 800d8f8:	b292      	uxthpl	r2, r2
    area_inner.y2 -= ((dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? dsc->border_width : - (dsc->border_width + rout));
 800d8fa:	07c0      	lsls	r0, r0, #31
 800d8fc:	bf58      	it	pl
 800d8fe:	191b      	addpl	r3, r3, r4
    area_inner.y1 += ((dsc->border_side & LV_BORDER_SIDE_TOP) ? dsc->border_width : - (dsc->border_width + rout));
 800d900:	4432      	add	r2, r6
    area_inner.y2 -= ((dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? dsc->border_width : - (dsc->border_width + rout));
 800d902:	bf58      	it	pl
 800d904:	425b      	negpl	r3, r3
    area_inner.y1 += ((dsc->border_side & LV_BORDER_SIDE_TOP) ? dsc->border_width : - (dsc->border_width + rout));
 800d906:	f8ad 205e 	strh.w	r2, [sp, #94]	; 0x5e
    area_inner.y2 -= ((dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? dsc->border_width : - (dsc->border_width + rout));
 800d90a:	f8bd 2062 	ldrh.w	r2, [sp, #98]	; 0x62
 800d90e:	bf58      	it	pl
 800d910:	b29d      	uxthpl	r5, r3
    if(dsc->border_side == LV_BORDER_SIDE_FULL) {
 800d912:	291e      	cmp	r1, #30
    area_inner.y2 -= ((dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? dsc->border_width : - (dsc->border_width + rout));
 800d914:	eba2 0305 	sub.w	r3, r2, r5
 800d918:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
    if(dsc->border_side == LV_BORDER_SIDE_FULL) {
 800d91c:	f040 83e4 	bne.w	800e0e8 <lv_draw_rect+0x161c>
        draw_full_border(&area_inner, coords, clip, dsc->radius, false, dsc->border_color, dsc->border_opa,
 800d920:	f898 3002 	ldrb.w	r3, [r8, #2]
 800d924:	465a      	mov	r2, fp
 800d926:	9905      	ldr	r1, [sp, #20]
 800d928:	a817      	add	r0, sp, #92	; 0x5c
 800d92a:	e9cd 9302 	strd	r9, r3, [sp, #8]
 800d92e:	f8b8 301a 	ldrh.w	r3, [r8, #26]
 800d932:	f8ad 3004 	strh.w	r3, [sp, #4]
 800d936:	2300      	movs	r3, #0
 800d938:	9300      	str	r3, [sp, #0]
 800d93a:	f9b8 3000 	ldrsh.w	r3, [r8]
 800d93e:	f7fe fe48 	bl	800c5d2 <draw_full_border>
    if(dsc->outline_opa <= LV_OPA_MIN) return;
 800d942:	f898 3026 	ldrb.w	r3, [r8, #38]	; 0x26
 800d946:	2b02      	cmp	r3, #2
 800d948:	d94f      	bls.n	800d9ea <lv_draw_rect+0xf1e>
    if(dsc->outline_width == 0) return;
 800d94a:	f9b8 3022 	ldrsh.w	r3, [r8, #34]	; 0x22
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d04b      	beq.n	800d9ea <lv_draw_rect+0xf1e>
    lv_area_copy(&area_inner, coords);
 800d952:	9905      	ldr	r1, [sp, #20]
 800d954:	a81d      	add	r0, sp, #116	; 0x74
 800d956:	f7fe fd29 	bl	800c3ac <lv_area_copy>
    lv_coord_t pad = (dsc->outline_pad == 0 ? (dsc->outline_pad - 1) : dsc->outline_pad);
 800d95a:	f9b8 3024 	ldrsh.w	r3, [r8, #36]	; 0x24
    area_inner.x1 -= pad;
 800d95e:	f8bd 2074 	ldrh.w	r2, [sp, #116]	; 0x74
    lv_area_copy(&area_outer, &area_inner);
 800d962:	a91d      	add	r1, sp, #116	; 0x74
    lv_coord_t pad = (dsc->outline_pad == 0 ? (dsc->outline_pad - 1) : dsc->outline_pad);
 800d964:	2b00      	cmp	r3, #0
    lv_area_copy(&area_outer, &area_inner);
 800d966:	a824      	add	r0, sp, #144	; 0x90
    lv_coord_t pad = (dsc->outline_pad == 0 ? (dsc->outline_pad - 1) : dsc->outline_pad);
 800d968:	bf08      	it	eq
 800d96a:	f04f 33ff 	moveq.w	r3, #4294967295
    area_inner.x1 -= pad;
 800d96e:	b29b      	uxth	r3, r3
 800d970:	1ad2      	subs	r2, r2, r3
 800d972:	f8ad 2074 	strh.w	r2, [sp, #116]	; 0x74
    area_inner.y1 -= pad;
 800d976:	f8bd 2076 	ldrh.w	r2, [sp, #118]	; 0x76
 800d97a:	1ad2      	subs	r2, r2, r3
 800d97c:	f8ad 2076 	strh.w	r2, [sp, #118]	; 0x76
    area_inner.x2 += pad;
 800d980:	f8bd 2078 	ldrh.w	r2, [sp, #120]	; 0x78
 800d984:	441a      	add	r2, r3
 800d986:	f8ad 2078 	strh.w	r2, [sp, #120]	; 0x78
    area_inner.y2 += pad;
 800d98a:	f8bd 207a 	ldrh.w	r2, [sp, #122]	; 0x7a
 800d98e:	4413      	add	r3, r2
 800d990:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
    lv_area_copy(&area_outer, &area_inner);
 800d994:	f7fe fd0a 	bl	800c3ac <lv_area_copy>
    area_outer.x1 -= dsc->outline_width;
 800d998:	f8b8 3022 	ldrh.w	r3, [r8, #34]	; 0x22
    draw_full_border(&area_inner, &area_outer, clip, dsc->radius, true, dsc->outline_color, dsc->outline_opa,
 800d99c:	a924      	add	r1, sp, #144	; 0x90
    area_outer.x1 -= dsc->outline_width;
 800d99e:	f8bd 2090 	ldrh.w	r2, [sp, #144]	; 0x90
    draw_full_border(&area_inner, &area_outer, clip, dsc->radius, true, dsc->outline_color, dsc->outline_opa,
 800d9a2:	a81d      	add	r0, sp, #116	; 0x74
    area_outer.x1 -= dsc->outline_width;
 800d9a4:	1ad2      	subs	r2, r2, r3
 800d9a6:	f8ad 2090 	strh.w	r2, [sp, #144]	; 0x90
    area_outer.x2 += dsc->outline_width;
 800d9aa:	f8bd 2094 	ldrh.w	r2, [sp, #148]	; 0x94
 800d9ae:	441a      	add	r2, r3
 800d9b0:	f8ad 2094 	strh.w	r2, [sp, #148]	; 0x94
    area_outer.y1 -= dsc->outline_width;
 800d9b4:	f8bd 2092 	ldrh.w	r2, [sp, #146]	; 0x92
 800d9b8:	1ad2      	subs	r2, r2, r3
 800d9ba:	f8ad 2092 	strh.w	r2, [sp, #146]	; 0x92
    area_outer.y2 += dsc->outline_width;
 800d9be:	f8bd 2096 	ldrh.w	r2, [sp, #150]	; 0x96
 800d9c2:	4413      	add	r3, r2
    draw_full_border(&area_inner, &area_outer, clip, dsc->radius, true, dsc->outline_color, dsc->outline_opa,
 800d9c4:	465a      	mov	r2, fp
    area_outer.y2 += dsc->outline_width;
 800d9c6:	f8ad 3096 	strh.w	r3, [sp, #150]	; 0x96
    draw_full_border(&area_inner, &area_outer, clip, dsc->radius, true, dsc->outline_color, dsc->outline_opa,
 800d9ca:	f898 3002 	ldrb.w	r3, [r8, #2]
 800d9ce:	9303      	str	r3, [sp, #12]
 800d9d0:	f898 3026 	ldrb.w	r3, [r8, #38]	; 0x26
 800d9d4:	9302      	str	r3, [sp, #8]
 800d9d6:	f8b8 3020 	ldrh.w	r3, [r8, #32]
 800d9da:	f8ad 3004 	strh.w	r3, [sp, #4]
 800d9de:	2301      	movs	r3, #1
 800d9e0:	9300      	str	r3, [sp, #0]
 800d9e2:	f9b8 3000 	ldrsh.w	r3, [r8]
 800d9e6:	f7fe fdf4 	bl	800c5d2 <draw_full_border>
}
 800d9ea:	b02d      	add	sp, #180	; 0xb4
 800d9ec:	ecbd 8b02 	vpop	{d8}
 800d9f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                lv_memcpy(mask_buf, sh_buf_tmp, w);
 800d9f4:	4631      	mov	r1, r6
 800d9f6:	463a      	mov	r2, r7
 800d9f8:	4620      	mov	r0, r4
            for(y = 0; y < h; y++) {
 800d9fa:	f109 0901 	add.w	r9, r9, #1
                lv_memcpy(mask_buf, sh_buf_tmp, w);
 800d9fe:	f009 fed3 	bl	80177a8 <lv_memcpy>
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
 800da02:	463b      	mov	r3, r7
 800da04:	f9bd 2076 	ldrsh.w	r2, [sp, #118]	; 0x76
 800da08:	4620      	mov	r0, r4
 800da0a:	f9bd 1074 	ldrsh.w	r1, [sp, #116]	; 0x74
 800da0e:	f7fe fb4d 	bl	800c0ac <lv_draw_mask_apply>
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 800da12:	f898 3002 	ldrb.w	r3, [r8, #2]
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
 800da16:	2801      	cmp	r0, #1
 800da18:	bf08      	it	eq
 800da1a:	2002      	moveq	r0, #2
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 800da1c:	f8b8 2028 	ldrh.w	r2, [r8, #40]	; 0x28
 800da20:	9302      	str	r3, [sp, #8]
 800da22:	4651      	mov	r1, sl
 800da24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da26:	e9cd 0300 	strd	r0, r3, [sp]
 800da2a:	4623      	mov	r3, r4
 800da2c:	4658      	mov	r0, fp
 800da2e:	f7fb fbf7 	bl	8009220 <_lv_blend_fill>
                fa.y1++;
 800da32:	f8bd 3076 	ldrh.w	r3, [sp, #118]	; 0x76
 800da36:	3301      	adds	r3, #1
 800da38:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
                fa.y2++;
 800da3c:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
 800da40:	3301      	adds	r3, #1
 800da42:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
                sh_buf_tmp += corner_size;
 800da46:	9b06      	ldr	r3, [sp, #24]
 800da48:	441e      	add	r6, r3
            for(y = 0; y < h; y++) {
 800da4a:	e434      	b.n	800d2b6 <lv_draw_rect+0x7ea>
                lv_memcpy(mask_buf, sh_buf_tmp, w);
 800da4c:	4639      	mov	r1, r7
 800da4e:	4632      	mov	r2, r6
 800da50:	4620      	mov	r0, r4
            for(y = 0; y < h; y++) {
 800da52:	f109 0901 	add.w	r9, r9, #1
                lv_memcpy(mask_buf, sh_buf_tmp, w);
 800da56:	f009 fea7 	bl	80177a8 <lv_memcpy>
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
 800da5a:	4633      	mov	r3, r6
 800da5c:	f9bd 2076 	ldrsh.w	r2, [sp, #118]	; 0x76
 800da60:	4620      	mov	r0, r4
 800da62:	f9bd 1074 	ldrsh.w	r1, [sp, #116]	; 0x74
 800da66:	f7fe fb21 	bl	800c0ac <lv_draw_mask_apply>
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 800da6a:	f898 3002 	ldrb.w	r3, [r8, #2]
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
 800da6e:	2801      	cmp	r0, #1
 800da70:	bf08      	it	eq
 800da72:	2002      	moveq	r0, #2
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 800da74:	f8b8 2028 	ldrh.w	r2, [r8, #40]	; 0x28
 800da78:	9302      	str	r3, [sp, #8]
 800da7a:	4651      	mov	r1, sl
 800da7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da7e:	e9cd 0300 	strd	r0, r3, [sp]
 800da82:	4623      	mov	r3, r4
 800da84:	4658      	mov	r0, fp
 800da86:	f7fb fbcb 	bl	8009220 <_lv_blend_fill>
                fa.y1--;
 800da8a:	f8bd 3076 	ldrh.w	r3, [sp, #118]	; 0x76
 800da8e:	3b01      	subs	r3, #1
 800da90:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
                fa.y2--;
 800da94:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
 800da98:	3b01      	subs	r3, #1
 800da9a:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
                sh_buf_tmp += corner_size;
 800da9e:	9b06      	ldr	r3, [sp, #24]
 800daa0:	441f      	add	r7, r3
            for(y = 0; y < h; y++) {
 800daa2:	e466      	b.n	800d372 <lv_draw_rect+0x8a6>
                lv_memcpy(mask_buf, sh_buf_tmp, w);
 800daa4:	4632      	mov	r2, r6
 800daa6:	4639      	mov	r1, r7
 800daa8:	4620      	mov	r0, r4
 800daaa:	f009 fe7d 	bl	80177a8 <lv_memcpy>
                if(simple_mode) {
 800daae:	9b08      	ldr	r3, [sp, #32]
 800dab0:	b94b      	cbnz	r3, 800dac6 <lv_draw_rect+0xffa>
                    mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
 800dab2:	4633      	mov	r3, r6
 800dab4:	f9bd 2076 	ldrsh.w	r2, [sp, #118]	; 0x76
 800dab8:	f9bd 1074 	ldrsh.w	r1, [sp, #116]	; 0x74
 800dabc:	4620      	mov	r0, r4
 800dabe:	f7fe faf5 	bl	800c0ac <lv_draw_mask_apply>
                    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
 800dac2:	2801      	cmp	r0, #1
 800dac4:	d100      	bne.n	800dac8 <lv_draw_rect+0xffc>
 800dac6:	2002      	movs	r0, #2
                _lv_blend_fill(clip, &fa,
 800dac8:	f898 3002 	ldrb.w	r3, [r8, #2]
 800dacc:	4651      	mov	r1, sl
 800dace:	f8b8 2028 	ldrh.w	r2, [r8, #40]	; 0x28
            for(y = 0; y < h; y++) {
 800dad2:	f109 0901 	add.w	r9, r9, #1
                _lv_blend_fill(clip, &fa,
 800dad6:	9302      	str	r3, [sp, #8]
 800dad8:	f898 3032 	ldrb.w	r3, [r8, #50]	; 0x32
 800dadc:	e9cd 0300 	strd	r0, r3, [sp]
 800dae0:	4623      	mov	r3, r4
 800dae2:	4658      	mov	r0, fp
 800dae4:	f7fb fb9c 	bl	8009220 <_lv_blend_fill>
                fa.y1++;
 800dae8:	f8bd 3076 	ldrh.w	r3, [sp, #118]	; 0x76
 800daec:	3301      	adds	r3, #1
 800daee:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
                fa.y2++;
 800daf2:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
 800daf6:	3301      	adds	r3, #1
 800daf8:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
            for(y = 0; y < h; y++) {
 800dafc:	e49b      	b.n	800d436 <lv_draw_rect+0x96a>
            lv_opa_t opa_tmp = sh_buf_tmp[0];
 800dafe:	7833      	ldrb	r3, [r6, #0]
            lv_memset(mask_buf, opa_tmp, w);
 800db00:	4620      	mov	r0, r4
 800db02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800db04:	ea02 0103 	and.w	r1, r2, r3
            if(opa_tmp != LV_OPA_COVER || opa != LV_OPA_COVER) opa_tmp = (opa * opa_tmp) >> 8;
 800db08:	29ff      	cmp	r1, #255	; 0xff
 800db0a:	bf18      	it	ne
 800db0c:	fb12 f303 	smulbbne	r3, r2, r3
            lv_memset(mask_buf, opa_tmp, w);
 800db10:	463a      	mov	r2, r7
            if(opa_tmp != LV_OPA_COVER || opa != LV_OPA_COVER) opa_tmp = (opa * opa_tmp) >> 8;
 800db12:	bf18      	it	ne
 800db14:	f3c3 2107 	ubfxne	r1, r3, #8, #8
            lv_memset(mask_buf, opa_tmp, w);
 800db18:	f009 ff36 	bl	8017988 <lv_memset>
            if(simple_mode) {
 800db1c:	9b08      	ldr	r3, [sp, #32]
 800db1e:	b94b      	cbnz	r3, 800db34 <lv_draw_rect+0x1068>
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
 800db20:	463b      	mov	r3, r7
 800db22:	f9bd 2076 	ldrsh.w	r2, [sp, #118]	; 0x76
 800db26:	f9bd 1074 	ldrsh.w	r1, [sp, #116]	; 0x74
 800db2a:	4620      	mov	r0, r4
 800db2c:	f7fe fabe 	bl	800c0ac <lv_draw_mask_apply>
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
 800db30:	2801      	cmp	r0, #1
 800db32:	d100      	bne.n	800db36 <lv_draw_rect+0x106a>
 800db34:	2002      	movs	r0, #2
            _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 800db36:	f898 3002 	ldrb.w	r3, [r8, #2]
 800db3a:	4651      	mov	r1, sl
 800db3c:	f8b8 2028 	ldrh.w	r2, [r8, #40]	; 0x28
        for(y = 0; y < h; y++) {
 800db40:	f109 0901 	add.w	r9, r9, #1
            _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 800db44:	9302      	str	r3, [sp, #8]
 800db46:	23ff      	movs	r3, #255	; 0xff
 800db48:	e9cd 0300 	strd	r0, r3, [sp]
 800db4c:	4623      	mov	r3, r4
 800db4e:	4658      	mov	r0, fp
 800db50:	f7fb fb66 	bl	8009220 <_lv_blend_fill>
            fa.y1++;
 800db54:	f8bd 3076 	ldrh.w	r3, [sp, #118]	; 0x76
 800db58:	3301      	adds	r3, #1
 800db5a:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
            fa.y2++;
 800db5e:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
 800db62:	3301      	adds	r3, #1
 800db64:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
            sh_buf_tmp += corner_size;
 800db68:	9b06      	ldr	r3, [sp, #24]
 800db6a:	441e      	add	r6, r3
        for(y = 0; y < h; y++) {
 800db6c:	e4c0      	b.n	800d4f0 <lv_draw_rect+0xa24>
            lv_opa_t opa_tmp = sh_buf_tmp[0];
 800db6e:	7833      	ldrb	r3, [r6, #0]
            lv_memset(mask_buf, opa_tmp, w);
 800db70:	4620      	mov	r0, r4
 800db72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800db74:	ea02 0103 	and.w	r1, r2, r3
            if(opa_tmp != LV_OPA_COVER || opa != LV_OPA_COVER) opa_tmp = (opa * opa_tmp) >> 8;
 800db78:	29ff      	cmp	r1, #255	; 0xff
 800db7a:	bf18      	it	ne
 800db7c:	fb12 f303 	smulbbne	r3, r2, r3
            lv_memset(mask_buf, opa_tmp, w);
 800db80:	463a      	mov	r2, r7
            if(opa_tmp != LV_OPA_COVER || opa != LV_OPA_COVER) opa_tmp = (opa * opa_tmp) >> 8;
 800db82:	bf18      	it	ne
 800db84:	f3c3 2107 	ubfxne	r1, r3, #8, #8
            lv_memset(mask_buf, opa_tmp, w);
 800db88:	f009 fefe 	bl	8017988 <lv_memset>
            if(simple_mode) {
 800db8c:	9b08      	ldr	r3, [sp, #32]
 800db8e:	b94b      	cbnz	r3, 800dba4 <lv_draw_rect+0x10d8>
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
 800db90:	463b      	mov	r3, r7
 800db92:	f9bd 2076 	ldrsh.w	r2, [sp, #118]	; 0x76
 800db96:	f9bd 1074 	ldrsh.w	r1, [sp, #116]	; 0x74
 800db9a:	4620      	mov	r0, r4
 800db9c:	f7fe fa86 	bl	800c0ac <lv_draw_mask_apply>
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
 800dba0:	2801      	cmp	r0, #1
 800dba2:	d100      	bne.n	800dba6 <lv_draw_rect+0x10da>
 800dba4:	2002      	movs	r0, #2
            _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 800dba6:	f898 3002 	ldrb.w	r3, [r8, #2]
 800dbaa:	4651      	mov	r1, sl
 800dbac:	f8b8 2028 	ldrh.w	r2, [r8, #40]	; 0x28
        for(y = 0; y < h; y++) {
 800dbb0:	f109 0901 	add.w	r9, r9, #1
            _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 800dbb4:	9302      	str	r3, [sp, #8]
 800dbb6:	23ff      	movs	r3, #255	; 0xff
 800dbb8:	e9cd 0300 	strd	r0, r3, [sp]
 800dbbc:	4623      	mov	r3, r4
 800dbbe:	4658      	mov	r0, fp
 800dbc0:	f7fb fb2e 	bl	8009220 <_lv_blend_fill>
            fa.y1--;
 800dbc4:	f8bd 3076 	ldrh.w	r3, [sp, #118]	; 0x76
 800dbc8:	3b01      	subs	r3, #1
 800dbca:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
            fa.y2--;
 800dbce:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
 800dbd2:	3b01      	subs	r3, #1
 800dbd4:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
            sh_buf_tmp += corner_size;
 800dbd8:	9b06      	ldr	r3, [sp, #24]
 800dbda:	441e      	add	r6, r3
        for(y = 0; y < h; y++) {
 800dbdc:	e4e6      	b.n	800d5ac <lv_draw_rect+0xae0>
            lv_memset(mask_buf, dsc->shadow_opa, w);
 800dbde:	4632      	mov	r2, r6
 800dbe0:	f898 1032 	ldrb.w	r1, [r8, #50]	; 0x32
 800dbe4:	4620      	mov	r0, r4
        for(y = 0; y < h; y++) {
 800dbe6:	3501      	adds	r5, #1
            lv_memset(mask_buf, dsc->shadow_opa, w);
 800dbe8:	f009 fece 	bl	8017988 <lv_memset>
            mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
 800dbec:	4633      	mov	r3, r6
 800dbee:	f9bd 2076 	ldrsh.w	r2, [sp, #118]	; 0x76
 800dbf2:	4620      	mov	r0, r4
 800dbf4:	f9bd 1074 	ldrsh.w	r1, [sp, #116]	; 0x74
 800dbf8:	f7fe fa58 	bl	800c0ac <lv_draw_mask_apply>
            _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 800dbfc:	f898 3002 	ldrb.w	r3, [r8, #2]
            if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
 800dc00:	2801      	cmp	r0, #1
 800dc02:	bf08      	it	eq
 800dc04:	2002      	moveq	r0, #2
            _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 800dc06:	f8b8 2028 	ldrh.w	r2, [r8, #40]	; 0x28
 800dc0a:	a91d      	add	r1, sp, #116	; 0x74
 800dc0c:	9000      	str	r0, [sp, #0]
 800dc0e:	4658      	mov	r0, fp
 800dc10:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800dc14:	4623      	mov	r3, r4
 800dc16:	f7fb fb03 	bl	8009220 <_lv_blend_fill>
            fa.y1++;
 800dc1a:	f8bd 3076 	ldrh.w	r3, [sp, #118]	; 0x76
 800dc1e:	3301      	adds	r3, #1
 800dc20:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
            fa.y2++;
 800dc24:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
 800dc28:	3301      	adds	r3, #1
 800dc2a:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
        for(y = 0; y < h; y++) {
 800dc2e:	e4fd      	b.n	800d62c <lv_draw_rect+0xb60>
    if(other_mask_cnt) simple_mode = false;
 800dc30:	2300      	movs	r3, #0
 800dc32:	e57a      	b.n	800d72a <lv_draw_rect+0xc5e>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800dc34:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 800dc38:	f8bd 2064 	ldrh.w	r2, [sp, #100]	; 0x64
 800dc3c:	3301      	adds	r3, #1
 800dc3e:	1a9b      	subs	r3, r3, r2
 800dc40:	b21b      	sxth	r3, r3
        lv_opa_t * mask_buf = lv_mem_buf_get(draw_area_w);
 800dc42:	4618      	mov	r0, r3
 800dc44:	ee08 3a90 	vmov	s17, r3
 800dc48:	f009 ff26 	bl	8017a98 <lv_mem_buf_get>
        if(rout > 0) {
 800dc4c:	f1ba 0f00 	cmp.w	sl, #0
        lv_opa_t * mask_buf = lv_mem_buf_get(draw_area_w);
 800dc50:	4606      	mov	r6, r0
        if(rout > 0) {
 800dc52:	f340 80ad 	ble.w	800ddb0 <lv_draw_rect+0x12e4>
            lv_draw_mask_radius_init(&mask_rout_param, &coords_bg, rout, false);
 800dc56:	2300      	movs	r3, #0
 800dc58:	4652      	mov	r2, sl
 800dc5a:	a917      	add	r1, sp, #92	; 0x5c
 800dc5c:	a824      	add	r0, sp, #144	; 0x90
 800dc5e:	f7fe fb75 	bl	800c34c <lv_draw_mask_radius_init>
            mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
 800dc62:	2100      	movs	r1, #0
 800dc64:	a824      	add	r0, sp, #144	; 0x90
 800dc66:	f7fe fa0b 	bl	800c080 <lv_draw_mask_add>
 800dc6a:	900f      	str	r0, [sp, #60]	; 0x3c
        lv_color_t grad_color = dsc->bg_color;
 800dc6c:	f8b8 3004 	ldrh.w	r3, [r8, #4]
        if(grad_dir == LV_GRAD_DIR_HOR) {
 800dc70:	2c02      	cmp	r4, #2
        lv_color_t grad_color = dsc->bg_color;
 800dc72:	ee08 3a10 	vmov	s16, r3
        if(grad_dir == LV_GRAD_DIR_HOR) {
 800dc76:	f040 80ac 	bne.w	800ddd2 <lv_draw_rect+0x1306>
            grad_map = lv_mem_buf_get(coords_w * sizeof(lv_color_t));
 800dc7a:	0078      	lsls	r0, r7, #1
 800dc7c:	f009 ff0c 	bl	8017a98 <lv_mem_buf_get>
            for(i = 0; i < coords_w; i++) {
 800dc80:	2300      	movs	r3, #0
            grad_map = lv_mem_buf_get(coords_w * sizeof(lv_color_t));
 800dc82:	9009      	str	r0, [sp, #36]	; 0x24
            for(i = 0; i < coords_w; i++) {
 800dc84:	429f      	cmp	r7, r3
 800dc86:	f300 8097 	bgt.w	800ddb8 <lv_draw_rect+0x12ec>
 800dc8a:	f9bd 2060 	ldrsh.w	r2, [sp, #96]	; 0x60
 800dc8e:	f9bd 105c 	ldrsh.w	r1, [sp, #92]	; 0x5c
 800dc92:	1c53      	adds	r3, r2, #1
        fill_area.x2 = coords_bg.x2;
 800dc94:	f8ad 2070 	strh.w	r2, [sp, #112]	; 0x70
        fill_area.y1 = disp_area->y1 + draw_area.y1;
 800dc98:	f9bd 2066 	ldrsh.w	r2, [sp, #102]	; 0x66
 800dc9c:	1a5b      	subs	r3, r3, r1
        fill_area.x1 = coords_bg.x1;
 800dc9e:	f8ad 106c 	strh.w	r1, [sp, #108]	; 0x6c
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800dca2:	9207      	str	r2, [sp, #28]
        if(lv_area_get_width(&coords_bg) - 2 * rout > SPLIT_LIMIT) split = true;
 800dca4:	b21b      	sxth	r3, r3
 800dca6:	eba3 034a 	sub.w	r3, r3, sl, lsl #1
 800dcaa:	930c      	str	r3, [sp, #48]	; 0x30
        fill_area.y1 = disp_area->y1 + draw_area.y1;
 800dcac:	f8b9 3012 	ldrh.w	r3, [r9, #18]
 800dcb0:	4413      	add	r3, r2
 800dcb2:	b21b      	sxth	r3, r3
 800dcb4:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
        fill_area.y2 = fill_area.y1;
 800dcb8:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
                fill_area2.x2 = coords_bg.x1 + rout - 1;
 800dcbc:	fa1f f38a 	uxth.w	r3, sl
 800dcc0:	930b      	str	r3, [sp, #44]	; 0x2c
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800dcc2:	f9bd 306a 	ldrsh.w	r3, [sp, #106]	; 0x6a
 800dcc6:	9a07      	ldr	r2, [sp, #28]
 800dcc8:	429a      	cmp	r2, r3
 800dcca:	f340 8085 	ble.w	800ddd8 <lv_draw_rect+0x130c>
        if(grad_dir == LV_GRAD_DIR_NONE && other_mask_cnt == 0 && split) {
 800dcce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dcd0:	4323      	orrs	r3, r4
 800dcd2:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 800dcd6:	d15e      	bne.n	800dd96 <lv_draw_rect+0x12ca>
 800dcd8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800dcda:	2a32      	cmp	r2, #50	; 0x32
 800dcdc:	dd5b      	ble.n	800dd96 <lv_draw_rect+0x12ca>
            fill_area.x1 = coords_bg.x1 + rout;
 800dcde:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 800dce2:	fa1f f78a 	uxth.w	r7, sl
            _lv_blend_fill(clip, &fill_area,
 800dce6:	a91b      	add	r1, sp, #108	; 0x6c
 800dce8:	4658      	mov	r0, fp
            fill_area.x1 = coords_bg.x1 + rout;
 800dcea:	fa12 fa8a 	uxtah	sl, r2, sl
            fill_area.x2 = coords_bg.x2 - rout;
 800dcee:	f8bd 2060 	ldrh.w	r2, [sp, #96]	; 0x60
            _lv_blend_fill(clip, &fill_area,
 800dcf2:	2401      	movs	r4, #1
            fill_area.x2 = coords_bg.x2 - rout;
 800dcf4:	1bd2      	subs	r2, r2, r7
            fill_area.x1 = coords_bg.x1 + rout;
 800dcf6:	f8ad a06c 	strh.w	sl, [sp, #108]	; 0x6c
            fill_area.x2 = coords_bg.x2 - rout;
 800dcfa:	f8ad 2070 	strh.w	r2, [sp, #112]	; 0x70
            fill_area.y1 = coords_bg.y1;
 800dcfe:	f9bd 205e 	ldrsh.w	r2, [sp, #94]	; 0x5e
 800dd02:	f8ad 206e 	strh.w	r2, [sp, #110]	; 0x6e
            fill_area.y2 = coords_bg.y1 + rout;
 800dd06:	443a      	add	r2, r7
 800dd08:	f8ad 2072 	strh.w	r2, [sp, #114]	; 0x72
            _lv_blend_fill(clip, &fill_area,
 800dd0c:	f898 2002 	ldrb.w	r2, [r8, #2]
 800dd10:	e9cd 5201 	strd	r5, r2, [sp, #4]
 800dd14:	2201      	movs	r2, #1
 800dd16:	9200      	str	r2, [sp, #0]
 800dd18:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 800dd1c:	f7fb fa80 	bl	8009220 <_lv_blend_fill>
            fill_area.y1 = coords_bg.y2 - rout;
 800dd20:	f9bd 1062 	ldrsh.w	r1, [sp, #98]	; 0x62
            if(fill_area.y1 <= fill_area.y2) fill_area.y1 = fill_area.y2 + 1;    /*Avoid overdrawing the last line*/
 800dd24:	f9bd 3072 	ldrsh.w	r3, [sp, #114]	; 0x72
            _lv_blend_fill(clip, &fill_area,
 800dd28:	4658      	mov	r0, fp
            fill_area.y1 = coords_bg.y2 - rout;
 800dd2a:	1bca      	subs	r2, r1, r7
            fill_area.y2 = coords_bg.y2;
 800dd2c:	f8ad 1072 	strh.w	r1, [sp, #114]	; 0x72
            _lv_blend_fill(clip, &fill_area,
 800dd30:	9400      	str	r4, [sp, #0]
 800dd32:	a91b      	add	r1, sp, #108	; 0x6c
            fill_area.y1 = coords_bg.y2 - rout;
 800dd34:	b212      	sxth	r2, r2
            if(fill_area.y1 <= fill_area.y2) fill_area.y1 = fill_area.y2 + 1;    /*Avoid overdrawing the last line*/
 800dd36:	429a      	cmp	r2, r3
            fill_area.y1 = coords_bg.y2 - rout;
 800dd38:	f8ad 206e 	strh.w	r2, [sp, #110]	; 0x6e
            _lv_blend_fill(clip, &fill_area,
 800dd3c:	f8b8 2004 	ldrh.w	r2, [r8, #4]
            if(fill_area.y1 <= fill_area.y2) fill_area.y1 = fill_area.y2 + 1;    /*Avoid overdrawing the last line*/
 800dd40:	bfdc      	itt	le
 800dd42:	3301      	addle	r3, #1
 800dd44:	f8ad 306e 	strhle.w	r3, [sp, #110]	; 0x6e
            _lv_blend_fill(clip, &fill_area,
 800dd48:	f898 3002 	ldrb.w	r3, [r8, #2]
 800dd4c:	e9cd 5301 	strd	r5, r3, [sp, #4]
 800dd50:	2300      	movs	r3, #0
 800dd52:	f7fb fa65 	bl	8009220 <_lv_blend_fill>
            fill_area.x1 = coords_bg.x1;
 800dd56:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
            _lv_blend_fill(clip, &fill_area,
 800dd5a:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 800dd5e:	a91b      	add	r1, sp, #108	; 0x6c
            fill_area.x1 = coords_bg.x1;
 800dd60:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
            _lv_blend_fill(clip, &fill_area,
 800dd64:	4658      	mov	r0, fp
            fill_area.x2 = coords_bg.x2;
 800dd66:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
            _lv_blend_fill(clip, &fill_area,
 800dd6a:	9400      	str	r4, [sp, #0]
            fill_area.x2 = coords_bg.x2;
 800dd6c:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
            fill_area.y1 = coords_bg.y1 + rout + 1;
 800dd70:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
 800dd74:	4423      	add	r3, r4
 800dd76:	443b      	add	r3, r7
 800dd78:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
            fill_area.y2 = coords_bg.y2 - rout - 1;
 800dd7c:	f8bd 3062 	ldrh.w	r3, [sp, #98]	; 0x62
 800dd80:	3b01      	subs	r3, #1
 800dd82:	1bdf      	subs	r7, r3, r7
            _lv_blend_fill(clip, &fill_area,
 800dd84:	f898 3002 	ldrb.w	r3, [r8, #2]
 800dd88:	e9cd 5301 	strd	r5, r3, [sp, #4]
 800dd8c:	2300      	movs	r3, #0
            fill_area.y2 = coords_bg.y2 - rout - 1;
 800dd8e:	f8ad 7072 	strh.w	r7, [sp, #114]	; 0x72
            _lv_blend_fill(clip, &fill_area,
 800dd92:	f7fb fa45 	bl	8009220 <_lv_blend_fill>
        if(grad_map) lv_mem_buf_release(grad_map);
 800dd96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd98:	b113      	cbz	r3, 800dda0 <lv_draw_rect+0x12d4>
 800dd9a:	4618      	mov	r0, r3
 800dd9c:	f009 fcd8 	bl	8017750 <lv_mem_buf_release>
        if(mask_buf) lv_mem_buf_release(mask_buf);
 800dda0:	b116      	cbz	r6, 800dda8 <lv_draw_rect+0x12dc>
 800dda2:	4630      	mov	r0, r6
 800dda4:	f009 fcd4 	bl	8017750 <lv_mem_buf_release>
        lv_draw_mask_remove_id(mask_rout_id);
 800dda8:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800ddaa:	f7fe f9a1 	bl	800c0f0 <lv_draw_mask_remove_id>
 800ddae:	e4f0      	b.n	800d792 <lv_draw_rect+0xcc6>
        int16_t mask_rout_id = LV_MASK_ID_INV;
 800ddb0:	f04f 33ff 	mov.w	r3, #4294967295
 800ddb4:	930f      	str	r3, [sp, #60]	; 0x3c
 800ddb6:	e759      	b.n	800dc6c <lv_draw_rect+0x11a0>
                grad_map[i] = grad_get(dsc, coords_w, i);
 800ddb8:	b21a      	sxth	r2, r3
 800ddba:	4639      	mov	r1, r7
 800ddbc:	4640      	mov	r0, r8
 800ddbe:	9306      	str	r3, [sp, #24]
 800ddc0:	f7fe fb01 	bl	800c3c6 <grad_get>
 800ddc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ddc6:	461a      	mov	r2, r3
 800ddc8:	9b06      	ldr	r3, [sp, #24]
 800ddca:	f822 0013 	strh.w	r0, [r2, r3, lsl #1]
            for(i = 0; i < coords_w; i++) {
 800ddce:	3301      	adds	r3, #1
 800ddd0:	e758      	b.n	800dc84 <lv_draw_rect+0x11b8>
        lv_color_t * grad_map = NULL;
 800ddd2:	2300      	movs	r3, #0
 800ddd4:	9309      	str	r3, [sp, #36]	; 0x24
 800ddd6:	e758      	b.n	800dc8a <lv_draw_rect+0x11be>
            int32_t y = h + draw_buf->area.y1;
 800ddd8:	9a07      	ldr	r2, [sp, #28]
 800ddda:	f9b9 3012 	ldrsh.w	r3, [r9, #18]
 800ddde:	4413      	add	r3, r2
 800dde0:	930a      	str	r3, [sp, #40]	; 0x28
            if(y > coords_bg.y1 + rout + 1 &&
 800dde2:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 800dde6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dde8:	4453      	add	r3, sl
 800ddea:	3301      	adds	r3, #1
 800ddec:	429a      	cmp	r2, r3
 800ddee:	dd0a      	ble.n	800de06 <lv_draw_rect+0x133a>
               y < coords_bg.y2 - rout - 1) {
 800ddf0:	f9bd 3062 	ldrsh.w	r3, [sp, #98]	; 0x62
 800ddf4:	eba3 030a 	sub.w	r3, r3, sl
 800ddf8:	3b01      	subs	r3, #1
            if(y > coords_bg.y1 + rout + 1 &&
 800ddfa:	429a      	cmp	r2, r3
 800ddfc:	da03      	bge.n	800de06 <lv_draw_rect+0x133a>
                if(simple_mode == false) {
 800ddfe:	9b08      	ldr	r3, [sp, #32]
 800de00:	2b00      	cmp	r3, #0
 800de02:	f040 8258 	bne.w	800e2b6 <lv_draw_rect+0x17ea>
                lv_memset(mask_buf, opa, draw_area_w);
 800de06:	ee18 2a90 	vmov	r2, s17
 800de0a:	4629      	mov	r1, r5
 800de0c:	4630      	mov	r0, r6
 800de0e:	f009 fdbb 	bl	8017988 <lv_memset>
                mask_res = lv_draw_mask_apply(mask_buf, draw_buf->area.x1 + draw_area.x1, draw_buf->area.y1 + h, draw_area_w);
 800de12:	9b07      	ldr	r3, [sp, #28]
 800de14:	f8b9 2012 	ldrh.w	r2, [r9, #18]
 800de18:	4630      	mov	r0, r6
 800de1a:	f8b9 1010 	ldrh.w	r1, [r9, #16]
 800de1e:	441a      	add	r2, r3
 800de20:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 800de24:	4419      	add	r1, r3
 800de26:	b212      	sxth	r2, r2
 800de28:	ee18 3a90 	vmov	r3, s17
 800de2c:	b209      	sxth	r1, r1
 800de2e:	f7fe f93d 	bl	800c0ac <lv_draw_mask_apply>
                opa2 = LV_OPA_COVER;
 800de32:	2802      	cmp	r0, #2
                mask_res = lv_draw_mask_apply(mask_buf, draw_buf->area.x1 + draw_area.x1, draw_buf->area.y1 + h, draw_area_w);
 800de34:	4607      	mov	r7, r0
                opa2 = LV_OPA_COVER;
 800de36:	bf14      	ite	ne
 800de38:	462b      	movne	r3, r5
 800de3a:	23ff      	moveq	r3, #255	; 0xff
            if(grad_dir == LV_GRAD_DIR_VER) {
 800de3c:	2c01      	cmp	r4, #1
                opa2 = LV_OPA_COVER;
 800de3e:	9306      	str	r3, [sp, #24]
            if(grad_dir == LV_GRAD_DIR_VER) {
 800de40:	d11d      	bne.n	800de7e <lv_draw_rect+0x13b2>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800de42:	f8bd 1062 	ldrh.w	r1, [sp, #98]	; 0x62
                grad_color = grad_get(dsc, lv_area_get_height(&coords_bg), y - coords_bg.y1);
 800de46:	4640      	mov	r0, r8
 800de48:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
 800de4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800de4e:	3101      	adds	r1, #1
 800de50:	1ad2      	subs	r2, r2, r3
 800de52:	1ac9      	subs	r1, r1, r3
 800de54:	b212      	sxth	r2, r2
 800de56:	b209      	sxth	r1, r1
 800de58:	f7fe fab5 	bl	800c3c6 <grad_get>
            if(simple_mode && split &&
 800de5c:	9b08      	ldr	r3, [sp, #32]
                grad_color = grad_get(dsc, lv_area_get_height(&coords_bg), y - coords_bg.y1);
 800de5e:	ee08 0a10 	vmov	s16, r0
            if(simple_mode && split &&
 800de62:	b983      	cbnz	r3, 800de86 <lv_draw_rect+0x13ba>
                    _lv_blend_fill(clip, &fill_area,
 800de64:	f898 3002 	ldrb.w	r3, [r8, #2]
 800de68:	ee18 2a10 	vmov	r2, s16
 800de6c:	a91b      	add	r1, sp, #108	; 0x6c
 800de6e:	9302      	str	r3, [sp, #8]
 800de70:	9b06      	ldr	r3, [sp, #24]
 800de72:	e9cd 7300 	strd	r7, r3, [sp]
 800de76:	4633      	mov	r3, r6
 800de78:	e06a      	b.n	800df50 <lv_draw_rect+0x1484>
                mask_res = LV_DRAW_MASK_RES_FULL_COVER;
 800de7a:	4627      	mov	r7, r4
 800de7c:	e7e1      	b.n	800de42 <lv_draw_rect+0x1376>
            if(simple_mode && split &&
 800de7e:	9b08      	ldr	r3, [sp, #32]
 800de80:	2b00      	cmp	r3, #0
 800de82:	f000 821e 	beq.w	800e2c2 <lv_draw_rect+0x17f6>
 800de86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800de88:	2b32      	cmp	r3, #50	; 0x32
 800de8a:	dd65      	ble.n	800df58 <lv_draw_rect+0x148c>
               (y < coords_bg.y1 + rout + 1 ||
 800de8c:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
            if(simple_mode && split &&
 800de90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
               (y < coords_bg.y1 + rout + 1 ||
 800de92:	4453      	add	r3, sl
            if(simple_mode && split &&
 800de94:	429a      	cmp	r2, r3
 800de96:	dd05      	ble.n	800dea4 <lv_draw_rect+0x13d8>
                y > coords_bg.y2 - rout - 1)) {
 800de98:	f9bd 3062 	ldrsh.w	r3, [sp, #98]	; 0x62
 800de9c:	eba3 030a 	sub.w	r3, r3, sl
               (y < coords_bg.y1 + rout + 1 ||
 800dea0:	429a      	cmp	r2, r3
 800dea2:	db59      	blt.n	800df58 <lv_draw_rect+0x148c>
                fill_area2.x1 = coords_bg.x1;
 800dea4:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	; 0x5c
                _lv_blend_fill(clip, &fill_area2,
 800dea8:	a91d      	add	r1, sp, #116	; 0x74
                fill_area2.x2 = coords_bg.x1 + rout - 1;
 800deaa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
                _lv_blend_fill(clip, &fill_area2,
 800deac:	4658      	mov	r0, fp
                fill_area2.x1 = coords_bg.x1;
 800deae:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
                fill_area2.x2 = coords_bg.x1 + rout - 1;
 800deb2:	3b01      	subs	r3, #1
 800deb4:	4413      	add	r3, r2
                _lv_blend_fill(clip, &fill_area2,
 800deb6:	ee18 2a10 	vmov	r2, s16
                fill_area2.x2 = coords_bg.x1 + rout - 1;
 800deba:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
                fill_area2.y1 = fill_area.y1;
 800debe:	f8bd 306e 	ldrh.w	r3, [sp, #110]	; 0x6e
 800dec2:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
                fill_area2.y2 = fill_area.y2;
 800dec6:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
 800deca:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
                _lv_blend_fill(clip, &fill_area2,
 800dece:	f898 3002 	ldrb.w	r3, [r8, #2]
 800ded2:	9302      	str	r3, [sp, #8]
 800ded4:	9b06      	ldr	r3, [sp, #24]
 800ded6:	e9cd 7300 	strd	r7, r3, [sp]
 800deda:	4633      	mov	r3, r6
 800dedc:	f7fb f9a0 	bl	8009220 <_lv_blend_fill>
                if(grad_dir == LV_GRAD_DIR_VER) {
 800dee0:	2c01      	cmp	r4, #1
 800dee2:	d116      	bne.n	800df12 <lv_draw_rect+0x1446>
                    fill_area2.x1 = coords_bg.x1 + rout;
 800dee4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
                    _lv_blend_fill(clip, &fill_area2,
 800dee6:	a91d      	add	r1, sp, #116	; 0x74
                    fill_area2.x1 = coords_bg.x1 + rout;
 800dee8:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
                    _lv_blend_fill(clip, &fill_area2,
 800deec:	4658      	mov	r0, fp
 800deee:	9400      	str	r4, [sp, #0]
                    fill_area2.x1 = coords_bg.x1 + rout;
 800def0:	4413      	add	r3, r2
 800def2:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
                    fill_area2.x2 = coords_bg.x2 - rout;
 800def6:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 800defa:	1a9b      	subs	r3, r3, r2
                    _lv_blend_fill(clip, &fill_area2,
 800defc:	ee18 2a10 	vmov	r2, s16
                    fill_area2.x2 = coords_bg.x2 - rout;
 800df00:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
                    _lv_blend_fill(clip, &fill_area2,
 800df04:	f898 3002 	ldrb.w	r3, [r8, #2]
 800df08:	e9cd 5301 	strd	r5, r3, [sp, #4]
 800df0c:	2300      	movs	r3, #0
 800df0e:	f7fb f987 	bl	8009220 <_lv_blend_fill>
                fill_area2.x1 = coords_bg.x2 - rout + 1;
 800df12:	f9bd 3060 	ldrsh.w	r3, [sp, #96]	; 0x60
 800df16:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800df18:	1c5a      	adds	r2, r3, #1
                fill_area2.x2 = coords_bg.x2;
 800df1a:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
                int32_t mask_ofs = (coords_bg.x2 - rout + 1) - (draw_buf->area.x1 + draw_area.x1);
 800df1e:	eba3 030a 	sub.w	r3, r3, sl
                fill_area2.x1 = coords_bg.x2 - rout + 1;
 800df22:	1a52      	subs	r2, r2, r1
                int32_t mask_ofs = (coords_bg.x2 - rout + 1) - (draw_buf->area.x1 + draw_area.x1);
 800df24:	f9bd 1064 	ldrsh.w	r1, [sp, #100]	; 0x64
 800df28:	3301      	adds	r3, #1
                fill_area2.x1 = coords_bg.x2 - rout + 1;
 800df2a:	f8ad 2074 	strh.w	r2, [sp, #116]	; 0x74
                int32_t mask_ofs = (coords_bg.x2 - rout + 1) - (draw_buf->area.x1 + draw_area.x1);
 800df2e:	f9b9 2010 	ldrsh.w	r2, [r9, #16]
 800df32:	440a      	add	r2, r1
                _lv_blend_fill(clip, &fill_area2,
 800df34:	a91d      	add	r1, sp, #116	; 0x74
                int32_t mask_ofs = (coords_bg.x2 - rout + 1) - (draw_buf->area.x1 + draw_area.x1);
 800df36:	1a9b      	subs	r3, r3, r2
                _lv_blend_fill(clip, &fill_area2,
 800df38:	f898 2002 	ldrb.w	r2, [r8, #2]
 800df3c:	9202      	str	r2, [sp, #8]
 800df3e:	2b00      	cmp	r3, #0
 800df40:	bfac      	ite	ge
 800df42:	18f3      	addge	r3, r6, r3
 800df44:	1c33      	addlt	r3, r6, #0
 800df46:	9a06      	ldr	r2, [sp, #24]
 800df48:	e9cd 7200 	strd	r7, r2, [sp]
 800df4c:	ee18 2a10 	vmov	r2, s16
                    _lv_blend_fill(clip, &fill_area,
 800df50:	4658      	mov	r0, fp
 800df52:	f7fb f965 	bl	8009220 <_lv_blend_fill>
 800df56:	e00d      	b.n	800df74 <lv_draw_rect+0x14a8>
                if(grad_dir == LV_GRAD_DIR_HOR) {
 800df58:	2c02      	cmp	r4, #2
 800df5a:	d119      	bne.n	800df90 <lv_draw_rect+0x14c4>
                    _lv_blend_map(clip, &fill_area, grad_map, mask_buf, mask_res, opa2, dsc->blend_mode);
 800df5c:	f898 3002 	ldrb.w	r3, [r8, #2]
 800df60:	a91b      	add	r1, sp, #108	; 0x6c
 800df62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800df64:	4658      	mov	r0, fp
 800df66:	9302      	str	r3, [sp, #8]
 800df68:	9b06      	ldr	r3, [sp, #24]
 800df6a:	e9cd 7300 	strd	r7, r3, [sp]
 800df6e:	4633      	mov	r3, r6
 800df70:	f7fb fc12 	bl	8009798 <_lv_blend_map>
            fill_area.y1++;
 800df74:	f8bd 306e 	ldrh.w	r3, [sp, #110]	; 0x6e
 800df78:	3301      	adds	r3, #1
 800df7a:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
            fill_area.y2++;
 800df7e:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
 800df82:	3301      	adds	r3, #1
 800df84:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800df88:	9b07      	ldr	r3, [sp, #28]
 800df8a:	3301      	adds	r3, #1
 800df8c:	9307      	str	r3, [sp, #28]
 800df8e:	e698      	b.n	800dcc2 <lv_draw_rect+0x11f6>
                else if(grad_dir == LV_GRAD_DIR_VER) {
 800df90:	2c01      	cmp	r4, #1
 800df92:	f43f af67 	beq.w	800de64 <lv_draw_rect+0x1398>
                else if(other_mask_cnt != 0 || !split) {
 800df96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800df98:	2b00      	cmp	r3, #0
 800df9a:	f47f af63 	bne.w	800de64 <lv_draw_rect+0x1398>
 800df9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dfa0:	2b32      	cmp	r3, #50	; 0x32
 800dfa2:	dce7      	bgt.n	800df74 <lv_draw_rect+0x14a8>
 800dfa4:	e75e      	b.n	800de64 <lv_draw_rect+0x1398>
        lv_res_t res = lv_img_decoder_get_info(dsc->bg_img_src, &header);
 800dfa6:	a91b      	add	r1, sp, #108	; 0x6c
 800dfa8:	f8d8 000c 	ldr.w	r0, [r8, #12]
 800dfac:	f001 f8f6 	bl	800f19c <lv_img_decoder_get_info>
        if(res != LV_RES_OK) {
 800dfb0:	2801      	cmp	r0, #1
 800dfb2:	f47f ac4d 	bne.w	800d850 <lv_draw_rect+0xd84>
        lv_draw_img_dsc_init(&img_dsc);
 800dfb6:	a824      	add	r0, sp, #144	; 0x90
 800dfb8:	f7fc f96e 	bl	800a298 <lv_draw_img_dsc_init>
        img_dsc.blend_mode = dsc->blend_mode;
 800dfbc:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 800dfc0:	f898 2002 	ldrb.w	r2, [r8, #2]
 800dfc4:	f8bd 006e 	ldrh.w	r0, [sp, #110]	; 0x6e
 800dfc8:	f362 0303 	bfi	r3, r2, #0, #4
 800dfcc:	f88d 309c 	strb.w	r3, [sp, #156]	; 0x9c
        img_dsc.recolor = dsc->bg_img_recolor;
 800dfd0:	f8b8 3014 	ldrh.w	r3, [r8, #20]
 800dfd4:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
        img_dsc.recolor_opa = dsc->bg_img_recolor_opa;
 800dfd8:	f8b8 3016 	ldrh.w	r3, [r8, #22]
 800dfdc:	ba5b      	rev16	r3, r3
 800dfde:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
        if(dsc->bg_img_tiled == false) {
 800dfe2:	f898 3018 	ldrb.w	r3, [r8, #24]
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d137      	bne.n	800e05a <lv_draw_rect+0x158e>
            area.x1 = coords->x1 + lv_area_get_width(coords) / 2 - header.w / 2;
 800dfea:	9b05      	ldr	r3, [sp, #20]
            area.y1 = coords->y1 + lv_area_get_height(coords) / 2 - header.h / 2;
 800dfec:	f3c0 154a 	ubfx	r5, r0, #5, #11
            area.x1 = coords->x1 + lv_area_get_width(coords) / 2 - header.w / 2;
 800dff0:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800dff2:	881a      	ldrh	r2, [r3, #0]
            area.y2 = area.y1 + header.h - 1;
 800dff4:	3d01      	subs	r5, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800dff6:	889b      	ldrh	r3, [r3, #4]
            area.x1 = coords->x1 + lv_area_get_width(coords) / 2 - header.w / 2;
 800dff8:	f3c1 268a 	ubfx	r6, r1, #10, #11
 800dffc:	f3c1 21c9 	ubfx	r1, r1, #11, #10
 800e000:	3301      	adds	r3, #1
            area.x2 = area.x1 + header.w - 1;
 800e002:	3e01      	subs	r6, #1
            area.x1 = coords->x1 + lv_area_get_width(coords) / 2 - header.w / 2;
 800e004:	1a51      	subs	r1, r2, r1
 800e006:	1a9b      	subs	r3, r3, r2
 800e008:	f3c3 34c0 	ubfx	r4, r3, #15, #1
 800e00c:	fa04 f383 	sxtah	r3, r4, r3
 800e010:	eb01 0363 	add.w	r3, r1, r3, asr #1
 800e014:	b299      	uxth	r1, r3
            area.y1 = coords->y1 + lv_area_get_height(coords) / 2 - header.h / 2;
 800e016:	9b05      	ldr	r3, [sp, #20]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800e018:	88dc      	ldrh	r4, [r3, #6]
 800e01a:	885a      	ldrh	r2, [r3, #2]
 800e01c:	3401      	adds	r4, #1
            area.x1 = coords->x1 + lv_area_get_width(coords) / 2 - header.w / 2;
 800e01e:	f8ad 1074 	strh.w	r1, [sp, #116]	; 0x74
            area.x2 = area.x1 + header.w - 1;
 800e022:	4431      	add	r1, r6
 800e024:	1aa4      	subs	r4, r4, r2
 800e026:	f8ad 1078 	strh.w	r1, [sp, #120]	; 0x78
            lv_draw_img(&area, clip, dsc->bg_img_src, &img_dsc);
 800e02a:	4659      	mov	r1, fp
            area.y1 = coords->y1 + lv_area_get_height(coords) / 2 - header.h / 2;
 800e02c:	f3c4 33c0 	ubfx	r3, r4, #15, #1
 800e030:	fa03 f484 	sxtah	r4, r3, r4
 800e034:	f3c0 1389 	ubfx	r3, r0, #6, #10
            lv_draw_img(&area, clip, dsc->bg_img_src, &img_dsc);
 800e038:	a81d      	add	r0, sp, #116	; 0x74
            area.y1 = coords->y1 + lv_area_get_height(coords) / 2 - header.h / 2;
 800e03a:	1ad3      	subs	r3, r2, r3
            lv_draw_img(&area, clip, dsc->bg_img_src, &img_dsc);
 800e03c:	f8d8 200c 	ldr.w	r2, [r8, #12]
            area.y1 = coords->y1 + lv_area_get_height(coords) / 2 - header.h / 2;
 800e040:	eb03 0364 	add.w	r3, r3, r4, asr #1
 800e044:	b29b      	uxth	r3, r3
 800e046:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
            area.y2 = area.y1 + header.h - 1;
 800e04a:	442b      	add	r3, r5
 800e04c:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
            lv_draw_img(&area, clip, dsc->bg_img_src, &img_dsc);
 800e050:	ab24      	add	r3, sp, #144	; 0x90
 800e052:	f7fc f955 	bl	800a300 <lv_draw_img>
 800e056:	f7ff bbfb 	b.w	800d850 <lv_draw_rect+0xd84>
            area.y1 = coords->y1;
 800e05a:	9b05      	ldr	r3, [sp, #20]
            area.y2 = area.y1 + header.h - 1;
 800e05c:	f3c0 104a 	ubfx	r0, r0, #5, #11
            area.y1 = coords->y1;
 800e060:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
            area.y2 = area.y1 + header.h - 1;
 800e064:	3801      	subs	r0, #1
 800e066:	4418      	add	r0, r3
            area.y1 = coords->y1;
 800e068:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
            area.y2 = area.y1 + header.h - 1;
 800e06c:	f8ad 007a 	strh.w	r0, [sp, #122]	; 0x7a
            for(; area.y1 <= coords->y2; area.y1 += header.h, area.y2 += header.h) {
 800e070:	9b05      	ldr	r3, [sp, #20]
 800e072:	f9bd 2076 	ldrsh.w	r2, [sp, #118]	; 0x76
 800e076:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e07a:	429a      	cmp	r2, r3
 800e07c:	f73f abe8 	bgt.w	800d850 <lv_draw_rect+0xd84>
                area.x1 = coords->x1;
 800e080:	9b05      	ldr	r3, [sp, #20]
 800e082:	f9b3 2000 	ldrsh.w	r2, [r3]
                area.x2 = area.x1 + header.w - 1;
 800e086:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
                area.x1 = coords->x1;
 800e088:	f8ad 2074 	strh.w	r2, [sp, #116]	; 0x74
                area.x2 = area.x1 + header.w - 1;
 800e08c:	f3c3 238a 	ubfx	r3, r3, #10, #11
 800e090:	3b01      	subs	r3, #1
                for(; area.x1 <= coords->x2; area.x1 += header.w, area.x2 += header.w) {
 800e092:	4413      	add	r3, r2
 800e094:	f9bd 2074 	ldrsh.w	r2, [sp, #116]	; 0x74
 800e098:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
 800e09c:	9b05      	ldr	r3, [sp, #20]
 800e09e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800e0a2:	429a      	cmp	r2, r3
 800e0a4:	dd0e      	ble.n	800e0c4 <lv_draw_rect+0x15f8>
            for(; area.y1 <= coords->y2; area.y1 += header.h, area.y2 += header.h) {
 800e0a6:	f8bd 306e 	ldrh.w	r3, [sp, #110]	; 0x6e
 800e0aa:	f8bd 2076 	ldrh.w	r2, [sp, #118]	; 0x76
 800e0ae:	f3c3 134a 	ubfx	r3, r3, #5, #11
 800e0b2:	441a      	add	r2, r3
 800e0b4:	f8ad 2076 	strh.w	r2, [sp, #118]	; 0x76
 800e0b8:	f8bd 207a 	ldrh.w	r2, [sp, #122]	; 0x7a
 800e0bc:	4413      	add	r3, r2
 800e0be:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
 800e0c2:	e7d5      	b.n	800e070 <lv_draw_rect+0x15a4>
                    lv_draw_img(&area, clip, dsc->bg_img_src, &img_dsc);
 800e0c4:	ab24      	add	r3, sp, #144	; 0x90
 800e0c6:	f8d8 200c 	ldr.w	r2, [r8, #12]
 800e0ca:	4659      	mov	r1, fp
 800e0cc:	a81d      	add	r0, sp, #116	; 0x74
 800e0ce:	f7fc f917 	bl	800a300 <lv_draw_img>
                for(; area.x1 <= coords->x2; area.x1 += header.w, area.x2 += header.w) {
 800e0d2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e0d4:	f8bd 2074 	ldrh.w	r2, [sp, #116]	; 0x74
 800e0d8:	f3c3 238a 	ubfx	r3, r3, #10, #11
 800e0dc:	441a      	add	r2, r3
 800e0de:	f8ad 2074 	strh.w	r2, [sp, #116]	; 0x74
 800e0e2:	f8bd 2078 	ldrh.w	r2, [sp, #120]	; 0x78
 800e0e6:	e7d4      	b.n	800e092 <lv_draw_rect+0x15c6>
        if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 800e0e8:	f1b9 0ffe 	cmp.w	r9, #254	; 0xfe
 800e0ec:	bf28      	it	cs
 800e0ee:	f04f 09ff 	movcs.w	r9, #255	; 0xff
        lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 800e0f2:	f7fa f941 	bl	8008378 <_lv_refr_get_disp_refreshing>
        lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp);
 800e0f6:	f008 fc1b 	bl	8016930 <lv_disp_get_draw_buf>
        is_common = _lv_area_intersect(&draw_area, coords, clip);
 800e0fa:	465a      	mov	r2, fp
        lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp);
 800e0fc:	4607      	mov	r7, r0
        is_common = _lv_area_intersect(&draw_area, coords, clip);
 800e0fe:	9905      	ldr	r1, [sp, #20]
 800e100:	a819      	add	r0, sp, #100	; 0x64
 800e102:	f008 fec8 	bl	8016e96 <_lv_area_intersect>
        if(is_common == false) return;
 800e106:	2800      	cmp	r0, #0
 800e108:	f43f ac1b 	beq.w	800d942 <lv_draw_rect+0xe76>
        draw_area.x1 -= disp_area->x1;
 800e10c:	8a3a      	ldrh	r2, [r7, #16]
 800e10e:	f8bd 0064 	ldrh.w	r0, [sp, #100]	; 0x64
        draw_area.y1 -= disp_area->y1;
 800e112:	8a7d      	ldrh	r5, [r7, #18]
        draw_area.x1 -= disp_area->x1;
 800e114:	1a83      	subs	r3, r0, r2
        draw_area.y1 -= disp_area->y1;
 800e116:	f8bd 1066 	ldrh.w	r1, [sp, #102]	; 0x66
        draw_area.x1 -= disp_area->x1;
 800e11a:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
        draw_area.y1 -= disp_area->y1;
 800e11e:	1b49      	subs	r1, r1, r5
        draw_area.x2 -= disp_area->x1;
 800e120:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
        draw_area.y1 -= disp_area->y1;
 800e124:	f8ad 1066 	strh.w	r1, [sp, #102]	; 0x66
        draw_area.x2 -= disp_area->x1;
 800e128:	1a9a      	subs	r2, r3, r2
 800e12a:	f8ad 2068 	strh.w	r2, [sp, #104]	; 0x68
        draw_area.y2 -= disp_area->y1;
 800e12e:	f8bd 206a 	ldrh.w	r2, [sp, #106]	; 0x6a
 800e132:	1b52      	subs	r2, r2, r5
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800e134:	1c5d      	adds	r5, r3, #1
 800e136:	1a2d      	subs	r5, r5, r0
 800e138:	f8ad 206a 	strh.w	r2, [sp, #106]	; 0x6a
 800e13c:	b22d      	sxth	r5, r5
        lv_opa_t * mask_buf = lv_mem_buf_get(draw_area_w);
 800e13e:	4628      	mov	r0, r5
 800e140:	f009 fcaa 	bl	8017a98 <lv_mem_buf_get>
        if(rout > 0) {
 800e144:	2c00      	cmp	r4, #0
        lv_opa_t * mask_buf = lv_mem_buf_get(draw_area_w);
 800e146:	4682      	mov	sl, r0
        if(rout > 0) {
 800e148:	dd65      	ble.n	800e216 <lv_draw_rect+0x174a>
            lv_draw_mask_radius_init(&mask_rout_param, coords, rout, false);
 800e14a:	2300      	movs	r3, #0
 800e14c:	b222      	sxth	r2, r4
 800e14e:	9905      	ldr	r1, [sp, #20]
 800e150:	a81d      	add	r0, sp, #116	; 0x74
 800e152:	f7fe f8fb 	bl	800c34c <lv_draw_mask_radius_init>
            mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
 800e156:	2100      	movs	r1, #0
 800e158:	a81d      	add	r0, sp, #116	; 0x74
 800e15a:	f7fd ff91 	bl	800c080 <lv_draw_mask_add>
 800e15e:	9006      	str	r0, [sp, #24]
        lv_draw_mask_radius_init(&mask_rin_param, &area_inner, rout - dsc->border_width, true);
 800e160:	f8b8 201c 	ldrh.w	r2, [r8, #28]
 800e164:	2301      	movs	r3, #1
 800e166:	a917      	add	r1, sp, #92	; 0x5c
 800e168:	a824      	add	r0, sp, #144	; 0x90
 800e16a:	1aa2      	subs	r2, r4, r2
 800e16c:	b212      	sxth	r2, r2
 800e16e:	f7fe f8ed 	bl	800c34c <lv_draw_mask_radius_init>
        int16_t mask_rin_id = lv_draw_mask_add(&mask_rin_param, NULL);
 800e172:	2100      	movs	r1, #0
 800e174:	a824      	add	r0, sp, #144	; 0x90
 800e176:	f7fd ff83 	bl	800c080 <lv_draw_mask_add>
        int32_t corner_size = LV_MAX(rout, dsc->border_width - 1);
 800e17a:	f9b8 301c 	ldrsh.w	r3, [r8, #28]
        fill_area.y1 = disp_area->y1 + draw_area.y1;
 800e17e:	f9bd 6066 	ldrsh.w	r6, [sp, #102]	; 0x66
        int16_t mask_rin_id = lv_draw_mask_add(&mask_rin_param, NULL);
 800e182:	ee08 0a10 	vmov	s16, r0
        int32_t corner_size = LV_MAX(rout, dsc->border_width - 1);
 800e186:	429c      	cmp	r4, r3
 800e188:	bfb8      	it	lt
 800e18a:	f103 34ff 	addlt.w	r4, r3, #4294967295
        lv_color_t color = dsc->border_color;
 800e18e:	f8b8 301a 	ldrh.w	r3, [r8, #26]
 800e192:	ee08 3a90 	vmov	s17, r3
        lv_blend_mode_t blend_mode = dsc->blend_mode;
 800e196:	f898 3002 	ldrb.w	r3, [r8, #2]
 800e19a:	9307      	str	r3, [sp, #28]
        fill_area.x1 = coords->x1;
 800e19c:	9b05      	ldr	r3, [sp, #20]
 800e19e:	f9b3 2000 	ldrsh.w	r2, [r3]
        fill_area.x2 = coords->x2;
 800e1a2:	889b      	ldrh	r3, [r3, #4]
        fill_area.x1 = coords->x1;
 800e1a4:	f8ad 206c 	strh.w	r2, [sp, #108]	; 0x6c
        fill_area.x2 = coords->x2;
 800e1a8:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
        fill_area.y1 = disp_area->y1 + draw_area.y1;
 800e1ac:	8a7b      	ldrh	r3, [r7, #18]
 800e1ae:	4433      	add	r3, r6
 800e1b0:	b21b      	sxth	r3, r3
 800e1b2:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
        fill_area.y2 = fill_area.y1;
 800e1b6:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
        if(dsc->border_side == LV_BORDER_SIDE_LEFT) fill_area.x2 = coords->x1 + corner_size;
 800e1ba:	f898 301f 	ldrb.w	r3, [r8, #31]
 800e1be:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800e1c2:	2b08      	cmp	r3, #8
 800e1c4:	bf04      	itt	eq
 800e1c6:	1912      	addeq	r2, r2, r4
 800e1c8:	f8ad 2070 	strheq.w	r2, [sp, #112]	; 0x70
        volatile bool top_only = false;
 800e1cc:	2200      	movs	r2, #0
        if(dsc->border_side == LV_BORDER_SIDE_TOP) top_only = true;
 800e1ce:	2b04      	cmp	r3, #4
        volatile bool top_only = false;
 800e1d0:	f88d 2044 	strb.w	r2, [sp, #68]	; 0x44
        volatile bool bottom_only = false;
 800e1d4:	f88d 204c 	strb.w	r2, [sp, #76]	; 0x4c
        if(dsc->border_side == LV_BORDER_SIDE_TOP) top_only = true;
 800e1d8:	d121      	bne.n	800e21e <lv_draw_rect+0x1752>
 800e1da:	2301      	movs	r3, #1
 800e1dc:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
        volatile bool normal = !top_only && !bottom_only ? true : false;
 800e1e0:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 800e1e4:	bb3b      	cbnz	r3, 800e236 <lv_draw_rect+0x176a>
 800e1e6:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 800e1ea:	f083 0301 	eor.w	r3, r3, #1
 800e1ee:	f003 0301 	and.w	r3, r3, #1
 800e1f2:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800e1f6:	f9bd 306a 	ldrsh.w	r3, [sp, #106]	; 0x6a
 800e1fa:	429e      	cmp	r6, r3
 800e1fc:	dd1d      	ble.n	800e23a <lv_draw_rect+0x176e>
        lv_draw_mask_remove_id(mask_rin_id);
 800e1fe:	ee18 0a10 	vmov	r0, s16
 800e202:	f7fd ff75 	bl	800c0f0 <lv_draw_mask_remove_id>
        lv_draw_mask_remove_id(mask_rout_id);
 800e206:	9806      	ldr	r0, [sp, #24]
 800e208:	f7fd ff72 	bl	800c0f0 <lv_draw_mask_remove_id>
        lv_mem_buf_release(mask_buf);
 800e20c:	4650      	mov	r0, sl
 800e20e:	f009 fa9f 	bl	8017750 <lv_mem_buf_release>
 800e212:	f7ff bb96 	b.w	800d942 <lv_draw_rect+0xe76>
        int16_t mask_rout_id = LV_MASK_ID_INV;
 800e216:	f04f 33ff 	mov.w	r3, #4294967295
 800e21a:	9306      	str	r3, [sp, #24]
 800e21c:	e7a0      	b.n	800e160 <lv_draw_rect+0x1694>
        if(dsc->border_side == LV_BORDER_SIDE_BOTTOM) bottom_only = true;
 800e21e:	2b02      	cmp	r3, #2
 800e220:	d005      	beq.n	800e22e <lv_draw_rect+0x1762>
        if(dsc->border_side == (LV_BORDER_SIDE_TOP | LV_BORDER_SIDE_BOTTOM)) {
 800e222:	2b06      	cmp	r3, #6
 800e224:	d1dc      	bne.n	800e1e0 <lv_draw_rect+0x1714>
            top_only = true;
 800e226:	2301      	movs	r3, #1
 800e228:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
 800e22c:	e000      	b.n	800e230 <lv_draw_rect+0x1764>
        if(dsc->border_side == LV_BORDER_SIDE_BOTTOM) bottom_only = true;
 800e22e:	2301      	movs	r3, #1
            bottom_only = true;
 800e230:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 800e234:	e7d4      	b.n	800e1e0 <lv_draw_rect+0x1714>
        volatile bool normal = !top_only && !bottom_only ? true : false;
 800e236:	2300      	movs	r3, #0
 800e238:	e7d9      	b.n	800e1ee <lv_draw_rect+0x1722>
            if(normal ||
 800e23a:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 800e23e:	b99b      	cbnz	r3, 800e268 <lv_draw_rect+0x179c>
               (top_only && fill_area.y1 <= coords->y1 + corner_size) ||
 800e240:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 800e244:	f9bd 206e 	ldrsh.w	r2, [sp, #110]	; 0x6e
            if(normal ||
 800e248:	b12b      	cbz	r3, 800e256 <lv_draw_rect+0x178a>
               (top_only && fill_area.y1 <= coords->y1 + corner_size) ||
 800e24a:	9b05      	ldr	r3, [sp, #20]
 800e24c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e250:	4423      	add	r3, r4
 800e252:	429a      	cmp	r2, r3
 800e254:	dd08      	ble.n	800e268 <lv_draw_rect+0x179c>
               (bottom_only && fill_area.y1 >= coords->y2 - corner_size)) {
 800e256:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
               (top_only && fill_area.y1 <= coords->y1 + corner_size) ||
 800e25a:	b303      	cbz	r3, 800e29e <lv_draw_rect+0x17d2>
               (bottom_only && fill_area.y1 >= coords->y2 - corner_size)) {
 800e25c:	9b05      	ldr	r3, [sp, #20]
 800e25e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e262:	1b1b      	subs	r3, r3, r4
 800e264:	429a      	cmp	r2, r3
 800e266:	db1a      	blt.n	800e29e <lv_draw_rect+0x17d2>
                lv_memset_ff(mask_buf, draw_area_w);
 800e268:	4629      	mov	r1, r5
 800e26a:	4650      	mov	r0, sl
 800e26c:	f009 fc91 	bl	8017b92 <lv_memset_ff>
                mask_res = lv_draw_mask_apply(mask_buf, draw_buf->area.x1 + draw_area.x1, draw_buf->area.y1 + h, draw_area_w);
 800e270:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 800e274:	8a7a      	ldrh	r2, [r7, #18]
 800e276:	4650      	mov	r0, sl
 800e278:	8a39      	ldrh	r1, [r7, #16]
 800e27a:	4432      	add	r2, r6
 800e27c:	4419      	add	r1, r3
 800e27e:	462b      	mov	r3, r5
 800e280:	b212      	sxth	r2, r2
 800e282:	b209      	sxth	r1, r1
 800e284:	f7fd ff12 	bl	800c0ac <lv_draw_mask_apply>
                _lv_blend_fill(clip, &fill_area, color, mask_buf, mask_res, opa, blend_mode);
 800e288:	9b07      	ldr	r3, [sp, #28]
 800e28a:	9000      	str	r0, [sp, #0]
 800e28c:	ee18 2a90 	vmov	r2, s17
 800e290:	a91b      	add	r1, sp, #108	; 0x6c
 800e292:	4658      	mov	r0, fp
 800e294:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800e298:	4653      	mov	r3, sl
 800e29a:	f7fa ffc1 	bl	8009220 <_lv_blend_fill>
            fill_area.y1++;
 800e29e:	f8bd 306e 	ldrh.w	r3, [sp, #110]	; 0x6e
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800e2a2:	3601      	adds	r6, #1
            fill_area.y1++;
 800e2a4:	3301      	adds	r3, #1
 800e2a6:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
            fill_area.y2++;
 800e2aa:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
 800e2ae:	3301      	adds	r3, #1
 800e2b0:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800e2b4:	e79f      	b.n	800e1f6 <lv_draw_rect+0x172a>
            if(grad_dir == LV_GRAD_DIR_VER) {
 800e2b6:	2c01      	cmp	r4, #1
            opa2 = opa;
 800e2b8:	9506      	str	r5, [sp, #24]
            if(grad_dir == LV_GRAD_DIR_VER) {
 800e2ba:	f43f adde 	beq.w	800de7a <lv_draw_rect+0x13ae>
                mask_res = LV_DRAW_MASK_RES_FULL_COVER;
 800e2be:	2701      	movs	r7, #1
 800e2c0:	e5e1      	b.n	800de86 <lv_draw_rect+0x13ba>
                if(grad_dir == LV_GRAD_DIR_HOR) {
 800e2c2:	2c02      	cmp	r4, #2
 800e2c4:	f47f ae67 	bne.w	800df96 <lv_draw_rect+0x14ca>
 800e2c8:	e648      	b.n	800df5c <lv_draw_rect+0x1490>

0800e2ca <lv_color_mix>:
{
 800e2ca:	b5f0      	push	{r4, r5, r6, r7, lr}
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800e2cc:	f1c2 05ff 	rsb	r5, r2, #255	; 0xff
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800e2d0:	f3c1 1445 	ubfx	r4, r1, #5, #6
 800e2d4:	f3c0 1345 	ubfx	r3, r0, #5, #6
 800e2d8:	f248 0681 	movw	r6, #32897	; 0x8081
 800e2dc:	436c      	muls	r4, r5
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800e2de:	f001 071f 	and.w	r7, r1, #31
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800e2e2:	f3c1 21c4 	ubfx	r1, r1, #11, #5
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800e2e6:	fb03 4302 	mla	r3, r3, r2, r4
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800e2ea:	436f      	muls	r7, r5
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800e2ec:	3380      	adds	r3, #128	; 0x80
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800e2ee:	434d      	muls	r5, r1
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800e2f0:	4373      	muls	r3, r6
    return ret;
 800e2f2:	f3c3 54c5 	ubfx	r4, r3, #23, #6
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800e2f6:	f000 031f 	and.w	r3, r0, #31
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800e2fa:	f3c0 20c4 	ubfx	r0, r0, #11, #5
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800e2fe:	fb03 7302 	mla	r3, r3, r2, r7
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800e302:	fb00 5202 	mla	r2, r0, r2, r5
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800e306:	3380      	adds	r3, #128	; 0x80
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800e308:	3280      	adds	r2, #128	; 0x80
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800e30a:	4373      	muls	r3, r6
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800e30c:	4372      	muls	r2, r6
    return ret;
 800e30e:	f3c3 53c4 	ubfx	r3, r3, #23, #5
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800e312:	0dd0      	lsrs	r0, r2, #23
    return ret;
 800e314:	ea43 1344 	orr.w	r3, r3, r4, lsl #5
}
 800e318:	ea43 20c0 	orr.w	r0, r3, r0, lsl #11
 800e31c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e31e <lv_memcpy_small>:
LV_ATTRIBUTE_FAST_MEM static inline void * lv_memcpy_small(void * dst, const void * src, size_t len)
{
    uint8_t * d8 = (uint8_t *)dst;
    const uint8_t * s8 = (const uint8_t *)src;

    while(len) {
 800e31e:	3901      	subs	r1, #1
 800e320:	4402      	add	r2, r0
    uint8_t * d8 = (uint8_t *)dst;
 800e322:	4603      	mov	r3, r0
{
 800e324:	b510      	push	{r4, lr}
    while(len) {
 800e326:	4293      	cmp	r3, r2
 800e328:	d100      	bne.n	800e32c <lv_memcpy_small+0xe>
        s8++;
        len--;
    }

    return dst;
}
 800e32a:	bd10      	pop	{r4, pc}
        *d8 = *s8;
 800e32c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e330:	f803 4b01 	strb.w	r4, [r3], #1
        len--;
 800e334:	e7f7      	b.n	800e326 <lv_memcpy_small+0x8>

0800e336 <lv_img_buf_get_px_color>:
 * Not used in other cases.
 * @param safe true: check out of bounds
 * @return color of the point
 */
lv_color_t lv_img_buf_get_px_color(lv_img_dsc_t * dsc, lv_coord_t x, lv_coord_t y, lv_color_t color)
{
 800e336:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e338:	4607      	mov	r7, r0
 800e33a:	4615      	mov	r5, r2
    lv_color_t p_color = lv_color_black();
    uint8_t * buf_u8 = (uint8_t *)dsc->data;
 800e33c:	6886      	ldr	r6, [r0, #8]
    lv_color_t p_color = lv_color_black();
 800e33e:	2200      	movs	r2, #0

    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED ||
 800e340:	7800      	ldrb	r0, [r0, #0]
{
 800e342:	460c      	mov	r4, r1
    lv_color_t p_color = lv_color_black();
 800e344:	f8ad 2004 	strh.w	r2, [sp, #4]
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED ||
 800e348:	f000 021f 	and.w	r2, r0, #31
 800e34c:	1f11      	subs	r1, r2, #4
 800e34e:	2902      	cmp	r1, #2
 800e350:	d816      	bhi.n	800e380 <lv_img_buf_get_px_color+0x4a>
       dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA) {
        uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf) >> 3;
 800e352:	4610      	mov	r0, r2
 800e354:	f7fb ffb2 	bl	800a2bc <lv_img_cf_get_px_size>
        uint32_t px     = dsc->header.w * y * px_size + x * px_size;
 800e358:	683b      	ldr	r3, [r7, #0]
        uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf) >> 3;
 800e35a:	f3c0 00c7 	ubfx	r0, r0, #3, #8
        lv_memcpy_small(&p_color, &buf_u8[px], sizeof(lv_color_t));
 800e35e:	2202      	movs	r2, #2
        uint32_t px     = dsc->header.w * y * px_size + x * px_size;
 800e360:	f3c3 238a 	ubfx	r3, r3, #10, #11
 800e364:	fb10 f104 	smulbb	r1, r0, r4
 800e368:	fb13 f305 	smulbb	r3, r3, r5
 800e36c:	fb00 1103 	mla	r1, r0, r3, r1
        lv_memcpy_small(&p_color, &buf_u8[px], sizeof(lv_color_t));
 800e370:	a801      	add	r0, sp, #4
 800e372:	4431      	add	r1, r6
 800e374:	f7ff ffd3 	bl	800e31e <lv_memcpy_small>
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
            dsc->header.cf == LV_IMG_CF_ALPHA_4BIT || dsc->header.cf == LV_IMG_CF_ALPHA_8BIT) {
        p_color = color;
    }
    return p_color;
}
 800e378:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 800e37c:	b003      	add	sp, #12
 800e37e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_1BIT) {
 800e380:	2a07      	cmp	r2, #7
 800e382:	d114      	bne.n	800e3ae <lv_img_buf_get_px_color+0x78>
        p_color.full = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
 800e384:	f004 0307 	and.w	r3, r4, #7
 800e388:	2101      	movs	r1, #1
 800e38a:	f1c3 0207 	rsb	r2, r3, #7
        uint32_t px  = ((dsc->header.w + 7) >> 3) * y + x;
 800e38e:	683b      	ldr	r3, [r7, #0]
 800e390:	f3c3 238a 	ubfx	r3, r3, #10, #11
        p_color.full = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
 800e394:	4091      	lsls	r1, r2
        uint32_t px  = ((dsc->header.w + 7) >> 3) * y + x;
 800e396:	3307      	adds	r3, #7
 800e398:	10db      	asrs	r3, r3, #3
        p_color.full = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
 800e39a:	fb05 6303 	mla	r3, r5, r3, r6
 800e39e:	eb03 04e4 	add.w	r4, r3, r4, asr #3
 800e3a2:	7a23      	ldrb	r3, [r4, #8]
 800e3a4:	400b      	ands	r3, r1
 800e3a6:	4113      	asrs	r3, r2
        p_color = color;
 800e3a8:	f8ad 3004 	strh.w	r3, [sp, #4]
 800e3ac:	e7e4      	b.n	800e378 <lv_img_buf_get_px_color+0x42>
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_2BIT) {
 800e3ae:	2a08      	cmp	r2, #8
 800e3b0:	d116      	bne.n	800e3e0 <lv_img_buf_get_px_color+0xaa>
        uint32_t px  = ((dsc->header.w + 3) >> 2) * y + x;
 800e3b2:	6838      	ldr	r0, [r7, #0]
        uint8_t bit = (x & 0x3) * 2;
 800e3b4:	f004 0203 	and.w	r2, r4, #3
        p_color.full = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
 800e3b8:	2103      	movs	r1, #3
        uint32_t px  = ((dsc->header.w + 3) >> 2) * y + x;
 800e3ba:	f3c0 208a 	ubfx	r0, r0, #10, #11
        p_color.full = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
 800e3be:	0052      	lsls	r2, r2, #1
        uint32_t px  = ((dsc->header.w + 3) >> 2) * y + x;
 800e3c0:	3003      	adds	r0, #3
        p_color.full = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
 800e3c2:	f1c2 0206 	rsb	r2, r2, #6
        uint32_t px  = ((dsc->header.w + 3) >> 2) * y + x;
 800e3c6:	1080      	asrs	r0, r0, #2
        p_color.full = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
 800e3c8:	fb05 6300 	mla	r3, r5, r0, r6
 800e3cc:	eb03 04a4 	add.w	r4, r3, r4, asr #2
 800e3d0:	7c23      	ldrb	r3, [r4, #16]
        p_color.full = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
 800e3d2:	4091      	lsls	r1, r2
 800e3d4:	400b      	ands	r3, r1
 800e3d6:	fa43 f202 	asr.w	r2, r3, r2
 800e3da:	f8ad 2004 	strh.w	r2, [sp, #4]
 800e3de:	e7cb      	b.n	800e378 <lv_img_buf_get_px_color+0x42>
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_4BIT) {
 800e3e0:	2a09      	cmp	r2, #9
 800e3e2:	d111      	bne.n	800e408 <lv_img_buf_get_px_color+0xd2>
        uint32_t px  = ((dsc->header.w + 1) >> 1) * y + x;
 800e3e4:	683b      	ldr	r3, [r7, #0]
        uint8_t bit = (x & 0x1) * 4;
 800e3e6:	f004 0201 	and.w	r2, r4, #1
        p_color.full = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
 800e3ea:	210f      	movs	r1, #15
        uint32_t px  = ((dsc->header.w + 1) >> 1) * y + x;
 800e3ec:	f3c3 238a 	ubfx	r3, r3, #10, #11
        p_color.full = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
 800e3f0:	0092      	lsls	r2, r2, #2
        uint32_t px  = ((dsc->header.w + 1) >> 1) * y + x;
 800e3f2:	3301      	adds	r3, #1
        p_color.full = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
 800e3f4:	f1c2 0204 	rsb	r2, r2, #4
        uint32_t px  = ((dsc->header.w + 1) >> 1) * y + x;
 800e3f8:	105b      	asrs	r3, r3, #1
        p_color.full = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
 800e3fa:	fb05 6303 	mla	r3, r5, r3, r6
 800e3fe:	eb03 0464 	add.w	r4, r3, r4, asr #1
 800e402:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800e406:	e7e4      	b.n	800e3d2 <lv_img_buf_get_px_color+0x9c>
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_8BIT) {
 800e408:	2a0a      	cmp	r2, #10
 800e40a:	d108      	bne.n	800e41e <lv_img_buf_get_px_color+0xe8>
        uint32_t px  = dsc->header.w * y + x;
 800e40c:	683b      	ldr	r3, [r7, #0]
 800e40e:	f3c3 238a 	ubfx	r3, r3, #10, #11
 800e412:	fb15 4303 	smlabb	r3, r5, r3, r4
        p_color.full = buf_u8[px];
 800e416:	4433      	add	r3, r6
 800e418:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 800e41c:	e7c4      	b.n	800e3a8 <lv_img_buf_get_px_color+0x72>
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
 800e41e:	3a0b      	subs	r2, #11
 800e420:	2a03      	cmp	r2, #3
 800e422:	d8a9      	bhi.n	800e378 <lv_img_buf_get_px_color+0x42>
 800e424:	e7c0      	b.n	800e3a8 <lv_img_buf_get_px_color+0x72>
	...

0800e428 <lv_img_buf_get_px_alpha>:
 * @param y x coordinate of the point to set
 * @param safe true: check out of bounds
 * @return alpha value of the point
 */
lv_opa_t lv_img_buf_get_px_alpha(lv_img_dsc_t * dsc, lv_coord_t x, lv_coord_t y)
{
 800e428:	460b      	mov	r3, r1
    uint8_t * buf_u8 = (uint8_t *)dsc->data;

    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA) {
 800e42a:	7801      	ldrb	r1, [r0, #0]
 800e42c:	f001 011f 	and.w	r1, r1, #31
 800e430:	2905      	cmp	r1, #5
{
 800e432:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e434:	4604      	mov	r4, r0
 800e436:	b085      	sub	sp, #20
    uint8_t * buf_u8 = (uint8_t *)dsc->data;
 800e438:	6885      	ldr	r5, [r0, #8]
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA) {
 800e43a:	d10a      	bne.n	800e452 <lv_img_buf_get_px_alpha+0x2a>
        uint32_t px = dsc->header.w * y * LV_IMG_PX_SIZE_ALPHA_BYTE + x * LV_IMG_PX_SIZE_ALPHA_BYTE;
 800e43c:	6801      	ldr	r1, [r0, #0]
 800e43e:	f3c1 218a 	ubfx	r1, r1, #10, #11
 800e442:	fb12 3301 	smlabb	r3, r2, r1, r3
        return buf_u8[px + LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 800e446:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e44a:	442b      	add	r3, r5
 800e44c:	7898      	ldrb	r0, [r3, #2]
        uint32_t px = dsc->header.w * y + x;
        return buf_u8[px];
    }

    return LV_OPA_COVER;
}
 800e44e:	b005      	add	sp, #20
 800e450:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT) {
 800e452:	290b      	cmp	r1, #11
 800e454:	d114      	bne.n	800e480 <lv_img_buf_get_px_alpha+0x58>
        uint32_t px    = ((dsc->header.w + 7) >> 3) * y + x;
 800e456:	6800      	ldr	r0, [r0, #0]
        uint8_t px_opa = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
 800e458:	f003 0607 	and.w	r6, r3, #7
        uint32_t px    = ((dsc->header.w + 7) >> 3) * y + x;
 800e45c:	10d9      	asrs	r1, r3, #3
 800e45e:	f3c0 208a 	ubfx	r0, r0, #10, #11
        uint8_t px_opa = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
 800e462:	f1c6 0607 	rsb	r6, r6, #7
        uint32_t px    = ((dsc->header.w + 7) >> 3) * y + x;
 800e466:	3007      	adds	r0, #7
 800e468:	10c0      	asrs	r0, r0, #3
        uint8_t px_opa = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
 800e46a:	fb02 5300 	mla	r3, r2, r0, r5
 800e46e:	2201      	movs	r2, #1
 800e470:	5c5b      	ldrb	r3, [r3, r1]
 800e472:	40b2      	lsls	r2, r6
 800e474:	4013      	ands	r3, r2
        return px_opa ? LV_OPA_TRANSP : LV_OPA_COVER;
 800e476:	4133      	asrs	r3, r6
 800e478:	bf0c      	ite	eq
 800e47a:	20ff      	moveq	r0, #255	; 0xff
 800e47c:	2000      	movne	r0, #0
 800e47e:	e7e6      	b.n	800e44e <lv_img_buf_get_px_alpha+0x26>
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_2BIT) {
 800e480:	290c      	cmp	r1, #12
 800e482:	d118      	bne.n	800e4b6 <lv_img_buf_get_px_alpha+0x8e>
        uint32_t px    = ((dsc->header.w + 3) >> 2) * y + x;
 800e484:	6800      	ldr	r0, [r0, #0]
        uint8_t bit = (x & 0x3) * 2;
 800e486:	f003 0603 	and.w	r6, r3, #3
        const uint8_t opa_table[4] = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
 800e48a:	4920      	ldr	r1, [pc, #128]	; (800e50c <lv_img_buf_get_px_alpha+0xe4>)
        uint32_t px    = ((dsc->header.w + 3) >> 2) * y + x;
 800e48c:	f3c0 208a 	ubfx	r0, r0, #10, #11
        uint8_t px_opa = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
 800e490:	0076      	lsls	r6, r6, #1
        const uint8_t opa_table[4] = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
 800e492:	9100      	str	r1, [sp, #0]
        uint32_t px    = ((dsc->header.w + 3) >> 2) * y + x;
 800e494:	1099      	asrs	r1, r3, #2
 800e496:	3003      	adds	r0, #3
        uint8_t px_opa = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
 800e498:	f1c6 0606 	rsb	r6, r6, #6
        uint32_t px    = ((dsc->header.w + 3) >> 2) * y + x;
 800e49c:	1080      	asrs	r0, r0, #2
        uint8_t px_opa = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
 800e49e:	fb02 5300 	mla	r3, r2, r0, r5
 800e4a2:	2203      	movs	r2, #3
 800e4a4:	5c5b      	ldrb	r3, [r3, r1]
        uint8_t px_opa = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
 800e4a6:	40b2      	lsls	r2, r6
 800e4a8:	4013      	ands	r3, r2
        return opa_table[px_opa];
 800e4aa:	aa04      	add	r2, sp, #16
        uint8_t px_opa = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
 800e4ac:	4133      	asrs	r3, r6
        return opa_table[px_opa];
 800e4ae:	4413      	add	r3, r2
 800e4b0:	f813 0c10 	ldrb.w	r0, [r3, #-16]
 800e4b4:	e7cb      	b.n	800e44e <lv_img_buf_get_px_alpha+0x26>
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_4BIT) {
 800e4b6:	290d      	cmp	r1, #13
 800e4b8:	d11c      	bne.n	800e4f4 <lv_img_buf_get_px_alpha+0xcc>
        const uint8_t opa_table[16] = {0,  17, 34,  51, /*Opacity mapping with bpp = 4*/
 800e4ba:	4e15      	ldr	r6, [pc, #84]	; (800e510 <lv_img_buf_get_px_alpha+0xe8>)
 800e4bc:	46ec      	mov	ip, sp
 800e4be:	f106 0e10 	add.w	lr, r6, #16
 800e4c2:	6830      	ldr	r0, [r6, #0]
 800e4c4:	3608      	adds	r6, #8
 800e4c6:	f856 1c04 	ldr.w	r1, [r6, #-4]
 800e4ca:	4667      	mov	r7, ip
 800e4cc:	4576      	cmp	r6, lr
 800e4ce:	c703      	stmia	r7!, {r0, r1}
 800e4d0:	46bc      	mov	ip, r7
 800e4d2:	d1f6      	bne.n	800e4c2 <lv_img_buf_get_px_alpha+0x9a>
        uint32_t px    = ((dsc->header.w + 1) >> 1) * y + x;
 800e4d4:	6820      	ldr	r0, [r4, #0]
        uint8_t bit = (x & 0x1) * 4;
 800e4d6:	f003 0601 	and.w	r6, r3, #1
        uint32_t px    = ((dsc->header.w + 1) >> 1) * y + x;
 800e4da:	1059      	asrs	r1, r3, #1
 800e4dc:	f3c0 208a 	ubfx	r0, r0, #10, #11
        uint8_t px_opa = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
 800e4e0:	00b6      	lsls	r6, r6, #2
        uint32_t px    = ((dsc->header.w + 1) >> 1) * y + x;
 800e4e2:	3001      	adds	r0, #1
        uint8_t px_opa = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
 800e4e4:	f1c6 0604 	rsb	r6, r6, #4
        uint32_t px    = ((dsc->header.w + 1) >> 1) * y + x;
 800e4e8:	1040      	asrs	r0, r0, #1
        uint8_t px_opa = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
 800e4ea:	fb02 5300 	mla	r3, r2, r0, r5
 800e4ee:	220f      	movs	r2, #15
 800e4f0:	5c5b      	ldrb	r3, [r3, r1]
 800e4f2:	e7d8      	b.n	800e4a6 <lv_img_buf_get_px_alpha+0x7e>
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_8BIT) {
 800e4f4:	290e      	cmp	r1, #14
        uint32_t px = dsc->header.w * y + x;
 800e4f6:	bf09      	itett	eq
 800e4f8:	6801      	ldreq	r1, [r0, #0]
    return LV_OPA_COVER;
 800e4fa:	20ff      	movne	r0, #255	; 0xff
        uint32_t px = dsc->header.w * y + x;
 800e4fc:	f3c1 218a 	ubfxeq	r1, r1, #10, #11
 800e500:	fb12 3301 	smlabbeq	r3, r2, r1, r3
        return buf_u8[px];
 800e504:	bf08      	it	eq
 800e506:	5ce8      	ldrbeq	r0, [r5, r3]
 800e508:	e7a1      	b.n	800e44e <lv_img_buf_get_px_alpha+0x26>
 800e50a:	bf00      	nop
 800e50c:	ffaa5500 	.word	0xffaa5500
 800e510:	08024f48 	.word	0x08024f48

0800e514 <_lv_img_buf_transform_init>:
 * Initialize a descriptor to transform an image
 * @param dsc pointer to an `lv_img_transform_dsc_t` variable whose `cfg` field is initialized
 */
void _lv_img_buf_transform_init(_lv_img_transform_dsc_t * dsc)
{
    dsc->tmp.pivot_x_256 = dsc->cfg.pivot_x * 256;
 800e514:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
    dsc->tmp.pivot_y_256 = dsc->cfg.pivot_y * 256;

    int32_t angle_low = dsc->cfg.angle / 10;
    int32_t angle_high = angle_low + 1;
    int32_t angle_rem = dsc->cfg.angle  - (angle_low * 10);
 800e518:	f64f 72f6 	movw	r2, #65526	; 0xfff6
    dsc->tmp.pivot_x_256 = dsc->cfg.pivot_x * 256;
 800e51c:	021b      	lsls	r3, r3, #8
{
 800e51e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    dsc->tmp.pivot_x_256 = dsc->cfg.pivot_x * 256;
 800e522:	6243      	str	r3, [r0, #36]	; 0x24
{
 800e524:	4604      	mov	r4, r0
    dsc->tmp.pivot_y_256 = dsc->cfg.pivot_y * 256;
 800e526:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
    int32_t angle_low = dsc->cfg.angle / 10;
 800e52a:	260a      	movs	r6, #10
    dsc->tmp.pivot_y_256 = dsc->cfg.pivot_y * 256;
 800e52c:	021b      	lsls	r3, r3, #8
 800e52e:	6283      	str	r3, [r0, #40]	; 0x28
    int32_t angle_low = dsc->cfg.angle / 10;
 800e530:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 800e534:	fb90 f5f6 	sdiv	r5, r0, r6
    int32_t angle_rem = dsc->cfg.angle  - (angle_low * 10);
 800e538:	fb15 0802 	smlabb	r8, r5, r2, r0

    int32_t s1 = lv_trigo_sin(-angle_low);
 800e53c:	b2af      	uxth	r7, r5
    int32_t angle_high = angle_low + 1;
 800e53e:	3501      	adds	r5, #1
    int32_t s1 = lv_trigo_sin(-angle_low);
 800e540:	4278      	negs	r0, r7
    int32_t s2 = lv_trigo_sin(-angle_high);
 800e542:	b2ad      	uxth	r5, r5
    int32_t s1 = lv_trigo_sin(-angle_low);
 800e544:	b200      	sxth	r0, r0
 800e546:	f009 f819 	bl	801757c <lv_trigo_sin>
 800e54a:	4681      	mov	r9, r0
    int32_t s2 = lv_trigo_sin(-angle_high);
 800e54c:	4268      	negs	r0, r5

    int32_t c1 = lv_trigo_sin(-angle_low + 90);
    int32_t c2 = lv_trigo_sin(-angle_high + 90);
 800e54e:	f1c5 055a 	rsb	r5, r5, #90	; 0x5a
    int32_t s2 = lv_trigo_sin(-angle_high);
 800e552:	b200      	sxth	r0, r0
 800e554:	f009 f812 	bl	801757c <lv_trigo_sin>
 800e558:	4682      	mov	sl, r0
    int32_t c1 = lv_trigo_sin(-angle_low + 90);
 800e55a:	f1c7 005a 	rsb	r0, r7, #90	; 0x5a
 800e55e:	b200      	sxth	r0, r0
 800e560:	f009 f80c 	bl	801757c <lv_trigo_sin>
 800e564:	4607      	mov	r7, r0
    int32_t c2 = lv_trigo_sin(-angle_high + 90);
 800e566:	b228      	sxth	r0, r5
 800e568:	f009 f808 	bl	801757c <lv_trigo_sin>

    dsc->tmp.sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
 800e56c:	eba6 0308 	sub.w	r3, r6, r8
 800e570:	fb08 f20a 	mul.w	r2, r8, sl
 800e574:	fb03 2209 	mla	r2, r3, r9, r2
 800e578:	fb92 f2f6 	sdiv	r2, r2, r6
    dsc->tmp.cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;

    /*Use smaller value to avoid overflow*/
    dsc->tmp.sinma = dsc->tmp.sinma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
 800e57c:	1152      	asrs	r2, r2, #5
 800e57e:	62e2      	str	r2, [r4, #44]	; 0x2c
    dsc->tmp.cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
 800e580:	fb08 f200 	mul.w	r2, r8, r0
 800e584:	fb03 2007 	mla	r0, r3, r7, r2
 800e588:	fb90 f3f6 	sdiv	r3, r0, r6
    dsc->tmp.cosma = dsc->tmp.cosma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
 800e58c:	115b      	asrs	r3, r3, #5

    dsc->tmp.chroma_keyed = lv_img_cf_is_chroma_keyed(dsc->cfg.cf) ? 1 : 0;
 800e58e:	7ca0      	ldrb	r0, [r4, #18]
    dsc->tmp.cosma = dsc->tmp.cosma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
 800e590:	6323      	str	r3, [r4, #48]	; 0x30
    dsc->tmp.chroma_keyed = lv_img_cf_is_chroma_keyed(dsc->cfg.cf) ? 1 : 0;
 800e592:	f7fb fe9d 	bl	800a2d0 <lv_img_cf_is_chroma_keyed>
 800e596:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800e59a:	f360 0300 	bfi	r3, r0, #0, #1
    dsc->tmp.has_alpha = lv_img_cf_has_alpha(dsc->cfg.cf) ? 1 : 0;
 800e59e:	7ca0      	ldrb	r0, [r4, #18]
    dsc->tmp.chroma_keyed = lv_img_cf_is_chroma_keyed(dsc->cfg.cf) ? 1 : 0;
 800e5a0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    dsc->tmp.has_alpha = lv_img_cf_has_alpha(dsc->cfg.cf) ? 1 : 0;
 800e5a4:	f7fb fe9e 	bl	800a2e4 <lv_img_cf_has_alpha>
    if(dsc->cfg.cf == LV_IMG_CF_TRUE_COLOR || dsc->cfg.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 800e5a8:	7ca3      	ldrb	r3, [r4, #18]
 800e5aa:	1f1a      	subs	r2, r3, #4
        dsc->tmp.native_color = 0;
    }

    dsc->tmp.img_dsc.data = dsc->cfg.src;
    dsc->tmp.img_dsc.header.always_zero = 0;
    dsc->tmp.img_dsc.header.cf = dsc->cfg.cf;
 800e5ac:	f003 031f 	and.w	r3, r3, #31
    if(dsc->cfg.cf == LV_IMG_CF_TRUE_COLOR || dsc->cfg.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 800e5b0:	2a02      	cmp	r2, #2
    dsc->tmp.has_alpha = lv_img_cf_has_alpha(dsc->cfg.cf) ? 1 : 0;
 800e5b2:	ea4f 0240 	mov.w	r2, r0, lsl #1
    if(dsc->cfg.cf == LV_IMG_CF_TRUE_COLOR || dsc->cfg.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 800e5b6:	bf8c      	ite	hi
 800e5b8:	2100      	movhi	r1, #0
 800e5ba:	2101      	movls	r1, #1
    dsc->tmp.has_alpha = lv_img_cf_has_alpha(dsc->cfg.cf) ? 1 : 0;
 800e5bc:	ea42 0281 	orr.w	r2, r2, r1, lsl #2
 800e5c0:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
 800e5c4:	f002 0206 	and.w	r2, r2, #6
 800e5c8:	f021 0106 	bic.w	r1, r1, #6
 800e5cc:	430a      	orrs	r2, r1
 800e5ce:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    dsc->tmp.img_dsc.data = dsc->cfg.src;
 800e5d2:	6822      	ldr	r2, [r4, #0]
 800e5d4:	6222      	str	r2, [r4, #32]
    dsc->tmp.img_dsc.header.cf = dsc->cfg.cf;
 800e5d6:	88a2      	ldrh	r2, [r4, #4]
 800e5d8:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800e5dc:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 800e5e0:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800e5e4:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 800e5e8:	69a2      	ldr	r2, [r4, #24]
 800e5ea:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800e5ee:	4313      	orrs	r3, r2
    dsc->tmp.img_dsc.header.w = dsc->cfg.src_w;
    dsc->tmp.img_dsc.header.h = dsc->cfg.src_h;

    /*The inverse of the zoom will be sued during the transformation
     * + dsc->cfg.zoom / 2 for rounding*/
    dsc->tmp.zoom_inv = (((256 * 256) << _LV_ZOOM_INV_UPSCALE) + dsc->cfg.zoom / 2) / dsc->cfg.zoom;
 800e5f0:	89e2      	ldrh	r2, [r4, #14]
    dsc->tmp.img_dsc.header.cf = dsc->cfg.cf;
 800e5f2:	61a3      	str	r3, [r4, #24]
    dsc->tmp.zoom_inv = (((256 * 256) << _LV_ZOOM_INV_UPSCALE) + dsc->cfg.zoom / 2) / dsc->cfg.zoom;
 800e5f4:	0853      	lsrs	r3, r2, #1
 800e5f6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800e5fa:	fbb3 f3f2 	udiv	r3, r3, r2
 800e5fe:	63a3      	str	r3, [r4, #56]	; 0x38

    dsc->res.opa = LV_OPA_COVER;
 800e600:	23ff      	movs	r3, #255	; 0xff
 800e602:	75a3      	strb	r3, [r4, #22]
    dsc->res.color = dsc->cfg.color;
 800e604:	8a23      	ldrh	r3, [r4, #16]
 800e606:	82a3      	strh	r3, [r4, #20]
}
 800e608:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800e60c <_lv_img_buf_get_transformed_area>:
 * @param zoom zoom, (256 no zoom)
 * @param pivot x,y pivot coordinates of rotation
 */
void _lv_img_buf_get_transformed_area(lv_area_t * res, lv_coord_t w, lv_coord_t h, int16_t angle, uint16_t zoom,
                                      const lv_point_t * pivot)
{
 800e60c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e610:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800e612:	4604      	mov	r4, r0
 800e614:	f8bd e028 	ldrh.w	lr, [sp, #40]	; 0x28
#if LV_DRAW_COMPLEX
    if(angle == 0 && zoom == LV_IMG_ZOOM_NONE) {
 800e618:	b953      	cbnz	r3, 800e630 <_lv_img_buf_get_transformed_area+0x24>
 800e61a:	f5be 7f80 	cmp.w	lr, #256	; 0x100
 800e61e:	d107      	bne.n	800e630 <_lv_img_buf_get_transformed_area+0x24>
        res->x1 = 0;
        res->y1 = 0;
        res->x2 = w - 1;
 800e620:	3901      	subs	r1, #1
        res->y2 = h - 1;
 800e622:	3a01      	subs	r2, #1
        res->x1 = 0;
 800e624:	8003      	strh	r3, [r0, #0]
        res->y1 = 0;
 800e626:	8043      	strh	r3, [r0, #2]
        res->x2 = w - 1;
 800e628:	8081      	strh	r1, [r0, #4]

    if(angle == 0) {
        res->x1 += pivot->x;
        res->y1 += pivot->y;
        res->x2 += pivot->x;
        res->y2 += pivot->y;
 800e62a:	80e2      	strh	r2, [r4, #6]
    res->x1 = 0;
    res->y1 = 0;
    res->x2 = w - 1;
    res->y2 = h - 1;
#endif
}
 800e62c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    res->x1 = (((-pivot->x) * zoom) >> 8) - 1;
 800e630:	f9b7 c000 	ldrsh.w	ip, [r7]
    res->y1 = (((-pivot->y) * zoom) >> 8) - 1;
 800e634:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
    res->x1 = (((-pivot->x) * zoom) >> 8) - 1;
 800e638:	f1cc 0600 	rsb	r6, ip, #0
    res->x2 = (((w - pivot->x) * zoom) >> 8) + 2;
 800e63c:	eba1 010c 	sub.w	r1, r1, ip
    res->y1 = (((-pivot->y) * zoom) >> 8) - 1;
 800e640:	4245      	negs	r5, r0
    res->y2 = (((h - pivot->y) * zoom) >> 8) + 2;
 800e642:	1a12      	subs	r2, r2, r0
    res->x1 = (((-pivot->x) * zoom) >> 8) - 1;
 800e644:	fb0e f606 	mul.w	r6, lr, r6
    res->y1 = (((-pivot->y) * zoom) >> 8) - 1;
 800e648:	fb0e f505 	mul.w	r5, lr, r5
    res->x2 = (((w - pivot->x) * zoom) >> 8) + 2;
 800e64c:	fb0e f101 	mul.w	r1, lr, r1
    res->x1 = (((-pivot->x) * zoom) >> 8) - 1;
 800e650:	1236      	asrs	r6, r6, #8
    res->y2 = (((h - pivot->y) * zoom) >> 8) + 2;
 800e652:	fb0e f202 	mul.w	r2, lr, r2
    res->y1 = (((-pivot->y) * zoom) >> 8) - 1;
 800e656:	122d      	asrs	r5, r5, #8
    res->x2 = (((w - pivot->x) * zoom) >> 8) + 2;
 800e658:	1209      	asrs	r1, r1, #8
    res->x1 = (((-pivot->x) * zoom) >> 8) - 1;
 800e65a:	3e01      	subs	r6, #1
    res->y2 = (((h - pivot->y) * zoom) >> 8) + 2;
 800e65c:	1212      	asrs	r2, r2, #8
    res->y1 = (((-pivot->y) * zoom) >> 8) - 1;
 800e65e:	3d01      	subs	r5, #1
    res->x2 = (((w - pivot->x) * zoom) >> 8) + 2;
 800e660:	3102      	adds	r1, #2
    res->x1 = (((-pivot->x) * zoom) >> 8) - 1;
 800e662:	b2b6      	uxth	r6, r6
    res->y2 = (((h - pivot->y) * zoom) >> 8) + 2;
 800e664:	3202      	adds	r2, #2
    res->y1 = (((-pivot->y) * zoom) >> 8) - 1;
 800e666:	b2ad      	uxth	r5, r5
    res->x2 = (((w - pivot->x) * zoom) >> 8) + 2;
 800e668:	b289      	uxth	r1, r1
    res->x1 = (((-pivot->x) * zoom) >> 8) - 1;
 800e66a:	8026      	strh	r6, [r4, #0]
    res->y2 = (((h - pivot->y) * zoom) >> 8) + 2;
 800e66c:	b292      	uxth	r2, r2
    res->y1 = (((-pivot->y) * zoom) >> 8) - 1;
 800e66e:	8065      	strh	r5, [r4, #2]
    res->x2 = (((w - pivot->x) * zoom) >> 8) + 2;
 800e670:	80a1      	strh	r1, [r4, #4]
    res->y2 = (((h - pivot->y) * zoom) >> 8) + 2;
 800e672:	80e2      	strh	r2, [r4, #6]
    if(angle == 0) {
 800e674:	b95b      	cbnz	r3, 800e68e <_lv_img_buf_get_transformed_area+0x82>
        res->x1 += pivot->x;
 800e676:	fa16 f68c 	uxtah	r6, r6, ip
        res->y1 += pivot->y;
 800e67a:	fa15 f580 	uxtah	r5, r5, r0
        res->x2 += pivot->x;
 800e67e:	fa11 f18c 	uxtah	r1, r1, ip
        res->y2 += pivot->y;
 800e682:	fa12 f280 	uxtah	r2, r2, r0
        res->x1 += pivot->x;
 800e686:	8026      	strh	r6, [r4, #0]
        res->y1 += pivot->y;
 800e688:	8065      	strh	r5, [r4, #2]
        res->x2 += pivot->x;
 800e68a:	80a1      	strh	r1, [r4, #4]
        res->y2 += pivot->y;
 800e68c:	e7cd      	b.n	800e62a <_lv_img_buf_get_transformed_area+0x1e>
    int32_t angle_low = angle / 10;
 800e68e:	f04f 090a 	mov.w	r9, #10
    int32_t angle_rem = angle  - (angle_low * 10);
 800e692:	f64f 7af6 	movw	sl, #65526	; 0xfff6
    int32_t angle_low = angle / 10;
 800e696:	fb93 f8f9 	sdiv	r8, r3, r9
    int32_t angle_high = angle_low + 1;
 800e69a:	f108 0b01 	add.w	fp, r8, #1
    int32_t s1 = lv_trigo_sin(angle_low);
 800e69e:	4640      	mov	r0, r8
    int32_t angle_rem = angle  - (angle_low * 10);
 800e6a0:	fb18 3a0a 	smlabb	sl, r8, sl, r3
    int32_t s1 = lv_trigo_sin(angle_low);
 800e6a4:	f008 ff6a 	bl	801757c <lv_trigo_sin>
 800e6a8:	4605      	mov	r5, r0
    int32_t s2 = lv_trigo_sin(angle_high);
 800e6aa:	fa0f f08b 	sxth.w	r0, fp
 800e6ae:	f008 ff65 	bl	801757c <lv_trigo_sin>
 800e6b2:	4683      	mov	fp, r0
    int32_t c1 = lv_trigo_sin(angle_low + 90);
 800e6b4:	f108 005a 	add.w	r0, r8, #90	; 0x5a
    int32_t c2 = lv_trigo_sin(angle_high + 90);
 800e6b8:	f108 085b 	add.w	r8, r8, #91	; 0x5b
    int32_t c1 = lv_trigo_sin(angle_low + 90);
 800e6bc:	b200      	sxth	r0, r0
 800e6be:	f008 ff5d 	bl	801757c <lv_trigo_sin>
 800e6c2:	4606      	mov	r6, r0
    int32_t c2 = lv_trigo_sin(angle_high + 90);
 800e6c4:	fa0f f088 	sxth.w	r0, r8
 800e6c8:	f008 ff58 	bl	801757c <lv_trigo_sin>
    int32_t sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
 800e6cc:	eba9 010a 	sub.w	r1, r9, sl
 800e6d0:	fb0a f20b 	mul.w	r2, sl, fp
    lt.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 800e6d4:	f8b7 c000 	ldrh.w	ip, [r7]
    int32_t cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
 800e6d8:	fb0a f000 	mul.w	r0, sl, r0
    lb.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 800e6dc:	f9b4 a006 	ldrsh.w	sl, [r4, #6]
    int32_t sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
 800e6e0:	fb01 2205 	mla	r2, r1, r5, r2
    lt.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 800e6e4:	887f      	ldrh	r7, [r7, #2]
    int32_t cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
 800e6e6:	fb01 0606 	mla	r6, r1, r6, r0
    lt.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 800e6ea:	f9b4 1000 	ldrsh.w	r1, [r4]
 800e6ee:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
    int32_t sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
 800e6f2:	fb92 f2f9 	sdiv	r2, r2, r9
    int32_t cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
 800e6f6:	fb96 f6f9 	sdiv	r6, r6, r9
    sinma = sinma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
 800e6fa:	1152      	asrs	r2, r2, #5
    rt.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 800e6fc:	f9b4 9004 	ldrsh.w	r9, [r4, #4]
    cosma = cosma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
 800e700:	1176      	asrs	r6, r6, #5
    lt.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 800e702:	fb02 f800 	mul.w	r8, r2, r0
 800e706:	fb06 fe01 	mul.w	lr, r6, r1
    rt.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 800e70a:	fb06 fb09 	mul.w	fp, r6, r9
    lt.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 800e70e:	ebae 0508 	sub.w	r5, lr, r8
    lt.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 800e712:	4351      	muls	r1, r2
    rt.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 800e714:	ebab 0808 	sub.w	r8, fp, r8
    rt.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 800e718:	fb02 f909 	mul.w	r9, r2, r9
    lt.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 800e71c:	eb0c 25a5 	add.w	r5, ip, r5, asr #10
    lb.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 800e720:	fb02 f20a 	mul.w	r2, r2, sl
    rt.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 800e724:	eb0c 28a8 	add.w	r8, ip, r8, asr #10
    lt.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 800e728:	4370      	muls	r0, r6
    lt.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 800e72a:	b22d      	sxth	r5, r5
    lb.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 800e72c:	ebae 0e02 	sub.w	lr, lr, r2
    rt.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 800e730:	fa0f f888 	sxth.w	r8, r8
    rb.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 800e734:	ebab 0202 	sub.w	r2, fp, r2
    lb.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 800e738:	eb0c 2eae 	add.w	lr, ip, lr, asr #10
    lt.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 800e73c:	180b      	adds	r3, r1, r0
    res->x1 = LV_MIN4(lb.x, lt.x, rb.x, rt.x);
 800e73e:	4545      	cmp	r5, r8
    rb.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 800e740:	eb0c 2ca2 	add.w	ip, ip, r2, asr #10
    lb.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 800e744:	fa0f fe8e 	sxth.w	lr, lr
    res->x1 = LV_MIN4(lb.x, lt.x, rb.x, rt.x);
 800e748:	462a      	mov	r2, r5
 800e74a:	bfa8      	it	ge
 800e74c:	4642      	movge	r2, r8
    rb.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 800e74e:	fa0f fc8c 	sxth.w	ip, ip
    rt.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 800e752:	4448      	add	r0, r9
    lt.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 800e754:	eb07 23a3 	add.w	r3, r7, r3, asr #10
    res->x1 = LV_MIN4(lb.x, lt.x, rb.x, rt.x);
 800e758:	4572      	cmp	r2, lr
    lb.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 800e75a:	fb06 f60a 	mul.w	r6, r6, sl
    rt.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 800e75e:	eb07 20a0 	add.w	r0, r7, r0, asr #10
    res->x1 = LV_MIN4(lb.x, lt.x, rb.x, rt.x);
 800e762:	bfa8      	it	ge
 800e764:	4672      	movge	r2, lr
    lt.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 800e766:	b21b      	sxth	r3, r3
    rt.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 800e768:	b200      	sxth	r0, r0
    lb.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 800e76a:	4431      	add	r1, r6
    res->x1 = LV_MIN4(lb.x, lt.x, rb.x, rt.x);
 800e76c:	4562      	cmp	r2, ip
    rb.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 800e76e:	444e      	add	r6, r9
    lb.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 800e770:	eb07 21a1 	add.w	r1, r7, r1, asr #10
    res->x1 = LV_MIN4(lb.x, lt.x, rb.x, rt.x);
 800e774:	bfa8      	it	ge
 800e776:	4662      	movge	r2, ip
    res->x2 = LV_MAX4(lb.x, lt.x, rb.x, rt.x);
 800e778:	4545      	cmp	r5, r8
    lb.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 800e77a:	b209      	sxth	r1, r1
    res->x2 = LV_MAX4(lb.x, lt.x, rb.x, rt.x);
 800e77c:	bfb8      	it	lt
 800e77e:	4645      	movlt	r5, r8
    res->x1 = LV_MIN4(lb.x, lt.x, rb.x, rt.x);
 800e780:	8022      	strh	r2, [r4, #0]
    res->y1 = LV_MIN4(lb.y, lt.y, rb.y, rt.y);
 800e782:	461a      	mov	r2, r3
    rb.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 800e784:	eb07 27a6 	add.w	r7, r7, r6, asr #10
    res->x2 = LV_MAX4(lb.x, lt.x, rb.x, rt.x);
 800e788:	45ae      	cmp	lr, r5
    rb.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 800e78a:	b23f      	sxth	r7, r7
    res->x2 = LV_MAX4(lb.x, lt.x, rb.x, rt.x);
 800e78c:	bfb8      	it	lt
 800e78e:	46ae      	movlt	lr, r5
 800e790:	45f4      	cmp	ip, lr
 800e792:	bfb8      	it	lt
 800e794:	46f4      	movlt	ip, lr
    res->y1 = LV_MIN4(lb.y, lt.y, rb.y, rt.y);
 800e796:	4283      	cmp	r3, r0
 800e798:	bfa8      	it	ge
 800e79a:	4602      	movge	r2, r0
    res->x2 = LV_MAX4(lb.x, lt.x, rb.x, rt.x);
 800e79c:	f8a4 c004 	strh.w	ip, [r4, #4]
    res->y1 = LV_MIN4(lb.y, lt.y, rb.y, rt.y);
 800e7a0:	428a      	cmp	r2, r1
 800e7a2:	bfa8      	it	ge
 800e7a4:	460a      	movge	r2, r1
 800e7a6:	42ba      	cmp	r2, r7
 800e7a8:	bfa8      	it	ge
 800e7aa:	463a      	movge	r2, r7
    res->y2 = LV_MAX4(lb.y, lt.y, rb.y, rt.y);
 800e7ac:	4283      	cmp	r3, r0
 800e7ae:	bfb8      	it	lt
 800e7b0:	4603      	movlt	r3, r0
    res->y1 = LV_MIN4(lb.y, lt.y, rb.y, rt.y);
 800e7b2:	8062      	strh	r2, [r4, #2]
    res->y2 = LV_MAX4(lb.y, lt.y, rb.y, rt.y);
 800e7b4:	4299      	cmp	r1, r3
 800e7b6:	bfb8      	it	lt
 800e7b8:	4619      	movlt	r1, r3
 800e7ba:	428f      	cmp	r7, r1
 800e7bc:	bfb8      	it	lt
 800e7be:	460f      	movlt	r7, r1
 800e7c0:	80e7      	strh	r7, [r4, #6]
 800e7c2:	e733      	b.n	800e62c <_lv_img_buf_get_transformed_area+0x20>

0800e7c4 <_lv_img_buf_transform_anti_alias>:
 * Continue transformation by taking the neighbors into account
 * @param dsc pointer to the transformation descriptor
 */
bool _lv_img_buf_transform_anti_alias(_lv_img_transform_dsc_t * dsc)
{
    const uint8_t * src_u8 = dsc->cfg.src;
 800e7c4:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 800e7c8:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
    int xs_fract = dsc->tmp.xs & 0xff;
    int ys_fract = dsc->tmp.ys & 0xff;
    int32_t xn;      /*x neighbor*/
    lv_opa_t xr; /*x mix ratio*/

    if(xs_fract < 0x70) {
 800e7cc:	2a6f      	cmp	r2, #111	; 0x6f
{
 800e7ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7d2:	4604      	mov	r4, r0
 800e7d4:	b089      	sub	sp, #36	; 0x24
    const uint8_t * src_u8 = dsc->cfg.src;
 800e7d6:	f8d0 a000 	ldr.w	sl, [r0]
    int xs_fract = dsc->tmp.xs & 0xff;
 800e7da:	f9b0 503c 	ldrsh.w	r5, [r0, #60]	; 0x3c
    int ys_fract = dsc->tmp.ys & 0xff;
 800e7de:	f9b0 703e 	ldrsh.w	r7, [r0, #62]	; 0x3e
    if(xs_fract < 0x70) {
 800e7e2:	f200 8093 	bhi.w	800e90c <_lv_img_buf_transform_anti_alias+0x148>
        xn = - 1;
        if(dsc->tmp.xs_int + xn < 0) xn = 0;
 800e7e6:	f9b0 6040 	ldrsh.w	r6, [r0, #64]	; 0x40
        xr = xs_fract + 0x80;
 800e7ea:	3d80      	subs	r5, #128	; 0x80
        if(dsc->tmp.xs_int + xn < 0) xn = 0;
 800e7ec:	2e00      	cmp	r6, #0
 800e7ee:	bfd4      	ite	le
 800e7f0:	2600      	movle	r6, #0
 800e7f2:	2601      	movgt	r6, #1
 800e7f4:	4276      	negs	r6, r6
    }
    else if(xs_fract > 0x90) {
        xn =  1;
        if(dsc->tmp.xs_int + xn >= dsc->cfg.src_w) xn = 0;
        xr = (0xFF - xs_fract) + 0x80;
 800e7f6:	b2ed      	uxtb	r5, r5
    }

    int32_t yn;      /*x neighbor*/
    lv_opa_t yr; /*x mix ratio*/

    if(ys_fract < 0x70) {
 800e7f8:	2b6f      	cmp	r3, #111	; 0x6f
 800e7fa:	f200 8098 	bhi.w	800e92e <_lv_img_buf_transform_anti_alias+0x16a>
        yn = - 1;
        if(dsc->tmp.ys_int + yn < 0) yn = 0;
 800e7fe:	f9b4 8042 	ldrsh.w	r8, [r4, #66]	; 0x42

        yr = ys_fract + 0x80;
 800e802:	3f80      	subs	r7, #128	; 0x80
        if(dsc->tmp.ys_int + yn < 0) yn = 0;
 800e804:	f1b8 0f00 	cmp.w	r8, #0
 800e808:	bfd4      	ite	le
 800e80a:	f04f 0800 	movle.w	r8, #0
 800e80e:	f04f 0801 	movgt.w	r8, #1
 800e812:	f1c8 0800 	rsb	r8, r8, #0
    }
    else if(ys_fract > 0x90) {
        yn =  1;
        if(dsc->tmp.ys_int + yn >= dsc->cfg.src_h) yn = 0;

        yr = (0xFF - ys_fract) + 0x80;
 800e816:	b2ff      	uxtb	r7, r7
    lv_color_t c00 = dsc->res.color;
    lv_color_t c01;
    lv_color_t c10;
    lv_color_t c11;

    lv_opa_t a00 = dsc->res.opa;
 800e818:	7da3      	ldrb	r3, [r4, #22]
    lv_color_t c00 = dsc->res.color;
 800e81a:	f8b4 9014 	ldrh.w	r9, [r4, #20]
    lv_opa_t a00 = dsc->res.opa;
 800e81e:	9301      	str	r3, [sp, #4]
    lv_opa_t a10 = 0;
    lv_opa_t a01 = 0;
    lv_opa_t a11 = 0;

    if(dsc->tmp.native_color) {
 800e820:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800e824:	075b      	lsls	r3, r3, #29
 800e826:	f140 80ad 	bpl.w	800e984 <_lv_img_buf_transform_anti_alias+0x1c0>
        lv_memcpy_small(&c01, &src_u8[dsc->tmp.pxi + dsc->tmp.px_size * xn], sizeof(lv_color_t));
 800e82a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e82c:	2202      	movs	r2, #2
 800e82e:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
 800e832:	a805      	add	r0, sp, #20
 800e834:	fb06 3101 	mla	r1, r6, r1, r3
 800e838:	4451      	add	r1, sl
 800e83a:	f7ff fd70 	bl	800e31e <lv_memcpy_small>
        lv_memcpy_small(&c10, &src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn], sizeof(lv_color_t));
 800e83e:	88a3      	ldrh	r3, [r4, #4]
 800e840:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
 800e844:	2202      	movs	r2, #2
 800e846:	a806      	add	r0, sp, #24
 800e848:	fb11 f103 	smulbb	r1, r1, r3
 800e84c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e84e:	fb08 3101 	mla	r1, r8, r1, r3
 800e852:	4451      	add	r1, sl
 800e854:	f7ff fd63 	bl	800e31e <lv_memcpy_small>
        lv_memcpy_small(&c11, &src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn + dsc->tmp.px_size * xn],
 800e858:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800e85c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800e85e:	a807      	add	r0, sp, #28
 800e860:	88a1      	ldrh	r1, [r4, #4]
 800e862:	fb11 f103 	smulbb	r1, r1, r3
 800e866:	fb06 2303 	mla	r3, r6, r3, r2
 800e86a:	2202      	movs	r2, #2
 800e86c:	fb08 3101 	mla	r1, r8, r1, r3
 800e870:	4451      	add	r1, sl
 800e872:	f7ff fd54 	bl	800e31e <lv_memcpy_small>
                         sizeof(lv_color_t));
        if(dsc->tmp.has_alpha) {
 800e876:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800e87a:	0798      	lsls	r0, r3, #30
 800e87c:	d46c      	bmi.n	800e958 <_lv_img_buf_transform_anti_alias+0x194>
    lv_opa_t a11 = 0;
 800e87e:	2000      	movs	r0, #0
    lv_opa_t a01 = 0;
 800e880:	4680      	mov	r8, r0
    lv_opa_t a10 = 0;
 800e882:	4603      	mov	r3, r0
        }
    }

    lv_opa_t xr0 = xr;
    lv_opa_t xr1 = xr;
    if(dsc->tmp.has_alpha) {
 800e884:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 800e888:	0792      	lsls	r2, r2, #30
 800e88a:	f140 80cf 	bpl.w	800ea2c <_lv_img_buf_transform_anti_alias+0x268>
        lv_opa_t a0 = (a00 * xr + (a10 * (255 - xr))) >> 8;
 800e88e:	9901      	ldr	r1, [sp, #4]
 800e890:	f1c5 02ff 	rsb	r2, r5, #255	; 0xff
 800e894:	fb11 f605 	smulbb	r6, r1, r5
        lv_opa_t a1 = (a01 * xr + (a11 * (255 - xr))) >> 8;
        dsc->res.opa = (a0 * yr + (a1 * (255 - yr))) >> 8;
 800e898:	f1c7 01ff 	rsb	r1, r7, #255	; 0xff
        lv_opa_t a0 = (a00 * xr + (a10 * (255 - xr))) >> 8;
 800e89c:	fb02 6603 	mla	r6, r2, r3, r6
        lv_opa_t a1 = (a01 * xr + (a11 * (255 - xr))) >> 8;
 800e8a0:	4342      	muls	r2, r0
        dsc->res.opa = (a0 * yr + (a1 * (255 - yr))) >> 8;
 800e8a2:	f3c6 2607 	ubfx	r6, r6, #8, #8
        lv_opa_t a1 = (a01 * xr + (a11 * (255 - xr))) >> 8;
 800e8a6:	fb15 2208 	smlabb	r2, r5, r8, r2
        dsc->res.opa = (a0 * yr + (a1 * (255 - yr))) >> 8;
 800e8aa:	fb07 fc06 	mul.w	ip, r7, r6

        if(a0 <= LV_OPA_MIN && a1 <= LV_OPA_MIN) return false;
 800e8ae:	2e02      	cmp	r6, #2
        lv_opa_t a1 = (a01 * xr + (a11 * (255 - xr))) >> 8;
 800e8b0:	f3c2 2207 	ubfx	r2, r2, #8, #8
        dsc->res.opa = (a0 * yr + (a1 * (255 - yr))) >> 8;
 800e8b4:	fb02 c101 	mla	r1, r2, r1, ip
 800e8b8:	ea4f 2121 	mov.w	r1, r1, asr #8
 800e8bc:	75a1      	strb	r1, [r4, #22]
        if(a0 <= LV_OPA_MIN && a1 <= LV_OPA_MIN) return false;
 800e8be:	f200 80b1 	bhi.w	800ea24 <_lv_img_buf_transform_anti_alias+0x260>
 800e8c2:	2a02      	cmp	r2, #2
 800e8c4:	f240 80d9 	bls.w	800ea7a <_lv_img_buf_transform_anti_alias+0x2b6>
        if(a0 <= LV_OPA_MIN) yr = LV_OPA_TRANSP;
 800e8c8:	2700      	movs	r7, #0
        if(a1 <= LV_OPA_MIN) yr = LV_OPA_COVER;
        if(a00 <= LV_OPA_MIN) xr0 = LV_OPA_TRANSP;
 800e8ca:	9a01      	ldr	r2, [sp, #4]
 800e8cc:	2a02      	cmp	r2, #2
 800e8ce:	bf94      	ite	ls
 800e8d0:	2200      	movls	r2, #0
 800e8d2:	462a      	movhi	r2, r5
        if(a10 <= LV_OPA_MIN) xr0 = LV_OPA_COVER;
 800e8d4:	2b02      	cmp	r3, #2
 800e8d6:	bf98      	it	ls
 800e8d8:	22ff      	movls	r2, #255	; 0xff
        if(a01 <= LV_OPA_MIN) xr1 = LV_OPA_TRANSP;
 800e8da:	f1b8 0f02 	cmp.w	r8, #2
 800e8de:	bf98      	it	ls
 800e8e0:	2500      	movls	r5, #0
        if(a11 <= LV_OPA_MIN) xr1 = LV_OPA_COVER;
 800e8e2:	2802      	cmp	r0, #2
 800e8e4:	bf98      	it	ls
 800e8e6:	25ff      	movls	r5, #255	; 0xff
        xr1 = xr;
        dsc->res.opa = LV_OPA_COVER;
    }

    lv_color_t c0;
    if(xr0 == LV_OPA_TRANSP) c0 = c01;
 800e8e8:	2a00      	cmp	r2, #0
 800e8ea:	f040 80a3 	bne.w	800ea34 <_lv_img_buf_transform_anti_alias+0x270>
 800e8ee:	f8bd 9014 	ldrh.w	r9, [sp, #20]
    else if(xr0 == LV_OPA_COVER) c0 = c00;
    else c0 = lv_color_mix(c00, c01, xr0);

    lv_color_t c1;
    if(xr1 == LV_OPA_TRANSP) c1 = c11;
 800e8f2:	2d00      	cmp	r5, #0
 800e8f4:	f040 80a8 	bne.w	800ea48 <_lv_img_buf_transform_anti_alias+0x284>
 800e8f8:	f8bd 101c 	ldrh.w	r1, [sp, #28]
    else if(xr1 == LV_OPA_COVER) c1 = c10;
    else c1 = lv_color_mix(c10, c11, xr1);

    if(yr == LV_OPA_TRANSP) dsc->res.color = c1;
 800e8fc:	2f00      	cmp	r7, #0
 800e8fe:	f040 80b1 	bne.w	800ea64 <_lv_img_buf_transform_anti_alias+0x2a0>
 800e902:	82a1      	strh	r1, [r4, #20]
    else if(yr == LV_OPA_COVER) dsc->res.color = c0;
    else dsc->res.color = lv_color_mix(c0, c1, yr);

    return true;
 800e904:	2001      	movs	r0, #1
}
 800e906:	b009      	add	sp, #36	; 0x24
 800e908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if(xs_fract > 0x90) {
 800e90c:	2a90      	cmp	r2, #144	; 0x90
 800e90e:	d90b      	bls.n	800e928 <_lv_img_buf_transform_anti_alias+0x164>
        if(dsc->tmp.xs_int + xn >= dsc->cfg.src_w) xn = 0;
 800e910:	f9b0 6040 	ldrsh.w	r6, [r0, #64]	; 0x40
        xr = (0xFF - xs_fract) + 0x80;
 800e914:	f1c5 057f 	rsb	r5, r5, #127	; 0x7f
        if(dsc->tmp.xs_int + xn >= dsc->cfg.src_w) xn = 0;
 800e918:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 800e91c:	3601      	adds	r6, #1
 800e91e:	428e      	cmp	r6, r1
 800e920:	bfac      	ite	ge
 800e922:	2600      	movge	r6, #0
 800e924:	2601      	movlt	r6, #1
        xr = (0xFF - xs_fract) + 0x80;
 800e926:	e766      	b.n	800e7f6 <_lv_img_buf_transform_anti_alias+0x32>
        xr = 0xFF;
 800e928:	25ff      	movs	r5, #255	; 0xff
        xn = 0;
 800e92a:	2600      	movs	r6, #0
 800e92c:	e764      	b.n	800e7f8 <_lv_img_buf_transform_anti_alias+0x34>
    else if(ys_fract > 0x90) {
 800e92e:	2b90      	cmp	r3, #144	; 0x90
 800e930:	d90e      	bls.n	800e950 <_lv_img_buf_transform_anti_alias+0x18c>
        if(dsc->tmp.ys_int + yn >= dsc->cfg.src_h) yn = 0;
 800e932:	f9b4 8042 	ldrsh.w	r8, [r4, #66]	; 0x42
        yr = (0xFF - ys_fract) + 0x80;
 800e936:	f1c7 077f 	rsb	r7, r7, #127	; 0x7f
        if(dsc->tmp.ys_int + yn >= dsc->cfg.src_h) yn = 0;
 800e93a:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800e93e:	f108 0801 	add.w	r8, r8, #1
 800e942:	4590      	cmp	r8, r2
 800e944:	bfac      	ite	ge
 800e946:	f04f 0800 	movge.w	r8, #0
 800e94a:	f04f 0801 	movlt.w	r8, #1
        yr = (0xFF - ys_fract) + 0x80;
 800e94e:	e762      	b.n	800e816 <_lv_img_buf_transform_anti_alias+0x52>
        yr = 0xFF;
 800e950:	27ff      	movs	r7, #255	; 0xff
        yn = 0;
 800e952:	f04f 0800 	mov.w	r8, #0
 800e956:	e75f      	b.n	800e818 <_lv_img_buf_transform_anti_alias+0x54>
            a10 = src_u8[dsc->tmp.pxi + dsc->tmp.px_size * xn + dsc->tmp.px_size - 1];
 800e958:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800e95a:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
 800e95e:	3801      	subs	r0, #1
            a01 = src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn + dsc->tmp.px_size - 1];
 800e960:	88a2      	ldrh	r2, [r4, #4]
 800e962:	fb12 f201 	smulbb	r2, r2, r1
 800e966:	4408      	add	r0, r1
 800e968:	fb08 f202 	mul.w	r2, r8, r2
            a10 = src_u8[dsc->tmp.pxi + dsc->tmp.px_size * xn + dsc->tmp.px_size - 1];
 800e96c:	fb06 0601 	mla	r6, r6, r1, r0
            a01 = src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn + dsc->tmp.px_size - 1];
 800e970:	eb0a 0102 	add.w	r1, sl, r2
            a10 = src_u8[dsc->tmp.pxi + dsc->tmp.px_size * xn + dsc->tmp.px_size - 1];
 800e974:	f81a 3006 	ldrb.w	r3, [sl, r6]
            a11 = src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn + dsc->tmp.px_size * xn + dsc->tmp.px_size - 1];
 800e978:	44b2      	add	sl, r6
            a01 = src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn + dsc->tmp.px_size - 1];
 800e97a:	f811 8000 	ldrb.w	r8, [r1, r0]
            a11 = src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn + dsc->tmp.px_size * xn + dsc->tmp.px_size - 1];
 800e97e:	f81a 0002 	ldrb.w	r0, [sl, r2]
 800e982:	e77f      	b.n	800e884 <_lv_img_buf_transform_anti_alias+0xc0>
        c01 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int, dsc->cfg.color);
 800e984:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 800e988:	f104 0b18 	add.w	fp, r4, #24
 800e98c:	8a23      	ldrh	r3, [r4, #16]
 800e98e:	fa1f fa86 	uxth.w	sl, r6
 800e992:	fa11 f186 	uxtah	r1, r1, r6
 800e996:	f9b4 2042 	ldrsh.w	r2, [r4, #66]	; 0x42
 800e99a:	4658      	mov	r0, fp
        c10 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int, dsc->tmp.ys_int + yn, dsc->cfg.color);
 800e99c:	fa1f f688 	uxth.w	r6, r8
        c01 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int, dsc->cfg.color);
 800e9a0:	b209      	sxth	r1, r1
 800e9a2:	f7ff fcc8 	bl	800e336 <lv_img_buf_get_px_color>
        c10 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int, dsc->tmp.ys_int + yn, dsc->cfg.color);
 800e9a6:	f8b4 2042 	ldrh.w	r2, [r4, #66]	; 0x42
 800e9aa:	8a23      	ldrh	r3, [r4, #16]
 800e9ac:	fa12 f288 	uxtah	r2, r2, r8
 800e9b0:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	; 0x40
        c01 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int, dsc->cfg.color);
 800e9b4:	f8ad 0014 	strh.w	r0, [sp, #20]
        c10 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int, dsc->tmp.ys_int + yn, dsc->cfg.color);
 800e9b8:	4658      	mov	r0, fp
 800e9ba:	b212      	sxth	r2, r2
 800e9bc:	f7ff fcbb 	bl	800e336 <lv_img_buf_get_px_color>
        c11 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int + yn, dsc->cfg.color);
 800e9c0:	f8b4 2042 	ldrh.w	r2, [r4, #66]	; 0x42
 800e9c4:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 800e9c8:	4432      	add	r2, r6
 800e9ca:	8a23      	ldrh	r3, [r4, #16]
 800e9cc:	4451      	add	r1, sl
        c10 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int, dsc->tmp.ys_int + yn, dsc->cfg.color);
 800e9ce:	f8ad 0018 	strh.w	r0, [sp, #24]
        c11 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int + yn, dsc->cfg.color);
 800e9d2:	b212      	sxth	r2, r2
 800e9d4:	4658      	mov	r0, fp
 800e9d6:	b209      	sxth	r1, r1
 800e9d8:	f7ff fcad 	bl	800e336 <lv_img_buf_get_px_color>
        if(dsc->tmp.has_alpha) {
 800e9dc:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
        c11 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int + yn, dsc->cfg.color);
 800e9e0:	f8ad 001c 	strh.w	r0, [sp, #28]
        if(dsc->tmp.has_alpha) {
 800e9e4:	0799      	lsls	r1, r3, #30
 800e9e6:	f57f af4a 	bpl.w	800e87e <_lv_img_buf_transform_anti_alias+0xba>
            a10 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int);
 800e9ea:	f9b4 8040 	ldrsh.w	r8, [r4, #64]	; 0x40
 800e9ee:	4658      	mov	r0, fp
 800e9f0:	f9b4 2042 	ldrsh.w	r2, [r4, #66]	; 0x42
 800e9f4:	44c2      	add	sl, r8
 800e9f6:	9202      	str	r2, [sp, #8]
 800e9f8:	fa0f fa8a 	sxth.w	sl, sl
 800e9fc:	4651      	mov	r1, sl
 800e9fe:	f7ff fd13 	bl	800e428 <lv_img_buf_get_px_alpha>
            a01 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int, dsc->tmp.ys_int + yn);
 800ea02:	9a02      	ldr	r2, [sp, #8]
 800ea04:	4641      	mov	r1, r8
            a10 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int);
 800ea06:	9003      	str	r0, [sp, #12]
            a01 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int, dsc->tmp.ys_int + yn);
 800ea08:	4432      	add	r2, r6
 800ea0a:	4658      	mov	r0, fp
 800ea0c:	b212      	sxth	r2, r2
 800ea0e:	9202      	str	r2, [sp, #8]
 800ea10:	f7ff fd0a 	bl	800e428 <lv_img_buf_get_px_alpha>
            a11 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int + yn);
 800ea14:	9a02      	ldr	r2, [sp, #8]
            a01 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int, dsc->tmp.ys_int + yn);
 800ea16:	4680      	mov	r8, r0
            a11 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int + yn);
 800ea18:	4651      	mov	r1, sl
 800ea1a:	4658      	mov	r0, fp
 800ea1c:	f7ff fd04 	bl	800e428 <lv_img_buf_get_px_alpha>
 800ea20:	9b03      	ldr	r3, [sp, #12]
 800ea22:	e72f      	b.n	800e884 <_lv_img_buf_transform_anti_alias+0xc0>
        if(a1 <= LV_OPA_MIN) yr = LV_OPA_COVER;
 800ea24:	2a02      	cmp	r2, #2
 800ea26:	bf98      	it	ls
 800ea28:	27ff      	movls	r7, #255	; 0xff
 800ea2a:	e74e      	b.n	800e8ca <_lv_img_buf_transform_anti_alias+0x106>
        dsc->res.opa = LV_OPA_COVER;
 800ea2c:	23ff      	movs	r3, #255	; 0xff
        xr0 = xr;
 800ea2e:	462a      	mov	r2, r5
        dsc->res.opa = LV_OPA_COVER;
 800ea30:	75a3      	strb	r3, [r4, #22]
 800ea32:	e759      	b.n	800e8e8 <_lv_img_buf_transform_anti_alias+0x124>
    else if(xr0 == LV_OPA_COVER) c0 = c00;
 800ea34:	2aff      	cmp	r2, #255	; 0xff
 800ea36:	f43f af5c 	beq.w	800e8f2 <_lv_img_buf_transform_anti_alias+0x12e>
    else c0 = lv_color_mix(c00, c01, xr0);
 800ea3a:	4648      	mov	r0, r9
 800ea3c:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 800ea40:	f7ff fc43 	bl	800e2ca <lv_color_mix>
 800ea44:	4681      	mov	r9, r0
 800ea46:	e754      	b.n	800e8f2 <_lv_img_buf_transform_anti_alias+0x12e>
    else if(xr1 == LV_OPA_COVER) c1 = c10;
 800ea48:	2dff      	cmp	r5, #255	; 0xff
 800ea4a:	d102      	bne.n	800ea52 <_lv_img_buf_transform_anti_alias+0x28e>
 800ea4c:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 800ea50:	e754      	b.n	800e8fc <_lv_img_buf_transform_anti_alias+0x138>
    else c1 = lv_color_mix(c10, c11, xr1);
 800ea52:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 800ea56:	462a      	mov	r2, r5
 800ea58:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 800ea5c:	f7ff fc35 	bl	800e2ca <lv_color_mix>
 800ea60:	4601      	mov	r1, r0
 800ea62:	e74b      	b.n	800e8fc <_lv_img_buf_transform_anti_alias+0x138>
    else if(yr == LV_OPA_COVER) dsc->res.color = c0;
 800ea64:	2fff      	cmp	r7, #255	; 0xff
 800ea66:	d102      	bne.n	800ea6e <_lv_img_buf_transform_anti_alias+0x2aa>
 800ea68:	f8a4 9014 	strh.w	r9, [r4, #20]
 800ea6c:	e74a      	b.n	800e904 <_lv_img_buf_transform_anti_alias+0x140>
    else dsc->res.color = lv_color_mix(c0, c1, yr);
 800ea6e:	463a      	mov	r2, r7
 800ea70:	4648      	mov	r0, r9
 800ea72:	f7ff fc2a 	bl	800e2ca <lv_color_mix>
 800ea76:	82a0      	strh	r0, [r4, #20]
 800ea78:	e744      	b.n	800e904 <_lv_img_buf_transform_anti_alias+0x140>
        if(a0 <= LV_OPA_MIN && a1 <= LV_OPA_MIN) return false;
 800ea7a:	2000      	movs	r0, #0
 800ea7c:	e743      	b.n	800e906 <_lv_img_buf_transform_anti_alias+0x142>

0800ea7e <_lv_img_buf_transform>:
{
 800ea7e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800ea82:	4604      	mov	r4, r0
    int32_t xt = x - dsc->cfg.pivot_x;
 800ea84:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
    int32_t yt = y - dsc->cfg.pivot_y;
 800ea88:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
    int32_t xt = x - dsc->cfg.pivot_x;
 800ea8c:	1a09      	subs	r1, r1, r0
    int32_t yt = y - dsc->cfg.pivot_y;
 800ea8e:	1ad2      	subs	r2, r2, r3
    if(dsc->cfg.zoom == LV_IMG_ZOOM_NONE) {
 800ea90:	89e3      	ldrh	r3, [r4, #14]
 800ea92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ea96:	e9d4 5609 	ldrd	r5, r6, [r4, #36]	; 0x24
 800ea9a:	d117      	bne.n	800eacc <_lv_img_buf_transform+0x4e>
        xs = ((dsc->tmp.cosma * xt - dsc->tmp.sinma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT - 8)) + dsc->tmp.pivot_x_256;
 800ea9c:	e9d4 030b 	ldrd	r0, r3, [r4, #44]	; 0x2c
 800eaa0:	fb01 f703 	mul.w	r7, r1, r3
        ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT - 8)) + dsc->tmp.pivot_y_256;
 800eaa4:	4353      	muls	r3, r2
        xs = ((dsc->tmp.cosma * xt - dsc->tmp.sinma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT - 8)) + dsc->tmp.pivot_x_256;
 800eaa6:	fb02 7710 	mls	r7, r2, r0, r7
        ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT - 8)) + dsc->tmp.pivot_y_256;
 800eaaa:	fb01 3200 	mla	r2, r1, r0, r3
        xs = ((dsc->tmp.cosma * xt - dsc->tmp.sinma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT - 8)) + dsc->tmp.pivot_x_256;
 800eaae:	eb05 05a7 	add.w	r5, r5, r7, asr #2
        ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT - 8)) + dsc->tmp.pivot_y_256;
 800eab2:	eb06 06a2 	add.w	r6, r6, r2, asr #2
    if(xs_int >= dsc->cfg.src_w) return false;
 800eab6:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
    int32_t xs_int = xs >> 8;
 800eaba:	ea4f 2925 	mov.w	r9, r5, asr #8
    if(xs_int >= dsc->cfg.src_w) return false;
 800eabe:	ebb3 2f25 	cmp.w	r3, r5, asr #8
 800eac2:	dc1c      	bgt.n	800eafe <_lv_img_buf_transform+0x80>
 800eac4:	2000      	movs	r0, #0
}
 800eac6:	b002      	add	sp, #8
 800eac8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if(dsc->cfg.angle == 0) {
 800eacc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800eace:	4359      	muls	r1, r3
 800ead0:	4353      	muls	r3, r2
 800ead2:	1149      	asrs	r1, r1, #5
 800ead4:	115a      	asrs	r2, r3, #5
 800ead6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eada:	b913      	cbnz	r3, 800eae2 <_lv_img_buf_transform+0x64>
        xs = xt + dsc->tmp.pivot_x_256;
 800eadc:	440d      	add	r5, r1
        ys = yt + dsc->tmp.pivot_y_256;
 800eade:	4416      	add	r6, r2
 800eae0:	e7e9      	b.n	800eab6 <_lv_img_buf_transform+0x38>
        xs = ((dsc->tmp.cosma * xt - dsc->tmp.sinma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT)) + dsc->tmp.pivot_x_256;
 800eae2:	e9d4 070b 	ldrd	r0, r7, [r4, #44]	; 0x2c
 800eae6:	fb01 f307 	mul.w	r3, r1, r7
 800eaea:	fb02 3310 	mls	r3, r2, r0, r3
        ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT)) + dsc->tmp.pivot_y_256;
 800eaee:	437a      	muls	r2, r7
        xs = ((dsc->tmp.cosma * xt - dsc->tmp.sinma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT)) + dsc->tmp.pivot_x_256;
 800eaf0:	eb05 25a3 	add.w	r5, r5, r3, asr #10
        ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT)) + dsc->tmp.pivot_y_256;
 800eaf4:	fb01 2000 	mla	r0, r1, r0, r2
 800eaf8:	eb06 26a0 	add.w	r6, r6, r0, asr #10
 800eafc:	e7db      	b.n	800eab6 <_lv_img_buf_transform+0x38>
    else if(xs_int < 0) return false;
 800eafe:	f1b9 0f00 	cmp.w	r9, #0
 800eb02:	dbdf      	blt.n	800eac4 <_lv_img_buf_transform+0x46>
    if(ys_int >= dsc->cfg.src_h) return false;
 800eb04:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
    int32_t ys_int = ys >> 8;
 800eb08:	ea4f 2826 	mov.w	r8, r6, asr #8
    if(ys_int >= dsc->cfg.src_h) return false;
 800eb0c:	ebb2 2f26 	cmp.w	r2, r6, asr #8
 800eb10:	ddd8      	ble.n	800eac4 <_lv_img_buf_transform+0x46>
    else if(ys_int < 0) return false;
 800eb12:	f1b8 0f00 	cmp.w	r8, #0
 800eb16:	dbd5      	blt.n	800eac4 <_lv_img_buf_transform+0x46>
    if(dsc->tmp.native_color) {
 800eb18:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 800eb1c:	f012 0704 	ands.w	r7, r2, #4
 800eb20:	d021      	beq.n	800eb66 <_lv_img_buf_transform+0xe8>
    const uint8_t * src_u8 = (const uint8_t *)dsc->cfg.src;
 800eb22:	4620      	mov	r0, r4
 800eb24:	fb08 9303 	mla	r3, r8, r3, r9
        if(dsc->tmp.has_alpha == 0) {
 800eb28:	f012 0f02 	tst.w	r2, #2
    const uint8_t * src_u8 = (const uint8_t *)dsc->cfg.src;
 800eb2c:	f850 1b14 	ldr.w	r1, [r0], #20
        if(dsc->tmp.has_alpha == 0) {
 800eb30:	ea4f 0a43 	mov.w	sl, r3, lsl #1
 800eb34:	d10c      	bne.n	800eb50 <_lv_img_buf_transform+0xd2>
            px_size = LV_COLOR_SIZE >> 3;
 800eb36:	2702      	movs	r7, #2
            lv_memcpy_small(&dsc->res.color, &src_u8[pxi], px_size);
 800eb38:	2202      	movs	r2, #2
 800eb3a:	4451      	add	r1, sl
 800eb3c:	f7ff fbef 	bl	800e31e <lv_memcpy_small>
    if(dsc->tmp.chroma_keyed) {
 800eb40:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800eb44:	07db      	lsls	r3, r3, #31
 800eb46:	d423      	bmi.n	800eb90 <_lv_img_buf_transform+0x112>
    if(dsc->cfg.antialias == false) return true;
 800eb48:	7ce3      	ldrb	r3, [r4, #19]
 800eb4a:	bb33      	cbnz	r3, 800eb9a <_lv_img_buf_transform+0x11c>
 800eb4c:	2001      	movs	r0, #1
 800eb4e:	e7ba      	b.n	800eac6 <_lv_img_buf_transform+0x48>
            pxi     = dsc->cfg.src_w * ys_int * px_size + xs_int * px_size;
 800eb50:	449a      	add	sl, r3
            lv_memcpy_small(&dsc->res.color, &src_u8[pxi], px_size - 1);
 800eb52:	2202      	movs	r2, #2
 800eb54:	eb01 070a 	add.w	r7, r1, sl
 800eb58:	4639      	mov	r1, r7
 800eb5a:	f7ff fbe0 	bl	800e31e <lv_memcpy_small>
            dsc->res.opa = src_u8[pxi + px_size - 1];
 800eb5e:	78bb      	ldrb	r3, [r7, #2]
            px_size = LV_IMG_PX_SIZE_ALPHA_BYTE;
 800eb60:	2703      	movs	r7, #3
            dsc->res.opa = src_u8[pxi + px_size - 1];
 800eb62:	75a3      	strb	r3, [r4, #22]
 800eb64:	e7ec      	b.n	800eb40 <_lv_img_buf_transform+0xc2>
        dsc->res.color = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, xs_int, ys_int, dsc->cfg.color);
 800eb66:	f104 0a18 	add.w	sl, r4, #24
 800eb6a:	fa0f f189 	sxth.w	r1, r9
 800eb6e:	fa0f f288 	sxth.w	r2, r8
 800eb72:	8a23      	ldrh	r3, [r4, #16]
 800eb74:	4650      	mov	r0, sl
 800eb76:	e9cd 1200 	strd	r1, r2, [sp]
 800eb7a:	f7ff fbdc 	bl	800e336 <lv_img_buf_get_px_color>
 800eb7e:	82a0      	strh	r0, [r4, #20]
        dsc->res.opa = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, xs_int, ys_int);
 800eb80:	4650      	mov	r0, sl
        pxi = 0; /*unused*/
 800eb82:	46ba      	mov	sl, r7
        dsc->res.opa = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, xs_int, ys_int);
 800eb84:	e9dd 1200 	ldrd	r1, r2, [sp]
 800eb88:	f7ff fc4e 	bl	800e428 <lv_img_buf_get_px_alpha>
 800eb8c:	75a0      	strb	r0, [r4, #22]
 800eb8e:	e7d7      	b.n	800eb40 <_lv_img_buf_transform+0xc2>
        if(dsc->res.color.full == ct.full) return false;
 800eb90:	8aa3      	ldrh	r3, [r4, #20]
 800eb92:	f5b3 6ffc 	cmp.w	r3, #2016	; 0x7e0
 800eb96:	d1d7      	bne.n	800eb48 <_lv_img_buf_transform+0xca>
 800eb98:	e794      	b.n	800eac4 <_lv_img_buf_transform+0x46>
    ret = _lv_img_buf_transform_anti_alias(dsc);
 800eb9a:	4620      	mov	r0, r4
    dsc->tmp.xs = xs;
 800eb9c:	87a5      	strh	r5, [r4, #60]	; 0x3c
    dsc->tmp.ys = ys;
 800eb9e:	87e6      	strh	r6, [r4, #62]	; 0x3e
    dsc->tmp.xs_int = xs_int;
 800eba0:	f8a4 9040 	strh.w	r9, [r4, #64]	; 0x40
    dsc->tmp.ys_int = ys_int;
 800eba4:	f8a4 8042 	strh.w	r8, [r4, #66]	; 0x42
    dsc->tmp.pxi = pxi;
 800eba8:	f8c4 a044 	str.w	sl, [r4, #68]	; 0x44
    dsc->tmp.px_size = px_size;
 800ebac:	f884 7048 	strb.w	r7, [r4, #72]	; 0x48
}
 800ebb0:	b002      	add	sp, #8
 800ebb2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ret = _lv_img_buf_transform_anti_alias(dsc);
 800ebb6:	f7ff be05 	b.w	800e7c4 <_lv_img_buf_transform_anti_alias>
	...

0800ebbc <_lv_img_cache_open>:
 * @param src source of the image. Path to file or pointer to an `lv_img_dsc_t` variable
 * @param color color The color of the image with `LV_IMG_CF_ALPHA_...`
 * @return pointer to the cache entry or NULL if can open the image
 */
_lv_img_cache_entry_t * _lv_img_cache_open(const void * src, lv_color_t color, int32_t frame_id)
{
 800ebbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ebbe:	4605      	mov	r5, r0
 800ebc0:	460f      	mov	r7, r1
#else
    cached_src = &LV_GC_ROOT(_lv_img_cache_single);
#endif
    /*Open the image and measure the time to open*/
    uint32_t t_start  = lv_tick_get();
    lv_res_t open_res = lv_img_decoder_open(&cached_src->dec_dsc, src, color, frame_id);
 800ebc2:	4c13      	ldr	r4, [pc, #76]	; (800ec10 <_lv_img_cache_open+0x54>)
{
 800ebc4:	9201      	str	r2, [sp, #4]
    uint32_t t_start  = lv_tick_get();
 800ebc6:	f007 ff23 	bl	8016a10 <lv_tick_get>
    lv_res_t open_res = lv_img_decoder_open(&cached_src->dec_dsc, src, color, frame_id);
 800ebca:	4629      	mov	r1, r5
    uint32_t t_start  = lv_tick_get();
 800ebcc:	4606      	mov	r6, r0
    lv_res_t open_res = lv_img_decoder_open(&cached_src->dec_dsc, src, color, frame_id);
 800ebce:	9b01      	ldr	r3, [sp, #4]
 800ebd0:	463a      	mov	r2, r7
 800ebd2:	4620      	mov	r0, r4
 800ebd4:	f000 fb06 	bl	800f1e4 <lv_img_decoder_open>
    if(open_res == LV_RES_INV) {
 800ebd8:	4605      	mov	r5, r0
 800ebda:	b948      	cbnz	r0, 800ebf0 <_lv_img_cache_open+0x34>
        LV_LOG_WARN("Image draw cannot open the image resource");
        lv_memset_00(cached_src, sizeof(_lv_img_cache_entry_t));
 800ebdc:	4620      	mov	r0, r4
 800ebde:	212c      	movs	r1, #44	; 0x2c
 800ebe0:	f008 ffa8 	bl	8017b34 <lv_memset_00>
        cached_src->life = INT32_MIN; /*Make the empty entry very "weak" to force its us*/
 800ebe4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
        return NULL;
 800ebe8:	4628      	mov	r0, r5
        cached_src->life = INT32_MIN; /*Make the empty entry very "weak" to force its us*/
 800ebea:	62a3      	str	r3, [r4, #40]	; 0x28
    }

    if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;

    return cached_src;
}
 800ebec:	b003      	add	sp, #12
 800ebee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cached_src->life = 0;
 800ebf0:	2300      	movs	r3, #0
 800ebf2:	62a3      	str	r3, [r4, #40]	; 0x28
    if(cached_src->dec_dsc.time_to_open == 0) {
 800ebf4:	69e3      	ldr	r3, [r4, #28]
 800ebf6:	b10b      	cbz	r3, 800ebfc <_lv_img_cache_open+0x40>
    return cached_src;
 800ebf8:	4805      	ldr	r0, [pc, #20]	; (800ec10 <_lv_img_cache_open+0x54>)
 800ebfa:	e7f7      	b.n	800ebec <_lv_img_cache_open+0x30>
        cached_src->dec_dsc.time_to_open = lv_tick_elaps(t_start);
 800ebfc:	4630      	mov	r0, r6
 800ebfe:	f007 ff15 	bl	8016a2c <lv_tick_elaps>
    if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;
 800ec02:	b108      	cbz	r0, 800ec08 <_lv_img_cache_open+0x4c>
        cached_src->dec_dsc.time_to_open = lv_tick_elaps(t_start);
 800ec04:	61e0      	str	r0, [r4, #28]
 800ec06:	e7f7      	b.n	800ebf8 <_lv_img_cache_open+0x3c>
    if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;
 800ec08:	2301      	movs	r3, #1
    return cached_src;
 800ec0a:	4620      	mov	r0, r4
    if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;
 800ec0c:	61e3      	str	r3, [r4, #28]
 800ec0e:	e7ed      	b.n	800ebec <_lv_img_cache_open+0x30>
 800ec10:	2000ae30 	.word	0x2000ae30

0800ec14 <lv_img_decoder_built_in_close>:
 * Close the pending decoding. Free resources etc.
 * @param decoder pointer to the decoder the function associated with
 * @param dsc pointer to decoder descriptor
 */
void lv_img_decoder_built_in_close(lv_img_decoder_t * decoder, lv_img_decoder_dsc_t * dsc)
{
 800ec14:	b538      	push	{r3, r4, r5, lr}
    (void)decoder; /*Unused*/

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800ec16:	6a4d      	ldr	r5, [r1, #36]	; 0x24
{
 800ec18:	460c      	mov	r4, r1
    if(user_data) {
 800ec1a:	b195      	cbz	r5, 800ec42 <lv_img_decoder_built_in_close+0x2e>
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 800ec1c:	7c0b      	ldrb	r3, [r1, #16]
 800ec1e:	2b01      	cmp	r3, #1
 800ec20:	d102      	bne.n	800ec28 <lv_img_decoder_built_in_close+0x14>
            lv_fs_close(&user_data->f);
 800ec22:	4628      	mov	r0, r5
 800ec24:	f008 fb6e 	bl	8017304 <lv_fs_close>
        }
        if(user_data->palette) lv_mem_free(user_data->palette);
 800ec28:	68a8      	ldr	r0, [r5, #8]
 800ec2a:	b108      	cbz	r0, 800ec30 <lv_img_decoder_built_in_close+0x1c>
 800ec2c:	f008 fd82 	bl	8017734 <lv_mem_free>
        if(user_data->opa) lv_mem_free(user_data->opa);
 800ec30:	68e8      	ldr	r0, [r5, #12]
 800ec32:	b108      	cbz	r0, 800ec38 <lv_img_decoder_built_in_close+0x24>
 800ec34:	f008 fd7e 	bl	8017734 <lv_mem_free>

        lv_mem_free(user_data);
 800ec38:	4628      	mov	r0, r5
 800ec3a:	f008 fd7b 	bl	8017734 <lv_mem_free>
        dsc->user_data = NULL;
 800ec3e:	2300      	movs	r3, #0
 800ec40:	6263      	str	r3, [r4, #36]	; 0x24
    }
}
 800ec42:	bd38      	pop	{r3, r4, r5, pc}

0800ec44 <lv_img_decoder_built_in_info>:
{
 800ec44:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    lv_img_src_t src_type = lv_img_src_get_type(src);
 800ec46:	4608      	mov	r0, r1
{
 800ec48:	460e      	mov	r6, r1
 800ec4a:	4615      	mov	r5, r2
    lv_img_src_t src_type = lv_img_src_get_type(src);
 800ec4c:	f7fb fc46 	bl	800a4dc <lv_img_src_get_type>
    if(src_type == LV_IMG_SRC_VARIABLE) {
 800ec50:	4604      	mov	r4, r0
 800ec52:	b9d8      	cbnz	r0, 800ec8c <lv_img_decoder_built_in_info+0x48>
        lv_img_cf_t cf = ((lv_img_dsc_t *)src)->header.cf;
 800ec54:	7833      	ldrb	r3, [r6, #0]
 800ec56:	f3c3 0304 	ubfx	r3, r3, #0, #5
        if(cf < CF_BUILT_IN_FIRST || cf > CF_BUILT_IN_LAST) return LV_RES_INV;
 800ec5a:	3b04      	subs	r3, #4
 800ec5c:	b2db      	uxtb	r3, r3
 800ec5e:	2b0a      	cmp	r3, #10
 800ec60:	d811      	bhi.n	800ec86 <lv_img_decoder_built_in_info+0x42>
        header->h  = ((lv_img_dsc_t *)src)->header.h;
 800ec62:	8873      	ldrh	r3, [r6, #2]
 800ec64:	886a      	ldrh	r2, [r5, #2]
 800ec66:	f3c3 134a 	ubfx	r3, r3, #5, #11
        lv_img_cf_t cf = ((lv_img_dsc_t *)src)->header.cf;
 800ec6a:	6831      	ldr	r1, [r6, #0]
        header->h  = ((lv_img_dsc_t *)src)->header.h;
 800ec6c:	f363 124f 	bfi	r2, r3, #5, #11
 800ec70:	806a      	strh	r2, [r5, #2]
        header->cf = ((lv_img_dsc_t *)src)->header.cf;
 800ec72:	682b      	ldr	r3, [r5, #0]
 800ec74:	4a1b      	ldr	r2, [pc, #108]	; (800ece4 <lv_img_decoder_built_in_info+0xa0>)
 800ec76:	f023 131f 	bic.w	r3, r3, #2031647	; 0x1f001f
 800ec7a:	400a      	ands	r2, r1
 800ec7c:	f423 437c 	bic.w	r3, r3, #64512	; 0xfc00
        header->cf = LV_IMG_CF_ALPHA_1BIT;
 800ec80:	4313      	orrs	r3, r2
    return LV_RES_OK;
 800ec82:	2401      	movs	r4, #1
        header->cf = LV_IMG_CF_ALPHA_1BIT;
 800ec84:	602b      	str	r3, [r5, #0]
}
 800ec86:	4620      	mov	r0, r4
 800ec88:	b004      	add	sp, #16
 800ec8a:	bd70      	pop	{r4, r5, r6, pc}
    else if(src_type == LV_IMG_SRC_FILE) {
 800ec8c:	2801      	cmp	r0, #1
 800ec8e:	d122      	bne.n	800ecd6 <lv_img_decoder_built_in_info+0x92>
        if(strcmp(lv_fs_get_ext(src), "bin")) return LV_RES_INV;
 800ec90:	4630      	mov	r0, r6
 800ec92:	f008 fbb3 	bl	80173fc <lv_fs_get_ext>
 800ec96:	4914      	ldr	r1, [pc, #80]	; (800ece8 <lv_img_decoder_built_in_info+0xa4>)
 800ec98:	f7f1 fb0a 	bl	80002b0 <strcmp>
 800ec9c:	b9c8      	cbnz	r0, 800ecd2 <lv_img_decoder_built_in_info+0x8e>
        lv_fs_res_t res = lv_fs_open(&f, src, LV_FS_MODE_RD);
 800ec9e:	2202      	movs	r2, #2
 800eca0:	4631      	mov	r1, r6
 800eca2:	a802      	add	r0, sp, #8
 800eca4:	f008 fb80 	bl	80173a8 <lv_fs_open>
        if(res == LV_FS_RES_OK) {
 800eca8:	b968      	cbnz	r0, 800ecc6 <lv_img_decoder_built_in_info+0x82>
            res = lv_fs_read(&f, header, sizeof(lv_img_header_t), &rn);
 800ecaa:	ab01      	add	r3, sp, #4
 800ecac:	2204      	movs	r2, #4
 800ecae:	4629      	mov	r1, r5
 800ecb0:	a802      	add	r0, sp, #8
 800ecb2:	f008 fb37 	bl	8017324 <lv_fs_read>
 800ecb6:	4606      	mov	r6, r0
            lv_fs_close(&f);
 800ecb8:	a802      	add	r0, sp, #8
 800ecba:	f008 fb23 	bl	8017304 <lv_fs_close>
            if(res != LV_FS_RES_OK || rn != sizeof(lv_img_header_t)) {
 800ecbe:	b946      	cbnz	r6, 800ecd2 <lv_img_decoder_built_in_info+0x8e>
 800ecc0:	9b01      	ldr	r3, [sp, #4]
 800ecc2:	2b04      	cmp	r3, #4
 800ecc4:	d105      	bne.n	800ecd2 <lv_img_decoder_built_in_info+0x8e>
        if(header->cf < CF_BUILT_IN_FIRST || header->cf > CF_BUILT_IN_LAST) return LV_RES_INV;
 800ecc6:	782b      	ldrb	r3, [r5, #0]
 800ecc8:	331c      	adds	r3, #28
 800ecca:	f003 031f 	and.w	r3, r3, #31
 800ecce:	2b0a      	cmp	r3, #10
 800ecd0:	d9d9      	bls.n	800ec86 <lv_img_decoder_built_in_info+0x42>
        if(cf < CF_BUILT_IN_FIRST || cf > CF_BUILT_IN_LAST) return LV_RES_INV;
 800ecd2:	2400      	movs	r4, #0
 800ecd4:	e7d7      	b.n	800ec86 <lv_img_decoder_built_in_info+0x42>
    else if(src_type == LV_IMG_SRC_SYMBOL) {
 800ecd6:	2802      	cmp	r0, #2
 800ecd8:	d1fb      	bne.n	800ecd2 <lv_img_decoder_built_in_info+0x8e>
        header->cf = LV_IMG_CF_ALPHA_1BIT;
 800ecda:	682b      	ldr	r3, [r5, #0]
 800ecdc:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
 800ece0:	4b02      	ldr	r3, [pc, #8]	; (800ecec <lv_img_decoder_built_in_info+0xa8>)
 800ece2:	e7cd      	b.n	800ec80 <lv_img_decoder_built_in_info+0x3c>
 800ece4:	001ffc1f 	.word	0x001ffc1f
 800ece8:	08024f81 	.word	0x08024f81
 800ecec:	0020040b 	.word	0x0020040b

0800ecf0 <lv_img_decoder_built_in_read_line>:
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 800ecf0:	7d08      	ldrb	r0, [r1, #20]
{
 800ecf2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecf6:	469b      	mov	fp, r3
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 800ecf8:	f000 031e 	and.w	r3, r0, #30
{
 800ecfc:	b08b      	sub	sp, #44	; 0x2c
 800ecfe:	460e      	mov	r6, r1
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 800ed00:	2b04      	cmp	r3, #4
{
 800ed02:	4614      	mov	r4, r2
 800ed04:	f9bd a050 	ldrsh.w	sl, [sp, #80]	; 0x50
 800ed08:	f8dd 8054 	ldr.w	r8, [sp, #84]	; 0x54
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 800ed0c:	d003      	beq.n	800ed16 <lv_img_decoder_built_in_read_line+0x26>
       dsc->header.cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 800ed0e:	f000 031f 	and.w	r3, r0, #31
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 800ed12:	2b06      	cmp	r3, #6
 800ed14:	d12d      	bne.n	800ed72 <lv_img_decoder_built_in_read_line+0x82>
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 800ed16:	7c37      	ldrb	r7, [r6, #16]
 800ed18:	2f01      	cmp	r7, #1
 800ed1a:	d001      	beq.n	800ed20 <lv_img_decoder_built_in_read_line+0x30>
    uint32_t btr = len * (px_size >> 3);
    uint32_t br  = 0;
    res = lv_fs_read(&user_data->f, buf, btr, &br);
    if(res != LV_FS_RES_OK || btr != br) {
        LV_LOG_WARN("Built-in image decoder read failed");
        return LV_RES_INV;
 800ed1c:	2700      	movs	r7, #0
 800ed1e:	e024      	b.n	800ed6a <lv_img_decoder_built_in_read_line+0x7a>
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
 800ed20:	f000 001f 	and.w	r0, r0, #31
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800ed24:	f8d6 9024 	ldr.w	r9, [r6, #36]	; 0x24
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
 800ed28:	f7fb fac8 	bl	800a2bc <lv_img_cf_get_px_size>
    uint32_t pos = ((y * dsc->header.w + x) * px_size) >> 3;
 800ed2c:	6971      	ldr	r1, [r6, #20]
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
 800ed2e:	4605      	mov	r5, r0
    res = lv_fs_seek(&user_data->f, pos, LV_FS_SEEK_SET);
 800ed30:	2200      	movs	r2, #0
    uint32_t pos = ((y * dsc->header.w + x) * px_size) >> 3;
 800ed32:	f3c1 218a 	ubfx	r1, r1, #10, #11
 800ed36:	fb1b 4101 	smlabb	r1, fp, r1, r4
 800ed3a:	4341      	muls	r1, r0
    res = lv_fs_seek(&user_data->f, pos, LV_FS_SEEK_SET);
 800ed3c:	4648      	mov	r0, r9
    uint32_t pos = ((y * dsc->header.w + x) * px_size) >> 3;
 800ed3e:	10c9      	asrs	r1, r1, #3
    res = lv_fs_seek(&user_data->f, pos, LV_FS_SEEK_SET);
 800ed40:	3104      	adds	r1, #4
 800ed42:	f008 fb0a 	bl	801735a <lv_fs_seek>
    if(res != LV_FS_RES_OK) {
 800ed46:	2800      	cmp	r0, #0
 800ed48:	d1e8      	bne.n	800ed1c <lv_img_decoder_built_in_read_line+0x2c>
    uint32_t btr = len * (px_size >> 3);
 800ed4a:	f3c5 05c7 	ubfx	r5, r5, #3, #8
    uint32_t br  = 0;
 800ed4e:	9006      	str	r0, [sp, #24]
    res = lv_fs_read(&user_data->f, buf, btr, &br);
 800ed50:	ab06      	add	r3, sp, #24
 800ed52:	4641      	mov	r1, r8
    uint32_t btr = len * (px_size >> 3);
 800ed54:	fb15 fa0a 	smulbb	sl, r5, sl
    res = lv_fs_read(&user_data->f, buf, btr, &br);
 800ed58:	4648      	mov	r0, r9
 800ed5a:	4652      	mov	r2, sl
 800ed5c:	f008 fae2 	bl	8017324 <lv_fs_read>
    if(res != LV_FS_RES_OK || btr != br) {
 800ed60:	2800      	cmp	r0, #0
 800ed62:	d1db      	bne.n	800ed1c <lv_img_decoder_built_in_read_line+0x2c>
 800ed64:	9b06      	ldr	r3, [sp, #24]
 800ed66:	459a      	cmp	sl, r3
 800ed68:	d1d8      	bne.n	800ed1c <lv_img_decoder_built_in_read_line+0x2c>
}
 800ed6a:	4638      	mov	r0, r7
 800ed6c:	b00b      	add	sp, #44	; 0x2c
 800ed6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
 800ed72:	f1a3 020b 	sub.w	r2, r3, #11
 800ed76:	2a03      	cmp	r2, #3
 800ed78:	f200 80ba 	bhi.w	800eef0 <lv_img_decoder_built_in_read_line+0x200>
}

static lv_res_t lv_img_decoder_built_in_line_alpha(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                   lv_coord_t len, uint8_t * buf)
{
    const lv_opa_t alpha1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
 800ed7c:	f44f 437f 	mov.w	r3, #65280	; 0xff00
    const lv_opa_t alpha2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
    const lv_opa_t alpha4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
 800ed80:	aa06      	add	r2, sp, #24
    const lv_opa_t alpha1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
 800ed82:	f8ad 3010 	strh.w	r3, [sp, #16]
    const lv_opa_t alpha2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
 800ed86:	f5a3 03ad 	sub.w	r3, r3, #5668864	; 0x568000
 800ed8a:	4691      	mov	r9, r2
 800ed8c:	f5a3 5328 	sub.w	r3, r3, #10752	; 0x2a00
 800ed90:	9305      	str	r3, [sp, #20]
    const lv_opa_t alpha4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
 800ed92:	4ba4      	ldr	r3, [pc, #656]	; (800f024 <lv_img_decoder_built_in_read_line+0x334>)
 800ed94:	f103 0710 	add.w	r7, r3, #16
 800ed98:	6818      	ldr	r0, [r3, #0]
 800ed9a:	3308      	adds	r3, #8
 800ed9c:	f853 1c04 	ldr.w	r1, [r3, #-4]
 800eda0:	4615      	mov	r5, r2
 800eda2:	42bb      	cmp	r3, r7
 800eda4:	c503      	stmia	r5!, {r0, r1}
 800eda6:	462a      	mov	r2, r5
 800eda8:	d1f6      	bne.n	800ed98 <lv_img_decoder_built_in_read_line+0xa8>
                                           68, 85, 102, 119, 136, 153, 170, 187, 204, 221, 238, 255
                                          };

    /*Simply fill the buffer with the color. Later only the alpha value will be modified.*/
    lv_color_t bg_color = dsc->color;
 800edaa:	8931      	ldrh	r1, [r6, #8]
    lv_coord_t i;
    for(i = 0; i < len; i++) {
 800edac:	4643      	mov	r3, r8
 800edae:	2200      	movs	r2, #0
#if LV_COLOR_DEPTH == 8 || LV_COLOR_DEPTH == 1
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full;
#elif LV_COLOR_DEPTH == 16
        /*Because of Alpha byte 16 bit color can start on odd address which can cause crash*/
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full & 0xFF;
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (bg_color.full >> 8) & 0xFF;
 800edb0:	0a0d      	lsrs	r5, r1, #8
    for(i = 0; i < len; i++) {
 800edb2:	b210      	sxth	r0, r2
 800edb4:	3303      	adds	r3, #3
 800edb6:	4582      	cmp	sl, r0
 800edb8:	dc14      	bgt.n	800ede4 <lv_img_decoder_built_in_read_line+0xf4>
#error "Invalid LV_COLOR_DEPTH. Check it in lv_conf.h"
#endif
    }

    const lv_opa_t * opa_table = NULL;
    uint8_t px_size            = lv_img_cf_get_px_size(dsc->header.cf);
 800edba:	7d30      	ldrb	r0, [r6, #20]
 800edbc:	f000 001f 	and.w	r0, r0, #31
 800edc0:	f7fb fa7c 	bl	800a2bc <lv_img_cf_get_px_size>
    uint16_t mask              = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 800edc4:	2301      	movs	r3, #1
    uint8_t px_size            = lv_img_cf_get_px_size(dsc->header.cf);
 800edc6:	9001      	str	r0, [sp, #4]
    uint16_t mask              = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 800edc8:	4083      	lsls	r3, r0
 800edca:	3b01      	subs	r3, #1
 800edcc:	b29b      	uxth	r3, r3
 800edce:	9302      	str	r3, [sp, #8]

    lv_coord_t w = 0;
    uint32_t ofs = 0;
    int8_t pos   = 0;
    switch(dsc->header.cf) {
 800edd0:	7d33      	ldrb	r3, [r6, #20]
 800edd2:	f003 031f 	and.w	r3, r3, #31
 800edd6:	3b0b      	subs	r3, #11
 800edd8:	2b03      	cmp	r3, #3
 800edda:	d85e      	bhi.n	800ee9a <lv_img_decoder_built_in_read_line+0x1aa>
 800eddc:	e8df f003 	tbb	[pc, r3]
 800ede0:	54453508 	.word	0x54453508
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full & 0xFF;
 800ede4:	3201      	adds	r2, #1
 800ede6:	f803 1c03 	strb.w	r1, [r3, #-3]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (bg_color.full >> 8) & 0xFF;
 800edea:	f803 5c02 	strb.w	r5, [r3, #-2]
    for(i = 0; i < len; i++) {
 800edee:	e7e0      	b.n	800edb2 <lv_img_decoder_built_in_read_line+0xc2>
        case LV_IMG_CF_ALPHA_1BIT:
            w = (dsc->header.w + 7) >> 3; /*E.g. w = 20 -> w = 2 + 1*/
 800edf0:	6975      	ldr	r5, [r6, #20]
            ofs += w * y + (x >> 3); /*First pixel*/
 800edf2:	10e1      	asrs	r1, r4, #3
            pos = 7 - (x & 0x7);
 800edf4:	43e4      	mvns	r4, r4
            opa_table = alpha1_opa_table;
 800edf6:	f10d 0910 	add.w	r9, sp, #16
            w = (dsc->header.w + 7) >> 3; /*E.g. w = 20 -> w = 2 + 1*/
 800edfa:	f3c5 258a 	ubfx	r5, r5, #10, #11
            pos = 7 - (x & 0x7);
 800edfe:	f004 0407 	and.w	r4, r4, #7
            w = (dsc->header.w + 7) >> 3; /*E.g. w = 20 -> w = 2 + 1*/
 800ee02:	3507      	adds	r5, #7
 800ee04:	10eb      	asrs	r3, r5, #3
 800ee06:	461d      	mov	r5, r3
            ofs += w * y + (x >> 3); /*First pixel*/
 800ee08:	fb03 110b 	mla	r1, r3, fp, r1
            pos = 0;
            break;
    }

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
    uint8_t * fs_buf = lv_mem_buf_get(w);
 800ee0c:	4628      	mov	r0, r5
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800ee0e:	f8d6 b024 	ldr.w	fp, [r6, #36]	; 0x24
 800ee12:	9103      	str	r1, [sp, #12]
    uint8_t * fs_buf = lv_mem_buf_get(w);
 800ee14:	f008 fe40 	bl	8017a98 <lv_mem_buf_get>
    if (fs_buf == NULL) return LV_RES_INV;
 800ee18:	4607      	mov	r7, r0
 800ee1a:	2800      	cmp	r0, #0
 800ee1c:	d0a5      	beq.n	800ed6a <lv_img_decoder_built_in_read_line+0x7a>

    const uint8_t * data_tmp = NULL;
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 800ee1e:	7c33      	ldrb	r3, [r6, #16]
 800ee20:	9903      	ldr	r1, [sp, #12]
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d13d      	bne.n	800eea2 <lv_img_decoder_built_in_read_line+0x1b2>
        const lv_img_dsc_t * img_dsc = dsc->src;

        data_tmp = img_dsc->data + ofs;
 800ee26:	6873      	ldr	r3, [r6, #4]
 800ee28:	689b      	ldr	r3, [r3, #8]
 800ee2a:	4419      	add	r1, r3
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];

        pos -= px_size;
        if(pos < 0) {
            pos = 8 - px_size;
 800ee2c:	9a01      	ldr	r2, [sp, #4]
        lv_fs_read(&user_data->f, fs_buf, w, NULL);
 800ee2e:	2300      	movs	r3, #0
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 800ee30:	f108 0802 	add.w	r8, r8, #2
            pos = 8 - px_size;
 800ee34:	f1c2 0008 	rsb	r0, r2, #8
 800ee38:	b240      	sxtb	r0, r0
    for(i = 0; i < len; i++) {
 800ee3a:	b21a      	sxth	r2, r3
 800ee3c:	4552      	cmp	r2, sl
 800ee3e:	db3d      	blt.n	800eebc <lv_img_decoder_built_in_read_line+0x1cc>
        if(pos < 0) {
            pos = 8 - px_size;
            data_tmp++;
        }
    }
    lv_mem_buf_release(fs_buf);
 800ee40:	4638      	mov	r0, r7
    return LV_RES_OK;
 800ee42:	2701      	movs	r7, #1
    lv_mem_buf_release(fs_buf);
 800ee44:	f008 fc84 	bl	8017750 <lv_mem_buf_release>
    return LV_RES_OK;
 800ee48:	e78f      	b.n	800ed6a <lv_img_decoder_built_in_read_line+0x7a>
            w = (dsc->header.w + 3) >> 2; /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 800ee4a:	6975      	ldr	r5, [r6, #20]
            ofs += w * y + (x >> 2); /*First pixel*/
 800ee4c:	10a1      	asrs	r1, r4, #2
            pos = 6 - (x & 0x3) * 2;
 800ee4e:	43e4      	mvns	r4, r4
            opa_table = alpha2_opa_table;
 800ee50:	f10d 0914 	add.w	r9, sp, #20
            w = (dsc->header.w + 3) >> 2; /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 800ee54:	f3c5 258a 	ubfx	r5, r5, #10, #11
            pos = 6 - (x & 0x3) * 2;
 800ee58:	f004 0403 	and.w	r4, r4, #3
            w = (dsc->header.w + 3) >> 2; /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 800ee5c:	3503      	adds	r5, #3
            pos = 6 - (x & 0x3) * 2;
 800ee5e:	0064      	lsls	r4, r4, #1
            w = (dsc->header.w + 3) >> 2; /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 800ee60:	10ab      	asrs	r3, r5, #2
 800ee62:	461d      	mov	r5, r3
            ofs += w * y + (x >> 2); /*First pixel*/
 800ee64:	fb03 110b 	mla	r1, r3, fp, r1
            break;
 800ee68:	e7d0      	b.n	800ee0c <lv_img_decoder_built_in_read_line+0x11c>
            w = (dsc->header.w + 1) >> 1; /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 800ee6a:	6975      	ldr	r5, [r6, #20]
            ofs += w * y + (x >> 1); /*First pixel*/
 800ee6c:	1061      	asrs	r1, r4, #1
            pos = 4 - (x & 0x1) * 4;
 800ee6e:	f014 0f01 	tst.w	r4, #1
            w = (dsc->header.w + 1) >> 1; /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 800ee72:	f3c5 258a 	ubfx	r5, r5, #10, #11
            pos = 4 - (x & 0x1) * 4;
 800ee76:	bf0c      	ite	eq
 800ee78:	2404      	moveq	r4, #4
 800ee7a:	2400      	movne	r4, #0
            w = (dsc->header.w + 1) >> 1; /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 800ee7c:	3501      	adds	r5, #1
 800ee7e:	106b      	asrs	r3, r5, #1
 800ee80:	461d      	mov	r5, r3
            ofs += w * y + (x >> 1); /*First pixel*/
 800ee82:	fb03 110b 	mla	r1, r3, fp, r1
            pos = 4 - (x & 0x1) * 4;
 800ee86:	e7c1      	b.n	800ee0c <lv_img_decoder_built_in_read_line+0x11c>
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 800ee88:	6975      	ldr	r5, [r6, #20]
 800ee8a:	f3c5 218a 	ubfx	r1, r5, #10, #11
 800ee8e:	460d      	mov	r5, r1
            ofs += w * y + x;  /*First pixel*/
 800ee90:	fb1b 4101 	smlabb	r1, fp, r1, r4
            pos = 0;
 800ee94:	2400      	movs	r4, #0
    switch(dsc->header.cf) {
 800ee96:	46a1      	mov	r9, r4
 800ee98:	e7b8      	b.n	800ee0c <lv_img_decoder_built_in_read_line+0x11c>
 800ee9a:	2400      	movs	r4, #0
 800ee9c:	4621      	mov	r1, r4
 800ee9e:	4625      	mov	r5, r4
 800eea0:	e7f9      	b.n	800ee96 <lv_img_decoder_built_in_read_line+0x1a6>
        lv_fs_seek(&user_data->f, ofs + 4, LV_FS_SEEK_SET); /*+4 to skip the header*/
 800eea2:	2200      	movs	r2, #0
 800eea4:	3104      	adds	r1, #4
 800eea6:	4658      	mov	r0, fp
 800eea8:	f008 fa57 	bl	801735a <lv_fs_seek>
        lv_fs_read(&user_data->f, fs_buf, w, NULL);
 800eeac:	4639      	mov	r1, r7
 800eeae:	2300      	movs	r3, #0
 800eeb0:	462a      	mov	r2, r5
 800eeb2:	4658      	mov	r0, fp
 800eeb4:	f008 fa36 	bl	8017324 <lv_fs_read>
 800eeb8:	4639      	mov	r1, r7
 800eeba:	e7b7      	b.n	800ee2c <lv_img_decoder_built_in_read_line+0x13c>
        uint8_t val_act = (*data_tmp >> pos) & mask;
 800eebc:	780a      	ldrb	r2, [r1, #0]
 800eebe:	9d02      	ldr	r5, [sp, #8]
 800eec0:	4122      	asrs	r2, r4
 800eec2:	402a      	ands	r2, r5
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];
 800eec4:	7d35      	ldrb	r5, [r6, #20]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 800eec6:	f005 051f 	and.w	r5, r5, #31
        uint8_t val_act = (*data_tmp >> pos) & mask;
 800eeca:	b2d2      	uxtb	r2, r2
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 800eecc:	2d0e      	cmp	r5, #14
 800eece:	eb03 0543 	add.w	r5, r3, r3, lsl #1
 800eed2:	f103 0301 	add.w	r3, r3, #1
 800eed6:	bf18      	it	ne
 800eed8:	f819 2002 	ldrbne.w	r2, [r9, r2]
 800eedc:	f808 2005 	strb.w	r2, [r8, r5]
        pos -= px_size;
 800eee0:	9a01      	ldr	r2, [sp, #4]
 800eee2:	1aa4      	subs	r4, r4, r2
 800eee4:	b264      	sxtb	r4, r4
        if(pos < 0) {
 800eee6:	2c00      	cmp	r4, #0
            pos = 8 - px_size;
 800eee8:	bfbc      	itt	lt
 800eeea:	4604      	movlt	r4, r0
            data_tmp++;
 800eeec:	3101      	addlt	r1, #1
    for(i = 0; i < len; i++) {
 800eeee:	e7a4      	b.n	800ee3a <lv_img_decoder_built_in_read_line+0x14a>
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_1BIT || dsc->header.cf == LV_IMG_CF_INDEXED_2BIT ||
 800eef0:	3b07      	subs	r3, #7
 800eef2:	2b03      	cmp	r3, #3
 800eef4:	f63f af12 	bhi.w	800ed1c <lv_img_decoder_built_in_read_line+0x2c>
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
 800eef8:	f000 001f 	and.w	r0, r0, #31
 800eefc:	f7fb f9de 	bl	800a2bc <lv_img_cf_get_px_size>
    uint16_t mask   = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 800ef00:	2301      	movs	r3, #1
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
 800ef02:	4681      	mov	r9, r0
    uint16_t mask   = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 800ef04:	4083      	lsls	r3, r0
 800ef06:	3b01      	subs	r3, #1
 800ef08:	b29b      	uxth	r3, r3
 800ef0a:	9301      	str	r3, [sp, #4]
    switch(dsc->header.cf) {
 800ef0c:	7d33      	ldrb	r3, [r6, #20]
 800ef0e:	f003 031f 	and.w	r3, r3, #31
 800ef12:	3b07      	subs	r3, #7
 800ef14:	2b03      	cmp	r3, #3
 800ef16:	d873      	bhi.n	800f000 <lv_img_decoder_built_in_read_line+0x310>
 800ef18:	e8df f003 	tbb	[pc, r3]
 800ef1c:	68574702 	.word	0x68574702
            w = (dsc->header.w + 7) >> 3; /*E.g. w = 20 -> w = 2 + 1*/
 800ef20:	6975      	ldr	r5, [r6, #20]
            ofs += w * y + (x >> 3); /*First pixel*/
 800ef22:	10e3      	asrs	r3, r4, #3
            pos = 7 - (x & 0x7);
 800ef24:	43e4      	mvns	r4, r4
            w = (dsc->header.w + 7) >> 3; /*E.g. w = 20 -> w = 2 + 1*/
 800ef26:	f3c5 258a 	ubfx	r5, r5, #10, #11
            pos = 7 - (x & 0x7);
 800ef2a:	f004 0407 	and.w	r4, r4, #7
            w = (dsc->header.w + 7) >> 3; /*E.g. w = 20 -> w = 2 + 1*/
 800ef2e:	3507      	adds	r5, #7
 800ef30:	10e9      	asrs	r1, r5, #3
            ofs += w * y + (x >> 3); /*First pixel*/
 800ef32:	fb01 3b0b 	mla	fp, r1, fp, r3
            w = (dsc->header.w + 7) >> 3; /*E.g. w = 20 -> w = 2 + 1*/
 800ef36:	460d      	mov	r5, r1
            ofs += 8;                /*Skip the palette*/
 800ef38:	f10b 0108 	add.w	r1, fp, #8
    uint8_t * fs_buf = lv_mem_buf_get(w);
 800ef3c:	4628      	mov	r0, r5
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800ef3e:	f8d6 b024 	ldr.w	fp, [r6, #36]	; 0x24
 800ef42:	9102      	str	r1, [sp, #8]
    uint8_t * fs_buf = lv_mem_buf_get(w);
 800ef44:	f008 fda8 	bl	8017a98 <lv_mem_buf_get>
    if (fs_buf == NULL) return LV_RES_INV;
 800ef48:	4607      	mov	r7, r0
 800ef4a:	2800      	cmp	r0, #0
 800ef4c:	f43f aee6 	beq.w	800ed1c <lv_img_decoder_built_in_read_line+0x2c>
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 800ef50:	7c33      	ldrb	r3, [r6, #16]
 800ef52:	9902      	ldr	r1, [sp, #8]
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d157      	bne.n	800f008 <lv_img_decoder_built_in_read_line+0x318>
        data_tmp                     = img_dsc->data + ofs;
 800ef58:	6873      	ldr	r3, [r6, #4]
 800ef5a:	689b      	ldr	r3, [r3, #8]
 800ef5c:	4419      	add	r1, r3
            pos = 8 - px_size;
 800ef5e:	f1c9 0508 	rsb	r5, r9, #8
        lv_fs_read(&user_data->f, fs_buf, w, NULL);
 800ef62:	2000      	movs	r0, #0
            pos = 8 - px_size;
 800ef64:	b26d      	sxtb	r5, r5
    for(i = 0; i < len; i++) {
 800ef66:	b203      	sxth	r3, r0
 800ef68:	459a      	cmp	sl, r3
 800ef6a:	f77f af69 	ble.w	800ee40 <lv_img_decoder_built_in_read_line+0x150>
        uint8_t val_act = (*data_tmp >> pos) & mask;
 800ef6e:	780b      	ldrb	r3, [r1, #0]
 800ef70:	3001      	adds	r0, #1
 800ef72:	9a01      	ldr	r2, [sp, #4]
 800ef74:	f108 0803 	add.w	r8, r8, #3
 800ef78:	4123      	asrs	r3, r4
        pos -= px_size;
 800ef7a:	eba4 0409 	sub.w	r4, r4, r9
        uint8_t val_act = (*data_tmp >> pos) & mask;
 800ef7e:	4013      	ands	r3, r2
        lv_color_t color = user_data->palette[val_act];
 800ef80:	f8db 2008 	ldr.w	r2, [fp, #8]
        pos -= px_size;
 800ef84:	b264      	sxtb	r4, r4
        uint8_t val_act = (*data_tmp >> pos) & mask;
 800ef86:	b2de      	uxtb	r6, r3
        if(pos < 0) {
 800ef88:	2c00      	cmp	r4, #0
        lv_color_t color = user_data->palette[val_act];
 800ef8a:	f832 3016 	ldrh.w	r3, [r2, r6, lsl #1]
            pos = 8 - px_size;
 800ef8e:	bfbc      	itt	lt
 800ef90:	462c      	movlt	r4, r5
            data_tmp++;
 800ef92:	3101      	addlt	r1, #1
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = color.full & 0xFF;
 800ef94:	f808 3c03 	strb.w	r3, [r8, #-3]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (color.full >> 8) & 0xFF;
 800ef98:	0a1b      	lsrs	r3, r3, #8
 800ef9a:	f808 3c02 	strb.w	r3, [r8, #-2]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] = user_data->opa[val_act];
 800ef9e:	f8db 300c 	ldr.w	r3, [fp, #12]
 800efa2:	5d9b      	ldrb	r3, [r3, r6]
 800efa4:	f808 3c01 	strb.w	r3, [r8, #-1]
    for(i = 0; i < len; i++) {
 800efa8:	e7dd      	b.n	800ef66 <lv_img_decoder_built_in_read_line+0x276>
            w = (dsc->header.w + 3) >> 2; /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 800efaa:	6975      	ldr	r5, [r6, #20]
            ofs += w * y + (x >> 2); /*First pixel*/
 800efac:	10a3      	asrs	r3, r4, #2
            pos = 6 - (x & 0x3) * 2;
 800efae:	43e4      	mvns	r4, r4
            w = (dsc->header.w + 3) >> 2; /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 800efb0:	f3c5 258a 	ubfx	r5, r5, #10, #11
            pos = 6 - (x & 0x3) * 2;
 800efb4:	f004 0403 	and.w	r4, r4, #3
            w = (dsc->header.w + 3) >> 2; /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 800efb8:	3503      	adds	r5, #3
            pos = 6 - (x & 0x3) * 2;
 800efba:	0064      	lsls	r4, r4, #1
            w = (dsc->header.w + 3) >> 2; /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 800efbc:	10a9      	asrs	r1, r5, #2
            ofs += w * y + (x >> 2); /*First pixel*/
 800efbe:	fb01 3b0b 	mla	fp, r1, fp, r3
            w = (dsc->header.w + 3) >> 2; /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 800efc2:	460d      	mov	r5, r1
            ofs += 16;               /*Skip the palette*/
 800efc4:	f10b 0110 	add.w	r1, fp, #16
            break;
 800efc8:	e7b8      	b.n	800ef3c <lv_img_decoder_built_in_read_line+0x24c>
            w = (dsc->header.w + 1) >> 1; /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 800efca:	6975      	ldr	r5, [r6, #20]
            ofs += w * y + (x >> 1); /*First pixel*/
 800efcc:	1063      	asrs	r3, r4, #1
            pos = 4 - (x & 0x1) * 4;
 800efce:	f014 0f01 	tst.w	r4, #1
            w = (dsc->header.w + 1) >> 1; /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 800efd2:	f3c5 258a 	ubfx	r5, r5, #10, #11
            pos = 4 - (x & 0x1) * 4;
 800efd6:	bf0c      	ite	eq
 800efd8:	2404      	moveq	r4, #4
 800efda:	2400      	movne	r4, #0
            w = (dsc->header.w + 1) >> 1; /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 800efdc:	3501      	adds	r5, #1
 800efde:	1069      	asrs	r1, r5, #1
            ofs += w * y + (x >> 1); /*First pixel*/
 800efe0:	fb01 3b0b 	mla	fp, r1, fp, r3
            w = (dsc->header.w + 1) >> 1; /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 800efe4:	460d      	mov	r5, r1
            ofs += 64;               /*Skip the palette*/
 800efe6:	f10b 0140 	add.w	r1, fp, #64	; 0x40
            pos = 4 - (x & 0x1) * 4;
 800efea:	e7a7      	b.n	800ef3c <lv_img_decoder_built_in_read_line+0x24c>
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 800efec:	6975      	ldr	r5, [r6, #20]
 800efee:	f3c5 218a 	ubfx	r1, r5, #10, #11
            ofs += w * y + x;  /*First pixel*/
 800eff2:	fb1b 4401 	smlabb	r4, fp, r1, r4
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 800eff6:	460d      	mov	r5, r1
            ofs += 1024;       /*Skip the palette*/
 800eff8:	f504 6180 	add.w	r1, r4, #1024	; 0x400
            pos = 0;
 800effc:	2400      	movs	r4, #0
            break;
 800effe:	e79d      	b.n	800ef3c <lv_img_decoder_built_in_read_line+0x24c>
    switch(dsc->header.cf) {
 800f000:	2100      	movs	r1, #0
 800f002:	460c      	mov	r4, r1
 800f004:	460d      	mov	r5, r1
 800f006:	e799      	b.n	800ef3c <lv_img_decoder_built_in_read_line+0x24c>
        lv_fs_seek(&user_data->f, ofs + 4, LV_FS_SEEK_SET); /*+4 to skip the header*/
 800f008:	2200      	movs	r2, #0
 800f00a:	3104      	adds	r1, #4
 800f00c:	4658      	mov	r0, fp
 800f00e:	f008 f9a4 	bl	801735a <lv_fs_seek>
        lv_fs_read(&user_data->f, fs_buf, w, NULL);
 800f012:	4639      	mov	r1, r7
 800f014:	2300      	movs	r3, #0
 800f016:	462a      	mov	r2, r5
 800f018:	4658      	mov	r0, fp
 800f01a:	f008 f983 	bl	8017324 <lv_fs_read>
 800f01e:	4639      	mov	r1, r7
 800f020:	e79d      	b.n	800ef5e <lv_img_decoder_built_in_read_line+0x26e>
 800f022:	bf00      	nop
 800f024:	08024f58 	.word	0x08024f58

0800f028 <lv_img_decoder_built_in_open>:
{
 800f028:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    if(dsc->src_type == LV_IMG_SRC_FILE) {
 800f02c:	7c0d      	ldrb	r5, [r1, #16]
{
 800f02e:	4680      	mov	r8, r0
 800f030:	460c      	mov	r4, r1
    if(dsc->src_type == LV_IMG_SRC_FILE) {
 800f032:	2d01      	cmp	r5, #1
 800f034:	d12d      	bne.n	800f092 <lv_img_decoder_built_in_open+0x6a>
        if(strcmp(lv_fs_get_ext(dsc->src), "bin")) return LV_RES_INV;
 800f036:	6848      	ldr	r0, [r1, #4]
 800f038:	f008 f9e0 	bl	80173fc <lv_fs_get_ext>
 800f03c:	4956      	ldr	r1, [pc, #344]	; (800f198 <lv_img_decoder_built_in_open+0x170>)
 800f03e:	f7f1 f937 	bl	80002b0 <strcmp>
 800f042:	2800      	cmp	r0, #0
 800f044:	d15b      	bne.n	800f0fe <lv_img_decoder_built_in_open+0xd6>
        lv_fs_res_t res = lv_fs_open(&f, dsc->src, LV_FS_MODE_RD);
 800f046:	2202      	movs	r2, #2
 800f048:	6861      	ldr	r1, [r4, #4]
 800f04a:	4668      	mov	r0, sp
 800f04c:	f008 f9ac 	bl	80173a8 <lv_fs_open>
        if(res != LV_FS_RES_OK) {
 800f050:	2800      	cmp	r0, #0
 800f052:	d154      	bne.n	800f0fe <lv_img_decoder_built_in_open+0xd6>
        if(dsc->user_data == NULL) {
 800f054:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f056:	b943      	cbnz	r3, 800f06a <lv_img_decoder_built_in_open+0x42>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
 800f058:	2010      	movs	r0, #16
 800f05a:	f008 fced 	bl	8017a38 <lv_mem_alloc>
 800f05e:	6260      	str	r0, [r4, #36]	; 0x24
            LV_ASSERT_MALLOC(dsc->user_data);
 800f060:	b900      	cbnz	r0, 800f064 <lv_img_decoder_built_in_open+0x3c>
 800f062:	e7fe      	b.n	800f062 <lv_img_decoder_built_in_open+0x3a>
            lv_memset_00(dsc->user_data, sizeof(lv_img_decoder_built_in_data_t));
 800f064:	2110      	movs	r1, #16
 800f066:	f008 fd65 	bl	8017b34 <lv_memset_00>
        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800f06a:	6a62      	ldr	r2, [r4, #36]	; 0x24
    while(len) {
 800f06c:	466b      	mov	r3, sp
 800f06e:	f102 0108 	add.w	r1, r2, #8
        *d8 = *s8;
 800f072:	f813 0b01 	ldrb.w	r0, [r3], #1
 800f076:	f802 0b01 	strb.w	r0, [r2], #1
    while(len) {
 800f07a:	428a      	cmp	r2, r1
 800f07c:	d1f9      	bne.n	800f072 <lv_img_decoder_built_in_open+0x4a>
    lv_img_cf_t cf = dsc->header.cf;
 800f07e:	7d23      	ldrb	r3, [r4, #20]
 800f080:	f003 001f 	and.w	r0, r3, #31
    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_ALPHA || cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 800f084:	1f03      	subs	r3, r0, #4
 800f086:	2b02      	cmp	r3, #2
 800f088:	d811      	bhi.n	800f0ae <lv_img_decoder_built_in_open+0x86>
        if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 800f08a:	7c23      	ldrb	r3, [r4, #16]
 800f08c:	b15b      	cbz	r3, 800f0a6 <lv_img_decoder_built_in_open+0x7e>
            return LV_RES_OK;
 800f08e:	2501      	movs	r5, #1
 800f090:	e005      	b.n	800f09e <lv_img_decoder_built_in_open+0x76>
    else if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 800f092:	2d00      	cmp	r5, #0
 800f094:	d1f3      	bne.n	800f07e <lv_img_decoder_built_in_open+0x56>
        if(((lv_img_dsc_t *)dsc->src)->data == NULL) {
 800f096:	684b      	ldr	r3, [r1, #4]
 800f098:	689b      	ldr	r3, [r3, #8]
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d1ef      	bne.n	800f07e <lv_img_decoder_built_in_open+0x56>
}
 800f09e:	4628      	mov	r0, r5
 800f0a0:	b002      	add	sp, #8
 800f0a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            dsc->img_data = ((lv_img_dsc_t *)dsc->src)->data;
 800f0a6:	6863      	ldr	r3, [r4, #4]
 800f0a8:	689b      	ldr	r3, [r3, #8]
 800f0aa:	61a3      	str	r3, [r4, #24]
 800f0ac:	e7ef      	b.n	800f08e <lv_img_decoder_built_in_open+0x66>
    else if(cf == LV_IMG_CF_INDEXED_1BIT || cf == LV_IMG_CF_INDEXED_2BIT || cf == LV_IMG_CF_INDEXED_4BIT ||
 800f0ae:	1fc3      	subs	r3, r0, #7
 800f0b0:	2b03      	cmp	r3, #3
 800f0b2:	d86a      	bhi.n	800f18a <lv_img_decoder_built_in_open+0x162>
        uint8_t px_size       = lv_img_cf_get_px_size(cf);
 800f0b4:	f7fb f902 	bl	800a2bc <lv_img_cf_get_px_size>
        if(dsc->user_data == NULL) {
 800f0b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
        uint8_t px_size       = lv_img_cf_get_px_size(cf);
 800f0ba:	4607      	mov	r7, r0
        if(dsc->user_data == NULL) {
 800f0bc:	b943      	cbnz	r3, 800f0d0 <lv_img_decoder_built_in_open+0xa8>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
 800f0be:	2010      	movs	r0, #16
 800f0c0:	f008 fcba 	bl	8017a38 <lv_mem_alloc>
 800f0c4:	6260      	str	r0, [r4, #36]	; 0x24
            LV_ASSERT_MALLOC(dsc->user_data);
 800f0c6:	b900      	cbnz	r0, 800f0ca <lv_img_decoder_built_in_open+0xa2>
 800f0c8:	e7fe      	b.n	800f0c8 <lv_img_decoder_built_in_open+0xa0>
            lv_memset_00(dsc->user_data, sizeof(lv_img_decoder_built_in_data_t));
 800f0ca:	2110      	movs	r1, #16
 800f0cc:	f008 fd32 	bl	8017b34 <lv_memset_00>
        user_data->palette                         = lv_mem_alloc(palette_size * sizeof(lv_color_t));
 800f0d0:	2002      	movs	r0, #2
        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800f0d2:	6a66      	ldr	r6, [r4, #36]	; 0x24
        user_data->palette                         = lv_mem_alloc(palette_size * sizeof(lv_color_t));
 800f0d4:	40b8      	lsls	r0, r7
 800f0d6:	f008 fcaf 	bl	8017a38 <lv_mem_alloc>
 800f0da:	60b0      	str	r0, [r6, #8]
        LV_ASSERT_MALLOC(user_data->palette);
 800f0dc:	b900      	cbnz	r0, 800f0e0 <lv_img_decoder_built_in_open+0xb8>
 800f0de:	e7fe      	b.n	800f0de <lv_img_decoder_built_in_open+0xb6>
        uint32_t palette_size = 1 << px_size;
 800f0e0:	2001      	movs	r0, #1
 800f0e2:	fa00 f707 	lsl.w	r7, r0, r7
        user_data->opa                             = lv_mem_alloc(palette_size * sizeof(lv_opa_t));
 800f0e6:	4638      	mov	r0, r7
 800f0e8:	f008 fca6 	bl	8017a38 <lv_mem_alloc>
 800f0ec:	60f0      	str	r0, [r6, #12]
        LV_ASSERT_MALLOC(user_data->opa);
 800f0ee:	b900      	cbnz	r0, 800f0f2 <lv_img_decoder_built_in_open+0xca>
 800f0f0:	e7fe      	b.n	800f0f0 <lv_img_decoder_built_in_open+0xc8>
        if(user_data->palette == NULL || user_data->opa == NULL) {
 800f0f2:	68b3      	ldr	r3, [r6, #8]
 800f0f4:	b92b      	cbnz	r3, 800f102 <lv_img_decoder_built_in_open+0xda>
            lv_img_decoder_built_in_close(decoder, dsc);
 800f0f6:	4621      	mov	r1, r4
 800f0f8:	4640      	mov	r0, r8
 800f0fa:	f7ff fd8b 	bl	800ec14 <lv_img_decoder_built_in_close>
            return LV_RES_INV;
 800f0fe:	2500      	movs	r5, #0
 800f100:	e7cd      	b.n	800f09e <lv_img_decoder_built_in_open+0x76>
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 800f102:	7c25      	ldrb	r5, [r4, #16]
 800f104:	2d01      	cmp	r5, #1
 800f106:	d123      	bne.n	800f150 <lv_img_decoder_built_in_open+0x128>
            for(i = 0; i < palette_size; i++) {
 800f108:	2400      	movs	r4, #0
            lv_fs_seek(&user_data->f, 4, LV_FS_SEEK_SET); /*Skip the header*/
 800f10a:	2200      	movs	r2, #0
 800f10c:	2104      	movs	r1, #4
 800f10e:	4630      	mov	r0, r6
 800f110:	f008 f923 	bl	801735a <lv_fs_seek>
            for(i = 0; i < palette_size; i++) {
 800f114:	42bc      	cmp	r4, r7
 800f116:	d0c2      	beq.n	800f09e <lv_img_decoder_built_in_open+0x76>
                lv_fs_read(&user_data->f, &cur_color, sizeof(lv_color32_t), NULL);
 800f118:	2300      	movs	r3, #0
 800f11a:	2204      	movs	r2, #4
 800f11c:	4669      	mov	r1, sp
 800f11e:	4630      	mov	r0, r6
 800f120:	f008 f900 	bl	8017324 <lv_fs_read>
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 800f124:	f89d 3001 	ldrb.w	r3, [sp, #1]
                user_data->palette[i] = lv_color_make(cur_color.ch.red, cur_color.ch.green, cur_color.ch.blue);
 800f128:	68b2      	ldr	r2, [r6, #8]
 800f12a:	0899      	lsrs	r1, r3, #2
 800f12c:	f89d 3000 	ldrb.w	r3, [sp]
 800f130:	08db      	lsrs	r3, r3, #3
 800f132:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
 800f136:	f89d 1002 	ldrb.w	r1, [sp, #2]
 800f13a:	08c9      	lsrs	r1, r1, #3
 800f13c:	ea43 23c1 	orr.w	r3, r3, r1, lsl #11
 800f140:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
                user_data->opa[i]     = cur_color.ch.alpha;
 800f144:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800f148:	68f3      	ldr	r3, [r6, #12]
 800f14a:	551a      	strb	r2, [r3, r4]
            for(i = 0; i < palette_size; i++) {
 800f14c:	3401      	adds	r4, #1
 800f14e:	e7e1      	b.n	800f114 <lv_img_decoder_built_in_open+0xec>
            lv_color32_t * palette_p = (lv_color32_t *)((lv_img_dsc_t *)dsc->src)->data;
 800f150:	6863      	ldr	r3, [r4, #4]
            for(i = 0; i < palette_size; i++) {
 800f152:	2000      	movs	r0, #0
 800f154:	689a      	ldr	r2, [r3, #8]
 800f156:	42b8      	cmp	r0, r7
 800f158:	f102 0204 	add.w	r2, r2, #4
 800f15c:	d097      	beq.n	800f08e <lv_img_decoder_built_in_open+0x66>
 800f15e:	f812 3c03 	ldrb.w	r3, [r2, #-3]
                user_data->palette[i] = lv_color_make(palette_p[i].ch.red, palette_p[i].ch.green, palette_p[i].ch.blue);
 800f162:	68b1      	ldr	r1, [r6, #8]
 800f164:	089c      	lsrs	r4, r3, #2
 800f166:	f812 3c04 	ldrb.w	r3, [r2, #-4]
 800f16a:	08db      	lsrs	r3, r3, #3
 800f16c:	ea43 1344 	orr.w	r3, r3, r4, lsl #5
 800f170:	f812 4c02 	ldrb.w	r4, [r2, #-2]
 800f174:	08e4      	lsrs	r4, r4, #3
 800f176:	ea43 23c4 	orr.w	r3, r3, r4, lsl #11
 800f17a:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]
                user_data->opa[i]     = palette_p[i].ch.alpha;
 800f17e:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800f182:	68f3      	ldr	r3, [r6, #12]
 800f184:	5419      	strb	r1, [r3, r0]
            for(i = 0; i < palette_size; i++) {
 800f186:	3001      	adds	r0, #1
 800f188:	e7e5      	b.n	800f156 <lv_img_decoder_built_in_open+0x12e>
    else if(cf == LV_IMG_CF_ALPHA_1BIT || cf == LV_IMG_CF_ALPHA_2BIT || cf == LV_IMG_CF_ALPHA_4BIT ||
 800f18a:	f1a0 030b 	sub.w	r3, r0, #11
 800f18e:	2b03      	cmp	r3, #3
 800f190:	f67f af7d 	bls.w	800f08e <lv_img_decoder_built_in_open+0x66>
 800f194:	e7af      	b.n	800f0f6 <lv_img_decoder_built_in_open+0xce>
 800f196:	bf00      	nop
 800f198:	08024f81 	.word	0x08024f81

0800f19c <lv_img_decoder_get_info>:
{
 800f19c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1a0:	460e      	mov	r6, r1
 800f1a2:	4607      	mov	r7, r0
   lv_memset_00(header, sizeof(lv_img_header_t));
 800f1a4:	2104      	movs	r1, #4
    lv_res_t res = LV_RES_INV;
 800f1a6:	2500      	movs	r5, #0
   lv_memset_00(header, sizeof(lv_img_header_t));
 800f1a8:	4630      	mov	r0, r6
    _LV_LL_READ(&LV_GC_ROOT(_lv_img_decoder_ll), d) {
 800f1aa:	f8df 8034 	ldr.w	r8, [pc, #52]	; 800f1e0 <lv_img_decoder_get_info+0x44>
   lv_memset_00(header, sizeof(lv_img_header_t));
 800f1ae:	f008 fcc1 	bl	8017b34 <lv_memset_00>
    _LV_LL_READ(&LV_GC_ROOT(_lv_img_decoder_ll), d) {
 800f1b2:	480b      	ldr	r0, [pc, #44]	; (800f1e0 <lv_img_decoder_get_info+0x44>)
 800f1b4:	f008 f9bb 	bl	801752e <_lv_ll_get_head>
 800f1b8:	4604      	mov	r4, r0
 800f1ba:	b914      	cbnz	r4, 800f1c2 <lv_img_decoder_get_info+0x26>
}
 800f1bc:	4628      	mov	r0, r5
 800f1be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(d->info_cb) {
 800f1c2:	6823      	ldr	r3, [r4, #0]
 800f1c4:	b133      	cbz	r3, 800f1d4 <lv_img_decoder_get_info+0x38>
            res = d->info_cb(d, src, header);
 800f1c6:	4632      	mov	r2, r6
 800f1c8:	4639      	mov	r1, r7
 800f1ca:	4620      	mov	r0, r4
 800f1cc:	4798      	blx	r3
            if(res == LV_RES_OK) break;
 800f1ce:	2801      	cmp	r0, #1
            res = d->info_cb(d, src, header);
 800f1d0:	4605      	mov	r5, r0
            if(res == LV_RES_OK) break;
 800f1d2:	d0f3      	beq.n	800f1bc <lv_img_decoder_get_info+0x20>
    _LV_LL_READ(&LV_GC_ROOT(_lv_img_decoder_ll), d) {
 800f1d4:	4621      	mov	r1, r4
 800f1d6:	4640      	mov	r0, r8
 800f1d8:	f008 f9af 	bl	801753a <_lv_ll_get_next>
 800f1dc:	4604      	mov	r4, r0
 800f1de:	e7ec      	b.n	800f1ba <lv_img_decoder_get_info+0x1e>
 800f1e0:	2000ae20 	.word	0x2000ae20

0800f1e4 <lv_img_decoder_open>:
{
 800f1e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f1e8:	4604      	mov	r4, r0
 800f1ea:	4616      	mov	r6, r2
 800f1ec:	460f      	mov	r7, r1
    lv_memset_00(dsc, sizeof(lv_img_decoder_dsc_t));
 800f1ee:	2128      	movs	r1, #40	; 0x28
{
 800f1f0:	461d      	mov	r5, r3
    lv_memset_00(dsc, sizeof(lv_img_decoder_dsc_t));
 800f1f2:	f008 fc9f 	bl	8017b34 <lv_memset_00>
    dsc->src_type = lv_img_src_get_type(src);
 800f1f6:	4638      	mov	r0, r7
    dsc->color    = color;
 800f1f8:	8126      	strh	r6, [r4, #8]
    dsc->src_type = lv_img_src_get_type(src);
 800f1fa:	f7fb f96f 	bl	800a4dc <lv_img_src_get_type>
    if(dsc->src_type == LV_IMG_SRC_FILE) {
 800f1fe:	2801      	cmp	r0, #1
    dsc->src_type = lv_img_src_get_type(src);
 800f200:	7420      	strb	r0, [r4, #16]
    dsc->frame_id = frame_id;
 800f202:	60e5      	str	r5, [r4, #12]
    if(dsc->src_type == LV_IMG_SRC_FILE) {
 800f204:	d11e      	bne.n	800f244 <lv_img_decoder_open+0x60>
        size_t fnlen = strlen(src);
 800f206:	4638      	mov	r0, r7
 800f208:	f7f1 f85c 	bl	80002c4 <strlen>
        dsc->src = lv_mem_alloc(fnlen + 1);
 800f20c:	3001      	adds	r0, #1
 800f20e:	f008 fc13 	bl	8017a38 <lv_mem_alloc>
 800f212:	6060      	str	r0, [r4, #4]
        LV_ASSERT_MALLOC(dsc->src);
 800f214:	b900      	cbnz	r0, 800f218 <lv_img_decoder_open+0x34>
 800f216:	e7fe      	b.n	800f216 <lv_img_decoder_open+0x32>
        strcpy((char *)dsc->src, src);
 800f218:	4639      	mov	r1, r7
 800f21a:	f014 f8c1 	bl	80233a0 <strcpy>
    _LV_LL_READ(&LV_GC_ROOT(_lv_img_decoder_ll), decoder) {
 800f21e:	481b      	ldr	r0, [pc, #108]	; (800f28c <lv_img_decoder_open+0xa8>)
    lv_res_t res = LV_RES_INV;
 800f220:	2600      	movs	r6, #0
    _LV_LL_READ(&LV_GC_ROOT(_lv_img_decoder_ll), decoder) {
 800f222:	f008 f984 	bl	801752e <_lv_ll_get_head>
        res = decoder->info_cb(decoder, src, &dsc->header);
 800f226:	f104 0814 	add.w	r8, r4, #20
    _LV_LL_READ(&LV_GC_ROOT(_lv_img_decoder_ll), decoder) {
 800f22a:	4605      	mov	r5, r0
 800f22c:	f8df 905c 	ldr.w	r9, [pc, #92]	; 800f28c <lv_img_decoder_open+0xa8>
 800f230:	b955      	cbnz	r5, 800f248 <lv_img_decoder_open+0x64>
    if(dsc->src_type == LV_IMG_SRC_FILE)
 800f232:	7c23      	ldrb	r3, [r4, #16]
 800f234:	2b01      	cmp	r3, #1
 800f236:	d102      	bne.n	800f23e <lv_img_decoder_open+0x5a>
        lv_mem_free((void*)dsc->src);
 800f238:	6860      	ldr	r0, [r4, #4]
 800f23a:	f008 fa7b 	bl	8017734 <lv_mem_free>
}
 800f23e:	4630      	mov	r0, r6
 800f240:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        dsc->src = src;
 800f244:	6067      	str	r7, [r4, #4]
 800f246:	e7ea      	b.n	800f21e <lv_img_decoder_open+0x3a>
        if(decoder->info_cb == NULL || decoder->open_cb == NULL) continue;
 800f248:	682b      	ldr	r3, [r5, #0]
 800f24a:	b1cb      	cbz	r3, 800f280 <lv_img_decoder_open+0x9c>
 800f24c:	686a      	ldr	r2, [r5, #4]
 800f24e:	b1ba      	cbz	r2, 800f280 <lv_img_decoder_open+0x9c>
        res = decoder->info_cb(decoder, src, &dsc->header);
 800f250:	4642      	mov	r2, r8
 800f252:	4639      	mov	r1, r7
 800f254:	4628      	mov	r0, r5
 800f256:	4798      	blx	r3
        if(res != LV_RES_OK) continue;
 800f258:	2801      	cmp	r0, #1
        res = decoder->info_cb(decoder, src, &dsc->header);
 800f25a:	4606      	mov	r6, r0
        if(res != LV_RES_OK) continue;
 800f25c:	d110      	bne.n	800f280 <lv_img_decoder_open+0x9c>
        res = decoder->open_cb(decoder, dsc);
 800f25e:	686b      	ldr	r3, [r5, #4]
 800f260:	4621      	mov	r1, r4
 800f262:	4628      	mov	r0, r5
        dsc->decoder = decoder;
 800f264:	6025      	str	r5, [r4, #0]
        res = decoder->open_cb(decoder, dsc);
 800f266:	4798      	blx	r3
        if(res == LV_RES_OK) return res;
 800f268:	2801      	cmp	r0, #1
        res = decoder->open_cb(decoder, dsc);
 800f26a:	4606      	mov	r6, r0
        if(res == LV_RES_OK) return res;
 800f26c:	d0e7      	beq.n	800f23e <lv_img_decoder_open+0x5a>
        lv_memset_00(&dsc->header, sizeof(lv_img_header_t));
 800f26e:	2104      	movs	r1, #4
 800f270:	4640      	mov	r0, r8
 800f272:	f008 fc5f 	bl	8017b34 <lv_memset_00>
        dsc->error_msg = NULL;
 800f276:	2300      	movs	r3, #0
 800f278:	6223      	str	r3, [r4, #32]
        dsc->img_data  = NULL;
 800f27a:	61a3      	str	r3, [r4, #24]
        dsc->user_data = NULL;
 800f27c:	6263      	str	r3, [r4, #36]	; 0x24
        dsc->time_to_open = 0;
 800f27e:	61e3      	str	r3, [r4, #28]
    _LV_LL_READ(&LV_GC_ROOT(_lv_img_decoder_ll), decoder) {
 800f280:	4629      	mov	r1, r5
 800f282:	4648      	mov	r0, r9
 800f284:	f008 f959 	bl	801753a <_lv_ll_get_next>
 800f288:	4605      	mov	r5, r0
 800f28a:	e7d1      	b.n	800f230 <lv_img_decoder_open+0x4c>
 800f28c:	2000ae20 	.word	0x2000ae20

0800f290 <lv_img_decoder_read_line>:
{
 800f290:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if(dsc->decoder->read_line_cb) res = dsc->decoder->read_line_cb(dsc->decoder, dsc, x, y, len, buf);
 800f292:	6805      	ldr	r5, [r0, #0]
 800f294:	68ac      	ldr	r4, [r5, #8]
 800f296:	b14c      	cbz	r4, 800f2ac <lv_img_decoder_read_line+0x1c>
 800f298:	9e06      	ldr	r6, [sp, #24]
 800f29a:	e9cd 3600 	strd	r3, r6, [sp]
 800f29e:	4613      	mov	r3, r2
 800f2a0:	460a      	mov	r2, r1
 800f2a2:	4601      	mov	r1, r0
 800f2a4:	4628      	mov	r0, r5
 800f2a6:	47a0      	blx	r4
}
 800f2a8:	b002      	add	sp, #8
 800f2aa:	bd70      	pop	{r4, r5, r6, pc}
    lv_res_t res = LV_RES_INV;
 800f2ac:	4620      	mov	r0, r4
 800f2ae:	e7fb      	b.n	800f2a8 <lv_img_decoder_read_line+0x18>

0800f2b0 <lv_img_decoder_close>:
{
 800f2b0:	b510      	push	{r4, lr}
 800f2b2:	4604      	mov	r4, r0
    if(dsc->decoder) {
 800f2b4:	6800      	ldr	r0, [r0, #0]
 800f2b6:	b158      	cbz	r0, 800f2d0 <lv_img_decoder_close+0x20>
        if(dsc->decoder->close_cb) dsc->decoder->close_cb(dsc->decoder, dsc);
 800f2b8:	68c3      	ldr	r3, [r0, #12]
 800f2ba:	b10b      	cbz	r3, 800f2c0 <lv_img_decoder_close+0x10>
 800f2bc:	4621      	mov	r1, r4
 800f2be:	4798      	blx	r3
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 800f2c0:	7c23      	ldrb	r3, [r4, #16]
 800f2c2:	2b01      	cmp	r3, #1
 800f2c4:	d104      	bne.n	800f2d0 <lv_img_decoder_close+0x20>
            lv_mem_free((void*)dsc->src);
 800f2c6:	6860      	ldr	r0, [r4, #4]
 800f2c8:	f008 fa34 	bl	8017734 <lv_mem_free>
            dsc->src = NULL;
 800f2cc:	2300      	movs	r3, #0
 800f2ce:	6063      	str	r3, [r4, #4]
}
 800f2d0:	bd10      	pop	{r4, pc}
	...

0800f2d4 <lv_img_decoder_create>:
{
 800f2d4:	b510      	push	{r4, lr}
    decoder = _lv_ll_ins_head(&LV_GC_ROOT(_lv_img_decoder_ll));
 800f2d6:	4805      	ldr	r0, [pc, #20]	; (800f2ec <lv_img_decoder_create+0x18>)
 800f2d8:	f008 f8b7 	bl	801744a <_lv_ll_ins_head>
    LV_ASSERT_MALLOC(decoder);
 800f2dc:	4604      	mov	r4, r0
 800f2de:	b900      	cbnz	r0, 800f2e2 <lv_img_decoder_create+0xe>
 800f2e0:	e7fe      	b.n	800f2e0 <lv_img_decoder_create+0xc>
    lv_memset_00(decoder, sizeof(lv_img_decoder_t));
 800f2e2:	2114      	movs	r1, #20
 800f2e4:	f008 fc26 	bl	8017b34 <lv_memset_00>
}
 800f2e8:	4620      	mov	r0, r4
 800f2ea:	bd10      	pop	{r4, pc}
 800f2ec:	2000ae20 	.word	0x2000ae20

0800f2f0 <_lv_img_decoder_init>:
{
 800f2f0:	b508      	push	{r3, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_img_decoder_ll), sizeof(lv_img_decoder_t));
 800f2f2:	2114      	movs	r1, #20
 800f2f4:	4807      	ldr	r0, [pc, #28]	; (800f314 <_lv_img_decoder_init+0x24>)
 800f2f6:	f008 f8a0 	bl	801743a <_lv_ll_init>
    decoder = lv_img_decoder_create();
 800f2fa:	f7ff ffeb 	bl	800f2d4 <lv_img_decoder_create>
    LV_ASSERT_MALLOC(decoder);
 800f2fe:	b900      	cbnz	r0, 800f302 <_lv_img_decoder_init+0x12>
 800f300:	e7fe      	b.n	800f300 <_lv_img_decoder_init+0x10>
    decoder->info_cb = info_cb;
 800f302:	4b05      	ldr	r3, [pc, #20]	; (800f318 <_lv_img_decoder_init+0x28>)
 800f304:	6003      	str	r3, [r0, #0]
    decoder->open_cb = open_cb;
 800f306:	4b05      	ldr	r3, [pc, #20]	; (800f31c <_lv_img_decoder_init+0x2c>)
 800f308:	6043      	str	r3, [r0, #4]
    decoder->read_line_cb = read_line_cb;
 800f30a:	4b05      	ldr	r3, [pc, #20]	; (800f320 <_lv_img_decoder_init+0x30>)
 800f30c:	6083      	str	r3, [r0, #8]
    decoder->close_cb = close_cb;
 800f30e:	4b05      	ldr	r3, [pc, #20]	; (800f324 <_lv_img_decoder_init+0x34>)
 800f310:	60c3      	str	r3, [r0, #12]
}
 800f312:	bd08      	pop	{r3, pc}
 800f314:	2000ae20 	.word	0x2000ae20
 800f318:	0800ec45 	.word	0x0800ec45
 800f31c:	0800f029 	.word	0x0800f029
 800f320:	0800ecf1 	.word	0x0800ecf1
 800f324:	0800ec15 	.word	0x0800ec15

0800f328 <lv_area_get_width>:
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800f328:	8883      	ldrh	r3, [r0, #4]
 800f32a:	8800      	ldrh	r0, [r0, #0]
 800f32c:	3301      	adds	r3, #1
 800f32e:	1a18      	subs	r0, r3, r0
}
 800f330:	b200      	sxth	r0, r0
 800f332:	4770      	bx	lr

0800f334 <lv_area_get_height>:
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800f334:	88c3      	ldrh	r3, [r0, #6]
 800f336:	8840      	ldrh	r0, [r0, #2]
 800f338:	3301      	adds	r3, #1
 800f33a:	1a18      	subs	r0, r3, r0
}
 800f33c:	b200      	sxth	r0, r0
 800f33e:	4770      	bx	lr

0800f340 <place_content>:
/**
 * Tell a start coordinate and gap for a placement type.
 */
static void place_content(lv_flex_align_t place, lv_coord_t max_size, lv_coord_t content_size, lv_coord_t item_cnt, lv_coord_t * start_pos, lv_coord_t * gap)
{
    if(item_cnt <= 1) {
 800f340:	2b01      	cmp	r3, #1
{
 800f342:	b570      	push	{r4, r5, r6, lr}
 800f344:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
    if(item_cnt <= 1) {
 800f348:	dc02      	bgt.n	800f350 <place_content+0x10>
        switch(place) {
 800f34a:	1ec6      	subs	r6, r0, #3
 800f34c:	2e02      	cmp	r6, #2
 800f34e:	d907      	bls.n	800f360 <place_content+0x20>
            default:
                break;
        }
    }

    switch(place) {
 800f350:	3801      	subs	r0, #1
 800f352:	2804      	cmp	r0, #4
 800f354:	d835      	bhi.n	800f3c2 <place_content+0x82>
 800f356:	e8df f000 	tbb	[pc, r0]
 800f35a:	030d      	.short	0x030d
 800f35c:	1b2a      	.short	0x1b2a
 800f35e:	13          	.byte	0x13
 800f35f:	00          	.byte	0x00
    case LV_FLEX_ALIGN_CENTER:
        *gap = 0;
 800f360:	2300      	movs	r3, #0
        *start_pos += (max_size - content_size) / 2;
 800f362:	1a89      	subs	r1, r1, r2
        *gap = 0;
 800f364:	802b      	strh	r3, [r5, #0]
        *start_pos += (max_size - content_size) / 2;
 800f366:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 800f36a:	8823      	ldrh	r3, [r4, #0]
 800f36c:	eb03 0161 	add.w	r1, r3, r1, asr #1
        break;
    case LV_FLEX_ALIGN_END:
        *gap = 0;
        *start_pos += max_size - content_size;
 800f370:	8021      	strh	r1, [r4, #0]
       *start_pos += *gap;
       break;
   default:
       *gap = 0;
    }
}
 800f372:	bd70      	pop	{r4, r5, r6, pc}
        *gap = 0;
 800f374:	2300      	movs	r3, #0
        *start_pos += max_size - content_size;
 800f376:	1a89      	subs	r1, r1, r2
        *gap = 0;
 800f378:	802b      	strh	r3, [r5, #0]
        *start_pos += max_size - content_size;
 800f37a:	8822      	ldrh	r2, [r4, #0]
 800f37c:	4411      	add	r1, r2
 800f37e:	e7f7      	b.n	800f370 <place_content+0x30>
       *gap = (lv_coord_t)(max_size - content_size) / (lv_coord_t)(item_cnt - 1);
 800f380:	1a89      	subs	r1, r1, r2
 800f382:	3b01      	subs	r3, #1
 800f384:	b209      	sxth	r1, r1
 800f386:	b21b      	sxth	r3, r3
 800f388:	fb91 f1f3 	sdiv	r1, r1, r3
 800f38c:	8029      	strh	r1, [r5, #0]
       break;
 800f38e:	e7f0      	b.n	800f372 <place_content+0x32>
       *gap += (lv_coord_t)(max_size - content_size) / (lv_coord_t)(item_cnt);
 800f390:	1a89      	subs	r1, r1, r2
 800f392:	b209      	sxth	r1, r1
 800f394:	fb91 f3f3 	sdiv	r3, r1, r3
 800f398:	8829      	ldrh	r1, [r5, #0]
 800f39a:	440b      	add	r3, r1
 800f39c:	b21b      	sxth	r3, r3
 800f39e:	802b      	strh	r3, [r5, #0]
       *start_pos += *gap / 2;
 800f3a0:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800f3a4:	8822      	ldrh	r2, [r4, #0]
 800f3a6:	eb02 0363 	add.w	r3, r2, r3, asr #1
 800f3aa:	8023      	strh	r3, [r4, #0]
       break;
 800f3ac:	e7e1      	b.n	800f372 <place_content+0x32>
       *gap = (lv_coord_t)(max_size - content_size) / (lv_coord_t)(item_cnt + 1);
 800f3ae:	1a89      	subs	r1, r1, r2
 800f3b0:	3301      	adds	r3, #1
 800f3b2:	b209      	sxth	r1, r1
 800f3b4:	b21b      	sxth	r3, r3
 800f3b6:	fb91 f1f3 	sdiv	r1, r1, r3
 800f3ba:	8029      	strh	r1, [r5, #0]
       *start_pos += *gap;
 800f3bc:	8823      	ldrh	r3, [r4, #0]
 800f3be:	4419      	add	r1, r3
 800f3c0:	e7d6      	b.n	800f370 <place_content+0x30>
       *gap = 0;
 800f3c2:	2300      	movs	r3, #0
 800f3c4:	802b      	strh	r3, [r5, #0]
}
 800f3c6:	e7d4      	b.n	800f372 <place_content+0x32>

0800f3c8 <get_next_item.isra.0>:

static lv_obj_t * get_next_item(lv_obj_t * cont, bool rev, int32_t * item_id)
{
    if(rev) {
 800f3c8:	6813      	ldr	r3, [r2, #0]
 800f3ca:	b151      	cbz	r1, 800f3e2 <get_next_item.isra.0+0x1a>
        (*item_id)--;
 800f3cc:	3b01      	subs	r3, #1
        if(*item_id >= 0) return cont->spec_attr->children[*item_id];
 800f3ce:	2b00      	cmp	r3, #0
        (*item_id)--;
 800f3d0:	6013      	str	r3, [r2, #0]
        if(*item_id >= 0) return cont->spec_attr->children[*item_id];
 800f3d2:	da01      	bge.n	800f3d8 <get_next_item.isra.0+0x10>
        else return NULL;
 800f3d4:	2000      	movs	r0, #0
 800f3d6:	4770      	bx	lr
        if(*item_id >= 0) return cont->spec_attr->children[*item_id];
 800f3d8:	6802      	ldr	r2, [r0, #0]
    } else {
        (*item_id)++;
        if((*item_id) < (int32_t)cont->spec_attr->child_cnt) return cont->spec_attr->children[*item_id];
 800f3da:	6812      	ldr	r2, [r2, #0]
 800f3dc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        else return NULL;
    }
}
 800f3e0:	4770      	bx	lr
        (*item_id)++;
 800f3e2:	3301      	adds	r3, #1
 800f3e4:	6013      	str	r3, [r2, #0]
        if((*item_id) < (int32_t)cont->spec_attr->child_cnt) return cont->spec_attr->children[*item_id];
 800f3e6:	6802      	ldr	r2, [r0, #0]
 800f3e8:	6851      	ldr	r1, [r2, #4]
 800f3ea:	428b      	cmp	r3, r1
 800f3ec:	dbf5      	blt.n	800f3da <get_next_item.isra.0+0x12>
 800f3ee:	e7f1      	b.n	800f3d4 <get_next_item.isra.0+0xc>

0800f3f0 <find_track_end>:
{
 800f3f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3f4:	b087      	sub	sp, #28
 800f3f6:	4607      	mov	r7, r0
 800f3f8:	460e      	mov	r6, r1
 800f3fa:	4690      	mov	r8, r2
 800f3fc:	9301      	str	r3, [sp, #4]
static inline lv_coord_t lv_obj_get_style_width(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 800f3fe:	f241 0201 	movw	r2, #4097	; 0x1001
 800f402:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 800f406:	2100      	movs	r1, #0
 800f408:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800f40a:	9302      	str	r3, [sp, #8]
 800f40c:	f7f7 ffac 	bl	8007368 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_height(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 800f410:	f241 0204 	movw	r2, #4100	; 0x1004
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 800f414:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 800f416:	2100      	movs	r1, #0
 800f418:	4638      	mov	r0, r7
 800f41a:	f7f7 ffa5 	bl	8007368 <lv_obj_get_style_prop>
    if(f->wrap && ((f->row && w_set == LV_SIZE_CONTENT) || (!f->row && h_set == LV_SIZE_CONTENT))) {
 800f41e:	78f3      	ldrb	r3, [r6, #3]
 800f420:	079a      	lsls	r2, r3, #30
 800f422:	d50b      	bpl.n	800f43c <find_track_end+0x4c>
 800f424:	f013 0f01 	tst.w	r3, #1
 800f428:	f242 73d1 	movw	r3, #10193	; 0x27d1
 800f42c:	d00e      	beq.n	800f44c <find_track_end+0x5c>
 800f42e:	b22d      	sxth	r5, r5
 800f430:	429d      	cmp	r5, r3
 800f432:	d106      	bne.n	800f442 <find_track_end+0x52>
        f->wrap = false;
 800f434:	78f3      	ldrb	r3, [r6, #3]
 800f436:	f36f 0341 	bfc	r3, #1, #1
 800f43a:	70f3      	strb	r3, [r6, #3]
    lv_coord_t(*get_main_size)(const lv_obj_t *) = (f->row ? lv_obj_get_width : lv_obj_get_height);
 800f43c:	78f3      	ldrb	r3, [r6, #3]
 800f43e:	07d9      	lsls	r1, r3, #31
 800f440:	d507      	bpl.n	800f452 <find_track_end+0x62>
 800f442:	4b72      	ldr	r3, [pc, #456]	; (800f60c <find_track_end+0x21c>)
    lv_coord_t(*get_cross_size)(const lv_obj_t *) = (!f->row ? lv_obj_get_width : lv_obj_get_height);
 800f444:	f8df b1c8 	ldr.w	fp, [pc, #456]	; 800f610 <find_track_end+0x220>
    lv_coord_t(*get_main_size)(const lv_obj_t *) = (f->row ? lv_obj_get_width : lv_obj_get_height);
 800f448:	9300      	str	r3, [sp, #0]
 800f44a:	e006      	b.n	800f45a <find_track_end+0x6a>
    if(f->wrap && ((f->row && w_set == LV_SIZE_CONTENT) || (!f->row && h_set == LV_SIZE_CONTENT))) {
 800f44c:	b200      	sxth	r0, r0
 800f44e:	4298      	cmp	r0, r3
 800f450:	d0f0      	beq.n	800f434 <find_track_end+0x44>
    lv_coord_t(*get_main_size)(const lv_obj_t *) = (f->row ? lv_obj_get_width : lv_obj_get_height);
 800f452:	4b6f      	ldr	r3, [pc, #444]	; (800f610 <find_track_end+0x220>)
    lv_coord_t(*get_cross_size)(const lv_obj_t *) = (!f->row ? lv_obj_get_width : lv_obj_get_height);
 800f454:	f8df b1b4 	ldr.w	fp, [pc, #436]	; 800f60c <find_track_end+0x21c>
    lv_coord_t(*get_main_size)(const lv_obj_t *) = (f->row ? lv_obj_get_width : lv_obj_get_height);
 800f458:	9300      	str	r3, [sp, #0]
    t->grow_item_cnt = 0;
 800f45a:	2300      	movs	r3, #0
    lv_obj_t * item = lv_obj_get_child(cont, item_id);
 800f45c:	4641      	mov	r1, r8
    int32_t item_id = item_start_id;
 800f45e:	f8cd 8014 	str.w	r8, [sp, #20]
    t->grow_item_cnt = 0;
 800f462:	6123      	str	r3, [r4, #16]
    t->track_cross_size = 0;
 800f464:	6023      	str	r3, [r4, #0]
    t->track_fix_main_size = 0;
 800f466:	80a3      	strh	r3, [r4, #4]
    t->grow_dsc = NULL;
 800f468:	e9c4 3302 	strd	r3, r3, [r4, #8]
        item = lv_obj_get_child(cont, item_id);
 800f46c:	4638      	mov	r0, r7
 800f46e:	f7f8 fac8 	bl	8007a02 <lv_obj_get_child>
 800f472:	9b05      	ldr	r3, [sp, #20]
 800f474:	4605      	mov	r5, r0
    while(item) {
 800f476:	b370      	cbz	r0, 800f4d6 <find_track_end+0xe6>
        if(item_id != item_start_id && lv_obj_has_flag(item, LV_OBJ_FLAG_FLEX_IN_NEW_TRACK)) break;
 800f478:	4598      	cmp	r8, r3
 800f47a:	d125      	bne.n	800f4c8 <find_track_end+0xd8>
        if(!lv_obj_has_flag_any(item, LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) {
 800f47c:	4965      	ldr	r1, [pc, #404]	; (800f614 <find_track_end+0x224>)
 800f47e:	4628      	mov	r0, r5
 800f480:	f7f4 fca6 	bl	8003dd0 <lv_obj_has_flag_any>
 800f484:	4682      	mov	sl, r0
 800f486:	2800      	cmp	r0, #0
 800f488:	f040 809f 	bne.w	800f5ca <find_track_end+0x1da>
    return (lv_flex_align_t)v.num;
}

static inline uint8_t lv_obj_get_style_flex_grow(const lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_FLEX_GROW);
 800f48c:	4b62      	ldr	r3, [pc, #392]	; (800f618 <find_track_end+0x228>)
 800f48e:	4601      	mov	r1, r0
 800f490:	4628      	mov	r0, r5
 800f492:	881a      	ldrh	r2, [r3, #0]
 800f494:	f7f7 ff68 	bl	8007368 <lv_obj_get_style_prop>
            if(grow_value) {
 800f498:	f010 0fff 	tst.w	r0, #255	; 0xff
 800f49c:	9003      	str	r0, [sp, #12]
 800f49e:	f000 80a2 	beq.w	800f5e6 <find_track_end+0x1f6>
                t->track_fix_main_size += item_gap;
 800f4a2:	88a3      	ldrh	r3, [r4, #4]
 800f4a4:	9a02      	ldr	r2, [sp, #8]
                t->grow_item_cnt++;
 800f4a6:	6920      	ldr	r0, [r4, #16]
                t->track_fix_main_size += item_gap;
 800f4a8:	4413      	add	r3, r2
                t->grow_item_cnt++;
 800f4aa:	3001      	adds	r0, #1
                t->track_fix_main_size += item_gap;
 800f4ac:	80a3      	strh	r3, [r4, #4]
                if(t->grow_dsc_calc) {
 800f4ae:	7d23      	ldrb	r3, [r4, #20]
                t->grow_item_cnt++;
 800f4b0:	6120      	str	r0, [r4, #16]
                if(t->grow_dsc_calc) {
 800f4b2:	07da      	lsls	r2, r3, #31
 800f4b4:	d57c      	bpl.n	800f5b0 <find_track_end+0x1c0>
                    grow_dsc_t * new_dsc = lv_mem_buf_get(sizeof(grow_dsc_t) * (t->grow_item_cnt));
 800f4b6:	2314      	movs	r3, #20
 800f4b8:	4358      	muls	r0, r3
 800f4ba:	f008 faed 	bl	8017a98 <lv_mem_buf_get>
                    LV_ASSERT_MALLOC(new_dsc);
 800f4be:	2314      	movs	r3, #20
 800f4c0:	4681      	mov	r9, r0
 800f4c2:	2800      	cmp	r0, #0
 800f4c4:	d133      	bne.n	800f52e <find_track_end+0x13e>
 800f4c6:	e7fe      	b.n	800f4c6 <find_track_end+0xd6>
        if(item_id != item_start_id && lv_obj_has_flag(item, LV_OBJ_FLAG_FLEX_IN_NEW_TRACK)) break;
 800f4c8:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 800f4cc:	4628      	mov	r0, r5
 800f4ce:	f7f4 fc78 	bl	8003dc2 <lv_obj_has_flag>
 800f4d2:	2800      	cmp	r0, #0
 800f4d4:	d0d2      	beq.n	800f47c <find_track_end+0x8c>
    if(t->track_fix_main_size > 0) t->track_fix_main_size -= item_gap; /*There is no gap after the last item*/
 800f4d6:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	bfc2      	ittt	gt
 800f4de:	9a02      	ldrgt	r2, [sp, #8]
 800f4e0:	1a9b      	subgt	r3, r3, r2
 800f4e2:	80a3      	strhgt	r3, [r4, #4]
    t->track_main_size = t->grow_item_cnt ? max_main_size : t->track_fix_main_size;
 800f4e4:	6923      	ldr	r3, [r4, #16]
 800f4e6:	b913      	cbnz	r3, 800f4ee <find_track_end+0xfe>
 800f4e8:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 800f4ec:	9301      	str	r3, [sp, #4]
 800f4ee:	9b01      	ldr	r3, [sp, #4]
 800f4f0:	8063      	strh	r3, [r4, #2]
    if(item && item_id == item_start_id) {
 800f4f2:	b1c5      	cbz	r5, 800f526 <find_track_end+0x136>
 800f4f4:	9b05      	ldr	r3, [sp, #20]
 800f4f6:	4598      	cmp	r8, r3
 800f4f8:	d115      	bne.n	800f526 <find_track_end+0x136>
        item = cont->spec_attr->children[item_id];
 800f4fa:	4638      	mov	r0, r7
        get_next_item(cont, f->rev, &item_id);
 800f4fc:	78f1      	ldrb	r1, [r6, #3]
 800f4fe:	aa05      	add	r2, sp, #20
        item = cont->spec_attr->children[item_id];
 800f500:	f850 3f08 	ldr.w	r3, [r0, #8]!
        get_next_item(cont, f->rev, &item_id);
 800f504:	f3c1 0180 	ubfx	r1, r1, #2, #1
        item = cont->spec_attr->children[item_id];
 800f508:	681b      	ldr	r3, [r3, #0]
 800f50a:	f853 5028 	ldr.w	r5, [r3, r8, lsl #2]
        get_next_item(cont, f->rev, &item_id);
 800f50e:	f7ff ff5b 	bl	800f3c8 <get_next_item.isra.0>
        if(item) {
 800f512:	b145      	cbz	r5, 800f526 <find_track_end+0x136>
            t->track_cross_size = get_cross_size(item);
 800f514:	4628      	mov	r0, r5
 800f516:	47d8      	blx	fp
            t->track_main_size = get_main_size(item);
 800f518:	9b00      	ldr	r3, [sp, #0]
            t->track_cross_size = get_cross_size(item);
 800f51a:	8020      	strh	r0, [r4, #0]
            t->track_main_size = get_main_size(item);
 800f51c:	4628      	mov	r0, r5
 800f51e:	4798      	blx	r3
            t->item_cnt = 1;
 800f520:	2301      	movs	r3, #1
            t->track_main_size = get_main_size(item);
 800f522:	8060      	strh	r0, [r4, #2]
            t->item_cnt = 1;
 800f524:	60a3      	str	r3, [r4, #8]
}
 800f526:	9805      	ldr	r0, [sp, #20]
 800f528:	b007      	add	sp, #28
 800f52a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    lv_memcpy(new_dsc, t->grow_dsc, sizeof(grow_dsc_t) * (t->grow_item_cnt - 1));
 800f52e:	6922      	ldr	r2, [r4, #16]
 800f530:	68e1      	ldr	r1, [r4, #12]
 800f532:	435a      	muls	r2, r3
 800f534:	3a14      	subs	r2, #20
 800f536:	f008 f937 	bl	80177a8 <lv_memcpy>
                    lv_mem_buf_release(t->grow_dsc);
 800f53a:	68e0      	ldr	r0, [r4, #12]
 800f53c:	f008 f908 	bl	8017750 <lv_mem_buf_release>
                    new_dsc[t->grow_item_cnt - 1].item = item;
 800f540:	6922      	ldr	r2, [r4, #16]
                    new_dsc[t->grow_item_cnt - 1].min_size = f->row ? lv_obj_get_style_min_width(item, LV_PART_MAIN) : lv_obj_get_style_min_height(item, LV_PART_MAIN);
 800f542:	78f1      	ldrb	r1, [r6, #3]
                    new_dsc[t->grow_item_cnt - 1].item = item;
 800f544:	2314      	movs	r3, #20
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_min_height(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MIN_HEIGHT);
 800f546:	4628      	mov	r0, r5
 800f548:	fb03 9302 	mla	r3, r3, r2, r9
                    new_dsc[t->grow_item_cnt - 1].min_size = f->row ? lv_obj_get_style_min_width(item, LV_PART_MAIN) : lv_obj_get_style_min_height(item, LV_PART_MAIN);
 800f54c:	f011 0101 	ands.w	r1, r1, #1
                    new_dsc[t->grow_item_cnt - 1].item = item;
 800f550:	f843 5c14 	str.w	r5, [r3, #-20]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MIN_WIDTH);
 800f554:	bf1a      	itte	ne
 800f556:	f241 0202 	movwne	r2, #4098	; 0x1002
 800f55a:	4651      	movne	r1, sl
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MIN_HEIGHT);
 800f55c:	f241 0205 	movweq	r2, #4101	; 0x1005
 800f560:	f7f7 ff02 	bl	8007368 <lv_obj_get_style_prop>
                    new_dsc[t->grow_item_cnt - 1].min_size = f->row ? lv_obj_get_style_min_width(item, LV_PART_MAIN) : lv_obj_get_style_min_height(item, LV_PART_MAIN);
 800f564:	2214      	movs	r2, #20
 800f566:	6923      	ldr	r3, [r4, #16]
    return (lv_coord_t)v.num;
 800f568:	b200      	sxth	r0, r0
                    new_dsc[t->grow_item_cnt - 1].max_size = f->row ? lv_obj_get_style_max_width(item, LV_PART_MAIN) : lv_obj_get_style_max_height(item, LV_PART_MAIN);
 800f56a:	78f1      	ldrb	r1, [r6, #3]
                    new_dsc[t->grow_item_cnt - 1].min_size = f->row ? lv_obj_get_style_min_width(item, LV_PART_MAIN) : lv_obj_get_style_min_height(item, LV_PART_MAIN);
 800f56c:	fb02 9303 	mla	r3, r2, r3, r9
                    new_dsc[t->grow_item_cnt - 1].max_size = f->row ? lv_obj_get_style_max_width(item, LV_PART_MAIN) : lv_obj_get_style_max_height(item, LV_PART_MAIN);
 800f570:	f011 0101 	ands.w	r1, r1, #1
                    new_dsc[t->grow_item_cnt - 1].min_size = f->row ? lv_obj_get_style_min_width(item, LV_PART_MAIN) : lv_obj_get_style_min_height(item, LV_PART_MAIN);
 800f574:	f823 0c10 	strh.w	r0, [r3, #-16]
}

static inline lv_coord_t lv_obj_get_style_max_height(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_HEIGHT);
 800f578:	4628      	mov	r0, r5
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_WIDTH);
 800f57a:	bf16      	itet	ne
 800f57c:	f241 0203 	movwne	r2, #4099	; 0x1003
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_HEIGHT);
 800f580:	f241 0206 	movweq	r2, #4102	; 0x1006
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_WIDTH);
 800f584:	2100      	movne	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_HEIGHT);
 800f586:	f7f7 feef 	bl	8007368 <lv_obj_get_style_prop>
                    new_dsc[t->grow_item_cnt - 1].max_size = f->row ? lv_obj_get_style_max_width(item, LV_PART_MAIN) : lv_obj_get_style_max_height(item, LV_PART_MAIN);
 800f58a:	6923      	ldr	r3, [r4, #16]
 800f58c:	2214      	movs	r2, #20
    return (lv_coord_t)v.num;
 800f58e:	b200      	sxth	r0, r0
 800f590:	fb02 9303 	mla	r3, r2, r3, r9
                    new_dsc[t->grow_item_cnt - 1].clamped = 0;
 800f594:	f813 2c04 	ldrb.w	r2, [r3, #-4]
                    new_dsc[t->grow_item_cnt - 1].max_size = f->row ? lv_obj_get_style_max_width(item, LV_PART_MAIN) : lv_obj_get_style_max_height(item, LV_PART_MAIN);
 800f598:	f823 0c0e 	strh.w	r0, [r3, #-14]
                    new_dsc[t->grow_item_cnt - 1].clamped = 0;
 800f59c:	f36f 0200 	bfc	r2, #0, #1
                    new_dsc[t->grow_item_cnt - 1].grow_value = grow_value;
 800f5a0:	f89d 000c 	ldrb.w	r0, [sp, #12]
                    new_dsc[t->grow_item_cnt - 1].clamped = 0;
 800f5a4:	f803 2c04 	strb.w	r2, [r3, #-4]
                    new_dsc[t->grow_item_cnt - 1].grow_value = grow_value;
 800f5a8:	f843 0c08 	str.w	r0, [r3, #-8]
                    t->grow_dsc = new_dsc;
 800f5ac:	f8c4 900c 	str.w	r9, [r4, #12]
            t->track_cross_size = LV_MAX(get_cross_size(item), t->track_cross_size);
 800f5b0:	4628      	mov	r0, r5
 800f5b2:	47d8      	blx	fp
 800f5b4:	f9b4 3000 	ldrsh.w	r3, [r4]
 800f5b8:	4298      	cmp	r0, r3
 800f5ba:	dd02      	ble.n	800f5c2 <find_track_end+0x1d2>
 800f5bc:	4628      	mov	r0, r5
 800f5be:	47d8      	blx	fp
 800f5c0:	4603      	mov	r3, r0
 800f5c2:	8023      	strh	r3, [r4, #0]
            t->item_cnt++;
 800f5c4:	68a3      	ldr	r3, [r4, #8]
 800f5c6:	3301      	adds	r3, #1
 800f5c8:	60a3      	str	r3, [r4, #8]
        item_id += f->rev ? -1 : +1;
 800f5ca:	78f3      	ldrb	r3, [r6, #3]
 800f5cc:	f013 0f04 	tst.w	r3, #4
 800f5d0:	9b05      	ldr	r3, [sp, #20]
 800f5d2:	bf14      	ite	ne
 800f5d4:	f04f 31ff 	movne.w	r1, #4294967295
 800f5d8:	2101      	moveq	r1, #1
 800f5da:	4419      	add	r1, r3
        if(item_id < 0) break;
 800f5dc:	2900      	cmp	r1, #0
        item_id += f->rev ? -1 : +1;
 800f5de:	9105      	str	r1, [sp, #20]
        if(item_id < 0) break;
 800f5e0:	f6bf af44 	bge.w	800f46c <find_track_end+0x7c>
 800f5e4:	e777      	b.n	800f4d6 <find_track_end+0xe6>
                lv_coord_t item_size = get_main_size(item);
 800f5e6:	9b00      	ldr	r3, [sp, #0]
 800f5e8:	4628      	mov	r0, r5
 800f5ea:	4798      	blx	r3
                if(f->wrap && t->track_fix_main_size + item_size > max_main_size) break;
 800f5ec:	78f3      	ldrb	r3, [r6, #3]
 800f5ee:	079b      	lsls	r3, r3, #30
 800f5f0:	d506      	bpl.n	800f600 <find_track_end+0x210>
 800f5f2:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 800f5f6:	9a01      	ldr	r2, [sp, #4]
 800f5f8:	4403      	add	r3, r0
 800f5fa:	4293      	cmp	r3, r2
 800f5fc:	f73f af6b 	bgt.w	800f4d6 <find_track_end+0xe6>
                t->track_fix_main_size += item_size + item_gap;
 800f600:	88a3      	ldrh	r3, [r4, #4]
 800f602:	9a02      	ldr	r2, [sp, #8]
 800f604:	4413      	add	r3, r2
 800f606:	4418      	add	r0, r3
 800f608:	80a0      	strh	r0, [r4, #4]
 800f60a:	e7d1      	b.n	800f5b0 <find_track_end+0x1c0>
 800f60c:	08004e6f 	.word	0x08004e6f
 800f610:	08004e7b 	.word	0x08004e7b
 800f614:	00018001 	.word	0x00018001
 800f618:	2000adca 	.word	0x2000adca

0800f61c <flex_update>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_FLEX_FLOW);
 800f61c:	4ba3      	ldr	r3, [pc, #652]	; (800f8ac <flex_update+0x290>)
 800f61e:	2100      	movs	r1, #0
{
 800f620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f624:	881a      	ldrh	r2, [r3, #0]
 800f626:	4604      	mov	r4, r0
 800f628:	ed2d 8b02 	vpush	{d8}
 800f62c:	b09f      	sub	sp, #124	; 0x7c
 800f62e:	f7f7 fe9b 	bl	8007368 <lv_obj_get_style_prop>
    f.row = flow & _LV_FLEX_COLUMN ? 0 : 1;
 800f632:	43c3      	mvns	r3, r0
 800f634:	f3c0 0280 	ubfx	r2, r0, #2, #1
 800f638:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 800f63c:	f003 0301 	and.w	r3, r3, #1
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_FLEX_MAIN_PLACE);
 800f640:	2100      	movs	r1, #0
 800f642:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 800f646:	f89d 2053 	ldrb.w	r2, [sp, #83]	; 0x53
 800f64a:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
 800f64e:	f022 0207 	bic.w	r2, r2, #7
 800f652:	4620      	mov	r0, r4
 800f654:	4313      	orrs	r3, r2
 800f656:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f65a:	4b95      	ldr	r3, [pc, #596]	; (800f8b0 <flex_update+0x294>)
 800f65c:	881a      	ldrh	r2, [r3, #0]
 800f65e:	f7f7 fe83 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_FLEX_CROSS_PLACE);
 800f662:	4b94      	ldr	r3, [pc, #592]	; (800f8b4 <flex_update+0x298>)
 800f664:	2100      	movs	r1, #0
    f.main_place = lv_obj_get_style_flex_main_place(cont, LV_PART_MAIN);
 800f666:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
 800f66a:	881a      	ldrh	r2, [r3, #0]
 800f66c:	4620      	mov	r0, r4
 800f66e:	f7f7 fe7b 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_FLEX_TRACK_PLACE);
 800f672:	4b91      	ldr	r3, [pc, #580]	; (800f8b8 <flex_update+0x29c>)
 800f674:	2100      	movs	r1, #0
    f.cross_place = lv_obj_get_style_flex_cross_place(cont, LV_PART_MAIN);
 800f676:	f88d 0051 	strb.w	r0, [sp, #81]	; 0x51
 800f67a:	881a      	ldrh	r2, [r3, #0]
 800f67c:	4620      	mov	r0, r4
 800f67e:	f7f7 fe73 	bl	8007368 <lv_obj_get_style_prop>
    return (uint16_t)v.num;
}

static inline lv_base_dir_t lv_obj_get_style_base_dir(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 800f682:	f241 426a 	movw	r2, #5226	; 0x146a
 800f686:	2100      	movs	r1, #0
    f.track_place = lv_obj_get_style_flex_track_place(cont, LV_PART_MAIN);
 800f688:	f88d 0052 	strb.w	r0, [sp, #82]	; 0x52
 800f68c:	4620      	mov	r0, r4
 800f68e:	f7f7 fe6b 	bl	8007368 <lv_obj_get_style_prop>
    lv_coord_t track_gap = !f.row ? lv_obj_get_style_pad_column(cont, LV_PART_MAIN) : lv_obj_get_style_pad_row(cont, LV_PART_MAIN);
 800f692:	f89d 1053 	ldrb.w	r1, [sp, #83]	; 0x53
    return (lv_base_dir_t)v.num;
 800f696:	b2c3      	uxtb	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_ROW);
 800f698:	4620      	mov	r0, r4
 800f69a:	f011 0101 	ands.w	r1, r1, #1
    return (lv_base_dir_t)v.num;
 800f69e:	9303      	str	r3, [sp, #12]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 800f6a0:	bf0e      	itee	eq
 800f6a2:	f241 0215 	movweq	r2, #4117	; 0x1015
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_ROW);
 800f6a6:	f241 0214 	movwne	r2, #4116	; 0x1014
 800f6aa:	2100      	movne	r1, #0
 800f6ac:	f7f7 fe5c 	bl	8007368 <lv_obj_get_style_prop>
    lv_coord_t item_gap = f.row ? lv_obj_get_style_pad_column(cont, LV_PART_MAIN) : lv_obj_get_style_pad_row(cont, LV_PART_MAIN);
 800f6b0:	f89d 1053 	ldrb.w	r1, [sp, #83]	; 0x53
    return (lv_coord_t)v.num;
 800f6b4:	b203      	sxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_ROW);
 800f6b6:	4620      	mov	r0, r4
 800f6b8:	f011 0101 	ands.w	r1, r1, #1
    return (lv_coord_t)v.num;
 800f6bc:	9304      	str	r3, [sp, #16]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 800f6be:	bf1a      	itte	ne
 800f6c0:	f241 0215 	movwne	r2, #4117	; 0x1015
 800f6c4:	2100      	movne	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_ROW);
 800f6c6:	f241 0214 	movweq	r2, #4116	; 0x1014
 800f6ca:	f7f7 fe4d 	bl	8007368 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800f6ce:	b203      	sxth	r3, r0
    lv_coord_t max_main_size = (f.row ? lv_obj_get_content_width(cont) : lv_obj_get_content_height(cont));
 800f6d0:	4620      	mov	r0, r4
 800f6d2:	9302      	str	r3, [sp, #8]
 800f6d4:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
 800f6d8:	07dd      	lsls	r5, r3, #31
 800f6da:	d559      	bpl.n	800f790 <flex_update+0x174>
 800f6dc:	f7f5 fbd3 	bl	8004e86 <lv_obj_get_content_width>
    return (lv_opa_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_border_width(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 800f6e0:	f241 0232 	movw	r2, #4146	; 0x1032
 800f6e4:	2100      	movs	r1, #0
 800f6e6:	ee08 0a10 	vmov	s16, r0
 800f6ea:	4620      	mov	r0, r4
 800f6ec:	f7f7 fe3c 	bl	8007368 <lv_obj_get_style_prop>
 800f6f0:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 800f6f2:	f241 0210 	movw	r2, #4112	; 0x1010
 800f6f6:	2100      	movs	r1, #0
 800f6f8:	4620      	mov	r0, r4
    lv_coord_t abs_y = cont->coords.y1 + lv_obj_get_style_pad_top(cont, LV_PART_MAIN) + border_widt - lv_obj_get_scroll_y(cont);
 800f6fa:	8ae6      	ldrh	r6, [r4, #22]
 800f6fc:	f7f7 fe34 	bl	8007368 <lv_obj_get_style_prop>
 800f700:	fa10 f085 	uxtah	r0, r0, r5
 800f704:	b2af      	uxth	r7, r5
 800f706:	4406      	add	r6, r0
 800f708:	4620      	mov	r0, r4
 800f70a:	f7f6 fbf1 	bl	8005ef0 <lv_obj_get_scroll_y>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 800f70e:	f241 0212 	movw	r2, #4114	; 0x1012
 800f712:	b2b6      	uxth	r6, r6
 800f714:	2100      	movs	r1, #0
    lv_coord_t abs_x = cont->coords.x1 + lv_obj_get_style_pad_left(cont, LV_PART_MAIN) + border_widt - lv_obj_get_scroll_x(cont);
 800f716:	8aa5      	ldrh	r5, [r4, #20]
    lv_coord_t abs_y = cont->coords.y1 + lv_obj_get_style_pad_top(cont, LV_PART_MAIN) + border_widt - lv_obj_get_scroll_y(cont);
 800f718:	1a30      	subs	r0, r6, r0
 800f71a:	f8ad 0046 	strh.w	r0, [sp, #70]	; 0x46
 800f71e:	4620      	mov	r0, r4
 800f720:	f7f7 fe22 	bl	8007368 <lv_obj_get_style_prop>
    lv_coord_t abs_x = cont->coords.x1 + lv_obj_get_style_pad_left(cont, LV_PART_MAIN) + border_widt - lv_obj_get_scroll_x(cont);
 800f724:	4438      	add	r0, r7
 800f726:	4405      	add	r5, r0
 800f728:	4620      	mov	r0, r4
 800f72a:	f7f6 fbcf 	bl	8005ecc <lv_obj_get_scroll_x>
    lv_coord_t * cross_pos = (f.row ? &abs_y : &abs_x);
 800f72e:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
    lv_coord_t abs_x = cont->coords.x1 + lv_obj_get_style_pad_left(cont, LV_PART_MAIN) + border_widt - lv_obj_get_scroll_x(cont);
 800f732:	b2ad      	uxth	r5, r5
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 800f734:	f241 0201 	movw	r2, #4097	; 0x1001
 800f738:	2100      	movs	r1, #0
    lv_flex_align_t track_cross_place = f.track_place;
 800f73a:	f89d 7052 	ldrb.w	r7, [sp, #82]	; 0x52
    lv_coord_t abs_x = cont->coords.x1 + lv_obj_get_style_pad_left(cont, LV_PART_MAIN) + border_widt - lv_obj_get_scroll_x(cont);
 800f73e:	1a28      	subs	r0, r5, r0
 800f740:	f8ad 0048 	strh.w	r0, [sp, #72]	; 0x48
    lv_coord_t * cross_pos = (f.row ? &abs_y : &abs_x);
 800f744:	07d8      	lsls	r0, r3, #31
 800f746:	4620      	mov	r0, r4
 800f748:	bf54      	ite	pl
 800f74a:	ad12      	addpl	r5, sp, #72	; 0x48
 800f74c:	f10d 0546 	addmi.w	r5, sp, #70	; 0x46
 800f750:	f7f7 fe0a 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 800f754:	f241 0204 	movw	r2, #4100	; 0x1004
    return (lv_coord_t)v.num;
 800f758:	b203      	sxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 800f75a:	2100      	movs	r1, #0
 800f75c:	4620      	mov	r0, r4
    return (lv_coord_t)v.num;
 800f75e:	9309      	str	r3, [sp, #36]	; 0x24
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 800f760:	f7f7 fe02 	bl	8007368 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800f764:	b203      	sxth	r3, r0
    if((f.row && h_set == LV_SIZE_CONTENT && cont->h_layout == 0) ||
 800f766:	f89d 0053 	ldrb.w	r0, [sp, #83]	; 0x53
 800f76a:	f010 0f01 	tst.w	r0, #1
 800f76e:	9308      	str	r3, [sp, #32]
 800f770:	f242 73d1 	movw	r3, #10193	; 0x27d1
 800f774:	d00f      	beq.n	800f796 <flex_update+0x17a>
 800f776:	9a08      	ldr	r2, [sp, #32]
 800f778:	429a      	cmp	r2, r3
 800f77a:	d103      	bne.n	800f784 <flex_update+0x168>
 800f77c:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 800f780:	0799      	lsls	r1, r3, #30
 800f782:	d547      	bpl.n	800f814 <flex_update+0x1f8>
    lv_coord_t gap = 0;
 800f784:	2300      	movs	r3, #0
 800f786:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
    if(track_cross_place != LV_FLEX_ALIGN_START) {
 800f78a:	b9a7      	cbnz	r7, 800f7b6 <flex_update+0x19a>
    lv_coord_t total_track_cross_size = 0;
 800f78c:	463e      	mov	r6, r7
 800f78e:	e044      	b.n	800f81a <flex_update+0x1fe>
    lv_coord_t max_main_size = (f.row ? lv_obj_get_content_width(cont) : lv_obj_get_content_height(cont));
 800f790:	f7f5 fb93 	bl	8004eba <lv_obj_get_content_height>
 800f794:	e7a4      	b.n	800f6e0 <flex_update+0xc4>
    	(!f.row && w_set == LV_SIZE_CONTENT && cont->w_layout == 0))
 800f796:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f798:	429a      	cmp	r2, r3
 800f79a:	d104      	bne.n	800f7a6 <flex_update+0x18a>
 800f79c:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 800f7a0:	075a      	lsls	r2, r3, #29
 800f7a2:	f140 82b5 	bpl.w	800fd10 <flex_update+0x6f4>
    if(rtl && !f.row) {
 800f7a6:	9b03      	ldr	r3, [sp, #12]
 800f7a8:	2b01      	cmp	r3, #1
 800f7aa:	d1eb      	bne.n	800f784 <flex_update+0x168>
        if(track_cross_place == LV_FLEX_ALIGN_START) track_cross_place = LV_FLEX_ALIGN_END;
 800f7ac:	bb87      	cbnz	r7, 800f810 <flex_update+0x1f4>
    lv_coord_t gap = 0;
 800f7ae:	2300      	movs	r3, #0
        if(track_cross_place == LV_FLEX_ALIGN_START) track_cross_place = LV_FLEX_ALIGN_END;
 800f7b0:	2701      	movs	r7, #1
    lv_coord_t gap = 0;
 800f7b2:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
        track_first_item = f.rev ? cont->spec_attr->child_cnt - 1 : 0;
 800f7b6:	68a3      	ldr	r3, [r4, #8]
 800f7b8:	f010 0004 	ands.w	r0, r0, #4
 800f7bc:	f04f 0800 	mov.w	r8, #0
            next_track_first_item = find_track_end(cont, &f, track_first_item, max_main_size, item_gap, &t);
 800f7c0:	f10d 0960 	add.w	r9, sp, #96	; 0x60
 800f7c4:	685a      	ldr	r2, [r3, #4]
        track_first_item = f.rev ? cont->spec_attr->child_cnt - 1 : 0;
 800f7c6:	bf08      	it	eq
 800f7c8:	4602      	moveq	r2, r0
 800f7ca:	4646      	mov	r6, r8
 800f7cc:	bf18      	it	ne
 800f7ce:	f102 32ff 	addne.w	r2, r2, #4294967295
        while(track_first_item < (int32_t)cont->spec_attr->child_cnt && track_first_item >= 0) {
 800f7d2:	68a3      	ldr	r3, [r4, #8]
 800f7d4:	685b      	ldr	r3, [r3, #4]
 800f7d6:	4293      	cmp	r3, r2
 800f7d8:	dd01      	ble.n	800f7de <flex_update+0x1c2>
 800f7da:	2a00      	cmp	r2, #0
 800f7dc:	da49      	bge.n	800f872 <flex_update+0x256>
        if(track_cnt) total_track_cross_size -= track_gap;   /*No gap after the last track*/
 800f7de:	f1b8 0f00 	cmp.w	r8, #0
 800f7e2:	d002      	beq.n	800f7ea <flex_update+0x1ce>
 800f7e4:	9b04      	ldr	r3, [sp, #16]
 800f7e6:	1af6      	subs	r6, r6, r3
 800f7e8:	b236      	sxth	r6, r6
        lv_coord_t max_cross_size = (f.row ? lv_obj_get_content_height(cont) : lv_obj_get_content_width(cont));
 800f7ea:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
 800f7ee:	4620      	mov	r0, r4
 800f7f0:	07db      	lsls	r3, r3, #31
 800f7f2:	d558      	bpl.n	800f8a6 <flex_update+0x28a>
 800f7f4:	f7f5 fb61 	bl	8004eba <lv_obj_get_content_height>
        place_content(track_cross_place, max_cross_size, total_track_cross_size, track_cnt, cross_pos, &gap);
 800f7f8:	f10d 034a 	add.w	r3, sp, #74	; 0x4a
 800f7fc:	4601      	mov	r1, r0
 800f7fe:	4632      	mov	r2, r6
 800f800:	4638      	mov	r0, r7
 800f802:	e9cd 5300 	strd	r5, r3, [sp]
 800f806:	fa0f f388 	sxth.w	r3, r8
 800f80a:	f7ff fd99 	bl	800f340 <place_content>
 800f80e:	e004      	b.n	800f81a <flex_update+0x1fe>
        else if(track_cross_place == LV_FLEX_ALIGN_END) track_cross_place = LV_FLEX_ALIGN_START;
 800f810:	2f01      	cmp	r7, #1
 800f812:	d1b7      	bne.n	800f784 <flex_update+0x168>
    lv_coord_t gap = 0;
 800f814:	2600      	movs	r6, #0
 800f816:	f8ad 604a 	strh.w	r6, [sp, #74]	; 0x4a
    track_first_item =  f.rev ? cont->spec_attr->child_cnt - 1 : 0;
 800f81a:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
 800f81e:	68a2      	ldr	r2, [r4, #8]
 800f820:	f013 0704 	ands.w	r7, r3, #4
 800f824:	6852      	ldr	r2, [r2, #4]
 800f826:	bf18      	it	ne
 800f828:	f102 37ff 	addne.w	r7, r2, #4294967295
    if(rtl && !f.row) {
 800f82c:	9a03      	ldr	r2, [sp, #12]
 800f82e:	2a01      	cmp	r2, #1
 800f830:	d104      	bne.n	800f83c <flex_update+0x220>
 800f832:	07d9      	lsls	r1, r3, #31
 800f834:	d402      	bmi.n	800f83c <flex_update+0x220>
         *cross_pos += total_track_cross_size;
 800f836:	882b      	ldrh	r3, [r5, #0]
 800f838:	441e      	add	r6, r3
 800f83a:	802e      	strh	r6, [r5, #0]
    while(track_first_item < (int32_t)cont->spec_attr->child_cnt && track_first_item >= 0) {
 800f83c:	68a3      	ldr	r3, [r4, #8]
 800f83e:	685b      	ldr	r3, [r3, #4]
 800f840:	42bb      	cmp	r3, r7
 800f842:	dd01      	ble.n	800f848 <flex_update+0x22c>
 800f844:	2f00      	cmp	r7, #0
 800f846:	da39      	bge.n	800f8bc <flex_update+0x2a0>
    if(w_set == LV_SIZE_CONTENT || h_set == LV_SIZE_CONTENT) {
 800f848:	f242 73d1 	movw	r3, #10193	; 0x27d1
 800f84c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f84e:	429a      	cmp	r2, r3
 800f850:	d002      	beq.n	800f858 <flex_update+0x23c>
 800f852:	9a08      	ldr	r2, [sp, #32]
 800f854:	429a      	cmp	r2, r3
 800f856:	d102      	bne.n	800f85e <flex_update+0x242>
        lv_obj_refr_size(cont);
 800f858:	4620      	mov	r0, r4
 800f85a:	f7f5 fed3 	bl	8005604 <lv_obj_refr_size>
    lv_event_send(cont, LV_EVENT_LAYOUT_CHANGED, NULL);
 800f85e:	2200      	movs	r2, #0
 800f860:	2125      	movs	r1, #37	; 0x25
 800f862:	4620      	mov	r0, r4
 800f864:	f7f2 fb30 	bl	8001ec8 <lv_event_send>
}
 800f868:	b01f      	add	sp, #124	; 0x7c
 800f86a:	ecbd 8b02 	vpop	{d8}
 800f86e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            t.grow_dsc_calc = 0;
 800f872:	f89d 3074 	ldrb.w	r3, [sp, #116]	; 0x74
            next_track_first_item = find_track_end(cont, &f, track_first_item, max_main_size, item_gap, &t);
 800f876:	a914      	add	r1, sp, #80	; 0x50
 800f878:	4620      	mov	r0, r4
 800f87a:	f8cd 9004 	str.w	r9, [sp, #4]
            t.grow_dsc_calc = 0;
 800f87e:	f36f 0300 	bfc	r3, #0, #1
            track_cnt++;
 800f882:	f108 0801 	add.w	r8, r8, #1
            t.grow_dsc_calc = 0;
 800f886:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
            next_track_first_item = find_track_end(cont, &f, track_first_item, max_main_size, item_gap, &t);
 800f88a:	9b02      	ldr	r3, [sp, #8]
 800f88c:	9300      	str	r3, [sp, #0]
 800f88e:	ee18 3a10 	vmov	r3, s16
 800f892:	f7ff fdad 	bl	800f3f0 <find_track_end>
            total_track_cross_size += t.track_cross_size + track_gap;
 800f896:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 800f89a:	9904      	ldr	r1, [sp, #16]
            next_track_first_item = find_track_end(cont, &f, track_first_item, max_main_size, item_gap, &t);
 800f89c:	4602      	mov	r2, r0
            total_track_cross_size += t.track_cross_size + track_gap;
 800f89e:	440b      	add	r3, r1
 800f8a0:	441e      	add	r6, r3
 800f8a2:	b236      	sxth	r6, r6
            track_first_item = next_track_first_item;
 800f8a4:	e795      	b.n	800f7d2 <flex_update+0x1b6>
        lv_coord_t max_cross_size = (f.row ? lv_obj_get_content_height(cont) : lv_obj_get_content_width(cont));
 800f8a6:	f7f5 faee 	bl	8004e86 <lv_obj_get_content_width>
 800f8aa:	e7a5      	b.n	800f7f8 <flex_update+0x1dc>
 800f8ac:	2000adc8 	.word	0x2000adc8
 800f8b0:	2000adcc 	.word	0x2000adcc
 800f8b4:	2000adc4 	.word	0x2000adc4
 800f8b8:	2000adc6 	.word	0x2000adc6
        t.grow_dsc_calc = 1;
 800f8bc:	f89d 3074 	ldrb.w	r3, [sp, #116]	; 0x74
        next_track_first_item = find_track_end(cont, &f, track_first_item, max_main_size, item_gap, &t);
 800f8c0:	463a      	mov	r2, r7
 800f8c2:	a914      	add	r1, sp, #80	; 0x50
 800f8c4:	4620      	mov	r0, r4
        t.grow_dsc_calc = 1;
 800f8c6:	f043 0301 	orr.w	r3, r3, #1
 800f8ca:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
        next_track_first_item = find_track_end(cont, &f, track_first_item, max_main_size, item_gap, &t);
 800f8ce:	ab18      	add	r3, sp, #96	; 0x60
 800f8d0:	9301      	str	r3, [sp, #4]
 800f8d2:	9b02      	ldr	r3, [sp, #8]
 800f8d4:	9300      	str	r3, [sp, #0]
 800f8d6:	ee18 3a10 	vmov	r3, s16
 800f8da:	f7ff fd89 	bl	800f3f0 <find_track_end>
        if(rtl && !f.row) {
 800f8de:	9b03      	ldr	r3, [sp, #12]
        next_track_first_item = find_track_end(cont, &f, track_first_item, max_main_size, item_gap, &t);
 800f8e0:	9007      	str	r0, [sp, #28]
        if(rtl && !f.row) {
 800f8e2:	2b01      	cmp	r3, #1
 800f8e4:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
 800f8e8:	d106      	bne.n	800f8f8 <flex_update+0x2dc>
 800f8ea:	07da      	lsls	r2, r3, #31
            *cross_pos -= t.track_cross_size;
 800f8ec:	bf5f      	itttt	pl
 800f8ee:	882a      	ldrhpl	r2, [r5, #0]
 800f8f0:	f8bd 1060 	ldrhpl.w	r1, [sp, #96]	; 0x60
 800f8f4:	1a52      	subpl	r2, r2, r1
 800f8f6:	802a      	strhpl	r2, [r5, #0]
        children_repos(cont, &f, track_first_item, next_track_first_item, abs_x, abs_y, max_main_size, item_gap, &t);
 800f8f8:	f9bd 2048 	ldrsh.w	r2, [sp, #72]	; 0x48
    void (*area_set_main_size)(lv_area_t *, lv_coord_t) = (f->row ? lv_area_set_width : lv_area_set_height);
 800f8fc:	f003 0301 	and.w	r3, r3, #1
    lv_coord_t (*area_get_main_size)(const lv_area_t *) = (f->row ? lv_area_get_width : lv_area_get_height);
 800f900:	4969      	ldr	r1, [pc, #420]	; (800faa8 <flex_update+0x48c>)
 800f902:	f04f 0e14 	mov.w	lr, #20
        children_repos(cont, &f, track_first_item, next_track_first_item, abs_x, abs_y, max_main_size, item_gap, &t);
 800f906:	920b      	str	r2, [sp, #44]	; 0x2c
    lv_coord_t (*area_get_main_size)(const lv_area_t *) = (f->row ? lv_area_get_width : lv_area_get_height);
 800f908:	2b00      	cmp	r3, #0
        children_repos(cont, &f, track_first_item, next_track_first_item, abs_x, abs_y, max_main_size, item_gap, &t);
 800f90a:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
    lv_coord_t (*area_get_main_size)(const lv_area_t *) = (f->row ? lv_area_get_width : lv_area_get_height);
 800f90e:	bf18      	it	ne
 800f910:	460b      	movne	r3, r1
 800f912:	4866      	ldr	r0, [pc, #408]	; (800faac <flex_update+0x490>)
        children_repos(cont, &f, track_first_item, next_track_first_item, abs_x, abs_y, max_main_size, item_gap, &t);
 800f914:	920c      	str	r2, [sp, #48]	; 0x30
    lv_coord_t (*area_get_main_size)(const lv_area_t *) = (f->row ? lv_area_get_width : lv_area_get_height);
 800f916:	4a66      	ldr	r2, [pc, #408]	; (800fab0 <flex_update+0x494>)
 800f918:	9715      	str	r7, [sp, #84]	; 0x54
 800f91a:	bf08      	it	eq
 800f91c:	4613      	moveq	r3, r2
 800f91e:	9305      	str	r3, [sp, #20]
 800f920:	4b64      	ldr	r3, [pc, #400]	; (800fab4 <flex_update+0x498>)
 800f922:	bf08      	it	eq
 800f924:	4603      	moveq	r3, r0
 800f926:	930d      	str	r3, [sp, #52]	; 0x34
 800f928:	bf0c      	ite	eq
 800f92a:	460b      	moveq	r3, r1
 800f92c:	4613      	movne	r3, r2
        lv_coord_t grow_max_size = t->track_main_size - t->track_fix_main_size;
 800f92e:	f8bd 1062 	ldrh.w	r1, [sp, #98]	; 0x62
    lv_coord_t (*area_get_main_size)(const lv_area_t *) = (f->row ? lv_area_get_width : lv_area_get_height);
 800f932:	930a      	str	r3, [sp, #40]	; 0x28
        lv_coord_t grow_max_size = t->track_main_size - t->track_fix_main_size;
 800f934:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 800f938:	1ac9      	subs	r1, r1, r3
 800f93a:	e9dd a31b 	ldrd	sl, r3, [sp, #108]	; 0x6c
 800f93e:	b209      	sxth	r1, r1
 800f940:	fb0e ae03 	mla	lr, lr, r3, sl
        for(i = 0; i < t->grow_item_cnt; i++) {
 800f944:	4650      	mov	r0, sl
        lv_coord_t grow_max_size = t->track_main_size - t->track_fix_main_size;
 800f946:	460f      	mov	r7, r1
        lv_coord_t grow_value_sum = 0;
 800f948:	f04f 0c00 	mov.w	ip, #0
        for(i = 0; i < t->grow_item_cnt; i++) {
 800f94c:	4586      	cmp	lr, r0
 800f94e:	d153      	bne.n	800f9f8 <flex_update+0x3dc>
 800f950:	4653      	mov	r3, sl
        grow_reiterate = false;
 800f952:	2600      	movs	r6, #0
        for(i = 0; i < t->grow_item_cnt; i++) {
 800f954:	459e      	cmp	lr, r3
 800f956:	d15e      	bne.n	800fa16 <flex_update+0x3fa>
    while(grow_reiterate) {
 800f958:	2e00      	cmp	r6, #0
 800f95a:	d1f3      	bne.n	800f944 <flex_update+0x328>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 800f95c:	f241 426a 	movw	r2, #5226	; 0x146a
 800f960:	4631      	mov	r1, r6
 800f962:	4620      	mov	r0, r4
 800f964:	f7f7 fd00 	bl	8007368 <lv_obj_get_style_prop>
    place_content(f->main_place, max_main_size, t->track_main_size, t->item_cnt, &main_pos, &place_gap);
 800f968:	f9bd 2062 	ldrsh.w	r2, [sp, #98]	; 0x62
    return (lv_base_dir_t)v.num;
 800f96c:	b2c3      	uxtb	r3, r0
 800f96e:	ee18 1a10 	vmov	r1, s16
 800f972:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 800f976:	9306      	str	r3, [sp, #24]
 800f978:	f10d 034e 	add.w	r3, sp, #78	; 0x4e
    lv_coord_t main_pos = 0;
 800f97c:	f8ad 604c 	strh.w	r6, [sp, #76]	; 0x4c
    place_content(f->main_place, max_main_size, t->track_main_size, t->item_cnt, &main_pos, &place_gap);
 800f980:	9301      	str	r3, [sp, #4]
 800f982:	ab13      	add	r3, sp, #76	; 0x4c
    lv_coord_t place_gap = 0;
 800f984:	f8ad 604e 	strh.w	r6, [sp, #78]	; 0x4e
    place_content(f->main_place, max_main_size, t->track_main_size, t->item_cnt, &main_pos, &place_gap);
 800f988:	9300      	str	r3, [sp, #0]
 800f98a:	f9bd 3068 	ldrsh.w	r3, [sp, #104]	; 0x68
 800f98e:	f7ff fcd7 	bl	800f340 <place_content>
    if(f->row && rtl) main_pos += lv_obj_get_content_width(cont);
 800f992:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
 800f996:	07da      	lsls	r2, r3, #31
 800f998:	d50a      	bpl.n	800f9b0 <flex_update+0x394>
 800f99a:	9b06      	ldr	r3, [sp, #24]
 800f99c:	2b01      	cmp	r3, #1
 800f99e:	d107      	bne.n	800f9b0 <flex_update+0x394>
 800f9a0:	4620      	mov	r0, r4
 800f9a2:	f7f5 fa70 	bl	8004e86 <lv_obj_get_content_width>
 800f9a6:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 800f9aa:	4418      	add	r0, r3
 800f9ac:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
    lv_obj_t * item = lv_obj_get_child(cont, item_first_id);
 800f9b0:	9915      	ldr	r1, [sp, #84]	; 0x54
 800f9b2:	4620      	mov	r0, r4
 800f9b4:	f7f8 f825 	bl	8007a02 <lv_obj_get_child>
 800f9b8:	f104 0a08 	add.w	sl, r4, #8
 800f9bc:	4606      	mov	r6, r0
    while(item && item_first_id != item_last_id) {
 800f9be:	b11e      	cbz	r6, 800f9c8 <flex_update+0x3ac>
 800f9c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f9c2:	9a07      	ldr	r2, [sp, #28]
 800f9c4:	429a      	cmp	r2, r3
 800f9c6:	d14e      	bne.n	800fa66 <flex_update+0x44a>
        lv_mem_buf_release(t.grow_dsc);
 800f9c8:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800f9ca:	f007 fec1 	bl	8017750 <lv_mem_buf_release>
        if(rtl && !f.row) {
 800f9ce:	9a03      	ldr	r2, [sp, #12]
 800f9d0:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 800f9d4:	2a01      	cmp	r2, #1
 800f9d6:	f040 8192 	bne.w	800fcfe <flex_update+0x6e2>
 800f9da:	f89d 0053 	ldrb.w	r0, [sp, #83]	; 0x53
 800f9de:	f9b5 2000 	ldrsh.w	r2, [r5]
 800f9e2:	07c0      	lsls	r0, r0, #31
 800f9e4:	f9bd 104a 	ldrsh.w	r1, [sp, #74]	; 0x4a
 800f9e8:	f100 8189 	bmi.w	800fcfe <flex_update+0x6e2>
            *cross_pos -= gap + track_gap;
 800f9ec:	440b      	add	r3, r1
 800f9ee:	1ad3      	subs	r3, r2, r3
            *cross_pos += t.track_cross_size + gap + track_gap;
 800f9f0:	b21b      	sxth	r3, r3
        next_track_first_item = find_track_end(cont, &f, track_first_item, max_main_size, item_gap, &t);
 800f9f2:	9f07      	ldr	r7, [sp, #28]
 800f9f4:	802b      	strh	r3, [r5, #0]
 800f9f6:	e721      	b.n	800f83c <flex_update+0x220>
            if(t->grow_dsc[i].clamped == 0) {
 800f9f8:	7c03      	ldrb	r3, [r0, #16]
 800f9fa:	3014      	adds	r0, #20
 800f9fc:	07de      	lsls	r6, r3, #31
                grow_value_sum += t->grow_dsc[i].grow_value;
 800f9fe:	bf55      	itete	pl
 800fa00:	f850 3c08 	ldrpl.w	r3, [r0, #-8]
                grow_max_size -= t->grow_dsc[i].final_size;
 800fa04:	f830 2c0c 	ldrhmi.w	r2, [r0, #-12]
                grow_value_sum += t->grow_dsc[i].grow_value;
 800fa08:	449c      	addpl	ip, r3
                grow_max_size -= t->grow_dsc[i].final_size;
 800fa0a:	1abf      	submi	r7, r7, r2
                grow_value_sum += t->grow_dsc[i].grow_value;
 800fa0c:	bf54      	ite	pl
 800fa0e:	fa0f fc8c 	sxthpl.w	ip, ip
                grow_max_size -= t->grow_dsc[i].final_size;
 800fa12:	b23f      	sxthmi	r7, r7
        for(i = 0; i < t->grow_item_cnt; i++) {
 800fa14:	e79a      	b.n	800f94c <flex_update+0x330>
            if(t->grow_dsc[i].clamped == 0) {
 800fa16:	f893 9010 	ldrb.w	r9, [r3, #16]
 800fa1a:	f019 0f01 	tst.w	r9, #1
 800fa1e:	d120      	bne.n	800fa62 <flex_update+0x446>
                lv_coord_t size = grow_unit * t->grow_dsc[i].grow_value;
 800fa20:	f8b3 800c 	ldrh.w	r8, [r3, #12]
                lv_coord_t size_clamp = LV_CLAMP(t->grow_dsc[i].min_size, size, t->grow_dsc[i].max_size);
 800fa24:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800fa28:	f9b3 b004 	ldrsh.w	fp, [r3, #4]
                grow_unit = grow_max_size / grow_value_sum;
 800fa2c:	fb97 f0fc 	sdiv	r0, r7, ip
                lv_coord_t size = grow_unit * t->grow_dsc[i].grow_value;
 800fa30:	fb10 f008 	smulbb	r0, r0, r8
                grow_value_sum -= t->grow_dsc[i].grow_value;
 800fa34:	ebac 0c08 	sub.w	ip, ip, r8
                lv_coord_t size = grow_unit * t->grow_dsc[i].grow_value;
 800fa38:	b200      	sxth	r0, r0
                grow_value_sum -= t->grow_dsc[i].grow_value;
 800fa3a:	fa0f fc8c 	sxth.w	ip, ip
                lv_coord_t size_clamp = LV_CLAMP(t->grow_dsc[i].min_size, size, t->grow_dsc[i].max_size);
 800fa3e:	4282      	cmp	r2, r0
 800fa40:	bfa8      	it	ge
 800fa42:	4602      	movge	r2, r0
 800fa44:	455a      	cmp	r2, fp
 800fa46:	bfb8      	it	lt
 800fa48:	465a      	movlt	r2, fp
                if(size_clamp != size) {
 800fa4a:	4290      	cmp	r0, r2
                t->grow_dsc[i].final_size = size_clamp;
 800fa4c:	811a      	strh	r2, [r3, #8]
                grow_max_size  -= t->grow_dsc[i].final_size;
 800fa4e:	eba7 0202 	sub.w	r2, r7, r2
                    t->grow_dsc[i].clamped = 1;
 800fa52:	bf1c      	itt	ne
 800fa54:	f049 0901 	orrne.w	r9, r9, #1
                    grow_reiterate = true;
 800fa58:	2601      	movne	r6, #1
                grow_max_size  -= t->grow_dsc[i].final_size;
 800fa5a:	b217      	sxth	r7, r2
                    t->grow_dsc[i].clamped = 1;
 800fa5c:	bf18      	it	ne
 800fa5e:	f883 9010 	strbne.w	r9, [r3, #16]
        for(i = 0; i < t->grow_item_cnt; i++) {
 800fa62:	3314      	adds	r3, #20
 800fa64:	e776      	b.n	800f954 <flex_update+0x338>
        if(lv_obj_has_flag_any(item, LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) {
 800fa66:	4914      	ldr	r1, [pc, #80]	; (800fab8 <flex_update+0x49c>)
 800fa68:	4630      	mov	r0, r6
 800fa6a:	f7f4 f9b1 	bl	8003dd0 <lv_obj_has_flag_any>
 800fa6e:	4607      	mov	r7, r0
 800fa70:	b148      	cbz	r0, 800fa86 <flex_update+0x46a>
        item = get_next_item(cont, f->rev, &item_first_id);
 800fa72:	f89d 1053 	ldrb.w	r1, [sp, #83]	; 0x53
 800fa76:	aa15      	add	r2, sp, #84	; 0x54
 800fa78:	4650      	mov	r0, sl
 800fa7a:	f3c1 0180 	ubfx	r1, r1, #2, #1
 800fa7e:	f7ff fca3 	bl	800f3c8 <get_next_item.isra.0>
 800fa82:	4606      	mov	r6, r0
 800fa84:	e79b      	b.n	800f9be <flex_update+0x3a2>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_FLEX_GROW);
 800fa86:	4b0d      	ldr	r3, [pc, #52]	; (800fabc <flex_update+0x4a0>)
 800fa88:	4601      	mov	r1, r0
 800fa8a:	4630      	mov	r0, r6
 800fa8c:	881a      	ldrh	r2, [r3, #0]
 800fa8e:	f7f7 fc6b 	bl	8007368 <lv_obj_get_style_prop>
        if(grow_size) {
 800fa92:	f010 0fff 	tst.w	r0, #255	; 0xff
 800fa96:	f000 8112 	beq.w	800fcbe <flex_update+0x6a2>
            for(i = 0; i < t->grow_item_cnt; i++) {
 800fa9a:	4638      	mov	r0, r7
 800fa9c:	e9dd 321b 	ldrd	r3, r2, [sp, #108]	; 0x6c
 800faa0:	4290      	cmp	r0, r2
 800faa2:	d10d      	bne.n	800fac0 <flex_update+0x4a4>
            lv_coord_t s = 0;
 800faa4:	2100      	movs	r1, #0
 800faa6:	e013      	b.n	800fad0 <flex_update+0x4b4>
 800faa8:	0800f329 	.word	0x0800f329
 800faac:	08016e31 	.word	0x08016e31
 800fab0:	0800f335 	.word	0x0800f335
 800fab4:	08016e27 	.word	0x08016e27
 800fab8:	00018001 	.word	0x00018001
 800fabc:	2000adca 	.word	0x2000adca
                if(t->grow_dsc[i].item == item) {
 800fac0:	4619      	mov	r1, r3
 800fac2:	f853 7b14 	ldr.w	r7, [r3], #20
 800fac6:	42be      	cmp	r6, r7
 800fac8:	f040 80f7 	bne.w	800fcba <flex_update+0x69e>
                    s = t->grow_dsc[i].final_size;
 800facc:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
    dest->x1 = src->x1;
 800fad0:	8ab3      	ldrh	r3, [r6, #20]
            lv_area_copy(&old_coords, &item->coords);
 800fad2:	f106 0714 	add.w	r7, r6, #20
 800fad6:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
            area_set_main_size(&item->coords, s);
 800fada:	4638      	mov	r0, r7
    dest->y1 = src->y1;
 800fadc:	8af3      	ldrh	r3, [r6, #22]
 800fade:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
    dest->x2 = src->x2;
 800fae2:	8b33      	ldrh	r3, [r6, #24]
 800fae4:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
    dest->y2 = src->y2;
 800fae8:	8b73      	ldrh	r3, [r6, #26]
 800faea:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
 800faee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800faf0:	4798      	blx	r3
            if(f->row) item->w_layout = 1;
 800faf2:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
            if(area_get_main_size(&old_coords) != area_get_main_size(&item->coords)) {
 800faf6:	a816      	add	r0, sp, #88	; 0x58
            if(f->row) item->w_layout = 1;
 800faf8:	f013 0f01 	tst.w	r3, #1
 800fafc:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
 800fb00:	bf14      	ite	ne
 800fb02:	f043 0304 	orrne.w	r3, r3, #4
            else item->h_layout = 1;
 800fb06:	f043 0302 	orreq.w	r3, r3, #2
 800fb0a:	f886 3023 	strb.w	r3, [r6, #35]	; 0x23
            if(area_get_main_size(&old_coords) != area_get_main_size(&item->coords)) {
 800fb0e:	9b05      	ldr	r3, [sp, #20]
 800fb10:	4798      	blx	r3
 800fb12:	4680      	mov	r8, r0
 800fb14:	9b05      	ldr	r3, [sp, #20]
 800fb16:	4638      	mov	r0, r7
 800fb18:	4798      	blx	r3
 800fb1a:	4580      	cmp	r8, r0
 800fb1c:	d011      	beq.n	800fb42 <flex_update+0x526>
                lv_obj_invalidate(item);
 800fb1e:	4630      	mov	r0, r6
 800fb20:	f7f5 fafa 	bl	8005118 <lv_obj_invalidate>
                lv_event_send(item, LV_EVENT_SIZE_CHANGED, &old_coords);
 800fb24:	aa16      	add	r2, sp, #88	; 0x58
 800fb26:	2123      	movs	r1, #35	; 0x23
 800fb28:	4630      	mov	r0, r6
 800fb2a:	f7f2 f9cd 	bl	8001ec8 <lv_event_send>
                lv_event_send(lv_obj_get_parent(item), LV_EVENT_CHILD_CHANGED, item);
 800fb2e:	4630      	mov	r0, r6
 800fb30:	f7f7 ff64 	bl	80079fc <lv_obj_get_parent>
 800fb34:	4632      	mov	r2, r6
 800fb36:	2122      	movs	r1, #34	; 0x22
 800fb38:	f7f2 f9c6 	bl	8001ec8 <lv_event_send>
                lv_obj_invalidate(item);
 800fb3c:	4630      	mov	r0, r6
 800fb3e:	f7f5 faeb 	bl	8005118 <lv_obj_invalidate>
        switch(f->cross_place) {
 800fb42:	f89d 3051 	ldrb.w	r3, [sp, #81]	; 0x51
 800fb46:	2b01      	cmp	r3, #1
 800fb48:	f000 80c0 	beq.w	800fccc <flex_update+0x6b0>
 800fb4c:	2b02      	cmp	r3, #2
 800fb4e:	f040 80c7 	bne.w	800fce0 <flex_update+0x6c4>
            cross_pos = (((t->track_cross_size + 1) & (~1)) - area_get_cross_size(&item->coords)) / 2;
 800fb52:	f9bd 0060 	ldrsh.w	r0, [sp, #96]	; 0x60
 800fb56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fb58:	3001      	adds	r0, #1
 800fb5a:	f020 0801 	bic.w	r8, r0, #1
 800fb5e:	f106 0014 	add.w	r0, r6, #20
 800fb62:	4798      	blx	r3
 800fb64:	eba8 0000 	sub.w	r0, r8, r0
 800fb68:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800fb6c:	f340 074f 	sbfx	r7, r0, #1, #16
        if(f->row && rtl) main_pos -= area_get_main_size(&item->coords);
 800fb70:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
 800fb74:	07db      	lsls	r3, r3, #31
 800fb76:	d50b      	bpl.n	800fb90 <flex_update+0x574>
 800fb78:	9b06      	ldr	r3, [sp, #24]
 800fb7a:	2b01      	cmp	r3, #1
 800fb7c:	d108      	bne.n	800fb90 <flex_update+0x574>
 800fb7e:	9b05      	ldr	r3, [sp, #20]
 800fb80:	f106 0014 	add.w	r0, r6, #20
 800fb84:	4798      	blx	r3
 800fb86:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 800fb8a:	1a18      	subs	r0, r3, r0
 800fb8c:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_X);
 800fb90:	f243 020c 	movw	r2, #12300	; 0x300c
 800fb94:	2100      	movs	r1, #0
 800fb96:	4630      	mov	r0, r6
 800fb98:	f7f7 fbe6 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_Y);
 800fb9c:	f243 020d 	movw	r2, #12301	; 0x300d
 800fba0:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_X);
 800fba2:	4681      	mov	r9, r0
    return (lv_coord_t)v.num;
 800fba4:	fa0f fb80 	sxth.w	fp, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_Y);
 800fba8:	4630      	mov	r0, r6
 800fbaa:	f7f7 fbdd 	bl	8007368 <lv_obj_get_style_prop>
        if(LV_COORD_IS_PCT(tr_x)) tr_x = (w * LV_COORD_GET_PCT(tr_x)) / 100;
 800fbae:	f409 49c0 	and.w	r9, r9, #24576	; 0x6000
    return (lv_coord_t)v.num;
 800fbb2:	b203      	sxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_Y);
 800fbb4:	4680      	mov	r8, r0
        lv_coord_t w = lv_obj_get_width(item);
 800fbb6:	4630      	mov	r0, r6
    return (lv_coord_t)v.num;
 800fbb8:	930f      	str	r3, [sp, #60]	; 0x3c
 800fbba:	f7f5 f958 	bl	8004e6e <lv_obj_get_width>
 800fbbe:	900e      	str	r0, [sp, #56]	; 0x38
        lv_coord_t h = lv_obj_get_height(item);
 800fbc0:	4630      	mov	r0, r6
 800fbc2:	f7f5 f95a 	bl	8004e7a <lv_obj_get_height>
        if(LV_COORD_IS_PCT(tr_x)) tr_x = (w * LV_COORD_GET_PCT(tr_x)) / 100;
 800fbc6:	f5b9 5f00 	cmp.w	r9, #8192	; 0x2000
 800fbca:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800fbce:	d111      	bne.n	800fbf4 <flex_update+0x5d8>
 800fbd0:	f42b 41c0 	bic.w	r1, fp, #24576	; 0x6000
 800fbd4:	f5b1 6ffa 	cmp.w	r1, #2000	; 0x7d0
 800fbd8:	dc0c      	bgt.n	800fbf4 <flex_update+0x5d8>
 800fbda:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 800fbde:	468b      	mov	fp, r1
 800fbe0:	bfc8      	it	gt
 800fbe2:	f5c1 7b7a 	rsbgt	fp, r1, #1000	; 0x3e8
 800fbe6:	fb0b fb02 	mul.w	fp, fp, r2
 800fbea:	2264      	movs	r2, #100	; 0x64
 800fbec:	fb9b fbf2 	sdiv	fp, fp, r2
 800fbf0:	fa0f fb8b 	sxth.w	fp, fp
        if(LV_COORD_IS_PCT(tr_y)) tr_y = (h * LV_COORD_GET_PCT(tr_y)) / 100;
 800fbf4:	f408 48c0 	and.w	r8, r8, #24576	; 0x6000
 800fbf8:	f5b8 5f00 	cmp.w	r8, #8192	; 0x2000
 800fbfc:	d10f      	bne.n	800fc1e <flex_update+0x602>
 800fbfe:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 800fc02:	f5b2 6ffa 	cmp.w	r2, #2000	; 0x7d0
 800fc06:	dc0a      	bgt.n	800fc1e <flex_update+0x602>
 800fc08:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 800fc0c:	f04f 0364 	mov.w	r3, #100	; 0x64
 800fc10:	bfc8      	it	gt
 800fc12:	f5c2 727a 	rsbgt	r2, r2, #1000	; 0x3e8
 800fc16:	4350      	muls	r0, r2
 800fc18:	fb90 f3f3 	sdiv	r3, r0, r3
 800fc1c:	b21b      	sxth	r3, r3
        lv_coord_t diff_x = abs_x - item->coords.x1 + tr_x;
 800fc1e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800fc20:	8ab1      	ldrh	r1, [r6, #20]
        diff_x += f->row ? main_pos : cross_pos;
 800fc22:	f89d 0053 	ldrb.w	r0, [sp, #83]	; 0x53
        lv_coord_t diff_x = abs_x - item->coords.x1 + tr_x;
 800fc26:	1a51      	subs	r1, r2, r1
        lv_coord_t diff_y = abs_y - item->coords.y1 + tr_y;
 800fc28:	8af2      	ldrh	r2, [r6, #22]
        diff_x += f->row ? main_pos : cross_pos;
 800fc2a:	f010 0001 	ands.w	r0, r0, #1
        lv_coord_t diff_x = abs_x - item->coords.x1 + tr_x;
 800fc2e:	448b      	add	fp, r1
        lv_coord_t diff_y = abs_y - item->coords.y1 + tr_y;
 800fc30:	990c      	ldr	r1, [sp, #48]	; 0x30
        lv_coord_t diff_x = abs_x - item->coords.x1 + tr_x;
 800fc32:	fa1f fb8b 	uxth.w	fp, fp
        lv_coord_t diff_y = abs_y - item->coords.y1 + tr_y;
 800fc36:	eba1 0202 	sub.w	r2, r1, r2
        diff_x += f->row ? main_pos : cross_pos;
 800fc3a:	bf14      	ite	ne
 800fc3c:	f8bd 104c 	ldrhne.w	r1, [sp, #76]	; 0x4c
 800fc40:	b2b9      	uxtheq	r1, r7
        lv_coord_t diff_y = abs_y - item->coords.y1 + tr_y;
 800fc42:	4413      	add	r3, r2
        diff_x += f->row ? main_pos : cross_pos;
 800fc44:	448b      	add	fp, r1
        lv_coord_t diff_y = abs_y - item->coords.y1 + tr_y;
 800fc46:	b29b      	uxth	r3, r3
        diff_x += f->row ? main_pos : cross_pos;
 800fc48:	fa1f fb8b 	uxth.w	fp, fp
        diff_y += f->row ? cross_pos : main_pos;
 800fc4c:	2800      	cmp	r0, #0
 800fc4e:	d049      	beq.n	800fce4 <flex_update+0x6c8>
 800fc50:	b2bf      	uxth	r7, r7
 800fc52:	441f      	add	r7, r3
 800fc54:	b2bf      	uxth	r7, r7
        if(diff_x || diff_y) {
 800fc56:	ea5b 0307 	orrs.w	r3, fp, r7
 800fc5a:	d018      	beq.n	800fc8e <flex_update+0x672>
            lv_obj_invalidate(item);
 800fc5c:	4630      	mov	r0, r6
 800fc5e:	f7f5 fa5b 	bl	8005118 <lv_obj_invalidate>
            item->coords.x1 += diff_x;
 800fc62:	8ab3      	ldrh	r3, [r6, #20]
            lv_obj_invalidate(item);
 800fc64:	4630      	mov	r0, r6
            item->coords.x1 += diff_x;
 800fc66:	445b      	add	r3, fp
 800fc68:	82b3      	strh	r3, [r6, #20]
            item->coords.x2 += diff_x;
 800fc6a:	8b33      	ldrh	r3, [r6, #24]
 800fc6c:	445b      	add	r3, fp
 800fc6e:	8333      	strh	r3, [r6, #24]
            item->coords.y1 += diff_y;
 800fc70:	8af3      	ldrh	r3, [r6, #22]
 800fc72:	443b      	add	r3, r7
 800fc74:	82f3      	strh	r3, [r6, #22]
            item->coords.y2 += diff_y;
 800fc76:	8b73      	ldrh	r3, [r6, #26]
 800fc78:	443b      	add	r3, r7
 800fc7a:	8373      	strh	r3, [r6, #26]
            lv_obj_invalidate(item);
 800fc7c:	f7f5 fa4c 	bl	8005118 <lv_obj_invalidate>
            lv_obj_move_children_by(item, diff_x, diff_y, true);
 800fc80:	2301      	movs	r3, #1
 800fc82:	b23a      	sxth	r2, r7
 800fc84:	4630      	mov	r0, r6
 800fc86:	fa0f f18b 	sxth.w	r1, fp
 800fc8a:	f7f5 f99c 	bl	8004fc6 <lv_obj_move_children_by>
        if(!(f->row && rtl)) main_pos += area_get_main_size(&item->coords) + item_gap + place_gap;
 800fc8e:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
 800fc92:	07df      	lsls	r7, r3, #31
 800fc94:	d502      	bpl.n	800fc9c <flex_update+0x680>
 800fc96:	9b06      	ldr	r3, [sp, #24]
 800fc98:	2b01      	cmp	r3, #1
 800fc9a:	d026      	beq.n	800fcea <flex_update+0x6ce>
 800fc9c:	9b05      	ldr	r3, [sp, #20]
 800fc9e:	f106 0014 	add.w	r0, r6, #20
 800fca2:	4798      	blx	r3
 800fca4:	9b02      	ldr	r3, [sp, #8]
 800fca6:	4418      	add	r0, r3
 800fca8:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 800fcac:	4418      	add	r0, r3
 800fcae:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 800fcb2:	4418      	add	r0, r3
 800fcb4:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
 800fcb8:	e6db      	b.n	800fa72 <flex_update+0x456>
            for(i = 0; i < t->grow_item_cnt; i++) {
 800fcba:	3001      	adds	r0, #1
 800fcbc:	e6f0      	b.n	800faa0 <flex_update+0x484>
            item->h_layout = 0;
 800fcbe:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
 800fcc2:	f023 0306 	bic.w	r3, r3, #6
 800fcc6:	f886 3023 	strb.w	r3, [r6, #35]	; 0x23
 800fcca:	e73a      	b.n	800fb42 <flex_update+0x526>
            cross_pos = t->track_cross_size - area_get_cross_size(&item->coords);
 800fccc:	f8bd 8060 	ldrh.w	r8, [sp, #96]	; 0x60
 800fcd0:	f106 0014 	add.w	r0, r6, #20
 800fcd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fcd6:	4798      	blx	r3
 800fcd8:	eba8 0000 	sub.w	r0, r8, r0
 800fcdc:	b207      	sxth	r7, r0
            break;
 800fcde:	e747      	b.n	800fb70 <flex_update+0x554>
        switch(f->cross_place) {
 800fce0:	2700      	movs	r7, #0
 800fce2:	e745      	b.n	800fb70 <flex_update+0x554>
        diff_y += f->row ? cross_pos : main_pos;
 800fce4:	f8bd 704c 	ldrh.w	r7, [sp, #76]	; 0x4c
 800fce8:	e7b3      	b.n	800fc52 <flex_update+0x636>
        else main_pos -= item_gap + place_gap;
 800fcea:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 800fcee:	f8bd 204e 	ldrh.w	r2, [sp, #78]	; 0x4e
 800fcf2:	1a9b      	subs	r3, r3, r2
 800fcf4:	9a02      	ldr	r2, [sp, #8]
 800fcf6:	1a9b      	subs	r3, r3, r2
 800fcf8:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
 800fcfc:	e6b9      	b.n	800fa72 <flex_update+0x456>
            *cross_pos += t.track_cross_size + gap + track_gap;
 800fcfe:	f8bd 2060 	ldrh.w	r2, [sp, #96]	; 0x60
 800fd02:	f8bd 104a 	ldrh.w	r1, [sp, #74]	; 0x4a
 800fd06:	440a      	add	r2, r1
 800fd08:	4413      	add	r3, r2
 800fd0a:	882a      	ldrh	r2, [r5, #0]
 800fd0c:	4413      	add	r3, r2
 800fd0e:	e66f      	b.n	800f9f0 <flex_update+0x3d4>
    if(rtl && !f.row) {
 800fd10:	9b03      	ldr	r3, [sp, #12]
 800fd12:	2b01      	cmp	r3, #1
 800fd14:	f43f ad4b 	beq.w	800f7ae <flex_update+0x192>
 800fd18:	e57c      	b.n	800f814 <flex_update+0x1f8>
 800fd1a:	bf00      	nop

0800fd1c <lv_flex_init>:
{
 800fd1c:	b508      	push	{r3, lr}
    LV_LAYOUT_FLEX = lv_layout_register(flex_update, NULL);
 800fd1e:	2100      	movs	r1, #0
 800fd20:	480d      	ldr	r0, [pc, #52]	; (800fd58 <lv_flex_init+0x3c>)
 800fd22:	f7f5 f825 	bl	8004d70 <lv_layout_register>
 800fd26:	4b0d      	ldr	r3, [pc, #52]	; (800fd5c <lv_flex_init+0x40>)
 800fd28:	6018      	str	r0, [r3, #0]
    LV_STYLE_FLEX_FLOW = lv_style_register_prop();
 800fd2a:	f008 fb31 	bl	8018390 <lv_style_register_prop>
 800fd2e:	4b0c      	ldr	r3, [pc, #48]	; (800fd60 <lv_flex_init+0x44>)
 800fd30:	8018      	strh	r0, [r3, #0]
    LV_STYLE_FLEX_MAIN_PLACE = lv_style_register_prop() | LV_STYLE_PROP_LAYOUT_REFR;
 800fd32:	f008 fb2d 	bl	8018390 <lv_style_register_prop>
 800fd36:	4b0b      	ldr	r3, [pc, #44]	; (800fd64 <lv_flex_init+0x48>)
 800fd38:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 800fd3c:	8018      	strh	r0, [r3, #0]
    LV_STYLE_FLEX_CROSS_PLACE = lv_style_register_prop() | LV_STYLE_PROP_LAYOUT_REFR;
 800fd3e:	f008 fb27 	bl	8018390 <lv_style_register_prop>
 800fd42:	4b09      	ldr	r3, [pc, #36]	; (800fd68 <lv_flex_init+0x4c>)
 800fd44:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 800fd48:	8018      	strh	r0, [r3, #0]
    LV_STYLE_FLEX_TRACK_PLACE = lv_style_register_prop() | LV_STYLE_PROP_LAYOUT_REFR;
 800fd4a:	f008 fb21 	bl	8018390 <lv_style_register_prop>
 800fd4e:	4b07      	ldr	r3, [pc, #28]	; (800fd6c <lv_flex_init+0x50>)
 800fd50:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 800fd54:	8018      	strh	r0, [r3, #0]
}
 800fd56:	bd08      	pop	{r3, pc}
 800fd58:	0800f61d 	.word	0x0800f61d
 800fd5c:	2000add0 	.word	0x2000add0
 800fd60:	2000adc8 	.word	0x2000adc8
 800fd64:	2000adcc 	.word	0x2000adcc
 800fd68:	2000adc4 	.word	0x2000adc4
 800fd6c:	2000adc6 	.word	0x2000adc6

0800fd70 <lv_obj_set_flex_flow>:
{
 800fd70:	460a      	mov	r2, r1
    lv_obj_set_local_style_prop(obj, LV_STYLE_FLEX_FLOW, v, selector);
 800fd72:	4908      	ldr	r1, [pc, #32]	; (800fd94 <lv_obj_set_flex_flow+0x24>)
 800fd74:	2300      	movs	r3, #0
 800fd76:	8809      	ldrh	r1, [r1, #0]
 800fd78:	b510      	push	{r4, lr}
 800fd7a:	4604      	mov	r4, r0
 800fd7c:	f7f7 fbd8 	bl	8007530 <lv_obj_set_local_style_prop>
static inline void lv_obj_set_style_layout(struct _lv_obj_t * obj, uint16_t value, lv_style_selector_t selector)
{
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_LAYOUT, v, selector);
 800fd80:	4a05      	ldr	r2, [pc, #20]	; (800fd98 <lv_obj_set_flex_flow+0x28>)
 800fd82:	2300      	movs	r3, #0
 800fd84:	4620      	mov	r0, r4
 800fd86:	f241 0169 	movw	r1, #4201	; 0x1069
 800fd8a:	8812      	ldrh	r2, [r2, #0]
}
 800fd8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fd90:	f7f7 bbce 	b.w	8007530 <lv_obj_set_local_style_prop>
 800fd94:	2000adc8 	.word	0x2000adc8
 800fd98:	2000add0 	.word	0x2000add0

0800fd9c <lv_obj_set_flex_align>:
{
 800fd9c:	b570      	push	{r4, r5, r6, lr}
 800fd9e:	4616      	mov	r6, r2
    lv_obj_set_local_style_prop(obj, LV_STYLE_FLEX_MAIN_PLACE, v, selector);
 800fda0:	460a      	mov	r2, r1
 800fda2:	490f      	ldr	r1, [pc, #60]	; (800fde0 <lv_obj_set_flex_align+0x44>)
 800fda4:	461d      	mov	r5, r3
 800fda6:	2300      	movs	r3, #0
 800fda8:	4604      	mov	r4, r0
 800fdaa:	8809      	ldrh	r1, [r1, #0]
 800fdac:	f7f7 fbc0 	bl	8007530 <lv_obj_set_local_style_prop>
    lv_obj_set_local_style_prop(obj, LV_STYLE_FLEX_CROSS_PLACE, v, selector);
 800fdb0:	490c      	ldr	r1, [pc, #48]	; (800fde4 <lv_obj_set_flex_align+0x48>)
 800fdb2:	4632      	mov	r2, r6
 800fdb4:	4620      	mov	r0, r4
 800fdb6:	2300      	movs	r3, #0
 800fdb8:	8809      	ldrh	r1, [r1, #0]
 800fdba:	f7f7 fbb9 	bl	8007530 <lv_obj_set_local_style_prop>
    lv_obj_set_local_style_prop(obj, LV_STYLE_FLEX_TRACK_PLACE, v, selector);
 800fdbe:	490a      	ldr	r1, [pc, #40]	; (800fde8 <lv_obj_set_flex_align+0x4c>)
 800fdc0:	462a      	mov	r2, r5
 800fdc2:	4620      	mov	r0, r4
 800fdc4:	2300      	movs	r3, #0
 800fdc6:	8809      	ldrh	r1, [r1, #0]
 800fdc8:	f7f7 fbb2 	bl	8007530 <lv_obj_set_local_style_prop>
 800fdcc:	4a07      	ldr	r2, [pc, #28]	; (800fdec <lv_obj_set_flex_align+0x50>)
 800fdce:	4620      	mov	r0, r4
 800fdd0:	2300      	movs	r3, #0
 800fdd2:	8812      	ldrh	r2, [r2, #0]
 800fdd4:	f241 0169 	movw	r1, #4201	; 0x1069
}
 800fdd8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fddc:	f7f7 bba8 	b.w	8007530 <lv_obj_set_local_style_prop>
 800fde0:	2000adcc 	.word	0x2000adcc
 800fde4:	2000adc4 	.word	0x2000adc4
 800fde8:	2000adc6 	.word	0x2000adc6
 800fdec:	2000add0 	.word	0x2000add0

0800fdf0 <lv_obj_set_flex_grow>:
{
 800fdf0:	460a      	mov	r2, r1
    lv_obj_set_local_style_prop(obj, LV_STYLE_FLEX_GROW, v, selector);
 800fdf2:	4902      	ldr	r1, [pc, #8]	; (800fdfc <lv_obj_set_flex_grow+0xc>)
 800fdf4:	2300      	movs	r3, #0
 800fdf6:	8809      	ldrh	r1, [r1, #0]
 800fdf8:	f7f7 bb9a 	b.w	8007530 <lv_obj_set_local_style_prop>
 800fdfc:	2000adca 	.word	0x2000adca

0800fe00 <grid_align>:
 * @param size_array array with the track sizes
 * @param pos_array write the positions of the tracks here
 * @return the total size of the grid
 */
static lv_coord_t grid_align(lv_coord_t cont_size,  bool auto_size, uint8_t align, lv_coord_t gap, uint32_t track_num, lv_coord_t * size_array, lv_coord_t * pos_array, bool reverse)
{
 800fe00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fe04:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800fe06:	4605      	mov	r5, r0
 800fe08:	f89d c028 	ldrb.w	ip, [sp, #40]	; 0x28
 800fe0c:	e9dd 6707 	ldrd	r6, r7, [sp, #28]
    lv_coord_t grid_size = 0;
    uint32_t i;

    if(auto_size) {
 800fe10:	b111      	cbz	r1, 800fe18 <grid_align+0x18>
        pos_array[0] = 0;
 800fe12:	2200      	movs	r2, #0
            pos_array[0] = 0;
            gap = (lv_coord_t)(cont_size - grid_size) / (lv_coord_t)(track_num - 1);
            break;
        case LV_GRID_ALIGN_SPACE_AROUND:
            gap = (lv_coord_t)(cont_size - grid_size) / (lv_coord_t)(track_num);
            pos_array[0] = gap / 2;
 800fe14:	8022      	strh	r2, [r4, #0]
            break;
 800fe16:	e021      	b.n	800fe5c <grid_align+0x5c>
        if(align == LV_GRID_ALIGN_SPACE_AROUND || align == LV_GRID_ALIGN_SPACE_BETWEEN || align == LV_GRID_ALIGN_SPACE_EVENLY) {
 800fe18:	1f10      	subs	r0, r2, #4
 800fe1a:	b2c0      	uxtb	r0, r0
 800fe1c:	2802      	cmp	r0, #2
 800fe1e:	d803      	bhi.n	800fe28 <grid_align+0x28>
            gap = 0;
 800fe20:	2e01      	cmp	r6, #1
 800fe22:	460b      	mov	r3, r1
 800fe24:	bf08      	it	eq
 800fe26:	2201      	moveq	r2, #1
        for(i = 0; i < track_num; i++) {
 800fe28:	46be      	mov	lr, r7
 800fe2a:	eb07 0846 	add.w	r8, r7, r6, lsl #1
    lv_coord_t grid_size = 0;
 800fe2e:	2000      	movs	r0, #0
 800fe30:	b299      	uxth	r1, r3
        for(i = 0; i < track_num; i++) {
 800fe32:	45f0      	cmp	r8, lr
 800fe34:	b280      	uxth	r0, r0
 800fe36:	d109      	bne.n	800fe4c <grid_align+0x4c>
        switch(align) {
 800fe38:	f04f 0e00 	mov.w	lr, #0
 800fe3c:	2a06      	cmp	r2, #6
 800fe3e:	d80d      	bhi.n	800fe5c <grid_align+0x5c>
 800fe40:	e8df f002 	tbb	[pc, r2]
 800fe44:	0c28200a 	.word	0x0c28200a
 800fe48:	3643      	.short	0x3643
 800fe4a:	2b          	.byte	0x2b
 800fe4b:	00          	.byte	0x00
            grid_size += size_array[i] + gap;
 800fe4c:	f93e 9b02 	ldrsh.w	r9, [lr], #2
 800fe50:	4408      	add	r0, r1
 800fe52:	4448      	add	r0, r9
 800fe54:	b200      	sxth	r0, r0
        for(i = 0; i < track_num; i++) {
 800fe56:	e7ec      	b.n	800fe32 <grid_align+0x32>
            pos_array[0] = 0;
 800fe58:	f8a4 e000 	strh.w	lr, [r4]

        }
    }

    /*Set the position of all tracks from the start position, gaps and track sizes*/
    for(i = 0; i < track_num - 1; i++) {
 800fe5c:	2200      	movs	r2, #0
 800fe5e:	1e70      	subs	r0, r6, #1
 800fe60:	4290      	cmp	r0, r2
 800fe62:	d83c      	bhi.n	800fede <grid_align+0xde>
        pos_array[i + 1] = pos_array[i] + size_array[i] + gap;
    }

    lv_coord_t total_gird_size = pos_array[track_num - 1] + size_array[track_num - 1] - pos_array[0];
 800fe64:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800fe68:	3b01      	subs	r3, #1
 800fe6a:	f834 0013 	ldrh.w	r0, [r4, r3, lsl #1]
 800fe6e:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 800fe72:	4418      	add	r0, r3
 800fe74:	8823      	ldrh	r3, [r4, #0]
 800fe76:	1ac0      	subs	r0, r0, r3
 800fe78:	b200      	sxth	r0, r0

    if(reverse) {
 800fe7a:	f1bc 0f00 	cmp.w	ip, #0
 800fe7e:	d144      	bne.n	800ff0a <grid_align+0x10a>

    }

    /*Return the full size of the grid*/
    return total_gird_size;
}
 800fe80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        grid_size -= gap;
 800fe84:	1a41      	subs	r1, r0, r1
            pos_array[0] = (cont_size - grid_size) / 2;
 800fe86:	b209      	sxth	r1, r1
 800fe88:	1a69      	subs	r1, r5, r1
 800fe8a:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 800fe8e:	1049      	asrs	r1, r1, #1
            pos_array[0] = cont_size - grid_size;
 800fe90:	8021      	strh	r1, [r4, #0]
            break;
 800fe92:	e7e3      	b.n	800fe5c <grid_align+0x5c>
            pos_array[0] = cont_size - grid_size;
 800fe94:	4429      	add	r1, r5
 800fe96:	1a09      	subs	r1, r1, r0
 800fe98:	e7fa      	b.n	800fe90 <grid_align+0x90>
            gap = (lv_coord_t)(cont_size - grid_size) / (lv_coord_t)(track_num - 1);
 800fe9a:	194b      	adds	r3, r1, r5
 800fe9c:	1e71      	subs	r1, r6, #1
            pos_array[0] = 0;
 800fe9e:	f8a4 e000 	strh.w	lr, [r4]
            gap = (lv_coord_t)(cont_size - grid_size) / (lv_coord_t)(track_num - 1);
 800fea2:	1a1b      	subs	r3, r3, r0
 800fea4:	b209      	sxth	r1, r1
 800fea6:	b21b      	sxth	r3, r3
 800fea8:	fb93 f3f1 	sdiv	r3, r3, r1
 800feac:	b21b      	sxth	r3, r3
            break;
 800feae:	e7d5      	b.n	800fe5c <grid_align+0x5c>
            gap = (lv_coord_t)(cont_size - grid_size) / (lv_coord_t)(track_num);
 800feb0:	194a      	adds	r2, r1, r5
 800feb2:	b233      	sxth	r3, r6
 800feb4:	1a12      	subs	r2, r2, r0
 800feb6:	b212      	sxth	r2, r2
 800feb8:	fb92 f2f3 	sdiv	r2, r2, r3
            pos_array[0] = gap / 2;
 800febc:	f3c2 31c0 	ubfx	r1, r2, #15, #1
            gap = (lv_coord_t)(cont_size - grid_size) / (lv_coord_t)(track_num);
 800fec0:	b213      	sxth	r3, r2
            pos_array[0] = gap / 2;
 800fec2:	fa01 f282 	sxtah	r2, r1, r2
 800fec6:	1052      	asrs	r2, r2, #1
 800fec8:	e7a4      	b.n	800fe14 <grid_align+0x14>
            gap = (lv_coord_t)(cont_size - grid_size) / (lv_coord_t)(track_num + 1);
 800feca:	194b      	adds	r3, r1, r5
 800fecc:	1c71      	adds	r1, r6, #1
 800fece:	1a1b      	subs	r3, r3, r0
 800fed0:	b209      	sxth	r1, r1
 800fed2:	b21b      	sxth	r3, r3
 800fed4:	fb93 f3f1 	sdiv	r3, r3, r1
 800fed8:	b21b      	sxth	r3, r3
            pos_array[0] = gap;
 800feda:	8023      	strh	r3, [r4, #0]
            break;
 800fedc:	e7be      	b.n	800fe5c <grid_align+0x5c>
        pos_array[i + 1] = pos_array[i] + size_array[i] + gap;
 800fede:	f834 1012 	ldrh.w	r1, [r4, r2, lsl #1]
 800fee2:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 800fee6:	3201      	adds	r2, #1
 800fee8:	4471      	add	r1, lr
 800feea:	4419      	add	r1, r3
 800feec:	f824 1012 	strh.w	r1, [r4, r2, lsl #1]
    for(i = 0; i < track_num - 1; i++) {
 800fef0:	e7b6      	b.n	800fe60 <grid_align+0x60>
            pos_array[i] = cont_size - pos_array[i] - size_array[i];
 800fef2:	f834 2013 	ldrh.w	r2, [r4, r3, lsl #1]
 800fef6:	f837 1013 	ldrh.w	r1, [r7, r3, lsl #1]
 800fefa:	440a      	add	r2, r1
 800fefc:	1aaa      	subs	r2, r5, r2
 800fefe:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
        for(i = 0; i < track_num; i++) {
 800ff02:	3301      	adds	r3, #1
 800ff04:	42b3      	cmp	r3, r6
 800ff06:	d1f4      	bne.n	800fef2 <grid_align+0xf2>
 800ff08:	e7ba      	b.n	800fe80 <grid_align+0x80>
 800ff0a:	2300      	movs	r3, #0
 800ff0c:	e7fa      	b.n	800ff04 <grid_align+0x104>
	...

0800ff10 <grid_update>:
{
 800ff10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return (const lv_coord_t *)v.ptr;
}

static inline const lv_coord_t * lv_obj_get_style_grid_column_dsc_array(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_COLUMN_DSC_ARRAY);
 800ff14:	4fcc      	ldr	r7, [pc, #816]	; (8010248 <grid_update+0x338>)
 800ff16:	b099      	sub	sp, #100	; 0x64
 800ff18:	4604      	mov	r4, r0
 800ff1a:	2100      	movs	r1, #0
 800ff1c:	883a      	ldrh	r2, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_ROW_DSC_ARRAY);
 800ff1e:	4ecb      	ldr	r6, [pc, #812]	; (801024c <grid_update+0x33c>)
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_COLUMN_DSC_ARRAY);
 800ff20:	f7f7 fa22 	bl	8007368 <lv_obj_get_style_prop>
 800ff24:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_ROW_DSC_ARRAY);
 800ff26:	2100      	movs	r1, #0
 800ff28:	8832      	ldrh	r2, [r6, #0]
 800ff2a:	4620      	mov	r0, r4
 800ff2c:	f7f7 fa1c 	bl	8007368 <lv_obj_get_style_prop>
    if(col_templ == NULL || row_templ == NULL) return;
 800ff30:	9705      	str	r7, [sp, #20]
 800ff32:	2d00      	cmp	r5, #0
 800ff34:	d06a      	beq.n	801000c <grid_update+0xfc>
 800ff36:	2800      	cmp	r0, #0
 800ff38:	d068      	beq.n	801000c <grid_update+0xfc>
    if(lv_obj_get_child(cont, 0) == NULL) {
 800ff3a:	2100      	movs	r1, #0
 800ff3c:	4620      	mov	r0, r4
 800ff3e:	f7f7 fd60 	bl	8007a02 <lv_obj_get_child>
 800ff42:	2800      	cmp	r0, #0
 800ff44:	d165      	bne.n	8010012 <grid_update+0x102>
        lv_memset_00(calc_out, sizeof(_lv_grid_calc_t));
 800ff46:	211c      	movs	r1, #28
 800ff48:	a811      	add	r0, sp, #68	; 0x44
 800ff4a:	f007 fdf3 	bl	8017b34 <lv_memset_00>
    lv_memset_00(&hint, sizeof(hint));
 800ff4e:	210c      	movs	r1, #12
 800ff50:	a80e      	add	r0, sp, #56	; 0x38
 800ff52:	f007 fdef 	bl	8017b34 <lv_memset_00>
    return (lv_opa_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_border_width(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 800ff56:	f241 0232 	movw	r2, #4146	; 0x1032
 800ff5a:	2100      	movs	r1, #0
 800ff5c:	4620      	mov	r0, r4
 800ff5e:	f7f7 fa03 	bl	8007368 <lv_obj_get_style_prop>
 800ff62:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 800ff64:	f241 0212 	movw	r2, #4114	; 0x1012
 800ff68:	2100      	movs	r1, #0
 800ff6a:	4620      	mov	r0, r4
    lv_coord_t pad_left = lv_obj_get_style_pad_left(cont, LV_PART_MAIN) + border_widt;
 800ff6c:	b2ae      	uxth	r6, r5
 800ff6e:	f7f7 f9fb 	bl	8007368 <lv_obj_get_style_prop>
 800ff72:	fa10 f085 	uxtah	r0, r0, r5
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 800ff76:	f241 0210 	movw	r2, #4112	; 0x1010
 800ff7a:	2100      	movs	r1, #0
 800ff7c:	b285      	uxth	r5, r0
 800ff7e:	4620      	mov	r0, r4
 800ff80:	f7f7 f9f2 	bl	8007368 <lv_obj_get_style_prop>
    lv_coord_t pad_top = lv_obj_get_style_pad_top(cont, LV_PART_MAIN) + border_widt;
 800ff84:	4406      	add	r6, r0
    hint.grid_abs.x = pad_left + cont->coords.x1 - lv_obj_get_scroll_x(cont);
 800ff86:	8aa0      	ldrh	r0, [r4, #20]
    lv_coord_t pad_top = lv_obj_get_style_pad_top(cont, LV_PART_MAIN) + border_widt;
 800ff88:	b2b6      	uxth	r6, r6
    hint.grid_abs.x = pad_left + cont->coords.x1 - lv_obj_get_scroll_x(cont);
 800ff8a:	4405      	add	r5, r0
 800ff8c:	4620      	mov	r0, r4
 800ff8e:	f7f5 ff9d 	bl	8005ecc <lv_obj_get_scroll_x>
 800ff92:	b2ad      	uxth	r5, r5
 800ff94:	1a28      	subs	r0, r5, r0
 800ff96:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
    hint.grid_abs.y = pad_top + cont->coords.y1 - lv_obj_get_scroll_y(cont);
 800ff9a:	8ae0      	ldrh	r0, [r4, #22]
 800ff9c:	4406      	add	r6, r0
 800ff9e:	4620      	mov	r0, r4
 800ffa0:	f7f5 ffa6 	bl	8005ef0 <lv_obj_get_scroll_y>
    for(i = 0; i < cont->spec_attr->child_cnt; i++) {
 800ffa4:	2300      	movs	r3, #0
    hint.grid_abs.y = pad_top + cont->coords.y1 - lv_obj_get_scroll_y(cont);
 800ffa6:	b2b6      	uxth	r6, r6
 800ffa8:	1a30      	subs	r0, r6, r0
 800ffaa:	f8ad 0042 	strh.w	r0, [sp, #66]	; 0x42
    for(i = 0; i < cont->spec_attr->child_cnt; i++) {
 800ffae:	9305      	str	r3, [sp, #20]
 800ffb0:	68a3      	ldr	r3, [r4, #8]
 800ffb2:	9905      	ldr	r1, [sp, #20]
 800ffb4:	685a      	ldr	r2, [r3, #4]
 800ffb6:	4291      	cmp	r1, r2
 800ffb8:	f0c0 8215 	bcc.w	80103e6 <grid_update+0x4d6>
    lv_mem_buf_release(calc->x);
 800ffbc:	9811      	ldr	r0, [sp, #68]	; 0x44
 800ffbe:	f007 fbc7 	bl	8017750 <lv_mem_buf_release>
    lv_mem_buf_release(calc->y);
 800ffc2:	9812      	ldr	r0, [sp, #72]	; 0x48
 800ffc4:	f007 fbc4 	bl	8017750 <lv_mem_buf_release>
    lv_mem_buf_release(calc->w);
 800ffc8:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800ffca:	f007 fbc1 	bl	8017750 <lv_mem_buf_release>
    lv_mem_buf_release(calc->h);
 800ffce:	9814      	ldr	r0, [sp, #80]	; 0x50
 800ffd0:	f007 fbbe 	bl	8017750 <lv_mem_buf_release>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 800ffd4:	f241 0201 	movw	r2, #4097	; 0x1001
 800ffd8:	2100      	movs	r1, #0
 800ffda:	4620      	mov	r0, r4
 800ffdc:	f7f7 f9c4 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 800ffe0:	f241 0204 	movw	r2, #4100	; 0x1004
    return (lv_coord_t)v.num;
 800ffe4:	b205      	sxth	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 800ffe6:	2100      	movs	r1, #0
 800ffe8:	4620      	mov	r0, r4
 800ffea:	f7f7 f9bd 	bl	8007368 <lv_obj_get_style_prop>
    if(w_set == LV_SIZE_CONTENT || h_set == LV_SIZE_CONTENT) {
 800ffee:	f242 73d1 	movw	r3, #10193	; 0x27d1
    return (lv_coord_t)v.num;
 800fff2:	b200      	sxth	r0, r0
 800fff4:	429d      	cmp	r5, r3
 800fff6:	d001      	beq.n	800fffc <grid_update+0xec>
 800fff8:	4298      	cmp	r0, r3
 800fffa:	d102      	bne.n	8010002 <grid_update+0xf2>
        lv_obj_refr_size(cont);
 800fffc:	4620      	mov	r0, r4
 800fffe:	f7f5 fb01 	bl	8005604 <lv_obj_refr_size>
    lv_event_send(cont, LV_EVENT_LAYOUT_CHANGED, NULL);
 8010002:	2200      	movs	r2, #0
 8010004:	2125      	movs	r1, #37	; 0x25
 8010006:	4620      	mov	r0, r4
 8010008:	f7f1 ff5e 	bl	8001ec8 <lv_event_send>
}
 801000c:	b019      	add	sp, #100	; 0x64
 801000e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010012:	8832      	ldrh	r2, [r6, #0]
 8010014:	2100      	movs	r1, #0
 8010016:	4620      	mov	r0, r4
 8010018:	f7f7 f9a6 	bl	8007368 <lv_obj_get_style_prop>

static uint32_t count_tracks(const lv_coord_t * templ)
{
    uint32_t i;
    for(i = 0; templ[i] != LV_COORD_MAX; i++);
 801001c:	2300      	movs	r3, #0
 801001e:	4605      	mov	r5, r0
 8010020:	f935 2013 	ldrsh.w	r2, [r5, r3, lsl #1]
 8010024:	0058      	lsls	r0, r3, #1
 8010026:	f5b2 4fc0 	cmp.w	r2, #24576	; 0x6000
 801002a:	f040 80fc 	bne.w	8010226 <grid_update+0x316>
    c->row_num = count_tracks(row_templ);
 801002e:	9316      	str	r3, [sp, #88]	; 0x58
    c->y = lv_mem_buf_get(sizeof(lv_coord_t) * c->row_num);
 8010030:	f007 fd32 	bl	8017a98 <lv_mem_buf_get>
 8010034:	9012      	str	r0, [sp, #72]	; 0x48
    for(i = 0; i < c->row_num; i++) {
 8010036:	2600      	movs	r6, #0
    c->h = lv_mem_buf_get(sizeof(lv_coord_t) * c->row_num);
 8010038:	9816      	ldr	r0, [sp, #88]	; 0x58
 801003a:	0040      	lsls	r0, r0, #1
 801003c:	f007 fd2c 	bl	8017a98 <lv_mem_buf_get>
 8010040:	9014      	str	r0, [sp, #80]	; 0x50
    for(i = 0; i < c->row_num; i++) {
 8010042:	9916      	ldr	r1, [sp, #88]	; 0x58
 8010044:	428e      	cmp	r6, r1
 8010046:	f0c0 80f0 	bcc.w	801022a <grid_update+0x31a>
    lv_coord_t grid_h = 0;
 801004a:	2200      	movs	r2, #0
            c->h[i] = x;
 801004c:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
        if(IS_FR(x)) {
 8010050:	f645 7e9b 	movw	lr, #24475	; 0x5f9b
    uint32_t row_fr_cnt = 0;
 8010054:	4616      	mov	r6, r2
    for(i = 0; i < c->row_num; i++) {
 8010056:	4610      	mov	r0, r2
 8010058:	4281      	cmp	r1, r0
 801005a:	b297      	uxth	r7, r2
 801005c:	f040 8136 	bne.w	80102cc <grid_update+0x3bc>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_ROW);
 8010060:	f241 0214 	movw	r2, #4116	; 0x1014
 8010064:	2100      	movs	r1, #0
 8010066:	4620      	mov	r0, r4
 8010068:	f7f7 f97e 	bl	8007368 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801006c:	fa0f f880 	sxth.w	r8, r0
    lv_coord_t cont_h = lv_obj_get_content_height(cont) - row_gap * (c->row_num - 1);
 8010070:	4620      	mov	r0, r4
 8010072:	f7f4 ff22 	bl	8004eba <lv_obj_get_content_height>
 8010076:	9916      	ldr	r1, [sp, #88]	; 0x58
    lv_coord_t free_h = cont_h - grid_h;
 8010078:	1bc2      	subs	r2, r0, r7
        if(IS_FR(x)) {
 801007a:	f645 7c9b 	movw	ip, #24475	; 0x5f9b
    lv_coord_t cont_h = lv_obj_get_content_height(cont) - row_gap * (c->row_num - 1);
 801007e:	1e4b      	subs	r3, r1, #1
            c->h[i] = (free_h * f) / row_fr_cnt;
 8010080:	9f14      	ldr	r7, [sp, #80]	; 0x50
    lv_coord_t cont_h = lv_obj_get_content_height(cont) - row_gap * (c->row_num - 1);
 8010082:	fb13 f008 	smulbb	r0, r3, r8
    lv_coord_t free_h = cont_h - grid_h;
 8010086:	1a12      	subs	r2, r2, r0
    for(i = 0; i < c->row_num; i++) {
 8010088:	2000      	movs	r0, #0
    lv_coord_t free_h = cont_h - grid_h;
 801008a:	b212      	sxth	r2, r2
    if(free_h < 0) free_h = 0;
 801008c:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    for(i = 0; i < c->row_num; i++) {
 8010090:	4281      	cmp	r1, r0
 8010092:	f040 812e 	bne.w	80102f2 <grid_update+0x3e2>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_COLUMN_DSC_ARRAY);
 8010096:	9b05      	ldr	r3, [sp, #20]
 8010098:	2100      	movs	r1, #0
 801009a:	4620      	mov	r0, r4
 801009c:	881a      	ldrh	r2, [r3, #0]
 801009e:	f7f7 f963 	bl	8007368 <lv_obj_get_style_prop>
 80100a2:	4605      	mov	r5, r0
    lv_coord_t cont_w = lv_obj_get_content_width(cont);
 80100a4:	4620      	mov	r0, r4
 80100a6:	f7f4 feee 	bl	8004e86 <lv_obj_get_content_width>
    for(i = 0; templ[i] != LV_COORD_MAX; i++);
 80100aa:	2300      	movs	r3, #0
    lv_coord_t cont_w = lv_obj_get_content_width(cont);
 80100ac:	9005      	str	r0, [sp, #20]
    for(i = 0; templ[i] != LV_COORD_MAX; i++);
 80100ae:	f935 2013 	ldrsh.w	r2, [r5, r3, lsl #1]
 80100b2:	0058      	lsls	r0, r3, #1
 80100b4:	f5b2 4fc0 	cmp.w	r2, #24576	; 0x6000
 80100b8:	f040 812a 	bne.w	8010310 <grid_update+0x400>
    c->col_num = count_tracks(col_templ);
 80100bc:	9315      	str	r3, [sp, #84]	; 0x54
    c->x = lv_mem_buf_get(sizeof(lv_coord_t) * c->col_num);
 80100be:	f007 fceb 	bl	8017a98 <lv_mem_buf_get>
 80100c2:	9011      	str	r0, [sp, #68]	; 0x44
    for(i = 0; i < c->col_num; i++) {
 80100c4:	2600      	movs	r6, #0
    c->w = lv_mem_buf_get(sizeof(lv_coord_t) * c->col_num);
 80100c6:	9815      	ldr	r0, [sp, #84]	; 0x54
 80100c8:	0040      	lsls	r0, r0, #1
 80100ca:	f007 fce5 	bl	8017a98 <lv_mem_buf_get>
 80100ce:	9013      	str	r0, [sp, #76]	; 0x4c
    for(i = 0; i < c->col_num; i++) {
 80100d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80100d2:	429e      	cmp	r6, r3
 80100d4:	f0c0 811e 	bcc.w	8010314 <grid_update+0x404>
    lv_coord_t grid_w = 0;
 80100d8:	2100      	movs	r1, #0
            c->w[i] = x;
 80100da:	9a13      	ldr	r2, [sp, #76]	; 0x4c
        if(IS_FR(x)) {
 80100dc:	f645 7e9b 	movw	lr, #24475	; 0x5f9b
    uint32_t col_fr_cnt = 0;
 80100e0:	460e      	mov	r6, r1
    for(i = 0; i < c->col_num; i++) {
 80100e2:	468c      	mov	ip, r1
 80100e4:	4563      	cmp	r3, ip
 80100e6:	b28f      	uxth	r7, r1
 80100e8:	f040 8158 	bne.w	801039c <grid_update+0x48c>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 80100ec:	f241 0215 	movw	r2, #4117	; 0x1015
 80100f0:	2100      	movs	r1, #0
 80100f2:	4620      	mov	r0, r4
        if(IS_FR(x)) {
 80100f4:	f645 789b 	movw	r8, #24475	; 0x5f9b
 80100f8:	f7f7 f936 	bl	8007368 <lv_obj_get_style_prop>
    cont_w -= col_gap * (c->col_num - 1);
 80100fc:	f8dd c054 	ldr.w	ip, [sp, #84]	; 0x54
    int32_t last_fr_i = -1;
 8010100:	f04f 3eff 	mov.w	lr, #4294967295
    cont_w -= col_gap * (c->col_num - 1);
 8010104:	f10c 32ff 	add.w	r2, ip, #4294967295
 8010108:	fb12 f300 	smulbb	r3, r2, r0
 801010c:	9a05      	ldr	r2, [sp, #20]
 801010e:	1ad3      	subs	r3, r2, r3
    int32_t last_fr_x = 0;
 8010110:	2200      	movs	r2, #0
    lv_coord_t free_w = cont_w - grid_w;
 8010112:	1bdb      	subs	r3, r3, r7
    for(i = 0; i < c->col_num; i++) {
 8010114:	4611      	mov	r1, r2
            c->w[i] = (free_w * f) / col_fr_cnt;
 8010116:	9f13      	ldr	r7, [sp, #76]	; 0x4c
    lv_coord_t free_w = cont_w - grid_w;
 8010118:	b21b      	sxth	r3, r3
    if(free_w < 0) free_w = 0;
 801011a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    for(i = 0; i < c->col_num; i++) {
 801011e:	458c      	cmp	ip, r1
 8010120:	f040 8150 	bne.w	80103c4 <grid_update+0x4b4>
    if(last_fr_i >= 0) {
 8010124:	f1be 3fff 	cmp.w	lr, #4294967295
 8010128:	d006      	beq.n	8010138 <grid_update+0x228>
    	c->w[last_fr_i] = free_w - ((free_w * (col_fr_cnt - last_fr_x)) / col_fr_cnt);
 801012a:	1ab2      	subs	r2, r6, r2
 801012c:	435a      	muls	r2, r3
 801012e:	fbb2 f2f6 	udiv	r2, r2, r6
 8010132:	1a9b      	subs	r3, r3, r2
 8010134:	f827 301e 	strh.w	r3, [r7, lr, lsl #1]
 8010138:	f241 0215 	movw	r2, #4117	; 0x1015
 801013c:	2100      	movs	r1, #0
 801013e:	4620      	mov	r0, r4
 8010140:	f7f7 f912 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_ROW);
 8010144:	f241 0214 	movw	r2, #4116	; 0x1014
    return (lv_coord_t)v.num;
 8010148:	fa0f fa80 	sxth.w	sl, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_ROW);
 801014c:	2100      	movs	r1, #0
 801014e:	4620      	mov	r0, r4
 8010150:	f7f7 f90a 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 8010154:	f241 426a 	movw	r2, #5226	; 0x146a
    return (lv_coord_t)v.num;
 8010158:	b207      	sxth	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 801015a:	2100      	movs	r1, #0
 801015c:	4620      	mov	r0, r4
 801015e:	f7f7 f903 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8010162:	f241 0201 	movw	r2, #4097	; 0x1001
    return (lv_base_dir_t)v.num;
 8010166:	fa5f f880 	uxtb.w	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 801016a:	2100      	movs	r1, #0
 801016c:	4620      	mov	r0, r4
    bool rev = lv_obj_get_style_base_dir(cont, LV_PART_MAIN) == LV_BASE_DIR_RTL ? true : false;
 801016e:	f108 33ff 	add.w	r3, r8, #4294967295
 8010172:	f1d3 0800 	rsbs	r8, r3, #0
 8010176:	eb48 0803 	adc.w	r8, r8, r3
 801017a:	f7f7 f8f5 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 801017e:	f241 0204 	movw	r2, #4100	; 0x1004
    return (lv_coord_t)v.num;
 8010182:	b205      	sxth	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 8010184:	2100      	movs	r1, #0
 8010186:	4620      	mov	r0, r4
 8010188:	f7f7 f8ee 	bl	8007368 <lv_obj_get_style_prop>
    bool auto_w = (w_set == LV_SIZE_CONTENT && !cont->w_layout) ? true : false;
 801018c:	f242 73d1 	movw	r3, #10193	; 0x27d1
    return (lv_coord_t)v.num;
 8010190:	fa0f f980 	sxth.w	r9, r0
    lv_coord_t cont_w = lv_obj_get_content_width(cont);
 8010194:	4620      	mov	r0, r4
    bool auto_w = (w_set == LV_SIZE_CONTENT && !cont->w_layout) ? true : false;
 8010196:	429d      	cmp	r5, r3
 8010198:	bf09      	itett	eq
 801019a:	f894 5023 	ldrbeq.w	r5, [r4, #35]	; 0x23
 801019e:	2500      	movne	r5, #0
 80101a0:	f085 0504 	eoreq.w	r5, r5, #4
 80101a4:	f3c5 0580 	ubfxeq	r5, r5, #2, #1
    lv_coord_t cont_w = lv_obj_get_content_width(cont);
 80101a8:	f7f4 fe6d 	bl	8004e86 <lv_obj_get_content_width>
    return (lv_grid_align_t)v.num;
}

static inline lv_grid_align_t lv_obj_get_style_grid_column_align(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_COLUMN_ALIGN);
 80101ac:	4b28      	ldr	r3, [pc, #160]	; (8010250 <grid_update+0x340>)
 80101ae:	4606      	mov	r6, r0
 80101b0:	2100      	movs	r1, #0
 80101b2:	4620      	mov	r0, r4
 80101b4:	881a      	ldrh	r2, [r3, #0]
 80101b6:	f7f7 f8d7 	bl	8007368 <lv_obj_get_style_prop>
    calc_out->grid_w = grid_align(cont_w, auto_w, get_grid_col_align(cont), col_gap, calc_out->col_num, calc_out->w, calc_out->x, rev);
 80101ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80101bc:	4629      	mov	r1, r5
 80101be:	b2c2      	uxtb	r2, r0
 80101c0:	9302      	str	r3, [sp, #8]
 80101c2:	4630      	mov	r0, r6
 80101c4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80101c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80101ca:	9301      	str	r3, [sp, #4]
 80101cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80101ce:	9300      	str	r3, [sp, #0]
 80101d0:	4653      	mov	r3, sl
 80101d2:	f7ff fe15 	bl	800fe00 <grid_align>
    bool auto_h = (h_set == LV_SIZE_CONTENT && !cont->h_layout) ? true : false;
 80101d6:	f242 73d1 	movw	r3, #10193	; 0x27d1
    calc_out->grid_w = grid_align(cont_w, auto_w, get_grid_col_align(cont), col_gap, calc_out->col_num, calc_out->w, calc_out->x, rev);
 80101da:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
    lv_coord_t cont_h = lv_obj_get_content_height(cont);
 80101de:	4620      	mov	r0, r4
    bool auto_h = (h_set == LV_SIZE_CONTENT && !cont->h_layout) ? true : false;
 80101e0:	4599      	cmp	r9, r3
 80101e2:	bf09      	itett	eq
 80101e4:	f894 5023 	ldrbeq.w	r5, [r4, #35]	; 0x23
 80101e8:	2500      	movne	r5, #0
 80101ea:	f085 0502 	eoreq.w	r5, r5, #2
 80101ee:	f3c5 0540 	ubfxeq	r5, r5, #1, #1
    lv_coord_t cont_h = lv_obj_get_content_height(cont);
 80101f2:	f7f4 fe62 	bl	8004eba <lv_obj_get_content_height>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_ROW_ALIGN);
 80101f6:	4b17      	ldr	r3, [pc, #92]	; (8010254 <grid_update+0x344>)
 80101f8:	4606      	mov	r6, r0
 80101fa:	2100      	movs	r1, #0
 80101fc:	4620      	mov	r0, r4
 80101fe:	881a      	ldrh	r2, [r3, #0]
 8010200:	f7f7 f8b2 	bl	8007368 <lv_obj_get_style_prop>
    calc_out->grid_h = grid_align(cont_h, auto_h, get_grid_row_align(cont), row_gap, calc_out->row_num, calc_out->h, calc_out->y, false);
 8010204:	2300      	movs	r3, #0
 8010206:	b2c2      	uxtb	r2, r0
 8010208:	4629      	mov	r1, r5
 801020a:	9303      	str	r3, [sp, #12]
 801020c:	4630      	mov	r0, r6
 801020e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010210:	9302      	str	r3, [sp, #8]
 8010212:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010214:	9301      	str	r3, [sp, #4]
 8010216:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8010218:	9300      	str	r3, [sp, #0]
 801021a:	463b      	mov	r3, r7
 801021c:	f7ff fdf0 	bl	800fe00 <grid_align>
 8010220:	f8ad 005e 	strh.w	r0, [sp, #94]	; 0x5e
 8010224:	e693      	b.n	800ff4e <grid_update+0x3e>
    for(i = 0; templ[i] != LV_COORD_MAX; i++);
 8010226:	3301      	adds	r3, #1
 8010228:	e6fa      	b.n	8010020 <grid_update+0x110>
        if(IS_CONTENT(row_templ[i])) {
 801022a:	f935 2016 	ldrsh.w	r2, [r5, r6, lsl #1]
 801022e:	f645 739b 	movw	r3, #24475	; 0x5f9b
 8010232:	ea4f 0946 	mov.w	r9, r6, lsl #1
 8010236:	429a      	cmp	r2, r3
 8010238:	d146      	bne.n	80102c8 <grid_update+0x3b8>
            for(ci = 0; ci < lv_obj_get_child_cnt(cont); ci++) {
 801023a:	f04f 0800 	mov.w	r8, #0
        lv_coord_t size = LV_COORD_MIN;
 801023e:	4f06      	ldr	r7, [pc, #24]	; (8010258 <grid_update+0x348>)
                if(lv_obj_has_flag_any(item, LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8010240:	f8df a018 	ldr.w	sl, [pc, #24]	; 801025c <grid_update+0x34c>
 8010244:	e033      	b.n	80102ae <grid_update+0x39e>
 8010246:	bf00      	nop
 8010248:	2000ade4 	.word	0x2000ade4
 801024c:	2000add8 	.word	0x2000add8
 8010250:	2000adde 	.word	0x2000adde
 8010254:	2000add6 	.word	0x2000add6
 8010258:	ffffa000 	.word	0xffffa000
 801025c:	00018001 	.word	0x00018001
                lv_obj_t * item = lv_obj_get_child(cont, ci);
 8010260:	4641      	mov	r1, r8
 8010262:	4620      	mov	r0, r4
 8010264:	f7f7 fbcd 	bl	8007a02 <lv_obj_get_child>
                if(lv_obj_has_flag_any(item, LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8010268:	4651      	mov	r1, sl
                lv_obj_t * item = lv_obj_get_child(cont, ci);
 801026a:	4683      	mov	fp, r0
                if(lv_obj_has_flag_any(item, LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 801026c:	f7f3 fdb0 	bl	8003dd0 <lv_obj_has_flag_any>
 8010270:	4601      	mov	r1, r0
 8010272:	b9d0      	cbnz	r0, 80102aa <grid_update+0x39a>
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_grid_cell_row_span(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_ROW_SPAN);
 8010274:	4bc0      	ldr	r3, [pc, #768]	; (8010578 <grid_update+0x668>)
 8010276:	9006      	str	r0, [sp, #24]
 8010278:	4658      	mov	r0, fp
 801027a:	881a      	ldrh	r2, [r3, #0]
 801027c:	f7f7 f874 	bl	8007368 <lv_obj_get_style_prop>
                if(row_span != 1) continue;
 8010280:	9906      	ldr	r1, [sp, #24]
 8010282:	b2c0      	uxtb	r0, r0
 8010284:	2801      	cmp	r0, #1
 8010286:	d110      	bne.n	80102aa <grid_update+0x39a>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_ROW_POS);
 8010288:	4bbc      	ldr	r3, [pc, #752]	; (801057c <grid_update+0x66c>)
 801028a:	4658      	mov	r0, fp
 801028c:	881a      	ldrh	r2, [r3, #0]
 801028e:	f7f7 f86b 	bl	8007368 <lv_obj_get_style_prop>
                uint32_t row_pos = get_row_pos(item);
 8010292:	b2c0      	uxtb	r0, r0
                if(row_pos != i) continue;
 8010294:	4286      	cmp	r6, r0
 8010296:	d108      	bne.n	80102aa <grid_update+0x39a>
                size = LV_MAX(size, lv_obj_get_height(item));
 8010298:	4658      	mov	r0, fp
 801029a:	f7f4 fdee 	bl	8004e7a <lv_obj_get_height>
 801029e:	42b8      	cmp	r0, r7
 80102a0:	db03      	blt.n	80102aa <grid_update+0x39a>
 80102a2:	4658      	mov	r0, fp
 80102a4:	f7f4 fde9 	bl	8004e7a <lv_obj_get_height>
 80102a8:	4607      	mov	r7, r0
            for(ci = 0; ci < lv_obj_get_child_cnt(cont); ci++) {
 80102aa:	f108 0801 	add.w	r8, r8, #1
 80102ae:	4620      	mov	r0, r4
 80102b0:	f7f7 fbb6 	bl	8007a20 <lv_obj_get_child_cnt>
 80102b4:	4580      	cmp	r8, r0
 80102b6:	d3d3      	bcc.n	8010260 <grid_update+0x350>
            if(size >= 0) c->h[i] = size;
 80102b8:	2f00      	cmp	r7, #0
 80102ba:	9b14      	ldr	r3, [sp, #80]	; 0x50
            else c->h[i] = 0;
 80102bc:	bfb6      	itet	lt
 80102be:	2200      	movlt	r2, #0
            if(size >= 0) c->h[i] = size;
 80102c0:	f823 7009 	strhge.w	r7, [r3, r9]
            else c->h[i] = 0;
 80102c4:	f823 2009 	strhlt.w	r2, [r3, r9]
    for(i = 0; i < c->row_num; i++) {
 80102c8:	3601      	adds	r6, #1
 80102ca:	e6ba      	b.n	8010042 <grid_update+0x132>
        lv_coord_t x = row_templ[i];
 80102cc:	f935 3010 	ldrsh.w	r3, [r5, r0, lsl #1]
        if(IS_FR(x)) {
 80102d0:	4573      	cmp	r3, lr
 80102d2:	dd05      	ble.n	80102e0 <grid_update+0x3d0>
            row_fr_cnt += GET_FR(x);
 80102d4:	f5a6 46bf 	sub.w	r6, r6, #24448	; 0x5f80
 80102d8:	3e1c      	subs	r6, #28
 80102da:	441e      	add	r6, r3
    for(i = 0; i < c->row_num; i++) {
 80102dc:	3001      	adds	r0, #1
 80102de:	e6bb      	b.n	8010058 <grid_update+0x148>
            grid_h += c->h[i];
 80102e0:	bf0d      	iteet	eq
 80102e2:	f83c 2010 	ldrheq.w	r2, [ip, r0, lsl #1]
            grid_h += x;
 80102e6:	18fa      	addne	r2, r7, r3
            c->h[i] = x;
 80102e8:	f82c 3010 	strhne.w	r3, [ip, r0, lsl #1]
            grid_h += c->h[i];
 80102ec:	19d2      	addeq	r2, r2, r7
            grid_h += x;
 80102ee:	b212      	sxth	r2, r2
 80102f0:	e7f4      	b.n	80102dc <grid_update+0x3cc>
        lv_coord_t x = row_templ[i];
 80102f2:	f935 3010 	ldrsh.w	r3, [r5, r0, lsl #1]
        if(IS_FR(x)) {
 80102f6:	4563      	cmp	r3, ip
 80102f8:	dd08      	ble.n	801030c <grid_update+0x3fc>
            lv_coord_t f = GET_FR(x);
 80102fa:	f5a3 43bf 	sub.w	r3, r3, #24448	; 0x5f80
 80102fe:	3b1c      	subs	r3, #28
            c->h[i] = (free_h * f) / row_fr_cnt;
 8010300:	b29b      	uxth	r3, r3
 8010302:	4353      	muls	r3, r2
 8010304:	fbb3 f3f6 	udiv	r3, r3, r6
 8010308:	f827 3010 	strh.w	r3, [r7, r0, lsl #1]
    for(i = 0; i < c->row_num; i++) {
 801030c:	3001      	adds	r0, #1
 801030e:	e6bf      	b.n	8010090 <grid_update+0x180>
    for(i = 0; templ[i] != LV_COORD_MAX; i++);
 8010310:	3301      	adds	r3, #1
 8010312:	e6cc      	b.n	80100ae <grid_update+0x19e>
        if(IS_CONTENT(col_templ[i])) {
 8010314:	f935 2016 	ldrsh.w	r2, [r5, r6, lsl #1]
 8010318:	f645 739b 	movw	r3, #24475	; 0x5f9b
 801031c:	ea4f 0946 	mov.w	r9, r6, lsl #1
 8010320:	429a      	cmp	r2, r3
 8010322:	d139      	bne.n	8010398 <grid_update+0x488>
            for(ci = 0; ci < lv_obj_get_child_cnt(cont); ci++) {
 8010324:	f04f 0800 	mov.w	r8, #0
        lv_coord_t size = LV_COORD_MIN;
 8010328:	4f95      	ldr	r7, [pc, #596]	; (8010580 <grid_update+0x670>)
                if(lv_obj_has_flag_any(item, LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 801032a:	f8df a260 	ldr.w	sl, [pc, #608]	; 801058c <grid_update+0x67c>
 801032e:	e026      	b.n	801037e <grid_update+0x46e>
                lv_obj_t * item = lv_obj_get_child(cont, ci);
 8010330:	4641      	mov	r1, r8
 8010332:	4620      	mov	r0, r4
 8010334:	f7f7 fb65 	bl	8007a02 <lv_obj_get_child>
                if(lv_obj_has_flag_any(item, LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8010338:	4651      	mov	r1, sl
                lv_obj_t * item = lv_obj_get_child(cont, ci);
 801033a:	4683      	mov	fp, r0
                if(lv_obj_has_flag_any(item, LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 801033c:	f7f3 fd48 	bl	8003dd0 <lv_obj_has_flag_any>
 8010340:	4601      	mov	r1, r0
 8010342:	b9d0      	cbnz	r0, 801037a <grid_update+0x46a>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_COLUMN_SPAN);
 8010344:	4b8f      	ldr	r3, [pc, #572]	; (8010584 <grid_update+0x674>)
 8010346:	9006      	str	r0, [sp, #24]
 8010348:	4658      	mov	r0, fp
 801034a:	881a      	ldrh	r2, [r3, #0]
 801034c:	f7f7 f80c 	bl	8007368 <lv_obj_get_style_prop>
                if(col_span != 1) continue;
 8010350:	9906      	ldr	r1, [sp, #24]
 8010352:	b2c0      	uxtb	r0, r0
 8010354:	2801      	cmp	r0, #1
 8010356:	d110      	bne.n	801037a <grid_update+0x46a>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_COLUMN_POS);
 8010358:	4b8b      	ldr	r3, [pc, #556]	; (8010588 <grid_update+0x678>)
 801035a:	4658      	mov	r0, fp
 801035c:	881a      	ldrh	r2, [r3, #0]
 801035e:	f7f7 f803 	bl	8007368 <lv_obj_get_style_prop>
                uint32_t col_pos = get_col_pos(item);
 8010362:	b2c0      	uxtb	r0, r0
                if(col_pos != i) continue;
 8010364:	4286      	cmp	r6, r0
 8010366:	d108      	bne.n	801037a <grid_update+0x46a>
                size = LV_MAX(size, lv_obj_get_width(item));
 8010368:	4658      	mov	r0, fp
 801036a:	f7f4 fd80 	bl	8004e6e <lv_obj_get_width>
 801036e:	42b8      	cmp	r0, r7
 8010370:	db03      	blt.n	801037a <grid_update+0x46a>
 8010372:	4658      	mov	r0, fp
 8010374:	f7f4 fd7b 	bl	8004e6e <lv_obj_get_width>
 8010378:	4607      	mov	r7, r0
            for(ci = 0; ci < lv_obj_get_child_cnt(cont); ci++) {
 801037a:	f108 0801 	add.w	r8, r8, #1
 801037e:	4620      	mov	r0, r4
 8010380:	f7f7 fb4e 	bl	8007a20 <lv_obj_get_child_cnt>
 8010384:	4580      	cmp	r8, r0
 8010386:	d3d3      	bcc.n	8010330 <grid_update+0x420>
            if(size >= 0) c->w[i] = size;
 8010388:	2f00      	cmp	r7, #0
 801038a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
            else c->w[i] = 0;
 801038c:	bfb6      	itet	lt
 801038e:	2200      	movlt	r2, #0
            if(size >= 0) c->w[i] = size;
 8010390:	f823 7009 	strhge.w	r7, [r3, r9]
            else c->w[i] = 0;
 8010394:	f823 2009 	strhlt.w	r2, [r3, r9]
    for(i = 0; i < c->col_num; i++) {
 8010398:	3601      	adds	r6, #1
 801039a:	e699      	b.n	80100d0 <grid_update+0x1c0>
        lv_coord_t x = col_templ[i];
 801039c:	f935 001c 	ldrsh.w	r0, [r5, ip, lsl #1]
        if(IS_FR(x)) {
 80103a0:	4570      	cmp	r0, lr
 80103a2:	dd06      	ble.n	80103b2 <grid_update+0x4a2>
            col_fr_cnt += GET_FR(x);
 80103a4:	f5a6 46bf 	sub.w	r6, r6, #24448	; 0x5f80
 80103a8:	3e1c      	subs	r6, #28
 80103aa:	4406      	add	r6, r0
    for(i = 0; i < c->col_num; i++) {
 80103ac:	f10c 0c01 	add.w	ip, ip, #1
 80103b0:	e698      	b.n	80100e4 <grid_update+0x1d4>
            grid_w += c->w[i];
 80103b2:	bf0d      	iteet	eq
 80103b4:	f832 101c 	ldrheq.w	r1, [r2, ip, lsl #1]
            grid_w += x;
 80103b8:	1839      	addne	r1, r7, r0
            c->w[i] = x;
 80103ba:	f822 001c 	strhne.w	r0, [r2, ip, lsl #1]
            grid_w += c->w[i];
 80103be:	19c9      	addeq	r1, r1, r7
            grid_w += x;
 80103c0:	b209      	sxth	r1, r1
 80103c2:	e7f3      	b.n	80103ac <grid_update+0x49c>
        lv_coord_t x = col_templ[i];
 80103c4:	f935 0011 	ldrsh.w	r0, [r5, r1, lsl #1]
        if(IS_FR(x)) {
 80103c8:	4540      	cmp	r0, r8
 80103ca:	dd0a      	ble.n	80103e2 <grid_update+0x4d2>
            lv_coord_t f = GET_FR(x);
 80103cc:	f5a0 42bf 	sub.w	r2, r0, #24448	; 0x5f80
            last_fr_i = i;
 80103d0:	468e      	mov	lr, r1
            lv_coord_t f = GET_FR(x);
 80103d2:	3a1c      	subs	r2, #28
            c->w[i] = (free_w * f) / col_fr_cnt;
 80103d4:	b292      	uxth	r2, r2
 80103d6:	fb02 f003 	mul.w	r0, r2, r3
 80103da:	fbb0 f0f6 	udiv	r0, r0, r6
 80103de:	f827 0011 	strh.w	r0, [r7, r1, lsl #1]
    for(i = 0; i < c->col_num; i++) {
 80103e2:	3101      	adds	r1, #1
 80103e4:	e69b      	b.n	801011e <grid_update+0x20e>
        lv_obj_t * item = cont->spec_attr->children[i];
 80103e6:	681b      	ldr	r3, [r3, #0]
 80103e8:	9a05      	ldr	r2, [sp, #20]
    if(lv_obj_has_flag_any(item, LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) return;
 80103ea:	4968      	ldr	r1, [pc, #416]	; (801058c <grid_update+0x67c>)
        lv_obj_t * item = cont->spec_attr->children[i];
 80103ec:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
    if(lv_obj_has_flag_any(item, LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) return;
 80103f0:	4628      	mov	r0, r5
 80103f2:	f7f3 fced 	bl	8003dd0 <lv_obj_has_flag_any>
 80103f6:	4601      	mov	r1, r0
 80103f8:	2800      	cmp	r0, #0
 80103fa:	f040 8183 	bne.w	8010704 <grid_update+0x7f4>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_COLUMN_SPAN);
 80103fe:	4b61      	ldr	r3, [pc, #388]	; (8010584 <grid_update+0x674>)
 8010400:	9006      	str	r0, [sp, #24]
 8010402:	4628      	mov	r0, r5
 8010404:	881a      	ldrh	r2, [r3, #0]
 8010406:	f7f6 ffaf 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_ROW_SPAN);
 801040a:	4b5b      	ldr	r3, [pc, #364]	; (8010578 <grid_update+0x668>)
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_COLUMN_SPAN);
 801040c:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_ROW_SPAN);
 801040e:	9906      	ldr	r1, [sp, #24]
 8010410:	881a      	ldrh	r2, [r3, #0]
 8010412:	4628      	mov	r0, r5
 8010414:	f7f6 ffa8 	bl	8007368 <lv_obj_get_style_prop>
    if(row_span == 0 || col_span == 0) return;
 8010418:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
 801041c:	f000 8172 	beq.w	8010704 <grid_update+0x7f4>
 8010420:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
 8010424:	f000 816e 	beq.w	8010704 <grid_update+0x7f4>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_COLUMN_POS);
 8010428:	4b57      	ldr	r3, [pc, #348]	; (8010588 <grid_update+0x678>)
 801042a:	4628      	mov	r0, r5
 801042c:	9906      	ldr	r1, [sp, #24]
 801042e:	881a      	ldrh	r2, [r3, #0]
 8010430:	f7f6 ff9a 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_ROW_POS);
 8010434:	4a51      	ldr	r2, [pc, #324]	; (801057c <grid_update+0x66c>)
    uint32_t col_pos = get_col_pos(item);
 8010436:	b2c3      	uxtb	r3, r0
 8010438:	9906      	ldr	r1, [sp, #24]
 801043a:	8812      	ldrh	r2, [r2, #0]
 801043c:	4628      	mov	r0, r5
 801043e:	9307      	str	r3, [sp, #28]
 8010440:	f7f6 ff92 	bl	8007368 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_grid_cell_x_align(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_X_ALIGN);
 8010444:	4a52      	ldr	r2, [pc, #328]	; (8010590 <grid_update+0x680>)
    uint32_t row_pos = get_row_pos(item);
 8010446:	fa5f fa80 	uxtb.w	sl, r0
 801044a:	9906      	ldr	r1, [sp, #24]
 801044c:	4628      	mov	r0, r5
 801044e:	8812      	ldrh	r2, [r2, #0]
    lv_coord_t row_y2 = c->y[row_pos + row_span - 1] + c->h[row_pos + row_span - 1];
 8010450:	4456      	add	r6, sl
 8010452:	f7f6 ff89 	bl	8007368 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_grid_cell_y_align(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_Y_ALIGN);
 8010456:	4a4f      	ldr	r2, [pc, #316]	; (8010594 <grid_update+0x684>)
 8010458:	9906      	ldr	r1, [sp, #24]
static inline uint8_t get_cell_col_align(lv_obj_t * obj) {return lv_obj_get_style_grid_cell_x_align(obj, 0); }
 801045a:	fa5f f980 	uxtb.w	r9, r0
 801045e:	8812      	ldrh	r2, [r2, #0]
 8010460:	4628      	mov	r0, r5
 8010462:	910b      	str	r1, [sp, #44]	; 0x2c
 8010464:	f7f6 ff80 	bl	8007368 <lv_obj_get_style_prop>
static inline uint8_t get_cell_row_align(lv_obj_t * obj) {return lv_obj_get_style_grid_cell_y_align(obj, 0); }
 8010468:	b2c3      	uxtb	r3, r0
    lv_coord_t col_x2 = c->x[col_pos + col_span - 1] + c->w[col_pos + col_span - 1];
 801046a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    lv_coord_t col_x1 = c->x[col_pos];
 801046e:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
static inline uint8_t get_cell_row_align(lv_obj_t * obj) {return lv_obj_get_style_grid_cell_y_align(obj, 0); }
 8010472:	9306      	str	r3, [sp, #24]
    lv_coord_t col_x2 = c->x[col_pos + col_span - 1] + c->w[col_pos + col_span - 1];
 8010474:	9b07      	ldr	r3, [sp, #28]
 8010476:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8010478:	441f      	add	r7, r3
    lv_coord_t col_w = col_x2 - col_x1;
 801047a:	930a      	str	r3, [sp, #40]	; 0x28
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 801047c:	990b      	ldr	r1, [sp, #44]	; 0x2c
    lv_coord_t col_x2 = c->x[col_pos + col_span - 1] + c->w[col_pos + col_span - 1];
 801047e:	4407      	add	r7, r0
    lv_coord_t row_y2 = c->y[row_pos + row_span - 1] + c->h[row_pos + row_span - 1];
 8010480:	4430      	add	r0, r6
    lv_coord_t col_x2 = c->x[col_pos + col_span - 1] + c->w[col_pos + col_span - 1];
 8010482:	f832 b017 	ldrh.w	fp, [r2, r7, lsl #1]
 8010486:	f83c 2017 	ldrh.w	r2, [ip, r7, lsl #1]
    lv_coord_t row_y2 = c->y[row_pos + row_span - 1] + c->h[row_pos + row_span - 1];
 801048a:	9f14      	ldr	r7, [sp, #80]	; 0x50
    lv_coord_t col_x2 = c->x[col_pos + col_span - 1] + c->w[col_pos + col_span - 1];
 801048c:	4493      	add	fp, r2
    lv_coord_t col_w = col_x2 - col_x1;
 801048e:	f83c 2013 	ldrh.w	r2, [ip, r3, lsl #1]
    lv_coord_t row_y2 = c->y[row_pos + row_span - 1] + c->h[row_pos + row_span - 1];
 8010492:	f837 6010 	ldrh.w	r6, [r7, r0, lsl #1]
    lv_coord_t col_w = col_x2 - col_x1;
 8010496:	ebab 0b02 	sub.w	fp, fp, r2
    lv_coord_t row_y1 = c->y[row_pos];
 801049a:	9a12      	ldr	r2, [sp, #72]	; 0x48
    lv_coord_t row_y2 = c->y[row_pos + row_span - 1] + c->h[row_pos + row_span - 1];
 801049c:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
    lv_coord_t col_w = col_x2 - col_x1;
 80104a0:	fa1f f38b 	uxth.w	r3, fp
    lv_coord_t row_h = row_y2 - row_y1;
 80104a4:	f832 201a 	ldrh.w	r2, [r2, sl, lsl #1]
    lv_coord_t row_y2 = c->y[row_pos + row_span - 1] + c->h[row_pos + row_span - 1];
 80104a8:	4406      	add	r6, r0
    lv_coord_t col_w = col_x2 - col_x1;
 80104aa:	9308      	str	r3, [sp, #32]
 80104ac:	fa0f f38b 	sxth.w	r3, fp
 80104b0:	4628      	mov	r0, r5
    lv_coord_t row_h = row_y2 - row_y1;
 80104b2:	1ab6      	subs	r6, r6, r2
 80104b4:	f241 426a 	movw	r2, #5226	; 0x146a
    lv_coord_t col_w = col_x2 - col_x1;
 80104b8:	9307      	str	r3, [sp, #28]
    lv_coord_t row_h = row_y2 - row_y1;
 80104ba:	b2b3      	uxth	r3, r6
 80104bc:	b236      	sxth	r6, r6
 80104be:	9309      	str	r3, [sp, #36]	; 0x24
 80104c0:	f7f6 ff52 	bl	8007368 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 80104c4:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_base_dir(item, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 80104c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80104c8:	2801      	cmp	r0, #1
 80104ca:	d107      	bne.n	80104dc <grid_update+0x5cc>
        if(col_align == LV_GRID_ALIGN_START) col_align = LV_GRID_ALIGN_END;
 80104cc:	f1b9 0f00 	cmp.w	r9, #0
 80104d0:	d029      	beq.n	8010526 <grid_update+0x616>
        else if(col_align == LV_GRID_ALIGN_END) col_align = LV_GRID_ALIGN_START;
 80104d2:	f1b9 0f02 	cmp.w	r9, #2
 80104d6:	bf08      	it	eq
 80104d8:	f04f 0900 	moveq.w	r9, #0
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80104dc:	f8b5 8018 	ldrh.w	r8, [r5, #24]
    switch(col_align) {
 80104e0:	f1b9 0f02 	cmp.w	r9, #2
 80104e4:	8aaa      	ldrh	r2, [r5, #20]
 80104e6:	f108 0801 	add.w	r8, r8, #1
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80104ea:	8b6f      	ldrh	r7, [r5, #26]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80104ec:	eba8 0802 	sub.w	r8, r8, r2
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80104f0:	f107 0701 	add.w	r7, r7, #1
 80104f4:	8aea      	ldrh	r2, [r5, #22]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80104f6:	fa0f f888 	sxth.w	r8, r8
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80104fa:	eba7 0702 	sub.w	r7, r7, r2
 80104fe:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8010500:	b23f      	sxth	r7, r7
 8010502:	f932 b013 	ldrsh.w	fp, [r2, r3, lsl #1]
 8010506:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 801050a:	d045      	beq.n	8010598 <grid_update+0x688>
 801050c:	f1b9 0f03 	cmp.w	r9, #3
 8010510:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
 8010514:	d00a      	beq.n	801052c <grid_update+0x61c>
 8010516:	f1b9 0f01 	cmp.w	r9, #1
 801051a:	d023      	beq.n	8010564 <grid_update+0x654>
            item->w_layout = 0;
 801051c:	f36f 0382 	bfc	r3, #2, #1
 8010520:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
            break;
 8010524:	e008      	b.n	8010538 <grid_update+0x628>
        if(col_align == LV_GRID_ALIGN_START) col_align = LV_GRID_ALIGN_END;
 8010526:	f04f 0902 	mov.w	r9, #2
 801052a:	e7d7      	b.n	80104dc <grid_update+0x5cc>
            item->w_layout = 1;
 801052c:	f043 0304 	orr.w	r3, r3, #4
 8010530:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
            item_w = col_w;
 8010534:	f8dd 801c 	ldr.w	r8, [sp, #28]
    switch(row_align) {
 8010538:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801053a:	f933 901a 	ldrsh.w	r9, [r3, sl, lsl #1]
 801053e:	f833 201a 	ldrh.w	r2, [r3, sl, lsl #1]
 8010542:	9b06      	ldr	r3, [sp, #24]
 8010544:	2b02      	cmp	r3, #2
 8010546:	f000 80e8 	beq.w	801071a <grid_update+0x80a>
 801054a:	2b03      	cmp	r3, #3
 801054c:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
 8010550:	d030      	beq.n	80105b4 <grid_update+0x6a4>
 8010552:	9906      	ldr	r1, [sp, #24]
 8010554:	2901      	cmp	r1, #1
 8010556:	f000 80d8 	beq.w	801070a <grid_update+0x7fa>
            item->h_layout = 0;
 801055a:	f36f 0341 	bfc	r3, #1, #1
 801055e:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
            break;
 8010562:	e02c      	b.n	80105be <grid_update+0x6ae>
            x = c->x[col_pos] + (col_w - item_w) / 2;
 8010564:	9a07      	ldr	r2, [sp, #28]
 8010566:	eba2 0b08 	sub.w	fp, r2, r8
 801056a:	eb0b 7bdb 	add.w	fp, fp, fp, lsr #31
 801056e:	eb00 0b6b 	add.w	fp, r0, fp, asr #1
 8010572:	fa0f fb8b 	sxth.w	fp, fp
            item->w_layout = 0;
 8010576:	e7d1      	b.n	801051c <grid_update+0x60c>
 8010578:	2000ade0 	.word	0x2000ade0
 801057c:	2000ade6 	.word	0x2000ade6
 8010580:	ffffa000 	.word	0xffffa000
 8010584:	2000add4 	.word	0x2000add4
 8010588:	2000adda 	.word	0x2000adda
 801058c:	00018001 	.word	0x00018001
 8010590:	2000ade2 	.word	0x2000ade2
 8010594:	2000addc 	.word	0x2000addc
            x = c->x[col_pos] + col_w - lv_obj_get_width(item);
 8010598:	9b08      	ldr	r3, [sp, #32]
 801059a:	4418      	add	r0, r3
 801059c:	fa1f f980 	uxth.w	r9, r0
 80105a0:	4628      	mov	r0, r5
 80105a2:	f7f4 fc64 	bl	8004e6e <lv_obj_get_width>
            item->w_layout = 0;
 80105a6:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
            x = c->x[col_pos] + col_w - lv_obj_get_width(item);
 80105aa:	eba9 0000 	sub.w	r0, r9, r0
 80105ae:	fa0f fb80 	sxth.w	fp, r0
            item->w_layout = 0;
 80105b2:	e7b3      	b.n	801051c <grid_update+0x60c>
            item->h_layout = 1;
 80105b4:	f043 0302 	orr.w	r3, r3, #2
            item_h = row_h;
 80105b8:	4637      	mov	r7, r6
            item->h_layout = 1;
 80105ba:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
    if(lv_obj_get_width(item) != item_w || lv_obj_get_height(item) != item_h) {
 80105be:	4628      	mov	r0, r5
 80105c0:	f7f4 fc55 	bl	8004e6e <lv_obj_get_width>
 80105c4:	4540      	cmp	r0, r8
 80105c6:	f000 80b6 	beq.w	8010736 <grid_update+0x826>
    dest->x1 = src->x1;
 80105ca:	8aab      	ldrh	r3, [r5, #20]
        lv_area_copy(&old_coords, &item->coords);
 80105cc:	f105 0614 	add.w	r6, r5, #20
        lv_obj_invalidate(item);
 80105d0:	4628      	mov	r0, r5
 80105d2:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
    dest->y1 = src->y1;
 80105d6:	8aeb      	ldrh	r3, [r5, #22]
 80105d8:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
    dest->x2 = src->x2;
 80105dc:	8b2b      	ldrh	r3, [r5, #24]
 80105de:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    dest->y2 = src->y2;
 80105e2:	8b6b      	ldrh	r3, [r5, #26]
 80105e4:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 80105e8:	f7f4 fd96 	bl	8005118 <lv_obj_invalidate>
        lv_area_set_width(&item->coords, item_w);
 80105ec:	4641      	mov	r1, r8
 80105ee:	4630      	mov	r0, r6
 80105f0:	9606      	str	r6, [sp, #24]
 80105f2:	f006 fc18 	bl	8016e26 <lv_area_set_width>
        lv_area_set_height(&item->coords, item_h);
 80105f6:	4639      	mov	r1, r7
 80105f8:	9806      	ldr	r0, [sp, #24]
 80105fa:	f006 fc19 	bl	8016e30 <lv_area_set_height>
        lv_obj_invalidate(item);
 80105fe:	4628      	mov	r0, r5
 8010600:	f7f4 fd8a 	bl	8005118 <lv_obj_invalidate>
        lv_event_send(item, LV_EVENT_SIZE_CHANGED, &old_coords);
 8010604:	aa0c      	add	r2, sp, #48	; 0x30
 8010606:	2123      	movs	r1, #35	; 0x23
 8010608:	4628      	mov	r0, r5
 801060a:	f7f1 fc5d 	bl	8001ec8 <lv_event_send>
        lv_event_send(lv_obj_get_parent(item), LV_EVENT_CHILD_CHANGED, item);
 801060e:	4628      	mov	r0, r5
 8010610:	f7f7 f9f4 	bl	80079fc <lv_obj_get_parent>
 8010614:	462a      	mov	r2, r5
 8010616:	2122      	movs	r1, #34	; 0x22
 8010618:	f7f1 fc56 	bl	8001ec8 <lv_event_send>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_X);
 801061c:	f243 020c 	movw	r2, #12300	; 0x300c
 8010620:	2100      	movs	r1, #0
 8010622:	4628      	mov	r0, r5
 8010624:	f7f6 fea0 	bl	8007368 <lv_obj_get_style_prop>
 8010628:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_Y);
 801062a:	f243 020d 	movw	r2, #12301	; 0x300d
 801062e:	2100      	movs	r1, #0
    return (lv_coord_t)v.num;
 8010630:	fa0f f880 	sxth.w	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_Y);
 8010634:	4628      	mov	r0, r5
 8010636:	f7f6 fe97 	bl	8007368 <lv_obj_get_style_prop>
    if(LV_COORD_IS_PCT(tr_x)) tr_x = (w * LV_COORD_GET_PCT(tr_x)) / 100;
 801063a:	f407 47c0 	and.w	r7, r7, #24576	; 0x6000
 801063e:	4606      	mov	r6, r0
    return (lv_coord_t)v.num;
 8010640:	fa0f fa80 	sxth.w	sl, r0
    lv_coord_t w = lv_obj_get_width(item);
 8010644:	4628      	mov	r0, r5
 8010646:	f7f4 fc12 	bl	8004e6e <lv_obj_get_width>
 801064a:	9006      	str	r0, [sp, #24]
    lv_coord_t h = lv_obj_get_height(item);
 801064c:	4628      	mov	r0, r5
 801064e:	f7f4 fc14 	bl	8004e7a <lv_obj_get_height>
    if(LV_COORD_IS_PCT(tr_x)) tr_x = (w * LV_COORD_GET_PCT(tr_x)) / 100;
 8010652:	f5b7 5f00 	cmp.w	r7, #8192	; 0x2000
 8010656:	9b06      	ldr	r3, [sp, #24]
 8010658:	d111      	bne.n	801067e <grid_update+0x76e>
 801065a:	f428 42c0 	bic.w	r2, r8, #24576	; 0x6000
 801065e:	f5b2 6ffa 	cmp.w	r2, #2000	; 0x7d0
 8010662:	dc0c      	bgt.n	801067e <grid_update+0x76e>
 8010664:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8010668:	4690      	mov	r8, r2
 801066a:	bfc8      	it	gt
 801066c:	f5c2 787a 	rsbgt	r8, r2, #1000	; 0x3e8
 8010670:	fb08 f803 	mul.w	r8, r8, r3
 8010674:	2364      	movs	r3, #100	; 0x64
 8010676:	fb98 f8f3 	sdiv	r8, r8, r3
 801067a:	fa0f f888 	sxth.w	r8, r8
    if(LV_COORD_IS_PCT(tr_y)) tr_y = (h * LV_COORD_GET_PCT(tr_y)) / 100;
 801067e:	f406 46c0 	and.w	r6, r6, #24576	; 0x6000
 8010682:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
 8010686:	d110      	bne.n	80106aa <grid_update+0x79a>
 8010688:	f42a 43c0 	bic.w	r3, sl, #24576	; 0x6000
 801068c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8010690:	dc0b      	bgt.n	80106aa <grid_update+0x79a>
 8010692:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8010696:	f04f 0a64 	mov.w	sl, #100	; 0x64
 801069a:	bfc8      	it	gt
 801069c:	f5c3 737a 	rsbgt	r3, r3, #1000	; 0x3e8
 80106a0:	4358      	muls	r0, r3
 80106a2:	fb90 fafa 	sdiv	sl, r0, sl
 80106a6:	fa0f fa8a 	sxth.w	sl, sl
    lv_coord_t diff_x = hint->grid_abs.x + x - item->coords.x1;
 80106aa:	8aab      	ldrh	r3, [r5, #20]
 80106ac:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
    lv_coord_t diff_y = hint->grid_abs.y + y - item->coords.y1;
 80106b0:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
    lv_coord_t diff_x = hint->grid_abs.x + x - item->coords.x1;
 80106b4:	1ac9      	subs	r1, r1, r3
    lv_coord_t diff_y = hint->grid_abs.y + y - item->coords.y1;
 80106b6:	8aeb      	ldrh	r3, [r5, #22]
 80106b8:	1ad2      	subs	r2, r2, r3
    lv_coord_t diff_x = hint->grid_abs.x + x - item->coords.x1;
 80106ba:	448b      	add	fp, r1
    lv_coord_t diff_y = hint->grid_abs.y + y - item->coords.y1;
 80106bc:	4491      	add	r9, r2
    lv_coord_t diff_x = hint->grid_abs.x + x - item->coords.x1;
 80106be:	44d8      	add	r8, fp
    lv_coord_t diff_y = hint->grid_abs.y + y - item->coords.y1;
 80106c0:	44ca      	add	sl, r9
    lv_coord_t diff_x = hint->grid_abs.x + x - item->coords.x1;
 80106c2:	fa1f f888 	uxth.w	r8, r8
    lv_coord_t diff_y = hint->grid_abs.y + y - item->coords.y1;
 80106c6:	fa1f fa8a 	uxth.w	sl, sl
    if(diff_x || diff_y) {
 80106ca:	ea58 030a 	orrs.w	r3, r8, sl
 80106ce:	d019      	beq.n	8010704 <grid_update+0x7f4>
        lv_obj_invalidate(item);
 80106d0:	4628      	mov	r0, r5
 80106d2:	f7f4 fd21 	bl	8005118 <lv_obj_invalidate>
        item->coords.x1 += diff_x;
 80106d6:	8aab      	ldrh	r3, [r5, #20]
        lv_obj_invalidate(item);
 80106d8:	4628      	mov	r0, r5
        item->coords.x1 += diff_x;
 80106da:	4443      	add	r3, r8
 80106dc:	82ab      	strh	r3, [r5, #20]
        item->coords.x2 += diff_x;
 80106de:	8b2b      	ldrh	r3, [r5, #24]
 80106e0:	4443      	add	r3, r8
 80106e2:	832b      	strh	r3, [r5, #24]
        item->coords.y1 += diff_y;
 80106e4:	8aeb      	ldrh	r3, [r5, #22]
 80106e6:	4453      	add	r3, sl
 80106e8:	82eb      	strh	r3, [r5, #22]
        item->coords.y2 += diff_y;
 80106ea:	8b6b      	ldrh	r3, [r5, #26]
 80106ec:	4453      	add	r3, sl
 80106ee:	836b      	strh	r3, [r5, #26]
        lv_obj_invalidate(item);
 80106f0:	f7f4 fd12 	bl	8005118 <lv_obj_invalidate>
        lv_obj_move_children_by(item, diff_x, diff_y, true);
 80106f4:	2301      	movs	r3, #1
 80106f6:	fa0f f28a 	sxth.w	r2, sl
 80106fa:	4628      	mov	r0, r5
 80106fc:	fa0f f188 	sxth.w	r1, r8
 8010700:	f7f4 fc61 	bl	8004fc6 <lv_obj_move_children_by>
    for(i = 0; i < cont->spec_attr->child_cnt; i++) {
 8010704:	9b05      	ldr	r3, [sp, #20]
 8010706:	3301      	adds	r3, #1
 8010708:	e451      	b.n	800ffae <grid_update+0x9e>
            y = c->y[row_pos] + (row_h - item_h) / 2;
 801070a:	1bf6      	subs	r6, r6, r7
 801070c:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
 8010710:	eb02 0966 	add.w	r9, r2, r6, asr #1
 8010714:	fa0f f989 	sxth.w	r9, r9
            item->h_layout = 0;
 8010718:	e71f      	b.n	801055a <grid_update+0x64a>
            y = c->y[row_pos] + row_h - lv_obj_get_height(item);
 801071a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801071c:	4628      	mov	r0, r5
 801071e:	441a      	add	r2, r3
 8010720:	fa1f fa82 	uxth.w	sl, r2
 8010724:	f7f4 fba9 	bl	8004e7a <lv_obj_get_height>
            item->h_layout = 0;
 8010728:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
            y = c->y[row_pos] + row_h - lv_obj_get_height(item);
 801072c:	ebaa 0000 	sub.w	r0, sl, r0
 8010730:	fa0f f980 	sxth.w	r9, r0
            item->h_layout = 0;
 8010734:	e711      	b.n	801055a <grid_update+0x64a>
    if(lv_obj_get_width(item) != item_w || lv_obj_get_height(item) != item_h) {
 8010736:	4628      	mov	r0, r5
 8010738:	f7f4 fb9f 	bl	8004e7a <lv_obj_get_height>
 801073c:	42b8      	cmp	r0, r7
 801073e:	f47f af44 	bne.w	80105ca <grid_update+0x6ba>
 8010742:	e76b      	b.n	801061c <grid_update+0x70c>

08010744 <lv_grid_init>:
{
 8010744:	b508      	push	{r3, lr}
    LV_LAYOUT_GRID = lv_layout_register(grid_update, NULL);
 8010746:	2100      	movs	r1, #0
 8010748:	4820      	ldr	r0, [pc, #128]	; (80107cc <lv_grid_init+0x88>)
 801074a:	f7f4 fb11 	bl	8004d70 <lv_layout_register>
 801074e:	4b20      	ldr	r3, [pc, #128]	; (80107d0 <lv_grid_init+0x8c>)
 8010750:	6018      	str	r0, [r3, #0]
    LV_STYLE_GRID_COLUMN_DSC_ARRAY = lv_style_register_prop() | LV_STYLE_PROP_LAYOUT_REFR;
 8010752:	f007 fe1d 	bl	8018390 <lv_style_register_prop>
 8010756:	4b1f      	ldr	r3, [pc, #124]	; (80107d4 <lv_grid_init+0x90>)
 8010758:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 801075c:	8018      	strh	r0, [r3, #0]
    LV_STYLE_GRID_ROW_DSC_ARRAY = lv_style_register_prop() | LV_STYLE_PROP_LAYOUT_REFR;
 801075e:	f007 fe17 	bl	8018390 <lv_style_register_prop>
 8010762:	4b1d      	ldr	r3, [pc, #116]	; (80107d8 <lv_grid_init+0x94>)
 8010764:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 8010768:	8018      	strh	r0, [r3, #0]
    LV_STYLE_GRID_COLUMN_ALIGN = lv_style_register_prop() | LV_STYLE_PROP_LAYOUT_REFR;
 801076a:	f007 fe11 	bl	8018390 <lv_style_register_prop>
 801076e:	4b1b      	ldr	r3, [pc, #108]	; (80107dc <lv_grid_init+0x98>)
 8010770:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 8010774:	8018      	strh	r0, [r3, #0]
    LV_STYLE_GRID_ROW_ALIGN = lv_style_register_prop() | LV_STYLE_PROP_LAYOUT_REFR;
 8010776:	f007 fe0b 	bl	8018390 <lv_style_register_prop>
 801077a:	4b19      	ldr	r3, [pc, #100]	; (80107e0 <lv_grid_init+0x9c>)
 801077c:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 8010780:	8018      	strh	r0, [r3, #0]
    LV_STYLE_GRID_CELL_ROW_SPAN = lv_style_register_prop() | LV_STYLE_PROP_LAYOUT_REFR;
 8010782:	f007 fe05 	bl	8018390 <lv_style_register_prop>
 8010786:	4b17      	ldr	r3, [pc, #92]	; (80107e4 <lv_grid_init+0xa0>)
 8010788:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 801078c:	8018      	strh	r0, [r3, #0]
    LV_STYLE_GRID_CELL_ROW_POS = lv_style_register_prop() | LV_STYLE_PROP_LAYOUT_REFR;
 801078e:	f007 fdff 	bl	8018390 <lv_style_register_prop>
 8010792:	4b15      	ldr	r3, [pc, #84]	; (80107e8 <lv_grid_init+0xa4>)
 8010794:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 8010798:	8018      	strh	r0, [r3, #0]
    LV_STYLE_GRID_CELL_COLUMN_SPAN = lv_style_register_prop() | LV_STYLE_PROP_LAYOUT_REFR;
 801079a:	f007 fdf9 	bl	8018390 <lv_style_register_prop>
 801079e:	4b13      	ldr	r3, [pc, #76]	; (80107ec <lv_grid_init+0xa8>)
 80107a0:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 80107a4:	8018      	strh	r0, [r3, #0]
    LV_STYLE_GRID_CELL_COLUMN_POS = lv_style_register_prop() | LV_STYLE_PROP_LAYOUT_REFR;
 80107a6:	f007 fdf3 	bl	8018390 <lv_style_register_prop>
 80107aa:	4b11      	ldr	r3, [pc, #68]	; (80107f0 <lv_grid_init+0xac>)
 80107ac:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 80107b0:	8018      	strh	r0, [r3, #0]
    LV_STYLE_GRID_CELL_X_ALIGN = lv_style_register_prop() | LV_STYLE_PROP_LAYOUT_REFR;
 80107b2:	f007 fded 	bl	8018390 <lv_style_register_prop>
 80107b6:	4b0f      	ldr	r3, [pc, #60]	; (80107f4 <lv_grid_init+0xb0>)
 80107b8:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 80107bc:	8018      	strh	r0, [r3, #0]
    LV_STYLE_GRID_CELL_Y_ALIGN = lv_style_register_prop() | LV_STYLE_PROP_LAYOUT_REFR;
 80107be:	f007 fde7 	bl	8018390 <lv_style_register_prop>
 80107c2:	4b0d      	ldr	r3, [pc, #52]	; (80107f8 <lv_grid_init+0xb4>)
 80107c4:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 80107c8:	8018      	strh	r0, [r3, #0]
}
 80107ca:	bd08      	pop	{r3, pc}
 80107cc:	0800ff11 	.word	0x0800ff11
 80107d0:	2000ade8 	.word	0x2000ade8
 80107d4:	2000ade4 	.word	0x2000ade4
 80107d8:	2000add8 	.word	0x2000add8
 80107dc:	2000adde 	.word	0x2000adde
 80107e0:	2000add6 	.word	0x2000add6
 80107e4:	2000ade0 	.word	0x2000ade0
 80107e8:	2000ade6 	.word	0x2000ade6
 80107ec:	2000add4 	.word	0x2000add4
 80107f0:	2000adda 	.word	0x2000adda
 80107f4:	2000ade2 	.word	0x2000ade2
 80107f8:	2000addc 	.word	0x2000addc

080107fc <lv_extra_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_extra_init(void)
{
 80107fc:	b508      	push	{r3, lr}
#if LV_USE_FLEX
    lv_flex_init();
 80107fe:	f7ff fa8d 	bl	800fd1c <lv_flex_init>
#endif

#if LV_USE_GRID
    lv_grid_init();
#endif
}
 8010802:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    lv_grid_init();
 8010806:	f7ff bf9d 	b.w	8010744 <lv_grid_init>

0801080a <lv_color_mix>:
 * @param c2 the second color to mix (usually the background)
 * @param mix The ratio of the colors. 0: full `c2`, 255: full `c1`, 127: half `c1` and half`c2`
 * @return the mixed color
 */
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
 801080a:	b5f0      	push	{r4, r5, r6, r7, lr}
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 801080c:	f1c2 05ff 	rsb	r5, r2, #255	; 0xff
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8010810:	f3c1 1445 	ubfx	r4, r1, #5, #6
 8010814:	f3c0 1345 	ubfx	r3, r0, #5, #6
 8010818:	f248 0681 	movw	r6, #32897	; 0x8081
 801081c:	436c      	muls	r4, r5
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 801081e:	f001 071f 	and.w	r7, r1, #31
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8010822:	f3c1 21c4 	ubfx	r1, r1, #11, #5
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8010826:	fb03 4302 	mla	r3, r3, r2, r4
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 801082a:	436f      	muls	r7, r5
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 801082c:	3380      	adds	r3, #128	; 0x80
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 801082e:	434d      	muls	r5, r1
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8010830:	4373      	muls	r3, r6
#else
    /*LV_COLOR_DEPTH == 1*/
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
#endif

    return ret;
 8010832:	f3c3 54c5 	ubfx	r4, r3, #23, #6
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8010836:	f000 031f 	and.w	r3, r0, #31
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 801083a:	f3c0 20c4 	ubfx	r0, r0, #11, #5
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 801083e:	fb03 7302 	mla	r3, r3, r2, r7
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8010842:	fb00 5202 	mla	r2, r0, r2, r5
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8010846:	3380      	adds	r3, #128	; 0x80
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8010848:	3280      	adds	r2, #128	; 0x80
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 801084a:	4373      	muls	r3, r6
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 801084c:	4372      	muls	r2, r6
    return ret;
 801084e:	f3c3 53c4 	ubfx	r3, r3, #23, #5
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8010852:	0dd0      	lsrs	r0, r2, #23
    return ret;
 8010854:	ea43 1344 	orr.w	r3, r3, r4, lsl #5
}
 8010858:	ea43 20c0 	orr.w	r0, r3, r0, lsl #11
 801085c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801085e <lv_color_white>:
 *  PREDEFINED COLORS
 **********************/
/*Source: https://vuetifyjs.com/en/styles/colors/#material-colors*/

lv_color_t lv_palette_main(lv_palette_t p);
static inline lv_color_t lv_color_white(void) { return lv_color_make(0xff, 0xff, 0xff);}
 801085e:	f04f 30ff 	mov.w	r0, #4294967295
 8010862:	4770      	bx	lr

08010864 <theme_apply>:
    return inited;
}


static void theme_apply(lv_theme_t * th, lv_obj_t * obj)
{
 8010864:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    LV_UNUSED(th);

    if(lv_obj_get_parent(obj) == NULL) {
 8010866:	4608      	mov	r0, r1
{
 8010868:	460c      	mov	r4, r1
    if(lv_obj_get_parent(obj) == NULL) {
 801086a:	f7f7 f8c7 	bl	80079fc <lv_obj_get_parent>
 801086e:	4602      	mov	r2, r0
 8010870:	b9a0      	cbnz	r0, 801089c <theme_apply+0x38>
        lv_obj_add_style(obj, &styles->scr, 0);
 8010872:	4db7      	ldr	r5, [pc, #732]	; (8010b50 <theme_apply+0x2ec>)
 8010874:	6829      	ldr	r1, [r5, #0]
        if(lv_obj_check_type(parent, &lv_tabview_class)) {
            return;
        }
        /*Tabview pages*/
        else if(lv_obj_check_type(lv_obj_get_parent(parent), &lv_tabview_class)) {
            lv_obj_add_style(obj, &styles->pad_normal, 0);
 8010876:	4620      	mov	r0, r4
 8010878:	f7f6 fb48 	bl	8006f0c <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->scrollbar, LV_PART_SCROLLBAR);
 801087c:	6829      	ldr	r1, [r5, #0]
 801087e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8010882:	4620      	mov	r0, r4
 8010884:	3108      	adds	r1, #8
 8010886:	f7f6 fb41 	bl	8006f0c <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->scrollbar_scrolled, LV_PART_SCROLLBAR | LV_STATE_SCROLLED);
 801088a:	6829      	ldr	r1, [r5, #0]
 801088c:	4ab1      	ldr	r2, [pc, #708]	; (8010b54 <theme_apply+0x2f0>)
 801088e:	3110      	adds	r1, #16
    }
#endif

#if LV_USE_LED
    else if(lv_obj_check_type(obj, &lv_led_class)) {
            lv_obj_add_style(obj, &styles->led, 0);
 8010890:	4620      	mov	r0, r4
        }
#endif
}
 8010892:	b003      	add	sp, #12
 8010894:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            lv_obj_add_style(obj, &styles->led, 0);
 8010898:	f7f6 bb38 	b.w	8006f0c <lv_obj_add_style>
    if(lv_obj_check_type(obj, &lv_obj_class)) {
 801089c:	49ae      	ldr	r1, [pc, #696]	; (8010b58 <theme_apply+0x2f4>)
 801089e:	4620      	mov	r0, r4
 80108a0:	f7f3 fd78 	bl	8004394 <lv_obj_check_type>
 80108a4:	4606      	mov	r6, r0
 80108a6:	2800      	cmp	r0, #0
 80108a8:	d050      	beq.n	801094c <theme_apply+0xe8>
        lv_obj_t * parent = lv_obj_get_parent(obj);
 80108aa:	4620      	mov	r0, r4
 80108ac:	f7f7 f8a6 	bl	80079fc <lv_obj_get_parent>
        if(lv_obj_check_type(parent, &lv_tabview_class)) {
 80108b0:	49aa      	ldr	r1, [pc, #680]	; (8010b5c <theme_apply+0x2f8>)
        lv_obj_t * parent = lv_obj_get_parent(obj);
 80108b2:	4605      	mov	r5, r0
        if(lv_obj_check_type(parent, &lv_tabview_class)) {
 80108b4:	f7f3 fd6e 	bl	8004394 <lv_obj_check_type>
 80108b8:	4606      	mov	r6, r0
 80108ba:	2800      	cmp	r0, #0
 80108bc:	f040 859d 	bne.w	80113fa <theme_apply+0xb96>
        else if(lv_obj_check_type(lv_obj_get_parent(parent), &lv_tabview_class)) {
 80108c0:	4628      	mov	r0, r5
 80108c2:	4da3      	ldr	r5, [pc, #652]	; (8010b50 <theme_apply+0x2ec>)
 80108c4:	f7f7 f89a 	bl	80079fc <lv_obj_get_parent>
 80108c8:	49a4      	ldr	r1, [pc, #656]	; (8010b5c <theme_apply+0x2f8>)
 80108ca:	f7f3 fd63 	bl	8004394 <lv_obj_check_type>
 80108ce:	b118      	cbz	r0, 80108d8 <theme_apply+0x74>
            lv_obj_add_style(obj, &styles->pad_normal, 0);
 80108d0:	6829      	ldr	r1, [r5, #0]
 80108d2:	4632      	mov	r2, r6
 80108d4:	3180      	adds	r1, #128	; 0x80
 80108d6:	e7ce      	b.n	8010876 <theme_apply+0x12>
        if(lv_obj_get_child_id(obj) == 0 && lv_obj_check_type(lv_obj_get_parent(obj), &lv_win_class)) {
 80108d8:	4620      	mov	r0, r4
 80108da:	f7f7 f8a5 	bl	8007a28 <lv_obj_get_child_id>
 80108de:	9001      	str	r0, [sp, #4]
 80108e0:	b980      	cbnz	r0, 8010904 <theme_apply+0xa0>
 80108e2:	4620      	mov	r0, r4
 80108e4:	f7f7 f88a 	bl	80079fc <lv_obj_get_parent>
 80108e8:	499d      	ldr	r1, [pc, #628]	; (8010b60 <theme_apply+0x2fc>)
 80108ea:	f7f3 fd53 	bl	8004394 <lv_obj_check_type>
 80108ee:	9a01      	ldr	r2, [sp, #4]
 80108f0:	b140      	cbz	r0, 8010904 <theme_apply+0xa0>
            lv_obj_add_style(obj, &styles->bg_color_grey, 0);
 80108f2:	6829      	ldr	r1, [r5, #0]
 80108f4:	4620      	mov	r0, r4
 80108f6:	3148      	adds	r1, #72	; 0x48
 80108f8:	f7f6 fb08 	bl	8006f0c <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->pad_tiny, 0);
 80108fc:	6829      	ldr	r1, [r5, #0]
 80108fe:	9a01      	ldr	r2, [sp, #4]
 8010900:	3170      	adds	r1, #112	; 0x70
 8010902:	e7c5      	b.n	8010890 <theme_apply+0x2c>
        else if(lv_obj_get_child_id(obj) == 1 && lv_obj_check_type(lv_obj_get_parent(obj), &lv_win_class)) {
 8010904:	4620      	mov	r0, r4
 8010906:	f7f7 f88f 	bl	8007a28 <lv_obj_get_child_id>
 801090a:	2801      	cmp	r0, #1
 801090c:	d10e      	bne.n	801092c <theme_apply+0xc8>
 801090e:	4620      	mov	r0, r4
 8010910:	f7f7 f874 	bl	80079fc <lv_obj_get_parent>
 8010914:	4992      	ldr	r1, [pc, #584]	; (8010b60 <theme_apply+0x2fc>)
 8010916:	f7f3 fd3d 	bl	8004394 <lv_obj_check_type>
 801091a:	b138      	cbz	r0, 801092c <theme_apply+0xc8>
            lv_obj_add_style(obj, &styles->scr, 0);
 801091c:	2200      	movs	r2, #0
 801091e:	6829      	ldr	r1, [r5, #0]
 8010920:	4620      	mov	r0, r4
 8010922:	f7f6 faf3 	bl	8006f0c <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->pad_normal, 0);
 8010926:	6829      	ldr	r1, [r5, #0]
 8010928:	2200      	movs	r2, #0
 801092a:	e7d3      	b.n	80108d4 <theme_apply+0x70>
        lv_obj_add_style(obj, &styles->card, 0);
 801092c:	6829      	ldr	r1, [r5, #0]
 801092e:	2200      	movs	r2, #0
 8010930:	4620      	mov	r0, r4
 8010932:	3118      	adds	r1, #24
 8010934:	f7f6 faea 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar, LV_PART_SCROLLBAR);
 8010938:	6829      	ldr	r1, [r5, #0]
 801093a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 801093e:	4620      	mov	r0, r4
 8010940:	3108      	adds	r1, #8
 8010942:	f7f6 fae3 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar_scrolled, LV_PART_SCROLLBAR | LV_STATE_SCROLLED);
 8010946:	6829      	ldr	r1, [r5, #0]
 8010948:	f000 bd1b 	b.w	8011382 <theme_apply+0xb1e>
    else if(lv_obj_check_type(obj, &lv_btn_class)) {
 801094c:	4985      	ldr	r1, [pc, #532]	; (8010b64 <theme_apply+0x300>)
 801094e:	4620      	mov	r0, r4
 8010950:	f7f3 fd20 	bl	8004394 <lv_obj_check_type>
 8010954:	4605      	mov	r5, r0
 8010956:	b3a0      	cbz	r0, 80109c2 <theme_apply+0x15e>
        lv_obj_add_style(obj, &styles->btn, 0);
 8010958:	4d7d      	ldr	r5, [pc, #500]	; (8010b50 <theme_apply+0x2ec>)
 801095a:	4632      	mov	r2, r6
 801095c:	4620      	mov	r0, r4
 801095e:	6829      	ldr	r1, [r5, #0]
 8010960:	3120      	adds	r1, #32
 8010962:	f7f6 fad3 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_primary, 0);
 8010966:	6829      	ldr	r1, [r5, #0]
 8010968:	4632      	mov	r2, r6
 801096a:	4620      	mov	r0, r4
 801096c:	3128      	adds	r1, #40	; 0x28
 801096e:	f7f6 facd 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->transition_delayed, 0);
 8010972:	6829      	ldr	r1, [r5, #0]
 8010974:	4632      	mov	r2, r6
 8010976:	4620      	mov	r0, r4
 8010978:	31d0      	adds	r1, #208	; 0xd0
 801097a:	f7f6 fac7 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pressed, LV_STATE_PRESSED);
 801097e:	6829      	ldr	r1, [r5, #0]
 8010980:	2220      	movs	r2, #32
 8010982:	4620      	mov	r0, r4
 8010984:	3158      	adds	r1, #88	; 0x58
 8010986:	f7f6 fac1 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->transition_normal, LV_STATE_PRESSED);
 801098a:	6829      	ldr	r1, [r5, #0]
 801098c:	2220      	movs	r2, #32
 801098e:	4620      	mov	r0, r4
 8010990:	31d8      	adds	r1, #216	; 0xd8
 8010992:	f7f6 fabb 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_primary, LV_STATE_FOCUS_KEY);
 8010996:	6829      	ldr	r1, [r5, #0]
 8010998:	2204      	movs	r2, #4
 801099a:	4620      	mov	r0, r4
 801099c:	31a0      	adds	r1, #160	; 0xa0
 801099e:	f7f6 fab5 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->grow, LV_STATE_PRESSED);
 80109a2:	6829      	ldr	r1, [r5, #0]
 80109a4:	2220      	movs	r2, #32
 80109a6:	4620      	mov	r0, r4
 80109a8:	31c8      	adds	r1, #200	; 0xc8
 80109aa:	f7f6 faaf 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_secondary, LV_STATE_CHECKED);
 80109ae:	6829      	ldr	r1, [r5, #0]
 80109b0:	2201      	movs	r2, #1
 80109b2:	4620      	mov	r0, r4
 80109b4:	3138      	adds	r1, #56	; 0x38
 80109b6:	f7f6 faa9 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->disabled, LV_STATE_DISABLED);
 80109ba:	6829      	ldr	r1, [r5, #0]
 80109bc:	2280      	movs	r2, #128	; 0x80
        lv_obj_add_style(obj, &styles->disabled, LV_PART_KNOB | LV_STATE_DISABLED);
 80109be:	3160      	adds	r1, #96	; 0x60
 80109c0:	e00a      	b.n	80109d8 <theme_apply+0x174>
    else if(lv_obj_check_type(obj, &lv_line_class)) {
 80109c2:	4969      	ldr	r1, [pc, #420]	; (8010b68 <theme_apply+0x304>)
 80109c4:	4620      	mov	r0, r4
 80109c6:	f7f3 fce5 	bl	8004394 <lv_obj_check_type>
 80109ca:	4607      	mov	r7, r0
 80109cc:	b1c0      	cbz	r0, 8010a00 <theme_apply+0x19c>
        lv_obj_add_style(obj, &styles->line, 0);
 80109ce:	4b60      	ldr	r3, [pc, #384]	; (8010b50 <theme_apply+0x2ec>)
 80109d0:	462a      	mov	r2, r5
 80109d2:	6819      	ldr	r1, [r3, #0]
 80109d4:	f501 71a4 	add.w	r1, r1, #328	; 0x148
        lv_obj_add_style(obj, &styles->scrollbar_scrolled, LV_PART_SCROLLBAR | LV_STATE_SCROLLED);
 80109d8:	4620      	mov	r0, r4
 80109da:	f7f6 fa97 	bl	8006f0c <lv_obj_add_style>
    if(lv_obj_check_type(obj, &lv_tabview_class)) {
 80109de:	495f      	ldr	r1, [pc, #380]	; (8010b5c <theme_apply+0x2f8>)
 80109e0:	4620      	mov	r0, r4
 80109e2:	f7f3 fcd7 	bl	8004394 <lv_obj_check_type>
 80109e6:	2800      	cmp	r0, #0
 80109e8:	f000 84d9 	beq.w	801139e <theme_apply+0xb3a>
        lv_obj_add_style(obj, &styles->scr, 0);
 80109ec:	4d58      	ldr	r5, [pc, #352]	; (8010b50 <theme_apply+0x2ec>)
 80109ee:	2200      	movs	r2, #0
 80109f0:	4620      	mov	r0, r4
 80109f2:	6829      	ldr	r1, [r5, #0]
 80109f4:	f7f6 fa8a 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pad_zero, 0);
 80109f8:	6829      	ldr	r1, [r5, #0]
 80109fa:	2200      	movs	r2, #0
 80109fc:	3168      	adds	r1, #104	; 0x68
 80109fe:	e747      	b.n	8010890 <theme_apply+0x2c>
    else if(lv_obj_check_type(obj, &lv_btnmatrix_class)) {
 8010a00:	495a      	ldr	r1, [pc, #360]	; (8010b6c <theme_apply+0x308>)
 8010a02:	4620      	mov	r0, r4
 8010a04:	f7f3 fcc6 	bl	8004394 <lv_obj_check_type>
 8010a08:	4606      	mov	r6, r0
 8010a0a:	2800      	cmp	r0, #0
 8010a0c:	f000 80ba 	beq.w	8010b84 <theme_apply+0x320>
        if(lv_obj_check_type(lv_obj_get_parent(obj), &lv_msgbox_class)) {
 8010a10:	4620      	mov	r0, r4
 8010a12:	4d4f      	ldr	r5, [pc, #316]	; (8010b50 <theme_apply+0x2ec>)
 8010a14:	f7f6 fff2 	bl	80079fc <lv_obj_get_parent>
 8010a18:	4955      	ldr	r1, [pc, #340]	; (8010b70 <theme_apply+0x30c>)
 8010a1a:	f7f3 fcbb 	bl	8004394 <lv_obj_check_type>
 8010a1e:	4606      	mov	r6, r0
 8010a20:	b348      	cbz	r0, 8010a76 <theme_apply+0x212>
            lv_obj_add_style(obj, &styles->msgbox_btn_bg, 0);
 8010a22:	6829      	ldr	r1, [r5, #0]
 8010a24:	463a      	mov	r2, r7
 8010a26:	4620      	mov	r0, r4
 8010a28:	f501 71cc 	add.w	r1, r1, #408	; 0x198
 8010a2c:	f7f6 fa6e 	bl	8006f0c <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->pad_gap, 0);
 8010a30:	6829      	ldr	r1, [r5, #0]
 8010a32:	463a      	mov	r2, r7
 8010a34:	4620      	mov	r0, r4
 8010a36:	3188      	adds	r1, #136	; 0x88
 8010a38:	f7f6 fa68 	bl	8006f0c <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->btn, LV_PART_ITEMS);
 8010a3c:	6829      	ldr	r1, [r5, #0]
 8010a3e:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8010a42:	4620      	mov	r0, r4
 8010a44:	3120      	adds	r1, #32
 8010a46:	f7f6 fa61 	bl	8006f0c <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->pressed, LV_PART_ITEMS | LV_STATE_PRESSED);
 8010a4a:	6829      	ldr	r1, [r5, #0]
 8010a4c:	4a49      	ldr	r2, [pc, #292]	; (8010b74 <theme_apply+0x310>)
 8010a4e:	4620      	mov	r0, r4
 8010a50:	3158      	adds	r1, #88	; 0x58
 8010a52:	f7f6 fa5b 	bl	8006f0c <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->bg_color_primary, LV_PART_ITEMS | LV_STATE_CHECKED);
 8010a56:	6829      	ldr	r1, [r5, #0]
 8010a58:	4a47      	ldr	r2, [pc, #284]	; (8010b78 <theme_apply+0x314>)
 8010a5a:	4620      	mov	r0, r4
 8010a5c:	3128      	adds	r1, #40	; 0x28
 8010a5e:	f7f6 fa55 	bl	8006f0c <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->bg_color_primary_muted, LV_PART_ITEMS | LV_STATE_FOCUS_KEY);
 8010a62:	6829      	ldr	r1, [r5, #0]
 8010a64:	4a45      	ldr	r2, [pc, #276]	; (8010b7c <theme_apply+0x318>)
 8010a66:	4620      	mov	r0, r4
 8010a68:	3130      	adds	r1, #48	; 0x30
 8010a6a:	f7f6 fa4f 	bl	8006f0c <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->bg_color_secondary_muted, LV_PART_ITEMS | LV_STATE_EDITED);
 8010a6e:	6829      	ldr	r1, [r5, #0]
 8010a70:	4a43      	ldr	r2, [pc, #268]	; (8010b80 <theme_apply+0x31c>)
 8010a72:	3140      	adds	r1, #64	; 0x40
 8010a74:	e70c      	b.n	8010890 <theme_apply+0x2c>
        if(lv_obj_check_type(lv_obj_get_parent(obj), &lv_tabview_class)) {
 8010a76:	4620      	mov	r0, r4
 8010a78:	f7f6 ffc0 	bl	80079fc <lv_obj_get_parent>
 8010a7c:	4937      	ldr	r1, [pc, #220]	; (8010b5c <theme_apply+0x2f8>)
 8010a7e:	f7f3 fc89 	bl	8004394 <lv_obj_check_type>
            lv_obj_add_style(obj, &styles->bg_color_white, 0);
 8010a82:	6829      	ldr	r1, [r5, #0]
        if(lv_obj_check_type(lv_obj_get_parent(obj), &lv_tabview_class)) {
 8010a84:	4602      	mov	r2, r0
 8010a86:	2800      	cmp	r0, #0
 8010a88:	d035      	beq.n	8010af6 <theme_apply+0x292>
            lv_obj_add_style(obj, &styles->bg_color_white, 0);
 8010a8a:	4632      	mov	r2, r6
 8010a8c:	3150      	adds	r1, #80	; 0x50
 8010a8e:	4620      	mov	r0, r4
 8010a90:	f7f6 fa3c 	bl	8006f0c <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->outline_primary, LV_STATE_FOCUS_KEY);
 8010a94:	6829      	ldr	r1, [r5, #0]
 8010a96:	2204      	movs	r2, #4
 8010a98:	4620      	mov	r0, r4
 8010a9a:	31a0      	adds	r1, #160	; 0xa0
 8010a9c:	f7f6 fa36 	bl	8006f0c <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->tab_bg_focus, LV_STATE_FOCUS_KEY);
 8010aa0:	6829      	ldr	r1, [r5, #0]
 8010aa2:	2204      	movs	r2, #4
 8010aa4:	4620      	mov	r0, r4
 8010aa6:	f501 71e4 	add.w	r1, r1, #456	; 0x1c8
 8010aaa:	f7f6 fa2f 	bl	8006f0c <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->pressed, LV_PART_ITEMS | LV_STATE_PRESSED);
 8010aae:	6829      	ldr	r1, [r5, #0]
 8010ab0:	4a30      	ldr	r2, [pc, #192]	; (8010b74 <theme_apply+0x310>)
 8010ab2:	4620      	mov	r0, r4
 8010ab4:	3158      	adds	r1, #88	; 0x58
 8010ab6:	f7f6 fa29 	bl	8006f0c <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->bg_color_primary_muted, LV_PART_ITEMS | LV_STATE_CHECKED);
 8010aba:	6829      	ldr	r1, [r5, #0]
 8010abc:	4a2e      	ldr	r2, [pc, #184]	; (8010b78 <theme_apply+0x314>)
 8010abe:	4620      	mov	r0, r4
 8010ac0:	3130      	adds	r1, #48	; 0x30
 8010ac2:	f7f6 fa23 	bl	8006f0c <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->tab_btn, LV_PART_ITEMS | LV_STATE_CHECKED);
 8010ac6:	6829      	ldr	r1, [r5, #0]
 8010ac8:	4a2b      	ldr	r2, [pc, #172]	; (8010b78 <theme_apply+0x314>)
 8010aca:	4620      	mov	r0, r4
 8010acc:	f501 71e8 	add.w	r1, r1, #464	; 0x1d0
 8010ad0:	f7f6 fa1c 	bl	8006f0c <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->outline_primary, LV_PART_ITEMS | LV_STATE_FOCUS_KEY);
 8010ad4:	6829      	ldr	r1, [r5, #0]
 8010ad6:	4a29      	ldr	r2, [pc, #164]	; (8010b7c <theme_apply+0x318>)
 8010ad8:	4620      	mov	r0, r4
 8010ada:	31a0      	adds	r1, #160	; 0xa0
 8010adc:	f7f6 fa16 	bl	8006f0c <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->outline_secondary, LV_PART_ITEMS | LV_STATE_EDITED);
 8010ae0:	6829      	ldr	r1, [r5, #0]
 8010ae2:	4a27      	ldr	r2, [pc, #156]	; (8010b80 <theme_apply+0x31c>)
 8010ae4:	4620      	mov	r0, r4
 8010ae6:	31a8      	adds	r1, #168	; 0xa8
 8010ae8:	f7f6 fa10 	bl	8006f0c <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->tab_bg_focus, LV_PART_ITEMS | LV_STATE_FOCUS_KEY);
 8010aec:	6829      	ldr	r1, [r5, #0]
 8010aee:	4a23      	ldr	r2, [pc, #140]	; (8010b7c <theme_apply+0x318>)
 8010af0:	f501 71e4 	add.w	r1, r1, #456	; 0x1c8
 8010af4:	e6cc      	b.n	8010890 <theme_apply+0x2c>
        lv_obj_add_style(obj, &styles->card, 0);
 8010af6:	3118      	adds	r1, #24
 8010af8:	4620      	mov	r0, r4
 8010afa:	f7f6 fa07 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_primary, LV_STATE_FOCUS_KEY);
 8010afe:	6829      	ldr	r1, [r5, #0]
 8010b00:	2204      	movs	r2, #4
 8010b02:	4620      	mov	r0, r4
 8010b04:	31a0      	adds	r1, #160	; 0xa0
 8010b06:	f7f6 fa01 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_secondary, LV_STATE_EDITED);
 8010b0a:	6829      	ldr	r1, [r5, #0]
 8010b0c:	2208      	movs	r2, #8
 8010b0e:	4620      	mov	r0, r4
 8010b10:	31a8      	adds	r1, #168	; 0xa8
 8010b12:	f7f6 f9fb 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->btn, LV_PART_ITEMS);
 8010b16:	6829      	ldr	r1, [r5, #0]
 8010b18:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8010b1c:	4620      	mov	r0, r4
 8010b1e:	3120      	adds	r1, #32
 8010b20:	f7f6 f9f4 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pressed, LV_PART_ITEMS | LV_STATE_PRESSED);
 8010b24:	6829      	ldr	r1, [r5, #0]
 8010b26:	4a13      	ldr	r2, [pc, #76]	; (8010b74 <theme_apply+0x310>)
 8010b28:	4620      	mov	r0, r4
 8010b2a:	3158      	adds	r1, #88	; 0x58
 8010b2c:	f7f6 f9ee 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_primary, LV_PART_ITEMS | LV_STATE_CHECKED);
 8010b30:	6829      	ldr	r1, [r5, #0]
 8010b32:	4a11      	ldr	r2, [pc, #68]	; (8010b78 <theme_apply+0x314>)
 8010b34:	3128      	adds	r1, #40	; 0x28
        lv_obj_add_style(obj, &styles->bg_color_grey, LV_PART_ITEMS | LV_STATE_CHECKED);
 8010b36:	4620      	mov	r0, r4
 8010b38:	f7f6 f9e8 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_primary, LV_PART_ITEMS | LV_STATE_FOCUS_KEY);
 8010b3c:	6829      	ldr	r1, [r5, #0]
 8010b3e:	4a0f      	ldr	r2, [pc, #60]	; (8010b7c <theme_apply+0x318>)
 8010b40:	4620      	mov	r0, r4
 8010b42:	31a0      	adds	r1, #160	; 0xa0
 8010b44:	f7f6 f9e2 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_secondary, LV_PART_ITEMS | LV_STATE_EDITED);
 8010b48:	6829      	ldr	r1, [r5, #0]
 8010b4a:	4a0d      	ldr	r2, [pc, #52]	; (8010b80 <theme_apply+0x31c>)
 8010b4c:	31a8      	adds	r1, #168	; 0xa8
 8010b4e:	e743      	b.n	80109d8 <theme_apply+0x174>
 8010b50:	20002ae8 	.word	0x20002ae8
 8010b54:	00010040 	.word	0x00010040
 8010b58:	08024fa8 	.word	0x08024fa8
 8010b5c:	080256ac 	.word	0x080256ac
 8010b60:	08025700 	.word	0x08025700
 8010b64:	08029420 	.word	0x08029420
 8010b68:	08029518 	.word	0x08029518
 8010b6c:	08029458 	.word	0x08029458
 8010b70:	08025674 	.word	0x08025674
 8010b74:	00050020 	.word	0x00050020
 8010b78:	00050001 	.word	0x00050001
 8010b7c:	00050004 	.word	0x00050004
 8010b80:	00050008 	.word	0x00050008
    else if(lv_obj_check_type(obj, &lv_bar_class)) {
 8010b84:	49ad      	ldr	r1, [pc, #692]	; (8010e3c <theme_apply+0x5d8>)
 8010b86:	4620      	mov	r0, r4
 8010b88:	f7f3 fc04 	bl	8004394 <lv_obj_check_type>
 8010b8c:	b320      	cbz	r0, 8010bd8 <theme_apply+0x374>
        lv_obj_add_style(obj, &styles->bg_color_primary_muted, 0);
 8010b8e:	4dac      	ldr	r5, [pc, #688]	; (8010e40 <theme_apply+0x5dc>)
 8010b90:	4632      	mov	r2, r6
 8010b92:	4620      	mov	r0, r4
 8010b94:	6829      	ldr	r1, [r5, #0]
 8010b96:	3130      	adds	r1, #48	; 0x30
 8010b98:	f7f6 f9b8 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->circle, 0);
 8010b9c:	6829      	ldr	r1, [r5, #0]
 8010b9e:	4632      	mov	r2, r6
 8010ba0:	4620      	mov	r0, r4
 8010ba2:	31b0      	adds	r1, #176	; 0xb0
 8010ba4:	f7f6 f9b2 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_primary, LV_STATE_FOCUS_KEY);
 8010ba8:	6829      	ldr	r1, [r5, #0]
 8010baa:	2204      	movs	r2, #4
 8010bac:	4620      	mov	r0, r4
 8010bae:	31a0      	adds	r1, #160	; 0xa0
 8010bb0:	f7f6 f9ac 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_secondary, LV_STATE_EDITED);
 8010bb4:	6829      	ldr	r1, [r5, #0]
 8010bb6:	2208      	movs	r2, #8
 8010bb8:	4620      	mov	r0, r4
 8010bba:	31a8      	adds	r1, #168	; 0xa8
 8010bbc:	f7f6 f9a6 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_primary, LV_PART_INDICATOR);
 8010bc0:	6829      	ldr	r1, [r5, #0]
 8010bc2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8010bc6:	4620      	mov	r0, r4
 8010bc8:	3128      	adds	r1, #40	; 0x28
 8010bca:	f7f6 f99f 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->circle, LV_PART_INDICATOR);
 8010bce:	6829      	ldr	r1, [r5, #0]
 8010bd0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8010bd4:	31b0      	adds	r1, #176	; 0xb0
 8010bd6:	e6ff      	b.n	80109d8 <theme_apply+0x174>
 8010bd8:	9001      	str	r0, [sp, #4]
    else if(lv_obj_check_type(obj, &lv_slider_class)) {
 8010bda:	4620      	mov	r0, r4
 8010bdc:	4999      	ldr	r1, [pc, #612]	; (8010e44 <theme_apply+0x5e0>)
 8010bde:	f7f3 fbd9 	bl	8004394 <lv_obj_check_type>
 8010be2:	4606      	mov	r6, r0
 8010be4:	2800      	cmp	r0, #0
 8010be6:	d03e      	beq.n	8010c66 <theme_apply+0x402>
        lv_obj_add_style(obj, &styles->bg_color_primary_muted, 0);
 8010be8:	4d95      	ldr	r5, [pc, #596]	; (8010e40 <theme_apply+0x5dc>)
 8010bea:	4620      	mov	r0, r4
 8010bec:	9a01      	ldr	r2, [sp, #4]
 8010bee:	6829      	ldr	r1, [r5, #0]
 8010bf0:	3130      	adds	r1, #48	; 0x30
 8010bf2:	f7f6 f98b 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->circle, 0);
 8010bf6:	6829      	ldr	r1, [r5, #0]
 8010bf8:	9a01      	ldr	r2, [sp, #4]
 8010bfa:	4620      	mov	r0, r4
 8010bfc:	31b0      	adds	r1, #176	; 0xb0
 8010bfe:	f7f6 f985 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_primary, LV_STATE_FOCUS_KEY);
 8010c02:	6829      	ldr	r1, [r5, #0]
 8010c04:	2204      	movs	r2, #4
 8010c06:	4620      	mov	r0, r4
 8010c08:	31a0      	adds	r1, #160	; 0xa0
 8010c0a:	f7f6 f97f 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_secondary, LV_STATE_EDITED);
 8010c0e:	6829      	ldr	r1, [r5, #0]
 8010c10:	2208      	movs	r2, #8
 8010c12:	4620      	mov	r0, r4
 8010c14:	31a8      	adds	r1, #168	; 0xa8
 8010c16:	f7f6 f979 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_primary, LV_PART_INDICATOR);
 8010c1a:	6829      	ldr	r1, [r5, #0]
 8010c1c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8010c20:	4620      	mov	r0, r4
 8010c22:	3128      	adds	r1, #40	; 0x28
 8010c24:	f7f6 f972 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->circle, LV_PART_INDICATOR);
 8010c28:	6829      	ldr	r1, [r5, #0]
 8010c2a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8010c2e:	4620      	mov	r0, r4
 8010c30:	31b0      	adds	r1, #176	; 0xb0
 8010c32:	f7f6 f96b 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->knob, LV_PART_KNOB);
 8010c36:	6829      	ldr	r1, [r5, #0]
 8010c38:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8010c3c:	4620      	mov	r0, r4
 8010c3e:	31e8      	adds	r1, #232	; 0xe8
 8010c40:	f7f6 f964 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->grow, LV_PART_KNOB | LV_STATE_PRESSED);
 8010c44:	6829      	ldr	r1, [r5, #0]
 8010c46:	4a80      	ldr	r2, [pc, #512]	; (8010e48 <theme_apply+0x5e4>)
 8010c48:	4620      	mov	r0, r4
 8010c4a:	31c8      	adds	r1, #200	; 0xc8
 8010c4c:	f7f6 f95e 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->transition_delayed, LV_PART_KNOB);
 8010c50:	6829      	ldr	r1, [r5, #0]
 8010c52:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8010c56:	4620      	mov	r0, r4
 8010c58:	31d0      	adds	r1, #208	; 0xd0
 8010c5a:	f7f6 f957 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->transition_normal, LV_PART_KNOB | LV_STATE_PRESSED);
 8010c5e:	6829      	ldr	r1, [r5, #0]
 8010c60:	4a79      	ldr	r2, [pc, #484]	; (8010e48 <theme_apply+0x5e4>)
        lv_obj_add_style(obj, &styles->transition_normal, LV_PART_INDICATOR);
 8010c62:	31d8      	adds	r1, #216	; 0xd8
 8010c64:	e6b8      	b.n	80109d8 <theme_apply+0x174>
    else if(lv_obj_check_type(obj, &lv_table_class)) {
 8010c66:	4979      	ldr	r1, [pc, #484]	; (8010e4c <theme_apply+0x5e8>)
 8010c68:	4620      	mov	r0, r4
 8010c6a:	f7f3 fb93 	bl	8004394 <lv_obj_check_type>
 8010c6e:	4607      	mov	r7, r0
 8010c70:	2800      	cmp	r0, #0
 8010c72:	d051      	beq.n	8010d18 <theme_apply+0x4b4>
        lv_obj_add_style(obj, &styles->card, 0);
 8010c74:	4d72      	ldr	r5, [pc, #456]	; (8010e40 <theme_apply+0x5dc>)
 8010c76:	4632      	mov	r2, r6
 8010c78:	4620      	mov	r0, r4
 8010c7a:	6829      	ldr	r1, [r5, #0]
 8010c7c:	3118      	adds	r1, #24
 8010c7e:	f7f6 f945 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pad_zero, 0);
 8010c82:	6829      	ldr	r1, [r5, #0]
 8010c84:	4632      	mov	r2, r6
 8010c86:	4620      	mov	r0, r4
 8010c88:	3168      	adds	r1, #104	; 0x68
 8010c8a:	f7f6 f93f 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->no_radius, 0);
 8010c8e:	6829      	ldr	r1, [r5, #0]
 8010c90:	4632      	mov	r2, r6
 8010c92:	4620      	mov	r0, r4
 8010c94:	31b8      	adds	r1, #184	; 0xb8
 8010c96:	f7f6 f939 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_primary, LV_STATE_FOCUS_KEY);
 8010c9a:	6829      	ldr	r1, [r5, #0]
 8010c9c:	2204      	movs	r2, #4
 8010c9e:	4620      	mov	r0, r4
 8010ca0:	31a0      	adds	r1, #160	; 0xa0
 8010ca2:	f7f6 f933 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_secondary, LV_STATE_EDITED);
 8010ca6:	6829      	ldr	r1, [r5, #0]
 8010ca8:	2208      	movs	r2, #8
 8010caa:	4620      	mov	r0, r4
 8010cac:	31a8      	adds	r1, #168	; 0xa8
 8010cae:	f7f6 f92d 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar, LV_PART_SCROLLBAR);
 8010cb2:	6829      	ldr	r1, [r5, #0]
 8010cb4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8010cb8:	4620      	mov	r0, r4
 8010cba:	3108      	adds	r1, #8
 8010cbc:	f7f6 f926 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar_scrolled, LV_PART_SCROLLBAR | LV_STATE_SCROLLED);
 8010cc0:	6829      	ldr	r1, [r5, #0]
 8010cc2:	4a63      	ldr	r2, [pc, #396]	; (8010e50 <theme_apply+0x5ec>)
 8010cc4:	4620      	mov	r0, r4
 8010cc6:	3110      	adds	r1, #16
 8010cc8:	f7f6 f920 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_white, LV_PART_ITEMS);
 8010ccc:	6829      	ldr	r1, [r5, #0]
 8010cce:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8010cd2:	4620      	mov	r0, r4
 8010cd4:	3150      	adds	r1, #80	; 0x50
 8010cd6:	f7f6 f919 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->table_cell, LV_PART_ITEMS);
 8010cda:	6829      	ldr	r1, [r5, #0]
 8010cdc:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8010ce0:	4620      	mov	r0, r4
 8010ce2:	f501 71a8 	add.w	r1, r1, #336	; 0x150
 8010ce6:	f7f6 f911 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pad_normal, LV_PART_ITEMS);
 8010cea:	6829      	ldr	r1, [r5, #0]
 8010cec:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8010cf0:	4620      	mov	r0, r4
 8010cf2:	3180      	adds	r1, #128	; 0x80
 8010cf4:	f7f6 f90a 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pressed, LV_PART_ITEMS | LV_STATE_PRESSED);
 8010cf8:	6829      	ldr	r1, [r5, #0]
 8010cfa:	4a56      	ldr	r2, [pc, #344]	; (8010e54 <theme_apply+0x5f0>)
 8010cfc:	4620      	mov	r0, r4
 8010cfe:	3158      	adds	r1, #88	; 0x58
 8010d00:	f7f6 f904 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_primary, LV_PART_ITEMS | LV_STATE_FOCUS_KEY);
 8010d04:	6829      	ldr	r1, [r5, #0]
 8010d06:	4a54      	ldr	r2, [pc, #336]	; (8010e58 <theme_apply+0x5f4>)
 8010d08:	4620      	mov	r0, r4
 8010d0a:	3128      	adds	r1, #40	; 0x28
 8010d0c:	f7f6 f8fe 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_secondary, LV_PART_ITEMS | LV_STATE_EDITED);
 8010d10:	6829      	ldr	r1, [r5, #0]
 8010d12:	4a52      	ldr	r2, [pc, #328]	; (8010e5c <theme_apply+0x5f8>)
 8010d14:	3138      	adds	r1, #56	; 0x38
 8010d16:	e65f      	b.n	80109d8 <theme_apply+0x174>
    else if(lv_obj_check_type(obj, &lv_checkbox_class)) {
 8010d18:	4951      	ldr	r1, [pc, #324]	; (8010e60 <theme_apply+0x5fc>)
 8010d1a:	4620      	mov	r0, r4
 8010d1c:	f7f3 fb3a 	bl	8004394 <lv_obj_check_type>
 8010d20:	2800      	cmp	r0, #0
 8010d22:	d03e      	beq.n	8010da2 <theme_apply+0x53e>
        lv_obj_add_style(obj, &styles->pad_gap, 0);
 8010d24:	4d46      	ldr	r5, [pc, #280]	; (8010e40 <theme_apply+0x5dc>)
 8010d26:	463a      	mov	r2, r7
 8010d28:	4620      	mov	r0, r4
 8010d2a:	6829      	ldr	r1, [r5, #0]
 8010d2c:	3188      	adds	r1, #136	; 0x88
 8010d2e:	f7f6 f8ed 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_primary, LV_STATE_FOCUS_KEY);
 8010d32:	6829      	ldr	r1, [r5, #0]
 8010d34:	2204      	movs	r2, #4
 8010d36:	4620      	mov	r0, r4
 8010d38:	31a0      	adds	r1, #160	; 0xa0
 8010d3a:	f7f6 f8e7 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->disabled, LV_PART_INDICATOR | LV_STATE_DISABLED);
 8010d3e:	6829      	ldr	r1, [r5, #0]
 8010d40:	4a48      	ldr	r2, [pc, #288]	; (8010e64 <theme_apply+0x600>)
 8010d42:	4620      	mov	r0, r4
 8010d44:	3160      	adds	r1, #96	; 0x60
 8010d46:	f7f6 f8e1 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->cb_marker, LV_PART_INDICATOR);
 8010d4a:	6829      	ldr	r1, [r5, #0]
 8010d4c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8010d50:	4620      	mov	r0, r4
 8010d52:	f501 7198 	add.w	r1, r1, #304	; 0x130
 8010d56:	f7f6 f8d9 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_primary, LV_PART_INDICATOR | LV_STATE_CHECKED);
 8010d5a:	6829      	ldr	r1, [r5, #0]
 8010d5c:	4a42      	ldr	r2, [pc, #264]	; (8010e68 <theme_apply+0x604>)
 8010d5e:	4620      	mov	r0, r4
 8010d60:	3128      	adds	r1, #40	; 0x28
 8010d62:	f7f6 f8d3 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->cb_marker_checked, LV_PART_INDICATOR | LV_STATE_CHECKED);
 8010d66:	6829      	ldr	r1, [r5, #0]
 8010d68:	4a3f      	ldr	r2, [pc, #252]	; (8010e68 <theme_apply+0x604>)
 8010d6a:	4620      	mov	r0, r4
 8010d6c:	f501 719c 	add.w	r1, r1, #312	; 0x138
 8010d70:	f7f6 f8cc 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pressed, LV_PART_INDICATOR | LV_STATE_PRESSED);
 8010d74:	6829      	ldr	r1, [r5, #0]
 8010d76:	4a3d      	ldr	r2, [pc, #244]	; (8010e6c <theme_apply+0x608>)
 8010d78:	4620      	mov	r0, r4
 8010d7a:	3158      	adds	r1, #88	; 0x58
 8010d7c:	f7f6 f8c6 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->grow, LV_PART_INDICATOR | LV_STATE_PRESSED);
 8010d80:	6829      	ldr	r1, [r5, #0]
 8010d82:	4a3a      	ldr	r2, [pc, #232]	; (8010e6c <theme_apply+0x608>)
 8010d84:	4620      	mov	r0, r4
 8010d86:	31c8      	adds	r1, #200	; 0xc8
 8010d88:	f7f6 f8c0 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->transition_normal, LV_PART_INDICATOR | LV_STATE_PRESSED);
 8010d8c:	6829      	ldr	r1, [r5, #0]
 8010d8e:	4a37      	ldr	r2, [pc, #220]	; (8010e6c <theme_apply+0x608>)
 8010d90:	4620      	mov	r0, r4
 8010d92:	31d8      	adds	r1, #216	; 0xd8
 8010d94:	f7f6 f8ba 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->transition_delayed, LV_PART_INDICATOR);
 8010d98:	6829      	ldr	r1, [r5, #0]
 8010d9a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8010d9e:	31d0      	adds	r1, #208	; 0xd0
 8010da0:	e61a      	b.n	80109d8 <theme_apply+0x174>
    else if(lv_obj_check_type(obj, &lv_switch_class)) {
 8010da2:	4933      	ldr	r1, [pc, #204]	; (8010e70 <theme_apply+0x60c>)
 8010da4:	4620      	mov	r0, r4
 8010da6:	f7f3 faf5 	bl	8004394 <lv_obj_check_type>
 8010daa:	2800      	cmp	r0, #0
 8010dac:	d064      	beq.n	8010e78 <theme_apply+0x614>
        lv_obj_add_style(obj, &styles->bg_color_grey, 0);
 8010dae:	4d24      	ldr	r5, [pc, #144]	; (8010e40 <theme_apply+0x5dc>)
 8010db0:	2200      	movs	r2, #0
 8010db2:	4620      	mov	r0, r4
 8010db4:	6829      	ldr	r1, [r5, #0]
 8010db6:	3148      	adds	r1, #72	; 0x48
 8010db8:	f7f6 f8a8 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->circle, 0);
 8010dbc:	6829      	ldr	r1, [r5, #0]
 8010dbe:	2200      	movs	r2, #0
 8010dc0:	4620      	mov	r0, r4
 8010dc2:	31b0      	adds	r1, #176	; 0xb0
 8010dc4:	f7f6 f8a2 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->disabled, LV_STATE_DISABLED);
 8010dc8:	6829      	ldr	r1, [r5, #0]
 8010dca:	2280      	movs	r2, #128	; 0x80
 8010dcc:	4620      	mov	r0, r4
 8010dce:	3160      	adds	r1, #96	; 0x60
 8010dd0:	f7f6 f89c 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_primary, LV_STATE_FOCUS_KEY);
 8010dd4:	6829      	ldr	r1, [r5, #0]
 8010dd6:	2204      	movs	r2, #4
 8010dd8:	4620      	mov	r0, r4
 8010dda:	31a0      	adds	r1, #160	; 0xa0
 8010ddc:	f7f6 f896 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_primary, LV_PART_INDICATOR);
 8010de0:	6829      	ldr	r1, [r5, #0]
 8010de2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8010de6:	4620      	mov	r0, r4
 8010de8:	3128      	adds	r1, #40	; 0x28
 8010dea:	f7f6 f88f 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->circle, LV_PART_INDICATOR);
 8010dee:	6829      	ldr	r1, [r5, #0]
 8010df0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8010df4:	4620      	mov	r0, r4
 8010df6:	31b0      	adds	r1, #176	; 0xb0
 8010df8:	f7f6 f888 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->disabled, LV_PART_INDICATOR | LV_STATE_DISABLED);
 8010dfc:	6829      	ldr	r1, [r5, #0]
 8010dfe:	4a19      	ldr	r2, [pc, #100]	; (8010e64 <theme_apply+0x600>)
 8010e00:	4620      	mov	r0, r4
 8010e02:	3160      	adds	r1, #96	; 0x60
 8010e04:	f7f6 f882 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->knob, LV_PART_KNOB);
 8010e08:	6829      	ldr	r1, [r5, #0]
 8010e0a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8010e0e:	4620      	mov	r0, r4
 8010e10:	31e8      	adds	r1, #232	; 0xe8
 8010e12:	f7f6 f87b 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_white, LV_PART_KNOB);
 8010e16:	6829      	ldr	r1, [r5, #0]
 8010e18:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8010e1c:	4620      	mov	r0, r4
 8010e1e:	3150      	adds	r1, #80	; 0x50
 8010e20:	f7f6 f874 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->switch_knob, LV_PART_KNOB);
 8010e24:	6829      	ldr	r1, [r5, #0]
 8010e26:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8010e2a:	4620      	mov	r0, r4
 8010e2c:	f501 71a0 	add.w	r1, r1, #320	; 0x140
 8010e30:	f7f6 f86c 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->disabled, LV_PART_KNOB | LV_STATE_DISABLED);
 8010e34:	6829      	ldr	r1, [r5, #0]
 8010e36:	4a0f      	ldr	r2, [pc, #60]	; (8010e74 <theme_apply+0x610>)
 8010e38:	e5c1      	b.n	80109be <theme_apply+0x15a>
 8010e3a:	bf00      	nop
 8010e3c:	08029404 	.word	0x08029404
 8010e40:	20002ae8 	.word	0x20002ae8
 8010e44:	0802959c 	.word	0x0802959c
 8010e48:	00030020 	.word	0x00030020
 8010e4c:	080295d4 	.word	0x080295d4
 8010e50:	00010040 	.word	0x00010040
 8010e54:	00050020 	.word	0x00050020
 8010e58:	00050004 	.word	0x00050004
 8010e5c:	00050008 	.word	0x00050008
 8010e60:	08029480 	.word	0x08029480
 8010e64:	00020080 	.word	0x00020080
 8010e68:	00020001 	.word	0x00020001
 8010e6c:	00020020 	.word	0x00020020
 8010e70:	080295b8 	.word	0x080295b8
 8010e74:	00030080 	.word	0x00030080
    else if(lv_obj_check_type(obj, &lv_chart_class)) {
 8010e78:	49ae      	ldr	r1, [pc, #696]	; (8011134 <theme_apply+0x8d0>)
 8010e7a:	4620      	mov	r0, r4
 8010e7c:	f7f3 fa8a 	bl	8004394 <lv_obj_check_type>
 8010e80:	4606      	mov	r6, r0
 8010e82:	2800      	cmp	r0, #0
 8010e84:	d03e      	beq.n	8010f04 <theme_apply+0x6a0>
        lv_obj_add_style(obj, &styles->card, 0);
 8010e86:	4dac      	ldr	r5, [pc, #688]	; (8011138 <theme_apply+0x8d4>)
 8010e88:	2200      	movs	r2, #0
 8010e8a:	4620      	mov	r0, r4
 8010e8c:	6829      	ldr	r1, [r5, #0]
 8010e8e:	3118      	adds	r1, #24
 8010e90:	f7f6 f83c 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pad_small, 0);
 8010e94:	6829      	ldr	r1, [r5, #0]
 8010e96:	2200      	movs	r2, #0
 8010e98:	4620      	mov	r0, r4
 8010e9a:	3178      	adds	r1, #120	; 0x78
 8010e9c:	f7f6 f836 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->chart_bg, 0);
 8010ea0:	6829      	ldr	r1, [r5, #0]
 8010ea2:	2200      	movs	r2, #0
 8010ea4:	4620      	mov	r0, r4
 8010ea6:	f501 7190 	add.w	r1, r1, #288	; 0x120
 8010eaa:	f7f6 f82f 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar, LV_PART_SCROLLBAR);
 8010eae:	6829      	ldr	r1, [r5, #0]
 8010eb0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8010eb4:	4620      	mov	r0, r4
 8010eb6:	3108      	adds	r1, #8
 8010eb8:	f7f6 f828 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar_scrolled, LV_PART_SCROLLBAR | LV_STATE_SCROLLED);
 8010ebc:	6829      	ldr	r1, [r5, #0]
 8010ebe:	4a9f      	ldr	r2, [pc, #636]	; (801113c <theme_apply+0x8d8>)
 8010ec0:	4620      	mov	r0, r4
 8010ec2:	3110      	adds	r1, #16
 8010ec4:	f7f6 f822 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->chart_series, LV_PART_ITEMS);
 8010ec8:	6829      	ldr	r1, [r5, #0]
 8010eca:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8010ece:	4620      	mov	r0, r4
 8010ed0:	f501 7184 	add.w	r1, r1, #264	; 0x108
 8010ed4:	f7f6 f81a 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->chart_indic, LV_PART_INDICATOR);
 8010ed8:	6829      	ldr	r1, [r5, #0]
 8010eda:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8010ede:	4620      	mov	r0, r4
 8010ee0:	f501 7188 	add.w	r1, r1, #272	; 0x110
 8010ee4:	f7f6 f812 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->chart_ticks, LV_PART_TICKS);
 8010ee8:	6829      	ldr	r1, [r5, #0]
 8010eea:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8010eee:	4620      	mov	r0, r4
 8010ef0:	f501 718c 	add.w	r1, r1, #280	; 0x118
 8010ef4:	f7f6 f80a 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->chart_series, LV_PART_CURSOR);
 8010ef8:	6829      	ldr	r1, [r5, #0]
 8010efa:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8010efe:	f501 7184 	add.w	r1, r1, #264	; 0x108
 8010f02:	e569      	b.n	80109d8 <theme_apply+0x174>
    else if(lv_obj_check_type(obj, &lv_roller_class)) {
 8010f04:	498e      	ldr	r1, [pc, #568]	; (8011140 <theme_apply+0x8dc>)
 8010f06:	4620      	mov	r0, r4
 8010f08:	f7f3 fa44 	bl	8004394 <lv_obj_check_type>
 8010f0c:	b348      	cbz	r0, 8010f62 <theme_apply+0x6fe>
        lv_obj_add_style(obj, &styles->card, 0);
 8010f0e:	4d8a      	ldr	r5, [pc, #552]	; (8011138 <theme_apply+0x8d4>)
 8010f10:	4632      	mov	r2, r6
 8010f12:	4620      	mov	r0, r4
 8010f14:	6829      	ldr	r1, [r5, #0]
 8010f16:	3118      	adds	r1, #24
 8010f18:	f7f5 fff8 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->anim, 0);
 8010f1c:	6829      	ldr	r1, [r5, #0]
 8010f1e:	4632      	mov	r2, r6
 8010f20:	4620      	mov	r0, r4
 8010f22:	31e0      	adds	r1, #224	; 0xe0
 8010f24:	f7f5 fff2 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->line_space_large, 0);
 8010f28:	6829      	ldr	r1, [r5, #0]
 8010f2a:	4632      	mov	r2, r6
 8010f2c:	4620      	mov	r0, r4
 8010f2e:	3190      	adds	r1, #144	; 0x90
 8010f30:	f7f5 ffec 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->text_align_center, 0);
 8010f34:	6829      	ldr	r1, [r5, #0]
 8010f36:	4632      	mov	r2, r6
 8010f38:	4620      	mov	r0, r4
 8010f3a:	3198      	adds	r1, #152	; 0x98
 8010f3c:	f7f5 ffe6 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_primary, LV_STATE_FOCUS_KEY);
 8010f40:	6829      	ldr	r1, [r5, #0]
 8010f42:	2204      	movs	r2, #4
 8010f44:	4620      	mov	r0, r4
 8010f46:	31a0      	adds	r1, #160	; 0xa0
 8010f48:	f7f5 ffe0 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_secondary, LV_STATE_EDITED);
 8010f4c:	6829      	ldr	r1, [r5, #0]
 8010f4e:	2208      	movs	r2, #8
 8010f50:	4620      	mov	r0, r4
 8010f52:	31a8      	adds	r1, #168	; 0xa8
 8010f54:	f7f5 ffda 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_primary, LV_PART_SELECTED);
 8010f58:	6829      	ldr	r1, [r5, #0]
 8010f5a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
        lv_obj_add_style(obj, &styles->bg_color_primary, LV_PART_CURSOR);
 8010f5e:	3128      	adds	r1, #40	; 0x28
 8010f60:	e53a      	b.n	80109d8 <theme_apply+0x174>
 8010f62:	9001      	str	r0, [sp, #4]
    else if(lv_obj_check_type(obj, &lv_dropdown_class)) {
 8010f64:	4620      	mov	r0, r4
 8010f66:	4977      	ldr	r1, [pc, #476]	; (8011144 <theme_apply+0x8e0>)
 8010f68:	f7f3 fa14 	bl	8004394 <lv_obj_check_type>
 8010f6c:	4606      	mov	r6, r0
 8010f6e:	b370      	cbz	r0, 8010fce <theme_apply+0x76a>
        lv_obj_add_style(obj, &styles->card, 0);
 8010f70:	4d71      	ldr	r5, [pc, #452]	; (8011138 <theme_apply+0x8d4>)
 8010f72:	4620      	mov	r0, r4
 8010f74:	9a01      	ldr	r2, [sp, #4]
 8010f76:	6829      	ldr	r1, [r5, #0]
 8010f78:	3118      	adds	r1, #24
 8010f7a:	f7f5 ffc7 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pad_small, 0);
 8010f7e:	6829      	ldr	r1, [r5, #0]
 8010f80:	9a01      	ldr	r2, [sp, #4]
 8010f82:	4620      	mov	r0, r4
 8010f84:	3178      	adds	r1, #120	; 0x78
 8010f86:	f7f5 ffc1 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->transition_delayed, 0);
 8010f8a:	6829      	ldr	r1, [r5, #0]
 8010f8c:	9a01      	ldr	r2, [sp, #4]
 8010f8e:	4620      	mov	r0, r4
 8010f90:	31d0      	adds	r1, #208	; 0xd0
 8010f92:	f7f5 ffbb 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->transition_normal, LV_STATE_PRESSED);
 8010f96:	6829      	ldr	r1, [r5, #0]
 8010f98:	2220      	movs	r2, #32
 8010f9a:	4620      	mov	r0, r4
 8010f9c:	31d8      	adds	r1, #216	; 0xd8
 8010f9e:	f7f5 ffb5 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pressed, LV_STATE_PRESSED);
 8010fa2:	6829      	ldr	r1, [r5, #0]
 8010fa4:	2220      	movs	r2, #32
 8010fa6:	4620      	mov	r0, r4
 8010fa8:	3158      	adds	r1, #88	; 0x58
 8010faa:	f7f5 ffaf 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_primary, LV_STATE_FOCUS_KEY);
 8010fae:	6829      	ldr	r1, [r5, #0]
 8010fb0:	2204      	movs	r2, #4
 8010fb2:	4620      	mov	r0, r4
 8010fb4:	31a0      	adds	r1, #160	; 0xa0
 8010fb6:	f7f5 ffa9 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_secondary, LV_STATE_EDITED);
 8010fba:	6829      	ldr	r1, [r5, #0]
 8010fbc:	2208      	movs	r2, #8
 8010fbe:	4620      	mov	r0, r4
 8010fc0:	31a8      	adds	r1, #168	; 0xa8
 8010fc2:	f7f5 ffa3 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->transition_normal, LV_PART_INDICATOR);
 8010fc6:	6829      	ldr	r1, [r5, #0]
 8010fc8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8010fcc:	e649      	b.n	8010c62 <theme_apply+0x3fe>
    else if(lv_obj_check_type(obj, &lv_dropdownlist_class)) {
 8010fce:	495e      	ldr	r1, [pc, #376]	; (8011148 <theme_apply+0x8e4>)
 8010fd0:	4620      	mov	r0, r4
 8010fd2:	f7f3 f9df 	bl	8004394 <lv_obj_check_type>
 8010fd6:	4607      	mov	r7, r0
 8010fd8:	2800      	cmp	r0, #0
 8010fda:	d037      	beq.n	801104c <theme_apply+0x7e8>
        lv_obj_add_style(obj, &styles->card, 0);
 8010fdc:	4d56      	ldr	r5, [pc, #344]	; (8011138 <theme_apply+0x8d4>)
 8010fde:	4632      	mov	r2, r6
 8010fe0:	4620      	mov	r0, r4
 8010fe2:	6829      	ldr	r1, [r5, #0]
 8010fe4:	3118      	adds	r1, #24
 8010fe6:	f7f5 ff91 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->clip_corner, 0);
 8010fea:	6829      	ldr	r1, [r5, #0]
 8010fec:	4632      	mov	r2, r6
 8010fee:	4620      	mov	r0, r4
 8010ff0:	31c0      	adds	r1, #192	; 0xc0
 8010ff2:	f7f5 ff8b 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->line_space_large, 0);
 8010ff6:	6829      	ldr	r1, [r5, #0]
 8010ff8:	4632      	mov	r2, r6
 8010ffa:	4620      	mov	r0, r4
 8010ffc:	3190      	adds	r1, #144	; 0x90
 8010ffe:	f7f5 ff85 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->dropdown_list, 0);
 8011002:	6829      	ldr	r1, [r5, #0]
 8011004:	4632      	mov	r2, r6
 8011006:	4620      	mov	r0, r4
 8011008:	f501 7194 	add.w	r1, r1, #296	; 0x128
 801100c:	f7f5 ff7e 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar, LV_PART_SCROLLBAR);
 8011010:	6829      	ldr	r1, [r5, #0]
 8011012:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8011016:	4620      	mov	r0, r4
 8011018:	3108      	adds	r1, #8
 801101a:	f7f5 ff77 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar_scrolled, LV_PART_SCROLLBAR | LV_STATE_SCROLLED);
 801101e:	6829      	ldr	r1, [r5, #0]
 8011020:	4a46      	ldr	r2, [pc, #280]	; (801113c <theme_apply+0x8d8>)
 8011022:	4620      	mov	r0, r4
 8011024:	3110      	adds	r1, #16
 8011026:	f7f5 ff71 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_white, LV_PART_SELECTED);
 801102a:	6829      	ldr	r1, [r5, #0]
 801102c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8011030:	4620      	mov	r0, r4
 8011032:	3150      	adds	r1, #80	; 0x50
 8011034:	f7f5 ff6a 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_primary, LV_PART_SELECTED | LV_STATE_CHECKED);
 8011038:	6829      	ldr	r1, [r5, #0]
 801103a:	4a44      	ldr	r2, [pc, #272]	; (801114c <theme_apply+0x8e8>)
 801103c:	4620      	mov	r0, r4
 801103e:	3128      	adds	r1, #40	; 0x28
 8011040:	f7f5 ff64 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pressed, LV_PART_SELECTED | LV_STATE_PRESSED);
 8011044:	6829      	ldr	r1, [r5, #0]
 8011046:	4a42      	ldr	r2, [pc, #264]	; (8011150 <theme_apply+0x8ec>)
        lv_obj_add_style(obj, &styles->pressed, LV_STATE_PRESSED);
 8011048:	3158      	adds	r1, #88	; 0x58
 801104a:	e4c5      	b.n	80109d8 <theme_apply+0x174>
    else if(lv_obj_check_type(obj, &lv_arc_class)) {
 801104c:	4941      	ldr	r1, [pc, #260]	; (8011154 <theme_apply+0x8f0>)
 801104e:	4620      	mov	r0, r4
 8011050:	f7f3 f9a0 	bl	8004394 <lv_obj_check_type>
 8011054:	b1d0      	cbz	r0, 801108c <theme_apply+0x828>
        lv_obj_add_style(obj, &styles->arc_indic, 0);
 8011056:	4d38      	ldr	r5, [pc, #224]	; (8011138 <theme_apply+0x8d4>)
 8011058:	463a      	mov	r2, r7
 801105a:	4620      	mov	r0, r4
 801105c:	6829      	ldr	r1, [r5, #0]
 801105e:	31f8      	adds	r1, #248	; 0xf8
 8011060:	f7f5 ff54 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->arc_indic, LV_PART_INDICATOR);
 8011064:	6829      	ldr	r1, [r5, #0]
 8011066:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 801106a:	4620      	mov	r0, r4
 801106c:	31f8      	adds	r1, #248	; 0xf8
 801106e:	f7f5 ff4d 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->arc_indic_primary, LV_PART_INDICATOR);
 8011072:	6829      	ldr	r1, [r5, #0]
 8011074:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8011078:	4620      	mov	r0, r4
 801107a:	f501 7180 	add.w	r1, r1, #256	; 0x100
 801107e:	f7f5 ff45 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->knob, LV_PART_KNOB);
 8011082:	6829      	ldr	r1, [r5, #0]
 8011084:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8011088:	31e8      	adds	r1, #232	; 0xe8
 801108a:	e4a5      	b.n	80109d8 <theme_apply+0x174>
 801108c:	9001      	str	r0, [sp, #4]
    else if(lv_obj_check_type(obj, &lv_meter_class)) {
 801108e:	4620      	mov	r0, r4
 8011090:	4931      	ldr	r1, [pc, #196]	; (8011158 <theme_apply+0x8f4>)
 8011092:	f7f3 f97f 	bl	8004394 <lv_obj_check_type>
 8011096:	4607      	mov	r7, r0
 8011098:	b190      	cbz	r0, 80110c0 <theme_apply+0x85c>
        lv_obj_add_style(obj, &styles->card, 0);
 801109a:	4d27      	ldr	r5, [pc, #156]	; (8011138 <theme_apply+0x8d4>)
 801109c:	4620      	mov	r0, r4
 801109e:	9a01      	ldr	r2, [sp, #4]
 80110a0:	6829      	ldr	r1, [r5, #0]
 80110a2:	3118      	adds	r1, #24
 80110a4:	f7f5 ff32 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->circle, 0);
 80110a8:	6829      	ldr	r1, [r5, #0]
 80110aa:	9a01      	ldr	r2, [sp, #4]
 80110ac:	4620      	mov	r0, r4
 80110ae:	31b0      	adds	r1, #176	; 0xb0
 80110b0:	f7f5 ff2c 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->meter_indic, LV_PART_INDICATOR);
 80110b4:	6829      	ldr	r1, [r5, #0]
 80110b6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80110ba:	f501 71b0 	add.w	r1, r1, #352	; 0x160
 80110be:	e48b      	b.n	80109d8 <theme_apply+0x174>
    else if(lv_obj_check_type(obj, &lv_textarea_class)) {
 80110c0:	4926      	ldr	r1, [pc, #152]	; (801115c <theme_apply+0x8f8>)
 80110c2:	4620      	mov	r0, r4
 80110c4:	f7f3 f966 	bl	8004394 <lv_obj_check_type>
 80110c8:	2800      	cmp	r0, #0
 80110ca:	d04b      	beq.n	8011164 <theme_apply+0x900>
        lv_obj_add_style(obj, &styles->card, 0);
 80110cc:	4d1a      	ldr	r5, [pc, #104]	; (8011138 <theme_apply+0x8d4>)
 80110ce:	463a      	mov	r2, r7
 80110d0:	4620      	mov	r0, r4
 80110d2:	6829      	ldr	r1, [r5, #0]
 80110d4:	3118      	adds	r1, #24
 80110d6:	f7f5 ff19 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pad_small, 0);
 80110da:	6829      	ldr	r1, [r5, #0]
 80110dc:	463a      	mov	r2, r7
 80110de:	4620      	mov	r0, r4
 80110e0:	3178      	adds	r1, #120	; 0x78
 80110e2:	f7f5 ff13 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_primary, LV_STATE_FOCUS_KEY);
 80110e6:	6829      	ldr	r1, [r5, #0]
 80110e8:	2204      	movs	r2, #4
 80110ea:	4620      	mov	r0, r4
 80110ec:	31a0      	adds	r1, #160	; 0xa0
 80110ee:	f7f5 ff0d 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_secondary, LV_STATE_EDITED);
 80110f2:	6829      	ldr	r1, [r5, #0]
 80110f4:	2208      	movs	r2, #8
 80110f6:	4620      	mov	r0, r4
 80110f8:	31a8      	adds	r1, #168	; 0xa8
 80110fa:	f7f5 ff07 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar, LV_PART_SCROLLBAR);
 80110fe:	6829      	ldr	r1, [r5, #0]
 8011100:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8011104:	4620      	mov	r0, r4
 8011106:	3108      	adds	r1, #8
 8011108:	f7f5 ff00 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar_scrolled, LV_PART_SCROLLBAR | LV_STATE_SCROLLED);
 801110c:	6829      	ldr	r1, [r5, #0]
 801110e:	4a0b      	ldr	r2, [pc, #44]	; (801113c <theme_apply+0x8d8>)
 8011110:	4620      	mov	r0, r4
 8011112:	3110      	adds	r1, #16
 8011114:	f7f5 fefa 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->ta_cursor, LV_PART_CURSOR | LV_STATE_FOCUSED);
 8011118:	6829      	ldr	r1, [r5, #0]
 801111a:	4a11      	ldr	r2, [pc, #68]	; (8011160 <theme_apply+0x8fc>)
 801111c:	4620      	mov	r0, r4
 801111e:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8011122:	f7f5 fef3 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->ta_placeholder, LV_PART_TEXTAREA_PLACEHOLDER);
 8011126:	6829      	ldr	r1, [r5, #0]
 8011128:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 801112c:	f501 71b8 	add.w	r1, r1, #368	; 0x170
 8011130:	e452      	b.n	80109d8 <theme_apply+0x174>
 8011132:	bf00      	nop
 8011134:	08025178 	.word	0x08025178
 8011138:	20002ae8 	.word	0x20002ae8
 801113c:	00010040 	.word	0x00010040
 8011140:	08029564 	.word	0x08029564
 8011144:	080294bc 	.word	0x080294bc
 8011148:	080294d8 	.word	0x080294d8
 801114c:	00040001 	.word	0x00040001
 8011150:	00040020 	.word	0x00040020
 8011154:	080293e8 	.word	0x080293e8
 8011158:	08025658 	.word	0x08025658
 801115c:	080295f4 	.word	0x080295f4
 8011160:	00070002 	.word	0x00070002
 8011164:	9001      	str	r0, [sp, #4]
    else if(lv_obj_check_type(obj, &lv_calendar_class)) {
 8011166:	4620      	mov	r0, r4
 8011168:	49a5      	ldr	r1, [pc, #660]	; (8011400 <theme_apply+0xb9c>)
 801116a:	f7f3 f913 	bl	8004394 <lv_obj_check_type>
 801116e:	4607      	mov	r7, r0
 8011170:	b358      	cbz	r0, 80111ca <theme_apply+0x966>
        lv_obj_add_style(obj, &styles->card, 0);
 8011172:	4da4      	ldr	r5, [pc, #656]	; (8011404 <theme_apply+0xba0>)
 8011174:	4620      	mov	r0, r4
 8011176:	9a01      	ldr	r2, [sp, #4]
 8011178:	6829      	ldr	r1, [r5, #0]
 801117a:	3118      	adds	r1, #24
 801117c:	f7f5 fec6 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->calendar_bg, 0);
 8011180:	6829      	ldr	r1, [r5, #0]
 8011182:	9a01      	ldr	r2, [sp, #4]
 8011184:	4620      	mov	r0, r4
 8011186:	f501 71bc 	add.w	r1, r1, #376	; 0x178
 801118a:	f7f5 febf 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_primary, LV_STATE_FOCUS_KEY);
 801118e:	6829      	ldr	r1, [r5, #0]
 8011190:	2204      	movs	r2, #4
 8011192:	4620      	mov	r0, r4
 8011194:	31a0      	adds	r1, #160	; 0xa0
 8011196:	f7f5 feb9 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_secondary, LV_STATE_EDITED);
 801119a:	6829      	ldr	r1, [r5, #0]
 801119c:	2208      	movs	r2, #8
 801119e:	4620      	mov	r0, r4
 80111a0:	31a8      	adds	r1, #168	; 0xa8
 80111a2:	f7f5 feb3 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->calendar_day, LV_PART_ITEMS);
 80111a6:	6829      	ldr	r1, [r5, #0]
 80111a8:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 80111ac:	4620      	mov	r0, r4
 80111ae:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 80111b2:	f7f5 feab 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pressed, LV_PART_ITEMS | LV_STATE_PRESSED);
 80111b6:	6829      	ldr	r1, [r5, #0]
 80111b8:	4a93      	ldr	r2, [pc, #588]	; (8011408 <theme_apply+0xba4>)
 80111ba:	4620      	mov	r0, r4
 80111bc:	3158      	adds	r1, #88	; 0x58
 80111be:	f7f5 fea5 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->disabled, LV_PART_ITEMS | LV_STATE_DISABLED);
 80111c2:	6829      	ldr	r1, [r5, #0]
 80111c4:	4a91      	ldr	r2, [pc, #580]	; (801140c <theme_apply+0xba8>)
 80111c6:	3160      	adds	r1, #96	; 0x60
 80111c8:	e4b5      	b.n	8010b36 <theme_apply+0x2d2>
    else if(lv_obj_check_type(obj, &lv_keyboard_class)) {
 80111ca:	4991      	ldr	r1, [pc, #580]	; (8011410 <theme_apply+0xbac>)
 80111cc:	4620      	mov	r0, r4
 80111ce:	f7f3 f8e1 	bl	8004394 <lv_obj_check_type>
 80111d2:	2800      	cmp	r0, #0
 80111d4:	d03c      	beq.n	8011250 <theme_apply+0x9ec>
        lv_obj_add_style(obj, &styles->scr, 0);
 80111d6:	4d8b      	ldr	r5, [pc, #556]	; (8011404 <theme_apply+0xba0>)
 80111d8:	463a      	mov	r2, r7
 80111da:	4620      	mov	r0, r4
 80111dc:	6829      	ldr	r1, [r5, #0]
 80111de:	f7f5 fe95 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, disp_size == DISP_LARGE ? &styles->pad_small : &styles->pad_tiny, 0);
 80111e2:	4b8c      	ldr	r3, [pc, #560]	; (8011414 <theme_apply+0xbb0>)
 80111e4:	6829      	ldr	r1, [r5, #0]
 80111e6:	2200      	movs	r2, #0
 80111e8:	781b      	ldrb	r3, [r3, #0]
 80111ea:	4620      	mov	r0, r4
 80111ec:	2b01      	cmp	r3, #1
 80111ee:	bf0c      	ite	eq
 80111f0:	3178      	addeq	r1, #120	; 0x78
 80111f2:	3170      	addne	r1, #112	; 0x70
 80111f4:	f7f5 fe8a 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_primary, LV_STATE_FOCUS_KEY);
 80111f8:	6829      	ldr	r1, [r5, #0]
 80111fa:	2204      	movs	r2, #4
 80111fc:	4620      	mov	r0, r4
 80111fe:	31a0      	adds	r1, #160	; 0xa0
 8011200:	f7f5 fe84 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_secondary, LV_STATE_EDITED);
 8011204:	6829      	ldr	r1, [r5, #0]
 8011206:	2208      	movs	r2, #8
 8011208:	4620      	mov	r0, r4
 801120a:	31a8      	adds	r1, #168	; 0xa8
 801120c:	f7f5 fe7e 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->btn, LV_PART_ITEMS);
 8011210:	6829      	ldr	r1, [r5, #0]
 8011212:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8011216:	4620      	mov	r0, r4
 8011218:	3120      	adds	r1, #32
 801121a:	f7f5 fe77 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_white, LV_PART_ITEMS);
 801121e:	6829      	ldr	r1, [r5, #0]
 8011220:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8011224:	4620      	mov	r0, r4
 8011226:	3150      	adds	r1, #80	; 0x50
 8011228:	f7f5 fe70 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->keyboard_btn_bg, LV_PART_ITEMS);
 801122c:	6829      	ldr	r1, [r5, #0]
 801122e:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8011232:	4620      	mov	r0, r4
 8011234:	f501 71d0 	add.w	r1, r1, #416	; 0x1a0
 8011238:	f7f5 fe68 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pressed, LV_PART_ITEMS | LV_STATE_PRESSED);
 801123c:	6829      	ldr	r1, [r5, #0]
 801123e:	4a72      	ldr	r2, [pc, #456]	; (8011408 <theme_apply+0xba4>)
 8011240:	4620      	mov	r0, r4
 8011242:	3158      	adds	r1, #88	; 0x58
 8011244:	f7f5 fe62 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_grey, LV_PART_ITEMS | LV_STATE_CHECKED);
 8011248:	6829      	ldr	r1, [r5, #0]
 801124a:	4a73      	ldr	r2, [pc, #460]	; (8011418 <theme_apply+0xbb4>)
 801124c:	3148      	adds	r1, #72	; 0x48
 801124e:	e472      	b.n	8010b36 <theme_apply+0x2d2>
    else if(lv_obj_check_type(obj, &lv_list_class)) {
 8011250:	4972      	ldr	r1, [pc, #456]	; (801141c <theme_apply+0xbb8>)
 8011252:	4620      	mov	r0, r4
 8011254:	f7f3 f89e 	bl	8004394 <lv_obj_check_type>
 8011258:	b160      	cbz	r0, 8011274 <theme_apply+0xa10>
        lv_obj_add_style(obj, &styles->card, 0);
 801125a:	4d6a      	ldr	r5, [pc, #424]	; (8011404 <theme_apply+0xba0>)
 801125c:	2200      	movs	r2, #0
 801125e:	4620      	mov	r0, r4
 8011260:	6829      	ldr	r1, [r5, #0]
 8011262:	3118      	adds	r1, #24
 8011264:	f7f5 fe52 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->list_bg, 0);
 8011268:	6829      	ldr	r1, [r5, #0]
 801126a:	2200      	movs	r2, #0
 801126c:	f501 71d4 	add.w	r1, r1, #424	; 0x1a8
 8011270:	f7ff bb01 	b.w	8010876 <theme_apply+0x12>
    else if(lv_obj_check_type(obj, &lv_list_text_class)) {
 8011274:	496a      	ldr	r1, [pc, #424]	; (8011420 <theme_apply+0xbbc>)
 8011276:	4620      	mov	r0, r4
 8011278:	f7f3 f88c 	bl	8004394 <lv_obj_check_type>
 801127c:	b160      	cbz	r0, 8011298 <theme_apply+0xa34>
        lv_obj_add_style(obj, &styles->bg_color_grey, 0);
 801127e:	4d61      	ldr	r5, [pc, #388]	; (8011404 <theme_apply+0xba0>)
 8011280:	2200      	movs	r2, #0
 8011282:	4620      	mov	r0, r4
 8011284:	6829      	ldr	r1, [r5, #0]
 8011286:	3148      	adds	r1, #72	; 0x48
 8011288:	f7f5 fe40 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->list_item_grow, 0);
 801128c:	6829      	ldr	r1, [r5, #0]
 801128e:	2200      	movs	r2, #0
 8011290:	f501 71dc 	add.w	r1, r1, #440	; 0x1b8
 8011294:	f7ff bba0 	b.w	80109d8 <theme_apply+0x174>
 8011298:	9001      	str	r0, [sp, #4]
    else if(lv_obj_check_type(obj, &lv_list_btn_class)) {
 801129a:	4620      	mov	r0, r4
 801129c:	4961      	ldr	r1, [pc, #388]	; (8011424 <theme_apply+0xbc0>)
 801129e:	f7f3 f879 	bl	8004394 <lv_obj_check_type>
 80112a2:	4605      	mov	r5, r0
 80112a4:	b320      	cbz	r0, 80112f0 <theme_apply+0xa8c>
        lv_obj_add_style(obj, &styles->bg_color_white, 0);
 80112a6:	4d57      	ldr	r5, [pc, #348]	; (8011404 <theme_apply+0xba0>)
 80112a8:	4620      	mov	r0, r4
 80112aa:	9a01      	ldr	r2, [sp, #4]
 80112ac:	6829      	ldr	r1, [r5, #0]
 80112ae:	3150      	adds	r1, #80	; 0x50
 80112b0:	f7f5 fe2c 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->list_btn, 0);
 80112b4:	6829      	ldr	r1, [r5, #0]
 80112b6:	9a01      	ldr	r2, [sp, #4]
 80112b8:	4620      	mov	r0, r4
 80112ba:	f501 71d8 	add.w	r1, r1, #432	; 0x1b0
 80112be:	f7f5 fe25 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_primary, LV_STATE_FOCUS_KEY);
 80112c2:	6829      	ldr	r1, [r5, #0]
 80112c4:	2204      	movs	r2, #4
 80112c6:	4620      	mov	r0, r4
 80112c8:	3128      	adds	r1, #40	; 0x28
 80112ca:	f7f5 fe1f 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->list_item_grow, LV_STATE_FOCUS_KEY);
 80112ce:	6829      	ldr	r1, [r5, #0]
 80112d0:	2204      	movs	r2, #4
 80112d2:	4620      	mov	r0, r4
 80112d4:	f501 71dc 	add.w	r1, r1, #440	; 0x1b8
 80112d8:	f7f5 fe18 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->list_item_grow, LV_STATE_PRESSED);
 80112dc:	6829      	ldr	r1, [r5, #0]
 80112de:	2220      	movs	r2, #32
 80112e0:	4620      	mov	r0, r4
 80112e2:	f501 71dc 	add.w	r1, r1, #440	; 0x1b8
 80112e6:	f7f5 fe11 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pressed, LV_STATE_PRESSED);
 80112ea:	6829      	ldr	r1, [r5, #0]
 80112ec:	2220      	movs	r2, #32
 80112ee:	e6ab      	b.n	8011048 <theme_apply+0x7e4>
    else if(lv_obj_check_type(obj, &lv_msgbox_class)) {
 80112f0:	494d      	ldr	r1, [pc, #308]	; (8011428 <theme_apply+0xbc4>)
 80112f2:	4620      	mov	r0, r4
 80112f4:	f7f3 f84e 	bl	8004394 <lv_obj_check_type>
 80112f8:	b160      	cbz	r0, 8011314 <theme_apply+0xab0>
        lv_obj_add_style(obj, &styles->card, 0);
 80112fa:	4e42      	ldr	r6, [pc, #264]	; (8011404 <theme_apply+0xba0>)
 80112fc:	462a      	mov	r2, r5
 80112fe:	4620      	mov	r0, r4
 8011300:	6831      	ldr	r1, [r6, #0]
 8011302:	3118      	adds	r1, #24
 8011304:	f7f5 fe02 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->msgbox_bg, 0);
 8011308:	6831      	ldr	r1, [r6, #0]
 801130a:	462a      	mov	r2, r5
 801130c:	f501 71c8 	add.w	r1, r1, #400	; 0x190
 8011310:	f7ff babe 	b.w	8010890 <theme_apply+0x2c>
 8011314:	9001      	str	r0, [sp, #4]
    else if(lv_obj_check_type(obj, &lv_spinbox_class)) {
 8011316:	4620      	mov	r0, r4
 8011318:	4944      	ldr	r1, [pc, #272]	; (801142c <theme_apply+0xbc8>)
 801131a:	f7f3 f83b 	bl	8004394 <lv_obj_check_type>
 801131e:	4605      	mov	r5, r0
 8011320:	b1e0      	cbz	r0, 801135c <theme_apply+0xaf8>
        lv_obj_add_style(obj, &styles->card, 0);
 8011322:	4d38      	ldr	r5, [pc, #224]	; (8011404 <theme_apply+0xba0>)
 8011324:	4620      	mov	r0, r4
 8011326:	9a01      	ldr	r2, [sp, #4]
 8011328:	6829      	ldr	r1, [r5, #0]
 801132a:	3118      	adds	r1, #24
 801132c:	f7f5 fdee 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pad_small, 0);
 8011330:	6829      	ldr	r1, [r5, #0]
 8011332:	9a01      	ldr	r2, [sp, #4]
 8011334:	4620      	mov	r0, r4
 8011336:	3178      	adds	r1, #120	; 0x78
 8011338:	f7f5 fde8 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_primary, LV_STATE_FOCUS_KEY);
 801133c:	6829      	ldr	r1, [r5, #0]
 801133e:	2204      	movs	r2, #4
 8011340:	4620      	mov	r0, r4
 8011342:	31a0      	adds	r1, #160	; 0xa0
 8011344:	f7f5 fde2 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_secondary, LV_STATE_EDITED);
 8011348:	6829      	ldr	r1, [r5, #0]
 801134a:	2208      	movs	r2, #8
 801134c:	4620      	mov	r0, r4
 801134e:	31a8      	adds	r1, #168	; 0xa8
 8011350:	f7f5 fddc 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_primary, LV_PART_CURSOR);
 8011354:	6829      	ldr	r1, [r5, #0]
 8011356:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 801135a:	e600      	b.n	8010f5e <theme_apply+0x6fa>
    else if(lv_obj_check_type(obj, &lv_tileview_class)) {
 801135c:	4934      	ldr	r1, [pc, #208]	; (8011430 <theme_apply+0xbcc>)
 801135e:	4620      	mov	r0, r4
 8011360:	f7f3 f818 	bl	8004394 <lv_obj_check_type>
 8011364:	b188      	cbz	r0, 801138a <theme_apply+0xb26>
        lv_obj_add_style(obj, &styles->scr, 0);
 8011366:	4e27      	ldr	r6, [pc, #156]	; (8011404 <theme_apply+0xba0>)
 8011368:	462a      	mov	r2, r5
 801136a:	4620      	mov	r0, r4
 801136c:	6831      	ldr	r1, [r6, #0]
 801136e:	f7f5 fdcd 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar, LV_PART_SCROLLBAR);
 8011372:	6831      	ldr	r1, [r6, #0]
 8011374:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8011378:	4620      	mov	r0, r4
 801137a:	3108      	adds	r1, #8
 801137c:	f7f5 fdc6 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar_scrolled, LV_PART_SCROLLBAR | LV_STATE_SCROLLED);
 8011380:	6831      	ldr	r1, [r6, #0]
        lv_obj_add_style(obj, &styles->scrollbar_scrolled, LV_PART_SCROLLBAR | LV_STATE_SCROLLED);
 8011382:	4a2c      	ldr	r2, [pc, #176]	; (8011434 <theme_apply+0xbd0>)
 8011384:	3110      	adds	r1, #16
 8011386:	f7ff bb27 	b.w	80109d8 <theme_apply+0x174>
    else if(lv_obj_check_type(obj, &lv_tileview_tile_class)) {
 801138a:	492b      	ldr	r1, [pc, #172]	; (8011438 <theme_apply+0xbd4>)
 801138c:	4620      	mov	r0, r4
 801138e:	f7f3 f801 	bl	8004394 <lv_obj_check_type>
 8011392:	2800      	cmp	r0, #0
 8011394:	f43f ab23 	beq.w	80109de <theme_apply+0x17a>
        lv_obj_add_style(obj, &styles->scrollbar, LV_PART_SCROLLBAR);
 8011398:	4d1a      	ldr	r5, [pc, #104]	; (8011404 <theme_apply+0xba0>)
 801139a:	f7ff bacd 	b.w	8010938 <theme_apply+0xd4>
 801139e:	9001      	str	r0, [sp, #4]
    else if(lv_obj_check_type(obj, &lv_colorwheel_class)) {
 80113a0:	4620      	mov	r0, r4
 80113a2:	4926      	ldr	r1, [pc, #152]	; (801143c <theme_apply+0xbd8>)
 80113a4:	f7f2 fff6 	bl	8004394 <lv_obj_check_type>
 80113a8:	4606      	mov	r6, r0
 80113aa:	b1d0      	cbz	r0, 80113e2 <theme_apply+0xb7e>
        lv_obj_add_style(obj, &styles->colorwheel_main, 0);
 80113ac:	4e15      	ldr	r6, [pc, #84]	; (8011404 <theme_apply+0xba0>)
 80113ae:	4620      	mov	r0, r4
 80113b0:	9a01      	ldr	r2, [sp, #4]
 80113b2:	6831      	ldr	r1, [r6, #0]
 80113b4:	f501 71c4 	add.w	r1, r1, #392	; 0x188
 80113b8:	f7f5 fda8 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pad_normal, 0);
 80113bc:	6831      	ldr	r1, [r6, #0]
 80113be:	9a01      	ldr	r2, [sp, #4]
 80113c0:	4620      	mov	r0, r4
 80113c2:	3180      	adds	r1, #128	; 0x80
 80113c4:	f7f5 fda2 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_white, LV_PART_KNOB);
 80113c8:	6831      	ldr	r1, [r6, #0]
 80113ca:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80113ce:	4620      	mov	r0, r4
 80113d0:	3150      	adds	r1, #80	; 0x50
 80113d2:	f7f5 fd9b 	bl	8006f0c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pad_normal, LV_PART_KNOB);
 80113d6:	6831      	ldr	r1, [r6, #0]
 80113d8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80113dc:	3180      	adds	r1, #128	; 0x80
 80113de:	f7ff ba57 	b.w	8010890 <theme_apply+0x2c>
    else if(lv_obj_check_type(obj, &lv_led_class)) {
 80113e2:	4917      	ldr	r1, [pc, #92]	; (8011440 <theme_apply+0xbdc>)
 80113e4:	4620      	mov	r0, r4
 80113e6:	f7f2 ffd5 	bl	8004394 <lv_obj_check_type>
 80113ea:	b130      	cbz	r0, 80113fa <theme_apply+0xb96>
            lv_obj_add_style(obj, &styles->led, 0);
 80113ec:	4b05      	ldr	r3, [pc, #20]	; (8011404 <theme_apply+0xba0>)
 80113ee:	4632      	mov	r2, r6
 80113f0:	6819      	ldr	r1, [r3, #0]
 80113f2:	f501 71ec 	add.w	r1, r1, #472	; 0x1d8
 80113f6:	f7ff ba4b 	b.w	8010890 <theme_apply+0x2c>
}
 80113fa:	b003      	add	sp, #12
 80113fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80113fe:	bf00      	nop
 8011400:	0802515c 	.word	0x0802515c
 8011404:	20002ae8 	.word	0x20002ae8
 8011408:	00050020 	.word	0x00050020
 801140c:	00050080 	.word	0x00050080
 8011410:	080255cc 	.word	0x080255cc
 8011414:	20002ad8 	.word	0x20002ad8
 8011418:	00050001 	.word	0x00050001
 801141c:	08025620 	.word	0x08025620
 8011420:	0802563c 	.word	0x0802563c
 8011424:	08025604 	.word	0x08025604
 8011428:	08025674 	.word	0x08025674
 801142c:	08025690 	.word	0x08025690
 8011430:	080256c8 	.word	0x080256c8
 8011434:	00010040 	.word	0x00010040
 8011438:	080256e4 	.word	0x080256e4
 801143c:	08025194 	.word	0x08025194
 8011440:	080255e8 	.word	0x080255e8

08011444 <grey_filter_cb>:
    if(theme.flags & MODE_DARK) return lv_color_mix(lv_palette_darken(LV_PALETTE_GREY, 2), color, opa);
 8011444:	4b0b      	ldr	r3, [pc, #44]	; (8011474 <grey_filter_cb+0x30>)
 8011446:	6a1b      	ldr	r3, [r3, #32]
 8011448:	07db      	lsls	r3, r3, #31
{
 801144a:	b513      	push	{r0, r1, r4, lr}
 801144c:	460c      	mov	r4, r1
    if(theme.flags & MODE_DARK) return lv_color_mix(lv_palette_darken(LV_PALETTE_GREY, 2), color, opa);
 801144e:	f04f 0012 	mov.w	r0, #18
 8011452:	f04f 0102 	mov.w	r1, #2
 8011456:	9201      	str	r2, [sp, #4]
 8011458:	d508      	bpl.n	801146c <grey_filter_cb+0x28>
 801145a:	f005 ff3b 	bl	80172d4 <lv_palette_darken>
    else return lv_color_mix(lv_palette_lighten(LV_PALETTE_GREY, 2), color, opa);
 801145e:	9a01      	ldr	r2, [sp, #4]
 8011460:	4621      	mov	r1, r4
}
 8011462:	b002      	add	sp, #8
 8011464:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    else return lv_color_mix(lv_palette_lighten(LV_PALETTE_GREY, 2), color, opa);
 8011468:	f7ff b9cf 	b.w	801080a <lv_color_mix>
 801146c:	f005 ff20 	bl	80172b0 <lv_palette_lighten>
 8011470:	e7f5      	b.n	801145e <grey_filter_cb+0x1a>
 8011472:	bf00      	nop
 8011474:	20002aec 	.word	0x20002aec

08011478 <dark_color_filter_cb>:
{
 8011478:	4608      	mov	r0, r1
    return lv_color_darken(c, opa);
 801147a:	4611      	mov	r1, r2
 801147c:	f005 be9e 	b.w	80171bc <lv_color_darken>

08011480 <lv_style_set_pad_row>:
            .num = (int32_t)val \
        } \
    }

static inline void lv_style_set_pad_row(lv_style_t * style, lv_coord_t value)
{
 8011480:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_PAD_ROW, v);
 8011482:	f241 0114 	movw	r1, #4116	; 0x1014
 8011486:	f007 b894 	b.w	80185b2 <lv_style_set_prop>

0801148a <lv_style_set_line_width>:
            .num = (int32_t)val \
        } \
    }

static inline void lv_style_set_line_width(lv_style_t * style, lv_coord_t value)
{
 801148a:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_LINE_WIDTH, v);
 801148c:	f640 0149 	movw	r1, #2121	; 0x849
 8011490:	f007 b88f 	b.w	80185b2 <lv_style_set_prop>

08011494 <lv_style_set_line_color>:
            .num = (int32_t)val \
        } \
    }

static inline void lv_style_set_line_color(lv_style_t * style, lv_color_t value)
{
 8011494:	b082      	sub	sp, #8
    lv_style_value_t v = {
 8011496:	2300      	movs	r3, #0
        .color = value
    };
    lv_style_set_prop(style, LV_STYLE_LINE_COLOR, v);
 8011498:	b28a      	uxth	r2, r1
 801149a:	214d      	movs	r1, #77	; 0x4d
    lv_style_value_t v = {
 801149c:	f8ad 3000 	strh.w	r3, [sp]
}
 80114a0:	b002      	add	sp, #8
    lv_style_set_prop(style, LV_STYLE_LINE_COLOR, v);
 80114a2:	f007 b886 	b.w	80185b2 <lv_style_set_prop>

080114a6 <lv_style_set_size>:
static inline void lv_style_set_pad_gap(lv_style_t * style, lv_coord_t value) {
    lv_style_set_pad_row(style, value);
    lv_style_set_pad_column(style, value);
}

static inline void lv_style_set_size(lv_style_t * style, lv_coord_t value) {
 80114a6:	b513      	push	{r0, r1, r4, lr}
 80114a8:	4604      	mov	r4, r0
 80114aa:	460a      	mov	r2, r1
    lv_style_set_prop(style, LV_STYLE_WIDTH, v);
 80114ac:	9101      	str	r1, [sp, #4]
 80114ae:	f241 0101 	movw	r1, #4097	; 0x1001
 80114b2:	f007 f87e 	bl	80185b2 <lv_style_set_prop>
    lv_style_set_prop(style, LV_STYLE_HEIGHT, v);
 80114b6:	9a01      	ldr	r2, [sp, #4]
 80114b8:	f241 0104 	movw	r1, #4100	; 0x1004
 80114bc:	4620      	mov	r0, r4
    lv_style_set_width(style, value);
    lv_style_set_height(style, value);
}
 80114be:	b002      	add	sp, #8
 80114c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80114c4:	f007 b875 	b.w	80185b2 <lv_style_set_prop>

080114c8 <lv_style_set_text_color>:
{
 80114c8:	b082      	sub	sp, #8
    lv_style_value_t v = {
 80114ca:	2300      	movs	r3, #0
    lv_style_set_prop(style, LV_STYLE_TEXT_COLOR, v);
 80114cc:	b28a      	uxth	r2, r1
 80114ce:	f240 4157 	movw	r1, #1111	; 0x457
    lv_style_value_t v = {
 80114d2:	f8ad 3000 	strh.w	r3, [sp]
}
 80114d6:	b002      	add	sp, #8
    lv_style_set_prop(style, LV_STYLE_TEXT_COLOR, v);
 80114d8:	f007 b86b 	b.w	80185b2 <lv_style_set_prop>

080114dc <lv_style_set_border_width>:
{
 80114dc:	460a      	mov	r2, r1
    lv_style_set_prop(style, LV_STYLE_BORDER_WIDTH, v);
 80114de:	f241 0132 	movw	r1, #4146	; 0x1032
 80114e2:	f007 b866 	b.w	80185b2 <lv_style_set_prop>

080114e6 <lv_style_set_border_color>:
{
 80114e6:	b082      	sub	sp, #8
    lv_style_value_t v = {
 80114e8:	2300      	movs	r3, #0
    lv_style_set_prop(style, LV_STYLE_BORDER_COLOR, v);
 80114ea:	b28a      	uxth	r2, r1
 80114ec:	2130      	movs	r1, #48	; 0x30
    lv_style_value_t v = {
 80114ee:	f8ad 3000 	strh.w	r3, [sp]
}
 80114f2:	b002      	add	sp, #8
    lv_style_set_prop(style, LV_STYLE_BORDER_COLOR, v);
 80114f4:	f007 b85d 	b.w	80185b2 <lv_style_set_prop>

080114f8 <lv_style_set_pad_column>:
{
 80114f8:	460a      	mov	r2, r1
    lv_style_set_prop(style, LV_STYLE_PAD_COLUMN, v);
 80114fa:	f241 0115 	movw	r1, #4117	; 0x1015
 80114fe:	f007 b858 	b.w	80185b2 <lv_style_set_prop>

08011502 <lv_style_set_bg_opa>:
{
 8011502:	460a      	mov	r2, r1
    lv_style_set_prop(style, LV_STYLE_BG_OPA, v);
 8011504:	2121      	movs	r1, #33	; 0x21
 8011506:	f007 b854 	b.w	80185b2 <lv_style_set_prop>

0801150a <lv_style_set_bg_color>:
{
 801150a:	b082      	sub	sp, #8
    lv_style_value_t v = {
 801150c:	2300      	movs	r3, #0
    lv_style_set_prop(style, LV_STYLE_BG_COLOR, v);
 801150e:	b28a      	uxth	r2, r1
 8011510:	2120      	movs	r1, #32
    lv_style_value_t v = {
 8011512:	f8ad 3000 	strh.w	r3, [sp]
}
 8011516:	b002      	add	sp, #8
    lv_style_set_prop(style, LV_STYLE_BG_COLOR, v);
 8011518:	f007 b84b 	b.w	80185b2 <lv_style_set_prop>

0801151c <lv_style_set_radius>:
{
 801151c:	460a      	mov	r2, r1
    lv_style_set_prop(style, LV_STYLE_RADIUS, v);
 801151e:	2160      	movs	r1, #96	; 0x60
 8011520:	f007 b847 	b.w	80185b2 <lv_style_set_prop>

08011524 <style_init_reset>:
 *   STATIC FUNCTIONS
 **********************/

static void style_init_reset(lv_style_t * style)
{
    if(inited) lv_style_reset(style);
 8011524:	4b03      	ldr	r3, [pc, #12]	; (8011534 <style_init_reset+0x10>)
 8011526:	781b      	ldrb	r3, [r3, #0]
 8011528:	b10b      	cbz	r3, 801152e <style_init_reset+0xa>
 801152a:	f006 bf1d 	b.w	8018368 <lv_style_reset>
    else lv_style_init(style);
 801152e:	f006 bf18 	b.w	8018362 <lv_style_init>
 8011532:	bf00      	nop
 8011534:	20002ae4 	.word	0x20002ae4

08011538 <lv_disp_dpx.part.0>:
 * DPI of the display.
 * @param obj   an display whose dpi should be considered
 * @param n     the number of pixels to scale
 * @return      `n x current_dpi/160`
 */
static inline lv_coord_t lv_disp_dpx(const lv_disp_t * disp, lv_coord_t n)
 8011538:	b538      	push	{r3, r4, r5, lr}
 801153a:	460c      	mov	r4, r1
 801153c:	4605      	mov	r5, r0
{
    return _LV_DPX_CALC(lv_disp_get_dpi(disp), n);
 801153e:	f005 f9d9 	bl	80168f4 <lv_disp_get_dpi>
 8011542:	4360      	muls	r0, r4
 8011544:	28ef      	cmp	r0, #239	; 0xef
 8011546:	dd0a      	ble.n	801155e <lv_disp_dpx.part.0+0x26>
 8011548:	4628      	mov	r0, r5
 801154a:	f005 f9d3 	bl	80168f4 <lv_disp_get_dpi>
 801154e:	2150      	movs	r1, #80	; 0x50
 8011550:	fb04 1000 	mla	r0, r4, r0, r1
 8011554:	21a0      	movs	r1, #160	; 0xa0
 8011556:	fb90 f0f1 	sdiv	r0, r0, r1
 801155a:	b200      	sxth	r0, r0
}
 801155c:	bd38      	pop	{r3, r4, r5, pc}
    return _LV_DPX_CALC(lv_disp_get_dpi(disp), n);
 801155e:	2001      	movs	r0, #1
 8011560:	e7fc      	b.n	801155c <lv_disp_dpx.part.0+0x24>

08011562 <lv_style_set_pad_hor>:
static inline void lv_style_set_pad_hor(lv_style_t * style, lv_coord_t value) {
 8011562:	b513      	push	{r0, r1, r4, lr}
 8011564:	4604      	mov	r4, r0
 8011566:	460a      	mov	r2, r1
    lv_style_set_prop(style, LV_STYLE_PAD_LEFT, v);
 8011568:	9101      	str	r1, [sp, #4]
 801156a:	f241 0112 	movw	r1, #4114	; 0x1012
 801156e:	f007 f820 	bl	80185b2 <lv_style_set_prop>
    lv_style_set_prop(style, LV_STYLE_PAD_RIGHT, v);
 8011572:	9a01      	ldr	r2, [sp, #4]
 8011574:	f241 0113 	movw	r1, #4115	; 0x1013
 8011578:	4620      	mov	r0, r4
}
 801157a:	b002      	add	sp, #8
 801157c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011580:	f007 b817 	b.w	80185b2 <lv_style_set_prop>

08011584 <lv_style_set_pad_ver>:
static inline void lv_style_set_pad_ver(lv_style_t * style, lv_coord_t value) {
 8011584:	b513      	push	{r0, r1, r4, lr}
 8011586:	4604      	mov	r4, r0
 8011588:	460a      	mov	r2, r1
    lv_style_set_prop(style, LV_STYLE_PAD_TOP, v);
 801158a:	9101      	str	r1, [sp, #4]
 801158c:	f241 0110 	movw	r1, #4112	; 0x1010
 8011590:	f007 f80f 	bl	80185b2 <lv_style_set_prop>
    lv_style_set_prop(style, LV_STYLE_PAD_BOTTOM, v);
 8011594:	9a01      	ldr	r2, [sp, #4]
 8011596:	f241 0111 	movw	r1, #4113	; 0x1011
 801159a:	4620      	mov	r0, r4
}
 801159c:	b002      	add	sp, #8
 801159e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80115a2:	f007 b806 	b.w	80185b2 <lv_style_set_prop>

080115a6 <lv_style_set_pad_all>:
static inline void lv_style_set_pad_all(lv_style_t * style, lv_coord_t value) {
 80115a6:	b513      	push	{r0, r1, r4, lr}
 80115a8:	4604      	mov	r4, r0
 80115aa:	460a      	mov	r2, r1
    lv_style_set_prop(style, LV_STYLE_PAD_LEFT, v);
 80115ac:	9101      	str	r1, [sp, #4]
 80115ae:	f241 0112 	movw	r1, #4114	; 0x1012
 80115b2:	f006 fffe 	bl	80185b2 <lv_style_set_prop>
    lv_style_set_prop(style, LV_STYLE_PAD_RIGHT, v);
 80115b6:	9a01      	ldr	r2, [sp, #4]
 80115b8:	4620      	mov	r0, r4
 80115ba:	f241 0113 	movw	r1, #4115	; 0x1013
 80115be:	f006 fff8 	bl	80185b2 <lv_style_set_prop>
    lv_style_set_prop(style, LV_STYLE_PAD_TOP, v);
 80115c2:	9a01      	ldr	r2, [sp, #4]
 80115c4:	4620      	mov	r0, r4
 80115c6:	f241 0110 	movw	r1, #4112	; 0x1010
 80115ca:	f006 fff2 	bl	80185b2 <lv_style_set_prop>
    lv_style_set_prop(style, LV_STYLE_PAD_BOTTOM, v);
 80115ce:	9a01      	ldr	r2, [sp, #4]
 80115d0:	f241 0111 	movw	r1, #4113	; 0x1011
 80115d4:	4620      	mov	r0, r4
}
 80115d6:	b002      	add	sp, #8
 80115d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80115dc:	f006 bfe9 	b.w	80185b2 <lv_style_set_prop>

080115e0 <lv_theme_default_init>:
{
 80115e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115e4:	4699      	mov	r9, r3
    if(!inited) {
 80115e6:	4ba7      	ldr	r3, [pc, #668]	; (8011884 <lv_theme_default_init+0x2a4>)
{
 80115e8:	b087      	sub	sp, #28
 80115ea:	4680      	mov	r8, r0
    if(!inited) {
 80115ec:	781b      	ldrb	r3, [r3, #0]
{
 80115ee:	468b      	mov	fp, r1
 80115f0:	4692      	mov	sl, r2
 80115f2:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80115f4:	4ca4      	ldr	r4, [pc, #656]	; (8011888 <lv_theme_default_init+0x2a8>)
    if(!inited) {
 80115f6:	b933      	cbnz	r3, 8011606 <lv_theme_default_init+0x26>
        LV_GC_ROOT(_lv_theme_default_styles) = lv_mem_alloc(sizeof(my_theme_styles_t));
 80115f8:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 80115fc:	f006 fa1c 	bl	8017a38 <lv_mem_alloc>
 8011600:	4ba2      	ldr	r3, [pc, #648]	; (801188c <lv_theme_default_init+0x2ac>)
        styles = (my_theme_styles_t *)LV_GC_ROOT(_lv_theme_default_styles);
 8011602:	6020      	str	r0, [r4, #0]
        LV_GC_ROOT(_lv_theme_default_styles) = lv_mem_alloc(sizeof(my_theme_styles_t));
 8011604:	6018      	str	r0, [r3, #0]
    if(LV_HOR_RES <= 320) disp_size = DISP_SMALL;
 8011606:	f005 f94f 	bl	80168a8 <lv_disp_get_default>
 801160a:	4ea1      	ldr	r6, [pc, #644]	; (8011890 <lv_theme_default_init+0x2b0>)
 801160c:	f005 f952 	bl	80168b4 <lv_disp_get_hor_res>
 8011610:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
 8011614:	f301 800c 	bgt.w	8012630 <lv_theme_default_init+0x1050>
 8011618:	2303      	movs	r3, #3
    theme.disp = disp;
 801161a:	4d9e      	ldr	r5, [pc, #632]	; (8011894 <lv_theme_default_init+0x2b4>)
    else disp_size = DISP_LARGE;
 801161c:	7033      	strb	r3, [r6, #0]
    theme.apply_cb = theme_apply;
 801161e:	4b9e      	ldr	r3, [pc, #632]	; (8011898 <lv_theme_default_init+0x2b8>)
    theme.color_secondary = color_secondary;
 8011620:	f8a5 a012 	strh.w	sl, [r5, #18]
    theme.font_large = font;
 8011624:	61ef      	str	r7, [r5, #28]
 8011626:	f8df a28c 	ldr.w	sl, [pc, #652]	; 80118b4 <lv_theme_default_init+0x2d4>
    theme.disp = disp;
 801162a:	f8c5 800c 	str.w	r8, [r5, #12]
    theme.color_primary = color_primary;
 801162e:	f8a5 b010 	strh.w	fp, [r5, #16]
    theme.apply_cb = theme_apply;
 8011632:	602b      	str	r3, [r5, #0]
    theme.flags = dark ? MODE_DARK : 0;
 8011634:	f8c5 9020 	str.w	r9, [r5, #32]
    theme.font_normal = font;
 8011638:	e9c5 7705 	strd	r7, r7, [r5, #20]
    color_scr = theme.flags & MODE_DARK ? DARK_COLOR_SCR : LIGHT_COLOR_SCR;
 801163c:	4f97      	ldr	r7, [pc, #604]	; (801189c <lv_theme_default_init+0x2bc>)
 801163e:	f1b9 0f00 	cmp.w	r9, #0
 8011642:	f001 8000 	beq.w	8012646 <lv_theme_default_init+0x1066>
 8011646:	f241 03a3 	movw	r3, #4259	; 0x10a3
 801164a:	f8aa 3000 	strh.w	r3, [sl]
    color_text = theme.flags & MODE_DARK ? DARK_COLOR_TEXT : LIGHT_COLOR_TEXT;
 801164e:	2105      	movs	r1, #5
 8011650:	2012      	movs	r0, #18
 8011652:	f005 fe2d 	bl	80172b0 <lv_palette_lighten>
    color_card = theme.flags & MODE_DARK ? DARK_COLOR_CARD : LIGHT_COLOR_CARD;
 8011656:	6a2b      	ldr	r3, [r5, #32]
 8011658:	f8df 925c 	ldr.w	r9, [pc, #604]	; 80118b8 <lv_theme_default_init+0x2d8>
 801165c:	f013 0f01 	tst.w	r3, #1
    color_text = theme.flags & MODE_DARK ? DARK_COLOR_TEXT : LIGHT_COLOR_TEXT;
 8011660:	8038      	strh	r0, [r7, #0]
    color_card = theme.flags & MODE_DARK ? DARK_COLOR_CARD : LIGHT_COLOR_CARD;
 8011662:	f001 8000 	beq.w	8012666 <lv_theme_default_init+0x1086>
 8011666:	f642 1346 	movw	r3, #10566	; 0x2946
 801166a:	4a8d      	ldr	r2, [pc, #564]	; (80118a0 <lv_theme_default_init+0x2c0>)
 801166c:	8013      	strh	r3, [r2, #0]
    color_grey = theme.flags & MODE_DARK ? DARK_COLOR_GREY : LIGHT_COLOR_GREY;
 801166e:	f642 1386 	movw	r3, #10630	; 0x2986
 8011672:	f8a9 3000 	strh.w	r3, [r9]
    lv_style_transition_dsc_init(&trans_delayed, trans_props, lv_anim_path_linear, TRANSITION_TIME, 70, NULL);
 8011676:	f04f 0b00 	mov.w	fp, #0
 801167a:	2346      	movs	r3, #70	; 0x46
 801167c:	4a89      	ldr	r2, [pc, #548]	; (80118a4 <lv_theme_default_init+0x2c4>)
 801167e:	498a      	ldr	r1, [pc, #552]	; (80118a8 <lv_theme_default_init+0x2c8>)
 8011680:	488a      	ldr	r0, [pc, #552]	; (80118ac <lv_theme_default_init+0x2cc>)
 8011682:	e9cd 3b00 	strd	r3, fp, [sp]
 8011686:	2350      	movs	r3, #80	; 0x50
 8011688:	f006 ff1a 	bl	80184c0 <lv_style_transition_dsc_init>
    lv_style_transition_dsc_init(&trans_normal, trans_props, lv_anim_path_linear, TRANSITION_TIME, 0, NULL);
 801168c:	2350      	movs	r3, #80	; 0x50
 801168e:	4a85      	ldr	r2, [pc, #532]	; (80118a4 <lv_theme_default_init+0x2c4>)
 8011690:	4985      	ldr	r1, [pc, #532]	; (80118a8 <lv_theme_default_init+0x2c8>)
 8011692:	4887      	ldr	r0, [pc, #540]	; (80118b0 <lv_theme_default_init+0x2d0>)
 8011694:	e9cd bb00 	strd	fp, fp, [sp]
 8011698:	f006 ff12 	bl	80184c0 <lv_style_transition_dsc_init>
    style_init_reset(&styles->transition_delayed);
 801169c:	6820      	ldr	r0, [r4, #0]
 801169e:	30d0      	adds	r0, #208	; 0xd0
 80116a0:	f7ff ff40 	bl	8011524 <style_init_reset>
    lv_style_set_transition(&styles->transition_delayed, &trans_delayed); /*Go back to default state with delay*/
 80116a4:	6820      	ldr	r0, [r4, #0]
    lv_style_set_prop(style, LV_STYLE_TRANSITION, v);
 80116a6:	4a81      	ldr	r2, [pc, #516]	; (80118ac <lv_theme_default_init+0x2cc>)
 80116a8:	2167      	movs	r1, #103	; 0x67
 80116aa:	30d0      	adds	r0, #208	; 0xd0
 80116ac:	f006 ff81 	bl	80185b2 <lv_style_set_prop>
    style_init_reset(&styles->transition_normal);
 80116b0:	6820      	ldr	r0, [r4, #0]
 80116b2:	30d8      	adds	r0, #216	; 0xd8
 80116b4:	f7ff ff36 	bl	8011524 <style_init_reset>
    lv_style_set_transition(&styles->transition_normal, &trans_normal); /*Go back to default state with delay*/
 80116b8:	6820      	ldr	r0, [r4, #0]
 80116ba:	4a7d      	ldr	r2, [pc, #500]	; (80118b0 <lv_theme_default_init+0x2d0>)
 80116bc:	2167      	movs	r1, #103	; 0x67
 80116be:	30d8      	adds	r0, #216	; 0xd8
 80116c0:	f006 ff77 	bl	80185b2 <lv_style_set_prop>
    style_init_reset(&styles->scrollbar);
 80116c4:	6820      	ldr	r0, [r4, #0]
 80116c6:	3008      	adds	r0, #8
 80116c8:	f7ff ff2c 	bl	8011524 <style_init_reset>
    lv_style_set_bg_color(&styles->scrollbar, (theme.flags & MODE_DARK) ? lv_palette_darken(LV_PALETTE_GREY, 2) : lv_palette_main(LV_PALETTE_GREY));
 80116cc:	6823      	ldr	r3, [r4, #0]
 80116ce:	f103 0b08 	add.w	fp, r3, #8
 80116d2:	6a2b      	ldr	r3, [r5, #32]
 80116d4:	07da      	lsls	r2, r3, #31
 80116d6:	f140 87d6 	bpl.w	8012686 <lv_theme_default_init+0x10a6>
 80116da:	2102      	movs	r1, #2
 80116dc:	2012      	movs	r0, #18
 80116de:	f005 fdf9 	bl	80172d4 <lv_palette_darken>
 80116e2:	4601      	mov	r1, r0
 80116e4:	4658      	mov	r0, fp
 80116e6:	f7ff ff10 	bl	801150a <lv_style_set_bg_color>
    lv_style_set_radius(&styles->scrollbar, LV_RADIUS_CIRCLE);
 80116ea:	6820      	ldr	r0, [r4, #0]
 80116ec:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80116f0:	3008      	adds	r0, #8
 80116f2:	f7ff ff13 	bl	801151c <lv_style_set_radius>
    lv_style_set_pad_right(&styles->scrollbar, lv_disp_dpx(theme.disp, 7));
 80116f6:	6823      	ldr	r3, [r4, #0]
 80116f8:	2107      	movs	r1, #7
 80116fa:	68e8      	ldr	r0, [r5, #12]
 80116fc:	f103 0b08 	add.w	fp, r3, #8
 8011700:	f7ff ff1a 	bl	8011538 <lv_disp_dpx.part.0>
    lv_style_set_prop(style, LV_STYLE_PAD_RIGHT, v);
 8011704:	f241 0113 	movw	r1, #4115	; 0x1013
 8011708:	4602      	mov	r2, r0
 801170a:	4658      	mov	r0, fp
 801170c:	f006 ff51 	bl	80185b2 <lv_style_set_prop>
    lv_style_set_pad_top(&styles->scrollbar,  lv_disp_dpx(theme.disp, 7));
 8011710:	6823      	ldr	r3, [r4, #0]
 8011712:	2107      	movs	r1, #7
 8011714:	68e8      	ldr	r0, [r5, #12]
 8011716:	f103 0b08 	add.w	fp, r3, #8
 801171a:	f7ff ff0d 	bl	8011538 <lv_disp_dpx.part.0>
    lv_style_set_prop(style, LV_STYLE_PAD_TOP, v);
 801171e:	f241 0110 	movw	r1, #4112	; 0x1010
 8011722:	4602      	mov	r2, r0
 8011724:	4658      	mov	r0, fp
 8011726:	f006 ff44 	bl	80185b2 <lv_style_set_prop>
    lv_style_set_size(&styles->scrollbar,  lv_disp_dpx(theme.disp, 5));
 801172a:	6820      	ldr	r0, [r4, #0]
 801172c:	2105      	movs	r1, #5
 801172e:	f100 0b08 	add.w	fp, r0, #8
 8011732:	68e8      	ldr	r0, [r5, #12]
 8011734:	f7ff ff00 	bl	8011538 <lv_disp_dpx.part.0>
 8011738:	4601      	mov	r1, r0
 801173a:	4658      	mov	r0, fp
 801173c:	f7ff feb3 	bl	80114a6 <lv_style_set_size>
    lv_style_set_bg_opa(&styles->scrollbar,  LV_OPA_40);
 8011740:	6820      	ldr	r0, [r4, #0]
 8011742:	2166      	movs	r1, #102	; 0x66
 8011744:	3008      	adds	r0, #8
 8011746:	f7ff fedc 	bl	8011502 <lv_style_set_bg_opa>
    lv_style_set_transition(&styles->scrollbar, &trans_normal);
 801174a:	6820      	ldr	r0, [r4, #0]
    lv_style_set_prop(style, LV_STYLE_TRANSITION, v);
 801174c:	4a58      	ldr	r2, [pc, #352]	; (80118b0 <lv_theme_default_init+0x2d0>)
 801174e:	2167      	movs	r1, #103	; 0x67
 8011750:	3008      	adds	r0, #8
 8011752:	f006 ff2e 	bl	80185b2 <lv_style_set_prop>
    style_init_reset(&styles->scrollbar_scrolled);
 8011756:	6820      	ldr	r0, [r4, #0]
 8011758:	3010      	adds	r0, #16
 801175a:	f7ff fee3 	bl	8011524 <style_init_reset>
    lv_style_set_bg_opa(&styles->scrollbar_scrolled,  LV_OPA_COVER);
 801175e:	6820      	ldr	r0, [r4, #0]
 8011760:	21ff      	movs	r1, #255	; 0xff
 8011762:	3010      	adds	r0, #16
 8011764:	f7ff fecd 	bl	8011502 <lv_style_set_bg_opa>
    style_init_reset(&styles->scr);
 8011768:	6820      	ldr	r0, [r4, #0]
 801176a:	f7ff fedb 	bl	8011524 <style_init_reset>
    lv_style_set_bg_opa(&styles->scr, LV_OPA_COVER);
 801176e:	21ff      	movs	r1, #255	; 0xff
 8011770:	6820      	ldr	r0, [r4, #0]
 8011772:	f7ff fec6 	bl	8011502 <lv_style_set_bg_opa>
    lv_style_set_bg_color(&styles->scr, color_scr);
 8011776:	f8ba 1000 	ldrh.w	r1, [sl]
 801177a:	6820      	ldr	r0, [r4, #0]
 801177c:	f7ff fec5 	bl	801150a <lv_style_set_bg_color>
    lv_style_set_text_color(&styles->scr, color_text);
 8011780:	8839      	ldrh	r1, [r7, #0]
 8011782:	6820      	ldr	r0, [r4, #0]
 8011784:	f7ff fea0 	bl	80114c8 <lv_style_set_text_color>
    lv_style_set_pad_row(&styles->scr, PAD_SMALL);
 8011788:	7833      	ldrb	r3, [r6, #0]
 801178a:	f8d4 a000 	ldr.w	sl, [r4]
 801178e:	2b01      	cmp	r3, #1
 8011790:	f040 877e 	bne.w	8012690 <lv_theme_default_init+0x10b0>
 8011794:	210e      	movs	r1, #14
 8011796:	68e8      	ldr	r0, [r5, #12]
 8011798:	f7ff fece 	bl	8011538 <lv_disp_dpx.part.0>
 801179c:	4601      	mov	r1, r0
 801179e:	4650      	mov	r0, sl
 80117a0:	f7ff fe6e 	bl	8011480 <lv_style_set_pad_row>
    lv_style_set_pad_column(&styles->scr, PAD_SMALL);
 80117a4:	7833      	ldrb	r3, [r6, #0]
 80117a6:	f8d4 a000 	ldr.w	sl, [r4]
 80117aa:	2b01      	cmp	r3, #1
 80117ac:	f040 8777 	bne.w	801269e <lv_theme_default_init+0x10be>
 80117b0:	210e      	movs	r1, #14
 80117b2:	68e8      	ldr	r0, [r5, #12]
 80117b4:	f7ff fec0 	bl	8011538 <lv_disp_dpx.part.0>
 80117b8:	4601      	mov	r1, r0
 80117ba:	4650      	mov	r0, sl
 80117bc:	f7ff fe9c 	bl	80114f8 <lv_style_set_pad_column>
    style_init_reset(&styles->card);
 80117c0:	6820      	ldr	r0, [r4, #0]
 80117c2:	3018      	adds	r0, #24
 80117c4:	f7ff feae 	bl	8011524 <style_init_reset>
    lv_style_set_radius(&styles->card, RADIUS_DEFAULT);
 80117c8:	6823      	ldr	r3, [r4, #0]
 80117ca:	68e8      	ldr	r0, [r5, #12]
 80117cc:	f103 0a18 	add.w	sl, r3, #24
 80117d0:	7833      	ldrb	r3, [r6, #0]
 80117d2:	2b01      	cmp	r3, #1
 80117d4:	bf0c      	ite	eq
 80117d6:	210c      	moveq	r1, #12
 80117d8:	2108      	movne	r1, #8
 80117da:	f7ff fead 	bl	8011538 <lv_disp_dpx.part.0>
 80117de:	4601      	mov	r1, r0
 80117e0:	4650      	mov	r0, sl
 80117e2:	f7ff fe9b 	bl	801151c <lv_style_set_radius>
    lv_style_set_bg_opa(&styles->card, LV_OPA_COVER);
 80117e6:	6820      	ldr	r0, [r4, #0]
 80117e8:	21ff      	movs	r1, #255	; 0xff
 80117ea:	3018      	adds	r0, #24
 80117ec:	f7ff fe89 	bl	8011502 <lv_style_set_bg_opa>
    lv_style_set_bg_color(&styles->card, color_card);
 80117f0:	4b2b      	ldr	r3, [pc, #172]	; (80118a0 <lv_theme_default_init+0x2c0>)
 80117f2:	6820      	ldr	r0, [r4, #0]
 80117f4:	8819      	ldrh	r1, [r3, #0]
 80117f6:	3018      	adds	r0, #24
 80117f8:	f7ff fe87 	bl	801150a <lv_style_set_bg_color>
    lv_style_set_border_color(&styles->card, color_grey);
 80117fc:	6820      	ldr	r0, [r4, #0]
 80117fe:	f8b9 1000 	ldrh.w	r1, [r9]
 8011802:	3018      	adds	r0, #24
 8011804:	f7ff fe6f 	bl	80114e6 <lv_style_set_border_color>
    lv_style_set_border_width(&styles->card, BORDER_WIDTH);
 8011808:	6820      	ldr	r0, [r4, #0]
 801180a:	2102      	movs	r1, #2
 801180c:	f100 0a18 	add.w	sl, r0, #24
 8011810:	68e8      	ldr	r0, [r5, #12]
 8011812:	f7ff fe91 	bl	8011538 <lv_disp_dpx.part.0>
 8011816:	4601      	mov	r1, r0
 8011818:	4650      	mov	r0, sl
 801181a:	f7ff fe5f 	bl	80114dc <lv_style_set_border_width>
    lv_style_set_border_post(&styles->card, true);
 801181e:	6820      	ldr	r0, [r4, #0]
    lv_style_set_prop(style, LV_STYLE_BORDER_POST, v);
 8011820:	2201      	movs	r2, #1
 8011822:	2134      	movs	r1, #52	; 0x34
 8011824:	3018      	adds	r0, #24
 8011826:	f006 fec4 	bl	80185b2 <lv_style_set_prop>
    lv_style_set_text_color(&styles->card, color_text);
 801182a:	6820      	ldr	r0, [r4, #0]
 801182c:	8839      	ldrh	r1, [r7, #0]
 801182e:	3018      	adds	r0, #24
 8011830:	f7ff fe4a 	bl	80114c8 <lv_style_set_text_color>
    lv_style_set_pad_all(&styles->card, PAD_DEF);
 8011834:	6823      	ldr	r3, [r4, #0]
 8011836:	f103 0a18 	add.w	sl, r3, #24
 801183a:	7833      	ldrb	r3, [r6, #0]
 801183c:	2b01      	cmp	r3, #1
 801183e:	f040 8735 	bne.w	80126ac <lv_theme_default_init+0x10cc>
 8011842:	2118      	movs	r1, #24
 8011844:	68e8      	ldr	r0, [r5, #12]
 8011846:	f7ff fe77 	bl	8011538 <lv_disp_dpx.part.0>
 801184a:	4601      	mov	r1, r0
 801184c:	4650      	mov	r0, sl
 801184e:	f7ff feaa 	bl	80115a6 <lv_style_set_pad_all>
    lv_style_set_pad_row(&styles->card, PAD_SMALL);
 8011852:	6823      	ldr	r3, [r4, #0]
 8011854:	f103 0a18 	add.w	sl, r3, #24
 8011858:	7833      	ldrb	r3, [r6, #0]
 801185a:	2b01      	cmp	r3, #1
 801185c:	f040 872d 	bne.w	80126ba <lv_theme_default_init+0x10da>
 8011860:	210e      	movs	r1, #14
 8011862:	68e8      	ldr	r0, [r5, #12]
 8011864:	f7ff fe68 	bl	8011538 <lv_disp_dpx.part.0>
 8011868:	4601      	mov	r1, r0
 801186a:	4650      	mov	r0, sl
 801186c:	f7ff fe08 	bl	8011480 <lv_style_set_pad_row>
    lv_style_set_pad_column(&styles->card, PAD_SMALL);
 8011870:	6823      	ldr	r3, [r4, #0]
 8011872:	f103 0a18 	add.w	sl, r3, #24
 8011876:	7833      	ldrb	r3, [r6, #0]
 8011878:	2b01      	cmp	r3, #1
 801187a:	f040 8725 	bne.w	80126c8 <lv_theme_default_init+0x10e8>
 801187e:	210e      	movs	r1, #14
 8011880:	68e8      	ldr	r0, [r5, #12]
 8011882:	e01b      	b.n	80118bc <lv_theme_default_init+0x2dc>
 8011884:	20002ae4 	.word	0x20002ae4
 8011888:	20002ae8 	.word	0x20002ae8
 801188c:	2000ae2c 	.word	0x2000ae2c
 8011890:	20002ad8 	.word	0x20002ad8
 8011894:	20002aec 	.word	0x20002aec
 8011898:	08010865 	.word	0x08010865
 801189c:	20002acc 	.word	0x20002acc
 80118a0:	20002ac6 	.word	0x20002ac6
 80118a4:	08016a39 	.word	0x08016a39
 80118a8:	08025112 	.word	0x08025112
 80118ac:	20002b10 	.word	0x20002b10
 80118b0:	20002b24 	.word	0x20002b24
 80118b4:	20002aca 	.word	0x20002aca
 80118b8:	20002ac8 	.word	0x20002ac8
 80118bc:	f7ff fe3c 	bl	8011538 <lv_disp_dpx.part.0>
 80118c0:	4601      	mov	r1, r0
 80118c2:	4650      	mov	r0, sl
 80118c4:	f7ff fe18 	bl	80114f8 <lv_style_set_pad_column>
    lv_style_set_line_color(&styles->card, lv_palette_main(LV_PALETTE_GREY));
 80118c8:	6820      	ldr	r0, [r4, #0]
 80118ca:	f100 0a18 	add.w	sl, r0, #24
 80118ce:	2012      	movs	r0, #18
 80118d0:	f005 fce4 	bl	801729c <lv_palette_main>
 80118d4:	4601      	mov	r1, r0
 80118d6:	4650      	mov	r0, sl
 80118d8:	f7ff fddc 	bl	8011494 <lv_style_set_line_color>
    lv_style_set_line_width(&styles->card, lv_disp_dpx(theme.disp, 1));
 80118dc:	6820      	ldr	r0, [r4, #0]
 80118de:	2101      	movs	r1, #1
 80118e0:	f100 0a18 	add.w	sl, r0, #24
 80118e4:	68e8      	ldr	r0, [r5, #12]
 80118e6:	f7ff fe27 	bl	8011538 <lv_disp_dpx.part.0>
 80118ea:	4601      	mov	r1, r0
 80118ec:	4650      	mov	r0, sl
    lv_style_value_t v = {
 80118ee:	f04f 0a00 	mov.w	sl, #0
 80118f2:	f7ff fdca 	bl	801148a <lv_style_set_line_width>
    style_init_reset(&styles->outline_primary);
 80118f6:	6820      	ldr	r0, [r4, #0]
 80118f8:	30a0      	adds	r0, #160	; 0xa0
 80118fa:	f7ff fe13 	bl	8011524 <style_init_reset>
 80118fe:	4652      	mov	r2, sl
 8011900:	8a2b      	ldrh	r3, [r5, #16]
    lv_style_set_prop(style, LV_STYLE_OUTLINE_COLOR, v);
 8011902:	213b      	movs	r1, #59	; 0x3b
    lv_style_set_outline_color(&styles->outline_primary, theme.color_primary);
 8011904:	6820      	ldr	r0, [r4, #0]
    lv_style_value_t v = {
 8011906:	f36a 421f 	bfi	r2, sl, #16, #16
 801190a:	f8ad a010 	strh.w	sl, [sp, #16]
 801190e:	f363 020f 	bfi	r2, r3, #0, #16
    lv_style_set_prop(style, LV_STYLE_OUTLINE_COLOR, v);
 8011912:	30a0      	adds	r0, #160	; 0xa0
 8011914:	f006 fe4d 	bl	80185b2 <lv_style_set_prop>
    lv_style_set_outline_width(&styles->outline_primary, OUTLINE_WIDTH);
 8011918:	6820      	ldr	r0, [r4, #0]
 801191a:	2103      	movs	r1, #3
 801191c:	f100 0ba0 	add.w	fp, r0, #160	; 0xa0
 8011920:	68e8      	ldr	r0, [r5, #12]
 8011922:	f7ff fe09 	bl	8011538 <lv_disp_dpx.part.0>
    lv_style_set_prop(style, LV_STYLE_OUTLINE_WIDTH, v);
 8011926:	f640 013a 	movw	r1, #2106	; 0x83a
 801192a:	4602      	mov	r2, r0
 801192c:	4658      	mov	r0, fp
 801192e:	f006 fe40 	bl	80185b2 <lv_style_set_prop>
    lv_style_set_outline_pad(&styles->outline_primary, OUTLINE_WIDTH);
 8011932:	6820      	ldr	r0, [r4, #0]
 8011934:	2103      	movs	r1, #3
 8011936:	f100 0ba0 	add.w	fp, r0, #160	; 0xa0
 801193a:	68e8      	ldr	r0, [r5, #12]
 801193c:	f7ff fdfc 	bl	8011538 <lv_disp_dpx.part.0>
    lv_style_set_prop(style, LV_STYLE_OUTLINE_PAD, v);
 8011940:	f640 013d 	movw	r1, #2109	; 0x83d
 8011944:	4602      	mov	r2, r0
 8011946:	4658      	mov	r0, fp
 8011948:	f006 fe33 	bl	80185b2 <lv_style_set_prop>
    lv_style_set_outline_opa(&styles->outline_primary, LV_OPA_50);
 801194c:	6820      	ldr	r0, [r4, #0]
    lv_style_set_prop(style, LV_STYLE_OUTLINE_OPA, v);
 801194e:	227f      	movs	r2, #127	; 0x7f
 8011950:	f640 013c 	movw	r1, #2108	; 0x83c
 8011954:	30a0      	adds	r0, #160	; 0xa0
 8011956:	f006 fe2c 	bl	80185b2 <lv_style_set_prop>
    style_init_reset(&styles->outline_secondary);
 801195a:	6820      	ldr	r0, [r4, #0]
 801195c:	30a8      	adds	r0, #168	; 0xa8
 801195e:	f7ff fde1 	bl	8011524 <style_init_reset>
    lv_style_value_t v = {
 8011962:	4652      	mov	r2, sl
 8011964:	8a6b      	ldrh	r3, [r5, #18]
    lv_style_set_prop(style, LV_STYLE_OUTLINE_COLOR, v);
 8011966:	213b      	movs	r1, #59	; 0x3b
    lv_style_set_outline_color(&styles->outline_secondary, theme.color_secondary);
 8011968:	6820      	ldr	r0, [r4, #0]
    lv_style_value_t v = {
 801196a:	f36a 421f 	bfi	r2, sl, #16, #16
 801196e:	f8ad a010 	strh.w	sl, [sp, #16]
 8011972:	f363 020f 	bfi	r2, r3, #0, #16
    lv_style_set_prop(style, LV_STYLE_OUTLINE_COLOR, v);
 8011976:	30a8      	adds	r0, #168	; 0xa8
 8011978:	f006 fe1b 	bl	80185b2 <lv_style_set_prop>
    lv_style_set_outline_width(&styles->outline_secondary, OUTLINE_WIDTH);
 801197c:	6820      	ldr	r0, [r4, #0]
 801197e:	2103      	movs	r1, #3
 8011980:	f100 0aa8 	add.w	sl, r0, #168	; 0xa8
 8011984:	68e8      	ldr	r0, [r5, #12]
 8011986:	f7ff fdd7 	bl	8011538 <lv_disp_dpx.part.0>
    lv_style_set_prop(style, LV_STYLE_OUTLINE_WIDTH, v);
 801198a:	f640 013a 	movw	r1, #2106	; 0x83a
 801198e:	4602      	mov	r2, r0
 8011990:	4650      	mov	r0, sl
 8011992:	f006 fe0e 	bl	80185b2 <lv_style_set_prop>
    lv_style_set_outline_opa(&styles->outline_secondary, LV_OPA_50);
 8011996:	6820      	ldr	r0, [r4, #0]
    lv_style_set_prop(style, LV_STYLE_OUTLINE_OPA, v);
 8011998:	227f      	movs	r2, #127	; 0x7f
 801199a:	f640 013c 	movw	r1, #2108	; 0x83c
 801199e:	30a8      	adds	r0, #168	; 0xa8
 80119a0:	f006 fe07 	bl	80185b2 <lv_style_set_prop>
    style_init_reset(&styles->btn);
 80119a4:	6820      	ldr	r0, [r4, #0]
 80119a6:	3020      	adds	r0, #32
 80119a8:	f7ff fdbc 	bl	8011524 <style_init_reset>
    lv_style_set_radius(&styles->btn, (disp_size == DISP_LARGE ? lv_disp_dpx(theme.disp, 16) : disp_size == DISP_MEDIUM ? lv_disp_dpx(theme.disp, 12) : lv_disp_dpx(theme.disp, 8)));
 80119ac:	6823      	ldr	r3, [r4, #0]
 80119ae:	f103 0a20 	add.w	sl, r3, #32
 80119b2:	7833      	ldrb	r3, [r6, #0]
 80119b4:	2b01      	cmp	r3, #1
 80119b6:	f040 868e 	bne.w	80126d6 <lv_theme_default_init+0x10f6>
 80119ba:	2110      	movs	r1, #16
 80119bc:	68e8      	ldr	r0, [r5, #12]
 80119be:	f7ff fdbb 	bl	8011538 <lv_disp_dpx.part.0>
 80119c2:	4601      	mov	r1, r0
 80119c4:	4650      	mov	r0, sl
 80119c6:	f7ff fda9 	bl	801151c <lv_style_set_radius>
    lv_style_set_bg_opa(&styles->btn, LV_OPA_COVER);
 80119ca:	6820      	ldr	r0, [r4, #0]
 80119cc:	21ff      	movs	r1, #255	; 0xff
 80119ce:	3020      	adds	r0, #32
 80119d0:	f7ff fd97 	bl	8011502 <lv_style_set_bg_opa>
    lv_style_set_bg_color(&styles->btn, color_grey);
 80119d4:	6820      	ldr	r0, [r4, #0]
 80119d6:	f8b9 1000 	ldrh.w	r1, [r9]
 80119da:	3020      	adds	r0, #32
 80119dc:	f7ff fd95 	bl	801150a <lv_style_set_bg_color>
    if(!(theme.flags & MODE_DARK)) {
 80119e0:	6a2b      	ldr	r3, [r5, #32]
 80119e2:	f013 0901 	ands.w	r9, r3, #1
 80119e6:	d125      	bne.n	8011a34 <lv_theme_default_init+0x454>
        lv_style_set_shadow_color(&styles->btn, lv_palette_lighten(LV_PALETTE_GREY, 3));
 80119e8:	6820      	ldr	r0, [r4, #0]
 80119ea:	2103      	movs	r1, #3
 80119ec:	f100 0a20 	add.w	sl, r0, #32
 80119f0:	2012      	movs	r0, #18
 80119f2:	f005 fc5d 	bl	80172b0 <lv_palette_lighten>
    lv_style_value_t v = {
 80119f6:	2200      	movs	r2, #0
    lv_style_set_prop(style, LV_STYLE_SHADOW_COLOR, v);
 80119f8:	2144      	movs	r1, #68	; 0x44
    lv_style_value_t v = {
 80119fa:	f8ad 9010 	strh.w	r9, [sp, #16]
 80119fe:	f369 421f 	bfi	r2, r9, #16, #16
 8011a02:	f360 020f 	bfi	r2, r0, #0, #16
    lv_style_set_prop(style, LV_STYLE_SHADOW_COLOR, v);
 8011a06:	4650      	mov	r0, sl
 8011a08:	f006 fdd3 	bl	80185b2 <lv_style_set_prop>
        lv_style_set_shadow_width(&styles->btn, 1);
 8011a0c:	6820      	ldr	r0, [r4, #0]
    lv_style_set_prop(style, LV_STYLE_SHADOW_WIDTH, v);
 8011a0e:	2201      	movs	r2, #1
 8011a10:	f44f 6104 	mov.w	r1, #2112	; 0x840
 8011a14:	3020      	adds	r0, #32
 8011a16:	f006 fdcc 	bl	80185b2 <lv_style_set_prop>
        lv_style_set_shadow_ofs_y(&styles->btn, lv_disp_dpx(theme.disp, 4));
 8011a1a:	6820      	ldr	r0, [r4, #0]
 8011a1c:	2104      	movs	r1, #4
 8011a1e:	f100 0920 	add.w	r9, r0, #32
 8011a22:	68e8      	ldr	r0, [r5, #12]
 8011a24:	f7ff fd88 	bl	8011538 <lv_disp_dpx.part.0>
    lv_style_set_prop(style, LV_STYLE_SHADOW_OFS_Y, v);
 8011a28:	f640 0142 	movw	r1, #2114	; 0x842
 8011a2c:	4602      	mov	r2, r0
 8011a2e:	4648      	mov	r0, r9
 8011a30:	f006 fdbf 	bl	80185b2 <lv_style_set_prop>
    lv_style_set_text_color(&styles->btn, color_text);
 8011a34:	6820      	ldr	r0, [r4, #0]
 8011a36:	8839      	ldrh	r1, [r7, #0]
 8011a38:	3020      	adds	r0, #32
 8011a3a:	f7ff fd45 	bl	80114c8 <lv_style_set_text_color>
    lv_style_set_pad_hor(&styles->btn, PAD_DEF);
 8011a3e:	6823      	ldr	r3, [r4, #0]
 8011a40:	f103 0920 	add.w	r9, r3, #32
 8011a44:	7833      	ldrb	r3, [r6, #0]
 8011a46:	2b01      	cmp	r3, #1
 8011a48:	f040 864c 	bne.w	80126e4 <lv_theme_default_init+0x1104>
 8011a4c:	2118      	movs	r1, #24
 8011a4e:	68e8      	ldr	r0, [r5, #12]
 8011a50:	f7ff fd72 	bl	8011538 <lv_disp_dpx.part.0>
 8011a54:	4601      	mov	r1, r0
 8011a56:	4648      	mov	r0, r9
 8011a58:	f7ff fd83 	bl	8011562 <lv_style_set_pad_hor>
    lv_style_set_pad_ver(&styles->btn, PAD_SMALL);
 8011a5c:	6823      	ldr	r3, [r4, #0]
 8011a5e:	f103 0920 	add.w	r9, r3, #32
 8011a62:	7833      	ldrb	r3, [r6, #0]
 8011a64:	2b01      	cmp	r3, #1
 8011a66:	f040 8644 	bne.w	80126f2 <lv_theme_default_init+0x1112>
 8011a6a:	210e      	movs	r1, #14
 8011a6c:	68e8      	ldr	r0, [r5, #12]
 8011a6e:	f7ff fd63 	bl	8011538 <lv_disp_dpx.part.0>
 8011a72:	4601      	mov	r1, r0
 8011a74:	4648      	mov	r0, r9
    dsc->filter_cb = cb;
 8011a76:	f8df a384 	ldr.w	sl, [pc, #900]	; 8011dfc <lv_theme_default_init+0x81c>
 8011a7a:	f7ff fd83 	bl	8011584 <lv_style_set_pad_ver>
    lv_style_set_pad_column(&styles->btn, lv_disp_dpx(theme.disp, 5));
 8011a7e:	6820      	ldr	r0, [r4, #0]
 8011a80:	2105      	movs	r1, #5
 8011a82:	f100 0920 	add.w	r9, r0, #32
 8011a86:	68e8      	ldr	r0, [r5, #12]
 8011a88:	f7ff fd56 	bl	8011538 <lv_disp_dpx.part.0>
 8011a8c:	4601      	mov	r1, r0
 8011a8e:	4648      	mov	r0, r9
 8011a90:	f7ff fd32 	bl	80114f8 <lv_style_set_pad_column>
    lv_style_set_pad_row(&styles->btn, lv_disp_dpx(theme.disp, 5));
 8011a94:	6820      	ldr	r0, [r4, #0]
 8011a96:	2105      	movs	r1, #5
 8011a98:	f100 0920 	add.w	r9, r0, #32
 8011a9c:	68e8      	ldr	r0, [r5, #12]
 8011a9e:	f7ff fd4b 	bl	8011538 <lv_disp_dpx.part.0>
 8011aa2:	4601      	mov	r1, r0
 8011aa4:	4648      	mov	r0, r9
 8011aa6:	f8df 9358 	ldr.w	r9, [pc, #856]	; 8011e00 <lv_theme_default_init+0x820>
 8011aaa:	f7ff fce9 	bl	8011480 <lv_style_set_pad_row>
 8011aae:	4bd1      	ldr	r3, [pc, #836]	; (8011df4 <lv_theme_default_init+0x814>)
    style_init_reset(&styles->pressed);
 8011ab0:	6820      	ldr	r0, [r4, #0]
 8011ab2:	f8ca 3000 	str.w	r3, [sl]
 8011ab6:	4bd0      	ldr	r3, [pc, #832]	; (8011df8 <lv_theme_default_init+0x818>)
 8011ab8:	3058      	adds	r0, #88	; 0x58
 8011aba:	f8c9 3000 	str.w	r3, [r9]
 8011abe:	f7ff fd31 	bl	8011524 <style_init_reset>
    lv_style_set_color_filter_dsc(&styles->pressed, &dark_filter);
 8011ac2:	6820      	ldr	r0, [r4, #0]
    lv_style_set_prop(style, LV_STYLE_COLOR_FILTER_DSC, v);
 8011ac4:	4652      	mov	r2, sl
 8011ac6:	2163      	movs	r1, #99	; 0x63
 8011ac8:	3058      	adds	r0, #88	; 0x58
 8011aca:	f006 fd72 	bl	80185b2 <lv_style_set_prop>
    lv_style_set_color_filter_opa(&styles->pressed, 35);
 8011ace:	6820      	ldr	r0, [r4, #0]
    lv_style_set_prop(style, LV_STYLE_COLOR_FILTER_OPA, v);
 8011ad0:	2223      	movs	r2, #35	; 0x23
 8011ad2:	2164      	movs	r1, #100	; 0x64
 8011ad4:	3058      	adds	r0, #88	; 0x58
 8011ad6:	f006 fd6c 	bl	80185b2 <lv_style_set_prop>
    style_init_reset(&styles->disabled);
 8011ada:	6820      	ldr	r0, [r4, #0]
 8011adc:	3060      	adds	r0, #96	; 0x60
 8011ade:	f7ff fd21 	bl	8011524 <style_init_reset>
    lv_style_set_color_filter_dsc(&styles->disabled, &grey_filter);
 8011ae2:	6820      	ldr	r0, [r4, #0]
    lv_style_set_prop(style, LV_STYLE_COLOR_FILTER_DSC, v);
 8011ae4:	464a      	mov	r2, r9
 8011ae6:	2163      	movs	r1, #99	; 0x63
 8011ae8:	3060      	adds	r0, #96	; 0x60
 8011aea:	f006 fd62 	bl	80185b2 <lv_style_set_prop>
    lv_style_set_color_filter_opa(&styles->disabled, LV_OPA_50);
 8011aee:	6820      	ldr	r0, [r4, #0]
    lv_style_set_prop(style, LV_STYLE_COLOR_FILTER_OPA, v);
 8011af0:	227f      	movs	r2, #127	; 0x7f
 8011af2:	2164      	movs	r1, #100	; 0x64
 8011af4:	3060      	adds	r0, #96	; 0x60
 8011af6:	f006 fd5c 	bl	80185b2 <lv_style_set_prop>
    style_init_reset(&styles->clip_corner);
 8011afa:	6820      	ldr	r0, [r4, #0]
 8011afc:	30c0      	adds	r0, #192	; 0xc0
 8011afe:	f7ff fd11 	bl	8011524 <style_init_reset>
    lv_style_set_clip_corner(&styles->clip_corner, true);
 8011b02:	6820      	ldr	r0, [r4, #0]
    lv_style_set_prop(style, LV_STYLE_CLIP_CORNER, v);
 8011b04:	2201      	movs	r2, #1
 8011b06:	2161      	movs	r1, #97	; 0x61
 8011b08:	30c0      	adds	r0, #192	; 0xc0
 8011b0a:	f006 fd52 	bl	80185b2 <lv_style_set_prop>
    style_init_reset(&styles->pad_normal);
 8011b0e:	6820      	ldr	r0, [r4, #0]
 8011b10:	3080      	adds	r0, #128	; 0x80
 8011b12:	f7ff fd07 	bl	8011524 <style_init_reset>
    lv_style_set_pad_all(&styles->pad_normal, PAD_DEF);
 8011b16:	6823      	ldr	r3, [r4, #0]
 8011b18:	f103 0980 	add.w	r9, r3, #128	; 0x80
 8011b1c:	7833      	ldrb	r3, [r6, #0]
 8011b1e:	2b01      	cmp	r3, #1
 8011b20:	f040 85ee 	bne.w	8012700 <lv_theme_default_init+0x1120>
 8011b24:	2118      	movs	r1, #24
 8011b26:	68e8      	ldr	r0, [r5, #12]
 8011b28:	f7ff fd06 	bl	8011538 <lv_disp_dpx.part.0>
 8011b2c:	4601      	mov	r1, r0
 8011b2e:	4648      	mov	r0, r9
 8011b30:	f7ff fd39 	bl	80115a6 <lv_style_set_pad_all>
    lv_style_set_pad_row(&styles->pad_normal, PAD_DEF);
 8011b34:	6823      	ldr	r3, [r4, #0]
 8011b36:	f103 0980 	add.w	r9, r3, #128	; 0x80
 8011b3a:	7833      	ldrb	r3, [r6, #0]
 8011b3c:	2b01      	cmp	r3, #1
 8011b3e:	f040 85e6 	bne.w	801270e <lv_theme_default_init+0x112e>
 8011b42:	2118      	movs	r1, #24
 8011b44:	68e8      	ldr	r0, [r5, #12]
 8011b46:	f7ff fcf7 	bl	8011538 <lv_disp_dpx.part.0>
 8011b4a:	4601      	mov	r1, r0
 8011b4c:	4648      	mov	r0, r9
 8011b4e:	f7ff fc97 	bl	8011480 <lv_style_set_pad_row>
    lv_style_set_pad_column(&styles->pad_normal, PAD_DEF);
 8011b52:	6823      	ldr	r3, [r4, #0]
 8011b54:	f103 0980 	add.w	r9, r3, #128	; 0x80
 8011b58:	7833      	ldrb	r3, [r6, #0]
 8011b5a:	2b01      	cmp	r3, #1
 8011b5c:	f040 85de 	bne.w	801271c <lv_theme_default_init+0x113c>
 8011b60:	2118      	movs	r1, #24
 8011b62:	68e8      	ldr	r0, [r5, #12]
 8011b64:	f7ff fce8 	bl	8011538 <lv_disp_dpx.part.0>
 8011b68:	4601      	mov	r1, r0
 8011b6a:	4648      	mov	r0, r9
 8011b6c:	f7ff fcc4 	bl	80114f8 <lv_style_set_pad_column>
    style_init_reset(&styles->pad_small);
 8011b70:	6820      	ldr	r0, [r4, #0]
 8011b72:	3078      	adds	r0, #120	; 0x78
 8011b74:	f7ff fcd6 	bl	8011524 <style_init_reset>
    lv_style_set_pad_all(&styles->pad_small, PAD_SMALL);
 8011b78:	6823      	ldr	r3, [r4, #0]
 8011b7a:	f103 0978 	add.w	r9, r3, #120	; 0x78
 8011b7e:	7833      	ldrb	r3, [r6, #0]
 8011b80:	2b01      	cmp	r3, #1
 8011b82:	f040 85d2 	bne.w	801272a <lv_theme_default_init+0x114a>
 8011b86:	210e      	movs	r1, #14
 8011b88:	68e8      	ldr	r0, [r5, #12]
 8011b8a:	f7ff fcd5 	bl	8011538 <lv_disp_dpx.part.0>
 8011b8e:	4601      	mov	r1, r0
 8011b90:	4648      	mov	r0, r9
 8011b92:	f7ff fd08 	bl	80115a6 <lv_style_set_pad_all>
    lv_style_set_pad_gap(&styles->pad_small, PAD_SMALL);
 8011b96:	6823      	ldr	r3, [r4, #0]
 8011b98:	f103 0a78 	add.w	sl, r3, #120	; 0x78
 8011b9c:	7833      	ldrb	r3, [r6, #0]
 8011b9e:	2b01      	cmp	r3, #1
 8011ba0:	f040 85ca 	bne.w	8012738 <lv_theme_default_init+0x1158>
 8011ba4:	210e      	movs	r1, #14
 8011ba6:	68e8      	ldr	r0, [r5, #12]
 8011ba8:	f7ff fcc6 	bl	8011538 <lv_disp_dpx.part.0>
 8011bac:	4681      	mov	r9, r0
    lv_style_set_pad_row(style, value);
 8011bae:	4601      	mov	r1, r0
 8011bb0:	4650      	mov	r0, sl
 8011bb2:	f7ff fc65 	bl	8011480 <lv_style_set_pad_row>
    lv_style_set_pad_column(style, value);
 8011bb6:	4649      	mov	r1, r9
 8011bb8:	4650      	mov	r0, sl
 8011bba:	f7ff fc9d 	bl	80114f8 <lv_style_set_pad_column>
    style_init_reset(&styles->pad_gap);
 8011bbe:	6820      	ldr	r0, [r4, #0]
 8011bc0:	3088      	adds	r0, #136	; 0x88
 8011bc2:	f7ff fcaf 	bl	8011524 <style_init_reset>
    lv_style_set_pad_row(&styles->pad_gap, lv_disp_dpx(theme.disp, 10));
 8011bc6:	6820      	ldr	r0, [r4, #0]
 8011bc8:	210a      	movs	r1, #10
 8011bca:	f100 0988 	add.w	r9, r0, #136	; 0x88
 8011bce:	68e8      	ldr	r0, [r5, #12]
 8011bd0:	f7ff fcb2 	bl	8011538 <lv_disp_dpx.part.0>
 8011bd4:	4601      	mov	r1, r0
 8011bd6:	4648      	mov	r0, r9
 8011bd8:	f7ff fc52 	bl	8011480 <lv_style_set_pad_row>
    lv_style_set_pad_column(&styles->pad_gap, lv_disp_dpx(theme.disp, 10));
 8011bdc:	6820      	ldr	r0, [r4, #0]
 8011bde:	210a      	movs	r1, #10
 8011be0:	f100 0988 	add.w	r9, r0, #136	; 0x88
 8011be4:	68e8      	ldr	r0, [r5, #12]
 8011be6:	f7ff fca7 	bl	8011538 <lv_disp_dpx.part.0>
 8011bea:	4601      	mov	r1, r0
 8011bec:	4648      	mov	r0, r9
 8011bee:	f7ff fc83 	bl	80114f8 <lv_style_set_pad_column>
    style_init_reset(&styles->line_space_large);
 8011bf2:	6820      	ldr	r0, [r4, #0]
 8011bf4:	3090      	adds	r0, #144	; 0x90
 8011bf6:	f7ff fc95 	bl	8011524 <style_init_reset>
    lv_style_set_text_line_space(&styles->line_space_large, lv_disp_dpx(theme.disp, 20));
 8011bfa:	6820      	ldr	r0, [r4, #0]
 8011bfc:	2114      	movs	r1, #20
 8011bfe:	f100 0990 	add.w	r9, r0, #144	; 0x90
 8011c02:	68e8      	ldr	r0, [r5, #12]
 8011c04:	f7ff fc98 	bl	8011538 <lv_disp_dpx.part.0>
    lv_style_set_prop(style, LV_STYLE_TEXT_LINE_SPACE, v);
 8011c08:	f241 415b 	movw	r1, #5211	; 0x145b
 8011c0c:	4602      	mov	r2, r0
 8011c0e:	4648      	mov	r0, r9
 8011c10:	f006 fccf 	bl	80185b2 <lv_style_set_prop>
    style_init_reset(&styles->text_align_center);
 8011c14:	6820      	ldr	r0, [r4, #0]
 8011c16:	3098      	adds	r0, #152	; 0x98
 8011c18:	f7ff fc84 	bl	8011524 <style_init_reset>
    lv_style_set_text_align(&styles->text_align_center, LV_TEXT_ALIGN_CENTER);
 8011c1c:	6820      	ldr	r0, [r4, #0]
    lv_style_set_prop(style, LV_STYLE_TEXT_ALIGN, v);
 8011c1e:	2202      	movs	r2, #2
 8011c20:	f241 415d 	movw	r1, #5213	; 0x145d
 8011c24:	3098      	adds	r0, #152	; 0x98
 8011c26:	f006 fcc4 	bl	80185b2 <lv_style_set_prop>
    style_init_reset(&styles->pad_zero);
 8011c2a:	6820      	ldr	r0, [r4, #0]
 8011c2c:	3068      	adds	r0, #104	; 0x68
 8011c2e:	f7ff fc79 	bl	8011524 <style_init_reset>
    lv_style_set_pad_all(&styles->pad_zero, 0);
 8011c32:	6820      	ldr	r0, [r4, #0]
 8011c34:	2100      	movs	r1, #0
 8011c36:	3068      	adds	r0, #104	; 0x68
 8011c38:	f7ff fcb5 	bl	80115a6 <lv_style_set_pad_all>
    lv_style_set_pad_row(&styles->pad_zero, 0);
 8011c3c:	6820      	ldr	r0, [r4, #0]
 8011c3e:	2100      	movs	r1, #0
 8011c40:	3068      	adds	r0, #104	; 0x68
 8011c42:	f7ff fc1d 	bl	8011480 <lv_style_set_pad_row>
    lv_style_set_pad_column(&styles->pad_zero, 0);
 8011c46:	6820      	ldr	r0, [r4, #0]
 8011c48:	2100      	movs	r1, #0
 8011c4a:	3068      	adds	r0, #104	; 0x68
 8011c4c:	f7ff fc54 	bl	80114f8 <lv_style_set_pad_column>
    style_init_reset(&styles->pad_tiny);
 8011c50:	6820      	ldr	r0, [r4, #0]
 8011c52:	3070      	adds	r0, #112	; 0x70
 8011c54:	f7ff fc66 	bl	8011524 <style_init_reset>
    lv_style_set_pad_all(&styles->pad_tiny, PAD_TINY);
 8011c58:	6823      	ldr	r3, [r4, #0]
 8011c5a:	f103 0970 	add.w	r9, r3, #112	; 0x70
 8011c5e:	7833      	ldrb	r3, [r6, #0]
 8011c60:	2b01      	cmp	r3, #1
 8011c62:	f040 8570 	bne.w	8012746 <lv_theme_default_init+0x1166>
 8011c66:	2108      	movs	r1, #8
 8011c68:	68e8      	ldr	r0, [r5, #12]
 8011c6a:	f7ff fc65 	bl	8011538 <lv_disp_dpx.part.0>
 8011c6e:	4601      	mov	r1, r0
 8011c70:	4648      	mov	r0, r9
 8011c72:	f7ff fc98 	bl	80115a6 <lv_style_set_pad_all>
    lv_style_set_pad_row(&styles->pad_tiny, PAD_TINY);
 8011c76:	6823      	ldr	r3, [r4, #0]
 8011c78:	f103 0970 	add.w	r9, r3, #112	; 0x70
 8011c7c:	7833      	ldrb	r3, [r6, #0]
 8011c7e:	2b01      	cmp	r3, #1
 8011c80:	f040 8568 	bne.w	8012754 <lv_theme_default_init+0x1174>
 8011c84:	2108      	movs	r1, #8
 8011c86:	68e8      	ldr	r0, [r5, #12]
 8011c88:	f7ff fc56 	bl	8011538 <lv_disp_dpx.part.0>
 8011c8c:	4601      	mov	r1, r0
 8011c8e:	4648      	mov	r0, r9
 8011c90:	f7ff fbf6 	bl	8011480 <lv_style_set_pad_row>
    lv_style_set_pad_column(&styles->pad_tiny, PAD_TINY);
 8011c94:	6823      	ldr	r3, [r4, #0]
 8011c96:	f103 0970 	add.w	r9, r3, #112	; 0x70
 8011c9a:	7833      	ldrb	r3, [r6, #0]
 8011c9c:	2b01      	cmp	r3, #1
 8011c9e:	f040 8560 	bne.w	8012762 <lv_theme_default_init+0x1182>
 8011ca2:	2108      	movs	r1, #8
 8011ca4:	68e8      	ldr	r0, [r5, #12]
 8011ca6:	f7ff fc47 	bl	8011538 <lv_disp_dpx.part.0>
 8011caa:	4601      	mov	r1, r0
 8011cac:	4648      	mov	r0, r9
    lv_style_set_bg_color(&styles->bg_color_grey, color_grey);
 8011cae:	f8df 9154 	ldr.w	r9, [pc, #340]	; 8011e04 <lv_theme_default_init+0x824>
    lv_style_set_pad_column(&styles->pad_tiny, PAD_TINY);
 8011cb2:	f7ff fc21 	bl	80114f8 <lv_style_set_pad_column>
    style_init_reset(&styles->bg_color_primary);
 8011cb6:	6820      	ldr	r0, [r4, #0]
    lv_style_set_bg_color(&styles->bg_color_white, color_card);
 8011cb8:	f8df a14c 	ldr.w	sl, [pc, #332]	; 8011e08 <lv_theme_default_init+0x828>
    style_init_reset(&styles->bg_color_primary);
 8011cbc:	3028      	adds	r0, #40	; 0x28
 8011cbe:	f7ff fc31 	bl	8011524 <style_init_reset>
    lv_style_set_bg_color(&styles->bg_color_primary, theme.color_primary);
 8011cc2:	6820      	ldr	r0, [r4, #0]
 8011cc4:	8a29      	ldrh	r1, [r5, #16]
 8011cc6:	3028      	adds	r0, #40	; 0x28
 8011cc8:	f7ff fc1f 	bl	801150a <lv_style_set_bg_color>
    lv_style_set_text_color(&styles->bg_color_primary, lv_color_white());
 8011ccc:	6820      	ldr	r0, [r4, #0]
 8011cce:	f100 0328 	add.w	r3, r0, #40	; 0x28
 8011cd2:	f7fe fdc4 	bl	801085e <lv_color_white>
 8011cd6:	4601      	mov	r1, r0
 8011cd8:	4618      	mov	r0, r3
 8011cda:	f7ff fbf5 	bl	80114c8 <lv_style_set_text_color>
    lv_style_set_bg_opa(&styles->bg_color_primary, LV_OPA_COVER);
 8011cde:	6820      	ldr	r0, [r4, #0]
 8011ce0:	21ff      	movs	r1, #255	; 0xff
 8011ce2:	3028      	adds	r0, #40	; 0x28
 8011ce4:	f7ff fc0d 	bl	8011502 <lv_style_set_bg_opa>
    style_init_reset(&styles->bg_color_primary_muted);
 8011ce8:	6820      	ldr	r0, [r4, #0]
 8011cea:	3030      	adds	r0, #48	; 0x30
 8011cec:	f7ff fc1a 	bl	8011524 <style_init_reset>
    lv_style_set_bg_color(&styles->bg_color_primary_muted, theme.color_primary);
 8011cf0:	6820      	ldr	r0, [r4, #0]
 8011cf2:	8a29      	ldrh	r1, [r5, #16]
 8011cf4:	3030      	adds	r0, #48	; 0x30
 8011cf6:	f7ff fc08 	bl	801150a <lv_style_set_bg_color>
    lv_style_set_text_color(&styles->bg_color_primary_muted, theme.color_primary);
 8011cfa:	6820      	ldr	r0, [r4, #0]
 8011cfc:	8a29      	ldrh	r1, [r5, #16]
 8011cfe:	3030      	adds	r0, #48	; 0x30
 8011d00:	f7ff fbe2 	bl	80114c8 <lv_style_set_text_color>
    lv_style_set_bg_opa(&styles->bg_color_primary_muted, LV_OPA_20);
 8011d04:	6820      	ldr	r0, [r4, #0]
 8011d06:	2133      	movs	r1, #51	; 0x33
 8011d08:	3030      	adds	r0, #48	; 0x30
 8011d0a:	f7ff fbfa 	bl	8011502 <lv_style_set_bg_opa>
    style_init_reset(&styles->bg_color_secondary);
 8011d0e:	6820      	ldr	r0, [r4, #0]
 8011d10:	3038      	adds	r0, #56	; 0x38
 8011d12:	f7ff fc07 	bl	8011524 <style_init_reset>
    lv_style_set_bg_color(&styles->bg_color_secondary, theme.color_secondary);
 8011d16:	6820      	ldr	r0, [r4, #0]
 8011d18:	8a69      	ldrh	r1, [r5, #18]
 8011d1a:	3038      	adds	r0, #56	; 0x38
 8011d1c:	f7ff fbf5 	bl	801150a <lv_style_set_bg_color>
    lv_style_set_text_color(&styles->bg_color_secondary, lv_color_white());
 8011d20:	6820      	ldr	r0, [r4, #0]
 8011d22:	f100 0338 	add.w	r3, r0, #56	; 0x38
 8011d26:	f7fe fd9a 	bl	801085e <lv_color_white>
 8011d2a:	4601      	mov	r1, r0
 8011d2c:	4618      	mov	r0, r3
 8011d2e:	f7ff fbcb 	bl	80114c8 <lv_style_set_text_color>
    lv_style_set_bg_opa(&styles->bg_color_secondary, LV_OPA_COVER);
 8011d32:	6820      	ldr	r0, [r4, #0]
 8011d34:	21ff      	movs	r1, #255	; 0xff
 8011d36:	3038      	adds	r0, #56	; 0x38
 8011d38:	f7ff fbe3 	bl	8011502 <lv_style_set_bg_opa>
    style_init_reset(&styles->bg_color_secondary_muted);
 8011d3c:	6820      	ldr	r0, [r4, #0]
 8011d3e:	3040      	adds	r0, #64	; 0x40
 8011d40:	f7ff fbf0 	bl	8011524 <style_init_reset>
    lv_style_set_bg_color(&styles->bg_color_secondary_muted, theme.color_secondary);
 8011d44:	6820      	ldr	r0, [r4, #0]
 8011d46:	8a69      	ldrh	r1, [r5, #18]
 8011d48:	3040      	adds	r0, #64	; 0x40
 8011d4a:	f7ff fbde 	bl	801150a <lv_style_set_bg_color>
    lv_style_set_text_color(&styles->bg_color_secondary_muted, theme.color_secondary);
 8011d4e:	6820      	ldr	r0, [r4, #0]
 8011d50:	8a69      	ldrh	r1, [r5, #18]
 8011d52:	3040      	adds	r0, #64	; 0x40
 8011d54:	f7ff fbb8 	bl	80114c8 <lv_style_set_text_color>
    lv_style_set_bg_opa(&styles->bg_color_secondary_muted, LV_OPA_20);
 8011d58:	6820      	ldr	r0, [r4, #0]
 8011d5a:	2133      	movs	r1, #51	; 0x33
 8011d5c:	3040      	adds	r0, #64	; 0x40
 8011d5e:	f7ff fbd0 	bl	8011502 <lv_style_set_bg_opa>
    style_init_reset(&styles->bg_color_grey);
 8011d62:	6820      	ldr	r0, [r4, #0]
 8011d64:	3048      	adds	r0, #72	; 0x48
 8011d66:	f7ff fbdd 	bl	8011524 <style_init_reset>
    lv_style_set_bg_color(&styles->bg_color_grey, color_grey);
 8011d6a:	6820      	ldr	r0, [r4, #0]
 8011d6c:	f8b9 1000 	ldrh.w	r1, [r9]
 8011d70:	3048      	adds	r0, #72	; 0x48
 8011d72:	f7ff fbca 	bl	801150a <lv_style_set_bg_color>
    lv_style_set_bg_opa(&styles->bg_color_grey, LV_OPA_COVER);
 8011d76:	6820      	ldr	r0, [r4, #0]
 8011d78:	21ff      	movs	r1, #255	; 0xff
 8011d7a:	3048      	adds	r0, #72	; 0x48
 8011d7c:	f7ff fbc1 	bl	8011502 <lv_style_set_bg_opa>
    lv_style_set_text_color(&styles->bg_color_grey, color_text);
 8011d80:	6820      	ldr	r0, [r4, #0]
 8011d82:	8839      	ldrh	r1, [r7, #0]
 8011d84:	3048      	adds	r0, #72	; 0x48
 8011d86:	f7ff fb9f 	bl	80114c8 <lv_style_set_text_color>
    style_init_reset(&styles->bg_color_white);
 8011d8a:	6820      	ldr	r0, [r4, #0]
 8011d8c:	3050      	adds	r0, #80	; 0x50
 8011d8e:	f7ff fbc9 	bl	8011524 <style_init_reset>
    lv_style_set_bg_color(&styles->bg_color_white, color_card);
 8011d92:	6820      	ldr	r0, [r4, #0]
 8011d94:	f8ba 1000 	ldrh.w	r1, [sl]
 8011d98:	3050      	adds	r0, #80	; 0x50
 8011d9a:	f7ff fbb6 	bl	801150a <lv_style_set_bg_color>
    lv_style_set_bg_opa(&styles->bg_color_white, LV_OPA_COVER);
 8011d9e:	6820      	ldr	r0, [r4, #0]
 8011da0:	21ff      	movs	r1, #255	; 0xff
 8011da2:	3050      	adds	r0, #80	; 0x50
 8011da4:	f7ff fbad 	bl	8011502 <lv_style_set_bg_opa>
    lv_style_set_text_color(&styles->bg_color_white, color_text);
 8011da8:	6820      	ldr	r0, [r4, #0]
 8011daa:	8839      	ldrh	r1, [r7, #0]
 8011dac:	3050      	adds	r0, #80	; 0x50
 8011dae:	f7ff fb8b 	bl	80114c8 <lv_style_set_text_color>
    style_init_reset(&styles->circle);
 8011db2:	6820      	ldr	r0, [r4, #0]
 8011db4:	30b0      	adds	r0, #176	; 0xb0
 8011db6:	f7ff fbb5 	bl	8011524 <style_init_reset>
    lv_style_set_radius(&styles->circle, LV_RADIUS_CIRCLE);
 8011dba:	6820      	ldr	r0, [r4, #0]
 8011dbc:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8011dc0:	30b0      	adds	r0, #176	; 0xb0
 8011dc2:	f7ff fbab 	bl	801151c <lv_style_set_radius>
    style_init_reset(&styles->no_radius);
 8011dc6:	6820      	ldr	r0, [r4, #0]
 8011dc8:	30b8      	adds	r0, #184	; 0xb8
 8011dca:	f7ff fbab 	bl	8011524 <style_init_reset>
    lv_style_set_radius(&styles->no_radius, 0);
 8011dce:	6820      	ldr	r0, [r4, #0]
 8011dd0:	2100      	movs	r1, #0
 8011dd2:	30b8      	adds	r0, #184	; 0xb8
 8011dd4:	f7ff fba2 	bl	801151c <lv_style_set_radius>
    style_init_reset(&styles->grow);
 8011dd8:	6820      	ldr	r0, [r4, #0]
 8011dda:	30c8      	adds	r0, #200	; 0xc8
 8011ddc:	f7ff fba2 	bl	8011524 <style_init_reset>
    lv_style_set_transform_width(&styles->grow, lv_disp_dpx(theme.disp, 3));
 8011de0:	6820      	ldr	r0, [r4, #0]
 8011de2:	2103      	movs	r1, #3
 8011de4:	f100 0bc8 	add.w	fp, r0, #200	; 0xc8
 8011de8:	68e8      	ldr	r0, [r5, #12]
 8011dea:	f7ff fba5 	bl	8011538 <lv_disp_dpx.part.0>
    lv_style_set_prop(style, LV_STYLE_TRANSFORM_WIDTH, v);
 8011dee:	f640 010a 	movw	r1, #2058	; 0x80a
 8011df2:	e00b      	b.n	8011e0c <lv_theme_default_init+0x82c>
 8011df4:	08011479 	.word	0x08011479
 8011df8:	08011445 	.word	0x08011445
 8011dfc:	20002ad0 	.word	0x20002ad0
 8011e00:	20002adc 	.word	0x20002adc
 8011e04:	20002ac8 	.word	0x20002ac8
 8011e08:	20002ac6 	.word	0x20002ac6
 8011e0c:	4602      	mov	r2, r0
 8011e0e:	4658      	mov	r0, fp
 8011e10:	f006 fbcf 	bl	80185b2 <lv_style_set_prop>
    lv_style_set_transform_height(&styles->grow, lv_disp_dpx(theme.disp, 3));
 8011e14:	6820      	ldr	r0, [r4, #0]
 8011e16:	2103      	movs	r1, #3
 8011e18:	f100 0bc8 	add.w	fp, r0, #200	; 0xc8
 8011e1c:	68e8      	ldr	r0, [r5, #12]
 8011e1e:	f7ff fb8b 	bl	8011538 <lv_disp_dpx.part.0>
    lv_style_set_prop(style, LV_STYLE_TRANSFORM_HEIGHT, v);
 8011e22:	f640 010b 	movw	r1, #2059	; 0x80b
 8011e26:	4602      	mov	r2, r0
 8011e28:	4658      	mov	r0, fp
 8011e2a:	f006 fbc2 	bl	80185b2 <lv_style_set_prop>
    style_init_reset(&styles->knob);
 8011e2e:	6820      	ldr	r0, [r4, #0]
 8011e30:	30e8      	adds	r0, #232	; 0xe8
 8011e32:	f7ff fb77 	bl	8011524 <style_init_reset>
    lv_style_set_bg_color(&styles->knob, theme.color_primary);
 8011e36:	6820      	ldr	r0, [r4, #0]
 8011e38:	8a29      	ldrh	r1, [r5, #16]
 8011e3a:	30e8      	adds	r0, #232	; 0xe8
 8011e3c:	f7ff fb65 	bl	801150a <lv_style_set_bg_color>
    lv_style_set_bg_opa(&styles->knob, LV_OPA_COVER);
 8011e40:	6820      	ldr	r0, [r4, #0]
 8011e42:	21ff      	movs	r1, #255	; 0xff
 8011e44:	30e8      	adds	r0, #232	; 0xe8
 8011e46:	f7ff fb5c 	bl	8011502 <lv_style_set_bg_opa>
    lv_style_set_pad_all(&styles->knob, lv_disp_dpx(theme.disp, 6));
 8011e4a:	6820      	ldr	r0, [r4, #0]
 8011e4c:	2106      	movs	r1, #6
 8011e4e:	f100 0be8 	add.w	fp, r0, #232	; 0xe8
 8011e52:	68e8      	ldr	r0, [r5, #12]
 8011e54:	f7ff fb70 	bl	8011538 <lv_disp_dpx.part.0>
 8011e58:	4601      	mov	r1, r0
 8011e5a:	4658      	mov	r0, fp
        } \
    }

static inline void lv_style_set_arc_color(lv_style_t * style, lv_color_t value)
{
    lv_style_value_t v = {
 8011e5c:	f04f 0b00 	mov.w	fp, #0
 8011e60:	f7ff fba1 	bl	80115a6 <lv_style_set_pad_all>
    lv_style_set_radius(&styles->knob, LV_RADIUS_CIRCLE);
 8011e64:	6820      	ldr	r0, [r4, #0]
 8011e66:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8011e6a:	30e8      	adds	r0, #232	; 0xe8
 8011e6c:	f7ff fb56 	bl	801151c <lv_style_set_radius>
    style_init_reset(&styles->anim);
 8011e70:	6820      	ldr	r0, [r4, #0]
 8011e72:	30e0      	adds	r0, #224	; 0xe0
 8011e74:	f7ff fb56 	bl	8011524 <style_init_reset>
    lv_style_set_anim_time(&styles->anim, 200);
 8011e78:	6820      	ldr	r0, [r4, #0]
    lv_style_set_prop(style, LV_STYLE_ANIM_TIME, v);
 8011e7a:	22c8      	movs	r2, #200	; 0xc8
 8011e7c:	2165      	movs	r1, #101	; 0x65
 8011e7e:	30e0      	adds	r0, #224	; 0xe0
 8011e80:	f006 fb97 	bl	80185b2 <lv_style_set_prop>
    style_init_reset(&styles->arc_indic);
 8011e84:	6820      	ldr	r0, [r4, #0]
 8011e86:	30f8      	adds	r0, #248	; 0xf8
 8011e88:	f7ff fb4c 	bl	8011524 <style_init_reset>
    lv_style_value_t v = {
 8011e8c:	465a      	mov	r2, fp
    lv_style_set_arc_color(&styles->arc_indic, color_grey);
 8011e8e:	6820      	ldr	r0, [r4, #0]
        .color = value
    };
    lv_style_set_prop(style, LV_STYLE_ARC_COLOR, v);
 8011e90:	2152      	movs	r1, #82	; 0x52
    lv_style_value_t v = {
 8011e92:	f8ad b010 	strh.w	fp, [sp, #16]
 8011e96:	f36b 421f 	bfi	r2, fp, #16, #16
 8011e9a:	f8b9 3000 	ldrh.w	r3, [r9]
    lv_style_set_prop(style, LV_STYLE_ARC_COLOR, v);
 8011e9e:	30f8      	adds	r0, #248	; 0xf8
    lv_style_value_t v = {
 8011ea0:	f363 020f 	bfi	r2, r3, #0, #16
    lv_style_set_prop(style, LV_STYLE_ARC_COLOR, v);
 8011ea4:	f006 fb85 	bl	80185b2 <lv_style_set_prop>
    lv_style_set_arc_width(&styles->arc_indic, lv_disp_dpx(theme.disp, 15));
 8011ea8:	6823      	ldr	r3, [r4, #0]
 8011eaa:	210f      	movs	r1, #15
 8011eac:	68e8      	ldr	r0, [r5, #12]
 8011eae:	33f8      	adds	r3, #248	; 0xf8
 8011eb0:	9303      	str	r3, [sp, #12]
 8011eb2:	f7ff fb41 	bl	8011538 <lv_disp_dpx.part.0>
    lv_style_set_prop(style, LV_STYLE_ARC_WIDTH, v);
 8011eb6:	9b03      	ldr	r3, [sp, #12]
 8011eb8:	4602      	mov	r2, r0
 8011eba:	f44f 6105 	mov.w	r1, #2128	; 0x850
 8011ebe:	4618      	mov	r0, r3
 8011ec0:	f006 fb77 	bl	80185b2 <lv_style_set_prop>
    lv_style_set_arc_rounded(&styles->arc_indic, true);
 8011ec4:	6820      	ldr	r0, [r4, #0]
    lv_style_set_prop(style, LV_STYLE_ARC_ROUNDED, v);
 8011ec6:	2201      	movs	r2, #1
 8011ec8:	2151      	movs	r1, #81	; 0x51
 8011eca:	30f8      	adds	r0, #248	; 0xf8
 8011ecc:	f006 fb71 	bl	80185b2 <lv_style_set_prop>
    style_init_reset(&styles->arc_indic_primary);
 8011ed0:	6820      	ldr	r0, [r4, #0]
 8011ed2:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8011ed6:	f7ff fb25 	bl	8011524 <style_init_reset>
    lv_style_value_t v = {
 8011eda:	465a      	mov	r2, fp
 8011edc:	8a2b      	ldrh	r3, [r5, #16]
    lv_style_set_prop(style, LV_STYLE_ARC_COLOR, v);
 8011ede:	2152      	movs	r1, #82	; 0x52
    lv_style_set_arc_color(&styles->arc_indic_primary, theme.color_primary);
 8011ee0:	6820      	ldr	r0, [r4, #0]
    lv_style_value_t v = {
 8011ee2:	f36b 421f 	bfi	r2, fp, #16, #16
 8011ee6:	f8ad b010 	strh.w	fp, [sp, #16]
 8011eea:	f363 020f 	bfi	r2, r3, #0, #16
    lv_style_set_prop(style, LV_STYLE_ARC_COLOR, v);
 8011eee:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8011ef2:	f006 fb5e 	bl	80185b2 <lv_style_set_prop>
    style_init_reset(&styles->dropdown_list);
 8011ef6:	6820      	ldr	r0, [r4, #0]
 8011ef8:	f500 7094 	add.w	r0, r0, #296	; 0x128
 8011efc:	f7ff fb12 	bl	8011524 <style_init_reset>
    lv_style_set_max_height(&styles->dropdown_list, LV_DPI_DEF * 2);
 8011f00:	6820      	ldr	r0, [r4, #0]
    lv_style_set_prop(style, LV_STYLE_MAX_HEIGHT, v);
 8011f02:	f44f 7282 	mov.w	r2, #260	; 0x104
 8011f06:	f241 0106 	movw	r1, #4102	; 0x1006
 8011f0a:	f500 7094 	add.w	r0, r0, #296	; 0x128
 8011f0e:	f006 fb50 	bl	80185b2 <lv_style_set_prop>
    style_init_reset(&styles->cb_marker);
 8011f12:	6820      	ldr	r0, [r4, #0]
 8011f14:	f500 7098 	add.w	r0, r0, #304	; 0x130
 8011f18:	f7ff fb04 	bl	8011524 <style_init_reset>
    lv_style_set_pad_all(&styles->cb_marker, lv_disp_dpx(theme.disp, 3));
 8011f1c:	6820      	ldr	r0, [r4, #0]
 8011f1e:	2103      	movs	r1, #3
 8011f20:	f500 7b98 	add.w	fp, r0, #304	; 0x130
 8011f24:	68e8      	ldr	r0, [r5, #12]
 8011f26:	f7ff fb07 	bl	8011538 <lv_disp_dpx.part.0>
 8011f2a:	4601      	mov	r1, r0
 8011f2c:	4658      	mov	r0, fp
 8011f2e:	f7ff fb3a 	bl	80115a6 <lv_style_set_pad_all>
    lv_style_set_border_width(&styles->cb_marker, BORDER_WIDTH);
 8011f32:	6820      	ldr	r0, [r4, #0]
 8011f34:	2102      	movs	r1, #2
 8011f36:	f500 7b98 	add.w	fp, r0, #304	; 0x130
 8011f3a:	68e8      	ldr	r0, [r5, #12]
 8011f3c:	f7ff fafc 	bl	8011538 <lv_disp_dpx.part.0>
 8011f40:	4601      	mov	r1, r0
 8011f42:	4658      	mov	r0, fp
 8011f44:	f7ff faca 	bl	80114dc <lv_style_set_border_width>
    lv_style_set_border_color(&styles->cb_marker, theme.color_primary);
 8011f48:	6820      	ldr	r0, [r4, #0]
 8011f4a:	8a29      	ldrh	r1, [r5, #16]
 8011f4c:	f500 7098 	add.w	r0, r0, #304	; 0x130
 8011f50:	f7ff fac9 	bl	80114e6 <lv_style_set_border_color>
    lv_style_set_bg_color(&styles->cb_marker, color_card);
 8011f54:	6820      	ldr	r0, [r4, #0]
 8011f56:	f8ba 1000 	ldrh.w	r1, [sl]
 8011f5a:	f500 7098 	add.w	r0, r0, #304	; 0x130
 8011f5e:	f7ff fad4 	bl	801150a <lv_style_set_bg_color>
    lv_style_set_bg_opa(&styles->cb_marker, LV_OPA_COVER);
 8011f62:	6820      	ldr	r0, [r4, #0]
 8011f64:	21ff      	movs	r1, #255	; 0xff
 8011f66:	f500 7098 	add.w	r0, r0, #304	; 0x130
 8011f6a:	f7ff faca 	bl	8011502 <lv_style_set_bg_opa>
    lv_style_set_radius(&styles->cb_marker, RADIUS_DEFAULT / 2);
 8011f6e:	6823      	ldr	r3, [r4, #0]
 8011f70:	68e8      	ldr	r0, [r5, #12]
 8011f72:	f503 7b98 	add.w	fp, r3, #304	; 0x130
 8011f76:	7833      	ldrb	r3, [r6, #0]
 8011f78:	2b01      	cmp	r3, #1
 8011f7a:	bf0c      	ite	eq
 8011f7c:	210c      	moveq	r1, #12
 8011f7e:	2108      	movne	r1, #8
 8011f80:	f7ff fada 	bl	8011538 <lv_disp_dpx.part.0>
 8011f84:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8011f88:	f340 014f 	sbfx	r1, r0, #1, #16
 8011f8c:	4658      	mov	r0, fp
 8011f8e:	f7ff fac5 	bl	801151c <lv_style_set_radius>
    style_init_reset(&styles->cb_marker_checked);
 8011f92:	6820      	ldr	r0, [r4, #0]
 8011f94:	f500 709c 	add.w	r0, r0, #312	; 0x138
 8011f98:	f7ff fac4 	bl	8011524 <style_init_reset>
    lv_style_set_bg_img_src(&styles->cb_marker_checked, LV_SYMBOL_OK);
 8011f9c:	6820      	ldr	r0, [r4, #0]
    lv_style_set_prop(style, LV_STYLE_BG_IMG_SRC, v);
 8011f9e:	4ad1      	ldr	r2, [pc, #836]	; (80122e4 <lv_theme_default_init+0xd04>)
 8011fa0:	2126      	movs	r1, #38	; 0x26
 8011fa2:	f500 709c 	add.w	r0, r0, #312	; 0x138
 8011fa6:	f006 fb04 	bl	80185b2 <lv_style_set_prop>
    lv_style_set_text_color(&styles->cb_marker_checked, lv_color_white());
 8011faa:	6820      	ldr	r0, [r4, #0]
 8011fac:	f500 739c 	add.w	r3, r0, #312	; 0x138
 8011fb0:	f7fe fc55 	bl	801085e <lv_color_white>
 8011fb4:	4601      	mov	r1, r0
 8011fb6:	4618      	mov	r0, r3
 8011fb8:	f7ff fa86 	bl	80114c8 <lv_style_set_text_color>
    lv_style_set_text_font(&styles->cb_marker_checked, theme.font_small);
 8011fbc:	6820      	ldr	r0, [r4, #0]
    lv_style_set_prop(style, LV_STYLE_TEXT_FONT, v);
 8011fbe:	696a      	ldr	r2, [r5, #20]
 8011fc0:	f241 4159 	movw	r1, #5209	; 0x1459
 8011fc4:	f500 709c 	add.w	r0, r0, #312	; 0x138
 8011fc8:	f006 faf3 	bl	80185b2 <lv_style_set_prop>
    style_init_reset(&styles->switch_knob);
 8011fcc:	6820      	ldr	r0, [r4, #0]
 8011fce:	f500 70a0 	add.w	r0, r0, #320	; 0x140
 8011fd2:	f7ff faa7 	bl	8011524 <style_init_reset>
    lv_style_set_pad_all(&styles->switch_knob, - lv_disp_dpx(theme.disp, 4));
 8011fd6:	6820      	ldr	r0, [r4, #0]
 8011fd8:	2104      	movs	r1, #4
 8011fda:	f500 7ba0 	add.w	fp, r0, #320	; 0x140
 8011fde:	68e8      	ldr	r0, [r5, #12]
 8011fe0:	f7ff faaa 	bl	8011538 <lv_disp_dpx.part.0>
 8011fe4:	4240      	negs	r0, r0
 8011fe6:	b201      	sxth	r1, r0
 8011fe8:	4658      	mov	r0, fp
 8011fea:	f7ff fadc 	bl	80115a6 <lv_style_set_pad_all>
    lv_style_set_bg_color(&styles->switch_knob, lv_color_white());
 8011fee:	6820      	ldr	r0, [r4, #0]
 8011ff0:	f500 73a0 	add.w	r3, r0, #320	; 0x140
 8011ff4:	f7fe fc33 	bl	801085e <lv_color_white>
 8011ff8:	4601      	mov	r1, r0
 8011ffa:	4618      	mov	r0, r3
 8011ffc:	f7ff fa85 	bl	801150a <lv_style_set_bg_color>
    style_init_reset(&styles->line);
 8012000:	6820      	ldr	r0, [r4, #0]
 8012002:	f500 70a4 	add.w	r0, r0, #328	; 0x148
 8012006:	f7ff fa8d 	bl	8011524 <style_init_reset>
    lv_style_set_line_width(&styles->line, 1);
 801200a:	6820      	ldr	r0, [r4, #0]
 801200c:	2101      	movs	r1, #1
 801200e:	f500 70a4 	add.w	r0, r0, #328	; 0x148
 8012012:	f7ff fa3a 	bl	801148a <lv_style_set_line_width>
    lv_style_set_line_color(&styles->line, color_text);
 8012016:	6820      	ldr	r0, [r4, #0]
 8012018:	8839      	ldrh	r1, [r7, #0]
 801201a:	f500 70a4 	add.w	r0, r0, #328	; 0x148
 801201e:	f7ff fa39 	bl	8011494 <lv_style_set_line_color>
    style_init_reset(&styles->chart_bg);
 8012022:	6820      	ldr	r0, [r4, #0]
 8012024:	f500 7090 	add.w	r0, r0, #288	; 0x120
 8012028:	f7ff fa7c 	bl	8011524 <style_init_reset>
    lv_style_set_border_post(&styles->chart_bg, false);
 801202c:	6820      	ldr	r0, [r4, #0]
    lv_style_set_prop(style, LV_STYLE_BORDER_POST, v);
 801202e:	2200      	movs	r2, #0
 8012030:	2134      	movs	r1, #52	; 0x34
 8012032:	f500 7090 	add.w	r0, r0, #288	; 0x120
 8012036:	f006 fabc 	bl	80185b2 <lv_style_set_prop>
    lv_style_set_pad_column(&styles->chart_bg, lv_disp_dpx(theme.disp, 10));
 801203a:	6820      	ldr	r0, [r4, #0]
 801203c:	210a      	movs	r1, #10
 801203e:	f500 7b90 	add.w	fp, r0, #288	; 0x120
 8012042:	68e8      	ldr	r0, [r5, #12]
 8012044:	f7ff fa78 	bl	8011538 <lv_disp_dpx.part.0>
 8012048:	4601      	mov	r1, r0
 801204a:	4658      	mov	r0, fp
 801204c:	f7ff fa54 	bl	80114f8 <lv_style_set_pad_column>
    lv_style_set_line_color(&styles->chart_bg, color_grey);
 8012050:	6820      	ldr	r0, [r4, #0]
 8012052:	f8b9 1000 	ldrh.w	r1, [r9]
 8012056:	f500 7090 	add.w	r0, r0, #288	; 0x120
 801205a:	f7ff fa1b 	bl	8011494 <lv_style_set_line_color>
    style_init_reset(&styles->chart_series);
 801205e:	6820      	ldr	r0, [r4, #0]
 8012060:	f500 7084 	add.w	r0, r0, #264	; 0x108
 8012064:	f7ff fa5e 	bl	8011524 <style_init_reset>
    lv_style_set_line_width(&styles->chart_series, lv_disp_dpx(theme.disp, 3));
 8012068:	6820      	ldr	r0, [r4, #0]
 801206a:	2103      	movs	r1, #3
 801206c:	f500 7b84 	add.w	fp, r0, #264	; 0x108
 8012070:	68e8      	ldr	r0, [r5, #12]
 8012072:	f7ff fa61 	bl	8011538 <lv_disp_dpx.part.0>
 8012076:	4601      	mov	r1, r0
 8012078:	4658      	mov	r0, fp
 801207a:	f7ff fa06 	bl	801148a <lv_style_set_line_width>
    lv_style_set_radius(&styles->chart_series, lv_disp_dpx(theme.disp, 3));
 801207e:	6820      	ldr	r0, [r4, #0]
 8012080:	2103      	movs	r1, #3
 8012082:	f500 7b84 	add.w	fp, r0, #264	; 0x108
 8012086:	68e8      	ldr	r0, [r5, #12]
 8012088:	f7ff fa56 	bl	8011538 <lv_disp_dpx.part.0>
 801208c:	4601      	mov	r1, r0
 801208e:	4658      	mov	r0, fp
 8012090:	f7ff fa44 	bl	801151c <lv_style_set_radius>
    lv_style_set_size(&styles->chart_series, lv_disp_dpx(theme.disp, 8));
 8012094:	6820      	ldr	r0, [r4, #0]
 8012096:	2108      	movs	r1, #8
 8012098:	f500 7b84 	add.w	fp, r0, #264	; 0x108
 801209c:	68e8      	ldr	r0, [r5, #12]
 801209e:	f7ff fa4b 	bl	8011538 <lv_disp_dpx.part.0>
 80120a2:	4601      	mov	r1, r0
 80120a4:	4658      	mov	r0, fp
 80120a6:	f7ff f9fe 	bl	80114a6 <lv_style_set_size>
    lv_style_set_pad_column(&styles->chart_series, lv_disp_dpx(theme.disp, 2));
 80120aa:	6820      	ldr	r0, [r4, #0]
 80120ac:	2102      	movs	r1, #2
 80120ae:	f500 7b84 	add.w	fp, r0, #264	; 0x108
 80120b2:	68e8      	ldr	r0, [r5, #12]
 80120b4:	f7ff fa40 	bl	8011538 <lv_disp_dpx.part.0>
 80120b8:	4601      	mov	r1, r0
 80120ba:	4658      	mov	r0, fp
 80120bc:	f7ff fa1c 	bl	80114f8 <lv_style_set_pad_column>
    style_init_reset(&styles->chart_indic);
 80120c0:	6820      	ldr	r0, [r4, #0]
 80120c2:	f500 7088 	add.w	r0, r0, #272	; 0x110
 80120c6:	f7ff fa2d 	bl	8011524 <style_init_reset>
    lv_style_set_radius(&styles->chart_indic,LV_RADIUS_CIRCLE);
 80120ca:	6820      	ldr	r0, [r4, #0]
 80120cc:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80120d0:	f500 7088 	add.w	r0, r0, #272	; 0x110
 80120d4:	f7ff fa22 	bl	801151c <lv_style_set_radius>
    lv_style_set_size(&styles->chart_indic, lv_disp_dpx(theme.disp, 8));
 80120d8:	6820      	ldr	r0, [r4, #0]
 80120da:	2108      	movs	r1, #8
 80120dc:	f500 7b88 	add.w	fp, r0, #272	; 0x110
 80120e0:	68e8      	ldr	r0, [r5, #12]
 80120e2:	f7ff fa29 	bl	8011538 <lv_disp_dpx.part.0>
 80120e6:	4601      	mov	r1, r0
 80120e8:	4658      	mov	r0, fp
 80120ea:	f7ff f9dc 	bl	80114a6 <lv_style_set_size>
    lv_style_set_bg_color(&styles->chart_indic, theme.color_primary);
 80120ee:	6820      	ldr	r0, [r4, #0]
 80120f0:	8a29      	ldrh	r1, [r5, #16]
 80120f2:	f500 7088 	add.w	r0, r0, #272	; 0x110
 80120f6:	f7ff fa08 	bl	801150a <lv_style_set_bg_color>
    lv_style_set_bg_opa(&styles->chart_indic, LV_OPA_COVER);
 80120fa:	6820      	ldr	r0, [r4, #0]
 80120fc:	21ff      	movs	r1, #255	; 0xff
 80120fe:	f500 7088 	add.w	r0, r0, #272	; 0x110
 8012102:	f7ff f9fe 	bl	8011502 <lv_style_set_bg_opa>
    style_init_reset(&styles->chart_ticks);
 8012106:	6820      	ldr	r0, [r4, #0]
 8012108:	f500 708c 	add.w	r0, r0, #280	; 0x118
 801210c:	f7ff fa0a 	bl	8011524 <style_init_reset>
    lv_style_set_line_width(&styles->chart_ticks, lv_disp_dpx(theme.disp, 1));
 8012110:	6820      	ldr	r0, [r4, #0]
 8012112:	2101      	movs	r1, #1
 8012114:	f500 7b8c 	add.w	fp, r0, #280	; 0x118
 8012118:	68e8      	ldr	r0, [r5, #12]
 801211a:	f7ff fa0d 	bl	8011538 <lv_disp_dpx.part.0>
 801211e:	4601      	mov	r1, r0
 8012120:	4658      	mov	r0, fp
 8012122:	f7ff f9b2 	bl	801148a <lv_style_set_line_width>
    lv_style_set_line_color(&styles->chart_ticks, color_text);
 8012126:	6820      	ldr	r0, [r4, #0]
 8012128:	8839      	ldrh	r1, [r7, #0]
 801212a:	f500 708c 	add.w	r0, r0, #280	; 0x118
 801212e:	f7ff f9b1 	bl	8011494 <lv_style_set_line_color>
    lv_style_set_pad_all(&styles->chart_ticks, lv_disp_dpx(theme.disp, 2));
 8012132:	6820      	ldr	r0, [r4, #0]
 8012134:	2102      	movs	r1, #2
 8012136:	f500 7b8c 	add.w	fp, r0, #280	; 0x118
 801213a:	68e8      	ldr	r0, [r5, #12]
 801213c:	f7ff f9fc 	bl	8011538 <lv_disp_dpx.part.0>
 8012140:	4601      	mov	r1, r0
 8012142:	4658      	mov	r0, fp
 8012144:	f7ff fa2f 	bl	80115a6 <lv_style_set_pad_all>
    lv_style_set_text_color(&styles->chart_ticks, lv_palette_main(LV_PALETTE_GREY));
 8012148:	6820      	ldr	r0, [r4, #0]
 801214a:	f500 7b8c 	add.w	fp, r0, #280	; 0x118
 801214e:	2012      	movs	r0, #18
 8012150:	f005 f8a4 	bl	801729c <lv_palette_main>
 8012154:	4601      	mov	r1, r0
 8012156:	4658      	mov	r0, fp
 8012158:	f7ff f9b6 	bl	80114c8 <lv_style_set_text_color>
    style_init_reset(&styles->meter_marker);
 801215c:	6820      	ldr	r0, [r4, #0]
 801215e:	f500 70ac 	add.w	r0, r0, #344	; 0x158
 8012162:	f7ff f9df 	bl	8011524 <style_init_reset>
    lv_style_set_line_width(&styles->meter_marker, lv_disp_dpx(theme.disp, 5));
 8012166:	6820      	ldr	r0, [r4, #0]
 8012168:	2105      	movs	r1, #5
 801216a:	f500 7bac 	add.w	fp, r0, #344	; 0x158
 801216e:	68e8      	ldr	r0, [r5, #12]
 8012170:	f7ff f9e2 	bl	8011538 <lv_disp_dpx.part.0>
 8012174:	4601      	mov	r1, r0
 8012176:	4658      	mov	r0, fp
 8012178:	f7ff f987 	bl	801148a <lv_style_set_line_width>
    lv_style_set_line_color(&styles->meter_marker, color_text);
 801217c:	6820      	ldr	r0, [r4, #0]
 801217e:	8839      	ldrh	r1, [r7, #0]
 8012180:	f500 70ac 	add.w	r0, r0, #344	; 0x158
 8012184:	f7ff f986 	bl	8011494 <lv_style_set_line_color>
    lv_style_set_size(&styles->meter_marker, lv_disp_dpx(theme.disp, 20));
 8012188:	6820      	ldr	r0, [r4, #0]
 801218a:	2114      	movs	r1, #20
 801218c:	f500 7bac 	add.w	fp, r0, #344	; 0x158
 8012190:	68e8      	ldr	r0, [r5, #12]
 8012192:	f7ff f9d1 	bl	8011538 <lv_disp_dpx.part.0>
 8012196:	4601      	mov	r1, r0
 8012198:	4658      	mov	r0, fp
 801219a:	f7ff f984 	bl	80114a6 <lv_style_set_size>
    lv_style_set_pad_left(&styles->meter_marker, lv_disp_dpx(theme.disp, 15));
 801219e:	6820      	ldr	r0, [r4, #0]
 80121a0:	210f      	movs	r1, #15
 80121a2:	f500 7bac 	add.w	fp, r0, #344	; 0x158
 80121a6:	68e8      	ldr	r0, [r5, #12]
 80121a8:	f7ff f9c6 	bl	8011538 <lv_disp_dpx.part.0>
    lv_style_set_prop(style, LV_STYLE_PAD_LEFT, v);
 80121ac:	f241 0112 	movw	r1, #4114	; 0x1012
 80121b0:	4602      	mov	r2, r0
 80121b2:	4658      	mov	r0, fp
 80121b4:	f006 f9fd 	bl	80185b2 <lv_style_set_prop>
    style_init_reset(&styles->meter_indic);
 80121b8:	6820      	ldr	r0, [r4, #0]
 80121ba:	f500 70b0 	add.w	r0, r0, #352	; 0x160
 80121be:	f7ff f9b1 	bl	8011524 <style_init_reset>
    lv_style_set_radius(&styles->meter_indic, LV_RADIUS_CIRCLE);
 80121c2:	6820      	ldr	r0, [r4, #0]
 80121c4:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80121c8:	f500 70b0 	add.w	r0, r0, #352	; 0x160
 80121cc:	f7ff f9a6 	bl	801151c <lv_style_set_radius>
    lv_style_set_bg_color(&styles->meter_indic, color_text);
 80121d0:	6820      	ldr	r0, [r4, #0]
 80121d2:	8839      	ldrh	r1, [r7, #0]
 80121d4:	f500 70b0 	add.w	r0, r0, #352	; 0x160
 80121d8:	f7ff f997 	bl	801150a <lv_style_set_bg_color>
    lv_style_set_bg_opa(&styles->meter_indic, LV_OPA_COVER);
 80121dc:	6820      	ldr	r0, [r4, #0]
 80121de:	21ff      	movs	r1, #255	; 0xff
 80121e0:	f500 70b0 	add.w	r0, r0, #352	; 0x160
 80121e4:	f7ff f98d 	bl	8011502 <lv_style_set_bg_opa>
    lv_style_set_size(&styles->meter_indic, lv_disp_dpx(theme.disp, 15));
 80121e8:	6820      	ldr	r0, [r4, #0]
 80121ea:	210f      	movs	r1, #15
 80121ec:	f500 7bb0 	add.w	fp, r0, #352	; 0x160
 80121f0:	68e8      	ldr	r0, [r5, #12]
 80121f2:	f7ff f9a1 	bl	8011538 <lv_disp_dpx.part.0>
 80121f6:	4601      	mov	r1, r0
 80121f8:	4658      	mov	r0, fp
 80121fa:	f7ff f954 	bl	80114a6 <lv_style_set_size>
    style_init_reset(&styles->table_cell);
 80121fe:	6820      	ldr	r0, [r4, #0]
 8012200:	f500 70a8 	add.w	r0, r0, #336	; 0x150
 8012204:	f7ff f98e 	bl	8011524 <style_init_reset>
    lv_style_set_border_width(&styles->table_cell, lv_disp_dpx(theme.disp, 1));
 8012208:	6820      	ldr	r0, [r4, #0]
 801220a:	2101      	movs	r1, #1
 801220c:	f500 7ba8 	add.w	fp, r0, #336	; 0x150
 8012210:	68e8      	ldr	r0, [r5, #12]
 8012212:	f7ff f991 	bl	8011538 <lv_disp_dpx.part.0>
 8012216:	4601      	mov	r1, r0
 8012218:	4658      	mov	r0, fp
 801221a:	f7ff f95f 	bl	80114dc <lv_style_set_border_width>
    lv_style_set_border_color(&styles->table_cell, color_grey);
 801221e:	6820      	ldr	r0, [r4, #0]
 8012220:	f8b9 1000 	ldrh.w	r1, [r9]
 8012224:	f500 70a8 	add.w	r0, r0, #336	; 0x150
 8012228:	f7ff f95d 	bl	80114e6 <lv_style_set_border_color>
    lv_style_set_border_side(&styles->table_cell, LV_BORDER_SIDE_TOP | LV_BORDER_SIDE_BOTTOM );
 801222c:	6820      	ldr	r0, [r4, #0]
    lv_style_set_prop(style, LV_STYLE_BORDER_SIDE, v);
 801222e:	2203      	movs	r2, #3
 8012230:	2133      	movs	r1, #51	; 0x33
 8012232:	f500 70a8 	add.w	r0, r0, #336	; 0x150
 8012236:	f006 f9bc 	bl	80185b2 <lv_style_set_prop>
    style_init_reset(&styles->ta_cursor);
 801223a:	6820      	ldr	r0, [r4, #0]
 801223c:	f500 70b4 	add.w	r0, r0, #360	; 0x168
 8012240:	f7ff f970 	bl	8011524 <style_init_reset>
    lv_style_set_border_color(&styles->ta_cursor, color_text);
 8012244:	6820      	ldr	r0, [r4, #0]
 8012246:	8839      	ldrh	r1, [r7, #0]
 8012248:	f500 70b4 	add.w	r0, r0, #360	; 0x168
 801224c:	f7ff f94b 	bl	80114e6 <lv_style_set_border_color>
    lv_style_set_border_width(&styles->ta_cursor, lv_disp_dpx(theme.disp, 2));
 8012250:	6820      	ldr	r0, [r4, #0]
 8012252:	2102      	movs	r1, #2
 8012254:	f500 77b4 	add.w	r7, r0, #360	; 0x168
 8012258:	68e8      	ldr	r0, [r5, #12]
 801225a:	f7ff f96d 	bl	8011538 <lv_disp_dpx.part.0>
 801225e:	4601      	mov	r1, r0
 8012260:	4638      	mov	r0, r7
 8012262:	f7ff f93b 	bl	80114dc <lv_style_set_border_width>
    lv_style_set_pad_left(&styles->ta_cursor, lv_disp_dpx(theme.disp, 1));
 8012266:	6820      	ldr	r0, [r4, #0]
 8012268:	2101      	movs	r1, #1
 801226a:	f500 77b4 	add.w	r7, r0, #360	; 0x168
 801226e:	68e8      	ldr	r0, [r5, #12]
 8012270:	f7ff f962 	bl	8011538 <lv_disp_dpx.part.0>
    lv_style_set_prop(style, LV_STYLE_PAD_LEFT, v);
 8012274:	f241 0112 	movw	r1, #4114	; 0x1012
 8012278:	4602      	mov	r2, r0
 801227a:	4638      	mov	r0, r7
 801227c:	f006 f999 	bl	80185b2 <lv_style_set_prop>
    lv_style_set_border_side(&styles->ta_cursor, LV_BORDER_SIDE_LEFT);
 8012280:	6820      	ldr	r0, [r4, #0]
    lv_style_set_prop(style, LV_STYLE_BORDER_SIDE, v);
 8012282:	2204      	movs	r2, #4
 8012284:	2133      	movs	r1, #51	; 0x33
 8012286:	f500 70b4 	add.w	r0, r0, #360	; 0x168
 801228a:	f006 f992 	bl	80185b2 <lv_style_set_prop>
    lv_style_set_anim_time(&styles->ta_cursor, 400);
 801228e:	6820      	ldr	r0, [r4, #0]
    lv_style_set_prop(style, LV_STYLE_ANIM_TIME, v);
 8012290:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8012294:	2165      	movs	r1, #101	; 0x65
 8012296:	f500 70b4 	add.w	r0, r0, #360	; 0x168
 801229a:	f006 f98a 	bl	80185b2 <lv_style_set_prop>
    style_init_reset(&styles->ta_placeholder);
 801229e:	6820      	ldr	r0, [r4, #0]
 80122a0:	f500 70b8 	add.w	r0, r0, #368	; 0x170
 80122a4:	f7ff f93e 	bl	8011524 <style_init_reset>
    lv_style_set_text_color(&styles->ta_placeholder, (theme.flags & MODE_DARK) ? lv_palette_darken(LV_PALETTE_GREY, 2) : lv_palette_lighten(LV_PALETTE_GREY, 1));
 80122a8:	6a2b      	ldr	r3, [r5, #32]
 80122aa:	6827      	ldr	r7, [r4, #0]
 80122ac:	07db      	lsls	r3, r3, #31
 80122ae:	f507 77b8 	add.w	r7, r7, #368	; 0x170
 80122b2:	f140 825d 	bpl.w	8012770 <lv_theme_default_init+0x1190>
 80122b6:	2102      	movs	r1, #2
 80122b8:	2012      	movs	r0, #18
 80122ba:	f005 f80b 	bl	80172d4 <lv_palette_darken>
 80122be:	4601      	mov	r1, r0
 80122c0:	4638      	mov	r0, r7
 80122c2:	f7ff f901 	bl	80114c8 <lv_style_set_text_color>
    style_init_reset(&styles->calendar_bg);
 80122c6:	6820      	ldr	r0, [r4, #0]
 80122c8:	f500 70bc 	add.w	r0, r0, #376	; 0x178
 80122cc:	f7ff f92a 	bl	8011524 <style_init_reset>
    lv_style_set_pad_all(&styles->calendar_bg, PAD_SMALL);
 80122d0:	7833      	ldrb	r3, [r6, #0]
 80122d2:	6827      	ldr	r7, [r4, #0]
 80122d4:	2b01      	cmp	r3, #1
 80122d6:	f507 77bc 	add.w	r7, r7, #376	; 0x178
 80122da:	f040 824e 	bne.w	801277a <lv_theme_default_init+0x119a>
 80122de:	210e      	movs	r1, #14
 80122e0:	68e8      	ldr	r0, [r5, #12]
 80122e2:	e001      	b.n	80122e8 <lv_theme_default_init+0xd08>
 80122e4:	0802510e 	.word	0x0802510e
 80122e8:	f7ff f926 	bl	8011538 <lv_disp_dpx.part.0>
 80122ec:	4601      	mov	r1, r0
 80122ee:	4638      	mov	r0, r7
 80122f0:	f7ff f959 	bl	80115a6 <lv_style_set_pad_all>
    lv_style_set_pad_gap(&styles->calendar_bg, PAD_SMALL / 2);
 80122f4:	6823      	ldr	r3, [r4, #0]
 80122f6:	f503 7bbc 	add.w	fp, r3, #376	; 0x178
 80122fa:	7833      	ldrb	r3, [r6, #0]
 80122fc:	2b01      	cmp	r3, #1
 80122fe:	f040 8242 	bne.w	8012786 <lv_theme_default_init+0x11a6>
 8012302:	210e      	movs	r1, #14
 8012304:	68e8      	ldr	r0, [r5, #12]
 8012306:	f7ff f917 	bl	8011538 <lv_disp_dpx.part.0>
 801230a:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 801230e:	f340 074f 	sbfx	r7, r0, #1, #16
    lv_style_set_pad_row(style, value);
 8012312:	4658      	mov	r0, fp
 8012314:	4639      	mov	r1, r7
 8012316:	f7ff f8b3 	bl	8011480 <lv_style_set_pad_row>
    lv_style_set_pad_column(style, value);
 801231a:	4639      	mov	r1, r7
 801231c:	4658      	mov	r0, fp
 801231e:	f7ff f8eb 	bl	80114f8 <lv_style_set_pad_column>
    lv_style_set_radius(&styles->calendar_bg, 0);
 8012322:	6820      	ldr	r0, [r4, #0]
 8012324:	2100      	movs	r1, #0
 8012326:	f500 70bc 	add.w	r0, r0, #376	; 0x178
 801232a:	f7ff f8f7 	bl	801151c <lv_style_set_radius>
    style_init_reset(&styles->calendar_day);
 801232e:	6820      	ldr	r0, [r4, #0]
 8012330:	f500 70c0 	add.w	r0, r0, #384	; 0x180
 8012334:	f7ff f8f6 	bl	8011524 <style_init_reset>
    lv_style_set_border_width(&styles->calendar_day, lv_disp_dpx(theme.disp, 1));
 8012338:	6820      	ldr	r0, [r4, #0]
 801233a:	2101      	movs	r1, #1
 801233c:	f500 77c0 	add.w	r7, r0, #384	; 0x180
 8012340:	68e8      	ldr	r0, [r5, #12]
 8012342:	f7ff f8f9 	bl	8011538 <lv_disp_dpx.part.0>
 8012346:	4601      	mov	r1, r0
 8012348:	4638      	mov	r0, r7
 801234a:	f7ff f8c7 	bl	80114dc <lv_style_set_border_width>
    lv_style_set_border_color(&styles->calendar_day, color_grey);
 801234e:	6820      	ldr	r0, [r4, #0]
 8012350:	f8b9 1000 	ldrh.w	r1, [r9]
 8012354:	f500 70c0 	add.w	r0, r0, #384	; 0x180
 8012358:	f7ff f8c5 	bl	80114e6 <lv_style_set_border_color>
    lv_style_set_bg_color(&styles->calendar_day, color_card);
 801235c:	6820      	ldr	r0, [r4, #0]
 801235e:	f8ba 1000 	ldrh.w	r1, [sl]
 8012362:	f500 70c0 	add.w	r0, r0, #384	; 0x180
 8012366:	f7ff f8d0 	bl	801150a <lv_style_set_bg_color>
    lv_style_set_bg_opa(&styles->calendar_day, LV_OPA_20);
 801236a:	6820      	ldr	r0, [r4, #0]
 801236c:	2133      	movs	r1, #51	; 0x33
 801236e:	f500 70c0 	add.w	r0, r0, #384	; 0x180
 8012372:	f7ff f8c6 	bl	8011502 <lv_style_set_bg_opa>
    style_init_reset(&styles->colorwheel_main);
 8012376:	6820      	ldr	r0, [r4, #0]
 8012378:	f500 70c4 	add.w	r0, r0, #392	; 0x188
 801237c:	f7ff f8d2 	bl	8011524 <style_init_reset>
    lv_style_set_arc_width(&styles->colorwheel_main, lv_disp_dpx(theme.disp, 10));
 8012380:	6820      	ldr	r0, [r4, #0]
 8012382:	210a      	movs	r1, #10
 8012384:	f500 77c4 	add.w	r7, r0, #392	; 0x188
 8012388:	68e8      	ldr	r0, [r5, #12]
 801238a:	f7ff f8d5 	bl	8011538 <lv_disp_dpx.part.0>
    lv_style_set_prop(style, LV_STYLE_ARC_WIDTH, v);
 801238e:	f44f 6105 	mov.w	r1, #2128	; 0x850
 8012392:	4602      	mov	r2, r0
 8012394:	4638      	mov	r0, r7
 8012396:	f006 f90c 	bl	80185b2 <lv_style_set_prop>
    style_init_reset(&styles->msgbox_btn_bg);
 801239a:	6820      	ldr	r0, [r4, #0]
 801239c:	f500 70cc 	add.w	r0, r0, #408	; 0x198
 80123a0:	f7ff f8c0 	bl	8011524 <style_init_reset>
    lv_style_set_pad_all(&styles->msgbox_btn_bg, lv_disp_dpx(theme.disp, 4));
 80123a4:	6820      	ldr	r0, [r4, #0]
 80123a6:	2104      	movs	r1, #4
 80123a8:	f500 77cc 	add.w	r7, r0, #408	; 0x198
 80123ac:	68e8      	ldr	r0, [r5, #12]
 80123ae:	f7ff f8c3 	bl	8011538 <lv_disp_dpx.part.0>
 80123b2:	4601      	mov	r1, r0
 80123b4:	4638      	mov	r0, r7
 80123b6:	f7ff f8f6 	bl	80115a6 <lv_style_set_pad_all>
    style_init_reset(&styles->msgbox_bg);
 80123ba:	6820      	ldr	r0, [r4, #0]
 80123bc:	f500 70c8 	add.w	r0, r0, #400	; 0x190
 80123c0:	f7ff f8b0 	bl	8011524 <style_init_reset>
    lv_style_set_max_width(&styles->msgbox_bg, lv_pct(100));
 80123c4:	6820      	ldr	r0, [r4, #0]
    lv_style_set_prop(style, LV_STYLE_MAX_WIDTH, v);
 80123c6:	f242 0264 	movw	r2, #8292	; 0x2064
 80123ca:	f241 0103 	movw	r1, #4099	; 0x1003
 80123ce:	f500 70c8 	add.w	r0, r0, #400	; 0x190
 80123d2:	f006 f8ee 	bl	80185b2 <lv_style_set_prop>
    style_init_reset(&styles->keyboard_btn_bg);
 80123d6:	6820      	ldr	r0, [r4, #0]
 80123d8:	f500 70d0 	add.w	r0, r0, #416	; 0x1a0
 80123dc:	f7ff f8a2 	bl	8011524 <style_init_reset>
    lv_style_set_shadow_width(&styles->keyboard_btn_bg, 0);
 80123e0:	6820      	ldr	r0, [r4, #0]
    lv_style_set_prop(style, LV_STYLE_SHADOW_WIDTH, v);
 80123e2:	2200      	movs	r2, #0
 80123e4:	f44f 6104 	mov.w	r1, #2112	; 0x840
 80123e8:	f500 70d0 	add.w	r0, r0, #416	; 0x1a0
 80123ec:	f006 f8e1 	bl	80185b2 <lv_style_set_prop>
    lv_style_set_radius(&styles->keyboard_btn_bg, disp_size == DISP_SMALL ? RADIUS_DEFAULT / 2 : RADIUS_DEFAULT);
 80123f0:	7833      	ldrb	r3, [r6, #0]
 80123f2:	6827      	ldr	r7, [r4, #0]
 80123f4:	2b03      	cmp	r3, #3
 80123f6:	f507 77d0 	add.w	r7, r7, #416	; 0x1a0
 80123fa:	f040 81ca 	bne.w	8012792 <lv_theme_default_init+0x11b2>
 80123fe:	2108      	movs	r1, #8
 8012400:	68e8      	ldr	r0, [r5, #12]
 8012402:	f7ff f899 	bl	8011538 <lv_disp_dpx.part.0>
 8012406:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 801240a:	f340 004f 	sbfx	r0, r0, #1, #16
 801240e:	4601      	mov	r1, r0
 8012410:	4638      	mov	r0, r7
 8012412:	f7ff f883 	bl	801151c <lv_style_set_radius>
    style_init_reset(&styles->tab_btn);
 8012416:	6820      	ldr	r0, [r4, #0]
 8012418:	f500 70e8 	add.w	r0, r0, #464	; 0x1d0
 801241c:	f7ff f882 	bl	8011524 <style_init_reset>
    lv_style_set_border_color(&styles->tab_btn, theme.color_primary);
 8012420:	6820      	ldr	r0, [r4, #0]
 8012422:	8a29      	ldrh	r1, [r5, #16]
 8012424:	f500 70e8 	add.w	r0, r0, #464	; 0x1d0
 8012428:	f7ff f85d 	bl	80114e6 <lv_style_set_border_color>
    lv_style_set_border_width(&styles->tab_btn, BORDER_WIDTH * 2);
 801242c:	6820      	ldr	r0, [r4, #0]
 801242e:	2102      	movs	r1, #2
 8012430:	f500 77e8 	add.w	r7, r0, #464	; 0x1d0
 8012434:	68e8      	ldr	r0, [r5, #12]
 8012436:	f7ff f87f 	bl	8011538 <lv_disp_dpx.part.0>
 801243a:	0040      	lsls	r0, r0, #1
 801243c:	b201      	sxth	r1, r0
 801243e:	4638      	mov	r0, r7
 8012440:	f7ff f84c 	bl	80114dc <lv_style_set_border_width>
    lv_style_set_border_side(&styles->tab_btn, LV_BORDER_SIDE_BOTTOM);
 8012444:	6820      	ldr	r0, [r4, #0]
    lv_style_set_prop(style, LV_STYLE_BORDER_SIDE, v);
 8012446:	2201      	movs	r2, #1
 8012448:	2133      	movs	r1, #51	; 0x33
 801244a:	f500 70e8 	add.w	r0, r0, #464	; 0x1d0
 801244e:	f006 f8b0 	bl	80185b2 <lv_style_set_prop>
    style_init_reset(&styles->tab_bg_focus);
 8012452:	6820      	ldr	r0, [r4, #0]
 8012454:	f500 70e4 	add.w	r0, r0, #456	; 0x1c8
 8012458:	f7ff f864 	bl	8011524 <style_init_reset>
    lv_style_set_outline_pad(&styles->tab_bg_focus, -BORDER_WIDTH);
 801245c:	6820      	ldr	r0, [r4, #0]
 801245e:	2102      	movs	r1, #2
 8012460:	f500 77e4 	add.w	r7, r0, #456	; 0x1c8
 8012464:	68e8      	ldr	r0, [r5, #12]
 8012466:	f7ff f867 	bl	8011538 <lv_disp_dpx.part.0>
 801246a:	4240      	negs	r0, r0
    lv_style_set_prop(style, LV_STYLE_OUTLINE_PAD, v);
 801246c:	f640 013d 	movw	r1, #2109	; 0x83d
 8012470:	b202      	sxth	r2, r0
 8012472:	4638      	mov	r0, r7
 8012474:	f006 f89d 	bl	80185b2 <lv_style_set_prop>
    style_init_reset(&styles->list_bg);
 8012478:	6820      	ldr	r0, [r4, #0]
 801247a:	f500 70d4 	add.w	r0, r0, #424	; 0x1a8
 801247e:	f7ff f851 	bl	8011524 <style_init_reset>
    lv_style_set_pad_hor(&styles->list_bg, PAD_DEF);
 8012482:	7833      	ldrb	r3, [r6, #0]
 8012484:	6827      	ldr	r7, [r4, #0]
 8012486:	2b01      	cmp	r3, #1
 8012488:	f507 77d4 	add.w	r7, r7, #424	; 0x1a8
 801248c:	f040 8189 	bne.w	80127a2 <lv_theme_default_init+0x11c2>
 8012490:	2118      	movs	r1, #24
 8012492:	68e8      	ldr	r0, [r5, #12]
 8012494:	f7ff f850 	bl	8011538 <lv_disp_dpx.part.0>
 8012498:	4601      	mov	r1, r0
 801249a:	4638      	mov	r0, r7
 801249c:	f7ff f861 	bl	8011562 <lv_style_set_pad_hor>
    lv_style_set_pad_ver(&styles->list_bg, 0);
 80124a0:	6820      	ldr	r0, [r4, #0]
 80124a2:	2100      	movs	r1, #0
 80124a4:	f500 70d4 	add.w	r0, r0, #424	; 0x1a8
 80124a8:	f7ff f86c 	bl	8011584 <lv_style_set_pad_ver>
    lv_style_set_pad_gap(&styles->list_bg, 0);
 80124ac:	6820      	ldr	r0, [r4, #0]
    lv_style_set_pad_row(style, value);
 80124ae:	2100      	movs	r1, #0
 80124b0:	f500 70d4 	add.w	r0, r0, #424	; 0x1a8
 80124b4:	9003      	str	r0, [sp, #12]
 80124b6:	f7fe ffe3 	bl	8011480 <lv_style_set_pad_row>
    lv_style_set_pad_column(style, value);
 80124ba:	2100      	movs	r1, #0
 80124bc:	9803      	ldr	r0, [sp, #12]
 80124be:	f7ff f81b 	bl	80114f8 <lv_style_set_pad_column>
    lv_style_set_clip_corner(&styles->list_bg, true);
 80124c2:	6820      	ldr	r0, [r4, #0]
    lv_style_set_prop(style, LV_STYLE_CLIP_CORNER, v);
 80124c4:	2201      	movs	r2, #1
 80124c6:	2161      	movs	r1, #97	; 0x61
 80124c8:	f500 70d4 	add.w	r0, r0, #424	; 0x1a8
 80124cc:	f006 f871 	bl	80185b2 <lv_style_set_prop>
    style_init_reset(&styles->list_btn);
 80124d0:	6820      	ldr	r0, [r4, #0]
 80124d2:	f500 70d8 	add.w	r0, r0, #432	; 0x1b0
 80124d6:	f7ff f825 	bl	8011524 <style_init_reset>
    lv_style_set_border_width(&styles->list_btn, lv_disp_dpx(theme.disp, 1));
 80124da:	6820      	ldr	r0, [r4, #0]
 80124dc:	2101      	movs	r1, #1
 80124de:	f500 77d8 	add.w	r7, r0, #432	; 0x1b0
 80124e2:	68e8      	ldr	r0, [r5, #12]
 80124e4:	f7ff f828 	bl	8011538 <lv_disp_dpx.part.0>
 80124e8:	4601      	mov	r1, r0
 80124ea:	4638      	mov	r0, r7
 80124ec:	f7fe fff6 	bl	80114dc <lv_style_set_border_width>
    lv_style_set_border_color(&styles->list_btn, color_grey);
 80124f0:	6820      	ldr	r0, [r4, #0]
 80124f2:	f8b9 1000 	ldrh.w	r1, [r9]
 80124f6:	f500 70d8 	add.w	r0, r0, #432	; 0x1b0
 80124fa:	f7fe fff4 	bl	80114e6 <lv_style_set_border_color>
    lv_style_set_border_side(&styles->list_btn, LV_BORDER_SIDE_BOTTOM);
 80124fe:	6820      	ldr	r0, [r4, #0]
    lv_style_set_prop(style, LV_STYLE_BORDER_SIDE, v);
 8012500:	2201      	movs	r2, #1
 8012502:	2133      	movs	r1, #51	; 0x33
 8012504:	f500 70d8 	add.w	r0, r0, #432	; 0x1b0
 8012508:	f006 f853 	bl	80185b2 <lv_style_set_prop>
    lv_style_set_pad_all(&styles->list_btn, PAD_SMALL);
 801250c:	7833      	ldrb	r3, [r6, #0]
 801250e:	6827      	ldr	r7, [r4, #0]
 8012510:	2b01      	cmp	r3, #1
 8012512:	f507 77d8 	add.w	r7, r7, #432	; 0x1b0
 8012516:	f040 814a 	bne.w	80127ae <lv_theme_default_init+0x11ce>
 801251a:	210e      	movs	r1, #14
 801251c:	68e8      	ldr	r0, [r5, #12]
 801251e:	f7ff f80b 	bl	8011538 <lv_disp_dpx.part.0>
 8012522:	4601      	mov	r1, r0
 8012524:	4638      	mov	r0, r7
 8012526:	f7ff f83e 	bl	80115a6 <lv_style_set_pad_all>
    lv_style_set_pad_column(&styles->list_btn, PAD_SMALL);
 801252a:	7833      	ldrb	r3, [r6, #0]
 801252c:	6824      	ldr	r4, [r4, #0]
 801252e:	2b01      	cmp	r3, #1
 8012530:	f504 74d8 	add.w	r4, r4, #432	; 0x1b0
 8012534:	f040 8141 	bne.w	80127ba <lv_theme_default_init+0x11da>
 8012538:	210e      	movs	r1, #14
 801253a:	68e8      	ldr	r0, [r5, #12]
 801253c:	f7fe fffc 	bl	8011538 <lv_disp_dpx.part.0>
 8012540:	4601      	mov	r1, r0
 8012542:	4620      	mov	r0, r4
    style_init_reset(&styles->list_item_grow);
 8012544:	4ca6      	ldr	r4, [pc, #664]	; (80127e0 <lv_theme_default_init+0x1200>)
    lv_style_set_pad_column(&styles->list_btn, PAD_SMALL);
 8012546:	f7fe ffd7 	bl	80114f8 <lv_style_set_pad_column>
    style_init_reset(&styles->list_item_grow);
 801254a:	6820      	ldr	r0, [r4, #0]
 801254c:	f500 70dc 	add.w	r0, r0, #440	; 0x1b8
 8012550:	f7fe ffe8 	bl	8011524 <style_init_reset>
    lv_style_set_transform_width(&styles->list_item_grow, PAD_DEF);
 8012554:	7833      	ldrb	r3, [r6, #0]
 8012556:	6827      	ldr	r7, [r4, #0]
 8012558:	2b01      	cmp	r3, #1
 801255a:	f507 77dc 	add.w	r7, r7, #440	; 0x1b8
 801255e:	f040 8132 	bne.w	80127c6 <lv_theme_default_init+0x11e6>
 8012562:	2118      	movs	r1, #24
 8012564:	68e8      	ldr	r0, [r5, #12]
 8012566:	f7fe ffe7 	bl	8011538 <lv_disp_dpx.part.0>
    lv_style_set_prop(style, LV_STYLE_TRANSFORM_WIDTH, v);
 801256a:	f640 010a 	movw	r1, #2058	; 0x80a
 801256e:	4602      	mov	r2, r0
 8012570:	4638      	mov	r0, r7
 8012572:	f006 f81e 	bl	80185b2 <lv_style_set_prop>
    style_init_reset(&styles->led);
 8012576:	6820      	ldr	r0, [r4, #0]
    lv_style_value_t v = {
 8012578:	2700      	movs	r7, #0
 801257a:	f500 70ec 	add.w	r0, r0, #472	; 0x1d8
 801257e:	f7fe ffd1 	bl	8011524 <style_init_reset>
    lv_style_set_bg_opa(&styles->led, LV_OPA_COVER);
 8012582:	6820      	ldr	r0, [r4, #0]
 8012584:	21ff      	movs	r1, #255	; 0xff
 8012586:	f500 70ec 	add.w	r0, r0, #472	; 0x1d8
 801258a:	f7fe ffba 	bl	8011502 <lv_style_set_bg_opa>
    lv_style_set_bg_color(&styles->led, lv_color_white());
 801258e:	6820      	ldr	r0, [r4, #0]
 8012590:	f500 73ec 	add.w	r3, r0, #472	; 0x1d8
 8012594:	f7fe f963 	bl	801085e <lv_color_white>
 8012598:	4601      	mov	r1, r0
 801259a:	4618      	mov	r0, r3
 801259c:	f7fe ffb5 	bl	801150a <lv_style_set_bg_color>
    lv_style_set_bg_grad_color(&styles->led, lv_palette_main(LV_PALETTE_GREY));
 80125a0:	6820      	ldr	r0, [r4, #0]
 80125a2:	f500 76ec 	add.w	r6, r0, #472	; 0x1d8
 80125a6:	2012      	movs	r0, #18
 80125a8:	f004 fe78 	bl	801729c <lv_palette_main>
    lv_style_set_prop(style, LV_STYLE_BG_GRAD_COLOR, v);
 80125ac:	2122      	movs	r1, #34	; 0x22
 80125ae:	b282      	uxth	r2, r0
 80125b0:	4630      	mov	r0, r6
    lv_style_value_t v = {
 80125b2:	f8ad 7010 	strh.w	r7, [sp, #16]
    lv_style_set_prop(style, LV_STYLE_BG_GRAD_COLOR, v);
 80125b6:	f005 fffc 	bl	80185b2 <lv_style_set_prop>
    lv_style_set_radius(&styles->led, LV_RADIUS_CIRCLE);
 80125ba:	6820      	ldr	r0, [r4, #0]
 80125bc:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80125c0:	f500 70ec 	add.w	r0, r0, #472	; 0x1d8
 80125c4:	f7fe ffaa 	bl	801151c <lv_style_set_radius>
    lv_style_set_shadow_width(&styles->led, lv_disp_dpx(theme.disp, 15));
 80125c8:	6820      	ldr	r0, [r4, #0]
 80125ca:	210f      	movs	r1, #15
 80125cc:	f500 76ec 	add.w	r6, r0, #472	; 0x1d8
 80125d0:	68e8      	ldr	r0, [r5, #12]
 80125d2:	f7fe ffb1 	bl	8011538 <lv_disp_dpx.part.0>
    lv_style_set_prop(style, LV_STYLE_SHADOW_WIDTH, v);
 80125d6:	f44f 6104 	mov.w	r1, #2112	; 0x840
 80125da:	4602      	mov	r2, r0
 80125dc:	4630      	mov	r0, r6
 80125de:	f005 ffe8 	bl	80185b2 <lv_style_set_prop>
    lv_style_set_shadow_color(&styles->led, lv_color_white());
 80125e2:	6820      	ldr	r0, [r4, #0]
 80125e4:	f500 73ec 	add.w	r3, r0, #472	; 0x1d8
 80125e8:	f7fe f939 	bl	801085e <lv_color_white>
    lv_style_set_prop(style, LV_STYLE_SHADOW_COLOR, v);
 80125ec:	2144      	movs	r1, #68	; 0x44
 80125ee:	b282      	uxth	r2, r0
 80125f0:	4618      	mov	r0, r3
    lv_style_value_t v = {
 80125f2:	f8ad 7010 	strh.w	r7, [sp, #16]
    lv_style_set_prop(style, LV_STYLE_SHADOW_COLOR, v);
 80125f6:	f005 ffdc 	bl	80185b2 <lv_style_set_prop>
    lv_style_set_shadow_spread(&styles->led, lv_disp_dpx(theme.disp, 5));
 80125fa:	6824      	ldr	r4, [r4, #0]
 80125fc:	2105      	movs	r1, #5
 80125fe:	68e8      	ldr	r0, [r5, #12]
 8012600:	f504 74ec 	add.w	r4, r4, #472	; 0x1d8
 8012604:	f7fe ff98 	bl	8011538 <lv_disp_dpx.part.0>
    lv_style_set_prop(style, LV_STYLE_SHADOW_SPREAD, v);
 8012608:	f640 0143 	movw	r1, #2115	; 0x843
 801260c:	4602      	mov	r2, r0
 801260e:	4620      	mov	r0, r4
 8012610:	f005 ffcf 	bl	80185b2 <lv_style_set_prop>
    inited = true;
 8012614:	4b73      	ldr	r3, [pc, #460]	; (80127e4 <lv_theme_default_init+0x1204>)
 8012616:	2201      	movs	r2, #1
 8012618:	701a      	strb	r2, [r3, #0]
    if(disp == NULL || lv_disp_get_theme(disp) == &theme) lv_obj_report_style_change(NULL);
 801261a:	f1b8 0f00 	cmp.w	r8, #0
 801261e:	f040 80d8 	bne.w	80127d2 <lv_theme_default_init+0x11f2>
 8012622:	2000      	movs	r0, #0
 8012624:	f7f4 fcea 	bl	8006ffc <lv_obj_report_style_change>
}
 8012628:	486f      	ldr	r0, [pc, #444]	; (80127e8 <lv_theme_default_init+0x1208>)
 801262a:	b007      	add	sp, #28
 801262c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if(LV_HOR_RES < 720) disp_size = DISP_MEDIUM;
 8012630:	f004 f93a 	bl	80168a8 <lv_disp_get_default>
 8012634:	f004 f93e 	bl	80168b4 <lv_disp_get_hor_res>
 8012638:	f5b0 7f34 	cmp.w	r0, #720	; 0x2d0
 801263c:	bfb4      	ite	lt
 801263e:	2302      	movlt	r3, #2
    else disp_size = DISP_LARGE;
 8012640:	2301      	movge	r3, #1
 8012642:	f7fe bfea 	b.w	801161a <lv_theme_default_init+0x3a>
    color_scr = theme.flags & MODE_DARK ? DARK_COLOR_SCR : LIGHT_COLOR_SCR;
 8012646:	2104      	movs	r1, #4
 8012648:	2012      	movs	r0, #18
 801264a:	f004 fe31 	bl	80172b0 <lv_palette_lighten>
    color_text = theme.flags & MODE_DARK ? DARK_COLOR_TEXT : LIGHT_COLOR_TEXT;
 801264e:	6a2b      	ldr	r3, [r5, #32]
    color_scr = theme.flags & MODE_DARK ? DARK_COLOR_SCR : LIGHT_COLOR_SCR;
 8012650:	f8aa 0000 	strh.w	r0, [sl]
    color_text = theme.flags & MODE_DARK ? DARK_COLOR_TEXT : LIGHT_COLOR_TEXT;
 8012654:	07d8      	lsls	r0, r3, #31
 8012656:	f53e affa 	bmi.w	801164e <lv_theme_default_init+0x6e>
 801265a:	2104      	movs	r1, #4
 801265c:	2012      	movs	r0, #18
 801265e:	f004 fe39 	bl	80172d4 <lv_palette_darken>
 8012662:	f7fe bff8 	b.w	8011656 <lv_theme_default_init+0x76>
    color_card = theme.flags & MODE_DARK ? DARK_COLOR_CARD : LIGHT_COLOR_CARD;
 8012666:	f7fe f8fa 	bl	801085e <lv_color_white>
 801266a:	4b60      	ldr	r3, [pc, #384]	; (80127ec <lv_theme_default_init+0x120c>)
 801266c:	8018      	strh	r0, [r3, #0]
    color_grey = theme.flags & MODE_DARK ? DARK_COLOR_GREY : LIGHT_COLOR_GREY;
 801266e:	6a2b      	ldr	r3, [r5, #32]
 8012670:	07d9      	lsls	r1, r3, #31
 8012672:	f53e affc 	bmi.w	801166e <lv_theme_default_init+0x8e>
 8012676:	2102      	movs	r1, #2
 8012678:	2012      	movs	r0, #18
 801267a:	f004 fe19 	bl	80172b0 <lv_palette_lighten>
 801267e:	f8a9 0000 	strh.w	r0, [r9]
 8012682:	f7fe bff8 	b.w	8011676 <lv_theme_default_init+0x96>
    lv_style_set_bg_color(&styles->scrollbar, (theme.flags & MODE_DARK) ? lv_palette_darken(LV_PALETTE_GREY, 2) : lv_palette_main(LV_PALETTE_GREY));
 8012686:	2012      	movs	r0, #18
 8012688:	f004 fe08 	bl	801729c <lv_palette_main>
 801268c:	f7ff b829 	b.w	80116e2 <lv_theme_default_init+0x102>
    lv_style_set_pad_row(&styles->scr, PAD_SMALL);
 8012690:	2b02      	cmp	r3, #2
 8012692:	68e8      	ldr	r0, [r5, #12]
 8012694:	bf0c      	ite	eq
 8012696:	210c      	moveq	r1, #12
 8012698:	210a      	movne	r1, #10
 801269a:	f7ff b87d 	b.w	8011798 <lv_theme_default_init+0x1b8>
    lv_style_set_pad_column(&styles->scr, PAD_SMALL);
 801269e:	2b02      	cmp	r3, #2
 80126a0:	68e8      	ldr	r0, [r5, #12]
 80126a2:	bf0c      	ite	eq
 80126a4:	210c      	moveq	r1, #12
 80126a6:	210a      	movne	r1, #10
 80126a8:	f7ff b884 	b.w	80117b4 <lv_theme_default_init+0x1d4>
    lv_style_set_pad_all(&styles->card, PAD_DEF);
 80126ac:	2b02      	cmp	r3, #2
 80126ae:	68e8      	ldr	r0, [r5, #12]
 80126b0:	bf0c      	ite	eq
 80126b2:	2114      	moveq	r1, #20
 80126b4:	2110      	movne	r1, #16
 80126b6:	f7ff b8c6 	b.w	8011846 <lv_theme_default_init+0x266>
    lv_style_set_pad_row(&styles->card, PAD_SMALL);
 80126ba:	2b02      	cmp	r3, #2
 80126bc:	68e8      	ldr	r0, [r5, #12]
 80126be:	bf0c      	ite	eq
 80126c0:	210c      	moveq	r1, #12
 80126c2:	210a      	movne	r1, #10
 80126c4:	f7ff b8ce 	b.w	8011864 <lv_theme_default_init+0x284>
    lv_style_set_pad_column(&styles->card, PAD_SMALL);
 80126c8:	2b02      	cmp	r3, #2
 80126ca:	68e8      	ldr	r0, [r5, #12]
 80126cc:	bf0c      	ite	eq
 80126ce:	210c      	moveq	r1, #12
 80126d0:	210a      	movne	r1, #10
 80126d2:	f7ff b8f3 	b.w	80118bc <lv_theme_default_init+0x2dc>
    lv_style_set_radius(&styles->btn, (disp_size == DISP_LARGE ? lv_disp_dpx(theme.disp, 16) : disp_size == DISP_MEDIUM ? lv_disp_dpx(theme.disp, 12) : lv_disp_dpx(theme.disp, 8)));
 80126d6:	2b02      	cmp	r3, #2
 80126d8:	68e8      	ldr	r0, [r5, #12]
 80126da:	bf0c      	ite	eq
 80126dc:	210c      	moveq	r1, #12
 80126de:	2108      	movne	r1, #8
 80126e0:	f7ff b96d 	b.w	80119be <lv_theme_default_init+0x3de>
    lv_style_set_pad_hor(&styles->btn, PAD_DEF);
 80126e4:	2b02      	cmp	r3, #2
 80126e6:	68e8      	ldr	r0, [r5, #12]
 80126e8:	bf0c      	ite	eq
 80126ea:	2114      	moveq	r1, #20
 80126ec:	2110      	movne	r1, #16
 80126ee:	f7ff b9af 	b.w	8011a50 <lv_theme_default_init+0x470>
    lv_style_set_pad_ver(&styles->btn, PAD_SMALL);
 80126f2:	2b02      	cmp	r3, #2
 80126f4:	68e8      	ldr	r0, [r5, #12]
 80126f6:	bf0c      	ite	eq
 80126f8:	210c      	moveq	r1, #12
 80126fa:	210a      	movne	r1, #10
 80126fc:	f7ff b9b7 	b.w	8011a6e <lv_theme_default_init+0x48e>
    lv_style_set_pad_all(&styles->pad_normal, PAD_DEF);
 8012700:	2b02      	cmp	r3, #2
 8012702:	68e8      	ldr	r0, [r5, #12]
 8012704:	bf0c      	ite	eq
 8012706:	2114      	moveq	r1, #20
 8012708:	2110      	movne	r1, #16
 801270a:	f7ff ba0d 	b.w	8011b28 <lv_theme_default_init+0x548>
    lv_style_set_pad_row(&styles->pad_normal, PAD_DEF);
 801270e:	2b02      	cmp	r3, #2
 8012710:	68e8      	ldr	r0, [r5, #12]
 8012712:	bf0c      	ite	eq
 8012714:	2114      	moveq	r1, #20
 8012716:	2110      	movne	r1, #16
 8012718:	f7ff ba15 	b.w	8011b46 <lv_theme_default_init+0x566>
    lv_style_set_pad_column(&styles->pad_normal, PAD_DEF);
 801271c:	2b02      	cmp	r3, #2
 801271e:	68e8      	ldr	r0, [r5, #12]
 8012720:	bf0c      	ite	eq
 8012722:	2114      	moveq	r1, #20
 8012724:	2110      	movne	r1, #16
 8012726:	f7ff ba1d 	b.w	8011b64 <lv_theme_default_init+0x584>
    lv_style_set_pad_all(&styles->pad_small, PAD_SMALL);
 801272a:	2b02      	cmp	r3, #2
 801272c:	68e8      	ldr	r0, [r5, #12]
 801272e:	bf0c      	ite	eq
 8012730:	210c      	moveq	r1, #12
 8012732:	210a      	movne	r1, #10
 8012734:	f7ff ba29 	b.w	8011b8a <lv_theme_default_init+0x5aa>
    lv_style_set_pad_gap(&styles->pad_small, PAD_SMALL);
 8012738:	2b02      	cmp	r3, #2
 801273a:	68e8      	ldr	r0, [r5, #12]
 801273c:	bf0c      	ite	eq
 801273e:	210c      	moveq	r1, #12
 8012740:	210a      	movne	r1, #10
 8012742:	f7ff ba31 	b.w	8011ba8 <lv_theme_default_init+0x5c8>
    lv_style_set_pad_all(&styles->pad_tiny, PAD_TINY);
 8012746:	2b02      	cmp	r3, #2
 8012748:	68e8      	ldr	r0, [r5, #12]
 801274a:	bf0c      	ite	eq
 801274c:	2106      	moveq	r1, #6
 801274e:	2102      	movne	r1, #2
 8012750:	f7ff ba8b 	b.w	8011c6a <lv_theme_default_init+0x68a>
    lv_style_set_pad_row(&styles->pad_tiny, PAD_TINY);
 8012754:	2b02      	cmp	r3, #2
 8012756:	68e8      	ldr	r0, [r5, #12]
 8012758:	bf0c      	ite	eq
 801275a:	2106      	moveq	r1, #6
 801275c:	2102      	movne	r1, #2
 801275e:	f7ff ba93 	b.w	8011c88 <lv_theme_default_init+0x6a8>
    lv_style_set_pad_column(&styles->pad_tiny, PAD_TINY);
 8012762:	2b02      	cmp	r3, #2
 8012764:	68e8      	ldr	r0, [r5, #12]
 8012766:	bf0c      	ite	eq
 8012768:	2106      	moveq	r1, #6
 801276a:	2102      	movne	r1, #2
 801276c:	f7ff ba9b 	b.w	8011ca6 <lv_theme_default_init+0x6c6>
    lv_style_set_text_color(&styles->ta_placeholder, (theme.flags & MODE_DARK) ? lv_palette_darken(LV_PALETTE_GREY, 2) : lv_palette_lighten(LV_PALETTE_GREY, 1));
 8012770:	2101      	movs	r1, #1
 8012772:	2012      	movs	r0, #18
 8012774:	f004 fd9c 	bl	80172b0 <lv_palette_lighten>
 8012778:	e5a1      	b.n	80122be <lv_theme_default_init+0xcde>
    lv_style_set_pad_all(&styles->calendar_bg, PAD_SMALL);
 801277a:	2b02      	cmp	r3, #2
 801277c:	68e8      	ldr	r0, [r5, #12]
 801277e:	bf0c      	ite	eq
 8012780:	210c      	moveq	r1, #12
 8012782:	210a      	movne	r1, #10
 8012784:	e5b0      	b.n	80122e8 <lv_theme_default_init+0xd08>
    lv_style_set_pad_gap(&styles->calendar_bg, PAD_SMALL / 2);
 8012786:	2b02      	cmp	r3, #2
 8012788:	68e8      	ldr	r0, [r5, #12]
 801278a:	bf0c      	ite	eq
 801278c:	210c      	moveq	r1, #12
 801278e:	210a      	movne	r1, #10
 8012790:	e5b9      	b.n	8012306 <lv_theme_default_init+0xd26>
    lv_style_set_radius(&styles->keyboard_btn_bg, disp_size == DISP_SMALL ? RADIUS_DEFAULT / 2 : RADIUS_DEFAULT);
 8012792:	2b01      	cmp	r3, #1
 8012794:	68e8      	ldr	r0, [r5, #12]
 8012796:	bf0c      	ite	eq
 8012798:	210c      	moveq	r1, #12
 801279a:	2108      	movne	r1, #8
 801279c:	f7fe fecc 	bl	8011538 <lv_disp_dpx.part.0>
 80127a0:	e635      	b.n	801240e <lv_theme_default_init+0xe2e>
    lv_style_set_pad_hor(&styles->list_bg, PAD_DEF);
 80127a2:	2b02      	cmp	r3, #2
 80127a4:	68e8      	ldr	r0, [r5, #12]
 80127a6:	bf0c      	ite	eq
 80127a8:	2114      	moveq	r1, #20
 80127aa:	2110      	movne	r1, #16
 80127ac:	e672      	b.n	8012494 <lv_theme_default_init+0xeb4>
    lv_style_set_pad_all(&styles->list_btn, PAD_SMALL);
 80127ae:	2b02      	cmp	r3, #2
 80127b0:	68e8      	ldr	r0, [r5, #12]
 80127b2:	bf0c      	ite	eq
 80127b4:	210c      	moveq	r1, #12
 80127b6:	210a      	movne	r1, #10
 80127b8:	e6b1      	b.n	801251e <lv_theme_default_init+0xf3e>
    lv_style_set_pad_column(&styles->list_btn, PAD_SMALL);
 80127ba:	2b02      	cmp	r3, #2
 80127bc:	68e8      	ldr	r0, [r5, #12]
 80127be:	bf0c      	ite	eq
 80127c0:	210c      	moveq	r1, #12
 80127c2:	210a      	movne	r1, #10
 80127c4:	e6ba      	b.n	801253c <lv_theme_default_init+0xf5c>
    lv_style_set_transform_width(&styles->list_item_grow, PAD_DEF);
 80127c6:	2b02      	cmp	r3, #2
 80127c8:	68e8      	ldr	r0, [r5, #12]
 80127ca:	bf0c      	ite	eq
 80127cc:	2114      	moveq	r1, #20
 80127ce:	2110      	movne	r1, #16
 80127d0:	e6c9      	b.n	8012566 <lv_theme_default_init+0xf86>
    if(disp == NULL || lv_disp_get_theme(disp) == &theme) lv_obj_report_style_change(NULL);
 80127d2:	4640      	mov	r0, r8
 80127d4:	f7ef fafa 	bl	8001dcc <lv_disp_get_theme>
 80127d8:	4285      	cmp	r5, r0
 80127da:	f47f af25 	bne.w	8012628 <lv_theme_default_init+0x1048>
 80127de:	e720      	b.n	8012622 <lv_theme_default_init+0x1042>
 80127e0:	20002ae8 	.word	0x20002ae8
 80127e4:	20002ae4 	.word	0x20002ae4
 80127e8:	20002aec 	.word	0x20002aec
 80127ec:	20002ac6 	.word	0x20002ac6

080127f0 <lv_theme_default_is_inited>:
}
 80127f0:	4b01      	ldr	r3, [pc, #4]	; (80127f8 <lv_theme_default_is_inited+0x8>)
 80127f2:	7818      	ldrb	r0, [r3, #0]
 80127f4:	4770      	bx	lr
 80127f6:	bf00      	nop
 80127f8:	20002ae4 	.word	0x20002ae4

080127fc <get_month_length>:
 * @return [28..31]
 */
static uint8_t get_month_length(int32_t year, int32_t month)
{
    month--;
    if(month < 0) {
 80127fc:	1e4b      	subs	r3, r1, #1
        year--;             /*Already in the previous year (won't be less then -12 to skip a whole year)*/
        month = 12 + month; /*`month` is negative, the result will be < 12*/
 80127fe:	bf44      	itt	mi
 8012800:	f101 030b 	addmi.w	r3, r1, #11
        year--;             /*Already in the previous year (won't be less then -12 to skip a whole year)*/
 8012804:	f100 30ff 	addmi.w	r0, r0, #4294967295
    }
    if(month >= 12) {
 8012808:	2b0b      	cmp	r3, #11
        year++;
        month -= 12;
 801280a:	bfc4      	itt	gt
 801280c:	3b0c      	subgt	r3, #12
        year++;
 801280e:	3001      	addgt	r0, #1
    }

    /*month == 1 is february*/
    return (month == 1) ? (28 + is_leap_year(year)) : 31 - month % 7 % 2;
 8012810:	2b01      	cmp	r3, #1
 8012812:	d116      	bne.n	8012842 <get_month_length+0x46>
 * @param year a year
 * @return 0: not leap year; 1: leap year
 */
static uint8_t is_leap_year(uint32_t year)
{
    return (year % 4) || ((year % 100 == 0) && (year % 400)) ? 0 : 1;
 8012814:	0782      	lsls	r2, r0, #30
 8012816:	d112      	bne.n	801283e <get_month_length+0x42>
 8012818:	2164      	movs	r1, #100	; 0x64
 801281a:	fbb0 f2f1 	udiv	r2, r0, r1
 801281e:	fb01 0212 	mls	r2, r1, r2, r0
 8012822:	b942      	cbnz	r2, 8012836 <get_month_length+0x3a>
 8012824:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8012828:	fbb0 f2f3 	udiv	r2, r0, r3
 801282c:	fb03 0312 	mls	r3, r3, r2, r0
 8012830:	fab3 f383 	clz	r3, r3
 8012834:	095b      	lsrs	r3, r3, #5
    return (month == 1) ? (28 + is_leap_year(year)) : 31 - month % 7 % 2;
 8012836:	f103 001c 	add.w	r0, r3, #28
 801283a:	b2c0      	uxtb	r0, r0
}
 801283c:	4770      	bx	lr
    return (year % 4) || ((year % 100 == 0) && (year % 400)) ? 0 : 1;
 801283e:	2300      	movs	r3, #0
 8012840:	e7f9      	b.n	8012836 <get_month_length+0x3a>
    return (month == 1) ? (28 + is_leap_year(year)) : 31 - month % 7 % 2;
 8012842:	2007      	movs	r0, #7
 8012844:	fb93 f0f0 	sdiv	r0, r3, r0
 8012848:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 801284c:	1a1b      	subs	r3, r3, r0
 801284e:	f003 0001 	and.w	r0, r3, #1
 8012852:	bf48      	it	mi
 8012854:	4240      	negmi	r0, r0
 8012856:	f1c0 001f 	rsb	r0, r0, #31
 801285a:	e7ee      	b.n	801283a <get_month_length+0x3e>

0801285c <get_day_of_week>:
 * @param day a day [1..32]
 * @return [0..6] which means [Sun..Sat] or [Mon..Sun] depending on LV_CALENDAR_WEEK_STARTS_MONDAY
 */
static uint8_t get_day_of_week(uint32_t year, uint32_t month, uint32_t day)
{
    uint32_t a = month < 3 ? 1 : 0;
 801285c:	2902      	cmp	r1, #2
 801285e:	bf94      	ite	ls
 8012860:	2301      	movls	r3, #1
 8012862:	2300      	movhi	r3, #0
    uint32_t b = year - a;
 8012864:	eba0 0003 	sub.w	r0, r0, r3

#if LV_CALENDAR_WEEK_STARTS_MONDAY
    uint32_t day_of_week = (day + (31 * (month - 2 + 12 * a) / 12) + b + (b / 4) - (b / 100) + (b / 400) - 1) % 7;
#else
    uint32_t day_of_week = (day + (31 * (month - 2 + 12 * a) / 12) + b + (b / 4) - (b / 100) + (b / 400)) % 7;
 8012868:	bf94      	ite	ls
 801286a:	230c      	movls	r3, #12
 801286c:	2300      	movhi	r3, #0
 801286e:	4402      	add	r2, r0
 8012870:	4419      	add	r1, r3
 8012872:	230c      	movs	r3, #12
 8012874:	eb02 0290 	add.w	r2, r2, r0, lsr #2
 8012878:	ebc1 1141 	rsb	r1, r1, r1, lsl #5
 801287c:	393e      	subs	r1, #62	; 0x3e
 801287e:	fbb1 f1f3 	udiv	r1, r1, r3
 8012882:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8012886:	fbb0 f3f3 	udiv	r3, r0, r3
 801288a:	441a      	add	r2, r3
 801288c:	2364      	movs	r3, #100	; 0x64
 801288e:	fbb0 f0f3 	udiv	r0, r0, r3
 8012892:	4411      	add	r1, r2
 8012894:	2307      	movs	r3, #7
 8012896:	1a08      	subs	r0, r1, r0
 8012898:	fbb0 f3f3 	udiv	r3, r0, r3
 801289c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80128a0:	1ac0      	subs	r0, r0, r3
#endif

    return day_of_week;
}
 80128a2:	b2c0      	uxtb	r0, r0
 80128a4:	4770      	bx	lr

080128a6 <draw_part_begin_event_cb>:
{
 80128a6:	b570      	push	{r4, r5, r6, lr}
 80128a8:	4604      	mov	r4, r0
    lv_obj_t * obj = lv_event_get_target(e);
 80128aa:	f7ef fb2d 	bl	8001f08 <lv_event_get_target>
 80128ae:	4605      	mov	r5, r0
    lv_obj_draw_part_dsc_t * dsc = lv_event_get_param(e);
 80128b0:	4620      	mov	r0, r4
 80128b2:	f7ef fb2d 	bl	8001f10 <lv_event_get_param>
    if(dsc->part == LV_PART_ITEMS) {
 80128b6:	6b43      	ldr	r3, [r0, #52]	; 0x34
    lv_obj_draw_part_dsc_t * dsc = lv_event_get_param(e);
 80128b8:	4604      	mov	r4, r0
    if(dsc->part == LV_PART_ITEMS) {
 80128ba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80128be:	d12f      	bne.n	8012920 <draw_part_begin_event_cb+0x7a>
        if(dsc->id < 7) {
 80128c0:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80128c2:	2906      	cmp	r1, #6
 80128c4:	d82d      	bhi.n	8012922 <draw_part_begin_event_cb+0x7c>
            dsc->rect_dsc->bg_opa = LV_OPA_TRANSP;
 80128c6:	6883      	ldr	r3, [r0, #8]
 80128c8:	2200      	movs	r2, #0
 80128ca:	729a      	strb	r2, [r3, #10]
            dsc->rect_dsc->border_opa = LV_OPA_TRANSP;
 80128cc:	779a      	strb	r2, [r3, #30]
        if(lv_btnmatrix_has_btn_ctrl(obj, dsc->id, LV_CALENDAR_CTRL_HIGHLIGHT)) {
 80128ce:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80128d2:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 80128d4:	4628      	mov	r0, r5
 80128d6:	f008 fe55 	bl	801b584 <lv_btnmatrix_has_btn_ctrl>
 80128da:	b178      	cbz	r0, 80128fc <draw_part_begin_event_cb+0x56>
            dsc->rect_dsc->bg_opa = LV_OPA_40;
 80128dc:	2366      	movs	r3, #102	; 0x66
 80128de:	68a6      	ldr	r6, [r4, #8]
            dsc->rect_dsc->bg_color = lv_theme_get_color_primary(obj);
 80128e0:	4628      	mov	r0, r5
            dsc->rect_dsc->bg_opa = LV_OPA_40;
 80128e2:	72b3      	strb	r3, [r6, #10]
            dsc->rect_dsc->bg_color = lv_theme_get_color_primary(obj);
 80128e4:	f7f5 ff4a 	bl	800877c <lv_theme_get_color_primary>
 80128e8:	80b0      	strh	r0, [r6, #4]
            if(lv_btnmatrix_get_selected_btn(obj) == dsc->id) {
 80128ea:	4628      	mov	r0, r5
 80128ec:	f008 fe1a 	bl	801b524 <lv_btnmatrix_get_selected_btn>
 80128f0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80128f2:	4298      	cmp	r0, r3
                dsc->rect_dsc->bg_opa = LV_OPA_70;
 80128f4:	bf02      	ittt	eq
 80128f6:	68a3      	ldreq	r3, [r4, #8]
 80128f8:	22b2      	moveq	r2, #178	; 0xb2
 80128fa:	729a      	strbeq	r2, [r3, #10]
        if(lv_btnmatrix_has_btn_ctrl(obj, dsc->id, LV_CALENDAR_CTRL_TODAY)) {
 80128fc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8012900:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 8012902:	4628      	mov	r0, r5
 8012904:	f008 fe3e 	bl	801b584 <lv_btnmatrix_has_btn_ctrl>
 8012908:	b150      	cbz	r0, 8012920 <draw_part_begin_event_cb+0x7a>
            dsc->rect_dsc->border_opa = LV_OPA_COVER;
 801290a:	68a6      	ldr	r6, [r4, #8]
 801290c:	23ff      	movs	r3, #255	; 0xff
            dsc->rect_dsc->border_color = lv_theme_get_color_primary(obj);
 801290e:	4628      	mov	r0, r5
            dsc->rect_dsc->border_opa = LV_OPA_COVER;
 8012910:	77b3      	strb	r3, [r6, #30]
            dsc->rect_dsc->border_color = lv_theme_get_color_primary(obj);
 8012912:	f7f5 ff33 	bl	800877c <lv_theme_get_color_primary>
            dsc->rect_dsc->border_width += 1;
 8012916:	68a2      	ldr	r2, [r4, #8]
            dsc->rect_dsc->border_color = lv_theme_get_color_primary(obj);
 8012918:	8370      	strh	r0, [r6, #26]
            dsc->rect_dsc->border_width += 1;
 801291a:	8b93      	ldrh	r3, [r2, #28]
 801291c:	3301      	adds	r3, #1
 801291e:	8393      	strh	r3, [r2, #28]
}
 8012920:	bd70      	pop	{r4, r5, r6, pc}
        else if(lv_btnmatrix_has_btn_ctrl(obj, dsc->id, LV_BTNMATRIX_CTRL_DISABLED)) {
 8012922:	2220      	movs	r2, #32
 8012924:	b289      	uxth	r1, r1
 8012926:	4628      	mov	r0, r5
 8012928:	f008 fe2c 	bl	801b584 <lv_btnmatrix_has_btn_ctrl>
 801292c:	2800      	cmp	r0, #0
 801292e:	d0ce      	beq.n	80128ce <draw_part_begin_event_cb+0x28>
            dsc->rect_dsc->bg_opa = LV_OPA_TRANSP;
 8012930:	68a3      	ldr	r3, [r4, #8]
 8012932:	2200      	movs	r2, #0
            dsc->label_dsc->color = lv_palette_main(LV_PALETTE_GREY);
 8012934:	2012      	movs	r0, #18
            dsc->rect_dsc->bg_opa = LV_OPA_TRANSP;
 8012936:	729a      	strb	r2, [r3, #10]
            dsc->rect_dsc->border_opa = LV_OPA_TRANSP;
 8012938:	779a      	strb	r2, [r3, #30]
            dsc->label_dsc->color = lv_palette_main(LV_PALETTE_GREY);
 801293a:	68e6      	ldr	r6, [r4, #12]
 801293c:	f004 fcae 	bl	801729c <lv_palette_main>
 8012940:	81b0      	strh	r0, [r6, #12]
 8012942:	e7c4      	b.n	80128ce <draw_part_begin_event_cb+0x28>

08012944 <highlight_update>:

static void highlight_update(lv_obj_t * obj)
{
 8012944:	b538      	push	{r3, r4, r5, lr}
 8012946:	4604      	mov	r4, r0
    lv_calendar_t * calendar = (lv_calendar_t *)obj;
    uint16_t i;

    /*Clear all kind of selection*/
    lv_btnmatrix_clear_btn_ctrl_all(obj, LV_CALENDAR_CTRL_TODAY | LV_CALENDAR_CTRL_HIGHLIGHT);
 8012948:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 801294c:	f008 fdaf 	bl	801b4ae <lv_btnmatrix_clear_btn_ctrl_all>

    if(calendar->highlighted_dates) {
 8012950:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012952:	2b00      	cmp	r3, #0
 8012954:	d138      	bne.n	80129c8 <highlight_update+0x84>
                lv_btnmatrix_set_btn_ctrl(obj, calendar->highlighted_dates[i].day + 7, LV_CALENDAR_CTRL_HIGHLIGHT);
            }
        }
    }

    if(calendar->showed_date.year == calendar->today.year && calendar->showed_date.month == calendar->today.month) {
 8012956:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8012958:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 801295c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801295e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8012962:	429a      	cmp	r2, r3
 8012964:	d132      	bne.n	80129cc <highlight_update+0x88>
        uint8_t day_first = get_day_of_week(calendar->today.year, calendar->today.month, calendar->today.day - 1);
 8012966:	f994 503b 	ldrsb.w	r5, [r4, #59]	; 0x3b
 801296a:	f994 103a 	ldrsb.w	r1, [r4, #58]	; 0x3a
 801296e:	1e6a      	subs	r2, r5, #1
 8012970:	8f20      	ldrh	r0, [r4, #56]	; 0x38
 8012972:	f7ff ff73 	bl	801285c <get_day_of_week>
        lv_btnmatrix_set_btn_ctrl(obj, calendar->today.day + day_first + 7, LV_CALENDAR_CTRL_TODAY);
 8012976:	4428      	add	r0, r5
 8012978:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 801297c:	1dc1      	adds	r1, r0, #7
 801297e:	4620      	mov	r0, r4
 8012980:	b289      	uxth	r1, r1
    }
}
 8012982:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        lv_btnmatrix_set_btn_ctrl(obj, calendar->today.day + day_first + 7, LV_CALENDAR_CTRL_TODAY);
 8012986:	f008 bda1 	b.w	801b4cc <lv_btnmatrix_set_btn_ctrl>
            if(calendar->highlighted_dates[i].year == calendar->today.year && calendar->highlighted_dates[i].month == calendar->showed_date.month) {
 801298a:	b2ab      	uxth	r3, r5
 801298c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801298e:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 8012992:	f831 1023 	ldrh.w	r1, [r1, r3, lsl #2]
 8012996:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8012998:	4299      	cmp	r1, r3
 801299a:	d10e      	bne.n	80129ba <highlight_update+0x76>
 801299c:	f992 1002 	ldrsb.w	r1, [r2, #2]
 80129a0:	f994 303e 	ldrsb.w	r3, [r4, #62]	; 0x3e
 80129a4:	4299      	cmp	r1, r3
 80129a6:	d108      	bne.n	80129ba <highlight_update+0x76>
                lv_btnmatrix_set_btn_ctrl(obj, calendar->highlighted_dates[i].day + 7, LV_CALENDAR_CTRL_HIGHLIGHT);
 80129a8:	f992 1003 	ldrsb.w	r1, [r2, #3]
 80129ac:	4620      	mov	r0, r4
 80129ae:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80129b2:	3107      	adds	r1, #7
 80129b4:	b289      	uxth	r1, r1
 80129b6:	f008 fd89 	bl	801b4cc <lv_btnmatrix_set_btn_ctrl>
        for(i = 0; i < calendar->highlighted_dates_num; i++) {
 80129ba:	3501      	adds	r5, #1
 80129bc:	f8b4 2044 	ldrh.w	r2, [r4, #68]	; 0x44
 80129c0:	b2ab      	uxth	r3, r5
 80129c2:	429a      	cmp	r2, r3
 80129c4:	d8e1      	bhi.n	801298a <highlight_update+0x46>
 80129c6:	e7c6      	b.n	8012956 <highlight_update+0x12>
 80129c8:	2500      	movs	r5, #0
 80129ca:	e7f7      	b.n	80129bc <highlight_update+0x78>
}
 80129cc:	bd38      	pop	{r3, r4, r5, pc}
	...

080129d0 <lv_calendar_set_showed_date>:
{
 80129d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    calendar->showed_date.month  = month;
 80129d4:	fa4f f982 	sxtb.w	r9, r2
    calendar->showed_date.day    = 1;
 80129d8:	2301      	movs	r3, #1
    lv_btnmatrix_clear_btn_ctrl_all(obj, LV_BTNMATRIX_CTRL_DISABLED);
 80129da:	2400      	movs	r4, #0
    calendar->showed_date.year   = year;
 80129dc:	8781      	strh	r1, [r0, #60]	; 0x3c
{
 80129de:	460f      	mov	r7, r1
    calendar->showed_date.month  = month;
 80129e0:	f880 903e 	strb.w	r9, [r0, #62]	; 0x3e
    lv_btnmatrix_clear_btn_ctrl_all(obj, LV_BTNMATRIX_CTRL_DISABLED);
 80129e4:	2120      	movs	r1, #32
    calendar->showed_date.day    = 1;
 80129e6:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
{
 80129ea:	4605      	mov	r5, r0
    lv_btnmatrix_clear_btn_ctrl_all(obj, LV_BTNMATRIX_CTRL_DISABLED);
 80129ec:	f008 fd5f 	bl	801b4ae <lv_btnmatrix_clear_btn_ctrl_all>
        lv_btnmatrix_set_btn_ctrl(obj, i, LV_BTNMATRIX_CTRL_DISABLED);
 80129f0:	b2a1      	uxth	r1, r4
 80129f2:	3401      	adds	r4, #1
 80129f4:	2220      	movs	r2, #32
 80129f6:	4628      	mov	r0, r5
 80129f8:	f008 fd68 	bl	801b4cc <lv_btnmatrix_set_btn_ctrl>
    for(i = 0; i < 7; i++) {
 80129fc:	2c07      	cmp	r4, #7
 80129fe:	d1f7      	bne.n	80129f0 <lv_calendar_set_showed_date+0x20>
    uint8_t act_mo_len = get_month_length(d.year, d.month);
 8012a00:	b2bf      	uxth	r7, r7
 8012a02:	4649      	mov	r1, r9
    for(i = day_first, c = 1; i < act_mo_len + day_first; i++, c++) {
 8012a04:	f04f 0a00 	mov.w	sl, #0
        lv_snprintf(calendar->nums[i], sizeof(calendar->nums[0]), "%d", c);
 8012a08:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 8012ad8 <lv_calendar_set_showed_date+0x108>
    uint8_t act_mo_len = get_month_length(d.year, d.month);
 8012a0c:	4638      	mov	r0, r7
 8012a0e:	f7ff fef5 	bl	80127fc <get_month_length>
 8012a12:	4604      	mov	r4, r0
    uint8_t day_first = get_day_of_week(d.year, d.month, 1);
 8012a14:	2201      	movs	r2, #1
 8012a16:	4649      	mov	r1, r9
 8012a18:	4638      	mov	r0, r7
 8012a1a:	f7ff ff1f 	bl	801285c <get_day_of_week>
 8012a1e:	4680      	mov	r8, r0
    for(i = day_first, c = 1; i < act_mo_len + day_first; i++, c++) {
 8012a20:	4404      	add	r4, r0
 8012a22:	fa5f f68a 	uxtb.w	r6, sl
 8012a26:	f10a 0a01 	add.w	sl, sl, #1
 8012a2a:	1c73      	adds	r3, r6, #1
 8012a2c:	4446      	add	r6, r8
 8012a2e:	b2f6      	uxtb	r6, r6
 8012a30:	b2db      	uxtb	r3, r3
 8012a32:	42a6      	cmp	r6, r4
 8012a34:	db27      	blt.n	8012a86 <lv_calendar_set_showed_date+0xb6>
    for(i = 0, c = prev_mo_len - day_first + 1; i < day_first; i++, c++) {
 8012a36:	f1c8 0601 	rsb	r6, r8, #1
    uint8_t prev_mo_len = get_month_length(d.year, d.month - 1);
 8012a3a:	f109 31ff 	add.w	r1, r9, #4294967295
 8012a3e:	4638      	mov	r0, r7
 8012a40:	f505 7994 	add.w	r9, r5, #296	; 0x128
 8012a44:	f7ff feda 	bl	80127fc <get_month_length>
    for(i = 0, c = prev_mo_len - day_first + 1; i < day_first; i++, c++) {
 8012a48:	4430      	add	r0, r6
 8012a4a:	2700      	movs	r7, #0
        lv_snprintf(calendar->nums[i], sizeof(calendar->nums[0]), "%d", c);
 8012a4c:	f8df a088 	ldr.w	sl, [pc, #136]	; 8012ad8 <lv_calendar_set_showed_date+0x108>
    for(i = 0, c = prev_mo_len - day_first + 1; i < day_first; i++, c++) {
 8012a50:	b2c6      	uxtb	r6, r0
 8012a52:	b2fa      	uxtb	r2, r7
 8012a54:	fa56 f387 	uxtab	r3, r6, r7
 8012a58:	4590      	cmp	r8, r2
 8012a5a:	b2db      	uxtb	r3, r3
 8012a5c:	d81c      	bhi.n	8012a98 <lv_calendar_set_showed_date+0xc8>
    for(i = day_first + act_mo_len, c = 1; i < 6 * 7; i++, c++) {
 8012a5e:	b2e0      	uxtb	r0, r4
 8012a60:	2600      	movs	r6, #0
 8012a62:	b2e4      	uxtb	r4, r4
        lv_snprintf(calendar->nums[i], sizeof(calendar->nums[0]), "%d", c);
 8012a64:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8012ad8 <lv_calendar_set_showed_date+0x108>
 8012a68:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    for(i = day_first + act_mo_len, c = 1; i < 6 * 7; i++, c++) {
 8012a6c:	b2e3      	uxtb	r3, r4
 8012a6e:	3601      	adds	r6, #1
 8012a70:	1d07      	adds	r7, r0, #4
 8012a72:	2b29      	cmp	r3, #41	; 0x29
 8012a74:	d91f      	bls.n	8012ab6 <lv_calendar_set_showed_date+0xe6>
    highlight_update(obj);
 8012a76:	4628      	mov	r0, r5
 8012a78:	f7ff ff64 	bl	8012944 <highlight_update>
    lv_obj_invalidate(obj);
 8012a7c:	4628      	mov	r0, r5
}
 8012a7e:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_obj_invalidate(obj);
 8012a82:	f7f2 bb49 	b.w	8005118 <lv_obj_invalidate>
        lv_snprintf(calendar->nums[i], sizeof(calendar->nums[0]), "%d", c);
 8012a86:	f106 004a 	add.w	r0, r6, #74	; 0x4a
 8012a8a:	465a      	mov	r2, fp
 8012a8c:	2104      	movs	r1, #4
 8012a8e:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8012a92:	f005 fc59 	bl	8018348 <lv_snprintf>
    for(i = day_first, c = 1; i < act_mo_len + day_first; i++, c++) {
 8012a96:	e7c4      	b.n	8012a22 <lv_calendar_set_showed_date+0x52>
        lv_snprintf(calendar->nums[i], sizeof(calendar->nums[0]), "%d", c);
 8012a98:	4652      	mov	r2, sl
 8012a9a:	2104      	movs	r1, #4
 8012a9c:	4648      	mov	r0, r9
 8012a9e:	f109 0904 	add.w	r9, r9, #4
 8012aa2:	f005 fc51 	bl	8018348 <lv_snprintf>
        lv_btnmatrix_set_btn_ctrl(obj, i + 7, LV_BTNMATRIX_CTRL_DISABLED);
 8012aa6:	1df9      	adds	r1, r7, #7
 8012aa8:	2220      	movs	r2, #32
 8012aaa:	4628      	mov	r0, r5
 8012aac:	b289      	uxth	r1, r1
 8012aae:	3701      	adds	r7, #1
 8012ab0:	f008 fd0c 	bl	801b4cc <lv_btnmatrix_set_btn_ctrl>
    for(i = 0, c = prev_mo_len - day_first + 1; i < day_first; i++, c++) {
 8012ab4:	e7cd      	b.n	8012a52 <lv_calendar_set_showed_date+0x82>
        lv_snprintf(calendar->nums[i], sizeof(calendar->nums[0]), "%d", c);
 8012ab6:	4633      	mov	r3, r6
 8012ab8:	4642      	mov	r2, r8
 8012aba:	2104      	movs	r1, #4
 8012abc:	f500 7094 	add.w	r0, r0, #296	; 0x128
 8012ac0:	f005 fc42 	bl	8018348 <lv_snprintf>
        lv_btnmatrix_set_btn_ctrl(obj, i + 7, LV_BTNMATRIX_CTRL_DISABLED);
 8012ac4:	1de1      	adds	r1, r4, #7
 8012ac6:	3401      	adds	r4, #1
 8012ac8:	4628      	mov	r0, r5
 8012aca:	2220      	movs	r2, #32
 8012acc:	b289      	uxth	r1, r1
 8012ace:	f008 fcfd 	bl	801b4cc <lv_btnmatrix_set_btn_ctrl>
 8012ad2:	4638      	mov	r0, r7
 8012ad4:	b2a4      	uxth	r4, r4
 8012ad6:	e7c9      	b.n	8012a6c <lv_calendar_set_showed_date+0x9c>
 8012ad8:	08025128 	.word	0x08025128

08012adc <lv_calendar_constructor>:
{
 8012adc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    calendar->today.year  = 2020;
 8012ae0:	4b28      	ldr	r3, [pc, #160]	; (8012b84 <lv_calendar_constructor+0xa8>)
    calendar->highlighted_dates      = NULL;
 8012ae2:	2500      	movs	r5, #0
{
 8012ae4:	460c      	mov	r4, r1
            calendar->map[i] = day_names_def[i];
 8012ae6:	4e28      	ldr	r6, [pc, #160]	; (8012b88 <lv_calendar_constructor+0xac>)
    calendar->highlighted_dates      = NULL;
 8012ae8:	640d      	str	r5, [r1, #64]	; 0x40
            calendar->nums[j][0] = 'x';
 8012aea:	2778      	movs	r7, #120	; 0x78
    lv_memset_00(calendar->nums, sizeof(calendar->nums));
 8012aec:	f504 7094 	add.w	r0, r4, #296	; 0x128
    calendar->highlighted_dates_num  = 0;
 8012af0:	f8a1 5044 	strh.w	r5, [r1, #68]	; 0x44
    calendar->showed_date.year  = 2020;
 8012af4:	e9c1 330e 	strd	r3, r3, [r1, #56]	; 0x38
    lv_memset_00(calendar->nums, sizeof(calendar->nums));
 8012af8:	21a8      	movs	r1, #168	; 0xa8
 8012afa:	f005 f81b 	bl	8017b34 <lv_memset_00>
    for(i = 0; i < 8 * 7; i++) {
 8012afe:	f104 0248 	add.w	r2, r4, #72	; 0x48
    lv_memset_00(calendar->nums, sizeof(calendar->nums));
 8012b02:	462b      	mov	r3, r5
    uint8_t j = 0;
 8012b04:	4628      	mov	r0, r5
 8012b06:	4611      	mov	r1, r2
            calendar->map[i] = "\n";
 8012b08:	f8df c088 	ldr.w	ip, [pc, #136]	; 8012b94 <lv_calendar_constructor+0xb8>
        if(i != 0 && (i + 1) % 8 == 0) {
 8012b0c:	fa5f fe83 	uxtb.w	lr, r3
 8012b10:	1c5d      	adds	r5, r3, #1
 8012b12:	b343      	cbz	r3, 8012b66 <lv_calendar_constructor+0x8a>
 8012b14:	f015 0f07 	tst.w	r5, #7
 8012b18:	d122      	bne.n	8012b60 <lv_calendar_constructor+0x84>
            calendar->map[i] = "\n";
 8012b1a:	f8c2 c000 	str.w	ip, [r2]
    for(i = 0; i < 8 * 7; i++) {
 8012b1e:	2d38      	cmp	r5, #56	; 0x38
 8012b20:	462b      	mov	r3, r5
 8012b22:	f102 0204 	add.w	r2, r2, #4
 8012b26:	d1f1      	bne.n	8012b0c <lv_calendar_constructor+0x30>
    calendar->map[8 * 7 - 1] = "";
 8012b28:	4b18      	ldr	r3, [pc, #96]	; (8012b8c <lv_calendar_constructor+0xb0>)
    lv_btnmatrix_set_map(obj, calendar->map);
 8012b2a:	4620      	mov	r0, r4
    calendar->map[8 * 7 - 1] = "";
 8012b2c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    lv_btnmatrix_set_map(obj, calendar->map);
 8012b30:	f008 fc9c 	bl	801b46c <lv_btnmatrix_set_map>
    lv_btnmatrix_set_btn_ctrl_all(obj, LV_BTNMATRIX_CTRL_CLICK_TRIG | LV_BTNMATRIX_CTRL_NO_REPEAT);
 8012b34:	4620      	mov	r0, r4
 8012b36:	f44f 7188 	mov.w	r1, #272	; 0x110
 8012b3a:	f008 fce4 	bl	801b506 <lv_btnmatrix_set_btn_ctrl_all>
    lv_calendar_set_showed_date(obj, calendar->showed_date.year, calendar->showed_date.month);
 8012b3e:	f994 203e 	ldrsb.w	r2, [r4, #62]	; 0x3e
 8012b42:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
 8012b44:	4620      	mov	r0, r4
 8012b46:	f7ff ff43 	bl	80129d0 <lv_calendar_set_showed_date>
    highlight_update(obj);
 8012b4a:	4620      	mov	r0, r4
 8012b4c:	f7ff fefa 	bl	8012944 <highlight_update>
    lv_obj_add_event_cb(obj, draw_part_begin_event_cb, LV_EVENT_DRAW_PART_BEGIN, NULL);
 8012b50:	4620      	mov	r0, r4
 8012b52:	2300      	movs	r3, #0
 8012b54:	221a      	movs	r2, #26
 8012b56:	490e      	ldr	r1, [pc, #56]	; (8012b90 <lv_calendar_constructor+0xb4>)
}
 8012b58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    lv_obj_add_event_cb(obj, draw_part_begin_event_cb, LV_EVENT_DRAW_PART_BEGIN, NULL);
 8012b5c:	f7ef b9ec 	b.w	8001f38 <lv_obj_add_event_cb>
        } else if(i < 8){
 8012b60:	f1be 0f07 	cmp.w	lr, #7
 8012b64:	d803      	bhi.n	8012b6e <lv_calendar_constructor+0x92>
            calendar->map[i] = day_names_def[i];
 8012b66:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8012b6a:	6013      	str	r3, [r2, #0]
 8012b6c:	e7d7      	b.n	8012b1e <lv_calendar_constructor+0x42>
            calendar->nums[j][0] = 'x';
 8012b6e:	f100 034a 	add.w	r3, r0, #74	; 0x4a
            j++;
 8012b72:	3001      	adds	r0, #1
            calendar->nums[j][0] = 'x';
 8012b74:	f804 7023 	strb.w	r7, [r4, r3, lsl #2]
            calendar->map[i] = calendar->nums[j];
 8012b78:	eb04 0383 	add.w	r3, r4, r3, lsl #2
            j++;
 8012b7c:	b2c0      	uxtb	r0, r0
            calendar->map[i] = calendar->nums[j];
 8012b7e:	6013      	str	r3, [r2, #0]
            j++;
 8012b80:	e7cd      	b.n	8012b1e <lv_calendar_constructor+0x42>
 8012b82:	bf00      	nop
 8012b84:	010107e4 	.word	0x010107e4
 8012b88:	08025140 	.word	0x08025140
 8012b8c:	0802964b 	.word	0x0802964b
 8012b90:	080128a7 	.word	0x080128a7
 8012b94:	0802964a 	.word	0x0802964a

08012b98 <lv_obj_get_style_pad_left>:
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_pad_left(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8012b98:	f241 0212 	movw	r2, #4114	; 0x1012
{
 8012b9c:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8012b9e:	f7f4 fbe3 	bl	8007368 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
}
 8012ba2:	b200      	sxth	r0, r0
 8012ba4:	bd08      	pop	{r3, pc}

08012ba6 <lv_obj_get_style_width>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8012ba6:	f241 0201 	movw	r2, #4097	; 0x1001
{
 8012baa:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8012bac:	f7f4 fbdc 	bl	8007368 <lv_obj_get_style_prop>
}
 8012bb0:	b200      	sxth	r0, r0
 8012bb2:	bd08      	pop	{r3, pc}

08012bb4 <lv_obj_get_style_pad_column>:
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_pad_column(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 8012bb4:	f241 0215 	movw	r2, #4117	; 0x1015
{
 8012bb8:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 8012bba:	f7f4 fbd5 	bl	8007368 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
}
 8012bbe:	b200      	sxth	r0, r0
 8012bc0:	bd08      	pop	{r3, pc}

08012bc2 <lv_obj_get_style_pad_top>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8012bc2:	f241 0210 	movw	r2, #4112	; 0x1010
{
 8012bc6:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8012bc8:	f7f4 fbce 	bl	8007368 <lv_obj_get_style_prop>
}
 8012bcc:	b200      	sxth	r0, r0
 8012bce:	bd08      	pop	{r3, pc}

08012bd0 <lv_chart_destructor>:

    LV_TRACE_OBJ_CREATE("finished");
}

static void lv_chart_destructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 8012bd0:	b570      	push	{r4, r5, r6, lr}
 8012bd2:	460d      	mov	r5, r1
 8012bd4:	f101 0624 	add.w	r6, r1, #36	; 0x24
    LV_UNUSED(class_p);
    LV_TRACE_OBJ_CREATE("begin");

    lv_chart_t * chart = (lv_chart_t *)obj;
    lv_chart_series_t * ser;
    while(chart->series_ll.head) {
 8012bd8:	6aab      	ldr	r3, [r5, #40]	; 0x28
        ser = _lv_ll_get_head(&chart->series_ll);
 8012bda:	4630      	mov	r0, r6
    while(chart->series_ll.head) {
 8012bdc:	b91b      	cbnz	r3, 8012be6 <lv_chart_destructor+0x16>
        lv_mem_free(ser);
    }
    _lv_ll_clear(&chart->series_ll);

    LV_TRACE_OBJ_CREATE("finished");
}
 8012bde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    _lv_ll_clear(&chart->series_ll);
 8012be2:	f004 bc92 	b.w	801750a <_lv_ll_clear>
        ser = _lv_ll_get_head(&chart->series_ll);
 8012be6:	f004 fca2 	bl	801752e <_lv_ll_get_head>
        if(!ser->y_ext_buf_assigned) lv_mem_free(ser->y_points);
 8012bea:	7b03      	ldrb	r3, [r0, #12]
        ser = _lv_ll_get_head(&chart->series_ll);
 8012bec:	4604      	mov	r4, r0
        if(!ser->y_ext_buf_assigned) lv_mem_free(ser->y_points);
 8012bee:	075b      	lsls	r3, r3, #29
 8012bf0:	d402      	bmi.n	8012bf8 <lv_chart_destructor+0x28>
 8012bf2:	6840      	ldr	r0, [r0, #4]
 8012bf4:	f004 fd9e 	bl	8017734 <lv_mem_free>
        _lv_ll_remove(&chart->series_ll, ser);
 8012bf8:	4630      	mov	r0, r6
 8012bfa:	4621      	mov	r1, r4
 8012bfc:	f004 fc5c 	bl	80174b8 <_lv_ll_remove>
        lv_mem_free(ser);
 8012c00:	4620      	mov	r0, r4
 8012c02:	f004 fd97 	bl	8017734 <lv_mem_free>
 8012c06:	e7e7      	b.n	8012bd8 <lv_chart_destructor+0x8>

08012c08 <lv_chart_constructor>:
{
 8012c08:	b510      	push	{r4, lr}
 8012c0a:	460c      	mov	r4, r1
    _lv_ll_init(&chart->series_ll, sizeof(lv_chart_series_t));
 8012c0c:	2110      	movs	r1, #16
 8012c0e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8012c12:	f004 fc12 	bl	801743a <_lv_ll_init>
    _lv_ll_init(&chart->cursor_ll, sizeof(lv_chart_cursor_t));
 8012c16:	2110      	movs	r1, #16
 8012c18:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8012c1c:	f004 fc0d 	bl	801743a <_lv_ll_init>
    chart->ymax[0] = 100;
 8012c20:	2200      	movs	r2, #0
 8012c22:	f04f 1364 	mov.w	r3, #6553700	; 0x640064
 8012c26:	e9c4 231b 	strd	r2, r3, [r4, #108]	; 0x6c
    chart->xmax[0] = 100;
 8012c2a:	e9c4 231d 	strd	r2, r3, [r4, #116]	; 0x74
    chart->vdiv_cnt    = LV_CHART_VDIV_DEF;
 8012c2e:	4b08      	ldr	r3, [pc, #32]	; (8012c50 <lv_chart_constructor+0x48>)
 8012c30:	4a08      	ldr	r2, [pc, #32]	; (8012c54 <lv_chart_constructor+0x4c>)
 8012c32:	e9c4 231f 	strd	r2, r3, [r4, #124]	; 0x7c
    chart->zoom_x      = LV_IMG_ZOOM_NONE;
 8012c36:	f04f 2301 	mov.w	r3, #16777472	; 0x1000100
 8012c3a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    chart->type        = LV_CHART_TYPE_LINE;
 8012c3e:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
 8012c42:	f023 030f 	bic.w	r3, r3, #15
 8012c46:	f043 0301 	orr.w	r3, r3, #1
 8012c4a:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
}
 8012c4e:	bd10      	pop	{r4, pc}
 8012c50:	000a0005 	.word	0x000a0005
 8012c54:	00037fff 	.word	0x00037fff

08012c58 <invalidate_point>:
}

static void invalidate_point(lv_obj_t * obj, uint16_t i)
{
    lv_chart_t * chart  = (lv_chart_t *)obj;
    if(i >= chart->point_cnt) return;
 8012c58:	f8b0 3082 	ldrh.w	r3, [r0, #130]	; 0x82
 8012c5c:	428b      	cmp	r3, r1
{
 8012c5e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8012c62:	4606      	mov	r6, r0
 8012c64:	460c      	mov	r4, r1
    if(i >= chart->point_cnt) return;
 8012c66:	d972      	bls.n	8012d4e <invalidate_point+0xf6>

    lv_coord_t w  = (lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 8012c68:	f7f2 f90d 	bl	8004e86 <lv_obj_get_content_width>
 8012c6c:	f8b6 7084 	ldrh.w	r7, [r6, #132]	; 0x84
 8012c70:	4378      	muls	r0, r7
 8012c72:	f340 270f 	sbfx	r7, r0, #8, #16
    lv_coord_t scroll_left = lv_obj_get_scroll_left(obj);
 8012c76:	4630      	mov	r0, r6
 8012c78:	f7f3 f9a2 	bl	8005fc0 <lv_obj_get_scroll_left>
    if(chart->type == LV_CHART_TYPE_LINE) {
 8012c7c:	f896 3088 	ldrb.w	r3, [r6, #136]	; 0x88
    lv_coord_t scroll_left = lv_obj_get_scroll_left(obj);
 8012c80:	4680      	mov	r8, r0
    if(chart->type == LV_CHART_TYPE_LINE) {
 8012c82:	f003 0307 	and.w	r3, r3, #7
 8012c86:	2b01      	cmp	r3, #1
 8012c88:	d164      	bne.n	8012d54 <invalidate_point+0xfc>
        lv_coord_t x_ofs = obj->coords.x1 + lv_obj_get_style_pad_left(obj, LV_PART_MAIN) - scroll_left;
 8012c8a:	f8b6 9014 	ldrh.w	r9, [r6, #20]
 8012c8e:	2100      	movs	r1, #0
 8012c90:	4630      	mov	r0, r6
 8012c92:	eba9 0808 	sub.w	r8, r9, r8
 8012c96:	f7ff ff7f 	bl	8012b98 <lv_obj_get_style_pad_left>
    return (lv_opa_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_line_width(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LINE_WIDTH);
 8012c9a:	f640 0249 	movw	r2, #2121	; 0x849
 8012c9e:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8012ca2:	4480      	add	r8, r0
 8012ca4:	4630      	mov	r0, r6
 8012ca6:	f7f4 fb5f 	bl	8007368 <lv_obj_get_style_prop>
        lv_coord_t line_width = lv_obj_get_style_line_width(obj, LV_PART_ITEMS);
        lv_coord_t point_w = lv_obj_get_style_width(obj, LV_PART_INDICATOR);
 8012caa:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8012cae:	4682      	mov	sl, r0
 8012cb0:	4630      	mov	r0, r6
 8012cb2:	f7ff ff78 	bl	8012ba6 <lv_obj_get_style_width>
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
    dest->x1 = src->x1;
    dest->y1 = src->y1;
 8012cb6:	f9b6 3016 	ldrsh.w	r3, [r6, #22]
        lv_coord_t x_ofs = obj->coords.x1 + lv_obj_get_style_pad_left(obj, LV_PART_MAIN) - scroll_left;
 8012cba:	fa1f f588 	uxth.w	r5, r8
    dest->x2 = src->x2;
    dest->y2 = src->y2;
 8012cbe:	f9b6 201a 	ldrsh.w	r2, [r6, #26]

        lv_area_t coords;
        lv_area_copy(&coords, &obj->coords);
        coords.y1 -= line_width + point_w;
 8012cc2:	fa1f f880 	uxth.w	r8, r0
 8012cc6:	fa1f f98a 	uxth.w	r9, sl
 8012cca:	fa18 fa8a 	uxtah	sl, r8, sl
 8012cce:	fa1f fa8a 	uxth.w	sl, sl
 8012cd2:	eba3 030a 	sub.w	r3, r3, sl
        coords.y2 += line_width + point_w;
 8012cd6:	4492      	add	sl, r2
        coords.y1 -= line_width + point_w;
 8012cd8:	f8ad 3002 	strh.w	r3, [sp, #2]

        if(i < chart->point_cnt - 1) {
 8012cdc:	f8b6 3082 	ldrh.w	r3, [r6, #130]	; 0x82
        coords.y2 += line_width + point_w;
 8012ce0:	f8ad a006 	strh.w	sl, [sp, #6]
        if(i < chart->point_cnt - 1) {
 8012ce4:	1e59      	subs	r1, r3, #1
 8012ce6:	428c      	cmp	r4, r1
 8012ce8:	da16      	bge.n	8012d18 <invalidate_point+0xc0>
            coords.x1 = ((w * i) / (chart->point_cnt - 1)) + x_ofs - line_width - point_w;
 8012cea:	fb07 f304 	mul.w	r3, r7, r4
            coords.x2 = ((w * (i + 1)) / (chart->point_cnt - 1)) + x_ofs + line_width + point_w;
            lv_obj_invalidate_area(obj, &coords);
 8012cee:	4630      	mov	r0, r6
            coords.x1 = ((w * i) / (chart->point_cnt - 1)) + x_ofs - line_width - point_w;
 8012cf0:	fb93 f2f1 	sdiv	r2, r3, r1
            coords.x2 = ((w * (i + 1)) / (chart->point_cnt - 1)) + x_ofs + line_width + point_w;
 8012cf4:	443b      	add	r3, r7
            coords.x1 = ((w * i) / (chart->point_cnt - 1)) + x_ofs - line_width - point_w;
 8012cf6:	eba2 0209 	sub.w	r2, r2, r9
            coords.x2 = ((w * (i + 1)) / (chart->point_cnt - 1)) + x_ofs + line_width + point_w;
 8012cfa:	fb93 f3f1 	sdiv	r3, r3, r1
 8012cfe:	444b      	add	r3, r9
            coords.x1 = ((w * i) / (chart->point_cnt - 1)) + x_ofs - line_width - point_w;
 8012d00:	442a      	add	r2, r5
            lv_obj_invalidate_area(obj, &coords);
 8012d02:	4669      	mov	r1, sp
            coords.x2 = ((w * (i + 1)) / (chart->point_cnt - 1)) + x_ofs + line_width + point_w;
 8012d04:	4443      	add	r3, r8
            coords.x1 = ((w * i) / (chart->point_cnt - 1)) + x_ofs - line_width - point_w;
 8012d06:	eba2 0208 	sub.w	r2, r2, r8
            coords.x2 = ((w * (i + 1)) / (chart->point_cnt - 1)) + x_ofs + line_width + point_w;
 8012d0a:	442b      	add	r3, r5
            coords.x1 = ((w * i) / (chart->point_cnt - 1)) + x_ofs - line_width - point_w;
 8012d0c:	f8ad 2000 	strh.w	r2, [sp]
            coords.x2 = ((w * (i + 1)) / (chart->point_cnt - 1)) + x_ofs + line_width + point_w;
 8012d10:	f8ad 3004 	strh.w	r3, [sp, #4]
            lv_obj_invalidate_area(obj, &coords);
 8012d14:	f7f2 f9e6 	bl	80050e4 <lv_obj_invalidate_area>
        }

        if(i > 0) {
 8012d18:	b1cc      	cbz	r4, 8012d4e <invalidate_point+0xf6>
            coords.x1 = ((w * (i - 1)) / (chart->point_cnt - 1)) + x_ofs - line_width - point_w;
 8012d1a:	3c01      	subs	r4, #1
 8012d1c:	f8b6 2082 	ldrh.w	r2, [r6, #130]	; 0x82
 8012d20:	437c      	muls	r4, r7
 8012d22:	3a01      	subs	r2, #1
 8012d24:	fb94 f3f2 	sdiv	r3, r4, r2
            coords.x2 = ((w * i) / (chart->point_cnt - 1)) + x_ofs + line_width + point_w;
 8012d28:	443c      	add	r4, r7
            coords.x1 = ((w * (i - 1)) / (chart->point_cnt - 1)) + x_ofs - line_width - point_w;
 8012d2a:	eba3 0309 	sub.w	r3, r3, r9
            coords.x2 = ((w * i) / (chart->point_cnt - 1)) + x_ofs + line_width + point_w;
 8012d2e:	fb94 f4f2 	sdiv	r4, r4, r2
            coords.x1 = ((w * (i - 1)) / (chart->point_cnt - 1)) + x_ofs - line_width - point_w;
 8012d32:	442b      	add	r3, r5
            coords.x2 = ((w * i) / (chart->point_cnt - 1)) + x_ofs + line_width + point_w;
 8012d34:	444c      	add	r4, r9
            coords.x1 = ((w * (i - 1)) / (chart->point_cnt - 1)) + x_ofs - line_width - point_w;
 8012d36:	eba3 0308 	sub.w	r3, r3, r8
            coords.x2 = ((w * i) / (chart->point_cnt - 1)) + x_ofs + line_width + point_w;
 8012d3a:	44a0      	add	r8, r4
 8012d3c:	44a8      	add	r8, r5
            coords.x1 = ((w * (i - 1)) / (chart->point_cnt - 1)) + x_ofs - line_width - point_w;
 8012d3e:	f8ad 3000 	strh.w	r3, [sp]
            coords.x2 = ((w * i) / (chart->point_cnt - 1)) + x_ofs + line_width + point_w;
 8012d42:	f8ad 8004 	strh.w	r8, [sp, #4]
        lv_obj_get_coords(obj, &col_a);
        col_a.x1 = x_act - scroll_left;
        col_a.x2 = col_a.x1 + block_w;
        col_a.x1 -= block_gap;

        lv_obj_invalidate_area(obj, &col_a);
 8012d46:	4669      	mov	r1, sp
 8012d48:	4630      	mov	r0, r6
 8012d4a:	f7f2 f9cb 	bl	80050e4 <lv_obj_invalidate_area>
        lv_obj_invalidate(obj);
    }
    else {
        lv_obj_invalidate(obj);
    }
}
 8012d4e:	b002      	add	sp, #8
 8012d50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if(chart->type == LV_CHART_TYPE_BAR) {
 8012d54:	2b02      	cmp	r3, #2
 8012d56:	d12a      	bne.n	8012dae <invalidate_point+0x156>
        int32_t block_gap = (lv_obj_get_style_pad_column(obj, LV_PART_MAIN) * chart->zoom_x) >> 8;  /*Gap between the column on ~adjacent X*/
 8012d58:	2100      	movs	r1, #0
 8012d5a:	4630      	mov	r0, r6
 8012d5c:	f7ff ff2a 	bl	8012bb4 <lv_obj_get_style_pad_column>
 8012d60:	f8b6 5084 	ldrh.w	r5, [r6, #132]	; 0x84
        x_act += obj->coords.x1 + lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 8012d64:	2100      	movs	r1, #0
 8012d66:	f9b6 a014 	ldrsh.w	sl, [r6, #20]
        int32_t block_gap = (lv_obj_get_style_pad_column(obj, LV_PART_MAIN) * chart->zoom_x) >> 8;  /*Gap between the column on ~adjacent X*/
 8012d6a:	4368      	muls	r0, r5
        lv_coord_t block_w = (w + block_gap) / chart->point_cnt;
 8012d6c:	f8b6 5082 	ldrh.w	r5, [r6, #130]	; 0x82
 8012d70:	eb07 2720 	add.w	r7, r7, r0, asr #8
        int32_t block_gap = (lv_obj_get_style_pad_column(obj, LV_PART_MAIN) * chart->zoom_x) >> 8;  /*Gap between the column on ~adjacent X*/
 8012d74:	ea4f 2920 	mov.w	r9, r0, asr #8
        x_act += obj->coords.x1 + lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 8012d78:	4630      	mov	r0, r6
 8012d7a:	f7ff ff0d 	bl	8012b98 <lv_obj_get_style_pad_left>
        lv_obj_get_coords(obj, &col_a);
 8012d7e:	4669      	mov	r1, sp
        lv_coord_t block_w = (w + block_gap) / chart->point_cnt;
 8012d80:	fb97 f5f5 	sdiv	r5, r7, r5
        x_act = (int32_t)((int32_t)(block_w) * i) ;
 8012d84:	fb14 f405 	smulbb	r4, r4, r5
 8012d88:	b2af      	uxth	r7, r5
 8012d8a:	b2a5      	uxth	r5, r4
        x_act += obj->coords.x1 + lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 8012d8c:	4604      	mov	r4, r0
        lv_obj_get_coords(obj, &col_a);
 8012d8e:	4630      	mov	r0, r6
        x_act += obj->coords.x1 + lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 8012d90:	4454      	add	r4, sl
        lv_obj_get_coords(obj, &col_a);
 8012d92:	f7f2 f81c 	bl	8004dce <lv_obj_get_coords>
        col_a.x1 = x_act - scroll_left;
 8012d96:	eba4 0408 	sub.w	r4, r4, r8
 8012d9a:	442c      	add	r4, r5
        col_a.x2 = col_a.x1 + block_w;
 8012d9c:	fa17 f784 	uxtah	r7, r7, r4
        col_a.x1 -= block_gap;
 8012da0:	eba4 0409 	sub.w	r4, r4, r9
        col_a.x2 = col_a.x1 + block_w;
 8012da4:	f8ad 7004 	strh.w	r7, [sp, #4]
        col_a.x1 -= block_gap;
 8012da8:	f8ad 4000 	strh.w	r4, [sp]
 8012dac:	e7cb      	b.n	8012d46 <invalidate_point+0xee>
        lv_obj_invalidate(obj);
 8012dae:	4630      	mov	r0, r6
 8012db0:	f7f2 f9b2 	bl	8005118 <lv_obj_invalidate>
 8012db4:	e7cb      	b.n	8012d4e <invalidate_point+0xf6>

08012db6 <lv_obj_get_style_border_width.constprop.0>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8012db6:	f241 0232 	movw	r2, #4146	; 0x1032
 8012dba:	2100      	movs	r1, #0
static inline lv_coord_t lv_obj_get_style_border_width(const struct _lv_obj_t * obj, uint32_t part)
 8012dbc:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8012dbe:	f7f4 fad3 	bl	8007368 <lv_obj_get_style_prop>
}
 8012dc2:	b200      	sxth	r0, r0
 8012dc4:	bd08      	pop	{r3, pc}

08012dc6 <lv_chart_get_point_pos_by_id>:
{
 8012dc6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012dca:	4688      	mov	r8, r1
 8012dcc:	b085      	sub	sp, #20
 8012dce:	4691      	mov	r9, r2
 8012dd0:	461d      	mov	r5, r3
    LV_ASSERT_NULL(obj);
 8012dd2:	4604      	mov	r4, r0
 8012dd4:	b900      	cbnz	r0, 8012dd8 <lv_chart_get_point_pos_by_id+0x12>
 8012dd6:	e7fe      	b.n	8012dd6 <lv_chart_get_point_pos_by_id+0x10>
    LV_ASSERT_NULL(ser);
 8012dd8:	b901      	cbnz	r1, 8012ddc <lv_chart_get_point_pos_by_id+0x16>
 8012dda:	e7fe      	b.n	8012dda <lv_chart_get_point_pos_by_id+0x14>
    if(id >= chart->point_cnt) {
 8012ddc:	f8b0 3082 	ldrh.w	r3, [r0, #130]	; 0x82
 8012de0:	4293      	cmp	r3, r2
 8012de2:	d805      	bhi.n	8012df0 <lv_chart_get_point_pos_by_id+0x2a>
        p_out->x = 0;
 8012de4:	2300      	movs	r3, #0
 8012de6:	802b      	strh	r3, [r5, #0]
        p_out->y = 0;
 8012de8:	806b      	strh	r3, [r5, #2]
}
 8012dea:	b005      	add	sp, #20
 8012dec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_coord_t w = (lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 8012df0:	f7f2 f849 	bl	8004e86 <lv_obj_get_content_width>
 8012df4:	f8b4 3084 	ldrh.w	r3, [r4, #132]	; 0x84
 8012df8:	4358      	muls	r0, r3
 8012dfa:	f340 230f 	sbfx	r3, r0, #8, #16
    lv_coord_t h = (lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 8012dfe:	4620      	mov	r0, r4
    lv_coord_t w = (lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 8012e00:	9303      	str	r3, [sp, #12]
    lv_coord_t h = (lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 8012e02:	f7f2 f85a 	bl	8004eba <lv_obj_get_content_height>
    if(chart->type == LV_CHART_TYPE_LINE) {
 8012e06:	f894 2088 	ldrb.w	r2, [r4, #136]	; 0x88
    lv_coord_t h = (lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 8012e0a:	f8b4 7086 	ldrh.w	r7, [r4, #134]	; 0x86
    if(chart->type == LV_CHART_TYPE_LINE) {
 8012e0e:	f002 0207 	and.w	r2, r2, #7
 8012e12:	9b03      	ldr	r3, [sp, #12]
    lv_coord_t h = (lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 8012e14:	4378      	muls	r0, r7
    if(chart->type == LV_CHART_TYPE_LINE) {
 8012e16:	2a01      	cmp	r2, #1
    lv_coord_t h = (lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 8012e18:	ea4f 2720 	mov.w	r7, r0, asr #8
    if(chart->type == LV_CHART_TYPE_LINE) {
 8012e1c:	d108      	bne.n	8012e30 <lv_chart_get_point_pos_by_id+0x6a>
        p_out->x = (w * id) / (chart->point_cnt - 1);
 8012e1e:	f8b4 2082 	ldrh.w	r2, [r4, #130]	; 0x82
 8012e22:	fb09 f303 	mul.w	r3, r9, r3
 8012e26:	3a01      	subs	r2, #1
 8012e28:	fb93 f3f2 	sdiv	r3, r3, r2
        p_out->x += (col_w - ser_gap) / 2;
 8012e2c:	802b      	strh	r3, [r5, #0]
 8012e2e:	e014      	b.n	8012e5a <lv_chart_get_point_pos_by_id+0x94>
    else if(chart->type == LV_CHART_TYPE_SCATTER) {
 8012e30:	2a03      	cmp	r2, #3
 8012e32:	d144      	bne.n	8012ebe <lv_chart_get_point_pos_by_id+0xf8>
        p_out->x = lv_map(ser->x_points[id], chart->xmin[ser->x_axis_sec], chart->xmax[ser->x_axis_sec], 0, w);
 8012e34:	f898 100c 	ldrb.w	r1, [r8, #12]
 8012e38:	f8d8 2000 	ldr.w	r2, [r8]
 8012e3c:	f3c1 01c0 	ubfx	r1, r1, #3, #1
 8012e40:	f932 0019 	ldrsh.w	r0, [r2, r9, lsl #1]
 8012e44:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8012e48:	9300      	str	r3, [sp, #0]
 8012e4a:	2300      	movs	r3, #0
 8012e4c:	f9b1 2078 	ldrsh.w	r2, [r1, #120]	; 0x78
 8012e50:	f9b1 1074 	ldrsh.w	r1, [r1, #116]	; 0x74
 8012e54:	f004 fc3f 	bl	80176d6 <lv_map>
 8012e58:	8028      	strh	r0, [r5, #0]
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 8012e5a:	4620      	mov	r0, r4
 8012e5c:	f7ff ffab 	bl	8012db6 <lv_obj_get_style_border_width.constprop.0>
 8012e60:	4606      	mov	r6, r0
    p_out->x += lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 8012e62:	2100      	movs	r1, #0
 8012e64:	4620      	mov	r0, r4
 8012e66:	f7ff fe97 	bl	8012b98 <lv_obj_get_style_pad_left>
 8012e6a:	882b      	ldrh	r3, [r5, #0]
 8012e6c:	4430      	add	r0, r6
 8012e6e:	4418      	add	r0, r3
 8012e70:	8028      	strh	r0, [r5, #0]
    p_out->x -= lv_obj_get_scroll_left(obj);
 8012e72:	4620      	mov	r0, r4
 8012e74:	f7f3 f8a4 	bl	8005fc0 <lv_obj_get_scroll_left>
    p_out->y = (int32_t)((int32_t)ser->y_points[id] - chart->ymin[ser->y_axis_sec]) * h;
 8012e78:	f898 200c 	ldrb.w	r2, [r8, #12]
    p_out->x -= lv_obj_get_scroll_left(obj);
 8012e7c:	882b      	ldrh	r3, [r5, #0]
 8012e7e:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8012e82:	1a18      	subs	r0, r3, r0
    p_out->y = (int32_t)((int32_t)ser->y_points[id] - chart->ymin[ser->y_axis_sec]) * h;
 8012e84:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012e88:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    p_out->x -= lv_obj_get_scroll_left(obj);
 8012e8c:	8028      	strh	r0, [r5, #0]
    p_out->y += lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + border_width;
 8012e8e:	4620      	mov	r0, r4
    p_out->y = (int32_t)((int32_t)ser->y_points[id] - chart->ymin[ser->y_axis_sec]) * h;
 8012e90:	f9b2 106c 	ldrsh.w	r1, [r2, #108]	; 0x6c
 8012e94:	f933 3019 	ldrsh.w	r3, [r3, r9, lsl #1]
    p_out->y = p_out->y / (chart->ymax[ser->y_axis_sec] - chart->ymin[ser->y_axis_sec]);
 8012e98:	f9b2 2070 	ldrsh.w	r2, [r2, #112]	; 0x70
    p_out->y = (int32_t)((int32_t)ser->y_points[id] - chart->ymin[ser->y_axis_sec]) * h;
 8012e9c:	1a5b      	subs	r3, r3, r1
    p_out->y = p_out->y / (chart->ymax[ser->y_axis_sec] - chart->ymin[ser->y_axis_sec]);
 8012e9e:	1a52      	subs	r2, r2, r1
    p_out->y += lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + border_width;
 8012ea0:	2100      	movs	r1, #0
    p_out->y = (int32_t)((int32_t)ser->y_points[id] - chart->ymin[ser->y_axis_sec]) * h;
 8012ea2:	fb13 f307 	smulbb	r3, r3, r7
    p_out->y = p_out->y / (chart->ymax[ser->y_axis_sec] - chart->ymin[ser->y_axis_sec]);
 8012ea6:	b21b      	sxth	r3, r3
 8012ea8:	fb93 f3f2 	sdiv	r3, r3, r2
    p_out->y = h - p_out->y;
 8012eac:	1aff      	subs	r7, r7, r3
 8012eae:	806f      	strh	r7, [r5, #2]
    p_out->y += lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + border_width;
 8012eb0:	f7ff fe87 	bl	8012bc2 <lv_obj_get_style_pad_top>
 8012eb4:	4430      	add	r0, r6
 8012eb6:	886e      	ldrh	r6, [r5, #2]
 8012eb8:	4406      	add	r6, r0
 8012eba:	806e      	strh	r6, [r5, #2]
 8012ebc:	e795      	b.n	8012dea <lv_chart_get_point_pos_by_id+0x24>
    else if(chart->type == LV_CHART_TYPE_BAR) {
 8012ebe:	2a02      	cmp	r2, #2
 8012ec0:	d1cb      	bne.n	8012e5a <lv_chart_get_point_pos_by_id+0x94>
        uint32_t ser_cnt = _lv_ll_get_len(&chart->series_ll);
 8012ec2:	f104 0a24 	add.w	sl, r4, #36	; 0x24
 8012ec6:	9303      	str	r3, [sp, #12]
 8012ec8:	4650      	mov	r0, sl
 8012eca:	f004 fb3d 	bl	8017548 <_lv_ll_get_len>
        int32_t ser_gap = (lv_obj_get_style_pad_column(obj, LV_PART_ITEMS) * chart->zoom_x) >> 8; /*Gap between the column on the ~same X*/
 8012ece:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
        uint32_t ser_cnt = _lv_ll_get_len(&chart->series_ll);
 8012ed2:	4606      	mov	r6, r0
        int32_t ser_gap = (lv_obj_get_style_pad_column(obj, LV_PART_ITEMS) * chart->zoom_x) >> 8; /*Gap between the column on the ~same X*/
 8012ed4:	4620      	mov	r0, r4
 8012ed6:	f7ff fe6d 	bl	8012bb4 <lv_obj_get_style_pad_column>
 8012eda:	f8b4 b084 	ldrh.w	fp, [r4, #132]	; 0x84
        int32_t block_gap = (lv_obj_get_style_pad_column(obj, LV_PART_MAIN) * chart->zoom_x) >> 8;  /*Gap between the column on ~adjacent X*/
 8012ede:	2100      	movs	r1, #0
        int32_t ser_gap = (lv_obj_get_style_pad_column(obj, LV_PART_ITEMS) * chart->zoom_x) >> 8; /*Gap between the column on the ~same X*/
 8012ee0:	fb00 f00b 	mul.w	r0, r0, fp
 8012ee4:	ea4f 2b20 	mov.w	fp, r0, asr #8
        int32_t block_gap = (lv_obj_get_style_pad_column(obj, LV_PART_MAIN) * chart->zoom_x) >> 8;  /*Gap between the column on ~adjacent X*/
 8012ee8:	4620      	mov	r0, r4
 8012eea:	f7ff fe63 	bl	8012bb4 <lv_obj_get_style_pad_column>
 8012eee:	f8b4 1084 	ldrh.w	r1, [r4, #132]	; 0x84
        lv_coord_t block_w = (w - ((chart->point_cnt - 1) * block_gap)) / chart->point_cnt;
 8012ef2:	f8b4 c082 	ldrh.w	ip, [r4, #130]	; 0x82
        int32_t block_gap = (lv_obj_get_style_pad_column(obj, LV_PART_MAIN) * chart->zoom_x) >> 8;  /*Gap between the column on ~adjacent X*/
 8012ef6:	4341      	muls	r1, r0
        lv_coord_t block_w = (w - ((chart->point_cnt - 1) * block_gap)) / chart->point_cnt;
 8012ef8:	9b03      	ldr	r3, [sp, #12]
 8012efa:	f10c 30ff 	add.w	r0, ip, #4294967295
        int32_t block_gap = (lv_obj_get_style_pad_column(obj, LV_PART_MAIN) * chart->zoom_x) >> 8;  /*Gap between the column on ~adjacent X*/
 8012efe:	1209      	asrs	r1, r1, #8
        lv_coord_t block_w = (w - ((chart->point_cnt - 1) * block_gap)) / chart->point_cnt;
 8012f00:	fb00 3111 	mls	r1, r0, r1, r3
        _LV_LL_READ_BACK(&chart->series_ll, ser_i) {
 8012f04:	4650      	mov	r0, sl
        p_out->x = (int32_t)((int32_t)w * id) / chart->point_cnt;
 8012f06:	fb03 f309 	mul.w	r3, r3, r9
        lv_coord_t block_w = (w - ((chart->point_cnt - 1) * block_gap)) / chart->point_cnt;
 8012f0a:	fb91 f1fc 	sdiv	r1, r1, ip
        lv_coord_t col_w = block_w / ser_cnt;
 8012f0e:	b209      	sxth	r1, r1
 8012f10:	fbb1 f6f6 	udiv	r6, r1, r6
        p_out->x = (int32_t)((int32_t)w * id) / chart->point_cnt;
 8012f14:	fb93 fcfc 	sdiv	ip, r3, ip
        lv_coord_t col_w = block_w / ser_cnt;
 8012f18:	b232      	sxth	r2, r6
        p_out->x = (int32_t)((int32_t)w * id) / chart->point_cnt;
 8012f1a:	f8a5 c000 	strh.w	ip, [r5]
        lv_coord_t col_w = block_w / ser_cnt;
 8012f1e:	9203      	str	r2, [sp, #12]
        _LV_LL_READ_BACK(&chart->series_ll, ser_i) {
 8012f20:	f004 fb08 	bl	8017534 <_lv_ll_get_tail>
 8012f24:	882b      	ldrh	r3, [r5, #0]
 8012f26:	b938      	cbnz	r0, 8012f38 <lv_chart_get_point_pos_by_id+0x172>
        p_out->x += (col_w - ser_gap) / 2;
 8012f28:	9a03      	ldr	r2, [sp, #12]
 8012f2a:	eba2 0a0b 	sub.w	sl, r2, fp
 8012f2e:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
 8012f32:	eb03 036a 	add.w	r3, r3, sl, asr #1
 8012f36:	e779      	b.n	8012e2c <lv_chart_get_point_pos_by_id+0x66>
            if(ser_i == ser) break;
 8012f38:	4580      	cmp	r8, r0
 8012f3a:	d0f5      	beq.n	8012f28 <lv_chart_get_point_pos_by_id+0x162>
            p_out->x += col_w;
 8012f3c:	4433      	add	r3, r6
        _LV_LL_READ_BACK(&chart->series_ll, ser_i) {
 8012f3e:	4601      	mov	r1, r0
 8012f40:	4650      	mov	r0, sl
            p_out->x += col_w;
 8012f42:	802b      	strh	r3, [r5, #0]
        _LV_LL_READ_BACK(&chart->series_ll, ser_i) {
 8012f44:	f004 fafd 	bl	8017542 <_lv_ll_get_prev>
 8012f48:	e7ec      	b.n	8012f24 <lv_chart_get_point_pos_by_id+0x15e>

08012f4a <get_tick_gsc>:
}

lv_chart_tick_dsc_t * get_tick_gsc(lv_obj_t * obj, lv_chart_axis_t axis)
{
    lv_chart_t * chart = (lv_chart_t*) obj;
    switch(axis) {
 8012f4a:	2904      	cmp	r1, #4
 8012f4c:	d80c      	bhi.n	8012f68 <get_tick_gsc+0x1e>
 8012f4e:	e8df f001 	tbb	[pc, r1]
 8012f52:	0703      	.short	0x0703
 8012f54:	0b05      	.short	0x0b05
 8012f56:	09          	.byte	0x09
 8012f57:	00          	.byte	0x00
        case LV_CHART_AXIS_PRIMARY_Y: return &chart->tick[0];
 8012f58:	303c      	adds	r0, #60	; 0x3c
 8012f5a:	4770      	bx	lr
        case LV_CHART_AXIS_PRIMARY_X: return &chart->tick[1];
 8012f5c:	3048      	adds	r0, #72	; 0x48
 8012f5e:	4770      	bx	lr
        case LV_CHART_AXIS_SECONDARY_Y: return &chart->tick[2];
 8012f60:	3054      	adds	r0, #84	; 0x54
 8012f62:	4770      	bx	lr
        case LV_CHART_AXIS_SECONDARY_X: return &chart->tick[3];
 8012f64:	3060      	adds	r0, #96	; 0x60
 8012f66:	4770      	bx	lr
{
 8012f68:	2000      	movs	r0, #0
        default: return NULL;
    }
}
 8012f6a:	4770      	bx	lr

08012f6c <draw_y_ticks>:
{
 8012f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f70:	4689      	mov	r9, r1
 8012f72:	b0ad      	sub	sp, #180	; 0xb4
    lv_chart_tick_dsc_t * t = get_tick_gsc(obj, axis);
 8012f74:	4611      	mov	r1, r2
{
 8012f76:	4604      	mov	r4, r0
 8012f78:	4616      	mov	r6, r2
    lv_chart_tick_dsc_t * t = get_tick_gsc(obj, axis);
 8012f7a:	f7ff ffe6 	bl	8012f4a <get_tick_gsc>
    if(t->major_cnt <= 1) return;
 8012f7e:	8903      	ldrh	r3, [r0, #8]
    lv_chart_tick_dsc_t * t = get_tick_gsc(obj, axis);
 8012f80:	4605      	mov	r5, r0
    if(t->major_cnt <= 1) return;
 8012f82:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8012f86:	2b01      	cmp	r3, #1
 8012f88:	f240 8121 	bls.w	80131ce <draw_y_ticks+0x262>
    if(!t->label_en && !t->major_len && !t->minor_len) return;
 8012f8c:	f990 3009 	ldrsb.w	r3, [r0, #9]
 8012f90:	2b00      	cmp	r3, #0
 8012f92:	db03      	blt.n	8012f9c <draw_y_ticks+0x30>
 8012f94:	6803      	ldr	r3, [r0, #0]
 8012f96:	2b00      	cmp	r3, #0
 8012f98:	f000 8119 	beq.w	80131ce <draw_y_ticks+0x262>
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 8012f9c:	4620      	mov	r0, r4
 8012f9e:	f7ff ff0a 	bl	8012db6 <lv_obj_get_style_border_width.constprop.0>
    lv_coord_t pad_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 8012fa2:	2100      	movs	r1, #0
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 8012fa4:	4680      	mov	r8, r0
    lv_coord_t pad_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 8012fa6:	4620      	mov	r0, r4
 8012fa8:	f7ff fe0b 	bl	8012bc2 <lv_obj_get_style_pad_top>
 8012fac:	4607      	mov	r7, r0
    lv_coord_t h     = (lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 8012fae:	4620      	mov	r0, r4
 8012fb0:	f7f1 ff83 	bl	8004eba <lv_obj_get_content_height>
 8012fb4:	f8b4 3086 	ldrh.w	r3, [r4, #134]	; 0x86
 8012fb8:	4358      	muls	r0, r3
 8012fba:	f340 230f 	sbfx	r3, r0, #8, #16
    lv_coord_t y_ofs = obj->coords.y1 + pad_top + border_width - lv_obj_get_scroll_top(obj);
 8012fbe:	eb07 0008 	add.w	r0, r7, r8
 8012fc2:	8ae7      	ldrh	r7, [r4, #22]
    lv_coord_t h     = (lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 8012fc4:	9309      	str	r3, [sp, #36]	; 0x24
    lv_coord_t y_ofs = obj->coords.y1 + pad_top + border_width - lv_obj_get_scroll_top(obj);
 8012fc6:	4407      	add	r7, r0
 8012fc8:	4620      	mov	r0, r4
 8012fca:	f7f2 ffa3 	bl	8005f14 <lv_obj_get_scroll_top>
 8012fce:	b2bf      	uxth	r7, r7
 8012fd0:	1a38      	subs	r0, r7, r0
 8012fd2:	b283      	uxth	r3, r0
 8012fd4:	9305      	str	r3, [sp, #20]
    if(axis == LV_CHART_AXIS_PRIMARY_Y) {
 8012fd6:	2e00      	cmp	r6, #0
 8012fd8:	f040 80fc 	bne.w	80131d4 <draw_y_ticks+0x268>
        label_gap = lv_obj_get_style_pad_left(obj, LV_PART_TICKS);
 8012fdc:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 8012fe0:	4620      	mov	r0, r4
 8012fe2:	f7ff fdd9 	bl	8012b98 <lv_obj_get_style_pad_left>
        x_ofs = obj->coords.x1;
 8012fe6:	f9b4 b014 	ldrsh.w	fp, [r4, #20]
        label_gap = lv_obj_get_style_pad_left(obj, LV_PART_TICKS);
 8012fea:	9004      	str	r0, [sp, #16]
    if(axis == LV_CHART_AXIS_SECONDARY_Y) {
 8012fec:	2e01      	cmp	r6, #1
    lv_coord_t major_len = t->major_len;
 8012fee:	f9b5 8000 	ldrsh.w	r8, [r5]
    lv_coord_t minor_len = t->minor_len;
 8012ff2:	f9b5 a002 	ldrsh.w	sl, [r5, #2]
    lv_draw_line_dsc_init(&line_dsc);
 8012ff6:	af0f      	add	r7, sp, #60	; 0x3c
        major_len *= -1;
 8012ff8:	bf08      	it	eq
 8012ffa:	f1c8 0800 	rsbeq	r8, r8, #0
        else p1.x++;
 8012ffe:	fa1f fb8b 	uxth.w	fp, fp
        minor_len *= -1;
 8013002:	bf08      	it	eq
 8013004:	f1ca 0a00 	rsbeq	sl, sl, #0
    lv_draw_line_dsc_init(&line_dsc);
 8013008:	4638      	mov	r0, r7
        major_len *= -1;
 801300a:	bf04      	itt	eq
 801300c:	fa0f f888 	sxtheq.w	r8, r8
        minor_len *= -1;
 8013010:	fa0f fa8a 	sxtheq.w	sl, sl
    lv_draw_line_dsc_init(&line_dsc);
 8013014:	f7f7 fefe 	bl	800ae14 <lv_draw_line_dsc_init>
    lv_obj_init_draw_line_dsc(obj, LV_PART_TICKS, &line_dsc);
 8013018:	463a      	mov	r2, r7
 801301a:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 801301e:	4620      	mov	r0, r4
 8013020:	f7f1 fc82 	bl	8004928 <lv_obj_init_draw_line_dsc>
    lv_draw_label_dsc_init(&label_dsc);
 8013024:	aa12      	add	r2, sp, #72	; 0x48
 8013026:	4610      	mov	r0, r2
 8013028:	f7f7 fa7a 	bl	800a520 <lv_draw_label_dsc_init>
    lv_obj_init_draw_label_dsc(obj, LV_PART_TICKS, &label_dsc);
 801302c:	aa12      	add	r2, sp, #72	; 0x48
 801302e:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 8013032:	4620      	mov	r0, r4
 8013034:	f7f1 fbd0 	bl	80047d8 <lv_obj_init_draw_label_dsc>
    lv_obj_draw_dsc_init(&dsc, clip_area);
 8013038:	4649      	mov	r1, r9
 801303a:	a81a      	add	r0, sp, #104	; 0x68
 801303c:	f7f1 fd74 	bl	8004b28 <lv_obj_draw_dsc_init>
    dsc.line_dsc = &line_dsc;
 8013040:	971e      	str	r7, [sp, #120]	; 0x78
    uint32_t total_tick_num = (t->major_cnt - 1) * (t->minor_cnt);
 8013042:	892f      	ldrh	r7, [r5, #8]
    dsc.part = LV_PART_TICKS;
 8013044:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
    dsc.label_dsc = &label_dsc;
 8013048:	aa12      	add	r2, sp, #72	; 0x48
    dsc.id = axis;
 801304a:	9628      	str	r6, [sp, #160]	; 0xa0
    uint32_t total_tick_num = (t->major_cnt - 1) * (t->minor_cnt);
 801304c:	f3c7 070e 	ubfx	r7, r7, #0, #15
    dsc.part = LV_PART_TICKS;
 8013050:	9327      	str	r3, [sp, #156]	; 0x9c
    dsc.label_dsc = &label_dsc;
 8013052:	921d      	str	r2, [sp, #116]	; 0x74
    uint32_t total_tick_num = (t->major_cnt - 1) * (t->minor_cnt);
 8013054:	1e7b      	subs	r3, r7, #1
 8013056:	88ef      	ldrh	r7, [r5, #6]
 8013058:	f3c7 070e 	ubfx	r7, r7, #0, #15
 801305c:	435f      	muls	r7, r3
        if(axis == LV_CHART_AXIS_PRIMARY_Y) p1.x--;
 801305e:	f10b 33ff 	add.w	r3, fp, #4294967295
        else p1.x++;
 8013062:	f10b 0b01 	add.w	fp, fp, #1
 8013066:	2e00      	cmp	r6, #0
 8013068:	bf08      	it	eq
 801306a:	469b      	moveq	fp, r3
 801306c:	fa0f f38b 	sxth.w	r3, fp
        else p2.x = p1.x - minor_len; /*minor tick*/
 8013070:	fa1f fb8b 	uxth.w	fp, fp
 8013074:	9308      	str	r3, [sp, #32]
 8013076:	ebab 0a0a 	sub.w	sl, fp, sl
        if(major) p2.x = p1.x - major_len; /*major tick*/
 801307a:	ebab 0808 	sub.w	r8, fp, r8
        else p2.x = p1.x - minor_len; /*minor tick*/
 801307e:	fa0f f38a 	sxth.w	r3, sl
 8013082:	eb04 0a46 	add.w	sl, r4, r6, lsl #1
 8013086:	9307      	str	r3, [sp, #28]
        if(major) p2.x = p1.x - major_len; /*major tick*/
 8013088:	fa0f f388 	sxth.w	r3, r8
    for(i = 0; i <= total_tick_num; i++) {
 801308c:	f04f 0800 	mov.w	r8, #0
        if(major) p2.x = p1.x - major_len; /*major tick*/
 8013090:	9306      	str	r3, [sp, #24]
        p2.y = p1.y = y_ofs + (int32_t)((int32_t)(h - line_dsc.width) * i) / total_tick_num;
 8013092:	f9bd 203e 	ldrsh.w	r2, [sp, #62]	; 0x3e
 8013096:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013098:	9905      	ldr	r1, [sp, #20]
 801309a:	1a9b      	subs	r3, r3, r2
 801309c:	fb08 f303 	mul.w	r3, r8, r3
 80130a0:	fbb3 f3f7 	udiv	r3, r3, r7
 80130a4:	440b      	add	r3, r1
 80130a6:	9908      	ldr	r1, [sp, #32]
 80130a8:	f8ad 1028 	strh.w	r1, [sp, #40]	; 0x28
 80130ac:	b21b      	sxth	r3, r3
        if(i % t->minor_cnt == 0) major = true;
 80130ae:	88e9      	ldrh	r1, [r5, #6]
        p2.y = p1.y = y_ofs + (int32_t)((int32_t)(h - line_dsc.width) * i) / total_tick_num;
 80130b0:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
        if(i % t->minor_cnt == 0) major = true;
 80130b4:	f3c1 010e 	ubfx	r1, r1, #0, #15
        p2.y = p1.y = y_ofs + (int32_t)((int32_t)(h - line_dsc.width) * i) / total_tick_num;
 80130b8:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
        if(i % t->minor_cnt == 0) major = true;
 80130bc:	fbb8 f0f1 	udiv	r0, r8, r1
 80130c0:	fb01 8110 	mls	r1, r1, r0, r8
 80130c4:	2900      	cmp	r1, #0
 80130c6:	f040 8091 	bne.w	80131ec <draw_y_ticks+0x280>
        if(major) p2.x = p1.x - major_len; /*major tick*/
 80130ca:	9906      	ldr	r1, [sp, #24]
        if(i % t->minor_cnt == 0) major = true;
 80130cc:	f04f 0b01 	mov.w	fp, #1
        if(p1.y + line_dsc.width / 2  >= obj->coords.y1 &&
 80130d0:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 80130d4:	f9b4 0016 	ldrsh.w	r0, [r4, #22]
 80130d8:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 80130dc:	1051      	asrs	r1, r2, #1
 80130de:	eb03 0262 	add.w	r2, r3, r2, asr #1
 80130e2:	4282      	cmp	r2, r0
 80130e4:	db0a      	blt.n	80130fc <draw_y_ticks+0x190>
           p2.y - line_dsc.width / 2  <= obj->coords.y2)
 80130e6:	1a5b      	subs	r3, r3, r1
 80130e8:	f9b4 201a 	ldrsh.w	r2, [r4, #26]
        if(p1.y + line_dsc.width / 2  >= obj->coords.y1 &&
 80130ec:	4293      	cmp	r3, r2
 80130ee:	dc05      	bgt.n	80130fc <draw_y_ticks+0x190>
            lv_draw_line(&p1, &p2, clip_area, &line_dsc);
 80130f0:	ab0f      	add	r3, sp, #60	; 0x3c
 80130f2:	464a      	mov	r2, r9
 80130f4:	a90b      	add	r1, sp, #44	; 0x2c
 80130f6:	a80a      	add	r0, sp, #40	; 0x28
 80130f8:	f7f7 fe98 	bl	800ae2c <lv_draw_line>
        if(major  && t->label_en)  {
 80130fc:	f1bb 0f00 	cmp.w	fp, #0
 8013100:	d060      	beq.n	80131c4 <draw_y_ticks+0x258>
 8013102:	f995 3009 	ldrsb.w	r3, [r5, #9]
 8013106:	2b00      	cmp	r3, #0
 8013108:	da5c      	bge.n	80131c4 <draw_y_ticks+0x258>
            int32_t tick_value = lv_map(total_tick_num - i, 0, total_tick_num, chart->ymin[sec_axis], chart->ymax[sec_axis]);
 801310a:	f9ba 3070 	ldrsh.w	r3, [sl, #112]	; 0x70
 801310e:	463a      	mov	r2, r7
 8013110:	2100      	movs	r1, #0
 8013112:	eba7 0008 	sub.w	r0, r7, r8
 8013116:	9300      	str	r3, [sp, #0]
 8013118:	f9ba 306c 	ldrsh.w	r3, [sl, #108]	; 0x6c
 801311c:	f004 fadb 	bl	80176d6 <lv_map>
            lv_snprintf(dsc.text, sizeof(dsc.text), "%d", tick_value);
 8013120:	4a38      	ldr	r2, [pc, #224]	; (8013204 <draw_y_ticks+0x298>)
 8013122:	4603      	mov	r3, r0
            int32_t tick_value = lv_map(total_tick_num - i, 0, total_tick_num, chart->ymin[sec_axis], chart->ymax[sec_axis]);
 8013124:	4683      	mov	fp, r0
            lv_snprintf(dsc.text, sizeof(dsc.text), "%d", tick_value);
 8013126:	2110      	movs	r1, #16
 8013128:	a823      	add	r0, sp, #140	; 0x8c
 801312a:	f005 f90d 	bl	8018348 <lv_snprintf>
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &dsc);
 801312e:	aa1a      	add	r2, sp, #104	; 0x68
 8013130:	211a      	movs	r1, #26
 8013132:	4620      	mov	r0, r4
            dsc.value = tick_value;
 8013134:	f8cd b0a8 	str.w	fp, [sp, #168]	; 0xa8
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &dsc);
 8013138:	f7ee fec6 	bl	8001ec8 <lv_event_send>
            lv_txt_get_size(&size, dsc.text, label_dsc.font, label_dsc.letter_space, label_dsc.line_space, LV_COORD_MAX, LV_TEXT_FLAG_NONE);
 801313c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8013140:	2200      	movs	r2, #0
 8013142:	a923      	add	r1, sp, #140	; 0x8c
 8013144:	a80c      	add	r0, sp, #48	; 0x30
 8013146:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801314a:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
 801314e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013150:	9300      	str	r3, [sp, #0]
 8013152:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	; 0x5c
 8013156:	f006 f9fe 	bl	8019556 <lv_txt_get_size>
            a.y1 = p2.y - size.y / 2;
 801315a:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801315e:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 8013162:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8013166:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 801316a:	f8bd c030 	ldrh.w	ip, [sp, #48]	; 0x30
 801316e:	f3c3 034f 	ubfx	r3, r3, #1, #16
 8013172:	1ad1      	subs	r1, r2, r3
            a.y2 = p2.y + size.y / 2;
 8013174:	4413      	add	r3, r2
 8013176:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
            a.y1 = p2.y - size.y / 2;
 801317a:	b209      	sxth	r1, r1
            a.y2 = p2.y + size.y / 2;
 801317c:	b21b      	sxth	r3, r3
            a.y1 = p2.y - size.y / 2;
 801317e:	f8ad 1036 	strh.w	r1, [sp, #54]	; 0x36
            a.y2 = p2.y + size.y / 2;
 8013182:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
            if(!sec_axis) {
 8013186:	bbae      	cbnz	r6, 80131f4 <draw_y_ticks+0x288>
                a.x1 = p2.x - size.x - label_gap;
 8013188:	eba2 0c0c 	sub.w	ip, r2, ip
                a.x2 = p2.x - label_gap;
 801318c:	1a12      	subs	r2, r2, r0
                a.x1 = p2.x - size.x - label_gap;
 801318e:	ebac 0c00 	sub.w	ip, ip, r0
 8013192:	f8ad c034 	strh.w	ip, [sp, #52]	; 0x34
                a.x2 = p2.x + size.x + label_gap;
 8013196:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
            if(a.y2 >= obj->coords.y1 &&
 801319a:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 801319e:	429a      	cmp	r2, r3
 80131a0:	dc0b      	bgt.n	80131ba <draw_y_ticks+0x24e>
 80131a2:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 80131a6:	428b      	cmp	r3, r1
 80131a8:	db07      	blt.n	80131ba <draw_y_ticks+0x24e>
                lv_draw_label(&a, clip_area, &label_dsc, dsc.text, NULL);
 80131aa:	2300      	movs	r3, #0
 80131ac:	aa12      	add	r2, sp, #72	; 0x48
 80131ae:	4649      	mov	r1, r9
 80131b0:	a80d      	add	r0, sp, #52	; 0x34
 80131b2:	9300      	str	r3, [sp, #0]
 80131b4:	ab23      	add	r3, sp, #140	; 0x8c
 80131b6:	f7f7 fb8b 	bl	800a8d0 <lv_draw_label>
            lv_event_send(obj, LV_EVENT_DRAW_PART_END, &dsc);
 80131ba:	aa1a      	add	r2, sp, #104	; 0x68
 80131bc:	211b      	movs	r1, #27
 80131be:	4620      	mov	r0, r4
 80131c0:	f7ee fe82 	bl	8001ec8 <lv_event_send>
    for(i = 0; i <= total_tick_num; i++) {
 80131c4:	f108 0801 	add.w	r8, r8, #1
 80131c8:	4547      	cmp	r7, r8
 80131ca:	f4bf af62 	bcs.w	8013092 <draw_y_ticks+0x126>
}
 80131ce:	b02d      	add	sp, #180	; 0xb4
 80131d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80131d4:	f241 0213 	movw	r2, #4115	; 0x1013
 80131d8:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 80131dc:	4620      	mov	r0, r4
 80131de:	f7f4 f8c3 	bl	8007368 <lv_obj_get_style_prop>
        x_ofs = obj->coords.x2;
 80131e2:	f9b4 b018 	ldrsh.w	fp, [r4, #24]
    return (lv_coord_t)v.num;
 80131e6:	b203      	sxth	r3, r0
 80131e8:	9304      	str	r3, [sp, #16]
 80131ea:	e6ff      	b.n	8012fec <draw_y_ticks+0x80>
        else p2.x = p1.x - minor_len; /*minor tick*/
 80131ec:	9907      	ldr	r1, [sp, #28]
        bool major = false;
 80131ee:	f04f 0b00 	mov.w	fp, #0
 80131f2:	e76d      	b.n	80130d0 <draw_y_ticks+0x164>
                a.x1 = p2.x + label_gap;
 80131f4:	eb02 0e00 	add.w	lr, r2, r0
                a.x2 = p2.x + size.x + label_gap;
 80131f8:	4462      	add	r2, ip
                a.x1 = p2.x + label_gap;
 80131fa:	f8ad e034 	strh.w	lr, [sp, #52]	; 0x34
                a.x2 = p2.x + size.x + label_gap;
 80131fe:	4402      	add	r2, r0
 8013200:	e7c9      	b.n	8013196 <draw_y_ticks+0x22a>
 8013202:	bf00      	nop
 8013204:	08025128 	.word	0x08025128

08013208 <draw_x_ticks>:
{
 8013208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801320c:	b0ad      	sub	sp, #180	; 0xb4
 801320e:	468a      	mov	sl, r1
    lv_chart_tick_dsc_t * t = get_tick_gsc(obj, axis);
 8013210:	4611      	mov	r1, r2
{
 8013212:	4604      	mov	r4, r0
 8013214:	9205      	str	r2, [sp, #20]
    lv_chart_tick_dsc_t * t = get_tick_gsc(obj, axis);
 8013216:	f7ff fe98 	bl	8012f4a <get_tick_gsc>
    if(t->major_cnt <= 1) return;
 801321a:	8903      	ldrh	r3, [r0, #8]
    lv_chart_tick_dsc_t * t = get_tick_gsc(obj, axis);
 801321c:	4681      	mov	r9, r0
    if(t->major_cnt <= 1) return;
 801321e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8013222:	2b01      	cmp	r3, #1
 8013224:	d93b      	bls.n	801329e <draw_x_ticks+0x96>
    if(!t->label_en && !t->major_len && !t->minor_len) return;
 8013226:	f990 3009 	ldrsb.w	r3, [r0, #9]
 801322a:	2b00      	cmp	r3, #0
 801322c:	db01      	blt.n	8013232 <draw_x_ticks+0x2a>
 801322e:	6803      	ldr	r3, [r0, #0]
 8013230:	b3ab      	cbz	r3, 801329e <draw_x_ticks+0x96>
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 8013232:	2100      	movs	r1, #0
 8013234:	4620      	mov	r0, r4
 8013236:	f7ff fcaf 	bl	8012b98 <lv_obj_get_style_pad_left>
    lv_draw_label_dsc_init(&label_dsc);
 801323a:	af12      	add	r7, sp, #72	; 0x48
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 801323c:	4605      	mov	r5, r0
 801323e:	4620      	mov	r0, r4
 8013240:	f7ff fdb9 	bl	8012db6 <lv_obj_get_style_border_width.constprop.0>
 8013244:	9007      	str	r0, [sp, #28]
    lv_coord_t w     = (lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 8013246:	4620      	mov	r0, r4
 8013248:	f7f1 fe1d 	bl	8004e86 <lv_obj_get_content_width>
 801324c:	9006      	str	r0, [sp, #24]
    lv_draw_label_dsc_init(&label_dsc);
 801324e:	4638      	mov	r0, r7
    lv_coord_t w     = (lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 8013250:	f8b4 6084 	ldrh.w	r6, [r4, #132]	; 0x84
    lv_draw_label_dsc_init(&label_dsc);
 8013254:	f7f7 f964 	bl	800a520 <lv_draw_label_dsc_init>
    lv_obj_init_draw_label_dsc(obj, LV_PART_TICKS, &label_dsc);
 8013258:	463a      	mov	r2, r7
 801325a:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 801325e:	4620      	mov	r0, r4
 8013260:	f7f1 faba 	bl	80047d8 <lv_obj_init_draw_label_dsc>
    lv_coord_t x_ofs = obj->coords.x1 + pad_left - lv_obj_get_scroll_left(obj);
 8013264:	4620      	mov	r0, r4
 8013266:	f9b4 b014 	ldrsh.w	fp, [r4, #20]
 801326a:	f7f2 fea9 	bl	8005fc0 <lv_obj_get_scroll_left>
    if(axis == LV_CHART_AXIS_PRIMARY_X) {
 801326e:	9b05      	ldr	r3, [sp, #20]
    lv_coord_t x_ofs = obj->coords.x1 + pad_left - lv_obj_get_scroll_left(obj);
 8013270:	4680      	mov	r8, r0
    if(axis == LV_CHART_AXIS_PRIMARY_X) {
 8013272:	2b02      	cmp	r3, #2
 8013274:	f999 3009 	ldrsb.w	r3, [r9, #9]
 8013278:	d116      	bne.n	80132a8 <draw_x_ticks+0xa0>
        label_gap = t->label_en ? lv_obj_get_style_pad_bottom(obj, LV_PART_TICKS) : 0;
 801327a:	2b00      	cmp	r3, #0
 801327c:	da12      	bge.n	80132a4 <draw_x_ticks+0x9c>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801327e:	f241 0211 	movw	r2, #4113	; 0x1011
 8013282:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 8013286:	4620      	mov	r0, r4
 8013288:	f7f4 f86e 	bl	8007368 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801328c:	b203      	sxth	r3, r0
        if(y_ofs > clip_area->y2) return;
 801328e:	f9ba 2006 	ldrsh.w	r2, [sl, #6]
        label_gap = t->label_en ? lv_obj_get_style_pad_bottom(obj, LV_PART_TICKS) : 0;
 8013292:	9304      	str	r3, [sp, #16]
        y_ofs = obj->coords.y2;
 8013294:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
        if(y_ofs > clip_area->y2) return;
 8013298:	429a      	cmp	r2, r3
 801329a:	f280 80fd 	bge.w	8013498 <draw_x_ticks+0x290>
}
 801329e:	b02d      	add	sp, #180	; 0xb4
 80132a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        label_gap = t->label_en ? lv_obj_get_style_pad_bottom(obj, LV_PART_TICKS) : 0;
 80132a4:	2300      	movs	r3, #0
 80132a6:	e7f2      	b.n	801328e <draw_x_ticks+0x86>
        label_gap = t->label_en ? lv_obj_get_style_pad_top(obj, LV_PART_TICKS) : 0;
 80132a8:	2b00      	cmp	r3, #0
 80132aa:	f280 80f2 	bge.w	8013492 <draw_x_ticks+0x28a>
 80132ae:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 80132b2:	4620      	mov	r0, r4
 80132b4:	f7ff fc85 	bl	8012bc2 <lv_obj_get_style_pad_top>
 80132b8:	9004      	str	r0, [sp, #16]
        y_ofs = obj->coords.y1;
 80132ba:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
    if(axis == LV_CHART_AXIS_PRIMARY_X) {
 80132be:	9309      	str	r3, [sp, #36]	; 0x24
    lv_coord_t w     = (lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 80132c0:	9b06      	ldr	r3, [sp, #24]
 80132c2:	435e      	muls	r6, r3
 80132c4:	1233      	asrs	r3, r6, #8
 80132c6:	9308      	str	r3, [sp, #32]
 80132c8:	f346 230f 	sbfx	r3, r6, #8, #16
    line_dsc.dash_width = 0;
 80132cc:	2600      	movs	r6, #0
    lv_coord_t w     = (lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 80132ce:	9306      	str	r3, [sp, #24]
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 80132d0:	9b07      	ldr	r3, [sp, #28]
 80132d2:	441d      	add	r5, r3
    lv_coord_t x_ofs = obj->coords.x1 + pad_left - lv_obj_get_scroll_left(obj);
 80132d4:	44ab      	add	fp, r5
    lv_draw_line_dsc_init(&line_dsc);
 80132d6:	ad0f      	add	r5, sp, #60	; 0x3c
 80132d8:	4628      	mov	r0, r5
    lv_coord_t x_ofs = obj->coords.x1 + pad_left - lv_obj_get_scroll_left(obj);
 80132da:	ebab 0808 	sub.w	r8, fp, r8
    lv_draw_line_dsc_init(&line_dsc);
 80132de:	f7f7 fd99 	bl	800ae14 <lv_draw_line_dsc_init>
    lv_obj_init_draw_line_dsc(obj, LV_PART_TICKS, &line_dsc);
 80132e2:	462a      	mov	r2, r5
 80132e4:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 80132e8:	4620      	mov	r0, r4
 80132ea:	f7f1 fb1d 	bl	8004928 <lv_obj_init_draw_line_dsc>
    lv_obj_draw_dsc_init(&dsc, clip_area);
 80132ee:	4651      	mov	r1, sl
 80132f0:	a81a      	add	r0, sp, #104	; 0x68
    line_dsc.dash_width = 0;
 80132f2:	9610      	str	r6, [sp, #64]	; 0x40
    lv_obj_draw_dsc_init(&dsc, clip_area);
 80132f4:	f7f1 fc18 	bl	8004b28 <lv_obj_draw_dsc_init>
    dsc.part = LV_PART_TICKS;
 80132f8:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 80132fc:	2102      	movs	r1, #2
    uint8_t sec_axis = axis == LV_CHART_AXIS_PRIMARY_X ? 0 : 1;
 80132fe:	9b05      	ldr	r3, [sp, #20]
    lv_coord_t x_ofs = obj->coords.x1 + pad_left - lv_obj_get_scroll_left(obj);
 8013300:	fa1f f888 	uxth.w	r8, r8
    dsc.part = LV_PART_TICKS;
 8013304:	e9cd 2127 	strd	r2, r1, [sp, #156]	; 0x9c
    if(chart->type == LV_CHART_TYPE_BAR) {
 8013308:	f894 2088 	ldrb.w	r2, [r4, #136]	; 0x88
    dsc.line_dsc = &line_dsc;
 801330c:	e9cd 751d 	strd	r7, r5, [sp, #116]	; 0x74
    if(chart->type == LV_CHART_TYPE_BAR) {
 8013310:	f002 0207 	and.w	r2, r2, #7
    uint8_t sec_axis = axis == LV_CHART_AXIS_PRIMARY_X ? 0 : 1;
 8013314:	1e9f      	subs	r7, r3, #2
    if(chart->type == LV_CHART_TYPE_BAR) {
 8013316:	9b09      	ldr	r3, [sp, #36]	; 0x24
    uint8_t sec_axis = axis == LV_CHART_AXIS_PRIMARY_X ? 0 : 1;
 8013318:	bf18      	it	ne
 801331a:	2701      	movne	r7, #1
    if(chart->type == LV_CHART_TYPE_BAR) {
 801331c:	2a02      	cmp	r2, #2
 801331e:	f000 80ca 	beq.w	80134b6 <draw_x_ticks+0x2ae>
    lv_coord_t x_ofs = obj->coords.x1 + pad_left - lv_obj_get_scroll_left(obj);
 8013322:	fa0f fb88 	sxth.w	fp, r8
    uint32_t total_tick_num = (t->major_cnt - 1) * t->minor_cnt;
 8013326:	f8b9 6008 	ldrh.w	r6, [r9, #8]
    for(i = 0; i <= total_tick_num; i++) { /*one extra loop - it may not exist in the list, empty label*/
 801332a:	2500      	movs	r5, #0
    p1.y = y_ofs;
 801332c:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
    uint32_t total_tick_num = (t->major_cnt - 1) * t->minor_cnt;
 8013330:	eb04 0847 	add.w	r8, r4, r7, lsl #1
 8013334:	f3c6 060e 	ubfx	r6, r6, #0, #15
 8013338:	1e73      	subs	r3, r6, #1
 801333a:	f8b9 6006 	ldrh.w	r6, [r9, #6]
 801333e:	f3c6 060e 	ubfx	r6, r6, #0, #15
 8013342:	435e      	muls	r6, r3
        if(i % t->minor_cnt == 0) major = true;
 8013344:	f8b9 7006 	ldrh.w	r7, [r9, #6]
        p2.x = p1.x = x_ofs + (int32_t)((int32_t)(w - line_dsc.width) * i) / total_tick_num;
 8013348:	f9bd 203e 	ldrsh.w	r2, [sp, #62]	; 0x3e
        if(i % t->minor_cnt == 0) major = true;
 801334c:	f3c7 030e 	ubfx	r3, r7, #0, #15
        if(sec_axis) p2.y = p1.y - (major ? t->major_len : t->minor_len);
 8013350:	9905      	ldr	r1, [sp, #20]
 8013352:	f8bd 002a 	ldrh.w	r0, [sp, #42]	; 0x2a
 8013356:	2902      	cmp	r1, #2
        if(i % t->minor_cnt == 0) major = true;
 8013358:	fbb5 f7f3 	udiv	r7, r5, r3
 801335c:	fb03 5717 	mls	r7, r3, r7, r5
        p2.x = p1.x = x_ofs + (int32_t)((int32_t)(w - line_dsc.width) * i) / total_tick_num;
 8013360:	9b06      	ldr	r3, [sp, #24]
 8013362:	eba3 0302 	sub.w	r3, r3, r2
 8013366:	fb05 f303 	mul.w	r3, r5, r3
 801336a:	fbb3 f3f6 	udiv	r3, r3, r6
 801336e:	445b      	add	r3, fp
 8013370:	b21b      	sxth	r3, r3
 8013372:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 8013376:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
        if(sec_axis) p2.y = p1.y - (major ? t->major_len : t->minor_len);
 801337a:	f000 80c0 	beq.w	80134fe <draw_x_ticks+0x2f6>
 801337e:	2f00      	cmp	r7, #0
 8013380:	f040 80ba 	bne.w	80134f8 <draw_x_ticks+0x2f0>
 8013384:	f8b9 1000 	ldrh.w	r1, [r9]
 8013388:	1a41      	subs	r1, r0, r1
        if(p1.x + line_dsc.width / 2  >= obj->coords.x1 &&
 801338a:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 801338e:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
        else p2.y = p1.y + (major ? t->major_len : t->minor_len);
 8013392:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
        if(p1.x + line_dsc.width / 2  >= obj->coords.x1 &&
 8013396:	1051      	asrs	r1, r2, #1
 8013398:	eb03 0262 	add.w	r2, r3, r2, asr #1
 801339c:	4282      	cmp	r2, r0
 801339e:	db0a      	blt.n	80133b6 <draw_x_ticks+0x1ae>
           p2.x - line_dsc.width / 2  <= obj->coords.x2)
 80133a0:	1a5b      	subs	r3, r3, r1
 80133a2:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
        if(p1.x + line_dsc.width / 2  >= obj->coords.x1 &&
 80133a6:	4293      	cmp	r3, r2
 80133a8:	dc05      	bgt.n	80133b6 <draw_x_ticks+0x1ae>
            lv_draw_line(&p1, &p2, clip_area, &line_dsc);
 80133aa:	ab0f      	add	r3, sp, #60	; 0x3c
 80133ac:	4652      	mov	r2, sl
 80133ae:	a90b      	add	r1, sp, #44	; 0x2c
 80133b0:	a80a      	add	r0, sp, #40	; 0x28
 80133b2:	f7f7 fd3b 	bl	800ae2c <lv_draw_line>
        if(!major || !t->label_en) continue;
 80133b6:	2f00      	cmp	r7, #0
 80133b8:	d166      	bne.n	8013488 <draw_x_ticks+0x280>
 80133ba:	f999 3009 	ldrsb.w	r3, [r9, #9]
 80133be:	2b00      	cmp	r3, #0
 80133c0:	da62      	bge.n	8013488 <draw_x_ticks+0x280>
        if(chart->type == LV_CHART_TYPE_SCATTER) {
 80133c2:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
 80133c6:	f003 0307 	and.w	r3, r3, #7
 80133ca:	2b03      	cmp	r3, #3
 80133cc:	f040 809f 	bne.w	801350e <draw_x_ticks+0x306>
            tick_value = lv_map(i, 0, total_tick_num, chart->xmin[sec_axis], chart->xmax[sec_axis]);
 80133d0:	f9b8 3078 	ldrsh.w	r3, [r8, #120]	; 0x78
 80133d4:	4639      	mov	r1, r7
 80133d6:	4632      	mov	r2, r6
 80133d8:	4628      	mov	r0, r5
 80133da:	9300      	str	r3, [sp, #0]
 80133dc:	f9b8 3074 	ldrsh.w	r3, [r8, #116]	; 0x74
 80133e0:	f004 f979 	bl	80176d6 <lv_map>
 80133e4:	4607      	mov	r7, r0
        lv_snprintf(dsc.text, sizeof(dsc.text), "%d", tick_value);
 80133e6:	463b      	mov	r3, r7
 80133e8:	4a51      	ldr	r2, [pc, #324]	; (8013530 <draw_x_ticks+0x328>)
 80133ea:	2110      	movs	r1, #16
 80133ec:	a823      	add	r0, sp, #140	; 0x8c
 80133ee:	f004 ffab 	bl	8018348 <lv_snprintf>
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &dsc);
 80133f2:	aa1a      	add	r2, sp, #104	; 0x68
 80133f4:	211a      	movs	r1, #26
 80133f6:	4620      	mov	r0, r4
        dsc.value = tick_value;
 80133f8:	972a      	str	r7, [sp, #168]	; 0xa8
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &dsc);
 80133fa:	f7ee fd65 	bl	8001ec8 <lv_event_send>
        lv_txt_get_size(&size, dsc.text, label_dsc.font, label_dsc.letter_space, label_dsc.line_space, LV_COORD_MAX, LV_TEXT_FLAG_NONE);
 80133fe:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8013402:	2200      	movs	r2, #0
 8013404:	a923      	add	r1, sp, #140	; 0x8c
 8013406:	a80c      	add	r0, sp, #48	; 0x30
 8013408:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801340c:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
 8013410:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013412:	9300      	str	r3, [sp, #0]
 8013414:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	; 0x5c
 8013418:	f006 f89d 	bl	8019556 <lv_txt_get_size>
        a.x1 = (p2.x - size.x / 2);
 801341c:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8013420:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8013424:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
        if(sec_axis) {
 8013428:	9805      	ldr	r0, [sp, #20]
        a.x1 = (p2.x - size.x / 2);
 801342a:	f3c3 034f 	ubfx	r3, r3, #1, #16
        if(sec_axis) {
 801342e:	2802      	cmp	r0, #2
 8013430:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
        a.x1 = (p2.x - size.x / 2);
 8013434:	eba2 0103 	sub.w	r1, r2, r3
        a.x2 = (p2.x + size.x / 2);
 8013438:	441a      	add	r2, r3
 801343a:	f8bd 3010 	ldrh.w	r3, [sp, #16]
        a.x1 = (p2.x - size.x / 2);
 801343e:	b209      	sxth	r1, r1
        a.x2 = (p2.x + size.x / 2);
 8013440:	b212      	sxth	r2, r2
        a.x1 = (p2.x - size.x / 2);
 8013442:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
        a.x2 = (p2.x + size.x / 2);
 8013446:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
        if(sec_axis) {
 801344a:	d067      	beq.n	801351c <draw_x_ticks+0x314>
            a.y2 = p2.y - label_gap;
 801344c:	1ac3      	subs	r3, r0, r3
            a.y1 = a.y2 - size.y;
 801344e:	f8bd 0032 	ldrh.w	r0, [sp, #50]	; 0x32
            a.y2 = p2.y - label_gap;
 8013452:	b29b      	uxth	r3, r3
 8013454:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
            a.y1 = a.y2 - size.y;
 8013458:	1a1b      	subs	r3, r3, r0
 801345a:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
        if(a.x2 >= obj->coords.x1 &&
 801345e:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 8013462:	4293      	cmp	r3, r2
 8013464:	dc0b      	bgt.n	801347e <draw_x_ticks+0x276>
 8013466:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
 801346a:	428b      	cmp	r3, r1
 801346c:	db07      	blt.n	801347e <draw_x_ticks+0x276>
            lv_draw_label(&a, clip_area, &label_dsc, dsc.text, NULL);
 801346e:	2300      	movs	r3, #0
 8013470:	aa12      	add	r2, sp, #72	; 0x48
 8013472:	4651      	mov	r1, sl
 8013474:	a80d      	add	r0, sp, #52	; 0x34
 8013476:	9300      	str	r3, [sp, #0]
 8013478:	ab23      	add	r3, sp, #140	; 0x8c
 801347a:	f7f7 fa29 	bl	800a8d0 <lv_draw_label>
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &dsc);
 801347e:	aa1a      	add	r2, sp, #104	; 0x68
 8013480:	211b      	movs	r1, #27
 8013482:	4620      	mov	r0, r4
 8013484:	f7ee fd20 	bl	8001ec8 <lv_event_send>
    for(i = 0; i <= total_tick_num; i++) { /*one extra loop - it may not exist in the list, empty label*/
 8013488:	3501      	adds	r5, #1
 801348a:	42ae      	cmp	r6, r5
 801348c:	f4bf af5a 	bcs.w	8013344 <draw_x_ticks+0x13c>
 8013490:	e705      	b.n	801329e <draw_x_ticks+0x96>
        label_gap = t->label_en ? lv_obj_get_style_pad_top(obj, LV_PART_TICKS) : 0;
 8013492:	2300      	movs	r3, #0
 8013494:	9304      	str	r3, [sp, #16]
 8013496:	e710      	b.n	80132ba <draw_x_ticks+0xb2>
        if(y_ofs + label_gap  + label_dsc.font->line_height + t->major_len < clip_area->y1) return;
 8013498:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801349a:	9904      	ldr	r1, [sp, #16]
 801349c:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80134a0:	1859      	adds	r1, r3, r1
 80134a2:	440a      	add	r2, r1
 80134a4:	f9b9 1000 	ldrsh.w	r1, [r9]
 80134a8:	440a      	add	r2, r1
 80134aa:	f9ba 1002 	ldrsh.w	r1, [sl, #2]
 80134ae:	428a      	cmp	r2, r1
 80134b0:	f6bf af05 	bge.w	80132be <draw_x_ticks+0xb6>
 80134b4:	e6f3      	b.n	801329e <draw_x_ticks+0x96>
        int32_t block_gap = (lv_obj_get_style_pad_column(obj, LV_PART_MAIN) * chart->zoom_x) >> 8;  /*Gap between the columns on ~adjacent X*/
 80134b6:	4631      	mov	r1, r6
 80134b8:	4620      	mov	r0, r4
 80134ba:	9307      	str	r3, [sp, #28]
 80134bc:	f7ff fb7a 	bl	8012bb4 <lv_obj_get_style_pad_column>
 80134c0:	f8b4 2084 	ldrh.w	r2, [r4, #132]	; 0x84
        lv_coord_t block_w = (w + block_gap) / (chart->point_cnt);
 80134c4:	9b06      	ldr	r3, [sp, #24]
        int32_t block_gap = (lv_obj_get_style_pad_column(obj, LV_PART_MAIN) * chart->zoom_x) >> 8;  /*Gap between the columns on ~adjacent X*/
 80134c6:	4350      	muls	r0, r2
        lv_coord_t block_w = (w + block_gap) / (chart->point_cnt);
 80134c8:	f8b4 2082 	ldrh.w	r2, [r4, #130]	; 0x82
 80134cc:	eb03 2620 	add.w	r6, r3, r0, asr #8
        w -= block_w - block_gap;
 80134d0:	9b08      	ldr	r3, [sp, #32]
        lv_coord_t block_w = (w + block_gap) / (chart->point_cnt);
 80134d2:	fb96 f6f2 	sdiv	r6, r6, r2
        x_ofs += (block_w - block_gap) / 2;
 80134d6:	fa0f fb86 	sxth.w	fp, r6
 80134da:	ebab 2b20 	sub.w	fp, fp, r0, asr #8
        w -= block_w - block_gap;
 80134de:	eb03 2020 	add.w	r0, r3, r0, asr #8
        x_ofs += (block_w - block_gap) / 2;
 80134e2:	eb0b 7bdb 	add.w	fp, fp, fp, lsr #31
        w -= block_w - block_gap;
 80134e6:	1b86      	subs	r6, r0, r6
        x_ofs += (block_w - block_gap) / 2;
 80134e8:	eb08 0b6b 	add.w	fp, r8, fp, asr #1
        w -= block_w - block_gap;
 80134ec:	b233      	sxth	r3, r6
        x_ofs += (block_w - block_gap) / 2;
 80134ee:	fa0f fb8b 	sxth.w	fp, fp
        w -= block_w - block_gap;
 80134f2:	9306      	str	r3, [sp, #24]
 80134f4:	9b07      	ldr	r3, [sp, #28]
 80134f6:	e716      	b.n	8013326 <draw_x_ticks+0x11e>
        if(sec_axis) p2.y = p1.y - (major ? t->major_len : t->minor_len);
 80134f8:	f8b9 1002 	ldrh.w	r1, [r9, #2]
 80134fc:	e744      	b.n	8013388 <draw_x_ticks+0x180>
        else p2.y = p1.y + (major ? t->major_len : t->minor_len);
 80134fe:	b91f      	cbnz	r7, 8013508 <draw_x_ticks+0x300>
 8013500:	f8b9 1000 	ldrh.w	r1, [r9]
 8013504:	4401      	add	r1, r0
 8013506:	e740      	b.n	801338a <draw_x_ticks+0x182>
 8013508:	f8b9 1002 	ldrh.w	r1, [r9, #2]
 801350c:	e7fa      	b.n	8013504 <draw_x_ticks+0x2fc>
            tick_value = i / t->minor_cnt;
 801350e:	f8b9 7006 	ldrh.w	r7, [r9, #6]
 8013512:	f3c7 070e 	ubfx	r7, r7, #0, #15
 8013516:	fbb5 f7f7 	udiv	r7, r5, r7
 801351a:	e764      	b.n	80133e6 <draw_x_ticks+0x1de>
            a.y1 = p2.y + label_gap;
 801351c:	4403      	add	r3, r0
            a.y2 = a.y1 + size.y;
 801351e:	f8bd 0032 	ldrh.w	r0, [sp, #50]	; 0x32
            a.y1 = p2.y + label_gap;
 8013522:	b29b      	uxth	r3, r3
 8013524:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
            a.y2 = a.y1 + size.y;
 8013528:	4403      	add	r3, r0
 801352a:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801352e:	e796      	b.n	801345e <draw_x_ticks+0x256>
 8013530:	08025128 	.word	0x08025128

08013534 <lv_chart_event>:
{
 8013534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    res = lv_obj_event_base(MY_CLASS, e);
 8013538:	4856      	ldr	r0, [pc, #344]	; (8013694 <lv_chart_event+0x160>)
{
 801353a:	460d      	mov	r5, r1
 801353c:	ed2d 8b04 	vpush	{d8-d9}
 8013540:	b0cd      	sub	sp, #308	; 0x134
    res = lv_obj_event_base(MY_CLASS, e);
 8013542:	f7ee fc49 	bl	8001dd8 <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 8013546:	2801      	cmp	r0, #1
 8013548:	d147      	bne.n	80135da <lv_chart_event+0xa6>
    lv_event_code_t code = lv_event_get_code(e);
 801354a:	4628      	mov	r0, r5
 801354c:	f7ee fcde 	bl	8001f0c <lv_event_get_code>
 8013550:	4604      	mov	r4, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8013552:	4628      	mov	r0, r5
 8013554:	f7ee fcd8 	bl	8001f08 <lv_event_get_target>
    if(code == LV_EVENT_PRESSED) {
 8013558:	2c01      	cmp	r4, #1
    lv_obj_t * obj = lv_event_get_target(e);
 801355a:	4680      	mov	r8, r0
    if(code == LV_EVENT_PRESSED) {
 801355c:	d15b      	bne.n	8013616 <lv_chart_event+0xe2>
        lv_indev_t * indev = lv_indev_get_act();
 801355e:	f7ee ff49 	bl	80023f4 <lv_indev_get_act>
        lv_indev_get_point(indev, &p);
 8013562:	a93a      	add	r1, sp, #232	; 0xe8
 8013564:	f7ee ffa7 	bl	80024b6 <lv_indev_get_point>
        p.x -= obj->coords.x1;
 8013568:	f8b8 0014 	ldrh.w	r0, [r8, #20]
 801356c:	f8bd 40e8 	ldrh.w	r4, [sp, #232]	; 0xe8
 8013570:	1a24      	subs	r4, r4, r0
        uint32_t id = get_index_from_x(obj, p.x + lv_obj_get_scroll_left(obj));
 8013572:	4640      	mov	r0, r8
        p.x -= obj->coords.x1;
 8013574:	b2a4      	uxth	r4, r4
 8013576:	f8ad 40e8 	strh.w	r4, [sp, #232]	; 0xe8
        uint32_t id = get_index_from_x(obj, p.x + lv_obj_get_scroll_left(obj));
 801357a:	f7f2 fd21 	bl	8005fc0 <lv_obj_get_scroll_left>
 801357e:	4420      	add	r0, r4
 8013580:	b285      	uxth	r5, r0
    lv_coord_t w = (lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 8013582:	4640      	mov	r0, r8
 8013584:	f7f1 fc7f 	bl	8004e86 <lv_obj_get_content_width>
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 8013588:	2100      	movs	r1, #0
    lv_coord_t w = (lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 801358a:	4606      	mov	r6, r0
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 801358c:	4640      	mov	r0, r8
    lv_coord_t w = (lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 801358e:	f8b8 4084 	ldrh.w	r4, [r8, #132]	; 0x84
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 8013592:	f7ff fb01 	bl	8012b98 <lv_obj_get_style_pad_left>
    x-= pad_left;
 8013596:	1a2b      	subs	r3, r5, r0
 8013598:	b21b      	sxth	r3, r3
    if(x < 0) return 0;
 801359a:	2b00      	cmp	r3, #0
 801359c:	db39      	blt.n	8013612 <lv_chart_event+0xde>
    lv_coord_t w = (lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 801359e:	fb04 f006 	mul.w	r0, r4, r6
 80135a2:	f340 210f 	sbfx	r1, r0, #8, #16
    if(x > w) return chart->point_cnt - 1;
 80135a6:	4299      	cmp	r1, r3
 80135a8:	da1c      	bge.n	80135e4 <lv_chart_event+0xb0>
 80135aa:	f8b8 1082 	ldrh.w	r1, [r8, #130]	; 0x82
 80135ae:	3901      	subs	r1, #1
        if(id != chart->pressed_point_id) {
 80135b0:	f8b8 307c 	ldrh.w	r3, [r8, #124]	; 0x7c
 80135b4:	428b      	cmp	r3, r1
 80135b6:	d010      	beq.n	80135da <lv_chart_event+0xa6>
            invalidate_point(obj, id);
 80135b8:	b28c      	uxth	r4, r1
 80135ba:	4640      	mov	r0, r8
 80135bc:	4621      	mov	r1, r4
 80135be:	f7ff fb4b 	bl	8012c58 <invalidate_point>
            invalidate_point(obj, chart->pressed_point_id);
 80135c2:	f8b8 107c 	ldrh.w	r1, [r8, #124]	; 0x7c
 80135c6:	4640      	mov	r0, r8
 80135c8:	f7ff fb46 	bl	8012c58 <invalidate_point>
            lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 80135cc:	2200      	movs	r2, #0
 80135ce:	211c      	movs	r1, #28
 80135d0:	4640      	mov	r0, r8
            chart->pressed_point_id = id;
 80135d2:	f8a8 407c 	strh.w	r4, [r8, #124]	; 0x7c
            lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 80135d6:	f7ee fc77 	bl	8001ec8 <lv_event_send>
}
 80135da:	b04d      	add	sp, #308	; 0x134
 80135dc:	ecbd 8b04 	vpop	{d8-d9}
 80135e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(chart->type == LV_CHART_TYPE_LINE) return (x * (chart->point_cnt - 1) + w / 2) / w;
 80135e4:	f898 2088 	ldrb.w	r2, [r8, #136]	; 0x88
 80135e8:	f002 0207 	and.w	r2, r2, #7
 80135ec:	2a01      	cmp	r2, #1
 80135ee:	d108      	bne.n	8013602 <lv_chart_event+0xce>
 80135f0:	f8b8 0082 	ldrh.w	r0, [r8, #130]	; 0x82
 80135f4:	104a      	asrs	r2, r1, #1
 80135f6:	3801      	subs	r0, #1
 80135f8:	fb03 2300 	mla	r3, r3, r0, r2
 80135fc:	fb93 f1f1 	sdiv	r1, r3, r1
 8013600:	e7d6      	b.n	80135b0 <lv_chart_event+0x7c>
    if(chart->type == LV_CHART_TYPE_BAR) return (x * chart->point_cnt) / w;
 8013602:	2a02      	cmp	r2, #2
 8013604:	d105      	bne.n	8013612 <lv_chart_event+0xde>
 8013606:	f8b8 0082 	ldrh.w	r0, [r8, #130]	; 0x82
 801360a:	4343      	muls	r3, r0
 801360c:	fbb3 f1f1 	udiv	r1, r3, r1
 8013610:	e7ce      	b.n	80135b0 <lv_chart_event+0x7c>
    if(x < 0) return 0;
 8013612:	2100      	movs	r1, #0
 8013614:	e7cc      	b.n	80135b0 <lv_chart_event+0x7c>
    } else if(code == LV_EVENT_RELEASED) {
 8013616:	2c08      	cmp	r4, #8
 8013618:	d108      	bne.n	801362c <lv_chart_event+0xf8>
        invalidate_point(obj, chart->pressed_point_id);
 801361a:	f8b0 107c 	ldrh.w	r1, [r0, #124]	; 0x7c
 801361e:	f7ff fb1b 	bl	8012c58 <invalidate_point>
        chart->pressed_point_id = LV_CHART_POINT_NONE;
 8013622:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8013626:	f8a8 307c 	strh.w	r3, [r8, #124]	; 0x7c
 801362a:	e7d6      	b.n	80135da <lv_chart_event+0xa6>
    } else if(code == LV_EVENT_SIZE_CHANGED) {
 801362c:	2c23      	cmp	r4, #35	; 0x23
 801362e:	d102      	bne.n	8013636 <lv_chart_event+0x102>
        lv_obj_refresh_self_size(obj);
 8013630:	f7f1 fcad 	bl	8004f8e <lv_obj_refresh_self_size>
 8013634:	e7d1      	b.n	80135da <lv_chart_event+0xa6>
    } else if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 8013636:	2c13      	cmp	r4, #19
 8013638:	d114      	bne.n	8013664 <lv_chart_event+0x130>
        lv_event_set_ext_draw_size(e, LV_MAX4(chart->tick[0].draw_size, chart->tick[1].draw_size, chart->tick[2].draw_size, chart->tick[3].draw_size));
 801363a:	f9b0 1064 	ldrsh.w	r1, [r0, #100]	; 0x64
 801363e:	f9b0 3058 	ldrsh.w	r3, [r0, #88]	; 0x58
 8013642:	4299      	cmp	r1, r3
 8013644:	bfb8      	it	lt
 8013646:	4619      	movlt	r1, r3
 8013648:	f9b0 304c 	ldrsh.w	r3, [r0, #76]	; 0x4c
 801364c:	4299      	cmp	r1, r3
 801364e:	bfb8      	it	lt
 8013650:	4619      	movlt	r1, r3
 8013652:	f9b0 3040 	ldrsh.w	r3, [r0, #64]	; 0x40
 8013656:	4628      	mov	r0, r5
 8013658:	4299      	cmp	r1, r3
 801365a:	bfb8      	it	lt
 801365c:	4619      	movlt	r1, r3
 801365e:	f7ee fc95 	bl	8001f8c <lv_event_set_ext_draw_size>
 8013662:	e7ba      	b.n	80135da <lv_chart_event+0xa6>
    } else if(code == LV_EVENT_GET_SELF_SIZE) {
 8013664:	2c26      	cmp	r4, #38	; 0x26
 8013666:	d117      	bne.n	8013698 <lv_chart_event+0x164>
        lv_point_t * p = lv_event_get_param(e);
 8013668:	4628      	mov	r0, r5
 801366a:	f7ee fc51 	bl	8001f10 <lv_event_get_param>
 801366e:	4604      	mov	r4, r0
        p->x = (lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 8013670:	4640      	mov	r0, r8
 8013672:	f7f1 fc08 	bl	8004e86 <lv_obj_get_content_width>
 8013676:	f8b8 3084 	ldrh.w	r3, [r8, #132]	; 0x84
 801367a:	4343      	muls	r3, r0
        p->y = (lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 801367c:	4640      	mov	r0, r8
        p->x = (lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 801367e:	121b      	asrs	r3, r3, #8
 8013680:	8023      	strh	r3, [r4, #0]
        p->y = (lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 8013682:	f7f1 fc1a 	bl	8004eba <lv_obj_get_content_height>
 8013686:	f8b8 3086 	ldrh.w	r3, [r8, #134]	; 0x86
 801368a:	4343      	muls	r3, r0
 801368c:	121b      	asrs	r3, r3, #8
 801368e:	8063      	strh	r3, [r4, #2]
 8013690:	e7a3      	b.n	80135da <lv_chart_event+0xa6>
 8013692:	bf00      	nop
 8013694:	08025178 	.word	0x08025178
    } else if(code == LV_EVENT_DRAW_MAIN) {
 8013698:	2c15      	cmp	r4, #21
 801369a:	d19e      	bne.n	80135da <lv_chart_event+0xa6>
        const lv_area_t * clip_area = lv_event_get_param(e);
 801369c:	4628      	mov	r0, r5
 801369e:	f7ee fc37 	bl	8001f10 <lv_event_get_param>
    bool mask_ret = _lv_area_intersect(&series_mask, &obj->coords, clip_area);
 80136a2:	f108 0314 	add.w	r3, r8, #20
        const lv_area_t * clip_area = lv_event_get_param(e);
 80136a6:	ee08 0a10 	vmov	s16, r0
    bool mask_ret = _lv_area_intersect(&series_mask, &obj->coords, clip_area);
 80136aa:	4602      	mov	r2, r0
 80136ac:	4619      	mov	r1, r3
 80136ae:	a820      	add	r0, sp, #128	; 0x80
 80136b0:	ee08 3a90 	vmov	s17, r3
 80136b4:	f003 fbef 	bl	8016e96 <_lv_area_intersect>
    if(mask_ret == false) return;
 80136b8:	2800      	cmp	r0, #0
 80136ba:	f040 81be 	bne.w	8013a3a <lv_chart_event+0x506>
    draw_y_ticks(obj, mask, LV_CHART_AXIS_PRIMARY_Y);
 80136be:	2200      	movs	r2, #0
 80136c0:	ee18 1a10 	vmov	r1, s16
 80136c4:	4640      	mov	r0, r8
 80136c6:	f7ff fc51 	bl	8012f6c <draw_y_ticks>
    draw_y_ticks(obj, mask, LV_CHART_AXIS_SECONDARY_Y);
 80136ca:	2201      	movs	r2, #1
 80136cc:	ee18 1a10 	vmov	r1, s16
 80136d0:	4640      	mov	r0, r8
 80136d2:	f7ff fc4b 	bl	8012f6c <draw_y_ticks>
    draw_x_ticks(obj, mask, LV_CHART_AXIS_PRIMARY_X);
 80136d6:	2202      	movs	r2, #2
 80136d8:	ee18 1a10 	vmov	r1, s16
 80136dc:	4640      	mov	r0, r8
 80136de:	f7ff fd93 	bl	8013208 <draw_x_ticks>
    draw_x_ticks(obj, mask, LV_CHART_AXIS_SECONDARY_X);
 80136e2:	2204      	movs	r2, #4
 80136e4:	ee18 1a10 	vmov	r1, s16
 80136e8:	4640      	mov	r0, r8
 80136ea:	f7ff fd8d 	bl	8013208 <draw_x_ticks>
        if(chart->type == LV_CHART_TYPE_LINE) draw_series_line(obj, clip_area);
 80136ee:	f898 3088 	ldrb.w	r3, [r8, #136]	; 0x88
 80136f2:	f003 0307 	and.w	r3, r3, #7
 80136f6:	2b01      	cmp	r3, #1
 80136f8:	f040 8425 	bne.w	8013f46 <lv_chart_event+0xa12>
    if(_lv_area_intersect(&com_area, &obj->coords, clip_area) == false) return;
 80136fc:	ee18 2a10 	vmov	r2, s16
 8013700:	ee18 1a90 	vmov	r1, s17
 8013704:	a818      	add	r0, sp, #96	; 0x60
 8013706:	f003 fbc6 	bl	8016e96 <_lv_area_intersect>
 801370a:	2800      	cmp	r0, #0
 801370c:	f000 80a4 	beq.w	8013858 <lv_chart_event+0x324>
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 8013710:	4640      	mov	r0, r8
 8013712:	f7ff fb50 	bl	8012db6 <lv_obj_get_style_border_width.constprop.0>
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 8013716:	2100      	movs	r1, #0
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 8013718:	4604      	mov	r4, r0
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 801371a:	4640      	mov	r0, r8
 801371c:	f7ff fa3c 	bl	8012b98 <lv_obj_get_style_pad_left>
    lv_coord_t pad_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + border_width;
 8013720:	2100      	movs	r1, #0
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 8013722:	4605      	mov	r5, r0
    lv_coord_t pad_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + border_width;
 8013724:	4640      	mov	r0, r8
 8013726:	f7ff fa4c 	bl	8012bc2 <lv_obj_get_style_pad_top>
 801372a:	4683      	mov	fp, r0
    lv_coord_t w     = (lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 801372c:	4640      	mov	r0, r8
 801372e:	f7f1 fbaa 	bl	8004e86 <lv_obj_get_content_width>
 8013732:	f8b8 3084 	ldrh.w	r3, [r8, #132]	; 0x84
 8013736:	9004      	str	r0, [sp, #16]
    lv_coord_t h     = (lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 8013738:	4640      	mov	r0, r8
    lv_coord_t w     = (lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 801373a:	9305      	str	r3, [sp, #20]
    lv_coord_t h     = (lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 801373c:	f7f1 fbbd 	bl	8004eba <lv_obj_get_content_height>
 8013740:	9007      	str	r0, [sp, #28]
    lv_coord_t x_ofs = obj->coords.x1 + pad_left - lv_obj_get_scroll_left(obj);
 8013742:	4640      	mov	r0, r8
    lv_coord_t h     = (lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 8013744:	f8b8 6086 	ldrh.w	r6, [r8, #134]	; 0x86
    lv_coord_t x_ofs = obj->coords.x1 + pad_left - lv_obj_get_scroll_left(obj);
 8013748:	f9b8 9014 	ldrsh.w	r9, [r8, #20]
 801374c:	f7f2 fc38 	bl	8005fc0 <lv_obj_get_scroll_left>
    lv_coord_t y_ofs = obj->coords.y1 + pad_top - lv_obj_get_scroll_top(obj);
 8013750:	f9b8 3016 	ldrsh.w	r3, [r8, #22]
    lv_coord_t x_ofs = obj->coords.x1 + pad_left - lv_obj_get_scroll_left(obj);
 8013754:	4607      	mov	r7, r0
    lv_coord_t y_ofs = obj->coords.y1 + pad_top - lv_obj_get_scroll_top(obj);
 8013756:	4640      	mov	r0, r8
 8013758:	9308      	str	r3, [sp, #32]
 801375a:	f7f2 fbdb 	bl	8005f14 <lv_obj_get_scroll_top>
    bool mask_ret = _lv_area_intersect(&series_mask, &obj->coords, clip_area);
 801375e:	ee18 2a10 	vmov	r2, s16
    lv_coord_t y_ofs = obj->coords.y1 + pad_top - lv_obj_get_scroll_top(obj);
 8013762:	4682      	mov	sl, r0
    bool mask_ret = _lv_area_intersect(&series_mask, &obj->coords, clip_area);
 8013764:	ee18 1a90 	vmov	r1, s17
 8013768:	a81a      	add	r0, sp, #104	; 0x68
 801376a:	f003 fb94 	bl	8016e96 <_lv_area_intersect>
    if(mask_ret == false) return;
 801376e:	2800      	cmp	r0, #0
 8013770:	d072      	beq.n	8013858 <lv_chart_event+0x324>
    lv_draw_line_dsc_init(&line_dsc_default);
 8013772:	a820      	add	r0, sp, #128	; 0x80
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 8013774:	fa15 f584 	uxtah	r5, r5, r4
    lv_draw_line_dsc_init(&line_dsc_default);
 8013778:	f7f7 fb4c 	bl	800ae14 <lv_draw_line_dsc_init>
    lv_obj_init_draw_line_dsc(obj, LV_PART_ITEMS, &line_dsc_default);
 801377c:	aa20      	add	r2, sp, #128	; 0x80
 801377e:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8013782:	4640      	mov	r0, r8
 8013784:	f7f1 f8d0 	bl	8004928 <lv_obj_init_draw_line_dsc>
    lv_draw_rect_dsc_init(&point_dsc_default);
 8013788:	a82d      	add	r0, sp, #180	; 0xb4
 801378a:	f7f9 f97d 	bl	800ca88 <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(obj, LV_PART_INDICATOR, &point_dsc_default);
 801378e:	aa2d      	add	r2, sp, #180	; 0xb4
 8013790:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8013794:	4640      	mov	r0, r8
 8013796:	f7f0 fee3 	bl	8004560 <lv_obj_init_draw_rect_dsc>
    lv_coord_t point_w = lv_obj_get_style_width(obj, LV_PART_INDICATOR) / 2;
 801379a:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 801379e:	4640      	mov	r0, r8
    lv_coord_t x_ofs = obj->coords.x1 + pad_left - lv_obj_get_scroll_left(obj);
 80137a0:	44a9      	add	r9, r5
    lv_coord_t point_w = lv_obj_get_style_width(obj, LV_PART_INDICATOR) / 2;
 80137a2:	f7ff fa00 	bl	8012ba6 <lv_obj_get_style_width>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 80137a6:	f241 0204 	movw	r2, #4100	; 0x1004
 80137aa:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80137ae:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    lv_coord_t x_ofs = obj->coords.x1 + pad_left - lv_obj_get_scroll_left(obj);
 80137b2:	eba9 0707 	sub.w	r7, r9, r7
    lv_coord_t pad_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + border_width;
 80137b6:	fa1b f484 	uxtah	r4, fp, r4
    lv_coord_t point_w = lv_obj_get_style_width(obj, LV_PART_INDICATOR) / 2;
 80137ba:	f340 034f 	sbfx	r3, r0, #1, #16
 80137be:	4640      	mov	r0, r8
                    dsc.p1 = ser->y_points[p_prev] != LV_CHART_POINT_NONE ? &p1 : NULL;
 80137c0:	f647 79ff 	movw	r9, #32767	; 0x7fff
    lv_coord_t point_w = lv_obj_get_style_width(obj, LV_PART_INDICATOR) / 2;
 80137c4:	9303      	str	r3, [sp, #12]
 80137c6:	f7f3 fdcf 	bl	8007368 <lv_obj_get_style_prop>
    lv_coord_t point_h = lv_obj_get_style_height(obj, LV_PART_INDICATOR) / 2;
 80137ca:	f3c0 33c0 	ubfx	r3, r0, #15, #1
    if(LV_MIN(point_w, point_h) > line_dsc_default.width / 2) line_dsc_default.raw_end = 1;
 80137ce:	9a03      	ldr	r2, [sp, #12]
    lv_coord_t point_h = lv_obj_get_style_height(obj, LV_PART_INDICATOR) / 2;
 80137d0:	fa03 f080 	sxtah	r0, r3, r0
 80137d4:	1043      	asrs	r3, r0, #1
 80137d6:	9306      	str	r3, [sp, #24]
    if(LV_MIN(point_w, point_h) > line_dsc_default.width / 2) line_dsc_default.raw_end = 1;
 80137d8:	9906      	ldr	r1, [sp, #24]
 80137da:	f9bd 3082 	ldrsh.w	r3, [sp, #130]	; 0x82
 80137de:	428a      	cmp	r2, r1
 80137e0:	bfa8      	it	ge
 80137e2:	460a      	movge	r2, r1
 80137e4:	eb03 71d3 	add.w	r1, r3, r3, lsr #31
 80137e8:	b212      	sxth	r2, r2
 80137ea:	ebb2 0f61 	cmp.w	r2, r1, asr #1
 80137ee:	bfc2      	ittt	gt
 80137f0:	f89d 2089 	ldrbgt.w	r2, [sp, #137]	; 0x89
 80137f4:	f042 0210 	orrgt.w	r2, r2, #16
 80137f8:	f88d 2089 	strbgt.w	r2, [sp, #137]	; 0x89
    if(line_dsc_default.width == 1) line_dsc_default.raw_end = 1;
 80137fc:	2b01      	cmp	r3, #1
 80137fe:	bf02      	ittt	eq
 8013800:	f89d 3089 	ldrbeq.w	r3, [sp, #137]	; 0x89
 8013804:	f043 0310 	orreq.w	r3, r3, #16
 8013808:	f88d 3089 	strbeq.w	r3, [sp, #137]	; 0x89
    lv_coord_t h     = (lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 801380c:	9b07      	ldr	r3, [sp, #28]
 801380e:	435e      	muls	r6, r3
 8013810:	1233      	asrs	r3, r6, #8
 8013812:	9310      	str	r3, [sp, #64]	; 0x40
 8013814:	f346 230f 	sbfx	r3, r6, #8, #16
 8013818:	9309      	str	r3, [sp, #36]	; 0x24
    lv_coord_t x_ofs = obj->coords.x1 + pad_left - lv_obj_get_scroll_left(obj);
 801381a:	b2bb      	uxth	r3, r7
 801381c:	9311      	str	r3, [sp, #68]	; 0x44
 801381e:	b23b      	sxth	r3, r7
 8013820:	930a      	str	r3, [sp, #40]	; 0x28
    lv_coord_t y_ofs = obj->coords.y1 + pad_top - lv_obj_get_scroll_top(obj);
 8013822:	9b08      	ldr	r3, [sp, #32]
 8013824:	441c      	add	r4, r3
 8013826:	eba4 0a0a 	sub.w	sl, r4, sl
 801382a:	fa1f f38a 	uxth.w	r3, sl
 801382e:	9312      	str	r3, [sp, #72]	; 0x48
    bool crowded_mode = chart->point_cnt >= w ? true : false;
 8013830:	f8b8 3082 	ldrh.w	r3, [r8, #130]	; 0x82
 8013834:	930b      	str	r3, [sp, #44]	; 0x2c
    lv_coord_t w     = (lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 8013836:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
 801383a:	4358      	muls	r0, r3
    bool crowded_mode = chart->point_cnt >= w ? true : false;
 801383c:	f340 230f 	sbfx	r3, r0, #8, #16
 8013840:	9308      	str	r3, [sp, #32]
    _LV_LL_READ_BACK(&chart->series_ll, ser) {
 8013842:	f108 0324 	add.w	r3, r8, #36	; 0x24
 8013846:	4618      	mov	r0, r3
 8013848:	ee09 3a10 	vmov	s18, r3
 801384c:	f003 fe72 	bl	8017534 <_lv_ll_get_tail>
 8013850:	4604      	mov	r4, r0
 8013852:	2c00      	cmp	r4, #0
 8013854:	f040 820d 	bne.w	8013c72 <lv_chart_event+0x73e>
    if(_lv_ll_is_empty(&chart->cursor_ll)) return;
 8013858:	f108 0b30 	add.w	fp, r8, #48	; 0x30
 801385c:	4658      	mov	r0, fp
 801385e:	f003 fe80 	bl	8017562 <_lv_ll_is_empty>
 8013862:	2800      	cmp	r0, #0
 8013864:	f47f aeb9 	bne.w	80135da <lv_chart_event+0xa6>
    lv_draw_line_dsc_init(&line_dsc_ori);
 8013868:	ae1a      	add	r6, sp, #104	; 0x68
    dsc.line_dsc = &line_dsc_tmp;
 801386a:	af1d      	add	r7, sp, #116	; 0x74
    lv_draw_line_dsc_init(&line_dsc_ori);
 801386c:	4630      	mov	r0, r6
 801386e:	f7f7 fad1 	bl	800ae14 <lv_draw_line_dsc_init>
    lv_obj_init_draw_line_dsc(obj, LV_PART_CURSOR, &line_dsc_ori);
 8013872:	4632      	mov	r2, r6
 8013874:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 8013878:	4640      	mov	r0, r8
 801387a:	f7f1 f855 	bl	8004928 <lv_obj_init_draw_line_dsc>
    lv_draw_rect_dsc_init(&point_dsc_ori);
 801387e:	a820      	add	r0, sp, #128	; 0x80
 8013880:	f7f9 f902 	bl	800ca88 <lv_draw_rect_dsc_init>
    point_dsc_ori.bg_opa = line_dsc_ori.opa;
 8013884:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
    lv_coord_t point_w = lv_obj_get_style_width(obj, LV_PART_CURSOR) / 2;
 8013888:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 801388c:	4640      	mov	r0, r8
    point_dsc_ori.bg_opa = line_dsc_ori.opa;
 801388e:	f88d 308a 	strb.w	r3, [sp, #138]	; 0x8a
    point_dsc_ori.radius = LV_RADIUS_CIRCLE;
 8013892:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8013896:	f8ad 3080 	strh.w	r3, [sp, #128]	; 0x80
    lv_coord_t point_w = lv_obj_get_style_width(obj, LV_PART_CURSOR) / 2;
 801389a:	f7ff f984 	bl	8012ba6 <lv_obj_get_style_width>
 801389e:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    lv_coord_t point_h = lv_obj_get_style_width(obj, LV_PART_CURSOR) / 2;
 80138a2:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
    lv_coord_t point_w = lv_obj_get_style_width(obj, LV_PART_CURSOR) / 2;
 80138a6:	f340 034f 	sbfx	r3, r0, #1, #16
    lv_coord_t point_h = lv_obj_get_style_width(obj, LV_PART_CURSOR) / 2;
 80138aa:	4640      	mov	r0, r8
    lv_coord_t point_w = lv_obj_get_style_width(obj, LV_PART_CURSOR) / 2;
 80138ac:	9303      	str	r3, [sp, #12]
    lv_coord_t point_h = lv_obj_get_style_width(obj, LV_PART_CURSOR) / 2;
 80138ae:	f7ff f97a 	bl	8012ba6 <lv_obj_get_style_width>
 80138b2:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    lv_obj_draw_dsc_init(&dsc, clip_area);
 80138b6:	ee18 1a10 	vmov	r1, s16
    lv_coord_t point_h = lv_obj_get_style_width(obj, LV_PART_CURSOR) / 2;
 80138ba:	f340 034f 	sbfx	r3, r0, #1, #16
    lv_obj_draw_dsc_init(&dsc, clip_area);
 80138be:	a83a      	add	r0, sp, #232	; 0xe8
    lv_coord_t point_h = lv_obj_get_style_width(obj, LV_PART_CURSOR) / 2;
 80138c0:	9304      	str	r3, [sp, #16]
    lv_obj_draw_dsc_init(&dsc, clip_area);
 80138c2:	f7f1 f931 	bl	8004b28 <lv_obj_draw_dsc_init>
    dsc.rect_dsc = &point_dsc_tmp;
 80138c6:	ab2d      	add	r3, sp, #180	; 0xb4
    _lv_area_intersect(&clip_area2, clip_area, &obj->coords);
 80138c8:	ee18 1a10 	vmov	r1, s16
 80138cc:	ee18 2a90 	vmov	r2, s17
 80138d0:	a816      	add	r0, sp, #88	; 0x58
    dsc.rect_dsc = &point_dsc_tmp;
 80138d2:	933c      	str	r3, [sp, #240]	; 0xf0
    dsc.part = LV_PART_CURSOR;
 80138d4:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
    dsc.line_dsc = &line_dsc_tmp;
 80138d8:	973e      	str	r7, [sp, #248]	; 0xf8
        lv_memcpy(&line_dsc_tmp, &line_dsc_ori, sizeof(lv_draw_line_dsc_t));
 80138da:	ee08 6a10 	vmov	s16, r6
    dsc.part = LV_PART_CURSOR;
 80138de:	9347      	str	r3, [sp, #284]	; 0x11c
    _lv_area_intersect(&clip_area2, clip_area, &obj->coords);
 80138e0:	f003 fad9 	bl	8016e96 <_lv_area_intersect>
    _LV_LL_READ_BACK(&chart->cursor_ll, cursor) {
 80138e4:	4658      	mov	r0, fp
 80138e6:	f003 fe25 	bl	8017534 <_lv_ll_get_tail>
 80138ea:	4604      	mov	r4, r0
 80138ec:	2c00      	cmp	r4, #0
 80138ee:	f43f ae74 	beq.w	80135da <lv_chart_event+0xa6>
        lv_memcpy(&line_dsc_tmp, &line_dsc_ori, sizeof(lv_draw_line_dsc_t));
 80138f2:	220a      	movs	r2, #10
 80138f4:	ee18 1a10 	vmov	r1, s16
 80138f8:	4638      	mov	r0, r7
 80138fa:	f003 ff55 	bl	80177a8 <lv_memcpy>
        lv_memcpy(&point_dsc_tmp, &point_dsc_ori, sizeof(lv_draw_rect_dsc_t));
 80138fe:	2234      	movs	r2, #52	; 0x34
 8013900:	a920      	add	r1, sp, #128	; 0x80
 8013902:	a82d      	add	r0, sp, #180	; 0xb4
 8013904:	f003 ff50 	bl	80177a8 <lv_memcpy>
        line_dsc_tmp.color = cursor->color;
 8013908:	88e3      	ldrh	r3, [r4, #6]
 801390a:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
        point_dsc_tmp.bg_color = cursor->color;
 801390e:	88e3      	ldrh	r3, [r4, #6]
 8013910:	f8ad 30b8 	strh.w	r3, [sp, #184]	; 0xb8
        dsc.p1 = &p1;
 8013914:	ab14      	add	r3, sp, #80	; 0x50
 8013916:	9341      	str	r3, [sp, #260]	; 0x104
        dsc.p2 = &p2;
 8013918:	ab15      	add	r3, sp, #84	; 0x54
 801391a:	9342      	str	r3, [sp, #264]	; 0x108
        if(cursor->pos_set) {
 801391c:	7b63      	ldrb	r3, [r4, #13]
 801391e:	07dd      	lsls	r5, r3, #31
 8013920:	f140 8616 	bpl.w	8014550 <lv_chart_event+0x101c>
            cx = cursor->pos.x;
 8013924:	f9b4 6000 	ldrsh.w	r6, [r4]
            cy = cursor->pos.y;
 8013928:	f9b4 5002 	ldrsh.w	r5, [r4, #2]
        cy += obj->coords.y1;
 801392c:	f8b8 3016 	ldrh.w	r3, [r8, #22]
        cx += obj->coords.x1;
 8013930:	f9b8 2014 	ldrsh.w	r2, [r8, #20]
        cy += obj->coords.y1;
 8013934:	441d      	add	r5, r3
        if(cursor->dir & LV_DIR_HOR) {
 8013936:	7b23      	ldrb	r3, [r4, #12]
        cx += obj->coords.x1;
 8013938:	4416      	add	r6, r2
        if(cursor->dir & LV_DIR_HOR) {
 801393a:	0798      	lsls	r0, r3, #30
        cy += obj->coords.y1;
 801393c:	fa1f f985 	uxth.w	r9, r5
        cx += obj->coords.x1;
 8013940:	fa1f fa86 	uxth.w	sl, r6
        cy += obj->coords.y1;
 8013944:	b22d      	sxth	r5, r5
        cx += obj->coords.x1;
 8013946:	b236      	sxth	r6, r6
        if(cursor->dir & LV_DIR_HOR) {
 8013948:	d021      	beq.n	801398e <lv_chart_event+0x45a>
            p1.x = cursor->dir & LV_DIR_LEFT ? obj->coords.x1 : cx;
 801394a:	f013 0f01 	tst.w	r3, #1
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &dsc);
 801394e:	4640      	mov	r0, r8
            p1.y = cy;
 8013950:	f8ad 5052 	strh.w	r5, [sp, #82]	; 0x52
            p1.x = cursor->dir & LV_DIR_LEFT ? obj->coords.x1 : cx;
 8013954:	bf08      	it	eq
 8013956:	4632      	moveq	r2, r6
            p2.x = cursor->dir & LV_DIR_RIGHT ? obj->coords.x2 : cx;
 8013958:	0799      	lsls	r1, r3, #30
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &dsc);
 801395a:	f04f 011a 	mov.w	r1, #26
            p2.x = cursor->dir & LV_DIR_RIGHT ? obj->coords.x2 : cx;
 801395e:	bf4c      	ite	mi
 8013960:	f9b8 3018 	ldrshmi.w	r3, [r8, #24]
 8013964:	4633      	movpl	r3, r6
            p1.x = cursor->dir & LV_DIR_LEFT ? obj->coords.x1 : cx;
 8013966:	f8ad 2050 	strh.w	r2, [sp, #80]	; 0x50
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &dsc);
 801396a:	aa3a      	add	r2, sp, #232	; 0xe8
            p2.x = cursor->dir & LV_DIR_RIGHT ? obj->coords.x2 : cx;
 801396c:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
            p2.y = p1.y;
 8013970:	f8ad 5056 	strh.w	r5, [sp, #86]	; 0x56
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &dsc);
 8013974:	f7ee faa8 	bl	8001ec8 <lv_event_send>
            lv_draw_line(&p1, &p2, &clip_area2, &line_dsc_tmp);
 8013978:	aa16      	add	r2, sp, #88	; 0x58
 801397a:	a915      	add	r1, sp, #84	; 0x54
 801397c:	a814      	add	r0, sp, #80	; 0x50
 801397e:	463b      	mov	r3, r7
 8013980:	f7f7 fa54 	bl	800ae2c <lv_draw_line>
            lv_event_send(obj, LV_EVENT_DRAW_PART_END, &dsc);
 8013984:	aa3a      	add	r2, sp, #232	; 0xe8
 8013986:	211b      	movs	r1, #27
 8013988:	4640      	mov	r0, r8
 801398a:	f7ee fa9d 	bl	8001ec8 <lv_event_send>
        if(cursor->dir & LV_DIR_VER) {
 801398e:	7b23      	ldrb	r3, [r4, #12]
 8013990:	f013 0f0c 	tst.w	r3, #12
 8013994:	d021      	beq.n	80139da <lv_chart_event+0x4a6>
            p1.y = cursor->dir & LV_DIR_TOP ? obj->coords.y1 : cy;
 8013996:	075a      	lsls	r2, r3, #29
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &dsc);
 8013998:	f04f 011a 	mov.w	r1, #26
 801399c:	4640      	mov	r0, r8
            p1.x = cx;
 801399e:	f8ad 6050 	strh.w	r6, [sp, #80]	; 0x50
            p1.y = cursor->dir & LV_DIR_TOP ? obj->coords.y1 : cy;
 80139a2:	bf4c      	ite	mi
 80139a4:	f9b8 2016 	ldrshmi.w	r2, [r8, #22]
 80139a8:	462a      	movpl	r2, r5
            p2.y = cursor->dir & LV_DIR_BOTTOM ? obj->coords.y2 : cy;
 80139aa:	071b      	lsls	r3, r3, #28
            p2.x = p1.x;
 80139ac:	f8ad 6054 	strh.w	r6, [sp, #84]	; 0x54
            p1.y = cursor->dir & LV_DIR_TOP ? obj->coords.y1 : cy;
 80139b0:	f8ad 2052 	strh.w	r2, [sp, #82]	; 0x52
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &dsc);
 80139b4:	aa3a      	add	r2, sp, #232	; 0xe8
            p2.y = cursor->dir & LV_DIR_BOTTOM ? obj->coords.y2 : cy;
 80139b6:	bf48      	it	mi
 80139b8:	f9b8 501a 	ldrshmi.w	r5, [r8, #26]
 80139bc:	f8ad 5056 	strh.w	r5, [sp, #86]	; 0x56
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &dsc);
 80139c0:	f7ee fa82 	bl	8001ec8 <lv_event_send>
            lv_draw_line(&p1, &p2, &clip_area2, &line_dsc_tmp);
 80139c4:	aa16      	add	r2, sp, #88	; 0x58
 80139c6:	a915      	add	r1, sp, #84	; 0x54
 80139c8:	a814      	add	r0, sp, #80	; 0x50
 80139ca:	463b      	mov	r3, r7
 80139cc:	f7f7 fa2e 	bl	800ae2c <lv_draw_line>
            lv_event_send(obj, LV_EVENT_DRAW_PART_END, &dsc);
 80139d0:	aa3a      	add	r2, sp, #232	; 0xe8
 80139d2:	211b      	movs	r1, #27
 80139d4:	4640      	mov	r0, r8
 80139d6:	f7ee fa77 	bl	8001ec8 <lv_event_send>
        if(point_w && point_h) {
 80139da:	9b03      	ldr	r3, [sp, #12]
 80139dc:	b33b      	cbz	r3, 8013a2e <lv_chart_event+0x4fa>
 80139de:	9b04      	ldr	r3, [sp, #16]
 80139e0:	b32b      	cbz	r3, 8013a2e <lv_chart_event+0x4fa>
            point_area.x1 = cx - point_w;
 80139e2:	f8bd 300c 	ldrh.w	r3, [sp, #12]
            dsc.draw_area = &point_area;
 80139e6:	ad18      	add	r5, sp, #96	; 0x60
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &dsc);
 80139e8:	211a      	movs	r1, #26
 80139ea:	4640      	mov	r0, r8
            point_area.x1 = cx - point_w;
 80139ec:	ebaa 0203 	sub.w	r2, sl, r3
            point_area.x2 = cx + point_w;
 80139f0:	449a      	add	sl, r3
            point_area.y1 = cy - point_h;
 80139f2:	f8bd 3010 	ldrh.w	r3, [sp, #16]
            point_area.x1 = cx - point_w;
 80139f6:	f8ad 2060 	strh.w	r2, [sp, #96]	; 0x60
            point_area.y1 = cy - point_h;
 80139fa:	eba9 0203 	sub.w	r2, r9, r3
            point_area.y2 = cy + point_h;
 80139fe:	4499      	add	r9, r3
            dsc.p1 = NULL;
 8013a00:	2300      	movs	r3, #0
            point_area.x2 = cx + point_w;
 8013a02:	f8ad a064 	strh.w	sl, [sp, #100]	; 0x64
            point_area.y1 = cy - point_h;
 8013a06:	f8ad 2062 	strh.w	r2, [sp, #98]	; 0x62
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &dsc);
 8013a0a:	aa3a      	add	r2, sp, #232	; 0xe8
            point_area.y2 = cy + point_h;
 8013a0c:	f8ad 9066 	strh.w	r9, [sp, #102]	; 0x66
            dsc.draw_area = &point_area;
 8013a10:	953b      	str	r5, [sp, #236]	; 0xec
            dsc.p2 = NULL;
 8013a12:	e9cd 3341 	strd	r3, r3, [sp, #260]	; 0x104
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &dsc);
 8013a16:	f7ee fa57 	bl	8001ec8 <lv_event_send>
            lv_draw_rect(&point_area, &clip_area2, &point_dsc_tmp);
 8013a1a:	aa2d      	add	r2, sp, #180	; 0xb4
 8013a1c:	a916      	add	r1, sp, #88	; 0x58
 8013a1e:	4628      	mov	r0, r5
 8013a20:	f7f9 f854 	bl	800cacc <lv_draw_rect>
            lv_event_send(obj, LV_EVENT_DRAW_PART_END, &dsc);
 8013a24:	aa3a      	add	r2, sp, #232	; 0xe8
 8013a26:	211b      	movs	r1, #27
 8013a28:	4640      	mov	r0, r8
 8013a2a:	f7ee fa4d 	bl	8001ec8 <lv_event_send>
    _LV_LL_READ_BACK(&chart->cursor_ll, cursor) {
 8013a2e:	4621      	mov	r1, r4
 8013a30:	4658      	mov	r0, fp
 8013a32:	f003 fd86 	bl	8017542 <_lv_ll_get_prev>
 8013a36:	4604      	mov	r4, r0
 8013a38:	e758      	b.n	80138ec <lv_chart_event+0x3b8>
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 8013a3a:	4640      	mov	r0, r8
    lv_draw_line_dsc_init(&line_dsc);
 8013a3c:	ad2d      	add	r5, sp, #180	; 0xb4
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 8013a3e:	f7ff f9ba 	bl	8012db6 <lv_obj_get_style_border_width.constprop.0>
 8013a42:	4604      	mov	r4, r0
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 8013a44:	2100      	movs	r1, #0
 8013a46:	4640      	mov	r0, r8
 8013a48:	f7ff f8a6 	bl	8012b98 <lv_obj_get_style_pad_left>
    lv_coord_t pad_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + border_width;
 8013a4c:	2100      	movs	r1, #0
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 8013a4e:	b2a3      	uxth	r3, r4
 8013a50:	9005      	str	r0, [sp, #20]
    lv_coord_t pad_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + border_width;
 8013a52:	4640      	mov	r0, r8
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 8013a54:	9303      	str	r3, [sp, #12]
    lv_coord_t pad_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + border_width;
 8013a56:	f7ff f8b4 	bl	8012bc2 <lv_obj_get_style_pad_top>
 8013a5a:	4604      	mov	r4, r0
    lv_coord_t w     = (lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 8013a5c:	4640      	mov	r0, r8
 8013a5e:	f7f1 fa12 	bl	8004e86 <lv_obj_get_content_width>
 8013a62:	f8b8 3084 	ldrh.w	r3, [r8, #132]	; 0x84
 8013a66:	9006      	str	r0, [sp, #24]
    lv_coord_t h     = (lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 8013a68:	4640      	mov	r0, r8
    lv_coord_t w     = (lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 8013a6a:	9307      	str	r3, [sp, #28]
    lv_coord_t h     = (lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 8013a6c:	f7f1 fa25 	bl	8004eba <lv_obj_get_content_height>
 8013a70:	4681      	mov	r9, r0
    lv_draw_line_dsc_init(&line_dsc);
 8013a72:	4628      	mov	r0, r5
    lv_coord_t h     = (lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 8013a74:	f8b8 7086 	ldrh.w	r7, [r8, #134]	; 0x86
    lv_draw_line_dsc_init(&line_dsc);
 8013a78:	f7f7 f9cc 	bl	800ae14 <lv_draw_line_dsc_init>
    lv_obj_init_draw_line_dsc(obj, LV_PART_MAIN, &line_dsc);
 8013a7c:	462a      	mov	r2, r5
 8013a7e:	2100      	movs	r1, #0
 8013a80:	4640      	mov	r0, r8
 8013a82:	f7f0 ff51 	bl	8004928 <lv_obj_init_draw_line_dsc>
    lv_obj_draw_dsc_init(&obj_draw_dsc, clip_area);
 8013a86:	ee18 1a10 	vmov	r1, s16
 8013a8a:	a83a      	add	r0, sp, #232	; 0xe8
 8013a8c:	f7f1 f84c 	bl	8004b28 <lv_obj_draw_dsc_init>
    obj_draw_dsc.part = LV_PART_MAIN;
 8013a90:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_OPA);
 8013a92:	2231      	movs	r2, #49	; 0x31
 8013a94:	4640      	mov	r0, r8
 8013a96:	9147      	str	r1, [sp, #284]	; 0x11c
    obj_draw_dsc.line_dsc = &line_dsc;
 8013a98:	953e      	str	r5, [sp, #248]	; 0xf8
 8013a9a:	f7f3 fc65 	bl	8007368 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8013a9e:	b2c3      	uxtb	r3, r0
    lv_coord_t border_w = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 8013aa0:	4640      	mov	r0, r8
 8013aa2:	9304      	str	r3, [sp, #16]
 8013aa4:	f7ff f987 	bl	8012db6 <lv_obj_get_style_border_width.constprop.0>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_SIDE);
 8013aa8:	2233      	movs	r2, #51	; 0x33
 8013aaa:	2100      	movs	r1, #0
 8013aac:	4683      	mov	fp, r0
 8013aae:	4640      	mov	r0, r8
 8013ab0:	f7f3 fc5a 	bl	8007368 <lv_obj_get_style_prop>
    return (lv_border_side_t)v.num;
 8013ab4:	b2c6      	uxtb	r6, r0
    lv_coord_t scroll_left = lv_obj_get_scroll_left(obj);
 8013ab6:	4640      	mov	r0, r8
 8013ab8:	f7f2 fa82 	bl	8005fc0 <lv_obj_get_scroll_left>
 8013abc:	9009      	str	r0, [sp, #36]	; 0x24
    lv_coord_t scroll_top = lv_obj_get_scroll_top(obj);
 8013abe:	4640      	mov	r0, r8
 8013ac0:	f7f2 fa28 	bl	8005f14 <lv_obj_get_scroll_top>
    if(chart->hdiv_cnt != 0) {
 8013ac4:	f8b8 507e 	ldrh.w	r5, [r8, #126]	; 0x7e
 8013ac8:	2d00      	cmp	r5, #0
 8013aca:	d16a      	bne.n	8013ba2 <lv_chart_event+0x66e>
    if(chart->vdiv_cnt != 0) {
 8013acc:	f8b8 7080 	ldrh.w	r7, [r8, #128]	; 0x80
 8013ad0:	2f00      	cmp	r7, #0
 8013ad2:	f43f adf4 	beq.w	80136be <lv_chart_event+0x18a>
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 8013ad6:	9b03      	ldr	r3, [sp, #12]
 8013ad8:	9a05      	ldr	r2, [sp, #20]
        lv_coord_t x_ofs = obj->coords.x1 + pad_left - scroll_left;
 8013ada:	f8b8 0014 	ldrh.w	r0, [r8, #20]
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 8013ade:	4413      	add	r3, r2
 8013ae0:	461d      	mov	r5, r3
        lv_coord_t x_ofs = obj->coords.x1 + pad_left - scroll_left;
 8013ae2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013ae4:	4405      	add	r5, r0
 8013ae6:	1aed      	subs	r5, r5, r3
 8013ae8:	b2ab      	uxth	r3, r5
        i_end = chart->vdiv_cnt;
 8013aea:	b23d      	sxth	r5, r7
        lv_coord_t x_ofs = obj->coords.x1 + pad_left - scroll_left;
 8013aec:	9303      	str	r3, [sp, #12]
        p1.y = obj->coords.y1;
 8013aee:	f8b8 3016 	ldrh.w	r3, [r8, #22]
 8013af2:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
        p2.y = obj->coords.y2;
 8013af6:	f8b8 301a 	ldrh.w	r3, [r8, #26]
 8013afa:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
        if(border_opa > LV_OPA_MIN && border_w > 0) {
 8013afe:	9b04      	ldr	r3, [sp, #16]
 8013b00:	2b02      	cmp	r3, #2
 8013b02:	f240 80b4 	bls.w	8013c6e <lv_chart_event+0x73a>
 8013b06:	f1bb 0f00 	cmp.w	fp, #0
 8013b0a:	f340 80b0 	ble.w	8013c6e <lv_chart_event+0x73a>
            if((border_side & LV_BORDER_SIDE_LEFT) && (lv_obj_get_style_pad_left(obj, LV_PART_MAIN) == 0)) i_start++;
 8013b0e:	f016 0404 	ands.w	r4, r6, #4
 8013b12:	d006      	beq.n	8013b22 <lv_chart_event+0x5ee>
 8013b14:	2100      	movs	r1, #0
 8013b16:	4640      	mov	r0, r8
 8013b18:	f7ff f83e 	bl	8012b98 <lv_obj_get_style_pad_left>
 8013b1c:	fab0 f480 	clz	r4, r0
 8013b20:	0964      	lsrs	r4, r4, #5
            if((border_side & LV_BORDER_SIDE_RIGHT) && (lv_obj_get_style_pad_right(obj, LV_PART_MAIN) == 0)) i_end--;
 8013b22:	0730      	lsls	r0, r6, #28
 8013b24:	d509      	bpl.n	8013b3a <lv_chart_event+0x606>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8013b26:	f241 0213 	movw	r2, #4115	; 0x1013
 8013b2a:	2100      	movs	r1, #0
 8013b2c:	4640      	mov	r0, r8
 8013b2e:	f7f3 fc1b 	bl	8007368 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8013b32:	b200      	sxth	r0, r0
 8013b34:	b908      	cbnz	r0, 8013b3a <lv_chart_event+0x606>
 8013b36:	1e7b      	subs	r3, r7, #1
 8013b38:	b21d      	sxth	r5, r3
 8013b3a:	4627      	mov	r7, r4
            obj_draw_dsc.p1 = &p1;
 8013b3c:	f10d 0968 	add.w	r9, sp, #104	; 0x68
            obj_draw_dsc.p2 = &p2;
 8013b40:	f10d 0a74 	add.w	sl, sp, #116	; 0x74
    lv_coord_t w     = (lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 8013b44:	e9dd 3606 	ldrd	r3, r6, [sp, #24]
 8013b48:	435e      	muls	r6, r3
 8013b4a:	f346 260f 	sbfx	r6, r6, #8, #16
        for(i = i_start; i < i_end; i++) {
 8013b4e:	42ac      	cmp	r4, r5
 8013b50:	f6bf adb5 	bge.w	80136be <lv_chart_event+0x18a>
            p1.x = (int32_t)((int32_t)(w - line_dsc.width) * i) / (chart->vdiv_cnt - 1);
 8013b54:	f9bd 30b6 	ldrsh.w	r3, [sp, #182]	; 0xb6
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &obj_draw_dsc);
 8013b58:	211a      	movs	r1, #26
            p1.x = (int32_t)((int32_t)(w - line_dsc.width) * i) / (chart->vdiv_cnt - 1);
 8013b5a:	f8b8 2080 	ldrh.w	r2, [r8, #128]	; 0x80
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &obj_draw_dsc);
 8013b5e:	4640      	mov	r0, r8
            p1.x = (int32_t)((int32_t)(w - line_dsc.width) * i) / (chart->vdiv_cnt - 1);
 8013b60:	1af3      	subs	r3, r6, r3
            obj_draw_dsc.id = i;
 8013b62:	9748      	str	r7, [sp, #288]	; 0x120
            p1.x = (int32_t)((int32_t)(w - line_dsc.width) * i) / (chart->vdiv_cnt - 1);
 8013b64:	3a01      	subs	r2, #1
 8013b66:	3401      	adds	r4, #1
 8013b68:	437b      	muls	r3, r7
 8013b6a:	3701      	adds	r7, #1
 8013b6c:	b224      	sxth	r4, r4
 8013b6e:	fb93 f3f2 	sdiv	r3, r3, r2
            p1.x += x_ofs;
 8013b72:	9a03      	ldr	r2, [sp, #12]
 8013b74:	4413      	add	r3, r2
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &obj_draw_dsc);
 8013b76:	aa3a      	add	r2, sp, #232	; 0xe8
            p1.x += x_ofs;
 8013b78:	b21b      	sxth	r3, r3
            obj_draw_dsc.p2 = &p2;
 8013b7a:	e9cd 9a41 	strd	r9, sl, [sp, #260]	; 0x104
            p1.x += x_ofs;
 8013b7e:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
            p2.x = p1.x;
 8013b82:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &obj_draw_dsc);
 8013b86:	f7ee f99f 	bl	8001ec8 <lv_event_send>
            lv_draw_line(&p1, &p2, &series_mask, &line_dsc);
 8013b8a:	ab2d      	add	r3, sp, #180	; 0xb4
 8013b8c:	aa20      	add	r2, sp, #128	; 0x80
 8013b8e:	4651      	mov	r1, sl
 8013b90:	4648      	mov	r0, r9
 8013b92:	f7f7 f94b 	bl	800ae2c <lv_draw_line>
            lv_event_send(obj, LV_EVENT_DRAW_PART_END, &obj_draw_dsc);
 8013b96:	aa3a      	add	r2, sp, #232	; 0xe8
 8013b98:	211b      	movs	r1, #27
 8013b9a:	4640      	mov	r0, r8
 8013b9c:	f7ee f994 	bl	8001ec8 <lv_event_send>
        for(i = i_start; i < i_end; i++) {
 8013ba0:	e7d5      	b.n	8013b4e <lv_chart_event+0x61a>
    lv_coord_t pad_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + border_width;
 8013ba2:	9b03      	ldr	r3, [sp, #12]
        i_end = chart->hdiv_cnt;
 8013ba4:	fa0f fa85 	sxth.w	sl, r5
    lv_coord_t pad_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + border_width;
 8013ba8:	441c      	add	r4, r3
        lv_coord_t y_ofs = obj->coords.y1 + pad_top - scroll_top;
 8013baa:	f8b8 3016 	ldrh.w	r3, [r8, #22]
 8013bae:	441c      	add	r4, r3
 8013bb0:	1a20      	subs	r0, r4, r0
 8013bb2:	b283      	uxth	r3, r0
 8013bb4:	930a      	str	r3, [sp, #40]	; 0x28
        p1.x = obj->coords.x1;
 8013bb6:	f8b8 3014 	ldrh.w	r3, [r8, #20]
 8013bba:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
        p2.x = obj->coords.x2;
 8013bbe:	f8b8 3018 	ldrh.w	r3, [r8, #24]
 8013bc2:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
        if(border_opa > LV_OPA_MIN && border_w > 0) {
 8013bc6:	9b04      	ldr	r3, [sp, #16]
 8013bc8:	2b02      	cmp	r3, #2
 8013bca:	d94e      	bls.n	8013c6a <lv_chart_event+0x736>
 8013bcc:	f1bb 0f00 	cmp.w	fp, #0
 8013bd0:	dd4b      	ble.n	8013c6a <lv_chart_event+0x736>
            if((border_side & LV_BORDER_SIDE_TOP) && (lv_obj_get_style_pad_top(obj, LV_PART_MAIN) == 0)) i_start++;
 8013bd2:	f016 0402 	ands.w	r4, r6, #2
 8013bd6:	d006      	beq.n	8013be6 <lv_chart_event+0x6b2>
 8013bd8:	2100      	movs	r1, #0
 8013bda:	4640      	mov	r0, r8
 8013bdc:	f7fe fff1 	bl	8012bc2 <lv_obj_get_style_pad_top>
 8013be0:	fab0 f480 	clz	r4, r0
 8013be4:	0964      	lsrs	r4, r4, #5
            if((border_side & LV_BORDER_SIDE_BOTTOM) && (lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN) == 0)) i_end--;
 8013be6:	07f3      	lsls	r3, r6, #31
 8013be8:	d50b      	bpl.n	8013c02 <lv_chart_event+0x6ce>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8013bea:	f241 0211 	movw	r2, #4113	; 0x1011
 8013bee:	2100      	movs	r1, #0
 8013bf0:	4640      	mov	r0, r8
 8013bf2:	f7f3 fbb9 	bl	8007368 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8013bf6:	b200      	sxth	r0, r0
 8013bf8:	b918      	cbnz	r0, 8013c02 <lv_chart_event+0x6ce>
 8013bfa:	f105 3aff 	add.w	sl, r5, #4294967295
 8013bfe:	fa0f fa8a 	sxth.w	sl, sl
    lv_coord_t h     = (lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 8013c02:	fb07 f509 	mul.w	r5, r7, r9
 8013c06:	4627      	mov	r7, r4
            obj_draw_dsc.p2 = &p2;
 8013c08:	f10d 0974 	add.w	r9, sp, #116	; 0x74
    lv_coord_t h     = (lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 8013c0c:	f345 230f 	sbfx	r3, r5, #8, #16
            obj_draw_dsc.p1 = &p1;
 8013c10:	ad1a      	add	r5, sp, #104	; 0x68
    lv_coord_t h     = (lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 8013c12:	9308      	str	r3, [sp, #32]
        for(i = i_start; i < i_end; i++) {
 8013c14:	4554      	cmp	r4, sl
 8013c16:	f6bf af59 	bge.w	8013acc <lv_chart_event+0x598>
            p1.y = (int32_t)((int32_t)(h - line_dsc.width) * i) / (chart->hdiv_cnt - 1);
 8013c1a:	9a08      	ldr	r2, [sp, #32]
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &obj_draw_dsc);
 8013c1c:	211a      	movs	r1, #26
            p1.y = (int32_t)((int32_t)(h - line_dsc.width) * i) / (chart->hdiv_cnt - 1);
 8013c1e:	f9bd 30b6 	ldrsh.w	r3, [sp, #182]	; 0xb6
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &obj_draw_dsc);
 8013c22:	4640      	mov	r0, r8
 8013c24:	3401      	adds	r4, #1
            p1.y = (int32_t)((int32_t)(h - line_dsc.width) * i) / (chart->hdiv_cnt - 1);
 8013c26:	1ad3      	subs	r3, r2, r3
 8013c28:	f8b8 207e 	ldrh.w	r2, [r8, #126]	; 0x7e
            obj_draw_dsc.id = i;
 8013c2c:	9748      	str	r7, [sp, #288]	; 0x120
 8013c2e:	b224      	sxth	r4, r4
            p1.y = (int32_t)((int32_t)(h - line_dsc.width) * i) / (chart->hdiv_cnt - 1);
 8013c30:	437b      	muls	r3, r7
 8013c32:	3a01      	subs	r2, #1
 8013c34:	3701      	adds	r7, #1
 8013c36:	fb93 f3f2 	sdiv	r3, r3, r2
            p1.y += y_ofs;
 8013c3a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013c3c:	4413      	add	r3, r2
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &obj_draw_dsc);
 8013c3e:	aa3a      	add	r2, sp, #232	; 0xe8
            p1.y += y_ofs;
 8013c40:	b21b      	sxth	r3, r3
            obj_draw_dsc.p2 = &p2;
 8013c42:	e9cd 5941 	strd	r5, r9, [sp, #260]	; 0x104
            p1.y += y_ofs;
 8013c46:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
            p2.y = p1.y;
 8013c4a:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &obj_draw_dsc);
 8013c4e:	f7ee f93b 	bl	8001ec8 <lv_event_send>
            lv_draw_line(&p1, &p2, &series_mask, &line_dsc);
 8013c52:	ab2d      	add	r3, sp, #180	; 0xb4
 8013c54:	aa20      	add	r2, sp, #128	; 0x80
 8013c56:	4649      	mov	r1, r9
 8013c58:	4628      	mov	r0, r5
 8013c5a:	f7f7 f8e7 	bl	800ae2c <lv_draw_line>
            lv_event_send(obj, LV_EVENT_DRAW_PART_END, &obj_draw_dsc);
 8013c5e:	aa3a      	add	r2, sp, #232	; 0xe8
 8013c60:	211b      	movs	r1, #27
 8013c62:	4640      	mov	r0, r8
 8013c64:	f7ee f930 	bl	8001ec8 <lv_event_send>
        for(i = i_start; i < i_end; i++) {
 8013c68:	e7d4      	b.n	8013c14 <lv_chart_event+0x6e0>
        i_start = 0;
 8013c6a:	2400      	movs	r4, #0
 8013c6c:	e7c9      	b.n	8013c02 <lv_chart_event+0x6ce>
        i_start = 0;
 8013c6e:	2400      	movs	r4, #0
 8013c70:	e763      	b.n	8013b3a <lv_chart_event+0x606>
        if (ser->hidden) continue;
 8013c72:	7b23      	ldrb	r3, [r4, #12]
 8013c74:	f013 0301 	ands.w	r3, r3, #1
 8013c78:	d006      	beq.n	8013c88 <lv_chart_event+0x754>
    _LV_LL_READ_BACK(&chart->series_ll, ser) {
 8013c7a:	4621      	mov	r1, r4
 8013c7c:	ee19 0a10 	vmov	r0, s18
 8013c80:	f003 fc5f 	bl	8017542 <_lv_ll_get_prev>
 8013c84:	4604      	mov	r4, r0
 8013c86:	e5e4      	b.n	8013852 <lv_chart_event+0x31e>
        line_dsc_default.color = ser->color;
 8013c88:	8922      	ldrh	r2, [r4, #8]
 8013c8a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8013c8c:	f8ad 2080 	strh.w	r2, [sp, #128]	; 0x80
        point_dsc_default.bg_color = ser->color;
 8013c90:	8922      	ldrh	r2, [r4, #8]
 8013c92:	f8ad 20b8 	strh.w	r2, [sp, #184]	; 0xb8
        lv_coord_t start_point = chart->update_mode == LV_CHART_UPDATE_MODE_SHIFT ? ser->start_point : 0;
 8013c96:	f898 2088 	ldrb.w	r2, [r8, #136]	; 0x88
 8013c9a:	0711      	lsls	r1, r2, #28
        int32_t y_tmp = (int32_t)((int32_t)ser->y_points[p_prev] - chart->ymin[ser->y_axis_sec]) * h;
 8013c9c:	7b22      	ldrb	r2, [r4, #12]
        lv_coord_t start_point = chart->update_mode == LV_CHART_UPDATE_MODE_SHIFT ? ser->start_point : 0;
 8013c9e:	bf58      	it	pl
 8013ca0:	f9b4 300a 	ldrshpl.w	r3, [r4, #10]
 8013ca4:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8013ca8:	9307      	str	r3, [sp, #28]
        p1.x = x_ofs;
 8013caa:	eb08 0242 	add.w	r2, r8, r2, lsl #1
 8013cae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
        int32_t y_tmp = (int32_t)((int32_t)ser->y_points[p_prev] - chart->ymin[ser->y_axis_sec]) * h;
 8013cb0:	9807      	ldr	r0, [sp, #28]
        p1.x = x_ofs;
 8013cb2:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
        p2.x = x_ofs;
 8013cb6:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
        int32_t y_tmp = (int32_t)((int32_t)ser->y_points[p_prev] - chart->ymin[ser->y_axis_sec]) * h;
 8013cba:	6863      	ldr	r3, [r4, #4]
 8013cbc:	f9b2 106c 	ldrsh.w	r1, [r2, #108]	; 0x6c
 8013cc0:	f933 3010 	ldrsh.w	r3, [r3, r0, lsl #1]
        y_tmp  = y_tmp / (chart->ymax[ser->y_axis_sec] - chart->ymin[ser->y_axis_sec]);
 8013cc4:	f9b2 2070 	ldrsh.w	r2, [r2, #112]	; 0x70
        int32_t y_tmp = (int32_t)((int32_t)ser->y_points[p_prev] - chart->ymin[ser->y_axis_sec]) * h;
 8013cc8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013cca:	1a5b      	subs	r3, r3, r1
        y_tmp  = y_tmp / (chart->ymax[ser->y_axis_sec] - chart->ymin[ser->y_axis_sec]);
 8013ccc:	1a52      	subs	r2, r2, r1
        lv_obj_draw_dsc_init(&dsc, clip_area);
 8013cce:	ee18 1a10 	vmov	r1, s16
        int32_t y_tmp = (int32_t)((int32_t)ser->y_points[p_prev] - chart->ymin[ser->y_axis_sec]) * h;
 8013cd2:	4343      	muls	r3, r0
        p2.y   = h - y_tmp + y_ofs;
 8013cd4:	9812      	ldr	r0, [sp, #72]	; 0x48
        y_tmp  = y_tmp / (chart->ymax[ser->y_axis_sec] - chart->ymin[ser->y_axis_sec]);
 8013cd6:	fb93 f3f2 	sdiv	r3, r3, r2
 8013cda:	4428      	add	r0, r5
 8013cdc:	b280      	uxth	r0, r0
        p2.y   = h - y_tmp + y_ofs;
 8013cde:	1ac3      	subs	r3, r0, r3
 8013ce0:	900e      	str	r0, [sp, #56]	; 0x38
        lv_obj_draw_dsc_init(&dsc, clip_area);
 8013ce2:	a83a      	add	r0, sp, #232	; 0xe8
        p2.y   = h - y_tmp + y_ofs;
 8013ce4:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
        lv_obj_draw_dsc_init(&dsc, clip_area);
 8013ce8:	f7f0 ff1e 	bl	8004b28 <lv_obj_draw_dsc_init>
        dsc.part = LV_PART_ITEMS;
 8013cec:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
        lv_coord_t y_min = p2.y;
 8013cf0:	f9bd 605a 	ldrsh.w	r6, [sp, #90]	; 0x5a
        lv_coord_t p_act = start_point;
 8013cf4:	9807      	ldr	r0, [sp, #28]
        dsc.part = LV_PART_ITEMS;
 8013cf6:	9347      	str	r3, [sp, #284]	; 0x11c
        dsc.line_dsc = &line_dsc_default;
 8013cf8:	ab20      	add	r3, sp, #128	; 0x80
        dsc.sub_part_ptr = ser;
 8013cfa:	944b      	str	r4, [sp, #300]	; 0x12c
        dsc.line_dsc = &line_dsc_default;
 8013cfc:	933e      	str	r3, [sp, #248]	; 0xf8
        dsc.rect_dsc = &point_dsc_default;
 8013cfe:	ab2d      	add	r3, sp, #180	; 0xb4
        lv_coord_t y_min = p2.y;
 8013d00:	9604      	str	r6, [sp, #16]
        dsc.rect_dsc = &point_dsc_default;
 8013d02:	933c      	str	r3, [sp, #240]	; 0xf0
        for(i = 0; i < chart->point_cnt; i++) {
 8013d04:	2300      	movs	r3, #0
 8013d06:	9305      	str	r3, [sp, #20]
                    point_area.x1 = p1.x - point_w;
 8013d08:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8013d0c:	930f      	str	r3, [sp, #60]	; 0x3c
 8013d0e:	f8bd b014 	ldrh.w	fp, [sp, #20]
        for(i = 0; i < chart->point_cnt; i++) {
 8013d12:	f8b8 5082 	ldrh.w	r5, [r8, #130]	; 0x82
 8013d16:	455d      	cmp	r5, fp
 8013d18:	d839      	bhi.n	8013d8e <lv_chart_event+0x85a>
        if(!crowded_mode && i == chart->point_cnt) {
 8013d1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013d1c:	9a08      	ldr	r2, [sp, #32]
 8013d1e:	4293      	cmp	r3, r2
 8013d20:	daab      	bge.n	8013c7a <lv_chart_event+0x746>
 8013d22:	455d      	cmp	r5, fp
 8013d24:	d1a9      	bne.n	8013c7a <lv_chart_event+0x746>
            if(ser->y_points[p_act] != LV_CHART_POINT_NONE) {
 8013d26:	6862      	ldr	r2, [r4, #4]
 8013d28:	f932 3010 	ldrsh.w	r3, [r2, r0, lsl #1]
 8013d2c:	454b      	cmp	r3, r9
 8013d2e:	d0a4      	beq.n	8013c7a <lv_chart_event+0x746>
                point_area.x1 = p2.x - point_w;
 8013d30:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8013d34:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
 8013d38:	1a5d      	subs	r5, r3, r1
                point_area.x2 = p2.x + point_w;
 8013d3a:	440b      	add	r3, r1
                point_area.y1 = p2.y - point_h;
 8013d3c:	f8bd 1018 	ldrh.w	r1, [sp, #24]
                point_area.x2 = p2.x + point_w;
 8013d40:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
                point_area.y1 = p2.y - point_h;
 8013d44:	f8bd 305a 	ldrh.w	r3, [sp, #90]	; 0x5a
                point_area.x1 = p2.x - point_w;
 8013d48:	f8ad 5074 	strh.w	r5, [sp, #116]	; 0x74
                point_area.y1 = p2.y - point_h;
 8013d4c:	1a5d      	subs	r5, r3, r1
                point_area.y2 = p2.y + point_h;
 8013d4e:	440b      	add	r3, r1
                lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &dsc);
 8013d50:	211a      	movs	r1, #26
                point_area.y2 = p2.y + point_h;
 8013d52:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
                dsc.id = i - 1;
 8013d56:	f10b 33ff 	add.w	r3, fp, #4294967295
                point_area.y1 = p2.y - point_h;
 8013d5a:	f8ad 5076 	strh.w	r5, [sp, #118]	; 0x76
                dsc.draw_area = &point_area;
 8013d5e:	ad1d      	add	r5, sp, #116	; 0x74
                dsc.id = i - 1;
 8013d60:	9348      	str	r3, [sp, #288]	; 0x120
                dsc.p1 = NULL;
 8013d62:	2300      	movs	r3, #0
                dsc.draw_area = &point_area;
 8013d64:	953b      	str	r5, [sp, #236]	; 0xec
                dsc.p2 = NULL;
 8013d66:	e9cd 3341 	strd	r3, r3, [sp, #260]	; 0x104
                dsc.value = ser->y_points[p_act];
 8013d6a:	f932 3010 	ldrsh.w	r3, [r2, r0, lsl #1]
                lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &dsc);
 8013d6e:	aa3a      	add	r2, sp, #232	; 0xe8
 8013d70:	4640      	mov	r0, r8
                dsc.value = ser->y_points[p_act];
 8013d72:	934a      	str	r3, [sp, #296]	; 0x128
                lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &dsc);
 8013d74:	f7ee f8a8 	bl	8001ec8 <lv_event_send>
                lv_draw_rect(&point_area, &series_mask, &point_dsc_default);
 8013d78:	aa2d      	add	r2, sp, #180	; 0xb4
 8013d7a:	a91a      	add	r1, sp, #104	; 0x68
 8013d7c:	4628      	mov	r0, r5
 8013d7e:	f7f8 fea5 	bl	800cacc <lv_draw_rect>
                lv_event_send(obj, LV_EVENT_DRAW_PART_END, &dsc);
 8013d82:	aa3a      	add	r2, sp, #232	; 0xe8
 8013d84:	211b      	movs	r1, #27
 8013d86:	4640      	mov	r0, r8
 8013d88:	f7ee f89e 	bl	8001ec8 <lv_event_send>
 8013d8c:	e775      	b.n	8013c7a <lv_chart_event+0x746>
            p1.y = p2.y;
 8013d8e:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
            if(p1.x > clip_area->x2 + point_w + 1) break;
 8013d92:	9f03      	ldr	r7, [sp, #12]
            p1.y = p2.y;
 8013d94:	930c      	str	r3, [sp, #48]	; 0x30
 8013d96:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
            if(p1.x > clip_area->x2 + point_w + 1) break;
 8013d9a:	ee18 3a10 	vmov	r3, s16
            p1.x = p2.x;
 8013d9e:	f9bd 2058 	ldrsh.w	r2, [sp, #88]	; 0x58
            if(p1.x > clip_area->x2 + point_w + 1) break;
 8013da2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
            p1.x = p2.x;
 8013da6:	f8ad 2054 	strh.w	r2, [sp, #84]	; 0x54
            if(p1.x > clip_area->x2 + point_w + 1) break;
 8013daa:	443b      	add	r3, r7
 8013dac:	3301      	adds	r3, #1
 8013dae:	429a      	cmp	r2, r3
 8013db0:	f73f af63 	bgt.w	8013c7a <lv_chart_event+0x746>
            p2.x = ((w * i) / (chart->point_cnt - 1)) + x_ofs;
 8013db4:	f8bd e014 	ldrh.w	lr, [sp, #20]
 8013db8:	1e6f      	subs	r7, r5, #1
 8013dba:	9b08      	ldr	r3, [sp, #32]
            y_tmp = (int32_t)((int32_t)ser->y_points[p_act] - chart->ymin[ser->y_axis_sec]) * h;
 8013dbc:	f8d4 c004 	ldr.w	ip, [r4, #4]
            p2.x = ((w * i) / (chart->point_cnt - 1)) + x_ofs;
 8013dc0:	fb0e f303 	mul.w	r3, lr, r3
 8013dc4:	fb93 f3f7 	sdiv	r3, r3, r7
 8013dc8:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8013dca:	443b      	add	r3, r7
 8013dcc:	b29f      	uxth	r7, r3
 8013dce:	b21b      	sxth	r3, r3
 8013dd0:	9713      	str	r7, [sp, #76]	; 0x4c
            p_act = (start_point + i) % chart->point_cnt;
 8013dd2:	9f07      	ldr	r7, [sp, #28]
            p2.x = ((w * i) / (chart->point_cnt - 1)) + x_ofs;
 8013dd4:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
            p_act = (start_point + i) % chart->point_cnt;
 8013dd8:	4477      	add	r7, lr
 8013dda:	fb97 faf5 	sdiv	sl, r7, r5
 8013dde:	fb05 7a1a 	mls	sl, r5, sl, r7
            y_tmp = (int32_t)((int32_t)ser->y_points[p_act] - chart->ymin[ser->y_axis_sec]) * h;
 8013de2:	7b27      	ldrb	r7, [r4, #12]
 8013de4:	f3c7 1700 	ubfx	r7, r7, #4, #1
            p_act = (start_point + i) % chart->point_cnt;
 8013de8:	fa0f fa8a 	sxth.w	sl, sl
            y_tmp = (int32_t)((int32_t)ser->y_points[p_act] - chart->ymin[ser->y_axis_sec]) * h;
 8013dec:	eb08 0747 	add.w	r7, r8, r7, lsl #1
 8013df0:	f9b7 506c 	ldrsh.w	r5, [r7, #108]	; 0x6c
            y_tmp = y_tmp / (chart->ymax[ser->y_axis_sec] - chart->ymin[ser->y_axis_sec]);
 8013df4:	f9b7 7070 	ldrsh.w	r7, [r7, #112]	; 0x70
            y_tmp = (int32_t)((int32_t)ser->y_points[p_act] - chart->ymin[ser->y_axis_sec]) * h;
 8013df8:	950d      	str	r5, [sp, #52]	; 0x34
 8013dfa:	990d      	ldr	r1, [sp, #52]	; 0x34
 8013dfc:	f93c 501a 	ldrsh.w	r5, [ip, sl, lsl #1]
 8013e00:	1a6d      	subs	r5, r5, r1
 8013e02:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013e04:	434d      	muls	r5, r1
            y_tmp = y_tmp / (chart->ymax[ser->y_axis_sec] - chart->ymin[ser->y_axis_sec]);
 8013e06:	990d      	ldr	r1, [sp, #52]	; 0x34
 8013e08:	1a7f      	subs	r7, r7, r1
            p2.y  = h - y_tmp + y_ofs;
 8013e0a:	990e      	ldr	r1, [sp, #56]	; 0x38
            y_tmp = y_tmp / (chart->ymax[ser->y_axis_sec] - chart->ymin[ser->y_axis_sec]);
 8013e0c:	fb95 f5f7 	sdiv	r5, r5, r7
            p2.y  = h - y_tmp + y_ofs;
 8013e10:	1b4d      	subs	r5, r1, r5
            if(p2.x < clip_area->x1 - point_w - 1) {
 8013e12:	ee18 1a10 	vmov	r1, s16
 8013e16:	f9b1 7000 	ldrsh.w	r7, [r1]
            p2.y  = h - y_tmp + y_ofs;
 8013e1a:	b22d      	sxth	r5, r5
            if(p2.x < clip_area->x1 - point_w - 1) {
 8013e1c:	9903      	ldr	r1, [sp, #12]
            p2.y  = h - y_tmp + y_ofs;
 8013e1e:	f8ad 505a 	strh.w	r5, [sp, #90]	; 0x5a
            if(p2.x < clip_area->x1 - point_w - 1) {
 8013e22:	1a7f      	subs	r7, r7, r1
 8013e24:	3f01      	subs	r7, #1
 8013e26:	42bb      	cmp	r3, r7
 8013e28:	db37      	blt.n	8013e9a <lv_chart_event+0x966>
            if(i != 0) {
 8013e2a:	f1bb 0f00 	cmp.w	fp, #0
 8013e2e:	d034      	beq.n	8013e9a <lv_chart_event+0x966>
                if(crowded_mode) {
 8013e30:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013e32:	0047      	lsls	r7, r0, #1
 8013e34:	468b      	mov	fp, r1
 8013e36:	9908      	ldr	r1, [sp, #32]
 8013e38:	458b      	cmp	fp, r1
 8013e3a:	db33      	blt.n	8013ea4 <lv_chart_event+0x970>
                    if(ser->y_points[p_prev] != LV_CHART_POINT_NONE && ser->y_points[p_act] != LV_CHART_POINT_NONE) {
 8013e3c:	f93c 1010 	ldrsh.w	r1, [ip, r0, lsl #1]
 8013e40:	4549      	cmp	r1, r9
 8013e42:	d02a      	beq.n	8013e9a <lv_chart_event+0x966>
 8013e44:	f93c 101a 	ldrsh.w	r1, [ip, sl, lsl #1]
 8013e48:	4549      	cmp	r1, r9
 8013e4a:	d026      	beq.n	8013e9a <lv_chart_event+0x966>
                        y_min = LV_MIN(y_min, p2.y);
 8013e4c:	9904      	ldr	r1, [sp, #16]
                        y_max = LV_MAX(y_max, p2.y);
 8013e4e:	42ae      	cmp	r6, r5
 8013e50:	bfb8      	it	lt
 8013e52:	462e      	movlt	r6, r5
                        y_min = LV_MIN(y_min, p2.y);
 8013e54:	42a9      	cmp	r1, r5
 8013e56:	bfa8      	it	ge
 8013e58:	4629      	movge	r1, r5
                        if(p1.x != p2.x) {
 8013e5a:	429a      	cmp	r2, r3
                        y_min = LV_MIN(y_min, p2.y);
 8013e5c:	9104      	str	r1, [sp, #16]
                        if(p1.x != p2.x) {
 8013e5e:	d01c      	beq.n	8013e9a <lv_chart_event+0x966>
                            p2.x--;         /*It's already on the next x value*/
 8013e60:	9b13      	ldr	r3, [sp, #76]	; 0x4c
                            if(p1.y == p2.y) p2.y++;    /*If they are the same no line will be drawn*/
 8013e62:	428e      	cmp	r6, r1
                            p1.y = y_min;
 8013e64:	f8ad 1056 	strh.w	r1, [sp, #86]	; 0x56
                            lv_draw_line(&p1, &p2, &series_mask, &line_dsc_default);
 8013e68:	aa1a      	add	r2, sp, #104	; 0x68
                            p2.x--;         /*It's already on the next x value*/
 8013e6a:	f103 3bff 	add.w	fp, r3, #4294967295
                            if(p1.y == p2.y) p2.y++;    /*If they are the same no line will be drawn*/
 8013e6e:	bf08      	it	eq
 8013e70:	3601      	addeq	r6, #1
                            lv_draw_line(&p1, &p2, &series_mask, &line_dsc_default);
 8013e72:	ab20      	add	r3, sp, #128	; 0x80
 8013e74:	a916      	add	r1, sp, #88	; 0x58
                            p2.x--;         /*It's already on the next x value*/
 8013e76:	fa0f fb8b 	sxth.w	fp, fp
                            lv_draw_line(&p1, &p2, &series_mask, &line_dsc_default);
 8013e7a:	a815      	add	r0, sp, #84	; 0x54
                            if(p1.y == p2.y) p2.y++;    /*If they are the same no line will be drawn*/
 8013e7c:	f8ad 605a 	strh.w	r6, [sp, #90]	; 0x5a
                            y_max = y_cur;
 8013e80:	462e      	mov	r6, r5
                            p2.x--;         /*It's already on the next x value*/
 8013e82:	f8ad b058 	strh.w	fp, [sp, #88]	; 0x58
                            p1.x = p2.x;
 8013e86:	f8ad b054 	strh.w	fp, [sp, #84]	; 0x54
                            lv_draw_line(&p1, &p2, &series_mask, &line_dsc_default);
 8013e8a:	f7f6 ffcf 	bl	800ae2c <lv_draw_line>
                            p2.x++;         /*Compensate the previous x--*/
 8013e8e:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
                            y_min = y_cur;  /*Start the line of the next x from the current last y*/
 8013e92:	9504      	str	r5, [sp, #16]
                            p2.x++;         /*Compensate the previous x--*/
 8013e94:	3301      	adds	r3, #1
 8013e96:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
        for(i = 0; i < chart->point_cnt; i++) {
 8013e9a:	9b05      	ldr	r3, [sp, #20]
            p_act = (start_point + i) % chart->point_cnt;
 8013e9c:	4650      	mov	r0, sl
 8013e9e:	3301      	adds	r3, #1
 8013ea0:	9305      	str	r3, [sp, #20]
 8013ea2:	e734      	b.n	8013d0e <lv_chart_event+0x7da>
                    point_area.x1 = p1.x - point_w;
 8013ea4:	b292      	uxth	r2, r2
 8013ea6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
                    point_area.y1 = p1.y - point_h;
 8013ea8:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
                    point_area.x1 = p1.x - point_w;
 8013eac:	1ad3      	subs	r3, r2, r3
 8013eae:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
                    point_area.x2 = p1.x + point_w;
 8013eb2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013eb4:	441a      	add	r2, r3
                    point_area.y1 = p1.y - point_h;
 8013eb6:	f8bd 3018 	ldrh.w	r3, [sp, #24]
                    point_area.x2 = p1.x + point_w;
 8013eba:	f8ad 2078 	strh.w	r2, [sp, #120]	; 0x78
                    point_area.y1 = p1.y - point_h;
 8013ebe:	1aca      	subs	r2, r1, r3
                    point_area.y2 = p1.y + point_h;
 8013ec0:	4419      	add	r1, r3
                    dsc.id = i - 1;
 8013ec2:	f10e 33ff 	add.w	r3, lr, #4294967295
                    point_area.y1 = p1.y - point_h;
 8013ec6:	f8ad 2076 	strh.w	r2, [sp, #118]	; 0x76
                    point_area.y2 = p1.y + point_h;
 8013eca:	f8ad 107a 	strh.w	r1, [sp, #122]	; 0x7a
                    dsc.p2 = ser->y_points[p_act] != LV_CHART_POINT_NONE ? &p2 : NULL;
 8013ece:	f647 71ff 	movw	r1, #32767	; 0x7fff
                    dsc.id = i - 1;
 8013ed2:	9348      	str	r3, [sp, #288]	; 0x120
                    dsc.p1 = ser->y_points[p_prev] != LV_CHART_POINT_NONE ? &p1 : NULL;
 8013ed4:	f93c 3010 	ldrsh.w	r3, [ip, r0, lsl #1]
                    lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &dsc);
 8013ed8:	4640      	mov	r0, r8
                    dsc.p1 = ser->y_points[p_prev] != LV_CHART_POINT_NONE ? &p1 : NULL;
 8013eda:	454b      	cmp	r3, r9
 8013edc:	bf0c      	ite	eq
 8013ede:	2200      	moveq	r2, #0
 8013ee0:	aa15      	addne	r2, sp, #84	; 0x54
 8013ee2:	9241      	str	r2, [sp, #260]	; 0x104
                    dsc.p2 = ser->y_points[p_act] != LV_CHART_POINT_NONE ? &p2 : NULL;
 8013ee4:	f93c 201a 	ldrsh.w	r2, [ip, sl, lsl #1]
                    dsc.value = ser->y_points[p_prev];
 8013ee8:	934a      	str	r3, [sp, #296]	; 0x128
                    dsc.p2 = ser->y_points[p_act] != LV_CHART_POINT_NONE ? &p2 : NULL;
 8013eea:	428a      	cmp	r2, r1
                    lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &dsc);
 8013eec:	f04f 011a 	mov.w	r1, #26
                    dsc.p2 = ser->y_points[p_act] != LV_CHART_POINT_NONE ? &p2 : NULL;
 8013ef0:	bf0c      	ite	eq
 8013ef2:	2200      	moveq	r2, #0
 8013ef4:	aa16      	addne	r2, sp, #88	; 0x58
 8013ef6:	9242      	str	r2, [sp, #264]	; 0x108
                    dsc.draw_area = &point_area;
 8013ef8:	aa1d      	add	r2, sp, #116	; 0x74
 8013efa:	923b      	str	r2, [sp, #236]	; 0xec
                    lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &dsc);
 8013efc:	aa3a      	add	r2, sp, #232	; 0xe8
 8013efe:	f7ed ffe3 	bl	8001ec8 <lv_event_send>
                    if(ser->y_points[p_prev] != LV_CHART_POINT_NONE && ser->y_points[p_act] != LV_CHART_POINT_NONE) {
 8013f02:	6863      	ldr	r3, [r4, #4]
 8013f04:	5fda      	ldrsh	r2, [r3, r7]
 8013f06:	454a      	cmp	r2, r9
 8013f08:	d009      	beq.n	8013f1e <lv_chart_event+0x9ea>
 8013f0a:	f933 301a 	ldrsh.w	r3, [r3, sl, lsl #1]
 8013f0e:	454b      	cmp	r3, r9
 8013f10:	d005      	beq.n	8013f1e <lv_chart_event+0x9ea>
                        lv_draw_line(&p1, &p2, &series_mask, &line_dsc_default);
 8013f12:	ab20      	add	r3, sp, #128	; 0x80
 8013f14:	aa1a      	add	r2, sp, #104	; 0x68
 8013f16:	a916      	add	r1, sp, #88	; 0x58
 8013f18:	a815      	add	r0, sp, #84	; 0x54
 8013f1a:	f7f6 ff87 	bl	800ae2c <lv_draw_line>
                    if(point_w && point_h && ser->y_points[p_act] != LV_CHART_POINT_NONE) {
 8013f1e:	9b03      	ldr	r3, [sp, #12]
 8013f20:	b15b      	cbz	r3, 8013f3a <lv_chart_event+0xa06>
 8013f22:	9b06      	ldr	r3, [sp, #24]
 8013f24:	b14b      	cbz	r3, 8013f3a <lv_chart_event+0xa06>
 8013f26:	6863      	ldr	r3, [r4, #4]
 8013f28:	f933 301a 	ldrsh.w	r3, [r3, sl, lsl #1]
 8013f2c:	454b      	cmp	r3, r9
 8013f2e:	d004      	beq.n	8013f3a <lv_chart_event+0xa06>
                        lv_draw_rect(&point_area, &series_mask, &point_dsc_default);
 8013f30:	aa2d      	add	r2, sp, #180	; 0xb4
 8013f32:	a91a      	add	r1, sp, #104	; 0x68
 8013f34:	a81d      	add	r0, sp, #116	; 0x74
 8013f36:	f7f8 fdc9 	bl	800cacc <lv_draw_rect>
                    lv_event_send(obj, LV_EVENT_DRAW_PART_END, &dsc);
 8013f3a:	aa3a      	add	r2, sp, #232	; 0xe8
 8013f3c:	211b      	movs	r1, #27
 8013f3e:	4640      	mov	r0, r8
 8013f40:	f7ed ffc2 	bl	8001ec8 <lv_event_send>
 8013f44:	e7a9      	b.n	8013e9a <lv_chart_event+0x966>
        else if(chart->type == LV_CHART_TYPE_BAR) draw_series_bar(obj, clip_area);
 8013f46:	2b02      	cmp	r3, #2
 8013f48:	f040 8124 	bne.w	8014194 <lv_chart_event+0xc60>
    if(_lv_area_intersect(&com_area, &obj->coords, clip_area) == false) return;
 8013f4c:	ee18 2a10 	vmov	r2, s16
 8013f50:	ee18 1a90 	vmov	r1, s17
 8013f54:	a81a      	add	r0, sp, #104	; 0x68
 8013f56:	f002 ff9e 	bl	8016e96 <_lv_area_intersect>
 8013f5a:	2800      	cmp	r0, #0
 8013f5c:	f43f ac7c 	beq.w	8013858 <lv_chart_event+0x324>
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 8013f60:	2100      	movs	r1, #0
 8013f62:	4640      	mov	r0, r8
 8013f64:	f7fe fe18 	bl	8012b98 <lv_obj_get_style_pad_left>
    lv_coord_t pad_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 8013f68:	2100      	movs	r1, #0
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 8013f6a:	9007      	str	r0, [sp, #28]
    lv_coord_t pad_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 8013f6c:	4640      	mov	r0, r8
 8013f6e:	f7fe fe28 	bl	8012bc2 <lv_obj_get_style_pad_top>
 8013f72:	9008      	str	r0, [sp, #32]
    lv_coord_t w     = (lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 8013f74:	4640      	mov	r0, r8
 8013f76:	f7f0 ff86 	bl	8004e86 <lv_obj_get_content_width>
 8013f7a:	900b      	str	r0, [sp, #44]	; 0x2c
    lv_coord_t h     = (lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 8013f7c:	4640      	mov	r0, r8
    lv_coord_t w     = (lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 8013f7e:	f8b8 b084 	ldrh.w	fp, [r8, #132]	; 0x84
    lv_coord_t h     = (lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 8013f82:	f7f0 ff9a 	bl	8004eba <lv_obj_get_content_height>
    uint32_t ser_cnt = _lv_ll_get_len(&chart->series_ll);
 8013f86:	f108 0324 	add.w	r3, r8, #36	; 0x24
    lv_coord_t h     = (lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 8013f8a:	4681      	mov	r9, r0
 8013f8c:	f8b8 5086 	ldrh.w	r5, [r8, #134]	; 0x86
    uint32_t ser_cnt = _lv_ll_get_len(&chart->series_ll);
 8013f90:	4618      	mov	r0, r3
 8013f92:	ee09 3a10 	vmov	s18, r3
 8013f96:	f003 fad7 	bl	8017548 <_lv_ll_get_len>
    int32_t block_gap = (lv_obj_get_style_pad_column(obj, LV_PART_MAIN) * chart->zoom_x) >> 8;  /*Gap between the column on ~adjacent X*/
 8013f9a:	2100      	movs	r1, #0
    uint32_t ser_cnt = _lv_ll_get_len(&chart->series_ll);
 8013f9c:	9005      	str	r0, [sp, #20]
    int32_t block_gap = (lv_obj_get_style_pad_column(obj, LV_PART_MAIN) * chart->zoom_x) >> 8;  /*Gap between the column on ~adjacent X*/
 8013f9e:	4640      	mov	r0, r8
 8013fa0:	f7fe fe08 	bl	8012bb4 <lv_obj_get_style_pad_column>
    int32_t ser_gap = (lv_obj_get_style_pad_column(obj, LV_PART_ITEMS) * chart->zoom_x) >> 8; /*Gap between the column on the ~same X*/
 8013fa4:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
    int32_t block_gap = (lv_obj_get_style_pad_column(obj, LV_PART_MAIN) * chart->zoom_x) >> 8;  /*Gap between the column on ~adjacent X*/
 8013fa8:	9009      	str	r0, [sp, #36]	; 0x24
    int32_t ser_gap = (lv_obj_get_style_pad_column(obj, LV_PART_ITEMS) * chart->zoom_x) >> 8; /*Gap between the column on the ~same X*/
 8013faa:	4640      	mov	r0, r8
    int32_t block_gap = (lv_obj_get_style_pad_column(obj, LV_PART_MAIN) * chart->zoom_x) >> 8;  /*Gap between the column on ~adjacent X*/
 8013fac:	f8b8 4084 	ldrh.w	r4, [r8, #132]	; 0x84
    lv_coord_t block_w = (w - ((chart->point_cnt - 1) * block_gap)) / chart->point_cnt;
 8013fb0:	f8b8 a082 	ldrh.w	sl, [r8, #130]	; 0x82
    int32_t ser_gap = (lv_obj_get_style_pad_column(obj, LV_PART_ITEMS) * chart->zoom_x) >> 8; /*Gap between the column on the ~same X*/
 8013fb4:	f7fe fdfe 	bl	8012bb4 <lv_obj_get_style_pad_column>
 8013fb8:	f8b8 3084 	ldrh.w	r3, [r8, #132]	; 0x84
 8013fbc:	900a      	str	r0, [sp, #40]	; 0x28
    lv_coord_t x_ofs = pad_left - lv_obj_get_scroll_left(obj);
 8013fbe:	4640      	mov	r0, r8
    int32_t ser_gap = (lv_obj_get_style_pad_column(obj, LV_PART_ITEMS) * chart->zoom_x) >> 8; /*Gap between the column on the ~same X*/
 8013fc0:	9306      	str	r3, [sp, #24]
    lv_coord_t x_ofs = pad_left - lv_obj_get_scroll_left(obj);
 8013fc2:	f7f1 fffd 	bl	8005fc0 <lv_obj_get_scroll_left>
 8013fc6:	4607      	mov	r7, r0
    lv_coord_t y_ofs = pad_top - lv_obj_get_scroll_top(obj);
 8013fc8:	4640      	mov	r0, r8
 8013fca:	f7f1 ffa3 	bl	8005f14 <lv_obj_get_scroll_top>
 8013fce:	4606      	mov	r6, r0
    lv_draw_rect_dsc_init(&col_dsc);
 8013fd0:	a82d      	add	r0, sp, #180	; 0xb4
 8013fd2:	f7f8 fd59 	bl	800ca88 <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(obj, LV_PART_ITEMS, &col_dsc);
 8013fd6:	aa2d      	add	r2, sp, #180	; 0xb4
 8013fd8:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8013fdc:	4640      	mov	r0, r8
 8013fde:	f7f0 fabf 	bl	8004560 <lv_obj_init_draw_rect_dsc>
    col_dsc.bg_opa = LV_OPA_COVER;
 8013fe2:	f8bd 20be 	ldrh.w	r2, [sp, #190]	; 0xbe
    col_a.y2 = obj->coords.y2 + col_dsc.radius;
 8013fe6:	f8bd 10b4 	ldrh.w	r1, [sp, #180]	; 0xb4
    bool mask_ret = _lv_area_intersect(&series_mask, &obj->coords, clip_area);
 8013fea:	a820      	add	r0, sp, #128	; 0x80
    col_dsc.bg_opa = LV_OPA_COVER;
 8013fec:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 8013ff0:	f022 0207 	bic.w	r2, r2, #7
 8013ff4:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 8013ff8:	f8ad 20be 	strh.w	r2, [sp, #190]	; 0xbe
    col_a.y2 = obj->coords.y2 + col_dsc.radius;
 8013ffc:	f8b8 201a 	ldrh.w	r2, [r8, #26]
 8014000:	440a      	add	r2, r1
    bool mask_ret = _lv_area_intersect(&series_mask, &obj->coords, clip_area);
 8014002:	ee18 1a90 	vmov	r1, s17
    col_a.y2 = obj->coords.y2 + col_dsc.radius;
 8014006:	f8ad 207a 	strh.w	r2, [sp, #122]	; 0x7a
    bool mask_ret = _lv_area_intersect(&series_mask, &obj->coords, clip_area);
 801400a:	ee18 2a10 	vmov	r2, s16
 801400e:	f002 ff42 	bl	8016e96 <_lv_area_intersect>
    if(mask_ret == false) return;
 8014012:	2800      	cmp	r0, #0
 8014014:	f43f ac20 	beq.w	8013858 <lv_chart_event+0x324>
    lv_coord_t h     = (lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 8014018:	fb05 f509 	mul.w	r5, r5, r9
    lv_obj_draw_dsc_init(&dsc, &series_mask);
 801401c:	a920      	add	r1, sp, #128	; 0x80
 801401e:	a83a      	add	r0, sp, #232	; 0xe8
    lv_coord_t h     = (lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 8014020:	122b      	asrs	r3, r5, #8
 8014022:	9303      	str	r3, [sp, #12]
 8014024:	f345 230f 	sbfx	r3, r5, #8, #16
    int32_t ser_gap = (lv_obj_get_style_pad_column(obj, LV_PART_ITEMS) * chart->zoom_x) >> 8; /*Gap between the column on the ~same X*/
 8014028:	9d06      	ldr	r5, [sp, #24]
    lv_coord_t h     = (lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 801402a:	9304      	str	r3, [sp, #16]
    int32_t block_gap = (lv_obj_get_style_pad_column(obj, LV_PART_MAIN) * chart->zoom_x) >> 8;  /*Gap between the column on ~adjacent X*/
 801402c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801402e:	435c      	muls	r4, r3
    lv_coord_t w     = (lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 8014030:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014032:	fb0b fb03 	mul.w	fp, fp, r3
    int32_t block_gap = (lv_obj_get_style_pad_column(obj, LV_PART_MAIN) * chart->zoom_x) >> 8;  /*Gap between the column on ~adjacent X*/
 8014036:	1224      	asrs	r4, r4, #8
    lv_coord_t block_w = (w - ((chart->point_cnt - 1) * block_gap)) / chart->point_cnt;
 8014038:	f10a 33ff 	add.w	r3, sl, #4294967295
 801403c:	f34b 2b0f 	sbfx	fp, fp, #8, #16
 8014040:	fb04 b313 	mls	r3, r4, r3, fp
        lv_coord_t x_act = (int32_t)((int32_t)(w + block_gap) * i) / (chart->point_cnt) + obj->coords.x1 + x_ofs;
 8014044:	44a3      	add	fp, r4
    lv_coord_t block_w = (w - ((chart->point_cnt - 1) * block_gap)) / chart->point_cnt;
 8014046:	fb93 fafa 	sdiv	sl, r3, sl
    lv_coord_t col_w = block_w / ser_cnt;
 801404a:	9b05      	ldr	r3, [sp, #20]
 801404c:	fa0f fa8a 	sxth.w	sl, sl
 8014050:	fbba f3f3 	udiv	r3, sl, r3
 8014054:	9305      	str	r3, [sp, #20]
    int32_t ser_gap = (lv_obj_get_style_pad_column(obj, LV_PART_ITEMS) * chart->zoom_x) >> 8; /*Gap between the column on the ~same X*/
 8014056:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014058:	435d      	muls	r5, r3
    lv_coord_t x_ofs = pad_left - lv_obj_get_scroll_left(obj);
 801405a:	9b07      	ldr	r3, [sp, #28]
 801405c:	1bdf      	subs	r7, r3, r7
    int32_t ser_gap = (lv_obj_get_style_pad_column(obj, LV_PART_ITEMS) * chart->zoom_x) >> 8; /*Gap between the column on the ~same X*/
 801405e:	122d      	asrs	r5, r5, #8
    lv_coord_t x_ofs = pad_left - lv_obj_get_scroll_left(obj);
 8014060:	b2bb      	uxth	r3, r7
 8014062:	9306      	str	r3, [sp, #24]
    lv_coord_t y_ofs = pad_top - lv_obj_get_scroll_top(obj);
 8014064:	9b08      	ldr	r3, [sp, #32]
 8014066:	1b9e      	subs	r6, r3, r6
 8014068:	b2b3      	uxth	r3, r6
    for(i = 0; i < chart->point_cnt; i++) {
 801406a:	2600      	movs	r6, #0
    lv_coord_t y_ofs = pad_top - lv_obj_get_scroll_top(obj);
 801406c:	9307      	str	r3, [sp, #28]
    lv_obj_draw_dsc_init(&dsc, &series_mask);
 801406e:	f7f0 fd5b 	bl	8004b28 <lv_obj_draw_dsc_init>
    dsc.part = LV_PART_ITEMS;
 8014072:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8014076:	9347      	str	r3, [sp, #284]	; 0x11c
            col_a.x2 = col_a.x1 + col_w - ser_gap - 1;
 8014078:	43eb      	mvns	r3, r5
 801407a:	9308      	str	r3, [sp, #32]
    for(i = 0; i < chart->point_cnt; i++) {
 801407c:	f8b8 3082 	ldrh.w	r3, [r8, #130]	; 0x82
 8014080:	b2b2      	uxth	r2, r6
 8014082:	4293      	cmp	r3, r2
 8014084:	f67f abe8 	bls.w	8013858 <lv_chart_event+0x324>
        lv_coord_t x_act = (int32_t)((int32_t)(w + block_gap) * i) / (chart->point_cnt) + obj->coords.x1 + x_ofs;
 8014088:	b2b7      	uxth	r7, r6
 801408a:	9a06      	ldr	r2, [sp, #24]
        _LV_LL_READ_BACK(&chart->series_ll, ser) {
 801408c:	ee19 0a10 	vmov	r0, s18
                dsc.draw_area = &col_a;
 8014090:	f10d 0a74 	add.w	sl, sp, #116	; 0x74
        lv_coord_t x_act = (int32_t)((int32_t)(w + block_gap) * i) / (chart->point_cnt) + obj->coords.x1 + x_ofs;
 8014094:	fb07 f90b 	mul.w	r9, r7, fp
 8014098:	fb99 f9f3 	sdiv	r9, r9, r3
 801409c:	f8b8 3014 	ldrh.w	r3, [r8, #20]
        dsc.id = i;
 80140a0:	9748      	str	r7, [sp, #288]	; 0x120
        lv_coord_t x_act = (int32_t)((int32_t)(w + block_gap) * i) / (chart->point_cnt) + obj->coords.x1 + x_ofs;
 80140a2:	4413      	add	r3, r2
 80140a4:	4499      	add	r9, r3
        _LV_LL_READ_BACK(&chart->series_ll, ser) {
 80140a6:	f003 fa45 	bl	8017534 <_lv_ll_get_tail>
 80140aa:	4604      	mov	r4, r0
        lv_coord_t x_act = (int32_t)((int32_t)(w + block_gap) * i) / (chart->point_cnt) + obj->coords.x1 + x_ofs;
 80140ac:	fa0f f989 	sxth.w	r9, r9
        _LV_LL_READ_BACK(&chart->series_ll, ser) {
 80140b0:	b1fc      	cbz	r4, 80140f2 <lv_chart_event+0xbbe>
            if (ser->hidden) continue;
 80140b2:	7b23      	ldrb	r3, [r4, #12]
 80140b4:	f013 0301 	ands.w	r3, r3, #1
 80140b8:	d16a      	bne.n	8014190 <lv_chart_event+0xc5c>
            lv_coord_t start_point = chart->update_mode == LV_CHART_UPDATE_MODE_SHIFT ? ser->start_point : 0;
 80140ba:	f898 2088 	ldrb.w	r2, [r8, #136]	; 0x88
            if(col_a.x2 < series_mask.x1) continue;
 80140be:	f9bd 1080 	ldrsh.w	r1, [sp, #128]	; 0x80
            lv_coord_t start_point = chart->update_mode == LV_CHART_UPDATE_MODE_SHIFT ? ser->start_point : 0;
 80140c2:	0712      	lsls	r2, r2, #28
            col_a.x2 = col_a.x1 + col_w - ser_gap - 1;
 80140c4:	9a05      	ldr	r2, [sp, #20]
 80140c6:	eb09 0502 	add.w	r5, r9, r2
 80140ca:	9a08      	ldr	r2, [sp, #32]
            lv_coord_t start_point = chart->update_mode == LV_CHART_UPDATE_MODE_SHIFT ? ser->start_point : 0;
 80140cc:	bf58      	it	pl
 80140ce:	f9b4 300a 	ldrshpl.w	r3, [r4, #10]
            col_a.x2 = col_a.x1 + col_w - ser_gap - 1;
 80140d2:	fa12 f285 	uxtah	r2, r2, r5
            col_a.x1 = x_act;
 80140d6:	f8ad 9074 	strh.w	r9, [sp, #116]	; 0x74
            x_act += col_w;
 80140da:	b22d      	sxth	r5, r5
            col_a.x2 = col_a.x1 + col_w - ser_gap - 1;
 80140dc:	b212      	sxth	r2, r2
            if(col_a.x2 < series_mask.x1) continue;
 80140de:	4291      	cmp	r1, r2
            col_a.x2 = col_a.x1 + col_w - ser_gap - 1;
 80140e0:	f8ad 2078 	strh.w	r2, [sp, #120]	; 0x78
            if(col_a.x2 < series_mask.x1) continue;
 80140e4:	dc4c      	bgt.n	8014180 <lv_chart_event+0xc4c>
            if(col_a.x1 > series_mask.x2) break;
 80140e6:	f9bd 1084 	ldrsh.w	r1, [sp, #132]	; 0x84
 80140ea:	f8b8 2082 	ldrh.w	r2, [r8, #130]	; 0x82
 80140ee:	4549      	cmp	r1, r9
 80140f0:	da01      	bge.n	80140f6 <lv_chart_event+0xbc2>
    for(i = 0; i < chart->point_cnt; i++) {
 80140f2:	3601      	adds	r6, #1
 80140f4:	e7c2      	b.n	801407c <lv_chart_event+0xb48>
            col_dsc.bg_color = ser->color;
 80140f6:	8921      	ldrh	r1, [r4, #8]
            lv_coord_t p_act = (start_point + i) % chart->point_cnt;
 80140f8:	443b      	add	r3, r7
            y_tmp            = (int32_t)((int32_t)ser->y_points[p_act] - chart->ymin[ser->y_axis_sec]) * h;
 80140fa:	7b20      	ldrb	r0, [r4, #12]
            col_dsc.bg_color = ser->color;
 80140fc:	f8ad 10b8 	strh.w	r1, [sp, #184]	; 0xb8
            y_tmp            = (int32_t)((int32_t)ser->y_points[p_act] - chart->ymin[ser->y_axis_sec]) * h;
 8014100:	f3c0 1000 	ubfx	r0, r0, #4, #1
 8014104:	f8d4 c004 	ldr.w	ip, [r4, #4]
            lv_coord_t p_act = (start_point + i) % chart->point_cnt;
 8014108:	fb93 f1f2 	sdiv	r1, r3, r2
 801410c:	fb02 3111 	mls	r1, r2, r1, r3
 8014110:	eb08 0040 	add.w	r0, r8, r0, lsl #1
            y_tmp            = (int32_t)((int32_t)ser->y_points[p_act] - chart->ymin[ser->y_axis_sec]) * h;
 8014114:	9b04      	ldr	r3, [sp, #16]
 8014116:	b209      	sxth	r1, r1
 8014118:	f9b0 e06c 	ldrsh.w	lr, [r0, #108]	; 0x6c
            y_tmp            = y_tmp / (chart->ymax[ser->y_axis_sec] - chart->ymin[ser->y_axis_sec]);
 801411c:	f9b0 0070 	ldrsh.w	r0, [r0, #112]	; 0x70
            y_tmp            = (int32_t)((int32_t)ser->y_points[p_act] - chart->ymin[ser->y_axis_sec]) * h;
 8014120:	f93c 2011 	ldrsh.w	r2, [ip, r1, lsl #1]
 8014124:	eba2 020e 	sub.w	r2, r2, lr
            y_tmp            = y_tmp / (chart->ymax[ser->y_axis_sec] - chart->ymin[ser->y_axis_sec]);
 8014128:	eba0 0e0e 	sub.w	lr, r0, lr
            y_tmp            = (int32_t)((int32_t)ser->y_points[p_act] - chart->ymin[ser->y_axis_sec]) * h;
 801412c:	fb03 f902 	mul.w	r9, r3, r2
            col_a.y1         = h - y_tmp + obj->coords.y1 + y_ofs;
 8014130:	f8b8 3016 	ldrh.w	r3, [r8, #22]
 8014134:	9a07      	ldr	r2, [sp, #28]
 8014136:	4413      	add	r3, r2
 8014138:	9a03      	ldr	r2, [sp, #12]
 801413a:	4413      	add	r3, r2
            y_tmp            = y_tmp / (chart->ymax[ser->y_axis_sec] - chart->ymin[ser->y_axis_sec]);
 801413c:	fb99 f2fe 	sdiv	r2, r9, lr
            col_a.y1         = h - y_tmp + obj->coords.y1 + y_ofs;
 8014140:	1a9b      	subs	r3, r3, r2
            if(ser->y_points[p_act] != LV_CHART_POINT_NONE) {
 8014142:	f647 72ff 	movw	r2, #32767	; 0x7fff
            col_a.y1         = h - y_tmp + obj->coords.y1 + y_ofs;
 8014146:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
            if(ser->y_points[p_act] != LV_CHART_POINT_NONE) {
 801414a:	f93c 3011 	ldrsh.w	r3, [ip, r1, lsl #1]
 801414e:	4293      	cmp	r3, r2
 8014150:	d016      	beq.n	8014180 <lv_chart_event+0xc4c>
                dsc.rect_dsc = &col_dsc;
 8014152:	f10d 09b4 	add.w	r9, sp, #180	; 0xb4
                lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &dsc);
 8014156:	aa3a      	add	r2, sp, #232	; 0xe8
 8014158:	211a      	movs	r1, #26
 801415a:	4640      	mov	r0, r8
                dsc.draw_area = &col_a;
 801415c:	f8cd a0ec 	str.w	sl, [sp, #236]	; 0xec
                dsc.rect_dsc = &col_dsc;
 8014160:	f8cd 90f0 	str.w	r9, [sp, #240]	; 0xf0
                dsc.value = ser->y_points[p_act];
 8014164:	e9cd 344a 	strd	r3, r4, [sp, #296]	; 0x128
                lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &dsc);
 8014168:	f7ed feae 	bl	8001ec8 <lv_event_send>
                lv_draw_rect(&col_a, &series_mask, &col_dsc);
 801416c:	464a      	mov	r2, r9
 801416e:	a920      	add	r1, sp, #128	; 0x80
 8014170:	4650      	mov	r0, sl
 8014172:	f7f8 fcab 	bl	800cacc <lv_draw_rect>
                lv_event_send(obj, LV_EVENT_DRAW_PART_END, &dsc);
 8014176:	aa3a      	add	r2, sp, #232	; 0xe8
 8014178:	211b      	movs	r1, #27
 801417a:	4640      	mov	r0, r8
 801417c:	f7ed fea4 	bl	8001ec8 <lv_event_send>
        _LV_LL_READ_BACK(&chart->series_ll, ser) {
 8014180:	4621      	mov	r1, r4
 8014182:	ee19 0a10 	vmov	r0, s18
 8014186:	f003 f9dc 	bl	8017542 <_lv_ll_get_prev>
 801418a:	46a9      	mov	r9, r5
 801418c:	4604      	mov	r4, r0
 801418e:	e78f      	b.n	80140b0 <lv_chart_event+0xb7c>
 8014190:	464d      	mov	r5, r9
 8014192:	e7f5      	b.n	8014180 <lv_chart_event+0xc4c>
        else if(chart->type == LV_CHART_TYPE_SCATTER) draw_series_scatter(obj, clip_area);
 8014194:	2b03      	cmp	r3, #3
 8014196:	f47f ab5f 	bne.w	8013858 <lv_chart_event+0x324>
    if(_lv_area_intersect(&com_area, &obj->coords, clip_area) == false) return;
 801419a:	ee18 2a10 	vmov	r2, s16
 801419e:	ee18 1a90 	vmov	r1, s17
 80141a2:	a818      	add	r0, sp, #96	; 0x60
 80141a4:	f002 fe77 	bl	8016e96 <_lv_area_intersect>
 80141a8:	2800      	cmp	r0, #0
 80141aa:	f43f ab55 	beq.w	8013858 <lv_chart_event+0x324>
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 80141ae:	4640      	mov	r0, r8
 80141b0:	f7fe fe01 	bl	8012db6 <lv_obj_get_style_border_width.constprop.0>
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 80141b4:	2100      	movs	r1, #0
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 80141b6:	4604      	mov	r4, r0
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 80141b8:	4640      	mov	r0, r8
 80141ba:	f7fe fced 	bl	8012b98 <lv_obj_get_style_pad_left>
    lv_coord_t pad_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 80141be:	2100      	movs	r1, #0
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 80141c0:	4605      	mov	r5, r0
    lv_coord_t pad_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 80141c2:	4640      	mov	r0, r8
 80141c4:	f7fe fcfd 	bl	8012bc2 <lv_obj_get_style_pad_top>
 80141c8:	900a      	str	r0, [sp, #40]	; 0x28
    lv_coord_t w     = (lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 80141ca:	4640      	mov	r0, r8
 80141cc:	f7f0 fe5b 	bl	8004e86 <lv_obj_get_content_width>
 80141d0:	f8b8 3084 	ldrh.w	r3, [r8, #132]	; 0x84
 80141d4:	4681      	mov	r9, r0
    lv_coord_t h     = (lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 80141d6:	4640      	mov	r0, r8
    lv_coord_t w     = (lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 80141d8:	9305      	str	r3, [sp, #20]
    lv_coord_t h     = (lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 80141da:	f7f0 fe6e 	bl	8004eba <lv_obj_get_content_height>
 80141de:	4607      	mov	r7, r0
    lv_coord_t x_ofs = obj->coords.x1 + pad_left + border_width - lv_obj_get_scroll_left(obj);
 80141e0:	4640      	mov	r0, r8
    lv_coord_t h     = (lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 80141e2:	f8b8 6086 	ldrh.w	r6, [r8, #134]	; 0x86
    lv_coord_t x_ofs = obj->coords.x1 + pad_left + border_width - lv_obj_get_scroll_left(obj);
 80141e6:	f9b8 b014 	ldrsh.w	fp, [r8, #20]
 80141ea:	f7f1 fee9 	bl	8005fc0 <lv_obj_get_scroll_left>
    lv_coord_t y_ofs = obj->coords.y1 + pad_top + border_width - lv_obj_get_scroll_top(obj);
 80141ee:	f9b8 3016 	ldrsh.w	r3, [r8, #22]
    lv_coord_t x_ofs = obj->coords.x1 + pad_left + border_width - lv_obj_get_scroll_left(obj);
 80141f2:	9008      	str	r0, [sp, #32]
    lv_coord_t y_ofs = obj->coords.y1 + pad_top + border_width - lv_obj_get_scroll_top(obj);
 80141f4:	4640      	mov	r0, r8
 80141f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80141f8:	f7f1 fe8c 	bl	8005f14 <lv_obj_get_scroll_top>
    bool mask_ret = _lv_area_intersect(&series_mask, &obj->coords, clip_area);
 80141fc:	ee18 2a10 	vmov	r2, s16
    lv_coord_t y_ofs = obj->coords.y1 + pad_top + border_width - lv_obj_get_scroll_top(obj);
 8014200:	4682      	mov	sl, r0
    bool mask_ret = _lv_area_intersect(&series_mask, &obj->coords, clip_area);
 8014202:	ee18 1a90 	vmov	r1, s17
 8014206:	a81a      	add	r0, sp, #104	; 0x68
 8014208:	f002 fe45 	bl	8016e96 <_lv_area_intersect>
    if(mask_ret == false) return;
 801420c:	2800      	cmp	r0, #0
 801420e:	f43f ab23 	beq.w	8013858 <lv_chart_event+0x324>
    lv_draw_line_dsc_init(&line_dsc_default);
 8014212:	a820      	add	r0, sp, #128	; 0x80
    lv_coord_t h     = (lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 8014214:	437e      	muls	r6, r7
    lv_draw_line_dsc_init(&line_dsc_default);
 8014216:	f7f6 fdfd 	bl	800ae14 <lv_draw_line_dsc_init>
    lv_obj_init_draw_line_dsc(obj, LV_PART_ITEMS, &line_dsc_default);
 801421a:	aa20      	add	r2, sp, #128	; 0x80
 801421c:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8014220:	4640      	mov	r0, r8
 8014222:	f7f0 fb81 	bl	8004928 <lv_obj_init_draw_line_dsc>
    lv_draw_rect_dsc_init(&point_dsc_default);
 8014226:	a82d      	add	r0, sp, #180	; 0xb4
 8014228:	f7f8 fc2e 	bl	800ca88 <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(obj, LV_PART_INDICATOR, &point_dsc_default);
 801422c:	aa2d      	add	r2, sp, #180	; 0xb4
 801422e:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8014232:	4640      	mov	r0, r8
 8014234:	f7f0 f994 	bl	8004560 <lv_obj_init_draw_rect_dsc>
    lv_coord_t point_w = lv_obj_get_style_width(obj, LV_PART_INDICATOR) / 2;
 8014238:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 801423c:	4640      	mov	r0, r8
    lv_coord_t x_ofs = obj->coords.x1 + pad_left + border_width - lv_obj_get_scroll_left(obj);
 801423e:	fa15 f584 	uxtah	r5, r5, r4
    lv_coord_t point_w = lv_obj_get_style_width(obj, LV_PART_INDICATOR) / 2;
 8014242:	f7fe fcb0 	bl	8012ba6 <lv_obj_get_style_width>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 8014246:	f241 0204 	movw	r2, #4100	; 0x1004
 801424a:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 801424e:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    lv_coord_t x_ofs = obj->coords.x1 + pad_left + border_width - lv_obj_get_scroll_left(obj);
 8014252:	44ab      	add	fp, r5
    lv_coord_t point_w = lv_obj_get_style_width(obj, LV_PART_INDICATOR) / 2;
 8014254:	f340 034f 	sbfx	r3, r0, #1, #16
 8014258:	4640      	mov	r0, r8
 801425a:	9303      	str	r3, [sp, #12]
 801425c:	f7f3 f884 	bl	8007368 <lv_obj_get_style_prop>
    lv_coord_t point_h = lv_obj_get_style_height(obj, LV_PART_INDICATOR) / 2;
 8014260:	f3c0 33c0 	ubfx	r3, r0, #15, #1
 8014264:	fa03 f080 	sxtah	r0, r3, r0
 8014268:	1043      	asrs	r3, r0, #1
 801426a:	9304      	str	r3, [sp, #16]
    if(LV_MIN(point_w, point_h) > line_dsc_default.width / 2) line_dsc_default.raw_end = 1;
 801426c:	f9bd 3082 	ldrsh.w	r3, [sp, #130]	; 0x82
 8014270:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 8014274:	428a      	cmp	r2, r1
 8014276:	bfa8      	it	ge
 8014278:	460a      	movge	r2, r1
 801427a:	eb03 71d3 	add.w	r1, r3, r3, lsr #31
 801427e:	b212      	sxth	r2, r2
 8014280:	ebb2 0f61 	cmp.w	r2, r1, asr #1
 8014284:	bfc2      	ittt	gt
 8014286:	f89d 2089 	ldrbgt.w	r2, [sp, #137]	; 0x89
 801428a:	f042 0210 	orrgt.w	r2, r2, #16
 801428e:	f88d 2089 	strbgt.w	r2, [sp, #137]	; 0x89
    if(line_dsc_default.width == 1) line_dsc_default.raw_end = 1;
 8014292:	2b01      	cmp	r3, #1
 8014294:	bf02      	ittt	eq
 8014296:	f89d 3089 	ldrbeq.w	r3, [sp, #137]	; 0x89
 801429a:	f043 0310 	orreq.w	r3, r3, #16
 801429e:	f88d 3089 	strbeq.w	r3, [sp, #137]	; 0x89
    lv_coord_t w     = (lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 80142a2:	9b05      	ldr	r3, [sp, #20]
 80142a4:	fb03 f309 	mul.w	r3, r3, r9
 80142a8:	f343 230f 	sbfx	r3, r3, #8, #16
 80142ac:	9305      	str	r3, [sp, #20]
    lv_coord_t h     = (lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 80142ae:	1233      	asrs	r3, r6, #8
 80142b0:	9306      	str	r3, [sp, #24]
 80142b2:	f346 230f 	sbfx	r3, r6, #8, #16
 80142b6:	9307      	str	r3, [sp, #28]
    lv_coord_t x_ofs = obj->coords.x1 + pad_left + border_width - lv_obj_get_scroll_left(obj);
 80142b8:	9b08      	ldr	r3, [sp, #32]
 80142ba:	ebab 0b03 	sub.w	fp, fp, r3
 80142be:	fa1f f38b 	uxth.w	r3, fp
 80142c2:	9308      	str	r3, [sp, #32]
 80142c4:	fa0f f38b 	sxth.w	r3, fp
            if(ser->y_points[p_act] != LV_CHART_POINT_NONE) {
 80142c8:	f647 7bff 	movw	fp, #32767	; 0x7fff
    lv_coord_t x_ofs = obj->coords.x1 + pad_left + border_width - lv_obj_get_scroll_left(obj);
 80142cc:	9309      	str	r3, [sp, #36]	; 0x24
    lv_coord_t y_ofs = obj->coords.y1 + pad_top + border_width - lv_obj_get_scroll_top(obj);
 80142ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80142d0:	fa13 f484 	uxtah	r4, r3, r4
 80142d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80142d6:	441c      	add	r4, r3
 80142d8:	eba4 0a0a 	sub.w	sl, r4, sl
 80142dc:	fa1f f38a 	uxth.w	r3, sl
 80142e0:	930a      	str	r3, [sp, #40]	; 0x28
    _LV_LL_READ_BACK(&chart->series_ll, ser) {
 80142e2:	f108 0324 	add.w	r3, r8, #36	; 0x24
 80142e6:	4618      	mov	r0, r3
 80142e8:	ee09 3a10 	vmov	s18, r3
 80142ec:	f003 f922 	bl	8017534 <_lv_ll_get_tail>
 80142f0:	4604      	mov	r4, r0
 80142f2:	2c00      	cmp	r4, #0
 80142f4:	f43f aab0 	beq.w	8013858 <lv_chart_event+0x324>
        if (ser->hidden) continue;
 80142f8:	7b25      	ldrb	r5, [r4, #12]
 80142fa:	f015 0501 	ands.w	r5, r5, #1
 80142fe:	d006      	beq.n	801430e <lv_chart_event+0xdda>
    _LV_LL_READ_BACK(&chart->series_ll, ser) {
 8014300:	4621      	mov	r1, r4
 8014302:	ee19 0a10 	vmov	r0, s18
 8014306:	f003 f91c 	bl	8017542 <_lv_ll_get_prev>
 801430a:	4604      	mov	r4, r0
 801430c:	e7f1      	b.n	80142f2 <lv_chart_event+0xdbe>
        line_dsc_default.color = ser->color;
 801430e:	8923      	ldrh	r3, [r4, #8]
 8014310:	f8ad 3080 	strh.w	r3, [sp, #128]	; 0x80
        point_dsc_default.bg_color = ser->color;
 8014314:	8923      	ldrh	r3, [r4, #8]
 8014316:	f8ad 30b8 	strh.w	r3, [sp, #184]	; 0xb8
        lv_coord_t start_point = chart->update_mode == LV_CHART_UPDATE_MODE_SHIFT ? ser->start_point : 0;
 801431a:	f898 3088 	ldrb.w	r3, [r8, #136]	; 0x88
 801431e:	071e      	lsls	r6, r3, #28
        p1.x = x_ofs;
 8014320:	9b09      	ldr	r3, [sp, #36]	; 0x24
        lv_coord_t start_point = chart->update_mode == LV_CHART_UPDATE_MODE_SHIFT ? ser->start_point : 0;
 8014322:	bf58      	it	pl
 8014324:	f9b4 500a 	ldrshpl.w	r5, [r4, #10]
        p1.x = x_ofs;
 8014328:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
        p2.x = x_ofs;
 801432c:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
        if(ser->y_points[p_act] != LV_CHART_POINT_CNT_DEF) {
 8014330:	6863      	ldr	r3, [r4, #4]
 8014332:	f933 3015 	ldrsh.w	r3, [r3, r5, lsl #1]
 8014336:	2b0a      	cmp	r3, #10
 8014338:	d079      	beq.n	801442e <lv_chart_event+0xefa>
            p2.x = lv_map(ser->x_points[p_act], chart->xmin[ser->x_axis_sec], chart->xmax[ser->x_axis_sec], 0, w);
 801433a:	7b23      	ldrb	r3, [r4, #12]
 801433c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8014340:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 8014344:	f9b3 2078 	ldrsh.w	r2, [r3, #120]	; 0x78
 8014348:	f9b3 1074 	ldrsh.w	r1, [r3, #116]	; 0x74
 801434c:	6823      	ldr	r3, [r4, #0]
 801434e:	f933 0015 	ldrsh.w	r0, [r3, r5, lsl #1]
 8014352:	9b05      	ldr	r3, [sp, #20]
 8014354:	9300      	str	r3, [sp, #0]
 8014356:	2300      	movs	r3, #0
 8014358:	f003 f9bd 	bl	80176d6 <lv_map>
            p2.x += x_ofs;
 801435c:	9b08      	ldr	r3, [sp, #32]
 801435e:	4418      	add	r0, r3
            p2.y = lv_map(ser->y_points[p_act], chart->ymin[ser->y_axis_sec], chart->ymax[ser->y_axis_sec], 0, h);
 8014360:	7b23      	ldrb	r3, [r4, #12]
 8014362:	f3c3 1300 	ubfx	r3, r3, #4, #1
            p2.x += x_ofs;
 8014366:	f8ad 0058 	strh.w	r0, [sp, #88]	; 0x58
            p2.y = lv_map(ser->y_points[p_act], chart->ymin[ser->y_axis_sec], chart->ymax[ser->y_axis_sec], 0, h);
 801436a:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 801436e:	f9b3 2070 	ldrsh.w	r2, [r3, #112]	; 0x70
 8014372:	f9b3 106c 	ldrsh.w	r1, [r3, #108]	; 0x6c
 8014376:	6863      	ldr	r3, [r4, #4]
 8014378:	f933 0015 	ldrsh.w	r0, [r3, r5, lsl #1]
 801437c:	9b07      	ldr	r3, [sp, #28]
 801437e:	9300      	str	r3, [sp, #0]
 8014380:	2300      	movs	r3, #0
 8014382:	f003 f9a8 	bl	80176d6 <lv_map>
            p2.y += y_ofs;
 8014386:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014388:	9a06      	ldr	r2, [sp, #24]
 801438a:	4413      	add	r3, r2
 801438c:	1a18      	subs	r0, r3, r0
 801438e:	f8ad 005a 	strh.w	r0, [sp, #90]	; 0x5a
        lv_obj_draw_dsc_init(&dsc, clip_area);
 8014392:	ee18 1a10 	vmov	r1, s16
 8014396:	a83a      	add	r0, sp, #232	; 0xe8
 8014398:	f7f0 fbc6 	bl	8004b28 <lv_obj_draw_dsc_init>
        dsc.part = LV_PART_ITEMS;
 801439c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
                p2.y += y_ofs;
 80143a0:	9a06      	ldr	r2, [sp, #24]
        lv_coord_t p_act = start_point;
 80143a2:	46aa      	mov	sl, r5
        dsc.part = LV_PART_ITEMS;
 80143a4:	9347      	str	r3, [sp, #284]	; 0x11c
        dsc.line_dsc = &line_dsc_default;
 80143a6:	ab20      	add	r3, sp, #128	; 0x80
        for(i = 0; i < chart->point_cnt; i++) {
 80143a8:	2600      	movs	r6, #0
        dsc.sub_part_ptr = ser;
 80143aa:	944b      	str	r4, [sp, #300]	; 0x12c
        dsc.line_dsc = &line_dsc_default;
 80143ac:	933e      	str	r3, [sp, #248]	; 0xf8
        dsc.rect_dsc = &point_dsc_default;
 80143ae:	ab2d      	add	r3, sp, #180	; 0xb4
 80143b0:	933c      	str	r3, [sp, #240]	; 0xf0
                p2.y += y_ofs;
 80143b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80143b4:	4413      	add	r3, r2
 80143b6:	930c      	str	r3, [sp, #48]	; 0x30
 80143b8:	fa1f f986 	uxth.w	r9, r6
        for(i = 0; i < chart->point_cnt; i++) {
 80143bc:	f8b8 3082 	ldrh.w	r3, [r8, #130]	; 0x82
 80143c0:	4599      	cmp	r9, r3
 80143c2:	d338      	bcc.n	8014436 <lv_chart_event+0xf02>
        if(i == chart->point_cnt) {
 80143c4:	d19c      	bne.n	8014300 <lv_chart_event+0xdcc>
            if(ser->y_points[p_act] != LV_CHART_POINT_NONE) {
 80143c6:	6862      	ldr	r2, [r4, #4]
 80143c8:	f932 301a 	ldrsh.w	r3, [r2, sl, lsl #1]
 80143cc:	455b      	cmp	r3, fp
 80143ce:	d097      	beq.n	8014300 <lv_chart_event+0xdcc>
                point_area.x1 = p2.x - point_w;
 80143d0:	f8bd 100c 	ldrh.w	r1, [sp, #12]
                dsc.draw_area = &point_area;
 80143d4:	ad1d      	add	r5, sp, #116	; 0x74
                point_area.x1 = p2.x - point_w;
 80143d6:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
                dsc.id = i - 1;
 80143da:	f109 36ff 	add.w	r6, r9, #4294967295
                dsc.draw_area = &point_area;
 80143de:	953b      	str	r5, [sp, #236]	; 0xec
                point_area.x1 = p2.x - point_w;
 80143e0:	1a58      	subs	r0, r3, r1
                point_area.x2 = p2.x + point_w;
 80143e2:	440b      	add	r3, r1
                point_area.y1 = p2.y - point_h;
 80143e4:	f8bd 1010 	ldrh.w	r1, [sp, #16]
                point_area.x2 = p2.x + point_w;
 80143e8:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
                point_area.y1 = p2.y - point_h;
 80143ec:	f8bd 305a 	ldrh.w	r3, [sp, #90]	; 0x5a
                point_area.x1 = p2.x - point_w;
 80143f0:	f8ad 0074 	strh.w	r0, [sp, #116]	; 0x74
                point_area.y1 = p2.y - point_h;
 80143f4:	1a58      	subs	r0, r3, r1
                point_area.y2 = p2.y + point_h;
 80143f6:	440b      	add	r3, r1
                lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &dsc);
 80143f8:	211a      	movs	r1, #26
                dsc.id = i - 1;
 80143fa:	9648      	str	r6, [sp, #288]	; 0x120
                point_area.y2 = p2.y + point_h;
 80143fc:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
                dsc.p1 = NULL;
 8014400:	2300      	movs	r3, #0
                point_area.y1 = p2.y - point_h;
 8014402:	f8ad 0076 	strh.w	r0, [sp, #118]	; 0x76
                lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &dsc);
 8014406:	4640      	mov	r0, r8
                dsc.p2 = NULL;
 8014408:	e9cd 3341 	strd	r3, r3, [sp, #260]	; 0x104
                dsc.value = ser->y_points[p_act];
 801440c:	f932 301a 	ldrsh.w	r3, [r2, sl, lsl #1]
                lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &dsc);
 8014410:	aa3a      	add	r2, sp, #232	; 0xe8
                dsc.value = ser->y_points[p_act];
 8014412:	934a      	str	r3, [sp, #296]	; 0x128
                lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &dsc);
 8014414:	f7ed fd58 	bl	8001ec8 <lv_event_send>
                lv_draw_rect(&point_area, &series_mask, &point_dsc_default);
 8014418:	aa2d      	add	r2, sp, #180	; 0xb4
 801441a:	a91a      	add	r1, sp, #104	; 0x68
 801441c:	4628      	mov	r0, r5
 801441e:	f7f8 fb55 	bl	800cacc <lv_draw_rect>
                lv_event_send(obj, LV_EVENT_DRAW_PART_END, &dsc);
 8014422:	aa3a      	add	r2, sp, #232	; 0xe8
 8014424:	211b      	movs	r1, #27
 8014426:	4640      	mov	r0, r8
 8014428:	f7ed fd4e 	bl	8001ec8 <lv_event_send>
 801442c:	e768      	b.n	8014300 <lv_chart_event+0xdcc>
            p2.x = LV_COORD_MIN;
 801442e:	f04f 23a0 	mov.w	r3, #2684395520	; 0xa000a000
 8014432:	9316      	str	r3, [sp, #88]	; 0x58
 8014434:	e7ad      	b.n	8014392 <lv_chart_event+0xe5e>
            p1.x = p2.x;
 8014436:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8014438:	9215      	str	r2, [sp, #84]	; 0x54
            p_act = (start_point + i) % chart->point_cnt;
 801443a:	b2b2      	uxth	r2, r6
 801443c:	920b      	str	r2, [sp, #44]	; 0x2c
 801443e:	fa15 f286 	uxtah	r2, r5, r6
 8014442:	fb92 f7f3 	sdiv	r7, r2, r3
 8014446:	fb03 2717 	mls	r7, r3, r7, r2
            if(ser->y_points[p_act] != LV_CHART_POINT_NONE) {
 801444a:	6863      	ldr	r3, [r4, #4]
            p_act = (start_point + i) % chart->point_cnt;
 801444c:	b23f      	sxth	r7, r7
            if(ser->y_points[p_act] != LV_CHART_POINT_NONE) {
 801444e:	f933 0017 	ldrsh.w	r0, [r3, r7, lsl #1]
 8014452:	4558      	cmp	r0, fp
 8014454:	d079      	beq.n	801454a <lv_chart_event+0x1016>
                p2.y = lv_map(ser->y_points[p_act], chart->ymin[ser->y_axis_sec], chart->ymax[ser->y_axis_sec], 0, h);
 8014456:	7b23      	ldrb	r3, [r4, #12]
 8014458:	f3c3 1300 	ubfx	r3, r3, #4, #1
 801445c:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 8014460:	f9b3 2070 	ldrsh.w	r2, [r3, #112]	; 0x70
 8014464:	f9b3 106c 	ldrsh.w	r1, [r3, #108]	; 0x6c
 8014468:	9b07      	ldr	r3, [sp, #28]
 801446a:	9300      	str	r3, [sp, #0]
 801446c:	2300      	movs	r3, #0
 801446e:	f003 f932 	bl	80176d6 <lv_map>
                p2.y += y_ofs;
 8014472:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014474:	1a18      	subs	r0, r3, r0
                p2.x = lv_map(ser->x_points[p_act], chart->xmin[ser->x_axis_sec], chart->xmax[ser->x_axis_sec], 0, w);
 8014476:	7b23      	ldrb	r3, [r4, #12]
 8014478:	f3c3 03c0 	ubfx	r3, r3, #3, #1
                p2.y += y_ofs;
 801447c:	f8ad 005a 	strh.w	r0, [sp, #90]	; 0x5a
                p2.x = lv_map(ser->x_points[p_act], chart->xmin[ser->x_axis_sec], chart->xmax[ser->x_axis_sec], 0, w);
 8014480:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 8014484:	f9b3 2078 	ldrsh.w	r2, [r3, #120]	; 0x78
 8014488:	f9b3 1074 	ldrsh.w	r1, [r3, #116]	; 0x74
 801448c:	6823      	ldr	r3, [r4, #0]
 801448e:	f933 0017 	ldrsh.w	r0, [r3, r7, lsl #1]
 8014492:	9b05      	ldr	r3, [sp, #20]
 8014494:	9300      	str	r3, [sp, #0]
 8014496:	2300      	movs	r3, #0
 8014498:	f003 f91d 	bl	80176d6 <lv_map>
                p2.x += x_ofs;
 801449c:	9b08      	ldr	r3, [sp, #32]
 801449e:	4418      	add	r0, r3
 80144a0:	f8ad 0058 	strh.w	r0, [sp, #88]	; 0x58
            if(i != 0) {
 80144a4:	f1b9 0f00 	cmp.w	r9, #0
 80144a8:	d04f      	beq.n	801454a <lv_chart_event+0x1016>
                point_area.x1 = p1.x - point_w;
 80144aa:	f8bd 200c 	ldrh.w	r2, [sp, #12]
                dsc.p1 = ser->y_points[p_prev] != LV_CHART_POINT_NONE ? &p1 : NULL;
 80144ae:	ea4f 094a 	mov.w	r9, sl, lsl #1
                point_area.x1 = p1.x - point_w;
 80144b2:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
                lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &dsc);
 80144b6:	4640      	mov	r0, r8
                point_area.x1 = p1.x - point_w;
 80144b8:	1a99      	subs	r1, r3, r2
                point_area.x2 = p1.x + point_w;
 80144ba:	4413      	add	r3, r2
                point_area.y1 = p1.y - point_h;
 80144bc:	f8bd 2010 	ldrh.w	r2, [sp, #16]
                point_area.x2 = p1.x + point_w;
 80144c0:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
                point_area.y1 = p1.y - point_h;
 80144c4:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
                point_area.x1 = p1.x - point_w;
 80144c8:	f8ad 1074 	strh.w	r1, [sp, #116]	; 0x74
                point_area.y1 = p1.y - point_h;
 80144cc:	1a99      	subs	r1, r3, r2
                point_area.y2 = p1.y + point_h;
 80144ce:	4413      	add	r3, r2
                dsc.p1 = ser->y_points[p_prev] != LV_CHART_POINT_NONE ? &p1 : NULL;
 80144d0:	6862      	ldr	r2, [r4, #4]
                point_area.y2 = p1.y + point_h;
 80144d2:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
                dsc.id = i - 1;
 80144d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
                point_area.y1 = p1.y - point_h;
 80144d8:	f8ad 1076 	strh.w	r1, [sp, #118]	; 0x76
                dsc.id = i - 1;
 80144dc:	3b01      	subs	r3, #1
 80144de:	9348      	str	r3, [sp, #288]	; 0x120
                dsc.p1 = ser->y_points[p_prev] != LV_CHART_POINT_NONE ? &p1 : NULL;
 80144e0:	f932 301a 	ldrsh.w	r3, [r2, sl, lsl #1]
                dsc.draw_area = &point_area;
 80144e4:	f10d 0a74 	add.w	sl, sp, #116	; 0x74
                dsc.p2 = ser->y_points[p_act] != LV_CHART_POINT_NONE ? &p2 : NULL;
 80144e8:	f932 2017 	ldrsh.w	r2, [r2, r7, lsl #1]
                dsc.p1 = ser->y_points[p_prev] != LV_CHART_POINT_NONE ? &p1 : NULL;
 80144ec:	455b      	cmp	r3, fp
                dsc.value = ser->y_points[p_prev];
 80144ee:	934a      	str	r3, [sp, #296]	; 0x128
                dsc.draw_area = &point_area;
 80144f0:	f8cd a0ec 	str.w	sl, [sp, #236]	; 0xec
                dsc.p1 = ser->y_points[p_prev] != LV_CHART_POINT_NONE ? &p1 : NULL;
 80144f4:	bf0c      	ite	eq
 80144f6:	2100      	moveq	r1, #0
 80144f8:	a915      	addne	r1, sp, #84	; 0x54
                dsc.p2 = ser->y_points[p_act] != LV_CHART_POINT_NONE ? &p2 : NULL;
 80144fa:	455a      	cmp	r2, fp
                dsc.p1 = ser->y_points[p_prev] != LV_CHART_POINT_NONE ? &p1 : NULL;
 80144fc:	9141      	str	r1, [sp, #260]	; 0x104
                lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &dsc);
 80144fe:	f04f 011a 	mov.w	r1, #26
                dsc.p2 = ser->y_points[p_act] != LV_CHART_POINT_NONE ? &p2 : NULL;
 8014502:	bf0c      	ite	eq
 8014504:	2200      	moveq	r2, #0
 8014506:	aa16      	addne	r2, sp, #88	; 0x58
 8014508:	9242      	str	r2, [sp, #264]	; 0x108
                lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &dsc);
 801450a:	aa3a      	add	r2, sp, #232	; 0xe8
 801450c:	f7ed fcdc 	bl	8001ec8 <lv_event_send>
                if(ser->y_points[p_prev] != LV_CHART_POINT_NONE && ser->y_points[p_act] != LV_CHART_POINT_NONE) {
 8014510:	6863      	ldr	r3, [r4, #4]
 8014512:	f933 2009 	ldrsh.w	r2, [r3, r9]
 8014516:	455a      	cmp	r2, fp
 8014518:	d012      	beq.n	8014540 <lv_chart_event+0x100c>
 801451a:	f933 3017 	ldrsh.w	r3, [r3, r7, lsl #1]
 801451e:	455b      	cmp	r3, fp
 8014520:	d00e      	beq.n	8014540 <lv_chart_event+0x100c>
                    lv_draw_line(&p1, &p2, &series_mask, &line_dsc_default);
 8014522:	ab20      	add	r3, sp, #128	; 0x80
 8014524:	aa1a      	add	r2, sp, #104	; 0x68
 8014526:	a916      	add	r1, sp, #88	; 0x58
 8014528:	a815      	add	r0, sp, #84	; 0x54
 801452a:	f7f6 fc7f 	bl	800ae2c <lv_draw_line>
                    if(point_w && point_h) {
 801452e:	9b03      	ldr	r3, [sp, #12]
 8014530:	b133      	cbz	r3, 8014540 <lv_chart_event+0x100c>
 8014532:	9b04      	ldr	r3, [sp, #16]
 8014534:	b123      	cbz	r3, 8014540 <lv_chart_event+0x100c>
                        lv_draw_rect(&point_area, &series_mask, &point_dsc_default);
 8014536:	aa2d      	add	r2, sp, #180	; 0xb4
 8014538:	a91a      	add	r1, sp, #104	; 0x68
 801453a:	4650      	mov	r0, sl
 801453c:	f7f8 fac6 	bl	800cacc <lv_draw_rect>
                lv_event_send(obj, LV_EVENT_DRAW_PART_END, &dsc);
 8014540:	aa3a      	add	r2, sp, #232	; 0xe8
 8014542:	211b      	movs	r1, #27
 8014544:	4640      	mov	r0, r8
 8014546:	f7ed fcbf 	bl	8001ec8 <lv_event_send>
        for(i = 0; i < chart->point_cnt; i++) {
 801454a:	3601      	adds	r6, #1
            p_act = (start_point + i) % chart->point_cnt;
 801454c:	46ba      	mov	sl, r7
 801454e:	e733      	b.n	80143b8 <lv_chart_event+0xe84>
            if(cursor->point_id == LV_CHART_POINT_NONE) continue;
 8014550:	88a2      	ldrh	r2, [r4, #4]
 8014552:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8014556:	429a      	cmp	r2, r3
 8014558:	f43f aa69 	beq.w	8013a2e <lv_chart_event+0x4fa>
            lv_chart_get_point_pos_by_id(obj, cursor->ser, cursor->point_id, &p);
 801455c:	ab18      	add	r3, sp, #96	; 0x60
 801455e:	68a1      	ldr	r1, [r4, #8]
 8014560:	4640      	mov	r0, r8
 8014562:	f7fe fc30 	bl	8012dc6 <lv_chart_get_point_pos_by_id>
            cx = p.x;
 8014566:	f9bd 6060 	ldrsh.w	r6, [sp, #96]	; 0x60
            cy = p.y;
 801456a:	f9bd 5062 	ldrsh.w	r5, [sp, #98]	; 0x62
 801456e:	f7ff b9dd 	b.w	801392c <lv_chart_event+0x3f8>
 8014572:	bf00      	nop

08014574 <fast_hsv2rgb.part.0>:
 * We fold all symmetry by swapping the R, G, B pointers so that the code is the same for all sextants.
 * We replace division by 255 by a division by 256, a.k.a a shift right by 8 bits.
 * This is wrong, but since this is only used to compute the pixels on the screen and not the final color, it's ok.
 */
static void fast_hsv2rgb(uint16_t h, uint8_t s, uint8_t v, uint8_t *r, uint8_t *g , uint8_t *b);
static void fast_hsv2rgb(uint16_t h, uint8_t s, uint8_t v, uint8_t *r, uint8_t *g , uint8_t *b)
 8014574:	b5f0      	push	{r4, r5, r6, r7, lr}
{
    if (!s) { *r = *g = *b = v; return; }

    uint8_t sextant = h >> 8;
    HSV_PTR_SWAP(sextant, r, g, b); /*Swap pointers so the conversion code is the same*/
 8014576:	0587      	lsls	r7, r0, #22
    uint8_t sextant = h >> 8;
 8014578:	ea4f 2510 	mov.w	r5, r0, lsr #8
    HSV_PTR_SWAP(sextant, r, g, b); /*Swap pointers so the conversion code is the same*/
 801457c:	bf48      	it	mi
 801457e:	461f      	movmi	r7, r3
static void fast_hsv2rgb(uint16_t h, uint8_t s, uint8_t v, uint8_t *r, uint8_t *g , uint8_t *b)
 8014580:	e9dd 4605 	ldrd	r4, r6, [sp, #20]
    HSV_PTR_SWAP(sextant, r, g, b); /*Swap pointers so the conversion code is the same*/
 8014584:	bf44      	itt	mi
 8014586:	4633      	movmi	r3, r6
 8014588:	463e      	movmi	r6, r7
 801458a:	076f      	lsls	r7, r5, #29
 801458c:	bf42      	ittt	mi
 801458e:	4627      	movmi	r7, r4
 8014590:	4634      	movmi	r4, r6
 8014592:	463e      	movmi	r6, r7
 8014594:	f015 0f06 	tst.w	r5, #6
 8014598:	f005 0701 	and.w	r7, r5, #1
 801459c:	d104      	bne.n	80145a8 <fast_hsv2rgb.part.0+0x34>
 801459e:	b92f      	cbnz	r7, 80145ac <fast_hsv2rgb.part.0+0x38>
 80145a0:	461d      	mov	r5, r3
 80145a2:	4623      	mov	r3, r4
 80145a4:	462c      	mov	r4, r5
 80145a6:	e001      	b.n	80145ac <fast_hsv2rgb.part.0+0x38>
 80145a8:	2f00      	cmp	r7, #0
 80145aa:	d1f9      	bne.n	80145a0 <fast_hsv2rgb.part.0+0x2c>

    *g = v;
 80145ac:	7022      	strb	r2, [r4, #0]

    uint8_t bb = ~s;
 80145ae:	43cc      	mvns	r4, r1
    uint16_t ww = v * bb; /*Don't try to be precise, but instead, be fast*/
 80145b0:	b295      	uxth	r5, r2
 80145b2:	b2e4      	uxtb	r4, r4
 80145b4:	b289      	uxth	r1, r1
    *b = ww >> 8;
 80145b6:	4362      	muls	r2, r4
 80145b8:	b2c0      	uxtb	r0, r0
 80145ba:	0a12      	lsrs	r2, r2, #8
 80145bc:	7032      	strb	r2, [r6, #0]

    uint8_t h_frac = h & 0xff;

    if(!(sextant & 1)) {
 80145be:	b957      	cbnz	r7, 80145d6 <fast_hsv2rgb.part.0+0x62>
        /*Up slope*/
        ww = !h_frac ? ((uint16_t)s << 8) : (s * (uint8_t)(-h_frac)); /*Skip multiply if not required*/
 80145c0:	b938      	cbnz	r0, 80145d2 <fast_hsv2rgb.part.0+0x5e>
 80145c2:	0209      	lsls	r1, r1, #8
    } else {
        /*Down slope*/
        ww = s * h_frac;
    }
    bb = ww >> 8;
    bb = ~bb;
 80145c4:	ea6f 2111 	mvn.w	r1, r1, lsr #8
    ww = v * bb;
 80145c8:	b2c9      	uxtb	r1, r1
    *r = ww >> 8;
 80145ca:	4369      	muls	r1, r5
 80145cc:	0a09      	lsrs	r1, r1, #8
 80145ce:	7019      	strb	r1, [r3, #0]
}
 80145d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ww = !h_frac ? ((uint16_t)s << 8) : (s * (uint8_t)(-h_frac)); /*Skip multiply if not required*/
 80145d2:	4240      	negs	r0, r0
 80145d4:	b2c0      	uxtb	r0, r0
        ww = s * h_frac;
 80145d6:	4341      	muls	r1, r0
 80145d8:	e7f4      	b.n	80145c4 <fast_hsv2rgb.part.0+0x50>

080145da <get_knob_area>:
{
 80145da:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80145de:	460d      	mov	r5, r1
 80145e0:	4606      	mov	r6, r0
    return (lv_opa_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_arc_width(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_WIDTH);
 80145e2:	f44f 6205 	mov.w	r2, #2128	; 0x850
 80145e6:	2100      	movs	r1, #0
 80145e8:	4628      	mov	r0, r5
 80145ea:	f7f2 febd 	bl	8007368 <lv_obj_get_style_prop>
    r = lv_obj_get_style_arc_width(obj, LV_PART_MAIN) / 2;
 80145ee:	f3c0 34c0 	ubfx	r4, r0, #15, #1
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80145f2:	f241 0212 	movw	r2, #4114	; 0x1012
 80145f6:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 80145fa:	fa04 f080 	sxtah	r0, r4, r0
 80145fe:	f3c0 044f 	ubfx	r4, r0, #1, #16
 8014602:	4628      	mov	r0, r5
 8014604:	f7f2 feb0 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8014608:	f241 0213 	movw	r2, #4115	; 0x1013
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801460c:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801460e:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8014612:	4628      	mov	r0, r5
 8014614:	f7f2 fea8 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8014618:	f241 0210 	movw	r2, #4112	; 0x1010
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801461c:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801461e:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8014622:	4628      	mov	r0, r5
 8014624:	f7f2 fea0 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8014628:	f241 0211 	movw	r2, #4113	; 0x1011
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801462c:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801462e:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8014632:	4628      	mov	r0, r5
 8014634:	f7f2 fe98 	bl	8007368 <lv_obj_get_style_prop>
    knob_area.x1 = obj->coords.x1 + colorwheel->knob.pos.x - r - left;
 8014638:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 801463a:	8aaa      	ldrh	r2, [r5, #20]
    knob_area.x2 = obj->coords.x1 + colorwheel->knob.pos.x + r + top;
 801463c:	4427      	add	r7, r4
    knob_area.y1 = obj->coords.y1 + colorwheel->knob.pos.y - r - right;
 801463e:	8d69      	ldrh	r1, [r5, #42]	; 0x2a
    knob_area.x1 = obj->coords.x1 + colorwheel->knob.pos.x - r - left;
 8014640:	441a      	add	r2, r3
    knob_area.y1 = obj->coords.y1 + colorwheel->knob.pos.y - r - right;
 8014642:	8aeb      	ldrh	r3, [r5, #22]
    knob_area.x1 = obj->coords.x1 + colorwheel->knob.pos.x - r - left;
 8014644:	eb04 0509 	add.w	r5, r4, r9
    knob_area.y1 = obj->coords.y1 + colorwheel->knob.pos.y - r - right;
 8014648:	440b      	add	r3, r1
    knob_area.x1 = obj->coords.x1 + colorwheel->knob.pos.x - r - left;
 801464a:	b292      	uxth	r2, r2
    knob_area.y1 = obj->coords.y1 + colorwheel->knob.pos.y - r - right;
 801464c:	eb04 0108 	add.w	r1, r4, r8
    knob_area.y2 = obj->coords.y1 + colorwheel->knob.pos.y + r + bottom;
 8014650:	4404      	add	r4, r0
    knob_area.y1 = obj->coords.y1 + colorwheel->knob.pos.y - r - right;
 8014652:	b29b      	uxth	r3, r3
    knob_area.x1 = obj->coords.x1 + colorwheel->knob.pos.x - r - left;
 8014654:	1b55      	subs	r5, r2, r5
    knob_area.x2 = obj->coords.x1 + colorwheel->knob.pos.x + r + top;
 8014656:	443a      	add	r2, r7
}
 8014658:	4630      	mov	r0, r6
    knob_area.y1 = obj->coords.y1 + colorwheel->knob.pos.y - r - right;
 801465a:	1a59      	subs	r1, r3, r1
    knob_area.y2 = obj->coords.y1 + colorwheel->knob.pos.y + r + bottom;
 801465c:	441c      	add	r4, r3
    return knob_area;
 801465e:	8035      	strh	r5, [r6, #0]
 8014660:	8071      	strh	r1, [r6, #2]
 8014662:	80b2      	strh	r2, [r6, #4]
 8014664:	80f4      	strh	r4, [r6, #6]
}
 8014666:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801466a <refr_knob_pos>:
{
 801466a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801466c:	4605      	mov	r5, r0
    lv_area_t knob_area = get_knob_area(obj);
 801466e:	4601      	mov	r1, r0
 8014670:	4668      	mov	r0, sp
 8014672:	f7ff ffb2 	bl	80145da <get_knob_area>
    lv_obj_invalidate_area(obj, &knob_area);
 8014676:	4669      	mov	r1, sp
 8014678:	4628      	mov	r0, r5
 801467a:	f7f0 fd33 	bl	80050e4 <lv_obj_invalidate_area>
    lv_coord_t w = lv_obj_get_width(obj);
 801467e:	4628      	mov	r0, r5
 8014680:	f7f0 fbf5 	bl	8004e6e <lv_obj_get_width>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_WIDTH);
 8014684:	f44f 6205 	mov.w	r2, #2128	; 0x850
 8014688:	4607      	mov	r7, r0
 801468a:	2100      	movs	r1, #0
 801468c:	4628      	mov	r0, r5
 801468e:	f7f2 fe6b 	bl	8007368 <lv_obj_get_style_prop>

static uint16_t get_angle(lv_obj_t * obj)
{
    lv_colorwheel_t * colorwheel = (lv_colorwheel_t *)obj;
    uint16_t angle;
    switch(colorwheel->mode) {
 8014692:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
    return (lv_coord_t)v.num;
 8014696:	b200      	sxth	r0, r0
 8014698:	f003 0303 	and.w	r3, r3, #3
    lv_coord_t r = (w - scale_w) / 2;
 801469c:	1a3e      	subs	r6, r7, r0
    switch(colorwheel->mode) {
 801469e:	2b01      	cmp	r3, #1
    lv_coord_t r = (w - scale_w) / 2;
 80146a0:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
 80146a4:	ea4f 0666 	mov.w	r6, r6, asr #1
    switch(colorwheel->mode) {
 80146a8:	d021      	beq.n	80146ee <refr_knob_pos+0x84>
 80146aa:	2b02      	cmp	r3, #2
 80146ac:	d029      	beq.n	8014702 <refr_knob_pos+0x98>
        default:
        case LV_COLORWHEEL_MODE_HUE:
            angle = colorwheel->hsv.h;
 80146ae:	8cac      	ldrh	r4, [r5, #36]	; 0x24
    colorwheel->knob.pos.x = (((int32_t)r * lv_trigo_sin(angle)) >> LV_TRIGO_SHIFT);
 80146b0:	b220      	sxth	r0, r4
 */
LV_ATTRIBUTE_FAST_MEM int16_t lv_trigo_sin(int16_t angle);

static inline LV_ATTRIBUTE_FAST_MEM int16_t lv_trigo_cos(int16_t angle)
{
    return lv_trigo_sin(angle + 90);
 80146b2:	345a      	adds	r4, #90	; 0x5a
 80146b4:	f002 ff62 	bl	801757c <lv_trigo_sin>
 80146b8:	4370      	muls	r0, r6
    colorwheel->knob.pos.x = colorwheel->knob.pos.x + w / 2;
 80146ba:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
    colorwheel->knob.pos.x = (((int32_t)r * lv_trigo_sin(angle)) >> LV_TRIGO_SHIFT);
 80146be:	13c0      	asrs	r0, r0, #15
    colorwheel->knob.pos.x = colorwheel->knob.pos.x + w / 2;
 80146c0:	f3c7 074f 	ubfx	r7, r7, #1, #16
    colorwheel->knob.pos.x = (((int32_t)r * lv_trigo_sin(angle)) >> LV_TRIGO_SHIFT);
 80146c4:	8528      	strh	r0, [r5, #40]	; 0x28
 80146c6:	b220      	sxth	r0, r4
 80146c8:	f002 ff58 	bl	801757c <lv_trigo_sin>
    colorwheel->knob.pos.x = colorwheel->knob.pos.x + w / 2;
 80146cc:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
    colorwheel->knob.pos.y = (((int32_t)r * lv_trigo_cos(angle)) >> LV_TRIGO_SHIFT);
 80146ce:	4370      	muls	r0, r6
    lv_area_t knob_area = get_knob_area(obj);
 80146d0:	4629      	mov	r1, r5
    colorwheel->knob.pos.x = colorwheel->knob.pos.x + w / 2;
 80146d2:	443b      	add	r3, r7
    colorwheel->knob.pos.y = colorwheel->knob.pos.y + w / 2;
 80146d4:	eb07 37e0 	add.w	r7, r7, r0, asr #15
    lv_area_t knob_area = get_knob_area(obj);
 80146d8:	4668      	mov	r0, sp
    colorwheel->knob.pos.x = colorwheel->knob.pos.x + w / 2;
 80146da:	852b      	strh	r3, [r5, #40]	; 0x28
    colorwheel->knob.pos.y = colorwheel->knob.pos.y + w / 2;
 80146dc:	856f      	strh	r7, [r5, #42]	; 0x2a
    lv_area_t knob_area = get_knob_area(obj);
 80146de:	f7ff ff7c 	bl	80145da <get_knob_area>
    lv_obj_invalidate_area(obj, &knob_area);
 80146e2:	4669      	mov	r1, sp
 80146e4:	4628      	mov	r0, r5
 80146e6:	f7f0 fcfd 	bl	80050e4 <lv_obj_invalidate_area>
}
 80146ea:	b003      	add	sp, #12
 80146ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
            break;
        case LV_COLORWHEEL_MODE_SATURATION:
            angle = (colorwheel->hsv.s * 360) / 100;
 80146ee:	f895 0026 	ldrb.w	r0, [r5, #38]	; 0x26
            break;
        case LV_COLORWHEEL_MODE_VALUE:
            angle = (colorwheel->hsv.v * 360) / 100 ;
 80146f2:	f44f 74b4 	mov.w	r4, #360	; 0x168
 80146f6:	4344      	muls	r4, r0
 80146f8:	2064      	movs	r0, #100	; 0x64
 80146fa:	fbb4 f4f0 	udiv	r4, r4, r0
 80146fe:	b2a4      	uxth	r4, r4
            break;
 8014700:	e7d6      	b.n	80146b0 <refr_knob_pos+0x46>
            angle = (colorwheel->hsv.v * 360) / 100 ;
 8014702:	f895 0027 	ldrb.w	r0, [r5, #39]	; 0x27
 8014706:	e7f4      	b.n	80146f2 <refr_knob_pos+0x88>

08014708 <lv_colorwheel_constructor>:
    colorwheel->hsv.h = 0;
 8014708:	4b0f      	ldr	r3, [pc, #60]	; (8014748 <lv_colorwheel_constructor+0x40>)
    colorwheel->knob.recolor = create_knob_recolor;
 801470a:	4a10      	ldr	r2, [pc, #64]	; (801474c <lv_colorwheel_constructor+0x44>)
{
 801470c:	b510      	push	{r4, lr}
    colorwheel->hsv.h = 0;
 801470e:	624b      	str	r3, [r1, #36]	; 0x24
{
 8014710:	460c      	mov	r4, r1
    colorwheel->mode = LV_COLORWHEEL_MODE_HUE;
 8014712:	f891 303c 	ldrb.w	r3, [r1, #60]	; 0x3c
    colorwheel->knob.recolor = create_knob_recolor;
 8014716:	7812      	ldrb	r2, [r2, #0]
    lv_obj_add_flag(obj, LV_OBJ_FLAG_ADV_HITTEST);
 8014718:	4620      	mov	r0, r4
    colorwheel->mode = LV_COLORWHEEL_MODE_HUE;
 801471a:	f023 0307 	bic.w	r3, r3, #7
 801471e:	f881 303c 	strb.w	r3, [r1, #60]	; 0x3c
    colorwheel->last_click_time = 0;
 8014722:	2300      	movs	r3, #0
    colorwheel->last_change_time = 0;
 8014724:	e9c1 330c 	strd	r3, r3, [r1, #48]	; 0x30
    colorwheel->knob.recolor = create_knob_recolor;
 8014728:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 801472c:	f362 0300 	bfi	r3, r2, #0, #1
 8014730:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c
    lv_obj_add_flag(obj, LV_OBJ_FLAG_ADV_HITTEST);
 8014734:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8014738:	f7ef fae6 	bl	8003d08 <lv_obj_add_flag>
    refr_knob_pos(obj);
 801473c:	4620      	mov	r0, r4
}
 801473e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    refr_knob_pos(obj);
 8014742:	f7ff bf92 	b.w	801466a <refr_knob_pos>
 8014746:	bf00      	nop
 8014748:	64640000 	.word	0x64640000
 801474c:	20002b38 	.word	0x20002b38

08014750 <lv_colorwheel_set_hsv>:
{
 8014750:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014752:	0e0b      	lsrs	r3, r1, #24
 8014754:	f3c1 4207 	ubfx	r2, r1, #16, #8
 8014758:	9101      	str	r1, [sp, #4]
 801475a:	b289      	uxth	r1, r1
 801475c:	4604      	mov	r4, r0
    if(hsv.h > 360) hsv.h %= 360;
 801475e:	f5b1 7fb4 	cmp.w	r1, #360	; 0x168
 8014762:	bf82      	ittt	hi
 8014764:	f44f 70b4 	movhi.w	r0, #360	; 0x168
 8014768:	fbb1 f5f0 	udivhi	r5, r1, r0
 801476c:	fb00 1115 	mlshi	r1, r0, r5, r1
    if(colorwheel->hsv.h == hsv.h && colorwheel->hsv.s == hsv.s && colorwheel->hsv.v == hsv.v) return false;
 8014770:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
    if(hsv.h > 360) hsv.h %= 360;
 8014772:	bf88      	it	hi
 8014774:	b289      	uxthhi	r1, r1
    if(hsv.s > 100) hsv.s = 100;
 8014776:	2a64      	cmp	r2, #100	; 0x64
 8014778:	bf28      	it	cs
 801477a:	2264      	movcs	r2, #100	; 0x64
    if(hsv.v > 100) hsv.v = 100;
 801477c:	2b64      	cmp	r3, #100	; 0x64
 801477e:	bf28      	it	cs
 8014780:	2364      	movcs	r3, #100	; 0x64
    if(colorwheel->hsv.h == hsv.h && colorwheel->hsv.s == hsv.s && colorwheel->hsv.v == hsv.v) return false;
 8014782:	4288      	cmp	r0, r1
 8014784:	d00d      	beq.n	80147a2 <lv_colorwheel_set_hsv+0x52>
    refr_knob_pos(obj);
 8014786:	4620      	mov	r0, r4
    colorwheel->hsv = hsv;
 8014788:	84a1      	strh	r1, [r4, #36]	; 0x24
 801478a:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
 801478e:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
    refr_knob_pos(obj);
 8014792:	f7ff ff6a 	bl	801466a <refr_knob_pos>
    lv_obj_invalidate(obj);
 8014796:	4620      	mov	r0, r4
 8014798:	f7f0 fcbe 	bl	8005118 <lv_obj_invalidate>
    return true;
 801479c:	2001      	movs	r0, #1
}
 801479e:	b003      	add	sp, #12
 80147a0:	bd30      	pop	{r4, r5, pc}
    if(colorwheel->hsv.h == hsv.h && colorwheel->hsv.s == hsv.s && colorwheel->hsv.v == hsv.v) return false;
 80147a2:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
 80147a4:	f88d 2006 	strb.w	r2, [sp, #6]
 80147a8:	f88d 3007 	strb.w	r3, [sp, #7]
 80147ac:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 80147b0:	4285      	cmp	r5, r0
 80147b2:	d1e8      	bne.n	8014786 <lv_colorwheel_set_hsv+0x36>
 80147b4:	2000      	movs	r0, #0
 80147b6:	e7f2      	b.n	801479e <lv_colorwheel_set_hsv+0x4e>

080147b8 <lv_colorwheel_get_rgb>:
    return lv_color_hsv_to_rgb(colorwheel->hsv.h, colorwheel->hsv.s, colorwheel->hsv.v);
 80147b8:	f890 2027 	ldrb.w	r2, [r0, #39]	; 0x27
 80147bc:	f890 1026 	ldrb.w	r1, [r0, #38]	; 0x26
 80147c0:	8c80      	ldrh	r0, [r0, #36]	; 0x24
 80147c2:	f002 bd01 	b.w	80171c8 <lv_color_hsv_to_rgb>
	...

080147c8 <lv_colorwheel_event>:
{
 80147c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_res_t res = lv_obj_event_base(MY_CLASS, e);
 80147cc:	488a      	ldr	r0, [pc, #552]	; (80149f8 <lv_colorwheel_event+0x230>)
{
 80147ce:	460d      	mov	r5, r1
 80147d0:	ed2d 8b04 	vpush	{d8-d9}
 80147d4:	b0a7      	sub	sp, #156	; 0x9c
    lv_res_t res = lv_obj_event_base(MY_CLASS, e);
 80147d6:	f7ed faff 	bl	8001dd8 <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 80147da:	2801      	cmp	r0, #1
    lv_res_t res = lv_obj_event_base(MY_CLASS, e);
 80147dc:	4607      	mov	r7, r0
    if(res != LV_RES_OK) return;
 80147de:	d13e      	bne.n	801485e <lv_colorwheel_event+0x96>
    lv_event_code_t code = lv_event_get_code(e);
 80147e0:	4628      	mov	r0, r5
 80147e2:	f7ed fb93 	bl	8001f0c <lv_event_get_code>
 80147e6:	4606      	mov	r6, r0
    lv_obj_t * obj = lv_event_get_target(e);
 80147e8:	4628      	mov	r0, r5
 80147ea:	f7ed fb8d 	bl	8001f08 <lv_event_get_target>
    if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 80147ee:	2e13      	cmp	r6, #19
    lv_obj_t * obj = lv_event_get_target(e);
 80147f0:	4604      	mov	r4, r0
    if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 80147f2:	d139      	bne.n	8014868 <lv_colorwheel_event+0xa0>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80147f4:	f241 0212 	movw	r2, #4114	; 0x1012
 80147f8:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 80147fc:	f7f2 fdb4 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8014800:	f241 0213 	movw	r2, #4115	; 0x1013
    return (lv_coord_t)v.num;
 8014804:	fa0f f880 	sxth.w	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8014808:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 801480c:	4620      	mov	r0, r4
 801480e:	f7f2 fdab 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8014812:	f241 0210 	movw	r2, #4112	; 0x1010
    return (lv_coord_t)v.num;
 8014816:	b206      	sxth	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8014818:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 801481c:	4620      	mov	r0, r4
 801481e:	f7f2 fda3 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8014822:	f241 0211 	movw	r2, #4113	; 0x1011
    return (lv_coord_t)v.num;
 8014826:	b207      	sxth	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8014828:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 801482c:	4620      	mov	r0, r4
 801482e:	f7f2 fd9b 	bl	8007368 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8014832:	b204      	sxth	r4, r0
        lv_coord_t * s = lv_event_get_param(e);
 8014834:	4628      	mov	r0, r5
 8014836:	f7ed fb6b 	bl	8001f10 <lv_event_get_param>
        lv_coord_t knob_pad = LV_MAX4(left, right, top, bottom) + 2;
 801483a:	4546      	cmp	r6, r8
 801483c:	4633      	mov	r3, r6
        *s = LV_MAX(*s, knob_pad);
 801483e:	f9b0 2000 	ldrsh.w	r2, [r0]
        lv_coord_t knob_pad = LV_MAX4(left, right, top, bottom) + 2;
 8014842:	bfb8      	it	lt
 8014844:	4643      	movlt	r3, r8
 8014846:	42bb      	cmp	r3, r7
 8014848:	bfb8      	it	lt
 801484a:	463b      	movlt	r3, r7
 801484c:	42a3      	cmp	r3, r4
 801484e:	bfb8      	it	lt
 8014850:	4623      	movlt	r3, r4
 8014852:	3302      	adds	r3, #2
        *s = LV_MAX(*s, knob_pad);
 8014854:	b21b      	sxth	r3, r3
 8014856:	4293      	cmp	r3, r2
 8014858:	bfb8      	it	lt
 801485a:	4613      	movlt	r3, r2
 801485c:	8003      	strh	r3, [r0, #0]
}
 801485e:	b027      	add	sp, #156	; 0x9c
 8014860:	ecbd 8b04 	vpop	{d8-d9}
 8014864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if(code == LV_EVENT_SIZE_CHANGED) {
 8014868:	2e23      	cmp	r6, #35	; 0x23
 801486a:	d11c      	bne.n	80148a6 <lv_colorwheel_event+0xde>
        void * param = lv_event_get_param(e);
 801486c:	4628      	mov	r0, r5
 801486e:	f7ed fb4f 	bl	8001f10 <lv_event_get_param>
 8014872:	4605      	mov	r5, r0
        if(lv_obj_get_width(obj) != lv_area_get_width(param) ||
 8014874:	4620      	mov	r0, r4
 8014876:	f7f0 fafa 	bl	8004e6e <lv_obj_get_width>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801487a:	88ab      	ldrh	r3, [r5, #4]
 801487c:	882a      	ldrh	r2, [r5, #0]
 801487e:	3301      	adds	r3, #1
 8014880:	1a9b      	subs	r3, r3, r2
 8014882:	b21b      	sxth	r3, r3
 8014884:	4298      	cmp	r0, r3
 8014886:	d003      	beq.n	8014890 <lv_colorwheel_event+0xc8>
            refr_knob_pos(obj);
 8014888:	4620      	mov	r0, r4
        refr_knob_pos(obj);
 801488a:	f7ff feee 	bl	801466a <refr_knob_pos>
 801488e:	e7e6      	b.n	801485e <lv_colorwheel_event+0x96>
           lv_obj_get_height(obj) != lv_area_get_height(param)) {
 8014890:	4620      	mov	r0, r4
 8014892:	f7f0 faf2 	bl	8004e7a <lv_obj_get_height>
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8014896:	88eb      	ldrh	r3, [r5, #6]
 8014898:	886a      	ldrh	r2, [r5, #2]
 801489a:	3301      	adds	r3, #1
 801489c:	1a9b      	subs	r3, r3, r2
        if(lv_obj_get_width(obj) != lv_area_get_width(param) ||
 801489e:	b21b      	sxth	r3, r3
 80148a0:	4298      	cmp	r0, r3
 80148a2:	d1f1      	bne.n	8014888 <lv_colorwheel_event+0xc0>
 80148a4:	e7db      	b.n	801485e <lv_colorwheel_event+0x96>
    else if(code == LV_EVENT_STYLE_CHANGED) {
 80148a6:	2e24      	cmp	r6, #36	; 0x24
 80148a8:	d0ef      	beq.n	801488a <lv_colorwheel_event+0xc2>
    else if(code == LV_EVENT_KEY) {
 80148aa:	2e0d      	cmp	r6, #13
 80148ac:	d166      	bne.n	801497c <lv_colorwheel_event+0x1b4>
        uint32_t c = *((uint32_t *)lv_event_get_param(e)); /*uint32_t because can be UTF-8*/
 80148ae:	4628      	mov	r0, r5
 80148b0:	f7ed fb2e 	bl	8001f10 <lv_event_get_param>
 80148b4:	6803      	ldr	r3, [r0, #0]
        if(c == LV_KEY_RIGHT || c == LV_KEY_UP) {
 80148b6:	f023 0202 	bic.w	r2, r3, #2
 80148ba:	2a11      	cmp	r2, #17
 80148bc:	d136      	bne.n	801492c <lv_colorwheel_event+0x164>
            hsv_cur = colorwheel->hsv;
 80148be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80148c0:	9319      	str	r3, [sp, #100]	; 0x64
            switch(colorwheel->mode) {
 80148c2:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80148c6:	f003 0303 	and.w	r3, r3, #3
 80148ca:	2b01      	cmp	r3, #1
 80148cc:	d018      	beq.n	8014900 <lv_colorwheel_event+0x138>
 80148ce:	2b02      	cmp	r3, #2
 80148d0:	d021      	beq.n	8014916 <lv_colorwheel_event+0x14e>
 80148d2:	b94b      	cbnz	r3, 80148e8 <lv_colorwheel_event+0x120>
                    hsv_cur.h = (colorwheel->hsv.h + 1) % 360;
 80148d4:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 80148d6:	f44f 71b4 	mov.w	r1, #360	; 0x168
 80148da:	3301      	adds	r3, #1
 80148dc:	fbb3 f2f1 	udiv	r2, r3, r1
 80148e0:	fb01 3312 	mls	r3, r1, r2, r3
                    hsv_cur.h = colorwheel->hsv.h > 0 ? (colorwheel->hsv.h - 1) : 360;
 80148e4:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
        if(lv_colorwheel_set_hsv(obj, hsv_cur)) {
 80148e8:	9919      	ldr	r1, [sp, #100]	; 0x64
 80148ea:	4620      	mov	r0, r4
 80148ec:	f7ff ff30 	bl	8014750 <lv_colorwheel_set_hsv>
 80148f0:	2800      	cmp	r0, #0
 80148f2:	d0b4      	beq.n	801485e <lv_colorwheel_event+0x96>
            res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 80148f4:	2200      	movs	r2, #0
 80148f6:	211c      	movs	r1, #28
 80148f8:	4620      	mov	r0, r4
 80148fa:	f7ed fae5 	bl	8001ec8 <lv_event_send>
            if(res != LV_RES_OK) return;
 80148fe:	e7ae      	b.n	801485e <lv_colorwheel_event+0x96>
                    hsv_cur.s = (colorwheel->hsv.s + 1) % 100;
 8014900:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8014904:	2164      	movs	r1, #100	; 0x64
 8014906:	3301      	adds	r3, #1
 8014908:	fbb3 f2f1 	udiv	r2, r3, r1
 801490c:	fb01 3312 	mls	r3, r1, r2, r3
                    hsv_cur.s = colorwheel->hsv.s > 0 ? (colorwheel->hsv.s - 1) : 100;
 8014910:	f88d 3066 	strb.w	r3, [sp, #102]	; 0x66
                    break;
 8014914:	e7e8      	b.n	80148e8 <lv_colorwheel_event+0x120>
                    hsv_cur.v = (colorwheel->hsv.v + 1) % 100;
 8014916:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 801491a:	2164      	movs	r1, #100	; 0x64
 801491c:	3301      	adds	r3, #1
 801491e:	fbb3 f2f1 	udiv	r2, r3, r1
 8014922:	fb01 3312 	mls	r3, r1, r2, r3
                    hsv_cur.v = colorwheel->hsv.v > 0 ? (colorwheel->hsv.v - 1) : 100;
 8014926:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
                    break;
 801492a:	e7dd      	b.n	80148e8 <lv_colorwheel_event+0x120>
        else if(c == LV_KEY_LEFT || c == LV_KEY_DOWN) {
 801492c:	2b14      	cmp	r3, #20
 801492e:	d001      	beq.n	8014934 <lv_colorwheel_event+0x16c>
 8014930:	2b12      	cmp	r3, #18
 8014932:	d194      	bne.n	801485e <lv_colorwheel_event+0x96>
            hsv_cur = colorwheel->hsv;
 8014934:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014936:	9319      	str	r3, [sp, #100]	; 0x64
            switch(colorwheel->mode) {
 8014938:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 801493c:	f003 0303 	and.w	r3, r3, #3
 8014940:	2b01      	cmp	r3, #1
 8014942:	d00b      	beq.n	801495c <lv_colorwheel_event+0x194>
 8014944:	2b02      	cmp	r3, #2
 8014946:	d011      	beq.n	801496c <lv_colorwheel_event+0x1a4>
 8014948:	2b00      	cmp	r3, #0
 801494a:	d1cd      	bne.n	80148e8 <lv_colorwheel_event+0x120>
                    hsv_cur.h = colorwheel->hsv.h > 0 ? (colorwheel->hsv.h - 1) : 360;
 801494c:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 801494e:	b113      	cbz	r3, 8014956 <lv_colorwheel_event+0x18e>
 8014950:	3b01      	subs	r3, #1
 8014952:	b29b      	uxth	r3, r3
 8014954:	e7c6      	b.n	80148e4 <lv_colorwheel_event+0x11c>
 8014956:	f44f 73b4 	mov.w	r3, #360	; 0x168
 801495a:	e7c3      	b.n	80148e4 <lv_colorwheel_event+0x11c>
                    hsv_cur.s = colorwheel->hsv.s > 0 ? (colorwheel->hsv.s - 1) : 100;
 801495c:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8014960:	b113      	cbz	r3, 8014968 <lv_colorwheel_event+0x1a0>
 8014962:	3b01      	subs	r3, #1
 8014964:	b2db      	uxtb	r3, r3
 8014966:	e7d3      	b.n	8014910 <lv_colorwheel_event+0x148>
 8014968:	2364      	movs	r3, #100	; 0x64
 801496a:	e7d1      	b.n	8014910 <lv_colorwheel_event+0x148>
                    hsv_cur.v = colorwheel->hsv.v > 0 ? (colorwheel->hsv.v - 1) : 100;
 801496c:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 8014970:	b113      	cbz	r3, 8014978 <lv_colorwheel_event+0x1b0>
 8014972:	3b01      	subs	r3, #1
 8014974:	b2db      	uxtb	r3, r3
 8014976:	e7d6      	b.n	8014926 <lv_colorwheel_event+0x15e>
 8014978:	2364      	movs	r3, #100	; 0x64
 801497a:	e7d4      	b.n	8014926 <lv_colorwheel_event+0x15e>
    else if(code == LV_EVENT_PRESSED) {
 801497c:	2e01      	cmp	r6, #1
 801497e:	d13d      	bne.n	80149fc <lv_colorwheel_event+0x234>
        colorwheel->last_change_time = lv_tick_get();
 8014980:	f002 f846 	bl	8016a10 <lv_tick_get>
 8014984:	6360      	str	r0, [r4, #52]	; 0x34
        lv_indev_get_point(lv_indev_get_act(), &colorwheel->last_press_point);
 8014986:	f7ed fd35 	bl	80023f4 <lv_indev_get_act>
 801498a:	f104 0138 	add.w	r1, r4, #56	; 0x38
 801498e:	f7ed fd92 	bl	80024b6 <lv_indev_get_point>
    lv_indev_t * indev = lv_indev_get_act();
 8014992:	f7ed fd2f 	bl	80023f4 <lv_indev_get_act>
 8014996:	4605      	mov	r5, r0
    if(lv_tick_elaps(colorwheel->last_click_time) < indev->driver->long_press_time) {
 8014998:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801499a:	f002 f847 	bl	8016a2c <lv_tick_elaps>
 801499e:	682b      	ldr	r3, [r5, #0]
 80149a0:	8b9b      	ldrh	r3, [r3, #28]
 80149a2:	4298      	cmp	r0, r3
 80149a4:	d21c      	bcs.n	80149e0 <lv_colorwheel_event+0x218>
        hsv_cur = colorwheel->hsv;
 80149a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80149a8:	9319      	str	r3, [sp, #100]	; 0x64
        switch(colorwheel->mode) {
 80149aa:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80149ae:	f003 0303 	and.w	r3, r3, #3
 80149b2:	2b01      	cmp	r3, #1
 80149b4:	d018      	beq.n	80149e8 <lv_colorwheel_event+0x220>
 80149b6:	2b02      	cmp	r3, #2
 80149b8:	d01a      	beq.n	80149f0 <lv_colorwheel_event+0x228>
 80149ba:	b90b      	cbnz	r3, 80149c0 <lv_colorwheel_event+0x1f8>
                hsv_cur.h = 0;
 80149bc:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
        lv_indev_wait_release(indev);
 80149c0:	4628      	mov	r0, r5
 80149c2:	f7ed fdb7 	bl	8002534 <lv_indev_wait_release>
        if(lv_colorwheel_set_hsv(obj, hsv_cur)) {
 80149c6:	9919      	ldr	r1, [sp, #100]	; 0x64
 80149c8:	4620      	mov	r0, r4
 80149ca:	f7ff fec1 	bl	8014750 <lv_colorwheel_set_hsv>
 80149ce:	b138      	cbz	r0, 80149e0 <lv_colorwheel_event+0x218>
            lv_res_t res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 80149d0:	2200      	movs	r2, #0
 80149d2:	211c      	movs	r1, #28
 80149d4:	4620      	mov	r0, r4
 80149d6:	f7ed fa77 	bl	8001ec8 <lv_event_send>
            if(res != LV_RES_OK) return res;
 80149da:	2801      	cmp	r0, #1
 80149dc:	f47f af3f 	bne.w	801485e <lv_colorwheel_event+0x96>
    colorwheel->last_click_time = lv_tick_get();
 80149e0:	f002 f816 	bl	8016a10 <lv_tick_get>
 80149e4:	6320      	str	r0, [r4, #48]	; 0x30
    return LV_RES_OK;
 80149e6:	e73a      	b.n	801485e <lv_colorwheel_event+0x96>
                hsv_cur.s = 100;
 80149e8:	2364      	movs	r3, #100	; 0x64
 80149ea:	f88d 3066 	strb.w	r3, [sp, #102]	; 0x66
                break;
 80149ee:	e7e7      	b.n	80149c0 <lv_colorwheel_event+0x1f8>
                hsv_cur.v = 100;
 80149f0:	2364      	movs	r3, #100	; 0x64
 80149f2:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
                break;
 80149f6:	e7e3      	b.n	80149c0 <lv_colorwheel_event+0x1f8>
 80149f8:	08025194 	.word	0x08025194
    else if(code == LV_EVENT_PRESSING) {
 80149fc:	2e02      	cmp	r6, #2
 80149fe:	f040 80cb 	bne.w	8014b98 <lv_colorwheel_event+0x3d0>
        lv_indev_t * indev = lv_indev_get_act();
 8014a02:	f7ed fcf7 	bl	80023f4 <lv_indev_get_act>
        if(indev == NULL) return;
 8014a06:	4606      	mov	r6, r0
 8014a08:	2800      	cmp	r0, #0
 8014a0a:	f43f af28 	beq.w	801485e <lv_colorwheel_event+0x96>
        lv_indev_type_t indev_type = lv_indev_get_type(indev);
 8014a0e:	f7ed fcf7 	bl	8002400 <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_ENCODER || indev_type == LV_INDEV_TYPE_KEYPAD) {
 8014a12:	2804      	cmp	r0, #4
 8014a14:	d002      	beq.n	8014a1c <lv_colorwheel_event+0x254>
 8014a16:	2802      	cmp	r0, #2
 8014a18:	f040 808e 	bne.w	8014b38 <lv_colorwheel_event+0x370>
            p.x = obj->coords.x1 + lv_obj_get_width(obj) / 2;
 8014a1c:	4620      	mov	r0, r4
 8014a1e:	8aa5      	ldrh	r5, [r4, #20]
 8014a20:	f7f0 fa25 	bl	8004e6e <lv_obj_get_width>
 8014a24:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8014a28:	eb05 0060 	add.w	r0, r5, r0, asr #1
            p.y = obj->coords.y1 + lv_obj_get_height(obj) / 2;
 8014a2c:	8ae5      	ldrh	r5, [r4, #22]
            p.x = obj->coords.x1 + lv_obj_get_width(obj) / 2;
 8014a2e:	f8ad 0048 	strh.w	r0, [sp, #72]	; 0x48
            p.y = obj->coords.y1 + lv_obj_get_height(obj) / 2;
 8014a32:	4620      	mov	r0, r4
 8014a34:	f7f0 fa21 	bl	8004e7a <lv_obj_get_height>
 8014a38:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8014a3c:	eb05 0060 	add.w	r0, r5, r0, asr #1
 8014a40:	f8ad 004a 	strh.w	r0, [sp, #74]	; 0x4a
        lv_coord_t drag_limit = indev->driver->scroll_limit;
 8014a44:	6833      	ldr	r3, [r6, #0]
        if((LV_ABS(p.x - colorwheel->last_press_point.x) > drag_limit) ||
 8014a46:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	; 0x38
 8014a4a:	7e1a      	ldrb	r2, [r3, #24]
 8014a4c:	f9bd 3048 	ldrsh.w	r3, [sp, #72]	; 0x48
 8014a50:	1a5b      	subs	r3, r3, r1
 8014a52:	2b00      	cmp	r3, #0
 8014a54:	bfb8      	it	lt
 8014a56:	425b      	neglt	r3, r3
 8014a58:	4293      	cmp	r3, r2
 8014a5a:	dc09      	bgt.n	8014a70 <lv_colorwheel_event+0x2a8>
           (LV_ABS(p.y - colorwheel->last_press_point.y) > drag_limit)) {
 8014a5c:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
 8014a60:	f9b4 103a 	ldrsh.w	r1, [r4, #58]	; 0x3a
 8014a64:	1a5b      	subs	r3, r3, r1
 8014a66:	2b00      	cmp	r3, #0
 8014a68:	bfb8      	it	lt
 8014a6a:	425b      	neglt	r3, r3
        if((LV_ABS(p.x - colorwheel->last_press_point.x) > drag_limit) ||
 8014a6c:	429a      	cmp	r2, r3
 8014a6e:	da04      	bge.n	8014a7a <lv_colorwheel_event+0x2b2>
            colorwheel->last_change_time = lv_tick_get();
 8014a70:	f001 ffce 	bl	8016a10 <lv_tick_get>
            colorwheel->last_press_point.x = p.x;
 8014a74:	9b12      	ldr	r3, [sp, #72]	; 0x48
            colorwheel->last_change_time = lv_tick_get();
 8014a76:	6360      	str	r0, [r4, #52]	; 0x34
            colorwheel->last_press_point.x = p.x;
 8014a78:	63a3      	str	r3, [r4, #56]	; 0x38
        p.x -= obj->coords.x1;
 8014a7a:	8aa2      	ldrh	r2, [r4, #20]
        uint16_t w = lv_obj_get_width(obj);
 8014a7c:	4620      	mov	r0, r4
        p.x -= obj->coords.x1;
 8014a7e:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8014a82:	1a9b      	subs	r3, r3, r2
        p.y -= obj->coords.y1;
 8014a84:	8ae2      	ldrh	r2, [r4, #22]
        p.x -= obj->coords.x1;
 8014a86:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
        p.y -= obj->coords.y1;
 8014a8a:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
 8014a8e:	1a9b      	subs	r3, r3, r2
 8014a90:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
        uint16_t w = lv_obj_get_width(obj);
 8014a94:	f7f0 f9eb 	bl	8004e6e <lv_obj_get_width>
 8014a98:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_WIDTH);
 8014a9a:	f44f 6205 	mov.w	r2, #2128	; 0x850
 8014a9e:	2100      	movs	r1, #0
 8014aa0:	4620      	mov	r0, r4
 8014aa2:	f7f2 fc61 	bl	8007368 <lv_obj_get_style_prop>
        lv_coord_t r_in = w / 2;
 8014aa6:	f3c5 034e 	ubfx	r3, r5, #1, #15
        p.x -= r_in;
 8014aaa:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
        p.y -= r_in;
 8014aae:	f8bd 104a 	ldrh.w	r1, [sp, #74]	; 0x4a
        p.x -= r_in;
 8014ab2:	1ad2      	subs	r2, r2, r3
        p.y -= r_in;
 8014ab4:	1ac9      	subs	r1, r1, r3
        r_in -= cir_w;
 8014ab6:	1a1b      	subs	r3, r3, r0
        p.x -= r_in;
 8014ab8:	b212      	sxth	r2, r2
        r_in -= cir_w;
 8014aba:	b29d      	uxth	r5, r3
 8014abc:	b21b      	sxth	r3, r3
        p.x -= r_in;
 8014abe:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
        p.y -= r_in;
 8014ac2:	b209      	sxth	r1, r1
        if(r_in > LV_DPI_DEF / 2) {
 8014ac4:	2b41      	cmp	r3, #65	; 0x41
        p.y -= r_in;
 8014ac6:	f8ad 104a 	strh.w	r1, [sp, #74]	; 0x4a
        if(r_in > LV_DPI_DEF / 2) {
 8014aca:	dd09      	ble.n	8014ae0 <lv_colorwheel_event+0x318>
            lv_coord_t inner = cir_w / 2;
 8014acc:	f3c0 33c0 	ubfx	r3, r0, #15, #1
 8014ad0:	fa03 f080 	sxtah	r0, r3, r0
            r_in -= inner;
 8014ad4:	eba5 0360 	sub.w	r3, r5, r0, asr #1
 8014ad8:	b21b      	sxth	r3, r3
 8014ada:	2b41      	cmp	r3, #65	; 0x41
 8014adc:	bfb8      	it	lt
 8014ade:	2341      	movlt	r3, #65	; 0x41
        if(p.x * p.x + p.y * p.y < r_in * r_in) {
 8014ae0:	4349      	muls	r1, r1
        uint32_t diff = lv_tick_elaps(colorwheel->last_change_time);
 8014ae2:	6b60      	ldr	r0, [r4, #52]	; 0x34
        if(p.x * p.x + p.y * p.y < r_in * r_in) {
 8014ae4:	fb03 f503 	mul.w	r5, r3, r3
 8014ae8:	fb02 1702 	mla	r7, r2, r2, r1
        uint32_t diff = lv_tick_elaps(colorwheel->last_change_time);
 8014aec:	f001 ff9e 	bl	8016a2c <lv_tick_elaps>
        if(!on_ring && diff > indev->driver->long_press_time && !colorwheel->mode_fixed) {
 8014af0:	42af      	cmp	r7, r5
 8014af2:	da26      	bge.n	8014b42 <lv_colorwheel_event+0x37a>
 8014af4:	6833      	ldr	r3, [r6, #0]
 8014af6:	8b9b      	ldrh	r3, [r3, #28]
 8014af8:	4298      	cmp	r0, r3
 8014afa:	f67f aeb0 	bls.w	801485e <lv_colorwheel_event+0x96>
 8014afe:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8014b02:	075a      	lsls	r2, r3, #29
 8014b04:	f53f aeab 	bmi.w	801485e <lv_colorwheel_event+0x96>
    colorwheel->mode = (colorwheel->mode + 1) % 3;
 8014b08:	f003 0203 	and.w	r2, r3, #3
 8014b0c:	2103      	movs	r1, #3
    refr_knob_pos(obj);
 8014b0e:	4620      	mov	r0, r4
    colorwheel->mode = (colorwheel->mode + 1) % 3;
 8014b10:	3201      	adds	r2, #1
 8014b12:	fbb2 f1f1 	udiv	r1, r2, r1
 8014b16:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8014b1a:	1a52      	subs	r2, r2, r1
 8014b1c:	f362 0301 	bfi	r3, r2, #0, #2
 8014b20:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    refr_knob_pos(obj);
 8014b24:	f7ff fda1 	bl	801466a <refr_knob_pos>
    lv_obj_invalidate(obj);
 8014b28:	4620      	mov	r0, r4
 8014b2a:	f7f0 faf5 	bl	8005118 <lv_obj_invalidate>
            lv_indev_wait_release(lv_indev_get_act());
 8014b2e:	f7ed fc61 	bl	80023f4 <lv_indev_get_act>
 8014b32:	f7ed fcff 	bl	8002534 <lv_indev_wait_release>
            return;
 8014b36:	e692      	b.n	801485e <lv_colorwheel_event+0x96>
            lv_indev_get_point(indev, &p);
 8014b38:	a912      	add	r1, sp, #72	; 0x48
 8014b3a:	4630      	mov	r0, r6
 8014b3c:	f7ed fcbb 	bl	80024b6 <lv_indev_get_point>
 8014b40:	e780      	b.n	8014a44 <lv_colorwheel_event+0x27c>
        angle = lv_atan2(p.x, p.y) % 360;
 8014b42:	f9bd 104a 	ldrsh.w	r1, [sp, #74]	; 0x4a
 8014b46:	f9bd 0048 	ldrsh.w	r0, [sp, #72]	; 0x48
 8014b4a:	f002 fd78 	bl	801763e <lv_atan2>
 8014b4e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8014b52:	fbb0 f3f2 	udiv	r3, r0, r2
 8014b56:	fb03 0012 	mls	r0, r3, r2, r0
        hsv_cur = colorwheel->hsv;
 8014b5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014b5c:	9319      	str	r3, [sp, #100]	; 0x64
        angle = lv_atan2(p.x, p.y) % 360;
 8014b5e:	b280      	uxth	r0, r0
        switch(colorwheel->mode) {
 8014b60:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8014b64:	f003 0303 	and.w	r3, r3, #3
 8014b68:	2b01      	cmp	r3, #1
 8014b6a:	d007      	beq.n	8014b7c <lv_colorwheel_event+0x3b4>
 8014b6c:	2b02      	cmp	r3, #2
 8014b6e:	d00c      	beq.n	8014b8a <lv_colorwheel_event+0x3c2>
 8014b70:	2b00      	cmp	r3, #0
 8014b72:	f47f aeb9 	bne.w	80148e8 <lv_colorwheel_event+0x120>
                hsv_cur.h = angle;
 8014b76:	f8ad 0064 	strh.w	r0, [sp, #100]	; 0x64
                break;
 8014b7a:	e6b5      	b.n	80148e8 <lv_colorwheel_event+0x120>
                hsv_cur.s = (angle * 100) / 360;
 8014b7c:	2364      	movs	r3, #100	; 0x64
 8014b7e:	4358      	muls	r0, r3
 8014b80:	fbb0 f0f2 	udiv	r0, r0, r2
 8014b84:	f88d 0066 	strb.w	r0, [sp, #102]	; 0x66
                break;
 8014b88:	e6ae      	b.n	80148e8 <lv_colorwheel_event+0x120>
                hsv_cur.v = (angle * 100) / 360;
 8014b8a:	2364      	movs	r3, #100	; 0x64
 8014b8c:	4358      	muls	r0, r3
 8014b8e:	fbb0 f0f2 	udiv	r0, r0, r2
 8014b92:	f88d 0067 	strb.w	r0, [sp, #103]	; 0x67
                break;
 8014b96:	e6a7      	b.n	80148e8 <lv_colorwheel_event+0x120>
    else if(code == LV_EVENT_HIT_TEST) {
 8014b98:	2e11      	cmp	r6, #17
 8014b9a:	d10c      	bne.n	8014bb6 <lv_colorwheel_event+0x3ee>
        lv_hit_test_info_t * info = lv_event_get_param(e);;
 8014b9c:	4628      	mov	r0, r5
 8014b9e:	f7ed f9b7 	bl	8001f10 <lv_event_get_param>
 8014ba2:	4605      	mov	r5, r0
        info->res = _lv_area_is_point_on(&obj->coords, info->point, LV_RADIUS_CIRCLE);
 8014ba4:	6801      	ldr	r1, [r0, #0]
 8014ba6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8014baa:	f104 0014 	add.w	r0, r4, #20
 8014bae:	f002 f9be 	bl	8016f2e <_lv_area_is_point_on>
 8014bb2:	7128      	strb	r0, [r5, #4]
 8014bb4:	e653      	b.n	801485e <lv_colorwheel_event+0x96>
    else if(code == LV_EVENT_DRAW_MAIN) {
 8014bb6:	2e15      	cmp	r6, #21
 8014bb8:	f040 8192 	bne.w	8014ee0 <lv_colorwheel_event+0x718>
    lv_obj_t * obj = lv_event_get_target(e);
 8014bbc:	4628      	mov	r0, r5
 8014bbe:	f8df b33c 	ldr.w	fp, [pc, #828]	; 8014efc <lv_colorwheel_event+0x734>
 8014bc2:	f7ed f9a1 	bl	8001f08 <lv_event_get_target>
 8014bc6:	4604      	mov	r4, r0
    const lv_area_t * clip_area = lv_event_get_param(e);
 8014bc8:	4628      	mov	r0, r5
            fast_hsv2rgb(h, angle, v, &r, &g, &b);
 8014bca:	f8df 8334 	ldr.w	r8, [pc, #820]	; 8014f00 <lv_colorwheel_event+0x738>
    const lv_area_t * clip_area = lv_event_get_param(e);
 8014bce:	f7ed f99f 	bl	8001f10 <lv_event_get_param>
 8014bd2:	ee08 0a10 	vmov	s16, r0
    lv_coord_t w = lv_obj_get_width(obj);
 8014bd6:	4620      	mov	r0, r4
            fast_hsv2rgb(h, angle, v, &r, &g, &b);
 8014bd8:	f8df 9328 	ldr.w	r9, [pc, #808]	; 8014f04 <lv_colorwheel_event+0x73c>
    lv_coord_t w = lv_obj_get_width(obj);
 8014bdc:	f7f0 f947 	bl	8004e6e <lv_obj_get_width>
 8014be0:	4606      	mov	r6, r0
    lv_coord_t h = lv_obj_get_height(obj);
 8014be2:	4620      	mov	r0, r4
    lv_coord_t cx = obj->coords.x1 + w / 2;
 8014be4:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
    lv_coord_t h = lv_obj_get_height(obj);
 8014be8:	f7f0 f947 	bl	8004e7a <lv_obj_get_height>
    lv_coord_t cx = obj->coords.x1 + w / 2;
 8014bec:	8aa3      	ldrh	r3, [r4, #20]
 8014bee:	f346 0a4f 	sbfx	sl, r6, #1, #16
    lv_coord_t cy = obj->coords.y1 + h / 2;
 8014bf2:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    lv_coord_t cx = obj->coords.x1 + w / 2;
 8014bf6:	4453      	add	r3, sl
 8014bf8:	b29b      	uxth	r3, r3
 8014bfa:	9303      	str	r3, [sp, #12]
    lv_coord_t cy = obj->coords.y1 + h / 2;
 8014bfc:	8ae3      	ldrh	r3, [r4, #22]
 8014bfe:	eb03 0060 	add.w	r0, r3, r0, asr #1
 8014c02:	b283      	uxth	r3, r0
    lv_draw_line_dsc_init(&line_dsc);
 8014c04:	a80f      	add	r0, sp, #60	; 0x3c
    lv_coord_t cy = obj->coords.y1 + h / 2;
 8014c06:	9304      	str	r3, [sp, #16]
    lv_draw_line_dsc_init(&line_dsc);
 8014c08:	f7f6 f904 	bl	800ae14 <lv_draw_line_dsc_init>
    lv_obj_init_draw_line_dsc(obj, LV_PART_MAIN, &line_dsc);
 8014c0c:	aa0f      	add	r2, sp, #60	; 0x3c
 8014c0e:	2100      	movs	r1, #0
 8014c10:	4620      	mov	r0, r4
 8014c12:	f7ef fe89 	bl	8004928 <lv_obj_init_draw_line_dsc>
    line_dsc.width = (r * 628 / (256 / LV_CPICKER_DEF_QF)) / 100;
 8014c16:	f44f 731d 	mov.w	r3, #628	; 0x274
 8014c1a:	f242 1234 	movw	r2, #8500	; 0x2134
 8014c1e:	2100      	movs	r1, #0
 8014c20:	fb1a f303 	smulbb	r3, sl, r3
 8014c24:	4620      	mov	r0, r4
 8014c26:	fb93 f3f2 	sdiv	r3, r3, r2
    line_dsc.width += 2;
 8014c2a:	3302      	adds	r3, #2
 8014c2c:	f44f 6205 	mov.w	r2, #2128	; 0x850
 8014c30:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8014c34:	f7f2 fb98 	bl	8007368 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8014c38:	b203      	sxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_WIDTH);
 8014c3a:	4606      	mov	r6, r0
    lv_draw_mask_radius_init(&mask_out_param, &obj->coords, LV_RADIUS_CIRCLE, false);
 8014c3c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8014c40:	f104 0114 	add.w	r1, r4, #20
 8014c44:	a812      	add	r0, sp, #72	; 0x48
    return (lv_coord_t)v.num;
 8014c46:	9306      	str	r3, [sp, #24]
 8014c48:	2300      	movs	r3, #0
 8014c4a:	f7f7 fb7f 	bl	800c34c <lv_draw_mask_radius_init>
    int16_t mask_out_id = lv_draw_mask_add(&mask_out_param, 0);
 8014c4e:	2100      	movs	r1, #0
 8014c50:	a812      	add	r0, sp, #72	; 0x48
 8014c52:	f7f7 fa15 	bl	800c080 <lv_draw_mask_add>
    dest->y1 = src->y1;
 8014c56:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
    mask_area.x1 += cir_w;
 8014c5a:	b2b2      	uxth	r2, r6
    dest->y2 = src->y2;
 8014c5c:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
    int16_t mask_out_id = lv_draw_mask_add(&mask_out_param, 0);
 8014c60:	ee08 0a90 	vmov	s17, r0
    dest->x2 = src->x2;
 8014c64:	f9b4 0018 	ldrsh.w	r0, [r4, #24]
    mask_area.x1 += cir_w;
 8014c68:	f8b4 c014 	ldrh.w	ip, [r4, #20]
    mask_area.y1 += cir_w;
 8014c6c:	4411      	add	r1, r2
    mask_area.x2 -= cir_w;
 8014c6e:	1a80      	subs	r0, r0, r2
    mask_area.y2 -= cir_w;
 8014c70:	1a9b      	subs	r3, r3, r2
    mask_area.x1 += cir_w;
 8014c72:	fa1c f686 	uxtah	r6, ip, r6
    lv_draw_mask_radius_init(&mask_in_param, &mask_area, LV_RADIUS_CIRCLE, true);
 8014c76:	f647 72ff 	movw	r2, #32767	; 0x7fff
    mask_area.x2 -= cir_w;
 8014c7a:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
    lv_draw_mask_radius_init(&mask_in_param, &mask_area, LV_RADIUS_CIRCLE, true);
 8014c7e:	a819      	add	r0, sp, #100	; 0x64
    mask_area.y1 += cir_w;
 8014c80:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
    lv_draw_mask_radius_init(&mask_in_param, &mask_area, LV_RADIUS_CIRCLE, true);
 8014c84:	a90b      	add	r1, sp, #44	; 0x2c
    mask_area.y2 -= cir_w;
 8014c86:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
    lv_draw_mask_radius_init(&mask_in_param, &mask_area, LV_RADIUS_CIRCLE, true);
 8014c8a:	463b      	mov	r3, r7
    mask_area.x1 += cir_w;
 8014c8c:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
    lv_draw_mask_radius_init(&mask_in_param, &mask_area, LV_RADIUS_CIRCLE, true);
 8014c90:	f7f7 fb5c 	bl	800c34c <lv_draw_mask_radius_init>
    int16_t mask_in_id = lv_draw_mask_add(&mask_in_param, 0);
 8014c94:	2100      	movs	r1, #0
 8014c96:	a819      	add	r0, sp, #100	; 0x64
 8014c98:	f7f7 f9f2 	bl	800c080 <lv_draw_mask_add>
    lv_coord_t cir_w_extra = line_dsc.width;
 8014c9c:	2600      	movs	r6, #0
 8014c9e:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
    int16_t mask_in_id = lv_draw_mask_add(&mask_in_param, 0);
 8014ca2:	ee09 0a10 	vmov	s18, r0
    lv_coord_t cir_w_extra = line_dsc.width;
 8014ca6:	9305      	str	r3, [sp, #20]
    uint8_t r = 0, g = 0, b = 0;
 8014ca8:	2300      	movs	r3, #0
 8014caa:	f44f 6787 	mov.w	r7, #1080	; 0x438
 8014cae:	f89b 1000 	ldrb.w	r1, [fp]
 8014cb2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014cb6:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 8014cba:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
    switch(ext->mode) {
 8014cbe:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8014cc2:	4377      	muls	r7, r6
 8014cc4:	f3c3 0201 	ubfx	r2, r3, #0, #2
 8014cc8:	f003 0303 	and.w	r3, r3, #3
 8014ccc:	2b01      	cmp	r3, #1
 8014cce:	f000 80bb 	beq.w	8014e48 <lv_colorwheel_event+0x680>
 8014cd2:	2b02      	cmp	r3, #2
 8014cd4:	f000 80e3 	beq.w	8014e9e <lv_colorwheel_event+0x6d6>
            if (m != ext->mode) {
 8014cd8:	428b      	cmp	r3, r1
 8014cda:	d016      	beq.n	8014d0a <lv_colorwheel_event+0x542>
              s = (uint8_t)(((uint16_t)ext->hsv.s * 51) / 20); v = (uint8_t)(((uint16_t)ext->hsv.v * 51) / 20);
 8014cdc:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8014ce0:	2014      	movs	r0, #20
              m = ext->mode;
 8014ce2:	f88b 2000 	strb.w	r2, [fp]
              s = (uint8_t)(((uint16_t)ext->hsv.s * 51) / 20); v = (uint8_t)(((uint16_t)ext->hsv.v * 51) / 20);
 8014ce6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8014cea:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8014cee:	fbb3 f1f0 	udiv	r1, r3, r0
 8014cf2:	4b81      	ldr	r3, [pc, #516]	; (8014ef8 <lv_colorwheel_event+0x730>)
 8014cf4:	7019      	strb	r1, [r3, #0]
 8014cf6:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 8014cfa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8014cfe:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8014d02:	fbb3 f3f0 	udiv	r3, r3, r0
 8014d06:	f888 3000 	strb.w	r3, [r8]
            fast_hsv2rgb(angle * 6, s, v, &r, &g, &b); /*A smart compiler will replace x * 6 by (x << 2) + (x << 1) if it's more efficient*/
 8014d0a:	4b7b      	ldr	r3, [pc, #492]	; (8014ef8 <lv_colorwheel_event+0x730>)
 8014d0c:	f898 2000 	ldrb.w	r2, [r8]
 8014d10:	7819      	ldrb	r1, [r3, #0]
    if (!s) { *r = *g = *b = v; return; }
 8014d12:	2900      	cmp	r1, #0
 8014d14:	f040 808a 	bne.w	8014e2c <lv_colorwheel_event+0x664>
 8014d18:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
 8014d1c:	f88d 202b 	strb.w	r2, [sp, #43]	; 0x2b
 8014d20:	f88d 202a 	strb.w	r2, [sp, #42]	; 0x2a
    return (uint8_t)(bright >> 3);
}

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 8014d24:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 8014d28:	3601      	adds	r6, #1
 8014d2a:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
 8014d2e:	089b      	lsrs	r3, r3, #2
 8014d30:	f89d 202a 	ldrb.w	r2, [sp, #42]	; 0x2a
        line_dsc.color = angle_to_mode_color_fast(obj, i);
 8014d34:	015b      	lsls	r3, r3, #5
 8014d36:	08d2      	lsrs	r2, r2, #3
 8014d38:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 8014d3c:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
        p[0].x = cx + ((r + cir_w_extra) * lv_trigo_sin(angle_trigo) >> LV_TRIGO_SHIFT);
 8014d40:	f347 220f 	sbfx	r2, r7, #8, #16
        line_dsc.color = angle_to_mode_color_fast(obj, i);
 8014d44:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
        uint16_t angle_trigo = (uint16_t)(a >> 8); /*i * 360 / 256 is the scale to apply, but we can skip multiplication here*/
 8014d48:	0a3b      	lsrs	r3, r7, #8
        p[0].x = cx + ((r + cir_w_extra) * lv_trigo_sin(angle_trigo) >> LV_TRIGO_SHIFT);
 8014d4a:	4610      	mov	r0, r2
 8014d4c:	9208      	str	r2, [sp, #32]
        uint16_t angle_trigo = (uint16_t)(a >> 8); /*i * 360 / 256 is the scale to apply, but we can skip multiplication here*/
 8014d4e:	9309      	str	r3, [sp, #36]	; 0x24
        p[0].x = cx + ((r + cir_w_extra) * lv_trigo_sin(angle_trigo) >> LV_TRIGO_SHIFT);
 8014d50:	9b05      	ldr	r3, [sp, #20]
 8014d52:	eb0a 0103 	add.w	r1, sl, r3
 8014d56:	9107      	str	r1, [sp, #28]
 8014d58:	f002 fc10 	bl	801757c <lv_trigo_sin>
 8014d5c:	9907      	ldr	r1, [sp, #28]
 8014d5e:	9b03      	ldr	r3, [sp, #12]
 8014d60:	4348      	muls	r0, r1
 8014d62:	460f      	mov	r7, r1
 8014d64:	eb03 30e0 	add.w	r0, r3, r0, asr #15
 8014d68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014d6a:	335a      	adds	r3, #90	; 0x5a
 8014d6c:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
 8014d70:	b21b      	sxth	r3, r3
 8014d72:	4618      	mov	r0, r3
 8014d74:	9307      	str	r3, [sp, #28]
 8014d76:	f002 fc01 	bl	801757c <lv_trigo_sin>
        p[0].y = cy + ((r + cir_w_extra) * lv_trigo_cos(angle_trigo) >> LV_TRIGO_SHIFT);
 8014d7a:	9b04      	ldr	r3, [sp, #16]
 8014d7c:	4378      	muls	r0, r7
        p[1].x = cx + ((r - cir_w - cir_w_extra) * lv_trigo_sin(angle_trigo) >> LV_TRIGO_SHIFT);
 8014d7e:	9a08      	ldr	r2, [sp, #32]
        p[0].y = cy + ((r + cir_w_extra) * lv_trigo_cos(angle_trigo) >> LV_TRIGO_SHIFT);
 8014d80:	eb03 30e0 	add.w	r0, r3, r0, asr #15
        p[1].x = cx + ((r - cir_w - cir_w_extra) * lv_trigo_sin(angle_trigo) >> LV_TRIGO_SHIFT);
 8014d84:	9b06      	ldr	r3, [sp, #24]
 8014d86:	ebaa 0703 	sub.w	r7, sl, r3
 8014d8a:	9b05      	ldr	r3, [sp, #20]
        p[0].y = cy + ((r + cir_w_extra) * lv_trigo_cos(angle_trigo) >> LV_TRIGO_SHIFT);
 8014d8c:	f8ad 0036 	strh.w	r0, [sp, #54]	; 0x36
        p[1].x = cx + ((r - cir_w - cir_w_extra) * lv_trigo_sin(angle_trigo) >> LV_TRIGO_SHIFT);
 8014d90:	4610      	mov	r0, r2
 8014d92:	1aff      	subs	r7, r7, r3
 8014d94:	f002 fbf2 	bl	801757c <lv_trigo_sin>
 8014d98:	9b03      	ldr	r3, [sp, #12]
 8014d9a:	4378      	muls	r0, r7
 8014d9c:	eb03 30e0 	add.w	r0, r3, r0, asr #15
 8014da0:	9b07      	ldr	r3, [sp, #28]
 8014da2:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
 8014da6:	4618      	mov	r0, r3
 8014da8:	f002 fbe8 	bl	801757c <lv_trigo_sin>
        p[1].y = cy + ((r - cir_w - cir_w_extra) * lv_trigo_cos(angle_trigo) >> LV_TRIGO_SHIFT);
 8014dac:	9b04      	ldr	r3, [sp, #16]
 8014dae:	4378      	muls	r0, r7
        lv_draw_line(&p[0], &p[1], clip_area, &line_dsc);
 8014db0:	ee18 2a10 	vmov	r2, s16
 8014db4:	a90e      	add	r1, sp, #56	; 0x38
        p[1].y = cy + ((r - cir_w - cir_w_extra) * lv_trigo_cos(angle_trigo) >> LV_TRIGO_SHIFT);
 8014db6:	eb03 30e0 	add.w	r0, r3, r0, asr #15
        lv_draw_line(&p[0], &p[1], clip_area, &line_dsc);
 8014dba:	ab0f      	add	r3, sp, #60	; 0x3c
        p[1].y = cy + ((r - cir_w - cir_w_extra) * lv_trigo_cos(angle_trigo) >> LV_TRIGO_SHIFT);
 8014dbc:	f8ad 003a 	strh.w	r0, [sp, #58]	; 0x3a
        lv_draw_line(&p[0], &p[1], clip_area, &line_dsc);
 8014dc0:	a80d      	add	r0, sp, #52	; 0x34
 8014dc2:	f7f6 f833 	bl	800ae2c <lv_draw_line>
    for(i = 0; i <= 256; i += LV_CPICKER_DEF_QF, a += 360 * LV_CPICKER_DEF_QF) {
 8014dc6:	2e56      	cmp	r6, #86	; 0x56
 8014dc8:	f47f af6e 	bne.w	8014ca8 <lv_colorwheel_event+0x4e0>
    lv_draw_mask_remove_id(mask_out_id);
 8014dcc:	ee18 0a90 	vmov	r0, s17
 8014dd0:	f7f7 f98e 	bl	800c0f0 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_in_id);
 8014dd4:	ee19 0a10 	vmov	r0, s18
 8014dd8:	f7f7 f98a 	bl	800c0f0 <lv_draw_mask_remove_id>
    lv_obj_t * obj = lv_event_get_target(e);
 8014ddc:	4628      	mov	r0, r5
 8014dde:	f7ed f893 	bl	8001f08 <lv_event_get_target>
 8014de2:	4604      	mov	r4, r0
    const lv_area_t * clip_area = lv_event_get_param(e);
 8014de4:	4628      	mov	r0, r5
 8014de6:	f7ed f893 	bl	8001f10 <lv_event_get_param>
 8014dea:	4605      	mov	r5, r0
    lv_draw_rect_dsc_init(&cir_dsc);
 8014dec:	a819      	add	r0, sp, #100	; 0x64
 8014dee:	f7f7 fe4b 	bl	800ca88 <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(obj, LV_PART_KNOB, &cir_dsc);
 8014df2:	aa19      	add	r2, sp, #100	; 0x64
 8014df4:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8014df8:	4620      	mov	r0, r4
 8014dfa:	f7ef fbb1 	bl	8004560 <lv_obj_init_draw_rect_dsc>
    cir_dsc.radius = LV_RADIUS_CIRCLE;
 8014dfe:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8014e02:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
    if(colorwheel->knob.recolor) {
 8014e06:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8014e0a:	07db      	lsls	r3, r3, #31
 8014e0c:	d504      	bpl.n	8014e18 <lv_colorwheel_event+0x650>
        cir_dsc.bg_color = lv_colorwheel_get_rgb(obj);
 8014e0e:	4620      	mov	r0, r4
 8014e10:	f7ff fcd2 	bl	80147b8 <lv_colorwheel_get_rgb>
 8014e14:	f8ad 0068 	strh.w	r0, [sp, #104]	; 0x68
    lv_area_t knob_area = get_knob_area(obj);
 8014e18:	4621      	mov	r1, r4
 8014e1a:	a812      	add	r0, sp, #72	; 0x48
 8014e1c:	f7ff fbdd 	bl	80145da <get_knob_area>
    lv_draw_rect(&knob_area, clip_area, &cir_dsc);
 8014e20:	aa19      	add	r2, sp, #100	; 0x64
 8014e22:	4629      	mov	r1, r5
 8014e24:	a812      	add	r0, sp, #72	; 0x48
 8014e26:	f7f7 fe51 	bl	800cacc <lv_draw_rect>
}
 8014e2a:	e518      	b.n	801485e <lv_colorwheel_event+0x96>
 8014e2c:	ab0d      	add	r3, sp, #52	; 0x34
 8014e2e:	eb06 00c6 	add.w	r0, r6, r6, lsl #3
 8014e32:	9301      	str	r3, [sp, #4]
 8014e34:	0040      	lsls	r0, r0, #1
 8014e36:	f10d 032b 	add.w	r3, sp, #43	; 0x2b
 8014e3a:	b280      	uxth	r0, r0
 8014e3c:	9300      	str	r3, [sp, #0]
 8014e3e:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
 8014e42:	f7ff fb97 	bl	8014574 <fast_hsv2rgb.part.0>
 8014e46:	e76d      	b.n	8014d24 <lv_colorwheel_event+0x55c>
            if (m != ext->mode) {
 8014e48:	2901      	cmp	r1, #1
 8014e4a:	d016      	beq.n	8014e7a <lv_colorwheel_event+0x6b2>
              h = (uint16_t)(((uint32_t)ext->hsv.h * 6 * 256) / 360); v = (uint8_t)(((uint16_t)ext->hsv.v * 51) / 20);
 8014e4c:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
 8014e4e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
              m = ext->mode;
 8014e52:	f88b 2000 	strb.w	r2, [fp]
              h = (uint16_t)(((uint32_t)ext->hsv.h * 6 * 256) / 360); v = (uint8_t)(((uint16_t)ext->hsv.v * 51) / 20);
 8014e56:	434b      	muls	r3, r1
 8014e58:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8014e5c:	fbb3 f3f1 	udiv	r3, r3, r1
 8014e60:	f8a9 3000 	strh.w	r3, [r9]
 8014e64:	2114      	movs	r1, #20
 8014e66:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 8014e6a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8014e6e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8014e72:	fbb3 f3f1 	udiv	r3, r3, r1
 8014e76:	f888 3000 	strb.w	r3, [r8]
            fast_hsv2rgb(h, angle, v, &r, &g, &b);
 8014e7a:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8014e7e:	f898 2000 	ldrb.w	r2, [r8]
    if (!s) { *r = *g = *b = v; return; }
 8014e82:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 8014e86:	f43f af47 	beq.w	8014d18 <lv_colorwheel_event+0x550>
 8014e8a:	ab0d      	add	r3, sp, #52	; 0x34
 8014e8c:	f8b9 0000 	ldrh.w	r0, [r9]
 8014e90:	9301      	str	r3, [sp, #4]
 8014e92:	f10d 032b 	add.w	r3, sp, #43	; 0x2b
 8014e96:	9300      	str	r3, [sp, #0]
 8014e98:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
 8014e9c:	e7d1      	b.n	8014e42 <lv_colorwheel_event+0x67a>
            if (m != ext->mode) {
 8014e9e:	2902      	cmp	r1, #2
 8014ea0:	d016      	beq.n	8014ed0 <lv_colorwheel_event+0x708>
              h = (uint16_t)(((uint32_t)ext->hsv.h * 6 * 256) / 360); s = (uint8_t)(((uint16_t)ext->hsv.s * 51) / 20);
 8014ea2:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
 8014ea4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
              m = ext->mode;
 8014ea8:	f88b 2000 	strb.w	r2, [fp]
              h = (uint16_t)(((uint32_t)ext->hsv.h * 6 * 256) / 360); s = (uint8_t)(((uint16_t)ext->hsv.s * 51) / 20);
 8014eac:	434b      	muls	r3, r1
 8014eae:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8014eb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8014eb6:	f8a9 3000 	strh.w	r3, [r9]
 8014eba:	2114      	movs	r1, #20
 8014ebc:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8014ec0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8014ec4:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8014ec8:	fbb3 f3f1 	udiv	r3, r3, r1
 8014ecc:	490a      	ldr	r1, [pc, #40]	; (8014ef8 <lv_colorwheel_event+0x730>)
 8014ece:	700b      	strb	r3, [r1, #0]
            fast_hsv2rgb(h, s, angle, &r, &g, &b);
 8014ed0:	4b09      	ldr	r3, [pc, #36]	; (8014ef8 <lv_colorwheel_event+0x730>)
 8014ed2:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 8014ed6:	7819      	ldrb	r1, [r3, #0]
 8014ed8:	b2d2      	uxtb	r2, r2
    if (!s) { *r = *g = *b = v; return; }
 8014eda:	2900      	cmp	r1, #0
 8014edc:	d1d5      	bne.n	8014e8a <lv_colorwheel_event+0x6c2>
 8014ede:	e71b      	b.n	8014d18 <lv_colorwheel_event+0x550>
    else if(code == LV_EVENT_COVER_CHECK) {
 8014ee0:	2e12      	cmp	r6, #18
 8014ee2:	f47f acbc 	bne.w	801485e <lv_colorwheel_event+0x96>
        lv_cover_check_info_t * info = lv_event_get_param(e);
 8014ee6:	4628      	mov	r0, r5
 8014ee8:	f7ed f812 	bl	8001f10 <lv_event_get_param>
        if(info->res != LV_COVER_RES_MASKED) info->res = LV_COVER_RES_NOT_COVER;
 8014eec:	7803      	ldrb	r3, [r0, #0]
 8014eee:	2b02      	cmp	r3, #2
 8014ef0:	bf1c      	itt	ne
 8014ef2:	2301      	movne	r3, #1
 8014ef4:	7003      	strbne	r3, [r0, #0]
 8014ef6:	e4b2      	b.n	801485e <lv_colorwheel_event+0x96>
 8014ef8:	20002b3c 	.word	0x20002b3c
 8014efc:	20000005 	.word	0x20000005
 8014f00:	20002b3d 	.word	0x20002b3d
 8014f04:	20002b3a 	.word	0x20002b3a

08014f08 <lv_keyboard_def_event_cb>:
 * button clicks
 * @param kb pointer to a  keyboard
 * @param event the triggering event
 */
void lv_keyboard_def_event_cb(lv_event_t * e)
{
 8014f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    lv_obj_t * obj = lv_event_get_target(e);
 8014f0a:	f7ec fffd 	bl	8001f08 <lv_event_get_target>
 8014f0e:	4604      	mov	r4, r0

    lv_keyboard_t * keyboard = (lv_keyboard_t *)obj;
    uint16_t btn_id   = lv_btnmatrix_get_selected_btn(obj);
 8014f10:	f006 fb08 	bl	801b524 <lv_btnmatrix_get_selected_btn>
    if(btn_id == LV_BTNMATRIX_BTN_NONE) return;
 8014f14:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014f18:	4298      	cmp	r0, r3
 8014f1a:	f000 80df 	beq.w	80150dc <lv_keyboard_def_event_cb+0x1d4>

    const char * txt = lv_btnmatrix_get_btn_text(obj, lv_btnmatrix_get_selected_btn(obj));
 8014f1e:	4620      	mov	r0, r4
 8014f20:	f006 fb00 	bl	801b524 <lv_btnmatrix_get_selected_btn>
 8014f24:	4601      	mov	r1, r0
 8014f26:	4620      	mov	r0, r4
 8014f28:	f006 fafe 	bl	801b528 <lv_btnmatrix_get_btn_text>
    if(txt == NULL) return;
 8014f2c:	4605      	mov	r5, r0
 8014f2e:	2800      	cmp	r0, #0
 8014f30:	f000 80d4 	beq.w	80150dc <lv_keyboard_def_event_cb+0x1d4>

    if(strcmp(txt, "abc") == 0) {
 8014f34:	496a      	ldr	r1, [pc, #424]	; (80150e0 <lv_keyboard_def_event_cb+0x1d8>)
 8014f36:	f7eb f9bb 	bl	80002b0 <strcmp>
 8014f3a:	b968      	cbnz	r0, 8014f58 <lv_keyboard_def_event_cb+0x50>
        keyboard->mode = LV_KEYBOARD_MODE_TEXT_LOWER;
        lv_btnmatrix_set_map(obj, kb_map[LV_KEYBOARD_MODE_TEXT_LOWER]);
 8014f3c:	4b69      	ldr	r3, [pc, #420]	; (80150e4 <lv_keyboard_def_event_cb+0x1dc>)
        keyboard->mode = LV_KEYBOARD_MODE_TEXT_LOWER;
 8014f3e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
        lv_btnmatrix_set_map(obj, kb_map[LV_KEYBOARD_MODE_TEXT_LOWER]);
 8014f42:	4620      	mov	r0, r4
 8014f44:	6819      	ldr	r1, [r3, #0]
 8014f46:	f006 fa91 	bl	801b46c <lv_btnmatrix_set_map>
        lv_btnmatrix_set_ctrl_map(obj, kb_ctrl[LV_KEYBOARD_MODE_TEXT_LOWER]);
 8014f4a:	4b67      	ldr	r3, [pc, #412]	; (80150e8 <lv_keyboard_def_event_cb+0x1e0>)
 8014f4c:	6819      	ldr	r1, [r3, #0]
        return;
    }
    else if(strcmp(txt, "ABC") == 0) {
        keyboard->mode = LV_KEYBOARD_MODE_TEXT_UPPER;
        lv_btnmatrix_set_map(obj, kb_map[LV_KEYBOARD_MODE_TEXT_UPPER]);
        lv_btnmatrix_set_ctrl_map(obj, kb_ctrl[LV_KEYBOARD_MODE_TEXT_UPPER]);
 8014f4e:	4620      	mov	r0, r4
        }
    }
    else {
        lv_textarea_add_text(keyboard->ta, txt);
    }
}
 8014f50:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        lv_btnmatrix_set_ctrl_map(obj, kb_ctrl[LV_KEYBOARD_MODE_TEXT_UPPER]);
 8014f54:	f006 ba8e 	b.w	801b474 <lv_btnmatrix_set_ctrl_map>
    else if(strcmp(txt, "ABC") == 0) {
 8014f58:	4964      	ldr	r1, [pc, #400]	; (80150ec <lv_keyboard_def_event_cb+0x1e4>)
 8014f5a:	4628      	mov	r0, r5
 8014f5c:	f7eb f9a8 	bl	80002b0 <strcmp>
 8014f60:	b950      	cbnz	r0, 8014f78 <lv_keyboard_def_event_cb+0x70>
        keyboard->mode = LV_KEYBOARD_MODE_TEXT_UPPER;
 8014f62:	2301      	movs	r3, #1
        lv_btnmatrix_set_map(obj, kb_map[LV_KEYBOARD_MODE_TEXT_UPPER]);
 8014f64:	4620      	mov	r0, r4
        keyboard->mode = LV_KEYBOARD_MODE_TEXT_UPPER;
 8014f66:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        lv_btnmatrix_set_map(obj, kb_map[LV_KEYBOARD_MODE_TEXT_UPPER]);
 8014f6a:	4b5e      	ldr	r3, [pc, #376]	; (80150e4 <lv_keyboard_def_event_cb+0x1dc>)
 8014f6c:	6859      	ldr	r1, [r3, #4]
 8014f6e:	f006 fa7d 	bl	801b46c <lv_btnmatrix_set_map>
        lv_btnmatrix_set_ctrl_map(obj, kb_ctrl[LV_KEYBOARD_MODE_TEXT_UPPER]);
 8014f72:	4b5d      	ldr	r3, [pc, #372]	; (80150e8 <lv_keyboard_def_event_cb+0x1e0>)
 8014f74:	6859      	ldr	r1, [r3, #4]
 8014f76:	e7ea      	b.n	8014f4e <lv_keyboard_def_event_cb+0x46>
    else if(strcmp(txt, "1#") == 0) {
 8014f78:	495d      	ldr	r1, [pc, #372]	; (80150f0 <lv_keyboard_def_event_cb+0x1e8>)
 8014f7a:	4628      	mov	r0, r5
 8014f7c:	f7eb f998 	bl	80002b0 <strcmp>
 8014f80:	b950      	cbnz	r0, 8014f98 <lv_keyboard_def_event_cb+0x90>
        keyboard->mode = LV_KEYBOARD_MODE_SPECIAL;
 8014f82:	2302      	movs	r3, #2
        lv_btnmatrix_set_map(obj, kb_map[LV_KEYBOARD_MODE_SPECIAL]);
 8014f84:	4620      	mov	r0, r4
        keyboard->mode = LV_KEYBOARD_MODE_SPECIAL;
 8014f86:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        lv_btnmatrix_set_map(obj, kb_map[LV_KEYBOARD_MODE_SPECIAL]);
 8014f8a:	4b56      	ldr	r3, [pc, #344]	; (80150e4 <lv_keyboard_def_event_cb+0x1dc>)
 8014f8c:	6899      	ldr	r1, [r3, #8]
 8014f8e:	f006 fa6d 	bl	801b46c <lv_btnmatrix_set_map>
        lv_btnmatrix_set_ctrl_map(obj, kb_ctrl[LV_KEYBOARD_MODE_SPECIAL]);
 8014f92:	4b55      	ldr	r3, [pc, #340]	; (80150e8 <lv_keyboard_def_event_cb+0x1e0>)
 8014f94:	6899      	ldr	r1, [r3, #8]
 8014f96:	e7da      	b.n	8014f4e <lv_keyboard_def_event_cb+0x46>
    else if(strcmp(txt, LV_SYMBOL_CLOSE) == 0 || strcmp(txt, LV_SYMBOL_KEYBOARD) == 0) {
 8014f98:	4956      	ldr	r1, [pc, #344]	; (80150f4 <lv_keyboard_def_event_cb+0x1ec>)
 8014f9a:	4628      	mov	r0, r5
 8014f9c:	f7eb f988 	bl	80002b0 <strcmp>
 8014fa0:	b120      	cbz	r0, 8014fac <lv_keyboard_def_event_cb+0xa4>
 8014fa2:	4955      	ldr	r1, [pc, #340]	; (80150f8 <lv_keyboard_def_event_cb+0x1f0>)
 8014fa4:	4628      	mov	r0, r5
 8014fa6:	f7eb f983 	bl	80002b0 <strcmp>
 8014faa:	b988      	cbnz	r0, 8014fd0 <lv_keyboard_def_event_cb+0xc8>
        lv_res_t res = lv_event_send(obj, LV_EVENT_CANCEL, NULL);
 8014fac:	2200      	movs	r2, #0
 8014fae:	2120      	movs	r1, #32
 8014fb0:	4620      	mov	r0, r4
 8014fb2:	f7ec ff89 	bl	8001ec8 <lv_event_send>
        if(res != LV_RES_OK) return;
 8014fb6:	2801      	cmp	r0, #1
 8014fb8:	f040 8090 	bne.w	80150dc <lv_keyboard_def_event_cb+0x1d4>
        if(keyboard->ta) {
 8014fbc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8014fbe:	2800      	cmp	r0, #0
 8014fc0:	f000 808c 	beq.w	80150dc <lv_keyboard_def_event_cb+0x1d4>
            res = lv_event_send(keyboard->ta, LV_EVENT_CANCEL, NULL);
 8014fc4:	2200      	movs	r2, #0
 8014fc6:	2120      	movs	r1, #32
}
 8014fc8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            res = lv_event_send(keyboard->ta, LV_EVENT_READY, NULL);
 8014fcc:	f7ec bf7c 	b.w	8001ec8 <lv_event_send>
    else if(strcmp(txt, LV_SYMBOL_OK) == 0) {
 8014fd0:	494a      	ldr	r1, [pc, #296]	; (80150fc <lv_keyboard_def_event_cb+0x1f4>)
 8014fd2:	4628      	mov	r0, r5
 8014fd4:	f7eb f96c 	bl	80002b0 <strcmp>
 8014fd8:	4602      	mov	r2, r0
 8014fda:	b958      	cbnz	r0, 8014ff4 <lv_keyboard_def_event_cb+0xec>
        lv_res_t res = lv_event_send(obj, LV_EVENT_READY, NULL);
 8014fdc:	211f      	movs	r1, #31
 8014fde:	4620      	mov	r0, r4
 8014fe0:	f7ec ff72 	bl	8001ec8 <lv_event_send>
        if(res != LV_RES_OK) return;
 8014fe4:	2801      	cmp	r0, #1
 8014fe6:	d179      	bne.n	80150dc <lv_keyboard_def_event_cb+0x1d4>
        if(keyboard->ta) {
 8014fe8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8014fea:	2800      	cmp	r0, #0
 8014fec:	d076      	beq.n	80150dc <lv_keyboard_def_event_cb+0x1d4>
            res = lv_event_send(keyboard->ta, LV_EVENT_READY, NULL);
 8014fee:	2200      	movs	r2, #0
 8014ff0:	211f      	movs	r1, #31
 8014ff2:	e7e9      	b.n	8014fc8 <lv_keyboard_def_event_cb+0xc0>
    if(keyboard->ta == NULL) return;
 8014ff4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8014ff6:	2e00      	cmp	r6, #0
 8014ff8:	d070      	beq.n	80150dc <lv_keyboard_def_event_cb+0x1d4>
    if(strcmp(txt, "Enter") == 0 || strcmp(txt, LV_SYMBOL_NEW_LINE) == 0) {
 8014ffa:	4941      	ldr	r1, [pc, #260]	; (8015100 <lv_keyboard_def_event_cb+0x1f8>)
 8014ffc:	4628      	mov	r0, r5
 8014ffe:	f7eb f957 	bl	80002b0 <strcmp>
 8015002:	b120      	cbz	r0, 801500e <lv_keyboard_def_event_cb+0x106>
 8015004:	493f      	ldr	r1, [pc, #252]	; (8015104 <lv_keyboard_def_event_cb+0x1fc>)
 8015006:	4628      	mov	r0, r5
 8015008:	f7eb f952 	bl	80002b0 <strcmp>
 801500c:	b960      	cbnz	r0, 8015028 <lv_keyboard_def_event_cb+0x120>
        lv_textarea_add_char(keyboard->ta, '\n');
 801500e:	4630      	mov	r0, r6
 8015010:	210a      	movs	r1, #10
 8015012:	f00a ff13 	bl	801fe3c <lv_textarea_add_char>
        if(lv_textarea_get_one_line(keyboard->ta)) {
 8015016:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8015018:	f00a fe47 	bl	801fcaa <lv_textarea_get_one_line>
 801501c:	2800      	cmp	r0, #0
 801501e:	d05d      	beq.n	80150dc <lv_keyboard_def_event_cb+0x1d4>
            lv_res_t res = lv_event_send(keyboard->ta, LV_EVENT_READY, NULL);
 8015020:	2200      	movs	r2, #0
 8015022:	211f      	movs	r1, #31
 8015024:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8015026:	e7cf      	b.n	8014fc8 <lv_keyboard_def_event_cb+0xc0>
    } else if(strcmp(txt, LV_SYMBOL_LEFT) == 0) {
 8015028:	4937      	ldr	r1, [pc, #220]	; (8015108 <lv_keyboard_def_event_cb+0x200>)
 801502a:	4628      	mov	r0, r5
 801502c:	f7eb f940 	bl	80002b0 <strcmp>
 8015030:	b920      	cbnz	r0, 801503c <lv_keyboard_def_event_cb+0x134>
        lv_textarea_cursor_left(keyboard->ta);
 8015032:	4630      	mov	r0, r6
}
 8015034:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        lv_textarea_cursor_left(keyboard->ta);
 8015038:	f00b b88c 	b.w	8020154 <lv_textarea_cursor_left>
    } else if(strcmp(txt, LV_SYMBOL_RIGHT) == 0) {
 801503c:	4933      	ldr	r1, [pc, #204]	; (801510c <lv_keyboard_def_event_cb+0x204>)
 801503e:	4628      	mov	r0, r5
 8015040:	f7eb f936 	bl	80002b0 <strcmp>
 8015044:	b920      	cbnz	r0, 8015050 <lv_keyboard_def_event_cb+0x148>
        lv_textarea_cursor_right(keyboard->ta);
 8015046:	4630      	mov	r0, r6
}
 8015048:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        lv_textarea_cursor_right(keyboard->ta);
 801504c:	f00b b87e 	b.w	802014c <lv_textarea_cursor_right>
    } else if(strcmp(txt, LV_SYMBOL_BACKSPACE) == 0) {
 8015050:	492f      	ldr	r1, [pc, #188]	; (8015110 <lv_keyboard_def_event_cb+0x208>)
 8015052:	4628      	mov	r0, r5
 8015054:	f7eb f92c 	bl	80002b0 <strcmp>
 8015058:	b920      	cbnz	r0, 8015064 <lv_keyboard_def_event_cb+0x15c>
        lv_textarea_del_char(keyboard->ta);
 801505a:	4630      	mov	r0, r6
}
 801505c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        lv_textarea_del_char(keyboard->ta);
 8015060:	f00a bf88 	b.w	801ff74 <lv_textarea_del_char>
    } else if(strcmp(txt, "+/-") == 0) {
 8015064:	492b      	ldr	r1, [pc, #172]	; (8015114 <lv_keyboard_def_event_cb+0x20c>)
 8015066:	4628      	mov	r0, r5
 8015068:	f7eb f922 	bl	80002b0 <strcmp>
 801506c:	4607      	mov	r7, r0
 801506e:	bb78      	cbnz	r0, 80150d0 <lv_keyboard_def_event_cb+0x1c8>
        uint16_t cur        = lv_textarea_get_cursor_pos(keyboard->ta);
 8015070:	4630      	mov	r0, r6
 8015072:	f00a fe18 	bl	801fca6 <lv_textarea_get_cursor_pos>
 8015076:	4605      	mov	r5, r0
        const char * ta_txt = lv_textarea_get_text(keyboard->ta);
 8015078:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801507a:	f00a fe0b 	bl	801fc94 <lv_textarea_get_text>
        if(ta_txt[0] == '-') {
 801507e:	7803      	ldrb	r3, [r0, #0]
 8015080:	b2ad      	uxth	r5, r5
 8015082:	2b2d      	cmp	r3, #45	; 0x2d
 8015084:	d110      	bne.n	80150a8 <lv_keyboard_def_event_cb+0x1a0>
            lv_textarea_set_cursor_pos(keyboard->ta, 1);
 8015086:	2101      	movs	r1, #1
 8015088:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801508a:	f00a fd31 	bl	801faf0 <lv_textarea_set_cursor_pos>
            lv_textarea_del_char(keyboard->ta);
 801508e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8015090:	f00a ff70 	bl	801ff74 <lv_textarea_del_char>
            lv_textarea_add_char(keyboard->ta, '+');
 8015094:	212b      	movs	r1, #43	; 0x2b
            lv_textarea_add_char(keyboard->ta, '-');
 8015096:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8015098:	f00a fed0 	bl	801fe3c <lv_textarea_add_char>
            lv_textarea_set_cursor_pos(keyboard->ta, cur);
 801509c:	4629      	mov	r1, r5
            lv_textarea_set_cursor_pos(keyboard->ta, cur + 1);
 801509e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
}
 80150a0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            lv_textarea_set_cursor_pos(keyboard->ta, cur + 1);
 80150a4:	f00a bd24 	b.w	801faf0 <lv_textarea_set_cursor_pos>
        else if(ta_txt[0] == '+') {
 80150a8:	2b2b      	cmp	r3, #43	; 0x2b
 80150aa:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80150ac:	d107      	bne.n	80150be <lv_keyboard_def_event_cb+0x1b6>
            lv_textarea_set_cursor_pos(keyboard->ta, 1);
 80150ae:	2101      	movs	r1, #1
 80150b0:	f00a fd1e 	bl	801faf0 <lv_textarea_set_cursor_pos>
            lv_textarea_del_char(keyboard->ta);
 80150b4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80150b6:	f00a ff5d 	bl	801ff74 <lv_textarea_del_char>
            lv_textarea_add_char(keyboard->ta, '-');
 80150ba:	212d      	movs	r1, #45	; 0x2d
 80150bc:	e7eb      	b.n	8015096 <lv_keyboard_def_event_cb+0x18e>
            lv_textarea_set_cursor_pos(keyboard->ta, 0);
 80150be:	4639      	mov	r1, r7
 80150c0:	f00a fd16 	bl	801faf0 <lv_textarea_set_cursor_pos>
            lv_textarea_add_char(keyboard->ta, '-');
 80150c4:	212d      	movs	r1, #45	; 0x2d
 80150c6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80150c8:	f00a feb8 	bl	801fe3c <lv_textarea_add_char>
            lv_textarea_set_cursor_pos(keyboard->ta, cur + 1);
 80150cc:	1c69      	adds	r1, r5, #1
 80150ce:	e7e6      	b.n	801509e <lv_keyboard_def_event_cb+0x196>
        lv_textarea_add_text(keyboard->ta, txt);
 80150d0:	4629      	mov	r1, r5
 80150d2:	4630      	mov	r0, r6
}
 80150d4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        lv_textarea_add_text(keyboard->ta, txt);
 80150d8:	f00a be08 	b.w	801fcec <lv_textarea_add_text>
}
 80150dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80150de:	bf00      	nop
 80150e0:	080251b0 	.word	0x080251b0
 80150e4:	2000001c 	.word	0x2000001c
 80150e8:	20000008 	.word	0x20000008
 80150ec:	080251b4 	.word	0x080251b4
 80150f0:	080251b8 	.word	0x080251b8
 80150f4:	080251bb 	.word	0x080251bb
 80150f8:	080251bf 	.word	0x080251bf
 80150fc:	0802510e 	.word	0x0802510e
 8015100:	080251c3 	.word	0x080251c3
 8015104:	080251c9 	.word	0x080251c9
 8015108:	080251cd 	.word	0x080251cd
 801510c:	080251d1 	.word	0x080251d1
 8015110:	080251d5 	.word	0x080251d5
 8015114:	080251d9 	.word	0x080251d9

08015118 <lv_keyboard_constructor>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void lv_keyboard_constructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 8015118:	b538      	push	{r3, r4, r5, lr}
 801511a:	460c      	mov	r4, r1
    LV_UNUSED(class_p);
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_CLICK_FOCUSABLE);

    lv_keyboard_t * keyboard = (lv_keyboard_t *)obj;
    keyboard->ta         = NULL;
 801511c:	2500      	movs	r5, #0
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_CLICK_FOCUSABLE);
 801511e:	2104      	movs	r1, #4
 8015120:	4620      	mov	r0, r4
 8015122:	f7ee fe14 	bl	8003d4e <lv_obj_clear_flag>
    keyboard->mode       = LV_KEYBOARD_MODE_TEXT_LOWER;

    lv_obj_align(obj, LV_ALIGN_BOTTOM_MID, 0, 0);
 8015126:	462b      	mov	r3, r5
 8015128:	462a      	mov	r2, r5
 801512a:	4620      	mov	r0, r4
 801512c:	2105      	movs	r1, #5
    keyboard->ta         = NULL;
 801512e:	63a5      	str	r5, [r4, #56]	; 0x38
    keyboard->mode       = LV_KEYBOARD_MODE_TEXT_LOWER;
 8015130:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
    lv_obj_align(obj, LV_ALIGN_BOTTOM_MID, 0, 0);
 8015134:	f7ef fe3a 	bl	8004dac <lv_obj_align>
    lv_obj_add_event_cb(obj, lv_keyboard_def_event_cb, LV_EVENT_VALUE_CHANGED, NULL);
 8015138:	462b      	mov	r3, r5
 801513a:	221c      	movs	r2, #28
 801513c:	490e      	ldr	r1, [pc, #56]	; (8015178 <lv_keyboard_constructor+0x60>)
 801513e:	4620      	mov	r0, r4
 8015140:	f7ec fefa 	bl	8001f38 <lv_obj_add_event_cb>
static inline void lv_obj_set_style_base_dir(struct _lv_obj_t * obj, lv_base_dir_t value, lv_style_selector_t selector)
{
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_BASE_DIR, v, selector);
 8015144:	462b      	mov	r3, r5
 8015146:	462a      	mov	r2, r5
 8015148:	4620      	mov	r0, r4
 801514a:	f241 416a 	movw	r1, #5226	; 0x146a
 801514e:	f7f2 f9ef 	bl	8007530 <lv_obj_set_local_style_prop>
    lv_obj_set_style_base_dir(obj, LV_BASE_DIR_LTR, 0);

    lv_btnmatrix_set_map(obj, kb_map[keyboard->mode]);
 8015152:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
 8015156:	4b09      	ldr	r3, [pc, #36]	; (801517c <lv_keyboard_constructor+0x64>)
 8015158:	4620      	mov	r0, r4
 801515a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801515e:	f006 f985 	bl	801b46c <lv_btnmatrix_set_map>
    lv_btnmatrix_set_ctrl_map(obj, kb_ctrl[keyboard->mode]);
 8015162:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
 8015166:	4b06      	ldr	r3, [pc, #24]	; (8015180 <lv_keyboard_constructor+0x68>)
 8015168:	4620      	mov	r0, r4
 801516a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
}
 801516e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_btnmatrix_set_ctrl_map(obj, kb_ctrl[keyboard->mode]);
 8015172:	f006 b97f 	b.w	801b474 <lv_btnmatrix_set_ctrl_map>
 8015176:	bf00      	nop
 8015178:	08014f09 	.word	0x08014f09
 801517c:	2000001c 	.word	0x2000001c
 8015180:	20000008 	.word	0x20000008

08015184 <lv_color_to32>:
     *       5         129     33        1       255
     *       6         259      3        0       255
     */

    lv_color32_t ret;
    LV_COLOR_SET_R32(ret, (LV_COLOR_GET_R(color) * 263 + 7) >> 5);
 8015184:	f3c0 22c4 	ubfx	r2, r0, #11, #5
 8015188:	f240 1307 	movw	r3, #263	; 0x107
 801518c:	2100      	movs	r1, #0
 801518e:	435a      	muls	r2, r3
 8015190:	3207      	adds	r2, #7
 8015192:	1152      	asrs	r2, r2, #5
{
 8015194:	b510      	push	{r4, lr}
    LV_COLOR_SET_R32(ret, (LV_COLOR_GET_R(color) * 263 + 7) >> 5);
 8015196:	f362 4117 	bfi	r1, r2, #16, #8
    LV_COLOR_SET_G32(ret, (LV_COLOR_GET_G(color) * 259 + 3) >> 6);
 801519a:	f3c0 1445 	ubfx	r4, r0, #5, #6
 801519e:	f240 1203 	movw	r2, #259	; 0x103
    LV_COLOR_SET_B32(ret, (LV_COLOR_GET_B(color) * 263 + 7) >> 5);
 80151a2:	f000 001f 	and.w	r0, r0, #31
    LV_COLOR_SET_G32(ret, (LV_COLOR_GET_G(color) * 259 + 3) >> 6);
 80151a6:	4362      	muls	r2, r4
    LV_COLOR_SET_B32(ret, (LV_COLOR_GET_B(color) * 263 + 7) >> 5);
 80151a8:	4343      	muls	r3, r0
    LV_COLOR_SET_G32(ret, (LV_COLOR_GET_G(color) * 259 + 3) >> 6);
 80151aa:	3203      	adds	r2, #3
    LV_COLOR_SET_B32(ret, (LV_COLOR_GET_B(color) * 263 + 7) >> 5);
 80151ac:	3307      	adds	r3, #7
    LV_COLOR_SET_G32(ret, (LV_COLOR_GET_G(color) * 259 + 3) >> 6);
 80151ae:	1192      	asrs	r2, r2, #6
    LV_COLOR_SET_B32(ret, (LV_COLOR_GET_B(color) * 263 + 7) >> 5);
 80151b0:	115b      	asrs	r3, r3, #5
    LV_COLOR_SET_G32(ret, (LV_COLOR_GET_G(color) * 259 + 3) >> 6);
 80151b2:	f362 210f 	bfi	r1, r2, #8, #8
    LV_COLOR_SET_B32(ret, (LV_COLOR_GET_B(color) * 263 + 7) >> 5);
 80151b6:	f363 0107 	bfi	r1, r3, #0, #8
    LV_COLOR_SET_A32(ret, 0xFF);
    return ret.full;
#elif LV_COLOR_DEPTH == 32
    return color.full;
#endif
}
 80151ba:	f041 407f 	orr.w	r0, r1, #4278190080	; 0xff000000
 80151be:	bd10      	pop	{r4, pc}

080151c0 <lv_color_mix>:
 * @param c2 the second color to mix (usually the background)
 * @param mix The ratio of the colors. 0: full `c2`, 255: full `c1`, 127: half `c1` and half`c2`
 * @return the mixed color
 */
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
 80151c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 80151c2:	f1c2 05ff 	rsb	r5, r2, #255	; 0xff
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 80151c6:	f3c1 1445 	ubfx	r4, r1, #5, #6
 80151ca:	f3c0 1345 	ubfx	r3, r0, #5, #6
 80151ce:	f248 0681 	movw	r6, #32897	; 0x8081
 80151d2:	436c      	muls	r4, r5
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 80151d4:	f001 071f 	and.w	r7, r1, #31
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 80151d8:	f3c1 21c4 	ubfx	r1, r1, #11, #5
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 80151dc:	fb03 4302 	mla	r3, r3, r2, r4
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 80151e0:	436f      	muls	r7, r5
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 80151e2:	3380      	adds	r3, #128	; 0x80
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 80151e4:	434d      	muls	r5, r1
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 80151e6:	4373      	muls	r3, r6
#else
    /*LV_COLOR_DEPTH == 1*/
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
#endif

    return ret;
 80151e8:	f3c3 54c5 	ubfx	r4, r3, #23, #6
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 80151ec:	f000 031f 	and.w	r3, r0, #31
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 80151f0:	f3c0 20c4 	ubfx	r0, r0, #11, #5
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 80151f4:	fb03 7302 	mla	r3, r3, r2, r7
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 80151f8:	fb00 5202 	mla	r2, r0, r2, r5
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 80151fc:	3380      	adds	r3, #128	; 0x80
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 80151fe:	3280      	adds	r2, #128	; 0x80
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8015200:	4373      	muls	r3, r6
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8015202:	4372      	muls	r2, r6
    return ret;
 8015204:	f3c3 53c4 	ubfx	r3, r3, #23, #5
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8015208:	0dd0      	lsrs	r0, r2, #23
    return ret;
 801520a:	ea43 1344 	orr.w	r3, r3, r4, lsl #5
}
 801520e:	ea43 20c0 	orr.w	r0, r3, r0, lsl #11
 8015212:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015214 <lv_color_black>:
 **********************/
/*Source: https://vuetifyjs.com/en/styles/colors/#material-colors*/

lv_color_t lv_palette_main(lv_palette_t p);
static inline lv_color_t lv_color_white(void) { return lv_color_make(0xff, 0xff, 0xff);}
static inline lv_color_t lv_color_black(void) { return lv_color_make(0x00, 0x0, 0x00);}
 8015214:	f04f 0000 	mov.w	r0, #0
 8015218:	4770      	bx	lr

0801521a <lv_led_constructor>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void lv_led_constructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 801521a:	b510      	push	{r4, lr}
    LV_UNUSED(class_p);
    lv_led_t * led = (lv_led_t *)obj;
    led->color = lv_theme_get_color_primary(obj);
 801521c:	4608      	mov	r0, r1
{
 801521e:	460c      	mov	r4, r1
    led->color = lv_theme_get_color_primary(obj);
 8015220:	f7f3 faac 	bl	800877c <lv_theme_get_color_primary>
    led->bright = LV_LED_BRIGHT_MAX;
 8015224:	23ff      	movs	r3, #255	; 0xff
    led->color = lv_theme_get_color_primary(obj);
 8015226:	84a0      	strh	r0, [r4, #36]	; 0x24
    led->bright = LV_LED_BRIGHT_MAX;
 8015228:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
}
 801522c:	bd10      	pop	{r4, pc}
	...

08015230 <lv_led_event>:

static void lv_led_event(const lv_obj_class_t * class_p, lv_event_t * e)
{
 8015230:	b570      	push	{r4, r5, r6, lr}
    LV_UNUSED(class_p);

    lv_res_t res;

    /* Call the ancestor's event handler */
    res = lv_obj_event_base(MY_CLASS, e);
 8015232:	4878      	ldr	r0, [pc, #480]	; (8015414 <lv_led_event+0x1e4>)
{
 8015234:	b090      	sub	sp, #64	; 0x40
 8015236:	460d      	mov	r5, r1
    res = lv_obj_event_base(MY_CLASS, e);
 8015238:	f7ec fdce 	bl	8001dd8 <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 801523c:	2801      	cmp	r0, #1
 801523e:	f040 80e7 	bne.w	8015410 <lv_led_event+0x1e0>

    lv_event_code_t code = lv_event_get_code(e);
 8015242:	4628      	mov	r0, r5
 8015244:	f7ec fe62 	bl	8001f0c <lv_event_get_code>
 8015248:	4606      	mov	r6, r0
    lv_obj_t * obj = lv_event_get_target(e);
 801524a:	4628      	mov	r0, r5
 801524c:	f7ec fe5c 	bl	8001f08 <lv_event_get_target>
    if(code == LV_EVENT_DRAW_MAIN) {
 8015250:	2e15      	cmp	r6, #21
    lv_obj_t * obj = lv_event_get_target(e);
 8015252:	4604      	mov	r4, r0
    if(code == LV_EVENT_DRAW_MAIN) {
 8015254:	f040 80dc 	bne.w	8015410 <lv_led_event+0x1e0>
        /*Make darker colors in a temporary style according to the brightness*/
        lv_led_t * led = (lv_led_t *)obj;

        lv_draw_rect_dsc_t rect_dsc;
        lv_draw_rect_dsc_init(&rect_dsc);
 8015258:	a803      	add	r0, sp, #12
 801525a:	f7f7 fc15 	bl	800ca88 <lv_draw_rect_dsc_init>
        lv_obj_init_draw_rect_dsc(obj, LV_PART_MAIN, &rect_dsc);
 801525e:	aa03      	add	r2, sp, #12
 8015260:	2100      	movs	r1, #0
 8015262:	4620      	mov	r0, r4
 8015264:	f7ef f97c 	bl	8004560 <lv_obj_init_draw_rect_dsc>

        /*Use the original colors brightness to modify color->led*/
        rect_dsc.bg_color = lv_color_mix(led->color, lv_color_black(), lv_color_brightness(rect_dsc.bg_color));
 8015268:	f7ff ffd4 	bl	8015214 <lv_color_black>
 801526c:	4601      	mov	r1, r0
    c32.full        = lv_color_to32(color);
 801526e:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 8015272:	9101      	str	r1, [sp, #4]
 8015274:	f7ff ff86 	bl	8015184 <lv_color_to32>
    uint16_t bright = (uint16_t)(3u * LV_COLOR_GET_R32(c32) + LV_COLOR_GET_B32(c32) + 4u * LV_COLOR_GET_G32(c32));
 8015278:	f3c0 4207 	ubfx	r2, r0, #16, #8
 801527c:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8015280:	9901      	ldr	r1, [sp, #4]
 8015282:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8015286:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801528a:	fa52 f280 	uxtab	r2, r2, r0
 801528e:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 8015290:	f3c2 02c7 	ubfx	r2, r2, #3, #8
 8015294:	f7ff ff94 	bl	80151c0 <lv_color_mix>
 8015298:	f8ad 0010 	strh.w	r0, [sp, #16]
        rect_dsc.bg_grad_color = lv_color_mix(led->color, lv_color_black(), lv_color_brightness(rect_dsc.bg_grad_color));
 801529c:	f7ff ffba 	bl	8015214 <lv_color_black>
 80152a0:	4601      	mov	r1, r0
    c32.full        = lv_color_to32(color);
 80152a2:	f8bd 0012 	ldrh.w	r0, [sp, #18]
 80152a6:	9101      	str	r1, [sp, #4]
 80152a8:	f7ff ff6c 	bl	8015184 <lv_color_to32>
    uint16_t bright = (uint16_t)(3u * LV_COLOR_GET_R32(c32) + LV_COLOR_GET_B32(c32) + 4u * LV_COLOR_GET_G32(c32));
 80152ac:	f3c0 4207 	ubfx	r2, r0, #16, #8
 80152b0:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80152b4:	9901      	ldr	r1, [sp, #4]
 80152b6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80152ba:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80152be:	fa52 f280 	uxtab	r2, r2, r0
 80152c2:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 80152c4:	f3c2 02c7 	ubfx	r2, r2, #3, #8
 80152c8:	f7ff ff7a 	bl	80151c0 <lv_color_mix>
 80152cc:	f8ad 0012 	strh.w	r0, [sp, #18]
        rect_dsc.shadow_color = lv_color_mix(led->color, lv_color_black(), lv_color_brightness(rect_dsc.shadow_color));
 80152d0:	f7ff ffa0 	bl	8015214 <lv_color_black>
 80152d4:	4601      	mov	r1, r0
    c32.full        = lv_color_to32(color);
 80152d6:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 80152da:	9101      	str	r1, [sp, #4]
 80152dc:	f7ff ff52 	bl	8015184 <lv_color_to32>
    uint16_t bright = (uint16_t)(3u * LV_COLOR_GET_R32(c32) + LV_COLOR_GET_B32(c32) + 4u * LV_COLOR_GET_G32(c32));
 80152e0:	f3c0 4207 	ubfx	r2, r0, #16, #8
 80152e4:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80152e8:	9901      	ldr	r1, [sp, #4]
 80152ea:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80152ee:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80152f2:	fa52 f280 	uxtab	r2, r2, r0
 80152f6:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 80152f8:	f3c2 02c7 	ubfx	r2, r2, #3, #8
 80152fc:	f7ff ff60 	bl	80151c0 <lv_color_mix>
 8015300:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
        rect_dsc.border_color = lv_color_mix(led->color, lv_color_black(), lv_color_brightness(rect_dsc.border_color));
 8015304:	f7ff ff86 	bl	8015214 <lv_color_black>
 8015308:	4601      	mov	r1, r0
    c32.full        = lv_color_to32(color);
 801530a:	f8bd 0026 	ldrh.w	r0, [sp, #38]	; 0x26
 801530e:	9101      	str	r1, [sp, #4]
 8015310:	f7ff ff38 	bl	8015184 <lv_color_to32>
    uint16_t bright = (uint16_t)(3u * LV_COLOR_GET_R32(c32) + LV_COLOR_GET_B32(c32) + 4u * LV_COLOR_GET_G32(c32));
 8015314:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8015318:	f3c0 2307 	ubfx	r3, r0, #8, #8
 801531c:	9901      	ldr	r1, [sp, #4]
 801531e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8015322:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8015326:	fa52 f280 	uxtab	r2, r2, r0
 801532a:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 801532c:	f3c2 02c7 	ubfx	r2, r2, #3, #8
 8015330:	f7ff ff46 	bl	80151c0 <lv_color_mix>
 8015334:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
        rect_dsc.outline_color = lv_color_mix(led->color, lv_color_black(), lv_color_brightness(rect_dsc.outline_color));
 8015338:	f7ff ff6c 	bl	8015214 <lv_color_black>
 801533c:	4601      	mov	r1, r0
    c32.full        = lv_color_to32(color);
 801533e:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
 8015342:	9101      	str	r1, [sp, #4]
 8015344:	f7ff ff1e 	bl	8015184 <lv_color_to32>
    uint16_t bright = (uint16_t)(3u * LV_COLOR_GET_R32(c32) + LV_COLOR_GET_B32(c32) + 4u * LV_COLOR_GET_G32(c32));
 8015348:	f3c0 4207 	ubfx	r2, r0, #16, #8
 801534c:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8015350:	9901      	ldr	r1, [sp, #4]
 8015352:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8015356:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801535a:	fa52 f280 	uxtab	r2, r2, r0
 801535e:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 8015360:	f3c2 02c7 	ubfx	r2, r2, #3, #8
 8015364:	f7ff ff2c 	bl	80151c0 <lv_color_mix>
 8015368:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c

        /*Mix. the color with black proportionally with brightness*/
        rect_dsc.bg_color   = lv_color_mix(rect_dsc.bg_color, lv_color_black(), led->bright);
 801536c:	f7ff ff52 	bl	8015214 <lv_color_black>
 8015370:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
 8015374:	4601      	mov	r1, r0
 8015376:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 801537a:	f7ff ff21 	bl	80151c0 <lv_color_mix>
 801537e:	f8ad 0010 	strh.w	r0, [sp, #16]
        rect_dsc.bg_grad_color   = lv_color_mix(rect_dsc.bg_grad_color, lv_color_black(), led->bright);
 8015382:	f7ff ff47 	bl	8015214 <lv_color_black>
 8015386:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
 801538a:	4601      	mov	r1, r0
 801538c:	f8bd 0012 	ldrh.w	r0, [sp, #18]
 8015390:	f7ff ff16 	bl	80151c0 <lv_color_mix>
 8015394:	f8ad 0012 	strh.w	r0, [sp, #18]
        rect_dsc.border_color = lv_color_mix(rect_dsc.border_color, lv_color_black(), led->bright);
 8015398:	f7ff ff3c 	bl	8015214 <lv_color_black>
 801539c:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
 80153a0:	4601      	mov	r1, r0
 80153a2:	f8bd 0026 	ldrh.w	r0, [sp, #38]	; 0x26
 80153a6:	f7ff ff0b 	bl	80151c0 <lv_color_mix>
 80153aa:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
        rect_dsc.shadow_color = lv_color_mix(rect_dsc.shadow_color, lv_color_black(), led->bright);
 80153ae:	f7ff ff31 	bl	8015214 <lv_color_black>
 80153b2:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
 80153b6:	4601      	mov	r1, r0
 80153b8:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 80153bc:	f7ff ff00 	bl	80151c0 <lv_color_mix>
 80153c0:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
        rect_dsc.outline_color = lv_color_mix(rect_dsc.outline_color, lv_color_black(), led->bright);
 80153c4:	f7ff ff26 	bl	8015214 <lv_color_black>
 80153c8:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
 80153cc:	4601      	mov	r1, r0
 80153ce:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
 80153d2:	f7ff fef5 	bl	80151c0 <lv_color_mix>

        /*Set the current shadow width according to brightness proportionally between LV_LED_BRIGHT_OFF
         * and LV_LED_BRIGHT_ON*/
        rect_dsc.shadow_width = ((led->bright - LV_LED_BRIGHT_MIN) * rect_dsc.shadow_width) /
 80153d6:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 80153da:	f9bd 2036 	ldrsh.w	r2, [sp, #54]	; 0x36
 80153de:	21af      	movs	r1, #175	; 0xaf
 80153e0:	3b50      	subs	r3, #80	; 0x50
        rect_dsc.outline_color = lv_color_mix(rect_dsc.outline_color, lv_color_black(), led->bright);
 80153e2:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
                (LV_LED_BRIGHT_MAX - LV_LED_BRIGHT_MIN);
        rect_dsc.shadow_spread = ((led->bright - LV_LED_BRIGHT_MIN) * rect_dsc.shadow_spread) /
                (LV_LED_BRIGHT_MAX - LV_LED_BRIGHT_MIN);

        const lv_area_t * clip_area = lv_event_get_param(e);
 80153e6:	4628      	mov	r0, r5
        rect_dsc.shadow_width = ((led->bright - LV_LED_BRIGHT_MIN) * rect_dsc.shadow_width) /
 80153e8:	435a      	muls	r2, r3
 80153ea:	fb92 f2f1 	sdiv	r2, r2, r1
 80153ee:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
        rect_dsc.shadow_spread = ((led->bright - LV_LED_BRIGHT_MIN) * rect_dsc.shadow_spread) /
 80153f2:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 80153f6:	4353      	muls	r3, r2
 80153f8:	fb93 f3f1 	sdiv	r3, r3, r1
 80153fc:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
        const lv_area_t * clip_area = lv_event_get_param(e);
 8015400:	f7ec fd86 	bl	8001f10 <lv_event_get_param>
        lv_draw_rect(&obj->coords, clip_area, &rect_dsc);
 8015404:	aa03      	add	r2, sp, #12
        const lv_area_t * clip_area = lv_event_get_param(e);
 8015406:	4601      	mov	r1, r0
        lv_draw_rect(&obj->coords, clip_area, &rect_dsc);
 8015408:	f104 0014 	add.w	r0, r4, #20
 801540c:	f7f7 fb5e 	bl	800cacc <lv_draw_rect>
    }
}
 8015410:	b010      	add	sp, #64	; 0x40
 8015412:	bd70      	pop	{r4, r5, r6, pc}
 8015414:	080255e8 	.word	0x080255e8

08015418 <lv_meter_destructor>:

    LV_TRACE_OBJ_CREATE("finished");
}

static void lv_meter_destructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 8015418:	b510      	push	{r4, lr}
 801541a:	460c      	mov	r4, r1
    LV_UNUSED(class_p);
    lv_meter_t * meter = (lv_meter_t *)obj;
    _lv_ll_clear(&meter->indicator_ll);
 801541c:	f101 0030 	add.w	r0, r1, #48	; 0x30
 8015420:	f002 f873 	bl	801750a <_lv_ll_clear>
    _lv_ll_clear(&meter->scale_ll);
 8015424:	f104 0024 	add.w	r0, r4, #36	; 0x24

}
 8015428:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    _lv_ll_clear(&meter->scale_ll);
 801542c:	f002 b86d 	b.w	801750a <_lv_ll_clear>

08015430 <lv_meter_constructor>:
{
 8015430:	b510      	push	{r4, lr}
 8015432:	460c      	mov	r4, r1
    _lv_ll_init(&meter->scale_ll, sizeof(lv_meter_scale_t));
 8015434:	2124      	movs	r1, #36	; 0x24
 8015436:	1860      	adds	r0, r4, r1
 8015438:	f001 ffff 	bl	801743a <_lv_ll_init>
    _lv_ll_init(&meter->indicator_ll, sizeof(lv_meter_indicator_t));
 801543c:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8015440:	211c      	movs	r1, #28
}
 8015442:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    _lv_ll_init(&meter->indicator_ll, sizeof(lv_meter_indicator_t));
 8015446:	f001 bff8 	b.w	801743a <_lv_ll_init>
	...

0801544c <lv_meter_event>:

static void lv_meter_event(const lv_obj_class_t * class_p, lv_event_t * e)
{
 801544c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    LV_UNUSED(class_p);

    lv_res_t res = lv_obj_event_base(MY_CLASS, e);
 8015450:	48b4      	ldr	r0, [pc, #720]	; (8015724 <lv_meter_event+0x2d8>)
{
 8015452:	460c      	mov	r4, r1
 8015454:	ed2d 8b04 	vpush	{d8-d9}
 8015458:	b0df      	sub	sp, #380	; 0x17c
    lv_res_t res = lv_obj_event_base(MY_CLASS, e);
 801545a:	f7ec fcbd 	bl	8001dd8 <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 801545e:	2801      	cmp	r0, #1
 8015460:	f040 811d 	bne.w	801569e <lv_meter_event+0x252>

    lv_event_code_t code = lv_event_get_code(e);
 8015464:	4620      	mov	r0, r4
 8015466:	f7ec fd51 	bl	8001f0c <lv_event_get_code>
 801546a:	4605      	mov	r5, r0
    lv_obj_t * obj = lv_event_get_target(e);
 801546c:	4620      	mov	r0, r4
 801546e:	f7ec fd4b 	bl	8001f08 <lv_event_get_target>
    if(code == LV_EVENT_DRAW_MAIN) {
 8015472:	2d15      	cmp	r5, #21
    lv_obj_t * obj = lv_event_get_target(e);
 8015474:	4683      	mov	fp, r0
    if(code == LV_EVENT_DRAW_MAIN) {
 8015476:	f040 8112 	bne.w	801569e <lv_meter_event+0x252>
        const lv_area_t * clip_area = lv_event_get_param(e);
 801547a:	4620      	mov	r0, r4
static void draw_arcs(lv_obj_t * obj, const lv_area_t * clip_area, const lv_area_t * scale_area)
{
    lv_meter_t * meter = (lv_meter_t *)obj;

    lv_draw_arc_dsc_t arc_dsc;
    lv_draw_arc_dsc_init(&arc_dsc);
 801547c:	ae4c      	add	r6, sp, #304	; 0x130
        const lv_area_t * clip_area = lv_event_get_param(e);
 801547e:	f7ec fd47 	bl	8001f10 <lv_event_get_param>
        lv_obj_get_content_coords(obj, &scale_area);
 8015482:	a91a      	add	r1, sp, #104	; 0x68
        const lv_area_t * clip_area = lv_event_get_param(e);
 8015484:	ee08 0a10 	vmov	s16, r0
        lv_obj_get_content_coords(obj, &scale_area);
 8015488:	4658      	mov	r0, fp
 801548a:	f7ef fd30 	bl	8004eee <lv_obj_get_content_coords>
    lv_draw_arc_dsc_init(&arc_dsc);
 801548e:	4630      	mov	r0, r6
 8015490:	f7f3 f9c3 	bl	800881a <lv_draw_arc_dsc_init>
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_arc_rounded(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_ROUNDED);
 8015494:	2251      	movs	r2, #81	; 0x51
 8015496:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 801549a:	4658      	mov	r0, fp
 801549c:	f7f1 ff64 	bl	8007368 <lv_obj_get_style_prop>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80154a0:	f8bd 506c 	ldrh.w	r5, [sp, #108]	; 0x6c
    arc_dsc.rounded = lv_obj_get_style_arc_rounded(obj, LV_PART_ITEMS);
 80154a4:	f89d 3139 	ldrb.w	r3, [sp, #313]	; 0x139
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OPA);
 80154a8:	f240 4262 	movw	r2, #1122	; 0x462
 80154ac:	f8bd 7068 	ldrh.w	r7, [sp, #104]	; 0x68
 80154b0:	3501      	adds	r5, #1
 80154b2:	f360 0382 	bfi	r3, r0, #2, #1

    lv_coord_t r_out = lv_area_get_width(scale_area) / 2 ;
    lv_point_t scale_center;
    scale_center.x = scale_area->x1 + r_out;
    scale_center.y = scale_area->y1 + r_out;
 80154b6:	f8bd 806a 	ldrh.w	r8, [sp, #106]	; 0x6a
 80154ba:	1bed      	subs	r5, r5, r7
 80154bc:	2100      	movs	r1, #0
    arc_dsc.rounded = lv_obj_get_style_arc_rounded(obj, LV_PART_ITEMS);
 80154be:	f88d 3139 	strb.w	r3, [sp, #313]	; 0x139
 80154c2:	4658      	mov	r0, fp
    lv_coord_t r_out = lv_area_get_width(scale_area) / 2 ;
 80154c4:	f3c5 33c0 	ubfx	r3, r5, #15, #1
 80154c8:	fa03 f585 	sxtah	r5, r3, r5
 80154cc:	f7f1 ff4c 	bl	8007368 <lv_obj_get_style_prop>

    lv_opa_t opa_main = lv_obj_get_style_opa(obj, LV_PART_MAIN);
    lv_meter_indicator_t * indic;
    _LV_LL_READ_BACK(&meter->indicator_ll, indic) {
 80154d0:	f10b 0330 	add.w	r3, fp, #48	; 0x30
 80154d4:	4681      	mov	r9, r0
    scale_center.x = scale_area->x1 + r_out;
 80154d6:	f3c5 054f 	ubfx	r5, r5, #1, #16
    _LV_LL_READ_BACK(&meter->indicator_ll, indic) {
 80154da:	4618      	mov	r0, r3
 80154dc:	ee08 3a90 	vmov	s17, r3
    scale_center.x = scale_area->x1 + r_out;
 80154e0:	442f      	add	r7, r5
    scale_center.y = scale_area->y1 + r_out;
 80154e2:	44a8      	add	r8, r5
    _LV_LL_READ_BACK(&meter->indicator_ll, indic) {
 80154e4:	f002 f826 	bl	8017534 <_lv_ll_get_tail>
 80154e8:	4604      	mov	r4, r0
        if(indic->type != LV_METER_INDICATOR_TYPE_ARC) continue;

        arc_dsc.color = indic->type_data.arc.color;
        arc_dsc.width = indic->type_data.arc.width;
        arc_dsc.opa = indic->opa > LV_OPA_MAX ? opa_main : (opa_main * indic->opa) >> 8;
 80154ea:	fa5f f389 	uxtb.w	r3, r9

        lv_meter_scale_t * scale = indic->scale;

        int32_t start_angle = lv_map(indic->start_value, scale->min, scale->max, scale->rotation, scale->rotation + scale->angle_range);
        int32_t end_angle = lv_map(indic->end_value, scale->min, scale->max, scale->rotation, scale->rotation + scale->angle_range);
        lv_draw_arc(scale_center.x, scale_center.y, r_out + indic->type_data.arc.r_mod, start_angle, end_angle, clip_area, &arc_dsc);
 80154ee:	9605      	str	r6, [sp, #20]
    scale_center.x = scale_area->x1 + r_out;
 80154f0:	b23f      	sxth	r7, r7
    scale_center.y = scale_area->y1 + r_out;
 80154f2:	fa0f f888 	sxth.w	r8, r8
        arc_dsc.opa = indic->opa > LV_OPA_MAX ? opa_main : (opa_main * indic->opa) >> 8;
 80154f6:	9306      	str	r3, [sp, #24]
    _LV_LL_READ_BACK(&meter->indicator_ll, indic) {
 80154f8:	2c00      	cmp	r4, #0
 80154fa:	f040 80d5 	bne.w	80156a8 <lv_meter_event+0x25c>
 80154fe:	f8bd 206c 	ldrh.w	r2, [sp, #108]	; 0x6c
 8015502:	f8bd 1068 	ldrh.w	r1, [sp, #104]	; 0x68
 8015506:	3201      	adds	r2, #1
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8015508:	f8bd 006a 	ldrh.w	r0, [sp, #106]	; 0x6a
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801550c:	1a52      	subs	r2, r2, r1
static void draw_ticks_and_labels(lv_obj_t * obj, const lv_area_t * clip_area, const lv_area_t * scale_area)
{
    lv_meter_t * meter    = (lv_meter_t *)obj;

    lv_point_t p_center;
    lv_coord_t r_edge = LV_MIN(lv_area_get_width(scale_area) / 2, lv_area_get_height(scale_area) / 2);
 801550e:	f3c2 33c0 	ubfx	r3, r2, #15, #1
 8015512:	fa03 f382 	sxtah	r3, r3, r2
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8015516:	f8bd 206e 	ldrh.w	r2, [sp, #110]	; 0x6e
 801551a:	3201      	adds	r2, #1
    p_center.x = scale_area->x1 + r_edge;
 801551c:	105b      	asrs	r3, r3, #1
 801551e:	1a12      	subs	r2, r2, r0
    lv_coord_t r_edge = LV_MIN(lv_area_get_width(scale_area) / 2, lv_area_get_height(scale_area) / 2);
 8015520:	f3c2 34c0 	ubfx	r4, r2, #15, #1
 8015524:	fa04 f282 	sxtah	r2, r4, r2
    p_center.x = scale_area->x1 + r_edge;
 8015528:	1052      	asrs	r2, r2, #1
 801552a:	4293      	cmp	r3, r2
 801552c:	bfa8      	it	ge
 801552e:	4613      	movge	r3, r2
 8015530:	b29a      	uxth	r2, r3
 8015532:	fa11 f183 	uxtah	r1, r1, r3
    p_center.y = scale_area->y1 + r_edge;
 8015536:	fa10 f383 	uxtah	r3, r0, r3

    uint8_t i;

    lv_draw_line_dsc_t line_dsc;
    lv_draw_line_dsc_init(&line_dsc);
 801553a:	a824      	add	r0, sp, #144	; 0x90
    p_center.x = scale_area->x1 + r_edge;
 801553c:	9211      	str	r2, [sp, #68]	; 0x44
    p_center.y = scale_area->y1 + r_edge;
 801553e:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
    p_center.x = scale_area->x1 + r_edge;
 8015542:	f8ad 105c 	strh.w	r1, [sp, #92]	; 0x5c
    lv_draw_line_dsc_init(&line_dsc);
 8015546:	f7f5 fc65 	bl	800ae14 <lv_draw_line_dsc_init>
    lv_obj_init_draw_line_dsc(obj, LV_PART_TICKS, &line_dsc);
 801554a:	aa24      	add	r2, sp, #144	; 0x90
 801554c:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 8015550:	4658      	mov	r0, fp
 8015552:	f7ef f9e9 	bl	8004928 <lv_obj_init_draw_line_dsc>
    line_dsc.raw_end = 1;
 8015556:	f89d 3099 	ldrb.w	r3, [sp, #153]	; 0x99

    lv_draw_label_dsc_t label_dsc;
    lv_draw_label_dsc_init(&label_dsc);
 801555a:	a83c      	add	r0, sp, #240	; 0xf0
    line_dsc.raw_end = 1;
 801555c:	f043 0310 	orr.w	r3, r3, #16
 8015560:	f88d 3099 	strb.w	r3, [sp, #153]	; 0x99
    lv_draw_label_dsc_init(&label_dsc);
 8015564:	f7f4 ffdc 	bl	800a520 <lv_draw_label_dsc_init>
    lv_obj_init_draw_label_dsc(obj, LV_PART_TICKS, &label_dsc);
 8015568:	aa3c      	add	r2, sp, #240	; 0xf0
 801556a:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 801556e:	4658      	mov	r0, fp
 8015570:	f7ef f932 	bl	80047d8 <lv_obj_init_draw_label_dsc>

    lv_meter_scale_t * scale;

    lv_obj_draw_part_dsc_t dsc;
    lv_obj_draw_dsc_init(&dsc, clip_area);
 8015574:	a84c      	add	r0, sp, #304	; 0x130
 8015576:	ee18 1a10 	vmov	r1, s16
 801557a:	f7ef fad5 	bl	8004b28 <lv_obj_draw_dsc_init>
    lv_draw_mask_radius_param_t inner_minor_mask;
    lv_draw_mask_radius_param_t inner_major_mask;
    lv_draw_mask_radius_param_t outer_mask;
#endif

    _LV_LL_READ_BACK(&meter->scale_ll, scale) {
 801557e:	f10b 0324 	add.w	r3, fp, #36	; 0x24
 8015582:	4618      	mov	r0, r3
 8015584:	ee09 3a10 	vmov	s18, r3
 8015588:	f001 ffd4 	bl	8017534 <_lv_ll_get_tail>
 801558c:	4604      	mov	r4, r0
 801558e:	2800      	cmp	r0, #0
 8015590:	f040 80ca 	bne.w	8015728 <lv_meter_event+0x2dc>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8015594:	f8bd 606c 	ldrh.w	r6, [sp, #108]	; 0x6c
    lv_draw_line_dsc_t line_dsc;
    lv_draw_line_dsc_init(&line_dsc);
    lv_obj_init_draw_line_dsc(obj, LV_PART_INDICATOR, &line_dsc);

    lv_draw_img_dsc_t img_dsc;
    lv_draw_img_dsc_init(&img_dsc);
 8015598:	af4c      	add	r7, sp, #304	; 0x130
 801559a:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
    lv_draw_line_dsc_init(&line_dsc);
 801559e:	a844      	add	r0, sp, #272	; 0x110
 80155a0:	3601      	adds	r6, #1
            img_dsc.pivot.x = indic->type_data.needle_img.pivot.x;
            img_dsc.pivot.y = indic->type_data.needle_img.pivot.y;
            angle = angle * 10;
            if(angle > 3600) angle -= 3600;
            img_dsc.angle = angle;
            lv_draw_img(&a, clip_area, indic->type_data.needle_img.src, &img_dsc);
 80155a2:	46ba      	mov	sl, r7
 80155a4:	1af6      	subs	r6, r6, r3
    lv_coord_t r_edge = lv_area_get_width(scale_area) / 2;
 80155a6:	f3c6 32c0 	ubfx	r2, r6, #15, #1
 80155aa:	fa02 f686 	sxtah	r6, r2, r6
    scale_center.x = scale_area->x1 + r_edge;
 80155ae:	f3c6 064f 	ubfx	r6, r6, #1, #16
 80155b2:	4433      	add	r3, r6
 80155b4:	f8ad 30b8 	strh.w	r3, [sp, #184]	; 0xb8
    scale_center.y = scale_area->y1 + r_edge;
 80155b8:	f8bd 306a 	ldrh.w	r3, [sp, #106]	; 0x6a
 80155bc:	4433      	add	r3, r6
 80155be:	f8ad 30ba 	strh.w	r3, [sp, #186]	; 0xba
    lv_draw_line_dsc_init(&line_dsc);
 80155c2:	f7f5 fc27 	bl	800ae14 <lv_draw_line_dsc_init>
    lv_obj_init_draw_line_dsc(obj, LV_PART_INDICATOR, &line_dsc);
 80155c6:	aa44      	add	r2, sp, #272	; 0x110
 80155c8:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80155cc:	4658      	mov	r0, fp
 80155ce:	f7ef f9ab 	bl	8004928 <lv_obj_init_draw_line_dsc>
    lv_draw_img_dsc_init(&img_dsc);
 80155d2:	4638      	mov	r0, r7
 80155d4:	f7f4 fe60 	bl	800a298 <lv_draw_img_dsc_init>
    lv_obj_init_draw_img_dsc(obj, LV_PART_INDICATOR, &img_dsc);
 80155d8:	463a      	mov	r2, r7
 80155da:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80155de:	4658      	mov	r0, fp
 80155e0:	f7ef f95a 	bl	8004898 <lv_obj_init_draw_img_dsc>
    img_dsc.antialias = 1;
 80155e4:	f89d 3144 	ldrb.w	r3, [sp, #324]	; 0x144
 80155e8:	4621      	mov	r1, r4
 80155ea:	f240 4262 	movw	r2, #1122	; 0x462
 80155ee:	f043 0301 	orr.w	r3, r3, #1
 80155f2:	4658      	mov	r0, fp
 80155f4:	f88d 3144 	strb.w	r3, [sp, #324]	; 0x144
 80155f8:	f7f1 feb6 	bl	8007368 <lv_obj_get_style_prop>
 80155fc:	4680      	mov	r8, r0
    return (lv_opa_t)v.num;
 80155fe:	fa5f f980 	uxtb.w	r9, r0
    _LV_LL_READ_BACK(&meter->indicator_ll, indic) {
 8015602:	ee18 0a90 	vmov	r0, s17
 8015606:	f001 ff95 	bl	8017534 <_lv_ll_get_tail>
 801560a:	4604      	mov	r4, r0
 801560c:	2c00      	cmp	r4, #0
 801560e:	f040 82b0 	bne.w	8015b72 <lv_meter_event+0x726>
 8015612:	f8bd 406c 	ldrh.w	r4, [sp, #108]	; 0x6c
        lv_draw_rect_dsc_init(&mid_dsc);
 8015616:	4638      	mov	r0, r7
 8015618:	f8bd 5068 	ldrh.w	r5, [sp, #104]	; 0x68
 801561c:	3401      	adds	r4, #1
 801561e:	1b64      	subs	r4, r4, r5
        lv_coord_t r_edge = lv_area_get_width(&scale_area) / 2;
 8015620:	f3c4 33c0 	ubfx	r3, r4, #15, #1
 8015624:	fa03 f484 	sxtah	r4, r3, r4
        scale_center.y = scale_area.y1 + r_edge;
 8015628:	f8bd 306a 	ldrh.w	r3, [sp, #106]	; 0x6a
        scale_center.x = scale_area.x1 + r_edge;
 801562c:	f3c4 044f 	ubfx	r4, r4, #1, #16
 8015630:	4425      	add	r5, r4
        scale_center.y = scale_area.y1 + r_edge;
 8015632:	441c      	add	r4, r3
        lv_draw_rect_dsc_init(&mid_dsc);
 8015634:	f7f7 fa28 	bl	800ca88 <lv_draw_rect_dsc_init>
        lv_obj_init_draw_rect_dsc(obj, LV_PART_INDICATOR, &mid_dsc);
 8015638:	463a      	mov	r2, r7
 801563a:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 801563e:	4658      	mov	r0, fp
 8015640:	f7ee ff8e 	bl	8004560 <lv_obj_init_draw_rect_dsc>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8015644:	f241 0201 	movw	r2, #4097	; 0x1001
 8015648:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 801564c:	4658      	mov	r0, fp
 801564e:	f7f1 fe8b 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 8015652:	f241 0204 	movw	r2, #4100	; 0x1004
    return (lv_coord_t)v.num;
 8015656:	b206      	sxth	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 8015658:	f44f 3100 	mov.w	r1, #131072	; 0x20000
        scale_center.x = scale_area.x1 + r_edge;
 801565c:	b2ad      	uxth	r5, r5
 801565e:	4658      	mov	r0, fp
        lv_coord_t w = lv_obj_get_style_width(obj, LV_PART_INDICATOR) / 2;
 8015660:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
 8015664:	f7f1 fe80 	bl	8007368 <lv_obj_get_style_prop>
        lv_draw_rect(&nm_cord, clip_area, &mid_dsc);
 8015668:	463a      	mov	r2, r7
        nm_cord.x1 = scale_center.x - w;
 801566a:	f3c6 064f 	ubfx	r6, r6, #1, #16
        scale_center.y = scale_area.y1 + r_edge;
 801566e:	b2a4      	uxth	r4, r4
        lv_draw_rect(&nm_cord, clip_area, &mid_dsc);
 8015670:	ee18 1a10 	vmov	r1, s16
        nm_cord.x1 = scale_center.x - w;
 8015674:	1bab      	subs	r3, r5, r6
        nm_cord.x2 = scale_center.x + w;
 8015676:	442e      	add	r6, r5
        nm_cord.x1 = scale_center.x - w;
 8015678:	f8ad 3110 	strh.w	r3, [sp, #272]	; 0x110
        lv_coord_t h = lv_obj_get_style_height(obj, LV_PART_INDICATOR) / 2;
 801567c:	f3c0 33c0 	ubfx	r3, r0, #15, #1
        nm_cord.x2 = scale_center.x + w;
 8015680:	f8ad 6114 	strh.w	r6, [sp, #276]	; 0x114
        lv_coord_t h = lv_obj_get_style_height(obj, LV_PART_INDICATOR) / 2;
 8015684:	fa03 f080 	sxtah	r0, r3, r0
        nm_cord.y1 = scale_center.y - h;
 8015688:	f3c0 004f 	ubfx	r0, r0, #1, #16
 801568c:	1a23      	subs	r3, r4, r0
        nm_cord.y2 = scale_center.y + h;
 801568e:	4404      	add	r4, r0
        lv_draw_rect(&nm_cord, clip_area, &mid_dsc);
 8015690:	a844      	add	r0, sp, #272	; 0x110
        nm_cord.y1 = scale_center.y - h;
 8015692:	f8ad 3112 	strh.w	r3, [sp, #274]	; 0x112
        nm_cord.y2 = scale_center.y + h;
 8015696:	f8ad 4116 	strh.w	r4, [sp, #278]	; 0x116
        lv_draw_rect(&nm_cord, clip_area, &mid_dsc);
 801569a:	f7f7 fa17 	bl	800cacc <lv_draw_rect>
}
 801569e:	b05f      	add	sp, #380	; 0x17c
 80156a0:	ecbd 8b04 	vpop	{d8-d9}
 80156a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(indic->type != LV_METER_INDICATOR_TYPE_ARC) continue;
 80156a8:	7923      	ldrb	r3, [r4, #4]
 80156aa:	2b03      	cmp	r3, #3
 80156ac:	d133      	bne.n	8015716 <lv_meter_event+0x2ca>
        arc_dsc.color = indic->type_data.arc.color;
 80156ae:	8b23      	ldrh	r3, [r4, #24]
 80156b0:	f8ad 3130 	strh.w	r3, [sp, #304]	; 0x130
        arc_dsc.width = indic->type_data.arc.width;
 80156b4:	8a23      	ldrh	r3, [r4, #16]
 80156b6:	f8ad 3132 	strh.w	r3, [sp, #306]	; 0x132
        arc_dsc.opa = indic->opa > LV_OPA_MAX ? opa_main : (opa_main * indic->opa) >> 8;
 80156ba:	7963      	ldrb	r3, [r4, #5]
 80156bc:	2bfd      	cmp	r3, #253	; 0xfd
 80156be:	bf97      	itett	ls
 80156c0:	9a06      	ldrls	r2, [sp, #24]
 80156c2:	464b      	movhi	r3, r9
 80156c4:	4353      	mulls	r3, r2
 80156c6:	121b      	asrls	r3, r3, #8
 80156c8:	f88d 3138 	strb.w	r3, [sp, #312]	; 0x138
        lv_meter_scale_t * scale = indic->scale;
 80156cc:	6826      	ldr	r6, [r4, #0]
        int32_t start_angle = lv_map(indic->start_value, scale->min, scale->max, scale->rotation, scale->rotation + scale->angle_range);
 80156ce:	f9b6 3020 	ldrsh.w	r3, [r6, #32]
 80156d2:	8bf2      	ldrh	r2, [r6, #30]
 80156d4:	441a      	add	r2, r3
 80156d6:	9200      	str	r2, [sp, #0]
 80156d8:	68a0      	ldr	r0, [r4, #8]
 80156da:	e9d6 1205 	ldrd	r1, r2, [r6, #20]
 80156de:	f001 fffa 	bl	80176d6 <lv_map>
        int32_t end_angle = lv_map(indic->end_value, scale->min, scale->max, scale->rotation, scale->rotation + scale->angle_range);
 80156e2:	f9b6 3020 	ldrsh.w	r3, [r6, #32]
 80156e6:	8bf2      	ldrh	r2, [r6, #30]
        int32_t start_angle = lv_map(indic->start_value, scale->min, scale->max, scale->rotation, scale->rotation + scale->angle_range);
 80156e8:	4682      	mov	sl, r0
        int32_t end_angle = lv_map(indic->end_value, scale->min, scale->max, scale->rotation, scale->rotation + scale->angle_range);
 80156ea:	441a      	add	r2, r3
 80156ec:	9200      	str	r2, [sp, #0]
 80156ee:	68e0      	ldr	r0, [r4, #12]
 80156f0:	e9d6 1205 	ldrd	r1, r2, [r6, #20]
 80156f4:	f001 ffef 	bl	80176d6 <lv_map>
        lv_draw_arc(scale_center.x, scale_center.y, r_out + indic->type_data.arc.r_mod, start_angle, end_angle, clip_area, &arc_dsc);
 80156f8:	8b62      	ldrh	r2, [r4, #26]
 80156fa:	9b05      	ldr	r3, [sp, #20]
 80156fc:	b280      	uxth	r0, r0
 80156fe:	442a      	add	r2, r5
 8015700:	4641      	mov	r1, r8
 8015702:	9302      	str	r3, [sp, #8]
 8015704:	fa1f f38a 	uxth.w	r3, sl
 8015708:	9000      	str	r0, [sp, #0]
 801570a:	b292      	uxth	r2, r2
 801570c:	4638      	mov	r0, r7
 801570e:	ed8d 8a01 	vstr	s16, [sp, #4]
 8015712:	f7f3 f88d 	bl	8008830 <lv_draw_arc>
    _LV_LL_READ_BACK(&meter->indicator_ll, indic) {
 8015716:	4621      	mov	r1, r4
 8015718:	ee18 0a90 	vmov	r0, s17
 801571c:	f001 ff11 	bl	8017542 <_lv_ll_get_prev>
 8015720:	4604      	mov	r4, r0
 8015722:	e6e9      	b.n	80154f8 <lv_meter_event+0xac>
 8015724:	08025658 	.word	0x08025658
        lv_coord_t r_out = r_edge + scale->r_mod;
 8015728:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801572a:	8ba3      	ldrh	r3, [r4, #28]
        lv_coord_t r_in_major = r_out - scale->tick_major_length;
 801572c:	89a6      	ldrh	r6, [r4, #12]
        lv_coord_t r_out = r_edge + scale->r_mod;
 801572e:	4413      	add	r3, r2
 8015730:	b29d      	uxth	r5, r3
 8015732:	b21b      	sxth	r3, r3
        lv_coord_t r_in_major = r_out - scale->tick_major_length;
 8015734:	1ba9      	subs	r1, r5, r6
 8015736:	1b76      	subs	r6, r6, r5
        lv_coord_t r_out = r_edge + scale->r_mod;
 8015738:	9312      	str	r3, [sp, #72]	; 0x48
        lv_coord_t r_in_major = r_out - scale->tick_major_length;
 801573a:	b28f      	uxth	r7, r1
        lv_coord_t r_in_minor = r_out - scale->tick_length;
 801573c:	88a3      	ldrh	r3, [r4, #4]
        lv_coord_t r_in_major = r_out - scale->tick_major_length;
 801573e:	b209      	sxth	r1, r1
        lv_coord_t r_in_minor = r_out - scale->tick_length;
 8015740:	1aea      	subs	r2, r5, r3
        lv_coord_t r_in_major = r_out - scale->tick_major_length;
 8015742:	1b5b      	subs	r3, r3, r5
 8015744:	9113      	str	r1, [sp, #76]	; 0x4c
        area_inner_minor.x1 = p_center.x - r_in_minor;
 8015746:	f8bd 105c 	ldrh.w	r1, [sp, #92]	; 0x5c
 801574a:	fa11 f083 	uxtah	r0, r1, r3
        area_inner_minor.x2 = p_center.x + r_in_minor;
 801574e:	fa11 f182 	uxtah	r1, r1, r2
        area_inner_minor.x1 = p_center.x - r_in_minor;
 8015752:	f8ad 0070 	strh.w	r0, [sp, #112]	; 0x70
        area_inner_minor.y1 = p_center.y - r_in_minor;
 8015756:	f8bd 005e 	ldrh.w	r0, [sp, #94]	; 0x5e
        area_inner_minor.x2 = p_center.x + r_in_minor;
 801575a:	f8ad 1074 	strh.w	r1, [sp, #116]	; 0x74
        lv_draw_mask_radius_init(&inner_minor_mask, &area_inner_minor, LV_RADIUS_CIRCLE, true);
 801575e:	a91c      	add	r1, sp, #112	; 0x70
        area_inner_minor.y1 = p_center.y - r_in_minor;
 8015760:	fa10 f383 	uxtah	r3, r0, r3
        area_inner_minor.y2 = p_center.y + r_in_minor;
 8015764:	fa10 f282 	uxtah	r2, r0, r2
        lv_draw_mask_radius_init(&inner_minor_mask, &area_inner_minor, LV_RADIUS_CIRCLE, true);
 8015768:	a827      	add	r0, sp, #156	; 0x9c
        area_inner_minor.y1 = p_center.y - r_in_minor;
 801576a:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
        lv_draw_mask_radius_init(&inner_minor_mask, &area_inner_minor, LV_RADIUS_CIRCLE, true);
 801576e:	2301      	movs	r3, #1
        area_inner_minor.y2 = p_center.y + r_in_minor;
 8015770:	f8ad 2076 	strh.w	r2, [sp, #118]	; 0x76
        lv_draw_mask_radius_init(&inner_minor_mask, &area_inner_minor, LV_RADIUS_CIRCLE, true);
 8015774:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8015778:	f7f6 fde8 	bl	800c34c <lv_draw_mask_radius_init>
        area_inner_major.x1 = p_center.x - r_in_major;
 801577c:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
        lv_draw_mask_radius_init(&inner_major_mask, &area_inner_major, LV_RADIUS_CIRCLE, true);
 8015780:	a91e      	add	r1, sp, #120	; 0x78
 8015782:	a82e      	add	r0, sp, #184	; 0xb8
        area_inner_major.x1 = p_center.x - r_in_major;
 8015784:	fa13 f286 	uxtah	r2, r3, r6
        area_inner_major.x2 = p_center.x + r_in_major - 1;
 8015788:	3b01      	subs	r3, #1
        area_inner_major.x1 = p_center.x - r_in_major;
 801578a:	f8ad 2078 	strh.w	r2, [sp, #120]	; 0x78
        area_inner_major.x2 = p_center.x + r_in_major - 1;
 801578e:	443b      	add	r3, r7
        area_inner_major.y1 = p_center.y - r_in_major;
 8015790:	f8bd 205e 	ldrh.w	r2, [sp, #94]	; 0x5e
        area_inner_major.x2 = p_center.x + r_in_major - 1;
 8015794:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
        lv_draw_mask_radius_init(&inner_major_mask, &area_inner_major, LV_RADIUS_CIRCLE, true);
 8015798:	2301      	movs	r3, #1
        area_inner_major.y1 = p_center.y - r_in_major;
 801579a:	fa12 f686 	uxtah	r6, r2, r6
        area_inner_major.y2 = p_center.y + r_in_major - 1;
 801579e:	3a01      	subs	r2, #1
 80157a0:	4417      	add	r7, r2
        lv_draw_mask_radius_init(&inner_major_mask, &area_inner_major, LV_RADIUS_CIRCLE, true);
 80157a2:	f647 72ff 	movw	r2, #32767	; 0x7fff
        area_inner_major.y1 = p_center.y - r_in_major;
 80157a6:	f8ad 607a 	strh.w	r6, [sp, #122]	; 0x7a
        area_inner_major.y2 = p_center.y + r_in_major - 1;
 80157aa:	f8ad 707e 	strh.w	r7, [sp, #126]	; 0x7e
        lv_draw_mask_radius_init(&inner_major_mask, &area_inner_major, LV_RADIUS_CIRCLE, true);
 80157ae:	f7f6 fdcd 	bl	800c34c <lv_draw_mask_radius_init>
        area_outer.x1 = p_center.x - r_out;
 80157b2:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
        lv_draw_mask_radius_init(&outer_mask, &area_outer, LV_RADIUS_CIRCLE, false);
 80157b6:	a835      	add	r0, sp, #212	; 0xd4
        area_outer.x1 = p_center.x - r_out;
 80157b8:	1b5a      	subs	r2, r3, r5
        area_outer.x2 = p_center.x + r_out - 1;
 80157ba:	3b01      	subs	r3, #1
        area_outer.x1 = p_center.x - r_out;
 80157bc:	f8ad 2080 	strh.w	r2, [sp, #128]	; 0x80
        area_outer.x2 = p_center.x + r_out - 1;
 80157c0:	442b      	add	r3, r5
        area_outer.y1 = p_center.y - r_out;
 80157c2:	f8bd 205e 	ldrh.w	r2, [sp, #94]	; 0x5e
        area_outer.x2 = p_center.x + r_out - 1;
 80157c6:	f8ad 3084 	strh.w	r3, [sp, #132]	; 0x84
        lv_draw_mask_radius_init(&outer_mask, &area_outer, LV_RADIUS_CIRCLE, false);
 80157ca:	2300      	movs	r3, #0
        area_outer.y1 = p_center.y - r_out;
 80157cc:	1b51      	subs	r1, r2, r5
        area_outer.y2 = p_center.y + r_out - 1;
 80157ce:	3a01      	subs	r2, #1
 80157d0:	4415      	add	r5, r2
        area_outer.y1 = p_center.y - r_out;
 80157d2:	f8ad 1082 	strh.w	r1, [sp, #130]	; 0x82
        lv_draw_mask_radius_init(&outer_mask, &area_outer, LV_RADIUS_CIRCLE, false);
 80157d6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80157da:	a920      	add	r1, sp, #128	; 0x80
        area_outer.y2 = p_center.y + r_out - 1;
 80157dc:	f8ad 5086 	strh.w	r5, [sp, #134]	; 0x86
        lv_draw_mask_radius_init(&outer_mask, &area_outer, LV_RADIUS_CIRCLE, false);
 80157e0:	f7f6 fdb4 	bl	800c34c <lv_draw_mask_radius_init>
        int16_t outer_mask_id = lv_draw_mask_add(&outer_mask, NULL);
 80157e4:	2100      	movs	r1, #0
 80157e6:	a835      	add	r0, sp, #212	; 0xd4
 80157e8:	f7f6 fc4a 	bl	800c080 <lv_draw_mask_add>
        uint32_t minor_cnt = scale->tick_major_nth ? scale->tick_major_nth - 1 : 0xFFFF;
 80157ec:	8963      	ldrh	r3, [r4, #10]
        int16_t outer_mask_id = lv_draw_mask_add(&outer_mask, NULL);
 80157ee:	4680      	mov	r8, r0
        uint32_t minor_cnt = scale->tick_major_nth ? scale->tick_major_nth - 1 : 0xFFFF;
 80157f0:	b18b      	cbz	r3, 8015816 <lv_meter_event+0x3ca>
 80157f2:	3b01      	subs	r3, #1
 80157f4:	9305      	str	r3, [sp, #20]
            lv_coord_t line_width = line_width_ori;
 80157f6:	2300      	movs	r3, #0
        for(i = 0; i < scale->tick_cnt; i++) {
 80157f8:	8862      	ldrh	r2, [r4, #2]
 80157fa:	9306      	str	r3, [sp, #24]
 80157fc:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8015800:	4293      	cmp	r3, r2
 8015802:	d30b      	bcc.n	801581c <lv_meter_event+0x3d0>
        lv_draw_mask_remove_id(outer_mask_id);
 8015804:	4640      	mov	r0, r8
 8015806:	f7f6 fc73 	bl	800c0f0 <lv_draw_mask_remove_id>
    _LV_LL_READ_BACK(&meter->scale_ll, scale) {
 801580a:	4621      	mov	r1, r4
 801580c:	ee19 0a10 	vmov	r0, s18
 8015810:	f001 fe97 	bl	8017542 <_lv_ll_get_prev>
 8015814:	e6ba      	b.n	801558c <lv_meter_event+0x140>
        uint32_t minor_cnt = scale->tick_major_nth ? scale->tick_major_nth - 1 : 0xFFFF;
 8015816:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801581a:	e7eb      	b.n	80157f4 <lv_meter_event+0x3a8>
            minor_cnt++;
 801581c:	9b05      	ldr	r3, [sp, #20]
            inner_act_mask_id = lv_draw_mask_add(major ? &inner_major_mask : &inner_minor_mask, NULL);
 801581e:	2100      	movs	r1, #0
            minor_cnt++;
 8015820:	3301      	adds	r3, #1
 8015822:	9305      	str	r3, [sp, #20]
            if(minor_cnt == scale->tick_major_nth) {
 8015824:	9a05      	ldr	r2, [sp, #20]
 8015826:	8963      	ldrh	r3, [r4, #10]
 8015828:	429a      	cmp	r2, r3
                major = true;
 801582a:	bf0b      	itete	eq
 801582c:	2301      	moveq	r3, #1
            bool major = false;
 801582e:	2300      	movne	r3, #0
            inner_act_mask_id = lv_draw_mask_add(major ? &inner_major_mask : &inner_minor_mask, NULL);
 8015830:	a82e      	addeq	r0, sp, #184	; 0xb8
 8015832:	a827      	addne	r0, sp, #156	; 0x9c
                major = true;
 8015834:	bf05      	ittet	eq
 8015836:	9309      	streq	r3, [sp, #36]	; 0x24
                minor_cnt = 0;
 8015838:	2300      	moveq	r3, #0
            bool major = false;
 801583a:	9309      	strne	r3, [sp, #36]	; 0x24
                minor_cnt = 0;
 801583c:	9305      	streq	r3, [sp, #20]
            inner_act_mask_id = lv_draw_mask_add(major ? &inner_major_mask : &inner_minor_mask, NULL);
 801583e:	f7f6 fc1f 	bl	800c080 <lv_draw_mask_add>
            int32_t value_of_line = lv_map(i, 0, scale->tick_cnt - 1, scale->min, scale->max);
 8015842:	f89d 3018 	ldrb.w	r3, [sp, #24]
            inner_act_mask_id = lv_draw_mask_add(major ? &inner_major_mask : &inner_minor_mask, NULL);
 8015846:	ee09 0a90 	vmov	s19, r0
            int32_t value_of_line = lv_map(i, 0, scale->tick_cnt - 1, scale->min, scale->max);
 801584a:	8862      	ldrh	r2, [r4, #2]
 801584c:	2100      	movs	r1, #0
 801584e:	9308      	str	r3, [sp, #32]
 8015850:	69a3      	ldr	r3, [r4, #24]
 8015852:	3a01      	subs	r2, #1
 8015854:	9808      	ldr	r0, [sp, #32]
 8015856:	9300      	str	r3, [sp, #0]
 8015858:	6963      	ldr	r3, [r4, #20]
 801585a:	f001 ff3c 	bl	80176d6 <lv_map>
            lv_color_t line_color = major ? scale->tick_major_color : scale->tick_color;
 801585e:	9b09      	ldr	r3, [sp, #36]	; 0x24
            int32_t value_of_line = lv_map(i, 0, scale->tick_cnt - 1, scale->min, scale->max);
 8015860:	4681      	mov	r9, r0
            lv_color_t line_color = major ? scale->tick_major_color : scale->tick_color;
 8015862:	2b00      	cmp	r3, #0
 8015864:	f000 811c 	beq.w	8015aa0 <lv_meter_event+0x654>
 8015868:	7a23      	ldrb	r3, [r4, #8]
 801586a:	f003 031f 	and.w	r3, r3, #31
 801586e:	930e      	str	r3, [sp, #56]	; 0x38
 8015870:	8923      	ldrh	r3, [r4, #8]
 8015872:	f3c3 1345 	ubfx	r3, r3, #5, #6
 8015876:	930d      	str	r3, [sp, #52]	; 0x34
 8015878:	7a63      	ldrb	r3, [r4, #9]
 801587a:	08db      	lsrs	r3, r3, #3
 801587c:	930f      	str	r3, [sp, #60]	; 0x3c
            lv_coord_t line_width_ori = major ? scale->tick_major_width : scale->tick_width;
 801587e:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
            _LV_LL_READ_BACK(&meter->indicator_ll, indic) {
 8015882:	ee18 0a90 	vmov	r0, s17
            lv_coord_t line_width_ori = major ? scale->tick_major_width : scale->tick_width;
 8015886:	930c      	str	r3, [sp, #48]	; 0x30
            _LV_LL_READ_BACK(&meter->indicator_ll, indic) {
 8015888:	f001 fe54 	bl	8017534 <_lv_ll_get_tail>
 801588c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801588e:	4605      	mov	r5, r0
 8015890:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8015892:	9307      	str	r3, [sp, #28]
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8015894:	f248 0781 	movw	r7, #32897	; 0x8081
 8015898:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            lv_coord_t line_width = line_width_ori;
 801589a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
            _LV_LL_READ_BACK(&meter->indicator_ll, indic) {
 801589e:	930b      	str	r3, [sp, #44]	; 0x2c
 80158a0:	2d00      	cmp	r5, #0
 80158a2:	f040 810b 	bne.w	8015abc <lv_meter_event+0x670>
            int32_t angle_upscale = ((i * scale->angle_range) << 8) / (scale->tick_cnt - 1);
 80158a6:	9b08      	ldr	r3, [sp, #32]
 80158a8:	8be7      	ldrh	r7, [r4, #30]
 80158aa:	8860      	ldrh	r0, [r4, #2]
 80158ac:	435f      	muls	r7, r3
 80158ae:	3801      	subs	r0, #1
 80158b0:	023f      	lsls	r7, r7, #8
 80158b2:	fb97 f7f0 	sdiv	r7, r7, r0
            int32_t angle_low = (angle_upscale >> 8);
 80158b6:	123b      	asrs	r3, r7, #8
            int32_t sin_low = lv_trigo_sin(angle_low + scale->rotation);
 80158b8:	8c20      	ldrh	r0, [r4, #32]
            int32_t angle_low = (angle_upscale >> 8);
 80158ba:	9314      	str	r3, [sp, #80]	; 0x50
            int32_t angle_rem = angle_upscale & 0xFF;
 80158bc:	b2fb      	uxtb	r3, r7
            int32_t sin_low = lv_trigo_sin(angle_low + scale->rotation);
 80158be:	f3c7 270f 	ubfx	r7, r7, #8, #16
            int32_t angle_rem = angle_upscale & 0xFF;
 80158c2:	930a      	str	r3, [sp, #40]	; 0x28
            int32_t sin_low = lv_trigo_sin(angle_low + scale->rotation);
 80158c4:	4438      	add	r0, r7
 80158c6:	b200      	sxth	r0, r0
 80158c8:	f001 fe58 	bl	801757c <lv_trigo_sin>
            int32_t angle_high = angle_low + 1;
 80158cc:	9b14      	ldr	r3, [sp, #80]	; 0x50
            int32_t sin_low = lv_trigo_sin(angle_low + scale->rotation);
 80158ce:	9010      	str	r0, [sp, #64]	; 0x40
            int32_t angle_high = angle_low + 1;
 80158d0:	1c58      	adds	r0, r3, #1
            int32_t sin_high = lv_trigo_sin(angle_high + scale->rotation);
 80158d2:	8c23      	ldrh	r3, [r4, #32]
 80158d4:	b282      	uxth	r2, r0
 80158d6:	fa13 f080 	uxtah	r0, r3, r0
 80158da:	b200      	sxth	r0, r0
 80158dc:	9215      	str	r2, [sp, #84]	; 0x54
 80158de:	f001 fe4d 	bl	801757c <lv_trigo_sin>
            int32_t sin_mid = (sin_low * (256 - angle_rem) + sin_high * angle_rem) >> 8;
 80158e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80158e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80158e6:	4350      	muls	r0, r2
 80158e8:	9910      	ldr	r1, [sp, #64]	; 0x40
 80158ea:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80158ee:	fb03 0101 	mla	r1, r3, r1, r0
 */
LV_ATTRIBUTE_FAST_MEM int16_t lv_trigo_sin(int16_t angle);

static inline LV_ATTRIBUTE_FAST_MEM int16_t lv_trigo_cos(int16_t angle)
{
    return lv_trigo_sin(angle + 90);
 80158f2:	8c20      	ldrh	r0, [r4, #32]
 80158f4:	9314      	str	r3, [sp, #80]	; 0x50
 80158f6:	305a      	adds	r0, #90	; 0x5a
 80158f8:	120b      	asrs	r3, r1, #8
 80158fa:	4438      	add	r0, r7
 80158fc:	9310      	str	r3, [sp, #64]	; 0x40
 80158fe:	b200      	sxth	r0, r0
 8015900:	f001 fe3c 	bl	801757c <lv_trigo_sin>
 8015904:	4607      	mov	r7, r0
 8015906:	8c20      	ldrh	r0, [r4, #32]
 8015908:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801590a:	305a      	adds	r0, #90	; 0x5a
 801590c:	4410      	add	r0, r2
 801590e:	b200      	sxth	r0, r0
 8015910:	f001 fe34 	bl	801757c <lv_trigo_sin>
            int32_t cos_mid = (cos_low * (256 - angle_rem) + cos_high * angle_rem) >> 8;
 8015914:	9b0a      	ldr	r3, [sp, #40]	; 0x28
            line_dsc.color = line_color;
 8015916:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
            int32_t cos_mid = (cos_low * (256 - angle_rem) + cos_high * angle_rem) >> 8;
 8015918:	4358      	muls	r0, r3
 801591a:	9b14      	ldr	r3, [sp, #80]	; 0x50
            line_dsc.width = line_width;
 801591c:	f8ad a092 	strh.w	sl, [sp, #146]	; 0x92
            int32_t cos_mid = (cos_low * (256 - angle_rem) + cos_high * angle_rem) >> 8;
 8015920:	fb03 0707 	mla	r7, r3, r7, r0
            line_dsc.color = line_color;
 8015924:	f89d 3090 	ldrb.w	r3, [sp, #144]	; 0x90
            lv_draw_line(&p_outer, &p_center, clip_area, &line_dsc);
 8015928:	a818      	add	r0, sp, #96	; 0x60
            line_dsc.color = line_color;
 801592a:	f366 0304 	bfi	r3, r6, #0, #5
            int32_t cos_mid = (cos_low * (256 - angle_rem) + cos_high * angle_rem) >> 8;
 801592e:	123f      	asrs	r7, r7, #8
            line_dsc.color = line_color;
 8015930:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
 8015934:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
 8015938:	f362 134a 	bfi	r3, r2, #5, #6
 801593c:	9a07      	ldr	r2, [sp, #28]
 801593e:	f8ad 3090 	strh.w	r3, [sp, #144]	; 0x90
 8015942:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8015946:	f362 03c7 	bfi	r3, r2, #3, #5
 801594a:	f88d 3091 	strb.w	r3, [sp, #145]	; 0x91
            p_outer.x = (int32_t)(((int32_t)cos_mid * (r_out + line_width) + 127) >> (LV_TRIGO_SHIFT)) + p_center.x;
 801594e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015950:	4453      	add	r3, sl
 8015952:	fb03 f207 	mul.w	r2, r3, r7
 8015956:	f102 017f 	add.w	r1, r2, #127	; 0x7f
 801595a:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 801595e:	eb02 32e1 	add.w	r2, r2, r1, asr #15
            lv_draw_line(&p_outer, &p_center, clip_area, &line_dsc);
 8015962:	a917      	add	r1, sp, #92	; 0x5c
            p_outer.x = (int32_t)(((int32_t)cos_mid * (r_out + line_width) + 127) >> (LV_TRIGO_SHIFT)) + p_center.x;
 8015964:	f8ad 2060 	strh.w	r2, [sp, #96]	; 0x60
            p_outer.y = (int32_t)(((int32_t)sin_mid * (r_out + line_width) + 127) >> (LV_TRIGO_SHIFT)) + p_center.y;
 8015968:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801596a:	4353      	muls	r3, r2
 801596c:	f8bd 205e 	ldrh.w	r2, [sp, #94]	; 0x5e
 8015970:	337f      	adds	r3, #127	; 0x7f
 8015972:	eb02 33e3 	add.w	r3, r2, r3, asr #15
            lv_draw_line(&p_outer, &p_center, clip_area, &line_dsc);
 8015976:	ee18 2a10 	vmov	r2, s16
            p_outer.y = (int32_t)(((int32_t)sin_mid * (r_out + line_width) + 127) >> (LV_TRIGO_SHIFT)) + p_center.y;
 801597a:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
            lv_draw_line(&p_outer, &p_center, clip_area, &line_dsc);
 801597e:	ab24      	add	r3, sp, #144	; 0x90
 8015980:	f7f5 fa54 	bl	800ae2c <lv_draw_line>
            line_dsc.color = line_color_ori;
 8015984:	f89d 3090 	ldrb.w	r3, [sp, #144]	; 0x90
 8015988:	9a0e      	ldr	r2, [sp, #56]	; 0x38
            lv_draw_mask_remove_id(inner_act_mask_id);
 801598a:	ee19 0a90 	vmov	r0, s19
            line_dsc.color = line_color_ori;
 801598e:	f362 0304 	bfi	r3, r2, #0, #5
 8015992:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015994:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
 8015998:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
 801599c:	f362 134a 	bfi	r3, r2, #5, #6
 80159a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80159a2:	f8ad 3090 	strh.w	r3, [sp, #144]	; 0x90
 80159a6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80159aa:	f362 03c7 	bfi	r3, r2, #3, #5
 80159ae:	f88d 3091 	strb.w	r3, [sp, #145]	; 0x91
            line_dsc.width = line_width_ori;
 80159b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80159b4:	f8ad 3092 	strh.w	r3, [sp, #146]	; 0x92
            lv_draw_mask_remove_id(inner_act_mask_id);
 80159b8:	f7f6 fb9a 	bl	800c0f0 <lv_draw_mask_remove_id>
            if(major) {
 80159bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80159be:	2b00      	cmp	r3, #0
 80159c0:	d06b      	beq.n	8015a9a <lv_meter_event+0x64e>
                lv_draw_mask_remove_id(outer_mask_id);
 80159c2:	4640      	mov	r0, r8
                lv_memcpy(&label_dsc_tmp, &label_dsc, sizeof(label_dsc_tmp));
 80159c4:	ae44      	add	r6, sp, #272	; 0x110
                lv_draw_mask_remove_id(outer_mask_id);
 80159c6:	f7f6 fb93 	bl	800c0f0 <lv_draw_mask_remove_id>
                uint32_t r_text = r_in_major - scale->label_gap;
 80159ca:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80159cc:	f9b4 a010 	ldrsh.w	sl, [r4, #16]
                lv_memcpy(&label_dsc_tmp, &label_dsc, sizeof(label_dsc_tmp));
 80159d0:	2220      	movs	r2, #32
 80159d2:	a93c      	add	r1, sp, #240	; 0xf0
 80159d4:	4630      	mov	r0, r6
                uint32_t r_text = r_in_major - scale->label_gap;
 80159d6:	eba3 0a0a 	sub.w	sl, r3, sl
                p.y = (int32_t)((int32_t)((int32_t)sin_mid * r_text + 127) >> LV_TRIGO_SHIFT) + p_center.y;
 80159da:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
                p.x = (int32_t)((int32_t)((int32_t)cos_mid * r_text + 127) >> LV_TRIGO_SHIFT) + p_center.x;
 80159de:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
                p.y = (int32_t)((int32_t)((int32_t)sin_mid * r_text + 127) >> LV_TRIGO_SHIFT) + p_center.y;
 80159e2:	9307      	str	r3, [sp, #28]
                lv_memcpy(&label_dsc_tmp, &label_dsc, sizeof(label_dsc_tmp));
 80159e4:	f001 fee0 	bl	80177a8 <lv_memcpy>
                dsc.id = i / scale->tick_major_nth;
 80159e8:	8963      	ldrh	r3, [r4, #10]
                lv_snprintf(dsc.text, sizeof(dsc.text), "%d", value_of_line);
 80159ea:	2110      	movs	r1, #16
                dsc.id = i / scale->tick_major_nth;
 80159ec:	9a08      	ldr	r2, [sp, #32]
                lv_snprintf(dsc.text, sizeof(dsc.text), "%d", value_of_line);
 80159ee:	a855      	add	r0, sp, #340	; 0x154
                dsc.label_dsc = &label_dsc_tmp;
 80159f0:	964f      	str	r6, [sp, #316]	; 0x13c
                dsc.value = value_of_line;
 80159f2:	f8cd 9170 	str.w	r9, [sp, #368]	; 0x170
                p.x = (int32_t)((int32_t)((int32_t)cos_mid * r_text + 127) >> LV_TRIGO_SHIFT) + p_center.x;
 80159f6:	fb0a f707 	mul.w	r7, sl, r7
                dsc.id = i / scale->tick_major_nth;
 80159fa:	fbb2 f3f3 	udiv	r3, r2, r3
                lv_snprintf(dsc.text, sizeof(dsc.text), "%d", value_of_line);
 80159fe:	4ab0      	ldr	r2, [pc, #704]	; (8015cc0 <lv_meter_event+0x874>)
                p.x = (int32_t)((int32_t)((int32_t)cos_mid * r_text + 127) >> LV_TRIGO_SHIFT) + p_center.x;
 8015a00:	377f      	adds	r7, #127	; 0x7f
                dsc.id = i / scale->tick_major_nth;
 8015a02:	935a      	str	r3, [sp, #360]	; 0x168
                lv_snprintf(dsc.text, sizeof(dsc.text), "%d", value_of_line);
 8015a04:	464b      	mov	r3, r9
 8015a06:	f002 fc9f 	bl	8018348 <lv_snprintf>
                lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &dsc);
 8015a0a:	aa4c      	add	r2, sp, #304	; 0x130
 8015a0c:	211a      	movs	r1, #26
 8015a0e:	4658      	mov	r0, fp
 8015a10:	f7ec fa5a 	bl	8001ec8 <lv_event_send>
                lv_txt_get_size(&label_size, dsc.text, label_dsc.font, label_dsc.letter_space, label_dsc.line_space,
 8015a14:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8015a18:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
 8015a1a:	a955      	add	r1, sp, #340	; 0x154
 8015a1c:	9301      	str	r3, [sp, #4]
 8015a1e:	a819      	add	r0, sp, #100	; 0x64
 8015a20:	f9bd 3102 	ldrsh.w	r3, [sp, #258]	; 0x102
 8015a24:	9502      	str	r5, [sp, #8]
 8015a26:	9300      	str	r3, [sp, #0]
 8015a28:	f9bd 3104 	ldrsh.w	r3, [sp, #260]	; 0x104
 8015a2c:	f003 fd93 	bl	8019556 <lv_txt_get_size>
                label_cord.x1 = p.x - label_size.x / 2;
 8015a30:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
                p.y = (int32_t)((int32_t)((int32_t)sin_mid * r_text + 127) >> LV_TRIGO_SHIFT) + p_center.y;
 8015a34:	9910      	ldr	r1, [sp, #64]	; 0x40
                label_cord.x1 = p.x - label_size.x / 2;
 8015a36:	eb02 73d2 	add.w	r3, r2, r2, lsr #31
                label_cord.y1 = p.y - label_size.y / 2;
 8015a3a:	9807      	ldr	r0, [sp, #28]
                p.y = (int32_t)((int32_t)((int32_t)sin_mid * r_text + 127) >> LV_TRIGO_SHIFT) + p_center.y;
 8015a3c:	fb0a fa01 	mul.w	sl, sl, r1
                label_cord.x1 = p.x - label_size.x / 2;
 8015a40:	eba8 0863 	sub.w	r8, r8, r3, asr #1
                label_cord.y1 = p.y - label_size.y / 2;
 8015a44:	f9bd 3066 	ldrsh.w	r3, [sp, #102]	; 0x66
                p.y = (int32_t)((int32_t)((int32_t)sin_mid * r_text + 127) >> LV_TRIGO_SHIFT) + p_center.y;
 8015a48:	f10a 0a7f 	add.w	sl, sl, #127	; 0x7f
                lv_draw_label(&label_cord, clip_area, &label_dsc, dsc.text, NULL);
 8015a4c:	9500      	str	r5, [sp, #0]
                label_cord.y1 = p.y - label_size.y / 2;
 8015a4e:	eb03 71d3 	add.w	r1, r3, r3, lsr #31
                label_cord.x1 = p.x - label_size.x / 2;
 8015a52:	eb08 38e7 	add.w	r8, r8, r7, asr #15
                label_cord.y1 = p.y - label_size.y / 2;
 8015a56:	eba0 0661 	sub.w	r6, r0, r1, asr #1
                lv_draw_label(&label_cord, clip_area, &label_dsc, dsc.text, NULL);
 8015a5a:	ee18 1a10 	vmov	r1, s16
                label_cord.x1 = p.x - label_size.x / 2;
 8015a5e:	fa1f f888 	uxth.w	r8, r8
                lv_draw_label(&label_cord, clip_area, &label_dsc, dsc.text, NULL);
 8015a62:	a822      	add	r0, sp, #136	; 0x88
                label_cord.y1 = p.y - label_size.y / 2;
 8015a64:	eb06 36ea 	add.w	r6, r6, sl, asr #15
                label_cord.x1 = p.x - label_size.x / 2;
 8015a68:	f8ad 8088 	strh.w	r8, [sp, #136]	; 0x88
                label_cord.x2 = label_cord.x1 + label_size.x;
 8015a6c:	4490      	add	r8, r2
                label_cord.y1 = p.y - label_size.y / 2;
 8015a6e:	b2b6      	uxth	r6, r6
                lv_draw_label(&label_cord, clip_area, &label_dsc, dsc.text, NULL);
 8015a70:	aa3c      	add	r2, sp, #240	; 0xf0
                label_cord.x2 = label_cord.x1 + label_size.x;
 8015a72:	f8ad 808c 	strh.w	r8, [sp, #140]	; 0x8c
                label_cord.y1 = p.y - label_size.y / 2;
 8015a76:	f8ad 608a 	strh.w	r6, [sp, #138]	; 0x8a
                label_cord.y2 = label_cord.y1 + label_size.y;
 8015a7a:	441e      	add	r6, r3
                lv_draw_label(&label_cord, clip_area, &label_dsc, dsc.text, NULL);
 8015a7c:	ab55      	add	r3, sp, #340	; 0x154
                label_cord.y2 = label_cord.y1 + label_size.y;
 8015a7e:	f8ad 608e 	strh.w	r6, [sp, #142]	; 0x8e
                lv_draw_label(&label_cord, clip_area, &label_dsc, dsc.text, NULL);
 8015a82:	f7f4 ff25 	bl	800a8d0 <lv_draw_label>
                lv_event_send(obj, LV_EVENT_DRAW_PART_END, &dsc);
 8015a86:	aa4c      	add	r2, sp, #304	; 0x130
 8015a88:	211b      	movs	r1, #27
 8015a8a:	4658      	mov	r0, fp
 8015a8c:	f7ec fa1c 	bl	8001ec8 <lv_event_send>
                outer_mask_id = lv_draw_mask_add(&outer_mask, NULL);
 8015a90:	4629      	mov	r1, r5
 8015a92:	a835      	add	r0, sp, #212	; 0xd4
 8015a94:	f7f6 faf4 	bl	800c080 <lv_draw_mask_add>
 8015a98:	4680      	mov	r8, r0
        for(i = 0; i < scale->tick_cnt; i++) {
 8015a9a:	9b06      	ldr	r3, [sp, #24]
 8015a9c:	3301      	adds	r3, #1
 8015a9e:	e6ab      	b.n	80157f8 <lv_meter_event+0x3ac>
            lv_color_t line_color = major ? scale->tick_major_color : scale->tick_color;
 8015aa0:	7823      	ldrb	r3, [r4, #0]
 8015aa2:	f003 031f 	and.w	r3, r3, #31
 8015aa6:	930e      	str	r3, [sp, #56]	; 0x38
 8015aa8:	8823      	ldrh	r3, [r4, #0]
 8015aaa:	f3c3 1345 	ubfx	r3, r3, #5, #6
 8015aae:	930d      	str	r3, [sp, #52]	; 0x34
 8015ab0:	7863      	ldrb	r3, [r4, #1]
 8015ab2:	08db      	lsrs	r3, r3, #3
 8015ab4:	930f      	str	r3, [sp, #60]	; 0x3c
            lv_coord_t line_width_ori = major ? scale->tick_major_width : scale->tick_width;
 8015ab6:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8015aba:	e6e2      	b.n	8015882 <lv_meter_event+0x436>
                if(indic->type != LV_METER_INDICATOR_TYPE_SCALE_LINES) continue;
 8015abc:	792b      	ldrb	r3, [r5, #4]
 8015abe:	2b02      	cmp	r3, #2
 8015ac0:	d116      	bne.n	8015af0 <lv_meter_event+0x6a4>
                if(value_of_line >= indic->start_value && value_of_line <= indic->end_value) {
 8015ac2:	68a9      	ldr	r1, [r5, #8]
 8015ac4:	4589      	cmp	r9, r1
 8015ac6:	db13      	blt.n	8015af0 <lv_meter_event+0x6a4>
 8015ac8:	68ea      	ldr	r2, [r5, #12]
 8015aca:	4591      	cmp	r9, r2
 8015acc:	dc10      	bgt.n	8015af0 <lv_meter_event+0x6a4>
                    line_width += indic->type_data.scale_lines.width_mod;
 8015ace:	8a2b      	ldrh	r3, [r5, #16]
                    if(indic->type_data.scale_lines.color_start.full == indic->type_data.scale_lines.color_end.full) {
 8015ad0:	8aa8      	ldrh	r0, [r5, #20]
                    line_width += indic->type_data.scale_lines.width_mod;
 8015ad2:	4453      	add	r3, sl
 8015ad4:	fa0f fa83 	sxth.w	sl, r3
                    if(indic->type_data.scale_lines.color_start.full == indic->type_data.scale_lines.color_end.full) {
 8015ad8:	8a6b      	ldrh	r3, [r5, #18]
 8015ada:	4283      	cmp	r3, r0
 8015adc:	d10f      	bne.n	8015afe <lv_meter_event+0x6b2>
                        line_color = indic->type_data.scale_lines.color_start;
 8015ade:	f3c3 1345 	ubfx	r3, r3, #5, #6
 8015ae2:	7cae      	ldrb	r6, [r5, #18]
 8015ae4:	930b      	str	r3, [sp, #44]	; 0x2c
 8015ae6:	f006 061f 	and.w	r6, r6, #31
 8015aea:	7ceb      	ldrb	r3, [r5, #19]
 8015aec:	08db      	lsrs	r3, r3, #3
 8015aee:	9307      	str	r3, [sp, #28]
            _LV_LL_READ_BACK(&meter->indicator_ll, indic) {
 8015af0:	4629      	mov	r1, r5
 8015af2:	ee18 0a90 	vmov	r0, s17
 8015af6:	f001 fd24 	bl	8017542 <_lv_ll_get_prev>
 8015afa:	4605      	mov	r5, r0
 8015afc:	e6d0      	b.n	80158a0 <lv_meter_event+0x454>
                        if(indic->type_data.scale_lines.local_grad) {
 8015afe:	7dab      	ldrb	r3, [r5, #22]
                            ratio = lv_map(value_of_line, scale->min, scale->max, LV_OPA_TRANSP, LV_OPA_COVER);
 8015b00:	4648      	mov	r0, r9
                        if(indic->type_data.scale_lines.local_grad) {
 8015b02:	f013 0301 	ands.w	r3, r3, #1
                            ratio = lv_map(value_of_line, indic->start_value, indic->end_value, LV_OPA_TRANSP, LV_OPA_COVER);
 8015b06:	bf17      	itett	ne
 8015b08:	23ff      	movne	r3, #255	; 0xff
                            ratio = lv_map(value_of_line, scale->min, scale->max, LV_OPA_TRANSP, LV_OPA_COVER);
 8015b0a:	22ff      	moveq	r2, #255	; 0xff
                            ratio = lv_map(value_of_line, indic->start_value, indic->end_value, LV_OPA_TRANSP, LV_OPA_COVER);
 8015b0c:	9300      	strne	r3, [sp, #0]
 8015b0e:	2300      	movne	r3, #0
                            ratio = lv_map(value_of_line, scale->min, scale->max, LV_OPA_TRANSP, LV_OPA_COVER);
 8015b10:	bf04      	itt	eq
 8015b12:	9200      	streq	r2, [sp, #0]
 8015b14:	e9d4 1205 	ldrdeq	r1, r2, [r4, #20]
 8015b18:	f001 fddd 	bl	80176d6 <lv_map>
 8015b1c:	7ce9      	ldrb	r1, [r5, #19]
 8015b1e:	b2c0      	uxtb	r0, r0
 8015b20:	7d6b      	ldrb	r3, [r5, #21]
 8015b22:	08c9      	lsrs	r1, r1, #3
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8015b24:	7d2e      	ldrb	r6, [r5, #20]
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8015b26:	f1c0 02ff 	rsb	r2, r0, #255	; 0xff
 8015b2a:	08db      	lsrs	r3, r3, #3
 8015b2c:	4351      	muls	r1, r2
 8015b2e:	fb03 1300 	mla	r3, r3, r0, r1
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8015b32:	8a69      	ldrh	r1, [r5, #18]
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8015b34:	3380      	adds	r3, #128	; 0x80
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8015b36:	f3c1 1145 	ubfx	r1, r1, #5, #6
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8015b3a:	437b      	muls	r3, r7
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8015b3c:	4351      	muls	r1, r2
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8015b3e:	f3c3 53c4 	ubfx	r3, r3, #23, #5
 8015b42:	9307      	str	r3, [sp, #28]
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8015b44:	8aab      	ldrh	r3, [r5, #20]
 8015b46:	f3c3 1345 	ubfx	r3, r3, #5, #6
 8015b4a:	fb03 1300 	mla	r3, r3, r0, r1
 8015b4e:	3380      	adds	r3, #128	; 0x80
 8015b50:	437b      	muls	r3, r7
 8015b52:	f3c3 53c5 	ubfx	r3, r3, #23, #6
 8015b56:	930b      	str	r3, [sp, #44]	; 0x2c
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8015b58:	f006 031f 	and.w	r3, r6, #31
 8015b5c:	7cae      	ldrb	r6, [r5, #18]
 8015b5e:	f006 061f 	and.w	r6, r6, #31
 8015b62:	4356      	muls	r6, r2
 8015b64:	fb03 6600 	mla	r6, r3, r0, r6
 8015b68:	3680      	adds	r6, #128	; 0x80
 8015b6a:	437e      	muls	r6, r7
 8015b6c:	f3c6 56c4 	ubfx	r6, r6, #23, #5
#else
    /*LV_COLOR_DEPTH == 1*/
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
#endif

    return ret;
 8015b70:	e7be      	b.n	8015af0 <lv_meter_event+0x6a4>
        if(indic->type == LV_METER_INDICATOR_TYPE_NEEDLE_LINE) {
 8015b72:	7923      	ldrb	r3, [r4, #4]
        lv_meter_scale_t * scale = indic->scale;
 8015b74:	6825      	ldr	r5, [r4, #0]
        if(indic->type == LV_METER_INDICATOR_TYPE_NEEDLE_LINE) {
 8015b76:	2b01      	cmp	r3, #1
 8015b78:	d14d      	bne.n	8015c16 <lv_meter_event+0x7ca>
            int32_t angle = lv_map(indic->end_value, scale->min, scale->max, scale->rotation, scale->rotation + scale->angle_range);
 8015b7a:	f9b5 3020 	ldrsh.w	r3, [r5, #32]
 8015b7e:	8bea      	ldrh	r2, [r5, #30]
 8015b80:	441a      	add	r2, r3
 8015b82:	9200      	str	r2, [sp, #0]
 8015b84:	68e0      	ldr	r0, [r4, #12]
 8015b86:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
 8015b8a:	f001 fda4 	bl	80176d6 <lv_map>
 8015b8e:	4601      	mov	r1, r0
            lv_coord_t r_out = r_edge + scale->r_mod + indic->type_data.needle_line.r_mod;
 8015b90:	8a60      	ldrh	r0, [r4, #18]
 8015b92:	8bad      	ldrh	r5, [r5, #28]
 8015b94:	4430      	add	r0, r6
            p_end.y = (lv_trigo_sin(angle) * (r_out)) / LV_TRIGO_SIN_MAX + scale_center.y;
 8015b96:	9105      	str	r1, [sp, #20]
            lv_coord_t r_out = r_edge + scale->r_mod + indic->type_data.needle_line.r_mod;
 8015b98:	4405      	add	r5, r0
            p_end.y = (lv_trigo_sin(angle) * (r_out)) / LV_TRIGO_SIN_MAX + scale_center.y;
 8015b9a:	b208      	sxth	r0, r1
 8015b9c:	f001 fcee 	bl	801757c <lv_trigo_sin>
 8015ba0:	f647 72ff 	movw	r2, #32767	; 0x7fff
            lv_coord_t r_out = r_edge + scale->r_mod + indic->type_data.needle_line.r_mod;
 8015ba4:	b22d      	sxth	r5, r5
 8015ba6:	9905      	ldr	r1, [sp, #20]
            p_end.y = (lv_trigo_sin(angle) * (r_out)) / LV_TRIGO_SIN_MAX + scale_center.y;
 8015ba8:	fb00 f305 	mul.w	r3, r0, r5
 8015bac:	f8bd 00ba 	ldrh.w	r0, [sp, #186]	; 0xba
 8015bb0:	fb93 f3f2 	sdiv	r3, r3, r2
 8015bb4:	4403      	add	r3, r0
 8015bb6:	f101 005a 	add.w	r0, r1, #90	; 0x5a
 8015bba:	b200      	sxth	r0, r0
 8015bbc:	f8ad 30f2 	strh.w	r3, [sp, #242]	; 0xf2
 8015bc0:	f001 fcdc 	bl	801757c <lv_trigo_sin>
            p_end.x = (lv_trigo_cos(angle) * (r_out)) / LV_TRIGO_SIN_MAX + scale_center.x;
 8015bc4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8015bc8:	4345      	muls	r5, r0
 8015bca:	f8bd 00b8 	ldrh.w	r0, [sp, #184]	; 0xb8
            lv_draw_line(&scale_center, &p_end, clip_area, &line_dsc);
 8015bce:	a93c      	add	r1, sp, #240	; 0xf0
            p_end.x = (lv_trigo_cos(angle) * (r_out)) / LV_TRIGO_SIN_MAX + scale_center.x;
 8015bd0:	fb95 f5f2 	sdiv	r5, r5, r2
 8015bd4:	4405      	add	r5, r0
            lv_draw_line(&scale_center, &p_end, clip_area, &line_dsc);
 8015bd6:	a82e      	add	r0, sp, #184	; 0xb8
            p_end.x = (lv_trigo_cos(angle) * (r_out)) / LV_TRIGO_SIN_MAX + scale_center.x;
 8015bd8:	f8ad 50f0 	strh.w	r5, [sp, #240]	; 0xf0
            line_dsc.color = indic->type_data.needle_line.color;
 8015bdc:	8aa3      	ldrh	r3, [r4, #20]
 8015bde:	f8ad 3110 	strh.w	r3, [sp, #272]	; 0x110
            line_dsc.width = indic->type_data.needle_line.width;
 8015be2:	8a23      	ldrh	r3, [r4, #16]
 8015be4:	f8ad 3112 	strh.w	r3, [sp, #274]	; 0x112
            line_dsc.opa = indic->opa > LV_OPA_MAX ? opa_main : (opa_main * indic->opa) >> 8;
 8015be8:	7963      	ldrb	r3, [r4, #5]
 8015bea:	2bfd      	cmp	r3, #253	; 0xfd
 8015bec:	bf96      	itet	ls
 8015bee:	fa5f f288 	uxtbls.w	r2, r8
 8015bf2:	464b      	movhi	r3, r9
 8015bf4:	4353      	mulls	r3, r2
            lv_draw_line(&scale_center, &p_end, clip_area, &line_dsc);
 8015bf6:	ee18 2a10 	vmov	r2, s16
            line_dsc.opa = indic->opa > LV_OPA_MAX ? opa_main : (opa_main * indic->opa) >> 8;
 8015bfa:	bf98      	it	ls
 8015bfc:	0a1b      	lsrls	r3, r3, #8
 8015bfe:	f88d 3118 	strb.w	r3, [sp, #280]	; 0x118
            lv_draw_line(&scale_center, &p_end, clip_area, &line_dsc);
 8015c02:	ab44      	add	r3, sp, #272	; 0x110
 8015c04:	f7f5 f912 	bl	800ae2c <lv_draw_line>
    _LV_LL_READ_BACK(&meter->indicator_ll, indic) {
 8015c08:	4621      	mov	r1, r4
 8015c0a:	ee18 0a90 	vmov	r0, s17
 8015c0e:	f001 fc98 	bl	8017542 <_lv_ll_get_prev>
 8015c12:	4604      	mov	r4, r0
 8015c14:	e4fa      	b.n	801560c <lv_meter_event+0x1c0>
        else if(indic->type == LV_METER_INDICATOR_TYPE_NEEDLE_IMG) {
 8015c16:	2b00      	cmp	r3, #0
 8015c18:	d1f6      	bne.n	8015c08 <lv_meter_event+0x7bc>
            if(indic->type_data.needle_img.src == NULL) continue;
 8015c1a:	6923      	ldr	r3, [r4, #16]
 8015c1c:	2b00      	cmp	r3, #0
 8015c1e:	d0f3      	beq.n	8015c08 <lv_meter_event+0x7bc>
            int32_t angle = lv_map(indic->end_value, scale->min, scale->max, scale->rotation, scale->rotation + scale->angle_range);
 8015c20:	f9b5 3020 	ldrsh.w	r3, [r5, #32]
 8015c24:	8bea      	ldrh	r2, [r5, #30]
 8015c26:	441a      	add	r2, r3
 8015c28:	9200      	str	r2, [sp, #0]
 8015c2a:	68e0      	ldr	r0, [r4, #12]
 8015c2c:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
 8015c30:	f001 fd51 	bl	80176d6 <lv_map>
            lv_img_decoder_get_info(indic->type_data.needle_img.src, &info);
 8015c34:	a935      	add	r1, sp, #212	; 0xd4
            int32_t angle = lv_map(indic->end_value, scale->min, scale->max, scale->rotation, scale->rotation + scale->angle_range);
 8015c36:	4605      	mov	r5, r0
            lv_img_decoder_get_info(indic->type_data.needle_img.src, &info);
 8015c38:	6920      	ldr	r0, [r4, #16]
 8015c3a:	f7f9 faaf 	bl	800f19c <lv_img_decoder_get_info>
            a.x1 = scale_center.x - indic->type_data.needle_img.pivot.x;
 8015c3e:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8015c42:	f8bd c0b8 	ldrh.w	ip, [sp, #184]	; 0xb8
            a.x2 = a.x1 + info.w - 1;
 8015c46:	9b35      	ldr	r3, [sp, #212]	; 0xd4
            a.x1 = scale_center.x - indic->type_data.needle_img.pivot.x;
 8015c48:	ebac 0c01 	sub.w	ip, ip, r1
            a.y1 = scale_center.y - indic->type_data.needle_img.pivot.y;
 8015c4c:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
            a.x2 = a.x1 + info.w - 1;
 8015c50:	f3c3 238a 	ubfx	r3, r3, #10, #11
            a.y1 = scale_center.y - indic->type_data.needle_img.pivot.y;
 8015c54:	f8bd 00ba 	ldrh.w	r0, [sp, #186]	; 0xba
            a.x1 = scale_center.x - indic->type_data.needle_img.pivot.x;
 8015c58:	fa1f fc8c 	uxth.w	ip, ip
            a.x2 = a.x1 + info.w - 1;
 8015c5c:	3b01      	subs	r3, #1
            a.y1 = scale_center.y - indic->type_data.needle_img.pivot.y;
 8015c5e:	1a80      	subs	r0, r0, r2
            a.x1 = scale_center.x - indic->type_data.needle_img.pivot.x;
 8015c60:	f8ad c0f0 	strh.w	ip, [sp, #240]	; 0xf0
            a.x2 = a.x1 + info.w - 1;
 8015c64:	4463      	add	r3, ip
            a.y1 = scale_center.y - indic->type_data.needle_img.pivot.y;
 8015c66:	b280      	uxth	r0, r0
            a.x2 = a.x1 + info.w - 1;
 8015c68:	f8ad 30f4 	strh.w	r3, [sp, #244]	; 0xf4
            a.y2 = a.y1 + info.h - 1;
 8015c6c:	f8bd 30d6 	ldrh.w	r3, [sp, #214]	; 0xd6
            a.y1 = scale_center.y - indic->type_data.needle_img.pivot.y;
 8015c70:	f8ad 00f2 	strh.w	r0, [sp, #242]	; 0xf2
            a.y2 = a.y1 + info.h - 1;
 8015c74:	f3c3 134a 	ubfx	r3, r3, #5, #11
 8015c78:	3b01      	subs	r3, #1
 8015c7a:	4418      	add	r0, r3
 8015c7c:	f8ad 00f6 	strh.w	r0, [sp, #246]	; 0xf6
            img_dsc.opa = indic->opa > LV_OPA_MAX ? opa_main : (opa_main * indic->opa) >> 8;
 8015c80:	7963      	ldrb	r3, [r4, #5]
            img_dsc.pivot.x = indic->type_data.needle_img.pivot.x;
 8015c82:	f8ad 1134 	strh.w	r1, [sp, #308]	; 0x134
            lv_draw_img(&a, clip_area, indic->type_data.needle_img.src, &img_dsc);
 8015c86:	ee18 1a10 	vmov	r1, s16
            img_dsc.opa = indic->opa > LV_OPA_MAX ? opa_main : (opa_main * indic->opa) >> 8;
 8015c8a:	2bfd      	cmp	r3, #253	; 0xfd
            img_dsc.pivot.y = indic->type_data.needle_img.pivot.y;
 8015c8c:	f8ad 2136 	strh.w	r2, [sp, #310]	; 0x136
            img_dsc.opa = indic->opa > LV_OPA_MAX ? opa_main : (opa_main * indic->opa) >> 8;
 8015c90:	bf96      	itet	ls
 8015c92:	fa5f f088 	uxtbls.w	r0, r8
 8015c96:	464b      	movhi	r3, r9
 8015c98:	4343      	mulls	r3, r0
            lv_draw_img(&a, clip_area, indic->type_data.needle_img.src, &img_dsc);
 8015c9a:	a83c      	add	r0, sp, #240	; 0xf0
            img_dsc.opa = indic->opa > LV_OPA_MAX ? opa_main : (opa_main * indic->opa) >> 8;
 8015c9c:	bf98      	it	ls
 8015c9e:	0a1b      	lsrls	r3, r3, #8
 8015ca0:	f88d 313b 	strb.w	r3, [sp, #315]	; 0x13b
            angle = angle * 10;
 8015ca4:	230a      	movs	r3, #10
            lv_draw_img(&a, clip_area, indic->type_data.needle_img.src, &img_dsc);
 8015ca6:	6922      	ldr	r2, [r4, #16]
            angle = angle * 10;
 8015ca8:	435d      	muls	r5, r3
            lv_draw_img(&a, clip_area, indic->type_data.needle_img.src, &img_dsc);
 8015caa:	4653      	mov	r3, sl
            if(angle > 3600) angle -= 3600;
 8015cac:	f5b5 6f61 	cmp.w	r5, #3600	; 0xe10
 8015cb0:	bfc8      	it	gt
 8015cb2:	f5a5 6561 	subgt.w	r5, r5, #3600	; 0xe10
            img_dsc.angle = angle;
 8015cb6:	f8ad 5130 	strh.w	r5, [sp, #304]	; 0x130
            lv_draw_img(&a, clip_area, indic->type_data.needle_img.src, &img_dsc);
 8015cba:	f7f4 fb21 	bl	800a300 <lv_draw_img>
 8015cbe:	e7a3      	b.n	8015c08 <lv_meter_event+0x7bc>
 8015cc0:	08025128 	.word	0x08025128

08015cc4 <lv_spinbox_updatevalue>:
        }
    }
}

static void lv_spinbox_updatevalue(lv_obj_t * obj)
{
 8015cc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015cc8:	b08b      	sub	sp, #44	; 0x2c
 8015cca:	4604      	mov	r4, r0
    lv_spinbox_t * spinbox = (lv_spinbox_t *)obj;

    char buf[LV_SPINBOX_MAX_DIGIT_COUNT + 8];
    lv_memset_00(buf, sizeof(buf));
 8015ccc:	2112      	movs	r1, #18
 8015cce:	a805      	add	r0, sp, #20
 8015cd0:	f001 ff30 	bl	8017b34 <lv_memset_00>
    char * buf_p = buf;
    uint8_t cur_shift_left = 0;

    if(spinbox->range_min < 0) {  // hide sign if there are only positive values
 8015cd4:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8015cd6:	2b00      	cmp	r3, #0
 8015cd8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8015cda:	da53      	bge.n	8015d84 <lv_spinbox_updatevalue+0xc0>
        /*Add the sign*/
        (*buf_p) = spinbox->value >= 0 ? '+' : '-';
 8015cdc:	2b00      	cmp	r3, #0
    uint8_t cur_shift_left = 0;
 8015cde:	f04f 0500 	mov.w	r5, #0
        buf_p++;
 8015ce2:	f10d 0615 	add.w	r6, sp, #21
        (*buf_p) = spinbox->value >= 0 ? '+' : '-';
 8015ce6:	bfac      	ite	ge
 8015ce8:	222b      	movge	r2, #43	; 0x2b
 8015cea:	222d      	movlt	r2, #45	; 0x2d
 8015cec:	f88d 2014 	strb.w	r2, [sp, #20]
    }

    int32_t i;
    char digits[LV_SPINBOX_MAX_DIGIT_COUNT + 4];
    /*Convert the numbers to string (the sign is already handled so always covert positive number)*/
    lv_snprintf(digits, sizeof(digits), "%d", LV_ABS(spinbox->value));
 8015cf0:	2b00      	cmp	r3, #0
 8015cf2:	af01      	add	r7, sp, #4
 8015cf4:	f04f 010e 	mov.w	r1, #14
 8015cf8:	4a2e      	ldr	r2, [pc, #184]	; (8015db4 <lv_spinbox_updatevalue+0xf0>)
 8015cfa:	bfb8      	it	lt
 8015cfc:	425b      	neglt	r3, r3
 8015cfe:	4638      	mov	r0, r7
 8015d00:	f002 fb22 	bl	8018348 <lv_snprintf>

    /*Add leading zeros*/
    int lz_cnt = spinbox->digit_count - (int)strlen(digits);
 8015d04:	f894 8070 	ldrb.w	r8, [r4, #112]	; 0x70
 8015d08:	4638      	mov	r0, r7
 8015d0a:	f008 090f 	and.w	r9, r8, #15
 8015d0e:	f7ea fad9 	bl	80002c4 <strlen>
 8015d12:	eba9 0100 	sub.w	r1, r9, r0
    if(lz_cnt > 0) {
 8015d16:	2900      	cmp	r1, #0
 8015d18:	dd0d      	ble.n	8015d36 <lv_spinbox_updatevalue+0x72>
 8015d1a:	3001      	adds	r0, #1
 8015d1c:	183b      	adds	r3, r7, r0
        for(i = (uint16_t)strlen(digits); i >= 0; i--) {
            digits[i + lz_cnt] = digits[i];
 8015d1e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
        for(i = (uint16_t)strlen(digits); i >= 0; i--) {
 8015d22:	429f      	cmp	r7, r3
            digits[i + lz_cnt] = digits[i];
 8015d24:	545a      	strb	r2, [r3, r1]
        for(i = (uint16_t)strlen(digits); i >= 0; i--) {
 8015d26:	d1fa      	bne.n	8015d1e <lv_spinbox_updatevalue+0x5a>
        }
        for(i = 0; i < lz_cnt; i++) {
 8015d28:	2200      	movs	r2, #0
            digits[i] = '0';
 8015d2a:	2030      	movs	r0, #48	; 0x30
        for(i = 0; i < lz_cnt; i++) {
 8015d2c:	3201      	adds	r2, #1
            digits[i] = '0';
 8015d2e:	f803 0b01 	strb.w	r0, [r3], #1
        for(i = 0; i < lz_cnt; i++) {
 8015d32:	4291      	cmp	r1, r2
 8015d34:	d1fa      	bne.n	8015d2c <lv_spinbox_updatevalue+0x68>
        }
    }

    int32_t intDigits;
    intDigits = (spinbox->dec_point_pos == 0) ? spinbox->digit_count : spinbox->dec_point_pos;
 8015d36:	f018 00f0 	ands.w	r0, r8, #240	; 0xf0
 8015d3a:	4639      	mov	r1, r7

    /*Add the decimal part*/
    for(i = 0; i < intDigits && digits[i] != '\0'; i++) {
 8015d3c:	f04f 0300 	mov.w	r3, #0
    intDigits = (spinbox->dec_point_pos == 0) ? spinbox->digit_count : spinbox->dec_point_pos;
 8015d40:	bf14      	ite	ne
 8015d42:	ea4f 1818 	movne.w	r8, r8, lsr #4
 8015d46:	46c8      	moveq	r8, r9
    for(i = 0; i < intDigits && digits[i] != '\0'; i++) {
 8015d48:	4543      	cmp	r3, r8
 8015d4a:	d002      	beq.n	8015d52 <lv_spinbox_updatevalue+0x8e>
 8015d4c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015d50:	b9da      	cbnz	r2, 8015d8a <lv_spinbox_updatevalue+0xc6>
        (*buf_p) = digits[i];
        buf_p++;
    }

    if(spinbox->dec_point_pos != 0) {
 8015d52:	b9f0      	cbnz	r0, 8015d92 <lv_spinbox_updatevalue+0xce>
            buf_p++;
        }
    }

    /*Refresh the text*/
    lv_textarea_set_text(obj, (char *)buf);
 8015d54:	a905      	add	r1, sp, #20
 8015d56:	4620      	mov	r0, r4
 8015d58:	f00a f976 	bl	8020048 <lv_textarea_set_text>

    /*Set the cursor position*/
    int32_t step    = spinbox->step;
    uint8_t cur_pos = (uint8_t)spinbox->digit_count;
 8015d5c:	f894 1070 	ldrb.w	r1, [r4, #112]	; 0x70
    int32_t step    = spinbox->step;
 8015d60:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    while(step >= 10) {
        step /= 10;
 8015d62:	220a      	movs	r2, #10
    uint8_t cur_pos = (uint8_t)spinbox->digit_count;
 8015d64:	f001 010f 	and.w	r1, r1, #15
    while(step >= 10) {
 8015d68:	2b09      	cmp	r3, #9
 8015d6a:	dc1e      	bgt.n	8015daa <lv_spinbox_updatevalue+0xe6>
        cur_pos--;
    }

    if(cur_pos > intDigits) cur_pos++; /*Skip the decimal point*/
 8015d6c:	4541      	cmp	r1, r8

    cur_pos -= cur_shift_left;

    lv_textarea_set_cursor_pos(obj, cur_pos);
 8015d6e:	4620      	mov	r0, r4
    if(cur_pos > intDigits) cur_pos++; /*Skip the decimal point*/
 8015d70:	bfc4      	itt	gt
 8015d72:	3101      	addgt	r1, #1
 8015d74:	b2c9      	uxtbgt	r1, r1
    cur_pos -= cur_shift_left;
 8015d76:	1b49      	subs	r1, r1, r5
    lv_textarea_set_cursor_pos(obj, cur_pos);
 8015d78:	b2c9      	uxtb	r1, r1
 8015d7a:	f009 feb9 	bl	801faf0 <lv_textarea_set_cursor_pos>
}
 8015d7e:	b00b      	add	sp, #44	; 0x2c
 8015d80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        cur_shift_left++;
 8015d84:	2501      	movs	r5, #1
    char * buf_p = buf;
 8015d86:	ae05      	add	r6, sp, #20
 8015d88:	e7b2      	b.n	8015cf0 <lv_spinbox_updatevalue+0x2c>
    for(i = 0; i < intDigits && digits[i] != '\0'; i++) {
 8015d8a:	3301      	adds	r3, #1
        (*buf_p) = digits[i];
 8015d8c:	f806 2b01 	strb.w	r2, [r6], #1
    for(i = 0; i < intDigits && digits[i] != '\0'; i++) {
 8015d90:	e7da      	b.n	8015d48 <lv_spinbox_updatevalue+0x84>
        (*buf_p) = '.';
 8015d92:	222e      	movs	r2, #46	; 0x2e
 8015d94:	f806 2b01 	strb.w	r2, [r6], #1
        for(/*Leave i*/; i < spinbox->digit_count && digits[i] != '\0'; i++) {
 8015d98:	4599      	cmp	r9, r3
 8015d9a:	dddb      	ble.n	8015d54 <lv_spinbox_updatevalue+0x90>
 8015d9c:	5cfa      	ldrb	r2, [r7, r3]
 8015d9e:	2a00      	cmp	r2, #0
 8015da0:	d0d8      	beq.n	8015d54 <lv_spinbox_updatevalue+0x90>
 8015da2:	3301      	adds	r3, #1
            (*buf_p) = digits[i];
 8015da4:	f806 2b01 	strb.w	r2, [r6], #1
        for(/*Leave i*/; i < spinbox->digit_count && digits[i] != '\0'; i++) {
 8015da8:	e7f6      	b.n	8015d98 <lv_spinbox_updatevalue+0xd4>
        cur_pos--;
 8015daa:	3901      	subs	r1, #1
        step /= 10;
 8015dac:	fb93 f3f2 	sdiv	r3, r3, r2
        cur_pos--;
 8015db0:	b2c9      	uxtb	r1, r1
 8015db2:	e7d9      	b.n	8015d68 <lv_spinbox_updatevalue+0xa4>
 8015db4:	08025128 	.word	0x08025128

08015db8 <lv_spinbox_constructor>:
    spinbox->range_max          = 99999;
 8015db8:	2200      	movs	r2, #0
 8015dba:	4b11      	ldr	r3, [pc, #68]	; (8015e00 <lv_spinbox_constructor+0x48>)
{
 8015dbc:	b510      	push	{r4, lr}
 8015dbe:	460c      	mov	r4, r1
    spinbox->range_max          = 99999;
 8015dc0:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
    spinbox->step               = 1;
 8015dc4:	2101      	movs	r1, #1
 8015dc6:	4b0f      	ldr	r3, [pc, #60]	; (8015e04 <lv_spinbox_constructor+0x4c>)
    lv_textarea_set_one_line(obj, true);
 8015dc8:	4620      	mov	r0, r4
    spinbox->step               = 1;
 8015dca:	e9c4 311a 	strd	r3, r1, [r4, #104]	; 0x68
    spinbox->digit_count        = 5;
 8015dce:	f8b4 3070 	ldrh.w	r3, [r4, #112]	; 0x70
 8015dd2:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8015dd6:	f023 0301 	bic.w	r3, r3, #1
 8015dda:	f043 0305 	orr.w	r3, r3, #5
 8015dde:	f8a4 3070 	strh.w	r3, [r4, #112]	; 0x70
    lv_textarea_set_one_line(obj, true);
 8015de2:	f009 ff24 	bl	801fc2e <lv_textarea_set_one_line>
    lv_textarea_set_cursor_click_pos(obj, true);
 8015de6:	4620      	mov	r0, r4
 8015de8:	2101      	movs	r1, #1
 8015dea:	f009 ff19 	bl	801fc20 <lv_textarea_set_cursor_click_pos>
    lv_obj_set_width(obj, LV_DPI_DEF);
 8015dee:	4620      	mov	r0, r4
 8015df0:	2182      	movs	r1, #130	; 0x82
 8015df2:	f7ee feeb 	bl	8004bcc <lv_obj_set_width>
    lv_spinbox_updatevalue(obj);
 8015df6:	4620      	mov	r0, r4
}
 8015df8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_spinbox_updatevalue(obj);
 8015dfc:	f7ff bf62 	b.w	8015cc4 <lv_spinbox_updatevalue>
 8015e00:	0001869f 	.word	0x0001869f
 8015e04:	fffe7961 	.word	0xfffe7961

08015e08 <lv_spinbox_step_next>:
    int32_t new_step = spinbox->step / 10;
 8015e08:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    if((new_step) > 0)
 8015e0a:	2b09      	cmp	r3, #9
    int32_t new_step = spinbox->step / 10;
 8015e0c:	bfca      	itet	gt
 8015e0e:	220a      	movgt	r2, #10
        spinbox->step = 1;
 8015e10:	2301      	movle	r3, #1
    int32_t new_step = spinbox->step / 10;
 8015e12:	fb93 f3f2 	sdivgt	r3, r3, r2
 8015e16:	66c3      	str	r3, [r0, #108]	; 0x6c
    lv_spinbox_updatevalue(obj);
 8015e18:	f7ff bf54 	b.w	8015cc4 <lv_spinbox_updatevalue>

08015e1c <lv_spinbox_step_prev>:
    int32_t new_step = spinbox->step * 10;
 8015e1c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8015e1e:	220a      	movs	r2, #10
    step_limit       = LV_MAX(spinbox->range_max, (spinbox->range_min < 0 ? (-spinbox->range_min) : spinbox->range_min));
 8015e20:	6e41      	ldr	r1, [r0, #100]	; 0x64
    int32_t new_step = spinbox->step * 10;
 8015e22:	435a      	muls	r2, r3
    step_limit       = LV_MAX(spinbox->range_max, (spinbox->range_min < 0 ? (-spinbox->range_min) : spinbox->range_min));
 8015e24:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8015e26:	2b00      	cmp	r3, #0
 8015e28:	bfb8      	it	lt
 8015e2a:	425b      	neglt	r3, r3
 8015e2c:	428b      	cmp	r3, r1
 8015e2e:	bfb8      	it	lt
 8015e30:	460b      	movlt	r3, r1
    if(new_step <= step_limit) spinbox->step = new_step;
 8015e32:	4293      	cmp	r3, r2
 8015e34:	bfa8      	it	ge
 8015e36:	66c2      	strge	r2, [r0, #108]	; 0x6c
    lv_spinbox_updatevalue(obj);
 8015e38:	f7ff bf44 	b.w	8015cc4 <lv_spinbox_updatevalue>

08015e3c <lv_spinbox_increment>:
    if(spinbox->value + spinbox->step <= spinbox->range_max) {
 8015e3c:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8015e3e:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
 8015e40:	6e42      	ldr	r2, [r0, #100]	; 0x64
{
 8015e42:	b410      	push	{r4}
    if(spinbox->value + spinbox->step <= spinbox->range_max) {
 8015e44:	185c      	adds	r4, r3, r1
 8015e46:	4294      	cmp	r4, r2
 8015e48:	dc0c      	bgt.n	8015e64 <lv_spinbox_increment+0x28>
        if((spinbox->value + spinbox->step) > 0 && spinbox->value < 0) spinbox->value = -spinbox->value;
 8015e4a:	2c00      	cmp	r4, #0
 8015e4c:	dd03      	ble.n	8015e56 <lv_spinbox_increment+0x1a>
 8015e4e:	2b00      	cmp	r3, #0
 8015e50:	bfbc      	itt	lt
 8015e52:	425b      	neglt	r3, r3
 8015e54:	6603      	strlt	r3, [r0, #96]	; 0x60
        spinbox->value += spinbox->step;
 8015e56:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8015e58:	440b      	add	r3, r1
            spinbox->value = spinbox->range_min;
 8015e5a:	6603      	str	r3, [r0, #96]	; 0x60
}
 8015e5c:	f85d 4b04 	ldr.w	r4, [sp], #4
    lv_spinbox_updatevalue(obj);
 8015e60:	f7ff bf30 	b.w	8015cc4 <lv_spinbox_updatevalue>
        if((spinbox->rollover) && (spinbox->value == spinbox->range_max))
 8015e64:	f890 1071 	ldrb.w	r1, [r0, #113]	; 0x71
 8015e68:	07c9      	lsls	r1, r1, #31
 8015e6a:	d503      	bpl.n	8015e74 <lv_spinbox_increment+0x38>
 8015e6c:	4293      	cmp	r3, r2
 8015e6e:	d101      	bne.n	8015e74 <lv_spinbox_increment+0x38>
            spinbox->value = spinbox->range_min;
 8015e70:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8015e72:	e7f2      	b.n	8015e5a <lv_spinbox_increment+0x1e>
            spinbox->value = spinbox->range_max;
 8015e74:	6602      	str	r2, [r0, #96]	; 0x60
 8015e76:	e7f1      	b.n	8015e5c <lv_spinbox_increment+0x20>

08015e78 <lv_spinbox_decrement>:
    if(spinbox->value - spinbox->step >= spinbox->range_min) {
 8015e78:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8015e7a:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
 8015e7c:	6e82      	ldr	r2, [r0, #104]	; 0x68
{
 8015e7e:	b410      	push	{r4}
    if(spinbox->value - spinbox->step >= spinbox->range_min) {
 8015e80:	1a5c      	subs	r4, r3, r1
 8015e82:	4294      	cmp	r4, r2
 8015e84:	db0c      	blt.n	8015ea0 <lv_spinbox_decrement+0x28>
        if((spinbox->value - spinbox->step) < 0 && spinbox->value > 0) spinbox->value = -spinbox->value;
 8015e86:	2c00      	cmp	r4, #0
 8015e88:	da03      	bge.n	8015e92 <lv_spinbox_decrement+0x1a>
 8015e8a:	2b00      	cmp	r3, #0
 8015e8c:	bfc4      	itt	gt
 8015e8e:	425b      	neggt	r3, r3
 8015e90:	6603      	strgt	r3, [r0, #96]	; 0x60
        spinbox->value -= spinbox->step;
 8015e92:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8015e94:	1a5b      	subs	r3, r3, r1
            spinbox->value = spinbox->range_max;
 8015e96:	6603      	str	r3, [r0, #96]	; 0x60
}
 8015e98:	f85d 4b04 	ldr.w	r4, [sp], #4
    lv_spinbox_updatevalue(obj);
 8015e9c:	f7ff bf12 	b.w	8015cc4 <lv_spinbox_updatevalue>
        if((spinbox->rollover) && (spinbox->value == spinbox->range_min))
 8015ea0:	f890 1071 	ldrb.w	r1, [r0, #113]	; 0x71
 8015ea4:	07c9      	lsls	r1, r1, #31
 8015ea6:	d503      	bpl.n	8015eb0 <lv_spinbox_decrement+0x38>
 8015ea8:	4293      	cmp	r3, r2
 8015eaa:	d101      	bne.n	8015eb0 <lv_spinbox_decrement+0x38>
            spinbox->value = spinbox->range_max;
 8015eac:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8015eae:	e7f2      	b.n	8015e96 <lv_spinbox_decrement+0x1e>
            spinbox->value = spinbox->range_min;
 8015eb0:	6602      	str	r2, [r0, #96]	; 0x60
 8015eb2:	e7f1      	b.n	8015e98 <lv_spinbox_decrement+0x20>

08015eb4 <lv_spinbox_event>:
{
 8015eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    res = lv_obj_event_base(MY_CLASS, e);
 8015eb6:	484e      	ldr	r0, [pc, #312]	; (8015ff0 <lv_spinbox_event+0x13c>)
{
 8015eb8:	460d      	mov	r5, r1
    res = lv_obj_event_base(MY_CLASS, e);
 8015eba:	f7eb ff8d 	bl	8001dd8 <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 8015ebe:	2801      	cmp	r0, #1
    res = lv_obj_event_base(MY_CLASS, e);
 8015ec0:	4606      	mov	r6, r0
    if(res != LV_RES_OK) return;
 8015ec2:	d15c      	bne.n	8015f7e <lv_spinbox_event+0xca>
    lv_event_code_t code = lv_event_get_code(e);
 8015ec4:	4628      	mov	r0, r5
 8015ec6:	f7ec f821 	bl	8001f0c <lv_event_get_code>
 8015eca:	4607      	mov	r7, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8015ecc:	4628      	mov	r0, r5
 8015ece:	f7ec f81b 	bl	8001f08 <lv_event_get_target>
    if(code == LV_EVENT_RELEASED) {
 8015ed2:	2f08      	cmp	r7, #8
    lv_obj_t * obj = lv_event_get_target(e);
 8015ed4:	4604      	mov	r4, r0
    if(code == LV_EVENT_RELEASED) {
 8015ed6:	d167      	bne.n	8015fa8 <lv_spinbox_event+0xf4>
        lv_indev_t * indev = lv_indev_get_act();
 8015ed8:	f7ec fa8c 	bl	80023f4 <lv_indev_get_act>
        if(lv_indev_get_type(indev) == LV_INDEV_TYPE_ENCODER) {
 8015edc:	f7ec fa90 	bl	8002400 <lv_indev_get_type>
 8015ee0:	2804      	cmp	r0, #4
            if(lv_group_get_editing(lv_obj_get_group(obj))) {
 8015ee2:	4620      	mov	r0, r4
        if(lv_indev_get_type(indev) == LV_INDEV_TYPE_ENCODER) {
 8015ee4:	d123      	bne.n	8015f2e <lv_spinbox_event+0x7a>
            if(lv_group_get_editing(lv_obj_get_group(obj))) {
 8015ee6:	f7ed ff7b 	bl	8003de0 <lv_obj_get_group>
 8015eea:	f7ec fa0f 	bl	800230c <lv_group_get_editing>
 8015eee:	2800      	cmp	r0, #0
 8015ef0:	d045      	beq.n	8015f7e <lv_spinbox_event+0xca>
                if(spinbox->step > 1) {
 8015ef2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8015ef4:	2b01      	cmp	r3, #1
 8015ef6:	dd04      	ble.n	8015f02 <lv_spinbox_event+0x4e>
                    lv_spinbox_step_next(obj);
 8015ef8:	4620      	mov	r0, r4
}
 8015efa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
                lv_spinbox_step_next(obj);
 8015efe:	f7ff bf83 	b.w	8015e08 <lv_spinbox_step_next>
                    for(i = 0; i < spinbox->digit_count; i++) {
 8015f02:	f894 2070 	ldrb.w	r2, [r4, #112]	; 0x70
 8015f06:	2100      	movs	r1, #0
                        int32_t new_step = spinbox->step * 10;
 8015f08:	200a      	movs	r0, #10
                    spinbox->step = 1;
 8015f0a:	66e6      	str	r6, [r4, #108]	; 0x6c
                    for(i = 0; i < spinbox->digit_count; i++) {
 8015f0c:	f002 020f 	and.w	r2, r2, #15
 8015f10:	4291      	cmp	r1, r2
 8015f12:	d304      	bcc.n	8015f1e <lv_spinbox_event+0x6a>
                    lv_spinbox_step_prev(obj);
 8015f14:	4620      	mov	r0, r4
}
 8015f16:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
                lv_spinbox_step_prev(obj);
 8015f1a:	f7ff bf7f 	b.w	8015e1c <lv_spinbox_step_prev>
                        int32_t new_step = spinbox->step * 10;
 8015f1e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
                        if(new_step >= spinbox->range_max) break;
 8015f20:	6e65      	ldr	r5, [r4, #100]	; 0x64
                        int32_t new_step = spinbox->step * 10;
 8015f22:	4343      	muls	r3, r0
                        if(new_step >= spinbox->range_max) break;
 8015f24:	42ab      	cmp	r3, r5
 8015f26:	daf5      	bge.n	8015f14 <lv_spinbox_event+0x60>
                    for(i = 0; i < spinbox->digit_count; i++) {
 8015f28:	3101      	adds	r1, #1
                        spinbox->step = new_step;
 8015f2a:	66e3      	str	r3, [r4, #108]	; 0x6c
                    for(i = 0; i < spinbox->digit_count; i++) {
 8015f2c:	e7f0      	b.n	8015f10 <lv_spinbox_event+0x5c>
            const char * txt = lv_textarea_get_text(obj);
 8015f2e:	f009 feb1 	bl	801fc94 <lv_textarea_get_text>
            if(txt[spinbox->ta.cursor.pos] == '.') {
 8015f32:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8015f34:	5d43      	ldrb	r3, [r0, r5]
 8015f36:	2b2e      	cmp	r3, #46	; 0x2e
 8015f38:	d122      	bne.n	8015f80 <lv_spinbox_event+0xcc>
                lv_textarea_cursor_left(obj);
 8015f3a:	4620      	mov	r0, r4
 8015f3c:	f00a f90a 	bl	8020154 <lv_textarea_cursor_left>
            size_t len = spinbox->digit_count - 1;
 8015f40:	f894 1070 	ldrb.w	r1, [r4, #112]	; 0x70
            uint16_t cp = spinbox->ta.cursor.pos;
 8015f44:	6c20      	ldr	r0, [r4, #64]	; 0x40
            size_t len = spinbox->digit_count - 1;
 8015f46:	f001 030f 	and.w	r3, r1, #15
            if(spinbox->ta.cursor.pos > spinbox->dec_point_pos && spinbox->dec_point_pos != 0) cp--;
 8015f4a:	ebb0 1f11 	cmp.w	r0, r1, lsr #4
            size_t len = spinbox->digit_count - 1;
 8015f4e:	f103 33ff 	add.w	r3, r3, #4294967295
            uint16_t cp = spinbox->ta.cursor.pos;
 8015f52:	b282      	uxth	r2, r0
            if(spinbox->ta.cursor.pos > spinbox->dec_point_pos && spinbox->dec_point_pos != 0) cp--;
 8015f54:	d905      	bls.n	8015f62 <lv_spinbox_event+0xae>
 8015f56:	f011 0ff0 	tst.w	r1, #240	; 0xf0
 8015f5a:	bf1c      	itt	ne
 8015f5c:	f102 32ff 	addne.w	r2, r2, #4294967295
 8015f60:	b292      	uxthne	r2, r2
            uint32_t pos = len - cp;
 8015f62:	1a9b      	subs	r3, r3, r2
            if(spinbox->range_min < 0) pos++;
 8015f64:	6ea2      	ldr	r2, [r4, #104]	; 0x68
            for(i = 0; i < pos; i++) spinbox->step *= 10;
 8015f66:	200a      	movs	r0, #10
            if(spinbox->range_min < 0) pos++;
 8015f68:	2a00      	cmp	r2, #0
            spinbox->step = 1;
 8015f6a:	f04f 0201 	mov.w	r2, #1
            if(spinbox->range_min < 0) pos++;
 8015f6e:	bfb8      	it	lt
 8015f70:	3301      	addlt	r3, #1
            spinbox->step = 1;
 8015f72:	66e2      	str	r2, [r4, #108]	; 0x6c
            for(i = 0; i < pos; i++) spinbox->step *= 10;
 8015f74:	2200      	movs	r2, #0
 8015f76:	b291      	uxth	r1, r2
 8015f78:	3201      	adds	r2, #1
 8015f7a:	428b      	cmp	r3, r1
 8015f7c:	d810      	bhi.n	8015fa0 <lv_spinbox_event+0xec>
}
 8015f7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            size_t txt_len = strlen(txt);
 8015f80:	f7ea f9a0 	bl	80002c4 <strlen>
            else if(spinbox->ta.cursor.pos == (uint32_t)txt_len) {
 8015f84:	42a8      	cmp	r0, r5
 8015f86:	d104      	bne.n	8015f92 <lv_spinbox_event+0xde>
                lv_textarea_set_cursor_pos(obj, txt_len - 1);
 8015f88:	1e41      	subs	r1, r0, #1
                lv_textarea_set_cursor_pos(obj, 1);
 8015f8a:	4620      	mov	r0, r4
 8015f8c:	f009 fdb0 	bl	801faf0 <lv_textarea_set_cursor_pos>
 8015f90:	e7d6      	b.n	8015f40 <lv_spinbox_event+0x8c>
            else if(spinbox->ta.cursor.pos == 0 && spinbox->range_min < 0) {
 8015f92:	2d00      	cmp	r5, #0
 8015f94:	d1d4      	bne.n	8015f40 <lv_spinbox_event+0x8c>
 8015f96:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8015f98:	2b00      	cmp	r3, #0
 8015f9a:	dad1      	bge.n	8015f40 <lv_spinbox_event+0x8c>
                lv_textarea_set_cursor_pos(obj, 1);
 8015f9c:	4631      	mov	r1, r6
 8015f9e:	e7f4      	b.n	8015f8a <lv_spinbox_event+0xd6>
            for(i = 0; i < pos; i++) spinbox->step *= 10;
 8015fa0:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8015fa2:	4341      	muls	r1, r0
 8015fa4:	66e1      	str	r1, [r4, #108]	; 0x6c
 8015fa6:	e7e6      	b.n	8015f76 <lv_spinbox_event+0xc2>
    else if(code == LV_EVENT_KEY) {
 8015fa8:	2f0d      	cmp	r7, #13
 8015faa:	d1e8      	bne.n	8015f7e <lv_spinbox_event+0xca>
        lv_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
 8015fac:	f7ec fa22 	bl	80023f4 <lv_indev_get_act>
 8015fb0:	f7ec fa26 	bl	8002400 <lv_indev_get_type>
 8015fb4:	4606      	mov	r6, r0
        uint32_t c = *((uint32_t *)lv_event_get_param(e)); /*uint32_t because can be UTF-8*/
 8015fb6:	4628      	mov	r0, r5
 8015fb8:	f7eb ffaa 	bl	8001f10 <lv_event_get_param>
 8015fbc:	6801      	ldr	r1, [r0, #0]
                lv_spinbox_increment(obj);
 8015fbe:	4620      	mov	r0, r4
        if(c == LV_KEY_RIGHT) {
 8015fc0:	2913      	cmp	r1, #19
 8015fc2:	d105      	bne.n	8015fd0 <lv_spinbox_event+0x11c>
            if(indev_type == LV_INDEV_TYPE_ENCODER)
 8015fc4:	2e04      	cmp	r6, #4
 8015fc6:	d198      	bne.n	8015efa <lv_spinbox_event+0x46>
}
 8015fc8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            lv_spinbox_increment(obj);
 8015fcc:	f7ff bf36 	b.w	8015e3c <lv_spinbox_increment>
        else if(c == LV_KEY_LEFT) {
 8015fd0:	2914      	cmp	r1, #20
 8015fd2:	d105      	bne.n	8015fe0 <lv_spinbox_event+0x12c>
            if(indev_type == LV_INDEV_TYPE_ENCODER)
 8015fd4:	2e04      	cmp	r6, #4
 8015fd6:	d19e      	bne.n	8015f16 <lv_spinbox_event+0x62>
}
 8015fd8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            lv_spinbox_decrement(obj);
 8015fdc:	f7ff bf4c 	b.w	8015e78 <lv_spinbox_decrement>
        else if(c == LV_KEY_UP) {
 8015fe0:	2911      	cmp	r1, #17
 8015fe2:	d0f1      	beq.n	8015fc8 <lv_spinbox_event+0x114>
        else if(c == LV_KEY_DOWN) {
 8015fe4:	2912      	cmp	r1, #18
 8015fe6:	d0f7      	beq.n	8015fd8 <lv_spinbox_event+0x124>
}
 8015fe8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            lv_textarea_add_char(obj, c);
 8015fec:	f009 bf26 	b.w	801fe3c <lv_textarea_add_char>
 8015ff0:	08025690 	.word	0x08025690

08015ff4 <lv_tabview_destructor>:
{
    LV_UNUSED(class_p);
    lv_tabview_t * tabview = (lv_tabview_t *)obj;

    uint32_t i;
    if(tabview->tab_pos & LV_DIR_VER) {
 8015ff4:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 8015ff8:	f013 0f0c 	tst.w	r3, #12
{
 8015ffc:	b570      	push	{r4, r5, r6, lr}
 8015ffe:	460c      	mov	r4, r1
    if(tabview->tab_pos & LV_DIR_VER) {
 8016000:	d112      	bne.n	8016028 <lv_tabview_destructor+0x34>
            tabview->map[i] = NULL;
        }
    }


    lv_mem_free(tabview->map);
 8016002:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8016004:	f001 fb96 	bl	8017734 <lv_mem_free>
    tabview->map = NULL;
 8016008:	2300      	movs	r3, #0
 801600a:	6263      	str	r3, [r4, #36]	; 0x24
}
 801600c:	bd70      	pop	{r4, r5, r6, pc}
            lv_mem_free(tabview->map[i]);
 801600e:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8016012:	f001 fb8f 	bl	8017734 <lv_mem_free>
            tabview->map[i] = NULL;
 8016016:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016018:	f843 6025 	str.w	r6, [r3, r5, lsl #2]
        for(i = 0; i < tabview->tab_cnt; i++) {
 801601c:	3501      	adds	r5, #1
 801601e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8016020:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8016022:	42ab      	cmp	r3, r5
 8016024:	d8f3      	bhi.n	801600e <lv_tabview_destructor+0x1a>
 8016026:	e7ec      	b.n	8016002 <lv_tabview_destructor+0xe>
 8016028:	2500      	movs	r5, #0
            tabview->map[i] = NULL;
 801602a:	462e      	mov	r6, r5
 801602c:	e7f7      	b.n	801601e <lv_tabview_destructor+0x2a>
	...

08016030 <lv_tabview_constructor>:
    tabview->tab_pos = tabpos_create;
 8016030:	4b46      	ldr	r3, [pc, #280]	; (801614c <lv_tabview_constructor+0x11c>)
{
 8016032:	b570      	push	{r4, r5, r6, lr}
    tabview->tab_pos = tabpos_create;
 8016034:	781b      	ldrb	r3, [r3, #0]
{
 8016036:	460d      	mov	r5, r1
    tabview->tab_pos = tabpos_create;
 8016038:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c
    switch(tabview->tab_pos) {
 801603c:	3b01      	subs	r3, #1
 801603e:	2b07      	cmp	r3, #7
 8016040:	d809      	bhi.n	8016056 <lv_tabview_constructor+0x26>
 8016042:	e8df f003 	tbb	[pc, r3]
 8016046:	5e5c      	.short	0x5e5c
 8016048:	08080408 	.word	0x08080408
 801604c:	5a08      	.short	0x5a08
        lv_obj_set_flex_flow(obj, LV_FLEX_FLOW_COLUMN);
 801604e:	2101      	movs	r1, #1
        lv_obj_set_flex_flow(obj, LV_FLEX_FLOW_ROW_REVERSE);
 8016050:	4628      	mov	r0, r5
 8016052:	f7f9 fe8d 	bl	800fd70 <lv_obj_set_flex_flow>
    lv_obj_set_size(obj, LV_PCT(100), LV_PCT(100));
 8016056:	f242 0264 	movw	r2, #8292	; 0x2064
 801605a:	4628      	mov	r0, r5
 801605c:	4611      	mov	r1, r2
 801605e:	f7ee fde9 	bl	8004c34 <lv_obj_set_size>
    btnm = lv_btnmatrix_create(obj);
 8016062:	4628      	mov	r0, r5
 8016064:	f005 f9f6 	bl	801b454 <lv_btnmatrix_create>
 8016068:	4606      	mov	r6, r0
    cont = lv_obj_create(obj);
 801606a:	4628      	mov	r0, r5
 801606c:	f7ed fe40 	bl	8003cf0 <lv_obj_create>
    lv_btnmatrix_set_one_checked(btnm, true);
 8016070:	2101      	movs	r1, #1
    cont = lv_obj_create(obj);
 8016072:	4604      	mov	r4, r0
    lv_btnmatrix_set_one_checked(btnm, true);
 8016074:	4630      	mov	r0, r6
 8016076:	f005 fccf 	bl	801ba18 <lv_btnmatrix_set_one_checked>
    tabview->map = lv_mem_alloc(sizeof(const char *));
 801607a:	2004      	movs	r0, #4
 801607c:	f001 fcdc 	bl	8017a38 <lv_mem_alloc>
    tabview->map[0] = "";
 8016080:	4b33      	ldr	r3, [pc, #204]	; (8016150 <lv_tabview_constructor+0x120>)
    tabview->map = lv_mem_alloc(sizeof(const char *));
 8016082:	4601      	mov	r1, r0
 8016084:	6268      	str	r0, [r5, #36]	; 0x24
    tabview->map[0] = "";
 8016086:	6003      	str	r3, [r0, #0]
    lv_btnmatrix_set_map(btnm, (const char **)tabview->map);
 8016088:	4630      	mov	r0, r6
 801608a:	f005 f9ef 	bl	801b46c <lv_btnmatrix_set_map>
    lv_obj_add_event_cb(btnm, btns_value_changed_event_cb, LV_EVENT_VALUE_CHANGED, NULL);
 801608e:	2300      	movs	r3, #0
 8016090:	221c      	movs	r2, #28
 8016092:	4930      	ldr	r1, [pc, #192]	; (8016154 <lv_tabview_constructor+0x124>)
 8016094:	4630      	mov	r0, r6
 8016096:	f7eb ff4f 	bl	8001f38 <lv_obj_add_event_cb>
    lv_obj_add_flag(btnm, LV_OBJ_FLAG_EVENT_BUBBLE);
 801609a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 801609e:	4630      	mov	r0, r6
 80160a0:	f7ed fe32 	bl	8003d08 <lv_obj_add_flag>
    lv_obj_add_event_cb(cont, cont_scroll_end_event_cb, LV_EVENT_ALL, NULL);
 80160a4:	2300      	movs	r3, #0
 80160a6:	492c      	ldr	r1, [pc, #176]	; (8016158 <lv_tabview_constructor+0x128>)
 80160a8:	4620      	mov	r0, r4
 80160aa:	461a      	mov	r2, r3
 80160ac:	f7eb ff44 	bl	8001f38 <lv_obj_add_event_cb>
    lv_obj_set_scrollbar_mode(cont, LV_SCROLLBAR_MODE_OFF);
 80160b0:	2100      	movs	r1, #0
 80160b2:	4620      	mov	r0, r4
 80160b4:	f7ef feb5 	bl	8005e22 <lv_obj_set_scrollbar_mode>
    switch(tabview->tab_pos) {
 80160b8:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 80160bc:	2b04      	cmp	r3, #4
 80160be:	d024      	beq.n	801610a <lv_tabview_constructor+0xda>
 80160c0:	d821      	bhi.n	8016106 <lv_tabview_constructor+0xd6>
 80160c2:	3b01      	subs	r3, #1
 80160c4:	2b01      	cmp	r3, #1
 80160c6:	d932      	bls.n	801612e <lv_tabview_constructor+0xfe>
    lv_group_t * g = lv_group_get_default();
 80160c8:	f7eb fffa 	bl	80020c0 <lv_group_get_default>
    if(g) lv_group_add_obj(g, btnm);
 80160cc:	b110      	cbz	r0, 80160d4 <lv_tabview_constructor+0xa4>
 80160ce:	4631      	mov	r1, r6
 80160d0:	f7ec f828 	bl	8002124 <lv_group_add_obj>
    lv_obj_set_flex_flow(cont, LV_FLEX_FLOW_ROW);
 80160d4:	4620      	mov	r0, r4
 80160d6:	2100      	movs	r1, #0
 80160d8:	f7f9 fe4a 	bl	800fd70 <lv_obj_set_flex_flow>
    lv_obj_set_scroll_snap_x(cont, LV_SCROLL_SNAP_CENTER);
 80160dc:	4620      	mov	r0, r4
 80160de:	2103      	movs	r1, #3
 80160e0:	f7ef fec2 	bl	8005e68 <lv_obj_set_scroll_snap_x>
    lv_obj_add_flag(cont, LV_OBJ_FLAG_SCROLL_ONE);
 80160e4:	4620      	mov	r0, r4
 80160e6:	2180      	movs	r1, #128	; 0x80
 80160e8:	f7ed fe0e 	bl	8003d08 <lv_obj_add_flag>
    lv_obj_clear_flag(cont, LV_OBJ_FLAG_SCROLL_ON_FOCUS);
 80160ec:	4620      	mov	r0, r4
 80160ee:	f44f 7100 	mov.w	r1, #512	; 0x200
}
 80160f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_obj_clear_flag(cont, LV_OBJ_FLAG_SCROLL_ON_FOCUS);
 80160f6:	f7ed be2a 	b.w	8003d4e <lv_obj_clear_flag>
        lv_obj_set_flex_flow(obj, LV_FLEX_FLOW_COLUMN_REVERSE);
 80160fa:	2109      	movs	r1, #9
 80160fc:	e7a8      	b.n	8016050 <lv_tabview_constructor+0x20>
        lv_obj_set_flex_flow(obj, LV_FLEX_FLOW_ROW);
 80160fe:	2100      	movs	r1, #0
 8016100:	e7a6      	b.n	8016050 <lv_tabview_constructor+0x20>
        lv_obj_set_flex_flow(obj, LV_FLEX_FLOW_ROW_REVERSE);
 8016102:	2108      	movs	r1, #8
 8016104:	e7a4      	b.n	8016050 <lv_tabview_constructor+0x20>
    switch(tabview->tab_pos) {
 8016106:	2b08      	cmp	r3, #8
 8016108:	d1de      	bne.n	80160c8 <lv_tabview_constructor+0x98>
         lv_obj_set_size(btnm, LV_PCT(100), tabsize_create);
 801610a:	4b14      	ldr	r3, [pc, #80]	; (801615c <lv_tabview_constructor+0x12c>)
 801610c:	f242 0164 	movw	r1, #8292	; 0x2064
 8016110:	4630      	mov	r0, r6
 8016112:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016116:	f7ee fd8d 	bl	8004c34 <lv_obj_set_size>
         lv_obj_set_width(cont, LV_PCT(100));
 801611a:	f242 0164 	movw	r1, #8292	; 0x2064
 801611e:	4620      	mov	r0, r4
 8016120:	f7ee fd54 	bl	8004bcc <lv_obj_set_width>
         lv_obj_set_flex_grow(cont, 1);
 8016124:	2101      	movs	r1, #1
 8016126:	4620      	mov	r0, r4
 8016128:	f7f9 fe62 	bl	800fdf0 <lv_obj_set_flex_grow>
         break;
 801612c:	e7cc      	b.n	80160c8 <lv_tabview_constructor+0x98>
         lv_obj_set_size(btnm, tabsize_create, LV_PCT(100));
 801612e:	4b0b      	ldr	r3, [pc, #44]	; (801615c <lv_tabview_constructor+0x12c>)
 8016130:	4630      	mov	r0, r6
 8016132:	f242 0264 	movw	r2, #8292	; 0x2064
 8016136:	f9b3 1000 	ldrsh.w	r1, [r3]
 801613a:	f7ee fd7b 	bl	8004c34 <lv_obj_set_size>
         lv_obj_set_height(cont, LV_PCT(100));
 801613e:	f242 0164 	movw	r1, #8292	; 0x2064
 8016142:	4620      	mov	r0, r4
 8016144:	f7ee fd5c 	bl	8004c00 <lv_obj_set_height>
 8016148:	e7ec      	b.n	8016124 <lv_tabview_constructor+0xf4>
 801614a:	bf00      	nop
 801614c:	20002b3e 	.word	0x20002b3e
 8016150:	0802964b 	.word	0x0802964b
 8016154:	080162ab 	.word	0x080162ab
 8016158:	08016221 	.word	0x08016221
 801615c:	20002b40 	.word	0x20002b40

08016160 <lv_tabview_get_content>:
    return lv_obj_get_child(tv, 1);
 8016160:	2101      	movs	r1, #1
 8016162:	f7f1 bc4e 	b.w	8007a02 <lv_obj_get_child>

08016166 <lv_tabview_get_tab_btns>:
    return lv_obj_get_child(tv, 0);
 8016166:	2100      	movs	r1, #0
 8016168:	f7f1 bc4b 	b.w	8007a02 <lv_obj_get_child>

0801616c <lv_tabview_set_act>:
    if(id >= tabview->tab_cnt) {
 801616c:	8d03      	ldrh	r3, [r0, #40]	; 0x28
{
 801616e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if(id >= tabview->tab_cnt) {
 8016172:	428b      	cmp	r3, r1
{
 8016174:	4605      	mov	r5, r0
 8016176:	4689      	mov	r9, r1
 8016178:	4617      	mov	r7, r2
        id = tabview->tab_cnt - 1;
 801617a:	bf98      	it	ls
 801617c:	f103 39ff 	addls.w	r9, r3, #4294967295
    lv_obj_update_layout(obj);
 8016180:	f7ef fc32 	bl	80059e8 <lv_obj_update_layout>
    lv_obj_t * cont = lv_tabview_get_content(obj);
 8016184:	4628      	mov	r0, r5
 8016186:	f7ff ffeb 	bl	8016160 <lv_tabview_get_content>
    if(cont == NULL) return;
 801618a:	4606      	mov	r6, r0
 801618c:	b358      	cbz	r0, 80161e6 <lv_tabview_set_act+0x7a>
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_pad_column(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 801618e:	f241 0215 	movw	r2, #4117	; 0x1015
 8016192:	2100      	movs	r1, #0
 8016194:	f7f1 f8e8 	bl	8007368 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8016198:	fa0f fa80 	sxth.w	sl, r0
    lv_coord_t w = lv_obj_get_content_width(obj);
 801619c:	4628      	mov	r0, r5
 801619e:	f7ee fe72 	bl	8004e86 <lv_obj_get_content_width>
    return (uint16_t)v.num;
}

static inline lv_base_dir_t lv_obj_get_style_base_dir(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 80161a2:	2100      	movs	r1, #0
 80161a4:	4604      	mov	r4, r0
 80161a6:	f241 426a 	movw	r2, #5226	; 0x146a
 80161aa:	4628      	mov	r0, r5
 80161ac:	fa1f f889 	uxth.w	r8, r9
 80161b0:	f7f1 f8da 	bl	8007368 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 80161b4:	eb04 030a 	add.w	r3, r4, sl
 80161b8:	b2c0      	uxtb	r0, r0
        lv_obj_scroll_to_x(cont, (gap + w) * id_rtl, anim_en);
 80161ba:	463a      	mov	r2, r7
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) != LV_BASE_DIR_RTL) {
 80161bc:	2801      	cmp	r0, #1
        lv_obj_scroll_to_x(cont, (gap + w) * id_rtl, anim_en);
 80161be:	4630      	mov	r0, r6
        lv_obj_scroll_to_x(cont, id * (gap + w), anim_en);
 80161c0:	bf12      	itee	ne
 80161c2:	fb13 f108 	smulbbne	r1, r3, r8
        int32_t id_rtl = -(int32_t)id;
 80161c6:	f1c9 0100 	rsbeq	r1, r9, #0
        lv_obj_scroll_to_x(cont, (gap + w) * id_rtl, anim_en);
 80161ca:	fb13 f101 	smulbbeq	r1, r3, r1
 80161ce:	b209      	sxth	r1, r1
 80161d0:	f7f0 f9a2 	bl	8006518 <lv_obj_scroll_to_x>
    lv_obj_t * btns = lv_tabview_get_tab_btns(obj);
 80161d4:	4628      	mov	r0, r5
 80161d6:	f7ff ffc6 	bl	8016166 <lv_tabview_get_tab_btns>
    lv_btnmatrix_set_btn_ctrl(btns, id, LV_BTNMATRIX_CTRL_CHECKED);
 80161da:	2280      	movs	r2, #128	; 0x80
 80161dc:	4641      	mov	r1, r8
 80161de:	f005 f975 	bl	801b4cc <lv_btnmatrix_set_btn_ctrl>
    tabview->tab_cur = id;
 80161e2:	f8a5 802a 	strh.w	r8, [r5, #42]	; 0x2a
}
 80161e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

080161ec <lv_tabview_event>:

static void lv_tabview_event(const lv_obj_class_t * class_p, lv_event_t * e)
{
 80161ec:	b538      	push	{r3, r4, r5, lr}
    LV_UNUSED(class_p);
    lv_res_t res = lv_obj_event_base(&lv_tabview_class, e);
 80161ee:	480b      	ldr	r0, [pc, #44]	; (801621c <lv_tabview_event+0x30>)
{
 80161f0:	460c      	mov	r4, r1
    lv_res_t res = lv_obj_event_base(&lv_tabview_class, e);
 80161f2:	f7eb fdf1 	bl	8001dd8 <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 80161f6:	2801      	cmp	r0, #1
 80161f8:	d10e      	bne.n	8016218 <lv_tabview_event+0x2c>

    lv_event_code_t code = lv_event_get_code(e);
 80161fa:	4620      	mov	r0, r4
 80161fc:	f7eb fe86 	bl	8001f0c <lv_event_get_code>
 8016200:	4605      	mov	r5, r0
    lv_obj_t * target = lv_event_get_target(e);
 8016202:	4620      	mov	r0, r4
 8016204:	f7eb fe80 	bl	8001f08 <lv_event_get_target>

    if(code == LV_EVENT_SIZE_CHANGED) {
 8016208:	2d23      	cmp	r5, #35	; 0x23
 801620a:	d105      	bne.n	8016218 <lv_tabview_event+0x2c>
        lv_tabview_set_act(target, lv_tabview_get_tab_act(target), LV_ANIM_OFF);
 801620c:	2200      	movs	r2, #0
 801620e:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
    }
}
 8016210:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        lv_tabview_set_act(target, lv_tabview_get_tab_act(target), LV_ANIM_OFF);
 8016214:	f7ff bfaa 	b.w	801616c <lv_tabview_set_act>
}
 8016218:	bd38      	pop	{r3, r4, r5, pc}
 801621a:	bf00      	nop
 801621c:	080256ac 	.word	0x080256ac

08016220 <cont_scroll_end_event_cb>:

    lv_event_send(tv, LV_EVENT_VALUE_CHANGED, NULL);
}

static void cont_scroll_end_event_cb(lv_event_t * e)
{
 8016220:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016222:	4604      	mov	r4, r0
    lv_obj_t * cont = lv_event_get_target(e);
 8016224:	f7eb fe70 	bl	8001f08 <lv_event_get_target>
 8016228:	4605      	mov	r5, r0
    lv_event_code_t code = lv_event_get_code(e);
 801622a:	4620      	mov	r0, r4
 801622c:	f7eb fe6e 	bl	8001f0c <lv_event_get_code>
 8016230:	4606      	mov	r6, r0

    lv_obj_t * tv = lv_obj_get_parent(cont);
 8016232:	4628      	mov	r0, r5
 8016234:	f7f1 fbe2 	bl	80079fc <lv_obj_get_parent>
    if(code == LV_EVENT_LAYOUT_CHANGED) {
 8016238:	2e25      	cmp	r6, #37	; 0x25
    lv_obj_t * tv = lv_obj_get_parent(cont);
 801623a:	4604      	mov	r4, r0
    if(code == LV_EVENT_LAYOUT_CHANGED) {
 801623c:	d105      	bne.n	801624a <cont_scroll_end_event_cb+0x2a>
        lv_tabview_set_act(tv, lv_tabview_get_tab_act(tv), LV_ANIM_OFF);
 801623e:	2200      	movs	r2, #0
 8016240:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
 8016242:	f7ff ff93 	bl	801616c <lv_tabview_set_act>

        if(t < 0) t = 0;
        lv_tabview_set_act(tv, t, LV_ANIM_ON);
        lv_event_send(tv, LV_EVENT_VALUE_CHANGED, NULL);
    }
}
 8016246:	b002      	add	sp, #8
 8016248:	bd70      	pop	{r4, r5, r6, pc}
    else if(code == LV_EVENT_SCROLL_END) {
 801624a:	2e0a      	cmp	r6, #10
 801624c:	d1fb      	bne.n	8016246 <cont_scroll_end_event_cb+0x26>
        lv_obj_get_scroll_end(cont, &p);
 801624e:	a901      	add	r1, sp, #4
 8016250:	4628      	mov	r0, r5
 8016252:	f7ef ff83 	bl	800615c <lv_obj_get_scroll_end>
        lv_coord_t w = lv_obj_get_content_width(cont);
 8016256:	4628      	mov	r0, r5
 8016258:	f7ee fe15 	bl	8004e86 <lv_obj_get_content_width>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 801625c:	f241 426a 	movw	r2, #5226	; 0x146a
 8016260:	4606      	mov	r6, r0
 8016262:	2100      	movs	r1, #0
 8016264:	4620      	mov	r0, r4
 8016266:	f7f1 f87f 	bl	8007368 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 801626a:	f9bd 5004 	ldrsh.w	r5, [sp, #4]
 801626e:	b2c0      	uxtb	r0, r0
        if(lv_obj_get_style_base_dir(tv, LV_PART_MAIN) == LV_BASE_DIR_RTL)  t = -(p.x - w/ 2) / w;
 8016270:	0ff3      	lsrs	r3, r6, #31
 8016272:	2801      	cmp	r0, #1
        lv_tabview_set_act(tv, t, LV_ANIM_ON);
 8016274:	4620      	mov	r0, r4
        if(lv_obj_get_style_base_dir(tv, LV_PART_MAIN) == LV_BASE_DIR_RTL)  t = -(p.x - w/ 2) / w;
 8016276:	bf0b      	itete	eq
 8016278:	199a      	addeq	r2, r3, r6
        else t = (p.x + w/ 2) / w;
 801627a:	199b      	addne	r3, r3, r6
        if(lv_obj_get_style_base_dir(tv, LV_PART_MAIN) == LV_BASE_DIR_RTL)  t = -(p.x - w/ 2) / w;
 801627c:	f342 024f 	sbfxeq	r2, r2, #1, #16
        else t = (p.x + w/ 2) / w;
 8016280:	f343 034f 	sbfxne	r3, r3, #1, #16
        if(lv_obj_get_style_base_dir(tv, LV_PART_MAIN) == LV_BASE_DIR_RTL)  t = -(p.x - w/ 2) / w;
 8016284:	bf0b      	itete	eq
 8016286:	1b52      	subeq	r2, r2, r5
        else t = (p.x + w/ 2) / w;
 8016288:	18e9      	addne	r1, r5, r3
        if(lv_obj_get_style_base_dir(tv, LV_PART_MAIN) == LV_BASE_DIR_RTL)  t = -(p.x - w/ 2) / w;
 801628a:	fb92 f1f6 	sdiveq	r1, r2, r6
        else t = (p.x + w/ 2) / w;
 801628e:	fb91 f1f6 	sdivne	r1, r1, r6
 8016292:	b209      	sxth	r1, r1
        lv_tabview_set_act(tv, t, LV_ANIM_ON);
 8016294:	2201      	movs	r2, #1
 8016296:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 801629a:	f7ff ff67 	bl	801616c <lv_tabview_set_act>
        lv_event_send(tv, LV_EVENT_VALUE_CHANGED, NULL);
 801629e:	2200      	movs	r2, #0
 80162a0:	211c      	movs	r1, #28
 80162a2:	4620      	mov	r0, r4
 80162a4:	f7eb fe10 	bl	8001ec8 <lv_event_send>
}
 80162a8:	e7cd      	b.n	8016246 <cont_scroll_end_event_cb+0x26>

080162aa <btns_value_changed_event_cb>:
{
 80162aa:	b538      	push	{r3, r4, r5, lr}
    lv_obj_t * btns = lv_event_get_target(e);
 80162ac:	f7eb fe2c 	bl	8001f08 <lv_event_get_target>
 80162b0:	4605      	mov	r5, r0
    lv_obj_t * tv = lv_obj_get_parent(btns);
 80162b2:	f7f1 fba3 	bl	80079fc <lv_obj_get_parent>
 80162b6:	4604      	mov	r4, r0
    uint32_t id = lv_btnmatrix_get_selected_btn(btns);
 80162b8:	4628      	mov	r0, r5
 80162ba:	f005 f933 	bl	801b524 <lv_btnmatrix_get_selected_btn>
    lv_tabview_set_act(tv, id, LV_ANIM_ON);
 80162be:	2201      	movs	r2, #1
    uint32_t id = lv_btnmatrix_get_selected_btn(btns);
 80162c0:	4601      	mov	r1, r0
    lv_tabview_set_act(tv, id, LV_ANIM_ON);
 80162c2:	4620      	mov	r0, r4
 80162c4:	f7ff ff52 	bl	801616c <lv_tabview_set_act>
    lv_event_send(tv, LV_EVENT_VALUE_CHANGED, NULL);
 80162c8:	4620      	mov	r0, r4
 80162ca:	2200      	movs	r2, #0
 80162cc:	211c      	movs	r1, #28
}
 80162ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_event_send(tv, LV_EVENT_VALUE_CHANGED, NULL);
 80162d2:	f7eb bdf9 	b.w	8001ec8 <lv_event_send>
	...

080162d8 <lv_tileview_constructor>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void lv_tileview_constructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 80162d8:	b510      	push	{r4, lr}
    LV_UNUSED(class_p);
    lv_obj_set_size(obj, LV_PCT(100), LV_PCT(100));
 80162da:	f242 0264 	movw	r2, #8292	; 0x2064
{
 80162de:	460c      	mov	r4, r1
    lv_obj_set_size(obj, LV_PCT(100), LV_PCT(100));
 80162e0:	4611      	mov	r1, r2
 80162e2:	4620      	mov	r0, r4
 80162e4:	f7ee fca6 	bl	8004c34 <lv_obj_set_size>
    lv_obj_add_event_cb(obj, tileview_event_cb, LV_EVENT_ALL, NULL);
 80162e8:	2300      	movs	r3, #0
 80162ea:	4909      	ldr	r1, [pc, #36]	; (8016310 <lv_tileview_constructor+0x38>)
 80162ec:	4620      	mov	r0, r4
 80162ee:	461a      	mov	r2, r3
 80162f0:	f7eb fe22 	bl	8001f38 <lv_obj_add_event_cb>
    lv_obj_add_flag(obj, LV_OBJ_FLAG_SCROLL_ONE);
 80162f4:	4620      	mov	r0, r4
 80162f6:	2180      	movs	r1, #128	; 0x80
 80162f8:	f7ed fd06 	bl	8003d08 <lv_obj_add_flag>
    lv_obj_set_scroll_snap_x(obj, LV_SCROLL_SNAP_CENTER);
 80162fc:	4620      	mov	r0, r4
 80162fe:	2103      	movs	r1, #3
 8016300:	f7ef fdb2 	bl	8005e68 <lv_obj_set_scroll_snap_x>
    lv_obj_set_scroll_snap_y(obj, LV_SCROLL_SNAP_CENTER);
 8016304:	4620      	mov	r0, r4
 8016306:	2103      	movs	r1, #3

}
 8016308:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_obj_set_scroll_snap_y(obj, LV_SCROLL_SNAP_CENTER);
 801630c:	f7ef bdb7 	b.w	8005e7e <lv_obj_set_scroll_snap_y>
 8016310:	08016315 	.word	0x08016315

08016314 <tileview_event_cb>:
        lv_obj_set_scroll_dir(parent, create_dir);
    }
}

static void tileview_event_cb(lv_event_t * e)
{
 8016314:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016318:	4604      	mov	r4, r0
    lv_event_code_t code = lv_event_get_code(e);
 801631a:	f7eb fdf7 	bl	8001f0c <lv_event_get_code>
 801631e:	4605      	mov	r5, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8016320:	4620      	mov	r0, r4
 8016322:	f7eb fdf1 	bl	8001f08 <lv_event_get_target>
    lv_tileview_t * tv = (lv_tileview_t *) obj;

    if(code == LV_EVENT_SCROLL_END) {
 8016326:	2d0a      	cmp	r5, #10
    lv_obj_t * obj = lv_event_get_target(e);
 8016328:	4604      	mov	r4, r0
    if(code == LV_EVENT_SCROLL_END) {
 801632a:	d146      	bne.n	80163ba <tileview_event_cb+0xa6>
        lv_coord_t w = lv_obj_get_content_width(obj);
 801632c:	f7ee fdab 	bl	8004e86 <lv_obj_get_content_width>
 8016330:	4605      	mov	r5, r0
        lv_coord_t h = lv_obj_get_content_height(obj);
 8016332:	4620      	mov	r0, r4
        lv_coord_t tx = ((left + (w / 2)) / w) * w;
        lv_coord_t ty = ((top + (h / 2)) / h) * h;

        lv_dir_t dir = LV_DIR_ALL;
        uint32_t i;
        for(i = 0; i < lv_obj_get_child_cnt(obj); i++) {
 8016334:	f04f 0800 	mov.w	r8, #0
        lv_coord_t h = lv_obj_get_content_height(obj);
 8016338:	f7ee fdbf 	bl	8004eba <lv_obj_get_content_height>
        lv_obj_get_scroll_end(obj, &scroll_end);
 801633c:	a901      	add	r1, sp, #4
        lv_coord_t h = lv_obj_get_content_height(obj);
 801633e:	4606      	mov	r6, r0
        lv_obj_get_scroll_end(obj, &scroll_end);
 8016340:	4620      	mov	r0, r4
 8016342:	f7ef ff0b 	bl	800615c <lv_obj_get_scroll_end>
        lv_coord_t tx = ((left + (w / 2)) / w) * w;
 8016346:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801634a:	eb05 72d5 	add.w	r2, r5, r5, lsr #31
 801634e:	f342 024f 	sbfx	r2, r2, #1, #16
 8016352:	4413      	add	r3, r2
        lv_coord_t ty = ((top + (h / 2)) / h) * h;
 8016354:	eb06 72d6 	add.w	r2, r6, r6, lsr #31
        lv_coord_t tx = ((left + (w / 2)) / w) * w;
 8016358:	fb93 f3f5 	sdiv	r3, r3, r5
 801635c:	fb13 f505 	smulbb	r5, r3, r5
        lv_coord_t ty = ((top + (h / 2)) / h) * h;
 8016360:	f342 024f 	sbfx	r2, r2, #1, #16
 8016364:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
        lv_coord_t tx = ((left + (w / 2)) / w) * w;
 8016368:	b22d      	sxth	r5, r5
        lv_coord_t ty = ((top + (h / 2)) / h) * h;
 801636a:	4413      	add	r3, r2
 801636c:	fb93 f3f6 	sdiv	r3, r3, r6
 8016370:	fb13 f606 	smulbb	r6, r3, r6
 8016374:	b236      	sxth	r6, r6
        for(i = 0; i < lv_obj_get_child_cnt(obj); i++) {
 8016376:	4620      	mov	r0, r4
 8016378:	f7f1 fb52 	bl	8007a20 <lv_obj_get_child_cnt>
 801637c:	4540      	cmp	r0, r8
 801637e:	d801      	bhi.n	8016384 <tileview_event_cb+0x70>
        lv_dir_t dir = LV_DIR_ALL;
 8016380:	250f      	movs	r5, #15
 8016382:	e016      	b.n	80163b2 <tileview_event_cb+0x9e>
            lv_obj_t * tile_obj = lv_obj_get_child(obj, i);
 8016384:	4641      	mov	r1, r8
 8016386:	4620      	mov	r0, r4
 8016388:	f7f1 fb3b 	bl	8007a02 <lv_obj_get_child>
 801638c:	4607      	mov	r7, r0
            lv_coord_t x = lv_obj_get_x(tile_obj);
 801638e:	f7ee fd2b 	bl	8004de8 <lv_obj_get_x>
 8016392:	4681      	mov	r9, r0
            lv_coord_t y = lv_obj_get_y(tile_obj);
 8016394:	4638      	mov	r0, r7
 8016396:	f7ee fd43 	bl	8004e20 <lv_obj_get_y>
            if(x == tx && y == ty) {
 801639a:	454d      	cmp	r5, r9
 801639c:	d110      	bne.n	80163c0 <tileview_event_cb+0xac>
 801639e:	4286      	cmp	r6, r0
 80163a0:	d10e      	bne.n	80163c0 <tileview_event_cb+0xac>
                lv_tileview_tile_t * tile = (lv_tileview_tile_t *)tile_obj;
                tv->tile_act = (lv_obj_t *)tile;
 80163a2:	6267      	str	r7, [r4, #36]	; 0x24
                dir = tile->dir;
                lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 80163a4:	2200      	movs	r2, #0
 80163a6:	211c      	movs	r1, #28
 80163a8:	4620      	mov	r0, r4
                dir = tile->dir;
 80163aa:	f897 5024 	ldrb.w	r5, [r7, #36]	; 0x24
                lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 80163ae:	f7eb fd8b 	bl	8001ec8 <lv_event_send>
                break;
            }
        }
        lv_obj_set_scroll_dir(obj, dir);
 80163b2:	4629      	mov	r1, r5
 80163b4:	4620      	mov	r0, r4
 80163b6:	f7ef fd48 	bl	8005e4a <lv_obj_set_scroll_dir>
    }
}
 80163ba:	b003      	add	sp, #12
 80163bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        for(i = 0; i < lv_obj_get_child_cnt(obj); i++) {
 80163c0:	f108 0801 	add.w	r8, r8, #1
 80163c4:	e7d7      	b.n	8016376 <tileview_event_cb+0x62>
	...

080163c8 <lv_tileview_tile_constructor>:
{
 80163c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    lv_obj_t * parent = lv_obj_get_parent(obj);
 80163ca:	4608      	mov	r0, r1
{
 80163cc:	460c      	mov	r4, r1
    lv_obj_t * parent = lv_obj_get_parent(obj);
 80163ce:	f7f1 fb15 	bl	80079fc <lv_obj_get_parent>
    lv_obj_set_size(obj, LV_PCT(100), LV_PCT(100));
 80163d2:	f242 0264 	movw	r2, #8292	; 0x2064
    lv_obj_t * parent = lv_obj_get_parent(obj);
 80163d6:	4605      	mov	r5, r0
    lv_obj_set_size(obj, LV_PCT(100), LV_PCT(100));
 80163d8:	4620      	mov	r0, r4
 80163da:	4611      	mov	r1, r2
    lv_obj_set_pos(obj, create_col_id * lv_obj_get_content_width(parent),  create_row_id * lv_obj_get_content_height(parent));
 80163dc:	4e14      	ldr	r6, [pc, #80]	; (8016430 <lv_tileview_tile_constructor+0x68>)
    lv_obj_set_size(obj, LV_PCT(100), LV_PCT(100));
 80163de:	f7ee fc29 	bl	8004c34 <lv_obj_set_size>
    lv_obj_update_layout(obj);  /*Be sure the size is correct*/
 80163e2:	4620      	mov	r0, r4
 80163e4:	f7ef fb00 	bl	80059e8 <lv_obj_update_layout>
    lv_obj_set_pos(obj, create_col_id * lv_obj_get_content_width(parent),  create_row_id * lv_obj_get_content_height(parent));
 80163e8:	4628      	mov	r0, r5
 80163ea:	f7ee fd4c 	bl	8004e86 <lv_obj_get_content_width>
 80163ee:	6833      	ldr	r3, [r6, #0]
 80163f0:	4f10      	ldr	r7, [pc, #64]	; (8016434 <lv_tileview_tile_constructor+0x6c>)
 80163f2:	fb13 f000 	smulbb	r0, r3, r0
 80163f6:	b201      	sxth	r1, r0
 80163f8:	4628      	mov	r0, r5
 80163fa:	9101      	str	r1, [sp, #4]
 80163fc:	f7ee fd5d 	bl	8004eba <lv_obj_get_content_height>
 8016400:	683b      	ldr	r3, [r7, #0]
 8016402:	9901      	ldr	r1, [sp, #4]
 8016404:	fb13 f000 	smulbb	r0, r3, r0
 8016408:	b202      	sxth	r2, r0
 801640a:	4620      	mov	r0, r4
 801640c:	f7ee fc8e 	bl	8004d2c <lv_obj_set_pos>
    tile->dir = create_dir;
 8016410:	4b09      	ldr	r3, [pc, #36]	; (8016438 <lv_tileview_tile_constructor+0x70>)
    if(create_col_id == 0 && create_row_id == 0) {
 8016412:	6832      	ldr	r2, [r6, #0]
    tile->dir = create_dir;
 8016414:	7819      	ldrb	r1, [r3, #0]
    if(create_col_id == 0 && create_row_id == 0) {
 8016416:	683b      	ldr	r3, [r7, #0]
    tile->dir = create_dir;
 8016418:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
    if(create_col_id == 0 && create_row_id == 0) {
 801641c:	4313      	orrs	r3, r2
 801641e:	d105      	bne.n	801642c <lv_tileview_tile_constructor+0x64>
        lv_obj_set_scroll_dir(parent, create_dir);
 8016420:	4628      	mov	r0, r5
}
 8016422:	b003      	add	sp, #12
 8016424:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        lv_obj_set_scroll_dir(parent, create_dir);
 8016428:	f7ef bd0f 	b.w	8005e4a <lv_obj_set_scroll_dir>
}
 801642c:	b003      	add	sp, #12
 801642e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016430:	20002b44 	.word	0x20002b44
 8016434:	20002b4c 	.word	0x20002b4c
 8016438:	20002b48 	.word	0x20002b48

0801643c <lv_win_constructor>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void lv_win_constructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 801643c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LV_UNUSED(class_p);
    lv_obj_t * parent = lv_obj_get_parent(obj);
 801643e:	4608      	mov	r0, r1
{
 8016440:	460c      	mov	r4, r1
    lv_obj_t * parent = lv_obj_get_parent(obj);
 8016442:	f7f1 fadb 	bl	80079fc <lv_obj_get_parent>
 8016446:	4605      	mov	r5, r0
    lv_obj_set_size(obj, lv_obj_get_width(parent), lv_obj_get_height(parent));
 8016448:	f7ee fd11 	bl	8004e6e <lv_obj_get_width>
 801644c:	9001      	str	r0, [sp, #4]
 801644e:	4628      	mov	r0, r5
 8016450:	f7ee fd13 	bl	8004e7a <lv_obj_get_height>
 8016454:	9901      	ldr	r1, [sp, #4]
 8016456:	4602      	mov	r2, r0
 8016458:	4620      	mov	r0, r4
 801645a:	f7ee fbeb 	bl	8004c34 <lv_obj_set_size>
    lv_obj_set_flex_flow(obj, LV_FLEX_FLOW_COLUMN);
 801645e:	2101      	movs	r1, #1
 8016460:	4620      	mov	r0, r4
 8016462:	f7f9 fc85 	bl	800fd70 <lv_obj_set_flex_flow>

    lv_obj_t * header = lv_obj_create(obj);
 8016466:	4620      	mov	r0, r4
 8016468:	f7ed fc42 	bl	8003cf0 <lv_obj_create>
    lv_obj_set_size(header, LV_PCT(100), create_header_height);
 801646c:	4b10      	ldr	r3, [pc, #64]	; (80164b0 <lv_win_constructor+0x74>)
    lv_obj_t * header = lv_obj_create(obj);
 801646e:	4605      	mov	r5, r0
    lv_obj_set_size(header, LV_PCT(100), create_header_height);
 8016470:	f242 0164 	movw	r1, #8292	; 0x2064
 8016474:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016478:	f7ee fbdc 	bl	8004c34 <lv_obj_set_size>
    lv_obj_set_flex_flow(header, LV_FLEX_FLOW_ROW);
 801647c:	4628      	mov	r0, r5
 801647e:	2100      	movs	r1, #0
 8016480:	f7f9 fc76 	bl	800fd70 <lv_obj_set_flex_flow>
    lv_obj_set_flex_align(header, LV_FLEX_ALIGN_START, LV_FLEX_ALIGN_CENTER, LV_FLEX_ALIGN_CENTER);
 8016484:	2302      	movs	r3, #2
 8016486:	2100      	movs	r1, #0
 8016488:	4628      	mov	r0, r5
 801648a:	461a      	mov	r2, r3
 801648c:	f7f9 fc86 	bl	800fd9c <lv_obj_set_flex_align>

    lv_obj_t * cont = lv_obj_create(obj);
 8016490:	4620      	mov	r0, r4
 8016492:	f7ed fc2d 	bl	8003cf0 <lv_obj_create>
 8016496:	4604      	mov	r4, r0
    lv_obj_set_flex_grow(cont, 1);
 8016498:	2101      	movs	r1, #1
 801649a:	f7f9 fca9 	bl	800fdf0 <lv_obj_set_flex_grow>
    lv_obj_set_width(cont, LV_PCT(100));
 801649e:	f242 0164 	movw	r1, #8292	; 0x2064
 80164a2:	4620      	mov	r0, r4
}
 80164a4:	b003      	add	sp, #12
 80164a6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    lv_obj_set_width(cont, LV_PCT(100));
 80164aa:	f7ee bb8f 	b.w	8004bcc <lv_obj_set_width>
 80164ae:	bf00      	nop
 80164b0:	20002b50 	.word	0x20002b50

080164b4 <lv_font_get_glyph_bitmap>:
 * @param letter an UNICODE character code
 * @return pointer to the bitmap of the letter
 */
const uint8_t * lv_font_get_glyph_bitmap(const lv_font_t * font_p, uint32_t letter)
{
    return font_p->get_glyph_bitmap(font_p, letter);
 80164b4:	6843      	ldr	r3, [r0, #4]
 80164b6:	4718      	bx	r3

080164b8 <lv_font_get_glyph_dsc>:
 * @return true: descriptor is successfully loaded into `dsc_out`.
 *         false: the letter was not found, no data is loaded to `dsc_out`
 */
bool lv_font_get_glyph_dsc(const lv_font_t * font_p, lv_font_glyph_dsc_t * dsc_out, uint32_t letter,
                           uint32_t letter_next)
{
 80164b8:	b410      	push	{r4}
    return font_p->get_glyph_dsc(font_p, dsc_out, letter, letter_next);
 80164ba:	6804      	ldr	r4, [r0, #0]
 80164bc:	46a4      	mov	ip, r4
}
 80164be:	f85d 4b04 	ldr.w	r4, [sp], #4
    return font_p->get_glyph_dsc(font_p, dsc_out, letter, letter_next);
 80164c2:	4760      	bx	ip

080164c4 <lv_font_get_glyph_width>:
 * @param letter an UNICODE letter
 * @param letter_next the next letter after `letter`. Used for kerning
 * @return the width of the glyph
 */
uint16_t lv_font_get_glyph_width(const lv_font_t * font, uint32_t letter, uint32_t letter_next)
{
 80164c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80164c6:	4613      	mov	r3, r2
    lv_font_glyph_dsc_t g;
    bool ret;
    ret = lv_font_get_glyph_dsc(font, &g, letter, letter_next);
 80164c8:	460a      	mov	r2, r1
 80164ca:	a901      	add	r1, sp, #4
 80164cc:	f7ff fff4 	bl	80164b8 <lv_font_get_glyph_dsc>
    if(ret) return g.adv_w;
 80164d0:	b108      	cbz	r0, 80164d6 <lv_font_get_glyph_width+0x12>
 80164d2:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    else return 0;
}
 80164d6:	b005      	add	sp, #20
 80164d8:	f85d fb04 	ldr.w	pc, [sp], #4

080164dc <kern_pair_8_compare>:
{
    const uint8_t * ref8_p = ref;
    const uint8_t * element8_p = element;

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref8_p[0] != element8_p[0]) return (int32_t)ref8_p[0] - element8_p[0];
 80164dc:	7803      	ldrb	r3, [r0, #0]
 80164de:	780a      	ldrb	r2, [r1, #0]
 80164e0:	4293      	cmp	r3, r2
 80164e2:	bf11      	iteee	ne
 80164e4:	1a98      	subne	r0, r3, r2
    else return (int32_t) ref8_p[1] - element8_p[1];
 80164e6:	784b      	ldrbeq	r3, [r1, #1]
 80164e8:	7840      	ldrbeq	r0, [r0, #1]
 80164ea:	1ac0      	subeq	r0, r0, r3

}
 80164ec:	4770      	bx	lr

080164ee <kern_pair_16_compare>:
{
    const uint16_t * ref16_p = ref;
    const uint16_t * element16_p = element;

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref16_p[0] != element16_p[0]) return (int32_t)ref16_p[0] - element16_p[0];
 80164ee:	8803      	ldrh	r3, [r0, #0]
 80164f0:	880a      	ldrh	r2, [r1, #0]
 80164f2:	4293      	cmp	r3, r2
 80164f4:	bf11      	iteee	ne
 80164f6:	1a98      	subne	r0, r3, r2
    else return (int32_t) ref16_p[1] - element16_p[1];
 80164f8:	884b      	ldrheq	r3, [r1, #2]
 80164fa:	8840      	ldrheq	r0, [r0, #2]
 80164fc:	1ac0      	subeq	r0, r0, r3
}
 80164fe:	4770      	bx	lr

08016500 <unicode_list_compare>:
 *  @retval > 0   Reference is greater than element.
 *
 */
static int32_t unicode_list_compare(const void * ref, const void * element)
{
    return ((int32_t)(*(uint16_t *)ref)) - ((int32_t)(*(uint16_t *)element));
 8016500:	8800      	ldrh	r0, [r0, #0]
 8016502:	880b      	ldrh	r3, [r1, #0]
}
 8016504:	1ac0      	subs	r0, r0, r3
 8016506:	4770      	bx	lr

08016508 <get_glyph_dsc_id.isra.0.part.0>:
static uint32_t get_glyph_dsc_id(const lv_font_t * font, uint32_t letter)
 8016508:	b5f0      	push	{r4, r5, r6, r7, lr}
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *)font->dsc;
 801650a:	6805      	ldr	r5, [r0, #0]
static uint32_t get_glyph_dsc_id(const lv_font_t * font, uint32_t letter)
 801650c:	b085      	sub	sp, #20
 801650e:	460c      	mov	r4, r1
    if(fdsc->cache && letter == fdsc->cache->last_letter) return fdsc->cache->last_glyph_id;
 8016510:	6968      	ldr	r0, [r5, #20]
 8016512:	b970      	cbnz	r0, 8016532 <get_glyph_dsc_id.isra.0.part.0+0x2a>
    for(i = 0; i < fdsc->cmap_num; i++) {
 8016514:	8a6f      	ldrh	r7, [r5, #18]
 8016516:	2200      	movs	r2, #0
 8016518:	f04f 0c14 	mov.w	ip, #20
 801651c:	f3c7 0708 	ubfx	r7, r7, #0, #9
 8016520:	b293      	uxth	r3, r2
 8016522:	429f      	cmp	r7, r3
 8016524:	d80b      	bhi.n	801653e <get_glyph_dsc_id.isra.0.part.0+0x36>
    if(fdsc->cache) {
 8016526:	2300      	movs	r3, #0
 8016528:	b138      	cbz	r0, 801653a <get_glyph_dsc_id.isra.0.part.0+0x32>
        fdsc->cache->last_glyph_id = 0;
 801652a:	e9c0 4300 	strd	r4, r3, [r0]
    return 0;
 801652e:	4618      	mov	r0, r3
 8016530:	e003      	b.n	801653a <get_glyph_dsc_id.isra.0.part.0+0x32>
    if(fdsc->cache && letter == fdsc->cache->last_letter) return fdsc->cache->last_glyph_id;
 8016532:	6803      	ldr	r3, [r0, #0]
 8016534:	428b      	cmp	r3, r1
 8016536:	d1ed      	bne.n	8016514 <get_glyph_dsc_id.isra.0.part.0+0xc>
 8016538:	6840      	ldr	r0, [r0, #4]
}
 801653a:	b005      	add	sp, #20
 801653c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
 801653e:	fb0c f602 	mul.w	r6, ip, r2
 8016542:	68ab      	ldr	r3, [r5, #8]
 8016544:	3201      	adds	r2, #1
 8016546:	1999      	adds	r1, r3, r6
 8016548:	599b      	ldr	r3, [r3, r6]
        if(rcp > fdsc->cmaps[i].range_length) continue;
 801654a:	f8b1 e004 	ldrh.w	lr, [r1, #4]
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
 801654e:	1ae3      	subs	r3, r4, r3
        if(rcp > fdsc->cmaps[i].range_length) continue;
 8016550:	4573      	cmp	r3, lr
 8016552:	d8e5      	bhi.n	8016520 <get_glyph_dsc_id.isra.0.part.0+0x18>
        if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_TINY) {
 8016554:	7c8a      	ldrb	r2, [r1, #18]
 8016556:	2a02      	cmp	r2, #2
 8016558:	d102      	bne.n	8016560 <get_glyph_dsc_id.isra.0.part.0+0x58>
            glyph_id = fdsc->cmaps[i].glyph_id_start + rcp;
 801655a:	88c8      	ldrh	r0, [r1, #6]
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
 801655c:	4418      	add	r0, r3
 801655e:	e019      	b.n	8016594 <get_glyph_dsc_id.isra.0.part.0+0x8c>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_FULL) {
 8016560:	b91a      	cbnz	r2, 801656a <get_glyph_dsc_id.isra.0.part.0+0x62>
            glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_8[rcp];
 8016562:	68ca      	ldr	r2, [r1, #12]
 8016564:	5cd0      	ldrb	r0, [r2, r3]
 8016566:	88cb      	ldrh	r3, [r1, #6]
 8016568:	e7f8      	b.n	801655c <get_glyph_dsc_id.isra.0.part.0+0x54>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_TINY) {
 801656a:	2a03      	cmp	r2, #3
 801656c:	d118      	bne.n	80165a0 <get_glyph_dsc_id.isra.0.part.0+0x98>
            uint16_t key = rcp;
 801656e:	f8ad 300e 	strh.w	r3, [sp, #14]
            uint16_t * p = _lv_utils_bsearch(&key, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
 8016572:	f10d 000e 	add.w	r0, sp, #14
 8016576:	4b17      	ldr	r3, [pc, #92]	; (80165d4 <get_glyph_dsc_id.isra.0.part.0+0xcc>)
 8016578:	8a0a      	ldrh	r2, [r1, #16]
 801657a:	9300      	str	r3, [sp, #0]
 801657c:	2302      	movs	r3, #2
 801657e:	6889      	ldr	r1, [r1, #8]
 8016580:	f003 f843 	bl	801960a <_lv_utils_bsearch>
            if(p) {
 8016584:	b130      	cbz	r0, 8016594 <get_glyph_dsc_id.isra.0.part.0+0x8c>
                lv_uintptr_t ofs = p - fdsc->cmaps[i].unicode_list;
 8016586:	68ab      	ldr	r3, [r5, #8]
 8016588:	441e      	add	r6, r3
 801658a:	68b3      	ldr	r3, [r6, #8]
 801658c:	1ac0      	subs	r0, r0, r3
                glyph_id = fdsc->cmaps[i].glyph_id_start + ofs;
 801658e:	88f3      	ldrh	r3, [r6, #6]
 8016590:	eb03 0060 	add.w	r0, r3, r0, asr #1
        if(fdsc->cache) {
 8016594:	696b      	ldr	r3, [r5, #20]
 8016596:	2b00      	cmp	r3, #0
 8016598:	d0cf      	beq.n	801653a <get_glyph_dsc_id.isra.0.part.0+0x32>
            fdsc->cache->last_glyph_id = glyph_id;
 801659a:	e9c3 4000 	strd	r4, r0, [r3]
 801659e:	e7cc      	b.n	801653a <get_glyph_dsc_id.isra.0.part.0+0x32>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_FULL) {
 80165a0:	2a01      	cmp	r2, #1
 80165a2:	d114      	bne.n	80165ce <get_glyph_dsc_id.isra.0.part.0+0xc6>
            uint16_t key = rcp;
 80165a4:	f8ad 300e 	strh.w	r3, [sp, #14]
            uint16_t * p = _lv_utils_bsearch(&key, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
 80165a8:	f10d 000e 	add.w	r0, sp, #14
 80165ac:	4b09      	ldr	r3, [pc, #36]	; (80165d4 <get_glyph_dsc_id.isra.0.part.0+0xcc>)
 80165ae:	8a0a      	ldrh	r2, [r1, #16]
 80165b0:	9300      	str	r3, [sp, #0]
 80165b2:	2302      	movs	r3, #2
 80165b4:	6889      	ldr	r1, [r1, #8]
 80165b6:	f003 f828 	bl	801960a <_lv_utils_bsearch>
            if(p) {
 80165ba:	2800      	cmp	r0, #0
 80165bc:	d0ea      	beq.n	8016594 <get_glyph_dsc_id.isra.0.part.0+0x8c>
                lv_uintptr_t ofs = p - fdsc->cmaps[i].unicode_list;
 80165be:	68ab      	ldr	r3, [r5, #8]
 80165c0:	441e      	add	r6, r3
 80165c2:	68b3      	ldr	r3, [r6, #8]
 80165c4:	1ac0      	subs	r0, r0, r3
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
 80165c6:	68f3      	ldr	r3, [r6, #12]
 80165c8:	5a18      	ldrh	r0, [r3, r0]
 80165ca:	88f3      	ldrh	r3, [r6, #6]
 80165cc:	e7c6      	b.n	801655c <get_glyph_dsc_id.isra.0.part.0+0x54>
        uint32_t glyph_id = 0;
 80165ce:	2000      	movs	r0, #0
 80165d0:	e7e0      	b.n	8016594 <get_glyph_dsc_id.isra.0.part.0+0x8c>
 80165d2:	bf00      	nop
 80165d4:	08016501 	.word	0x08016501

080165d8 <lv_font_get_bitmap_fmt_txt>:
    if(unicode_letter == '\t') unicode_letter = ' ';
 80165d8:	2909      	cmp	r1, #9
{
 80165da:	b510      	push	{r4, lr}
    if(unicode_letter == '\t') unicode_letter = ' ';
 80165dc:	d002      	beq.n	80165e4 <lv_font_get_bitmap_fmt_txt+0xc>
    if(letter == '\0') return 0;
 80165de:	b911      	cbnz	r1, 80165e6 <lv_font_get_bitmap_fmt_txt+0xe>
    if(!gid) return NULL;
 80165e0:	2000      	movs	r0, #0
}
 80165e2:	bd10      	pop	{r4, pc}
    if(unicode_letter == '\t') unicode_letter = ' ';
 80165e4:	2120      	movs	r1, #32
 80165e6:	f850 4f10 	ldr.w	r4, [r0, #16]!
 80165ea:	f7ff ff8d 	bl	8016508 <get_glyph_dsc_id.isra.0.part.0>
    if(!gid) return NULL;
 80165ee:	2800      	cmp	r0, #0
 80165f0:	d0f6      	beq.n	80165e0 <lv_font_get_bitmap_fmt_txt+0x8>
    if(fdsc->bitmap_format == LV_FONT_FMT_TXT_PLAIN) {
 80165f2:	7ce3      	ldrb	r3, [r4, #19]
 80165f4:	f013 0fc0 	tst.w	r3, #192	; 0xc0
 80165f8:	d1f2      	bne.n	80165e0 <lv_font_get_bitmap_fmt_txt+0x8>
        return &fdsc->glyph_bitmap[gdsc->bitmap_index];
 80165fa:	6863      	ldr	r3, [r4, #4]
 80165fc:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
 8016600:	6820      	ldr	r0, [r4, #0]
 8016602:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016606:	4418      	add	r0, r3
 8016608:	e7eb      	b.n	80165e2 <lv_font_get_bitmap_fmt_txt+0xa>
	...

0801660c <lv_font_get_glyph_dsc_fmt_txt>:
    if(unicode_letter == '\t') {
 801660c:	2a09      	cmp	r2, #9
{
 801660e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016612:	460c      	mov	r4, r1
 8016614:	4680      	mov	r8, r0
 8016616:	4611      	mov	r1, r2
 8016618:	469a      	mov	sl, r3
    if(unicode_letter == '\t') {
 801661a:	d006      	beq.n	801662a <lv_font_get_glyph_dsc_fmt_txt+0x1e>
    if(letter == '\0') return 0;
 801661c:	2a00      	cmp	r2, #0
 801661e:	d136      	bne.n	801668e <lv_font_get_glyph_dsc_fmt_txt+0x82>
    if(!gid) return false;
 8016620:	2600      	movs	r6, #0
}
 8016622:	4630      	mov	r0, r6
 8016624:	b004      	add	sp, #16
 8016626:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        is_tab = true;
 801662a:	2601      	movs	r6, #1
        unicode_letter = ' ';
 801662c:	2120      	movs	r1, #32
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *)font->dsc;
 801662e:	46c1      	mov	r9, r8
 8016630:	f859 7f10 	ldr.w	r7, [r9, #16]!
 8016634:	4648      	mov	r0, r9
 8016636:	f7ff ff67 	bl	8016508 <get_glyph_dsc_id.isra.0.part.0>
    if(!gid) return false;
 801663a:	4605      	mov	r5, r0
 801663c:	2800      	cmp	r0, #0
 801663e:	d0ef      	beq.n	8016620 <lv_font_get_glyph_dsc_fmt_txt+0x14>
    if(fdsc->kern_dsc) {
 8016640:	68fb      	ldr	r3, [r7, #12]
 8016642:	bb33      	cbnz	r3, 8016692 <lv_font_get_glyph_dsc_fmt_txt+0x86>
    int8_t kvalue = 0;
 8016644:	2300      	movs	r3, #0
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
 8016646:	6878      	ldr	r0, [r7, #4]
 8016648:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
    int32_t kv = ((int32_t)((int32_t)kvalue * fdsc->kern_scale) >> 4);
 801664c:	8a38      	ldrh	r0, [r7, #16]
    uint32_t adv_w = gdsc->adv_w;
 801664e:	886a      	ldrh	r2, [r5, #2]
    int32_t kv = ((int32_t)((int32_t)kvalue * fdsc->kern_scale) >> 4);
 8016650:	4343      	muls	r3, r0
    uint32_t adv_w = gdsc->adv_w;
 8016652:	f3c2 110b 	ubfx	r1, r2, #4, #12
    int32_t kv = ((int32_t)((int32_t)kvalue * fdsc->kern_scale) >> 4);
 8016656:	111b      	asrs	r3, r3, #4
    uint32_t adv_w = gdsc->adv_w;
 8016658:	460a      	mov	r2, r1
    if(is_tab) adv_w *= 2;
 801665a:	b10e      	cbz	r6, 8016660 <lv_font_get_glyph_dsc_fmt_txt+0x54>
 801665c:	b20a      	sxth	r2, r1
 801665e:	0052      	lsls	r2, r2, #1
    adv_w  = (adv_w + (1 << 3)) >> 4;
 8016660:	3308      	adds	r3, #8
 8016662:	4413      	add	r3, r2
 8016664:	091b      	lsrs	r3, r3, #4
    dsc_out->adv_w = adv_w;
 8016666:	8023      	strh	r3, [r4, #0]
    dsc_out->box_h = gdsc->box_h;
 8016668:	796b      	ldrb	r3, [r5, #5]
 801666a:	80a3      	strh	r3, [r4, #4]
    dsc_out->box_w = gdsc->box_w;
 801666c:	792b      	ldrb	r3, [r5, #4]
 801666e:	8063      	strh	r3, [r4, #2]
    dsc_out->ofs_x = gdsc->ofs_x;
 8016670:	f995 2006 	ldrsb.w	r2, [r5, #6]
 8016674:	80e2      	strh	r2, [r4, #6]
    dsc_out->ofs_y = gdsc->ofs_y;
 8016676:	f995 2007 	ldrsb.w	r2, [r5, #7]
 801667a:	8122      	strh	r2, [r4, #8]
    dsc_out->bpp   = (uint8_t)fdsc->bpp;
 801667c:	7cfa      	ldrb	r2, [r7, #19]
 801667e:	f3c2 0243 	ubfx	r2, r2, #1, #4
 8016682:	72a2      	strb	r2, [r4, #10]
    if(is_tab) dsc_out->box_w = dsc_out->box_w * 2;
 8016684:	2e00      	cmp	r6, #0
 8016686:	d062      	beq.n	801674e <lv_font_get_glyph_dsc_fmt_txt+0x142>
 8016688:	005b      	lsls	r3, r3, #1
 801668a:	8063      	strh	r3, [r4, #2]
 801668c:	e7c9      	b.n	8016622 <lv_font_get_glyph_dsc_fmt_txt+0x16>
    bool is_tab = false;
 801668e:	2600      	movs	r6, #0
 8016690:	e7cd      	b.n	801662e <lv_font_get_glyph_dsc_fmt_txt+0x22>
    if(letter == '\0') return 0;
 8016692:	f1ba 0f00 	cmp.w	sl, #0
 8016696:	d0d5      	beq.n	8016644 <lv_font_get_glyph_dsc_fmt_txt+0x38>
 8016698:	4651      	mov	r1, sl
 801669a:	4648      	mov	r0, r9
 801669c:	f7ff ff34 	bl	8016508 <get_glyph_dsc_id.isra.0.part.0>
        if(gid_next) {
 80166a0:	2800      	cmp	r0, #0
 80166a2:	d0cf      	beq.n	8016644 <lv_font_get_glyph_dsc_fmt_txt+0x38>
            kvalue = get_kern_value(font, gid, gid_next);
 80166a4:	f8d8 3010 	ldr.w	r3, [r8, #16]
    if(fdsc->kern_classes == 0) {
 80166a8:	f8d3 800c 	ldr.w	r8, [r3, #12]
 80166ac:	7cdb      	ldrb	r3, [r3, #19]
 80166ae:	069b      	lsls	r3, r3, #26
 80166b0:	d438      	bmi.n	8016724 <lv_font_get_glyph_dsc_fmt_txt+0x118>
        if(kdsc->glyph_ids_size == 0) {
 80166b2:	f898 300b 	ldrb.w	r3, [r8, #11]
 80166b6:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
 80166ba:	d11a      	bne.n	80166f2 <lv_font_get_glyph_dsc_fmt_txt+0xe6>
            const uint16_t * g_ids = kdsc->glyph_ids;
 80166bc:	f8d8 9000 	ldr.w	r9, [r8]
            uint16_t g_id_both = (gid_right << 8) + gid_left; /*Create one number from the ids*/
 80166c0:	eb05 2000 	add.w	r0, r5, r0, lsl #8
            uint16_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 2, kern_pair_8_compare);
 80166c4:	f8d8 2008 	ldr.w	r2, [r8, #8]
 80166c8:	4b22      	ldr	r3, [pc, #136]	; (8016754 <lv_font_get_glyph_dsc_fmt_txt+0x148>)
 80166ca:	4649      	mov	r1, r9
            uint16_t g_id_both = (gid_right << 8) + gid_left; /*Create one number from the ids*/
 80166cc:	f8ad 000c 	strh.w	r0, [sp, #12]
            uint16_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 2, kern_pair_8_compare);
 80166d0:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 80166d4:	9300      	str	r3, [sp, #0]
 80166d6:	a803      	add	r0, sp, #12
 80166d8:	2302      	movs	r3, #2
 80166da:	f002 ff96 	bl	801960a <_lv_utils_bsearch>
            if(kid_p) {
 80166de:	4603      	mov	r3, r0
 80166e0:	2800      	cmp	r0, #0
 80166e2:	d0b0      	beq.n	8016646 <lv_font_get_glyph_dsc_fmt_txt+0x3a>
                lv_uintptr_t ofs = kid_p - g_ids;
 80166e4:	eba0 0309 	sub.w	r3, r0, r9
 80166e8:	105b      	asrs	r3, r3, #1
                value = kdsc->values[ofs];
 80166ea:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80166ee:	56d3      	ldrsb	r3, [r2, r3]
 80166f0:	e7a9      	b.n	8016646 <lv_font_get_glyph_dsc_fmt_txt+0x3a>
        else if(kdsc->glyph_ids_size == 1) {
 80166f2:	2b40      	cmp	r3, #64	; 0x40
 80166f4:	d1a6      	bne.n	8016644 <lv_font_get_glyph_dsc_fmt_txt+0x38>
            const uint32_t * g_ids = kdsc->glyph_ids;
 80166f6:	f8d8 9000 	ldr.w	r9, [r8]
            uint32_t g_id_both = (gid_right << 16) + gid_left; /*Create one number from the ids*/
 80166fa:	eb05 4000 	add.w	r0, r5, r0, lsl #16
            uint32_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 4, kern_pair_16_compare);
 80166fe:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8016702:	4b15      	ldr	r3, [pc, #84]	; (8016758 <lv_font_get_glyph_dsc_fmt_txt+0x14c>)
 8016704:	4649      	mov	r1, r9
            uint32_t g_id_both = (gid_right << 16) + gid_left; /*Create one number from the ids*/
 8016706:	9003      	str	r0, [sp, #12]
            uint32_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 4, kern_pair_16_compare);
 8016708:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 801670c:	9300      	str	r3, [sp, #0]
 801670e:	a803      	add	r0, sp, #12
 8016710:	2304      	movs	r3, #4
 8016712:	f002 ff7a 	bl	801960a <_lv_utils_bsearch>
            if(kid_p) {
 8016716:	4603      	mov	r3, r0
 8016718:	2800      	cmp	r0, #0
 801671a:	d094      	beq.n	8016646 <lv_font_get_glyph_dsc_fmt_txt+0x3a>
                lv_uintptr_t ofs = kid_p - g_ids;
 801671c:	eba0 0309 	sub.w	r3, r0, r9
 8016720:	109b      	asrs	r3, r3, #2
 8016722:	e7e2      	b.n	80166ea <lv_font_get_glyph_dsc_fmt_txt+0xde>
        uint8_t left_class = kdsc->left_class_mapping[gid_left];
 8016724:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8016728:	5d5b      	ldrb	r3, [r3, r5]
        if(left_class > 0 && right_class > 0) {
 801672a:	2b00      	cmp	r3, #0
 801672c:	d08a      	beq.n	8016644 <lv_font_get_glyph_dsc_fmt_txt+0x38>
        uint8_t right_class = kdsc->right_class_mapping[gid_right];
 801672e:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8016732:	5c11      	ldrb	r1, [r2, r0]
        if(left_class > 0 && right_class > 0) {
 8016734:	2900      	cmp	r1, #0
 8016736:	d085      	beq.n	8016644 <lv_font_get_glyph_dsc_fmt_txt+0x38>
            value = kdsc->class_pair_values[(left_class - 1) * kdsc->right_class_cnt + (right_class - 1)];
 8016738:	f8d8 2000 	ldr.w	r2, [r8]
 801673c:	3b01      	subs	r3, #1
 801673e:	f898 000d 	ldrb.w	r0, [r8, #13]
 8016742:	440a      	add	r2, r1
 8016744:	fb00 2303 	mla	r3, r0, r3, r2
 8016748:	f913 3c01 	ldrsb.w	r3, [r3, #-1]
 801674c:	e77b      	b.n	8016646 <lv_font_get_glyph_dsc_fmt_txt+0x3a>
    return true;
 801674e:	2601      	movs	r6, #1
 8016750:	e767      	b.n	8016622 <lv_font_get_glyph_dsc_fmt_txt+0x16>
 8016752:	bf00      	nop
 8016754:	080164dd 	.word	0x080164dd
 8016758:	080164ef 	.word	0x080164ef

0801675c <_lv_font_clean_up_fmt_txt>:
}
 801675c:	4770      	bx	lr
	...

08016760 <lv_disp_drv_init>:
 * It is used to surly have known values in the fields ant not memory junk.
 * After it you can set the fields.
 * @param driver pointer to driver variable to initialize
 */
void lv_disp_drv_init(lv_disp_drv_t * driver)
{
 8016760:	b510      	push	{r4, lr}
    lv_memset_00(driver, sizeof(lv_disp_drv_t));
 8016762:	2138      	movs	r1, #56	; 0x38
{
 8016764:	4604      	mov	r4, r0
    lv_memset_00(driver, sizeof(lv_disp_drv_t));
 8016766:	f001 f9e5 	bl	8017b34 <lv_memset_00>

    driver->hor_res          = 320;
 801676a:	4b07      	ldr	r3, [pc, #28]	; (8016788 <lv_disp_drv_init+0x28>)
 801676c:	6023      	str	r3, [r4, #0]
    driver->ver_res          = 240;
    driver->antialiasing     = LV_COLOR_DEPTH > 8 ? 1: 0;
 801676e:	8923      	ldrh	r3, [r4, #8]
 8016770:	f003 031b 	and.w	r3, r3, #27
 8016774:	f443 5302 	orr.w	r3, r3, #8320	; 0x2080
 8016778:	f043 0304 	orr.w	r3, r3, #4
 801677c:	8123      	strh	r3, [r4, #8]
    driver->screen_transp    = LV_COLOR_SCREEN_TRANSP;
    driver->dpi              = LV_DPI_DEF;
    driver->color_chroma_key = LV_COLOR_CHROMA_KEY;
 801677e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8016782:	8623      	strh	r3, [r4, #48]	; 0x30
}
 8016784:	bd10      	pop	{r4, pc}
 8016786:	bf00      	nop
 8016788:	00f00140 	.word	0x00f00140

0801678c <lv_disp_draw_buf_init>:
 *             It lets LVGL to render next frame into the other buffer while previous is being
 * sent. Set to `NULL` if unused.
 * @param size_in_px_cnt size of the `buf1` and `buf2` in pixel count.
 */
void lv_disp_draw_buf_init(lv_disp_draw_buf_t * draw_buf, void * buf1, void * buf2, uint32_t size_in_px_cnt)
{
 801678c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801678e:	4604      	mov	r4, r0
 8016790:	460d      	mov	r5, r1
 8016792:	4617      	mov	r7, r2
 8016794:	461e      	mov	r6, r3
    lv_memset_00(draw_buf, sizeof(lv_disp_draw_buf_t));
 8016796:	2124      	movs	r1, #36	; 0x24
 8016798:	f001 f9cc 	bl	8017b34 <lv_memset_00>

    draw_buf->buf1    = buf1;
    draw_buf->buf2    = buf2;
 801679c:	e9c4 5700 	strd	r5, r7, [r4]
    draw_buf->buf_act = draw_buf->buf1;
    draw_buf->size    = size_in_px_cnt;
 80167a0:	e9c4 5602 	strd	r5, r6, [r4, #8]
}
 80167a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080167a8 <lv_disp_drv_register>:
 * Automatically set the first display as active.
 * @param driver pointer to an initialized 'lv_disp_drv_t' variable. Only its pointer is saved!
 * @return pointer to the new display or NULL on error
 */
lv_disp_t * lv_disp_drv_register(lv_disp_drv_t * driver)
{
 80167a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80167aa:	4605      	mov	r5, r0
 80167ac:	b085      	sub	sp, #20
    lv_disp_t * disp = _lv_ll_ins_head(&LV_GC_ROOT(_lv_disp_ll));
 80167ae:	4839      	ldr	r0, [pc, #228]	; (8016894 <lv_disp_drv_register+0xec>)
 80167b0:	f000 fe4b 	bl	801744a <_lv_ll_ins_head>
    if(!disp) {
 80167b4:	4604      	mov	r4, r0
 80167b6:	b900      	cbnz	r0, 80167ba <lv_disp_drv_register+0x12>
        LV_ASSERT_MALLOC(disp);
 80167b8:	e7fe      	b.n	80167b8 <lv_disp_drv_register+0x10>
        return NULL;
    }

    lv_memset_00(disp, sizeof(lv_disp_t));
 80167ba:	f44f 71ac 	mov.w	r1, #344	; 0x158

    disp->driver = driver;

    lv_disp_t * disp_def_tmp = disp_def;
 80167be:	4e36      	ldr	r6, [pc, #216]	; (8016898 <lv_disp_drv_register+0xf0>)
    lv_memset_00(disp, sizeof(lv_disp_t));
 80167c0:	f001 f9b8 	bl	8017b34 <lv_memset_00>
    disp_def                 = disp; /*Temporarily change the default screen to create the default screens on the
                                        new display*/
    /*Create a refresh timer*/
    disp->refr_timer = lv_timer_create(_lv_disp_refr_timer, LV_DISP_DEF_REFR_PERIOD, disp);
 80167c4:	4622      	mov	r2, r4
 80167c6:	211e      	movs	r1, #30
 80167c8:	4834      	ldr	r0, [pc, #208]	; (801689c <lv_disp_drv_register+0xf4>)
    disp->driver = driver;
 80167ca:	6025      	str	r5, [r4, #0]
    lv_disp_t * disp_def_tmp = disp_def;
 80167cc:	6837      	ldr	r7, [r6, #0]
    disp_def                 = disp; /*Temporarily change the default screen to create the default screens on the
 80167ce:	6034      	str	r4, [r6, #0]
    disp->refr_timer = lv_timer_create(_lv_disp_refr_timer, LV_DISP_DEF_REFR_PERIOD, disp);
 80167d0:	f001 ff6a 	bl	80186a8 <lv_timer_create>
 80167d4:	6060      	str	r0, [r4, #4]
    LV_ASSERT_MALLOC(disp->refr_timer);
 80167d6:	b900      	cbnz	r0, 80167da <lv_disp_drv_register+0x32>
 80167d8:	e7fe      	b.n	80167d8 <lv_disp_drv_register+0x30>
    if(disp->refr_timer == NULL) {
        lv_mem_free(disp);
        return NULL;
    }

    if(driver->full_refresh && driver->draw_buf->size < (uint32_t)driver->hor_res * driver->ver_res) {
 80167da:	7a2b      	ldrb	r3, [r5, #8]
 80167dc:	07da      	lsls	r2, r3, #31
 80167de:	d50a      	bpl.n	80167f6 <lv_disp_drv_register+0x4e>
 80167e0:	6869      	ldr	r1, [r5, #4]
 80167e2:	882a      	ldrh	r2, [r5, #0]
 80167e4:	8868      	ldrh	r0, [r5, #2]
 80167e6:	68c9      	ldr	r1, [r1, #12]
 80167e8:	fb12 f200 	smulbb	r2, r2, r0
 80167ec:	4291      	cmp	r1, r2
        driver->full_refresh = 0;
 80167ee:	bf3c      	itt	cc
 80167f0:	f36f 0300 	bfccc	r3, #0, #1
 80167f4:	722b      	strbcc	r3, [r5, #8]

    disp->bg_color = lv_color_white();
#if LV_COLOR_SCREEN_TRANSP
    disp->bg_opa = LV_OPA_TRANSP;
#else
    disp->bg_opa = LV_OPA_COVER;
 80167f6:	23ff      	movs	r3, #255	; 0xff
 80167f8:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    disp->bg_color = lv_color_white();
 80167fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016800:	8563      	strh	r3, [r4, #42]	; 0x2a
#endif

#if LV_USE_THEME_DEFAULT
    if(lv_theme_default_is_inited() == false) {
 8016802:	f7fb fff5 	bl	80127f0 <lv_theme_default_is_inited>
 8016806:	4605      	mov	r5, r0
 8016808:	b980      	cbnz	r0, 801682c <lv_disp_drv_register+0x84>
        disp->theme = lv_theme_default_init(disp, lv_palette_main(LV_PALETTE_BLUE), lv_palette_main(LV_PALETTE_RED), LV_THEME_DEFAULT_DARK, LV_FONT_DEFAULT);
 801680a:	2005      	movs	r0, #5
 801680c:	f000 fd46 	bl	801729c <lv_palette_main>
 8016810:	4601      	mov	r1, r0
 8016812:	4628      	mov	r0, r5
 8016814:	9103      	str	r1, [sp, #12]
 8016816:	f000 fd41 	bl	801729c <lv_palette_main>
 801681a:	4b21      	ldr	r3, [pc, #132]	; (80168a0 <lv_disp_drv_register+0xf8>)
 801681c:	4602      	mov	r2, r0
 801681e:	9903      	ldr	r1, [sp, #12]
 8016820:	4620      	mov	r0, r4
 8016822:	9300      	str	r3, [sp, #0]
 8016824:	462b      	mov	r3, r5
 8016826:	f7fa fedb 	bl	80115e0 <lv_theme_default_init>
 801682a:	60a0      	str	r0, [r4, #8]
    }
#endif

    disp->act_scr   = lv_obj_create(NULL); /*Create a default screen on the display*/
 801682c:	2000      	movs	r0, #0
    lv_obj_set_scrollbar_mode(disp->top_layer, LV_SCROLLBAR_MODE_OFF);
    lv_obj_set_scrollbar_mode(disp->sys_layer, LV_SCROLLBAR_MODE_OFF);

    lv_obj_invalidate(disp->act_scr);

    disp_def = disp_def_tmp; /*Revert the default display*/
 801682e:	2f00      	cmp	r7, #0
 8016830:	bf08      	it	eq
 8016832:	4627      	moveq	r7, r4
    disp->act_scr   = lv_obj_create(NULL); /*Create a default screen on the display*/
 8016834:	f7ed fa5c 	bl	8003cf0 <lv_obj_create>
 8016838:	6120      	str	r0, [r4, #16]
    disp->top_layer = lv_obj_create(NULL); /*Create top layer on the display*/
 801683a:	2000      	movs	r0, #0
 801683c:	f7ed fa58 	bl	8003cf0 <lv_obj_create>
 8016840:	61e0      	str	r0, [r4, #28]
    disp->sys_layer = lv_obj_create(NULL); /*Create sys layer on the display*/
 8016842:	2000      	movs	r0, #0
 8016844:	f7ed fa54 	bl	8003cf0 <lv_obj_create>
 * Remove all styles from an object
 * @param obj       pointer to an object
 */
static inline void lv_obj_remove_style_all(struct _lv_obj_t * obj)
{
    lv_obj_remove_style(obj, NULL, LV_PART_ANY | LV_STATE_ANY);
 8016848:	4a16      	ldr	r2, [pc, #88]	; (80168a4 <lv_disp_drv_register+0xfc>)
 801684a:	6220      	str	r0, [r4, #32]
 801684c:	2100      	movs	r1, #0
 801684e:	69e0      	ldr	r0, [r4, #28]
 8016850:	f7f0 fcae 	bl	80071b0 <lv_obj_remove_style>
 8016854:	4a13      	ldr	r2, [pc, #76]	; (80168a4 <lv_disp_drv_register+0xfc>)
 8016856:	6a20      	ldr	r0, [r4, #32]
 8016858:	2100      	movs	r1, #0
 801685a:	f7f0 fca9 	bl	80071b0 <lv_obj_remove_style>
    lv_obj_clear_flag(disp->top_layer, LV_OBJ_FLAG_CLICKABLE);
 801685e:	69e0      	ldr	r0, [r4, #28]
 8016860:	2102      	movs	r1, #2
 8016862:	f7ed fa74 	bl	8003d4e <lv_obj_clear_flag>
    lv_obj_clear_flag(disp->sys_layer, LV_OBJ_FLAG_CLICKABLE);
 8016866:	6a20      	ldr	r0, [r4, #32]
 8016868:	2102      	movs	r1, #2
 801686a:	f7ed fa70 	bl	8003d4e <lv_obj_clear_flag>
    lv_obj_set_scrollbar_mode(disp->top_layer, LV_SCROLLBAR_MODE_OFF);
 801686e:	69e0      	ldr	r0, [r4, #28]
 8016870:	2100      	movs	r1, #0
 8016872:	f7ef fad6 	bl	8005e22 <lv_obj_set_scrollbar_mode>
    lv_obj_set_scrollbar_mode(disp->sys_layer, LV_SCROLLBAR_MODE_OFF);
 8016876:	2100      	movs	r1, #0
 8016878:	6a20      	ldr	r0, [r4, #32]
 801687a:	f7ef fad2 	bl	8005e22 <lv_obj_set_scrollbar_mode>
    lv_obj_invalidate(disp->act_scr);
 801687e:	6920      	ldr	r0, [r4, #16]
 8016880:	f7ee fc4a 	bl	8005118 <lv_obj_invalidate>
    if(disp_def == NULL) disp_def = disp; /*Initialize the default display*/

    lv_timer_ready(disp->refr_timer); /*Be sure the screen will be refreshed immediately on start up*/
 8016884:	6860      	ldr	r0, [r4, #4]
    disp_def = disp_def_tmp; /*Revert the default display*/
 8016886:	6037      	str	r7, [r6, #0]
    lv_timer_ready(disp->refr_timer); /*Be sure the screen will be refreshed immediately on start up*/
 8016888:	f001 fffe 	bl	8018888 <lv_timer_ready>

    return disp;
}
 801688c:	4620      	mov	r0, r4
 801688e:	b005      	add	sp, #20
 8016890:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016892:	bf00      	nop
 8016894:	2000ae08 	.word	0x2000ae08
 8016898:	20002b5c 	.word	0x20002b5c
 801689c:	08008385 	.word	0x08008385
 80168a0:	08028bc8 	.word	0x08028bc8
 80168a4:	000fffff 	.word	0x000fffff

080168a8 <lv_disp_get_default>:
 * @return pointer to the default display
 */
lv_disp_t * lv_disp_get_default(void)
{
    return disp_def;
}
 80168a8:	4b01      	ldr	r3, [pc, #4]	; (80168b0 <lv_disp_get_default+0x8>)
 80168aa:	6818      	ldr	r0, [r3, #0]
 80168ac:	4770      	bx	lr
 80168ae:	bf00      	nop
 80168b0:	20002b5c 	.word	0x20002b5c

080168b4 <lv_disp_get_hor_res>:
 * @param disp pointer to a display (NULL to use the default display)
 * @return the horizontal resolution of the display
 */
lv_coord_t lv_disp_get_hor_res(lv_disp_t * disp)
{
    if(disp == NULL) disp = lv_disp_get_default();
 80168b4:	b910      	cbnz	r0, 80168bc <lv_disp_get_hor_res+0x8>
    return disp_def;
 80168b6:	4b06      	ldr	r3, [pc, #24]	; (80168d0 <lv_disp_get_hor_res+0x1c>)
 80168b8:	6818      	ldr	r0, [r3, #0]

    if(disp == NULL) {
 80168ba:	b140      	cbz	r0, 80168ce <lv_disp_get_hor_res+0x1a>
        return 0;
    } else {
        switch(disp->driver->rotated) {
 80168bc:	6803      	ldr	r3, [r0, #0]
 80168be:	7a1a      	ldrb	r2, [r3, #8]
 80168c0:	0712      	lsls	r2, r2, #28
 80168c2:	d502      	bpl.n	80168ca <lv_disp_get_hor_res+0x16>
            case LV_DISP_ROT_90:
            case LV_DISP_ROT_270:
                return disp->driver->ver_res;
 80168c4:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
 80168c8:	4770      	bx	lr
            default:
                return disp->driver->hor_res;
 80168ca:	f9b3 0000 	ldrsh.w	r0, [r3]
        }
    }
}
 80168ce:	4770      	bx	lr
 80168d0:	20002b5c 	.word	0x20002b5c

080168d4 <lv_disp_get_ver_res>:
 * @param disp pointer to a display (NULL to use the default display)
 * @return the vertical resolution of the display
 */
lv_coord_t lv_disp_get_ver_res(lv_disp_t * disp)
{
    if(disp == NULL) disp = lv_disp_get_default();
 80168d4:	b910      	cbnz	r0, 80168dc <lv_disp_get_ver_res+0x8>
    return disp_def;
 80168d6:	4b06      	ldr	r3, [pc, #24]	; (80168f0 <lv_disp_get_ver_res+0x1c>)
 80168d8:	6818      	ldr	r0, [r3, #0]

    if(disp == NULL) {
 80168da:	b140      	cbz	r0, 80168ee <lv_disp_get_ver_res+0x1a>
        return 0;
    } else {
        switch(disp->driver->rotated) {
 80168dc:	6803      	ldr	r3, [r0, #0]
 80168de:	7a1a      	ldrb	r2, [r3, #8]
 80168e0:	0712      	lsls	r2, r2, #28
 80168e2:	d502      	bpl.n	80168ea <lv_disp_get_ver_res+0x16>
            case LV_DISP_ROT_90:
            case LV_DISP_ROT_270:
                return disp->driver->hor_res;
 80168e4:	f9b3 0000 	ldrsh.w	r0, [r3]
 80168e8:	4770      	bx	lr
            default:
                return disp->driver->ver_res;
 80168ea:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
        }
    }
}
 80168ee:	4770      	bx	lr
 80168f0:	20002b5c 	.word	0x20002b5c

080168f4 <lv_disp_get_dpi>:
 * @param disp pointer to a display (NULL to use the default display)
 * @return dpi of the display
 */
lv_coord_t lv_disp_get_dpi(const lv_disp_t * disp)
{
    if(disp == NULL) disp = lv_disp_get_default();
 80168f4:	b910      	cbnz	r0, 80168fc <lv_disp_get_dpi+0x8>
    return disp_def;
 80168f6:	4b05      	ldr	r3, [pc, #20]	; (801690c <lv_disp_get_dpi+0x18>)
 80168f8:	6818      	ldr	r0, [r3, #0]
    if(disp == NULL) return LV_DPI_DEF;  /*Do not return 0 because it might be a divider*/
 80168fa:	b120      	cbz	r0, 8016906 <lv_disp_get_dpi+0x12>
    return disp->driver->dpi;
 80168fc:	6803      	ldr	r3, [r0, #0]
 80168fe:	8918      	ldrh	r0, [r3, #8]
 8016900:	f3c0 1089 	ubfx	r0, r0, #6, #10
 8016904:	4770      	bx	lr
    if(disp == NULL) return LV_DPI_DEF;  /*Do not return 0 because it might be a divider*/
 8016906:	2082      	movs	r0, #130	; 0x82
}
 8016908:	4770      	bx	lr
 801690a:	bf00      	nop
 801690c:	20002b5c 	.word	0x20002b5c

08016910 <lv_disp_flush_ready>:
    if(disp_drv->screen_transp) {
        lv_memset_00(disp_drv->draw_buf->buf_act, disp_drv->draw_buf->size * sizeof(lv_color32_t));
    }
#endif

    disp_drv->draw_buf->flushing = 0;
 8016910:	6843      	ldr	r3, [r0, #4]
 8016912:	2200      	movs	r2, #0
 8016914:	619a      	str	r2, [r3, #24]
    disp_drv->draw_buf->flushing_last = 0;
 8016916:	61da      	str	r2, [r3, #28]
}
 8016918:	4770      	bx	lr
	...

0801691c <lv_disp_get_next>:
 * @param disp pointer to the current display. NULL to initialize.
 * @return the next display or NULL if no more. Give the first display when the parameter is NULL
 */
lv_disp_t * lv_disp_get_next(lv_disp_t * disp)
{
    if(disp == NULL)
 801691c:	4601      	mov	r1, r0
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_disp_ll));
 801691e:	4803      	ldr	r0, [pc, #12]	; (801692c <lv_disp_get_next+0x10>)
    if(disp == NULL)
 8016920:	b909      	cbnz	r1, 8016926 <lv_disp_get_next+0xa>
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_disp_ll));
 8016922:	f000 be04 	b.w	801752e <_lv_ll_get_head>
    else
        return _lv_ll_get_next(&LV_GC_ROOT(_lv_disp_ll), disp);
 8016926:	f000 be08 	b.w	801753a <_lv_ll_get_next>
 801692a:	bf00      	nop
 801692c:	2000ae08 	.word	0x2000ae08

08016930 <lv_disp_get_draw_buf>:
 * @param disp pointer to a display
 * @return pointer to the internal buffers
 */
lv_disp_draw_buf_t * lv_disp_get_draw_buf(lv_disp_t * disp)
{
    return disp->driver->draw_buf;
 8016930:	6803      	ldr	r3, [r0, #0]
}
 8016932:	6858      	ldr	r0, [r3, #4]
 8016934:	4770      	bx	lr
	...

08016938 <lv_indev_drv_init>:
 * It is used to surly have known values in the fields ant not memory junk.
 * After it you can set the fields.
 * @param driver pointer to driver variable to initialize
 */
void lv_indev_drv_init(lv_indev_drv_t * driver)
{
 8016938:	b510      	push	{r4, lr}
    lv_memset_00(driver, sizeof(lv_indev_drv_t));
 801693a:	2120      	movs	r1, #32
{
 801693c:	4604      	mov	r4, r0
    lv_memset_00(driver, sizeof(lv_indev_drv_t));
 801693e:	f001 f8f9 	bl	8017b34 <lv_memset_00>

    driver->type                 = LV_INDEV_TYPE_NONE;
 8016942:	2300      	movs	r3, #0
    driver->scroll_limit         = LV_INDEV_DEF_SCROLL_LIMIT;
    driver->scroll_throw         = LV_INDEV_DEF_SCROLL_THROW;
    driver->long_press_time      = LV_INDEV_DEF_LONG_PRESS_TIME;
 8016944:	4a02      	ldr	r2, [pc, #8]	; (8016950 <lv_indev_drv_init+0x18>)
    driver->type                 = LV_INDEV_TYPE_NONE;
 8016946:	7023      	strb	r3, [r4, #0]
    driver->long_press_time      = LV_INDEV_DEF_LONG_PRESS_TIME;
 8016948:	4b02      	ldr	r3, [pc, #8]	; (8016954 <lv_indev_drv_init+0x1c>)
 801694a:	e9c4 2306 	strd	r2, r3, [r4, #24]
    driver->long_press_repeat_time  = LV_INDEV_DEF_LONG_PRESS_REP_TIME;
    driver->gesture_limit        = LV_INDEV_DEF_GESTURE_LIMIT;
    driver->gesture_min_velocity = LV_INDEV_DEF_GESTURE_MIN_VELOCITY;
}
 801694e:	bd10      	pop	{r4, pc}
 8016950:	32030a0a 	.word	0x32030a0a
 8016954:	00640190 	.word	0x00640190

08016958 <lv_indev_drv_register>:
 * @param driver pointer to an initialized 'lv_indev_drv_t' variable.
 * Only pointer is saved, so the driver should be static or dynamically allocated.
 * @return pointer to the new input device or NULL on error
 */
lv_indev_t * lv_indev_drv_register(lv_indev_drv_t * driver)
{
 8016958:	b538      	push	{r3, r4, r5, lr}

    if(driver->disp == NULL) driver->disp = lv_disp_get_default();
 801695a:	6903      	ldr	r3, [r0, #16]
{
 801695c:	4605      	mov	r5, r0
    if(driver->disp == NULL) driver->disp = lv_disp_get_default();
 801695e:	b12b      	cbz	r3, 801696c <lv_indev_drv_register+0x14>
        LV_LOG_WARN("lv_indev_drv_register: no display registered hence can't attach the indev to "
                    "a display");
        return NULL;
    }

    lv_indev_t * indev = _lv_ll_ins_head(&LV_GC_ROOT(_lv_indev_ll));
 8016960:	480e      	ldr	r0, [pc, #56]	; (801699c <lv_indev_drv_register+0x44>)
 8016962:	f000 fd72 	bl	801744a <_lv_ll_ins_head>
    if(!indev) {
 8016966:	4604      	mov	r4, r0
 8016968:	b940      	cbnz	r0, 801697c <lv_indev_drv_register+0x24>
        LV_ASSERT_MALLOC(indev);
 801696a:	e7fe      	b.n	801696a <lv_indev_drv_register+0x12>
    if(driver->disp == NULL) driver->disp = lv_disp_get_default();
 801696c:	f7ff ff9c 	bl	80168a8 <lv_disp_get_default>
 8016970:	4604      	mov	r4, r0
 8016972:	6128      	str	r0, [r5, #16]
    if(driver->disp == NULL) {
 8016974:	2800      	cmp	r0, #0
 8016976:	d1f3      	bne.n	8016960 <lv_indev_drv_register+0x8>

    indev->proc.reset_query  = 1;
    indev->driver->read_timer = lv_timer_create(lv_indev_read_timer_cb, LV_INDEV_DEF_READ_PERIOD, indev);

    return indev;
}
 8016978:	4620      	mov	r0, r4
 801697a:	bd38      	pop	{r3, r4, r5, pc}
    lv_memset_00(indev, sizeof(lv_indev_t));
 801697c:	2158      	movs	r1, #88	; 0x58
 801697e:	f001 f8d9 	bl	8017b34 <lv_memset_00>
    indev->proc.reset_query  = 1;
 8016982:	7963      	ldrb	r3, [r4, #5]
    indev->driver->read_timer = lv_timer_create(lv_indev_read_timer_cb, LV_INDEV_DEF_READ_PERIOD, indev);
 8016984:	4622      	mov	r2, r4
 8016986:	211e      	movs	r1, #30
    indev->proc.reset_query  = 1;
 8016988:	f043 0302 	orr.w	r3, r3, #2
    indev->driver->read_timer = lv_timer_create(lv_indev_read_timer_cb, LV_INDEV_DEF_READ_PERIOD, indev);
 801698c:	4804      	ldr	r0, [pc, #16]	; (80169a0 <lv_indev_drv_register+0x48>)
    indev->driver = driver;
 801698e:	6025      	str	r5, [r4, #0]
    indev->proc.reset_query  = 1;
 8016990:	7163      	strb	r3, [r4, #5]
    indev->driver->read_timer = lv_timer_create(lv_indev_read_timer_cb, LV_INDEV_DEF_READ_PERIOD, indev);
 8016992:	f001 fe89 	bl	80186a8 <lv_timer_create>
 8016996:	6168      	str	r0, [r5, #20]
    return indev;
 8016998:	e7ee      	b.n	8016978 <lv_indev_drv_register+0x20>
 801699a:	bf00      	nop
 801699c:	2000adf0 	.word	0x2000adf0
 80169a0:	08002921 	.word	0x08002921

080169a4 <lv_indev_get_next>:
 * @return the next input devise or NULL if no more. Give the first input device when the parameter
 * is NULL
 */
lv_indev_t * lv_indev_get_next(lv_indev_t * indev)
{
    if(indev == NULL)
 80169a4:	4601      	mov	r1, r0
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
 80169a6:	4803      	ldr	r0, [pc, #12]	; (80169b4 <lv_indev_get_next+0x10>)
    if(indev == NULL)
 80169a8:	b909      	cbnz	r1, 80169ae <lv_indev_get_next+0xa>
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
 80169aa:	f000 bdc0 	b.w	801752e <_lv_ll_get_head>
    else
        return _lv_ll_get_next(&LV_GC_ROOT(_lv_indev_ll), indev);
 80169ae:	f000 bdc4 	b.w	801753a <_lv_ll_get_next>
 80169b2:	bf00      	nop
 80169b4:	2000adf0 	.word	0x2000adf0

080169b8 <_lv_indev_read>:
 * Read data from an input device.
 * @param indev pointer to an input device
 * @param data input device will write its data here
 */
void _lv_indev_read(lv_indev_t * indev, lv_indev_data_t * data)
{
 80169b8:	b570      	push	{r4, r5, r6, lr}
 80169ba:	460c      	mov	r4, r1
 80169bc:	4605      	mov	r5, r0
    lv_memset_00(data, sizeof(lv_indev_data_t));
 80169be:	2110      	movs	r1, #16
 80169c0:	4620      	mov	r0, r4
 80169c2:	f001 f8b7 	bl	8017b34 <lv_memset_00>

    /* For touchpad sometimes users don't set the last pressed coordinate on release.
     * So be sure a coordinates are initialized to the last point */
    if(indev->driver->type == LV_INDEV_TYPE_POINTER) {
 80169c6:	6828      	ldr	r0, [r5, #0]
 80169c8:	7803      	ldrb	r3, [r0, #0]
 80169ca:	2b01      	cmp	r3, #1
 80169cc:	d109      	bne.n	80169e2 <_lv_indev_read+0x2a>
        data->point.x = indev->proc.types.pointer.last_raw_point.x;
 80169ce:	8a2b      	ldrh	r3, [r5, #16]
 80169d0:	8023      	strh	r3, [r4, #0]
        data->point.y = indev->proc.types.pointer.last_raw_point.y;
 80169d2:	8a6b      	ldrh	r3, [r5, #18]
 80169d4:	8063      	strh	r3, [r4, #2]
    /*For compatibility assume that used button was enter (encoder push)*/
    else if(indev->driver->type == LV_INDEV_TYPE_ENCODER) {
        data->key = LV_KEY_ENTER;
    }

    if(indev->driver->read_cb) {
 80169d6:	6843      	ldr	r3, [r0, #4]
 80169d8:	b163      	cbz	r3, 80169f4 <_lv_indev_read+0x3c>
        INDEV_TRACE("calling indev_read_cb");
        indev->driver->read_cb(indev->driver, data);
 80169da:	4621      	mov	r1, r4
    }
    else {
        LV_LOG_WARN("indev_read_cb is not registered");
    }
}
 80169dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        indev->driver->read_cb(indev->driver, data);
 80169e0:	4718      	bx	r3
    else if(indev->driver->type == LV_INDEV_TYPE_KEYPAD) {
 80169e2:	2b02      	cmp	r3, #2
 80169e4:	d102      	bne.n	80169ec <_lv_indev_read+0x34>
        data->key = indev->proc.types.keypad.last_key;
 80169e6:	68eb      	ldr	r3, [r5, #12]
        data->key = LV_KEY_ENTER;
 80169e8:	6063      	str	r3, [r4, #4]
 80169ea:	e7f4      	b.n	80169d6 <_lv_indev_read+0x1e>
    else if(indev->driver->type == LV_INDEV_TYPE_ENCODER) {
 80169ec:	2b04      	cmp	r3, #4
 80169ee:	d1f2      	bne.n	80169d6 <_lv_indev_read+0x1e>
        data->key = LV_KEY_ENTER;
 80169f0:	230a      	movs	r3, #10
 80169f2:	e7f9      	b.n	80169e8 <_lv_indev_read+0x30>
}
 80169f4:	bd70      	pop	{r4, r5, r6, pc}
	...

080169f8 <lv_tick_inc>:
 * You have to call this function periodically
 * @param tick_period the call period of this function in milliseconds
 */
LV_ATTRIBUTE_TICK_INC void lv_tick_inc(uint32_t tick_period)
{
    tick_irq_flag = 0;
 80169f8:	4b03      	ldr	r3, [pc, #12]	; (8016a08 <lv_tick_inc+0x10>)
 80169fa:	2200      	movs	r2, #0
 80169fc:	701a      	strb	r2, [r3, #0]
    sys_time += tick_period;
 80169fe:	4a03      	ldr	r2, [pc, #12]	; (8016a0c <lv_tick_inc+0x14>)
 8016a00:	6813      	ldr	r3, [r2, #0]
 8016a02:	4418      	add	r0, r3
 8016a04:	6010      	str	r0, [r2, #0]
}
 8016a06:	4770      	bx	lr
 8016a08:	20002b64 	.word	0x20002b64
 8016a0c:	20002b60 	.word	0x20002b60

08016a10 <lv_tick_get>:
     *If `tick_irq_flag` was cleared in `lv_tick_inc` try to read again
     *until `tick_irq_flag` remains `1`.*/
    uint32_t result;
    do {
        tick_irq_flag = 1;
        result        = sys_time;
 8016a10:	4b04      	ldr	r3, [pc, #16]	; (8016a24 <lv_tick_get+0x14>)
        tick_irq_flag = 1;
 8016a12:	f04f 0101 	mov.w	r1, #1
        result        = sys_time;
 8016a16:	6818      	ldr	r0, [r3, #0]
        tick_irq_flag = 1;
 8016a18:	4b03      	ldr	r3, [pc, #12]	; (8016a28 <lv_tick_get+0x18>)
 8016a1a:	7019      	strb	r1, [r3, #0]
    } while(!tick_irq_flag); /*Continue until see a non interrupted cycle*/
 8016a1c:	781a      	ldrb	r2, [r3, #0]
 8016a1e:	2a00      	cmp	r2, #0
 8016a20:	d0fb      	beq.n	8016a1a <lv_tick_get+0xa>

    return result;
#else
    return LV_TICK_CUSTOM_SYS_TIME_EXPR;
#endif
}
 8016a22:	4770      	bx	lr
 8016a24:	20002b60 	.word	0x20002b60
 8016a28:	20002b64 	.word	0x20002b64

08016a2c <lv_tick_elaps>:
 * Get the elapsed milliseconds since a previous time stamp
 * @param prev_tick a previous time stamp (return value of lv_tick_get() )
 * @return the elapsed milliseconds since 'prev_tick'
 */
uint32_t lv_tick_elaps(uint32_t prev_tick)
{
 8016a2c:	b510      	push	{r4, lr}
 8016a2e:	4604      	mov	r4, r0
    uint32_t act_time = lv_tick_get();
 8016a30:	f7ff ffee 	bl	8016a10 <lv_tick_get>
        prev_tick = UINT32_MAX - prev_tick + 1;
        prev_tick += act_time;
    }

    return prev_tick;
}
 8016a34:	1b00      	subs	r0, r0, r4
 8016a36:	bd10      	pop	{r4, pc}

08016a38 <lv_anim_path_linear>:
 * @return the current value to set
 */
int32_t lv_anim_path_linear(const lv_anim_t * a)
{
    /*Calculate the current step*/
    int32_t step = lv_map(a->act_time, 0, a->time, 0, LV_ANIM_RESOLUTION);
 8016a38:	f44f 6380 	mov.w	r3, #1024	; 0x400
{
 8016a3c:	b513      	push	{r0, r1, r4, lr}
    int32_t step = lv_map(a->act_time, 0, a->time, 0, LV_ANIM_RESOLUTION);
 8016a3e:	9300      	str	r3, [sp, #0]
 8016a40:	2300      	movs	r3, #0
{
 8016a42:	4604      	mov	r4, r0
    int32_t step = lv_map(a->act_time, 0, a->time, 0, LV_ANIM_RESOLUTION);
 8016a44:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8016a46:	4619      	mov	r1, r3
 8016a48:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8016a4a:	f000 fe44 	bl	80176d6 <lv_map>

    /*Get the new value which will be proportional to `step`
     *and the `start` and `end` values*/
    int32_t new_value;
    new_value = step * (a->end_value - a->start_value);
 8016a4e:	69e2      	ldr	r2, [r4, #28]
 8016a50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016a52:	1a9b      	subs	r3, r3, r2
 8016a54:	4358      	muls	r0, r3
    new_value = new_value >> LV_ANIM_RES_SHIFT;
    new_value += a->start_value;

    return new_value;
}
 8016a56:	eb02 20a0 	add.w	r0, r2, r0, asr #10
 8016a5a:	b002      	add	sp, #8
 8016a5c:	bd10      	pop	{r4, pc}
	...

08016a60 <anim_mark_list_change>:
            a->time = a->playback_now == 0 ? a->time_orig : a->playback_time;
        }
    }
}
static void anim_mark_list_change(void)
{
 8016a60:	b508      	push	{r3, lr}
    anim_list_changed = true;
 8016a62:	2201      	movs	r2, #1
 8016a64:	4b08      	ldr	r3, [pc, #32]	; (8016a88 <anim_mark_list_change+0x28>)
    if(_lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll)) == NULL)
 8016a66:	4809      	ldr	r0, [pc, #36]	; (8016a8c <anim_mark_list_change+0x2c>)
    anim_list_changed = true;
 8016a68:	701a      	strb	r2, [r3, #0]
    if(_lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll)) == NULL)
 8016a6a:	f000 fd60 	bl	801752e <_lv_ll_get_head>
 8016a6e:	4b08      	ldr	r3, [pc, #32]	; (8016a90 <anim_mark_list_change+0x30>)
 8016a70:	b920      	cbnz	r0, 8016a7c <anim_mark_list_change+0x1c>
        lv_timer_pause(_lv_anim_tmr);
 8016a72:	6818      	ldr	r0, [r3, #0]
    else
        lv_timer_resume(_lv_anim_tmr);
}
 8016a74:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        lv_timer_pause(_lv_anim_tmr);
 8016a78:	f001 befc 	b.w	8018874 <lv_timer_pause>
        lv_timer_resume(_lv_anim_tmr);
 8016a7c:	6818      	ldr	r0, [r3, #0]
}
 8016a7e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        lv_timer_resume(_lv_anim_tmr);
 8016a82:	f001 befc 	b.w	801887e <lv_timer_resume>
 8016a86:	bf00      	nop
 8016a88:	20002b6c 	.word	0x20002b6c
 8016a8c:	2000ae60 	.word	0x2000ae60
 8016a90:	20002b68 	.word	0x20002b68

08016a94 <anim_timer>:
{
 8016a94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    uint32_t elaps = lv_tick_elaps(last_timer_run);
 8016a98:	4e57      	ldr	r6, [pc, #348]	; (8016bf8 <anim_timer+0x164>)
{
 8016a9a:	b093      	sub	sp, #76	; 0x4c
    anim_run_round = anim_run_round ? false : true;
 8016a9c:	4d57      	ldr	r5, [pc, #348]	; (8016bfc <anim_timer+0x168>)
    uint32_t elaps = lv_tick_elaps(last_timer_run);
 8016a9e:	6830      	ldr	r0, [r6, #0]
 8016aa0:	f7ff ffc4 	bl	8016a2c <lv_tick_elaps>
    anim_run_round = anim_run_round ? false : true;
 8016aa4:	782b      	ldrb	r3, [r5, #0]
    uint32_t elaps = lv_tick_elaps(last_timer_run);
 8016aa6:	4607      	mov	r7, r0
    lv_anim_t * a = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 8016aa8:	4855      	ldr	r0, [pc, #340]	; (8016c00 <anim_timer+0x16c>)
    anim_run_round = anim_run_round ? false : true;
 8016aaa:	f083 0301 	eor.w	r3, r3, #1
        anim_list_changed = false;
 8016aae:	f8df 9154 	ldr.w	r9, [pc, #340]	; 8016c04 <anim_timer+0x170>
            a = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 8016ab2:	f8df 814c 	ldr.w	r8, [pc, #332]	; 8016c00 <anim_timer+0x16c>
    anim_run_round = anim_run_round ? false : true;
 8016ab6:	702b      	strb	r3, [r5, #0]
    lv_anim_t * a = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 8016ab8:	f000 fd39 	bl	801752e <_lv_ll_get_head>
 8016abc:	4604      	mov	r4, r0
    while(a != NULL) {
 8016abe:	b92c      	cbnz	r4, 8016acc <anim_timer+0x38>
    last_timer_run = lv_tick_get();
 8016ac0:	f7ff ffa6 	bl	8016a10 <lv_tick_get>
 8016ac4:	6030      	str	r0, [r6, #0]
}
 8016ac6:	b013      	add	sp, #76	; 0x4c
 8016ac8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        anim_list_changed = false;
 8016acc:	2300      	movs	r3, #0
        if(a->run_round != anim_run_round) {
 8016ace:	782a      	ldrb	r2, [r5, #0]
        anim_list_changed = false;
 8016ad0:	f889 3000 	strb.w	r3, [r9]
        if(a->run_round != anim_run_round) {
 8016ad4:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8016ad8:	f3c3 0180 	ubfx	r1, r3, #2, #1
 8016adc:	4291      	cmp	r1, r2
 8016ade:	f000 8086 	beq.w	8016bee <anim_timer+0x15a>
            a->run_round = anim_run_round; /*The list readying might be reset so need to know which anim has run already*/
 8016ae2:	f362 0382 	bfi	r3, r2, #2, #1
            if(!a->start_cb_called && a->act_time <= 0 && new_act_time >= 0) {
 8016ae6:	0719      	lsls	r1, r3, #28
 8016ae8:	b2da      	uxtb	r2, r3
            a->run_round = anim_run_round; /*The list readying might be reset so need to know which anim has run already*/
 8016aea:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
            if(!a->start_cb_called && a->act_time <= 0 && new_act_time >= 0) {
 8016aee:	d41a      	bmi.n	8016b26 <anim_timer+0x92>
            int32_t new_act_time = a->act_time + elaps;
 8016af0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
            if(!a->start_cb_called && a->act_time <= 0 && new_act_time >= 0) {
 8016af2:	2b00      	cmp	r3, #0
 8016af4:	dc17      	bgt.n	8016b26 <anim_timer+0x92>
 8016af6:	42fb      	cmn	r3, r7
 8016af8:	d415      	bmi.n	8016b26 <anim_timer+0x92>
                if(a->early_apply == 0 && a->get_value_cb) {
 8016afa:	07d2      	lsls	r2, r2, #31
 8016afc:	d409      	bmi.n	8016b12 <anim_timer+0x7e>
 8016afe:	6923      	ldr	r3, [r4, #16]
 8016b00:	b13b      	cbz	r3, 8016b12 <anim_timer+0x7e>
                    int32_t v_ofs  = a->get_value_cb(a);
 8016b02:	4620      	mov	r0, r4
 8016b04:	4798      	blx	r3
                    a->start_value += v_ofs;
 8016b06:	69e3      	ldr	r3, [r4, #28]
 8016b08:	4403      	add	r3, r0
 8016b0a:	61e3      	str	r3, [r4, #28]
                    a->end_value += v_ofs;
 8016b0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016b0e:	4418      	add	r0, r3
 8016b10:	6260      	str	r0, [r4, #36]	; 0x24
                if(a->start_cb) a->start_cb(a);
 8016b12:	68a3      	ldr	r3, [r4, #8]
 8016b14:	b10b      	cbz	r3, 8016b1a <anim_timer+0x86>
 8016b16:	4620      	mov	r0, r4
 8016b18:	4798      	blx	r3
                a->start_cb_called = 1;
 8016b1a:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8016b1e:	f043 0308 	orr.w	r3, r3, #8
 8016b22:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
            a->act_time += elaps;
 8016b26:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8016b28:	443b      	add	r3, r7
            if(a->act_time >= 0) {
 8016b2a:	2b00      	cmp	r3, #0
            a->act_time += elaps;
 8016b2c:	62e3      	str	r3, [r4, #44]	; 0x2c
            if(a->act_time >= 0) {
 8016b2e:	db2f      	blt.n	8016b90 <anim_timer+0xfc>
                if(a->act_time > a->time) a->act_time = a->time;
 8016b30:	6aa2      	ldr	r2, [r4, #40]	; 0x28
                new_value = a->path_cb(a);
 8016b32:	4620      	mov	r0, r4
                if(a->act_time > a->time) a->act_time = a->time;
 8016b34:	4293      	cmp	r3, r2
                new_value = a->path_cb(a);
 8016b36:	69a3      	ldr	r3, [r4, #24]
                if(a->act_time > a->time) a->act_time = a->time;
 8016b38:	bfc8      	it	gt
 8016b3a:	62e2      	strgt	r2, [r4, #44]	; 0x2c
                new_value = a->path_cb(a);
 8016b3c:	4798      	blx	r3
                if(new_value != a->current_value) {
 8016b3e:	6a23      	ldr	r3, [r4, #32]
                new_value = a->path_cb(a);
 8016b40:	4601      	mov	r1, r0
                if(new_value != a->current_value) {
 8016b42:	4283      	cmp	r3, r0
 8016b44:	d004      	beq.n	8016b50 <anim_timer+0xbc>
                    if(a->exec_cb) a->exec_cb(a->var, new_value);
 8016b46:	6863      	ldr	r3, [r4, #4]
                    a->current_value = new_value;
 8016b48:	6220      	str	r0, [r4, #32]
                    if(a->exec_cb) a->exec_cb(a->var, new_value);
 8016b4a:	b10b      	cbz	r3, 8016b50 <anim_timer+0xbc>
 8016b4c:	6820      	ldr	r0, [r4, #0]
 8016b4e:	4798      	blx	r3
                if(a->act_time >= a->time) {
 8016b50:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
 8016b54:	429a      	cmp	r2, r3
 8016b56:	db1b      	blt.n	8016b90 <anim_timer+0xfc>
    if(a->playback_now == 0 && a->repeat_cnt > 0 && a->repeat_cnt != LV_ANIM_REPEAT_INFINITE) {
 8016b58:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8016b5c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8016b5e:	f013 0302 	ands.w	r3, r3, #2
 8016b62:	d123      	bne.n	8016bac <anim_timer+0x118>
 8016b64:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
 8016b66:	b9d9      	cbnz	r1, 8016ba0 <anim_timer+0x10c>
    if(a->repeat_cnt == 0 && ((a->playback_time == 0) || (a->playback_time && a->playback_now == 1))) {
 8016b68:	2a00      	cmp	r2, #0
 8016b6a:	d13d      	bne.n	8016be8 <anim_timer+0x154>
        lv_memcpy(&a_tmp, a, sizeof(lv_anim_t));
 8016b6c:	2244      	movs	r2, #68	; 0x44
 8016b6e:	4621      	mov	r1, r4
 8016b70:	a801      	add	r0, sp, #4
 8016b72:	f000 fe19 	bl	80177a8 <lv_memcpy>
        _lv_ll_remove(&LV_GC_ROOT(_lv_anim_ll), a);
 8016b76:	4621      	mov	r1, r4
 8016b78:	4640      	mov	r0, r8
 8016b7a:	f000 fc9d 	bl	80174b8 <_lv_ll_remove>
        lv_mem_free(a);
 8016b7e:	4620      	mov	r0, r4
 8016b80:	f000 fdd8 	bl	8017734 <lv_mem_free>
        anim_mark_list_change();
 8016b84:	f7ff ff6c 	bl	8016a60 <anim_mark_list_change>
        if(a_tmp.ready_cb != NULL) a_tmp.ready_cb(&a_tmp);
 8016b88:	9b04      	ldr	r3, [sp, #16]
 8016b8a:	b10b      	cbz	r3, 8016b90 <anim_timer+0xfc>
 8016b8c:	a801      	add	r0, sp, #4
 8016b8e:	4798      	blx	r3
        if(anim_list_changed)
 8016b90:	f899 3000 	ldrb.w	r3, [r9]
 8016b94:	b35b      	cbz	r3, 8016bee <anim_timer+0x15a>
            a = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 8016b96:	4640      	mov	r0, r8
 8016b98:	f000 fcc9 	bl	801752e <_lv_ll_get_head>
            a = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 8016b9c:	4604      	mov	r4, r0
 8016b9e:	e78e      	b.n	8016abe <anim_timer+0x2a>
    if(a->playback_now == 0 && a->repeat_cnt > 0 && a->repeat_cnt != LV_ANIM_REPEAT_INFINITE) {
 8016ba0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8016ba4:	4281      	cmp	r1, r0
 8016ba6:	d004      	beq.n	8016bb2 <anim_timer+0x11e>
        a->repeat_cnt--;
 8016ba8:	3901      	subs	r1, #1
 8016baa:	87a1      	strh	r1, [r4, #60]	; 0x3c
    if(a->repeat_cnt == 0 && ((a->playback_time == 0) || (a->playback_time && a->playback_now == 1))) {
 8016bac:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
 8016bae:	2900      	cmp	r1, #0
 8016bb0:	d0da      	beq.n	8016b68 <anim_timer+0xd4>
        a->act_time = -(int32_t)(a->repeat_delay); /*Restart the animation*/
 8016bb2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8016bb4:	4249      	negs	r1, r1
 8016bb6:	62e1      	str	r1, [r4, #44]	; 0x2c
        if(a->playback_time != 0) {
 8016bb8:	2a00      	cmp	r2, #0
 8016bba:	d0e9      	beq.n	8016b90 <anim_timer+0xfc>
            if(a->playback_now == 0) a->act_time = -(int32_t)(a->playback_delay);
 8016bbc:	b913      	cbnz	r3, 8016bc4 <anim_timer+0x130>
 8016bbe:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8016bc0:	4249      	negs	r1, r1
 8016bc2:	62e1      	str	r1, [r4, #44]	; 0x2c
            a->playback_now = a->playback_now == 0 ? 1 : 0;
 8016bc4:	fab3 f383 	clz	r3, r3
 8016bc8:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
            tmp      = a->start_value;
 8016bcc:	69e0      	ldr	r0, [r4, #28]
            a->playback_now = a->playback_now == 0 ? 1 : 0;
 8016bce:	095b      	lsrs	r3, r3, #5
 8016bd0:	f363 0141 	bfi	r1, r3, #1, #1
            a->start_value = a->end_value;
 8016bd4:	6a63      	ldr	r3, [r4, #36]	; 0x24
            a->end_value   = tmp;
 8016bd6:	6260      	str	r0, [r4, #36]	; 0x24
            a->start_value = a->end_value;
 8016bd8:	61e3      	str	r3, [r4, #28]
            a->time = a->playback_now == 0 ? a->time_orig : a->playback_time;
 8016bda:	078b      	lsls	r3, r1, #30
            a->playback_now = a->playback_now == 0 ? 1 : 0;
 8016bdc:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
            a->time = a->playback_now == 0 ? a->time_orig : a->playback_time;
 8016be0:	bf58      	it	pl
 8016be2:	6c22      	ldrpl	r2, [r4, #64]	; 0x40
 8016be4:	62a2      	str	r2, [r4, #40]	; 0x28
 8016be6:	e7d3      	b.n	8016b90 <anim_timer+0xfc>
    if(a->repeat_cnt == 0 && ((a->playback_time == 0) || (a->playback_time && a->playback_now == 1))) {
 8016be8:	2b00      	cmp	r3, #0
 8016bea:	d0e2      	beq.n	8016bb2 <anim_timer+0x11e>
 8016bec:	e7be      	b.n	8016b6c <anim_timer+0xd8>
            a = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 8016bee:	4621      	mov	r1, r4
 8016bf0:	4640      	mov	r0, r8
 8016bf2:	f000 fca2 	bl	801753a <_lv_ll_get_next>
 8016bf6:	e7d1      	b.n	8016b9c <anim_timer+0x108>
 8016bf8:	20002b70 	.word	0x20002b70
 8016bfc:	20002b6d 	.word	0x20002b6d
 8016c00:	2000ae60 	.word	0x2000ae60
 8016c04:	20002b6c 	.word	0x20002b6c

08016c08 <_lv_anim_core_init>:
{
 8016c08:	b508      	push	{r3, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_anim_ll), sizeof(lv_anim_t));
 8016c0a:	2144      	movs	r1, #68	; 0x44
 8016c0c:	4807      	ldr	r0, [pc, #28]	; (8016c2c <_lv_anim_core_init+0x24>)
 8016c0e:	f000 fc14 	bl	801743a <_lv_ll_init>
    _lv_anim_tmr = lv_timer_create(anim_timer, LV_DISP_DEF_REFR_PERIOD, NULL);
 8016c12:	2200      	movs	r2, #0
 8016c14:	211e      	movs	r1, #30
 8016c16:	4806      	ldr	r0, [pc, #24]	; (8016c30 <_lv_anim_core_init+0x28>)
 8016c18:	f001 fd46 	bl	80186a8 <lv_timer_create>
 8016c1c:	4b05      	ldr	r3, [pc, #20]	; (8016c34 <_lv_anim_core_init+0x2c>)
 8016c1e:	6018      	str	r0, [r3, #0]
    anim_mark_list_change(); /*Turn off the animation timer*/
 8016c20:	f7ff ff1e 	bl	8016a60 <anim_mark_list_change>
    anim_list_changed = false;
 8016c24:	4b04      	ldr	r3, [pc, #16]	; (8016c38 <_lv_anim_core_init+0x30>)
 8016c26:	2200      	movs	r2, #0
 8016c28:	701a      	strb	r2, [r3, #0]
}
 8016c2a:	bd08      	pop	{r3, pc}
 8016c2c:	2000ae60 	.word	0x2000ae60
 8016c30:	08016a95 	.word	0x08016a95
 8016c34:	20002b68 	.word	0x20002b68
 8016c38:	20002b6c 	.word	0x20002b6c

08016c3c <lv_anim_init>:
{
 8016c3c:	b510      	push	{r4, lr}
    lv_memset_00(a, sizeof(lv_anim_t));
 8016c3e:	2144      	movs	r1, #68	; 0x44
{
 8016c40:	4604      	mov	r4, r0
    lv_memset_00(a, sizeof(lv_anim_t));
 8016c42:	f000 ff77 	bl	8017b34 <lv_memset_00>
    a->time    = 500;
 8016c46:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8016c4a:	62a3      	str	r3, [r4, #40]	; 0x28
    a->start_value   = 0;
 8016c4c:	2300      	movs	r3, #0
 8016c4e:	61e3      	str	r3, [r4, #28]
    a->end_value     = 100;
 8016c50:	2364      	movs	r3, #100	; 0x64
 8016c52:	6263      	str	r3, [r4, #36]	; 0x24
    a->repeat_cnt = 1;
 8016c54:	2301      	movs	r3, #1
 8016c56:	87a3      	strh	r3, [r4, #60]	; 0x3c
    a->path_cb = lv_anim_path_linear;
 8016c58:	4b04      	ldr	r3, [pc, #16]	; (8016c6c <lv_anim_init+0x30>)
 8016c5a:	61a3      	str	r3, [r4, #24]
    a->early_apply = 1;
 8016c5c:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8016c60:	f043 0301 	orr.w	r3, r3, #1
 8016c64:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8016c68:	bd10      	pop	{r4, pc}
 8016c6a:	bf00      	nop
 8016c6c:	08016a39 	.word	0x08016a39

08016c70 <lv_anim_del>:
{
 8016c70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016c74:	4606      	mov	r6, r0
    a        = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 8016c76:	4813      	ldr	r0, [pc, #76]	; (8016cc4 <lv_anim_del+0x54>)
{
 8016c78:	460d      	mov	r5, r1
    bool del = false;
 8016c7a:	f04f 0800 	mov.w	r8, #0
    a        = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 8016c7e:	f000 fc56 	bl	801752e <_lv_ll_get_head>
        a_next = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 8016c82:	f8df 9040 	ldr.w	r9, [pc, #64]	; 8016cc4 <lv_anim_del+0x54>
    a        = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 8016c86:	4604      	mov	r4, r0
    while(a != NULL) {
 8016c88:	b914      	cbnz	r4, 8016c90 <lv_anim_del+0x20>
}
 8016c8a:	4640      	mov	r0, r8
 8016c8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        a_next = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 8016c90:	4621      	mov	r1, r4
 8016c92:	4648      	mov	r0, r9
 8016c94:	f000 fc51 	bl	801753a <_lv_ll_get_next>
        if(a->var == var && (a->exec_cb == exec_cb || exec_cb == NULL)) {
 8016c98:	6823      	ldr	r3, [r4, #0]
        a_next = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 8016c9a:	4607      	mov	r7, r0
        if(a->var == var && (a->exec_cb == exec_cb || exec_cb == NULL)) {
 8016c9c:	42b3      	cmp	r3, r6
 8016c9e:	d10e      	bne.n	8016cbe <lv_anim_del+0x4e>
 8016ca0:	6863      	ldr	r3, [r4, #4]
 8016ca2:	42ab      	cmp	r3, r5
 8016ca4:	d000      	beq.n	8016ca8 <lv_anim_del+0x38>
 8016ca6:	b955      	cbnz	r5, 8016cbe <lv_anim_del+0x4e>
            _lv_ll_remove(&LV_GC_ROOT(_lv_anim_ll), a);
 8016ca8:	4621      	mov	r1, r4
 8016caa:	4648      	mov	r0, r9
            del = true;
 8016cac:	f04f 0801 	mov.w	r8, #1
            _lv_ll_remove(&LV_GC_ROOT(_lv_anim_ll), a);
 8016cb0:	f000 fc02 	bl	80174b8 <_lv_ll_remove>
            lv_mem_free(a);
 8016cb4:	4620      	mov	r0, r4
 8016cb6:	f000 fd3d 	bl	8017734 <lv_mem_free>
            anim_mark_list_change(); /*Read by `anim_timer`. It need to know if a delete occurred in
 8016cba:	f7ff fed1 	bl	8016a60 <anim_mark_list_change>
            del = true;
 8016cbe:	463c      	mov	r4, r7
 8016cc0:	e7e2      	b.n	8016c88 <lv_anim_del+0x18>
 8016cc2:	bf00      	nop
 8016cc4:	2000ae60 	.word	0x2000ae60

08016cc8 <lv_anim_start>:
    if(a->exec_cb != NULL) lv_anim_del(a->var, a->exec_cb); /*fp == NULL would delete all animations of var*/
 8016cc8:	6841      	ldr	r1, [r0, #4]
{
 8016cca:	b538      	push	{r3, r4, r5, lr}
 8016ccc:	4605      	mov	r5, r0
    if(a->exec_cb != NULL) lv_anim_del(a->var, a->exec_cb); /*fp == NULL would delete all animations of var*/
 8016cce:	b111      	cbz	r1, 8016cd6 <lv_anim_start+0xe>
 8016cd0:	6800      	ldr	r0, [r0, #0]
 8016cd2:	f7ff ffcd 	bl	8016c70 <lv_anim_del>
    if(_lv_ll_is_empty(&LV_GC_ROOT(_lv_anim_ll))) {
 8016cd6:	481c      	ldr	r0, [pc, #112]	; (8016d48 <lv_anim_start+0x80>)
 8016cd8:	f000 fc43 	bl	8017562 <_lv_ll_is_empty>
 8016cdc:	b118      	cbz	r0, 8016ce6 <lv_anim_start+0x1e>
        last_timer_run = lv_tick_get();
 8016cde:	f7ff fe97 	bl	8016a10 <lv_tick_get>
 8016ce2:	4b1a      	ldr	r3, [pc, #104]	; (8016d4c <lv_anim_start+0x84>)
 8016ce4:	6018      	str	r0, [r3, #0]
    lv_anim_t * new_anim = _lv_ll_ins_head(&LV_GC_ROOT(_lv_anim_ll));
 8016ce6:	4818      	ldr	r0, [pc, #96]	; (8016d48 <lv_anim_start+0x80>)
 8016ce8:	f000 fbaf 	bl	801744a <_lv_ll_ins_head>
    LV_ASSERT_MALLOC(new_anim);
 8016cec:	4604      	mov	r4, r0
 8016cee:	b900      	cbnz	r0, 8016cf2 <lv_anim_start+0x2a>
 8016cf0:	e7fe      	b.n	8016cf0 <lv_anim_start+0x28>
    a->time_orig = a->time;
 8016cf2:	6aab      	ldr	r3, [r5, #40]	; 0x28
    lv_memcpy(new_anim, a, sizeof(lv_anim_t));
 8016cf4:	4629      	mov	r1, r5
    a->run_round = anim_run_round;
 8016cf6:	4a16      	ldr	r2, [pc, #88]	; (8016d50 <lv_anim_start+0x88>)
    a->time_orig = a->time;
 8016cf8:	642b      	str	r3, [r5, #64]	; 0x40
    a->run_round = anim_run_round;
 8016cfa:	7812      	ldrb	r2, [r2, #0]
 8016cfc:	f895 303e 	ldrb.w	r3, [r5, #62]	; 0x3e
 8016d00:	f362 0382 	bfi	r3, r2, #2, #1
    lv_memcpy(new_anim, a, sizeof(lv_anim_t));
 8016d04:	2244      	movs	r2, #68	; 0x44
    a->run_round = anim_run_round;
 8016d06:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
    lv_memcpy(new_anim, a, sizeof(lv_anim_t));
 8016d0a:	f000 fd4d 	bl	80177a8 <lv_memcpy>
    if(a->var == a) new_anim->var = new_anim;
 8016d0e:	682b      	ldr	r3, [r5, #0]
 8016d10:	42ab      	cmp	r3, r5
    if(new_anim->early_apply) {
 8016d12:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
    if(a->var == a) new_anim->var = new_anim;
 8016d16:	bf08      	it	eq
 8016d18:	6024      	streq	r4, [r4, #0]
    if(new_anim->early_apply) {
 8016d1a:	07db      	lsls	r3, r3, #31
 8016d1c:	d50f      	bpl.n	8016d3e <lv_anim_start+0x76>
        if(new_anim->get_value_cb) {
 8016d1e:	6923      	ldr	r3, [r4, #16]
 8016d20:	b13b      	cbz	r3, 8016d32 <lv_anim_start+0x6a>
            int32_t v_ofs  = new_anim->get_value_cb(a);
 8016d22:	4628      	mov	r0, r5
 8016d24:	4798      	blx	r3
            new_anim->start_value += v_ofs;
 8016d26:	69e3      	ldr	r3, [r4, #28]
 8016d28:	4403      	add	r3, r0
 8016d2a:	61e3      	str	r3, [r4, #28]
            new_anim->end_value += v_ofs;
 8016d2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016d2e:	4418      	add	r0, r3
 8016d30:	6260      	str	r0, [r4, #36]	; 0x24
        if(new_anim->exec_cb && new_anim->var) new_anim->exec_cb(new_anim->var, new_anim->start_value);
 8016d32:	6863      	ldr	r3, [r4, #4]
 8016d34:	b11b      	cbz	r3, 8016d3e <lv_anim_start+0x76>
 8016d36:	6820      	ldr	r0, [r4, #0]
 8016d38:	b108      	cbz	r0, 8016d3e <lv_anim_start+0x76>
 8016d3a:	69e1      	ldr	r1, [r4, #28]
 8016d3c:	4798      	blx	r3
}
 8016d3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    anim_mark_list_change();
 8016d42:	f7ff be8d 	b.w	8016a60 <anim_mark_list_change>
 8016d46:	bf00      	nop
 8016d48:	2000ae60 	.word	0x2000ae60
 8016d4c:	20002b70 	.word	0x20002b70
 8016d50:	20002b6d 	.word	0x20002b6d

08016d54 <lv_anim_get>:
{
 8016d54:	b570      	push	{r4, r5, r6, lr}
    _LV_LL_READ(&LV_GC_ROOT(_lv_anim_ll), a) {
 8016d56:	4e09      	ldr	r6, [pc, #36]	; (8016d7c <lv_anim_get+0x28>)
{
 8016d58:	4604      	mov	r4, r0
    _LV_LL_READ(&LV_GC_ROOT(_lv_anim_ll), a) {
 8016d5a:	4808      	ldr	r0, [pc, #32]	; (8016d7c <lv_anim_get+0x28>)
{
 8016d5c:	460d      	mov	r5, r1
    _LV_LL_READ(&LV_GC_ROOT(_lv_anim_ll), a) {
 8016d5e:	f000 fbe6 	bl	801752e <_lv_ll_get_head>
 8016d62:	b900      	cbnz	r0, 8016d66 <lv_anim_get+0x12>
}
 8016d64:	bd70      	pop	{r4, r5, r6, pc}
        if(a->var == var && a->exec_cb == exec_cb) {
 8016d66:	6803      	ldr	r3, [r0, #0]
 8016d68:	42a3      	cmp	r3, r4
 8016d6a:	d102      	bne.n	8016d72 <lv_anim_get+0x1e>
 8016d6c:	6843      	ldr	r3, [r0, #4]
 8016d6e:	42ab      	cmp	r3, r5
 8016d70:	d0f8      	beq.n	8016d64 <lv_anim_get+0x10>
    _LV_LL_READ(&LV_GC_ROOT(_lv_anim_ll), a) {
 8016d72:	4601      	mov	r1, r0
 8016d74:	4630      	mov	r0, r6
 8016d76:	f000 fbe0 	bl	801753a <_lv_ll_get_next>
 8016d7a:	e7f2      	b.n	8016d62 <lv_anim_get+0xe>
 8016d7c:	2000ae60 	.word	0x2000ae60

08016d80 <lv_anim_speed_to_time>:
    uint32_t d    = LV_ABS(start - end);
 8016d80:	1a8a      	subs	r2, r1, r2
    uint32_t time = (d * 1000) / speed;
 8016d82:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    uint32_t d    = LV_ABS(start - end);
 8016d86:	2a00      	cmp	r2, #0
 8016d88:	bfb8      	it	lt
 8016d8a:	4252      	neglt	r2, r2
    uint32_t time = (d * 1000) / speed;
 8016d8c:	434a      	muls	r2, r1
 8016d8e:	fbb2 f3f0 	udiv	r3, r2, r0
    if(time == 0) {
 8016d92:	4282      	cmp	r2, r0
        time++;
 8016d94:	bf38      	it	cc
 8016d96:	3301      	addcc	r3, #1
}
 8016d98:	4618      	mov	r0, r3
 8016d9a:	4770      	bx	lr

08016d9c <lv_anim_path_ease_out>:
{
 8016d9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint32_t t = lv_map(a->act_time, 0, a->time, 0, 1024);
 8016d9e:	2300      	movs	r3, #0
 8016da0:	f44f 6580 	mov.w	r5, #1024	; 0x400
{
 8016da4:	4604      	mov	r4, r0
    uint32_t t = lv_map(a->act_time, 0, a->time, 0, 1024);
 8016da6:	9500      	str	r5, [sp, #0]
 8016da8:	4619      	mov	r1, r3
 8016daa:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8016dac:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8016dae:	f000 fc92 	bl	80176d6 <lv_map>
    int32_t step = lv_bezier3(t, 0, 900, 950, 1024);
 8016db2:	f240 33b6 	movw	r3, #950	; 0x3b6
 8016db6:	f44f 7261 	mov.w	r2, #900	; 0x384
 8016dba:	2100      	movs	r1, #0
 8016dbc:	9500      	str	r5, [sp, #0]
 8016dbe:	f000 fc09 	bl	80175d4 <lv_bezier3>
    new_value = step * (a->end_value - a->start_value);
 8016dc2:	69e2      	ldr	r2, [r4, #28]
 8016dc4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016dc6:	1a9b      	subs	r3, r3, r2
 8016dc8:	4358      	muls	r0, r3
}
 8016dca:	eb02 20a0 	add.w	r0, r2, r0, asr #10
 8016dce:	b003      	add	sp, #12
 8016dd0:	bd30      	pop	{r4, r5, pc}

08016dd2 <lv_anim_path_step>:
    if(a->act_time >= a->time)
 8016dd2:	e9d0 320a 	ldrd	r3, r2, [r0, #40]	; 0x28
 8016dd6:	429a      	cmp	r2, r3
        return a->end_value;
 8016dd8:	bfac      	ite	ge
 8016dda:	6a40      	ldrge	r0, [r0, #36]	; 0x24
        return a->start_value;
 8016ddc:	69c0      	ldrlt	r0, [r0, #28]
}
 8016dde:	4770      	bx	lr

08016de0 <lv_point_within_circle>:
 *   STATIC FUNCTIONS
 **********************/

static bool lv_point_within_circle(const lv_area_t * area, const lv_point_t * p)
{
    lv_coord_t r = (area->x2 - area->x1) / 2;
 8016de0:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
    /*Circle center*/
    lv_coord_t cx = area->x1 + r;
    lv_coord_t cy = area->y1 + r;

    /*Simplify the code by moving everything to (0, 0)*/
    lv_coord_t px = p->x - cx;
 8016de4:	880a      	ldrh	r2, [r1, #0]
    lv_coord_t py = p->y - cy;
 8016de6:	8849      	ldrh	r1, [r1, #2]
{
 8016de8:	b530      	push	{r4, r5, lr}
    lv_coord_t r = (area->x2 - area->x1) / 2;
 8016dea:	f9b0 5000 	ldrsh.w	r5, [r0]
    lv_coord_t py = p->y - cy;
 8016dee:	8840      	ldrh	r0, [r0, #2]
    lv_coord_t r = (area->x2 - area->x1) / 2;
 8016df0:	1b5b      	subs	r3, r3, r5
    lv_coord_t px = p->x - cx;
 8016df2:	1b52      	subs	r2, r2, r5
    lv_coord_t py = p->y - cy;
 8016df4:	1a09      	subs	r1, r1, r0
    lv_coord_t r = (area->x2 - area->x1) / 2;
 8016df6:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8016dfa:	105c      	asrs	r4, r3, #1
    lv_coord_t cx = area->x1 + r;
 8016dfc:	f3c3 034f 	ubfx	r3, r3, #1, #16
    lv_coord_t px = p->x - cx;
 8016e00:	1ad2      	subs	r2, r2, r3
    lv_coord_t py = p->y - cy;
 8016e02:	1acb      	subs	r3, r1, r3

    uint32_t r_sqrd = r * r;
 8016e04:	4364      	muls	r4, r4
    uint32_t dist = (px * px) + (py * py);
 8016e06:	fb13 f303 	smulbb	r3, r3, r3
 8016e0a:	fb12 3202 	smlabb	r2, r2, r2, r3

    if(dist <= r_sqrd)
        return true;
    else
        return false;
}
 8016e0e:	4294      	cmp	r4, r2
 8016e10:	bf34      	ite	cc
 8016e12:	2000      	movcc	r0, #0
 8016e14:	2001      	movcs	r0, #1
 8016e16:	bd30      	pop	{r4, r5, pc}

08016e18 <lv_area_set>:
    area_p->x2 = x2;
 8016e18:	8083      	strh	r3, [r0, #4]
    area_p->y2 = y2;
 8016e1a:	f9bd 3000 	ldrsh.w	r3, [sp]
    area_p->x1 = x1;
 8016e1e:	8001      	strh	r1, [r0, #0]
    area_p->y1 = y1;
 8016e20:	8042      	strh	r2, [r0, #2]
    area_p->y2 = y2;
 8016e22:	80c3      	strh	r3, [r0, #6]
}
 8016e24:	4770      	bx	lr

08016e26 <lv_area_set_width>:
    area_p->x2 = area_p->x1 + w - 1;
 8016e26:	3901      	subs	r1, #1
 8016e28:	8803      	ldrh	r3, [r0, #0]
 8016e2a:	4419      	add	r1, r3
 8016e2c:	8081      	strh	r1, [r0, #4]
}
 8016e2e:	4770      	bx	lr

08016e30 <lv_area_set_height>:
    area_p->y2 = area_p->y1 + h - 1;
 8016e30:	3901      	subs	r1, #1
 8016e32:	8843      	ldrh	r3, [r0, #2]
 8016e34:	4419      	add	r1, r3
 8016e36:	80c1      	strh	r1, [r0, #6]
}
 8016e38:	4770      	bx	lr

08016e3a <lv_area_get_size>:
    size = (uint32_t)(area_p->x2 - area_p->x1 + 1) * (area_p->y2 - area_p->y1 + 1);
 8016e3a:	f9b0 3000 	ldrsh.w	r3, [r0]
 8016e3e:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8016e42:	1ad2      	subs	r2, r2, r3
 8016e44:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8016e48:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
 8016e4c:	1a18      	subs	r0, r3, r0
 8016e4e:	3001      	adds	r0, #1
}
 8016e50:	fb02 0000 	mla	r0, r2, r0, r0
 8016e54:	4770      	bx	lr

08016e56 <lv_area_increase>:
    area->x1 -= w_extra;
 8016e56:	b289      	uxth	r1, r1
 8016e58:	8803      	ldrh	r3, [r0, #0]
    area->y1 -= h_extra;
 8016e5a:	b292      	uxth	r2, r2
    area->x1 -= w_extra;
 8016e5c:	1a5b      	subs	r3, r3, r1
 8016e5e:	8003      	strh	r3, [r0, #0]
    area->x2 += w_extra;
 8016e60:	8883      	ldrh	r3, [r0, #4]
 8016e62:	4419      	add	r1, r3
    area->y1 -= h_extra;
 8016e64:	8843      	ldrh	r3, [r0, #2]
 8016e66:	1a9b      	subs	r3, r3, r2
    area->x2 += w_extra;
 8016e68:	8081      	strh	r1, [r0, #4]
    area->y1 -= h_extra;
 8016e6a:	8043      	strh	r3, [r0, #2]
    area->y2 += h_extra;
 8016e6c:	88c3      	ldrh	r3, [r0, #6]
 8016e6e:	441a      	add	r2, r3
 8016e70:	80c2      	strh	r2, [r0, #6]
}
 8016e72:	4770      	bx	lr

08016e74 <lv_area_move>:
    area->x1 += x_ofs;
 8016e74:	8803      	ldrh	r3, [r0, #0]
 8016e76:	fa13 f381 	uxtah	r3, r3, r1
 8016e7a:	8003      	strh	r3, [r0, #0]
    area->x2 += x_ofs;
 8016e7c:	8883      	ldrh	r3, [r0, #4]
 8016e7e:	fa13 f181 	uxtah	r1, r3, r1
    area->y1 += y_ofs;
 8016e82:	8843      	ldrh	r3, [r0, #2]
 8016e84:	fa13 f382 	uxtah	r3, r3, r2
    area->x2 += x_ofs;
 8016e88:	8081      	strh	r1, [r0, #4]
    area->y1 += y_ofs;
 8016e8a:	8043      	strh	r3, [r0, #2]
    area->y2 += y_ofs;
 8016e8c:	88c3      	ldrh	r3, [r0, #6]
 8016e8e:	fa13 f282 	uxtah	r2, r3, r2
 8016e92:	80c2      	strh	r2, [r0, #6]
}
 8016e94:	4770      	bx	lr

08016e96 <_lv_area_intersect>:
    res_p->x1 = LV_MAX(a1_p->x1, a2_p->x1);
 8016e96:	f9b1 3000 	ldrsh.w	r3, [r1]
{
 8016e9a:	b570      	push	{r4, r5, r6, lr}
    res_p->x1 = LV_MAX(a1_p->x1, a2_p->x1);
 8016e9c:	f9b2 5000 	ldrsh.w	r5, [r2]
    res_p->y1 = LV_MAX(a1_p->y1, a2_p->y1);
 8016ea0:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
    res_p->x1 = LV_MAX(a1_p->x1, a2_p->x1);
 8016ea4:	429d      	cmp	r5, r3
    res_p->x2 = LV_MIN(a1_p->x2, a2_p->x2);
 8016ea6:	f9b1 6004 	ldrsh.w	r6, [r1, #4]
    res_p->y2 = LV_MIN(a1_p->y2, a2_p->y2);
 8016eaa:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
    res_p->x1 = LV_MAX(a1_p->x1, a2_p->x1);
 8016eae:	bfb8      	it	lt
 8016eb0:	461d      	movlt	r5, r3
    res_p->y1 = LV_MAX(a1_p->y1, a2_p->y1);
 8016eb2:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8016eb6:	42a3      	cmp	r3, r4
    res_p->x1 = LV_MAX(a1_p->x1, a2_p->x1);
 8016eb8:	8005      	strh	r5, [r0, #0]
    res_p->y1 = LV_MAX(a1_p->y1, a2_p->y1);
 8016eba:	bfb8      	it	lt
 8016ebc:	4623      	movlt	r3, r4
    res_p->x2 = LV_MIN(a1_p->x2, a2_p->x2);
 8016ebe:	f9b2 4004 	ldrsh.w	r4, [r2, #4]
    res_p->y2 = LV_MIN(a1_p->y2, a2_p->y2);
 8016ec2:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
    res_p->x2 = LV_MIN(a1_p->x2, a2_p->x2);
 8016ec6:	42b4      	cmp	r4, r6
    res_p->y1 = LV_MAX(a1_p->y1, a2_p->y1);
 8016ec8:	8043      	strh	r3, [r0, #2]
    res_p->x2 = LV_MIN(a1_p->x2, a2_p->x2);
 8016eca:	bfa8      	it	ge
 8016ecc:	4634      	movge	r4, r6
    res_p->y2 = LV_MIN(a1_p->y2, a2_p->y2);
 8016ece:	428a      	cmp	r2, r1
 8016ed0:	bfa8      	it	ge
 8016ed2:	460a      	movge	r2, r1
    if((res_p->x1 > res_p->x2) || (res_p->y1 > res_p->y2)) {
 8016ed4:	42a5      	cmp	r5, r4
    res_p->x2 = LV_MIN(a1_p->x2, a2_p->x2);
 8016ed6:	8084      	strh	r4, [r0, #4]
    res_p->y2 = LV_MIN(a1_p->y2, a2_p->y2);
 8016ed8:	80c2      	strh	r2, [r0, #6]
    if((res_p->x1 > res_p->x2) || (res_p->y1 > res_p->y2)) {
 8016eda:	dc04      	bgt.n	8016ee6 <_lv_area_intersect+0x50>
 8016edc:	4293      	cmp	r3, r2
 8016ede:	bfcc      	ite	gt
 8016ee0:	2000      	movgt	r0, #0
 8016ee2:	2001      	movle	r0, #1
}
 8016ee4:	bd70      	pop	{r4, r5, r6, pc}
        union_ok = false;
 8016ee6:	2000      	movs	r0, #0
 8016ee8:	e7fc      	b.n	8016ee4 <_lv_area_intersect+0x4e>

08016eea <_lv_area_join>:
    a_res_p->x1 = LV_MIN(a1_p->x1, a2_p->x1);
 8016eea:	f9b2 3000 	ldrsh.w	r3, [r2]
{
 8016eee:	b510      	push	{r4, lr}
    a_res_p->x1 = LV_MIN(a1_p->x1, a2_p->x1);
 8016ef0:	f9b1 4000 	ldrsh.w	r4, [r1]
 8016ef4:	42a3      	cmp	r3, r4
 8016ef6:	bfa8      	it	ge
 8016ef8:	4623      	movge	r3, r4
    a_res_p->y1 = LV_MIN(a1_p->y1, a2_p->y1);
 8016efa:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
    a_res_p->x1 = LV_MIN(a1_p->x1, a2_p->x1);
 8016efe:	8003      	strh	r3, [r0, #0]
    a_res_p->y1 = LV_MIN(a1_p->y1, a2_p->y1);
 8016f00:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8016f04:	42a3      	cmp	r3, r4
 8016f06:	bfa8      	it	ge
 8016f08:	4623      	movge	r3, r4
    a_res_p->x2 = LV_MAX(a1_p->x2, a2_p->x2);
 8016f0a:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
    a_res_p->y1 = LV_MIN(a1_p->y1, a2_p->y1);
 8016f0e:	8043      	strh	r3, [r0, #2]
    a_res_p->x2 = LV_MAX(a1_p->x2, a2_p->x2);
 8016f10:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 8016f14:	42a3      	cmp	r3, r4
 8016f16:	bfb8      	it	lt
 8016f18:	4623      	movlt	r3, r4
 8016f1a:	8083      	strh	r3, [r0, #4]
    a_res_p->y2 = LV_MAX(a1_p->y2, a2_p->y2);
 8016f1c:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 8016f20:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
 8016f24:	4293      	cmp	r3, r2
 8016f26:	bfb8      	it	lt
 8016f28:	4613      	movlt	r3, r2
 8016f2a:	80c3      	strh	r3, [r0, #6]
}
 8016f2c:	bd10      	pop	{r4, pc}

08016f2e <_lv_area_is_point_on>:
{
 8016f2e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if((p_p->x >= a_p->x1 && p_p->x <= a_p->x2) && ((p_p->y >= a_p->y1 && p_p->y <= a_p->y2))) {
 8016f32:	f9b1 3000 	ldrsh.w	r3, [r1]
{
 8016f36:	b085      	sub	sp, #20
    if((p_p->x >= a_p->x1 && p_p->x <= a_p->x2) && ((p_p->y >= a_p->y1 && p_p->y <= a_p->y2))) {
 8016f38:	f9b0 5000 	ldrsh.w	r5, [r0]
{
 8016f3c:	4689      	mov	r9, r1
    if((p_p->x >= a_p->x1 && p_p->x <= a_p->x2) && ((p_p->y >= a_p->y1 && p_p->y <= a_p->y2))) {
 8016f3e:	42ab      	cmp	r3, r5
 8016f40:	f2c0 8089 	blt.w	8017056 <_lv_area_is_point_on+0x128>
 8016f44:	f9b0 b004 	ldrsh.w	fp, [r0, #4]
 8016f48:	455b      	cmp	r3, fp
 8016f4a:	f300 8084 	bgt.w	8017056 <_lv_area_is_point_on+0x128>
 8016f4e:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 8016f52:	f9b0 a002 	ldrsh.w	sl, [r0, #2]
 8016f56:	4554      	cmp	r4, sl
 8016f58:	db7d      	blt.n	8017056 <_lv_area_is_point_on+0x128>
 8016f5a:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8016f5e:	429c      	cmp	r4, r3
 8016f60:	dc79      	bgt.n	8017056 <_lv_area_is_point_on+0x128>
    if(radius <= 0) {
 8016f62:	2a00      	cmp	r2, #0
 8016f64:	dc03      	bgt.n	8016f6e <_lv_area_is_point_on+0x40>
        return true;
 8016f66:	2001      	movs	r0, #1
}
 8016f68:	b005      	add	sp, #20
 8016f6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8016f6e:	fa1f f68b 	uxth.w	r6, fp
    corner_area.x1 = a_p->x1;
 8016f72:	f8ad 5008 	strh.w	r5, [sp, #8]
 8016f76:	fa1f f885 	uxth.w	r8, r5
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8016f7a:	9301      	str	r3, [sp, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8016f7c:	1c70      	adds	r0, r6, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8016f7e:	b29f      	uxth	r7, r3
 8016f80:	fa1f f48a 	uxth.w	r4, sl
    corner_area.y1 = a_p->y1;
 8016f84:	f8ad a00a 	strh.w	sl, [sp, #10]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8016f88:	eba0 0008 	sub.w	r0, r0, r8
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8016f8c:	46a4      	mov	ip, r4
    lv_coord_t w = lv_area_get_width(a_p) / 2;
 8016f8e:	f3c0 35c0 	ubfx	r5, r0, #15, #1
 8016f92:	fa05 f580 	sxtah	r5, r5, r0
 8016f96:	1c78      	adds	r0, r7, #1
 8016f98:	1b00      	subs	r0, r0, r4
    lv_coord_t h = lv_area_get_height(a_p) / 2;
 8016f9a:	f3c0 34c0 	ubfx	r4, r0, #15, #1
 8016f9e:	fa04 f080 	sxtah	r0, r4, r0
    lv_coord_t max_radius = LV_MIN(w, h);
 8016fa2:	106c      	asrs	r4, r5, #1
 8016fa4:	1040      	asrs	r0, r0, #1
    corner_area.x2 = a_p->x1 + radius;
 8016fa6:	4284      	cmp	r4, r0
 8016fa8:	bfa8      	it	ge
 8016faa:	4604      	movge	r4, r0
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 8016fac:	a802      	add	r0, sp, #8
    corner_area.x2 = a_p->x1 + radius;
 8016fae:	42a2      	cmp	r2, r4
 8016fb0:	bfa8      	it	ge
 8016fb2:	4622      	movge	r2, r4
    corner_area.y2 = a_p->y1 + radius;
 8016fb4:	fa1c f482 	uxtah	r4, ip, r2
    corner_area.x2 = a_p->x1 + radius;
 8016fb8:	fa18 f882 	uxtah	r8, r8, r2
 8016fbc:	b295      	uxth	r5, r2
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 8016fbe:	2200      	movs	r2, #0
    corner_area.y2 = a_p->y1 + radius;
 8016fc0:	b2a3      	uxth	r3, r4
    corner_area.x2 = a_p->x1 + radius;
 8016fc2:	fa1f f888 	uxth.w	r8, r8
    corner_area.y2 = a_p->y1 + radius;
 8016fc6:	b224      	sxth	r4, r4
 8016fc8:	9300      	str	r3, [sp, #0]
    corner_area.x2 = a_p->x1 + radius;
 8016fca:	f8ad 800c 	strh.w	r8, [sp, #12]
    corner_area.y2 = a_p->y1 + radius;
 8016fce:	f8ad 400e 	strh.w	r4, [sp, #14]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 8016fd2:	f7ff ffac 	bl	8016f2e <_lv_area_is_point_on>
 8016fd6:	9b01      	ldr	r3, [sp, #4]
 8016fd8:	4602      	mov	r2, r0
 8016fda:	b138      	cbz	r0, 8016fec <_lv_area_is_point_on+0xbe>
        corner_area.x2 += radius;
 8016fdc:	44a8      	add	r8, r5
 8016fde:	f8ad 800c 	strh.w	r8, [sp, #12]
        corner_area.y2 += radius;
 8016fe2:	9b00      	ldr	r3, [sp, #0]
 8016fe4:	441d      	add	r5, r3
 8016fe6:	f8ad 500e 	strh.w	r5, [sp, #14]
 8016fea:	e011      	b.n	8017010 <_lv_area_is_point_on+0xe2>
    corner_area.y1 = a_p->y2 - radius;
 8016fec:	1b7f      	subs	r7, r7, r5
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 8016fee:	4649      	mov	r1, r9
 8016ff0:	a802      	add	r0, sp, #8
    corner_area.y2 = a_p->y2;
 8016ff2:	f8ad 300e 	strh.w	r3, [sp, #14]
    corner_area.y1 = a_p->y2 - radius;
 8016ff6:	b2bf      	uxth	r7, r7
 8016ff8:	f8ad 700a 	strh.w	r7, [sp, #10]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 8016ffc:	f7ff ff97 	bl	8016f2e <_lv_area_is_point_on>
 8017000:	4602      	mov	r2, r0
 8017002:	b150      	cbz	r0, 801701a <_lv_area_is_point_on+0xec>
        corner_area.x2 += radius;
 8017004:	44a8      	add	r8, r5
 8017006:	f8ad 800c 	strh.w	r8, [sp, #12]
        corner_area.y1 -= radius;
 801700a:	1b7d      	subs	r5, r7, r5
 801700c:	f8ad 500a 	strh.w	r5, [sp, #10]
        return lv_point_within_circle(&corner_area, p_p);
 8017010:	4649      	mov	r1, r9
 8017012:	a802      	add	r0, sp, #8
 8017014:	f7ff fee4 	bl	8016de0 <lv_point_within_circle>
 8017018:	e7a6      	b.n	8016f68 <_lv_area_is_point_on+0x3a>
    corner_area.x1 = a_p->x2 - radius;
 801701a:	1b76      	subs	r6, r6, r5
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 801701c:	4649      	mov	r1, r9
 801701e:	a802      	add	r0, sp, #8
    corner_area.x2 = a_p->x2;
 8017020:	f8ad b00c 	strh.w	fp, [sp, #12]
    corner_area.x1 = a_p->x2 - radius;
 8017024:	b2b6      	uxth	r6, r6
 8017026:	f8ad 6008 	strh.w	r6, [sp, #8]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 801702a:	f7ff ff80 	bl	8016f2e <_lv_area_is_point_on>
 801702e:	4602      	mov	r2, r0
 8017030:	b118      	cbz	r0, 801703a <_lv_area_is_point_on+0x10c>
        corner_area.x1 -= radius;
 8017032:	1b76      	subs	r6, r6, r5
 8017034:	f8ad 6008 	strh.w	r6, [sp, #8]
 8017038:	e7e7      	b.n	801700a <_lv_area_is_point_on+0xdc>
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 801703a:	4649      	mov	r1, r9
 801703c:	a802      	add	r0, sp, #8
    corner_area.y1 = a_p->y1;
 801703e:	f8ad a00a 	strh.w	sl, [sp, #10]
    corner_area.y2 = a_p->y1 + radius;
 8017042:	f8ad 400e 	strh.w	r4, [sp, #14]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 8017046:	f7ff ff72 	bl	8016f2e <_lv_area_is_point_on>
 801704a:	2800      	cmp	r0, #0
 801704c:	d08b      	beq.n	8016f66 <_lv_area_is_point_on+0x38>
        corner_area.x1 -= radius;
 801704e:	1b76      	subs	r6, r6, r5
 8017050:	f8ad 6008 	strh.w	r6, [sp, #8]
 8017054:	e7c5      	b.n	8016fe2 <_lv_area_is_point_on+0xb4>
        return false;
 8017056:	2000      	movs	r0, #0
 8017058:	e786      	b.n	8016f68 <_lv_area_is_point_on+0x3a>

0801705a <_lv_area_is_on>:
    if((a1_p->x1 <= a2_p->x2) && (a1_p->x2 >= a2_p->x1) && (a1_p->y1 <= a2_p->y2) && (a1_p->y2 >= a2_p->y1)) {
 801705a:	f9b0 2000 	ldrsh.w	r2, [r0]
 801705e:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8017062:	429a      	cmp	r2, r3
 8017064:	dc14      	bgt.n	8017090 <_lv_area_is_on+0x36>
 8017066:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 801706a:	f9b1 3000 	ldrsh.w	r3, [r1]
 801706e:	429a      	cmp	r2, r3
 8017070:	db0e      	blt.n	8017090 <_lv_area_is_on+0x36>
 8017072:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8017076:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801707a:	429a      	cmp	r2, r3
 801707c:	dc08      	bgt.n	8017090 <_lv_area_is_on+0x36>
 801707e:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8017082:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8017086:	4298      	cmp	r0, r3
 8017088:	bfb4      	ite	lt
 801708a:	2000      	movlt	r0, #0
 801708c:	2001      	movge	r0, #1
 801708e:	4770      	bx	lr
        return false;
 8017090:	2000      	movs	r0, #0
}
 8017092:	4770      	bx	lr

08017094 <_lv_area_is_in>:
{
 8017094:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
 8017098:	f9b1 3000 	ldrsh.w	r3, [r1]
{
 801709c:	460c      	mov	r4, r1
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
 801709e:	f9b0 7000 	ldrsh.w	r7, [r0]
{
 80170a2:	4615      	mov	r5, r2
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
 80170a4:	42bb      	cmp	r3, r7
 80170a6:	dd03      	ble.n	80170b0 <_lv_area_is_in+0x1c>
    if(!is_in) return false;
 80170a8:	2000      	movs	r0, #0
}
 80170aa:	b002      	add	sp, #8
 80170ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
 80170b0:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80170b4:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 80170b8:	4299      	cmp	r1, r3
 80170ba:	dcf5      	bgt.n	80170a8 <_lv_area_is_in+0x14>
 80170bc:	f9b0 6004 	ldrsh.w	r6, [r0, #4]
 80170c0:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80170c4:	42b1      	cmp	r1, r6
 80170c6:	dbef      	blt.n	80170a8 <_lv_area_is_in+0x14>
       ain_p->y2 <= aholder_p->y2) {
 80170c8:	f9b0 8006 	ldrsh.w	r8, [r0, #6]
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
 80170cc:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 80170d0:	4541      	cmp	r1, r8
 80170d2:	dbe9      	blt.n	80170a8 <_lv_area_is_in+0x14>
    if(radius == 0) return true;
 80170d4:	b32a      	cbz	r2, 8017122 <_lv_area_is_in+0x8e>
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 80170d6:	a901      	add	r1, sp, #4
 80170d8:	4620      	mov	r0, r4
    p.x = ain_p->x1;
 80170da:	f8ad 7004 	strh.w	r7, [sp, #4]
    p.y = ain_p->y1;
 80170de:	f8ad 3006 	strh.w	r3, [sp, #6]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 80170e2:	f7ff ff24 	bl	8016f2e <_lv_area_is_point_on>
 80170e6:	2800      	cmp	r0, #0
 80170e8:	d0de      	beq.n	80170a8 <_lv_area_is_in+0x14>
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 80170ea:	462a      	mov	r2, r5
 80170ec:	a901      	add	r1, sp, #4
 80170ee:	4620      	mov	r0, r4
    p.x = ain_p->x2;
 80170f0:	f8ad 6004 	strh.w	r6, [sp, #4]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 80170f4:	f7ff ff1b 	bl	8016f2e <_lv_area_is_point_on>
 80170f8:	2800      	cmp	r0, #0
 80170fa:	d0d5      	beq.n	80170a8 <_lv_area_is_in+0x14>
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 80170fc:	462a      	mov	r2, r5
 80170fe:	a901      	add	r1, sp, #4
 8017100:	4620      	mov	r0, r4
    p.x = ain_p->x1;
 8017102:	f8ad 7004 	strh.w	r7, [sp, #4]
    p.y = ain_p->y2;
 8017106:	f8ad 8006 	strh.w	r8, [sp, #6]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 801710a:	f7ff ff10 	bl	8016f2e <_lv_area_is_point_on>
 801710e:	2800      	cmp	r0, #0
 8017110:	d0ca      	beq.n	80170a8 <_lv_area_is_in+0x14>
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 8017112:	462a      	mov	r2, r5
 8017114:	a901      	add	r1, sp, #4
 8017116:	4620      	mov	r0, r4
    p.x = ain_p->x2;
 8017118:	f8ad 6004 	strh.w	r6, [sp, #4]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 801711c:	f7ff ff07 	bl	8016f2e <_lv_area_is_point_on>
 8017120:	e7c3      	b.n	80170aa <_lv_area_is_in+0x16>
    if(radius == 0) return true;
 8017122:	2001      	movs	r0, #1
 8017124:	e7c1      	b.n	80170aa <_lv_area_is_in+0x16>

08017126 <lv_color_mix>:
 * @param c2 the second color to mix (usually the background)
 * @param mix The ratio of the colors. 0: full `c2`, 255: full `c1`, 127: half `c1` and half`c2`
 * @return the mixed color
 */
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
 8017126:	b5f0      	push	{r4, r5, r6, r7, lr}
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8017128:	f1c2 05ff 	rsb	r5, r2, #255	; 0xff
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 801712c:	f3c1 1445 	ubfx	r4, r1, #5, #6
 8017130:	f3c0 1345 	ubfx	r3, r0, #5, #6
 8017134:	f248 0681 	movw	r6, #32897	; 0x8081
 8017138:	436c      	muls	r4, r5
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 801713a:	f001 071f 	and.w	r7, r1, #31
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 801713e:	f3c1 21c4 	ubfx	r1, r1, #11, #5
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8017142:	fb03 4302 	mla	r3, r3, r2, r4
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8017146:	436f      	muls	r7, r5
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8017148:	3380      	adds	r3, #128	; 0x80
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 801714a:	434d      	muls	r5, r1
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 801714c:	4373      	muls	r3, r6
#else
    /*LV_COLOR_DEPTH == 1*/
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
#endif

    return ret;
 801714e:	f3c3 54c5 	ubfx	r4, r3, #23, #6
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8017152:	f000 031f 	and.w	r3, r0, #31
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8017156:	f3c0 20c4 	ubfx	r0, r0, #11, #5
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 801715a:	fb03 7302 	mla	r3, r3, r2, r7
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 801715e:	fb00 5202 	mla	r2, r0, r2, r5
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8017162:	3380      	adds	r3, #128	; 0x80
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8017164:	3280      	adds	r2, #128	; 0x80
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8017166:	4373      	muls	r3, r6
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8017168:	4372      	muls	r2, r6
    return ret;
 801716a:	f3c3 53c4 	ubfx	r3, r3, #23, #5
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 801716e:	0dd0      	lsrs	r0, r2, #23
    return ret;
 8017170:	ea43 1344 	orr.w	r3, r3, r4, lsl #5
}
 8017174:	ea43 20c0 	orr.w	r0, r3, r0, lsl #11
 8017178:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801717a <lv_color_fill>:

LV_ATTRIBUTE_FAST_MEM void lv_color_fill(lv_color_t * buf, lv_color_t color, uint32_t px_num)
{
#if LV_COLOR_DEPTH == 16
    uintptr_t buf_int = (uintptr_t) buf;
    if(buf_int & 0x3) {
 801717a:	0783      	lsls	r3, r0, #30
{
 801717c:	b510      	push	{r4, lr}
 801717e:	b28c      	uxth	r4, r1
        *buf = color;
        buf++;
        px_num--;
 8017180:	bf1c      	itt	ne
 8017182:	f102 32ff 	addne.w	r2, r2, #4294967295
        *buf = color;
 8017186:	f820 1b02 	strhne.w	r1, [r0], #2
    }

    uint32_t c32 = color.full + (color.full << 16);
 801718a:	eb04 4304 	add.w	r3, r4, r4, lsl #16
    uint32_t * buf32 = (uint32_t *)buf;

    while(px_num > 16) {
 801718e:	2a10      	cmp	r2, #16
 8017190:	4601      	mov	r1, r0
 8017192:	f100 0020 	add.w	r0, r0, #32
 8017196:	d804      	bhi.n	80171a2 <lv_color_fill+0x28>
 8017198:	eb01 0242 	add.w	r2, r1, r2, lsl #1
        px_num -= 16;
    }

    buf = (lv_color_t *)buf32;

    while(px_num) {
 801719c:	4291      	cmp	r1, r2
 801719e:	d10a      	bne.n	80171b6 <lv_color_fill+0x3c>
        *buf = color;
        buf++;
        px_num --;
    }
#endif
}
 80171a0:	bd10      	pop	{r4, pc}
        px_num -= 16;
 80171a2:	3a10      	subs	r2, #16
        *buf32 = c32;
 80171a4:	e940 3308 	strd	r3, r3, [r0, #-32]
        *buf32 = c32;
 80171a8:	e940 3306 	strd	r3, r3, [r0, #-24]
        *buf32 = c32;
 80171ac:	e940 3304 	strd	r3, r3, [r0, #-16]
        *buf32 = c32;
 80171b0:	e940 3302 	strd	r3, r3, [r0, #-8]
        px_num -= 16;
 80171b4:	e7eb      	b.n	801718e <lv_color_fill+0x14>
        *buf = color;
 80171b6:	f821 4b02 	strh.w	r4, [r1], #2
        px_num --;
 80171ba:	e7ef      	b.n	801719c <lv_color_fill+0x22>

080171bc <lv_color_darken>:
{
    return lv_color_mix(lv_color_white(), c, lvl);
}

lv_color_t lv_color_darken(lv_color_t c, lv_opa_t lvl)
{
 80171bc:	460a      	mov	r2, r1
    return lv_color_mix(lv_color_black(), c, lvl);
 80171be:	4601      	mov	r1, r0
 80171c0:	f04f 0000 	mov.w	r0, #0
 80171c4:	f7ff bfaf 	b.w	8017126 <lv_color_mix>

080171c8 <lv_color_hsv_to_rgb>:
 * @return the given RGB color in RGB (with LV_COLOR_DEPTH depth)
 */
lv_color_t lv_color_hsv_to_rgb(uint16_t h, uint8_t s, uint8_t v)
{
    h = (uint32_t)((uint32_t)h * 255) / 360;
    s = (uint16_t)((uint16_t)s * 255) / 100;
 80171c8:	ebc1 2101 	rsb	r1, r1, r1, lsl #8
 80171cc:	2364      	movs	r3, #100	; 0x64
    v = (uint16_t)((uint16_t)v * 255) / 100;
 80171ce:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
{
 80171d2:	b530      	push	{r4, r5, lr}
    s = (uint16_t)((uint16_t)s * 255) / 100;
 80171d4:	b28c      	uxth	r4, r1
    v = (uint16_t)((uint16_t)v * 255) / 100;
 80171d6:	b291      	uxth	r1, r2
    s = (uint16_t)((uint16_t)s * 255) / 100;
 80171d8:	fbb4 f4f3 	udiv	r4, r4, r3
    v = (uint16_t)((uint16_t)v * 255) / 100;
 80171dc:	fbb1 f1f3 	udiv	r1, r1, r3

    uint8_t r, g, b;

    uint8_t region, remainder, p, q, t;

    if(s == 0) {
 80171e0:	f014 02ff 	ands.w	r2, r4, #255	; 0xff
    v = (uint16_t)((uint16_t)v * 255) / 100;
 80171e4:	b2c9      	uxtb	r1, r1
    if(s == 0) {
 80171e6:	d10a      	bne.n	80171fe <lv_color_hsv_to_rgb+0x36>
    return (uint8_t)(bright >> 3);
}

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 80171e8:	08ca      	lsrs	r2, r1, #3
 80171ea:	f04f 0000 	mov.w	r0, #0
 80171ee:	0889      	lsrs	r1, r1, #2
 80171f0:	f362 0004 	bfi	r0, r2, #0, #5
 80171f4:	f361 104a 	bfi	r0, r1, #5, #6
 80171f8:	f362 20cf 	bfi	r0, r2, #11, #5
            break;
    }

    lv_color_t result = lv_color_make(r, g, b);
    return result;
}
 80171fc:	bd30      	pop	{r4, r5, pc}
    h = (uint32_t)((uint32_t)h * 255) / 360;
 80171fe:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8017202:	ebc0 2000 	rsb	r0, r0, r0, lsl #8
 8017206:	fbb0 f0f3 	udiv	r0, r0, r3
    region    = h / 43;
 801720a:	232b      	movs	r3, #43	; 0x2b
 801720c:	b284      	uxth	r4, r0
 801720e:	fbb4 f4f3 	udiv	r4, r4, r3
    remainder = (h - (region * 43)) * 6;
 8017212:	f06f 032a 	mvn.w	r3, #42	; 0x2a
    region    = h / 43;
 8017216:	b2e4      	uxtb	r4, r4
    remainder = (h - (region * 43)) * 6;
 8017218:	fb03 0304 	mla	r3, r3, r4, r0
    p = (v * (255 - s)) >> 8;
 801721c:	f1c2 00ff 	rsb	r0, r2, #255	; 0xff
    remainder = (h - (region * 43)) * 6;
 8017220:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    p = (v * (255 - s)) >> 8;
 8017224:	4348      	muls	r0, r1
    remainder = (h - (region * 43)) * 6;
 8017226:	005b      	lsls	r3, r3, #1
    p = (v * (255 - s)) >> 8;
 8017228:	f3c0 2007 	ubfx	r0, r0, #8, #8
    remainder = (h - (region * 43)) * 6;
 801722c:	b2db      	uxtb	r3, r3
    q = (v * (255 - ((s * remainder) >> 8))) >> 8;
 801722e:	fb12 f503 	smulbb	r5, r2, r3
    t = (v * (255 - ((s * (255 - remainder)) >> 8))) >> 8;
 8017232:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8017236:	4353      	muls	r3, r2
    q = (v * (255 - ((s * remainder) >> 8))) >> 8;
 8017238:	122d      	asrs	r5, r5, #8
    t = (v * (255 - ((s * (255 - remainder)) >> 8))) >> 8;
 801723a:	121b      	asrs	r3, r3, #8
    q = (v * (255 - ((s * remainder) >> 8))) >> 8;
 801723c:	f1c5 05ff 	rsb	r5, r5, #255	; 0xff
    t = (v * (255 - ((s * (255 - remainder)) >> 8))) >> 8;
 8017240:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
    q = (v * (255 - ((s * remainder) >> 8))) >> 8;
 8017244:	434d      	muls	r5, r1
    t = (v * (255 - ((s * (255 - remainder)) >> 8))) >> 8;
 8017246:	434b      	muls	r3, r1
    q = (v * (255 - ((s * remainder) >> 8))) >> 8;
 8017248:	f3c5 2507 	ubfx	r5, r5, #8, #8
    t = (v * (255 - ((s * (255 - remainder)) >> 8))) >> 8;
 801724c:	f3c3 2307 	ubfx	r3, r3, #8, #8
    switch(region) {
 8017250:	2c04      	cmp	r4, #4
 8017252:	d81f      	bhi.n	8017294 <lv_color_hsv_to_rgb+0xcc>
 8017254:	e8df f004 	tbb	[pc, r4]
 8017258:	15100305 	.word	0x15100305
 801725c:	1a          	.byte	0x1a
 801725d:	00          	.byte	0x00
    t = (v * (255 - ((s * (255 - remainder)) >> 8))) >> 8;
 801725e:	460b      	mov	r3, r1
 8017260:	4629      	mov	r1, r5
    return result;
 8017262:	f3c0 00c7 	ubfx	r0, r0, #3, #8
 8017266:	f3c3 0387 	ubfx	r3, r3, #2, #8
 801726a:	ea40 1343 	orr.w	r3, r0, r3, lsl #5
 801726e:	f3c1 00c7 	ubfx	r0, r1, #3, #8
 8017272:	ea43 20c0 	orr.w	r0, r3, r0, lsl #11
 8017276:	e7c1      	b.n	80171fc <lv_color_hsv_to_rgb+0x34>
            break;
 8017278:	460a      	mov	r2, r1
            r = p;
 801727a:	4601      	mov	r1, r0
            b = t;
 801727c:	4618      	mov	r0, r3
            g = v;
 801727e:	4613      	mov	r3, r2
            break;
 8017280:	e7ef      	b.n	8017262 <lv_color_hsv_to_rgb+0x9a>
            break;
 8017282:	460a      	mov	r2, r1
            g = q;
 8017284:	462b      	mov	r3, r5
            r = p;
 8017286:	4601      	mov	r1, r0
            b = v;
 8017288:	4610      	mov	r0, r2
            break;
 801728a:	e7ea      	b.n	8017262 <lv_color_hsv_to_rgb+0x9a>
 801728c:	460a      	mov	r2, r1
            r = t;
 801728e:	4619      	mov	r1, r3
            g = p;
 8017290:	4603      	mov	r3, r0
 8017292:	e7f9      	b.n	8017288 <lv_color_hsv_to_rgb+0xc0>
            g = p;
 8017294:	4603      	mov	r3, r0
            b = q;
 8017296:	4628      	mov	r0, r5
            break;
 8017298:	e7e3      	b.n	8017262 <lv_color_hsv_to_rgb+0x9a>
	...

0801729c <lv_palette_main>:
        LV_COLOR_MAKE(0x00, 0x96, 0x88), LV_COLOR_MAKE(0x4C, 0xAF, 0x50), LV_COLOR_MAKE(0x8B, 0xC3, 0x4A), LV_COLOR_MAKE(0xCD, 0xDC, 0x39),
        LV_COLOR_MAKE(0xFF, 0xEB, 0x3B), LV_COLOR_MAKE(0xFF, 0xC1, 0x07), LV_COLOR_MAKE(0xFF, 0x98, 0x00), LV_COLOR_MAKE(0xFF, 0x57, 0x22),
        LV_COLOR_MAKE(0x79, 0x55, 0x48), LV_COLOR_MAKE(0x60, 0x7D, 0x8B), LV_COLOR_MAKE(0x9E, 0x9E, 0x9E)
    };

    if(p >= _LV_PALETTE_LAST) {
 801729c:	2812      	cmp	r0, #18
        LV_LOG_WARN("Invalid palette: %d", p);
        return lv_color_black();
    }

    return colors[p];
 801729e:	bf96      	itet	ls
 80172a0:	4b02      	ldrls	r3, [pc, #8]	; (80172ac <lv_palette_main+0x10>)
 80172a2:	2000      	movhi	r0, #0
 80172a4:	f833 0010 	ldrhls.w	r0, [r3, r0, lsl #1]

}
 80172a8:	4770      	bx	lr
 80172aa:	bf00      	nop
 80172ac:	08028c5c 	.word	0x08028c5c

080172b0 <lv_palette_lighten>:
            {LV_COLOR_MAKE(0x8D, 0x6E, 0x63), LV_COLOR_MAKE(0xA1, 0x88, 0x7F), LV_COLOR_MAKE(0xBC, 0xAA, 0xA4), LV_COLOR_MAKE(0xD7, 0xCC, 0xC8), LV_COLOR_MAKE(0xEF, 0xEB, 0xE9)},
            {LV_COLOR_MAKE(0x78, 0x90, 0x9C), LV_COLOR_MAKE(0x90, 0xA4, 0xAE), LV_COLOR_MAKE(0xB0, 0xBE, 0xC5), LV_COLOR_MAKE(0xCF, 0xD8, 0xDC), LV_COLOR_MAKE(0xEC, 0xEF, 0xF1)},
            {LV_COLOR_MAKE(0xBD, 0xBD, 0xBD), LV_COLOR_MAKE(0xE0, 0xE0, 0xE0), LV_COLOR_MAKE(0xEE, 0xEE, 0xEE), LV_COLOR_MAKE(0xF5, 0xF5, 0xF5), LV_COLOR_MAKE(0xFA, 0xFA, 0xFA)},
    };

     if(p >= _LV_PALETTE_LAST) {
 80172b0:	2812      	cmp	r0, #18
 80172b2:	d902      	bls.n	80172ba <lv_palette_lighten+0xa>
 80172b4:	f04f 0000 	mov.w	r0, #0
 **********************/
/*Source: https://vuetifyjs.com/en/styles/colors/#material-colors*/

lv_color_t lv_palette_main(lv_palette_t p);
static inline lv_color_t lv_color_white(void) { return lv_color_make(0xff, 0xff, 0xff);}
static inline lv_color_t lv_color_black(void) { return lv_color_make(0x00, 0x0, 0x00);}
 80172b8:	4770      	bx	lr
         LV_LOG_WARN("Invalid palette: %d", p);
         return lv_color_black();
     }

     if(lvl == 0 || lvl > 5) {
 80172ba:	3901      	subs	r1, #1
 80172bc:	b2c9      	uxtb	r1, r1
 80172be:	2904      	cmp	r1, #4
 80172c0:	d8f8      	bhi.n	80172b4 <lv_palette_lighten+0x4>
         return lv_color_black();
     }

     lvl--;

     return colors[p][lvl];
 80172c2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80172c6:	4b02      	ldr	r3, [pc, #8]	; (80172d0 <lv_palette_lighten+0x20>)
 80172c8:	4408      	add	r0, r1
 80172ca:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
 80172ce:	4770      	bx	lr
 80172d0:	08028c82 	.word	0x08028c82

080172d4 <lv_palette_darken>:
            {LV_COLOR_MAKE(0x6D, 0x4C, 0x41), LV_COLOR_MAKE(0x5D, 0x40, 0x37), LV_COLOR_MAKE(0x4E, 0x34, 0x2E), LV_COLOR_MAKE(0x3E, 0x27, 0x23)},
            {LV_COLOR_MAKE(0x54, 0x6E, 0x7A), LV_COLOR_MAKE(0x45, 0x5A, 0x64), LV_COLOR_MAKE(0x37, 0x47, 0x4F), LV_COLOR_MAKE(0x26, 0x32, 0x38)},
            {LV_COLOR_MAKE(0x75, 0x75, 0x75), LV_COLOR_MAKE(0x61, 0x61, 0x61), LV_COLOR_MAKE(0x42, 0x42, 0x42), LV_COLOR_MAKE(0x21, 0x21, 0x21)},
    };

     if(p >= _LV_PALETTE_LAST) {
 80172d4:	2812      	cmp	r0, #18
 80172d6:	d902      	bls.n	80172de <lv_palette_darken+0xa>
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 80172d8:	f04f 0000 	mov.w	r0, #0
static inline lv_color_t lv_color_black(void) { return lv_color_make(0x00, 0x0, 0x00);}
 80172dc:	4770      	bx	lr
         LV_LOG_WARN("Invalid palette: %d", p);
         return lv_color_black();
     }

     if(lvl == 0 || lvl > 4) {
 80172de:	3901      	subs	r1, #1
 80172e0:	b2c9      	uxtb	r1, r1
 80172e2:	2903      	cmp	r1, #3
 80172e4:	d8f8      	bhi.n	80172d8 <lv_palette_darken+0x4>
         return lv_color_black();
     }

     lvl--;

     return colors[p][lvl];
 80172e6:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 80172ea:	4b02      	ldr	r3, [pc, #8]	; (80172f4 <lv_palette_darken+0x20>)
 80172ec:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
 80172f0:	4770      	bx	lr
 80172f2:	bf00      	nop
 80172f4:	08028d40 	.word	0x08028d40

080172f8 <_lv_fs_init>:
 *   GLOBAL FUNCTIONS
 **********************/

void _lv_fs_init(void)
{
    _lv_ll_init(&LV_GC_ROOT(_lv_fsdrv_ll), sizeof(lv_fs_drv_t *));
 80172f8:	2104      	movs	r1, #4
 80172fa:	4801      	ldr	r0, [pc, #4]	; (8017300 <_lv_fs_init+0x8>)
 80172fc:	f000 b89d 	b.w	801743a <_lv_ll_init>
 8017300:	2000aeec 	.word	0x2000aeec

08017304 <lv_fs_close>:

    return LV_FS_RES_OK;
}

lv_fs_res_t lv_fs_close(lv_fs_file_t * file_p)
{
 8017304:	b510      	push	{r4, lr}
 8017306:	4604      	mov	r4, r0
    if(file_p->drv == NULL) {
 8017308:	6840      	ldr	r0, [r0, #4]
 801730a:	b138      	cbz	r0, 801731c <lv_fs_close+0x18>
        return LV_FS_RES_INV_PARAM;
    }

    if(file_p->drv->close_cb == NULL) {
 801730c:	68c3      	ldr	r3, [r0, #12]
 801730e:	b13b      	cbz	r3, 8017320 <lv_fs_close+0x1c>
        return LV_FS_RES_NOT_IMP;
    }

    lv_fs_res_t res = file_p->drv->close_cb(file_p->drv, file_p->file_d);
 8017310:	6821      	ldr	r1, [r4, #0]
 8017312:	4798      	blx	r3

    file_p->file_d = NULL;
 8017314:	2300      	movs	r3, #0
    file_p->drv    = NULL;
 8017316:	e9c4 3300 	strd	r3, r3, [r4]

    return res;
}
 801731a:	bd10      	pop	{r4, pc}
        return LV_FS_RES_INV_PARAM;
 801731c:	200b      	movs	r0, #11
 801731e:	e7fc      	b.n	801731a <lv_fs_close+0x16>
        return LV_FS_RES_NOT_IMP;
 8017320:	2009      	movs	r0, #9
 8017322:	e7fa      	b.n	801731a <lv_fs_close+0x16>

08017324 <lv_fs_read>:

lv_fs_res_t lv_fs_read(lv_fs_file_t * file_p, void * buf, uint32_t btr, uint32_t * br)
{
 8017324:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if(br != NULL) *br = 0;
 8017326:	461c      	mov	r4, r3
 8017328:	b10b      	cbz	r3, 801732e <lv_fs_read+0xa>
 801732a:	2300      	movs	r3, #0
 801732c:	6023      	str	r3, [r4, #0]
    if(file_p->drv == NULL) return LV_FS_RES_INV_PARAM;
 801732e:	6845      	ldr	r5, [r0, #4]
 8017330:	b17d      	cbz	r5, 8017352 <lv_fs_read+0x2e>
    if(file_p->drv->read_cb == NULL) return LV_FS_RES_NOT_IMP;
 8017332:	692e      	ldr	r6, [r5, #16]
 8017334:	b17e      	cbz	r6, 8017356 <lv_fs_read+0x32>

    uint32_t br_tmp = 0;
 8017336:	2300      	movs	r3, #0
 8017338:	9303      	str	r3, [sp, #12]
    lv_fs_res_t res = file_p->drv->read_cb(file_p->drv, file_p->file_d, buf, btr, &br_tmp);
 801733a:	ab03      	add	r3, sp, #12
 801733c:	9300      	str	r3, [sp, #0]
 801733e:	4613      	mov	r3, r2
 8017340:	460a      	mov	r2, r1
 8017342:	6801      	ldr	r1, [r0, #0]
 8017344:	4628      	mov	r0, r5
 8017346:	47b0      	blx	r6
    if(br != NULL) *br = br_tmp;
 8017348:	b10c      	cbz	r4, 801734e <lv_fs_read+0x2a>
 801734a:	9b03      	ldr	r3, [sp, #12]
 801734c:	6023      	str	r3, [r4, #0]

    return res;
}
 801734e:	b004      	add	sp, #16
 8017350:	bd70      	pop	{r4, r5, r6, pc}
    if(file_p->drv == NULL) return LV_FS_RES_INV_PARAM;
 8017352:	200b      	movs	r0, #11
 8017354:	e7fb      	b.n	801734e <lv_fs_read+0x2a>
    if(file_p->drv->read_cb == NULL) return LV_FS_RES_NOT_IMP;
 8017356:	2009      	movs	r0, #9
 8017358:	e7f9      	b.n	801734e <lv_fs_read+0x2a>

0801735a <lv_fs_seek>:

    return res;
}

lv_fs_res_t lv_fs_seek(lv_fs_file_t * file_p, uint32_t pos, lv_fs_whence_t whence)
{
 801735a:	b430      	push	{r4, r5}
    if(file_p->drv == NULL) {
 801735c:	6844      	ldr	r4, [r0, #4]
{
 801735e:	4613      	mov	r3, r2
    if(file_p->drv == NULL) {
 8017360:	b13c      	cbz	r4, 8017372 <lv_fs_seek+0x18>
        return LV_FS_RES_INV_PARAM;
    }

    if(file_p->drv->seek_cb == NULL) {
 8017362:	69a5      	ldr	r5, [r4, #24]
 8017364:	b145      	cbz	r5, 8017378 <lv_fs_seek+0x1e>
        return LV_FS_RES_NOT_IMP;
    }

    lv_fs_res_t res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, pos, whence);
 8017366:	460a      	mov	r2, r1
 8017368:	46ac      	mov	ip, r5
 801736a:	6801      	ldr	r1, [r0, #0]
 801736c:	4620      	mov	r0, r4

    return res;
}
 801736e:	bc30      	pop	{r4, r5}
    lv_fs_res_t res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, pos, whence);
 8017370:	4760      	bx	ip
        return LV_FS_RES_INV_PARAM;
 8017372:	200b      	movs	r0, #11
}
 8017374:	bc30      	pop	{r4, r5}
 8017376:	4770      	bx	lr
        return LV_FS_RES_NOT_IMP;
 8017378:	2009      	movs	r0, #9
 801737a:	e7fb      	b.n	8017374 <lv_fs_seek+0x1a>

0801737c <lv_fs_get_drv>:

    *new_drv = drv_p;
}

lv_fs_drv_t * lv_fs_get_drv(char letter)
{
 801737c:	b538      	push	{r3, r4, r5, lr}
 801737e:	4604      	mov	r4, r0
    lv_fs_drv_t ** drv;

    _LV_LL_READ(&LV_GC_ROOT(_lv_fsdrv_ll), drv) {
 8017380:	4808      	ldr	r0, [pc, #32]	; (80173a4 <lv_fs_get_drv+0x28>)
 8017382:	f000 f8d4 	bl	801752e <_lv_ll_get_head>
 8017386:	4d07      	ldr	r5, [pc, #28]	; (80173a4 <lv_fs_get_drv+0x28>)
 8017388:	4601      	mov	r1, r0
 801738a:	b909      	cbnz	r1, 8017390 <lv_fs_get_drv+0x14>
        if((*drv)->letter == letter) {
            return *drv;
        }
    }

    return NULL;
 801738c:	4608      	mov	r0, r1
}
 801738e:	bd38      	pop	{r3, r4, r5, pc}
        if((*drv)->letter == letter) {
 8017390:	6808      	ldr	r0, [r1, #0]
 8017392:	7803      	ldrb	r3, [r0, #0]
 8017394:	42a3      	cmp	r3, r4
 8017396:	d0fa      	beq.n	801738e <lv_fs_get_drv+0x12>
    _LV_LL_READ(&LV_GC_ROOT(_lv_fsdrv_ll), drv) {
 8017398:	4628      	mov	r0, r5
 801739a:	f000 f8ce 	bl	801753a <_lv_ll_get_next>
 801739e:	4601      	mov	r1, r0
 80173a0:	e7f3      	b.n	801738a <lv_fs_get_drv+0xe>
 80173a2:	bf00      	nop
 80173a4:	2000aeec 	.word	0x2000aeec

080173a8 <lv_fs_open>:
{
 80173a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80173aa:	4606      	mov	r6, r0
 80173ac:	4617      	mov	r7, r2
    if(path == NULL) {
 80173ae:	460c      	mov	r4, r1
 80173b0:	b1f1      	cbz	r1, 80173f0 <lv_fs_open+0x48>
    lv_fs_drv_t * drv = lv_fs_get_drv(letter);
 80173b2:	7808      	ldrb	r0, [r1, #0]
 80173b4:	f7ff ffe2 	bl	801737c <lv_fs_get_drv>
    if(drv == NULL) {
 80173b8:	4605      	mov	r5, r0
 80173ba:	b1d8      	cbz	r0, 80173f4 <lv_fs_open+0x4c>
    if(drv->ready_cb) {
 80173bc:	6843      	ldr	r3, [r0, #4]
 80173be:	b91b      	cbnz	r3, 80173c8 <lv_fs_open+0x20>
    if(drv->open_cb == NULL) {
 80173c0:	68ab      	ldr	r3, [r5, #8]
 80173c2:	b933      	cbnz	r3, 80173d2 <lv_fs_open+0x2a>
        return LV_FS_RES_NOT_IMP;
 80173c4:	2009      	movs	r0, #9
 80173c6:	e003      	b.n	80173d0 <lv_fs_open+0x28>
        if(drv->ready_cb(drv) == false) {
 80173c8:	4798      	blx	r3
 80173ca:	2800      	cmp	r0, #0
 80173cc:	d1f8      	bne.n	80173c0 <lv_fs_open+0x18>
            return LV_FS_RES_HW_ERR;
 80173ce:	2001      	movs	r0, #1
}
 80173d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 * @return pointer to the beginning of the real path (E.g. /folder/file.txt)
 */
static const char * lv_fs_get_real_path(const char * path)
{
    path++; /*Ignore the driver letter*/
    if(*path == ':') path++;
 80173d2:	7862      	ldrb	r2, [r4, #1]
    void *file_d = drv->open_cb(drv, real_path, mode);
 80173d4:	4628      	mov	r0, r5
    if(*path == ':') path++;
 80173d6:	2a3a      	cmp	r2, #58	; 0x3a
    void *file_d = drv->open_cb(drv, real_path, mode);
 80173d8:	463a      	mov	r2, r7
    path++; /*Ignore the driver letter*/
 80173da:	bf14      	ite	ne
 80173dc:	1c61      	addne	r1, r4, #1
    if(*path == ':') path++;
 80173de:	1ca1      	addeq	r1, r4, #2
    void *file_d = drv->open_cb(drv, real_path, mode);
 80173e0:	4798      	blx	r3
    if(file_d == NULL || file_d == (void*)(-1)) {
 80173e2:	1e43      	subs	r3, r0, #1
 80173e4:	3303      	adds	r3, #3
 80173e6:	d807      	bhi.n	80173f8 <lv_fs_open+0x50>
    file_p->file_d = file_d;
 80173e8:	e9c6 0500 	strd	r0, r5, [r6]
    return LV_FS_RES_OK;
 80173ec:	2000      	movs	r0, #0
 80173ee:	e7ef      	b.n	80173d0 <lv_fs_open+0x28>
        return LV_FS_RES_INV_PARAM;
 80173f0:	200b      	movs	r0, #11
 80173f2:	e7ed      	b.n	80173d0 <lv_fs_open+0x28>
        return LV_FS_RES_NOT_EX;
 80173f4:	2003      	movs	r0, #3
 80173f6:	e7eb      	b.n	80173d0 <lv_fs_open+0x28>
        return LV_FS_RES_UNKNOWN;
 80173f8:	200c      	movs	r0, #12
 80173fa:	e7e9      	b.n	80173d0 <lv_fs_open+0x28>

080173fc <lv_fs_get_ext>:
{
 80173fc:	b510      	push	{r4, lr}
 80173fe:	4604      	mov	r4, r0
    for(i = strlen(fn); i > 0; i--) {
 8017400:	f7e8 ff60 	bl	80002c4 <strlen>
 8017404:	b908      	cbnz	r0, 801740a <lv_fs_get_ext+0xe>
            return ""; /*No extension if a '\' or '/' found*/
 8017406:	4807      	ldr	r0, [pc, #28]	; (8017424 <lv_fs_get_ext+0x28>)
 8017408:	e004      	b.n	8017414 <lv_fs_get_ext+0x18>
        if(fn[i] == '.') {
 801740a:	5c23      	ldrb	r3, [r4, r0]
 801740c:	2b2e      	cmp	r3, #46	; 0x2e
 801740e:	d102      	bne.n	8017416 <lv_fs_get_ext+0x1a>
            return &fn[i + 1];
 8017410:	3001      	adds	r0, #1
 8017412:	4420      	add	r0, r4
}
 8017414:	bd10      	pop	{r4, pc}
        else if(fn[i] == '/' || fn[i] == '\\') {
 8017416:	2b2f      	cmp	r3, #47	; 0x2f
 8017418:	d0f5      	beq.n	8017406 <lv_fs_get_ext+0xa>
 801741a:	2b5c      	cmp	r3, #92	; 0x5c
 801741c:	d0f3      	beq.n	8017406 <lv_fs_get_ext+0xa>
    for(i = strlen(fn); i > 0; i--) {
 801741e:	3801      	subs	r0, #1
 8017420:	e7f0      	b.n	8017404 <lv_fs_get_ext+0x8>
 8017422:	bf00      	nop
 8017424:	0802964b 	.word	0x0802964b

08017428 <node_set_prev.isra.0>:
 * @param act pointer to a node which prev. node pointer should be set
 * @param prev pointer to a node which should be the previous node before 'act'
 */
static void node_set_prev(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * prev)
{
    if(act == NULL) return; /*Can't set the prev node of `NULL`*/
 8017428:	b109      	cbz	r1, 801742e <node_set_prev.isra.0+0x6>
    act8 += LL_PREV_P_OFFSET(ll_p);

    lv_ll_node_t ** act_node_p = (lv_ll_node_t **) act8;
    lv_ll_node_t ** prev_node_p = (lv_ll_node_t **) &prev;

    *act_node_p = *prev_node_p;
 801742a:	6803      	ldr	r3, [r0, #0]
 801742c:	50ca      	str	r2, [r1, r3]
}
 801742e:	4770      	bx	lr

08017430 <node_set_next.isra.0>:
 * @param act pointer to a node which next node pointer should be set
 * @param next pointer to a node which should be the next node before 'act'
 */
static void node_set_next(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * next)
{
    if(act == NULL) return; /*Can't set the next node of `NULL`*/
 8017430:	b111      	cbz	r1, 8017438 <node_set_next.isra.0+0x8>

    act8 += LL_NEXT_P_OFFSET(ll_p);
    lv_ll_node_t ** act_node_p = (lv_ll_node_t **) act8;
    lv_ll_node_t ** next_node_p = (lv_ll_node_t **) &next;

    *act_node_p = *next_node_p;
 8017432:	6803      	ldr	r3, [r0, #0]
 8017434:	4419      	add	r1, r3
 8017436:	604a      	str	r2, [r1, #4]
}
 8017438:	4770      	bx	lr

0801743a <_lv_ll_init>:
    node_size = (node_size + 3) & (~0x3);
 801743a:	3103      	adds	r1, #3
    ll_p->head = NULL;
 801743c:	2300      	movs	r3, #0
    node_size = (node_size + 3) & (~0x3);
 801743e:	f021 0103 	bic.w	r1, r1, #3
    ll_p->tail = NULL;
 8017442:	e9c0 3301 	strd	r3, r3, [r0, #4]
    ll_p->n_size = node_size;
 8017446:	6001      	str	r1, [r0, #0]
}
 8017448:	4770      	bx	lr

0801744a <_lv_ll_ins_head>:
{
 801744a:	b538      	push	{r3, r4, r5, lr}
 801744c:	4604      	mov	r4, r0
    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 801744e:	6800      	ldr	r0, [r0, #0]
 8017450:	3008      	adds	r0, #8
 8017452:	f000 faf1 	bl	8017a38 <lv_mem_alloc>
    if(n_new != NULL) {
 8017456:	4605      	mov	r5, r0
 8017458:	b180      	cbz	r0, 801747c <_lv_ll_ins_head+0x32>
        node_set_prev(ll_p, n_new, NULL);       /*No prev. before the new head*/
 801745a:	4601      	mov	r1, r0
 801745c:	2200      	movs	r2, #0
 801745e:	4620      	mov	r0, r4
 8017460:	f7ff ffe2 	bl	8017428 <node_set_prev.isra.0>
        node_set_next(ll_p, n_new, ll_p->head); /*After new comes the old head*/
 8017464:	6862      	ldr	r2, [r4, #4]
 8017466:	f7ff ffe3 	bl	8017430 <node_set_next.isra.0>
        if(ll_p->head != NULL) { /*If there is old head then before it goes the new*/
 801746a:	6861      	ldr	r1, [r4, #4]
 801746c:	b111      	cbz	r1, 8017474 <_lv_ll_ins_head+0x2a>
            node_set_prev(ll_p, ll_p->head, n_new);
 801746e:	462a      	mov	r2, r5
 8017470:	f7ff ffda 	bl	8017428 <node_set_prev.isra.0>
        if(ll_p->tail == NULL) { /*If there is no tail (1. node) set the tail too*/
 8017474:	68a3      	ldr	r3, [r4, #8]
        ll_p->head = n_new;      /*Set the new head in the dsc.*/
 8017476:	6065      	str	r5, [r4, #4]
        if(ll_p->tail == NULL) { /*If there is no tail (1. node) set the tail too*/
 8017478:	b903      	cbnz	r3, 801747c <_lv_ll_ins_head+0x32>
            ll_p->tail = n_new;
 801747a:	60a5      	str	r5, [r4, #8]
}
 801747c:	4628      	mov	r0, r5
 801747e:	bd38      	pop	{r3, r4, r5, pc}

08017480 <_lv_ll_ins_tail>:
{
 8017480:	b538      	push	{r3, r4, r5, lr}
 8017482:	4604      	mov	r4, r0
    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 8017484:	6800      	ldr	r0, [r0, #0]
 8017486:	3008      	adds	r0, #8
 8017488:	f000 fad6 	bl	8017a38 <lv_mem_alloc>
    if(n_new != NULL) {
 801748c:	4605      	mov	r5, r0
 801748e:	b188      	cbz	r0, 80174b4 <_lv_ll_ins_tail+0x34>
        node_set_next(ll_p, n_new, NULL);       /*No next after the new tail*/
 8017490:	4601      	mov	r1, r0
 8017492:	2200      	movs	r2, #0
 8017494:	4620      	mov	r0, r4
 8017496:	f7ff ffcb 	bl	8017430 <node_set_next.isra.0>
        node_set_prev(ll_p, n_new, ll_p->tail); /*The prev. before new is the old tail*/
 801749a:	4629      	mov	r1, r5
 801749c:	68a2      	ldr	r2, [r4, #8]
 801749e:	f7ff ffc3 	bl	8017428 <node_set_prev.isra.0>
        if(ll_p->tail != NULL) {                /*If there is old tail then the new comes after it*/
 80174a2:	68a1      	ldr	r1, [r4, #8]
 80174a4:	b111      	cbz	r1, 80174ac <_lv_ll_ins_tail+0x2c>
            node_set_next(ll_p, ll_p->tail, n_new);
 80174a6:	462a      	mov	r2, r5
 80174a8:	f7ff ffc2 	bl	8017430 <node_set_next.isra.0>
        if(ll_p->head == NULL) { /*If there is no head (1. node) set the head too*/
 80174ac:	6863      	ldr	r3, [r4, #4]
        ll_p->tail = n_new;      /*Set the new tail in the dsc.*/
 80174ae:	60a5      	str	r5, [r4, #8]
        if(ll_p->head == NULL) { /*If there is no head (1. node) set the head too*/
 80174b0:	b903      	cbnz	r3, 80174b4 <_lv_ll_ins_tail+0x34>
            ll_p->head = n_new;
 80174b2:	6065      	str	r5, [r4, #4]
}
 80174b4:	4628      	mov	r0, r5
 80174b6:	bd38      	pop	{r3, r4, r5, pc}

080174b8 <_lv_ll_remove>:
{
 80174b8:	460b      	mov	r3, r1
 80174ba:	b570      	push	{r4, r5, r6, lr}
    if(ll_p == NULL) return;
 80174bc:	b140      	cbz	r0, 80174d0 <_lv_ll_remove+0x18>
    if(_lv_ll_get_head(ll_p) == node_p) {
 80174be:	e9d0 1200 	ldrd	r1, r2, [r0]
 80174c2:	4293      	cmp	r3, r2
 80174c4:	d10a      	bne.n	80174dc <_lv_ll_remove+0x24>
    return *((lv_ll_node_t **)n_act_d);
 80174c6:	440b      	add	r3, r1
 80174c8:	6859      	ldr	r1, [r3, #4]
        ll_p->head = _lv_ll_get_next(ll_p, node_p);
 80174ca:	6041      	str	r1, [r0, #4]
        if(ll_p->head == NULL) {
 80174cc:	b909      	cbnz	r1, 80174d2 <_lv_ll_remove+0x1a>
            ll_p->tail = NULL;
 80174ce:	6081      	str	r1, [r0, #8]
}
 80174d0:	bd70      	pop	{r4, r5, r6, pc}
            node_set_prev(ll_p, ll_p->head, NULL);
 80174d2:	2200      	movs	r2, #0
}
 80174d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        node_set_prev(ll_p, n_next, n_prev);
 80174d8:	f7ff bfa6 	b.w	8017428 <node_set_prev.isra.0>
    else if(_lv_ll_get_tail(ll_p) == node_p) {
 80174dc:	6882      	ldr	r2, [r0, #8]
 80174de:	585d      	ldr	r5, [r3, r1]
 80174e0:	4293      	cmp	r3, r2
 80174e2:	d109      	bne.n	80174f8 <_lv_ll_remove+0x40>
        ll_p->tail = _lv_ll_get_prev(ll_p, node_p);
 80174e4:	6085      	str	r5, [r0, #8]
        if(ll_p->tail == NULL) {
 80174e6:	b90d      	cbnz	r5, 80174ec <_lv_ll_remove+0x34>
            ll_p->head = NULL;
 80174e8:	6045      	str	r5, [r0, #4]
 80174ea:	e7f1      	b.n	80174d0 <_lv_ll_remove+0x18>
            node_set_next(ll_p, ll_p->tail, NULL);
 80174ec:	4629      	mov	r1, r5
 80174ee:	2200      	movs	r2, #0
}
 80174f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            node_set_next(ll_p, ll_p->tail, NULL);
 80174f4:	f7ff bf9c 	b.w	8017430 <node_set_next.isra.0>
    return *((lv_ll_node_t **)n_act_d);
 80174f8:	440b      	add	r3, r1
        node_set_next(ll_p, n_prev, n_next);
 80174fa:	4629      	mov	r1, r5
    return *((lv_ll_node_t **)n_act_d);
 80174fc:	685e      	ldr	r6, [r3, #4]
        node_set_next(ll_p, n_prev, n_next);
 80174fe:	4632      	mov	r2, r6
 8017500:	f7ff ff96 	bl	8017430 <node_set_next.isra.0>
        node_set_prev(ll_p, n_next, n_prev);
 8017504:	462a      	mov	r2, r5
 8017506:	4631      	mov	r1, r6
 8017508:	e7e4      	b.n	80174d4 <_lv_ll_remove+0x1c>

0801750a <_lv_ll_clear>:
{
 801750a:	b570      	push	{r4, r5, r6, lr}
    if(ll_p == NULL) return NULL;
 801750c:	4604      	mov	r4, r0
 801750e:	b108      	cbz	r0, 8017514 <_lv_ll_clear+0xa>
    return ll_p->head;
 8017510:	6845      	ldr	r5, [r0, #4]
    while(i != NULL) {
 8017512:	b905      	cbnz	r5, 8017516 <_lv_ll_clear+0xc>
}
 8017514:	bd70      	pop	{r4, r5, r6, pc}
    return *((lv_ll_node_t **)n_act_d);
 8017516:	6823      	ldr	r3, [r4, #0]
        _lv_ll_remove(ll_p, i);
 8017518:	4629      	mov	r1, r5
 801751a:	4620      	mov	r0, r4
    return *((lv_ll_node_t **)n_act_d);
 801751c:	442b      	add	r3, r5
 801751e:	685e      	ldr	r6, [r3, #4]
        _lv_ll_remove(ll_p, i);
 8017520:	f7ff ffca 	bl	80174b8 <_lv_ll_remove>
        lv_mem_free(i);
 8017524:	4628      	mov	r0, r5
 8017526:	f000 f905 	bl	8017734 <lv_mem_free>
        i = i_next;
 801752a:	4635      	mov	r5, r6
 801752c:	e7f1      	b.n	8017512 <_lv_ll_clear+0x8>

0801752e <_lv_ll_get_head>:
    if(ll_p == NULL) return NULL;
 801752e:	b100      	cbz	r0, 8017532 <_lv_ll_get_head+0x4>
    return ll_p->head;
 8017530:	6840      	ldr	r0, [r0, #4]
}
 8017532:	4770      	bx	lr

08017534 <_lv_ll_get_tail>:
    if(ll_p == NULL) return NULL;
 8017534:	b100      	cbz	r0, 8017538 <_lv_ll_get_tail+0x4>
    return ll_p->tail;
 8017536:	6880      	ldr	r0, [r0, #8]
}
 8017538:	4770      	bx	lr

0801753a <_lv_ll_get_next>:
    return *((lv_ll_node_t **)n_act_d);
 801753a:	6803      	ldr	r3, [r0, #0]
 801753c:	4419      	add	r1, r3
}
 801753e:	6848      	ldr	r0, [r1, #4]
 8017540:	4770      	bx	lr

08017542 <_lv_ll_get_prev>:
    return *((lv_ll_node_t **)n_act_d);
 8017542:	6803      	ldr	r3, [r0, #0]
}
 8017544:	58c8      	ldr	r0, [r1, r3]
 8017546:	4770      	bx	lr

08017548 <_lv_ll_get_len>:
    if(ll_p == NULL) return NULL;
 8017548:	b148      	cbz	r0, 801755e <_lv_ll_get_len+0x16>
    return ll_p->head;
 801754a:	6843      	ldr	r3, [r0, #4]
 801754c:	2200      	movs	r2, #0
    for(node = _lv_ll_get_head(ll_p); node != NULL; node = _lv_ll_get_next(ll_p, node)) {
 801754e:	b90b      	cbnz	r3, 8017554 <_lv_ll_get_len+0xc>
}
 8017550:	4610      	mov	r0, r2
 8017552:	4770      	bx	lr
    return *((lv_ll_node_t **)n_act_d);
 8017554:	6801      	ldr	r1, [r0, #0]
        len++;
 8017556:	3201      	adds	r2, #1
    return *((lv_ll_node_t **)n_act_d);
 8017558:	440b      	add	r3, r1
 801755a:	685b      	ldr	r3, [r3, #4]
 801755c:	e7f7      	b.n	801754e <_lv_ll_get_len+0x6>
 801755e:	4602      	mov	r2, r0
    return len;
 8017560:	e7f6      	b.n	8017550 <_lv_ll_get_len+0x8>

08017562 <_lv_ll_is_empty>:
    if(ll_p == NULL) return true;
 8017562:	b130      	cbz	r0, 8017572 <_lv_ll_is_empty+0x10>
    if(ll_p->head == NULL && ll_p->tail == NULL) return true;
 8017564:	6843      	ldr	r3, [r0, #4]
 8017566:	b933      	cbnz	r3, 8017576 <_lv_ll_is_empty+0x14>
 8017568:	6880      	ldr	r0, [r0, #8]
 801756a:	fab0 f080 	clz	r0, r0
 801756e:	0940      	lsrs	r0, r0, #5
 8017570:	4770      	bx	lr
    if(ll_p == NULL) return true;
 8017572:	2001      	movs	r0, #1
 8017574:	4770      	bx	lr
    return false;
 8017576:	2000      	movs	r0, #0
}
 8017578:	4770      	bx	lr
	...

0801757c <lv_trigo_sin>:
 * @return sinus of 'angle'. sin(-90) = -32767, sin(90) = 32767
 */
LV_ATTRIBUTE_FAST_MEM int16_t lv_trigo_sin(int16_t angle)
{
    int16_t ret = 0;
    angle       = angle % 360;
 801757c:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8017580:	fb90 f2f3 	sdiv	r2, r0, r3
 8017584:	fb02 0013 	mls	r0, r2, r3, r0
 8017588:	b200      	sxth	r0, r0

    if(angle < 0) angle = 360 + angle;
 801758a:	2800      	cmp	r0, #0
 801758c:	bfb8      	it	lt
 801758e:	18c0      	addlt	r0, r0, r3
 8017590:	4b0f      	ldr	r3, [pc, #60]	; (80175d0 <lv_trigo_sin+0x54>)
 8017592:	bfb8      	it	lt
 8017594:	b200      	sxthlt	r0, r0

    if(angle < 90) {
 8017596:	2859      	cmp	r0, #89	; 0x59
 8017598:	dc02      	bgt.n	80175a0 <lv_trigo_sin+0x24>
        ret = sin0_90_table[angle];
    }
    else if(angle >= 90 && angle < 180) {
        angle = 180 - angle;
        ret   = sin0_90_table[angle];
 801759a:	f933 0010 	ldrsh.w	r0, [r3, r0, lsl #1]
 801759e:	4770      	bx	lr
    else if(angle >= 90 && angle < 180) {
 80175a0:	b280      	uxth	r0, r0
 80175a2:	f1a0 025a 	sub.w	r2, r0, #90	; 0x5a
 80175a6:	2a59      	cmp	r2, #89	; 0x59
 80175a8:	d803      	bhi.n	80175b2 <lv_trigo_sin+0x36>
        angle = 180 - angle;
 80175aa:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
        ret   = sin0_90_table[angle];
 80175ae:	b280      	uxth	r0, r0
 80175b0:	e7f3      	b.n	801759a <lv_trigo_sin+0x1e>
    }
    else if(angle >= 180 && angle < 270) {
 80175b2:	f1a0 02b4 	sub.w	r2, r0, #180	; 0xb4
 80175b6:	b292      	uxth	r2, r2
 80175b8:	2a59      	cmp	r2, #89	; 0x59
        angle = angle - 180;
        ret   = -sin0_90_table[angle];
    }
    else {   /*angle >=270*/
        angle = 360 - angle;
 80175ba:	bf89      	itett	hi
 80175bc:	f5c0 70b4 	rsbhi	r0, r0, #360	; 0x168
        ret   = -sin0_90_table[angle];
 80175c0:	f833 0012 	ldrhls.w	r0, [r3, r2, lsl #1]
        ret   = -sin0_90_table[angle];
 80175c4:	b280      	uxthhi	r0, r0
 80175c6:	f833 0010 	ldrhhi.w	r0, [r3, r0, lsl #1]
 80175ca:	4240      	negs	r0, r0
 80175cc:	b200      	sxth	r0, r0
    }

    return ret;
}
 80175ce:	4770      	bx	lr
 80175d0:	08028dd8 	.word	0x08028dd8

080175d4 <lv_bezier3>:
 * @param u3 end values in range of [0..LV_BEZIER_VAL_MAX]
 * @return the value calculated from the given parameters in range of [0..LV_BEZIER_VAL_MAX]
 */
uint32_t lv_bezier3(uint32_t t, uint32_t u0, uint32_t u1, uint32_t u2, uint32_t u3)
{
    uint32_t t_rem  = 1024 - t;
 80175d4:	f5c0 6c80 	rsb	ip, r0, #1024	; 0x400
{
 80175d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint32_t t_rem2 = (t_rem * t_rem) >> 10;
 80175da:	fb0c f70c 	mul.w	r7, ip, ip
    uint32_t t_rem3 = (t_rem2 * t_rem) >> 10;
    uint32_t t2     = (t * t) >> 10;
    uint32_t t3     = (t2 * t) >> 10;

    uint32_t v1 = (t_rem3 * u0) >> 10;
    uint32_t v2 = (3 * t_rem2 * t * u1) >> 20;
 80175de:	fb02 f400 	mul.w	r4, r2, r0
    uint32_t t_rem2 = (t_rem * t_rem) >> 10;
 80175e2:	0abf      	lsrs	r7, r7, #10
    uint32_t t2     = (t * t) >> 10;
 80175e4:	fb00 f600 	mul.w	r6, r0, r0
    uint32_t v3 = (3 * t_rem * t2 * u2) >> 20;
 80175e8:	fb03 f30c 	mul.w	r3, r3, ip
    uint32_t v2 = (3 * t_rem2 * t * u1) >> 20;
 80175ec:	437c      	muls	r4, r7
    uint32_t t2     = (t * t) >> 10;
 80175ee:	0ab6      	lsrs	r6, r6, #10
    uint32_t t_rem3 = (t_rem2 * t_rem) >> 10;
 80175f0:	fb07 f70c 	mul.w	r7, r7, ip
    uint32_t v2 = (3 * t_rem2 * t * u1) >> 20;
 80175f4:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    uint32_t t3     = (t2 * t) >> 10;
 80175f8:	fb06 f400 	mul.w	r4, r6, r0
    uint32_t v3 = (3 * t_rem * t2 * u2) >> 20;
 80175fc:	435e      	muls	r6, r3
    uint32_t t_rem3 = (t_rem2 * t_rem) >> 10;
 80175fe:	0ab8      	lsrs	r0, r7, #10
    uint32_t t3     = (t2 * t) >> 10;
 8017600:	0aa5      	lsrs	r5, r4, #10
    uint32_t v4 = (t3 * u3) >> 10;
 8017602:	9c05      	ldr	r4, [sp, #20]
    uint32_t v3 = (3 * t_rem * t2 * u2) >> 20;
 8017604:	eb06 0646 	add.w	r6, r6, r6, lsl #1
    uint32_t v1 = (t_rem3 * u0) >> 10;
 8017608:	4348      	muls	r0, r1
    uint32_t v4 = (t3 * u3) >> 10;
 801760a:	436c      	muls	r4, r5
 801760c:	0aa4      	lsrs	r4, r4, #10

    return v1 + v2 + v3 + v4;
 801760e:	eb04 5412 	add.w	r4, r4, r2, lsr #20
 8017612:	eb04 5416 	add.w	r4, r4, r6, lsr #20
}
 8017616:	eb04 2090 	add.w	r0, r4, r0, lsr #10
 801761a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801761c <lv_sqrt>:
 * If root < 256: mask = 0x800
 * Else: mask = 0x8000
 */
LV_ATTRIBUTE_FAST_MEM void lv_sqrt(uint32_t x, lv_sqrt_res_t * q, uint32_t mask)
{
    x = x << 8; /*To get 4 bit precision. (sqrt(256) = 16 = 4 bit)*/
 801761c:	0200      	lsls	r0, r0, #8

    uint32_t root = 0;
 801761e:	2300      	movs	r3, #0
{
 8017620:	b530      	push	{r4, r5, lr}
    uint32_t trial;
    // http://ww1.microchip.com/...en/AppNotes/91040a.pdf
    do {
        trial = root + mask;
 8017622:	18d4      	adds	r4, r2, r3
        if(trial * trial <= x) root = trial;
 8017624:	fb04 f504 	mul.w	r5, r4, r4
 8017628:	4285      	cmp	r5, r0
 801762a:	bf98      	it	ls
 801762c:	4623      	movls	r3, r4
        mask = mask >> 1;
    } while(mask);
 801762e:	0852      	lsrs	r2, r2, #1
 8017630:	d1f7      	bne.n	8017622 <lv_sqrt+0x6>

    q->i = root >> 4;
 8017632:	091a      	lsrs	r2, r3, #4
    q->f = (root & 0xf) << 4;
 8017634:	011b      	lsls	r3, r3, #4
    q->i = root >> 4;
 8017636:	800a      	strh	r2, [r1, #0]
    q->f = (root & 0xf) << 4;
 8017638:	b2db      	uxtb	r3, r3
 801763a:	804b      	strh	r3, [r1, #2]
}
 801763c:	bd30      	pop	{r4, r5, pc}

0801763e <lv_atan2>:
    unsigned int ux;
    unsigned int uy;

    // Save the sign flags then remove signs and get XY as unsigned ints
    negflag = 0;
    if(x < 0) {
 801763e:	2800      	cmp	r0, #0
        negflag += 0x01;    // x flag bit
        x = (0 - x);        // is now +
 8017640:	f04f 022d 	mov.w	r2, #45	; 0x2d
        negflag += 0x01;    // x flag bit
 8017644:	bfba      	itte	lt
 8017646:	2301      	movlt	r3, #1
        x = (0 - x);        // is now +
 8017648:	4240      	neglt	r0, r0
    negflag = 0;
 801764a:	2300      	movge	r3, #0
    }
    ux = x;                // copy to unsigned var before multiply
    if(y < 0) {
 801764c:	2900      	cmp	r1, #0
        negflag += 0x02;    // y flag bit
        y = (0 - y);        // is now +
 801764e:	bfbe      	ittt	lt
 8017650:	4249      	neglt	r1, r1
        negflag += 0x02;    // y flag bit
 8017652:	3302      	addlt	r3, #2
 8017654:	b2db      	uxtblt	r3, r3
    }
    uy = y;                // copy to unsigned var before multiply

    // 1. Calc the scaled "degrees"
    if(ux > uy) {
 8017656:	4288      	cmp	r0, r1
        degree = (uy * 45) / ux;   // degree result will be 0-45 range
 8017658:	bf85      	ittet	hi
 801765a:	4351      	mulhi	r1, r2
        negflag += 0x10;    // octant flag bit
 801765c:	3310      	addhi	r3, #16
    }
    else {
        degree = (ux * 45) / uy;   // degree result will be 0-45 range
 801765e:	4342      	mulls	r2, r0
        negflag += 0x10;    // octant flag bit
 8017660:	b2db      	uxtbhi	r3, r3
        degree = (uy * 45) / ux;   // degree result will be 0-45 range
 8017662:	bf8c      	ite	hi
 8017664:	fbb1 f1f0 	udivhi	r1, r1, r0
        degree = (ux * 45) / uy;   // degree result will be 0-45 range
 8017668:	fbb2 f1f1 	udivls	r1, r2, r1
    }

    // 2. Compensate for the 4 degree error curve
    comp = 0;
    tempdegree = degree;    // use an unsigned char for speed!
 801766c:	b2ca      	uxtb	r2, r1
    if(tempdegree > 22) {    // if top half of range
 801766e:	2a16      	cmp	r2, #22
 8017670:	d90f      	bls.n	8017692 <lv_atan2+0x54>
        if(tempdegree <= 44) comp++;
 8017672:	2a2c      	cmp	r2, #44	; 0x2c
 8017674:	bf94      	ite	ls
 8017676:	2001      	movls	r0, #1
 8017678:	2000      	movhi	r0, #0
        if(tempdegree <= 41) comp++;
 801767a:	2a29      	cmp	r2, #41	; 0x29
 801767c:	bf98      	it	ls
 801767e:	3001      	addls	r0, #1
        if(tempdegree <= 37) comp++;
 8017680:	2a25      	cmp	r2, #37	; 0x25
 8017682:	bf9c      	itt	ls
 8017684:	3001      	addls	r0, #1
 8017686:	b2c0      	uxtbls	r0, r0
        if(tempdegree <= 32) comp++;  // max is 4 degrees compensated
 8017688:	2a20      	cmp	r2, #32
 801768a:	d80f      	bhi.n	80176ac <lv_atan2+0x6e>
    }
    else {   // else is lower half of range
        if(tempdegree >= 2) comp++;
        if(tempdegree >= 6) comp++;
        if(tempdegree >= 10) comp++;
        if(tempdegree >= 15) comp++;  // max is 4 degrees compensated
 801768c:	3001      	adds	r0, #1
 801768e:	b2c0      	uxtb	r0, r0
 8017690:	e00c      	b.n	80176ac <lv_atan2+0x6e>
        if(tempdegree >= 2) comp++;
 8017692:	2a01      	cmp	r2, #1
 8017694:	bf8c      	ite	hi
 8017696:	2001      	movhi	r0, #1
 8017698:	2000      	movls	r0, #0
        if(tempdegree >= 6) comp++;
 801769a:	2a05      	cmp	r2, #5
 801769c:	bf88      	it	hi
 801769e:	3001      	addhi	r0, #1
        if(tempdegree >= 10) comp++;
 80176a0:	2a09      	cmp	r2, #9
 80176a2:	bf84      	itt	hi
 80176a4:	3001      	addhi	r0, #1
 80176a6:	b2c0      	uxtbhi	r0, r0
        if(tempdegree >= 15) comp++;  // max is 4 degrees compensated
 80176a8:	2a0e      	cmp	r2, #14
 80176aa:	d8ef      	bhi.n	801768c <lv_atan2+0x4e>
    }
    degree += comp;   // degree is now accurate to +/- 1 degree!

    // Invert degree if it was X>Y octant, makes 0-45 into 90-45
    if(negflag & 0x10) degree = (90 - degree);
 80176ac:	06da      	lsls	r2, r3, #27
    degree += comp;   // degree is now accurate to +/- 1 degree!
 80176ae:	4408      	add	r0, r1
    if(negflag & 0x10) degree = (90 - degree);
 80176b0:	f003 0201 	and.w	r2, r3, #1
 80176b4:	bf48      	it	mi
 80176b6:	f1c0 005a 	rsbmi	r0, r0, #90	; 0x5a

    // 3. Degree is now 0-90 range for this quadrant,
    // need to invert it for whichever quadrant it was in
    if(negflag & 0x02) { // if -Y
 80176ba:	079b      	lsls	r3, r3, #30
 80176bc:	d506      	bpl.n	80176cc <lv_atan2+0x8e>
        if(negflag & 0x01)   // if -Y -X
 80176be:	b112      	cbz	r2, 80176c6 <lv_atan2+0x88>
            degree = (180 + degree);
 80176c0:	30b4      	adds	r0, #180	; 0xb4
    else {   // else is +Y
        if(negflag & 0x01)   // if +Y -X
            degree = (360 - degree);
    }
    return degree;
}
 80176c2:	b280      	uxth	r0, r0
 80176c4:	4770      	bx	lr
            degree = (180 - degree);
 80176c6:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
 80176ca:	e7fa      	b.n	80176c2 <lv_atan2+0x84>
        if(negflag & 0x01)   // if +Y -X
 80176cc:	2a00      	cmp	r2, #0
 80176ce:	d0f8      	beq.n	80176c2 <lv_atan2+0x84>
            degree = (360 - degree);
 80176d0:	f5c0 70b4 	rsb	r0, r0, #360	; 0x168
 80176d4:	e7f5      	b.n	80176c2 <lv_atan2+0x84>

080176d6 <lv_map>:
 * @param min_out max output range
 * @param max_out max output range
 * @return the mapped number
 */
int32_t lv_map(int32_t x, int32_t min_in, int32_t max_in, int32_t min_out, int32_t max_out)
{
 80176d6:	b530      	push	{r4, r5, lr}
 80176d8:	4604      	mov	r4, r0
 80176da:	9803      	ldr	r0, [sp, #12]
    if(x >= max_in) return max_out;
 80176dc:	4294      	cmp	r4, r2
 80176de:	da0a      	bge.n	80176f6 <lv_map+0x20>
    if(x <= min_in) return min_out;
 80176e0:	428c      	cmp	r4, r1
     */

    int32_t delta_in = max_in - min_in;
    int32_t delta_out = max_out - min_out;

    return ((x - min_in) * delta_out) / delta_in + min_out;
 80176e2:	bfc3      	ittte	gt
 80176e4:	1a65      	subgt	r5, r4, r1
    int32_t delta_out = max_out - min_out;
 80176e6:	1ac4      	subgt	r4, r0, r3
    int32_t delta_in = max_in - min_in;
 80176e8:	1a50      	subgt	r0, r2, r1
    if(x <= min_in) return min_out;
 80176ea:	4618      	movle	r0, r3
    return ((x - min_in) * delta_out) / delta_in + min_out;
 80176ec:	bfc2      	ittt	gt
 80176ee:	436c      	mulgt	r4, r5
 80176f0:	fb94 f0f0 	sdivgt	r0, r4, r0
 80176f4:	18c0      	addgt	r0, r0, r3
}
 80176f6:	bd30      	pop	{r4, r5, pc}

080176f8 <lv_mem_walker>:
static void lv_mem_walker(void * ptr, size_t size, int used, void * user)
{
    LV_UNUSED(ptr);

    lv_mem_monitor_t * mon_p = user;
    if(used) {
 80176f8:	b11a      	cbz	r2, 8017702 <lv_mem_walker+0xa>
        mon_p->used_cnt++;
 80176fa:	691a      	ldr	r2, [r3, #16]
 80176fc:	3201      	adds	r2, #1
 80176fe:	611a      	str	r2, [r3, #16]
 8017700:	4770      	bx	lr
    }
    else {
        mon_p->free_cnt++;
 8017702:	685a      	ldr	r2, [r3, #4]
 8017704:	3201      	adds	r2, #1
 8017706:	605a      	str	r2, [r3, #4]
        mon_p->free_size += size;
 8017708:	689a      	ldr	r2, [r3, #8]
 801770a:	440a      	add	r2, r1
 801770c:	609a      	str	r2, [r3, #8]
        if(size > mon_p->free_biggest_size)
 801770e:	68da      	ldr	r2, [r3, #12]
 8017710:	4291      	cmp	r1, r2
            mon_p->free_biggest_size = size;
 8017712:	bf88      	it	hi
 8017714:	60d9      	strhi	r1, [r3, #12]
    }
}
 8017716:	4770      	bx	lr

08017718 <lv_mem_init>:
{
 8017718:	b508      	push	{r3, lr}
    tlsf = tlsf_create_with_pool((void *)work_mem_int, LV_MEM_SIZE);
 801771a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801771e:	4803      	ldr	r0, [pc, #12]	; (801772c <lv_mem_init+0x14>)
 8017720:	f001 fb2e 	bl	8018d80 <tlsf_create_with_pool>
 8017724:	4b02      	ldr	r3, [pc, #8]	; (8017730 <lv_mem_init+0x18>)
 8017726:	6018      	str	r0, [r3, #0]
}
 8017728:	bd08      	pop	{r3, pc}
 801772a:	bf00      	nop
 801772c:	20002b78 	.word	0x20002b78
 8017730:	20002b74 	.word	0x20002b74

08017734 <lv_mem_free>:
    if(data == &zero_mem) return;
 8017734:	4b04      	ldr	r3, [pc, #16]	; (8017748 <lv_mem_free+0x14>)
{
 8017736:	4601      	mov	r1, r0
    if(data == &zero_mem) return;
 8017738:	4298      	cmp	r0, r3
 801773a:	d004      	beq.n	8017746 <lv_mem_free+0x12>
    if(data == NULL) return;
 801773c:	b118      	cbz	r0, 8017746 <lv_mem_free+0x12>
    tlsf_free(tlsf, data);
 801773e:	4b03      	ldr	r3, [pc, #12]	; (801774c <lv_mem_free+0x18>)
 8017740:	6818      	ldr	r0, [r3, #0]
 8017742:	f001 bb51 	b.w	8018de8 <tlsf_free>
}
 8017746:	4770      	bx	lr
 8017748:	20000030 	.word	0x20000030
 801774c:	20002b74 	.word	0x20002b74

08017750 <lv_mem_buf_release>:
{
 8017750:	2300      	movs	r3, #0
        if(LV_GC_ROOT(lv_mem_buf[i]).p == p) {
 8017752:	4a08      	ldr	r2, [pc, #32]	; (8017774 <lv_mem_buf_release+0x24>)
{
 8017754:	b510      	push	{r4, lr}
        if(LV_GC_ROOT(lv_mem_buf[i]).p == p) {
 8017756:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 801775a:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 801775e:	4284      	cmp	r4, r0
 8017760:	d104      	bne.n	801776c <lv_mem_buf_release+0x1c>
            LV_GC_ROOT(lv_mem_buf[i]).used = 0;
 8017762:	798b      	ldrb	r3, [r1, #6]
 8017764:	f36f 0300 	bfc	r3, #0, #1
 8017768:	718b      	strb	r3, [r1, #6]
}
 801776a:	bd10      	pop	{r4, pc}
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 801776c:	3301      	adds	r3, #1
 801776e:	2b10      	cmp	r3, #16
 8017770:	d1f1      	bne.n	8017756 <lv_mem_buf_release+0x6>
 8017772:	e7fa      	b.n	801776a <lv_mem_buf_release+0x1a>
 8017774:	2000af04 	.word	0x2000af04

08017778 <lv_mem_buf_free_all>:
{
 8017778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801777a:	4c0a      	ldr	r4, [pc, #40]	; (80177a4 <lv_mem_buf_free_all+0x2c>)
 801777c:	2500      	movs	r5, #0
 801777e:	4627      	mov	r7, r4
            LV_GC_ROOT(lv_mem_buf[i]).p = NULL;
 8017780:	462e      	mov	r6, r5
        if(LV_GC_ROOT(lv_mem_buf[i]).p) {
 8017782:	6820      	ldr	r0, [r4, #0]
 8017784:	b148      	cbz	r0, 801779a <lv_mem_buf_free_all+0x22>
            lv_mem_free(LV_GC_ROOT(lv_mem_buf[i]).p);
 8017786:	f7ff ffd5 	bl	8017734 <lv_mem_free>
            LV_GC_ROOT(lv_mem_buf[i]).p = NULL;
 801778a:	6026      	str	r6, [r4, #0]
            LV_GC_ROOT(lv_mem_buf[i]).used = 0;
 801778c:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
 8017790:	799a      	ldrb	r2, [r3, #6]
 8017792:	f366 0200 	bfi	r2, r6, #0, #1
 8017796:	719a      	strb	r2, [r3, #6]
            LV_GC_ROOT(lv_mem_buf[i]).size = 0;
 8017798:	80a6      	strh	r6, [r4, #4]
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 801779a:	3501      	adds	r5, #1
 801779c:	3408      	adds	r4, #8
 801779e:	2d10      	cmp	r5, #16
 80177a0:	d1ef      	bne.n	8017782 <lv_mem_buf_free_all+0xa>
}
 80177a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80177a4:	2000af04 	.word	0x2000af04

080177a8 <lv_memcpy>:
{
 80177a8:	b570      	push	{r4, r5, r6, lr}
    lv_uintptr_t d_align = (lv_uintptr_t)d8 & ALIGN_MASK;
 80177aa:	f000 0507 	and.w	r5, r0, #7
    lv_uintptr_t s_align = (lv_uintptr_t)s8 & ALIGN_MASK;
 80177ae:	f001 0607 	and.w	r6, r1, #7
    lv_uintptr_t d_align = (lv_uintptr_t)d8 & ALIGN_MASK;
 80177b2:	4604      	mov	r4, r0
    lv_uintptr_t s_align = (lv_uintptr_t)s8 & ALIGN_MASK;
 80177b4:	460b      	mov	r3, r1
    if(s_align != d_align) {
 80177b6:	42b5      	cmp	r5, r6
 80177b8:	f040 8098 	bne.w	80178ec <lv_memcpy+0x144>
    if(d_align) {
 80177bc:	2d00      	cmp	r5, #0
 80177be:	f040 80a8 	bne.w	8017912 <lv_memcpy+0x16a>
    uint8_t * d8 = dst;
 80177c2:	4605      	mov	r5, r0
 80177c4:	462b      	mov	r3, r5
    while(len > 32) {
 80177c6:	2a20      	cmp	r2, #32
 80177c8:	461c      	mov	r4, r3
 80177ca:	f101 0520 	add.w	r5, r1, #32
 80177ce:	f103 0320 	add.w	r3, r3, #32
 80177d2:	f200 80af 	bhi.w	8017934 <lv_memcpy+0x18c>
    while(len > 4) {
 80177d6:	2a04      	cmp	r2, #4
 80177d8:	460e      	mov	r6, r1
 80177da:	f240 809f 	bls.w	801791c <lv_memcpy+0x174>
        COPY32;
 80177de:	f851 3b04 	ldr.w	r3, [r1], #4
        len -= 4;
 80177e2:	3a04      	subs	r2, #4
        COPY32;
 80177e4:	f844 3b04 	str.w	r3, [r4], #4
        len -= 4;
 80177e8:	e7f5      	b.n	80177d6 <lv_memcpy+0x2e>
            REPEAT8(COPY8);
 80177ea:	f813 1c20 	ldrb.w	r1, [r3, #-32]
            len -= 32;
 80177ee:	3a20      	subs	r2, #32
            REPEAT8(COPY8);
 80177f0:	f804 1c20 	strb.w	r1, [r4, #-32]
 80177f4:	f813 1c1f 	ldrb.w	r1, [r3, #-31]
 80177f8:	f804 1c1f 	strb.w	r1, [r4, #-31]
 80177fc:	f813 1c1e 	ldrb.w	r1, [r3, #-30]
 8017800:	f804 1c1e 	strb.w	r1, [r4, #-30]
 8017804:	f813 1c1d 	ldrb.w	r1, [r3, #-29]
 8017808:	f804 1c1d 	strb.w	r1, [r4, #-29]
 801780c:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8017810:	f804 1c1c 	strb.w	r1, [r4, #-28]
 8017814:	f813 1c1b 	ldrb.w	r1, [r3, #-27]
 8017818:	f804 1c1b 	strb.w	r1, [r4, #-27]
 801781c:	f813 1c1a 	ldrb.w	r1, [r3, #-26]
 8017820:	f804 1c1a 	strb.w	r1, [r4, #-26]
 8017824:	f813 1c19 	ldrb.w	r1, [r3, #-25]
 8017828:	f804 1c19 	strb.w	r1, [r4, #-25]
            REPEAT8(COPY8);
 801782c:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 8017830:	f804 1c18 	strb.w	r1, [r4, #-24]
 8017834:	f813 1c17 	ldrb.w	r1, [r3, #-23]
 8017838:	f804 1c17 	strb.w	r1, [r4, #-23]
 801783c:	f813 1c16 	ldrb.w	r1, [r3, #-22]
 8017840:	f804 1c16 	strb.w	r1, [r4, #-22]
 8017844:	f813 1c15 	ldrb.w	r1, [r3, #-21]
 8017848:	f804 1c15 	strb.w	r1, [r4, #-21]
 801784c:	f813 1c14 	ldrb.w	r1, [r3, #-20]
 8017850:	f804 1c14 	strb.w	r1, [r4, #-20]
 8017854:	f813 1c13 	ldrb.w	r1, [r3, #-19]
 8017858:	f804 1c13 	strb.w	r1, [r4, #-19]
 801785c:	f813 1c12 	ldrb.w	r1, [r3, #-18]
 8017860:	f804 1c12 	strb.w	r1, [r4, #-18]
 8017864:	f813 1c11 	ldrb.w	r1, [r3, #-17]
 8017868:	f804 1c11 	strb.w	r1, [r4, #-17]
            REPEAT8(COPY8);
 801786c:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 8017870:	f804 1c10 	strb.w	r1, [r4, #-16]
 8017874:	f813 1c0f 	ldrb.w	r1, [r3, #-15]
 8017878:	f804 1c0f 	strb.w	r1, [r4, #-15]
 801787c:	f813 1c0e 	ldrb.w	r1, [r3, #-14]
 8017880:	f804 1c0e 	strb.w	r1, [r4, #-14]
 8017884:	f813 1c0d 	ldrb.w	r1, [r3, #-13]
 8017888:	f804 1c0d 	strb.w	r1, [r4, #-13]
 801788c:	f813 1c0c 	ldrb.w	r1, [r3, #-12]
 8017890:	f804 1c0c 	strb.w	r1, [r4, #-12]
 8017894:	f813 1c0b 	ldrb.w	r1, [r3, #-11]
 8017898:	f804 1c0b 	strb.w	r1, [r4, #-11]
 801789c:	f813 1c0a 	ldrb.w	r1, [r3, #-10]
 80178a0:	f804 1c0a 	strb.w	r1, [r4, #-10]
 80178a4:	f813 1c09 	ldrb.w	r1, [r3, #-9]
 80178a8:	f804 1c09 	strb.w	r1, [r4, #-9]
            REPEAT8(COPY8);
 80178ac:	f813 1c08 	ldrb.w	r1, [r3, #-8]
 80178b0:	f804 1c08 	strb.w	r1, [r4, #-8]
 80178b4:	f813 1c07 	ldrb.w	r1, [r3, #-7]
 80178b8:	f804 1c07 	strb.w	r1, [r4, #-7]
 80178bc:	f813 1c06 	ldrb.w	r1, [r3, #-6]
 80178c0:	f804 1c06 	strb.w	r1, [r4, #-6]
 80178c4:	f813 1c05 	ldrb.w	r1, [r3, #-5]
 80178c8:	f804 1c05 	strb.w	r1, [r4, #-5]
 80178cc:	f813 1c04 	ldrb.w	r1, [r3, #-4]
 80178d0:	f804 1c04 	strb.w	r1, [r4, #-4]
 80178d4:	f813 1c03 	ldrb.w	r1, [r3, #-3]
 80178d8:	f804 1c03 	strb.w	r1, [r4, #-3]
 80178dc:	f813 1c02 	ldrb.w	r1, [r3, #-2]
 80178e0:	f804 1c02 	strb.w	r1, [r4, #-2]
 80178e4:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80178e8:	f804 1c01 	strb.w	r1, [r4, #-1]
        while(len > 32) {
 80178ec:	2a20      	cmp	r2, #32
 80178ee:	461d      	mov	r5, r3
 80178f0:	4621      	mov	r1, r4
 80178f2:	f103 0320 	add.w	r3, r3, #32
 80178f6:	f104 0420 	add.w	r4, r4, #32
 80178fa:	f63f af76 	bhi.w	80177ea <lv_memcpy+0x42>
 80178fe:	1e6b      	subs	r3, r5, #1
 8017900:	440a      	add	r2, r1
        while(len) {
 8017902:	4291      	cmp	r1, r2
 8017904:	d100      	bne.n	8017908 <lv_memcpy+0x160>
}
 8017906:	bd70      	pop	{r4, r5, r6, pc}
            COPY8
 8017908:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 801790c:	f801 4b01 	strb.w	r4, [r1], #1
            len--;
 8017910:	e7f7      	b.n	8017902 <lv_memcpy+0x15a>
        d_align = ALIGN_MASK + 1 - d_align;
 8017912:	f1c5 0508 	rsb	r5, r5, #8
 8017916:	4405      	add	r5, r0
 8017918:	461e      	mov	r6, r3
        while(d_align && len) {
 801791a:	b912      	cbnz	r2, 8017922 <lv_memcpy+0x17a>
 801791c:	1e73      	subs	r3, r6, #1
 801791e:	4422      	add	r2, r4
 8017920:	e02f      	b.n	8017982 <lv_memcpy+0x1da>
            COPY8;
 8017922:	f813 1b01 	ldrb.w	r1, [r3], #1
            len--;
 8017926:	3a01      	subs	r2, #1
            COPY8;
 8017928:	f804 1b01 	strb.w	r1, [r4], #1
        while(d_align && len) {
 801792c:	42ac      	cmp	r4, r5
            COPY8;
 801792e:	4619      	mov	r1, r3
        while(d_align && len) {
 8017930:	d1f2      	bne.n	8017918 <lv_memcpy+0x170>
 8017932:	e747      	b.n	80177c4 <lv_memcpy+0x1c>
        REPEAT8(COPY32)
 8017934:	f855 1c20 	ldr.w	r1, [r5, #-32]
        len -= 32;
 8017938:	3a20      	subs	r2, #32
        REPEAT8(COPY32)
 801793a:	f843 1c20 	str.w	r1, [r3, #-32]
 801793e:	f855 1c1c 	ldr.w	r1, [r5, #-28]
 8017942:	f843 1c1c 	str.w	r1, [r3, #-28]
 8017946:	f855 1c18 	ldr.w	r1, [r5, #-24]
 801794a:	f843 1c18 	str.w	r1, [r3, #-24]
 801794e:	f855 1c14 	ldr.w	r1, [r5, #-20]
 8017952:	f843 1c14 	str.w	r1, [r3, #-20]
 8017956:	f855 1c10 	ldr.w	r1, [r5, #-16]
 801795a:	f843 1c10 	str.w	r1, [r3, #-16]
 801795e:	f855 1c0c 	ldr.w	r1, [r5, #-12]
 8017962:	f843 1c0c 	str.w	r1, [r3, #-12]
 8017966:	f855 1c08 	ldr.w	r1, [r5, #-8]
 801796a:	f843 1c08 	str.w	r1, [r3, #-8]
 801796e:	f855 1c04 	ldr.w	r1, [r5, #-4]
 8017972:	f843 1c04 	str.w	r1, [r3, #-4]
        len -= 32;
 8017976:	4629      	mov	r1, r5
 8017978:	e725      	b.n	80177c6 <lv_memcpy+0x1e>
        COPY8
 801797a:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 801797e:	f804 1b01 	strb.w	r1, [r4], #1
    while(len) {
 8017982:	4294      	cmp	r4, r2
 8017984:	d1f9      	bne.n	801797a <lv_memcpy+0x1d2>
 8017986:	e7be      	b.n	8017906 <lv_memcpy+0x15e>

08017988 <lv_memset>:
    if(d_align) {
 8017988:	f010 0307 	ands.w	r3, r0, #7
{
 801798c:	b510      	push	{r4, lr}
    if(d_align) {
 801798e:	d009      	beq.n	80179a4 <lv_memset+0x1c>
        d_align = ALIGN_MASK + 1 - d_align;
 8017990:	f1c3 0308 	rsb	r3, r3, #8
 8017994:	4403      	add	r3, r0
        while(d_align && len) {
 8017996:	b12a      	cbz	r2, 80179a4 <lv_memset+0x1c>
            SET8(v);
 8017998:	f800 1b01 	strb.w	r1, [r0], #1
        while(d_align && len) {
 801799c:	4298      	cmp	r0, r3
            len--;
 801799e:	f102 32ff 	add.w	r2, r2, #4294967295
        while(d_align && len) {
 80179a2:	d1f8      	bne.n	8017996 <lv_memset+0xe>
    uint32_t v32 = (uint32_t)v + ((uint32_t)v << 8) + ((uint32_t)v << 16) + ((uint32_t)v << 24);
 80179a4:	040b      	lsls	r3, r1, #16
 80179a6:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80179aa:	440b      	add	r3, r1
 80179ac:	eb03 6301 	add.w	r3, r3, r1, lsl #24
    while(len > 32) {
 80179b0:	2a20      	cmp	r2, #32
 80179b2:	4604      	mov	r4, r0
 80179b4:	f100 0020 	add.w	r0, r0, #32
 80179b8:	d805      	bhi.n	80179c6 <lv_memset+0x3e>
    while(len > 4) {
 80179ba:	2a04      	cmp	r2, #4
 80179bc:	d80d      	bhi.n	80179da <lv_memset+0x52>
 80179be:	4422      	add	r2, r4
    while(len) {
 80179c0:	42a2      	cmp	r2, r4
 80179c2:	d10e      	bne.n	80179e2 <lv_memset+0x5a>
}
 80179c4:	bd10      	pop	{r4, pc}
        len -= 32;
 80179c6:	3a20      	subs	r2, #32
        REPEAT8(SET32(v32));
 80179c8:	e940 3308 	strd	r3, r3, [r0, #-32]
 80179cc:	e940 3306 	strd	r3, r3, [r0, #-24]
 80179d0:	e940 3304 	strd	r3, r3, [r0, #-16]
 80179d4:	e940 3302 	strd	r3, r3, [r0, #-8]
        len -= 32;
 80179d8:	e7ea      	b.n	80179b0 <lv_memset+0x28>
        len -= 4;
 80179da:	3a04      	subs	r2, #4
        SET32(v32);
 80179dc:	f844 3b04 	str.w	r3, [r4], #4
        len -= 4;
 80179e0:	e7eb      	b.n	80179ba <lv_memset+0x32>
        SET8(v);
 80179e2:	f804 1b01 	strb.w	r1, [r4], #1
        len--;
 80179e6:	e7eb      	b.n	80179c0 <lv_memset+0x38>

080179e8 <lv_mem_monitor>:
{
 80179e8:	b510      	push	{r4, lr}
    lv_memset(mon_p, 0, sizeof(lv_mem_monitor_t));
 80179ea:	221c      	movs	r2, #28
 80179ec:	2100      	movs	r1, #0
{
 80179ee:	4604      	mov	r4, r0
    lv_memset(mon_p, 0, sizeof(lv_mem_monitor_t));
 80179f0:	f7ff ffca 	bl	8017988 <lv_memset>
    tlsf_walk_pool(tlsf_get_pool(tlsf), lv_mem_walker, mon_p);
 80179f4:	4b0e      	ldr	r3, [pc, #56]	; (8017a30 <lv_mem_monitor+0x48>)
 80179f6:	6818      	ldr	r0, [r3, #0]
 80179f8:	f001 f9d0 	bl	8018d9c <tlsf_get_pool>
 80179fc:	4622      	mov	r2, r4
 80179fe:	490d      	ldr	r1, [pc, #52]	; (8017a34 <lv_mem_monitor+0x4c>)
 8017a00:	f001 f966 	bl	8018cd0 <tlsf_walk_pool>
    mon_p->total_size = LV_MEM_SIZE;
 8017a04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    mon_p->used_pct = 100 - (100U * mon_p->free_size) / mon_p->total_size;
 8017a08:	68a2      	ldr	r2, [r4, #8]
    mon_p->total_size = LV_MEM_SIZE;
 8017a0a:	6023      	str	r3, [r4, #0]
    mon_p->used_pct = 100 - (100U * mon_p->free_size) / mon_p->total_size;
 8017a0c:	2364      	movs	r3, #100	; 0x64
 8017a0e:	fb03 f102 	mul.w	r1, r3, r2
 8017a12:	0bc9      	lsrs	r1, r1, #15
 8017a14:	1a59      	subs	r1, r3, r1
 8017a16:	7621      	strb	r1, [r4, #24]
    if(mon_p->free_size > 0) {
 8017a18:	b142      	cbz	r2, 8017a2c <lv_mem_monitor+0x44>
        mon_p->frag_pct = mon_p->free_biggest_size * 100U / mon_p->free_size;
 8017a1a:	68e1      	ldr	r1, [r4, #12]
 8017a1c:	434b      	muls	r3, r1
 8017a1e:	fbb3 f3f2 	udiv	r3, r3, r2
        mon_p->frag_pct = 100 - mon_p->frag_pct;
 8017a22:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8017a26:	b2db      	uxtb	r3, r3
 8017a28:	7663      	strb	r3, [r4, #25]
}
 8017a2a:	bd10      	pop	{r4, pc}
        mon_p->frag_pct = 0; /*no fragmentation if all the RAM is used*/
 8017a2c:	4613      	mov	r3, r2
 8017a2e:	e7fb      	b.n	8017a28 <lv_mem_monitor+0x40>
 8017a30:	20002b74 	.word	0x20002b74
 8017a34:	080176f9 	.word	0x080176f9

08017a38 <lv_mem_alloc>:
{
 8017a38:	b510      	push	{r4, lr}
    if(size == 0) {
 8017a3a:	4601      	mov	r1, r0
{
 8017a3c:	b088      	sub	sp, #32
    if(size == 0) {
 8017a3e:	b158      	cbz	r0, 8017a58 <lv_mem_alloc+0x20>
    void * alloc = tlsf_malloc(tlsf, size);
 8017a40:	4b06      	ldr	r3, [pc, #24]	; (8017a5c <lv_mem_alloc+0x24>)
 8017a42:	6818      	ldr	r0, [r3, #0]
 8017a44:	f001 f9ad 	bl	8018da2 <tlsf_malloc>
    if(alloc == NULL) {
 8017a48:	4604      	mov	r4, r0
 8017a4a:	b910      	cbnz	r0, 8017a52 <lv_mem_alloc+0x1a>
        lv_mem_monitor(&mon);
 8017a4c:	a801      	add	r0, sp, #4
 8017a4e:	f7ff ffcb 	bl	80179e8 <lv_mem_monitor>
}
 8017a52:	4620      	mov	r0, r4
 8017a54:	b008      	add	sp, #32
 8017a56:	bd10      	pop	{r4, pc}
        return &zero_mem;
 8017a58:	4c01      	ldr	r4, [pc, #4]	; (8017a60 <lv_mem_alloc+0x28>)
 8017a5a:	e7fa      	b.n	8017a52 <lv_mem_alloc+0x1a>
 8017a5c:	20002b74 	.word	0x20002b74
 8017a60:	20000030 	.word	0x20000030

08017a64 <lv_mem_realloc>:
    if(new_size == 0) {
 8017a64:	460a      	mov	r2, r1
{
 8017a66:	b508      	push	{r3, lr}
    if(new_size == 0) {
 8017a68:	b171      	cbz	r1, 8017a88 <lv_mem_realloc+0x24>
    if(data_p == &zero_mem) return lv_mem_alloc(new_size);
 8017a6a:	4909      	ldr	r1, [pc, #36]	; (8017a90 <lv_mem_realloc+0x2c>)
 8017a6c:	4288      	cmp	r0, r1
 8017a6e:	d104      	bne.n	8017a7a <lv_mem_realloc+0x16>
 8017a70:	4610      	mov	r0, r2
}
 8017a72:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    if(data_p == &zero_mem) return lv_mem_alloc(new_size);
 8017a76:	f7ff bfdf 	b.w	8017a38 <lv_mem_alloc>
    void * new_p = tlsf_realloc(tlsf, data_p, new_size);
 8017a7a:	4b06      	ldr	r3, [pc, #24]	; (8017a94 <lv_mem_realloc+0x30>)
 8017a7c:	4601      	mov	r1, r0
 8017a7e:	6818      	ldr	r0, [r3, #0]
}
 8017a80:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    void * new_p = tlsf_realloc(tlsf, data_p, new_size);
 8017a84:	f001 ba0c 	b.w	8018ea0 <tlsf_realloc>
        lv_mem_free(data_p);
 8017a88:	f7ff fe54 	bl	8017734 <lv_mem_free>
}
 8017a8c:	4800      	ldr	r0, [pc, #0]	; (8017a90 <lv_mem_realloc+0x2c>)
 8017a8e:	bd08      	pop	{r3, pc}
 8017a90:	20000030 	.word	0x20000030
 8017a94:	20002b74 	.word	0x20002b74

08017a98 <lv_mem_buf_get>:
{
 8017a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(size == 0) return NULL;
 8017a9a:	4604      	mov	r4, r0
 8017a9c:	b1b0      	cbz	r0, 8017acc <lv_mem_buf_get+0x34>
        if(LV_GC_ROOT(lv_mem_buf[i]).used == 0 && LV_GC_ROOT(lv_mem_buf[i]).size >= size) {
 8017a9e:	4924      	ldr	r1, [pc, #144]	; (8017b30 <lv_mem_buf_get+0x98>)
 8017aa0:	2300      	movs	r3, #0
    int8_t i_guess = -1;
 8017aa2:	f04f 32ff 	mov.w	r2, #4294967295
 8017aa6:	460e      	mov	r6, r1
        if(LV_GC_ROOT(lv_mem_buf[i]).used == 0 && LV_GC_ROOT(lv_mem_buf[i]).size >= size) {
 8017aa8:	f101 0c04 	add.w	ip, r1, #4
 8017aac:	eb01 07c3 	add.w	r7, r1, r3, lsl #3
 8017ab0:	79bd      	ldrb	r5, [r7, #6]
 8017ab2:	4628      	mov	r0, r5
 8017ab4:	07ed      	lsls	r5, r5, #31
 8017ab6:	d413      	bmi.n	8017ae0 <lv_mem_buf_get+0x48>
 8017ab8:	f83c 5033 	ldrh.w	r5, [ip, r3, lsl #3]
 8017abc:	42a5      	cmp	r5, r4
 8017abe:	d30f      	bcc.n	8017ae0 <lv_mem_buf_get+0x48>
            if(LV_GC_ROOT(lv_mem_buf[i]).size == size) {
 8017ac0:	d105      	bne.n	8017ace <lv_mem_buf_get+0x36>
                LV_GC_ROOT(lv_mem_buf[i]).used = 1;
 8017ac2:	f040 0001 	orr.w	r0, r0, #1
 8017ac6:	71b8      	strb	r0, [r7, #6]
                return LV_GC_ROOT(lv_mem_buf[i]).p;
 8017ac8:	f851 0033 	ldr.w	r0, [r1, r3, lsl #3]
}
 8017acc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            else if(i_guess < 0) {
 8017ace:	1c50      	adds	r0, r2, #1
 8017ad0:	d101      	bne.n	8017ad6 <lv_mem_buf_get+0x3e>
                i_guess = i;
 8017ad2:	b25a      	sxtb	r2, r3
 8017ad4:	e004      	b.n	8017ae0 <lv_mem_buf_get+0x48>
            else if(LV_GC_ROOT(lv_mem_buf[i]).size < LV_GC_ROOT(lv_mem_buf[i_guess]).size) {
 8017ad6:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
 8017ada:	8880      	ldrh	r0, [r0, #4]
 8017adc:	42a8      	cmp	r0, r5
 8017ade:	d8f8      	bhi.n	8017ad2 <lv_mem_buf_get+0x3a>
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 8017ae0:	3301      	adds	r3, #1
 8017ae2:	2b10      	cmp	r3, #16
 8017ae4:	d1e2      	bne.n	8017aac <lv_mem_buf_get+0x14>
    if(i_guess >= 0) {
 8017ae6:	1c51      	adds	r1, r2, #1
 8017ae8:	d008      	beq.n	8017afc <lv_mem_buf_get+0x64>
        LV_GC_ROOT(lv_mem_buf[i_guess]).used = 1;
 8017aea:	eb06 01c2 	add.w	r1, r6, r2, lsl #3
        return LV_GC_ROOT(lv_mem_buf[i_guess]).p;
 8017aee:	f856 0032 	ldr.w	r0, [r6, r2, lsl #3]
        LV_GC_ROOT(lv_mem_buf[i_guess]).used = 1;
 8017af2:	798b      	ldrb	r3, [r1, #6]
 8017af4:	f043 0301 	orr.w	r3, r3, #1
 8017af8:	718b      	strb	r3, [r1, #6]
        return LV_GC_ROOT(lv_mem_buf[i_guess]).p;
 8017afa:	e7e7      	b.n	8017acc <lv_mem_buf_get+0x34>
 8017afc:	2500      	movs	r5, #0
        if(LV_GC_ROOT(lv_mem_buf[i]).used == 0) {
 8017afe:	eb06 07c5 	add.w	r7, r6, r5, lsl #3
 8017b02:	79bb      	ldrb	r3, [r7, #6]
 8017b04:	07db      	lsls	r3, r3, #31
 8017b06:	d40e      	bmi.n	8017b26 <lv_mem_buf_get+0x8e>
            void * buf = lv_mem_realloc(LV_GC_ROOT(lv_mem_buf[i]).p, size);
 8017b08:	4621      	mov	r1, r4
 8017b0a:	f856 0035 	ldr.w	r0, [r6, r5, lsl #3]
 8017b0e:	f7ff ffa9 	bl	8017a64 <lv_mem_realloc>
            LV_ASSERT_MSG(buf != NULL, "Out of memory, can't allocate a new buffer (increase your LV_MEM_SIZE/heap size)");
 8017b12:	b900      	cbnz	r0, 8017b16 <lv_mem_buf_get+0x7e>
 8017b14:	e7fe      	b.n	8017b14 <lv_mem_buf_get+0x7c>
            LV_GC_ROOT(lv_mem_buf[i]).used = 1;
 8017b16:	79bb      	ldrb	r3, [r7, #6]
            LV_GC_ROOT(lv_mem_buf[i]).size = size;
 8017b18:	80bc      	strh	r4, [r7, #4]
            LV_GC_ROOT(lv_mem_buf[i]).used = 1;
 8017b1a:	f043 0301 	orr.w	r3, r3, #1
            LV_GC_ROOT(lv_mem_buf[i]).p    = buf;
 8017b1e:	f846 0035 	str.w	r0, [r6, r5, lsl #3]
            LV_GC_ROOT(lv_mem_buf[i]).used = 1;
 8017b22:	71bb      	strb	r3, [r7, #6]
            return LV_GC_ROOT(lv_mem_buf[i]).p;
 8017b24:	e7d2      	b.n	8017acc <lv_mem_buf_get+0x34>
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 8017b26:	3501      	adds	r5, #1
 8017b28:	2d10      	cmp	r5, #16
 8017b2a:	d1e8      	bne.n	8017afe <lv_mem_buf_get+0x66>
    LV_ASSERT_MSG(false, "No more buffers. Increase LV_MEM_BUF_MAX_NUM.");
 8017b2c:	e7fe      	b.n	8017b2c <lv_mem_buf_get+0x94>
 8017b2e:	bf00      	nop
 8017b30:	2000af04 	.word	0x2000af04

08017b34 <lv_memset_00>:
    if(d_align) {
 8017b34:	f010 0307 	ands.w	r3, r0, #7
 8017b38:	d10d      	bne.n	8017b56 <lv_memset_00+0x22>
 8017b3a:	4603      	mov	r3, r0
        REPEAT8(SET32(0));
 8017b3c:	2200      	movs	r2, #0
    while(len > 32) {
 8017b3e:	2920      	cmp	r1, #32
 8017b40:	4618      	mov	r0, r3
 8017b42:	f103 0320 	add.w	r3, r3, #32
 8017b46:	d815      	bhi.n	8017b74 <lv_memset_00+0x40>
        SET32(0);
 8017b48:	2300      	movs	r3, #0
    while(len > 4) {
 8017b4a:	2904      	cmp	r1, #4
 8017b4c:	d908      	bls.n	8017b60 <lv_memset_00+0x2c>
        len -= 4;
 8017b4e:	3904      	subs	r1, #4
        SET32(0);
 8017b50:	f840 3b04 	str.w	r3, [r0], #4
        len -= 4;
 8017b54:	e7f9      	b.n	8017b4a <lv_memset_00+0x16>
        d_align = ALIGN_MASK + 1 - d_align;
 8017b56:	f1c3 0308 	rsb	r3, r3, #8
            SET8(0);
 8017b5a:	2200      	movs	r2, #0
 8017b5c:	4403      	add	r3, r0
        while(d_align && len) {
 8017b5e:	b911      	cbnz	r1, 8017b66 <lv_memset_00+0x32>
 8017b60:	4401      	add	r1, r0
        SET8(0);
 8017b62:	2300      	movs	r3, #0
 8017b64:	e012      	b.n	8017b8c <lv_memset_00+0x58>
            SET8(0);
 8017b66:	f800 2b01 	strb.w	r2, [r0], #1
        while(d_align && len) {
 8017b6a:	4298      	cmp	r0, r3
            len--;
 8017b6c:	f101 31ff 	add.w	r1, r1, #4294967295
        while(d_align && len) {
 8017b70:	d1f5      	bne.n	8017b5e <lv_memset_00+0x2a>
 8017b72:	e7e2      	b.n	8017b3a <lv_memset_00+0x6>
        len -= 32;
 8017b74:	3920      	subs	r1, #32
        REPEAT8(SET32(0));
 8017b76:	e943 2208 	strd	r2, r2, [r3, #-32]
 8017b7a:	e943 2206 	strd	r2, r2, [r3, #-24]
 8017b7e:	e943 2204 	strd	r2, r2, [r3, #-16]
 8017b82:	e943 2202 	strd	r2, r2, [r3, #-8]
        len -= 32;
 8017b86:	e7da      	b.n	8017b3e <lv_memset_00+0xa>
        SET8(0);
 8017b88:	f800 3b01 	strb.w	r3, [r0], #1
    while(len) {
 8017b8c:	4288      	cmp	r0, r1
 8017b8e:	d1fb      	bne.n	8017b88 <lv_memset_00+0x54>
}
 8017b90:	4770      	bx	lr

08017b92 <lv_memset_ff>:
    if(d_align) {
 8017b92:	f010 0307 	ands.w	r3, r0, #7
 8017b96:	d10f      	bne.n	8017bb8 <lv_memset_ff+0x26>
 8017b98:	4603      	mov	r3, r0
        REPEAT8(SET32(0xFFFFFFFF));
 8017b9a:	f04f 32ff 	mov.w	r2, #4294967295
    while(len > 32) {
 8017b9e:	2920      	cmp	r1, #32
 8017ba0:	4618      	mov	r0, r3
 8017ba2:	f103 0320 	add.w	r3, r3, #32
 8017ba6:	d816      	bhi.n	8017bd6 <lv_memset_ff+0x44>
        SET32(0xFFFFFFFF);
 8017ba8:	f04f 33ff 	mov.w	r3, #4294967295
    while(len > 4) {
 8017bac:	2904      	cmp	r1, #4
 8017bae:	d908      	bls.n	8017bc2 <lv_memset_ff+0x30>
        len -= 4;
 8017bb0:	3904      	subs	r1, #4
        SET32(0xFFFFFFFF);
 8017bb2:	f840 3b04 	str.w	r3, [r0], #4
        len -= 4;
 8017bb6:	e7f9      	b.n	8017bac <lv_memset_ff+0x1a>
        d_align = ALIGN_MASK + 1 - d_align;
 8017bb8:	f1c3 0308 	rsb	r3, r3, #8
            SET8(0xFF);
 8017bbc:	22ff      	movs	r2, #255	; 0xff
 8017bbe:	4403      	add	r3, r0
        while(d_align && len) {
 8017bc0:	b911      	cbnz	r1, 8017bc8 <lv_memset_ff+0x36>
 8017bc2:	4401      	add	r1, r0
        SET8(0xFF);
 8017bc4:	23ff      	movs	r3, #255	; 0xff
 8017bc6:	e012      	b.n	8017bee <lv_memset_ff+0x5c>
            SET8(0xFF);
 8017bc8:	f800 2b01 	strb.w	r2, [r0], #1
        while(d_align && len) {
 8017bcc:	4298      	cmp	r0, r3
            len--;
 8017bce:	f101 31ff 	add.w	r1, r1, #4294967295
        while(d_align && len) {
 8017bd2:	d1f5      	bne.n	8017bc0 <lv_memset_ff+0x2e>
 8017bd4:	e7e0      	b.n	8017b98 <lv_memset_ff+0x6>
        len -= 32;
 8017bd6:	3920      	subs	r1, #32
        REPEAT8(SET32(0xFFFFFFFF));
 8017bd8:	e943 2208 	strd	r2, r2, [r3, #-32]
 8017bdc:	e943 2206 	strd	r2, r2, [r3, #-24]
 8017be0:	e943 2204 	strd	r2, r2, [r3, #-16]
 8017be4:	e943 2202 	strd	r2, r2, [r3, #-8]
        len -= 32;
 8017be8:	e7d9      	b.n	8017b9e <lv_memset_ff+0xc>
        SET8(0xFF);
 8017bea:	f800 3b01 	strb.w	r3, [r0], #1
    while(len) {
 8017bee:	4288      	cmp	r0, r1
 8017bf0:	d1fb      	bne.n	8017bea <lv_memset_ff+0x58>
}
 8017bf2:	4770      	bx	lr

08017bf4 <_out_buffer>:
} out_fct_wrap_type;

// internal buffer output
static inline void _out_buffer(char character, void * buffer, size_t idx, size_t maxlen)
{
    if(idx < maxlen) {
 8017bf4:	429a      	cmp	r2, r3
        ((char *)buffer)[idx] = character;
 8017bf6:	bf38      	it	cc
 8017bf8:	5488      	strbcc	r0, [r1, r2]
    }
}
 8017bfa:	4770      	bx	lr

08017bfc <_out_null>:
{
    (void)character;
    (void)buffer;
    (void)idx;
    (void)maxlen;
}
 8017bfc:	4770      	bx	lr

08017bfe <_ntoa_format>:
}

// internal itoa format
static size_t _ntoa_format(out_fct_type out, char * buffer, size_t idx, size_t maxlen, char * buf, size_t len,
                           bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8017bfe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c02:	4617      	mov	r7, r2
 8017c04:	4680      	mov	r8, r0
 8017c06:	f89d e038 	ldrb.w	lr, [sp, #56]	; 0x38
 8017c0a:	e9dd 6211 	ldrd	r6, r2, [sp, #68]	; 0x44
 8017c0e:	e9dd 540c 	ldrd	r5, r4, [sp, #48]	; 0x30
    // pad leading zeros
    if(!(flags & FLAGS_LEFT)) {
 8017c12:	f012 0a02 	ands.w	sl, r2, #2
{
 8017c16:	e9dd 0c0f 	ldrd	r0, ip, [sp, #60]	; 0x3c
    if(!(flags & FLAGS_LEFT)) {
 8017c1a:	d11f      	bne.n	8017c5c <_ntoa_format+0x5e>
        if(width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8017c1c:	f002 0901 	and.w	r9, r2, #1
 8017c20:	b14e      	cbz	r6, 8017c36 <_ntoa_format+0x38>
 8017c22:	f1b9 0f00 	cmp.w	r9, #0
 8017c26:	d006      	beq.n	8017c36 <_ntoa_format+0x38>
 8017c28:	f1be 0f00 	cmp.w	lr, #0
 8017c2c:	d102      	bne.n	8017c34 <_ntoa_format+0x36>
 8017c2e:	f012 0f0c 	tst.w	r2, #12
 8017c32:	d000      	beq.n	8017c36 <_ntoa_format+0x38>
            width--;
 8017c34:	3e01      	subs	r6, #1
        }
        while((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
            buf[len++] = '0';
 8017c36:	f04f 0b30 	mov.w	fp, #48	; 0x30
 8017c3a:	e002      	b.n	8017c42 <_ntoa_format+0x44>
 8017c3c:	f805 b004 	strb.w	fp, [r5, r4]
 8017c40:	3401      	adds	r4, #1
        while((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8017c42:	45a4      	cmp	ip, r4
 8017c44:	d901      	bls.n	8017c4a <_ntoa_format+0x4c>
 8017c46:	2c20      	cmp	r4, #32
 8017c48:	d1f8      	bne.n	8017c3c <_ntoa_format+0x3e>
        }
        while((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
            buf[len++] = '0';
 8017c4a:	f04f 0b30 	mov.w	fp, #48	; 0x30
        while((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8017c4e:	f1b9 0f00 	cmp.w	r9, #0
 8017c52:	d003      	beq.n	8017c5c <_ntoa_format+0x5e>
 8017c54:	42a6      	cmp	r6, r4
 8017c56:	d901      	bls.n	8017c5c <_ntoa_format+0x5e>
 8017c58:	2c20      	cmp	r4, #32
 8017c5a:	d13e      	bne.n	8017cda <_ntoa_format+0xdc>
        }
    }

    // handle hash
    if(flags & FLAGS_HASH) {
 8017c5c:	f012 0f10 	tst.w	r2, #16
 8017c60:	d01a      	beq.n	8017c98 <_ntoa_format+0x9a>
        if(!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 8017c62:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8017c66:	d13d      	bne.n	8017ce4 <_ntoa_format+0xe6>
 8017c68:	2c00      	cmp	r4, #0
 8017c6a:	d03b      	beq.n	8017ce4 <_ntoa_format+0xe6>
 8017c6c:	4564      	cmp	r4, ip
 8017c6e:	d001      	beq.n	8017c74 <_ntoa_format+0x76>
 8017c70:	42b4      	cmp	r4, r6
 8017c72:	d137      	bne.n	8017ce4 <_ntoa_format+0xe6>
            len--;
            if(len && (base == 16U)) {
 8017c74:	f1b4 0c01 	subs.w	ip, r4, #1
 8017c78:	d033      	beq.n	8017ce2 <_ntoa_format+0xe4>
 8017c7a:	2810      	cmp	r0, #16
 8017c7c:	d16f      	bne.n	8017d5e <_ntoa_format+0x160>
                len--;
 8017c7e:	3c02      	subs	r4, #2
            }
        }
        if((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8017c80:	0690      	lsls	r0, r2, #26
 8017c82:	d437      	bmi.n	8017cf4 <_ntoa_format+0xf6>
 8017c84:	2c1f      	cmp	r4, #31
 8017c86:	d80f      	bhi.n	8017ca8 <_ntoa_format+0xaa>
            buf[len++] = 'x';
 8017c88:	2078      	movs	r0, #120	; 0x78
        }
        else if((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
            buf[len++] = 'X';
        }
        else if((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
            buf[len++] = 'b';
 8017c8a:	5528      	strb	r0, [r5, r4]
 8017c8c:	3401      	adds	r4, #1
        }
        if(len < PRINTF_NTOA_BUFFER_SIZE) {
 8017c8e:	2c1f      	cmp	r4, #31
 8017c90:	d80a      	bhi.n	8017ca8 <_ntoa_format+0xaa>
            buf[len++] = '0';
 8017c92:	2030      	movs	r0, #48	; 0x30
 8017c94:	5528      	strb	r0, [r5, r4]
 8017c96:	3401      	adds	r4, #1
        }
    }

    if(len < PRINTF_NTOA_BUFFER_SIZE) {
 8017c98:	2c20      	cmp	r4, #32
 8017c9a:	d005      	beq.n	8017ca8 <_ntoa_format+0xaa>
        if(negative) {
 8017c9c:	f1be 0f00 	cmp.w	lr, #0
 8017ca0:	d02c      	beq.n	8017cfc <_ntoa_format+0xfe>
            buf[len++] = '-';
 8017ca2:	202d      	movs	r0, #45	; 0x2d
        }
        else if(flags & FLAGS_PLUS) {
            buf[len++] = '+';  // ignore the space if the '+' exists
        }
        else if(flags & FLAGS_SPACE) {
            buf[len++] = ' ';
 8017ca4:	5528      	strb	r0, [r5, r4]
 8017ca6:	3401      	adds	r4, #1
    if(!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8017ca8:	0792      	lsls	r2, r2, #30
 8017caa:	d041      	beq.n	8017d30 <_ntoa_format+0x132>
 8017cac:	463a      	mov	r2, r7
 8017cae:	4425      	add	r5, r4
 8017cb0:	4414      	add	r4, r2
    while(len) {
 8017cb2:	42a2      	cmp	r2, r4
 8017cb4:	d140      	bne.n	8017d38 <_ntoa_format+0x13a>
    if(flags & FLAGS_LEFT) {
 8017cb6:	f1ba 0f00 	cmp.w	sl, #0
 8017cba:	d00a      	beq.n	8017cd2 <_ntoa_format+0xd4>
 8017cbc:	eba4 0907 	sub.w	r9, r4, r7
 8017cc0:	464d      	mov	r5, r9
        while(idx - start_idx < width) {
 8017cc2:	42b5      	cmp	r5, r6
 8017cc4:	eb05 0207 	add.w	r2, r5, r7
 8017cc8:	d341      	bcc.n	8017d4e <_ntoa_format+0x150>
 8017cca:	4437      	add	r7, r6
 8017ccc:	454e      	cmp	r6, r9
 8017cce:	bf28      	it	cs
 8017cd0:	463c      	movcs	r4, r7
        }
    }

    return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
}
 8017cd2:	4620      	mov	r0, r4
 8017cd4:	b003      	add	sp, #12
 8017cd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            buf[len++] = '0';
 8017cda:	f805 b004 	strb.w	fp, [r5, r4]
 8017cde:	3401      	adds	r4, #1
 8017ce0:	e7b5      	b.n	8017c4e <_ntoa_format+0x50>
 8017ce2:	4664      	mov	r4, ip
        if((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8017ce4:	2810      	cmp	r0, #16
 8017ce6:	d0cb      	beq.n	8017c80 <_ntoa_format+0x82>
        else if((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8017ce8:	2802      	cmp	r0, #2
 8017cea:	d1d0      	bne.n	8017c8e <_ntoa_format+0x90>
 8017cec:	2c1f      	cmp	r4, #31
 8017cee:	d8db      	bhi.n	8017ca8 <_ntoa_format+0xaa>
            buf[len++] = 'b';
 8017cf0:	2062      	movs	r0, #98	; 0x62
 8017cf2:	e7ca      	b.n	8017c8a <_ntoa_format+0x8c>
        else if((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8017cf4:	2c1f      	cmp	r4, #31
 8017cf6:	d8d7      	bhi.n	8017ca8 <_ntoa_format+0xaa>
            buf[len++] = 'X';
 8017cf8:	2058      	movs	r0, #88	; 0x58
 8017cfa:	e7c6      	b.n	8017c8a <_ntoa_format+0x8c>
        else if(flags & FLAGS_PLUS) {
 8017cfc:	0750      	lsls	r0, r2, #29
 8017cfe:	d501      	bpl.n	8017d04 <_ntoa_format+0x106>
            buf[len++] = '+';  // ignore the space if the '+' exists
 8017d00:	202b      	movs	r0, #43	; 0x2b
 8017d02:	e7cf      	b.n	8017ca4 <_ntoa_format+0xa6>
        else if(flags & FLAGS_SPACE) {
 8017d04:	0710      	lsls	r0, r2, #28
 8017d06:	d5cf      	bpl.n	8017ca8 <_ntoa_format+0xaa>
            buf[len++] = ' ';
 8017d08:	2020      	movs	r0, #32
 8017d0a:	e7cb      	b.n	8017ca4 <_ntoa_format+0xa6>
            out(' ', buffer, idx++, maxlen);
 8017d0c:	2020      	movs	r0, #32
        for(i = len; i < width; i++) {
 8017d0e:	f109 0901 	add.w	r9, r9, #1
            out(' ', buffer, idx++, maxlen);
 8017d12:	e9cd 1300 	strd	r1, r3, [sp]
 8017d16:	47c0      	blx	r8
        for(i = len; i < width; i++) {
 8017d18:	e9dd 1300 	ldrd	r1, r3, [sp]
 8017d1c:	454e      	cmp	r6, r9
 8017d1e:	eb0b 0209 	add.w	r2, fp, r9
 8017d22:	d8f3      	bhi.n	8017d0c <_ntoa_format+0x10e>
 8017d24:	1b32      	subs	r2, r6, r4
 8017d26:	42b4      	cmp	r4, r6
 8017d28:	bf88      	it	hi
 8017d2a:	2200      	movhi	r2, #0
 8017d2c:	443a      	add	r2, r7
 8017d2e:	e7be      	b.n	8017cae <_ntoa_format+0xb0>
 8017d30:	46a1      	mov	r9, r4
 8017d32:	eba7 0b04 	sub.w	fp, r7, r4
 8017d36:	e7f1      	b.n	8017d1c <_ntoa_format+0x11e>
        out(buf[--len], buffer, idx++, maxlen);
 8017d38:	f102 0901 	add.w	r9, r2, #1
 8017d3c:	f815 0d01 	ldrb.w	r0, [r5, #-1]!
 8017d40:	e9cd 1300 	strd	r1, r3, [sp]
 8017d44:	47c0      	blx	r8
 8017d46:	464a      	mov	r2, r9
 8017d48:	e9dd 1300 	ldrd	r1, r3, [sp]
 8017d4c:	e7b1      	b.n	8017cb2 <_ntoa_format+0xb4>
            out(' ', buffer, idx++, maxlen);
 8017d4e:	2020      	movs	r0, #32
 8017d50:	3501      	adds	r5, #1
 8017d52:	e9cd 1300 	strd	r1, r3, [sp]
 8017d56:	47c0      	blx	r8
 8017d58:	e9dd 1300 	ldrd	r1, r3, [sp]
 8017d5c:	e7b1      	b.n	8017cc2 <_ntoa_format+0xc4>
        else if((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8017d5e:	2802      	cmp	r0, #2
 8017d60:	4664      	mov	r4, ip
 8017d62:	d194      	bne.n	8017c8e <_ntoa_format+0x90>
 8017d64:	e7c4      	b.n	8017cf0 <_ntoa_format+0xf2>

08017d66 <_ntoa_long>:

// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char * buffer, size_t idx, size_t maxlen, unsigned long value, bool negative,
                         unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8017d66:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017d6a:	b091      	sub	sp, #68	; 0x44
 8017d6c:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8017d6e:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8017d70:	9f1d      	ldr	r7, [sp, #116]	; 0x74
    char buf[PRINTF_NTOA_BUFFER_SIZE];
    size_t len = 0U;

    // no hash for 0 values
    if(!value) {
 8017d72:	b90d      	cbnz	r5, 8017d78 <_ntoa_long+0x12>
        flags &= ~FLAGS_HASH;
 8017d74:	f027 0710 	bic.w	r7, r7, #16
    }

    // write if precision != 0 and value is != 0
    if(!(flags & FLAGS_PRECISION) || value) {
 8017d78:	057c      	lsls	r4, r7, #21
 8017d7a:	d500      	bpl.n	8017d7e <_ntoa_long+0x18>
 8017d7c:	b305      	cbz	r5, 8017dc0 <_ntoa_long+0x5a>
 8017d7e:	f017 0f20 	tst.w	r7, #32
        do {
            const char digit = (char)(value % base);
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8017d82:	46ac      	mov	ip, r5
 8017d84:	f10d 0e20 	add.w	lr, sp, #32
 8017d88:	f04f 0500 	mov.w	r5, #0
 8017d8c:	bf14      	ite	ne
 8017d8e:	f04f 0837 	movne.w	r8, #55	; 0x37
 8017d92:	f04f 0857 	moveq.w	r8, #87	; 0x57
 8017d96:	3501      	adds	r5, #1
            const char digit = (char)(value % base);
 8017d98:	fbbc f9f6 	udiv	r9, ip, r6
 8017d9c:	fb06 c919 	mls	r9, r6, r9, ip
 8017da0:	fa5f f489 	uxtb.w	r4, r9
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8017da4:	f1b9 0f09 	cmp.w	r9, #9
 8017da8:	bf94      	ite	ls
 8017daa:	3430      	addls	r4, #48	; 0x30
 8017dac:	4444      	addhi	r4, r8
            value /= base;
        } while(value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8017dae:	45b4      	cmp	ip, r6
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8017db0:	b2e4      	uxtb	r4, r4
 8017db2:	f80e 4b01 	strb.w	r4, [lr], #1
            value /= base;
 8017db6:	fbbc f4f6 	udiv	r4, ip, r6
        } while(value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8017dba:	d301      	bcc.n	8017dc0 <_ntoa_long+0x5a>
 8017dbc:	2d20      	cmp	r5, #32
 8017dbe:	d110      	bne.n	8017de2 <_ntoa_long+0x7c>
    }

    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8017dc0:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8017dc2:	9706      	str	r7, [sp, #24]
 8017dc4:	9405      	str	r4, [sp, #20]
 8017dc6:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8017dc8:	e9cd 6403 	strd	r6, r4, [sp, #12]
 8017dcc:	f89d 4064 	ldrb.w	r4, [sp, #100]	; 0x64
 8017dd0:	e9cd 5401 	strd	r5, r4, [sp, #4]
 8017dd4:	ac08      	add	r4, sp, #32
 8017dd6:	9400      	str	r4, [sp, #0]
 8017dd8:	f7ff ff11 	bl	8017bfe <_ntoa_format>
}
 8017ddc:	b011      	add	sp, #68	; 0x44
 8017dde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            value /= base;
 8017de2:	46a4      	mov	ip, r4
 8017de4:	e7d7      	b.n	8017d96 <_ntoa_long+0x30>

08017de6 <_ntoa_long_long>:

// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char * buffer, size_t idx, size_t maxlen, unsigned long long value,
                              bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8017de6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017dea:	b093      	sub	sp, #76	; 0x4c
 8017dec:	4699      	mov	r9, r3
 8017dee:	4606      	mov	r6, r0
 8017df0:	460f      	mov	r7, r1
 8017df2:	9d24      	ldr	r5, [sp, #144]	; 0x90
 8017df4:	4690      	mov	r8, r2
 8017df6:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	; 0x70
    char buf[PRINTF_NTOA_BUFFER_SIZE];
    size_t len = 0U;

    // no hash for 0 values
    if(!value) {
 8017dfa:	ea5a 030b 	orrs.w	r3, sl, fp
        flags &= ~FLAGS_HASH;
 8017dfe:	bf08      	it	eq
 8017e00:	f025 0510 	biceq.w	r5, r5, #16
    }

    // write if precision != 0 and value is != 0
    if(!(flags & FLAGS_PRECISION) || value) {
 8017e04:	056b      	lsls	r3, r5, #21
 8017e06:	d502      	bpl.n	8017e0e <_ntoa_long_long+0x28>
 8017e08:	ea5a 030b 	orrs.w	r3, sl, fp
 8017e0c:	d03c      	beq.n	8017e88 <_ntoa_long_long+0xa2>
 8017e0e:	ab0a      	add	r3, sp, #40	; 0x28
 8017e10:	f015 0f20 	tst.w	r5, #32
        do {
            const char digit = (char)(value % base);
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8017e14:	f04f 0400 	mov.w	r4, #0
 8017e18:	9308      	str	r3, [sp, #32]
 8017e1a:	bf14      	ite	ne
 8017e1c:	2337      	movne	r3, #55	; 0x37
 8017e1e:	2357      	moveq	r3, #87	; 0x57
 8017e20:	9309      	str	r3, [sp, #36]	; 0x24
            const char digit = (char)(value % base);
 8017e22:	4650      	mov	r0, sl
 8017e24:	4659      	mov	r1, fp
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8017e26:	3401      	adds	r4, #1
 8017e28:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
 8017e2c:	f7e8 fee6 	bl	8000bfc <__aeabi_uldivmod>
            const char digit = (char)(value % base);
 8017e30:	b2d2      	uxtb	r2, r2
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8017e32:	2a09      	cmp	r2, #9
 8017e34:	bf8a      	itet	hi
 8017e36:	9b09      	ldrhi	r3, [sp, #36]	; 0x24
 8017e38:	3230      	addls	r2, #48	; 0x30
 8017e3a:	18d2      	addhi	r2, r2, r3
 8017e3c:	9b08      	ldr	r3, [sp, #32]
 8017e3e:	b2d2      	uxtb	r2, r2
 8017e40:	f803 2b01 	strb.w	r2, [r3], #1
 8017e44:	9308      	str	r3, [sp, #32]
            value /= base;
        } while(value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8017e46:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
 8017e4a:	459b      	cmp	fp, r3
 8017e4c:	bf08      	it	eq
 8017e4e:	4592      	cmpeq	sl, r2
 8017e50:	d301      	bcc.n	8017e56 <_ntoa_long_long+0x70>
 8017e52:	2c20      	cmp	r4, #32
 8017e54:	d115      	bne.n	8017e82 <_ntoa_long_long+0x9c>
    }

    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8017e56:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8017e58:	4642      	mov	r2, r8
 8017e5a:	4639      	mov	r1, r7
 8017e5c:	4630      	mov	r0, r6
 8017e5e:	9305      	str	r3, [sp, #20]
 8017e60:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8017e62:	9506      	str	r5, [sp, #24]
 8017e64:	9304      	str	r3, [sp, #16]
 8017e66:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8017e68:	9303      	str	r3, [sp, #12]
 8017e6a:	f89d 3078 	ldrb.w	r3, [sp, #120]	; 0x78
 8017e6e:	e9cd 4301 	strd	r4, r3, [sp, #4]
 8017e72:	ab0a      	add	r3, sp, #40	; 0x28
 8017e74:	9300      	str	r3, [sp, #0]
 8017e76:	464b      	mov	r3, r9
 8017e78:	f7ff fec1 	bl	8017bfe <_ntoa_format>
}
 8017e7c:	b013      	add	sp, #76	; 0x4c
 8017e7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            value /= base;
 8017e82:	4682      	mov	sl, r0
 8017e84:	468b      	mov	fp, r1
 8017e86:	e7cc      	b.n	8017e22 <_ntoa_long_long+0x3c>
    size_t len = 0U;
 8017e88:	2400      	movs	r4, #0
 8017e8a:	e7e4      	b.n	8017e56 <_ntoa_long_long+0x70>

08017e8c <_vsnprintf.constprop.0>:
}
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT

// internal vsnprintf
static int _vsnprintf(out_fct_type out, char * buffer, const size_t maxlen, const char * format, va_list va)
 8017e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e90:	4689      	mov	r9, r1
 8017e92:	4690      	mov	r8, r2
    unsigned int flags, width, precision, n;
    size_t idx = 0U;

    if(!buffer) {
        // use null output function
        out = _out_null;
 8017e94:	1e01      	subs	r1, r0, #0
 8017e96:	4abf      	ldr	r2, [pc, #764]	; (8018194 <_vsnprintf.constprop.0+0x308>)
static int _vsnprintf(out_fct_type out, char * buffer, const size_t maxlen, const char * format, va_list va)
 8017e98:	b093      	sub	sp, #76	; 0x4c
 8017e9a:	461e      	mov	r6, r3
                out('%', buffer, idx++, maxlen);
                format++;
                break;

            default :
                out(*format, buffer, idx++, maxlen);
 8017e9c:	f04f 0500 	mov.w	r5, #0
        out = _out_null;
 8017ea0:	4bbd      	ldr	r3, [pc, #756]	; (8018198 <_vsnprintf.constprop.0+0x30c>)
 8017ea2:	bf18      	it	ne
 8017ea4:	4613      	movne	r3, r2
 8017ea6:	930b      	str	r3, [sp, #44]	; 0x2c
    while(*format) {
 8017ea8:	f898 0000 	ldrb.w	r0, [r8]
 8017eac:	b968      	cbnz	r0, 8017eca <_vsnprintf.constprop.0+0x3e>
                break;
        }
    }

    // termination
    out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 8017eae:	454d      	cmp	r5, r9
 8017eb0:	464b      	mov	r3, r9
 8017eb2:	f04f 0000 	mov.w	r0, #0
 8017eb6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8017eb8:	bf2c      	ite	cs
 8017eba:	f109 32ff 	addcs.w	r2, r9, #4294967295
 8017ebe:	462a      	movcc	r2, r5
 8017ec0:	47a0      	blx	r4

    // return written chars without terminating \0
    return (int)idx;
}
 8017ec2:	4628      	mov	r0, r5
 8017ec4:	b013      	add	sp, #76	; 0x4c
 8017ec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(*format != '%') {
 8017eca:	2825      	cmp	r0, #37	; 0x25
 8017ecc:	f108 0801 	add.w	r8, r8, #1
 8017ed0:	d008      	beq.n	8017ee4 <_vsnprintf.constprop.0+0x58>
                out(*format, buffer, idx++, maxlen);
 8017ed2:	1c6c      	adds	r4, r5, #1
 8017ed4:	462a      	mov	r2, r5
 8017ed6:	910c      	str	r1, [sp, #48]	; 0x30
 8017ed8:	464b      	mov	r3, r9
 8017eda:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8017edc:	47a8      	blx	r5
 8017ede:	4625      	mov	r5, r4
 8017ee0:	990c      	ldr	r1, [sp, #48]	; 0x30
                break;
 8017ee2:	e7e1      	b.n	8017ea8 <_vsnprintf.constprop.0+0x1c>
        flags = 0U;
 8017ee4:	2200      	movs	r2, #0
 8017ee6:	e006      	b.n	8017ef6 <_vsnprintf.constprop.0+0x6a>
            switch(*format) {
 8017ee8:	2b2d      	cmp	r3, #45	; 0x2d
 8017eea:	d014      	beq.n	8017f16 <_vsnprintf.constprop.0+0x8a>
 8017eec:	2b30      	cmp	r3, #48	; 0x30
 8017eee:	d10c      	bne.n	8017f0a <_vsnprintf.constprop.0+0x7e>
                    flags |= FLAGS_ZEROPAD;
 8017ef0:	f042 0201 	orr.w	r2, r2, #1
static int _vsnprintf(out_fct_type out, char * buffer, const size_t maxlen, const char * format, va_list va)
 8017ef4:	4680      	mov	r8, r0
            switch(*format) {
 8017ef6:	4640      	mov	r0, r8
 8017ef8:	f810 3b01 	ldrb.w	r3, [r0], #1
 8017efc:	2b2b      	cmp	r3, #43	; 0x2b
 8017efe:	d00d      	beq.n	8017f1c <_vsnprintf.constprop.0+0x90>
 8017f00:	d8f2      	bhi.n	8017ee8 <_vsnprintf.constprop.0+0x5c>
 8017f02:	2b20      	cmp	r3, #32
 8017f04:	d00d      	beq.n	8017f22 <_vsnprintf.constprop.0+0x96>
 8017f06:	2b23      	cmp	r3, #35	; 0x23
 8017f08:	d00e      	beq.n	8017f28 <_vsnprintf.constprop.0+0x9c>
        if(_is_digit(*format)) {
 8017f0a:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
 8017f0e:	2c09      	cmp	r4, #9
 8017f10:	d829      	bhi.n	8017f66 <_vsnprintf.constprop.0+0xda>
    unsigned int i = 0U;
 8017f12:	2700      	movs	r7, #0
 8017f14:	e010      	b.n	8017f38 <_vsnprintf.constprop.0+0xac>
                    flags |= FLAGS_LEFT;
 8017f16:	f042 0202 	orr.w	r2, r2, #2
        } while(n);
 8017f1a:	e7eb      	b.n	8017ef4 <_vsnprintf.constprop.0+0x68>
                    flags |= FLAGS_PLUS;
 8017f1c:	f042 0204 	orr.w	r2, r2, #4
        } while(n);
 8017f20:	e7e8      	b.n	8017ef4 <_vsnprintf.constprop.0+0x68>
                    flags |= FLAGS_SPACE;
 8017f22:	f042 0208 	orr.w	r2, r2, #8
        } while(n);
 8017f26:	e7e5      	b.n	8017ef4 <_vsnprintf.constprop.0+0x68>
                    flags |= FLAGS_HASH;
 8017f28:	f042 0210 	orr.w	r2, r2, #16
        } while(n);
 8017f2c:	e7e2      	b.n	8017ef4 <_vsnprintf.constprop.0+0x68>
        i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8017f2e:	240a      	movs	r4, #10
 8017f30:	4680      	mov	r8, r0
 8017f32:	fb04 3707 	mla	r7, r4, r7, r3
 8017f36:	3f30      	subs	r7, #48	; 0x30
    while(_is_digit(**str)) {
 8017f38:	4640      	mov	r0, r8
 8017f3a:	f810 3b01 	ldrb.w	r3, [r0], #1
 8017f3e:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
 8017f42:	2c09      	cmp	r4, #9
 8017f44:	d9f3      	bls.n	8017f2e <_vsnprintf.constprop.0+0xa2>
        if(*format == '.') {
 8017f46:	f898 3000 	ldrb.w	r3, [r8]
 8017f4a:	2b2e      	cmp	r3, #46	; 0x2e
 8017f4c:	d156      	bne.n	8017ffc <_vsnprintf.constprop.0+0x170>
            if(_is_digit(*format)) {
 8017f4e:	f898 0001 	ldrb.w	r0, [r8, #1]
 8017f52:	f108 0301 	add.w	r3, r8, #1
            flags |= FLAGS_PRECISION;
 8017f56:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
            if(_is_digit(*format)) {
 8017f5a:	f1a0 0430 	sub.w	r4, r0, #48	; 0x30
 8017f5e:	2c09      	cmp	r4, #9
 8017f60:	d842      	bhi.n	8017fe8 <_vsnprintf.constprop.0+0x15c>
    unsigned int i = 0U;
 8017f62:	2400      	movs	r4, #0
 8017f64:	e011      	b.n	8017f8a <_vsnprintf.constprop.0+0xfe>
        else if(*format == '*') {
 8017f66:	2b2a      	cmp	r3, #42	; 0x2a
 8017f68:	d108      	bne.n	8017f7c <_vsnprintf.constprop.0+0xf0>
            const int w = va_arg(va, int);
 8017f6a:	f856 7b04 	ldr.w	r7, [r6], #4
 8017f6e:	4680      	mov	r8, r0
            if(w < 0) {
 8017f70:	2f00      	cmp	r7, #0
                flags |= FLAGS_LEFT;    // reverse padding
 8017f72:	bfbc      	itt	lt
 8017f74:	f042 0202 	orrlt.w	r2, r2, #2
                width = (unsigned int) - w;
 8017f78:	427f      	neglt	r7, r7
            format++;
 8017f7a:	e7e4      	b.n	8017f46 <_vsnprintf.constprop.0+0xba>
        width = 0U;
 8017f7c:	2700      	movs	r7, #0
 8017f7e:	e7e2      	b.n	8017f46 <_vsnprintf.constprop.0+0xba>
        i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8017f80:	230a      	movs	r3, #10
 8017f82:	fb03 0404 	mla	r4, r3, r4, r0
 8017f86:	4663      	mov	r3, ip
 8017f88:	3c30      	subs	r4, #48	; 0x30
    while(_is_digit(**str)) {
 8017f8a:	469c      	mov	ip, r3
 8017f8c:	f81c 0b01 	ldrb.w	r0, [ip], #1
 8017f90:	f1a0 0e30 	sub.w	lr, r0, #48	; 0x30
 8017f94:	f1be 0f09 	cmp.w	lr, #9
 8017f98:	d9f2      	bls.n	8017f80 <_vsnprintf.constprop.0+0xf4>
 8017f9a:	4698      	mov	r8, r3
        switch(*format) {
 8017f9c:	4643      	mov	r3, r8
 8017f9e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8017fa2:	286c      	cmp	r0, #108	; 0x6c
 8017fa4:	d033      	beq.n	801800e <_vsnprintf.constprop.0+0x182>
 8017fa6:	d82b      	bhi.n	8018000 <_vsnprintf.constprop.0+0x174>
 8017fa8:	2868      	cmp	r0, #104	; 0x68
 8017faa:	d039      	beq.n	8018020 <_vsnprintf.constprop.0+0x194>
 8017fac:	286a      	cmp	r0, #106	; 0x6a
 8017fae:	d041      	beq.n	8018034 <_vsnprintf.constprop.0+0x1a8>
 8017fb0:	4643      	mov	r3, r8
        switch(*format) {
 8017fb2:	4698      	mov	r8, r3
 8017fb4:	f818 0b01 	ldrb.w	r0, [r8], #1
 8017fb8:	2878      	cmp	r0, #120	; 0x78
 8017fba:	d88a      	bhi.n	8017ed2 <_vsnprintf.constprop.0+0x46>
 8017fbc:	2861      	cmp	r0, #97	; 0x61
 8017fbe:	d83c      	bhi.n	801803a <_vsnprintf.constprop.0+0x1ae>
 8017fc0:	2825      	cmp	r0, #37	; 0x25
 8017fc2:	d086      	beq.n	8017ed2 <_vsnprintf.constprop.0+0x46>
 8017fc4:	2824      	cmp	r0, #36	; 0x24
 8017fc6:	d984      	bls.n	8017ed2 <_vsnprintf.constprop.0+0x46>
 8017fc8:	f000 03f7 	and.w	r3, r0, #247	; 0xf7
 8017fcc:	2b50      	cmp	r3, #80	; 0x50
 8017fce:	d180      	bne.n	8017ed2 <_vsnprintf.constprop.0+0x46>
                    if(*format == 'x' || *format == 'X') {
 8017fd0:	2858      	cmp	r0, #88	; 0x58
 8017fd2:	d077      	beq.n	80180c4 <_vsnprintf.constprop.0+0x238>
                    else if(*format == 'p' || *format == 'P') {
 8017fd4:	f000 03df 	and.w	r3, r0, #223	; 0xdf
 8017fd8:	2b50      	cmp	r3, #80	; 0x50
 8017fda:	d169      	bne.n	80180b0 <_vsnprintf.constprop.0+0x224>
                            flags |= FLAGS_LONG;
 8017fdc:	f442 7288 	orr.w	r2, r2, #272	; 0x110
                        base = 16U;
 8017fe0:	2310      	movs	r3, #16
                    if(*format == 'X' || *format == 'P') {
 8017fe2:	2850      	cmp	r0, #80	; 0x50
 8017fe4:	d06f      	beq.n	80180c6 <_vsnprintf.constprop.0+0x23a>
 8017fe6:	e070      	b.n	80180ca <_vsnprintf.constprop.0+0x23e>
            else if(*format == '*') {
 8017fe8:	282a      	cmp	r0, #42	; 0x2a
 8017fea:	d106      	bne.n	8017ffa <_vsnprintf.constprop.0+0x16e>
                precision = prec > 0 ? (unsigned int)prec : 0U;
 8017fec:	f856 4b04 	ldr.w	r4, [r6], #4
                format++;
 8017ff0:	f108 0802 	add.w	r8, r8, #2
                precision = prec > 0 ? (unsigned int)prec : 0U;
 8017ff4:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
                format++;
 8017ff8:	e7d0      	b.n	8017f9c <_vsnprintf.constprop.0+0x110>
            format++;
 8017ffa:	4698      	mov	r8, r3
        precision = 0U;
 8017ffc:	2400      	movs	r4, #0
 8017ffe:	e7cd      	b.n	8017f9c <_vsnprintf.constprop.0+0x110>
        switch(*format) {
 8018000:	2874      	cmp	r0, #116	; 0x74
 8018002:	d001      	beq.n	8018008 <_vsnprintf.constprop.0+0x17c>
 8018004:	287a      	cmp	r0, #122	; 0x7a
 8018006:	d1d3      	bne.n	8017fb0 <_vsnprintf.constprop.0+0x124>
                flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8018008:	f442 7280 	orr.w	r2, r2, #256	; 0x100
                break;
 801800c:	e7d1      	b.n	8017fb2 <_vsnprintf.constprop.0+0x126>
                if(*format == 'l') {
 801800e:	f898 0001 	ldrb.w	r0, [r8, #1]
 8018012:	286c      	cmp	r0, #108	; 0x6c
 8018014:	d1f8      	bne.n	8018008 <_vsnprintf.constprop.0+0x17c>
                    flags |= FLAGS_LONG_LONG;
 8018016:	f442 7240 	orr.w	r2, r2, #768	; 0x300
                    format++;
 801801a:	f108 0302 	add.w	r3, r8, #2
 801801e:	e7c8      	b.n	8017fb2 <_vsnprintf.constprop.0+0x126>
                if(*format == 'h') {
 8018020:	f898 0001 	ldrb.w	r0, [r8, #1]
 8018024:	2868      	cmp	r0, #104	; 0x68
 8018026:	d002      	beq.n	801802e <_vsnprintf.constprop.0+0x1a2>
                flags |= FLAGS_SHORT;
 8018028:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 801802c:	e7c1      	b.n	8017fb2 <_vsnprintf.constprop.0+0x126>
                    flags |= FLAGS_CHAR;
 801802e:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8018032:	e7f2      	b.n	801801a <_vsnprintf.constprop.0+0x18e>
                flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8018034:	f442 7200 	orr.w	r2, r2, #512	; 0x200
                break;
 8018038:	e7bb      	b.n	8017fb2 <_vsnprintf.constprop.0+0x126>
 801803a:	f1a0 0362 	sub.w	r3, r0, #98	; 0x62
 801803e:	2b16      	cmp	r3, #22
 8018040:	f63f af47 	bhi.w	8017ed2 <_vsnprintf.constprop.0+0x46>
 8018044:	f20f 0c04 	addw	ip, pc, #4
 8018048:	f85c f023 	ldr.w	pc, [ip, r3, lsl #2]
 801804c:	080180a9 	.word	0x080180a9
 8018050:	080181e3 	.word	0x080181e3
 8018054:	080180a9 	.word	0x080180a9
 8018058:	08017ed3 	.word	0x08017ed3
 801805c:	08017ed3 	.word	0x08017ed3
 8018060:	08017ed3 	.word	0x08017ed3
 8018064:	08017ed3 	.word	0x08017ed3
 8018068:	080180a9 	.word	0x080180a9
 801806c:	08017ed3 	.word	0x08017ed3
 8018070:	08017ed3 	.word	0x08017ed3
 8018074:	08017ed3 	.word	0x08017ed3
 8018078:	08017ed3 	.word	0x08017ed3
 801807c:	08017ed3 	.word	0x08017ed3
 8018080:	080180a9 	.word	0x080180a9
 8018084:	080180a9 	.word	0x080180a9
 8018088:	08017ed3 	.word	0x08017ed3
 801808c:	08017ed3 	.word	0x08017ed3
 8018090:	0801826b 	.word	0x0801826b
 8018094:	08017ed3 	.word	0x08017ed3
 8018098:	080180a9 	.word	0x080180a9
 801809c:	08017ed3 	.word	0x08017ed3
 80180a0:	08017ed3 	.word	0x08017ed3
 80180a4:	080180a9 	.word	0x080180a9
                    if(*format == 'x' || *format == 'X') {
 80180a8:	2878      	cmp	r0, #120	; 0x78
 80180aa:	d191      	bne.n	8017fd0 <_vsnprintf.constprop.0+0x144>
                        base = 16U;
 80180ac:	2310      	movs	r3, #16
 80180ae:	e010      	b.n	80180d2 <_vsnprintf.constprop.0+0x246>
                    else if(*format == 'o') {
 80180b0:	286f      	cmp	r0, #111	; 0x6f
 80180b2:	f000 8145 	beq.w	8018340 <_vsnprintf.constprop.0+0x4b4>
                    else if(*format == 'b') {
 80180b6:	2862      	cmp	r0, #98	; 0x62
 80180b8:	f000 8144 	beq.w	8018344 <_vsnprintf.constprop.0+0x4b8>
                        flags &= ~FLAGS_HASH;   // no hash for dec format
 80180bc:	f022 0210 	bic.w	r2, r2, #16
                        base = 10U;
 80180c0:	230a      	movs	r3, #10
 80180c2:	e78e      	b.n	8017fe2 <_vsnprintf.constprop.0+0x156>
                        base = 16U;
 80180c4:	2310      	movs	r3, #16
                        flags |= FLAGS_UPPERCASE;
 80180c6:	f042 0220 	orr.w	r2, r2, #32
                    if((*format != 'i') && (*format != 'd')) {
 80180ca:	2869      	cmp	r0, #105	; 0x69
 80180cc:	d003      	beq.n	80180d6 <_vsnprintf.constprop.0+0x24a>
 80180ce:	2864      	cmp	r0, #100	; 0x64
 80180d0:	d001      	beq.n	80180d6 <_vsnprintf.constprop.0+0x24a>
                        flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 80180d2:	f022 020c 	bic.w	r2, r2, #12
                    if(flags & FLAGS_PRECISION) {
 80180d6:	f412 6f80 	tst.w	r2, #1024	; 0x400
                        flags &= ~FLAGS_ZEROPAD;
 80180da:	bf18      	it	ne
 80180dc:	f022 0201 	bicne.w	r2, r2, #1
                    if((*format == 'i') || (*format == 'd')) {
 80180e0:	2869      	cmp	r0, #105	; 0x69
 80180e2:	f402 7c00 	and.w	ip, r2, #512	; 0x200
 80180e6:	d001      	beq.n	80180ec <_vsnprintf.constprop.0+0x260>
 80180e8:	2864      	cmp	r0, #100	; 0x64
 80180ea:	d142      	bne.n	8018172 <_vsnprintf.constprop.0+0x2e6>
                        if(flags & FLAGS_LONG_LONG) {
 80180ec:	f1bc 0f00 	cmp.w	ip, #0
 80180f0:	d024      	beq.n	801813c <_vsnprintf.constprop.0+0x2b0>
                            const long long value = va_arg(va, long long);
 80180f2:	3607      	adds	r6, #7
 80180f4:	f026 0007 	bic.w	r0, r6, #7
 80180f8:	4682      	mov	sl, r0
 80180fa:	6840      	ldr	r0, [r0, #4]
 80180fc:	f85a 6b08 	ldr.w	r6, [sl], #8
                            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base,
 8018100:	9304      	str	r3, [sp, #16]
 8018102:	2300      	movs	r3, #0
 8018104:	2e00      	cmp	r6, #0
 8018106:	9406      	str	r4, [sp, #24]
 8018108:	9305      	str	r3, [sp, #20]
 801810a:	ea4f 73d0 	mov.w	r3, r0, lsr #31
 801810e:	9302      	str	r3, [sp, #8]
 8018110:	4603      	mov	r3, r0
 8018112:	f173 0000 	sbcs.w	r0, r3, #0
 8018116:	e9cd 7207 	strd	r7, r2, [sp, #28]
 801811a:	4632      	mov	r2, r6
 801811c:	da02      	bge.n	8018124 <_vsnprintf.constprop.0+0x298>
 801811e:	4272      	negs	r2, r6
 8018120:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
                            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 8018124:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8018126:	910c      	str	r1, [sp, #48]	; 0x30
 8018128:	e9cd 2300 	strd	r2, r3, [sp]
 801812c:	464b      	mov	r3, r9
 801812e:	462a      	mov	r2, r5
 8018130:	f7ff fe59 	bl	8017de6 <_ntoa_long_long>
                            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 8018134:	4605      	mov	r5, r0
 8018136:	990c      	ldr	r1, [sp, #48]	; 0x30
                    break;
 8018138:	4656      	mov	r6, sl
 801813a:	e6b5      	b.n	8017ea8 <_vsnprintf.constprop.0+0x1c>
                        else if(flags & FLAGS_LONG) {
 801813c:	05d0      	lsls	r0, r2, #23
 801813e:	f106 0a04 	add.w	sl, r6, #4
 8018142:	d50c      	bpl.n	801815e <_vsnprintf.constprop.0+0x2d2>
                            const long value = va_arg(va, long);
 8018144:	6830      	ldr	r0, [r6, #0]
                            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision,
 8018146:	2800      	cmp	r0, #0
 8018148:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801814c:	ea4f 73d0 	mov.w	r3, r0, lsr #31
 8018150:	bfb8      	it	lt
 8018152:	4240      	neglt	r0, r0
 8018154:	e9cd 7204 	strd	r7, r2, [sp, #16]
 8018158:	9301      	str	r3, [sp, #4]
                            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 801815a:	9000      	str	r0, [sp, #0]
 801815c:	e02a      	b.n	80181b4 <_vsnprintf.constprop.0+0x328>
                            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va,
 801815e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8018162:	6830      	ldr	r0, [r6, #0]
 8018164:	d001      	beq.n	801816a <_vsnprintf.constprop.0+0x2de>
 8018166:	b2c0      	uxtb	r0, r0
 8018168:	e7ed      	b.n	8018146 <_vsnprintf.constprop.0+0x2ba>
                                                                                                                                       int) : va_arg(va, int);
 801816a:	0616      	lsls	r6, r2, #24
 801816c:	bf48      	it	mi
 801816e:	b200      	sxthmi	r0, r0
 8018170:	e7e9      	b.n	8018146 <_vsnprintf.constprop.0+0x2ba>
                        if(flags & FLAGS_LONG_LONG) {
 8018172:	f1bc 0f00 	cmp.w	ip, #0
 8018176:	d011      	beq.n	801819c <_vsnprintf.constprop.0+0x310>
                            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 8018178:	3607      	adds	r6, #7
 801817a:	9304      	str	r3, [sp, #16]
 801817c:	2300      	movs	r3, #0
 801817e:	9406      	str	r4, [sp, #24]
 8018180:	f026 0a07 	bic.w	sl, r6, #7
 8018184:	9305      	str	r3, [sp, #20]
 8018186:	9302      	str	r3, [sp, #8]
 8018188:	e9cd 7207 	strd	r7, r2, [sp, #28]
 801818c:	e8fa 2302 	ldrd	r2, r3, [sl], #8
 8018190:	e7c8      	b.n	8018124 <_vsnprintf.constprop.0+0x298>
 8018192:	bf00      	nop
 8018194:	08017bf5 	.word	0x08017bf5
 8018198:	08017bfd 	.word	0x08017bfd
                        else if(flags & FLAGS_LONG) {
 801819c:	05d0      	lsls	r0, r2, #23
 801819e:	f106 0a04 	add.w	sl, r6, #4
 80181a2:	d50e      	bpl.n	80181c2 <_vsnprintf.constprop.0+0x336>
                            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 80181a4:	f8cd c004 	str.w	ip, [sp, #4]
 80181a8:	e9cd 7204 	strd	r7, r2, [sp, #16]
 80181ac:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80181b0:	6833      	ldr	r3, [r6, #0]
 80181b2:	9300      	str	r3, [sp, #0]
                            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 80181b4:	464b      	mov	r3, r9
 80181b6:	462a      	mov	r2, r5
 80181b8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80181ba:	910c      	str	r1, [sp, #48]	; 0x30
 80181bc:	f7ff fdd3 	bl	8017d66 <_ntoa_long>
 80181c0:	e7b8      	b.n	8018134 <_vsnprintf.constprop.0+0x2a8>
                                                                                                    unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 80181c2:	f012 0f40 	tst.w	r2, #64	; 0x40
 80181c6:	6830      	ldr	r0, [r6, #0]
 80181c8:	d007      	beq.n	80181da <_vsnprintf.constprop.0+0x34e>
 80181ca:	b2c0      	uxtb	r0, r0
                            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 80181cc:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80181d0:	2300      	movs	r3, #0
 80181d2:	e9cd 7204 	strd	r7, r2, [sp, #16]
 80181d6:	9301      	str	r3, [sp, #4]
 80181d8:	e7bf      	b.n	801815a <_vsnprintf.constprop.0+0x2ce>
                                                                                                    unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 80181da:	0616      	lsls	r6, r2, #24
 80181dc:	bf48      	it	mi
 80181de:	b280      	uxthmi	r0, r0
 80181e0:	e7f4      	b.n	80181cc <_vsnprintf.constprop.0+0x340>
                    if(!(flags & FLAGS_LEFT)) {
 80181e2:	f012 0302 	ands.w	r3, r2, #2
 80181e6:	930c      	str	r3, [sp, #48]	; 0x30
 80181e8:	d028      	beq.n	801823c <_vsnprintf.constprop.0+0x3b0>
                    unsigned int l = 1U;
 80181ea:	f04f 0a01 	mov.w	sl, #1
                    out((char)va_arg(va, int), buffer, idx++, maxlen);
 80181ee:	f856 0b04 	ldr.w	r0, [r6], #4
 80181f2:	464b      	mov	r3, r9
 80181f4:	910d      	str	r1, [sp, #52]	; 0x34
 80181f6:	462a      	mov	r2, r5
 80181f8:	b2c0      	uxtb	r0, r0
 80181fa:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80181fc:	47a0      	blx	r4
 80181fe:	f105 0b01 	add.w	fp, r5, #1
                    if(flags & FLAGS_LEFT) {
 8018202:	e9dd 310c 	ldrd	r3, r1, [sp, #48]	; 0x30
 8018206:	b373      	cbz	r3, 8018266 <_vsnprintf.constprop.0+0x3da>
 8018208:	4654      	mov	r4, sl
                    out((char)va_arg(va, int), buffer, idx++, maxlen);
 801820a:	465a      	mov	r2, fp
 801820c:	e023      	b.n	8018256 <_vsnprintf.constprop.0+0x3ca>
                            out(' ', buffer, idx++, maxlen);
 801820e:	910d      	str	r1, [sp, #52]	; 0x34
 8018210:	464b      	mov	r3, r9
 8018212:	2020      	movs	r0, #32
 8018214:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8018216:	47a0      	blx	r4
 8018218:	990d      	ldr	r1, [sp, #52]	; 0x34
 801821a:	eb05 020a 	add.w	r2, r5, sl
                        while(l++ < width) {
 801821e:	f10a 0a01 	add.w	sl, sl, #1
 8018222:	4557      	cmp	r7, sl
 8018224:	d8f3      	bhi.n	801820e <_vsnprintf.constprop.0+0x382>
 8018226:	2f00      	cmp	r7, #0
 8018228:	f107 33ff 	add.w	r3, r7, #4294967295
 801822c:	f107 0a01 	add.w	sl, r7, #1
 8018230:	bf04      	itt	eq
 8018232:	2300      	moveq	r3, #0
 8018234:	f04f 0a02 	moveq.w	sl, #2
 8018238:	441d      	add	r5, r3
 801823a:	e7d8      	b.n	80181ee <_vsnprintf.constprop.0+0x362>
 801823c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8018240:	e7eb      	b.n	801821a <_vsnprintf.constprop.0+0x38e>
                            out(' ', buffer, idx++, maxlen);
 8018242:	1c53      	adds	r3, r2, #1
 8018244:	910d      	str	r1, [sp, #52]	; 0x34
 8018246:	2020      	movs	r0, #32
 8018248:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801824a:	930c      	str	r3, [sp, #48]	; 0x30
 801824c:	464b      	mov	r3, r9
 801824e:	47a8      	blx	r5
 8018250:	3401      	adds	r4, #1
 8018252:	e9dd 210c 	ldrd	r2, r1, [sp, #48]	; 0x30
                        while(l++ < width) {
 8018256:	42a7      	cmp	r7, r4
 8018258:	d8f3      	bhi.n	8018242 <_vsnprintf.constprop.0+0x3b6>
 801825a:	eba7 030a 	sub.w	r3, r7, sl
 801825e:	4557      	cmp	r7, sl
 8018260:	bf38      	it	cc
 8018262:	2300      	movcc	r3, #0
 8018264:	449b      	add	fp, r3
                    break;
 8018266:	465d      	mov	r5, fp
 8018268:	e61e      	b.n	8017ea8 <_vsnprintf.constprop.0+0x1c>
                    const char * p = va_arg(va, char *);
 801826a:	4633      	mov	r3, r6
                    unsigned int l = _strnlen_s(p, precision ? precision : (size_t) -1);
 801826c:	2c00      	cmp	r4, #0
                    const char * p = va_arg(va, char *);
 801826e:	f853 ab04 	ldr.w	sl, [r3], #4
 8018272:	930c      	str	r3, [sp, #48]	; 0x30
                    unsigned int l = _strnlen_s(p, precision ? precision : (size_t) -1);
 8018274:	bf14      	ite	ne
 8018276:	4623      	movne	r3, r4
 8018278:	f04f 33ff 	moveq.w	r3, #4294967295
 801827c:	46d3      	mov	fp, sl
 801827e:	4453      	add	r3, sl
    for(s = str; *s && maxsize--; ++s);
 8018280:	f89b 0000 	ldrb.w	r0, [fp]
 8018284:	b108      	cbz	r0, 801828a <_vsnprintf.constprop.0+0x3fe>
 8018286:	455b      	cmp	r3, fp
 8018288:	d111      	bne.n	80182ae <_vsnprintf.constprop.0+0x422>
                    if(flags & FLAGS_PRECISION) {
 801828a:	f412 6380 	ands.w	r3, r2, #1024	; 0x400
    return (unsigned int)(s - str);
 801828e:	ebab 0b0a 	sub.w	fp, fp, sl
                    if(flags & FLAGS_PRECISION) {
 8018292:	930d      	str	r3, [sp, #52]	; 0x34
 8018294:	d002      	beq.n	801829c <_vsnprintf.constprop.0+0x410>
                        l = (l < precision ? l : precision);
 8018296:	45a3      	cmp	fp, r4
 8018298:	bf28      	it	cs
 801829a:	46a3      	movcs	fp, r4
                    if(!(flags & FLAGS_LEFT)) {
 801829c:	f012 0302 	ands.w	r3, r2, #2
 80182a0:	930e      	str	r3, [sp, #56]	; 0x38
 80182a2:	d11d      	bne.n	80182e0 <_vsnprintf.constprop.0+0x454>
 80182a4:	ebab 0305 	sub.w	r3, fp, r5
 80182a8:	462a      	mov	r2, r5
 80182aa:	9310      	str	r3, [sp, #64]	; 0x40
 80182ac:	e00b      	b.n	80182c6 <_vsnprintf.constprop.0+0x43a>
    for(s = str; *s && maxsize--; ++s);
 80182ae:	f10b 0b01 	add.w	fp, fp, #1
 80182b2:	e7e5      	b.n	8018280 <_vsnprintf.constprop.0+0x3f4>
                            out(' ', buffer, idx++, maxlen);
 80182b4:	1c53      	adds	r3, r2, #1
 80182b6:	9111      	str	r1, [sp, #68]	; 0x44
 80182b8:	2020      	movs	r0, #32
 80182ba:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80182bc:	930f      	str	r3, [sp, #60]	; 0x3c
 80182be:	464b      	mov	r3, r9
 80182c0:	47b0      	blx	r6
 80182c2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80182c4:	9911      	ldr	r1, [sp, #68]	; 0x44
                        while(l++ < width) {
 80182c6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80182c8:	18d3      	adds	r3, r2, r3
 80182ca:	429f      	cmp	r7, r3
 80182cc:	d8f2      	bhi.n	80182b4 <_vsnprintf.constprop.0+0x428>
 80182ce:	eba7 030b 	sub.w	r3, r7, fp
 80182d2:	455f      	cmp	r7, fp
 80182d4:	bf38      	it	cc
 80182d6:	2300      	movcc	r3, #0
 80182d8:	f10b 0b01 	add.w	fp, fp, #1
 80182dc:	441d      	add	r5, r3
 80182de:	449b      	add	fp, r3
 80182e0:	4656      	mov	r6, sl
 80182e2:	eba5 0a0a 	sub.w	sl, r5, sl
 80182e6:	e006      	b.n	80182f6 <_vsnprintf.constprop.0+0x46a>
 80182e8:	461c      	mov	r4, r3
                        out(*(p++), buffer, idx++, maxlen);
 80182ea:	462a      	mov	r2, r5
 80182ec:	910f      	str	r1, [sp, #60]	; 0x3c
 80182ee:	464b      	mov	r3, r9
 80182f0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80182f2:	47a8      	blx	r5
 80182f4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80182f6:	eb0a 0506 	add.w	r5, sl, r6
                    while((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 80182fa:	f816 0b01 	ldrb.w	r0, [r6], #1
 80182fe:	b128      	cbz	r0, 801830c <_vsnprintf.constprop.0+0x480>
 8018300:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018302:	2b00      	cmp	r3, #0
 8018304:	d0f1      	beq.n	80182ea <_vsnprintf.constprop.0+0x45e>
 8018306:	1e63      	subs	r3, r4, #1
 8018308:	2c00      	cmp	r4, #0
 801830a:	d1ed      	bne.n	80182e8 <_vsnprintf.constprop.0+0x45c>
                    if(flags & FLAGS_LEFT) {
 801830c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801830e:	b1ab      	cbz	r3, 801833c <_vsnprintf.constprop.0+0x4b0>
 8018310:	462a      	mov	r2, r5
 8018312:	ebab 0a05 	sub.w	sl, fp, r5
 8018316:	e007      	b.n	8018328 <_vsnprintf.constprop.0+0x49c>
                            out(' ', buffer, idx++, maxlen);
 8018318:	1c56      	adds	r6, r2, #1
 801831a:	910d      	str	r1, [sp, #52]	; 0x34
 801831c:	464b      	mov	r3, r9
 801831e:	2020      	movs	r0, #32
 8018320:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8018322:	47a0      	blx	r4
 8018324:	4632      	mov	r2, r6
 8018326:	990d      	ldr	r1, [sp, #52]	; 0x34
                        while(l++ < width) {
 8018328:	eb02 030a 	add.w	r3, r2, sl
 801832c:	429f      	cmp	r7, r3
 801832e:	d8f3      	bhi.n	8018318 <_vsnprintf.constprop.0+0x48c>
 8018330:	eba7 030b 	sub.w	r3, r7, fp
 8018334:	455f      	cmp	r7, fp
 8018336:	bf38      	it	cc
 8018338:	2300      	movcc	r3, #0
 801833a:	441d      	add	r5, r3
                    const char * p = va_arg(va, char *);
 801833c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
                    break;
 801833e:	e5b3      	b.n	8017ea8 <_vsnprintf.constprop.0+0x1c>
                        base =  8U;
 8018340:	2308      	movs	r3, #8
 8018342:	e6c6      	b.n	80180d2 <_vsnprintf.constprop.0+0x246>
                        base =  2U;
 8018344:	2302      	movs	r3, #2
                    if(*format == 'X' || *format == 'P') {
 8018346:	e6c4      	b.n	80180d2 <_vsnprintf.constprop.0+0x246>

08018348 <lv_snprintf>:

///////////////////////////////////////////////////////////////////////////////

int lv_snprintf(char * buffer, size_t count, const char * format, ...)
{
 8018348:	b40c      	push	{r2, r3}
 801834a:	b507      	push	{r0, r1, r2, lr}
 801834c:	ab04      	add	r3, sp, #16
 801834e:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list va;
    va_start(va, format);
 8018352:	9301      	str	r3, [sp, #4]
    const int ret = _vsnprintf(_out_buffer, buffer, count, format, va);
 8018354:	f7ff fd9a 	bl	8017e8c <_vsnprintf.constprop.0>
    va_end(va);
    return ret;
}
 8018358:	b003      	add	sp, #12
 801835a:	f85d eb04 	ldr.w	lr, [sp], #4
 801835e:	b002      	add	sp, #8
 8018360:	4770      	bx	lr

08018362 <lv_style_init>:
    if(style->sentinel == LV_STYLE_SENTINEL_VALUE && style->prop_cnt > 1) {
        LV_LOG_WARN("Style might be already inited. (Potential memory leak)")
    }
#endif

    lv_memset_00(style, sizeof(lv_style_t));
 8018362:	2108      	movs	r1, #8
 8018364:	f7ff bbe6 	b.w	8017b34 <lv_memset_00>

08018368 <lv_style_reset>:

void lv_style_reset(lv_style_t * style)
{
    LV_ASSERT_STYLE(style);

    if(style->is_const) {
 8018368:	f990 3005 	ldrsb.w	r3, [r0, #5]
 801836c:	2b00      	cmp	r3, #0
{
 801836e:	b510      	push	{r4, lr}
 8018370:	4604      	mov	r4, r0
    if(style->is_const) {
 8018372:	db0b      	blt.n	801838c <lv_style_reset+0x24>
        LV_LOG_ERROR("Cannot reset const style");
        return;
    }

    if(style->prop_cnt > 1) lv_mem_free(style->v_p.values_and_props);
 8018374:	79c3      	ldrb	r3, [r0, #7]
 8018376:	2b01      	cmp	r3, #1
 8018378:	d902      	bls.n	8018380 <lv_style_reset+0x18>
 801837a:	6800      	ldr	r0, [r0, #0]
 801837c:	f7ff f9da 	bl	8017734 <lv_mem_free>
    lv_memset_00(style, sizeof(lv_style_t));
 8018380:	4620      	mov	r0, r4
 8018382:	2108      	movs	r1, #8
#if LV_USE_ASSERT_STYLE
    style->sentinel = LV_STYLE_SENTINEL_VALUE;
#endif

}
 8018384:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_memset_00(style, sizeof(lv_style_t));
 8018388:	f7ff bbd4 	b.w	8017b34 <lv_memset_00>
}
 801838c:	bd10      	pop	{r4, pc}
	...

08018390 <lv_style_register_prop>:

lv_style_prop_t lv_style_register_prop(void)
{
    static uint16_t act_id = (uint16_t)_LV_STYLE_LAST_BUILT_IN_PROP;
    act_id++;
 8018390:	4b02      	ldr	r3, [pc, #8]	; (801839c <lv_style_register_prop+0xc>)
 8018392:	8818      	ldrh	r0, [r3, #0]
 8018394:	3001      	adds	r0, #1
 8018396:	b280      	uxth	r0, r0
 8018398:	8018      	strh	r0, [r3, #0]
    return act_id;
}
 801839a:	4770      	bx	lr
 801839c:	20000034 	.word	0x20000034

080183a0 <lv_style_remove_prop>:

bool lv_style_remove_prop(lv_style_t * style, lv_style_prop_t prop)
{
 80183a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    LV_ASSERT_STYLE(style);

    if(style->is_const) {
 80183a2:	f990 3005 	ldrsb.w	r3, [r0, #5]
{
 80183a6:	4604      	mov	r4, r0
 80183a8:	460e      	mov	r6, r1
    if(style->is_const) {
 80183aa:	2b00      	cmp	r3, #0
 80183ac:	db57      	blt.n	801845e <lv_style_remove_prop+0xbe>
        LV_LOG_ERROR("Cannot remove prop from const style");
        return false;
    }

    if(style->prop_cnt == 0)  return false;
 80183ae:	79c0      	ldrb	r0, [r0, #7]
 80183b0:	2800      	cmp	r0, #0
 80183b2:	d054      	beq.n	801845e <lv_style_remove_prop+0xbe>

    if(style->prop_cnt == 1) {
 80183b4:	2801      	cmp	r0, #1
 80183b6:	d10a      	bne.n	80183ce <lv_style_remove_prop+0x2e>
        if(style->prop1 == prop) {
 80183b8:	88a3      	ldrh	r3, [r4, #4]
 80183ba:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80183be:	428a      	cmp	r2, r1
 80183c0:	d14d      	bne.n	801845e <lv_style_remove_prop+0xbe>
            style->prop1 = LV_STYLE_PROP_INV;
 80183c2:	f36f 030e 	bfc	r3, #0, #15
 80183c6:	80a3      	strh	r3, [r4, #4]
            style->prop_cnt = 0;
 80183c8:	2300      	movs	r3, #0
 80183ca:	71e3      	strb	r3, [r4, #7]
            return true;
        }
    }

    return false;
}
 80183cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    uint8_t * tmp = style->v_p.values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 80183ce:	6825      	ldr	r5, [r4, #0]
 80183d0:	b202      	sxth	r2, r0
    for(i = 0; i < style->prop_cnt; i++) {
 80183d2:	2300      	movs	r3, #0
    uint8_t * tmp = style->v_p.values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 80183d4:	eb05 0780 	add.w	r7, r5, r0, lsl #2
        if(old_props[i] == prop) {
 80183d8:	f837 1013 	ldrh.w	r1, [r7, r3, lsl #1]
 80183dc:	42b1      	cmp	r1, r6
 80183de:	d13b      	bne.n	8018458 <lv_style_remove_prop+0xb8>
            if(style->prop_cnt == 2) {
 80183e0:	2802      	cmp	r0, #2
 80183e2:	d116      	bne.n	8018412 <lv_style_remove_prop+0x72>
                style->prop_cnt = 1;
 80183e4:	2101      	movs	r1, #1
 80183e6:	71e1      	strb	r1, [r4, #7]
                style->prop1 = i == 0 ? old_props[1] : old_props[0];
 80183e8:	b973      	cbnz	r3, 8018408 <lv_style_remove_prop+0x68>
 80183ea:	887a      	ldrh	r2, [r7, #2]
 80183ec:	88a1      	ldrh	r1, [r4, #4]
 80183ee:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80183f2:	f362 010e 	bfi	r1, r2, #0, #15
 80183f6:	80a1      	strh	r1, [r4, #4]
                style->v_p.value1 = i == 0 ? old_values[1] : old_values[0];
 80183f8:	b94b      	cbnz	r3, 801840e <lv_style_remove_prop+0x6e>
 80183fa:	686b      	ldr	r3, [r5, #4]
 80183fc:	6023      	str	r3, [r4, #0]
            lv_mem_free(old_values);
 80183fe:	4628      	mov	r0, r5
 8018400:	f7ff f998 	bl	8017734 <lv_mem_free>
            return true;
 8018404:	2001      	movs	r0, #1
 8018406:	e7e1      	b.n	80183cc <lv_style_remove_prop+0x2c>
                style->prop1 = i == 0 ? old_props[1] : old_props[0];
 8018408:	f835 2022 	ldrh.w	r2, [r5, r2, lsl #2]
 801840c:	e7ee      	b.n	80183ec <lv_style_remove_prop+0x4c>
                style->v_p.value1 = i == 0 ? old_values[1] : old_values[0];
 801840e:	682b      	ldr	r3, [r5, #0]
 8018410:	e7f4      	b.n	80183fc <lv_style_remove_prop+0x5c>
                size_t size = (style->prop_cnt - 1) * (sizeof(lv_style_value_t) + sizeof(uint16_t));
 8018412:	3801      	subs	r0, #1
                uint8_t * new_values_and_props = lv_mem_alloc(size);
 8018414:	2306      	movs	r3, #6
 8018416:	4358      	muls	r0, r3
 8018418:	f7ff fb0e 	bl	8017a38 <lv_mem_alloc>
                if(new_values_and_props == NULL) return false;
 801841c:	b1f8      	cbz	r0, 801845e <lv_style_remove_prop+0xbe>
                style->prop_cnt--;
 801841e:	79e3      	ldrb	r3, [r4, #7]
                for(i = j = 0; j <= style->prop_cnt; j++) { /*<=: because prop_cnt already reduced but all the old props. needs to be checked.*/
 8018420:	2200      	movs	r2, #0
                style->v_p.values_and_props = new_values_and_props;
 8018422:	6020      	str	r0, [r4, #0]
                style->prop_cnt--;
 8018424:	3b01      	subs	r3, #1
                for(i = j = 0; j <= style->prop_cnt; j++) { /*<=: because prop_cnt already reduced but all the old props. needs to be checked.*/
 8018426:	4694      	mov	ip, r2
                style->prop_cnt--;
 8018428:	b2db      	uxtb	r3, r3
 801842a:	71e3      	strb	r3, [r4, #7]
                tmp = new_values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 801842c:	009b      	lsls	r3, r3, #2
                    if(old_props[j] != prop) {
 801842e:	f837 1012 	ldrh.w	r1, [r7, r2, lsl #1]
 8018432:	42b1      	cmp	r1, r6
 8018434:	d00b      	beq.n	801844e <lv_style_remove_prop+0xae>
                        new_values[i] = old_values[j];
 8018436:	f855 1022 	ldr.w	r1, [r5, r2, lsl #2]
 801843a:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
                        new_props[i++] = old_props[j];
 801843e:	eb00 014c 	add.w	r1, r0, ip, lsl #1
 8018442:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 8018446:	f10c 0c01 	add.w	ip, ip, #1
 801844a:	f821 e003 	strh.w	lr, [r1, r3]
                for(i = j = 0; j <= style->prop_cnt; j++) { /*<=: because prop_cnt already reduced but all the old props. needs to be checked.*/
 801844e:	3201      	adds	r2, #1
 8018450:	79e1      	ldrb	r1, [r4, #7]
 8018452:	4291      	cmp	r1, r2
 8018454:	d2eb      	bcs.n	801842e <lv_style_remove_prop+0x8e>
 8018456:	e7d2      	b.n	80183fe <lv_style_remove_prop+0x5e>
    for(i = 0; i < style->prop_cnt; i++) {
 8018458:	3301      	adds	r3, #1
 801845a:	4298      	cmp	r0, r3
 801845c:	d8bc      	bhi.n	80183d8 <lv_style_remove_prop+0x38>
        return false;
 801845e:	2000      	movs	r0, #0
 8018460:	e7b4      	b.n	80183cc <lv_style_remove_prop+0x2c>

08018462 <lv_style_get_prop>:
    uint8_t group = _lv_style_get_prop_group(prop);
    style->has_group |= 1 << group;
}

lv_res_t lv_style_get_prop(lv_style_t * style, lv_style_prop_t prop, lv_style_value_t * value)
{
 8018462:	4603      	mov	r3, r0
 * @note For performance reasons there are no sanity check on `style`
 * @note This function is the same as ::lv_style_get_prop but inlined. Use it only on performance critical places
 */
static inline lv_res_t lv_style_get_prop_inlined(lv_style_t * style, lv_style_prop_t prop, lv_style_value_t * value)
{
    if(style->is_const) {
 8018464:	f990 0005 	ldrsb.w	r0, [r0, #5]
 8018468:	2800      	cmp	r0, #0
 801846a:	b570      	push	{r4, r5, r6, lr}
 801846c:	da0b      	bge.n	8018486 <lv_style_get_prop+0x24>
        const lv_style_const_prop_t *const_prop;
        for(const_prop = style->v_p.const_props; const_prop->prop != LV_STYLE_PROP_INV; const_prop++) {
 801846e:	681b      	ldr	r3, [r3, #0]
 8018470:	8818      	ldrh	r0, [r3, #0]
 8018472:	b900      	cbnz	r0, 8018476 <lv_style_get_prop+0x14>
   return lv_style_get_prop_inlined(style, prop, value);
}
 8018474:	bd70      	pop	{r4, r5, r6, pc}
            if(const_prop->prop == prop) {
 8018476:	4281      	cmp	r1, r0
 8018478:	d103      	bne.n	8018482 <lv_style_get_prop+0x20>
                *value = const_prop->value;
 801847a:	685b      	ldr	r3, [r3, #4]
                return LV_RES_OK;
            }
        }
    } else if(style->prop1 == prop) {
        *value = style->v_p.value1;
        return LV_RES_OK;
 801847c:	2001      	movs	r0, #1
        *value = style->v_p.value1;
 801847e:	6013      	str	r3, [r2, #0]
        return LV_RES_OK;
 8018480:	e7f8      	b.n	8018474 <lv_style_get_prop+0x12>
        for(const_prop = style->v_p.const_props; const_prop->prop != LV_STYLE_PROP_INV; const_prop++) {
 8018482:	3308      	adds	r3, #8
 8018484:	e7f4      	b.n	8018470 <lv_style_get_prop+0xe>
    if(style->prop_cnt == 0) return LV_RES_INV;
 8018486:	79d8      	ldrb	r0, [r3, #7]
 8018488:	2800      	cmp	r0, #0
 801848a:	d0f3      	beq.n	8018474 <lv_style_get_prop+0x12>
    if(style->prop_cnt > 1) {
 801848c:	2801      	cmp	r0, #1
 801848e:	d90f      	bls.n	80184b0 <lv_style_get_prop+0x4e>
        uint8_t * tmp = style->v_p.values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 8018490:	681c      	ldr	r4, [r3, #0]
        for(i = 0; i < style->prop_cnt; i++) {
 8018492:	2300      	movs	r3, #0
 8018494:	eb04 0580 	add.w	r5, r4, r0, lsl #2
            if(props[i] == prop) {
 8018498:	f835 6b02 	ldrh.w	r6, [r5], #2
 801849c:	42b1      	cmp	r1, r6
 801849e:	d102      	bne.n	80184a6 <lv_style_get_prop+0x44>
                *value = values[i];
 80184a0:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80184a4:	e7ea      	b.n	801847c <lv_style_get_prop+0x1a>
        for(i = 0; i < style->prop_cnt; i++) {
 80184a6:	3301      	adds	r3, #1
 80184a8:	4298      	cmp	r0, r3
 80184aa:	d8f5      	bhi.n	8018498 <lv_style_get_prop+0x36>
        return LV_RES_INV;
 80184ac:	2000      	movs	r0, #0
 80184ae:	e7e1      	b.n	8018474 <lv_style_get_prop+0x12>
    } else if(style->prop1 == prop) {
 80184b0:	8898      	ldrh	r0, [r3, #4]
 80184b2:	f3c0 000e 	ubfx	r0, r0, #0, #15
 80184b6:	4288      	cmp	r0, r1
 80184b8:	d1f8      	bne.n	80184ac <lv_style_get_prop+0x4a>
        *value = style->v_p.value1;
 80184ba:	681b      	ldr	r3, [r3, #0]
 80184bc:	e7de      	b.n	801847c <lv_style_get_prop+0x1a>
	...

080184c0 <lv_style_transition_dsc_init>:

void lv_style_transition_dsc_init(lv_style_transition_dsc_t * tr, const lv_style_prop_t props[], lv_anim_path_cb_t path_cb, uint32_t time, uint32_t delay, void * user_data)
{
 80184c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80184c2:	460f      	mov	r7, r1
    lv_memset_00(tr, sizeof(lv_style_transition_dsc_t));
 80184c4:	2114      	movs	r1, #20
{
 80184c6:	4604      	mov	r4, r0
 80184c8:	461e      	mov	r6, r3
 80184ca:	4615      	mov	r5, r2
    lv_memset_00(tr, sizeof(lv_style_transition_dsc_t));
 80184cc:	f7ff fb32 	bl	8017b34 <lv_memset_00>
    tr->props = props;
    tr->path_xcb = path_cb == NULL ? lv_anim_path_linear : path_cb;
 80184d0:	4b05      	ldr	r3, [pc, #20]	; (80184e8 <lv_style_transition_dsc_init+0x28>)
    tr->props = props;
 80184d2:	6027      	str	r7, [r4, #0]
    tr->path_xcb = path_cb == NULL ? lv_anim_path_linear : path_cb;
 80184d4:	2d00      	cmp	r5, #0
 80184d6:	bf08      	it	eq
 80184d8:	461d      	moveq	r5, r3
    tr->time = time;
    tr->delay = delay;
 80184da:	9b06      	ldr	r3, [sp, #24]
 80184dc:	6123      	str	r3, [r4, #16]
#if LV_USE_USER_DATA
    tr->user_data = user_data;
 80184de:	9b07      	ldr	r3, [sp, #28]
    tr->time = time;
 80184e0:	e9c4 5602 	strd	r5, r6, [r4, #8]
    tr->user_data = user_data;
 80184e4:	6063      	str	r3, [r4, #4]
#else
    LV_UNUSED(user_data);
#endif
}
 80184e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80184e8:	08016a39 	.word	0x08016a39

080184ec <lv_style_prop_get_default>:

lv_style_value_t lv_style_prop_get_default(lv_style_prop_t prop)
{
    lv_style_value_t value;
    switch(prop) {
 80184ec:	f240 4362 	movw	r3, #1122	; 0x462
 80184f0:	4298      	cmp	r0, r3
 80184f2:	d017      	beq.n	8018524 <lv_style_prop_get_default+0x38>
 80184f4:	d821      	bhi.n	801853a <lv_style_prop_get_default+0x4e>
 80184f6:	2833      	cmp	r0, #51	; 0x33
 80184f8:	d047      	beq.n	801858a <lv_style_prop_get_default+0x9e>
 80184fa:	d815      	bhi.n	8018528 <lv_style_prop_get_default+0x3c>
 80184fc:	2820      	cmp	r0, #32
 80184fe:	d03e      	beq.n	801857e <lv_style_prop_get_default+0x92>
 8018500:	281f      	cmp	r0, #31
 8018502:	d915      	bls.n	8018530 <lv_style_prop_get_default+0x44>
 8018504:	2831      	cmp	r0, #49	; 0x31
 8018506:	d00d      	beq.n	8018524 <lv_style_prop_get_default+0x38>
 8018508:	f020 0002 	bic.w	r0, r0, #2
 801850c:	2825      	cmp	r0, #37	; 0x25
 801850e:	d009      	beq.n	8018524 <lv_style_prop_get_default+0x38>
 8018510:	e00e      	b.n	8018530 <lv_style_prop_get_default+0x44>
 8018512:	3846      	subs	r0, #70	; 0x46
 8018514:	2301      	movs	r3, #1
 8018516:	b280      	uxth	r0, r0
 8018518:	fa03 f000 	lsl.w	r0, r3, r0
 801851c:	f242 1301 	movw	r3, #8449	; 0x2101
 8018520:	4218      	tst	r0, r3
 8018522:	d005      	beq.n	8018530 <lv_style_prop_get_default+0x44>
        case LV_STYLE_BG_IMG_OPA:
        case LV_STYLE_OUTLINE_OPA:
        case LV_STYLE_SHADOW_OPA:
        case LV_STYLE_LINE_OPA:
        case LV_STYLE_ARC_OPA:
            value.num = LV_OPA_COVER;
 8018524:	20ff      	movs	r0, #255	; 0xff
            break;
 8018526:	4770      	bx	lr
    switch(prop) {
 8018528:	2853      	cmp	r0, #83	; 0x53
 801852a:	d803      	bhi.n	8018534 <lv_style_prop_get_default+0x48>
 801852c:	2845      	cmp	r0, #69	; 0x45
 801852e:	d8f0      	bhi.n	8018512 <lv_style_prop_get_default+0x26>
        case LV_STYLE_MAX_WIDTH:
        case LV_STYLE_MAX_HEIGHT:
            value.num = LV_COORD_MAX;
            break;
        default:
            value.ptr = NULL;
 8018530:	2000      	movs	r0, #0
            value.num = 0;
            break;
    }

    return value;
}
 8018532:	4770      	bx	lr
    switch(prop) {
 8018534:	f5b0 6f8b 	cmp.w	r0, #1112	; 0x458
 8018538:	e7e9      	b.n	801850e <lv_style_prop_get_default+0x22>
 801853a:	f241 0303 	movw	r3, #4099	; 0x1003
 801853e:	4298      	cmp	r0, r3
 8018540:	d025      	beq.n	801858e <lv_style_prop_get_default+0xa2>
 8018542:	d80f      	bhi.n	8018564 <lv_style_prop_get_default+0x78>
 8018544:	f640 030e 	movw	r3, #2062	; 0x80e
 8018548:	4298      	cmp	r0, r3
 801854a:	d015      	beq.n	8018578 <lv_style_prop_get_default+0x8c>
 801854c:	f640 030d 	movw	r3, #2061	; 0x80d
 8018550:	4298      	cmp	r0, r3
 8018552:	d9ed      	bls.n	8018530 <lv_style_prop_get_default+0x44>
 8018554:	f640 033c 	movw	r3, #2108	; 0x83c
 8018558:	4298      	cmp	r0, r3
 801855a:	d0e3      	beq.n	8018524 <lv_style_prop_get_default+0x38>
 801855c:	f640 0345 	movw	r3, #2117	; 0x845
 8018560:	4298      	cmp	r0, r3
 8018562:	e7d4      	b.n	801850e <lv_style_prop_get_default+0x22>
 8018564:	f241 0306 	movw	r3, #4102	; 0x1006
 8018568:	4298      	cmp	r0, r3
 801856a:	d010      	beq.n	801858e <lv_style_prop_get_default+0xa2>
 801856c:	f241 4359 	movw	r3, #5209	; 0x1459
 8018570:	4298      	cmp	r0, r3
 8018572:	d1dd      	bne.n	8018530 <lv_style_prop_get_default+0x44>
            value.ptr = LV_FONT_DEFAULT;
 8018574:	4807      	ldr	r0, [pc, #28]	; (8018594 <lv_style_prop_get_default+0xa8>)
            break;
 8018576:	4770      	bx	lr
            value.num = LV_IMG_ZOOM_NONE;
 8018578:	f44f 7080 	mov.w	r0, #256	; 0x100
            break;
 801857c:	4770      	bx	lr
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 801857e:	f04f 33ff 	mov.w	r3, #4294967295
 8018582:	2000      	movs	r0, #0
 8018584:	f363 000f 	bfi	r0, r3, #0, #16
static inline lv_color_t lv_color_white(void) { return lv_color_make(0xff, 0xff, 0xff);}
 8018588:	4770      	bx	lr
            value.num = LV_BORDER_SIDE_FULL;
 801858a:	200f      	movs	r0, #15
            break;
 801858c:	4770      	bx	lr
            value.num = LV_COORD_MAX;
 801858e:	f44f 40c0 	mov.w	r0, #24576	; 0x6000
            break;
 8018592:	4770      	bx	lr
 8018594:	08028bc8 	.word	0x08028bc8

08018598 <lv_style_is_empty>:

bool lv_style_is_empty(const lv_style_t * style)
{
    LV_ASSERT_STYLE(style);

    return style->prop_cnt == 0 ? true : false;
 8018598:	79c0      	ldrb	r0, [r0, #7]
}
 801859a:	fab0 f080 	clz	r0, r0
 801859e:	0940      	lsrs	r0, r0, #5
 80185a0:	4770      	bx	lr

080185a2 <_lv_style_get_prop_group>:

uint8_t _lv_style_get_prop_group(lv_style_prop_t prop)
{
    uint16_t group = (prop & 0x1FF) >> 4;
 80185a2:	0900      	lsrs	r0, r0, #4
    if(group > 7) group = 7;    /*The MSB marks all the custom properties*/
 80185a4:	f010 0f18 	tst.w	r0, #24
    uint16_t group = (prop & 0x1FF) >> 4;
 80185a8:	bf0c      	ite	eq
 80185aa:	f000 001f 	andeq.w	r0, r0, #31
    if(group > 7) group = 7;    /*The MSB marks all the custom properties*/
 80185ae:	2007      	movne	r0, #7
    return (uint8_t)group;
}
 80185b0:	4770      	bx	lr

080185b2 <lv_style_set_prop>:
{
 80185b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(style->is_const) {
 80185b4:	f990 3005 	ldrsb.w	r3, [r0, #5]
{
 80185b8:	4604      	mov	r4, r0
 80185ba:	460d      	mov	r5, r1
 80185bc:	4616      	mov	r6, r2
    if(style->is_const) {
 80185be:	2b00      	cmp	r3, #0
 80185c0:	db0c      	blt.n	80185dc <lv_style_set_prop+0x2a>
    if(style->prop_cnt > 1) {
 80185c2:	79c2      	ldrb	r2, [r0, #7]
 80185c4:	2a01      	cmp	r2, #1
 80185c6:	d93a      	bls.n	801863e <lv_style_set_prop+0x8c>
        uint8_t * tmp = style->v_p.values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 80185c8:	6800      	ldr	r0, [r0, #0]
        for(i = style->prop_cnt - 1; i >= 0; i--) {
 80185ca:	1e53      	subs	r3, r2, #1
            if(props[i] == prop) {
 80185cc:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 80185d0:	f831 7013 	ldrh.w	r7, [r1, r3, lsl #1]
 80185d4:	42af      	cmp	r7, r5
 80185d6:	d102      	bne.n	80185de <lv_style_set_prop+0x2c>
                values[i] = value;
 80185d8:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
}
 80185dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for(i = style->prop_cnt - 1; i >= 0; i--) {
 80185de:	3b01      	subs	r3, #1
 80185e0:	d2f6      	bcs.n	80185d0 <lv_style_set_prop+0x1e>
        size_t size = (style->prop_cnt + 1) * (sizeof(lv_style_value_t) + sizeof(uint16_t));
 80185e2:	2106      	movs	r1, #6
        uint8_t * values_and_props = lv_mem_realloc(style->v_p.values_and_props, size);
 80185e4:	fb02 1101 	mla	r1, r2, r1, r1
 80185e8:	f7ff fa3c 	bl	8017a64 <lv_mem_realloc>
        if(values_and_props == NULL) return;
 80185ec:	2800      	cmp	r0, #0
 80185ee:	d0f5      	beq.n	80185dc <lv_style_set_prop+0x2a>
        tmp = values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 80185f0:	79e3      	ldrb	r3, [r4, #7]
        style->v_p.values_and_props = values_and_props;
 80185f2:	6020      	str	r0, [r4, #0]
        tmp = values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 80185f4:	eb00 0283 	add.w	r2, r0, r3, lsl #2
            props[i + sizeof(lv_style_value_t) /sizeof(uint16_t)] = props[i];
 80185f8:	1d11      	adds	r1, r2, #4
        for(i = style->prop_cnt - 1; i >= 0; i--) {
 80185fa:	3b01      	subs	r3, #1
 80185fc:	d21a      	bcs.n	8018634 <lv_style_set_prop+0x82>
        style->prop_cnt++;
 80185fe:	79e3      	ldrb	r3, [r4, #7]
 8018600:	3301      	adds	r3, #1
 8018602:	b2da      	uxtb	r2, r3
        props[style->prop_cnt - 1] = prop;
 8018604:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
        style->prop_cnt++;
 8018608:	71e2      	strb	r2, [r4, #7]
        props[style->prop_cnt - 1] = prop;
 801860a:	3b01      	subs	r3, #1
 801860c:	005b      	lsls	r3, r3, #1
 801860e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8018612:	52c5      	strh	r5, [r0, r3]
        values[style->prop_cnt - 1] = value;
 8018614:	79e3      	ldrb	r3, [r4, #7]
 8018616:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801861a:	3b01      	subs	r3, #1
 801861c:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
    uint8_t group = _lv_style_get_prop_group(prop);
 8018620:	4628      	mov	r0, r5
 8018622:	f7ff ffbe 	bl	80185a2 <_lv_style_get_prop_group>
    style->has_group |= 1 << group;
 8018626:	2301      	movs	r3, #1
 8018628:	fa03 f000 	lsl.w	r0, r3, r0
 801862c:	79a3      	ldrb	r3, [r4, #6]
 801862e:	4318      	orrs	r0, r3
 8018630:	71a0      	strb	r0, [r4, #6]
 8018632:	e7d3      	b.n	80185dc <lv_style_set_prop+0x2a>
            props[i + sizeof(lv_style_value_t) /sizeof(uint16_t)] = props[i];
 8018634:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
 8018638:	f821 7013 	strh.w	r7, [r1, r3, lsl #1]
        for(i = style->prop_cnt - 1; i >= 0; i--) {
 801863c:	e7dd      	b.n	80185fa <lv_style_set_prop+0x48>
    } else if(style->prop_cnt == 1) {
 801863e:	d11c      	bne.n	801867a <lv_style_set_prop+0xc8>
        if(style->prop1 == prop) {
 8018640:	8883      	ldrh	r3, [r0, #4]
 8018642:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8018646:	428b      	cmp	r3, r1
 8018648:	d101      	bne.n	801864e <lv_style_set_prop+0x9c>
            style->v_p.value1 = value;
 801864a:	6006      	str	r6, [r0, #0]
            return;
 801864c:	e7c6      	b.n	80185dc <lv_style_set_prop+0x2a>
        uint8_t * values_and_props = lv_mem_alloc(size);
 801864e:	200c      	movs	r0, #12
 8018650:	f7ff f9f2 	bl	8017a38 <lv_mem_alloc>
        if(values_and_props == NULL) return;
 8018654:	2800      	cmp	r0, #0
 8018656:	d0c1      	beq.n	80185dc <lv_style_set_prop+0x2a>
        style->prop_cnt++;
 8018658:	79e3      	ldrb	r3, [r4, #7]
        props[0] = style->prop1;
 801865a:	88a2      	ldrh	r2, [r4, #4]
        style->prop_cnt++;
 801865c:	3301      	adds	r3, #1
        lv_style_value_t value_tmp = style->v_p.value1;
 801865e:	6821      	ldr	r1, [r4, #0]
        props[0] = style->prop1;
 8018660:	f3c2 020e 	ubfx	r2, r2, #0, #15
        style->v_p.values_and_props = values_and_props;
 8018664:	6020      	str	r0, [r4, #0]
        style->prop_cnt++;
 8018666:	b2db      	uxtb	r3, r3
        uint8_t * tmp = values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 8018668:	eb00 0783 	add.w	r7, r0, r3, lsl #2
        style->prop_cnt++;
 801866c:	71e3      	strb	r3, [r4, #7]
        props[0] = style->prop1;
 801866e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
        props[1] = prop;
 8018672:	807d      	strh	r5, [r7, #2]
        values[1] = value;
 8018674:	e9c0 1600 	strd	r1, r6, [r0]
 8018678:	e7d2      	b.n	8018620 <lv_style_set_prop+0x6e>
        style->prop_cnt = 1;
 801867a:	2301      	movs	r3, #1
        style->v_p.value1 = value;
 801867c:	6006      	str	r6, [r0, #0]
        style->prop_cnt = 1;
 801867e:	71c3      	strb	r3, [r0, #7]
        style->prop1 = prop;
 8018680:	8883      	ldrh	r3, [r0, #4]
 8018682:	f361 030e 	bfi	r3, r1, #0, #15
 8018686:	8083      	strh	r3, [r0, #4]
        style->v_p.value1 = value;
 8018688:	e7ca      	b.n	8018620 <lv_style_set_prop+0x6e>
	...

0801868c <_lv_timer_core_init>:

/**
 * Init the lv_timer module
 */
void _lv_timer_core_init(void)
{
 801868c:	b508      	push	{r3, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_timer_ll), sizeof(lv_timer_t));
 801868e:	2118      	movs	r1, #24
 8018690:	4803      	ldr	r0, [pc, #12]	; (80186a0 <_lv_timer_core_init+0x14>)
 8018692:	f7fe fed2 	bl	801743a <_lv_ll_init>
 * Enable or disable the whole lv_timer handling
 * @param en true: lv_timer handling is running, false: lv_timer handling is suspended
 */
void lv_timer_enable(bool en)
{
    lv_timer_run = en;
 8018696:	4b03      	ldr	r3, [pc, #12]	; (80186a4 <_lv_timer_core_init+0x18>)
 8018698:	2201      	movs	r2, #1
 801869a:	701a      	strb	r2, [r3, #0]
}
 801869c:	bd08      	pop	{r3, pc}
 801869e:	bf00      	nop
 80186a0:	2000adfc 	.word	0x2000adfc
 80186a4:	2000ab88 	.word	0x2000ab88

080186a8 <lv_timer_create>:
{
 80186a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80186aa:	4606      	mov	r6, r0
    new_timer = _lv_ll_ins_head(&LV_GC_ROOT(_lv_timer_ll));
 80186ac:	480c      	ldr	r0, [pc, #48]	; (80186e0 <lv_timer_create+0x38>)
{
 80186ae:	460f      	mov	r7, r1
 80186b0:	4615      	mov	r5, r2
    new_timer = _lv_ll_ins_head(&LV_GC_ROOT(_lv_timer_ll));
 80186b2:	f7fe feca 	bl	801744a <_lv_ll_ins_head>
    LV_ASSERT_MALLOC(new_timer);
 80186b6:	4604      	mov	r4, r0
 80186b8:	b900      	cbnz	r0, 80186bc <lv_timer_create+0x14>
 80186ba:	e7fe      	b.n	80186ba <lv_timer_create+0x12>
    new_timer->repeat_count = -1;
 80186bc:	f04f 33ff 	mov.w	r3, #4294967295
    new_timer->period  = period;
 80186c0:	6007      	str	r7, [r0, #0]
    new_timer->timer_cb = timer_xcb;
 80186c2:	6086      	str	r6, [r0, #8]
    new_timer->repeat_count = -1;
 80186c4:	6103      	str	r3, [r0, #16]
    new_timer->paused = 0;
 80186c6:	7d03      	ldrb	r3, [r0, #20]
 80186c8:	f36f 0300 	bfc	r3, #0, #1
 80186cc:	7503      	strb	r3, [r0, #20]
    new_timer->last_run = lv_tick_get();
 80186ce:	f7fe f99f 	bl	8016a10 <lv_tick_get>
    timer_created = true;
 80186d2:	4b04      	ldr	r3, [pc, #16]	; (80186e4 <lv_timer_create+0x3c>)
 80186d4:	2201      	movs	r2, #1
    new_timer->last_run = lv_tick_get();
 80186d6:	6060      	str	r0, [r4, #4]
    new_timer->user_data = user_data;
 80186d8:	60e5      	str	r5, [r4, #12]
}
 80186da:	4620      	mov	r0, r4
    timer_created = true;
 80186dc:	701a      	strb	r2, [r3, #0]
}
 80186de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80186e0:	2000adfc 	.word	0x2000adfc
 80186e4:	2000ab89 	.word	0x2000ab89

080186e8 <lv_timer_del>:
{
 80186e8:	b510      	push	{r4, lr}
    _lv_ll_remove(&LV_GC_ROOT(_lv_timer_ll), timer);
 80186ea:	4601      	mov	r1, r0
{
 80186ec:	4604      	mov	r4, r0
    _lv_ll_remove(&LV_GC_ROOT(_lv_timer_ll), timer);
 80186ee:	4805      	ldr	r0, [pc, #20]	; (8018704 <lv_timer_del+0x1c>)
 80186f0:	f7fe fee2 	bl	80174b8 <_lv_ll_remove>
    timer_deleted = true;
 80186f4:	4b04      	ldr	r3, [pc, #16]	; (8018708 <lv_timer_del+0x20>)
 80186f6:	2201      	movs	r2, #1
    lv_mem_free(timer);
 80186f8:	4620      	mov	r0, r4
}
 80186fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    timer_deleted = true;
 80186fe:	701a      	strb	r2, [r3, #0]
    lv_mem_free(timer);
 8018700:	f7ff b818 	b.w	8017734 <lv_mem_free>
 8018704:	2000adfc 	.word	0x2000adfc
 8018708:	2000ab8a 	.word	0x2000ab8a

0801870c <lv_timer_handler>:
    if(already_running) return 1;
 801870c:	4b50      	ldr	r3, [pc, #320]	; (8018850 <lv_timer_handler+0x144>)
{
 801870e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(already_running) return 1;
 8018712:	781a      	ldrb	r2, [r3, #0]
 8018714:	2601      	movs	r6, #1
 8018716:	b922      	cbnz	r2, 8018722 <lv_timer_handler+0x16>
    if(lv_timer_run == false) {
 8018718:	4a4e      	ldr	r2, [pc, #312]	; (8018854 <lv_timer_handler+0x148>)
    already_running = true;
 801871a:	701e      	strb	r6, [r3, #0]
    if(lv_timer_run == false) {
 801871c:	7812      	ldrb	r2, [r2, #0]
 801871e:	b922      	cbnz	r2, 801872a <lv_timer_handler+0x1e>
        already_running = false; /*Release mutex*/
 8018720:	701a      	strb	r2, [r3, #0]
}
 8018722:	4630      	mov	r0, r6
 8018724:	b003      	add	sp, #12
 8018726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        timer_deleted             = false;
 801872a:	f8df 9144 	ldr.w	r9, [pc, #324]	; 8018870 <lv_timer_handler+0x164>
    uint32_t handler_start = lv_tick_get();
 801872e:	f7fe f96f 	bl	8016a10 <lv_tick_get>
        LV_GC_ROOT(_lv_timer_act) = _lv_ll_get_head(&LV_GC_ROOT(_lv_timer_ll));
 8018732:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8018860 <lv_timer_handler+0x154>
    uint32_t handler_start = lv_tick_get();
 8018736:	4605      	mov	r5, r0
 8018738:	46ca      	mov	sl, r9
        LV_GC_ROOT(_lv_timer_act) = _lv_ll_get_head(&LV_GC_ROOT(_lv_timer_ll));
 801873a:	4e47      	ldr	r6, [pc, #284]	; (8018858 <lv_timer_handler+0x14c>)
        timer_deleted             = false;
 801873c:	2300      	movs	r3, #0
        timer_created             = false;
 801873e:	4c47      	ldr	r4, [pc, #284]	; (801885c <lv_timer_handler+0x150>)
        LV_GC_ROOT(_lv_timer_act) = _lv_ll_get_head(&LV_GC_ROOT(_lv_timer_ll));
 8018740:	4658      	mov	r0, fp
 8018742:	4637      	mov	r7, r6
        timer_deleted             = false;
 8018744:	f889 3000 	strb.w	r3, [r9]
        timer_created             = false;
 8018748:	7023      	strb	r3, [r4, #0]
        LV_GC_ROOT(_lv_timer_act) = _lv_ll_get_head(&LV_GC_ROOT(_lv_timer_ll));
 801874a:	f7fe fef0 	bl	801752e <_lv_ll_get_head>
 801874e:	9400      	str	r4, [sp, #0]
 8018750:	6030      	str	r0, [r6, #0]
        while(LV_GC_ROOT(_lv_timer_act)) {
 8018752:	6839      	ldr	r1, [r7, #0]
 8018754:	bb69      	cbnz	r1, 80187b2 <lv_timer_handler+0xa6>
    next = _lv_ll_get_head(&LV_GC_ROOT(_lv_timer_ll));
 8018756:	4842      	ldr	r0, [pc, #264]	; (8018860 <lv_timer_handler+0x154>)
    uint32_t time_till_next = LV_NO_TIMER_READY;
 8018758:	f04f 36ff 	mov.w	r6, #4294967295
    next = _lv_ll_get_head(&LV_GC_ROOT(_lv_timer_ll));
 801875c:	f7fe fee7 	bl	801752e <_lv_ll_get_head>
        next = _lv_ll_get_next(&LV_GC_ROOT(_lv_timer_ll), next); /*Find the next timer*/
 8018760:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 8018860 <lv_timer_handler+0x154>
    next = _lv_ll_get_head(&LV_GC_ROOT(_lv_timer_ll));
 8018764:	4604      	mov	r4, r0
    while(next) {
 8018766:	2c00      	cmp	r4, #0
 8018768:	d15c      	bne.n	8018824 <lv_timer_handler+0x118>
    busy_time += lv_tick_elaps(handler_start);
 801876a:	4628      	mov	r0, r5
 801876c:	4d3d      	ldr	r5, [pc, #244]	; (8018864 <lv_timer_handler+0x158>)
 801876e:	f7fe f95d 	bl	8016a2c <lv_tick_elaps>
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
 8018772:	4f3d      	ldr	r7, [pc, #244]	; (8018868 <lv_timer_handler+0x15c>)
    busy_time += lv_tick_elaps(handler_start);
 8018774:	682b      	ldr	r3, [r5, #0]
 8018776:	4418      	add	r0, r3
 8018778:	6028      	str	r0, [r5, #0]
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
 801877a:	6838      	ldr	r0, [r7, #0]
 801877c:	f7fe f956 	bl	8016a2c <lv_tick_elaps>
    if(idle_period_time >= IDLE_MEAS_PERIOD) {
 8018780:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8018784:	d311      	bcc.n	80187aa <lv_timer_handler+0x9e>
        idle_last         = (busy_time * 100) / idle_period_time;  /*Calculate the busy percentage*/
 8018786:	682a      	ldr	r2, [r5, #0]
 8018788:	2364      	movs	r3, #100	; 0x64
 801878a:	4353      	muls	r3, r2
 801878c:	fbb3 f0f0 	udiv	r0, r3, r0
 8018790:	b2c0      	uxtb	r0, r0
        idle_last         = idle_last > 100 ? 0 : 100 - idle_last; /*But we need idle time*/
 8018792:	4b36      	ldr	r3, [pc, #216]	; (801886c <lv_timer_handler+0x160>)
 8018794:	2864      	cmp	r0, #100	; 0x64
 8018796:	bf9c      	itt	ls
 8018798:	f1c0 0464 	rsbls	r4, r0, #100	; 0x64
 801879c:	b2e4      	uxtbls	r4, r4
 801879e:	701c      	strb	r4, [r3, #0]
        busy_time         = 0;
 80187a0:	2300      	movs	r3, #0
 80187a2:	602b      	str	r3, [r5, #0]
        idle_period_start = lv_tick_get();
 80187a4:	f7fe f934 	bl	8016a10 <lv_tick_get>
 80187a8:	6038      	str	r0, [r7, #0]
    already_running = false; /*Release the mutex*/
 80187aa:	2300      	movs	r3, #0
 80187ac:	4a28      	ldr	r2, [pc, #160]	; (8018850 <lv_timer_handler+0x144>)
 80187ae:	7013      	strb	r3, [r2, #0]
    return time_till_next;
 80187b0:	e7b7      	b.n	8018722 <lv_timer_handler+0x16>
            next = _lv_ll_get_next(&LV_GC_ROOT(_lv_timer_ll), LV_GC_ROOT(_lv_timer_act));
 80187b2:	4658      	mov	r0, fp
 80187b4:	f7fe fec1 	bl	801753a <_lv_ll_get_next>
            if(lv_timer_exec(LV_GC_ROOT(_lv_timer_act))) {
 80187b8:	683c      	ldr	r4, [r7, #0]
            next = _lv_ll_get_next(&LV_GC_ROOT(_lv_timer_ll), LV_GC_ROOT(_lv_timer_act));
 80187ba:	4680      	mov	r8, r0
 * @param timer pointer to lv_timer
 * @return true: execute, false: not executed
 */
static bool lv_timer_exec(lv_timer_t * timer)
{
    if(timer->paused) return false;
 80187bc:	7d22      	ldrb	r2, [r4, #20]
 80187be:	07d3      	lsls	r3, r2, #31
 80187c0:	d404      	bmi.n	80187cc <lv_timer_handler+0xc0>

    if(timer->repeat_count == 0) {
 80187c2:	6922      	ldr	r2, [r4, #16]
 80187c4:	b92a      	cbnz	r2, 80187d2 <lv_timer_handler+0xc6>
        TIMER_TRACE("deleting timer with %p callback because the repeat count is over", timer->timer_cb);
        lv_timer_del(timer);
 80187c6:	4620      	mov	r0, r4
 80187c8:	f7ff ff8e 	bl	80186e8 <lv_timer_del>
            LV_GC_ROOT(_lv_timer_act) = next; /*Load the next timer*/
 80187cc:	f8c7 8000 	str.w	r8, [r7]
 80187d0:	e7bf      	b.n	8018752 <lv_timer_handler+0x46>
 * @return the time remaining, or 0 if it needs to be run again
 */
static uint32_t lv_timer_time_remaining(lv_timer_t * timer)
{
    /*Check if at least 'period' time elapsed*/
    uint32_t elp = lv_tick_elaps(timer->last_run);
 80187d2:	6860      	ldr	r0, [r4, #4]
 80187d4:	f7fe f92a 	bl	8016a2c <lv_tick_elaps>
    if(elp >= timer->period)
 80187d8:	6822      	ldr	r2, [r4, #0]
 80187da:	4290      	cmp	r0, r2
 80187dc:	d3f6      	bcc.n	80187cc <lv_timer_handler+0xc0>
        int32_t original_repeat_count = timer->repeat_count;
 80187de:	6922      	ldr	r2, [r4, #16]
        if(timer->repeat_count > 0) timer->repeat_count--;
 80187e0:	2a00      	cmp	r2, #0
 80187e2:	9201      	str	r2, [sp, #4]
 80187e4:	bfc4      	itt	gt
 80187e6:	f102 31ff 	addgt.w	r1, r2, #4294967295
 80187ea:	6121      	strgt	r1, [r4, #16]
        timer->last_run = lv_tick_get();
 80187ec:	f7fe f910 	bl	8016a10 <lv_tick_get>
        if(timer->timer_cb && original_repeat_count != 0) timer->timer_cb(timer);
 80187f0:	68a1      	ldr	r1, [r4, #8]
        timer->last_run = lv_tick_get();
 80187f2:	6060      	str	r0, [r4, #4]
        if(timer->timer_cb && original_repeat_count != 0) timer->timer_cb(timer);
 80187f4:	b119      	cbz	r1, 80187fe <lv_timer_handler+0xf2>
 80187f6:	9a01      	ldr	r2, [sp, #4]
 80187f8:	b10a      	cbz	r2, 80187fe <lv_timer_handler+0xf2>
 80187fa:	4620      	mov	r0, r4
 80187fc:	4788      	blx	r1
        if(timer_deleted == false) { /*The timer might be deleted by itself as well*/
 80187fe:	f89a 2000 	ldrb.w	r2, [sl]
 8018802:	b922      	cbnz	r2, 801880e <lv_timer_handler+0x102>
            if(timer->repeat_count == 0) {
 8018804:	6922      	ldr	r2, [r4, #16]
 8018806:	b912      	cbnz	r2, 801880e <lv_timer_handler+0x102>
                lv_timer_del(timer);
 8018808:	4620      	mov	r0, r4
 801880a:	f7ff ff6d 	bl	80186e8 <lv_timer_del>
                if(timer_created || timer_deleted) {
 801880e:	9b00      	ldr	r3, [sp, #0]
 8018810:	781b      	ldrb	r3, [r3, #0]
 8018812:	b91b      	cbnz	r3, 801881c <lv_timer_handler+0x110>
 8018814:	f89a 3000 	ldrb.w	r3, [sl]
 8018818:	2b00      	cmp	r3, #0
 801881a:	d0d7      	beq.n	80187cc <lv_timer_handler+0xc0>
    } while(LV_GC_ROOT(_lv_timer_act));
 801881c:	6833      	ldr	r3, [r6, #0]
 801881e:	2b00      	cmp	r3, #0
 8018820:	d18b      	bne.n	801873a <lv_timer_handler+0x2e>
 8018822:	e798      	b.n	8018756 <lv_timer_handler+0x4a>
        if(!next->paused) {
 8018824:	7d20      	ldrb	r0, [r4, #20]
 8018826:	f010 0701 	ands.w	r7, r0, #1
 801882a:	d10a      	bne.n	8018842 <lv_timer_handler+0x136>
    uint32_t elp = lv_tick_elaps(timer->last_run);
 801882c:	6860      	ldr	r0, [r4, #4]
 801882e:	f7fe f8fd 	bl	8016a2c <lv_tick_elaps>
    if(elp >= timer->period)
 8018832:	6823      	ldr	r3, [r4, #0]
 8018834:	4298      	cmp	r0, r3
        return 0;
 8018836:	bf2c      	ite	cs
 8018838:	4638      	movcs	r0, r7
    return timer->period - elp;
 801883a:	1a18      	subcc	r0, r3, r0
            if(delay < time_till_next)
 801883c:	4286      	cmp	r6, r0
 801883e:	bf28      	it	cs
 8018840:	4606      	movcs	r6, r0
        next = _lv_ll_get_next(&LV_GC_ROOT(_lv_timer_ll), next); /*Find the next timer*/
 8018842:	4621      	mov	r1, r4
 8018844:	4640      	mov	r0, r8
 8018846:	f7fe fe78 	bl	801753a <_lv_ll_get_next>
 801884a:	4604      	mov	r4, r0
 801884c:	e78b      	b.n	8018766 <lv_timer_handler+0x5a>
 801884e:	bf00      	nop
 8018850:	2000ab78 	.word	0x2000ab78
 8018854:	2000ab88 	.word	0x2000ab88
 8018858:	2000adec 	.word	0x2000adec
 801885c:	2000ab89 	.word	0x2000ab89
 8018860:	2000adfc 	.word	0x2000adfc
 8018864:	2000ab7c 	.word	0x2000ab7c
 8018868:	2000ab84 	.word	0x2000ab84
 801886c:	2000ab80 	.word	0x2000ab80
 8018870:	2000ab8a 	.word	0x2000ab8a

08018874 <lv_timer_pause>:
    timer->paused = true;
 8018874:	7d03      	ldrb	r3, [r0, #20]
 8018876:	f043 0301 	orr.w	r3, r3, #1
 801887a:	7503      	strb	r3, [r0, #20]
}
 801887c:	4770      	bx	lr

0801887e <lv_timer_resume>:
    timer->paused = false;
 801887e:	7d03      	ldrb	r3, [r0, #20]
 8018880:	f36f 0300 	bfc	r3, #0, #1
 8018884:	7503      	strb	r3, [r0, #20]
}
 8018886:	4770      	bx	lr

08018888 <lv_timer_ready>:
{
 8018888:	b510      	push	{r4, lr}
 801888a:	4604      	mov	r4, r0
    timer->last_run = lv_tick_get() - timer->period - 1;
 801888c:	f7fe f8c0 	bl	8016a10 <lv_tick_get>
 8018890:	6823      	ldr	r3, [r4, #0]
 8018892:	43db      	mvns	r3, r3
 8018894:	4403      	add	r3, r0
 8018896:	6063      	str	r3, [r4, #4]
}
 8018898:	bd10      	pop	{r4, pc}

0801889a <default_walker>:

static void default_walker(void* ptr, size_t size, int used, void* user)
{
	(void)user;
	printf("\t%p %s size: %x (%p)\n", ptr, used ? "used" : "free", (unsigned int)size, (void*)block_from_ptr(ptr));
}
 801889a:	4770      	bx	lr

0801889c <block_next>:
{
 801889c:	b508      	push	{r3, lr}
	return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 801889e:	6843      	ldr	r3, [r0, #4]
 80188a0:	f023 0303 	bic.w	r3, r3, #3
	return tlsf_cast(block_header_t*, tlsf_cast(tlsfptr_t, ptr) + size);
 80188a4:	4418      	add	r0, r3
 80188a6:	3004      	adds	r0, #4
	tlsf_assert(!block_is_last(block));
 80188a8:	b933      	cbnz	r3, 80188b8 <block_next+0x1c>
 80188aa:	4b04      	ldr	r3, [pc, #16]	; (80188bc <block_next+0x20>)
 80188ac:	f240 11cd 	movw	r1, #461	; 0x1cd
 80188b0:	4a03      	ldr	r2, [pc, #12]	; (80188c0 <block_next+0x24>)
 80188b2:	4804      	ldr	r0, [pc, #16]	; (80188c4 <block_next+0x28>)
 80188b4:	f009 fe32 	bl	802251c <__assert_func>
}
 80188b8:	bd08      	pop	{r3, pc}
 80188ba:	bf00      	nop
 80188bc:	08028e8e 	.word	0x08028e8e
 80188c0:	080292f9 	.word	0x080292f9
 80188c4:	08028ea4 	.word	0x08028ea4

080188c8 <block_link_next>:
{
 80188c8:	b510      	push	{r4, lr}
 80188ca:	4604      	mov	r4, r0
	block_header_t* next = block_next(block);
 80188cc:	f7ff ffe6 	bl	801889c <block_next>
	next->prev_phys_block = block;
 80188d0:	6004      	str	r4, [r0, #0]
}
 80188d2:	bd10      	pop	{r4, pc}

080188d4 <block_split>:
{
 80188d4:	b570      	push	{r4, r5, r6, lr}
	return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 80188d6:	6846      	ldr	r6, [r0, #4]
	return tlsf_cast(void*,
 80188d8:	1842      	adds	r2, r0, r1
	return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 80188da:	f026 0603 	bic.w	r6, r6, #3
	return tlsf_cast(block_header_t*, tlsf_cast(tlsfptr_t, ptr) + size);
 80188de:	1d14      	adds	r4, r2, #4
	const size_t remain_size = block_size(block) - (size + block_header_overhead);
 80188e0:	1a73      	subs	r3, r6, r1
 80188e2:	1f1d      	subs	r5, r3, #4
	return tlsf_cast(void*,
 80188e4:	f102 030c 	add.w	r3, r2, #12
		(tlsf_cast(tlsfptr_t, ptr) + (align - 1)) & ~(align - 1);
 80188e8:	320f      	adds	r2, #15
 80188ea:	f022 0203 	bic.w	r2, r2, #3
	tlsf_assert(block_to_ptr(remaining) == align_ptr(block_to_ptr(remaining), ALIGN_SIZE)
 80188ee:	4293      	cmp	r3, r2
 80188f0:	d006      	beq.n	8018900 <block_split+0x2c>
 80188f2:	4b18      	ldr	r3, [pc, #96]	; (8018954 <block_split+0x80>)
 80188f4:	f240 21a3 	movw	r1, #675	; 0x2a3
 80188f8:	4a17      	ldr	r2, [pc, #92]	; (8018958 <block_split+0x84>)
	tlsf_assert(block_size(block) == remain_size + size + block_header_overhead);
 80188fa:	4818      	ldr	r0, [pc, #96]	; (801895c <block_split+0x88>)
 80188fc:	f009 fe0e 	bl	802251c <__assert_func>
 8018900:	1d0b      	adds	r3, r1, #4
 8018902:	442b      	add	r3, r5
 8018904:	42b3      	cmp	r3, r6
 8018906:	d004      	beq.n	8018912 <block_split+0x3e>
 8018908:	4b15      	ldr	r3, [pc, #84]	; (8018960 <block_split+0x8c>)
 801890a:	f240 21a6 	movw	r1, #678	; 0x2a6
 801890e:	4a12      	ldr	r2, [pc, #72]	; (8018958 <block_split+0x84>)
 8018910:	e7f3      	b.n	80188fa <block_split+0x26>
	block->size = size | (oldsize & (block_header_free_bit | block_header_prev_free_bit));
 8018912:	6863      	ldr	r3, [r4, #4]
 8018914:	f003 0303 	and.w	r3, r3, #3
 8018918:	432b      	orrs	r3, r5
 801891a:	6063      	str	r3, [r4, #4]
	return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 801891c:	f023 0303 	bic.w	r3, r3, #3
	tlsf_assert(block_size(remaining) >= block_size_min && "block split with invalid size");
 8018920:	2b0b      	cmp	r3, #11
 8018922:	d804      	bhi.n	801892e <block_split+0x5a>
 8018924:	4b0f      	ldr	r3, [pc, #60]	; (8018964 <block_split+0x90>)
 8018926:	f44f 712a 	mov.w	r1, #680	; 0x2a8
 801892a:	4a0b      	ldr	r2, [pc, #44]	; (8018958 <block_split+0x84>)
 801892c:	e7e5      	b.n	80188fa <block_split+0x26>
	block->size = size | (oldsize & (block_header_free_bit | block_header_prev_free_bit));
 801892e:	6843      	ldr	r3, [r0, #4]
 8018930:	f003 0303 	and.w	r3, r3, #3
 8018934:	4319      	orrs	r1, r3
 8018936:	6041      	str	r1, [r0, #4]
	block_header_t* next = block_link_next(block);
 8018938:	4620      	mov	r0, r4
 801893a:	f7ff ffc5 	bl	80188c8 <block_link_next>
	block->size |= block_header_prev_free_bit;
 801893e:	6843      	ldr	r3, [r0, #4]
 8018940:	f043 0302 	orr.w	r3, r3, #2
 8018944:	6043      	str	r3, [r0, #4]
}
 8018946:	4620      	mov	r0, r4
	block->size |= block_header_free_bit;
 8018948:	6863      	ldr	r3, [r4, #4]
 801894a:	f043 0301 	orr.w	r3, r3, #1
 801894e:	6063      	str	r3, [r4, #4]
}
 8018950:	bd70      	pop	{r4, r5, r6, pc}
 8018952:	bf00      	nop
 8018954:	08028ec4 	.word	0x08028ec4
 8018958:	08029347 	.word	0x08029347
 801895c:	08028ea4 	.word	0x08028ea4
 8018960:	08028f38 	.word	0x08028f38
 8018964:	08028f78 	.word	0x08028f78

08018968 <block_mark_as_used>:
{
 8018968:	b510      	push	{r4, lr}
 801896a:	4604      	mov	r4, r0
	block_header_t* next = block_next(block);
 801896c:	f7ff ff96 	bl	801889c <block_next>
	block->size &= ~block_header_prev_free_bit;
 8018970:	6843      	ldr	r3, [r0, #4]
 8018972:	f023 0302 	bic.w	r3, r3, #2
 8018976:	6043      	str	r3, [r0, #4]
	block->size &= ~block_header_free_bit;
 8018978:	6863      	ldr	r3, [r4, #4]
 801897a:	f023 0301 	bic.w	r3, r3, #1
 801897e:	6063      	str	r3, [r4, #4]
}
 8018980:	bd10      	pop	{r4, pc}
	...

08018984 <remove_free_block>:
{
 8018984:	b570      	push	{r4, r5, r6, lr}
	block_header_t* next = block->next_free;
 8018986:	e9d1 4502 	ldrd	r4, r5, [r1, #8]
	tlsf_assert(prev && "prev_free field can not be null");
 801898a:	b935      	cbnz	r5, 801899a <remove_free_block+0x16>
 801898c:	4b14      	ldr	r3, [pc, #80]	; (80189e0 <remove_free_block+0x5c>)
 801898e:	f44f 7116 	mov.w	r1, #600	; 0x258
 8018992:	4a14      	ldr	r2, [pc, #80]	; (80189e4 <remove_free_block+0x60>)
	tlsf_assert(next && "next_free field can not be null");
 8018994:	4814      	ldr	r0, [pc, #80]	; (80189e8 <remove_free_block+0x64>)
 8018996:	f009 fdc1 	bl	802251c <__assert_func>
 801899a:	b924      	cbnz	r4, 80189a6 <remove_free_block+0x22>
 801899c:	4b13      	ldr	r3, [pc, #76]	; (80189ec <remove_free_block+0x68>)
 801899e:	f240 2159 	movw	r1, #601	; 0x259
 80189a2:	4a10      	ldr	r2, [pc, #64]	; (80189e4 <remove_free_block+0x60>)
 80189a4:	e7f6      	b.n	8018994 <remove_free_block+0x10>
	next->prev_free = prev;
 80189a6:	60e5      	str	r5, [r4, #12]
	prev->next_free = next;
 80189a8:	60ac      	str	r4, [r5, #8]
	if (control->blocks[fl][sl] == block)
 80189aa:	eb03 1542 	add.w	r5, r3, r2, lsl #5
 80189ae:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 80189b2:	6bae      	ldr	r6, [r5, #56]	; 0x38
 80189b4:	428e      	cmp	r6, r1
 80189b6:	d112      	bne.n	80189de <remove_free_block+0x5a>
		if (next == &control->block_null)
 80189b8:	42a0      	cmp	r0, r4
		control->blocks[fl][sl] = next;
 80189ba:	63ac      	str	r4, [r5, #56]	; 0x38
		if (next == &control->block_null)
 80189bc:	d10f      	bne.n	80189de <remove_free_block+0x5a>
			control->sl_bitmap[fl] &= ~(1U << sl);
 80189be:	eb00 0582 	add.w	r5, r0, r2, lsl #2
 80189c2:	2101      	movs	r1, #1
 80189c4:	696c      	ldr	r4, [r5, #20]
 80189c6:	fa01 f303 	lsl.w	r3, r1, r3
 80189ca:	ea24 0303 	bic.w	r3, r4, r3
 80189ce:	616b      	str	r3, [r5, #20]
			if (!control->sl_bitmap[fl])
 80189d0:	b92b      	cbnz	r3, 80189de <remove_free_block+0x5a>
				control->fl_bitmap &= ~(1U << fl);
 80189d2:	fa01 f202 	lsl.w	r2, r1, r2
 80189d6:	6901      	ldr	r1, [r0, #16]
 80189d8:	ea21 0202 	bic.w	r2, r1, r2
 80189dc:	6102      	str	r2, [r0, #16]
}
 80189de:	bd70      	pop	{r4, r5, r6, pc}
 80189e0:	08029000 	.word	0x08029000
 80189e4:	08029323 	.word	0x08029323
 80189e8:	08028ea4 	.word	0x08028ea4
 80189ec:	0802902a 	.word	0x0802902a

080189f0 <block_absorb.part.0>:
static block_header_t* block_absorb(block_header_t* prev, block_header_t* block)
 80189f0:	b508      	push	{r3, lr}
	tlsf_assert(!block_is_last(prev) && "previous block can't be last");
 80189f2:	4a03      	ldr	r2, [pc, #12]	; (8018a00 <block_absorb.part.0+0x10>)
 80189f4:	f240 21b3 	movw	r1, #691	; 0x2b3
 80189f8:	4b02      	ldr	r3, [pc, #8]	; (8018a04 <block_absorb.part.0+0x14>)
 80189fa:	4803      	ldr	r0, [pc, #12]	; (8018a08 <block_absorb.part.0+0x18>)
 80189fc:	f009 fd8e 	bl	802251c <__assert_func>
 8018a00:	08029353 	.word	0x08029353
 8018a04:	08029054 	.word	0x08029054
 8018a08:	08028ea4 	.word	0x08028ea4

08018a0c <block_prepare_used.part.0>:
static void* block_prepare_used(control_t* control, block_header_t* block, size_t size)
 8018a0c:	b508      	push	{r3, lr}
		tlsf_assert(size && "size must be non-zero");
 8018a0e:	4a03      	ldr	r2, [pc, #12]	; (8018a1c <block_prepare_used.part.0+0x10>)
 8018a10:	f44f 714a 	mov.w	r1, #808	; 0x328
 8018a14:	4b02      	ldr	r3, [pc, #8]	; (8018a20 <block_prepare_used.part.0+0x14>)
 8018a16:	4803      	ldr	r0, [pc, #12]	; (8018a24 <block_prepare_used.part.0+0x18>)
 8018a18:	f009 fd80 	bl	802251c <__assert_func>
 8018a1c:	080293b4 	.word	0x080293b4
 8018a20:	0802908b 	.word	0x0802908b
 8018a24:	08028ea4 	.word	0x08028ea4

08018a28 <mapping_insert>:
	if (size < SMALL_BLOCK_SIZE)
 8018a28:	287f      	cmp	r0, #127	; 0x7f
	const int bit = word ? 32 - __builtin_clz(word) : 0;
 8018a2a:	bf8e      	itee	hi
 8018a2c:	fab0 f380 	clzhi	r3, r0
		sl = tlsf_cast(int, size) / (SMALL_BLOCK_SIZE / SL_INDEX_COUNT);
 8018a30:	1080      	asrls	r0, r0, #2
		fl = 0;
 8018a32:	2300      	movls	r3, #0
{
 8018a34:	b510      	push	{r4, lr}
		sl = tlsf_cast(int, size >> (fl - SL_INDEX_COUNT_LOG2)) ^ (1 << SL_INDEX_COUNT_LOG2);
 8018a36:	bf82      	ittt	hi
 8018a38:	f1c3 041a 	rsbhi	r4, r3, #26
		fl -= (FL_INDEX_SHIFT - 1);
 8018a3c:	f1c3 0319 	rsbhi	r3, r3, #25
		sl = tlsf_cast(int, size >> (fl - SL_INDEX_COUNT_LOG2)) ^ (1 << SL_INDEX_COUNT_LOG2);
 8018a40:	40e0      	lsrhi	r0, r4
	*fli = fl;
 8018a42:	600b      	str	r3, [r1, #0]
		sl = tlsf_cast(int, size >> (fl - SL_INDEX_COUNT_LOG2)) ^ (1 << SL_INDEX_COUNT_LOG2);
 8018a44:	bf88      	it	hi
 8018a46:	f080 0020 	eorhi.w	r0, r0, #32
	*sli = sl;
 8018a4a:	6010      	str	r0, [r2, #0]
}
 8018a4c:	bd10      	pop	{r4, pc}
	...

08018a50 <block_insert>:
{
 8018a50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018a52:	4604      	mov	r4, r0
	return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8018a54:	6848      	ldr	r0, [r1, #4]
	mapping_insert(block_size(block), &fl, &sl);
 8018a56:	aa01      	add	r2, sp, #4
{
 8018a58:	460d      	mov	r5, r1
	mapping_insert(block_size(block), &fl, &sl);
 8018a5a:	f020 0003 	bic.w	r0, r0, #3
 8018a5e:	4669      	mov	r1, sp
 8018a60:	f7ff ffe2 	bl	8018a28 <mapping_insert>
	insert_free_block(control, block, fl, sl);
 8018a64:	e9dd 0700 	ldrd	r0, r7, [sp]
	block_header_t* current = control->blocks[fl][sl];
 8018a68:	eb07 1240 	add.w	r2, r7, r0, lsl #5
 8018a6c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8018a70:	6b93      	ldr	r3, [r2, #56]	; 0x38
	tlsf_assert(current && "free list cannot have a null entry");
 8018a72:	b933      	cbnz	r3, 8018a82 <block_insert+0x32>
 8018a74:	4b12      	ldr	r3, [pc, #72]	; (8018ac0 <block_insert+0x70>)
 8018a76:	f44f 711d 	mov.w	r1, #628	; 0x274
 8018a7a:	4a12      	ldr	r2, [pc, #72]	; (8018ac4 <block_insert+0x74>)
	tlsf_assert(block_to_ptr(block) == align_ptr(block_to_ptr(block), ALIGN_SIZE)
 8018a7c:	4812      	ldr	r0, [pc, #72]	; (8018ac8 <block_insert+0x78>)
 8018a7e:	f009 fd4d 	bl	802251c <__assert_func>
		(tlsf_cast(tlsfptr_t, ptr) + (align - 1)) & ~(align - 1);
 8018a82:	f105 010b 	add.w	r1, r5, #11
	return tlsf_cast(void*,
 8018a86:	f105 0608 	add.w	r6, r5, #8
		(tlsf_cast(tlsfptr_t, ptr) + (align - 1)) & ~(align - 1);
 8018a8a:	f021 0103 	bic.w	r1, r1, #3
	tlsf_assert(block_to_ptr(block) == align_ptr(block_to_ptr(block), ALIGN_SIZE)
 8018a8e:	428e      	cmp	r6, r1
	block->prev_free = &control->block_null;
 8018a90:	e9c5 3402 	strd	r3, r4, [r5, #8]
	current->prev_free = block;
 8018a94:	60dd      	str	r5, [r3, #12]
	tlsf_assert(block_to_ptr(block) == align_ptr(block_to_ptr(block), ALIGN_SIZE)
 8018a96:	d004      	beq.n	8018aa2 <block_insert+0x52>
 8018a98:	4b0c      	ldr	r3, [pc, #48]	; (8018acc <block_insert+0x7c>)
 8018a9a:	f240 217a 	movw	r1, #634	; 0x27a
 8018a9e:	4a09      	ldr	r2, [pc, #36]	; (8018ac4 <block_insert+0x74>)
 8018aa0:	e7ec      	b.n	8018a7c <block_insert+0x2c>
	control->fl_bitmap |= (1U << fl);
 8018aa2:	2301      	movs	r3, #1
	control->blocks[fl][sl] = block;
 8018aa4:	6395      	str	r5, [r2, #56]	; 0x38
	control->fl_bitmap |= (1U << fl);
 8018aa6:	6922      	ldr	r2, [r4, #16]
 8018aa8:	fa03 f100 	lsl.w	r1, r3, r0
	control->sl_bitmap[fl] |= (1U << sl);
 8018aac:	40bb      	lsls	r3, r7
	control->fl_bitmap |= (1U << fl);
 8018aae:	430a      	orrs	r2, r1
 8018ab0:	6122      	str	r2, [r4, #16]
	control->sl_bitmap[fl] |= (1U << sl);
 8018ab2:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8018ab6:	6962      	ldr	r2, [r4, #20]
 8018ab8:	4313      	orrs	r3, r2
 8018aba:	6163      	str	r3, [r4, #20]
}
 8018abc:	b003      	add	sp, #12
 8018abe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018ac0:	080290ab 	.word	0x080290ab
 8018ac4:	08029335 	.word	0x08029335
 8018ac8:	08028ea4 	.word	0x08028ea4
 8018acc:	080290db 	.word	0x080290db

08018ad0 <block_trim_free>:
	tlsf_assert(block_is_free(block) && "block must be free");
 8018ad0:	684b      	ldr	r3, [r1, #4]
{
 8018ad2:	b570      	push	{r4, r5, r6, lr}
 8018ad4:	460d      	mov	r5, r1
	tlsf_assert(block_is_free(block) && "block must be free");
 8018ad6:	07d9      	lsls	r1, r3, #31
{
 8018ad8:	4606      	mov	r6, r0
	tlsf_assert(block_is_free(block) && "block must be free");
 8018ada:	d406      	bmi.n	8018aea <block_trim_free+0x1a>
 8018adc:	4b0f      	ldr	r3, [pc, #60]	; (8018b1c <block_trim_free+0x4c>)
 8018ade:	f44f 7137 	mov.w	r1, #732	; 0x2dc
 8018ae2:	4a0f      	ldr	r2, [pc, #60]	; (8018b20 <block_trim_free+0x50>)
 8018ae4:	480f      	ldr	r0, [pc, #60]	; (8018b24 <block_trim_free+0x54>)
 8018ae6:	f009 fd19 	bl	802251c <__assert_func>
	return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8018aea:	f023 0303 	bic.w	r3, r3, #3
	return block_size(block) >= sizeof(block_header_t) + size;
 8018aee:	f102 0110 	add.w	r1, r2, #16
	if (block_can_split(block, size))
 8018af2:	428b      	cmp	r3, r1
 8018af4:	d311      	bcc.n	8018b1a <block_trim_free+0x4a>
		block_header_t* remaining_block = block_split(block, size);
 8018af6:	4611      	mov	r1, r2
 8018af8:	4628      	mov	r0, r5
 8018afa:	f7ff feeb 	bl	80188d4 <block_split>
 8018afe:	4604      	mov	r4, r0
		block_link_next(block);
 8018b00:	4628      	mov	r0, r5
 8018b02:	f7ff fee1 	bl	80188c8 <block_link_next>
	block->size |= block_header_prev_free_bit;
 8018b06:	6863      	ldr	r3, [r4, #4]
		block_insert(control, remaining_block);
 8018b08:	4621      	mov	r1, r4
 8018b0a:	4630      	mov	r0, r6
	block->size |= block_header_prev_free_bit;
 8018b0c:	f043 0302 	orr.w	r3, r3, #2
 8018b10:	6063      	str	r3, [r4, #4]
}
 8018b12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		block_insert(control, remaining_block);
 8018b16:	f7ff bf9b 	b.w	8018a50 <block_insert>
}
 8018b1a:	bd70      	pop	{r4, r5, r6, pc}
 8018b1c:	0802913d 	.word	0x0802913d
 8018b20:	08029382 	.word	0x08029382
 8018b24:	08028ea4 	.word	0x08028ea4

08018b28 <block_remove>:
{
 8018b28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018b2a:	4605      	mov	r5, r0
	return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8018b2c:	6848      	ldr	r0, [r1, #4]
{
 8018b2e:	460c      	mov	r4, r1
	mapping_insert(block_size(block), &fl, &sl);
 8018b30:	aa01      	add	r2, sp, #4
 8018b32:	4669      	mov	r1, sp
 8018b34:	f020 0003 	bic.w	r0, r0, #3
 8018b38:	f7ff ff76 	bl	8018a28 <mapping_insert>
	remove_free_block(control, block, fl, sl);
 8018b3c:	4621      	mov	r1, r4
 8018b3e:	4628      	mov	r0, r5
 8018b40:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018b44:	f7ff ff1e 	bl	8018984 <remove_free_block>
}
 8018b48:	b003      	add	sp, #12
 8018b4a:	bd30      	pop	{r4, r5, pc}

08018b4c <block_locate_free>:
	int fl = 0, sl = 0;
 8018b4c:	2300      	movs	r3, #0
{
 8018b4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018b50:	4605      	mov	r5, r0
	if (size)
 8018b52:	460e      	mov	r6, r1
	int fl = 0, sl = 0;
 8018b54:	e9cd 3300 	strd	r3, r3, [sp]
	if (size)
 8018b58:	b919      	cbnz	r1, 8018b62 <block_locate_free+0x16>
	block_header_t* block = 0;
 8018b5a:	2400      	movs	r4, #0
}
 8018b5c:	4620      	mov	r0, r4
 8018b5e:	b002      	add	sp, #8
 8018b60:	bd70      	pop	{r4, r5, r6, pc}
	if (size >= SMALL_BLOCK_SIZE)
 8018b62:	297f      	cmp	r1, #127	; 0x7f
	mapping_insert(size, fli, sli);
 8018b64:	aa01      	add	r2, sp, #4
	const int bit = word ? 32 - __builtin_clz(word) : 0;
 8018b66:	bf89      	itett	hi
 8018b68:	fab1 f081 	clzhi	r0, r1
		size += round;
 8018b6c:	4608      	movls	r0, r1
		const size_t round = (1 << (tlsf_fls_sizet(size) - SL_INDEX_COUNT_LOG2)) - 1;
 8018b6e:	f1c0 031a 	rsbhi	r3, r0, #26
 8018b72:	2001      	movhi	r0, #1
 8018b74:	bf82      	ittt	hi
 8018b76:	4098      	lslhi	r0, r3
 8018b78:	f100 30ff 	addhi.w	r0, r0, #4294967295
		size += round;
 8018b7c:	1840      	addhi	r0, r0, r1
	mapping_insert(size, fli, sli);
 8018b7e:	4669      	mov	r1, sp
 8018b80:	f7ff ff52 	bl	8018a28 <mapping_insert>
		if (fl < FL_INDEX_COUNT)
 8018b84:	9a00      	ldr	r2, [sp, #0]
 8018b86:	2a08      	cmp	r2, #8
 8018b88:	dce7      	bgt.n	8018b5a <block_locate_free+0xe>
	unsigned int sl_map = control->sl_bitmap[fl] & (~0U << sl);
 8018b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8018b8e:	9c01      	ldr	r4, [sp, #4]
 8018b90:	eb05 0182 	add.w	r1, r5, r2, lsl #2
 8018b94:	fa03 f404 	lsl.w	r4, r3, r4
 8018b98:	6949      	ldr	r1, [r1, #20]
	if (!sl_map)
 8018b9a:	400c      	ands	r4, r1
 8018b9c:	d114      	bne.n	8018bc8 <block_locate_free+0x7c>
		const unsigned int fl_map = control->fl_bitmap & (~0U << (fl + 1));
 8018b9e:	3201      	adds	r2, #1
 8018ba0:	4093      	lsls	r3, r2
 8018ba2:	692a      	ldr	r2, [r5, #16]
		if (!fl_map)
 8018ba4:	401a      	ands	r2, r3
 8018ba6:	d0d8      	beq.n	8018b5a <block_locate_free+0xe>
	return __builtin_ffs(word) - 1;
 8018ba8:	fa92 f2a2 	rbit	r2, r2
 8018bac:	fab2 f282 	clz	r2, r2
		sl_map = control->sl_bitmap[fl];
 8018bb0:	eb05 0382 	add.w	r3, r5, r2, lsl #2
		*fli = fl;
 8018bb4:	9200      	str	r2, [sp, #0]
		sl_map = control->sl_bitmap[fl];
 8018bb6:	695c      	ldr	r4, [r3, #20]
	tlsf_assert(sl_map && "internal error - second level bitmap is null");
 8018bb8:	b934      	cbnz	r4, 8018bc8 <block_locate_free+0x7c>
 8018bba:	4b13      	ldr	r3, [pc, #76]	; (8018c08 <block_locate_free+0xbc>)
 8018bbc:	f240 214b 	movw	r1, #587	; 0x24b
 8018bc0:	4a12      	ldr	r2, [pc, #72]	; (8018c0c <block_locate_free+0xc0>)
		tlsf_assert(block_size(block) >= size);
 8018bc2:	4813      	ldr	r0, [pc, #76]	; (8018c10 <block_locate_free+0xc4>)
 8018bc4:	f009 fcaa 	bl	802251c <__assert_func>
	return __builtin_ffs(word) - 1;
 8018bc8:	fa94 f3a4 	rbit	r3, r4
 8018bcc:	2c00      	cmp	r4, #0
 8018bce:	fab3 f383 	clz	r3, r3
 8018bd2:	bf08      	it	eq
 8018bd4:	f04f 33ff 	moveq.w	r3, #4294967295
	return control->blocks[fl][sl];
 8018bd8:	eb03 1242 	add.w	r2, r3, r2, lsl #5
	*sli = sl;
 8018bdc:	9301      	str	r3, [sp, #4]
	return control->blocks[fl][sl];
 8018bde:	320e      	adds	r2, #14
 8018be0:	f855 4022 	ldr.w	r4, [r5, r2, lsl #2]
	if (block)
 8018be4:	2c00      	cmp	r4, #0
 8018be6:	d0b8      	beq.n	8018b5a <block_locate_free+0xe>
	return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8018be8:	6862      	ldr	r2, [r4, #4]
 8018bea:	f022 0203 	bic.w	r2, r2, #3
		tlsf_assert(block_size(block) >= size);
 8018bee:	4296      	cmp	r6, r2
 8018bf0:	d904      	bls.n	8018bfc <block_locate_free+0xb0>
 8018bf2:	4b08      	ldr	r3, [pc, #32]	; (8018c14 <block_locate_free+0xc8>)
 8018bf4:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8018bf8:	4a07      	ldr	r2, [pc, #28]	; (8018c18 <block_locate_free+0xcc>)
 8018bfa:	e7e2      	b.n	8018bc2 <block_locate_free+0x76>
		remove_free_block(control, block, fl, sl);
 8018bfc:	9a00      	ldr	r2, [sp, #0]
 8018bfe:	4621      	mov	r1, r4
 8018c00:	4628      	mov	r0, r5
 8018c02:	f7ff febf 	bl	8018984 <remove_free_block>
	return block;
 8018c06:	e7a9      	b.n	8018b5c <block_locate_free+0x10>
 8018c08:	0802916a 	.word	0x0802916a
 8018c0c:	0802930d 	.word	0x0802930d
 8018c10:	08028ea4 	.word	0x08028ea4
 8018c14:	080291a3 	.word	0x080291a3
 8018c18:	080293a2 	.word	0x080293a2

08018c1c <adjust_request_size>:
{
 8018c1c:	b508      	push	{r3, lr}
	if (size)
 8018c1e:	b1b0      	cbz	r0, 8018c4e <adjust_request_size+0x32>
	tlsf_assert(0 == (align & (align - 1)) && "must align to a power of two");
 8018c20:	1e4b      	subs	r3, r1, #1
 8018c22:	ea11 0203 	ands.w	r2, r1, r3
 8018c26:	d006      	beq.n	8018c36 <adjust_request_size+0x1a>
 8018c28:	4b0a      	ldr	r3, [pc, #40]	; (8018c54 <adjust_request_size+0x38>)
 8018c2a:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
 8018c2e:	4a0a      	ldr	r2, [pc, #40]	; (8018c58 <adjust_request_size+0x3c>)
 8018c30:	480a      	ldr	r0, [pc, #40]	; (8018c5c <adjust_request_size+0x40>)
 8018c32:	f009 fc73 	bl	802251c <__assert_func>
	return (x + (align - 1)) & ~(align - 1);
 8018c36:	4403      	add	r3, r0
 8018c38:	4249      	negs	r1, r1
 8018c3a:	4019      	ands	r1, r3
		if (aligned < block_size_max) 
 8018c3c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8018c40:	d203      	bcs.n	8018c4a <adjust_request_size+0x2e>
			adjust = tlsf_max(aligned, block_size_min);
 8018c42:	290c      	cmp	r1, #12
 8018c44:	460a      	mov	r2, r1
 8018c46:	bf38      	it	cc
 8018c48:	220c      	movcc	r2, #12
}
 8018c4a:	4610      	mov	r0, r2
 8018c4c:	bd08      	pop	{r3, pc}
	size_t adjust = 0;
 8018c4e:	4602      	mov	r2, r0
	return adjust;
 8018c50:	e7fb      	b.n	8018c4a <adjust_request_size+0x2e>
 8018c52:	bf00      	nop
 8018c54:	08028fc3 	.word	0x08028fc3
 8018c58:	08029304 	.word	0x08029304
 8018c5c:	08028ea4 	.word	0x08028ea4

08018c60 <block_merge_next>:
{
 8018c60:	b570      	push	{r4, r5, r6, lr}
 8018c62:	4606      	mov	r6, r0
	block_header_t* next = block_next(block);
 8018c64:	4608      	mov	r0, r1
{
 8018c66:	460c      	mov	r4, r1
	block_header_t* next = block_next(block);
 8018c68:	f7ff fe18 	bl	801889c <block_next>
	tlsf_assert(next && "next physical block can't be null");
 8018c6c:	4605      	mov	r5, r0
 8018c6e:	b930      	cbnz	r0, 8018c7e <block_merge_next+0x1e>
 8018c70:	4b13      	ldr	r3, [pc, #76]	; (8018cc0 <block_merge_next+0x60>)
 8018c72:	f240 21cd 	movw	r1, #717	; 0x2cd
 8018c76:	4a13      	ldr	r2, [pc, #76]	; (8018cc4 <block_merge_next+0x64>)
		tlsf_assert(!block_is_last(block) && "previous block can't be last");
 8018c78:	4813      	ldr	r0, [pc, #76]	; (8018cc8 <block_merge_next+0x68>)
 8018c7a:	f009 fc4f 	bl	802251c <__assert_func>
	return tlsf_cast(int, block->size & block_header_free_bit);
 8018c7e:	6843      	ldr	r3, [r0, #4]
	if (block_is_free(next))
 8018c80:	07db      	lsls	r3, r3, #31
 8018c82:	d51b      	bpl.n	8018cbc <block_merge_next+0x5c>
	return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8018c84:	6863      	ldr	r3, [r4, #4]
		tlsf_assert(!block_is_last(block) && "previous block can't be last");
 8018c86:	f033 0303 	bics.w	r3, r3, #3
 8018c8a:	d104      	bne.n	8018c96 <block_merge_next+0x36>
 8018c8c:	4b0f      	ldr	r3, [pc, #60]	; (8018ccc <block_merge_next+0x6c>)
 8018c8e:	f240 21d1 	movw	r1, #721	; 0x2d1
 8018c92:	4a0c      	ldr	r2, [pc, #48]	; (8018cc4 <block_merge_next+0x64>)
 8018c94:	e7f0      	b.n	8018c78 <block_merge_next+0x18>
		block_remove(control, next);
 8018c96:	4601      	mov	r1, r0
 8018c98:	4630      	mov	r0, r6
 8018c9a:	f7ff ff45 	bl	8018b28 <block_remove>
	return block_size(block) == 0;
 8018c9e:	6862      	ldr	r2, [r4, #4]
	tlsf_assert(!block_is_last(prev) && "previous block can't be last");
 8018ca0:	f032 0303 	bics.w	r3, r2, #3
 8018ca4:	d101      	bne.n	8018caa <block_merge_next+0x4a>
 8018ca6:	f7ff fea3 	bl	80189f0 <block_absorb.part.0>
	return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8018caa:	686b      	ldr	r3, [r5, #4]
	prev->size += block_size(block) + block_header_overhead;
 8018cac:	3204      	adds	r2, #4
	block_link_next(prev);
 8018cae:	4620      	mov	r0, r4
	return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8018cb0:	f023 0303 	bic.w	r3, r3, #3
	prev->size += block_size(block) + block_header_overhead;
 8018cb4:	4413      	add	r3, r2
 8018cb6:	6063      	str	r3, [r4, #4]
	block_link_next(prev);
 8018cb8:	f7ff fe06 	bl	80188c8 <block_link_next>
}
 8018cbc:	4620      	mov	r0, r4
 8018cbe:	bd70      	pop	{r4, r5, r6, pc}
 8018cc0:	080291bd 	.word	0x080291bd
 8018cc4:	08029371 	.word	0x08029371
 8018cc8:	08028ea4 	.word	0x08028ea4
 8018ccc:	080291e9 	.word	0x080291e9

08018cd0 <tlsf_walk_pool>:

void tlsf_walk_pool(pool_t pool, tlsf_walker walker, void* user)
{
 8018cd0:	b570      	push	{r4, r5, r6, lr}
	tlsf_walker pool_walker = walker ? walker : default_walker;
 8018cd2:	4d0c      	ldr	r5, [pc, #48]	; (8018d04 <tlsf_walk_pool+0x34>)
{
 8018cd4:	4616      	mov	r6, r2
	return tlsf_cast(block_header_t*, tlsf_cast(tlsfptr_t, ptr) + size);
 8018cd6:	1f04      	subs	r4, r0, #4
	tlsf_walker pool_walker = walker ? walker : default_walker;
 8018cd8:	2900      	cmp	r1, #0
 8018cda:	bf18      	it	ne
 8018cdc:	460d      	movne	r5, r1
	block_header_t* block =
		offset_to_block(pool, -(int)block_header_overhead);

	while (block && !block_is_last(block))
 8018cde:	b11c      	cbz	r4, 8018ce8 <tlsf_walk_pool+0x18>
	return block_size(block) == 0;
 8018ce0:	6860      	ldr	r0, [r4, #4]
	while (block && !block_is_last(block))
 8018ce2:	f030 0103 	bics.w	r1, r0, #3
 8018ce6:	d100      	bne.n	8018cea <tlsf_walk_pool+0x1a>
			block_size(block),
			!block_is_free(block),
			user);
		block = block_next(block);
	}
}
 8018ce8:	bd70      	pop	{r4, r5, r6, pc}
		pool_walker(
 8018cea:	43c0      	mvns	r0, r0
 8018cec:	4633      	mov	r3, r6
 8018cee:	f000 0201 	and.w	r2, r0, #1
 8018cf2:	f104 0008 	add.w	r0, r4, #8
 8018cf6:	47a8      	blx	r5
		block = block_next(block);
 8018cf8:	4620      	mov	r0, r4
 8018cfa:	f7ff fdcf 	bl	801889c <block_next>
 8018cfe:	4604      	mov	r4, r0
 8018d00:	e7ed      	b.n	8018cde <tlsf_walk_pool+0xe>
 8018d02:	bf00      	nop
 8018d04:	0801889b 	.word	0x0801889b

08018d08 <tlsf_add_pool>:
{
	return block_header_overhead;
}

pool_t tlsf_add_pool(tlsf_t tlsf, void* mem, size_t bytes)
{
 8018d08:	b538      	push	{r3, r4, r5, lr}
	block_header_t* block;
	block_header_t* next;

	const size_t pool_overhead = tlsf_pool_overhead();
	const size_t pool_bytes = align_down(bytes - pool_overhead, ALIGN_SIZE);
 8018d0a:	3a08      	subs	r2, #8

	if (((ptrdiff_t)mem % ALIGN_SIZE) != 0)
 8018d0c:	f011 0303 	ands.w	r3, r1, #3
{
 8018d10:	460c      	mov	r4, r1
	return x - (x & (align - 1));
 8018d12:	f022 0203 	bic.w	r2, r2, #3
	if (((ptrdiff_t)mem % ALIGN_SIZE) != 0)
 8018d16:	d115      	bne.n	8018d44 <tlsf_add_pool+0x3c>
		printf("tlsf_add_pool: Memory must be aligned by %u bytes.\n",
			(unsigned int)ALIGN_SIZE);
		return 0;
	}

	if (pool_bytes < block_size_min || pool_bytes > block_size_max)
 8018d18:	f1a2 050c 	sub.w	r5, r2, #12
 8018d1c:	f647 71f4 	movw	r1, #32756	; 0x7ff4
 8018d20:	428d      	cmp	r5, r1
 8018d22:	d811      	bhi.n	8018d48 <tlsf_add_pool+0x40>
	return tlsf_cast(block_header_t*, tlsf_cast(tlsfptr_t, ptr) + size);
 8018d24:	4625      	mov	r5, r4
	block->size &= ~block_header_prev_free_bit;
 8018d26:	f042 0201 	orr.w	r2, r2, #1
	block->size = size | (oldsize & (block_header_free_bit | block_header_prev_free_bit));
 8018d2a:	f855 3904 	ldr.w	r3, [r5], #-4
	*/
	block = offset_to_block(mem, -(tlsfptr_t)block_header_overhead);
	block_set_size(block, pool_bytes);
	block_set_free(block);
	block_set_prev_used(block);
	block_insert(tlsf_cast(control_t*, tlsf), block);
 8018d2e:	4629      	mov	r1, r5
	block->size &= ~block_header_prev_free_bit;
 8018d30:	606a      	str	r2, [r5, #4]
	block_insert(tlsf_cast(control_t*, tlsf), block);
 8018d32:	f7ff fe8d 	bl	8018a50 <block_insert>

	/* Split the block to create a zero-size sentinel block. */
	next = block_link_next(block);
 8018d36:	4628      	mov	r0, r5
 8018d38:	f7ff fdc6 	bl	80188c8 <block_link_next>
	block->size |= block_header_prev_free_bit;
 8018d3c:	2302      	movs	r3, #2
 8018d3e:	6043      	str	r3, [r0, #4]
	block_set_size(next, 0);
	block_set_used(next);
	block_set_prev_free(next);

	return mem;
}
 8018d40:	4620      	mov	r0, r4
 8018d42:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
 8018d44:	2400      	movs	r4, #0
 8018d46:	e7fb      	b.n	8018d40 <tlsf_add_pool+0x38>
 8018d48:	461c      	mov	r4, r3
 8018d4a:	e7f9      	b.n	8018d40 <tlsf_add_pool+0x38>

08018d4c <tlsf_create>:
	{
		return 0;
	}
#endif

	if (((tlsfptr_t)mem % ALIGN_SIZE) != 0)
 8018d4c:	f010 0203 	ands.w	r2, r0, #3
{
 8018d50:	b530      	push	{r4, r5, lr}
	if (((tlsfptr_t)mem % ALIGN_SIZE) != 0)
 8018d52:	d113      	bne.n	8018d7c <tlsf_create+0x30>
	control->block_null.next_free = &control->block_null;
 8018d54:	f100 0114 	add.w	r1, r0, #20
 8018d58:	f100 0338 	add.w	r3, r0, #56	; 0x38
 8018d5c:	f500 6497 	add.w	r4, r0, #1208	; 0x4b8
	control->fl_bitmap = 0;
 8018d60:	6102      	str	r2, [r0, #16]
	control->block_null.prev_free = &control->block_null;
 8018d62:	e9c0 0002 	strd	r0, r0, [r0, #8]
		control->sl_bitmap[i] = 0;
 8018d66:	f103 0580 	add.w	r5, r3, #128	; 0x80
 8018d6a:	f841 2b04 	str.w	r2, [r1], #4
			control->blocks[i][j] = &control->block_null;
 8018d6e:	f843 0b04 	str.w	r0, [r3], #4
		for (j = 0; j < SL_INDEX_COUNT; ++j)
 8018d72:	42ab      	cmp	r3, r5
 8018d74:	d1fb      	bne.n	8018d6e <tlsf_create+0x22>
	for (i = 0; i < FL_INDEX_COUNT; ++i)
 8018d76:	429c      	cmp	r4, r3
 8018d78:	d1f5      	bne.n	8018d66 <tlsf_create+0x1a>
	}

	control_constructor(tlsf_cast(control_t*, mem));

	return tlsf_cast(tlsf_t, mem);
}
 8018d7a:	bd30      	pop	{r4, r5, pc}
		return 0;
 8018d7c:	2000      	movs	r0, #0
 8018d7e:	e7fc      	b.n	8018d7a <tlsf_create+0x2e>

08018d80 <tlsf_create_with_pool>:

tlsf_t tlsf_create_with_pool(void* mem, size_t bytes)
{
 8018d80:	b570      	push	{r4, r5, r6, lr}
 8018d82:	460e      	mov	r6, r1
 8018d84:	4605      	mov	r5, r0
	tlsf_t tlsf = tlsf_create(mem);
 8018d86:	f7ff ffe1 	bl	8018d4c <tlsf_create>
 8018d8a:	4604      	mov	r4, r0
	tlsf_add_pool(tlsf, (char*)mem + tlsf_size(), bytes - tlsf_size());
 8018d8c:	f5a6 6297 	sub.w	r2, r6, #1208	; 0x4b8
 8018d90:	f505 6197 	add.w	r1, r5, #1208	; 0x4b8
 8018d94:	f7ff ffb8 	bl	8018d08 <tlsf_add_pool>
	return tlsf;
}
 8018d98:	4620      	mov	r0, r4
 8018d9a:	bd70      	pop	{r4, r5, r6, pc}

08018d9c <tlsf_get_pool>:
}

pool_t tlsf_get_pool(tlsf_t tlsf)
{
	return tlsf_cast(pool_t, (char*)tlsf + tlsf_size());
}
 8018d9c:	f500 6097 	add.w	r0, r0, #1208	; 0x4b8
 8018da0:	4770      	bx	lr

08018da2 <tlsf_malloc>:

void* tlsf_malloc(tlsf_t tlsf, size_t size)
{
 8018da2:	b570      	push	{r4, r5, r6, lr}
 8018da4:	4606      	mov	r6, r0
	if (size)
 8018da6:	460c      	mov	r4, r1
 8018da8:	b141      	cbz	r1, 8018dbc <tlsf_malloc+0x1a>
	return (x + (align - 1)) & ~(align - 1);
 8018daa:	3403      	adds	r4, #3
 8018dac:	f024 0403 	bic.w	r4, r4, #3
		if (aligned < block_size_max) 
 8018db0:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8018db4:	d20b      	bcs.n	8018dce <tlsf_malloc+0x2c>
			adjust = tlsf_max(aligned, block_size_min);
 8018db6:	2c0c      	cmp	r4, #12
 8018db8:	bf38      	it	cc
 8018dba:	240c      	movcc	r4, #12
	control_t* control = tlsf_cast(control_t*, tlsf);
	const size_t adjust = adjust_request_size(size, ALIGN_SIZE);
	block_header_t* block = block_locate_free(control, adjust);
 8018dbc:	4621      	mov	r1, r4
 8018dbe:	4630      	mov	r0, r6
 8018dc0:	f7ff fec4 	bl	8018b4c <block_locate_free>
	if (block)
 8018dc4:	4605      	mov	r5, r0
 8018dc6:	b168      	cbz	r0, 8018de4 <tlsf_malloc+0x42>
		tlsf_assert(size && "size must be non-zero");
 8018dc8:	b91c      	cbnz	r4, 8018dd2 <tlsf_malloc+0x30>
 8018dca:	f7ff fe1f 	bl	8018a0c <block_prepare_used.part.0>
	size_t adjust = 0;
 8018dce:	2400      	movs	r4, #0
 8018dd0:	e7f4      	b.n	8018dbc <tlsf_malloc+0x1a>
		block_trim_free(control, block, size);
 8018dd2:	4601      	mov	r1, r0
 8018dd4:	4622      	mov	r2, r4
 8018dd6:	4630      	mov	r0, r6
 8018dd8:	f7ff fe7a 	bl	8018ad0 <block_trim_free>
		block_mark_as_used(block);
 8018ddc:	4628      	mov	r0, r5
	return tlsf_cast(void*,
 8018dde:	3508      	adds	r5, #8
		block_mark_as_used(block);
 8018de0:	f7ff fdc2 	bl	8018968 <block_mark_as_used>
	return block_prepare_used(control, block, adjust);
}
 8018de4:	4628      	mov	r0, r5
 8018de6:	bd70      	pop	{r4, r5, r6, pc}

08018de8 <tlsf_free>:

	return block_prepare_used(control, block, adjust);
}

void tlsf_free(tlsf_t tlsf, void* ptr)
{
 8018de8:	b570      	push	{r4, r5, r6, lr}
 8018dea:	4606      	mov	r6, r0
	/* Don't attempt to free a NULL pointer. */
	if (ptr)
 8018dec:	460d      	mov	r5, r1
 8018dee:	2900      	cmp	r1, #0
 8018df0:	d049      	beq.n	8018e86 <tlsf_free+0x9e>
	return tlsf_cast(int, block->size & block_header_free_bit);
 8018df2:	f851 3c04 	ldr.w	r3, [r1, #-4]
	return tlsf_cast(block_header_t*,
 8018df6:	f1a1 0408 	sub.w	r4, r1, #8
	{
		control_t* control = tlsf_cast(control_t*, tlsf);
		block_header_t* block = block_from_ptr(ptr);
		tlsf_assert(!block_is_free(block) && "block already marked as free");
 8018dfa:	07d9      	lsls	r1, r3, #31
 8018dfc:	d506      	bpl.n	8018e0c <tlsf_free+0x24>
 8018dfe:	4b22      	ldr	r3, [pc, #136]	; (8018e88 <tlsf_free+0xa0>)
 8018e00:	f240 41b7 	movw	r1, #1207	; 0x4b7
 8018e04:	4a21      	ldr	r2, [pc, #132]	; (8018e8c <tlsf_free+0xa4>)
		tlsf_assert(prev && "prev physical block can't be null");
 8018e06:	4822      	ldr	r0, [pc, #136]	; (8018e90 <tlsf_free+0xa8>)
 8018e08:	f009 fb88 	bl	802251c <__assert_func>
	block_header_t* next = block_link_next(block);
 8018e0c:	4620      	mov	r0, r4
 8018e0e:	f7ff fd5b 	bl	80188c8 <block_link_next>
	block->size |= block_header_prev_free_bit;
 8018e12:	6843      	ldr	r3, [r0, #4]
 8018e14:	f043 0302 	orr.w	r3, r3, #2
 8018e18:	6043      	str	r3, [r0, #4]
	block->size |= block_header_free_bit;
 8018e1a:	f855 3c04 	ldr.w	r3, [r5, #-4]
 8018e1e:	f043 0301 	orr.w	r3, r3, #1
	if (block_is_prev_free(block))
 8018e22:	079a      	lsls	r2, r3, #30
	block->size |= block_header_free_bit;
 8018e24:	f845 3c04 	str.w	r3, [r5, #-4]
	if (block_is_prev_free(block))
 8018e28:	d523      	bpl.n	8018e72 <tlsf_free+0x8a>
	return block->prev_phys_block;
 8018e2a:	f855 4c08 	ldr.w	r4, [r5, #-8]
		tlsf_assert(prev && "prev physical block can't be null");
 8018e2e:	b924      	cbnz	r4, 8018e3a <tlsf_free+0x52>
 8018e30:	4b18      	ldr	r3, [pc, #96]	; (8018e94 <tlsf_free+0xac>)
 8018e32:	f44f 7130 	mov.w	r1, #704	; 0x2c0
 8018e36:	4a18      	ldr	r2, [pc, #96]	; (8018e98 <tlsf_free+0xb0>)
 8018e38:	e7e5      	b.n	8018e06 <tlsf_free+0x1e>
	return tlsf_cast(int, block->size & block_header_free_bit);
 8018e3a:	6863      	ldr	r3, [r4, #4]
		tlsf_assert(block_is_free(prev) && "prev block is not free though marked as such");
 8018e3c:	07db      	lsls	r3, r3, #31
 8018e3e:	d404      	bmi.n	8018e4a <tlsf_free+0x62>
 8018e40:	4b16      	ldr	r3, [pc, #88]	; (8018e9c <tlsf_free+0xb4>)
 8018e42:	f240 21c1 	movw	r1, #705	; 0x2c1
 8018e46:	4a14      	ldr	r2, [pc, #80]	; (8018e98 <tlsf_free+0xb0>)
 8018e48:	e7dd      	b.n	8018e06 <tlsf_free+0x1e>
		block_remove(control, prev);
 8018e4a:	4621      	mov	r1, r4
 8018e4c:	4630      	mov	r0, r6
 8018e4e:	f7ff fe6b 	bl	8018b28 <block_remove>
	return block_size(block) == 0;
 8018e52:	6862      	ldr	r2, [r4, #4]
	tlsf_assert(!block_is_last(prev) && "previous block can't be last");
 8018e54:	f032 0303 	bics.w	r3, r2, #3
 8018e58:	d101      	bne.n	8018e5e <tlsf_free+0x76>
 8018e5a:	f7ff fdc9 	bl	80189f0 <block_absorb.part.0>
	return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8018e5e:	f855 3c04 	ldr.w	r3, [r5, #-4]
	block_link_next(prev);
 8018e62:	4620      	mov	r0, r4
	return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8018e64:	f023 0303 	bic.w	r3, r3, #3
	prev->size += block_size(block) + block_header_overhead;
 8018e68:	4413      	add	r3, r2
 8018e6a:	3304      	adds	r3, #4
 8018e6c:	6063      	str	r3, [r4, #4]
	block_link_next(prev);
 8018e6e:	f7ff fd2b 	bl	80188c8 <block_link_next>
		block_mark_as_free(block);
		block = block_merge_prev(control, block);
		block = block_merge_next(control, block);
 8018e72:	4621      	mov	r1, r4
 8018e74:	4630      	mov	r0, r6
 8018e76:	f7ff fef3 	bl	8018c60 <block_merge_next>
 8018e7a:	4601      	mov	r1, r0
		block_insert(control, block);
 8018e7c:	4630      	mov	r0, r6
	}
}
 8018e7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		block_insert(control, block);
 8018e82:	f7ff bde5 	b.w	8018a50 <block_insert>
}
 8018e86:	bd70      	pop	{r4, r5, r6, pc}
 8018e88:	08029221 	.word	0x08029221
 8018e8c:	080293c7 	.word	0x080293c7
 8018e90:	08028ea4 	.word	0x08028ea4
 8018e94:	08029259 	.word	0x08029259
 8018e98:	08029360 	.word	0x08029360
 8018e9c:	08029285 	.word	0x08029285

08018ea0 <tlsf_realloc>:
**   untouched
** - an extended buffer size will leave the newly-allocated area with
**   contents undefined
*/
void* tlsf_realloc(tlsf_t tlsf, void* ptr, size_t size)
{
 8018ea0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ea4:	4607      	mov	r7, r0
 8018ea6:	4615      	mov	r5, r2
	control_t* control = tlsf_cast(control_t*, tlsf);
	void* p = 0;

	/* Zero-size requests are treated as free. */
	if (ptr && size == 0)
 8018ea8:	460c      	mov	r4, r1
 8018eaa:	b131      	cbz	r1, 8018eba <tlsf_realloc+0x1a>
 8018eac:	b952      	cbnz	r2, 8018ec4 <tlsf_realloc+0x24>
	void* p = 0;
 8018eae:	462e      	mov	r6, r5
	{
		tlsf_free(tlsf, ptr);
 8018eb0:	f7ff ff9a 	bl	8018de8 <tlsf_free>
			p = ptr;
		}
	}

	return p;
}
 8018eb4:	4630      	mov	r0, r6
 8018eb6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		p = tlsf_malloc(tlsf, size);
 8018eba:	4611      	mov	r1, r2
}
 8018ebc:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		p = tlsf_malloc(tlsf, size);
 8018ec0:	f7ff bf6f 	b.w	8018da2 <tlsf_malloc>
	return tlsf_cast(block_header_t*,
 8018ec4:	f1a1 0908 	sub.w	r9, r1, #8
		block_header_t* next = block_next(block);
 8018ec8:	4648      	mov	r0, r9
 8018eca:	f7ff fce7 	bl	801889c <block_next>
		const size_t cursize = block_size(block);
 8018ece:	f854 bc04 	ldr.w	fp, [r4, #-4]
		block_header_t* next = block_next(block);
 8018ed2:	4682      	mov	sl, r0
		const size_t adjust = adjust_request_size(size, ALIGN_SIZE);
 8018ed4:	2104      	movs	r1, #4
 8018ed6:	4628      	mov	r0, r5
	return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8018ed8:	f02b 0803 	bic.w	r8, fp, #3
		const size_t adjust = adjust_request_size(size, ALIGN_SIZE);
 8018edc:	f7ff fe9e 	bl	8018c1c <adjust_request_size>
		tlsf_assert(!block_is_free(block) && "block already marked as free");
 8018ee0:	f01b 0f01 	tst.w	fp, #1
		const size_t adjust = adjust_request_size(size, ALIGN_SIZE);
 8018ee4:	4606      	mov	r6, r0
		tlsf_assert(!block_is_free(block) && "block already marked as free");
 8018ee6:	d006      	beq.n	8018ef6 <tlsf_realloc+0x56>
 8018ee8:	4b27      	ldr	r3, [pc, #156]	; (8018f88 <tlsf_realloc+0xe8>)
 8018eea:	f240 41e4 	movw	r1, #1252	; 0x4e4
 8018eee:	4a27      	ldr	r2, [pc, #156]	; (8018f8c <tlsf_realloc+0xec>)
	tlsf_assert(!block_is_free(block) && "block must be used");
 8018ef0:	4827      	ldr	r0, [pc, #156]	; (8018f90 <tlsf_realloc+0xf0>)
 8018ef2:	f009 fb13 	bl	802251c <__assert_func>
		if (adjust > cursize && (!block_is_free(next) || adjust > combined))
 8018ef6:	4580      	cmp	r8, r0
 8018ef8:	d224      	bcs.n	8018f44 <tlsf_realloc+0xa4>
		const size_t combined = cursize + block_size(next) + block_header_overhead;
 8018efa:	f8da 3004 	ldr.w	r3, [sl, #4]
		if (adjust > cursize && (!block_is_free(next) || adjust > combined))
 8018efe:	07d9      	lsls	r1, r3, #31
 8018f00:	d506      	bpl.n	8018f10 <tlsf_realloc+0x70>
	return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8018f02:	f023 0303 	bic.w	r3, r3, #3
		const size_t combined = cursize + block_size(next) + block_header_overhead;
 8018f06:	f108 0204 	add.w	r2, r8, #4
 8018f0a:	4413      	add	r3, r2
		if (adjust > cursize && (!block_is_free(next) || adjust > combined))
 8018f0c:	4283      	cmp	r3, r0
 8018f0e:	d212      	bcs.n	8018f36 <tlsf_realloc+0x96>
			p = tlsf_malloc(tlsf, size);
 8018f10:	4629      	mov	r1, r5
 8018f12:	4638      	mov	r0, r7
 8018f14:	f7ff ff45 	bl	8018da2 <tlsf_malloc>
			if (p)
 8018f18:	4606      	mov	r6, r0
 8018f1a:	2800      	cmp	r0, #0
 8018f1c:	d0ca      	beq.n	8018eb4 <tlsf_realloc+0x14>
				lv_memcpy(p, ptr, minsize);
 8018f1e:	4545      	cmp	r5, r8
 8018f20:	462a      	mov	r2, r5
 8018f22:	4621      	mov	r1, r4
 8018f24:	bf28      	it	cs
 8018f26:	4642      	movcs	r2, r8
 8018f28:	f7fe fc3e 	bl	80177a8 <lv_memcpy>
				tlsf_free(tlsf, ptr);
 8018f2c:	4621      	mov	r1, r4
 8018f2e:	4638      	mov	r0, r7
 8018f30:	f7ff ff5a 	bl	8018de8 <tlsf_free>
 8018f34:	e7be      	b.n	8018eb4 <tlsf_realloc+0x14>
				block_merge_next(control, block);
 8018f36:	4649      	mov	r1, r9
 8018f38:	4638      	mov	r0, r7
 8018f3a:	f7ff fe91 	bl	8018c60 <block_merge_next>
				block_mark_as_used(block);
 8018f3e:	4648      	mov	r0, r9
 8018f40:	f7ff fd12 	bl	8018968 <block_mark_as_used>
	tlsf_assert(!block_is_free(block) && "block must be used");
 8018f44:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8018f48:	07da      	lsls	r2, r3, #31
 8018f4a:	d504      	bpl.n	8018f56 <tlsf_realloc+0xb6>
 8018f4c:	4b11      	ldr	r3, [pc, #68]	; (8018f94 <tlsf_realloc+0xf4>)
 8018f4e:	f240 21e9 	movw	r1, #745	; 0x2e9
 8018f52:	4a11      	ldr	r2, [pc, #68]	; (8018f98 <tlsf_realloc+0xf8>)
 8018f54:	e7cc      	b.n	8018ef0 <tlsf_realloc+0x50>
	return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8018f56:	f023 0303 	bic.w	r3, r3, #3
	return block_size(block) >= sizeof(block_header_t) + size;
 8018f5a:	f106 0210 	add.w	r2, r6, #16
	if (block_can_split(block, size))
 8018f5e:	4293      	cmp	r3, r2
 8018f60:	d30f      	bcc.n	8018f82 <tlsf_realloc+0xe2>
		block_header_t* remaining_block = block_split(block, size);
 8018f62:	4631      	mov	r1, r6
 8018f64:	4648      	mov	r0, r9
 8018f66:	f7ff fcb5 	bl	80188d4 <block_split>
	block->size &= ~block_header_prev_free_bit;
 8018f6a:	6843      	ldr	r3, [r0, #4]
		block_header_t* remaining_block = block_split(block, size);
 8018f6c:	4601      	mov	r1, r0
	block->size &= ~block_header_prev_free_bit;
 8018f6e:	f023 0302 	bic.w	r3, r3, #2
 8018f72:	6043      	str	r3, [r0, #4]
		remaining_block = block_merge_next(control, remaining_block);
 8018f74:	4638      	mov	r0, r7
 8018f76:	f7ff fe73 	bl	8018c60 <block_merge_next>
 8018f7a:	4601      	mov	r1, r0
		block_insert(control, remaining_block);
 8018f7c:	4638      	mov	r0, r7
 8018f7e:	f7ff fd67 	bl	8018a50 <block_insert>
 8018f82:	4626      	mov	r6, r4
	return p;
 8018f84:	e796      	b.n	8018eb4 <tlsf_realloc+0x14>
 8018f86:	bf00      	nop
 8018f88:	08029221 	.word	0x08029221
 8018f8c:	080293d1 	.word	0x080293d1
 8018f90:	08028ea4 	.word	0x08028ea4
 8018f94:	080292cb 	.word	0x080292cb
 8018f98:	08029392 	.word	0x08029392

08018f9c <lv_txt_utf8_size>:
 * @param str pointer to a character in a string
 * @return length of the UTF-8 character (1,2,3 or 4). O on invalid code
 */
static uint8_t lv_txt_utf8_size(const char * str)
{
    if((str[0] & 0x80) == 0)
 8018f9c:	f990 2000 	ldrsb.w	r2, [r0]
 8018fa0:	7803      	ldrb	r3, [r0, #0]
 8018fa2:	2a00      	cmp	r2, #0
 8018fa4:	da0e      	bge.n	8018fc4 <lv_txt_utf8_size+0x28>
        return 1;
    else if((str[0] & 0xE0) == 0xC0)
 8018fa6:	f003 02e0 	and.w	r2, r3, #224	; 0xe0
 8018faa:	2ac0      	cmp	r2, #192	; 0xc0
 8018fac:	d00c      	beq.n	8018fc8 <lv_txt_utf8_size+0x2c>
        return 2;
    else if((str[0] & 0xF0) == 0xE0)
 8018fae:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8018fb2:	2ae0      	cmp	r2, #224	; 0xe0
 8018fb4:	d00a      	beq.n	8018fcc <lv_txt_utf8_size+0x30>
        return 3;
    else if((str[0] & 0xF8) == 0xF0)
 8018fb6:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8018fba:	2bf0      	cmp	r3, #240	; 0xf0
        return 4;
 8018fbc:	bf14      	ite	ne
 8018fbe:	2000      	movne	r0, #0
 8018fc0:	2004      	moveq	r0, #4
 8018fc2:	4770      	bx	lr
        return 1;
 8018fc4:	2001      	movs	r0, #1
 8018fc6:	4770      	bx	lr
        return 2;
 8018fc8:	2002      	movs	r0, #2
 8018fca:	4770      	bx	lr
        return 3;
 8018fcc:	2003      	movs	r0, #3
    return 0; /*If the char was invalid tell it's 1 byte long*/
}
 8018fce:	4770      	bx	lr

08018fd0 <lv_txt_utf8_next>:
     */

    uint32_t result = 0;

    /*Dummy 'i' pointer is required*/
    uint32_t i_tmp = 0;
 8018fd0:	2300      	movs	r3, #0
{
 8018fd2:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint32_t i_tmp = 0;
 8018fd4:	9301      	str	r3, [sp, #4]
    if(i == NULL) i = &i_tmp;
 8018fd6:	b901      	cbnz	r1, 8018fda <lv_txt_utf8_next+0xa>
 8018fd8:	a901      	add	r1, sp, #4

    /*Normal ASCII*/
    if((txt[*i] & 0x80) == 0) {
 8018fda:	680a      	ldr	r2, [r1, #0]
 8018fdc:	5685      	ldrsb	r5, [r0, r2]
 8018fde:	1c54      	adds	r4, r2, #1
 8018fe0:	5c83      	ldrb	r3, [r0, r2]
 8018fe2:	2d00      	cmp	r5, #0
 8018fe4:	db03      	blt.n	8018fee <lv_txt_utf8_next+0x1e>
        result = txt[*i];
 8018fe6:	4618      	mov	r0, r3
        (*i)++;
 8018fe8:	600c      	str	r4, [r1, #0]
        else {
            (*i)++; /*Not UTF-8 char. Go the next.*/
        }
    }
    return result;
}
 8018fea:	b002      	add	sp, #8
 8018fec:	bd70      	pop	{r4, r5, r6, pc}
        if((txt[*i] & 0xE0) == 0xC0) {
 8018fee:	f003 05e0 	and.w	r5, r3, #224	; 0xe0
 8018ff2:	2dc0      	cmp	r5, #192	; 0xc0
 8018ff4:	d110      	bne.n	8019018 <lv_txt_utf8_next+0x48>
            (*i)++;
 8018ff6:	600c      	str	r4, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 8018ff8:	5d00      	ldrb	r0, [r0, r4]
 8018ffa:	f000 04c0 	and.w	r4, r0, #192	; 0xc0
 8018ffe:	2c80      	cmp	r4, #128	; 0x80
 8019000:	d001      	beq.n	8019006 <lv_txt_utf8_next+0x36>
    uint32_t result = 0;
 8019002:	2000      	movs	r0, #0
 8019004:	e7f1      	b.n	8018fea <lv_txt_utf8_next+0x1a>
            result = (uint32_t)(txt[*i] & 0x1F) << 6;
 8019006:	019b      	lsls	r3, r3, #6
            result += (txt[*i] & 0x3F);
 8019008:	f000 003f 	and.w	r0, r0, #63	; 0x3f
            (*i)++;
 801900c:	3202      	adds	r2, #2
            result = (uint32_t)(txt[*i] & 0x1F) << 6;
 801900e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
            result += (txt[*i] & 0x3F);
 8019012:	4418      	add	r0, r3
            (*i)++;
 8019014:	600a      	str	r2, [r1, #0]
 8019016:	e7e8      	b.n	8018fea <lv_txt_utf8_next+0x1a>
        else if((txt[*i] & 0xF0) == 0xE0) {
 8019018:	f003 05f0 	and.w	r5, r3, #240	; 0xf0
 801901c:	2de0      	cmp	r5, #224	; 0xe0
 801901e:	d117      	bne.n	8019050 <lv_txt_utf8_next+0x80>
            (*i)++;
 8019020:	600c      	str	r4, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 8019022:	5d04      	ldrb	r4, [r0, r4]
 8019024:	f004 05c0 	and.w	r5, r4, #192	; 0xc0
 8019028:	2d80      	cmp	r5, #128	; 0x80
 801902a:	d1ea      	bne.n	8019002 <lv_txt_utf8_next+0x32>
            (*i)++;
 801902c:	1c95      	adds	r5, r2, #2
 801902e:	600d      	str	r5, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 8019030:	5d45      	ldrb	r5, [r0, r5]
 8019032:	f005 00c0 	and.w	r0, r5, #192	; 0xc0
 8019036:	2880      	cmp	r0, #128	; 0x80
 8019038:	d1e3      	bne.n	8019002 <lv_txt_utf8_next+0x32>
            result = (uint32_t)(txt[*i] & 0x0F) << 12;
 801903a:	0318      	lsls	r0, r3, #12
            result += (txt[*i] & 0x3F);
 801903c:	f005 053f 	and.w	r5, r5, #63	; 0x3f
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
 8019040:	01a3      	lsls	r3, r4, #6
            (*i)++;
 8019042:	3203      	adds	r2, #3
            result = (uint32_t)(txt[*i] & 0x0F) << 12;
 8019044:	b280      	uxth	r0, r0
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
 8019046:	f403 637c 	and.w	r3, r3, #4032	; 0xfc0
 801904a:	4428      	add	r0, r5
            result += (txt[*i] & 0x3F);
 801904c:	4418      	add	r0, r3
            (*i)++;
 801904e:	e7e1      	b.n	8019014 <lv_txt_utf8_next+0x44>
        else if((txt[*i] & 0xF8) == 0xF0) {
 8019050:	f003 05f8 	and.w	r5, r3, #248	; 0xf8
            (*i)++;
 8019054:	600c      	str	r4, [r1, #0]
        else if((txt[*i] & 0xF8) == 0xF0) {
 8019056:	2df0      	cmp	r5, #240	; 0xf0
 8019058:	d1d3      	bne.n	8019002 <lv_txt_utf8_next+0x32>
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 801905a:	5d04      	ldrb	r4, [r0, r4]
 801905c:	f004 05c0 	and.w	r5, r4, #192	; 0xc0
 8019060:	2d80      	cmp	r5, #128	; 0x80
 8019062:	d1ce      	bne.n	8019002 <lv_txt_utf8_next+0x32>
            (*i)++;
 8019064:	1c95      	adds	r5, r2, #2
 8019066:	600d      	str	r5, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 8019068:	5d45      	ldrb	r5, [r0, r5]
 801906a:	f005 06c0 	and.w	r6, r5, #192	; 0xc0
 801906e:	2e80      	cmp	r6, #128	; 0x80
 8019070:	d1c7      	bne.n	8019002 <lv_txt_utf8_next+0x32>
            (*i)++;
 8019072:	1cd6      	adds	r6, r2, #3
 8019074:	600e      	str	r6, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 8019076:	5d86      	ldrb	r6, [r0, r6]
 8019078:	f006 00c0 	and.w	r0, r6, #192	; 0xc0
 801907c:	2880      	cmp	r0, #128	; 0x80
 801907e:	d1c0      	bne.n	8019002 <lv_txt_utf8_next+0x32>
            result = (uint32_t)(txt[*i] & 0x07) << 18;
 8019080:	049b      	lsls	r3, r3, #18
            result += txt[*i] & 0x3F;
 8019082:	f006 063f 	and.w	r6, r6, #63	; 0x3f
            result += (uint32_t)(txt[*i] & 0x3F) << 12;
 8019086:	0320      	lsls	r0, r4, #12
            (*i)++;
 8019088:	3204      	adds	r2, #4
            result = (uint32_t)(txt[*i] & 0x07) << 18;
 801908a:	f403 13e0 	and.w	r3, r3, #1835008	; 0x1c0000
            result += (uint32_t)(txt[*i] & 0x3F) << 12;
 801908e:	f400 307c 	and.w	r0, r0, #258048	; 0x3f000
 8019092:	4303      	orrs	r3, r0
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
 8019094:	01a8      	lsls	r0, r5, #6
 8019096:	f400 607c 	and.w	r0, r0, #4032	; 0xfc0
            result += txt[*i] & 0x3F;
 801909a:	4430      	add	r0, r6
 801909c:	4418      	add	r0, r3
            (*i)++;
 801909e:	e7b9      	b.n	8019014 <lv_txt_utf8_next+0x44>

080190a0 <lv_txt_utf8_get_byte_id>:
 * @param txt a '\0' terminated UTF-8 string
 * @param utf8_id character index
 * @return byte index of the 'utf8_id'th letter
 */
static uint32_t lv_txt_utf8_get_byte_id(const char * txt, uint32_t utf8_id)
{
 80190a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t i;
    uint32_t byte_cnt = 0;
 80190a4:	2400      	movs	r4, #0
{
 80190a6:	4605      	mov	r5, r0
 80190a8:	460f      	mov	r7, r1
    for(i = 0; i < utf8_id && txt[byte_cnt] != '\0'; i++) {
        uint8_t c_size = _lv_txt_encoded_size(&txt[byte_cnt]);
 80190aa:	f8df 8028 	ldr.w	r8, [pc, #40]	; 80190d4 <lv_txt_utf8_get_byte_id+0x34>
    for(i = 0; i < utf8_id && txt[byte_cnt] != '\0'; i++) {
 80190ae:	4626      	mov	r6, r4
 80190b0:	42be      	cmp	r6, r7
 80190b2:	d002      	beq.n	80190ba <lv_txt_utf8_get_byte_id+0x1a>
 80190b4:	5d2b      	ldrb	r3, [r5, r4]
 80190b6:	1928      	adds	r0, r5, r4
 80190b8:	b913      	cbnz	r3, 80190c0 <lv_txt_utf8_get_byte_id+0x20>
        byte_cnt += c_size > 0 ? c_size : 1;
    }

    return byte_cnt;
}
 80190ba:	4620      	mov	r0, r4
 80190bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        uint8_t c_size = _lv_txt_encoded_size(&txt[byte_cnt]);
 80190c0:	f8d8 3000 	ldr.w	r3, [r8]
    for(i = 0; i < utf8_id && txt[byte_cnt] != '\0'; i++) {
 80190c4:	3601      	adds	r6, #1
        uint8_t c_size = _lv_txt_encoded_size(&txt[byte_cnt]);
 80190c6:	4798      	blx	r3
        byte_cnt += c_size > 0 ? c_size : 1;
 80190c8:	2801      	cmp	r0, #1
 80190ca:	bf38      	it	cc
 80190cc:	2001      	movcc	r0, #1
 80190ce:	fa54 f480 	uxtab	r4, r4, r0
    for(i = 0; i < utf8_id && txt[byte_cnt] != '\0'; i++) {
 80190d2:	e7ed      	b.n	80190b0 <lv_txt_utf8_get_byte_id+0x10>
 80190d4:	20000048 	.word	0x20000048

080190d8 <lv_txt_utf8_get_char_id>:
 * @param txt a '\0' terminated UTF-8 string
 * @param byte_id byte index
 * @return character index of the letter at 'byte_id'th position
 */
static uint32_t lv_txt_utf8_get_char_id(const char * txt, uint32_t byte_id)
{
 80190d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    uint32_t i        = 0;
 80190da:	2400      	movs	r4, #0
{
 80190dc:	4606      	mov	r6, r0
 80190de:	460d      	mov	r5, r1
    uint32_t char_cnt = 0;

    while(i < byte_id) {
        _lv_txt_encoded_next(txt, &i); /*'i' points to the next letter so use the prev. value*/
 80190e0:	4f06      	ldr	r7, [pc, #24]	; (80190fc <lv_txt_utf8_get_char_id+0x24>)
    uint32_t i        = 0;
 80190e2:	9401      	str	r4, [sp, #4]
    while(i < byte_id) {
 80190e4:	9b01      	ldr	r3, [sp, #4]
 80190e6:	42ab      	cmp	r3, r5
 80190e8:	d302      	bcc.n	80190f0 <lv_txt_utf8_get_char_id+0x18>
        char_cnt++;
    }

    return char_cnt;
}
 80190ea:	4620      	mov	r0, r4
 80190ec:	b003      	add	sp, #12
 80190ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
        _lv_txt_encoded_next(txt, &i); /*'i' points to the next letter so use the prev. value*/
 80190f0:	683b      	ldr	r3, [r7, #0]
 80190f2:	a901      	add	r1, sp, #4
 80190f4:	4630      	mov	r0, r6
        char_cnt++;
 80190f6:	3401      	adds	r4, #1
        _lv_txt_encoded_next(txt, &i); /*'i' points to the next letter so use the prev. value*/
 80190f8:	4798      	blx	r3
        char_cnt++;
 80190fa:	e7f3      	b.n	80190e4 <lv_txt_utf8_get_char_id+0xc>
 80190fc:	20000040 	.word	0x20000040

08019100 <lv_txt_utf8_get_length>:
 * E.g.: "ÁBC" is 3 characters (but 4 bytes)
 * @param txt a '\0' terminated char string
 * @return number of characters
 */
static uint32_t lv_txt_utf8_get_length(const char * txt)
{
 8019100:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint32_t len = 0;
    uint32_t i   = 0;
 8019102:	2400      	movs	r4, #0
{
 8019104:	4605      	mov	r5, r0

    while(txt[i] != '\0') {
        _lv_txt_encoded_next(txt, &i);
 8019106:	4e07      	ldr	r6, [pc, #28]	; (8019124 <lv_txt_utf8_get_length+0x24>)
    uint32_t i   = 0;
 8019108:	9401      	str	r4, [sp, #4]
    while(txt[i] != '\0') {
 801910a:	9b01      	ldr	r3, [sp, #4]
 801910c:	5ceb      	ldrb	r3, [r5, r3]
 801910e:	b913      	cbnz	r3, 8019116 <lv_txt_utf8_get_length+0x16>
        len++;
    }

    return len;
}
 8019110:	4620      	mov	r0, r4
 8019112:	b002      	add	sp, #8
 8019114:	bd70      	pop	{r4, r5, r6, pc}
        _lv_txt_encoded_next(txt, &i);
 8019116:	6833      	ldr	r3, [r6, #0]
 8019118:	a901      	add	r1, sp, #4
 801911a:	4628      	mov	r0, r5
        len++;
 801911c:	3401      	adds	r4, #1
        _lv_txt_encoded_next(txt, &i);
 801911e:	4798      	blx	r3
        len++;
 8019120:	e7f3      	b.n	801910a <lv_txt_utf8_get_length+0xa>
 8019122:	bf00      	nop
 8019124:	20000040 	.word	0x20000040

08019128 <lv_txt_unicode_to_utf8>:
    if(letter_uni < 128) return letter_uni;
 8019128:	287f      	cmp	r0, #127	; 0x7f
{
 801912a:	b082      	sub	sp, #8
    if(letter_uni < 128) return letter_uni;
 801912c:	d911      	bls.n	8019152 <lv_txt_unicode_to_utf8+0x2a>
    if(letter_uni < 0x0800) {
 801912e:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8019132:	d210      	bcs.n	8019156 <lv_txt_unicode_to_utf8+0x2e>
        bytes[0] = ((letter_uni >> 6) & 0x1F) | 0xC0;
 8019134:	0983      	lsrs	r3, r0, #6
        bytes[1] = ((letter_uni >> 0) & 0x3F) | 0x80;
 8019136:	f000 003f 	and.w	r0, r0, #63	; 0x3f
        bytes[0] = ((letter_uni >> 6) & 0x1F) | 0xC0;
 801913a:	f063 033f 	orn	r3, r3, #63	; 0x3f
        bytes[1] = ((letter_uni >> 0) & 0x3F) | 0x80;
 801913e:	f060 007f 	orn	r0, r0, #127	; 0x7f
        bytes[0] = ((letter_uni >> 6) & 0x1F) | 0xC0;
 8019142:	f88d 3004 	strb.w	r3, [sp, #4]
        bytes[2] = 0;
 8019146:	2300      	movs	r3, #0
        bytes[1] = ((letter_uni >> 0) & 0x3F) | 0x80;
 8019148:	f88d 0005 	strb.w	r0, [sp, #5]
        bytes[2] = 0;
 801914c:	f8ad 3006 	strh.w	r3, [sp, #6]
    return *res_p;
 8019150:	9801      	ldr	r0, [sp, #4]
}
 8019152:	b002      	add	sp, #8
 8019154:	4770      	bx	lr
    else if(letter_uni < 0x010000) {
 8019156:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 801915a:	d214      	bcs.n	8019186 <lv_txt_unicode_to_utf8+0x5e>
        bytes[0] = ((letter_uni >> 12) & 0x0F) | 0xE0;
 801915c:	0b03      	lsrs	r3, r0, #12
 801915e:	f063 031f 	orn	r3, r3, #31
 8019162:	f88d 3004 	strb.w	r3, [sp, #4]
        bytes[1] = ((letter_uni >> 6) & 0x3F) | 0x80;
 8019166:	f3c0 1385 	ubfx	r3, r0, #6, #6
        bytes[2] = ((letter_uni >> 0) & 0x3F) | 0x80;
 801916a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
        bytes[1] = ((letter_uni >> 6) & 0x3F) | 0x80;
 801916e:	f063 037f 	orn	r3, r3, #127	; 0x7f
        bytes[2] = ((letter_uni >> 0) & 0x3F) | 0x80;
 8019172:	f060 007f 	orn	r0, r0, #127	; 0x7f
        bytes[1] = ((letter_uni >> 6) & 0x3F) | 0x80;
 8019176:	f88d 3005 	strb.w	r3, [sp, #5]
        bytes[3] = 0;
 801917a:	2300      	movs	r3, #0
        bytes[2] = ((letter_uni >> 0) & 0x3F) | 0x80;
 801917c:	f88d 0006 	strb.w	r0, [sp, #6]
        bytes[3] = 0;
 8019180:	f88d 3007 	strb.w	r3, [sp, #7]
 8019184:	e7e4      	b.n	8019150 <lv_txt_unicode_to_utf8+0x28>
    else if(letter_uni < 0x110000) {
 8019186:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
 801918a:	d2e1      	bcs.n	8019150 <lv_txt_unicode_to_utf8+0x28>
        bytes[0] = ((letter_uni >> 18) & 0x07) | 0xF0;
 801918c:	0c83      	lsrs	r3, r0, #18
 801918e:	f063 030f 	orn	r3, r3, #15
 8019192:	f88d 3004 	strb.w	r3, [sp, #4]
        bytes[1] = ((letter_uni >> 12) & 0x3F) | 0x80;
 8019196:	f3c0 3305 	ubfx	r3, r0, #12, #6
 801919a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801919e:	f88d 3005 	strb.w	r3, [sp, #5]
        bytes[2] = ((letter_uni >> 6) & 0x3F) | 0x80;
 80191a2:	f3c0 1385 	ubfx	r3, r0, #6, #6
        bytes[3] = ((letter_uni >> 0) & 0x3F) | 0x80;
 80191a6:	f000 003f 	and.w	r0, r0, #63	; 0x3f
        bytes[2] = ((letter_uni >> 6) & 0x3F) | 0x80;
 80191aa:	f063 037f 	orn	r3, r3, #127	; 0x7f
        bytes[3] = ((letter_uni >> 0) & 0x3F) | 0x80;
 80191ae:	f060 007f 	orn	r0, r0, #127	; 0x7f
        bytes[2] = ((letter_uni >> 6) & 0x3F) | 0x80;
 80191b2:	f88d 3006 	strb.w	r3, [sp, #6]
        bytes[3] = ((letter_uni >> 0) & 0x3F) | 0x80;
 80191b6:	f88d 0007 	strb.w	r0, [sp, #7]
 80191ba:	e7c9      	b.n	8019150 <lv_txt_unicode_to_utf8+0x28>

080191bc <lv_txt_utf8_prev>:
    (*i)--;
 80191bc:	680b      	ldr	r3, [r1, #0]
{
 80191be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    (*i)--;
 80191c0:	3b01      	subs	r3, #1
{
 80191c2:	4606      	mov	r6, r0
 80191c4:	460c      	mov	r4, r1
    (*i)--;
 80191c6:	2504      	movs	r5, #4
        c_size = _lv_txt_encoded_size(&txt[*i]);
 80191c8:	4f0c      	ldr	r7, [pc, #48]	; (80191fc <lv_txt_utf8_prev+0x40>)
    (*i)--;
 80191ca:	600b      	str	r3, [r1, #0]
        c_size = _lv_txt_encoded_size(&txt[*i]);
 80191cc:	6820      	ldr	r0, [r4, #0]
 80191ce:	683b      	ldr	r3, [r7, #0]
 80191d0:	4430      	add	r0, r6
 80191d2:	4798      	blx	r3
        if(c_size == 0) {
 80191d4:	6823      	ldr	r3, [r4, #0]
 80191d6:	b948      	cbnz	r0, 80191ec <lv_txt_utf8_prev+0x30>
            if(*i != 0)
 80191d8:	b12b      	cbz	r3, 80191e6 <lv_txt_utf8_prev+0x2a>
                (*i)--;
 80191da:	3d01      	subs	r5, #1
 80191dc:	3b01      	subs	r3, #1
        if(cnt >= 4) return 0; /*No UTF-8 char found before the initial*/
 80191de:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
                (*i)--;
 80191e2:	6023      	str	r3, [r4, #0]
        if(cnt >= 4) return 0; /*No UTF-8 char found before the initial*/
 80191e4:	d1f2      	bne.n	80191cc <lv_txt_utf8_prev+0x10>
 80191e6:	2000      	movs	r0, #0
}
 80191e8:	b003      	add	sp, #12
 80191ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint32_t i_tmp  = *i;
 80191ec:	9301      	str	r3, [sp, #4]
    uint32_t letter = _lv_txt_encoded_next(txt, &i_tmp); /*Character found, get it*/
 80191ee:	a901      	add	r1, sp, #4
 80191f0:	4b03      	ldr	r3, [pc, #12]	; (8019200 <lv_txt_utf8_prev+0x44>)
 80191f2:	4630      	mov	r0, r6
 80191f4:	681b      	ldr	r3, [r3, #0]
 80191f6:	4798      	blx	r3
    return letter;
 80191f8:	e7f6      	b.n	80191e8 <lv_txt_utf8_prev+0x2c>
 80191fa:	bf00      	nop
 80191fc:	20000048 	.word	0x20000048
 8019200:	20000040 	.word	0x20000040

08019204 <_lv_txt_is_cmd>:
    if(c == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 8019204:	2923      	cmp	r1, #35	; 0x23
{
 8019206:	4602      	mov	r2, r0
    if(c == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 8019208:	d117      	bne.n	801923a <_lv_txt_is_cmd+0x36>
 801920a:	7803      	ldrb	r3, [r0, #0]
        if(*state == LV_TEXT_CMD_STATE_WAIT) { /*Start char*/
 801920c:	b91b      	cbnz	r3, 8019216 <_lv_txt_is_cmd+0x12>
            *state = LV_TEXT_CMD_STATE_PAR;
 801920e:	2301      	movs	r3, #1
 8019210:	7003      	strb	r3, [r0, #0]
            ret    = true;
 8019212:	2001      	movs	r0, #1
 8019214:	e004      	b.n	8019220 <_lv_txt_is_cmd+0x1c>
        else if(*state == LV_TEXT_CMD_STATE_PAR) {
 8019216:	2b01      	cmp	r3, #1
 8019218:	f04f 0000 	mov.w	r0, #0
 801921c:	d109      	bne.n	8019232 <_lv_txt_is_cmd+0x2e>
            *state = LV_TEXT_CMD_STATE_WAIT;
 801921e:	7010      	strb	r0, [r2, #0]
    if(*state == LV_TEXT_CMD_STATE_PAR) {
 8019220:	7813      	ldrb	r3, [r2, #0]
 8019222:	2b01      	cmp	r3, #1
 8019224:	d104      	bne.n	8019230 <_lv_txt_is_cmd+0x2c>
        if(c == ' ') {
 8019226:	2920      	cmp	r1, #32
        ret = true;
 8019228:	4618      	mov	r0, r3
            *state = LV_TEXT_CMD_STATE_IN; /*After the parameter the text is in the command*/
 801922a:	bf04      	itt	eq
 801922c:	2102      	moveq	r1, #2
 801922e:	7011      	strbeq	r1, [r2, #0]
}
 8019230:	4770      	bx	lr
        else if(*state == LV_TEXT_CMD_STATE_IN) {
 8019232:	2b02      	cmp	r3, #2
 8019234:	d1f4      	bne.n	8019220 <_lv_txt_is_cmd+0x1c>
            *state = LV_TEXT_CMD_STATE_WAIT;
 8019236:	7010      	strb	r0, [r2, #0]
 8019238:	e7eb      	b.n	8019212 <_lv_txt_is_cmd+0xe>
    bool ret = false;
 801923a:	2000      	movs	r0, #0
 801923c:	e7f0      	b.n	8019220 <_lv_txt_is_cmd+0x1c>
	...

08019240 <_lv_txt_get_next_line>:
{
 8019240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019244:	b08f      	sub	sp, #60	; 0x3c
 8019246:	4699      	mov	r9, r3
    if(txt == NULL) return 0;
 8019248:	4607      	mov	r7, r0
{
 801924a:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 801924e:	9102      	str	r1, [sp, #8]
 8019250:	9204      	str	r2, [sp, #16]
 8019252:	9303      	str	r3, [sp, #12]
    if(txt == NULL) return 0;
 8019254:	b190      	cbz	r0, 801927c <_lv_txt_get_next_line+0x3c>
    if(font == NULL) return 0;
 8019256:	2900      	cmp	r1, #0
 8019258:	f000 80cb 	beq.w	80193f2 <_lv_txt_get_next_line+0x1b2>
    if((flag & LV_TEXT_FLAG_EXPAND) || (flag & LV_TEXT_FLAG_FIT)) {
 801925c:	9b03      	ldr	r3, [sp, #12]
 801925e:	f013 0306 	ands.w	r3, r3, #6
 8019262:	d00e      	beq.n	8019282 <_lv_txt_get_next_line+0x42>
        for(i = 0; txt[i] != '\n' && txt[i] != '\r' && txt[i] != '\0'; i++) {
 8019264:	2000      	movs	r0, #0
 8019266:	e000      	b.n	801926a <_lv_txt_get_next_line+0x2a>
 8019268:	3001      	adds	r0, #1
 801926a:	5c3b      	ldrb	r3, [r7, r0]
 801926c:	2b0a      	cmp	r3, #10
 801926e:	f000 80c2 	beq.w	80193f6 <_lv_txt_get_next_line+0x1b6>
 8019272:	2b0d      	cmp	r3, #13
 8019274:	f000 80bf 	beq.w	80193f6 <_lv_txt_get_next_line+0x1b6>
 8019278:	2b00      	cmp	r3, #0
 801927a:	d1f5      	bne.n	8019268 <_lv_txt_get_next_line+0x28>
}
 801927c:	b00f      	add	sp, #60	; 0x3c
 801927e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(flag & LV_TEXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 8019282:	9a03      	ldr	r2, [sp, #12]
    lv_text_cmd_state_t cmd_state = LV_TEXT_CMD_STATE_WAIT;
 8019284:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
    if(flag & LV_TEXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 8019288:	f012 0202 	ands.w	r2, r2, #2
    uint32_t i = 0;                                        /*Iterating index into txt*/
 801928c:	930b      	str	r3, [sp, #44]	; 0x2c
    if(flag & LV_TEXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 801928e:	bf18      	it	ne
 8019290:	f44f 49c0 	movne.w	r9, #24576	; 0x6000
 8019294:	9205      	str	r2, [sp, #20]
    while(txt[i] != '\0' && max_width > 0) {
 8019296:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019298:	eb07 0a03 	add.w	sl, r7, r3
 801929c:	9300      	str	r3, [sp, #0]
 801929e:	5cfb      	ldrb	r3, [r7, r3]
 80192a0:	2b00      	cmp	r3, #0
 80192a2:	f000 808d 	beq.w	80193c0 <_lv_txt_get_next_line+0x180>
 80192a6:	f1b9 0f00 	cmp.w	r9, #0
 80192aa:	f340 8089 	ble.w	80193c0 <_lv_txt_get_next_line+0x180>
    if(flag & LV_TEXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 80192ae:	9b05      	ldr	r3, [sp, #20]
    uint32_t i = 0, i_next = 0, i_next_next = 0;  /*Iterating index into txt*/
 80192b0:	2400      	movs	r4, #0
    letter = _lv_txt_encoded_next(txt, &i_next);
 80192b2:	a90c      	add	r1, sp, #48	; 0x30
 80192b4:	4650      	mov	r0, sl
    if(flag & LV_TEXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 80192b6:	2b00      	cmp	r3, #0
    uint32_t break_index = NO_BREAK_FOUND; /*only used for "long" words*/
 80192b8:	f04f 3bff 	mov.w	fp, #4294967295
    lv_coord_t cur_w = 0;  /*Pixel Width of transversed string*/
 80192bc:	4625      	mov	r5, r4
    uint32_t i = 0, i_next = 0, i_next_next = 0;  /*Iterating index into txt*/
 80192be:	4626      	mov	r6, r4
    if(flag & LV_TEXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 80192c0:	bf0c      	ite	eq
 80192c2:	464b      	moveq	r3, r9
 80192c4:	f44f 43c0 	movne.w	r3, #24576	; 0x6000
 80192c8:	9307      	str	r3, [sp, #28]
    letter = _lv_txt_encoded_next(txt, &i_next);
 80192ca:	4b4c      	ldr	r3, [pc, #304]	; (80193fc <_lv_txt_get_next_line+0x1bc>)
    uint32_t i = 0, i_next = 0, i_next_next = 0;  /*Iterating index into txt*/
 80192cc:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
    letter = _lv_txt_encoded_next(txt, &i_next);
 80192d0:	681a      	ldr	r2, [r3, #0]
 80192d2:	4790      	blx	r2
    i_next_next = i_next;
 80192d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    letter = _lv_txt_encoded_next(txt, &i_next);
 80192d6:	4680      	mov	r8, r0
    uint32_t letter_next = 0; /*Letter at i_next*/
 80192d8:	4622      	mov	r2, r4
    i_next_next = i_next;
 80192da:	930d      	str	r3, [sp, #52]	; 0x34
        if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 80192dc:	9b03      	ldr	r3, [sp, #12]
    uint32_t word_len = 0;   /*Number of characters in the transversed word*/
 80192de:	9401      	str	r4, [sp, #4]
        if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 80192e0:	f003 0301 	and.w	r3, r3, #1
 80192e4:	9308      	str	r3, [sp, #32]
    while(txt[i] != '\0') {
 80192e6:	f81a 1006 	ldrb.w	r1, [sl, r6]
 80192ea:	b949      	cbnz	r1, 8019300 <_lv_txt_get_next_line+0xc0>
    if(break_index == NO_BREAK_FOUND) {
 80192ec:	f1bb 3fff 	cmp.w	fp, #4294967295
 80192f0:	d052      	beq.n	8019398 <_lv_txt_get_next_line+0x158>
    if(force) return break_index;
 80192f2:	9b00      	ldr	r3, [sp, #0]
 80192f4:	465e      	mov	r6, fp
 80192f6:	2b00      	cmp	r3, #0
 80192f8:	d056      	beq.n	80193a8 <_lv_txt_get_next_line+0x168>
    if(word_w_ptr != NULL) *word_w_ptr = 0; /*Return no word*/
 80192fa:	2400      	movs	r4, #0
    return 0;
 80192fc:	4626      	mov	r6, r4
 80192fe:	e053      	b.n	80193a8 <_lv_txt_get_next_line+0x168>
        letter_next = _lv_txt_encoded_next(txt, &i_next_next);
 8019300:	4b3e      	ldr	r3, [pc, #248]	; (80193fc <_lv_txt_get_next_line+0x1bc>)
 8019302:	a90d      	add	r1, sp, #52	; 0x34
 8019304:	4650      	mov	r0, sl
 8019306:	681a      	ldr	r2, [r3, #0]
 8019308:	4790      	blx	r2
        word_len++;
 801930a:	9b01      	ldr	r3, [sp, #4]
        letter_next = _lv_txt_encoded_next(txt, &i_next_next);
 801930c:	4602      	mov	r2, r0
        word_len++;
 801930e:	3301      	adds	r3, #1
 8019310:	9306      	str	r3, [sp, #24]
        if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 8019312:	9b08      	ldr	r3, [sp, #32]
 8019314:	b173      	cbz	r3, 8019334 <_lv_txt_get_next_line+0xf4>
 8019316:	9009      	str	r0, [sp, #36]	; 0x24
            if(_lv_txt_is_cmd(cmd_state, letter) != false) {
 8019318:	4641      	mov	r1, r8
 801931a:	f10d 002b 	add.w	r0, sp, #43	; 0x2b
 801931e:	f7ff ff71 	bl	8019204 <_lv_txt_is_cmd>
 8019322:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019324:	b130      	cbz	r0, 8019334 <_lv_txt_get_next_line+0xf4>
    uint8_t i;
    bool ret = false;

    /*Compare the letter to TXT_BREAK_CHARS*/
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
        if(letter == (uint32_t)LV_TXT_BREAK_CHARS[i]) {
 8019326:	9b06      	ldr	r3, [sp, #24]
        letter_next = _lv_txt_encoded_next(txt, &i_next_next);
 8019328:	4690      	mov	r8, r2
        i_next = i_next_next;
 801932a:	e9dd 610c 	ldrd	r6, r1, [sp, #48]	; 0x30
        if(letter == (uint32_t)LV_TXT_BREAK_CHARS[i]) {
 801932e:	9301      	str	r3, [sp, #4]
        i_next = i_next_next;
 8019330:	910c      	str	r1, [sp, #48]	; 0x30
        letter = letter_next;
 8019332:	e7d8      	b.n	80192e6 <_lv_txt_get_next_line+0xa6>
        letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 8019334:	4641      	mov	r1, r8
 8019336:	9802      	ldr	r0, [sp, #8]
 8019338:	9209      	str	r2, [sp, #36]	; 0x24
 801933a:	f7fd f8c3 	bl	80164c4 <lv_font_get_glyph_width>
        cur_w += letter_w;
 801933e:	4405      	add	r5, r0
        if(letter_w > 0) {
 8019340:	b200      	sxth	r0, r0
 8019342:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019344:	2800      	cmp	r0, #0
        cur_w += letter_w;
 8019346:	b2ad      	uxth	r5, r5
            cur_w += letter_space;
 8019348:	bfc2      	ittt	gt
 801934a:	9b04      	ldrgt	r3, [sp, #16]
 801934c:	18ed      	addgt	r5, r5, r3
 801934e:	b2ad      	uxthgt	r5, r5
        if(break_index == NO_BREAK_FOUND && (cur_w - letter_space) > max_width) {
 8019350:	f1bb 3fff 	cmp.w	fp, #4294967295
 8019354:	b22d      	sxth	r5, r5
 8019356:	d105      	bne.n	8019364 <_lv_txt_get_next_line+0x124>
 8019358:	9b04      	ldr	r3, [sp, #16]
 801935a:	1ae9      	subs	r1, r5, r3
 801935c:	9b07      	ldr	r3, [sp, #28]
 801935e:	4299      	cmp	r1, r3
 8019360:	bfc8      	it	gt
 8019362:	46b3      	movgt	fp, r6
        if(letter == '\n' || letter == '\r' || is_break_char(letter)) {
 8019364:	f1b8 0f0a 	cmp.w	r8, #10
 8019368:	d010      	beq.n	801938c <_lv_txt_get_next_line+0x14c>
 801936a:	f1b8 0f0d 	cmp.w	r8, #13
 801936e:	d00d      	beq.n	801938c <_lv_txt_get_next_line+0x14c>
 8019370:	2100      	movs	r1, #0
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
 8019372:	b2c8      	uxtb	r0, r1
 8019374:	4b22      	ldr	r3, [pc, #136]	; (8019400 <_lv_txt_get_next_line+0x1c0>)
 8019376:	5c18      	ldrb	r0, [r3, r0]
 8019378:	b920      	cbnz	r0, 8019384 <_lv_txt_get_next_line+0x144>
        if(word_w_ptr != NULL && break_index == NO_BREAK_FOUND) *word_w_ptr = cur_w;
 801937a:	f1bb 3fff 	cmp.w	fp, #4294967295
 801937e:	bf08      	it	eq
 8019380:	462c      	moveq	r4, r5
 8019382:	e7d0      	b.n	8019326 <_lv_txt_get_next_line+0xe6>
        if(letter == (uint32_t)LV_TXT_BREAK_CHARS[i]) {
 8019384:	4580      	cmp	r8, r0
 8019386:	f101 0101 	add.w	r1, r1, #1
 801938a:	d1f2      	bne.n	8019372 <_lv_txt_get_next_line+0x132>
            if(i == 0 && break_index == NO_BREAK_FOUND && word_w_ptr != NULL) *word_w_ptr = cur_w;
 801938c:	2e00      	cmp	r6, #0
 801938e:	d1ad      	bne.n	80192ec <_lv_txt_get_next_line+0xac>
 8019390:	f1bb 3fff 	cmp.w	fp, #4294967295
 8019394:	d1ad      	bne.n	80192f2 <_lv_txt_get_next_line+0xb2>
 8019396:	462c      	mov	r4, r5
        if(word_len == 0 || (letter == '\r' && letter_next == '\n')) i = i_next;
 8019398:	9b01      	ldr	r3, [sp, #4]
 801939a:	b123      	cbz	r3, 80193a6 <_lv_txt_get_next_line+0x166>
 801939c:	f1b8 0f0d 	cmp.w	r8, #13
 80193a0:	d102      	bne.n	80193a8 <_lv_txt_get_next_line+0x168>
 80193a2:	2a0a      	cmp	r2, #10
 80193a4:	d100      	bne.n	80193a8 <_lv_txt_get_next_line+0x168>
 80193a6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
        max_width -= word_w;
 80193a8:	eba9 0904 	sub.w	r9, r9, r4
 80193ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80193ae:	fa0f f989 	sxth.w	r9, r9
        if(advance == 0) {
 80193b2:	b976      	cbnz	r6, 80193d2 <_lv_txt_get_next_line+0x192>
            if(i == 0) _lv_txt_encoded_next(txt, &i); // prevent inf loops
 80193b4:	b95b      	cbnz	r3, 80193ce <_lv_txt_get_next_line+0x18e>
 80193b6:	4b11      	ldr	r3, [pc, #68]	; (80193fc <_lv_txt_get_next_line+0x1bc>)
 80193b8:	a90b      	add	r1, sp, #44	; 0x2c
 80193ba:	4638      	mov	r0, r7
 80193bc:	681b      	ldr	r3, [r3, #0]
 80193be:	4798      	blx	r3
    if(i == 0) {
 80193c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80193c2:	b923      	cbnz	r3, 80193ce <_lv_txt_get_next_line+0x18e>
        _lv_txt_encoded_next(txt, &i);
 80193c4:	4b0d      	ldr	r3, [pc, #52]	; (80193fc <_lv_txt_get_next_line+0x1bc>)
 80193c6:	a90b      	add	r1, sp, #44	; 0x2c
 80193c8:	4638      	mov	r0, r7
 80193ca:	681b      	ldr	r3, [r3, #0]
 80193cc:	4798      	blx	r3
    return i;
 80193ce:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80193d0:	e754      	b.n	801927c <_lv_txt_get_next_line+0x3c>
        i += advance;
 80193d2:	441e      	add	r6, r3
        if(txt[0] == '\n' || txt[0] == '\r') break;
 80193d4:	783b      	ldrb	r3, [r7, #0]
 80193d6:	2b0a      	cmp	r3, #10
        i += advance;
 80193d8:	960b      	str	r6, [sp, #44]	; 0x2c
        if(txt[0] == '\n' || txt[0] == '\r') break;
 80193da:	d0f1      	beq.n	80193c0 <_lv_txt_get_next_line+0x180>
 80193dc:	2b0d      	cmp	r3, #13
 80193de:	d0ef      	beq.n	80193c0 <_lv_txt_get_next_line+0x180>
        if(txt[i] == '\n' || txt[i] == '\r') {
 80193e0:	5dbb      	ldrb	r3, [r7, r6]
 80193e2:	2b0a      	cmp	r3, #10
 80193e4:	d002      	beq.n	80193ec <_lv_txt_get_next_line+0x1ac>
 80193e6:	2b0d      	cmp	r3, #13
 80193e8:	f47f af55 	bne.w	8019296 <_lv_txt_get_next_line+0x56>
            i++;  /*Include the following newline in the current line*/
 80193ec:	3601      	adds	r6, #1
 80193ee:	960b      	str	r6, [sp, #44]	; 0x2c
            break;
 80193f0:	e7e6      	b.n	80193c0 <_lv_txt_get_next_line+0x180>
    if(txt == NULL) return 0;
 80193f2:	9802      	ldr	r0, [sp, #8]
 80193f4:	e742      	b.n	801927c <_lv_txt_get_next_line+0x3c>
        if(txt[i] != '\0') i++;    /*To go beyond `\n`*/
 80193f6:	3001      	adds	r0, #1
 80193f8:	e740      	b.n	801927c <_lv_txt_get_next_line+0x3c>
 80193fa:	bf00      	nop
 80193fc:	20000040 	.word	0x20000040
 8019400:	080293de 	.word	0x080293de

08019404 <_lv_txt_ins>:
{
 8019404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019408:	4604      	mov	r4, r0
    size_t ins_len = strlen(ins_txt);
 801940a:	4610      	mov	r0, r2
{
 801940c:	4688      	mov	r8, r1
 801940e:	4616      	mov	r6, r2
    size_t ins_len = strlen(ins_txt);
 8019410:	f7e6 ff58 	bl	80002c4 <strlen>
    if(ins_len == 0) return;
 8019414:	4605      	mov	r5, r0
 8019416:	b1a8      	cbz	r0, 8019444 <_lv_txt_ins+0x40>
    size_t old_len = strlen(txt_buf);
 8019418:	4620      	mov	r0, r4
 801941a:	f7e6 ff53 	bl	80002c4 <strlen>
    pos              = _lv_txt_encoded_get_byte_id(txt_buf, pos); /*Convert to byte index instead of letter index*/
 801941e:	4b0c      	ldr	r3, [pc, #48]	; (8019450 <_lv_txt_ins+0x4c>)
    size_t new_len = ins_len + old_len;
 8019420:	1947      	adds	r7, r0, r5
    pos              = _lv_txt_encoded_get_byte_id(txt_buf, pos); /*Convert to byte index instead of letter index*/
 8019422:	4641      	mov	r1, r8
 8019424:	681b      	ldr	r3, [r3, #0]
 8019426:	4620      	mov	r0, r4
 8019428:	4798      	blx	r3
        txt_buf[i] = txt_buf[i - ins_len];
 801942a:	1b62      	subs	r2, r4, r5
    for(i = new_len; i >= pos + ins_len; i--) {
 801942c:	182b      	adds	r3, r5, r0
 801942e:	42bb      	cmp	r3, r7
 8019430:	d90a      	bls.n	8019448 <_lv_txt_ins+0x44>
    lv_memcpy_small(txt_buf + pos, ins_txt, ins_len);
 8019432:	4404      	add	r4, r0
LV_ATTRIBUTE_FAST_MEM static inline void * lv_memcpy_small(void * dst, const void * src, size_t len)
{
    uint8_t * d8 = (uint8_t *)dst;
    const uint8_t * s8 = (const uint8_t *)src;

    while(len) {
 8019434:	3e01      	subs	r6, #1
 8019436:	4425      	add	r5, r4
        *d8 = *s8;
 8019438:	f816 3f01 	ldrb.w	r3, [r6, #1]!
 801943c:	f804 3b01 	strb.w	r3, [r4], #1
    while(len) {
 8019440:	42ac      	cmp	r4, r5
 8019442:	d1f9      	bne.n	8019438 <_lv_txt_ins+0x34>
}
 8019444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        txt_buf[i] = txt_buf[i - ins_len];
 8019448:	5dd1      	ldrb	r1, [r2, r7]
 801944a:	55e1      	strb	r1, [r4, r7]
    for(i = new_len; i >= pos + ins_len; i--) {
 801944c:	3f01      	subs	r7, #1
 801944e:	e7ee      	b.n	801942e <_lv_txt_ins+0x2a>
 8019450:	20000038 	.word	0x20000038

08019454 <_lv_txt_cut>:
{
 8019454:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8019458:	4606      	mov	r6, r0
    pos = _lv_txt_encoded_get_byte_id(txt, pos); /*Convert to byte index instead of letter index*/
 801945a:	f8df 803c 	ldr.w	r8, [pc, #60]	; 8019498 <_lv_txt_cut+0x44>
{
 801945e:	4617      	mov	r7, r2
 8019460:	9101      	str	r1, [sp, #4]
    size_t old_len = strlen(txt);
 8019462:	f7e6 ff2f 	bl	80002c4 <strlen>
    pos = _lv_txt_encoded_get_byte_id(txt, pos); /*Convert to byte index instead of letter index*/
 8019466:	f8d8 3000 	ldr.w	r3, [r8]
    size_t old_len = strlen(txt);
 801946a:	4605      	mov	r5, r0
    pos = _lv_txt_encoded_get_byte_id(txt, pos); /*Convert to byte index instead of letter index*/
 801946c:	9901      	ldr	r1, [sp, #4]
 801946e:	4630      	mov	r0, r6
 8019470:	4798      	blx	r3
    len = _lv_txt_encoded_get_byte_id(&txt[pos], len);
 8019472:	1834      	adds	r4, r6, r0
 8019474:	f8d8 3000 	ldr.w	r3, [r8]
 8019478:	4639      	mov	r1, r7
 801947a:	4620      	mov	r0, r4
 801947c:	4798      	blx	r3
    for(i = pos; i <= old_len - len; i++) {
 801947e:	4623      	mov	r3, r4
 8019480:	1a2d      	subs	r5, r5, r0
 8019482:	1b9a      	subs	r2, r3, r6
 8019484:	4295      	cmp	r5, r2
 8019486:	d202      	bcs.n	801948e <_lv_txt_cut+0x3a>
}
 8019488:	b002      	add	sp, #8
 801948a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        txt[i] = txt[i + len];
 801948e:	5c1a      	ldrb	r2, [r3, r0]
 8019490:	f803 2b01 	strb.w	r2, [r3], #1
    for(i = pos; i <= old_len - len; i++) {
 8019494:	e7f5      	b.n	8019482 <_lv_txt_cut+0x2e>
 8019496:	bf00      	nop
 8019498:	20000038 	.word	0x20000038

0801949c <_lv_txt_encoded_letter_next_2>:
{
 801949c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80194a0:	461c      	mov	r4, r3
    *letter = _lv_txt_encoded_next(txt, ofs);
 80194a2:	f8df 8028 	ldr.w	r8, [pc, #40]	; 80194cc <_lv_txt_encoded_letter_next_2+0x30>
{
 80194a6:	460f      	mov	r7, r1
 80194a8:	4606      	mov	r6, r0
    *letter = _lv_txt_encoded_next(txt, ofs);
 80194aa:	f8d8 3000 	ldr.w	r3, [r8]
 80194ae:	4621      	mov	r1, r4
{
 80194b0:	4615      	mov	r5, r2
    *letter = _lv_txt_encoded_next(txt, ofs);
 80194b2:	4798      	blx	r3
 80194b4:	6038      	str	r0, [r7, #0]
    *letter_next = *letter != '\0' ? _lv_txt_encoded_next(&txt[*ofs], NULL) : 0;
 80194b6:	b128      	cbz	r0, 80194c4 <_lv_txt_encoded_letter_next_2+0x28>
 80194b8:	6820      	ldr	r0, [r4, #0]
 80194ba:	2100      	movs	r1, #0
 80194bc:	f8d8 3000 	ldr.w	r3, [r8]
 80194c0:	4430      	add	r0, r6
 80194c2:	4798      	blx	r3
 80194c4:	6028      	str	r0, [r5, #0]
}
 80194c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80194ca:	bf00      	nop
 80194cc:	20000040 	.word	0x20000040

080194d0 <lv_txt_get_width>:
{
 80194d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80194d4:	4688      	mov	r8, r1
 80194d6:	b085      	sub	sp, #20
 80194d8:	4617      	mov	r7, r2
 80194da:	461e      	mov	r6, r3
    if(txt == NULL) return 0;
 80194dc:	4605      	mov	r5, r0
 80194de:	2800      	cmp	r0, #0
 80194e0:	d035      	beq.n	801954e <lv_txt_get_width+0x7e>
    if(font == NULL) return 0;
 80194e2:	2a00      	cmp	r2, #0
 80194e4:	d035      	beq.n	8019552 <lv_txt_get_width+0x82>
    if(txt[0] == '\0') return 0;
 80194e6:	7804      	ldrb	r4, [r0, #0]
 80194e8:	2300      	movs	r3, #0
 80194ea:	b124      	cbz	r4, 80194f6 <lv_txt_get_width+0x26>
    uint32_t i                   = 0;
 80194ec:	9301      	str	r3, [sp, #4]
    lv_text_cmd_state_t cmd_state = LV_TEXT_CMD_STATE_WAIT;
 80194ee:	f88d 3003 	strb.w	r3, [sp, #3]
    if(length != 0) {
 80194f2:	bb31      	cbnz	r1, 8019542 <lv_txt_get_width+0x72>
    lv_coord_t width             = 0;
 80194f4:	460c      	mov	r4, r1
}
 80194f6:	4620      	mov	r0, r4
 80194f8:	b005      	add	sp, #20
 80194fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            _lv_txt_encoded_letter_next_2(txt, &letter, &letter_next, &i);
 80194fe:	ab01      	add	r3, sp, #4
 8019500:	aa03      	add	r2, sp, #12
 8019502:	a902      	add	r1, sp, #8
 8019504:	4628      	mov	r0, r5
 8019506:	f7ff ffc9 	bl	801949c <_lv_txt_encoded_letter_next_2>
            if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 801950a:	f1b9 0f00 	cmp.w	r9, #0
 801950e:	d005      	beq.n	801951c <lv_txt_get_width+0x4c>
                if(_lv_txt_is_cmd(&cmd_state, letter) != false) {
 8019510:	9902      	ldr	r1, [sp, #8]
 8019512:	f10d 0003 	add.w	r0, sp, #3
 8019516:	f7ff fe75 	bl	8019204 <_lv_txt_is_cmd>
 801951a:	b950      	cbnz	r0, 8019532 <lv_txt_get_width+0x62>
            lv_coord_t char_width = lv_font_get_glyph_width(font, letter, letter_next);
 801951c:	4638      	mov	r0, r7
 801951e:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8019522:	f7fc ffcf 	bl	80164c4 <lv_font_get_glyph_width>
            if(char_width > 0) {
 8019526:	b203      	sxth	r3, r0
 8019528:	2b00      	cmp	r3, #0
 801952a:	dd02      	ble.n	8019532 <lv_txt_get_width+0x62>
                width += letter_space;
 801952c:	4434      	add	r4, r6
 801952e:	4404      	add	r4, r0
 8019530:	b224      	sxth	r4, r4
        while(i < length) {
 8019532:	9b01      	ldr	r3, [sp, #4]
 8019534:	4598      	cmp	r8, r3
 8019536:	d8e2      	bhi.n	80194fe <lv_txt_get_width+0x2e>
        if(width > 0) {
 8019538:	2c00      	cmp	r4, #0
 801953a:	dddc      	ble.n	80194f6 <lv_txt_get_width+0x26>
            width -= letter_space; /*Trim the last letter space. Important if the text is center
 801953c:	1ba4      	subs	r4, r4, r6
 801953e:	b224      	sxth	r4, r4
 8019540:	e7d9      	b.n	80194f6 <lv_txt_get_width+0x26>
            if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 8019542:	f89d 9030 	ldrb.w	r9, [sp, #48]	; 0x30
    lv_coord_t width             = 0;
 8019546:	461c      	mov	r4, r3
            if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 8019548:	f009 0901 	and.w	r9, r9, #1
 801954c:	e7f1      	b.n	8019532 <lv_txt_get_width+0x62>
    if(txt == NULL) return 0;
 801954e:	4604      	mov	r4, r0
 8019550:	e7d1      	b.n	80194f6 <lv_txt_get_width+0x26>
 8019552:	4614      	mov	r4, r2
 8019554:	e7cf      	b.n	80194f6 <lv_txt_get_width+0x26>

08019556 <lv_txt_get_size>:
{
 8019556:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801955a:	b087      	sub	sp, #28
    size_res->x = 0;
 801955c:	2500      	movs	r5, #0
{
 801955e:	4698      	mov	r8, r3
 8019560:	4604      	mov	r4, r0
 8019562:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8019566:	4616      	mov	r6, r2
 8019568:	f9bd b040 	ldrsh.w	fp, [sp, #64]	; 0x40
    if(text == NULL) return;
 801956c:	460f      	mov	r7, r1
{
 801956e:	f9bd a044 	ldrsh.w	sl, [sp, #68]	; 0x44
 8019572:	9302      	str	r3, [sp, #8]
    size_res->x = 0;
 8019574:	8005      	strh	r5, [r0, #0]
    size_res->y = 0;
 8019576:	8045      	strh	r5, [r0, #2]
    if(text == NULL) return;
 8019578:	b309      	cbz	r1, 80195be <lv_txt_get_size+0x68>
    if(font == NULL) return;
 801957a:	b302      	cbz	r2, 80195be <lv_txt_get_size+0x68>
    if(flag & LV_TEXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 801957c:	f013 0f02 	tst.w	r3, #2
    uint16_t letter_height = lv_font_get_line_height(font);
 8019580:	f9b2 3008 	ldrsh.w	r3, [r2, #8]
 8019584:	9304      	str	r3, [sp, #16]
    if(flag & LV_TEXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 8019586:	bf18      	it	ne
 8019588:	f44f 4ac0 	movne.w	sl, #24576	; 0x6000
    uint16_t letter_height = lv_font_get_line_height(font);
 801958c:	8913      	ldrh	r3, [r2, #8]
 801958e:	9303      	str	r3, [sp, #12]
        if((unsigned long)size_res->y + (unsigned long)letter_height + (unsigned long)line_space > LV_MAX_OF(lv_coord_t)) {
 8019590:	445b      	add	r3, fp
 8019592:	9305      	str	r3, [sp, #20]
    while(text[line_start] != '\0') {
 8019594:	5d7b      	ldrb	r3, [r7, r5]
 8019596:	eb07 0905 	add.w	r9, r7, r5
 801959a:	b99b      	cbnz	r3, 80195c4 <lv_txt_get_size+0x6e>
    if((line_start != 0) && (text[line_start - 1] == '\n' || text[line_start - 1] == '\r')) {
 801959c:	b155      	cbz	r5, 80195b4 <lv_txt_get_size+0x5e>
 801959e:	f819 3c01 	ldrb.w	r3, [r9, #-1]
 80195a2:	2b0a      	cmp	r3, #10
 80195a4:	d001      	beq.n	80195aa <lv_txt_get_size+0x54>
 80195a6:	2b0d      	cmp	r3, #13
 80195a8:	d104      	bne.n	80195b4 <lv_txt_get_size+0x5e>
        size_res->y += letter_height + line_space;
 80195aa:	9b03      	ldr	r3, [sp, #12]
 80195ac:	8862      	ldrh	r2, [r4, #2]
 80195ae:	445b      	add	r3, fp
 80195b0:	4413      	add	r3, r2
 80195b2:	8063      	strh	r3, [r4, #2]
    if(size_res->y == 0)
 80195b4:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 80195b8:	bb23      	cbnz	r3, 8019604 <lv_txt_get_size+0xae>
        size_res->y = letter_height;
 80195ba:	9b04      	ldr	r3, [sp, #16]
        size_res->y -= line_space;
 80195bc:	8063      	strh	r3, [r4, #2]
}
 80195be:	b007      	add	sp, #28
 80195c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        new_line_start += _lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, flag);
 80195c4:	9b02      	ldr	r3, [sp, #8]
 80195c6:	4642      	mov	r2, r8
 80195c8:	4631      	mov	r1, r6
 80195ca:	4648      	mov	r0, r9
 80195cc:	9300      	str	r3, [sp, #0]
 80195ce:	4653      	mov	r3, sl
 80195d0:	f7ff fe36 	bl	8019240 <_lv_txt_get_next_line>
        if((unsigned long)size_res->y + (unsigned long)letter_height + (unsigned long)line_space > LV_MAX_OF(lv_coord_t)) {
 80195d4:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 80195d8:	9a05      	ldr	r2, [sp, #20]
        new_line_start += _lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, flag);
 80195da:	4601      	mov	r1, r0
 80195dc:	4405      	add	r5, r0
        if((unsigned long)size_res->y + (unsigned long)letter_height + (unsigned long)line_space > LV_MAX_OF(lv_coord_t)) {
 80195de:	4413      	add	r3, r2
 80195e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80195e4:	d2eb      	bcs.n	80195be <lv_txt_get_size+0x68>
            size_res->y += line_space;
 80195e6:	8063      	strh	r3, [r4, #2]
        lv_coord_t act_line_length = lv_txt_get_width(&text[line_start], new_line_start - line_start, font, letter_space,
 80195e8:	4632      	mov	r2, r6
 80195ea:	9b02      	ldr	r3, [sp, #8]
 80195ec:	4648      	mov	r0, r9
 80195ee:	9300      	str	r3, [sp, #0]
 80195f0:	4643      	mov	r3, r8
 80195f2:	f7ff ff6d 	bl	80194d0 <lv_txt_get_width>
        size_res->x = LV_MAX(act_line_length, size_res->x);
 80195f6:	f9b4 3000 	ldrsh.w	r3, [r4]
 80195fa:	4298      	cmp	r0, r3
 80195fc:	bfb8      	it	lt
 80195fe:	4618      	movlt	r0, r3
 8019600:	8020      	strh	r0, [r4, #0]
        line_start  = new_line_start;
 8019602:	e7c7      	b.n	8019594 <lv_txt_get_size+0x3e>
        size_res->y -= line_space;
 8019604:	eba3 030b 	sub.w	r3, r3, fp
 8019608:	e7d8      	b.n	80195bc <lv_txt_get_size+0x66>

0801960a <_lv_utils_bsearch>:
 *
 * @return a pointer to a matching item, or NULL if none exists.
 */
void * _lv_utils_bsearch(const void * key, const void * base, uint32_t n, uint32_t size,
                         int32_t (*cmp)(const void * pRef, const void * pElement))
{
 801960a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801960e:	9d08      	ldr	r5, [sp, #32]
 8019610:	4680      	mov	r8, r0
 8019612:	460f      	mov	r7, r1
 8019614:	4614      	mov	r4, r2
 8019616:	4699      	mov	r9, r3
    const char * middle;
    int32_t c;

    for(middle = base; n != 0;) {
 8019618:	b90c      	cbnz	r4, 801961e <_lv_utils_bsearch+0x14>
        }
        else {
            return (char *)middle;
        }
    }
    return NULL;
 801961a:	4626      	mov	r6, r4
 801961c:	e012      	b.n	8019644 <_lv_utils_bsearch+0x3a>
        middle += (n / 2) * size;
 801961e:	ea4f 0a54 	mov.w	sl, r4, lsr #1
        if((c = (*cmp)(key, middle)) > 0) {
 8019622:	4640      	mov	r0, r8
        middle += (n / 2) * size;
 8019624:	fb09 760a 	mla	r6, r9, sl, r7
        if((c = (*cmp)(key, middle)) > 0) {
 8019628:	4631      	mov	r1, r6
 801962a:	47a8      	blx	r5
 801962c:	2800      	cmp	r0, #0
 801962e:	dd08      	ble.n	8019642 <_lv_utils_bsearch+0x38>
            n    = (n / 2) - ((n & 1) == 0);
 8019630:	43e4      	mvns	r4, r4
            base = (middle += size);
 8019632:	eb06 0709 	add.w	r7, r6, r9
 8019636:	f004 0401 	and.w	r4, r4, #1
            n    = (n / 2) - ((n & 1) == 0);
 801963a:	ebaa 0a04 	sub.w	sl, sl, r4
{
 801963e:	4654      	mov	r4, sl
 8019640:	e7ea      	b.n	8019618 <_lv_utils_bsearch+0xe>
        else if(c < 0) {
 8019642:	d1fc      	bne.n	801963e <_lv_utils_bsearch+0x34>
}
 8019644:	4630      	mov	r0, r6
 8019646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801964a <lv_obj_get_style_pad_left>:
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_pad_left(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801964a:	f241 0212 	movw	r2, #4114	; 0x1012
{
 801964e:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8019650:	f7ed fe8a 	bl	8007368 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
}
 8019654:	b200      	sxth	r0, r0
 8019656:	bd08      	pop	{r3, pc}

08019658 <lv_obj_get_style_pad_right>:

static inline lv_coord_t lv_obj_get_style_pad_right(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8019658:	f241 0213 	movw	r2, #4115	; 0x1013
{
 801965c:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801965e:	f7ed fe83 	bl	8007368 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
}
 8019662:	b200      	sxth	r0, r0
 8019664:	bd08      	pop	{r3, pc}

08019666 <lv_obj_get_style_pad_top>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8019666:	f241 0210 	movw	r2, #4112	; 0x1010
{
 801966a:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801966c:	f7ed fe7c 	bl	8007368 <lv_obj_get_style_prop>
}
 8019670:	b200      	sxth	r0, r0
 8019672:	bd08      	pop	{r3, pc}

08019674 <lv_obj_get_style_pad_bottom>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8019674:	f241 0211 	movw	r2, #4113	; 0x1011
{
 8019678:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801967a:	f7ed fe75 	bl	8007368 <lv_obj_get_style_prop>
}
 801967e:	b200      	sxth	r0, r0
 8019680:	bd08      	pop	{r3, pc}
	...

08019684 <lv_arc_constructor>:
    LV_TRACE_OBJ_CREATE("begin");

    lv_arc_t * arc = (lv_arc_t *)obj;

   /*Initialize the allocated 'ext'*/
   arc->rotation = 0;
 8019684:	f44f 0307 	mov.w	r3, #8847360	; 0x870000
   arc->indic_angle_start = 135;
   arc->indic_angle_end   = 270;
   arc->type = LV_ARC_MODE_NORMAL;
   arc->value = VALUE_UNSET;
   arc->min_close = 1;
   arc->min_value = 0;
 8019688:	4a12      	ldr	r2, [pc, #72]	; (80196d4 <lv_arc_constructor+0x50>)
{
 801968a:	b510      	push	{r4, lr}
   arc->rotation = 0;
 801968c:	624b      	str	r3, [r1, #36]	; 0x24
   arc->indic_angle_end   = 270;
 801968e:	f503 7387 	add.w	r3, r3, #270	; 0x10e
{
 8019692:	460c      	mov	r4, r1
   arc->indic_angle_end   = 270;
 8019694:	628b      	str	r3, [r1, #40]	; 0x28
   arc->min_value = 0;
 8019696:	f44f 03c8 	mov.w	r3, #6553600	; 0x640000
 801969a:	e9c1 230b 	strd	r2, r3, [r1, #44]	; 0x2c
   arc->max_value = 100;
   arc->dragging = false;
 801969e:	f891 3034 	ldrb.w	r3, [r1, #52]	; 0x34
 80196a2:	f023 030f 	bic.w	r3, r3, #15
 80196a6:	f043 0308 	orr.w	r3, r3, #8
 80196aa:	f881 3034 	strb.w	r3, [r1, #52]	; 0x34
   arc->chg_rate = 720;
 80196ae:	f44f 7334 	mov.w	r3, #720	; 0x2d0
 80196b2:	86cb      	strh	r3, [r1, #54]	; 0x36
   arc->last_tick = lv_tick_get();
 80196b4:	f7fd f9ac 	bl	8016a10 <lv_tick_get>
   arc->last_angle =arc->indic_angle_end;
 80196b8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   arc->last_tick = lv_tick_get();
 80196ba:	63a0      	str	r0, [r4, #56]	; 0x38

   lv_obj_add_flag(obj, LV_OBJ_FLAG_CLICKABLE);
 80196bc:	2102      	movs	r1, #2
 80196be:	4620      	mov	r0, r4
   arc->last_angle =arc->indic_angle_end;
 80196c0:	87a3      	strh	r3, [r4, #60]	; 0x3c
   lv_obj_add_flag(obj, LV_OBJ_FLAG_CLICKABLE);
 80196c2:	f7ea fb21 	bl	8003d08 <lv_obj_add_flag>
   lv_obj_set_ext_click_area(obj, LV_DPI_DEF / 10);
 80196c6:	4620      	mov	r0, r4
 80196c8:	210d      	movs	r1, #13


    LV_TRACE_OBJ_CREATE("finished");
}
 80196ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   lv_obj_set_ext_click_area(obj, LV_DPI_DEF / 10);
 80196ce:	f7eb bf25 	b.w	800551c <lv_obj_set_ext_click_area>
 80196d2:	bf00      	nop
 80196d4:	8000002d 	.word	0x8000002d

080196d8 <get_center>:
        lv_obj_invalidate(obj);
    }
}

static void get_center(lv_obj_t * obj, lv_point_t * center, lv_coord_t * arc_r)
{
 80196d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80196dc:	4604      	mov	r4, r0
 80196de:	460f      	mov	r7, r1
    lv_coord_t left_bg = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 80196e0:	2100      	movs	r1, #0
{
 80196e2:	4690      	mov	r8, r2
    lv_coord_t left_bg = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 80196e4:	f7ff ffb1 	bl	801964a <lv_obj_get_style_pad_left>
    lv_coord_t right_bg = lv_obj_get_style_pad_right(obj, LV_PART_MAIN);
 80196e8:	2100      	movs	r1, #0
    lv_coord_t left_bg = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 80196ea:	4605      	mov	r5, r0
    lv_coord_t right_bg = lv_obj_get_style_pad_right(obj, LV_PART_MAIN);
 80196ec:	4620      	mov	r0, r4
 80196ee:	f7ff ffb3 	bl	8019658 <lv_obj_get_style_pad_right>
    lv_coord_t top_bg = lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 80196f2:	2100      	movs	r1, #0
    lv_coord_t right_bg = lv_obj_get_style_pad_right(obj, LV_PART_MAIN);
 80196f4:	4682      	mov	sl, r0
    lv_coord_t top_bg = lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 80196f6:	4620      	mov	r0, r4
 80196f8:	f7ff ffb5 	bl	8019666 <lv_obj_get_style_pad_top>
    lv_coord_t bottom_bg = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN);
 80196fc:	2100      	movs	r1, #0
    lv_coord_t top_bg = lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 80196fe:	4606      	mov	r6, r0
    lv_coord_t bottom_bg = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN);
 8019700:	4620      	mov	r0, r4
 8019702:	f7ff ffb7 	bl	8019674 <lv_obj_get_style_pad_bottom>
 8019706:	4681      	mov	r9, r0

    lv_coord_t r = (LV_MIN(lv_obj_get_width(obj) - left_bg - right_bg,
 8019708:	4620      	mov	r0, r4
 801970a:	f7eb fbb0 	bl	8004e6e <lv_obj_get_width>
 801970e:	1b40      	subs	r0, r0, r5
 8019710:	eba0 0b0a 	sub.w	fp, r0, sl
 8019714:	4620      	mov	r0, r4
 8019716:	f7eb fbb0 	bl	8004e7a <lv_obj_get_height>
 801971a:	1b80      	subs	r0, r0, r6
 801971c:	eba0 0009 	sub.w	r0, r0, r9
 8019720:	4583      	cmp	fp, r0
 8019722:	4620      	mov	r0, r4
 8019724:	da1d      	bge.n	8019762 <get_center+0x8a>
 8019726:	f7eb fba2 	bl	8004e6e <lv_obj_get_width>
 801972a:	1b42      	subs	r2, r0, r5
 801972c:	eba2 030a 	sub.w	r3, r2, sl
                                lv_obj_get_height(obj) - top_bg - bottom_bg)) / 2;
 8019730:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
    return (lv_opa_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_arc_width(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_WIDTH);
 8019734:	f44f 6205 	mov.w	r2, #2128	; 0x850
 8019738:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    lv_coord_t r = (LV_MIN(lv_obj_get_width(obj) - left_bg - right_bg,
 801973c:	f343 034f 	sbfx	r3, r3, #1, #16

    *arc_r = r;
 8019740:	f8a8 3000 	strh.w	r3, [r8]
    center->x = obj->coords.x1 + r + left_bg;
 8019744:	8aa0      	ldrh	r0, [r4, #20]
 8019746:	4405      	add	r5, r0
    center->y = obj->coords.y1 + r + top_bg;
 8019748:	8ae0      	ldrh	r0, [r4, #22]
 801974a:	4406      	add	r6, r0
    center->x = obj->coords.x1 + r + left_bg;
 801974c:	fa15 f583 	uxtah	r5, r5, r3
 8019750:	4620      	mov	r0, r4
    center->y = obj->coords.y1 + r + top_bg;
 8019752:	fa16 f383 	uxtah	r3, r6, r3
    center->x = obj->coords.x1 + r + left_bg;
 8019756:	803d      	strh	r5, [r7, #0]
    center->y = obj->coords.y1 + r + top_bg;
 8019758:	807b      	strh	r3, [r7, #2]

    lv_coord_t indic_width = lv_obj_get_style_arc_width(obj, LV_PART_INDICATOR);
    r -= indic_width;
}
 801975a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801975e:	f7ed be03 	b.w	8007368 <lv_obj_get_style_prop>
    lv_coord_t r = (LV_MIN(lv_obj_get_width(obj) - left_bg - right_bg,
 8019762:	f7eb fb8a 	bl	8004e7a <lv_obj_get_height>
 8019766:	1b82      	subs	r2, r0, r6
 8019768:	eba2 0309 	sub.w	r3, r2, r9
 801976c:	e7e0      	b.n	8019730 <get_center+0x58>

0801976e <inv_arc_area>:
{
 801976e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019772:	b08d      	sub	sp, #52	; 0x34
 8019774:	4681      	mov	r9, r0
 8019776:	460f      	mov	r7, r1
 8019778:	4615      	mov	r5, r2
 801977a:	469b      	mov	fp, r3
    if(lv_obj_is_visible(obj) == false) return;
 801977c:	f7eb feb0 	bl	80054e0 <lv_obj_is_visible>
 8019780:	2800      	cmp	r0, #0
 8019782:	f000 80f4 	beq.w	801996e <inv_arc_area+0x200>
    start_angle +=arc->rotation;
 8019786:	f8b9 0024 	ldrh.w	r0, [r9, #36]	; 0x24
    uint8_t start_quarter = start_angle / 90;
 801978a:	225a      	movs	r2, #90	; 0x5a
    lv_coord_t left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 801978c:	2100      	movs	r1, #0
    start_angle +=arc->rotation;
 801978e:	4407      	add	r7, r0
    end_angle +=arc->rotation;
 8019790:	4405      	add	r5, r0
    lv_coord_t left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 8019792:	4648      	mov	r0, r9
    start_angle +=arc->rotation;
 8019794:	b2bf      	uxth	r7, r7
    end_angle +=arc->rotation;
 8019796:	b2ad      	uxth	r5, r5
    if(start_angle >= 360) start_angle -= 360;
 8019798:	f5b7 7fb4 	cmp.w	r7, #360	; 0x168
 801979c:	bf24      	itt	cs
 801979e:	f5a7 77b4 	subcs.w	r7, r7, #360	; 0x168
 80197a2:	b2bf      	uxthcs	r7, r7
    if(end_angle >= 360) end_angle -= 360;
 80197a4:	f5b5 7fb4 	cmp.w	r5, #360	; 0x168
 80197a8:	bf28      	it	cs
 80197aa:	f5a5 75b4 	subcs.w	r5, r5, #360	; 0x168
    uint8_t start_quarter = start_angle / 90;
 80197ae:	fbb7 f3f2 	udiv	r3, r7, r2
    if(end_angle >= 360) end_angle -= 360;
 80197b2:	bf28      	it	cs
 80197b4:	b2ad      	uxthcs	r5, r5
    uint8_t start_quarter = start_angle / 90;
 80197b6:	b2db      	uxtb	r3, r3
    uint8_t end_quarter = end_angle / 90;
 80197b8:	fbb5 f2f2 	udiv	r2, r5, r2
    uint8_t start_quarter = start_angle / 90;
 80197bc:	9301      	str	r3, [sp, #4]
    uint8_t end_quarter = end_angle / 90;
 80197be:	b2d3      	uxtb	r3, r2
 80197c0:	9302      	str	r3, [sp, #8]
    lv_coord_t left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 80197c2:	f7ff ff42 	bl	801964a <lv_obj_get_style_pad_left>
    lv_coord_t right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN);
 80197c6:	2100      	movs	r1, #0
    lv_coord_t left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 80197c8:	4604      	mov	r4, r0
    lv_coord_t right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN);
 80197ca:	4648      	mov	r0, r9
 80197cc:	f7ff ff44 	bl	8019658 <lv_obj_get_style_pad_right>
    lv_coord_t top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 80197d0:	2100      	movs	r1, #0
    lv_coord_t right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN);
 80197d2:	4606      	mov	r6, r0
    lv_coord_t top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 80197d4:	4648      	mov	r0, r9
 80197d6:	f7ff ff46 	bl	8019666 <lv_obj_get_style_pad_top>
    lv_coord_t bottom = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN);
 80197da:	2100      	movs	r1, #0
    lv_coord_t top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 80197dc:	4682      	mov	sl, r0
    lv_coord_t bottom = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN);
 80197de:	4648      	mov	r0, r9
 80197e0:	f7ff ff48 	bl	8019674 <lv_obj_get_style_pad_bottom>
 80197e4:	4680      	mov	r8, r0
    lv_coord_t rout       = (LV_MIN(lv_obj_get_width(obj) - left - right, lv_obj_get_height(obj) - top - bottom)) / 2;
 80197e6:	4648      	mov	r0, r9
 80197e8:	f7eb fb41 	bl	8004e6e <lv_obj_get_width>
 80197ec:	1b00      	subs	r0, r0, r4
 80197ee:	1b82      	subs	r2, r0, r6
 80197f0:	4648      	mov	r0, r9
 80197f2:	9200      	str	r2, [sp, #0]
 80197f4:	f7eb fb41 	bl	8004e7a <lv_obj_get_height>
 80197f8:	eba0 000a 	sub.w	r0, r0, sl
 80197fc:	9a00      	ldr	r2, [sp, #0]
 80197fe:	eba0 0008 	sub.w	r0, r0, r8
 8019802:	4282      	cmp	r2, r0
 8019804:	4648      	mov	r0, r9
 8019806:	f280 80b5 	bge.w	8019974 <inv_arc_area+0x206>
 801980a:	f7eb fb30 	bl	8004e6e <lv_obj_get_width>
 801980e:	1b00      	subs	r0, r0, r4
 8019810:	1b86      	subs	r6, r0, r6
 8019812:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
 8019816:	f346 064f 	sbfx	r6, r6, #1, #16
    lv_coord_t x       = obj->coords.x1 + rout + left;
 801981a:	f8b9 0014 	ldrh.w	r0, [r9, #20]
 801981e:	b2b3      	uxth	r3, r6
 8019820:	f44f 6205 	mov.w	r2, #2128	; 0x850
 8019824:	4659      	mov	r1, fp
 8019826:	4404      	add	r4, r0
 8019828:	f8b9 0016 	ldrh.w	r0, [r9, #22]
 801982c:	9303      	str	r3, [sp, #12]
 801982e:	4482      	add	sl, r0
 8019830:	b2a3      	uxth	r3, r4
 8019832:	4648      	mov	r0, r9
 8019834:	fa13 f886 	uxtah	r8, r3, r6
 8019838:	9305      	str	r3, [sp, #20]
 801983a:	fa1f f38a 	uxth.w	r3, sl
 801983e:	fa1f f888 	uxth.w	r8, r8
    lv_coord_t y       = obj->coords.y1 + rout + top;
 8019842:	fa13 f486 	uxtah	r4, r3, r6
 8019846:	9304      	str	r3, [sp, #16]
 8019848:	b2a3      	uxth	r3, r4
 801984a:	9300      	str	r3, [sp, #0]
 801984c:	f7ed fd8c 	bl	8007368 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8019850:	b203      	sxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_WIDTH);
 8019852:	4682      	mov	sl, r0
}

static inline lv_coord_t lv_obj_get_style_arc_rounded(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_ROUNDED);
 8019854:	2251      	movs	r2, #81	; 0x51
 8019856:	4659      	mov	r1, fp
 8019858:	4648      	mov	r0, r9
    return (lv_coord_t)v.num;
 801985a:	9306      	str	r3, [sp, #24]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_ROUNDED);
 801985c:	f7ed fd84 	bl	8007368 <lv_obj_get_style_prop>
    lv_coord_t rin       = rout - w;
 8019860:	9b03      	ldr	r3, [sp, #12]
    return (lv_coord_t)v.num;
 8019862:	b204      	sxth	r4, r0
 8019864:	eba3 0a0a 	sub.w	sl, r3, sl
    extra_area = rounded ? w / 2 + 2 : 0;
 8019868:	9b06      	ldr	r3, [sp, #24]
    lv_coord_t rin       = rout - w;
 801986a:	fa0f fa8a 	sxth.w	sl, sl
    extra_area = rounded ? w / 2 + 2 : 0;
 801986e:	b124      	cbz	r4, 801987a <inv_arc_area+0x10c>
 8019870:	eb03 74d3 	add.w	r4, r3, r3, lsr #31
 8019874:	1064      	asrs	r4, r4, #1
 8019876:	3402      	adds	r4, #2
 8019878:	b224      	sxth	r4, r4
    if(part == LV_PART_INDICATOR) {
 801987a:	f5bb 3f00 	cmp.w	fp, #131072	; 0x20000
 801987e:	d139      	bne.n	80198f4 <inv_arc_area+0x186>
        lv_coord_t knob_extra_size = lv_obj_calculate_ext_draw_size(obj, LV_PART_KNOB);
 8019880:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8019884:	4648      	mov	r0, r9
 8019886:	9309      	str	r3, [sp, #36]	; 0x24
 8019888:	f7eb f8dd 	bl	8004a46 <lv_obj_calculate_ext_draw_size>
        lv_coord_t knob_left = lv_obj_get_style_pad_left(obj, LV_PART_KNOB);
 801988c:	f44f 3140 	mov.w	r1, #196608	; 0x30000
        lv_coord_t knob_extra_size = lv_obj_calculate_ext_draw_size(obj, LV_PART_KNOB);
 8019890:	9006      	str	r0, [sp, #24]
        lv_coord_t knob_left = lv_obj_get_style_pad_left(obj, LV_PART_KNOB);
 8019892:	4648      	mov	r0, r9
 8019894:	f7ff fed9 	bl	801964a <lv_obj_get_style_pad_left>
        lv_coord_t knob_right = lv_obj_get_style_pad_right(obj, LV_PART_KNOB);
 8019898:	f44f 3140 	mov.w	r1, #196608	; 0x30000
        lv_coord_t knob_left = lv_obj_get_style_pad_left(obj, LV_PART_KNOB);
 801989c:	9007      	str	r0, [sp, #28]
        lv_coord_t knob_right = lv_obj_get_style_pad_right(obj, LV_PART_KNOB);
 801989e:	4648      	mov	r0, r9
 80198a0:	f7ff feda 	bl	8019658 <lv_obj_get_style_pad_right>
        lv_coord_t knob_top = lv_obj_get_style_pad_top(obj, LV_PART_KNOB);
 80198a4:	f44f 3140 	mov.w	r1, #196608	; 0x30000
        lv_coord_t knob_right = lv_obj_get_style_pad_right(obj, LV_PART_KNOB);
 80198a8:	9008      	str	r0, [sp, #32]
        lv_coord_t knob_top = lv_obj_get_style_pad_top(obj, LV_PART_KNOB);
 80198aa:	4648      	mov	r0, r9
 80198ac:	f7ff fedb 	bl	8019666 <lv_obj_get_style_pad_top>
        lv_coord_t knob_bottom = lv_obj_get_style_pad_bottom(obj, LV_PART_KNOB);
 80198b0:	f44f 3140 	mov.w	r1, #196608	; 0x30000
        lv_coord_t knob_top = lv_obj_get_style_pad_top(obj, LV_PART_KNOB);
 80198b4:	4683      	mov	fp, r0
        lv_coord_t knob_bottom = lv_obj_get_style_pad_bottom(obj, LV_PART_KNOB);
 80198b6:	4648      	mov	r0, r9
 80198b8:	f7ff fedc 	bl	8019674 <lv_obj_get_style_pad_bottom>
        knob_extra_size += LV_MAX4(knob_left, knob_right, knob_top, knob_bottom);
 80198bc:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 80198c0:	4293      	cmp	r3, r2
 80198c2:	bfb8      	it	lt
 80198c4:	4613      	movlt	r3, r2
 80198c6:	b21a      	sxth	r2, r3
 80198c8:	9b06      	ldr	r3, [sp, #24]
 80198ca:	4593      	cmp	fp, r2
 80198cc:	bfb8      	it	lt
 80198ce:	4693      	movlt	fp, r2
 80198d0:	fa0f fb8b 	sxth.w	fp, fp
 80198d4:	4583      	cmp	fp, r0
 80198d6:	bfac      	ite	ge
 80198d8:	445b      	addge	r3, fp
 80198da:	181b      	addlt	r3, r3, r0
 80198dc:	4618      	mov	r0, r3
        extra_area = LV_MAX(extra_area, w / 2 + 2 + knob_extra_size);
 80198de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80198e0:	eb03 72d3 	add.w	r2, r3, r3, lsr #31
 80198e4:	1052      	asrs	r2, r2, #1
 80198e6:	3202      	adds	r2, #2
 80198e8:	fa02 f280 	sxtah	r2, r2, r0
 80198ec:	4294      	cmp	r4, r2
 80198ee:	bfb8      	it	lt
 80198f0:	4614      	movlt	r4, r2
 80198f2:	b224      	sxth	r4, r4
    if(start_quarter == end_quarter && start_angle <= end_angle) {
 80198f4:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
 80198f8:	4293      	cmp	r3, r2
 80198fa:	f040 80de 	bne.w	8019aba <inv_arc_area+0x34c>
 80198fe:	42af      	cmp	r7, r5
 8019900:	f200 80db 	bhi.w	8019aba <inv_arc_area+0x34c>
        if(start_quarter == 0) {
 8019904:	2b00      	cmp	r3, #0
 8019906:	d140      	bne.n	801998a <inv_arc_area+0x21c>
            inv_area.y1 = y + ((lv_trigo_sin(start_angle) * rin) >> LV_TRIGO_SHIFT) - extra_area;
 8019908:	b238      	sxth	r0, r7
 801990a:	b2a4      	uxth	r4, r4
 801990c:	f7fd fe36 	bl	801757c <lv_trigo_sin>
 8019910:	9b00      	ldr	r3, [sp, #0]
 8019912:	fb00 f00a 	mul.w	r0, r0, sl
 8019916:	1b1b      	subs	r3, r3, r4
 8019918:	eb03 30e0 	add.w	r0, r3, r0, asr #15
 801991c:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
            inv_area.x2 = x + ((lv_trigo_sin(start_angle + 90) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 8019920:	f107 005a 	add.w	r0, r7, #90	; 0x5a
 8019924:	b200      	sxth	r0, r0
 8019926:	f7fd fe29 	bl	801757c <lv_trigo_sin>
 801992a:	eb08 0304 	add.w	r3, r8, r4
 801992e:	4370      	muls	r0, r6
 8019930:	eb03 30e0 	add.w	r0, r3, r0, asr #15
 8019934:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
            inv_area.y2 = y + ((lv_trigo_sin(end_angle) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 8019938:	b228      	sxth	r0, r5
 801993a:	f7fd fe1f 	bl	801757c <lv_trigo_sin>
 801993e:	9b00      	ldr	r3, [sp, #0]
 8019940:	4370      	muls	r0, r6
 8019942:	191e      	adds	r6, r3, r4
            inv_area.x1 = x + ((lv_trigo_sin(end_angle + 90) * rin) >> LV_TRIGO_SHIFT) - extra_area;
 8019944:	eba8 0404 	sub.w	r4, r8, r4
            inv_area.y2 = y + ((lv_trigo_sin(end_angle) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 8019948:	eb06 36e0 	add.w	r6, r6, r0, asr #15
            inv_area.x1 = x + ((lv_trigo_sin(end_angle + 90) * rin) >> LV_TRIGO_SHIFT) - extra_area;
 801994c:	f105 005a 	add.w	r0, r5, #90	; 0x5a
 8019950:	b200      	sxth	r0, r0
            inv_area.y2 = y + ((lv_trigo_sin(end_angle) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 8019952:	f8ad 602e 	strh.w	r6, [sp, #46]	; 0x2e
            inv_area.x1 = x + ((lv_trigo_sin(end_angle + 90) * rin) >> LV_TRIGO_SHIFT) - extra_area;
 8019956:	f7fd fe11 	bl	801757c <lv_trigo_sin>
 801995a:	fb0a f000 	mul.w	r0, sl, r0
 801995e:	eb04 34e0 	add.w	r4, r4, r0, asr #15
 8019962:	f8ad 4028 	strh.w	r4, [sp, #40]	; 0x28
        lv_obj_invalidate_area(obj, &inv_area);
 8019966:	a90a      	add	r1, sp, #40	; 0x28
 8019968:	4648      	mov	r0, r9
 801996a:	f7eb fbbb 	bl	80050e4 <lv_obj_invalidate_area>
}
 801996e:	b00d      	add	sp, #52	; 0x34
 8019970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_coord_t rout       = (LV_MIN(lv_obj_get_width(obj) - left - right, lv_obj_get_height(obj) - top - bottom)) / 2;
 8019974:	f7eb fa81 	bl	8004e7a <lv_obj_get_height>
 8019978:	eba0 000a 	sub.w	r0, r0, sl
 801997c:	eba0 0808 	sub.w	r8, r0, r8
 8019980:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
 8019984:	f348 064f 	sbfx	r6, r8, #1, #16
 8019988:	e747      	b.n	801981a <inv_arc_area+0xac>
        else if(start_quarter == 1) {
 801998a:	9b01      	ldr	r3, [sp, #4]
 801998c:	2b01      	cmp	r3, #1
 801998e:	d132      	bne.n	80199f6 <inv_arc_area+0x288>
            inv_area.y2 = y + ((lv_trigo_sin(start_angle) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 8019990:	b238      	sxth	r0, r7
 8019992:	f7fd fdf3 	bl	801757c <lv_trigo_sin>
 8019996:	9b00      	ldr	r3, [sp, #0]
 8019998:	fa1f fb84 	uxth.w	fp, r4
 801999c:	4370      	muls	r0, r6
 801999e:	fa13 f484 	uxtah	r4, r3, r4
 80199a2:	eb04 34e0 	add.w	r4, r4, r0, asr #15
            inv_area.x2 = x + ((lv_trigo_sin(start_angle + 90) * rin) >> LV_TRIGO_SHIFT) + extra_area;
 80199a6:	f107 005a 	add.w	r0, r7, #90	; 0x5a
 80199aa:	b200      	sxth	r0, r0
            inv_area.y2 = y + ((lv_trigo_sin(start_angle) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 80199ac:	f8ad 402e 	strh.w	r4, [sp, #46]	; 0x2e
            inv_area.x2 = x + ((lv_trigo_sin(start_angle + 90) * rin) >> LV_TRIGO_SHIFT) + extra_area;
 80199b0:	f7fd fde4 	bl	801757c <lv_trigo_sin>
 80199b4:	eb08 030b 	add.w	r3, r8, fp
 80199b8:	fb00 f00a 	mul.w	r0, r0, sl
            inv_area.x1 = x + ((lv_trigo_sin(end_angle + 90) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 80199bc:	eba8 080b 	sub.w	r8, r8, fp
            inv_area.x2 = x + ((lv_trigo_sin(start_angle + 90) * rin) >> LV_TRIGO_SHIFT) + extra_area;
 80199c0:	eb03 30e0 	add.w	r0, r3, r0, asr #15
 80199c4:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
            inv_area.y1 = y + ((lv_trigo_sin(end_angle) * rin) >> LV_TRIGO_SHIFT) - extra_area;
 80199c8:	b228      	sxth	r0, r5
 80199ca:	f7fd fdd7 	bl	801757c <lv_trigo_sin>
 80199ce:	9b00      	ldr	r3, [sp, #0]
 80199d0:	fb0a f000 	mul.w	r0, sl, r0
 80199d4:	eba3 0a0b 	sub.w	sl, r3, fp
 80199d8:	eb0a 3ae0 	add.w	sl, sl, r0, asr #15
            inv_area.x1 = x + ((lv_trigo_sin(end_angle + 90) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 80199dc:	f105 005a 	add.w	r0, r5, #90	; 0x5a
 80199e0:	b200      	sxth	r0, r0
            inv_area.y1 = y + ((lv_trigo_sin(end_angle) * rin) >> LV_TRIGO_SHIFT) - extra_area;
 80199e2:	f8ad a02a 	strh.w	sl, [sp, #42]	; 0x2a
            inv_area.x1 = x + ((lv_trigo_sin(end_angle + 90) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 80199e6:	f7fd fdc9 	bl	801757c <lv_trigo_sin>
 80199ea:	4370      	muls	r0, r6
 80199ec:	eb08 38e0 	add.w	r8, r8, r0, asr #15
 80199f0:	f8ad 8028 	strh.w	r8, [sp, #40]	; 0x28
            lv_obj_invalidate_area(obj, &inv_area);
 80199f4:	e7b7      	b.n	8019966 <inv_arc_area+0x1f8>
        else if(start_quarter == 2) {
 80199f6:	9b01      	ldr	r3, [sp, #4]
 80199f8:	2b02      	cmp	r3, #2
 80199fa:	d12e      	bne.n	8019a5a <inv_arc_area+0x2ec>
            inv_area.x1 = x + ((lv_trigo_sin(start_angle + 90) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 80199fc:	f107 005a 	add.w	r0, r7, #90	; 0x5a
 8019a00:	b2a4      	uxth	r4, r4
 8019a02:	b200      	sxth	r0, r0
 8019a04:	f7fd fdba 	bl	801757c <lv_trigo_sin>
 8019a08:	eba8 0304 	sub.w	r3, r8, r4
 8019a0c:	4370      	muls	r0, r6
 8019a0e:	eb03 30e0 	add.w	r0, r3, r0, asr #15
 8019a12:	f8ad 0028 	strh.w	r0, [sp, #40]	; 0x28
            inv_area.y2 = y + ((lv_trigo_sin(start_angle) * rin) >> LV_TRIGO_SHIFT) + extra_area;
 8019a16:	b238      	sxth	r0, r7
 8019a18:	f7fd fdb0 	bl	801757c <lv_trigo_sin>
 8019a1c:	9b00      	ldr	r3, [sp, #0]
 8019a1e:	fb00 f00a 	mul.w	r0, r0, sl
 8019a22:	4423      	add	r3, r4
 8019a24:	eb03 30e0 	add.w	r0, r3, r0, asr #15
 8019a28:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
            inv_area.y1 = y + ((lv_trigo_sin(end_angle) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 8019a2c:	b228      	sxth	r0, r5
 8019a2e:	f7fd fda5 	bl	801757c <lv_trigo_sin>
 8019a32:	9b00      	ldr	r3, [sp, #0]
 8019a34:	4370      	muls	r0, r6
 8019a36:	1b1e      	subs	r6, r3, r4
            inv_area.x2 = x + ((lv_trigo_sin(end_angle + 90) * rin) >> LV_TRIGO_SHIFT) + extra_area;
 8019a38:	4444      	add	r4, r8
            inv_area.y1 = y + ((lv_trigo_sin(end_angle) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 8019a3a:	eb06 36e0 	add.w	r6, r6, r0, asr #15
            inv_area.x2 = x + ((lv_trigo_sin(end_angle + 90) * rin) >> LV_TRIGO_SHIFT) + extra_area;
 8019a3e:	f105 005a 	add.w	r0, r5, #90	; 0x5a
 8019a42:	b200      	sxth	r0, r0
            inv_area.y1 = y + ((lv_trigo_sin(end_angle) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 8019a44:	f8ad 602a 	strh.w	r6, [sp, #42]	; 0x2a
            inv_area.x2 = x + ((lv_trigo_sin(end_angle + 90) * rin) >> LV_TRIGO_SHIFT) + extra_area;
 8019a48:	f7fd fd98 	bl	801757c <lv_trigo_sin>
 8019a4c:	fb0a f000 	mul.w	r0, sl, r0
 8019a50:	eb04 34e0 	add.w	r4, r4, r0, asr #15
 8019a54:	f8ad 402c 	strh.w	r4, [sp, #44]	; 0x2c
            lv_obj_invalidate_area(obj, &inv_area);
 8019a58:	e785      	b.n	8019966 <inv_arc_area+0x1f8>
        else if(start_quarter == 3) {
 8019a5a:	9b01      	ldr	r3, [sp, #4]
 8019a5c:	2b03      	cmp	r3, #3
 8019a5e:	d186      	bne.n	801996e <inv_arc_area+0x200>
            inv_area.x1 = x + ((lv_trigo_sin(start_angle + 90) * rin) >> LV_TRIGO_SHIFT) - extra_area;
 8019a60:	f107 005a 	add.w	r0, r7, #90	; 0x5a
 8019a64:	b2a4      	uxth	r4, r4
 8019a66:	b200      	sxth	r0, r0
 8019a68:	f7fd fd88 	bl	801757c <lv_trigo_sin>
 8019a6c:	eba8 0304 	sub.w	r3, r8, r4
 8019a70:	fb00 f00a 	mul.w	r0, r0, sl
            inv_area.x2 = x + ((lv_trigo_sin(end_angle + 90) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 8019a74:	44a0      	add	r8, r4
            inv_area.x1 = x + ((lv_trigo_sin(start_angle + 90) * rin) >> LV_TRIGO_SHIFT) - extra_area;
 8019a76:	eb03 30e0 	add.w	r0, r3, r0, asr #15
 8019a7a:	f8ad 0028 	strh.w	r0, [sp, #40]	; 0x28
            inv_area.y1 = y + ((lv_trigo_sin(start_angle) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 8019a7e:	b238      	sxth	r0, r7
 8019a80:	f7fd fd7c 	bl	801757c <lv_trigo_sin>
 8019a84:	9b00      	ldr	r3, [sp, #0]
 8019a86:	4370      	muls	r0, r6
 8019a88:	1b1b      	subs	r3, r3, r4
 8019a8a:	eb03 30e0 	add.w	r0, r3, r0, asr #15
 8019a8e:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
            inv_area.x2 = x + ((lv_trigo_sin(end_angle + 90) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 8019a92:	f105 005a 	add.w	r0, r5, #90	; 0x5a
 8019a96:	b200      	sxth	r0, r0
 8019a98:	f7fd fd70 	bl	801757c <lv_trigo_sin>
 8019a9c:	4370      	muls	r0, r6
 8019a9e:	eb08 38e0 	add.w	r8, r8, r0, asr #15
            inv_area.y2 = y + ((lv_trigo_sin(end_angle) * rin) >> LV_TRIGO_SHIFT) + extra_area;
 8019aa2:	b228      	sxth	r0, r5
            inv_area.x2 = x + ((lv_trigo_sin(end_angle + 90) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 8019aa4:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
            inv_area.y2 = y + ((lv_trigo_sin(end_angle) * rin) >> LV_TRIGO_SHIFT) + extra_area;
 8019aa8:	f7fd fd68 	bl	801757c <lv_trigo_sin>
 8019aac:	9b00      	ldr	r3, [sp, #0]
 8019aae:	fb0a f000 	mul.w	r0, sl, r0
 8019ab2:	441c      	add	r4, r3
        inv_area.y2 = y + ((lv_trigo_sin(start_angle) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 8019ab4:	eb04 34e0 	add.w	r4, r4, r0, asr #15
 8019ab8:	e03c      	b.n	8019b34 <inv_arc_area+0x3c6>
    else if(start_quarter == 0 && end_quarter == 1) {
 8019aba:	9b01      	ldr	r3, [sp, #4]
 8019abc:	2b00      	cmp	r3, #0
 8019abe:	d13c      	bne.n	8019b3a <inv_arc_area+0x3cc>
 8019ac0:	9b02      	ldr	r3, [sp, #8]
 8019ac2:	2b01      	cmp	r3, #1
 8019ac4:	f040 80f1 	bne.w	8019caa <inv_arc_area+0x53c>
        inv_area.x1 = x + ((lv_trigo_sin(end_angle + 90) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 8019ac8:	f105 005a 	add.w	r0, r5, #90	; 0x5a
 8019acc:	b2a4      	uxth	r4, r4
 8019ace:	b200      	sxth	r0, r0
 8019ad0:	f7fd fd54 	bl	801757c <lv_trigo_sin>
 8019ad4:	eba8 0304 	sub.w	r3, r8, r4
 8019ad8:	4370      	muls	r0, r6
        inv_area.y1 = y + ((LV_MIN(lv_trigo_sin(end_angle),
 8019ada:	b22a      	sxth	r2, r5
 8019adc:	b23d      	sxth	r5, r7
        inv_area.x2 = x + ((lv_trigo_sin(start_angle + 90) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 8019ade:	44a0      	add	r8, r4
        inv_area.x1 = x + ((lv_trigo_sin(end_angle + 90) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 8019ae0:	eb03 30e0 	add.w	r0, r3, r0, asr #15
        inv_area.y1 = y + ((LV_MIN(lv_trigo_sin(end_angle),
 8019ae4:	9201      	str	r2, [sp, #4]
        inv_area.x1 = x + ((lv_trigo_sin(end_angle + 90) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 8019ae6:	f8ad 0028 	strh.w	r0, [sp, #40]	; 0x28
        inv_area.y1 = y + ((LV_MIN(lv_trigo_sin(end_angle),
 8019aea:	4610      	mov	r0, r2
 8019aec:	f7fd fd46 	bl	801757c <lv_trigo_sin>
 8019af0:	4683      	mov	fp, r0
 8019af2:	4628      	mov	r0, r5
 8019af4:	f7fd fd42 	bl	801757c <lv_trigo_sin>
 8019af8:	4583      	cmp	fp, r0
 8019afa:	bfb6      	itet	lt
 8019afc:	9a01      	ldrlt	r2, [sp, #4]
 8019afe:	4628      	movge	r0, r5
 8019b00:	4610      	movlt	r0, r2
 8019b02:	f7fd fd3b 	bl	801757c <lv_trigo_sin>
                                        lv_trigo_sin(start_angle))  * rin) >> LV_TRIGO_SHIFT) - extra_area;
 8019b06:	9b00      	ldr	r3, [sp, #0]
 8019b08:	fb00 f00a 	mul.w	r0, r0, sl
 8019b0c:	eba3 0a04 	sub.w	sl, r3, r4
 8019b10:	eb0a 30e0 	add.w	r0, sl, r0, asr #15
        inv_area.y1 = y + ((LV_MIN(lv_trigo_sin(end_angle),
 8019b14:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
        inv_area.x2 = x + ((lv_trigo_sin(start_angle + 90) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 8019b18:	f107 005a 	add.w	r0, r7, #90	; 0x5a
 8019b1c:	b200      	sxth	r0, r0
 8019b1e:	f7fd fd2d 	bl	801757c <lv_trigo_sin>
        inv_area.y2 = y + rout + extra_area;
 8019b22:	9b03      	ldr	r3, [sp, #12]
 8019b24:	9a00      	ldr	r2, [sp, #0]
        inv_area.x2 = x + ((lv_trigo_sin(start_angle + 90) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 8019b26:	4370      	muls	r0, r6
        inv_area.y2 = y + rout + extra_area;
 8019b28:	4413      	add	r3, r2
        inv_area.x2 = x + ((lv_trigo_sin(start_angle + 90) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 8019b2a:	eb08 38e0 	add.w	r8, r8, r0, asr #15
        inv_area.y2 = y + rout + extra_area;
 8019b2e:	441c      	add	r4, r3
        inv_area.x2 = x + ((lv_trigo_sin(start_angle + 90) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 8019b30:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
        inv_area.y2 = y + ((lv_trigo_sin(start_angle) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 8019b34:	f8ad 402e 	strh.w	r4, [sp, #46]	; 0x2e
        lv_obj_invalidate_area(obj, &inv_area);
 8019b38:	e715      	b.n	8019966 <inv_arc_area+0x1f8>
    else if(start_quarter == 1 && end_quarter == 2) {
 8019b3a:	9b01      	ldr	r3, [sp, #4]
 8019b3c:	2b01      	cmp	r3, #1
 8019b3e:	d135      	bne.n	8019bac <inv_arc_area+0x43e>
 8019b40:	9b02      	ldr	r3, [sp, #8]
 8019b42:	2b02      	cmp	r3, #2
 8019b44:	f040 80b1 	bne.w	8019caa <inv_arc_area+0x53c>
        inv_area.x1 = x - rout - extra_area;
 8019b48:	b2a4      	uxth	r4, r4
 8019b4a:	9b05      	ldr	r3, [sp, #20]
        inv_area.x2 = x + ((LV_MAX(lv_trigo_sin(start_angle + 90),
 8019b4c:	f107 0b5a 	add.w	fp, r7, #90	; 0x5a
        inv_area.x1 = x - rout - extra_area;
 8019b50:	1b18      	subs	r0, r3, r4
                                        lv_trigo_sin(end_angle + 90)) * rin) >> LV_TRIGO_SHIFT) + extra_area;
 8019b52:	44a0      	add	r8, r4
        inv_area.x2 = x + ((LV_MAX(lv_trigo_sin(start_angle + 90),
 8019b54:	fa0f fb8b 	sxth.w	fp, fp
        inv_area.x1 = x - rout - extra_area;
 8019b58:	f8ad 0028 	strh.w	r0, [sp, #40]	; 0x28
        inv_area.y1 = y + ((lv_trigo_sin(end_angle) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 8019b5c:	b228      	sxth	r0, r5
 8019b5e:	f7fd fd0d 	bl	801757c <lv_trigo_sin>
 8019b62:	9b00      	ldr	r3, [sp, #0]
 8019b64:	4370      	muls	r0, r6
        inv_area.x2 = x + ((LV_MAX(lv_trigo_sin(start_angle + 90),
 8019b66:	355a      	adds	r5, #90	; 0x5a
        inv_area.y1 = y + ((lv_trigo_sin(end_angle) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 8019b68:	1b1b      	subs	r3, r3, r4
        inv_area.x2 = x + ((LV_MAX(lv_trigo_sin(start_angle + 90),
 8019b6a:	b22d      	sxth	r5, r5
        inv_area.y1 = y + ((lv_trigo_sin(end_angle) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 8019b6c:	eb03 30e0 	add.w	r0, r3, r0, asr #15
 8019b70:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
        inv_area.x2 = x + ((LV_MAX(lv_trigo_sin(start_angle + 90),
 8019b74:	4658      	mov	r0, fp
 8019b76:	f7fd fd01 	bl	801757c <lv_trigo_sin>
 8019b7a:	9001      	str	r0, [sp, #4]
 8019b7c:	4628      	mov	r0, r5
 8019b7e:	f7fd fcfd 	bl	801757c <lv_trigo_sin>
 8019b82:	9b01      	ldr	r3, [sp, #4]
 8019b84:	4283      	cmp	r3, r0
 8019b86:	bfcc      	ite	gt
 8019b88:	4658      	movgt	r0, fp
 8019b8a:	4628      	movle	r0, r5
 8019b8c:	f7fd fcf6 	bl	801757c <lv_trigo_sin>
                                        lv_trigo_sin(end_angle + 90)) * rin) >> LV_TRIGO_SHIFT) + extra_area;
 8019b90:	fb00 f00a 	mul.w	r0, r0, sl
 8019b94:	eb08 30e0 	add.w	r0, r8, r0, asr #15
        inv_area.x2 = x + ((LV_MAX(lv_trigo_sin(start_angle + 90),
 8019b98:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
        inv_area.y2 = y + ((lv_trigo_sin(start_angle) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 8019b9c:	b238      	sxth	r0, r7
 8019b9e:	f7fd fced 	bl	801757c <lv_trigo_sin>
 8019ba2:	9b00      	ldr	r3, [sp, #0]
 8019ba4:	4370      	muls	r0, r6
 8019ba6:	4423      	add	r3, r4
 8019ba8:	461c      	mov	r4, r3
 8019baa:	e783      	b.n	8019ab4 <inv_arc_area+0x346>
    else if(start_quarter == 2 && end_quarter == 3) {
 8019bac:	9b01      	ldr	r3, [sp, #4]
 8019bae:	2b02      	cmp	r3, #2
 8019bb0:	d13a      	bne.n	8019c28 <inv_arc_area+0x4ba>
 8019bb2:	9b02      	ldr	r3, [sp, #8]
 8019bb4:	2b03      	cmp	r3, #3
 8019bb6:	d178      	bne.n	8019caa <inv_arc_area+0x53c>
        inv_area.x1 = x + ((lv_trigo_sin(start_angle + 90) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 8019bb8:	f107 005a 	add.w	r0, r7, #90	; 0x5a
 8019bbc:	b2a4      	uxth	r4, r4
        inv_area.y2 = y + (LV_MAX(lv_trigo_sin(end_angle) * rin,
 8019bbe:	b23f      	sxth	r7, r7
        inv_area.x1 = x + ((lv_trigo_sin(start_angle + 90) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 8019bc0:	b200      	sxth	r0, r0
 8019bc2:	f7fd fcdb 	bl	801757c <lv_trigo_sin>
 8019bc6:	eba8 0304 	sub.w	r3, r8, r4
 8019bca:	4370      	muls	r0, r6
        inv_area.x2 = x + ((lv_trigo_sin(end_angle + 90) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 8019bcc:	44a0      	add	r8, r4
        inv_area.x1 = x + ((lv_trigo_sin(start_angle + 90) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 8019bce:	eb03 30e0 	add.w	r0, r3, r0, asr #15
        inv_area.y1 = y - rout - extra_area;
 8019bd2:	9b04      	ldr	r3, [sp, #16]
        inv_area.x1 = x + ((lv_trigo_sin(start_angle + 90) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 8019bd4:	f8ad 0028 	strh.w	r0, [sp, #40]	; 0x28
        inv_area.y1 = y - rout - extra_area;
 8019bd8:	1b18      	subs	r0, r3, r4
 8019bda:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
        inv_area.x2 = x + ((lv_trigo_sin(end_angle + 90) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 8019bde:	f105 005a 	add.w	r0, r5, #90	; 0x5a
        inv_area.y2 = y + (LV_MAX(lv_trigo_sin(end_angle) * rin,
 8019be2:	b22d      	sxth	r5, r5
        inv_area.x2 = x + ((lv_trigo_sin(end_angle + 90) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 8019be4:	b200      	sxth	r0, r0
 8019be6:	f7fd fcc9 	bl	801757c <lv_trigo_sin>
 8019bea:	4370      	muls	r0, r6
 8019bec:	eb08 38e0 	add.w	r8, r8, r0, asr #15
        inv_area.y2 = y + (LV_MAX(lv_trigo_sin(end_angle) * rin,
 8019bf0:	4628      	mov	r0, r5
        inv_area.x2 = x + ((lv_trigo_sin(end_angle + 90) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 8019bf2:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
        inv_area.y2 = y + (LV_MAX(lv_trigo_sin(end_angle) * rin,
 8019bf6:	f7fd fcc1 	bl	801757c <lv_trigo_sin>
 8019bfa:	fb00 f60a 	mul.w	r6, r0, sl
 8019bfe:	4638      	mov	r0, r7
 8019c00:	f7fd fcbc 	bl	801757c <lv_trigo_sin>
 8019c04:	fb0a f000 	mul.w	r0, sl, r0
 8019c08:	4286      	cmp	r6, r0
 8019c0a:	bfcc      	ite	gt
 8019c0c:	4628      	movgt	r0, r5
 8019c0e:	4638      	movle	r0, r7
 8019c10:	f7fd fcb4 	bl	801757c <lv_trigo_sin>
                                       lv_trigo_sin(start_angle) * rin) >> LV_TRIGO_SHIFT) + extra_area;
 8019c14:	9b00      	ldr	r3, [sp, #0]
        inv_area.y2 = y + (LV_MAX(lv_trigo_sin(end_angle) * rin,
 8019c16:	fb0a f000 	mul.w	r0, sl, r0
                                       lv_trigo_sin(start_angle) * rin) >> LV_TRIGO_SHIFT) + extra_area;
 8019c1a:	4423      	add	r3, r4
        inv_area.y2 = y + (LV_MAX(lv_trigo_sin(end_angle) * rin,
 8019c1c:	f3c0 3acf 	ubfx	sl, r0, #15, #16
                                       lv_trigo_sin(start_angle) * rin) >> LV_TRIGO_SHIFT) + extra_area;
 8019c20:	449a      	add	sl, r3
        inv_area.y2 = y + (LV_MAX(lv_trigo_sin(end_angle) * rin,
 8019c22:	f8ad a02e 	strh.w	sl, [sp, #46]	; 0x2e
        lv_obj_invalidate_area(obj, &inv_area);
 8019c26:	e69e      	b.n	8019966 <inv_arc_area+0x1f8>
    else if(start_quarter == 3 && end_quarter == 0) {
 8019c28:	9b01      	ldr	r3, [sp, #4]
 8019c2a:	2b03      	cmp	r3, #3
 8019c2c:	d13d      	bne.n	8019caa <inv_arc_area+0x53c>
 8019c2e:	9b02      	ldr	r3, [sp, #8]
 8019c30:	2b00      	cmp	r3, #0
 8019c32:	d13a      	bne.n	8019caa <inv_arc_area+0x53c>
        inv_area.x1 = x + ((LV_MIN(lv_trigo_sin(end_angle + 90),
 8019c34:	f105 035a 	add.w	r3, r5, #90	; 0x5a
 8019c38:	f107 0b5a 	add.w	fp, r7, #90	; 0x5a
                                        lv_trigo_sin(start_angle + 90)) * rin) >> LV_TRIGO_SHIFT) - extra_area;
 8019c3c:	b2a4      	uxth	r4, r4
        inv_area.x1 = x + ((LV_MIN(lv_trigo_sin(end_angle + 90),
 8019c3e:	b21b      	sxth	r3, r3
 8019c40:	fa0f fb8b 	sxth.w	fp, fp
 8019c44:	4618      	mov	r0, r3
 8019c46:	9302      	str	r3, [sp, #8]
 8019c48:	f7fd fc98 	bl	801757c <lv_trigo_sin>
 8019c4c:	9001      	str	r0, [sp, #4]
 8019c4e:	4658      	mov	r0, fp
 8019c50:	f7fd fc94 	bl	801757c <lv_trigo_sin>
 8019c54:	9a01      	ldr	r2, [sp, #4]
 8019c56:	4282      	cmp	r2, r0
 8019c58:	bfb6      	itet	lt
 8019c5a:	9b02      	ldrlt	r3, [sp, #8]
 8019c5c:	4658      	movge	r0, fp
 8019c5e:	4618      	movlt	r0, r3
 8019c60:	f7fd fc8c 	bl	801757c <lv_trigo_sin>
                                        lv_trigo_sin(start_angle + 90)) * rin) >> LV_TRIGO_SHIFT) - extra_area;
 8019c64:	fb00 f00a 	mul.w	r0, r0, sl
 8019c68:	eba8 0a04 	sub.w	sl, r8, r4
 8019c6c:	eb0a 30e0 	add.w	r0, sl, r0, asr #15
        inv_area.x1 = x + ((LV_MIN(lv_trigo_sin(end_angle + 90),
 8019c70:	f8ad 0028 	strh.w	r0, [sp, #40]	; 0x28
        inv_area.y1 = y + ((lv_trigo_sin(start_angle) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 8019c74:	b238      	sxth	r0, r7
 8019c76:	f7fd fc81 	bl	801757c <lv_trigo_sin>
 8019c7a:	9b00      	ldr	r3, [sp, #0]
 8019c7c:	4370      	muls	r0, r6
 8019c7e:	1b1b      	subs	r3, r3, r4
 8019c80:	eb03 30e0 	add.w	r0, r3, r0, asr #15
        inv_area.x2 = x + rout + extra_area;
 8019c84:	9b03      	ldr	r3, [sp, #12]
 8019c86:	4443      	add	r3, r8
        inv_area.y1 = y + ((lv_trigo_sin(start_angle) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 8019c88:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
        inv_area.y2 = y + ((lv_trigo_sin(end_angle) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 8019c8c:	b228      	sxth	r0, r5
        inv_area.x2 = x + rout + extra_area;
 8019c8e:	4698      	mov	r8, r3
 8019c90:	44a0      	add	r8, r4
 8019c92:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
        inv_area.y2 = y + ((lv_trigo_sin(end_angle) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 8019c96:	f7fd fc71 	bl	801757c <lv_trigo_sin>
 8019c9a:	9b00      	ldr	r3, [sp, #0]
 8019c9c:	4370      	muls	r0, r6
 8019c9e:	191e      	adds	r6, r3, r4
 8019ca0:	eb06 30e0 	add.w	r0, r6, r0, asr #15
 8019ca4:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 8019ca8:	e65d      	b.n	8019966 <inv_arc_area+0x1f8>
        lv_obj_invalidate(obj);
 8019caa:	4648      	mov	r0, r9
 8019cac:	f7eb fa34 	bl	8005118 <lv_obj_invalidate>
 8019cb0:	e65d      	b.n	801996e <inv_arc_area+0x200>

08019cb2 <lv_arc_set_start_angle>:
    if(start > 360) start -= 360;
 8019cb2:	f5b1 7fb4 	cmp.w	r1, #360	; 0x168
{
 8019cb6:	b538      	push	{r3, r4, r5, lr}
 8019cb8:	460c      	mov	r4, r1
    if(start > 360) start -= 360;
 8019cba:	bf88      	it	hi
 8019cbc:	f5a1 74b4 	subhi.w	r4, r1, #360	; 0x168
    if(LV_ABS(start -arc->indic_angle_start) >= 180) {
 8019cc0:	8cc1      	ldrh	r1, [r0, #38]	; 0x26
{
 8019cc2:	4605      	mov	r5, r0
    if(start > 360) start -= 360;
 8019cc4:	bf88      	it	hi
 8019cc6:	b2a4      	uxthhi	r4, r4
    if(LV_ABS(start -arc->indic_angle_start) >= 180) {
 8019cc8:	1a63      	subs	r3, r4, r1
 8019cca:	2b00      	cmp	r3, #0
 8019ccc:	bfb8      	it	lt
 8019cce:	425b      	neglt	r3, r3
 8019cd0:	2bb3      	cmp	r3, #179	; 0xb3
 8019cd2:	dd04      	ble.n	8019cde <lv_arc_set_start_angle+0x2c>
        lv_obj_invalidate(obj);
 8019cd4:	4628      	mov	r0, r5
 8019cd6:	f7eb fa1f 	bl	8005118 <lv_obj_invalidate>
   arc->indic_angle_start = start;
 8019cda:	84ec      	strh	r4, [r5, #38]	; 0x26
}
 8019cdc:	bd38      	pop	{r3, r4, r5, pc}
    else if(arc->indic_angle_start >arc->indic_angle_end && start >arc->indic_angle_end) {
 8019cde:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 8019ce0:	4299      	cmp	r1, r3
 8019ce2:	d90e      	bls.n	8019d02 <lv_arc_set_start_angle+0x50>
 8019ce4:	42a3      	cmp	r3, r4
 8019ce6:	d20c      	bcs.n	8019d02 <lv_arc_set_start_angle+0x50>
        inv_arc_area(obj, LV_MIN(arc->indic_angle_start, start), LV_MAX(arc->indic_angle_start, start),
 8019ce8:	42a1      	cmp	r1, r4
 8019cea:	460a      	mov	r2, r1
 8019cec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8019cf0:	4628      	mov	r0, r5
 8019cf2:	bf38      	it	cc
 8019cf4:	4622      	movcc	r2, r4
 8019cf6:	42a1      	cmp	r1, r4
 8019cf8:	bf28      	it	cs
 8019cfa:	4621      	movcs	r1, r4
 8019cfc:	f7ff fd37 	bl	801976e <inv_arc_area>
 8019d00:	e7eb      	b.n	8019cda <lv_arc_set_start_angle+0x28>
    else  if(arc->indic_angle_start <arc->indic_angle_end && start <arc->indic_angle_end) {
 8019d02:	4299      	cmp	r1, r3
 8019d04:	d2e6      	bcs.n	8019cd4 <lv_arc_set_start_angle+0x22>
 8019d06:	42a3      	cmp	r3, r4
 8019d08:	d9e4      	bls.n	8019cd4 <lv_arc_set_start_angle+0x22>
 8019d0a:	e7ed      	b.n	8019ce8 <lv_arc_set_start_angle+0x36>

08019d0c <lv_arc_set_end_angle>:
{
 8019d0c:	b538      	push	{r3, r4, r5, lr}
    if(end > (arc->indic_angle_start + 360)) end =arc->indic_angle_start + 360;
 8019d0e:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
{
 8019d10:	460c      	mov	r4, r1
 8019d12:	4605      	mov	r5, r0
    if(end > (arc->indic_angle_start + 360)) end =arc->indic_angle_start + 360;
 8019d14:	f503 72b4 	add.w	r2, r3, #360	; 0x168
 8019d18:	4291      	cmp	r1, r2
    if(LV_ABS(end -arc->indic_angle_end) >= 180) {
 8019d1a:	8d01      	ldrh	r1, [r0, #40]	; 0x28
    if(end > (arc->indic_angle_start + 360)) end =arc->indic_angle_start + 360;
 8019d1c:	bfc8      	it	gt
 8019d1e:	b294      	uxthgt	r4, r2
    if(LV_ABS(end -arc->indic_angle_end) >= 180) {
 8019d20:	1a62      	subs	r2, r4, r1
 8019d22:	2a00      	cmp	r2, #0
 8019d24:	bfb8      	it	lt
 8019d26:	4252      	neglt	r2, r2
 8019d28:	2ab3      	cmp	r2, #179	; 0xb3
 8019d2a:	dd04      	ble.n	8019d36 <lv_arc_set_end_angle+0x2a>
        lv_obj_invalidate(obj);
 8019d2c:	4628      	mov	r0, r5
 8019d2e:	f7eb f9f3 	bl	8005118 <lv_obj_invalidate>
   arc->indic_angle_end = end;
 8019d32:	852c      	strh	r4, [r5, #40]	; 0x28
}
 8019d34:	bd38      	pop	{r3, r4, r5, pc}
    else if(arc->indic_angle_end >arc->indic_angle_start && end >arc->indic_angle_start) {
 8019d36:	428b      	cmp	r3, r1
 8019d38:	d20e      	bcs.n	8019d58 <lv_arc_set_end_angle+0x4c>
 8019d3a:	42a3      	cmp	r3, r4
 8019d3c:	d20c      	bcs.n	8019d58 <lv_arc_set_end_angle+0x4c>
        inv_arc_area(obj, LV_MIN(arc->indic_angle_end, end), LV_MAX(arc->indic_angle_end, end), LV_PART_INDICATOR);
 8019d3e:	42a1      	cmp	r1, r4
 8019d40:	460a      	mov	r2, r1
 8019d42:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8019d46:	4628      	mov	r0, r5
 8019d48:	bf38      	it	cc
 8019d4a:	4622      	movcc	r2, r4
 8019d4c:	42a1      	cmp	r1, r4
 8019d4e:	bf28      	it	cs
 8019d50:	4621      	movcs	r1, r4
 8019d52:	f7ff fd0c 	bl	801976e <inv_arc_area>
 8019d56:	e7ec      	b.n	8019d32 <lv_arc_set_end_angle+0x26>
    else  if(arc->indic_angle_end <arc->indic_angle_start && end <arc->indic_angle_start) {
 8019d58:	428b      	cmp	r3, r1
 8019d5a:	d9e7      	bls.n	8019d2c <lv_arc_set_end_angle+0x20>
 8019d5c:	42a3      	cmp	r3, r4
 8019d5e:	d9e5      	bls.n	8019d2c <lv_arc_set_end_angle+0x20>
 8019d60:	e7ed      	b.n	8019d3e <lv_arc_set_end_angle+0x32>

08019d62 <value_update>:
/**
 * Used internally to update arc angles after a value change
 * @param arc pointer to a arc object
 */
static void value_update(lv_obj_t * obj)
{
 8019d62:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019d64:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, MY_CLASS);
    lv_arc_t * arc = (lv_arc_t *)obj;

    /*If the value is still not set to any value do not update*/
    if(arc->value == VALUE_UNSET) return;
 8019d66:	f9b0 002e 	ldrsh.w	r0, [r0, #46]	; 0x2e
 8019d6a:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8019d6e:	d03c      	beq.n	8019dea <value_update+0x88>

    int16_t bg_midpoint, range_midpoint, bg_end =arc->bg_angle_end;
 8019d70:	8da5      	ldrh	r5, [r4, #44]	; 0x2c
    if(arc->bg_angle_end <arc->bg_angle_start) bg_end =arc->bg_angle_end + 360;
 8019d72:	8d63      	ldrh	r3, [r4, #42]	; 0x2a

    int16_t angle;
    switch(arc->type) {
 8019d74:	f894 6034 	ldrb.w	r6, [r4, #52]	; 0x34
    if(arc->bg_angle_end <arc->bg_angle_start) bg_end =arc->bg_angle_end + 360;
 8019d78:	429d      	cmp	r5, r3
 8019d7a:	f9b4 1030 	ldrsh.w	r1, [r4, #48]	; 0x30
    switch(arc->type) {
 8019d7e:	f3c6 0641 	ubfx	r6, r6, #1, #2
 8019d82:	f9b4 2032 	ldrsh.w	r2, [r4, #50]	; 0x32
    if(arc->bg_angle_end <arc->bg_angle_start) bg_end =arc->bg_angle_end + 360;
 8019d86:	bf3c      	itt	cc
 8019d88:	f505 75b4 	addcc.w	r5, r5, #360	; 0x168
 8019d8c:	b2ad      	uxthcc	r5, r5
    switch(arc->type) {
 8019d8e:	2e01      	cmp	r6, #1
 8019d90:	b22d      	sxth	r5, r5
 8019d92:	d00b      	beq.n	8019dac <value_update+0x4a>
 8019d94:	2e02      	cmp	r6, #2
 8019d96:	d037      	beq.n	8019e08 <value_update+0xa6>
        case LV_ARC_MODE_REVERSE:
            angle = lv_map(arc->value,arc->min_value,arc->max_value,arc->bg_angle_start, bg_end);
            lv_arc_set_start_angle(obj, angle);
            break;
        default: /** LV_ARC_TYPE_NORMAL*/
            angle = lv_map(arc->value,arc->min_value,arc->max_value,arc->bg_angle_start, bg_end);
 8019d98:	9500      	str	r5, [sp, #0]
 8019d9a:	f7fd fc9c 	bl	80176d6 <lv_map>
            lv_arc_set_end_angle(obj, angle);
 8019d9e:	b281      	uxth	r1, r0
            angle = lv_map(arc->value,arc->min_value,arc->max_value,arc->bg_angle_start, bg_end);
 8019da0:	b205      	sxth	r5, r0
            lv_arc_set_end_angle(obj, angle);
 8019da2:	4620      	mov	r0, r4
 8019da4:	f7ff ffb2 	bl	8019d0c <lv_arc_set_end_angle>
            lv_arc_set_start_angle(obj,arc->bg_angle_start);
 8019da8:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8019daa:	e032      	b.n	8019e12 <value_update+0xb0>
            range_midpoint = (int32_t)(arc->min_value +arc->max_value) / 2;
 8019dac:	188e      	adds	r6, r1, r2
            bg_midpoint = (arc->bg_angle_start + bg_end) / 2;
 8019dae:	18ef      	adds	r7, r5, r3
            range_midpoint = (int32_t)(arc->min_value +arc->max_value) / 2;
 8019db0:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
            bg_midpoint = (arc->bg_angle_start + bg_end) / 2;
 8019db4:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
            range_midpoint = (int32_t)(arc->min_value +arc->max_value) / 2;
 8019db8:	ea4f 0c66 	mov.w	ip, r6, asr #1
            if(arc->value < range_midpoint) {
 8019dbc:	f346 064f 	sbfx	r6, r6, #1, #16
 8019dc0:	f347 0e4f 	sbfx	lr, r7, #1, #16
 8019dc4:	f3c7 074f 	ubfx	r7, r7, #1, #16
 8019dc8:	42b0      	cmp	r0, r6
 8019dca:	da10      	bge.n	8019dee <value_update+0x8c>
                angle = lv_map(arc->value,arc->min_value, range_midpoint,arc->bg_angle_start, bg_midpoint);
 8019dcc:	4662      	mov	r2, ip
 8019dce:	f8cd e000 	str.w	lr, [sp]
 8019dd2:	f7fd fc80 	bl	80176d6 <lv_map>
                lv_arc_set_start_angle(obj, angle);
 8019dd6:	b281      	uxth	r1, r0
                angle = lv_map(arc->value,arc->min_value, range_midpoint,arc->bg_angle_start, bg_midpoint);
 8019dd8:	b205      	sxth	r5, r0
                lv_arc_set_start_angle(obj, angle);
 8019dda:	4620      	mov	r0, r4
 8019ddc:	f7ff ff69 	bl	8019cb2 <lv_arc_set_start_angle>
                lv_arc_set_end_angle(obj, bg_midpoint);
 8019de0:	4639      	mov	r1, r7
                lv_arc_set_end_angle(obj, angle);
 8019de2:	4620      	mov	r0, r4
 8019de4:	f7ff ff92 	bl	8019d0c <lv_arc_set_end_angle>
    }
   arc->last_angle = angle; /*Cache angle for slew rate limiting*/
 8019de8:	87a5      	strh	r5, [r4, #60]	; 0x3c
}
 8019dea:	b003      	add	sp, #12
 8019dec:	bdf0      	pop	{r4, r5, r6, r7, pc}
                angle = lv_map(arc->value, range_midpoint,arc->max_value, bg_midpoint, bg_end);
 8019dee:	4661      	mov	r1, ip
 8019df0:	4673      	mov	r3, lr
 8019df2:	9500      	str	r5, [sp, #0]
 8019df4:	f7fd fc6f 	bl	80176d6 <lv_map>
 8019df8:	4606      	mov	r6, r0
                lv_arc_set_start_angle(obj, bg_midpoint);
 8019dfa:	4639      	mov	r1, r7
                angle = lv_map(arc->value, range_midpoint,arc->max_value, bg_midpoint, bg_end);
 8019dfc:	b205      	sxth	r5, r0
                lv_arc_set_start_angle(obj, bg_midpoint);
 8019dfe:	4620      	mov	r0, r4
 8019e00:	f7ff ff57 	bl	8019cb2 <lv_arc_set_start_angle>
                lv_arc_set_end_angle(obj, angle);
 8019e04:	b2b1      	uxth	r1, r6
 8019e06:	e7ec      	b.n	8019de2 <value_update+0x80>
            angle = lv_map(arc->value,arc->min_value,arc->max_value,arc->bg_angle_start, bg_end);
 8019e08:	9500      	str	r5, [sp, #0]
 8019e0a:	f7fd fc64 	bl	80176d6 <lv_map>
 8019e0e:	b205      	sxth	r5, r0
            lv_arc_set_start_angle(obj, angle);
 8019e10:	b281      	uxth	r1, r0
            lv_arc_set_start_angle(obj,arc->bg_angle_start);
 8019e12:	4620      	mov	r0, r4
 8019e14:	f7ff ff4d 	bl	8019cb2 <lv_arc_set_start_angle>
 8019e18:	e7e6      	b.n	8019de8 <value_update+0x86>

08019e1a <lv_arc_set_value>:
{
 8019e1a:	b410      	push	{r4}
    if(arc->value == value) return;
 8019e1c:	f9b0 402e 	ldrsh.w	r4, [r0, #46]	; 0x2e
 8019e20:	428c      	cmp	r4, r1
 8019e22:	d010      	beq.n	8019e46 <lv_arc_set_value+0x2c>
    new_value = value >arc->max_value ?arc->max_value : value;
 8019e24:	f9b0 2032 	ldrsh.w	r2, [r0, #50]	; 0x32
 8019e28:	428a      	cmp	r2, r1
 8019e2a:	bfa8      	it	ge
 8019e2c:	460a      	movge	r2, r1
    new_value = new_value <arc->min_value ?arc->min_value : new_value;
 8019e2e:	f9b0 1030 	ldrsh.w	r1, [r0, #48]	; 0x30
 8019e32:	4291      	cmp	r1, r2
 8019e34:	bfb8      	it	lt
 8019e36:	4611      	movlt	r1, r2
    if(arc->value == new_value) return;
 8019e38:	428c      	cmp	r4, r1
 8019e3a:	d004      	beq.n	8019e46 <lv_arc_set_value+0x2c>
}
 8019e3c:	f85d 4b04 	ldr.w	r4, [sp], #4
   arc->value = new_value;
 8019e40:	85c1      	strh	r1, [r0, #46]	; 0x2e
    value_update(obj);
 8019e42:	f7ff bf8e 	b.w	8019d62 <value_update>
}
 8019e46:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019e4a:	4770      	bx	lr

08019e4c <lv_arc_event>:
{
 8019e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    res = lv_obj_event_base(MY_CLASS, e);
 8019e50:	48cb      	ldr	r0, [pc, #812]	; (801a180 <lv_arc_event+0x334>)
{
 8019e52:	b0ad      	sub	sp, #180	; 0xb4
 8019e54:	460f      	mov	r7, r1
    res = lv_obj_event_base(MY_CLASS, e);
 8019e56:	f7e7 ffbf 	bl	8001dd8 <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 8019e5a:	2801      	cmp	r0, #1
 8019e5c:	d138      	bne.n	8019ed0 <lv_arc_event+0x84>
    lv_event_code_t code = lv_event_get_code(e);
 8019e5e:	4638      	mov	r0, r7
 8019e60:	f7e8 f854 	bl	8001f0c <lv_event_get_code>
 8019e64:	4606      	mov	r6, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8019e66:	4638      	mov	r0, r7
 8019e68:	f7e8 f84e 	bl	8001f08 <lv_event_get_target>
 8019e6c:	4605      	mov	r5, r0
    lv_arc_t * arc = (lv_arc_t *)lv_event_get_target(e);
 8019e6e:	4638      	mov	r0, r7
 8019e70:	f7e8 f84a 	bl	8001f08 <lv_event_get_target>
    if(code == LV_EVENT_PRESSING) {
 8019e74:	2e02      	cmp	r6, #2
    lv_arc_t * arc = (lv_arc_t *)lv_event_get_target(e);
 8019e76:	4604      	mov	r4, r0
    if(code == LV_EVENT_PRESSING) {
 8019e78:	f040 80e9 	bne.w	801a04e <lv_arc_event+0x202>
        lv_indev_t * indev = lv_indev_get_act();
 8019e7c:	f7e8 faba 	bl	80023f4 <lv_indev_get_act>
        if(indev == NULL) return;
 8019e80:	4606      	mov	r6, r0
 8019e82:	b328      	cbz	r0, 8019ed0 <lv_arc_event+0x84>
        lv_indev_type_t indev_type = lv_indev_get_type(indev);
 8019e84:	f7e8 fabc 	bl	8002400 <lv_indev_get_type>
        if(indev_type != LV_INDEV_TYPE_POINTER) return;
 8019e88:	2801      	cmp	r0, #1
 8019e8a:	d121      	bne.n	8019ed0 <lv_arc_event+0x84>
        lv_indev_get_point(indev, &p);
 8019e8c:	a90d      	add	r1, sp, #52	; 0x34
 8019e8e:	4630      	mov	r0, r6
 8019e90:	f7e8 fb11 	bl	80024b6 <lv_indev_get_point>
        get_center(obj, &center, &r);
 8019e94:	aa0a      	add	r2, sp, #40	; 0x28
 8019e96:	a91a      	add	r1, sp, #104	; 0x68
 8019e98:	4628      	mov	r0, r5
 8019e9a:	f7ff fc1d 	bl	80196d8 <get_center>
        p.x -=  center.x;
 8019e9e:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 8019ea2:	f8bd 2068 	ldrh.w	r2, [sp, #104]	; 0x68
 8019ea6:	1a9b      	subs	r3, r3, r2
        p.y -=  center.y;
 8019ea8:	f8bd 206a 	ldrh.w	r2, [sp, #106]	; 0x6a
        p.x -=  center.x;
 8019eac:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
        p.y -=  center.y;
 8019eb0:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 8019eb4:	1a9b      	subs	r3, r3, r2
 8019eb6:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
        if(arc->dragging == false) {
 8019eba:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8019ebe:	07da      	lsls	r2, r3, #31
 8019ec0:	d509      	bpl.n	8019ed6 <lv_arc_event+0x8a>
        if(p.x == 0 && p.y == 0) return;
 8019ec2:	f9bd 1034 	ldrsh.w	r1, [sp, #52]	; 0x34
 8019ec6:	f9bd 0036 	ldrsh.w	r0, [sp, #54]	; 0x36
 8019eca:	ea51 0300 	orrs.w	r3, r1, r0
 8019ece:	d12e      	bne.n	8019f2e <lv_arc_event+0xe2>
}
 8019ed0:	b02d      	add	sp, #180	; 0xb4
 8019ed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_WIDTH);
 8019ed6:	f44f 6205 	mov.w	r2, #2128	; 0x850
 8019eda:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8019ede:	4628      	mov	r0, r5
 8019ee0:	f7ed fa42 	bl	8007368 <lv_obj_get_style_prop>
            r -=  indic_width;
 8019ee4:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
            if(p.x * p.x + p.y * p.y > r * r) {
 8019ee8:	f9bd 1036 	ldrsh.w	r1, [sp, #54]	; 0x36
            r -=  indic_width;
 8019eec:	1a10      	subs	r0, r2, r0
            if(p.x * p.x + p.y * p.y > r * r) {
 8019eee:	4349      	muls	r1, r1
            r -= r / 2; /*Add some more sensitive area*/
 8019ef0:	f3c0 32c0 	ubfx	r2, r0, #15, #1
            r -=  indic_width;
 8019ef4:	b283      	uxth	r3, r0
            r -= r / 2; /*Add some more sensitive area*/
 8019ef6:	fa02 f080 	sxtah	r0, r2, r0
            if(p.x * p.x + p.y * p.y > r * r) {
 8019efa:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
            r -= r / 2; /*Add some more sensitive area*/
 8019efe:	eba3 0360 	sub.w	r3, r3, r0, asr #1
            if(p.x * p.x + p.y * p.y > r * r) {
 8019f02:	fb02 1202 	mla	r2, r2, r2, r1
            r -= r / 2; /*Add some more sensitive area*/
 8019f06:	b21b      	sxth	r3, r3
 8019f08:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
            if(p.x * p.x + p.y * p.y > r * r) {
 8019f0c:	435b      	muls	r3, r3
 8019f0e:	429a      	cmp	r2, r3
 8019f10:	dd08      	ble.n	8019f24 <lv_arc_event+0xd8>
               arc->dragging = true;
 8019f12:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8019f16:	f043 0301 	orr.w	r3, r3, #1
 8019f1a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
               arc->last_tick = lv_tick_get(); /*Capture timestamp at dragging start*/
 8019f1e:	f7fc fd77 	bl	8016a10 <lv_tick_get>
 8019f22:	63a0      	str	r0, [r4, #56]	; 0x38
        if(arc->dragging == false) return;
 8019f24:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8019f28:	07db      	lsls	r3, r3, #31
 8019f2a:	d5d1      	bpl.n	8019ed0 <lv_arc_event+0x84>
 8019f2c:	e7c9      	b.n	8019ec2 <lv_arc_event+0x76>
        int16_t bg_end =arc->bg_angle_end;
 8019f2e:	8da6      	ldrh	r6, [r4, #44]	; 0x2c
        if(arc->bg_angle_end <arc->bg_angle_start) {
 8019f30:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8019f32:	42b3      	cmp	r3, r6
            bg_end =arc->bg_angle_end + 360;
 8019f34:	bf84      	itt	hi
 8019f36:	f506 76b4 	addhi.w	r6, r6, #360	; 0x168
 8019f3a:	b2b6      	uxthhi	r6, r6
        angle = lv_atan2(p.y, p.x);
 8019f3c:	f7fd fb7f 	bl	801763e <lv_atan2>
        angle -=arc->bg_angle_start;   /*Make the angle relative to the start angle*/
 8019f40:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8019f42:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
 8019f44:	b237      	sxth	r7, r6
        int16_t deg_range = bg_end -arc->bg_angle_start;
 8019f46:	1af6      	subs	r6, r6, r3
        angle -=arc->bg_angle_start;   /*Make the angle relative to the start angle*/
 8019f48:	441a      	add	r2, r3
        int16_t deg_range = bg_end -arc->bg_angle_start;
 8019f4a:	b236      	sxth	r6, r6
        angle -=arc->bg_angle_start;   /*Make the angle relative to the start angle*/
 8019f4c:	1a80      	subs	r0, r0, r2
 8019f4e:	b282      	uxth	r2, r0
 8019f50:	b200      	sxth	r0, r0
        if(angle < 0) angle += 360;
 8019f52:	2800      	cmp	r0, #0
 8019f54:	bfb8      	it	lt
 8019f56:	f502 70b4 	addlt.w	r0, r2, #360	; 0x168
        int16_t last_angle_rel =arc->last_angle -arc->bg_angle_start;
 8019f5a:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
        if(angle < 0) angle += 360;
 8019f5c:	bfb8      	it	lt
 8019f5e:	b200      	sxthlt	r0, r0
        int16_t last_angle_rel =arc->last_angle -arc->bg_angle_start;
 8019f60:	eba2 0803 	sub.w	r8, r2, r3
 8019f64:	1a9b      	subs	r3, r3, r2
 8019f66:	fa1f f888 	uxth.w	r8, r8
        int16_t delta_angle = angle - last_angle_rel;
 8019f6a:	b29a      	uxth	r2, r3
 8019f6c:	fa10 f383 	uxtah	r3, r0, r3
        if(LV_ABS(delta_angle) > 280) {
 8019f70:	b21b      	sxth	r3, r3
 8019f72:	2b00      	cmp	r3, #0
 8019f74:	bfb8      	it	lt
 8019f76:	425b      	neglt	r3, r3
 8019f78:	b29b      	uxth	r3, r3
 8019f7a:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 8019f7e:	d940      	bls.n	801a002 <lv_arc_event+0x1b6>
            if(arc->min_close) angle = 0;
 8019f80:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
            else angle = deg_range;
 8019f84:	f013 0f08 	tst.w	r3, #8
 8019f88:	bf0c      	ite	eq
 8019f8a:	4630      	moveq	r0, r6
 8019f8c:	2000      	movne	r0, #0
        delta_angle = angle - last_angle_rel;
 8019f8e:	4410      	add	r0, r2
 8019f90:	b206      	sxth	r6, r0
        uint32_t delta_tick = lv_tick_elaps(arc->last_tick);
 8019f92:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8019f94:	f7fc fd4a 	bl	8016a2c <lv_tick_elaps>
        int16_t delta_angle_max = (arc->chg_rate * delta_tick) / 1000;
 8019f98:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8019f9a:	4358      	muls	r0, r3
 8019f9c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8019fa0:	fbb0 f3f3 	udiv	r3, r0, r3
 8019fa4:	b21a      	sxth	r2, r3
        if(delta_angle > delta_angle_max) {
 8019fa6:	4296      	cmp	r6, r2
 8019fa8:	dc05      	bgt.n	8019fb6 <lv_arc_event+0x16a>
        else if(delta_angle < -delta_angle_max) {
 8019faa:	4250      	negs	r0, r2
 8019fac:	4286      	cmp	r6, r0
            delta_angle = -delta_angle_max;
 8019fae:	bfb6      	itet	lt
 8019fb0:	425b      	neglt	r3, r3
 8019fb2:	4632      	movge	r2, r6
 8019fb4:	b21a      	sxthlt	r2, r3
        int32_t round = ((bg_end -arc->bg_angle_start) * 8) / (arc->max_value -arc->min_value);
 8019fb6:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8019fb8:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 8019fbc:	f9b4 c032 	ldrsh.w	ip, [r4, #50]	; 0x32
 8019fc0:	1a78      	subs	r0, r7, r1
        int16_t old_value =arc->value;
 8019fc2:	f9b4 902e 	ldrsh.w	r9, [r4, #46]	; 0x2e
        int32_t round = ((bg_end -arc->bg_angle_start) * 8) / (arc->max_value -arc->min_value);
 8019fc6:	ebac 0603 	sub.w	r6, ip, r3
 8019fca:	00c0      	lsls	r0, r0, #3
        int16_t new_value = lv_map(angle,arc->bg_angle_start, bg_end,arc->min_value,arc->max_value);
 8019fcc:	f8cd c000 	str.w	ip, [sp]
        int32_t round = ((bg_end -arc->bg_angle_start) * 8) / (arc->max_value -arc->min_value);
 8019fd0:	fb90 f0f6 	sdiv	r0, r0, r6
        round = (round + 4) >> 4;
 8019fd4:	1d06      	adds	r6, r0, #4
        angle +=arc->bg_angle_start;   /*Make the angle absolute again*/
 8019fd6:	eb08 0001 	add.w	r0, r8, r1
 8019fda:	eb00 1026 	add.w	r0, r0, r6, asr #4
 8019fde:	4410      	add	r0, r2
        int16_t new_value = lv_map(angle,arc->bg_angle_start, bg_end,arc->min_value,arc->max_value);
 8019fe0:	463a      	mov	r2, r7
 8019fe2:	b200      	sxth	r0, r0
 8019fe4:	f7fd fb77 	bl	80176d6 <lv_map>
        if(new_value != lv_arc_get_value(obj)) {
 8019fe8:	f9b5 302e 	ldrsh.w	r3, [r5, #46]	; 0x2e
        int16_t new_value = lv_map(angle,arc->bg_angle_start, bg_end,arc->min_value,arc->max_value);
 8019fec:	b206      	sxth	r6, r0
        if(new_value != lv_arc_get_value(obj)) {
 8019fee:	42b3      	cmp	r3, r6
 8019ff0:	d115      	bne.n	801a01e <lv_arc_event+0x1d2>
        if(new_value ==arc->min_value || new_value ==arc->max_value) {
 8019ff2:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 8019ff6:	42b3      	cmp	r3, r6
 8019ff8:	d123      	bne.n	801a042 <lv_arc_event+0x1f6>
           arc->last_tick = lv_tick_get(); /*Cache timestamp for the next iteration*/
 8019ffa:	f7fc fd09 	bl	8016a10 <lv_tick_get>
 8019ffe:	63a0      	str	r0, [r4, #56]	; 0x38
 801a000:	e766      	b.n	8019ed0 <lv_arc_event+0x84>
            if(angle < deg_range / 2)arc->min_close = 1;
 801a002:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
 801a006:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 801a00a:	ebb0 0f66 	cmp.w	r0, r6, asr #1
 801a00e:	bfb4      	ite	lt
 801a010:	f043 0308 	orrlt.w	r3, r3, #8
            else arc->min_close = 0;
 801a014:	f36f 03c3 	bfcge	r3, #3, #1
 801a018:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 801a01c:	e7b7      	b.n	8019f8e <lv_arc_event+0x142>
           arc->last_tick = lv_tick_get(); /*Cache timestamp for the next iteration*/
 801a01e:	f7fc fcf7 	bl	8016a10 <lv_tick_get>
            lv_arc_set_value(obj, new_value); /*set_value caches the last_angle for the next iteration*/
 801a022:	4631      	mov	r1, r6
           arc->last_tick = lv_tick_get(); /*Cache timestamp for the next iteration*/
 801a024:	63a0      	str	r0, [r4, #56]	; 0x38
            lv_arc_set_value(obj, new_value); /*set_value caches the last_angle for the next iteration*/
 801a026:	4628      	mov	r0, r5
 801a028:	f7ff fef7 	bl	8019e1a <lv_arc_set_value>
            if(new_value != old_value) {
 801a02c:	45b1      	cmp	r9, r6
 801a02e:	d0e0      	beq.n	8019ff2 <lv_arc_event+0x1a6>
                res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 801a030:	2200      	movs	r2, #0
 801a032:	211c      	movs	r1, #28
 801a034:	4628      	mov	r0, r5
 801a036:	f7e7 ff47 	bl	8001ec8 <lv_event_send>
                if(res != LV_RES_OK) return;
 801a03a:	2801      	cmp	r0, #1
 801a03c:	f47f af48 	bne.w	8019ed0 <lv_arc_event+0x84>
 801a040:	e7d7      	b.n	8019ff2 <lv_arc_event+0x1a6>
        if(new_value ==arc->min_value || new_value ==arc->max_value) {
 801a042:	f9b4 3032 	ldrsh.w	r3, [r4, #50]	; 0x32
 801a046:	42b3      	cmp	r3, r6
 801a048:	f47f af42 	bne.w	8019ed0 <lv_arc_event+0x84>
 801a04c:	e7d5      	b.n	8019ffa <lv_arc_event+0x1ae>
    else if(code == LV_EVENT_RELEASED || code == LV_EVENT_PRESS_LOST) {
 801a04e:	2e08      	cmp	r6, #8
 801a050:	d001      	beq.n	801a056 <lv_arc_event+0x20a>
 801a052:	2e03      	cmp	r6, #3
 801a054:	d11b      	bne.n	801a08e <lv_arc_event+0x242>
       arc->dragging = false;
 801a056:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
        lv_group_t * g             = lv_obj_get_group(obj);
 801a05a:	4628      	mov	r0, r5
       arc->dragging = false;
 801a05c:	f36f 0300 	bfc	r3, #0, #1
 801a060:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        lv_group_t * g             = lv_obj_get_group(obj);
 801a064:	f7e9 febc 	bl	8003de0 <lv_obj_get_group>
 801a068:	4604      	mov	r4, r0
        bool editing               = lv_group_get_editing(g);
 801a06a:	f7e8 f94f 	bl	800230c <lv_group_get_editing>
 801a06e:	4605      	mov	r5, r0
        lv_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
 801a070:	f7e8 f9c0 	bl	80023f4 <lv_indev_get_act>
 801a074:	f7e8 f9c4 	bl	8002400 <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_ENCODER) {
 801a078:	2804      	cmp	r0, #4
 801a07a:	f47f af29 	bne.w	8019ed0 <lv_arc_event+0x84>
            if(editing) lv_group_set_editing(g, false);
 801a07e:	2d00      	cmp	r5, #0
 801a080:	f43f af26 	beq.w	8019ed0 <lv_arc_event+0x84>
 801a084:	2100      	movs	r1, #0
 801a086:	4620      	mov	r0, r4
 801a088:	f7e8 f8dc 	bl	8002244 <lv_group_set_editing>
 801a08c:	e720      	b.n	8019ed0 <lv_arc_event+0x84>
    else if(code == LV_EVENT_KEY) {
 801a08e:	2e0d      	cmp	r6, #13
 801a090:	d122      	bne.n	801a0d8 <lv_arc_event+0x28c>
        char c = *((char *)lv_event_get_param(e));
 801a092:	4638      	mov	r0, r7
 801a094:	f7e7 ff3c 	bl	8001f10 <lv_event_get_param>
 801a098:	7803      	ldrb	r3, [r0, #0]
        int16_t old_value =arc->value;
 801a09a:	f9b4 602e 	ldrsh.w	r6, [r4, #46]	; 0x2e
        if(c == LV_KEY_RIGHT || c == LV_KEY_UP) {
 801a09e:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 801a0a2:	2a11      	cmp	r2, #17
 801a0a4:	d110      	bne.n	801a0c8 <lv_arc_event+0x27c>
            lv_arc_set_value(obj, lv_arc_get_value(obj) + 1);
 801a0a6:	8de9      	ldrh	r1, [r5, #46]	; 0x2e
 801a0a8:	3101      	adds	r1, #1
            lv_arc_set_value(obj, lv_arc_get_value(obj) - 1);
 801a0aa:	b209      	sxth	r1, r1
 801a0ac:	4628      	mov	r0, r5
 801a0ae:	f7ff feb4 	bl	8019e1a <lv_arc_set_value>
        if(old_value !=arc->value) {
 801a0b2:	f9b4 302e 	ldrsh.w	r3, [r4, #46]	; 0x2e
 801a0b6:	42b3      	cmp	r3, r6
 801a0b8:	f43f af0a 	beq.w	8019ed0 <lv_arc_event+0x84>
            res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 801a0bc:	2200      	movs	r2, #0
 801a0be:	211c      	movs	r1, #28
 801a0c0:	4628      	mov	r0, r5
    lv_event_send(obj, LV_EVENT_DRAW_PART_END, &obj_draw_dsc);
 801a0c2:	f7e7 ff01 	bl	8001ec8 <lv_event_send>
}
 801a0c6:	e703      	b.n	8019ed0 <lv_arc_event+0x84>
        else if(c == LV_KEY_LEFT || c == LV_KEY_DOWN) {
 801a0c8:	2b14      	cmp	r3, #20
 801a0ca:	d002      	beq.n	801a0d2 <lv_arc_event+0x286>
 801a0cc:	2b12      	cmp	r3, #18
 801a0ce:	f47f aeff 	bne.w	8019ed0 <lv_arc_event+0x84>
            lv_arc_set_value(obj, lv_arc_get_value(obj) - 1);
 801a0d2:	8de9      	ldrh	r1, [r5, #46]	; 0x2e
 801a0d4:	3901      	subs	r1, #1
 801a0d6:	e7e8      	b.n	801a0aa <lv_arc_event+0x25e>
    else if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 801a0d8:	2e13      	cmp	r6, #19
 801a0da:	d153      	bne.n	801a184 <lv_arc_event+0x338>
        lv_coord_t bg_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 801a0dc:	2100      	movs	r1, #0
 801a0de:	4628      	mov	r0, r5
 801a0e0:	f7ff fab3 	bl	801964a <lv_obj_get_style_pad_left>
        lv_coord_t bg_right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN);
 801a0e4:	2100      	movs	r1, #0
        lv_coord_t bg_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 801a0e6:	4604      	mov	r4, r0
        lv_coord_t bg_right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN);
 801a0e8:	4628      	mov	r0, r5
 801a0ea:	f7ff fab5 	bl	8019658 <lv_obj_get_style_pad_right>
        lv_coord_t bg_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 801a0ee:	2100      	movs	r1, #0
        lv_coord_t bg_right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN);
 801a0f0:	4681      	mov	r9, r0
        lv_coord_t bg_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 801a0f2:	4628      	mov	r0, r5
 801a0f4:	f7ff fab7 	bl	8019666 <lv_obj_get_style_pad_top>
        lv_coord_t bg_bottom = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN);
 801a0f8:	2100      	movs	r1, #0
        lv_coord_t bg_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 801a0fa:	4680      	mov	r8, r0
        lv_coord_t bg_bottom = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN);
 801a0fc:	4628      	mov	r0, r5
 801a0fe:	f7ff fab9 	bl	8019674 <lv_obj_get_style_pad_bottom>
        lv_coord_t bg_pad = LV_MAX4(bg_left, bg_right, bg_top, bg_bottom);
 801a102:	454c      	cmp	r4, r9
 801a104:	4621      	mov	r1, r4
 801a106:	bfb8      	it	lt
 801a108:	4649      	movlt	r1, r9
 801a10a:	b20a      	sxth	r2, r1
        lv_coord_t knob_left = lv_obj_get_style_pad_left(obj, LV_PART_KNOB);
 801a10c:	f44f 3140 	mov.w	r1, #196608	; 0x30000
        lv_coord_t bg_pad = LV_MAX4(bg_left, bg_right, bg_top, bg_bottom);
 801a110:	4542      	cmp	r2, r8
 801a112:	bfb8      	it	lt
 801a114:	4642      	movlt	r2, r8
 801a116:	b214      	sxth	r4, r2
 801a118:	42a0      	cmp	r0, r4
 801a11a:	bfb8      	it	lt
 801a11c:	4620      	movlt	r0, r4
 801a11e:	b206      	sxth	r6, r0
        lv_coord_t knob_left = lv_obj_get_style_pad_left(obj, LV_PART_KNOB);
 801a120:	4628      	mov	r0, r5
 801a122:	f7ff fa92 	bl	801964a <lv_obj_get_style_pad_left>
        lv_coord_t knob_right = lv_obj_get_style_pad_right(obj, LV_PART_KNOB);
 801a126:	f44f 3140 	mov.w	r1, #196608	; 0x30000
        lv_coord_t knob_left = lv_obj_get_style_pad_left(obj, LV_PART_KNOB);
 801a12a:	4604      	mov	r4, r0
        lv_coord_t knob_right = lv_obj_get_style_pad_right(obj, LV_PART_KNOB);
 801a12c:	4628      	mov	r0, r5
 801a12e:	f7ff fa93 	bl	8019658 <lv_obj_get_style_pad_right>
        lv_coord_t knob_top = lv_obj_get_style_pad_top(obj, LV_PART_KNOB);
 801a132:	f44f 3140 	mov.w	r1, #196608	; 0x30000
        lv_coord_t knob_right = lv_obj_get_style_pad_right(obj, LV_PART_KNOB);
 801a136:	4681      	mov	r9, r0
        lv_coord_t knob_top = lv_obj_get_style_pad_top(obj, LV_PART_KNOB);
 801a138:	4628      	mov	r0, r5
 801a13a:	f7ff fa94 	bl	8019666 <lv_obj_get_style_pad_top>
        lv_coord_t knob_bottom = lv_obj_get_style_pad_bottom(obj, LV_PART_KNOB);
 801a13e:	f44f 3140 	mov.w	r1, #196608	; 0x30000
        lv_coord_t knob_top = lv_obj_get_style_pad_top(obj, LV_PART_KNOB);
 801a142:	4680      	mov	r8, r0
        lv_coord_t knob_bottom = lv_obj_get_style_pad_bottom(obj, LV_PART_KNOB);
 801a144:	4628      	mov	r0, r5
 801a146:	f7ff fa95 	bl	8019674 <lv_obj_get_style_pad_bottom>
 801a14a:	4605      	mov	r5, r0
        lv_coord_t * s = lv_event_get_param(e);
 801a14c:	4638      	mov	r0, r7
 801a14e:	f7e7 fedf 	bl	8001f10 <lv_event_get_param>
        lv_coord_t knob_pad = LV_MAX4(knob_left, knob_right, knob_top, knob_bottom) + 2;
 801a152:	454c      	cmp	r4, r9
        lv_coord_t * s = lv_event_get_param(e);
 801a154:	4602      	mov	r2, r0
        *s = LV_MAX(*s, knob_pad - bg_pad);
 801a156:	f9b0 0000 	ldrsh.w	r0, [r0]
        lv_coord_t knob_pad = LV_MAX4(knob_left, knob_right, knob_top, knob_bottom) + 2;
 801a15a:	bfb8      	it	lt
 801a15c:	464c      	movlt	r4, r9
 801a15e:	b224      	sxth	r4, r4
 801a160:	4544      	cmp	r4, r8
 801a162:	bfb8      	it	lt
 801a164:	4644      	movlt	r4, r8
 801a166:	b223      	sxth	r3, r4
 801a168:	42ab      	cmp	r3, r5
 801a16a:	bfb8      	it	lt
 801a16c:	462b      	movlt	r3, r5
 801a16e:	3302      	adds	r3, #2
        *s = LV_MAX(*s, knob_pad - bg_pad);
 801a170:	b21b      	sxth	r3, r3
 801a172:	1b9b      	subs	r3, r3, r6
 801a174:	4283      	cmp	r3, r0
 801a176:	bfb8      	it	lt
 801a178:	4603      	movlt	r3, r0
 801a17a:	8013      	strh	r3, [r2, #0]
 801a17c:	e6a8      	b.n	8019ed0 <lv_arc_event+0x84>
 801a17e:	bf00      	nop
 801a180:	080293e8 	.word	0x080293e8
    } else if(code == LV_EVENT_DRAW_MAIN) {
 801a184:	2e15      	cmp	r6, #21
 801a186:	f47f aea3 	bne.w	8019ed0 <lv_arc_event+0x84>
    lv_obj_t * obj = lv_event_get_target(e);
 801a18a:	4638      	mov	r0, r7
    get_center(obj, &center, &arc_r);
 801a18c:	ae07      	add	r6, sp, #28
    lv_obj_t * obj = lv_event_get_target(e);
 801a18e:	f7e7 febb 	bl	8001f08 <lv_event_get_target>
 801a192:	4604      	mov	r4, r0
    const lv_area_t * clip_area = lv_event_get_param(e);
 801a194:	4638      	mov	r0, r7
 801a196:	f7e7 febb 	bl	8001f10 <lv_event_get_param>
 801a19a:	4607      	mov	r7, r0
    get_center(obj, &center, &arc_r);
 801a19c:	f10d 021a 	add.w	r2, sp, #26
 801a1a0:	4631      	mov	r1, r6
 801a1a2:	4620      	mov	r0, r4
 801a1a4:	f7ff fa98 	bl	80196d8 <get_center>
    lv_obj_draw_dsc_init(&obj_draw_dsc, clip_area);
 801a1a8:	4639      	mov	r1, r7
 801a1aa:	a81a      	add	r0, sp, #104	; 0x68
 801a1ac:	f7ea fcbc 	bl	8004b28 <lv_obj_draw_dsc_init>
    if(arc_r > 0) {
 801a1b0:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801a1b4:	2b00      	cmp	r3, #0
 801a1b6:	dd2d      	ble.n	801a214 <lv_arc_event+0x3c8>
        lv_draw_arc_dsc_init(&arc_dsc);
 801a1b8:	a80a      	add	r0, sp, #40	; 0x28
 801a1ba:	f7ee fb2e 	bl	800881a <lv_draw_arc_dsc_init>
        lv_obj_init_draw_arc_dsc(obj, LV_PART_MAIN, &arc_dsc);
 801a1be:	aa0a      	add	r2, sp, #40	; 0x28
 801a1c0:	2100      	movs	r1, #0
 801a1c2:	4620      	mov	r0, r4
 801a1c4:	f7ea fbfe 	bl	80049c4 <lv_obj_init_draw_arc_dsc>
        obj_draw_dsc.part = LV_PART_MAIN;
 801a1c8:	2300      	movs	r3, #0
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &obj_draw_dsc);
 801a1ca:	aa1a      	add	r2, sp, #104	; 0x68
 801a1cc:	211a      	movs	r1, #26
        obj_draw_dsc.part = LV_PART_MAIN;
 801a1ce:	9327      	str	r3, [sp, #156]	; 0x9c
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &obj_draw_dsc);
 801a1d0:	4620      	mov	r0, r4
        obj_draw_dsc.radius = arc_r;
 801a1d2:	f8bd 301a 	ldrh.w	r3, [sp, #26]
        obj_draw_dsc.p1 = &center;
 801a1d6:	9621      	str	r6, [sp, #132]	; 0x84
        obj_draw_dsc.radius = arc_r;
 801a1d8:	f8ad 30a4 	strh.w	r3, [sp, #164]	; 0xa4
        obj_draw_dsc.arc_dsc = &arc_dsc;
 801a1dc:	ab0a      	add	r3, sp, #40	; 0x28
 801a1de:	9320      	str	r3, [sp, #128]	; 0x80
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &obj_draw_dsc);
 801a1e0:	f7e7 fe72 	bl	8001ec8 <lv_event_send>
        lv_draw_arc(center.x, center.y, arc_r, arc->bg_angle_start + arc->rotation,
 801a1e4:	a90a      	add	r1, sp, #40	; 0x28
 801a1e6:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
 801a1e8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 801a1ea:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 801a1ee:	4413      	add	r3, r2
 801a1f0:	e9cd 7101 	strd	r7, r1, [sp, #4]
 801a1f4:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 801a1f6:	b29b      	uxth	r3, r3
 801a1f8:	440a      	add	r2, r1
 801a1fa:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 801a1fe:	b292      	uxth	r2, r2
 801a200:	9200      	str	r2, [sp, #0]
 801a202:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801a206:	f7ee fb13 	bl	8008830 <lv_draw_arc>
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &obj_draw_dsc);
 801a20a:	aa1a      	add	r2, sp, #104	; 0x68
 801a20c:	211b      	movs	r1, #27
 801a20e:	4620      	mov	r0, r4
 801a210:	f7e7 fe5a 	bl	8001ec8 <lv_event_send>
    lv_coord_t left_indic = lv_obj_get_style_pad_left(obj, LV_PART_INDICATOR);
 801a214:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 801a218:	4620      	mov	r0, r4
 801a21a:	f7ff fa16 	bl	801964a <lv_obj_get_style_pad_left>
    lv_coord_t right_indic = lv_obj_get_style_pad_right(obj, LV_PART_INDICATOR);
 801a21e:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    lv_coord_t left_indic = lv_obj_get_style_pad_left(obj, LV_PART_INDICATOR);
 801a222:	4605      	mov	r5, r0
    lv_coord_t right_indic = lv_obj_get_style_pad_right(obj, LV_PART_INDICATOR);
 801a224:	4620      	mov	r0, r4
 801a226:	f7ff fa17 	bl	8019658 <lv_obj_get_style_pad_right>
    lv_coord_t top_indic = lv_obj_get_style_pad_top(obj, LV_PART_INDICATOR);
 801a22a:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    lv_coord_t right_indic = lv_obj_get_style_pad_right(obj, LV_PART_INDICATOR);
 801a22e:	4681      	mov	r9, r0
    lv_coord_t top_indic = lv_obj_get_style_pad_top(obj, LV_PART_INDICATOR);
 801a230:	4620      	mov	r0, r4
 801a232:	f7ff fa18 	bl	8019666 <lv_obj_get_style_pad_top>
    lv_coord_t bottom_indic = lv_obj_get_style_pad_bottom(obj, LV_PART_INDICATOR);
 801a236:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    lv_coord_t top_indic = lv_obj_get_style_pad_top(obj, LV_PART_INDICATOR);
 801a23a:	4680      	mov	r8, r0
    lv_coord_t bottom_indic = lv_obj_get_style_pad_bottom(obj, LV_PART_INDICATOR);
 801a23c:	4620      	mov	r0, r4
 801a23e:	f7ff fa19 	bl	8019674 <lv_obj_get_style_pad_bottom>
    lv_coord_t indic_r = arc_r - LV_MAX4(left_indic, right_indic, top_indic, bottom_indic);
 801a242:	454d      	cmp	r5, r9
 801a244:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 801a248:	bfb8      	it	lt
 801a24a:	464d      	movlt	r5, r9
 801a24c:	b22d      	sxth	r5, r5
 801a24e:	4545      	cmp	r5, r8
 801a250:	bfb8      	it	lt
 801a252:	4645      	movlt	r5, r8
 801a254:	b22d      	sxth	r5, r5
 801a256:	4285      	cmp	r5, r0
 801a258:	bfac      	ite	ge
 801a25a:	1b5d      	subge	r5, r3, r5
 801a25c:	1a1d      	sublt	r5, r3, r0
 801a25e:	fa1f f885 	uxth.w	r8, r5
 801a262:	b22d      	sxth	r5, r5
    if(indic_r > 0) {
 801a264:	2d00      	cmp	r5, #0
 801a266:	dd2c      	ble.n	801a2c2 <lv_arc_event+0x476>
        lv_draw_arc_dsc_init(&arc_dsc);
 801a268:	a80a      	add	r0, sp, #40	; 0x28
 801a26a:	f7ee fad6 	bl	800881a <lv_draw_arc_dsc_init>
        lv_obj_init_draw_arc_dsc(obj, LV_PART_INDICATOR, &arc_dsc);
 801a26e:	aa0a      	add	r2, sp, #40	; 0x28
 801a270:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 801a274:	4620      	mov	r0, r4
 801a276:	f7ea fba5 	bl	80049c4 <lv_obj_init_draw_arc_dsc>
        obj_draw_dsc.part = LV_PART_INDICATOR;
 801a27a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &obj_draw_dsc);
 801a27e:	aa1a      	add	r2, sp, #104	; 0x68
 801a280:	211a      	movs	r1, #26
        obj_draw_dsc.part = LV_PART_INDICATOR;
 801a282:	9327      	str	r3, [sp, #156]	; 0x9c
        obj_draw_dsc.arc_dsc = &arc_dsc;
 801a284:	ab0a      	add	r3, sp, #40	; 0x28
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &obj_draw_dsc);
 801a286:	4620      	mov	r0, r4
        obj_draw_dsc.p1 = &center;
 801a288:	9621      	str	r6, [sp, #132]	; 0x84
        obj_draw_dsc.arc_dsc = &arc_dsc;
 801a28a:	9320      	str	r3, [sp, #128]	; 0x80
        obj_draw_dsc.radius = indic_r;
 801a28c:	f8ad 50a4 	strh.w	r5, [sp, #164]	; 0xa4
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &obj_draw_dsc);
 801a290:	f7e7 fe1a 	bl	8001ec8 <lv_event_send>
        lv_draw_arc(center.x, center.y, indic_r, arc->indic_angle_start +arc->rotation,
 801a294:	a90a      	add	r1, sp, #40	; 0x28
 801a296:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
 801a298:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 801a29a:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 801a29e:	4413      	add	r3, r2
 801a2a0:	e9cd 7101 	strd	r7, r1, [sp, #4]
 801a2a4:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 801a2a6:	b29b      	uxth	r3, r3
 801a2a8:	440a      	add	r2, r1
 801a2aa:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 801a2ae:	b292      	uxth	r2, r2
 801a2b0:	9200      	str	r2, [sp, #0]
 801a2b2:	4642      	mov	r2, r8
 801a2b4:	f7ee fabc 	bl	8008830 <lv_draw_arc>
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &obj_draw_dsc);
 801a2b8:	aa1a      	add	r2, sp, #104	; 0x68
 801a2ba:	211b      	movs	r1, #27
 801a2bc:	4620      	mov	r0, r4
 801a2be:	f7e7 fe03 	bl	8001ec8 <lv_event_send>
 801a2c2:	f44f 6205 	mov.w	r2, #2128	; 0x850
 801a2c6:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 801a2ca:	4620      	mov	r0, r4
    get_knob_area(obj, &center, arc_r, &knob_area);
 801a2cc:	f9bd 601a 	ldrsh.w	r6, [sp, #26]
 801a2d0:	f7ed f84a 	bl	8007368 <lv_obj_get_style_prop>
    lv_coord_t indic_width_half = indic_width / 2;
 801a2d4:	f3c0 35c0 	ubfx	r5, r0, #15, #1
    if(arc->type == LV_ARC_MODE_NORMAL) {
 801a2d8:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    lv_coord_t indic_width_half = indic_width / 2;
 801a2dc:	fa05 f080 	sxtah	r0, r5, r0
    uint16_t angle =arc->rotation;
 801a2e0:	f8b4 8024 	ldrh.w	r8, [r4, #36]	; 0x24
    if(arc->type == LV_ARC_MODE_NORMAL) {
 801a2e4:	f013 0306 	ands.w	r3, r3, #6
    r -= indic_width_half;
 801a2e8:	f3c0 054f 	ubfx	r5, r0, #1, #16
 801a2ec:	eba6 0605 	sub.w	r6, r6, r5
 801a2f0:	b236      	sxth	r6, r6
    if(arc->type == LV_ARC_MODE_NORMAL) {
 801a2f2:	d101      	bne.n	801a2f8 <lv_arc_event+0x4ac>
        else angle +=arc->indic_angle_end;
 801a2f4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 801a2f6:	e002      	b.n	801a2fe <lv_arc_event+0x4b2>
    else if(arc->type == LV_ARC_MODE_REVERSE) {
 801a2f8:	2b04      	cmp	r3, #4
 801a2fa:	d163      	bne.n	801a3c4 <lv_arc_event+0x578>
        if(arc->value < range_midpoint) angle +=arc->indic_angle_start;
 801a2fc:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        else angle +=arc->indic_angle_end;
 801a2fe:	4498      	add	r8, r3
 801a300:	fa1f f888 	uxth.w	r8, r8
    lv_coord_t knob_x = (r * lv_trigo_sin(angle + 90)) >> LV_TRIGO_SHIFT;
 801a304:	f108 005a 	add.w	r0, r8, #90	; 0x5a
 801a308:	b200      	sxth	r0, r0
 801a30a:	f7fd f937 	bl	801757c <lv_trigo_sin>
 801a30e:	9005      	str	r0, [sp, #20]
    lv_coord_t knob_y = (r * lv_trigo_sin(angle)) >> LV_TRIGO_SHIFT;
 801a310:	fa0f f088 	sxth.w	r0, r8
 801a314:	f7fd f932 	bl	801757c <lv_trigo_sin>
    lv_coord_t left_knob = lv_obj_get_style_pad_left(obj, LV_PART_KNOB);
 801a318:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    lv_coord_t knob_y = (r * lv_trigo_sin(angle)) >> LV_TRIGO_SHIFT;
 801a31c:	4683      	mov	fp, r0
    lv_coord_t left_knob = lv_obj_get_style_pad_left(obj, LV_PART_KNOB);
 801a31e:	4620      	mov	r0, r4
 801a320:	f7ff f993 	bl	801964a <lv_obj_get_style_pad_left>
    lv_coord_t right_knob = lv_obj_get_style_pad_right(obj, LV_PART_KNOB);
 801a324:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    lv_coord_t left_knob = lv_obj_get_style_pad_left(obj, LV_PART_KNOB);
 801a328:	4681      	mov	r9, r0
    lv_coord_t right_knob = lv_obj_get_style_pad_right(obj, LV_PART_KNOB);
 801a32a:	4620      	mov	r0, r4
 801a32c:	f7ff f994 	bl	8019658 <lv_obj_get_style_pad_right>
    lv_coord_t top_knob = lv_obj_get_style_pad_top(obj, LV_PART_KNOB);
 801a330:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    lv_coord_t right_knob = lv_obj_get_style_pad_right(obj, LV_PART_KNOB);
 801a334:	4682      	mov	sl, r0
    lv_coord_t top_knob = lv_obj_get_style_pad_top(obj, LV_PART_KNOB);
 801a336:	4620      	mov	r0, r4
 801a338:	f7ff f995 	bl	8019666 <lv_obj_get_style_pad_top>
    lv_coord_t bottom_knob = lv_obj_get_style_pad_bottom(obj, LV_PART_KNOB);
 801a33c:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    lv_coord_t top_knob = lv_obj_get_style_pad_top(obj, LV_PART_KNOB);
 801a340:	4680      	mov	r8, r0
    lv_coord_t bottom_knob = lv_obj_get_style_pad_bottom(obj, LV_PART_KNOB);
 801a342:	4620      	mov	r0, r4
 801a344:	f7ff f996 	bl	8019674 <lv_obj_get_style_pad_bottom>
    lv_coord_t knob_x = (r * lv_trigo_sin(angle + 90)) >> LV_TRIGO_SHIFT;
 801a348:	9b05      	ldr	r3, [sp, #20]
    knob_area->x1 = center->x + knob_x - left_knob - indic_width_half;
 801a34a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 801a34e:	44a9      	add	r9, r5
    lv_coord_t knob_x = (r * lv_trigo_sin(angle + 90)) >> LV_TRIGO_SHIFT;
 801a350:	4373      	muls	r3, r6
    knob_area->x2 = center->x + knob_x + right_knob + indic_width_half;
 801a352:	44aa      	add	sl, r5
    lv_coord_t knob_y = (r * lv_trigo_sin(angle)) >> LV_TRIGO_SHIFT;
 801a354:	fb06 f60b 	mul.w	r6, r6, fp
    knob_area->y1 = center->y + knob_y - top_knob - indic_width_half;
 801a358:	44a8      	add	r8, r5
    knob_area->x1 = center->x + knob_x - left_knob - indic_width_half;
 801a35a:	eb02 32e3 	add.w	r2, r2, r3, asr #15
    knob_area->y1 = center->y + knob_y - top_knob - indic_width_half;
 801a35e:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    knob_area->y2 = center->y + knob_y + bottom_knob + indic_width_half;
 801a362:	4405      	add	r5, r0
    knob_area->y1 = center->y + knob_y - top_knob - indic_width_half;
 801a364:	eb03 33e6 	add.w	r3, r3, r6, asr #15
    obj_draw_dsc.draw_area = &knob_area;
 801a368:	ae08      	add	r6, sp, #32
    knob_area->x1 = center->x + knob_x - left_knob - indic_width_half;
 801a36a:	b292      	uxth	r2, r2
    knob_area->y1 = center->y + knob_y - top_knob - indic_width_half;
 801a36c:	b29b      	uxth	r3, r3
    knob_area->x1 = center->x + knob_x - left_knob - indic_width_half;
 801a36e:	eba2 0909 	sub.w	r9, r2, r9
    knob_area->x2 = center->x + knob_x + right_knob + indic_width_half;
 801a372:	4452      	add	r2, sl
    knob_area->y1 = center->y + knob_y - top_knob - indic_width_half;
 801a374:	eba3 0808 	sub.w	r8, r3, r8
    knob_area->y2 = center->y + knob_y + bottom_knob + indic_width_half;
 801a378:	442b      	add	r3, r5
    lv_draw_rect_dsc_init(&knob_rect_dsc);
 801a37a:	ad0d      	add	r5, sp, #52	; 0x34
    knob_area->x2 = center->x + knob_x + right_knob + indic_width_half;
 801a37c:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
    knob_area->y2 = center->y + knob_y + bottom_knob + indic_width_half;
 801a380:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
    lv_draw_rect_dsc_init(&knob_rect_dsc);
 801a384:	4628      	mov	r0, r5
    knob_area->x1 = center->x + knob_x - left_knob - indic_width_half;
 801a386:	f8ad 9020 	strh.w	r9, [sp, #32]
    knob_area->y1 = center->y + knob_y - top_knob - indic_width_half;
 801a38a:	f8ad 8022 	strh.w	r8, [sp, #34]	; 0x22
    lv_draw_rect_dsc_init(&knob_rect_dsc);
 801a38e:	f7f2 fb7b 	bl	800ca88 <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(obj, LV_PART_KNOB, &knob_rect_dsc);
 801a392:	462a      	mov	r2, r5
 801a394:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 801a398:	4620      	mov	r0, r4
 801a39a:	f7ea f8e1 	bl	8004560 <lv_obj_init_draw_rect_dsc>
    obj_draw_dsc.part = LV_PART_KNOB;
 801a39e:	f44f 3340 	mov.w	r3, #196608	; 0x30000
    lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &obj_draw_dsc);
 801a3a2:	aa1a      	add	r2, sp, #104	; 0x68
 801a3a4:	211a      	movs	r1, #26
 801a3a6:	4620      	mov	r0, r4
    obj_draw_dsc.part = LV_PART_KNOB;
 801a3a8:	9327      	str	r3, [sp, #156]	; 0x9c
    obj_draw_dsc.rect_dsc = &knob_rect_dsc;
 801a3aa:	e9cd 651b 	strd	r6, r5, [sp, #108]	; 0x6c
    lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &obj_draw_dsc);
 801a3ae:	f7e7 fd8b 	bl	8001ec8 <lv_event_send>
    lv_draw_rect(&knob_area, clip_area, &knob_rect_dsc);
 801a3b2:	462a      	mov	r2, r5
 801a3b4:	4639      	mov	r1, r7
 801a3b6:	4630      	mov	r0, r6
 801a3b8:	f7f2 fb88 	bl	800cacc <lv_draw_rect>
    lv_event_send(obj, LV_EVENT_DRAW_PART_END, &obj_draw_dsc);
 801a3bc:	aa1a      	add	r2, sp, #104	; 0x68
 801a3be:	211b      	movs	r1, #27
 801a3c0:	4620      	mov	r0, r4
 801a3c2:	e67e      	b.n	801a0c2 <lv_arc_event+0x276>
    else if(arc->type == LV_ARC_MODE_SYMMETRICAL) {
 801a3c4:	2b02      	cmp	r3, #2
 801a3c6:	d19d      	bne.n	801a304 <lv_arc_event+0x4b8>
        int32_t range_midpoint = (int32_t)(arc->min_value +arc->max_value) / 2;
 801a3c8:	f9b4 2032 	ldrsh.w	r2, [r4, #50]	; 0x32
 801a3cc:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 801a3d0:	4413      	add	r3, r2
        if(arc->value < range_midpoint) angle +=arc->indic_angle_start;
 801a3d2:	f9b4 202e 	ldrsh.w	r2, [r4, #46]	; 0x2e
        int32_t range_midpoint = (int32_t)(arc->min_value +arc->max_value) / 2;
 801a3d6:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
        if(arc->value < range_midpoint) angle +=arc->indic_angle_start;
 801a3da:	ebb2 0f63 	cmp.w	r2, r3, asr #1
 801a3de:	da89      	bge.n	801a2f4 <lv_arc_event+0x4a8>
 801a3e0:	e78c      	b.n	801a2fc <lv_arc_event+0x4b0>
 801a3e2:	bf00      	nop

0801a3e4 <lv_area_get_width>:
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801a3e4:	8883      	ldrh	r3, [r0, #4]
 801a3e6:	8800      	ldrh	r0, [r0, #0]
 801a3e8:	3301      	adds	r3, #1
 801a3ea:	1a18      	subs	r0, r3, r0
}
 801a3ec:	b200      	sxth	r0, r0
 801a3ee:	4770      	bx	lr

0801a3f0 <lv_area_get_height>:
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801a3f0:	88c3      	ldrh	r3, [r0, #6]
 801a3f2:	8840      	ldrh	r0, [r0, #2]
 801a3f4:	3301      	adds	r3, #1
 801a3f6:	1a18      	subs	r0, r3, r0
}
 801a3f8:	b200      	sxth	r0, r0
 801a3fa:	4770      	bx	lr

0801a3fc <lv_bar_destructor>:

    LV_TRACE_OBJ_CREATE("finished");
}

static void lv_bar_destructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 801a3fc:	b510      	push	{r4, lr}
 801a3fe:	460c      	mov	r4, r1
    LV_UNUSED(class_p);
    lv_bar_t * bar = (lv_bar_t *)obj;

    lv_anim_del(&bar->cur_value_anim, NULL);
 801a400:	2100      	movs	r1, #0
 801a402:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 801a406:	f7fc fc33 	bl	8016c70 <lv_anim_del>
    lv_anim_del(&bar->start_value_anim, NULL);
 801a40a:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 801a40e:	2100      	movs	r1, #0
}
 801a410:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_anim_del(&bar->start_value_anim, NULL);
 801a414:	f7fc bc2c 	b.w	8016c70 <lv_anim_del>

0801a418 <lv_bar_anim_ready>:
    lv_obj_invalidate(bar_anim->bar);
}

static void lv_bar_anim_ready(lv_anim_t * a)
{
    _lv_bar_anim_t * var = a->var;
 801a418:	6803      	ldr	r3, [r0, #0]
    lv_obj_t * obj = (lv_obj_t *)var->bar;
    lv_bar_t * bar = (lv_bar_t *)obj;

    var->anim_state = LV_BAR_ANIM_STATE_INV;
 801a41a:	f04f 32ff 	mov.w	r2, #4294967295
    lv_obj_t * obj = (lv_obj_t *)var->bar;
 801a41e:	6818      	ldr	r0, [r3, #0]
    var->anim_state = LV_BAR_ANIM_STATE_INV;
 801a420:	60da      	str	r2, [r3, #12]
    if(var == &bar->cur_value_anim)
 801a422:	f100 023c 	add.w	r2, r0, #60	; 0x3c
 801a426:	4293      	cmp	r3, r2
 801a428:	d103      	bne.n	801a432 <lv_bar_anim_ready+0x1a>
        bar->cur_value = var->anim_end;
 801a42a:	689b      	ldr	r3, [r3, #8]
 801a42c:	6243      	str	r3, [r0, #36]	; 0x24
    else if(var == &bar->start_value_anim)
        bar->start_value = var->anim_end;
    lv_obj_invalidate(var->bar);
 801a42e:	f7ea be73 	b.w	8005118 <lv_obj_invalidate>
    else if(var == &bar->start_value_anim)
 801a432:	f100 024c 	add.w	r2, r0, #76	; 0x4c
 801a436:	4293      	cmp	r3, r2
        bar->start_value = var->anim_end;
 801a438:	bf04      	itt	eq
 801a43a:	689b      	ldreq	r3, [r3, #8]
 801a43c:	6303      	streq	r3, [r0, #48]	; 0x30
 801a43e:	e7f6      	b.n	801a42e <lv_bar_anim_ready+0x16>

0801a440 <lv_bar_anim>:
    bar_anim->anim_state    = value;
 801a440:	60c1      	str	r1, [r0, #12]
    lv_obj_invalidate(bar_anim->bar);
 801a442:	6800      	ldr	r0, [r0, #0]
 801a444:	f7ea be68 	b.w	8005118 <lv_obj_invalidate>

0801a448 <lv_bar_set_value_with_anim.part.0>:
}

static void lv_bar_set_value_with_anim(lv_obj_t * obj, int32_t new_value, int32_t * value_ptr,
 801a448:	b530      	push	{r4, r5, lr}
 801a44a:	b093      	sub	sp, #76	; 0x4c
        /*Animation in progress. Start from the animation end value*/
        else {
            anim_info->anim_start = anim_info->anim_end;
            anim_info->anim_end   = new_value;
        }
        *value_ptr = new_value;
 801a44c:	6011      	str	r1, [r2, #0]
static void lv_bar_set_value_with_anim(lv_obj_t * obj, int32_t new_value, int32_t * value_ptr,
 801a44e:	4605      	mov	r5, r0
        /*Stop the previous animation if it exists*/
        lv_anim_del(anim_info, NULL);
 801a450:	2100      	movs	r1, #0
 801a452:	4618      	mov	r0, r3
static void lv_bar_set_value_with_anim(lv_obj_t * obj, int32_t new_value, int32_t * value_ptr,
 801a454:	461c      	mov	r4, r3
        lv_anim_del(anim_info, NULL);
 801a456:	f7fc fc0b 	bl	8016c70 <lv_anim_del>

        lv_anim_t a;
        lv_anim_init(&a);
 801a45a:	a801      	add	r0, sp, #4
 801a45c:	f7fc fbee 	bl	8016c3c <lv_anim_init>
 *                LittelvGL's built-in functions can be used.
 *                E.g. lv_obj_set_x
 */
static inline void lv_anim_set_exec_cb(lv_anim_t * a, lv_anim_exec_xcb_t exec_cb)
{
    a->exec_cb = exec_cb;
 801a460:	4b0a      	ldr	r3, [pc, #40]	; (801a48c <lv_bar_set_value_with_anim.part.0+0x44>)
 * @param start the start value
 * @param end the end value
 */
static inline void lv_anim_set_values(lv_anim_t * a, int32_t start, int32_t end)
{
    a->start_value = start;
 801a462:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ANIM_TIME);
 801a464:	2265      	movs	r2, #101	; 0x65
    a->exec_cb = exec_cb;
 801a466:	9302      	str	r3, [sp, #8]
    a->current_value = start;
    a->end_value = end;
 801a468:	f44f 7380 	mov.w	r3, #256	; 0x100
 801a46c:	4628      	mov	r0, r5
    a->var = var;
 801a46e:	9401      	str	r4, [sp, #4]
    a->end_value = end;
 801a470:	930a      	str	r3, [sp, #40]	; 0x28
 * @param a pointer to an initialized `lv_anim_t` variable
 * @param ready_cb a function call when the animation is ready
 */
static inline void lv_anim_set_ready_cb(lv_anim_t * a, lv_anim_ready_cb_t ready_cb)
{
    a->ready_cb = ready_cb;
 801a472:	4b07      	ldr	r3, [pc, #28]	; (801a490 <lv_bar_set_value_with_anim.part.0+0x48>)
    a->current_value = start;
 801a474:	e9cd 1108 	strd	r1, r1, [sp, #32]
    a->ready_cb = ready_cb;
 801a478:	9304      	str	r3, [sp, #16]
 801a47a:	f7ec ff75 	bl	8007368 <lv_obj_get_style_prop>
    a->time = duration;
 801a47e:	900b      	str	r0, [sp, #44]	; 0x2c
        lv_anim_set_var(&a, anim_info);
        lv_anim_set_exec_cb(&a, lv_bar_anim);
        lv_anim_set_values(&a, LV_BAR_ANIM_STATE_START, LV_BAR_ANIM_STATE_END);
        lv_anim_set_ready_cb(&a, lv_bar_anim_ready);
        lv_anim_set_time(&a, lv_obj_get_style_anim_time(obj, LV_PART_MAIN));
        lv_anim_start(&a);
 801a480:	a801      	add	r0, sp, #4
 801a482:	f7fc fc21 	bl	8016cc8 <lv_anim_start>
    }
}
 801a486:	b013      	add	sp, #76	; 0x4c
 801a488:	bd30      	pop	{r4, r5, pc}
 801a48a:	bf00      	nop
 801a48c:	0801a441 	.word	0x0801a441
 801a490:	0801a419 	.word	0x0801a419

0801a494 <draw_indic>:
{
 801a494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a498:	4605      	mov	r5, r0
 801a49a:	b0bf      	sub	sp, #252	; 0xfc
    lv_obj_t * obj = lv_event_get_target(e);
 801a49c:	f7e7 fd34 	bl	8001f08 <lv_event_get_target>
 801a4a0:	4604      	mov	r4, r0
    const lv_area_t * clip_area = lv_event_get_param(e);
 801a4a2:	4628      	mov	r0, r5
 801a4a4:	f7e7 fd34 	bl	8001f10 <lv_event_get_param>
    lv_obj_get_coords(obj, &bar_coords);
 801a4a8:	a90b      	add	r1, sp, #44	; 0x2c
    const lv_area_t * clip_area = lv_event_get_param(e);
 801a4aa:	4683      	mov	fp, r0
    lv_obj_get_coords(obj, &bar_coords);
 801a4ac:	4620      	mov	r0, r4
 801a4ae:	f7ea fc8e 	bl	8004dce <lv_obj_get_coords>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 801a4b2:	f640 020a 	movw	r2, #2058	; 0x80a
 801a4b6:	2100      	movs	r1, #0
 801a4b8:	4620      	mov	r0, r4
 801a4ba:	f7ec ff55 	bl	8007368 <lv_obj_get_style_prop>
 801a4be:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 801a4c0:	f640 020b 	movw	r2, #2059	; 0x80b
 801a4c4:	2100      	movs	r1, #0
 801a4c6:	4620      	mov	r0, r4
    bar_coords.x1 -= transf_w;
 801a4c8:	b2b6      	uxth	r6, r6
 801a4ca:	f7ec ff4d 	bl	8007368 <lv_obj_get_style_prop>
 801a4ce:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
    bar_coords.y1 -= transf_h;
 801a4d2:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801a4d6:	b285      	uxth	r5, r0
    bar_coords.x1 -= transf_w;
 801a4d8:	1bbb      	subs	r3, r7, r6
    bar_coords.x2 += transf_w;
 801a4da:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
    bar_coords.x1 -= transf_w;
 801a4de:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
    bar_coords.y1 -= transf_h;
 801a4e2:	1b4b      	subs	r3, r1, r5
    bar_coords.x2 += transf_w;
 801a4e4:	4432      	add	r2, r6
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801a4e6:	3601      	adds	r6, #1
    bar_coords.y1 -= transf_h;
 801a4e8:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
    bar_coords.y2 += transf_h;
 801a4ec:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
    bar_coords.x2 += transf_w;
 801a4f0:	b292      	uxth	r2, r2
    bar_coords.y2 += transf_h;
 801a4f2:	442b      	add	r3, r5
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801a4f4:	3501      	adds	r5, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801a4f6:	4416      	add	r6, r2
    bar_coords.x2 += transf_w;
 801a4f8:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
    bar_coords.y2 += transf_h;
 801a4fc:	b29b      	uxth	r3, r3
 801a4fe:	1bf6      	subs	r6, r6, r7
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801a500:	441d      	add	r5, r3
 801a502:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801a506:	b236      	sxth	r6, r6
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801a508:	1a6d      	subs	r5, r5, r1
    int32_t range = bar->max_value - bar->min_value;
 801a50a:	e9d4 310a 	ldrd	r3, r1, [r4, #40]	; 0x28
 801a50e:	b22d      	sxth	r5, r5
 801a510:	1aca      	subs	r2, r1, r3
 801a512:	9202      	str	r2, [sp, #8]
    if(bar->mode == LV_BAR_MODE_SYMMETRICAL && bar->min_value < 0 && bar->max_value > 0 &&
 801a514:	f894 205c 	ldrb.w	r2, [r4, #92]	; 0x5c
 801a518:	f002 0203 	and.w	r2, r2, #3
 801a51c:	2a01      	cmp	r2, #1
 801a51e:	f040 81cd 	bne.w	801a8bc <draw_indic+0x428>
 801a522:	2b00      	cmp	r3, #0
 801a524:	f280 81ca 	bge.w	801a8bc <draw_indic+0x428>
 801a528:	2900      	cmp	r1, #0
 801a52a:	f340 81c7 	ble.w	801a8bc <draw_indic+0x428>
 801a52e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801a530:	1ad0      	subs	r0, r2, r3
 801a532:	4243      	negs	r3, r0
 801a534:	4143      	adcs	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801a536:	f241 0212 	movw	r2, #4114	; 0x1012
 801a53a:	2100      	movs	r1, #0
 801a53c:	4620      	mov	r0, r4
    bool sym = false;
 801a53e:	9303      	str	r3, [sp, #12]
 801a540:	f7ec ff12 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801a544:	f241 0213 	movw	r2, #4115	; 0x1013
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801a548:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801a54a:	2100      	movs	r1, #0
 801a54c:	4620      	mov	r0, r4
    lv_area_copy(&bar->indic_area, &bar_coords);
 801a54e:	f104 0a34 	add.w	sl, r4, #52	; 0x34
 801a552:	f7ec ff09 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801a556:	f241 0210 	movw	r2, #4112	; 0x1010
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801a55a:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801a55c:	2100      	movs	r1, #0
 801a55e:	4620      	mov	r0, r4
 801a560:	f7ec ff02 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801a564:	f241 0211 	movw	r2, #4113	; 0x1011
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801a568:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801a56a:	2100      	movs	r1, #0
 801a56c:	4620      	mov	r0, r4
 801a56e:	f7ec fefb 	bl	8007368 <lv_obj_get_style_prop>
    dest->x2 = src->x2;
 801a572:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
    bar->indic_area.x1 += bg_left;
 801a576:	b2ba      	uxth	r2, r7
    dest->y1 = src->y1;
 801a578:	f9bd 102e 	ldrsh.w	r1, [sp, #46]	; 0x2e
    dest->y2 = src->y2;
 801a57c:	f9bd e032 	ldrsh.w	lr, [sp, #50]	; 0x32
    if(hor && lv_area_get_height(&bar->indic_area) < LV_BAR_SIZE_MIN) {
 801a580:	42b5      	cmp	r5, r6
    bar->indic_area.x1 += bg_left;
 801a582:	9206      	str	r2, [sp, #24]
    bar->indic_area.x2 -= bg_right;
 801a584:	fa1f f289 	uxth.w	r2, r9
    bar->indic_area.x1 += bg_left;
 801a588:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
    bar->indic_area.x2 -= bg_right;
 801a58c:	eba3 0302 	sub.w	r3, r3, r2
 801a590:	9204      	str	r2, [sp, #16]
    bar->indic_area.y1 += bg_top;
 801a592:	fa1f f288 	uxth.w	r2, r8
    bar->indic_area.x1 += bg_left;
 801a596:	fa1c f787 	uxtah	r7, ip, r7
    bar->indic_area.y1 += bg_top;
 801a59a:	fa11 f888 	uxtah	r8, r1, r8
    bar->indic_area.x2 -= bg_right;
 801a59e:	b29b      	uxth	r3, r3
    bar->indic_area.y1 += bg_top;
 801a5a0:	9207      	str	r2, [sp, #28]
    bar->indic_area.y2 -= bg_bottom;
 801a5a2:	b282      	uxth	r2, r0
    bar->indic_area.x1 += bg_left;
 801a5a4:	b2bf      	uxth	r7, r7
    bar->indic_area.x2 -= bg_right;
 801a5a6:	8723      	strh	r3, [r4, #56]	; 0x38
    bar->indic_area.y2 -= bg_bottom;
 801a5a8:	9205      	str	r2, [sp, #20]
 801a5aa:	ebae 0202 	sub.w	r2, lr, r2
    bar->indic_area.y1 += bg_top;
 801a5ae:	fa1f f888 	uxth.w	r8, r8
    bar->indic_area.x1 += bg_left;
 801a5b2:	86a7      	strh	r7, [r4, #52]	; 0x34
    bar->indic_area.y2 -= bg_bottom;
 801a5b4:	b292      	uxth	r2, r2
    bar->indic_area.y1 += bg_top;
 801a5b6:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
    bar->indic_area.y2 -= bg_bottom;
 801a5ba:	8762      	strh	r2, [r4, #58]	; 0x3a
    if(hor && lv_area_get_height(&bar->indic_area) < LV_BAR_SIZE_MIN) {
 801a5bc:	f300 8180 	bgt.w	801a8c0 <draw_indic+0x42c>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801a5c0:	3201      	adds	r2, #1
 801a5c2:	eba2 0208 	sub.w	r2, r2, r8
 801a5c6:	b212      	sxth	r2, r2
 801a5c8:	2a03      	cmp	r2, #3
 801a5ca:	dc09      	bgt.n	801a5e0 <draw_indic+0x14c>
        bar->indic_area.y1 = obj->coords.y1 + (barh / 2) - (LV_BAR_SIZE_MIN / 2);
 801a5cc:	8ae2      	ldrh	r2, [r4, #22]
 801a5ce:	eb05 73d5 	add.w	r3, r5, r5, lsr #31
 801a5d2:	eb02 0363 	add.w	r3, r2, r3, asr #1
 801a5d6:	b29b      	uxth	r3, r3
 801a5d8:	1e9a      	subs	r2, r3, #2
        bar->indic_area.y2 = bar->indic_area.y1 + LV_BAR_SIZE_MIN;
 801a5da:	3302      	adds	r3, #2
        bar->indic_area.y1 = obj->coords.y1 + (barh / 2) - (LV_BAR_SIZE_MIN / 2);
 801a5dc:	86e2      	strh	r2, [r4, #54]	; 0x36
        bar->indic_area.y2 = bar->indic_area.y1 + LV_BAR_SIZE_MIN;
 801a5de:	8763      	strh	r3, [r4, #58]	; 0x3a
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801a5e0:	f9b4 3038 	ldrsh.w	r3, [r4, #56]	; 0x38
    lv_coord_t anim_length = hor ? indicw : indich;
 801a5e4:	42b5      	cmp	r5, r6
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801a5e6:	f9b4 203a 	ldrsh.w	r2, [r4, #58]	; 0x3a
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801a5ea:	bfd8      	it	le
 801a5ec:	3301      	addle	r3, #1
 801a5ee:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	; 0x34
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801a5f2:	bfc8      	it	gt
 801a5f4:	1c53      	addgt	r3, r2, #1
 801a5f6:	f9b4 0036 	ldrsh.w	r0, [r4, #54]	; 0x36
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801a5fa:	bfd8      	it	le
 801a5fc:	1a5b      	suble	r3, r3, r1
    if(LV_BAR_IS_ANIMATING(bar->start_value_anim)) {
 801a5fe:	6da7      	ldr	r7, [r4, #88]	; 0x58
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801a600:	bfc8      	it	gt
 801a602:	1a1b      	subgt	r3, r3, r0
    if(hor) {
 801a604:	42b5      	cmp	r5, r6
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801a606:	b29b      	uxth	r3, r3
        indic_length_calc = lv_area_get_width;
 801a608:	bfd6      	itet	le
 801a60a:	4abe      	ldrle	r2, [pc, #760]	; (801a904 <draw_indic+0x470>)
        indic_length_calc = lv_area_get_height;
 801a60c:	4abe      	ldrgt	r2, [pc, #760]	; (801a908 <draw_indic+0x474>)
        axis2 = &bar->indic_area.x2;
 801a60e:	f104 0938 	addle.w	r9, r4, #56	; 0x38
 801a612:	b21b      	sxth	r3, r3
        axis2 = &bar->indic_area.y2;
 801a614:	bfc8      	it	gt
 801a616:	f104 093a 	addgt.w	r9, r4, #58	; 0x3a
        indic_length_calc = lv_area_get_height;
 801a61a:	9208      	str	r2, [sp, #32]
 801a61c:	9301      	str	r3, [sp, #4]
        axis1 = &bar->indic_area.x1;
 801a61e:	bfd4      	ite	le
 801a620:	4653      	movle	r3, sl
        axis1 = &bar->indic_area.y1;
 801a622:	f104 0336 	addgt.w	r3, r4, #54	; 0x36
    if(LV_BAR_IS_ANIMATING(bar->start_value_anim)) {
 801a626:	1c79      	adds	r1, r7, #1
 801a628:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 801a62a:	f000 815a 	beq.w	801a8e2 <draw_indic+0x44e>
            (int32_t)((int32_t)anim_length * (bar->start_value_anim.anim_start - bar->min_value)) / range;
 801a62e:	6d21      	ldr	r1, [r4, #80]	; 0x50
 801a630:	eba1 0c02 	sub.w	ip, r1, r2
 801a634:	9901      	ldr	r1, [sp, #4]
 801a636:	fb01 fc0c 	mul.w	ip, r1, ip
 801a63a:	9902      	ldr	r1, [sp, #8]
 801a63c:	fb9c fcf1 	sdiv	ip, ip, r1
            (int32_t)((int32_t)anim_length * (bar->start_value_anim.anim_end - bar->min_value)) / range;
 801a640:	6d61      	ldr	r1, [r4, #84]	; 0x54
 801a642:	1a88      	subs	r0, r1, r2
 801a644:	9901      	ldr	r1, [sp, #4]
 801a646:	4348      	muls	r0, r1
 801a648:	9902      	ldr	r1, [sp, #8]
 801a64a:	fb90 f0f1 	sdiv	r0, r0, r1
        anim_start_value_x = (((anim_start_value_end_x - anim_start_value_start_x) * bar->start_value_anim.anim_state) /
 801a64e:	fa0f f18c 	sxth.w	r1, ip
 801a652:	b200      	sxth	r0, r0
 801a654:	1a40      	subs	r0, r0, r1
 801a656:	4347      	muls	r7, r0
 801a658:	bf48      	it	mi
 801a65a:	37ff      	addmi	r7, #255	; 0xff
        anim_start_value_x += anim_start_value_start_x;
 801a65c:	eb0c 2727 	add.w	r7, ip, r7, asr #8
    if(LV_BAR_IS_ANIMATING(bar->cur_value_anim)) {
 801a660:	f8d4 8048 	ldr.w	r8, [r4, #72]	; 0x48
        anim_start_value_x = (int32_t)((int32_t)anim_length * (bar->start_value - bar->min_value)) / range;
 801a664:	b23f      	sxth	r7, r7
    if(LV_BAR_IS_ANIMATING(bar->cur_value_anim)) {
 801a666:	f1b8 3fff 	cmp.w	r8, #4294967295
 801a66a:	f000 8142 	beq.w	801a8f2 <draw_indic+0x45e>
            (int32_t)((int32_t)anim_length * (bar->cur_value_anim.anim_start - bar->min_value)) / range;
 801a66e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801a670:	9901      	ldr	r1, [sp, #4]
 801a672:	1a80      	subs	r0, r0, r2
 801a674:	4348      	muls	r0, r1
 801a676:	9902      	ldr	r1, [sp, #8]
 801a678:	fb90 f0f1 	sdiv	r0, r0, r1
            (int32_t)((int32_t)anim_length * (bar->cur_value_anim.anim_end - bar->min_value)) / range;
 801a67c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801a67e:	1a89      	subs	r1, r1, r2
 801a680:	9a01      	ldr	r2, [sp, #4]
 801a682:	4351      	muls	r1, r2
 801a684:	9a02      	ldr	r2, [sp, #8]
 801a686:	fb91 f2f2 	sdiv	r2, r1, r2
        anim_cur_value_x = anim_cur_value_start_x + (((anim_cur_value_end_x - anim_cur_value_start_x) *
 801a68a:	b211      	sxth	r1, r2
 801a68c:	b202      	sxth	r2, r0
 801a68e:	1a8a      	subs	r2, r1, r2
                                                      bar->cur_value_anim.anim_state) /
 801a690:	4641      	mov	r1, r8
 801a692:	4351      	muls	r1, r2
 801a694:	460a      	mov	r2, r1
 801a696:	bf48      	it	mi
 801a698:	32ff      	addmi	r2, #255	; 0xff
        anim_cur_value_x = anim_cur_value_start_x + (((anim_cur_value_end_x - anim_cur_value_start_x) *
 801a69a:	eb00 2822 	add.w	r8, r0, r2, asr #8
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 801a69e:	f241 426a 	movw	r2, #5226	; 0x146a
 801a6a2:	2100      	movs	r1, #0
 801a6a4:	4620      	mov	r0, r4
 801a6a6:	9309      	str	r3, [sp, #36]	; 0x24
        anim_cur_value_x = (int32_t)((int32_t)anim_length * (bar->cur_value - bar->min_value)) / range;
 801a6a8:	fa0f f888 	sxth.w	r8, r8
 801a6ac:	f7ec fe5c 	bl	8007368 <lv_obj_get_style_prop>
    if(hor && base_dir == LV_BASE_DIR_RTL) {
 801a6b0:	42b5      	cmp	r5, r6
 801a6b2:	fa1f f188 	uxth.w	r1, r8
 801a6b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a6b8:	b2ba      	uxth	r2, r7
 801a6ba:	f300 816f 	bgt.w	801a99c <draw_indic+0x508>
 801a6be:	b2c0      	uxtb	r0, r0
 801a6c0:	2801      	cmp	r0, #1
 801a6c2:	d108      	bne.n	801a6d6 <draw_indic+0x242>
        anim_start_value_x = -anim_start_value_x;
 801a6c4:	4257      	negs	r7, r2
        anim_cur_value_x = -anim_cur_value_x;
 801a6c6:	f1c1 0800 	rsb	r8, r1, #0
        anim_start_value_x = -anim_start_value_x;
 801a6ca:	461a      	mov	r2, r3
 801a6cc:	464b      	mov	r3, r9
        anim_cur_value_x = -anim_cur_value_x;
 801a6ce:	fa0f f888 	sxth.w	r8, r8
        anim_start_value_x = -anim_start_value_x;
 801a6d2:	b23f      	sxth	r7, r7
 801a6d4:	4691      	mov	r9, r2
        *axis2 = *axis1 + anim_cur_value_x;
 801a6d6:	881a      	ldrh	r2, [r3, #0]
 801a6d8:	4490      	add	r8, r2
 801a6da:	f8a9 8000 	strh.w	r8, [r9]
        *axis1 += anim_start_value_x;
 801a6de:	881a      	ldrh	r2, [r3, #0]
 801a6e0:	4417      	add	r7, r2
 801a6e2:	801f      	strh	r7, [r3, #0]
    if(sym) {
 801a6e4:	9a03      	ldr	r2, [sp, #12]
 801a6e6:	2a00      	cmp	r2, #0
 801a6e8:	f000 813c 	beq.w	801a964 <draw_indic+0x4d0>
        shift = (-bar->min_value * anim_length) / range;
 801a6ec:	6aa0      	ldr	r0, [r4, #40]	; 0x28
        if(hor) {
 801a6ee:	42b5      	cmp	r5, r6
        shift = (-bar->min_value * anim_length) / range;
 801a6f0:	9a01      	ldr	r2, [sp, #4]
 801a6f2:	f1c0 0100 	rsb	r1, r0, #0
 801a6f6:	f9b9 7000 	ldrsh.w	r7, [r9]
 801a6fa:	f9b3 0000 	ldrsh.w	r0, [r3]
 801a6fe:	fb02 f201 	mul.w	r2, r2, r1
 801a702:	4611      	mov	r1, r2
 801a704:	9a02      	ldr	r2, [sp, #8]
 801a706:	fb91 f1f2 	sdiv	r1, r1, r2
 801a70a:	b289      	uxth	r1, r1
        if(hor) {
 801a70c:	f300 80fe 	bgt.w	801a90c <draw_indic+0x478>
            zero = *axis1 + shift;
 801a710:	4401      	add	r1, r0
 801a712:	b209      	sxth	r1, r1
            if(*axis2 > zero)
 801a714:	428f      	cmp	r7, r1
                *axis1 = *axis2;
 801a716:	bfd6      	itet	le
 801a718:	801f      	strhle	r7, [r3, #0]
                *axis1 = zero;
 801a71a:	8019      	strhgt	r1, [r3, #0]
                *axis2 = zero;
 801a71c:	f8a9 1000 	strhle.w	r1, [r9]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_RADIUS);
 801a720:	2260      	movs	r2, #96	; 0x60
 801a722:	2100      	movs	r1, #0
 801a724:	4620      	mov	r0, r4
    if(bg_radius > short_side >> 1) bg_radius = short_side >> 1;
 801a726:	462f      	mov	r7, r5
 801a728:	f7ec fe1e 	bl	8007368 <lv_obj_get_style_prop>
 801a72c:	42b5      	cmp	r5, r6
    return (lv_coord_t)v.num;
 801a72e:	b200      	sxth	r0, r0
    lv_draw_rect_dsc_init(&draw_rect_dsc);
 801a730:	f10d 087c 	add.w	r8, sp, #124	; 0x7c
    if(bg_radius > short_side >> 1) bg_radius = short_side >> 1;
 801a734:	bfa8      	it	ge
 801a736:	4637      	movge	r7, r6
 801a738:	107f      	asrs	r7, r7, #1
 801a73a:	4287      	cmp	r7, r0
 801a73c:	bfa8      	it	ge
 801a73e:	4607      	movge	r7, r0
    lv_draw_rect_dsc_init(&draw_rect_dsc);
 801a740:	4640      	mov	r0, r8
 801a742:	f7f2 f9a1 	bl	800ca88 <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(obj, LV_PART_INDICATOR, &draw_rect_dsc);
 801a746:	4642      	mov	r2, r8
 801a748:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 801a74c:	4620      	mov	r0, r4
 801a74e:	f7e9 ff07 	bl	8004560 <lv_obj_init_draw_rect_dsc>
    lv_obj_draw_dsc_init(&obj_draw_dsc, clip_area);
 801a752:	4659      	mov	r1, fp
 801a754:	a82c      	add	r0, sp, #176	; 0xb0
 801a756:	f7ea f9e7 	bl	8004b28 <lv_obj_draw_dsc_init>
    obj_draw_dsc.part = LV_PART_INDICATOR;
 801a75a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
	lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &obj_draw_dsc);
 801a75e:	211a      	movs	r1, #26
 801a760:	aa2c      	add	r2, sp, #176	; 0xb0
 801a762:	4620      	mov	r0, r4
    obj_draw_dsc.part = LV_PART_INDICATOR;
 801a764:	9339      	str	r3, [sp, #228]	; 0xe4
	obj_draw_dsc.draw_area = &bar->indic_area;
 801a766:	e9cd a82d 	strd	sl, r8, [sp, #180]	; 0xb4
	lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &obj_draw_dsc);
 801a76a:	f7e7 fbad 	bl	8001ec8 <lv_event_send>
    if((hor && lv_area_get_width(&bar->indic_area) > bg_radius * 2) ||
 801a76e:	42b5      	cmp	r5, r6
 801a770:	ea4f 0247 	mov.w	r2, r7, lsl #1
 801a774:	bfd7      	itett	le
 801a776:	8f23      	ldrhle	r3, [r4, #56]	; 0x38
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801a778:	8f63      	ldrhgt	r3, [r4, #58]	; 0x3a
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801a77a:	3301      	addle	r3, #1
 801a77c:	8ea1      	ldrhle	r1, [r4, #52]	; 0x34
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801a77e:	bfc4      	itt	gt
 801a780:	3301      	addgt	r3, #1
 801a782:	8ee1      	ldrhgt	r1, [r4, #54]	; 0x36
 801a784:	1a5b      	subs	r3, r3, r1
       (!hor && lv_area_get_height(&bar->indic_area) > bg_radius * 2)) {
 801a786:	b21b      	sxth	r3, r3
 801a788:	4293      	cmp	r3, r2
 801a78a:	dd19      	ble.n	801a7c0 <draw_indic+0x32c>
        draw_rect_dsc.bg_opa = LV_OPA_TRANSP;
 801a78c:	2200      	movs	r2, #0
        lv_opa_t bg_opa = draw_rect_dsc.bg_opa;
 801a78e:	f89d 3086 	ldrb.w	r3, [sp, #134]	; 0x86
        lv_opa_t bg_img_opa = draw_rect_dsc.bg_img_opa;
 801a792:	f89d 9092 	ldrb.w	r9, [sp, #146]	; 0x92
        lv_draw_rect(&bar->indic_area, clip_area, &draw_rect_dsc);
 801a796:	4659      	mov	r1, fp
        lv_opa_t border_opa = draw_rect_dsc.border_opa;
 801a798:	f89d 809a 	ldrb.w	r8, [sp, #154]	; 0x9a
        lv_draw_rect(&bar->indic_area, clip_area, &draw_rect_dsc);
 801a79c:	4650      	mov	r0, sl
        draw_rect_dsc.bg_opa = LV_OPA_TRANSP;
 801a79e:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
        draw_rect_dsc.bg_img_opa = LV_OPA_TRANSP;
 801a7a2:	f88d 2092 	strb.w	r2, [sp, #146]	; 0x92
        draw_rect_dsc.border_opa = LV_OPA_TRANSP;
 801a7a6:	f88d 209a 	strb.w	r2, [sp, #154]	; 0x9a
        lv_draw_rect(&bar->indic_area, clip_area, &draw_rect_dsc);
 801a7aa:	aa1f      	add	r2, sp, #124	; 0x7c
        lv_opa_t bg_opa = draw_rect_dsc.bg_opa;
 801a7ac:	9301      	str	r3, [sp, #4]
        lv_draw_rect(&bar->indic_area, clip_area, &draw_rect_dsc);
 801a7ae:	f7f2 f98d 	bl	800cacc <lv_draw_rect>
        draw_rect_dsc.bg_opa = bg_opa;
 801a7b2:	9b01      	ldr	r3, [sp, #4]
        draw_rect_dsc.bg_img_opa = bg_img_opa;
 801a7b4:	f88d 9092 	strb.w	r9, [sp, #146]	; 0x92
        draw_rect_dsc.bg_opa = bg_opa;
 801a7b8:	f88d 3086 	strb.w	r3, [sp, #134]	; 0x86
        draw_rect_dsc.border_opa = border_opa;
 801a7bc:	f88d 809a 	strb.w	r8, [sp, #154]	; 0x9a
    bg_mask_area.x1 = obj->coords.x1 + bg_left;
 801a7c0:	9a06      	ldr	r2, [sp, #24]
    lv_draw_mask_radius_init(&mask_bg_param, &bg_mask_area, bg_radius, false);
 801a7c2:	a90d      	add	r1, sp, #52	; 0x34
    bg_mask_area.x1 = obj->coords.x1 + bg_left;
 801a7c4:	8aa3      	ldrh	r3, [r4, #20]
    lv_draw_mask_radius_init(&mask_bg_param, &bg_mask_area, bg_radius, false);
 801a7c6:	a811      	add	r0, sp, #68	; 0x44
    bg_mask_area.x1 = obj->coords.x1 + bg_left;
 801a7c8:	4413      	add	r3, r2
    bg_mask_area.x2 = obj->coords.x2 - bg_right;
 801a7ca:	9a04      	ldr	r2, [sp, #16]
    bg_mask_area.x1 = obj->coords.x1 + bg_left;
 801a7cc:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    bg_mask_area.x2 = obj->coords.x2 - bg_right;
 801a7d0:	8b23      	ldrh	r3, [r4, #24]
 801a7d2:	1a9b      	subs	r3, r3, r2
    bg_mask_area.y1 = obj->coords.y1 + bg_top;
 801a7d4:	9a07      	ldr	r2, [sp, #28]
    bg_mask_area.x2 = obj->coords.x2 - bg_right;
 801a7d6:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
    bg_mask_area.y1 = obj->coords.y1 + bg_top;
 801a7da:	8ae3      	ldrh	r3, [r4, #22]
 801a7dc:	4413      	add	r3, r2
    bg_mask_area.y2 = obj->coords.y2 - bg_bottom;
 801a7de:	9a05      	ldr	r2, [sp, #20]
    bg_mask_area.y1 = obj->coords.y1 + bg_top;
 801a7e0:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
    bg_mask_area.y2 = obj->coords.y2 - bg_bottom;
 801a7e4:	8b63      	ldrh	r3, [r4, #26]
 801a7e6:	1a9b      	subs	r3, r3, r2
    lv_draw_mask_radius_init(&mask_bg_param, &bg_mask_area, bg_radius, false);
 801a7e8:	463a      	mov	r2, r7
    bg_mask_area.y2 = obj->coords.y2 - bg_bottom;
 801a7ea:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
    lv_draw_mask_radius_init(&mask_bg_param, &bg_mask_area, bg_radius, false);
 801a7ee:	2300      	movs	r3, #0
 801a7f0:	f7f1 fdac 	bl	800c34c <lv_draw_mask_radius_init>
    lv_coord_t mask_bg_id = lv_draw_mask_add(&mask_bg_param, NULL);
 801a7f4:	2100      	movs	r1, #0
 801a7f6:	a811      	add	r0, sp, #68	; 0x44
 801a7f8:	f7f1 fc42 	bl	800c080 <lv_draw_mask_add>
    draw_rect_dsc.border_opa = LV_OPA_TRANSP;
 801a7fc:	2300      	movs	r3, #0
    mask_indic_max_area.x1 += bg_left;
 801a7fe:	9906      	ldr	r1, [sp, #24]
    lv_coord_t mask_bg_id = lv_draw_mask_add(&mask_bg_param, NULL);
 801a800:	4607      	mov	r7, r0
    lv_opa_t border_opa = draw_rect_dsc.border_opa;
 801a802:	f89d 809a 	ldrb.w	r8, [sp, #154]	; 0x9a
    if(hor && lv_area_get_height(&mask_indic_max_area) < LV_BAR_SIZE_MIN) {
 801a806:	42b5      	cmp	r5, r6
    draw_rect_dsc.border_opa = LV_OPA_TRANSP;
 801a808:	f88d 309a 	strb.w	r3, [sp, #154]	; 0x9a
    draw_rect_dsc.shadow_opa = LV_OPA_TRANSP;
 801a80c:	f88d 30ae 	strb.w	r3, [sp, #174]	; 0xae
    mask_indic_max_area.x1 += bg_left;
 801a810:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    dest->y1 = src->y1;
 801a814:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 801a818:	440b      	add	r3, r1
    mask_indic_max_area.y1 += bg_top;
 801a81a:	9907      	ldr	r1, [sp, #28]
    dest->x2 = src->x2;
 801a81c:	f9bd 9030 	ldrsh.w	r9, [sp, #48]	; 0x30
 801a820:	440a      	add	r2, r1
    mask_indic_max_area.x2 -= bg_right;
 801a822:	9904      	ldr	r1, [sp, #16]
    dest->y2 = src->y2;
 801a824:	f9bd 0032 	ldrsh.w	r0, [sp, #50]	; 0x32
    mask_indic_max_area.x1 += bg_left;
 801a828:	b29b      	uxth	r3, r3
    mask_indic_max_area.x2 -= bg_right;
 801a82a:	eba9 0901 	sub.w	r9, r9, r1
    mask_indic_max_area.y2 -= bg_bottom;
 801a82e:	9905      	ldr	r1, [sp, #20]
    mask_indic_max_area.y1 += bg_top;
 801a830:	b292      	uxth	r2, r2
    mask_indic_max_area.x1 += bg_left;
 801a832:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
    mask_indic_max_area.y2 -= bg_bottom;
 801a836:	eba0 0001 	sub.w	r0, r0, r1
    mask_indic_max_area.x2 -= bg_right;
 801a83a:	fa1f f989 	uxth.w	r9, r9
    mask_indic_max_area.y1 += bg_top;
 801a83e:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
    mask_indic_max_area.y2 -= bg_bottom;
 801a842:	b280      	uxth	r0, r0
    mask_indic_max_area.x2 -= bg_right;
 801a844:	f8ad 9040 	strh.w	r9, [sp, #64]	; 0x40
    mask_indic_max_area.y2 -= bg_bottom;
 801a848:	f8ad 0042 	strh.w	r0, [sp, #66]	; 0x42
    if(hor && lv_area_get_height(&mask_indic_max_area) < LV_BAR_SIZE_MIN) {
 801a84c:	dc74      	bgt.n	801a938 <draw_indic+0x4a4>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801a84e:	3001      	adds	r0, #1
 801a850:	1a80      	subs	r0, r0, r2
 801a852:	b200      	sxth	r0, r0
 801a854:	2803      	cmp	r0, #3
 801a856:	dc0b      	bgt.n	801a870 <draw_indic+0x3dc>
        mask_indic_max_area.y1 = obj->coords.y1 + (barh / 2) - (LV_BAR_SIZE_MIN / 2);
 801a858:	8ae3      	ldrh	r3, [r4, #22]
 801a85a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801a85e:	eb03 0565 	add.w	r5, r3, r5, asr #1
 801a862:	b2ad      	uxth	r5, r5
 801a864:	1eab      	subs	r3, r5, #2
        mask_indic_max_area.y2 = mask_indic_max_area.y1 + LV_BAR_SIZE_MIN;
 801a866:	3502      	adds	r5, #2
        mask_indic_max_area.y1 = obj->coords.y1 + (barh / 2) - (LV_BAR_SIZE_MIN / 2);
 801a868:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
        mask_indic_max_area.y2 = mask_indic_max_area.y1 + LV_BAR_SIZE_MIN;
 801a86c:	f8ad 5042 	strh.w	r5, [sp, #66]	; 0x42
    lv_draw_mask_radius_init(&mask_indic_param, &bar->indic_area, draw_rect_dsc.radius, false);
 801a870:	2300      	movs	r3, #0
 801a872:	f9bd 207c 	ldrsh.w	r2, [sp, #124]	; 0x7c
 801a876:	4651      	mov	r1, sl
 801a878:	a818      	add	r0, sp, #96	; 0x60
 801a87a:	f7f1 fd67 	bl	800c34c <lv_draw_mask_radius_init>
    int16_t mask_indic_id = lv_draw_mask_add(&mask_indic_param, NULL);
 801a87e:	2100      	movs	r1, #0
 801a880:	a818      	add	r0, sp, #96	; 0x60
 801a882:	f7f1 fbfd 	bl	800c080 <lv_draw_mask_add>
    lv_draw_rect(&mask_indic_max_area, clip_area, &draw_rect_dsc);
 801a886:	aa1f      	add	r2, sp, #124	; 0x7c
    int16_t mask_indic_id = lv_draw_mask_add(&mask_indic_param, NULL);
 801a888:	4605      	mov	r5, r0
    lv_draw_rect(&mask_indic_max_area, clip_area, &draw_rect_dsc);
 801a88a:	4659      	mov	r1, fp
 801a88c:	a80f      	add	r0, sp, #60	; 0x3c
 801a88e:	f7f2 f91d 	bl	800cacc <lv_draw_rect>
    draw_rect_dsc.bg_opa = LV_OPA_TRANSP;
 801a892:	2300      	movs	r3, #0
    lv_draw_rect(&bar->indic_area, clip_area, &draw_rect_dsc);
 801a894:	aa1f      	add	r2, sp, #124	; 0x7c
 801a896:	4659      	mov	r1, fp
 801a898:	4650      	mov	r0, sl
    draw_rect_dsc.bg_opa = LV_OPA_TRANSP;
 801a89a:	f88d 3086 	strb.w	r3, [sp, #134]	; 0x86
    draw_rect_dsc.bg_img_opa = LV_OPA_TRANSP;
 801a89e:	f88d 3092 	strb.w	r3, [sp, #146]	; 0x92
    draw_rect_dsc.shadow_opa = LV_OPA_TRANSP;
 801a8a2:	f88d 30ae 	strb.w	r3, [sp, #174]	; 0xae
    draw_rect_dsc.border_opa = border_opa;
 801a8a6:	f88d 809a 	strb.w	r8, [sp, #154]	; 0x9a
    lv_draw_rect(&bar->indic_area, clip_area, &draw_rect_dsc);
 801a8aa:	f7f2 f90f 	bl	800cacc <lv_draw_rect>
    lv_draw_mask_remove_id(mask_indic_id);
 801a8ae:	4628      	mov	r0, r5
 801a8b0:	f7f1 fc1e 	bl	800c0f0 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_bg_id);
 801a8b4:	4638      	mov	r0, r7
 801a8b6:	f7f1 fc1b 	bl	800c0f0 <lv_draw_mask_remove_id>
 801a8ba:	e067      	b.n	801a98c <draw_indic+0x4f8>
    bool sym = false;
 801a8bc:	2300      	movs	r3, #0
 801a8be:	e63a      	b.n	801a536 <draw_indic+0xa2>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801a8c0:	3301      	adds	r3, #1
 801a8c2:	1bdf      	subs	r7, r3, r7
    else if(!hor && lv_area_get_width(&bar->indic_area) < LV_BAR_SIZE_MIN) {
 801a8c4:	b23f      	sxth	r7, r7
 801a8c6:	2f03      	cmp	r7, #3
 801a8c8:	f73f ae8a 	bgt.w	801a5e0 <draw_indic+0x14c>
        bar->indic_area.x1 = obj->coords.x1 + (barw / 2) - (LV_BAR_SIZE_MIN / 2);
 801a8cc:	8aa2      	ldrh	r2, [r4, #20]
 801a8ce:	eb06 73d6 	add.w	r3, r6, r6, lsr #31
 801a8d2:	eb02 0363 	add.w	r3, r2, r3, asr #1
 801a8d6:	b29b      	uxth	r3, r3
 801a8d8:	1e9a      	subs	r2, r3, #2
        bar->indic_area.x2 = bar->indic_area.x1 + LV_BAR_SIZE_MIN;
 801a8da:	3302      	adds	r3, #2
        bar->indic_area.x1 = obj->coords.x1 + (barw / 2) - (LV_BAR_SIZE_MIN / 2);
 801a8dc:	86a2      	strh	r2, [r4, #52]	; 0x34
        bar->indic_area.x2 = bar->indic_area.x1 + LV_BAR_SIZE_MIN;
 801a8de:	8723      	strh	r3, [r4, #56]	; 0x38
 801a8e0:	e67e      	b.n	801a5e0 <draw_indic+0x14c>
        anim_start_value_x = (int32_t)((int32_t)anim_length * (bar->start_value - bar->min_value)) / range;
 801a8e2:	6b27      	ldr	r7, [r4, #48]	; 0x30
 801a8e4:	9901      	ldr	r1, [sp, #4]
 801a8e6:	1abf      	subs	r7, r7, r2
 801a8e8:	434f      	muls	r7, r1
 801a8ea:	9902      	ldr	r1, [sp, #8]
 801a8ec:	fb97 f7f1 	sdiv	r7, r7, r1
 801a8f0:	e6b6      	b.n	801a660 <draw_indic+0x1cc>
        anim_cur_value_x = (int32_t)((int32_t)anim_length * (bar->cur_value - bar->min_value)) / range;
 801a8f2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801a8f4:	1a89      	subs	r1, r1, r2
 801a8f6:	9a01      	ldr	r2, [sp, #4]
 801a8f8:	fb02 f801 	mul.w	r8, r2, r1
 801a8fc:	9a02      	ldr	r2, [sp, #8]
 801a8fe:	fb98 f8f2 	sdiv	r8, r8, r2
 801a902:	e6cc      	b.n	801a69e <draw_indic+0x20a>
 801a904:	0801a3e5 	.word	0x0801a3e5
 801a908:	0801a3f1 	.word	0x0801a3f1
            zero = *axis2 - shift + 1;
 801a90c:	f1c1 0201 	rsb	r2, r1, #1
 801a910:	443a      	add	r2, r7
 801a912:	b212      	sxth	r2, r2
            if(*axis1 > zero)
 801a914:	4282      	cmp	r2, r0
                *axis2 = *axis1;
 801a916:	bfaa      	itet	ge
 801a918:	f8a9 0000 	strhge.w	r0, [r9]
                *axis2 = zero;
 801a91c:	f8a9 2000 	strhlt.w	r2, [r9]
                *axis1 = zero;
 801a920:	801a      	strhge	r2, [r3, #0]
            if(*axis2 < *axis1) {
 801a922:	f9b9 1000 	ldrsh.w	r1, [r9]
 801a926:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a92a:	4291      	cmp	r1, r2
 801a92c:	f6bf aef8 	bge.w	801a720 <draw_indic+0x28c>
                *axis1 = *axis2;
 801a930:	8019      	strh	r1, [r3, #0]
                *axis2 = zero;
 801a932:	f8a9 2000 	strh.w	r2, [r9]
 801a936:	e6f3      	b.n	801a720 <draw_indic+0x28c>
 801a938:	f109 0901 	add.w	r9, r9, #1
 801a93c:	eba9 0903 	sub.w	r9, r9, r3
    else if(!hor && lv_area_get_width(&mask_indic_max_area) < LV_BAR_SIZE_MIN) {
 801a940:	fa0f f989 	sxth.w	r9, r9
 801a944:	f1b9 0f03 	cmp.w	r9, #3
 801a948:	dc92      	bgt.n	801a870 <draw_indic+0x3dc>
        mask_indic_max_area.x1 = obj->coords.x1 + (barw / 2) - (LV_BAR_SIZE_MIN / 2);
 801a94a:	8aa3      	ldrh	r3, [r4, #20]
 801a94c:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
 801a950:	eb03 0666 	add.w	r6, r3, r6, asr #1
 801a954:	b2b6      	uxth	r6, r6
 801a956:	1eb3      	subs	r3, r6, #2
        mask_indic_max_area.x2 = mask_indic_max_area.x1 + LV_BAR_SIZE_MIN;
 801a958:	3602      	adds	r6, #2
        mask_indic_max_area.x1 = obj->coords.x1 + (barw / 2) - (LV_BAR_SIZE_MIN / 2);
 801a95a:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
        mask_indic_max_area.x2 = mask_indic_max_area.x1 + LV_BAR_SIZE_MIN;
 801a95e:	f8ad 6040 	strh.w	r6, [sp, #64]	; 0x40
 801a962:	e785      	b.n	801a870 <draw_indic+0x3dc>
    if(!sym && indic_length_calc(&bar->indic_area) <= 1) {
 801a964:	4650      	mov	r0, sl
 801a966:	9b08      	ldr	r3, [sp, #32]
 801a968:	4798      	blx	r3
 801a96a:	2801      	cmp	r0, #1
 801a96c:	f73f aed8 	bgt.w	801a720 <draw_indic+0x28c>
        lv_obj_draw_dsc_init(&obj_draw_dsc, clip_area);
 801a970:	4659      	mov	r1, fp
 801a972:	a82c      	add	r0, sp, #176	; 0xb0
 801a974:	f7ea f8d8 	bl	8004b28 <lv_obj_draw_dsc_init>
        obj_draw_dsc.part = LV_PART_INDICATOR;
 801a978:	f44f 3300 	mov.w	r3, #131072	; 0x20000
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &obj_draw_dsc);
 801a97c:	aa2c      	add	r2, sp, #176	; 0xb0
 801a97e:	211a      	movs	r1, #26
 801a980:	4620      	mov	r0, r4
        obj_draw_dsc.part = LV_PART_INDICATOR;
 801a982:	9339      	str	r3, [sp, #228]	; 0xe4
        obj_draw_dsc.draw_area = &bar->indic_area;
 801a984:	f8cd a0b4 	str.w	sl, [sp, #180]	; 0xb4
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &obj_draw_dsc);
 801a988:	f7e7 fa9e 	bl	8001ec8 <lv_event_send>
    lv_event_send(obj, LV_EVENT_DRAW_PART_END, &obj_draw_dsc);
 801a98c:	aa2c      	add	r2, sp, #176	; 0xb0
 801a98e:	211b      	movs	r1, #27
 801a990:	4620      	mov	r0, r4
 801a992:	f7e7 fa99 	bl	8001ec8 <lv_event_send>
}
 801a996:	b03f      	add	sp, #252	; 0xfc
 801a998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        *axis1 = *axis2 - anim_cur_value_x + 1;
 801a99c:	f8b9 8000 	ldrh.w	r8, [r9]
 801a9a0:	f108 0801 	add.w	r8, r8, #1
 801a9a4:	eba8 0801 	sub.w	r8, r8, r1
 801a9a8:	f8a3 8000 	strh.w	r8, [r3]
        *axis2 -= anim_start_value_x;
 801a9ac:	f8b9 7000 	ldrh.w	r7, [r9]
 801a9b0:	1aba      	subs	r2, r7, r2
 801a9b2:	f8a9 2000 	strh.w	r2, [r9]
 801a9b6:	e695      	b.n	801a6e4 <draw_indic+0x250>

0801a9b8 <lv_bar_event>:
{
 801a9b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    res = lv_obj_event_base(MY_CLASS, e);
 801a9bc:	4831      	ldr	r0, [pc, #196]	; (801aa84 <lv_bar_event+0xcc>)
{
 801a9be:	460c      	mov	r4, r1
    res = lv_obj_event_base(MY_CLASS, e);
 801a9c0:	f7e7 fa0a 	bl	8001dd8 <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 801a9c4:	2801      	cmp	r0, #1
 801a9c6:	d148      	bne.n	801aa5a <lv_bar_event+0xa2>
    lv_event_code_t code = lv_event_get_code(e);
 801a9c8:	4620      	mov	r0, r4
 801a9ca:	f7e7 fa9f 	bl	8001f0c <lv_event_get_code>
 801a9ce:	4606      	mov	r6, r0
    lv_obj_t * obj = lv_event_get_target(e);
 801a9d0:	4620      	mov	r0, r4
 801a9d2:	f7e7 fa99 	bl	8001f08 <lv_event_get_target>
    if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 801a9d6:	2e13      	cmp	r6, #19
    lv_obj_t * obj = lv_event_get_target(e);
 801a9d8:	4605      	mov	r5, r0
    if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 801a9da:	d140      	bne.n	801aa5e <lv_bar_event+0xa6>
        indic_size = lv_obj_calculate_ext_draw_size(obj, LV_PART_INDICATOR);
 801a9dc:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 801a9e0:	f7ea f831 	bl	8004a46 <lv_obj_calculate_ext_draw_size>
 801a9e4:	4607      	mov	r7, r0
        lv_coord_t * s = lv_event_get_param(e);
 801a9e6:	4620      	mov	r0, r4
 801a9e8:	f7e7 fa92 	bl	8001f10 <lv_event_get_param>
        *s = LV_MAX(*s, indic_size);
 801a9ec:	f9b0 3000 	ldrsh.w	r3, [r0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801a9f0:	f241 0212 	movw	r2, #4114	; 0x1012
 801a9f4:	2100      	movs	r1, #0
 801a9f6:	42bb      	cmp	r3, r7
        lv_coord_t * s = lv_event_get_param(e);
 801a9f8:	4606      	mov	r6, r0
        *s = LV_MAX(*s, indic_size);
 801a9fa:	bfb8      	it	lt
 801a9fc:	463b      	movlt	r3, r7
 801a9fe:	8003      	strh	r3, [r0, #0]
 801aa00:	4628      	mov	r0, r5
 801aa02:	f7ec fcb1 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801aa06:	f241 0213 	movw	r2, #4115	; 0x1013
    return (lv_coord_t)v.num;
 801aa0a:	fa0f f880 	sxth.w	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801aa0e:	2100      	movs	r1, #0
 801aa10:	4628      	mov	r0, r5
 801aa12:	f7ec fca9 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801aa16:	f241 0210 	movw	r2, #4112	; 0x1010
    return (lv_coord_t)v.num;
 801aa1a:	b204      	sxth	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801aa1c:	2100      	movs	r1, #0
 801aa1e:	4628      	mov	r0, r5
 801aa20:	f7ec fca2 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801aa24:	f241 0211 	movw	r2, #4113	; 0x1011
    return (lv_coord_t)v.num;
 801aa28:	b207      	sxth	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801aa2a:	2100      	movs	r1, #0
 801aa2c:	4628      	mov	r0, r5
 801aa2e:	f7ec fc9b 	bl	8007368 <lv_obj_get_style_prop>
        lv_coord_t pad = LV_MIN4(bg_left, bg_right, bg_top, bg_bottom);
 801aa32:	4544      	cmp	r4, r8
 801aa34:	4623      	mov	r3, r4
    return (lv_coord_t)v.num;
 801aa36:	b202      	sxth	r2, r0
 801aa38:	bfa8      	it	ge
 801aa3a:	4643      	movge	r3, r8
 801aa3c:	42bb      	cmp	r3, r7
 801aa3e:	bfa8      	it	ge
 801aa40:	463b      	movge	r3, r7
 801aa42:	4293      	cmp	r3, r2
 801aa44:	bfa8      	it	ge
 801aa46:	4613      	movge	r3, r2
        if(pad < 0) {
 801aa48:	2b00      	cmp	r3, #0
 801aa4a:	da06      	bge.n	801aa5a <lv_bar_event+0xa2>
            *s = LV_MAX(*s, -pad);
 801aa4c:	425b      	negs	r3, r3
 801aa4e:	f9b6 0000 	ldrsh.w	r0, [r6]
 801aa52:	4283      	cmp	r3, r0
 801aa54:	bfb8      	it	lt
 801aa56:	4603      	movlt	r3, r0
 801aa58:	8033      	strh	r3, [r6, #0]
}
 801aa5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    } else if(code == LV_EVENT_PRESSED || code == LV_EVENT_RELEASED) {
 801aa5e:	2e01      	cmp	r6, #1
 801aa60:	d001      	beq.n	801aa66 <lv_bar_event+0xae>
 801aa62:	2e08      	cmp	r6, #8
 801aa64:	d106      	bne.n	801aa74 <lv_bar_event+0xbc>
        lv_obj_invalidate_area(obj, &bar->indic_area);
 801aa66:	f105 0134 	add.w	r1, r5, #52	; 0x34
 801aa6a:	4628      	mov	r0, r5
}
 801aa6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        lv_obj_invalidate_area(obj, &bar->indic_area);
 801aa70:	f7ea bb38 	b.w	80050e4 <lv_obj_invalidate_area>
    } else if(code == LV_EVENT_DRAW_MAIN) {
 801aa74:	2e15      	cmp	r6, #21
 801aa76:	d1f0      	bne.n	801aa5a <lv_bar_event+0xa2>
        draw_indic(e);
 801aa78:	4620      	mov	r0, r4
}
 801aa7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        draw_indic(e);
 801aa7e:	f7ff bd09 	b.w	801a494 <draw_indic>
 801aa82:	bf00      	nop
 801aa84:	08029404 	.word	0x08029404

0801aa88 <lv_bar_set_value>:
{
 801aa88:	b470      	push	{r4, r5, r6}
    if(bar->cur_value == value) return;
 801aa8a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801aa8c:	428d      	cmp	r5, r1
 801aa8e:	d020      	beq.n	801aad2 <lv_bar_set_value+0x4a>
    value = LV_CLAMP(bar->min_value, value, bar->max_value);
 801aa90:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    value = value < bar->start_value ? bar->start_value : value; /*Can't be smaller then the left value*/
 801aa92:	6b06      	ldr	r6, [r0, #48]	; 0x30
    value = LV_CLAMP(bar->min_value, value, bar->max_value);
 801aa94:	4299      	cmp	r1, r3
 801aa96:	bfa8      	it	ge
 801aa98:	4619      	movge	r1, r3
    value = value < bar->start_value ? bar->start_value : value; /*Can't be smaller then the left value*/
 801aa9a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801aa9c:	42b3      	cmp	r3, r6
 801aa9e:	bfb8      	it	lt
 801aaa0:	4633      	movlt	r3, r6
 801aaa2:	4299      	cmp	r1, r3
 801aaa4:	bfb8      	it	lt
 801aaa6:	4619      	movlt	r1, r3
    if(bar->cur_value == value) return;
 801aaa8:	428d      	cmp	r5, r1
 801aaaa:	d012      	beq.n	801aad2 <lv_bar_set_value+0x4a>
    if(en == LV_ANIM_OFF) {
 801aaac:	b91a      	cbnz	r2, 801aab6 <lv_bar_set_value+0x2e>
        *value_ptr = new_value;
 801aaae:	6241      	str	r1, [r0, #36]	; 0x24
}
 801aab0:	bc70      	pop	{r4, r5, r6}
        lv_obj_invalidate((lv_obj_t*)obj);
 801aab2:	f7ea bb31 	b.w	8005118 <lv_obj_invalidate>
        if(anim_info->anim_state == LV_BAR_ANIM_STATE_INV) {
 801aab6:	6c83      	ldr	r3, [r0, #72]	; 0x48
 801aab8:	f100 0224 	add.w	r2, r0, #36	; 0x24
 801aabc:	3301      	adds	r3, #1
            anim_info->anim_start = anim_info->anim_end;
 801aabe:	bf16      	itet	ne
 801aac0:	6c43      	ldrne	r3, [r0, #68]	; 0x44
            anim_info->anim_start = *value_ptr;
 801aac2:	6405      	streq	r5, [r0, #64]	; 0x40
            anim_info->anim_start = anim_info->anim_end;
 801aac4:	6403      	strne	r3, [r0, #64]	; 0x40
            anim_info->anim_end   = new_value;
 801aac6:	f100 033c 	add.w	r3, r0, #60	; 0x3c
 801aaca:	6441      	str	r1, [r0, #68]	; 0x44
}
 801aacc:	bc70      	pop	{r4, r5, r6}
 801aace:	f7ff bcbb 	b.w	801a448 <lv_bar_set_value_with_anim.part.0>
 801aad2:	bc70      	pop	{r4, r5, r6}
 801aad4:	4770      	bx	lr

0801aad6 <lv_bar_constructor>:
{
 801aad6:	b538      	push	{r3, r4, r5, lr}
    bar->max_value = 100;
 801aad8:	2500      	movs	r5, #0
 801aada:	2364      	movs	r3, #100	; 0x64
{
 801aadc:	460c      	mov	r4, r1
    bar->start_value = 0;
 801aade:	630d      	str	r5, [r1, #48]	; 0x30
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_CHECKABLE);
 801aae0:	4620      	mov	r0, r4
    bar->cur_value = 0;
 801aae2:	624d      	str	r5, [r1, #36]	; 0x24

static void lv_bar_init_anim(lv_obj_t * obj, _lv_bar_anim_t * bar_anim)
{
    bar_anim->bar = obj;
    bar_anim->anim_start = 0;
    bar_anim->anim_end = 0;
 801aae4:	644d      	str	r5, [r1, #68]	; 0x44
    bar->max_value = 100;
 801aae6:	e9c1 530a 	strd	r5, r3, [r1, #40]	; 0x28
    bar->mode         = LV_BAR_MODE_NORMAL;
 801aaea:	f891 305c 	ldrb.w	r3, [r1, #92]	; 0x5c
 801aaee:	f365 0301 	bfi	r3, r5, #0, #2
 801aaf2:	f881 305c 	strb.w	r3, [r1, #92]	; 0x5c
    bar_anim->anim_state = LV_BAR_ANIM_STATE_INV;
 801aaf6:	f04f 33ff 	mov.w	r3, #4294967295
    bar_anim->anim_start = 0;
 801aafa:	e9c1 150f 	strd	r1, r5, [r1, #60]	; 0x3c
    bar_anim->bar = obj;
 801aafe:	e9c1 3112 	strd	r3, r1, [r1, #72]	; 0x48
    bar_anim->anim_state = LV_BAR_ANIM_STATE_INV;
 801ab02:	658b      	str	r3, [r1, #88]	; 0x58
    bar_anim->anim_end = 0;
 801ab04:	e9c1 5514 	strd	r5, r5, [r1, #80]	; 0x50
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_CHECKABLE);
 801ab08:	2108      	movs	r1, #8
 801ab0a:	f7e9 f920 	bl	8003d4e <lv_obj_clear_flag>
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLLABLE);
 801ab0e:	4620      	mov	r0, r4
 801ab10:	2110      	movs	r1, #16
 801ab12:	f7e9 f91c 	bl	8003d4e <lv_obj_clear_flag>
    lv_bar_set_value(obj, 0, LV_ANIM_OFF);
 801ab16:	462a      	mov	r2, r5
 801ab18:	4629      	mov	r1, r5
 801ab1a:	4620      	mov	r0, r4
}
 801ab1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_bar_set_value(obj, 0, LV_ANIM_OFF);
 801ab20:	f7ff bfb2 	b.w	801aa88 <lv_bar_set_value>

0801ab24 <lv_bar_set_start_value>:
    value = LV_CLAMP(bar->min_value, value, bar->max_value);
 801ab24:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 801ab26:	4299      	cmp	r1, r3
 801ab28:	bfa8      	it	ge
 801ab2a:	4619      	movge	r1, r3
 801ab2c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801ab2e:	4299      	cmp	r1, r3
 801ab30:	bfb8      	it	lt
 801ab32:	4619      	movlt	r1, r3
    value = value > bar->cur_value ? bar->cur_value : value; /*Can't be greater then the right value*/
 801ab34:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801ab36:	4299      	cmp	r1, r3
 801ab38:	bfa8      	it	ge
 801ab3a:	4619      	movge	r1, r3
    if(bar->start_value == value) return;
 801ab3c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801ab3e:	428b      	cmp	r3, r1
{
 801ab40:	b410      	push	{r4}
    if(bar->start_value == value) return;
 801ab42:	d013      	beq.n	801ab6c <lv_bar_set_start_value+0x48>
    if(en == LV_ANIM_OFF) {
 801ab44:	b922      	cbnz	r2, 801ab50 <lv_bar_set_start_value+0x2c>
}
 801ab46:	f85d 4b04 	ldr.w	r4, [sp], #4
        *value_ptr = new_value;
 801ab4a:	6301      	str	r1, [r0, #48]	; 0x30
        lv_obj_invalidate((lv_obj_t*)obj);
 801ab4c:	f7ea bae4 	b.w	8005118 <lv_obj_invalidate>
        if(anim_info->anim_state == LV_BAR_ANIM_STATE_INV) {
 801ab50:	6d82      	ldr	r2, [r0, #88]	; 0x58
}
 801ab52:	f85d 4b04 	ldr.w	r4, [sp], #4
        if(anim_info->anim_state == LV_BAR_ANIM_STATE_INV) {
 801ab56:	3201      	adds	r2, #1
            anim_info->anim_start = anim_info->anim_end;
 801ab58:	f100 0230 	add.w	r2, r0, #48	; 0x30
 801ab5c:	bf18      	it	ne
 801ab5e:	6d43      	ldrne	r3, [r0, #84]	; 0x54
            anim_info->anim_end   = new_value;
 801ab60:	e9c0 3114 	strd	r3, r1, [r0, #80]	; 0x50
 801ab64:	f100 034c 	add.w	r3, r0, #76	; 0x4c
 801ab68:	f7ff bc6e 	b.w	801a448 <lv_bar_set_value_with_anim.part.0>
}
 801ab6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ab70:	4770      	bx	lr

0801ab72 <lv_bar_get_value>:
    return LV_BAR_GET_ANIM_VALUE(bar->cur_value, bar->cur_value_anim);
 801ab72:	6c83      	ldr	r3, [r0, #72]	; 0x48
 801ab74:	3301      	adds	r3, #1
 801ab76:	bf14      	ite	ne
 801ab78:	6c40      	ldrne	r0, [r0, #68]	; 0x44
 801ab7a:	6a40      	ldreq	r0, [r0, #36]	; 0x24
}
 801ab7c:	4770      	bx	lr

0801ab7e <lv_bar_get_start_value>:
    if(bar->mode != LV_BAR_MODE_RANGE) return bar->min_value;
 801ab7e:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 801ab82:	f003 0303 	and.w	r3, r3, #3
 801ab86:	2b02      	cmp	r3, #2
 801ab88:	d001      	beq.n	801ab8e <lv_bar_get_start_value+0x10>
 801ab8a:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801ab8c:	4770      	bx	lr
    return LV_BAR_GET_ANIM_VALUE(bar->start_value, bar->start_value_anim);
 801ab8e:	6d83      	ldr	r3, [r0, #88]	; 0x58
 801ab90:	3301      	adds	r3, #1
 801ab92:	bf14      	ite	ne
 801ab94:	6d40      	ldrne	r0, [r0, #84]	; 0x54
 801ab96:	6b00      	ldreq	r0, [r0, #48]	; 0x30
}
 801ab98:	4770      	bx	lr

0801ab9a <lv_bar_get_mode>:
    return bar->mode;
 801ab9a:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
}
 801ab9e:	f000 0003 	and.w	r0, r0, #3
 801aba2:	4770      	bx	lr

0801aba4 <lv_btn_constructor>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void lv_btn_constructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 801aba4:	b507      	push	{r0, r1, r2, lr}
 801aba6:	4608      	mov	r0, r1
    LV_UNUSED(class_p);
    LV_TRACE_OBJ_CREATE("begin");

    lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLLABLE);
 801aba8:	2110      	movs	r1, #16
 801abaa:	9001      	str	r0, [sp, #4]
 801abac:	f7e9 f8cf 	bl	8003d4e <lv_obj_clear_flag>
    lv_obj_add_flag(obj, LV_OBJ_FLAG_SCROLL_ON_FOCUS);
 801abb0:	f44f 7100 	mov.w	r1, #512	; 0x200
 801abb4:	9801      	ldr	r0, [sp, #4]

    LV_TRACE_OBJ_CREATE("finished");
}
 801abb6:	b003      	add	sp, #12
 801abb8:	f85d eb04 	ldr.w	lr, [sp], #4
    lv_obj_add_flag(obj, LV_OBJ_FLAG_SCROLL_ON_FOCUS);
 801abbc:	f7e9 b8a4 	b.w	8003d08 <lv_obj_add_flag>

0801abc0 <lv_btn_create>:
{
 801abc0:	4601      	mov	r1, r0
    lv_obj_t * obj = lv_obj_class_create_obj(MY_CLASS, parent);
 801abc2:	4804      	ldr	r0, [pc, #16]	; (801abd4 <lv_btn_create+0x14>)
{
 801abc4:	b510      	push	{r4, lr}
    lv_obj_t * obj = lv_obj_class_create_obj(MY_CLASS, parent);
 801abc6:	f7e9 fbfd 	bl	80043c4 <lv_obj_class_create_obj>
 801abca:	4604      	mov	r4, r0
    lv_obj_class_init_obj(obj);
 801abcc:	f7e9 fc87 	bl	80044de <lv_obj_class_init_obj>
}
 801abd0:	4620      	mov	r0, r4
 801abd2:	bd10      	pop	{r4, pc}
 801abd4:	08029420 	.word	0x08029420

0801abd8 <lv_btnmatrix_destructor>:

    LV_TRACE_OBJ_CREATE("finshed");
}

static void lv_btnmatrix_destructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 801abd8:	b510      	push	{r4, lr}
 801abda:	460c      	mov	r4, r1
    LV_TRACE_OBJ_CREATE("begin");
    LV_UNUSED(class_p);
    lv_btnmatrix_t * btnm = (lv_btnmatrix_t *)obj;
    lv_mem_free(btnm->button_areas);
 801abdc:	6a88      	ldr	r0, [r1, #40]	; 0x28
 801abde:	f7fc fda9 	bl	8017734 <lv_mem_free>
    lv_mem_free(btnm->ctrl_bits);
 801abe2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801abe4:	f7fc fda6 	bl	8017734 <lv_mem_free>
    btnm->button_areas = NULL;
 801abe8:	2300      	movs	r3, #0
    btnm->ctrl_bits = NULL;
 801abea:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
    LV_TRACE_OBJ_CREATE("finshed");
}
 801abee:	bd10      	pop	{r4, pc}

0801abf0 <lv_obj_get_style_pad_column.constprop.0>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 801abf0:	f241 0215 	movw	r2, #4117	; 0x1015
 801abf4:	2100      	movs	r1, #0
static inline lv_coord_t lv_obj_get_style_pad_column(const struct _lv_obj_t * obj, uint32_t part)
 801abf6:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 801abf8:	f7ec fbb6 	bl	8007368 <lv_obj_get_style_prop>
}
 801abfc:	b200      	sxth	r0, r0
 801abfe:	bd08      	pop	{r3, pc}

0801ac00 <draw_main>:
    }

}

static void draw_main(lv_event_t * e)
{
 801ac00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac04:	b0cf      	sub	sp, #316	; 0x13c
 801ac06:	4605      	mov	r5, r0
    lv_obj_t * obj = lv_event_get_target(e);
 801ac08:	f7e7 f97e 	bl	8001f08 <lv_event_get_target>
    lv_btnmatrix_t * btnm = (lv_btnmatrix_t *)obj;
    if(btnm->btn_cnt == 0) return;
 801ac0c:	8e03      	ldrh	r3, [r0, #48]	; 0x30
    lv_obj_t * obj = lv_event_get_target(e);
 801ac0e:	4604      	mov	r4, r0
    if(btnm->btn_cnt == 0) return;
 801ac10:	2b00      	cmp	r3, #0
 801ac12:	f000 81a7 	beq.w	801af64 <draw_main+0x364>

    const lv_area_t * clip_area = lv_event_get_param(e);
 801ac16:	4628      	mov	r0, r5
    lv_obj_draw_dsc_init(&dsc, clip_area);
    dsc.part = LV_PART_ITEMS;
    dsc.rect_dsc = &draw_rect_dsc_act;
    dsc.label_dsc = &draw_label_dsc_act;

    for(btn_i = 0; btn_i < btnm->btn_cnt; btn_i++, txt_i++) {
 801ac18:	f04f 0800 	mov.w	r8, #0
    const lv_area_t * clip_area = lv_event_get_param(e);
 801ac1c:	f7e7 f978 	bl	8001f10 <lv_event_get_param>
    obj->skip_trans = 1;
 801ac20:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    lv_obj_get_coords(obj, &area_obj);
 801ac24:	a90e      	add	r1, sp, #56	; 0x38
    const lv_area_t * clip_area = lv_event_get_param(e);
 801ac26:	4607      	mov	r7, r0
    obj->skip_trans = 1;
 801ac28:	f043 0304 	orr.w	r3, r3, #4
    lv_obj_get_coords(obj, &area_obj);
 801ac2c:	4620      	mov	r0, r4
    uint16_t txt_i = 0;
 801ac2e:	4645      	mov	r5, r8
        /*Search the next valid text in the map*/
        while(strcmp(btnm->map_p[txt_i], "\n") == 0) {
 801ac30:	f8df a33c 	ldr.w	sl, [pc, #828]	; 801af70 <draw_main+0x370>
    obj->skip_trans = 1;
 801ac34:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    lv_obj_get_coords(obj, &area_obj);
 801ac38:	f7ea f8c9 	bl	8004dce <lv_obj_get_coords>
    obj->state = LV_STATE_DEFAULT;
 801ac3c:	6a22      	ldr	r2, [r4, #32]
 801ac3e:	4bcb      	ldr	r3, [pc, #812]	; (801af6c <draw_main+0x36c>)
    lv_draw_rect_dsc_init(&draw_rect_dsc_def);
 801ac40:	a82f      	add	r0, sp, #188	; 0xbc
    lv_state_t state_ori = obj->state;
 801ac42:	8c26      	ldrh	r6, [r4, #32]
    obj->state = LV_STATE_DEFAULT;
 801ac44:	4013      	ands	r3, r2
 801ac46:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801ac4a:	6223      	str	r3, [r4, #32]
    lv_draw_rect_dsc_init(&draw_rect_dsc_def);
 801ac4c:	f7f1 ff1c 	bl	800ca88 <lv_draw_rect_dsc_init>
    lv_draw_label_dsc_init(&draw_label_dsc_def);
 801ac50:	a81a      	add	r0, sp, #104	; 0x68
 801ac52:	f7ef fc65 	bl	800a520 <lv_draw_label_dsc_init>
    lv_obj_init_draw_rect_dsc(obj, LV_PART_ITEMS, &draw_rect_dsc_def);
 801ac56:	aa2f      	add	r2, sp, #188	; 0xbc
 801ac58:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 801ac5c:	4620      	mov	r0, r4
 801ac5e:	f7e9 fc7f 	bl	8004560 <lv_obj_init_draw_rect_dsc>
    lv_obj_init_draw_label_dsc(obj, LV_PART_ITEMS, &draw_label_dsc_def);
 801ac62:	aa1a      	add	r2, sp, #104	; 0x68
 801ac64:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 801ac68:	4620      	mov	r0, r4
 801ac6a:	f7e9 fdb5 	bl	80047d8 <lv_obj_init_draw_label_dsc>
    obj->skip_trans = 0;
 801ac6e:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801ac72:	f241 0210 	movw	r2, #4112	; 0x1010
 801ac76:	2100      	movs	r1, #0
 801ac78:	f36f 0382 	bfc	r3, #2, #1
 801ac7c:	4620      	mov	r0, r4
    obj->state = state_ori;
 801ac7e:	8426      	strh	r6, [r4, #32]
    obj->skip_trans = 0;
 801ac80:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 801ac84:	f7ec fb70 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801ac88:	f241 0211 	movw	r2, #4113	; 0x1011
    return (lv_coord_t)v.num;
 801ac8c:	b203      	sxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801ac8e:	2100      	movs	r1, #0
 801ac90:	4620      	mov	r0, r4
    return (lv_coord_t)v.num;
 801ac92:	9309      	str	r3, [sp, #36]	; 0x24
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801ac94:	f7ec fb68 	bl	8007368 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801ac98:	b203      	sxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801ac9a:	f241 0212 	movw	r2, #4114	; 0x1012
 801ac9e:	2100      	movs	r1, #0
 801aca0:	4620      	mov	r0, r4
    return (lv_coord_t)v.num;
 801aca2:	9308      	str	r3, [sp, #32]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801aca4:	f7ec fb60 	bl	8007368 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801aca8:	b203      	sxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801acaa:	f241 0213 	movw	r2, #4115	; 0x1013
 801acae:	2100      	movs	r1, #0
 801acb0:	4620      	mov	r0, r4
    return (lv_coord_t)v.num;
 801acb2:	9307      	str	r3, [sp, #28]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801acb4:	f7ec fb58 	bl	8007368 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801acb8:	b203      	sxth	r3, r0
    lv_obj_draw_dsc_init(&dsc, clip_area);
 801acba:	4639      	mov	r1, r7
 801acbc:	a83c      	add	r0, sp, #240	; 0xf0
 801acbe:	9306      	str	r3, [sp, #24]
 801acc0:	f7e9 ff32 	bl	8004b28 <lv_obj_draw_dsc_init>
    dsc.part = LV_PART_ITEMS;
 801acc4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 801acc8:	9349      	str	r3, [sp, #292]	; 0x124
    dsc.rect_dsc = &draw_rect_dsc_act;
 801acca:	ab22      	add	r3, sp, #136	; 0x88
 801accc:	933e      	str	r3, [sp, #248]	; 0xf8
    dsc.label_dsc = &draw_label_dsc_act;
 801acce:	ab12      	add	r3, sp, #72	; 0x48
 801acd0:	933f      	str	r3, [sp, #252]	; 0xfc
        /*Get the state of the button*/
        lv_state_t btn_state = LV_STATE_DEFAULT;
        if(button_get_checked(btnm->ctrl_bits[btn_i])) btn_state |= LV_STATE_CHECKED;
        if(button_is_inactive(btnm->ctrl_bits[btn_i])) btn_state |= LV_STATE_DISABLED;
        if(btn_i == btnm->btn_id_sel) {
            if(state_ori & LV_STATE_PRESSED) btn_state |= LV_STATE_PRESSED;
 801acd2:	f006 0320 	and.w	r3, r6, #32
 801acd6:	930a      	str	r3, [sp, #40]	; 0x28
 801acd8:	fa1f f988 	uxth.w	r9, r8
    for(btn_i = 0; btn_i < btnm->btn_cnt; btn_i++, txt_i++) {
 801acdc:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801acde:	454b      	cmp	r3, r9
 801ace0:	f240 813a 	bls.w	801af58 <draw_main+0x358>
        while(strcmp(btnm->map_p[txt_i], "\n") == 0) {
 801ace4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801ace6:	00aa      	lsls	r2, r5, #2
 801ace8:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801acec:	3501      	adds	r5, #1
 801acee:	4651      	mov	r1, sl
 801acf0:	930b      	str	r3, [sp, #44]	; 0x2c
 801acf2:	9205      	str	r2, [sp, #20]
 801acf4:	b2ad      	uxth	r5, r5
 801acf6:	f7e5 fadb 	bl	80002b0 <strcmp>
 801acfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801acfc:	2800      	cmp	r0, #0
 801acfe:	d0f2      	beq.n	801ace6 <draw_main+0xe6>
        if(button_is_hidden(btnm->ctrl_bits[btn_i])) continue;
 801ad00:	fa1f fb88 	uxth.w	fp, r8
 801ad04:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    return w != 0 ? w : 1;
}

static bool button_is_hidden(lv_btnmatrix_ctrl_t ctrl_bits)
{
    return (ctrl_bits & LV_BTNMATRIX_CTRL_HIDDEN) ? true : false;
 801ad06:	f832 101b 	ldrh.w	r1, [r2, fp, lsl #1]
        if(button_is_hidden(btnm->ctrl_bits[btn_i])) continue;
 801ad0a:	070b      	lsls	r3, r1, #28
 801ad0c:	f100 8100 	bmi.w	801af10 <draw_main+0x310>
        if(button_is_inactive(btnm->ctrl_bits[btn_i])) btn_state |= LV_STATE_DISABLED;
 801ad10:	0688      	lsls	r0, r1, #26
        lv_state_t btn_state = LV_STATE_DEFAULT;
 801ad12:	f3c1 12c0 	ubfx	r2, r1, #7, #1
        if(btn_i == btnm->btn_id_sel) {
 801ad16:	8e61      	ldrh	r1, [r4, #50]	; 0x32
        if(button_is_inactive(btnm->ctrl_bits[btn_i])) btn_state |= LV_STATE_DISABLED;
 801ad18:	bf48      	it	mi
 801ad1a:	f042 0280 	orrmi.w	r2, r2, #128	; 0x80
        if(btn_i == btnm->btn_id_sel) {
 801ad1e:	4549      	cmp	r1, r9
 801ad20:	d10f      	bne.n	801ad42 <draw_main+0x142>
            if(state_ori & LV_STATE_PRESSED) btn_state |= LV_STATE_PRESSED;
 801ad22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ad24:	b10b      	cbz	r3, 801ad2a <draw_main+0x12a>
 801ad26:	f042 0220 	orr.w	r2, r2, #32
            if(state_ori & LV_STATE_FOCUSED) btn_state |= LV_STATE_FOCUSED;
 801ad2a:	07b1      	lsls	r1, r6, #30
 801ad2c:	bf48      	it	mi
 801ad2e:	f042 0202 	orrmi.w	r2, r2, #2
            if(state_ori & LV_STATE_FOCUS_KEY) btn_state |= LV_STATE_FOCUS_KEY;
 801ad32:	0773      	lsls	r3, r6, #29
 801ad34:	bf48      	it	mi
 801ad36:	f042 0204 	orrmi.w	r2, r2, #4
            if(state_ori & LV_STATE_EDITED) btn_state |= LV_STATE_EDITED;
 801ad3a:	0730      	lsls	r0, r6, #28
 801ad3c:	bf48      	it	mi
 801ad3e:	f042 0208 	orrmi.w	r2, r2, #8
        lv_area_copy(&btn_area, &btnm->button_areas[btn_i]);
 801ad42:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801ad44:	eb01 00cb 	add.w	r0, r1, fp, lsl #3
        btn_area.x1 += area_obj.x1;
 801ad48:	f831 103b 	ldrh.w	r1, [r1, fp, lsl #3]
    dest->y1 = src->y1;
 801ad4c:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
    dest->x2 = src->x2;
 801ad50:	f9b0 9004 	ldrsh.w	r9, [r0, #4]
    dest->y2 = src->y2;
 801ad54:	f9b0 e006 	ldrsh.w	lr, [r0, #6]
 801ad58:	f8bd 0038 	ldrh.w	r0, [sp, #56]	; 0x38
 801ad5c:	4401      	add	r1, r0
        btn_area.x2 += area_obj.x1;
 801ad5e:	4448      	add	r0, r9
        btn_area.x1 += area_obj.x1;
 801ad60:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
        btn_area.y1 += area_obj.y1;
 801ad64:	f8bd 103a 	ldrh.w	r1, [sp, #58]	; 0x3a
        btn_area.x2 += area_obj.x1;
 801ad68:	f8ad 0044 	strh.w	r0, [sp, #68]	; 0x44
        btn_area.y1 += area_obj.y1;
 801ad6c:	448c      	add	ip, r1
        btn_area.y2 += area_obj.y1;
 801ad6e:	4471      	add	r1, lr
        btn_area.y1 += area_obj.y1;
 801ad70:	f8ad c042 	strh.w	ip, [sp, #66]	; 0x42
        btn_area.y2 += area_obj.y1;
 801ad74:	f8ad 1046 	strh.w	r1, [sp, #70]	; 0x46
        if(btn_state == LV_STATE_DEFAULT) {
 801ad78:	2a00      	cmp	r2, #0
 801ad7a:	f040 80cc 	bne.w	801af16 <draw_main+0x316>
            lv_memcpy(&draw_rect_dsc_act, &draw_rect_dsc_def, sizeof(lv_draw_rect_dsc_t));
 801ad7e:	2234      	movs	r2, #52	; 0x34
 801ad80:	a92f      	add	r1, sp, #188	; 0xbc
 801ad82:	a822      	add	r0, sp, #136	; 0x88
 801ad84:	f7fc fd10 	bl	80177a8 <lv_memcpy>
            lv_memcpy(&draw_label_dsc_act, &draw_label_dsc_def, sizeof(lv_draw_label_dsc_t));
 801ad88:	2220      	movs	r2, #32
 801ad8a:	a91a      	add	r1, sp, #104	; 0x68
 801ad8c:	a812      	add	r0, sp, #72	; 0x48
 801ad8e:	f7fc fd0b 	bl	80177a8 <lv_memcpy>
        bool recolor = button_is_recolor(btnm->ctrl_bits[btn_i]);
 801ad92:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
        dsc.draw_area = &btn_area;
 801ad94:	f10d 0940 	add.w	r9, sp, #64	; 0x40
 801ad98:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
        lv_event_send(obj,LV_EVENT_DRAW_PART_BEGIN, &dsc);
 801ad9c:	4620      	mov	r0, r4
    return (ctrl_bits & LV_BTNMATRIX_CTRL_CHECKED) ? true : false;
}

static bool button_is_recolor(lv_btnmatrix_ctrl_t ctrl_bits)
{
    return (ctrl_bits & LV_BTNMATRIX_CTRL_RECOLOR) ? true : false;
 801ad9e:	f831 101b 	ldrh.w	r1, [r1, fp, lsl #1]
        dsc.draw_area = &btn_area;
 801ada2:	f8cd 90f4 	str.w	r9, [sp, #244]	; 0xf4
        if(recolor) draw_label_dsc_act.flag |= LV_TEXT_FLAG_RECOLOR;
 801ada6:	04c9      	lsls	r1, r1, #19
        lv_event_send(obj,LV_EVENT_DRAW_PART_BEGIN, &dsc);
 801ada8:	f04f 011a 	mov.w	r1, #26
        dsc.id = btn_i;
 801adac:	f8cd b128 	str.w	fp, [sp, #296]	; 0x128
        if(recolor) draw_label_dsc_act.flag |= LV_TEXT_FLAG_RECOLOR;
 801adb0:	bf4c      	ite	mi
 801adb2:	f042 0201 	orrmi.w	r2, r2, #1
        else draw_label_dsc_act.flag &= ~LV_TEXT_FLAG_RECOLOR;
 801adb6:	f002 02fe 	andpl.w	r2, r2, #254	; 0xfe
 801adba:	f88d 2064 	strb.w	r2, [sp, #100]	; 0x64
        lv_event_send(obj,LV_EVENT_DRAW_PART_BEGIN, &dsc);
 801adbe:	aa3c      	add	r2, sp, #240	; 0xf0
 801adc0:	f7e7 f882 	bl	8001ec8 <lv_event_send>
        if(draw_rect_dsc_act.border_side & LV_BORDER_SIDE_INTERNAL) {
 801adc4:	f89d 30a7 	ldrb.w	r3, [sp, #167]	; 0xa7
 801adc8:	f3c3 0244 	ubfx	r2, r3, #1, #5
 801adcc:	06d2      	lsls	r2, r2, #27
 801adce:	d54a      	bpl.n	801ae66 <draw_main+0x266>
            draw_rect_dsc_act.border_side = LV_BORDER_SIDE_FULL;
 801add0:	220f      	movs	r2, #15
            if(btn_area.x1 == obj->coords.x1 + pleft) draw_rect_dsc_act.border_side &= ~LV_BORDER_SIDE_LEFT;
 801add2:	9907      	ldr	r1, [sp, #28]
            draw_rect_dsc_act.border_side = LV_BORDER_SIDE_FULL;
 801add4:	f362 0345 	bfi	r3, r2, #1, #5
            if(btn_area.x1 == obj->coords.x1 + pleft) draw_rect_dsc_act.border_side &= ~LV_BORDER_SIDE_LEFT;
 801add8:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
            draw_rect_dsc_act.border_side = LV_BORDER_SIDE_FULL;
 801addc:	f88d 30a7 	strb.w	r3, [sp, #167]	; 0xa7
            if(btn_area.x1 == obj->coords.x1 + pleft) draw_rect_dsc_act.border_side &= ~LV_BORDER_SIDE_LEFT;
 801ade0:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 801ade4:	440b      	add	r3, r1
            if(btn_area.x2 == obj->coords.x2 - pright) draw_rect_dsc_act.border_side &= ~LV_BORDER_SIDE_RIGHT;
 801ade6:	9906      	ldr	r1, [sp, #24]
            if(btn_area.x1 == obj->coords.x1 + pleft) draw_rect_dsc_act.border_side &= ~LV_BORDER_SIDE_LEFT;
 801ade8:	429a      	cmp	r2, r3
 801adea:	bf02      	ittt	eq
 801adec:	f89d 30a7 	ldrbeq.w	r3, [sp, #167]	; 0xa7
 801adf0:	220b      	moveq	r2, #11
 801adf2:	f362 0345 	bfieq	r3, r2, #1, #5
            if(btn_area.x2 == obj->coords.x2 - pright) draw_rect_dsc_act.border_side &= ~LV_BORDER_SIDE_RIGHT;
 801adf6:	f9bd 2044 	ldrsh.w	r2, [sp, #68]	; 0x44
            if(btn_area.x1 == obj->coords.x1 + pleft) draw_rect_dsc_act.border_side &= ~LV_BORDER_SIDE_LEFT;
 801adfa:	bf08      	it	eq
 801adfc:	f88d 30a7 	strbeq.w	r3, [sp, #167]	; 0xa7
            if(btn_area.x2 == obj->coords.x2 - pright) draw_rect_dsc_act.border_side &= ~LV_BORDER_SIDE_RIGHT;
 801ae00:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
 801ae04:	1a5b      	subs	r3, r3, r1
 801ae06:	429a      	cmp	r2, r3
 801ae08:	d109      	bne.n	801ae1e <draw_main+0x21e>
 801ae0a:	f89d 30a7 	ldrb.w	r3, [sp, #167]	; 0xa7
 801ae0e:	f3c3 0244 	ubfx	r2, r3, #1, #5
 801ae12:	f002 0217 	and.w	r2, r2, #23
 801ae16:	f362 0345 	bfi	r3, r2, #1, #5
 801ae1a:	f88d 30a7 	strb.w	r3, [sp, #167]	; 0xa7
            if(btn_area.y1 == obj->coords.y1 + ptop) draw_rect_dsc_act.border_side &= ~LV_BORDER_SIDE_TOP;
 801ae1e:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 801ae22:	9909      	ldr	r1, [sp, #36]	; 0x24
 801ae24:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 801ae28:	440b      	add	r3, r1
 801ae2a:	429a      	cmp	r2, r3
 801ae2c:	d109      	bne.n	801ae42 <draw_main+0x242>
 801ae2e:	f89d 30a7 	ldrb.w	r3, [sp, #167]	; 0xa7
 801ae32:	f3c3 0244 	ubfx	r2, r3, #1, #5
 801ae36:	f002 021d 	and.w	r2, r2, #29
 801ae3a:	f362 0345 	bfi	r3, r2, #1, #5
 801ae3e:	f88d 30a7 	strb.w	r3, [sp, #167]	; 0xa7
            if(btn_area.y2 == obj->coords.y2 - pbottom) draw_rect_dsc_act.border_side &= ~LV_BORDER_SIDE_BOTTOM;
 801ae42:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 801ae46:	9908      	ldr	r1, [sp, #32]
 801ae48:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 801ae4c:	1a5b      	subs	r3, r3, r1
 801ae4e:	429a      	cmp	r2, r3
 801ae50:	d109      	bne.n	801ae66 <draw_main+0x266>
 801ae52:	f89d 30a7 	ldrb.w	r3, [sp, #167]	; 0xa7
 801ae56:	f3c3 0244 	ubfx	r2, r3, #1, #5
 801ae5a:	f002 021e 	and.w	r2, r2, #30
 801ae5e:	f362 0345 	bfi	r3, r2, #1, #5
 801ae62:	f88d 30a7 	strb.w	r3, [sp, #167]	; 0xa7
        lv_draw_rect(&btn_area, clip_area, &draw_rect_dsc_act);
 801ae66:	aa22      	add	r2, sp, #136	; 0x88
 801ae68:	4639      	mov	r1, r7
 801ae6a:	4648      	mov	r0, r9
 801ae6c:	f7f1 fe2e 	bl	800cacc <lv_draw_rect>
        const char * txt = btnm->map_p[txt_i];
 801ae70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801ae72:	9a05      	ldr	r2, [sp, #20]
        lv_txt_get_size(&txt_size, txt, font, letter_space,
 801ae74:	a80d      	add	r0, sp, #52	; 0x34
        const char * txt = btnm->map_p[txt_i];
 801ae76:	5899      	ldr	r1, [r3, r2]
        lv_txt_get_size(&txt_size, txt, font, letter_space,
 801ae78:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801ae7c:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 801ae80:	9302      	str	r3, [sp, #8]
 801ae82:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 801ae86:	9105      	str	r1, [sp, #20]
 801ae88:	3301      	adds	r3, #1
 801ae8a:	1a9b      	subs	r3, r3, r2
 801ae8c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ae8e:	b21b      	sxth	r3, r3
 801ae90:	9301      	str	r3, [sp, #4]
 801ae92:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
 801ae96:	9300      	str	r3, [sp, #0]
 801ae98:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	; 0x5c
 801ae9c:	f7fe fb5b 	bl	8019556 <lv_txt_get_size>
 801aea0:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801aea4:	f8bd 0040 	ldrh.w	r0, [sp, #64]	; 0x40
 801aea8:	3301      	adds	r3, #1
        btn_area.x1 += (lv_area_get_width(&btn_area) - txt_size.x) / 2;
 801aeaa:	f9bd e034 	ldrsh.w	lr, [sp, #52]	; 0x34
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801aeae:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801aeb2:	1a1b      	subs	r3, r3, r0
        btn_area.y1 += (lv_area_get_height(&btn_area) - txt_size.y) / 2;
 801aeb4:	f9bd c036 	ldrsh.w	ip, [sp, #54]	; 0x36
        lv_draw_label(&btn_area, clip_area, &draw_label_dsc_act, txt, NULL);
 801aeb8:	9905      	ldr	r1, [sp, #20]
        btn_area.x1 += (lv_area_get_width(&btn_area) - txt_size.x) / 2;
 801aeba:	b21b      	sxth	r3, r3
 801aebc:	eba3 030e 	sub.w	r3, r3, lr
 801aec0:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 801aec4:	eb00 0363 	add.w	r3, r0, r3, asr #1
 801aec8:	b298      	uxth	r0, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801aeca:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
 801aece:	3301      	adds	r3, #1
 801aed0:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
        btn_area.x2 = btn_area.x1 + txt_size.x;
 801aed4:	4470      	add	r0, lr
 801aed6:	1a9b      	subs	r3, r3, r2
 801aed8:	f8ad 0044 	strh.w	r0, [sp, #68]	; 0x44
        lv_draw_label(&btn_area, clip_area, &draw_label_dsc_act, txt, NULL);
 801aedc:	4648      	mov	r0, r9
        btn_area.y1 += (lv_area_get_height(&btn_area) - txt_size.y) / 2;
 801aede:	b21b      	sxth	r3, r3
 801aee0:	eba3 030c 	sub.w	r3, r3, ip
 801aee4:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 801aee8:	eb02 0363 	add.w	r3, r2, r3, asr #1
        lv_draw_label(&btn_area, clip_area, &draw_label_dsc_act, txt, NULL);
 801aeec:	aa12      	add	r2, sp, #72	; 0x48
        btn_area.y1 += (lv_area_get_height(&btn_area) - txt_size.y) / 2;
 801aeee:	b29b      	uxth	r3, r3
 801aef0:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
        btn_area.y2 = btn_area.y1 + txt_size.y;
 801aef4:	4463      	add	r3, ip
 801aef6:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
        lv_draw_label(&btn_area, clip_area, &draw_label_dsc_act, txt, NULL);
 801aefa:	2300      	movs	r3, #0
 801aefc:	9300      	str	r3, [sp, #0]
 801aefe:	460b      	mov	r3, r1
 801af00:	4639      	mov	r1, r7
 801af02:	f7ef fce5 	bl	800a8d0 <lv_draw_label>
        lv_event_send(obj,LV_EVENT_DRAW_PART_END, &dsc);
 801af06:	aa3c      	add	r2, sp, #240	; 0xf0
 801af08:	211b      	movs	r1, #27
 801af0a:	4620      	mov	r0, r4
 801af0c:	f7e6 ffdc 	bl	8001ec8 <lv_event_send>
    for(btn_i = 0; btn_i < btnm->btn_cnt; btn_i++, txt_i++) {
 801af10:	f108 0801 	add.w	r8, r8, #1
 801af14:	e6e0      	b.n	801acd8 <draw_main+0xd8>
            obj->state = btn_state;
 801af16:	8422      	strh	r2, [r4, #32]
            lv_draw_rect_dsc_init(&draw_rect_dsc_act);
 801af18:	a822      	add	r0, sp, #136	; 0x88
            obj->skip_trans = 1;
 801af1a:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
 801af1e:	f042 0204 	orr.w	r2, r2, #4
 801af22:	f884 2022 	strb.w	r2, [r4, #34]	; 0x22
            lv_draw_rect_dsc_init(&draw_rect_dsc_act);
 801af26:	f7f1 fdaf 	bl	800ca88 <lv_draw_rect_dsc_init>
            lv_draw_label_dsc_init(&draw_label_dsc_act);
 801af2a:	a812      	add	r0, sp, #72	; 0x48
 801af2c:	f7ef faf8 	bl	800a520 <lv_draw_label_dsc_init>
            lv_obj_init_draw_rect_dsc(obj, LV_PART_ITEMS, &draw_rect_dsc_act);
 801af30:	aa22      	add	r2, sp, #136	; 0x88
 801af32:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 801af36:	4620      	mov	r0, r4
 801af38:	f7e9 fb12 	bl	8004560 <lv_obj_init_draw_rect_dsc>
            lv_obj_init_draw_label_dsc(obj, LV_PART_ITEMS, &draw_label_dsc_act);
 801af3c:	aa12      	add	r2, sp, #72	; 0x48
 801af3e:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 801af42:	4620      	mov	r0, r4
 801af44:	f7e9 fc48 	bl	80047d8 <lv_obj_init_draw_label_dsc>
            obj->skip_trans = 0;
 801af48:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
            obj->state = state_ori;
 801af4c:	8426      	strh	r6, [r4, #32]
            obj->skip_trans = 0;
 801af4e:	f36f 0282 	bfc	r2, #2, #1
 801af52:	f884 2022 	strb.w	r2, [r4, #34]	; 0x22
 801af56:	e71c      	b.n	801ad92 <draw_main+0x192>
    obj->skip_trans = 0;
 801af58:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 801af5c:	f36f 0382 	bfc	r3, #2, #1
 801af60:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
}
 801af64:	b04f      	add	sp, #316	; 0x13c
 801af66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801af6a:	bf00      	nop
 801af6c:	fffb0000 	.word	0xfffb0000
 801af70:	0802964a 	.word	0x0802964a

0801af74 <invalidate_button_area>:

    return i;
}

static void invalidate_button_area(const lv_obj_t * obj, uint16_t btn_idx)
{
 801af74:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if(btn_idx == LV_BTNMATRIX_BTN_NONE) return;
 801af76:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
 801af7a:	4604      	mov	r4, r0
    if(btn_idx == LV_BTNMATRIX_BTN_NONE) return;
 801af7c:	4299      	cmp	r1, r3
 801af7e:	d041      	beq.n	801b004 <invalidate_button_area+0x90>

    lv_area_t btn_area;
    lv_area_t obj_area;

    lv_btnmatrix_t * btnm = (lv_btnmatrix_t *)obj;;
    lv_area_copy(&btn_area, &btnm->button_areas[btn_idx]);
 801af80:	6a82      	ldr	r2, [r0, #40]	; 0x28
 801af82:	eb02 03c1 	add.w	r3, r2, r1, lsl #3
    dest->x1 = src->x1;
 801af86:	f932 2031 	ldrsh.w	r2, [r2, r1, lsl #3]
    lv_obj_get_coords(obj, &obj_area);
 801af8a:	a902      	add	r1, sp, #8
 801af8c:	f8ad 2000 	strh.w	r2, [sp]
    dest->y1 = src->y1;
 801af90:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801af94:	f8ad 2002 	strh.w	r2, [sp, #2]
    dest->x2 = src->x2;
 801af98:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
    dest->y2 = src->y2;
 801af9c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    dest->x2 = src->x2;
 801afa0:	f8ad 2004 	strh.w	r2, [sp, #4]
    dest->y2 = src->y2;
 801afa4:	f8ad 3006 	strh.w	r3, [sp, #6]
 801afa8:	f7e9 ff11 	bl	8004dce <lv_obj_get_coords>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_ROW);
 801afac:	f241 0214 	movw	r2, #4116	; 0x1014
 801afb0:	2100      	movs	r1, #0
 801afb2:	4620      	mov	r0, r4
 801afb4:	f7ec f9d8 	bl	8007368 <lv_obj_get_style_prop>
 801afb8:	4605      	mov	r5, r0

    /*The buttons might have outline and shadow so make the invalidation larger with the gaps between the buttons.
     *It assumes that the outline or shadow is smaller then the gaps*/
    lv_coord_t row_gap = lv_obj_get_style_pad_row(obj, LV_PART_MAIN);
    lv_coord_t col_gap = lv_obj_get_style_pad_column(obj, LV_PART_MAIN);
 801afba:	4620      	mov	r0, r4
 801afbc:	f7ff fe18 	bl	801abf0 <lv_obj_get_style_pad_column.constprop.0>

    /*Convert relative coordinates to absolute*/
    btn_area.x1 += obj_area.x1 - row_gap;
 801afc0:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801afc4:	f8bd 3000 	ldrh.w	r3, [sp]
 801afc8:	b2a9      	uxth	r1, r5
    btn_area.y1 += obj_area.y1 - col_gap;
 801afca:	f8bd 600a 	ldrh.w	r6, [sp, #10]
    btn_area.x1 += obj_area.x1 - row_gap;
 801afce:	4413      	add	r3, r2
    btn_area.y1 += obj_area.y1 - col_gap;
 801afd0:	f8bd 5002 	ldrh.w	r5, [sp, #2]
    btn_area.x2 += obj_area.x1 + row_gap;
 801afd4:	440a      	add	r2, r1
    btn_area.x1 += obj_area.x1 - row_gap;
 801afd6:	1a5b      	subs	r3, r3, r1
    btn_area.y1 += obj_area.y1 - col_gap;
 801afd8:	4435      	add	r5, r6
    btn_area.x2 += obj_area.x1 + row_gap;
 801afda:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    btn_area.x1 += obj_area.x1 - row_gap;
 801afde:	f8ad 3000 	strh.w	r3, [sp]
    btn_area.y1 += obj_area.y1 - col_gap;
 801afe2:	b283      	uxth	r3, r0
    btn_area.y2 += obj_area.y1 + col_gap;
 801afe4:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    btn_area.x2 += obj_area.x1 + row_gap;
 801afe8:	440a      	add	r2, r1
    btn_area.y1 += obj_area.y1 - col_gap;
 801afea:	1aed      	subs	r5, r5, r3

    lv_obj_invalidate_area(obj, &btn_area);
 801afec:	4669      	mov	r1, sp
    btn_area.y2 += obj_area.y1 + col_gap;
 801afee:	4406      	add	r6, r0
    lv_obj_invalidate_area(obj, &btn_area);
 801aff0:	4620      	mov	r0, r4
    btn_area.y1 += obj_area.y1 - col_gap;
 801aff2:	f8ad 5002 	strh.w	r5, [sp, #2]
    btn_area.y2 += obj_area.y1 + col_gap;
 801aff6:	4433      	add	r3, r6
    btn_area.x2 += obj_area.x1 + row_gap;
 801aff8:	f8ad 2004 	strh.w	r2, [sp, #4]
    btn_area.y2 += obj_area.y1 + col_gap;
 801affc:	f8ad 3006 	strh.w	r3, [sp, #6]
    lv_obj_invalidate_area(obj, &btn_area);
 801b000:	f7ea f870 	bl	80050e4 <lv_obj_invalidate_area>
}
 801b004:	b004      	add	sp, #16
 801b006:	bd70      	pop	{r4, r5, r6, pc}

0801b008 <get_button_from_point>:
{
 801b008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b00c:	ed2d 8b02 	vpush	{d8}
 801b010:	b08b      	sub	sp, #44	; 0x2c
 801b012:	4605      	mov	r5, r0
 801b014:	ee08 1a10 	vmov	s16, r1
    for(i = 0; i < btnm->btn_cnt; i++) {
 801b018:	f04f 0b00 	mov.w	fp, #0
    lv_obj_get_coords(obj, &obj_cords);
 801b01c:	a906      	add	r1, sp, #24
 801b01e:	f7e9 fed6 	bl	8004dce <lv_obj_get_coords>
    lv_coord_t w = lv_obj_get_width(obj);
 801b022:	4628      	mov	r0, r5
 801b024:	f7e9 ff23 	bl	8004e6e <lv_obj_get_width>
 801b028:	4681      	mov	r9, r0
    lv_coord_t h = lv_obj_get_height(obj);
 801b02a:	4628      	mov	r0, r5
 801b02c:	f7e9 ff25 	bl	8004e7a <lv_obj_get_height>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801b030:	f241 0212 	movw	r2, #4114	; 0x1012
 801b034:	2100      	movs	r1, #0
 801b036:	9003      	str	r0, [sp, #12]
 801b038:	4628      	mov	r0, r5
 801b03a:	f7ec f995 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801b03e:	f241 0213 	movw	r2, #4115	; 0x1013
    return (lv_coord_t)v.num;
 801b042:	fa0f fa80 	sxth.w	sl, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801b046:	2100      	movs	r1, #0
 801b048:	4628      	mov	r0, r5
 801b04a:	f7ec f98d 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801b04e:	f241 0210 	movw	r2, #4112	; 0x1010
    return (lv_coord_t)v.num;
 801b052:	b206      	sxth	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801b054:	2100      	movs	r1, #0
 801b056:	4628      	mov	r0, r5
 801b058:	f7ec f986 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801b05c:	f241 0211 	movw	r2, #4113	; 0x1011
    return (lv_coord_t)v.num;
 801b060:	b207      	sxth	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801b062:	2100      	movs	r1, #0
 801b064:	4628      	mov	r0, r5
 801b066:	f7ec f97f 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_ROW);
 801b06a:	f241 0214 	movw	r2, #4116	; 0x1014
    return (lv_coord_t)v.num;
 801b06e:	fa0f f880 	sxth.w	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_ROW);
 801b072:	2100      	movs	r1, #0
 801b074:	4628      	mov	r0, r5
 801b076:	f7ec f977 	bl	8007368 <lv_obj_get_style_prop>
 801b07a:	4604      	mov	r4, r0
    lv_coord_t pcol = lv_obj_get_style_pad_column(obj, LV_PART_MAIN);
 801b07c:	4628      	mov	r0, r5
 801b07e:	f7ff fdb7 	bl	801abf0 <lv_obj_get_style_pad_column.constprop.0>
    prow = (prow / 2) + 1 + (prow & 1);
 801b082:	f004 0301 	and.w	r3, r4, #1
 801b086:	1c5a      	adds	r2, r3, #1
 801b088:	f3c4 33c0 	ubfx	r3, r4, #15, #1
 801b08c:	fa03 f384 	sxtah	r3, r3, r4
    pcol = (pcol / 2) + 1 + (pcol & 1);
 801b090:	f000 0401 	and.w	r4, r0, #1
    prow = (prow / 2) + 1 + (prow & 1);
 801b094:	eb02 0363 	add.w	r3, r2, r3, asr #1
    pcol = (pcol / 2) + 1 + (pcol & 1);
 801b098:	eb00 72d0 	add.w	r2, r0, r0, lsr #31
    prow = (prow / 2) + 1 + (prow & 1);
 801b09c:	b21b      	sxth	r3, r3
    pcol = (pcol / 2) + 1 + (pcol & 1);
 801b09e:	eb04 0462 	add.w	r4, r4, r2, asr #1
    prow = LV_MIN(prow, BTN_EXTRA_CLICK_AREA_MAX);
 801b0a2:	2b0d      	cmp	r3, #13
    pcol = (pcol / 2) + 1 + (pcol & 1);
 801b0a4:	f104 0401 	add.w	r4, r4, #1
    prow = LV_MIN(prow, BTN_EXTRA_CLICK_AREA_MAX);
 801b0a8:	bfa8      	it	ge
 801b0aa:	230d      	movge	r3, #13
    pcol = (pcol / 2) + 1 + (pcol & 1);
 801b0ac:	b224      	sxth	r4, r4
    prow = LV_MIN(prow, BTN_EXTRA_CLICK_AREA_MAX);
 801b0ae:	9301      	str	r3, [sp, #4]
        if(btn_area.x1 <= pleft) btn_area.x1 += obj_cords.x1 - LV_MIN(pleft, BTN_EXTRA_CLICK_AREA_MAX);
 801b0b0:	4653      	mov	r3, sl
    pcol = LV_MIN(pcol, BTN_EXTRA_CLICK_AREA_MAX);
 801b0b2:	2c0d      	cmp	r4, #13
 801b0b4:	bfa8      	it	ge
 801b0b6:	240d      	movge	r4, #13
    pright = LV_MIN(pright, BTN_EXTRA_CLICK_AREA_MAX);
 801b0b8:	2e0d      	cmp	r6, #13
 801b0ba:	bfa8      	it	ge
 801b0bc:	260d      	movge	r6, #13
    ptop = LV_MIN(ptop, BTN_EXTRA_CLICK_AREA_MAX);
 801b0be:	2f0d      	cmp	r7, #13
 801b0c0:	bfa8      	it	ge
 801b0c2:	270d      	movge	r7, #13
    pbottom = LV_MIN(pbottom, BTN_EXTRA_CLICK_AREA_MAX);
 801b0c4:	f1b8 0f0d 	cmp.w	r8, #13
        if(btn_area.x2 >= w - pright - 2) btn_area.x2 += obj_cords.x1 + LV_MIN(pright,
 801b0c8:	eba9 0906 	sub.w	r9, r9, r6
    pbottom = LV_MIN(pbottom, BTN_EXTRA_CLICK_AREA_MAX);
 801b0cc:	bfa8      	it	ge
 801b0ce:	f04f 080d 	movge.w	r8, #13
        if(btn_area.x1 <= pleft) btn_area.x1 += obj_cords.x1 - LV_MIN(pleft, BTN_EXTRA_CLICK_AREA_MAX);
 801b0d2:	2b0d      	cmp	r3, #13
 801b0d4:	bfa8      	it	ge
 801b0d6:	230d      	movge	r3, #13
 801b0d8:	9304      	str	r3, [sp, #16]
        if(btn_area.x2 >= w - pright - 2) btn_area.x2 += obj_cords.x1 + LV_MIN(pright,
 801b0da:	f1a9 0302 	sub.w	r3, r9, #2
 801b0de:	9305      	str	r3, [sp, #20]
 801b0e0:	fa1f f98b 	uxth.w	r9, fp
    for(i = 0; i < btnm->btn_cnt; i++) {
 801b0e4:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
 801b0e6:	454b      	cmp	r3, r9
 801b0e8:	d950      	bls.n	801b18c <get_button_from_point+0x184>
        lv_area_copy(&btn_area, &btnm->button_areas[i]);
 801b0ea:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 801b0ec:	fa1f f38b 	uxth.w	r3, fp
 801b0f0:	f10b 0b01 	add.w	fp, fp, #1
    dest->x1 = src->x1;
 801b0f4:	f932 1033 	ldrsh.w	r1, [r2, r3, lsl #3]
 801b0f8:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
    dest->y1 = src->y1;
 801b0fc:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
        if(btn_area.x1 <= pleft) btn_area.x1 += obj_cords.x1 - LV_MIN(pleft, BTN_EXTRA_CLICK_AREA_MAX);
 801b100:	458a      	cmp	sl, r1
 801b102:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 801b106:	f9b0 e002 	ldrsh.w	lr, [r0, #2]
 801b10a:	bfac      	ite	ge
 801b10c:	9904      	ldrge	r1, [sp, #16]
        else btn_area.x1 += obj_cords.x1 - pcol;
 801b10e:	1b11      	sublt	r1, r2, r4
    dest->x2 = src->x2;
 801b110:	f9b0 c004 	ldrsh.w	ip, [r0, #4]
        if(btn_area.x1 <= pleft) btn_area.x1 += obj_cords.x1 - LV_MIN(pleft, BTN_EXTRA_CLICK_AREA_MAX);
 801b114:	bfa8      	it	ge
 801b116:	1a51      	subge	r1, r2, r1
    dest->y2 = src->y2;
 801b118:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
        if(btn_area.y1 <= ptop) btn_area.y1 += obj_cords.y1 - LV_MIN(ptop, BTN_EXTRA_CLICK_AREA_MAX);
 801b11c:	4577      	cmp	r7, lr
        else btn_area.x1 += obj_cords.x1 - pcol;
 801b11e:	440b      	add	r3, r1
 801b120:	9002      	str	r0, [sp, #8]
        else btn_area.y1 += obj_cords.y1 - prow;
 801b122:	bfb8      	it	lt
 801b124:	9801      	ldrlt	r0, [sp, #4]
 801b126:	fa1f f18e 	uxth.w	r1, lr
        else btn_area.x1 += obj_cords.x1 - pcol;
 801b12a:	b21b      	sxth	r3, r3
 801b12c:	f8ad 3020 	strh.w	r3, [sp, #32]
        if(btn_area.y1 <= ptop) btn_area.y1 += obj_cords.y1 - LV_MIN(ptop, BTN_EXTRA_CLICK_AREA_MAX);
 801b130:	f8bd 301a 	ldrh.w	r3, [sp, #26]
        else btn_area.y1 += obj_cords.y1 - prow;
 801b134:	bfb4      	ite	lt
 801b136:	eba3 0e00 	sublt.w	lr, r3, r0
        if(btn_area.y1 <= ptop) btn_area.y1 += obj_cords.y1 - LV_MIN(ptop, BTN_EXTRA_CLICK_AREA_MAX);
 801b13a:	eba3 0e07 	subge.w	lr, r3, r7
        if(btn_area.x2 >= w - pright - 2) btn_area.x2 += obj_cords.x1 + LV_MIN(pright,
 801b13e:	9805      	ldr	r0, [sp, #20]
        else btn_area.y1 += obj_cords.y1 - prow;
 801b140:	4471      	add	r1, lr
        if(btn_area.x2 >= w - pright - 2) btn_area.x2 += obj_cords.x1 + LV_MIN(pright,
 801b142:	4584      	cmp	ip, r0
        if(btn_area.y2 >= h - pbottom - 2) btn_area.y2 += obj_cords.y1 + LV_MIN(pbottom,
 801b144:	9802      	ldr	r0, [sp, #8]
        else btn_area.y1 += obj_cords.y1 - prow;
 801b146:	b209      	sxth	r1, r1
        if(btn_area.x2 >= w - pright - 2) btn_area.x2 += obj_cords.x1 + LV_MIN(pright,
 801b148:	bfac      	ite	ge
 801b14a:	1992      	addge	r2, r2, r6
        else btn_area.x2 += obj_cords.x1 + pcol;
 801b14c:	1912      	addlt	r2, r2, r4
 801b14e:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
 801b152:	fa1f f18c 	uxth.w	r1, ip
 801b156:	440a      	add	r2, r1
        if(btn_area.y2 >= h - pbottom - 2) btn_area.y2 += obj_cords.y1 + LV_MIN(pbottom,
 801b158:	9903      	ldr	r1, [sp, #12]
 801b15a:	eba1 0108 	sub.w	r1, r1, r8
        else btn_area.x2 += obj_cords.x1 + pcol;
 801b15e:	b212      	sxth	r2, r2
        if(btn_area.y2 >= h - pbottom - 2) btn_area.y2 += obj_cords.y1 + LV_MIN(pbottom,
 801b160:	3902      	subs	r1, #2
 801b162:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 801b166:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801b16a:	4288      	cmp	r0, r1
        if(_lv_area_is_point_on(&btn_area, p, 0) != false) {
 801b16c:	a808      	add	r0, sp, #32
        else btn_area.y2 += obj_cords.y1 + prow;
 801b16e:	bfb6      	itet	lt
 801b170:	9901      	ldrlt	r1, [sp, #4]
        if(btn_area.y2 >= h - pbottom - 2) btn_area.y2 += obj_cords.y1 + LV_MIN(pbottom,
 801b172:	4443      	addge	r3, r8
        else btn_area.y2 += obj_cords.y1 + prow;
 801b174:	185b      	addlt	r3, r3, r1
        if(_lv_area_is_point_on(&btn_area, p, 0) != false) {
 801b176:	ee18 1a10 	vmov	r1, s16
        else btn_area.y2 += obj_cords.y1 + prow;
 801b17a:	4413      	add	r3, r2
        if(_lv_area_is_point_on(&btn_area, p, 0) != false) {
 801b17c:	2200      	movs	r2, #0
        else btn_area.y2 += obj_cords.y1 + prow;
 801b17e:	b21b      	sxth	r3, r3
 801b180:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
        if(_lv_area_is_point_on(&btn_area, p, 0) != false) {
 801b184:	f7fb fed3 	bl	8016f2e <_lv_area_is_point_on>
 801b188:	2800      	cmp	r0, #0
 801b18a:	d0a9      	beq.n	801b0e0 <get_button_from_point+0xd8>
    if(i == btnm->btn_cnt) i = LV_BTNMATRIX_BTN_NONE;
 801b18c:	8e2a      	ldrh	r2, [r5, #48]	; 0x30
 801b18e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b192:	454a      	cmp	r2, r9
 801b194:	bf08      	it	eq
 801b196:	4699      	moveq	r9, r3
}
 801b198:	4648      	mov	r0, r9
 801b19a:	b00b      	add	sp, #44	; 0x2c
 801b19c:	ecbd 8b02 	vpop	{d8}
 801b1a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b1a4 <lv_btnmatrix_set_map.part.0>:
void lv_btnmatrix_set_map(lv_obj_t * obj, const char * map[])
 801b1a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    while(map[i] && map[i][0] != '\0') {
 801b1a8:	2700      	movs	r7, #0
void lv_btnmatrix_set_map(lv_obj_t * obj, const char * map[])
 801b1aa:	b095      	sub	sp, #84	; 0x54
 801b1ac:	4604      	mov	r4, r0
 801b1ae:	460d      	mov	r5, r1
    uint16_t btn_cnt = 0;
 801b1b0:	463e      	mov	r6, r7
        if(strcmp(map[i], "\n") != 0) { /*Do not count line breaks*/
 801b1b2:	f8df 8274 	ldr.w	r8, [pc, #628]	; 801b428 <lv_btnmatrix_set_map.part.0+0x284>
    while(map[i] && map[i][0] != '\0') {
 801b1b6:	b2bb      	uxth	r3, r7
 801b1b8:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 801b1bc:	b108      	cbz	r0, 801b1c2 <lv_btnmatrix_set_map.part.0+0x1e>
 801b1be:	7803      	ldrb	r3, [r0, #0]
 801b1c0:	b9a3      	cbnz	r3, 801b1ec <lv_btnmatrix_set_map.part.0+0x48>
    if(btn_cnt == btnm->btn_cnt) return;
 801b1c2:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801b1c4:	42b3      	cmp	r3, r6
 801b1c6:	d027      	beq.n	801b218 <lv_btnmatrix_set_map.part.0+0x74>
    if(btnm->button_areas != NULL) {
 801b1c8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801b1ca:	b118      	cbz	r0, 801b1d4 <lv_btnmatrix_set_map.part.0+0x30>
        lv_mem_free(btnm->button_areas);
 801b1cc:	f7fc fab2 	bl	8017734 <lv_mem_free>
        btnm->button_areas = NULL;
 801b1d0:	2300      	movs	r3, #0
 801b1d2:	62a3      	str	r3, [r4, #40]	; 0x28
    if(btnm->ctrl_bits != NULL) {
 801b1d4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801b1d6:	b118      	cbz	r0, 801b1e0 <lv_btnmatrix_set_map.part.0+0x3c>
        lv_mem_free(btnm->ctrl_bits);
 801b1d8:	f7fc faac 	bl	8017734 <lv_mem_free>
        btnm->ctrl_bits = NULL;
 801b1dc:	2300      	movs	r3, #0
 801b1de:	62e3      	str	r3, [r4, #44]	; 0x2c
    btnm->button_areas = lv_mem_alloc(sizeof(lv_area_t) * btn_cnt);
 801b1e0:	00f0      	lsls	r0, r6, #3
 801b1e2:	f7fc fc29 	bl	8017a38 <lv_mem_alloc>
 801b1e6:	62a0      	str	r0, [r4, #40]	; 0x28
    LV_ASSERT_MALLOC(btnm->button_areas);
 801b1e8:	b940      	cbnz	r0, 801b1fc <lv_btnmatrix_set_map.part.0+0x58>
 801b1ea:	e7fe      	b.n	801b1ea <lv_btnmatrix_set_map.part.0+0x46>
        if(strcmp(map[i], "\n") != 0) { /*Do not count line breaks*/
 801b1ec:	4641      	mov	r1, r8
 801b1ee:	f7e5 f85f 	bl	80002b0 <strcmp>
 801b1f2:	b108      	cbz	r0, 801b1f8 <lv_btnmatrix_set_map.part.0+0x54>
            btn_cnt++;
 801b1f4:	3601      	adds	r6, #1
 801b1f6:	b2b6      	uxth	r6, r6
        i++;
 801b1f8:	3701      	adds	r7, #1
 801b1fa:	e7dc      	b.n	801b1b6 <lv_btnmatrix_set_map.part.0+0x12>
    btnm->ctrl_bits = lv_mem_alloc(sizeof(lv_btnmatrix_ctrl_t) * btn_cnt);
 801b1fc:	0070      	lsls	r0, r6, #1
 801b1fe:	f7fc fc1b 	bl	8017a38 <lv_mem_alloc>
 801b202:	62e0      	str	r0, [r4, #44]	; 0x2c
    LV_ASSERT_MALLOC(btnm->ctrl_bits);
 801b204:	b900      	cbnz	r0, 801b208 <lv_btnmatrix_set_map.part.0+0x64>
 801b206:	e7fe      	b.n	801b206 <lv_btnmatrix_set_map.part.0+0x62>
    if(btnm->button_areas == NULL || btnm->ctrl_bits == NULL) btn_cnt = 0;
 801b208:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801b20a:	2b00      	cmp	r3, #0
 801b20c:	bf08      	it	eq
 801b20e:	2600      	moveq	r6, #0
    lv_memset_00(btnm->ctrl_bits, sizeof(lv_btnmatrix_ctrl_t) * btn_cnt);
 801b210:	0071      	lsls	r1, r6, #1
 801b212:	f7fc fc8f 	bl	8017b34 <lv_memset_00>
    btnm->btn_cnt = btn_cnt;
 801b216:	8626      	strh	r6, [r4, #48]	; 0x30
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 801b218:	f241 426a 	movw	r2, #5226	; 0x146a
 801b21c:	2100      	movs	r1, #0
 801b21e:	4620      	mov	r0, r4
    btnm->map_p = map;
 801b220:	6265      	str	r5, [r4, #36]	; 0x24
 801b222:	f7ec f8a1 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801b226:	f241 0212 	movw	r2, #4114	; 0x1012
    return (lv_base_dir_t)v.num;
 801b22a:	b2c3      	uxtb	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801b22c:	2100      	movs	r1, #0
 801b22e:	4620      	mov	r0, r4
    uint8_t row_cnt = 1;
 801b230:	f04f 0b01 	mov.w	fp, #1
    return (lv_base_dir_t)v.num;
 801b234:	930f      	str	r3, [sp, #60]	; 0x3c
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801b236:	f7ec f897 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801b23a:	f241 0210 	movw	r2, #4112	; 0x1010
 801b23e:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801b240:	900e      	str	r0, [sp, #56]	; 0x38
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801b242:	4620      	mov	r0, r4
 801b244:	f7ec f890 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_ROW);
 801b248:	f241 0214 	movw	r2, #4116	; 0x1014
 801b24c:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801b24e:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_ROW);
 801b250:	4620      	mov	r0, r4
 801b252:	f7ec f889 	bl	8007368 <lv_obj_get_style_prop>
 801b256:	4681      	mov	r9, r0
    return (lv_coord_t)v.num;
 801b258:	fa0f f880 	sxth.w	r8, r0
    lv_coord_t pcol = lv_obj_get_style_pad_column(obj, LV_PART_MAIN);
 801b25c:	4620      	mov	r0, r4
 801b25e:	f7ff fcc7 	bl	801abf0 <lv_obj_get_style_pad_column.constprop.0>
 801b262:	9009      	str	r0, [sp, #36]	; 0x24
    lv_coord_t max_w            = lv_obj_get_content_width(obj);
 801b264:	4620      	mov	r0, r4
 801b266:	f7e9 fe0e 	bl	8004e86 <lv_obj_get_content_width>
 801b26a:	4606      	mov	r6, r0
    lv_coord_t max_h            = lv_obj_get_content_height(obj);
 801b26c:	4620      	mov	r0, r4
 801b26e:	f7e9 fe24 	bl	8004eba <lv_obj_get_content_height>
 801b272:	1f2a      	subs	r2, r5, #4
 801b274:	4682      	mov	sl, r0
        if(strcmp(map[i], "\n") == 0) row_cnt++;
 801b276:	496c      	ldr	r1, [pc, #432]	; (801b428 <lv_btnmatrix_set_map.part.0+0x284>)
    for(i = 0; map[i] && map[i][0] != '\0'; i++) {
 801b278:	f852 0f04 	ldr.w	r0, [r2, #4]!
 801b27c:	b108      	cbz	r0, 801b282 <lv_btnmatrix_set_map.part.0+0xde>
 801b27e:	7803      	ldrb	r3, [r0, #0]
 801b280:	bb0b      	cbnz	r3, 801b2c6 <lv_btnmatrix_set_map.part.0+0x122>
    lv_coord_t max_h_no_gap = max_h - (prow * (row_cnt - 1));
 801b282:	f10b 30ff 	add.w	r0, fp, #4294967295
 801b286:	fb10 f909 	smulbb	r9, r0, r9
 801b28a:	ebaa 0a09 	sub.w	sl, sl, r9
 801b28e:	fa0f f38a 	sxth.w	r3, sl
    for(row = 0; row < row_cnt; row++) {
 801b292:	f04f 0a00 	mov.w	sl, #0
 801b296:	930c      	str	r3, [sp, #48]	; 0x30
 801b298:	fa1f f388 	uxth.w	r3, r8
 801b29c:	f8cd a018 	str.w	sl, [sp, #24]
 801b2a0:	9310      	str	r3, [sp, #64]	; 0x40
 801b2a2:	b2bb      	uxth	r3, r7
    uint32_t txt_tot_i = 0; /*Act. index in the str map*/
 801b2a4:	f8cd a00c 	str.w	sl, [sp, #12]
 801b2a8:	9305      	str	r3, [sp, #20]
        lv_coord_t max_w_no_gap = max_w - (pcol * (btn_cnt - 1));
 801b2aa:	b2b3      	uxth	r3, r6
 801b2ac:	9308      	str	r3, [sp, #32]
 801b2ae:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801b2b2:	9312      	str	r3, [sp, #72]	; 0x48
    for(row = 0; row < row_cnt; row++) {
 801b2b4:	9b06      	ldr	r3, [sp, #24]
 801b2b6:	455b      	cmp	r3, fp
 801b2b8:	d33f      	bcc.n	801b33a <lv_btnmatrix_set_map.part.0+0x196>
    lv_obj_invalidate(obj);
 801b2ba:	4620      	mov	r0, r4
}
 801b2bc:	b015      	add	sp, #84	; 0x54
 801b2be:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_obj_invalidate(obj);
 801b2c2:	f7e9 bf29 	b.w	8005118 <lv_obj_invalidate>
 801b2c6:	9203      	str	r2, [sp, #12]
        if(strcmp(map[i], "\n") == 0) row_cnt++;
 801b2c8:	f7e4 fff2 	bl	80002b0 <strcmp>
 801b2cc:	4956      	ldr	r1, [pc, #344]	; (801b428 <lv_btnmatrix_set_map.part.0+0x284>)
 801b2ce:	9a03      	ldr	r2, [sp, #12]
 801b2d0:	2800      	cmp	r0, #0
 801b2d2:	d1d1      	bne.n	801b278 <lv_btnmatrix_set_map.part.0+0xd4>
 801b2d4:	f10b 0301 	add.w	r3, fp, #1
 801b2d8:	fa5f fb83 	uxtb.w	fp, r3
    for(i = 0; map[i] && map[i][0] != '\0'; i++) {
 801b2dc:	e7cc      	b.n	801b278 <lv_btnmatrix_set_map.part.0+0xd4>
            unit_cnt += get_button_width(btnm->ctrl_bits[btn_tot_i + btn_cnt]);
 801b2de:	9b03      	ldr	r3, [sp, #12]
 801b2e0:	9a04      	ldr	r2, [sp, #16]
 801b2e2:	441e      	add	r6, r3
 801b2e4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    uint8_t w = ctrl_bits & LV_BTNMATRIX_WIDTH_MASK;
 801b2e6:	f813 3016 	ldrb.w	r3, [r3, r6, lsl #1]
            unit_cnt += get_button_width(btnm->ctrl_bits[btn_tot_i + btn_cnt]);
 801b2ea:	f003 0307 	and.w	r3, r3, #7
 801b2ee:	2b01      	cmp	r3, #1
 801b2f0:	bf2c      	ite	cs
 801b2f2:	18d2      	addcs	r2, r2, r3
 801b2f4:	3201      	addcc	r2, #1
 801b2f6:	b293      	uxth	r3, r2
 801b2f8:	9304      	str	r3, [sp, #16]
            btn_cnt++;
 801b2fa:	fa1f f788 	uxth.w	r7, r8
        while(map_row[btn_cnt] && strcmp(map_row[btn_cnt], "\n") != 0 && map_row[btn_cnt][0] != '\0') {
 801b2fe:	f855 9027 	ldr.w	r9, [r5, r7, lsl #2]
 801b302:	463e      	mov	r6, r7
 801b304:	f1b9 0f00 	cmp.w	r9, #0
 801b308:	d00a      	beq.n	801b320 <lv_btnmatrix_set_map.part.0+0x17c>
 801b30a:	4947      	ldr	r1, [pc, #284]	; (801b428 <lv_btnmatrix_set_map.part.0+0x284>)
 801b30c:	4648      	mov	r0, r9
 801b30e:	f7e4 ffcf 	bl	80002b0 <strcmp>
 801b312:	b128      	cbz	r0, 801b320 <lv_btnmatrix_set_map.part.0+0x17c>
 801b314:	f899 3000 	ldrb.w	r3, [r9]
 801b318:	f108 0801 	add.w	r8, r8, #1
 801b31c:	2b00      	cmp	r3, #0
 801b31e:	d1de      	bne.n	801b2de <lv_btnmatrix_set_map.part.0+0x13a>
        if(btn_cnt == 0) {
 801b320:	9b06      	ldr	r3, [sp, #24]
 801b322:	3301      	adds	r3, #1
 801b324:	9306      	str	r3, [sp, #24]
 801b326:	b96f      	cbnz	r7, 801b344 <lv_btnmatrix_set_map.part.0+0x1a0>
            map_row = &map_row[btn_cnt + 1];       /*Set the map to the next row*/
 801b328:	3504      	adds	r5, #4
    for(row = 0; row < row_cnt; row++) {
 801b32a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b32c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801b32e:	449a      	add	sl, r3
 801b330:	9b05      	ldr	r3, [sp, #20]
 801b332:	4413      	add	r3, r2
 801b334:	b29b      	uxth	r3, r3
 801b336:	9305      	str	r3, [sp, #20]
 801b338:	e7bc      	b.n	801b2b4 <lv_btnmatrix_set_map.part.0+0x110>
 801b33a:	f04f 0800 	mov.w	r8, #0
        uint16_t unit_cnt = 0;           /*Number of units in a row*/
 801b33e:	f8cd 8010 	str.w	r8, [sp, #16]
 801b342:	e7da      	b.n	801b2fa <lv_btnmatrix_set_map.part.0+0x156>
        lv_coord_t row_y1 = ptop + (max_h_no_gap * row) / row_cnt + row * prow;
 801b344:	fbba f2fb 	udiv	r2, sl, fp
 801b348:	9b05      	ldr	r3, [sp, #20]
        lv_coord_t max_w_no_gap = max_w - (pcol * (btn_cnt - 1));
 801b34a:	3f01      	subs	r7, #1
        lv_coord_t row_y2 = ptop + (max_h_no_gap * (row + 1)) / row_cnt + row * prow - 1;
 801b34c:	9905      	ldr	r1, [sp, #20]
        lv_coord_t row_y1 = ptop + (max_h_no_gap * row) / row_cnt + row * prow;
 801b34e:	441a      	add	r2, r3
        lv_coord_t row_y2 = ptop + (max_h_no_gap * (row + 1)) / row_cnt + row * prow - 1;
 801b350:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b352:	3901      	subs	r1, #1
 801b354:	4453      	add	r3, sl
        lv_coord_t row_y1 = ptop + (max_h_no_gap * row) / row_cnt + row * prow;
 801b356:	b212      	sxth	r2, r2
        lv_coord_t row_y2 = ptop + (max_h_no_gap * (row + 1)) / row_cnt + row * prow - 1;
 801b358:	fbb3 f3fb 	udiv	r3, r3, fp
 801b35c:	440b      	add	r3, r1
 801b35e:	b21b      	sxth	r3, r3
 801b360:	930d      	str	r3, [sp, #52]	; 0x34
        lv_coord_t max_w_no_gap = max_w - (pcol * (btn_cnt - 1));
 801b362:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b364:	fb17 f703 	smulbb	r7, r7, r3
 801b368:	9b08      	ldr	r3, [sp, #32]
 801b36a:	1bdf      	subs	r7, r3, r7
 801b36c:	b23f      	sxth	r7, r7
        if(max_w_no_gap < 0) max_w_no_gap = 0;
 801b36e:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
        lv_coord_t max_w_no_gap = max_w - (pcol * (btn_cnt - 1));
 801b372:	2700      	movs	r7, #0
 801b374:	930a      	str	r3, [sp, #40]	; 0x28
        uint32_t row_unit_cnt = 0;  /*The current unit position in the row*/
 801b376:	46b9      	mov	r9, r7
 801b378:	9b03      	ldr	r3, [sp, #12]
        for(btn = 0; btn < btn_cnt; btn++, btn_tot_i++, txt_tot_i++) {
 801b37a:	9707      	str	r7, [sp, #28]
 801b37c:	ea4f 0843 	mov.w	r8, r3, lsl #1
            btn_x1 += pleft;
 801b380:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801b384:	930b      	str	r3, [sp, #44]	; 0x2c
            lv_coord_t btn_x1 = (max_w_no_gap * row_unit_cnt) / unit_cnt + btn * pcol;
 801b386:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b388:	9904      	ldr	r1, [sp, #16]
 801b38a:	fb03 f309 	mul.w	r3, r3, r9
            lv_area_set(&btnm->button_areas[btn_tot_i], btn_x1, row_y1, btn_x2, row_y2);
 801b38e:	9213      	str	r2, [sp, #76]	; 0x4c
            lv_coord_t btn_x1 = (max_w_no_gap * row_unit_cnt) / unit_cnt + btn * pcol;
 801b390:	fbb3 f3f1 	udiv	r3, r3, r1
            uint32_t btn_u = get_button_width(btnm->ctrl_bits[btn_tot_i]);
 801b394:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
            lv_coord_t btn_x1 = (max_w_no_gap * row_unit_cnt) / unit_cnt + btn * pcol;
 801b396:	443b      	add	r3, r7
    uint8_t w = ctrl_bits & LV_BTNMATRIX_WIDTH_MASK;
 801b398:	f811 1008 	ldrb.w	r1, [r1, r8]
            lv_coord_t btn_x1 = (max_w_no_gap * row_unit_cnt) / unit_cnt + btn * pcol;
 801b39c:	b29b      	uxth	r3, r3
            uint32_t btn_u = get_button_width(btnm->ctrl_bits[btn_tot_i]);
 801b39e:	f001 0107 	and.w	r1, r1, #7
            lv_coord_t btn_x2 = (max_w_no_gap * (row_unit_cnt + btn_u)) / unit_cnt + btn * pcol - 1;
 801b3a2:	2901      	cmp	r1, #1
 801b3a4:	bf2c      	ite	cs
 801b3a6:	4489      	addcs	r9, r1
 801b3a8:	f109 0901 	addcc.w	r9, r9, #1
 801b3ac:	990a      	ldr	r1, [sp, #40]	; 0x28
 801b3ae:	fb09 f001 	mul.w	r0, r9, r1
 801b3b2:	9904      	ldr	r1, [sp, #16]
 801b3b4:	fbb0 f0f1 	udiv	r0, r0, r1
 801b3b8:	1e79      	subs	r1, r7, #1
 801b3ba:	4408      	add	r0, r1
            if(base_dir == LV_BASE_DIR_RTL) {
 801b3bc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801b3be:	2901      	cmp	r1, #1
            lv_coord_t btn_x2 = (max_w_no_gap * (row_unit_cnt + btn_u)) / unit_cnt + btn * pcol - 1;
 801b3c0:	b280      	uxth	r0, r0
                btn_x1 = max_w - btn_x1;
 801b3c2:	bf0d      	iteet	eq
 801b3c4:	9908      	ldreq	r1, [sp, #32]
            lv_coord_t btn_x1 = (max_w_no_gap * row_unit_cnt) / unit_cnt + btn * pcol;
 801b3c6:	b219      	sxthne	r1, r3
            lv_coord_t btn_x2 = (max_w_no_gap * (row_unit_cnt + btn_u)) / unit_cnt + btn * pcol - 1;
 801b3c8:	b203      	sxthne	r3, r0
                btn_x1 = max_w - btn_x1;
 801b3ca:	1a08      	subeq	r0, r1, r0
 801b3cc:	bf02      	ittt	eq
 801b3ce:	b201      	sxtheq	r1, r0
                btn_x2 = max_w - btn_x2;
 801b3d0:	9808      	ldreq	r0, [sp, #32]
 801b3d2:	1ac3      	subeq	r3, r0, r3
            btn_x1 += pleft;
 801b3d4:	980b      	ldr	r0, [sp, #44]	; 0x2c
                btn_x2 = max_w - btn_x2;
 801b3d6:	bf08      	it	eq
 801b3d8:	b21b      	sxtheq	r3, r3
            btn_x1 += pleft;
 801b3da:	4401      	add	r1, r0
            btn_x2 += pleft;
 801b3dc:	4403      	add	r3, r0
            lv_area_set(&btnm->button_areas[btn_tot_i], btn_x1, row_y1, btn_x2, row_y2);
 801b3de:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801b3e0:	b209      	sxth	r1, r1
 801b3e2:	9011      	str	r0, [sp, #68]	; 0x44
 801b3e4:	b21b      	sxth	r3, r3
 801b3e6:	980d      	ldr	r0, [sp, #52]	; 0x34
 801b3e8:	9000      	str	r0, [sp, #0]
 801b3ea:	9811      	ldr	r0, [sp, #68]	; 0x44
 801b3ec:	eb00 0088 	add.w	r0, r0, r8, lsl #2
 801b3f0:	f108 0802 	add.w	r8, r8, #2
 801b3f4:	f7fb fd10 	bl	8016e18 <lv_area_set>
        for(btn = 0; btn < btn_cnt; btn++, btn_tot_i++, txt_tot_i++) {
 801b3f8:	9b07      	ldr	r3, [sp, #28]
 801b3fa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b3fc:	3301      	adds	r3, #1
 801b3fe:	9307      	str	r3, [sp, #28]
 801b400:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801b402:	441f      	add	r7, r3
 801b404:	9b07      	ldr	r3, [sp, #28]
 801b406:	42b3      	cmp	r3, r6
 801b408:	b2bf      	uxth	r7, r7
 801b40a:	d3bc      	bcc.n	801b386 <lv_btnmatrix_set_map.part.0+0x1e2>
 801b40c:	2e00      	cmp	r6, #0
 801b40e:	9a03      	ldr	r2, [sp, #12]
 801b410:	f106 33ff 	add.w	r3, r6, #4294967295
        map_row = &map_row[btn_cnt + 1];       /*Set the map to the next line*/
 801b414:	f106 0601 	add.w	r6, r6, #1
 801b418:	bf08      	it	eq
 801b41a:	2300      	moveq	r3, #0
 801b41c:	3201      	adds	r2, #1
 801b41e:	eb05 0586 	add.w	r5, r5, r6, lsl #2
 801b422:	4413      	add	r3, r2
 801b424:	9303      	str	r3, [sp, #12]
 801b426:	e780      	b.n	801b32a <lv_btnmatrix_set_map.part.0+0x186>
 801b428:	0802964a 	.word	0x0802964a

0801b42c <lv_btnmatrix_constructor>:
    btnm->btn_cnt        = 0;
 801b42c:	4a07      	ldr	r2, [pc, #28]	; (801b44c <lv_btnmatrix_constructor+0x20>)
    btnm->map_p          = NULL;
 801b42e:	2300      	movs	r3, #0
{
 801b430:	4608      	mov	r0, r1
    btnm->btn_cnt        = 0;
 801b432:	630a      	str	r2, [r1, #48]	; 0x30
    btnm->one_check      = 0;
 801b434:	f891 2034 	ldrb.w	r2, [r1, #52]	; 0x34
    btnm->ctrl_bits      = NULL;
 801b438:	62cb      	str	r3, [r1, #44]	; 0x2c
    btnm->one_check      = 0;
 801b43a:	f363 0200 	bfi	r2, r3, #0, #1
    btnm->button_areas   = NULL;
 801b43e:	e9c1 3309 	strd	r3, r3, [r1, #36]	; 0x24
    btnm->one_check      = 0;
 801b442:	f881 2034 	strb.w	r2, [r1, #52]	; 0x34
    if(map == NULL) return;
 801b446:	4902      	ldr	r1, [pc, #8]	; (801b450 <lv_btnmatrix_constructor+0x24>)
 801b448:	f7ff beac 	b.w	801b1a4 <lv_btnmatrix_set_map.part.0>
 801b44c:	ffff0000 	.word	0xffff0000
 801b450:	20000054 	.word	0x20000054

0801b454 <lv_btnmatrix_create>:
{
 801b454:	4601      	mov	r1, r0
    lv_obj_t * obj = lv_obj_class_create_obj(MY_CLASS, parent);
 801b456:	4804      	ldr	r0, [pc, #16]	; (801b468 <lv_btnmatrix_create+0x14>)
{
 801b458:	b510      	push	{r4, lr}
    lv_obj_t * obj = lv_obj_class_create_obj(MY_CLASS, parent);
 801b45a:	f7e8 ffb3 	bl	80043c4 <lv_obj_class_create_obj>
 801b45e:	4604      	mov	r4, r0
    lv_obj_class_init_obj(obj);
 801b460:	f7e9 f83d 	bl	80044de <lv_obj_class_init_obj>
}
 801b464:	4620      	mov	r0, r4
 801b466:	bd10      	pop	{r4, pc}
 801b468:	08029458 	.word	0x08029458

0801b46c <lv_btnmatrix_set_map>:
    if(map == NULL) return;
 801b46c:	b109      	cbz	r1, 801b472 <lv_btnmatrix_set_map+0x6>
 801b46e:	f7ff be99 	b.w	801b1a4 <lv_btnmatrix_set_map.part.0>
}
 801b472:	4770      	bx	lr

0801b474 <lv_btnmatrix_set_ctrl_map>:
    lv_memcpy(btnm->ctrl_bits, ctrl_map, sizeof(lv_btnmatrix_ctrl_t) * btnm->btn_cnt);
 801b474:	8e02      	ldrh	r2, [r0, #48]	; 0x30
{
 801b476:	b510      	push	{r4, lr}
 801b478:	4604      	mov	r4, r0
    lv_memcpy(btnm->ctrl_bits, ctrl_map, sizeof(lv_btnmatrix_ctrl_t) * btnm->btn_cnt);
 801b47a:	0052      	lsls	r2, r2, #1
 801b47c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801b47e:	f7fc f993 	bl	80177a8 <lv_memcpy>
    lv_btnmatrix_set_map(obj, btnm->map_p);
 801b482:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801b484:	4620      	mov	r0, r4
}
 801b486:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_btnmatrix_set_map(obj, btnm->map_p);
 801b48a:	f7ff bfef 	b.w	801b46c <lv_btnmatrix_set_map>

0801b48e <lv_btnmatrix_clear_btn_ctrl>:
{
 801b48e:	b430      	push	{r4, r5}
    if(btn_id >= btnm->btn_cnt) return;
 801b490:	8e05      	ldrh	r5, [r0, #48]	; 0x30
 801b492:	428d      	cmp	r5, r1
 801b494:	d909      	bls.n	801b4aa <lv_btnmatrix_clear_btn_ctrl+0x1c>
    btnm->ctrl_bits[btn_id] &= (~ctrl);
 801b496:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 801b498:	f835 4011 	ldrh.w	r4, [r5, r1, lsl #1]
 801b49c:	ea24 0202 	bic.w	r2, r4, r2
 801b4a0:	f825 2011 	strh.w	r2, [r5, r1, lsl #1]
}
 801b4a4:	bc30      	pop	{r4, r5}
    invalidate_button_area(obj, btn_id);
 801b4a6:	f7ff bd65 	b.w	801af74 <invalidate_button_area>
}
 801b4aa:	bc30      	pop	{r4, r5}
 801b4ac:	4770      	bx	lr

0801b4ae <lv_btnmatrix_clear_btn_ctrl_all>:
{
 801b4ae:	b570      	push	{r4, r5, r6, lr}
 801b4b0:	4604      	mov	r4, r0
 801b4b2:	460e      	mov	r6, r1
    for(i = 0; i < btnm->btn_cnt; i++) {
 801b4b4:	2500      	movs	r5, #0
 801b4b6:	b2a9      	uxth	r1, r5
 801b4b8:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801b4ba:	428b      	cmp	r3, r1
 801b4bc:	d800      	bhi.n	801b4c0 <lv_btnmatrix_clear_btn_ctrl_all+0x12>
}
 801b4be:	bd70      	pop	{r4, r5, r6, pc}
        lv_btnmatrix_clear_btn_ctrl(obj, i, ctrl);
 801b4c0:	4632      	mov	r2, r6
 801b4c2:	4620      	mov	r0, r4
 801b4c4:	3501      	adds	r5, #1
 801b4c6:	f7ff ffe2 	bl	801b48e <lv_btnmatrix_clear_btn_ctrl>
    for(i = 0; i < btnm->btn_cnt; i++) {
 801b4ca:	e7f4      	b.n	801b4b6 <lv_btnmatrix_clear_btn_ctrl_all+0x8>

0801b4cc <lv_btnmatrix_set_btn_ctrl>:
    if(btn_id >= btnm->btn_cnt) return;
 801b4cc:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 801b4ce:	428b      	cmp	r3, r1
{
 801b4d0:	b570      	push	{r4, r5, r6, lr}
 801b4d2:	4604      	mov	r4, r0
 801b4d4:	460d      	mov	r5, r1
 801b4d6:	4616      	mov	r6, r2
    if(btn_id >= btnm->btn_cnt) return;
 801b4d8:	d914      	bls.n	801b504 <lv_btnmatrix_set_btn_ctrl+0x38>
    if(btnm->one_check && (ctrl & LV_BTNMATRIX_CTRL_CHECKED)) {
 801b4da:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 801b4de:	07da      	lsls	r2, r3, #31
 801b4e0:	d504      	bpl.n	801b4ec <lv_btnmatrix_set_btn_ctrl+0x20>
 801b4e2:	0633      	lsls	r3, r6, #24
 801b4e4:	d502      	bpl.n	801b4ec <lv_btnmatrix_set_btn_ctrl+0x20>
        lv_btnmatrix_clear_btn_ctrl_all(obj, LV_BTNMATRIX_CTRL_CHECKED);
 801b4e6:	2180      	movs	r1, #128	; 0x80
 801b4e8:	f7ff ffe1 	bl	801b4ae <lv_btnmatrix_clear_btn_ctrl_all>
    btnm->ctrl_bits[btn_id] |= ctrl;
 801b4ec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    invalidate_button_area(obj, btn_id);
 801b4ee:	4629      	mov	r1, r5
 801b4f0:	4620      	mov	r0, r4
    btnm->ctrl_bits[btn_id] |= ctrl;
 801b4f2:	f833 2015 	ldrh.w	r2, [r3, r5, lsl #1]
 801b4f6:	4316      	orrs	r6, r2
 801b4f8:	f823 6015 	strh.w	r6, [r3, r5, lsl #1]
}
 801b4fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    invalidate_button_area(obj, btn_id);
 801b500:	f7ff bd38 	b.w	801af74 <invalidate_button_area>
}
 801b504:	bd70      	pop	{r4, r5, r6, pc}

0801b506 <lv_btnmatrix_set_btn_ctrl_all>:
{
 801b506:	b570      	push	{r4, r5, r6, lr}
 801b508:	4604      	mov	r4, r0
 801b50a:	460e      	mov	r6, r1
    for(i = 0; i < btnm->btn_cnt; i++) {
 801b50c:	2500      	movs	r5, #0
 801b50e:	b2a9      	uxth	r1, r5
 801b510:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801b512:	428b      	cmp	r3, r1
 801b514:	d800      	bhi.n	801b518 <lv_btnmatrix_set_btn_ctrl_all+0x12>
}
 801b516:	bd70      	pop	{r4, r5, r6, pc}
        lv_btnmatrix_set_btn_ctrl(obj, i, ctrl);
 801b518:	4632      	mov	r2, r6
 801b51a:	4620      	mov	r0, r4
 801b51c:	3501      	adds	r5, #1
 801b51e:	f7ff ffd5 	bl	801b4cc <lv_btnmatrix_set_btn_ctrl>
    for(i = 0; i < btnm->btn_cnt; i++) {
 801b522:	e7f4      	b.n	801b50e <lv_btnmatrix_set_btn_ctrl_all+0x8>

0801b524 <lv_btnmatrix_get_selected_btn>:
}
 801b524:	8e40      	ldrh	r0, [r0, #50]	; 0x32
 801b526:	4770      	bx	lr

0801b528 <lv_btnmatrix_get_btn_text>:
    if(btn_id == LV_BTNMATRIX_BTN_NONE) return NULL;
 801b528:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b52c:	4299      	cmp	r1, r3
{
 801b52e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b532:	4605      	mov	r5, r0
 801b534:	460f      	mov	r7, r1
    if(btn_id == LV_BTNMATRIX_BTN_NONE) return NULL;
 801b536:	d020      	beq.n	801b57a <lv_btnmatrix_get_btn_text+0x52>
    if(btn_id > btnm->btn_cnt) return NULL;
 801b538:	f8b0 9030 	ldrh.w	r9, [r0, #48]	; 0x30
 801b53c:	4589      	cmp	r9, r1
 801b53e:	d31c      	bcc.n	801b57a <lv_btnmatrix_get_btn_text+0x52>
 801b540:	2600      	movs	r6, #0
        if(strcmp(btnm->map_p[txt_i], "\n") == 0) txt_i++;
 801b542:	f8df a03c 	ldr.w	sl, [pc, #60]	; 801b580 <lv_btnmatrix_get_btn_text+0x58>
    uint16_t txt_i = 0;
 801b546:	46b0      	mov	r8, r6
    while(btn_i != btn_id) {
 801b548:	42be      	cmp	r6, r7
 801b54a:	d106      	bne.n	801b55a <lv_btnmatrix_get_btn_text+0x32>
    if(btn_i == btnm->btn_cnt) return NULL;
 801b54c:	45b1      	cmp	r9, r6
 801b54e:	d014      	beq.n	801b57a <lv_btnmatrix_get_btn_text+0x52>
    return btnm->map_p[txt_i];
 801b550:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801b552:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
}
 801b556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        txt_i++;
 801b55a:	f108 0401 	add.w	r4, r8, #1
        if(strcmp(btnm->map_p[txt_i], "\n") == 0) txt_i++;
 801b55e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801b560:	4651      	mov	r1, sl
        txt_i++;
 801b562:	b2a4      	uxth	r4, r4
        if(strcmp(btnm->map_p[txt_i], "\n") == 0) txt_i++;
 801b564:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801b568:	f7e4 fea2 	bl	80002b0 <strcmp>
 801b56c:	b910      	cbnz	r0, 801b574 <lv_btnmatrix_get_btn_text+0x4c>
 801b56e:	f108 0402 	add.w	r4, r8, #2
 801b572:	b2a4      	uxth	r4, r4
 801b574:	3601      	adds	r6, #1
{
 801b576:	46a0      	mov	r8, r4
 801b578:	e7e6      	b.n	801b548 <lv_btnmatrix_get_btn_text+0x20>
    if(btn_id == LV_BTNMATRIX_BTN_NONE) return NULL;
 801b57a:	2000      	movs	r0, #0
 801b57c:	e7eb      	b.n	801b556 <lv_btnmatrix_get_btn_text+0x2e>
 801b57e:	bf00      	nop
 801b580:	0802964a 	.word	0x0802964a

0801b584 <lv_btnmatrix_has_btn_ctrl>:
    if(btn_id >= btnm->btn_cnt) return false;
 801b584:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 801b586:	428b      	cmp	r3, r1
 801b588:	d907      	bls.n	801b59a <lv_btnmatrix_has_btn_ctrl+0x16>
    return (btnm->ctrl_bits[btn_id] & ctrl) ? true : false;
 801b58a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 801b58c:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 801b590:	421a      	tst	r2, r3
 801b592:	bf14      	ite	ne
 801b594:	2001      	movne	r0, #1
 801b596:	2000      	moveq	r0, #0
 801b598:	4770      	bx	lr
    if(btn_id >= btnm->btn_cnt) return false;
 801b59a:	2000      	movs	r0, #0
}
 801b59c:	4770      	bx	lr

0801b59e <make_one_button_checked>:
 * It simply clears the toggle flag on other buttons.
 * @param obj Button matrix object
 * @param btn_idx Button that should remain toggled
 */
static void make_one_button_checked(lv_obj_t * obj, uint16_t btn_idx)
{
 801b59e:	b570      	push	{r4, r5, r6, lr}
    /*Save whether the button was toggled*/
    bool was_toggled = lv_btnmatrix_has_btn_ctrl(obj, btn_idx, LV_BTNMATRIX_CTRL_CHECKED);
 801b5a0:	2280      	movs	r2, #128	; 0x80
{
 801b5a2:	4604      	mov	r4, r0
 801b5a4:	460d      	mov	r5, r1
    bool was_toggled = lv_btnmatrix_has_btn_ctrl(obj, btn_idx, LV_BTNMATRIX_CTRL_CHECKED);
 801b5a6:	f7ff ffed 	bl	801b584 <lv_btnmatrix_has_btn_ctrl>
 801b5aa:	4606      	mov	r6, r0

    lv_btnmatrix_clear_btn_ctrl_all(obj, LV_BTNMATRIX_CTRL_CHECKED);
 801b5ac:	2180      	movs	r1, #128	; 0x80
 801b5ae:	4620      	mov	r0, r4
 801b5b0:	f7ff ff7d 	bl	801b4ae <lv_btnmatrix_clear_btn_ctrl_all>

    if(was_toggled) lv_btnmatrix_set_btn_ctrl(obj, btn_idx, LV_BTNMATRIX_CTRL_CHECKED);
 801b5b4:	b136      	cbz	r6, 801b5c4 <make_one_button_checked+0x26>
 801b5b6:	4629      	mov	r1, r5
 801b5b8:	4620      	mov	r0, r4
 801b5ba:	2280      	movs	r2, #128	; 0x80
}
 801b5bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    if(was_toggled) lv_btnmatrix_set_btn_ctrl(obj, btn_idx, LV_BTNMATRIX_CTRL_CHECKED);
 801b5c0:	f7ff bf84 	b.w	801b4cc <lv_btnmatrix_set_btn_ctrl>
}
 801b5c4:	bd70      	pop	{r4, r5, r6, pc}
	...

0801b5c8 <lv_btnmatrix_event>:
{
 801b5c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    res = lv_obj_event_base(MY_CLASS, e);
 801b5cc:	48b1      	ldr	r0, [pc, #708]	; (801b894 <lv_btnmatrix_event+0x2cc>)
{
 801b5ce:	460e      	mov	r6, r1
    res = lv_obj_event_base(MY_CLASS, e);
 801b5d0:	f7e6 fc02 	bl	8001dd8 <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 801b5d4:	2801      	cmp	r0, #1
 801b5d6:	d10c      	bne.n	801b5f2 <lv_btnmatrix_event+0x2a>
    lv_event_code_t code = lv_event_get_code(e);
 801b5d8:	4630      	mov	r0, r6
 801b5da:	f7e6 fc97 	bl	8001f0c <lv_event_get_code>
 801b5de:	4605      	mov	r5, r0
    lv_obj_t * obj = lv_event_get_target(e);
 801b5e0:	4630      	mov	r0, r6
 801b5e2:	f7e6 fc91 	bl	8001f08 <lv_event_get_target>
    if(code == LV_EVENT_STYLE_CHANGED) {
 801b5e6:	2d24      	cmp	r5, #36	; 0x24
    lv_obj_t * obj = lv_event_get_target(e);
 801b5e8:	4604      	mov	r4, r0
    if(code == LV_EVENT_STYLE_CHANGED) {
 801b5ea:	d105      	bne.n	801b5f8 <lv_btnmatrix_event+0x30>
        lv_btnmatrix_set_map(obj, btnm->map_p);
 801b5ec:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801b5ee:	f7ff ff3d 	bl	801b46c <lv_btnmatrix_set_map>
}
 801b5f2:	b003      	add	sp, #12
 801b5f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    else if(code == LV_EVENT_SIZE_CHANGED) {
 801b5f8:	2d23      	cmp	r5, #35	; 0x23
 801b5fa:	d0f7      	beq.n	801b5ec <lv_btnmatrix_event+0x24>
    else if(code == LV_EVENT_PRESSED) {
 801b5fc:	2d01      	cmp	r5, #1
 801b5fe:	d138      	bne.n	801b672 <lv_btnmatrix_event+0xaa>
        void * param = lv_event_get_param(e);
 801b600:	4630      	mov	r0, r6
 801b602:	f7e6 fc85 	bl	8001f10 <lv_event_get_param>
        invalidate_button_area(obj, btnm->btn_id_sel);
 801b606:	8e61      	ldrh	r1, [r4, #50]	; 0x32
        void * param = lv_event_get_param(e);
 801b608:	4605      	mov	r5, r0
        invalidate_button_area(obj, btnm->btn_id_sel);
 801b60a:	4620      	mov	r0, r4
 801b60c:	f7ff fcb2 	bl	801af74 <invalidate_button_area>
        lv_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
 801b610:	f7e6 fef0 	bl	80023f4 <lv_indev_get_act>
 801b614:	f7e6 fef4 	bl	8002400 <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_POINTER || indev_type == LV_INDEV_TYPE_BUTTON) {
 801b618:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
 801b61c:	2801      	cmp	r0, #1
 801b61e:	d117      	bne.n	801b650 <lv_btnmatrix_event+0x88>
            lv_indev_get_point(param, &p);
 801b620:	4669      	mov	r1, sp
 801b622:	4628      	mov	r0, r5
 801b624:	f7e6 ff47 	bl	80024b6 <lv_indev_get_point>
            btn_pr = get_button_from_point(obj, &p);
 801b628:	4669      	mov	r1, sp
 801b62a:	4620      	mov	r0, r4
 801b62c:	f7ff fcec 	bl	801b008 <get_button_from_point>
            if(btn_pr != LV_BTNMATRIX_BTN_NONE) {
 801b630:	f64f 73ff 	movw	r3, #65535	; 0xffff
            btn_pr = get_button_from_point(obj, &p);
 801b634:	4601      	mov	r1, r0
            if(btn_pr != LV_BTNMATRIX_BTN_NONE) {
 801b636:	4298      	cmp	r0, r3
 801b638:	d00a      	beq.n	801b650 <lv_btnmatrix_event+0x88>
                if(button_is_inactive(btnm->ctrl_bits[btn_pr]) == false &&
 801b63a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    return (ctrl_bits & LV_BTNMATRIX_CTRL_DISABLED) ? true : false;
 801b63c:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
                if(button_is_inactive(btnm->ctrl_bits[btn_pr]) == false &&
 801b640:	069d      	lsls	r5, r3, #26
 801b642:	d405      	bmi.n	801b650 <lv_btnmatrix_event+0x88>
 801b644:	0718      	lsls	r0, r3, #28
 801b646:	d403      	bmi.n	801b650 <lv_btnmatrix_event+0x88>
                    invalidate_button_area(obj, btnm->btn_id_sel); /*Invalidate the new area*/
 801b648:	4620      	mov	r0, r4
                    btnm->btn_id_sel = btn_pr;
 801b64a:	8661      	strh	r1, [r4, #50]	; 0x32
                    invalidate_button_area(obj, btnm->btn_id_sel); /*Invalidate the new area*/
 801b64c:	f7ff fc92 	bl	801af74 <invalidate_button_area>
        if(btnm->btn_id_sel != LV_BTNMATRIX_BTN_NONE) {
 801b650:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 801b652:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b656:	4293      	cmp	r3, r2
 801b658:	d0cb      	beq.n	801b5f2 <lv_btnmatrix_event+0x2a>
            if(button_is_click_trig(btnm->ctrl_bits[btnm->btn_id_sel]) == false &&
 801b65a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    return (ctrl_bits & LV_BTNMATRIX_CTRL_CLICK_TRIG) ? true : false;
 801b65c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
            if(button_is_click_trig(btnm->ctrl_bits[btnm->btn_id_sel]) == false &&
 801b660:	f412 7f80 	tst.w	r2, #256	; 0x100
            if(button_is_repeat_disabled(btnm->ctrl_bits[btnm->btn_id_sel]) == false &&
 801b664:	d1c5      	bne.n	801b5f2 <lv_btnmatrix_event+0x2a>
 801b666:	0691      	lsls	r1, r2, #26
 801b668:	d4c3      	bmi.n	801b5f2 <lv_btnmatrix_event+0x2a>
               button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel]) == false &&
 801b66a:	0712      	lsls	r2, r2, #28
 801b66c:	d4c1      	bmi.n	801b5f2 <lv_btnmatrix_event+0x2a>
                uint32_t b = btnm->btn_id_sel;
 801b66e:	9301      	str	r3, [sp, #4]
                res        = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, &b);
 801b670:	e03a      	b.n	801b6e8 <lv_btnmatrix_event+0x120>
    else if(code == LV_EVENT_PRESSING) {
 801b672:	2d02      	cmp	r5, #2
 801b674:	d13e      	bne.n	801b6f4 <lv_btnmatrix_event+0x12c>
        void * param = lv_event_get_param(e);
 801b676:	4630      	mov	r0, r6
 801b678:	f7e6 fc4a 	bl	8001f10 <lv_event_get_param>
 801b67c:	4606      	mov	r6, r0
        lv_indev_t * indev = lv_indev_get_act();
 801b67e:	f7e6 feb9 	bl	80023f4 <lv_indev_get_act>
 801b682:	4605      	mov	r5, r0
        lv_indev_type_t indev_type = lv_indev_get_type(indev);
 801b684:	f7e6 febc 	bl	8002400 <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_ENCODER || indev_type == LV_INDEV_TYPE_KEYPAD) return;
 801b688:	2804      	cmp	r0, #4
 801b68a:	d0b2      	beq.n	801b5f2 <lv_btnmatrix_event+0x2a>
 801b68c:	2802      	cmp	r0, #2
 801b68e:	d0b0      	beq.n	801b5f2 <lv_btnmatrix_event+0x2a>
        lv_indev_get_point(indev, &p);
 801b690:	4628      	mov	r0, r5
 801b692:	4669      	mov	r1, sp
 801b694:	f7e6 ff0f 	bl	80024b6 <lv_indev_get_point>
        btn_pr = get_button_from_point(obj, &p);
 801b698:	4669      	mov	r1, sp
 801b69a:	4620      	mov	r0, r4
 801b69c:	f7ff fcb4 	bl	801b008 <get_button_from_point>
        if(btn_pr != btnm->btn_id_sel) {
 801b6a0:	8e61      	ldrh	r1, [r4, #50]	; 0x32
        btn_pr = get_button_from_point(obj, &p);
 801b6a2:	4605      	mov	r5, r0
        if(btn_pr != btnm->btn_id_sel) {
 801b6a4:	4281      	cmp	r1, r0
 801b6a6:	d0a4      	beq.n	801b5f2 <lv_btnmatrix_event+0x2a>
            if(btnm->btn_id_sel != LV_BTNMATRIX_BTN_NONE) {
 801b6a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b6ac:	4299      	cmp	r1, r3
 801b6ae:	d002      	beq.n	801b6b6 <lv_btnmatrix_event+0xee>
                invalidate_button_area(obj, btnm->btn_id_sel);
 801b6b0:	4620      	mov	r0, r4
 801b6b2:	f7ff fc5f 	bl	801af74 <invalidate_button_area>
            lv_indev_reset_long_press(param); /*Start the log press time again on the new button*/
 801b6b6:	4630      	mov	r0, r6
            btnm->btn_id_sel = btn_pr;
 801b6b8:	8665      	strh	r5, [r4, #50]	; 0x32
            lv_indev_reset_long_press(param); /*Start the log press time again on the new button*/
 801b6ba:	f7e6 feef 	bl	800249c <lv_indev_reset_long_press>
            if(btn_pr != LV_BTNMATRIX_BTN_NONE &&
 801b6be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b6c2:	429d      	cmp	r5, r3
 801b6c4:	d095      	beq.n	801b5f2 <lv_btnmatrix_event+0x2a>
               button_is_inactive(btnm->ctrl_bits[btn_pr]) == false &&
 801b6c6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    return (ctrl_bits & LV_BTNMATRIX_CTRL_DISABLED) ? true : false;
 801b6c8:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
            if(btn_pr != LV_BTNMATRIX_BTN_NONE &&
 801b6cc:	0699      	lsls	r1, r3, #26
 801b6ce:	d490      	bmi.n	801b5f2 <lv_btnmatrix_event+0x2a>
               button_is_inactive(btnm->ctrl_bits[btn_pr]) == false &&
 801b6d0:	071a      	lsls	r2, r3, #28
 801b6d2:	d48e      	bmi.n	801b5f2 <lv_btnmatrix_event+0x2a>
                invalidate_button_area(obj, btn_pr);
 801b6d4:	4629      	mov	r1, r5
 801b6d6:	4620      	mov	r0, r4
 801b6d8:	f7ff fc4c 	bl	801af74 <invalidate_button_area>
                if(button_is_click_trig(btnm->ctrl_bits[btn_pr]) == false) {
 801b6dc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    return (ctrl_bits & LV_BTNMATRIX_CTRL_CLICK_TRIG) ? true : false;
 801b6de:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
                if(button_is_click_trig(btnm->ctrl_bits[btn_pr]) == false) {
 801b6e2:	05db      	lsls	r3, r3, #23
 801b6e4:	d485      	bmi.n	801b5f2 <lv_btnmatrix_event+0x2a>
                    uint32_t b = btn_pr;
 801b6e6:	9501      	str	r5, [sp, #4]
                    res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, &b);
 801b6e8:	aa01      	add	r2, sp, #4
 801b6ea:	211c      	movs	r1, #28
 801b6ec:	4620      	mov	r0, r4
 801b6ee:	f7e6 fbeb 	bl	8001ec8 <lv_event_send>
                    if(res != LV_RES_OK) return;
 801b6f2:	e77e      	b.n	801b5f2 <lv_btnmatrix_event+0x2a>
    else if(code == LV_EVENT_RELEASED) {
 801b6f4:	2d08      	cmp	r5, #8
 801b6f6:	d145      	bne.n	801b784 <lv_btnmatrix_event+0x1bc>
        if(btnm->btn_id_sel != LV_BTNMATRIX_BTN_NONE) {
 801b6f8:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 801b6fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b6fe:	429a      	cmp	r2, r3
 801b700:	d02c      	beq.n	801b75c <lv_btnmatrix_event+0x194>
            if(button_is_checkable(btnm->ctrl_bits[btnm->btn_id_sel]) &&
 801b702:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 801b704:	f831 3012 	ldrh.w	r3, [r1, r2, lsl #1]
 801b708:	065f      	lsls	r7, r3, #25
 801b70a:	d514      	bpl.n	801b736 <lv_btnmatrix_event+0x16e>
 801b70c:	069e      	lsls	r6, r3, #26
 801b70e:	d412      	bmi.n	801b736 <lv_btnmatrix_event+0x16e>
                if(button_get_checked(btnm->ctrl_bits[btnm->btn_id_sel]) && !btnm->one_check) {
 801b710:	061d      	lsls	r5, r3, #24
 801b712:	d534      	bpl.n	801b77e <lv_btnmatrix_event+0x1b6>
 801b714:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 801b718:	07c0      	lsls	r0, r0, #31
 801b71a:	d430      	bmi.n	801b77e <lv_btnmatrix_event+0x1b6>
                    btnm->ctrl_bits[btnm->btn_id_sel] &= (~LV_BTNMATRIX_CTRL_CHECKED);
 801b71c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801b720:	b29b      	uxth	r3, r3
 801b722:	f821 3012 	strh.w	r3, [r1, r2, lsl #1]
                if(btnm->one_check) make_one_button_checked(obj, btnm->btn_id_sel);
 801b726:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 801b72a:	07df      	lsls	r7, r3, #31
 801b72c:	d503      	bpl.n	801b736 <lv_btnmatrix_event+0x16e>
 801b72e:	8e61      	ldrh	r1, [r4, #50]	; 0x32
 801b730:	4620      	mov	r0, r4
 801b732:	f7ff ff34 	bl	801b59e <make_one_button_checked>
            if(button_is_click_trig(btnm->ctrl_bits[btnm->btn_id_sel]) == true &&
 801b736:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 801b738:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    return (ctrl_bits & LV_BTNMATRIX_CTRL_CLICK_TRIG) ? true : false;
 801b73a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
            if(button_is_click_trig(btnm->ctrl_bits[btnm->btn_id_sel]) == true &&
 801b73e:	05de      	lsls	r6, r3, #23
 801b740:	d50c      	bpl.n	801b75c <lv_btnmatrix_event+0x194>
 801b742:	069d      	lsls	r5, r3, #26
 801b744:	d40a      	bmi.n	801b75c <lv_btnmatrix_event+0x194>
               button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel]) == false &&
 801b746:	0718      	lsls	r0, r3, #28
 801b748:	d408      	bmi.n	801b75c <lv_btnmatrix_event+0x194>
                uint32_t b = btnm->btn_id_sel;
 801b74a:	9201      	str	r2, [sp, #4]
                res        = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, &b);
 801b74c:	211c      	movs	r1, #28
 801b74e:	aa01      	add	r2, sp, #4
 801b750:	4620      	mov	r0, r4
 801b752:	f7e6 fbb9 	bl	8001ec8 <lv_event_send>
                if(res != LV_RES_OK) return;
 801b756:	2801      	cmp	r0, #1
 801b758:	f47f af4b 	bne.w	801b5f2 <lv_btnmatrix_event+0x2a>
        invalidate_button_area(obj, btnm->btn_id_sel);
 801b75c:	8e61      	ldrh	r1, [r4, #50]	; 0x32
 801b75e:	4620      	mov	r0, r4
 801b760:	f7ff fc08 	bl	801af74 <invalidate_button_area>
        lv_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
 801b764:	f7e6 fe46 	bl	80023f4 <lv_indev_get_act>
 801b768:	f7e6 fe4a 	bl	8002400 <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_POINTER || indev_type == LV_INDEV_TYPE_BUTTON) {
 801b76c:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
 801b770:	2801      	cmp	r0, #1
 801b772:	f47f af3e 	bne.w	801b5f2 <lv_btnmatrix_event+0x2a>
        btnm->btn_id_sel = LV_BTNMATRIX_BTN_NONE;
 801b776:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b77a:	8663      	strh	r3, [r4, #50]	; 0x32
 801b77c:	e739      	b.n	801b5f2 <lv_btnmatrix_event+0x2a>
                    btnm->ctrl_bits[btnm->btn_id_sel] |= LV_BTNMATRIX_CTRL_CHECKED;
 801b77e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b782:	e7ce      	b.n	801b722 <lv_btnmatrix_event+0x15a>
    else if(code == LV_EVENT_LONG_PRESSED_REPEAT) {
 801b784:	2d06      	cmp	r5, #6
 801b786:	d10b      	bne.n	801b7a0 <lv_btnmatrix_event+0x1d8>
        if(btnm->btn_id_sel != LV_BTNMATRIX_BTN_NONE) {
 801b788:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 801b78a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b78e:	4293      	cmp	r3, r2
 801b790:	f43f af2f 	beq.w	801b5f2 <lv_btnmatrix_event+0x2a>
            if(button_is_repeat_disabled(btnm->ctrl_bits[btnm->btn_id_sel]) == false &&
 801b794:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    return (ctrl_bits & LV_BTNMATRIX_CTRL_NO_REPEAT) ? true : false;
 801b796:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
            if(button_is_repeat_disabled(btnm->ctrl_bits[btnm->btn_id_sel]) == false &&
 801b79a:	f012 0f10 	tst.w	r2, #16
 801b79e:	e761      	b.n	801b664 <lv_btnmatrix_event+0x9c>
    else if(code == LV_EVENT_PRESS_LOST) {
 801b7a0:	2d03      	cmp	r5, #3
 801b7a2:	d103      	bne.n	801b7ac <lv_btnmatrix_event+0x1e4>
        invalidate_button_area(obj, btnm->btn_id_sel);
 801b7a4:	8e41      	ldrh	r1, [r0, #50]	; 0x32
 801b7a6:	f7ff fbe5 	bl	801af74 <invalidate_button_area>
 801b7aa:	e7e4      	b.n	801b776 <lv_btnmatrix_event+0x1ae>
    else if(code == LV_EVENT_FOCUSED) {
 801b7ac:	2d0e      	cmp	r5, #14
 801b7ae:	d132      	bne.n	801b816 <lv_btnmatrix_event+0x24e>
        lv_indev_t * indev = lv_event_get_param(e);
 801b7b0:	4630      	mov	r0, r6
 801b7b2:	f7e6 fbad 	bl	8001f10 <lv_event_get_param>
 801b7b6:	4606      	mov	r6, r0
        lv_indev_type_t indev_type = lv_indev_get_type(indev);
 801b7b8:	f7e6 fe22 	bl	8002400 <lv_indev_get_type>
 801b7bc:	4605      	mov	r5, r0
        if(indev == NULL) {
 801b7be:	b92e      	cbnz	r6, 801b7cc <lv_btnmatrix_event+0x204>
            indev = lv_indev_get_next(NULL);
 801b7c0:	2000      	movs	r0, #0
 801b7c2:	f7fb f8ef 	bl	80169a4 <lv_indev_get_next>
            indev_type = lv_indev_get_type(indev);
 801b7c6:	f7e6 fe1b 	bl	8002400 <lv_indev_get_type>
 801b7ca:	4605      	mov	r5, r0
        bool editing = lv_group_get_editing(lv_obj_get_group(obj));
 801b7cc:	4620      	mov	r0, r4
 801b7ce:	f7e8 fb07 	bl	8003de0 <lv_obj_get_group>
 801b7d2:	f7e6 fd9b 	bl	800230c <lv_group_get_editing>
        if(indev_type == LV_INDEV_TYPE_KEYPAD|| (indev_type == LV_INDEV_TYPE_ENCODER&& editing)) {
 801b7d6:	2d02      	cmp	r5, #2
 801b7d8:	d003      	beq.n	801b7e2 <lv_btnmatrix_event+0x21a>
 801b7da:	2d04      	cmp	r5, #4
 801b7dc:	d1cb      	bne.n	801b776 <lv_btnmatrix_event+0x1ae>
 801b7de:	2800      	cmp	r0, #0
 801b7e0:	d0c9      	beq.n	801b776 <lv_btnmatrix_event+0x1ae>
            if(btnm->one_check) {
 801b7e2:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 801b7e6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801b7e8:	f013 0301 	ands.w	r3, r3, #1
 801b7ec:	d111      	bne.n	801b812 <lv_btnmatrix_event+0x24a>
    return (ctrl_bits & LV_BTNMATRIX_CTRL_HIDDEN) ? true : false;
 801b7ee:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
                while(button_is_hidden(btnm->ctrl_bits[b]) || button_is_inactive(btnm->ctrl_bits[b])) b++;
 801b7f2:	0710      	lsls	r0, r2, #28
 801b7f4:	d401      	bmi.n	801b7fa <lv_btnmatrix_event+0x232>
 801b7f6:	0697      	lsls	r7, r2, #26
 801b7f8:	d5bf      	bpl.n	801b77a <lv_btnmatrix_event+0x1b2>
 801b7fa:	3301      	adds	r3, #1
 801b7fc:	e7f7      	b.n	801b7ee <lv_btnmatrix_event+0x226>
                while(button_is_hidden(btnm->ctrl_bits[b]) || button_is_inactive(btnm->ctrl_bits[b]) || button_is_checked(btnm->ctrl_bits[b]) == false) b++;
 801b7fe:	3301      	adds	r3, #1
    return (ctrl_bits & LV_BTNMATRIX_CTRL_HIDDEN) ? true : false;
 801b800:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
                while(button_is_hidden(btnm->ctrl_bits[b]) || button_is_inactive(btnm->ctrl_bits[b]) || button_is_checked(btnm->ctrl_bits[b]) == false) b++;
 801b804:	0717      	lsls	r7, r2, #28
 801b806:	d4fa      	bmi.n	801b7fe <lv_btnmatrix_event+0x236>
 801b808:	0696      	lsls	r6, r2, #26
 801b80a:	d4f8      	bmi.n	801b7fe <lv_btnmatrix_event+0x236>
 801b80c:	0615      	lsls	r5, r2, #24
 801b80e:	d5f6      	bpl.n	801b7fe <lv_btnmatrix_event+0x236>
 801b810:	e7b3      	b.n	801b77a <lv_btnmatrix_event+0x1b2>
            uint32_t b = 0;
 801b812:	2300      	movs	r3, #0
 801b814:	e7f4      	b.n	801b800 <lv_btnmatrix_event+0x238>
    else if(code == LV_EVENT_DEFOCUSED || code == LV_EVENT_LEAVE) {
 801b816:	f1a5 030f 	sub.w	r3, r5, #15
 801b81a:	b2db      	uxtb	r3, r3
 801b81c:	2b01      	cmp	r3, #1
 801b81e:	d809      	bhi.n	801b834 <lv_btnmatrix_event+0x26c>
        if(btnm->btn_id_sel != LV_BTNMATRIX_BTN_NONE) invalidate_button_area(obj, btnm->btn_id_sel);
 801b820:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b824:	8e41      	ldrh	r1, [r0, #50]	; 0x32
 801b826:	4299      	cmp	r1, r3
 801b828:	461d      	mov	r5, r3
 801b82a:	d001      	beq.n	801b830 <lv_btnmatrix_event+0x268>
 801b82c:	f7ff fba2 	bl	801af74 <invalidate_button_area>
        btnm->btn_id_sel = LV_BTNMATRIX_BTN_NONE;
 801b830:	8665      	strh	r5, [r4, #50]	; 0x32
 801b832:	e6de      	b.n	801b5f2 <lv_btnmatrix_event+0x2a>
    else if(code == LV_EVENT_KEY) {
 801b834:	2d0d      	cmp	r5, #13
 801b836:	f040 80e3 	bne.w	801ba00 <lv_btnmatrix_event+0x438>
        invalidate_button_area(obj, btnm->btn_id_sel);
 801b83a:	8e41      	ldrh	r1, [r0, #50]	; 0x32
 801b83c:	f7ff fb9a 	bl	801af74 <invalidate_button_area>
        char c = *((char *)lv_event_get_param(e));
 801b840:	4630      	mov	r0, r6
 801b842:	f7e6 fb65 	bl	8001f10 <lv_event_get_param>
 801b846:	7803      	ldrb	r3, [r0, #0]
        if(c == LV_KEY_RIGHT) {
 801b848:	2b13      	cmp	r3, #19
 801b84a:	d125      	bne.n	801b898 <lv_btnmatrix_event+0x2d0>
            if(btnm->btn_id_sel == LV_BTNMATRIX_BTN_NONE)  btnm->btn_id_sel = 0;
 801b84c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 801b84e:	f64f 72ff 	movw	r2, #65535	; 0xffff
            if(btnm->btn_id_sel >= btnm->btn_cnt) btnm->btn_id_sel = 0;
 801b852:	8e21      	ldrh	r1, [r4, #48]	; 0x30
                if(btnm->btn_id_sel >= btnm->btn_cnt) btnm->btn_id_sel = 0;
 801b854:	2500      	movs	r5, #0
            if(btnm->btn_id_sel == LV_BTNMATRIX_BTN_NONE)  btnm->btn_id_sel = 0;
 801b856:	4293      	cmp	r3, r2
            while(button_is_hidden(btnm->ctrl_bits[btnm->btn_id_sel]) || button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel])) {
 801b858:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
            else btnm->btn_id_sel++;
 801b85a:	bf16      	itet	ne
 801b85c:	3301      	addne	r3, #1
            if(btnm->btn_id_sel == LV_BTNMATRIX_BTN_NONE)  btnm->btn_id_sel = 0;
 801b85e:	2300      	moveq	r3, #0
            else btnm->btn_id_sel++;
 801b860:	b29b      	uxthne	r3, r3
            if(btnm->btn_id_sel >= btnm->btn_cnt) btnm->btn_id_sel = 0;
 801b862:	4299      	cmp	r1, r3
 801b864:	8663      	strh	r3, [r4, #50]	; 0x32
 801b866:	bf9c      	itt	ls
 801b868:	2300      	movls	r3, #0
 801b86a:	8663      	strhls	r3, [r4, #50]	; 0x32
            while(button_is_hidden(btnm->ctrl_bits[btnm->btn_id_sel]) || button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel])) {
 801b86c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    return (ctrl_bits & LV_BTNMATRIX_CTRL_HIDDEN) ? true : false;
 801b86e:	f830 2013 	ldrh.w	r2, [r0, r3, lsl #1]
            while(button_is_hidden(btnm->ctrl_bits[btnm->btn_id_sel]) || button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel])) {
 801b872:	0716      	lsls	r6, r2, #28
 801b874:	d406      	bmi.n	801b884 <lv_btnmatrix_event+0x2bc>
 801b876:	0692      	lsls	r2, r2, #26
 801b878:	d404      	bmi.n	801b884 <lv_btnmatrix_event+0x2bc>
        invalidate_button_area(obj, btnm->btn_id_sel);
 801b87a:	8e61      	ldrh	r1, [r4, #50]	; 0x32
 801b87c:	4620      	mov	r0, r4
 801b87e:	f7ff fb79 	bl	801af74 <invalidate_button_area>
 801b882:	e6b6      	b.n	801b5f2 <lv_btnmatrix_event+0x2a>
                btnm->btn_id_sel++;
 801b884:	3301      	adds	r3, #1
 801b886:	b29b      	uxth	r3, r3
                if(btnm->btn_id_sel >= btnm->btn_cnt) btnm->btn_id_sel = 0;
 801b888:	4299      	cmp	r1, r3
                btnm->btn_id_sel++;
 801b88a:	8663      	strh	r3, [r4, #50]	; 0x32
                if(btnm->btn_id_sel >= btnm->btn_cnt) btnm->btn_id_sel = 0;
 801b88c:	bf98      	it	ls
 801b88e:	8665      	strhls	r5, [r4, #50]	; 0x32
 801b890:	e7ec      	b.n	801b86c <lv_btnmatrix_event+0x2a4>
 801b892:	bf00      	nop
 801b894:	08029458 	.word	0x08029458
        else if(c == LV_KEY_LEFT) {
 801b898:	2b14      	cmp	r3, #20
 801b89a:	d11b      	bne.n	801b8d4 <lv_btnmatrix_event+0x30c>
            if(btnm->btn_id_sel == LV_BTNMATRIX_BTN_NONE) btnm->btn_id_sel = 0;
 801b89c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b8a0:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 801b8a2:	429a      	cmp	r2, r3
 801b8a4:	bf04      	itt	eq
 801b8a6:	2300      	moveq	r3, #0
 801b8a8:	8663      	strheq	r3, [r4, #50]	; 0x32
            if(btnm->btn_id_sel == 0) btnm->btn_id_sel = btnm->btn_cnt - 1;
 801b8aa:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 801b8ac:	b903      	cbnz	r3, 801b8b0 <lv_btnmatrix_event+0x2e8>
 801b8ae:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801b8b0:	3b01      	subs	r3, #1
            while(button_is_hidden(btnm->ctrl_bits[btnm->btn_id_sel]) || button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel])) {
 801b8b2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
            if(btnm->btn_id_sel == 0) btnm->btn_id_sel = btnm->btn_cnt - 1;
 801b8b4:	b29b      	uxth	r3, r3
 801b8b6:	8663      	strh	r3, [r4, #50]	; 0x32
            while(button_is_hidden(btnm->ctrl_bits[btnm->btn_id_sel]) || button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel])) {
 801b8b8:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    return (ctrl_bits & LV_BTNMATRIX_CTRL_HIDDEN) ? true : false;
 801b8ba:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
            while(button_is_hidden(btnm->ctrl_bits[btnm->btn_id_sel]) || button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel])) {
 801b8be:	0717      	lsls	r7, r2, #28
 801b8c0:	d401      	bmi.n	801b8c6 <lv_btnmatrix_event+0x2fe>
 801b8c2:	0696      	lsls	r6, r2, #26
 801b8c4:	d5d9      	bpl.n	801b87a <lv_btnmatrix_event+0x2b2>
                if(btnm->btn_id_sel > 0) btnm->btn_id_sel--;
 801b8c6:	b11b      	cbz	r3, 801b8d0 <lv_btnmatrix_event+0x308>
                else btnm->btn_id_sel = btnm->btn_cnt - 1;
 801b8c8:	3b01      	subs	r3, #1
 801b8ca:	b29b      	uxth	r3, r3
 801b8cc:	8663      	strh	r3, [r4, #50]	; 0x32
 801b8ce:	e7f3      	b.n	801b8b8 <lv_btnmatrix_event+0x2f0>
 801b8d0:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801b8d2:	e7f9      	b.n	801b8c8 <lv_btnmatrix_event+0x300>
        else if(c == LV_KEY_DOWN) {
 801b8d4:	2b12      	cmp	r3, #18
 801b8d6:	d149      	bne.n	801b96c <lv_btnmatrix_event+0x3a4>
            lv_coord_t col_gap = lv_obj_get_style_pad_column(obj, LV_PART_MAIN);
 801b8d8:	4620      	mov	r0, r4
 801b8da:	f7ff f989 	bl	801abf0 <lv_obj_get_style_pad_column.constprop.0>
            if(btnm->btn_id_sel == LV_BTNMATRIX_BTN_NONE) {
 801b8de:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 801b8e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b8e4:	429a      	cmp	r2, r3
 801b8e6:	d112      	bne.n	801b90e <lv_btnmatrix_event+0x346>
                btnm->btn_id_sel = 0;
 801b8e8:	2300      	movs	r3, #0
                while(button_is_hidden(btnm->ctrl_bits[btnm->btn_id_sel]) || button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel])) {
 801b8ea:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
                    if(btnm->btn_id_sel >= btnm->btn_cnt) btnm->btn_id_sel = 0;
 801b8ec:	461a      	mov	r2, r3
                btnm->btn_id_sel = 0;
 801b8ee:	8663      	strh	r3, [r4, #50]	; 0x32
                while(button_is_hidden(btnm->ctrl_bits[btnm->btn_id_sel]) || button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel])) {
 801b8f0:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    return (ctrl_bits & LV_BTNMATRIX_CTRL_HIDDEN) ? true : false;
 801b8f2:	f830 1013 	ldrh.w	r1, [r0, r3, lsl #1]
                while(button_is_hidden(btnm->ctrl_bits[btnm->btn_id_sel]) || button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel])) {
 801b8f6:	070d      	lsls	r5, r1, #28
 801b8f8:	d401      	bmi.n	801b8fe <lv_btnmatrix_event+0x336>
 801b8fa:	0689      	lsls	r1, r1, #26
 801b8fc:	d5bd      	bpl.n	801b87a <lv_btnmatrix_event+0x2b2>
                    btnm->btn_id_sel++;
 801b8fe:	3301      	adds	r3, #1
                    if(btnm->btn_id_sel >= btnm->btn_cnt) btnm->btn_id_sel = 0;
 801b900:	8e21      	ldrh	r1, [r4, #48]	; 0x30
                    btnm->btn_id_sel++;
 801b902:	b29b      	uxth	r3, r3
                    if(btnm->btn_id_sel >= btnm->btn_cnt) btnm->btn_id_sel = 0;
 801b904:	4299      	cmp	r1, r3
                    btnm->btn_id_sel++;
 801b906:	8663      	strh	r3, [r4, #50]	; 0x32
                    if(btnm->btn_id_sel >= btnm->btn_cnt) btnm->btn_id_sel = 0;
 801b908:	bf98      	it	ls
 801b90a:	8662      	strhls	r2, [r4, #50]	; 0x32
 801b90c:	e7f0      	b.n	801b8f0 <lv_btnmatrix_event+0x328>
                    btnm->button_areas[btnm->btn_id_sel].x1 + (lv_area_get_width(&btnm->button_areas[btnm->btn_id_sel]) >> 1);
 801b90e:	6aa5      	ldr	r5, [r4, #40]	; 0x28
                for(area_below = btnm->btn_id_sel; area_below < btnm->btn_cnt; area_below++) {
 801b910:	f8b4 c030 	ldrh.w	ip, [r4, #48]	; 0x30
                    btnm->button_areas[btnm->btn_id_sel].x1 + (lv_area_get_width(&btnm->button_areas[btnm->btn_id_sel]) >> 1);
 801b914:	eb05 07c2 	add.w	r7, r5, r2, lsl #3
 801b918:	f835 1032 	ldrh.w	r1, [r5, r2, lsl #3]
                    if(btnm->button_areas[area_below].y1 > btnm->button_areas[btnm->btn_id_sel].y1 &&
 801b91c:	f105 0e02 	add.w	lr, r5, #2
                       pr_center <= btnm->button_areas[area_below].x2 + col_gap &&
 801b920:	f105 0804 	add.w	r8, r5, #4
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801b924:	88bb      	ldrh	r3, [r7, #4]
 801b926:	3301      	adds	r3, #1
 801b928:	1a5b      	subs	r3, r3, r1
                    btnm->button_areas[btnm->btn_id_sel].x1 + (lv_area_get_width(&btnm->button_areas[btnm->btn_id_sel]) >> 1);
 801b92a:	f343 034e 	sbfx	r3, r3, #1, #15
 801b92e:	440b      	add	r3, r1
 801b930:	0051      	lsls	r1, r2, #1
                lv_coord_t pr_center =
 801b932:	b21b      	sxth	r3, r3
                for(area_below = btnm->btn_id_sel; area_below < btnm->btn_cnt; area_below++) {
 801b934:	4594      	cmp	ip, r2
 801b936:	d9a0      	bls.n	801b87a <lv_btnmatrix_event+0x2b2>
                    if(btnm->button_areas[area_below].y1 > btnm->button_areas[btnm->btn_id_sel].y1 &&
 801b938:	f93e 9021 	ldrsh.w	r9, [lr, r1, lsl #2]
 801b93c:	f9b7 6002 	ldrsh.w	r6, [r7, #2]
 801b940:	45b1      	cmp	r9, r6
 801b942:	dd0f      	ble.n	801b964 <lv_btnmatrix_event+0x39c>
 801b944:	f935 6021 	ldrsh.w	r6, [r5, r1, lsl #2]
 801b948:	429e      	cmp	r6, r3
 801b94a:	dc0b      	bgt.n	801b964 <lv_btnmatrix_event+0x39c>
                       pr_center <= btnm->button_areas[area_below].x2 + col_gap &&
 801b94c:	f938 6021 	ldrsh.w	r6, [r8, r1, lsl #2]
 801b950:	4406      	add	r6, r0
                       pr_center >= btnm->button_areas[area_below].x1 &&
 801b952:	42b3      	cmp	r3, r6
 801b954:	dc06      	bgt.n	801b964 <lv_btnmatrix_event+0x39c>
                       button_is_inactive(btnm->ctrl_bits[area_below]) == false &&
 801b956:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    return (ctrl_bits & LV_BTNMATRIX_CTRL_DISABLED) ? true : false;
 801b958:	5a76      	ldrh	r6, [r6, r1]
                       pr_center <= btnm->button_areas[area_below].x2 + col_gap &&
 801b95a:	f016 0f20 	tst.w	r6, #32
 801b95e:	d101      	bne.n	801b964 <lv_btnmatrix_event+0x39c>
                       button_is_inactive(btnm->ctrl_bits[area_below]) == false &&
 801b960:	0736      	lsls	r6, r6, #28
 801b962:	d554      	bpl.n	801ba0e <lv_btnmatrix_event+0x446>
                for(area_below = btnm->btn_id_sel; area_below < btnm->btn_cnt; area_below++) {
 801b964:	3201      	adds	r2, #1
 801b966:	3102      	adds	r1, #2
 801b968:	b292      	uxth	r2, r2
 801b96a:	e7e3      	b.n	801b934 <lv_btnmatrix_event+0x36c>
        else if(c == LV_KEY_UP) {
 801b96c:	2b11      	cmp	r3, #17
 801b96e:	d184      	bne.n	801b87a <lv_btnmatrix_event+0x2b2>
            lv_coord_t col_gap = lv_obj_get_style_pad_column(obj, LV_PART_MAIN);
 801b970:	4620      	mov	r0, r4
 801b972:	f7ff f93d 	bl	801abf0 <lv_obj_get_style_pad_column.constprop.0>
            if(btnm->btn_id_sel == LV_BTNMATRIX_BTN_NONE) {
 801b976:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 801b978:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b97c:	4293      	cmp	r3, r2
 801b97e:	d113      	bne.n	801b9a8 <lv_btnmatrix_event+0x3e0>
                btnm->btn_id_sel = 0;
 801b980:	2300      	movs	r3, #0
                while(button_is_hidden(btnm->ctrl_bits[btnm->btn_id_sel]) || button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel])) {
 801b982:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
                    if(btnm->btn_id_sel >= btnm->btn_cnt) btnm->btn_id_sel = 0;
 801b984:	461a      	mov	r2, r3
                btnm->btn_id_sel = 0;
 801b986:	8663      	strh	r3, [r4, #50]	; 0x32
                while(button_is_hidden(btnm->ctrl_bits[btnm->btn_id_sel]) || button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel])) {
 801b988:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    return (ctrl_bits & LV_BTNMATRIX_CTRL_HIDDEN) ? true : false;
 801b98a:	f830 1013 	ldrh.w	r1, [r0, r3, lsl #1]
                while(button_is_hidden(btnm->ctrl_bits[btnm->btn_id_sel]) || button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel])) {
 801b98e:	070d      	lsls	r5, r1, #28
 801b990:	d402      	bmi.n	801b998 <lv_btnmatrix_event+0x3d0>
 801b992:	0689      	lsls	r1, r1, #26
 801b994:	f57f af71 	bpl.w	801b87a <lv_btnmatrix_event+0x2b2>
                    btnm->btn_id_sel++;
 801b998:	3301      	adds	r3, #1
                    if(btnm->btn_id_sel >= btnm->btn_cnt) btnm->btn_id_sel = 0;
 801b99a:	8e21      	ldrh	r1, [r4, #48]	; 0x30
                    btnm->btn_id_sel++;
 801b99c:	b29b      	uxth	r3, r3
                    if(btnm->btn_id_sel >= btnm->btn_cnt) btnm->btn_id_sel = 0;
 801b99e:	4299      	cmp	r1, r3
                    btnm->btn_id_sel++;
 801b9a0:	8663      	strh	r3, [r4, #50]	; 0x32
                    if(btnm->btn_id_sel >= btnm->btn_cnt) btnm->btn_id_sel = 0;
 801b9a2:	bf98      	it	ls
 801b9a4:	8662      	strhls	r2, [r4, #50]	; 0x32
 801b9a6:	e7ef      	b.n	801b988 <lv_btnmatrix_event+0x3c0>
                    btnm->button_areas[btnm->btn_id_sel].x1 + (lv_area_get_width(&btnm->button_areas[btnm->btn_id_sel]) >> 1);
 801b9a8:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 801b9aa:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
 801b9ae:	f835 1033 	ldrh.w	r1, [r5, r3, lsl #3]
                    if(btnm->button_areas[area_above].y1 < btnm->button_areas[btnm->btn_id_sel].y1 &&
 801b9b2:	1caf      	adds	r7, r5, #2
 801b9b4:	b21b      	sxth	r3, r3
 801b9b6:	88b2      	ldrh	r2, [r6, #4]
                       pr_center <= btnm->button_areas[area_above].x2 &&
 801b9b8:	f105 0c04 	add.w	ip, r5, #4
 801b9bc:	3201      	adds	r2, #1
 801b9be:	1a52      	subs	r2, r2, r1
                    btnm->button_areas[btnm->btn_id_sel].x1 + (lv_area_get_width(&btnm->button_areas[btnm->btn_id_sel]) >> 1);
 801b9c0:	f342 024e 	sbfx	r2, r2, #1, #15
 801b9c4:	440a      	add	r2, r1
                lv_coord_t pr_center =
 801b9c6:	b212      	sxth	r2, r2
                for(area_above = btnm->btn_id_sel; area_above >= 0; area_above--) {
 801b9c8:	0419      	lsls	r1, r3, #16
 801b9ca:	f53f af56 	bmi.w	801b87a <lv_btnmatrix_event+0x2b2>
                    if(btnm->button_areas[area_above].y1 < btnm->button_areas[btnm->btn_id_sel].y1 &&
 801b9ce:	f937 e033 	ldrsh.w	lr, [r7, r3, lsl #3]
 801b9d2:	f9b6 1002 	ldrsh.w	r1, [r6, #2]
 801b9d6:	458e      	cmp	lr, r1
 801b9d8:	da10      	bge.n	801b9fc <lv_btnmatrix_event+0x434>
                       pr_center >= btnm->button_areas[area_above].x1 - col_gap &&
 801b9da:	f935 1033 	ldrsh.w	r1, [r5, r3, lsl #3]
 801b9de:	1a09      	subs	r1, r1, r0
                    if(btnm->button_areas[area_above].y1 < btnm->button_areas[btnm->btn_id_sel].y1 &&
 801b9e0:	428a      	cmp	r2, r1
 801b9e2:	db0b      	blt.n	801b9fc <lv_btnmatrix_event+0x434>
                       pr_center >= btnm->button_areas[area_above].x1 - col_gap &&
 801b9e4:	f93c 1033 	ldrsh.w	r1, [ip, r3, lsl #3]
 801b9e8:	4291      	cmp	r1, r2
 801b9ea:	db07      	blt.n	801b9fc <lv_btnmatrix_event+0x434>
                       button_is_inactive(btnm->ctrl_bits[area_above]) == false &&
 801b9ec:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    return (ctrl_bits & LV_BTNMATRIX_CTRL_DISABLED) ? true : false;
 801b9ee:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
                       pr_center <= btnm->button_areas[area_above].x2 &&
 801b9f2:	f011 0f20 	tst.w	r1, #32
 801b9f6:	d101      	bne.n	801b9fc <lv_btnmatrix_event+0x434>
                       button_is_inactive(btnm->ctrl_bits[area_above]) == false &&
 801b9f8:	0709      	lsls	r1, r1, #28
 801b9fa:	d50a      	bpl.n	801ba12 <lv_btnmatrix_event+0x44a>
                for(area_above = btnm->btn_id_sel; area_above >= 0; area_above--) {
 801b9fc:	3b01      	subs	r3, #1
 801b9fe:	e7e3      	b.n	801b9c8 <lv_btnmatrix_event+0x400>
    } else if(code == LV_EVENT_DRAW_MAIN) {
 801ba00:	2d15      	cmp	r5, #21
 801ba02:	f47f adf6 	bne.w	801b5f2 <lv_btnmatrix_event+0x2a>
        draw_main(e);
 801ba06:	4630      	mov	r0, r6
 801ba08:	f7ff f8fa 	bl	801ac00 <draw_main>
 801ba0c:	e5f1      	b.n	801b5f2 <lv_btnmatrix_event+0x2a>
                if(area_below < btnm->btn_cnt) btnm->btn_id_sel = area_below;
 801ba0e:	8662      	strh	r2, [r4, #50]	; 0x32
 801ba10:	e733      	b.n	801b87a <lv_btnmatrix_event+0x2b2>
                if(area_above >= 0) btnm->btn_id_sel = area_above;
 801ba12:	8663      	strh	r3, [r4, #50]	; 0x32
 801ba14:	e731      	b.n	801b87a <lv_btnmatrix_event+0x2b2>
 801ba16:	bf00      	nop

0801ba18 <lv_btnmatrix_set_one_checked>:
    btnm->one_check     = en;
 801ba18:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
 801ba1c:	f361 0200 	bfi	r2, r1, #0, #1
    make_one_button_checked(obj, 0);
 801ba20:	2100      	movs	r1, #0
    btnm->one_check     = en;
 801ba22:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
    make_one_button_checked(obj, 0);
 801ba26:	f7ff bdba 	b.w	801b59e <make_one_button_checked>
	...

0801ba2c <lv_checkbox_constructor>:
    LV_UNUSED(class_p);
    LV_TRACE_OBJ_CREATE("begin");

    lv_checkbox_t * cb = (lv_checkbox_t *)obj;

    cb->txt = "Check box";
 801ba2c:	4b0c      	ldr	r3, [pc, #48]	; (801ba60 <lv_checkbox_constructor+0x34>)
{
 801ba2e:	b510      	push	{r4, lr}
    cb->txt = "Check box";
 801ba30:	624b      	str	r3, [r1, #36]	; 0x24
{
 801ba32:	460c      	mov	r4, r1
    cb->static_txt = 1;
 801ba34:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
    lv_obj_add_flag(obj, LV_OBJ_FLAG_CLICKABLE);
 801ba38:	4620      	mov	r0, r4
    cb->static_txt = 1;
 801ba3a:	f043 0301 	orr.w	r3, r3, #1
 801ba3e:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
    lv_obj_add_flag(obj, LV_OBJ_FLAG_CLICKABLE);
 801ba42:	2102      	movs	r1, #2
 801ba44:	f7e8 f960 	bl	8003d08 <lv_obj_add_flag>
    lv_obj_add_flag(obj, LV_OBJ_FLAG_CHECKABLE);
 801ba48:	4620      	mov	r0, r4
 801ba4a:	2108      	movs	r1, #8
 801ba4c:	f7e8 f95c 	bl	8003d08 <lv_obj_add_flag>
    lv_obj_add_flag(obj, LV_OBJ_FLAG_SCROLL_ON_FOCUS);
 801ba50:	4620      	mov	r0, r4
 801ba52:	f44f 7100 	mov.w	r1, #512	; 0x200

    LV_TRACE_OBJ_CREATE("finished");
}
 801ba56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_obj_add_flag(obj, LV_OBJ_FLAG_SCROLL_ON_FOCUS);
 801ba5a:	f7e8 b955 	b.w	8003d08 <lv_obj_add_flag>
 801ba5e:	bf00      	nop
 801ba60:	08029474 	.word	0x08029474

0801ba64 <lv_checkbox_destructor>:

static void lv_checkbox_destructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 801ba64:	b538      	push	{r3, r4, r5, lr}
    LV_UNUSED(class_p);
    LV_TRACE_OBJ_CREATE("begin");

    lv_checkbox_t * cb = (lv_checkbox_t *)obj;
    if(!cb->static_txt) {
 801ba66:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
{
 801ba6a:	460c      	mov	r4, r1
    if(!cb->static_txt) {
 801ba6c:	f013 0501 	ands.w	r5, r3, #1
 801ba70:	d103      	bne.n	801ba7a <lv_checkbox_destructor+0x16>
        lv_mem_free(cb->txt);
 801ba72:	6a48      	ldr	r0, [r1, #36]	; 0x24
 801ba74:	f7fb fe5e 	bl	8017734 <lv_mem_free>
        cb->txt = NULL;
 801ba78:	6265      	str	r5, [r4, #36]	; 0x24
    }
    LV_TRACE_OBJ_CREATE("finished");
}
 801ba7a:	bd38      	pop	{r3, r4, r5, pc}

0801ba7c <lv_checkbox_event>:

static void lv_checkbox_event(const lv_obj_class_t * class_p, lv_event_t * e)
{
 801ba7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    LV_UNUSED(class_p);

    lv_res_t res;
    /*Call the ancestor's event handler*/
    res = lv_obj_event_base(MY_CLASS, e);
 801ba80:	48c1      	ldr	r0, [pc, #772]	; (801bd88 <lv_checkbox_event+0x30c>)
{
 801ba82:	b0b7      	sub	sp, #220	; 0xdc
 801ba84:	460d      	mov	r5, r1
    res = lv_obj_event_base(MY_CLASS, e);
 801ba86:	f7e6 f9a7 	bl	8001dd8 <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 801ba8a:	2801      	cmp	r0, #1
 801ba8c:	d10e      	bne.n	801baac <lv_checkbox_event+0x30>

    lv_event_code_t code = lv_event_get_code(e);
 801ba8e:	4628      	mov	r0, r5
 801ba90:	f7e6 fa3c 	bl	8001f0c <lv_event_get_code>
 801ba94:	4606      	mov	r6, r0
    lv_obj_t * obj = lv_event_get_target(e);
 801ba96:	4628      	mov	r0, r5
 801ba98:	f7e6 fa36 	bl	8001f08 <lv_event_get_target>

    if (code == LV_EVENT_PRESSED || code == LV_EVENT_RELEASED) {
 801ba9c:	2e01      	cmp	r6, #1
    lv_obj_t * obj = lv_event_get_target(e);
 801ba9e:	4604      	mov	r4, r0
    if (code == LV_EVENT_PRESSED || code == LV_EVENT_RELEASED) {
 801baa0:	d001      	beq.n	801baa6 <lv_checkbox_event+0x2a>
 801baa2:	2e08      	cmp	r6, #8
 801baa4:	d105      	bne.n	801bab2 <lv_checkbox_event+0x36>
       lv_obj_invalidate(obj);
 801baa6:	4620      	mov	r0, r4
 801baa8:	f7e9 fb36 	bl	8005118 <lv_obj_invalidate>

        lv_obj_invalidate(obj);
    } else if(code == LV_EVENT_DRAW_MAIN) {
        lv_checkbox_draw(e);
    }
}
 801baac:	b037      	add	sp, #220	; 0xdc
 801baae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if (code == LV_EVENT_GET_SELF_SIZE) {
 801bab2:	2e26      	cmp	r6, #38	; 0x26
 801bab4:	d164      	bne.n	801bb80 <lv_checkbox_event+0x104>
        lv_point_t * p = lv_event_get_param(e);
 801bab6:	4628      	mov	r0, r5
        lv_txt_get_size(&txt_size, cb->txt, font, letter_space, line_space, LV_COORD_MAX, LV_TEXT_FLAG_NONE);
 801bab8:	f04f 0900 	mov.w	r9, #0
        lv_point_t * p = lv_event_get_param(e);
 801babc:	f7e6 fa28 	bl	8001f10 <lv_event_get_param>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 801bac0:	f241 4259 	movw	r2, #5209	; 0x1459
 801bac4:	4606      	mov	r6, r0
 801bac6:	2100      	movs	r1, #0
 801bac8:	4620      	mov	r0, r4
 801baca:	f7eb fc4d 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 801bace:	f241 425b 	movw	r2, #5211	; 0x145b
        lv_coord_t font_h = lv_font_get_line_height(font);
 801bad2:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 801bad6:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 801bad8:	2100      	movs	r1, #0
 801bada:	4620      	mov	r0, r4
 801badc:	f7eb fc44 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 801bae0:	f241 425a 	movw	r2, #5210	; 0x145a
    return (lv_coord_t)v.num;
 801bae4:	fa0f f880 	sxth.w	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 801bae8:	2100      	movs	r1, #0
 801baea:	4620      	mov	r0, r4
 801baec:	f7eb fc3c 	bl	8007368 <lv_obj_get_style_prop>
        lv_txt_get_size(&txt_size, cb->txt, font, letter_space, line_space, LV_COORD_MAX, LV_TEXT_FLAG_NONE);
 801baf0:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 801baf4:	462a      	mov	r2, r5
 801baf6:	f8cd 8000 	str.w	r8, [sp]
 801bafa:	e9cd 3901 	strd	r3, r9, [sp, #4]
 801bafe:	b203      	sxth	r3, r0
 801bb00:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801bb02:	a824      	add	r0, sp, #144	; 0x90
 801bb04:	f7fd fd27 	bl	8019556 <lv_txt_get_size>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 801bb08:	4649      	mov	r1, r9
 801bb0a:	f241 0215 	movw	r2, #4117	; 0x1015
 801bb0e:	4620      	mov	r0, r4
 801bb10:	f7eb fc2a 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801bb14:	f241 0212 	movw	r2, #4114	; 0x1012
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 801bb18:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801bb1a:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 801bb1e:	4620      	mov	r0, r4
 801bb20:	f7eb fc22 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801bb24:	f241 0213 	movw	r2, #4115	; 0x1013
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801bb28:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801bb2a:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 801bb2e:	4620      	mov	r0, r4
 801bb30:	f7eb fc1a 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801bb34:	f241 0210 	movw	r2, #4112	; 0x1010
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801bb38:	4682      	mov	sl, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801bb3a:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 801bb3e:	4620      	mov	r0, r4
 801bb40:	f7eb fc12 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801bb44:	f241 0211 	movw	r2, #4113	; 0x1011
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801bb48:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801bb4a:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 801bb4e:	4620      	mov	r0, r4
 801bb50:	f7eb fc0a 	bl	8007368 <lv_obj_get_style_prop>
        p->x = marker_size.x + txt_size.x + bg_colp;
 801bb54:	eb05 030a 	add.w	r3, r5, sl
 801bb58:	f8bd 5090 	ldrh.w	r5, [sp, #144]	; 0x90
 801bb5c:	442b      	add	r3, r5
 801bb5e:	eb03 0509 	add.w	r5, r3, r9
        marker_size.y = font_h + marker_topp + marker_bottomp;
 801bb62:	eb08 0300 	add.w	r3, r8, r0
        p->y = LV_MAX(marker_size.y, txt_size.y);
 801bb66:	f9bd 0092 	ldrsh.w	r0, [sp, #146]	; 0x92
        marker_size.y = font_h + marker_topp + marker_bottomp;
 801bb6a:	fa13 f387 	uxtah	r3, r3, r7
        p->x = marker_size.x + txt_size.x + bg_colp;
 801bb6e:	fa15 f587 	uxtah	r5, r5, r7
        p->y = LV_MAX(marker_size.y, txt_size.y);
 801bb72:	b21b      	sxth	r3, r3
        p->x = marker_size.x + txt_size.x + bg_colp;
 801bb74:	8035      	strh	r5, [r6, #0]
        p->y = LV_MAX(marker_size.y, txt_size.y);
 801bb76:	4283      	cmp	r3, r0
 801bb78:	bfb8      	it	lt
 801bb7a:	4603      	movlt	r3, r0
 801bb7c:	8073      	strh	r3, [r6, #2]
 801bb7e:	e795      	b.n	801baac <lv_checkbox_event+0x30>
    else if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 801bb80:	2e13      	cmp	r6, #19
 801bb82:	d10f      	bne.n	801bba4 <lv_checkbox_event+0x128>
        lv_coord_t *s = lv_event_get_param(e);
 801bb84:	4628      	mov	r0, r5
 801bb86:	f7e6 f9c3 	bl	8001f10 <lv_event_get_param>
 801bb8a:	4605      	mov	r5, r0
        lv_coord_t m = lv_obj_calculate_ext_draw_size(obj, LV_PART_INDICATOR);
 801bb8c:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 801bb90:	4620      	mov	r0, r4
 801bb92:	f7e8 ff58 	bl	8004a46 <lv_obj_calculate_ext_draw_size>
        *s = LV_MAX(*s, m);
 801bb96:	f9b5 3000 	ldrsh.w	r3, [r5]
 801bb9a:	4298      	cmp	r0, r3
 801bb9c:	bfb8      	it	lt
 801bb9e:	4618      	movlt	r0, r3
 801bba0:	8028      	strh	r0, [r5, #0]
 801bba2:	e783      	b.n	801baac <lv_checkbox_event+0x30>
    } else if(code == LV_EVENT_DRAW_MAIN) {
 801bba4:	2e15      	cmp	r6, #21
 801bba6:	d181      	bne.n	801baac <lv_checkbox_event+0x30>

static void lv_checkbox_draw(lv_event_t * e)
{
    lv_obj_t * obj = lv_event_get_target(e);
 801bba8:	4628      	mov	r0, r5
 801bbaa:	f7e6 f9ad 	bl	8001f08 <lv_event_get_target>
 801bbae:	4604      	mov	r4, r0
    lv_checkbox_t * cb = (lv_checkbox_t *)obj;

    const lv_area_t * clip_area = lv_event_get_param(e);
 801bbb0:	4628      	mov	r0, r5

    lv_coord_t transf_w = lv_obj_get_style_transform_width(obj, LV_PART_INDICATOR);
    lv_coord_t transf_h = lv_obj_get_style_transform_height(obj, LV_PART_INDICATOR);

    lv_draw_rect_dsc_t indic_dsc;
    lv_draw_rect_dsc_init(&indic_dsc);
 801bbb2:	ad17      	add	r5, sp, #92	; 0x5c
    const lv_area_t * clip_area = lv_event_get_param(e);
 801bbb4:	f7e6 f9ac 	bl	8001f10 <lv_event_get_param>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 801bbb8:	f241 4259 	movw	r2, #5209	; 0x1459
 801bbbc:	4681      	mov	r9, r0
 801bbbe:	2100      	movs	r1, #0
 801bbc0:	4620      	mov	r0, r4
 801bbc2:	f7eb fbd1 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801bbc6:	f241 0210 	movw	r2, #4112	; 0x1010
    lv_coord_t font_h = lv_font_get_line_height(font);
 801bbca:	f9b0 b008 	ldrsh.w	fp, [r0, #8]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 801bbce:	4682      	mov	sl, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801bbd0:	2100      	movs	r1, #0
 801bbd2:	4620      	mov	r0, r4
 801bbd4:	f7eb fbc8 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801bbd8:	f241 0212 	movw	r2, #4114	; 0x1012
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801bbdc:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801bbde:	2100      	movs	r1, #0
 801bbe0:	4620      	mov	r0, r4
 801bbe2:	f7eb fbc1 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 801bbe6:	f241 0215 	movw	r2, #4117	; 0x1015
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801bbea:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 801bbec:	2100      	movs	r1, #0
 801bbee:	4620      	mov	r0, r4
 801bbf0:	f7eb fbba 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801bbf4:	f241 0212 	movw	r2, #4114	; 0x1012
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 801bbf8:	9005      	str	r0, [sp, #20]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801bbfa:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 801bbfe:	4620      	mov	r0, r4
 801bc00:	f7eb fbb2 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801bc04:	f241 0213 	movw	r2, #4115	; 0x1013
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801bc08:	9009      	str	r0, [sp, #36]	; 0x24
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801bc0a:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 801bc0e:	4620      	mov	r0, r4
 801bc10:	f7eb fbaa 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801bc14:	f241 0210 	movw	r2, #4112	; 0x1010
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801bc18:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801bc1a:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 801bc1e:	4620      	mov	r0, r4
 801bc20:	f7eb fba2 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801bc24:	f241 0211 	movw	r2, #4113	; 0x1011
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801bc28:	9004      	str	r0, [sp, #16]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801bc2a:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 801bc2e:	4620      	mov	r0, r4
 801bc30:	f7eb fb9a 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 801bc34:	f640 020a 	movw	r2, #2058	; 0x80a
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801bc38:	9006      	str	r0, [sp, #24]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 801bc3a:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 801bc3e:	4620      	mov	r0, r4
 801bc40:	f7eb fb92 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 801bc44:	f640 020b 	movw	r2, #2059	; 0x80b
 801bc48:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 801bc4c:	9007      	str	r0, [sp, #28]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 801bc4e:	4620      	mov	r0, r4
 801bc50:	f7eb fb8a 	bl	8007368 <lv_obj_get_style_prop>
 801bc54:	9008      	str	r0, [sp, #32]
    lv_draw_rect_dsc_init(&indic_dsc);
 801bc56:	4628      	mov	r0, r5
 801bc58:	f7f0 ff16 	bl	800ca88 <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(obj, LV_PART_INDICATOR, &indic_dsc);
 801bc5c:	462a      	mov	r2, r5
 801bc5e:	4620      	mov	r0, r4
 801bc60:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 801bc64:	f7e8 fc7c 	bl	8004560 <lv_obj_init_draw_rect_dsc>
    lv_area_t marker_area;
    marker_area.x1 = obj->coords.x1 + bg_leftp;
    marker_area.x2 = marker_area.x1 + font_h + marker_leftp + marker_rightp - 1;
 801bc68:	9b09      	ldr	r3, [sp, #36]	; 0x24
    marker_area.y1 = obj->coords.y1 + bg_topp;
 801bc6a:	8ae0      	ldrh	r0, [r4, #22]
    marker_area.x2 = marker_area.x1 + font_h + marker_leftp + marker_rightp - 1;
 801bc6c:	19da      	adds	r2, r3, r7
    marker_area.x1 = obj->coords.x1 + bg_leftp;
 801bc6e:	f8b4 c014 	ldrh.w	ip, [r4, #20]
 801bc72:	9b04      	ldr	r3, [sp, #16]
    marker_area.y1 = obj->coords.y1 + bg_topp;
 801bc74:	b2b7      	uxth	r7, r6
    marker_area.x2 = marker_area.x1 + font_h + marker_leftp + marker_rightp - 1;
 801bc76:	3a01      	subs	r2, #1
    marker_area.y1 = obj->coords.y1 + bg_topp;
 801bc78:	fa10 f686 	uxtah	r6, r0, r6
 801bc7c:	9806      	ldr	r0, [sp, #24]
    marker_area.x1 = obj->coords.x1 + bg_leftp;
 801bc7e:	44c4      	add	ip, r8
    marker_area.x2 = marker_area.x1 + font_h + marker_leftp + marker_rightp - 1;
 801bc80:	fa12 f28b 	uxtah	r2, r2, fp
    marker_area.y1 = obj->coords.y1 + bg_topp;
 801bc84:	b2b6      	uxth	r6, r6
 801bc86:	4403      	add	r3, r0
    marker_area.y2 = marker_area.y1 + font_h + marker_topp + marker_bottomp - 1;

    lv_area_t marker_area_transf;
    lv_area_copy(&marker_area_transf, &marker_area);
    marker_area_transf.x1 -= transf_w;
 801bc88:	f8bd 001c 	ldrh.w	r0, [sp, #28]
    marker_area.x2 = marker_area.x1 + font_h + marker_leftp + marker_rightp - 1;
 801bc8c:	fa12 f28c 	uxtah	r2, r2, ip
 801bc90:	1e59      	subs	r1, r3, #1
    marker_area_transf.x1 -= transf_w;
 801bc92:	ebac 0c00 	sub.w	ip, ip, r0
    marker_area.x2 = marker_area.x1 + font_h + marker_leftp + marker_rightp - 1;
 801bc96:	fa1f f882 	uxth.w	r8, r2
    marker_area_transf.x2 += transf_w;
 801bc9a:	fa10 f282 	uxtah	r2, r0, r2
 801bc9e:	fa11 f18b 	uxtah	r1, r1, fp
    marker_area_transf.y1 -= transf_h;
 801bca2:	f8bd 0020 	ldrh.w	r0, [sp, #32]
    marker_area_transf.x2 += transf_w;
 801bca6:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 801bcaa:	b28b      	uxth	r3, r1
    marker_area_transf.y2 += transf_h;
 801bcac:	fa10 f181 	uxtah	r1, r0, r1
    marker_area_transf.y1 -= transf_h;
 801bcb0:	1a32      	subs	r2, r6, r0

    lv_obj_draw_part_dsc_t obj_draw_dsc;
    lv_obj_draw_dsc_init(&obj_draw_dsc, clip_area);
 801bcb2:	a824      	add	r0, sp, #144	; 0x90
    marker_area_transf.y2 += transf_h;
 801bcb4:	440e      	add	r6, r1
    lv_obj_draw_dsc_init(&obj_draw_dsc, clip_area);
 801bcb6:	4649      	mov	r1, r9
    marker_area_transf.x1 -= transf_w;
 801bcb8:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 801bcbc:	9304      	str	r3, [sp, #16]
    marker_area_transf.y1 -= transf_h;
 801bcbe:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
    marker_area_transf.y2 += transf_h;
 801bcc2:	f8ad 6032 	strh.w	r6, [sp, #50]	; 0x32
    lv_obj_draw_dsc_init(&obj_draw_dsc, clip_area);
 801bcc6:	f7e8 ff2f 	bl	8004b28 <lv_obj_draw_dsc_init>
    obj_draw_dsc.rect_dsc = &indic_dsc;
    obj_draw_dsc.draw_area = &marker_area_transf;
    obj_draw_dsc.part = LV_PART_INDICATOR;
 801bcca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    obj_draw_dsc.draw_area = &marker_area_transf;
 801bcce:	ae0b      	add	r6, sp, #44	; 0x2c

    lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &obj_draw_dsc);
 801bcd0:	211a      	movs	r1, #26
 801bcd2:	4620      	mov	r0, r4
    obj_draw_dsc.part = LV_PART_INDICATOR;
 801bcd4:	9231      	str	r2, [sp, #196]	; 0xc4
    lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &obj_draw_dsc);
 801bcd6:	aa24      	add	r2, sp, #144	; 0x90
    obj_draw_dsc.rect_dsc = &indic_dsc;
 801bcd8:	9526      	str	r5, [sp, #152]	; 0x98
    obj_draw_dsc.draw_area = &marker_area_transf;
 801bcda:	9625      	str	r6, [sp, #148]	; 0x94
    lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &obj_draw_dsc);
 801bcdc:	f7e6 f8f4 	bl	8001ec8 <lv_event_send>
    lv_draw_rect(&marker_area_transf, clip_area, &indic_dsc);
 801bce0:	462a      	mov	r2, r5
 801bce2:	4649      	mov	r1, r9
 801bce4:	4630      	mov	r0, r6

    lv_coord_t line_space = lv_obj_get_style_text_line_space(obj, LV_PART_MAIN);
    lv_coord_t letter_space = lv_obj_get_style_text_letter_space(obj, LV_PART_MAIN);

    lv_point_t txt_size;
    lv_txt_get_size(&txt_size, cb->txt, font, letter_space, line_space, LV_COORD_MAX, LV_TEXT_FLAG_NONE);
 801bce6:	2600      	movs	r6, #0
    lv_draw_rect(&marker_area_transf, clip_area, &indic_dsc);
 801bce8:	f7f0 fef0 	bl	800cacc <lv_draw_rect>
    lv_event_send(obj, LV_EVENT_DRAW_PART_END, &obj_draw_dsc);
 801bcec:	aa24      	add	r2, sp, #144	; 0x90
 801bcee:	211b      	movs	r1, #27
 801bcf0:	4620      	mov	r0, r4
 801bcf2:	f7e6 f8e9 	bl	8001ec8 <lv_event_send>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 801bcf6:	f241 425b 	movw	r2, #5211	; 0x145b
 801bcfa:	2100      	movs	r1, #0
 801bcfc:	4620      	mov	r0, r4
 801bcfe:	f7eb fb33 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 801bd02:	f241 425a 	movw	r2, #5210	; 0x145a
    return (lv_coord_t)v.num;
 801bd06:	b203      	sxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 801bd08:	2100      	movs	r1, #0
 801bd0a:	4620      	mov	r0, r4
    return (lv_coord_t)v.num;
 801bd0c:	461d      	mov	r5, r3
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 801bd0e:	f7eb fb2b 	bl	8007368 <lv_obj_get_style_prop>
    lv_txt_get_size(&txt_size, cb->txt, font, letter_space, line_space, LV_COORD_MAX, LV_TEXT_FLAG_NONE);
 801bd12:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 801bd16:	4652      	mov	r2, sl
 801bd18:	9500      	str	r5, [sp, #0]
 801bd1a:	e9cd 3601 	strd	r3, r6, [sp, #4]
 801bd1e:	b203      	sxth	r3, r0
 801bd20:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801bd22:	a80a      	add	r0, sp, #40	; 0x28
 801bd24:	f7fd fc17 	bl	8019556 <lv_txt_get_size>

    lv_draw_label_dsc_t txt_dsc;
    lv_draw_label_dsc_init(&txt_dsc);
 801bd28:	a80f      	add	r0, sp, #60	; 0x3c
 801bd2a:	f7ee fbf9 	bl	800a520 <lv_draw_label_dsc_init>
    lv_obj_init_draw_label_dsc(obj, LV_PART_MAIN, &txt_dsc);
 801bd2e:	aa0f      	add	r2, sp, #60	; 0x3c
 801bd30:	4631      	mov	r1, r6
 801bd32:	4620      	mov	r0, r4
 801bd34:	f7e8 fd50 	bl	80047d8 <lv_obj_init_draw_label_dsc>

    lv_coord_t y_ofs = (lv_area_get_height(&marker_area) - font_h) / 2;
    lv_area_t txt_area;
    txt_area.x1 = marker_area.x2 + bg_colp;
 801bd38:	9b05      	ldr	r3, [sp, #20]
    txt_area.x2 = txt_area.x1 + txt_size.x;
    txt_area.y1 = obj->coords.y1 + bg_topp + y_ofs;
    txt_area.y2 = txt_area.y1 + txt_size.y;

    lv_draw_label(&txt_area, clip_area, &txt_dsc, cb->txt, NULL);
 801bd3a:	aa0f      	add	r2, sp, #60	; 0x3c
 801bd3c:	4649      	mov	r1, r9
    txt_area.x1 = marker_area.x2 + bg_colp;
 801bd3e:	4498      	add	r8, r3
    txt_area.x2 = txt_area.x1 + txt_size.x;
 801bd40:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    lv_draw_label(&txt_area, clip_area, &txt_dsc, cb->txt, NULL);
 801bd44:	a80d      	add	r0, sp, #52	; 0x34
    txt_area.x1 = marker_area.x2 + bg_colp;
 801bd46:	fa1f f888 	uxth.w	r8, r8
 801bd4a:	f8ad 8034 	strh.w	r8, [sp, #52]	; 0x34
    txt_area.x2 = txt_area.x1 + txt_size.x;
 801bd4e:	4498      	add	r8, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801bd50:	9b04      	ldr	r3, [sp, #16]
 801bd52:	f8ad 8038 	strh.w	r8, [sp, #56]	; 0x38
 801bd56:	1c5d      	adds	r5, r3, #1
    txt_area.y2 = txt_area.y1 + txt_size.y;
 801bd58:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
    lv_coord_t y_ofs = (lv_area_get_height(&marker_area) - font_h) / 2;
 801bd5c:	b22d      	sxth	r5, r5
 801bd5e:	eba5 0b0b 	sub.w	fp, r5, fp
 801bd62:	eb0b 7bdb 	add.w	fp, fp, fp, lsr #31
    txt_area.y1 = obj->coords.y1 + bg_topp + y_ofs;
 801bd66:	eb07 076b 	add.w	r7, r7, fp, asr #1
 801bd6a:	f8b4 b016 	ldrh.w	fp, [r4, #22]
    lv_draw_label(&txt_area, clip_area, &txt_dsc, cb->txt, NULL);
 801bd6e:	9600      	str	r6, [sp, #0]
    txt_area.y1 = obj->coords.y1 + bg_topp + y_ofs;
 801bd70:	445f      	add	r7, fp
 801bd72:	b2bf      	uxth	r7, r7
 801bd74:	f8ad 7036 	strh.w	r7, [sp, #54]	; 0x36
    txt_area.y2 = txt_area.y1 + txt_size.y;
 801bd78:	441f      	add	r7, r3
    lv_draw_label(&txt_area, clip_area, &txt_dsc, cb->txt, NULL);
 801bd7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    txt_area.y2 = txt_area.y1 + txt_size.y;
 801bd7c:	f8ad 703a 	strh.w	r7, [sp, #58]	; 0x3a
    lv_draw_label(&txt_area, clip_area, &txt_dsc, cb->txt, NULL);
 801bd80:	f7ee fda6 	bl	800a8d0 <lv_draw_label>
}
 801bd84:	e692      	b.n	801baac <lv_checkbox_event+0x30>
 801bd86:	bf00      	nop
 801bd88:	08029480 	.word	0x08029480

0801bd8c <lv_dropdownlist_destructor>:
{
    LV_UNUSED(class_p);
    lv_dropdown_list_t * list = (lv_dropdown_list_t *)list_obj;
    lv_obj_t * dropdown_obj = list->dropdown;
    lv_dropdown_t * dropdown = (lv_dropdown_t *)dropdown_obj;
    dropdown->list = NULL;
 801bd8c:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 801bd8e:	2200      	movs	r2, #0
 801bd90:	625a      	str	r2, [r3, #36]	; 0x24
}
 801bd92:	4770      	bx	lr

0801bd94 <get_label>:
}

static lv_obj_t * get_label(const lv_obj_t * obj)
{
    lv_dropdown_t * dropdown = (lv_dropdown_t *)obj;
    if(dropdown->list == NULL) return NULL;
 801bd94:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801bd96:	b110      	cbz	r0, 801bd9e <get_label+0xa>

    return lv_obj_get_child(dropdown->list, 0);
 801bd98:	2100      	movs	r1, #0
 801bd9a:	f7eb be32 	b.w	8007a02 <lv_obj_get_child>
}
 801bd9e:	4770      	bx	lr

0801bda0 <lv_dropdownlist_constructor>:
{
 801bda0:	b507      	push	{r0, r1, r2, lr}
 801bda2:	4608      	mov	r0, r1
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLL_ON_FOCUS);
 801bda4:	f44f 7100 	mov.w	r1, #512	; 0x200
 801bda8:	9001      	str	r0, [sp, #4]
 801bdaa:	f7e7 ffd0 	bl	8003d4e <lv_obj_clear_flag>
    lv_label_create(obj);
 801bdae:	9801      	ldr	r0, [sp, #4]
}
 801bdb0:	b003      	add	sp, #12
 801bdb2:	f85d eb04 	ldr.w	lr, [sp], #4
    lv_label_create(obj);
 801bdb6:	f001 bae7 	b.w	801d388 <lv_label_create>

0801bdba <lv_dropdown_destructor>:
    if(dropdown->list) {
 801bdba:	6a48      	ldr	r0, [r1, #36]	; 0x24
{
 801bdbc:	b538      	push	{r3, r4, r5, lr}
 801bdbe:	460c      	mov	r4, r1
    if(dropdown->list) {
 801bdc0:	b118      	cbz	r0, 801bdca <lv_dropdown_destructor+0x10>
        lv_obj_del(dropdown->list);
 801bdc2:	f7eb fedd 	bl	8007b80 <lv_obj_del>
        dropdown->list = NULL;
 801bdc6:	2300      	movs	r3, #0
 801bdc8:	6263      	str	r3, [r4, #36]	; 0x24
    if(!dropdown->static_txt) {
 801bdca:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 801bdce:	f013 0510 	ands.w	r5, r3, #16
 801bdd2:	d103      	bne.n	801bddc <lv_dropdown_destructor+0x22>
        lv_mem_free(dropdown->options);
 801bdd4:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801bdd6:	f7fb fcad 	bl	8017734 <lv_mem_free>
        dropdown->options = NULL;
 801bdda:	6325      	str	r5, [r4, #48]	; 0x30
}
 801bddc:	bd38      	pop	{r3, r4, r5, pc}

0801bdde <get_id_on_point>:
{
 801bdde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bde2:	4606      	mov	r6, r0
 801bde4:	460d      	mov	r5, r1
    lv_obj_t * label = get_label(dropdown_obj);
 801bde6:	f7ff ffd5 	bl	801bd94 <get_label>
    if(label == NULL) return 0;
 801bdea:	4604      	mov	r4, r0
 801bdec:	b308      	cbz	r0, 801be32 <get_id_on_point+0x54>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 801bdee:	f241 4259 	movw	r2, #5209	; 0x1459
 801bdf2:	2100      	movs	r1, #0
    y -= label->coords.y1;
 801bdf4:	f8b0 8016 	ldrh.w	r8, [r0, #22]
 801bdf8:	f7eb fab6 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 801bdfc:	f241 425b 	movw	r2, #5211	; 0x145b
    lv_coord_t font_h              = lv_font_get_line_height(font);
 801be00:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 801be04:	2100      	movs	r1, #0
 801be06:	4620      	mov	r0, r4
 801be08:	f7eb faae 	bl	8007368 <lv_obj_get_style_prop>
    y += line_space / 2;
 801be0c:	f3c0 34c0 	ubfx	r4, r0, #15, #1
 801be10:	fa04 f480 	sxtah	r4, r4, r0
    lv_coord_t h = font_h + line_space;
 801be14:	4438      	add	r0, r7
    y += line_space / 2;
 801be16:	eb05 0464 	add.w	r4, r5, r4, asr #1
    uint16_t opt = y / h;
 801be1a:	b200      	sxth	r0, r0
    y += line_space / 2;
 801be1c:	eba4 0408 	sub.w	r4, r4, r8
    uint16_t opt = y / h;
 801be20:	b224      	sxth	r4, r4
 801be22:	fb94 f4f0 	sdiv	r4, r4, r0
 801be26:	b2a0      	uxth	r0, r4
    if(opt >= dropdown->option_cnt) opt = dropdown->option_cnt - 1;
 801be28:	8eb4      	ldrh	r4, [r6, #52]	; 0x34
 801be2a:	4284      	cmp	r4, r0
 801be2c:	d801      	bhi.n	801be32 <get_id_on_point+0x54>
 801be2e:	3c01      	subs	r4, #1
 801be30:	b2a0      	uxth	r0, r4
}
 801be32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801be36 <draw_box>:
{
 801be36:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801be3a:	4693      	mov	fp, r2
    if(id == LV_DROPDOWN_PR_NONE) return;
 801be3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
{
 801be40:	b093      	sub	sp, #76	; 0x4c
 801be42:	4606      	mov	r6, r0
    if(id == LV_DROPDOWN_PR_NONE) return;
 801be44:	4593      	cmp	fp, r2
{
 801be46:	460f      	mov	r7, r1
    if(id == LV_DROPDOWN_PR_NONE) return;
 801be48:	d053      	beq.n	801bef2 <draw_box+0xbc>
    lv_obj_t * list_obj = dropdown->list;
 801be4a:	6a45      	ldr	r5, [r0, #36]	; 0x24
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 801be4c:	f241 4259 	movw	r2, #5209	; 0x1459
 801be50:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    lv_state_t state_ori = list_obj->state;
 801be54:	f8b5 8020 	ldrh.w	r8, [r5, #32]
 801be58:	4628      	mov	r0, r5
    if(state != list_obj->state) {
 801be5a:	4598      	cmp	r8, r3
        list_obj->state = state;
 801be5c:	bf1f      	itttt	ne
 801be5e:	842b      	strhne	r3, [r5, #32]
        list_obj->skip_trans = 1;
 801be60:	f895 3022 	ldrbne.w	r3, [r5, #34]	; 0x22
 801be64:	f043 0304 	orrne.w	r3, r3, #4
 801be68:	f885 3022 	strbne.w	r3, [r5, #34]	; 0x22
 801be6c:	f7eb fa7c 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 801be70:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 801be74:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 801be76:	f241 425b 	movw	r2, #5211	; 0x145b
 801be7a:	4628      	mov	r0, r5
 801be7c:	f7eb fa74 	bl	8007368 <lv_obj_get_style_prop>
 801be80:	4681      	mov	r9, r0
    return (lv_coord_t)v.num;
 801be82:	b203      	sxth	r3, r0
    lv_obj_t * label = get_label(dropdown_obj);
 801be84:	4630      	mov	r0, r6
    lv_coord_t font_h         = lv_font_get_line_height(font);
 801be86:	f9b4 a008 	ldrsh.w	sl, [r4, #8]
    rect_area.y2 = rect_area.y1 + font_h + line_space - 1;
 801be8a:	f109 39ff 	add.w	r9, r9, #4294967295
 801be8e:	9301      	str	r3, [sp, #4]
    lv_obj_t * label = get_label(dropdown_obj);
 801be90:	f7ff ff80 	bl	801bd94 <get_label>
    rect_area.y1 += id * (font_h + line_space);
 801be94:	9b01      	ldr	r3, [sp, #4]
    rect_area.y2 = rect_area.y1 + font_h + line_space - 1;
 801be96:	44d1      	add	r9, sl
    rect_area.y1 += id * (font_h + line_space);
 801be98:	eb0a 0403 	add.w	r4, sl, r3
    rect_area.y1 -= line_space / 2;
 801be9c:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
    rect_area.y1 += id * (font_h + line_space);
 801bea0:	fb14 f20b 	smulbb	r2, r4, fp
    rect_area.y1 -= line_space / 2;
 801bea4:	eba2 0363 	sub.w	r3, r2, r3, asr #1
 801bea8:	8ac2      	ldrh	r2, [r0, #22]
    lv_draw_rect_dsc_init(&sel_rect);
 801beaa:	a805      	add	r0, sp, #20
    rect_area.y1 -= line_space / 2;
 801beac:	4413      	add	r3, r2
 801beae:	b29b      	uxth	r3, r3
 801beb0:	f8ad 300e 	strh.w	r3, [sp, #14]
    rect_area.y2 = rect_area.y1 + font_h + line_space - 1;
 801beb4:	444b      	add	r3, r9
 801beb6:	f8ad 3012 	strh.w	r3, [sp, #18]
    rect_area.x1 = dropdown->list->coords.x1;
 801beba:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801bebc:	8a9a      	ldrh	r2, [r3, #20]
    rect_area.x2 = dropdown->list->coords.x2;
 801bebe:	8b1b      	ldrh	r3, [r3, #24]
    rect_area.x1 = dropdown->list->coords.x1;
 801bec0:	f8ad 200c 	strh.w	r2, [sp, #12]
    rect_area.x2 = dropdown->list->coords.x2;
 801bec4:	f8ad 3010 	strh.w	r3, [sp, #16]
    lv_draw_rect_dsc_init(&sel_rect);
 801bec8:	f7f0 fdde 	bl	800ca88 <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(list_obj,  LV_PART_SELECTED, &sel_rect);
 801becc:	aa05      	add	r2, sp, #20
 801bece:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 801bed2:	4628      	mov	r0, r5
 801bed4:	f7e8 fb44 	bl	8004560 <lv_obj_init_draw_rect_dsc>
    lv_draw_rect(&rect_area, clip_area, &sel_rect);
 801bed8:	aa05      	add	r2, sp, #20
 801beda:	4639      	mov	r1, r7
 801bedc:	a803      	add	r0, sp, #12
 801bede:	f7f0 fdf5 	bl	800cacc <lv_draw_rect>
    list_obj->skip_trans = 0;
 801bee2:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
    list_obj->state = state_ori;
 801bee6:	f8a5 8020 	strh.w	r8, [r5, #32]
    list_obj->skip_trans = 0;
 801beea:	f36f 0382 	bfc	r3, #2, #1
 801beee:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
}
 801bef2:	b013      	add	sp, #76	; 0x4c
 801bef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801bef8 <draw_box_label>:
{
 801bef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801befc:	4690      	mov	r8, r2
    if(id == LV_DROPDOWN_PR_NONE) return;
 801befe:	f64f 72ff 	movw	r2, #65535	; 0xffff
{
 801bf02:	b08e      	sub	sp, #56	; 0x38
 801bf04:	4605      	mov	r5, r0
    if(id == LV_DROPDOWN_PR_NONE) return;
 801bf06:	4590      	cmp	r8, r2
{
 801bf08:	460e      	mov	r6, r1
    if(id == LV_DROPDOWN_PR_NONE) return;
 801bf0a:	d058      	beq.n	801bfbe <draw_box_label+0xc6>
    lv_obj_t * list_obj = dropdown->list;
 801bf0c:	6a44      	ldr	r4, [r0, #36]	; 0x24
    lv_draw_label_dsc_init(&label_dsc);
 801bf0e:	a806      	add	r0, sp, #24
    lv_state_t state_orig = list_obj->state;
 801bf10:	8c27      	ldrh	r7, [r4, #32]
    if(state != list_obj->state) {
 801bf12:	429f      	cmp	r7, r3
        list_obj->state =  state;
 801bf14:	bf1f      	itttt	ne
 801bf16:	8423      	strhne	r3, [r4, #32]
        list_obj->skip_trans = 1;
 801bf18:	f894 3022 	ldrbne.w	r3, [r4, #34]	; 0x22
 801bf1c:	f043 0304 	orrne.w	r3, r3, #4
 801bf20:	f884 3022 	strbne.w	r3, [r4, #34]	; 0x22
    lv_draw_label_dsc_init(&label_dsc);
 801bf24:	f7ee fafc 	bl	800a520 <lv_draw_label_dsc_init>
    lv_obj_init_draw_label_dsc(list_obj, LV_PART_SELECTED, &label_dsc);
 801bf28:	aa06      	add	r2, sp, #24
 801bf2a:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 801bf2e:	4620      	mov	r0, r4
 801bf30:	f7e8 fc52 	bl	80047d8 <lv_obj_init_draw_label_dsc>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 801bf34:	f241 425b 	movw	r2, #5211	; 0x145b
 801bf38:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 801bf3c:	4620      	mov	r0, r4
 801bf3e:	f7eb fa13 	bl	8007368 <lv_obj_get_style_prop>
    label_dsc.line_space = lv_obj_get_style_text_line_space(list_obj, LV_PART_SELECTED);  /*Line space should come from the list*/
 801bf42:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
    lv_obj_t * label = get_label(dropdown_obj);
 801bf46:	4628      	mov	r0, r5
 801bf48:	f7ff ff24 	bl	801bd94 <get_label>
    if(label == NULL) return;
 801bf4c:	4605      	mov	r5, r0
 801bf4e:	2800      	cmp	r0, #0
 801bf50:	d035      	beq.n	801bfbe <draw_box_label+0xc6>
    lv_coord_t font_h        = lv_font_get_line_height(label_dsc.font);
 801bf52:	9b06      	ldr	r3, [sp, #24]
    area_sel.y1 += id * (font_h + label_dsc.line_space);
 801bf54:	f9bd 002a 	ldrsh.w	r0, [sp, #42]	; 0x2a
    lv_coord_t font_h        = lv_font_get_line_height(label_dsc.font);
 801bf58:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
    area_sel.y1 -= label_dsc.line_space / 2;
 801bf5c:	eb00 73d0 	add.w	r3, r0, r0, lsr #31
    area_sel.y1 += id * (font_h + label_dsc.line_space);
 801bf60:	eb0c 0100 	add.w	r1, ip, r0
    area_sel.y2 = area_sel.y1 + font_h + label_dsc.line_space - 1;
 801bf64:	3801      	subs	r0, #1
    area_sel.y1 += id * (font_h + label_dsc.line_space);
 801bf66:	fb11 f208 	smulbb	r2, r1, r8
    area_sel.y2 = area_sel.y1 + font_h + label_dsc.line_space - 1;
 801bf6a:	4460      	add	r0, ip
    area_ok = _lv_area_intersect(&mask_sel, clip_area, &area_sel);
 801bf6c:	4631      	mov	r1, r6
    area_sel.y1 -= label_dsc.line_space / 2;
 801bf6e:	eba2 0363 	sub.w	r3, r2, r3, asr #1
 801bf72:	8aea      	ldrh	r2, [r5, #22]
 801bf74:	4413      	add	r3, r2
    area_ok = _lv_area_intersect(&mask_sel, clip_area, &area_sel);
 801bf76:	aa02      	add	r2, sp, #8
    area_sel.y1 -= label_dsc.line_space / 2;
 801bf78:	b29b      	uxth	r3, r3
 801bf7a:	f8ad 300a 	strh.w	r3, [sp, #10]
    area_sel.y2 = area_sel.y1 + font_h + label_dsc.line_space - 1;
 801bf7e:	4403      	add	r3, r0
    area_ok = _lv_area_intersect(&mask_sel, clip_area, &area_sel);
 801bf80:	a804      	add	r0, sp, #16
    area_sel.y2 = area_sel.y1 + font_h + label_dsc.line_space - 1;
 801bf82:	f8ad 300e 	strh.w	r3, [sp, #14]
    area_sel.x1 = list_obj->coords.x1;
 801bf86:	8aa3      	ldrh	r3, [r4, #20]
 801bf88:	f8ad 3008 	strh.w	r3, [sp, #8]
    area_sel.x2 = list_obj->coords.x2;
 801bf8c:	8b23      	ldrh	r3, [r4, #24]
 801bf8e:	f8ad 300c 	strh.w	r3, [sp, #12]
    area_ok = _lv_area_intersect(&mask_sel, clip_area, &area_sel);
 801bf92:	f7fa ff80 	bl	8016e96 <_lv_area_intersect>
    if(area_ok) {
 801bf96:	b158      	cbz	r0, 801bfb0 <draw_box_label+0xb8>
        lv_draw_label(&label->coords, &mask_sel, &label_dsc, lv_label_get_text(label), NULL);
 801bf98:	4628      	mov	r0, r5
 801bf9a:	f001 fab3 	bl	801d504 <lv_label_get_text>
 801bf9e:	2200      	movs	r2, #0
 801bfa0:	4603      	mov	r3, r0
 801bfa2:	a904      	add	r1, sp, #16
 801bfa4:	9200      	str	r2, [sp, #0]
 801bfa6:	f105 0014 	add.w	r0, r5, #20
 801bfaa:	aa06      	add	r2, sp, #24
 801bfac:	f7ee fc90 	bl	800a8d0 <lv_draw_label>
    list_obj->skip_trans = 0;
 801bfb0:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    list_obj->state = state_orig;
 801bfb4:	8427      	strh	r7, [r4, #32]
    list_obj->skip_trans = 0;
 801bfb6:	f36f 0382 	bfc	r3, #2, #1
 801bfba:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
}
 801bfbe:	b00e      	add	sp, #56	; 0x38
 801bfc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801bfc4 <position_to_selected>:
{
 801bfc4:	b570      	push	{r4, r5, r6, lr}
 801bfc6:	4604      	mov	r4, r0
    lv_obj_t * label = get_label(dropdown_obj);
 801bfc8:	f7ff fee4 	bl	801bd94 <get_label>
    if(label == NULL) return;
 801bfcc:	4605      	mov	r5, r0
 801bfce:	b318      	cbz	r0, 801c018 <position_to_selected+0x54>
    if(lv_obj_get_height(label) <= lv_obj_get_content_height(dropdown_obj)) return;
 801bfd0:	f7e8 ff53 	bl	8004e7a <lv_obj_get_height>
 801bfd4:	4606      	mov	r6, r0
 801bfd6:	4620      	mov	r0, r4
 801bfd8:	f7e8 ff6f 	bl	8004eba <lv_obj_get_content_height>
 801bfdc:	4286      	cmp	r6, r0
 801bfde:	dd1b      	ble.n	801c018 <position_to_selected+0x54>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 801bfe0:	f241 4259 	movw	r2, #5209	; 0x1459
 801bfe4:	2100      	movs	r1, #0
 801bfe6:	4628      	mov	r0, r5
 801bfe8:	f7eb f9be 	bl	8007368 <lv_obj_get_style_prop>
    lv_coord_t font_h              = lv_font_get_line_height(font);
 801bfec:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 801bff0:	f241 425b 	movw	r2, #5211	; 0x145b
 801bff4:	2100      	movs	r1, #0
 801bff6:	4628      	mov	r0, r5
 801bff8:	f7eb f9b6 	bl	8007368 <lv_obj_get_style_prop>
    lv_coord_t line_y1 = dropdown->sel_opt_id * unit_h;
 801bffc:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
    lv_coord_t unit_h = font_h + line_space;
 801bffe:	4430      	add	r0, r6
    lv_obj_scroll_to_y(dropdown->list, line_y1, LV_ANIM_OFF);
 801c000:	2200      	movs	r2, #0
    lv_coord_t line_y1 = dropdown->sel_opt_id * unit_h;
 801c002:	fb11 f100 	smulbb	r1, r1, r0
    lv_obj_scroll_to_y(dropdown->list, line_y1, LV_ANIM_OFF);
 801c006:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801c008:	b209      	sxth	r1, r1
 801c00a:	f7ea fac9 	bl	80065a0 <lv_obj_scroll_to_y>
    lv_obj_invalidate(dropdown->list);
 801c00e:	6a60      	ldr	r0, [r4, #36]	; 0x24
}
 801c010:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_obj_invalidate(dropdown->list);
 801c014:	f7e9 b880 	b.w	8005118 <lv_obj_invalidate>
}
 801c018:	bd70      	pop	{r4, r5, r6, pc}

0801c01a <lv_dropdown_set_options_static>:
{
 801c01a:	b538      	push	{r3, r4, r5, lr}
 801c01c:	4604      	mov	r4, r0
    LV_ASSERT_NULL(options);
 801c01e:	460d      	mov	r5, r1
 801c020:	b901      	cbnz	r1, 801c024 <lv_dropdown_set_options_static+0xa>
 801c022:	e7fe      	b.n	801c022 <lv_dropdown_set_options_static+0x8>
    dropdown->option_cnt = 0;
 801c024:	2300      	movs	r3, #0
 801c026:	3901      	subs	r1, #1
 801c028:	8683      	strh	r3, [r0, #52]	; 0x34
    for(i = 0; options[i] != '\0'; i++) {
 801c02a:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801c02c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801c030:	3301      	adds	r3, #1
 801c032:	b29b      	uxth	r3, r3
 801c034:	b992      	cbnz	r2, 801c05c <lv_dropdown_set_options_static+0x42>
    dropdown->option_cnt++;   /*Last option has no `\n`*/
 801c036:	86a3      	strh	r3, [r4, #52]	; 0x34
    if(dropdown->static_txt == 0 && dropdown->options != NULL) {
 801c038:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    dropdown->sel_opt_id      = 0;
 801c03c:	86e2      	strh	r2, [r4, #54]	; 0x36
    if(dropdown->static_txt == 0 && dropdown->options != NULL) {
 801c03e:	06db      	lsls	r3, r3, #27
    dropdown->sel_opt_id_orig = 0;
 801c040:	8722      	strh	r2, [r4, #56]	; 0x38
    if(dropdown->static_txt == 0 && dropdown->options != NULL) {
 801c042:	d403      	bmi.n	801c04c <lv_dropdown_set_options_static+0x32>
 801c044:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801c046:	b108      	cbz	r0, 801c04c <lv_dropdown_set_options_static+0x32>
        lv_mem_free(dropdown->options);
 801c048:	f7fb fb74 	bl	8017734 <lv_mem_free>
    dropdown->static_txt = 1;
 801c04c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    dropdown->options = (char *)options;
 801c050:	6325      	str	r5, [r4, #48]	; 0x30
    dropdown->static_txt = 1;
 801c052:	f043 0310 	orr.w	r3, r3, #16
 801c056:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 801c05a:	bd38      	pop	{r3, r4, r5, pc}
        if(options[i] == '\n') dropdown->option_cnt++;
 801c05c:	2a0a      	cmp	r2, #10
 801c05e:	bf08      	it	eq
 801c060:	86a3      	strheq	r3, [r4, #52]	; 0x34
    for(i = 0; options[i] != '\0'; i++) {
 801c062:	e7e2      	b.n	801c02a <lv_dropdown_set_options_static+0x10>

0801c064 <lv_dropdown_constructor>:
    dropdown->list          = NULL;
 801c064:	2300      	movs	r3, #0
    dropdown->symbol         = LV_SYMBOL_DOWN;
 801c066:	4a0f      	ldr	r2, [pc, #60]	; (801c0a4 <lv_dropdown_constructor+0x40>)
{
 801c068:	b510      	push	{r4, lr}
    dropdown->list          = NULL;
 801c06a:	624b      	str	r3, [r1, #36]	; 0x24
{
 801c06c:	460c      	mov	r4, r1
    dropdown->text         = NULL;
 801c06e:	e9c1 320a 	strd	r3, r2, [r1, #40]	; 0x28
    dropdown->option_cnt      = 0;
 801c072:	e9c1 330c 	strd	r3, r3, [r1, #48]	; 0x30
    dropdown->sel_opt_id_orig = 0;
 801c076:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
    lv_obj_add_flag(obj, LV_OBJ_FLAG_SCROLL_ON_FOCUS);
 801c07a:	4620      	mov	r0, r4
    dropdown->sel_opt_id_orig = 0;
 801c07c:	638b      	str	r3, [r1, #56]	; 0x38
    dropdown->dir = LV_DIR_BOTTOM;
 801c07e:	f891 303c 	ldrb.w	r3, [r1, #60]	; 0x3c
 801c082:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 801c086:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 801c08a:	f881 303c 	strb.w	r3, [r1, #60]	; 0x3c
    lv_obj_add_flag(obj, LV_OBJ_FLAG_SCROLL_ON_FOCUS);
 801c08e:	f44f 7100 	mov.w	r1, #512	; 0x200
 801c092:	f7e7 fe39 	bl	8003d08 <lv_obj_add_flag>
    lv_dropdown_set_options_static(obj, "Option 1\nOption 2\nOption 3");
 801c096:	4620      	mov	r0, r4
 801c098:	4903      	ldr	r1, [pc, #12]	; (801c0a8 <lv_dropdown_constructor+0x44>)
}
 801c09a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_dropdown_set_options_static(obj, "Option 1\nOption 2\nOption 3");
 801c09e:	f7ff bfbc 	b.w	801c01a <lv_dropdown_set_options_static>
 801c0a2:	bf00      	nop
 801c0a4:	0802949c 	.word	0x0802949c
 801c0a8:	080294a0 	.word	0x080294a0

0801c0ac <lv_dropdown_get_selected_str>:
{
 801c0ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    size_t txt_len     = strlen(dropdown->options);
 801c0b0:	f8d0 8030 	ldr.w	r8, [r0, #48]	; 0x30
{
 801c0b4:	4605      	mov	r5, r0
 801c0b6:	460e      	mov	r6, r1
 801c0b8:	4617      	mov	r7, r2
    size_t txt_len     = strlen(dropdown->options);
 801c0ba:	4640      	mov	r0, r8
 801c0bc:	f7e4 f902 	bl	80002c4 <strlen>
    uint32_t line        = 0;
 801c0c0:	2300      	movs	r3, #0
    for(i = 0; i < txt_len && line != dropdown->sel_opt_id_orig; i++) {
 801c0c2:	461c      	mov	r4, r3
 801c0c4:	4284      	cmp	r4, r0
 801c0c6:	d01d      	beq.n	801c104 <lv_dropdown_get_selected_str+0x58>
 801c0c8:	8f2a      	ldrh	r2, [r5, #56]	; 0x38
 801c0ca:	f818 1004 	ldrb.w	r1, [r8, r4]
 801c0ce:	429a      	cmp	r2, r3
 801c0d0:	d112      	bne.n	801c0f8 <lv_dropdown_get_selected_str+0x4c>
 801c0d2:	2300      	movs	r3, #0
        if(buf_size && c >= buf_size - 1) {
 801c0d4:	1e79      	subs	r1, r7, #1
    for(c = 0; i < txt_len && dropdown->options[i] != '\n'; c++, i++) {
 801c0d6:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 801c0d8:	4422      	add	r2, r4
 801c0da:	5cd2      	ldrb	r2, [r2, r3]
 801c0dc:	2a0a      	cmp	r2, #10
 801c0de:	d007      	beq.n	801c0f0 <lv_dropdown_get_selected_str+0x44>
        if(buf_size && c >= buf_size - 1) {
 801c0e0:	b10f      	cbz	r7, 801c0e6 <lv_dropdown_get_selected_str+0x3a>
 801c0e2:	4299      	cmp	r1, r3
 801c0e4:	d904      	bls.n	801c0f0 <lv_dropdown_get_selected_str+0x44>
        buf[c] = dropdown->options[i];
 801c0e6:	54f2      	strb	r2, [r6, r3]
    for(c = 0; i < txt_len && dropdown->options[i] != '\n'; c++, i++) {
 801c0e8:	3301      	adds	r3, #1
 801c0ea:	18e2      	adds	r2, r4, r3
 801c0ec:	4282      	cmp	r2, r0
 801c0ee:	d3f2      	bcc.n	801c0d6 <lv_dropdown_get_selected_str+0x2a>
    buf[c] = '\0';
 801c0f0:	2200      	movs	r2, #0
 801c0f2:	54f2      	strb	r2, [r6, r3]
}
 801c0f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(dropdown->options[i] == '\n') line++;
 801c0f8:	290a      	cmp	r1, #10
    for(i = 0; i < txt_len && line != dropdown->sel_opt_id_orig; i++) {
 801c0fa:	f104 0401 	add.w	r4, r4, #1
        if(dropdown->options[i] == '\n') line++;
 801c0fe:	bf08      	it	eq
 801c100:	3301      	addeq	r3, #1
    for(i = 0; i < txt_len && line != dropdown->sel_opt_id_orig; i++) {
 801c102:	e7df      	b.n	801c0c4 <lv_dropdown_get_selected_str+0x18>
 801c104:	2300      	movs	r3, #0
 801c106:	e7f3      	b.n	801c0f0 <lv_dropdown_get_selected_str+0x44>

0801c108 <lv_dropdown_open>:
{
 801c108:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801c10c:	4604      	mov	r4, r0
    lv_obj_add_state(dropdown_obj, LV_STATE_CHECKED);
 801c10e:	2101      	movs	r1, #1
 801c110:	f7e7 fe45 	bl	8003d9e <lv_obj_add_state>
    if(dropdown->list == NULL) {
 801c114:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c116:	b9bb      	cbnz	r3, 801c148 <lv_dropdown_open+0x40>
        lv_obj_t * list_obj = lv_dropdown_list_create(lv_obj_get_screen(dropdown_obj));
 801c118:	4620      	mov	r0, r4
 801c11a:	f7eb fc48 	bl	80079ae <lv_obj_get_screen>
 801c11e:	4601      	mov	r1, r0
    lv_obj_t * obj = lv_obj_class_create_obj(&lv_dropdownlist_class, parent);
 801c120:	4890      	ldr	r0, [pc, #576]	; (801c364 <lv_dropdown_open+0x25c>)
 801c122:	f7e8 f94f 	bl	80043c4 <lv_obj_class_create_obj>
 801c126:	4605      	mov	r5, r0
    lv_obj_class_init_obj(obj);
 801c128:	f7e8 f9d9 	bl	80044de <lv_obj_class_init_obj>
        lv_obj_clear_flag(dropdown->list, LV_OBJ_FLAG_CLICK_FOCUSABLE);
 801c12c:	2104      	movs	r1, #4
 801c12e:	4628      	mov	r0, r5
        ((lv_dropdown_list_t*) list_obj)->dropdown = dropdown_obj;
 801c130:	626c      	str	r4, [r5, #36]	; 0x24
        dropdown->list = list_obj;
 801c132:	6265      	str	r5, [r4, #36]	; 0x24
        lv_obj_clear_flag(dropdown->list, LV_OBJ_FLAG_CLICK_FOCUSABLE);
 801c134:	f7e7 fe0b 	bl	8003d4e <lv_obj_clear_flag>
        lv_obj_add_flag(dropdown->list, LV_OBJ_FLAG_IGNORE_LAYOUT);
 801c138:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801c13a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801c13e:	f7e7 fde3 	bl	8003d08 <lv_obj_add_flag>
        lv_obj_update_layout(dropdown->list);
 801c142:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801c144:	f7e9 fc50 	bl	80059e8 <lv_obj_update_layout>
    lv_obj_t * label = get_label(dropdown_obj);
 801c148:	4620      	mov	r0, r4
 801c14a:	f7ff fe23 	bl	801bd94 <get_label>
    lv_label_set_text_static(label, dropdown->options);
 801c14e:	6b21      	ldr	r1, [r4, #48]	; 0x30
    lv_obj_t * label = get_label(dropdown_obj);
 801c150:	4606      	mov	r6, r0
    lv_label_set_text_static(label, dropdown->options);
 801c152:	f001 f960 	bl	801d416 <lv_label_set_text_static>
    lv_obj_set_width(dropdown->list, LV_SIZE_CONTENT);
 801c156:	f242 71d1 	movw	r1, #10193	; 0x27d1
 801c15a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801c15c:	f7e8 fd36 	bl	8004bcc <lv_obj_set_width>
    lv_obj_update_layout(label);
 801c160:	4630      	mov	r0, r6
 801c162:	f7e9 fc41 	bl	80059e8 <lv_obj_update_layout>
    if(lv_obj_get_width(dropdown->list) <= lv_obj_get_width(dropdown_obj) &&
 801c166:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801c168:	f7e8 fe81 	bl	8004e6e <lv_obj_get_width>
 801c16c:	4605      	mov	r5, r0
 801c16e:	4620      	mov	r0, r4
 801c170:	f7e8 fe7d 	bl	8004e6e <lv_obj_get_width>
 801c174:	4285      	cmp	r5, r0
 801c176:	dc0f      	bgt.n	801c198 <lv_dropdown_open+0x90>
       (dropdown->dir == LV_DIR_TOP || dropdown->dir == LV_DIR_BOTTOM)) {
 801c178:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 801c17c:	f003 030f 	and.w	r3, r3, #15
    if(lv_obj_get_width(dropdown->list) <= lv_obj_get_width(dropdown_obj) &&
 801c180:	2b04      	cmp	r3, #4
 801c182:	d001      	beq.n	801c188 <lv_dropdown_open+0x80>
       (dropdown->dir == LV_DIR_TOP || dropdown->dir == LV_DIR_BOTTOM)) {
 801c184:	2b08      	cmp	r3, #8
 801c186:	d107      	bne.n	801c198 <lv_dropdown_open+0x90>
        lv_obj_set_width(dropdown->list, lv_obj_get_width(dropdown_obj));
 801c188:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801c18a:	4620      	mov	r0, r4
 801c18c:	f7e8 fe6f 	bl	8004e6e <lv_obj_get_width>
 801c190:	4601      	mov	r1, r0
 801c192:	4628      	mov	r0, r5
 801c194:	f7e8 fd1a 	bl	8004bcc <lv_obj_set_width>
    lv_coord_t label_h = lv_obj_get_height(label);
 801c198:	4630      	mov	r0, r6
 801c19a:	f7e8 fe6e 	bl	8004e7a <lv_obj_get_height>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 801c19e:	f241 0232 	movw	r2, #4146	; 0x1032
 801c1a2:	4680      	mov	r8, r0
 801c1a4:	2100      	movs	r1, #0
 801c1a6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801c1a8:	f7eb f8de 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801c1ac:	f241 0210 	movw	r2, #4112	; 0x1010
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 801c1b0:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801c1b2:	2100      	movs	r1, #0
 801c1b4:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801c1b6:	f7eb f8d7 	bl	8007368 <lv_obj_get_style_prop>
 801c1ba:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801c1bc:	f241 0211 	movw	r2, #4113	; 0x1011
 801c1c0:	2100      	movs	r1, #0
 801c1c2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801c1c4:	f7eb f8d0 	bl	8007368 <lv_obj_get_style_prop>
    lv_dir_t dir = dropdown->dir;
 801c1c8:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    lv_coord_t list_fit_h = label_h + top + bottom;
 801c1cc:	4407      	add	r7, r0
 801c1ce:	eb07 0545 	add.w	r5, r7, r5, lsl #1
    lv_dir_t dir = dropdown->dir;
 801c1d2:	f003 070f 	and.w	r7, r3, #15
    lv_coord_t list_fit_h = label_h + top + bottom;
 801c1d6:	eb05 0008 	add.w	r0, r5, r8
    if(dropdown->dir == LV_DIR_BOTTOM) {
 801c1da:	2f08      	cmp	r7, #8
    lv_coord_t list_fit_h = label_h + top + bottom;
 801c1dc:	b205      	sxth	r5, r0
    if(dropdown->dir == LV_DIR_BOTTOM) {
 801c1de:	d170      	bne.n	801c2c2 <lv_dropdown_open+0x1ba>
        if(dropdown_obj->coords.y2 + list_h > LV_VER_RES) {
 801c1e0:	f9b4 801a 	ldrsh.w	r8, [r4, #26]
 801c1e4:	f7fa fb60 	bl	80168a8 <lv_disp_get_default>
 801c1e8:	f7fa fb74 	bl	80168d4 <lv_disp_get_ver_res>
 801c1ec:	44a8      	add	r8, r5
 801c1ee:	4580      	cmp	r8, r0
 801c1f0:	f340 8084 	ble.w	801c2fc <lv_dropdown_open+0x1f4>
            if(dropdown_obj->coords.y1 > LV_VER_RES - dropdown_obj->coords.y2) {
 801c1f4:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 801c1f8:	f7fa fb56 	bl	80168a8 <lv_disp_get_default>
 801c1fc:	f7fa fb6a 	bl	80168d4 <lv_disp_get_ver_res>
 801c200:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 801c204:	1ac0      	subs	r0, r0, r3
 801c206:	4580      	cmp	r8, r0
 801c208:	dd52      	ble.n	801c2b0 <lv_dropdown_open+0x1a8>
                list_h = dropdown_obj->coords.y1 - 1;
 801c20a:	8ae1      	ldrh	r1, [r4, #22]
                dir = LV_DIR_TOP;
 801c20c:	2704      	movs	r7, #4
                list_h = dropdown_obj->coords.y1 - 1;
 801c20e:	3901      	subs	r1, #1
 801c210:	b209      	sxth	r1, r1
    lv_obj_set_height(dropdown->list, list_h);
 801c212:	42a9      	cmp	r1, r5
 801c214:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801c216:	bfa8      	it	ge
 801c218:	4629      	movge	r1, r5
 801c21a:	f7e8 fcf1 	bl	8004c00 <lv_obj_set_height>
    position_to_selected(dropdown_obj);
 801c21e:	4620      	mov	r0, r4
 801c220:	f7ff fed0 	bl	801bfc4 <position_to_selected>
    if(dir == LV_DIR_BOTTOM)     lv_obj_align_to(dropdown->list, dropdown_obj, LV_ALIGN_OUT_BOTTOM_LEFT, 0, 0);
 801c224:	2f08      	cmp	r7, #8
 801c226:	d16b      	bne.n	801c300 <lv_dropdown_open+0x1f8>
 801c228:	2300      	movs	r3, #0
 801c22a:	220d      	movs	r2, #13
 801c22c:	4621      	mov	r1, r4
 801c22e:	9300      	str	r3, [sp, #0]
 801c230:	6a60      	ldr	r0, [r4, #36]	; 0x24
    else if(dir == LV_DIR_RIGHT) lv_obj_align_to(dropdown->list, dropdown_obj, LV_ALIGN_OUT_RIGHT_TOP, 0, 0);
 801c232:	f7e9 fbf3 	bl	8005a1c <lv_obj_align_to>
    lv_obj_update_layout(dropdown->list);
 801c236:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801c238:	f7e9 fbd6 	bl	80059e8 <lv_obj_update_layout>
    if(dropdown->dir == LV_DIR_LEFT || dropdown->dir == LV_DIR_RIGHT) {
 801c23c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 801c240:	f003 030f 	and.w	r3, r3, #15
 801c244:	3b01      	subs	r3, #1
 801c246:	2b01      	cmp	r3, #1
 801c248:	d81a      	bhi.n	801c280 <lv_dropdown_open+0x178>
        lv_coord_t y1 = lv_obj_get_y(dropdown->list);
 801c24a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801c24c:	f7e8 fde8 	bl	8004e20 <lv_obj_get_y>
 801c250:	4605      	mov	r5, r0
        lv_coord_t y2 = lv_obj_get_y2(dropdown->list);
 801c252:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801c254:	f7e8 fe00 	bl	8004e58 <lv_obj_get_y2>
 801c258:	4607      	mov	r7, r0
        if(y2 >= LV_VER_RES) {
 801c25a:	f7fa fb25 	bl	80168a8 <lv_disp_get_default>
 801c25e:	f7fa fb39 	bl	80168d4 <lv_disp_get_ver_res>
 801c262:	42b8      	cmp	r0, r7
 801c264:	dc0c      	bgt.n	801c280 <lv_dropdown_open+0x178>
            lv_obj_set_y(dropdown->list, y1 - (y2 - LV_VER_RES) - 1);
 801c266:	f8d4 8024 	ldr.w	r8, [r4, #36]	; 0x24
 801c26a:	f7fa fb1d 	bl	80168a8 <lv_disp_get_default>
 801c26e:	f7fa fb31 	bl	80168d4 <lv_disp_get_ver_res>
 801c272:	1e6b      	subs	r3, r5, #1
 801c274:	1bdd      	subs	r5, r3, r7
 801c276:	4428      	add	r0, r5
 801c278:	b201      	sxth	r1, r0
 801c27a:	4640      	mov	r0, r8
 801c27c:	f7e8 fd38 	bl	8004cf0 <lv_obj_set_y>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_ALIGN);
 801c280:	2100      	movs	r1, #0
 801c282:	f241 425d 	movw	r2, #5213	; 0x145d
 801c286:	4630      	mov	r0, r6
 801c288:	f7eb f86e 	bl	8007368 <lv_obj_get_style_prop>
    if(align == LV_TEXT_ALIGN_AUTO) {
 801c28c:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
 801c290:	d14a      	bne.n	801c328 <lv_dropdown_open+0x220>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 801c292:	f241 426a 	movw	r2, #5226	; 0x146a
 801c296:	4630      	mov	r0, r6
 801c298:	f7eb f866 	bl	8007368 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 801c29c:	b2c0      	uxtb	r0, r0
       if(lv_obj_get_style_base_dir(label, LV_PART_MAIN) == LV_BASE_DIR_RTL) align = LV_TEXT_ALIGN_RIGHT;
 801c29e:	2801      	cmp	r0, #1
    switch(align) {
 801c2a0:	d046      	beq.n	801c330 <lv_dropdown_open+0x228>
        lv_obj_set_x(label, 0);
 801c2a2:	2100      	movs	r1, #0
        lv_obj_set_x(label, lv_obj_get_content_width(dropdown->list) / 2 - lv_obj_get_width(label) / 2);
 801c2a4:	4630      	mov	r0, r6
}
 801c2a6:	b002      	add	sp, #8
 801c2a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        lv_obj_set_x(label, lv_obj_get_content_width(dropdown->list) / 2 - lv_obj_get_width(label) / 2);
 801c2ac:	f7e8 bd02 	b.w	8004cb4 <lv_obj_set_x>
                list_h = LV_VER_RES - dropdown_obj->coords.y2 - 1 ;
 801c2b0:	f7fa fafa 	bl	80168a8 <lv_disp_get_default>
 801c2b4:	f7fa fb0e 	bl	80168d4 <lv_disp_get_ver_res>
 801c2b8:	8b63      	ldrh	r3, [r4, #26]
 801c2ba:	43db      	mvns	r3, r3
 801c2bc:	4418      	add	r0, r3
 801c2be:	b201      	sxth	r1, r0
 801c2c0:	e7a7      	b.n	801c212 <lv_dropdown_open+0x10a>
    else if(dropdown->dir == LV_DIR_TOP) {
 801c2c2:	2f04      	cmp	r7, #4
 801c2c4:	d11a      	bne.n	801c2fc <lv_dropdown_open+0x1f4>
        if(dropdown_obj->coords.y1 - list_h < 0) {
 801c2c6:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 801c2ca:	eba8 0305 	sub.w	r3, r8, r5
 801c2ce:	2b00      	cmp	r3, #0
 801c2d0:	da14      	bge.n	801c2fc <lv_dropdown_open+0x1f4>
            if(dropdown_obj->coords.y1 < LV_VER_RES - dropdown_obj->coords.y2) {
 801c2d2:	f7fa fae9 	bl	80168a8 <lv_disp_get_default>
 801c2d6:	f7fa fafd 	bl	80168d4 <lv_disp_get_ver_res>
 801c2da:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 801c2de:	1ac0      	subs	r0, r0, r3
 801c2e0:	4580      	cmp	r8, r0
 801c2e2:	da08      	bge.n	801c2f6 <lv_dropdown_open+0x1ee>
                list_h = LV_VER_RES - dropdown_obj->coords.y2;
 801c2e4:	f7fa fae0 	bl	80168a8 <lv_disp_get_default>
                dir = LV_DIR_BOTTOM;
 801c2e8:	2708      	movs	r7, #8
                list_h = LV_VER_RES - dropdown_obj->coords.y2;
 801c2ea:	f7fa faf3 	bl	80168d4 <lv_disp_get_ver_res>
 801c2ee:	8b61      	ldrh	r1, [r4, #26]
 801c2f0:	1a41      	subs	r1, r0, r1
 801c2f2:	b209      	sxth	r1, r1
 801c2f4:	e78d      	b.n	801c212 <lv_dropdown_open+0x10a>
                list_h = dropdown_obj->coords.y1;
 801c2f6:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 801c2fa:	e78a      	b.n	801c212 <lv_dropdown_open+0x10a>
    lv_coord_t list_h = list_fit_h;
 801c2fc:	4629      	mov	r1, r5
 801c2fe:	e788      	b.n	801c212 <lv_dropdown_open+0x10a>
    else if(dir == LV_DIR_TOP)   lv_obj_align_to(dropdown->list, dropdown_obj, LV_ALIGN_OUT_TOP_LEFT, 0, 0);
 801c300:	2f04      	cmp	r7, #4
 801c302:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801c304:	d104      	bne.n	801c310 <lv_dropdown_open+0x208>
 801c306:	2300      	movs	r3, #0
 801c308:	220a      	movs	r2, #10
 801c30a:	9300      	str	r3, [sp, #0]
    else if(dir == LV_DIR_RIGHT) lv_obj_align_to(dropdown->list, dropdown_obj, LV_ALIGN_OUT_RIGHT_TOP, 0, 0);
 801c30c:	4621      	mov	r1, r4
 801c30e:	e790      	b.n	801c232 <lv_dropdown_open+0x12a>
    else if(dir == LV_DIR_LEFT)  lv_obj_align_to(dropdown->list, dropdown_obj, LV_ALIGN_OUT_LEFT_TOP, 0, 0);
 801c310:	2f01      	cmp	r7, #1
 801c312:	d103      	bne.n	801c31c <lv_dropdown_open+0x214>
 801c314:	2300      	movs	r3, #0
 801c316:	2210      	movs	r2, #16
 801c318:	9300      	str	r3, [sp, #0]
 801c31a:	e7f7      	b.n	801c30c <lv_dropdown_open+0x204>
    else if(dir == LV_DIR_RIGHT) lv_obj_align_to(dropdown->list, dropdown_obj, LV_ALIGN_OUT_RIGHT_TOP, 0, 0);
 801c31c:	2f02      	cmp	r7, #2
 801c31e:	d18a      	bne.n	801c236 <lv_dropdown_open+0x12e>
 801c320:	2300      	movs	r3, #0
 801c322:	2213      	movs	r2, #19
 801c324:	9300      	str	r3, [sp, #0]
 801c326:	e7f1      	b.n	801c30c <lv_dropdown_open+0x204>
    switch(align) {
 801c328:	2902      	cmp	r1, #2
 801c32a:	d00b      	beq.n	801c344 <lv_dropdown_open+0x23c>
 801c32c:	2903      	cmp	r1, #3
 801c32e:	e7b7      	b.n	801c2a0 <lv_dropdown_open+0x198>
        lv_obj_set_x(label, lv_obj_get_content_width(dropdown->list) - lv_obj_get_width(label));
 801c330:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801c332:	f7e8 fda8 	bl	8004e86 <lv_obj_get_content_width>
 801c336:	4604      	mov	r4, r0
 801c338:	4630      	mov	r0, r6
 801c33a:	f7e8 fd98 	bl	8004e6e <lv_obj_get_width>
 801c33e:	1a20      	subs	r0, r4, r0
 801c340:	b201      	sxth	r1, r0
 801c342:	e7af      	b.n	801c2a4 <lv_dropdown_open+0x19c>
        lv_obj_set_x(label, lv_obj_get_content_width(dropdown->list) / 2 - lv_obj_get_width(label) / 2);
 801c344:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801c346:	f7e8 fd9e 	bl	8004e86 <lv_obj_get_content_width>
 801c34a:	4604      	mov	r4, r0
 801c34c:	4630      	mov	r0, r6
 801c34e:	f7e8 fd8e 	bl	8004e6e <lv_obj_get_width>
 801c352:	eb00 71d0 	add.w	r1, r0, r0, lsr #31
 801c356:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 801c35a:	1049      	asrs	r1, r1, #1
 801c35c:	ebc1 0164 	rsb	r1, r1, r4, asr #1
 801c360:	b209      	sxth	r1, r1
 801c362:	e79f      	b.n	801c2a4 <lv_dropdown_open+0x19c>
 801c364:	080294d8 	.word	0x080294d8

0801c368 <lv_dropdown_close>:
{
 801c368:	b510      	push	{r4, lr}
 801c36a:	4604      	mov	r4, r0
    lv_obj_clear_state(obj, LV_STATE_CHECKED);
 801c36c:	2101      	movs	r1, #1
 801c36e:	f7e7 fd1f 	bl	8003db0 <lv_obj_clear_state>
    dropdown->pr_opt_id = LV_DROPDOWN_PR_NONE;
 801c372:	f64f 73ff 	movw	r3, #65535	; 0xffff
    if(dropdown->list) lv_obj_del(dropdown->list);
 801c376:	6a60      	ldr	r0, [r4, #36]	; 0x24
    dropdown->pr_opt_id = LV_DROPDOWN_PR_NONE;
 801c378:	8763      	strh	r3, [r4, #58]	; 0x3a
    if(dropdown->list) lv_obj_del(dropdown->list);
 801c37a:	b118      	cbz	r0, 801c384 <lv_dropdown_close+0x1c>
}
 801c37c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if(dropdown->list) lv_obj_del(dropdown->list);
 801c380:	f7eb bbfe 	b.w	8007b80 <lv_obj_del>
}
 801c384:	bd10      	pop	{r4, pc}
	...

0801c388 <lv_dropdown_event>:
{
 801c388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    res = lv_obj_event_base(MY_CLASS, e);
 801c38c:	48bc      	ldr	r0, [pc, #752]	; (801c680 <lv_dropdown_event+0x2f8>)
{
 801c38e:	b09d      	sub	sp, #116	; 0x74
 801c390:	460e      	mov	r6, r1
    res = lv_obj_event_base(MY_CLASS, e);
 801c392:	f7e5 fd21 	bl	8001dd8 <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 801c396:	2801      	cmp	r0, #1
 801c398:	d14a      	bne.n	801c430 <lv_dropdown_event+0xa8>
    lv_event_code_t code = lv_event_get_code(e);
 801c39a:	4630      	mov	r0, r6
 801c39c:	f7e5 fdb6 	bl	8001f0c <lv_event_get_code>
 801c3a0:	4605      	mov	r5, r0
    lv_obj_t * obj = lv_event_get_target(e);
 801c3a2:	4630      	mov	r0, r6
 801c3a4:	f7e5 fdb0 	bl	8001f08 <lv_event_get_target>
    if(code == LV_EVENT_FOCUSED) {
 801c3a8:	2d0e      	cmp	r5, #14
    lv_obj_t * obj = lv_event_get_target(e);
 801c3aa:	4604      	mov	r4, r0
    if(code == LV_EVENT_FOCUSED) {
 801c3ac:	d10f      	bne.n	801c3ce <lv_dropdown_event+0x46>
        lv_group_t * g             = lv_obj_get_group(obj);
 801c3ae:	f7e7 fd17 	bl	8003de0 <lv_obj_get_group>
        bool editing               = lv_group_get_editing(g);
 801c3b2:	f7e5 ffab 	bl	800230c <lv_group_get_editing>
 801c3b6:	4605      	mov	r5, r0
        lv_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
 801c3b8:	f7e6 f81c 	bl	80023f4 <lv_indev_get_act>
 801c3bc:	f7e6 f820 	bl	8002400 <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_ENCODER) {
 801c3c0:	2804      	cmp	r0, #4
 801c3c2:	d135      	bne.n	801c430 <lv_dropdown_event+0xa8>
            if(editing) lv_dropdown_open(obj);
 801c3c4:	4620      	mov	r0, r4
 801c3c6:	b13d      	cbz	r5, 801c3d8 <lv_dropdown_event+0x50>
                lv_dropdown_open(obj);
 801c3c8:	f7ff fe9e 	bl	801c108 <lv_dropdown_open>
 801c3cc:	e030      	b.n	801c430 <lv_dropdown_event+0xa8>
    else if(code == LV_EVENT_DEFOCUSED || code == LV_EVENT_LEAVE) {
 801c3ce:	f1a5 030f 	sub.w	r3, r5, #15
 801c3d2:	b2db      	uxtb	r3, r3
 801c3d4:	2b01      	cmp	r3, #1
 801c3d6:	d802      	bhi.n	801c3de <lv_dropdown_event+0x56>
            lv_dropdown_close(obj);
 801c3d8:	f7ff ffc6 	bl	801c368 <lv_dropdown_close>
 801c3dc:	e028      	b.n	801c430 <lv_dropdown_event+0xa8>
    else if(code == LV_EVENT_RELEASED) {
 801c3de:	2d08      	cmp	r5, #8
 801c3e0:	d12f      	bne.n	801c442 <lv_dropdown_event+0xba>
        lv_indev_t * indev = lv_indev_get_act();
 801c3e2:	f7e6 f807 	bl	80023f4 <lv_indev_get_act>
 801c3e6:	4605      	mov	r5, r0
        if(lv_indev_get_scroll_obj(indev) == NULL) {
 801c3e8:	f7e6 f888 	bl	80024fc <lv_indev_get_scroll_obj>
 801c3ec:	bb18      	cbnz	r0, 801c436 <lv_dropdown_event+0xae>
            if(dropdown->list) {
 801c3ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
                lv_dropdown_close(obj);
 801c3f0:	4620      	mov	r0, r4
            if(dropdown->list) {
 801c3f2:	2b00      	cmp	r3, #0
 801c3f4:	d0e8      	beq.n	801c3c8 <lv_dropdown_event+0x40>
                lv_dropdown_close(obj);
 801c3f6:	f7ff ffb7 	bl	801c368 <lv_dropdown_close>
                if(dropdown->sel_opt_id_orig != dropdown->sel_opt_id) {
 801c3fa:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801c3fc:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 801c3fe:	429a      	cmp	r2, r3
 801c400:	d00b      	beq.n	801c41a <lv_dropdown_event+0x92>
                    dropdown->sel_opt_id_orig = dropdown->sel_opt_id;
 801c402:	8723      	strh	r3, [r4, #56]	; 0x38
                    res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, &id);
 801c404:	aa14      	add	r2, sp, #80	; 0x50
 801c406:	211c      	movs	r1, #28
 801c408:	4620      	mov	r0, r4
                    uint32_t id  = dropdown->sel_opt_id; /*Just to use uint32_t in event data*/
 801c40a:	9314      	str	r3, [sp, #80]	; 0x50
                    res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, &id);
 801c40c:	f7e5 fd5c 	bl	8001ec8 <lv_event_send>
                    if(res != LV_RES_OK) return;
 801c410:	2801      	cmp	r0, #1
 801c412:	d10d      	bne.n	801c430 <lv_dropdown_event+0xa8>
                    lv_obj_invalidate(obj);
 801c414:	4620      	mov	r0, r4
 801c416:	f7e8 fe7f 	bl	8005118 <lv_obj_invalidate>
                lv_indev_type_t indev_type = lv_indev_get_type(indev);
 801c41a:	4628      	mov	r0, r5
 801c41c:	f7e5 fff0 	bl	8002400 <lv_indev_get_type>
                if(indev_type == LV_INDEV_TYPE_ENCODER) {
 801c420:	2804      	cmp	r0, #4
 801c422:	d105      	bne.n	801c430 <lv_dropdown_event+0xa8>
                    lv_group_set_editing(lv_obj_get_group(obj), false);
 801c424:	4620      	mov	r0, r4
 801c426:	f7e7 fcdb 	bl	8003de0 <lv_obj_get_group>
 801c42a:	2100      	movs	r1, #0
 801c42c:	f7e5 ff0a 	bl	8002244 <lv_group_set_editing>
}
 801c430:	b01d      	add	sp, #116	; 0x74
 801c432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            dropdown->sel_opt_id = dropdown->sel_opt_id_orig;
 801c436:	8f23      	ldrh	r3, [r4, #56]	; 0x38
            lv_obj_invalidate(obj);
 801c438:	4620      	mov	r0, r4
            dropdown->sel_opt_id = dropdown->sel_opt_id_orig;
 801c43a:	86e3      	strh	r3, [r4, #54]	; 0x36
            lv_obj_invalidate(obj);
 801c43c:	f7e8 fe6c 	bl	8005118 <lv_obj_invalidate>
 801c440:	e7f6      	b.n	801c430 <lv_dropdown_event+0xa8>
    else if(code == LV_EVENT_STYLE_CHANGED) {
 801c442:	2d24      	cmp	r5, #36	; 0x24
 801c444:	d102      	bne.n	801c44c <lv_dropdown_event+0xc4>
        lv_obj_refresh_self_size(obj);
 801c446:	f7e8 fda2 	bl	8004f8e <lv_obj_refresh_self_size>
 801c44a:	e7f1      	b.n	801c430 <lv_dropdown_event+0xa8>
    else if(code == LV_EVENT_SIZE_CHANGED) {
 801c44c:	2d23      	cmp	r5, #35	; 0x23
 801c44e:	d0fa      	beq.n	801c446 <lv_dropdown_event+0xbe>
    else if(code == LV_EVENT_GET_SELF_SIZE) {
 801c450:	2d26      	cmp	r5, #38	; 0x26
 801c452:	d10d      	bne.n	801c470 <lv_dropdown_event+0xe8>
        lv_point_t * p = lv_event_get_param(e);
 801c454:	4630      	mov	r0, r6
 801c456:	f7e5 fd5b 	bl	8001f10 <lv_event_get_param>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 801c45a:	f241 4259 	movw	r2, #5209	; 0x1459
 801c45e:	4605      	mov	r5, r0
 801c460:	2100      	movs	r1, #0
 801c462:	4620      	mov	r0, r4
 801c464:	f7ea ff80 	bl	8007368 <lv_obj_get_style_prop>
        p->y = lv_font_get_line_height(font);
 801c468:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 801c46c:	806b      	strh	r3, [r5, #2]
 801c46e:	e7df      	b.n	801c430 <lv_dropdown_event+0xa8>
    else if(code == LV_EVENT_KEY) {
 801c470:	2d0d      	cmp	r5, #13
 801c472:	d127      	bne.n	801c4c4 <lv_dropdown_event+0x13c>
        char c = *((char *)lv_event_get_param(e));
 801c474:	4630      	mov	r0, r6
 801c476:	f7e5 fd4b 	bl	8001f10 <lv_event_get_param>
 801c47a:	7803      	ldrb	r3, [r0, #0]
        if(c == LV_KEY_RIGHT || c == LV_KEY_DOWN) {
 801c47c:	f1a3 0212 	sub.w	r2, r3, #18
 801c480:	2a01      	cmp	r2, #1
 801c482:	d80d      	bhi.n	801c4a0 <lv_dropdown_event+0x118>
            if(dropdown->list == NULL) {
 801c484:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c486:	b90b      	cbnz	r3, 801c48c <lv_dropdown_event+0x104>
                lv_dropdown_open(obj);
 801c488:	4620      	mov	r0, r4
 801c48a:	e79d      	b.n	801c3c8 <lv_dropdown_event+0x40>
            else if(dropdown->sel_opt_id + 1 < dropdown->option_cnt) {
 801c48c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801c48e:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 801c490:	3301      	adds	r3, #1
 801c492:	4293      	cmp	r3, r2
 801c494:	dacc      	bge.n	801c430 <lv_dropdown_event+0xa8>
                position_to_selected(obj);
 801c496:	4620      	mov	r0, r4
                dropdown->sel_opt_id--;
 801c498:	86e3      	strh	r3, [r4, #54]	; 0x36
                position_to_selected(obj);
 801c49a:	f7ff fd93 	bl	801bfc4 <position_to_selected>
 801c49e:	e7c7      	b.n	801c430 <lv_dropdown_event+0xa8>
        else if(c == LV_KEY_LEFT || c == LV_KEY_UP) {
 801c4a0:	2b14      	cmp	r3, #20
 801c4a2:	d001      	beq.n	801c4a8 <lv_dropdown_event+0x120>
 801c4a4:	2b11      	cmp	r3, #17
 801c4a6:	d107      	bne.n	801c4b8 <lv_dropdown_event+0x130>
            if(dropdown->list == NULL) {
 801c4a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c4aa:	2b00      	cmp	r3, #0
 801c4ac:	d0ec      	beq.n	801c488 <lv_dropdown_event+0x100>
            else if(dropdown->sel_opt_id > 0) {
 801c4ae:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801c4b0:	2b00      	cmp	r3, #0
 801c4b2:	d0bd      	beq.n	801c430 <lv_dropdown_event+0xa8>
                dropdown->sel_opt_id--;
 801c4b4:	3b01      	subs	r3, #1
 801c4b6:	e7ee      	b.n	801c496 <lv_dropdown_event+0x10e>
        else if(c == LV_KEY_ESC) {
 801c4b8:	2b1b      	cmp	r3, #27
 801c4ba:	d1b9      	bne.n	801c430 <lv_dropdown_event+0xa8>
            dropdown->sel_opt_id = dropdown->sel_opt_id_orig;
 801c4bc:	8f23      	ldrh	r3, [r4, #56]	; 0x38
            lv_dropdown_close(obj);
 801c4be:	4620      	mov	r0, r4
            dropdown->sel_opt_id = dropdown->sel_opt_id_orig;
 801c4c0:	86e3      	strh	r3, [r4, #54]	; 0x36
            lv_dropdown_close(obj);
 801c4c2:	e789      	b.n	801c3d8 <lv_dropdown_event+0x50>
    else if(code == LV_EVENT_DRAW_MAIN) {
 801c4c4:	2d15      	cmp	r5, #21
 801c4c6:	d1b3      	bne.n	801c430 <lv_dropdown_event+0xa8>
    lv_obj_t * obj = lv_event_get_target(e);
 801c4c8:	4630      	mov	r0, r6
 801c4ca:	f7e5 fd1d 	bl	8001f08 <lv_event_get_target>
 801c4ce:	4604      	mov	r4, r0
    const lv_area_t * clip_area = lv_event_get_param(e);
 801c4d0:	4630      	mov	r0, r6
 801c4d2:	f7e5 fd1d 	bl	8001f10 <lv_event_get_param>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 801c4d6:	f241 0232 	movw	r2, #4146	; 0x1032
 801c4da:	2100      	movs	r1, #0
 801c4dc:	4682      	mov	sl, r0
 801c4de:	4620      	mov	r0, r4
 801c4e0:	f7ea ff42 	bl	8007368 <lv_obj_get_style_prop>
 801c4e4:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801c4e6:	f241 0212 	movw	r2, #4114	; 0x1012
 801c4ea:	2100      	movs	r1, #0
 801c4ec:	4620      	mov	r0, r4
    lv_coord_t left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 801c4ee:	b2b7      	uxth	r7, r6
 801c4f0:	f7ea ff3a 	bl	8007368 <lv_obj_get_style_prop>
 801c4f4:	fa10 f086 	uxtah	r0, r0, r6
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801c4f8:	f241 0213 	movw	r2, #4115	; 0x1013
 801c4fc:	2100      	movs	r1, #0
 801c4fe:	b283      	uxth	r3, r0
 801c500:	4620      	mov	r0, r4
 801c502:	9304      	str	r3, [sp, #16]
 801c504:	f7ea ff30 	bl	8007368 <lv_obj_get_style_prop>
    lv_coord_t right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN) + border_width;
 801c508:	4438      	add	r0, r7
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801c50a:	f241 0210 	movw	r2, #4112	; 0x1010
 801c50e:	2100      	movs	r1, #0
 801c510:	fa1f f980 	uxth.w	r9, r0
 801c514:	4620      	mov	r0, r4
 801c516:	f7ea ff27 	bl	8007368 <lv_obj_get_style_prop>
    lv_coord_t top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + border_width;
 801c51a:	4438      	add	r0, r7
 801c51c:	b285      	uxth	r5, r0
    lv_draw_label_dsc_init(&symbol_dsc);
 801c51e:	a80c      	add	r0, sp, #48	; 0x30
 801c520:	f7ed fffe 	bl	800a520 <lv_draw_label_dsc_init>
    lv_obj_init_draw_label_dsc(obj, LV_PART_INDICATOR, &symbol_dsc);
 801c524:	aa0c      	add	r2, sp, #48	; 0x30
 801c526:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 801c52a:	4620      	mov	r0, r4
 801c52c:	f7e8 f954 	bl	80047d8 <lv_obj_init_draw_label_dsc>
    if(dropdown->text) opt_txt = dropdown->text;
 801c530:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 801c532:	b947      	cbnz	r7, 801c546 <lv_dropdown_event+0x1be>
        char * buf = lv_mem_buf_get(128);
 801c534:	2080      	movs	r0, #128	; 0x80
 801c536:	f7fb faaf 	bl	8017a98 <lv_mem_buf_get>
        lv_dropdown_get_selected_str(obj, buf, 128);
 801c53a:	2280      	movs	r2, #128	; 0x80
        char * buf = lv_mem_buf_get(128);
 801c53c:	4607      	mov	r7, r0
        lv_dropdown_get_selected_str(obj, buf, 128);
 801c53e:	4601      	mov	r1, r0
 801c540:	4620      	mov	r0, r4
 801c542:	f7ff fdb3 	bl	801c0ac <lv_dropdown_get_selected_str>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 801c546:	f241 426a 	movw	r2, #5226	; 0x146a
 801c54a:	2100      	movs	r1, #0
 801c54c:	4620      	mov	r0, r4
    if(dropdown->dir == LV_DIR_LEFT) symbol_to_left = true;
 801c54e:	f894 603c 	ldrb.w	r6, [r4, #60]	; 0x3c
 801c552:	f7ea ff09 	bl	8007368 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 801c556:	fa5f f880 	uxtb.w	r8, r0
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) symbol_to_left = true;
 801c55a:	f1b8 0f01 	cmp.w	r8, #1
 801c55e:	d007      	beq.n	801c570 <lv_dropdown_event+0x1e8>
    if(dropdown->dir == LV_DIR_LEFT) symbol_to_left = true;
 801c560:	f006 080f 	and.w	r8, r6, #15
 801c564:	f108 33ff 	add.w	r3, r8, #4294967295
 801c568:	f1d3 0800 	rsbs	r8, r3, #0
 801c56c:	eb48 0803 	adc.w	r8, r8, r3
    if(dropdown->symbol) {
 801c570:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801c572:	2800      	cmp	r0, #0
 801c574:	d03b      	beq.n	801c5ee <lv_dropdown_event+0x266>
        lv_img_src_t symbol_type = lv_img_src_get_type(dropdown->symbol);
 801c576:	f7ed ffb1 	bl	800a4dc <lv_img_src_get_type>
        if(symbol_type == LV_IMG_SRC_SYMBOL) {
 801c57a:	2802      	cmp	r0, #2
        lv_img_src_t symbol_type = lv_img_src_get_type(dropdown->symbol);
 801c57c:	4683      	mov	fp, r0
        if(symbol_type == LV_IMG_SRC_SYMBOL) {
 801c57e:	d16d      	bne.n	801c65c <lv_dropdown_event+0x2d4>
            lv_txt_get_size(&size, dropdown->symbol, symbol_dsc.font, symbol_dsc.letter_space, symbol_dsc.line_space, LV_COORD_MAX, symbol_dsc.flag);
 801c580:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 801c584:	a814      	add	r0, sp, #80	; 0x50
 801c586:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801c588:	9302      	str	r3, [sp, #8]
 801c58a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 801c58e:	9301      	str	r3, [sp, #4]
 801c590:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 801c594:	9300      	str	r3, [sp, #0]
 801c596:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	; 0x44
 801c59a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801c59c:	f7fc ffdb 	bl	8019556 <lv_txt_get_size>
            symbol_w = size.x;
 801c5a0:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	; 0x50
            symbol_h = size.y;
 801c5a4:	f9bd 6052 	ldrsh.w	r6, [sp, #82]	; 0x52
        if(symbol_to_left) {
 801c5a8:	b299      	uxth	r1, r3
 801c5aa:	f1b8 0f00 	cmp.w	r8, #0
 801c5ae:	d069      	beq.n	801c684 <lv_dropdown_event+0x2fc>
            symbol_area.x1 = obj->coords.x1 + left;
 801c5b0:	8aa2      	ldrh	r2, [r4, #20]
 801c5b2:	9804      	ldr	r0, [sp, #16]
 801c5b4:	4402      	add	r2, r0
 801c5b6:	b292      	uxth	r2, r2
 801c5b8:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
            symbol_area.x2 = symbol_area.x1 + symbol_w - 1;
 801c5bc:	3a01      	subs	r2, #1
 801c5be:	440a      	add	r2, r1
 801c5c0:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
        if(symbol_type == LV_IMG_SRC_SYMBOL) {
 801c5c4:	f1bb 0f02 	cmp.w	fp, #2
 801c5c8:	8ae2      	ldrh	r2, [r4, #22]
 801c5ca:	b2b1      	uxth	r1, r6
 801c5cc:	d165      	bne.n	801c69a <lv_dropdown_event+0x312>
            symbol_area.y1 = obj->coords.y1 + top;
 801c5ce:	442a      	add	r2, r5
            lv_draw_label(&symbol_area, clip_area, &symbol_dsc, dropdown->symbol, NULL);
 801c5d0:	2300      	movs	r3, #0
 801c5d2:	a80a      	add	r0, sp, #40	; 0x28
            symbol_area.y1 = obj->coords.y1 + top;
 801c5d4:	b292      	uxth	r2, r2
            lv_draw_label(&symbol_area, clip_area, &symbol_dsc, dropdown->symbol, NULL);
 801c5d6:	9300      	str	r3, [sp, #0]
 801c5d8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
            symbol_area.y1 = obj->coords.y1 + top;
 801c5da:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
            symbol_area.y2 = symbol_area.y1 + symbol_h - 1;
 801c5de:	3a01      	subs	r2, #1
 801c5e0:	4411      	add	r1, r2
            lv_draw_label(&symbol_area, clip_area, &symbol_dsc, dropdown->symbol, NULL);
 801c5e2:	aa0c      	add	r2, sp, #48	; 0x30
            symbol_area.y2 = symbol_area.y1 + symbol_h - 1;
 801c5e4:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
            lv_draw_label(&symbol_area, clip_area, &symbol_dsc, dropdown->symbol, NULL);
 801c5e8:	4651      	mov	r1, sl
 801c5ea:	f7ee f971 	bl	800a8d0 <lv_draw_label>
    lv_draw_label_dsc_init(&label_dsc);
 801c5ee:	a814      	add	r0, sp, #80	; 0x50
 801c5f0:	f7ed ff96 	bl	800a520 <lv_draw_label_dsc_init>
    lv_obj_init_draw_label_dsc(obj, LV_PART_MAIN, &label_dsc);
 801c5f4:	aa14      	add	r2, sp, #80	; 0x50
 801c5f6:	2100      	movs	r1, #0
 801c5f8:	4620      	mov	r0, r4
 801c5fa:	f7e8 f8ed 	bl	80047d8 <lv_obj_init_draw_label_dsc>
    lv_txt_get_size(&size, opt_txt, label_dsc.font, label_dsc.letter_space, label_dsc.line_space, LV_COORD_MAX, label_dsc.flag);
 801c5fe:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
 801c602:	a809      	add	r0, sp, #36	; 0x24
 801c604:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c606:	9302      	str	r3, [sp, #8]
 801c608:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 801c60c:	4639      	mov	r1, r7
 801c60e:	9301      	str	r3, [sp, #4]
 801c610:	f9bd 3062 	ldrsh.w	r3, [sp, #98]	; 0x62
 801c614:	9300      	str	r3, [sp, #0]
 801c616:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	; 0x64
 801c61a:	f7fc ff9c 	bl	8019556 <lv_txt_get_size>
    txt_area.y1 = obj->coords.y1 + top;
 801c61e:	8ae0      	ldrh	r0, [r4, #22]
    txt_area.y2 = txt_area.y1 + size.y;
 801c620:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
    txt_area.y1 = obj->coords.y1 + top;
 801c624:	4405      	add	r5, r0
 801c626:	b2ad      	uxth	r5, r5
 801c628:	f8ad 502a 	strh.w	r5, [sp, #42]	; 0x2a
    txt_area.y2 = txt_area.y1 + size.y;
 801c62c:	441d      	add	r5, r3
    if(dropdown->symbol == NULL) {
 801c62e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    txt_area.y2 = txt_area.y1 + size.y;
 801c630:	f8ad 502e 	strh.w	r5, [sp, #46]	; 0x2e
    if(dropdown->symbol == NULL) {
 801c634:	2b00      	cmp	r3, #0
 801c636:	d168      	bne.n	801c70a <lv_dropdown_event+0x382>
        txt_area.x1 = obj->coords.x1 + (lv_obj_get_width(obj) - size.x) / 2;
 801c638:	4620      	mov	r0, r4
 801c63a:	8aa5      	ldrh	r5, [r4, #20]
 801c63c:	f7e8 fc17 	bl	8004e6e <lv_obj_get_width>
 801c640:	f9bd 2024 	ldrsh.w	r2, [sp, #36]	; 0x24
 801c644:	1a80      	subs	r0, r0, r2
 801c646:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 801c64a:	eb05 0560 	add.w	r5, r5, r0, asr #1
 801c64e:	b2ab      	uxth	r3, r5
            txt_area.x1 = obj->coords.x1 + left;
 801c650:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
            txt_area.x2 = txt_area.x1 + size.x;
 801c654:	4413      	add	r3, r2
 801c656:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 801c65a:	e066      	b.n	801c72a <lv_dropdown_event+0x3a2>
            lv_res_t res = lv_img_decoder_get_info(dropdown->symbol, &header);
 801c65c:	a914      	add	r1, sp, #80	; 0x50
 801c65e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801c660:	f7f2 fd9c 	bl	800f19c <lv_img_decoder_get_info>
            if(res == LV_RES_OK) {
 801c664:	2801      	cmp	r0, #1
                symbol_w = header.w;
 801c666:	bf09      	itett	eq
 801c668:	9b14      	ldreq	r3, [sp, #80]	; 0x50
                symbol_h = -1;
 801c66a:	f04f 36ff 	movne.w	r6, #4294967295
                symbol_h = header.h;
 801c66e:	f8bd 6052 	ldrheq.w	r6, [sp, #82]	; 0x52
                symbol_w = header.w;
 801c672:	f3c3 238a 	ubfxeq	r3, r3, #10, #11
                symbol_w = -1;
 801c676:	bf14      	ite	ne
 801c678:	4633      	movne	r3, r6
                symbol_h = header.h;
 801c67a:	f3c6 164a 	ubfxeq	r6, r6, #5, #11
 801c67e:	e793      	b.n	801c5a8 <lv_dropdown_event+0x220>
 801c680:	080294bc 	.word	0x080294bc
            symbol_area.x1 = obj->coords.x2 - right - symbol_w;
 801c684:	8b20      	ldrh	r0, [r4, #24]
 801c686:	eba0 0009 	sub.w	r0, r0, r9
 801c68a:	b280      	uxth	r0, r0
 801c68c:	1a42      	subs	r2, r0, r1
            symbol_area.x2 = symbol_area.x1 + symbol_w - 1;
 801c68e:	3801      	subs	r0, #1
            symbol_area.x1 = obj->coords.x2 - right - symbol_w;
 801c690:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
            symbol_area.x2 = symbol_area.x1 + symbol_w - 1;
 801c694:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
 801c698:	e794      	b.n	801c5c4 <lv_dropdown_event+0x23c>
            symbol_area.y1 = obj->coords.y1 + (lv_obj_get_height(obj) - symbol_h) / 2;
 801c69a:	4620      	mov	r0, r4
 801c69c:	9305      	str	r3, [sp, #20]
 801c69e:	e9cd 1206 	strd	r1, r2, [sp, #24]
 801c6a2:	f7e8 fbea 	bl	8004e7a <lv_obj_get_height>
 801c6a6:	1b80      	subs	r0, r0, r6
 801c6a8:	9a07      	ldr	r2, [sp, #28]
            img_dsc.pivot.y = symbol_h / 2;
 801c6aa:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
            symbol_area.y1 = obj->coords.y1 + (lv_obj_get_height(obj) - symbol_h) / 2;
 801c6ae:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
            symbol_area.y2 = symbol_area.y1 + symbol_h - 1;
 801c6b2:	9906      	ldr	r1, [sp, #24]
            img_dsc.pivot.y = symbol_h / 2;
 801c6b4:	1076      	asrs	r6, r6, #1
            symbol_area.y1 = obj->coords.y1 + (lv_obj_get_height(obj) - symbol_h) / 2;
 801c6b6:	eb02 0260 	add.w	r2, r2, r0, asr #1
            symbol_area.y2 = symbol_area.y1 + symbol_h - 1;
 801c6ba:	3901      	subs	r1, #1
            lv_draw_img_dsc_init(&img_dsc);
 801c6bc:	a814      	add	r0, sp, #80	; 0x50
            symbol_area.y1 = obj->coords.y1 + (lv_obj_get_height(obj) - symbol_h) / 2;
 801c6be:	b292      	uxth	r2, r2
 801c6c0:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
            symbol_area.y2 = symbol_area.y1 + symbol_h - 1;
 801c6c4:	440a      	add	r2, r1
 801c6c6:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
            lv_draw_img_dsc_init(&img_dsc);
 801c6ca:	f7ed fde5 	bl	800a298 <lv_draw_img_dsc_init>
            lv_obj_init_draw_img_dsc(obj, LV_PART_INDICATOR, &img_dsc);
 801c6ce:	aa14      	add	r2, sp, #80	; 0x50
 801c6d0:	4620      	mov	r0, r4
 801c6d2:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 801c6d6:	f7e8 f8df 	bl	8004898 <lv_obj_init_draw_img_dsc>
            img_dsc.pivot.x = symbol_w / 2;
 801c6da:	9b05      	ldr	r3, [sp, #20]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ANGLE);
 801c6dc:	f640 020f 	movw	r2, #2063	; 0x80f
 801c6e0:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 801c6e4:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 801c6e8:	4620      	mov	r0, r4
            img_dsc.pivot.y = symbol_h / 2;
 801c6ea:	f8ad 6056 	strh.w	r6, [sp, #86]	; 0x56
            img_dsc.pivot.x = symbol_w / 2;
 801c6ee:	105b      	asrs	r3, r3, #1
 801c6f0:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
 801c6f4:	f7ea fe38 	bl	8007368 <lv_obj_get_style_prop>
            lv_draw_img(&symbol_area, clip_area, dropdown->symbol, &img_dsc);
 801c6f8:	ab14      	add	r3, sp, #80	; 0x50
            img_dsc.angle = lv_obj_get_style_transform_angle(obj, LV_PART_INDICATOR);
 801c6fa:	f8ad 0050 	strh.w	r0, [sp, #80]	; 0x50
            lv_draw_img(&symbol_area, clip_area, dropdown->symbol, &img_dsc);
 801c6fe:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801c700:	4651      	mov	r1, sl
 801c702:	a80a      	add	r0, sp, #40	; 0x28
 801c704:	f7ed fdfc 	bl	800a300 <lv_draw_img>
 801c708:	e771      	b.n	801c5ee <lv_dropdown_event+0x266>
        if(symbol_to_left) {
 801c70a:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801c70e:	f1b8 0f00 	cmp.w	r8, #0
 801c712:	d01a      	beq.n	801c74a <lv_dropdown_event+0x3c2>
            txt_area.x1 = obj->coords.x2 - right - size.x;
 801c714:	8b20      	ldrh	r0, [r4, #24]
 801c716:	eba0 0909 	sub.w	r9, r0, r9
 801c71a:	fa1f f989 	uxth.w	r9, r9
 801c71e:	eba9 0302 	sub.w	r3, r9, r2
            txt_area.x2 = txt_area.x1 + size.x;
 801c722:	f8ad 902c 	strh.w	r9, [sp, #44]	; 0x2c
            txt_area.x1 = obj->coords.x2 - right - size.x;
 801c726:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
    lv_draw_label(&txt_area, clip_area, &label_dsc, opt_txt, NULL);
 801c72a:	2300      	movs	r3, #0
 801c72c:	aa14      	add	r2, sp, #80	; 0x50
 801c72e:	4651      	mov	r1, sl
 801c730:	a80a      	add	r0, sp, #40	; 0x28
 801c732:	9300      	str	r3, [sp, #0]
 801c734:	463b      	mov	r3, r7
 801c736:	f7ee f8cb 	bl	800a8d0 <lv_draw_label>
    if(dropdown->text == NULL) {
 801c73a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801c73c:	2b00      	cmp	r3, #0
 801c73e:	f47f ae77 	bne.w	801c430 <lv_dropdown_event+0xa8>
        lv_mem_buf_release((char *)opt_txt);
 801c742:	4638      	mov	r0, r7
 801c744:	f7fb f804 	bl	8017750 <lv_mem_buf_release>
}
 801c748:	e672      	b.n	801c430 <lv_dropdown_event+0xa8>
            txt_area.x1 = obj->coords.x1 + left;
 801c74a:	8aa3      	ldrh	r3, [r4, #20]
 801c74c:	9904      	ldr	r1, [sp, #16]
 801c74e:	4419      	add	r1, r3
 801c750:	b28b      	uxth	r3, r1
 801c752:	e77d      	b.n	801c650 <lv_dropdown_event+0x2c8>

0801c754 <lv_dropdown_list_event>:
{
 801c754:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    lv_event_code_t code = lv_event_get_code(e);
 801c756:	4608      	mov	r0, r1
{
 801c758:	460d      	mov	r5, r1
    lv_event_code_t code = lv_event_get_code(e);
 801c75a:	f7e5 fbd7 	bl	8001f0c <lv_event_get_code>
    if(code != LV_EVENT_DRAW_POST) {
 801c75e:	2818      	cmp	r0, #24
    lv_event_code_t code = lv_event_get_code(e);
 801c760:	4604      	mov	r4, r0
    if(code != LV_EVENT_DRAW_POST) {
 801c762:	d141      	bne.n	801c7e8 <lv_dropdown_list_event+0x94>
    lv_obj_t * list = lv_event_get_target(e);
 801c764:	4628      	mov	r0, r5
 801c766:	f7e5 fbcf 	bl	8001f08 <lv_event_get_target>
    if(code == LV_EVENT_RELEASED) {
 801c76a:	2c08      	cmp	r4, #8
    lv_obj_t * list = lv_event_get_target(e);
 801c76c:	4606      	mov	r6, r0
    if(code == LV_EVENT_RELEASED) {
 801c76e:	d149      	bne.n	801c804 <lv_dropdown_list_event+0xb0>
        if(lv_indev_get_scroll_obj(lv_indev_get_act()) == NULL) {
 801c770:	f7e5 fe40 	bl	80023f4 <lv_indev_get_act>
 801c774:	f7e5 fec2 	bl	80024fc <lv_indev_get_scroll_obj>
 801c778:	4607      	mov	r7, r0
 801c77a:	2800      	cmp	r0, #0
 801c77c:	d13a      	bne.n	801c7f4 <lv_dropdown_list_event+0xa0>
    lv_obj_t * dropdown_obj = list->dropdown;
 801c77e:	6a74      	ldr	r4, [r6, #36]	; 0x24
    lv_indev_t * indev = lv_indev_get_act();
 801c780:	f7e5 fe38 	bl	80023f4 <lv_indev_get_act>
 801c784:	4605      	mov	r5, r0
    if(lv_indev_get_type(indev) == LV_INDEV_TYPE_ENCODER) {
 801c786:	f7e5 fe3b 	bl	8002400 <lv_indev_get_type>
 801c78a:	2804      	cmp	r0, #4
 801c78c:	d10c      	bne.n	801c7a8 <lv_dropdown_list_event+0x54>
        dropdown->sel_opt_id_orig = dropdown->sel_opt_id;
 801c78e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        lv_group_t * g      = lv_obj_get_group(dropdown_obj);
 801c790:	4620      	mov	r0, r4
        dropdown->sel_opt_id_orig = dropdown->sel_opt_id;
 801c792:	8723      	strh	r3, [r4, #56]	; 0x38
        lv_group_t * g      = lv_obj_get_group(dropdown_obj);
 801c794:	f7e7 fb24 	bl	8003de0 <lv_obj_get_group>
 801c798:	4606      	mov	r6, r0
        if(lv_group_get_editing(g)) {
 801c79a:	f7e5 fdb7 	bl	800230c <lv_group_get_editing>
 801c79e:	b118      	cbz	r0, 801c7a8 <lv_dropdown_list_event+0x54>
            lv_group_set_editing(g, false);
 801c7a0:	4639      	mov	r1, r7
 801c7a2:	4630      	mov	r0, r6
 801c7a4:	f7e5 fd4e 	bl	8002244 <lv_group_set_editing>
    if(lv_indev_get_type(indev) == LV_INDEV_TYPE_POINTER || lv_indev_get_type(indev) == LV_INDEV_TYPE_BUTTON) {
 801c7a8:	4628      	mov	r0, r5
 801c7aa:	f7e5 fe29 	bl	8002400 <lv_indev_get_type>
 801c7ae:	2801      	cmp	r0, #1
 801c7b0:	d122      	bne.n	801c7f8 <lv_dropdown_list_event+0xa4>
        lv_indev_get_point(indev, &p);
 801c7b2:	4669      	mov	r1, sp
 801c7b4:	4628      	mov	r0, r5
 801c7b6:	f7e5 fe7e 	bl	80024b6 <lv_indev_get_point>
        dropdown->sel_opt_id     = get_id_on_point(dropdown_obj, p.y);
 801c7ba:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 801c7be:	4620      	mov	r0, r4
 801c7c0:	f7ff fb0d 	bl	801bdde <get_id_on_point>
 801c7c4:	86e0      	strh	r0, [r4, #54]	; 0x36
        dropdown->sel_opt_id_orig = dropdown->sel_opt_id;
 801c7c6:	8720      	strh	r0, [r4, #56]	; 0x38
    lv_dropdown_close(dropdown_obj);
 801c7c8:	4620      	mov	r0, r4
 801c7ca:	f7ff fdcd 	bl	801c368 <lv_dropdown_close>
    if(dropdown->text == NULL) lv_obj_invalidate(dropdown_obj);
 801c7ce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801c7d0:	b913      	cbnz	r3, 801c7d8 <lv_dropdown_list_event+0x84>
 801c7d2:	4620      	mov	r0, r4
 801c7d4:	f7e8 fca0 	bl	8005118 <lv_obj_invalidate>
    uint32_t id  = dropdown->sel_opt_id; /*Just to use uint32_t in event data*/
 801c7d8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    lv_res_t res = lv_event_send(dropdown_obj, LV_EVENT_VALUE_CHANGED, &id);
 801c7da:	466a      	mov	r2, sp
 801c7dc:	211c      	movs	r1, #28
 801c7de:	4620      	mov	r0, r4
    uint32_t id  = dropdown->sel_opt_id; /*Just to use uint32_t in event data*/
 801c7e0:	9300      	str	r3, [sp, #0]
    lv_res_t res = lv_event_send(dropdown_obj, LV_EVENT_VALUE_CHANGED, &id);
 801c7e2:	f7e5 fb71 	bl	8001ec8 <lv_event_send>
    if(res != LV_RES_OK) return res;
 801c7e6:	e005      	b.n	801c7f4 <lv_dropdown_list_event+0xa0>
        res = lv_obj_event_base(MY_CLASS_LIST, e);
 801c7e8:	4629      	mov	r1, r5
 801c7ea:	483c      	ldr	r0, [pc, #240]	; (801c8dc <lv_dropdown_list_event+0x188>)
 801c7ec:	f7e5 faf4 	bl	8001dd8 <lv_obj_event_base>
        if(res != LV_RES_OK) return;
 801c7f0:	2801      	cmp	r0, #1
 801c7f2:	d0b7      	beq.n	801c764 <lv_dropdown_list_event+0x10>
}
 801c7f4:	b003      	add	sp, #12
 801c7f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(lv_indev_get_type(indev) == LV_INDEV_TYPE_POINTER || lv_indev_get_type(indev) == LV_INDEV_TYPE_BUTTON) {
 801c7f8:	4628      	mov	r0, r5
 801c7fa:	f7e5 fe01 	bl	8002400 <lv_indev_get_type>
 801c7fe:	2803      	cmp	r0, #3
 801c800:	d1e2      	bne.n	801c7c8 <lv_dropdown_list_event+0x74>
 801c802:	e7d6      	b.n	801c7b2 <lv_dropdown_list_event+0x5e>
    else if(code == LV_EVENT_PRESSED) {
 801c804:	2c01      	cmp	r4, #1
    lv_obj_t * dropdown_obj = ((lv_dropdown_list_t *)list)->dropdown;
 801c806:	6a47      	ldr	r7, [r0, #36]	; 0x24
    else if(code == LV_EVENT_PRESSED) {
 801c808:	d11c      	bne.n	801c844 <lv_dropdown_list_event+0xf0>
    lv_indev_t * indev = lv_indev_get_act();
 801c80a:	f7e5 fdf3 	bl	80023f4 <lv_indev_get_act>
    if(indev && (lv_indev_get_type(indev) == LV_INDEV_TYPE_POINTER || lv_indev_get_type(indev) == LV_INDEV_TYPE_BUTTON)) {
 801c80e:	4604      	mov	r4, r0
 801c810:	2800      	cmp	r0, #0
 801c812:	d0ef      	beq.n	801c7f4 <lv_dropdown_list_event+0xa0>
 801c814:	f7e5 fdf4 	bl	8002400 <lv_indev_get_type>
 801c818:	2801      	cmp	r0, #1
 801c81a:	d10d      	bne.n	801c838 <lv_dropdown_list_event+0xe4>
        lv_indev_get_point(indev, &p);
 801c81c:	4669      	mov	r1, sp
 801c81e:	4620      	mov	r0, r4
 801c820:	f7e5 fe49 	bl	80024b6 <lv_indev_get_point>
        dropdown->pr_opt_id = get_id_on_point(dropdown_obj, p.y);
 801c824:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 801c828:	4638      	mov	r0, r7
 801c82a:	f7ff fad8 	bl	801bdde <get_id_on_point>
 801c82e:	8778      	strh	r0, [r7, #58]	; 0x3a
        lv_obj_invalidate(list_obj);
 801c830:	4630      	mov	r0, r6
        lv_obj_invalidate(list);
 801c832:	f7e8 fc71 	bl	8005118 <lv_obj_invalidate>
 801c836:	e7dd      	b.n	801c7f4 <lv_dropdown_list_event+0xa0>
    if(indev && (lv_indev_get_type(indev) == LV_INDEV_TYPE_POINTER || lv_indev_get_type(indev) == LV_INDEV_TYPE_BUTTON)) {
 801c838:	4620      	mov	r0, r4
 801c83a:	f7e5 fde1 	bl	8002400 <lv_indev_get_type>
 801c83e:	2803      	cmp	r0, #3
 801c840:	d1d8      	bne.n	801c7f4 <lv_dropdown_list_event+0xa0>
 801c842:	e7eb      	b.n	801c81c <lv_dropdown_list_event+0xc8>
    else if(code == LV_EVENT_SCROLL_BEGIN) {
 801c844:	2c09      	cmp	r4, #9
 801c846:	d103      	bne.n	801c850 <lv_dropdown_list_event+0xfc>
        dropdown->pr_opt_id = LV_DROPDOWN_PR_NONE;
 801c848:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801c84c:	877b      	strh	r3, [r7, #58]	; 0x3a
 801c84e:	e7f0      	b.n	801c832 <lv_dropdown_list_event+0xde>
    else if(code == LV_EVENT_DRAW_POST) {
 801c850:	2c18      	cmp	r4, #24
 801c852:	d1cf      	bne.n	801c7f4 <lv_dropdown_list_event+0xa0>
    lv_obj_t * list_obj = lv_event_get_target(e);
 801c854:	4628      	mov	r0, r5
 801c856:	f7e5 fb57 	bl	8001f08 <lv_event_get_target>
    lv_obj_t * dropdown_obj = list->dropdown;
 801c85a:	6a44      	ldr	r4, [r0, #36]	; 0x24
    const lv_area_t * clip_area = lv_event_get_param(e);
 801c85c:	4628      	mov	r0, r5
 801c85e:	f7e5 fb57 	bl	8001f10 <lv_event_get_param>
    if(dropdown->list) {
 801c862:	6a62      	ldr	r2, [r4, #36]	; 0x24
    const lv_area_t * clip_area = lv_event_get_param(e);
 801c864:	4601      	mov	r1, r0
    if(dropdown->list) {
 801c866:	b362      	cbz	r2, 801c8c2 <lv_dropdown_list_event+0x16e>
        has_common = _lv_area_intersect(&clip_area_core, clip_area, &dropdown->list->coords);
 801c868:	3214      	adds	r2, #20
 801c86a:	4668      	mov	r0, sp
 801c86c:	f7fa fb13 	bl	8016e96 <_lv_area_intersect>
        if(has_common) {
 801c870:	b338      	cbz	r0, 801c8c2 <lv_dropdown_list_event+0x16e>
            if(dropdown->selected_highlight) {
 801c872:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 801c876:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
 801c878:	069b      	lsls	r3, r3, #26
 801c87a:	d527      	bpl.n	801c8cc <lv_dropdown_list_event+0x178>
                if(dropdown->pr_opt_id == dropdown->sel_opt_id) {
 801c87c:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 801c87e:	4291      	cmp	r1, r2
 801c880:	d108      	bne.n	801c894 <lv_dropdown_list_event+0x140>
                    draw_box(dropdown_obj, &clip_area_core, dropdown->pr_opt_id, LV_STATE_CHECKED | LV_STATE_PRESSED);
 801c882:	2321      	movs	r3, #33	; 0x21
 801c884:	460a      	mov	r2, r1
 801c886:	4620      	mov	r0, r4
 801c888:	4669      	mov	r1, sp
 801c88a:	f7ff fad4 	bl	801be36 <draw_box>
                    draw_box_label(dropdown_obj, &clip_area_core, dropdown->pr_opt_id, LV_STATE_CHECKED | LV_STATE_PRESSED);
 801c88e:	2321      	movs	r3, #33	; 0x21
                draw_box_label(dropdown_obj, &clip_area_core, dropdown->pr_opt_id, LV_STATE_PRESSED);
 801c890:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
 801c892:	e012      	b.n	801c8ba <lv_dropdown_list_event+0x166>
                    draw_box(dropdown_obj, &clip_area_core, dropdown->pr_opt_id, LV_STATE_PRESSED);
 801c894:	2320      	movs	r3, #32
 801c896:	4669      	mov	r1, sp
 801c898:	4620      	mov	r0, r4
 801c89a:	f7ff facc 	bl	801be36 <draw_box>
                    draw_box_label(dropdown_obj, &clip_area_core, dropdown->pr_opt_id, LV_STATE_PRESSED);
 801c89e:	2320      	movs	r3, #32
 801c8a0:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
 801c8a2:	4669      	mov	r1, sp
 801c8a4:	4620      	mov	r0, r4
 801c8a6:	f7ff fb27 	bl	801bef8 <draw_box_label>
                    draw_box(dropdown_obj, &clip_area_core, dropdown->sel_opt_id, LV_STATE_CHECKED);
 801c8aa:	2301      	movs	r3, #1
 801c8ac:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801c8ae:	4669      	mov	r1, sp
 801c8b0:	4620      	mov	r0, r4
 801c8b2:	f7ff fac0 	bl	801be36 <draw_box>
                    draw_box_label(dropdown_obj, &clip_area_core, dropdown->sel_opt_id, LV_STATE_CHECKED);
 801c8b6:	2301      	movs	r3, #1
 801c8b8:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
                draw_box_label(dropdown_obj, &clip_area_core, dropdown->pr_opt_id, LV_STATE_PRESSED);
 801c8ba:	4669      	mov	r1, sp
 801c8bc:	4620      	mov	r0, r4
 801c8be:	f7ff fb1b 	bl	801bef8 <draw_box_label>
        res = lv_obj_event_base(MY_CLASS_LIST, e);
 801c8c2:	4629      	mov	r1, r5
 801c8c4:	4805      	ldr	r0, [pc, #20]	; (801c8dc <lv_dropdown_list_event+0x188>)
 801c8c6:	f7e5 fa87 	bl	8001dd8 <lv_obj_event_base>
        if(res != LV_RES_OK) return;
 801c8ca:	e793      	b.n	801c7f4 <lv_dropdown_list_event+0xa0>
                draw_box(dropdown_obj, &clip_area_core, dropdown->pr_opt_id, LV_STATE_PRESSED);
 801c8cc:	2320      	movs	r3, #32
 801c8ce:	4669      	mov	r1, sp
 801c8d0:	4620      	mov	r0, r4
 801c8d2:	f7ff fab0 	bl	801be36 <draw_box>
                draw_box_label(dropdown_obj, &clip_area_core, dropdown->pr_opt_id, LV_STATE_PRESSED);
 801c8d6:	2320      	movs	r3, #32
 801c8d8:	e7da      	b.n	801c890 <lv_dropdown_list_event+0x13c>
 801c8da:	bf00      	nop
 801c8dc:	080294d8 	.word	0x080294d8

0801c8e0 <lv_label_dot_tmp_free>:
 * @param label pointer to label object.
 */
static void lv_label_dot_tmp_free(lv_obj_t * obj)
{
    lv_label_t * label = (lv_label_t *)obj;
    if(label->dot_tmp_alloc && label->dot.tmp_ptr) {
 801c8e0:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 801c8e4:	065b      	lsls	r3, r3, #25
{
 801c8e6:	b510      	push	{r4, lr}
 801c8e8:	4604      	mov	r4, r0
    if(label->dot_tmp_alloc && label->dot.tmp_ptr) {
 801c8ea:	d503      	bpl.n	801c8f4 <lv_label_dot_tmp_free+0x14>
 801c8ec:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801c8ee:	b108      	cbz	r0, 801c8f4 <lv_label_dot_tmp_free+0x14>
        lv_mem_free(label->dot.tmp_ptr);
 801c8f0:	f7fa ff20 	bl	8017734 <lv_mem_free>
    }
    label->dot_tmp_alloc = false;
 801c8f4:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 801c8f8:	f36f 1386 	bfc	r3, #6, #1
 801c8fc:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    label->dot.tmp_ptr   = NULL;
 801c900:	2300      	movs	r3, #0
 801c902:	62a3      	str	r3, [r4, #40]	; 0x28
}
 801c904:	bd10      	pop	{r4, pc}

0801c906 <lv_label_destructor>:
{
 801c906:	b510      	push	{r4, lr}
 801c908:	460c      	mov	r4, r1
    lv_label_dot_tmp_free(obj);
 801c90a:	4608      	mov	r0, r1
 801c90c:	f7ff ffe8 	bl	801c8e0 <lv_label_dot_tmp_free>
    if(!label->static_txt) lv_mem_free(label->text);
 801c910:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 801c914:	071b      	lsls	r3, r3, #28
 801c916:	d402      	bmi.n	801c91e <lv_label_destructor+0x18>
 801c918:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801c91a:	f7fa ff0b 	bl	8017734 <lv_mem_free>
    label->text = NULL;
 801c91e:	2300      	movs	r3, #0
 801c920:	6263      	str	r3, [r4, #36]	; 0x24
}
 801c922:	bd10      	pop	{r4, pc}

0801c924 <set_ofs_y_anim>:
}

static void set_ofs_y_anim(void * obj, int32_t v)
{
    lv_label_t * label = (lv_label_t *)obj;
    label->offset.y    = v;
 801c924:	f8a0 1046 	strh.w	r1, [r0, #70]	; 0x46
    lv_obj_invalidate(obj);
 801c928:	f7e8 bbf6 	b.w	8005118 <lv_obj_invalidate>

0801c92c <set_ofs_x_anim>:
    label->offset.x    = v;
 801c92c:	f8a0 1044 	strh.w	r1, [r0, #68]	; 0x44
    lv_obj_invalidate(obj);
 801c930:	f7e8 bbf2 	b.w	8005118 <lv_obj_invalidate>

0801c934 <lv_label_revert_dots>:
{
 801c934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(label->long_mode != LV_LABEL_LONG_DOT) return;
 801c936:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
{
 801c93a:	4604      	mov	r4, r0
    if(label->long_mode != LV_LABEL_LONG_DOT) return;
 801c93c:	f003 0307 	and.w	r3, r3, #7
 801c940:	2b01      	cmp	r3, #1
 801c942:	d123      	bne.n	801c98c <lv_label_revert_dots+0x58>
    if(label->dot_end == LV_LABEL_DOT_END_INV) return;
 801c944:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 801c946:	1c4a      	adds	r2, r1, #1
 801c948:	d020      	beq.n	801c98c <lv_label_revert_dots+0x58>
    uint32_t byte_i   = _lv_txt_encoded_get_byte_id(label->text, letter_i);
 801c94a:	4b12      	ldr	r3, [pc, #72]	; (801c994 <lv_label_revert_dots+0x60>)
 801c94c:	3903      	subs	r1, #3
 801c94e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801c950:	681b      	ldr	r3, [r3, #0]
 801c952:	4798      	blx	r3
    if(label->dot_tmp_alloc) {
 801c954:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 801c958:	065b      	lsls	r3, r3, #25
    while(label->text[byte_i + i] != '\0') {
 801c95a:	f04f 0300 	mov.w	r3, #0
        return label->dot.tmp_ptr;
 801c95e:	bf4c      	ite	mi
 801c960:	6aa6      	ldrmi	r6, [r4, #40]	; 0x28
        return label->dot.tmp;
 801c962:	f104 0628 	addpl.w	r6, r4, #40	; 0x28
    while(label->text[byte_i + i] != '\0') {
 801c966:	fa50 f283 	uxtab	r2, r0, r3
 801c96a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801c96c:	b2dd      	uxtb	r5, r3
 801c96e:	3301      	adds	r3, #1
 801c970:	f811 c002 	ldrb.w	ip, [r1, r2]
 801c974:	188f      	adds	r7, r1, r2
 801c976:	5d75      	ldrb	r5, [r6, r5]
 801c978:	f1bc 0f00 	cmp.w	ip, #0
 801c97c:	d107      	bne.n	801c98e <lv_label_revert_dots+0x5a>
    lv_label_dot_tmp_free(obj);
 801c97e:	4620      	mov	r0, r4
    label->text[byte_i + i] = dot_tmp[i];
 801c980:	703d      	strb	r5, [r7, #0]
    lv_label_dot_tmp_free(obj);
 801c982:	f7ff ffad 	bl	801c8e0 <lv_label_dot_tmp_free>
    label->dot_end = LV_LABEL_DOT_END_INV;
 801c986:	f04f 33ff 	mov.w	r3, #4294967295
 801c98a:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 801c98c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        label->text[byte_i + i] = dot_tmp[i];
 801c98e:	548d      	strb	r5, [r1, r2]
        i++;
 801c990:	e7e9      	b.n	801c966 <lv_label_revert_dots+0x32>
 801c992:	bf00      	nop
 801c994:	20000038 	.word	0x20000038

0801c998 <lv_obj_get_style_text_line_space.constprop.0>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 801c998:	f241 425b 	movw	r2, #5211	; 0x145b
 801c99c:	2100      	movs	r1, #0
static inline lv_coord_t lv_obj_get_style_text_line_space(const struct _lv_obj_t * obj, uint32_t part)
 801c99e:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 801c9a0:	f7ea fce2 	bl	8007368 <lv_obj_get_style_prop>
}
 801c9a4:	b200      	sxth	r0, r0
 801c9a6:	bd08      	pop	{r3, pc}

0801c9a8 <lv_obj_get_style_text_letter_space.constprop.0>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 801c9a8:	f241 425a 	movw	r2, #5210	; 0x145a
 801c9ac:	2100      	movs	r1, #0
static inline lv_coord_t lv_obj_get_style_text_letter_space(const struct _lv_obj_t * obj, uint32_t part)
 801c9ae:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 801c9b0:	f7ea fcda 	bl	8007368 <lv_obj_get_style_prop>
}
 801c9b4:	b200      	sxth	r0, r0
 801c9b6:	bd08      	pop	{r3, pc}

0801c9b8 <lv_obj_get_style_text_font.constprop.0>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 801c9b8:	f241 4259 	movw	r2, #5209	; 0x1459
 801c9bc:	2100      	movs	r1, #0
static inline const lv_font_t * lv_obj_get_style_text_font(const struct _lv_obj_t * obj, uint32_t part)
 801c9be:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 801c9c0:	f7ea fcd2 	bl	8007368 <lv_obj_get_style_prop>
}
 801c9c4:	bd08      	pop	{r3, pc}

0801c9c6 <lv_obj_get_style_width.constprop.0>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 801c9c6:	f241 0201 	movw	r2, #4097	; 0x1001
 801c9ca:	2100      	movs	r1, #0
static inline lv_coord_t lv_obj_get_style_width(const struct _lv_obj_t * obj, uint32_t part)
 801c9cc:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 801c9ce:	f7ea fccb 	bl	8007368 <lv_obj_get_style_prop>
}
 801c9d2:	b200      	sxth	r0, r0
 801c9d4:	bd08      	pop	{r3, pc}
	...

0801c9d8 <lv_label_get_letter_on.part.0>:
uint32_t lv_label_get_letter_on(const lv_obj_t * obj, lv_point_t * pos_in)
 801c9d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    pos.x = pos_in->x - lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 801c9dc:	f9b1 3000 	ldrsh.w	r3, [r1]
uint32_t lv_label_get_letter_on(const lv_obj_t * obj, lv_point_t * pos_in)
 801c9e0:	460c      	mov	r4, r1
 801c9e2:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801c9e4:	f241 0212 	movw	r2, #4114	; 0x1012
 801c9e8:	2100      	movs	r1, #0
 801c9ea:	ed2d 8b02 	vpush	{d8}
 801c9ee:	b08f      	sub	sp, #60	; 0x3c
    pos.x = pos_in->x - lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 801c9f0:	9304      	str	r3, [sp, #16]
 801c9f2:	f7ea fcb9 	bl	8007368 <lv_obj_get_style_prop>
    pos.y = pos_in->y - lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 801c9f6:	8864      	ldrh	r4, [r4, #2]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801c9f8:	f241 0210 	movw	r2, #4112	; 0x1010
 801c9fc:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801c9fe:	9006      	str	r0, [sp, #24]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801ca00:	4630      	mov	r0, r6
 801ca02:	f7ea fcb1 	bl	8007368 <lv_obj_get_style_prop>
 801ca06:	1a20      	subs	r0, r4, r0
    lv_obj_get_content_coords(obj, &txt_coords);
 801ca08:	a90c      	add	r1, sp, #48	; 0x30
    pos.y = pos_in->y - lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 801ca0a:	b203      	sxth	r3, r0
    lv_obj_get_content_coords(obj, &txt_coords);
 801ca0c:	4630      	mov	r0, r6
    pos.y = pos_in->y - lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 801ca0e:	9305      	str	r3, [sp, #20]
    lv_obj_get_content_coords(obj, &txt_coords);
 801ca10:	f7e8 fa6d 	bl	8004eee <lv_obj_get_content_coords>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801ca14:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
    const lv_font_t * font   = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 801ca18:	4630      	mov	r0, r6
 801ca1a:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 801ca1e:	3301      	adds	r3, #1
    return label->text;
 801ca20:	f8d6 b024 	ldr.w	fp, [r6, #36]	; 0x24
 801ca24:	1a9b      	subs	r3, r3, r2
 801ca26:	b21b      	sxth	r3, r3
 801ca28:	ee08 3a90 	vmov	s17, r3
    const lv_font_t * font   = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 801ca2c:	f7ff ffc4 	bl	801c9b8 <lv_obj_get_style_text_font.constprop.0>
 801ca30:	4680      	mov	r8, r0
    lv_coord_t line_space = lv_obj_get_style_text_line_space(obj, LV_PART_MAIN);
 801ca32:	4630      	mov	r0, r6
 801ca34:	f7ff ffb0 	bl	801c998 <lv_obj_get_style_text_line_space.constprop.0>
 801ca38:	4605      	mov	r5, r0
    lv_coord_t letter_space = lv_obj_get_style_text_letter_space(obj, LV_PART_MAIN);
 801ca3a:	4630      	mov	r0, r6
 801ca3c:	f7ff ffb4 	bl	801c9a8 <lv_obj_get_style_text_letter_space.constprop.0>
    lv_coord_t letter_height    = lv_font_get_line_height(font);
 801ca40:	f9b8 3008 	ldrsh.w	r3, [r8, #8]
    lv_coord_t letter_space = lv_obj_get_style_text_letter_space(obj, LV_PART_MAIN);
 801ca44:	ee08 0a10 	vmov	s16, r0
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 801ca48:	4630      	mov	r0, r6
    lv_coord_t letter_height    = lv_font_get_line_height(font);
 801ca4a:	9303      	str	r3, [sp, #12]
    if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 801ca4c:	f896 3048 	ldrb.w	r3, [r6, #72]	; 0x48
    if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 801ca50:	069a      	lsls	r2, r3, #26
    if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 801ca52:	f3c3 1700 	ubfx	r7, r3, #4, #1
    if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 801ca56:	bf48      	it	mi
 801ca58:	f047 0702 	orrmi.w	r7, r7, #2
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 801ca5c:	f7ff ffb3 	bl	801c9c6 <lv_obj_get_style_width.constprop.0>
 801ca60:	f242 73d1 	movw	r3, #10193	; 0x27d1
 801ca64:	4298      	cmp	r0, r3
 801ca66:	d105      	bne.n	801ca74 <lv_label_get_letter_on.part.0+0x9c>
 801ca68:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
 801ca6c:	075b      	lsls	r3, r3, #29
 801ca6e:	bf58      	it	pl
 801ca70:	f047 0704 	orrpl.w	r7, r7, #4
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_ALIGN);
 801ca74:	f241 425d 	movw	r2, #5213	; 0x145d
 801ca78:	2100      	movs	r1, #0
 801ca7a:	4630      	mov	r0, r6
 801ca7c:	f7ea fc74 	bl	8007368 <lv_obj_get_style_prop>
    if(align == LV_TEXT_ALIGN_AUTO) {
 801ca80:	f010 04ff 	ands.w	r4, r0, #255	; 0xff
 801ca84:	d10a      	bne.n	801ca9c <lv_label_get_letter_on.part.0+0xc4>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 801ca86:	4621      	mov	r1, r4
 801ca88:	f241 426a 	movw	r2, #5226	; 0x146a
 801ca8c:	4630      	mov	r0, r6
 801ca8e:	f7ea fc6b 	bl	8007368 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 801ca92:	b2c0      	uxtb	r0, r0
       else align = LV_TEXT_ALIGN_LEFT;
 801ca94:	2801      	cmp	r0, #1
 801ca96:	bf0c      	ite	eq
 801ca98:	2403      	moveq	r4, #3
 801ca9a:	2401      	movne	r4, #1
        y += letter_height + line_space;
 801ca9c:	9b03      	ldr	r3, [sp, #12]
        new_line_start += _lv_txt_get_next_line(&txt[line_start], font, letter_space, max_w, flag);
 801ca9e:	f04f 0900 	mov.w	r9, #0
        y += letter_height + line_space;
 801caa2:	442b      	add	r3, r5
        new_line_start += _lv_txt_get_next_line(&txt[line_start], font, letter_space, max_w, flag);
 801caa4:	464e      	mov	r6, r9
        y += letter_height + line_space;
 801caa6:	9307      	str	r3, [sp, #28]
 801caa8:	e07f      	b.n	801cbaa <lv_label_get_letter_on.part.0+0x1d2>
        new_line_start += _lv_txt_get_next_line(&txt[line_start], font, letter_space, max_w, flag);
 801caaa:	ee18 3a90 	vmov	r3, s17
 801caae:	ee18 2a10 	vmov	r2, s16
 801cab2:	4641      	mov	r1, r8
 801cab4:	4650      	mov	r0, sl
 801cab6:	9700      	str	r7, [sp, #0]
 801cab8:	f7fc fbc2 	bl	8019240 <_lv_txt_get_next_line>
        if(pos.y <= y + letter_height) {
 801cabc:	9b03      	ldr	r3, [sp, #12]
 801cabe:	9a05      	ldr	r2, [sp, #20]
        new_line_start += _lv_txt_get_next_line(&txt[line_start], font, letter_space, max_w, flag);
 801cac0:	1985      	adds	r5, r0, r6
        if(pos.y <= y + letter_height) {
 801cac2:	444b      	add	r3, r9
 801cac4:	429a      	cmp	r2, r3
 801cac6:	dc6b      	bgt.n	801cba0 <lv_label_get_letter_on.part.0+0x1c8>
            letter = _lv_txt_encoded_prev(txt, &tmp);
 801cac8:	4b4a      	ldr	r3, [pc, #296]	; (801cbf4 <lv_label_get_letter_on.part.0+0x21c>)
 801caca:	a90b      	add	r1, sp, #44	; 0x2c
 801cacc:	4658      	mov	r0, fp
            uint32_t tmp = new_line_start;
 801cace:	950b      	str	r5, [sp, #44]	; 0x2c
            letter = _lv_txt_encoded_prev(txt, &tmp);
 801cad0:	681b      	ldr	r3, [r3, #0]
 801cad2:	4798      	blx	r3
            if(letter != '\n' && txt[new_line_start] == '\0') new_line_start++;
 801cad4:	280a      	cmp	r0, #10
 801cad6:	d003      	beq.n	801cae0 <lv_label_get_letter_on.part.0+0x108>
 801cad8:	f81b 3005 	ldrb.w	r3, [fp, r5]
 801cadc:	b903      	cbnz	r3, 801cae0 <lv_label_get_letter_on.part.0+0x108>
 801cade:	3501      	adds	r5, #1
    if(align == LV_TEXT_ALIGN_CENTER) {
 801cae0:	2c02      	cmp	r4, #2
 801cae2:	d16b      	bne.n	801cbbc <lv_label_get_letter_on.part.0+0x1e4>
        line_w = lv_txt_get_width(bidi_txt, new_line_start - line_start, font, letter_space, flag);
 801cae4:	ee18 3a10 	vmov	r3, s16
 801cae8:	4642      	mov	r2, r8
 801caea:	1ba9      	subs	r1, r5, r6
 801caec:	4650      	mov	r0, sl
 801caee:	9700      	str	r7, [sp, #0]
 801caf0:	f7fc fcee 	bl	80194d0 <lv_txt_get_width>
 801caf4:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
 801caf8:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
        x += lv_area_get_width(&txt_coords) / 2 - line_w / 2;
 801cafc:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 801cb00:	3401      	adds	r4, #1
 801cb02:	1ae4      	subs	r4, r4, r3
 801cb04:	f3c4 33c0 	ubfx	r3, r4, #15, #1
 801cb08:	fa03 f384 	sxtah	r3, r3, r4
 801cb0c:	1044      	asrs	r4, r0, #1
 801cb0e:	ebc4 0463 	rsb	r4, r4, r3, asr #1
 801cb12:	b224      	sxth	r4, r4
    lv_text_cmd_state_t cmd_state = LV_TEXT_CMD_STATE_WAIT;
 801cb14:	2300      	movs	r3, #0
 801cb16:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    uint32_t i = 0;
 801cb1a:	9309      	str	r3, [sp, #36]	; 0x24
    if(new_line_start > 0) {
 801cb1c:	b385      	cbz	r5, 801cb80 <lv_label_get_letter_on.part.0+0x1a8>
    pos.x = pos_in->x - lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 801cb1e:	9a04      	ldr	r2, [sp, #16]
    uint32_t i_act = i;
 801cb20:	4699      	mov	r9, r3
    pos.x = pos_in->x - lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 801cb22:	9906      	ldr	r1, [sp, #24]
            if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 801cb24:	f007 0701 	and.w	r7, r7, #1
    pos.x = pos_in->x - lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 801cb28:	1a52      	subs	r2, r2, r1
 801cb2a:	b212      	sxth	r2, r2
 801cb2c:	9203      	str	r2, [sp, #12]
        while(i + line_start < new_line_start) {
 801cb2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cb30:	4433      	add	r3, r6
 801cb32:	429d      	cmp	r5, r3
 801cb34:	d924      	bls.n	801cb80 <lv_label_get_letter_on.part.0+0x1a8>
            _lv_txt_encoded_letter_next_2(bidi_txt, &letter, &letter_next, &i);
 801cb36:	ab09      	add	r3, sp, #36	; 0x24
 801cb38:	aa0b      	add	r2, sp, #44	; 0x2c
 801cb3a:	a90a      	add	r1, sp, #40	; 0x28
 801cb3c:	4650      	mov	r0, sl
 801cb3e:	f7fc fcad 	bl	801949c <_lv_txt_encoded_letter_next_2>
            if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 801cb42:	b147      	cbz	r7, 801cb56 <lv_label_get_letter_on.part.0+0x17e>
                if(_lv_txt_is_cmd(&cmd_state, bidi_txt[i]) != false) {
 801cb44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cb46:	f10d 0023 	add.w	r0, sp, #35	; 0x23
 801cb4a:	f81a 1003 	ldrb.w	r1, [sl, r3]
 801cb4e:	f7fc fb59 	bl	8019204 <_lv_txt_is_cmd>
 801cb52:	2800      	cmp	r0, #0
 801cb54:	d1eb      	bne.n	801cb2e <lv_label_get_letter_on.part.0+0x156>
            lv_coord_t gw = lv_font_get_glyph_width(font, letter, letter_next);
 801cb56:	4640      	mov	r0, r8
 801cb58:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 801cb5c:	f7f9 fcb2 	bl	80164c4 <lv_font_get_glyph_width>
            if(pos.x < x + gw || i + line_start == new_line_start ||  txt[i_act + line_start] == '\0') {
 801cb60:	9a03      	ldr	r2, [sp, #12]
 801cb62:	fa04 f380 	sxtah	r3, r4, r0
 801cb66:	429a      	cmp	r2, r3
 801cb68:	db08      	blt.n	801cb7c <lv_label_get_letter_on.part.0+0x1a4>
 801cb6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cb6c:	18f2      	adds	r2, r6, r3
 801cb6e:	4295      	cmp	r5, r2
 801cb70:	d004      	beq.n	801cb7c <lv_label_get_letter_on.part.0+0x1a4>
 801cb72:	eb0b 0206 	add.w	r2, fp, r6
 801cb76:	f812 2009 	ldrb.w	r2, [r2, r9]
 801cb7a:	bba2      	cbnz	r2, 801cbe6 <lv_label_get_letter_on.part.0+0x20e>
                i = i_act;
 801cb7c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
    logical_pos = _lv_txt_encoded_get_char_id(bidi_txt, i);
 801cb80:	4d1d      	ldr	r5, [pc, #116]	; (801cbf8 <lv_label_get_letter_on.part.0+0x220>)
 801cb82:	4650      	mov	r0, sl
 801cb84:	9909      	ldr	r1, [sp, #36]	; 0x24
 801cb86:	682b      	ldr	r3, [r5, #0]
 801cb88:	4798      	blx	r3
 801cb8a:	4604      	mov	r4, r0
    return  logical_pos + _lv_txt_encoded_get_char_id(txt, line_start);
 801cb8c:	682b      	ldr	r3, [r5, #0]
 801cb8e:	4631      	mov	r1, r6
 801cb90:	4658      	mov	r0, fp
 801cb92:	4798      	blx	r3
}
 801cb94:	4420      	add	r0, r4
 801cb96:	b00f      	add	sp, #60	; 0x3c
 801cb98:	ecbd 8b02 	vpop	{d8}
 801cb9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        y += letter_height + line_space;
 801cba0:	9b07      	ldr	r3, [sp, #28]
        new_line_start += _lv_txt_get_next_line(&txt[line_start], font, letter_space, max_w, flag);
 801cba2:	462e      	mov	r6, r5
 801cba4:	4499      	add	r9, r3
 801cba6:	fa0f f989 	sxth.w	r9, r9
    while(txt[line_start] != '\0') {
 801cbaa:	f81b 3006 	ldrb.w	r3, [fp, r6]
 801cbae:	eb0b 0a06 	add.w	sl, fp, r6
 801cbb2:	2b00      	cmp	r3, #0
 801cbb4:	f47f af79 	bne.w	801caaa <lv_label_get_letter_on.part.0+0xd2>
 801cbb8:	4635      	mov	r5, r6
 801cbba:	e791      	b.n	801cae0 <lv_label_get_letter_on.part.0+0x108>
    else if(align == LV_TEXT_ALIGN_RIGHT) {
 801cbbc:	2c03      	cmp	r4, #3
 801cbbe:	d110      	bne.n	801cbe2 <lv_label_get_letter_on.part.0+0x20a>
        line_w = lv_txt_get_width(bidi_txt, new_line_start - line_start, font, letter_space, flag);
 801cbc0:	ee18 3a10 	vmov	r3, s16
 801cbc4:	4642      	mov	r2, r8
 801cbc6:	1ba9      	subs	r1, r5, r6
 801cbc8:	4650      	mov	r0, sl
 801cbca:	9700      	str	r7, [sp, #0]
 801cbcc:	f7fc fc80 	bl	80194d0 <lv_txt_get_width>
 801cbd0:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 801cbd4:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 801cbd8:	3301      	adds	r3, #1
 801cbda:	1b1b      	subs	r3, r3, r4
        x += lv_area_get_width(&txt_coords) - line_w;
 801cbdc:	1a18      	subs	r0, r3, r0
 801cbde:	b204      	sxth	r4, r0
 801cbe0:	e798      	b.n	801cb14 <lv_label_get_letter_on.part.0+0x13c>
    lv_coord_t x = 0;
 801cbe2:	2400      	movs	r4, #0
 801cbe4:	e796      	b.n	801cb14 <lv_label_get_letter_on.part.0+0x13c>
            x += letter_space;
 801cbe6:	ee18 2a10 	vmov	r2, s16
            i_act = i;
 801cbea:	4699      	mov	r9, r3
            x += letter_space;
 801cbec:	4414      	add	r4, r2
 801cbee:	4404      	add	r4, r0
 801cbf0:	b224      	sxth	r4, r4
            i_act = i;
 801cbf2:	e79c      	b.n	801cb2e <lv_label_get_letter_on.part.0+0x156>
 801cbf4:	20000044 	.word	0x20000044
 801cbf8:	2000003c 	.word	0x2000003c

0801cbfc <lv_label_refr_text>:
    if(label->text == NULL) return;
 801cbfc:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 801cbfe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cc02:	4604      	mov	r4, r0
 801cc04:	b09d      	sub	sp, #116	; 0x74
    if(label->text == NULL) return;
 801cc06:	2b00      	cmp	r3, #0
 801cc08:	f000 80df 	beq.w	801cdca <lv_label_refr_text+0x1ce>
    label->hint.line_start = -1; /*The hint is invalid if the text changes*/
 801cc0c:	f04f 33ff 	mov.w	r3, #4294967295
    lv_obj_get_content_coords(obj, &txt_coords);
 801cc10:	a909      	add	r1, sp, #36	; 0x24
    label->hint.line_start = -1; /*The hint is invalid if the text changes*/
 801cc12:	6303      	str	r3, [r0, #48]	; 0x30
    lv_obj_get_content_coords(obj, &txt_coords);
 801cc14:	f7e8 f96b 	bl	8004eee <lv_obj_get_content_coords>
 801cc18:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
 801cc1c:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    const lv_font_t * font   = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 801cc20:	4620      	mov	r0, r4
 801cc22:	f109 0901 	add.w	r9, r9, #1
 801cc26:	eba9 0903 	sub.w	r9, r9, r3
 801cc2a:	f7ff fec5 	bl	801c9b8 <lv_obj_get_style_text_font.constprop.0>
 801cc2e:	4606      	mov	r6, r0
    lv_coord_t line_space = lv_obj_get_style_text_line_space(obj, LV_PART_MAIN);
 801cc30:	4620      	mov	r0, r4
 801cc32:	f7ff feb1 	bl	801c998 <lv_obj_get_style_text_line_space.constprop.0>
 801cc36:	4605      	mov	r5, r0
    lv_coord_t letter_space = lv_obj_get_style_text_letter_space(obj, LV_PART_MAIN);
 801cc38:	4620      	mov	r0, r4
 801cc3a:	fa0f f989 	sxth.w	r9, r9
 801cc3e:	f7ff feb3 	bl	801c9a8 <lv_obj_get_style_text_letter_space.constprop.0>
    if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 801cc42:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    lv_coord_t letter_space = lv_obj_get_style_text_letter_space(obj, LV_PART_MAIN);
 801cc46:	4680      	mov	r8, r0
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 801cc48:	4620      	mov	r0, r4
    if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 801cc4a:	069a      	lsls	r2, r3, #26
    if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 801cc4c:	f3c3 1700 	ubfx	r7, r3, #4, #1
    if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 801cc50:	bf48      	it	mi
 801cc52:	f047 0702 	orrmi.w	r7, r7, #2
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 801cc56:	f7ff feb6 	bl	801c9c6 <lv_obj_get_style_width.constprop.0>
 801cc5a:	f242 73d1 	movw	r3, #10193	; 0x27d1
 801cc5e:	4298      	cmp	r0, r3
 801cc60:	d105      	bne.n	801cc6e <lv_label_refr_text+0x72>
 801cc62:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 801cc66:	075b      	lsls	r3, r3, #29
 801cc68:	bf58      	it	pl
 801cc6a:	f047 0704 	orrpl.w	r7, r7, #4
    lv_txt_get_size(&size, label->text, font, letter_space, line_space, max_w, flag);
 801cc6e:	4643      	mov	r3, r8
 801cc70:	4632      	mov	r2, r6
 801cc72:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801cc74:	a807      	add	r0, sp, #28
 801cc76:	9500      	str	r5, [sp, #0]
 801cc78:	e9cd 9701 	strd	r9, r7, [sp, #4]
 801cc7c:	f7fc fc6b 	bl	8019556 <lv_txt_get_size>
    lv_obj_refresh_self_size(obj);
 801cc80:	4620      	mov	r0, r4
 801cc82:	f7e8 f984 	bl	8004f8e <lv_obj_refresh_self_size>
    if(label->long_mode == LV_LABEL_LONG_SCROLL) {
 801cc86:	f894 9048 	ldrb.w	r9, [r4, #72]	; 0x48
 801cc8a:	f009 0907 	and.w	r9, r9, #7
 801cc8e:	f1b9 0f02 	cmp.w	r9, #2
 801cc92:	f040 80a8 	bne.w	801cde6 <lv_label_refr_text+0x1ea>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ANIM_SPEED);
 801cc96:	2266      	movs	r2, #102	; 0x66
 801cc98:	2100      	movs	r1, #0
 801cc9a:	4620      	mov	r0, r4
 801cc9c:	f7ea fb64 	bl	8007368 <lv_obj_get_style_prop>
        uint16_t anim_speed = lv_obj_get_style_anim_speed(obj, LV_PART_MAIN);
 801cca0:	b287      	uxth	r7, r0
        if(anim_speed == 0) anim_speed = LV_LABEL_DEF_SCROLL_SPEED;
 801cca2:	b947      	cbnz	r7, 801ccb6 <lv_label_refr_text+0xba>
 801cca4:	2703      	movs	r7, #3
 801cca6:	4620      	mov	r0, r4
 801cca8:	f7ea fe88 	bl	80079bc <lv_obj_get_disp>
 801ccac:	f7f9 fe22 	bl	80168f4 <lv_disp_get_dpi>
 801ccb0:	fb90 f0f7 	sdiv	r0, r0, r7
 801ccb4:	b287      	uxth	r7, r0
        lv_anim_init(&a);
 801ccb6:	a80b      	add	r0, sp, #44	; 0x2c
 801ccb8:	2500      	movs	r5, #0
 801ccba:	f7f9 ffbf 	bl	8016c3c <lv_anim_init>
 * @param a pointer to an initialized `lv_anim_t` variable
 * @param cnt repeat count or `LV_ANIM_REPEAT_INFINITE` for infinite repetition. 0: to disable repetition.
 */
static inline void lv_anim_set_repeat_count(lv_anim_t * a, uint16_t cnt)
{
    a->repeat_cnt = cnt;
 801ccbe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801ccc2:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801ccc6:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    a->playback_delay = delay;
 801ccca:	f44f 7396 	mov.w	r3, #300	; 0x12c
        if(size.x > lv_area_get_width(&txt_coords)) {
 801ccce:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 801ccd2:	9317      	str	r3, [sp, #92]	; 0x5c
 * @param a pointer to an initialized `lv_anim_t` variable
 * @param delay delay in milliseconds before repeating the animation.
 */
static inline void lv_anim_set_repeat_delay(lv_anim_t * a, uint32_t delay)
{
    a->repeat_delay = delay;
 801ccd4:	9319      	str	r3, [sp, #100]	; 0x64
 801ccd6:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    a->var = var;
 801ccda:	940b      	str	r4, [sp, #44]	; 0x2c
 801ccdc:	3301      	adds	r3, #1
 801ccde:	1a5b      	subs	r3, r3, r1
 801cce0:	b21b      	sxth	r3, r3
 801cce2:	429a      	cmp	r2, r3
 801cce4:	dd76      	ble.n	801cdd4 <lv_label_refr_text+0x1d8>
            lv_anim_set_values(&a, 0, lv_area_get_width(&txt_coords) - size.x);
 801cce6:	1a9b      	subs	r3, r3, r2
    a->exec_cb = exec_cb;
 801cce8:	498f      	ldr	r1, [pc, #572]	; (801cf28 <lv_label_refr_text+0x32c>)
            lv_anim_t * anim_cur = lv_anim_get(obj, set_ofs_x_anim);
 801ccea:	4620      	mov	r0, r4
    a->end_value = end;
 801ccec:	9314      	str	r3, [sp, #80]	; 0x50
    a->exec_cb = exec_cb;
 801ccee:	910c      	str	r1, [sp, #48]	; 0x30
    a->current_value = start;
 801ccf0:	e9cd 5512 	strd	r5, r5, [sp, #72]	; 0x48
 801ccf4:	f7fa f82e 	bl	8016d54 <lv_anim_get>
            if(anim_cur) {
 801ccf8:	2800      	cmp	r0, #0
 801ccfa:	d069      	beq.n	801cdd0 <lv_label_refr_text+0x1d4>
                act_time = anim_cur->act_time;
 801ccfc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
                playback_now = anim_cur->playback_now;
 801ccfe:	f890 003e 	ldrb.w	r0, [r0, #62]	; 0x3e
 801cd02:	f3c0 0040 	ubfx	r0, r0, #1, #1
            if(act_time < a.time) {
 801cd06:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801cd08:	429a      	cmp	r2, r3
 801cd0a:	dd10      	ble.n	801cd2e <lv_label_refr_text+0x132>
                a.act_time = act_time;      /*To keep the old position*/
 801cd0c:	9316      	str	r3, [sp, #88]	; 0x58
                a.early_apply = 0;
 801cd0e:	f89d 306a 	ldrb.w	r3, [sp, #106]	; 0x6a
 801cd12:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801cd14:	f36f 0300 	bfc	r3, #0, #1
 801cd18:	9914      	ldr	r1, [sp, #80]	; 0x50
 801cd1a:	f88d 306a 	strb.w	r3, [sp, #106]	; 0x6a
                if(playback_now) {
 801cd1e:	b130      	cbz	r0, 801cd2e <lv_label_refr_text+0x132>
                    a.playback_now = 1;
 801cd20:	b2db      	uxtb	r3, r3
                    a.start_value = a.end_value;
 801cd22:	9112      	str	r1, [sp, #72]	; 0x48
                    a.end_value   = tmp;
 801cd24:	9214      	str	r2, [sp, #80]	; 0x50
                    a.playback_now = 1;
 801cd26:	f043 0302 	orr.w	r3, r3, #2
 801cd2a:	f88d 306a 	strb.w	r3, [sp, #106]	; 0x6a
            lv_anim_set_time(&a, lv_anim_speed_to_time(anim_speed, a.start_value, a.end_value));
 801cd2e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801cd30:	4638      	mov	r0, r7
 801cd32:	9912      	ldr	r1, [sp, #72]	; 0x48
            hor_anim = true;
 801cd34:	2501      	movs	r5, #1
            lv_anim_set_time(&a, lv_anim_speed_to_time(anim_speed, a.start_value, a.end_value));
 801cd36:	f7fa f823 	bl	8016d80 <lv_anim_speed_to_time>
    a->time = duration;
 801cd3a:	9015      	str	r0, [sp, #84]	; 0x54
    a->playback_time = time;
 801cd3c:	9018      	str	r0, [sp, #96]	; 0x60
            lv_anim_start(&a);
 801cd3e:	a80b      	add	r0, sp, #44	; 0x2c
 801cd40:	f7f9 ffc2 	bl	8016cc8 <lv_anim_start>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801cd44:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801cd48:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 801cd4c:	3301      	adds	r3, #1
        if(size.y > lv_area_get_height(&txt_coords) && hor_anim == false) {
 801cd4e:	f9bd 201e 	ldrsh.w	r2, [sp, #30]
 801cd52:	1a5b      	subs	r3, r3, r1
 801cd54:	b21b      	sxth	r3, r3
 801cd56:	429a      	cmp	r2, r3
 801cd58:	f340 80c7 	ble.w	801ceea <lv_label_refr_text+0x2ee>
 801cd5c:	2d00      	cmp	r5, #0
 801cd5e:	f040 80c4 	bne.w	801ceea <lv_label_refr_text+0x2ee>
            lv_anim_set_values(&a, 0, lv_area_get_height(&txt_coords) - size.y - (lv_font_get_line_height(font)));
 801cd62:	1a9b      	subs	r3, r3, r2
 801cd64:	f9b6 2008 	ldrsh.w	r2, [r6, #8]
    a->exec_cb = exec_cb;
 801cd68:	4970      	ldr	r1, [pc, #448]	; (801cf2c <lv_label_refr_text+0x330>)
            lv_anim_t * anim_cur = lv_anim_get(obj, set_ofs_y_anim);
 801cd6a:	4620      	mov	r0, r4
            lv_anim_set_values(&a, 0, lv_area_get_height(&txt_coords) - size.y - (lv_font_get_line_height(font)));
 801cd6c:	1a9b      	subs	r3, r3, r2
 801cd6e:	910c      	str	r1, [sp, #48]	; 0x30
    a->end_value = end;
 801cd70:	9314      	str	r3, [sp, #80]	; 0x50
    a->current_value = start;
 801cd72:	e9cd 5512 	strd	r5, r5, [sp, #72]	; 0x48
            lv_anim_t * anim_cur = lv_anim_get(obj, set_ofs_y_anim);
 801cd76:	f7f9 ffed 	bl	8016d54 <lv_anim_get>
            if(anim_cur) {
 801cd7a:	2800      	cmp	r0, #0
 801cd7c:	d031      	beq.n	801cde2 <lv_label_refr_text+0x1e6>
                playback_now = anim_cur->playback_now;
 801cd7e:	f890 503e 	ldrb.w	r5, [r0, #62]	; 0x3e
                act_time = anim_cur->act_time;
 801cd82:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
                playback_now = anim_cur->playback_now;
 801cd84:	f3c5 0540 	ubfx	r5, r5, #1, #1
            if(act_time < a.time) {
 801cd88:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801cd8a:	429a      	cmp	r2, r3
 801cd8c:	dd10      	ble.n	801cdb0 <lv_label_refr_text+0x1b4>
                a.act_time = act_time;      /*To keep the old position*/
 801cd8e:	9316      	str	r3, [sp, #88]	; 0x58
                a.early_apply = 0;
 801cd90:	f89d 306a 	ldrb.w	r3, [sp, #106]	; 0x6a
 801cd94:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801cd96:	f36f 0300 	bfc	r3, #0, #1
 801cd9a:	9914      	ldr	r1, [sp, #80]	; 0x50
 801cd9c:	f88d 306a 	strb.w	r3, [sp, #106]	; 0x6a
                if(playback_now) {
 801cda0:	b135      	cbz	r5, 801cdb0 <lv_label_refr_text+0x1b4>
                    a.playback_now = 1;
 801cda2:	b2db      	uxtb	r3, r3
                    a.start_value = a.end_value;
 801cda4:	9112      	str	r1, [sp, #72]	; 0x48
                    a.end_value   = tmp;
 801cda6:	9214      	str	r2, [sp, #80]	; 0x50
                    a.playback_now = 1;
 801cda8:	f043 0302 	orr.w	r3, r3, #2
 801cdac:	f88d 306a 	strb.w	r3, [sp, #106]	; 0x6a
            lv_anim_set_time(&a, lv_anim_speed_to_time(anim_speed, a.start_value, a.end_value));
 801cdb0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801cdb2:	4638      	mov	r0, r7
 801cdb4:	9912      	ldr	r1, [sp, #72]	; 0x48
 801cdb6:	f7f9 ffe3 	bl	8016d80 <lv_anim_speed_to_time>
    a->time = duration;
 801cdba:	9015      	str	r0, [sp, #84]	; 0x54
    a->playback_time = time;
 801cdbc:	9018      	str	r0, [sp, #96]	; 0x60
            lv_anim_start(&a);
 801cdbe:	a80b      	add	r0, sp, #44	; 0x2c
 801cdc0:	f7f9 ff82 	bl	8016cc8 <lv_anim_start>
    lv_obj_invalidate(obj);
 801cdc4:	4620      	mov	r0, r4
 801cdc6:	f7e8 f9a7 	bl	8005118 <lv_obj_invalidate>
}
 801cdca:	b01d      	add	sp, #116	; 0x74
 801cdcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            int32_t act_time = 0;
 801cdd0:	4603      	mov	r3, r0
 801cdd2:	e798      	b.n	801cd06 <lv_label_refr_text+0x10a>
            lv_anim_del(obj, set_ofs_x_anim);
 801cdd4:	4954      	ldr	r1, [pc, #336]	; (801cf28 <lv_label_refr_text+0x32c>)
 801cdd6:	4620      	mov	r0, r4
 801cdd8:	f7f9 ff4a 	bl	8016c70 <lv_anim_del>
            label->offset.x = 0;
 801cddc:	f8a4 5044 	strh.w	r5, [r4, #68]	; 0x44
 801cde0:	e7b0      	b.n	801cd44 <lv_label_refr_text+0x148>
            int32_t act_time = 0;
 801cde2:	462b      	mov	r3, r5
 801cde4:	e7d0      	b.n	801cd88 <lv_label_refr_text+0x18c>
    else if(label->long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR) {
 801cde6:	f1b9 0f03 	cmp.w	r9, #3
 801cdea:	f040 8086 	bne.w	801cefa <lv_label_refr_text+0x2fe>
 801cdee:	2266      	movs	r2, #102	; 0x66
 801cdf0:	2100      	movs	r1, #0
 801cdf2:	4620      	mov	r0, r4
 801cdf4:	f7ea fab8 	bl	8007368 <lv_obj_get_style_prop>
        uint16_t anim_speed = lv_obj_get_style_anim_speed(obj, LV_PART_MAIN);
 801cdf8:	b287      	uxth	r7, r0
        if(anim_speed == 0) anim_speed = LV_LABEL_DEF_SCROLL_SPEED;
 801cdfa:	b93f      	cbnz	r7, 801ce0c <lv_label_refr_text+0x210>
 801cdfc:	4620      	mov	r0, r4
 801cdfe:	f7ea fddd 	bl	80079bc <lv_obj_get_disp>
 801ce02:	f7f9 fd77 	bl	80168f4 <lv_disp_get_dpi>
 801ce06:	fb90 f0f9 	sdiv	r0, r0, r9
 801ce0a:	b287      	uxth	r7, r0
        lv_anim_init(&a);
 801ce0c:	a80b      	add	r0, sp, #44	; 0x2c
 801ce0e:	f7f9 ff15 	bl	8016c3c <lv_anim_init>
    a->repeat_cnt = cnt;
 801ce12:	f64f 73ff 	movw	r3, #65535	; 0xffff
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801ce16:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801ce1a:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
 801ce1e:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    a->var = var;
 801ce22:	940b      	str	r4, [sp, #44]	; 0x2c
 801ce24:	3301      	adds	r3, #1
 801ce26:	1a9b      	subs	r3, r3, r2
        if(size.x > lv_area_get_width(&txt_coords)) {
 801ce28:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 801ce2c:	b21b      	sxth	r3, r3
 801ce2e:	429a      	cmp	r2, r3
 801ce30:	dd53      	ble.n	801ceda <lv_label_refr_text+0x2de>
            lv_anim_set_values(&a, 0, -size.x - lv_font_get_glyph_width(font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT);
 801ce32:	2220      	movs	r2, #32
 801ce34:	4630      	mov	r0, r6
    a->exec_cb = exec_cb;
 801ce36:	4d3c      	ldr	r5, [pc, #240]	; (801cf28 <lv_label_refr_text+0x32c>)
 801ce38:	4611      	mov	r1, r2
 801ce3a:	f7f9 fb43 	bl	80164c4 <lv_font_get_glyph_width>
 801ce3e:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 801ce42:	eba0 0080 	sub.w	r0, r0, r0, lsl #2
    a->start_value = start;
 801ce46:	2100      	movs	r1, #0
    a->exec_cb = exec_cb;
 801ce48:	950c      	str	r5, [sp, #48]	; 0x30
 801ce4a:	1a82      	subs	r2, r0, r2
            lv_anim_set_time(&a, lv_anim_speed_to_time(anim_speed, a.start_value, a.end_value));
 801ce4c:	4638      	mov	r0, r7
    a->current_value = start;
 801ce4e:	e9cd 1112 	strd	r1, r1, [sp, #72]	; 0x48
    a->end_value = end;
 801ce52:	9214      	str	r2, [sp, #80]	; 0x50
 801ce54:	f7f9 ff94 	bl	8016d80 <lv_anim_speed_to_time>
            lv_anim_t * anim_cur = lv_anim_get(obj, set_ofs_x_anim);
 801ce58:	4629      	mov	r1, r5
    a->time = duration;
 801ce5a:	9015      	str	r0, [sp, #84]	; 0x54
 801ce5c:	4620      	mov	r0, r4
 801ce5e:	f7f9 ff79 	bl	8016d54 <lv_anim_get>
            int32_t act_time = anim_cur ? anim_cur->act_time : 0;
 801ce62:	b100      	cbz	r0, 801ce66 <lv_label_refr_text+0x26a>
 801ce64:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
            if(act_time < a.time) {
 801ce66:	9b15      	ldr	r3, [sp, #84]	; 0x54
            hor_anim = true;
 801ce68:	2501      	movs	r5, #1
            if(act_time < a.time) {
 801ce6a:	4283      	cmp	r3, r0
                a.early_apply = 0;
 801ce6c:	bfc4      	itt	gt
 801ce6e:	f89d 306a 	ldrbgt.w	r3, [sp, #106]	; 0x6a
                a.act_time = act_time;      /*To keep the old position*/
 801ce72:	9016      	strgt	r0, [sp, #88]	; 0x58
            lv_anim_start(&a);
 801ce74:	a80b      	add	r0, sp, #44	; 0x2c
                a.early_apply = 0;
 801ce76:	bfc4      	itt	gt
 801ce78:	f36f 0300 	bfcgt	r3, #0, #1
 801ce7c:	f88d 306a 	strbgt.w	r3, [sp, #106]	; 0x6a
            lv_anim_start(&a);
 801ce80:	f7f9 ff22 	bl	8016cc8 <lv_anim_start>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801ce84:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801ce88:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 801ce8c:	3301      	adds	r3, #1
        if(size.y > lv_area_get_height(&txt_coords) && hor_anim == false) {
 801ce8e:	f9bd 201e 	ldrsh.w	r2, [sp, #30]
 801ce92:	1a5b      	subs	r3, r3, r1
 801ce94:	b21b      	sxth	r3, r3
 801ce96:	429a      	cmp	r2, r3
 801ce98:	dd27      	ble.n	801ceea <lv_label_refr_text+0x2ee>
 801ce9a:	bb35      	cbnz	r5, 801ceea <lv_label_refr_text+0x2ee>
            lv_anim_set_values(&a, 0, -size.y - (lv_font_get_line_height(font)));
 801ce9c:	f9b6 3008 	ldrsh.w	r3, [r6, #8]
 801cea0:	4252      	negs	r2, r2
    a->exec_cb = exec_cb;
 801cea2:	4e22      	ldr	r6, [pc, #136]	; (801cf2c <lv_label_refr_text+0x330>)
            lv_anim_set_time(&a, lv_anim_speed_to_time(anim_speed, a.start_value, a.end_value));
 801cea4:	4629      	mov	r1, r5
            lv_anim_set_values(&a, 0, -size.y - (lv_font_get_line_height(font)));
 801cea6:	1ad2      	subs	r2, r2, r3
            lv_anim_set_time(&a, lv_anim_speed_to_time(anim_speed, a.start_value, a.end_value));
 801cea8:	4638      	mov	r0, r7
 801ceaa:	960c      	str	r6, [sp, #48]	; 0x30
    a->end_value = end;
 801ceac:	9214      	str	r2, [sp, #80]	; 0x50
    a->current_value = start;
 801ceae:	e9cd 5512 	strd	r5, r5, [sp, #72]	; 0x48
 801ceb2:	f7f9 ff65 	bl	8016d80 <lv_anim_speed_to_time>
            lv_anim_t * anim_cur = lv_anim_get(obj, set_ofs_y_anim);
 801ceb6:	4631      	mov	r1, r6
    a->time = duration;
 801ceb8:	9015      	str	r0, [sp, #84]	; 0x54
 801ceba:	4620      	mov	r0, r4
 801cebc:	f7f9 ff4a 	bl	8016d54 <lv_anim_get>
            int32_t act_time = anim_cur ? anim_cur->act_time : 0;
 801cec0:	b100      	cbz	r0, 801cec4 <lv_label_refr_text+0x2c8>
 801cec2:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
            if(act_time < a.time) {
 801cec4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801cec6:	42ab      	cmp	r3, r5
                a.early_apply = 0;
 801cec8:	bfc1      	itttt	gt
 801ceca:	f89d 306a 	ldrbgt.w	r3, [sp, #106]	; 0x6a
                a.act_time = act_time;      /*To keep the old position*/
 801cece:	9516      	strgt	r5, [sp, #88]	; 0x58
                a.early_apply = 0;
 801ced0:	f36f 0300 	bfcgt	r3, #0, #1
 801ced4:	f88d 306a 	strbgt.w	r3, [sp, #106]	; 0x6a
 801ced8:	e771      	b.n	801cdbe <lv_label_refr_text+0x1c2>
            label->offset.x = 0;
 801ceda:	2500      	movs	r5, #0
            lv_anim_del(obj, set_ofs_x_anim);
 801cedc:	4912      	ldr	r1, [pc, #72]	; (801cf28 <lv_label_refr_text+0x32c>)
 801cede:	4620      	mov	r0, r4
 801cee0:	f7f9 fec6 	bl	8016c70 <lv_anim_del>
            label->offset.x = 0;
 801cee4:	f8a4 5044 	strh.w	r5, [r4, #68]	; 0x44
 801cee8:	e7cc      	b.n	801ce84 <lv_label_refr_text+0x288>
            lv_anim_del(obj, set_ofs_y_anim);
 801ceea:	4910      	ldr	r1, [pc, #64]	; (801cf2c <lv_label_refr_text+0x330>)
 801ceec:	4620      	mov	r0, r4
 801ceee:	f7f9 febf 	bl	8016c70 <lv_anim_del>
            label->offset.y = 0;
 801cef2:	2300      	movs	r3, #0
 801cef4:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 801cef8:	e764      	b.n	801cdc4 <lv_label_refr_text+0x1c8>
    else if(label->long_mode == LV_LABEL_LONG_DOT) {
 801cefa:	f1b9 0f01 	cmp.w	r9, #1
 801cefe:	f47f af61 	bne.w	801cdc4 <lv_label_refr_text+0x1c8>
        lv_obj_refresh_self_size(obj);
 801cf02:	4620      	mov	r0, r4
 801cf04:	f7e8 f843 	bl	8004f8e <lv_obj_refresh_self_size>
 801cf08:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801cf0c:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
 801cf10:	3301      	adds	r3, #1
 801cf12:	1a9b      	subs	r3, r3, r2
        if(size.y <= lv_area_get_height(&txt_coords)) { /*No dots are required, the text is short enough*/
 801cf14:	f9bd 201e 	ldrsh.w	r2, [sp, #30]
 801cf18:	b21b      	sxth	r3, r3
 801cf1a:	429a      	cmp	r2, r3
 801cf1c:	dc08      	bgt.n	801cf30 <lv_label_refr_text+0x334>
            label->dot_end = LV_LABEL_DOT_END_INV;
 801cf1e:	f04f 33ff 	mov.w	r3, #4294967295
 801cf22:	62e3      	str	r3, [r4, #44]	; 0x2c
 801cf24:	e74e      	b.n	801cdc4 <lv_label_refr_text+0x1c8>
 801cf26:	bf00      	nop
 801cf28:	0801c92d 	.word	0x0801c92d
 801cf2c:	0801c925 	.word	0x0801c925
        else if(_lv_txt_get_encoded_length(label->text) <= LV_LABEL_DOT_NUM) {   /*Don't turn to dots all the characters*/
 801cf30:	4b4f      	ldr	r3, [pc, #316]	; (801d070 <lv_label_refr_text+0x474>)
 801cf32:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801cf34:	681b      	ldr	r3, [r3, #0]
 801cf36:	4798      	blx	r3
 801cf38:	2803      	cmp	r0, #3
 801cf3a:	d9f0      	bls.n	801cf1e <lv_label_refr_text+0x322>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801cf3c:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
                  (lv_font_get_glyph_width(font, '.', '.') + letter_space) *
 801cf40:	222e      	movs	r2, #46	; 0x2e
 801cf42:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801cf46:	4630      	mov	r0, r6
 801cf48:	3701      	adds	r7, #1
 801cf4a:	4611      	mov	r1, r2
 801cf4c:	1aff      	subs	r7, r7, r3
 801cf4e:	f7f9 fab9 	bl	80164c4 <lv_font_get_glyph_width>
 801cf52:	4440      	add	r0, r8
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801cf54:	f8bd 102a 	ldrh.w	r1, [sp, #42]	; 0x2a
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801cf58:	b2bf      	uxth	r7, r7
                _lv_txt_encoded_prev(label->text, &byte_id);
 801cf5a:	f8df 811c 	ldr.w	r8, [pc, #284]	; 801d078 <lv_label_refr_text+0x47c>
            p.x = lv_area_get_width(&txt_coords) -
 801cf5e:	ebc0 3380 	rsb	r3, r0, r0, lsl #14
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801cf62:	3101      	adds	r1, #1
 801cf64:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801cf68:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 801cf6c:	4407      	add	r7, r0
 801cf6e:	1ac9      	subs	r1, r1, r3
                       (lv_font_get_line_height(font) + line_space); /*Round down to the last line*/
 801cf70:	f9b6 0008 	ldrsh.w	r0, [r6, #8]
 801cf74:	b28a      	uxth	r2, r1
            p.x = lv_area_get_width(&txt_coords) -
 801cf76:	f8ad 7020 	strh.w	r7, [sp, #32]
                       (lv_font_get_line_height(font) + line_space); /*Round down to the last line*/
 801cf7a:	1946      	adds	r6, r0, r5
            y_overed = p.y %
 801cf7c:	b209      	sxth	r1, r1
 801cf7e:	fb91 f3f6 	sdiv	r3, r1, r6
 801cf82:	fb06 1113 	mls	r1, r6, r3, r1
            if(y_overed >= lv_font_get_line_height(font)) {
 801cf86:	b20b      	sxth	r3, r1
 801cf88:	4298      	cmp	r0, r3
                p.y += lv_font_get_line_height(font);
 801cf8a:	bfd4      	ite	le
 801cf8c:	1813      	addle	r3, r2, r0
                p.y -= line_space;
 801cf8e:	1b53      	subgt	r3, r2, r5
 801cf90:	4620      	mov	r0, r4
 801cf92:	1a5b      	subs	r3, r3, r1
 801cf94:	a908      	add	r1, sp, #32
 801cf96:	b21b      	sxth	r3, r3
 801cf98:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
    LV_ASSERT_NULL(pos_in);
 801cf9c:	f7ff fd1c 	bl	801c9d8 <lv_label_get_letter_on.part.0>
            size_t txt_len = strlen(label->text);
 801cfa0:	6a67      	ldr	r7, [r4, #36]	; 0x24
 801cfa2:	4605      	mov	r5, r0
 801cfa4:	4638      	mov	r0, r7
 801cfa6:	f7e3 f98d 	bl	80002c4 <strlen>
            uint32_t byte_id     = _lv_txt_encoded_get_byte_id(label->text, letter_id);
 801cfaa:	4b32      	ldr	r3, [pc, #200]	; (801d074 <lv_label_refr_text+0x478>)
            size_t txt_len = strlen(label->text);
 801cfac:	4606      	mov	r6, r0
            uint32_t byte_id     = _lv_txt_encoded_get_byte_id(label->text, letter_id);
 801cfae:	4629      	mov	r1, r5
 801cfb0:	681b      	ldr	r3, [r3, #0]
 801cfb2:	4638      	mov	r0, r7
 801cfb4:	4798      	blx	r3
 801cfb6:	900b      	str	r0, [sp, #44]	; 0x2c
            while(byte_id + LV_LABEL_DOT_NUM > txt_len) {
 801cfb8:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801cfba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801cfbc:	f107 0b03 	add.w	fp, r7, #3
 801cfc0:	455e      	cmp	r6, fp
 801cfc2:	d343      	bcc.n	801d04c <lv_label_refr_text+0x450>
 801cfc4:	f04f 0804 	mov.w	r8, #4
            uint8_t len          = 0;
 801cfc8:	2600      	movs	r6, #0
                len += _lv_txt_encoded_size(&label->text[byte_id]);
 801cfca:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 801d07c <lv_label_refr_text+0x480>
                _lv_txt_encoded_next(label->text, &byte_id);
 801cfce:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 801d080 <lv_label_refr_text+0x484>
                len += _lv_txt_encoded_size(&label->text[byte_id]);
 801cfd2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801cfd4:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801cfd6:	f8d9 3000 	ldr.w	r3, [r9]
 801cfda:	4410      	add	r0, r2
 801cfdc:	4798      	blx	r3
                _lv_txt_encoded_next(label->text, &byte_id);
 801cfde:	f8da 3000 	ldr.w	r3, [sl]
                len += _lv_txt_encoded_size(&label->text[byte_id]);
 801cfe2:	4406      	add	r6, r0
                _lv_txt_encoded_next(label->text, &byte_id);
 801cfe4:	a90b      	add	r1, sp, #44	; 0x2c
 801cfe6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801cfe8:	4798      	blx	r3
            for(i = 0; i <= LV_LABEL_DOT_NUM; i++) {
 801cfea:	f1b8 0801 	subs.w	r8, r8, #1
                len += _lv_txt_encoded_size(&label->text[byte_id]);
 801cfee:	b2f6      	uxtb	r6, r6
            for(i = 0; i <= LV_LABEL_DOT_NUM; i++) {
 801cff0:	d1ef      	bne.n	801cfd2 <lv_label_refr_text+0x3d6>
            if(lv_label_set_dot_tmp(obj, &label->text[byte_id_ori], len)) {
 801cff2:	6a61      	ldr	r1, [r4, #36]	; 0x24
    lv_label_dot_tmp_free(obj); /*Deallocate any existing space*/
 801cff4:	4620      	mov	r0, r4
            if(lv_label_set_dot_tmp(obj, &label->text[byte_id_ori], len)) {
 801cff6:	4439      	add	r1, r7
 801cff8:	9105      	str	r1, [sp, #20]
    lv_label_dot_tmp_free(obj); /*Deallocate any existing space*/
 801cffa:	f7ff fc71 	bl	801c8e0 <lv_label_dot_tmp_free>
    if(len > sizeof(char *)) {
 801cffe:	2e04      	cmp	r6, #4
 801d000:	9905      	ldr	r1, [sp, #20]
 801d002:	d929      	bls.n	801d058 <lv_label_refr_text+0x45c>
        label->dot.tmp_ptr = lv_mem_alloc(len + 1);
 801d004:	1c70      	adds	r0, r6, #1
 801d006:	f7fa fd17 	bl	8017a38 <lv_mem_alloc>
 801d00a:	62a0      	str	r0, [r4, #40]	; 0x28
        if(label->dot.tmp_ptr == NULL) {
 801d00c:	2800      	cmp	r0, #0
 801d00e:	f43f aed9 	beq.w	801cdc4 <lv_label_refr_text+0x1c8>
        lv_memcpy(label->dot.tmp_ptr, data, len);
 801d012:	4632      	mov	r2, r6
 801d014:	9905      	ldr	r1, [sp, #20]
 801d016:	f7fa fbc7 	bl	80177a8 <lv_memcpy>
        label->dot.tmp_ptr[len] = '\0';
 801d01a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801d01c:	f803 8006 	strb.w	r8, [r3, r6]
        label->dot_tmp_alloc    = true;
 801d020:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 801d024:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d028:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
                    label->text[byte_id_ori + i] = '.';
 801d02c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d02e:	222e      	movs	r2, #46	; 0x2e
                label->dot_end                              = letter_id + LV_LABEL_DOT_NUM;
 801d030:	3503      	adds	r5, #3
                    label->text[byte_id_ori + i] = '.';
 801d032:	55da      	strb	r2, [r3, r7]
 801d034:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d036:	443b      	add	r3, r7
 801d038:	705a      	strb	r2, [r3, #1]
 801d03a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d03c:	441f      	add	r7, r3
 801d03e:	70ba      	strb	r2, [r7, #2]
                label->text[byte_id_ori + LV_LABEL_DOT_NUM] = '\0';
 801d040:	2200      	movs	r2, #0
 801d042:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d044:	f803 200b 	strb.w	r2, [r3, fp]
                label->dot_end                              = letter_id + LV_LABEL_DOT_NUM;
 801d048:	62e5      	str	r5, [r4, #44]	; 0x2c
 801d04a:	e6bb      	b.n	801cdc4 <lv_label_refr_text+0x1c8>
                _lv_txt_encoded_prev(label->text, &byte_id);
 801d04c:	f8d8 3000 	ldr.w	r3, [r8]
 801d050:	a90b      	add	r1, sp, #44	; 0x2c
                letter_id--;
 801d052:	3d01      	subs	r5, #1
                _lv_txt_encoded_prev(label->text, &byte_id);
 801d054:	4798      	blx	r3
                letter_id--;
 801d056:	e7af      	b.n	801cfb8 <lv_label_refr_text+0x3bc>
        label->dot_tmp_alloc = false;
 801d058:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
        lv_memcpy(label->dot.tmp, data, len);
 801d05c:	4632      	mov	r2, r6
 801d05e:	f104 0028 	add.w	r0, r4, #40	; 0x28
        label->dot_tmp_alloc = false;
 801d062:	f368 1386 	bfi	r3, r8, #6, #1
 801d066:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
        lv_memcpy(label->dot.tmp, data, len);
 801d06a:	f7fa fb9d 	bl	80177a8 <lv_memcpy>
 801d06e:	e7dd      	b.n	801d02c <lv_label_refr_text+0x430>
 801d070:	2000004c 	.word	0x2000004c
 801d074:	20000038 	.word	0x20000038
 801d078:	20000044 	.word	0x20000044
 801d07c:	20000048 	.word	0x20000048
 801d080:	20000040 	.word	0x20000040

0801d084 <lv_label_event>:
{
 801d084:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    res = lv_obj_event_base(MY_CLASS, e);
 801d088:	48be      	ldr	r0, [pc, #760]	; (801d384 <lv_label_event+0x300>)
{
 801d08a:	b095      	sub	sp, #84	; 0x54
 801d08c:	460e      	mov	r6, r1
    res = lv_obj_event_base(MY_CLASS, e);
 801d08e:	f7e4 fea3 	bl	8001dd8 <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 801d092:	2801      	cmp	r0, #1
 801d094:	d10e      	bne.n	801d0b4 <lv_label_event+0x30>
    lv_event_code_t code = lv_event_get_code(e);
 801d096:	4630      	mov	r0, r6
 801d098:	f7e4 ff38 	bl	8001f0c <lv_event_get_code>
 801d09c:	4605      	mov	r5, r0
    lv_obj_t * obj = lv_event_get_target(e);
 801d09e:	4630      	mov	r0, r6
 801d0a0:	f7e4 ff32 	bl	8001f08 <lv_event_get_target>
    if(code == LV_EVENT_STYLE_CHANGED) {
 801d0a4:	2d24      	cmp	r5, #36	; 0x24
    lv_obj_t * obj = lv_event_get_target(e);
 801d0a6:	4604      	mov	r4, r0
    if(code == LV_EVENT_STYLE_CHANGED) {
 801d0a8:	d107      	bne.n	801d0ba <lv_label_event+0x36>
        lv_label_revert_dots(obj);
 801d0aa:	f7ff fc43 	bl	801c934 <lv_label_revert_dots>
        lv_label_refr_text(obj);
 801d0ae:	4620      	mov	r0, r4
 801d0b0:	f7ff fda4 	bl	801cbfc <lv_label_refr_text>
}
 801d0b4:	b015      	add	sp, #84	; 0x54
 801d0b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    else if(code == LV_EVENT_SIZE_CHANGED) {
 801d0ba:	2d23      	cmp	r5, #35	; 0x23
 801d0bc:	d0f5      	beq.n	801d0aa <lv_label_event+0x26>
    else if(code == LV_EVENT_GET_SELF_SIZE) {
 801d0be:	2d26      	cmp	r5, #38	; 0x26
 801d0c0:	d144      	bne.n	801d14c <lv_label_event+0xc8>
        const lv_font_t * font = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 801d0c2:	f7ff fc79 	bl	801c9b8 <lv_obj_get_style_text_font.constprop.0>
 801d0c6:	4605      	mov	r5, r0
        lv_coord_t letter_space = lv_obj_get_style_text_letter_space(obj, LV_PART_MAIN);
 801d0c8:	4620      	mov	r0, r4
 801d0ca:	f7ff fc6d 	bl	801c9a8 <lv_obj_get_style_text_letter_space.constprop.0>
 801d0ce:	4607      	mov	r7, r0
        lv_coord_t line_space = lv_obj_get_style_text_line_space(obj, LV_PART_MAIN);
 801d0d0:	4620      	mov	r0, r4
 801d0d2:	f7ff fc61 	bl	801c998 <lv_obj_get_style_text_line_space.constprop.0>
        if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 801d0d6:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
        lv_coord_t line_space = lv_obj_get_style_text_line_space(obj, LV_PART_MAIN);
 801d0da:	4680      	mov	r8, r0
        if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 801d0dc:	f3c3 1900 	ubfx	r9, r3, #4, #1
        if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 801d0e0:	0698      	lsls	r0, r3, #26
        lv_coord_t w = lv_obj_get_content_width(obj);
 801d0e2:	4620      	mov	r0, r4
        if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 801d0e4:	bf48      	it	mi
 801d0e6:	f049 0902 	orrmi.w	r9, r9, #2
        lv_coord_t w = lv_obj_get_content_width(obj);
 801d0ea:	f7e7 fecc 	bl	8004e86 <lv_obj_get_content_width>
        if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) w = LV_COORD_MAX;
 801d0ee:	4620      	mov	r0, r4
 801d0f0:	f7ff fc69 	bl	801c9c6 <lv_obj_get_style_width.constprop.0>
 801d0f4:	f242 73d1 	movw	r3, #10193	; 0x27d1
 801d0f8:	4298      	cmp	r0, r3
 801d0fa:	d103      	bne.n	801d104 <lv_label_event+0x80>
 801d0fc:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 801d100:	0759      	lsls	r1, r3, #29
 801d102:	d520      	bpl.n	801d146 <lv_label_event+0xc2>
        else w = lv_obj_get_content_width(obj);
 801d104:	4620      	mov	r0, r4
 801d106:	f7e7 febe 	bl	8004e86 <lv_obj_get_content_width>
        lv_txt_get_size(&size, label->text, font, letter_space, line_space, w, flag);
 801d10a:	463b      	mov	r3, r7
 801d10c:	462a      	mov	r2, r5
 801d10e:	f8cd 8000 	str.w	r8, [sp]
 801d112:	e9cd 0901 	strd	r0, r9, [sp, #4]
 801d116:	a80c      	add	r0, sp, #48	; 0x30
 801d118:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801d11a:	f7fc fa1c 	bl	8019556 <lv_txt_get_size>
        lv_point_t * self_size = lv_event_get_param(e);
 801d11e:	4630      	mov	r0, r6
 801d120:	f7e4 fef6 	bl	8001f10 <lv_event_get_param>
        self_size->x = LV_MAX(self_size->x, size.x);
 801d124:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 801d128:	f9b0 2000 	ldrsh.w	r2, [r0]
 801d12c:	4293      	cmp	r3, r2
 801d12e:	bfb8      	it	lt
 801d130:	4613      	movlt	r3, r2
        self_size->y = LV_MAX(self_size->y, size.y);
 801d132:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
        self_size->x = LV_MAX(self_size->x, size.x);
 801d136:	8003      	strh	r3, [r0, #0]
        self_size->y = LV_MAX(self_size->y, size.y);
 801d138:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801d13c:	4293      	cmp	r3, r2
 801d13e:	bfb8      	it	lt
 801d140:	4613      	movlt	r3, r2
 801d142:	8043      	strh	r3, [r0, #2]
 801d144:	e7b6      	b.n	801d0b4 <lv_label_event+0x30>
        if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) w = LV_COORD_MAX;
 801d146:	f44f 40c0 	mov.w	r0, #24576	; 0x6000
 801d14a:	e7de      	b.n	801d10a <lv_label_event+0x86>
    else if(code == LV_EVENT_DRAW_MAIN) {
 801d14c:	2d15      	cmp	r5, #21
 801d14e:	d1b1      	bne.n	801d0b4 <lv_label_event+0x30>
    lv_obj_t * obj = lv_event_get_target(e);
 801d150:	4630      	mov	r0, r6
 801d152:	f7e4 fed9 	bl	8001f08 <lv_event_get_target>
 801d156:	4604      	mov	r4, r0
    const lv_area_t * clip_area = lv_event_get_param(e);
 801d158:	4630      	mov	r0, r6
 801d15a:	f7e4 fed9 	bl	8001f10 <lv_event_get_param>
    lv_obj_get_content_coords(obj, &txt_coords);
 801d15e:	a908      	add	r1, sp, #32
    const lv_area_t * clip_area = lv_event_get_param(e);
 801d160:	4680      	mov	r8, r0
    lv_obj_get_content_coords(obj, &txt_coords);
 801d162:	4620      	mov	r0, r4
 801d164:	f7e7 fec3 	bl	8004eee <lv_obj_get_content_coords>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_ALIGN);
 801d168:	f241 425d 	movw	r2, #5213	; 0x145d
 801d16c:	2100      	movs	r1, #0
 801d16e:	4620      	mov	r0, r4
 801d170:	f7ea f8fa 	bl	8007368 <lv_obj_get_style_prop>
    if(align == LV_TEXT_ALIGN_AUTO) {
 801d174:	f010 05ff 	ands.w	r5, r0, #255	; 0xff
 801d178:	d10a      	bne.n	801d190 <lv_label_event+0x10c>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 801d17a:	4629      	mov	r1, r5
 801d17c:	f241 426a 	movw	r2, #5226	; 0x146a
 801d180:	4620      	mov	r0, r4
 801d182:	f7ea f8f1 	bl	8007368 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 801d186:	b2c0      	uxtb	r0, r0
       else align = LV_TEXT_ALIGN_LEFT;
 801d188:	2801      	cmp	r0, #1
 801d18a:	bf0c      	ite	eq
 801d18c:	2503      	moveq	r5, #3
 801d18e:	2501      	movne	r5, #1
    if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 801d190:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 801d194:	4620      	mov	r0, r4
    if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 801d196:	069a      	lsls	r2, r3, #26
    if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 801d198:	f3c3 1700 	ubfx	r7, r3, #4, #1
    if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 801d19c:	bf48      	it	mi
 801d19e:	f047 0702 	orrmi.w	r7, r7, #2
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 801d1a2:	f7ff fc10 	bl	801c9c6 <lv_obj_get_style_width.constprop.0>
 801d1a6:	f242 73d1 	movw	r3, #10193	; 0x27d1
 801d1aa:	4298      	cmp	r0, r3
 801d1ac:	d105      	bne.n	801d1ba <lv_label_event+0x136>
 801d1ae:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 801d1b2:	075b      	lsls	r3, r3, #29
 801d1b4:	bf58      	it	pl
 801d1b6:	f047 0704 	orrpl.w	r7, r7, #4
    lv_draw_label_dsc_init(&label_draw_dsc);
 801d1ba:	a80c      	add	r0, sp, #48	; 0x30
 801d1bc:	f7ed f9b0 	bl	800a520 <lv_draw_label_dsc_init>
    label_draw_dsc.ofs_x = label->offset.x;
 801d1c0:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
    lv_obj_init_draw_label_dsc(obj, LV_PART_MAIN, &label_draw_dsc);
 801d1c4:	aa0c      	add	r2, sp, #48	; 0x30
 801d1c6:	2100      	movs	r1, #0
    label_draw_dsc.ofs_x = label->offset.x;
 801d1c8:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
    lv_obj_init_draw_label_dsc(obj, LV_PART_MAIN, &label_draw_dsc);
 801d1cc:	4620      	mov	r0, r4
    label_draw_dsc.ofs_y = label->offset.y;
 801d1ce:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
    label_draw_dsc.flag = flag;
 801d1d2:	f88d 704c 	strb.w	r7, [sp, #76]	; 0x4c
    label_draw_dsc.ofs_y = label->offset.y;
 801d1d6:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
    lv_obj_init_draw_label_dsc(obj, LV_PART_MAIN, &label_draw_dsc);
 801d1da:	f7e7 fafd 	bl	80047d8 <lv_obj_init_draw_label_dsc>
    return label->sel_start;
 801d1de:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    if(label_draw_dsc.sel_start != LV_DRAW_LABEL_NO_TXT_SEL && label_draw_dsc.sel_end != LV_DRAW_LABEL_NO_TXT_SEL) {
 801d1e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    return label->sel_end;
 801d1e4:	6c22      	ldr	r2, [r4, #64]	; 0x40
    if(label_draw_dsc.sel_start != LV_DRAW_LABEL_NO_TXT_SEL && label_draw_dsc.sel_end != LV_DRAW_LABEL_NO_TXT_SEL) {
 801d1e6:	4299      	cmp	r1, r3
    label_draw_dsc.sel_start = lv_label_get_text_selection_start(obj);
 801d1e8:	910d      	str	r1, [sp, #52]	; 0x34
    label_draw_dsc.sel_end = lv_label_get_text_selection_end(obj);
 801d1ea:	920e      	str	r2, [sp, #56]	; 0x38
    if(label_draw_dsc.sel_start != LV_DRAW_LABEL_NO_TXT_SEL && label_draw_dsc.sel_end != LV_DRAW_LABEL_NO_TXT_SEL) {
 801d1ec:	d012      	beq.n	801d214 <lv_label_event+0x190>
 801d1ee:	429a      	cmp	r2, r3
 801d1f0:	d010      	beq.n	801d214 <lv_label_event+0x190>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_COLOR_FILTERED);
 801d1f2:	f244 4257 	movw	r2, #17495	; 0x4457
 801d1f6:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 801d1fa:	4620      	mov	r0, r4
 801d1fc:	f7ea f8b4 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_COLOR);
 801d200:	2220      	movs	r2, #32
        label_draw_dsc.sel_color = lv_obj_get_style_text_color_filtered(obj, LV_PART_SELECTED);
 801d202:	f8ad 003e 	strh.w	r0, [sp, #62]	; 0x3e
 801d206:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 801d20a:	4620      	mov	r0, r4
 801d20c:	f7ea f8ac 	bl	8007368 <lv_obj_get_style_prop>
        label_draw_dsc.sel_bg_color = lv_obj_get_style_bg_color(obj, LV_PART_SELECTED);
 801d210:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
    if((label->long_mode == LV_LABEL_LONG_SCROLL || label->long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR) &&
 801d214:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 801d218:	f003 0306 	and.w	r3, r3, #6
 801d21c:	2b02      	cmp	r3, #2
 801d21e:	d122      	bne.n	801d266 <lv_label_event+0x1e2>
 801d220:	3d02      	subs	r5, #2
 801d222:	2d01      	cmp	r5, #1
 801d224:	d81f      	bhi.n	801d266 <lv_label_event+0x1e2>
        lv_txt_get_size(&size, label->text, label_draw_dsc.font, label_draw_dsc.letter_space, label_draw_dsc.line_space,
 801d226:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 801d22a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801d22c:	9702      	str	r7, [sp, #8]
 801d22e:	a80a      	add	r0, sp, #40	; 0x28
 801d230:	9301      	str	r3, [sp, #4]
 801d232:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 801d236:	9300      	str	r3, [sp, #0]
 801d238:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	; 0x44
 801d23c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801d23e:	f7fc f98a 	bl	8019556 <lv_txt_get_size>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801d242:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801d246:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801d24a:	3301      	adds	r3, #1
 801d24c:	1a9b      	subs	r3, r3, r2
        if(size.x > lv_area_get_width(&txt_coords)) {
 801d24e:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801d252:	b21b      	sxth	r3, r3
 801d254:	429a      	cmp	r2, r3
            label_draw_dsc.align = LV_TEXT_ALIGN_LEFT;
 801d256:	bfc1      	itttt	gt
 801d258:	f89d 304d 	ldrbgt.w	r3, [sp, #77]	; 0x4d
 801d25c:	2201      	movgt	r2, #1
 801d25e:	f362 0301 	bfigt	r3, r2, #0, #2
 801d262:	f88d 304d 	strbgt.w	r3, [sp, #77]	; 0x4d
    if(label->long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR || lv_area_get_height(&txt_coords) < LV_LABEL_HINT_HEIGHT_LIMIT)
 801d266:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 801d26a:	f003 0307 	and.w	r3, r3, #7
 801d26e:	2b03      	cmp	r3, #3
 801d270:	f000 8086 	beq.w	801d380 <lv_label_event+0x2fc>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801d274:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 801d278:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801d27c:	3301      	adds	r3, #1
 801d27e:	1a9b      	subs	r3, r3, r2
 801d280:	b21b      	sxth	r3, r3
 801d282:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801d286:	db7b      	blt.n	801d380 <lv_label_event+0x2fc>
    lv_draw_label_hint_t * hint = &label->hint;
 801d288:	f104 0630 	add.w	r6, r4, #48	; 0x30
    bool is_common = _lv_area_intersect(&txt_clip, clip_area, clip_area);
 801d28c:	4642      	mov	r2, r8
 801d28e:	4641      	mov	r1, r8
 801d290:	a80a      	add	r0, sp, #40	; 0x28
 801d292:	f7f9 fe00 	bl	8016e96 <_lv_area_intersect>
    if(!is_common) return;
 801d296:	2800      	cmp	r0, #0
 801d298:	f43f af0c 	beq.w	801d0b4 <lv_label_event+0x30>
    if(label->long_mode == LV_LABEL_LONG_WRAP) {
 801d29c:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
 801d2a0:	f011 0107 	ands.w	r1, r1, #7
 801d2a4:	d10c      	bne.n	801d2c0 <lv_label_event+0x23c>
        lv_coord_t s = lv_obj_get_scroll_top(obj);
 801d2a6:	4620      	mov	r0, r4
 801d2a8:	9105      	str	r1, [sp, #20]
 801d2aa:	f7e8 fe33 	bl	8005f14 <lv_obj_get_scroll_top>
        lv_area_move(&txt_coords, 0, -s);
 801d2ae:	4240      	negs	r0, r0
 801d2b0:	9905      	ldr	r1, [sp, #20]
 801d2b2:	b202      	sxth	r2, r0
 801d2b4:	a808      	add	r0, sp, #32
 801d2b6:	f7f9 fddd 	bl	8016e74 <lv_area_move>
        txt_coords.y2 = obj->coords.y2;
 801d2ba:	8b63      	ldrh	r3, [r4, #26]
 801d2bc:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
    lv_draw_label(&txt_coords, &txt_clip, &label_draw_dsc, label->text, hint);
 801d2c0:	9600      	str	r6, [sp, #0]
 801d2c2:	aa0c      	add	r2, sp, #48	; 0x30
 801d2c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d2c6:	a90a      	add	r1, sp, #40	; 0x28
 801d2c8:	a808      	add	r0, sp, #32
 801d2ca:	f7ed fb01 	bl	800a8d0 <lv_draw_label>
    if(label->long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR) {
 801d2ce:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 801d2d2:	f003 0307 	and.w	r3, r3, #7
 801d2d6:	2b03      	cmp	r3, #3
 801d2d8:	f47f aeec 	bne.w	801d0b4 <lv_label_event+0x30>
        lv_txt_get_size(&size, label->text, label_draw_dsc.font, label_draw_dsc.letter_space, label_draw_dsc.line_space,
 801d2dc:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 801d2e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801d2e2:	9702      	str	r7, [sp, #8]
 801d2e4:	a807      	add	r0, sp, #28
 801d2e6:	9301      	str	r3, [sp, #4]
 801d2e8:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 801d2ec:	9300      	str	r3, [sp, #0]
 801d2ee:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	; 0x44
 801d2f2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801d2f4:	f7fc f92f 	bl	8019556 <lv_txt_get_size>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801d2f8:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801d2fc:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 801d300:	3201      	adds	r2, #1
        if(size.x > lv_area_get_width(&txt_coords)) {
 801d302:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801d306:	1a52      	subs	r2, r2, r1
 801d308:	b212      	sxth	r2, r2
 801d30a:	4293      	cmp	r3, r2
 801d30c:	dd18      	ble.n	801d340 <lv_label_event+0x2bc>
            label_draw_dsc.ofs_x = label->offset.x + size.x +
 801d30e:	f8b4 5044 	ldrh.w	r5, [r4, #68]	; 0x44
                                   lv_font_get_glyph_width(label_draw_dsc.font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
 801d312:	2220      	movs	r2, #32
 801d314:	980c      	ldr	r0, [sp, #48]	; 0x30
            label_draw_dsc.ofs_x = label->offset.x + size.x +
 801d316:	442b      	add	r3, r5
                                   lv_font_get_glyph_width(label_draw_dsc.font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
 801d318:	4611      	mov	r1, r2
            label_draw_dsc.ofs_x = label->offset.x + size.x +
 801d31a:	b29d      	uxth	r5, r3
                                   lv_font_get_glyph_width(label_draw_dsc.font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
 801d31c:	f7f9 f8d2 	bl	80164c4 <lv_font_get_glyph_width>
            label_draw_dsc.ofs_y = label->offset.y;
 801d320:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
            label_draw_dsc.ofs_x = label->offset.x + size.x +
 801d324:	eb00 0040 	add.w	r0, r0, r0, lsl #1
            lv_draw_label(&txt_coords, &txt_clip, &label_draw_dsc, label->text, hint);
 801d328:	9600      	str	r6, [sp, #0]
            label_draw_dsc.ofs_y = label->offset.y;
 801d32a:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
            lv_draw_label(&txt_coords, &txt_clip, &label_draw_dsc, label->text, hint);
 801d32e:	aa0c      	add	r2, sp, #48	; 0x30
            label_draw_dsc.ofs_x = label->offset.x + size.x +
 801d330:	4405      	add	r5, r0
            lv_draw_label(&txt_coords, &txt_clip, &label_draw_dsc, label->text, hint);
 801d332:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d334:	a90a      	add	r1, sp, #40	; 0x28
 801d336:	a808      	add	r0, sp, #32
            label_draw_dsc.ofs_x = label->offset.x + size.x +
 801d338:	f8ad 5046 	strh.w	r5, [sp, #70]	; 0x46
            lv_draw_label(&txt_coords, &txt_clip, &label_draw_dsc, label->text, hint);
 801d33c:	f7ed fac8 	bl	800a8d0 <lv_draw_label>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801d340:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 801d344:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 801d348:	3301      	adds	r3, #1
        if(size.y > lv_area_get_height(&txt_coords)) {
 801d34a:	f9bd 201e 	ldrsh.w	r2, [sp, #30]
 801d34e:	1a5b      	subs	r3, r3, r1
 801d350:	b21b      	sxth	r3, r3
 801d352:	429a      	cmp	r2, r3
 801d354:	f77f aeae 	ble.w	801d0b4 <lv_label_event+0x30>
            label_draw_dsc.ofs_x = label->offset.x;
 801d358:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
            lv_draw_label(&txt_coords, &txt_clip, &label_draw_dsc, label->text, hint);
 801d35c:	a90a      	add	r1, sp, #40	; 0x28
 801d35e:	a808      	add	r0, sp, #32
            label_draw_dsc.ofs_x = label->offset.x;
 801d360:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
            label_draw_dsc.ofs_y = label->offset.y + size.y + lv_font_get_line_height(label_draw_dsc.font);
 801d364:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d366:	891b      	ldrh	r3, [r3, #8]
 801d368:	441a      	add	r2, r3
 801d36a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
            lv_draw_label(&txt_coords, &txt_clip, &label_draw_dsc, label->text, hint);
 801d36e:	9600      	str	r6, [sp, #0]
            label_draw_dsc.ofs_y = label->offset.y + size.y + lv_font_get_line_height(label_draw_dsc.font);
 801d370:	441a      	add	r2, r3
            lv_draw_label(&txt_coords, &txt_clip, &label_draw_dsc, label->text, hint);
 801d372:	6a63      	ldr	r3, [r4, #36]	; 0x24
            label_draw_dsc.ofs_y = label->offset.y + size.y + lv_font_get_line_height(label_draw_dsc.font);
 801d374:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
            lv_draw_label(&txt_coords, &txt_clip, &label_draw_dsc, label->text, hint);
 801d378:	aa0c      	add	r2, sp, #48	; 0x30
 801d37a:	f7ed faa9 	bl	800a8d0 <lv_draw_label>
 801d37e:	e699      	b.n	801d0b4 <lv_label_event+0x30>
        hint = NULL;
 801d380:	2600      	movs	r6, #0
 801d382:	e783      	b.n	801d28c <lv_label_event+0x208>
 801d384:	080294fc 	.word	0x080294fc

0801d388 <lv_label_create>:
{
 801d388:	4601      	mov	r1, r0
    lv_obj_t * obj = lv_obj_class_create_obj(MY_CLASS, parent);
 801d38a:	4804      	ldr	r0, [pc, #16]	; (801d39c <lv_label_create+0x14>)
{
 801d38c:	b510      	push	{r4, lr}
    lv_obj_t * obj = lv_obj_class_create_obj(MY_CLASS, parent);
 801d38e:	f7e7 f819 	bl	80043c4 <lv_obj_class_create_obj>
 801d392:	4604      	mov	r4, r0
    lv_obj_class_init_obj(obj);
 801d394:	f7e7 f8a3 	bl	80044de <lv_obj_class_init_obj>
}
 801d398:	4620      	mov	r0, r4
 801d39a:	bd10      	pop	{r4, pc}
 801d39c:	080294fc 	.word	0x080294fc

0801d3a0 <lv_label_set_text>:
{
 801d3a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d3a2:	4604      	mov	r4, r0
 801d3a4:	460d      	mov	r5, r1
    lv_obj_invalidate(obj);
 801d3a6:	f7e7 feb7 	bl	8005118 <lv_obj_invalidate>
    if(text == NULL) text = label->text;
 801d3aa:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801d3ac:	2d00      	cmp	r5, #0
 801d3ae:	bf08      	it	eq
 801d3b0:	4635      	moveq	r5, r6
    if(label->text == text && label->static_txt == 0) {
 801d3b2:	42ae      	cmp	r6, r5
 801d3b4:	d112      	bne.n	801d3dc <lv_label_set_text+0x3c>
 801d3b6:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 801d3ba:	071b      	lsls	r3, r3, #28
 801d3bc:	d418      	bmi.n	801d3f0 <lv_label_set_text+0x50>
 801d3be:	4630      	mov	r0, r6
 801d3c0:	f7e2 ff80 	bl	80002c4 <strlen>
        label->text = lv_mem_realloc(label->text, strlen(label->text) + 1);
 801d3c4:	1c41      	adds	r1, r0, #1
 801d3c6:	4630      	mov	r0, r6
 801d3c8:	f7fa fb4c 	bl	8017a64 <lv_mem_realloc>
        LV_ASSERT_MALLOC(label->text);
 801d3cc:	b128      	cbz	r0, 801d3da <lv_label_set_text+0x3a>
        label->text = lv_mem_realloc(label->text, strlen(label->text) + 1);
 801d3ce:	6260      	str	r0, [r4, #36]	; 0x24
    lv_label_refr_text(obj);
 801d3d0:	4620      	mov	r0, r4
}
 801d3d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    lv_label_refr_text(obj);
 801d3d6:	f7ff bc11 	b.w	801cbfc <lv_label_refr_text>
        LV_ASSERT_MALLOC(label->text);
 801d3da:	e7fe      	b.n	801d3da <lv_label_set_text+0x3a>
        if(label->text != NULL && label->static_txt == 0) {
 801d3dc:	b146      	cbz	r6, 801d3f0 <lv_label_set_text+0x50>
 801d3de:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 801d3e2:	f013 0708 	ands.w	r7, r3, #8
 801d3e6:	d103      	bne.n	801d3f0 <lv_label_set_text+0x50>
            lv_mem_free(label->text);
 801d3e8:	4630      	mov	r0, r6
 801d3ea:	f7fa f9a3 	bl	8017734 <lv_mem_free>
            label->text = NULL;
 801d3ee:	6267      	str	r7, [r4, #36]	; 0x24
        size_t len = strlen(text) + 1;
 801d3f0:	4628      	mov	r0, r5
 801d3f2:	f7e2 ff67 	bl	80002c4 <strlen>
        label->text = lv_mem_alloc(len);
 801d3f6:	3001      	adds	r0, #1
 801d3f8:	f7fa fb1e 	bl	8017a38 <lv_mem_alloc>
 801d3fc:	6260      	str	r0, [r4, #36]	; 0x24
        LV_ASSERT_MALLOC(label->text);
 801d3fe:	b900      	cbnz	r0, 801d402 <lv_label_set_text+0x62>
 801d400:	e7fe      	b.n	801d400 <lv_label_set_text+0x60>
        strcpy(label->text, text);
 801d402:	4629      	mov	r1, r5
 801d404:	f005 ffcc 	bl	80233a0 <strcpy>
        label->static_txt = 0;
 801d408:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 801d40c:	f36f 03c3 	bfc	r3, #3, #1
 801d410:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 801d414:	e7dc      	b.n	801d3d0 <lv_label_set_text+0x30>

0801d416 <lv_label_set_text_static>:
    if(label->static_txt == 0 && label->text != NULL) {
 801d416:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
{
 801d41a:	b570      	push	{r4, r5, r6, lr}
    if(label->static_txt == 0 && label->text != NULL) {
 801d41c:	f013 0608 	ands.w	r6, r3, #8
{
 801d420:	4604      	mov	r4, r0
 801d422:	460d      	mov	r5, r1
    if(label->static_txt == 0 && label->text != NULL) {
 801d424:	d104      	bne.n	801d430 <lv_label_set_text_static+0x1a>
 801d426:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801d428:	b110      	cbz	r0, 801d430 <lv_label_set_text_static+0x1a>
        lv_mem_free(label->text);
 801d42a:	f7fa f983 	bl	8017734 <lv_mem_free>
        label->text = NULL;
 801d42e:	6266      	str	r6, [r4, #36]	; 0x24
    if(text != NULL) {
 801d430:	b135      	cbz	r5, 801d440 <lv_label_set_text_static+0x2a>
        label->static_txt = 1;
 801d432:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
        label->text       = (char *)text;
 801d436:	6265      	str	r5, [r4, #36]	; 0x24
        label->static_txt = 1;
 801d438:	f043 0308 	orr.w	r3, r3, #8
 801d43c:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    lv_label_refr_text(obj);
 801d440:	4620      	mov	r0, r4
}
 801d442:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_label_refr_text(obj);
 801d446:	f7ff bbd9 	b.w	801cbfc <lv_label_refr_text>
	...

0801d44c <lv_label_set_long_mode>:
{
 801d44c:	b538      	push	{r3, r4, r5, lr}
 801d44e:	4604      	mov	r4, r0
 801d450:	460d      	mov	r5, r1
    lv_anim_del(obj, set_ofs_x_anim);
 801d452:	4914      	ldr	r1, [pc, #80]	; (801d4a4 <lv_label_set_long_mode+0x58>)
 801d454:	f7f9 fc0c 	bl	8016c70 <lv_anim_del>
    lv_anim_del(obj, set_ofs_y_anim);
 801d458:	4913      	ldr	r1, [pc, #76]	; (801d4a8 <lv_label_set_long_mode+0x5c>)
 801d45a:	4620      	mov	r0, r4
 801d45c:	f7f9 fc08 	bl	8016c70 <lv_anim_del>
    if(long_mode == LV_LABEL_LONG_SCROLL || long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR || long_mode == LV_LABEL_LONG_CLIP)
 801d460:	1eaa      	subs	r2, r5, #2
    label->offset.x = 0;
 801d462:	2300      	movs	r3, #0
    if(long_mode == LV_LABEL_LONG_SCROLL || long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR || long_mode == LV_LABEL_LONG_CLIP)
 801d464:	2a02      	cmp	r2, #2
    label->offset.x = 0;
 801d466:	6463      	str	r3, [r4, #68]	; 0x44
    if(long_mode == LV_LABEL_LONG_SCROLL || long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR || long_mode == LV_LABEL_LONG_CLIP)
 801d468:	bf8c      	ite	hi
 801d46a:	2200      	movhi	r2, #0
 801d46c:	2201      	movls	r2, #1
 801d46e:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 801d472:	f362 1345 	bfi	r3, r2, #5, #1
 801d476:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    if(label->long_mode == LV_LABEL_LONG_DOT && label->dot_end != LV_LABEL_DOT_END_INV) {
 801d47a:	f003 0307 	and.w	r3, r3, #7
 801d47e:	2b01      	cmp	r3, #1
 801d480:	d105      	bne.n	801d48e <lv_label_set_long_mode+0x42>
 801d482:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801d484:	3301      	adds	r3, #1
 801d486:	d002      	beq.n	801d48e <lv_label_set_long_mode+0x42>
        lv_label_revert_dots(obj);
 801d488:	4620      	mov	r0, r4
 801d48a:	f7ff fa53 	bl	801c934 <lv_label_revert_dots>
    label->long_mode = long_mode;
 801d48e:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    lv_label_refr_text(obj);
 801d492:	4620      	mov	r0, r4
    label->long_mode = long_mode;
 801d494:	f365 0302 	bfi	r3, r5, #0, #3
 801d498:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
}
 801d49c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_label_refr_text(obj);
 801d4a0:	f7ff bbac 	b.w	801cbfc <lv_label_refr_text>
 801d4a4:	0801c92d 	.word	0x0801c92d
 801d4a8:	0801c925 	.word	0x0801c925

0801d4ac <lv_label_constructor>:
{
 801d4ac:	b538      	push	{r3, r4, r5, lr}
    label->dot_end    = LV_LABEL_DOT_END_INV;
 801d4ae:	f04f 33ff 	mov.w	r3, #4294967295
{
 801d4b2:	460c      	mov	r4, r1
    label->text       = NULL;
 801d4b4:	2500      	movs	r5, #0
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_CLICKABLE);
 801d4b6:	4620      	mov	r0, r4
    label->offset.x = 0;
 801d4b8:	644d      	str	r5, [r1, #68]	; 0x44
    label->hint.line_start = -1;
 801d4ba:	e9c1 330b 	strd	r3, r3, [r1, #44]	; 0x2c
    label->sel_start = LV_DRAW_LABEL_NO_TXT_SEL;
 801d4be:	f64f 73ff 	movw	r3, #65535	; 0xffff
    label->sel_end   = LV_DRAW_LABEL_NO_TXT_SEL;
 801d4c2:	e9c1 330f 	strd	r3, r3, [r1, #60]	; 0x3c
    label->long_mode  = LV_LABEL_LONG_WRAP;
 801d4c6:	f891 3048 	ldrb.w	r3, [r1, #72]	; 0x48
 801d4ca:	f023 035f 	bic.w	r3, r3, #95	; 0x5f
    label->dot.tmp_ptr   = NULL;
 801d4ce:	e9c1 5509 	strd	r5, r5, [r1, #36]	; 0x24
    label->long_mode  = LV_LABEL_LONG_WRAP;
 801d4d2:	f881 3048 	strb.w	r3, [r1, #72]	; 0x48
    label->hint.coord_y    = 0;
 801d4d6:	e9c1 550d 	strd	r5, r5, [r1, #52]	; 0x34
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_CLICKABLE);
 801d4da:	2102      	movs	r1, #2
 801d4dc:	f7e6 fc37 	bl	8003d4e <lv_obj_clear_flag>
    lv_label_set_long_mode(obj, LV_LABEL_LONG_WRAP);
 801d4e0:	4629      	mov	r1, r5
 801d4e2:	4620      	mov	r0, r4
 801d4e4:	f7ff ffb2 	bl	801d44c <lv_label_set_long_mode>
    lv_label_set_text(obj, "Text");
 801d4e8:	4620      	mov	r0, r4
 801d4ea:	4902      	ldr	r1, [pc, #8]	; (801d4f4 <lv_label_constructor+0x48>)
}
 801d4ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_label_set_text(obj, "Text");
 801d4f0:	f7ff bf56 	b.w	801d3a0 <lv_label_set_text>
 801d4f4:	080294f4 	.word	0x080294f4

0801d4f8 <lv_label_set_text_sel_start>:
    label->sel_start   = index;
 801d4f8:	63c1      	str	r1, [r0, #60]	; 0x3c
    lv_obj_invalidate(obj);
 801d4fa:	f7e7 be0d 	b.w	8005118 <lv_obj_invalidate>

0801d4fe <lv_label_set_text_sel_end>:
    label->sel_end     = index;
 801d4fe:	6401      	str	r1, [r0, #64]	; 0x40
    lv_obj_invalidate(obj);
 801d500:	f7e7 be0a 	b.w	8005118 <lv_obj_invalidate>

0801d504 <lv_label_get_text>:
}
 801d504:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801d506:	4770      	bx	lr

0801d508 <lv_label_get_letter_pos>:
{
 801d508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d50c:	ed2d 8b02 	vpush	{d8}
 801d510:	b08b      	sub	sp, #44	; 0x2c
 801d512:	4605      	mov	r5, r0
    LV_ASSERT_NULL(pos);
 801d514:	4690      	mov	r8, r2
{
 801d516:	9106      	str	r1, [sp, #24]
    LV_ASSERT_NULL(pos);
 801d518:	b902      	cbnz	r2, 801d51c <lv_label_get_letter_pos+0x14>
 801d51a:	e7fe      	b.n	801d51a <lv_label_get_letter_pos+0x12>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_ALIGN);
 801d51c:	f241 425d 	movw	r2, #5213	; 0x145d
 801d520:	2100      	movs	r1, #0
    return label->text;
 801d522:	6a44      	ldr	r4, [r0, #36]	; 0x24
 801d524:	f7e9 ff20 	bl	8007368 <lv_obj_get_style_prop>
    if(align == LV_TEXT_ALIGN_AUTO) {
 801d528:	f010 07ff 	ands.w	r7, r0, #255	; 0xff
 801d52c:	d10a      	bne.n	801d544 <lv_label_get_letter_pos+0x3c>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 801d52e:	4639      	mov	r1, r7
 801d530:	f241 426a 	movw	r2, #5226	; 0x146a
 801d534:	4628      	mov	r0, r5
 801d536:	f7e9 ff17 	bl	8007368 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 801d53a:	b2c0      	uxtb	r0, r0
       else align = LV_TEXT_ALIGN_LEFT;
 801d53c:	2801      	cmp	r0, #1
 801d53e:	bf0c      	ite	eq
 801d540:	2703      	moveq	r7, #3
 801d542:	2701      	movne	r7, #1
    if(txt[0] == '\0') {
 801d544:	7823      	ldrb	r3, [r4, #0]
 801d546:	b9db      	cbnz	r3, 801d580 <lv_label_get_letter_pos+0x78>
        switch(align) {
 801d548:	2f02      	cmp	r7, #2
        pos->y = 0;
 801d54a:	f8a8 3002 	strh.w	r3, [r8, #2]
        switch(align) {
 801d54e:	d010      	beq.n	801d572 <lv_label_get_letter_pos+0x6a>
 801d550:	2f03      	cmp	r7, #3
 801d552:	d008      	beq.n	801d566 <lv_label_get_letter_pos+0x5e>
 801d554:	2f01      	cmp	r7, #1
 801d556:	d101      	bne.n	801d55c <lv_label_get_letter_pos+0x54>
                pos->x = 0;
 801d558:	f8a8 3000 	strh.w	r3, [r8]
}
 801d55c:	b00b      	add	sp, #44	; 0x2c
 801d55e:	ecbd 8b02 	vpop	{d8}
 801d562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                pos->x = lv_obj_get_content_width(obj);
 801d566:	4628      	mov	r0, r5
 801d568:	f7e7 fc8d 	bl	8004e86 <lv_obj_get_content_width>
                pos->x = lv_obj_get_content_width(obj) / 2;
 801d56c:	f8a8 0000 	strh.w	r0, [r8]
                break;
 801d570:	e7f4      	b.n	801d55c <lv_label_get_letter_pos+0x54>
                pos->x = lv_obj_get_content_width(obj) / 2;
 801d572:	4628      	mov	r0, r5
 801d574:	f7e7 fc87 	bl	8004e86 <lv_obj_get_content_width>
 801d578:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 801d57c:	1040      	asrs	r0, r0, #1
 801d57e:	e7f5      	b.n	801d56c <lv_label_get_letter_pos+0x64>
    lv_obj_get_content_coords(obj, &txt_coords);
 801d580:	a908      	add	r1, sp, #32
 801d582:	4628      	mov	r0, r5
 801d584:	f7e7 fcb3 	bl	8004eee <lv_obj_get_content_coords>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801d588:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801d58c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
    const lv_font_t * font   = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 801d590:	4628      	mov	r0, r5
 801d592:	3301      	adds	r3, #1
 801d594:	1a9b      	subs	r3, r3, r2
 801d596:	b21b      	sxth	r3, r3
 801d598:	ee08 3a10 	vmov	s16, r3
 801d59c:	f7ff fa0c 	bl	801c9b8 <lv_obj_get_style_text_font.constprop.0>
 801d5a0:	4682      	mov	sl, r0
    lv_coord_t line_space = lv_obj_get_style_text_line_space(obj, LV_PART_MAIN);
 801d5a2:	4628      	mov	r0, r5
 801d5a4:	f7ff f9f8 	bl	801c998 <lv_obj_get_style_text_line_space.constprop.0>
 801d5a8:	9004      	str	r0, [sp, #16]
    lv_coord_t letter_space = lv_obj_get_style_text_letter_space(obj, LV_PART_MAIN);
 801d5aa:	4628      	mov	r0, r5
 801d5ac:	f7ff f9fc 	bl	801c9a8 <lv_obj_get_style_text_letter_space.constprop.0>
    lv_coord_t letter_height    = lv_font_get_line_height(font);
 801d5b0:	f9ba 3008 	ldrsh.w	r3, [sl, #8]
    lv_coord_t letter_space = lv_obj_get_style_text_letter_space(obj, LV_PART_MAIN);
 801d5b4:	4683      	mov	fp, r0
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 801d5b6:	4628      	mov	r0, r5
    lv_coord_t letter_height    = lv_font_get_line_height(font);
 801d5b8:	9305      	str	r3, [sp, #20]
    if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 801d5ba:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
    if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 801d5be:	069a      	lsls	r2, r3, #26
    if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 801d5c0:	f3c3 1900 	ubfx	r9, r3, #4, #1
    if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 801d5c4:	bf48      	it	mi
 801d5c6:	f049 0902 	orrmi.w	r9, r9, #2
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 801d5ca:	f7ff f9fc 	bl	801c9c6 <lv_obj_get_style_width.constprop.0>
 801d5ce:	f242 73d1 	movw	r3, #10193	; 0x27d1
 801d5d2:	4298      	cmp	r0, r3
 801d5d4:	d105      	bne.n	801d5e2 <lv_label_get_letter_pos+0xda>
 801d5d6:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
 801d5da:	075b      	lsls	r3, r3, #29
 801d5dc:	bf58      	it	pl
 801d5de:	f049 0904 	orrpl.w	r9, r9, #4
    uint32_t byte_id = _lv_txt_encoded_get_byte_id(txt, char_id);
 801d5e2:	4b40      	ldr	r3, [pc, #256]	; (801d6e4 <lv_label_get_letter_pos+0x1dc>)
 801d5e4:	4620      	mov	r0, r4
 801d5e6:	9906      	ldr	r1, [sp, #24]
 801d5e8:	681b      	ldr	r3, [r3, #0]
 801d5ea:	4798      	blx	r3
    lv_coord_t y             = 0;
 801d5ec:	2300      	movs	r3, #0
    uint32_t byte_id = _lv_txt_encoded_get_byte_id(txt, char_id);
 801d5ee:	4605      	mov	r5, r0
    uint32_t line_start      = 0;
 801d5f0:	461e      	mov	r6, r3
    lv_coord_t y             = 0;
 801d5f2:	9303      	str	r3, [sp, #12]
        y += letter_height + line_space;
 801d5f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801d5f8:	4413      	add	r3, r2
 801d5fa:	9307      	str	r3, [sp, #28]
    while(txt[new_line_start] != '\0') {
 801d5fc:	5da3      	ldrb	r3, [r4, r6]
 801d5fe:	19a0      	adds	r0, r4, r6
 801d600:	2b00      	cmp	r3, #0
 801d602:	d145      	bne.n	801d690 <lv_label_get_letter_pos+0x188>
 801d604:	9602      	str	r6, [sp, #8]
    if(byte_id > 0) {
 801d606:	b18d      	cbz	r5, 801d62c <lv_label_get_letter_pos+0x124>
        if((txt[byte_id - 1] == '\n' || txt[byte_id - 1] == '\r') && txt[byte_id] == '\0') {
 801d608:	1963      	adds	r3, r4, r5
 801d60a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801d60e:	2b0a      	cmp	r3, #10
 801d610:	d001      	beq.n	801d616 <lv_label_get_letter_pos+0x10e>
 801d612:	2b0d      	cmp	r3, #13
 801d614:	d10a      	bne.n	801d62c <lv_label_get_letter_pos+0x124>
 801d616:	5d63      	ldrb	r3, [r4, r5]
 801d618:	b943      	cbnz	r3, 801d62c <lv_label_get_letter_pos+0x124>
            y += letter_height + line_space;
 801d61a:	462e      	mov	r6, r5
 801d61c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801d620:	4413      	add	r3, r2
 801d622:	4618      	mov	r0, r3
 801d624:	9b03      	ldr	r3, [sp, #12]
 801d626:	4418      	add	r0, r3
 801d628:	b203      	sxth	r3, r0
 801d62a:	9303      	str	r3, [sp, #12]
    bidi_txt = &txt[line_start];
 801d62c:	4434      	add	r4, r6
    lv_coord_t x = lv_txt_get_width(bidi_txt, visual_byte_pos, font, letter_space, flag);
 801d62e:	465b      	mov	r3, fp
 801d630:	1ba9      	subs	r1, r5, r6
 801d632:	4652      	mov	r2, sl
 801d634:	4620      	mov	r0, r4
 801d636:	f8cd 9000 	str.w	r9, [sp]
 801d63a:	f7fb ff49 	bl	80194d0 <lv_txt_get_width>
    if(char_id != line_start) x += letter_space;
 801d63e:	9b06      	ldr	r3, [sp, #24]
    lv_coord_t x = lv_txt_get_width(bidi_txt, visual_byte_pos, font, letter_space, flag);
 801d640:	4605      	mov	r5, r0
    if(char_id != line_start) x += letter_space;
 801d642:	429e      	cmp	r6, r3
 801d644:	bf1c      	itt	ne
 801d646:	445d      	addne	r5, fp
 801d648:	b22d      	sxthne	r5, r5
    if(align == LV_TEXT_ALIGN_CENTER) {
 801d64a:	2f02      	cmp	r7, #2
 801d64c:	d136      	bne.n	801d6bc <lv_label_get_letter_pos+0x1b4>
        line_w = lv_txt_get_width(bidi_txt, new_line_start - line_start, font, letter_space, flag);
 801d64e:	9902      	ldr	r1, [sp, #8]
 801d650:	465b      	mov	r3, fp
 801d652:	4652      	mov	r2, sl
 801d654:	4620      	mov	r0, r4
 801d656:	1b89      	subs	r1, r1, r6
 801d658:	f8cd 9000 	str.w	r9, [sp]
 801d65c:	f7fb ff38 	bl	80194d0 <lv_txt_get_width>
 801d660:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801d664:	f8bd 2020 	ldrh.w	r2, [sp, #32]
        x += lv_area_get_width(&txt_coords) / 2 - line_w / 2;
 801d668:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 801d66c:	3301      	adds	r3, #1
 801d66e:	f340 004f 	sbfx	r0, r0, #1, #16
 801d672:	1a9b      	subs	r3, r3, r2
 801d674:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 801d678:	fa02 f383 	sxtah	r3, r2, r3
 801d67c:	ebc0 0063 	rsb	r0, r0, r3, asr #1
        x += lv_area_get_width(&txt_coords) - line_w;
 801d680:	4405      	add	r5, r0
 801d682:	b22d      	sxth	r5, r5
    pos->y = y;
 801d684:	9b03      	ldr	r3, [sp, #12]
    pos->x = x;
 801d686:	f8a8 5000 	strh.w	r5, [r8]
    pos->y = y;
 801d68a:	f8a8 3002 	strh.w	r3, [r8, #2]
 801d68e:	e765      	b.n	801d55c <lv_label_get_letter_pos+0x54>
        new_line_start += _lv_txt_get_next_line(&txt[line_start], font, letter_space, max_w, flag);
 801d690:	ee18 3a10 	vmov	r3, s16
 801d694:	465a      	mov	r2, fp
 801d696:	4651      	mov	r1, sl
 801d698:	f8cd 9000 	str.w	r9, [sp]
 801d69c:	f7fb fdd0 	bl	8019240 <_lv_txt_get_next_line>
 801d6a0:	1833      	adds	r3, r6, r0
        if(byte_id < new_line_start || txt[new_line_start] == '\0')
 801d6a2:	429d      	cmp	r5, r3
        new_line_start += _lv_txt_get_next_line(&txt[line_start], font, letter_space, max_w, flag);
 801d6a4:	9302      	str	r3, [sp, #8]
        if(byte_id < new_line_start || txt[new_line_start] == '\0')
 801d6a6:	d3ae      	bcc.n	801d606 <lv_label_get_letter_pos+0xfe>
 801d6a8:	5ce3      	ldrb	r3, [r4, r3]
 801d6aa:	2b00      	cmp	r3, #0
 801d6ac:	d0ab      	beq.n	801d606 <lv_label_get_letter_pos+0xfe>
        y += letter_height + line_space;
 801d6ae:	9b03      	ldr	r3, [sp, #12]
 801d6b0:	9a07      	ldr	r2, [sp, #28]
 801d6b2:	9e02      	ldr	r6, [sp, #8]
 801d6b4:	4413      	add	r3, r2
 801d6b6:	b21b      	sxth	r3, r3
 801d6b8:	9303      	str	r3, [sp, #12]
        line_start = new_line_start;
 801d6ba:	e79f      	b.n	801d5fc <lv_label_get_letter_pos+0xf4>
    else if(align == LV_TEXT_ALIGN_RIGHT) {
 801d6bc:	2f03      	cmp	r7, #3
 801d6be:	d1e1      	bne.n	801d684 <lv_label_get_letter_pos+0x17c>
        line_w = lv_txt_get_width(bidi_txt, new_line_start - line_start, font, letter_space, flag);
 801d6c0:	9902      	ldr	r1, [sp, #8]
 801d6c2:	465b      	mov	r3, fp
 801d6c4:	4652      	mov	r2, sl
 801d6c6:	4620      	mov	r0, r4
 801d6c8:	1b89      	subs	r1, r1, r6
 801d6ca:	f8cd 9000 	str.w	r9, [sp]
 801d6ce:	f7fb feff 	bl	80194d0 <lv_txt_get_width>
 801d6d2:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801d6d6:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801d6da:	3301      	adds	r3, #1
 801d6dc:	1a9b      	subs	r3, r3, r2
        x += lv_area_get_width(&txt_coords) - line_w;
 801d6de:	b21b      	sxth	r3, r3
 801d6e0:	1a18      	subs	r0, r3, r0
 801d6e2:	e7cd      	b.n	801d680 <lv_label_get_letter_pos+0x178>
 801d6e4:	20000038 	.word	0x20000038

0801d6e8 <lv_label_get_letter_on>:
    LV_ASSERT_NULL(pos_in);
 801d6e8:	b901      	cbnz	r1, 801d6ec <lv_label_get_letter_on+0x4>
 801d6ea:	e7fe      	b.n	801d6ea <lv_label_get_letter_on+0x2>
 801d6ec:	f7ff b974 	b.w	801c9d8 <lv_label_get_letter_on.part.0>

0801d6f0 <lv_label_is_char_under_pos>:
{
 801d6f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d6f4:	ed2d 8b02 	vpush	{d8}
 801d6f8:	b08d      	sub	sp, #52	; 0x34
 801d6fa:	4605      	mov	r5, r0
    LV_ASSERT_NULL(pos);
 801d6fc:	9103      	str	r1, [sp, #12]
 801d6fe:	b901      	cbnz	r1, 801d702 <lv_label_is_char_under_pos+0x12>
 801d700:	e7fe      	b.n	801d700 <lv_label_is_char_under_pos+0x10>
    lv_obj_get_content_coords(obj, &txt_coords);
 801d702:	a90a      	add	r1, sp, #40	; 0x28
 801d704:	f7e7 fbf3 	bl	8004eee <lv_obj_get_content_coords>
 801d708:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 801d70c:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
    const lv_font_t * font   = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 801d710:	4628      	mov	r0, r5
 801d712:	3301      	adds	r3, #1
    return label->text;
 801d714:	f8d5 a024 	ldr.w	sl, [r5, #36]	; 0x24
 801d718:	1a9b      	subs	r3, r3, r2
 801d71a:	b21b      	sxth	r3, r3
 801d71c:	ee08 3a10 	vmov	s16, r3
    const lv_font_t * font   = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 801d720:	f7ff f94a 	bl	801c9b8 <lv_obj_get_style_text_font.constprop.0>
 801d724:	4680      	mov	r8, r0
    lv_coord_t line_space = lv_obj_get_style_text_line_space(obj, LV_PART_MAIN);
 801d726:	4628      	mov	r0, r5
 801d728:	f7ff f936 	bl	801c998 <lv_obj_get_style_text_line_space.constprop.0>
 801d72c:	4604      	mov	r4, r0
    lv_coord_t letter_space = lv_obj_get_style_text_letter_space(obj, LV_PART_MAIN);
 801d72e:	4628      	mov	r0, r5
 801d730:	f7ff f93a 	bl	801c9a8 <lv_obj_get_style_text_letter_space.constprop.0>
    lv_coord_t letter_height    = lv_font_get_line_height(font);
 801d734:	f9b8 3008 	ldrsh.w	r3, [r8, #8]
    lv_coord_t letter_space = lv_obj_get_style_text_letter_space(obj, LV_PART_MAIN);
 801d738:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_ALIGN);
 801d73a:	f241 425d 	movw	r2, #5213	; 0x145d
 801d73e:	2100      	movs	r1, #0
 801d740:	4628      	mov	r0, r5
    lv_coord_t letter_height    = lv_font_get_line_height(font);
 801d742:	9304      	str	r3, [sp, #16]
 801d744:	f7e9 fe10 	bl	8007368 <lv_obj_get_style_prop>
    if(align == LV_TEXT_ALIGN_AUTO) {
 801d748:	f010 09ff 	ands.w	r9, r0, #255	; 0xff
 801d74c:	d10c      	bne.n	801d768 <lv_label_is_char_under_pos+0x78>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 801d74e:	4649      	mov	r1, r9
 801d750:	f241 426a 	movw	r2, #5226	; 0x146a
 801d754:	4628      	mov	r0, r5
 801d756:	f7e9 fe07 	bl	8007368 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 801d75a:	b2c0      	uxtb	r0, r0
       else align = LV_TEXT_ALIGN_LEFT;
 801d75c:	2801      	cmp	r0, #1
 801d75e:	bf0c      	ite	eq
 801d760:	f04f 0903 	moveq.w	r9, #3
 801d764:	f04f 0901 	movne.w	r9, #1
    if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 801d768:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 801d76c:	4628      	mov	r0, r5
    if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 801d76e:	069a      	lsls	r2, r3, #26
    if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 801d770:	f3c3 1600 	ubfx	r6, r3, #4, #1
    if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 801d774:	bf48      	it	mi
 801d776:	f046 0602 	orrmi.w	r6, r6, #2
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 801d77a:	f7ff f924 	bl	801c9c6 <lv_obj_get_style_width.constprop.0>
 801d77e:	f242 73d1 	movw	r3, #10193	; 0x27d1
 801d782:	4298      	cmp	r0, r3
 801d784:	d105      	bne.n	801d792 <lv_label_is_char_under_pos+0xa2>
 801d786:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
 801d78a:	075b      	lsls	r3, r3, #29
 801d78c:	d401      	bmi.n	801d792 <lv_label_is_char_under_pos+0xa2>
 801d78e:	f046 0604 	orr.w	r6, r6, #4
       else align = LV_TEXT_ALIGN_LEFT;
 801d792:	2300      	movs	r3, #0
 801d794:	461d      	mov	r5, r3
 801d796:	9302      	str	r3, [sp, #8]
        y += letter_height + line_space;
 801d798:	9b04      	ldr	r3, [sp, #16]
 801d79a:	4423      	add	r3, r4
 801d79c:	9305      	str	r3, [sp, #20]
 801d79e:	e016      	b.n	801d7ce <lv_label_is_char_under_pos+0xde>
        new_line_start += _lv_txt_get_next_line(&txt[line_start], font, letter_space, max_w, flag);
 801d7a0:	ee18 3a10 	vmov	r3, s16
 801d7a4:	463a      	mov	r2, r7
 801d7a6:	4641      	mov	r1, r8
 801d7a8:	4658      	mov	r0, fp
 801d7aa:	9600      	str	r6, [sp, #0]
 801d7ac:	f7fb fd48 	bl	8019240 <_lv_txt_get_next_line>
        if(pos->y <= y + letter_height) break; /*The line is found (stored in 'line_start')*/
 801d7b0:	9b03      	ldr	r3, [sp, #12]
 801d7b2:	9904      	ldr	r1, [sp, #16]
        new_line_start += _lv_txt_get_next_line(&txt[line_start], font, letter_space, max_w, flag);
 801d7b4:	182c      	adds	r4, r5, r0
        if(pos->y <= y + letter_height) break; /*The line is found (stored in 'line_start')*/
 801d7b6:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801d7ba:	9b02      	ldr	r3, [sp, #8]
 801d7bc:	440b      	add	r3, r1
 801d7be:	429a      	cmp	r2, r3
 801d7c0:	dd0c      	ble.n	801d7dc <lv_label_is_char_under_pos+0xec>
        y += letter_height + line_space;
 801d7c2:	9b02      	ldr	r3, [sp, #8]
        line_start = new_line_start;
 801d7c4:	4625      	mov	r5, r4
 801d7c6:	9a05      	ldr	r2, [sp, #20]
 801d7c8:	4413      	add	r3, r2
 801d7ca:	b21b      	sxth	r3, r3
 801d7cc:	9302      	str	r3, [sp, #8]
    while(txt[line_start] != '\0') {
 801d7ce:	f81a 3005 	ldrb.w	r3, [sl, r5]
 801d7d2:	eb0a 0b05 	add.w	fp, sl, r5
 801d7d6:	2b00      	cmp	r3, #0
 801d7d8:	d1e2      	bne.n	801d7a0 <lv_label_is_char_under_pos+0xb0>
 801d7da:	462c      	mov	r4, r5
    if(align == LV_TEXT_ALIGN_CENTER) {
 801d7dc:	f1b9 0f02 	cmp.w	r9, #2
 801d7e0:	d13b      	bne.n	801d85a <lv_label_is_char_under_pos+0x16a>
        line_w = lv_txt_get_width(&txt[line_start], new_line_start - line_start, font, letter_space, flag);
 801d7e2:	463b      	mov	r3, r7
 801d7e4:	4642      	mov	r2, r8
 801d7e6:	1b61      	subs	r1, r4, r5
 801d7e8:	4658      	mov	r0, fp
 801d7ea:	9600      	str	r6, [sp, #0]
 801d7ec:	f7fb fe70 	bl	80194d0 <lv_txt_get_width>
 801d7f0:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
 801d7f4:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
        x += lv_area_get_width(&txt_coords) / 2 - line_w / 2;
 801d7f8:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 801d7fc:	f109 0901 	add.w	r9, r9, #1
 801d800:	eba9 0903 	sub.w	r9, r9, r3
 801d804:	f3c9 33c0 	ubfx	r3, r9, #15, #1
 801d808:	fa03 f389 	sxtah	r3, r3, r9
 801d80c:	ea4f 0960 	mov.w	r9, r0, asr #1
 801d810:	ebc9 0963 	rsb	r9, r9, r3, asr #1
 801d814:	fa0f f989 	sxth.w	r9, r9
    lv_text_cmd_state_t cmd_state = LV_TEXT_CMD_STATE_WAIT;
 801d818:	2000      	movs	r0, #0
 801d81a:	f88d 001b 	strb.w	r0, [sp, #27]
    uint32_t letter_next = '\0';
 801d81e:	9009      	str	r0, [sp, #36]	; 0x24
    uint32_t letter      = '\0';
 801d820:	e9cd 5007 	strd	r5, r0, [sp, #28]
    if(new_line_start > 0) {
 801d824:	2c00      	cmp	r4, #0
 801d826:	d159      	bne.n	801d8dc <lv_label_is_char_under_pos+0x1ec>
    lv_coord_t last_x = 0;
 801d828:	46a3      	mov	fp, r4
    int32_t max_diff = lv_font_get_glyph_width(font, letter, letter_next) + letter_space + 1;
 801d82a:	4640      	mov	r0, r8
 801d82c:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 801d830:	f7f8 fe48 	bl	80164c4 <lv_font_get_glyph_width>
    return (pos->x >= (last_x - letter_space) && pos->x <= (last_x + max_diff));
 801d834:	9b03      	ldr	r3, [sp, #12]
 801d836:	ebab 0207 	sub.w	r2, fp, r7
 801d83a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d83e:	4293      	cmp	r3, r2
 801d840:	db51      	blt.n	801d8e6 <lv_label_is_char_under_pos+0x1f6>
    int32_t max_diff = lv_font_get_glyph_width(font, letter, letter_next) + letter_space + 1;
 801d842:	4438      	add	r0, r7
 801d844:	1c47      	adds	r7, r0, #1
    return (pos->x >= (last_x - letter_space) && pos->x <= (last_x + max_diff));
 801d846:	44bb      	add	fp, r7
 801d848:	455b      	cmp	r3, fp
 801d84a:	bfcc      	ite	gt
 801d84c:	2000      	movgt	r0, #0
 801d84e:	2001      	movle	r0, #1
}
 801d850:	b00d      	add	sp, #52	; 0x34
 801d852:	ecbd 8b02 	vpop	{d8}
 801d856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if(align == LV_TEXT_ALIGN_RIGHT) {
 801d85a:	f1b9 0f03 	cmp.w	r9, #3
 801d85e:	d111      	bne.n	801d884 <lv_label_is_char_under_pos+0x194>
        line_w = lv_txt_get_width(&txt[line_start], new_line_start - line_start, font, letter_space, flag);
 801d860:	463b      	mov	r3, r7
 801d862:	4642      	mov	r2, r8
 801d864:	1b61      	subs	r1, r4, r5
 801d866:	4658      	mov	r0, fp
 801d868:	9600      	str	r6, [sp, #0]
 801d86a:	f7fb fe31 	bl	80194d0 <lv_txt_get_width>
 801d86e:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 801d872:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
 801d876:	3301      	adds	r3, #1
 801d878:	eba3 0309 	sub.w	r3, r3, r9
        x += lv_area_get_width(&txt_coords) - line_w;
 801d87c:	1a18      	subs	r0, r3, r0
 801d87e:	fa0f f980 	sxth.w	r9, r0
 801d882:	e7c9      	b.n	801d818 <lv_label_is_char_under_pos+0x128>
    lv_coord_t x      = 0;
 801d884:	f04f 0900 	mov.w	r9, #0
 801d888:	e7c6      	b.n	801d818 <lv_label_is_char_under_pos+0x128>
                if(_lv_txt_is_cmd(&cmd_state, txt[i]) != false) {
 801d88a:	9b07      	ldr	r3, [sp, #28]
 801d88c:	f10d 001b 	add.w	r0, sp, #27
 801d890:	f81a 1003 	ldrb.w	r1, [sl, r3]
 801d894:	f7fb fcb6 	bl	8019204 <_lv_txt_is_cmd>
 801d898:	b150      	cbz	r0, 801d8b0 <lv_label_is_char_under_pos+0x1c0>
        while(i <= new_line_start - 1) {
 801d89a:	9b07      	ldr	r3, [sp, #28]
 801d89c:	429c      	cmp	r4, r3
 801d89e:	d3c4      	bcc.n	801d82a <lv_label_is_char_under_pos+0x13a>
            _lv_txt_encoded_letter_next_2(txt, &letter, &letter_next, &i);
 801d8a0:	ab07      	add	r3, sp, #28
 801d8a2:	aa09      	add	r2, sp, #36	; 0x24
 801d8a4:	a908      	add	r1, sp, #32
 801d8a6:	4650      	mov	r0, sl
 801d8a8:	f7fb fdf8 	bl	801949c <_lv_txt_encoded_letter_next_2>
            if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 801d8ac:	2e00      	cmp	r6, #0
 801d8ae:	d1ec      	bne.n	801d88a <lv_label_is_char_under_pos+0x19a>
            x += lv_font_get_glyph_width(font, letter, letter_next);
 801d8b0:	4640      	mov	r0, r8
 801d8b2:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 801d8b6:	f7f8 fe05 	bl	80164c4 <lv_font_get_glyph_width>
            if(pos->x < x) {
 801d8ba:	9a03      	ldr	r2, [sp, #12]
            x += lv_font_get_glyph_width(font, letter, letter_next);
 801d8bc:	4448      	add	r0, r9
            if(pos->x < x) {
 801d8be:	f9b2 2000 	ldrsh.w	r2, [r2]
            x += lv_font_get_glyph_width(font, letter, letter_next);
 801d8c2:	b283      	uxth	r3, r0
            if(pos->x < x) {
 801d8c4:	b200      	sxth	r0, r0
 801d8c6:	4282      	cmp	r2, r0
 801d8c8:	da02      	bge.n	801d8d0 <lv_label_is_char_under_pos+0x1e0>
                break;
 801d8ca:	46cb      	mov	fp, r9
                i = i_current;
 801d8cc:	9507      	str	r5, [sp, #28]
                break;
 801d8ce:	e7ac      	b.n	801d82a <lv_label_is_char_under_pos+0x13a>
            x += letter_space;
 801d8d0:	443b      	add	r3, r7
            i_current = i;
 801d8d2:	46cb      	mov	fp, r9
 801d8d4:	9d07      	ldr	r5, [sp, #28]
            x += letter_space;
 801d8d6:	fa0f f983 	sxth.w	r9, r3
 801d8da:	e7de      	b.n	801d89a <lv_label_is_char_under_pos+0x1aa>
    lv_coord_t last_x = 0;
 801d8dc:	4683      	mov	fp, r0
        while(i <= new_line_start - 1) {
 801d8de:	3c01      	subs	r4, #1
            if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 801d8e0:	f006 0601 	and.w	r6, r6, #1
 801d8e4:	e7d9      	b.n	801d89a <lv_label_is_char_under_pos+0x1aa>
    return (pos->x >= (last_x - letter_space) && pos->x <= (last_x + max_diff));
 801d8e6:	2000      	movs	r0, #0
 801d8e8:	e7b2      	b.n	801d850 <lv_label_is_char_under_pos+0x160>

0801d8ea <lv_label_get_text_selection_start>:
}
 801d8ea:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801d8ec:	4770      	bx	lr

0801d8ee <lv_label_get_text_selection_end>:
}
 801d8ee:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801d8f0:	4770      	bx	lr
	...

0801d8f4 <lv_label_ins_text>:
{
 801d8f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d8f8:	4604      	mov	r4, r0
 801d8fa:	460d      	mov	r5, r1
    LV_ASSERT_NULL(txt);
 801d8fc:	4616      	mov	r6, r2
 801d8fe:	b902      	cbnz	r2, 801d902 <lv_label_ins_text+0xe>
 801d900:	e7fe      	b.n	801d900 <lv_label_ins_text+0xc>
    if(label->static_txt != 0) return;
 801d902:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 801d906:	071b      	lsls	r3, r3, #28
 801d908:	d425      	bmi.n	801d956 <lv_label_ins_text+0x62>
    lv_obj_invalidate(obj);
 801d90a:	f7e7 fc05 	bl	8005118 <lv_obj_invalidate>
    size_t old_len = strlen(label->text);
 801d90e:	f8d4 8024 	ldr.w	r8, [r4, #36]	; 0x24
 801d912:	4640      	mov	r0, r8
 801d914:	f7e2 fcd6 	bl	80002c4 <strlen>
 801d918:	4607      	mov	r7, r0
    size_t ins_len = strlen(txt);
 801d91a:	4630      	mov	r0, r6
 801d91c:	f7e2 fcd2 	bl	80002c4 <strlen>
    size_t new_len = ins_len + old_len;
 801d920:	4438      	add	r0, r7
    label->text        = lv_mem_realloc(label->text, new_len + 1);
 801d922:	1c41      	adds	r1, r0, #1
 801d924:	4640      	mov	r0, r8
 801d926:	f7fa f89d 	bl	8017a64 <lv_mem_realloc>
 801d92a:	6260      	str	r0, [r4, #36]	; 0x24
    LV_ASSERT_MALLOC(label->text);
 801d92c:	b900      	cbnz	r0, 801d930 <lv_label_ins_text+0x3c>
 801d92e:	e7fe      	b.n	801d92e <lv_label_ins_text+0x3a>
    if(pos == LV_LABEL_POS_LAST) {
 801d930:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801d934:	429d      	cmp	r5, r3
 801d936:	d103      	bne.n	801d940 <lv_label_ins_text+0x4c>
        pos = _lv_txt_get_encoded_length(label->text);
 801d938:	4b08      	ldr	r3, [pc, #32]	; (801d95c <lv_label_ins_text+0x68>)
 801d93a:	681b      	ldr	r3, [r3, #0]
 801d93c:	4798      	blx	r3
 801d93e:	4605      	mov	r5, r0
    _lv_txt_ins(label->text, pos, txt);
 801d940:	4629      	mov	r1, r5
 801d942:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801d944:	4632      	mov	r2, r6
 801d946:	f7fb fd5d 	bl	8019404 <_lv_txt_ins>
    lv_label_set_text(obj, NULL);
 801d94a:	4620      	mov	r0, r4
 801d94c:	2100      	movs	r1, #0
}
 801d94e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    lv_label_set_text(obj, NULL);
 801d952:	f7ff bd25 	b.w	801d3a0 <lv_label_set_text>
}
 801d956:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d95a:	bf00      	nop
 801d95c:	2000004c 	.word	0x2000004c

0801d960 <lv_line_constructor>:
    LV_UNUSED(class_p);
    LV_TRACE_OBJ_CREATE("begin");

    lv_line_t * line = (lv_line_t *)obj;

    line->point_num   = 0;
 801d960:	2300      	movs	r3, #0
    line->point_array = NULL;
    line->y_inv       = 0;
 801d962:	f891 202a 	ldrb.w	r2, [r1, #42]	; 0x2a
{
 801d966:	4608      	mov	r0, r1
    line->y_inv       = 0;
 801d968:	f363 0200 	bfi	r2, r3, #0, #1
    line->point_num   = 0;
 801d96c:	850b      	strh	r3, [r1, #40]	; 0x28
    line->point_array = NULL;
 801d96e:	624b      	str	r3, [r1, #36]	; 0x24
    line->y_inv       = 0;
 801d970:	f881 202a 	strb.w	r2, [r1, #42]	; 0x2a

    lv_obj_clear_flag(obj, LV_OBJ_FLAG_CLICKABLE);
 801d974:	2102      	movs	r1, #2
 801d976:	f7e6 b9ea 	b.w	8003d4e <lv_obj_clear_flag>
	...

0801d97c <lv_line_event>:

    LV_TRACE_OBJ_CREATE("finished");
}

static void lv_line_event(const lv_obj_class_t * class_p, lv_event_t * e)
{
 801d97c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    LV_UNUSED(class_p);

    lv_res_t res;

    /*Call the ancestor's event handler*/
    res = lv_obj_event_base(MY_CLASS, e);
 801d980:	4858      	ldr	r0, [pc, #352]	; (801dae4 <lv_line_event+0x168>)
{
 801d982:	b089      	sub	sp, #36	; 0x24
 801d984:	460d      	mov	r5, r1
    res = lv_obj_event_base(MY_CLASS, e);
 801d986:	f7e4 fa27 	bl	8001dd8 <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 801d98a:	2801      	cmp	r0, #1
 801d98c:	d117      	bne.n	801d9be <lv_line_event+0x42>

    lv_event_code_t code = lv_event_get_code(e);
 801d98e:	4628      	mov	r0, r5
 801d990:	f7e4 fabc 	bl	8001f0c <lv_event_get_code>
 801d994:	4606      	mov	r6, r0
    lv_obj_t * obj = lv_event_get_target(e);
 801d996:	4628      	mov	r0, r5
 801d998:	f7e4 fab6 	bl	8001f08 <lv_event_get_target>

    if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 801d99c:	2e13      	cmp	r6, #19
    lv_obj_t * obj = lv_event_get_target(e);
 801d99e:	4604      	mov	r4, r0
    if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 801d9a0:	d110      	bne.n	801d9c4 <lv_line_event+0x48>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LINE_WIDTH);
 801d9a2:	f640 0249 	movw	r2, #2121	; 0x849
 801d9a6:	2100      	movs	r1, #0
 801d9a8:	f7e9 fcde 	bl	8007368 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801d9ac:	b204      	sxth	r4, r0
        /*The corner of the skew lines is out of the intended area*/
        lv_coord_t line_width = lv_obj_get_style_line_width(obj, LV_PART_MAIN);
        lv_coord_t * s = lv_event_get_param(e);
 801d9ae:	4628      	mov	r0, r5
 801d9b0:	f7e4 faae 	bl	8001f10 <lv_event_get_param>
        if(*s < line_width) *s = line_width;
 801d9b4:	f9b0 3000 	ldrsh.w	r3, [r0]
 801d9b8:	42a3      	cmp	r3, r4
 801d9ba:	da00      	bge.n	801d9be <lv_line_event+0x42>
 801d9bc:	8004      	strh	r4, [r0, #0]
            }
            lv_draw_line(&p1, &p2, clip_area, &line_dsc);
            line_dsc.round_start = 0;   /*Draw the rounding only on the end points after the first line*/
        }
    }
}
 801d9be:	b009      	add	sp, #36	; 0x24
 801d9c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    else if(code == LV_EVENT_GET_SELF_SIZE) {
 801d9c4:	2e26      	cmp	r6, #38	; 0x26
 801d9c6:	d128      	bne.n	801da1a <lv_line_event+0x9e>
        lv_point_t * p = lv_event_get_param(e);
 801d9c8:	4628      	mov	r0, r5
 801d9ca:	f7e4 faa1 	bl	8001f10 <lv_event_get_param>
        if(line->point_num > 0) {
 801d9ce:	8d22      	ldrh	r2, [r4, #40]	; 0x28
        lv_point_t * p = lv_event_get_param(e);
 801d9d0:	4606      	mov	r6, r0
        if(line->point_num > 0) {
 801d9d2:	2a00      	cmp	r2, #0
 801d9d4:	d0f3      	beq.n	801d9be <lv_line_event+0x42>
 801d9d6:	2300      	movs	r3, #0
        lv_coord_t h = 0;
 801d9d8:	461f      	mov	r7, r3
        lv_coord_t w = 0;
 801d9da:	461d      	mov	r5, r3
 801d9dc:	e00d      	b.n	801d9fa <lv_line_event+0x7e>
                w = LV_MAX(line->point_array[i].x, w);
 801d9de:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801d9e0:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 801d9e4:	f931 1023 	ldrsh.w	r1, [r1, r3, lsl #2]
 801d9e8:	3301      	adds	r3, #1
 801d9ea:	428d      	cmp	r5, r1
 801d9ec:	bfb8      	it	lt
 801d9ee:	460d      	movlt	r5, r1
                h = LV_MAX(line->point_array[i].y, h);
 801d9f0:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 801d9f4:	428f      	cmp	r7, r1
 801d9f6:	bfb8      	it	lt
 801d9f8:	460f      	movlt	r7, r1
            for(i = 0; i < line->point_num; i++) {
 801d9fa:	b299      	uxth	r1, r3
 801d9fc:	428a      	cmp	r2, r1
 801d9fe:	d8ee      	bhi.n	801d9de <lv_line_event+0x62>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LINE_WIDTH);
 801da00:	f640 0249 	movw	r2, #2121	; 0x849
 801da04:	2100      	movs	r1, #0
 801da06:	4620      	mov	r0, r4
 801da08:	f7e9 fcae 	bl	8007368 <lv_obj_get_style_prop>
            w += line_width;
 801da0c:	fa15 f580 	uxtah	r5, r5, r0
            h += line_width;
 801da10:	fa17 f080 	uxtah	r0, r7, r0
            p->x = w;
 801da14:	8035      	strh	r5, [r6, #0]
            p->y = h;
 801da16:	8070      	strh	r0, [r6, #2]
 801da18:	e7d1      	b.n	801d9be <lv_line_event+0x42>
    } else if(code == LV_EVENT_DRAW_MAIN) {
 801da1a:	2e15      	cmp	r6, #21
 801da1c:	d1cf      	bne.n	801d9be <lv_line_event+0x42>
        const lv_area_t * clip_area = lv_event_get_param(e);
 801da1e:	4628      	mov	r0, r5
 801da20:	f7e4 fa76 	bl	8001f10 <lv_event_get_param>
        if(line->point_num == 0 || line->point_array == NULL) return;
 801da24:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        const lv_area_t * clip_area = lv_event_get_param(e);
 801da26:	4681      	mov	r9, r0
        if(line->point_num == 0 || line->point_array == NULL) return;
 801da28:	2b00      	cmp	r3, #0
 801da2a:	d0c8      	beq.n	801d9be <lv_line_event+0x42>
 801da2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801da2e:	2b00      	cmp	r3, #0
 801da30:	d0c5      	beq.n	801d9be <lv_line_event+0x42>
        lv_obj_get_coords(obj, &area);
 801da32:	a903      	add	r1, sp, #12
 801da34:	4620      	mov	r0, r4
 801da36:	f7e7 f9ca 	bl	8004dce <lv_obj_get_coords>
        lv_coord_t x_ofs = area.x1 - lv_obj_get_scroll_x(obj);
 801da3a:	f8bd 500c 	ldrh.w	r5, [sp, #12]
 801da3e:	4620      	mov	r0, r4
        for(i = 0; i < line->point_num - 1; i++) {
 801da40:	f04f 0800 	mov.w	r8, #0
        lv_coord_t x_ofs = area.x1 - lv_obj_get_scroll_x(obj);
 801da44:	f7e8 fa42 	bl	8005ecc <lv_obj_get_scroll_x>
 801da48:	1a28      	subs	r0, r5, r0
        lv_coord_t y_ofs = area.y1 - lv_obj_get_scroll_y(obj);
 801da4a:	f8bd 500e 	ldrh.w	r5, [sp, #14]
        lv_coord_t x_ofs = area.x1 - lv_obj_get_scroll_x(obj);
 801da4e:	b287      	uxth	r7, r0
        lv_coord_t y_ofs = area.y1 - lv_obj_get_scroll_y(obj);
 801da50:	4620      	mov	r0, r4
 801da52:	f7e8 fa4d 	bl	8005ef0 <lv_obj_get_scroll_y>
 801da56:	1a28      	subs	r0, r5, r0
 801da58:	b286      	uxth	r6, r0
        lv_coord_t h = lv_obj_get_height(obj);
 801da5a:	4620      	mov	r0, r4
 801da5c:	f7e7 fa0d 	bl	8004e7a <lv_obj_get_height>
 801da60:	4605      	mov	r5, r0
        lv_draw_line_dsc_init(&line_dsc);
 801da62:	a805      	add	r0, sp, #20
 801da64:	4435      	add	r5, r6
 801da66:	f7ed f9d5 	bl	800ae14 <lv_draw_line_dsc_init>
        lv_obj_init_draw_line_dsc(obj, LV_PART_MAIN, &line_dsc);
 801da6a:	aa05      	add	r2, sp, #20
 801da6c:	2100      	movs	r1, #0
 801da6e:	b2ad      	uxth	r5, r5
 801da70:	4620      	mov	r0, r4
 801da72:	f7e6 ff59 	bl	8004928 <lv_obj_init_draw_line_dsc>
        for(i = 0; i < line->point_num - 1; i++) {
 801da76:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 801da78:	fa1f f388 	uxth.w	r3, r8
 801da7c:	3a01      	subs	r2, #1
 801da7e:	4293      	cmp	r3, r2
 801da80:	da9d      	bge.n	801d9be <lv_line_event+0x42>
            p1.x = line->point_array[i].x + x_ofs;
 801da82:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801da84:	009a      	lsls	r2, r3, #2
 801da86:	f108 0801 	add.w	r8, r8, #1
 801da8a:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 801da8e:	f831 3023 	ldrh.w	r3, [r1, r3, lsl #2]
 801da92:	443b      	add	r3, r7
 801da94:	f8ad 3004 	strh.w	r3, [sp, #4]
            p2.x = line->point_array[i + 1].x + x_ofs;
 801da98:	1d13      	adds	r3, r2, #4
 801da9a:	18ca      	adds	r2, r1, r3
 801da9c:	5acb      	ldrh	r3, [r1, r3]
            if(line->y_inv == 0) {
 801da9e:	f894 102a 	ldrb.w	r1, [r4, #42]	; 0x2a
            p2.x = line->point_array[i + 1].x + x_ofs;
 801daa2:	443b      	add	r3, r7
            if(line->y_inv == 0) {
 801daa4:	07c9      	lsls	r1, r1, #31
            lv_draw_line(&p1, &p2, clip_area, &line_dsc);
 801daa6:	a902      	add	r1, sp, #8
            p2.x = line->point_array[i + 1].x + x_ofs;
 801daa8:	f8ad 3008 	strh.w	r3, [sp, #8]
                p1.y = line->point_array[i].y + y_ofs;
 801daac:	8843      	ldrh	r3, [r0, #2]
            lv_draw_line(&p1, &p2, clip_area, &line_dsc);
 801daae:	a801      	add	r0, sp, #4
                p1.y = line->point_array[i].y + y_ofs;
 801dab0:	bf55      	itete	pl
 801dab2:	199b      	addpl	r3, r3, r6
                p1.y = h - line->point_array[i].y + y_ofs;
 801dab4:	1aeb      	submi	r3, r5, r3
                p1.y = line->point_array[i].y + y_ofs;
 801dab6:	f8ad 3006 	strhpl.w	r3, [sp, #6]
                p1.y = h - line->point_array[i].y + y_ofs;
 801daba:	f8ad 3006 	strhmi.w	r3, [sp, #6]
                p2.y = line->point_array[i + 1].y + y_ofs;
 801dabe:	bf54      	ite	pl
 801dac0:	8853      	ldrhpl	r3, [r2, #2]
                p2.y = h - line->point_array[i + 1].y + y_ofs;
 801dac2:	8853      	ldrhmi	r3, [r2, #2]
            lv_draw_line(&p1, &p2, clip_area, &line_dsc);
 801dac4:	464a      	mov	r2, r9
                p2.y = line->point_array[i + 1].y + y_ofs;
 801dac6:	bf54      	ite	pl
 801dac8:	199b      	addpl	r3, r3, r6
                p2.y = h - line->point_array[i + 1].y + y_ofs;
 801daca:	1aeb      	submi	r3, r5, r3
 801dacc:	f8ad 300a 	strh.w	r3, [sp, #10]
            lv_draw_line(&p1, &p2, clip_area, &line_dsc);
 801dad0:	ab05      	add	r3, sp, #20
 801dad2:	f7ed f9ab 	bl	800ae2c <lv_draw_line>
            line_dsc.round_start = 0;   /*Draw the rounding only on the end points after the first line*/
 801dad6:	f89d 301d 	ldrb.w	r3, [sp, #29]
 801dada:	f36f 0382 	bfc	r3, #2, #1
 801dade:	f88d 301d 	strb.w	r3, [sp, #29]
        for(i = 0; i < line->point_num - 1; i++) {
 801dae2:	e7c8      	b.n	801da76 <lv_line_event+0xfa>
 801dae4:	08029518 	.word	0x08029518

0801dae8 <set_y_anim>:
}


static void set_y_anim(void * obj, int32_t v)
{
    lv_obj_set_y(obj, v);
 801dae8:	b209      	sxth	r1, r1
 801daea:	f7e7 b901 	b.w	8004cf0 <lv_obj_set_y>

0801daee <lv_obj_get_style_text_font>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 801daee:	f241 4259 	movw	r2, #5209	; 0x1459
{
 801daf2:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 801daf4:	f7e9 fc38 	bl	8007368 <lv_obj_get_style_prop>
}
 801daf8:	bd08      	pop	{r3, pc}

0801dafa <get_label>:
    return lv_obj_get_child(obj, 0);
 801dafa:	2100      	movs	r1, #0
 801dafc:	f7e9 bf81 	b.w	8007a02 <lv_obj_get_child>

0801db00 <lv_obj_get_style_text_line_space.constprop.0>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 801db00:	f241 425b 	movw	r2, #5211	; 0x145b
 801db04:	2100      	movs	r1, #0
static inline lv_coord_t lv_obj_get_style_text_line_space(const struct _lv_obj_t * obj, uint32_t part)
 801db06:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 801db08:	f7e9 fc2e 	bl	8007368 <lv_obj_get_style_prop>
}
 801db0c:	b200      	sxth	r0, r0
 801db0e:	bd08      	pop	{r3, pc}

0801db10 <inf_normalize>:
{
 801db10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(roller->mode == LV_ROLLER_MODE_INFINITE) {
 801db12:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
{
 801db16:	4604      	mov	r4, r0
    if(roller->mode == LV_ROLLER_MODE_INFINITE) {
 801db18:	07db      	lsls	r3, r3, #31
 801db1a:	d537      	bpl.n	801db8c <inf_normalize+0x7c>
        uint16_t real_id_cnt = roller->option_cnt / LV_ROLLER_INF_PAGES;
 801db1c:	8c82      	ldrh	r2, [r0, #36]	; 0x24
 801db1e:	2307      	movs	r3, #7
        roller->sel_opt_id = roller->sel_opt_id % real_id_cnt;
 801db20:	8cc5      	ldrh	r5, [r0, #38]	; 0x26
        uint16_t real_id_cnt = roller->option_cnt / LV_ROLLER_INF_PAGES;
 801db22:	fbb2 f2f3 	udiv	r2, r2, r3
        roller->sel_opt_id = roller->sel_opt_id % real_id_cnt;
 801db26:	fbb5 f3f2 	udiv	r3, r5, r2
        roller->sel_opt_id += (LV_ROLLER_INF_PAGES / 2) * real_id_cnt; /*Select the middle page*/
 801db2a:	eb02 0142 	add.w	r1, r2, r2, lsl #1
        roller->sel_opt_id = roller->sel_opt_id % real_id_cnt;
 801db2e:	fb02 5313 	mls	r3, r2, r3, r5
        roller->sel_opt_id += (LV_ROLLER_INF_PAGES / 2) * real_id_cnt; /*Select the middle page*/
 801db32:	fa13 f381 	uxtah	r3, r3, r1
 801db36:	b29b      	uxth	r3, r3
        roller->sel_opt_id_ori = roller->sel_opt_id % real_id_cnt;
 801db38:	fbb3 f5f2 	udiv	r5, r3, r2
        roller->sel_opt_id += (LV_ROLLER_INF_PAGES / 2) * real_id_cnt; /*Select the middle page*/
 801db3c:	84c3      	strh	r3, [r0, #38]	; 0x26
        roller->sel_opt_id_ori = roller->sel_opt_id % real_id_cnt;
 801db3e:	fb02 3315 	mls	r3, r2, r5, r3
        roller->sel_opt_id_ori += (LV_ROLLER_INF_PAGES / 2) * real_id_cnt; /*Select the middle page*/
 801db42:	fa13 f181 	uxtah	r1, r3, r1
 801db46:	8501      	strh	r1, [r0, #40]	; 0x28
        const lv_font_t * font = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 801db48:	2100      	movs	r1, #0
 801db4a:	f7ff ffd0 	bl	801daee <lv_obj_get_style_text_font>
 801db4e:	4605      	mov	r5, r0
        lv_coord_t line_space = lv_obj_get_style_text_line_space(obj, LV_PART_MAIN);
 801db50:	4620      	mov	r0, r4
 801db52:	f7ff ffd5 	bl	801db00 <lv_obj_get_style_text_line_space.constprop.0>
        lv_coord_t font_h              = lv_font_get_line_height(font);
 801db56:	f9b5 6008 	ldrsh.w	r6, [r5, #8]
        lv_coord_t line_space = lv_obj_get_style_text_line_space(obj, LV_PART_MAIN);
 801db5a:	4607      	mov	r7, r0
        lv_coord_t h                   = lv_obj_get_content_height(obj);
 801db5c:	4620      	mov	r0, r4
 801db5e:	f7e7 f9ac 	bl	8004eba <lv_obj_get_content_height>
 801db62:	4605      	mov	r5, r0
        lv_obj_t * label = get_label(obj);
 801db64:	4620      	mov	r0, r4
 801db66:	f7ff ffc8 	bl	801dafa <get_label>
        lv_coord_t sel_y1 = roller->sel_opt_id * (font_h + line_space);
 801db6a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        lv_coord_t mid_y1 = h / 2 - font_h / 2;
 801db6c:	eb06 71d6 	add.w	r1, r6, r6, lsr #31
        lv_coord_t sel_y1 = roller->sel_opt_id * (font_h + line_space);
 801db70:	443e      	add	r6, r7
        lv_coord_t mid_y1 = h / 2 - font_h / 2;
 801db72:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
        lv_coord_t sel_y1 = roller->sel_opt_id * (font_h + line_space);
 801db76:	fb13 f606 	smulbb	r6, r3, r6
        lv_coord_t mid_y1 = h / 2 - font_h / 2;
 801db7a:	1049      	asrs	r1, r1, #1
 801db7c:	ebc1 0165 	rsb	r1, r1, r5, asr #1
        lv_coord_t new_y = mid_y1 - sel_y1;
 801db80:	1b89      	subs	r1, r1, r6
}
 801db82:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        lv_obj_set_y(label, new_y);
 801db86:	b209      	sxth	r1, r1
 801db88:	f7e7 b8b2 	b.w	8004cf0 <lv_obj_set_y>
}
 801db8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801db8e <scroll_anim_ready_cb>:
{
 801db8e:	b508      	push	{r3, lr}
    lv_obj_t * obj = lv_obj_get_parent(a->var); /*The label is animated*/
 801db90:	6800      	ldr	r0, [r0, #0]
 801db92:	f7e9 ff33 	bl	80079fc <lv_obj_get_parent>
}
 801db96:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    inf_normalize(obj);
 801db9a:	f7ff bfb9 	b.w	801db10 <inf_normalize>

0801db9e <lv_roller_set_options.part.0>:
void lv_roller_set_options(lv_obj_t * obj, const char * options, lv_roller_mode_t mode)
 801db9e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dba2:	4689      	mov	r9, r1
 801dba4:	4604      	mov	r4, r0
 801dba6:	4615      	mov	r5, r2
    lv_obj_t * label = get_label(obj);
 801dba8:	f7ff ffa7 	bl	801dafa <get_label>
    roller->option_cnt = 0;
 801dbac:	2300      	movs	r3, #0
    lv_obj_t * label = get_label(obj);
 801dbae:	4606      	mov	r6, r0
    roller->option_cnt = 0;
 801dbb0:	f109 31ff 	add.w	r1, r9, #4294967295
 801dbb4:	6263      	str	r3, [r4, #36]	; 0x24
    roller->sel_opt_id_ori = 0;
 801dbb6:	8523      	strh	r3, [r4, #40]	; 0x28
    for(cnt = 0; options[cnt] != '\0'; cnt++) {
 801dbb8:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 801dbba:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801dbbe:	3301      	adds	r3, #1
 801dbc0:	b29b      	uxth	r3, r3
 801dbc2:	b992      	cbnz	r2, 801dbea <lv_roller_set_options.part.0+0x4c>
    roller->option_cnt++; /*Last option has no `\n`*/
 801dbc4:	84a3      	strh	r3, [r4, #36]	; 0x24
    if(mode == LV_ROLLER_MODE_NORMAL) {
 801dbc6:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 801dbca:	b995      	cbnz	r5, 801dbf2 <lv_roller_set_options.part.0+0x54>
        roller->mode = LV_ROLLER_MODE_NORMAL;
 801dbcc:	f365 0300 	bfi	r3, r5, #0, #1
        lv_label_set_text(label, options);
 801dbd0:	4649      	mov	r1, r9
 801dbd2:	4630      	mov	r0, r6
        roller->mode = LV_ROLLER_MODE_NORMAL;
 801dbd4:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
        lv_label_set_text(label, options);
 801dbd8:	f7ff fbe2 	bl	801d3a0 <lv_label_set_text>
    roller->sel_opt_id_ori = roller->sel_opt_id;
 801dbdc:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    lv_obj_refresh_ext_draw_size(label);
 801dbde:	4630      	mov	r0, r6
    roller->sel_opt_id_ori = roller->sel_opt_id;
 801dbe0:	8523      	strh	r3, [r4, #40]	; 0x28
}
 801dbe2:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_obj_refresh_ext_draw_size(label);
 801dbe6:	f7e6 bfac 	b.w	8004b42 <lv_obj_refresh_ext_draw_size>
        if(options[cnt] == '\n') roller->option_cnt++;
 801dbea:	2a0a      	cmp	r2, #10
 801dbec:	bf08      	it	eq
 801dbee:	84a3      	strheq	r3, [r4, #36]	; 0x24
    for(cnt = 0; options[cnt] != '\0'; cnt++) {
 801dbf0:	e7e2      	b.n	801dbb8 <lv_roller_set_options.part.0+0x1a>
        roller->mode = LV_ROLLER_MODE_INFINITE;
 801dbf2:	f043 0301 	orr.w	r3, r3, #1
        size_t opt_len = strlen(options) + 1; /*+1 to add '\n' after option lists*/
 801dbf6:	4648      	mov	r0, r9
        char * opt_extra = lv_mem_buf_get(opt_len * LV_ROLLER_INF_PAGES);
 801dbf8:	f04f 0807 	mov.w	r8, #7
        roller->mode = LV_ROLLER_MODE_INFINITE;
 801dbfc:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
        size_t opt_len = strlen(options) + 1; /*+1 to add '\n' after option lists*/
 801dc00:	f7e2 fb60 	bl	80002c4 <strlen>
 801dc04:	1c45      	adds	r5, r0, #1
        char * opt_extra = lv_mem_buf_get(opt_len * LV_ROLLER_INF_PAGES);
 801dc06:	ebc5 0ac5 	rsb	sl, r5, r5, lsl #3
 801dc0a:	4650      	mov	r0, sl
 801dc0c:	f7f9 ff44 	bl	8017a98 <lv_mem_buf_get>
 801dc10:	4607      	mov	r7, r0
        for(i = 0; i < LV_ROLLER_INF_PAGES; i++) {
 801dc12:	eb00 0b05 	add.w	fp, r0, r5
            strcpy(&opt_extra[opt_len * i], options);
 801dc16:	f108 38ff 	add.w	r8, r8, #4294967295
 801dc1a:	ebab 0005 	sub.w	r0, fp, r5
 801dc1e:	4649      	mov	r1, r9
 801dc20:	f005 fbbe 	bl	80233a0 <strcpy>
            opt_extra[opt_len * (i + 1) - 1] = '\n';
 801dc24:	230a      	movs	r3, #10
        for(i = 0; i < LV_ROLLER_INF_PAGES; i++) {
 801dc26:	f018 08ff 	ands.w	r8, r8, #255	; 0xff
            opt_extra[opt_len * (i + 1) - 1] = '\n';
 801dc2a:	f80b 3c01 	strb.w	r3, [fp, #-1]
        for(i = 0; i < LV_ROLLER_INF_PAGES; i++) {
 801dc2e:	44ab      	add	fp, r5
 801dc30:	d1f1      	bne.n	801dc16 <lv_roller_set_options.part.0+0x78>
        opt_extra[opt_len * LV_ROLLER_INF_PAGES - 1] = '\0';
 801dc32:	44ba      	add	sl, r7
        lv_label_set_text(label, opt_extra);
 801dc34:	4639      	mov	r1, r7
 801dc36:	4630      	mov	r0, r6
        opt_extra[opt_len * LV_ROLLER_INF_PAGES - 1] = '\0';
 801dc38:	f80a 8c01 	strb.w	r8, [sl, #-1]
        lv_label_set_text(label, opt_extra);
 801dc3c:	f7ff fbb0 	bl	801d3a0 <lv_label_set_text>
        lv_mem_buf_release(opt_extra);
 801dc40:	4638      	mov	r0, r7
 801dc42:	f7f9 fd85 	bl	8017750 <lv_mem_buf_release>
        roller->sel_opt_id     = ((LV_ROLLER_INF_PAGES / 2) + 0) * roller->option_cnt;
 801dc46:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
        inf_normalize(obj);
 801dc48:	4620      	mov	r0, r4
        roller->sel_opt_id     = ((LV_ROLLER_INF_PAGES / 2) + 0) * roller->option_cnt;
 801dc4a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
        roller->option_cnt = roller->option_cnt * LV_ROLLER_INF_PAGES;
 801dc4e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
        roller->sel_opt_id     = ((LV_ROLLER_INF_PAGES / 2) + 0) * roller->option_cnt;
 801dc52:	84e2      	strh	r2, [r4, #38]	; 0x26
        roller->option_cnt = roller->option_cnt * LV_ROLLER_INF_PAGES;
 801dc54:	84a3      	strh	r3, [r4, #36]	; 0x24
        inf_normalize(obj);
 801dc56:	f7ff ff5b 	bl	801db10 <inf_normalize>
 801dc5a:	e7bf      	b.n	801dbdc <lv_roller_set_options.part.0+0x3e>

0801dc5c <lv_roller_constructor>:
{
 801dc5c:	b538      	push	{r3, r4, r5, lr}
    roller->option_cnt = 0;
 801dc5e:	2500      	movs	r5, #0
    roller->mode = LV_ROLLER_MODE_NORMAL;
 801dc60:	f891 302a 	ldrb.w	r3, [r1, #42]	; 0x2a
{
 801dc64:	460c      	mov	r4, r1
    roller->mode = LV_ROLLER_MODE_NORMAL;
 801dc66:	f365 0300 	bfi	r3, r5, #0, #1
    roller->option_cnt = 0;
 801dc6a:	624d      	str	r5, [r1, #36]	; 0x24
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLLABLE);
 801dc6c:	4620      	mov	r0, r4
    roller->sel_opt_id_ori = 0;
 801dc6e:	850d      	strh	r5, [r1, #40]	; 0x28
    roller->mode = LV_ROLLER_MODE_NORMAL;
 801dc70:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLLABLE);
 801dc74:	2110      	movs	r1, #16
 801dc76:	f7e6 f86a 	bl	8003d4e <lv_obj_clear_flag>
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLL_CHAIN);
 801dc7a:	4620      	mov	r0, r4
 801dc7c:	f44f 7180 	mov.w	r1, #256	; 0x100
 801dc80:	f7e6 f865 	bl	8003d4e <lv_obj_clear_flag>
    lv_obj_t * label = lv_obj_class_create_obj(&lv_roller_label_class, obj);
 801dc84:	4621      	mov	r1, r4
 801dc86:	4806      	ldr	r0, [pc, #24]	; (801dca0 <lv_roller_constructor+0x44>)
 801dc88:	f7e6 fb9c 	bl	80043c4 <lv_obj_class_create_obj>
    lv_obj_class_init_obj(label);
 801dc8c:	f7e6 fc27 	bl	80044de <lv_obj_class_init_obj>
    LV_ASSERT_NULL(options);
 801dc90:	462a      	mov	r2, r5
 801dc92:	4620      	mov	r0, r4
 801dc94:	4903      	ldr	r1, [pc, #12]	; (801dca4 <lv_roller_constructor+0x48>)
}
 801dc96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801dc9a:	f7ff bf80 	b.w	801db9e <lv_roller_set_options.part.0>
 801dc9e:	bf00      	nop
 801dca0:	08029580 	.word	0x08029580
 801dca4:	08029534 	.word	0x08029534

0801dca8 <get_selected_label_width>:
{
 801dca8:	b570      	push	{r4, r5, r6, lr}
 801dcaa:	b088      	sub	sp, #32
 801dcac:	4605      	mov	r5, r0
    lv_obj_t * label = get_label(obj);
 801dcae:	f7ff ff24 	bl	801dafa <get_label>
    if(label == NULL) return 0;
 801dcb2:	4604      	mov	r4, r0
 801dcb4:	b1f8      	cbz	r0, 801dcf6 <get_selected_label_width+0x4e>
    const lv_font_t * font = lv_obj_get_style_text_font(obj, LV_PART_SELECTED);
 801dcb6:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 801dcba:	4628      	mov	r0, r5
 801dcbc:	f7ff ff17 	bl	801daee <lv_obj_get_style_text_font>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 801dcc0:	f241 425a 	movw	r2, #5210	; 0x145a
 801dcc4:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 801dcc8:	4606      	mov	r6, r0
 801dcca:	4628      	mov	r0, r5
 801dccc:	f7e9 fb4c 	bl	8007368 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801dcd0:	b203      	sxth	r3, r0
    const char * txt = lv_label_get_text(label);
 801dcd2:	4620      	mov	r0, r4
 801dcd4:	9305      	str	r3, [sp, #20]
 801dcd6:	f7ff fc15 	bl	801d504 <lv_label_get_text>
    lv_txt_get_size(&size, txt, font, letter_space, 0, LV_COORD_MAX,  LV_TEXT_FLAG_NONE);
 801dcda:	2200      	movs	r2, #0
    const char * txt = lv_label_get_text(label);
 801dcdc:	4601      	mov	r1, r0
    lv_txt_get_size(&size, txt, font, letter_space, 0, LV_COORD_MAX,  LV_TEXT_FLAG_NONE);
 801dcde:	f44f 40c0 	mov.w	r0, #24576	; 0x6000
 801dce2:	9b05      	ldr	r3, [sp, #20]
 801dce4:	9200      	str	r2, [sp, #0]
 801dce6:	e9cd 0201 	strd	r0, r2, [sp, #4]
 801dcea:	a807      	add	r0, sp, #28
 801dcec:	4632      	mov	r2, r6
 801dcee:	f7fb fc32 	bl	8019556 <lv_txt_get_size>
    return size.x;
 801dcf2:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
}
 801dcf6:	b008      	add	sp, #32
 801dcf8:	bd70      	pop	{r4, r5, r6, pc}
	...

0801dcfc <refr_position>:
{
 801dcfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dd00:	b093      	sub	sp, #76	; 0x4c
 801dd02:	4605      	mov	r5, r0
 801dd04:	460f      	mov	r7, r1
    lv_obj_t * label = get_label(obj);
 801dd06:	f7ff fef8 	bl	801dafa <get_label>
    if(label == NULL) return;
 801dd0a:	4604      	mov	r4, r0
 801dd0c:	2800      	cmp	r0, #0
 801dd0e:	d067      	beq.n	801dde0 <refr_position+0xe4>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_ALIGN);
 801dd10:	2100      	movs	r1, #0
 801dd12:	f241 425d 	movw	r2, #5213	; 0x145d
 801dd16:	f7e9 fb27 	bl	8007368 <lv_obj_get_style_prop>
    if(align == LV_TEXT_ALIGN_AUTO) {
 801dd1a:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
 801dd1e:	d111      	bne.n	801dd44 <refr_position+0x48>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 801dd20:	f241 426a 	movw	r2, #5226	; 0x146a
 801dd24:	4628      	mov	r0, r5
 801dd26:	f7e9 fb1f 	bl	8007368 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 801dd2a:	b2c0      	uxtb	r0, r0
        if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) align = LV_TEXT_ALIGN_RIGHT;
 801dd2c:	2801      	cmp	r0, #1
 801dd2e:	d10f      	bne.n	801dd50 <refr_position+0x54>
        lv_obj_set_x(label, lv_obj_get_content_width(obj) - lv_obj_get_width(label));
 801dd30:	4628      	mov	r0, r5
 801dd32:	f7e7 f8a8 	bl	8004e86 <lv_obj_get_content_width>
 801dd36:	4606      	mov	r6, r0
 801dd38:	4620      	mov	r0, r4
 801dd3a:	f7e7 f898 	bl	8004e6e <lv_obj_get_width>
 801dd3e:	1a30      	subs	r0, r6, r0
 801dd40:	b201      	sxth	r1, r0
 801dd42:	e013      	b.n	801dd6c <refr_position+0x70>
    switch(align) {
 801dd44:	2902      	cmp	r1, #2
 801dd46:	d005      	beq.n	801dd54 <refr_position+0x58>
 801dd48:	2903      	cmp	r1, #3
 801dd4a:	d0f1      	beq.n	801dd30 <refr_position+0x34>
 801dd4c:	2901      	cmp	r1, #1
 801dd4e:	d110      	bne.n	801dd72 <refr_position+0x76>
        lv_obj_set_x(label, 0);
 801dd50:	2100      	movs	r1, #0
 801dd52:	e00b      	b.n	801dd6c <refr_position+0x70>
        lv_obj_set_x(label, (lv_obj_get_content_width(obj) - lv_obj_get_width(label)) / 2);
 801dd54:	4628      	mov	r0, r5
 801dd56:	f7e7 f896 	bl	8004e86 <lv_obj_get_content_width>
 801dd5a:	4606      	mov	r6, r0
 801dd5c:	4620      	mov	r0, r4
 801dd5e:	f7e7 f886 	bl	8004e6e <lv_obj_get_width>
 801dd62:	1a30      	subs	r0, r6, r0
 801dd64:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 801dd68:	f340 014f 	sbfx	r1, r0, #1, #16
        lv_obj_set_x(label, 0);
 801dd6c:	4620      	mov	r0, r4
 801dd6e:	f7e6 ffa1 	bl	8004cb4 <lv_obj_set_x>
    const lv_font_t * font = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 801dd72:	2100      	movs	r1, #0
 801dd74:	4628      	mov	r0, r5
 801dd76:	f7ff feba 	bl	801daee <lv_obj_get_style_text_font>
 801dd7a:	4606      	mov	r6, r0
    lv_coord_t line_space = lv_obj_get_style_text_line_space(obj, LV_PART_MAIN);
 801dd7c:	4628      	mov	r0, r5
 801dd7e:	f7ff febf 	bl	801db00 <lv_obj_get_style_text_line_space.constprop.0>
 801dd82:	4681      	mov	r9, r0
    lv_coord_t h                   = lv_obj_get_content_height(obj);
 801dd84:	4628      	mov	r0, r5
    lv_coord_t font_h              = lv_font_get_line_height(font);
 801dd86:	f9b6 8008 	ldrsh.w	r8, [r6, #8]
    lv_coord_t h                   = lv_obj_get_content_height(obj);
 801dd8a:	f7e7 f896 	bl	8004eba <lv_obj_get_content_height>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ANIM_TIME);
 801dd8e:	2265      	movs	r2, #101	; 0x65
 801dd90:	4683      	mov	fp, r0
 801dd92:	2100      	movs	r1, #0
 801dd94:	4628      	mov	r0, r5
 801dd96:	f7e9 fae7 	bl	8007368 <lv_obj_get_style_prop>
 801dd9a:	4606      	mov	r6, r0
    uint16_t anim_time             = lv_obj_get_style_anim_time(obj, LV_PART_MAIN);
 801dd9c:	fa1f fa80 	uxth.w	sl, r0
    if(anim_en == LV_ANIM_OFF || anim_time == 0) {
 801dda0:	b117      	cbz	r7, 801dda8 <refr_position+0xac>
 801dda2:	f1ba 0f00 	cmp.w	sl, #0
 801dda6:	d102      	bne.n	801ddae <refr_position+0xb2>
        inf_normalize(obj);
 801dda8:	4628      	mov	r0, r5
 801ddaa:	f7ff feb1 	bl	801db10 <inf_normalize>
    lv_coord_t mid_y1 = h / 2 - font_h / 2;
 801ddae:	eb08 73d8 	add.w	r3, r8, r8, lsr #31
    lv_coord_t sel_y1 = id * (font_h + line_space);
 801ddb2:	8ced      	ldrh	r5, [r5, #38]	; 0x26
    lv_coord_t mid_y1 = h / 2 - font_h / 2;
 801ddb4:	eb0b 7bdb 	add.w	fp, fp, fp, lsr #31
    lv_coord_t sel_y1 = id * (font_h + line_space);
 801ddb8:	44c8      	add	r8, r9
    lv_coord_t mid_y1 = h / 2 - font_h / 2;
 801ddba:	105b      	asrs	r3, r3, #1
    lv_coord_t sel_y1 = id * (font_h + line_space);
 801ddbc:	fb15 f508 	smulbb	r5, r5, r8
    lv_coord_t mid_y1 = h / 2 - font_h / 2;
 801ddc0:	ebc3 036b 	rsb	r3, r3, fp, asr #1
    lv_coord_t new_y = mid_y1 - sel_y1;
 801ddc4:	1b5d      	subs	r5, r3, r5
 801ddc6:	b22d      	sxth	r5, r5
    if(anim_en == LV_ANIM_OFF || anim_time == 0) {
 801ddc8:	b117      	cbz	r7, 801ddd0 <refr_position+0xd4>
 801ddca:	f1ba 0f00 	cmp.w	sl, #0
 801ddce:	d10a      	bne.n	801dde6 <refr_position+0xea>
        lv_anim_del(label, set_y_anim);
 801ddd0:	4910      	ldr	r1, [pc, #64]	; (801de14 <refr_position+0x118>)
 801ddd2:	4620      	mov	r0, r4
 801ddd4:	f7f8 ff4c 	bl	8016c70 <lv_anim_del>
        lv_obj_set_y(label, new_y);
 801ddd8:	4629      	mov	r1, r5
 801ddda:	4620      	mov	r0, r4
 801dddc:	f7e6 ff88 	bl	8004cf0 <lv_obj_set_y>
}
 801dde0:	b013      	add	sp, #76	; 0x4c
 801dde2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        lv_anim_init(&a);
 801dde6:	a801      	add	r0, sp, #4
 801dde8:	b2b6      	uxth	r6, r6
 801ddea:	f7f8 ff27 	bl	8016c3c <lv_anim_init>
    a->exec_cb = exec_cb;
 801ddee:	4b09      	ldr	r3, [pc, #36]	; (801de14 <refr_position+0x118>)
        lv_anim_set_values(&a, lv_obj_get_y(label), new_y);
 801ddf0:	4620      	mov	r0, r4
    a->var = var;
 801ddf2:	9401      	str	r4, [sp, #4]
    a->exec_cb = exec_cb;
 801ddf4:	9302      	str	r3, [sp, #8]
 801ddf6:	f7e7 f813 	bl	8004e20 <lv_obj_get_y>
    a->ready_cb = ready_cb;
 801ddfa:	4b07      	ldr	r3, [pc, #28]	; (801de18 <refr_position+0x11c>)
 801ddfc:	950a      	str	r5, [sp, #40]	; 0x28
 801ddfe:	9304      	str	r3, [sp, #16]
    a->path_cb = path_cb;
 801de00:	4b06      	ldr	r3, [pc, #24]	; (801de1c <refr_position+0x120>)
    a->time = duration;
 801de02:	960b      	str	r6, [sp, #44]	; 0x2c
    a->path_cb = path_cb;
 801de04:	9307      	str	r3, [sp, #28]
    a->current_value = start;
 801de06:	e9cd 0008 	strd	r0, r0, [sp, #32]
        lv_anim_start(&a);
 801de0a:	a801      	add	r0, sp, #4
 801de0c:	f7f8 ff5c 	bl	8016cc8 <lv_anim_start>
 801de10:	e7e6      	b.n	801dde0 <refr_position+0xe4>
 801de12:	bf00      	nop
 801de14:	0801dae9 	.word	0x0801dae9
 801de18:	0801db8f 	.word	0x0801db8f
 801de1c:	08016d9d 	.word	0x08016d9d

0801de20 <lv_roller_label_event>:
{
 801de20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    lv_event_code_t code = lv_event_get_code(e);
 801de24:	4608      	mov	r0, r1
{
 801de26:	b08e      	sub	sp, #56	; 0x38
 801de28:	460d      	mov	r5, r1
    lv_event_code_t code = lv_event_get_code(e);
 801de2a:	f7e4 f86f 	bl	8001f0c <lv_event_get_code>
    if(code != LV_EVENT_DRAW_MAIN) {
 801de2e:	2815      	cmp	r0, #21
    lv_event_code_t code = lv_event_get_code(e);
 801de30:	4604      	mov	r4, r0
    if(code != LV_EVENT_DRAW_MAIN) {
 801de32:	d11a      	bne.n	801de6a <lv_roller_label_event+0x4a>
    lv_obj_t * label = lv_event_get_target(e);
 801de34:	4628      	mov	r0, r5
 801de36:	f7e4 f867 	bl	8001f08 <lv_event_get_target>
    if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 801de3a:	2c13      	cmp	r4, #19
    lv_obj_t * label = lv_event_get_target(e);
 801de3c:	4606      	mov	r6, r0
    if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 801de3e:	d11d      	bne.n	801de7c <lv_roller_label_event+0x5c>
        lv_coord_t * s = lv_event_get_param(e);
 801de40:	4628      	mov	r0, r5
 801de42:	f7e4 f865 	bl	8001f10 <lv_event_get_param>
 801de46:	4605      	mov	r5, r0
        lv_obj_t * obj = lv_obj_get_parent(label);
 801de48:	4630      	mov	r0, r6
 801de4a:	f7e9 fdd7 	bl	80079fc <lv_obj_get_parent>
        lv_coord_t sel_w = get_selected_label_width(obj);
 801de4e:	f7ff ff2b 	bl	801dca8 <get_selected_label_width>
 801de52:	4604      	mov	r4, r0
        lv_coord_t label_w = lv_obj_get_width(label);
 801de54:	4630      	mov	r0, r6
 801de56:	f7e7 f80a 	bl	8004e6e <lv_obj_get_width>
        *s = LV_MAX(*s, sel_w - label_w);
 801de5a:	1a24      	subs	r4, r4, r0
 801de5c:	f9b5 0000 	ldrsh.w	r0, [r5]
 801de60:	4284      	cmp	r4, r0
 801de62:	bfb8      	it	lt
 801de64:	4604      	movlt	r4, r0
 801de66:	802c      	strh	r4, [r5, #0]
 801de68:	e005      	b.n	801de76 <lv_roller_label_event+0x56>
        res = lv_obj_event_base(MY_CLASS_LABEL, e);
 801de6a:	4629      	mov	r1, r5
 801de6c:	4840      	ldr	r0, [pc, #256]	; (801df70 <lv_roller_label_event+0x150>)
 801de6e:	f7e3 ffb3 	bl	8001dd8 <lv_obj_event_base>
        if(res != LV_RES_OK) return;
 801de72:	2801      	cmp	r0, #1
 801de74:	d0de      	beq.n	801de34 <lv_roller_label_event+0x14>
}
 801de76:	b00e      	add	sp, #56	; 0x38
 801de78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if(code == LV_EVENT_SIZE_CHANGED) {
 801de7c:	2c23      	cmp	r4, #35	; 0x23
 801de7e:	d105      	bne.n	801de8c <lv_roller_label_event+0x6c>
        refr_position(lv_obj_get_parent(label), LV_ANIM_OFF);
 801de80:	f7e9 fdbc 	bl	80079fc <lv_obj_get_parent>
 801de84:	2100      	movs	r1, #0
 801de86:	f7ff ff39 	bl	801dcfc <refr_position>
 801de8a:	e7f4      	b.n	801de76 <lv_roller_label_event+0x56>
    else if(code == LV_EVENT_DRAW_MAIN) {
 801de8c:	2c15      	cmp	r4, #21
 801de8e:	d1f2      	bne.n	801de76 <lv_roller_label_event+0x56>
    lv_obj_t * label_obj = lv_event_get_target(e);
 801de90:	4628      	mov	r0, r5
 801de92:	f7e4 f839 	bl	8001f08 <lv_event_get_target>
 801de96:	4604      	mov	r4, r0
    lv_obj_t * roller = lv_obj_get_parent(label_obj);
 801de98:	f7e9 fdb0 	bl	80079fc <lv_obj_get_parent>
 801de9c:	4606      	mov	r6, r0
    lv_draw_label_dsc_init(&label_draw_dsc);
 801de9e:	a806      	add	r0, sp, #24
 801dea0:	f7ec fb3e 	bl	800a520 <lv_draw_label_dsc_init>
    lv_obj_init_draw_label_dsc(roller, LV_PART_MAIN, &label_draw_dsc);
 801dea4:	aa06      	add	r2, sp, #24
 801dea6:	2100      	movs	r1, #0
 801dea8:	4630      	mov	r0, r6
 801deaa:	f7e6 fc95 	bl	80047d8 <lv_obj_init_draw_label_dsc>
    lv_coord_t font_h        = lv_font_get_line_height(font);
 801deae:	9b06      	ldr	r3, [sp, #24]
    const lv_area_t * clip_area = lv_event_get_param(e);
 801deb0:	4628      	mov	r0, r5
    lv_coord_t line_space = label_draw_dsc.line_space;
 801deb2:	f9bd 902a 	ldrsh.w	r9, [sp, #42]	; 0x2a
    lv_coord_t font_h        = lv_font_get_line_height(font);
 801deb6:	f9b3 a008 	ldrsh.w	sl, [r3, #8]
    const lv_area_t * clip_area = lv_event_get_param(e);
 801deba:	f7e4 f829 	bl	8001f10 <lv_event_get_param>
 801debe:	4607      	mov	r7, r0
    rect_area.y1 = roller->coords.y1 + (lv_obj_get_height(roller) - font_h - line_space) / 2;
 801dec0:	4630      	mov	r0, r6
 801dec2:	8af5      	ldrh	r5, [r6, #22]
 801dec4:	f7e6 ffd9 	bl	8004e7a <lv_obj_get_height>
 801dec8:	eba0 030a 	sub.w	r3, r0, sl
    if((font_h & 0x1) && (line_space & 0x1)) rect_area.y1--; /*Compensate the two rounding error*/
 801decc:	f01a 0f01 	tst.w	sl, #1
 801ded0:	fa1f f88a 	uxth.w	r8, sl
    rect_area.y1 = roller->coords.y1 + (lv_obj_get_height(roller) - font_h - line_space) / 2;
 801ded4:	eba3 0309 	sub.w	r3, r3, r9
 801ded8:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 801dedc:	eb05 0363 	add.w	r3, r5, r3, asr #1
 801dee0:	b29a      	uxth	r2, r3
 801dee2:	b21d      	sxth	r5, r3
    if((font_h & 0x1) && (line_space & 0x1)) rect_area.y1--; /*Compensate the two rounding error*/
 801dee4:	d005      	beq.n	801def2 <lv_roller_label_event+0xd2>
 801dee6:	f019 0f01 	tst.w	r9, #1
 801deea:	bf1c      	itt	ne
 801deec:	f102 35ff 	addne.w	r5, r2, #4294967295
 801def0:	b22d      	sxthne	r5, r5
    lv_obj_get_coords(roller, &roller_coords);
 801def2:	a902      	add	r1, sp, #8
 801def4:	4630      	mov	r0, r6
    rect_area.y2 = rect_area.y1 + font_h + line_space - 1;
 801def6:	f109 39ff 	add.w	r9, r9, #4294967295
    lv_obj_get_coords(roller, &roller_coords);
 801defa:	f7e6 ff68 	bl	8004dce <lv_obj_get_coords>
    clip2.x1 = label_obj->coords.x1;
 801defe:	6962      	ldr	r2, [r4, #20]
    if(_lv_area_intersect(&clip2, clip_area, &clip2)) {
 801df00:	4639      	mov	r1, r7
    rect_area.y2 = rect_area.y1 + font_h + line_space - 1;
 801df02:	44c8      	add	r8, r9
    clip2.x2 = label_obj->coords.x2;
 801df04:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
    clip2.x1 = label_obj->coords.x1;
 801df08:	9204      	str	r2, [sp, #16]
    if(_lv_area_intersect(&clip2, clip_area, &clip2)) {
 801df0a:	aa04      	add	r2, sp, #16
    rect_area.y2 = rect_area.y1 + font_h + line_space - 1;
 801df0c:	44a8      	add	r8, r5
    clip2.x2 = label_obj->coords.x2;
 801df0e:	f8ad 3014 	strh.w	r3, [sp, #20]
    if(_lv_area_intersect(&clip2, clip_area, &clip2)) {
 801df12:	4610      	mov	r0, r2
    clip2.y2 = rect_area.y1;
 801df14:	f8ad 5016 	strh.w	r5, [sp, #22]
    rect_area.y2 = rect_area.y1 + font_h + line_space - 1;
 801df18:	fa0f f888 	sxth.w	r8, r8
    if(_lv_area_intersect(&clip2, clip_area, &clip2)) {
 801df1c:	f7f8 ffbb 	bl	8016e96 <_lv_area_intersect>
 801df20:	b158      	cbz	r0, 801df3a <lv_roller_label_event+0x11a>
        lv_draw_label(&label_obj->coords, &clip2, &label_draw_dsc, lv_label_get_text(label_obj), NULL);
 801df22:	4620      	mov	r0, r4
 801df24:	f7ff faee 	bl	801d504 <lv_label_get_text>
 801df28:	2200      	movs	r2, #0
 801df2a:	4603      	mov	r3, r0
 801df2c:	a904      	add	r1, sp, #16
 801df2e:	9200      	str	r2, [sp, #0]
 801df30:	f104 0014 	add.w	r0, r4, #20
 801df34:	aa06      	add	r2, sp, #24
 801df36:	f7ec fccb 	bl	800a8d0 <lv_draw_label>
    clip2.x1 = label_obj->coords.x1;
 801df3a:	8aa3      	ldrh	r3, [r4, #20]
    if(_lv_area_intersect(&clip2, clip_area, &clip2)) {
 801df3c:	aa04      	add	r2, sp, #16
 801df3e:	4639      	mov	r1, r7
    clip2.y1 = rect_area.y2;
 801df40:	f8ad 8012 	strh.w	r8, [sp, #18]
    clip2.x1 = label_obj->coords.x1;
 801df44:	f8ad 3010 	strh.w	r3, [sp, #16]
    if(_lv_area_intersect(&clip2, clip_area, &clip2)) {
 801df48:	4610      	mov	r0, r2
    clip2.x2 = label_obj->coords.x2;
 801df4a:	69a3      	ldr	r3, [r4, #24]
 801df4c:	9305      	str	r3, [sp, #20]
    if(_lv_area_intersect(&clip2, clip_area, &clip2)) {
 801df4e:	f7f8 ffa2 	bl	8016e96 <_lv_area_intersect>
 801df52:	2800      	cmp	r0, #0
 801df54:	d08f      	beq.n	801de76 <lv_roller_label_event+0x56>
        lv_draw_label(&label_obj->coords, &clip2, &label_draw_dsc, lv_label_get_text(label_obj), NULL);
 801df56:	4620      	mov	r0, r4
 801df58:	f7ff fad4 	bl	801d504 <lv_label_get_text>
 801df5c:	2200      	movs	r2, #0
 801df5e:	4603      	mov	r3, r0
 801df60:	a904      	add	r1, sp, #16
 801df62:	9200      	str	r2, [sp, #0]
 801df64:	f104 0014 	add.w	r0, r4, #20
 801df68:	aa06      	add	r2, sp, #24
 801df6a:	f7ec fcb1 	bl	800a8d0 <lv_draw_label>
}
 801df6e:	e782      	b.n	801de76 <lv_roller_label_event+0x56>
 801df70:	08029580 	.word	0x08029580

0801df74 <lv_roller_set_selected>:
{
 801df74:	460b      	mov	r3, r1
 801df76:	4611      	mov	r1, r2
    if(roller->mode == LV_ROLLER_MODE_INFINITE) {
 801df78:	f890 202a 	ldrb.w	r2, [r0, #42]	; 0x2a
 801df7c:	07d2      	lsls	r2, r2, #31
{
 801df7e:	b430      	push	{r4, r5}
    if(roller->mode == LV_ROLLER_MODE_INFINITE) {
 801df80:	d50e      	bpl.n	801dfa0 <lv_roller_set_selected+0x2c>
        uint16_t page = roller->sel_opt_id / LV_ROLLER_INF_PAGES;
 801df82:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 801df84:	2407      	movs	r4, #7
 801df86:	fbb2 f5f4 	udiv	r5, r2, r4
        if(page != 0) {
 801df8a:	2a06      	cmp	r2, #6
 801df8c:	ea4f 04c5 	mov.w	r4, r5, lsl #3
            sel_opt_signed -= page * LV_ROLLER_INF_PAGES;
 801df90:	bf88      	it	hi
 801df92:	1b2a      	subhi	r2, r5, r4
        sel_opt = page * LV_ROLLER_INF_PAGES + sel_opt_signed;
 801df94:	eba4 0405 	sub.w	r4, r4, r5
            sel_opt_signed -= page * LV_ROLLER_INF_PAGES;
 801df98:	bf88      	it	hi
 801df9a:	189b      	addhi	r3, r3, r2
        sel_opt = page * LV_ROLLER_INF_PAGES + sel_opt_signed;
 801df9c:	4423      	add	r3, r4
 801df9e:	b29b      	uxth	r3, r3
    roller->sel_opt_id     = sel_opt < roller->option_cnt ? sel_opt : roller->option_cnt - 1;
 801dfa0:	8c84      	ldrh	r4, [r0, #36]	; 0x24
 801dfa2:	429c      	cmp	r4, r3
 801dfa4:	bf9c      	itt	ls
 801dfa6:	f104 33ff 	addls.w	r3, r4, #4294967295
 801dfaa:	b29b      	uxthls	r3, r3
}
 801dfac:	bc30      	pop	{r4, r5}
    roller->sel_opt_id     = sel_opt < roller->option_cnt ? sel_opt : roller->option_cnt - 1;
 801dfae:	84c3      	strh	r3, [r0, #38]	; 0x26
    roller->sel_opt_id_ori = roller->sel_opt_id;
 801dfb0:	8503      	strh	r3, [r0, #40]	; 0x28
    refr_position(obj, anim);
 801dfb2:	f7ff bea3 	b.w	801dcfc <refr_position>
	...

0801dfb8 <lv_roller_event>:
{
 801dfb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    res = lv_obj_event_base(MY_CLASS, e);
 801dfbc:	48c2      	ldr	r0, [pc, #776]	; (801e2c8 <lv_roller_event+0x310>)
{
 801dfbe:	b09c      	sub	sp, #112	; 0x70
 801dfc0:	460e      	mov	r6, r1
    res = lv_obj_event_base(MY_CLASS, e);
 801dfc2:	f7e3 ff09 	bl	8001dd8 <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 801dfc6:	2801      	cmp	r0, #1
 801dfc8:	d111      	bne.n	801dfee <lv_roller_event+0x36>
    lv_event_code_t code = lv_event_get_code(e);
 801dfca:	4630      	mov	r0, r6
 801dfcc:	f7e3 ff9e 	bl	8001f0c <lv_event_get_code>
 801dfd0:	4605      	mov	r5, r0
    lv_obj_t * obj = lv_event_get_target(e);
 801dfd2:	4630      	mov	r0, r6
 801dfd4:	f7e3 ff98 	bl	8001f08 <lv_event_get_target>
    if(code == LV_EVENT_GET_SELF_SIZE) {
 801dfd8:	2d26      	cmp	r5, #38	; 0x26
    lv_obj_t * obj = lv_event_get_target(e);
 801dfda:	4604      	mov	r4, r0
    if(code == LV_EVENT_GET_SELF_SIZE) {
 801dfdc:	d10a      	bne.n	801dff4 <lv_roller_event+0x3c>
        lv_point_t * p = lv_event_get_param(e);
 801dfde:	4630      	mov	r0, r6
 801dfe0:	f7e3 ff96 	bl	8001f10 <lv_event_get_param>
 801dfe4:	4605      	mov	r5, r0
        p->x =  get_selected_label_width(obj);
 801dfe6:	4620      	mov	r0, r4
 801dfe8:	f7ff fe5e 	bl	801dca8 <get_selected_label_width>
 801dfec:	8028      	strh	r0, [r5, #0]
}
 801dfee:	b01c      	add	sp, #112	; 0x70
 801dff0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if(code == LV_EVENT_STYLE_CHANGED) {
 801dff4:	2d24      	cmp	r5, #36	; 0x24
 801dff6:	d10c      	bne.n	801e012 <lv_roller_event+0x5a>
        lv_obj_t * label = get_label(obj);
 801dff8:	f7ff fd7f 	bl	801dafa <get_label>
        if(label) lv_event_send(label, LV_EVENT_STYLE_CHANGED, NULL);
 801dffc:	b118      	cbz	r0, 801e006 <lv_roller_event+0x4e>
 801dffe:	2200      	movs	r2, #0
 801e000:	4629      	mov	r1, r5
 801e002:	f7e3 ff61 	bl	8001ec8 <lv_event_send>
        lv_obj_refresh_self_size(obj);
 801e006:	4620      	mov	r0, r4
 801e008:	f7e6 ffc1 	bl	8004f8e <lv_obj_refresh_self_size>
        refr_position(obj, false);
 801e00c:	2100      	movs	r1, #0
                    refr_position(obj, true);
 801e00e:	4620      	mov	r0, r4
 801e010:	e002      	b.n	801e018 <lv_roller_event+0x60>
    else if(code == LV_EVENT_SIZE_CHANGED) {
 801e012:	2d23      	cmp	r5, #35	; 0x23
 801e014:	d103      	bne.n	801e01e <lv_roller_event+0x66>
        refr_position(obj, false);
 801e016:	2100      	movs	r1, #0
 801e018:	f7ff fe70 	bl	801dcfc <refr_position>
 801e01c:	e7e7      	b.n	801dfee <lv_roller_event+0x36>
    else if(code == LV_EVENT_PRESSED) {
 801e01e:	2d01      	cmp	r5, #1
 801e020:	d10b      	bne.n	801e03a <lv_roller_event+0x82>
        roller->moved = 0;
 801e022:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 801e026:	f36f 0341 	bfc	r3, #1, #1
 801e02a:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
        lv_anim_del(get_label(obj), set_y_anim);
 801e02e:	f7ff fd64 	bl	801dafa <get_label>
 801e032:	49a6      	ldr	r1, [pc, #664]	; (801e2cc <lv_roller_event+0x314>)
 801e034:	f7f8 fe1c 	bl	8016c70 <lv_anim_del>
 801e038:	e7d9      	b.n	801dfee <lv_roller_event+0x36>
    else if(code == LV_EVENT_PRESSING) {
 801e03a:	2d02      	cmp	r5, #2
 801e03c:	d11c      	bne.n	801e078 <lv_roller_event+0xc0>
        lv_indev_t * indev = lv_indev_get_act();
 801e03e:	f7e4 f9d9 	bl	80023f4 <lv_indev_get_act>
        lv_indev_get_vect(indev, &p);
 801e042:	a90f      	add	r1, sp, #60	; 0x3c
 801e044:	f7e4 fa65 	bl	8002512 <lv_indev_get_vect>
        if(p.y) {
 801e048:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 801e04c:	2b00      	cmp	r3, #0
 801e04e:	d0ce      	beq.n	801dfee <lv_roller_event+0x36>
            lv_obj_t * label = get_label(obj);
 801e050:	4620      	mov	r0, r4
 801e052:	f7ff fd52 	bl	801dafa <get_label>
 801e056:	4605      	mov	r5, r0
            lv_obj_set_y(label, lv_obj_get_y(label) + p.y);
 801e058:	f7e6 fee2 	bl	8004e20 <lv_obj_get_y>
 801e05c:	f8bd 103e 	ldrh.w	r1, [sp, #62]	; 0x3e
 801e060:	4401      	add	r1, r0
 801e062:	4628      	mov	r0, r5
 801e064:	b209      	sxth	r1, r1
 801e066:	f7e6 fe43 	bl	8004cf0 <lv_obj_set_y>
            roller->moved = 1;
 801e06a:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 801e06e:	f043 0302 	orr.w	r3, r3, #2
 801e072:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
 801e076:	e7ba      	b.n	801dfee <lv_roller_event+0x36>
    else if(code == LV_EVENT_RELEASED) {
 801e078:	2d08      	cmp	r5, #8
 801e07a:	f040 8094 	bne.w	801e1a6 <lv_roller_event+0x1ee>
    lv_obj_t * label = get_label(obj);
 801e07e:	f7ff fd3c 	bl	801dafa <get_label>
    if(label == NULL) return LV_RES_OK;
 801e082:	4607      	mov	r7, r0
 801e084:	2800      	cmp	r0, #0
 801e086:	d0b2      	beq.n	801dfee <lv_roller_event+0x36>
    lv_indev_t * indev = lv_indev_get_act();
 801e088:	f7e4 f9b4 	bl	80023f4 <lv_indev_get_act>
 801e08c:	4680      	mov	r8, r0
    lv_indev_type_t indev_type = lv_indev_get_type(indev);
 801e08e:	f7e4 f9b7 	bl	8002400 <lv_indev_get_type>
    if(indev_type == LV_INDEV_TYPE_ENCODER || indev_type == LV_INDEV_TYPE_KEYPAD) {
 801e092:	2804      	cmp	r0, #4
 801e094:	d001      	beq.n	801e09a <lv_roller_event+0xe2>
 801e096:	2802      	cmp	r0, #2
 801e098:	d10e      	bne.n	801e0b8 <lv_roller_event+0x100>
        roller->sel_opt_id_ori = roller->sel_opt_id;
 801e09a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if(indev_type == LV_INDEV_TYPE_ENCODER) {
 801e09c:	2804      	cmp	r0, #4
        roller->sel_opt_id_ori = roller->sel_opt_id;
 801e09e:	8523      	strh	r3, [r4, #40]	; 0x28
        if(indev_type == LV_INDEV_TYPE_ENCODER) {
 801e0a0:	d10a      	bne.n	801e0b8 <lv_roller_event+0x100>
            lv_group_t * g      = lv_obj_get_group(obj);
 801e0a2:	4620      	mov	r0, r4
 801e0a4:	f7e5 fe9c 	bl	8003de0 <lv_obj_get_group>
 801e0a8:	4605      	mov	r5, r0
            if(lv_group_get_editing(g)) {
 801e0aa:	f7e4 f92f 	bl	800230c <lv_group_get_editing>
 801e0ae:	b118      	cbz	r0, 801e0b8 <lv_roller_event+0x100>
                lv_group_set_editing(g, false);
 801e0b0:	2100      	movs	r1, #0
 801e0b2:	4628      	mov	r0, r5
 801e0b4:	f7e4 f8c6 	bl	8002244 <lv_group_set_editing>
    if(lv_indev_get_type(indev) == LV_INDEV_TYPE_POINTER || lv_indev_get_type(indev) == LV_INDEV_TYPE_BUTTON) {
 801e0b8:	4640      	mov	r0, r8
 801e0ba:	f7e4 f9a1 	bl	8002400 <lv_indev_get_type>
 801e0be:	2801      	cmp	r0, #1
 801e0c0:	d12e      	bne.n	801e120 <lv_roller_event+0x168>
        if(roller->moved == 0) {
 801e0c2:	f894 602a 	ldrb.w	r6, [r4, #42]	; 0x2a
 801e0c6:	f016 0602 	ands.w	r6, r6, #2
 801e0ca:	d036      	beq.n	801e13a <lv_roller_event+0x182>
            const lv_font_t * font = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 801e0cc:	2100      	movs	r1, #0
 801e0ce:	4620      	mov	r0, r4
 801e0d0:	f7ff fd0d 	bl	801daee <lv_obj_get_style_text_font>
 801e0d4:	4605      	mov	r5, r0
            lv_coord_t line_space = lv_obj_get_style_text_line_space(obj, LV_PART_MAIN);
 801e0d6:	4620      	mov	r0, r4
 801e0d8:	f7ff fd12 	bl	801db00 <lv_obj_get_style_text_line_space.constprop.0>
            lv_coord_t mid        = obj->coords.y1 + (obj->coords.y2 - obj->coords.y1) / 2;
 801e0dc:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 801e0e0:	f9b4 601a 	ldrsh.w	r6, [r4, #26]
            lv_coord_t label_y1 = label->coords.y1 + lv_indev_scroll_throw_predict(indev, LV_DIR_VER);
 801e0e4:	210c      	movs	r1, #12
            lv_coord_t label_unit = font_h + line_space;
 801e0e6:	f8b5 9008 	ldrh.w	r9, [r5, #8]
            lv_coord_t mid        = obj->coords.y1 + (obj->coords.y2 - obj->coords.y1) / 2;
 801e0ea:	1af6      	subs	r6, r6, r3
            lv_coord_t label_y1 = label->coords.y1 + lv_indev_scroll_throw_predict(indev, LV_DIR_VER);
 801e0ec:	8afd      	ldrh	r5, [r7, #22]
            lv_coord_t label_unit = font_h + line_space;
 801e0ee:	4448      	add	r0, r9
            lv_coord_t mid        = obj->coords.y1 + (obj->coords.y2 - obj->coords.y1) / 2;
 801e0f0:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
            lv_coord_t label_unit = font_h + line_space;
 801e0f4:	fa0f f980 	sxth.w	r9, r0
            lv_coord_t label_y1 = label->coords.y1 + lv_indev_scroll_throw_predict(indev, LV_DIR_VER);
 801e0f8:	4640      	mov	r0, r8
            lv_coord_t mid        = obj->coords.y1 + (obj->coords.y2 - obj->coords.y1) / 2;
 801e0fa:	eb03 0366 	add.w	r3, r3, r6, asr #1
 801e0fe:	b21e      	sxth	r6, r3
            lv_coord_t label_y1 = label->coords.y1 + lv_indev_scroll_throw_predict(indev, LV_DIR_VER);
 801e100:	f7e5 fc64 	bl	80039cc <lv_indev_scroll_throw_predict>
 801e104:	4405      	add	r5, r0
            if(id >= roller->option_cnt) id = roller->option_cnt - 1;
 801e106:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
            int32_t id = (mid - label_y1) / label_unit;
 801e108:	b22d      	sxth	r5, r5
 801e10a:	1b75      	subs	r5, r6, r5
 801e10c:	fb95 f5f9 	sdiv	r5, r5, r9
            if(id < 0) id = 0;
 801e110:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
            if(id >= roller->option_cnt) id = roller->option_cnt - 1;
 801e114:	429d      	cmp	r5, r3
 801e116:	bfa8      	it	ge
 801e118:	f103 35ff 	addge.w	r5, r3, #4294967295
            new_opt = id;
 801e11c:	b22d      	sxth	r5, r5
 801e11e:	e02c      	b.n	801e17a <lv_roller_event+0x1c2>
    if(lv_indev_get_type(indev) == LV_INDEV_TYPE_POINTER || lv_indev_get_type(indev) == LV_INDEV_TYPE_BUTTON) {
 801e120:	4640      	mov	r0, r8
 801e122:	f7e4 f96d 	bl	8002400 <lv_indev_get_type>
 801e126:	2803      	cmp	r0, #3
 801e128:	d0cb      	beq.n	801e0c2 <lv_roller_event+0x10a>
    uint32_t id  = roller->sel_opt_id; /*Just to use uint32_t in event data*/
 801e12a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    lv_res_t res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, &id);
 801e12c:	aa0f      	add	r2, sp, #60	; 0x3c
 801e12e:	211c      	movs	r1, #28
 801e130:	4620      	mov	r0, r4
    uint32_t id  = roller->sel_opt_id; /*Just to use uint32_t in event data*/
 801e132:	930f      	str	r3, [sp, #60]	; 0x3c
    lv_res_t res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, &id);
 801e134:	f7e3 fec8 	bl	8001ec8 <lv_event_send>
    return res;
 801e138:	e759      	b.n	801dfee <lv_roller_event+0x36>
            lv_indev_get_point(indev, &p);
 801e13a:	4640      	mov	r0, r8
 801e13c:	a90d      	add	r1, sp, #52	; 0x34
 801e13e:	f7e4 f9ba 	bl	80024b6 <lv_indev_get_point>
            p.y -= label->coords.y1;
 801e142:	8afa      	ldrh	r2, [r7, #22]
 801e144:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
            letter_i = lv_label_get_letter_on(label, &p);
 801e148:	a90d      	add	r1, sp, #52	; 0x34
 801e14a:	4638      	mov	r0, r7
            new_opt = 0;
 801e14c:	4635      	mov	r5, r6
            p.y -= label->coords.y1;
 801e14e:	1a9b      	subs	r3, r3, r2
            p.x -= label->coords.x1;
 801e150:	8aba      	ldrh	r2, [r7, #20]
                uint32_t letter = _lv_txt_encoded_next(txt, &i);
 801e152:	f8df a17c 	ldr.w	sl, [pc, #380]	; 801e2d0 <lv_roller_event+0x318>
            p.y -= label->coords.y1;
 801e156:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
            p.x -= label->coords.x1;
 801e15a:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 801e15e:	1a9b      	subs	r3, r3, r2
 801e160:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
            letter_i = lv_label_get_letter_on(label, &p);
 801e164:	f7ff fac0 	bl	801d6e8 <lv_label_get_letter_on>
 801e168:	4680      	mov	r8, r0
            const char * txt  = lv_label_get_text(label);
 801e16a:	4638      	mov	r0, r7
 801e16c:	f7ff f9ca 	bl	801d504 <lv_label_get_text>
            uint32_t i_prev   = 0;
 801e170:	4637      	mov	r7, r6
            const char * txt  = lv_label_get_text(label);
 801e172:	4681      	mov	r9, r0
            uint32_t i        = 0;
 801e174:	960f      	str	r6, [sp, #60]	; 0x3c
            for(letter_cnt = 0; letter_cnt < letter_i; letter_cnt++) {
 801e176:	45b0      	cmp	r8, r6
 801e178:	d107      	bne.n	801e18a <lv_roller_event+0x1d2>
        if(new_opt >= 0) {
 801e17a:	2d00      	cmp	r5, #0
 801e17c:	dbd5      	blt.n	801e12a <lv_roller_event+0x172>
            lv_roller_set_selected(obj, new_opt, LV_ANIM_ON);
 801e17e:	2201      	movs	r2, #1
 801e180:	b2a9      	uxth	r1, r5
 801e182:	4620      	mov	r0, r4
 801e184:	f7ff fef6 	bl	801df74 <lv_roller_set_selected>
 801e188:	e7cf      	b.n	801e12a <lv_roller_event+0x172>
                uint32_t letter = _lv_txt_encoded_next(txt, &i);
 801e18a:	f8da 3000 	ldr.w	r3, [sl]
 801e18e:	a90f      	add	r1, sp, #60	; 0x3c
 801e190:	4648      	mov	r0, r9
 801e192:	4798      	blx	r3
                if(letter == '\n' && i_prev != letter_i) new_opt++;
 801e194:	280a      	cmp	r0, #10
 801e196:	d103      	bne.n	801e1a0 <lv_roller_event+0x1e8>
 801e198:	45b8      	cmp	r8, r7
 801e19a:	bf1c      	itt	ne
 801e19c:	3501      	addne	r5, #1
 801e19e:	b22d      	sxthne	r5, r5
                i_prev = i;
 801e1a0:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
            for(letter_cnt = 0; letter_cnt < letter_i; letter_cnt++) {
 801e1a2:	3601      	adds	r6, #1
 801e1a4:	e7e7      	b.n	801e176 <lv_roller_event+0x1be>
    else if(code == LV_EVENT_FOCUSED) {
 801e1a6:	2d0e      	cmp	r5, #14
 801e1a8:	d115      	bne.n	801e1d6 <lv_roller_event+0x21e>
        lv_group_t * g             = lv_obj_get_group(obj);
 801e1aa:	f7e5 fe19 	bl	8003de0 <lv_obj_get_group>
        bool editing               = lv_group_get_editing(g);
 801e1ae:	f7e4 f8ad 	bl	800230c <lv_group_get_editing>
 801e1b2:	4605      	mov	r5, r0
        lv_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
 801e1b4:	f7e4 f91e 	bl	80023f4 <lv_indev_get_act>
 801e1b8:	f7e4 f922 	bl	8002400 <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_ENCODER) {
 801e1bc:	2804      	cmp	r0, #4
 801e1be:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 801e1c0:	d107      	bne.n	801e1d2 <lv_roller_event+0x21a>
            if(!editing) {
 801e1c2:	b935      	cbnz	r5, 801e1d2 <lv_roller_event+0x21a>
                if(roller->sel_opt_id != roller->sel_opt_id_ori) {
 801e1c4:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 801e1c6:	429a      	cmp	r2, r3
 801e1c8:	f43f af11 	beq.w	801dfee <lv_roller_event+0x36>
                    roller->sel_opt_id = roller->sel_opt_id_ori;
 801e1cc:	84e2      	strh	r2, [r4, #38]	; 0x26
                    refr_position(obj, true);
 801e1ce:	2101      	movs	r1, #1
 801e1d0:	e71d      	b.n	801e00e <lv_roller_event+0x56>
            roller->sel_opt_id_ori = roller->sel_opt_id; /*Save the current value. Used to revert this state if
 801e1d2:	8523      	strh	r3, [r4, #40]	; 0x28
 801e1d4:	e70b      	b.n	801dfee <lv_roller_event+0x36>
    else if(code == LV_EVENT_DEFOCUSED) {
 801e1d6:	2d0f      	cmp	r5, #15
 801e1d8:	d106      	bne.n	801e1e8 <lv_roller_event+0x230>
        if(roller->sel_opt_id != roller->sel_opt_id_ori) {
 801e1da:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 801e1dc:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 801e1de:	429a      	cmp	r2, r3
 801e1e0:	f43f af05 	beq.w	801dfee <lv_roller_event+0x36>
            roller->sel_opt_id = roller->sel_opt_id_ori;
 801e1e4:	84c3      	strh	r3, [r0, #38]	; 0x26
            refr_position(obj, true);
 801e1e6:	e7f2      	b.n	801e1ce <lv_roller_event+0x216>
    else if(code == LV_EVENT_KEY) {
 801e1e8:	2d0d      	cmp	r5, #13
 801e1ea:	d121      	bne.n	801e230 <lv_roller_event+0x278>
        char c = *((char *)lv_event_get_param(e));
 801e1ec:	4630      	mov	r0, r6
 801e1ee:	f7e3 fe8f 	bl	8001f10 <lv_event_get_param>
 801e1f2:	7803      	ldrb	r3, [r0, #0]
        if(c == LV_KEY_RIGHT || c == LV_KEY_DOWN) {
 801e1f4:	f1a3 0212 	sub.w	r2, r3, #18
 801e1f8:	2a01      	cmp	r2, #1
 801e1fa:	d80d      	bhi.n	801e218 <lv_roller_event+0x260>
            if(roller->sel_opt_id + 1 < roller->option_cnt) {
 801e1fc:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 801e1fe:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 801e200:	3101      	adds	r1, #1
 801e202:	4299      	cmp	r1, r3
 801e204:	f6bf aef3 	bge.w	801dfee <lv_roller_event+0x36>
                uint16_t ori_id = roller->sel_opt_id_ori; /*lv_roller_set_selected will overwrite this*/
 801e208:	8d25      	ldrh	r5, [r4, #40]	; 0x28
                lv_roller_set_selected(obj, roller->sel_opt_id - 1, true);
 801e20a:	2201      	movs	r2, #1
 801e20c:	b289      	uxth	r1, r1
 801e20e:	4620      	mov	r0, r4
 801e210:	f7ff feb0 	bl	801df74 <lv_roller_set_selected>
                roller->sel_opt_id_ori = ori_id;
 801e214:	8525      	strh	r5, [r4, #40]	; 0x28
 801e216:	e6ea      	b.n	801dfee <lv_roller_event+0x36>
        else if(c == LV_KEY_LEFT || c == LV_KEY_UP) {
 801e218:	2b14      	cmp	r3, #20
 801e21a:	d002      	beq.n	801e222 <lv_roller_event+0x26a>
 801e21c:	2b11      	cmp	r3, #17
 801e21e:	f47f aee6 	bne.w	801dfee <lv_roller_event+0x36>
            if(roller->sel_opt_id > 0) {
 801e222:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 801e224:	2900      	cmp	r1, #0
 801e226:	f43f aee2 	beq.w	801dfee <lv_roller_event+0x36>
                uint16_t ori_id = roller->sel_opt_id_ori; /*lv_roller_set_selected will overwrite this*/
 801e22a:	8d25      	ldrh	r5, [r4, #40]	; 0x28
                lv_roller_set_selected(obj, roller->sel_opt_id - 1, true);
 801e22c:	3901      	subs	r1, #1
 801e22e:	e7ec      	b.n	801e20a <lv_roller_event+0x252>
    else if(code == LV_EVENT_DRAW_MAIN || code == LV_EVENT_DRAW_POST) {
 801e230:	2d15      	cmp	r5, #21
 801e232:	d002      	beq.n	801e23a <lv_roller_event+0x282>
 801e234:	2d18      	cmp	r5, #24
 801e236:	f47f aeda 	bne.w	801dfee <lv_roller_event+0x36>
    lv_event_code_t code = lv_event_get_code(e);
 801e23a:	4630      	mov	r0, r6
 801e23c:	f7e3 fe66 	bl	8001f0c <lv_event_get_code>
 801e240:	4605      	mov	r5, r0
    lv_obj_t * obj = lv_event_get_target(e);
 801e242:	4630      	mov	r0, r6
 801e244:	f7e3 fe60 	bl	8001f08 <lv_event_get_target>
    if(code == LV_EVENT_DRAW_MAIN) {
 801e248:	2d15      	cmp	r5, #21
    lv_obj_t * obj = lv_event_get_target(e);
 801e24a:	4604      	mov	r4, r0
    if(code == LV_EVENT_DRAW_MAIN) {
 801e24c:	d142      	bne.n	801e2d4 <lv_roller_event+0x31c>
        const lv_area_t * clip_area = lv_event_get_param(e);
 801e24e:	4630      	mov	r0, r6
 801e250:	f7e3 fe5e 	bl	8001f10 <lv_event_get_param>
        const lv_font_t * font = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 801e254:	2100      	movs	r1, #0
        const lv_area_t * clip_area = lv_event_get_param(e);
 801e256:	4606      	mov	r6, r0
        const lv_font_t * font = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 801e258:	4620      	mov	r0, r4
 801e25a:	f7ff fc48 	bl	801daee <lv_obj_get_style_text_font>
 801e25e:	4605      	mov	r5, r0
        lv_coord_t line_space = lv_obj_get_style_text_line_space(obj, LV_PART_MAIN);
 801e260:	4620      	mov	r0, r4
 801e262:	f7ff fc4d 	bl	801db00 <lv_obj_get_style_text_line_space.constprop.0>
        lv_coord_t font_h        = lv_font_get_line_height(font);
 801e266:	f9b5 8008 	ldrsh.w	r8, [r5, #8]
        lv_coord_t line_space = lv_obj_get_style_text_line_space(obj, LV_PART_MAIN);
 801e26a:	4607      	mov	r7, r0
        rect_area.y1 = obj->coords.y1 + (lv_obj_get_height(obj) - font_h - line_space) / 2;
 801e26c:	4620      	mov	r0, r4
 801e26e:	8ae5      	ldrh	r5, [r4, #22]
 801e270:	f7e6 fe03 	bl	8004e7a <lv_obj_get_height>
 801e274:	eba0 0208 	sub.w	r2, r0, r8
        lv_obj_get_coords(obj, &roller_coords);
 801e278:	a90d      	add	r1, sp, #52	; 0x34
 801e27a:	4620      	mov	r0, r4
        rect_area.y1 = obj->coords.y1 + (lv_obj_get_height(obj) - font_h - line_space) / 2;
 801e27c:	1bd2      	subs	r2, r2, r7
        rect_area.y2 = rect_area.y1 + font_h + line_space - 1;
 801e27e:	3f01      	subs	r7, #1
        rect_area.y1 = obj->coords.y1 + (lv_obj_get_height(obj) - font_h - line_space) / 2;
 801e280:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
        rect_area.y2 = rect_area.y1 + font_h + line_space - 1;
 801e284:	4447      	add	r7, r8
        rect_area.y1 = obj->coords.y1 + (lv_obj_get_height(obj) - font_h - line_space) / 2;
 801e286:	eb05 0562 	add.w	r5, r5, r2, asr #1
 801e28a:	b2ab      	uxth	r3, r5
 801e28c:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
        rect_area.y2 = rect_area.y1 + font_h + line_space - 1;
 801e290:	443b      	add	r3, r7
 801e292:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
        lv_obj_get_coords(obj, &roller_coords);
 801e296:	f7e6 fd9a 	bl	8004dce <lv_obj_get_coords>
        rect_area.x1 = roller_coords.x1;
 801e29a:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
        lv_draw_rect_dsc_init(&sel_dsc);
 801e29e:	a80f      	add	r0, sp, #60	; 0x3c
        rect_area.x1 = roller_coords.x1;
 801e2a0:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
        rect_area.x2 = roller_coords.x2;
 801e2a4:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801e2a8:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
        lv_draw_rect_dsc_init(&sel_dsc);
 801e2ac:	f7ee fbec 	bl	800ca88 <lv_draw_rect_dsc_init>
        lv_obj_init_draw_rect_dsc(obj, LV_PART_SELECTED, &sel_dsc);
 801e2b0:	aa0f      	add	r2, sp, #60	; 0x3c
 801e2b2:	4620      	mov	r0, r4
 801e2b4:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 801e2b8:	f7e6 f952 	bl	8004560 <lv_obj_init_draw_rect_dsc>
        lv_draw_rect(&rect_area, clip_area, &sel_dsc);
 801e2bc:	aa0f      	add	r2, sp, #60	; 0x3c
 801e2be:	4631      	mov	r1, r6
 801e2c0:	a80b      	add	r0, sp, #44	; 0x2c
 801e2c2:	f7ee fc03 	bl	800cacc <lv_draw_rect>
 801e2c6:	e692      	b.n	801dfee <lv_roller_event+0x36>
 801e2c8:	08029564 	.word	0x08029564
 801e2cc:	0801dae9 	.word	0x0801dae9
 801e2d0:	20000040 	.word	0x20000040
    else if(code == LV_EVENT_DRAW_POST) {
 801e2d4:	2d18      	cmp	r5, #24
 801e2d6:	f47f ae8a 	bne.w	801dfee <lv_roller_event+0x36>
        const lv_area_t * clip_area = lv_event_get_param(e);
 801e2da:	4630      	mov	r0, r6
 801e2dc:	f7e3 fe18 	bl	8001f10 <lv_event_get_param>
 801e2e0:	4606      	mov	r6, r0
        lv_draw_label_dsc_init(&label_dsc);
 801e2e2:	a80f      	add	r0, sp, #60	; 0x3c
 801e2e4:	f7ec f91c 	bl	800a520 <lv_draw_label_dsc_init>
        lv_obj_init_draw_label_dsc(obj, LV_PART_SELECTED, &label_dsc);
 801e2e8:	aa0f      	add	r2, sp, #60	; 0x3c
 801e2ea:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 801e2ee:	4620      	mov	r0, r4
 801e2f0:	f7e6 fa72 	bl	80047d8 <lv_obj_init_draw_label_dsc>
        lv_coord_t bg_font_h = lv_font_get_line_height(lv_obj_get_style_text_font(obj, LV_PART_MAIN));
 801e2f4:	2100      	movs	r1, #0
 801e2f6:	4620      	mov	r0, r4
 801e2f8:	f7ff fbf9 	bl	801daee <lv_obj_get_style_text_font>
 801e2fc:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
        rect_area.y1 = obj->coords.y1 + (lv_obj_get_height(obj) - bg_font_h - label_dsc.line_space) / 2;
 801e300:	4620      	mov	r0, r4
 801e302:	8ae5      	ldrh	r5, [r4, #22]
 801e304:	f7e6 fdb9 	bl	8004e7a <lv_obj_get_height>
 801e308:	f9bd 104e 	ldrsh.w	r1, [sp, #78]	; 0x4e
 801e30c:	1bc2      	subs	r2, r0, r7
        area_ok = _lv_area_intersect(&mask_sel, clip_area, &rect_area);
 801e30e:	a80b      	add	r0, sp, #44	; 0x2c
        rect_area.y1 = obj->coords.y1 + (lv_obj_get_height(obj) - bg_font_h - label_dsc.line_space) / 2;
 801e310:	1a52      	subs	r2, r2, r1
        rect_area.y2 = rect_area.y1 + bg_font_h + label_dsc.line_space - 1;
 801e312:	3901      	subs	r1, #1
        rect_area.y1 = obj->coords.y1 + (lv_obj_get_height(obj) - bg_font_h - label_dsc.line_space) / 2;
 801e314:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
        rect_area.y2 = rect_area.y1 + bg_font_h + label_dsc.line_space - 1;
 801e318:	4439      	add	r1, r7
        rect_area.y1 = obj->coords.y1 + (lv_obj_get_height(obj) - bg_font_h - label_dsc.line_space) / 2;
 801e31a:	eb05 0562 	add.w	r5, r5, r2, asr #1
        area_ok = _lv_area_intersect(&mask_sel, clip_area, &rect_area);
 801e31e:	aa09      	add	r2, sp, #36	; 0x24
        rect_area.y1 = obj->coords.y1 + (lv_obj_get_height(obj) - bg_font_h - label_dsc.line_space) / 2;
 801e320:	b2ab      	uxth	r3, r5
 801e322:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
        rect_area.y2 = rect_area.y1 + bg_font_h + label_dsc.line_space - 1;
 801e326:	440b      	add	r3, r1
        area_ok = _lv_area_intersect(&mask_sel, clip_area, &rect_area);
 801e328:	4631      	mov	r1, r6
        rect_area.y2 = rect_area.y1 + bg_font_h + label_dsc.line_space - 1;
 801e32a:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
        rect_area.x1 = obj->coords.x1;
 801e32e:	8aa3      	ldrh	r3, [r4, #20]
 801e330:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
        rect_area.x2 = obj->coords.x2;
 801e334:	8b23      	ldrh	r3, [r4, #24]
 801e336:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
        area_ok = _lv_area_intersect(&mask_sel, clip_area, &rect_area);
 801e33a:	f7f8 fdac 	bl	8016e96 <_lv_area_intersect>
        if(area_ok) {
 801e33e:	2800      	cmp	r0, #0
 801e340:	f43f ae55 	beq.w	801dfee <lv_roller_event+0x36>
            lv_obj_t * label = get_label(obj);
 801e344:	4620      	mov	r0, r4
            lv_txt_get_size(&res_p, lv_label_get_text(label), label_dsc.font, label_dsc.letter_space, label_dsc.line_space,
 801e346:	2702      	movs	r7, #2
            lv_obj_t * label = get_label(obj);
 801e348:	f7ff fbd7 	bl	801dafa <get_label>
 801e34c:	4606      	mov	r6, r0
            lv_txt_get_size(&res_p, lv_label_get_text(label), label_dsc.font, label_dsc.letter_space, label_dsc.line_space,
 801e34e:	f7ff f8d9 	bl	801d504 <lv_label_get_text>
 801e352:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e354:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	; 0x50
 801e358:	f9bd 504e 	ldrsh.w	r5, [sp, #78]	; 0x4e
 801e35c:	9007      	str	r0, [sp, #28]
 801e35e:	4620      	mov	r0, r4
 801e360:	9206      	str	r2, [sp, #24]
 801e362:	9305      	str	r3, [sp, #20]
 801e364:	f7e6 fd83 	bl	8004e6e <lv_obj_get_width>
 801e368:	9907      	ldr	r1, [sp, #28]
 801e36a:	9500      	str	r5, [sp, #0]
 801e36c:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 801e370:	e9cd 0701 	strd	r0, r7, [sp, #4]
 801e374:	a808      	add	r0, sp, #32
 801e376:	f7fb f8ee 	bl	8019556 <lv_txt_get_size>
            lv_coord_t roller_h = lv_obj_get_height(obj);
 801e37a:	4620      	mov	r0, r4
 801e37c:	f7e6 fd7d 	bl	8004e7a <lv_obj_get_height>
                    obj->coords.y1); /*label offset from the middle line of the roller*/
 801e380:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
            int32_t label_y_prop = label->coords.y1 - (roller_h / 2 +
 801e384:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 801e388:	f9b6 5016 	ldrsh.w	r5, [r6, #22]
 801e38c:	f340 074f 	sbfx	r7, r0, #1, #16
            label_y_prop = (label_y_prop * 16384) / lv_obj_get_height(
 801e390:	4630      	mov	r0, r6
 801e392:	f7e6 fd72 	bl	8004e7a <lv_obj_get_height>
            const lv_font_t * normal_label_font = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 801e396:	2100      	movs	r1, #0
            int32_t label_y_prop = label->coords.y1 - (roller_h / 2 +
 801e398:	44b8      	add	r8, r7
 801e39a:	eba5 0508 	sub.w	r5, r5, r8
            label_y_prop = (label_y_prop * 16384) / lv_obj_get_height(
 801e39e:	03ad      	lsls	r5, r5, #14
 801e3a0:	fb95 f5f0 	sdiv	r5, r5, r0
            const lv_font_t * normal_label_font = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 801e3a4:	4620      	mov	r0, r4
 801e3a6:	f7ff fba2 	bl	801daee <lv_obj_get_style_text_font>
            lv_coord_t corr = (label_dsc.font->line_height - normal_label_font->line_height) / 2;
 801e3aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
            res_p.y -= corr;
 801e3ac:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
            lv_coord_t corr = (label_dsc.font->line_height - normal_label_font->line_height) / 2;
 801e3b0:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 801e3b4:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 801e3b8:	1ad2      	subs	r2, r2, r3
            int32_t label_sel_y = roller_h / 2 + obj->coords.y1;
 801e3ba:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
            lv_coord_t corr = (label_dsc.font->line_height - normal_label_font->line_height) / 2;
 801e3be:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
            int32_t label_sel_y = roller_h / 2 + obj->coords.y1;
 801e3c2:	443b      	add	r3, r7
            res_p.y -= corr;
 801e3c4:	eba1 0162 	sub.w	r1, r1, r2, asr #1
 801e3c8:	b208      	sxth	r0, r1
            label_sel_y += (label_y_prop * res_p.y) >> 14;
 801e3ca:	4345      	muls	r5, r0
            res_p.y -= corr;
 801e3cc:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
            lv_draw_label(&label_sel_area, &mask_sel, &label_dsc, lv_label_get_text(label), NULL);
 801e3d0:	4630      	mov	r0, r6
            label_sel_y += (label_y_prop * res_p.y) >> 14;
 801e3d2:	eb03 33a5 	add.w	r3, r3, r5, asr #14
            label_sel_y -= corr;
 801e3d6:	eba3 0362 	sub.w	r3, r3, r2, asr #1
            label_sel_area.x1 = label->coords.x1;
 801e3da:	8ab2      	ldrh	r2, [r6, #20]
            label_sel_area.y1 = label_sel_y;
 801e3dc:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
            label_sel_area.y2 = label_sel_area.y1 + res_p.y;
 801e3e0:	fa13 f381 	uxtah	r3, r3, r1
            label_sel_area.x1 = label->coords.x1;
 801e3e4:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
            label_sel_area.x2 = label->coords.x2;
 801e3e8:	8b32      	ldrh	r2, [r6, #24]
            label_sel_area.y2 = label_sel_area.y1 + res_p.y;
 801e3ea:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
            label_dsc.flag |= LV_TEXT_FLAG_EXPAND;
 801e3ee:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
            label_sel_area.x2 = label->coords.x2;
 801e3f2:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
            label_dsc.flag |= LV_TEXT_FLAG_EXPAND;
 801e3f6:	f043 0302 	orr.w	r3, r3, #2
 801e3fa:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
            lv_draw_label(&label_sel_area, &mask_sel, &label_dsc, lv_label_get_text(label), NULL);
 801e3fe:	f7ff f881 	bl	801d504 <lv_label_get_text>
 801e402:	2200      	movs	r2, #0
 801e404:	4603      	mov	r3, r0
 801e406:	a90b      	add	r1, sp, #44	; 0x2c
 801e408:	a80d      	add	r0, sp, #52	; 0x34
 801e40a:	9200      	str	r2, [sp, #0]
 801e40c:	aa0f      	add	r2, sp, #60	; 0x3c
 801e40e:	f7ec fa5f 	bl	800a8d0 <lv_draw_label>
 801e412:	e5ec      	b.n	801dfee <lv_roller_event+0x36>

0801e414 <lv_slider_get_mode>:
 * Get the mode of the slider.
 * @param obj       pointer to a bar object
 * @return          see ::lv_slider_mode_t
 */
static inline lv_slider_mode_t lv_slider_get_mode(lv_obj_t * slider)
{
 801e414:	b508      	push	{r3, lr}
    lv_bar_mode_t mode = lv_bar_get_mode(slider);
 801e416:	f7fc fbc0 	bl	801ab9a <lv_bar_get_mode>
    if(mode == LV_BAR_MODE_SYMMETRICAL) return LV_SLIDER_MODE_SYMMETRICAL;
 801e41a:	2801      	cmp	r0, #1
 801e41c:	d002      	beq.n	801e424 <lv_slider_get_mode+0x10>
    else if(mode == LV_BAR_MODE_RANGE) return LV_SLIDER_MODE_RANGE;
    else return LV_SLIDER_MODE_NORMAL;
 801e41e:	2802      	cmp	r0, #2
 801e420:	bf18      	it	ne
 801e422:	2000      	movne	r0, #0
}
 801e424:	bd08      	pop	{r3, pc}

0801e426 <lv_slider_constructor>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void lv_slider_constructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 801e426:	b538      	push	{r3, r4, r5, lr}
    LV_UNUSED(class_p);
    lv_slider_t * slider = (lv_slider_t *)obj;

    /*Initialize the allocated 'slider'*/
    slider->value_to_set = NULL;
    slider->dragging = 0;
 801e428:	f891 3074 	ldrb.w	r3, [r1, #116]	; 0x74
{
 801e42c:	460c      	mov	r4, r1
    slider->value_to_set = NULL;
 801e42e:	2500      	movs	r5, #0
    slider->dragging = 0;
 801e430:	f023 0303 	bic.w	r3, r3, #3
    slider->left_knob_focus = 0;

    lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLL_CHAIN);
 801e434:	4620      	mov	r0, r4
    slider->value_to_set = NULL;
 801e436:	670d      	str	r5, [r1, #112]	; 0x70
    slider->dragging = 0;
 801e438:	f881 3074 	strb.w	r3, [r1, #116]	; 0x74
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLL_CHAIN);
 801e43c:	f44f 7180 	mov.w	r1, #256	; 0x100
 801e440:	f7e5 fc85 	bl	8003d4e <lv_obj_clear_flag>
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLLABLE);
 801e444:	2110      	movs	r1, #16
 801e446:	4620      	mov	r0, r4
 801e448:	f7e5 fc81 	bl	8003d4e <lv_obj_clear_flag>
    lv_obj_set_ext_click_area(obj, LV_DPX(8));
 801e44c:	4628      	mov	r0, r5
 801e44e:	f7f8 fa51 	bl	80168f4 <lv_disp_get_dpi>
 801e452:	281d      	cmp	r0, #29
 801e454:	dd0c      	ble.n	801e470 <lv_slider_constructor+0x4a>
 801e456:	4628      	mov	r0, r5
 801e458:	f7f8 fa4c 	bl	80168f4 <lv_disp_get_dpi>
 801e45c:	2114      	movs	r1, #20
 801e45e:	300a      	adds	r0, #10
 801e460:	fb90 f1f1 	sdiv	r1, r0, r1
 801e464:	b209      	sxth	r1, r1
 801e466:	4620      	mov	r0, r4
}
 801e468:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_set_ext_click_area(obj, LV_DPX(8));
 801e46c:	f7e7 b856 	b.w	800551c <lv_obj_set_ext_click_area>
 801e470:	2101      	movs	r1, #1
 801e472:	e7f8      	b.n	801e466 <lv_slider_constructor+0x40>

0801e474 <position_knob>:
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &dsc);
    }
}

static void position_knob(lv_obj_t * obj, lv_area_t * knob_area, lv_coord_t knob_size, bool hor)
{
 801e474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e478:	460c      	mov	r4, r1
 801e47a:	f3c2 014f 	ubfx	r1, r2, #1, #16
 801e47e:	3a01      	subs	r2, #1
 801e480:	4605      	mov	r5, r0
 801e482:	b292      	uxth	r2, r2

    if(hor) {
 801e484:	2b00      	cmp	r3, #0
 801e486:	d053      	beq.n	801e530 <position_knob+0xbc>
        knob_area->x1 -= (knob_size >> 1);
 801e488:	8823      	ldrh	r3, [r4, #0]
 801e48a:	1a5b      	subs	r3, r3, r1
 801e48c:	b29b      	uxth	r3, r3
        knob_area->x2 = knob_area->x1 + knob_size - 1;
 801e48e:	441a      	add	r2, r3
        knob_area->x1 -= (knob_size >> 1);
 801e490:	8023      	strh	r3, [r4, #0]
        knob_area->y1 = obj->coords.y1;
 801e492:	f9b0 3016 	ldrsh.w	r3, [r0, #22]
        knob_area->x2 = knob_area->x1 + knob_size - 1;
 801e496:	80a2      	strh	r2, [r4, #4]
        knob_area->y1 = obj->coords.y1;
 801e498:	8063      	strh	r3, [r4, #2]
        knob_area->y2 = obj->coords.y2;
 801e49a:	f9b0 301a 	ldrsh.w	r3, [r0, #26]
 801e49e:	80e3      	strh	r3, [r4, #6]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801e4a0:	f241 0212 	movw	r2, #4114	; 0x1012
 801e4a4:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 801e4a8:	4628      	mov	r0, r5
 801e4aa:	f7e8 ff5d 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801e4ae:	f241 0213 	movw	r2, #4115	; 0x1013
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801e4b2:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801e4b4:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 801e4b8:	4628      	mov	r0, r5
 801e4ba:	f7e8 ff55 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801e4be:	f241 0210 	movw	r2, #4112	; 0x1010
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801e4c2:	4682      	mov	sl, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801e4c4:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 801e4c8:	4628      	mov	r0, r5
 801e4ca:	f7e8 ff4d 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801e4ce:	f241 0211 	movw	r2, #4113	; 0x1011
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801e4d2:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801e4d4:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 801e4d8:	4628      	mov	r0, r5
 801e4da:	f7e8 ff45 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 801e4de:	f640 020a 	movw	r2, #2058	; 0x80a
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801e4e2:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 801e4e4:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 801e4e8:	4628      	mov	r0, r5
 801e4ea:	f7e8 ff3d 	bl	8007368 <lv_obj_get_style_prop>
 801e4ee:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 801e4f0:	f640 020b 	movw	r2, #2059	; 0x80b
 801e4f4:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 801e4f8:	4628      	mov	r0, r5

    lv_coord_t transf_w = lv_obj_get_style_transform_width(obj, LV_PART_KNOB);
    lv_coord_t transf_h = lv_obj_get_style_transform_height(obj, LV_PART_KNOB);

    /*Apply the paddings on the knob area*/
    knob_area->x1 -= knob_left + transf_w;
 801e4fa:	fa18 f886 	uxtah	r8, r8, r6
 801e4fe:	f7e8 ff33 	bl	8007368 <lv_obj_get_style_prop>
    knob_area->x2 += knob_right + transf_w;
 801e502:	fa1a f686 	uxtah	r6, sl, r6
 801e506:	4603      	mov	r3, r0
    knob_area->x1 -= knob_left + transf_w;
 801e508:	8822      	ldrh	r2, [r4, #0]
    knob_area->x2 += knob_right + transf_w;
 801e50a:	88a0      	ldrh	r0, [r4, #4]
    knob_area->x1 -= knob_left + transf_w;
 801e50c:	eba2 0808 	sub.w	r8, r2, r8
    knob_area->y1 -= knob_top + transf_h;
 801e510:	fa17 f783 	uxtah	r7, r7, r3
    knob_area->x2 += knob_right + transf_w;
 801e514:	4406      	add	r6, r0
    knob_area->y1 -= knob_top + transf_h;
 801e516:	8862      	ldrh	r2, [r4, #2]
    knob_area->y2 += knob_bottom + transf_h;
 801e518:	fa19 f083 	uxtah	r0, r9, r3
 801e51c:	88e3      	ldrh	r3, [r4, #6]
    knob_area->y1 -= knob_top + transf_h;
 801e51e:	1bd7      	subs	r7, r2, r7
    knob_area->x1 -= knob_left + transf_w;
 801e520:	f8a4 8000 	strh.w	r8, [r4]
    knob_area->y2 += knob_bottom + transf_h;
 801e524:	4403      	add	r3, r0
    knob_area->x2 += knob_right + transf_w;
 801e526:	80a6      	strh	r6, [r4, #4]
    knob_area->y1 -= knob_top + transf_h;
 801e528:	8067      	strh	r7, [r4, #2]
    knob_area->y2 += knob_bottom + transf_h;
 801e52a:	80e3      	strh	r3, [r4, #6]
}
 801e52c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        knob_area->y1 -= (knob_size >> 1);
 801e530:	8863      	ldrh	r3, [r4, #2]
 801e532:	1a5b      	subs	r3, r3, r1
 801e534:	b29b      	uxth	r3, r3
        knob_area->y2 = knob_area->y1 + knob_size - 1;
 801e536:	441a      	add	r2, r3
        knob_area->y1 -= (knob_size >> 1);
 801e538:	8063      	strh	r3, [r4, #2]
        knob_area->x1 = obj->coords.x1;
 801e53a:	f9b0 3014 	ldrsh.w	r3, [r0, #20]
        knob_area->y2 = knob_area->y1 + knob_size - 1;
 801e53e:	80e2      	strh	r2, [r4, #6]
        knob_area->x1 = obj->coords.x1;
 801e540:	8023      	strh	r3, [r4, #0]
        knob_area->x2 = obj->coords.x2;
 801e542:	f9b0 3018 	ldrsh.w	r3, [r0, #24]
 801e546:	80a3      	strh	r3, [r4, #4]
 801e548:	e7aa      	b.n	801e4a0 <position_knob+0x2c>
	...

0801e54c <lv_slider_event>:
{
 801e54c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    res = lv_obj_event_base(MY_CLASS, e);
 801e550:	48c4      	ldr	r0, [pc, #784]	; (801e864 <lv_slider_event+0x318>)
{
 801e552:	b0b1      	sub	sp, #196	; 0xc4
 801e554:	460f      	mov	r7, r1
    res = lv_obj_event_base(MY_CLASS, e);
 801e556:	f7e3 fc3f 	bl	8001dd8 <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 801e55a:	2801      	cmp	r0, #1
 801e55c:	d121      	bne.n	801e5a2 <lv_slider_event+0x56>
    lv_event_code_t code = lv_event_get_code(e);
 801e55e:	4638      	mov	r0, r7
 801e560:	f7e3 fcd4 	bl	8001f0c <lv_event_get_code>
 801e564:	4605      	mov	r5, r0
    lv_obj_t * obj = lv_event_get_target(e);
 801e566:	4638      	mov	r0, r7
 801e568:	f7e3 fcce 	bl	8001f08 <lv_event_get_target>
 801e56c:	4604      	mov	r4, r0
    lv_slider_mode_t type = lv_slider_get_mode(obj);
 801e56e:	f7ff ff51 	bl	801e414 <lv_slider_get_mode>
    if(code == LV_EVENT_HIT_TEST) {
 801e572:	2d11      	cmp	r5, #17
    lv_slider_mode_t type = lv_slider_get_mode(obj);
 801e574:	4606      	mov	r6, r0
    if(code == LV_EVENT_HIT_TEST) {
 801e576:	d117      	bne.n	801e5a8 <lv_slider_event+0x5c>
        lv_hit_test_info_t * info = lv_event_get_param(e);
 801e578:	4638      	mov	r0, r7
 801e57a:	f7e3 fcc9 	bl	8001f10 <lv_event_get_param>
 801e57e:	4605      	mov	r5, r0
        info->res = _lv_area_is_point_on(&slider->right_knob_area, info->point, 0);
 801e580:	2200      	movs	r2, #0
 801e582:	6801      	ldr	r1, [r0, #0]
 801e584:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801e588:	f7f8 fcd1 	bl	8016f2e <_lv_area_is_point_on>
 801e58c:	4602      	mov	r2, r0
 801e58e:	7128      	strb	r0, [r5, #4]
        if((info->res == false) && (type == LV_SLIDER_MODE_RANGE)) {
 801e590:	b938      	cbnz	r0, 801e5a2 <lv_slider_event+0x56>
 801e592:	2e02      	cmp	r6, #2
 801e594:	d105      	bne.n	801e5a2 <lv_slider_event+0x56>
            info->res = _lv_area_is_point_on(&slider->left_knob_area, info->point, 0);
 801e596:	6829      	ldr	r1, [r5, #0]
 801e598:	f104 0060 	add.w	r0, r4, #96	; 0x60
 801e59c:	f7f8 fcc7 	bl	8016f2e <_lv_area_is_point_on>
 801e5a0:	7128      	strb	r0, [r5, #4]
}
 801e5a2:	b031      	add	sp, #196	; 0xc4
 801e5a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if(code == LV_EVENT_PRESSED) {
 801e5a8:	2d01      	cmp	r5, #1
 801e5aa:	f040 808a 	bne.w	801e6c2 <lv_slider_event+0x176>
        lv_obj_invalidate(obj);
 801e5ae:	4620      	mov	r0, r4
 801e5b0:	f7e6 fdb2 	bl	8005118 <lv_obj_invalidate>
        slider->dragging = true;
 801e5b4:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
        if(type == LV_SLIDER_MODE_NORMAL || type == LV_SLIDER_MODE_SYMMETRICAL) {
 801e5b8:	2e01      	cmp	r6, #1
        slider->dragging = true;
 801e5ba:	f043 0301 	orr.w	r3, r3, #1
 801e5be:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
        if(type == LV_SLIDER_MODE_NORMAL || type == LV_SLIDER_MODE_SYMMETRICAL) {
 801e5c2:	d802      	bhi.n	801e5ca <lv_slider_event+0x7e>
                    slider->value_to_set = &slider->bar.cur_value;
 801e5c4:	f104 0324 	add.w	r3, r4, #36	; 0x24
 801e5c8:	e053      	b.n	801e672 <lv_slider_event+0x126>
        else if(type == LV_SLIDER_MODE_RANGE) {
 801e5ca:	2e02      	cmp	r6, #2
 801e5cc:	d1e9      	bne.n	801e5a2 <lv_slider_event+0x56>
            lv_indev_get_point(lv_indev_get_act(), &p);
 801e5ce:	f7e3 ff11 	bl	80023f4 <lv_indev_get_act>
 801e5d2:	a91e      	add	r1, sp, #120	; 0x78
 801e5d4:	f7e3 ff6f 	bl	80024b6 <lv_indev_get_point>
            bool hor = lv_obj_get_width(obj) >= lv_obj_get_height(obj);
 801e5d8:	4620      	mov	r0, r4
 801e5da:	f7e6 fc48 	bl	8004e6e <lv_obj_get_width>
 801e5de:	4606      	mov	r6, r0
 801e5e0:	4620      	mov	r0, r4
 801e5e2:	f7e6 fc4a 	bl	8004e7a <lv_obj_get_height>
 801e5e6:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 801e5e8:	f241 426a 	movw	r2, #5226	; 0x146a
 801e5ec:	2100      	movs	r1, #0
 801e5ee:	4620      	mov	r0, r4
 801e5f0:	f7e8 feba 	bl	8007368 <lv_obj_get_style_prop>
            if(hor) {
 801e5f4:	42ae      	cmp	r6, r5
 801e5f6:	db46      	blt.n	801e686 <lv_slider_event+0x13a>
                if((base_dir != LV_BASE_DIR_RTL && p.x > slider->right_knob_area.x2) || (base_dir == LV_BASE_DIR_RTL &&
 801e5f8:	b2c0      	uxtb	r0, r0
 801e5fa:	f9bd 1078 	ldrsh.w	r1, [sp, #120]	; 0x78
 801e5fe:	2801      	cmp	r0, #1
 801e600:	d02d      	beq.n	801e65e <lv_slider_event+0x112>
 801e602:	f9b4 306c 	ldrsh.w	r3, [r4, #108]	; 0x6c
 801e606:	428b      	cmp	r3, r1
 801e608:	dbdc      	blt.n	801e5c4 <lv_slider_event+0x78>
                else if((base_dir != LV_BASE_DIR_RTL && p.x < slider->left_knob_area.x1) || (base_dir == LV_BASE_DIR_RTL &&
 801e60a:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 801e60e:	428b      	cmp	r3, r1
 801e610:	dc2d      	bgt.n	801e66e <lv_slider_event+0x122>
                    dist_left = LV_ABS((slider->left_knob_area.x1 + (slider->left_knob_area.x2 - slider->left_knob_area.x1) / 2) - p.x);
 801e612:	f9b4 2060 	ldrsh.w	r2, [r4, #96]	; 0x60
 801e616:	f9b4 0064 	ldrsh.w	r0, [r4, #100]	; 0x64
                    dist_right = LV_ABS((slider->right_knob_area.x1 + (slider->right_knob_area.x2 - slider->right_knob_area.x1) / 2) - p.x);
 801e61a:	f9b4 3068 	ldrsh.w	r3, [r4, #104]	; 0x68
                    dist_left = LV_ABS((slider->left_knob_area.x1 + (slider->left_knob_area.x2 - slider->left_knob_area.x1) / 2) - p.x);
 801e61e:	1a80      	subs	r0, r0, r2
 801e620:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 801e624:	eb02 0260 	add.w	r2, r2, r0, asr #1
                    dist_right = LV_ABS((slider->right_knob_area.x1 + (slider->right_knob_area.x2 - slider->right_knob_area.x1) / 2) - p.x);
 801e628:	f9b4 006c 	ldrsh.w	r0, [r4, #108]	; 0x6c
 801e62c:	1ac0      	subs	r0, r0, r3
                    dist_left = LV_ABS((slider->left_knob_area.x1 + (slider->left_knob_area.x2 - slider->left_knob_area.x1) / 2) - p.x);
 801e62e:	1a52      	subs	r2, r2, r1
                    dist_right = LV_ABS((slider->right_knob_area.x1 + (slider->right_knob_area.x2 - slider->right_knob_area.x1) / 2) - p.x);
 801e630:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
                    dist_left = LV_ABS((slider->left_knob_area.x1 + (slider->left_knob_area.x2 - slider->left_knob_area.x1) / 2) - p.x);
 801e634:	2a00      	cmp	r2, #0
                    dist_right = LV_ABS((slider->right_knob_area.x1 + (slider->right_knob_area.x2 - slider->right_knob_area.x1) / 2) - p.x);
 801e636:	eb03 0360 	add.w	r3, r3, r0, asr #1
                    dist_left = LV_ABS((slider->left_knob_area.x1 + (slider->left_knob_area.x2 - slider->left_knob_area.x1) / 2) - p.x);
 801e63a:	bfb8      	it	lt
 801e63c:	4252      	neglt	r2, r2
                    dist_right = LV_ABS((slider->right_knob_area.x1 + (slider->right_knob_area.x2 - slider->right_knob_area.x1) / 2) - p.x);
 801e63e:	1a5b      	subs	r3, r3, r1
                    dist_right = LV_ABS((slider->right_knob_area.y1 + (slider->right_knob_area.y2 - slider->right_knob_area.y1) / 2) - p.y);
 801e640:	2b00      	cmp	r3, #0
                    if(dist_right < dist_left) {
 801e642:	b212      	sxth	r2, r2
                    dist_right = LV_ABS((slider->right_knob_area.y1 + (slider->right_knob_area.y2 - slider->right_knob_area.y1) / 2) - p.y);
 801e644:	bfb8      	it	lt
 801e646:	425b      	neglt	r3, r3
                    if(dist_right < dist_left) {
 801e648:	b21b      	sxth	r3, r3
 801e64a:	429a      	cmp	r2, r3
 801e64c:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 801e650:	dd11      	ble.n	801e676 <lv_slider_event+0x12a>
                        slider->value_to_set = &slider->bar.cur_value;
 801e652:	f104 0224 	add.w	r2, r4, #36	; 0x24
 801e656:	6722      	str	r2, [r4, #112]	; 0x70
            slider->left_knob_focus = 0;
 801e658:	f36f 0341 	bfc	r3, #1, #1
 801e65c:	e010      	b.n	801e680 <lv_slider_event+0x134>
                if((base_dir != LV_BASE_DIR_RTL && p.x > slider->right_knob_area.x2) || (base_dir == LV_BASE_DIR_RTL &&
 801e65e:	f9b4 3068 	ldrsh.w	r3, [r4, #104]	; 0x68
 801e662:	428b      	cmp	r3, r1
 801e664:	dcae      	bgt.n	801e5c4 <lv_slider_event+0x78>
                else if((base_dir != LV_BASE_DIR_RTL && p.x < slider->left_knob_area.x1) || (base_dir == LV_BASE_DIR_RTL &&
 801e666:	f9b4 3064 	ldrsh.w	r3, [r4, #100]	; 0x64
 801e66a:	428b      	cmp	r3, r1
 801e66c:	dad1      	bge.n	801e612 <lv_slider_event+0xc6>
                    slider->value_to_set = &slider->bar.start_value;
 801e66e:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801e672:	6723      	str	r3, [r4, #112]	; 0x70
 801e674:	e795      	b.n	801e5a2 <lv_slider_event+0x56>
                        slider->value_to_set = &slider->bar.start_value;
 801e676:	f104 0230 	add.w	r2, r4, #48	; 0x30
 801e67a:	6722      	str	r2, [r4, #112]	; 0x70
                        slider->left_knob_focus = 1;
 801e67c:	f043 0302 	orr.w	r3, r3, #2
 801e680:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
 801e684:	e78d      	b.n	801e5a2 <lv_slider_event+0x56>
                if(p.y < slider->right_knob_area.y1) {
 801e686:	f9bd 007a 	ldrsh.w	r0, [sp, #122]	; 0x7a
 801e68a:	f9b4 306a 	ldrsh.w	r3, [r4, #106]	; 0x6a
 801e68e:	4298      	cmp	r0, r3
 801e690:	db98      	blt.n	801e5c4 <lv_slider_event+0x78>
                else if(p.y > slider->left_knob_area.y2) {
 801e692:	f9b4 1066 	ldrsh.w	r1, [r4, #102]	; 0x66
 801e696:	4288      	cmp	r0, r1
 801e698:	dce9      	bgt.n	801e66e <lv_slider_event+0x122>
                    dist_left = LV_ABS((slider->left_knob_area.y1 + (slider->left_knob_area.y2 - slider->left_knob_area.y1) / 2) - p.y);
 801e69a:	f9b4 2062 	ldrsh.w	r2, [r4, #98]	; 0x62
 801e69e:	1a89      	subs	r1, r1, r2
 801e6a0:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 801e6a4:	eb02 0261 	add.w	r2, r2, r1, asr #1
                    dist_right = LV_ABS((slider->right_knob_area.y1 + (slider->right_knob_area.y2 - slider->right_knob_area.y1) / 2) - p.y);
 801e6a8:	f9b4 106e 	ldrsh.w	r1, [r4, #110]	; 0x6e
 801e6ac:	1ac9      	subs	r1, r1, r3
                    dist_left = LV_ABS((slider->left_knob_area.y1 + (slider->left_knob_area.y2 - slider->left_knob_area.y1) / 2) - p.y);
 801e6ae:	1a12      	subs	r2, r2, r0
                    dist_right = LV_ABS((slider->right_knob_area.y1 + (slider->right_knob_area.y2 - slider->right_knob_area.y1) / 2) - p.y);
 801e6b0:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
                    dist_left = LV_ABS((slider->left_knob_area.y1 + (slider->left_knob_area.y2 - slider->left_knob_area.y1) / 2) - p.y);
 801e6b4:	2a00      	cmp	r2, #0
                    dist_right = LV_ABS((slider->right_knob_area.y1 + (slider->right_knob_area.y2 - slider->right_knob_area.y1) / 2) - p.y);
 801e6b6:	eb03 0361 	add.w	r3, r3, r1, asr #1
                    dist_left = LV_ABS((slider->left_knob_area.y1 + (slider->left_knob_area.y2 - slider->left_knob_area.y1) / 2) - p.y);
 801e6ba:	bfb8      	it	lt
 801e6bc:	4252      	neglt	r2, r2
                    dist_right = LV_ABS((slider->right_knob_area.y1 + (slider->right_knob_area.y2 - slider->right_knob_area.y1) / 2) - p.y);
 801e6be:	1a1b      	subs	r3, r3, r0
 801e6c0:	e7be      	b.n	801e640 <lv_slider_event+0xf4>
    else if(code == LV_EVENT_PRESSING && slider->value_to_set != NULL) {
 801e6c2:	2d02      	cmp	r5, #2
 801e6c4:	f040 8087 	bne.w	801e7d6 <lv_slider_event+0x28a>
 801e6c8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801e6ca:	2b00      	cmp	r3, #0
 801e6cc:	f43f af69 	beq.w	801e5a2 <lv_slider_event+0x56>
        lv_indev_t * indev = lv_indev_get_act();
 801e6d0:	f7e3 fe90 	bl	80023f4 <lv_indev_get_act>
 801e6d4:	4605      	mov	r5, r0
        if(lv_indev_get_type(indev) != LV_INDEV_TYPE_POINTER) return;
 801e6d6:	f7e3 fe93 	bl	8002400 <lv_indev_get_type>
 801e6da:	2801      	cmp	r0, #1
 801e6dc:	f47f af61 	bne.w	801e5a2 <lv_slider_event+0x56>
        lv_indev_get_point(indev, &p);
 801e6e0:	4628      	mov	r0, r5
 801e6e2:	a91e      	add	r1, sp, #120	; 0x78
 801e6e4:	f7e3 fee7 	bl	80024b6 <lv_indev_get_point>
 801e6e8:	f241 426a 	movw	r2, #5226	; 0x146a
 801e6ec:	2100      	movs	r1, #0
 801e6ee:	4620      	mov	r0, r4
 801e6f0:	f7e8 fe3a 	bl	8007368 <lv_obj_get_style_prop>
 801e6f4:	4682      	mov	sl, r0
        lv_coord_t w = lv_obj_get_width(obj);
 801e6f6:	4620      	mov	r0, r4
 801e6f8:	f7e6 fbb9 	bl	8004e6e <lv_obj_get_width>
 801e6fc:	4606      	mov	r6, r0
        lv_coord_t h = lv_obj_get_height(obj);
 801e6fe:	4620      	mov	r0, r4
 801e700:	f7e6 fbbb 	bl	8004e7a <lv_obj_get_height>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801e704:	f241 0212 	movw	r2, #4114	; 0x1012
 801e708:	4605      	mov	r5, r0
 801e70a:	2100      	movs	r1, #0
 801e70c:	4620      	mov	r0, r4
 801e70e:	f7e8 fe2b 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801e712:	f241 0213 	movw	r2, #4115	; 0x1013
 801e716:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801e718:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801e71a:	4620      	mov	r0, r4
 801e71c:	f7e8 fe24 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801e720:	f241 0210 	movw	r2, #4112	; 0x1010
 801e724:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801e726:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801e728:	4620      	mov	r0, r4
 801e72a:	f7e8 fe1d 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801e72e:	f241 0211 	movw	r2, #4113	; 0x1011
 801e732:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801e734:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801e736:	4620      	mov	r0, r4
 801e738:	f7e8 fe16 	bl	8007368 <lv_obj_get_style_prop>
        if(w >= h) {
 801e73c:	42ae      	cmp	r6, r5
        int32_t range = slider->bar.max_value - slider->bar.min_value;
 801e73e:	e9d4 1c0a 	ldrd	r1, ip, [r4, #40]	; 0x28
 801e742:	ebac 0201 	sub.w	r2, ip, r1
        if(w >= h) {
 801e746:	db38      	blt.n	801e7ba <lv_slider_event+0x26e>
            lv_coord_t indic_w = w - bg_left - bg_right;
 801e748:	eb07 0308 	add.w	r3, r7, r8
            if(base_dir == LV_BASE_DIR_RTL) {
 801e74c:	fa5f fa8a 	uxtb.w	sl, sl
            lv_coord_t indic_w = w - bg_left - bg_right;
 801e750:	1af6      	subs	r6, r6, r3
            if(base_dir == LV_BASE_DIR_RTL) {
 801e752:	f1ba 0f01 	cmp.w	sl, #1
 801e756:	f9bd 3078 	ldrsh.w	r3, [sp, #120]	; 0x78
            lv_coord_t indic_w = w - bg_left - bg_right;
 801e75a:	b236      	sxth	r6, r6
            if(base_dir == LV_BASE_DIR_RTL) {
 801e75c:	d127      	bne.n	801e7ae <lv_slider_event+0x262>
                new_value = (obj->coords.x2 - bg_right) - p.x; /*Make the point relative to the indicator*/
 801e75e:	f9b4 0018 	ldrsh.w	r0, [r4, #24]
 801e762:	fa0f f888 	sxth.w	r8, r8
 801e766:	eba0 0808 	sub.w	r8, r0, r8
 801e76a:	eba8 0303 	sub.w	r3, r8, r3
            new_value = (new_value * range) / indic_w;
 801e76e:	4353      	muls	r3, r2
 801e770:	fb93 f3f6 	sdiv	r3, r3, r6
        if(slider->value_to_set == &slider->bar.start_value) {
 801e774:	6f22      	ldr	r2, [r4, #112]	; 0x70
 801e776:	f104 0030 	add.w	r0, r4, #48	; 0x30
            new_value += slider->bar.min_value;
 801e77a:	440b      	add	r3, r1
        if(slider->value_to_set == &slider->bar.start_value) {
 801e77c:	4282      	cmp	r2, r0
            real_min_value = slider->bar.start_value;
 801e77e:	bf14      	ite	ne
 801e780:	6b21      	ldrne	r1, [r4, #48]	; 0x30
            real_max_value = slider->bar.cur_value;
 801e782:	f8d4 c024 	ldreq.w	ip, [r4, #36]	; 0x24
        if(new_value < real_min_value) new_value = real_min_value;
 801e786:	428b      	cmp	r3, r1
 801e788:	db03      	blt.n	801e792 <lv_slider_event+0x246>
        else if(new_value > real_max_value) new_value = real_max_value;
 801e78a:	4563      	cmp	r3, ip
 801e78c:	bfa8      	it	ge
 801e78e:	4663      	movge	r3, ip
 801e790:	4619      	mov	r1, r3
        if(*slider->value_to_set != new_value) {
 801e792:	6813      	ldr	r3, [r2, #0]
 801e794:	428b      	cmp	r3, r1
 801e796:	f43f af04 	beq.w	801e5a2 <lv_slider_event+0x56>
            lv_obj_invalidate(obj);
 801e79a:	4620      	mov	r0, r4
            *slider->value_to_set = new_value;
 801e79c:	6011      	str	r1, [r2, #0]
            lv_obj_invalidate(obj);
 801e79e:	f7e6 fcbb 	bl	8005118 <lv_obj_invalidate>
            res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 801e7a2:	2200      	movs	r2, #0
 801e7a4:	211c      	movs	r1, #28
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &dsc);
 801e7a6:	4620      	mov	r0, r4
 801e7a8:	f7e3 fb8e 	bl	8001ec8 <lv_event_send>
}
 801e7ac:	e6f9      	b.n	801e5a2 <lv_slider_event+0x56>
                new_value = p.x - (obj->coords.x1 + bg_left); /*Make the point relative to the indicator*/
 801e7ae:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 801e7b2:	fa00 f787 	sxtah	r7, r0, r7
 801e7b6:	1bdb      	subs	r3, r3, r7
 801e7b8:	e7d9      	b.n	801e76e <lv_slider_event+0x222>
            new_value = p.y - (obj->coords.y2 + bg_bottom); /*Make the point relative to the indicator*/
 801e7ba:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 801e7be:	f9bd 607a 	ldrsh.w	r6, [sp, #122]	; 0x7a
 801e7c2:	fa03 f380 	sxtah	r3, r3, r0
            lv_coord_t indic_h = h - bg_bottom - bg_top;
 801e7c6:	4448      	add	r0, r9
            new_value = (-new_value * range) / indic_h;
 801e7c8:	1b9b      	subs	r3, r3, r6
            lv_coord_t indic_h = h - bg_bottom - bg_top;
 801e7ca:	1a2d      	subs	r5, r5, r0
            new_value = (-new_value * range) / indic_h;
 801e7cc:	4353      	muls	r3, r2
 801e7ce:	b22a      	sxth	r2, r5
 801e7d0:	fb93 f3f2 	sdiv	r3, r3, r2
 801e7d4:	e7ce      	b.n	801e774 <lv_slider_event+0x228>
    else if(code == LV_EVENT_RELEASED || code == LV_EVENT_PRESS_LOST) {
 801e7d6:	2d08      	cmp	r5, #8
 801e7d8:	d001      	beq.n	801e7de <lv_slider_event+0x292>
 801e7da:	2d03      	cmp	r5, #3
 801e7dc:	d12e      	bne.n	801e83c <lv_slider_event+0x2f0>
        slider->dragging = false;
 801e7de:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
        slider->value_to_set = NULL;
 801e7e2:	2600      	movs	r6, #0
        lv_obj_invalidate(obj);
 801e7e4:	4620      	mov	r0, r4
        slider->dragging = false;
 801e7e6:	f36f 0300 	bfc	r3, #0, #1
        slider->value_to_set = NULL;
 801e7ea:	6726      	str	r6, [r4, #112]	; 0x70
        slider->dragging = false;
 801e7ec:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
        lv_obj_invalidate(obj);
 801e7f0:	f7e6 fc92 	bl	8005118 <lv_obj_invalidate>
        lv_group_t * g   = lv_obj_get_group(obj);
 801e7f4:	4620      	mov	r0, r4
 801e7f6:	f7e5 faf3 	bl	8003de0 <lv_obj_get_group>
 801e7fa:	4605      	mov	r5, r0
        bool editing     = lv_group_get_editing(g);
 801e7fc:	f7e3 fd86 	bl	800230c <lv_group_get_editing>
 801e800:	4607      	mov	r7, r0
        lv_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
 801e802:	f7e3 fdf7 	bl	80023f4 <lv_indev_get_act>
 801e806:	f7e3 fdfb 	bl	8002400 <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_ENCODER) {
 801e80a:	2804      	cmp	r0, #4
 801e80c:	f47f aec9 	bne.w	801e5a2 <lv_slider_event+0x56>
            if(editing) {
 801e810:	2f00      	cmp	r7, #0
 801e812:	f43f aec6 	beq.w	801e5a2 <lv_slider_event+0x56>
                if(lv_slider_get_mode(obj) == LV_SLIDER_MODE_RANGE) {
 801e816:	4620      	mov	r0, r4
 801e818:	f7ff fdfc 	bl	801e414 <lv_slider_get_mode>
 801e81c:	2802      	cmp	r0, #2
 801e81e:	d108      	bne.n	801e832 <lv_slider_event+0x2e6>
                    if(slider->left_knob_focus == 0) slider->left_knob_focus = 1;
 801e820:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 801e824:	079f      	lsls	r7, r3, #30
 801e826:	f57f af29 	bpl.w	801e67c <lv_slider_event+0x130>
                        slider->left_knob_focus = 0;
 801e82a:	f366 0341 	bfi	r3, r6, #1, #1
 801e82e:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
                    lv_group_set_editing(g, false);
 801e832:	4631      	mov	r1, r6
 801e834:	4628      	mov	r0, r5
 801e836:	f7e3 fd05 	bl	8002244 <lv_group_set_editing>
 801e83a:	e6b2      	b.n	801e5a2 <lv_slider_event+0x56>
    else if(code == LV_EVENT_FOCUSED) {
 801e83c:	2d0e      	cmp	r5, #14
 801e83e:	d10b      	bne.n	801e858 <lv_slider_event+0x30c>
        lv_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
 801e840:	f7e3 fdd8 	bl	80023f4 <lv_indev_get_act>
 801e844:	f7e3 fddc 	bl	8002400 <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_ENCODER || indev_type == LV_INDEV_TYPE_KEYPAD) {
 801e848:	2804      	cmp	r0, #4
 801e84a:	d002      	beq.n	801e852 <lv_slider_event+0x306>
 801e84c:	2802      	cmp	r0, #2
 801e84e:	f47f aea8 	bne.w	801e5a2 <lv_slider_event+0x56>
            slider->left_knob_focus = 0;
 801e852:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 801e856:	e6ff      	b.n	801e658 <lv_slider_event+0x10c>
    else if(code == LV_EVENT_SIZE_CHANGED) {
 801e858:	2d23      	cmp	r5, #35	; 0x23
 801e85a:	d105      	bne.n	801e868 <lv_slider_event+0x31c>
        lv_obj_refresh_ext_draw_size(obj);
 801e85c:	4620      	mov	r0, r4
 801e85e:	f7e6 f970 	bl	8004b42 <lv_obj_refresh_ext_draw_size>
 801e862:	e69e      	b.n	801e5a2 <lv_slider_event+0x56>
 801e864:	0802959c 	.word	0x0802959c
    else if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 801e868:	2d13      	cmp	r5, #19
 801e86a:	d17c      	bne.n	801e966 <lv_slider_event+0x41a>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801e86c:	f241 0212 	movw	r2, #4114	; 0x1012
 801e870:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 801e874:	4620      	mov	r0, r4
 801e876:	f7e8 fd77 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801e87a:	f241 0213 	movw	r2, #4115	; 0x1013
 801e87e:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    return (lv_coord_t)v.num;
 801e882:	fa0f fb80 	sxth.w	fp, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801e886:	4620      	mov	r0, r4
 801e888:	f7e8 fd6e 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801e88c:	f241 0210 	movw	r2, #4112	; 0x1010
 801e890:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    return (lv_coord_t)v.num;
 801e894:	b205      	sxth	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801e896:	4620      	mov	r0, r4
 801e898:	f7e8 fd66 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801e89c:	f241 0211 	movw	r2, #4113	; 0x1011
 801e8a0:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    return (lv_coord_t)v.num;
 801e8a4:	fa0f fa80 	sxth.w	sl, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801e8a8:	4620      	mov	r0, r4
 801e8aa:	f7e8 fd5d 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ZOOM);
 801e8ae:	f640 020e 	movw	r2, #2062	; 0x80e
 801e8b2:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    return (lv_coord_t)v.num;
 801e8b6:	fa0f f980 	sxth.w	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ZOOM);
 801e8ba:	4620      	mov	r0, r4
 801e8bc:	f7e8 fd54 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 801e8c0:	f640 020a 	movw	r2, #2058	; 0x80a
 801e8c4:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    return (lv_coord_t)v.num;
 801e8c8:	fa0f f880 	sxth.w	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 801e8cc:	4620      	mov	r0, r4
 801e8ce:	f7e8 fd4b 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 801e8d2:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    return (lv_coord_t)v.num;
 801e8d6:	b203      	sxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 801e8d8:	f640 020b 	movw	r2, #2059	; 0x80b
 801e8dc:	4620      	mov	r0, r4
    return (lv_coord_t)v.num;
 801e8de:	9300      	str	r3, [sp, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 801e8e0:	f7e8 fd42 	bl	8007368 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801e8e4:	b202      	sxth	r2, r0
        lv_coord_t knob_size = LV_MIN(lv_obj_get_width(obj) + 2 * trans_w, lv_obj_get_height(obj) + 2 * trans_h) >> 1;
 801e8e6:	4620      	mov	r0, r4
 801e8e8:	9201      	str	r2, [sp, #4]
 801e8ea:	f7e6 fac0 	bl	8004e6e <lv_obj_get_width>
 801e8ee:	9b00      	ldr	r3, [sp, #0]
 801e8f0:	005e      	lsls	r6, r3, #1
 801e8f2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801e8f6:	4620      	mov	r0, r4
 801e8f8:	9300      	str	r3, [sp, #0]
 801e8fa:	f7e6 fabe 	bl	8004e7a <lv_obj_get_height>
 801e8fe:	9a01      	ldr	r2, [sp, #4]
 801e900:	9b00      	ldr	r3, [sp, #0]
 801e902:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801e906:	0051      	lsls	r1, r2, #1
 801e908:	4283      	cmp	r3, r0
 801e90a:	da25      	bge.n	801e958 <lv_slider_event+0x40c>
 801e90c:	4620      	mov	r0, r4
 801e90e:	f7e6 faae 	bl	8004e6e <lv_obj_get_width>
 801e912:	4430      	add	r0, r6
        knob_size += lv_obj_calculate_ext_draw_size(obj, LV_PART_KNOB);
 801e914:	f44f 3140 	mov.w	r1, #196608	; 0x30000
        lv_coord_t knob_size = LV_MIN(lv_obj_get_width(obj) + 2 * trans_w, lv_obj_get_height(obj) + 2 * trans_h) >> 1;
 801e918:	f340 064f 	sbfx	r6, r0, #1, #16
        knob_size += lv_obj_calculate_ext_draw_size(obj, LV_PART_KNOB);
 801e91c:	4620      	mov	r0, r4
 801e91e:	f7e6 f892 	bl	8004a46 <lv_obj_calculate_ext_draw_size>
 801e922:	4604      	mov	r4, r0
        lv_coord_t * s = lv_event_get_param(e);
 801e924:	4638      	mov	r0, r7
        knob_size = (knob_size * zoom) >> 8;
 801e926:	fb06 f608 	mul.w	r6, r6, r8
        lv_coord_t * s = lv_event_get_param(e);
 801e92a:	f7e3 faf1 	bl	8001f10 <lv_event_get_param>
        knob_size += LV_MAX(LV_MAX(knob_left, knob_right), LV_MAX(knob_bottom, knob_top));
 801e92e:	455d      	cmp	r5, fp
        *s  = LV_MAX(*s, knob_size);
 801e930:	f9b0 1000 	ldrsh.w	r1, [r0]
        knob_size += LV_MAX(LV_MAX(knob_left, knob_right), LV_MAX(knob_bottom, knob_top));
 801e934:	bfb8      	it	lt
 801e936:	465d      	movlt	r5, fp
 801e938:	4555      	cmp	r5, sl
 801e93a:	bfb8      	it	lt
 801e93c:	4655      	movlt	r5, sl
 801e93e:	454d      	cmp	r5, r9
 801e940:	bfb8      	it	lt
 801e942:	464d      	movlt	r5, r9
        knob_size += lv_obj_calculate_ext_draw_size(obj, LV_PART_KNOB);
 801e944:	3502      	adds	r5, #2
 801e946:	192b      	adds	r3, r5, r4
 801e948:	eb03 2326 	add.w	r3, r3, r6, asr #8
        *s  = LV_MAX(*s, knob_size);
 801e94c:	b21b      	sxth	r3, r3
 801e94e:	428b      	cmp	r3, r1
 801e950:	bfb8      	it	lt
 801e952:	460b      	movlt	r3, r1
 801e954:	8003      	strh	r3, [r0, #0]
 801e956:	e624      	b.n	801e5a2 <lv_slider_event+0x56>
        lv_coord_t knob_size = LV_MIN(lv_obj_get_width(obj) + 2 * trans_w, lv_obj_get_height(obj) + 2 * trans_h) >> 1;
 801e958:	4620      	mov	r0, r4
 801e95a:	9100      	str	r1, [sp, #0]
 801e95c:	f7e6 fa8d 	bl	8004e7a <lv_obj_get_height>
 801e960:	9900      	ldr	r1, [sp, #0]
 801e962:	4408      	add	r0, r1
 801e964:	e7d6      	b.n	801e914 <lv_slider_event+0x3c8>
    else if(code == LV_EVENT_KEY) {
 801e966:	2d0d      	cmp	r5, #13
 801e968:	d130      	bne.n	801e9cc <lv_slider_event+0x480>
        char c = *((char *)lv_event_get_param(e));
 801e96a:	4638      	mov	r0, r7
 801e96c:	f7e3 fad0 	bl	8001f10 <lv_event_get_param>
 801e970:	7803      	ldrb	r3, [r0, #0]
        if(c == LV_KEY_RIGHT || c == LV_KEY_UP) {
 801e972:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 801e976:	2a11      	cmp	r2, #17
 801e978:	d114      	bne.n	801e9a4 <lv_slider_event+0x458>
            if(!slider->left_knob_focus) lv_slider_set_value(obj, lv_slider_get_value(obj) + 1, LV_ANIM_ON);
 801e97a:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    return lv_bar_get_value(obj);
 801e97e:	4620      	mov	r0, r4
 801e980:	079d      	lsls	r5, r3, #30
 801e982:	d407      	bmi.n	801e994 <lv_slider_event+0x448>
 801e984:	f7fc f8f5 	bl	801ab72 <lv_bar_get_value>
    lv_bar_set_value(obj, value, anim);
 801e988:	2201      	movs	r2, #1
 801e98a:	1881      	adds	r1, r0, r2
 801e98c:	4620      	mov	r0, r4
 801e98e:	f7fc f87b 	bl	801aa88 <lv_bar_set_value>
}
 801e992:	e706      	b.n	801e7a2 <lv_slider_event+0x256>
    return lv_bar_get_start_value(obj);
 801e994:	f7fc f8f3 	bl	801ab7e <lv_bar_get_start_value>
    lv_bar_set_start_value(obj, value, anim);
 801e998:	2201      	movs	r2, #1
 801e99a:	1881      	adds	r1, r0, r2
 801e99c:	4620      	mov	r0, r4
 801e99e:	f7fc f8c1 	bl	801ab24 <lv_bar_set_start_value>
}
 801e9a2:	e6fe      	b.n	801e7a2 <lv_slider_event+0x256>
        else if(c == LV_KEY_LEFT || c == LV_KEY_DOWN) {
 801e9a4:	2b14      	cmp	r3, #20
 801e9a6:	d002      	beq.n	801e9ae <lv_slider_event+0x462>
 801e9a8:	2b12      	cmp	r3, #18
 801e9aa:	f47f adfa 	bne.w	801e5a2 <lv_slider_event+0x56>
            if(!slider->left_knob_focus) lv_slider_set_value(obj, lv_slider_get_value(obj) - 1, LV_ANIM_ON);
 801e9ae:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    return lv_bar_get_value(obj);
 801e9b2:	4620      	mov	r0, r4
 801e9b4:	0799      	lsls	r1, r3, #30
 801e9b6:	d404      	bmi.n	801e9c2 <lv_slider_event+0x476>
 801e9b8:	f7fc f8db 	bl	801ab72 <lv_bar_get_value>
    lv_bar_set_value(obj, value, anim);
 801e9bc:	2201      	movs	r2, #1
 801e9be:	1e41      	subs	r1, r0, #1
 801e9c0:	e7e4      	b.n	801e98c <lv_slider_event+0x440>
    return lv_bar_get_start_value(obj);
 801e9c2:	f7fc f8dc 	bl	801ab7e <lv_bar_get_start_value>
    lv_bar_set_start_value(obj, value, anim);
 801e9c6:	2201      	movs	r2, #1
 801e9c8:	1e41      	subs	r1, r0, #1
 801e9ca:	e7e7      	b.n	801e99c <lv_slider_event+0x450>
    } else if(code == LV_EVENT_DRAW_MAIN) {
 801e9cc:	2d15      	cmp	r5, #21
 801e9ce:	f47f ade8 	bne.w	801e5a2 <lv_slider_event+0x56>
    lv_obj_t * obj = lv_event_get_target(e);
 801e9d2:	4638      	mov	r0, r7
 801e9d4:	f7e3 fa98 	bl	8001f08 <lv_event_get_target>
 801e9d8:	4604      	mov	r4, r0
    const lv_area_t * clip_area = lv_event_get_param(e);
 801e9da:	4638      	mov	r0, r7
 801e9dc:	f7e3 fa98 	bl	8001f10 <lv_event_get_param>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 801e9e0:	f241 426a 	movw	r2, #5226	; 0x146a
 801e9e4:	2100      	movs	r1, #0
 801e9e6:	4607      	mov	r7, r0
 801e9e8:	4620      	mov	r0, r4
 801e9ea:	f7e8 fcbd 	bl	8007368 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 801e9ee:	fa5f f880 	uxtb.w	r8, r0
    lv_coord_t objw = lv_obj_get_width(obj);
 801e9f2:	4620      	mov	r0, r4
 801e9f4:	f7e6 fa3b 	bl	8004e6e <lv_obj_get_width>
 801e9f8:	4605      	mov	r5, r0
    lv_coord_t objh = lv_obj_get_height(obj);
 801e9fa:	4620      	mov	r0, r4
 801e9fc:	f7e6 fa3d 	bl	8004e7a <lv_obj_get_height>
    if(slider->bar.mode == LV_BAR_MODE_SYMMETRICAL && slider->bar.min_value < 0 && slider->bar.max_value > 0) sym = true;
 801ea00:	f894 205c 	ldrb.w	r2, [r4, #92]	; 0x5c
    bool hor = objw >= objh ? true : false;
 801ea04:	4285      	cmp	r5, r0
 801ea06:	46a9      	mov	r9, r5
    if(slider->bar.mode == LV_BAR_MODE_SYMMETRICAL && slider->bar.min_value < 0 && slider->bar.max_value > 0) sym = true;
 801ea08:	f002 0203 	and.w	r2, r2, #3
    lv_coord_t objh = lv_obj_get_height(obj);
 801ea0c:	4606      	mov	r6, r0
    bool hor = objw >= objh ? true : false;
 801ea0e:	bfb4      	ite	lt
 801ea10:	f04f 0b00 	movlt.w	fp, #0
 801ea14:	f04f 0b01 	movge.w	fp, #1
    lv_coord_t knob_size = hor ? objh : objw;
 801ea18:	4285      	cmp	r5, r0
 801ea1a:	bfa8      	it	ge
 801ea1c:	4681      	movge	r9, r0
    if(slider->bar.mode == LV_BAR_MODE_SYMMETRICAL && slider->bar.min_value < 0 && slider->bar.max_value > 0) sym = true;
 801ea1e:	2a01      	cmp	r2, #1
 801ea20:	fa0f f989 	sxth.w	r9, r9
 801ea24:	d106      	bne.n	801ea34 <lv_slider_event+0x4e8>
 801ea26:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801ea28:	2b00      	cmp	r3, #0
 801ea2a:	da03      	bge.n	801ea34 <lv_slider_event+0x4e8>
 801ea2c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801ea2e:	2b00      	cmp	r3, #0
 801ea30:	f300 80a3 	bgt.w	801eb7a <lv_slider_event+0x62e>
    if(hor) {
 801ea34:	42b5      	cmp	r5, r6
 801ea36:	da05      	bge.n	801ea44 <lv_slider_event+0x4f8>
                knob_area.y1 = slider->bar.indic_area.y1;
 801ea38:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
                knob_area.y1 = slider->bar.indic_area.y2;
 801ea3a:	f8ad 300a 	strh.w	r3, [sp, #10]
 801ea3e:	e008      	b.n	801ea52 <lv_slider_event+0x506>
            if(slider->bar.cur_value >= 0) {
 801ea40:	2b00      	cmp	r3, #0
 801ea42:	db46      	blt.n	801ead2 <lv_slider_event+0x586>
                knob_area.x1 = LV_SLIDER_KNOB_COORD(hor, base_dir == LV_BASE_DIR_RTL, slider->bar.indic_area);
 801ea44:	f1b8 0f01 	cmp.w	r8, #1
 801ea48:	d146      	bne.n	801ead8 <lv_slider_event+0x58c>
                knob_area.x1 = LV_SLIDER_KNOB_COORD(hor, base_dir != LV_BASE_DIR_RTL, slider->bar.indic_area);
 801ea4a:	f9b4 3034 	ldrsh.w	r3, [r4, #52]	; 0x34
 801ea4e:	f8ad 3008 	strh.w	r3, [sp, #8]
    lv_draw_rect_dsc_init(&knob_rect_dsc);
 801ea52:	a804      	add	r0, sp, #16
    lv_area_copy(&slider->right_knob_area, &knob_area);
 801ea54:	f104 0a68 	add.w	sl, r4, #104	; 0x68
    lv_draw_rect_dsc_init(&knob_rect_dsc);
 801ea58:	f7ee f816 	bl	800ca88 <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(obj, LV_PART_KNOB, &knob_rect_dsc);
 801ea5c:	aa04      	add	r2, sp, #16
 801ea5e:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 801ea62:	4620      	mov	r0, r4
 801ea64:	f7e5 fd7c 	bl	8004560 <lv_obj_init_draw_rect_dsc>
    position_knob(obj, &knob_area, knob_size, hor);
 801ea68:	464a      	mov	r2, r9
 801ea6a:	465b      	mov	r3, fp
 801ea6c:	a902      	add	r1, sp, #8
 801ea6e:	4620      	mov	r0, r4
 801ea70:	f7ff fd00 	bl	801e474 <position_knob>
    dest->x1 = src->x1;
 801ea74:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    lv_obj_draw_dsc_init(&dsc, clip_area);
 801ea78:	4639      	mov	r1, r7
 801ea7a:	a81e      	add	r0, sp, #120	; 0x78
 801ea7c:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
    dest->y1 = src->y1;
 801ea80:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801ea84:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    dest->x2 = src->x2;
 801ea88:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801ea8c:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
    dest->y2 = src->y2;
 801ea90:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 801ea94:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
 801ea98:	f7e6 f846 	bl	8004b28 <lv_obj_draw_dsc_init>
    dsc.id = 0;
 801ea9c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 801eaa0:	2300      	movs	r3, #0
    if(lv_slider_get_mode(obj) != LV_SLIDER_MODE_RANGE) {
 801eaa2:	4620      	mov	r0, r4
    dsc.draw_area = &slider->right_knob_area;
 801eaa4:	f8cd a07c 	str.w	sl, [sp, #124]	; 0x7c
    dsc.id = 0;
 801eaa8:	e9cd 232b 	strd	r2, r3, [sp, #172]	; 0xac
    dsc.rect_dsc = &knob_rect_dsc;
 801eaac:	ab04      	add	r3, sp, #16
 801eaae:	9320      	str	r3, [sp, #128]	; 0x80
    if(lv_slider_get_mode(obj) != LV_SLIDER_MODE_RANGE) {
 801eab0:	f7ff fcb0 	bl	801e414 <lv_slider_get_mode>
 801eab4:	2802      	cmp	r0, #2
 801eab6:	d012      	beq.n	801eade <lv_slider_event+0x592>
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &dsc);
 801eab8:	aa1e      	add	r2, sp, #120	; 0x78
 801eaba:	211a      	movs	r1, #26
 801eabc:	4620      	mov	r0, r4
 801eabe:	f7e3 fa03 	bl	8001ec8 <lv_event_send>
        lv_draw_rect(&slider->right_knob_area, clip_area, &knob_rect_dsc);
 801eac2:	aa04      	add	r2, sp, #16
 801eac4:	4639      	mov	r1, r7
 801eac6:	4650      	mov	r0, sl
        lv_draw_rect(&slider->left_knob_area, clip_area, &knob_rect_dsc);
 801eac8:	f7ee f800 	bl	800cacc <lv_draw_rect>
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &dsc);
 801eacc:	aa1e      	add	r2, sp, #120	; 0x78
 801eace:	211b      	movs	r1, #27
 801ead0:	e669      	b.n	801e7a6 <lv_slider_event+0x25a>
                knob_area.x1 = LV_SLIDER_KNOB_COORD(hor, base_dir != LV_BASE_DIR_RTL, slider->bar.indic_area);
 801ead2:	f1b8 0f01 	cmp.w	r8, #1
 801ead6:	d1b8      	bne.n	801ea4a <lv_slider_event+0x4fe>
 801ead8:	f9b4 3038 	ldrsh.w	r3, [r4, #56]	; 0x38
 801eadc:	e7b7      	b.n	801ea4e <lv_slider_event+0x502>
        lv_memcpy(&knob_rect_dsc_tmp, &knob_rect_dsc, sizeof(lv_draw_rect_dsc_t));
 801eade:	2234      	movs	r2, #52	; 0x34
 801eae0:	a904      	add	r1, sp, #16
 801eae2:	a811      	add	r0, sp, #68	; 0x44
 801eae4:	f7f8 fe60 	bl	80177a8 <lv_memcpy>
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &dsc);
 801eae8:	aa1e      	add	r2, sp, #120	; 0x78
 801eaea:	211a      	movs	r1, #26
 801eaec:	4620      	mov	r0, r4
 801eaee:	f7e3 f9eb 	bl	8001ec8 <lv_event_send>
        lv_draw_rect(&slider->right_knob_area, clip_area, &knob_rect_dsc);
 801eaf2:	aa04      	add	r2, sp, #16
 801eaf4:	4639      	mov	r1, r7
 801eaf6:	4650      	mov	r0, sl
 801eaf8:	f7ed ffe8 	bl	800cacc <lv_draw_rect>
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &dsc);
 801eafc:	aa1e      	add	r2, sp, #120	; 0x78
 801eafe:	211b      	movs	r1, #27
 801eb00:	4620      	mov	r0, r4
 801eb02:	f7e3 f9e1 	bl	8001ec8 <lv_event_send>
        if(hor) {
 801eb06:	42b5      	cmp	r5, r6
 801eb08:	db33      	blt.n	801eb72 <lv_slider_event+0x626>
            knob_area.x1 = LV_SLIDER_KNOB_COORD(hor, base_dir != LV_BASE_DIR_RTL, slider->bar.indic_area);
 801eb0a:	f1b8 0f01 	cmp.w	r8, #1
 801eb0e:	bf14      	ite	ne
 801eb10:	f9b4 3034 	ldrshne.w	r3, [r4, #52]	; 0x34
 801eb14:	f9b4 3038 	ldrsheq.w	r3, [r4, #56]	; 0x38
 801eb18:	f8ad 3008 	strh.w	r3, [sp, #8]
        position_knob(obj, &knob_area, knob_size, hor);
 801eb1c:	465b      	mov	r3, fp
 801eb1e:	464a      	mov	r2, r9
 801eb20:	a902      	add	r1, sp, #8
 801eb22:	4620      	mov	r0, r4
 801eb24:	f7ff fca6 	bl	801e474 <position_knob>
    dest->x1 = src->x1;
 801eb28:	f8bd 3008 	ldrh.w	r3, [sp, #8]
        lv_memcpy(&knob_rect_dsc, &knob_rect_dsc_tmp, sizeof(lv_draw_rect_dsc_t));
 801eb2c:	2234      	movs	r2, #52	; 0x34
 801eb2e:	a911      	add	r1, sp, #68	; 0x44
 801eb30:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
 801eb34:	a804      	add	r0, sp, #16
    dest->y1 = src->y1;
 801eb36:	f8bd 300a 	ldrh.w	r3, [sp, #10]
        lv_area_copy(&slider->left_knob_area, &knob_area);
 801eb3a:	f104 0560 	add.w	r5, r4, #96	; 0x60
 801eb3e:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
    dest->x2 = src->x2;
 801eb42:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801eb46:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
    dest->y2 = src->y2;
 801eb4a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 801eb4e:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
        lv_memcpy(&knob_rect_dsc, &knob_rect_dsc_tmp, sizeof(lv_draw_rect_dsc_t));
 801eb52:	f7f8 fe29 	bl	80177a8 <lv_memcpy>
        dsc.rect_dsc = &knob_rect_dsc;
 801eb56:	ab04      	add	r3, sp, #16
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &dsc);
 801eb58:	aa1e      	add	r2, sp, #120	; 0x78
 801eb5a:	211a      	movs	r1, #26
        dsc.rect_dsc = &knob_rect_dsc;
 801eb5c:	9320      	str	r3, [sp, #128]	; 0x80
        dsc.id = 1;
 801eb5e:	2301      	movs	r3, #1
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &dsc);
 801eb60:	4620      	mov	r0, r4
        dsc.draw_area = &slider->left_knob_area;
 801eb62:	951f      	str	r5, [sp, #124]	; 0x7c
        dsc.id = 1;
 801eb64:	932c      	str	r3, [sp, #176]	; 0xb0
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &dsc);
 801eb66:	f7e3 f9af 	bl	8001ec8 <lv_event_send>
        lv_draw_rect(&slider->left_knob_area, clip_area, &knob_rect_dsc);
 801eb6a:	aa04      	add	r2, sp, #16
 801eb6c:	4639      	mov	r1, r7
 801eb6e:	4628      	mov	r0, r5
 801eb70:	e7aa      	b.n	801eac8 <lv_slider_event+0x57c>
            knob_area.y1 = slider->bar.indic_area.y2;
 801eb72:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 801eb74:	f8ad 300a 	strh.w	r3, [sp, #10]
 801eb78:	e7d0      	b.n	801eb1c <lv_slider_event+0x5d0>
    if(hor) {
 801eb7a:	4285      	cmp	r5, r0
 801eb7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801eb7e:	f6bf af5f 	bge.w	801ea40 <lv_slider_event+0x4f4>
            if(slider->bar.cur_value >= 0) {
 801eb82:	2b00      	cmp	r3, #0
 801eb84:	f6bf af58 	bge.w	801ea38 <lv_slider_event+0x4ec>
                knob_area.y1 = slider->bar.indic_area.y2;
 801eb88:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 801eb8a:	e756      	b.n	801ea3a <lv_slider_event+0x4ee>

0801eb8c <lv_switch_constructor>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void lv_switch_constructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 801eb8c:	b507      	push	{r0, r1, r2, lr}
 801eb8e:	4608      	mov	r0, r1
    LV_UNUSED(class_p);
    LV_TRACE_OBJ_CREATE("begin");

   lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLLABLE);
 801eb90:	2110      	movs	r1, #16
 801eb92:	9001      	str	r0, [sp, #4]
 801eb94:	f7e5 f8db 	bl	8003d4e <lv_obj_clear_flag>
   lv_obj_add_flag(obj, LV_OBJ_FLAG_CHECKABLE);
 801eb98:	9801      	ldr	r0, [sp, #4]
 801eb9a:	2108      	movs	r1, #8
 801eb9c:	f7e5 f8b4 	bl	8003d08 <lv_obj_add_flag>
   lv_obj_add_flag(obj, LV_OBJ_FLAG_SCROLL_ON_FOCUS);
 801eba0:	f44f 7100 	mov.w	r1, #512	; 0x200
 801eba4:	9801      	ldr	r0, [sp, #4]

   LV_TRACE_OBJ_CREATE("finished");
}
 801eba6:	b003      	add	sp, #12
 801eba8:	f85d eb04 	ldr.w	lr, [sp], #4
   lv_obj_add_flag(obj, LV_OBJ_FLAG_SCROLL_ON_FOCUS);
 801ebac:	f7e5 b8ac 	b.w	8003d08 <lv_obj_add_flag>

0801ebb0 <lv_switch_event>:


static void lv_switch_event(const lv_obj_class_t * class_p, lv_event_t * e)
{
 801ebb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    LV_UNUSED(class_p);

    lv_res_t res;

    /*Call the ancestor's event handler*/
    res = lv_obj_event_base(MY_CLASS, e);
 801ebb4:	489a      	ldr	r0, [pc, #616]	; (801ee20 <lv_switch_event+0x270>)
{
 801ebb6:	b091      	sub	sp, #68	; 0x44
 801ebb8:	460e      	mov	r6, r1
    res = lv_obj_event_base(MY_CLASS, e);
 801ebba:	f7e3 f90d 	bl	8001dd8 <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 801ebbe:	2801      	cmp	r0, #1
 801ebc0:	d151      	bne.n	801ec66 <lv_switch_event+0xb6>

    lv_event_code_t code = lv_event_get_code(e);
 801ebc2:	4630      	mov	r0, r6
 801ebc4:	f7e3 f9a2 	bl	8001f0c <lv_event_get_code>
 801ebc8:	4604      	mov	r4, r0
    lv_obj_t * obj = lv_event_get_target(e);
 801ebca:	4630      	mov	r0, r6
 801ebcc:	f7e3 f99c 	bl	8001f08 <lv_event_get_target>

    if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 801ebd0:	2c13      	cmp	r4, #19
    lv_obj_t * obj = lv_event_get_target(e);
 801ebd2:	4605      	mov	r5, r0
    if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 801ebd4:	d150      	bne.n	801ec78 <lv_switch_event+0xc8>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801ebd6:	f241 0212 	movw	r2, #4114	; 0x1012
 801ebda:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 801ebde:	f7e8 fbc3 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801ebe2:	f241 0213 	movw	r2, #4115	; 0x1013
    return (lv_coord_t)v.num;
 801ebe6:	fa0f f980 	sxth.w	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801ebea:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 801ebee:	4628      	mov	r0, r5
 801ebf0:	f7e8 fbba 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801ebf4:	f241 0210 	movw	r2, #4112	; 0x1010
    return (lv_coord_t)v.num;
 801ebf8:	b204      	sxth	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801ebfa:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 801ebfe:	4628      	mov	r0, r5
 801ec00:	f7e8 fbb2 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801ec04:	f241 0211 	movw	r2, #4113	; 0x1011
    return (lv_coord_t)v.num;
 801ec08:	fa0f f880 	sxth.w	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801ec0c:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 801ec10:	4628      	mov	r0, r5
 801ec12:	f7e8 fba9 	bl	8007368 <lv_obj_get_style_prop>
        lv_coord_t knob_bottom = lv_obj_get_style_pad_bottom(obj, LV_PART_KNOB);

        /*The smaller size is the knob diameter*/
        lv_coord_t knob_size = LV_MAX4(knob_left, knob_right, knob_bottom, knob_top);
        knob_size += 2;         /*For rounding error*/
        knob_size += lv_obj_calculate_ext_draw_size(obj, LV_PART_KNOB);
 801ec16:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    return (lv_coord_t)v.num;
 801ec1a:	b207      	sxth	r7, r0
 801ec1c:	4628      	mov	r0, r5
 801ec1e:	f7e5 ff12 	bl	8004a46 <lv_obj_calculate_ext_draw_size>
        lv_coord_t knob_size = LV_MAX4(knob_left, knob_right, knob_bottom, knob_top);
 801ec22:	454c      	cmp	r4, r9
 801ec24:	4623      	mov	r3, r4
 801ec26:	bfb8      	it	lt
 801ec28:	464b      	movlt	r3, r9
 801ec2a:	4543      	cmp	r3, r8
 801ec2c:	bfb8      	it	lt
 801ec2e:	4643      	movlt	r3, r8
 801ec30:	42bb      	cmp	r3, r7
 801ec32:	bfb8      	it	lt
 801ec34:	463b      	movlt	r3, r7
        knob_size += 2;         /*For rounding error*/
 801ec36:	3302      	adds	r3, #2
        knob_size += lv_obj_calculate_ext_draw_size(obj, LV_PART_KNOB);
 801ec38:	4418      	add	r0, r3
 801ec3a:	b284      	uxth	r4, r0

        lv_coord_t * s = lv_event_get_param(e);
 801ec3c:	4630      	mov	r0, r6
 801ec3e:	f7e3 f967 	bl	8001f10 <lv_event_get_param>
 801ec42:	4606      	mov	r6, r0
        *s = LV_MAX(*s, knob_size);
 801ec44:	b224      	sxth	r4, r4
 801ec46:	f9b0 0000 	ldrsh.w	r0, [r0]
        *s = LV_MAX(*s, lv_obj_calculate_ext_draw_size(obj, LV_PART_INDICATOR));
 801ec4a:	f44f 3100 	mov.w	r1, #131072	; 0x20000
        *s = LV_MAX(*s, knob_size);
 801ec4e:	4284      	cmp	r4, r0
 801ec50:	bfb8      	it	lt
 801ec52:	4604      	movlt	r4, r0
        *s = LV_MAX(*s, lv_obj_calculate_ext_draw_size(obj, LV_PART_INDICATOR));
 801ec54:	4628      	mov	r0, r5
        *s = LV_MAX(*s, knob_size);
 801ec56:	8034      	strh	r4, [r6, #0]
        *s = LV_MAX(*s, lv_obj_calculate_ext_draw_size(obj, LV_PART_INDICATOR));
 801ec58:	f7e5 fef5 	bl	8004a46 <lv_obj_calculate_ext_draw_size>
 801ec5c:	4284      	cmp	r4, r0
 801ec5e:	dd05      	ble.n	801ec6c <lv_switch_event+0xbc>
 801ec60:	f9b6 0000 	ldrsh.w	r0, [r6]
 801ec64:	8030      	strh	r0, [r6, #0]
        lv_obj_invalidate(obj);
    }
    else if(code == LV_EVENT_DRAW_MAIN) {
        draw_main(e);
    }
}
 801ec66:	b011      	add	sp, #68	; 0x44
 801ec68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        *s = LV_MAX(*s, lv_obj_calculate_ext_draw_size(obj, LV_PART_INDICATOR));
 801ec6c:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 801ec70:	4628      	mov	r0, r5
 801ec72:	f7e5 fee8 	bl	8004a46 <lv_obj_calculate_ext_draw_size>
 801ec76:	e7f5      	b.n	801ec64 <lv_switch_event+0xb4>
    else if(code == LV_EVENT_CLICKED) {
 801ec78:	2c07      	cmp	r4, #7
 801ec7a:	d10f      	bne.n	801ec9c <lv_switch_event+0xec>
        uint32_t v = lv_obj_get_state(obj) & LV_STATE_CHECKED ? 1 : 0;
 801ec7c:	f7e5 f8ae 	bl	8003ddc <lv_obj_get_state>
 801ec80:	f000 0001 	and.w	r0, r0, #1
        res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, &v);
 801ec84:	aa03      	add	r2, sp, #12
 801ec86:	211c      	movs	r1, #28
        uint32_t v = lv_obj_get_state(obj) & LV_STATE_CHECKED ? 1 : 0;
 801ec88:	9003      	str	r0, [sp, #12]
        res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, &v);
 801ec8a:	4628      	mov	r0, r5
 801ec8c:	f7e3 f91c 	bl	8001ec8 <lv_event_send>
        if(res != LV_RES_OK) return;
 801ec90:	2801      	cmp	r0, #1
 801ec92:	d1e8      	bne.n	801ec66 <lv_switch_event+0xb6>
        lv_obj_invalidate(obj);
 801ec94:	4628      	mov	r0, r5
 801ec96:	f7e6 fa3f 	bl	8005118 <lv_obj_invalidate>
 801ec9a:	e7e4      	b.n	801ec66 <lv_switch_event+0xb6>
    else if(code == LV_EVENT_DRAW_MAIN) {
 801ec9c:	2c15      	cmp	r4, #21
 801ec9e:	d1e2      	bne.n	801ec66 <lv_switch_event+0xb6>

static void draw_main(lv_event_t * e)
{
    lv_obj_t * obj = lv_event_get_target(e);
 801eca0:	4630      	mov	r0, r6
 801eca2:	f7e3 f931 	bl	8001f08 <lv_event_get_target>
 801eca6:	4604      	mov	r4, r0
    const lv_area_t * clip_area = lv_event_get_param(e);
 801eca8:	4630      	mov	r0, r6
 801ecaa:	f7e3 f931 	bl	8001f10 <lv_event_get_param>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 801ecae:	f241 426a 	movw	r2, #5226	; 0x146a
 801ecb2:	2100      	movs	r1, #0
 801ecb4:	4607      	mov	r7, r0
 801ecb6:	4620      	mov	r0, r4
 801ecb8:	f7e8 fb56 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801ecbc:	f241 0212 	movw	r2, #4114	; 0x1012
 801ecc0:	2100      	movs	r1, #0
    return (lv_base_dir_t)v.num;
 801ecc2:	fa5f fb80 	uxtb.w	fp, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801ecc6:	4620      	mov	r0, r4
 801ecc8:	f7e8 fb4e 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801eccc:	f241 0213 	movw	r2, #4115	; 0x1013
 801ecd0:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801ecd2:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801ecd4:	4620      	mov	r0, r4
 801ecd6:	f7e8 fb47 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801ecda:	f241 0210 	movw	r2, #4112	; 0x1010
 801ecde:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801ece0:	4682      	mov	sl, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801ece2:	4620      	mov	r0, r4
 801ece4:	f7e8 fb40 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801ece8:	f241 0211 	movw	r2, #4113	; 0x1011
 801ecec:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801ecee:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801ecf0:	4620      	mov	r0, r4
 801ecf2:	f7e8 fb39 	bl	8007368 <lv_obj_get_style_prop>
 801ecf6:	4680      	mov	r8, r0
    lv_coord_t bg_left = lv_obj_get_style_pad_left(obj,     LV_PART_MAIN);
    lv_coord_t bg_right = lv_obj_get_style_pad_right(obj,   LV_PART_MAIN);
    lv_coord_t bg_top = lv_obj_get_style_pad_top(obj,       LV_PART_MAIN);
    lv_coord_t bg_bottom = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN);

    bool chk = lv_obj_get_state(obj) & LV_STATE_CHECKED;
 801ecf8:	4620      	mov	r0, r4
 801ecfa:	f7e5 f86f 	bl	8003ddc <lv_obj_get_state>
    /*Draw the indicator in checked state*/
    if(chk) {
 801ecfe:	f010 0901 	ands.w	r9, r0, #1
 801ed02:	d022      	beq.n	801ed4a <lv_switch_event+0x19a>
        /*Respect the background's padding*/
        lv_area_t indic_area;
        lv_area_copy(&indic_area, &obj->coords);
        indic_area.x1 += bg_left;
 801ed04:	8aa0      	ldrh	r0, [r4, #20]
    dest->y1 = src->y1;
 801ed06:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
    dest->x2 = src->x2;
 801ed0a:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
 801ed0e:	4428      	add	r0, r5
    dest->y2 = src->y2;
 801ed10:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
        indic_area.x2 -= bg_right;
        indic_area.y1 += bg_top;
 801ed14:	4432      	add	r2, r6
        indic_area.x2 -= bg_right;
 801ed16:	eba1 010a 	sub.w	r1, r1, sl
        indic_area.x1 += bg_left;
 801ed1a:	f8ad 0004 	strh.w	r0, [sp, #4]
        indic_area.y2 -= bg_bottom;
 801ed1e:	eba3 0308 	sub.w	r3, r3, r8

        lv_draw_rect_dsc_t draw_indic_dsc;
        lv_draw_rect_dsc_init(&draw_indic_dsc);
 801ed22:	a803      	add	r0, sp, #12
        indic_area.x2 -= bg_right;
 801ed24:	f8ad 1008 	strh.w	r1, [sp, #8]
        indic_area.y1 += bg_top;
 801ed28:	f8ad 2006 	strh.w	r2, [sp, #6]
        indic_area.y2 -= bg_bottom;
 801ed2c:	f8ad 300a 	strh.w	r3, [sp, #10]
        lv_draw_rect_dsc_init(&draw_indic_dsc);
 801ed30:	f7ed feaa 	bl	800ca88 <lv_draw_rect_dsc_init>
        lv_obj_init_draw_rect_dsc(obj, LV_PART_INDICATOR, &draw_indic_dsc);
 801ed34:	aa03      	add	r2, sp, #12
 801ed36:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 801ed3a:	4620      	mov	r0, r4
 801ed3c:	f7e5 fc10 	bl	8004560 <lv_obj_init_draw_rect_dsc>
        lv_draw_rect(&indic_area, clip_area, &draw_indic_dsc);
 801ed40:	aa03      	add	r2, sp, #12
 801ed42:	4639      	mov	r1, r7
 801ed44:	a801      	add	r0, sp, #4
 801ed46:	f7ed fec1 	bl	800cacc <lv_draw_rect>
    }

    /*Draw the knob*/
    lv_coord_t objh = lv_obj_get_height(obj);
 801ed4a:	4620      	mov	r0, r4
 801ed4c:	f7e6 f895 	bl	8004e7a <lv_obj_get_height>
    lv_coord_t knob_size = objh;
    lv_area_t knob_area;

    /*Left*/
    if((base_dir != LV_BASE_DIR_RTL && !chk) || (base_dir == LV_BASE_DIR_RTL && chk)) {
 801ed50:	f1bb 0f01 	cmp.w	fp, #1
 801ed54:	d00c      	beq.n	801ed70 <lv_switch_event+0x1c0>
 801ed56:	f1b9 0f00 	cmp.w	r9, #0
 801ed5a:	d00c      	beq.n	801ed76 <lv_switch_event+0x1c6>
        knob_area.x1 = obj->coords.x1 + bg_left;
        knob_area.x2 = knob_area.x1 + knob_size;
    }
    else {
        knob_area.x2 = obj->coords.x2 - bg_right;
 801ed5c:	8b21      	ldrh	r1, [r4, #24]
 801ed5e:	eba1 020a 	sub.w	r2, r1, sl
 801ed62:	b293      	uxth	r3, r2
        knob_area.x1 = knob_area.x2 - knob_size;
 801ed64:	1a18      	subs	r0, r3, r0
        knob_area.x2 = obj->coords.x2 - bg_right;
 801ed66:	f8ad 3008 	strh.w	r3, [sp, #8]
        knob_area.x1 = knob_area.x2 - knob_size;
 801ed6a:	f8ad 0004 	strh.w	r0, [sp, #4]
 801ed6e:	e00a      	b.n	801ed86 <lv_switch_event+0x1d6>
    if((base_dir != LV_BASE_DIR_RTL && !chk) || (base_dir == LV_BASE_DIR_RTL && chk)) {
 801ed70:	f1b9 0f00 	cmp.w	r9, #0
 801ed74:	d0f2      	beq.n	801ed5c <lv_switch_event+0x1ac>
        knob_area.x1 = obj->coords.x1 + bg_left;
 801ed76:	8aa3      	ldrh	r3, [r4, #20]
 801ed78:	442b      	add	r3, r5
 801ed7a:	b29d      	uxth	r5, r3
 801ed7c:	f8ad 5004 	strh.w	r5, [sp, #4]
        knob_area.x2 = knob_area.x1 + knob_size;
 801ed80:	4405      	add	r5, r0
 801ed82:	f8ad 5008 	strh.w	r5, [sp, #8]
    }

    knob_area.y1 = obj->coords.y1 + bg_top;
 801ed86:	8ae0      	ldrh	r0, [r4, #22]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801ed88:	f241 0212 	movw	r2, #4114	; 0x1012
 801ed8c:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 801ed90:	4406      	add	r6, r0
    knob_area.y2 = obj->coords.y2 - bg_bottom;
 801ed92:	8b60      	ldrh	r0, [r4, #26]
 801ed94:	eba0 0808 	sub.w	r8, r0, r8
 801ed98:	4620      	mov	r0, r4
    knob_area.y1 = obj->coords.y1 + bg_top;
 801ed9a:	f8ad 6006 	strh.w	r6, [sp, #6]
    knob_area.y2 = obj->coords.y2 - bg_bottom;
 801ed9e:	f8ad 800a 	strh.w	r8, [sp, #10]
 801eda2:	f7e8 fae1 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801eda6:	f241 0213 	movw	r2, #4115	; 0x1013
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801edaa:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801edac:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 801edb0:	4620      	mov	r0, r4
 801edb2:	f7e8 fad9 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801edb6:	f241 0210 	movw	r2, #4112	; 0x1010
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801edba:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801edbc:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 801edc0:	4620      	mov	r0, r4
 801edc2:	f7e8 fad1 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801edc6:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801edca:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801edcc:	f241 0211 	movw	r2, #4113	; 0x1011
 801edd0:	4620      	mov	r0, r4
 801edd2:	f7e8 fac9 	bl	8007368 <lv_obj_get_style_prop>
    lv_coord_t knob_right = lv_obj_get_style_pad_right(obj, LV_PART_KNOB);
    lv_coord_t knob_top = lv_obj_get_style_pad_top(obj, LV_PART_KNOB);
    lv_coord_t knob_bottom = lv_obj_get_style_pad_bottom(obj, LV_PART_KNOB);

    /*Apply the paddings on the knob area*/
    knob_area.x1 -= knob_left;
 801edd6:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 801edda:	eba2 0308 	sub.w	r3, r2, r8
    knob_area.x2 += knob_right;
    knob_area.y1 -= knob_top;
 801edde:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    knob_area.x1 -= knob_left;
 801ede2:	f8ad 3004 	strh.w	r3, [sp, #4]
    knob_area.x2 += knob_right;
 801ede6:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801edea:	441d      	add	r5, r3
    knob_area.y1 -= knob_top;
 801edec:	1b93      	subs	r3, r2, r6
 801edee:	f8ad 3006 	strh.w	r3, [sp, #6]
    knob_area.y2 += knob_bottom;
 801edf2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    knob_area.x2 += knob_right;
 801edf6:	f8ad 5008 	strh.w	r5, [sp, #8]
    knob_area.y2 += knob_bottom;
 801edfa:	4418      	add	r0, r3
 801edfc:	f8ad 000a 	strh.w	r0, [sp, #10]

    lv_draw_rect_dsc_t knob_rect_dsc;
    lv_draw_rect_dsc_init(&knob_rect_dsc);
 801ee00:	a803      	add	r0, sp, #12
 801ee02:	f7ed fe41 	bl	800ca88 <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(obj, LV_PART_KNOB, &knob_rect_dsc);
 801ee06:	aa03      	add	r2, sp, #12
 801ee08:	4620      	mov	r0, r4
 801ee0a:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 801ee0e:	f7e5 fba7 	bl	8004560 <lv_obj_init_draw_rect_dsc>

    lv_draw_rect(&knob_area, clip_area, &knob_rect_dsc);
 801ee12:	aa03      	add	r2, sp, #12
 801ee14:	4639      	mov	r1, r7
 801ee16:	a801      	add	r0, sp, #4
 801ee18:	f7ed fe58 	bl	800cacc <lv_draw_rect>

}
 801ee1c:	e723      	b.n	801ec66 <lv_switch_event+0xb6>
 801ee1e:	bf00      	nop
 801ee20:	080295b8 	.word	0x080295b8

0801ee24 <lv_obj_get_style_pad_left>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801ee24:	f241 0212 	movw	r2, #4114	; 0x1012
{
 801ee28:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801ee2a:	f7e8 fa9d 	bl	8007368 <lv_obj_get_style_prop>
}
 801ee2e:	b200      	sxth	r0, r0
 801ee30:	bd08      	pop	{r3, pc}

0801ee32 <lv_obj_get_style_pad_right>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801ee32:	f241 0213 	movw	r2, #4115	; 0x1013
{
 801ee36:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801ee38:	f7e8 fa96 	bl	8007368 <lv_obj_get_style_prop>
}
 801ee3c:	b200      	sxth	r0, r0
 801ee3e:	bd08      	pop	{r3, pc}

0801ee40 <lv_obj_get_style_pad_top>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801ee40:	f241 0210 	movw	r2, #4112	; 0x1010
{
 801ee44:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801ee46:	f7e8 fa8f 	bl	8007368 <lv_obj_get_style_prop>
}
 801ee4a:	b200      	sxth	r0, r0
 801ee4c:	bd08      	pop	{r3, pc}

0801ee4e <get_row_height>:
}

static lv_coord_t get_row_height(lv_obj_t * obj, uint16_t row_id, const lv_font_t * font,
                                 lv_coord_t letter_space, lv_coord_t line_space,
                                 lv_coord_t cell_left, lv_coord_t cell_right, lv_coord_t cell_top, lv_coord_t cell_bottom)
{
 801ee4e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ee52:	ed2d 8b02 	vpush	{d8}
 801ee56:	b08f      	sub	sp, #60	; 0x3c
 801ee58:	ee08 3a10 	vmov	s16, r3
 801ee5c:	4690      	mov	r8, r2
 801ee5e:	4607      	mov	r7, r0
 801ee60:	f9bd 3068 	ldrsh.w	r3, [sp, #104]	; 0x68
    uint16_t row_start = row_id * table->col_cnt;
    uint16_t cell;
    uint16_t col;
    lv_coord_t h_max = lv_font_get_line_height(font) + cell_top + cell_bottom;

    for(cell = row_start, col = 0; cell < row_start + table->col_cnt; cell++, col++) {
 801ee64:	2600      	movs	r6, #0
{
 801ee66:	f9bd 9074 	ldrsh.w	r9, [sp, #116]	; 0x74
 801ee6a:	f9bd a078 	ldrsh.w	sl, [sp, #120]	; 0x78
 801ee6e:	9309      	str	r3, [sp, #36]	; 0x24
 801ee70:	eb09 050a 	add.w	r5, r9, sl
    uint16_t row_start = row_id * table->col_cnt;
 801ee74:	8c83      	ldrh	r3, [r0, #36]	; 0x24
 801ee76:	fb13 f101 	smulbb	r1, r3, r1
 801ee7a:	b2ab      	uxth	r3, r5
 801ee7c:	9308      	str	r3, [sp, #32]
 801ee7e:	fa1f fb81 	uxth.w	fp, r1
    lv_coord_t h_max = lv_font_get_line_height(font) + cell_top + cell_bottom;
 801ee82:	8913      	ldrh	r3, [r2, #8]
                h_max = LV_MAX(lv_font_get_line_height(font) + cell_top + cell_bottom,
                                    h_max);
            }
            /*Without text crop calculate the height of the text in the cell*/
            else {
                txt_w -= cell_left + cell_right;
 801ee84:	f9bd 206c 	ldrsh.w	r2, [sp, #108]	; 0x6c
    for(cell = row_start, col = 0; cell < row_start + table->col_cnt; cell++, col++) {
 801ee88:	465c      	mov	r4, fp
    lv_coord_t h_max = lv_font_get_line_height(font) + cell_top + cell_bottom;
 801ee8a:	fa13 f585 	uxtah	r5, r3, r5
                txt_w -= cell_left + cell_right;
 801ee8e:	f9bd 3070 	ldrsh.w	r3, [sp, #112]	; 0x70
    lv_coord_t h_max = lv_font_get_line_height(font) + cell_top + cell_bottom;
 801ee92:	b22d      	sxth	r5, r5
                txt_w -= cell_left + cell_right;
 801ee94:	18d3      	adds	r3, r2, r3
 801ee96:	930b      	str	r3, [sp, #44]	; 0x2c
    for(cell = row_start, col = 0; cell < row_start + table->col_cnt; cell++, col++) {
 801ee98:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 801ee9a:	eb0b 0300 	add.w	r3, fp, r0
 801ee9e:	429c      	cmp	r4, r3
 801eea0:	db05      	blt.n	801eeae <get_row_height+0x60>
            }
        }
    }

    return h_max;
}
 801eea2:	4628      	mov	r0, r5
 801eea4:	b00f      	add	sp, #60	; 0x3c
 801eea6:	ecbd 8b02 	vpop	{d8}
 801eeaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(table->cell_data[cell] != NULL) {
 801eeae:	f8d7 e028 	ldr.w	lr, [r7, #40]	; 0x28
 801eeb2:	f85e 1024 	ldr.w	r1, [lr, r4, lsl #2]
 801eeb6:	b1e9      	cbz	r1, 801eef4 <get_row_height+0xa6>
            txt_w              = table->col_w[col];
 801eeb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
            for(col_merge = 0; col_merge + col < table->col_cnt - 1; col_merge++) {
 801eeba:	3801      	subs	r0, #1
 801eebc:	2200      	movs	r2, #0
            txt_w              = table->col_w[col];
 801eebe:	9306      	str	r3, [sp, #24]
 801eec0:	f933 3016 	ldrsh.w	r3, [r3, r6, lsl #1]
            for(col_merge = 0; col_merge + col < table->col_cnt - 1; col_merge++) {
 801eec4:	900a      	str	r0, [sp, #40]	; 0x28
            txt_w              = table->col_w[col];
 801eec6:	9305      	str	r3, [sp, #20]
            for(col_merge = 0; col_merge + col < table->col_cnt - 1; col_merge++) {
 801eec8:	b293      	uxth	r3, r2
 801eeca:	fa16 f082 	uxtah	r0, r6, r2
 801eece:	469c      	mov	ip, r3
 801eed0:	9307      	str	r3, [sp, #28]
 801eed2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801eed4:	4298      	cmp	r0, r3
 801eed6:	db12      	blt.n	801eefe <get_row_height+0xb0>
            if(ctrl & LV_TABLE_CELL_CTRL_TEXT_CROP) {
 801eed8:	780a      	ldrb	r2, [r1, #0]
 801eeda:	f012 0202 	ands.w	r2, r2, #2
 801eede:	d023      	beq.n	801ef28 <get_row_height+0xda>
                h_max = LV_MAX(lv_font_get_line_height(font) + cell_top + cell_bottom,
 801eee0:	f9b8 3008 	ldrsh.w	r3, [r8, #8]
 801eee4:	eb03 0209 	add.w	r2, r3, r9
 801eee8:	4452      	add	r2, sl
 801eeea:	42aa      	cmp	r2, r5
 801eeec:	dd02      	ble.n	801eef4 <get_row_height+0xa6>
 801eeee:	9a08      	ldr	r2, [sp, #32]
 801eef0:	18d5      	adds	r5, r2, r3
 801eef2:	b22d      	sxth	r5, r5
    for(cell = row_start, col = 0; cell < row_start + table->col_cnt; cell++, col++) {
 801eef4:	3401      	adds	r4, #1
 801eef6:	3601      	adds	r6, #1
 801eef8:	b2a4      	uxth	r4, r4
 801eefa:	b2b6      	uxth	r6, r6
 801eefc:	e7cc      	b.n	801ee98 <get_row_height+0x4a>
                if(table->cell_data[cell + col_merge] != NULL) {
 801eefe:	44a4      	add	ip, r4
 801ef00:	f85e c02c 	ldr.w	ip, [lr, ip, lsl #2]
 801ef04:	f1bc 0f00 	cmp.w	ip, #0
 801ef08:	d0e6      	beq.n	801eed8 <get_row_height+0x8a>
                    if(ctrl & LV_TABLE_CELL_CTRL_MERGE_RIGHT)
 801ef0a:	f89c c000 	ldrb.w	ip, [ip]
 801ef0e:	3201      	adds	r2, #1
 801ef10:	f01c 0f01 	tst.w	ip, #1
 801ef14:	d0e0      	beq.n	801eed8 <get_row_height+0x8a>
                        txt_w += table->col_w[col + col_merge + 1];
 801ef16:	9b06      	ldr	r3, [sp, #24]
 801ef18:	3001      	adds	r0, #1
 801ef1a:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 801ef1e:	9b05      	ldr	r3, [sp, #20]
 801ef20:	4403      	add	r3, r0
 801ef22:	b21b      	sxth	r3, r3
 801ef24:	9305      	str	r3, [sp, #20]
            for(col_merge = 0; col_merge + col < table->col_cnt - 1; col_merge++) {
 801ef26:	e7cf      	b.n	801eec8 <get_row_height+0x7a>
                txt_w -= cell_left + cell_right;
 801ef28:	9805      	ldr	r0, [sp, #20]
                lv_txt_get_size(&txt_size, table->cell_data[cell] + 1, font,
 801ef2a:	3101      	adds	r1, #1
                txt_w -= cell_left + cell_right;
 801ef2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
                lv_txt_get_size(&txt_size, table->cell_data[cell] + 1, font,
 801ef2e:	9202      	str	r2, [sp, #8]
 801ef30:	4642      	mov	r2, r8
                txt_w -= cell_left + cell_right;
 801ef32:	1ac3      	subs	r3, r0, r3
                lv_txt_get_size(&txt_size, table->cell_data[cell] + 1, font,
 801ef34:	a80d      	add	r0, sp, #52	; 0x34
 801ef36:	b21b      	sxth	r3, r3
 801ef38:	9301      	str	r3, [sp, #4]
 801ef3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ef3c:	9300      	str	r3, [sp, #0]
 801ef3e:	ee18 3a10 	vmov	r3, s16
 801ef42:	f7fa fb08 	bl	8019556 <lv_txt_get_size>
                h_max = LV_MAX(txt_size.y + cell_top + cell_bottom, h_max);
 801ef46:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 801ef4a:	444b      	add	r3, r9
 801ef4c:	4453      	add	r3, sl
 801ef4e:	429d      	cmp	r5, r3
 801ef50:	bfb8      	it	lt
 801ef52:	461d      	movlt	r5, r3
                cell += col_merge;
 801ef54:	9b07      	ldr	r3, [sp, #28]
 801ef56:	441c      	add	r4, r3
                col += col_merge;
 801ef58:	441e      	add	r6, r3
                h_max = LV_MAX(txt_size.y + cell_top + cell_bottom, h_max);
 801ef5a:	b22d      	sxth	r5, r5
                cell += col_merge;
 801ef5c:	b2a4      	uxth	r4, r4
                col += col_merge;
 801ef5e:	b2b6      	uxth	r6, r6
 801ef60:	e7c8      	b.n	801eef4 <get_row_height+0xa6>

0801ef62 <lv_table_destructor>:
{
 801ef62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    for(i = 0; i < table->col_cnt * table->row_cnt; i++) {
 801ef64:	2500      	movs	r5, #0
{
 801ef66:	460c      	mov	r4, r1
            table->cell_data[i] = NULL;
 801ef68:	462f      	mov	r7, r5
    for(i = 0; i < table->col_cnt * table->row_cnt; i++) {
 801ef6a:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
 801ef6c:	b2ae      	uxth	r6, r5
 801ef6e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 801ef70:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801ef72:	4353      	muls	r3, r2
 801ef74:	429e      	cmp	r6, r3
 801ef76:	db08      	blt.n	801ef8a <lv_table_destructor+0x28>
    if(table->cell_data) lv_mem_free(table->cell_data);
 801ef78:	b108      	cbz	r0, 801ef7e <lv_table_destructor+0x1c>
 801ef7a:	f7f8 fbdb 	bl	8017734 <lv_mem_free>
    if(table->row_h) lv_mem_free(table->row_h);
 801ef7e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801ef80:	b168      	cbz	r0, 801ef9e <lv_table_destructor+0x3c>
}
 801ef82:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    if(table->row_h) lv_mem_free(table->row_h);
 801ef86:	f7f8 bbd5 	b.w	8017734 <lv_mem_free>
        if(table->cell_data[i]) {
 801ef8a:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 801ef8e:	b120      	cbz	r0, 801ef9a <lv_table_destructor+0x38>
            lv_mem_free(table->cell_data[i]);
 801ef90:	f7f8 fbd0 	bl	8017734 <lv_mem_free>
            table->cell_data[i] = NULL;
 801ef94:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801ef96:	f843 7026 	str.w	r7, [r3, r6, lsl #2]
    for(i = 0; i < table->col_cnt * table->row_cnt; i++) {
 801ef9a:	3501      	adds	r5, #1
 801ef9c:	e7e5      	b.n	801ef6a <lv_table_destructor+0x8>
}
 801ef9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801efa0 <lv_table_constructor>:
    table->col_cnt = 1;
 801efa0:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    table->col_w = lv_mem_alloc(table->col_cnt * sizeof(table->col_w[0]));
 801efa4:	2002      	movs	r0, #2
{
 801efa6:	b510      	push	{r4, lr}
 801efa8:	460c      	mov	r4, r1
    table->col_cnt = 1;
 801efaa:	624b      	str	r3, [r1, #36]	; 0x24
    table->col_w = lv_mem_alloc(table->col_cnt * sizeof(table->col_w[0]));
 801efac:	f7f8 fd44 	bl	8017a38 <lv_mem_alloc>
 801efb0:	6320      	str	r0, [r4, #48]	; 0x30
    table->row_h = lv_mem_alloc(table->row_cnt * sizeof(table->row_h[0]));
 801efb2:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
 801efb4:	0040      	lsls	r0, r0, #1
 801efb6:	f7f8 fd3f 	bl	8017a38 <lv_mem_alloc>
    table->col_w[0] = LV_DPI_DEF;
 801efba:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801efbc:	2382      	movs	r3, #130	; 0x82
    table->row_h = lv_mem_alloc(table->row_cnt * sizeof(table->row_h[0]));
 801efbe:	62e0      	str	r0, [r4, #44]	; 0x2c
    table->col_w[0] = LV_DPI_DEF;
 801efc0:	8013      	strh	r3, [r2, #0]
    table->row_h[0] = LV_DPI_DEF;
 801efc2:	8003      	strh	r3, [r0, #0]
    table->cell_data = lv_mem_realloc(table->cell_data, table->row_cnt * table->col_cnt * sizeof(char *));
 801efc4:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 801efc6:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
 801efc8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801efca:	4359      	muls	r1, r3
 801efcc:	0089      	lsls	r1, r1, #2
 801efce:	f7f8 fd49 	bl	8017a64 <lv_mem_realloc>
    table->cell_data[0] = NULL;
 801efd2:	2300      	movs	r3, #0
    table->cell_data = lv_mem_realloc(table->cell_data, table->row_cnt * table->col_cnt * sizeof(char *));
 801efd4:	62a0      	str	r0, [r4, #40]	; 0x28
    table->cell_data[0] = NULL;
 801efd6:	6003      	str	r3, [r0, #0]
}
 801efd8:	bd10      	pop	{r4, pc}

0801efda <refr_size>:
{
 801efda:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801efde:	4604      	mov	r4, r0
 801efe0:	b08b      	sub	sp, #44	; 0x2c
 801efe2:	460d      	mov	r5, r1
    lv_coord_t cell_left = lv_obj_get_style_pad_left(obj, LV_PART_ITEMS);
 801efe4:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 801efe8:	f7ff ff1c 	bl	801ee24 <lv_obj_get_style_pad_left>
    lv_coord_t cell_right = lv_obj_get_style_pad_right(obj, LV_PART_ITEMS);
 801efec:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
    lv_coord_t cell_left = lv_obj_get_style_pad_left(obj, LV_PART_ITEMS);
 801eff0:	9006      	str	r0, [sp, #24]
    lv_coord_t cell_right = lv_obj_get_style_pad_right(obj, LV_PART_ITEMS);
 801eff2:	4620      	mov	r0, r4
 801eff4:	f7ff ff1d 	bl	801ee32 <lv_obj_get_style_pad_right>
    lv_coord_t cell_top = lv_obj_get_style_pad_top(obj, LV_PART_ITEMS);
 801eff8:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
    lv_coord_t cell_right = lv_obj_get_style_pad_right(obj, LV_PART_ITEMS);
 801effc:	9007      	str	r0, [sp, #28]
    lv_coord_t cell_top = lv_obj_get_style_pad_top(obj, LV_PART_ITEMS);
 801effe:	4620      	mov	r0, r4
 801f000:	f7ff ff1e 	bl	801ee40 <lv_obj_get_style_pad_top>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801f004:	f241 0211 	movw	r2, #4113	; 0x1011
 801f008:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 801f00c:	9008      	str	r0, [sp, #32]
 801f00e:	4620      	mov	r0, r4
 801f010:	f7e8 f9aa 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 801f014:	f241 425a 	movw	r2, #5210	; 0x145a
 801f018:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
    return (lv_coord_t)v.num;
 801f01c:	fa0f fa80 	sxth.w	sl, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 801f020:	4620      	mov	r0, r4
 801f022:	f7e8 f9a1 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 801f026:	f241 425b 	movw	r2, #5211	; 0x145b
 801f02a:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
    return (lv_coord_t)v.num;
 801f02e:	fa0f f980 	sxth.w	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 801f032:	4620      	mov	r0, r4
 801f034:	f7e8 f998 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 801f038:	f241 4259 	movw	r2, #5209	; 0x1459
    return (lv_coord_t)v.num;
 801f03c:	b203      	sxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 801f03e:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 801f042:	4620      	mov	r0, r4
    return (lv_coord_t)v.num;
 801f044:	9309      	str	r3, [sp, #36]	; 0x24
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 801f046:	f7e8 f98f 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MIN_HEIGHT);
 801f04a:	f241 0205 	movw	r2, #4101	; 0x1005
 801f04e:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 801f052:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MIN_HEIGHT);
 801f054:	4620      	mov	r0, r4
 801f056:	f7e8 f987 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_HEIGHT);
 801f05a:	f241 0206 	movw	r2, #4102	; 0x1006
    return (lv_coord_t)v.num;
 801f05e:	b207      	sxth	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_HEIGHT);
 801f060:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 801f064:	4620      	mov	r0, r4
 801f066:	f7e8 f97f 	bl	8007368 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801f06a:	b206      	sxth	r6, r0
    for(i = strat_row; i < table->row_cnt; i++) {
 801f06c:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 801f06e:	42aa      	cmp	r2, r5
 801f070:	d805      	bhi.n	801f07e <refr_size+0xa4>
    lv_obj_refresh_self_size(obj) ;
 801f072:	4620      	mov	r0, r4
}
 801f074:	b00b      	add	sp, #44	; 0x2c
 801f076:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_obj_refresh_self_size(obj) ;
 801f07a:	f7e5 bf88 	b.w	8004f8e <lv_obj_refresh_self_size>
        table->row_h[i] = get_row_height(obj, i, font, letter_space, line_space,
 801f07e:	9b08      	ldr	r3, [sp, #32]
 801f080:	b2a9      	uxth	r1, r5
 801f082:	4642      	mov	r2, r8
 801f084:	4620      	mov	r0, r4
 801f086:	9303      	str	r3, [sp, #12]
 801f088:	9b07      	ldr	r3, [sp, #28]
 801f08a:	f8cd a010 	str.w	sl, [sp, #16]
 801f08e:	9302      	str	r3, [sp, #8]
 801f090:	9b06      	ldr	r3, [sp, #24]
 801f092:	f8d4 b02c 	ldr.w	fp, [r4, #44]	; 0x2c
 801f096:	9301      	str	r3, [sp, #4]
 801f098:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f09a:	9300      	str	r3, [sp, #0]
 801f09c:	464b      	mov	r3, r9
 801f09e:	f7ff fed6 	bl	801ee4e <get_row_height>
        table->row_h[i] = LV_CLAMP(minh, table->row_h[i], maxh);
 801f0a2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
        table->row_h[i] = get_row_height(obj, i, font, letter_space, line_space,
 801f0a4:	f82b 0015 	strh.w	r0, [fp, r5, lsl #1]
        table->row_h[i] = LV_CLAMP(minh, table->row_h[i], maxh);
 801f0a8:	f931 2015 	ldrsh.w	r2, [r1, r5, lsl #1]
 801f0ac:	42b2      	cmp	r2, r6
 801f0ae:	bfa8      	it	ge
 801f0b0:	4632      	movge	r2, r6
 801f0b2:	42ba      	cmp	r2, r7
 801f0b4:	bfb8      	it	lt
 801f0b6:	463a      	movlt	r2, r7
 801f0b8:	f821 2015 	strh.w	r2, [r1, r5, lsl #1]
    for(i = strat_row; i < table->row_cnt; i++) {
 801f0bc:	3501      	adds	r5, #1
 801f0be:	e7d5      	b.n	801f06c <refr_size+0x92>

0801f0c0 <draw_main>:
{
 801f0c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f0c4:	4605      	mov	r5, r0
 801f0c6:	b0db      	sub	sp, #364	; 0x16c
    lv_obj_t * obj = lv_event_get_target(e);
 801f0c8:	f7e2 ff1e 	bl	8001f08 <lv_event_get_target>
 801f0cc:	4604      	mov	r4, r0
    const lv_area_t * clip_area = lv_event_get_param(e);
 801f0ce:	4628      	mov	r0, r5
    cell_area.y2 = obj->coords.y1 + bg_top - 1 - lv_obj_get_scroll_y(obj) ;
 801f0d0:	ad16      	add	r5, sp, #88	; 0x58
    const lv_area_t * clip_area = lv_event_get_param(e);
 801f0d2:	f7e2 ff1d 	bl	8001f10 <lv_event_get_param>
    lv_coord_t bg_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 801f0d6:	2100      	movs	r1, #0
    const lv_area_t * clip_area = lv_event_get_param(e);
 801f0d8:	4680      	mov	r8, r0
    lv_coord_t bg_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 801f0da:	4620      	mov	r0, r4
 801f0dc:	f7ff feb0 	bl	801ee40 <lv_obj_get_style_pad_top>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801f0e0:	f241 0211 	movw	r2, #4113	; 0x1011
 801f0e4:	2100      	movs	r1, #0
 801f0e6:	9007      	str	r0, [sp, #28]
 801f0e8:	4620      	mov	r0, r4
    for(row = 0; row < table->row_cnt; row++) {
 801f0ea:	f04f 0900 	mov.w	r9, #0
 801f0ee:	f7e8 f93b 	bl	8007368 <lv_obj_get_style_prop>
    lv_coord_t bg_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 801f0f2:	2100      	movs	r1, #0
    return (lv_coord_t)v.num;
 801f0f4:	b203      	sxth	r3, r0
 801f0f6:	4620      	mov	r0, r4
    uint16_t cell = 0;
 801f0f8:	46ca      	mov	sl, r9
 801f0fa:	9313      	str	r3, [sp, #76]	; 0x4c
    lv_coord_t bg_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 801f0fc:	f7ff fe92 	bl	801ee24 <lv_obj_get_style_pad_left>
    lv_coord_t bg_right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN);
 801f100:	2100      	movs	r1, #0
    lv_coord_t bg_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 801f102:	9008      	str	r0, [sp, #32]
    lv_coord_t bg_right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN);
 801f104:	4620      	mov	r0, r4
 801f106:	f7ff fe94 	bl	801ee32 <lv_obj_get_style_pad_right>
    lv_coord_t cell_left = lv_obj_get_style_pad_left(obj, LV_PART_ITEMS);
 801f10a:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
    lv_coord_t bg_right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN);
 801f10e:	9009      	str	r0, [sp, #36]	; 0x24
    lv_coord_t cell_left = lv_obj_get_style_pad_left(obj, LV_PART_ITEMS);
 801f110:	4620      	mov	r0, r4
 801f112:	f7ff fe87 	bl	801ee24 <lv_obj_get_style_pad_left>
    lv_coord_t cell_right = lv_obj_get_style_pad_right(obj, LV_PART_ITEMS);
 801f116:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
    lv_coord_t cell_left = lv_obj_get_style_pad_left(obj, LV_PART_ITEMS);
 801f11a:	900f      	str	r0, [sp, #60]	; 0x3c
    lv_coord_t cell_right = lv_obj_get_style_pad_right(obj, LV_PART_ITEMS);
 801f11c:	4620      	mov	r0, r4
 801f11e:	f7ff fe88 	bl	801ee32 <lv_obj_get_style_pad_right>
    lv_coord_t cell_top = lv_obj_get_style_pad_top(obj, LV_PART_ITEMS);
 801f122:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
    lv_coord_t cell_right = lv_obj_get_style_pad_right(obj, LV_PART_ITEMS);
 801f126:	9010      	str	r0, [sp, #64]	; 0x40
    lv_coord_t cell_top = lv_obj_get_style_pad_top(obj, LV_PART_ITEMS);
 801f128:	4620      	mov	r0, r4
 801f12a:	f7ff fe89 	bl	801ee40 <lv_obj_get_style_pad_top>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801f12e:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 801f132:	f241 0211 	movw	r2, #4113	; 0x1011
 801f136:	9011      	str	r0, [sp, #68]	; 0x44
 801f138:	4620      	mov	r0, r4
 801f13a:	f7e8 f915 	bl	8007368 <lv_obj_get_style_prop>
    lv_state_t state_ori = obj->state;
 801f13e:	8c23      	ldrh	r3, [r4, #32]
    obj->state = LV_STATE_DEFAULT;
 801f140:	6a22      	ldr	r2, [r4, #32]
    lv_state_t state_ori = obj->state;
 801f142:	930a      	str	r3, [sp, #40]	; 0x28
    obj->state = LV_STATE_DEFAULT;
 801f144:	4bb1      	ldr	r3, [pc, #708]	; (801f40c <draw_main+0x34c>)
 801f146:	9012      	str	r0, [sp, #72]	; 0x48
    lv_draw_rect_dsc_init(&rect_dsc_def);
 801f148:	a82e      	add	r0, sp, #184	; 0xb8
    obj->state = LV_STATE_DEFAULT;
 801f14a:	4013      	ands	r3, r2
 801f14c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801f150:	6223      	str	r3, [r4, #32]
    lv_draw_rect_dsc_init(&rect_dsc_def);
 801f152:	f7ed fc99 	bl	800ca88 <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(obj, LV_PART_ITEMS, &rect_dsc_def);
 801f156:	aa2e      	add	r2, sp, #184	; 0xb8
 801f158:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 801f15c:	4620      	mov	r0, r4
 801f15e:	f7e5 f9ff 	bl	8004560 <lv_obj_init_draw_rect_dsc>
    lv_draw_label_dsc_init(&label_dsc_def);
 801f162:	a81e      	add	r0, sp, #120	; 0x78
 801f164:	f7eb f9dc 	bl	800a520 <lv_draw_label_dsc_init>
    lv_obj_init_draw_label_dsc(obj, LV_PART_ITEMS, &label_dsc_def);
 801f168:	aa1e      	add	r2, sp, #120	; 0x78
 801f16a:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 801f16e:	4620      	mov	r0, r4
 801f170:	f7e5 fb32 	bl	80047d8 <lv_obj_init_draw_label_dsc>
    obj->state = state_ori;
 801f174:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cell_area.y2 = obj->coords.y1 + bg_top - 1 - lv_obj_get_scroll_y(obj) ;
 801f176:	4620      	mov	r0, r4
 801f178:	8ae6      	ldrh	r6, [r4, #22]
    obj->state = state_ori;
 801f17a:	8423      	strh	r3, [r4, #32]
    obj->skip_trans = 0;
 801f17c:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 801f180:	f36f 0382 	bfc	r3, #2, #1
 801f184:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    cell_area.y2 = obj->coords.y1 + bg_top - 1 - lv_obj_get_scroll_y(obj) ;
 801f188:	f7e6 feb2 	bl	8005ef0 <lv_obj_get_scroll_y>
 801f18c:	9b07      	ldr	r3, [sp, #28]
 801f18e:	3b01      	subs	r3, #1
 801f190:	441e      	add	r6, r3
 801f192:	1a36      	subs	r6, r6, r0
    lv_coord_t scroll_x = lv_obj_get_scroll_x(obj) ;
 801f194:	4620      	mov	r0, r4
    cell_area.y2 = obj->coords.y1 + bg_top - 1 - lv_obj_get_scroll_y(obj) ;
 801f196:	80ee      	strh	r6, [r5, #6]
    lv_coord_t scroll_x = lv_obj_get_scroll_x(obj) ;
 801f198:	f7e6 fe98 	bl	8005ecc <lv_obj_get_scroll_x>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 801f19c:	f241 426a 	movw	r2, #5226	; 0x146a
 801f1a0:	4606      	mov	r6, r0
 801f1a2:	2100      	movs	r1, #0
 801f1a4:	4620      	mov	r0, r4
 801f1a6:	f7e8 f8df 	bl	8007368 <lv_obj_get_style_prop>
    lv_obj_draw_dsc_init(&dsc, clip_area);
 801f1aa:	4641      	mov	r1, r8
    return (lv_base_dir_t)v.num;
 801f1ac:	b2c3      	uxtb	r3, r0
 801f1ae:	a848      	add	r0, sp, #288	; 0x120
 801f1b0:	9305      	str	r3, [sp, #20]
 801f1b2:	f7e5 fcb9 	bl	8004b28 <lv_obj_draw_dsc_init>
    dsc.part = LV_PART_ITEMS;
 801f1b6:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 801f1ba:	9355      	str	r3, [sp, #340]	; 0x154
    dsc.rect_dsc = &rect_dsc_act;
 801f1bc:	ab3b      	add	r3, sp, #236	; 0xec
 801f1be:	934a      	str	r3, [sp, #296]	; 0x128
    dsc.label_dsc = &label_dsc_act;
 801f1c0:	ab26      	add	r3, sp, #152	; 0x98
 801f1c2:	934b      	str	r3, [sp, #300]	; 0x12c
    for(row = 0; row < table->row_cnt; row++) {
 801f1c4:	b2b3      	uxth	r3, r6
 801f1c6:	930c      	str	r3, [sp, #48]	; 0x30
 801f1c8:	fa1f f389 	uxth.w	r3, r9
 801f1cc:	930b      	str	r3, [sp, #44]	; 0x2c
 801f1ce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801f1d0:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 801f1d2:	4293      	cmp	r3, r2
 801f1d4:	d802      	bhi.n	801f1dc <draw_main+0x11c>
}
 801f1d6:	b05b      	add	sp, #364	; 0x16c
 801f1d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        lv_coord_t h_row = table->row_h[row];
 801f1dc:	fa1f f389 	uxth.w	r3, r9
 801f1e0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        cell_area.y1 = cell_area.y2 + 1;
 801f1e2:	88e9      	ldrh	r1, [r5, #6]
        lv_coord_t h_row = table->row_h[row];
 801f1e4:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
        cell_area.y1 = cell_area.y2 + 1;
 801f1e8:	1c4b      	adds	r3, r1, #1
        cell_area.y2 = cell_area.y1 + h_row - 1;
 801f1ea:	4411      	add	r1, r2
        cell_area.y1 = cell_area.y2 + 1;
 801f1ec:	b21b      	sxth	r3, r3
        cell_area.y2 = cell_area.y1 + h_row - 1;
 801f1ee:	80e9      	strh	r1, [r5, #6]
        if(cell_area.y1 > clip_area->y2) return;
 801f1f0:	f9b8 1006 	ldrsh.w	r1, [r8, #6]
        cell_area.y1 = cell_area.y2 + 1;
 801f1f4:	806b      	strh	r3, [r5, #2]
        if(cell_area.y1 > clip_area->y2) return;
 801f1f6:	4299      	cmp	r1, r3
 801f1f8:	dbed      	blt.n	801f1d6 <draw_main+0x116>
        if(rtl) cell_area.x1 = obj->coords.x2 - bg_right - 1 - scroll_x;
 801f1fa:	9b05      	ldr	r3, [sp, #20]
 801f1fc:	2b01      	cmp	r3, #1
 801f1fe:	d112      	bne.n	801f226 <draw_main+0x166>
 801f200:	9909      	ldr	r1, [sp, #36]	; 0x24
 801f202:	8b23      	ldrh	r3, [r4, #24]
 801f204:	1a5b      	subs	r3, r3, r1
 801f206:	990c      	ldr	r1, [sp, #48]	; 0x30
 801f208:	3b01      	subs	r3, #1
 801f20a:	1a5b      	subs	r3, r3, r1
 801f20c:	802b      	strh	r3, [r5, #0]
                    txt_area.y1 = cell_area.y1 + h_row / 2 - txt_size.y / 2;
 801f20e:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 801f212:	2700      	movs	r7, #0
 801f214:	f3c2 034f 	ubfx	r3, r2, #1, #16
 801f218:	930e      	str	r3, [sp, #56]	; 0x38
        for(col = 0; col < table->col_cnt; col++) {
 801f21a:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
 801f21c:	42b9      	cmp	r1, r7
 801f21e:	d80a      	bhi.n	801f236 <draw_main+0x176>
    for(row = 0; row < table->row_cnt; row++) {
 801f220:	f109 0901 	add.w	r9, r9, #1
 801f224:	e7d0      	b.n	801f1c8 <draw_main+0x108>
        else cell_area.x2 = obj->coords.x1 + bg_left - 1 - scroll_x;
 801f226:	9b08      	ldr	r3, [sp, #32]
 801f228:	8aa1      	ldrh	r1, [r4, #20]
 801f22a:	3b01      	subs	r3, #1
 801f22c:	440b      	add	r3, r1
 801f22e:	990c      	ldr	r1, [sp, #48]	; 0x30
 801f230:	1a5b      	subs	r3, r3, r1
 801f232:	80ab      	strh	r3, [r5, #4]
 801f234:	e7eb      	b.n	801f20e <draw_main+0x14e>
            if(table->cell_data[cell]) ctrl = table->cell_data[cell][0];
 801f236:	f8d4 b028 	ldr.w	fp, [r4, #40]	; 0x28
 801f23a:	ea4f 038a 	mov.w	r3, sl, lsl #2
 801f23e:	f85b 602a 	ldr.w	r6, [fp, sl, lsl #2]
 801f242:	9306      	str	r3, [sp, #24]
 801f244:	b106      	cbz	r6, 801f248 <draw_main+0x188>
 801f246:	7836      	ldrb	r6, [r6, #0]
            if(rtl) {
 801f248:	9b05      	ldr	r3, [sp, #20]
 801f24a:	f8d4 e030 	ldr.w	lr, [r4, #48]	; 0x30
 801f24e:	2b01      	cmp	r3, #1
 801f250:	f040 80b8 	bne.w	801f3c4 <draw_main+0x304>
                cell_area.x2 = cell_area.x1 - 1;
 801f254:	882b      	ldrh	r3, [r5, #0]
 801f256:	1e5a      	subs	r2, r3, #1
 801f258:	80aa      	strh	r2, [r5, #4]
                cell_area.x1 = cell_area.x2 - table->col_w[col] + 1;
 801f25a:	f83e 2017 	ldrh.w	r2, [lr, r7, lsl #1]
 801f25e:	1a9b      	subs	r3, r3, r2
 801f260:	802b      	strh	r3, [r5, #0]
            lv_table_cell_ctrl_t ctrl = 0;
 801f262:	2200      	movs	r2, #0
            for(col_merge = 0; col_merge + col < table->col_cnt - 1; col_merge++) {
 801f264:	3901      	subs	r1, #1
 801f266:	fa17 f082 	uxtah	r0, r7, r2
 801f26a:	b293      	uxth	r3, r2
 801f26c:	4288      	cmp	r0, r1
 801f26e:	469c      	mov	ip, r3
 801f270:	f2c0 80b0 	blt.w	801f3d4 <draw_main+0x314>
            if(cell_area.y2 < clip_area->y1) {
 801f274:	3301      	adds	r3, #1
 801f276:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801f27a:	b29a      	uxth	r2, r3
 801f27c:	fa1a f383 	uxtah	r3, sl, r3
 801f280:	fa1f fa83 	uxth.w	sl, r3
 801f284:	f9b8 3002 	ldrsh.w	r3, [r8, #2]
 801f288:	920d      	str	r2, [sp, #52]	; 0x34
 801f28a:	428b      	cmp	r3, r1
 801f28c:	f300 8139 	bgt.w	801f502 <draw_main+0x442>
            if((rect_dsc_def.border_side & LV_BORDER_SIDE_LEFT) && cell_area_border.x1 > obj->coords.x1 + bg_left) {
 801f290:	f89d 00d7 	ldrb.w	r0, [sp, #215]	; 0xd7
    dest->x1 = src->x1;
 801f294:	f9b5 2000 	ldrsh.w	r2, [r5]
    dest->y1 = src->y1;
 801f298:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801f29c:	f3c0 0c44 	ubfx	ip, r0, #1, #5
    dest->x2 = src->x2;
 801f2a0:	f9b5 e004 	ldrsh.w	lr, [r5, #4]
 801f2a4:	0700      	lsls	r0, r0, #28
    dest->x1 = src->x1;
 801f2a6:	f8ad 2068 	strh.w	r2, [sp, #104]	; 0x68
    dest->y1 = src->y1;
 801f2aa:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
    dest->x2 = src->x2;
 801f2ae:	f8ad e06c 	strh.w	lr, [sp, #108]	; 0x6c
    dest->y2 = src->y2;
 801f2b2:	f8ad 106e 	strh.w	r1, [sp, #110]	; 0x6e
 801f2b6:	d50d      	bpl.n	801f2d4 <draw_main+0x214>
 801f2b8:	f9b4 b014 	ldrsh.w	fp, [r4, #20]
 801f2bc:	9808      	ldr	r0, [sp, #32]
 801f2be:	4458      	add	r0, fp
 801f2c0:	4282      	cmp	r2, r0
                cell_area_border.x1 -= rect_dsc_def.border_width / 2;
 801f2c2:	bfc1      	itttt	gt
 801f2c4:	f9bd 00d4 	ldrshgt.w	r0, [sp, #212]	; 0xd4
 801f2c8:	eb00 70d0 	addgt.w	r0, r0, r0, lsr #31
 801f2cc:	eba2 0060 	subgt.w	r0, r2, r0, asr #1
 801f2d0:	f8ad 0068 	strhgt.w	r0, [sp, #104]	; 0x68
            if((rect_dsc_def.border_side & LV_BORDER_SIDE_TOP) && cell_area_border.y1 > obj->coords.y1 + bg_top) {
 801f2d4:	f01c 0f02 	tst.w	ip, #2
 801f2d8:	d00d      	beq.n	801f2f6 <draw_main+0x236>
 801f2da:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 801f2de:	9807      	ldr	r0, [sp, #28]
 801f2e0:	4402      	add	r2, r0
 801f2e2:	4293      	cmp	r3, r2
                cell_area_border.y1 -= rect_dsc_def.border_width / 2;
 801f2e4:	bfc1      	itttt	gt
 801f2e6:	f9bd 20d4 	ldrshgt.w	r2, [sp, #212]	; 0xd4
 801f2ea:	eb02 72d2 	addgt.w	r2, r2, r2, lsr #31
 801f2ee:	eba3 0362 	subgt.w	r3, r3, r2, asr #1
 801f2f2:	f8ad 306a 	strhgt.w	r3, [sp, #106]	; 0x6a
            if((rect_dsc_def.border_side & LV_BORDER_SIDE_RIGHT) && cell_area_border.x2 < obj->coords.x2 - bg_right - 1) {
 801f2f6:	f01c 0f08 	tst.w	ip, #8
 801f2fa:	d011      	beq.n	801f320 <draw_main+0x260>
 801f2fc:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
 801f300:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f302:	1a9b      	subs	r3, r3, r2
 801f304:	3b01      	subs	r3, #1
 801f306:	459e      	cmp	lr, r3
 801f308:	da0a      	bge.n	801f320 <draw_main+0x260>
                cell_area_border.x2 += rect_dsc_def.border_width / 2 + (rect_dsc_def.border_width & 0x1);
 801f30a:	f9bd 30d4 	ldrsh.w	r3, [sp, #212]	; 0xd4
 801f30e:	eb03 72d3 	add.w	r2, r3, r3, lsr #31
 801f312:	f003 0301 	and.w	r3, r3, #1
 801f316:	eb03 0362 	add.w	r3, r3, r2, asr #1
 801f31a:	449e      	add	lr, r3
 801f31c:	f8ad e06c 	strh.w	lr, [sp, #108]	; 0x6c
            if((rect_dsc_def.border_side & LV_BORDER_SIDE_BOTTOM) &&
 801f320:	f01c 0f01 	tst.w	ip, #1
 801f324:	d011      	beq.n	801f34a <draw_main+0x28a>
                    cell_area_border.y2 < obj->coords.y2 - bg_bottom - 1) {
 801f326:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 801f32a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801f32c:	1a9b      	subs	r3, r3, r2
 801f32e:	3b01      	subs	r3, #1
            if((rect_dsc_def.border_side & LV_BORDER_SIDE_BOTTOM) &&
 801f330:	4299      	cmp	r1, r3
 801f332:	da0a      	bge.n	801f34a <draw_main+0x28a>
                cell_area_border.y2 += rect_dsc_def.border_width / 2 + (rect_dsc_def.border_width & 0x1);
 801f334:	f9bd 30d4 	ldrsh.w	r3, [sp, #212]	; 0xd4
 801f338:	eb03 72d3 	add.w	r2, r3, r3, lsr #31
 801f33c:	f003 0301 	and.w	r3, r3, #1
 801f340:	eb03 0362 	add.w	r3, r3, r2, asr #1
 801f344:	4419      	add	r1, r3
 801f346:	f8ad 106e 	strh.w	r1, [sp, #110]	; 0x6e
            if(row == table->row_act && col == table->col_act) {
 801f34a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801f34c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801f34e:	4293      	cmp	r3, r2
 801f350:	d160      	bne.n	801f414 <draw_main+0x354>
 801f352:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801f354:	42bb      	cmp	r3, r7
 801f356:	d15d      	bne.n	801f414 <draw_main+0x354>
                if(!(obj->state & LV_STATE_SCROLLED) && (obj->state & LV_STATE_PRESSED)) cell_state |= LV_STATE_PRESSED;
 801f358:	8c22      	ldrh	r2, [r4, #32]
 801f35a:	f002 0360 	and.w	r3, r2, #96	; 0x60
            lv_state_t cell_state = LV_STATE_DEFAULT;
 801f35e:	2b20      	cmp	r3, #32
 801f360:	bf18      	it	ne
 801f362:	2300      	movne	r3, #0
                if(obj->state & LV_STATE_FOCUSED) cell_state |= LV_STATE_FOCUSED;
 801f364:	0790      	lsls	r0, r2, #30
 801f366:	bf48      	it	mi
 801f368:	f043 0302 	orrmi.w	r3, r3, #2
                if(obj->state & LV_STATE_FOCUS_KEY) cell_state |= LV_STATE_FOCUS_KEY;
 801f36c:	0751      	lsls	r1, r2, #29
 801f36e:	bf44      	itt	mi
 801f370:	f043 0304 	orrmi.w	r3, r3, #4
 801f374:	b29b      	uxthmi	r3, r3
                if(obj->state & LV_STATE_EDITED) cell_state |= LV_STATE_EDITED;
 801f376:	0712      	lsls	r2, r2, #28
 801f378:	d54a      	bpl.n	801f410 <draw_main+0x350>
 801f37a:	f043 0308 	orr.w	r3, r3, #8
 801f37e:	b29b      	uxth	r3, r3
                obj->state = cell_state;
 801f380:	8423      	strh	r3, [r4, #32]
                lv_draw_rect_dsc_init(&rect_dsc_act);
 801f382:	a83b      	add	r0, sp, #236	; 0xec
                obj->skip_trans = 1;
 801f384:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 801f388:	f043 0304 	orr.w	r3, r3, #4
 801f38c:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
                lv_draw_rect_dsc_init(&rect_dsc_act);
 801f390:	f7ed fb7a 	bl	800ca88 <lv_draw_rect_dsc_init>
                lv_draw_label_dsc_init(&label_dsc_act);
 801f394:	a826      	add	r0, sp, #152	; 0x98
 801f396:	f7eb f8c3 	bl	800a520 <lv_draw_label_dsc_init>
                lv_obj_init_draw_rect_dsc(obj, LV_PART_ITEMS, &rect_dsc_act);
 801f39a:	aa3b      	add	r2, sp, #236	; 0xec
 801f39c:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 801f3a0:	4620      	mov	r0, r4
 801f3a2:	f7e5 f8dd 	bl	8004560 <lv_obj_init_draw_rect_dsc>
                lv_obj_init_draw_label_dsc(obj, LV_PART_ITEMS, &label_dsc_act);
 801f3a6:	aa26      	add	r2, sp, #152	; 0x98
 801f3a8:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 801f3ac:	4620      	mov	r0, r4
 801f3ae:	f7e5 fa13 	bl	80047d8 <lv_obj_init_draw_label_dsc>
                obj->state = state_ori;
 801f3b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f3b4:	8423      	strh	r3, [r4, #32]
                obj->skip_trans = 0;
 801f3b6:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 801f3ba:	f36f 0382 	bfc	r3, #2, #1
 801f3be:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 801f3c2:	e031      	b.n	801f428 <draw_main+0x368>
                cell_area.x1 = cell_area.x2 + 1;
 801f3c4:	88ab      	ldrh	r3, [r5, #4]
 801f3c6:	1c5a      	adds	r2, r3, #1
 801f3c8:	802a      	strh	r2, [r5, #0]
                cell_area.x2 = cell_area.x1 + table->col_w[col] - 1;
 801f3ca:	f83e 2017 	ldrh.w	r2, [lr, r7, lsl #1]
 801f3ce:	4413      	add	r3, r2
 801f3d0:	80ab      	strh	r3, [r5, #4]
 801f3d2:	e746      	b.n	801f262 <draw_main+0x1a2>
                if(table->cell_data[cell + col_merge]) {
 801f3d4:	44d4      	add	ip, sl
 801f3d6:	f85b c02c 	ldr.w	ip, [fp, ip, lsl #2]
 801f3da:	f1bc 0f00 	cmp.w	ip, #0
 801f3de:	f43f af49 	beq.w	801f274 <draw_main+0x1b4>
                    if(next_cell_data) ctrl = next_cell_data[0];
 801f3e2:	f89c 6000 	ldrb.w	r6, [ip]
                    if(ctrl & LV_TABLE_CELL_CTRL_MERGE_RIGHT)
 801f3e6:	f016 0f01 	tst.w	r6, #1
 801f3ea:	f43f af43 	beq.w	801f274 <draw_main+0x1b4>
                        if(rtl) cell_area.x1 -= table->col_w[col + col_merge + 1];
 801f3ee:	3001      	adds	r0, #1
 801f3f0:	3201      	adds	r2, #1
 801f3f2:	f83e 3010 	ldrh.w	r3, [lr, r0, lsl #1]
 801f3f6:	9805      	ldr	r0, [sp, #20]
 801f3f8:	2801      	cmp	r0, #1
 801f3fa:	bf0b      	itete	eq
 801f3fc:	8828      	ldrheq	r0, [r5, #0]
                        else cell_area.x2 += table->col_w[col + col_merge + 1];
 801f3fe:	88a8      	ldrhne	r0, [r5, #4]
                        if(rtl) cell_area.x1 -= table->col_w[col + col_merge + 1];
 801f400:	1ac3      	subeq	r3, r0, r3
                        else cell_area.x2 += table->col_w[col + col_merge + 1];
 801f402:	181b      	addne	r3, r3, r0
                        if(rtl) cell_area.x1 -= table->col_w[col + col_merge + 1];
 801f404:	bf0c      	ite	eq
 801f406:	802b      	strheq	r3, [r5, #0]
                        else cell_area.x2 += table->col_w[col + col_merge + 1];
 801f408:	80ab      	strhne	r3, [r5, #4]
            for(col_merge = 0; col_merge + col < table->col_cnt - 1; col_merge++) {
 801f40a:	e72c      	b.n	801f266 <draw_main+0x1a6>
 801f40c:	fffb0000 	.word	0xfffb0000
            if(cell_state == LV_STATE_DEFAULT) {
 801f410:	2b00      	cmp	r3, #0
 801f412:	d1b5      	bne.n	801f380 <draw_main+0x2c0>
                lv_memcpy(&rect_dsc_act, &rect_dsc_def, sizeof(lv_draw_rect_dsc_t));
 801f414:	2234      	movs	r2, #52	; 0x34
 801f416:	a92e      	add	r1, sp, #184	; 0xb8
 801f418:	a83b      	add	r0, sp, #236	; 0xec
 801f41a:	f7f8 f9c5 	bl	80177a8 <lv_memcpy>
                lv_memcpy(&label_dsc_act, &label_dsc_def, sizeof(lv_draw_label_dsc_t));
 801f41e:	2220      	movs	r2, #32
 801f420:	a91e      	add	r1, sp, #120	; 0x78
 801f422:	a826      	add	r0, sp, #152	; 0x98
 801f424:	f7f8 f9c0 	bl	80177a8 <lv_memcpy>
            dsc.id = row * table->col_cnt + col;
 801f428:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
 801f42a:	fa1f f389 	uxth.w	r3, r9
            dsc.draw_area = &cell_area_border;
 801f42e:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &dsc);
 801f432:	211a      	movs	r1, #26
            dsc.id = row * table->col_cnt + col;
 801f434:	fb02 7303 	mla	r3, r2, r3, r7
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &dsc);
 801f438:	4620      	mov	r0, r4
 801f43a:	aa48      	add	r2, sp, #288	; 0x120
            dsc.draw_area = &cell_area_border;
 801f43c:	f8cd b124 	str.w	fp, [sp, #292]	; 0x124
            dsc.id = row * table->col_cnt + col;
 801f440:	9356      	str	r3, [sp, #344]	; 0x158
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &dsc);
 801f442:	f7e2 fd41 	bl	8001ec8 <lv_event_send>
            lv_draw_rect(&cell_area_border, clip_area, &rect_dsc_act);
 801f446:	aa3b      	add	r2, sp, #236	; 0xec
 801f448:	4641      	mov	r1, r8
 801f44a:	4658      	mov	r0, fp
 801f44c:	f7ed fb3e 	bl	800cacc <lv_draw_rect>
            if(table->cell_data[cell]) {
 801f450:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801f452:	9a06      	ldr	r2, [sp, #24]
 801f454:	5899      	ldr	r1, [r3, r2]
 801f456:	2900      	cmp	r1, #0
 801f458:	d04e      	beq.n	801f4f8 <draw_main+0x438>
                txt_area.x1 = cell_area.x1 + cell_left;
 801f45a:	882b      	ldrh	r3, [r5, #0]
                bool crop = ctrl & LV_TABLE_CELL_CTRL_TEXT_CROP ? true : false;
 801f45c:	f3c6 0b40 	ubfx	fp, r6, #1, #1
                txt_area.x1 = cell_area.x1 + cell_left;
 801f460:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
                else txt_flags = LV_TEXT_FLAG_NONE;
 801f462:	f006 0602 	and.w	r6, r6, #2
                txt_area.x2 = cell_area.x2 - cell_right;
 801f466:	9810      	ldr	r0, [sp, #64]	; 0x40
                lv_txt_get_size(&txt_size, table->cell_data[cell] + 1, label_dsc_def.font,
 801f468:	3101      	adds	r1, #1
                txt_area.x1 = cell_area.x1 + cell_left;
 801f46a:	4413      	add	r3, r2
 801f46c:	b29a      	uxth	r2, r3
                txt_area.x2 = cell_area.x2 - cell_right;
 801f46e:	88ab      	ldrh	r3, [r5, #4]
 801f470:	1a1b      	subs	r3, r3, r0
                txt_area.y1 = cell_area.y1 + cell_top;
 801f472:	8868      	ldrh	r0, [r5, #2]
                txt_area.x1 = cell_area.x1 + cell_left;
 801f474:	f8ad 2060 	strh.w	r2, [sp, #96]	; 0x60
                txt_area.x2 = cell_area.x2 - cell_right;
 801f478:	fa1f fc83 	uxth.w	ip, r3
                txt_area.y1 = cell_area.y1 + cell_top;
 801f47c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f47e:	4418      	add	r0, r3
                txt_area.y2 = cell_area.y2 - cell_bottom;
 801f480:	9b12      	ldr	r3, [sp, #72]	; 0x48
                txt_area.x2 = cell_area.x2 - cell_right;
 801f482:	f8ad c064 	strh.w	ip, [sp, #100]	; 0x64
                txt_area.y1 = cell_area.y1 + cell_top;
 801f486:	f8ad 0062 	strh.w	r0, [sp, #98]	; 0x62
                txt_area.y2 = cell_area.y2 - cell_bottom;
 801f48a:	88e8      	ldrh	r0, [r5, #6]
                lv_txt_get_size(&txt_size, table->cell_data[cell] + 1, label_dsc_def.font,
 801f48c:	9602      	str	r6, [sp, #8]
                txt_area.y2 = cell_area.y2 - cell_bottom;
 801f48e:	1ac0      	subs	r0, r0, r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801f490:	f10c 0301 	add.w	r3, ip, #1
 801f494:	1a9b      	subs	r3, r3, r2
 801f496:	f8ad 0066 	strh.w	r0, [sp, #102]	; 0x66
                lv_txt_get_size(&txt_size, table->cell_data[cell] + 1, label_dsc_def.font,
 801f49a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801f49c:	a815      	add	r0, sp, #84	; 0x54
 801f49e:	b21b      	sxth	r3, r3
 801f4a0:	9301      	str	r3, [sp, #4]
 801f4a2:	f9bd 30aa 	ldrsh.w	r3, [sp, #170]	; 0xaa
 801f4a6:	9300      	str	r3, [sp, #0]
 801f4a8:	f9bd 30ac 	ldrsh.w	r3, [sp, #172]	; 0xac
 801f4ac:	f7fa f853 	bl	8019556 <lv_txt_get_size>
                if(!crop) {
 801f4b0:	f1bb 0f00 	cmp.w	fp, #0
 801f4b4:	d10f      	bne.n	801f4d6 <draw_main+0x416>
                    txt_area.y1 = cell_area.y1 + h_row / 2 - txt_size.y / 2;
 801f4b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f4b8:	886b      	ldrh	r3, [r5, #2]
 801f4ba:	4413      	add	r3, r2
 801f4bc:	f9bd 2056 	ldrsh.w	r2, [sp, #86]	; 0x56
 801f4c0:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 801f4c4:	b29b      	uxth	r3, r3
 801f4c6:	f3c2 024f 	ubfx	r2, r2, #1, #16
 801f4ca:	1a99      	subs	r1, r3, r2
                    txt_area.y2 = cell_area.y1 + h_row / 2 + txt_size.y / 2;
 801f4cc:	4413      	add	r3, r2
                    txt_area.y1 = cell_area.y1 + h_row / 2 - txt_size.y / 2;
 801f4ce:	f8ad 1062 	strh.w	r1, [sp, #98]	; 0x62
                    txt_area.y2 = cell_area.y1 + h_row / 2 + txt_size.y / 2;
 801f4d2:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
                label_mask_ok = _lv_area_intersect(&label_mask, clip_area, &cell_area);
 801f4d6:	462a      	mov	r2, r5
 801f4d8:	4641      	mov	r1, r8
 801f4da:	a81c      	add	r0, sp, #112	; 0x70
 801f4dc:	f7f7 fcdb 	bl	8016e96 <_lv_area_intersect>
                if(label_mask_ok) {
 801f4e0:	b150      	cbz	r0, 801f4f8 <draw_main+0x438>
                    lv_draw_label(&txt_area, &label_mask, &label_dsc_act, table->cell_data[cell] + 1, NULL);
 801f4e2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801f4e4:	a91c      	add	r1, sp, #112	; 0x70
 801f4e6:	9a06      	ldr	r2, [sp, #24]
 801f4e8:	a818      	add	r0, sp, #96	; 0x60
 801f4ea:	589b      	ldr	r3, [r3, r2]
 801f4ec:	2200      	movs	r2, #0
 801f4ee:	3301      	adds	r3, #1
 801f4f0:	9200      	str	r2, [sp, #0]
 801f4f2:	aa26      	add	r2, sp, #152	; 0x98
 801f4f4:	f7eb f9ec 	bl	800a8d0 <lv_draw_label>
            lv_event_send(obj, LV_EVENT_DRAW_PART_END, &dsc);
 801f4f8:	aa48      	add	r2, sp, #288	; 0x120
 801f4fa:	211b      	movs	r1, #27
 801f4fc:	4620      	mov	r0, r4
 801f4fe:	f7e2 fce3 	bl	8001ec8 <lv_event_send>
        for(col = 0; col < table->col_cnt; col++) {
 801f502:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f504:	443b      	add	r3, r7
 801f506:	b29f      	uxth	r7, r3
 801f508:	e687      	b.n	801f21a <draw_main+0x15a>
 801f50a:	bf00      	nop

0801f50c <lv_table_event>:
{
 801f50c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    res = lv_obj_event_base(MY_CLASS, e);
 801f50e:	4891      	ldr	r0, [pc, #580]	; (801f754 <lv_table_event+0x248>)
{
 801f510:	460e      	mov	r6, r1
    res = lv_obj_event_base(MY_CLASS, e);
 801f512:	f7e2 fc61 	bl	8001dd8 <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 801f516:	2801      	cmp	r0, #1
 801f518:	d10c      	bne.n	801f534 <lv_table_event+0x28>
    lv_event_code_t code = lv_event_get_code(e);
 801f51a:	4630      	mov	r0, r6
 801f51c:	f7e2 fcf6 	bl	8001f0c <lv_event_get_code>
 801f520:	4605      	mov	r5, r0
    lv_obj_t * obj = lv_event_get_target(e);
 801f522:	4630      	mov	r0, r6
 801f524:	f7e2 fcf0 	bl	8001f08 <lv_event_get_target>
    if(code == LV_EVENT_STYLE_CHANGED) {
 801f528:	2d24      	cmp	r5, #36	; 0x24
    lv_obj_t * obj = lv_event_get_target(e);
 801f52a:	4604      	mov	r4, r0
    if(code == LV_EVENT_STYLE_CHANGED) {
 801f52c:	d104      	bne.n	801f538 <lv_table_event+0x2c>
        refr_size(obj, 0);
 801f52e:	2100      	movs	r1, #0
 801f530:	f7ff fd53 	bl	801efda <refr_size>
}
 801f534:	b003      	add	sp, #12
 801f536:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if(code == LV_EVENT_GET_SELF_SIZE) {
 801f538:	2d26      	cmp	r5, #38	; 0x26
 801f53a:	d11d      	bne.n	801f578 <lv_table_event+0x6c>
        lv_point_t * p = lv_event_get_param(e);
 801f53c:	4630      	mov	r0, r6
 801f53e:	f7e2 fce7 	bl	8001f10 <lv_event_get_param>
        lv_coord_t w = 0;
 801f542:	2200      	movs	r2, #0
        for(i = 0; i < table->col_cnt; i++) w += table->col_w[i];
 801f544:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
 801f546:	4613      	mov	r3, r2
 801f548:	428b      	cmp	r3, r1
 801f54a:	d307      	bcc.n	801f55c <lv_table_event+0x50>
        lv_coord_t h = 0;
 801f54c:	2300      	movs	r3, #0
        for(i = 0; i < table->row_cnt; i++) h += table->row_h[i];
 801f54e:	8ce5      	ldrh	r5, [r4, #38]	; 0x26
 801f550:	4619      	mov	r1, r3
 801f552:	42a9      	cmp	r1, r5
 801f554:	d309      	bcc.n	801f56a <lv_table_event+0x5e>
        p->x = w;
 801f556:	8002      	strh	r2, [r0, #0]
        p->y = h;
 801f558:	8043      	strh	r3, [r0, #2]
 801f55a:	e7eb      	b.n	801f534 <lv_table_event+0x28>
        for(i = 0; i < table->col_cnt; i++) w += table->col_w[i];
 801f55c:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801f55e:	f835 5013 	ldrh.w	r5, [r5, r3, lsl #1]
 801f562:	3301      	adds	r3, #1
 801f564:	442a      	add	r2, r5
 801f566:	b212      	sxth	r2, r2
 801f568:	e7ee      	b.n	801f548 <lv_table_event+0x3c>
        for(i = 0; i < table->row_cnt; i++) h += table->row_h[i];
 801f56a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801f56c:	f836 6011 	ldrh.w	r6, [r6, r1, lsl #1]
 801f570:	3101      	adds	r1, #1
 801f572:	4433      	add	r3, r6
 801f574:	b21b      	sxth	r3, r3
 801f576:	e7ec      	b.n	801f552 <lv_table_event+0x46>
    else if(code == LV_EVENT_PRESSED || code == LV_EVENT_PRESSING) {
 801f578:	1e6b      	subs	r3, r5, #1
 801f57a:	b2db      	uxtb	r3, r3
 801f57c:	2b01      	cmp	r3, #1
 801f57e:	d861      	bhi.n	801f644 <lv_table_event+0x138>

static lv_res_t get_pressed_cell(lv_obj_t * obj, uint16_t * row, uint16_t * col)
{
   lv_table_t * table = (lv_table_t *)obj;

    lv_indev_type_t type = lv_indev_get_type(lv_indev_get_act());
 801f580:	f7e2 ff38 	bl	80023f4 <lv_indev_get_act>
 801f584:	f7e2 ff3c 	bl	8002400 <lv_indev_get_type>
    if(type != LV_INDEV_TYPE_POINTER && type != LV_INDEV_TYPE_BUTTON) {
 801f588:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
 801f58c:	2801      	cmp	r0, #1
 801f58e:	d14f      	bne.n	801f630 <lv_table_event+0x124>
        if(row) *row = LV_TABLE_CELL_NONE;
        return LV_RES_INV;
    }

    lv_point_t p;
    lv_indev_get_point(lv_indev_get_act(), &p);
 801f590:	f7e2 ff30 	bl	80023f4 <lv_indev_get_act>
 801f594:	a901      	add	r1, sp, #4
 801f596:	f7e2 ff8e 	bl	80024b6 <lv_indev_get_point>

    lv_coord_t tmp;
    if(col) {
        lv_coord_t x = p.x + lv_obj_get_scroll_x(obj);
 801f59a:	f8bd 6004 	ldrh.w	r6, [sp, #4]
 801f59e:	4620      	mov	r0, r4
 801f5a0:	f7e6 fc94 	bl	8005ecc <lv_obj_get_scroll_x>
 801f5a4:	4430      	add	r0, r6
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 801f5a6:	f241 426a 	movw	r2, #5226	; 0x146a
 801f5aa:	2100      	movs	r1, #0
 801f5ac:	b285      	uxth	r5, r0
 801f5ae:	4620      	mov	r0, r4
 801f5b0:	f7e7 feda 	bl	8007368 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 801f5b4:	b2c0      	uxtb	r0, r0

        if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 801f5b6:	2801      	cmp	r0, #1
 801f5b8:	d13c      	bne.n	801f634 <lv_table_event+0x128>
            x = obj->coords.x2 - lv_obj_get_style_pad_right(obj, LV_PART_MAIN) - x;
 801f5ba:	8b26      	ldrh	r6, [r4, #24]
 801f5bc:	2100      	movs	r1, #0
 801f5be:	4620      	mov	r0, r4
 801f5c0:	1b75      	subs	r5, r6, r5
 801f5c2:	f7ff fc36 	bl	801ee32 <lv_obj_get_style_pad_right>
        }
        else {
            x -= obj->coords.x1;
            x -= lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 801f5c6:	1a28      	subs	r0, r5, r0
        }

        *col = 0;
        tmp = 0;
        for(*col = 0; *col < table->col_cnt; (*col)++) {
 801f5c8:	2300      	movs	r3, #0
 801f5ca:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
            x -= lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 801f5cc:	b200      	sxth	r0, r0
        tmp = 0;
 801f5ce:	461a      	mov	r2, r3
 801f5d0:	b29f      	uxth	r7, r3
        for(*col = 0; *col < table->col_cnt; (*col)++) {
 801f5d2:	428f      	cmp	r7, r1
 801f5d4:	d207      	bcs.n	801f5e6 <lv_table_event+0xda>
            tmp += table->col_w[*col];
 801f5d6:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801f5d8:	f835 5013 	ldrh.w	r5, [r5, r3, lsl #1]
 801f5dc:	3301      	adds	r3, #1
 801f5de:	442a      	add	r2, r5
 801f5e0:	b212      	sxth	r2, r2
            if(x < tmp) break;
 801f5e2:	4282      	cmp	r2, r0
 801f5e4:	ddf4      	ble.n	801f5d0 <lv_table_event+0xc4>
        }
    }

    if(row) {
        lv_coord_t y = p.y + lv_obj_get_scroll_y(obj);;
 801f5e6:	4620      	mov	r0, r4
 801f5e8:	f8bd 6006 	ldrh.w	r6, [sp, #6]
 801f5ec:	f7e6 fc80 	bl	8005ef0 <lv_obj_get_scroll_y>
        y -= obj->coords.y1;
 801f5f0:	8ae5      	ldrh	r5, [r4, #22]
        y -= lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 801f5f2:	2100      	movs	r1, #0
        y -= obj->coords.y1;
 801f5f4:	1b76      	subs	r6, r6, r5
 801f5f6:	4430      	add	r0, r6
 801f5f8:	b285      	uxth	r5, r0
        y -= lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 801f5fa:	4620      	mov	r0, r4
 801f5fc:	f7ff fc20 	bl	801ee40 <lv_obj_get_style_pad_top>

        *row = 0;
        tmp = 0;

        for(*row = 0; *row < table->row_cnt; (*row)++) {
 801f600:	2300      	movs	r3, #0
        y -= lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 801f602:	1a28      	subs	r0, r5, r0
        for(*row = 0; *row < table->row_cnt; (*row)++) {
 801f604:	8ce5      	ldrh	r5, [r4, #38]	; 0x26
        tmp = 0;
 801f606:	461a      	mov	r2, r3
        y -= lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 801f608:	b200      	sxth	r0, r0
        for(*row = 0; *row < table->row_cnt; (*row)++) {
 801f60a:	b299      	uxth	r1, r3
 801f60c:	42a9      	cmp	r1, r5
 801f60e:	d207      	bcs.n	801f620 <lv_table_event+0x114>
            tmp += table->row_h[*row];
 801f610:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801f612:	f836 6013 	ldrh.w	r6, [r6, r3, lsl #1]
 801f616:	3301      	adds	r3, #1
 801f618:	4432      	add	r2, r6
 801f61a:	b212      	sxth	r2, r2
            if(y < tmp) break;
 801f61c:	4290      	cmp	r0, r2
 801f61e:	daf4      	bge.n	801f60a <lv_table_event+0xfe>
        if(pr_res == LV_RES_OK && (table->col_act != col || table->row_act != row)) {
 801f620:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801f622:	42bb      	cmp	r3, r7
 801f624:	d102      	bne.n	801f62c <lv_table_event+0x120>
 801f626:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801f628:	428b      	cmp	r3, r1
 801f62a:	d001      	beq.n	801f630 <lv_table_event+0x124>
            table->col_act = col;
 801f62c:	86a7      	strh	r7, [r4, #52]	; 0x34
            table->row_act = row;
 801f62e:	86e1      	strh	r1, [r4, #54]	; 0x36
            lv_obj_invalidate(obj);
 801f630:	4620      	mov	r0, r4
 801f632:	e031      	b.n	801f698 <lv_table_event+0x18c>
            x -= obj->coords.x1;
 801f634:	8aa0      	ldrh	r0, [r4, #20]
            x -= lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 801f636:	2100      	movs	r1, #0
            x -= obj->coords.x1;
 801f638:	1a2d      	subs	r5, r5, r0
            x -= lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 801f63a:	4620      	mov	r0, r4
            x -= obj->coords.x1;
 801f63c:	b2ad      	uxth	r5, r5
            x -= lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 801f63e:	f7ff fbf1 	bl	801ee24 <lv_obj_get_style_pad_left>
 801f642:	e7c0      	b.n	801f5c6 <lv_table_event+0xba>
    else if(code == LV_EVENT_RELEASED) {
 801f644:	2d08      	cmp	r5, #8
 801f646:	d125      	bne.n	801f694 <lv_table_event+0x188>
        lv_obj_invalidate(obj);
 801f648:	f7e5 fd66 	bl	8005118 <lv_obj_invalidate>
        lv_indev_t * indev = lv_indev_get_act();
 801f64c:	f7e2 fed2 	bl	80023f4 <lv_indev_get_act>
        lv_obj_t * scroll_obj = lv_indev_get_scroll_obj(indev);
 801f650:	f7e2 ff54 	bl	80024fc <lv_indev_get_scroll_obj>
        if(table->col_act != LV_TABLE_CELL_NONE && table->row_act != LV_TABLE_CELL_NONE && scroll_obj == NULL) {
 801f654:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 801f656:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801f65a:	429a      	cmp	r2, r3
 801f65c:	d10c      	bne.n	801f678 <lv_table_event+0x16c>
        lv_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
 801f65e:	f7e2 fec9 	bl	80023f4 <lv_indev_get_act>
 801f662:	f7e2 fecd 	bl	8002400 <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_POINTER || indev_type == LV_INDEV_TYPE_BUTTON) {
 801f666:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
 801f66a:	2801      	cmp	r0, #1
 801f66c:	f47f af62 	bne.w	801f534 <lv_table_event+0x28>
            table->col_act = LV_TABLE_CELL_NONE;
 801f670:	f04f 33ff 	mov.w	r3, #4294967295
 801f674:	6363      	str	r3, [r4, #52]	; 0x34
 801f676:	e75d      	b.n	801f534 <lv_table_event+0x28>
        if(table->col_act != LV_TABLE_CELL_NONE && table->row_act != LV_TABLE_CELL_NONE && scroll_obj == NULL) {
 801f678:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801f67a:	429a      	cmp	r2, r3
 801f67c:	d0ef      	beq.n	801f65e <lv_table_event+0x152>
 801f67e:	2800      	cmp	r0, #0
 801f680:	d1ed      	bne.n	801f65e <lv_table_event+0x152>
            res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 801f682:	4602      	mov	r2, r0
 801f684:	211c      	movs	r1, #28
 801f686:	4620      	mov	r0, r4
 801f688:	f7e2 fc1e 	bl	8001ec8 <lv_event_send>
            if(res != LV_RES_OK) return;
 801f68c:	2801      	cmp	r0, #1
 801f68e:	f47f af51 	bne.w	801f534 <lv_table_event+0x28>
 801f692:	e7e4      	b.n	801f65e <lv_table_event+0x152>
    else if(code == LV_EVENT_FOCUSED) {
 801f694:	2d0e      	cmp	r5, #14
 801f696:	d102      	bne.n	801f69e <lv_table_event+0x192>
            lv_obj_invalidate(obj);
 801f698:	f7e5 fd3e 	bl	8005118 <lv_obj_invalidate>
            return;
 801f69c:	e74a      	b.n	801f534 <lv_table_event+0x28>
    } else if(code == LV_EVENT_KEY) {
 801f69e:	2d0d      	cmp	r5, #13
 801f6a0:	d150      	bne.n	801f744 <lv_table_event+0x238>
        int32_t c = *((int32_t *)lv_event_get_param(e));
 801f6a2:	4630      	mov	r0, r6
 801f6a4:	f7e2 fc34 	bl	8001f10 <lv_event_get_param>
        int32_t col = table->col_act;
 801f6a8:	8ea5      	ldrh	r5, [r4, #52]	; 0x34
        if(col == LV_TABLE_CELL_NONE || row == LV_TABLE_CELL_NONE) {
 801f6aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
        int32_t row = table->row_act;
 801f6ae:	8ee6      	ldrh	r6, [r4, #54]	; 0x36
        if(col == LV_TABLE_CELL_NONE || row == LV_TABLE_CELL_NONE) {
 801f6b0:	429d      	cmp	r5, r3
 801f6b2:	d001      	beq.n	801f6b8 <lv_table_event+0x1ac>
 801f6b4:	429e      	cmp	r6, r3
 801f6b6:	d102      	bne.n	801f6be <lv_table_event+0x1b2>
            table->col_act = 0;
 801f6b8:	2300      	movs	r3, #0
 801f6ba:	6363      	str	r3, [r4, #52]	; 0x34
 801f6bc:	e7b8      	b.n	801f630 <lv_table_event+0x124>
        if(col >= table->col_cnt) col = 0;
 801f6be:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
        if(row >= table->row_cnt) row = 0;
 801f6c0:	8ce7      	ldrh	r7, [r4, #38]	; 0x26
        int32_t c = *((int32_t *)lv_event_get_param(e));
 801f6c2:	6800      	ldr	r0, [r0, #0]
        if(col >= table->col_cnt) col = 0;
 801f6c4:	428d      	cmp	r5, r1
 801f6c6:	bf34      	ite	cc
 801f6c8:	462a      	movcc	r2, r5
 801f6ca:	2200      	movcs	r2, #0
        if(row >= table->row_cnt) row = 0;
 801f6cc:	42be      	cmp	r6, r7
 801f6ce:	bf34      	ite	cc
 801f6d0:	4633      	movcc	r3, r6
 801f6d2:	2300      	movcs	r3, #0
        if(c == LV_KEY_LEFT) col--;
 801f6d4:	2814      	cmp	r0, #20
 801f6d6:	d108      	bne.n	801f6ea <lv_table_event+0x1de>
 801f6d8:	3a01      	subs	r2, #1
        if(col >= table->col_cnt) {
 801f6da:	4291      	cmp	r1, r2
 801f6dc:	dd0a      	ble.n	801f6f4 <lv_table_event+0x1e8>
        } else if (col < 0) {
 801f6de:	1c50      	adds	r0, r2, #1
 801f6e0:	d10f      	bne.n	801f702 <lv_table_event+0x1f6>
            if(row != 0) {
 801f6e2:	b36b      	cbz	r3, 801f740 <lv_table_event+0x234>
                col = table->col_cnt - 1;
 801f6e4:	1e4a      	subs	r2, r1, #1
                row--;
 801f6e6:	3b01      	subs	r3, #1
 801f6e8:	e00b      	b.n	801f702 <lv_table_event+0x1f6>
        else if(c == LV_KEY_RIGHT) col++;
 801f6ea:	2813      	cmp	r0, #19
 801f6ec:	d11f      	bne.n	801f72e <lv_table_event+0x222>
 801f6ee:	3201      	adds	r2, #1
        if(col >= table->col_cnt) {
 801f6f0:	4291      	cmp	r1, r2
 801f6f2:	dc06      	bgt.n	801f702 <lv_table_event+0x1f6>
            if(row < table->row_cnt - 1) {
 801f6f4:	1e7a      	subs	r2, r7, #1
 801f6f6:	429a      	cmp	r2, r3
                row++;
 801f6f8:	bfc6      	itte	gt
 801f6fa:	3301      	addgt	r3, #1
                col = 0;
 801f6fc:	2200      	movgt	r2, #0
                col = table->col_cnt - 1;
 801f6fe:	f101 32ff 	addle.w	r2, r1, #4294967295
        if(row >= table->row_cnt) {
 801f702:	429f      	cmp	r7, r3
            row = table->row_cnt - 1;
 801f704:	bfd4      	ite	le
 801f706:	f107 33ff 	addle.w	r3, r7, #4294967295
        } else if(row < 0) {
 801f70a:	ea23 73e3 	bicgt.w	r3, r3, r3, asr #31
        if(table->col_act != col || table->row_act != row) {
 801f70e:	4295      	cmp	r5, r2
 801f710:	d102      	bne.n	801f718 <lv_table_event+0x20c>
 801f712:	429e      	cmp	r6, r3
 801f714:	f43f af0e 	beq.w	801f534 <lv_table_event+0x28>
            lv_obj_invalidate(obj);
 801f718:	4620      	mov	r0, r4
            table->col_act = col;
 801f71a:	86a2      	strh	r2, [r4, #52]	; 0x34
            table->row_act = row;
 801f71c:	86e3      	strh	r3, [r4, #54]	; 0x36
            lv_obj_invalidate(obj);
 801f71e:	f7e5 fcfb 	bl	8005118 <lv_obj_invalidate>
            res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 801f722:	2200      	movs	r2, #0
 801f724:	211c      	movs	r1, #28
 801f726:	4620      	mov	r0, r4
 801f728:	f7e2 fbce 	bl	8001ec8 <lv_event_send>
            if(res != LV_RES_OK) return;
 801f72c:	e702      	b.n	801f534 <lv_table_event+0x28>
        else if(c == LV_KEY_UP) row--;
 801f72e:	2811      	cmp	r0, #17
 801f730:	d101      	bne.n	801f736 <lv_table_event+0x22a>
 801f732:	3b01      	subs	r3, #1
 801f734:	e7dc      	b.n	801f6f0 <lv_table_event+0x1e4>
        else if(c == LV_KEY_DOWN) row++;
 801f736:	2812      	cmp	r0, #18
 801f738:	f47f aefc 	bne.w	801f534 <lv_table_event+0x28>
 801f73c:	3301      	adds	r3, #1
 801f73e:	e7d7      	b.n	801f6f0 <lv_table_event+0x1e4>
                col = 0;
 801f740:	461a      	mov	r2, r3
 801f742:	e7de      	b.n	801f702 <lv_table_event+0x1f6>
    } else if(code == LV_EVENT_DRAW_MAIN) {
 801f744:	2d15      	cmp	r5, #21
 801f746:	f47f aef5 	bne.w	801f534 <lv_table_event+0x28>
        draw_main(e);
 801f74a:	4630      	mov	r0, r6
 801f74c:	f7ff fcb8 	bl	801f0c0 <draw_main>
 801f750:	e6f0      	b.n	801f534 <lv_table_event+0x28>
 801f752:	bf00      	nop
 801f754:	080295d4 	.word	0x080295d4

0801f758 <pwd_char_hider_anim>:
 */
static void pwd_char_hider_anim(void * obj, int32_t x)
{
    LV_UNUSED(obj);
    LV_UNUSED(x);
}
 801f758:	4770      	bx	lr

0801f75a <lv_textarea_destructor>:
    if(ta->pwd_tmp != NULL) {
 801f75a:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
{
 801f75c:	b510      	push	{r4, lr}
 801f75e:	460c      	mov	r4, r1
    if(ta->pwd_tmp != NULL) {
 801f760:	b118      	cbz	r0, 801f76a <lv_textarea_destructor+0x10>
        lv_mem_free(ta->pwd_tmp);
 801f762:	f7f7 ffe7 	bl	8017734 <lv_mem_free>
        ta->pwd_tmp = NULL;
 801f766:	2300      	movs	r3, #0
 801f768:	62e3      	str	r3, [r4, #44]	; 0x2c
    if(ta->placeholder_txt != NULL) {
 801f76a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801f76c:	b118      	cbz	r0, 801f776 <lv_textarea_destructor+0x1c>
        lv_mem_free(ta->placeholder_txt);
 801f76e:	f7f7 ffe1 	bl	8017734 <lv_mem_free>
        ta->placeholder_txt = NULL;
 801f772:	2300      	movs	r3, #0
 801f774:	62a3      	str	r3, [r4, #40]	; 0x28
}
 801f776:	bd10      	pop	{r4, pc}

0801f778 <lv_obj_get_style_text_font.constprop.0>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 801f778:	f241 4259 	movw	r2, #5209	; 0x1459
 801f77c:	2100      	movs	r1, #0
static inline const lv_font_t * lv_obj_get_style_text_font(const struct _lv_obj_t * obj, uint32_t part)
 801f77e:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 801f780:	f7e7 fdf2 	bl	8007368 <lv_obj_get_style_prop>
}
 801f784:	bd08      	pop	{r3, pc}
	...

0801f788 <start_cursor_blink>:
        return true; /*If the accepted char list in not specified the accept the character*/
    }
}

static void start_cursor_blink(lv_obj_t * obj)
{
 801f788:	b530      	push	{r4, r5, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ANIM_TIME);
 801f78a:	2265      	movs	r2, #101	; 0x65
 801f78c:	b093      	sub	sp, #76	; 0x4c
 801f78e:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 801f792:	4604      	mov	r4, r0
 801f794:	f7e7 fde8 	bl	8007368 <lv_obj_get_style_prop>
    lv_textarea_t * ta = (lv_textarea_t *)obj;
    uint32_t blink_time = lv_obj_get_style_anim_time(obj, LV_PART_CURSOR);
    if(blink_time == 0) {
 801f798:	4605      	mov	r5, r0
 801f79a:	b958      	cbnz	r0, 801f7b4 <start_cursor_blink+0x2c>
        lv_anim_del(obj, cursor_blink_anim_cb);
 801f79c:	4911      	ldr	r1, [pc, #68]	; (801f7e4 <start_cursor_blink+0x5c>)
 801f79e:	4620      	mov	r0, r4
 801f7a0:	f7f7 fa66 	bl	8016c70 <lv_anim_del>
        ta->cursor.show = 1;
 801f7a4:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 801f7a8:	f043 0301 	orr.w	r3, r3, #1
 801f7ac:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
        lv_anim_set_values(&a, 1, 0);
        lv_anim_set_path_cb(&a, lv_anim_path_step);
        lv_anim_set_repeat_count(&a, LV_ANIM_REPEAT_INFINITE);
        lv_anim_start(&a);
    }
}
 801f7b0:	b013      	add	sp, #76	; 0x4c
 801f7b2:	bd30      	pop	{r4, r5, pc}
        lv_anim_init(&a);
 801f7b4:	a801      	add	r0, sp, #4
 801f7b6:	f7f7 fa41 	bl	8016c3c <lv_anim_init>
    a->exec_cb = exec_cb;
 801f7ba:	4b0a      	ldr	r3, [pc, #40]	; (801f7e4 <start_cursor_blink+0x5c>)
        lv_anim_start(&a);
 801f7bc:	a801      	add	r0, sp, #4
    a->var = var;
 801f7be:	9401      	str	r4, [sp, #4]
    a->exec_cb = exec_cb;
 801f7c0:	9302      	str	r3, [sp, #8]
    a->start_value = start;
 801f7c2:	2301      	movs	r3, #1
    a->time = duration;
 801f7c4:	950b      	str	r5, [sp, #44]	; 0x2c
    a->playback_time = time;
 801f7c6:	950e      	str	r5, [sp, #56]	; 0x38
    a->current_value = start;
 801f7c8:	e9cd 3308 	strd	r3, r3, [sp, #32]
    a->end_value = end;
 801f7cc:	2300      	movs	r3, #0
 801f7ce:	930a      	str	r3, [sp, #40]	; 0x28
    a->path_cb = path_cb;
 801f7d0:	4b05      	ldr	r3, [pc, #20]	; (801f7e8 <start_cursor_blink+0x60>)
 801f7d2:	9307      	str	r3, [sp, #28]
    a->repeat_cnt = cnt;
 801f7d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801f7d8:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 801f7dc:	f7f7 fa74 	bl	8016cc8 <lv_anim_start>
}
 801f7e0:	e7e6      	b.n	801f7b0 <start_cursor_blink+0x28>
 801f7e2:	bf00      	nop
 801f7e4:	0801f7ed 	.word	0x0801f7ed
 801f7e8:	08016dd3 	.word	0x08016dd3

0801f7ec <cursor_blink_anim_cb>:
{
 801f7ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if(show != ta->cursor.show) {
 801f7ee:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
 801f7f2:	f002 0401 	and.w	r4, r2, #1
 801f7f6:	428c      	cmp	r4, r1
 801f7f8:	d020      	beq.n	801f83c <cursor_blink_anim_cb+0x50>
        ta->cursor.show = show == 0 ? 0 : 1;
 801f7fa:	3900      	subs	r1, #0
        area_tmp.x1 += ta->label->coords.x1;
 801f7fc:	6a45      	ldr	r5, [r0, #36]	; 0x24
    dest->x2 = src->x2;
 801f7fe:	f9b0 7048 	ldrsh.w	r7, [r0, #72]	; 0x48
        ta->cursor.show = show == 0 ? 0 : 1;
 801f802:	bf18      	it	ne
 801f804:	2101      	movne	r1, #1
    dest->y2 = src->y2;
 801f806:	f9b0 604a 	ldrsh.w	r6, [r0, #74]	; 0x4a
        area_tmp.x1 += ta->label->coords.x1;
 801f80a:	f8b0 4044 	ldrh.w	r4, [r0, #68]	; 0x44
        ta->cursor.show = show == 0 ? 0 : 1;
 801f80e:	f361 0200 	bfi	r2, r1, #0, #1
    dest->y1 = src->y1;
 801f812:	f9b0 1046 	ldrsh.w	r1, [r0, #70]	; 0x46
 801f816:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
        area_tmp.y1 += ta->label->coords.y1;
 801f81a:	8aeb      	ldrh	r3, [r5, #22]
        area_tmp.x1 += ta->label->coords.x1;
 801f81c:	8aaa      	ldrh	r2, [r5, #20]
        area_tmp.y1 += ta->label->coords.y1;
 801f81e:	4419      	add	r1, r3
        area_tmp.y2 += ta->label->coords.y1;
 801f820:	4433      	add	r3, r6
        area_tmp.x1 += ta->label->coords.x1;
 801f822:	4414      	add	r4, r2
        area_tmp.x2 += ta->label->coords.x1;
 801f824:	443a      	add	r2, r7
        area_tmp.y1 += ta->label->coords.y1;
 801f826:	f8ad 1002 	strh.w	r1, [sp, #2]
        lv_obj_invalidate_area(obj, &area_tmp);
 801f82a:	4669      	mov	r1, sp
        area_tmp.x1 += ta->label->coords.x1;
 801f82c:	f8ad 4000 	strh.w	r4, [sp]
        area_tmp.x2 += ta->label->coords.x1;
 801f830:	f8ad 2004 	strh.w	r2, [sp, #4]
        area_tmp.y2 += ta->label->coords.y1;
 801f834:	f8ad 3006 	strh.w	r3, [sp, #6]
        lv_obj_invalidate_area(obj, &area_tmp);
 801f838:	f7e5 fc54 	bl	80050e4 <lv_obj_invalidate_area>
}
 801f83c:	b003      	add	sp, #12
 801f83e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801f840 <refr_cursor_area>:

static void refr_cursor_area(lv_obj_t * obj)
{
 801f840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f844:	4604      	mov	r4, r0
 801f846:	b089      	sub	sp, #36	; 0x24
    lv_textarea_t * ta = (lv_textarea_t *)obj;

    const lv_font_t * font = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 801f848:	f7ff ff96 	bl	801f778 <lv_obj_get_style_text_font.constprop.0>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 801f84c:	f241 425b 	movw	r2, #5211	; 0x145b
 801f850:	2100      	movs	r1, #0
 801f852:	4607      	mov	r7, r0
 801f854:	4620      	mov	r0, r4
    const char * txt = lv_label_get_text(ta->label);

    uint32_t byte_pos;
    byte_pos = _lv_txt_encoded_get_byte_id(txt, cur_pos);

    uint32_t letter = _lv_txt_encoded_next(&txt[byte_pos], NULL);
 801f856:	f8df a1f0 	ldr.w	sl, [pc, #496]	; 801fa48 <refr_cursor_area+0x208>
 801f85a:	f7e7 fd85 	bl	8007368 <lv_obj_get_style_prop>
 801f85e:	9002      	str	r0, [sp, #8]
    const char * txt = lv_label_get_text(ta->label);
 801f860:	6a60      	ldr	r0, [r4, #36]	; 0x24
    return ta->cursor.pos;
 801f862:	f8d4 b040 	ldr.w	fp, [r4, #64]	; 0x40
    const char * txt = lv_label_get_text(ta->label);
 801f866:	f7fd fe4d 	bl	801d504 <lv_label_get_text>
    byte_pos = _lv_txt_encoded_get_byte_id(txt, cur_pos);
 801f86a:	4b75      	ldr	r3, [pc, #468]	; (801fa40 <refr_cursor_area+0x200>)
 801f86c:	4659      	mov	r1, fp
    const char * txt = lv_label_get_text(ta->label);
 801f86e:	9001      	str	r0, [sp, #4]
    byte_pos = _lv_txt_encoded_get_byte_id(txt, cur_pos);
 801f870:	681b      	ldr	r3, [r3, #0]
 801f872:	4798      	blx	r3
    uint32_t letter = _lv_txt_encoded_next(&txt[byte_pos], NULL);
 801f874:	9b01      	ldr	r3, [sp, #4]
    byte_pos = _lv_txt_encoded_get_byte_id(txt, cur_pos);
 801f876:	4606      	mov	r6, r0
    uint32_t letter = _lv_txt_encoded_next(&txt[byte_pos], NULL);
 801f878:	2100      	movs	r1, #0
 801f87a:	eb03 0900 	add.w	r9, r3, r0
 801f87e:	f8da 3000 	ldr.w	r3, [sl]
 801f882:	4648      	mov	r0, r9
 801f884:	4798      	blx	r3

    lv_coord_t letter_h = lv_font_get_line_height(font);

    /*Set letter_w (set not 0 on non printable but valid chars)*/
    lv_coord_t letter_w;
    if(letter == '\0' || letter == '\n' || letter == '\r') {
 801f886:	280d      	cmp	r0, #13
    uint32_t letter = _lv_txt_encoded_next(&txt[byte_pos], NULL);
 801f888:	4680      	mov	r8, r0
    lv_coord_t letter_h = lv_font_get_line_height(font);
 801f88a:	f9b7 5008 	ldrsh.w	r5, [r7, #8]
    if(letter == '\0' || letter == '\n' || letter == '\r') {
 801f88e:	f8cd a00c 	str.w	sl, [sp, #12]
 801f892:	f200 80cf 	bhi.w	801fa34 <refr_cursor_area+0x1f4>
 801f896:	f242 4201 	movw	r2, #9217	; 0x2401
 801f89a:	40c2      	lsrs	r2, r0
 801f89c:	43d2      	mvns	r2, r2
 801f89e:	f012 0201 	ands.w	r2, r2, #1
 801f8a2:	f040 80c7 	bne.w	801fa34 <refr_cursor_area+0x1f4>
        letter_w = lv_font_get_glyph_width(font, ' ', '\0');
 801f8a6:	2120      	movs	r1, #32
    }
    else {
        /*`letter_next` parameter is '\0' to ignore kerning*/
        letter_w = lv_font_get_glyph_width(font, letter, '\0');
 801f8a8:	4638      	mov	r0, r7
 801f8aa:	f7f6 fe0b 	bl	80164c4 <lv_font_get_glyph_width>
    }

    lv_point_t letter_pos;
    lv_label_get_letter_pos(ta->label, cur_pos, &letter_pos);
 801f8ae:	aa05      	add	r2, sp, #20
 801f8b0:	4659      	mov	r1, fp
        letter_w = lv_font_get_glyph_width(font, letter, '\0');
 801f8b2:	fa0f fa80 	sxth.w	sl, r0
    lv_label_get_letter_pos(ta->label, cur_pos, &letter_pos);
 801f8b6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801f8b8:	f7fd fe26 	bl	801d508 <lv_label_get_letter_pos>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_ALIGN);
 801f8bc:	f241 425d 	movw	r2, #5213	; 0x145d
 801f8c0:	2100      	movs	r1, #0
 801f8c2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801f8c4:	f7e7 fd50 	bl	8007368 <lv_obj_get_style_prop>

    lv_text_align_t align = lv_obj_get_style_text_align(ta->label, LV_PART_MAIN);
    if(align == LV_TEXT_ALIGN_AUTO) {
 801f8c8:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 801f8cc:	d10a      	bne.n	801f8e4 <refr_cursor_area+0xa4>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 801f8ce:	4601      	mov	r1, r0
 801f8d0:	f241 426a 	movw	r2, #5226	; 0x146a
 801f8d4:	4620      	mov	r0, r4
 801f8d6:	f7e7 fd47 	bl	8007368 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 801f8da:	b2c0      	uxtb	r0, r0
       if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) align = LV_TEXT_ALIGN_RIGHT;
       else align = LV_TEXT_ALIGN_LEFT;
 801f8dc:	2801      	cmp	r0, #1
 801f8de:	bf0c      	ite	eq
 801f8e0:	2003      	moveq	r0, #3
 801f8e2:	2001      	movne	r0, #1
    }

    /*If the cursor is out of the text (most right) draw it to the next line*/
    if(letter_pos.x + ta->label->coords.x1 + letter_w > ta->label->coords.x2 && ta->one_line == 0 && align != LV_TEXT_ALIGN_RIGHT) {
 801f8e4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801f8e6:	b2ad      	uxth	r5, r5
 801f8e8:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 801f8ec:	f9b1 c014 	ldrsh.w	ip, [r1, #20]
 801f8f0:	f9b1 1018 	ldrsh.w	r1, [r1, #24]
 801f8f4:	4462      	add	r2, ip
 801f8f6:	4452      	add	r2, sl
 801f8f8:	428a      	cmp	r2, r1
 801f8fa:	dd2e      	ble.n	801f95a <refr_cursor_area+0x11a>
 801f8fc:	f894 b05c 	ldrb.w	fp, [r4, #92]	; 0x5c
 801f900:	f01b 0b08 	ands.w	fp, fp, #8
 801f904:	d129      	bne.n	801f95a <refr_cursor_area+0x11a>
 801f906:	2803      	cmp	r0, #3
 801f908:	d027      	beq.n	801f95a <refr_cursor_area+0x11a>
        letter_pos.x = 0;
        letter_pos.y += letter_h + line_space;
 801f90a:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 801f90e:	9b02      	ldr	r3, [sp, #8]
        letter_pos.x = 0;
 801f910:	f8ad b014 	strh.w	fp, [sp, #20]
        letter_pos.y += letter_h + line_space;
 801f914:	4403      	add	r3, r0
 801f916:	4618      	mov	r0, r3
 801f918:	4428      	add	r0, r5
 801f91a:	f8ad 0016 	strh.w	r0, [sp, #22]

        if(letter != '\0') {
 801f91e:	f1b8 0f00 	cmp.w	r8, #0
 801f922:	d013      	beq.n	801f94c <refr_cursor_area+0x10c>
            byte_pos += _lv_txt_encoded_size(&txt[byte_pos]);
 801f924:	4b47      	ldr	r3, [pc, #284]	; (801fa44 <refr_cursor_area+0x204>)
 801f926:	4648      	mov	r0, r9
 801f928:	681b      	ldr	r3, [r3, #0]
 801f92a:	4798      	blx	r3
            letter = _lv_txt_encoded_next(&txt[byte_pos], NULL);
 801f92c:	9a01      	ldr	r2, [sp, #4]
            byte_pos += _lv_txt_encoded_size(&txt[byte_pos]);
 801f92e:	4406      	add	r6, r0
            letter = _lv_txt_encoded_next(&txt[byte_pos], NULL);
 801f930:	9b03      	ldr	r3, [sp, #12]
 801f932:	4659      	mov	r1, fp
 801f934:	4432      	add	r2, r6
 801f936:	681b      	ldr	r3, [r3, #0]
 801f938:	4610      	mov	r0, r2
 801f93a:	4798      	blx	r3
        }

        if(letter == '\0' || letter == '\n' || letter == '\r') {
 801f93c:	280d      	cmp	r0, #13
            letter = _lv_txt_encoded_next(&txt[byte_pos], NULL);
 801f93e:	4601      	mov	r1, r0
        if(letter == '\0' || letter == '\n' || letter == '\r') {
 801f940:	d87b      	bhi.n	801fa3a <refr_cursor_area+0x1fa>
 801f942:	f242 4301 	movw	r3, #9217	; 0x2401
 801f946:	40c3      	lsrs	r3, r0
 801f948:	07db      	lsls	r3, r3, #31
 801f94a:	d576      	bpl.n	801fa3a <refr_cursor_area+0x1fa>
            letter_w = lv_font_get_glyph_width(font, ' ', '\0');
 801f94c:	2200      	movs	r2, #0
 801f94e:	2120      	movs	r1, #32
        }
        else {
            letter_w = lv_font_get_glyph_width(font, letter, '\0');
 801f950:	4638      	mov	r0, r7
 801f952:	f7f6 fdb7 	bl	80164c4 <lv_font_get_glyph_width>
 801f956:	fa0f fa80 	sxth.w	sl, r0
        }
    }

    /*Save the byte position. It is required to draw `LV_CURSOR_BLOCK`*/
    ta->cursor.txt_byte_pos = byte_pos;
 801f95a:	64e6      	str	r6, [r4, #76]	; 0x4c
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801f95c:	f241 0210 	movw	r2, #4112	; 0x1010
 801f960:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 801f964:	4620      	mov	r0, r4
 801f966:	f7e7 fcff 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801f96a:	f241 0211 	movw	r2, #4113	; 0x1011
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801f96e:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801f970:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 801f974:	4620      	mov	r0, r4
 801f976:	f7e7 fcf7 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801f97a:	f241 0212 	movw	r2, #4114	; 0x1012
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801f97e:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801f980:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 801f984:	4620      	mov	r0, r4
 801f986:	f7e7 fcef 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801f98a:	f241 0213 	movw	r2, #4115	; 0x1013
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801f98e:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801f990:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 801f994:	4620      	mov	r0, r4
 801f996:	f7e7 fce7 	bl	8007368 <lv_obj_get_style_prop>
    lv_coord_t bottom = lv_obj_get_style_pad_bottom(obj, LV_PART_CURSOR);
    lv_coord_t left = lv_obj_get_style_pad_left(obj, LV_PART_CURSOR);
    lv_coord_t right = lv_obj_get_style_pad_right(obj, LV_PART_CURSOR);

    lv_area_t cur_area;
    cur_area.x1 = letter_pos.x - left;
 801f99a:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    cur_area.y1 = letter_pos.y - top;
 801f99e:	f8bd 1016 	ldrh.w	r1, [sp, #22]
    cur_area.x2 = letter_pos.x + right + letter_w - 1;
 801f9a2:	4410      	add	r0, r2
    cur_area.x1 = letter_pos.x - left;
 801f9a4:	eba2 0808 	sub.w	r8, r2, r8
    cur_area.y1 = letter_pos.y - top;
 801f9a8:	1bcf      	subs	r7, r1, r7
    cur_area.y2 = letter_pos.y + bottom + letter_h - 1;
 801f9aa:	4489      	add	r9, r1
    cur_area.x2 = letter_pos.x + right + letter_w - 1;
 801f9ac:	1e46      	subs	r6, r0, #1
 801f9ae:	f9b4 1046 	ldrsh.w	r1, [r4, #70]	; 0x46

    /*Save the new area*/
    lv_area_t area_tmp;
    lv_area_copy(&area_tmp, &ta->cursor.area);
    area_tmp.x1 += ta->label->coords.x1;
 801f9b2:	f8b4 0044 	ldrh.w	r0, [r4, #68]	; 0x44
    cur_area.y2 = letter_pos.y + bottom + letter_h - 1;
 801f9b6:	f109 39ff 	add.w	r9, r9, #4294967295
    cur_area.x2 = letter_pos.x + right + letter_w - 1;
 801f9ba:	eb06 030a 	add.w	r3, r6, sl
    dest->x2 = src->x2;
 801f9be:	f9b4 e048 	ldrsh.w	lr, [r4, #72]	; 0x48
    dest->y2 = src->y2;
 801f9c2:	f9b4 c04a 	ldrsh.w	ip, [r4, #74]	; 0x4a
    cur_area.x1 = letter_pos.x - left;
 801f9c6:	fa1f f888 	uxth.w	r8, r8
    cur_area.x2 = letter_pos.x + right + letter_w - 1;
 801f9ca:	b29e      	uxth	r6, r3
    area_tmp.x1 += ta->label->coords.x1;
 801f9cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
    cur_area.y1 = letter_pos.y - top;
 801f9ce:	b2bf      	uxth	r7, r7
    cur_area.y2 = letter_pos.y + bottom + letter_h - 1;
 801f9d0:	444d      	add	r5, r9
    area_tmp.x1 += ta->label->coords.x1;
 801f9d2:	8a9a      	ldrh	r2, [r3, #20]
    area_tmp.y1 += ta->label->coords.y1;
 801f9d4:	8adb      	ldrh	r3, [r3, #22]
    cur_area.y2 = letter_pos.y + bottom + letter_h - 1;
 801f9d6:	b2ad      	uxth	r5, r5
    area_tmp.x1 += ta->label->coords.x1;
 801f9d8:	4410      	add	r0, r2
    area_tmp.x2 += ta->label->coords.x1;
 801f9da:	4472      	add	r2, lr
    area_tmp.y1 += ta->label->coords.y1;
 801f9dc:	4419      	add	r1, r3
    area_tmp.y2 += ta->label->coords.y1;
 801f9de:	4463      	add	r3, ip
    area_tmp.x1 += ta->label->coords.x1;
 801f9e0:	f8ad 0018 	strh.w	r0, [sp, #24]
    lv_obj_invalidate_area(obj, &area_tmp);
 801f9e4:	4620      	mov	r0, r4
    area_tmp.y1 += ta->label->coords.y1;
 801f9e6:	f8ad 101a 	strh.w	r1, [sp, #26]
    lv_obj_invalidate_area(obj, &area_tmp);
 801f9ea:	a906      	add	r1, sp, #24
    area_tmp.x2 += ta->label->coords.x1;
 801f9ec:	f8ad 201c 	strh.w	r2, [sp, #28]
    area_tmp.y2 += ta->label->coords.y1;
 801f9f0:	f8ad 301e 	strh.w	r3, [sp, #30]
    lv_obj_invalidate_area(obj, &area_tmp);
 801f9f4:	f7e5 fb76 	bl	80050e4 <lv_obj_invalidate_area>

    lv_area_copy(&ta->cursor.area, &cur_area);

    lv_area_copy(&area_tmp, &ta->cursor.area);
    area_tmp.x1 += ta->label->coords.x1;
 801f9f8:	6a62      	ldr	r2, [r4, #36]	; 0x24
    area_tmp.y1 += ta->label->coords.y1;
    area_tmp.x2 += ta->label->coords.x1;
    area_tmp.y2 += ta->label->coords.y1;
    lv_obj_invalidate_area(obj, &area_tmp);
 801f9fa:	a906      	add	r1, sp, #24
    dest->x1 = src->x1;
 801f9fc:	f8a4 8044 	strh.w	r8, [r4, #68]	; 0x44
 801fa00:	4620      	mov	r0, r4
    area_tmp.x1 += ta->label->coords.x1;
 801fa02:	8a93      	ldrh	r3, [r2, #20]
    dest->y1 = src->y1;
 801fa04:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
    area_tmp.y1 += ta->label->coords.y1;
 801fa08:	8ad2      	ldrh	r2, [r2, #22]
    area_tmp.x1 += ta->label->coords.x1;
 801fa0a:	4498      	add	r8, r3
    dest->x2 = src->x2;
 801fa0c:	f8a4 6048 	strh.w	r6, [r4, #72]	; 0x48
    area_tmp.x2 += ta->label->coords.x1;
 801fa10:	441e      	add	r6, r3
    area_tmp.y1 += ta->label->coords.y1;
 801fa12:	4417      	add	r7, r2
    dest->y2 = src->y2;
 801fa14:	f8a4 504a 	strh.w	r5, [r4, #74]	; 0x4a
    area_tmp.y2 += ta->label->coords.y1;
 801fa18:	4415      	add	r5, r2
    area_tmp.x1 += ta->label->coords.x1;
 801fa1a:	f8ad 8018 	strh.w	r8, [sp, #24]
    area_tmp.y1 += ta->label->coords.y1;
 801fa1e:	f8ad 701a 	strh.w	r7, [sp, #26]
    area_tmp.x2 += ta->label->coords.x1;
 801fa22:	f8ad 601c 	strh.w	r6, [sp, #28]
    area_tmp.y2 += ta->label->coords.y1;
 801fa26:	f8ad 501e 	strh.w	r5, [sp, #30]
    lv_obj_invalidate_area(obj, &area_tmp);
 801fa2a:	f7e5 fb5b 	bl	80050e4 <lv_obj_invalidate_area>
}
 801fa2e:	b009      	add	sp, #36	; 0x24
 801fa30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        letter_w = lv_font_get_glyph_width(font, letter, '\0');
 801fa34:	2200      	movs	r2, #0
 801fa36:	4641      	mov	r1, r8
 801fa38:	e736      	b.n	801f8a8 <refr_cursor_area+0x68>
            letter_w = lv_font_get_glyph_width(font, letter, '\0');
 801fa3a:	2200      	movs	r2, #0
 801fa3c:	e788      	b.n	801f950 <refr_cursor_area+0x110>
 801fa3e:	bf00      	nop
 801fa40:	20000038 	.word	0x20000038
 801fa44:	20000048 	.word	0x20000048
 801fa48:	20000040 	.word	0x20000040

0801fa4c <pwd_char_hider>:
{
 801fa4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    if(ta->pwd_mode != 0) {
 801fa50:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
{
 801fa54:	4606      	mov	r6, r0
    if(ta->pwd_mode != 0) {
 801fa56:	075b      	lsls	r3, r3, #29
 801fa58:	d535      	bpl.n	801fac6 <pwd_char_hider+0x7a>
        char * txt  = lv_label_get_text(ta->label);
 801fa5a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801fa5c:	f7fd fd52 	bl	801d504 <lv_label_get_text>
        int32_t enc_len = _lv_txt_get_encoded_length(txt);
 801fa60:	4b1e      	ldr	r3, [pc, #120]	; (801fadc <pwd_char_hider+0x90>)
 801fa62:	681b      	ldr	r3, [r3, #0]
 801fa64:	4798      	blx	r3
        if(enc_len == 0) return;
 801fa66:	4605      	mov	r5, r0
 801fa68:	b368      	cbz	r0, 801fac6 <pwd_char_hider+0x7a>
        const lv_font_t * font = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 801fa6a:	4630      	mov	r0, r6
        for(i = 0; i < enc_len; i++) {
 801fa6c:	f04f 0900 	mov.w	r9, #0
        const lv_font_t * font = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 801fa70:	f7ff fe82 	bl	801f778 <lv_obj_get_style_text_font.constprop.0>
        has_bullet = lv_font_get_glyph_dsc(font, &g, LV_TEXTAREA_PWD_BULLET_UNICODE, 0);
 801fa74:	a901      	add	r1, sp, #4
 801fa76:	2300      	movs	r3, #0
 801fa78:	f242 0222 	movw	r2, #8226	; 0x2022
 801fa7c:	f7f6 fd1c 	bl	80164b8 <lv_font_get_glyph_dsc>
        else bullet = "*";
 801fa80:	4a17      	ldr	r2, [pc, #92]	; (801fae0 <pwd_char_hider+0x94>)
 801fa82:	4b18      	ldr	r3, [pc, #96]	; (801fae4 <pwd_char_hider+0x98>)
 801fa84:	2800      	cmp	r0, #0
 801fa86:	bf14      	ite	ne
 801fa88:	4690      	movne	r8, r2
 801fa8a:	4698      	moveq	r8, r3
        size_t bullet_len = strlen(bullet);
 801fa8c:	4640      	mov	r0, r8
 801fa8e:	f7e0 fc19 	bl	80002c4 <strlen>
 801fa92:	4604      	mov	r4, r0
        char * txt_tmp = lv_mem_buf_get(enc_len * bullet_len + 1);
 801fa94:	4368      	muls	r0, r5
 801fa96:	3001      	adds	r0, #1
 801fa98:	f7f7 fffe 	bl	8017a98 <lv_mem_buf_get>
 801fa9c:	4607      	mov	r7, r0
        for(i = 0; i < enc_len; i++) {
 801fa9e:	4682      	mov	sl, r0
 801faa0:	454d      	cmp	r5, r9
 801faa2:	4650      	mov	r0, sl
 801faa4:	44a2      	add	sl, r4
 801faa6:	dc11      	bgt.n	801facc <pwd_char_hider+0x80>
        txt_tmp[i * bullet_len] = '\0';
 801faa8:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 801faac:	2300      	movs	r3, #0
        lv_label_set_text(ta->label, txt_tmp);
 801faae:	4639      	mov	r1, r7
        txt_tmp[i * bullet_len] = '\0';
 801fab0:	436c      	muls	r4, r5
 801fab2:	553b      	strb	r3, [r7, r4]
        lv_label_set_text(ta->label, txt_tmp);
 801fab4:	6a70      	ldr	r0, [r6, #36]	; 0x24
 801fab6:	f7fd fc73 	bl	801d3a0 <lv_label_set_text>
        lv_mem_buf_release(txt_tmp);
 801faba:	4638      	mov	r0, r7
 801fabc:	f7f7 fe48 	bl	8017750 <lv_mem_buf_release>
        refr_cursor_area(obj);
 801fac0:	4630      	mov	r0, r6
 801fac2:	f7ff febd 	bl	801f840 <refr_cursor_area>
}
 801fac6:	b004      	add	sp, #16
 801fac8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            lv_memcpy(&txt_tmp[i * bullet_len], bullet, bullet_len);
 801facc:	4622      	mov	r2, r4
 801face:	4641      	mov	r1, r8
        for(i = 0; i < enc_len; i++) {
 801fad0:	f109 0901 	add.w	r9, r9, #1
            lv_memcpy(&txt_tmp[i * bullet_len], bullet, bullet_len);
 801fad4:	f7f7 fe68 	bl	80177a8 <lv_memcpy>
        for(i = 0; i < enc_len; i++) {
 801fad8:	e7e2      	b.n	801faa0 <pwd_char_hider+0x54>
 801fada:	bf00      	nop
 801fadc:	2000004c 	.word	0x2000004c
 801fae0:	080295f0 	.word	0x080295f0
 801fae4:	080251ed 	.word	0x080251ed

0801fae8 <pwd_char_hider_anim_ready>:
    pwd_char_hider(obj);
 801fae8:	6800      	ldr	r0, [r0, #0]
 801faea:	f7ff bfaf 	b.w	801fa4c <pwd_char_hider>
	...

0801faf0 <lv_textarea_set_cursor_pos>:
    if((uint32_t)ta->cursor.pos == (uint32_t)pos) return;
 801faf0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 801faf2:	428b      	cmp	r3, r1
{
 801faf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801faf6:	4604      	mov	r4, r0
 801faf8:	b087      	sub	sp, #28
 801fafa:	460e      	mov	r6, r1
    if((uint32_t)ta->cursor.pos == (uint32_t)pos) return;
 801fafc:	d053      	beq.n	801fba6 <lv_textarea_set_cursor_pos+0xb6>
    uint32_t len = _lv_txt_get_encoded_length(lv_label_get_text(ta->label));
 801fafe:	4b2b      	ldr	r3, [pc, #172]	; (801fbac <lv_textarea_set_cursor_pos+0xbc>)
 801fb00:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801fb02:	681d      	ldr	r5, [r3, #0]
 801fb04:	f7fd fcfe 	bl	801d504 <lv_label_get_text>
 801fb08:	47a8      	blx	r5
    if(pos < 0) pos = len + pos;
 801fb0a:	2e00      	cmp	r6, #0
    if(pos > (int32_t)len || pos == LV_TEXTAREA_CURSOR_LAST) pos = len;
 801fb0c:	4605      	mov	r5, r0
    if(pos < 0) pos = len + pos;
 801fb0e:	bfb8      	it	lt
 801fb10:	1836      	addlt	r6, r6, r0
    if(pos > (int32_t)len || pos == LV_TEXTAREA_CURSOR_LAST) pos = len;
 801fb12:	42b0      	cmp	r0, r6
 801fb14:	db04      	blt.n	801fb20 <lv_textarea_set_cursor_pos+0x30>
 801fb16:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801fb1a:	429e      	cmp	r6, r3
 801fb1c:	bf18      	it	ne
 801fb1e:	4635      	movne	r5, r6
    ta->cursor.pos = pos;
 801fb20:	6425      	str	r5, [r4, #64]	; 0x40
	const lv_font_t * font = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 801fb22:	4620      	mov	r0, r4
 801fb24:	f7ff fe28 	bl	801f778 <lv_obj_get_style_text_font.constprop.0>
	lv_label_get_letter_pos(ta->label, pos, &cur_pos);
 801fb28:	aa01      	add	r2, sp, #4
	const lv_font_t * font = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 801fb2a:	4606      	mov	r6, r0
	lv_label_get_letter_pos(ta->label, pos, &cur_pos);
 801fb2c:	4629      	mov	r1, r5
 801fb2e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801fb30:	f7fd fcea 	bl	801d508 <lv_label_get_letter_pos>
	lv_obj_get_coords(obj, &ta_cords);
 801fb34:	a904      	add	r1, sp, #16
 801fb36:	4620      	mov	r0, r4
 801fb38:	f7e5 f949 	bl	8004dce <lv_obj_get_coords>
	lv_obj_get_coords(ta->label, &label_cords);
 801fb3c:	a902      	add	r1, sp, #8
 801fb3e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801fb40:	f7e5 f945 	bl	8004dce <lv_obj_get_coords>
	lv_obj_update_layout(obj);
 801fb44:	4620      	mov	r0, r4
 801fb46:	f7e5 ff4f 	bl	80059e8 <lv_obj_update_layout>
	lv_coord_t font_h = lv_font_get_line_height(font);
 801fb4a:	f9b6 5008 	ldrsh.w	r5, [r6, #8]
	if(cur_pos.y < lv_obj_get_scroll_top(obj)) {
 801fb4e:	f9bd 6006 	ldrsh.w	r6, [sp, #6]
 801fb52:	4620      	mov	r0, r4
 801fb54:	f7e6 f9de 	bl	8005f14 <lv_obj_get_scroll_top>
 801fb58:	4286      	cmp	r6, r0
 801fb5a:	da05      	bge.n	801fb68 <lv_textarea_set_cursor_pos+0x78>
		lv_obj_scroll_to_y(obj, cur_pos.y, LV_ANIM_ON);
 801fb5c:	2201      	movs	r2, #1
 801fb5e:	f9bd 1006 	ldrsh.w	r1, [sp, #6]
 801fb62:	4620      	mov	r0, r4
 801fb64:	f7e6 fd1c 	bl	80065a0 <lv_obj_scroll_to_y>
	lv_coord_t h = lv_obj_get_content_height(obj);
 801fb68:	4620      	mov	r0, r4
 801fb6a:	f7e5 f9a6 	bl	8004eba <lv_obj_get_content_height>
	if(cur_pos.y + font_h - lv_obj_get_scroll_top(obj) > h) {
 801fb6e:	f9bd 6006 	ldrsh.w	r6, [sp, #6]
	lv_coord_t h = lv_obj_get_content_height(obj);
 801fb72:	4607      	mov	r7, r0
	if(cur_pos.y + font_h - lv_obj_get_scroll_top(obj) > h) {
 801fb74:	4620      	mov	r0, r4
 801fb76:	442e      	add	r6, r5
 801fb78:	f7e6 f9cc 	bl	8005f14 <lv_obj_get_scroll_top>
 801fb7c:	1a36      	subs	r6, r6, r0
 801fb7e:	42be      	cmp	r6, r7
 801fb80:	dd08      	ble.n	801fb94 <lv_textarea_set_cursor_pos+0xa4>
		lv_obj_scroll_to_y(obj, cur_pos.y - h + font_h, LV_ANIM_ON);
 801fb82:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801fb86:	2201      	movs	r2, #1
 801fb88:	4405      	add	r5, r0
 801fb8a:	4620      	mov	r0, r4
 801fb8c:	1be9      	subs	r1, r5, r7
 801fb8e:	b209      	sxth	r1, r1
 801fb90:	f7e6 fd06 	bl	80065a0 <lv_obj_scroll_to_y>
    ta->cursor.valid_x = cur_pos.x;
 801fb94:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    start_cursor_blink(obj);
 801fb98:	4620      	mov	r0, r4
    ta->cursor.valid_x = cur_pos.x;
 801fb9a:	87a3      	strh	r3, [r4, #60]	; 0x3c
    start_cursor_blink(obj);
 801fb9c:	f7ff fdf4 	bl	801f788 <start_cursor_blink>
    refr_cursor_area(obj);
 801fba0:	4620      	mov	r0, r4
 801fba2:	f7ff fe4d 	bl	801f840 <refr_cursor_area>
}
 801fba6:	b007      	add	sp, #28
 801fba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fbaa:	bf00      	nop
 801fbac:	2000004c 	.word	0x2000004c

0801fbb0 <lv_textarea_constructor>:
{
 801fbb0:	b538      	push	{r3, r4, r5, lr}
    ta->pwd_show_time     = LV_TEXTAREA_DEF_PWD_SHOW_TIME;
 801fbb2:	f240 53dc 	movw	r3, #1500	; 0x5dc
    ta->pwd_tmp           = NULL;
 801fbb6:	2500      	movs	r5, #0
{
 801fbb8:	460c      	mov	r4, r1
    ta->label = lv_label_create(obj);
 801fbba:	4608      	mov	r0, r1
    ta->pwd_show_time     = LV_TEXTAREA_DEF_PWD_SHOW_TIME;
 801fbbc:	870b      	strh	r3, [r1, #56]	; 0x38
    ta->cursor.pos        = 1;	/*It will be set to zero later (with zero value lv_textarea_set_cursor_pos(obj, 0); woldn't do anything as there is no difference)*/
 801fbbe:	2301      	movs	r3, #1
    ta->pwd_tmp           = NULL;
 801fbc0:	62cd      	str	r5, [r1, #44]	; 0x2c
    ta->cursor.pos        = 1;	/*It will be set to zero later (with zero value lv_textarea_set_cursor_pos(obj, 0); woldn't do anything as there is no difference)*/
 801fbc2:	640b      	str	r3, [r1, #64]	; 0x40
    ta->cursor.show      = 1;
 801fbc4:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
    ta->cursor.valid_x    = 0;
 801fbc8:	878d      	strh	r5, [r1, #60]	; 0x3c
    ta->cursor.show      = 1;
 801fbca:	f023 0303 	bic.w	r3, r3, #3
 801fbce:	f043 0303 	orr.w	r3, r3, #3
 801fbd2:	f881 3050 	strb.w	r3, [r1, #80]	; 0x50
    ta->text_sel_en = 0;
 801fbd6:	f891 305c 	ldrb.w	r3, [r1, #92]	; 0x5c
 801fbda:	f023 030e 	bic.w	r3, r3, #14
    ta->max_length        = 0;
 801fbde:	e9c1 550c 	strd	r5, r5, [r1, #48]	; 0x30
    ta->text_sel_en = 0;
 801fbe2:	f881 305c 	strb.w	r3, [r1, #92]	; 0x5c
    ta->placeholder_txt = NULL;
 801fbe6:	e9c1 5509 	strd	r5, r5, [r1, #36]	; 0x24
    ta->label = lv_label_create(obj);
 801fbea:	f7fd fbcd 	bl	801d388 <lv_label_create>
    lv_obj_set_width(ta->label, lv_pct(100));
 801fbee:	f242 0164 	movw	r1, #8292	; 0x2064
    ta->label = lv_label_create(obj);
 801fbf2:	6260      	str	r0, [r4, #36]	; 0x24
    lv_obj_set_width(ta->label, lv_pct(100));
 801fbf4:	f7e4 ffea 	bl	8004bcc <lv_obj_set_width>
    lv_label_set_text(ta->label, "");
 801fbf8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801fbfa:	4908      	ldr	r1, [pc, #32]	; (801fc1c <lv_textarea_constructor+0x6c>)
 801fbfc:	f7fd fbd0 	bl	801d3a0 <lv_label_set_text>
    lv_obj_add_flag(obj, LV_OBJ_FLAG_SCROLL_ON_FOCUS);
 801fc00:	4620      	mov	r0, r4
 801fc02:	f44f 7100 	mov.w	r1, #512	; 0x200
 801fc06:	f7e4 f87f 	bl	8003d08 <lv_obj_add_flag>
    lv_textarea_set_cursor_pos(obj, 0);
 801fc0a:	4620      	mov	r0, r4
 801fc0c:	4629      	mov	r1, r5
 801fc0e:	f7ff ff6f 	bl	801faf0 <lv_textarea_set_cursor_pos>
    start_cursor_blink(obj);
 801fc12:	4620      	mov	r0, r4
}
 801fc14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    start_cursor_blink(obj);
 801fc18:	f7ff bdb6 	b.w	801f788 <start_cursor_blink>
 801fc1c:	0802964b 	.word	0x0802964b

0801fc20 <lv_textarea_set_cursor_click_pos>:
    ta->cursor.click_pos = en ? 1 : 0;
 801fc20:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 801fc24:	f361 0341 	bfi	r3, r1, #1, #1
 801fc28:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
}
 801fc2c:	4770      	bx	lr

0801fc2e <lv_textarea_set_one_line>:
    if(ta->one_line == en) return;
 801fc2e:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 801fc32:	f3c3 02c0 	ubfx	r2, r3, #3, #1
 801fc36:	428a      	cmp	r2, r1
{
 801fc38:	b570      	push	{r4, r5, r6, lr}
 801fc3a:	4604      	mov	r4, r0
    if(ta->one_line == en) return;
 801fc3c:	d029      	beq.n	801fc92 <lv_textarea_set_one_line+0x64>
    if(en) {
 801fc3e:	b1d1      	cbz	r1, 801fc76 <lv_textarea_set_one_line+0x48>
        const lv_font_t * font = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 801fc40:	f7ff fd9a 	bl	801f778 <lv_obj_get_style_text_font.constprop.0>
        ta->one_line = 1;
 801fc44:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
        lv_coord_t font_h              = lv_font_get_line_height(font);
 801fc48:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
        lv_obj_set_width(ta->label, LV_SIZE_CONTENT);
 801fc4c:	f242 71d1 	movw	r1, #10193	; 0x27d1
        ta->one_line = 1;
 801fc50:	f043 0308 	orr.w	r3, r3, #8
        lv_obj_set_width(ta->label, LV_SIZE_CONTENT);
 801fc54:	6a60      	ldr	r0, [r4, #36]	; 0x24
        ta->one_line = 1;
 801fc56:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
        lv_obj_set_width(ta->label, LV_SIZE_CONTENT);
 801fc5a:	f7e4 ffb7 	bl	8004bcc <lv_obj_set_width>
        lv_obj_set_content_height(obj, font_h);
 801fc5e:	4629      	mov	r1, r5
 801fc60:	4620      	mov	r0, r4
 801fc62:	f7e4 fff2 	bl	8004c4a <lv_obj_set_content_height>
        lv_obj_scroll_to(obj, 0, 0, LV_ANIM_OFF);
 801fc66:	2300      	movs	r3, #0
 801fc68:	4620      	mov	r0, r4
 801fc6a:	461a      	mov	r2, r3
 801fc6c:	4619      	mov	r1, r3
}
 801fc6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        lv_obj_scroll_to(obj, 0, 0, LV_ANIM_OFF);
 801fc72:	f7e6 bcbd 	b.w	80065f0 <lv_obj_scroll_to>
        ta->one_line = 0;
 801fc76:	f361 03c3 	bfi	r3, r1, #3, #1
        lv_obj_set_width(ta->label, lv_pct(100));
 801fc7a:	f242 0164 	movw	r1, #8292	; 0x2064
        ta->one_line = 0;
 801fc7e:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
        lv_obj_set_width(ta->label, lv_pct(100));
 801fc82:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801fc84:	f7e4 ffa2 	bl	8004bcc <lv_obj_set_width>
        lv_obj_set_height(obj, LV_DPI_DEF);
 801fc88:	2182      	movs	r1, #130	; 0x82
 801fc8a:	4620      	mov	r0, r4
 801fc8c:	f7e4 ffb8 	bl	8004c00 <lv_obj_set_height>
        lv_obj_scroll_to(obj, 0, 0, LV_ANIM_OFF);
 801fc90:	e7e9      	b.n	801fc66 <lv_textarea_set_one_line+0x38>
}
 801fc92:	bd70      	pop	{r4, r5, r6, pc}

0801fc94 <lv_textarea_get_text>:
    if(ta->pwd_mode == 0) {
 801fc94:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 801fc98:	075b      	lsls	r3, r3, #29
 801fc9a:	d402      	bmi.n	801fca2 <lv_textarea_get_text+0xe>
        txt = lv_label_get_text(ta->label);
 801fc9c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801fc9e:	f7fd bc31 	b.w	801d504 <lv_label_get_text>
}
 801fca2:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801fca4:	4770      	bx	lr

0801fca6 <lv_textarea_get_cursor_pos>:
}
 801fca6:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801fca8:	4770      	bx	lr

0801fcaa <lv_textarea_get_one_line>:
    return ta->one_line == 0 ? false : true;
 801fcaa:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
}
 801fcae:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 801fcb2:	4770      	bx	lr

0801fcb4 <lv_textarea_clear_selection>:
{
 801fcb4:	b538      	push	{r3, r4, r5, lr}
 801fcb6:	4604      	mov	r4, r0
    if(lv_label_get_text_selection_start(ta->label) != LV_DRAW_LABEL_NO_TXT_SEL ||
 801fcb8:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801fcba:	f7fd fe16 	bl	801d8ea <lv_label_get_text_selection_start>
 801fcbe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801fcc2:	4605      	mov	r5, r0
 801fcc4:	4298      	cmp	r0, r3
 801fcc6:	d00b      	beq.n	801fce0 <lv_textarea_clear_selection+0x2c>
        lv_label_set_text_sel_start(ta->label, LV_DRAW_LABEL_NO_TXT_SEL);
 801fcc8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801fcca:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801fcce:	f7fd fc13 	bl	801d4f8 <lv_label_set_text_sel_start>
        lv_label_set_text_sel_end(ta->label, LV_DRAW_LABEL_NO_TXT_SEL);
 801fcd2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801fcd4:	f64f 71ff 	movw	r1, #65535	; 0xffff
}
 801fcd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        lv_label_set_text_sel_end(ta->label, LV_DRAW_LABEL_NO_TXT_SEL);
 801fcdc:	f7fd bc0f 	b.w	801d4fe <lv_label_set_text_sel_end>
       lv_label_get_text_selection_end(ta->label) != LV_DRAW_LABEL_NO_TXT_SEL) {
 801fce0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801fce2:	f7fd fe04 	bl	801d8ee <lv_label_get_text_selection_end>
    if(lv_label_get_text_selection_start(ta->label) != LV_DRAW_LABEL_NO_TXT_SEL ||
 801fce6:	42a8      	cmp	r0, r5
 801fce8:	d1ee      	bne.n	801fcc8 <lv_textarea_clear_selection+0x14>
}
 801fcea:	bd38      	pop	{r3, r4, r5, pc}

0801fcec <lv_textarea_add_text>:
{
 801fcec:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fcee:	4604      	mov	r4, r0
 801fcf0:	b093      	sub	sp, #76	; 0x4c
    LV_ASSERT_NULL(txt);
 801fcf2:	460d      	mov	r5, r1
 801fcf4:	b901      	cbnz	r1, 801fcf8 <lv_textarea_add_text+0xc>
 801fcf6:	e7fe      	b.n	801fcf6 <lv_textarea_add_text+0xa>
    if(ta->pwd_mode != 0) pwd_char_hider(obj); /*Make sure all the current text contains only '*'*/
 801fcf8:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 801fcfc:	075a      	lsls	r2, r3, #29
 801fcfe:	d501      	bpl.n	801fd04 <lv_textarea_add_text+0x18>
 801fd00:	f7ff fea4 	bl	801fa4c <pwd_char_hider>
    if(lv_textarea_get_accepted_chars(obj) || lv_textarea_get_max_length(obj)) {
 801fd04:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801fd06:	b90b      	cbnz	r3, 801fd0c <lv_textarea_add_text+0x20>
 801fd08:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801fd0a:	b19b      	cbz	r3, 801fd34 <lv_textarea_add_text+0x48>
        uint32_t i = 0;
 801fd0c:	2300      	movs	r3, #0
            uint32_t c = _lv_txt_encoded_next(txt, &i);
 801fd0e:	4e36      	ldr	r6, [pc, #216]	; (801fde8 <lv_textarea_add_text+0xfc>)
            lv_textarea_add_char(obj, _lv_txt_unicode_to_encoded(c));
 801fd10:	4f36      	ldr	r7, [pc, #216]	; (801fdec <lv_textarea_add_text+0x100>)
        uint32_t i = 0;
 801fd12:	9301      	str	r3, [sp, #4]
        while(txt[i] != '\0') {
 801fd14:	9b01      	ldr	r3, [sp, #4]
 801fd16:	5ceb      	ldrb	r3, [r5, r3]
 801fd18:	b90b      	cbnz	r3, 801fd1e <lv_textarea_add_text+0x32>
}
 801fd1a:	b013      	add	sp, #76	; 0x4c
 801fd1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            uint32_t c = _lv_txt_encoded_next(txt, &i);
 801fd1e:	a901      	add	r1, sp, #4
 801fd20:	6833      	ldr	r3, [r6, #0]
 801fd22:	4628      	mov	r0, r5
 801fd24:	4798      	blx	r3
            lv_textarea_add_char(obj, _lv_txt_unicode_to_encoded(c));
 801fd26:	683b      	ldr	r3, [r7, #0]
 801fd28:	4798      	blx	r3
 801fd2a:	4601      	mov	r1, r0
 801fd2c:	4620      	mov	r0, r4
 801fd2e:	f000 f885 	bl	801fe3c <lv_textarea_add_char>
 801fd32:	e7ef      	b.n	801fd14 <lv_textarea_add_text+0x28>
    lv_res_t res = insert_handler(obj, txt);
 801fd34:	4629      	mov	r1, r5
 801fd36:	4620      	mov	r0, r4
 801fd38:	f000 f862 	bl	801fe00 <insert_handler>
    if(res != LV_RES_OK) return;
 801fd3c:	2801      	cmp	r0, #1
 801fd3e:	d1ec      	bne.n	801fd1a <lv_textarea_add_text+0x2e>
    if(ta->placeholder_txt) {
 801fd40:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801fd42:	b13b      	cbz	r3, 801fd54 <lv_textarea_add_text+0x68>
        const char * txt_act = lv_label_get_text(ta->label);
 801fd44:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801fd46:	f7fd fbdd 	bl	801d504 <lv_label_get_text>
        if(txt_act[0] == '\0') lv_obj_invalidate(obj);
 801fd4a:	7803      	ldrb	r3, [r0, #0]
 801fd4c:	b913      	cbnz	r3, 801fd54 <lv_textarea_add_text+0x68>
 801fd4e:	4620      	mov	r0, r4
 801fd50:	f7e5 f9e2 	bl	8005118 <lv_obj_invalidate>
    lv_label_ins_text(ta->label, ta->cursor.pos, txt);
 801fd54:	462a      	mov	r2, r5
 801fd56:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801fd58:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801fd5a:	f7fd fdcb 	bl	801d8f4 <lv_label_ins_text>
    lv_textarea_clear_selection(obj);
 801fd5e:	4620      	mov	r0, r4
 801fd60:	f7ff ffa8 	bl	801fcb4 <lv_textarea_clear_selection>
    if(ta->pwd_mode != 0) {
 801fd64:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 801fd68:	075b      	lsls	r3, r3, #29
 801fd6a:	d518      	bpl.n	801fd9e <lv_textarea_add_text+0xb2>
        ta->pwd_tmp = lv_mem_realloc(ta->pwd_tmp, strlen(ta->pwd_tmp) + strlen(txt) + 1);
 801fd6c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 801fd6e:	4638      	mov	r0, r7
 801fd70:	f7e0 faa8 	bl	80002c4 <strlen>
 801fd74:	4606      	mov	r6, r0
 801fd76:	4628      	mov	r0, r5
 801fd78:	f7e0 faa4 	bl	80002c4 <strlen>
 801fd7c:	4430      	add	r0, r6
 801fd7e:	1c41      	adds	r1, r0, #1
 801fd80:	4638      	mov	r0, r7
 801fd82:	f7f7 fe6f 	bl	8017a64 <lv_mem_realloc>
 801fd86:	62e0      	str	r0, [r4, #44]	; 0x2c
        LV_ASSERT_MALLOC(ta->pwd_tmp);
 801fd88:	b900      	cbnz	r0, 801fd8c <lv_textarea_add_text+0xa0>
 801fd8a:	e7fe      	b.n	801fd8a <lv_textarea_add_text+0x9e>
        _lv_txt_ins(ta->pwd_tmp, ta->cursor.pos, txt);
 801fd8c:	462a      	mov	r2, r5
 801fd8e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801fd90:	f7f9 fb38 	bl	8019404 <_lv_txt_ins>
        if(ta->pwd_show_time == 0) {
 801fd94:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801fd96:	b98b      	cbnz	r3, 801fdbc <lv_textarea_add_text+0xd0>
            pwd_char_hider(obj);
 801fd98:	4620      	mov	r0, r4
 801fd9a:	f7ff fe57 	bl	801fa4c <pwd_char_hider>
    lv_textarea_set_cursor_pos(obj, lv_textarea_get_cursor_pos(obj) + _lv_txt_get_encoded_length(txt));
 801fd9e:	4b14      	ldr	r3, [pc, #80]	; (801fdf0 <lv_textarea_add_text+0x104>)
 801fda0:	4628      	mov	r0, r5
    return ta->cursor.pos;
 801fda2:	6c26      	ldr	r6, [r4, #64]	; 0x40
    lv_textarea_set_cursor_pos(obj, lv_textarea_get_cursor_pos(obj) + _lv_txt_get_encoded_length(txt));
 801fda4:	681b      	ldr	r3, [r3, #0]
 801fda6:	4798      	blx	r3
 801fda8:	1981      	adds	r1, r0, r6
 801fdaa:	4620      	mov	r0, r4
 801fdac:	f7ff fea0 	bl	801faf0 <lv_textarea_set_cursor_pos>
    lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 801fdb0:	2200      	movs	r2, #0
 801fdb2:	211c      	movs	r1, #28
 801fdb4:	4620      	mov	r0, r4
 801fdb6:	f7e2 f887 	bl	8001ec8 <lv_event_send>
 801fdba:	e7ae      	b.n	801fd1a <lv_textarea_add_text+0x2e>
            lv_anim_init(&a);
 801fdbc:	a801      	add	r0, sp, #4
 801fdbe:	f7f6 ff3d 	bl	8016c3c <lv_anim_init>
    a->exec_cb = exec_cb;
 801fdc2:	4b0c      	ldr	r3, [pc, #48]	; (801fdf4 <lv_textarea_add_text+0x108>)
            lv_anim_start(&a);
 801fdc4:	a801      	add	r0, sp, #4
    a->var = var;
 801fdc6:	9401      	str	r4, [sp, #4]
    a->exec_cb = exec_cb;
 801fdc8:	9302      	str	r3, [sp, #8]
    a->time = duration;
 801fdca:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801fdcc:	930b      	str	r3, [sp, #44]	; 0x2c
    a->start_value = start;
 801fdce:	2300      	movs	r3, #0
    a->current_value = start;
 801fdd0:	e9cd 3308 	strd	r3, r3, [sp, #32]
    a->end_value = end;
 801fdd4:	2301      	movs	r3, #1
 801fdd6:	930a      	str	r3, [sp, #40]	; 0x28
    a->path_cb = path_cb;
 801fdd8:	4b07      	ldr	r3, [pc, #28]	; (801fdf8 <lv_textarea_add_text+0x10c>)
 801fdda:	9307      	str	r3, [sp, #28]
    a->ready_cb = ready_cb;
 801fddc:	4b07      	ldr	r3, [pc, #28]	; (801fdfc <lv_textarea_add_text+0x110>)
 801fdde:	9304      	str	r3, [sp, #16]
 801fde0:	f7f6 ff72 	bl	8016cc8 <lv_anim_start>
 801fde4:	e7db      	b.n	801fd9e <lv_textarea_add_text+0xb2>
 801fde6:	bf00      	nop
 801fde8:	20000040 	.word	0x20000040
 801fdec:	20000050 	.word	0x20000050
 801fdf0:	2000004c 	.word	0x2000004c
 801fdf4:	0801f759 	.word	0x0801f759
 801fdf8:	08016dd3 	.word	0x08016dd3
 801fdfc:	0801fae9 	.word	0x0801fae9

0801fe00 <insert_handler>:
    if(code == LV_EVENT_PRESSED) lv_textarea_set_cursor_pos(obj, char_id_at_click);
#endif
}

static lv_res_t insert_handler(lv_obj_t * obj, const char * txt)
{
 801fe00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ta_insert_replace = NULL;
 801fe02:	4c0d      	ldr	r4, [pc, #52]	; (801fe38 <insert_handler+0x38>)
 801fe04:	2700      	movs	r7, #0
    lv_event_send(obj, LV_EVENT_INSERT, (char*)txt);
 801fe06:	460a      	mov	r2, r1
{
 801fe08:	460d      	mov	r5, r1
    lv_event_send(obj, LV_EVENT_INSERT, (char*)txt);
 801fe0a:	211d      	movs	r1, #29
    ta_insert_replace = NULL;
 801fe0c:	6027      	str	r7, [r4, #0]
{
 801fe0e:	4606      	mov	r6, r0
    lv_event_send(obj, LV_EVENT_INSERT, (char*)txt);
 801fe10:	f7e2 f85a 	bl	8001ec8 <lv_event_send>
    if(ta_insert_replace) {
 801fe14:	6824      	ldr	r4, [r4, #0]
 801fe16:	b164      	cbz	r4, 801fe32 <insert_handler+0x32>
        if(ta_insert_replace[0] == '\0') return LV_RES_INV; /*Drop this text*/
 801fe18:	7820      	ldrb	r0, [r4, #0]
 801fe1a:	b148      	cbz	r0, 801fe30 <insert_handler+0x30>

        /*Add the replaced text directly it's different from the original*/
        if(strcmp(ta_insert_replace, txt)) {
 801fe1c:	4629      	mov	r1, r5
 801fe1e:	4620      	mov	r0, r4
 801fe20:	f7e0 fa46 	bl	80002b0 <strcmp>
 801fe24:	b128      	cbz	r0, 801fe32 <insert_handler+0x32>
            lv_textarea_add_text(obj, ta_insert_replace);
 801fe26:	4630      	mov	r0, r6
 801fe28:	4621      	mov	r1, r4
 801fe2a:	f7ff ff5f 	bl	801fcec <lv_textarea_add_text>
            return LV_RES_INV;
 801fe2e:	4638      	mov	r0, r7
        }
    }

    return LV_RES_OK;
}
 801fe30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return LV_RES_OK;
 801fe32:	2001      	movs	r0, #1
 801fe34:	e7fc      	b.n	801fe30 <insert_handler+0x30>
 801fe36:	bf00      	nop
 801fe38:	2000ab8c 	.word	0x2000ab8c

0801fe3c <lv_textarea_add_char>:
{
 801fe3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fe3e:	b097      	sub	sp, #92	; 0x5c
    u32_buf[1] = 0;
 801fe40:	2300      	movs	r3, #0
{
 801fe42:	4604      	mov	r4, r0
 801fe44:	9101      	str	r1, [sp, #4]
    u32_buf[0] = c;
 801fe46:	9103      	str	r1, [sp, #12]
    lv_res_t res = insert_handler(obj, letter_buf);
 801fe48:	a903      	add	r1, sp, #12
    u32_buf[1] = 0;
 801fe4a:	9304      	str	r3, [sp, #16]
    lv_res_t res = insert_handler(obj, letter_buf);
 801fe4c:	f7ff ffd8 	bl	801fe00 <insert_handler>
    if(res != LV_RES_OK) return;
 801fe50:	2801      	cmp	r0, #1
 801fe52:	d149      	bne.n	801fee8 <lv_textarea_add_char+0xac>
    if(ta->one_line && (c == '\n' || c == '\r')) {
 801fe54:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 801fe58:	0719      	lsls	r1, r3, #28
 801fe5a:	d504      	bpl.n	801fe66 <lv_textarea_add_char+0x2a>
 801fe5c:	9b01      	ldr	r3, [sp, #4]
 801fe5e:	2b0a      	cmp	r3, #10
 801fe60:	d042      	beq.n	801fee8 <lv_textarea_add_char+0xac>
 801fe62:	2b0d      	cmp	r3, #13
 801fe64:	d040      	beq.n	801fee8 <lv_textarea_add_char+0xac>
    uint32_t c_uni = _lv_txt_encoded_next((const char *)&c, NULL);
 801fe66:	4d3e      	ldr	r5, [pc, #248]	; (801ff60 <lv_textarea_add_char+0x124>)
 801fe68:	2100      	movs	r1, #0
 801fe6a:	a801      	add	r0, sp, #4
 801fe6c:	682b      	ldr	r3, [r5, #0]
 801fe6e:	4798      	blx	r3
 801fe70:	4606      	mov	r6, r0
    if(ta->accepted_chars == NULL && ta->max_length == 0) return true;
 801fe72:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 801fe76:	bb6a      	cbnz	r2, 801fed4 <lv_textarea_add_char+0x98>
 801fe78:	bb6b      	cbnz	r3, 801fed6 <lv_textarea_add_char+0x9a>
    if(ta->pwd_mode != 0) pwd_char_hider(obj); /*Make sure all the current text contains only '*'*/
 801fe7a:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 801fe7e:	075a      	lsls	r2, r3, #29
 801fe80:	d502      	bpl.n	801fe88 <lv_textarea_add_char+0x4c>
 801fe82:	4620      	mov	r0, r4
 801fe84:	f7ff fde2 	bl	801fa4c <pwd_char_hider>
    if(ta->placeholder_txt) {
 801fe88:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801fe8a:	b13b      	cbz	r3, 801fe9c <lv_textarea_add_char+0x60>
        const char * txt = lv_label_get_text(ta->label);
 801fe8c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801fe8e:	f7fd fb39 	bl	801d504 <lv_label_get_text>
        if(txt[0] == '\0') lv_obj_invalidate(obj);
 801fe92:	7803      	ldrb	r3, [r0, #0]
 801fe94:	b913      	cbnz	r3, 801fe9c <lv_textarea_add_char+0x60>
 801fe96:	4620      	mov	r0, r4
 801fe98:	f7e5 f93e 	bl	8005118 <lv_obj_invalidate>
    lv_label_ins_text(ta->label, ta->cursor.pos, letter_buf); /*Insert the character*/
 801fe9c:	aa03      	add	r2, sp, #12
 801fe9e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801fea0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801fea2:	f7fd fd27 	bl	801d8f4 <lv_label_ins_text>
    lv_textarea_clear_selection(obj);                                                /*Clear selection*/
 801fea6:	4620      	mov	r0, r4
 801fea8:	f7ff ff04 	bl	801fcb4 <lv_textarea_clear_selection>
    if(ta->pwd_mode != 0) {
 801feac:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 801feb0:	075b      	lsls	r3, r3, #29
 801feb2:	d534      	bpl.n	801ff1e <lv_textarea_add_char+0xe2>
        ta->pwd_tmp = lv_mem_realloc(ta->pwd_tmp, strlen(ta->pwd_tmp) + strlen(letter_buf) + 1); /*+2: the new char + \0*/
 801feb4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801feb6:	4630      	mov	r0, r6
 801feb8:	f7e0 fa04 	bl	80002c4 <strlen>
 801febc:	4605      	mov	r5, r0
 801febe:	a803      	add	r0, sp, #12
 801fec0:	f7e0 fa00 	bl	80002c4 <strlen>
 801fec4:	4428      	add	r0, r5
 801fec6:	1c41      	adds	r1, r0, #1
 801fec8:	4630      	mov	r0, r6
 801feca:	f7f7 fdcb 	bl	8017a64 <lv_mem_realloc>
 801fece:	62e0      	str	r0, [r4, #44]	; 0x2c
        LV_ASSERT_MALLOC(ta->pwd_tmp);
 801fed0:	b9e0      	cbnz	r0, 801ff0c <lv_textarea_add_char+0xd0>
 801fed2:	e7fe      	b.n	801fed2 <lv_textarea_add_char+0x96>
    if(ta->max_length > 0 && _lv_txt_get_encoded_length(lv_textarea_get_text(obj)) >= ta->max_length) {
 801fed4:	b16b      	cbz	r3, 801fef2 <lv_textarea_add_char+0xb6>
 801fed6:	4b23      	ldr	r3, [pc, #140]	; (801ff64 <lv_textarea_add_char+0x128>)
 801fed8:	4620      	mov	r0, r4
 801feda:	681f      	ldr	r7, [r3, #0]
 801fedc:	f7ff feda 	bl	801fc94 <lv_textarea_get_text>
 801fee0:	47b8      	blx	r7
 801fee2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801fee4:	4298      	cmp	r0, r3
 801fee6:	d301      	bcc.n	801feec <lv_textarea_add_char+0xb0>
}
 801fee8:	b017      	add	sp, #92	; 0x5c
 801feea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(ta->accepted_chars) {
 801feec:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801feee:	2b00      	cmp	r3, #0
 801fef0:	d0c3      	beq.n	801fe7a <lv_textarea_add_char+0x3e>
        uint32_t i = 0;
 801fef2:	2300      	movs	r3, #0
 801fef4:	9305      	str	r3, [sp, #20]
        while(ta->accepted_chars[i] != '\0') {
 801fef6:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801fef8:	9b05      	ldr	r3, [sp, #20]
 801fefa:	5cc3      	ldrb	r3, [r0, r3]
 801fefc:	2b00      	cmp	r3, #0
 801fefe:	d0f3      	beq.n	801fee8 <lv_textarea_add_char+0xac>
            uint32_t a = _lv_txt_encoded_next(ta->accepted_chars, &i);
 801ff00:	682b      	ldr	r3, [r5, #0]
 801ff02:	a905      	add	r1, sp, #20
 801ff04:	4798      	blx	r3
            if(a == c) return true; /*Accepted*/
 801ff06:	4286      	cmp	r6, r0
 801ff08:	d1f5      	bne.n	801fef6 <lv_textarea_add_char+0xba>
 801ff0a:	e7b6      	b.n	801fe7a <lv_textarea_add_char+0x3e>
        _lv_txt_ins(ta->pwd_tmp, ta->cursor.pos, (const char *)letter_buf);
 801ff0c:	aa03      	add	r2, sp, #12
 801ff0e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801ff10:	f7f9 fa78 	bl	8019404 <_lv_txt_ins>
        if(ta->pwd_show_time == 0) {
 801ff14:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801ff16:	b96b      	cbnz	r3, 801ff34 <lv_textarea_add_char+0xf8>
            pwd_char_hider(obj);
 801ff18:	4620      	mov	r0, r4
 801ff1a:	f7ff fd97 	bl	801fa4c <pwd_char_hider>
    lv_textarea_set_cursor_pos(obj, lv_textarea_get_cursor_pos(obj) + 1);
 801ff1e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801ff20:	4620      	mov	r0, r4
 801ff22:	3101      	adds	r1, #1
 801ff24:	f7ff fde4 	bl	801faf0 <lv_textarea_set_cursor_pos>
    lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 801ff28:	2200      	movs	r2, #0
 801ff2a:	211c      	movs	r1, #28
 801ff2c:	4620      	mov	r0, r4
 801ff2e:	f7e1 ffcb 	bl	8001ec8 <lv_event_send>
 801ff32:	e7d9      	b.n	801fee8 <lv_textarea_add_char+0xac>
            lv_anim_init(&a);
 801ff34:	a805      	add	r0, sp, #20
 801ff36:	f7f6 fe81 	bl	8016c3c <lv_anim_init>
    a->exec_cb = exec_cb;
 801ff3a:	4b0b      	ldr	r3, [pc, #44]	; (801ff68 <lv_textarea_add_char+0x12c>)
            lv_anim_start(&a);
 801ff3c:	a805      	add	r0, sp, #20
    a->var = var;
 801ff3e:	9405      	str	r4, [sp, #20]
    a->exec_cb = exec_cb;
 801ff40:	9306      	str	r3, [sp, #24]
    a->time = duration;
 801ff42:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801ff44:	930f      	str	r3, [sp, #60]	; 0x3c
    a->start_value = start;
 801ff46:	2300      	movs	r3, #0
    a->current_value = start;
 801ff48:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    a->end_value = end;
 801ff4c:	2301      	movs	r3, #1
 801ff4e:	930e      	str	r3, [sp, #56]	; 0x38
    a->path_cb = path_cb;
 801ff50:	4b06      	ldr	r3, [pc, #24]	; (801ff6c <lv_textarea_add_char+0x130>)
 801ff52:	930b      	str	r3, [sp, #44]	; 0x2c
    a->ready_cb = ready_cb;
 801ff54:	4b06      	ldr	r3, [pc, #24]	; (801ff70 <lv_textarea_add_char+0x134>)
 801ff56:	9308      	str	r3, [sp, #32]
 801ff58:	f7f6 feb6 	bl	8016cc8 <lv_anim_start>
 801ff5c:	e7df      	b.n	801ff1e <lv_textarea_add_char+0xe2>
 801ff5e:	bf00      	nop
 801ff60:	20000040 	.word	0x20000040
 801ff64:	2000004c 	.word	0x2000004c
 801ff68:	0801f759 	.word	0x0801f759
 801ff6c:	08016dd3 	.word	0x08016dd3
 801ff70:	0801fae9 	.word	0x0801fae9

0801ff74 <lv_textarea_del_char>:
{
 801ff74:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if(cur_pos == 0) return;
 801ff76:	6c03      	ldr	r3, [r0, #64]	; 0x40
{
 801ff78:	4604      	mov	r4, r0
    if(cur_pos == 0) return;
 801ff7a:	2b00      	cmp	r3, #0
 801ff7c:	d04d      	beq.n	802001a <lv_textarea_del_char+0xa6>
    char del_buf[2]   = {LV_KEY_DEL, '\0'};
 801ff7e:	237f      	movs	r3, #127	; 0x7f
    lv_res_t res = insert_handler(obj, del_buf);
 801ff80:	a903      	add	r1, sp, #12
    char del_buf[2]   = {LV_KEY_DEL, '\0'};
 801ff82:	f8ad 300c 	strh.w	r3, [sp, #12]
    lv_res_t res = insert_handler(obj, del_buf);
 801ff86:	f7ff ff3b 	bl	801fe00 <insert_handler>
    if(res != LV_RES_OK) return;
 801ff8a:	2801      	cmp	r0, #1
    lv_res_t res = insert_handler(obj, del_buf);
 801ff8c:	4605      	mov	r5, r0
    if(res != LV_RES_OK) return;
 801ff8e:	d144      	bne.n	802001a <lv_textarea_del_char+0xa6>
    char * label_txt = lv_label_get_text(ta->label);
 801ff90:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801ff92:	f7fd fab7 	bl	801d504 <lv_label_get_text>
    _lv_txt_cut(label_txt, ta->cursor.pos - 1, 1);
 801ff96:	6c21      	ldr	r1, [r4, #64]	; 0x40
    char * label_txt = lv_label_get_text(ta->label);
 801ff98:	4606      	mov	r6, r0
    _lv_txt_cut(label_txt, ta->cursor.pos - 1, 1);
 801ff9a:	462a      	mov	r2, r5
 801ff9c:	3901      	subs	r1, #1
 801ff9e:	f7f9 fa59 	bl	8019454 <_lv_txt_cut>
    lv_label_set_text(ta->label, label_txt);
 801ffa2:	4631      	mov	r1, r6
 801ffa4:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801ffa6:	f7fd f9fb 	bl	801d3a0 <lv_label_set_text>
    lv_textarea_clear_selection(obj);
 801ffaa:	4620      	mov	r0, r4
 801ffac:	f7ff fe82 	bl	801fcb4 <lv_textarea_clear_selection>
    if(ta->placeholder_txt) {
 801ffb0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801ffb2:	b13b      	cbz	r3, 801ffc4 <lv_textarea_del_char+0x50>
        const char * txt = lv_label_get_text(ta->label);
 801ffb4:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801ffb6:	f7fd faa5 	bl	801d504 <lv_label_get_text>
        if(txt[0] == '\0') lv_obj_invalidate(obj);
 801ffba:	7803      	ldrb	r3, [r0, #0]
 801ffbc:	b913      	cbnz	r3, 801ffc4 <lv_textarea_del_char+0x50>
 801ffbe:	4620      	mov	r0, r4
 801ffc0:	f7e5 f8aa 	bl	8005118 <lv_obj_invalidate>
    if(ta->pwd_mode != 0) {
 801ffc4:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 801ffc8:	075b      	lsls	r3, r3, #29
 801ffca:	d51c      	bpl.n	8020006 <lv_textarea_del_char+0x92>
        uint32_t byte_pos = _lv_txt_encoded_get_byte_id(ta->pwd_tmp, ta->cursor.pos - 1);
 801ffcc:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801ffce:	4b14      	ldr	r3, [pc, #80]	; (8020020 <lv_textarea_del_char+0xac>)
 801ffd0:	3901      	subs	r1, #1
 801ffd2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801ffd4:	681b      	ldr	r3, [r3, #0]
 801ffd6:	4798      	blx	r3
        _lv_txt_cut(ta->pwd_tmp, ta->cursor.pos - 1, _lv_txt_encoded_size(&ta->pwd_tmp[byte_pos]));
 801ffd8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801ffda:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 801ffdc:	4b11      	ldr	r3, [pc, #68]	; (8020024 <lv_textarea_del_char+0xb0>)
 801ffde:	3901      	subs	r1, #1
 801ffe0:	4428      	add	r0, r5
 801ffe2:	681b      	ldr	r3, [r3, #0]
 801ffe4:	9101      	str	r1, [sp, #4]
 801ffe6:	4798      	blx	r3
 801ffe8:	9901      	ldr	r1, [sp, #4]
 801ffea:	4602      	mov	r2, r0
 801ffec:	4628      	mov	r0, r5
 801ffee:	f7f9 fa31 	bl	8019454 <_lv_txt_cut>
        ta->pwd_tmp = lv_mem_realloc(ta->pwd_tmp, strlen(ta->pwd_tmp) + 1);
 801fff2:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 801fff4:	4628      	mov	r0, r5
 801fff6:	f7e0 f965 	bl	80002c4 <strlen>
 801fffa:	1c41      	adds	r1, r0, #1
 801fffc:	4628      	mov	r0, r5
 801fffe:	f7f7 fd31 	bl	8017a64 <lv_mem_realloc>
        LV_ASSERT_MALLOC(ta->pwd_tmp);
 8020002:	b160      	cbz	r0, 802001e <lv_textarea_del_char+0xaa>
        ta->pwd_tmp = lv_mem_realloc(ta->pwd_tmp, strlen(ta->pwd_tmp) + 1);
 8020004:	62e0      	str	r0, [r4, #44]	; 0x2c
    lv_textarea_set_cursor_pos(obj, ta->cursor.pos - 1);
 8020006:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8020008:	4620      	mov	r0, r4
 802000a:	3901      	subs	r1, #1
 802000c:	f7ff fd70 	bl	801faf0 <lv_textarea_set_cursor_pos>
    lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 8020010:	2200      	movs	r2, #0
 8020012:	211c      	movs	r1, #28
 8020014:	4620      	mov	r0, r4
 8020016:	f7e1 ff57 	bl	8001ec8 <lv_event_send>
}
 802001a:	b004      	add	sp, #16
 802001c:	bd70      	pop	{r4, r5, r6, pc}
        LV_ASSERT_MALLOC(ta->pwd_tmp);
 802001e:	e7fe      	b.n	802001e <lv_textarea_del_char+0xaa>
 8020020:	20000038 	.word	0x20000038
 8020024:	20000048 	.word	0x20000048

08020028 <lv_textarea_del_char_forward>:
{
 8020028:	b538      	push	{r3, r4, r5, lr}
    return ta->cursor.pos;
 802002a:	6c05      	ldr	r5, [r0, #64]	; 0x40
{
 802002c:	4604      	mov	r4, r0
    lv_textarea_set_cursor_pos(obj, cp + 1);
 802002e:	1c69      	adds	r1, r5, #1
 8020030:	f7ff fd5e 	bl	801faf0 <lv_textarea_set_cursor_pos>
    if(cp != lv_textarea_get_cursor_pos(obj)) lv_textarea_del_char(obj);
 8020034:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8020036:	429d      	cmp	r5, r3
 8020038:	d004      	beq.n	8020044 <lv_textarea_del_char_forward+0x1c>
 802003a:	4620      	mov	r0, r4
}
 802003c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    if(cp != lv_textarea_get_cursor_pos(obj)) lv_textarea_del_char(obj);
 8020040:	f7ff bf98 	b.w	801ff74 <lv_textarea_del_char>
}
 8020044:	bd38      	pop	{r3, r4, r5, pc}
	...

08020048 <lv_textarea_set_text>:
{
 8020048:	b5f0      	push	{r4, r5, r6, r7, lr}
 802004a:	4604      	mov	r4, r0
 802004c:	b093      	sub	sp, #76	; 0x4c
    LV_ASSERT_NULL(txt);
 802004e:	460d      	mov	r5, r1
 8020050:	b901      	cbnz	r1, 8020054 <lv_textarea_set_text+0xc>
 8020052:	e7fe      	b.n	8020052 <lv_textarea_set_text+0xa>
    lv_textarea_clear_selection(obj);
 8020054:	f7ff fe2e 	bl	801fcb4 <lv_textarea_clear_selection>
    if(lv_textarea_get_accepted_chars(obj) || lv_textarea_get_max_length(obj)) {
 8020058:	6b23      	ldr	r3, [r4, #48]	; 0x30
 802005a:	b913      	cbnz	r3, 8020062 <lv_textarea_set_text+0x1a>
 802005c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802005e:	2b00      	cmp	r3, #0
 8020060:	d03a      	beq.n	80200d8 <lv_textarea_set_text+0x90>
        lv_label_set_text(ta->label, "");
 8020062:	4934      	ldr	r1, [pc, #208]	; (8020134 <lv_textarea_set_text+0xec>)
 8020064:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8020066:	f7fd f99b 	bl	801d3a0 <lv_label_set_text>
        lv_textarea_set_cursor_pos(obj, LV_TEXTAREA_CURSOR_LAST);
 802006a:	f647 71ff 	movw	r1, #32767	; 0x7fff
 802006e:	4620      	mov	r0, r4
            uint32_t c = _lv_txt_encoded_next(txt, &i);
 8020070:	4e31      	ldr	r6, [pc, #196]	; (8020138 <lv_textarea_set_text+0xf0>)
        lv_textarea_set_cursor_pos(obj, LV_TEXTAREA_CURSOR_LAST);
 8020072:	f7ff fd3d 	bl	801faf0 <lv_textarea_set_cursor_pos>
        if(ta->pwd_mode != 0) {
 8020076:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
            lv_textarea_add_char(obj, _lv_txt_unicode_to_encoded(c));
 802007a:	4f30      	ldr	r7, [pc, #192]	; (802013c <lv_textarea_set_text+0xf4>)
        if(ta->pwd_mode != 0) {
 802007c:	f013 0f04 	tst.w	r3, #4
 8020080:	f04f 0300 	mov.w	r3, #0
            ta->pwd_tmp[0] = '\0'; /*Clear the password too*/
 8020084:	bf1c      	itt	ne
 8020086:	6ae2      	ldrne	r2, [r4, #44]	; 0x2c
 8020088:	7013      	strbne	r3, [r2, #0]
        uint32_t i = 0;
 802008a:	9301      	str	r3, [sp, #4]
        while(txt[i] != '\0') {
 802008c:	9b01      	ldr	r3, [sp, #4]
 802008e:	5ceb      	ldrb	r3, [r5, r3]
 8020090:	b9bb      	cbnz	r3, 80200c2 <lv_textarea_set_text+0x7a>
    if(ta->placeholder_txt) {
 8020092:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8020094:	b13b      	cbz	r3, 80200a6 <lv_textarea_set_text+0x5e>
        const char * txt_act = lv_label_get_text(ta->label);
 8020096:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8020098:	f7fd fa34 	bl	801d504 <lv_label_get_text>
        if(txt_act[0] == '\0') lv_obj_invalidate(obj);
 802009c:	7803      	ldrb	r3, [r0, #0]
 802009e:	b913      	cbnz	r3, 80200a6 <lv_textarea_set_text+0x5e>
 80200a0:	4620      	mov	r0, r4
 80200a2:	f7e5 f839 	bl	8005118 <lv_obj_invalidate>
    if(ta->pwd_mode != 0) {
 80200a6:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 80200aa:	075b      	lsls	r3, r3, #29
 80200ac:	d526      	bpl.n	80200fc <lv_textarea_set_text+0xb4>
        ta->pwd_tmp = lv_mem_realloc(ta->pwd_tmp, strlen(txt) + 1);
 80200ae:	4628      	mov	r0, r5
 80200b0:	f7e0 f908 	bl	80002c4 <strlen>
 80200b4:	1c41      	adds	r1, r0, #1
 80200b6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80200b8:	f7f7 fcd4 	bl	8017a64 <lv_mem_realloc>
 80200bc:	62e0      	str	r0, [r4, #44]	; 0x2c
        LV_ASSERT_MALLOC(ta->pwd_tmp);
 80200be:	b9a8      	cbnz	r0, 80200ec <lv_textarea_set_text+0xa4>
 80200c0:	e7fe      	b.n	80200c0 <lv_textarea_set_text+0x78>
            uint32_t c = _lv_txt_encoded_next(txt, &i);
 80200c2:	a901      	add	r1, sp, #4
 80200c4:	6833      	ldr	r3, [r6, #0]
 80200c6:	4628      	mov	r0, r5
 80200c8:	4798      	blx	r3
            lv_textarea_add_char(obj, _lv_txt_unicode_to_encoded(c));
 80200ca:	683b      	ldr	r3, [r7, #0]
 80200cc:	4798      	blx	r3
 80200ce:	4601      	mov	r1, r0
 80200d0:	4620      	mov	r0, r4
 80200d2:	f7ff feb3 	bl	801fe3c <lv_textarea_add_char>
 80200d6:	e7d9      	b.n	802008c <lv_textarea_set_text+0x44>
        lv_label_set_text(ta->label, txt);
 80200d8:	4629      	mov	r1, r5
 80200da:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80200dc:	f7fd f960 	bl	801d3a0 <lv_label_set_text>
        lv_textarea_set_cursor_pos(obj, LV_TEXTAREA_CURSOR_LAST);
 80200e0:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80200e4:	4620      	mov	r0, r4
 80200e6:	f7ff fd03 	bl	801faf0 <lv_textarea_set_cursor_pos>
 80200ea:	e7d2      	b.n	8020092 <lv_textarea_set_text+0x4a>
        strcpy(ta->pwd_tmp, txt);
 80200ec:	4629      	mov	r1, r5
 80200ee:	f003 f957 	bl	80233a0 <strcpy>
        if(ta->pwd_show_time == 0) {
 80200f2:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 80200f4:	b94b      	cbnz	r3, 802010a <lv_textarea_set_text+0xc2>
            pwd_char_hider(obj);
 80200f6:	4620      	mov	r0, r4
 80200f8:	f7ff fca8 	bl	801fa4c <pwd_char_hider>
    lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 80200fc:	2200      	movs	r2, #0
 80200fe:	211c      	movs	r1, #28
 8020100:	4620      	mov	r0, r4
 8020102:	f7e1 fee1 	bl	8001ec8 <lv_event_send>
}
 8020106:	b013      	add	sp, #76	; 0x4c
 8020108:	bdf0      	pop	{r4, r5, r6, r7, pc}
            lv_anim_init(&a);
 802010a:	a801      	add	r0, sp, #4
 802010c:	f7f6 fd96 	bl	8016c3c <lv_anim_init>
    a->exec_cb = exec_cb;
 8020110:	4b0b      	ldr	r3, [pc, #44]	; (8020140 <lv_textarea_set_text+0xf8>)
            lv_anim_start(&a);
 8020112:	a801      	add	r0, sp, #4
    a->var = var;
 8020114:	9401      	str	r4, [sp, #4]
    a->exec_cb = exec_cb;
 8020116:	9302      	str	r3, [sp, #8]
    a->time = duration;
 8020118:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 802011a:	930b      	str	r3, [sp, #44]	; 0x2c
    a->start_value = start;
 802011c:	2300      	movs	r3, #0
    a->current_value = start;
 802011e:	e9cd 3308 	strd	r3, r3, [sp, #32]
    a->end_value = end;
 8020122:	2301      	movs	r3, #1
 8020124:	930a      	str	r3, [sp, #40]	; 0x28
    a->path_cb = path_cb;
 8020126:	4b07      	ldr	r3, [pc, #28]	; (8020144 <lv_textarea_set_text+0xfc>)
 8020128:	9307      	str	r3, [sp, #28]
    a->ready_cb = ready_cb;
 802012a:	4b07      	ldr	r3, [pc, #28]	; (8020148 <lv_textarea_set_text+0x100>)
 802012c:	9304      	str	r3, [sp, #16]
 802012e:	f7f6 fdcb 	bl	8016cc8 <lv_anim_start>
 8020132:	e7e3      	b.n	80200fc <lv_textarea_set_text+0xb4>
 8020134:	0802964b 	.word	0x0802964b
 8020138:	20000040 	.word	0x20000040
 802013c:	20000050 	.word	0x20000050
 8020140:	0801f759 	.word	0x0801f759
 8020144:	08016dd3 	.word	0x08016dd3
 8020148:	0801fae9 	.word	0x0801fae9

0802014c <lv_textarea_cursor_right>:
    cp++;
 802014c:	6c01      	ldr	r1, [r0, #64]	; 0x40
    lv_textarea_set_cursor_pos(obj, cp);
 802014e:	3101      	adds	r1, #1
 8020150:	f7ff bcce 	b.w	801faf0 <lv_textarea_set_cursor_pos>

08020154 <lv_textarea_cursor_left>:
    return ta->cursor.pos;
 8020154:	6c01      	ldr	r1, [r0, #64]	; 0x40
    if(cp > 0) {
 8020156:	b111      	cbz	r1, 802015e <lv_textarea_cursor_left+0xa>
        lv_textarea_set_cursor_pos(obj, cp);
 8020158:	3901      	subs	r1, #1
 802015a:	f7ff bcc9 	b.w	801faf0 <lv_textarea_set_cursor_pos>
}
 802015e:	4770      	bx	lr

08020160 <lv_textarea_cursor_down>:
{
 8020160:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8020162:	4604      	mov	r4, r0
    lv_label_get_letter_pos(ta->label, lv_textarea_get_cursor_pos(obj), &pos);
 8020164:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8020166:	aa01      	add	r2, sp, #4
 8020168:	6a40      	ldr	r0, [r0, #36]	; 0x24
 802016a:	f7fd f9cd 	bl	801d508 <lv_label_get_letter_pos>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 802016e:	f241 425b 	movw	r2, #5211	; 0x145b
 8020172:	2100      	movs	r1, #0
 8020174:	4620      	mov	r0, r4
 8020176:	f7e7 f8f7 	bl	8007368 <lv_obj_get_style_prop>
 802017a:	4605      	mov	r5, r0
    const lv_font_t * font = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 802017c:	4620      	mov	r0, r4
 802017e:	f7ff fafb 	bl	801f778 <lv_obj_get_style_text_font.constprop.0>
    pos.y += font_h + line_space + 1;
 8020182:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8020186:	441d      	add	r5, r3
 8020188:	8903      	ldrh	r3, [r0, #8]
    if(pos.y < lv_obj_get_height(ta->label)) {
 802018a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    pos.y += font_h + line_space + 1;
 802018c:	3501      	adds	r5, #1
 802018e:	441d      	add	r5, r3
    pos.x = ta->cursor.valid_x;
 8020190:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
    pos.y += font_h + line_space + 1;
 8020192:	b22d      	sxth	r5, r5
    pos.x = ta->cursor.valid_x;
 8020194:	f8ad 3004 	strh.w	r3, [sp, #4]
    pos.y += font_h + line_space + 1;
 8020198:	f8ad 5006 	strh.w	r5, [sp, #6]
    if(pos.y < lv_obj_get_height(ta->label)) {
 802019c:	f7e4 fe6d 	bl	8004e7a <lv_obj_get_height>
 80201a0:	4285      	cmp	r5, r0
 80201a2:	da0a      	bge.n	80201ba <lv_textarea_cursor_down+0x5a>
        uint32_t new_cur_pos = lv_label_get_letter_on(ta->label, &pos);
 80201a4:	a901      	add	r1, sp, #4
 80201a6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80201a8:	f7fd fa9e 	bl	801d6e8 <lv_label_get_letter_on>
        lv_coord_t cur_valid_x_tmp = ta->cursor.valid_x; /*Cursor position set overwrites the valid position*/
 80201ac:	f9b4 503c 	ldrsh.w	r5, [r4, #60]	; 0x3c
        uint32_t new_cur_pos = lv_label_get_letter_on(ta->label, &pos);
 80201b0:	4601      	mov	r1, r0
        lv_textarea_set_cursor_pos(obj, new_cur_pos);
 80201b2:	4620      	mov	r0, r4
 80201b4:	f7ff fc9c 	bl	801faf0 <lv_textarea_set_cursor_pos>
        ta->cursor.valid_x = cur_valid_x_tmp;
 80201b8:	87a5      	strh	r5, [r4, #60]	; 0x3c
}
 80201ba:	b003      	add	sp, #12
 80201bc:	bd30      	pop	{r4, r5, pc}

080201be <lv_textarea_cursor_up>:
{
 80201be:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80201c0:	4604      	mov	r4, r0
    lv_label_get_letter_pos(ta->label, lv_textarea_get_cursor_pos(obj), &pos);
 80201c2:	aa01      	add	r2, sp, #4
 80201c4:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80201c6:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80201c8:	f7fd f99e 	bl	801d508 <lv_label_get_letter_pos>
 80201cc:	f241 425b 	movw	r2, #5211	; 0x145b
 80201d0:	2100      	movs	r1, #0
 80201d2:	4620      	mov	r0, r4
 80201d4:	f7e7 f8c8 	bl	8007368 <lv_obj_get_style_prop>
 80201d8:	4605      	mov	r5, r0
    const lv_font_t * font = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 80201da:	4620      	mov	r0, r4
 80201dc:	f7ff facc 	bl	801f778 <lv_obj_get_style_text_font.constprop.0>
    pos.y -= font_h + line_space - 1;
 80201e0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80201e4:	8900      	ldrh	r0, [r0, #8]
    uint32_t new_cur_pos       = lv_label_get_letter_on(ta->label, &pos);
 80201e6:	a901      	add	r1, sp, #4
    pos.y -= font_h + line_space - 1;
 80201e8:	3201      	adds	r2, #1
 80201ea:	1b53      	subs	r3, r2, r5
 80201ec:	1a1b      	subs	r3, r3, r0
    uint32_t new_cur_pos       = lv_label_get_letter_on(ta->label, &pos);
 80201ee:	6a60      	ldr	r0, [r4, #36]	; 0x24
    pos.y -= font_h + line_space - 1;
 80201f0:	f8ad 3006 	strh.w	r3, [sp, #6]
    pos.x = ta->cursor.valid_x;
 80201f4:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 80201f6:	f8ad 3004 	strh.w	r3, [sp, #4]
    uint32_t new_cur_pos       = lv_label_get_letter_on(ta->label, &pos);
 80201fa:	f7fd fa75 	bl	801d6e8 <lv_label_get_letter_on>
    lv_coord_t cur_valid_x_tmp = ta->cursor.valid_x; /*Cursor position set overwrites the valid position*/
 80201fe:	f9b4 503c 	ldrsh.w	r5, [r4, #60]	; 0x3c
    uint32_t new_cur_pos       = lv_label_get_letter_on(ta->label, &pos);
 8020202:	4601      	mov	r1, r0
    lv_textarea_set_cursor_pos(obj, new_cur_pos);
 8020204:	4620      	mov	r0, r4
 8020206:	f7ff fc73 	bl	801faf0 <lv_textarea_set_cursor_pos>
    ta->cursor.valid_x = cur_valid_x_tmp;
 802020a:	87a5      	strh	r5, [r4, #60]	; 0x3c
}
 802020c:	b003      	add	sp, #12
 802020e:	bd30      	pop	{r4, r5, pc}

08020210 <lv_textarea_event>:
{
 8020210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    res = lv_obj_event_base(MY_CLASS, e);
 8020214:	489c      	ldr	r0, [pc, #624]	; (8020488 <lv_textarea_event+0x278>)
{
 8020216:	b09e      	sub	sp, #120	; 0x78
 8020218:	460d      	mov	r5, r1
    res = lv_obj_event_base(MY_CLASS, e);
 802021a:	f7e1 fddd 	bl	8001dd8 <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 802021e:	2801      	cmp	r0, #1
 8020220:	d114      	bne.n	802024c <lv_textarea_event+0x3c>
    lv_event_code_t code = lv_event_get_code(e);
 8020222:	4628      	mov	r0, r5
 8020224:	f7e1 fe72 	bl	8001f0c <lv_event_get_code>
 8020228:	4606      	mov	r6, r0
    lv_obj_t * obj = lv_event_get_target(e);
 802022a:	4628      	mov	r0, r5
 802022c:	f7e1 fe6c 	bl	8001f08 <lv_event_get_target>
    if(code == LV_EVENT_STYLE_CHANGED) {
 8020230:	2e24      	cmp	r6, #36	; 0x24
    lv_obj_t * obj = lv_event_get_target(e);
 8020232:	4604      	mov	r4, r0
    if(code == LV_EVENT_STYLE_CHANGED) {
 8020234:	d10d      	bne.n	8020252 <lv_textarea_event+0x42>
        if(ta->label) {
 8020236:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8020238:	b140      	cbz	r0, 802024c <lv_textarea_event+0x3c>
            lv_label_set_text(ta->label, NULL);
 802023a:	2100      	movs	r1, #0
 802023c:	f7fd f8b0 	bl	801d3a0 <lv_label_set_text>
            refr_cursor_area(obj);
 8020240:	4620      	mov	r0, r4
 8020242:	f7ff fafd 	bl	801f840 <refr_cursor_area>
            start_cursor_blink(obj);
 8020246:	4620      	mov	r0, r4
        start_cursor_blink(obj);
 8020248:	f7ff fa9e 	bl	801f788 <start_cursor_blink>
}
 802024c:	b01e      	add	sp, #120	; 0x78
 802024e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(code == LV_EVENT_FOCUSED) {
 8020252:	2e0e      	cmp	r6, #14
 8020254:	d0f8      	beq.n	8020248 <lv_textarea_event+0x38>
    else if(code == LV_EVENT_SIZE_CHANGED) {
 8020256:	2e23      	cmp	r6, #35	; 0x23
 8020258:	d10e      	bne.n	8020278 <lv_textarea_event+0x68>
        if(ta->label) {
 802025a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 802025c:	2800      	cmp	r0, #0
 802025e:	d0f5      	beq.n	802024c <lv_textarea_event+0x3c>
            lv_obj_set_pos(ta->label, 0, 0);
 8020260:	2200      	movs	r2, #0
 8020262:	4611      	mov	r1, r2
 8020264:	f7e4 fd62 	bl	8004d2c <lv_obj_set_pos>
            lv_label_set_text(ta->label, NULL); /*Refresh the label*/
 8020268:	6a60      	ldr	r0, [r4, #36]	; 0x24
 802026a:	2100      	movs	r1, #0
 802026c:	f7fd f898 	bl	801d3a0 <lv_label_set_text>
            refr_cursor_area(obj);
 8020270:	4620      	mov	r0, r4
 8020272:	f7ff fae5 	bl	801f840 <refr_cursor_area>
 8020276:	e7e9      	b.n	802024c <lv_textarea_event+0x3c>
    else if(code == LV_EVENT_KEY) {
 8020278:	2e0d      	cmp	r6, #13
 802027a:	d143      	bne.n	8020304 <lv_textarea_event+0xf4>
        uint32_t c = *((uint32_t *)lv_event_get_param(e)); /*uint32_t because can be UTF-8*/
 802027c:	4628      	mov	r0, r5
 802027e:	f7e1 fe47 	bl	8001f10 <lv_event_get_param>
 8020282:	6801      	ldr	r1, [r0, #0]
        if(c == LV_KEY_RIGHT)
 8020284:	2913      	cmp	r1, #19
 8020286:	d103      	bne.n	8020290 <lv_textarea_event+0x80>
            lv_textarea_cursor_right(obj);
 8020288:	4620      	mov	r0, r4
 802028a:	f7ff ff5f 	bl	802014c <lv_textarea_cursor_right>
 802028e:	e7dd      	b.n	802024c <lv_textarea_event+0x3c>
        else if(c == LV_KEY_LEFT)
 8020290:	2914      	cmp	r1, #20
 8020292:	d103      	bne.n	802029c <lv_textarea_event+0x8c>
            lv_textarea_cursor_left(obj);
 8020294:	4620      	mov	r0, r4
 8020296:	f7ff ff5d 	bl	8020154 <lv_textarea_cursor_left>
 802029a:	e7d7      	b.n	802024c <lv_textarea_event+0x3c>
        else if(c == LV_KEY_UP)
 802029c:	2911      	cmp	r1, #17
 802029e:	d103      	bne.n	80202a8 <lv_textarea_event+0x98>
            lv_textarea_cursor_up(obj);
 80202a0:	4620      	mov	r0, r4
 80202a2:	f7ff ff8c 	bl	80201be <lv_textarea_cursor_up>
 80202a6:	e7d1      	b.n	802024c <lv_textarea_event+0x3c>
        else if(c == LV_KEY_DOWN)
 80202a8:	2912      	cmp	r1, #18
 80202aa:	d103      	bne.n	80202b4 <lv_textarea_event+0xa4>
            lv_textarea_cursor_down(obj);
 80202ac:	4620      	mov	r0, r4
 80202ae:	f7ff ff57 	bl	8020160 <lv_textarea_cursor_down>
 80202b2:	e7cb      	b.n	802024c <lv_textarea_event+0x3c>
        else if(c == LV_KEY_BACKSPACE)
 80202b4:	2908      	cmp	r1, #8
 80202b6:	d103      	bne.n	80202c0 <lv_textarea_event+0xb0>
            lv_textarea_del_char(obj);
 80202b8:	4620      	mov	r0, r4
 80202ba:	f7ff fe5b 	bl	801ff74 <lv_textarea_del_char>
 80202be:	e7c5      	b.n	802024c <lv_textarea_event+0x3c>
        else if(c == LV_KEY_DEL)
 80202c0:	297f      	cmp	r1, #127	; 0x7f
 80202c2:	d103      	bne.n	80202cc <lv_textarea_event+0xbc>
            lv_textarea_del_char_forward(obj);
 80202c4:	4620      	mov	r0, r4
 80202c6:	f7ff feaf 	bl	8020028 <lv_textarea_del_char_forward>
 80202ca:	e7bf      	b.n	802024c <lv_textarea_event+0x3c>
        else if(c == LV_KEY_HOME)
 80202cc:	2902      	cmp	r1, #2
 80202ce:	d104      	bne.n	80202da <lv_textarea_event+0xca>
            lv_textarea_set_cursor_pos(obj, 0);
 80202d0:	2100      	movs	r1, #0
            lv_textarea_set_cursor_pos(obj, LV_TEXTAREA_CURSOR_LAST);
 80202d2:	4620      	mov	r0, r4
 80202d4:	f7ff fc0c 	bl	801faf0 <lv_textarea_set_cursor_pos>
 80202d8:	e7b8      	b.n	802024c <lv_textarea_event+0x3c>
        else if(c == LV_KEY_END)
 80202da:	2903      	cmp	r1, #3
 80202dc:	d102      	bne.n	80202e4 <lv_textarea_event+0xd4>
            lv_textarea_set_cursor_pos(obj, LV_TEXTAREA_CURSOR_LAST);
 80202de:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80202e2:	e7f6      	b.n	80202d2 <lv_textarea_event+0xc2>
        else if(c == LV_KEY_ENTER && lv_textarea_get_one_line(obj))
 80202e4:	290a      	cmp	r1, #10
 80202e6:	d109      	bne.n	80202fc <lv_textarea_event+0xec>
    return ta->one_line == 0 ? false : true;
 80202e8:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
        else if(c == LV_KEY_ENTER && lv_textarea_get_one_line(obj))
 80202ec:	071d      	lsls	r5, r3, #28
 80202ee:	d505      	bpl.n	80202fc <lv_textarea_event+0xec>
            lv_event_send(obj, LV_EVENT_READY, NULL);
 80202f0:	2200      	movs	r2, #0
 80202f2:	211f      	movs	r1, #31
 80202f4:	4620      	mov	r0, r4
 80202f6:	f7e1 fde7 	bl	8001ec8 <lv_event_send>
 80202fa:	e7a7      	b.n	802024c <lv_textarea_event+0x3c>
            lv_textarea_add_char(obj, c);
 80202fc:	4620      	mov	r0, r4
 80202fe:	f7ff fd9d 	bl	801fe3c <lv_textarea_add_char>
 8020302:	e7a3      	b.n	802024c <lv_textarea_event+0x3c>
    else if(code == LV_EVENT_PRESSED || code == LV_EVENT_PRESSING || code == LV_EVENT_PRESS_LOST ||
 8020304:	1e73      	subs	r3, r6, #1
 8020306:	b2db      	uxtb	r3, r3
 8020308:	2b02      	cmp	r3, #2
 802030a:	d902      	bls.n	8020312 <lv_textarea_event+0x102>
 802030c:	2e08      	cmp	r6, #8
 802030e:	f040 80bd 	bne.w	802048c <lv_textarea_event+0x27c>
    lv_indev_t * click_source = lv_indev_get_act();
 8020312:	f7e2 f86f 	bl	80023f4 <lv_indev_get_act>
    if(click_source == NULL) return;
 8020316:	4607      	mov	r7, r0
 8020318:	2800      	cmp	r0, #0
 802031a:	d097      	beq.n	802024c <lv_textarea_event+0x3c>
    lv_event_code_t code = lv_event_get_code(e);
 802031c:	4628      	mov	r0, r5
 802031e:	f7e1 fdf5 	bl	8001f0c <lv_event_get_code>
 8020322:	4606      	mov	r6, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8020324:	4628      	mov	r0, r5
 8020326:	f7e1 fdef 	bl	8001f08 <lv_event_get_target>
    if(ta->cursor.click_pos == 0) return;
 802032a:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
    lv_obj_t * obj = lv_event_get_target(e);
 802032e:	4604      	mov	r4, r0
    if(ta->cursor.click_pos == 0) return;
 8020330:	0798      	lsls	r0, r3, #30
 8020332:	d58b      	bpl.n	802024c <lv_textarea_event+0x3c>
    if(lv_indev_get_type(click_source) == LV_INDEV_TYPE_KEYPAD ||
 8020334:	4638      	mov	r0, r7
 8020336:	f7e2 f863 	bl	8002400 <lv_indev_get_type>
 802033a:	2802      	cmp	r0, #2
 802033c:	d086      	beq.n	802024c <lv_textarea_event+0x3c>
       lv_indev_get_type(click_source) == LV_INDEV_TYPE_ENCODER) {
 802033e:	4638      	mov	r0, r7
 8020340:	f7e2 f85e 	bl	8002400 <lv_indev_get_type>
    if(lv_indev_get_type(click_source) == LV_INDEV_TYPE_KEYPAD ||
 8020344:	2804      	cmp	r0, #4
 8020346:	d081      	beq.n	802024c <lv_textarea_event+0x3c>
    lv_obj_get_coords(ta->label, &label_coords);
 8020348:	a911      	add	r1, sp, #68	; 0x44
 802034a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 802034c:	f7e4 fd3f 	bl	8004dce <lv_obj_get_coords>
    lv_indev_get_point(click_source, &point_act);
 8020350:	a905      	add	r1, sp, #20
 8020352:	4638      	mov	r0, r7
 8020354:	f7e2 f8af 	bl	80024b6 <lv_indev_get_point>
    lv_indev_get_vect(click_source, &vect_act);
 8020358:	a907      	add	r1, sp, #28
 802035a:	4638      	mov	r0, r7
 802035c:	f7e2 f8d9 	bl	8002512 <lv_indev_get_vect>
    if(point_act.x < 0 || point_act.y < 0) return; /*Ignore event from keypad*/
 8020360:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 8020364:	2a00      	cmp	r2, #0
 8020366:	f6ff af71 	blt.w	802024c <lv_textarea_event+0x3c>
 802036a:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 802036e:	2b00      	cmp	r3, #0
 8020370:	f6ff af6c 	blt.w	802024c <lv_textarea_event+0x3c>
    rel_pos.x = point_act.x - label_coords.x1;
 8020374:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
    lv_coord_t label_width = lv_obj_get_width(ta->label);
 8020378:	6a60      	ldr	r0, [r4, #36]	; 0x24
    rel_pos.x = point_act.x - label_coords.x1;
 802037a:	1a52      	subs	r2, r2, r1
 802037c:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
    rel_pos.y = point_act.y - label_coords.y1;
 8020380:	f8bd 2046 	ldrh.w	r2, [sp, #70]	; 0x46
 8020384:	1a9b      	subs	r3, r3, r2
 8020386:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
    lv_coord_t label_width = lv_obj_get_width(ta->label);
 802038a:	f7e4 fd70 	bl	8004e6e <lv_obj_get_width>
    if(rel_pos.x < 0) {
 802038e:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
    lv_label_t * label_data = (lv_label_t *)ta->label;
 8020392:	6a65      	ldr	r5, [r4, #36]	; 0x24
    if(rel_pos.x < 0) {
 8020394:	2b00      	cmp	r3, #0
 8020396:	db3b      	blt.n	8020410 <lv_textarea_event+0x200>
    else if(rel_pos.x >= label_width) {
 8020398:	4298      	cmp	r0, r3
 802039a:	dd3c      	ble.n	8020416 <lv_textarea_event+0x206>
        char_id_at_click = lv_label_get_letter_on(ta->label, &rel_pos);
 802039c:	a909      	add	r1, sp, #36	; 0x24
 802039e:	4628      	mov	r0, r5
 80203a0:	f7fd f9a2 	bl	801d6e8 <lv_label_get_letter_on>
        click_outside_label       = !lv_label_is_char_under_pos(ta->label, &rel_pos);
 80203a4:	a909      	add	r1, sp, #36	; 0x24
        char_id_at_click = lv_label_get_letter_on(ta->label, &rel_pos);
 80203a6:	b287      	uxth	r7, r0
        click_outside_label       = !lv_label_is_char_under_pos(ta->label, &rel_pos);
 80203a8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80203aa:	f7fd f9a1 	bl	801d6f0 <lv_label_is_char_under_pos>
 80203ae:	f080 0001 	eor.w	r0, r0, #1
 80203b2:	b2c0      	uxtb	r0, r0
    if(ta->text_sel_en) {
 80203b4:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 80203b8:	0799      	lsls	r1, r3, #30
 80203ba:	d540      	bpl.n	802043e <lv_textarea_event+0x22e>
        if(!ta->text_sel_in_prog && !click_outside_label && code == LV_EVENT_PRESSED) {
 80203bc:	07da      	lsls	r2, r3, #31
 80203be:	d443      	bmi.n	8020448 <lv_textarea_event+0x238>
 80203c0:	b368      	cbz	r0, 802041e <lv_textarea_event+0x20e>
    if(ta->text_sel_in_prog || code == LV_EVENT_PRESSED) lv_textarea_set_cursor_pos(obj, char_id_at_click);
 80203c2:	2e01      	cmp	r6, #1
 80203c4:	f47f af42 	bne.w	802024c <lv_textarea_event+0x3c>
 80203c8:	4639      	mov	r1, r7
 80203ca:	4620      	mov	r0, r4
 80203cc:	f7ff fb90 	bl	801faf0 <lv_textarea_set_cursor_pos>
    if(ta->text_sel_in_prog) {
 80203d0:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 80203d4:	07db      	lsls	r3, r3, #31
 80203d6:	f57f af39 	bpl.w	802024c <lv_textarea_event+0x3c>
        if(ta->sel_start > ta->sel_end) {
 80203da:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 80203dc:	e9d4 2315 	ldrd	r2, r3, [r4, #84]	; 0x54
 80203e0:	429a      	cmp	r2, r3
 80203e2:	d93f      	bls.n	8020464 <lv_textarea_event+0x254>
            if(label_data->sel_start != ta->sel_end || label_data->sel_end != ta->sel_start) {
 80203e4:	428b      	cmp	r3, r1
 80203e6:	d102      	bne.n	80203ee <lv_textarea_event+0x1de>
 80203e8:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80203ea:	428a      	cmp	r2, r1
 80203ec:	d004      	beq.n	80203f8 <lv_textarea_event+0x1e8>
                label_data->sel_end   = ta->sel_start;
 80203ee:	e9c5 320f 	strd	r3, r2, [r5, #60]	; 0x3c
                lv_obj_invalidate(obj);
 80203f2:	4620      	mov	r0, r4
 80203f4:	f7e4 fe90 	bl	8005118 <lv_obj_invalidate>
        if(code == LV_EVENT_PRESS_LOST || code == LV_EVENT_RELEASED) {
 80203f8:	2e03      	cmp	r6, #3
 80203fa:	d002      	beq.n	8020402 <lv_textarea_event+0x1f2>
 80203fc:	2e08      	cmp	r6, #8
 80203fe:	f47f af25 	bne.w	802024c <lv_textarea_event+0x3c>
            ta->text_sel_in_prog = 0;
 8020402:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 8020406:	f36f 0300 	bfc	r3, #0, #1
 802040a:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
 802040e:	e71d      	b.n	802024c <lv_textarea_event+0x3c>
        click_outside_label       = true;
 8020410:	2001      	movs	r0, #1
        char_id_at_click = 0;
 8020412:	2700      	movs	r7, #0
 8020414:	e7ce      	b.n	80203b4 <lv_textarea_event+0x1a4>
        click_outside_label       = true;
 8020416:	2001      	movs	r0, #1
        char_id_at_click = LV_TEXTAREA_CURSOR_LAST;
 8020418:	f647 77ff 	movw	r7, #32767	; 0x7fff
 802041c:	e7ca      	b.n	80203b4 <lv_textarea_event+0x1a4>
        if(!ta->text_sel_in_prog && !click_outside_label && code == LV_EVENT_PRESSED) {
 802041e:	2e01      	cmp	r6, #1
 8020420:	f47f af14 	bne.w	802024c <lv_textarea_event+0x3c>
            ta->sel_end      = LV_LABEL_TEXT_SELECTION_OFF;
 8020424:	f64f 72ff 	movw	r2, #65535	; 0xffff
            ta->text_sel_in_prog = 1;
 8020428:	f043 0301 	orr.w	r3, r3, #1
            lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLL_CHAIN);
 802042c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8020430:	4620      	mov	r0, r4
            ta->sel_start    = char_id_at_click;
 8020432:	6567      	str	r7, [r4, #84]	; 0x54
            ta->sel_end      = LV_LABEL_TEXT_SELECTION_OFF;
 8020434:	65a2      	str	r2, [r4, #88]	; 0x58
            ta->text_sel_in_prog = 1;
 8020436:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
            lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLL_CHAIN);
 802043a:	f7e3 fc88 	bl	8003d4e <lv_obj_clear_flag>
    if(ta->text_sel_in_prog || code == LV_EVENT_PRESSED) lv_textarea_set_cursor_pos(obj, char_id_at_click);
 802043e:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 8020442:	07d8      	lsls	r0, r3, #31
 8020444:	d5bd      	bpl.n	80203c2 <lv_textarea_event+0x1b2>
 8020446:	e7bf      	b.n	80203c8 <lv_textarea_event+0x1b8>
        else if(ta->text_sel_in_prog && code == LV_EVENT_PRESSING) {
 8020448:	2e02      	cmp	r6, #2
 802044a:	d101      	bne.n	8020450 <lv_textarea_event+0x240>
            ta->sel_end = char_id_at_click;
 802044c:	65a7      	str	r7, [r4, #88]	; 0x58
 802044e:	e7bb      	b.n	80203c8 <lv_textarea_event+0x1b8>
        else if(ta->text_sel_in_prog && (code == LV_EVENT_PRESS_LOST || code == LV_EVENT_RELEASED)) {
 8020450:	2e03      	cmp	r6, #3
 8020452:	d001      	beq.n	8020458 <lv_textarea_event+0x248>
 8020454:	2e08      	cmp	r6, #8
 8020456:	d1b7      	bne.n	80203c8 <lv_textarea_event+0x1b8>
            lv_obj_add_flag(obj, LV_OBJ_FLAG_SCROLL_CHAIN);
 8020458:	f44f 7180 	mov.w	r1, #256	; 0x100
 802045c:	4620      	mov	r0, r4
 802045e:	f7e3 fc53 	bl	8003d08 <lv_obj_add_flag>
 8020462:	e7ec      	b.n	802043e <lv_textarea_event+0x22e>
        else if(ta->sel_start < ta->sel_end) {
 8020464:	d207      	bcs.n	8020476 <lv_textarea_event+0x266>
            if(label_data->sel_start != ta->sel_start || label_data->sel_end != ta->sel_end) {
 8020466:	428a      	cmp	r2, r1
 8020468:	d102      	bne.n	8020470 <lv_textarea_event+0x260>
 802046a:	6c29      	ldr	r1, [r5, #64]	; 0x40
 802046c:	428b      	cmp	r3, r1
 802046e:	d0c3      	beq.n	80203f8 <lv_textarea_event+0x1e8>
                label_data->sel_start = ta->sel_start;
 8020470:	63ea      	str	r2, [r5, #60]	; 0x3c
                label_data->sel_end   = LV_DRAW_LABEL_NO_TXT_SEL;
 8020472:	642b      	str	r3, [r5, #64]	; 0x40
 8020474:	e7bd      	b.n	80203f2 <lv_textarea_event+0x1e2>
            if(label_data->sel_start != LV_DRAW_LABEL_NO_TXT_SEL || label_data->sel_end != LV_DRAW_LABEL_NO_TXT_SEL) {
 8020476:	f64f 73ff 	movw	r3, #65535	; 0xffff
 802047a:	4299      	cmp	r1, r3
 802047c:	d102      	bne.n	8020484 <lv_textarea_event+0x274>
 802047e:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8020480:	429a      	cmp	r2, r3
 8020482:	d0b9      	beq.n	80203f8 <lv_textarea_event+0x1e8>
                label_data->sel_start = LV_DRAW_LABEL_NO_TXT_SEL;
 8020484:	63eb      	str	r3, [r5, #60]	; 0x3c
 8020486:	e7f4      	b.n	8020472 <lv_textarea_event+0x262>
 8020488:	080295f4 	.word	0x080295f4
    else if(code == LV_EVENT_DRAW_MAIN) {
 802048c:	2e15      	cmp	r6, #21
 802048e:	d15c      	bne.n	802054a <lv_textarea_event+0x33a>

static void draw_placeholder(lv_event_t * e)
{
    lv_obj_t * obj = lv_event_get_target(e);
 8020490:	4628      	mov	r0, r5
 8020492:	f7e1 fd39 	bl	8001f08 <lv_event_get_target>
 8020496:	4604      	mov	r4, r0
    lv_textarea_t * ta = (lv_textarea_t *)obj;
    const lv_area_t * clip_area = lv_event_get_param(e);
 8020498:	4628      	mov	r0, r5
 802049a:	f7e1 fd39 	bl	8001f10 <lv_event_get_param>
 802049e:	4606      	mov	r6, r0
    const char * txt = lv_label_get_text(ta->label);
 80204a0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80204a2:	f7fd f82f 	bl	801d504 <lv_label_get_text>

    /*Draw the place holder*/
    if(txt[0] == '\0' && ta->placeholder_txt && ta->placeholder_txt[0] != 0) {
 80204a6:	7803      	ldrb	r3, [r0, #0]
 80204a8:	2b00      	cmp	r3, #0
 80204aa:	f47f aecf 	bne.w	802024c <lv_textarea_event+0x3c>
 80204ae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80204b0:	2b00      	cmp	r3, #0
 80204b2:	f43f aecb 	beq.w	802024c <lv_textarea_event+0x3c>
 80204b6:	781b      	ldrb	r3, [r3, #0]
 80204b8:	2b00      	cmp	r3, #0
 80204ba:	f43f aec7 	beq.w	802024c <lv_textarea_event+0x3c>
        lv_draw_label_dsc_t ph_dsc;
        lv_draw_label_dsc_init(&ph_dsc);
 80204be:	a811      	add	r0, sp, #68	; 0x44
 80204c0:	f7ea f82e 	bl	800a520 <lv_draw_label_dsc_init>
        lv_obj_init_draw_label_dsc(obj, LV_PART_TEXTAREA_PLACEHOLDER, &ph_dsc);
 80204c4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80204c8:	aa11      	add	r2, sp, #68	; 0x44
 80204ca:	4620      	mov	r0, r4
 80204cc:	f7e4 f984 	bl	80047d8 <lv_obj_init_draw_label_dsc>

        if(ta->one_line) ph_dsc.flag |= LV_TEXT_FLAG_EXPAND;
 80204d0:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80204d4:	f241 0212 	movw	r2, #4114	; 0x1012
 80204d8:	4620      	mov	r0, r4
 80204da:	0719      	lsls	r1, r3, #28
 80204dc:	f04f 0100 	mov.w	r1, #0
 80204e0:	bf42      	ittt	mi
 80204e2:	f89d 3060 	ldrbmi.w	r3, [sp, #96]	; 0x60
 80204e6:	f043 0302 	orrmi.w	r3, r3, #2
 80204ea:	f88d 3060 	strbmi.w	r3, [sp, #96]	; 0x60
 80204ee:	f7e6 ff3b 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80204f2:	f241 0210 	movw	r2, #4112	; 0x1010
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80204f6:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80204f8:	2100      	movs	r1, #0
 80204fa:	4620      	mov	r0, r4
 80204fc:	f7e6 ff34 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8020500:	f241 0232 	movw	r2, #4146	; 0x1032
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8020504:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8020506:	2100      	movs	r1, #0
 8020508:	4620      	mov	r0, r4
 802050a:	f7e6 ff2d 	bl	8007368 <lv_obj_get_style_prop>
    dest->x1 = src->x1;
 802050e:	8aa3      	ldrh	r3, [r4, #20]
        lv_coord_t left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
        lv_coord_t top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
        lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
        lv_area_t ph_coords;
        lv_area_copy(&ph_coords, &obj->coords);
        lv_area_move(&ph_coords, left + border_width, top + border_width);
 8020510:	fa15 f280 	uxtah	r2, r5, r0
 8020514:	fa17 f180 	uxtah	r1, r7, r0
 8020518:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 802051c:	a809      	add	r0, sp, #36	; 0x24
    dest->y1 = src->y1;
 802051e:	8ae3      	ldrh	r3, [r4, #22]
 8020520:	b212      	sxth	r2, r2
 8020522:	b209      	sxth	r1, r1
 8020524:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
    dest->x2 = src->x2;
 8020528:	8b23      	ldrh	r3, [r4, #24]
 802052a:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
    dest->y2 = src->y2;
 802052e:	8b63      	ldrh	r3, [r4, #26]
 8020530:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8020534:	f7f6 fc9e 	bl	8016e74 <lv_area_move>
        lv_draw_label(&ph_coords, clip_area, &ph_dsc, ta->placeholder_txt, NULL);
 8020538:	2300      	movs	r3, #0
 802053a:	aa11      	add	r2, sp, #68	; 0x44
 802053c:	4631      	mov	r1, r6
 802053e:	a809      	add	r0, sp, #36	; 0x24
 8020540:	9300      	str	r3, [sp, #0]
 8020542:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        cur_area.y1 += top + border_width;

        lv_draw_label_dsc_t cur_label_dsc;
        lv_draw_label_dsc_init(&cur_label_dsc);
        lv_obj_init_draw_label_dsc(obj, LV_PART_CURSOR, &cur_label_dsc);
        lv_draw_label(&cur_area, clip_area, &cur_label_dsc, letter_buf, NULL);
 8020544:	f7ea f9c4 	bl	800a8d0 <lv_draw_label>
 8020548:	e680      	b.n	802024c <lv_textarea_event+0x3c>
    else if(code == LV_EVENT_DRAW_POST) {
 802054a:	2e18      	cmp	r6, #24
 802054c:	f47f ae7e 	bne.w	802024c <lv_textarea_event+0x3c>
    lv_obj_t * obj = lv_event_get_target(e);
 8020550:	4628      	mov	r0, r5
 8020552:	f7e1 fcd9 	bl	8001f08 <lv_event_get_target>
 8020556:	4604      	mov	r4, r0
    const lv_area_t * clip_area = lv_event_get_param(e);
 8020558:	4628      	mov	r0, r5
 802055a:	f7e1 fcd9 	bl	8001f10 <lv_event_get_param>
 802055e:	4606      	mov	r6, r0
    const char * txt = lv_label_get_text(ta->label);
 8020560:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8020562:	f7fc ffcf 	bl	801d504 <lv_label_get_text>
    if(ta->cursor.show == 0) return;
 8020566:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
    const char * txt = lv_label_get_text(ta->label);
 802056a:	4605      	mov	r5, r0
    if(ta->cursor.show == 0) return;
 802056c:	07da      	lsls	r2, r3, #31
 802056e:	f57f ae6d 	bpl.w	802024c <lv_textarea_event+0x3c>
    lv_draw_rect_dsc_init(&cur_dsc);
 8020572:	a811      	add	r0, sp, #68	; 0x44
 8020574:	f7ec fa88 	bl	800ca88 <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(obj, LV_PART_CURSOR, &cur_dsc);
 8020578:	aa11      	add	r2, sp, #68	; 0x44
 802057a:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 802057e:	4620      	mov	r0, r4
 8020580:	f7e3 ffee 	bl	8004560 <lv_obj_init_draw_rect_dsc>
    cur_area.x1 += ta->label->coords.x1;
 8020584:	6a67      	ldr	r7, [r4, #36]	; 0x24
    dest->x2 = src->x2;
 8020586:	f9b4 e048 	ldrsh.w	lr, [r4, #72]	; 0x48
 802058a:	8aba      	ldrh	r2, [r7, #20]
    cur_area.y1 += ta->label->coords.y1;
 802058c:	8afb      	ldrh	r3, [r7, #22]
    char letter_buf[8] = {0};
 802058e:	2700      	movs	r7, #0
    dest->y1 = src->y1;
 8020590:	f9b4 1046 	ldrsh.w	r1, [r4, #70]	; 0x46
    cur_area.x1 += ta->label->coords.x1;
 8020594:	f8b4 0044 	ldrh.w	r0, [r4, #68]	; 0x44
    dest->y2 = src->y2;
 8020598:	f9b4 c04a 	ldrsh.w	ip, [r4, #74]	; 0x4a
    cur_area.y1 += ta->label->coords.y1;
 802059c:	4419      	add	r1, r3
    cur_area.x1 += ta->label->coords.x1;
 802059e:	4410      	add	r0, r2
    cur_area.x2 += ta->label->coords.x1;
 80205a0:	4472      	add	r2, lr
    cur_area.y2 += ta->label->coords.y1;
 80205a2:	4463      	add	r3, ip
    cur_area.y1 += ta->label->coords.y1;
 80205a4:	f8ad 1016 	strh.w	r1, [sp, #22]
    cur_area.x1 += ta->label->coords.x1;
 80205a8:	f8ad 0014 	strh.w	r0, [sp, #20]
    lv_draw_rect(&cur_area, clip_area, &cur_dsc);
 80205ac:	4631      	mov	r1, r6
 80205ae:	a805      	add	r0, sp, #20
    cur_area.x2 += ta->label->coords.x1;
 80205b0:	f8ad 2018 	strh.w	r2, [sp, #24]
    lv_draw_rect(&cur_area, clip_area, &cur_dsc);
 80205b4:	aa11      	add	r2, sp, #68	; 0x44
    cur_area.y2 += ta->label->coords.y1;
 80205b6:	f8ad 301a 	strh.w	r3, [sp, #26]
    lv_draw_rect(&cur_area, clip_area, &cur_dsc);
 80205ba:	f7ec fa87 	bl	800cacc <lv_draw_rect>
    lv_memcpy(letter_buf, &txt[ta->cursor.txt_byte_pos], _lv_txt_encoded_size(&txt[ta->cursor.txt_byte_pos]));
 80205be:	4b24      	ldr	r3, [pc, #144]	; (8020650 <lv_textarea_event+0x440>)
    char letter_buf[8] = {0};
 80205c0:	e9cd 7707 	strd	r7, r7, [sp, #28]
    lv_memcpy(letter_buf, &txt[ta->cursor.txt_byte_pos], _lv_txt_encoded_size(&txt[ta->cursor.txt_byte_pos]));
 80205c4:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80205c6:	681b      	ldr	r3, [r3, #0]
 80205c8:	4429      	add	r1, r5
 80205ca:	4608      	mov	r0, r1
 80205cc:	9103      	str	r1, [sp, #12]
 80205ce:	4798      	blx	r3
 80205d0:	9903      	ldr	r1, [sp, #12]
 80205d2:	4602      	mov	r2, r0
 80205d4:	a807      	add	r0, sp, #28
 80205d6:	f7f7 f8e7 	bl	80177a8 <lv_memcpy>
    if(cur_dsc.bg_opa == LV_OPA_COVER) {
 80205da:	f89d 304e 	ldrb.w	r3, [sp, #78]	; 0x4e
 80205de:	2bff      	cmp	r3, #255	; 0xff
 80205e0:	f47f ae34 	bne.w	802024c <lv_textarea_event+0x3c>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80205e4:	f241 0212 	movw	r2, #4114	; 0x1012
 80205e8:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 80205ec:	4620      	mov	r0, r4
 80205ee:	f7e6 febb 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80205f2:	f241 0210 	movw	r2, #4112	; 0x1010
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80205f6:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80205f8:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 80205fc:	4620      	mov	r0, r4
 80205fe:	f7e6 feb3 	bl	8007368 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8020602:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8020606:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8020608:	f241 0232 	movw	r2, #4146	; 0x1032
 802060c:	4620      	mov	r0, r4
 802060e:	f7e6 feab 	bl	8007368 <lv_obj_get_style_prop>
        cur_area.y1 += top + border_width;
 8020612:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8020616:	4603      	mov	r3, r0
        cur_area.x1 += left + border_width;
 8020618:	f8bd 0014 	ldrh.w	r0, [sp, #20]
        cur_area.y1 += top + border_width;
 802061c:	fa12 f283 	uxtah	r2, r2, r3
        cur_area.x1 += left + border_width;
 8020620:	4405      	add	r5, r0
        lv_draw_label_dsc_init(&cur_label_dsc);
 8020622:	a809      	add	r0, sp, #36	; 0x24
        cur_area.x1 += left + border_width;
 8020624:	fa15 f583 	uxtah	r5, r5, r3
        cur_area.y1 += top + border_width;
 8020628:	eb02 0308 	add.w	r3, r2, r8
        cur_area.x1 += left + border_width;
 802062c:	f8ad 5014 	strh.w	r5, [sp, #20]
        cur_area.y1 += top + border_width;
 8020630:	f8ad 3016 	strh.w	r3, [sp, #22]
        lv_draw_label_dsc_init(&cur_label_dsc);
 8020634:	f7e9 ff74 	bl	800a520 <lv_draw_label_dsc_init>
        lv_obj_init_draw_label_dsc(obj, LV_PART_CURSOR, &cur_label_dsc);
 8020638:	aa09      	add	r2, sp, #36	; 0x24
 802063a:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 802063e:	4620      	mov	r0, r4
 8020640:	f7e4 f8ca 	bl	80047d8 <lv_obj_init_draw_label_dsc>
        lv_draw_label(&cur_area, clip_area, &cur_label_dsc, letter_buf, NULL);
 8020644:	ab07      	add	r3, sp, #28
 8020646:	aa09      	add	r2, sp, #36	; 0x24
 8020648:	4631      	mov	r1, r6
 802064a:	a805      	add	r0, sp, #20
 802064c:	9700      	str	r7, [sp, #0]
 802064e:	e779      	b.n	8020544 <lv_textarea_event+0x334>
 8020650:	20000048 	.word	0x20000048

08020654 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8020654:	b508      	push	{r3, lr}
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8020656:	2003      	movs	r0, #3
 8020658:	f000 f81a 	bl	8020690 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 802065c:	2000      	movs	r0, #0
 802065e:	f7e1 f97d 	bl	800195c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8020662:	f7e1 f963 	bl	800192c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 8020666:	2000      	movs	r0, #0
 8020668:	bd08      	pop	{r3, pc}
	...

0802066c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 802066c:	4a03      	ldr	r2, [pc, #12]	; (802067c <HAL_IncTick+0x10>)
 802066e:	4b04      	ldr	r3, [pc, #16]	; (8020680 <HAL_IncTick+0x14>)
 8020670:	6811      	ldr	r1, [r2, #0]
 8020672:	781b      	ldrb	r3, [r3, #0]
 8020674:	440b      	add	r3, r1
 8020676:	6013      	str	r3, [r2, #0]
}
 8020678:	4770      	bx	lr
 802067a:	bf00      	nop
 802067c:	2000af84 	.word	0x2000af84
 8020680:	20000070 	.word	0x20000070

08020684 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8020684:	4b01      	ldr	r3, [pc, #4]	; (802068c <HAL_GetTick+0x8>)
 8020686:	6818      	ldr	r0, [r3, #0]
}
 8020688:	4770      	bx	lr
 802068a:	bf00      	nop
 802068c:	2000af84 	.word	0x2000af84

08020690 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8020690:	4907      	ldr	r1, [pc, #28]	; (80206b0 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8020692:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8020694:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8020696:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 802069a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 802069e:	0412      	lsls	r2, r2, #16
 80206a0:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80206a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80206a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80206a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80206ac:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80206ae:	4770      	bx	lr
 80206b0:	e000ed00 	.word	0xe000ed00

080206b4 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80206b4:	4b16      	ldr	r3, [pc, #88]	; (8020710 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80206b6:	b530      	push	{r4, r5, lr}
 80206b8:	68dc      	ldr	r4, [r3, #12]
 80206ba:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80206be:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80206c2:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80206c4:	2d04      	cmp	r5, #4
 80206c6:	bf28      	it	cs
 80206c8:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80206ca:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80206cc:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80206d0:	bf8c      	ite	hi
 80206d2:	3c03      	subhi	r4, #3
 80206d4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80206d6:	fa03 f505 	lsl.w	r5, r3, r5
  if ((int32_t)(IRQn) >= 0)
 80206da:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80206dc:	fa03 f304 	lsl.w	r3, r3, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80206e0:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80206e4:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80206e8:	fa01 f104 	lsl.w	r1, r1, r4
 80206ec:	ea41 0302 	orr.w	r3, r1, r2
 80206f0:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80206f4:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 80206f6:	db06      	blt.n	8020706 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80206f8:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80206fc:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8020700:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8020704:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8020706:	f000 000f 	and.w	r0, r0, #15
 802070a:	4a02      	ldr	r2, [pc, #8]	; (8020714 <HAL_NVIC_SetPriority+0x60>)
 802070c:	5413      	strb	r3, [r2, r0]
 802070e:	e7f9      	b.n	8020704 <HAL_NVIC_SetPriority+0x50>
 8020710:	e000ed00 	.word	0xe000ed00
 8020714:	e000ed14 	.word	0xe000ed14

08020718 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8020718:	2800      	cmp	r0, #0
 802071a:	db08      	blt.n	802072e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 802071c:	0942      	lsrs	r2, r0, #5
 802071e:	2301      	movs	r3, #1
 8020720:	f000 001f 	and.w	r0, r0, #31
 8020724:	fa03 f000 	lsl.w	r0, r3, r0
 8020728:	4b01      	ldr	r3, [pc, #4]	; (8020730 <HAL_NVIC_EnableIRQ+0x18>)
 802072a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 802072e:	4770      	bx	lr
 8020730:	e000e100 	.word	0xe000e100

08020734 <HAL_DMA_IRQHandler>:
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8020734:	2300      	movs	r3, #0
{
 8020736:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0;
 8020738:	9301      	str	r3, [sp, #4]
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;

  tmpisr = regs->ISR;

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 802073a:	2208      	movs	r2, #8
  uint32_t timeout = SystemCoreClock / 9600;
 802073c:	4b5b      	ldr	r3, [pc, #364]	; (80208ac <HAL_DMA_IRQHandler+0x178>)
{
 802073e:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8020740:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600;
 8020742:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8020744:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8020746:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8020748:	409a      	lsls	r2, r3
 802074a:	4232      	tst	r2, r6
 802074c:	d00c      	beq.n	8020768 <HAL_DMA_IRQHandler+0x34>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 802074e:	6801      	ldr	r1, [r0, #0]
 8020750:	6808      	ldr	r0, [r1, #0]
 8020752:	0740      	lsls	r0, r0, #29
 8020754:	d508      	bpl.n	8020768 <HAL_DMA_IRQHandler+0x34>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8020756:	6808      	ldr	r0, [r1, #0]
 8020758:	f020 0004 	bic.w	r0, r0, #4
 802075c:	6008      	str	r0, [r1, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 802075e:	60aa      	str	r2, [r5, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8020760:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8020762:	f042 0201 	orr.w	r2, r2, #1
 8020766:	6562      	str	r2, [r4, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8020768:	2201      	movs	r2, #1
 802076a:	409a      	lsls	r2, r3
 802076c:	4232      	tst	r2, r6
 802076e:	d008      	beq.n	8020782 <HAL_DMA_IRQHandler+0x4e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8020770:	6821      	ldr	r1, [r4, #0]
 8020772:	6949      	ldr	r1, [r1, #20]
 8020774:	0609      	lsls	r1, r1, #24
 8020776:	d504      	bpl.n	8020782 <HAL_DMA_IRQHandler+0x4e>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8020778:	60aa      	str	r2, [r5, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 802077a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 802077c:	f042 0202 	orr.w	r2, r2, #2
 8020780:	6562      	str	r2, [r4, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8020782:	2204      	movs	r2, #4
 8020784:	409a      	lsls	r2, r3
 8020786:	4232      	tst	r2, r6
 8020788:	d008      	beq.n	802079c <HAL_DMA_IRQHandler+0x68>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 802078a:	6821      	ldr	r1, [r4, #0]
 802078c:	6809      	ldr	r1, [r1, #0]
 802078e:	0788      	lsls	r0, r1, #30
 8020790:	d504      	bpl.n	802079c <HAL_DMA_IRQHandler+0x68>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8020792:	60aa      	str	r2, [r5, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8020794:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8020796:	f042 0204 	orr.w	r2, r2, #4
 802079a:	6562      	str	r2, [r4, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 802079c:	2210      	movs	r2, #16
 802079e:	409a      	lsls	r2, r3
 80207a0:	4232      	tst	r2, r6
 80207a2:	d010      	beq.n	80207c6 <HAL_DMA_IRQHandler+0x92>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80207a4:	6823      	ldr	r3, [r4, #0]
 80207a6:	6819      	ldr	r1, [r3, #0]
 80207a8:	0709      	lsls	r1, r1, #28
 80207aa:	d50c      	bpl.n	80207c6 <HAL_DMA_IRQHandler+0x92>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80207ac:	60aa      	str	r2, [r5, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80207ae:	681a      	ldr	r2, [r3, #0]
 80207b0:	0350      	lsls	r0, r2, #13
 80207b2:	d537      	bpl.n	8020824 <HAL_DMA_IRQHandler+0xf0>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80207b4:	681b      	ldr	r3, [r3, #0]
 80207b6:	0319      	lsls	r1, r3, #12
 80207b8:	d401      	bmi.n	80207be <HAL_DMA_IRQHandler+0x8a>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80207ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80207bc:	e000      	b.n	80207c0 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80207be:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 80207c0:	b10b      	cbz	r3, 80207c6 <HAL_DMA_IRQHandler+0x92>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80207c2:	4620      	mov	r0, r4
 80207c4:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80207c6:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80207c8:	2220      	movs	r2, #32
 80207ca:	408a      	lsls	r2, r1
 80207cc:	4232      	tst	r2, r6
 80207ce:	d03a      	beq.n	8020846 <HAL_DMA_IRQHandler+0x112>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80207d0:	6823      	ldr	r3, [r4, #0]
 80207d2:	6818      	ldr	r0, [r3, #0]
 80207d4:	06c6      	lsls	r6, r0, #27
 80207d6:	d536      	bpl.n	8020846 <HAL_DMA_IRQHandler+0x112>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80207d8:	60aa      	str	r2, [r5, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80207da:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 80207de:	2a05      	cmp	r2, #5
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80207e0:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80207e2:	d127      	bne.n	8020834 <HAL_DMA_IRQHandler+0x100>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80207e4:	f022 0216 	bic.w	r2, r2, #22
 80207e8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80207ea:	695a      	ldr	r2, [r3, #20]
 80207ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80207f0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80207f2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80207f4:	b90a      	cbnz	r2, 80207fa <HAL_DMA_IRQHandler+0xc6>
 80207f6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80207f8:	b11a      	cbz	r2, 8020802 <HAL_DMA_IRQHandler+0xce>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80207fa:	681a      	ldr	r2, [r3, #0]
 80207fc:	f022 0208 	bic.w	r2, r2, #8
 8020800:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8020802:	233f      	movs	r3, #63	; 0x3f
 8020804:	408b      	lsls	r3, r1
 8020806:	60ab      	str	r3, [r5, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8020808:	2300      	movs	r3, #0
 802080a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 802080e:	2301      	movs	r3, #1
 8020810:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8020814:	6d23      	ldr	r3, [r4, #80]	; 0x50

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
    }

    if(hdma->XferErrorCallback != NULL)
 8020816:	2b00      	cmp	r3, #0
 8020818:	d045      	beq.n	80208a6 <HAL_DMA_IRQHandler+0x172>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 802081a:	4620      	mov	r0, r4
    }
  }
}
 802081c:	b003      	add	sp, #12
 802081e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 8020822:	4718      	bx	r3
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8020824:	681a      	ldr	r2, [r3, #0]
 8020826:	05d2      	lsls	r2, r2, #23
 8020828:	d4c7      	bmi.n	80207ba <HAL_DMA_IRQHandler+0x86>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 802082a:	681a      	ldr	r2, [r3, #0]
 802082c:	f022 0208 	bic.w	r2, r2, #8
 8020830:	601a      	str	r2, [r3, #0]
 8020832:	e7c2      	b.n	80207ba <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8020834:	0350      	lsls	r0, r2, #13
 8020836:	d527      	bpl.n	8020888 <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8020838:	681b      	ldr	r3, [r3, #0]
 802083a:	0319      	lsls	r1, r3, #12
 802083c:	d431      	bmi.n	80208a2 <HAL_DMA_IRQHandler+0x16e>
          if(hdma->XferM1CpltCallback != NULL)
 802083e:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 8020840:	b10b      	cbz	r3, 8020846 <HAL_DMA_IRQHandler+0x112>
          hdma->XferCpltCallback(hdma);
 8020842:	4620      	mov	r0, r4
 8020844:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8020846:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8020848:	b36b      	cbz	r3, 80208a6 <HAL_DMA_IRQHandler+0x172>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 802084a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 802084c:	07da      	lsls	r2, r3, #31
 802084e:	d519      	bpl.n	8020884 <HAL_DMA_IRQHandler+0x150>
  uint32_t timeout = SystemCoreClock / 9600;
 8020850:	f44f 5316 	mov.w	r3, #9600	; 0x2580
      __HAL_DMA_DISABLE(hdma);
 8020854:	6822      	ldr	r2, [r4, #0]
  uint32_t timeout = SystemCoreClock / 9600;
 8020856:	fbb7 f7f3 	udiv	r7, r7, r3
      hdma->State = HAL_DMA_STATE_ABORT;
 802085a:	2305      	movs	r3, #5
 802085c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8020860:	6813      	ldr	r3, [r2, #0]
 8020862:	f023 0301 	bic.w	r3, r3, #1
 8020866:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8020868:	9b01      	ldr	r3, [sp, #4]
 802086a:	3301      	adds	r3, #1
 802086c:	42bb      	cmp	r3, r7
 802086e:	9301      	str	r3, [sp, #4]
 8020870:	d802      	bhi.n	8020878 <HAL_DMA_IRQHandler+0x144>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8020872:	6813      	ldr	r3, [r2, #0]
 8020874:	07db      	lsls	r3, r3, #31
 8020876:	d4f7      	bmi.n	8020868 <HAL_DMA_IRQHandler+0x134>
      __HAL_UNLOCK(hdma);
 8020878:	2300      	movs	r3, #0
 802087a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 802087e:	2301      	movs	r3, #1
 8020880:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8020884:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8020886:	e7c6      	b.n	8020816 <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8020888:	681a      	ldr	r2, [r3, #0]
 802088a:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 802088e:	d108      	bne.n	80208a2 <HAL_DMA_IRQHandler+0x16e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8020890:	6819      	ldr	r1, [r3, #0]
 8020892:	f021 0110 	bic.w	r1, r1, #16
 8020896:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8020898:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 802089a:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 802089e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 80208a2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80208a4:	e7cc      	b.n	8020840 <HAL_DMA_IRQHandler+0x10c>
}
 80208a6:	b003      	add	sp, #12
 80208a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80208aa:	bf00      	nop
 80208ac:	20000000 	.word	0x20000000

080208b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80208b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80208b4:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80208b6:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8020a74 <HAL_GPIO_Init+0x1c4>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80208ba:	4a6c      	ldr	r2, [pc, #432]	; (8020a6c <HAL_GPIO_Init+0x1bc>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80208bc:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 8020a78 <HAL_GPIO_Init+0x1c8>
    ioposition = ((uint32_t)0x01) << position;
 80208c0:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80208c2:	680d      	ldr	r5, [r1, #0]
    ioposition = ((uint32_t)0x01) << position;
 80208c4:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80208c6:	ea04 0605 	and.w	r6, r4, r5
    if(iocurrent == ioposition)
 80208ca:	43ac      	bics	r4, r5
 80208cc:	f040 80b4 	bne.w	8020a38 <HAL_GPIO_Init+0x188>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80208d0:	684c      	ldr	r4, [r1, #4]
 80208d2:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80208d6:	2503      	movs	r5, #3
 80208d8:	f024 0c10 	bic.w	ip, r4, #16
 80208dc:	fa05 f50e 	lsl.w	r5, r5, lr
 80208e0:	f10c 37ff 	add.w	r7, ip, #4294967295
 80208e4:	43ed      	mvns	r5, r5
 80208e6:	2f01      	cmp	r7, #1
 80208e8:	d811      	bhi.n	802090e <HAL_GPIO_Init+0x5e>
        temp = GPIOx->OSPEEDR; 
 80208ea:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80208ec:	ea07 0a05 	and.w	sl, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2));
 80208f0:	68cf      	ldr	r7, [r1, #12]
 80208f2:	fa07 f70e 	lsl.w	r7, r7, lr
 80208f6:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 80208fa:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80208fc:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80208fe:	ea27 0a06 	bic.w	sl, r7, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8020902:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8020906:	409f      	lsls	r7, r3
 8020908:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OTYPER = temp;
 802090c:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 802090e:	68c7      	ldr	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8020910:	f1bc 0f02 	cmp.w	ip, #2
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8020914:	ea07 0a05 	and.w	sl, r7, r5
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8020918:	688f      	ldr	r7, [r1, #8]
 802091a:	fa07 f70e 	lsl.w	r7, r7, lr
 802091e:	ea47 070a 	orr.w	r7, r7, sl
      GPIOx->PUPDR = temp;
 8020922:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8020924:	d116      	bne.n	8020954 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3];
 8020926:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 802092a:	f003 0b07 	and.w	fp, r3, #7
 802092e:	f04f 0c0f 	mov.w	ip, #15
 8020932:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8020936:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 802093a:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 802093e:	fa0c fc0b 	lsl.w	ip, ip, fp
 8020942:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8020946:	690f      	ldr	r7, [r1, #16]
 8020948:	fa07 f70b 	lsl.w	r7, r7, fp
 802094c:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3] = temp;
 8020950:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 8020954:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8020956:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8020958:	f004 0703 	and.w	r7, r4, #3
 802095c:	fa07 fe0e 	lsl.w	lr, r7, lr
 8020960:	ea4e 0505 	orr.w	r5, lr, r5
      GPIOx->MODER = temp;
 8020964:	6005      	str	r5, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8020966:	00e5      	lsls	r5, r4, #3
 8020968:	d566      	bpl.n	8020a38 <HAL_GPIO_Init+0x188>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 802096a:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 802096e:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8020972:	f003 0c03 	and.w	ip, r3, #3
 8020976:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 802097a:	f445 4580 	orr.w	r5, r5, #16384	; 0x4000
 802097e:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8020982:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8020986:	f8c8 5044 	str.w	r5, [r8, #68]	; 0x44
 802098a:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 802098e:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 8020992:	f405 4580 	and.w	r5, r5, #16384	; 0x4000
 8020996:	9501      	str	r5, [sp, #4]
 8020998:	9d01      	ldr	r5, [sp, #4]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 802099a:	fa0e f50c 	lsl.w	r5, lr, ip
        temp = SYSCFG->EXTICR[position >> 2];
 802099e:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80209a2:	ea2a 0e05 	bic.w	lr, sl, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80209a6:	4d32      	ldr	r5, [pc, #200]	; (8020a70 <HAL_GPIO_Init+0x1c0>)
 80209a8:	42a8      	cmp	r0, r5
 80209aa:	d04c      	beq.n	8020a46 <HAL_GPIO_Init+0x196>
 80209ac:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80209b0:	42a8      	cmp	r0, r5
 80209b2:	d04a      	beq.n	8020a4a <HAL_GPIO_Init+0x19a>
 80209b4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80209b8:	42a8      	cmp	r0, r5
 80209ba:	d048      	beq.n	8020a4e <HAL_GPIO_Init+0x19e>
 80209bc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80209c0:	42a8      	cmp	r0, r5
 80209c2:	d046      	beq.n	8020a52 <HAL_GPIO_Init+0x1a2>
 80209c4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80209c8:	42a8      	cmp	r0, r5
 80209ca:	d044      	beq.n	8020a56 <HAL_GPIO_Init+0x1a6>
 80209cc:	4548      	cmp	r0, r9
 80209ce:	d044      	beq.n	8020a5a <HAL_GPIO_Init+0x1aa>
 80209d0:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80209d4:	42a8      	cmp	r0, r5
 80209d6:	d042      	beq.n	8020a5e <HAL_GPIO_Init+0x1ae>
 80209d8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80209dc:	42a8      	cmp	r0, r5
 80209de:	d040      	beq.n	8020a62 <HAL_GPIO_Init+0x1b2>
 80209e0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80209e4:	42a8      	cmp	r0, r5
 80209e6:	d03e      	beq.n	8020a66 <HAL_GPIO_Init+0x1b6>
 80209e8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80209ec:	42a8      	cmp	r0, r5
 80209ee:	bf0c      	ite	eq
 80209f0:	2509      	moveq	r5, #9
 80209f2:	250a      	movne	r5, #10
 80209f4:	fa05 f50c 	lsl.w	r5, r5, ip
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80209f8:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80209fc:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8020a00:	60bd      	str	r5, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 8020a02:	ea6f 0706 	mvn.w	r7, r6
        temp = EXTI->IMR;
 8020a06:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8020a08:	bf0c      	ite	eq
 8020a0a:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8020a0c:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8020a0e:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        EXTI->IMR = temp;
 8020a12:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8020a14:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8020a16:	bf0c      	ite	eq
 8020a18:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8020a1a:	4335      	orrne	r5, r6
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8020a1c:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        EXTI->EMR = temp;
 8020a20:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8020a22:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8020a24:	bf0c      	ite	eq
 8020a26:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8020a28:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8020a2a:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR = temp;
 8020a2c:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8020a2e:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8020a30:	bf54      	ite	pl
 8020a32:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8020a34:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8020a36:	60d5      	str	r5, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8020a38:	3301      	adds	r3, #1
 8020a3a:	2b10      	cmp	r3, #16
 8020a3c:	f47f af40 	bne.w	80208c0 <HAL_GPIO_Init+0x10>
      }
    }
  }
}
 8020a40:	b003      	add	sp, #12
 8020a42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8020a46:	2500      	movs	r5, #0
 8020a48:	e7d4      	b.n	80209f4 <HAL_GPIO_Init+0x144>
 8020a4a:	2501      	movs	r5, #1
 8020a4c:	e7d2      	b.n	80209f4 <HAL_GPIO_Init+0x144>
 8020a4e:	2502      	movs	r5, #2
 8020a50:	e7d0      	b.n	80209f4 <HAL_GPIO_Init+0x144>
 8020a52:	2503      	movs	r5, #3
 8020a54:	e7ce      	b.n	80209f4 <HAL_GPIO_Init+0x144>
 8020a56:	2504      	movs	r5, #4
 8020a58:	e7cc      	b.n	80209f4 <HAL_GPIO_Init+0x144>
 8020a5a:	2505      	movs	r5, #5
 8020a5c:	e7ca      	b.n	80209f4 <HAL_GPIO_Init+0x144>
 8020a5e:	2506      	movs	r5, #6
 8020a60:	e7c8      	b.n	80209f4 <HAL_GPIO_Init+0x144>
 8020a62:	2507      	movs	r5, #7
 8020a64:	e7c6      	b.n	80209f4 <HAL_GPIO_Init+0x144>
 8020a66:	2508      	movs	r5, #8
 8020a68:	e7c4      	b.n	80209f4 <HAL_GPIO_Init+0x144>
 8020a6a:	bf00      	nop
 8020a6c:	40013c00 	.word	0x40013c00
 8020a70:	40020000 	.word	0x40020000
 8020a74:	40023800 	.word	0x40023800
 8020a78:	40021400 	.word	0x40021400

08020a7c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8020a7c:	b10a      	cbz	r2, 8020a82 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8020a7e:	6181      	str	r1, [r0, #24]
  }
}
 8020a80:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8020a82:	0409      	lsls	r1, r1, #16
 8020a84:	e7fb      	b.n	8020a7e <HAL_GPIO_WritePin+0x2>

08020a86 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8020a86:	6803      	ldr	r3, [r0, #0]
 8020a88:	699a      	ldr	r2, [r3, #24]
 8020a8a:	0791      	lsls	r1, r2, #30
 8020a8c:	d501      	bpl.n	8020a92 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8020a8e:	2200      	movs	r2, #0
 8020a90:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8020a92:	699a      	ldr	r2, [r3, #24]
 8020a94:	07d2      	lsls	r2, r2, #31
 8020a96:	d403      	bmi.n	8020aa0 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8020a98:	699a      	ldr	r2, [r3, #24]
 8020a9a:	f042 0201 	orr.w	r2, r2, #1
 8020a9e:	619a      	str	r2, [r3, #24]
  }
}
 8020aa0:	4770      	bx	lr
	...

08020aa4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8020aa4:	b530      	push	{r4, r5, lr}
 8020aa6:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8020aa8:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8020aac:	6804      	ldr	r4, [r0, #0]
 8020aae:	ea45 4202 	orr.w	r2, r5, r2, lsl #16
 8020ab2:	6860      	ldr	r0, [r4, #4]
 8020ab4:	431a      	orrs	r2, r3
 8020ab6:	4b04      	ldr	r3, [pc, #16]	; (8020ac8 <I2C_TransferConfig+0x24>)
 8020ab8:	ea43 5355 	orr.w	r3, r3, r5, lsr #21
 8020abc:	430a      	orrs	r2, r1
 8020abe:	ea20 0003 	bic.w	r0, r0, r3
 8020ac2:	4302      	orrs	r2, r0
 8020ac4:	6062      	str	r2, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8020ac6:	bd30      	pop	{r4, r5, pc}
 8020ac8:	03ff63ff 	.word	0x03ff63ff

08020acc <I2C_IsAcknowledgeFailed>:
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8020acc:	6803      	ldr	r3, [r0, #0]
{
 8020ace:	b570      	push	{r4, r5, r6, lr}
 8020ad0:	4604      	mov	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8020ad2:	6998      	ldr	r0, [r3, #24]
{
 8020ad4:	460d      	mov	r5, r1
 8020ad6:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8020ad8:	f010 0010 	ands.w	r0, r0, #16
 8020adc:	d116      	bne.n	8020b0c <I2C_IsAcknowledgeFailed+0x40>
}
 8020ade:	bd70      	pop	{r4, r5, r6, pc}
      if (Timeout != HAL_MAX_DELAY)
 8020ae0:	1c69      	adds	r1, r5, #1
 8020ae2:	d014      	beq.n	8020b0e <I2C_IsAcknowledgeFailed+0x42>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8020ae4:	f7ff fdce 	bl	8020684 <HAL_GetTick>
 8020ae8:	1b80      	subs	r0, r0, r6
 8020aea:	42a8      	cmp	r0, r5
 8020aec:	d800      	bhi.n	8020af0 <I2C_IsAcknowledgeFailed+0x24>
 8020aee:	b96d      	cbnz	r5, 8020b0c <I2C_IsAcknowledgeFailed+0x40>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8020af0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8020af2:	f043 0320 	orr.w	r3, r3, #32
 8020af6:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8020af8:	2320      	movs	r3, #32
 8020afa:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8020afe:	2300      	movs	r3, #0
    return HAL_ERROR;
 8020b00:	2001      	movs	r0, #1
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8020b02:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8020b06:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 8020b0a:	e7e8      	b.n	8020ade <I2C_IsAcknowledgeFailed+0x12>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8020b0c:	6823      	ldr	r3, [r4, #0]
 8020b0e:	699a      	ldr	r2, [r3, #24]
 8020b10:	0692      	lsls	r2, r2, #26
 8020b12:	d5e5      	bpl.n	8020ae0 <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8020b14:	2210      	movs	r2, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8020b16:	2520      	movs	r5, #32
    I2C_Flush_TXDR(hi2c);
 8020b18:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8020b1a:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8020b1c:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8020b1e:	f7ff ffb2 	bl	8020a86 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8020b22:	6822      	ldr	r2, [r4, #0]
 8020b24:	6853      	ldr	r3, [r2, #4]
 8020b26:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8020b2a:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8020b2e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8020b32:	f023 0301 	bic.w	r3, r3, #1
 8020b36:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8020b38:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8020b3a:	f043 0304 	orr.w	r3, r3, #4
 8020b3e:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8020b40:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
 8020b44:	e7db      	b.n	8020afe <I2C_IsAcknowledgeFailed+0x32>

08020b46 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8020b46:	b570      	push	{r4, r5, r6, lr}
 8020b48:	4604      	mov	r4, r0
 8020b4a:	460d      	mov	r5, r1
 8020b4c:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8020b4e:	6823      	ldr	r3, [r4, #0]
 8020b50:	699b      	ldr	r3, [r3, #24]
 8020b52:	069b      	lsls	r3, r3, #26
 8020b54:	d501      	bpl.n	8020b5a <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8020b56:	2000      	movs	r0, #0
}
 8020b58:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8020b5a:	4632      	mov	r2, r6
 8020b5c:	4629      	mov	r1, r5
 8020b5e:	4620      	mov	r0, r4
 8020b60:	f7ff ffb4 	bl	8020acc <I2C_IsAcknowledgeFailed>
 8020b64:	b990      	cbnz	r0, 8020b8c <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8020b66:	f7ff fd8d 	bl	8020684 <HAL_GetTick>
 8020b6a:	1b80      	subs	r0, r0, r6
 8020b6c:	42a8      	cmp	r0, r5
 8020b6e:	d801      	bhi.n	8020b74 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8020b70:	2d00      	cmp	r5, #0
 8020b72:	d1ec      	bne.n	8020b4e <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8020b74:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8020b76:	f043 0320 	orr.w	r3, r3, #32
 8020b7a:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8020b7c:	2320      	movs	r3, #32
 8020b7e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8020b82:	2300      	movs	r3, #0
 8020b84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8020b88:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8020b8c:	2001      	movs	r0, #1
 8020b8e:	e7e3      	b.n	8020b58 <I2C_WaitOnSTOPFlagUntilTimeout+0x12>

08020b90 <I2C_WaitOnFlagUntilTimeout>:
{
 8020b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020b94:	9f06      	ldr	r7, [sp, #24]
 8020b96:	4604      	mov	r4, r0
 8020b98:	4688      	mov	r8, r1
 8020b9a:	4616      	mov	r6, r2
 8020b9c:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8020b9e:	6822      	ldr	r2, [r4, #0]
 8020ba0:	6993      	ldr	r3, [r2, #24]
 8020ba2:	ea38 0303 	bics.w	r3, r8, r3
 8020ba6:	bf0c      	ite	eq
 8020ba8:	2301      	moveq	r3, #1
 8020baa:	2300      	movne	r3, #0
 8020bac:	42b3      	cmp	r3, r6
 8020bae:	d001      	beq.n	8020bb4 <I2C_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 8020bb0:	2000      	movs	r0, #0
 8020bb2:	e015      	b.n	8020be0 <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8020bb4:	1c6b      	adds	r3, r5, #1
 8020bb6:	d0f3      	beq.n	8020ba0 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8020bb8:	f7ff fd64 	bl	8020684 <HAL_GetTick>
 8020bbc:	1bc0      	subs	r0, r0, r7
 8020bbe:	42a8      	cmp	r0, r5
 8020bc0:	d801      	bhi.n	8020bc6 <I2C_WaitOnFlagUntilTimeout+0x36>
 8020bc2:	2d00      	cmp	r5, #0
 8020bc4:	d1eb      	bne.n	8020b9e <I2C_WaitOnFlagUntilTimeout+0xe>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8020bc6:	6c63      	ldr	r3, [r4, #68]	; 0x44
          __HAL_UNLOCK(hi2c);
 8020bc8:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8020bca:	f043 0320 	orr.w	r3, r3, #32
 8020bce:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8020bd0:	2320      	movs	r3, #32
 8020bd2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8020bd6:	2300      	movs	r3, #0
 8020bd8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8020bdc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8020be0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08020be4 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8020be4:	b570      	push	{r4, r5, r6, lr}
 8020be6:	4604      	mov	r4, r0
 8020be8:	460d      	mov	r5, r1
 8020bea:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8020bec:	6823      	ldr	r3, [r4, #0]
 8020bee:	699b      	ldr	r3, [r3, #24]
 8020bf0:	079b      	lsls	r3, r3, #30
 8020bf2:	d501      	bpl.n	8020bf8 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8020bf4:	2000      	movs	r0, #0
}
 8020bf6:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8020bf8:	4632      	mov	r2, r6
 8020bfa:	4629      	mov	r1, r5
 8020bfc:	4620      	mov	r0, r4
 8020bfe:	f7ff ff65 	bl	8020acc <I2C_IsAcknowledgeFailed>
 8020c02:	b9a0      	cbnz	r0, 8020c2e <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8020c04:	1c6a      	adds	r2, r5, #1
 8020c06:	d0f1      	beq.n	8020bec <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8020c08:	f7ff fd3c 	bl	8020684 <HAL_GetTick>
 8020c0c:	1b80      	subs	r0, r0, r6
 8020c0e:	42a8      	cmp	r0, r5
 8020c10:	d801      	bhi.n	8020c16 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8020c12:	2d00      	cmp	r5, #0
 8020c14:	d1ea      	bne.n	8020bec <I2C_WaitOnTXISFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8020c16:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8020c18:	f043 0320 	orr.w	r3, r3, #32
 8020c1c:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8020c1e:	2320      	movs	r3, #32
 8020c20:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8020c24:	2300      	movs	r3, #0
 8020c26:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8020c2a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8020c2e:	2001      	movs	r0, #1
 8020c30:	e7e1      	b.n	8020bf6 <I2C_WaitOnTXISFlagUntilTimeout+0x12>
	...

08020c34 <I2C_RequestMemoryRead>:
{
 8020c34:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8020c38:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8020c3a:	4b18      	ldr	r3, [pc, #96]	; (8020c9c <I2C_RequestMemoryRead+0x68>)
{
 8020c3c:	4605      	mov	r5, r0
 8020c3e:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8020c40:	9300      	str	r3, [sp, #0]
 8020c42:	b2f2      	uxtb	r2, r6
 8020c44:	2300      	movs	r3, #0
{
 8020c46:	e9dd 7808 	ldrd	r7, r8, [sp, #32]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8020c4a:	f7ff ff2b 	bl	8020aa4 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8020c4e:	4628      	mov	r0, r5
 8020c50:	4642      	mov	r2, r8
 8020c52:	4639      	mov	r1, r7
 8020c54:	f7ff ffc6 	bl	8020be4 <I2C_WaitOnTXISFlagUntilTimeout>
 8020c58:	b118      	cbz	r0, 8020c62 <I2C_RequestMemoryRead+0x2e>
    return HAL_ERROR;
 8020c5a:	2001      	movs	r0, #1
}
 8020c5c:	b002      	add	sp, #8
 8020c5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8020c62:	2e01      	cmp	r6, #1
 8020c64:	682b      	ldr	r3, [r5, #0]
 8020c66:	d10d      	bne.n	8020c84 <I2C_RequestMemoryRead+0x50>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8020c68:	b2e4      	uxtb	r4, r4
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8020c6a:	2200      	movs	r2, #0
 8020c6c:	2140      	movs	r1, #64	; 0x40
 8020c6e:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8020c70:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8020c72:	463b      	mov	r3, r7
 8020c74:	f8cd 8000 	str.w	r8, [sp]
 8020c78:	f7ff ff8a 	bl	8020b90 <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8020c7c:	3800      	subs	r0, #0
 8020c7e:	bf18      	it	ne
 8020c80:	2001      	movne	r0, #1
 8020c82:	e7eb      	b.n	8020c5c <I2C_RequestMemoryRead+0x28>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8020c84:	0a22      	lsrs	r2, r4, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8020c86:	4639      	mov	r1, r7
 8020c88:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8020c8a:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8020c8c:	4642      	mov	r2, r8
 8020c8e:	f7ff ffa9 	bl	8020be4 <I2C_WaitOnTXISFlagUntilTimeout>
 8020c92:	2800      	cmp	r0, #0
 8020c94:	d1e1      	bne.n	8020c5a <I2C_RequestMemoryRead+0x26>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8020c96:	682b      	ldr	r3, [r5, #0]
 8020c98:	e7e6      	b.n	8020c68 <I2C_RequestMemoryRead+0x34>
 8020c9a:	bf00      	nop
 8020c9c:	80002000 	.word	0x80002000

08020ca0 <HAL_I2C_Init>:
{
 8020ca0:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8020ca2:	4604      	mov	r4, r0
 8020ca4:	2800      	cmp	r0, #0
 8020ca6:	d04a      	beq.n	8020d3e <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8020ca8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8020cac:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8020cb0:	b91b      	cbnz	r3, 8020cba <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8020cb2:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8020cb6:	f7e0 fc55 	bl	8001564 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8020cba:	2324      	movs	r3, #36	; 0x24
 8020cbc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8020cc0:	6823      	ldr	r3, [r4, #0]
 8020cc2:	681a      	ldr	r2, [r3, #0]
 8020cc4:	f022 0201 	bic.w	r2, r2, #1
 8020cc8:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8020cca:	6862      	ldr	r2, [r4, #4]
 8020ccc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8020cd0:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8020cd2:	689a      	ldr	r2, [r3, #8]
 8020cd4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8020cd8:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8020cda:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8020cde:	2901      	cmp	r1, #1
 8020ce0:	d124      	bne.n	8020d2c <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8020ce2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8020ce6:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8020ce8:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8020cea:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8020cec:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8020cf0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8020cf4:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8020cf6:	68da      	ldr	r2, [r3, #12]
 8020cf8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8020cfc:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8020cfe:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 8020d02:	430a      	orrs	r2, r1
 8020d04:	69a1      	ldr	r1, [r4, #24]
 8020d06:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8020d0a:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8020d0c:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 8020d10:	430a      	orrs	r2, r1
 8020d12:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8020d14:	681a      	ldr	r2, [r3, #0]
 8020d16:	f042 0201 	orr.w	r2, r2, #1
 8020d1a:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8020d1c:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8020d1e:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8020d20:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8020d24:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8020d26:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8020d2a:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8020d2c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8020d30:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8020d32:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8020d34:	d1d8      	bne.n	8020ce8 <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8020d36:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8020d3a:	605a      	str	r2, [r3, #4]
 8020d3c:	e7d4      	b.n	8020ce8 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8020d3e:	2001      	movs	r0, #1
 8020d40:	e7f3      	b.n	8020d2a <HAL_I2C_Init+0x8a>
	...

08020d44 <HAL_I2C_Mem_Read>:
{
 8020d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020d48:	b085      	sub	sp, #20
 8020d4a:	469b      	mov	fp, r3
 8020d4c:	4604      	mov	r4, r0
 8020d4e:	460f      	mov	r7, r1
 8020d50:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8020d54:	4692      	mov	sl, r2
 8020d56:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
 8020d5a:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8020d5c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8020d60:	2b20      	cmp	r3, #32
 8020d62:	f040 80a7 	bne.w	8020eb4 <HAL_I2C_Mem_Read+0x170>
    if ((pData == NULL) || (Size == 0U))
 8020d66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020d68:	b10b      	cbz	r3, 8020d6e <HAL_I2C_Mem_Read+0x2a>
 8020d6a:	9b03      	ldr	r3, [sp, #12]
 8020d6c:	b933      	cbnz	r3, 8020d7c <HAL_I2C_Mem_Read+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8020d6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8020d72:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8020d74:	2001      	movs	r0, #1
}
 8020d76:	b005      	add	sp, #20
 8020d78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8020d7c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8020d80:	2b01      	cmp	r3, #1
 8020d82:	f000 8097 	beq.w	8020eb4 <HAL_I2C_Mem_Read+0x170>
 8020d86:	2501      	movs	r5, #1
 8020d88:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8020d8c:	f7ff fc7a 	bl	8020684 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8020d90:	2319      	movs	r3, #25
 8020d92:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8020d94:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8020d96:	462a      	mov	r2, r5
 8020d98:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8020d9c:	4620      	mov	r0, r4
 8020d9e:	f7ff fef7 	bl	8020b90 <I2C_WaitOnFlagUntilTimeout>
 8020da2:	4680      	mov	r8, r0
 8020da4:	2800      	cmp	r0, #0
 8020da6:	d1e5      	bne.n	8020d74 <HAL_I2C_Mem_Read+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8020da8:	2322      	movs	r3, #34	; 0x22
    hi2c->XferISR   = NULL;
 8020daa:	6360      	str	r0, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8020dac:	4652      	mov	r2, sl
 8020dae:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8020db0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8020db4:	2340      	movs	r3, #64	; 0x40
 8020db6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8020dba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8020dbc:	6460      	str	r0, [r4, #68]	; 0x44
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8020dbe:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8020dc0:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8020dc2:	9b03      	ldr	r3, [sp, #12]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8020dc4:	e9cd 9600 	strd	r9, r6, [sp]
    hi2c->XferCount = Size;
 8020dc8:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8020dca:	465b      	mov	r3, fp
 8020dcc:	f7ff ff32 	bl	8020c34 <I2C_RequestMemoryRead>
 8020dd0:	b110      	cbz	r0, 8020dd8 <HAL_I2C_Mem_Read+0x94>
      __HAL_UNLOCK(hi2c);
 8020dd2:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      return HAL_ERROR;
 8020dd6:	e7cd      	b.n	8020d74 <HAL_I2C_Mem_Read+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8020dd8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8020dda:	b29b      	uxth	r3, r3
 8020ddc:	2bff      	cmp	r3, #255	; 0xff
 8020dde:	4b36      	ldr	r3, [pc, #216]	; (8020eb8 <HAL_I2C_Mem_Read+0x174>)
 8020de0:	d958      	bls.n	8020e94 <HAL_I2C_Mem_Read+0x150>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8020de2:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8020de4:	9300      	str	r3, [sp, #0]
 8020de6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8020dea:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8020dec:	4639      	mov	r1, r7
 8020dee:	4620      	mov	r0, r4
 8020df0:	f7ff fe58 	bl	8020aa4 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8020df4:	464b      	mov	r3, r9
 8020df6:	2200      	movs	r2, #0
 8020df8:	2104      	movs	r1, #4
 8020dfa:	4620      	mov	r0, r4
 8020dfc:	9600      	str	r6, [sp, #0]
 8020dfe:	f7ff fec7 	bl	8020b90 <I2C_WaitOnFlagUntilTimeout>
 8020e02:	2800      	cmp	r0, #0
 8020e04:	d1b6      	bne.n	8020d74 <HAL_I2C_Mem_Read+0x30>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8020e06:	6823      	ldr	r3, [r4, #0]
 8020e08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8020e0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8020e0c:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8020e0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8020e10:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8020e12:	3301      	adds	r3, #1
      hi2c->XferSize--;
 8020e14:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 8020e16:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8020e18:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8020e1a:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8020e1c:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8020e1e:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8020e20:	b29b      	uxth	r3, r3
 8020e22:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8020e24:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8020e26:	b29b      	uxth	r3, r3
 8020e28:	b1ab      	cbz	r3, 8020e56 <HAL_I2C_Mem_Read+0x112>
 8020e2a:	b9a2      	cbnz	r2, 8020e56 <HAL_I2C_Mem_Read+0x112>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8020e2c:	464b      	mov	r3, r9
 8020e2e:	2180      	movs	r1, #128	; 0x80
 8020e30:	4620      	mov	r0, r4
 8020e32:	9600      	str	r6, [sp, #0]
 8020e34:	f7ff feac 	bl	8020b90 <I2C_WaitOnFlagUntilTimeout>
 8020e38:	2800      	cmp	r0, #0
 8020e3a:	d19b      	bne.n	8020d74 <HAL_I2C_Mem_Read+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8020e3c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8020e3e:	b29b      	uxth	r3, r3
 8020e40:	2bff      	cmp	r3, #255	; 0xff
 8020e42:	d92f      	bls.n	8020ea4 <HAL_I2C_Mem_Read+0x160>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8020e44:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8020e46:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8020e4a:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8020e4c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8020e4e:	4639      	mov	r1, r7
 8020e50:	4620      	mov	r0, r4
 8020e52:	f7ff fe27 	bl	8020aa4 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8020e56:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8020e58:	b29b      	uxth	r3, r3
 8020e5a:	2b00      	cmp	r3, #0
 8020e5c:	d1ca      	bne.n	8020df4 <HAL_I2C_Mem_Read+0xb0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8020e5e:	4632      	mov	r2, r6
 8020e60:	4649      	mov	r1, r9
 8020e62:	4620      	mov	r0, r4
 8020e64:	f7ff fe6f 	bl	8020b46 <I2C_WaitOnSTOPFlagUntilTimeout>
 8020e68:	2800      	cmp	r0, #0
 8020e6a:	d183      	bne.n	8020d74 <HAL_I2C_Mem_Read+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8020e6c:	6823      	ldr	r3, [r4, #0]
 8020e6e:	2120      	movs	r1, #32
 8020e70:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8020e72:	685a      	ldr	r2, [r3, #4]
 8020e74:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8020e78:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8020e7c:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8020e80:	f022 0201 	bic.w	r2, r2, #1
 8020e84:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8020e86:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8020e8a:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8020e8e:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8020e92:	e770      	b.n	8020d76 <HAL_I2C_Mem_Read+0x32>
      hi2c->XferSize = hi2c->XferCount;
 8020e94:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8020e96:	9300      	str	r3, [sp, #0]
 8020e98:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 8020e9c:	b292      	uxth	r2, r2
 8020e9e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8020ea0:	b2d2      	uxtb	r2, r2
 8020ea2:	e7a3      	b.n	8020dec <HAL_I2C_Mem_Read+0xa8>
          hi2c->XferSize = hi2c->XferCount;
 8020ea4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8020ea6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8020eaa:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8020eac:	b292      	uxth	r2, r2
 8020eae:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8020eb0:	b2d2      	uxtb	r2, r2
 8020eb2:	e7cc      	b.n	8020e4e <HAL_I2C_Mem_Read+0x10a>
    return HAL_BUSY;
 8020eb4:	2002      	movs	r0, #2
 8020eb6:	e75e      	b.n	8020d76 <HAL_I2C_Mem_Read+0x32>
 8020eb8:	80002400 	.word	0x80002400

08020ebc <HAL_I2C_EV_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8020ebc:	6802      	ldr	r2, [r0, #0]
  if (hi2c->XferISR != NULL)
 8020ebe:	6b43      	ldr	r3, [r0, #52]	; 0x34
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8020ec0:	6991      	ldr	r1, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8020ec2:	6812      	ldr	r2, [r2, #0]
  if (hi2c->XferISR != NULL)
 8020ec4:	b103      	cbz	r3, 8020ec8 <HAL_I2C_EV_IRQHandler+0xc>
    hi2c->XferISR(hi2c, itflags, itsources);
 8020ec6:	4718      	bx	r3
}
 8020ec8:	4770      	bx	lr

08020eca <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8020eca:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8020ecc:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8020ed0:	2b20      	cmp	r3, #32
 8020ed2:	b2dc      	uxtb	r4, r3
 8020ed4:	d11d      	bne.n	8020f12 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8020ed6:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8020eda:	2b01      	cmp	r3, #1
 8020edc:	d019      	beq.n	8020f12 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8020ede:	2324      	movs	r3, #36	; 0x24
 8020ee0:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8020ee4:	6803      	ldr	r3, [r0, #0]
 8020ee6:	681a      	ldr	r2, [r3, #0]
 8020ee8:	f022 0201 	bic.w	r2, r2, #1
 8020eec:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8020eee:	681a      	ldr	r2, [r3, #0]
 8020ef0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8020ef4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8020ef6:	681a      	ldr	r2, [r3, #0]
 8020ef8:	4311      	orrs	r1, r2
 8020efa:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8020efc:	681a      	ldr	r2, [r3, #0]
 8020efe:	f042 0201 	orr.w	r2, r2, #1
 8020f02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8020f04:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8020f06:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8020f0a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8020f0e:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8020f10:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8020f12:	2002      	movs	r0, #2
 8020f14:	e7fc      	b.n	8020f10 <HAL_I2CEx_ConfigAnalogFilter+0x46>

08020f16 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8020f16:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8020f18:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8020f1c:	2b20      	cmp	r3, #32
 8020f1e:	b2dc      	uxtb	r4, r3
 8020f20:	d11c      	bne.n	8020f5c <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8020f22:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8020f26:	2b01      	cmp	r3, #1
 8020f28:	d018      	beq.n	8020f5c <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8020f2a:	2324      	movs	r3, #36	; 0x24
 8020f2c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8020f30:	6803      	ldr	r3, [r0, #0]
 8020f32:	681a      	ldr	r2, [r3, #0]
 8020f34:	f022 0201 	bic.w	r2, r2, #1
 8020f38:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8020f3a:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8020f3c:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8020f40:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8020f44:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8020f46:	681a      	ldr	r2, [r3, #0]
 8020f48:	f042 0201 	orr.w	r2, r2, #1
 8020f4c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8020f4e:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8020f50:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8020f54:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8020f58:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8020f5a:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8020f5c:	2002      	movs	r0, #2
 8020f5e:	e7fc      	b.n	8020f5a <HAL_I2CEx_ConfigDigitalFilter+0x44>

08020f60 <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8020f60:	01d2      	lsls	r2, r2, #7
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8020f62:	f8d1 c000 	ldr.w	ip, [r1]
{
 8020f66:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8020f6a:	3284      	adds	r2, #132	; 0x84
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8020f6c:	6804      	ldr	r4, [r0, #0]
 8020f6e:	684f      	ldr	r7, [r1, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8020f70:	f10c 0601 	add.w	r6, ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8020f74:	18a3      	adds	r3, r4, r2
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8020f76:	68e5      	ldr	r5, [r4, #12]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8020f78:	f04f 0e00 	mov.w	lr, #0
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8020f7c:	f8d1 9018 	ldr.w	r9, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8020f80:	6858      	ldr	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8020f82:	f3c5 450b 	ubfx	r5, r5, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8020f86:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8020f8a:	443d      	add	r5, r7
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8020f8c:	6058      	str	r0, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8020f8e:	68e0      	ldr	r0, [r4, #12]
 8020f90:	f3c0 400b 	ubfx	r0, r0, #16, #12
 8020f94:	4430      	add	r0, r6
 8020f96:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8020f9a:	68cd      	ldr	r5, [r1, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8020f9c:	6058      	str	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8020f9e:	68e0      	ldr	r0, [r4, #12]
 8020fa0:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8020fa4:	4405      	add	r5, r0
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8020fa6:	6898      	ldr	r0, [r3, #8]
 8020fa8:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
 8020fac:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8020fae:	6888      	ldr	r0, [r1, #8]
 8020fb0:	68e6      	ldr	r6, [r4, #12]
 8020fb2:	3001      	adds	r0, #1
 8020fb4:	f3c6 060a 	ubfx	r6, r6, #0, #11
 8020fb8:	4430      	add	r0, r6
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8020fba:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8020fbc:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8020fc0:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8020fc2:	6918      	ldr	r0, [r3, #16]
 8020fc4:	f020 0007 	bic.w	r0, r0, #7
 8020fc8:	6118      	str	r0, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8020fca:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8020fcc:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8020fce:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8020fd2:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8020fd6:	f8c3 e018 	str.w	lr, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8020fda:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 8020fde:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 8020fe2:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 8020fe6:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8020fea:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8020fec:	6958      	ldr	r0, [r3, #20]
 8020fee:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 8020ff2:	6158      	str	r0, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8020ff4:	6948      	ldr	r0, [r1, #20]
 8020ff6:	6158      	str	r0, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8020ff8:	69d8      	ldr	r0, [r3, #28]
 8020ffa:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 8020ffe:	f020 0007 	bic.w	r0, r0, #7
 8021002:	61d8      	str	r0, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8021004:	e9d1 5007 	ldrd	r5, r0, [r1, #28]
 8021008:	4305      	orrs	r5, r0
 802100a:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 802100c:	6a98      	ldr	r0, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 802100e:	6a48      	ldr	r0, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8021010:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8021014:	6298      	str	r0, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8021016:	b31e      	cbz	r6, 8021060 <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8021018:	2e01      	cmp	r6, #1
 802101a:	d023      	beq.n	8021064 <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 802101c:	1eb0      	subs	r0, r6, #2
 802101e:	2802      	cmp	r0, #2
 8021020:	d922      	bls.n	8021068 <LTDC_SetConfig+0x108>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8021022:	2e07      	cmp	r6, #7
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 8021024:	bf0c      	ite	eq
 8021026:	2002      	moveq	r0, #2
 8021028:	2001      	movne	r0, #1
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 802102a:	6add      	ldr	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 802102c:	eba7 070c 	sub.w	r7, r7, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8021030:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
 8021034:	62dd      	str	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8021036:	6a8d      	ldr	r5, [r1, #40]	; 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8021038:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 802103a:	4345      	muls	r5, r0
 802103c:	4378      	muls	r0, r7
 802103e:	3003      	adds	r0, #3
 8021040:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8021044:	62d8      	str	r0, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8021046:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8021048:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 802104c:	f020 0007 	bic.w	r0, r0, #7
 8021050:	6318      	str	r0, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8021052:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8021054:	58a3      	ldr	r3, [r4, r2]
 8021056:	f043 0301 	orr.w	r3, r3, #1
 802105a:	50a3      	str	r3, [r4, r2]
}
 802105c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 8021060:	2004      	movs	r0, #4
 8021062:	e7e2      	b.n	802102a <LTDC_SetConfig+0xca>
    tmp = 3U;
 8021064:	2003      	movs	r0, #3
 8021066:	e7e0      	b.n	802102a <LTDC_SetConfig+0xca>
    tmp = 2U;
 8021068:	2002      	movs	r0, #2
 802106a:	e7de      	b.n	802102a <LTDC_SetConfig+0xca>

0802106c <HAL_LTDC_Init>:
{
 802106c:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 802106e:	4604      	mov	r4, r0
 8021070:	2800      	cmp	r0, #0
 8021072:	d063      	beq.n	802113c <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8021074:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8021078:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 802107c:	b91b      	cbnz	r3, 8021086 <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 802107e:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 8021082:	f7e0 faad 	bl	80015e0 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8021086:	2302      	movs	r3, #2
 8021088:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 802108c:	6823      	ldr	r3, [r4, #0]
 802108e:	699a      	ldr	r2, [r3, #24]
 8021090:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8021094:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8021096:	6999      	ldr	r1, [r3, #24]
 8021098:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 802109c:	4302      	orrs	r2, r0
 802109e:	68e0      	ldr	r0, [r4, #12]
 80210a0:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80210a2:	6920      	ldr	r0, [r4, #16]
 80210a4:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80210a6:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80210a8:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80210aa:	4925      	ldr	r1, [pc, #148]	; (8021140 <HAL_LTDC_Init+0xd4>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80210ac:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80210ae:	689a      	ldr	r2, [r3, #8]
 80210b0:	400a      	ands	r2, r1
 80210b2:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80210b4:	689a      	ldr	r2, [r3, #8]
 80210b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80210ba:	69a0      	ldr	r0, [r4, #24]
 80210bc:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80210be:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80210c0:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80210c2:	68da      	ldr	r2, [r3, #12]
 80210c4:	400a      	ands	r2, r1
 80210c6:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80210c8:	68da      	ldr	r2, [r3, #12]
 80210ca:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80210ce:	6a20      	ldr	r0, [r4, #32]
 80210d0:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80210d2:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80210d4:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80210d6:	691a      	ldr	r2, [r3, #16]
 80210d8:	400a      	ands	r2, r1
 80210da:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80210dc:	691a      	ldr	r2, [r3, #16]
 80210de:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80210e2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80210e4:	4302      	orrs	r2, r0
 80210e6:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80210e8:	695a      	ldr	r2, [r3, #20]
 80210ea:	4011      	ands	r1, r2
 80210ec:	6159      	str	r1, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80210ee:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80210f0:	695a      	ldr	r2, [r3, #20]
 80210f2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80210f6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80210f8:	430a      	orrs	r2, r1
 80210fa:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80210fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80210fe:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8021102:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8021106:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 802110a:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 802110c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 802110e:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 8021112:	430a      	orrs	r2, r1
 8021114:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8021118:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 802111c:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 802111e:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8021120:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8021122:	f042 0206 	orr.w	r2, r2, #6
 8021126:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8021128:	699a      	ldr	r2, [r3, #24]
 802112a:	f042 0201 	orr.w	r2, r2, #1
 802112e:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 8021130:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8021132:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8021136:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 802113a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 802113c:	2001      	movs	r0, #1
 802113e:	e7fc      	b.n	802113a <HAL_LTDC_Init+0xce>
 8021140:	f000f800 	.word	0xf000f800

08021144 <HAL_LTDC_ConfigLayer>:
{
 8021144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 8021148:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
{
 802114c:	4606      	mov	r6, r0
 802114e:	460f      	mov	r7, r1
 8021150:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 8021152:	2b01      	cmp	r3, #1
 8021154:	f04f 0002 	mov.w	r0, #2
 8021158:	d01f      	beq.n	802119a <HAL_LTDC_ConfigLayer+0x56>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 802115a:	2434      	movs	r4, #52	; 0x34
  __HAL_LOCK(hltdc);
 802115c:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8021160:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8021162:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8021166:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 802116a:	f886 80a0 	strb.w	r8, [r6, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 802116e:	3438      	adds	r4, #56	; 0x38
 8021170:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8021172:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8021174:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8021176:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8021178:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802117a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802117c:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 802117e:	4630      	mov	r0, r6
 8021180:	4662      	mov	r2, ip
 8021182:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8021184:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8021186:	f7ff feeb 	bl	8020f60 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 802118a:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 802118c:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 802118e:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8021192:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8021196:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 802119a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080211a0 <HAL_LTDC_EnableDither>:
  __HAL_LOCK(hltdc);
 80211a0:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 80211a4:	2b01      	cmp	r3, #1
 80211a6:	f04f 0302 	mov.w	r3, #2
 80211aa:	d00c      	beq.n	80211c6 <HAL_LTDC_EnableDither+0x26>
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 80211ac:	4a07      	ldr	r2, [pc, #28]	; (80211cc <HAL_LTDC_EnableDither+0x2c>)
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80211ae:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 80211b2:	6993      	ldr	r3, [r2, #24]
 80211b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80211b8:	6193      	str	r3, [r2, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 80211ba:	2301      	movs	r3, #1
 80211bc:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 80211c0:	2300      	movs	r3, #0
 80211c2:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  __HAL_LOCK(hltdc);
 80211c6:	4618      	mov	r0, r3
}
 80211c8:	4770      	bx	lr
 80211ca:	bf00      	nop
 80211cc:	40016800 	.word	0x40016800

080211d0 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 80211d0:	4b19      	ldr	r3, [pc, #100]	; (8021238 <HAL_PWREx_EnableOverDrive+0x68>)
{
 80211d2:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 80211d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80211d6:	4c19      	ldr	r4, [pc, #100]	; (802123c <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80211d8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80211dc:	641a      	str	r2, [r3, #64]	; 0x40
 80211de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80211e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80211e4:	9301      	str	r3, [sp, #4]
 80211e6:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 80211e8:	6823      	ldr	r3, [r4, #0]
 80211ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80211ee:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80211f0:	f7ff fa48 	bl	8020684 <HAL_GetTick>
 80211f4:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80211f6:	6863      	ldr	r3, [r4, #4]
 80211f8:	03da      	lsls	r2, r3, #15
 80211fa:	d50c      	bpl.n	8021216 <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80211fc:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80211fe:	4d0f      	ldr	r5, [pc, #60]	; (802123c <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8021200:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8021204:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8021206:	f7ff fa3d 	bl	8020684 <HAL_GetTick>
 802120a:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 802120c:	686b      	ldr	r3, [r5, #4]
 802120e:	039b      	lsls	r3, r3, #14
 8021210:	d50a      	bpl.n	8021228 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8021212:	2000      	movs	r0, #0
 8021214:	e006      	b.n	8021224 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8021216:	f7ff fa35 	bl	8020684 <HAL_GetTick>
 802121a:	1b40      	subs	r0, r0, r5
 802121c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8021220:	d9e9      	bls.n	80211f6 <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 8021222:	2003      	movs	r0, #3
}
 8021224:	b003      	add	sp, #12
 8021226:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8021228:	f7ff fa2c 	bl	8020684 <HAL_GetTick>
 802122c:	1b00      	subs	r0, r0, r4
 802122e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8021232:	d9eb      	bls.n	802120c <HAL_PWREx_EnableOverDrive+0x3c>
 8021234:	e7f5      	b.n	8021222 <HAL_PWREx_EnableOverDrive+0x52>
 8021236:	bf00      	nop
 8021238:	40023800 	.word	0x40023800
 802123c:	40007000 	.word	0x40007000

08021240 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8021240:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8021244:	4604      	mov	r4, r0
 8021246:	b340      	cbz	r0, 802129a <HAL_RCC_OscConfig+0x5a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8021248:	6803      	ldr	r3, [r0, #0]
 802124a:	07d8      	lsls	r0, r3, #31
 802124c:	d410      	bmi.n	8021270 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 802124e:	6823      	ldr	r3, [r4, #0]
 8021250:	0799      	lsls	r1, r3, #30
 8021252:	d464      	bmi.n	802131e <HAL_RCC_OscConfig+0xde>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8021254:	6823      	ldr	r3, [r4, #0]
 8021256:	0719      	lsls	r1, r3, #28
 8021258:	f100 80aa 	bmi.w	80213b0 <HAL_RCC_OscConfig+0x170>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 802125c:	6823      	ldr	r3, [r4, #0]
 802125e:	075a      	lsls	r2, r3, #29
 8021260:	f100 80cb 	bmi.w	80213fa <HAL_RCC_OscConfig+0x1ba>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8021264:	69a2      	ldr	r2, [r4, #24]
 8021266:	2a00      	cmp	r2, #0
 8021268:	f040 8134 	bne.w	80214d4 <HAL_RCC_OscConfig+0x294>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 802126c:	2000      	movs	r0, #0
 802126e:	e02b      	b.n	80212c8 <HAL_RCC_OscConfig+0x88>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8021270:	4b96      	ldr	r3, [pc, #600]	; (80214cc <HAL_RCC_OscConfig+0x28c>)
 8021272:	689a      	ldr	r2, [r3, #8]
 8021274:	f002 020c 	and.w	r2, r2, #12
 8021278:	2a04      	cmp	r2, #4
 802127a:	d007      	beq.n	802128c <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 802127c:	689a      	ldr	r2, [r3, #8]
 802127e:	f002 020c 	and.w	r2, r2, #12
 8021282:	2a08      	cmp	r2, #8
 8021284:	d10b      	bne.n	802129e <HAL_RCC_OscConfig+0x5e>
 8021286:	685a      	ldr	r2, [r3, #4]
 8021288:	0252      	lsls	r2, r2, #9
 802128a:	d508      	bpl.n	802129e <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 802128c:	4b8f      	ldr	r3, [pc, #572]	; (80214cc <HAL_RCC_OscConfig+0x28c>)
 802128e:	681b      	ldr	r3, [r3, #0]
 8021290:	039b      	lsls	r3, r3, #14
 8021292:	d5dc      	bpl.n	802124e <HAL_RCC_OscConfig+0xe>
 8021294:	6863      	ldr	r3, [r4, #4]
 8021296:	2b00      	cmp	r3, #0
 8021298:	d1d9      	bne.n	802124e <HAL_RCC_OscConfig+0xe>
        return HAL_ERROR;
 802129a:	2001      	movs	r0, #1
 802129c:	e014      	b.n	80212c8 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 802129e:	6862      	ldr	r2, [r4, #4]
 80212a0:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80212a4:	d113      	bne.n	80212ce <HAL_RCC_OscConfig+0x8e>
 80212a6:	681a      	ldr	r2, [r3, #0]
 80212a8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80212ac:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80212ae:	f7ff f9e9 	bl	8020684 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80212b2:	4e86      	ldr	r6, [pc, #536]	; (80214cc <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 80212b4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80212b6:	6833      	ldr	r3, [r6, #0]
 80212b8:	039f      	lsls	r7, r3, #14
 80212ba:	d4c8      	bmi.n	802124e <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80212bc:	f7ff f9e2 	bl	8020684 <HAL_GetTick>
 80212c0:	1b40      	subs	r0, r0, r5
 80212c2:	2864      	cmp	r0, #100	; 0x64
 80212c4:	d9f7      	bls.n	80212b6 <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
 80212c6:	2003      	movs	r0, #3
}
 80212c8:	b002      	add	sp, #8
 80212ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80212ce:	4d7f      	ldr	r5, [pc, #508]	; (80214cc <HAL_RCC_OscConfig+0x28c>)
 80212d0:	682b      	ldr	r3, [r5, #0]
 80212d2:	b992      	cbnz	r2, 80212fa <HAL_RCC_OscConfig+0xba>
 80212d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80212d8:	602b      	str	r3, [r5, #0]
 80212da:	682b      	ldr	r3, [r5, #0]
 80212dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80212e0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80212e2:	f7ff f9cf 	bl	8020684 <HAL_GetTick>
 80212e6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80212e8:	682b      	ldr	r3, [r5, #0]
 80212ea:	0398      	lsls	r0, r3, #14
 80212ec:	d5af      	bpl.n	802124e <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80212ee:	f7ff f9c9 	bl	8020684 <HAL_GetTick>
 80212f2:	1b80      	subs	r0, r0, r6
 80212f4:	2864      	cmp	r0, #100	; 0x64
 80212f6:	d9f7      	bls.n	80212e8 <HAL_RCC_OscConfig+0xa8>
 80212f8:	e7e5      	b.n	80212c6 <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80212fa:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 80212fe:	d107      	bne.n	8021310 <HAL_RCC_OscConfig+0xd0>
 8021300:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8021304:	602b      	str	r3, [r5, #0]
 8021306:	682b      	ldr	r3, [r5, #0]
 8021308:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 802130c:	602b      	str	r3, [r5, #0]
 802130e:	e7ce      	b.n	80212ae <HAL_RCC_OscConfig+0x6e>
 8021310:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8021314:	602b      	str	r3, [r5, #0]
 8021316:	682b      	ldr	r3, [r5, #0]
 8021318:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 802131c:	e7f6      	b.n	802130c <HAL_RCC_OscConfig+0xcc>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 802131e:	4b6b      	ldr	r3, [pc, #428]	; (80214cc <HAL_RCC_OscConfig+0x28c>)
 8021320:	689a      	ldr	r2, [r3, #8]
 8021322:	f012 0f0c 	tst.w	r2, #12
 8021326:	d007      	beq.n	8021338 <HAL_RCC_OscConfig+0xf8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8021328:	689a      	ldr	r2, [r3, #8]
 802132a:	f002 020c 	and.w	r2, r2, #12
 802132e:	2a08      	cmp	r2, #8
 8021330:	d111      	bne.n	8021356 <HAL_RCC_OscConfig+0x116>
 8021332:	685a      	ldr	r2, [r3, #4]
 8021334:	0251      	lsls	r1, r2, #9
 8021336:	d40e      	bmi.n	8021356 <HAL_RCC_OscConfig+0x116>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8021338:	4b64      	ldr	r3, [pc, #400]	; (80214cc <HAL_RCC_OscConfig+0x28c>)
 802133a:	681a      	ldr	r2, [r3, #0]
 802133c:	0792      	lsls	r2, r2, #30
 802133e:	d502      	bpl.n	8021346 <HAL_RCC_OscConfig+0x106>
 8021340:	68e2      	ldr	r2, [r4, #12]
 8021342:	2a01      	cmp	r2, #1
 8021344:	d1a9      	bne.n	802129a <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8021346:	681a      	ldr	r2, [r3, #0]
 8021348:	6921      	ldr	r1, [r4, #16]
 802134a:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 802134e:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8021352:	601a      	str	r2, [r3, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8021354:	e77e      	b.n	8021254 <HAL_RCC_OscConfig+0x14>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8021356:	68e2      	ldr	r2, [r4, #12]
 8021358:	b1c2      	cbz	r2, 802138c <HAL_RCC_OscConfig+0x14c>
        __HAL_RCC_HSI_ENABLE();
 802135a:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 802135c:	4d5b      	ldr	r5, [pc, #364]	; (80214cc <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_ENABLE();
 802135e:	f042 0201 	orr.w	r2, r2, #1
 8021362:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8021364:	f7ff f98e 	bl	8020684 <HAL_GetTick>
 8021368:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 802136a:	682b      	ldr	r3, [r5, #0]
 802136c:	079f      	lsls	r7, r3, #30
 802136e:	d507      	bpl.n	8021380 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8021370:	682b      	ldr	r3, [r5, #0]
 8021372:	6922      	ldr	r2, [r4, #16]
 8021374:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8021378:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 802137c:	602b      	str	r3, [r5, #0]
 802137e:	e769      	b.n	8021254 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8021380:	f7ff f980 	bl	8020684 <HAL_GetTick>
 8021384:	1b80      	subs	r0, r0, r6
 8021386:	2802      	cmp	r0, #2
 8021388:	d9ef      	bls.n	802136a <HAL_RCC_OscConfig+0x12a>
 802138a:	e79c      	b.n	80212c6 <HAL_RCC_OscConfig+0x86>
        __HAL_RCC_HSI_DISABLE();
 802138c:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 802138e:	4e4f      	ldr	r6, [pc, #316]	; (80214cc <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_DISABLE();
 8021390:	f022 0201 	bic.w	r2, r2, #1
 8021394:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8021396:	f7ff f975 	bl	8020684 <HAL_GetTick>
 802139a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 802139c:	6833      	ldr	r3, [r6, #0]
 802139e:	0798      	lsls	r0, r3, #30
 80213a0:	f57f af58 	bpl.w	8021254 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80213a4:	f7ff f96e 	bl	8020684 <HAL_GetTick>
 80213a8:	1b40      	subs	r0, r0, r5
 80213aa:	2802      	cmp	r0, #2
 80213ac:	d9f6      	bls.n	802139c <HAL_RCC_OscConfig+0x15c>
 80213ae:	e78a      	b.n	80212c6 <HAL_RCC_OscConfig+0x86>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80213b0:	6963      	ldr	r3, [r4, #20]
 80213b2:	4d46      	ldr	r5, [pc, #280]	; (80214cc <HAL_RCC_OscConfig+0x28c>)
 80213b4:	b183      	cbz	r3, 80213d8 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_LSI_ENABLE();
 80213b6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80213b8:	f043 0301 	orr.w	r3, r3, #1
 80213bc:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80213be:	f7ff f961 	bl	8020684 <HAL_GetTick>
 80213c2:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80213c4:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80213c6:	079b      	lsls	r3, r3, #30
 80213c8:	f53f af48 	bmi.w	802125c <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80213cc:	f7ff f95a 	bl	8020684 <HAL_GetTick>
 80213d0:	1b80      	subs	r0, r0, r6
 80213d2:	2802      	cmp	r0, #2
 80213d4:	d9f6      	bls.n	80213c4 <HAL_RCC_OscConfig+0x184>
 80213d6:	e776      	b.n	80212c6 <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
 80213d8:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80213da:	f023 0301 	bic.w	r3, r3, #1
 80213de:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80213e0:	f7ff f950 	bl	8020684 <HAL_GetTick>
 80213e4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80213e6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80213e8:	079f      	lsls	r7, r3, #30
 80213ea:	f57f af37 	bpl.w	802125c <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80213ee:	f7ff f949 	bl	8020684 <HAL_GetTick>
 80213f2:	1b80      	subs	r0, r0, r6
 80213f4:	2802      	cmp	r0, #2
 80213f6:	d9f6      	bls.n	80213e6 <HAL_RCC_OscConfig+0x1a6>
 80213f8:	e765      	b.n	80212c6 <HAL_RCC_OscConfig+0x86>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80213fa:	4b34      	ldr	r3, [pc, #208]	; (80214cc <HAL_RCC_OscConfig+0x28c>)
 80213fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80213fe:	00d0      	lsls	r0, r2, #3
 8021400:	d427      	bmi.n	8021452 <HAL_RCC_OscConfig+0x212>
      __HAL_RCC_PWR_CLK_ENABLE();
 8021402:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 8021404:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8021406:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 802140a:	641a      	str	r2, [r3, #64]	; 0x40
 802140c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802140e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8021412:	9301      	str	r3, [sp, #4]
 8021414:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8021416:	4d2e      	ldr	r5, [pc, #184]	; (80214d0 <HAL_RCC_OscConfig+0x290>)
 8021418:	682b      	ldr	r3, [r5, #0]
 802141a:	05d9      	lsls	r1, r3, #23
 802141c:	d51b      	bpl.n	8021456 <HAL_RCC_OscConfig+0x216>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 802141e:	68a3      	ldr	r3, [r4, #8]
 8021420:	4d2a      	ldr	r5, [pc, #168]	; (80214cc <HAL_RCC_OscConfig+0x28c>)
 8021422:	2b01      	cmp	r3, #1
 8021424:	d127      	bne.n	8021476 <HAL_RCC_OscConfig+0x236>
 8021426:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8021428:	f043 0301 	orr.w	r3, r3, #1
 802142c:	672b      	str	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 802142e:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8021432:	f7ff f927 	bl	8020684 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8021436:	4e25      	ldr	r6, [pc, #148]	; (80214cc <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8021438:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 802143a:	6f33      	ldr	r3, [r6, #112]	; 0x70
 802143c:	079b      	lsls	r3, r3, #30
 802143e:	d53f      	bpl.n	80214c0 <HAL_RCC_OscConfig+0x280>
    if (pwrclkchanged == SET)
 8021440:	2f00      	cmp	r7, #0
 8021442:	f43f af0f 	beq.w	8021264 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8021446:	4a21      	ldr	r2, [pc, #132]	; (80214cc <HAL_RCC_OscConfig+0x28c>)
 8021448:	6c13      	ldr	r3, [r2, #64]	; 0x40
 802144a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 802144e:	6413      	str	r3, [r2, #64]	; 0x40
 8021450:	e708      	b.n	8021264 <HAL_RCC_OscConfig+0x24>
  FlagStatus pwrclkchanged = RESET;
 8021452:	2700      	movs	r7, #0
 8021454:	e7df      	b.n	8021416 <HAL_RCC_OscConfig+0x1d6>
      PWR->CR1 |= PWR_CR1_DBP;
 8021456:	682b      	ldr	r3, [r5, #0]
 8021458:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802145c:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 802145e:	f7ff f911 	bl	8020684 <HAL_GetTick>
 8021462:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8021464:	682b      	ldr	r3, [r5, #0]
 8021466:	05da      	lsls	r2, r3, #23
 8021468:	d4d9      	bmi.n	802141e <HAL_RCC_OscConfig+0x1de>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 802146a:	f7ff f90b 	bl	8020684 <HAL_GetTick>
 802146e:	1b80      	subs	r0, r0, r6
 8021470:	2864      	cmp	r0, #100	; 0x64
 8021472:	d9f7      	bls.n	8021464 <HAL_RCC_OscConfig+0x224>
 8021474:	e727      	b.n	80212c6 <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8021476:	b9ab      	cbnz	r3, 80214a4 <HAL_RCC_OscConfig+0x264>
 8021478:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 802147a:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 802147e:	f023 0301 	bic.w	r3, r3, #1
 8021482:	672b      	str	r3, [r5, #112]	; 0x70
 8021484:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8021486:	f023 0304 	bic.w	r3, r3, #4
 802148a:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 802148c:	f7ff f8fa 	bl	8020684 <HAL_GetTick>
 8021490:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8021492:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8021494:	0798      	lsls	r0, r3, #30
 8021496:	d5d3      	bpl.n	8021440 <HAL_RCC_OscConfig+0x200>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8021498:	f7ff f8f4 	bl	8020684 <HAL_GetTick>
 802149c:	1b80      	subs	r0, r0, r6
 802149e:	4540      	cmp	r0, r8
 80214a0:	d9f7      	bls.n	8021492 <HAL_RCC_OscConfig+0x252>
 80214a2:	e710      	b.n	80212c6 <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80214a4:	2b05      	cmp	r3, #5
 80214a6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80214a8:	d103      	bne.n	80214b2 <HAL_RCC_OscConfig+0x272>
 80214aa:	f043 0304 	orr.w	r3, r3, #4
 80214ae:	672b      	str	r3, [r5, #112]	; 0x70
 80214b0:	e7b9      	b.n	8021426 <HAL_RCC_OscConfig+0x1e6>
 80214b2:	f023 0301 	bic.w	r3, r3, #1
 80214b6:	672b      	str	r3, [r5, #112]	; 0x70
 80214b8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80214ba:	f023 0304 	bic.w	r3, r3, #4
 80214be:	e7b5      	b.n	802142c <HAL_RCC_OscConfig+0x1ec>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80214c0:	f7ff f8e0 	bl	8020684 <HAL_GetTick>
 80214c4:	1b40      	subs	r0, r0, r5
 80214c6:	4540      	cmp	r0, r8
 80214c8:	d9b7      	bls.n	802143a <HAL_RCC_OscConfig+0x1fa>
 80214ca:	e6fc      	b.n	80212c6 <HAL_RCC_OscConfig+0x86>
 80214cc:	40023800 	.word	0x40023800
 80214d0:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80214d4:	4d38      	ldr	r5, [pc, #224]	; (80215b8 <HAL_RCC_OscConfig+0x378>)
 80214d6:	68ab      	ldr	r3, [r5, #8]
 80214d8:	f003 030c 	and.w	r3, r3, #12
 80214dc:	2b08      	cmp	r3, #8
 80214de:	d041      	beq.n	8021564 <HAL_RCC_OscConfig+0x324>
        __HAL_RCC_PLL_DISABLE();
 80214e0:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80214e2:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80214e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80214e8:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80214ea:	d12e      	bne.n	802154a <HAL_RCC_OscConfig+0x30a>
        tickstart = HAL_GetTick();
 80214ec:	f7ff f8ca 	bl	8020684 <HAL_GetTick>
 80214f0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80214f2:	682b      	ldr	r3, [r5, #0]
 80214f4:	0199      	lsls	r1, r3, #6
 80214f6:	d422      	bmi.n	802153e <HAL_RCC_OscConfig+0x2fe>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80214f8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80214fa:	085b      	lsrs	r3, r3, #1
 80214fc:	1e5a      	subs	r2, r3, #1
 80214fe:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 8021502:	430b      	orrs	r3, r1
 8021504:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8021508:	6a62      	ldr	r2, [r4, #36]	; 0x24
 802150a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 802150e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8021510:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8021514:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8021518:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 802151a:	682b      	ldr	r3, [r5, #0]
 802151c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8021520:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8021522:	f7ff f8af 	bl	8020684 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8021526:	4d24      	ldr	r5, [pc, #144]	; (80215b8 <HAL_RCC_OscConfig+0x378>)
        tickstart = HAL_GetTick();
 8021528:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 802152a:	682b      	ldr	r3, [r5, #0]
 802152c:	019a      	lsls	r2, r3, #6
 802152e:	f53f ae9d 	bmi.w	802126c <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8021532:	f7ff f8a7 	bl	8020684 <HAL_GetTick>
 8021536:	1b00      	subs	r0, r0, r4
 8021538:	2802      	cmp	r0, #2
 802153a:	d9f6      	bls.n	802152a <HAL_RCC_OscConfig+0x2ea>
 802153c:	e6c3      	b.n	80212c6 <HAL_RCC_OscConfig+0x86>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 802153e:	f7ff f8a1 	bl	8020684 <HAL_GetTick>
 8021542:	1b80      	subs	r0, r0, r6
 8021544:	2802      	cmp	r0, #2
 8021546:	d9d4      	bls.n	80214f2 <HAL_RCC_OscConfig+0x2b2>
 8021548:	e6bd      	b.n	80212c6 <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 802154a:	f7ff f89b 	bl	8020684 <HAL_GetTick>
 802154e:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8021550:	682b      	ldr	r3, [r5, #0]
 8021552:	019b      	lsls	r3, r3, #6
 8021554:	f57f ae8a 	bpl.w	802126c <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8021558:	f7ff f894 	bl	8020684 <HAL_GetTick>
 802155c:	1b00      	subs	r0, r0, r4
 802155e:	2802      	cmp	r0, #2
 8021560:	d9f6      	bls.n	8021550 <HAL_RCC_OscConfig+0x310>
 8021562:	e6b0      	b.n	80212c6 <HAL_RCC_OscConfig+0x86>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8021564:	2a01      	cmp	r2, #1
      pll_config = RCC->PLLCFGR;
 8021566:	686b      	ldr	r3, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8021568:	f43f ae97 	beq.w	802129a <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 802156c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8021570:	69e1      	ldr	r1, [r4, #28]
 8021572:	428a      	cmp	r2, r1
 8021574:	f47f ae91 	bne.w	802129a <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8021578:	f003 023f 	and.w	r2, r3, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 802157c:	6a21      	ldr	r1, [r4, #32]
 802157e:	428a      	cmp	r2, r1
 8021580:	f47f ae8b 	bne.w	802129a <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8021584:	f647 72c0 	movw	r2, #32704	; 0x7fc0
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8021588:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 802158a:	401a      	ands	r2, r3
 802158c:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8021590:	f47f ae83 	bne.w	802129a <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8021594:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8021596:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 802159a:	0852      	lsrs	r2, r2, #1
 802159c:	3a01      	subs	r2, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 802159e:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 80215a2:	f47f ae7a 	bne.w	802129a <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80215a6:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80215aa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80215ac:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 80215b0:	f43f ae5c 	beq.w	802126c <HAL_RCC_OscConfig+0x2c>
 80215b4:	e671      	b.n	802129a <HAL_RCC_OscConfig+0x5a>
 80215b6:	bf00      	nop
 80215b8:	40023800 	.word	0x40023800

080215bc <HAL_RCC_EnableCSS>:
  *         the Cortex-M7 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
  SET_BIT(RCC->CR, RCC_CR_CSSON);
 80215bc:	4a02      	ldr	r2, [pc, #8]	; (80215c8 <HAL_RCC_EnableCSS+0xc>)
 80215be:	6813      	ldr	r3, [r2, #0]
 80215c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80215c4:	6013      	str	r3, [r2, #0]
}
 80215c6:	4770      	bx	lr
 80215c8:	40023800 	.word	0x40023800

080215cc <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80215cc:	4913      	ldr	r1, [pc, #76]	; (802161c <HAL_RCC_GetSysClockFreq+0x50>)
{
 80215ce:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80215d0:	688b      	ldr	r3, [r1, #8]
 80215d2:	f003 030c 	and.w	r3, r3, #12
 80215d6:	2b04      	cmp	r3, #4
 80215d8:	d01b      	beq.n	8021612 <HAL_RCC_GetSysClockFreq+0x46>
 80215da:	2b08      	cmp	r3, #8
 80215dc:	d11b      	bne.n	8021616 <HAL_RCC_GetSysClockFreq+0x4a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80215de:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80215e0:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80215e2:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80215e4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80215e8:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80215ec:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80215f0:	bf1a      	itte	ne
 80215f2:	480b      	ldrne	r0, [pc, #44]	; (8021620 <HAL_RCC_GetSysClockFreq+0x54>)
 80215f4:	2300      	movne	r3, #0
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80215f6:	480b      	ldreq	r0, [pc, #44]	; (8021624 <HAL_RCC_GetSysClockFreq+0x58>)
 80215f8:	fba1 0100 	umull	r0, r1, r1, r0
 80215fc:	f7df fafe 	bl	8000bfc <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8021600:	4b06      	ldr	r3, [pc, #24]	; (802161c <HAL_RCC_GetSysClockFreq+0x50>)
 8021602:	685b      	ldr	r3, [r3, #4]
 8021604:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8021608:	3301      	adds	r3, #1
 802160a:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 802160c:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8021610:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8021612:	4803      	ldr	r0, [pc, #12]	; (8021620 <HAL_RCC_GetSysClockFreq+0x54>)
 8021614:	e7fc      	b.n	8021610 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSI_VALUE;
 8021616:	4803      	ldr	r0, [pc, #12]	; (8021624 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8021618:	e7fa      	b.n	8021610 <HAL_RCC_GetSysClockFreq+0x44>
 802161a:	bf00      	nop
 802161c:	40023800 	.word	0x40023800
 8021620:	017d7840 	.word	0x017d7840
 8021624:	00f42400 	.word	0x00f42400

08021628 <HAL_RCC_ClockConfig>:
{
 8021628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802162c:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 802162e:	4604      	mov	r4, r0
 8021630:	b910      	cbnz	r0, 8021638 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8021632:	2001      	movs	r0, #1
}
 8021634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8021638:	4a46      	ldr	r2, [pc, #280]	; (8021754 <HAL_RCC_ClockConfig+0x12c>)
 802163a:	6813      	ldr	r3, [r2, #0]
 802163c:	f003 030f 	and.w	r3, r3, #15
 8021640:	428b      	cmp	r3, r1
 8021642:	d328      	bcc.n	8021696 <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8021644:	6822      	ldr	r2, [r4, #0]
 8021646:	0797      	lsls	r7, r2, #30
 8021648:	d430      	bmi.n	80216ac <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 802164a:	07d0      	lsls	r0, r2, #31
 802164c:	d444      	bmi.n	80216d8 <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 802164e:	4a41      	ldr	r2, [pc, #260]	; (8021754 <HAL_RCC_ClockConfig+0x12c>)
 8021650:	6813      	ldr	r3, [r2, #0]
 8021652:	f003 030f 	and.w	r3, r3, #15
 8021656:	42ab      	cmp	r3, r5
 8021658:	d867      	bhi.n	802172a <HAL_RCC_ClockConfig+0x102>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 802165a:	6822      	ldr	r2, [r4, #0]
 802165c:	0751      	lsls	r1, r2, #29
 802165e:	d470      	bmi.n	8021742 <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8021660:	0713      	lsls	r3, r2, #28
 8021662:	d507      	bpl.n	8021674 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8021664:	4a3c      	ldr	r2, [pc, #240]	; (8021758 <HAL_RCC_ClockConfig+0x130>)
 8021666:	6921      	ldr	r1, [r4, #16]
 8021668:	6893      	ldr	r3, [r2, #8]
 802166a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 802166e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8021672:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8021674:	f7ff ffaa 	bl	80215cc <HAL_RCC_GetSysClockFreq>
 8021678:	4b37      	ldr	r3, [pc, #220]	; (8021758 <HAL_RCC_ClockConfig+0x130>)
 802167a:	4a38      	ldr	r2, [pc, #224]	; (802175c <HAL_RCC_ClockConfig+0x134>)
 802167c:	689b      	ldr	r3, [r3, #8]
 802167e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8021682:	5cd3      	ldrb	r3, [r2, r3]
 8021684:	40d8      	lsrs	r0, r3
 8021686:	4b36      	ldr	r3, [pc, #216]	; (8021760 <HAL_RCC_ClockConfig+0x138>)
 8021688:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 802168a:	4b36      	ldr	r3, [pc, #216]	; (8021764 <HAL_RCC_ClockConfig+0x13c>)
 802168c:	6818      	ldr	r0, [r3, #0]
 802168e:	f7e0 f965 	bl	800195c <HAL_InitTick>
  return HAL_OK;
 8021692:	2000      	movs	r0, #0
 8021694:	e7ce      	b.n	8021634 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8021696:	6813      	ldr	r3, [r2, #0]
 8021698:	f023 030f 	bic.w	r3, r3, #15
 802169c:	430b      	orrs	r3, r1
 802169e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80216a0:	6813      	ldr	r3, [r2, #0]
 80216a2:	f003 030f 	and.w	r3, r3, #15
 80216a6:	428b      	cmp	r3, r1
 80216a8:	d1c3      	bne.n	8021632 <HAL_RCC_ClockConfig+0xa>
 80216aa:	e7cb      	b.n	8021644 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80216ac:	f012 0f04 	tst.w	r2, #4
 80216b0:	4b29      	ldr	r3, [pc, #164]	; (8021758 <HAL_RCC_ClockConfig+0x130>)
 80216b2:	d003      	beq.n	80216bc <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80216b4:	6899      	ldr	r1, [r3, #8]
 80216b6:	f441 51e0 	orr.w	r1, r1, #7168	; 0x1c00
 80216ba:	6099      	str	r1, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80216bc:	0716      	lsls	r6, r2, #28
 80216be:	d503      	bpl.n	80216c8 <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80216c0:	6899      	ldr	r1, [r3, #8]
 80216c2:	f441 4160 	orr.w	r1, r1, #57344	; 0xe000
 80216c6:	6099      	str	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80216c8:	4923      	ldr	r1, [pc, #140]	; (8021758 <HAL_RCC_ClockConfig+0x130>)
 80216ca:	68a0      	ldr	r0, [r4, #8]
 80216cc:	688b      	ldr	r3, [r1, #8]
 80216ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80216d2:	4303      	orrs	r3, r0
 80216d4:	608b      	str	r3, [r1, #8]
 80216d6:	e7b8      	b.n	802164a <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80216d8:	6861      	ldr	r1, [r4, #4]
 80216da:	4b1f      	ldr	r3, [pc, #124]	; (8021758 <HAL_RCC_ClockConfig+0x130>)
 80216dc:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80216de:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80216e0:	d11b      	bne.n	802171a <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80216e2:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80216e6:	d0a4      	beq.n	8021632 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80216e8:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80216ea:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80216ee:	4f1a      	ldr	r7, [pc, #104]	; (8021758 <HAL_RCC_ClockConfig+0x130>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80216f0:	f022 0203 	bic.w	r2, r2, #3
 80216f4:	430a      	orrs	r2, r1
 80216f6:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80216f8:	f7fe ffc4 	bl	8020684 <HAL_GetTick>
 80216fc:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80216fe:	68bb      	ldr	r3, [r7, #8]
 8021700:	6862      	ldr	r2, [r4, #4]
 8021702:	f003 030c 	and.w	r3, r3, #12
 8021706:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 802170a:	d0a0      	beq.n	802164e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 802170c:	f7fe ffba 	bl	8020684 <HAL_GetTick>
 8021710:	1b80      	subs	r0, r0, r6
 8021712:	4540      	cmp	r0, r8
 8021714:	d9f3      	bls.n	80216fe <HAL_RCC_ClockConfig+0xd6>
        return HAL_TIMEOUT;
 8021716:	2003      	movs	r0, #3
 8021718:	e78c      	b.n	8021634 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 802171a:	2902      	cmp	r1, #2
 802171c:	d102      	bne.n	8021724 <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 802171e:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8021722:	e7e0      	b.n	80216e6 <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8021724:	f012 0f02 	tst.w	r2, #2
 8021728:	e7dd      	b.n	80216e6 <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 802172a:	6813      	ldr	r3, [r2, #0]
 802172c:	f023 030f 	bic.w	r3, r3, #15
 8021730:	432b      	orrs	r3, r5
 8021732:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8021734:	6813      	ldr	r3, [r2, #0]
 8021736:	f003 030f 	and.w	r3, r3, #15
 802173a:	42ab      	cmp	r3, r5
 802173c:	f47f af79 	bne.w	8021632 <HAL_RCC_ClockConfig+0xa>
 8021740:	e78b      	b.n	802165a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8021742:	4905      	ldr	r1, [pc, #20]	; (8021758 <HAL_RCC_ClockConfig+0x130>)
 8021744:	68e0      	ldr	r0, [r4, #12]
 8021746:	688b      	ldr	r3, [r1, #8]
 8021748:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 802174c:	4303      	orrs	r3, r0
 802174e:	608b      	str	r3, [r1, #8]
 8021750:	e786      	b.n	8021660 <HAL_RCC_ClockConfig+0x38>
 8021752:	bf00      	nop
 8021754:	40023c00 	.word	0x40023c00
 8021758:	40023800 	.word	0x40023800
 802175c:	08024f68 	.word	0x08024f68
 8021760:	20000000 	.word	0x20000000
 8021764:	20000074 	.word	0x20000074

08021768 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8021768:	4b04      	ldr	r3, [pc, #16]	; (802177c <HAL_RCC_GetPCLK2Freq+0x14>)
 802176a:	4a05      	ldr	r2, [pc, #20]	; (8021780 <HAL_RCC_GetPCLK2Freq+0x18>)
 802176c:	689b      	ldr	r3, [r3, #8]
 802176e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8021772:	5cd3      	ldrb	r3, [r2, r3]
 8021774:	4a03      	ldr	r2, [pc, #12]	; (8021784 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8021776:	6810      	ldr	r0, [r2, #0]
}
 8021778:	40d8      	lsrs	r0, r3
 802177a:	4770      	bx	lr
 802177c:	40023800 	.word	0x40023800
 8021780:	08024f78 	.word	0x08024f78
 8021784:	20000000 	.word	0x20000000

08021788 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8021788:	230f      	movs	r3, #15
 802178a:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 802178c:	4b0b      	ldr	r3, [pc, #44]	; (80217bc <HAL_RCC_GetClockConfig+0x34>)
 802178e:	689a      	ldr	r2, [r3, #8]
 8021790:	f002 0203 	and.w	r2, r2, #3
 8021794:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8021796:	689a      	ldr	r2, [r3, #8]
 8021798:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 802179c:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 802179e:	689a      	ldr	r2, [r3, #8]
 80217a0:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 80217a4:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80217a6:	689b      	ldr	r3, [r3, #8]
 80217a8:	08db      	lsrs	r3, r3, #3
 80217aa:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80217ae:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80217b0:	4b03      	ldr	r3, [pc, #12]	; (80217c0 <HAL_RCC_GetClockConfig+0x38>)
 80217b2:	681b      	ldr	r3, [r3, #0]
 80217b4:	f003 030f 	and.w	r3, r3, #15
 80217b8:	600b      	str	r3, [r1, #0]
}
 80217ba:	4770      	bx	lr
 80217bc:	40023800 	.word	0x40023800
 80217c0:	40023c00 	.word	0x40023c00

080217c4 <HAL_RCC_CSSCallback>:
__weak void HAL_RCC_CSSCallback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 80217c4:	4770      	bx	lr
	...

080217c8 <HAL_RCC_NMI_IRQHandler>:
{
 80217c8:	b508      	push	{r3, lr}
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 80217ca:	4b05      	ldr	r3, [pc, #20]	; (80217e0 <HAL_RCC_NMI_IRQHandler+0x18>)
 80217cc:	68db      	ldr	r3, [r3, #12]
 80217ce:	061b      	lsls	r3, r3, #24
 80217d0:	d504      	bpl.n	80217dc <HAL_RCC_NMI_IRQHandler+0x14>
    HAL_RCC_CSSCallback();
 80217d2:	f7ff fff7 	bl	80217c4 <HAL_RCC_CSSCallback>
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80217d6:	4b03      	ldr	r3, [pc, #12]	; (80217e4 <HAL_RCC_NMI_IRQHandler+0x1c>)
 80217d8:	2280      	movs	r2, #128	; 0x80
 80217da:	701a      	strb	r2, [r3, #0]
}
 80217dc:	bd08      	pop	{r3, pc}
 80217de:	bf00      	nop
 80217e0:	40023800 	.word	0x40023800
 80217e4:	4002380e 	.word	0x4002380e

080217e8 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80217e8:	6803      	ldr	r3, [r0, #0]
{
 80217ea:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80217ee:	f013 0601 	ands.w	r6, r3, #1
{
 80217f2:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80217f4:	d00b      	beq.n	802180e <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80217f6:	4aaa      	ldr	r2, [pc, #680]	; (8021aa0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80217f8:	6891      	ldr	r1, [r2, #8]
 80217fa:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 80217fe:	6091      	str	r1, [r2, #8]
 8021800:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8021802:	6891      	ldr	r1, [r2, #8]
 8021804:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8021806:	fab6 f686 	clz	r6, r6
 802180a:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 802180c:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 802180e:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 8021812:	d012      	beq.n	802183a <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8021814:	49a2      	ldr	r1, [pc, #648]	; (8021aa0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8021816:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8021818:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 802181c:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8021820:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
    {
      plli2sused = 1;
 8021824:	bf08      	it	eq
 8021826:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8021828:	ea42 0205 	orr.w	r2, r2, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 802182c:	bf16      	itet	ne
 802182e:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 8021832:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8021834:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8021836:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 802183a:	02df      	lsls	r7, r3, #11
 802183c:	d510      	bpl.n	8021860 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 802183e:	4898      	ldr	r0, [pc, #608]	; (8021aa0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8021840:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8021842:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8021846:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 802184a:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 802184e:	ea42 0201 	orr.w	r2, r2, r1
 8021852:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8021856:	f000 8184 	beq.w	8021b62 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 802185a:	2900      	cmp	r1, #0
 802185c:	bf08      	it	eq
 802185e:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 8021860:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8021864:	bf18      	it	ne
 8021866:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8021868:	0698      	lsls	r0, r3, #26
 802186a:	d531      	bpl.n	80218d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 802186c:	4b8c      	ldr	r3, [pc, #560]	; (8021aa0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 802186e:	4f8d      	ldr	r7, [pc, #564]	; (8021aa4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8021870:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8021872:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8021876:	641a      	str	r2, [r3, #64]	; 0x40
 8021878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802187a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802187e:	9301      	str	r3, [sp, #4]
 8021880:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8021882:	683b      	ldr	r3, [r7, #0]
 8021884:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8021888:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 802188a:	f7fe fefb 	bl	8020684 <HAL_GetTick>
 802188e:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8021890:	683b      	ldr	r3, [r7, #0]
 8021892:	05d9      	lsls	r1, r3, #23
 8021894:	f140 8167 	bpl.w	8021b66 <HAL_RCCEx_PeriphCLKConfig+0x37e>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8021898:	4f81      	ldr	r7, [pc, #516]	; (8021aa0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 802189a:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 802189c:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80218a0:	f040 816c 	bne.w	8021b7c <HAL_RCCEx_PeriphCLKConfig+0x394>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80218a4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80218a6:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80218aa:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80218ae:	4a7c      	ldr	r2, [pc, #496]	; (8021aa0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80218b0:	f040 818a 	bne.w	8021bc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80218b4:	6891      	ldr	r1, [r2, #8]
 80218b6:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 80218ba:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80218be:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 80218c2:	4301      	orrs	r1, r0
 80218c4:	6091      	str	r1, [r2, #8]
 80218c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80218ca:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80218cc:	430b      	orrs	r3, r1
 80218ce:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80218d0:	6823      	ldr	r3, [r4, #0]
 80218d2:	06d8      	lsls	r0, r3, #27
 80218d4:	d50c      	bpl.n	80218f0 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80218d6:	4a72      	ldr	r2, [pc, #456]	; (8021aa0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80218d8:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 80218dc:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 80218e0:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 80218e4:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 80218e8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80218ea:	4301      	orrs	r1, r0
 80218ec:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80218f0:	0459      	lsls	r1, r3, #17
 80218f2:	d508      	bpl.n	8021906 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80218f4:	496a      	ldr	r1, [pc, #424]	; (8021aa0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80218f6:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80218f8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80218fc:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8021900:	4302      	orrs	r2, r0
 8021902:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8021906:	041a      	lsls	r2, r3, #16
 8021908:	d508      	bpl.n	802191c <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 802190a:	4965      	ldr	r1, [pc, #404]	; (8021aa0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 802190c:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 802190e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8021912:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8021916:	4302      	orrs	r2, r0
 8021918:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 802191c:	03df      	lsls	r7, r3, #15
 802191e:	d508      	bpl.n	8021932 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8021920:	495f      	ldr	r1, [pc, #380]	; (8021aa0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8021922:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8021924:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8021928:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 802192c:	4302      	orrs	r2, r0
 802192e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8021932:	0398      	lsls	r0, r3, #14
 8021934:	d508      	bpl.n	8021948 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8021936:	495a      	ldr	r1, [pc, #360]	; (8021aa0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8021938:	6f20      	ldr	r0, [r4, #112]	; 0x70
 802193a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 802193e:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8021942:	4302      	orrs	r2, r0
 8021944:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8021948:	0659      	lsls	r1, r3, #25
 802194a:	d508      	bpl.n	802195e <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 802194c:	4954      	ldr	r1, [pc, #336]	; (8021aa0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 802194e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8021950:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8021954:	f022 0203 	bic.w	r2, r2, #3
 8021958:	4302      	orrs	r2, r0
 802195a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 802195e:	061a      	lsls	r2, r3, #24
 8021960:	d508      	bpl.n	8021974 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8021962:	494f      	ldr	r1, [pc, #316]	; (8021aa0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8021964:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8021966:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 802196a:	f022 020c 	bic.w	r2, r2, #12
 802196e:	4302      	orrs	r2, r0
 8021970:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8021974:	05df      	lsls	r7, r3, #23
 8021976:	d508      	bpl.n	802198a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8021978:	4949      	ldr	r1, [pc, #292]	; (8021aa0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 802197a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 802197c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8021980:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8021984:	4302      	orrs	r2, r0
 8021986:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 802198a:	0598      	lsls	r0, r3, #22
 802198c:	d508      	bpl.n	80219a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 802198e:	4944      	ldr	r1, [pc, #272]	; (8021aa0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8021990:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8021992:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8021996:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 802199a:	4302      	orrs	r2, r0
 802199c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80219a0:	0559      	lsls	r1, r3, #21
 80219a2:	d508      	bpl.n	80219b6 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80219a4:	493e      	ldr	r1, [pc, #248]	; (8021aa0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80219a6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80219a8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80219ac:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80219b0:	4302      	orrs	r2, r0
 80219b2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80219b6:	051a      	lsls	r2, r3, #20
 80219b8:	d508      	bpl.n	80219cc <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80219ba:	4939      	ldr	r1, [pc, #228]	; (8021aa0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80219bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80219be:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80219c2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80219c6:	4302      	orrs	r2, r0
 80219c8:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80219cc:	04df      	lsls	r7, r3, #19
 80219ce:	d508      	bpl.n	80219e2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80219d0:	4933      	ldr	r1, [pc, #204]	; (8021aa0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80219d2:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80219d4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80219d8:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80219dc:	4302      	orrs	r2, r0
 80219de:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80219e2:	0498      	lsls	r0, r3, #18
 80219e4:	d508      	bpl.n	80219f8 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80219e6:	492e      	ldr	r1, [pc, #184]	; (8021aa0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80219e8:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80219ea:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80219ee:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80219f2:	4302      	orrs	r2, r0
 80219f4:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80219f8:	0259      	lsls	r1, r3, #9
 80219fa:	d508      	bpl.n	8021a0e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80219fc:	4928      	ldr	r1, [pc, #160]	; (8021aa0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80219fe:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8021a00:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8021a04:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8021a08:	4302      	orrs	r2, r0
 8021a0a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8021a0e:	029a      	lsls	r2, r3, #10
 8021a10:	d50c      	bpl.n	8021a2c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8021a12:	4823      	ldr	r0, [pc, #140]	; (8021aa0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8021a14:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8021a16:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 8021a1a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8021a1e:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 8021a22:	bf08      	it	eq
 8021a24:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8021a26:	430a      	orrs	r2, r1
 8021a28:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 8021a2c:	f013 0f08 	tst.w	r3, #8
 8021a30:	bf18      	it	ne
 8021a32:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8021a34:	035f      	lsls	r7, r3, #13
 8021a36:	d508      	bpl.n	8021a4a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8021a38:	4919      	ldr	r1, [pc, #100]	; (8021aa0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8021a3a:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8021a3c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8021a40:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8021a44:	4302      	orrs	r2, r0
 8021a46:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8021a4a:	0218      	lsls	r0, r3, #8
 8021a4c:	d509      	bpl.n	8021a62 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8021a4e:	4914      	ldr	r1, [pc, #80]	; (8021aa0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8021a50:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8021a54:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8021a58:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8021a5c:	4302      	orrs	r2, r0
 8021a5e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8021a62:	2e01      	cmp	r6, #1
 8021a64:	f000 80b4 	beq.w	8021bd0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8021a68:	0199      	lsls	r1, r3, #6
 8021a6a:	f100 80b1 	bmi.w	8021bd0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8021a6e:	2d01      	cmp	r5, #1
 8021a70:	d175      	bne.n	8021b5e <HAL_RCCEx_PeriphCLKConfig+0x376>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8021a72:	4d0b      	ldr	r5, [pc, #44]	; (8021aa0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8021a74:	682b      	ldr	r3, [r5, #0]
 8021a76:	462e      	mov	r6, r5
 8021a78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8021a7c:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8021a7e:	f7fe fe01 	bl	8020684 <HAL_GetTick>
 8021a82:	4607      	mov	r7, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8021a84:	682b      	ldr	r3, [r5, #0]
 8021a86:	009b      	lsls	r3, r3, #2
 8021a88:	f100 8126 	bmi.w	8021cd8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8021a8c:	6822      	ldr	r2, [r4, #0]
 8021a8e:	0315      	lsls	r5, r2, #12
 8021a90:	d501      	bpl.n	8021a96 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
 8021a92:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8021a94:	b143      	cbz	r3, 8021aa8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8021a96:	02d0      	lsls	r0, r2, #11
 8021a98:	d521      	bpl.n	8021ade <HAL_RCCEx_PeriphCLKConfig+0x2f6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8021a9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8021a9c:	b9fb      	cbnz	r3, 8021ade <HAL_RCCEx_PeriphCLKConfig+0x2f6>
 8021a9e:	e003      	b.n	8021aa8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8021aa0:	40023800 	.word	0x40023800
 8021aa4:	40007000 	.word	0x40007000
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8021aa8:	f8d6 3088 	ldr.w	r3, [r6, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8021aac:	f8d6 1088 	ldr.w	r1, [r6, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8021ab0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8021ab4:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8021ab8:	430b      	orrs	r3, r1
 8021aba:	6961      	ldr	r1, [r4, #20]
 8021abc:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8021ac0:	69a1      	ldr	r1, [r4, #24]
 8021ac2:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8021ac6:	f8c6 3088 	str.w	r3, [r6, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8021aca:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
 8021ace:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8021ad0:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8021ad4:	3901      	subs	r1, #1
 8021ad6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8021ada:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8021ade:	0291      	lsls	r1, r2, #10
 8021ae0:	d515      	bpl.n	8021b0e <HAL_RCCEx_PeriphCLKConfig+0x326>
 8021ae2:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8021ae4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8021ae8:	d111      	bne.n	8021b0e <HAL_RCCEx_PeriphCLKConfig+0x326>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8021aea:	4982      	ldr	r1, [pc, #520]	; (8021cf4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8021aec:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8021af0:	f8d1 0088 	ldr.w	r0, [r1, #136]	; 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8021af4:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8021af8:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8021afc:	4303      	orrs	r3, r0
 8021afe:	6960      	ldr	r0, [r4, #20]
 8021b00:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8021b04:	6a20      	ldr	r0, [r4, #32]
 8021b06:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8021b0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8021b0e:	0712      	lsls	r2, r2, #28
 8021b10:	d519      	bpl.n	8021b46 <HAL_RCCEx_PeriphCLKConfig+0x35e>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8021b12:	4a78      	ldr	r2, [pc, #480]	; (8021cf4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8021b14:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8021b18:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8021b1c:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8021b20:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8021b24:	430b      	orrs	r3, r1
 8021b26:	6961      	ldr	r1, [r4, #20]
 8021b28:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8021b2c:	69e1      	ldr	r1, [r4, #28]
 8021b2e:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8021b32:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8021b36:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8021b3a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8021b3c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8021b40:	430b      	orrs	r3, r1
 8021b42:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8021b46:	4c6b      	ldr	r4, [pc, #428]	; (8021cf4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8021b48:	6823      	ldr	r3, [r4, #0]
 8021b4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8021b4e:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8021b50:	f7fe fd98 	bl	8020684 <HAL_GetTick>
 8021b54:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8021b56:	6823      	ldr	r3, [r4, #0]
 8021b58:	009b      	lsls	r3, r3, #2
 8021b5a:	f140 80c4 	bpl.w	8021ce6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8021b5e:	2000      	movs	r0, #0
 8021b60:	e009      	b.n	8021b76 <HAL_RCCEx_PeriphCLKConfig+0x38e>
      plli2sused = 1;
 8021b62:	2601      	movs	r6, #1
 8021b64:	e67c      	b.n	8021860 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8021b66:	f7fe fd8d 	bl	8020684 <HAL_GetTick>
 8021b6a:	eba0 0008 	sub.w	r0, r0, r8
 8021b6e:	2864      	cmp	r0, #100	; 0x64
 8021b70:	f67f ae8e 	bls.w	8021890 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 8021b74:	2003      	movs	r0, #3
}
 8021b76:	b003      	add	sp, #12
 8021b78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8021b7c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8021b7e:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8021b82:	4293      	cmp	r3, r2
 8021b84:	f43f ae8e 	beq.w	80218a4 <HAL_RCCEx_PeriphCLKConfig+0xbc>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8021b88:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8021b8a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8021b8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8021b90:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8021b94:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8021b96:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8021b98:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8021b9c:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8021b9e:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8021ba0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8021ba2:	07da      	lsls	r2, r3, #31
 8021ba4:	f57f ae7e 	bpl.w	80218a4 <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 8021ba8:	f7fe fd6c 	bl	8020684 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8021bac:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8021bb0:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8021bb2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8021bb4:	079b      	lsls	r3, r3, #30
 8021bb6:	f53f ae75 	bmi.w	80218a4 <HAL_RCCEx_PeriphCLKConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8021bba:	f7fe fd63 	bl	8020684 <HAL_GetTick>
 8021bbe:	eba0 0008 	sub.w	r0, r0, r8
 8021bc2:	4548      	cmp	r0, r9
 8021bc4:	d9f5      	bls.n	8021bb2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
 8021bc6:	e7d5      	b.n	8021b74 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8021bc8:	6891      	ldr	r1, [r2, #8]
 8021bca:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8021bce:	e679      	b.n	80218c4 <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_PLLI2S_DISABLE();
 8021bd0:	4e48      	ldr	r6, [pc, #288]	; (8021cf4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8021bd2:	6833      	ldr	r3, [r6, #0]
 8021bd4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8021bd8:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8021bda:	f7fe fd53 	bl	8020684 <HAL_GetTick>
 8021bde:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8021be0:	6833      	ldr	r3, [r6, #0]
 8021be2:	011a      	lsls	r2, r3, #4
 8021be4:	d472      	bmi.n	8021ccc <HAL_RCCEx_PeriphCLKConfig+0x4e4>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8021be6:	6822      	ldr	r2, [r4, #0]
 8021be8:	07d3      	lsls	r3, r2, #31
 8021bea:	d512      	bpl.n	8021c12 <HAL_RCCEx_PeriphCLKConfig+0x42a>
 8021bec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8021bee:	b983      	cbnz	r3, 8021c12 <HAL_RCCEx_PeriphCLKConfig+0x42a>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8021bf0:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8021bf4:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8021bf8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8021bfc:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8021c00:	430b      	orrs	r3, r1
 8021c02:	6861      	ldr	r1, [r4, #4]
 8021c04:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8021c08:	68a1      	ldr	r1, [r4, #8]
 8021c0a:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8021c0e:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8021c12:	0317      	lsls	r7, r2, #12
 8021c14:	d503      	bpl.n	8021c1e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8021c16:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8021c18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8021c1c:	d005      	beq.n	8021c2a <HAL_RCCEx_PeriphCLKConfig+0x442>
 8021c1e:	02d6      	lsls	r6, r2, #11
 8021c20:	d51e      	bpl.n	8021c60 <HAL_RCCEx_PeriphCLKConfig+0x478>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8021c22:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8021c24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8021c28:	d11a      	bne.n	8021c60 <HAL_RCCEx_PeriphCLKConfig+0x478>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8021c2a:	4932      	ldr	r1, [pc, #200]	; (8021cf4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8021c2c:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8021c30:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8021c34:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8021c38:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8021c3c:	4303      	orrs	r3, r0
 8021c3e:	6860      	ldr	r0, [r4, #4]
 8021c40:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8021c44:	68e0      	ldr	r0, [r4, #12]
 8021c46:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8021c4a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8021c4e:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 8021c52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8021c54:	f020 001f 	bic.w	r0, r0, #31
 8021c58:	3b01      	subs	r3, #1
 8021c5a:	4303      	orrs	r3, r0
 8021c5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8021c60:	01d0      	lsls	r0, r2, #7
 8021c62:	d511      	bpl.n	8021c88 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8021c64:	4923      	ldr	r1, [pc, #140]	; (8021cf4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8021c66:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8021c6a:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8021c6e:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8021c72:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8021c76:	4303      	orrs	r3, r0
 8021c78:	6860      	ldr	r0, [r4, #4]
 8021c7a:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8021c7e:	6920      	ldr	r0, [r4, #16]
 8021c80:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8021c84:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8021c88:	0191      	lsls	r1, r2, #6
 8021c8a:	d50d      	bpl.n	8021ca8 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8021c8c:	6923      	ldr	r3, [r4, #16]
 8021c8e:	6862      	ldr	r2, [r4, #4]
 8021c90:	041b      	lsls	r3, r3, #16
 8021c92:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8021c96:	68e2      	ldr	r2, [r4, #12]
 8021c98:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8021c9c:	68a2      	ldr	r2, [r4, #8]
 8021c9e:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8021ca2:	4a14      	ldr	r2, [pc, #80]	; (8021cf4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8021ca4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8021ca8:	4e12      	ldr	r6, [pc, #72]	; (8021cf4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8021caa:	6833      	ldr	r3, [r6, #0]
 8021cac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8021cb0:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8021cb2:	f7fe fce7 	bl	8020684 <HAL_GetTick>
 8021cb6:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8021cb8:	6833      	ldr	r3, [r6, #0]
 8021cba:	011a      	lsls	r2, r3, #4
 8021cbc:	f53f aed7 	bmi.w	8021a6e <HAL_RCCEx_PeriphCLKConfig+0x286>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8021cc0:	f7fe fce0 	bl	8020684 <HAL_GetTick>
 8021cc4:	1bc0      	subs	r0, r0, r7
 8021cc6:	2864      	cmp	r0, #100	; 0x64
 8021cc8:	d9f6      	bls.n	8021cb8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8021cca:	e753      	b.n	8021b74 <HAL_RCCEx_PeriphCLKConfig+0x38c>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8021ccc:	f7fe fcda 	bl	8020684 <HAL_GetTick>
 8021cd0:	1bc0      	subs	r0, r0, r7
 8021cd2:	2864      	cmp	r0, #100	; 0x64
 8021cd4:	d984      	bls.n	8021be0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8021cd6:	e74d      	b.n	8021b74 <HAL_RCCEx_PeriphCLKConfig+0x38c>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8021cd8:	f7fe fcd4 	bl	8020684 <HAL_GetTick>
 8021cdc:	1bc0      	subs	r0, r0, r7
 8021cde:	2864      	cmp	r0, #100	; 0x64
 8021ce0:	f67f aed0 	bls.w	8021a84 <HAL_RCCEx_PeriphCLKConfig+0x29c>
 8021ce4:	e746      	b.n	8021b74 <HAL_RCCEx_PeriphCLKConfig+0x38c>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8021ce6:	f7fe fccd 	bl	8020684 <HAL_GetTick>
 8021cea:	1b40      	subs	r0, r0, r5
 8021cec:	2864      	cmp	r0, #100	; 0x64
 8021cee:	f67f af32 	bls.w	8021b56 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8021cf2:	e73f      	b.n	8021b74 <HAL_RCCEx_PeriphCLKConfig+0x38c>
 8021cf4:	40023800 	.word	0x40023800

08021cf8 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8021cf8:	b538      	push	{r3, r4, r5, lr}
 8021cfa:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8021cfc:	4604      	mov	r4, r0
 8021cfe:	b1c8      	cbz	r0, 8021d34 <HAL_SDRAM_Init+0x3c>
  {
    return HAL_ERROR;
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8021d00:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8021d04:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8021d08:	b91b      	cbnz	r3, 8021d12 <HAL_SDRAM_Init+0x1a>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8021d0a:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8021d0e:	f7df faf9 	bl	8001304 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8021d12:	2302      	movs	r3, #2
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8021d14:	1d21      	adds	r1, r4, #4
 8021d16:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8021d18:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8021d1c:	f000 faaa 	bl	8022274 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8021d20:	6862      	ldr	r2, [r4, #4]
 8021d22:	4629      	mov	r1, r5
 8021d24:	6820      	ldr	r0, [r4, #0]
 8021d26:	f000 fadb 	bl	80222e0 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8021d2a:	2301      	movs	r3, #1
  
  return HAL_OK;
 8021d2c:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 8021d2e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 8021d32:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8021d34:	2001      	movs	r0, #1
 8021d36:	e7fc      	b.n	8021d32 <HAL_SDRAM_Init+0x3a>

08021d38 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8021d38:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8021d3a:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 8021d3e:	4604      	mov	r4, r0
 8021d40:	460d      	mov	r5, r1
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8021d42:	2b02      	cmp	r3, #2
 8021d44:	b2d8      	uxtb	r0, r3
 8021d46:	d00d      	beq.n	8021d64 <HAL_SDRAM_SendCommand+0x2c>
  {
    return HAL_BUSY;
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8021d48:	2302      	movs	r3, #2
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8021d4a:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8021d4c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8021d50:	f000 fb09 	bl	8022366 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8021d54:	682b      	ldr	r3, [r5, #0]
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  
  return HAL_OK;  
 8021d56:	2000      	movs	r0, #0
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8021d58:	2b02      	cmp	r3, #2
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8021d5a:	bf0c      	ite	eq
 8021d5c:	2305      	moveq	r3, #5
    hsdram->State = HAL_SDRAM_STATE_READY;
 8021d5e:	2301      	movne	r3, #1
 8021d60:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 8021d64:	bd38      	pop	{r3, r4, r5, pc}

08021d66 <HAL_SDRAM_SetAutoRefreshNumber>:
  *                the configuration information for SDRAM module.  
  * @param  AutoRefreshNumber The SDRAM auto Refresh number       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SetAutoRefreshNumber(SDRAM_HandleTypeDef *hsdram, uint32_t AutoRefreshNumber)
{
 8021d66:	b510      	push	{r4, lr}
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8021d68:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 8021d6c:	4604      	mov	r4, r0
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8021d6e:	2b02      	cmp	r3, #2
 8021d70:	b2d8      	uxtb	r0, r3
 8021d72:	d009      	beq.n	8021d88 <HAL_SDRAM_SetAutoRefreshNumber+0x22>
  {
    return HAL_BUSY;
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8021d74:	2302      	movs	r3, #2
  
  /* Set the Auto-Refresh number */
  FMC_SDRAM_SetAutoRefreshNumber(hsdram->Instance ,AutoRefreshNumber);
 8021d76:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8021d78:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_SetAutoRefreshNumber(hsdram->Instance ,AutoRefreshNumber);
 8021d7c:	f000 fb05 	bl	802238a <FMC_SDRAM_SetAutoRefreshNumber>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8021d80:	2301      	movs	r3, #1
  
  return HAL_OK;
 8021d82:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 8021d84:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 8021d88:	bd10      	pop	{r4, pc}
	...

08021d8c <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8021d8c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8021d90:	2b01      	cmp	r3, #1
 8021d92:	d133      	bne.n	8021dfc <HAL_TIM_Base_Start_IT+0x70>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8021d94:	2302      	movs	r3, #2
 8021d96:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8021d9a:	6803      	ldr	r3, [r0, #0]
 8021d9c:	68da      	ldr	r2, [r3, #12]
 8021d9e:	f042 0201 	orr.w	r2, r2, #1
 8021da2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8021da4:	4a16      	ldr	r2, [pc, #88]	; (8021e00 <HAL_TIM_Base_Start_IT+0x74>)
 8021da6:	4293      	cmp	r3, r2
 8021da8:	d01a      	beq.n	8021de0 <HAL_TIM_Base_Start_IT+0x54>
 8021daa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8021dae:	d017      	beq.n	8021de0 <HAL_TIM_Base_Start_IT+0x54>
 8021db0:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8021db4:	4293      	cmp	r3, r2
 8021db6:	d013      	beq.n	8021de0 <HAL_TIM_Base_Start_IT+0x54>
 8021db8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8021dbc:	4293      	cmp	r3, r2
 8021dbe:	d00f      	beq.n	8021de0 <HAL_TIM_Base_Start_IT+0x54>
 8021dc0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8021dc4:	4293      	cmp	r3, r2
 8021dc6:	d00b      	beq.n	8021de0 <HAL_TIM_Base_Start_IT+0x54>
 8021dc8:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8021dcc:	4293      	cmp	r3, r2
 8021dce:	d007      	beq.n	8021de0 <HAL_TIM_Base_Start_IT+0x54>
 8021dd0:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8021dd4:	4293      	cmp	r3, r2
 8021dd6:	d003      	beq.n	8021de0 <HAL_TIM_Base_Start_IT+0x54>
 8021dd8:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8021ddc:	4293      	cmp	r3, r2
 8021dde:	d107      	bne.n	8021df0 <HAL_TIM_Base_Start_IT+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8021de0:	6899      	ldr	r1, [r3, #8]
 8021de2:	4a08      	ldr	r2, [pc, #32]	; (8021e04 <HAL_TIM_Base_Start_IT+0x78>)
 8021de4:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8021de6:	2a06      	cmp	r2, #6
 8021de8:	d006      	beq.n	8021df8 <HAL_TIM_Base_Start_IT+0x6c>
 8021dea:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8021dee:	d003      	beq.n	8021df8 <HAL_TIM_Base_Start_IT+0x6c>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8021df0:	681a      	ldr	r2, [r3, #0]
 8021df2:	f042 0201 	orr.w	r2, r2, #1
 8021df6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8021df8:	2000      	movs	r0, #0
}
 8021dfa:	4770      	bx	lr
    return HAL_ERROR;
 8021dfc:	2001      	movs	r0, #1
 8021dfe:	4770      	bx	lr
 8021e00:	40010000 	.word	0x40010000
 8021e04:	00010007 	.word	0x00010007

08021e08 <HAL_TIM_OC_DelayElapsedCallback>:
 8021e08:	4770      	bx	lr

08021e0a <HAL_TIM_IC_CaptureCallback>:
 8021e0a:	4770      	bx	lr

08021e0c <HAL_TIM_PWM_PulseFinishedCallback>:
 8021e0c:	4770      	bx	lr

08021e0e <HAL_TIM_TriggerCallback>:
 8021e0e:	4770      	bx	lr

08021e10 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8021e10:	6803      	ldr	r3, [r0, #0]
 8021e12:	691a      	ldr	r2, [r3, #16]
 8021e14:	0791      	lsls	r1, r2, #30
{
 8021e16:	b510      	push	{r4, lr}
 8021e18:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8021e1a:	d50f      	bpl.n	8021e3c <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8021e1c:	68da      	ldr	r2, [r3, #12]
 8021e1e:	0792      	lsls	r2, r2, #30
 8021e20:	d50c      	bpl.n	8021e3c <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8021e22:	f06f 0202 	mvn.w	r2, #2
 8021e26:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8021e28:	2201      	movs	r2, #1
 8021e2a:	7702      	strb	r2, [r0, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8021e2c:	699b      	ldr	r3, [r3, #24]
 8021e2e:	0799      	lsls	r1, r3, #30
 8021e30:	f000 8085 	beq.w	8021f3e <HAL_TIM_IRQHandler+0x12e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8021e34:	f7ff ffe9 	bl	8021e0a <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8021e38:	2300      	movs	r3, #0
 8021e3a:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8021e3c:	6823      	ldr	r3, [r4, #0]
 8021e3e:	691a      	ldr	r2, [r3, #16]
 8021e40:	0752      	lsls	r2, r2, #29
 8021e42:	d510      	bpl.n	8021e66 <HAL_TIM_IRQHandler+0x56>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8021e44:	68da      	ldr	r2, [r3, #12]
 8021e46:	0750      	lsls	r0, r2, #29
 8021e48:	d50d      	bpl.n	8021e66 <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8021e4a:	f06f 0204 	mvn.w	r2, #4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8021e4e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8021e50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8021e52:	2202      	movs	r2, #2
 8021e54:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8021e56:	699b      	ldr	r3, [r3, #24]
 8021e58:	f413 7f40 	tst.w	r3, #768	; 0x300
 8021e5c:	d075      	beq.n	8021f4a <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 8021e5e:	f7ff ffd4 	bl	8021e0a <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8021e62:	2300      	movs	r3, #0
 8021e64:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8021e66:	6823      	ldr	r3, [r4, #0]
 8021e68:	691a      	ldr	r2, [r3, #16]
 8021e6a:	0711      	lsls	r1, r2, #28
 8021e6c:	d50f      	bpl.n	8021e8e <HAL_TIM_IRQHandler+0x7e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8021e6e:	68da      	ldr	r2, [r3, #12]
 8021e70:	0712      	lsls	r2, r2, #28
 8021e72:	d50c      	bpl.n	8021e8e <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8021e74:	f06f 0208 	mvn.w	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8021e78:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8021e7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8021e7c:	2204      	movs	r2, #4
 8021e7e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8021e80:	69db      	ldr	r3, [r3, #28]
 8021e82:	079b      	lsls	r3, r3, #30
 8021e84:	d067      	beq.n	8021f56 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8021e86:	f7ff ffc0 	bl	8021e0a <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8021e8a:	2300      	movs	r3, #0
 8021e8c:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8021e8e:	6823      	ldr	r3, [r4, #0]
 8021e90:	691a      	ldr	r2, [r3, #16]
 8021e92:	06d0      	lsls	r0, r2, #27
 8021e94:	d510      	bpl.n	8021eb8 <HAL_TIM_IRQHandler+0xa8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8021e96:	68da      	ldr	r2, [r3, #12]
 8021e98:	06d1      	lsls	r1, r2, #27
 8021e9a:	d50d      	bpl.n	8021eb8 <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8021e9c:	f06f 0210 	mvn.w	r2, #16
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8021ea0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8021ea2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8021ea4:	2208      	movs	r2, #8
 8021ea6:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8021ea8:	69db      	ldr	r3, [r3, #28]
 8021eaa:	f413 7f40 	tst.w	r3, #768	; 0x300
 8021eae:	d058      	beq.n	8021f62 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8021eb0:	f7ff ffab 	bl	8021e0a <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8021eb4:	2300      	movs	r3, #0
 8021eb6:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8021eb8:	6823      	ldr	r3, [r4, #0]
 8021eba:	691a      	ldr	r2, [r3, #16]
 8021ebc:	07d2      	lsls	r2, r2, #31
 8021ebe:	d508      	bpl.n	8021ed2 <HAL_TIM_IRQHandler+0xc2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8021ec0:	68da      	ldr	r2, [r3, #12]
 8021ec2:	07d0      	lsls	r0, r2, #31
 8021ec4:	d505      	bpl.n	8021ed2 <HAL_TIM_IRQHandler+0xc2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8021ec6:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8021eca:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8021ecc:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8021ece:	f7df fcd3 	bl	8001878 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8021ed2:	6823      	ldr	r3, [r4, #0]
 8021ed4:	691a      	ldr	r2, [r3, #16]
 8021ed6:	0611      	lsls	r1, r2, #24
 8021ed8:	d508      	bpl.n	8021eec <HAL_TIM_IRQHandler+0xdc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8021eda:	68da      	ldr	r2, [r3, #12]
 8021edc:	0612      	lsls	r2, r2, #24
 8021ede:	d505      	bpl.n	8021eec <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8021ee0:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8021ee4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8021ee6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8021ee8:	f000 f9c1 	bl	802226e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8021eec:	6823      	ldr	r3, [r4, #0]
 8021eee:	691a      	ldr	r2, [r3, #16]
 8021ef0:	05d0      	lsls	r0, r2, #23
 8021ef2:	d508      	bpl.n	8021f06 <HAL_TIM_IRQHandler+0xf6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8021ef4:	68da      	ldr	r2, [r3, #12]
 8021ef6:	0611      	lsls	r1, r2, #24
 8021ef8:	d505      	bpl.n	8021f06 <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8021efa:	f46f 7280 	mvn.w	r2, #256	; 0x100
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8021efe:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8021f00:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8021f02:	f000 f9b5 	bl	8022270 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8021f06:	6823      	ldr	r3, [r4, #0]
 8021f08:	691a      	ldr	r2, [r3, #16]
 8021f0a:	0652      	lsls	r2, r2, #25
 8021f0c:	d508      	bpl.n	8021f20 <HAL_TIM_IRQHandler+0x110>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8021f0e:	68da      	ldr	r2, [r3, #12]
 8021f10:	0650      	lsls	r0, r2, #25
 8021f12:	d505      	bpl.n	8021f20 <HAL_TIM_IRQHandler+0x110>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8021f14:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8021f18:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8021f1a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8021f1c:	f7ff ff77 	bl	8021e0e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8021f20:	6823      	ldr	r3, [r4, #0]
 8021f22:	691a      	ldr	r2, [r3, #16]
 8021f24:	0691      	lsls	r1, r2, #26
 8021f26:	d522      	bpl.n	8021f6e <HAL_TIM_IRQHandler+0x15e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8021f28:	68da      	ldr	r2, [r3, #12]
 8021f2a:	0692      	lsls	r2, r2, #26
 8021f2c:	d51f      	bpl.n	8021f6e <HAL_TIM_IRQHandler+0x15e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8021f2e:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8021f32:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8021f34:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8021f36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8021f3a:	f000 b997 	b.w	802226c <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8021f3e:	f7ff ff63 	bl	8021e08 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8021f42:	4620      	mov	r0, r4
 8021f44:	f7ff ff62 	bl	8021e0c <HAL_TIM_PWM_PulseFinishedCallback>
 8021f48:	e776      	b.n	8021e38 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8021f4a:	f7ff ff5d 	bl	8021e08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8021f4e:	4620      	mov	r0, r4
 8021f50:	f7ff ff5c 	bl	8021e0c <HAL_TIM_PWM_PulseFinishedCallback>
 8021f54:	e785      	b.n	8021e62 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8021f56:	f7ff ff57 	bl	8021e08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8021f5a:	4620      	mov	r0, r4
 8021f5c:	f7ff ff56 	bl	8021e0c <HAL_TIM_PWM_PulseFinishedCallback>
 8021f60:	e793      	b.n	8021e8a <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8021f62:	f7ff ff51 	bl	8021e08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8021f66:	4620      	mov	r0, r4
 8021f68:	f7ff ff50 	bl	8021e0c <HAL_TIM_PWM_PulseFinishedCallback>
 8021f6c:	e7a2      	b.n	8021eb4 <HAL_TIM_IRQHandler+0xa4>
}
 8021f6e:	bd10      	pop	{r4, pc}

08021f70 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8021f70:	4a30      	ldr	r2, [pc, #192]	; (8022034 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8021f72:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8021f74:	4290      	cmp	r0, r2
 8021f76:	d012      	beq.n	8021f9e <TIM_Base_SetConfig+0x2e>
 8021f78:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8021f7c:	d00f      	beq.n	8021f9e <TIM_Base_SetConfig+0x2e>
 8021f7e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8021f82:	4290      	cmp	r0, r2
 8021f84:	d00b      	beq.n	8021f9e <TIM_Base_SetConfig+0x2e>
 8021f86:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8021f8a:	4290      	cmp	r0, r2
 8021f8c:	d007      	beq.n	8021f9e <TIM_Base_SetConfig+0x2e>
 8021f8e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8021f92:	4290      	cmp	r0, r2
 8021f94:	d003      	beq.n	8021f9e <TIM_Base_SetConfig+0x2e>
 8021f96:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8021f9a:	4290      	cmp	r0, r2
 8021f9c:	d119      	bne.n	8021fd2 <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8021f9e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8021fa0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8021fa4:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8021fa6:	4a23      	ldr	r2, [pc, #140]	; (8022034 <TIM_Base_SetConfig+0xc4>)
 8021fa8:	4290      	cmp	r0, r2
 8021faa:	d029      	beq.n	8022000 <TIM_Base_SetConfig+0x90>
 8021fac:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8021fb0:	d026      	beq.n	8022000 <TIM_Base_SetConfig+0x90>
 8021fb2:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8021fb6:	4290      	cmp	r0, r2
 8021fb8:	d022      	beq.n	8022000 <TIM_Base_SetConfig+0x90>
 8021fba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8021fbe:	4290      	cmp	r0, r2
 8021fc0:	d01e      	beq.n	8022000 <TIM_Base_SetConfig+0x90>
 8021fc2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8021fc6:	4290      	cmp	r0, r2
 8021fc8:	d01a      	beq.n	8022000 <TIM_Base_SetConfig+0x90>
 8021fca:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8021fce:	4290      	cmp	r0, r2
 8021fd0:	d016      	beq.n	8022000 <TIM_Base_SetConfig+0x90>
 8021fd2:	4a19      	ldr	r2, [pc, #100]	; (8022038 <TIM_Base_SetConfig+0xc8>)
 8021fd4:	4290      	cmp	r0, r2
 8021fd6:	d013      	beq.n	8022000 <TIM_Base_SetConfig+0x90>
 8021fd8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8021fdc:	4290      	cmp	r0, r2
 8021fde:	d00f      	beq.n	8022000 <TIM_Base_SetConfig+0x90>
 8021fe0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8021fe4:	4290      	cmp	r0, r2
 8021fe6:	d00b      	beq.n	8022000 <TIM_Base_SetConfig+0x90>
 8021fe8:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8021fec:	4290      	cmp	r0, r2
 8021fee:	d007      	beq.n	8022000 <TIM_Base_SetConfig+0x90>
 8021ff0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8021ff4:	4290      	cmp	r0, r2
 8021ff6:	d003      	beq.n	8022000 <TIM_Base_SetConfig+0x90>
 8021ff8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8021ffc:	4290      	cmp	r0, r2
 8021ffe:	d103      	bne.n	8022008 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8022000:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8022004:	68ca      	ldr	r2, [r1, #12]
 8022006:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8022008:	694a      	ldr	r2, [r1, #20]
 802200a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 802200e:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8022010:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8022012:	688b      	ldr	r3, [r1, #8]
 8022014:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8022016:	680b      	ldr	r3, [r1, #0]
 8022018:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 802201a:	4b06      	ldr	r3, [pc, #24]	; (8022034 <TIM_Base_SetConfig+0xc4>)
 802201c:	4298      	cmp	r0, r3
 802201e:	d003      	beq.n	8022028 <TIM_Base_SetConfig+0xb8>
 8022020:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8022024:	4298      	cmp	r0, r3
 8022026:	d101      	bne.n	802202c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8022028:	690b      	ldr	r3, [r1, #16]
 802202a:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 802202c:	2301      	movs	r3, #1
 802202e:	6143      	str	r3, [r0, #20]
}
 8022030:	4770      	bx	lr
 8022032:	bf00      	nop
 8022034:	40010000 	.word	0x40010000
 8022038:	40014000 	.word	0x40014000

0802203c <HAL_TIM_Base_Init>:
{
 802203c:	b510      	push	{r4, lr}
  if (htim == NULL)
 802203e:	4604      	mov	r4, r0
 8022040:	b350      	cbz	r0, 8022098 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8022042:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8022046:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 802204a:	b91b      	cbnz	r3, 8022054 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 802204c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8022050:	f7df fd86 	bl	8001b60 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8022054:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8022056:	6820      	ldr	r0, [r4, #0]
 8022058:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 802205a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 802205e:	f7ff ff87 	bl	8021f70 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8022062:	2301      	movs	r3, #1
  return HAL_OK;
 8022064:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8022066:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 802206a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 802206e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8022072:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8022076:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 802207a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802207e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8022082:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8022086:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802208a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 802208e:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8022092:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8022096:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8022098:	2001      	movs	r0, #1
 802209a:	e7fc      	b.n	8022096 <HAL_TIM_Base_Init+0x5a>

0802209c <TIM_ETR_SetConfig>:

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 802209c:	4311      	orrs	r1, r2
{
 802209e:	b510      	push	{r4, lr}
  tmpsmcr = TIMx->SMCR;
 80220a0:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80220a2:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80220a6:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80220aa:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80220ac:	6083      	str	r3, [r0, #8]
}
 80220ae:	bd10      	pop	{r4, pc}

080220b0 <HAL_TIM_ConfigClockSource>:
{
 80220b0:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 80220b2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80220b6:	4604      	mov	r4, r0
 80220b8:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 80220ba:	2b01      	cmp	r3, #1
 80220bc:	d025      	beq.n	802210a <HAL_TIM_ConfigClockSource+0x5a>
  htim->State = HAL_TIM_STATE_BUSY;
 80220be:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 80220c2:	2301      	movs	r3, #1
  tmpsmcr = htim->Instance->SMCR;
 80220c4:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 80220c6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80220ca:	4b42      	ldr	r3, [pc, #264]	; (80221d4 <HAL_TIM_ConfigClockSource+0x124>)
  tmpsmcr = htim->Instance->SMCR;
 80220cc:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80220ce:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 80220d0:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 80220d2:	680b      	ldr	r3, [r1, #0]
 80220d4:	2b60      	cmp	r3, #96	; 0x60
 80220d6:	d04d      	beq.n	8022174 <HAL_TIM_ConfigClockSource+0xc4>
 80220d8:	d832      	bhi.n	8022140 <HAL_TIM_ConfigClockSource+0x90>
 80220da:	2b40      	cmp	r3, #64	; 0x40
 80220dc:	d062      	beq.n	80221a4 <HAL_TIM_ConfigClockSource+0xf4>
 80220de:	d815      	bhi.n	802210c <HAL_TIM_ConfigClockSource+0x5c>
 80220e0:	2b20      	cmp	r3, #32
 80220e2:	d003      	beq.n	80220ec <HAL_TIM_ConfigClockSource+0x3c>
 80220e4:	d809      	bhi.n	80220fa <HAL_TIM_ConfigClockSource+0x4a>
 80220e6:	f033 0210 	bics.w	r2, r3, #16
 80220ea:	d108      	bne.n	80220fe <HAL_TIM_ConfigClockSource+0x4e>
  tmpsmcr = TIMx->SMCR;
 80220ec:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80220ee:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80220f2:	4313      	orrs	r3, r2
 80220f4:	f043 0307 	orr.w	r3, r3, #7
 80220f8:	e020      	b.n	802213c <HAL_TIM_ConfigClockSource+0x8c>
  switch (sClockSourceConfig->ClockSource)
 80220fa:	2b30      	cmp	r3, #48	; 0x30
 80220fc:	d0f6      	beq.n	80220ec <HAL_TIM_ConfigClockSource+0x3c>
  htim->State = HAL_TIM_STATE_READY;
 80220fe:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8022100:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8022102:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8022106:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 802210a:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 802210c:	2b50      	cmp	r3, #80	; 0x50
 802210e:	d1f6      	bne.n	80220fe <HAL_TIM_ConfigClockSource+0x4e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8022110:	684a      	ldr	r2, [r1, #4]
 8022112:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8022114:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8022116:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8022118:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 802211c:	f025 0501 	bic.w	r5, r5, #1
  tmpccer |= TIM_ICPolarity;
 8022120:	430a      	orrs	r2, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8022122:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8022124:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8022126:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 802212a:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 802212e:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8022130:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8022132:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8022134:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8022138:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 802213c:	6083      	str	r3, [r0, #8]
}
 802213e:	e7de      	b.n	80220fe <HAL_TIM_ConfigClockSource+0x4e>
  switch (sClockSourceConfig->ClockSource)
 8022140:	2b70      	cmp	r3, #112	; 0x70
 8022142:	d00c      	beq.n	802215e <HAL_TIM_ConfigClockSource+0xae>
 8022144:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8022148:	d1d9      	bne.n	80220fe <HAL_TIM_ConfigClockSource+0x4e>
      TIM_ETR_SetConfig(htim->Instance,
 802214a:	68cb      	ldr	r3, [r1, #12]
 802214c:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8022150:	f7ff ffa4 	bl	802209c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8022154:	6822      	ldr	r2, [r4, #0]
 8022156:	6893      	ldr	r3, [r2, #8]
 8022158:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 802215c:	e008      	b.n	8022170 <HAL_TIM_ConfigClockSource+0xc0>
      TIM_ETR_SetConfig(htim->Instance,
 802215e:	68cb      	ldr	r3, [r1, #12]
 8022160:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8022164:	f7ff ff9a 	bl	802209c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8022168:	6822      	ldr	r2, [r4, #0]
 802216a:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 802216c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8022170:	6093      	str	r3, [r2, #8]
      break;
 8022172:	e7c4      	b.n	80220fe <HAL_TIM_ConfigClockSource+0x4e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8022174:	684d      	ldr	r5, [r1, #4]
 8022176:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8022178:	6a01      	ldr	r1, [r0, #32]
 802217a:	f021 0110 	bic.w	r1, r1, #16
 802217e:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8022180:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8022182:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8022184:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8022188:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 802218c:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 8022190:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8022194:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8022196:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8022198:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 802219a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 802219e:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 80221a2:	e7cb      	b.n	802213c <HAL_TIM_ConfigClockSource+0x8c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80221a4:	684a      	ldr	r2, [r1, #4]
 80221a6:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80221a8:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80221aa:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80221ac:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80221b0:	f025 0501 	bic.w	r5, r5, #1
  tmpccer |= TIM_ICPolarity;
 80221b4:	430a      	orrs	r2, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80221b6:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80221b8:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80221ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80221be:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80221c2:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80221c4:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80221c6:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80221c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80221cc:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 80221d0:	e7b4      	b.n	802213c <HAL_TIM_ConfigClockSource+0x8c>
 80221d2:	bf00      	nop
 80221d4:	fffe0088 	.word	0xfffe0088

080221d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80221d8:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80221da:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80221de:	2b01      	cmp	r3, #1
 80221e0:	f04f 0302 	mov.w	r3, #2
 80221e4:	d03d      	beq.n	8022262 <HAL_TIMEx_MasterConfigSynchronization+0x8a>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80221e6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80221ea:	4d1f      	ldr	r5, [pc, #124]	; (8022268 <HAL_TIMEx_MasterConfigSynchronization+0x90>)
  tmpcr2 = htim->Instance->CR2;
 80221ec:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80221ee:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 80221f0:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 80221f2:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80221f4:	d003      	beq.n	80221fe <HAL_TIMEx_MasterConfigSynchronization+0x26>
 80221f6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80221fa:	42ab      	cmp	r3, r5
 80221fc:	d103      	bne.n	8022206 <HAL_TIMEx_MasterConfigSynchronization+0x2e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80221fe:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8022202:	684d      	ldr	r5, [r1, #4]
 8022204:	432a      	orrs	r2, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8022206:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8022208:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 802220c:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 802220e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8022210:	4a15      	ldr	r2, [pc, #84]	; (8022268 <HAL_TIMEx_MasterConfigSynchronization+0x90>)
 8022212:	4293      	cmp	r3, r2
 8022214:	d01a      	beq.n	802224c <HAL_TIMEx_MasterConfigSynchronization+0x74>
 8022216:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802221a:	d017      	beq.n	802224c <HAL_TIMEx_MasterConfigSynchronization+0x74>
 802221c:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8022220:	4293      	cmp	r3, r2
 8022222:	d013      	beq.n	802224c <HAL_TIMEx_MasterConfigSynchronization+0x74>
 8022224:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8022228:	4293      	cmp	r3, r2
 802222a:	d00f      	beq.n	802224c <HAL_TIMEx_MasterConfigSynchronization+0x74>
 802222c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8022230:	4293      	cmp	r3, r2
 8022232:	d00b      	beq.n	802224c <HAL_TIMEx_MasterConfigSynchronization+0x74>
 8022234:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8022238:	4293      	cmp	r3, r2
 802223a:	d007      	beq.n	802224c <HAL_TIMEx_MasterConfigSynchronization+0x74>
 802223c:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8022240:	4293      	cmp	r3, r2
 8022242:	d003      	beq.n	802224c <HAL_TIMEx_MasterConfigSynchronization+0x74>
 8022244:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8022248:	4293      	cmp	r3, r2
 802224a:	d104      	bne.n	8022256 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 802224c:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 802224e:	f024 0280 	bic.w	r2, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8022252:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8022254:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8022256:	2301      	movs	r3, #1
 8022258:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 802225c:	2300      	movs	r3, #0
 802225e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8022262:	4618      	mov	r0, r3

  return HAL_OK;
}
 8022264:	bd30      	pop	{r4, r5, pc}
 8022266:	bf00      	nop
 8022268:	40010000 	.word	0x40010000

0802226c <HAL_TIMEx_CommutCallback>:
 802226c:	4770      	bx	lr

0802226e <HAL_TIMEx_BreakCallback>:
 802226e:	4770      	bx	lr

08022270 <HAL_TIMEx_Break2Callback>:
 8022270:	4770      	bx	lr
	...

08022274 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8022274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022278:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 802227a:	e9d1 4307 	ldrd	r4, r3, [r1, #28]
 802227e:	e9d1 5801 	ldrd	r5, r8, [r1, #4]
 8022282:	e9d1 ec03 	ldrd	lr, ip, [r1, #12]
 8022286:	e9d1 7605 	ldrd	r7, r6, [r1, #20]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 802228a:	6809      	ldr	r1, [r1, #0]
 802228c:	4323      	orrs	r3, r4
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 802228e:	6804      	ldr	r4, [r0, #0]
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8022290:	2901      	cmp	r1, #1
 8022292:	4912      	ldr	r1, [pc, #72]	; (80222dc <FMC_SDRAM_Init+0x68>)
 8022294:	d00f      	beq.n	80222b6 <FMC_SDRAM_Init+0x42>
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8022296:	431a      	orrs	r2, r3
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8022298:	4021      	ands	r1, r4
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 802229a:	432a      	orrs	r2, r5
 802229c:	ea42 0308 	orr.w	r3, r2, r8
 80222a0:	ea43 030e 	orr.w	r3, r3, lr
 80222a4:	ea43 030c 	orr.w	r3, r3, ip
 80222a8:	433b      	orrs	r3, r7
 80222aa:	4333      	orrs	r3, r6
 80222ac:	430b      	orrs	r3, r1
                        Init->WriteProtection    |\
                        Init->SDClockPeriod      |\
                        Init->ReadBurst          |\
                        Init->ReadPipeDelay
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80222ae:	6003      	str	r3, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 80222b0:	2000      	movs	r0, #0
 80222b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80222b6:	4313      	orrs	r3, r2
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 80222b8:	6842      	ldr	r2, [r0, #4]
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 80222ba:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80222be:	4011      	ands	r1, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80222c0:	ea45 0208 	orr.w	r2, r5, r8
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80222c4:	4323      	orrs	r3, r4
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80222c6:	ea42 020e 	orr.w	r2, r2, lr
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80222ca:	6003      	str	r3, [r0, #0]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80222cc:	ea42 020c 	orr.w	r2, r2, ip
 80222d0:	433a      	orrs	r2, r7
 80222d2:	4332      	orrs	r2, r6
 80222d4:	430a      	orrs	r2, r1
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 80222d6:	6042      	str	r2, [r0, #4]
 80222d8:	e7ea      	b.n	80222b0 <FMC_SDRAM_Init+0x3c>
 80222da:	bf00      	nop
 80222dc:	ffff8000 	.word	0xffff8000

080222e0 <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 80222e0:	68cb      	ldr	r3, [r1, #12]
 80222e2:	2a01      	cmp	r2, #1
{
 80222e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80222e6:	680c      	ldr	r4, [r1, #0]
 80222e8:	f103 37ff 	add.w	r7, r3, #4294967295
 80222ec:	694b      	ldr	r3, [r1, #20]
 80222ee:	688e      	ldr	r6, [r1, #8]
 80222f0:	f104 3cff 	add.w	ip, r4, #4294967295
 80222f4:	690d      	ldr	r5, [r1, #16]
 80222f6:	f103 33ff 	add.w	r3, r3, #4294967295
 80222fa:	684c      	ldr	r4, [r1, #4]
 80222fc:	f106 36ff 	add.w	r6, r6, #4294967295
 8022300:	6989      	ldr	r1, [r1, #24]
 8022302:	ea4f 5303 	mov.w	r3, r3, lsl #20
 8022306:	f104 34ff 	add.w	r4, r4, #4294967295
 802230a:	f105 35ff 	add.w	r5, r5, #4294967295
 802230e:	f101 31ff 	add.w	r1, r1, #4294967295
 8022312:	ea4f 2606 	mov.w	r6, r6, lsl #8
 8022316:	ea4f 1404 	mov.w	r4, r4, lsl #4
 802231a:	ea4f 4505 	mov.w	r5, r5, lsl #16
 802231e:	ea4f 6101 	mov.w	r1, r1, lsl #24
 8022322:	ea43 3307 	orr.w	r3, r3, r7, lsl #12
  if (Bank != FMC_SDRAM_BANK2) 
 8022326:	d00c      	beq.n	8022342 <FMC_SDRAM_Timing_Init+0x62>
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8022328:	ea43 030c 	orr.w	r3, r3, ip
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 802232c:	6882      	ldr	r2, [r0, #8]
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 802232e:	4323      	orrs	r3, r4
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8022330:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8022334:	4333      	orrs	r3, r6
 8022336:	432b      	orrs	r3, r5
 8022338:	430b      	orrs	r3, r1
 802233a:	4313      	orrs	r3, r2
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
                       (((Timing->RowCycleDelay)-1) << 12)       |\
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
                       (((Timing->RPDelay)-1) << 20)             |\
                       (((Timing->RCDDelay)-1) << 24));
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 802233c:	6083      	str	r3, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 802233e:	2000      	movs	r0, #0
 8022340:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8022342:	6887      	ldr	r7, [r0, #8]
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8022344:	4334      	orrs	r4, r6
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8022346:	f427 0770 	bic.w	r7, r7, #15728640	; 0xf00000
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 802234a:	ea44 020c 	orr.w	r2, r4, ip
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 802234e:	f427 4770 	bic.w	r7, r7, #61440	; 0xf000
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8022352:	432a      	orrs	r2, r5
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8022354:	433b      	orrs	r3, r7
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8022356:	68c7      	ldr	r7, [r0, #12]
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8022358:	430a      	orrs	r2, r1
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 802235a:	f007 4770 	and.w	r7, r7, #4026531840	; 0xf0000000
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 802235e:	6083      	str	r3, [r0, #8]
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8022360:	433a      	orrs	r2, r7
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8022362:	60c2      	str	r2, [r0, #12]
 8022364:	e7eb      	b.n	802233e <FMC_SDRAM_Timing_Init+0x5e>

08022366 <FMC_SDRAM_SendCommand>:
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 8022366:	6902      	ldr	r2, [r0, #16]
{ 
 8022368:	b510      	push	{r4, lr}
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 802236a:	e9d1 3400 	ldrd	r3, r4, [r1]
 802236e:	0d92      	lsrs	r2, r2, #22
 8022370:	4323      	orrs	r3, r4
 8022372:	68cc      	ldr	r4, [r1, #12]
 8022374:	0592      	lsls	r2, r2, #22
 8022376:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
 802237a:	4313      	orrs	r3, r2
 802237c:	688a      	ldr	r2, [r1, #8]
 802237e:	3a01      	subs	r2, #1
 8022380:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8022384:	6103      	str	r3, [r0, #16]
             FMC_SDCMR_NRFS | FMC_SDCMR_MRD), ((Command->CommandMode) | 
             (Command->CommandTarget) | (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
             ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  
  return HAL_OK;  
}
 8022386:	2000      	movs	r0, #0
 8022388:	bd10      	pop	{r4, pc}

0802238a <FMC_SDRAM_SetAutoRefreshNumber>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(AutoRefreshNumber));
  
  /* Set the Auto-refresh number in command register */
  Device->SDCMR |= (AutoRefreshNumber << 5); 
 802238a:	6903      	ldr	r3, [r0, #16]
 802238c:	ea43 1141 	orr.w	r1, r3, r1, lsl #5
 8022390:	6101      	str	r1, [r0, #16]

  return HAL_OK;  
}
 8022392:	2000      	movs	r0, #0
 8022394:	4770      	bx	lr

08022396 <_ZdlPv>:
 8022396:	f000 b923 	b.w	80225e0 <free>

0802239a <_Znwj>:
 802239a:	2801      	cmp	r0, #1
 802239c:	bf38      	it	cc
 802239e:	2001      	movcc	r0, #1
 80223a0:	b510      	push	{r4, lr}
 80223a2:	4604      	mov	r4, r0
 80223a4:	4620      	mov	r0, r4
 80223a6:	f000 f913 	bl	80225d0 <malloc>
 80223aa:	b930      	cbnz	r0, 80223ba <_Znwj+0x20>
 80223ac:	f000 f8a6 	bl	80224fc <_ZSt15get_new_handlerv>
 80223b0:	b908      	cbnz	r0, 80223b6 <_Znwj+0x1c>
 80223b2:	f000 f8ab 	bl	802250c <abort>
 80223b6:	4780      	blx	r0
 80223b8:	e7f4      	b.n	80223a4 <_Znwj+0xa>
 80223ba:	bd10      	pop	{r4, pc}

080223bc <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>:
 80223bc:	68c3      	ldr	r3, [r0, #12]
 80223be:	689a      	ldr	r2, [r3, #8]
 80223c0:	60c2      	str	r2, [r0, #12]
 80223c2:	b510      	push	{r4, lr}
 80223c4:	b102      	cbz	r2, 80223c8 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0xc>
 80223c6:	6050      	str	r0, [r2, #4]
 80223c8:	6842      	ldr	r2, [r0, #4]
 80223ca:	605a      	str	r2, [r3, #4]
 80223cc:	680c      	ldr	r4, [r1, #0]
 80223ce:	4284      	cmp	r4, r0
 80223d0:	d103      	bne.n	80223da <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x1e>
 80223d2:	600b      	str	r3, [r1, #0]
 80223d4:	6098      	str	r0, [r3, #8]
 80223d6:	6043      	str	r3, [r0, #4]
 80223d8:	bd10      	pop	{r4, pc}
 80223da:	6891      	ldr	r1, [r2, #8]
 80223dc:	4281      	cmp	r1, r0
 80223de:	bf0c      	ite	eq
 80223e0:	6093      	streq	r3, [r2, #8]
 80223e2:	60d3      	strne	r3, [r2, #12]
 80223e4:	e7f6      	b.n	80223d4 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x18>

080223e6 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>:
 80223e6:	6883      	ldr	r3, [r0, #8]
 80223e8:	68da      	ldr	r2, [r3, #12]
 80223ea:	6082      	str	r2, [r0, #8]
 80223ec:	b510      	push	{r4, lr}
 80223ee:	b102      	cbz	r2, 80223f2 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0xc>
 80223f0:	6050      	str	r0, [r2, #4]
 80223f2:	6842      	ldr	r2, [r0, #4]
 80223f4:	605a      	str	r2, [r3, #4]
 80223f6:	680c      	ldr	r4, [r1, #0]
 80223f8:	4284      	cmp	r4, r0
 80223fa:	d103      	bne.n	8022404 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x1e>
 80223fc:	600b      	str	r3, [r1, #0]
 80223fe:	60d8      	str	r0, [r3, #12]
 8022400:	6043      	str	r3, [r0, #4]
 8022402:	bd10      	pop	{r4, pc}
 8022404:	68d1      	ldr	r1, [r2, #12]
 8022406:	4281      	cmp	r1, r0
 8022408:	bf0c      	ite	eq
 802240a:	60d3      	streq	r3, [r2, #12]
 802240c:	6093      	strne	r3, [r2, #8]
 802240e:	e7f6      	b.n	80223fe <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x18>

08022410 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 8022410:	7803      	ldrb	r3, [r0, #0]
 8022412:	b933      	cbnz	r3, 8022422 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 8022414:	6843      	ldr	r3, [r0, #4]
 8022416:	685b      	ldr	r3, [r3, #4]
 8022418:	4283      	cmp	r3, r0
 802241a:	d102      	bne.n	8022422 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 802241c:	68db      	ldr	r3, [r3, #12]
 802241e:	4618      	mov	r0, r3
 8022420:	4770      	bx	lr
 8022422:	6882      	ldr	r2, [r0, #8]
 8022424:	b122      	cbz	r2, 8022430 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x20>
 8022426:	4613      	mov	r3, r2
 8022428:	68d2      	ldr	r2, [r2, #12]
 802242a:	2a00      	cmp	r2, #0
 802242c:	d1fb      	bne.n	8022426 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x16>
 802242e:	e7f6      	b.n	802241e <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
 8022430:	6843      	ldr	r3, [r0, #4]
 8022432:	689a      	ldr	r2, [r3, #8]
 8022434:	4282      	cmp	r2, r0
 8022436:	d1f2      	bne.n	802241e <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
 8022438:	4618      	mov	r0, r3
 802243a:	685b      	ldr	r3, [r3, #4]
 802243c:	e7f9      	b.n	8022432 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x22>

0802243e <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 802243e:	f7ff bfe7 	b.w	8022410 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

08022442 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>:
 8022442:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022446:	461e      	mov	r6, r3
 8022448:	f103 0804 	add.w	r8, r3, #4
 802244c:	2300      	movs	r3, #0
 802244e:	e9c1 3302 	strd	r3, r3, [r1, #8]
 8022452:	460c      	mov	r4, r1
 8022454:	604a      	str	r2, [r1, #4]
 8022456:	700b      	strb	r3, [r1, #0]
 8022458:	b300      	cbz	r0, 802249c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x5a>
 802245a:	4296      	cmp	r6, r2
 802245c:	6091      	str	r1, [r2, #8]
 802245e:	d118      	bne.n	8022492 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x50>
 8022460:	6071      	str	r1, [r6, #4]
 8022462:	60f4      	str	r4, [r6, #12]
 8022464:	2701      	movs	r7, #1
 8022466:	f04f 0900 	mov.w	r9, #0
 802246a:	6873      	ldr	r3, [r6, #4]
 802246c:	42a3      	cmp	r3, r4
 802246e:	d03f      	beq.n	80224f0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xae>
 8022470:	6860      	ldr	r0, [r4, #4]
 8022472:	7802      	ldrb	r2, [r0, #0]
 8022474:	2a00      	cmp	r2, #0
 8022476:	d13c      	bne.n	80224f2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xb0>
 8022478:	6845      	ldr	r5, [r0, #4]
 802247a:	68ab      	ldr	r3, [r5, #8]
 802247c:	4298      	cmp	r0, r3
 802247e:	d123      	bne.n	80224c8 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x86>
 8022480:	68eb      	ldr	r3, [r5, #12]
 8022482:	b183      	cbz	r3, 80224a6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
 8022484:	781a      	ldrb	r2, [r3, #0]
 8022486:	b972      	cbnz	r2, 80224a6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
 8022488:	7007      	strb	r7, [r0, #0]
 802248a:	701f      	strb	r7, [r3, #0]
 802248c:	702a      	strb	r2, [r5, #0]
 802248e:	462c      	mov	r4, r5
 8022490:	e7eb      	b.n	802246a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x28>
 8022492:	68b3      	ldr	r3, [r6, #8]
 8022494:	4293      	cmp	r3, r2
 8022496:	d1e5      	bne.n	8022464 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 8022498:	60b1      	str	r1, [r6, #8]
 802249a:	e7e3      	b.n	8022464 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 802249c:	60d1      	str	r1, [r2, #12]
 802249e:	68f3      	ldr	r3, [r6, #12]
 80224a0:	4293      	cmp	r3, r2
 80224a2:	d1df      	bne.n	8022464 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 80224a4:	e7dd      	b.n	8022462 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x20>
 80224a6:	68c3      	ldr	r3, [r0, #12]
 80224a8:	42a3      	cmp	r3, r4
 80224aa:	d103      	bne.n	80224b4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x72>
 80224ac:	4641      	mov	r1, r8
 80224ae:	f7ff ff85 	bl	80223bc <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 80224b2:	4604      	mov	r4, r0
 80224b4:	6863      	ldr	r3, [r4, #4]
 80224b6:	4641      	mov	r1, r8
 80224b8:	701f      	strb	r7, [r3, #0]
 80224ba:	4628      	mov	r0, r5
 80224bc:	f885 9000 	strb.w	r9, [r5]
 80224c0:	f7ff ff91 	bl	80223e6 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 80224c4:	4625      	mov	r5, r4
 80224c6:	e7e2      	b.n	802248e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4c>
 80224c8:	b113      	cbz	r3, 80224d0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x8e>
 80224ca:	781a      	ldrb	r2, [r3, #0]
 80224cc:	2a00      	cmp	r2, #0
 80224ce:	d0db      	beq.n	8022488 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x46>
 80224d0:	6883      	ldr	r3, [r0, #8]
 80224d2:	42a3      	cmp	r3, r4
 80224d4:	d103      	bne.n	80224de <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x9c>
 80224d6:	4641      	mov	r1, r8
 80224d8:	f7ff ff85 	bl	80223e6 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 80224dc:	4604      	mov	r4, r0
 80224de:	6863      	ldr	r3, [r4, #4]
 80224e0:	4641      	mov	r1, r8
 80224e2:	701f      	strb	r7, [r3, #0]
 80224e4:	4628      	mov	r0, r5
 80224e6:	f885 9000 	strb.w	r9, [r5]
 80224ea:	f7ff ff67 	bl	80223bc <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 80224ee:	e7e9      	b.n	80224c4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x82>
 80224f0:	4623      	mov	r3, r4
 80224f2:	2201      	movs	r2, #1
 80224f4:	701a      	strb	r2, [r3, #0]
 80224f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

080224fc <_ZSt15get_new_handlerv>:
 80224fc:	4b02      	ldr	r3, [pc, #8]	; (8022508 <_ZSt15get_new_handlerv+0xc>)
 80224fe:	6818      	ldr	r0, [r3, #0]
 8022500:	f3bf 8f5b 	dmb	ish
 8022504:	4770      	bx	lr
 8022506:	bf00      	nop
 8022508:	2000ab90 	.word	0x2000ab90

0802250c <abort>:
 802250c:	b508      	push	{r3, lr}
 802250e:	2006      	movs	r0, #6
 8022510:	f000 ff2a 	bl	8023368 <raise>
 8022514:	2001      	movs	r0, #1
 8022516:	f7df fa91 	bl	8001a3c <_exit>
	...

0802251c <__assert_func>:
 802251c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802251e:	4614      	mov	r4, r2
 8022520:	461a      	mov	r2, r3
 8022522:	4b09      	ldr	r3, [pc, #36]	; (8022548 <__assert_func+0x2c>)
 8022524:	681b      	ldr	r3, [r3, #0]
 8022526:	4605      	mov	r5, r0
 8022528:	68d8      	ldr	r0, [r3, #12]
 802252a:	b14c      	cbz	r4, 8022540 <__assert_func+0x24>
 802252c:	4b07      	ldr	r3, [pc, #28]	; (802254c <__assert_func+0x30>)
 802252e:	9100      	str	r1, [sp, #0]
 8022530:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8022534:	4906      	ldr	r1, [pc, #24]	; (8022550 <__assert_func+0x34>)
 8022536:	462b      	mov	r3, r5
 8022538:	f000 f814 	bl	8022564 <fiprintf>
 802253c:	f7ff ffe6 	bl	802250c <abort>
 8022540:	4b04      	ldr	r3, [pc, #16]	; (8022554 <__assert_func+0x38>)
 8022542:	461c      	mov	r4, r3
 8022544:	e7f3      	b.n	802252e <__assert_func+0x12>
 8022546:	bf00      	nop
 8022548:	20000078 	.word	0x20000078
 802254c:	08029610 	.word	0x08029610
 8022550:	0802961d 	.word	0x0802961d
 8022554:	0802964b 	.word	0x0802964b

08022558 <__errno>:
 8022558:	4b01      	ldr	r3, [pc, #4]	; (8022560 <__errno+0x8>)
 802255a:	6818      	ldr	r0, [r3, #0]
 802255c:	4770      	bx	lr
 802255e:	bf00      	nop
 8022560:	20000078 	.word	0x20000078

08022564 <fiprintf>:
 8022564:	b40e      	push	{r1, r2, r3}
 8022566:	b503      	push	{r0, r1, lr}
 8022568:	4601      	mov	r1, r0
 802256a:	ab03      	add	r3, sp, #12
 802256c:	4805      	ldr	r0, [pc, #20]	; (8022584 <fiprintf+0x20>)
 802256e:	f853 2b04 	ldr.w	r2, [r3], #4
 8022572:	6800      	ldr	r0, [r0, #0]
 8022574:	9301      	str	r3, [sp, #4]
 8022576:	f000 f925 	bl	80227c4 <_vfiprintf_r>
 802257a:	b002      	add	sp, #8
 802257c:	f85d eb04 	ldr.w	lr, [sp], #4
 8022580:	b003      	add	sp, #12
 8022582:	4770      	bx	lr
 8022584:	20000078 	.word	0x20000078

08022588 <__libc_init_array>:
 8022588:	b570      	push	{r4, r5, r6, lr}
 802258a:	4d0d      	ldr	r5, [pc, #52]	; (80225c0 <__libc_init_array+0x38>)
 802258c:	4c0d      	ldr	r4, [pc, #52]	; (80225c4 <__libc_init_array+0x3c>)
 802258e:	1b64      	subs	r4, r4, r5
 8022590:	10a4      	asrs	r4, r4, #2
 8022592:	2600      	movs	r6, #0
 8022594:	42a6      	cmp	r6, r4
 8022596:	d109      	bne.n	80225ac <__libc_init_array+0x24>
 8022598:	4d0b      	ldr	r5, [pc, #44]	; (80225c8 <__libc_init_array+0x40>)
 802259a:	4c0c      	ldr	r4, [pc, #48]	; (80225cc <__libc_init_array+0x44>)
 802259c:	f002 fcc8 	bl	8024f30 <_init>
 80225a0:	1b64      	subs	r4, r4, r5
 80225a2:	10a4      	asrs	r4, r4, #2
 80225a4:	2600      	movs	r6, #0
 80225a6:	42a6      	cmp	r6, r4
 80225a8:	d105      	bne.n	80225b6 <__libc_init_array+0x2e>
 80225aa:	bd70      	pop	{r4, r5, r6, pc}
 80225ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80225b0:	4798      	blx	r3
 80225b2:	3601      	adds	r6, #1
 80225b4:	e7ee      	b.n	8022594 <__libc_init_array+0xc>
 80225b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80225ba:	4798      	blx	r3
 80225bc:	3601      	adds	r6, #1
 80225be:	e7f2      	b.n	80225a6 <__libc_init_array+0x1e>
 80225c0:	080299f4 	.word	0x080299f4
 80225c4:	080299f4 	.word	0x080299f4
 80225c8:	080299f4 	.word	0x080299f4
 80225cc:	08029a04 	.word	0x08029a04

080225d0 <malloc>:
 80225d0:	4b02      	ldr	r3, [pc, #8]	; (80225dc <malloc+0xc>)
 80225d2:	4601      	mov	r1, r0
 80225d4:	6818      	ldr	r0, [r3, #0]
 80225d6:	f000 b871 	b.w	80226bc <_malloc_r>
 80225da:	bf00      	nop
 80225dc:	20000078 	.word	0x20000078

080225e0 <free>:
 80225e0:	4b02      	ldr	r3, [pc, #8]	; (80225ec <free+0xc>)
 80225e2:	4601      	mov	r1, r0
 80225e4:	6818      	ldr	r0, [r3, #0]
 80225e6:	f000 b819 	b.w	802261c <_free_r>
 80225ea:	bf00      	nop
 80225ec:	20000078 	.word	0x20000078

080225f0 <memcpy>:
 80225f0:	440a      	add	r2, r1
 80225f2:	4291      	cmp	r1, r2
 80225f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80225f8:	d100      	bne.n	80225fc <memcpy+0xc>
 80225fa:	4770      	bx	lr
 80225fc:	b510      	push	{r4, lr}
 80225fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8022602:	f803 4f01 	strb.w	r4, [r3, #1]!
 8022606:	4291      	cmp	r1, r2
 8022608:	d1f9      	bne.n	80225fe <memcpy+0xe>
 802260a:	bd10      	pop	{r4, pc}

0802260c <memset>:
 802260c:	4402      	add	r2, r0
 802260e:	4603      	mov	r3, r0
 8022610:	4293      	cmp	r3, r2
 8022612:	d100      	bne.n	8022616 <memset+0xa>
 8022614:	4770      	bx	lr
 8022616:	f803 1b01 	strb.w	r1, [r3], #1
 802261a:	e7f9      	b.n	8022610 <memset+0x4>

0802261c <_free_r>:
 802261c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802261e:	2900      	cmp	r1, #0
 8022620:	d048      	beq.n	80226b4 <_free_r+0x98>
 8022622:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8022626:	9001      	str	r0, [sp, #4]
 8022628:	2b00      	cmp	r3, #0
 802262a:	f1a1 0404 	sub.w	r4, r1, #4
 802262e:	bfb8      	it	lt
 8022630:	18e4      	addlt	r4, r4, r3
 8022632:	f002 f819 	bl	8024668 <__malloc_lock>
 8022636:	4a20      	ldr	r2, [pc, #128]	; (80226b8 <_free_r+0x9c>)
 8022638:	9801      	ldr	r0, [sp, #4]
 802263a:	6813      	ldr	r3, [r2, #0]
 802263c:	4615      	mov	r5, r2
 802263e:	b933      	cbnz	r3, 802264e <_free_r+0x32>
 8022640:	6063      	str	r3, [r4, #4]
 8022642:	6014      	str	r4, [r2, #0]
 8022644:	b003      	add	sp, #12
 8022646:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802264a:	f002 b813 	b.w	8024674 <__malloc_unlock>
 802264e:	42a3      	cmp	r3, r4
 8022650:	d90b      	bls.n	802266a <_free_r+0x4e>
 8022652:	6821      	ldr	r1, [r4, #0]
 8022654:	1862      	adds	r2, r4, r1
 8022656:	4293      	cmp	r3, r2
 8022658:	bf04      	itt	eq
 802265a:	681a      	ldreq	r2, [r3, #0]
 802265c:	685b      	ldreq	r3, [r3, #4]
 802265e:	6063      	str	r3, [r4, #4]
 8022660:	bf04      	itt	eq
 8022662:	1852      	addeq	r2, r2, r1
 8022664:	6022      	streq	r2, [r4, #0]
 8022666:	602c      	str	r4, [r5, #0]
 8022668:	e7ec      	b.n	8022644 <_free_r+0x28>
 802266a:	461a      	mov	r2, r3
 802266c:	685b      	ldr	r3, [r3, #4]
 802266e:	b10b      	cbz	r3, 8022674 <_free_r+0x58>
 8022670:	42a3      	cmp	r3, r4
 8022672:	d9fa      	bls.n	802266a <_free_r+0x4e>
 8022674:	6811      	ldr	r1, [r2, #0]
 8022676:	1855      	adds	r5, r2, r1
 8022678:	42a5      	cmp	r5, r4
 802267a:	d10b      	bne.n	8022694 <_free_r+0x78>
 802267c:	6824      	ldr	r4, [r4, #0]
 802267e:	4421      	add	r1, r4
 8022680:	1854      	adds	r4, r2, r1
 8022682:	42a3      	cmp	r3, r4
 8022684:	6011      	str	r1, [r2, #0]
 8022686:	d1dd      	bne.n	8022644 <_free_r+0x28>
 8022688:	681c      	ldr	r4, [r3, #0]
 802268a:	685b      	ldr	r3, [r3, #4]
 802268c:	6053      	str	r3, [r2, #4]
 802268e:	4421      	add	r1, r4
 8022690:	6011      	str	r1, [r2, #0]
 8022692:	e7d7      	b.n	8022644 <_free_r+0x28>
 8022694:	d902      	bls.n	802269c <_free_r+0x80>
 8022696:	230c      	movs	r3, #12
 8022698:	6003      	str	r3, [r0, #0]
 802269a:	e7d3      	b.n	8022644 <_free_r+0x28>
 802269c:	6825      	ldr	r5, [r4, #0]
 802269e:	1961      	adds	r1, r4, r5
 80226a0:	428b      	cmp	r3, r1
 80226a2:	bf04      	itt	eq
 80226a4:	6819      	ldreq	r1, [r3, #0]
 80226a6:	685b      	ldreq	r3, [r3, #4]
 80226a8:	6063      	str	r3, [r4, #4]
 80226aa:	bf04      	itt	eq
 80226ac:	1949      	addeq	r1, r1, r5
 80226ae:	6021      	streq	r1, [r4, #0]
 80226b0:	6054      	str	r4, [r2, #4]
 80226b2:	e7c7      	b.n	8022644 <_free_r+0x28>
 80226b4:	b003      	add	sp, #12
 80226b6:	bd30      	pop	{r4, r5, pc}
 80226b8:	2000ab94 	.word	0x2000ab94

080226bc <_malloc_r>:
 80226bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80226be:	1ccd      	adds	r5, r1, #3
 80226c0:	f025 0503 	bic.w	r5, r5, #3
 80226c4:	3508      	adds	r5, #8
 80226c6:	2d0c      	cmp	r5, #12
 80226c8:	bf38      	it	cc
 80226ca:	250c      	movcc	r5, #12
 80226cc:	2d00      	cmp	r5, #0
 80226ce:	4606      	mov	r6, r0
 80226d0:	db01      	blt.n	80226d6 <_malloc_r+0x1a>
 80226d2:	42a9      	cmp	r1, r5
 80226d4:	d903      	bls.n	80226de <_malloc_r+0x22>
 80226d6:	230c      	movs	r3, #12
 80226d8:	6033      	str	r3, [r6, #0]
 80226da:	2000      	movs	r0, #0
 80226dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80226de:	f001 ffc3 	bl	8024668 <__malloc_lock>
 80226e2:	4921      	ldr	r1, [pc, #132]	; (8022768 <_malloc_r+0xac>)
 80226e4:	680a      	ldr	r2, [r1, #0]
 80226e6:	4614      	mov	r4, r2
 80226e8:	b99c      	cbnz	r4, 8022712 <_malloc_r+0x56>
 80226ea:	4f20      	ldr	r7, [pc, #128]	; (802276c <_malloc_r+0xb0>)
 80226ec:	683b      	ldr	r3, [r7, #0]
 80226ee:	b923      	cbnz	r3, 80226fa <_malloc_r+0x3e>
 80226f0:	4621      	mov	r1, r4
 80226f2:	4630      	mov	r0, r6
 80226f4:	f000 fe00 	bl	80232f8 <_sbrk_r>
 80226f8:	6038      	str	r0, [r7, #0]
 80226fa:	4629      	mov	r1, r5
 80226fc:	4630      	mov	r0, r6
 80226fe:	f000 fdfb 	bl	80232f8 <_sbrk_r>
 8022702:	1c43      	adds	r3, r0, #1
 8022704:	d123      	bne.n	802274e <_malloc_r+0x92>
 8022706:	230c      	movs	r3, #12
 8022708:	6033      	str	r3, [r6, #0]
 802270a:	4630      	mov	r0, r6
 802270c:	f001 ffb2 	bl	8024674 <__malloc_unlock>
 8022710:	e7e3      	b.n	80226da <_malloc_r+0x1e>
 8022712:	6823      	ldr	r3, [r4, #0]
 8022714:	1b5b      	subs	r3, r3, r5
 8022716:	d417      	bmi.n	8022748 <_malloc_r+0x8c>
 8022718:	2b0b      	cmp	r3, #11
 802271a:	d903      	bls.n	8022724 <_malloc_r+0x68>
 802271c:	6023      	str	r3, [r4, #0]
 802271e:	441c      	add	r4, r3
 8022720:	6025      	str	r5, [r4, #0]
 8022722:	e004      	b.n	802272e <_malloc_r+0x72>
 8022724:	6863      	ldr	r3, [r4, #4]
 8022726:	42a2      	cmp	r2, r4
 8022728:	bf0c      	ite	eq
 802272a:	600b      	streq	r3, [r1, #0]
 802272c:	6053      	strne	r3, [r2, #4]
 802272e:	4630      	mov	r0, r6
 8022730:	f001 ffa0 	bl	8024674 <__malloc_unlock>
 8022734:	f104 000b 	add.w	r0, r4, #11
 8022738:	1d23      	adds	r3, r4, #4
 802273a:	f020 0007 	bic.w	r0, r0, #7
 802273e:	1ac2      	subs	r2, r0, r3
 8022740:	d0cc      	beq.n	80226dc <_malloc_r+0x20>
 8022742:	1a1b      	subs	r3, r3, r0
 8022744:	50a3      	str	r3, [r4, r2]
 8022746:	e7c9      	b.n	80226dc <_malloc_r+0x20>
 8022748:	4622      	mov	r2, r4
 802274a:	6864      	ldr	r4, [r4, #4]
 802274c:	e7cc      	b.n	80226e8 <_malloc_r+0x2c>
 802274e:	1cc4      	adds	r4, r0, #3
 8022750:	f024 0403 	bic.w	r4, r4, #3
 8022754:	42a0      	cmp	r0, r4
 8022756:	d0e3      	beq.n	8022720 <_malloc_r+0x64>
 8022758:	1a21      	subs	r1, r4, r0
 802275a:	4630      	mov	r0, r6
 802275c:	f000 fdcc 	bl	80232f8 <_sbrk_r>
 8022760:	3001      	adds	r0, #1
 8022762:	d1dd      	bne.n	8022720 <_malloc_r+0x64>
 8022764:	e7cf      	b.n	8022706 <_malloc_r+0x4a>
 8022766:	bf00      	nop
 8022768:	2000ab94 	.word	0x2000ab94
 802276c:	2000ab98 	.word	0x2000ab98

08022770 <__sfputc_r>:
 8022770:	6893      	ldr	r3, [r2, #8]
 8022772:	3b01      	subs	r3, #1
 8022774:	2b00      	cmp	r3, #0
 8022776:	b410      	push	{r4}
 8022778:	6093      	str	r3, [r2, #8]
 802277a:	da08      	bge.n	802278e <__sfputc_r+0x1e>
 802277c:	6994      	ldr	r4, [r2, #24]
 802277e:	42a3      	cmp	r3, r4
 8022780:	db01      	blt.n	8022786 <__sfputc_r+0x16>
 8022782:	290a      	cmp	r1, #10
 8022784:	d103      	bne.n	802278e <__sfputc_r+0x1e>
 8022786:	f85d 4b04 	ldr.w	r4, [sp], #4
 802278a:	f000 be11 	b.w	80233b0 <__swbuf_r>
 802278e:	6813      	ldr	r3, [r2, #0]
 8022790:	1c58      	adds	r0, r3, #1
 8022792:	6010      	str	r0, [r2, #0]
 8022794:	7019      	strb	r1, [r3, #0]
 8022796:	4608      	mov	r0, r1
 8022798:	f85d 4b04 	ldr.w	r4, [sp], #4
 802279c:	4770      	bx	lr

0802279e <__sfputs_r>:
 802279e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80227a0:	4606      	mov	r6, r0
 80227a2:	460f      	mov	r7, r1
 80227a4:	4614      	mov	r4, r2
 80227a6:	18d5      	adds	r5, r2, r3
 80227a8:	42ac      	cmp	r4, r5
 80227aa:	d101      	bne.n	80227b0 <__sfputs_r+0x12>
 80227ac:	2000      	movs	r0, #0
 80227ae:	e007      	b.n	80227c0 <__sfputs_r+0x22>
 80227b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80227b4:	463a      	mov	r2, r7
 80227b6:	4630      	mov	r0, r6
 80227b8:	f7ff ffda 	bl	8022770 <__sfputc_r>
 80227bc:	1c43      	adds	r3, r0, #1
 80227be:	d1f3      	bne.n	80227a8 <__sfputs_r+0xa>
 80227c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080227c4 <_vfiprintf_r>:
 80227c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80227c8:	460d      	mov	r5, r1
 80227ca:	b09d      	sub	sp, #116	; 0x74
 80227cc:	4614      	mov	r4, r2
 80227ce:	4698      	mov	r8, r3
 80227d0:	4606      	mov	r6, r0
 80227d2:	b118      	cbz	r0, 80227dc <_vfiprintf_r+0x18>
 80227d4:	6983      	ldr	r3, [r0, #24]
 80227d6:	b90b      	cbnz	r3, 80227dc <_vfiprintf_r+0x18>
 80227d8:	f001 fe3c 	bl	8024454 <__sinit>
 80227dc:	4b89      	ldr	r3, [pc, #548]	; (8022a04 <_vfiprintf_r+0x240>)
 80227de:	429d      	cmp	r5, r3
 80227e0:	d11b      	bne.n	802281a <_vfiprintf_r+0x56>
 80227e2:	6875      	ldr	r5, [r6, #4]
 80227e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80227e6:	07d9      	lsls	r1, r3, #31
 80227e8:	d405      	bmi.n	80227f6 <_vfiprintf_r+0x32>
 80227ea:	89ab      	ldrh	r3, [r5, #12]
 80227ec:	059a      	lsls	r2, r3, #22
 80227ee:	d402      	bmi.n	80227f6 <_vfiprintf_r+0x32>
 80227f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80227f2:	f001 fed2 	bl	802459a <__retarget_lock_acquire_recursive>
 80227f6:	89ab      	ldrh	r3, [r5, #12]
 80227f8:	071b      	lsls	r3, r3, #28
 80227fa:	d501      	bpl.n	8022800 <_vfiprintf_r+0x3c>
 80227fc:	692b      	ldr	r3, [r5, #16]
 80227fe:	b9eb      	cbnz	r3, 802283c <_vfiprintf_r+0x78>
 8022800:	4629      	mov	r1, r5
 8022802:	4630      	mov	r0, r6
 8022804:	f000 fe26 	bl	8023454 <__swsetup_r>
 8022808:	b1c0      	cbz	r0, 802283c <_vfiprintf_r+0x78>
 802280a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802280c:	07dc      	lsls	r4, r3, #31
 802280e:	d50e      	bpl.n	802282e <_vfiprintf_r+0x6a>
 8022810:	f04f 30ff 	mov.w	r0, #4294967295
 8022814:	b01d      	add	sp, #116	; 0x74
 8022816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802281a:	4b7b      	ldr	r3, [pc, #492]	; (8022a08 <_vfiprintf_r+0x244>)
 802281c:	429d      	cmp	r5, r3
 802281e:	d101      	bne.n	8022824 <_vfiprintf_r+0x60>
 8022820:	68b5      	ldr	r5, [r6, #8]
 8022822:	e7df      	b.n	80227e4 <_vfiprintf_r+0x20>
 8022824:	4b79      	ldr	r3, [pc, #484]	; (8022a0c <_vfiprintf_r+0x248>)
 8022826:	429d      	cmp	r5, r3
 8022828:	bf08      	it	eq
 802282a:	68f5      	ldreq	r5, [r6, #12]
 802282c:	e7da      	b.n	80227e4 <_vfiprintf_r+0x20>
 802282e:	89ab      	ldrh	r3, [r5, #12]
 8022830:	0598      	lsls	r0, r3, #22
 8022832:	d4ed      	bmi.n	8022810 <_vfiprintf_r+0x4c>
 8022834:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8022836:	f001 feb1 	bl	802459c <__retarget_lock_release_recursive>
 802283a:	e7e9      	b.n	8022810 <_vfiprintf_r+0x4c>
 802283c:	2300      	movs	r3, #0
 802283e:	9309      	str	r3, [sp, #36]	; 0x24
 8022840:	2320      	movs	r3, #32
 8022842:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8022846:	f8cd 800c 	str.w	r8, [sp, #12]
 802284a:	2330      	movs	r3, #48	; 0x30
 802284c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8022a10 <_vfiprintf_r+0x24c>
 8022850:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8022854:	f04f 0901 	mov.w	r9, #1
 8022858:	4623      	mov	r3, r4
 802285a:	469a      	mov	sl, r3
 802285c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8022860:	b10a      	cbz	r2, 8022866 <_vfiprintf_r+0xa2>
 8022862:	2a25      	cmp	r2, #37	; 0x25
 8022864:	d1f9      	bne.n	802285a <_vfiprintf_r+0x96>
 8022866:	ebba 0b04 	subs.w	fp, sl, r4
 802286a:	d00b      	beq.n	8022884 <_vfiprintf_r+0xc0>
 802286c:	465b      	mov	r3, fp
 802286e:	4622      	mov	r2, r4
 8022870:	4629      	mov	r1, r5
 8022872:	4630      	mov	r0, r6
 8022874:	f7ff ff93 	bl	802279e <__sfputs_r>
 8022878:	3001      	adds	r0, #1
 802287a:	f000 80aa 	beq.w	80229d2 <_vfiprintf_r+0x20e>
 802287e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022880:	445a      	add	r2, fp
 8022882:	9209      	str	r2, [sp, #36]	; 0x24
 8022884:	f89a 3000 	ldrb.w	r3, [sl]
 8022888:	2b00      	cmp	r3, #0
 802288a:	f000 80a2 	beq.w	80229d2 <_vfiprintf_r+0x20e>
 802288e:	2300      	movs	r3, #0
 8022890:	f04f 32ff 	mov.w	r2, #4294967295
 8022894:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8022898:	f10a 0a01 	add.w	sl, sl, #1
 802289c:	9304      	str	r3, [sp, #16]
 802289e:	9307      	str	r3, [sp, #28]
 80228a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80228a4:	931a      	str	r3, [sp, #104]	; 0x68
 80228a6:	4654      	mov	r4, sl
 80228a8:	2205      	movs	r2, #5
 80228aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80228ae:	4858      	ldr	r0, [pc, #352]	; (8022a10 <_vfiprintf_r+0x24c>)
 80228b0:	f7dd fcae 	bl	8000210 <memchr>
 80228b4:	9a04      	ldr	r2, [sp, #16]
 80228b6:	b9d8      	cbnz	r0, 80228f0 <_vfiprintf_r+0x12c>
 80228b8:	06d1      	lsls	r1, r2, #27
 80228ba:	bf44      	itt	mi
 80228bc:	2320      	movmi	r3, #32
 80228be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80228c2:	0713      	lsls	r3, r2, #28
 80228c4:	bf44      	itt	mi
 80228c6:	232b      	movmi	r3, #43	; 0x2b
 80228c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80228cc:	f89a 3000 	ldrb.w	r3, [sl]
 80228d0:	2b2a      	cmp	r3, #42	; 0x2a
 80228d2:	d015      	beq.n	8022900 <_vfiprintf_r+0x13c>
 80228d4:	9a07      	ldr	r2, [sp, #28]
 80228d6:	4654      	mov	r4, sl
 80228d8:	2000      	movs	r0, #0
 80228da:	f04f 0c0a 	mov.w	ip, #10
 80228de:	4621      	mov	r1, r4
 80228e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80228e4:	3b30      	subs	r3, #48	; 0x30
 80228e6:	2b09      	cmp	r3, #9
 80228e8:	d94e      	bls.n	8022988 <_vfiprintf_r+0x1c4>
 80228ea:	b1b0      	cbz	r0, 802291a <_vfiprintf_r+0x156>
 80228ec:	9207      	str	r2, [sp, #28]
 80228ee:	e014      	b.n	802291a <_vfiprintf_r+0x156>
 80228f0:	eba0 0308 	sub.w	r3, r0, r8
 80228f4:	fa09 f303 	lsl.w	r3, r9, r3
 80228f8:	4313      	orrs	r3, r2
 80228fa:	9304      	str	r3, [sp, #16]
 80228fc:	46a2      	mov	sl, r4
 80228fe:	e7d2      	b.n	80228a6 <_vfiprintf_r+0xe2>
 8022900:	9b03      	ldr	r3, [sp, #12]
 8022902:	1d19      	adds	r1, r3, #4
 8022904:	681b      	ldr	r3, [r3, #0]
 8022906:	9103      	str	r1, [sp, #12]
 8022908:	2b00      	cmp	r3, #0
 802290a:	bfbb      	ittet	lt
 802290c:	425b      	neglt	r3, r3
 802290e:	f042 0202 	orrlt.w	r2, r2, #2
 8022912:	9307      	strge	r3, [sp, #28]
 8022914:	9307      	strlt	r3, [sp, #28]
 8022916:	bfb8      	it	lt
 8022918:	9204      	strlt	r2, [sp, #16]
 802291a:	7823      	ldrb	r3, [r4, #0]
 802291c:	2b2e      	cmp	r3, #46	; 0x2e
 802291e:	d10c      	bne.n	802293a <_vfiprintf_r+0x176>
 8022920:	7863      	ldrb	r3, [r4, #1]
 8022922:	2b2a      	cmp	r3, #42	; 0x2a
 8022924:	d135      	bne.n	8022992 <_vfiprintf_r+0x1ce>
 8022926:	9b03      	ldr	r3, [sp, #12]
 8022928:	1d1a      	adds	r2, r3, #4
 802292a:	681b      	ldr	r3, [r3, #0]
 802292c:	9203      	str	r2, [sp, #12]
 802292e:	2b00      	cmp	r3, #0
 8022930:	bfb8      	it	lt
 8022932:	f04f 33ff 	movlt.w	r3, #4294967295
 8022936:	3402      	adds	r4, #2
 8022938:	9305      	str	r3, [sp, #20]
 802293a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8022a20 <_vfiprintf_r+0x25c>
 802293e:	7821      	ldrb	r1, [r4, #0]
 8022940:	2203      	movs	r2, #3
 8022942:	4650      	mov	r0, sl
 8022944:	f7dd fc64 	bl	8000210 <memchr>
 8022948:	b140      	cbz	r0, 802295c <_vfiprintf_r+0x198>
 802294a:	2340      	movs	r3, #64	; 0x40
 802294c:	eba0 000a 	sub.w	r0, r0, sl
 8022950:	fa03 f000 	lsl.w	r0, r3, r0
 8022954:	9b04      	ldr	r3, [sp, #16]
 8022956:	4303      	orrs	r3, r0
 8022958:	3401      	adds	r4, #1
 802295a:	9304      	str	r3, [sp, #16]
 802295c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022960:	482c      	ldr	r0, [pc, #176]	; (8022a14 <_vfiprintf_r+0x250>)
 8022962:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8022966:	2206      	movs	r2, #6
 8022968:	f7dd fc52 	bl	8000210 <memchr>
 802296c:	2800      	cmp	r0, #0
 802296e:	d03f      	beq.n	80229f0 <_vfiprintf_r+0x22c>
 8022970:	4b29      	ldr	r3, [pc, #164]	; (8022a18 <_vfiprintf_r+0x254>)
 8022972:	bb1b      	cbnz	r3, 80229bc <_vfiprintf_r+0x1f8>
 8022974:	9b03      	ldr	r3, [sp, #12]
 8022976:	3307      	adds	r3, #7
 8022978:	f023 0307 	bic.w	r3, r3, #7
 802297c:	3308      	adds	r3, #8
 802297e:	9303      	str	r3, [sp, #12]
 8022980:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022982:	443b      	add	r3, r7
 8022984:	9309      	str	r3, [sp, #36]	; 0x24
 8022986:	e767      	b.n	8022858 <_vfiprintf_r+0x94>
 8022988:	fb0c 3202 	mla	r2, ip, r2, r3
 802298c:	460c      	mov	r4, r1
 802298e:	2001      	movs	r0, #1
 8022990:	e7a5      	b.n	80228de <_vfiprintf_r+0x11a>
 8022992:	2300      	movs	r3, #0
 8022994:	3401      	adds	r4, #1
 8022996:	9305      	str	r3, [sp, #20]
 8022998:	4619      	mov	r1, r3
 802299a:	f04f 0c0a 	mov.w	ip, #10
 802299e:	4620      	mov	r0, r4
 80229a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80229a4:	3a30      	subs	r2, #48	; 0x30
 80229a6:	2a09      	cmp	r2, #9
 80229a8:	d903      	bls.n	80229b2 <_vfiprintf_r+0x1ee>
 80229aa:	2b00      	cmp	r3, #0
 80229ac:	d0c5      	beq.n	802293a <_vfiprintf_r+0x176>
 80229ae:	9105      	str	r1, [sp, #20]
 80229b0:	e7c3      	b.n	802293a <_vfiprintf_r+0x176>
 80229b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80229b6:	4604      	mov	r4, r0
 80229b8:	2301      	movs	r3, #1
 80229ba:	e7f0      	b.n	802299e <_vfiprintf_r+0x1da>
 80229bc:	ab03      	add	r3, sp, #12
 80229be:	9300      	str	r3, [sp, #0]
 80229c0:	462a      	mov	r2, r5
 80229c2:	4b16      	ldr	r3, [pc, #88]	; (8022a1c <_vfiprintf_r+0x258>)
 80229c4:	a904      	add	r1, sp, #16
 80229c6:	4630      	mov	r0, r6
 80229c8:	f000 f8cc 	bl	8022b64 <_printf_float>
 80229cc:	4607      	mov	r7, r0
 80229ce:	1c78      	adds	r0, r7, #1
 80229d0:	d1d6      	bne.n	8022980 <_vfiprintf_r+0x1bc>
 80229d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80229d4:	07d9      	lsls	r1, r3, #31
 80229d6:	d405      	bmi.n	80229e4 <_vfiprintf_r+0x220>
 80229d8:	89ab      	ldrh	r3, [r5, #12]
 80229da:	059a      	lsls	r2, r3, #22
 80229dc:	d402      	bmi.n	80229e4 <_vfiprintf_r+0x220>
 80229de:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80229e0:	f001 fddc 	bl	802459c <__retarget_lock_release_recursive>
 80229e4:	89ab      	ldrh	r3, [r5, #12]
 80229e6:	065b      	lsls	r3, r3, #25
 80229e8:	f53f af12 	bmi.w	8022810 <_vfiprintf_r+0x4c>
 80229ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80229ee:	e711      	b.n	8022814 <_vfiprintf_r+0x50>
 80229f0:	ab03      	add	r3, sp, #12
 80229f2:	9300      	str	r3, [sp, #0]
 80229f4:	462a      	mov	r2, r5
 80229f6:	4b09      	ldr	r3, [pc, #36]	; (8022a1c <_vfiprintf_r+0x258>)
 80229f8:	a904      	add	r1, sp, #16
 80229fa:	4630      	mov	r0, r6
 80229fc:	f000 fb56 	bl	80230ac <_printf_i>
 8022a00:	e7e4      	b.n	80229cc <_vfiprintf_r+0x208>
 8022a02:	bf00      	nop
 8022a04:	08029748 	.word	0x08029748
 8022a08:	08029768 	.word	0x08029768
 8022a0c:	08029728 	.word	0x08029728
 8022a10:	08029650 	.word	0x08029650
 8022a14:	0802965a 	.word	0x0802965a
 8022a18:	08022b65 	.word	0x08022b65
 8022a1c:	0802279f 	.word	0x0802279f
 8022a20:	08029656 	.word	0x08029656

08022a24 <__cvt>:
 8022a24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8022a28:	ec55 4b10 	vmov	r4, r5, d0
 8022a2c:	2d00      	cmp	r5, #0
 8022a2e:	460e      	mov	r6, r1
 8022a30:	4619      	mov	r1, r3
 8022a32:	462b      	mov	r3, r5
 8022a34:	bfbb      	ittet	lt
 8022a36:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8022a3a:	461d      	movlt	r5, r3
 8022a3c:	2300      	movge	r3, #0
 8022a3e:	232d      	movlt	r3, #45	; 0x2d
 8022a40:	700b      	strb	r3, [r1, #0]
 8022a42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022a44:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8022a48:	4691      	mov	r9, r2
 8022a4a:	f023 0820 	bic.w	r8, r3, #32
 8022a4e:	bfbc      	itt	lt
 8022a50:	4622      	movlt	r2, r4
 8022a52:	4614      	movlt	r4, r2
 8022a54:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8022a58:	d005      	beq.n	8022a66 <__cvt+0x42>
 8022a5a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8022a5e:	d100      	bne.n	8022a62 <__cvt+0x3e>
 8022a60:	3601      	adds	r6, #1
 8022a62:	2102      	movs	r1, #2
 8022a64:	e000      	b.n	8022a68 <__cvt+0x44>
 8022a66:	2103      	movs	r1, #3
 8022a68:	ab03      	add	r3, sp, #12
 8022a6a:	9301      	str	r3, [sp, #4]
 8022a6c:	ab02      	add	r3, sp, #8
 8022a6e:	9300      	str	r3, [sp, #0]
 8022a70:	ec45 4b10 	vmov	d0, r4, r5
 8022a74:	4653      	mov	r3, sl
 8022a76:	4632      	mov	r2, r6
 8022a78:	f000 fde6 	bl	8023648 <_dtoa_r>
 8022a7c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8022a80:	4607      	mov	r7, r0
 8022a82:	d102      	bne.n	8022a8a <__cvt+0x66>
 8022a84:	f019 0f01 	tst.w	r9, #1
 8022a88:	d022      	beq.n	8022ad0 <__cvt+0xac>
 8022a8a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8022a8e:	eb07 0906 	add.w	r9, r7, r6
 8022a92:	d110      	bne.n	8022ab6 <__cvt+0x92>
 8022a94:	783b      	ldrb	r3, [r7, #0]
 8022a96:	2b30      	cmp	r3, #48	; 0x30
 8022a98:	d10a      	bne.n	8022ab0 <__cvt+0x8c>
 8022a9a:	2200      	movs	r2, #0
 8022a9c:	2300      	movs	r3, #0
 8022a9e:	4620      	mov	r0, r4
 8022aa0:	4629      	mov	r1, r5
 8022aa2:	f7de f83b 	bl	8000b1c <__aeabi_dcmpeq>
 8022aa6:	b918      	cbnz	r0, 8022ab0 <__cvt+0x8c>
 8022aa8:	f1c6 0601 	rsb	r6, r6, #1
 8022aac:	f8ca 6000 	str.w	r6, [sl]
 8022ab0:	f8da 3000 	ldr.w	r3, [sl]
 8022ab4:	4499      	add	r9, r3
 8022ab6:	2200      	movs	r2, #0
 8022ab8:	2300      	movs	r3, #0
 8022aba:	4620      	mov	r0, r4
 8022abc:	4629      	mov	r1, r5
 8022abe:	f7de f82d 	bl	8000b1c <__aeabi_dcmpeq>
 8022ac2:	b108      	cbz	r0, 8022ac8 <__cvt+0xa4>
 8022ac4:	f8cd 900c 	str.w	r9, [sp, #12]
 8022ac8:	2230      	movs	r2, #48	; 0x30
 8022aca:	9b03      	ldr	r3, [sp, #12]
 8022acc:	454b      	cmp	r3, r9
 8022ace:	d307      	bcc.n	8022ae0 <__cvt+0xbc>
 8022ad0:	9b03      	ldr	r3, [sp, #12]
 8022ad2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022ad4:	1bdb      	subs	r3, r3, r7
 8022ad6:	4638      	mov	r0, r7
 8022ad8:	6013      	str	r3, [r2, #0]
 8022ada:	b004      	add	sp, #16
 8022adc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022ae0:	1c59      	adds	r1, r3, #1
 8022ae2:	9103      	str	r1, [sp, #12]
 8022ae4:	701a      	strb	r2, [r3, #0]
 8022ae6:	e7f0      	b.n	8022aca <__cvt+0xa6>

08022ae8 <__exponent>:
 8022ae8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8022aea:	4603      	mov	r3, r0
 8022aec:	2900      	cmp	r1, #0
 8022aee:	bfb8      	it	lt
 8022af0:	4249      	neglt	r1, r1
 8022af2:	f803 2b02 	strb.w	r2, [r3], #2
 8022af6:	bfb4      	ite	lt
 8022af8:	222d      	movlt	r2, #45	; 0x2d
 8022afa:	222b      	movge	r2, #43	; 0x2b
 8022afc:	2909      	cmp	r1, #9
 8022afe:	7042      	strb	r2, [r0, #1]
 8022b00:	dd2a      	ble.n	8022b58 <__exponent+0x70>
 8022b02:	f10d 0407 	add.w	r4, sp, #7
 8022b06:	46a4      	mov	ip, r4
 8022b08:	270a      	movs	r7, #10
 8022b0a:	46a6      	mov	lr, r4
 8022b0c:	460a      	mov	r2, r1
 8022b0e:	fb91 f6f7 	sdiv	r6, r1, r7
 8022b12:	fb07 1516 	mls	r5, r7, r6, r1
 8022b16:	3530      	adds	r5, #48	; 0x30
 8022b18:	2a63      	cmp	r2, #99	; 0x63
 8022b1a:	f104 34ff 	add.w	r4, r4, #4294967295
 8022b1e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8022b22:	4631      	mov	r1, r6
 8022b24:	dcf1      	bgt.n	8022b0a <__exponent+0x22>
 8022b26:	3130      	adds	r1, #48	; 0x30
 8022b28:	f1ae 0502 	sub.w	r5, lr, #2
 8022b2c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8022b30:	1c44      	adds	r4, r0, #1
 8022b32:	4629      	mov	r1, r5
 8022b34:	4561      	cmp	r1, ip
 8022b36:	d30a      	bcc.n	8022b4e <__exponent+0x66>
 8022b38:	f10d 0209 	add.w	r2, sp, #9
 8022b3c:	eba2 020e 	sub.w	r2, r2, lr
 8022b40:	4565      	cmp	r5, ip
 8022b42:	bf88      	it	hi
 8022b44:	2200      	movhi	r2, #0
 8022b46:	4413      	add	r3, r2
 8022b48:	1a18      	subs	r0, r3, r0
 8022b4a:	b003      	add	sp, #12
 8022b4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022b4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8022b52:	f804 2f01 	strb.w	r2, [r4, #1]!
 8022b56:	e7ed      	b.n	8022b34 <__exponent+0x4c>
 8022b58:	2330      	movs	r3, #48	; 0x30
 8022b5a:	3130      	adds	r1, #48	; 0x30
 8022b5c:	7083      	strb	r3, [r0, #2]
 8022b5e:	70c1      	strb	r1, [r0, #3]
 8022b60:	1d03      	adds	r3, r0, #4
 8022b62:	e7f1      	b.n	8022b48 <__exponent+0x60>

08022b64 <_printf_float>:
 8022b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022b68:	ed2d 8b02 	vpush	{d8}
 8022b6c:	b08d      	sub	sp, #52	; 0x34
 8022b6e:	460c      	mov	r4, r1
 8022b70:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8022b74:	4616      	mov	r6, r2
 8022b76:	461f      	mov	r7, r3
 8022b78:	4605      	mov	r5, r0
 8022b7a:	f001 fd09 	bl	8024590 <_localeconv_r>
 8022b7e:	f8d0 a000 	ldr.w	sl, [r0]
 8022b82:	4650      	mov	r0, sl
 8022b84:	f7dd fb9e 	bl	80002c4 <strlen>
 8022b88:	2300      	movs	r3, #0
 8022b8a:	930a      	str	r3, [sp, #40]	; 0x28
 8022b8c:	6823      	ldr	r3, [r4, #0]
 8022b8e:	9305      	str	r3, [sp, #20]
 8022b90:	f8d8 3000 	ldr.w	r3, [r8]
 8022b94:	f894 b018 	ldrb.w	fp, [r4, #24]
 8022b98:	3307      	adds	r3, #7
 8022b9a:	f023 0307 	bic.w	r3, r3, #7
 8022b9e:	f103 0208 	add.w	r2, r3, #8
 8022ba2:	f8c8 2000 	str.w	r2, [r8]
 8022ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022baa:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8022bae:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8022bb2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8022bb6:	9307      	str	r3, [sp, #28]
 8022bb8:	f8cd 8018 	str.w	r8, [sp, #24]
 8022bbc:	ee08 0a10 	vmov	s16, r0
 8022bc0:	4b9f      	ldr	r3, [pc, #636]	; (8022e40 <_printf_float+0x2dc>)
 8022bc2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8022bc6:	f04f 32ff 	mov.w	r2, #4294967295
 8022bca:	f7dd ffd9 	bl	8000b80 <__aeabi_dcmpun>
 8022bce:	bb88      	cbnz	r0, 8022c34 <_printf_float+0xd0>
 8022bd0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8022bd4:	4b9a      	ldr	r3, [pc, #616]	; (8022e40 <_printf_float+0x2dc>)
 8022bd6:	f04f 32ff 	mov.w	r2, #4294967295
 8022bda:	f7dd ffb3 	bl	8000b44 <__aeabi_dcmple>
 8022bde:	bb48      	cbnz	r0, 8022c34 <_printf_float+0xd0>
 8022be0:	2200      	movs	r2, #0
 8022be2:	2300      	movs	r3, #0
 8022be4:	4640      	mov	r0, r8
 8022be6:	4649      	mov	r1, r9
 8022be8:	f7dd ffa2 	bl	8000b30 <__aeabi_dcmplt>
 8022bec:	b110      	cbz	r0, 8022bf4 <_printf_float+0x90>
 8022bee:	232d      	movs	r3, #45	; 0x2d
 8022bf0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8022bf4:	4b93      	ldr	r3, [pc, #588]	; (8022e44 <_printf_float+0x2e0>)
 8022bf6:	4894      	ldr	r0, [pc, #592]	; (8022e48 <_printf_float+0x2e4>)
 8022bf8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8022bfc:	bf94      	ite	ls
 8022bfe:	4698      	movls	r8, r3
 8022c00:	4680      	movhi	r8, r0
 8022c02:	2303      	movs	r3, #3
 8022c04:	6123      	str	r3, [r4, #16]
 8022c06:	9b05      	ldr	r3, [sp, #20]
 8022c08:	f023 0204 	bic.w	r2, r3, #4
 8022c0c:	6022      	str	r2, [r4, #0]
 8022c0e:	f04f 0900 	mov.w	r9, #0
 8022c12:	9700      	str	r7, [sp, #0]
 8022c14:	4633      	mov	r3, r6
 8022c16:	aa0b      	add	r2, sp, #44	; 0x2c
 8022c18:	4621      	mov	r1, r4
 8022c1a:	4628      	mov	r0, r5
 8022c1c:	f000 f9d8 	bl	8022fd0 <_printf_common>
 8022c20:	3001      	adds	r0, #1
 8022c22:	f040 8090 	bne.w	8022d46 <_printf_float+0x1e2>
 8022c26:	f04f 30ff 	mov.w	r0, #4294967295
 8022c2a:	b00d      	add	sp, #52	; 0x34
 8022c2c:	ecbd 8b02 	vpop	{d8}
 8022c30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022c34:	4642      	mov	r2, r8
 8022c36:	464b      	mov	r3, r9
 8022c38:	4640      	mov	r0, r8
 8022c3a:	4649      	mov	r1, r9
 8022c3c:	f7dd ffa0 	bl	8000b80 <__aeabi_dcmpun>
 8022c40:	b140      	cbz	r0, 8022c54 <_printf_float+0xf0>
 8022c42:	464b      	mov	r3, r9
 8022c44:	2b00      	cmp	r3, #0
 8022c46:	bfbc      	itt	lt
 8022c48:	232d      	movlt	r3, #45	; 0x2d
 8022c4a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8022c4e:	487f      	ldr	r0, [pc, #508]	; (8022e4c <_printf_float+0x2e8>)
 8022c50:	4b7f      	ldr	r3, [pc, #508]	; (8022e50 <_printf_float+0x2ec>)
 8022c52:	e7d1      	b.n	8022bf8 <_printf_float+0x94>
 8022c54:	6863      	ldr	r3, [r4, #4]
 8022c56:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8022c5a:	9206      	str	r2, [sp, #24]
 8022c5c:	1c5a      	adds	r2, r3, #1
 8022c5e:	d13f      	bne.n	8022ce0 <_printf_float+0x17c>
 8022c60:	2306      	movs	r3, #6
 8022c62:	6063      	str	r3, [r4, #4]
 8022c64:	9b05      	ldr	r3, [sp, #20]
 8022c66:	6861      	ldr	r1, [r4, #4]
 8022c68:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8022c6c:	2300      	movs	r3, #0
 8022c6e:	9303      	str	r3, [sp, #12]
 8022c70:	ab0a      	add	r3, sp, #40	; 0x28
 8022c72:	e9cd b301 	strd	fp, r3, [sp, #4]
 8022c76:	ab09      	add	r3, sp, #36	; 0x24
 8022c78:	ec49 8b10 	vmov	d0, r8, r9
 8022c7c:	9300      	str	r3, [sp, #0]
 8022c7e:	6022      	str	r2, [r4, #0]
 8022c80:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8022c84:	4628      	mov	r0, r5
 8022c86:	f7ff fecd 	bl	8022a24 <__cvt>
 8022c8a:	9b06      	ldr	r3, [sp, #24]
 8022c8c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8022c8e:	2b47      	cmp	r3, #71	; 0x47
 8022c90:	4680      	mov	r8, r0
 8022c92:	d108      	bne.n	8022ca6 <_printf_float+0x142>
 8022c94:	1cc8      	adds	r0, r1, #3
 8022c96:	db02      	blt.n	8022c9e <_printf_float+0x13a>
 8022c98:	6863      	ldr	r3, [r4, #4]
 8022c9a:	4299      	cmp	r1, r3
 8022c9c:	dd41      	ble.n	8022d22 <_printf_float+0x1be>
 8022c9e:	f1ab 0b02 	sub.w	fp, fp, #2
 8022ca2:	fa5f fb8b 	uxtb.w	fp, fp
 8022ca6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8022caa:	d820      	bhi.n	8022cee <_printf_float+0x18a>
 8022cac:	3901      	subs	r1, #1
 8022cae:	465a      	mov	r2, fp
 8022cb0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8022cb4:	9109      	str	r1, [sp, #36]	; 0x24
 8022cb6:	f7ff ff17 	bl	8022ae8 <__exponent>
 8022cba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022cbc:	1813      	adds	r3, r2, r0
 8022cbe:	2a01      	cmp	r2, #1
 8022cc0:	4681      	mov	r9, r0
 8022cc2:	6123      	str	r3, [r4, #16]
 8022cc4:	dc02      	bgt.n	8022ccc <_printf_float+0x168>
 8022cc6:	6822      	ldr	r2, [r4, #0]
 8022cc8:	07d2      	lsls	r2, r2, #31
 8022cca:	d501      	bpl.n	8022cd0 <_printf_float+0x16c>
 8022ccc:	3301      	adds	r3, #1
 8022cce:	6123      	str	r3, [r4, #16]
 8022cd0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8022cd4:	2b00      	cmp	r3, #0
 8022cd6:	d09c      	beq.n	8022c12 <_printf_float+0xae>
 8022cd8:	232d      	movs	r3, #45	; 0x2d
 8022cda:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8022cde:	e798      	b.n	8022c12 <_printf_float+0xae>
 8022ce0:	9a06      	ldr	r2, [sp, #24]
 8022ce2:	2a47      	cmp	r2, #71	; 0x47
 8022ce4:	d1be      	bne.n	8022c64 <_printf_float+0x100>
 8022ce6:	2b00      	cmp	r3, #0
 8022ce8:	d1bc      	bne.n	8022c64 <_printf_float+0x100>
 8022cea:	2301      	movs	r3, #1
 8022cec:	e7b9      	b.n	8022c62 <_printf_float+0xfe>
 8022cee:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8022cf2:	d118      	bne.n	8022d26 <_printf_float+0x1c2>
 8022cf4:	2900      	cmp	r1, #0
 8022cf6:	6863      	ldr	r3, [r4, #4]
 8022cf8:	dd0b      	ble.n	8022d12 <_printf_float+0x1ae>
 8022cfa:	6121      	str	r1, [r4, #16]
 8022cfc:	b913      	cbnz	r3, 8022d04 <_printf_float+0x1a0>
 8022cfe:	6822      	ldr	r2, [r4, #0]
 8022d00:	07d0      	lsls	r0, r2, #31
 8022d02:	d502      	bpl.n	8022d0a <_printf_float+0x1a6>
 8022d04:	3301      	adds	r3, #1
 8022d06:	440b      	add	r3, r1
 8022d08:	6123      	str	r3, [r4, #16]
 8022d0a:	65a1      	str	r1, [r4, #88]	; 0x58
 8022d0c:	f04f 0900 	mov.w	r9, #0
 8022d10:	e7de      	b.n	8022cd0 <_printf_float+0x16c>
 8022d12:	b913      	cbnz	r3, 8022d1a <_printf_float+0x1b6>
 8022d14:	6822      	ldr	r2, [r4, #0]
 8022d16:	07d2      	lsls	r2, r2, #31
 8022d18:	d501      	bpl.n	8022d1e <_printf_float+0x1ba>
 8022d1a:	3302      	adds	r3, #2
 8022d1c:	e7f4      	b.n	8022d08 <_printf_float+0x1a4>
 8022d1e:	2301      	movs	r3, #1
 8022d20:	e7f2      	b.n	8022d08 <_printf_float+0x1a4>
 8022d22:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8022d26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022d28:	4299      	cmp	r1, r3
 8022d2a:	db05      	blt.n	8022d38 <_printf_float+0x1d4>
 8022d2c:	6823      	ldr	r3, [r4, #0]
 8022d2e:	6121      	str	r1, [r4, #16]
 8022d30:	07d8      	lsls	r0, r3, #31
 8022d32:	d5ea      	bpl.n	8022d0a <_printf_float+0x1a6>
 8022d34:	1c4b      	adds	r3, r1, #1
 8022d36:	e7e7      	b.n	8022d08 <_printf_float+0x1a4>
 8022d38:	2900      	cmp	r1, #0
 8022d3a:	bfd4      	ite	le
 8022d3c:	f1c1 0202 	rsble	r2, r1, #2
 8022d40:	2201      	movgt	r2, #1
 8022d42:	4413      	add	r3, r2
 8022d44:	e7e0      	b.n	8022d08 <_printf_float+0x1a4>
 8022d46:	6823      	ldr	r3, [r4, #0]
 8022d48:	055a      	lsls	r2, r3, #21
 8022d4a:	d407      	bmi.n	8022d5c <_printf_float+0x1f8>
 8022d4c:	6923      	ldr	r3, [r4, #16]
 8022d4e:	4642      	mov	r2, r8
 8022d50:	4631      	mov	r1, r6
 8022d52:	4628      	mov	r0, r5
 8022d54:	47b8      	blx	r7
 8022d56:	3001      	adds	r0, #1
 8022d58:	d12c      	bne.n	8022db4 <_printf_float+0x250>
 8022d5a:	e764      	b.n	8022c26 <_printf_float+0xc2>
 8022d5c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8022d60:	f240 80e0 	bls.w	8022f24 <_printf_float+0x3c0>
 8022d64:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8022d68:	2200      	movs	r2, #0
 8022d6a:	2300      	movs	r3, #0
 8022d6c:	f7dd fed6 	bl	8000b1c <__aeabi_dcmpeq>
 8022d70:	2800      	cmp	r0, #0
 8022d72:	d034      	beq.n	8022dde <_printf_float+0x27a>
 8022d74:	4a37      	ldr	r2, [pc, #220]	; (8022e54 <_printf_float+0x2f0>)
 8022d76:	2301      	movs	r3, #1
 8022d78:	4631      	mov	r1, r6
 8022d7a:	4628      	mov	r0, r5
 8022d7c:	47b8      	blx	r7
 8022d7e:	3001      	adds	r0, #1
 8022d80:	f43f af51 	beq.w	8022c26 <_printf_float+0xc2>
 8022d84:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8022d88:	429a      	cmp	r2, r3
 8022d8a:	db02      	blt.n	8022d92 <_printf_float+0x22e>
 8022d8c:	6823      	ldr	r3, [r4, #0]
 8022d8e:	07d8      	lsls	r0, r3, #31
 8022d90:	d510      	bpl.n	8022db4 <_printf_float+0x250>
 8022d92:	ee18 3a10 	vmov	r3, s16
 8022d96:	4652      	mov	r2, sl
 8022d98:	4631      	mov	r1, r6
 8022d9a:	4628      	mov	r0, r5
 8022d9c:	47b8      	blx	r7
 8022d9e:	3001      	adds	r0, #1
 8022da0:	f43f af41 	beq.w	8022c26 <_printf_float+0xc2>
 8022da4:	f04f 0800 	mov.w	r8, #0
 8022da8:	f104 091a 	add.w	r9, r4, #26
 8022dac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022dae:	3b01      	subs	r3, #1
 8022db0:	4543      	cmp	r3, r8
 8022db2:	dc09      	bgt.n	8022dc8 <_printf_float+0x264>
 8022db4:	6823      	ldr	r3, [r4, #0]
 8022db6:	079b      	lsls	r3, r3, #30
 8022db8:	f100 8105 	bmi.w	8022fc6 <_printf_float+0x462>
 8022dbc:	68e0      	ldr	r0, [r4, #12]
 8022dbe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022dc0:	4298      	cmp	r0, r3
 8022dc2:	bfb8      	it	lt
 8022dc4:	4618      	movlt	r0, r3
 8022dc6:	e730      	b.n	8022c2a <_printf_float+0xc6>
 8022dc8:	2301      	movs	r3, #1
 8022dca:	464a      	mov	r2, r9
 8022dcc:	4631      	mov	r1, r6
 8022dce:	4628      	mov	r0, r5
 8022dd0:	47b8      	blx	r7
 8022dd2:	3001      	adds	r0, #1
 8022dd4:	f43f af27 	beq.w	8022c26 <_printf_float+0xc2>
 8022dd8:	f108 0801 	add.w	r8, r8, #1
 8022ddc:	e7e6      	b.n	8022dac <_printf_float+0x248>
 8022dde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022de0:	2b00      	cmp	r3, #0
 8022de2:	dc39      	bgt.n	8022e58 <_printf_float+0x2f4>
 8022de4:	4a1b      	ldr	r2, [pc, #108]	; (8022e54 <_printf_float+0x2f0>)
 8022de6:	2301      	movs	r3, #1
 8022de8:	4631      	mov	r1, r6
 8022dea:	4628      	mov	r0, r5
 8022dec:	47b8      	blx	r7
 8022dee:	3001      	adds	r0, #1
 8022df0:	f43f af19 	beq.w	8022c26 <_printf_float+0xc2>
 8022df4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8022df8:	4313      	orrs	r3, r2
 8022dfa:	d102      	bne.n	8022e02 <_printf_float+0x29e>
 8022dfc:	6823      	ldr	r3, [r4, #0]
 8022dfe:	07d9      	lsls	r1, r3, #31
 8022e00:	d5d8      	bpl.n	8022db4 <_printf_float+0x250>
 8022e02:	ee18 3a10 	vmov	r3, s16
 8022e06:	4652      	mov	r2, sl
 8022e08:	4631      	mov	r1, r6
 8022e0a:	4628      	mov	r0, r5
 8022e0c:	47b8      	blx	r7
 8022e0e:	3001      	adds	r0, #1
 8022e10:	f43f af09 	beq.w	8022c26 <_printf_float+0xc2>
 8022e14:	f04f 0900 	mov.w	r9, #0
 8022e18:	f104 0a1a 	add.w	sl, r4, #26
 8022e1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022e1e:	425b      	negs	r3, r3
 8022e20:	454b      	cmp	r3, r9
 8022e22:	dc01      	bgt.n	8022e28 <_printf_float+0x2c4>
 8022e24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022e26:	e792      	b.n	8022d4e <_printf_float+0x1ea>
 8022e28:	2301      	movs	r3, #1
 8022e2a:	4652      	mov	r2, sl
 8022e2c:	4631      	mov	r1, r6
 8022e2e:	4628      	mov	r0, r5
 8022e30:	47b8      	blx	r7
 8022e32:	3001      	adds	r0, #1
 8022e34:	f43f aef7 	beq.w	8022c26 <_printf_float+0xc2>
 8022e38:	f109 0901 	add.w	r9, r9, #1
 8022e3c:	e7ee      	b.n	8022e1c <_printf_float+0x2b8>
 8022e3e:	bf00      	nop
 8022e40:	7fefffff 	.word	0x7fefffff
 8022e44:	08029661 	.word	0x08029661
 8022e48:	08029665 	.word	0x08029665
 8022e4c:	0802966d 	.word	0x0802966d
 8022e50:	08029669 	.word	0x08029669
 8022e54:	080251e5 	.word	0x080251e5
 8022e58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022e5a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8022e5c:	429a      	cmp	r2, r3
 8022e5e:	bfa8      	it	ge
 8022e60:	461a      	movge	r2, r3
 8022e62:	2a00      	cmp	r2, #0
 8022e64:	4691      	mov	r9, r2
 8022e66:	dc37      	bgt.n	8022ed8 <_printf_float+0x374>
 8022e68:	f04f 0b00 	mov.w	fp, #0
 8022e6c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8022e70:	f104 021a 	add.w	r2, r4, #26
 8022e74:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8022e76:	9305      	str	r3, [sp, #20]
 8022e78:	eba3 0309 	sub.w	r3, r3, r9
 8022e7c:	455b      	cmp	r3, fp
 8022e7e:	dc33      	bgt.n	8022ee8 <_printf_float+0x384>
 8022e80:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8022e84:	429a      	cmp	r2, r3
 8022e86:	db3b      	blt.n	8022f00 <_printf_float+0x39c>
 8022e88:	6823      	ldr	r3, [r4, #0]
 8022e8a:	07da      	lsls	r2, r3, #31
 8022e8c:	d438      	bmi.n	8022f00 <_printf_float+0x39c>
 8022e8e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022e90:	9b05      	ldr	r3, [sp, #20]
 8022e92:	9909      	ldr	r1, [sp, #36]	; 0x24
 8022e94:	1ad3      	subs	r3, r2, r3
 8022e96:	eba2 0901 	sub.w	r9, r2, r1
 8022e9a:	4599      	cmp	r9, r3
 8022e9c:	bfa8      	it	ge
 8022e9e:	4699      	movge	r9, r3
 8022ea0:	f1b9 0f00 	cmp.w	r9, #0
 8022ea4:	dc35      	bgt.n	8022f12 <_printf_float+0x3ae>
 8022ea6:	f04f 0800 	mov.w	r8, #0
 8022eaa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8022eae:	f104 0a1a 	add.w	sl, r4, #26
 8022eb2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8022eb6:	1a9b      	subs	r3, r3, r2
 8022eb8:	eba3 0309 	sub.w	r3, r3, r9
 8022ebc:	4543      	cmp	r3, r8
 8022ebe:	f77f af79 	ble.w	8022db4 <_printf_float+0x250>
 8022ec2:	2301      	movs	r3, #1
 8022ec4:	4652      	mov	r2, sl
 8022ec6:	4631      	mov	r1, r6
 8022ec8:	4628      	mov	r0, r5
 8022eca:	47b8      	blx	r7
 8022ecc:	3001      	adds	r0, #1
 8022ece:	f43f aeaa 	beq.w	8022c26 <_printf_float+0xc2>
 8022ed2:	f108 0801 	add.w	r8, r8, #1
 8022ed6:	e7ec      	b.n	8022eb2 <_printf_float+0x34e>
 8022ed8:	4613      	mov	r3, r2
 8022eda:	4631      	mov	r1, r6
 8022edc:	4642      	mov	r2, r8
 8022ede:	4628      	mov	r0, r5
 8022ee0:	47b8      	blx	r7
 8022ee2:	3001      	adds	r0, #1
 8022ee4:	d1c0      	bne.n	8022e68 <_printf_float+0x304>
 8022ee6:	e69e      	b.n	8022c26 <_printf_float+0xc2>
 8022ee8:	2301      	movs	r3, #1
 8022eea:	4631      	mov	r1, r6
 8022eec:	4628      	mov	r0, r5
 8022eee:	9205      	str	r2, [sp, #20]
 8022ef0:	47b8      	blx	r7
 8022ef2:	3001      	adds	r0, #1
 8022ef4:	f43f ae97 	beq.w	8022c26 <_printf_float+0xc2>
 8022ef8:	9a05      	ldr	r2, [sp, #20]
 8022efa:	f10b 0b01 	add.w	fp, fp, #1
 8022efe:	e7b9      	b.n	8022e74 <_printf_float+0x310>
 8022f00:	ee18 3a10 	vmov	r3, s16
 8022f04:	4652      	mov	r2, sl
 8022f06:	4631      	mov	r1, r6
 8022f08:	4628      	mov	r0, r5
 8022f0a:	47b8      	blx	r7
 8022f0c:	3001      	adds	r0, #1
 8022f0e:	d1be      	bne.n	8022e8e <_printf_float+0x32a>
 8022f10:	e689      	b.n	8022c26 <_printf_float+0xc2>
 8022f12:	9a05      	ldr	r2, [sp, #20]
 8022f14:	464b      	mov	r3, r9
 8022f16:	4442      	add	r2, r8
 8022f18:	4631      	mov	r1, r6
 8022f1a:	4628      	mov	r0, r5
 8022f1c:	47b8      	blx	r7
 8022f1e:	3001      	adds	r0, #1
 8022f20:	d1c1      	bne.n	8022ea6 <_printf_float+0x342>
 8022f22:	e680      	b.n	8022c26 <_printf_float+0xc2>
 8022f24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022f26:	2a01      	cmp	r2, #1
 8022f28:	dc01      	bgt.n	8022f2e <_printf_float+0x3ca>
 8022f2a:	07db      	lsls	r3, r3, #31
 8022f2c:	d538      	bpl.n	8022fa0 <_printf_float+0x43c>
 8022f2e:	2301      	movs	r3, #1
 8022f30:	4642      	mov	r2, r8
 8022f32:	4631      	mov	r1, r6
 8022f34:	4628      	mov	r0, r5
 8022f36:	47b8      	blx	r7
 8022f38:	3001      	adds	r0, #1
 8022f3a:	f43f ae74 	beq.w	8022c26 <_printf_float+0xc2>
 8022f3e:	ee18 3a10 	vmov	r3, s16
 8022f42:	4652      	mov	r2, sl
 8022f44:	4631      	mov	r1, r6
 8022f46:	4628      	mov	r0, r5
 8022f48:	47b8      	blx	r7
 8022f4a:	3001      	adds	r0, #1
 8022f4c:	f43f ae6b 	beq.w	8022c26 <_printf_float+0xc2>
 8022f50:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8022f54:	2200      	movs	r2, #0
 8022f56:	2300      	movs	r3, #0
 8022f58:	f7dd fde0 	bl	8000b1c <__aeabi_dcmpeq>
 8022f5c:	b9d8      	cbnz	r0, 8022f96 <_printf_float+0x432>
 8022f5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022f60:	f108 0201 	add.w	r2, r8, #1
 8022f64:	3b01      	subs	r3, #1
 8022f66:	4631      	mov	r1, r6
 8022f68:	4628      	mov	r0, r5
 8022f6a:	47b8      	blx	r7
 8022f6c:	3001      	adds	r0, #1
 8022f6e:	d10e      	bne.n	8022f8e <_printf_float+0x42a>
 8022f70:	e659      	b.n	8022c26 <_printf_float+0xc2>
 8022f72:	2301      	movs	r3, #1
 8022f74:	4652      	mov	r2, sl
 8022f76:	4631      	mov	r1, r6
 8022f78:	4628      	mov	r0, r5
 8022f7a:	47b8      	blx	r7
 8022f7c:	3001      	adds	r0, #1
 8022f7e:	f43f ae52 	beq.w	8022c26 <_printf_float+0xc2>
 8022f82:	f108 0801 	add.w	r8, r8, #1
 8022f86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022f88:	3b01      	subs	r3, #1
 8022f8a:	4543      	cmp	r3, r8
 8022f8c:	dcf1      	bgt.n	8022f72 <_printf_float+0x40e>
 8022f8e:	464b      	mov	r3, r9
 8022f90:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8022f94:	e6dc      	b.n	8022d50 <_printf_float+0x1ec>
 8022f96:	f04f 0800 	mov.w	r8, #0
 8022f9a:	f104 0a1a 	add.w	sl, r4, #26
 8022f9e:	e7f2      	b.n	8022f86 <_printf_float+0x422>
 8022fa0:	2301      	movs	r3, #1
 8022fa2:	4642      	mov	r2, r8
 8022fa4:	e7df      	b.n	8022f66 <_printf_float+0x402>
 8022fa6:	2301      	movs	r3, #1
 8022fa8:	464a      	mov	r2, r9
 8022faa:	4631      	mov	r1, r6
 8022fac:	4628      	mov	r0, r5
 8022fae:	47b8      	blx	r7
 8022fb0:	3001      	adds	r0, #1
 8022fb2:	f43f ae38 	beq.w	8022c26 <_printf_float+0xc2>
 8022fb6:	f108 0801 	add.w	r8, r8, #1
 8022fba:	68e3      	ldr	r3, [r4, #12]
 8022fbc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8022fbe:	1a5b      	subs	r3, r3, r1
 8022fc0:	4543      	cmp	r3, r8
 8022fc2:	dcf0      	bgt.n	8022fa6 <_printf_float+0x442>
 8022fc4:	e6fa      	b.n	8022dbc <_printf_float+0x258>
 8022fc6:	f04f 0800 	mov.w	r8, #0
 8022fca:	f104 0919 	add.w	r9, r4, #25
 8022fce:	e7f4      	b.n	8022fba <_printf_float+0x456>

08022fd0 <_printf_common>:
 8022fd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022fd4:	4616      	mov	r6, r2
 8022fd6:	4699      	mov	r9, r3
 8022fd8:	688a      	ldr	r2, [r1, #8]
 8022fda:	690b      	ldr	r3, [r1, #16]
 8022fdc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8022fe0:	4293      	cmp	r3, r2
 8022fe2:	bfb8      	it	lt
 8022fe4:	4613      	movlt	r3, r2
 8022fe6:	6033      	str	r3, [r6, #0]
 8022fe8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8022fec:	4607      	mov	r7, r0
 8022fee:	460c      	mov	r4, r1
 8022ff0:	b10a      	cbz	r2, 8022ff6 <_printf_common+0x26>
 8022ff2:	3301      	adds	r3, #1
 8022ff4:	6033      	str	r3, [r6, #0]
 8022ff6:	6823      	ldr	r3, [r4, #0]
 8022ff8:	0699      	lsls	r1, r3, #26
 8022ffa:	bf42      	ittt	mi
 8022ffc:	6833      	ldrmi	r3, [r6, #0]
 8022ffe:	3302      	addmi	r3, #2
 8023000:	6033      	strmi	r3, [r6, #0]
 8023002:	6825      	ldr	r5, [r4, #0]
 8023004:	f015 0506 	ands.w	r5, r5, #6
 8023008:	d106      	bne.n	8023018 <_printf_common+0x48>
 802300a:	f104 0a19 	add.w	sl, r4, #25
 802300e:	68e3      	ldr	r3, [r4, #12]
 8023010:	6832      	ldr	r2, [r6, #0]
 8023012:	1a9b      	subs	r3, r3, r2
 8023014:	42ab      	cmp	r3, r5
 8023016:	dc26      	bgt.n	8023066 <_printf_common+0x96>
 8023018:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 802301c:	1e13      	subs	r3, r2, #0
 802301e:	6822      	ldr	r2, [r4, #0]
 8023020:	bf18      	it	ne
 8023022:	2301      	movne	r3, #1
 8023024:	0692      	lsls	r2, r2, #26
 8023026:	d42b      	bmi.n	8023080 <_printf_common+0xb0>
 8023028:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802302c:	4649      	mov	r1, r9
 802302e:	4638      	mov	r0, r7
 8023030:	47c0      	blx	r8
 8023032:	3001      	adds	r0, #1
 8023034:	d01e      	beq.n	8023074 <_printf_common+0xa4>
 8023036:	6823      	ldr	r3, [r4, #0]
 8023038:	68e5      	ldr	r5, [r4, #12]
 802303a:	6832      	ldr	r2, [r6, #0]
 802303c:	f003 0306 	and.w	r3, r3, #6
 8023040:	2b04      	cmp	r3, #4
 8023042:	bf08      	it	eq
 8023044:	1aad      	subeq	r5, r5, r2
 8023046:	68a3      	ldr	r3, [r4, #8]
 8023048:	6922      	ldr	r2, [r4, #16]
 802304a:	bf0c      	ite	eq
 802304c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8023050:	2500      	movne	r5, #0
 8023052:	4293      	cmp	r3, r2
 8023054:	bfc4      	itt	gt
 8023056:	1a9b      	subgt	r3, r3, r2
 8023058:	18ed      	addgt	r5, r5, r3
 802305a:	2600      	movs	r6, #0
 802305c:	341a      	adds	r4, #26
 802305e:	42b5      	cmp	r5, r6
 8023060:	d11a      	bne.n	8023098 <_printf_common+0xc8>
 8023062:	2000      	movs	r0, #0
 8023064:	e008      	b.n	8023078 <_printf_common+0xa8>
 8023066:	2301      	movs	r3, #1
 8023068:	4652      	mov	r2, sl
 802306a:	4649      	mov	r1, r9
 802306c:	4638      	mov	r0, r7
 802306e:	47c0      	blx	r8
 8023070:	3001      	adds	r0, #1
 8023072:	d103      	bne.n	802307c <_printf_common+0xac>
 8023074:	f04f 30ff 	mov.w	r0, #4294967295
 8023078:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802307c:	3501      	adds	r5, #1
 802307e:	e7c6      	b.n	802300e <_printf_common+0x3e>
 8023080:	18e1      	adds	r1, r4, r3
 8023082:	1c5a      	adds	r2, r3, #1
 8023084:	2030      	movs	r0, #48	; 0x30
 8023086:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802308a:	4422      	add	r2, r4
 802308c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8023090:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8023094:	3302      	adds	r3, #2
 8023096:	e7c7      	b.n	8023028 <_printf_common+0x58>
 8023098:	2301      	movs	r3, #1
 802309a:	4622      	mov	r2, r4
 802309c:	4649      	mov	r1, r9
 802309e:	4638      	mov	r0, r7
 80230a0:	47c0      	blx	r8
 80230a2:	3001      	adds	r0, #1
 80230a4:	d0e6      	beq.n	8023074 <_printf_common+0xa4>
 80230a6:	3601      	adds	r6, #1
 80230a8:	e7d9      	b.n	802305e <_printf_common+0x8e>
	...

080230ac <_printf_i>:
 80230ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80230b0:	460c      	mov	r4, r1
 80230b2:	4691      	mov	r9, r2
 80230b4:	7e27      	ldrb	r7, [r4, #24]
 80230b6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80230b8:	2f78      	cmp	r7, #120	; 0x78
 80230ba:	4680      	mov	r8, r0
 80230bc:	469a      	mov	sl, r3
 80230be:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80230c2:	d807      	bhi.n	80230d4 <_printf_i+0x28>
 80230c4:	2f62      	cmp	r7, #98	; 0x62
 80230c6:	d80a      	bhi.n	80230de <_printf_i+0x32>
 80230c8:	2f00      	cmp	r7, #0
 80230ca:	f000 80d8 	beq.w	802327e <_printf_i+0x1d2>
 80230ce:	2f58      	cmp	r7, #88	; 0x58
 80230d0:	f000 80a3 	beq.w	802321a <_printf_i+0x16e>
 80230d4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80230d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80230dc:	e03a      	b.n	8023154 <_printf_i+0xa8>
 80230de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80230e2:	2b15      	cmp	r3, #21
 80230e4:	d8f6      	bhi.n	80230d4 <_printf_i+0x28>
 80230e6:	a001      	add	r0, pc, #4	; (adr r0, 80230ec <_printf_i+0x40>)
 80230e8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80230ec:	08023145 	.word	0x08023145
 80230f0:	08023159 	.word	0x08023159
 80230f4:	080230d5 	.word	0x080230d5
 80230f8:	080230d5 	.word	0x080230d5
 80230fc:	080230d5 	.word	0x080230d5
 8023100:	080230d5 	.word	0x080230d5
 8023104:	08023159 	.word	0x08023159
 8023108:	080230d5 	.word	0x080230d5
 802310c:	080230d5 	.word	0x080230d5
 8023110:	080230d5 	.word	0x080230d5
 8023114:	080230d5 	.word	0x080230d5
 8023118:	08023265 	.word	0x08023265
 802311c:	08023189 	.word	0x08023189
 8023120:	08023247 	.word	0x08023247
 8023124:	080230d5 	.word	0x080230d5
 8023128:	080230d5 	.word	0x080230d5
 802312c:	08023287 	.word	0x08023287
 8023130:	080230d5 	.word	0x080230d5
 8023134:	08023189 	.word	0x08023189
 8023138:	080230d5 	.word	0x080230d5
 802313c:	080230d5 	.word	0x080230d5
 8023140:	0802324f 	.word	0x0802324f
 8023144:	680b      	ldr	r3, [r1, #0]
 8023146:	1d1a      	adds	r2, r3, #4
 8023148:	681b      	ldr	r3, [r3, #0]
 802314a:	600a      	str	r2, [r1, #0]
 802314c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8023150:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8023154:	2301      	movs	r3, #1
 8023156:	e0a3      	b.n	80232a0 <_printf_i+0x1f4>
 8023158:	6825      	ldr	r5, [r4, #0]
 802315a:	6808      	ldr	r0, [r1, #0]
 802315c:	062e      	lsls	r6, r5, #24
 802315e:	f100 0304 	add.w	r3, r0, #4
 8023162:	d50a      	bpl.n	802317a <_printf_i+0xce>
 8023164:	6805      	ldr	r5, [r0, #0]
 8023166:	600b      	str	r3, [r1, #0]
 8023168:	2d00      	cmp	r5, #0
 802316a:	da03      	bge.n	8023174 <_printf_i+0xc8>
 802316c:	232d      	movs	r3, #45	; 0x2d
 802316e:	426d      	negs	r5, r5
 8023170:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8023174:	485e      	ldr	r0, [pc, #376]	; (80232f0 <_printf_i+0x244>)
 8023176:	230a      	movs	r3, #10
 8023178:	e019      	b.n	80231ae <_printf_i+0x102>
 802317a:	f015 0f40 	tst.w	r5, #64	; 0x40
 802317e:	6805      	ldr	r5, [r0, #0]
 8023180:	600b      	str	r3, [r1, #0]
 8023182:	bf18      	it	ne
 8023184:	b22d      	sxthne	r5, r5
 8023186:	e7ef      	b.n	8023168 <_printf_i+0xbc>
 8023188:	680b      	ldr	r3, [r1, #0]
 802318a:	6825      	ldr	r5, [r4, #0]
 802318c:	1d18      	adds	r0, r3, #4
 802318e:	6008      	str	r0, [r1, #0]
 8023190:	0628      	lsls	r0, r5, #24
 8023192:	d501      	bpl.n	8023198 <_printf_i+0xec>
 8023194:	681d      	ldr	r5, [r3, #0]
 8023196:	e002      	b.n	802319e <_printf_i+0xf2>
 8023198:	0669      	lsls	r1, r5, #25
 802319a:	d5fb      	bpl.n	8023194 <_printf_i+0xe8>
 802319c:	881d      	ldrh	r5, [r3, #0]
 802319e:	4854      	ldr	r0, [pc, #336]	; (80232f0 <_printf_i+0x244>)
 80231a0:	2f6f      	cmp	r7, #111	; 0x6f
 80231a2:	bf0c      	ite	eq
 80231a4:	2308      	moveq	r3, #8
 80231a6:	230a      	movne	r3, #10
 80231a8:	2100      	movs	r1, #0
 80231aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80231ae:	6866      	ldr	r6, [r4, #4]
 80231b0:	60a6      	str	r6, [r4, #8]
 80231b2:	2e00      	cmp	r6, #0
 80231b4:	bfa2      	ittt	ge
 80231b6:	6821      	ldrge	r1, [r4, #0]
 80231b8:	f021 0104 	bicge.w	r1, r1, #4
 80231bc:	6021      	strge	r1, [r4, #0]
 80231be:	b90d      	cbnz	r5, 80231c4 <_printf_i+0x118>
 80231c0:	2e00      	cmp	r6, #0
 80231c2:	d04d      	beq.n	8023260 <_printf_i+0x1b4>
 80231c4:	4616      	mov	r6, r2
 80231c6:	fbb5 f1f3 	udiv	r1, r5, r3
 80231ca:	fb03 5711 	mls	r7, r3, r1, r5
 80231ce:	5dc7      	ldrb	r7, [r0, r7]
 80231d0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80231d4:	462f      	mov	r7, r5
 80231d6:	42bb      	cmp	r3, r7
 80231d8:	460d      	mov	r5, r1
 80231da:	d9f4      	bls.n	80231c6 <_printf_i+0x11a>
 80231dc:	2b08      	cmp	r3, #8
 80231de:	d10b      	bne.n	80231f8 <_printf_i+0x14c>
 80231e0:	6823      	ldr	r3, [r4, #0]
 80231e2:	07df      	lsls	r7, r3, #31
 80231e4:	d508      	bpl.n	80231f8 <_printf_i+0x14c>
 80231e6:	6923      	ldr	r3, [r4, #16]
 80231e8:	6861      	ldr	r1, [r4, #4]
 80231ea:	4299      	cmp	r1, r3
 80231ec:	bfde      	ittt	le
 80231ee:	2330      	movle	r3, #48	; 0x30
 80231f0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80231f4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80231f8:	1b92      	subs	r2, r2, r6
 80231fa:	6122      	str	r2, [r4, #16]
 80231fc:	f8cd a000 	str.w	sl, [sp]
 8023200:	464b      	mov	r3, r9
 8023202:	aa03      	add	r2, sp, #12
 8023204:	4621      	mov	r1, r4
 8023206:	4640      	mov	r0, r8
 8023208:	f7ff fee2 	bl	8022fd0 <_printf_common>
 802320c:	3001      	adds	r0, #1
 802320e:	d14c      	bne.n	80232aa <_printf_i+0x1fe>
 8023210:	f04f 30ff 	mov.w	r0, #4294967295
 8023214:	b004      	add	sp, #16
 8023216:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802321a:	4835      	ldr	r0, [pc, #212]	; (80232f0 <_printf_i+0x244>)
 802321c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8023220:	6823      	ldr	r3, [r4, #0]
 8023222:	680e      	ldr	r6, [r1, #0]
 8023224:	061f      	lsls	r7, r3, #24
 8023226:	f856 5b04 	ldr.w	r5, [r6], #4
 802322a:	600e      	str	r6, [r1, #0]
 802322c:	d514      	bpl.n	8023258 <_printf_i+0x1ac>
 802322e:	07d9      	lsls	r1, r3, #31
 8023230:	bf44      	itt	mi
 8023232:	f043 0320 	orrmi.w	r3, r3, #32
 8023236:	6023      	strmi	r3, [r4, #0]
 8023238:	b91d      	cbnz	r5, 8023242 <_printf_i+0x196>
 802323a:	6823      	ldr	r3, [r4, #0]
 802323c:	f023 0320 	bic.w	r3, r3, #32
 8023240:	6023      	str	r3, [r4, #0]
 8023242:	2310      	movs	r3, #16
 8023244:	e7b0      	b.n	80231a8 <_printf_i+0xfc>
 8023246:	6823      	ldr	r3, [r4, #0]
 8023248:	f043 0320 	orr.w	r3, r3, #32
 802324c:	6023      	str	r3, [r4, #0]
 802324e:	2378      	movs	r3, #120	; 0x78
 8023250:	4828      	ldr	r0, [pc, #160]	; (80232f4 <_printf_i+0x248>)
 8023252:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8023256:	e7e3      	b.n	8023220 <_printf_i+0x174>
 8023258:	065e      	lsls	r6, r3, #25
 802325a:	bf48      	it	mi
 802325c:	b2ad      	uxthmi	r5, r5
 802325e:	e7e6      	b.n	802322e <_printf_i+0x182>
 8023260:	4616      	mov	r6, r2
 8023262:	e7bb      	b.n	80231dc <_printf_i+0x130>
 8023264:	680b      	ldr	r3, [r1, #0]
 8023266:	6826      	ldr	r6, [r4, #0]
 8023268:	6960      	ldr	r0, [r4, #20]
 802326a:	1d1d      	adds	r5, r3, #4
 802326c:	600d      	str	r5, [r1, #0]
 802326e:	0635      	lsls	r5, r6, #24
 8023270:	681b      	ldr	r3, [r3, #0]
 8023272:	d501      	bpl.n	8023278 <_printf_i+0x1cc>
 8023274:	6018      	str	r0, [r3, #0]
 8023276:	e002      	b.n	802327e <_printf_i+0x1d2>
 8023278:	0671      	lsls	r1, r6, #25
 802327a:	d5fb      	bpl.n	8023274 <_printf_i+0x1c8>
 802327c:	8018      	strh	r0, [r3, #0]
 802327e:	2300      	movs	r3, #0
 8023280:	6123      	str	r3, [r4, #16]
 8023282:	4616      	mov	r6, r2
 8023284:	e7ba      	b.n	80231fc <_printf_i+0x150>
 8023286:	680b      	ldr	r3, [r1, #0]
 8023288:	1d1a      	adds	r2, r3, #4
 802328a:	600a      	str	r2, [r1, #0]
 802328c:	681e      	ldr	r6, [r3, #0]
 802328e:	6862      	ldr	r2, [r4, #4]
 8023290:	2100      	movs	r1, #0
 8023292:	4630      	mov	r0, r6
 8023294:	f7dc ffbc 	bl	8000210 <memchr>
 8023298:	b108      	cbz	r0, 802329e <_printf_i+0x1f2>
 802329a:	1b80      	subs	r0, r0, r6
 802329c:	6060      	str	r0, [r4, #4]
 802329e:	6863      	ldr	r3, [r4, #4]
 80232a0:	6123      	str	r3, [r4, #16]
 80232a2:	2300      	movs	r3, #0
 80232a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80232a8:	e7a8      	b.n	80231fc <_printf_i+0x150>
 80232aa:	6923      	ldr	r3, [r4, #16]
 80232ac:	4632      	mov	r2, r6
 80232ae:	4649      	mov	r1, r9
 80232b0:	4640      	mov	r0, r8
 80232b2:	47d0      	blx	sl
 80232b4:	3001      	adds	r0, #1
 80232b6:	d0ab      	beq.n	8023210 <_printf_i+0x164>
 80232b8:	6823      	ldr	r3, [r4, #0]
 80232ba:	079b      	lsls	r3, r3, #30
 80232bc:	d413      	bmi.n	80232e6 <_printf_i+0x23a>
 80232be:	68e0      	ldr	r0, [r4, #12]
 80232c0:	9b03      	ldr	r3, [sp, #12]
 80232c2:	4298      	cmp	r0, r3
 80232c4:	bfb8      	it	lt
 80232c6:	4618      	movlt	r0, r3
 80232c8:	e7a4      	b.n	8023214 <_printf_i+0x168>
 80232ca:	2301      	movs	r3, #1
 80232cc:	4632      	mov	r2, r6
 80232ce:	4649      	mov	r1, r9
 80232d0:	4640      	mov	r0, r8
 80232d2:	47d0      	blx	sl
 80232d4:	3001      	adds	r0, #1
 80232d6:	d09b      	beq.n	8023210 <_printf_i+0x164>
 80232d8:	3501      	adds	r5, #1
 80232da:	68e3      	ldr	r3, [r4, #12]
 80232dc:	9903      	ldr	r1, [sp, #12]
 80232de:	1a5b      	subs	r3, r3, r1
 80232e0:	42ab      	cmp	r3, r5
 80232e2:	dcf2      	bgt.n	80232ca <_printf_i+0x21e>
 80232e4:	e7eb      	b.n	80232be <_printf_i+0x212>
 80232e6:	2500      	movs	r5, #0
 80232e8:	f104 0619 	add.w	r6, r4, #25
 80232ec:	e7f5      	b.n	80232da <_printf_i+0x22e>
 80232ee:	bf00      	nop
 80232f0:	08029671 	.word	0x08029671
 80232f4:	08029682 	.word	0x08029682

080232f8 <_sbrk_r>:
 80232f8:	b538      	push	{r3, r4, r5, lr}
 80232fa:	4d06      	ldr	r5, [pc, #24]	; (8023314 <_sbrk_r+0x1c>)
 80232fc:	2300      	movs	r3, #0
 80232fe:	4604      	mov	r4, r0
 8023300:	4608      	mov	r0, r1
 8023302:	602b      	str	r3, [r5, #0]
 8023304:	f7de fbc6 	bl	8001a94 <_sbrk>
 8023308:	1c43      	adds	r3, r0, #1
 802330a:	d102      	bne.n	8023312 <_sbrk_r+0x1a>
 802330c:	682b      	ldr	r3, [r5, #0]
 802330e:	b103      	cbz	r3, 8023312 <_sbrk_r+0x1a>
 8023310:	6023      	str	r3, [r4, #0]
 8023312:	bd38      	pop	{r3, r4, r5, pc}
 8023314:	2000af94 	.word	0x2000af94

08023318 <_raise_r>:
 8023318:	291f      	cmp	r1, #31
 802331a:	b538      	push	{r3, r4, r5, lr}
 802331c:	4604      	mov	r4, r0
 802331e:	460d      	mov	r5, r1
 8023320:	d904      	bls.n	802332c <_raise_r+0x14>
 8023322:	2316      	movs	r3, #22
 8023324:	6003      	str	r3, [r0, #0]
 8023326:	f04f 30ff 	mov.w	r0, #4294967295
 802332a:	bd38      	pop	{r3, r4, r5, pc}
 802332c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 802332e:	b112      	cbz	r2, 8023336 <_raise_r+0x1e>
 8023330:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8023334:	b94b      	cbnz	r3, 802334a <_raise_r+0x32>
 8023336:	4620      	mov	r0, r4
 8023338:	f000 f830 	bl	802339c <_getpid_r>
 802333c:	462a      	mov	r2, r5
 802333e:	4601      	mov	r1, r0
 8023340:	4620      	mov	r0, r4
 8023342:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8023346:	f000 b817 	b.w	8023378 <_kill_r>
 802334a:	2b01      	cmp	r3, #1
 802334c:	d00a      	beq.n	8023364 <_raise_r+0x4c>
 802334e:	1c59      	adds	r1, r3, #1
 8023350:	d103      	bne.n	802335a <_raise_r+0x42>
 8023352:	2316      	movs	r3, #22
 8023354:	6003      	str	r3, [r0, #0]
 8023356:	2001      	movs	r0, #1
 8023358:	e7e7      	b.n	802332a <_raise_r+0x12>
 802335a:	2400      	movs	r4, #0
 802335c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8023360:	4628      	mov	r0, r5
 8023362:	4798      	blx	r3
 8023364:	2000      	movs	r0, #0
 8023366:	e7e0      	b.n	802332a <_raise_r+0x12>

08023368 <raise>:
 8023368:	4b02      	ldr	r3, [pc, #8]	; (8023374 <raise+0xc>)
 802336a:	4601      	mov	r1, r0
 802336c:	6818      	ldr	r0, [r3, #0]
 802336e:	f7ff bfd3 	b.w	8023318 <_raise_r>
 8023372:	bf00      	nop
 8023374:	20000078 	.word	0x20000078

08023378 <_kill_r>:
 8023378:	b538      	push	{r3, r4, r5, lr}
 802337a:	4d07      	ldr	r5, [pc, #28]	; (8023398 <_kill_r+0x20>)
 802337c:	2300      	movs	r3, #0
 802337e:	4604      	mov	r4, r0
 8023380:	4608      	mov	r0, r1
 8023382:	4611      	mov	r1, r2
 8023384:	602b      	str	r3, [r5, #0]
 8023386:	f7de fb51 	bl	8001a2c <_kill>
 802338a:	1c43      	adds	r3, r0, #1
 802338c:	d102      	bne.n	8023394 <_kill_r+0x1c>
 802338e:	682b      	ldr	r3, [r5, #0]
 8023390:	b103      	cbz	r3, 8023394 <_kill_r+0x1c>
 8023392:	6023      	str	r3, [r4, #0]
 8023394:	bd38      	pop	{r3, r4, r5, pc}
 8023396:	bf00      	nop
 8023398:	2000af94 	.word	0x2000af94

0802339c <_getpid_r>:
 802339c:	f7de bb44 	b.w	8001a28 <_getpid>

080233a0 <strcpy>:
 80233a0:	4603      	mov	r3, r0
 80233a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80233a6:	f803 2b01 	strb.w	r2, [r3], #1
 80233aa:	2a00      	cmp	r2, #0
 80233ac:	d1f9      	bne.n	80233a2 <strcpy+0x2>
 80233ae:	4770      	bx	lr

080233b0 <__swbuf_r>:
 80233b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80233b2:	460e      	mov	r6, r1
 80233b4:	4614      	mov	r4, r2
 80233b6:	4605      	mov	r5, r0
 80233b8:	b118      	cbz	r0, 80233c2 <__swbuf_r+0x12>
 80233ba:	6983      	ldr	r3, [r0, #24]
 80233bc:	b90b      	cbnz	r3, 80233c2 <__swbuf_r+0x12>
 80233be:	f001 f849 	bl	8024454 <__sinit>
 80233c2:	4b21      	ldr	r3, [pc, #132]	; (8023448 <__swbuf_r+0x98>)
 80233c4:	429c      	cmp	r4, r3
 80233c6:	d12b      	bne.n	8023420 <__swbuf_r+0x70>
 80233c8:	686c      	ldr	r4, [r5, #4]
 80233ca:	69a3      	ldr	r3, [r4, #24]
 80233cc:	60a3      	str	r3, [r4, #8]
 80233ce:	89a3      	ldrh	r3, [r4, #12]
 80233d0:	071a      	lsls	r2, r3, #28
 80233d2:	d52f      	bpl.n	8023434 <__swbuf_r+0x84>
 80233d4:	6923      	ldr	r3, [r4, #16]
 80233d6:	b36b      	cbz	r3, 8023434 <__swbuf_r+0x84>
 80233d8:	6923      	ldr	r3, [r4, #16]
 80233da:	6820      	ldr	r0, [r4, #0]
 80233dc:	1ac0      	subs	r0, r0, r3
 80233de:	6963      	ldr	r3, [r4, #20]
 80233e0:	b2f6      	uxtb	r6, r6
 80233e2:	4283      	cmp	r3, r0
 80233e4:	4637      	mov	r7, r6
 80233e6:	dc04      	bgt.n	80233f2 <__swbuf_r+0x42>
 80233e8:	4621      	mov	r1, r4
 80233ea:	4628      	mov	r0, r5
 80233ec:	f000 ff9e 	bl	802432c <_fflush_r>
 80233f0:	bb30      	cbnz	r0, 8023440 <__swbuf_r+0x90>
 80233f2:	68a3      	ldr	r3, [r4, #8]
 80233f4:	3b01      	subs	r3, #1
 80233f6:	60a3      	str	r3, [r4, #8]
 80233f8:	6823      	ldr	r3, [r4, #0]
 80233fa:	1c5a      	adds	r2, r3, #1
 80233fc:	6022      	str	r2, [r4, #0]
 80233fe:	701e      	strb	r6, [r3, #0]
 8023400:	6963      	ldr	r3, [r4, #20]
 8023402:	3001      	adds	r0, #1
 8023404:	4283      	cmp	r3, r0
 8023406:	d004      	beq.n	8023412 <__swbuf_r+0x62>
 8023408:	89a3      	ldrh	r3, [r4, #12]
 802340a:	07db      	lsls	r3, r3, #31
 802340c:	d506      	bpl.n	802341c <__swbuf_r+0x6c>
 802340e:	2e0a      	cmp	r6, #10
 8023410:	d104      	bne.n	802341c <__swbuf_r+0x6c>
 8023412:	4621      	mov	r1, r4
 8023414:	4628      	mov	r0, r5
 8023416:	f000 ff89 	bl	802432c <_fflush_r>
 802341a:	b988      	cbnz	r0, 8023440 <__swbuf_r+0x90>
 802341c:	4638      	mov	r0, r7
 802341e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8023420:	4b0a      	ldr	r3, [pc, #40]	; (802344c <__swbuf_r+0x9c>)
 8023422:	429c      	cmp	r4, r3
 8023424:	d101      	bne.n	802342a <__swbuf_r+0x7a>
 8023426:	68ac      	ldr	r4, [r5, #8]
 8023428:	e7cf      	b.n	80233ca <__swbuf_r+0x1a>
 802342a:	4b09      	ldr	r3, [pc, #36]	; (8023450 <__swbuf_r+0xa0>)
 802342c:	429c      	cmp	r4, r3
 802342e:	bf08      	it	eq
 8023430:	68ec      	ldreq	r4, [r5, #12]
 8023432:	e7ca      	b.n	80233ca <__swbuf_r+0x1a>
 8023434:	4621      	mov	r1, r4
 8023436:	4628      	mov	r0, r5
 8023438:	f000 f80c 	bl	8023454 <__swsetup_r>
 802343c:	2800      	cmp	r0, #0
 802343e:	d0cb      	beq.n	80233d8 <__swbuf_r+0x28>
 8023440:	f04f 37ff 	mov.w	r7, #4294967295
 8023444:	e7ea      	b.n	802341c <__swbuf_r+0x6c>
 8023446:	bf00      	nop
 8023448:	08029748 	.word	0x08029748
 802344c:	08029768 	.word	0x08029768
 8023450:	08029728 	.word	0x08029728

08023454 <__swsetup_r>:
 8023454:	4b32      	ldr	r3, [pc, #200]	; (8023520 <__swsetup_r+0xcc>)
 8023456:	b570      	push	{r4, r5, r6, lr}
 8023458:	681d      	ldr	r5, [r3, #0]
 802345a:	4606      	mov	r6, r0
 802345c:	460c      	mov	r4, r1
 802345e:	b125      	cbz	r5, 802346a <__swsetup_r+0x16>
 8023460:	69ab      	ldr	r3, [r5, #24]
 8023462:	b913      	cbnz	r3, 802346a <__swsetup_r+0x16>
 8023464:	4628      	mov	r0, r5
 8023466:	f000 fff5 	bl	8024454 <__sinit>
 802346a:	4b2e      	ldr	r3, [pc, #184]	; (8023524 <__swsetup_r+0xd0>)
 802346c:	429c      	cmp	r4, r3
 802346e:	d10f      	bne.n	8023490 <__swsetup_r+0x3c>
 8023470:	686c      	ldr	r4, [r5, #4]
 8023472:	89a3      	ldrh	r3, [r4, #12]
 8023474:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8023478:	0719      	lsls	r1, r3, #28
 802347a:	d42c      	bmi.n	80234d6 <__swsetup_r+0x82>
 802347c:	06dd      	lsls	r5, r3, #27
 802347e:	d411      	bmi.n	80234a4 <__swsetup_r+0x50>
 8023480:	2309      	movs	r3, #9
 8023482:	6033      	str	r3, [r6, #0]
 8023484:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8023488:	81a3      	strh	r3, [r4, #12]
 802348a:	f04f 30ff 	mov.w	r0, #4294967295
 802348e:	e03e      	b.n	802350e <__swsetup_r+0xba>
 8023490:	4b25      	ldr	r3, [pc, #148]	; (8023528 <__swsetup_r+0xd4>)
 8023492:	429c      	cmp	r4, r3
 8023494:	d101      	bne.n	802349a <__swsetup_r+0x46>
 8023496:	68ac      	ldr	r4, [r5, #8]
 8023498:	e7eb      	b.n	8023472 <__swsetup_r+0x1e>
 802349a:	4b24      	ldr	r3, [pc, #144]	; (802352c <__swsetup_r+0xd8>)
 802349c:	429c      	cmp	r4, r3
 802349e:	bf08      	it	eq
 80234a0:	68ec      	ldreq	r4, [r5, #12]
 80234a2:	e7e6      	b.n	8023472 <__swsetup_r+0x1e>
 80234a4:	0758      	lsls	r0, r3, #29
 80234a6:	d512      	bpl.n	80234ce <__swsetup_r+0x7a>
 80234a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80234aa:	b141      	cbz	r1, 80234be <__swsetup_r+0x6a>
 80234ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80234b0:	4299      	cmp	r1, r3
 80234b2:	d002      	beq.n	80234ba <__swsetup_r+0x66>
 80234b4:	4630      	mov	r0, r6
 80234b6:	f7ff f8b1 	bl	802261c <_free_r>
 80234ba:	2300      	movs	r3, #0
 80234bc:	6363      	str	r3, [r4, #52]	; 0x34
 80234be:	89a3      	ldrh	r3, [r4, #12]
 80234c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80234c4:	81a3      	strh	r3, [r4, #12]
 80234c6:	2300      	movs	r3, #0
 80234c8:	6063      	str	r3, [r4, #4]
 80234ca:	6923      	ldr	r3, [r4, #16]
 80234cc:	6023      	str	r3, [r4, #0]
 80234ce:	89a3      	ldrh	r3, [r4, #12]
 80234d0:	f043 0308 	orr.w	r3, r3, #8
 80234d4:	81a3      	strh	r3, [r4, #12]
 80234d6:	6923      	ldr	r3, [r4, #16]
 80234d8:	b94b      	cbnz	r3, 80234ee <__swsetup_r+0x9a>
 80234da:	89a3      	ldrh	r3, [r4, #12]
 80234dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80234e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80234e4:	d003      	beq.n	80234ee <__swsetup_r+0x9a>
 80234e6:	4621      	mov	r1, r4
 80234e8:	4630      	mov	r0, r6
 80234ea:	f001 f87d 	bl	80245e8 <__smakebuf_r>
 80234ee:	89a0      	ldrh	r0, [r4, #12]
 80234f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80234f4:	f010 0301 	ands.w	r3, r0, #1
 80234f8:	d00a      	beq.n	8023510 <__swsetup_r+0xbc>
 80234fa:	2300      	movs	r3, #0
 80234fc:	60a3      	str	r3, [r4, #8]
 80234fe:	6963      	ldr	r3, [r4, #20]
 8023500:	425b      	negs	r3, r3
 8023502:	61a3      	str	r3, [r4, #24]
 8023504:	6923      	ldr	r3, [r4, #16]
 8023506:	b943      	cbnz	r3, 802351a <__swsetup_r+0xc6>
 8023508:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 802350c:	d1ba      	bne.n	8023484 <__swsetup_r+0x30>
 802350e:	bd70      	pop	{r4, r5, r6, pc}
 8023510:	0781      	lsls	r1, r0, #30
 8023512:	bf58      	it	pl
 8023514:	6963      	ldrpl	r3, [r4, #20]
 8023516:	60a3      	str	r3, [r4, #8]
 8023518:	e7f4      	b.n	8023504 <__swsetup_r+0xb0>
 802351a:	2000      	movs	r0, #0
 802351c:	e7f7      	b.n	802350e <__swsetup_r+0xba>
 802351e:	bf00      	nop
 8023520:	20000078 	.word	0x20000078
 8023524:	08029748 	.word	0x08029748
 8023528:	08029768 	.word	0x08029768
 802352c:	08029728 	.word	0x08029728

08023530 <quorem>:
 8023530:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023534:	6903      	ldr	r3, [r0, #16]
 8023536:	690c      	ldr	r4, [r1, #16]
 8023538:	42a3      	cmp	r3, r4
 802353a:	4607      	mov	r7, r0
 802353c:	f2c0 8081 	blt.w	8023642 <quorem+0x112>
 8023540:	3c01      	subs	r4, #1
 8023542:	f101 0814 	add.w	r8, r1, #20
 8023546:	f100 0514 	add.w	r5, r0, #20
 802354a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 802354e:	9301      	str	r3, [sp, #4]
 8023550:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8023554:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8023558:	3301      	adds	r3, #1
 802355a:	429a      	cmp	r2, r3
 802355c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8023560:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8023564:	fbb2 f6f3 	udiv	r6, r2, r3
 8023568:	d331      	bcc.n	80235ce <quorem+0x9e>
 802356a:	f04f 0e00 	mov.w	lr, #0
 802356e:	4640      	mov	r0, r8
 8023570:	46ac      	mov	ip, r5
 8023572:	46f2      	mov	sl, lr
 8023574:	f850 2b04 	ldr.w	r2, [r0], #4
 8023578:	b293      	uxth	r3, r2
 802357a:	fb06 e303 	mla	r3, r6, r3, lr
 802357e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8023582:	b29b      	uxth	r3, r3
 8023584:	ebaa 0303 	sub.w	r3, sl, r3
 8023588:	0c12      	lsrs	r2, r2, #16
 802358a:	f8dc a000 	ldr.w	sl, [ip]
 802358e:	fb06 e202 	mla	r2, r6, r2, lr
 8023592:	fa13 f38a 	uxtah	r3, r3, sl
 8023596:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 802359a:	fa1f fa82 	uxth.w	sl, r2
 802359e:	f8dc 2000 	ldr.w	r2, [ip]
 80235a2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80235a6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80235aa:	b29b      	uxth	r3, r3
 80235ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80235b0:	4581      	cmp	r9, r0
 80235b2:	f84c 3b04 	str.w	r3, [ip], #4
 80235b6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80235ba:	d2db      	bcs.n	8023574 <quorem+0x44>
 80235bc:	f855 300b 	ldr.w	r3, [r5, fp]
 80235c0:	b92b      	cbnz	r3, 80235ce <quorem+0x9e>
 80235c2:	9b01      	ldr	r3, [sp, #4]
 80235c4:	3b04      	subs	r3, #4
 80235c6:	429d      	cmp	r5, r3
 80235c8:	461a      	mov	r2, r3
 80235ca:	d32e      	bcc.n	802362a <quorem+0xfa>
 80235cc:	613c      	str	r4, [r7, #16]
 80235ce:	4638      	mov	r0, r7
 80235d0:	f001 fad4 	bl	8024b7c <__mcmp>
 80235d4:	2800      	cmp	r0, #0
 80235d6:	db24      	blt.n	8023622 <quorem+0xf2>
 80235d8:	3601      	adds	r6, #1
 80235da:	4628      	mov	r0, r5
 80235dc:	f04f 0c00 	mov.w	ip, #0
 80235e0:	f858 2b04 	ldr.w	r2, [r8], #4
 80235e4:	f8d0 e000 	ldr.w	lr, [r0]
 80235e8:	b293      	uxth	r3, r2
 80235ea:	ebac 0303 	sub.w	r3, ip, r3
 80235ee:	0c12      	lsrs	r2, r2, #16
 80235f0:	fa13 f38e 	uxtah	r3, r3, lr
 80235f4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80235f8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80235fc:	b29b      	uxth	r3, r3
 80235fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8023602:	45c1      	cmp	r9, r8
 8023604:	f840 3b04 	str.w	r3, [r0], #4
 8023608:	ea4f 4c22 	mov.w	ip, r2, asr #16
 802360c:	d2e8      	bcs.n	80235e0 <quorem+0xb0>
 802360e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8023612:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8023616:	b922      	cbnz	r2, 8023622 <quorem+0xf2>
 8023618:	3b04      	subs	r3, #4
 802361a:	429d      	cmp	r5, r3
 802361c:	461a      	mov	r2, r3
 802361e:	d30a      	bcc.n	8023636 <quorem+0x106>
 8023620:	613c      	str	r4, [r7, #16]
 8023622:	4630      	mov	r0, r6
 8023624:	b003      	add	sp, #12
 8023626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802362a:	6812      	ldr	r2, [r2, #0]
 802362c:	3b04      	subs	r3, #4
 802362e:	2a00      	cmp	r2, #0
 8023630:	d1cc      	bne.n	80235cc <quorem+0x9c>
 8023632:	3c01      	subs	r4, #1
 8023634:	e7c7      	b.n	80235c6 <quorem+0x96>
 8023636:	6812      	ldr	r2, [r2, #0]
 8023638:	3b04      	subs	r3, #4
 802363a:	2a00      	cmp	r2, #0
 802363c:	d1f0      	bne.n	8023620 <quorem+0xf0>
 802363e:	3c01      	subs	r4, #1
 8023640:	e7eb      	b.n	802361a <quorem+0xea>
 8023642:	2000      	movs	r0, #0
 8023644:	e7ee      	b.n	8023624 <quorem+0xf4>
	...

08023648 <_dtoa_r>:
 8023648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802364c:	ed2d 8b02 	vpush	{d8}
 8023650:	ec57 6b10 	vmov	r6, r7, d0
 8023654:	b095      	sub	sp, #84	; 0x54
 8023656:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8023658:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 802365c:	9105      	str	r1, [sp, #20]
 802365e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8023662:	4604      	mov	r4, r0
 8023664:	9209      	str	r2, [sp, #36]	; 0x24
 8023666:	930f      	str	r3, [sp, #60]	; 0x3c
 8023668:	b975      	cbnz	r5, 8023688 <_dtoa_r+0x40>
 802366a:	2010      	movs	r0, #16
 802366c:	f7fe ffb0 	bl	80225d0 <malloc>
 8023670:	4602      	mov	r2, r0
 8023672:	6260      	str	r0, [r4, #36]	; 0x24
 8023674:	b920      	cbnz	r0, 8023680 <_dtoa_r+0x38>
 8023676:	4bb2      	ldr	r3, [pc, #712]	; (8023940 <_dtoa_r+0x2f8>)
 8023678:	21ea      	movs	r1, #234	; 0xea
 802367a:	48b2      	ldr	r0, [pc, #712]	; (8023944 <_dtoa_r+0x2fc>)
 802367c:	f7fe ff4e 	bl	802251c <__assert_func>
 8023680:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8023684:	6005      	str	r5, [r0, #0]
 8023686:	60c5      	str	r5, [r0, #12]
 8023688:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802368a:	6819      	ldr	r1, [r3, #0]
 802368c:	b151      	cbz	r1, 80236a4 <_dtoa_r+0x5c>
 802368e:	685a      	ldr	r2, [r3, #4]
 8023690:	604a      	str	r2, [r1, #4]
 8023692:	2301      	movs	r3, #1
 8023694:	4093      	lsls	r3, r2
 8023696:	608b      	str	r3, [r1, #8]
 8023698:	4620      	mov	r0, r4
 802369a:	f001 f831 	bl	8024700 <_Bfree>
 802369e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80236a0:	2200      	movs	r2, #0
 80236a2:	601a      	str	r2, [r3, #0]
 80236a4:	1e3b      	subs	r3, r7, #0
 80236a6:	bfb9      	ittee	lt
 80236a8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80236ac:	9303      	strlt	r3, [sp, #12]
 80236ae:	2300      	movge	r3, #0
 80236b0:	f8c8 3000 	strge.w	r3, [r8]
 80236b4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80236b8:	4ba3      	ldr	r3, [pc, #652]	; (8023948 <_dtoa_r+0x300>)
 80236ba:	bfbc      	itt	lt
 80236bc:	2201      	movlt	r2, #1
 80236be:	f8c8 2000 	strlt.w	r2, [r8]
 80236c2:	ea33 0309 	bics.w	r3, r3, r9
 80236c6:	d11b      	bne.n	8023700 <_dtoa_r+0xb8>
 80236c8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80236ca:	f242 730f 	movw	r3, #9999	; 0x270f
 80236ce:	6013      	str	r3, [r2, #0]
 80236d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80236d4:	4333      	orrs	r3, r6
 80236d6:	f000 857a 	beq.w	80241ce <_dtoa_r+0xb86>
 80236da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80236dc:	b963      	cbnz	r3, 80236f8 <_dtoa_r+0xb0>
 80236de:	4b9b      	ldr	r3, [pc, #620]	; (802394c <_dtoa_r+0x304>)
 80236e0:	e024      	b.n	802372c <_dtoa_r+0xe4>
 80236e2:	4b9b      	ldr	r3, [pc, #620]	; (8023950 <_dtoa_r+0x308>)
 80236e4:	9300      	str	r3, [sp, #0]
 80236e6:	3308      	adds	r3, #8
 80236e8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80236ea:	6013      	str	r3, [r2, #0]
 80236ec:	9800      	ldr	r0, [sp, #0]
 80236ee:	b015      	add	sp, #84	; 0x54
 80236f0:	ecbd 8b02 	vpop	{d8}
 80236f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80236f8:	4b94      	ldr	r3, [pc, #592]	; (802394c <_dtoa_r+0x304>)
 80236fa:	9300      	str	r3, [sp, #0]
 80236fc:	3303      	adds	r3, #3
 80236fe:	e7f3      	b.n	80236e8 <_dtoa_r+0xa0>
 8023700:	ed9d 7b02 	vldr	d7, [sp, #8]
 8023704:	2200      	movs	r2, #0
 8023706:	ec51 0b17 	vmov	r0, r1, d7
 802370a:	2300      	movs	r3, #0
 802370c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8023710:	f7dd fa04 	bl	8000b1c <__aeabi_dcmpeq>
 8023714:	4680      	mov	r8, r0
 8023716:	b158      	cbz	r0, 8023730 <_dtoa_r+0xe8>
 8023718:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802371a:	2301      	movs	r3, #1
 802371c:	6013      	str	r3, [r2, #0]
 802371e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8023720:	2b00      	cmp	r3, #0
 8023722:	f000 8551 	beq.w	80241c8 <_dtoa_r+0xb80>
 8023726:	488b      	ldr	r0, [pc, #556]	; (8023954 <_dtoa_r+0x30c>)
 8023728:	6018      	str	r0, [r3, #0]
 802372a:	1e43      	subs	r3, r0, #1
 802372c:	9300      	str	r3, [sp, #0]
 802372e:	e7dd      	b.n	80236ec <_dtoa_r+0xa4>
 8023730:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8023734:	aa12      	add	r2, sp, #72	; 0x48
 8023736:	a913      	add	r1, sp, #76	; 0x4c
 8023738:	4620      	mov	r0, r4
 802373a:	f001 fac3 	bl	8024cc4 <__d2b>
 802373e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8023742:	4683      	mov	fp, r0
 8023744:	2d00      	cmp	r5, #0
 8023746:	d07c      	beq.n	8023842 <_dtoa_r+0x1fa>
 8023748:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802374a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 802374e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8023752:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8023756:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 802375a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 802375e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8023762:	4b7d      	ldr	r3, [pc, #500]	; (8023958 <_dtoa_r+0x310>)
 8023764:	2200      	movs	r2, #0
 8023766:	4630      	mov	r0, r6
 8023768:	4639      	mov	r1, r7
 802376a:	f7dc fdb7 	bl	80002dc <__aeabi_dsub>
 802376e:	a36e      	add	r3, pc, #440	; (adr r3, 8023928 <_dtoa_r+0x2e0>)
 8023770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023774:	f7dc ff6a 	bl	800064c <__aeabi_dmul>
 8023778:	a36d      	add	r3, pc, #436	; (adr r3, 8023930 <_dtoa_r+0x2e8>)
 802377a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802377e:	f7dc fdaf 	bl	80002e0 <__adddf3>
 8023782:	4606      	mov	r6, r0
 8023784:	4628      	mov	r0, r5
 8023786:	460f      	mov	r7, r1
 8023788:	f7dc fef6 	bl	8000578 <__aeabi_i2d>
 802378c:	a36a      	add	r3, pc, #424	; (adr r3, 8023938 <_dtoa_r+0x2f0>)
 802378e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023792:	f7dc ff5b 	bl	800064c <__aeabi_dmul>
 8023796:	4602      	mov	r2, r0
 8023798:	460b      	mov	r3, r1
 802379a:	4630      	mov	r0, r6
 802379c:	4639      	mov	r1, r7
 802379e:	f7dc fd9f 	bl	80002e0 <__adddf3>
 80237a2:	4606      	mov	r6, r0
 80237a4:	460f      	mov	r7, r1
 80237a6:	f7dd fa01 	bl	8000bac <__aeabi_d2iz>
 80237aa:	2200      	movs	r2, #0
 80237ac:	4682      	mov	sl, r0
 80237ae:	2300      	movs	r3, #0
 80237b0:	4630      	mov	r0, r6
 80237b2:	4639      	mov	r1, r7
 80237b4:	f7dd f9bc 	bl	8000b30 <__aeabi_dcmplt>
 80237b8:	b148      	cbz	r0, 80237ce <_dtoa_r+0x186>
 80237ba:	4650      	mov	r0, sl
 80237bc:	f7dc fedc 	bl	8000578 <__aeabi_i2d>
 80237c0:	4632      	mov	r2, r6
 80237c2:	463b      	mov	r3, r7
 80237c4:	f7dd f9aa 	bl	8000b1c <__aeabi_dcmpeq>
 80237c8:	b908      	cbnz	r0, 80237ce <_dtoa_r+0x186>
 80237ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 80237ce:	f1ba 0f16 	cmp.w	sl, #22
 80237d2:	d854      	bhi.n	802387e <_dtoa_r+0x236>
 80237d4:	4b61      	ldr	r3, [pc, #388]	; (802395c <_dtoa_r+0x314>)
 80237d6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80237da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80237de:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80237e2:	f7dd f9a5 	bl	8000b30 <__aeabi_dcmplt>
 80237e6:	2800      	cmp	r0, #0
 80237e8:	d04b      	beq.n	8023882 <_dtoa_r+0x23a>
 80237ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 80237ee:	2300      	movs	r3, #0
 80237f0:	930e      	str	r3, [sp, #56]	; 0x38
 80237f2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80237f4:	1b5d      	subs	r5, r3, r5
 80237f6:	1e6b      	subs	r3, r5, #1
 80237f8:	9304      	str	r3, [sp, #16]
 80237fa:	bf43      	ittte	mi
 80237fc:	2300      	movmi	r3, #0
 80237fe:	f1c5 0801 	rsbmi	r8, r5, #1
 8023802:	9304      	strmi	r3, [sp, #16]
 8023804:	f04f 0800 	movpl.w	r8, #0
 8023808:	f1ba 0f00 	cmp.w	sl, #0
 802380c:	db3b      	blt.n	8023886 <_dtoa_r+0x23e>
 802380e:	9b04      	ldr	r3, [sp, #16]
 8023810:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8023814:	4453      	add	r3, sl
 8023816:	9304      	str	r3, [sp, #16]
 8023818:	2300      	movs	r3, #0
 802381a:	9306      	str	r3, [sp, #24]
 802381c:	9b05      	ldr	r3, [sp, #20]
 802381e:	2b09      	cmp	r3, #9
 8023820:	d869      	bhi.n	80238f6 <_dtoa_r+0x2ae>
 8023822:	2b05      	cmp	r3, #5
 8023824:	bfc4      	itt	gt
 8023826:	3b04      	subgt	r3, #4
 8023828:	9305      	strgt	r3, [sp, #20]
 802382a:	9b05      	ldr	r3, [sp, #20]
 802382c:	f1a3 0302 	sub.w	r3, r3, #2
 8023830:	bfcc      	ite	gt
 8023832:	2500      	movgt	r5, #0
 8023834:	2501      	movle	r5, #1
 8023836:	2b03      	cmp	r3, #3
 8023838:	d869      	bhi.n	802390e <_dtoa_r+0x2c6>
 802383a:	e8df f003 	tbb	[pc, r3]
 802383e:	4e2c      	.short	0x4e2c
 8023840:	5a4c      	.short	0x5a4c
 8023842:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8023846:	441d      	add	r5, r3
 8023848:	f205 4332 	addw	r3, r5, #1074	; 0x432
 802384c:	2b20      	cmp	r3, #32
 802384e:	bfc1      	itttt	gt
 8023850:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8023854:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8023858:	fa09 f303 	lslgt.w	r3, r9, r3
 802385c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8023860:	bfda      	itte	le
 8023862:	f1c3 0320 	rsble	r3, r3, #32
 8023866:	fa06 f003 	lslle.w	r0, r6, r3
 802386a:	4318      	orrgt	r0, r3
 802386c:	f7dc fe74 	bl	8000558 <__aeabi_ui2d>
 8023870:	2301      	movs	r3, #1
 8023872:	4606      	mov	r6, r0
 8023874:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8023878:	3d01      	subs	r5, #1
 802387a:	9310      	str	r3, [sp, #64]	; 0x40
 802387c:	e771      	b.n	8023762 <_dtoa_r+0x11a>
 802387e:	2301      	movs	r3, #1
 8023880:	e7b6      	b.n	80237f0 <_dtoa_r+0x1a8>
 8023882:	900e      	str	r0, [sp, #56]	; 0x38
 8023884:	e7b5      	b.n	80237f2 <_dtoa_r+0x1aa>
 8023886:	f1ca 0300 	rsb	r3, sl, #0
 802388a:	9306      	str	r3, [sp, #24]
 802388c:	2300      	movs	r3, #0
 802388e:	eba8 080a 	sub.w	r8, r8, sl
 8023892:	930d      	str	r3, [sp, #52]	; 0x34
 8023894:	e7c2      	b.n	802381c <_dtoa_r+0x1d4>
 8023896:	2300      	movs	r3, #0
 8023898:	9308      	str	r3, [sp, #32]
 802389a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802389c:	2b00      	cmp	r3, #0
 802389e:	dc39      	bgt.n	8023914 <_dtoa_r+0x2cc>
 80238a0:	f04f 0901 	mov.w	r9, #1
 80238a4:	f8cd 9004 	str.w	r9, [sp, #4]
 80238a8:	464b      	mov	r3, r9
 80238aa:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80238ae:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80238b0:	2200      	movs	r2, #0
 80238b2:	6042      	str	r2, [r0, #4]
 80238b4:	2204      	movs	r2, #4
 80238b6:	f102 0614 	add.w	r6, r2, #20
 80238ba:	429e      	cmp	r6, r3
 80238bc:	6841      	ldr	r1, [r0, #4]
 80238be:	d92f      	bls.n	8023920 <_dtoa_r+0x2d8>
 80238c0:	4620      	mov	r0, r4
 80238c2:	f000 fedd 	bl	8024680 <_Balloc>
 80238c6:	9000      	str	r0, [sp, #0]
 80238c8:	2800      	cmp	r0, #0
 80238ca:	d14b      	bne.n	8023964 <_dtoa_r+0x31c>
 80238cc:	4b24      	ldr	r3, [pc, #144]	; (8023960 <_dtoa_r+0x318>)
 80238ce:	4602      	mov	r2, r0
 80238d0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80238d4:	e6d1      	b.n	802367a <_dtoa_r+0x32>
 80238d6:	2301      	movs	r3, #1
 80238d8:	e7de      	b.n	8023898 <_dtoa_r+0x250>
 80238da:	2300      	movs	r3, #0
 80238dc:	9308      	str	r3, [sp, #32]
 80238de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80238e0:	eb0a 0903 	add.w	r9, sl, r3
 80238e4:	f109 0301 	add.w	r3, r9, #1
 80238e8:	2b01      	cmp	r3, #1
 80238ea:	9301      	str	r3, [sp, #4]
 80238ec:	bfb8      	it	lt
 80238ee:	2301      	movlt	r3, #1
 80238f0:	e7dd      	b.n	80238ae <_dtoa_r+0x266>
 80238f2:	2301      	movs	r3, #1
 80238f4:	e7f2      	b.n	80238dc <_dtoa_r+0x294>
 80238f6:	2501      	movs	r5, #1
 80238f8:	2300      	movs	r3, #0
 80238fa:	9305      	str	r3, [sp, #20]
 80238fc:	9508      	str	r5, [sp, #32]
 80238fe:	f04f 39ff 	mov.w	r9, #4294967295
 8023902:	2200      	movs	r2, #0
 8023904:	f8cd 9004 	str.w	r9, [sp, #4]
 8023908:	2312      	movs	r3, #18
 802390a:	9209      	str	r2, [sp, #36]	; 0x24
 802390c:	e7cf      	b.n	80238ae <_dtoa_r+0x266>
 802390e:	2301      	movs	r3, #1
 8023910:	9308      	str	r3, [sp, #32]
 8023912:	e7f4      	b.n	80238fe <_dtoa_r+0x2b6>
 8023914:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8023918:	f8cd 9004 	str.w	r9, [sp, #4]
 802391c:	464b      	mov	r3, r9
 802391e:	e7c6      	b.n	80238ae <_dtoa_r+0x266>
 8023920:	3101      	adds	r1, #1
 8023922:	6041      	str	r1, [r0, #4]
 8023924:	0052      	lsls	r2, r2, #1
 8023926:	e7c6      	b.n	80238b6 <_dtoa_r+0x26e>
 8023928:	636f4361 	.word	0x636f4361
 802392c:	3fd287a7 	.word	0x3fd287a7
 8023930:	8b60c8b3 	.word	0x8b60c8b3
 8023934:	3fc68a28 	.word	0x3fc68a28
 8023938:	509f79fb 	.word	0x509f79fb
 802393c:	3fd34413 	.word	0x3fd34413
 8023940:	080296a0 	.word	0x080296a0
 8023944:	080296b7 	.word	0x080296b7
 8023948:	7ff00000 	.word	0x7ff00000
 802394c:	0802969c 	.word	0x0802969c
 8023950:	08029693 	.word	0x08029693
 8023954:	080251e6 	.word	0x080251e6
 8023958:	3ff80000 	.word	0x3ff80000
 802395c:	08029810 	.word	0x08029810
 8023960:	08029716 	.word	0x08029716
 8023964:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8023966:	9a00      	ldr	r2, [sp, #0]
 8023968:	601a      	str	r2, [r3, #0]
 802396a:	9b01      	ldr	r3, [sp, #4]
 802396c:	2b0e      	cmp	r3, #14
 802396e:	f200 80ad 	bhi.w	8023acc <_dtoa_r+0x484>
 8023972:	2d00      	cmp	r5, #0
 8023974:	f000 80aa 	beq.w	8023acc <_dtoa_r+0x484>
 8023978:	f1ba 0f00 	cmp.w	sl, #0
 802397c:	dd36      	ble.n	80239ec <_dtoa_r+0x3a4>
 802397e:	4ac3      	ldr	r2, [pc, #780]	; (8023c8c <_dtoa_r+0x644>)
 8023980:	f00a 030f 	and.w	r3, sl, #15
 8023984:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8023988:	ed93 7b00 	vldr	d7, [r3]
 802398c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8023990:	ea4f 172a 	mov.w	r7, sl, asr #4
 8023994:	eeb0 8a47 	vmov.f32	s16, s14
 8023998:	eef0 8a67 	vmov.f32	s17, s15
 802399c:	d016      	beq.n	80239cc <_dtoa_r+0x384>
 802399e:	4bbc      	ldr	r3, [pc, #752]	; (8023c90 <_dtoa_r+0x648>)
 80239a0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80239a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80239a8:	f7dc ff7a 	bl	80008a0 <__aeabi_ddiv>
 80239ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80239b0:	f007 070f 	and.w	r7, r7, #15
 80239b4:	2503      	movs	r5, #3
 80239b6:	4eb6      	ldr	r6, [pc, #728]	; (8023c90 <_dtoa_r+0x648>)
 80239b8:	b957      	cbnz	r7, 80239d0 <_dtoa_r+0x388>
 80239ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80239be:	ec53 2b18 	vmov	r2, r3, d8
 80239c2:	f7dc ff6d 	bl	80008a0 <__aeabi_ddiv>
 80239c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80239ca:	e029      	b.n	8023a20 <_dtoa_r+0x3d8>
 80239cc:	2502      	movs	r5, #2
 80239ce:	e7f2      	b.n	80239b6 <_dtoa_r+0x36e>
 80239d0:	07f9      	lsls	r1, r7, #31
 80239d2:	d508      	bpl.n	80239e6 <_dtoa_r+0x39e>
 80239d4:	ec51 0b18 	vmov	r0, r1, d8
 80239d8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80239dc:	f7dc fe36 	bl	800064c <__aeabi_dmul>
 80239e0:	ec41 0b18 	vmov	d8, r0, r1
 80239e4:	3501      	adds	r5, #1
 80239e6:	107f      	asrs	r7, r7, #1
 80239e8:	3608      	adds	r6, #8
 80239ea:	e7e5      	b.n	80239b8 <_dtoa_r+0x370>
 80239ec:	f000 80a6 	beq.w	8023b3c <_dtoa_r+0x4f4>
 80239f0:	f1ca 0600 	rsb	r6, sl, #0
 80239f4:	4ba5      	ldr	r3, [pc, #660]	; (8023c8c <_dtoa_r+0x644>)
 80239f6:	4fa6      	ldr	r7, [pc, #664]	; (8023c90 <_dtoa_r+0x648>)
 80239f8:	f006 020f 	and.w	r2, r6, #15
 80239fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8023a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023a04:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8023a08:	f7dc fe20 	bl	800064c <__aeabi_dmul>
 8023a0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8023a10:	1136      	asrs	r6, r6, #4
 8023a12:	2300      	movs	r3, #0
 8023a14:	2502      	movs	r5, #2
 8023a16:	2e00      	cmp	r6, #0
 8023a18:	f040 8085 	bne.w	8023b26 <_dtoa_r+0x4de>
 8023a1c:	2b00      	cmp	r3, #0
 8023a1e:	d1d2      	bne.n	80239c6 <_dtoa_r+0x37e>
 8023a20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023a22:	2b00      	cmp	r3, #0
 8023a24:	f000 808c 	beq.w	8023b40 <_dtoa_r+0x4f8>
 8023a28:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8023a2c:	4b99      	ldr	r3, [pc, #612]	; (8023c94 <_dtoa_r+0x64c>)
 8023a2e:	2200      	movs	r2, #0
 8023a30:	4630      	mov	r0, r6
 8023a32:	4639      	mov	r1, r7
 8023a34:	f7dd f87c 	bl	8000b30 <__aeabi_dcmplt>
 8023a38:	2800      	cmp	r0, #0
 8023a3a:	f000 8081 	beq.w	8023b40 <_dtoa_r+0x4f8>
 8023a3e:	9b01      	ldr	r3, [sp, #4]
 8023a40:	2b00      	cmp	r3, #0
 8023a42:	d07d      	beq.n	8023b40 <_dtoa_r+0x4f8>
 8023a44:	f1b9 0f00 	cmp.w	r9, #0
 8023a48:	dd3c      	ble.n	8023ac4 <_dtoa_r+0x47c>
 8023a4a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8023a4e:	9307      	str	r3, [sp, #28]
 8023a50:	2200      	movs	r2, #0
 8023a52:	4b91      	ldr	r3, [pc, #580]	; (8023c98 <_dtoa_r+0x650>)
 8023a54:	4630      	mov	r0, r6
 8023a56:	4639      	mov	r1, r7
 8023a58:	f7dc fdf8 	bl	800064c <__aeabi_dmul>
 8023a5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8023a60:	3501      	adds	r5, #1
 8023a62:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8023a66:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8023a6a:	4628      	mov	r0, r5
 8023a6c:	f7dc fd84 	bl	8000578 <__aeabi_i2d>
 8023a70:	4632      	mov	r2, r6
 8023a72:	463b      	mov	r3, r7
 8023a74:	f7dc fdea 	bl	800064c <__aeabi_dmul>
 8023a78:	4b88      	ldr	r3, [pc, #544]	; (8023c9c <_dtoa_r+0x654>)
 8023a7a:	2200      	movs	r2, #0
 8023a7c:	f7dc fc30 	bl	80002e0 <__adddf3>
 8023a80:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8023a84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8023a88:	9303      	str	r3, [sp, #12]
 8023a8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023a8c:	2b00      	cmp	r3, #0
 8023a8e:	d15c      	bne.n	8023b4a <_dtoa_r+0x502>
 8023a90:	4b83      	ldr	r3, [pc, #524]	; (8023ca0 <_dtoa_r+0x658>)
 8023a92:	2200      	movs	r2, #0
 8023a94:	4630      	mov	r0, r6
 8023a96:	4639      	mov	r1, r7
 8023a98:	f7dc fc20 	bl	80002dc <__aeabi_dsub>
 8023a9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8023aa0:	4606      	mov	r6, r0
 8023aa2:	460f      	mov	r7, r1
 8023aa4:	f7dd f862 	bl	8000b6c <__aeabi_dcmpgt>
 8023aa8:	2800      	cmp	r0, #0
 8023aaa:	f040 8296 	bne.w	8023fda <_dtoa_r+0x992>
 8023aae:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8023ab2:	4630      	mov	r0, r6
 8023ab4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8023ab8:	4639      	mov	r1, r7
 8023aba:	f7dd f839 	bl	8000b30 <__aeabi_dcmplt>
 8023abe:	2800      	cmp	r0, #0
 8023ac0:	f040 8288 	bne.w	8023fd4 <_dtoa_r+0x98c>
 8023ac4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8023ac8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8023acc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8023ace:	2b00      	cmp	r3, #0
 8023ad0:	f2c0 8158 	blt.w	8023d84 <_dtoa_r+0x73c>
 8023ad4:	f1ba 0f0e 	cmp.w	sl, #14
 8023ad8:	f300 8154 	bgt.w	8023d84 <_dtoa_r+0x73c>
 8023adc:	4b6b      	ldr	r3, [pc, #428]	; (8023c8c <_dtoa_r+0x644>)
 8023ade:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8023ae2:	e9d3 8900 	ldrd	r8, r9, [r3]
 8023ae6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023ae8:	2b00      	cmp	r3, #0
 8023aea:	f280 80e3 	bge.w	8023cb4 <_dtoa_r+0x66c>
 8023aee:	9b01      	ldr	r3, [sp, #4]
 8023af0:	2b00      	cmp	r3, #0
 8023af2:	f300 80df 	bgt.w	8023cb4 <_dtoa_r+0x66c>
 8023af6:	f040 826d 	bne.w	8023fd4 <_dtoa_r+0x98c>
 8023afa:	4b69      	ldr	r3, [pc, #420]	; (8023ca0 <_dtoa_r+0x658>)
 8023afc:	2200      	movs	r2, #0
 8023afe:	4640      	mov	r0, r8
 8023b00:	4649      	mov	r1, r9
 8023b02:	f7dc fda3 	bl	800064c <__aeabi_dmul>
 8023b06:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8023b0a:	f7dd f825 	bl	8000b58 <__aeabi_dcmpge>
 8023b0e:	9e01      	ldr	r6, [sp, #4]
 8023b10:	4637      	mov	r7, r6
 8023b12:	2800      	cmp	r0, #0
 8023b14:	f040 8243 	bne.w	8023f9e <_dtoa_r+0x956>
 8023b18:	9d00      	ldr	r5, [sp, #0]
 8023b1a:	2331      	movs	r3, #49	; 0x31
 8023b1c:	f805 3b01 	strb.w	r3, [r5], #1
 8023b20:	f10a 0a01 	add.w	sl, sl, #1
 8023b24:	e23f      	b.n	8023fa6 <_dtoa_r+0x95e>
 8023b26:	07f2      	lsls	r2, r6, #31
 8023b28:	d505      	bpl.n	8023b36 <_dtoa_r+0x4ee>
 8023b2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8023b2e:	f7dc fd8d 	bl	800064c <__aeabi_dmul>
 8023b32:	3501      	adds	r5, #1
 8023b34:	2301      	movs	r3, #1
 8023b36:	1076      	asrs	r6, r6, #1
 8023b38:	3708      	adds	r7, #8
 8023b3a:	e76c      	b.n	8023a16 <_dtoa_r+0x3ce>
 8023b3c:	2502      	movs	r5, #2
 8023b3e:	e76f      	b.n	8023a20 <_dtoa_r+0x3d8>
 8023b40:	9b01      	ldr	r3, [sp, #4]
 8023b42:	f8cd a01c 	str.w	sl, [sp, #28]
 8023b46:	930c      	str	r3, [sp, #48]	; 0x30
 8023b48:	e78d      	b.n	8023a66 <_dtoa_r+0x41e>
 8023b4a:	9900      	ldr	r1, [sp, #0]
 8023b4c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8023b4e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8023b50:	4b4e      	ldr	r3, [pc, #312]	; (8023c8c <_dtoa_r+0x644>)
 8023b52:	ed9d 7b02 	vldr	d7, [sp, #8]
 8023b56:	4401      	add	r1, r0
 8023b58:	9102      	str	r1, [sp, #8]
 8023b5a:	9908      	ldr	r1, [sp, #32]
 8023b5c:	eeb0 8a47 	vmov.f32	s16, s14
 8023b60:	eef0 8a67 	vmov.f32	s17, s15
 8023b64:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8023b68:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8023b6c:	2900      	cmp	r1, #0
 8023b6e:	d045      	beq.n	8023bfc <_dtoa_r+0x5b4>
 8023b70:	494c      	ldr	r1, [pc, #304]	; (8023ca4 <_dtoa_r+0x65c>)
 8023b72:	2000      	movs	r0, #0
 8023b74:	f7dc fe94 	bl	80008a0 <__aeabi_ddiv>
 8023b78:	ec53 2b18 	vmov	r2, r3, d8
 8023b7c:	f7dc fbae 	bl	80002dc <__aeabi_dsub>
 8023b80:	9d00      	ldr	r5, [sp, #0]
 8023b82:	ec41 0b18 	vmov	d8, r0, r1
 8023b86:	4639      	mov	r1, r7
 8023b88:	4630      	mov	r0, r6
 8023b8a:	f7dd f80f 	bl	8000bac <__aeabi_d2iz>
 8023b8e:	900c      	str	r0, [sp, #48]	; 0x30
 8023b90:	f7dc fcf2 	bl	8000578 <__aeabi_i2d>
 8023b94:	4602      	mov	r2, r0
 8023b96:	460b      	mov	r3, r1
 8023b98:	4630      	mov	r0, r6
 8023b9a:	4639      	mov	r1, r7
 8023b9c:	f7dc fb9e 	bl	80002dc <__aeabi_dsub>
 8023ba0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023ba2:	3330      	adds	r3, #48	; 0x30
 8023ba4:	f805 3b01 	strb.w	r3, [r5], #1
 8023ba8:	ec53 2b18 	vmov	r2, r3, d8
 8023bac:	4606      	mov	r6, r0
 8023bae:	460f      	mov	r7, r1
 8023bb0:	f7dc ffbe 	bl	8000b30 <__aeabi_dcmplt>
 8023bb4:	2800      	cmp	r0, #0
 8023bb6:	d165      	bne.n	8023c84 <_dtoa_r+0x63c>
 8023bb8:	4632      	mov	r2, r6
 8023bba:	463b      	mov	r3, r7
 8023bbc:	4935      	ldr	r1, [pc, #212]	; (8023c94 <_dtoa_r+0x64c>)
 8023bbe:	2000      	movs	r0, #0
 8023bc0:	f7dc fb8c 	bl	80002dc <__aeabi_dsub>
 8023bc4:	ec53 2b18 	vmov	r2, r3, d8
 8023bc8:	f7dc ffb2 	bl	8000b30 <__aeabi_dcmplt>
 8023bcc:	2800      	cmp	r0, #0
 8023bce:	f040 80b9 	bne.w	8023d44 <_dtoa_r+0x6fc>
 8023bd2:	9b02      	ldr	r3, [sp, #8]
 8023bd4:	429d      	cmp	r5, r3
 8023bd6:	f43f af75 	beq.w	8023ac4 <_dtoa_r+0x47c>
 8023bda:	4b2f      	ldr	r3, [pc, #188]	; (8023c98 <_dtoa_r+0x650>)
 8023bdc:	ec51 0b18 	vmov	r0, r1, d8
 8023be0:	2200      	movs	r2, #0
 8023be2:	f7dc fd33 	bl	800064c <__aeabi_dmul>
 8023be6:	4b2c      	ldr	r3, [pc, #176]	; (8023c98 <_dtoa_r+0x650>)
 8023be8:	ec41 0b18 	vmov	d8, r0, r1
 8023bec:	2200      	movs	r2, #0
 8023bee:	4630      	mov	r0, r6
 8023bf0:	4639      	mov	r1, r7
 8023bf2:	f7dc fd2b 	bl	800064c <__aeabi_dmul>
 8023bf6:	4606      	mov	r6, r0
 8023bf8:	460f      	mov	r7, r1
 8023bfa:	e7c4      	b.n	8023b86 <_dtoa_r+0x53e>
 8023bfc:	ec51 0b17 	vmov	r0, r1, d7
 8023c00:	f7dc fd24 	bl	800064c <__aeabi_dmul>
 8023c04:	9b02      	ldr	r3, [sp, #8]
 8023c06:	9d00      	ldr	r5, [sp, #0]
 8023c08:	930c      	str	r3, [sp, #48]	; 0x30
 8023c0a:	ec41 0b18 	vmov	d8, r0, r1
 8023c0e:	4639      	mov	r1, r7
 8023c10:	4630      	mov	r0, r6
 8023c12:	f7dc ffcb 	bl	8000bac <__aeabi_d2iz>
 8023c16:	9011      	str	r0, [sp, #68]	; 0x44
 8023c18:	f7dc fcae 	bl	8000578 <__aeabi_i2d>
 8023c1c:	4602      	mov	r2, r0
 8023c1e:	460b      	mov	r3, r1
 8023c20:	4630      	mov	r0, r6
 8023c22:	4639      	mov	r1, r7
 8023c24:	f7dc fb5a 	bl	80002dc <__aeabi_dsub>
 8023c28:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8023c2a:	3330      	adds	r3, #48	; 0x30
 8023c2c:	f805 3b01 	strb.w	r3, [r5], #1
 8023c30:	9b02      	ldr	r3, [sp, #8]
 8023c32:	429d      	cmp	r5, r3
 8023c34:	4606      	mov	r6, r0
 8023c36:	460f      	mov	r7, r1
 8023c38:	f04f 0200 	mov.w	r2, #0
 8023c3c:	d134      	bne.n	8023ca8 <_dtoa_r+0x660>
 8023c3e:	4b19      	ldr	r3, [pc, #100]	; (8023ca4 <_dtoa_r+0x65c>)
 8023c40:	ec51 0b18 	vmov	r0, r1, d8
 8023c44:	f7dc fb4c 	bl	80002e0 <__adddf3>
 8023c48:	4602      	mov	r2, r0
 8023c4a:	460b      	mov	r3, r1
 8023c4c:	4630      	mov	r0, r6
 8023c4e:	4639      	mov	r1, r7
 8023c50:	f7dc ff8c 	bl	8000b6c <__aeabi_dcmpgt>
 8023c54:	2800      	cmp	r0, #0
 8023c56:	d175      	bne.n	8023d44 <_dtoa_r+0x6fc>
 8023c58:	ec53 2b18 	vmov	r2, r3, d8
 8023c5c:	4911      	ldr	r1, [pc, #68]	; (8023ca4 <_dtoa_r+0x65c>)
 8023c5e:	2000      	movs	r0, #0
 8023c60:	f7dc fb3c 	bl	80002dc <__aeabi_dsub>
 8023c64:	4602      	mov	r2, r0
 8023c66:	460b      	mov	r3, r1
 8023c68:	4630      	mov	r0, r6
 8023c6a:	4639      	mov	r1, r7
 8023c6c:	f7dc ff60 	bl	8000b30 <__aeabi_dcmplt>
 8023c70:	2800      	cmp	r0, #0
 8023c72:	f43f af27 	beq.w	8023ac4 <_dtoa_r+0x47c>
 8023c76:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8023c78:	1e6b      	subs	r3, r5, #1
 8023c7a:	930c      	str	r3, [sp, #48]	; 0x30
 8023c7c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8023c80:	2b30      	cmp	r3, #48	; 0x30
 8023c82:	d0f8      	beq.n	8023c76 <_dtoa_r+0x62e>
 8023c84:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8023c88:	e04a      	b.n	8023d20 <_dtoa_r+0x6d8>
 8023c8a:	bf00      	nop
 8023c8c:	08029810 	.word	0x08029810
 8023c90:	080297e8 	.word	0x080297e8
 8023c94:	3ff00000 	.word	0x3ff00000
 8023c98:	40240000 	.word	0x40240000
 8023c9c:	401c0000 	.word	0x401c0000
 8023ca0:	40140000 	.word	0x40140000
 8023ca4:	3fe00000 	.word	0x3fe00000
 8023ca8:	4baf      	ldr	r3, [pc, #700]	; (8023f68 <_dtoa_r+0x920>)
 8023caa:	f7dc fccf 	bl	800064c <__aeabi_dmul>
 8023cae:	4606      	mov	r6, r0
 8023cb0:	460f      	mov	r7, r1
 8023cb2:	e7ac      	b.n	8023c0e <_dtoa_r+0x5c6>
 8023cb4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8023cb8:	9d00      	ldr	r5, [sp, #0]
 8023cba:	4642      	mov	r2, r8
 8023cbc:	464b      	mov	r3, r9
 8023cbe:	4630      	mov	r0, r6
 8023cc0:	4639      	mov	r1, r7
 8023cc2:	f7dc fded 	bl	80008a0 <__aeabi_ddiv>
 8023cc6:	f7dc ff71 	bl	8000bac <__aeabi_d2iz>
 8023cca:	9002      	str	r0, [sp, #8]
 8023ccc:	f7dc fc54 	bl	8000578 <__aeabi_i2d>
 8023cd0:	4642      	mov	r2, r8
 8023cd2:	464b      	mov	r3, r9
 8023cd4:	f7dc fcba 	bl	800064c <__aeabi_dmul>
 8023cd8:	4602      	mov	r2, r0
 8023cda:	460b      	mov	r3, r1
 8023cdc:	4630      	mov	r0, r6
 8023cde:	4639      	mov	r1, r7
 8023ce0:	f7dc fafc 	bl	80002dc <__aeabi_dsub>
 8023ce4:	9e02      	ldr	r6, [sp, #8]
 8023ce6:	9f01      	ldr	r7, [sp, #4]
 8023ce8:	3630      	adds	r6, #48	; 0x30
 8023cea:	f805 6b01 	strb.w	r6, [r5], #1
 8023cee:	9e00      	ldr	r6, [sp, #0]
 8023cf0:	1bae      	subs	r6, r5, r6
 8023cf2:	42b7      	cmp	r7, r6
 8023cf4:	4602      	mov	r2, r0
 8023cf6:	460b      	mov	r3, r1
 8023cf8:	d137      	bne.n	8023d6a <_dtoa_r+0x722>
 8023cfa:	f7dc faf1 	bl	80002e0 <__adddf3>
 8023cfe:	4642      	mov	r2, r8
 8023d00:	464b      	mov	r3, r9
 8023d02:	4606      	mov	r6, r0
 8023d04:	460f      	mov	r7, r1
 8023d06:	f7dc ff31 	bl	8000b6c <__aeabi_dcmpgt>
 8023d0a:	b9c8      	cbnz	r0, 8023d40 <_dtoa_r+0x6f8>
 8023d0c:	4642      	mov	r2, r8
 8023d0e:	464b      	mov	r3, r9
 8023d10:	4630      	mov	r0, r6
 8023d12:	4639      	mov	r1, r7
 8023d14:	f7dc ff02 	bl	8000b1c <__aeabi_dcmpeq>
 8023d18:	b110      	cbz	r0, 8023d20 <_dtoa_r+0x6d8>
 8023d1a:	9b02      	ldr	r3, [sp, #8]
 8023d1c:	07d9      	lsls	r1, r3, #31
 8023d1e:	d40f      	bmi.n	8023d40 <_dtoa_r+0x6f8>
 8023d20:	4620      	mov	r0, r4
 8023d22:	4659      	mov	r1, fp
 8023d24:	f000 fcec 	bl	8024700 <_Bfree>
 8023d28:	2300      	movs	r3, #0
 8023d2a:	702b      	strb	r3, [r5, #0]
 8023d2c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8023d2e:	f10a 0001 	add.w	r0, sl, #1
 8023d32:	6018      	str	r0, [r3, #0]
 8023d34:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8023d36:	2b00      	cmp	r3, #0
 8023d38:	f43f acd8 	beq.w	80236ec <_dtoa_r+0xa4>
 8023d3c:	601d      	str	r5, [r3, #0]
 8023d3e:	e4d5      	b.n	80236ec <_dtoa_r+0xa4>
 8023d40:	f8cd a01c 	str.w	sl, [sp, #28]
 8023d44:	462b      	mov	r3, r5
 8023d46:	461d      	mov	r5, r3
 8023d48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8023d4c:	2a39      	cmp	r2, #57	; 0x39
 8023d4e:	d108      	bne.n	8023d62 <_dtoa_r+0x71a>
 8023d50:	9a00      	ldr	r2, [sp, #0]
 8023d52:	429a      	cmp	r2, r3
 8023d54:	d1f7      	bne.n	8023d46 <_dtoa_r+0x6fe>
 8023d56:	9a07      	ldr	r2, [sp, #28]
 8023d58:	9900      	ldr	r1, [sp, #0]
 8023d5a:	3201      	adds	r2, #1
 8023d5c:	9207      	str	r2, [sp, #28]
 8023d5e:	2230      	movs	r2, #48	; 0x30
 8023d60:	700a      	strb	r2, [r1, #0]
 8023d62:	781a      	ldrb	r2, [r3, #0]
 8023d64:	3201      	adds	r2, #1
 8023d66:	701a      	strb	r2, [r3, #0]
 8023d68:	e78c      	b.n	8023c84 <_dtoa_r+0x63c>
 8023d6a:	4b7f      	ldr	r3, [pc, #508]	; (8023f68 <_dtoa_r+0x920>)
 8023d6c:	2200      	movs	r2, #0
 8023d6e:	f7dc fc6d 	bl	800064c <__aeabi_dmul>
 8023d72:	2200      	movs	r2, #0
 8023d74:	2300      	movs	r3, #0
 8023d76:	4606      	mov	r6, r0
 8023d78:	460f      	mov	r7, r1
 8023d7a:	f7dc fecf 	bl	8000b1c <__aeabi_dcmpeq>
 8023d7e:	2800      	cmp	r0, #0
 8023d80:	d09b      	beq.n	8023cba <_dtoa_r+0x672>
 8023d82:	e7cd      	b.n	8023d20 <_dtoa_r+0x6d8>
 8023d84:	9a08      	ldr	r2, [sp, #32]
 8023d86:	2a00      	cmp	r2, #0
 8023d88:	f000 80c4 	beq.w	8023f14 <_dtoa_r+0x8cc>
 8023d8c:	9a05      	ldr	r2, [sp, #20]
 8023d8e:	2a01      	cmp	r2, #1
 8023d90:	f300 80a8 	bgt.w	8023ee4 <_dtoa_r+0x89c>
 8023d94:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8023d96:	2a00      	cmp	r2, #0
 8023d98:	f000 80a0 	beq.w	8023edc <_dtoa_r+0x894>
 8023d9c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8023da0:	9e06      	ldr	r6, [sp, #24]
 8023da2:	4645      	mov	r5, r8
 8023da4:	9a04      	ldr	r2, [sp, #16]
 8023da6:	2101      	movs	r1, #1
 8023da8:	441a      	add	r2, r3
 8023daa:	4620      	mov	r0, r4
 8023dac:	4498      	add	r8, r3
 8023dae:	9204      	str	r2, [sp, #16]
 8023db0:	f000 fd62 	bl	8024878 <__i2b>
 8023db4:	4607      	mov	r7, r0
 8023db6:	2d00      	cmp	r5, #0
 8023db8:	dd0b      	ble.n	8023dd2 <_dtoa_r+0x78a>
 8023dba:	9b04      	ldr	r3, [sp, #16]
 8023dbc:	2b00      	cmp	r3, #0
 8023dbe:	dd08      	ble.n	8023dd2 <_dtoa_r+0x78a>
 8023dc0:	42ab      	cmp	r3, r5
 8023dc2:	9a04      	ldr	r2, [sp, #16]
 8023dc4:	bfa8      	it	ge
 8023dc6:	462b      	movge	r3, r5
 8023dc8:	eba8 0803 	sub.w	r8, r8, r3
 8023dcc:	1aed      	subs	r5, r5, r3
 8023dce:	1ad3      	subs	r3, r2, r3
 8023dd0:	9304      	str	r3, [sp, #16]
 8023dd2:	9b06      	ldr	r3, [sp, #24]
 8023dd4:	b1fb      	cbz	r3, 8023e16 <_dtoa_r+0x7ce>
 8023dd6:	9b08      	ldr	r3, [sp, #32]
 8023dd8:	2b00      	cmp	r3, #0
 8023dda:	f000 809f 	beq.w	8023f1c <_dtoa_r+0x8d4>
 8023dde:	2e00      	cmp	r6, #0
 8023de0:	dd11      	ble.n	8023e06 <_dtoa_r+0x7be>
 8023de2:	4639      	mov	r1, r7
 8023de4:	4632      	mov	r2, r6
 8023de6:	4620      	mov	r0, r4
 8023de8:	f000 fe02 	bl	80249f0 <__pow5mult>
 8023dec:	465a      	mov	r2, fp
 8023dee:	4601      	mov	r1, r0
 8023df0:	4607      	mov	r7, r0
 8023df2:	4620      	mov	r0, r4
 8023df4:	f000 fd56 	bl	80248a4 <__multiply>
 8023df8:	4659      	mov	r1, fp
 8023dfa:	9007      	str	r0, [sp, #28]
 8023dfc:	4620      	mov	r0, r4
 8023dfe:	f000 fc7f 	bl	8024700 <_Bfree>
 8023e02:	9b07      	ldr	r3, [sp, #28]
 8023e04:	469b      	mov	fp, r3
 8023e06:	9b06      	ldr	r3, [sp, #24]
 8023e08:	1b9a      	subs	r2, r3, r6
 8023e0a:	d004      	beq.n	8023e16 <_dtoa_r+0x7ce>
 8023e0c:	4659      	mov	r1, fp
 8023e0e:	4620      	mov	r0, r4
 8023e10:	f000 fdee 	bl	80249f0 <__pow5mult>
 8023e14:	4683      	mov	fp, r0
 8023e16:	2101      	movs	r1, #1
 8023e18:	4620      	mov	r0, r4
 8023e1a:	f000 fd2d 	bl	8024878 <__i2b>
 8023e1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023e20:	2b00      	cmp	r3, #0
 8023e22:	4606      	mov	r6, r0
 8023e24:	dd7c      	ble.n	8023f20 <_dtoa_r+0x8d8>
 8023e26:	461a      	mov	r2, r3
 8023e28:	4601      	mov	r1, r0
 8023e2a:	4620      	mov	r0, r4
 8023e2c:	f000 fde0 	bl	80249f0 <__pow5mult>
 8023e30:	9b05      	ldr	r3, [sp, #20]
 8023e32:	2b01      	cmp	r3, #1
 8023e34:	4606      	mov	r6, r0
 8023e36:	dd76      	ble.n	8023f26 <_dtoa_r+0x8de>
 8023e38:	2300      	movs	r3, #0
 8023e3a:	9306      	str	r3, [sp, #24]
 8023e3c:	6933      	ldr	r3, [r6, #16]
 8023e3e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8023e42:	6918      	ldr	r0, [r3, #16]
 8023e44:	f000 fcc8 	bl	80247d8 <__hi0bits>
 8023e48:	f1c0 0020 	rsb	r0, r0, #32
 8023e4c:	9b04      	ldr	r3, [sp, #16]
 8023e4e:	4418      	add	r0, r3
 8023e50:	f010 001f 	ands.w	r0, r0, #31
 8023e54:	f000 8086 	beq.w	8023f64 <_dtoa_r+0x91c>
 8023e58:	f1c0 0320 	rsb	r3, r0, #32
 8023e5c:	2b04      	cmp	r3, #4
 8023e5e:	dd7f      	ble.n	8023f60 <_dtoa_r+0x918>
 8023e60:	f1c0 001c 	rsb	r0, r0, #28
 8023e64:	9b04      	ldr	r3, [sp, #16]
 8023e66:	4403      	add	r3, r0
 8023e68:	4480      	add	r8, r0
 8023e6a:	4405      	add	r5, r0
 8023e6c:	9304      	str	r3, [sp, #16]
 8023e6e:	f1b8 0f00 	cmp.w	r8, #0
 8023e72:	dd05      	ble.n	8023e80 <_dtoa_r+0x838>
 8023e74:	4659      	mov	r1, fp
 8023e76:	4642      	mov	r2, r8
 8023e78:	4620      	mov	r0, r4
 8023e7a:	f000 fe13 	bl	8024aa4 <__lshift>
 8023e7e:	4683      	mov	fp, r0
 8023e80:	9b04      	ldr	r3, [sp, #16]
 8023e82:	2b00      	cmp	r3, #0
 8023e84:	dd05      	ble.n	8023e92 <_dtoa_r+0x84a>
 8023e86:	4631      	mov	r1, r6
 8023e88:	461a      	mov	r2, r3
 8023e8a:	4620      	mov	r0, r4
 8023e8c:	f000 fe0a 	bl	8024aa4 <__lshift>
 8023e90:	4606      	mov	r6, r0
 8023e92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023e94:	2b00      	cmp	r3, #0
 8023e96:	d069      	beq.n	8023f6c <_dtoa_r+0x924>
 8023e98:	4631      	mov	r1, r6
 8023e9a:	4658      	mov	r0, fp
 8023e9c:	f000 fe6e 	bl	8024b7c <__mcmp>
 8023ea0:	2800      	cmp	r0, #0
 8023ea2:	da63      	bge.n	8023f6c <_dtoa_r+0x924>
 8023ea4:	2300      	movs	r3, #0
 8023ea6:	4659      	mov	r1, fp
 8023ea8:	220a      	movs	r2, #10
 8023eaa:	4620      	mov	r0, r4
 8023eac:	f000 fc4a 	bl	8024744 <__multadd>
 8023eb0:	9b08      	ldr	r3, [sp, #32]
 8023eb2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8023eb6:	4683      	mov	fp, r0
 8023eb8:	2b00      	cmp	r3, #0
 8023eba:	f000 818f 	beq.w	80241dc <_dtoa_r+0xb94>
 8023ebe:	4639      	mov	r1, r7
 8023ec0:	2300      	movs	r3, #0
 8023ec2:	220a      	movs	r2, #10
 8023ec4:	4620      	mov	r0, r4
 8023ec6:	f000 fc3d 	bl	8024744 <__multadd>
 8023eca:	f1b9 0f00 	cmp.w	r9, #0
 8023ece:	4607      	mov	r7, r0
 8023ed0:	f300 808e 	bgt.w	8023ff0 <_dtoa_r+0x9a8>
 8023ed4:	9b05      	ldr	r3, [sp, #20]
 8023ed6:	2b02      	cmp	r3, #2
 8023ed8:	dc50      	bgt.n	8023f7c <_dtoa_r+0x934>
 8023eda:	e089      	b.n	8023ff0 <_dtoa_r+0x9a8>
 8023edc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8023ede:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8023ee2:	e75d      	b.n	8023da0 <_dtoa_r+0x758>
 8023ee4:	9b01      	ldr	r3, [sp, #4]
 8023ee6:	1e5e      	subs	r6, r3, #1
 8023ee8:	9b06      	ldr	r3, [sp, #24]
 8023eea:	42b3      	cmp	r3, r6
 8023eec:	bfbf      	itttt	lt
 8023eee:	9b06      	ldrlt	r3, [sp, #24]
 8023ef0:	9606      	strlt	r6, [sp, #24]
 8023ef2:	1af2      	sublt	r2, r6, r3
 8023ef4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8023ef6:	bfb6      	itet	lt
 8023ef8:	189b      	addlt	r3, r3, r2
 8023efa:	1b9e      	subge	r6, r3, r6
 8023efc:	930d      	strlt	r3, [sp, #52]	; 0x34
 8023efe:	9b01      	ldr	r3, [sp, #4]
 8023f00:	bfb8      	it	lt
 8023f02:	2600      	movlt	r6, #0
 8023f04:	2b00      	cmp	r3, #0
 8023f06:	bfb5      	itete	lt
 8023f08:	eba8 0503 	sublt.w	r5, r8, r3
 8023f0c:	9b01      	ldrge	r3, [sp, #4]
 8023f0e:	2300      	movlt	r3, #0
 8023f10:	4645      	movge	r5, r8
 8023f12:	e747      	b.n	8023da4 <_dtoa_r+0x75c>
 8023f14:	9e06      	ldr	r6, [sp, #24]
 8023f16:	9f08      	ldr	r7, [sp, #32]
 8023f18:	4645      	mov	r5, r8
 8023f1a:	e74c      	b.n	8023db6 <_dtoa_r+0x76e>
 8023f1c:	9a06      	ldr	r2, [sp, #24]
 8023f1e:	e775      	b.n	8023e0c <_dtoa_r+0x7c4>
 8023f20:	9b05      	ldr	r3, [sp, #20]
 8023f22:	2b01      	cmp	r3, #1
 8023f24:	dc18      	bgt.n	8023f58 <_dtoa_r+0x910>
 8023f26:	9b02      	ldr	r3, [sp, #8]
 8023f28:	b9b3      	cbnz	r3, 8023f58 <_dtoa_r+0x910>
 8023f2a:	9b03      	ldr	r3, [sp, #12]
 8023f2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8023f30:	b9a3      	cbnz	r3, 8023f5c <_dtoa_r+0x914>
 8023f32:	9b03      	ldr	r3, [sp, #12]
 8023f34:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8023f38:	0d1b      	lsrs	r3, r3, #20
 8023f3a:	051b      	lsls	r3, r3, #20
 8023f3c:	b12b      	cbz	r3, 8023f4a <_dtoa_r+0x902>
 8023f3e:	9b04      	ldr	r3, [sp, #16]
 8023f40:	3301      	adds	r3, #1
 8023f42:	9304      	str	r3, [sp, #16]
 8023f44:	f108 0801 	add.w	r8, r8, #1
 8023f48:	2301      	movs	r3, #1
 8023f4a:	9306      	str	r3, [sp, #24]
 8023f4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023f4e:	2b00      	cmp	r3, #0
 8023f50:	f47f af74 	bne.w	8023e3c <_dtoa_r+0x7f4>
 8023f54:	2001      	movs	r0, #1
 8023f56:	e779      	b.n	8023e4c <_dtoa_r+0x804>
 8023f58:	2300      	movs	r3, #0
 8023f5a:	e7f6      	b.n	8023f4a <_dtoa_r+0x902>
 8023f5c:	9b02      	ldr	r3, [sp, #8]
 8023f5e:	e7f4      	b.n	8023f4a <_dtoa_r+0x902>
 8023f60:	d085      	beq.n	8023e6e <_dtoa_r+0x826>
 8023f62:	4618      	mov	r0, r3
 8023f64:	301c      	adds	r0, #28
 8023f66:	e77d      	b.n	8023e64 <_dtoa_r+0x81c>
 8023f68:	40240000 	.word	0x40240000
 8023f6c:	9b01      	ldr	r3, [sp, #4]
 8023f6e:	2b00      	cmp	r3, #0
 8023f70:	dc38      	bgt.n	8023fe4 <_dtoa_r+0x99c>
 8023f72:	9b05      	ldr	r3, [sp, #20]
 8023f74:	2b02      	cmp	r3, #2
 8023f76:	dd35      	ble.n	8023fe4 <_dtoa_r+0x99c>
 8023f78:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8023f7c:	f1b9 0f00 	cmp.w	r9, #0
 8023f80:	d10d      	bne.n	8023f9e <_dtoa_r+0x956>
 8023f82:	4631      	mov	r1, r6
 8023f84:	464b      	mov	r3, r9
 8023f86:	2205      	movs	r2, #5
 8023f88:	4620      	mov	r0, r4
 8023f8a:	f000 fbdb 	bl	8024744 <__multadd>
 8023f8e:	4601      	mov	r1, r0
 8023f90:	4606      	mov	r6, r0
 8023f92:	4658      	mov	r0, fp
 8023f94:	f000 fdf2 	bl	8024b7c <__mcmp>
 8023f98:	2800      	cmp	r0, #0
 8023f9a:	f73f adbd 	bgt.w	8023b18 <_dtoa_r+0x4d0>
 8023f9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023fa0:	9d00      	ldr	r5, [sp, #0]
 8023fa2:	ea6f 0a03 	mvn.w	sl, r3
 8023fa6:	f04f 0800 	mov.w	r8, #0
 8023faa:	4631      	mov	r1, r6
 8023fac:	4620      	mov	r0, r4
 8023fae:	f000 fba7 	bl	8024700 <_Bfree>
 8023fb2:	2f00      	cmp	r7, #0
 8023fb4:	f43f aeb4 	beq.w	8023d20 <_dtoa_r+0x6d8>
 8023fb8:	f1b8 0f00 	cmp.w	r8, #0
 8023fbc:	d005      	beq.n	8023fca <_dtoa_r+0x982>
 8023fbe:	45b8      	cmp	r8, r7
 8023fc0:	d003      	beq.n	8023fca <_dtoa_r+0x982>
 8023fc2:	4641      	mov	r1, r8
 8023fc4:	4620      	mov	r0, r4
 8023fc6:	f000 fb9b 	bl	8024700 <_Bfree>
 8023fca:	4639      	mov	r1, r7
 8023fcc:	4620      	mov	r0, r4
 8023fce:	f000 fb97 	bl	8024700 <_Bfree>
 8023fd2:	e6a5      	b.n	8023d20 <_dtoa_r+0x6d8>
 8023fd4:	2600      	movs	r6, #0
 8023fd6:	4637      	mov	r7, r6
 8023fd8:	e7e1      	b.n	8023f9e <_dtoa_r+0x956>
 8023fda:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8023fdc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8023fe0:	4637      	mov	r7, r6
 8023fe2:	e599      	b.n	8023b18 <_dtoa_r+0x4d0>
 8023fe4:	9b08      	ldr	r3, [sp, #32]
 8023fe6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8023fea:	2b00      	cmp	r3, #0
 8023fec:	f000 80fd 	beq.w	80241ea <_dtoa_r+0xba2>
 8023ff0:	2d00      	cmp	r5, #0
 8023ff2:	dd05      	ble.n	8024000 <_dtoa_r+0x9b8>
 8023ff4:	4639      	mov	r1, r7
 8023ff6:	462a      	mov	r2, r5
 8023ff8:	4620      	mov	r0, r4
 8023ffa:	f000 fd53 	bl	8024aa4 <__lshift>
 8023ffe:	4607      	mov	r7, r0
 8024000:	9b06      	ldr	r3, [sp, #24]
 8024002:	2b00      	cmp	r3, #0
 8024004:	d05c      	beq.n	80240c0 <_dtoa_r+0xa78>
 8024006:	6879      	ldr	r1, [r7, #4]
 8024008:	4620      	mov	r0, r4
 802400a:	f000 fb39 	bl	8024680 <_Balloc>
 802400e:	4605      	mov	r5, r0
 8024010:	b928      	cbnz	r0, 802401e <_dtoa_r+0x9d6>
 8024012:	4b80      	ldr	r3, [pc, #512]	; (8024214 <_dtoa_r+0xbcc>)
 8024014:	4602      	mov	r2, r0
 8024016:	f240 21ea 	movw	r1, #746	; 0x2ea
 802401a:	f7ff bb2e 	b.w	802367a <_dtoa_r+0x32>
 802401e:	693a      	ldr	r2, [r7, #16]
 8024020:	3202      	adds	r2, #2
 8024022:	0092      	lsls	r2, r2, #2
 8024024:	f107 010c 	add.w	r1, r7, #12
 8024028:	300c      	adds	r0, #12
 802402a:	f7fe fae1 	bl	80225f0 <memcpy>
 802402e:	2201      	movs	r2, #1
 8024030:	4629      	mov	r1, r5
 8024032:	4620      	mov	r0, r4
 8024034:	f000 fd36 	bl	8024aa4 <__lshift>
 8024038:	9b00      	ldr	r3, [sp, #0]
 802403a:	3301      	adds	r3, #1
 802403c:	9301      	str	r3, [sp, #4]
 802403e:	9b00      	ldr	r3, [sp, #0]
 8024040:	444b      	add	r3, r9
 8024042:	9307      	str	r3, [sp, #28]
 8024044:	9b02      	ldr	r3, [sp, #8]
 8024046:	f003 0301 	and.w	r3, r3, #1
 802404a:	46b8      	mov	r8, r7
 802404c:	9306      	str	r3, [sp, #24]
 802404e:	4607      	mov	r7, r0
 8024050:	9b01      	ldr	r3, [sp, #4]
 8024052:	4631      	mov	r1, r6
 8024054:	3b01      	subs	r3, #1
 8024056:	4658      	mov	r0, fp
 8024058:	9302      	str	r3, [sp, #8]
 802405a:	f7ff fa69 	bl	8023530 <quorem>
 802405e:	4603      	mov	r3, r0
 8024060:	3330      	adds	r3, #48	; 0x30
 8024062:	9004      	str	r0, [sp, #16]
 8024064:	4641      	mov	r1, r8
 8024066:	4658      	mov	r0, fp
 8024068:	9308      	str	r3, [sp, #32]
 802406a:	f000 fd87 	bl	8024b7c <__mcmp>
 802406e:	463a      	mov	r2, r7
 8024070:	4681      	mov	r9, r0
 8024072:	4631      	mov	r1, r6
 8024074:	4620      	mov	r0, r4
 8024076:	f000 fd9d 	bl	8024bb4 <__mdiff>
 802407a:	68c2      	ldr	r2, [r0, #12]
 802407c:	9b08      	ldr	r3, [sp, #32]
 802407e:	4605      	mov	r5, r0
 8024080:	bb02      	cbnz	r2, 80240c4 <_dtoa_r+0xa7c>
 8024082:	4601      	mov	r1, r0
 8024084:	4658      	mov	r0, fp
 8024086:	f000 fd79 	bl	8024b7c <__mcmp>
 802408a:	9b08      	ldr	r3, [sp, #32]
 802408c:	4602      	mov	r2, r0
 802408e:	4629      	mov	r1, r5
 8024090:	4620      	mov	r0, r4
 8024092:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8024096:	f000 fb33 	bl	8024700 <_Bfree>
 802409a:	9b05      	ldr	r3, [sp, #20]
 802409c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802409e:	9d01      	ldr	r5, [sp, #4]
 80240a0:	ea43 0102 	orr.w	r1, r3, r2
 80240a4:	9b06      	ldr	r3, [sp, #24]
 80240a6:	430b      	orrs	r3, r1
 80240a8:	9b08      	ldr	r3, [sp, #32]
 80240aa:	d10d      	bne.n	80240c8 <_dtoa_r+0xa80>
 80240ac:	2b39      	cmp	r3, #57	; 0x39
 80240ae:	d029      	beq.n	8024104 <_dtoa_r+0xabc>
 80240b0:	f1b9 0f00 	cmp.w	r9, #0
 80240b4:	dd01      	ble.n	80240ba <_dtoa_r+0xa72>
 80240b6:	9b04      	ldr	r3, [sp, #16]
 80240b8:	3331      	adds	r3, #49	; 0x31
 80240ba:	9a02      	ldr	r2, [sp, #8]
 80240bc:	7013      	strb	r3, [r2, #0]
 80240be:	e774      	b.n	8023faa <_dtoa_r+0x962>
 80240c0:	4638      	mov	r0, r7
 80240c2:	e7b9      	b.n	8024038 <_dtoa_r+0x9f0>
 80240c4:	2201      	movs	r2, #1
 80240c6:	e7e2      	b.n	802408e <_dtoa_r+0xa46>
 80240c8:	f1b9 0f00 	cmp.w	r9, #0
 80240cc:	db06      	blt.n	80240dc <_dtoa_r+0xa94>
 80240ce:	9905      	ldr	r1, [sp, #20]
 80240d0:	ea41 0909 	orr.w	r9, r1, r9
 80240d4:	9906      	ldr	r1, [sp, #24]
 80240d6:	ea59 0101 	orrs.w	r1, r9, r1
 80240da:	d120      	bne.n	802411e <_dtoa_r+0xad6>
 80240dc:	2a00      	cmp	r2, #0
 80240de:	ddec      	ble.n	80240ba <_dtoa_r+0xa72>
 80240e0:	4659      	mov	r1, fp
 80240e2:	2201      	movs	r2, #1
 80240e4:	4620      	mov	r0, r4
 80240e6:	9301      	str	r3, [sp, #4]
 80240e8:	f000 fcdc 	bl	8024aa4 <__lshift>
 80240ec:	4631      	mov	r1, r6
 80240ee:	4683      	mov	fp, r0
 80240f0:	f000 fd44 	bl	8024b7c <__mcmp>
 80240f4:	2800      	cmp	r0, #0
 80240f6:	9b01      	ldr	r3, [sp, #4]
 80240f8:	dc02      	bgt.n	8024100 <_dtoa_r+0xab8>
 80240fa:	d1de      	bne.n	80240ba <_dtoa_r+0xa72>
 80240fc:	07da      	lsls	r2, r3, #31
 80240fe:	d5dc      	bpl.n	80240ba <_dtoa_r+0xa72>
 8024100:	2b39      	cmp	r3, #57	; 0x39
 8024102:	d1d8      	bne.n	80240b6 <_dtoa_r+0xa6e>
 8024104:	9a02      	ldr	r2, [sp, #8]
 8024106:	2339      	movs	r3, #57	; 0x39
 8024108:	7013      	strb	r3, [r2, #0]
 802410a:	462b      	mov	r3, r5
 802410c:	461d      	mov	r5, r3
 802410e:	3b01      	subs	r3, #1
 8024110:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8024114:	2a39      	cmp	r2, #57	; 0x39
 8024116:	d050      	beq.n	80241ba <_dtoa_r+0xb72>
 8024118:	3201      	adds	r2, #1
 802411a:	701a      	strb	r2, [r3, #0]
 802411c:	e745      	b.n	8023faa <_dtoa_r+0x962>
 802411e:	2a00      	cmp	r2, #0
 8024120:	dd03      	ble.n	802412a <_dtoa_r+0xae2>
 8024122:	2b39      	cmp	r3, #57	; 0x39
 8024124:	d0ee      	beq.n	8024104 <_dtoa_r+0xabc>
 8024126:	3301      	adds	r3, #1
 8024128:	e7c7      	b.n	80240ba <_dtoa_r+0xa72>
 802412a:	9a01      	ldr	r2, [sp, #4]
 802412c:	9907      	ldr	r1, [sp, #28]
 802412e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8024132:	428a      	cmp	r2, r1
 8024134:	d02a      	beq.n	802418c <_dtoa_r+0xb44>
 8024136:	4659      	mov	r1, fp
 8024138:	2300      	movs	r3, #0
 802413a:	220a      	movs	r2, #10
 802413c:	4620      	mov	r0, r4
 802413e:	f000 fb01 	bl	8024744 <__multadd>
 8024142:	45b8      	cmp	r8, r7
 8024144:	4683      	mov	fp, r0
 8024146:	f04f 0300 	mov.w	r3, #0
 802414a:	f04f 020a 	mov.w	r2, #10
 802414e:	4641      	mov	r1, r8
 8024150:	4620      	mov	r0, r4
 8024152:	d107      	bne.n	8024164 <_dtoa_r+0xb1c>
 8024154:	f000 faf6 	bl	8024744 <__multadd>
 8024158:	4680      	mov	r8, r0
 802415a:	4607      	mov	r7, r0
 802415c:	9b01      	ldr	r3, [sp, #4]
 802415e:	3301      	adds	r3, #1
 8024160:	9301      	str	r3, [sp, #4]
 8024162:	e775      	b.n	8024050 <_dtoa_r+0xa08>
 8024164:	f000 faee 	bl	8024744 <__multadd>
 8024168:	4639      	mov	r1, r7
 802416a:	4680      	mov	r8, r0
 802416c:	2300      	movs	r3, #0
 802416e:	220a      	movs	r2, #10
 8024170:	4620      	mov	r0, r4
 8024172:	f000 fae7 	bl	8024744 <__multadd>
 8024176:	4607      	mov	r7, r0
 8024178:	e7f0      	b.n	802415c <_dtoa_r+0xb14>
 802417a:	f1b9 0f00 	cmp.w	r9, #0
 802417e:	9a00      	ldr	r2, [sp, #0]
 8024180:	bfcc      	ite	gt
 8024182:	464d      	movgt	r5, r9
 8024184:	2501      	movle	r5, #1
 8024186:	4415      	add	r5, r2
 8024188:	f04f 0800 	mov.w	r8, #0
 802418c:	4659      	mov	r1, fp
 802418e:	2201      	movs	r2, #1
 8024190:	4620      	mov	r0, r4
 8024192:	9301      	str	r3, [sp, #4]
 8024194:	f000 fc86 	bl	8024aa4 <__lshift>
 8024198:	4631      	mov	r1, r6
 802419a:	4683      	mov	fp, r0
 802419c:	f000 fcee 	bl	8024b7c <__mcmp>
 80241a0:	2800      	cmp	r0, #0
 80241a2:	dcb2      	bgt.n	802410a <_dtoa_r+0xac2>
 80241a4:	d102      	bne.n	80241ac <_dtoa_r+0xb64>
 80241a6:	9b01      	ldr	r3, [sp, #4]
 80241a8:	07db      	lsls	r3, r3, #31
 80241aa:	d4ae      	bmi.n	802410a <_dtoa_r+0xac2>
 80241ac:	462b      	mov	r3, r5
 80241ae:	461d      	mov	r5, r3
 80241b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80241b4:	2a30      	cmp	r2, #48	; 0x30
 80241b6:	d0fa      	beq.n	80241ae <_dtoa_r+0xb66>
 80241b8:	e6f7      	b.n	8023faa <_dtoa_r+0x962>
 80241ba:	9a00      	ldr	r2, [sp, #0]
 80241bc:	429a      	cmp	r2, r3
 80241be:	d1a5      	bne.n	802410c <_dtoa_r+0xac4>
 80241c0:	f10a 0a01 	add.w	sl, sl, #1
 80241c4:	2331      	movs	r3, #49	; 0x31
 80241c6:	e779      	b.n	80240bc <_dtoa_r+0xa74>
 80241c8:	4b13      	ldr	r3, [pc, #76]	; (8024218 <_dtoa_r+0xbd0>)
 80241ca:	f7ff baaf 	b.w	802372c <_dtoa_r+0xe4>
 80241ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80241d0:	2b00      	cmp	r3, #0
 80241d2:	f47f aa86 	bne.w	80236e2 <_dtoa_r+0x9a>
 80241d6:	4b11      	ldr	r3, [pc, #68]	; (802421c <_dtoa_r+0xbd4>)
 80241d8:	f7ff baa8 	b.w	802372c <_dtoa_r+0xe4>
 80241dc:	f1b9 0f00 	cmp.w	r9, #0
 80241e0:	dc03      	bgt.n	80241ea <_dtoa_r+0xba2>
 80241e2:	9b05      	ldr	r3, [sp, #20]
 80241e4:	2b02      	cmp	r3, #2
 80241e6:	f73f aec9 	bgt.w	8023f7c <_dtoa_r+0x934>
 80241ea:	9d00      	ldr	r5, [sp, #0]
 80241ec:	4631      	mov	r1, r6
 80241ee:	4658      	mov	r0, fp
 80241f0:	f7ff f99e 	bl	8023530 <quorem>
 80241f4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80241f8:	f805 3b01 	strb.w	r3, [r5], #1
 80241fc:	9a00      	ldr	r2, [sp, #0]
 80241fe:	1aaa      	subs	r2, r5, r2
 8024200:	4591      	cmp	r9, r2
 8024202:	ddba      	ble.n	802417a <_dtoa_r+0xb32>
 8024204:	4659      	mov	r1, fp
 8024206:	2300      	movs	r3, #0
 8024208:	220a      	movs	r2, #10
 802420a:	4620      	mov	r0, r4
 802420c:	f000 fa9a 	bl	8024744 <__multadd>
 8024210:	4683      	mov	fp, r0
 8024212:	e7eb      	b.n	80241ec <_dtoa_r+0xba4>
 8024214:	08029716 	.word	0x08029716
 8024218:	080251e5 	.word	0x080251e5
 802421c:	08029693 	.word	0x08029693

08024220 <__sflush_r>:
 8024220:	898a      	ldrh	r2, [r1, #12]
 8024222:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024226:	4605      	mov	r5, r0
 8024228:	0710      	lsls	r0, r2, #28
 802422a:	460c      	mov	r4, r1
 802422c:	d458      	bmi.n	80242e0 <__sflush_r+0xc0>
 802422e:	684b      	ldr	r3, [r1, #4]
 8024230:	2b00      	cmp	r3, #0
 8024232:	dc05      	bgt.n	8024240 <__sflush_r+0x20>
 8024234:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8024236:	2b00      	cmp	r3, #0
 8024238:	dc02      	bgt.n	8024240 <__sflush_r+0x20>
 802423a:	2000      	movs	r0, #0
 802423c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024240:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8024242:	2e00      	cmp	r6, #0
 8024244:	d0f9      	beq.n	802423a <__sflush_r+0x1a>
 8024246:	2300      	movs	r3, #0
 8024248:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 802424c:	682f      	ldr	r7, [r5, #0]
 802424e:	602b      	str	r3, [r5, #0]
 8024250:	d032      	beq.n	80242b8 <__sflush_r+0x98>
 8024252:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8024254:	89a3      	ldrh	r3, [r4, #12]
 8024256:	075a      	lsls	r2, r3, #29
 8024258:	d505      	bpl.n	8024266 <__sflush_r+0x46>
 802425a:	6863      	ldr	r3, [r4, #4]
 802425c:	1ac0      	subs	r0, r0, r3
 802425e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8024260:	b10b      	cbz	r3, 8024266 <__sflush_r+0x46>
 8024262:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8024264:	1ac0      	subs	r0, r0, r3
 8024266:	2300      	movs	r3, #0
 8024268:	4602      	mov	r2, r0
 802426a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802426c:	6a21      	ldr	r1, [r4, #32]
 802426e:	4628      	mov	r0, r5
 8024270:	47b0      	blx	r6
 8024272:	1c43      	adds	r3, r0, #1
 8024274:	89a3      	ldrh	r3, [r4, #12]
 8024276:	d106      	bne.n	8024286 <__sflush_r+0x66>
 8024278:	6829      	ldr	r1, [r5, #0]
 802427a:	291d      	cmp	r1, #29
 802427c:	d82c      	bhi.n	80242d8 <__sflush_r+0xb8>
 802427e:	4a2a      	ldr	r2, [pc, #168]	; (8024328 <__sflush_r+0x108>)
 8024280:	40ca      	lsrs	r2, r1
 8024282:	07d6      	lsls	r6, r2, #31
 8024284:	d528      	bpl.n	80242d8 <__sflush_r+0xb8>
 8024286:	2200      	movs	r2, #0
 8024288:	6062      	str	r2, [r4, #4]
 802428a:	04d9      	lsls	r1, r3, #19
 802428c:	6922      	ldr	r2, [r4, #16]
 802428e:	6022      	str	r2, [r4, #0]
 8024290:	d504      	bpl.n	802429c <__sflush_r+0x7c>
 8024292:	1c42      	adds	r2, r0, #1
 8024294:	d101      	bne.n	802429a <__sflush_r+0x7a>
 8024296:	682b      	ldr	r3, [r5, #0]
 8024298:	b903      	cbnz	r3, 802429c <__sflush_r+0x7c>
 802429a:	6560      	str	r0, [r4, #84]	; 0x54
 802429c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802429e:	602f      	str	r7, [r5, #0]
 80242a0:	2900      	cmp	r1, #0
 80242a2:	d0ca      	beq.n	802423a <__sflush_r+0x1a>
 80242a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80242a8:	4299      	cmp	r1, r3
 80242aa:	d002      	beq.n	80242b2 <__sflush_r+0x92>
 80242ac:	4628      	mov	r0, r5
 80242ae:	f7fe f9b5 	bl	802261c <_free_r>
 80242b2:	2000      	movs	r0, #0
 80242b4:	6360      	str	r0, [r4, #52]	; 0x34
 80242b6:	e7c1      	b.n	802423c <__sflush_r+0x1c>
 80242b8:	6a21      	ldr	r1, [r4, #32]
 80242ba:	2301      	movs	r3, #1
 80242bc:	4628      	mov	r0, r5
 80242be:	47b0      	blx	r6
 80242c0:	1c41      	adds	r1, r0, #1
 80242c2:	d1c7      	bne.n	8024254 <__sflush_r+0x34>
 80242c4:	682b      	ldr	r3, [r5, #0]
 80242c6:	2b00      	cmp	r3, #0
 80242c8:	d0c4      	beq.n	8024254 <__sflush_r+0x34>
 80242ca:	2b1d      	cmp	r3, #29
 80242cc:	d001      	beq.n	80242d2 <__sflush_r+0xb2>
 80242ce:	2b16      	cmp	r3, #22
 80242d0:	d101      	bne.n	80242d6 <__sflush_r+0xb6>
 80242d2:	602f      	str	r7, [r5, #0]
 80242d4:	e7b1      	b.n	802423a <__sflush_r+0x1a>
 80242d6:	89a3      	ldrh	r3, [r4, #12]
 80242d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80242dc:	81a3      	strh	r3, [r4, #12]
 80242de:	e7ad      	b.n	802423c <__sflush_r+0x1c>
 80242e0:	690f      	ldr	r7, [r1, #16]
 80242e2:	2f00      	cmp	r7, #0
 80242e4:	d0a9      	beq.n	802423a <__sflush_r+0x1a>
 80242e6:	0793      	lsls	r3, r2, #30
 80242e8:	680e      	ldr	r6, [r1, #0]
 80242ea:	bf08      	it	eq
 80242ec:	694b      	ldreq	r3, [r1, #20]
 80242ee:	600f      	str	r7, [r1, #0]
 80242f0:	bf18      	it	ne
 80242f2:	2300      	movne	r3, #0
 80242f4:	eba6 0807 	sub.w	r8, r6, r7
 80242f8:	608b      	str	r3, [r1, #8]
 80242fa:	f1b8 0f00 	cmp.w	r8, #0
 80242fe:	dd9c      	ble.n	802423a <__sflush_r+0x1a>
 8024300:	6a21      	ldr	r1, [r4, #32]
 8024302:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8024304:	4643      	mov	r3, r8
 8024306:	463a      	mov	r2, r7
 8024308:	4628      	mov	r0, r5
 802430a:	47b0      	blx	r6
 802430c:	2800      	cmp	r0, #0
 802430e:	dc06      	bgt.n	802431e <__sflush_r+0xfe>
 8024310:	89a3      	ldrh	r3, [r4, #12]
 8024312:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8024316:	81a3      	strh	r3, [r4, #12]
 8024318:	f04f 30ff 	mov.w	r0, #4294967295
 802431c:	e78e      	b.n	802423c <__sflush_r+0x1c>
 802431e:	4407      	add	r7, r0
 8024320:	eba8 0800 	sub.w	r8, r8, r0
 8024324:	e7e9      	b.n	80242fa <__sflush_r+0xda>
 8024326:	bf00      	nop
 8024328:	20400001 	.word	0x20400001

0802432c <_fflush_r>:
 802432c:	b538      	push	{r3, r4, r5, lr}
 802432e:	690b      	ldr	r3, [r1, #16]
 8024330:	4605      	mov	r5, r0
 8024332:	460c      	mov	r4, r1
 8024334:	b913      	cbnz	r3, 802433c <_fflush_r+0x10>
 8024336:	2500      	movs	r5, #0
 8024338:	4628      	mov	r0, r5
 802433a:	bd38      	pop	{r3, r4, r5, pc}
 802433c:	b118      	cbz	r0, 8024346 <_fflush_r+0x1a>
 802433e:	6983      	ldr	r3, [r0, #24]
 8024340:	b90b      	cbnz	r3, 8024346 <_fflush_r+0x1a>
 8024342:	f000 f887 	bl	8024454 <__sinit>
 8024346:	4b14      	ldr	r3, [pc, #80]	; (8024398 <_fflush_r+0x6c>)
 8024348:	429c      	cmp	r4, r3
 802434a:	d11b      	bne.n	8024384 <_fflush_r+0x58>
 802434c:	686c      	ldr	r4, [r5, #4]
 802434e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8024352:	2b00      	cmp	r3, #0
 8024354:	d0ef      	beq.n	8024336 <_fflush_r+0xa>
 8024356:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8024358:	07d0      	lsls	r0, r2, #31
 802435a:	d404      	bmi.n	8024366 <_fflush_r+0x3a>
 802435c:	0599      	lsls	r1, r3, #22
 802435e:	d402      	bmi.n	8024366 <_fflush_r+0x3a>
 8024360:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8024362:	f000 f91a 	bl	802459a <__retarget_lock_acquire_recursive>
 8024366:	4628      	mov	r0, r5
 8024368:	4621      	mov	r1, r4
 802436a:	f7ff ff59 	bl	8024220 <__sflush_r>
 802436e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8024370:	07da      	lsls	r2, r3, #31
 8024372:	4605      	mov	r5, r0
 8024374:	d4e0      	bmi.n	8024338 <_fflush_r+0xc>
 8024376:	89a3      	ldrh	r3, [r4, #12]
 8024378:	059b      	lsls	r3, r3, #22
 802437a:	d4dd      	bmi.n	8024338 <_fflush_r+0xc>
 802437c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802437e:	f000 f90d 	bl	802459c <__retarget_lock_release_recursive>
 8024382:	e7d9      	b.n	8024338 <_fflush_r+0xc>
 8024384:	4b05      	ldr	r3, [pc, #20]	; (802439c <_fflush_r+0x70>)
 8024386:	429c      	cmp	r4, r3
 8024388:	d101      	bne.n	802438e <_fflush_r+0x62>
 802438a:	68ac      	ldr	r4, [r5, #8]
 802438c:	e7df      	b.n	802434e <_fflush_r+0x22>
 802438e:	4b04      	ldr	r3, [pc, #16]	; (80243a0 <_fflush_r+0x74>)
 8024390:	429c      	cmp	r4, r3
 8024392:	bf08      	it	eq
 8024394:	68ec      	ldreq	r4, [r5, #12]
 8024396:	e7da      	b.n	802434e <_fflush_r+0x22>
 8024398:	08029748 	.word	0x08029748
 802439c:	08029768 	.word	0x08029768
 80243a0:	08029728 	.word	0x08029728

080243a4 <std>:
 80243a4:	2300      	movs	r3, #0
 80243a6:	b510      	push	{r4, lr}
 80243a8:	4604      	mov	r4, r0
 80243aa:	e9c0 3300 	strd	r3, r3, [r0]
 80243ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80243b2:	6083      	str	r3, [r0, #8]
 80243b4:	8181      	strh	r1, [r0, #12]
 80243b6:	6643      	str	r3, [r0, #100]	; 0x64
 80243b8:	81c2      	strh	r2, [r0, #14]
 80243ba:	6183      	str	r3, [r0, #24]
 80243bc:	4619      	mov	r1, r3
 80243be:	2208      	movs	r2, #8
 80243c0:	305c      	adds	r0, #92	; 0x5c
 80243c2:	f7fe f923 	bl	802260c <memset>
 80243c6:	4b05      	ldr	r3, [pc, #20]	; (80243dc <std+0x38>)
 80243c8:	6263      	str	r3, [r4, #36]	; 0x24
 80243ca:	4b05      	ldr	r3, [pc, #20]	; (80243e0 <std+0x3c>)
 80243cc:	62a3      	str	r3, [r4, #40]	; 0x28
 80243ce:	4b05      	ldr	r3, [pc, #20]	; (80243e4 <std+0x40>)
 80243d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80243d2:	4b05      	ldr	r3, [pc, #20]	; (80243e8 <std+0x44>)
 80243d4:	6224      	str	r4, [r4, #32]
 80243d6:	6323      	str	r3, [r4, #48]	; 0x30
 80243d8:	bd10      	pop	{r4, pc}
 80243da:	bf00      	nop
 80243dc:	08024d9b 	.word	0x08024d9b
 80243e0:	08024dbd 	.word	0x08024dbd
 80243e4:	08024df5 	.word	0x08024df5
 80243e8:	08024e19 	.word	0x08024e19

080243ec <_cleanup_r>:
 80243ec:	4901      	ldr	r1, [pc, #4]	; (80243f4 <_cleanup_r+0x8>)
 80243ee:	f000 b8af 	b.w	8024550 <_fwalk_reent>
 80243f2:	bf00      	nop
 80243f4:	0802432d 	.word	0x0802432d

080243f8 <__sfmoreglue>:
 80243f8:	b570      	push	{r4, r5, r6, lr}
 80243fa:	1e4a      	subs	r2, r1, #1
 80243fc:	2568      	movs	r5, #104	; 0x68
 80243fe:	4355      	muls	r5, r2
 8024400:	460e      	mov	r6, r1
 8024402:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8024406:	f7fe f959 	bl	80226bc <_malloc_r>
 802440a:	4604      	mov	r4, r0
 802440c:	b140      	cbz	r0, 8024420 <__sfmoreglue+0x28>
 802440e:	2100      	movs	r1, #0
 8024410:	e9c0 1600 	strd	r1, r6, [r0]
 8024414:	300c      	adds	r0, #12
 8024416:	60a0      	str	r0, [r4, #8]
 8024418:	f105 0268 	add.w	r2, r5, #104	; 0x68
 802441c:	f7fe f8f6 	bl	802260c <memset>
 8024420:	4620      	mov	r0, r4
 8024422:	bd70      	pop	{r4, r5, r6, pc}

08024424 <__sfp_lock_acquire>:
 8024424:	4801      	ldr	r0, [pc, #4]	; (802442c <__sfp_lock_acquire+0x8>)
 8024426:	f000 b8b8 	b.w	802459a <__retarget_lock_acquire_recursive>
 802442a:	bf00      	nop
 802442c:	2000af90 	.word	0x2000af90

08024430 <__sfp_lock_release>:
 8024430:	4801      	ldr	r0, [pc, #4]	; (8024438 <__sfp_lock_release+0x8>)
 8024432:	f000 b8b3 	b.w	802459c <__retarget_lock_release_recursive>
 8024436:	bf00      	nop
 8024438:	2000af90 	.word	0x2000af90

0802443c <__sinit_lock_acquire>:
 802443c:	4801      	ldr	r0, [pc, #4]	; (8024444 <__sinit_lock_acquire+0x8>)
 802443e:	f000 b8ac 	b.w	802459a <__retarget_lock_acquire_recursive>
 8024442:	bf00      	nop
 8024444:	2000af8b 	.word	0x2000af8b

08024448 <__sinit_lock_release>:
 8024448:	4801      	ldr	r0, [pc, #4]	; (8024450 <__sinit_lock_release+0x8>)
 802444a:	f000 b8a7 	b.w	802459c <__retarget_lock_release_recursive>
 802444e:	bf00      	nop
 8024450:	2000af8b 	.word	0x2000af8b

08024454 <__sinit>:
 8024454:	b510      	push	{r4, lr}
 8024456:	4604      	mov	r4, r0
 8024458:	f7ff fff0 	bl	802443c <__sinit_lock_acquire>
 802445c:	69a3      	ldr	r3, [r4, #24]
 802445e:	b11b      	cbz	r3, 8024468 <__sinit+0x14>
 8024460:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024464:	f7ff bff0 	b.w	8024448 <__sinit_lock_release>
 8024468:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 802446c:	6523      	str	r3, [r4, #80]	; 0x50
 802446e:	4b13      	ldr	r3, [pc, #76]	; (80244bc <__sinit+0x68>)
 8024470:	4a13      	ldr	r2, [pc, #76]	; (80244c0 <__sinit+0x6c>)
 8024472:	681b      	ldr	r3, [r3, #0]
 8024474:	62a2      	str	r2, [r4, #40]	; 0x28
 8024476:	42a3      	cmp	r3, r4
 8024478:	bf04      	itt	eq
 802447a:	2301      	moveq	r3, #1
 802447c:	61a3      	streq	r3, [r4, #24]
 802447e:	4620      	mov	r0, r4
 8024480:	f000 f820 	bl	80244c4 <__sfp>
 8024484:	6060      	str	r0, [r4, #4]
 8024486:	4620      	mov	r0, r4
 8024488:	f000 f81c 	bl	80244c4 <__sfp>
 802448c:	60a0      	str	r0, [r4, #8]
 802448e:	4620      	mov	r0, r4
 8024490:	f000 f818 	bl	80244c4 <__sfp>
 8024494:	2200      	movs	r2, #0
 8024496:	60e0      	str	r0, [r4, #12]
 8024498:	2104      	movs	r1, #4
 802449a:	6860      	ldr	r0, [r4, #4]
 802449c:	f7ff ff82 	bl	80243a4 <std>
 80244a0:	68a0      	ldr	r0, [r4, #8]
 80244a2:	2201      	movs	r2, #1
 80244a4:	2109      	movs	r1, #9
 80244a6:	f7ff ff7d 	bl	80243a4 <std>
 80244aa:	68e0      	ldr	r0, [r4, #12]
 80244ac:	2202      	movs	r2, #2
 80244ae:	2112      	movs	r1, #18
 80244b0:	f7ff ff78 	bl	80243a4 <std>
 80244b4:	2301      	movs	r3, #1
 80244b6:	61a3      	str	r3, [r4, #24]
 80244b8:	e7d2      	b.n	8024460 <__sinit+0xc>
 80244ba:	bf00      	nop
 80244bc:	0802964c 	.word	0x0802964c
 80244c0:	080243ed 	.word	0x080243ed

080244c4 <__sfp>:
 80244c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80244c6:	4607      	mov	r7, r0
 80244c8:	f7ff ffac 	bl	8024424 <__sfp_lock_acquire>
 80244cc:	4b1e      	ldr	r3, [pc, #120]	; (8024548 <__sfp+0x84>)
 80244ce:	681e      	ldr	r6, [r3, #0]
 80244d0:	69b3      	ldr	r3, [r6, #24]
 80244d2:	b913      	cbnz	r3, 80244da <__sfp+0x16>
 80244d4:	4630      	mov	r0, r6
 80244d6:	f7ff ffbd 	bl	8024454 <__sinit>
 80244da:	3648      	adds	r6, #72	; 0x48
 80244dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80244e0:	3b01      	subs	r3, #1
 80244e2:	d503      	bpl.n	80244ec <__sfp+0x28>
 80244e4:	6833      	ldr	r3, [r6, #0]
 80244e6:	b30b      	cbz	r3, 802452c <__sfp+0x68>
 80244e8:	6836      	ldr	r6, [r6, #0]
 80244ea:	e7f7      	b.n	80244dc <__sfp+0x18>
 80244ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80244f0:	b9d5      	cbnz	r5, 8024528 <__sfp+0x64>
 80244f2:	4b16      	ldr	r3, [pc, #88]	; (802454c <__sfp+0x88>)
 80244f4:	60e3      	str	r3, [r4, #12]
 80244f6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80244fa:	6665      	str	r5, [r4, #100]	; 0x64
 80244fc:	f000 f84c 	bl	8024598 <__retarget_lock_init_recursive>
 8024500:	f7ff ff96 	bl	8024430 <__sfp_lock_release>
 8024504:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8024508:	e9c4 5504 	strd	r5, r5, [r4, #16]
 802450c:	6025      	str	r5, [r4, #0]
 802450e:	61a5      	str	r5, [r4, #24]
 8024510:	2208      	movs	r2, #8
 8024512:	4629      	mov	r1, r5
 8024514:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8024518:	f7fe f878 	bl	802260c <memset>
 802451c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8024520:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8024524:	4620      	mov	r0, r4
 8024526:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8024528:	3468      	adds	r4, #104	; 0x68
 802452a:	e7d9      	b.n	80244e0 <__sfp+0x1c>
 802452c:	2104      	movs	r1, #4
 802452e:	4638      	mov	r0, r7
 8024530:	f7ff ff62 	bl	80243f8 <__sfmoreglue>
 8024534:	4604      	mov	r4, r0
 8024536:	6030      	str	r0, [r6, #0]
 8024538:	2800      	cmp	r0, #0
 802453a:	d1d5      	bne.n	80244e8 <__sfp+0x24>
 802453c:	f7ff ff78 	bl	8024430 <__sfp_lock_release>
 8024540:	230c      	movs	r3, #12
 8024542:	603b      	str	r3, [r7, #0]
 8024544:	e7ee      	b.n	8024524 <__sfp+0x60>
 8024546:	bf00      	nop
 8024548:	0802964c 	.word	0x0802964c
 802454c:	ffff0001 	.word	0xffff0001

08024550 <_fwalk_reent>:
 8024550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8024554:	4606      	mov	r6, r0
 8024556:	4688      	mov	r8, r1
 8024558:	f100 0448 	add.w	r4, r0, #72	; 0x48
 802455c:	2700      	movs	r7, #0
 802455e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8024562:	f1b9 0901 	subs.w	r9, r9, #1
 8024566:	d505      	bpl.n	8024574 <_fwalk_reent+0x24>
 8024568:	6824      	ldr	r4, [r4, #0]
 802456a:	2c00      	cmp	r4, #0
 802456c:	d1f7      	bne.n	802455e <_fwalk_reent+0xe>
 802456e:	4638      	mov	r0, r7
 8024570:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8024574:	89ab      	ldrh	r3, [r5, #12]
 8024576:	2b01      	cmp	r3, #1
 8024578:	d907      	bls.n	802458a <_fwalk_reent+0x3a>
 802457a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802457e:	3301      	adds	r3, #1
 8024580:	d003      	beq.n	802458a <_fwalk_reent+0x3a>
 8024582:	4629      	mov	r1, r5
 8024584:	4630      	mov	r0, r6
 8024586:	47c0      	blx	r8
 8024588:	4307      	orrs	r7, r0
 802458a:	3568      	adds	r5, #104	; 0x68
 802458c:	e7e9      	b.n	8024562 <_fwalk_reent+0x12>
	...

08024590 <_localeconv_r>:
 8024590:	4800      	ldr	r0, [pc, #0]	; (8024594 <_localeconv_r+0x4>)
 8024592:	4770      	bx	lr
 8024594:	200001cc 	.word	0x200001cc

08024598 <__retarget_lock_init_recursive>:
 8024598:	4770      	bx	lr

0802459a <__retarget_lock_acquire_recursive>:
 802459a:	4770      	bx	lr

0802459c <__retarget_lock_release_recursive>:
 802459c:	4770      	bx	lr

0802459e <__swhatbuf_r>:
 802459e:	b570      	push	{r4, r5, r6, lr}
 80245a0:	460e      	mov	r6, r1
 80245a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80245a6:	2900      	cmp	r1, #0
 80245a8:	b096      	sub	sp, #88	; 0x58
 80245aa:	4614      	mov	r4, r2
 80245ac:	461d      	mov	r5, r3
 80245ae:	da07      	bge.n	80245c0 <__swhatbuf_r+0x22>
 80245b0:	2300      	movs	r3, #0
 80245b2:	602b      	str	r3, [r5, #0]
 80245b4:	89b3      	ldrh	r3, [r6, #12]
 80245b6:	061a      	lsls	r2, r3, #24
 80245b8:	d410      	bmi.n	80245dc <__swhatbuf_r+0x3e>
 80245ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80245be:	e00e      	b.n	80245de <__swhatbuf_r+0x40>
 80245c0:	466a      	mov	r2, sp
 80245c2:	f000 fc4f 	bl	8024e64 <_fstat_r>
 80245c6:	2800      	cmp	r0, #0
 80245c8:	dbf2      	blt.n	80245b0 <__swhatbuf_r+0x12>
 80245ca:	9a01      	ldr	r2, [sp, #4]
 80245cc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80245d0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80245d4:	425a      	negs	r2, r3
 80245d6:	415a      	adcs	r2, r3
 80245d8:	602a      	str	r2, [r5, #0]
 80245da:	e7ee      	b.n	80245ba <__swhatbuf_r+0x1c>
 80245dc:	2340      	movs	r3, #64	; 0x40
 80245de:	2000      	movs	r0, #0
 80245e0:	6023      	str	r3, [r4, #0]
 80245e2:	b016      	add	sp, #88	; 0x58
 80245e4:	bd70      	pop	{r4, r5, r6, pc}
	...

080245e8 <__smakebuf_r>:
 80245e8:	898b      	ldrh	r3, [r1, #12]
 80245ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80245ec:	079d      	lsls	r5, r3, #30
 80245ee:	4606      	mov	r6, r0
 80245f0:	460c      	mov	r4, r1
 80245f2:	d507      	bpl.n	8024604 <__smakebuf_r+0x1c>
 80245f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80245f8:	6023      	str	r3, [r4, #0]
 80245fa:	6123      	str	r3, [r4, #16]
 80245fc:	2301      	movs	r3, #1
 80245fe:	6163      	str	r3, [r4, #20]
 8024600:	b002      	add	sp, #8
 8024602:	bd70      	pop	{r4, r5, r6, pc}
 8024604:	ab01      	add	r3, sp, #4
 8024606:	466a      	mov	r2, sp
 8024608:	f7ff ffc9 	bl	802459e <__swhatbuf_r>
 802460c:	9900      	ldr	r1, [sp, #0]
 802460e:	4605      	mov	r5, r0
 8024610:	4630      	mov	r0, r6
 8024612:	f7fe f853 	bl	80226bc <_malloc_r>
 8024616:	b948      	cbnz	r0, 802462c <__smakebuf_r+0x44>
 8024618:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802461c:	059a      	lsls	r2, r3, #22
 802461e:	d4ef      	bmi.n	8024600 <__smakebuf_r+0x18>
 8024620:	f023 0303 	bic.w	r3, r3, #3
 8024624:	f043 0302 	orr.w	r3, r3, #2
 8024628:	81a3      	strh	r3, [r4, #12]
 802462a:	e7e3      	b.n	80245f4 <__smakebuf_r+0xc>
 802462c:	4b0d      	ldr	r3, [pc, #52]	; (8024664 <__smakebuf_r+0x7c>)
 802462e:	62b3      	str	r3, [r6, #40]	; 0x28
 8024630:	89a3      	ldrh	r3, [r4, #12]
 8024632:	6020      	str	r0, [r4, #0]
 8024634:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8024638:	81a3      	strh	r3, [r4, #12]
 802463a:	9b00      	ldr	r3, [sp, #0]
 802463c:	6163      	str	r3, [r4, #20]
 802463e:	9b01      	ldr	r3, [sp, #4]
 8024640:	6120      	str	r0, [r4, #16]
 8024642:	b15b      	cbz	r3, 802465c <__smakebuf_r+0x74>
 8024644:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8024648:	4630      	mov	r0, r6
 802464a:	f000 fc1d 	bl	8024e88 <_isatty_r>
 802464e:	b128      	cbz	r0, 802465c <__smakebuf_r+0x74>
 8024650:	89a3      	ldrh	r3, [r4, #12]
 8024652:	f023 0303 	bic.w	r3, r3, #3
 8024656:	f043 0301 	orr.w	r3, r3, #1
 802465a:	81a3      	strh	r3, [r4, #12]
 802465c:	89a0      	ldrh	r0, [r4, #12]
 802465e:	4305      	orrs	r5, r0
 8024660:	81a5      	strh	r5, [r4, #12]
 8024662:	e7cd      	b.n	8024600 <__smakebuf_r+0x18>
 8024664:	080243ed 	.word	0x080243ed

08024668 <__malloc_lock>:
 8024668:	4801      	ldr	r0, [pc, #4]	; (8024670 <__malloc_lock+0x8>)
 802466a:	f7ff bf96 	b.w	802459a <__retarget_lock_acquire_recursive>
 802466e:	bf00      	nop
 8024670:	2000af8c 	.word	0x2000af8c

08024674 <__malloc_unlock>:
 8024674:	4801      	ldr	r0, [pc, #4]	; (802467c <__malloc_unlock+0x8>)
 8024676:	f7ff bf91 	b.w	802459c <__retarget_lock_release_recursive>
 802467a:	bf00      	nop
 802467c:	2000af8c 	.word	0x2000af8c

08024680 <_Balloc>:
 8024680:	b570      	push	{r4, r5, r6, lr}
 8024682:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8024684:	4604      	mov	r4, r0
 8024686:	460d      	mov	r5, r1
 8024688:	b976      	cbnz	r6, 80246a8 <_Balloc+0x28>
 802468a:	2010      	movs	r0, #16
 802468c:	f7fd ffa0 	bl	80225d0 <malloc>
 8024690:	4602      	mov	r2, r0
 8024692:	6260      	str	r0, [r4, #36]	; 0x24
 8024694:	b920      	cbnz	r0, 80246a0 <_Balloc+0x20>
 8024696:	4b18      	ldr	r3, [pc, #96]	; (80246f8 <_Balloc+0x78>)
 8024698:	4818      	ldr	r0, [pc, #96]	; (80246fc <_Balloc+0x7c>)
 802469a:	2166      	movs	r1, #102	; 0x66
 802469c:	f7fd ff3e 	bl	802251c <__assert_func>
 80246a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80246a4:	6006      	str	r6, [r0, #0]
 80246a6:	60c6      	str	r6, [r0, #12]
 80246a8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80246aa:	68f3      	ldr	r3, [r6, #12]
 80246ac:	b183      	cbz	r3, 80246d0 <_Balloc+0x50>
 80246ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80246b0:	68db      	ldr	r3, [r3, #12]
 80246b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80246b6:	b9b8      	cbnz	r0, 80246e8 <_Balloc+0x68>
 80246b8:	2101      	movs	r1, #1
 80246ba:	fa01 f605 	lsl.w	r6, r1, r5
 80246be:	1d72      	adds	r2, r6, #5
 80246c0:	0092      	lsls	r2, r2, #2
 80246c2:	4620      	mov	r0, r4
 80246c4:	f000 fb5a 	bl	8024d7c <_calloc_r>
 80246c8:	b160      	cbz	r0, 80246e4 <_Balloc+0x64>
 80246ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80246ce:	e00e      	b.n	80246ee <_Balloc+0x6e>
 80246d0:	2221      	movs	r2, #33	; 0x21
 80246d2:	2104      	movs	r1, #4
 80246d4:	4620      	mov	r0, r4
 80246d6:	f000 fb51 	bl	8024d7c <_calloc_r>
 80246da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80246dc:	60f0      	str	r0, [r6, #12]
 80246de:	68db      	ldr	r3, [r3, #12]
 80246e0:	2b00      	cmp	r3, #0
 80246e2:	d1e4      	bne.n	80246ae <_Balloc+0x2e>
 80246e4:	2000      	movs	r0, #0
 80246e6:	bd70      	pop	{r4, r5, r6, pc}
 80246e8:	6802      	ldr	r2, [r0, #0]
 80246ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80246ee:	2300      	movs	r3, #0
 80246f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80246f4:	e7f7      	b.n	80246e6 <_Balloc+0x66>
 80246f6:	bf00      	nop
 80246f8:	080296a0 	.word	0x080296a0
 80246fc:	08029788 	.word	0x08029788

08024700 <_Bfree>:
 8024700:	b570      	push	{r4, r5, r6, lr}
 8024702:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8024704:	4605      	mov	r5, r0
 8024706:	460c      	mov	r4, r1
 8024708:	b976      	cbnz	r6, 8024728 <_Bfree+0x28>
 802470a:	2010      	movs	r0, #16
 802470c:	f7fd ff60 	bl	80225d0 <malloc>
 8024710:	4602      	mov	r2, r0
 8024712:	6268      	str	r0, [r5, #36]	; 0x24
 8024714:	b920      	cbnz	r0, 8024720 <_Bfree+0x20>
 8024716:	4b09      	ldr	r3, [pc, #36]	; (802473c <_Bfree+0x3c>)
 8024718:	4809      	ldr	r0, [pc, #36]	; (8024740 <_Bfree+0x40>)
 802471a:	218a      	movs	r1, #138	; 0x8a
 802471c:	f7fd fefe 	bl	802251c <__assert_func>
 8024720:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8024724:	6006      	str	r6, [r0, #0]
 8024726:	60c6      	str	r6, [r0, #12]
 8024728:	b13c      	cbz	r4, 802473a <_Bfree+0x3a>
 802472a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 802472c:	6862      	ldr	r2, [r4, #4]
 802472e:	68db      	ldr	r3, [r3, #12]
 8024730:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8024734:	6021      	str	r1, [r4, #0]
 8024736:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 802473a:	bd70      	pop	{r4, r5, r6, pc}
 802473c:	080296a0 	.word	0x080296a0
 8024740:	08029788 	.word	0x08029788

08024744 <__multadd>:
 8024744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024748:	690e      	ldr	r6, [r1, #16]
 802474a:	4607      	mov	r7, r0
 802474c:	4698      	mov	r8, r3
 802474e:	460c      	mov	r4, r1
 8024750:	f101 0014 	add.w	r0, r1, #20
 8024754:	2300      	movs	r3, #0
 8024756:	6805      	ldr	r5, [r0, #0]
 8024758:	b2a9      	uxth	r1, r5
 802475a:	fb02 8101 	mla	r1, r2, r1, r8
 802475e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8024762:	0c2d      	lsrs	r5, r5, #16
 8024764:	fb02 c505 	mla	r5, r2, r5, ip
 8024768:	b289      	uxth	r1, r1
 802476a:	3301      	adds	r3, #1
 802476c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8024770:	429e      	cmp	r6, r3
 8024772:	f840 1b04 	str.w	r1, [r0], #4
 8024776:	ea4f 4815 	mov.w	r8, r5, lsr #16
 802477a:	dcec      	bgt.n	8024756 <__multadd+0x12>
 802477c:	f1b8 0f00 	cmp.w	r8, #0
 8024780:	d022      	beq.n	80247c8 <__multadd+0x84>
 8024782:	68a3      	ldr	r3, [r4, #8]
 8024784:	42b3      	cmp	r3, r6
 8024786:	dc19      	bgt.n	80247bc <__multadd+0x78>
 8024788:	6861      	ldr	r1, [r4, #4]
 802478a:	4638      	mov	r0, r7
 802478c:	3101      	adds	r1, #1
 802478e:	f7ff ff77 	bl	8024680 <_Balloc>
 8024792:	4605      	mov	r5, r0
 8024794:	b928      	cbnz	r0, 80247a2 <__multadd+0x5e>
 8024796:	4602      	mov	r2, r0
 8024798:	4b0d      	ldr	r3, [pc, #52]	; (80247d0 <__multadd+0x8c>)
 802479a:	480e      	ldr	r0, [pc, #56]	; (80247d4 <__multadd+0x90>)
 802479c:	21b5      	movs	r1, #181	; 0xb5
 802479e:	f7fd febd 	bl	802251c <__assert_func>
 80247a2:	6922      	ldr	r2, [r4, #16]
 80247a4:	3202      	adds	r2, #2
 80247a6:	f104 010c 	add.w	r1, r4, #12
 80247aa:	0092      	lsls	r2, r2, #2
 80247ac:	300c      	adds	r0, #12
 80247ae:	f7fd ff1f 	bl	80225f0 <memcpy>
 80247b2:	4621      	mov	r1, r4
 80247b4:	4638      	mov	r0, r7
 80247b6:	f7ff ffa3 	bl	8024700 <_Bfree>
 80247ba:	462c      	mov	r4, r5
 80247bc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80247c0:	3601      	adds	r6, #1
 80247c2:	f8c3 8014 	str.w	r8, [r3, #20]
 80247c6:	6126      	str	r6, [r4, #16]
 80247c8:	4620      	mov	r0, r4
 80247ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80247ce:	bf00      	nop
 80247d0:	08029716 	.word	0x08029716
 80247d4:	08029788 	.word	0x08029788

080247d8 <__hi0bits>:
 80247d8:	0c03      	lsrs	r3, r0, #16
 80247da:	041b      	lsls	r3, r3, #16
 80247dc:	b9d3      	cbnz	r3, 8024814 <__hi0bits+0x3c>
 80247de:	0400      	lsls	r0, r0, #16
 80247e0:	2310      	movs	r3, #16
 80247e2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80247e6:	bf04      	itt	eq
 80247e8:	0200      	lsleq	r0, r0, #8
 80247ea:	3308      	addeq	r3, #8
 80247ec:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80247f0:	bf04      	itt	eq
 80247f2:	0100      	lsleq	r0, r0, #4
 80247f4:	3304      	addeq	r3, #4
 80247f6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80247fa:	bf04      	itt	eq
 80247fc:	0080      	lsleq	r0, r0, #2
 80247fe:	3302      	addeq	r3, #2
 8024800:	2800      	cmp	r0, #0
 8024802:	db05      	blt.n	8024810 <__hi0bits+0x38>
 8024804:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8024808:	f103 0301 	add.w	r3, r3, #1
 802480c:	bf08      	it	eq
 802480e:	2320      	moveq	r3, #32
 8024810:	4618      	mov	r0, r3
 8024812:	4770      	bx	lr
 8024814:	2300      	movs	r3, #0
 8024816:	e7e4      	b.n	80247e2 <__hi0bits+0xa>

08024818 <__lo0bits>:
 8024818:	6803      	ldr	r3, [r0, #0]
 802481a:	f013 0207 	ands.w	r2, r3, #7
 802481e:	4601      	mov	r1, r0
 8024820:	d00b      	beq.n	802483a <__lo0bits+0x22>
 8024822:	07da      	lsls	r2, r3, #31
 8024824:	d424      	bmi.n	8024870 <__lo0bits+0x58>
 8024826:	0798      	lsls	r0, r3, #30
 8024828:	bf49      	itett	mi
 802482a:	085b      	lsrmi	r3, r3, #1
 802482c:	089b      	lsrpl	r3, r3, #2
 802482e:	2001      	movmi	r0, #1
 8024830:	600b      	strmi	r3, [r1, #0]
 8024832:	bf5c      	itt	pl
 8024834:	600b      	strpl	r3, [r1, #0]
 8024836:	2002      	movpl	r0, #2
 8024838:	4770      	bx	lr
 802483a:	b298      	uxth	r0, r3
 802483c:	b9b0      	cbnz	r0, 802486c <__lo0bits+0x54>
 802483e:	0c1b      	lsrs	r3, r3, #16
 8024840:	2010      	movs	r0, #16
 8024842:	f013 0fff 	tst.w	r3, #255	; 0xff
 8024846:	bf04      	itt	eq
 8024848:	0a1b      	lsreq	r3, r3, #8
 802484a:	3008      	addeq	r0, #8
 802484c:	071a      	lsls	r2, r3, #28
 802484e:	bf04      	itt	eq
 8024850:	091b      	lsreq	r3, r3, #4
 8024852:	3004      	addeq	r0, #4
 8024854:	079a      	lsls	r2, r3, #30
 8024856:	bf04      	itt	eq
 8024858:	089b      	lsreq	r3, r3, #2
 802485a:	3002      	addeq	r0, #2
 802485c:	07da      	lsls	r2, r3, #31
 802485e:	d403      	bmi.n	8024868 <__lo0bits+0x50>
 8024860:	085b      	lsrs	r3, r3, #1
 8024862:	f100 0001 	add.w	r0, r0, #1
 8024866:	d005      	beq.n	8024874 <__lo0bits+0x5c>
 8024868:	600b      	str	r3, [r1, #0]
 802486a:	4770      	bx	lr
 802486c:	4610      	mov	r0, r2
 802486e:	e7e8      	b.n	8024842 <__lo0bits+0x2a>
 8024870:	2000      	movs	r0, #0
 8024872:	4770      	bx	lr
 8024874:	2020      	movs	r0, #32
 8024876:	4770      	bx	lr

08024878 <__i2b>:
 8024878:	b510      	push	{r4, lr}
 802487a:	460c      	mov	r4, r1
 802487c:	2101      	movs	r1, #1
 802487e:	f7ff feff 	bl	8024680 <_Balloc>
 8024882:	4602      	mov	r2, r0
 8024884:	b928      	cbnz	r0, 8024892 <__i2b+0x1a>
 8024886:	4b05      	ldr	r3, [pc, #20]	; (802489c <__i2b+0x24>)
 8024888:	4805      	ldr	r0, [pc, #20]	; (80248a0 <__i2b+0x28>)
 802488a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 802488e:	f7fd fe45 	bl	802251c <__assert_func>
 8024892:	2301      	movs	r3, #1
 8024894:	6144      	str	r4, [r0, #20]
 8024896:	6103      	str	r3, [r0, #16]
 8024898:	bd10      	pop	{r4, pc}
 802489a:	bf00      	nop
 802489c:	08029716 	.word	0x08029716
 80248a0:	08029788 	.word	0x08029788

080248a4 <__multiply>:
 80248a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80248a8:	4614      	mov	r4, r2
 80248aa:	690a      	ldr	r2, [r1, #16]
 80248ac:	6923      	ldr	r3, [r4, #16]
 80248ae:	429a      	cmp	r2, r3
 80248b0:	bfb8      	it	lt
 80248b2:	460b      	movlt	r3, r1
 80248b4:	460d      	mov	r5, r1
 80248b6:	bfbc      	itt	lt
 80248b8:	4625      	movlt	r5, r4
 80248ba:	461c      	movlt	r4, r3
 80248bc:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80248c0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80248c4:	68ab      	ldr	r3, [r5, #8]
 80248c6:	6869      	ldr	r1, [r5, #4]
 80248c8:	eb0a 0709 	add.w	r7, sl, r9
 80248cc:	42bb      	cmp	r3, r7
 80248ce:	b085      	sub	sp, #20
 80248d0:	bfb8      	it	lt
 80248d2:	3101      	addlt	r1, #1
 80248d4:	f7ff fed4 	bl	8024680 <_Balloc>
 80248d8:	b930      	cbnz	r0, 80248e8 <__multiply+0x44>
 80248da:	4602      	mov	r2, r0
 80248dc:	4b42      	ldr	r3, [pc, #264]	; (80249e8 <__multiply+0x144>)
 80248de:	4843      	ldr	r0, [pc, #268]	; (80249ec <__multiply+0x148>)
 80248e0:	f240 115d 	movw	r1, #349	; 0x15d
 80248e4:	f7fd fe1a 	bl	802251c <__assert_func>
 80248e8:	f100 0614 	add.w	r6, r0, #20
 80248ec:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80248f0:	4633      	mov	r3, r6
 80248f2:	2200      	movs	r2, #0
 80248f4:	4543      	cmp	r3, r8
 80248f6:	d31e      	bcc.n	8024936 <__multiply+0x92>
 80248f8:	f105 0c14 	add.w	ip, r5, #20
 80248fc:	f104 0314 	add.w	r3, r4, #20
 8024900:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8024904:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8024908:	9202      	str	r2, [sp, #8]
 802490a:	ebac 0205 	sub.w	r2, ip, r5
 802490e:	3a15      	subs	r2, #21
 8024910:	f022 0203 	bic.w	r2, r2, #3
 8024914:	3204      	adds	r2, #4
 8024916:	f105 0115 	add.w	r1, r5, #21
 802491a:	458c      	cmp	ip, r1
 802491c:	bf38      	it	cc
 802491e:	2204      	movcc	r2, #4
 8024920:	9201      	str	r2, [sp, #4]
 8024922:	9a02      	ldr	r2, [sp, #8]
 8024924:	9303      	str	r3, [sp, #12]
 8024926:	429a      	cmp	r2, r3
 8024928:	d808      	bhi.n	802493c <__multiply+0x98>
 802492a:	2f00      	cmp	r7, #0
 802492c:	dc55      	bgt.n	80249da <__multiply+0x136>
 802492e:	6107      	str	r7, [r0, #16]
 8024930:	b005      	add	sp, #20
 8024932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024936:	f843 2b04 	str.w	r2, [r3], #4
 802493a:	e7db      	b.n	80248f4 <__multiply+0x50>
 802493c:	f8b3 a000 	ldrh.w	sl, [r3]
 8024940:	f1ba 0f00 	cmp.w	sl, #0
 8024944:	d020      	beq.n	8024988 <__multiply+0xe4>
 8024946:	f105 0e14 	add.w	lr, r5, #20
 802494a:	46b1      	mov	r9, r6
 802494c:	2200      	movs	r2, #0
 802494e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8024952:	f8d9 b000 	ldr.w	fp, [r9]
 8024956:	b2a1      	uxth	r1, r4
 8024958:	fa1f fb8b 	uxth.w	fp, fp
 802495c:	fb0a b101 	mla	r1, sl, r1, fp
 8024960:	4411      	add	r1, r2
 8024962:	f8d9 2000 	ldr.w	r2, [r9]
 8024966:	0c24      	lsrs	r4, r4, #16
 8024968:	0c12      	lsrs	r2, r2, #16
 802496a:	fb0a 2404 	mla	r4, sl, r4, r2
 802496e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8024972:	b289      	uxth	r1, r1
 8024974:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8024978:	45f4      	cmp	ip, lr
 802497a:	f849 1b04 	str.w	r1, [r9], #4
 802497e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8024982:	d8e4      	bhi.n	802494e <__multiply+0xaa>
 8024984:	9901      	ldr	r1, [sp, #4]
 8024986:	5072      	str	r2, [r6, r1]
 8024988:	9a03      	ldr	r2, [sp, #12]
 802498a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 802498e:	3304      	adds	r3, #4
 8024990:	f1b9 0f00 	cmp.w	r9, #0
 8024994:	d01f      	beq.n	80249d6 <__multiply+0x132>
 8024996:	6834      	ldr	r4, [r6, #0]
 8024998:	f105 0114 	add.w	r1, r5, #20
 802499c:	46b6      	mov	lr, r6
 802499e:	f04f 0a00 	mov.w	sl, #0
 80249a2:	880a      	ldrh	r2, [r1, #0]
 80249a4:	f8be b002 	ldrh.w	fp, [lr, #2]
 80249a8:	fb09 b202 	mla	r2, r9, r2, fp
 80249ac:	4492      	add	sl, r2
 80249ae:	b2a4      	uxth	r4, r4
 80249b0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80249b4:	f84e 4b04 	str.w	r4, [lr], #4
 80249b8:	f851 4b04 	ldr.w	r4, [r1], #4
 80249bc:	f8be 2000 	ldrh.w	r2, [lr]
 80249c0:	0c24      	lsrs	r4, r4, #16
 80249c2:	fb09 2404 	mla	r4, r9, r4, r2
 80249c6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80249ca:	458c      	cmp	ip, r1
 80249cc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80249d0:	d8e7      	bhi.n	80249a2 <__multiply+0xfe>
 80249d2:	9a01      	ldr	r2, [sp, #4]
 80249d4:	50b4      	str	r4, [r6, r2]
 80249d6:	3604      	adds	r6, #4
 80249d8:	e7a3      	b.n	8024922 <__multiply+0x7e>
 80249da:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80249de:	2b00      	cmp	r3, #0
 80249e0:	d1a5      	bne.n	802492e <__multiply+0x8a>
 80249e2:	3f01      	subs	r7, #1
 80249e4:	e7a1      	b.n	802492a <__multiply+0x86>
 80249e6:	bf00      	nop
 80249e8:	08029716 	.word	0x08029716
 80249ec:	08029788 	.word	0x08029788

080249f0 <__pow5mult>:
 80249f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80249f4:	4615      	mov	r5, r2
 80249f6:	f012 0203 	ands.w	r2, r2, #3
 80249fa:	4606      	mov	r6, r0
 80249fc:	460f      	mov	r7, r1
 80249fe:	d007      	beq.n	8024a10 <__pow5mult+0x20>
 8024a00:	4c25      	ldr	r4, [pc, #148]	; (8024a98 <__pow5mult+0xa8>)
 8024a02:	3a01      	subs	r2, #1
 8024a04:	2300      	movs	r3, #0
 8024a06:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8024a0a:	f7ff fe9b 	bl	8024744 <__multadd>
 8024a0e:	4607      	mov	r7, r0
 8024a10:	10ad      	asrs	r5, r5, #2
 8024a12:	d03d      	beq.n	8024a90 <__pow5mult+0xa0>
 8024a14:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8024a16:	b97c      	cbnz	r4, 8024a38 <__pow5mult+0x48>
 8024a18:	2010      	movs	r0, #16
 8024a1a:	f7fd fdd9 	bl	80225d0 <malloc>
 8024a1e:	4602      	mov	r2, r0
 8024a20:	6270      	str	r0, [r6, #36]	; 0x24
 8024a22:	b928      	cbnz	r0, 8024a30 <__pow5mult+0x40>
 8024a24:	4b1d      	ldr	r3, [pc, #116]	; (8024a9c <__pow5mult+0xac>)
 8024a26:	481e      	ldr	r0, [pc, #120]	; (8024aa0 <__pow5mult+0xb0>)
 8024a28:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8024a2c:	f7fd fd76 	bl	802251c <__assert_func>
 8024a30:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8024a34:	6004      	str	r4, [r0, #0]
 8024a36:	60c4      	str	r4, [r0, #12]
 8024a38:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8024a3c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8024a40:	b94c      	cbnz	r4, 8024a56 <__pow5mult+0x66>
 8024a42:	f240 2171 	movw	r1, #625	; 0x271
 8024a46:	4630      	mov	r0, r6
 8024a48:	f7ff ff16 	bl	8024878 <__i2b>
 8024a4c:	2300      	movs	r3, #0
 8024a4e:	f8c8 0008 	str.w	r0, [r8, #8]
 8024a52:	4604      	mov	r4, r0
 8024a54:	6003      	str	r3, [r0, #0]
 8024a56:	f04f 0900 	mov.w	r9, #0
 8024a5a:	07eb      	lsls	r3, r5, #31
 8024a5c:	d50a      	bpl.n	8024a74 <__pow5mult+0x84>
 8024a5e:	4639      	mov	r1, r7
 8024a60:	4622      	mov	r2, r4
 8024a62:	4630      	mov	r0, r6
 8024a64:	f7ff ff1e 	bl	80248a4 <__multiply>
 8024a68:	4639      	mov	r1, r7
 8024a6a:	4680      	mov	r8, r0
 8024a6c:	4630      	mov	r0, r6
 8024a6e:	f7ff fe47 	bl	8024700 <_Bfree>
 8024a72:	4647      	mov	r7, r8
 8024a74:	106d      	asrs	r5, r5, #1
 8024a76:	d00b      	beq.n	8024a90 <__pow5mult+0xa0>
 8024a78:	6820      	ldr	r0, [r4, #0]
 8024a7a:	b938      	cbnz	r0, 8024a8c <__pow5mult+0x9c>
 8024a7c:	4622      	mov	r2, r4
 8024a7e:	4621      	mov	r1, r4
 8024a80:	4630      	mov	r0, r6
 8024a82:	f7ff ff0f 	bl	80248a4 <__multiply>
 8024a86:	6020      	str	r0, [r4, #0]
 8024a88:	f8c0 9000 	str.w	r9, [r0]
 8024a8c:	4604      	mov	r4, r0
 8024a8e:	e7e4      	b.n	8024a5a <__pow5mult+0x6a>
 8024a90:	4638      	mov	r0, r7
 8024a92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8024a96:	bf00      	nop
 8024a98:	080298d8 	.word	0x080298d8
 8024a9c:	080296a0 	.word	0x080296a0
 8024aa0:	08029788 	.word	0x08029788

08024aa4 <__lshift>:
 8024aa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024aa8:	460c      	mov	r4, r1
 8024aaa:	6849      	ldr	r1, [r1, #4]
 8024aac:	6923      	ldr	r3, [r4, #16]
 8024aae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8024ab2:	68a3      	ldr	r3, [r4, #8]
 8024ab4:	4607      	mov	r7, r0
 8024ab6:	4691      	mov	r9, r2
 8024ab8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8024abc:	f108 0601 	add.w	r6, r8, #1
 8024ac0:	42b3      	cmp	r3, r6
 8024ac2:	db0b      	blt.n	8024adc <__lshift+0x38>
 8024ac4:	4638      	mov	r0, r7
 8024ac6:	f7ff fddb 	bl	8024680 <_Balloc>
 8024aca:	4605      	mov	r5, r0
 8024acc:	b948      	cbnz	r0, 8024ae2 <__lshift+0x3e>
 8024ace:	4602      	mov	r2, r0
 8024ad0:	4b28      	ldr	r3, [pc, #160]	; (8024b74 <__lshift+0xd0>)
 8024ad2:	4829      	ldr	r0, [pc, #164]	; (8024b78 <__lshift+0xd4>)
 8024ad4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8024ad8:	f7fd fd20 	bl	802251c <__assert_func>
 8024adc:	3101      	adds	r1, #1
 8024ade:	005b      	lsls	r3, r3, #1
 8024ae0:	e7ee      	b.n	8024ac0 <__lshift+0x1c>
 8024ae2:	2300      	movs	r3, #0
 8024ae4:	f100 0114 	add.w	r1, r0, #20
 8024ae8:	f100 0210 	add.w	r2, r0, #16
 8024aec:	4618      	mov	r0, r3
 8024aee:	4553      	cmp	r3, sl
 8024af0:	db33      	blt.n	8024b5a <__lshift+0xb6>
 8024af2:	6920      	ldr	r0, [r4, #16]
 8024af4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8024af8:	f104 0314 	add.w	r3, r4, #20
 8024afc:	f019 091f 	ands.w	r9, r9, #31
 8024b00:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8024b04:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8024b08:	d02b      	beq.n	8024b62 <__lshift+0xbe>
 8024b0a:	f1c9 0e20 	rsb	lr, r9, #32
 8024b0e:	468a      	mov	sl, r1
 8024b10:	2200      	movs	r2, #0
 8024b12:	6818      	ldr	r0, [r3, #0]
 8024b14:	fa00 f009 	lsl.w	r0, r0, r9
 8024b18:	4302      	orrs	r2, r0
 8024b1a:	f84a 2b04 	str.w	r2, [sl], #4
 8024b1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8024b22:	459c      	cmp	ip, r3
 8024b24:	fa22 f20e 	lsr.w	r2, r2, lr
 8024b28:	d8f3      	bhi.n	8024b12 <__lshift+0x6e>
 8024b2a:	ebac 0304 	sub.w	r3, ip, r4
 8024b2e:	3b15      	subs	r3, #21
 8024b30:	f023 0303 	bic.w	r3, r3, #3
 8024b34:	3304      	adds	r3, #4
 8024b36:	f104 0015 	add.w	r0, r4, #21
 8024b3a:	4584      	cmp	ip, r0
 8024b3c:	bf38      	it	cc
 8024b3e:	2304      	movcc	r3, #4
 8024b40:	50ca      	str	r2, [r1, r3]
 8024b42:	b10a      	cbz	r2, 8024b48 <__lshift+0xa4>
 8024b44:	f108 0602 	add.w	r6, r8, #2
 8024b48:	3e01      	subs	r6, #1
 8024b4a:	4638      	mov	r0, r7
 8024b4c:	612e      	str	r6, [r5, #16]
 8024b4e:	4621      	mov	r1, r4
 8024b50:	f7ff fdd6 	bl	8024700 <_Bfree>
 8024b54:	4628      	mov	r0, r5
 8024b56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024b5a:	f842 0f04 	str.w	r0, [r2, #4]!
 8024b5e:	3301      	adds	r3, #1
 8024b60:	e7c5      	b.n	8024aee <__lshift+0x4a>
 8024b62:	3904      	subs	r1, #4
 8024b64:	f853 2b04 	ldr.w	r2, [r3], #4
 8024b68:	f841 2f04 	str.w	r2, [r1, #4]!
 8024b6c:	459c      	cmp	ip, r3
 8024b6e:	d8f9      	bhi.n	8024b64 <__lshift+0xc0>
 8024b70:	e7ea      	b.n	8024b48 <__lshift+0xa4>
 8024b72:	bf00      	nop
 8024b74:	08029716 	.word	0x08029716
 8024b78:	08029788 	.word	0x08029788

08024b7c <__mcmp>:
 8024b7c:	b530      	push	{r4, r5, lr}
 8024b7e:	6902      	ldr	r2, [r0, #16]
 8024b80:	690c      	ldr	r4, [r1, #16]
 8024b82:	1b12      	subs	r2, r2, r4
 8024b84:	d10e      	bne.n	8024ba4 <__mcmp+0x28>
 8024b86:	f100 0314 	add.w	r3, r0, #20
 8024b8a:	3114      	adds	r1, #20
 8024b8c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8024b90:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8024b94:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8024b98:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8024b9c:	42a5      	cmp	r5, r4
 8024b9e:	d003      	beq.n	8024ba8 <__mcmp+0x2c>
 8024ba0:	d305      	bcc.n	8024bae <__mcmp+0x32>
 8024ba2:	2201      	movs	r2, #1
 8024ba4:	4610      	mov	r0, r2
 8024ba6:	bd30      	pop	{r4, r5, pc}
 8024ba8:	4283      	cmp	r3, r0
 8024baa:	d3f3      	bcc.n	8024b94 <__mcmp+0x18>
 8024bac:	e7fa      	b.n	8024ba4 <__mcmp+0x28>
 8024bae:	f04f 32ff 	mov.w	r2, #4294967295
 8024bb2:	e7f7      	b.n	8024ba4 <__mcmp+0x28>

08024bb4 <__mdiff>:
 8024bb4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024bb8:	460c      	mov	r4, r1
 8024bba:	4606      	mov	r6, r0
 8024bbc:	4611      	mov	r1, r2
 8024bbe:	4620      	mov	r0, r4
 8024bc0:	4617      	mov	r7, r2
 8024bc2:	f7ff ffdb 	bl	8024b7c <__mcmp>
 8024bc6:	1e05      	subs	r5, r0, #0
 8024bc8:	d110      	bne.n	8024bec <__mdiff+0x38>
 8024bca:	4629      	mov	r1, r5
 8024bcc:	4630      	mov	r0, r6
 8024bce:	f7ff fd57 	bl	8024680 <_Balloc>
 8024bd2:	b930      	cbnz	r0, 8024be2 <__mdiff+0x2e>
 8024bd4:	4b39      	ldr	r3, [pc, #228]	; (8024cbc <__mdiff+0x108>)
 8024bd6:	4602      	mov	r2, r0
 8024bd8:	f240 2132 	movw	r1, #562	; 0x232
 8024bdc:	4838      	ldr	r0, [pc, #224]	; (8024cc0 <__mdiff+0x10c>)
 8024bde:	f7fd fc9d 	bl	802251c <__assert_func>
 8024be2:	2301      	movs	r3, #1
 8024be4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8024be8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024bec:	bfa4      	itt	ge
 8024bee:	463b      	movge	r3, r7
 8024bf0:	4627      	movge	r7, r4
 8024bf2:	4630      	mov	r0, r6
 8024bf4:	6879      	ldr	r1, [r7, #4]
 8024bf6:	bfa6      	itte	ge
 8024bf8:	461c      	movge	r4, r3
 8024bfa:	2500      	movge	r5, #0
 8024bfc:	2501      	movlt	r5, #1
 8024bfe:	f7ff fd3f 	bl	8024680 <_Balloc>
 8024c02:	b920      	cbnz	r0, 8024c0e <__mdiff+0x5a>
 8024c04:	4b2d      	ldr	r3, [pc, #180]	; (8024cbc <__mdiff+0x108>)
 8024c06:	4602      	mov	r2, r0
 8024c08:	f44f 7110 	mov.w	r1, #576	; 0x240
 8024c0c:	e7e6      	b.n	8024bdc <__mdiff+0x28>
 8024c0e:	693e      	ldr	r6, [r7, #16]
 8024c10:	60c5      	str	r5, [r0, #12]
 8024c12:	6925      	ldr	r5, [r4, #16]
 8024c14:	f107 0114 	add.w	r1, r7, #20
 8024c18:	f104 0914 	add.w	r9, r4, #20
 8024c1c:	f100 0e14 	add.w	lr, r0, #20
 8024c20:	f107 0210 	add.w	r2, r7, #16
 8024c24:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8024c28:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8024c2c:	46f2      	mov	sl, lr
 8024c2e:	2700      	movs	r7, #0
 8024c30:	f859 3b04 	ldr.w	r3, [r9], #4
 8024c34:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8024c38:	fa1f f883 	uxth.w	r8, r3
 8024c3c:	fa17 f78b 	uxtah	r7, r7, fp
 8024c40:	0c1b      	lsrs	r3, r3, #16
 8024c42:	eba7 0808 	sub.w	r8, r7, r8
 8024c46:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8024c4a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8024c4e:	fa1f f888 	uxth.w	r8, r8
 8024c52:	141f      	asrs	r7, r3, #16
 8024c54:	454d      	cmp	r5, r9
 8024c56:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8024c5a:	f84a 3b04 	str.w	r3, [sl], #4
 8024c5e:	d8e7      	bhi.n	8024c30 <__mdiff+0x7c>
 8024c60:	1b2b      	subs	r3, r5, r4
 8024c62:	3b15      	subs	r3, #21
 8024c64:	f023 0303 	bic.w	r3, r3, #3
 8024c68:	3304      	adds	r3, #4
 8024c6a:	3415      	adds	r4, #21
 8024c6c:	42a5      	cmp	r5, r4
 8024c6e:	bf38      	it	cc
 8024c70:	2304      	movcc	r3, #4
 8024c72:	4419      	add	r1, r3
 8024c74:	4473      	add	r3, lr
 8024c76:	469e      	mov	lr, r3
 8024c78:	460d      	mov	r5, r1
 8024c7a:	4565      	cmp	r5, ip
 8024c7c:	d30e      	bcc.n	8024c9c <__mdiff+0xe8>
 8024c7e:	f10c 0203 	add.w	r2, ip, #3
 8024c82:	1a52      	subs	r2, r2, r1
 8024c84:	f022 0203 	bic.w	r2, r2, #3
 8024c88:	3903      	subs	r1, #3
 8024c8a:	458c      	cmp	ip, r1
 8024c8c:	bf38      	it	cc
 8024c8e:	2200      	movcc	r2, #0
 8024c90:	441a      	add	r2, r3
 8024c92:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8024c96:	b17b      	cbz	r3, 8024cb8 <__mdiff+0x104>
 8024c98:	6106      	str	r6, [r0, #16]
 8024c9a:	e7a5      	b.n	8024be8 <__mdiff+0x34>
 8024c9c:	f855 8b04 	ldr.w	r8, [r5], #4
 8024ca0:	fa17 f488 	uxtah	r4, r7, r8
 8024ca4:	1422      	asrs	r2, r4, #16
 8024ca6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8024caa:	b2a4      	uxth	r4, r4
 8024cac:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8024cb0:	f84e 4b04 	str.w	r4, [lr], #4
 8024cb4:	1417      	asrs	r7, r2, #16
 8024cb6:	e7e0      	b.n	8024c7a <__mdiff+0xc6>
 8024cb8:	3e01      	subs	r6, #1
 8024cba:	e7ea      	b.n	8024c92 <__mdiff+0xde>
 8024cbc:	08029716 	.word	0x08029716
 8024cc0:	08029788 	.word	0x08029788

08024cc4 <__d2b>:
 8024cc4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8024cc8:	4689      	mov	r9, r1
 8024cca:	2101      	movs	r1, #1
 8024ccc:	ec57 6b10 	vmov	r6, r7, d0
 8024cd0:	4690      	mov	r8, r2
 8024cd2:	f7ff fcd5 	bl	8024680 <_Balloc>
 8024cd6:	4604      	mov	r4, r0
 8024cd8:	b930      	cbnz	r0, 8024ce8 <__d2b+0x24>
 8024cda:	4602      	mov	r2, r0
 8024cdc:	4b25      	ldr	r3, [pc, #148]	; (8024d74 <__d2b+0xb0>)
 8024cde:	4826      	ldr	r0, [pc, #152]	; (8024d78 <__d2b+0xb4>)
 8024ce0:	f240 310a 	movw	r1, #778	; 0x30a
 8024ce4:	f7fd fc1a 	bl	802251c <__assert_func>
 8024ce8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8024cec:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8024cf0:	bb35      	cbnz	r5, 8024d40 <__d2b+0x7c>
 8024cf2:	2e00      	cmp	r6, #0
 8024cf4:	9301      	str	r3, [sp, #4]
 8024cf6:	d028      	beq.n	8024d4a <__d2b+0x86>
 8024cf8:	4668      	mov	r0, sp
 8024cfa:	9600      	str	r6, [sp, #0]
 8024cfc:	f7ff fd8c 	bl	8024818 <__lo0bits>
 8024d00:	9900      	ldr	r1, [sp, #0]
 8024d02:	b300      	cbz	r0, 8024d46 <__d2b+0x82>
 8024d04:	9a01      	ldr	r2, [sp, #4]
 8024d06:	f1c0 0320 	rsb	r3, r0, #32
 8024d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8024d0e:	430b      	orrs	r3, r1
 8024d10:	40c2      	lsrs	r2, r0
 8024d12:	6163      	str	r3, [r4, #20]
 8024d14:	9201      	str	r2, [sp, #4]
 8024d16:	9b01      	ldr	r3, [sp, #4]
 8024d18:	61a3      	str	r3, [r4, #24]
 8024d1a:	2b00      	cmp	r3, #0
 8024d1c:	bf14      	ite	ne
 8024d1e:	2202      	movne	r2, #2
 8024d20:	2201      	moveq	r2, #1
 8024d22:	6122      	str	r2, [r4, #16]
 8024d24:	b1d5      	cbz	r5, 8024d5c <__d2b+0x98>
 8024d26:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8024d2a:	4405      	add	r5, r0
 8024d2c:	f8c9 5000 	str.w	r5, [r9]
 8024d30:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8024d34:	f8c8 0000 	str.w	r0, [r8]
 8024d38:	4620      	mov	r0, r4
 8024d3a:	b003      	add	sp, #12
 8024d3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8024d40:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8024d44:	e7d5      	b.n	8024cf2 <__d2b+0x2e>
 8024d46:	6161      	str	r1, [r4, #20]
 8024d48:	e7e5      	b.n	8024d16 <__d2b+0x52>
 8024d4a:	a801      	add	r0, sp, #4
 8024d4c:	f7ff fd64 	bl	8024818 <__lo0bits>
 8024d50:	9b01      	ldr	r3, [sp, #4]
 8024d52:	6163      	str	r3, [r4, #20]
 8024d54:	2201      	movs	r2, #1
 8024d56:	6122      	str	r2, [r4, #16]
 8024d58:	3020      	adds	r0, #32
 8024d5a:	e7e3      	b.n	8024d24 <__d2b+0x60>
 8024d5c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8024d60:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8024d64:	f8c9 0000 	str.w	r0, [r9]
 8024d68:	6918      	ldr	r0, [r3, #16]
 8024d6a:	f7ff fd35 	bl	80247d8 <__hi0bits>
 8024d6e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8024d72:	e7df      	b.n	8024d34 <__d2b+0x70>
 8024d74:	08029716 	.word	0x08029716
 8024d78:	08029788 	.word	0x08029788

08024d7c <_calloc_r>:
 8024d7c:	b513      	push	{r0, r1, r4, lr}
 8024d7e:	434a      	muls	r2, r1
 8024d80:	4611      	mov	r1, r2
 8024d82:	9201      	str	r2, [sp, #4]
 8024d84:	f7fd fc9a 	bl	80226bc <_malloc_r>
 8024d88:	4604      	mov	r4, r0
 8024d8a:	b118      	cbz	r0, 8024d94 <_calloc_r+0x18>
 8024d8c:	9a01      	ldr	r2, [sp, #4]
 8024d8e:	2100      	movs	r1, #0
 8024d90:	f7fd fc3c 	bl	802260c <memset>
 8024d94:	4620      	mov	r0, r4
 8024d96:	b002      	add	sp, #8
 8024d98:	bd10      	pop	{r4, pc}

08024d9a <__sread>:
 8024d9a:	b510      	push	{r4, lr}
 8024d9c:	460c      	mov	r4, r1
 8024d9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024da2:	f000 f8a5 	bl	8024ef0 <_read_r>
 8024da6:	2800      	cmp	r0, #0
 8024da8:	bfab      	itete	ge
 8024daa:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8024dac:	89a3      	ldrhlt	r3, [r4, #12]
 8024dae:	181b      	addge	r3, r3, r0
 8024db0:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8024db4:	bfac      	ite	ge
 8024db6:	6563      	strge	r3, [r4, #84]	; 0x54
 8024db8:	81a3      	strhlt	r3, [r4, #12]
 8024dba:	bd10      	pop	{r4, pc}

08024dbc <__swrite>:
 8024dbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024dc0:	461f      	mov	r7, r3
 8024dc2:	898b      	ldrh	r3, [r1, #12]
 8024dc4:	05db      	lsls	r3, r3, #23
 8024dc6:	4605      	mov	r5, r0
 8024dc8:	460c      	mov	r4, r1
 8024dca:	4616      	mov	r6, r2
 8024dcc:	d505      	bpl.n	8024dda <__swrite+0x1e>
 8024dce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024dd2:	2302      	movs	r3, #2
 8024dd4:	2200      	movs	r2, #0
 8024dd6:	f000 f867 	bl	8024ea8 <_lseek_r>
 8024dda:	89a3      	ldrh	r3, [r4, #12]
 8024ddc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8024de0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8024de4:	81a3      	strh	r3, [r4, #12]
 8024de6:	4632      	mov	r2, r6
 8024de8:	463b      	mov	r3, r7
 8024dea:	4628      	mov	r0, r5
 8024dec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8024df0:	f000 b816 	b.w	8024e20 <_write_r>

08024df4 <__sseek>:
 8024df4:	b510      	push	{r4, lr}
 8024df6:	460c      	mov	r4, r1
 8024df8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024dfc:	f000 f854 	bl	8024ea8 <_lseek_r>
 8024e00:	1c43      	adds	r3, r0, #1
 8024e02:	89a3      	ldrh	r3, [r4, #12]
 8024e04:	bf15      	itete	ne
 8024e06:	6560      	strne	r0, [r4, #84]	; 0x54
 8024e08:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8024e0c:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8024e10:	81a3      	strheq	r3, [r4, #12]
 8024e12:	bf18      	it	ne
 8024e14:	81a3      	strhne	r3, [r4, #12]
 8024e16:	bd10      	pop	{r4, pc}

08024e18 <__sclose>:
 8024e18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024e1c:	f000 b812 	b.w	8024e44 <_close_r>

08024e20 <_write_r>:
 8024e20:	b538      	push	{r3, r4, r5, lr}
 8024e22:	4d07      	ldr	r5, [pc, #28]	; (8024e40 <_write_r+0x20>)
 8024e24:	4604      	mov	r4, r0
 8024e26:	4608      	mov	r0, r1
 8024e28:	4611      	mov	r1, r2
 8024e2a:	2200      	movs	r2, #0
 8024e2c:	602a      	str	r2, [r5, #0]
 8024e2e:	461a      	mov	r2, r3
 8024e30:	f7dc fe17 	bl	8001a62 <_write>
 8024e34:	1c43      	adds	r3, r0, #1
 8024e36:	d102      	bne.n	8024e3e <_write_r+0x1e>
 8024e38:	682b      	ldr	r3, [r5, #0]
 8024e3a:	b103      	cbz	r3, 8024e3e <_write_r+0x1e>
 8024e3c:	6023      	str	r3, [r4, #0]
 8024e3e:	bd38      	pop	{r3, r4, r5, pc}
 8024e40:	2000af94 	.word	0x2000af94

08024e44 <_close_r>:
 8024e44:	b538      	push	{r3, r4, r5, lr}
 8024e46:	4d06      	ldr	r5, [pc, #24]	; (8024e60 <_close_r+0x1c>)
 8024e48:	2300      	movs	r3, #0
 8024e4a:	4604      	mov	r4, r0
 8024e4c:	4608      	mov	r0, r1
 8024e4e:	602b      	str	r3, [r5, #0]
 8024e50:	f7dc fe14 	bl	8001a7c <_close>
 8024e54:	1c43      	adds	r3, r0, #1
 8024e56:	d102      	bne.n	8024e5e <_close_r+0x1a>
 8024e58:	682b      	ldr	r3, [r5, #0]
 8024e5a:	b103      	cbz	r3, 8024e5e <_close_r+0x1a>
 8024e5c:	6023      	str	r3, [r4, #0]
 8024e5e:	bd38      	pop	{r3, r4, r5, pc}
 8024e60:	2000af94 	.word	0x2000af94

08024e64 <_fstat_r>:
 8024e64:	b538      	push	{r3, r4, r5, lr}
 8024e66:	4d07      	ldr	r5, [pc, #28]	; (8024e84 <_fstat_r+0x20>)
 8024e68:	2300      	movs	r3, #0
 8024e6a:	4604      	mov	r4, r0
 8024e6c:	4608      	mov	r0, r1
 8024e6e:	4611      	mov	r1, r2
 8024e70:	602b      	str	r3, [r5, #0]
 8024e72:	f7dc fe06 	bl	8001a82 <_fstat>
 8024e76:	1c43      	adds	r3, r0, #1
 8024e78:	d102      	bne.n	8024e80 <_fstat_r+0x1c>
 8024e7a:	682b      	ldr	r3, [r5, #0]
 8024e7c:	b103      	cbz	r3, 8024e80 <_fstat_r+0x1c>
 8024e7e:	6023      	str	r3, [r4, #0]
 8024e80:	bd38      	pop	{r3, r4, r5, pc}
 8024e82:	bf00      	nop
 8024e84:	2000af94 	.word	0x2000af94

08024e88 <_isatty_r>:
 8024e88:	b538      	push	{r3, r4, r5, lr}
 8024e8a:	4d06      	ldr	r5, [pc, #24]	; (8024ea4 <_isatty_r+0x1c>)
 8024e8c:	2300      	movs	r3, #0
 8024e8e:	4604      	mov	r4, r0
 8024e90:	4608      	mov	r0, r1
 8024e92:	602b      	str	r3, [r5, #0]
 8024e94:	f7dc fdfa 	bl	8001a8c <_isatty>
 8024e98:	1c43      	adds	r3, r0, #1
 8024e9a:	d102      	bne.n	8024ea2 <_isatty_r+0x1a>
 8024e9c:	682b      	ldr	r3, [r5, #0]
 8024e9e:	b103      	cbz	r3, 8024ea2 <_isatty_r+0x1a>
 8024ea0:	6023      	str	r3, [r4, #0]
 8024ea2:	bd38      	pop	{r3, r4, r5, pc}
 8024ea4:	2000af94 	.word	0x2000af94

08024ea8 <_lseek_r>:
 8024ea8:	b538      	push	{r3, r4, r5, lr}
 8024eaa:	4d07      	ldr	r5, [pc, #28]	; (8024ec8 <_lseek_r+0x20>)
 8024eac:	4604      	mov	r4, r0
 8024eae:	4608      	mov	r0, r1
 8024eb0:	4611      	mov	r1, r2
 8024eb2:	2200      	movs	r2, #0
 8024eb4:	602a      	str	r2, [r5, #0]
 8024eb6:	461a      	mov	r2, r3
 8024eb8:	f7dc fdea 	bl	8001a90 <_lseek>
 8024ebc:	1c43      	adds	r3, r0, #1
 8024ebe:	d102      	bne.n	8024ec6 <_lseek_r+0x1e>
 8024ec0:	682b      	ldr	r3, [r5, #0]
 8024ec2:	b103      	cbz	r3, 8024ec6 <_lseek_r+0x1e>
 8024ec4:	6023      	str	r3, [r4, #0]
 8024ec6:	bd38      	pop	{r3, r4, r5, pc}
 8024ec8:	2000af94 	.word	0x2000af94

08024ecc <__ascii_mbtowc>:
 8024ecc:	b082      	sub	sp, #8
 8024ece:	b901      	cbnz	r1, 8024ed2 <__ascii_mbtowc+0x6>
 8024ed0:	a901      	add	r1, sp, #4
 8024ed2:	b142      	cbz	r2, 8024ee6 <__ascii_mbtowc+0x1a>
 8024ed4:	b14b      	cbz	r3, 8024eea <__ascii_mbtowc+0x1e>
 8024ed6:	7813      	ldrb	r3, [r2, #0]
 8024ed8:	600b      	str	r3, [r1, #0]
 8024eda:	7812      	ldrb	r2, [r2, #0]
 8024edc:	1e10      	subs	r0, r2, #0
 8024ede:	bf18      	it	ne
 8024ee0:	2001      	movne	r0, #1
 8024ee2:	b002      	add	sp, #8
 8024ee4:	4770      	bx	lr
 8024ee6:	4610      	mov	r0, r2
 8024ee8:	e7fb      	b.n	8024ee2 <__ascii_mbtowc+0x16>
 8024eea:	f06f 0001 	mvn.w	r0, #1
 8024eee:	e7f8      	b.n	8024ee2 <__ascii_mbtowc+0x16>

08024ef0 <_read_r>:
 8024ef0:	b538      	push	{r3, r4, r5, lr}
 8024ef2:	4d07      	ldr	r5, [pc, #28]	; (8024f10 <_read_r+0x20>)
 8024ef4:	4604      	mov	r4, r0
 8024ef6:	4608      	mov	r0, r1
 8024ef8:	4611      	mov	r1, r2
 8024efa:	2200      	movs	r2, #0
 8024efc:	602a      	str	r2, [r5, #0]
 8024efe:	461a      	mov	r2, r3
 8024f00:	f7dc fda2 	bl	8001a48 <_read>
 8024f04:	1c43      	adds	r3, r0, #1
 8024f06:	d102      	bne.n	8024f0e <_read_r+0x1e>
 8024f08:	682b      	ldr	r3, [r5, #0]
 8024f0a:	b103      	cbz	r3, 8024f0e <_read_r+0x1e>
 8024f0c:	6023      	str	r3, [r4, #0]
 8024f0e:	bd38      	pop	{r3, r4, r5, pc}
 8024f10:	2000af94 	.word	0x2000af94

08024f14 <__ascii_wctomb>:
 8024f14:	b149      	cbz	r1, 8024f2a <__ascii_wctomb+0x16>
 8024f16:	2aff      	cmp	r2, #255	; 0xff
 8024f18:	bf85      	ittet	hi
 8024f1a:	238a      	movhi	r3, #138	; 0x8a
 8024f1c:	6003      	strhi	r3, [r0, #0]
 8024f1e:	700a      	strbls	r2, [r1, #0]
 8024f20:	f04f 30ff 	movhi.w	r0, #4294967295
 8024f24:	bf98      	it	ls
 8024f26:	2001      	movls	r0, #1
 8024f28:	4770      	bx	lr
 8024f2a:	4608      	mov	r0, r1
 8024f2c:	4770      	bx	lr
	...

08024f30 <_init>:
 8024f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024f32:	bf00      	nop
 8024f34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8024f36:	bc08      	pop	{r3}
 8024f38:	469e      	mov	lr, r3
 8024f3a:	4770      	bx	lr

08024f3c <_fini>:
 8024f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024f3e:	bf00      	nop
 8024f40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8024f42:	bc08      	pop	{r3}
 8024f44:	469e      	mov	lr, r3
 8024f46:	4770      	bx	lr
