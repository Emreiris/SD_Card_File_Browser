
SD_Card_File_System.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009418  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b4  080095e0  080095e0  000195e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a94  08009a94  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08009a94  08009a94  00019a94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009a9c  08009a9c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a9c  08009a9c  00019a9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009aa0  08009aa0  00019aa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08009aa4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000134c  20000078  08009b18  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200013c4  08009b18  000213c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00038605  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005c2d  00000000  00000000  000586a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001238  00000000  00000000  0005e2d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00007148  00000000  00000000  0005f510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00009fd7  00000000  00000000  00066658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003989c  00000000  00000000  0007062f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00102884  00000000  00000000  000a9ecb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001ac74f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004960  00000000  00000000  001ac7a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00038f66  00000000  00000000  001b1104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000078 	.word	0x20000078
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080095c8 	.word	0x080095c8

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	2000007c 	.word	0x2000007c
 8000204:	080095c8 	.word	0x080095c8

08000208 <strlen>:
 8000208:	4603      	mov	r3, r0
 800020a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020e:	2a00      	cmp	r2, #0
 8000210:	d1fb      	bne.n	800020a <strlen+0x2>
 8000212:	1a18      	subs	r0, r3, r0
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96e 	b.w	800050c <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468c      	mov	ip, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	f040 8083 	bne.w	800035e <__udivmoddi4+0x116>
 8000258:	428a      	cmp	r2, r1
 800025a:	4617      	mov	r7, r2
 800025c:	d947      	bls.n	80002ee <__udivmoddi4+0xa6>
 800025e:	fab2 f282 	clz	r2, r2
 8000262:	b142      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000264:	f1c2 0020 	rsb	r0, r2, #32
 8000268:	fa24 f000 	lsr.w	r0, r4, r0
 800026c:	4091      	lsls	r1, r2
 800026e:	4097      	lsls	r7, r2
 8000270:	ea40 0c01 	orr.w	ip, r0, r1
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbbc f6f8 	udiv	r6, ip, r8
 8000280:	fa1f fe87 	uxth.w	lr, r7
 8000284:	fb08 c116 	mls	r1, r8, r6, ip
 8000288:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028c:	fb06 f10e 	mul.w	r1, r6, lr
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18fb      	adds	r3, r7, r3
 8000296:	f106 30ff 	add.w	r0, r6, #4294967295
 800029a:	f080 8119 	bcs.w	80004d0 <__udivmoddi4+0x288>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8116 	bls.w	80004d0 <__udivmoddi4+0x288>
 80002a4:	3e02      	subs	r6, #2
 80002a6:	443b      	add	r3, r7
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b0:	fb08 3310 	mls	r3, r8, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002bc:	45a6      	cmp	lr, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	193c      	adds	r4, r7, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c6:	f080 8105 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 80002ca:	45a6      	cmp	lr, r4
 80002cc:	f240 8102 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002d0:	3802      	subs	r0, #2
 80002d2:	443c      	add	r4, r7
 80002d4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d8:	eba4 040e 	sub.w	r4, r4, lr
 80002dc:	2600      	movs	r6, #0
 80002de:	b11d      	cbz	r5, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c5 4300 	strd	r4, r3, [r5]
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	b902      	cbnz	r2, 80002f2 <__udivmoddi4+0xaa>
 80002f0:	deff      	udf	#255	; 0xff
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	d150      	bne.n	800039c <__udivmoddi4+0x154>
 80002fa:	1bcb      	subs	r3, r1, r7
 80002fc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000300:	fa1f f887 	uxth.w	r8, r7
 8000304:	2601      	movs	r6, #1
 8000306:	fbb3 fcfe 	udiv	ip, r3, lr
 800030a:	0c21      	lsrs	r1, r4, #16
 800030c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000310:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000314:	fb08 f30c 	mul.w	r3, r8, ip
 8000318:	428b      	cmp	r3, r1
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0xe4>
 800031c:	1879      	adds	r1, r7, r1
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0xe2>
 8000324:	428b      	cmp	r3, r1
 8000326:	f200 80e9 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 800032a:	4684      	mov	ip, r0
 800032c:	1ac9      	subs	r1, r1, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1110 	mls	r1, lr, r0, r1
 8000338:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x10c>
 8000344:	193c      	adds	r4, r7, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x10a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80d9 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e7bf      	b.n	80002de <__udivmoddi4+0x96>
 800035e:	428b      	cmp	r3, r1
 8000360:	d909      	bls.n	8000376 <__udivmoddi4+0x12e>
 8000362:	2d00      	cmp	r5, #0
 8000364:	f000 80b1 	beq.w	80004ca <__udivmoddi4+0x282>
 8000368:	2600      	movs	r6, #0
 800036a:	e9c5 0100 	strd	r0, r1, [r5]
 800036e:	4630      	mov	r0, r6
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	fab3 f683 	clz	r6, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d14a      	bne.n	8000414 <__udivmoddi4+0x1cc>
 800037e:	428b      	cmp	r3, r1
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0x140>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 80b8 	bhi.w	80004f8 <__udivmoddi4+0x2b0>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb61 0103 	sbc.w	r1, r1, r3
 800038e:	2001      	movs	r0, #1
 8000390:	468c      	mov	ip, r1
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0a8      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000396:	e9c5 4c00 	strd	r4, ip, [r5]
 800039a:	e7a5      	b.n	80002e8 <__udivmoddi4+0xa0>
 800039c:	f1c2 0320 	rsb	r3, r2, #32
 80003a0:	fa20 f603 	lsr.w	r6, r0, r3
 80003a4:	4097      	lsls	r7, r2
 80003a6:	fa01 f002 	lsl.w	r0, r1, r2
 80003aa:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ae:	40d9      	lsrs	r1, r3
 80003b0:	4330      	orrs	r0, r6
 80003b2:	0c03      	lsrs	r3, r0, #16
 80003b4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003b8:	fa1f f887 	uxth.w	r8, r7
 80003bc:	fb0e 1116 	mls	r1, lr, r6, r1
 80003c0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003c4:	fb06 f108 	mul.w	r1, r6, r8
 80003c8:	4299      	cmp	r1, r3
 80003ca:	fa04 f402 	lsl.w	r4, r4, r2
 80003ce:	d909      	bls.n	80003e4 <__udivmoddi4+0x19c>
 80003d0:	18fb      	adds	r3, r7, r3
 80003d2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003d6:	f080 808d 	bcs.w	80004f4 <__udivmoddi4+0x2ac>
 80003da:	4299      	cmp	r1, r3
 80003dc:	f240 808a 	bls.w	80004f4 <__udivmoddi4+0x2ac>
 80003e0:	3e02      	subs	r6, #2
 80003e2:	443b      	add	r3, r7
 80003e4:	1a5b      	subs	r3, r3, r1
 80003e6:	b281      	uxth	r1, r0
 80003e8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ec:	fb0e 3310 	mls	r3, lr, r0, r3
 80003f0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003f4:	fb00 f308 	mul.w	r3, r0, r8
 80003f8:	428b      	cmp	r3, r1
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x1c4>
 80003fc:	1879      	adds	r1, r7, r1
 80003fe:	f100 3cff 	add.w	ip, r0, #4294967295
 8000402:	d273      	bcs.n	80004ec <__udivmoddi4+0x2a4>
 8000404:	428b      	cmp	r3, r1
 8000406:	d971      	bls.n	80004ec <__udivmoddi4+0x2a4>
 8000408:	3802      	subs	r0, #2
 800040a:	4439      	add	r1, r7
 800040c:	1acb      	subs	r3, r1, r3
 800040e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000412:	e778      	b.n	8000306 <__udivmoddi4+0xbe>
 8000414:	f1c6 0c20 	rsb	ip, r6, #32
 8000418:	fa03 f406 	lsl.w	r4, r3, r6
 800041c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000420:	431c      	orrs	r4, r3
 8000422:	fa20 f70c 	lsr.w	r7, r0, ip
 8000426:	fa01 f306 	lsl.w	r3, r1, r6
 800042a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800042e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000432:	431f      	orrs	r7, r3
 8000434:	0c3b      	lsrs	r3, r7, #16
 8000436:	fbb1 f9fe 	udiv	r9, r1, lr
 800043a:	fa1f f884 	uxth.w	r8, r4
 800043e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000442:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000446:	fb09 fa08 	mul.w	sl, r9, r8
 800044a:	458a      	cmp	sl, r1
 800044c:	fa02 f206 	lsl.w	r2, r2, r6
 8000450:	fa00 f306 	lsl.w	r3, r0, r6
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x220>
 8000456:	1861      	adds	r1, r4, r1
 8000458:	f109 30ff 	add.w	r0, r9, #4294967295
 800045c:	d248      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 800045e:	458a      	cmp	sl, r1
 8000460:	d946      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 8000462:	f1a9 0902 	sub.w	r9, r9, #2
 8000466:	4421      	add	r1, r4
 8000468:	eba1 010a 	sub.w	r1, r1, sl
 800046c:	b2bf      	uxth	r7, r7
 800046e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000472:	fb0e 1110 	mls	r1, lr, r0, r1
 8000476:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800047a:	fb00 f808 	mul.w	r8, r0, r8
 800047e:	45b8      	cmp	r8, r7
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x24a>
 8000482:	19e7      	adds	r7, r4, r7
 8000484:	f100 31ff 	add.w	r1, r0, #4294967295
 8000488:	d22e      	bcs.n	80004e8 <__udivmoddi4+0x2a0>
 800048a:	45b8      	cmp	r8, r7
 800048c:	d92c      	bls.n	80004e8 <__udivmoddi4+0x2a0>
 800048e:	3802      	subs	r0, #2
 8000490:	4427      	add	r7, r4
 8000492:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000496:	eba7 0708 	sub.w	r7, r7, r8
 800049a:	fba0 8902 	umull	r8, r9, r0, r2
 800049e:	454f      	cmp	r7, r9
 80004a0:	46c6      	mov	lr, r8
 80004a2:	4649      	mov	r1, r9
 80004a4:	d31a      	bcc.n	80004dc <__udivmoddi4+0x294>
 80004a6:	d017      	beq.n	80004d8 <__udivmoddi4+0x290>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x27a>
 80004aa:	ebb3 020e 	subs.w	r2, r3, lr
 80004ae:	eb67 0701 	sbc.w	r7, r7, r1
 80004b2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004b6:	40f2      	lsrs	r2, r6
 80004b8:	ea4c 0202 	orr.w	r2, ip, r2
 80004bc:	40f7      	lsrs	r7, r6
 80004be:	e9c5 2700 	strd	r2, r7, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	462e      	mov	r6, r5
 80004cc:	4628      	mov	r0, r5
 80004ce:	e70b      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d0:	4606      	mov	r6, r0
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d4:	4618      	mov	r0, r3
 80004d6:	e6fd      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004d8:	4543      	cmp	r3, r8
 80004da:	d2e5      	bcs.n	80004a8 <__udivmoddi4+0x260>
 80004dc:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e0:	eb69 0104 	sbc.w	r1, r9, r4
 80004e4:	3801      	subs	r0, #1
 80004e6:	e7df      	b.n	80004a8 <__udivmoddi4+0x260>
 80004e8:	4608      	mov	r0, r1
 80004ea:	e7d2      	b.n	8000492 <__udivmoddi4+0x24a>
 80004ec:	4660      	mov	r0, ip
 80004ee:	e78d      	b.n	800040c <__udivmoddi4+0x1c4>
 80004f0:	4681      	mov	r9, r0
 80004f2:	e7b9      	b.n	8000468 <__udivmoddi4+0x220>
 80004f4:	4666      	mov	r6, ip
 80004f6:	e775      	b.n	80003e4 <__udivmoddi4+0x19c>
 80004f8:	4630      	mov	r0, r6
 80004fa:	e74a      	b.n	8000392 <__udivmoddi4+0x14a>
 80004fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000500:	4439      	add	r1, r7
 8000502:	e713      	b.n	800032c <__udivmoddi4+0xe4>
 8000504:	3802      	subs	r0, #2
 8000506:	443c      	add	r4, r7
 8000508:	e724      	b.n	8000354 <__udivmoddi4+0x10c>
 800050a:	bf00      	nop

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <_ZN12file_managerC1Ev>:
 */

extern char SDPath[4];


file_manager::file_manager()
 8000510:	b590      	push	{r4, r7, lr}
 8000512:	b083      	sub	sp, #12
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
 8000518:	f241 3048 	movw	r0, #4936	; 0x1348
 800051c:	f008 ff1a 	bl	8009354 <_Znwj>
 8000520:	4603      	mov	r3, r0
 8000522:	461c      	mov	r4, r3
 8000524:	4620      	mov	r0, r4
 8000526:	f241 3348 	movw	r3, #4936	; 0x1348
 800052a:	461a      	mov	r2, r3
 800052c:	2100      	movs	r1, #0
 800052e:	f008 ff65 	bl	80093fc <memset>
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	605c      	str	r4, [r3, #4]
{
	MX_SDMMC1_SD_Init();  /* Low level driver initalizations */
 8000536:	f000 fbbb 	bl	8000cb0 <MX_SDMMC1_SD_Init>
	MX_FATFS_Init();      /* File system initalizations */
 800053a:	f003 ffc7 	bl	80044cc <MX_FATFS_Init>

	strncpy(file_handle->current_dir, SDPath, strlen(SDPath));
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	685b      	ldr	r3, [r3, #4]
 8000542:	f241 2428 	movw	r4, #4648	; 0x1228
 8000546:	441c      	add	r4, r3
 8000548:	4818      	ldr	r0, [pc, #96]	; (80005ac <_ZN12file_managerC1Ev+0x9c>)
 800054a:	f7ff fe5d 	bl	8000208 <strlen>
 800054e:	4603      	mov	r3, r0
 8000550:	461a      	mov	r2, r3
 8000552:	4916      	ldr	r1, [pc, #88]	; (80005ac <_ZN12file_managerC1Ev+0x9c>)
 8000554:	4620      	mov	r0, r4
 8000556:	f009 f816 	bl	8009586 <strncpy>
	file_handle->result = f_mount(&file_handle->drive_handler, SDPath, 0);
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	685b      	ldr	r3, [r3, #4]
 800055e:	4618      	mov	r0, r3
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	685c      	ldr	r4, [r3, #4]
 8000564:	2200      	movs	r2, #0
 8000566:	4911      	ldr	r1, [pc, #68]	; (80005ac <_ZN12file_managerC1Ev+0x9c>)
 8000568:	f007 fc42 	bl	8007df0 <f_mount>
 800056c:	4603      	mov	r3, r0
 800056e:	461a      	mov	r2, r3
 8000570:	f241 03a8 	movw	r3, #4264	; 0x10a8
 8000574:	4423      	add	r3, r4
 8000576:	701a      	strb	r2, [r3, #0]
	get_dir();
 8000578:	6878      	ldr	r0, [r7, #4]
 800057a:	f000 f933 	bl	80007e4 <_ZN12file_manager7get_dirEv>
	f_opendir(&file_handle->direction, file_handle->current_dir);
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	685a      	ldr	r2, [r3, #4]
 8000582:	f241 03b0 	movw	r3, #4272	; 0x10b0
 8000586:	4413      	add	r3, r2
 8000588:	687a      	ldr	r2, [r7, #4]
 800058a:	6851      	ldr	r1, [r2, #4]
 800058c:	f241 2228 	movw	r2, #4648	; 0x1228
 8000590:	440a      	add	r2, r1
 8000592:	4611      	mov	r1, r2
 8000594:	4618      	mov	r0, r3
 8000596:	f008 fbdb 	bl	8008d50 <f_opendir>
	get_dir();
 800059a:	6878      	ldr	r0, [r7, #4]
 800059c:	f000 f922 	bl	80007e4 <_ZN12file_manager7get_dirEv>
}
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	4618      	mov	r0, r3
 80005a4:	370c      	adds	r7, #12
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd90      	pop	{r4, r7, pc}
 80005aa:	bf00      	nop
 80005ac:	2000030c 	.word	0x2000030c

080005b0 <_ZN12file_manager13set_file_nameEPc>:
}



void file_manager::set_file_name(TCHAR* file_name)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
 80005b8:	6039      	str	r1, [r7, #0]
	this->file_name = file_name;
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	683a      	ldr	r2, [r7, #0]
 80005be:	601a      	str	r2, [r3, #0]
}
 80005c0:	bf00      	nop
 80005c2:	370c      	adds	r7, #12
 80005c4:	46bd      	mov	sp, r7
 80005c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ca:	4770      	bx	lr

080005cc <_ZN12file_manager13get_file_nameEv>:



TCHAR* file_manager::get_file_name()
{
 80005cc:	b480      	push	{r7}
 80005ce:	b083      	sub	sp, #12
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
	return this->file_name;
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	681b      	ldr	r3, [r3, #0]
}
 80005d8:	4618      	mov	r0, r3
 80005da:	370c      	adds	r7, #12
 80005dc:	46bd      	mov	sp, r7
 80005de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e2:	4770      	bx	lr

080005e4 <_ZN12file_manager11create_fileEv>:


void file_manager::create_file()
{
 80005e4:	b590      	push	{r4, r7, lr}
 80005e6:	b083      	sub	sp, #12
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
	strcat(file_handle->current_dir,"\\");
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	685b      	ldr	r3, [r3, #4]
 80005f0:	f241 2428 	movw	r4, #4648	; 0x1228
 80005f4:	441c      	add	r4, r3
 80005f6:	4620      	mov	r0, r4
 80005f8:	f7ff fe06 	bl	8000208 <strlen>
 80005fc:	4603      	mov	r3, r0
 80005fe:	4423      	add	r3, r4
 8000600:	491e      	ldr	r1, [pc, #120]	; (800067c <_ZN12file_manager11create_fileEv+0x98>)
 8000602:	461a      	mov	r2, r3
 8000604:	460b      	mov	r3, r1
 8000606:	881b      	ldrh	r3, [r3, #0]
 8000608:	8013      	strh	r3, [r2, #0]
	strcat(file_handle->current_dir, this->file_name);
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	685a      	ldr	r2, [r3, #4]
 800060e:	f241 2328 	movw	r3, #4648	; 0x1228
 8000612:	4413      	add	r3, r2
 8000614:	687a      	ldr	r2, [r7, #4]
 8000616:	6812      	ldr	r2, [r2, #0]
 8000618:	4611      	mov	r1, r2
 800061a:	4618      	mov	r0, r3
 800061c:	f008 ffa4 	bl	8009568 <strcat>

	file_handle->result = f_open(&file_handle->handler, file_handle->current_dir, FA_CREATE_NEW);
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	685a      	ldr	r2, [r3, #4]
 8000624:	f241 0350 	movw	r3, #4176	; 0x1050
 8000628:	4413      	add	r3, r2
 800062a:	687a      	ldr	r2, [r7, #4]
 800062c:	6852      	ldr	r2, [r2, #4]
 800062e:	f241 2128 	movw	r1, #4648	; 0x1228
 8000632:	4411      	add	r1, r2
 8000634:	687a      	ldr	r2, [r7, #4]
 8000636:	6854      	ldr	r4, [r2, #4]
 8000638:	2204      	movs	r2, #4
 800063a:	4618      	mov	r0, r3
 800063c:	f007 fc20 	bl	8007e80 <f_open>
 8000640:	4603      	mov	r3, r0
 8000642:	461a      	mov	r2, r3
 8000644:	f241 03a8 	movw	r3, #4264	; 0x10a8
 8000648:	4423      	add	r3, r4
 800064a:	701a      	strb	r2, [r3, #0]
	file_handle->result = f_close(&file_handle->handler);
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	685a      	ldr	r2, [r3, #4]
 8000650:	f241 0350 	movw	r3, #4176	; 0x1050
 8000654:	4413      	add	r3, r2
 8000656:	687a      	ldr	r2, [r7, #4]
 8000658:	6854      	ldr	r4, [r2, #4]
 800065a:	4618      	mov	r0, r3
 800065c:	f008 fa36 	bl	8008acc <f_close>
 8000660:	4603      	mov	r3, r0
 8000662:	461a      	mov	r2, r3
 8000664:	f241 03a8 	movw	r3, #4264	; 0x10a8
 8000668:	4423      	add	r3, r4
 800066a:	701a      	strb	r2, [r3, #0]

	get_dir();
 800066c:	6878      	ldr	r0, [r7, #4]
 800066e:	f000 f8b9 	bl	80007e4 <_ZN12file_manager7get_dirEv>

}
 8000672:	bf00      	nop
 8000674:	370c      	adds	r7, #12
 8000676:	46bd      	mov	sp, r7
 8000678:	bd90      	pop	{r4, r7, pc}
 800067a:	bf00      	nop
 800067c:	080095e0 	.word	0x080095e0

08000680 <_ZN12file_manager9open_fileE14file_open_mode>:

void file_manager::open_file(file_open_mode mode)
{
 8000680:	b5b0      	push	{r4, r5, r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
 8000688:	460b      	mov	r3, r1
 800068a:	70fb      	strb	r3, [r7, #3]
	switch(mode)
 800068c:	78fb      	ldrb	r3, [r7, #3]
 800068e:	2b01      	cmp	r3, #1
 8000690:	d002      	beq.n	8000698 <_ZN12file_manager9open_fileE14file_open_mode+0x18>
 8000692:	2b02      	cmp	r3, #2
 8000694:	d016      	beq.n	80006c4 <_ZN12file_manager9open_fileE14file_open_mode+0x44>
	case READ_MODE:
		file_handle->result = f_open(&file_handle->handler, file_manager::get_file_name(), FA_READ);
		break;
	}

}
 8000696:	e02b      	b.n	80006f0 <_ZN12file_manager9open_fileE14file_open_mode+0x70>
		file_handle->result = f_open(&file_handle->handler, file_manager::get_file_name(), FA_OPEN_APPEND|FA_WRITE);
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	685b      	ldr	r3, [r3, #4]
 800069c:	f241 0450 	movw	r4, #4176	; 0x1050
 80006a0:	441c      	add	r4, r3
 80006a2:	6878      	ldr	r0, [r7, #4]
 80006a4:	f7ff ff92 	bl	80005cc <_ZN12file_manager13get_file_nameEv>
 80006a8:	4601      	mov	r1, r0
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	685d      	ldr	r5, [r3, #4]
 80006ae:	2232      	movs	r2, #50	; 0x32
 80006b0:	4620      	mov	r0, r4
 80006b2:	f007 fbe5 	bl	8007e80 <f_open>
 80006b6:	4603      	mov	r3, r0
 80006b8:	461a      	mov	r2, r3
 80006ba:	f241 03a8 	movw	r3, #4264	; 0x10a8
 80006be:	442b      	add	r3, r5
 80006c0:	701a      	strb	r2, [r3, #0]
		break;
 80006c2:	e015      	b.n	80006f0 <_ZN12file_manager9open_fileE14file_open_mode+0x70>
		file_handle->result = f_open(&file_handle->handler, file_manager::get_file_name(), FA_READ);
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	685b      	ldr	r3, [r3, #4]
 80006c8:	f241 0450 	movw	r4, #4176	; 0x1050
 80006cc:	441c      	add	r4, r3
 80006ce:	6878      	ldr	r0, [r7, #4]
 80006d0:	f7ff ff7c 	bl	80005cc <_ZN12file_manager13get_file_nameEv>
 80006d4:	4601      	mov	r1, r0
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	685d      	ldr	r5, [r3, #4]
 80006da:	2201      	movs	r2, #1
 80006dc:	4620      	mov	r0, r4
 80006de:	f007 fbcf 	bl	8007e80 <f_open>
 80006e2:	4603      	mov	r3, r0
 80006e4:	461a      	mov	r2, r3
 80006e6:	f241 03a8 	movw	r3, #4264	; 0x10a8
 80006ea:	442b      	add	r3, r5
 80006ec:	701a      	strb	r2, [r3, #0]
		break;
 80006ee:	bf00      	nop
}
 80006f0:	bf00      	nop
 80006f2:	3708      	adds	r7, #8
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bdb0      	pop	{r4, r5, r7, pc}

080006f8 <_ZN12file_manager10close_fileEv>:



void file_manager::close_file()
{
 80006f8:	b590      	push	{r4, r7, lr}
 80006fa:	b083      	sub	sp, #12
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
	file_handle->result = f_close(&file_handle->handler);
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	685a      	ldr	r2, [r3, #4]
 8000704:	f241 0350 	movw	r3, #4176	; 0x1050
 8000708:	4413      	add	r3, r2
 800070a:	687a      	ldr	r2, [r7, #4]
 800070c:	6854      	ldr	r4, [r2, #4]
 800070e:	4618      	mov	r0, r3
 8000710:	f008 f9dc 	bl	8008acc <f_close>
 8000714:	4603      	mov	r3, r0
 8000716:	461a      	mov	r2, r3
 8000718:	f241 03a8 	movw	r3, #4264	; 0x10a8
 800071c:	4423      	add	r3, r4
 800071e:	701a      	strb	r2, [r3, #0]
}
 8000720:	bf00      	nop
 8000722:	370c      	adds	r7, #12
 8000724:	46bd      	mov	sp, r7
 8000726:	bd90      	pop	{r4, r7, pc}

08000728 <_ZN12file_manager10write_fileEPc>:
}



void file_manager::write_file(TCHAR*  data)
{
 8000728:	b5b0      	push	{r4, r5, r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
 8000730:	6039      	str	r1, [r7, #0]
	file_handle->result = f_write(&file_handle->handler,(TCHAR *)data, strlen(data), (UINT *)file_handle->bytes_write);
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	685b      	ldr	r3, [r3, #4]
 8000736:	f241 0450 	movw	r4, #4176	; 0x1050
 800073a:	441c      	add	r4, r3
 800073c:	6838      	ldr	r0, [r7, #0]
 800073e:	f7ff fd63 	bl	8000208 <strlen>
 8000742:	4601      	mov	r1, r0
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	685a      	ldr	r2, [r3, #4]
 8000748:	f241 333c 	movw	r3, #4924	; 0x133c
 800074c:	4413      	add	r3, r2
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	461a      	mov	r2, r3
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	685d      	ldr	r5, [r3, #4]
 8000756:	4613      	mov	r3, r2
 8000758:	460a      	mov	r2, r1
 800075a:	6839      	ldr	r1, [r7, #0]
 800075c:	4620      	mov	r0, r4
 800075e:	f007 fe5d 	bl	800841c <f_write>
 8000762:	4603      	mov	r3, r0
 8000764:	461a      	mov	r2, r3
 8000766:	f241 03a8 	movw	r3, #4264	; 0x10a8
 800076a:	442b      	add	r3, r5
 800076c:	701a      	strb	r2, [r3, #0]
}
 800076e:	bf00      	nop
 8000770:	3708      	adds	r7, #8
 8000772:	46bd      	mov	sp, r7
 8000774:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000778 <_ZN12file_manager10create_dirEPc>:


void file_manager::create_dir(TCHAR *dir)
{
 8000778:	b590      	push	{r4, r7, lr}
 800077a:	b083      	sub	sp, #12
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
 8000780:	6039      	str	r1, [r7, #0]
	get_dir();
 8000782:	6878      	ldr	r0, [r7, #4]
 8000784:	f000 f82e 	bl	80007e4 <_ZN12file_manager7get_dirEv>
	strcat(file_handle->current_dir,"/");
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	685b      	ldr	r3, [r3, #4]
 800078c:	f241 2428 	movw	r4, #4648	; 0x1228
 8000790:	441c      	add	r4, r3
 8000792:	4620      	mov	r0, r4
 8000794:	f7ff fd38 	bl	8000208 <strlen>
 8000798:	4603      	mov	r3, r0
 800079a:	4423      	add	r3, r4
 800079c:	4910      	ldr	r1, [pc, #64]	; (80007e0 <_ZN12file_manager10create_dirEPc+0x68>)
 800079e:	461a      	mov	r2, r3
 80007a0:	460b      	mov	r3, r1
 80007a2:	881b      	ldrh	r3, [r3, #0]
 80007a4:	8013      	strh	r3, [r2, #0]
	strcat(file_handle->current_dir, dir);
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	685a      	ldr	r2, [r3, #4]
 80007aa:	f241 2328 	movw	r3, #4648	; 0x1228
 80007ae:	4413      	add	r3, r2
 80007b0:	6839      	ldr	r1, [r7, #0]
 80007b2:	4618      	mov	r0, r3
 80007b4:	f008 fed8 	bl	8009568 <strcat>
	file_handle->result = f_mkdir(file_handle->current_dir);
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	685a      	ldr	r2, [r3, #4]
 80007bc:	f241 2328 	movw	r3, #4648	; 0x1228
 80007c0:	4413      	add	r3, r2
 80007c2:	687a      	ldr	r2, [r7, #4]
 80007c4:	6854      	ldr	r4, [r2, #4]
 80007c6:	4618      	mov	r0, r3
 80007c8:	f008 fb84 	bl	8008ed4 <f_mkdir>
 80007cc:	4603      	mov	r3, r0
 80007ce:	461a      	mov	r2, r3
 80007d0:	f241 03a8 	movw	r3, #4264	; 0x10a8
 80007d4:	4423      	add	r3, r4
 80007d6:	701a      	strb	r2, [r3, #0]
}
 80007d8:	bf00      	nop
 80007da:	370c      	adds	r7, #12
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd90      	pop	{r4, r7, pc}
 80007e0:	080095e4 	.word	0x080095e4

080007e4 <_ZN12file_manager7get_dirEv>:

void file_manager::get_dir()
{
 80007e4:	b5b0      	push	{r4, r5, r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
	memset(file_handle->current_dir, 0x00, sizeof(file_handle->current_dir));
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	685a      	ldr	r2, [r3, #4]
 80007f0:	f241 2328 	movw	r3, #4648	; 0x1228
 80007f4:	4413      	add	r3, r2
 80007f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007fa:	2100      	movs	r1, #0
 80007fc:	4618      	mov	r0, r3
 80007fe:	f008 fdfd 	bl	80093fc <memset>
	file_handle->result = f_getcwd(file_handle->current_dir, strlen(file_handle->current_dir));
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	685b      	ldr	r3, [r3, #4]
 8000806:	f241 2428 	movw	r4, #4648	; 0x1228
 800080a:	441c      	add	r4, r3
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	685a      	ldr	r2, [r3, #4]
 8000810:	f241 2328 	movw	r3, #4648	; 0x1228
 8000814:	4413      	add	r3, r2
 8000816:	4618      	mov	r0, r3
 8000818:	f7ff fcf6 	bl	8000208 <strlen>
 800081c:	4602      	mov	r2, r0
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	685d      	ldr	r5, [r3, #4]
 8000822:	4611      	mov	r1, r2
 8000824:	4620      	mov	r0, r4
 8000826:	f008 f985 	bl	8008b34 <f_getcwd>
 800082a:	4603      	mov	r3, r0
 800082c:	461a      	mov	r2, r3
 800082e:	f241 03a8 	movw	r3, #4264	; 0x10a8
 8000832:	442b      	add	r3, r5
 8000834:	701a      	strb	r2, [r3, #0]
}
 8000836:	bf00      	nop
 8000838:	3708      	adds	r7, #8
 800083a:	46bd      	mov	sp, r7
 800083c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000840 <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000840:	4b0f      	ldr	r3, [pc, #60]	; (8000880 <MX_DMA_Init+0x40>)

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000842:	2200      	movs	r2, #0
 8000844:	203b      	movs	r0, #59	; 0x3b
 8000846:	4611      	mov	r1, r2
{
 8000848:	b510      	push	{r4, lr}
  __HAL_RCC_DMA2_CLK_ENABLE();
 800084a:	6b1c      	ldr	r4, [r3, #48]	; 0x30
{
 800084c:	b082      	sub	sp, #8
  __HAL_RCC_DMA2_CLK_ENABLE();
 800084e:	f444 0480 	orr.w	r4, r4, #4194304	; 0x400000
 8000852:	631c      	str	r4, [r3, #48]	; 0x30
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800085a:	9301      	str	r3, [sp, #4]
 800085c:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800085e:	f000 fc83 	bl	8001168 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000862:	203b      	movs	r0, #59	; 0x3b
 8000864:	f000 fcba 	bl	80011dc <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000868:	2200      	movs	r2, #0
 800086a:	2045      	movs	r0, #69	; 0x45
 800086c:	4611      	mov	r1, r2
 800086e:	f000 fc7b 	bl	8001168 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000872:	2045      	movs	r0, #69	; 0x45

}
 8000874:	b002      	add	sp, #8
 8000876:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800087a:	f000 bcaf 	b.w	80011dc <HAL_NVIC_EnableIRQ>
 800087e:	bf00      	nop
 8000880:	40023800 	.word	0x40023800

08000884 <MX_GPIO_Init>:
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000884:	4b47      	ldr	r3, [pc, #284]	; (80009a4 <MX_GPIO_Init+0x120>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOI_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOK, GPIO_PIN_3, GPIO_PIN_SET);
 8000886:	2201      	movs	r2, #1
 8000888:	2108      	movs	r1, #8
{
 800088a:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088c:	2400      	movs	r4, #0
{
 800088e:	b091      	sub	sp, #68	; 0x44
  HAL_GPIO_WritePin(GPIOK, GPIO_PIN_3, GPIO_PIN_SET);
 8000890:	4f45      	ldr	r7, [pc, #276]	; (80009a8 <MX_GPIO_Init+0x124>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000892:	940b      	str	r4, [sp, #44]	; 0x2c
 8000894:	940a      	str	r4, [sp, #40]	; 0x28
 8000896:	940e      	str	r4, [sp, #56]	; 0x38

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1|GPIO_PIN_12, GPIO_PIN_SET);
 8000898:	4e44      	ldr	r6, [pc, #272]	; (80009ac <MX_GPIO_Init+0x128>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089a:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800089e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80008a0:	f040 0010 	orr.w	r0, r0, #16
 80008a4:	6318      	str	r0, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOK, GPIO_PIN_3, GPIO_PIN_SET);
 80008a6:	4638      	mov	r0, r7
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008a8:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 80008aa:	f005 0510 	and.w	r5, r5, #16
 80008ae:	9500      	str	r5, [sp, #0]
 80008b0:	9d00      	ldr	r5, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008b2:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 80008b4:	f045 0504 	orr.w	r5, r5, #4
 80008b8:	631d      	str	r5, [r3, #48]	; 0x30
 80008ba:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 80008bc:	f005 0504 	and.w	r5, r5, #4
 80008c0:	9501      	str	r5, [sp, #4]
 80008c2:	9d01      	ldr	r5, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c4:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 80008c6:	4315      	orrs	r5, r2
 80008c8:	631d      	str	r5, [r3, #48]	; 0x30
 80008ca:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 80008cc:	4015      	ands	r5, r2
 80008ce:	9502      	str	r5, [sp, #8]
 80008d0:	9d02      	ldr	r5, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008d2:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 80008d4:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 80008d8:	631d      	str	r5, [r3, #48]	; 0x30
 80008da:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 80008dc:	f005 0540 	and.w	r5, r5, #64	; 0x40
 80008e0:	9503      	str	r5, [sp, #12]
 80008e2:	9d03      	ldr	r5, [sp, #12]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80008e4:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 80008e6:	f445 7500 	orr.w	r5, r5, #512	; 0x200
 80008ea:	631d      	str	r5, [r3, #48]	; 0x30
 80008ec:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 80008ee:	f405 7500 	and.w	r5, r5, #512	; 0x200
 80008f2:	9504      	str	r5, [sp, #16]
 80008f4:	9d04      	ldr	r5, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008f6:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 80008f8:	430d      	orrs	r5, r1
 80008fa:	631d      	str	r5, [r3, #48]	; 0x30
 80008fc:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 80008fe:	400d      	ands	r5, r1
 8000900:	9505      	str	r5, [sp, #20]
 8000902:	9d05      	ldr	r5, [sp, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000904:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 8000906:	f445 6580 	orr.w	r5, r5, #1024	; 0x400
 800090a:	631d      	str	r5, [r3, #48]	; 0x30
 800090c:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 800090e:	f405 6580 	and.w	r5, r5, #1024	; 0x400
 8000912:	9506      	str	r5, [sp, #24]
 8000914:	9d06      	ldr	r5, [sp, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000916:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 8000918:	f045 0520 	orr.w	r5, r5, #32
 800091c:	631d      	str	r5, [r3, #48]	; 0x30
 800091e:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 8000920:	f005 0520 	and.w	r5, r5, #32
 8000924:	9507      	str	r5, [sp, #28]
 8000926:	9d07      	ldr	r5, [sp, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000928:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 800092a:	f445 7580 	orr.w	r5, r5, #256	; 0x100
 800092e:	631d      	str	r5, [r3, #48]	; 0x30
 8000930:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 8000932:	f405 7580 	and.w	r5, r5, #256	; 0x100
 8000936:	9508      	str	r5, [sp, #32]
 8000938:	9d08      	ldr	r5, [sp, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800093a:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 800093c:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8000940:	631d      	str	r5, [r3, #48]	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pin : PK3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000942:	2503      	movs	r5, #3
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800094a:	9309      	str	r3, [sp, #36]	; 0x24
 800094c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  HAL_GPIO_WritePin(GPIOK, GPIO_PIN_3, GPIO_PIN_SET);
 800094e:	f000 ff07 	bl	8001760 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1|GPIO_PIN_12, GPIO_PIN_SET);
 8000952:	4630      	mov	r0, r6
 8000954:	2201      	movs	r2, #1
 8000956:	f241 0102 	movw	r1, #4098	; 0x1002
 800095a:	f000 ff01 	bl	8001760 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800095e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000962:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000964:	a90a      	add	r1, sp, #40	; 0x28
 8000966:	4812      	ldr	r0, [pc, #72]	; (80009b0 <MX_GPIO_Init+0x12c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800096a:	2400      	movs	r4, #0
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800096c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000970:	f000 fdd0 	bl	8001514 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000974:	2208      	movs	r2, #8
 8000976:	2301      	movs	r3, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000978:	4638      	mov	r0, r7
 800097a:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800097c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8000980:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000984:	f000 fdc6 	bl	8001514 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI1 PI12 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_12;
 8000988:	f241 0202 	movw	r2, #4098	; 0x1002
 800098c:	2301      	movs	r3, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800098e:	a90a      	add	r1, sp, #40	; 0x28
 8000990:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_12;
 8000992:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
 8000996:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800099a:	f000 fdbb 	bl	8001514 <HAL_GPIO_Init>

}
 800099e:	b011      	add	sp, #68	; 0x44
 80009a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40023800 	.word	0x40023800
 80009a8:	40022800 	.word	0x40022800
 80009ac:	40022000 	.word	0x40022000
 80009b0:	40020800 	.word	0x40020800

080009b4 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80009b8:	f3bf 8f4f 	dsb	sy
}
 80009bc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80009be:	f3bf 8f6f 	isb	sy
}
 80009c2:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80009c4:	4b0d      	ldr	r3, [pc, #52]	; (80009fc <SCB_EnableICache+0x48>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80009cc:	f3bf 8f4f 	dsb	sy
}
 80009d0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80009d2:	f3bf 8f6f 	isb	sy
}
 80009d6:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80009d8:	4b08      	ldr	r3, [pc, #32]	; (80009fc <SCB_EnableICache+0x48>)
 80009da:	695b      	ldr	r3, [r3, #20]
 80009dc:	4a07      	ldr	r2, [pc, #28]	; (80009fc <SCB_EnableICache+0x48>)
 80009de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009e2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80009e4:	f3bf 8f4f 	dsb	sy
}
 80009e8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80009ea:	f3bf 8f6f 	isb	sy
}
 80009ee:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 80009f0:	bf00      	nop
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	e000ed00 	.word	0xe000ed00

08000a00 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b085      	sub	sp, #20
 8000a04:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000a06:	4b25      	ldr	r3, [pc, #148]	; (8000a9c <SCB_EnableDCache+0x9c>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000a0e:	f3bf 8f4f 	dsb	sy
}
 8000a12:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000a14:	4b21      	ldr	r3, [pc, #132]	; (8000a9c <SCB_EnableDCache+0x9c>)
 8000a16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000a1a:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	0b5b      	lsrs	r3, r3, #13
 8000a20:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000a24:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	08db      	lsrs	r3, r3, #3
 8000a2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000a2e:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	015a      	lsls	r2, r3, #5
 8000a34:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000a38:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000a3a:	68ba      	ldr	r2, [r7, #8]
 8000a3c:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000a3e:	4917      	ldr	r1, [pc, #92]	; (8000a9c <SCB_EnableDCache+0x9c>)
 8000a40:	4313      	orrs	r3, r2
 8000a42:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000a46:	68bb      	ldr	r3, [r7, #8]
 8000a48:	1e5a      	subs	r2, r3, #1
 8000a4a:	60ba      	str	r2, [r7, #8]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	bf14      	ite	ne
 8000a50:	2301      	movne	r3, #1
 8000a52:	2300      	moveq	r3, #0
 8000a54:	b2db      	uxtb	r3, r3
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d000      	beq.n	8000a5c <SCB_EnableDCache+0x5c>
      do {
 8000a5a:	e7e9      	b.n	8000a30 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	1e5a      	subs	r2, r3, #1
 8000a60:	60fa      	str	r2, [r7, #12]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	bf14      	ite	ne
 8000a66:	2301      	movne	r3, #1
 8000a68:	2300      	moveq	r3, #0
 8000a6a:	b2db      	uxtb	r3, r3
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d000      	beq.n	8000a72 <SCB_EnableDCache+0x72>
    do {
 8000a70:	e7d9      	b.n	8000a26 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000a72:	f3bf 8f4f 	dsb	sy
}
 8000a76:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000a78:	4b08      	ldr	r3, [pc, #32]	; (8000a9c <SCB_EnableDCache+0x9c>)
 8000a7a:	695b      	ldr	r3, [r3, #20]
 8000a7c:	4a07      	ldr	r2, [pc, #28]	; (8000a9c <SCB_EnableDCache+0x9c>)
 8000a7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a82:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000a84:	f3bf 8f4f 	dsb	sy
}
 8000a88:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a8a:	f3bf 8f6f 	isb	sy
}
 8000a8e:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000a90:	bf00      	nop
 8000a92:	3714      	adds	r7, #20
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr
 8000a9c:	e000ed00 	.word	0xe000ed00

08000aa0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000aa6:	f7ff ff85 	bl	80009b4 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000aaa:	f7ff ffa9 	bl	8000a00 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000aae:	f000 fb17 	bl	80010e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ab2:	f000 f82d 	bl	8000b10 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ab6:	f7ff fee5 	bl	8000884 <MX_GPIO_Init>
  MX_DMA_Init();
 8000aba:	f7ff fec1 	bl	8000840 <MX_DMA_Init>
  MX_TIM2_Init();
 8000abe:	f000 fa91 	bl	8000fe4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  file_manager  file_test{};
 8000ac2:	463b      	mov	r3, r7
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f7ff fd23 	bl	8000510 <_ZN12file_managerC1Ev>

  file_test.set_file_name("test_file.txt");
 8000aca:	463b      	mov	r3, r7
 8000acc:	490d      	ldr	r1, [pc, #52]	; (8000b04 <main+0x64>)
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f7ff fd6e 	bl	80005b0 <_ZN12file_manager13set_file_nameEPc>

  file_test.create_file();
 8000ad4:	463b      	mov	r3, r7
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f7ff fd84 	bl	80005e4 <_ZN12file_manager11create_fileEv>

  file_test.open_file(WRITE_MODE);
 8000adc:	463b      	mov	r3, r7
 8000ade:	2101      	movs	r1, #1
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f7ff fdcd 	bl	8000680 <_ZN12file_manager9open_fileE14file_open_mode>

  file_test.write_file("Hello guys");
 8000ae6:	463b      	mov	r3, r7
 8000ae8:	4907      	ldr	r1, [pc, #28]	; (8000b08 <main+0x68>)
 8000aea:	4618      	mov	r0, r3
 8000aec:	f7ff fe1c 	bl	8000728 <_ZN12file_manager10write_fileEPc>

  file_test.close_file();
 8000af0:	463b      	mov	r3, r7
 8000af2:	4618      	mov	r0, r3
 8000af4:	f7ff fe00 	bl	80006f8 <_ZN12file_manager10close_fileEv>

  file_test.create_dir("Images");
 8000af8:	463b      	mov	r3, r7
 8000afa:	4904      	ldr	r1, [pc, #16]	; (8000b0c <main+0x6c>)
 8000afc:	4618      	mov	r0, r3
 8000afe:	f7ff fe3b 	bl	8000778 <_ZN12file_manager10create_dirEPc>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b02:	e7fe      	b.n	8000b02 <main+0x62>
 8000b04:	080095e8 	.word	0x080095e8
 8000b08:	080095f8 	.word	0x080095f8
 8000b0c:	08009604 	.word	0x08009604

08000b10 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b0b4      	sub	sp, #208	; 0xd0
 8000b14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b16:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000b1a:	2230      	movs	r2, #48	; 0x30
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f008 fc6c 	bl	80093fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b24:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000b28:	2200      	movs	r2, #0
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	605a      	str	r2, [r3, #4]
 8000b2e:	609a      	str	r2, [r3, #8]
 8000b30:	60da      	str	r2, [r3, #12]
 8000b32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b34:	f107 0308 	add.w	r3, r7, #8
 8000b38:	2284      	movs	r2, #132	; 0x84
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f008 fc5d 	bl	80093fc <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b42:	4b4d      	ldr	r3, [pc, #308]	; (8000c78 <_Z18SystemClock_Configv+0x168>)
 8000b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b46:	4a4c      	ldr	r2, [pc, #304]	; (8000c78 <_Z18SystemClock_Configv+0x168>)
 8000b48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b4e:	4b4a      	ldr	r3, [pc, #296]	; (8000c78 <_Z18SystemClock_Configv+0x168>)
 8000b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b56:	607b      	str	r3, [r7, #4]
 8000b58:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b5a:	4b48      	ldr	r3, [pc, #288]	; (8000c7c <_Z18SystemClock_Configv+0x16c>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	4a47      	ldr	r2, [pc, #284]	; (8000c7c <_Z18SystemClock_Configv+0x16c>)
 8000b60:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b64:	6013      	str	r3, [r2, #0]
 8000b66:	4b45      	ldr	r3, [pc, #276]	; (8000c7c <_Z18SystemClock_Configv+0x16c>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b6e:	603b      	str	r3, [r7, #0]
 8000b70:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b72:	2301      	movs	r3, #1
 8000b74:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b78:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b7c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b80:	2302      	movs	r3, #2
 8000b82:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b86:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b8a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000b8e:	230f      	movs	r3, #15
 8000b90:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 240;
 8000b94:	23f0      	movs	r3, #240	; 0xf0
 8000b96:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000ba0:	2309      	movs	r3, #9
 8000ba2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ba6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000baa:	4618      	mov	r0, r3
 8000bac:	f000 fe20 	bl	80017f0 <HAL_RCC_OscConfig>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	bf14      	ite	ne
 8000bb6:	2301      	movne	r3, #1
 8000bb8:	2300      	moveq	r3, #0
 8000bba:	b2db      	uxtb	r3, r3
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <_Z18SystemClock_Configv+0xb4>
  {
    Error_Handler();
 8000bc0:	f000 f872 	bl	8000ca8 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000bc4:	f000 fdd8 	bl	8001778 <HAL_PWREx_EnableOverDrive>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	bf14      	ite	ne
 8000bce:	2301      	movne	r3, #1
 8000bd0:	2300      	moveq	r3, #0
 8000bd2:	b2db      	uxtb	r3, r3
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <_Z18SystemClock_Configv+0xcc>
  {
    Error_Handler();
 8000bd8:	f000 f866 	bl	8000ca8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bdc:	230f      	movs	r3, #15
 8000bde:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000be2:	2302      	movs	r3, #2
 8000be4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000be8:	2300      	movs	r3, #0
 8000bea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000bee:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000bf2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000bf6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bfa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000bfe:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000c02:	2106      	movs	r1, #6
 8000c04:	4618      	mov	r0, r3
 8000c06:	f000 ffed 	bl	8001be4 <HAL_RCC_ClockConfig>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	bf14      	ite	ne
 8000c10:	2301      	movne	r3, #1
 8000c12:	2300      	moveq	r3, #0
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <_Z18SystemClock_Configv+0x10e>
  {
    Error_Handler();
 8000c1a:	f000 f845 	bl	8000ca8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_I2C3
 8000c1e:	4b18      	ldr	r3, [pc, #96]	; (8000c80 <_Z18SystemClock_Configv+0x170>)
 8000c20:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 114;
 8000c22:	2372      	movs	r3, #114	; 0x72
 8000c24:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8000c26:	2305      	movs	r3, #5
 8000c28:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8000c2e:	2303      	movs	r3, #3
 8000c30:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000c32:	2301      	movs	r3, #1
 8000c34:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8000c36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c3a:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8000c40:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000c44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c4e:	f107 0308 	add.w	r3, r7, #8
 8000c52:	4618      	mov	r0, r3
 8000c54:	f001 f8e6 	bl	8001e24 <HAL_RCCEx_PeriphCLKConfig>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	bf14      	ite	ne
 8000c5e:	2301      	movne	r3, #1
 8000c60:	2300      	moveq	r3, #0
 8000c62:	b2db      	uxtb	r3, r3
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <_Z18SystemClock_Configv+0x15c>
  {
    Error_Handler();
 8000c68:	f000 f81e 	bl	8000ca8 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000c6c:	f001 f88e 	bl	8001d8c <HAL_RCC_EnableCSS>
}
 8000c70:	bf00      	nop
 8000c72:	37d0      	adds	r7, #208	; 0xd0
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	40023800 	.word	0x40023800
 8000c7c:	40007000 	.word	0x40007000
 8000c80:	00a10008 	.word	0x00a10008

08000c84 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a04      	ldr	r2, [pc, #16]	; (8000ca4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d101      	bne.n	8000c9a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c96:	f000 fa2f 	bl	80010f8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	40010000 	.word	0x40010000

08000ca8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  while (1)
 8000cac:	e7fe      	b.n	8000cac <Error_Handler+0x4>
	...

08000cb0 <MX_SDMMC1_SD_Init>:
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000cb0:	4b05      	ldr	r3, [pc, #20]	; (8000cc8 <MX_SDMMC1_SD_Init+0x18>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	4905      	ldr	r1, [pc, #20]	; (8000ccc <MX_SDMMC1_SD_Init+0x1c>)
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
  hsd1.Init.ClockDiv = 0;
 8000cb6:	619a      	str	r2, [r3, #24]
  hsd1.Instance = SDMMC1;
 8000cb8:	e9c3 1200 	strd	r1, r2, [r3]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000cbc:	e9c3 2202 	strd	r2, r2, [r3, #8]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000cc0:	e9c3 2204 	strd	r2, r2, [r3, #16]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	20000124 	.word	0x20000124
 8000ccc:	40012c00 	.word	0x40012c00

08000cd0 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(sdHandle->Instance==SDMMC1)
 8000cd0:	4b56      	ldr	r3, [pc, #344]	; (8000e2c <HAL_SD_MspInit+0x15c>)
 8000cd2:	6802      	ldr	r2, [r0, #0]
{
 8000cd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if(sdHandle->Instance==SDMMC1)
 8000cd8:	429a      	cmp	r2, r3
{
 8000cda:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cdc:	f04f 0400 	mov.w	r4, #0
 8000ce0:	9405      	str	r4, [sp, #20]
 8000ce2:	9404      	str	r4, [sp, #16]
 8000ce4:	9408      	str	r4, [sp, #32]
 8000ce6:	e9cd 4406 	strd	r4, r4, [sp, #24]
  if(sdHandle->Instance==SDMMC1)
 8000cea:	d002      	beq.n	8000cf2 <HAL_SD_MspInit+0x22>

  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8000cec:	b00b      	add	sp, #44	; 0x2c
 8000cee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000cf2:	494f      	ldr	r1, [pc, #316]	; (8000e30 <HAL_SD_MspInit+0x160>)
 8000cf4:	4605      	mov	r5, r0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000cf6:	260c      	movs	r6, #12
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000cf8:	2200      	movs	r2, #0
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000cfa:	6c48      	ldr	r0, [r1, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000cfc:	2303      	movs	r3, #3
 8000cfe:	f44f 5880 	mov.w	r8, #4096	; 0x1000
 8000d02:	f04f 0902 	mov.w	r9, #2
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000d06:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000d0a:	2704      	movs	r7, #4
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000d0c:	6448      	str	r0, [r1, #68]	; 0x44
 8000d0e:	6c48      	ldr	r0, [r1, #68]	; 0x44
 8000d10:	f400 6000 	and.w	r0, r0, #2048	; 0x800
 8000d14:	9001      	str	r0, [sp, #4]
 8000d16:	9801      	ldr	r0, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d18:	6b08      	ldr	r0, [r1, #48]	; 0x30
 8000d1a:	f040 0004 	orr.w	r0, r0, #4
 8000d1e:	6308      	str	r0, [r1, #48]	; 0x30
 8000d20:	6b08      	ldr	r0, [r1, #48]	; 0x30
 8000d22:	f000 0004 	and.w	r0, r0, #4
 8000d26:	9002      	str	r0, [sp, #8]
 8000d28:	9802      	ldr	r0, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d2a:	6b08      	ldr	r0, [r1, #48]	; 0x30
 8000d2c:	f040 0008 	orr.w	r0, r0, #8
 8000d30:	6308      	str	r0, [r1, #48]	; 0x30
 8000d32:	6b08      	ldr	r0, [r1, #48]	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d34:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000d36:	9608      	str	r6, [sp, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d38:	f000 0008 	and.w	r0, r0, #8
 8000d3c:	9003      	str	r0, [sp, #12]
 8000d3e:	9803      	ldr	r0, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d40:	483c      	ldr	r0, [pc, #240]	; (8000e34 <HAL_SD_MspInit+0x164>)
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000d42:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8000d46:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
 8000d4a:	f04f 0801 	mov.w	r8, #1
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d4e:	f000 fbe1 	bl	8001514 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
 8000d52:	f04f 0903 	mov.w	r9, #3
 8000d56:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8000d5a:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d5c:	a904      	add	r1, sp, #16
 8000d5e:	4835      	ldr	r0, [pc, #212]	; (8000e34 <HAL_SD_MspInit+0x164>)
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000d60:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
 8000d62:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8000d66:	e9cd 8906 	strd	r8, r9, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d6a:	f000 fbd3 	bl	8001514 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d6e:	2204      	movs	r2, #4
 8000d70:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d72:	a904      	add	r1, sp, #16
 8000d74:	4830      	ldr	r0, [pc, #192]	; (8000e38 <HAL_SD_MspInit+0x168>)
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000d76:	9608      	str	r6, [sp, #32]
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 8000d78:	4e30      	ldr	r6, [pc, #192]	; (8000e3c <HAL_SD_MspInit+0x16c>)
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d7a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8000d7e:	e9cd 8906 	strd	r8, r9, [sp, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d82:	f000 fbc7 	bl	8001514 <HAL_GPIO_Init>
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 8000d86:	4a2e      	ldr	r2, [pc, #184]	; (8000e40 <HAL_SD_MspInit+0x170>)
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 8000d88:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d8c:	f44f 6080 	mov.w	r0, #1024	; 0x400
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000d90:	f44f 5880 	mov.w	r8, #4096	; 0x1000
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000d94:	f44f 4e80 	mov.w	lr, #16384	; 0x4000
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 8000d98:	f04f 0c20 	mov.w	ip, #32
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000d9c:	2103      	movs	r1, #3
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 8000d9e:	6032      	str	r2, [r6, #0]
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 8000da0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 8000da4:	6073      	str	r3, [r6, #4]
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000da6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000daa:	6130      	str	r0, [r6, #16]
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 8000dac:	4630      	mov	r0, r6
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000dae:	6234      	str	r4, [r6, #32]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 8000db0:	f8c6 c01c 	str.w	ip, [r6, #28]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000db4:	e9c6 4402 	strd	r4, r4, [r6, #8]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000db8:	e9c6 8e05 	strd	r8, lr, [r6, #20]
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000dbc:	e9c6 7109 	strd	r7, r1, [r6, #36]	; 0x24
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000dc0:	e9c6 230b 	strd	r2, r3, [r6, #44]	; 0x2c
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 8000dc4:	f000 fa18 	bl	80011f8 <HAL_DMA_Init>
 8000dc8:	bb50      	cbnz	r0, 8000e20 <HAL_SD_MspInit+0x150>
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 8000dca:	4c1e      	ldr	r4, [pc, #120]	; (8000e44 <HAL_SD_MspInit+0x174>)
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 8000dcc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 8000dd0:	4a1d      	ldr	r2, [pc, #116]	; (8000e48 <HAL_SD_MspInit+0x178>)
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000dd2:	2040      	movs	r0, #64	; 0x40
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000dd4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 8000dd8:	6063      	str	r3, [r4, #4]
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 8000dda:	6022      	str	r2, [r4, #0]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 8000ddc:	2320      	movs	r3, #32
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000dde:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000de2:	60a0      	str	r0, [r4, #8]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000de4:	2004      	movs	r0, #4
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000de6:	f44f 6780 	mov.w	r7, #1024	; 0x400
    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdmmc1_rx);
 8000dea:	642e      	str	r6, [r5, #64]	; 0x40
 8000dec:	63b5      	str	r5, [r6, #56]	; 0x38
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000dee:	2603      	movs	r6, #3
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000df0:	6161      	str	r1, [r4, #20]
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 8000df2:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000df6:	61a2      	str	r2, [r4, #24]
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000df8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 8000dfc:	61e3      	str	r3, [r4, #28]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dfe:	2300      	movs	r3, #0
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000e00:	6260      	str	r0, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 8000e02:	4620      	mov	r0, r4
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e04:	6127      	str	r7, [r4, #16]
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000e06:	6322      	str	r2, [r4, #48]	; 0x30
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e08:	60e3      	str	r3, [r4, #12]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000e0a:	6223      	str	r3, [r4, #32]
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 8000e0c:	e9c4 610a 	strd	r6, r1, [r4, #40]	; 0x28
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 8000e10:	f000 f9f2 	bl	80011f8 <HAL_DMA_Init>
 8000e14:	b938      	cbnz	r0, 8000e26 <HAL_SD_MspInit+0x156>
    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdmmc1_tx);
 8000e16:	63ec      	str	r4, [r5, #60]	; 0x3c
 8000e18:	63a5      	str	r5, [r4, #56]	; 0x38
}
 8000e1a:	b00b      	add	sp, #44	; 0x2c
 8000e1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      Error_Handler();
 8000e20:	f7ff ff42 	bl	8000ca8 <Error_Handler>
 8000e24:	e7d1      	b.n	8000dca <HAL_SD_MspInit+0xfa>
      Error_Handler();
 8000e26:	f7ff ff3f 	bl	8000ca8 <Error_Handler>
 8000e2a:	e7f4      	b.n	8000e16 <HAL_SD_MspInit+0x146>
 8000e2c:	40012c00 	.word	0x40012c00
 8000e30:	40023800 	.word	0x40023800
 8000e34:	40020800 	.word	0x40020800
 8000e38:	40020c00 	.word	0x40020c00
 8000e3c:	200001a8 	.word	0x200001a8
 8000e40:	40026458 	.word	0x40026458
 8000e44:	20000208 	.word	0x20000208
 8000e48:	400264a0 	.word	0x400264a0

08000e4c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000e4c:	4b0a      	ldr	r3, [pc, #40]	; (8000e78 <HAL_MspInit+0x2c>)
{
 8000e4e:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e52:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000e56:	641a      	str	r2, [r3, #64]	; 0x40
 8000e58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e5a:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8000e5e:	9200      	str	r2, [sp, #0]
 8000e60:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e62:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000e64:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000e68:	645a      	str	r2, [r3, #68]	; 0x44
 8000e6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e70:	9301      	str	r3, [sp, #4]
 8000e72:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e74:	b002      	add	sp, #8
 8000e76:	4770      	bx	lr
 8000e78:	40023800 	.word	0x40023800

08000e7c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e7c:	b530      	push	{r4, r5, lr}
 8000e7e:	4601      	mov	r1, r0
 8000e80:	b089      	sub	sp, #36	; 0x24
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000e82:	2200      	movs	r2, #0
 8000e84:	2019      	movs	r0, #25
 8000e86:	f000 f96f 	bl	8001168 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000e8a:	2019      	movs	r0, #25
 8000e8c:	f000 f9a6 	bl	80011dc <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000e90:	4b15      	ldr	r3, [pc, #84]	; (8000ee8 <HAL_InitTick+0x6c>)

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e92:	a901      	add	r1, sp, #4
 8000e94:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000e96:	6c5a      	ldr	r2, [r3, #68]	; 0x44

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e98:	4d14      	ldr	r5, [pc, #80]	; (8000eec <HAL_InitTick+0x70>)
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000e9a:	f042 0201 	orr.w	r2, r2, #1

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000e9e:	4c14      	ldr	r4, [pc, #80]	; (8000ef0 <HAL_InitTick+0x74>)
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000ea0:	645a      	str	r2, [r3, #68]	; 0x44
 8000ea2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea4:	f003 0301 	and.w	r3, r3, #1
 8000ea8:	9302      	str	r3, [sp, #8]
 8000eaa:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000eac:	f000 ff86 	bl	8001dbc <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000eb0:	f000 ff74 	bl	8001d9c <HAL_RCC_GetPCLK2Freq>
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000eb4:	f240 32e7 	movw	r2, #999	; 0x3e7
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000eb8:	0043      	lsls	r3, r0, #1
  htim1.Instance = TIM1;
 8000eba:	490e      	ldr	r1, [pc, #56]	; (8000ef4 <HAL_InitTick+0x78>)
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000ebc:	60e2      	str	r2, [r4, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
  htim1.Init.ClockDivision = 0;
 8000ebe:	2200      	movs	r2, #0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ec0:	fba5 0303 	umull	r0, r3, r5, r3
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000ec4:	4620      	mov	r0, r4
  htim1.Instance = TIM1;
 8000ec6:	6021      	str	r1, [r4, #0]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ec8:	0c9b      	lsrs	r3, r3, #18
  htim1.Init.ClockDivision = 0;
 8000eca:	6122      	str	r2, [r4, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ecc:	60a2      	str	r2, [r4, #8]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ece:	3b01      	subs	r3, #1
  htim1.Init.Prescaler = uwPrescalerValue;
 8000ed0:	6063      	str	r3, [r4, #4]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000ed2:	f001 ff91 	bl	8002df8 <HAL_TIM_Base_Init>
 8000ed6:	b110      	cbz	r0, 8000ede <HAL_InitTick+0x62>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
  }

  /* Return function status */
  return HAL_ERROR;
 8000ed8:	2001      	movs	r0, #1
}
 8000eda:	b009      	add	sp, #36	; 0x24
 8000edc:	bd30      	pop	{r4, r5, pc}
    return HAL_TIM_Base_Start_IT(&htim1);
 8000ede:	4620      	mov	r0, r4
 8000ee0:	f002 f836 	bl	8002f50 <HAL_TIM_Base_Start_IT>
}
 8000ee4:	b009      	add	sp, #36	; 0x24
 8000ee6:	bd30      	pop	{r4, r5, pc}
 8000ee8:	40023800 	.word	0x40023800
 8000eec:	431bde83 	.word	0x431bde83
 8000ef0:	20000268 	.word	0x20000268
 8000ef4:	40010000 	.word	0x40010000

08000ef8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ef8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8000efa:	f000 ff83 	bl	8001e04 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000efe:	e7fe      	b.n	8000efe <NMI_Handler+0x6>

08000f00 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f00:	e7fe      	b.n	8000f00 <HardFault_Handler>
 8000f02:	bf00      	nop

08000f04 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f04:	e7fe      	b.n	8000f04 <MemManage_Handler>
 8000f06:	bf00      	nop

08000f08 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f08:	e7fe      	b.n	8000f08 <BusFault_Handler>
 8000f0a:	bf00      	nop

08000f0c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f0c:	e7fe      	b.n	8000f0c <UsageFault_Handler>
 8000f0e:	bf00      	nop

08000f10 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop

08000f14 <DebugMon_Handler>:
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop

08000f18 <PendSV_Handler>:
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop

08000f1c <SysTick_Handler>:
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop

08000f20 <TIM1_UP_TIM10_IRQHandler>:
void TIM1_UP_TIM10_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f20:	4801      	ldr	r0, [pc, #4]	; (8000f28 <TIM1_UP_TIM10_IRQHandler+0x8>)
 8000f22:	f002 b91f 	b.w	8003164 <HAL_TIM_IRQHandler>
 8000f26:	bf00      	nop
 8000f28:	20000268 	.word	0x20000268

08000f2c <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f2c:	4801      	ldr	r0, [pc, #4]	; (8000f34 <TIM2_IRQHandler+0x8>)
 8000f2e:	f002 b919 	b.w	8003164 <HAL_TIM_IRQHandler>
 8000f32:	bf00      	nop
 8000f34:	200002b4 	.word	0x200002b4

08000f38 <DMA2_Stream3_IRQHandler>:
void DMA2_Stream3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8000f38:	4801      	ldr	r0, [pc, #4]	; (8000f40 <DMA2_Stream3_IRQHandler+0x8>)
 8000f3a:	f000 b9fb 	b.w	8001334 <HAL_DMA_IRQHandler>
 8000f3e:	bf00      	nop
 8000f40:	200001a8 	.word	0x200001a8

08000f44 <DMA2_Stream6_IRQHandler>:
void DMA2_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8000f44:	4801      	ldr	r0, [pc, #4]	; (8000f4c <DMA2_Stream6_IRQHandler+0x8>)
 8000f46:	f000 b9f5 	b.w	8001334 <HAL_DMA_IRQHandler>
 8000f4a:	bf00      	nop
 8000f4c:	20000208 	.word	0x20000208

08000f50 <I2C3_EV_IRQHandler>:
void I2C3_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8000f50:	4801      	ldr	r0, [pc, #4]	; (8000f58 <I2C3_EV_IRQHandler+0x8>)
 8000f52:	f000 bc09 	b.w	8001768 <HAL_I2C_EV_IRQHandler>
 8000f56:	bf00      	nop
 8000f58:	200000d8 	.word	0x200000d8

08000f5c <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8000f5c:	2001      	movs	r0, #1
 8000f5e:	4770      	bx	lr

08000f60 <_kill>:

int _kill(int pid, int sig)
{
 8000f60:	b508      	push	{r3, lr}
	errno = EINVAL;
 8000f62:	f008 fa19 	bl	8009398 <__errno>
 8000f66:	2216      	movs	r2, #22
 8000f68:	4603      	mov	r3, r0
	return -1;
}
 8000f6a:	f04f 30ff 	mov.w	r0, #4294967295
	errno = EINVAL;
 8000f6e:	601a      	str	r2, [r3, #0]
}
 8000f70:	bd08      	pop	{r3, pc}
 8000f72:	bf00      	nop

08000f74 <_exit>:

void _exit (int status)
{
 8000f74:	b508      	push	{r3, lr}
	errno = EINVAL;
 8000f76:	f008 fa0f 	bl	8009398 <__errno>
 8000f7a:	2316      	movs	r3, #22
 8000f7c:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8000f7e:	e7fe      	b.n	8000f7e <_exit+0xa>

08000f80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f80:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f82:	4c0d      	ldr	r4, [pc, #52]	; (8000fb8 <_sbrk+0x38>)
{
 8000f84:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f86:	490d      	ldr	r1, [pc, #52]	; (8000fbc <_sbrk+0x3c>)
 8000f88:	480d      	ldr	r0, [pc, #52]	; (8000fc0 <_sbrk+0x40>)
  if (NULL == __sbrk_heap_end)
 8000f8a:	6822      	ldr	r2, [r4, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f8c:	1a09      	subs	r1, r1, r0
  if (NULL == __sbrk_heap_end)
 8000f8e:	b12a      	cbz	r2, 8000f9c <_sbrk+0x1c>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f90:	4413      	add	r3, r2
 8000f92:	428b      	cmp	r3, r1
 8000f94:	d808      	bhi.n	8000fa8 <_sbrk+0x28>

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8000f96:	4610      	mov	r0, r2
  __sbrk_heap_end += incr;
 8000f98:	6023      	str	r3, [r4, #0]
}
 8000f9a:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8000f9c:	4809      	ldr	r0, [pc, #36]	; (8000fc4 <_sbrk+0x44>)
 8000f9e:	4602      	mov	r2, r0
 8000fa0:	6020      	str	r0, [r4, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8000fa2:	4413      	add	r3, r2
 8000fa4:	428b      	cmp	r3, r1
 8000fa6:	d9f6      	bls.n	8000f96 <_sbrk+0x16>
    errno = ENOMEM;
 8000fa8:	f008 f9f6 	bl	8009398 <__errno>
 8000fac:	230c      	movs	r3, #12
    return (void *)-1;
 8000fae:	f04f 32ff 	mov.w	r2, #4294967295
    errno = ENOMEM;
 8000fb2:	6003      	str	r3, [r0, #0]
}
 8000fb4:	4610      	mov	r0, r2
 8000fb6:	bd10      	pop	{r4, pc}
 8000fb8:	20000094 	.word	0x20000094
 8000fbc:	20050000 	.word	0x20050000
 8000fc0:	00000400 	.word	0x00000400
 8000fc4:	200013c8 	.word	0x200013c8

08000fc8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fc8:	4b05      	ldr	r3, [pc, #20]	; (8000fe0 <SystemInit+0x18>)

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000fca:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fce:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000fd2:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8000fd6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000fda:	6099      	str	r1, [r3, #8]
#endif
}
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	e000ed00 	.word	0xe000ed00

08000fe4 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000fe4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 10000;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fe6:	2300      	movs	r3, #0
{
 8000fe8:	b088      	sub	sp, #32
  htim2.Instance = TIM2;
 8000fea:	4818      	ldr	r0, [pc, #96]	; (800104c <MX_TIM2_Init+0x68>)
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fec:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000ff0:	f242 7210 	movw	r2, #10000	; 0x2710
 8000ff4:	2464      	movs	r4, #100	; 0x64
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ff6:	9304      	str	r3, [sp, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ff8:	9301      	str	r3, [sp, #4]
  htim2.Init.Period = 100;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ffa:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ffc:	6183      	str	r3, [r0, #24]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ffe:	9307      	str	r3, [sp, #28]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001000:	e880 001e 	stmia.w	r0, {r1, r2, r3, r4}
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001004:	e9cd 3305 	strd	r3, r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001008:	e9cd 3302 	strd	r3, r3, [sp, #8]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800100c:	f001 fef4 	bl	8002df8 <HAL_TIM_Base_Init>
 8001010:	b990      	cbnz	r0, 8001038 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001012:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001016:	a904      	add	r1, sp, #16
 8001018:	480c      	ldr	r0, [pc, #48]	; (800104c <MX_TIM2_Init+0x68>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800101a:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800101c:	f001 fff4 	bl	8003008 <HAL_TIM_ConfigClockSource>
 8001020:	b988      	cbnz	r0, 8001046 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001022:	2220      	movs	r2, #32
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001024:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001026:	a901      	add	r1, sp, #4
 8001028:	4808      	ldr	r0, [pc, #32]	; (800104c <MX_TIM2_Init+0x68>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800102a:	9201      	str	r2, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800102c:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800102e:	f002 f951 	bl	80032d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001032:	b920      	cbnz	r0, 800103e <MX_TIM2_Init+0x5a>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001034:	b008      	add	sp, #32
 8001036:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001038:	f7ff fe36 	bl	8000ca8 <Error_Handler>
 800103c:	e7e9      	b.n	8001012 <MX_TIM2_Init+0x2e>
    Error_Handler();
 800103e:	f7ff fe33 	bl	8000ca8 <Error_Handler>
}
 8001042:	b008      	add	sp, #32
 8001044:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001046:	f7ff fe2f 	bl	8000ca8 <Error_Handler>
 800104a:	e7ea      	b.n	8001022 <MX_TIM2_Init+0x3e>
 800104c:	200002b4 	.word	0x200002b4

08001050 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM2)
 8001050:	6803      	ldr	r3, [r0, #0]
 8001052:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001056:	d000      	beq.n	800105a <HAL_TIM_Base_MspInit+0xa>
 8001058:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800105a:	f503 330e 	add.w	r3, r3, #145408	; 0x23800

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800105e:	2200      	movs	r2, #0
 8001060:	201c      	movs	r0, #28
 8001062:	4611      	mov	r1, r2
{
 8001064:	b510      	push	{r4, lr}
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001066:	6c1c      	ldr	r4, [r3, #64]	; 0x40
{
 8001068:	b082      	sub	sp, #8
    __HAL_RCC_TIM2_CLK_ENABLE();
 800106a:	f044 0401 	orr.w	r4, r4, #1
 800106e:	641c      	str	r4, [r3, #64]	; 0x40
 8001070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001072:	f003 0301 	and.w	r3, r3, #1
 8001076:	9301      	str	r3, [sp, #4]
 8001078:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800107a:	f000 f875 	bl	8001168 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800107e:	201c      	movs	r0, #28
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001080:	b002      	add	sp, #8
 8001082:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001086:	f000 b8a9 	b.w	80011dc <HAL_NVIC_EnableIRQ>
 800108a:	bf00      	nop

0800108c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800108c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010c4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001090:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001092:	e003      	b.n	800109c <LoopCopyDataInit>

08001094 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001094:	4b0c      	ldr	r3, [pc, #48]	; (80010c8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001096:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001098:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800109a:	3104      	adds	r1, #4

0800109c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800109c:	480b      	ldr	r0, [pc, #44]	; (80010cc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800109e:	4b0c      	ldr	r3, [pc, #48]	; (80010d0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80010a0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80010a2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80010a4:	d3f6      	bcc.n	8001094 <CopyDataInit>
  ldr  r2, =_sbss
 80010a6:	4a0b      	ldr	r2, [pc, #44]	; (80010d4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80010a8:	e002      	b.n	80010b0 <LoopFillZerobss>

080010aa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80010aa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80010ac:	f842 3b04 	str.w	r3, [r2], #4

080010b0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80010b0:	4b09      	ldr	r3, [pc, #36]	; (80010d8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80010b2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80010b4:	d3f9      	bcc.n	80010aa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010b6:	f7ff ff87 	bl	8000fc8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010ba:	f008 f973 	bl	80093a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010be:	f7ff fcef 	bl	8000aa0 <main>
  bx  lr    
 80010c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010c4:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80010c8:	08009aa4 	.word	0x08009aa4
  ldr  r0, =_sdata
 80010cc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80010d0:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 80010d4:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 80010d8:	200013c4 	.word	0x200013c4

080010dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010dc:	e7fe      	b.n	80010dc <ADC_IRQHandler>
	...

080010e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010e0:	b508      	push	{r3, lr}
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010e2:	2003      	movs	r0, #3
 80010e4:	f000 f82c 	bl	8001140 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010e8:	2000      	movs	r0, #0
 80010ea:	f7ff fec7 	bl	8000e7c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80010ee:	f7ff fead 	bl	8000e4c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 80010f2:	2000      	movs	r0, #0
 80010f4:	bd08      	pop	{r3, pc}
 80010f6:	bf00      	nop

080010f8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80010f8:	4a03      	ldr	r2, [pc, #12]	; (8001108 <HAL_IncTick+0x10>)
 80010fa:	4b04      	ldr	r3, [pc, #16]	; (800110c <HAL_IncTick+0x14>)
 80010fc:	6811      	ldr	r1, [r2, #0]
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	440b      	add	r3, r1
 8001102:	6013      	str	r3, [r2, #0]
}
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	20000300 	.word	0x20000300
 800110c:	20000004 	.word	0x20000004

08001110 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001110:	4b01      	ldr	r3, [pc, #4]	; (8001118 <HAL_GetTick+0x8>)
 8001112:	6818      	ldr	r0, [r3, #0]
}
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	20000300 	.word	0x20000300

0800111c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800111c:	b538      	push	{r3, r4, r5, lr}
 800111e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001120:	f7ff fff6 	bl	8001110 <HAL_GetTick>
 8001124:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001126:	1c63      	adds	r3, r4, #1
 8001128:	d002      	beq.n	8001130 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800112a:	4b04      	ldr	r3, [pc, #16]	; (800113c <HAL_Delay+0x20>)
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001130:	f7ff ffee 	bl	8001110 <HAL_GetTick>
 8001134:	1b43      	subs	r3, r0, r5
 8001136:	42a3      	cmp	r3, r4
 8001138:	d3fa      	bcc.n	8001130 <HAL_Delay+0x14>
  {
  }
}
 800113a:	bd38      	pop	{r3, r4, r5, pc}
 800113c:	20000004 	.word	0x20000004

08001140 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001140:	4907      	ldr	r1, [pc, #28]	; (8001160 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001142:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 8001144:	4b07      	ldr	r3, [pc, #28]	; (8001164 <HAL_NVIC_SetPriorityGrouping+0x24>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001146:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001148:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800114c:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800114e:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 8001152:	4022      	ands	r2, r4
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001154:	f85d 4b04 	ldr.w	r4, [sp], #4
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001158:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 800115a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800115c:	60cb      	str	r3, [r1, #12]
 800115e:	4770      	bx	lr
 8001160:	e000ed00 	.word	0xe000ed00
 8001164:	05fa0000 	.word	0x05fa0000

08001168 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001168:	4b19      	ldr	r3, [pc, #100]	; (80011d0 <HAL_NVIC_SetPriority+0x68>)
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001170:	b430      	push	{r4, r5}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001172:	f1c3 0507 	rsb	r5, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001176:	1d1c      	adds	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001178:	2d04      	cmp	r5, #4
 800117a:	bf28      	it	cs
 800117c:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800117e:	2c06      	cmp	r4, #6
 8001180:	d919      	bls.n	80011b6 <HAL_NVIC_SetPriority+0x4e>
 8001182:	3b03      	subs	r3, #3
 8001184:	f04f 34ff 	mov.w	r4, #4294967295
 8001188:	409c      	lsls	r4, r3
 800118a:	ea22 0204 	bic.w	r2, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800118e:	f04f 34ff 	mov.w	r4, #4294967295
  if ((int32_t)(IRQn) >= 0)
 8001192:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001194:	fa04 f405 	lsl.w	r4, r4, r5
 8001198:	ea21 0104 	bic.w	r1, r1, r4
 800119c:	fa01 f103 	lsl.w	r1, r1, r3
 80011a0:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 80011a4:	db0a      	blt.n	80011bc <HAL_NVIC_SetPriority+0x54>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011a6:	0109      	lsls	r1, r1, #4
 80011a8:	4b0a      	ldr	r3, [pc, #40]	; (80011d4 <HAL_NVIC_SetPriority+0x6c>)
 80011aa:	b2c9      	uxtb	r1, r1
 80011ac:	4403      	add	r3, r0
 80011ae:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80011b2:	bc30      	pop	{r4, r5}
 80011b4:	4770      	bx	lr
 80011b6:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011b8:	4613      	mov	r3, r2
 80011ba:	e7e8      	b.n	800118e <HAL_NVIC_SetPriority+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011bc:	f000 000f 	and.w	r0, r0, #15
 80011c0:	0109      	lsls	r1, r1, #4
 80011c2:	4b05      	ldr	r3, [pc, #20]	; (80011d8 <HAL_NVIC_SetPriority+0x70>)
 80011c4:	b2c9      	uxtb	r1, r1
 80011c6:	4403      	add	r3, r0
 80011c8:	7619      	strb	r1, [r3, #24]
 80011ca:	bc30      	pop	{r4, r5}
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	e000ed00 	.word	0xe000ed00
 80011d4:	e000e100 	.word	0xe000e100
 80011d8:	e000ecfc 	.word	0xe000ecfc

080011dc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80011dc:	2800      	cmp	r0, #0
 80011de:	db07      	blt.n	80011f0 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011e0:	f000 011f 	and.w	r1, r0, #31
 80011e4:	2301      	movs	r3, #1
 80011e6:	0940      	lsrs	r0, r0, #5
 80011e8:	4a02      	ldr	r2, [pc, #8]	; (80011f4 <HAL_NVIC_EnableIRQ+0x18>)
 80011ea:	408b      	lsls	r3, r1
 80011ec:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	e000e100 	.word	0xe000e100

080011f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80011f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011fa:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 80011fc:	f7ff ff88 	bl	8001110 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001200:	2c00      	cmp	r4, #0
 8001202:	d057      	beq.n	80012b4 <HAL_DMA_Init+0xbc>
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001204:	2202      	movs	r2, #2
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001206:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hdma);
 8001208:	2100      	movs	r1, #0
 800120a:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 800120c:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 8001210:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	f022 0201 	bic.w	r2, r2, #1
 800121a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800121c:	e005      	b.n	800122a <HAL_DMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800121e:	f7ff ff77 	bl	8001110 <HAL_GetTick>
 8001222:	1b43      	subs	r3, r0, r5
 8001224:	2b05      	cmp	r3, #5
 8001226:	d83e      	bhi.n	80012a6 <HAL_DMA_Init+0xae>
 8001228:	6823      	ldr	r3, [r4, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	07d1      	lsls	r1, r2, #31
 800122e:	d4f6      	bmi.n	800121e <HAL_DMA_Init+0x26>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001230:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8001234:	68e5      	ldr	r5, [r4, #12]
 8001236:	430a      	orrs	r2, r1
  tmp = hdma->Instance->CR;
 8001238:	681f      	ldr	r7, [r3, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800123a:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800123e:	432a      	orrs	r2, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001240:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
          hdma->Init.Mode                | hdma->Init.Priority;
 8001242:	6a20      	ldr	r0, [r4, #32]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001244:	e9d4 6506 	ldrd	r6, r5, [r4, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001248:	430a      	orrs	r2, r1
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800124a:	4936      	ldr	r1, [pc, #216]	; (8001324 <HAL_DMA_Init+0x12c>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800124c:	4332      	orrs	r2, r6
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800124e:	4039      	ands	r1, r7
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001250:	432a      	orrs	r2, r5

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001252:	6a65      	ldr	r5, [r4, #36]	; 0x24
          hdma->Init.Mode                | hdma->Init.Priority;
 8001254:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001256:	2d04      	cmp	r5, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001258:	ea41 0102 	orr.w	r1, r1, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800125c:	d02c      	beq.n	80012b8 <HAL_DMA_Init+0xc0>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800125e:	6019      	str	r1, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001260:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001262:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001266:	4315      	orrs	r5, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001268:	b2da      	uxtb	r2, r3
 800126a:	492f      	ldr	r1, [pc, #188]	; (8001328 <HAL_DMA_Init+0x130>)
  hdma->Instance->FCR = tmp;
 800126c:	615d      	str	r5, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800126e:	3a10      	subs	r2, #16
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001270:	482e      	ldr	r0, [pc, #184]	; (800132c <HAL_DMA_Init+0x134>)
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001272:	fba1 5102 	umull	r5, r1, r1, r2
  
  if (stream_number > 3U)
 8001276:	2a5f      	cmp	r2, #95	; 0x5f
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001278:	4a2d      	ldr	r2, [pc, #180]	; (8001330 <HAL_DMA_Init+0x138>)
  hdma->State = HAL_DMA_STATE_READY;
 800127a:	f04f 0501 	mov.w	r5, #1
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800127e:	ea4f 1111 	mov.w	r1, r1, lsr #4
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001282:	ea02 0203 	and.w	r2, r2, r3
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001286:	f04f 033f 	mov.w	r3, #63	; 0x3f
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800128a:	5c40      	ldrb	r0, [r0, r1]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800128c:	f04f 0100 	mov.w	r1, #0
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001290:	bf88      	it	hi
 8001292:	3204      	addhi	r2, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001294:	4083      	lsls	r3, r0
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001296:	65e0      	str	r0, [r4, #92]	; 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001298:	65a2      	str	r2, [r4, #88]	; 0x58
  return HAL_OK;
 800129a:	4608      	mov	r0, r1
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800129c:	6093      	str	r3, [r2, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800129e:	6561      	str	r1, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80012a0:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
}
 80012a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80012a6:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80012a8:	2220      	movs	r2, #32
      return HAL_TIMEOUT;
 80012aa:	4618      	mov	r0, r3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80012ac:	6562      	str	r2, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80012ae:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 80012b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80012b4:	2001      	movs	r0, #1
}
 80012b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80012b8:	e9d4 700b 	ldrd	r7, r0, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 80012bc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80012be:	4338      	orrs	r0, r7
 80012c0:	4301      	orrs	r1, r0
  hdma->Instance->CR = tmp;  
 80012c2:	6019      	str	r1, [r3, #0]
  tmp = hdma->Instance->FCR;
 80012c4:	695d      	ldr	r5, [r3, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80012c6:	f025 0507 	bic.w	r5, r5, #7
 80012ca:	4315      	orrs	r5, r2
    tmp |= hdma->Init.FIFOThreshold;
 80012cc:	f045 0504 	orr.w	r5, r5, #4
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80012d0:	2f00      	cmp	r7, #0
 80012d2:	d0c9      	beq.n	8001268 <HAL_DMA_Init+0x70>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80012d4:	b17e      	cbz	r6, 80012f6 <HAL_DMA_Init+0xfe>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80012d6:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
 80012da:	d012      	beq.n	8001302 <HAL_DMA_Init+0x10a>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80012dc:	2a02      	cmp	r2, #2
 80012de:	d903      	bls.n	80012e8 <HAL_DMA_Init+0xf0>
 80012e0:	2a03      	cmp	r2, #3
 80012e2:	d1c1      	bne.n	8001268 <HAL_DMA_Init+0x70>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80012e4:	01fa      	lsls	r2, r7, #7
 80012e6:	d5bf      	bpl.n	8001268 <HAL_DMA_Init+0x70>
        hdma->State = HAL_DMA_STATE_READY;
 80012e8:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80012ea:	2240      	movs	r2, #64	; 0x40
        return HAL_ERROR; 
 80012ec:	4618      	mov	r0, r3
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80012ee:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 80012f0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 80012f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (tmp)
 80012f6:	2a01      	cmp	r2, #1
 80012f8:	d010      	beq.n	800131c <HAL_DMA_Init+0x124>
 80012fa:	f032 0202 	bics.w	r2, r2, #2
 80012fe:	d1b3      	bne.n	8001268 <HAL_DMA_Init+0x70>
 8001300:	e7f0      	b.n	80012e4 <HAL_DMA_Init+0xec>
    switch (tmp)
 8001302:	2a03      	cmp	r2, #3
 8001304:	d8b0      	bhi.n	8001268 <HAL_DMA_Init+0x70>
 8001306:	a101      	add	r1, pc, #4	; (adr r1, 800130c <HAL_DMA_Init+0x114>)
 8001308:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800130c:	080012e9 	.word	0x080012e9
 8001310:	080012e5 	.word	0x080012e5
 8001314:	080012e9 	.word	0x080012e9
 8001318:	0800131d 	.word	0x0800131d
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800131c:	f1b7 7fc0 	cmp.w	r7, #25165824	; 0x1800000
 8001320:	d1a2      	bne.n	8001268 <HAL_DMA_Init+0x70>
 8001322:	e7e1      	b.n	80012e8 <HAL_DMA_Init+0xf0>
 8001324:	f010803f 	.word	0xf010803f
 8001328:	aaaaaaab 	.word	0xaaaaaaab
 800132c:	08009624 	.word	0x08009624
 8001330:	fffffc00 	.word	0xfffffc00

08001334 <HAL_DMA_IRQHandler>:
  uint32_t timeout = SystemCoreClock / 9600;
 8001334:	4b75      	ldr	r3, [pc, #468]	; (800150c <HAL_DMA_IRQHandler+0x1d8>)
  __IO uint32_t count = 0;
 8001336:	2100      	movs	r1, #0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001338:	2208      	movs	r2, #8
{
 800133a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t timeout = SystemCoreClock / 9600;
 800133e:	681d      	ldr	r5, [r3, #0]
{
 8001340:	b082      	sub	sp, #8
 8001342:	4680      	mov	r8, r0
  __IO uint32_t count = 0;
 8001344:	9101      	str	r1, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001346:	e9d0 6316 	ldrd	r6, r3, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 800134a:	6834      	ldr	r4, [r6, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800134c:	409a      	lsls	r2, r3
 800134e:	4222      	tst	r2, r4
 8001350:	d004      	beq.n	800135c <HAL_DMA_IRQHandler+0x28>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001352:	6801      	ldr	r1, [r0, #0]
 8001354:	680f      	ldr	r7, [r1, #0]
 8001356:	0778      	lsls	r0, r7, #29
 8001358:	f100 808a 	bmi.w	8001470 <HAL_DMA_IRQHandler+0x13c>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800135c:	2201      	movs	r2, #1
 800135e:	409a      	lsls	r2, r3
 8001360:	4222      	tst	r2, r4
 8001362:	d004      	beq.n	800136e <HAL_DMA_IRQHandler+0x3a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001364:	f8d8 1000 	ldr.w	r1, [r8]
 8001368:	6949      	ldr	r1, [r1, #20]
 800136a:	0609      	lsls	r1, r1, #24
 800136c:	d478      	bmi.n	8001460 <HAL_DMA_IRQHandler+0x12c>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800136e:	2204      	movs	r2, #4
 8001370:	409a      	lsls	r2, r3
 8001372:	4222      	tst	r2, r4
 8001374:	d004      	beq.n	8001380 <HAL_DMA_IRQHandler+0x4c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001376:	f8d8 1000 	ldr.w	r1, [r8]
 800137a:	6809      	ldr	r1, [r1, #0]
 800137c:	078f      	lsls	r7, r1, #30
 800137e:	d467      	bmi.n	8001450 <HAL_DMA_IRQHandler+0x11c>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001380:	2210      	movs	r2, #16
 8001382:	409a      	lsls	r2, r3
 8001384:	4222      	tst	r2, r4
 8001386:	d004      	beq.n	8001392 <HAL_DMA_IRQHandler+0x5e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001388:	f8d8 1000 	ldr.w	r1, [r8]
 800138c:	680f      	ldr	r7, [r1, #0]
 800138e:	0738      	lsls	r0, r7, #28
 8001390:	d449      	bmi.n	8001426 <HAL_DMA_IRQHandler+0xf2>
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001392:	2220      	movs	r2, #32
 8001394:	409a      	lsls	r2, r3
 8001396:	4222      	tst	r2, r4
 8001398:	d017      	beq.n	80013ca <HAL_DMA_IRQHandler+0x96>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800139a:	f8d8 1000 	ldr.w	r1, [r8]
 800139e:	680c      	ldr	r4, [r1, #0]
 80013a0:	06e0      	lsls	r0, r4, #27
 80013a2:	d512      	bpl.n	80013ca <HAL_DMA_IRQHandler+0x96>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80013a4:	60b2      	str	r2, [r6, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80013a6:	f898 2035 	ldrb.w	r2, [r8, #53]	; 0x35
 80013aa:	2a05      	cmp	r2, #5
 80013ac:	d073      	beq.n	8001496 <HAL_DMA_IRQHandler+0x162>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80013ae:	680b      	ldr	r3, [r1, #0]
 80013b0:	f413 2f80 	tst.w	r3, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80013b4:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80013b6:	f000 8090 	beq.w	80014da <HAL_DMA_IRQHandler+0x1a6>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80013ba:	0319      	lsls	r1, r3, #12
 80013bc:	f140 809b 	bpl.w	80014f6 <HAL_DMA_IRQHandler+0x1c2>
        if(hdma->XferCpltCallback != NULL)
 80013c0:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 80013c4:	b10b      	cbz	r3, 80013ca <HAL_DMA_IRQHandler+0x96>
          hdma->XferCpltCallback(hdma);
 80013c6:	4640      	mov	r0, r8
 80013c8:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80013ca:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 80013ce:	b33b      	cbz	r3, 8001420 <HAL_DMA_IRQHandler+0xec>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80013d0:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 80013d4:	07da      	lsls	r2, r3, #31
 80013d6:	d51b      	bpl.n	8001410 <HAL_DMA_IRQHandler+0xdc>
      __HAL_DMA_DISABLE(hdma);
 80013d8:	f8d8 2000 	ldr.w	r2, [r8]
      hdma->State = HAL_DMA_STATE_ABORT;
 80013dc:	2105      	movs	r1, #5
  uint32_t timeout = SystemCoreClock / 9600;
 80013de:	4b4c      	ldr	r3, [pc, #304]	; (8001510 <HAL_DMA_IRQHandler+0x1dc>)
      hdma->State = HAL_DMA_STATE_ABORT;
 80013e0:	f888 1035 	strb.w	r1, [r8, #53]	; 0x35
  uint32_t timeout = SystemCoreClock / 9600;
 80013e4:	fba3 3505 	umull	r3, r5, r3, r5
      __HAL_DMA_DISABLE(hdma);
 80013e8:	6813      	ldr	r3, [r2, #0]
 80013ea:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600;
 80013ee:	0aad      	lsrs	r5, r5, #10
      __HAL_DMA_DISABLE(hdma);
 80013f0:	6013      	str	r3, [r2, #0]
 80013f2:	e002      	b.n	80013fa <HAL_DMA_IRQHandler+0xc6>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80013f4:	6813      	ldr	r3, [r2, #0]
 80013f6:	07db      	lsls	r3, r3, #31
 80013f8:	d504      	bpl.n	8001404 <HAL_DMA_IRQHandler+0xd0>
        if (++count > timeout)
 80013fa:	9b01      	ldr	r3, [sp, #4]
 80013fc:	3301      	adds	r3, #1
 80013fe:	42ab      	cmp	r3, r5
 8001400:	9301      	str	r3, [sp, #4]
 8001402:	d9f7      	bls.n	80013f4 <HAL_DMA_IRQHandler+0xc0>
      __HAL_UNLOCK(hdma);
 8001404:	2200      	movs	r2, #0
      hdma->State = HAL_DMA_STATE_READY;
 8001406:	2301      	movs	r3, #1
      __HAL_UNLOCK(hdma);
 8001408:	f888 2034 	strb.w	r2, [r8, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 800140c:	f888 3035 	strb.w	r3, [r8, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8001410:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 8001414:	b123      	cbz	r3, 8001420 <HAL_DMA_IRQHandler+0xec>
      hdma->XferErrorCallback(hdma);
 8001416:	4640      	mov	r0, r8
}
 8001418:	b002      	add	sp, #8
 800141a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      hdma->XferErrorCallback(hdma);
 800141e:	4718      	bx	r3
}
 8001420:	b002      	add	sp, #8
 8001422:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001426:	60b2      	str	r2, [r6, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001428:	680a      	ldr	r2, [r1, #0]
 800142a:	f412 2f80 	tst.w	r2, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800142e:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001430:	d12a      	bne.n	8001488 <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001432:	05d7      	lsls	r7, r2, #23
 8001434:	d403      	bmi.n	800143e <HAL_DMA_IRQHandler+0x10a>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001436:	680a      	ldr	r2, [r1, #0]
 8001438:	f022 0208 	bic.w	r2, r2, #8
 800143c:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 800143e:	f8d8 2040 	ldr.w	r2, [r8, #64]	; 0x40
 8001442:	2a00      	cmp	r2, #0
 8001444:	d0a5      	beq.n	8001392 <HAL_DMA_IRQHandler+0x5e>
          hdma->XferHalfCpltCallback(hdma);
 8001446:	4640      	mov	r0, r8
 8001448:	4790      	blx	r2
 800144a:	f8d8 305c 	ldr.w	r3, [r8, #92]	; 0x5c
 800144e:	e7a0      	b.n	8001392 <HAL_DMA_IRQHandler+0x5e>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001450:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001452:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 8001456:	f042 0204 	orr.w	r2, r2, #4
 800145a:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 800145e:	e78f      	b.n	8001380 <HAL_DMA_IRQHandler+0x4c>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001460:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001462:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 8001466:	f042 0202 	orr.w	r2, r2, #2
 800146a:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 800146e:	e77e      	b.n	800136e <HAL_DMA_IRQHandler+0x3a>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001470:	680f      	ldr	r7, [r1, #0]
 8001472:	f027 0704 	bic.w	r7, r7, #4
 8001476:	600f      	str	r7, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001478:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800147a:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 800147e:	f042 0201 	orr.w	r2, r2, #1
 8001482:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 8001486:	e769      	b.n	800135c <HAL_DMA_IRQHandler+0x28>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001488:	0312      	lsls	r2, r2, #12
 800148a:	d5d8      	bpl.n	800143e <HAL_DMA_IRQHandler+0x10a>
          if(hdma->XferM1HalfCpltCallback != NULL)
 800148c:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
 8001490:	2a00      	cmp	r2, #0
 8001492:	d1d8      	bne.n	8001446 <HAL_DMA_IRQHandler+0x112>
 8001494:	e77d      	b.n	8001392 <HAL_DMA_IRQHandler+0x5e>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001496:	680a      	ldr	r2, [r1, #0]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001498:	f8d8 4040 	ldr.w	r4, [r8, #64]	; 0x40
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800149c:	f022 0216 	bic.w	r2, r2, #22
 80014a0:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80014a2:	694a      	ldr	r2, [r1, #20]
 80014a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80014a8:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80014aa:	b354      	cbz	r4, 8001502 <HAL_DMA_IRQHandler+0x1ce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80014ac:	680a      	ldr	r2, [r1, #0]
 80014ae:	f022 0208 	bic.w	r2, r2, #8
 80014b2:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014b4:	223f      	movs	r2, #63	; 0x3f
        __HAL_UNLOCK(hdma);
 80014b6:	2400      	movs	r4, #0
        hdma->State = HAL_DMA_STATE_READY;
 80014b8:	2101      	movs	r1, #1
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014ba:	fa02 f303 	lsl.w	r3, r2, r3
        if(hdma->XferAbortCallback != NULL)
 80014be:	f8d8 2050 	ldr.w	r2, [r8, #80]	; 0x50
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014c2:	60b3      	str	r3, [r6, #8]
        __HAL_UNLOCK(hdma);
 80014c4:	f888 4034 	strb.w	r4, [r8, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 80014c8:	f888 1035 	strb.w	r1, [r8, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 80014cc:	2a00      	cmp	r2, #0
 80014ce:	d0a7      	beq.n	8001420 <HAL_DMA_IRQHandler+0xec>
          hdma->XferAbortCallback(hdma);
 80014d0:	4640      	mov	r0, r8
}
 80014d2:	b002      	add	sp, #8
 80014d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
          hdma->XferAbortCallback(hdma);
 80014d8:	4710      	bx	r2
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80014da:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 80014de:	f47f af6f 	bne.w	80013c0 <HAL_DMA_IRQHandler+0x8c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80014e2:	680a      	ldr	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80014e4:	2401      	movs	r4, #1
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80014e6:	f022 0210 	bic.w	r2, r2, #16
 80014ea:	600a      	str	r2, [r1, #0]
          __HAL_UNLOCK(hdma);
 80014ec:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 80014f0:	f888 4035 	strb.w	r4, [r8, #53]	; 0x35
 80014f4:	e764      	b.n	80013c0 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1CpltCallback != NULL)
 80014f6:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	f47f af63 	bne.w	80013c6 <HAL_DMA_IRQHandler+0x92>
 8001500:	e763      	b.n	80013ca <HAL_DMA_IRQHandler+0x96>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001502:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
 8001506:	2a00      	cmp	r2, #0
 8001508:	d1d0      	bne.n	80014ac <HAL_DMA_IRQHandler+0x178>
 800150a:	e7d3      	b.n	80014b4 <HAL_DMA_IRQHandler+0x180>
 800150c:	20000000 	.word	0x20000000
 8001510:	1b4e81b5 	.word	0x1b4e81b5

08001514 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001518:	2300      	movs	r3, #0
{
 800151a:	b085      	sub	sp, #20
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800151c:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800174c <HAL_GPIO_Init+0x238>
 8001520:	680d      	ldr	r5, [r1, #0]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001522:	f8df e22c 	ldr.w	lr, [pc, #556]	; 8001750 <HAL_GPIO_Init+0x23c>
 8001526:	e002      	b.n	800152e <HAL_GPIO_Init+0x1a>
  for(position = 0; position < GPIO_NUMBER; position++)
 8001528:	3301      	adds	r3, #1
 800152a:	2b10      	cmp	r3, #16
 800152c:	d057      	beq.n	80015de <HAL_GPIO_Init+0xca>
    ioposition = ((uint32_t)0x01) << position;
 800152e:	2201      	movs	r2, #1
 8001530:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001532:	ea02 0a05 	and.w	sl, r2, r5
    if(iocurrent == ioposition)
 8001536:	43aa      	bics	r2, r5
 8001538:	d1f6      	bne.n	8001528 <HAL_GPIO_Init+0x14>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800153a:	684a      	ldr	r2, [r1, #4]
 800153c:	005f      	lsls	r7, r3, #1
 800153e:	f022 0c10 	bic.w	ip, r2, #16
 8001542:	f10c 34ff 	add.w	r4, ip, #4294967295
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001546:	2c01      	cmp	r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001548:	f04f 0403 	mov.w	r4, #3
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800154c:	f200 80c0 	bhi.w	80016d0 <HAL_GPIO_Init+0x1bc>
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001550:	f3c2 1600 	ubfx	r6, r2, #4, #1
        temp = GPIOx->OSPEEDR; 
 8001554:	f8d0 8008 	ldr.w	r8, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001558:	40bc      	lsls	r4, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800155a:	409e      	lsls	r6, r3
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800155c:	ea28 0804 	bic.w	r8, r8, r4
 8001560:	43e4      	mvns	r4, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001562:	9601      	str	r6, [sp, #4]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001564:	68ce      	ldr	r6, [r1, #12]
 8001566:	fa06 f907 	lsl.w	r9, r6, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800156a:	9e01      	ldr	r6, [sp, #4]
        temp |= (GPIO_Init->Speed << (position * 2));
 800156c:	ea49 0808 	orr.w	r8, r9, r8
        GPIOx->OSPEEDR = temp;
 8001570:	f8c0 8008 	str.w	r8, [r0, #8]
        temp = GPIOx->OTYPER;
 8001574:	f8d0 8004 	ldr.w	r8, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001578:	ea28 080a 	bic.w	r8, r8, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800157c:	ea46 0608 	orr.w	r6, r6, r8
        GPIOx->OTYPER = temp;
 8001580:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 8001582:	68c6      	ldr	r6, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001584:	f1bc 0f02 	cmp.w	ip, #2
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001588:	ea06 0804 	and.w	r8, r6, r4
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800158c:	688e      	ldr	r6, [r1, #8]
 800158e:	fa06 f607 	lsl.w	r6, r6, r7
 8001592:	ea46 0608 	orr.w	r6, r6, r8
      GPIOx->PUPDR = temp;
 8001596:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001598:	d124      	bne.n	80015e4 <HAL_GPIO_Init+0xd0>
        temp = GPIOx->AFR[position >> 3];
 800159a:	08de      	lsrs	r6, r3, #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800159c:	f003 0c07 	and.w	ip, r3, #7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80015a0:	f002 0203 	and.w	r2, r2, #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80015a4:	f04f 080f 	mov.w	r8, #15
 80015a8:	eb00 0686 	add.w	r6, r0, r6, lsl #2
  for(position = 0; position < GPIO_NUMBER; position++)
 80015ac:	3301      	adds	r3, #1
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80015ae:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80015b2:	fa02 f707 	lsl.w	r7, r2, r7
        temp = GPIOx->AFR[position >> 3];
 80015b6:	f8d6 9020 	ldr.w	r9, [r6, #32]
  for(position = 0; position < GPIO_NUMBER; position++)
 80015ba:	2b10      	cmp	r3, #16
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80015bc:	690a      	ldr	r2, [r1, #16]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80015be:	fa08 f80c 	lsl.w	r8, r8, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80015c2:	fa02 fc0c 	lsl.w	ip, r2, ip
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80015c6:	ea29 0208 	bic.w	r2, r9, r8
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80015ca:	ea4c 0202 	orr.w	r2, ip, r2
        GPIOx->AFR[position >> 3] = temp;
 80015ce:	6232      	str	r2, [r6, #32]
      temp = GPIOx->MODER;
 80015d0:	6802      	ldr	r2, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80015d2:	ea04 0402 	and.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80015d6:	ea44 0407 	orr.w	r4, r4, r7
      GPIOx->MODER = temp;
 80015da:	6004      	str	r4, [r0, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80015dc:	d1a7      	bne.n	800152e <HAL_GPIO_Init+0x1a>
        }
        EXTI->FTSR = temp;
      }
    }
  }
}
 80015de:	b005      	add	sp, #20
 80015e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      temp = GPIOx->MODER;
 80015e4:	f8d0 c000 	ldr.w	ip, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80015e8:	f002 0603 	and.w	r6, r2, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80015ec:	ea0c 0c04 	and.w	ip, ip, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80015f0:	fa06 f707 	lsl.w	r7, r6, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015f4:	00d4      	lsls	r4, r2, #3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80015f6:	ea47 070c 	orr.w	r7, r7, ip
      GPIOx->MODER = temp;
 80015fa:	6007      	str	r7, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015fc:	d594      	bpl.n	8001528 <HAL_GPIO_Init+0x14>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015fe:	f8db 7044 	ldr.w	r7, [fp, #68]	; 0x44
 8001602:	f023 0c03 	bic.w	ip, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001606:	f003 0403 	and.w	r4, r3, #3
 800160a:	260f      	movs	r6, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800160c:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8001610:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001614:	00a4      	lsls	r4, r4, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001616:	f8cb 7044 	str.w	r7, [fp, #68]	; 0x44
 800161a:	f50c 3c9c 	add.w	ip, ip, #79872	; 0x13800
 800161e:	f8db 7044 	ldr.w	r7, [fp, #68]	; 0x44
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001622:	fa06 f804 	lsl.w	r8, r6, r4
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001626:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 800162a:	9703      	str	r7, [sp, #12]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800162c:	4f3e      	ldr	r7, [pc, #248]	; (8001728 <HAL_GPIO_Init+0x214>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800162e:	9e03      	ldr	r6, [sp, #12]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001630:	42b8      	cmp	r0, r7
        temp = SYSCFG->EXTICR[position >> 2];
 8001632:	f8dc 6008 	ldr.w	r6, [ip, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001636:	ea26 0608 	bic.w	r6, r6, r8
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800163a:	d020      	beq.n	800167e <HAL_GPIO_Init+0x16a>
 800163c:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8001640:	42b8      	cmp	r0, r7
 8001642:	d048      	beq.n	80016d6 <HAL_GPIO_Init+0x1c2>
 8001644:	4f39      	ldr	r7, [pc, #228]	; (800172c <HAL_GPIO_Init+0x218>)
 8001646:	42b8      	cmp	r0, r7
 8001648:	d04a      	beq.n	80016e0 <HAL_GPIO_Init+0x1cc>
 800164a:	4f39      	ldr	r7, [pc, #228]	; (8001730 <HAL_GPIO_Init+0x21c>)
 800164c:	42b8      	cmp	r0, r7
 800164e:	d04c      	beq.n	80016ea <HAL_GPIO_Init+0x1d6>
 8001650:	4f38      	ldr	r7, [pc, #224]	; (8001734 <HAL_GPIO_Init+0x220>)
 8001652:	42b8      	cmp	r0, r7
 8001654:	d04e      	beq.n	80016f4 <HAL_GPIO_Init+0x1e0>
 8001656:	4f38      	ldr	r7, [pc, #224]	; (8001738 <HAL_GPIO_Init+0x224>)
 8001658:	42b8      	cmp	r0, r7
 800165a:	d055      	beq.n	8001708 <HAL_GPIO_Init+0x1f4>
 800165c:	4f37      	ldr	r7, [pc, #220]	; (800173c <HAL_GPIO_Init+0x228>)
 800165e:	42b8      	cmp	r0, r7
 8001660:	d057      	beq.n	8001712 <HAL_GPIO_Init+0x1fe>
 8001662:	4f37      	ldr	r7, [pc, #220]	; (8001740 <HAL_GPIO_Init+0x22c>)
 8001664:	42b8      	cmp	r0, r7
 8001666:	d04a      	beq.n	80016fe <HAL_GPIO_Init+0x1ea>
 8001668:	4f36      	ldr	r7, [pc, #216]	; (8001744 <HAL_GPIO_Init+0x230>)
 800166a:	42b8      	cmp	r0, r7
 800166c:	d056      	beq.n	800171c <HAL_GPIO_Init+0x208>
 800166e:	4f36      	ldr	r7, [pc, #216]	; (8001748 <HAL_GPIO_Init+0x234>)
 8001670:	42b8      	cmp	r0, r7
 8001672:	bf0c      	ite	eq
 8001674:	2709      	moveq	r7, #9
 8001676:	270a      	movne	r7, #10
 8001678:	fa07 f404 	lsl.w	r4, r7, r4
 800167c:	4326      	orrs	r6, r4
        SYSCFG->EXTICR[position >> 2] = temp;
 800167e:	f8cc 6008 	str.w	r6, [ip, #8]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001682:	03d7      	lsls	r7, r2, #15
        temp = EXTI->IMR;
 8001684:	f8de 4000 	ldr.w	r4, [lr]
        temp &= ~((uint32_t)iocurrent);
 8001688:	ea6f 060a 	mvn.w	r6, sl
          temp |= iocurrent;
 800168c:	bf4c      	ite	mi
 800168e:	ea4a 0404 	orrmi.w	r4, sl, r4
        temp &= ~((uint32_t)iocurrent);
 8001692:	4034      	andpl	r4, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001694:	0397      	lsls	r7, r2, #14
        EXTI->IMR = temp;
 8001696:	f8ce 4000 	str.w	r4, [lr]
        temp = EXTI->EMR;
 800169a:	f8de 4004 	ldr.w	r4, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
 800169e:	bf54      	ite	pl
 80016a0:	4034      	andpl	r4, r6
          temp |= iocurrent;
 80016a2:	ea4a 0404 	orrmi.w	r4, sl, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016a6:	02d7      	lsls	r7, r2, #11
        EXTI->EMR = temp;
 80016a8:	f8ce 4004 	str.w	r4, [lr, #4]
        temp = EXTI->RTSR;
 80016ac:	f8de 4008 	ldr.w	r4, [lr, #8]
        temp &= ~((uint32_t)iocurrent);
 80016b0:	bf54      	ite	pl
 80016b2:	4034      	andpl	r4, r6
          temp |= iocurrent;
 80016b4:	ea4a 0404 	orrmi.w	r4, sl, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016b8:	0292      	lsls	r2, r2, #10
        EXTI->RTSR = temp;
 80016ba:	f8ce 4008 	str.w	r4, [lr, #8]
        temp = EXTI->FTSR;
 80016be:	f8de 400c 	ldr.w	r4, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
 80016c2:	bf54      	ite	pl
 80016c4:	4034      	andpl	r4, r6
          temp |= iocurrent;
 80016c6:	ea4a 0404 	orrmi.w	r4, sl, r4
        EXTI->FTSR = temp;
 80016ca:	f8ce 400c 	str.w	r4, [lr, #12]
 80016ce:	e72b      	b.n	8001528 <HAL_GPIO_Init+0x14>
 80016d0:	40bc      	lsls	r4, r7
 80016d2:	43e4      	mvns	r4, r4
 80016d4:	e755      	b.n	8001582 <HAL_GPIO_Init+0x6e>
 80016d6:	2701      	movs	r7, #1
 80016d8:	fa07 f404 	lsl.w	r4, r7, r4
 80016dc:	4326      	orrs	r6, r4
 80016de:	e7ce      	b.n	800167e <HAL_GPIO_Init+0x16a>
 80016e0:	2702      	movs	r7, #2
 80016e2:	fa07 f404 	lsl.w	r4, r7, r4
 80016e6:	4326      	orrs	r6, r4
 80016e8:	e7c9      	b.n	800167e <HAL_GPIO_Init+0x16a>
 80016ea:	2703      	movs	r7, #3
 80016ec:	fa07 f404 	lsl.w	r4, r7, r4
 80016f0:	4326      	orrs	r6, r4
 80016f2:	e7c4      	b.n	800167e <HAL_GPIO_Init+0x16a>
 80016f4:	2704      	movs	r7, #4
 80016f6:	fa07 f404 	lsl.w	r4, r7, r4
 80016fa:	4326      	orrs	r6, r4
 80016fc:	e7bf      	b.n	800167e <HAL_GPIO_Init+0x16a>
 80016fe:	2707      	movs	r7, #7
 8001700:	fa07 f404 	lsl.w	r4, r7, r4
 8001704:	4326      	orrs	r6, r4
 8001706:	e7ba      	b.n	800167e <HAL_GPIO_Init+0x16a>
 8001708:	2705      	movs	r7, #5
 800170a:	fa07 f404 	lsl.w	r4, r7, r4
 800170e:	4326      	orrs	r6, r4
 8001710:	e7b5      	b.n	800167e <HAL_GPIO_Init+0x16a>
 8001712:	2706      	movs	r7, #6
 8001714:	fa07 f404 	lsl.w	r4, r7, r4
 8001718:	4326      	orrs	r6, r4
 800171a:	e7b0      	b.n	800167e <HAL_GPIO_Init+0x16a>
 800171c:	2708      	movs	r7, #8
 800171e:	fa07 f404 	lsl.w	r4, r7, r4
 8001722:	4326      	orrs	r6, r4
 8001724:	e7ab      	b.n	800167e <HAL_GPIO_Init+0x16a>
 8001726:	bf00      	nop
 8001728:	40020000 	.word	0x40020000
 800172c:	40020800 	.word	0x40020800
 8001730:	40020c00 	.word	0x40020c00
 8001734:	40021000 	.word	0x40021000
 8001738:	40021400 	.word	0x40021400
 800173c:	40021800 	.word	0x40021800
 8001740:	40021c00 	.word	0x40021c00
 8001744:	40022000 	.word	0x40022000
 8001748:	40022400 	.word	0x40022400
 800174c:	40023800 	.word	0x40023800
 8001750:	40013c00 	.word	0x40013c00

08001754 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001754:	6903      	ldr	r3, [r0, #16]
 8001756:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8001758:	bf14      	ite	ne
 800175a:	2001      	movne	r0, #1
 800175c:	2000      	moveq	r0, #0
 800175e:	4770      	bx	lr

08001760 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001760:	b902      	cbnz	r2, 8001764 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001762:	0409      	lsls	r1, r1, #16
 8001764:	6181      	str	r1, [r0, #24]
  }
}
 8001766:	4770      	bx	lr

08001768 <HAL_I2C_EV_IRQHandler>:
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001768:	6802      	ldr	r2, [r0, #0]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800176a:	6b43      	ldr	r3, [r0, #52]	; 0x34
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800176c:	6991      	ldr	r1, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800176e:	6812      	ldr	r2, [r2, #0]
  if (hi2c->XferISR != NULL)
 8001770:	b103      	cbz	r3, 8001774 <HAL_I2C_EV_IRQHandler+0xc>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001772:	4718      	bx	r3
  }
}
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop

08001778 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8001778:	4a1b      	ldr	r2, [pc, #108]	; (80017e8 <HAL_PWREx_EnableOverDrive+0x70>)
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800177a:	4b1c      	ldr	r3, [pc, #112]	; (80017ec <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800177c:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800177e:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
{
 8001782:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8001784:	6411      	str	r1, [r2, #64]	; 0x40
{
 8001786:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 8001788:	6c12      	ldr	r2, [r2, #64]	; 0x40

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800178a:	461d      	mov	r5, r3
  __HAL_RCC_PWR_CLK_ENABLE();
 800178c:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8001790:	9201      	str	r2, [sp, #4]
 8001792:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800179a:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 800179c:	f7ff fcb8 	bl	8001110 <HAL_GetTick>
 80017a0:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80017a2:	e005      	b.n	80017b0 <HAL_PWREx_EnableOverDrive+0x38>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80017a4:	f7ff fcb4 	bl	8001110 <HAL_GetTick>
 80017a8:	1b00      	subs	r0, r0, r4
 80017aa:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80017ae:	d817      	bhi.n	80017e0 <HAL_PWREx_EnableOverDrive+0x68>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80017b0:	686b      	ldr	r3, [r5, #4]
 80017b2:	03da      	lsls	r2, r3, #15
 80017b4:	d5f6      	bpl.n	80017a4 <HAL_PWREx_EnableOverDrive+0x2c>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80017b6:	682b      	ldr	r3, [r5, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80017b8:	4e0c      	ldr	r6, [pc, #48]	; (80017ec <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80017ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017be:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 80017c0:	f7ff fca6 	bl	8001110 <HAL_GetTick>
 80017c4:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80017c6:	e005      	b.n	80017d4 <HAL_PWREx_EnableOverDrive+0x5c>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80017c8:	f7ff fca2 	bl	8001110 <HAL_GetTick>
 80017cc:	1b00      	subs	r0, r0, r4
 80017ce:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80017d2:	d805      	bhi.n	80017e0 <HAL_PWREx_EnableOverDrive+0x68>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80017d4:	6873      	ldr	r3, [r6, #4]
 80017d6:	039b      	lsls	r3, r3, #14
 80017d8:	d5f6      	bpl.n	80017c8 <HAL_PWREx_EnableOverDrive+0x50>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 80017da:	2000      	movs	r0, #0
}
 80017dc:	b002      	add	sp, #8
 80017de:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_TIMEOUT;
 80017e0:	2003      	movs	r0, #3
}
 80017e2:	b002      	add	sp, #8
 80017e4:	bd70      	pop	{r4, r5, r6, pc}
 80017e6:	bf00      	nop
 80017e8:	40023800 	.word	0x40023800
 80017ec:	40007000 	.word	0x40007000

080017f0 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017f0:	2800      	cmp	r0, #0
 80017f2:	f000 81c1 	beq.w	8001b78 <HAL_RCC_OscConfig+0x388>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017f6:	6803      	ldr	r3, [r0, #0]
{
 80017f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017fc:	07dd      	lsls	r5, r3, #31
{
 80017fe:	b082      	sub	sp, #8
 8001800:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001802:	d535      	bpl.n	8001870 <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001804:	49ac      	ldr	r1, [pc, #688]	; (8001ab8 <HAL_RCC_OscConfig+0x2c8>)
 8001806:	688a      	ldr	r2, [r1, #8]
 8001808:	f002 020c 	and.w	r2, r2, #12
 800180c:	2a04      	cmp	r2, #4
 800180e:	f000 80e6 	beq.w	80019de <HAL_RCC_OscConfig+0x1ee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001812:	688a      	ldr	r2, [r1, #8]
 8001814:	f002 020c 	and.w	r2, r2, #12
 8001818:	2a08      	cmp	r2, #8
 800181a:	f000 80dc 	beq.w	80019d6 <HAL_RCC_OscConfig+0x1e6>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800181e:	6863      	ldr	r3, [r4, #4]
 8001820:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001824:	d010      	beq.n	8001848 <HAL_RCC_OscConfig+0x58>
 8001826:	2b00      	cmp	r3, #0
 8001828:	f000 8104 	beq.w	8001a34 <HAL_RCC_OscConfig+0x244>
 800182c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001830:	4ba1      	ldr	r3, [pc, #644]	; (8001ab8 <HAL_RCC_OscConfig+0x2c8>)
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	f000 8190 	beq.w	8001b58 <HAL_RCC_OscConfig+0x368>
 8001838:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800183c:	601a      	str	r2, [r3, #0]
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001844:	601a      	str	r2, [r3, #0]
 8001846:	e004      	b.n	8001852 <HAL_RCC_OscConfig+0x62>
 8001848:	4a9b      	ldr	r2, [pc, #620]	; (8001ab8 <HAL_RCC_OscConfig+0x2c8>)
 800184a:	6813      	ldr	r3, [r2, #0]
 800184c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001850:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001852:	f7ff fc5d 	bl	8001110 <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001856:	4e98      	ldr	r6, [pc, #608]	; (8001ab8 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8001858:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800185a:	e005      	b.n	8001868 <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800185c:	f7ff fc58 	bl	8001110 <HAL_GetTick>
 8001860:	1b40      	subs	r0, r0, r5
 8001862:	2864      	cmp	r0, #100	; 0x64
 8001864:	f200 80e2 	bhi.w	8001a2c <HAL_RCC_OscConfig+0x23c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001868:	6833      	ldr	r3, [r6, #0]
 800186a:	039a      	lsls	r2, r3, #14
 800186c:	d5f6      	bpl.n	800185c <HAL_RCC_OscConfig+0x6c>
 800186e:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001870:	079f      	lsls	r7, r3, #30
 8001872:	d529      	bpl.n	80018c8 <HAL_RCC_OscConfig+0xd8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001874:	4a90      	ldr	r2, [pc, #576]	; (8001ab8 <HAL_RCC_OscConfig+0x2c8>)
 8001876:	6891      	ldr	r1, [r2, #8]
 8001878:	f011 0f0c 	tst.w	r1, #12
 800187c:	f000 8082 	beq.w	8001984 <HAL_RCC_OscConfig+0x194>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001880:	6891      	ldr	r1, [r2, #8]
 8001882:	f001 010c 	and.w	r1, r1, #12
 8001886:	2908      	cmp	r1, #8
 8001888:	d079      	beq.n	800197e <HAL_RCC_OscConfig+0x18e>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800188a:	68e3      	ldr	r3, [r4, #12]
 800188c:	2b00      	cmp	r3, #0
 800188e:	f000 8109 	beq.w	8001aa4 <HAL_RCC_OscConfig+0x2b4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001892:	4b89      	ldr	r3, [pc, #548]	; (8001ab8 <HAL_RCC_OscConfig+0x2c8>)
 8001894:	681a      	ldr	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001896:	461e      	mov	r6, r3
        __HAL_RCC_HSI_ENABLE();
 8001898:	f042 0201 	orr.w	r2, r2, #1
 800189c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800189e:	f7ff fc37 	bl	8001110 <HAL_GetTick>
 80018a2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018a4:	e005      	b.n	80018b2 <HAL_RCC_OscConfig+0xc2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018a6:	f7ff fc33 	bl	8001110 <HAL_GetTick>
 80018aa:	1b40      	subs	r0, r0, r5
 80018ac:	2802      	cmp	r0, #2
 80018ae:	f200 80bd 	bhi.w	8001a2c <HAL_RCC_OscConfig+0x23c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018b2:	6833      	ldr	r3, [r6, #0]
 80018b4:	0798      	lsls	r0, r3, #30
 80018b6:	d5f6      	bpl.n	80018a6 <HAL_RCC_OscConfig+0xb6>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018b8:	6833      	ldr	r3, [r6, #0]
 80018ba:	6922      	ldr	r2, [r4, #16]
 80018bc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80018c0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80018c4:	6033      	str	r3, [r6, #0]
 80018c6:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018c8:	071a      	lsls	r2, r3, #28
 80018ca:	d41f      	bmi.n	800190c <HAL_RCC_OscConfig+0x11c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018cc:	075d      	lsls	r5, r3, #29
 80018ce:	d535      	bpl.n	800193c <HAL_RCC_OscConfig+0x14c>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018d0:	4b79      	ldr	r3, [pc, #484]	; (8001ab8 <HAL_RCC_OscConfig+0x2c8>)
 80018d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018d4:	00d0      	lsls	r0, r2, #3
 80018d6:	d573      	bpl.n	80019c0 <HAL_RCC_OscConfig+0x1d0>
  FlagStatus pwrclkchanged = RESET;
 80018d8:	2500      	movs	r5, #0
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018da:	4b78      	ldr	r3, [pc, #480]	; (8001abc <HAL_RCC_OscConfig+0x2cc>)
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	05d1      	lsls	r1, r2, #23
 80018e0:	f140 8093 	bpl.w	8001a0a <HAL_RCC_OscConfig+0x21a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018e4:	68a3      	ldr	r3, [r4, #8]
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	f000 80f4 	beq.w	8001ad4 <HAL_RCC_OscConfig+0x2e4>
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	f000 80b8 	beq.w	8001a62 <HAL_RCC_OscConfig+0x272>
 80018f2:	2b05      	cmp	r3, #5
 80018f4:	4b70      	ldr	r3, [pc, #448]	; (8001ab8 <HAL_RCC_OscConfig+0x2c8>)
 80018f6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80018f8:	f000 8136 	beq.w	8001b68 <HAL_RCC_OscConfig+0x378>
 80018fc:	f022 0201 	bic.w	r2, r2, #1
 8001900:	671a      	str	r2, [r3, #112]	; 0x70
 8001902:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001904:	f022 0204 	bic.w	r2, r2, #4
 8001908:	671a      	str	r2, [r3, #112]	; 0x70
 800190a:	e0e8      	b.n	8001ade <HAL_RCC_OscConfig+0x2ee>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800190c:	6963      	ldr	r3, [r4, #20]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d043      	beq.n	800199a <HAL_RCC_OscConfig+0x1aa>
      __HAL_RCC_LSI_ENABLE();
 8001912:	4b69      	ldr	r3, [pc, #420]	; (8001ab8 <HAL_RCC_OscConfig+0x2c8>)
 8001914:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001916:	461e      	mov	r6, r3
      __HAL_RCC_LSI_ENABLE();
 8001918:	f042 0201 	orr.w	r2, r2, #1
 800191c:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 800191e:	f7ff fbf7 	bl	8001110 <HAL_GetTick>
 8001922:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001924:	e004      	b.n	8001930 <HAL_RCC_OscConfig+0x140>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001926:	f7ff fbf3 	bl	8001110 <HAL_GetTick>
 800192a:	1b40      	subs	r0, r0, r5
 800192c:	2802      	cmp	r0, #2
 800192e:	d87d      	bhi.n	8001a2c <HAL_RCC_OscConfig+0x23c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001930:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8001932:	079b      	lsls	r3, r3, #30
 8001934:	d5f7      	bpl.n	8001926 <HAL_RCC_OscConfig+0x136>
 8001936:	6823      	ldr	r3, [r4, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001938:	075d      	lsls	r5, r3, #29
 800193a:	d4c9      	bmi.n	80018d0 <HAL_RCC_OscConfig+0xe0>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800193c:	69a0      	ldr	r0, [r4, #24]
 800193e:	b1d0      	cbz	r0, 8001976 <HAL_RCC_OscConfig+0x186>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001940:	4b5d      	ldr	r3, [pc, #372]	; (8001ab8 <HAL_RCC_OscConfig+0x2c8>)
 8001942:	689a      	ldr	r2, [r3, #8]
 8001944:	f002 020c 	and.w	r2, r2, #12
 8001948:	2a08      	cmp	r2, #8
 800194a:	f000 80db 	beq.w	8001b04 <HAL_RCC_OscConfig+0x314>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800194e:	681a      	ldr	r2, [r3, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001950:	2802      	cmp	r0, #2

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001952:	461d      	mov	r5, r3
        __HAL_RCC_PLL_DISABLE();
 8001954:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8001958:	601a      	str	r2, [r3, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800195a:	f000 810f 	beq.w	8001b7c <HAL_RCC_OscConfig+0x38c>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800195e:	f7ff fbd7 	bl	8001110 <HAL_GetTick>
 8001962:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001964:	e004      	b.n	8001970 <HAL_RCC_OscConfig+0x180>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001966:	f7ff fbd3 	bl	8001110 <HAL_GetTick>
 800196a:	1b00      	subs	r0, r0, r4
 800196c:	2802      	cmp	r0, #2
 800196e:	d85d      	bhi.n	8001a2c <HAL_RCC_OscConfig+0x23c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001970:	682b      	ldr	r3, [r5, #0]
 8001972:	019b      	lsls	r3, r3, #6
 8001974:	d4f7      	bmi.n	8001966 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8001976:	2000      	movs	r0, #0
}
 8001978:	b002      	add	sp, #8
 800197a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800197e:	6852      	ldr	r2, [r2, #4]
 8001980:	0256      	lsls	r6, r2, #9
 8001982:	d482      	bmi.n	800188a <HAL_RCC_OscConfig+0x9a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001984:	4a4c      	ldr	r2, [pc, #304]	; (8001ab8 <HAL_RCC_OscConfig+0x2c8>)
 8001986:	6812      	ldr	r2, [r2, #0]
 8001988:	0795      	lsls	r5, r2, #30
 800198a:	d532      	bpl.n	80019f2 <HAL_RCC_OscConfig+0x202>
 800198c:	68e2      	ldr	r2, [r4, #12]
 800198e:	2a01      	cmp	r2, #1
 8001990:	d02f      	beq.n	80019f2 <HAL_RCC_OscConfig+0x202>
        return HAL_ERROR;
 8001992:	2001      	movs	r0, #1
}
 8001994:	b002      	add	sp, #8
 8001996:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 800199a:	4b47      	ldr	r3, [pc, #284]	; (8001ab8 <HAL_RCC_OscConfig+0x2c8>)
 800199c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800199e:	461e      	mov	r6, r3
      __HAL_RCC_LSI_DISABLE();
 80019a0:	f022 0201 	bic.w	r2, r2, #1
 80019a4:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 80019a6:	f7ff fbb3 	bl	8001110 <HAL_GetTick>
 80019aa:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019ac:	e004      	b.n	80019b8 <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019ae:	f7ff fbaf 	bl	8001110 <HAL_GetTick>
 80019b2:	1b40      	subs	r0, r0, r5
 80019b4:	2802      	cmp	r0, #2
 80019b6:	d839      	bhi.n	8001a2c <HAL_RCC_OscConfig+0x23c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019b8:	6f73      	ldr	r3, [r6, #116]	; 0x74
 80019ba:	079f      	lsls	r7, r3, #30
 80019bc:	d4f7      	bmi.n	80019ae <HAL_RCC_OscConfig+0x1be>
 80019be:	e7ba      	b.n	8001936 <HAL_RCC_OscConfig+0x146>
      __HAL_RCC_PWR_CLK_ENABLE();
 80019c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 80019c2:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80019c4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80019c8:	641a      	str	r2, [r3, #64]	; 0x40
 80019ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019d0:	9301      	str	r3, [sp, #4]
 80019d2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80019d4:	e781      	b.n	80018da <HAL_RCC_OscConfig+0xea>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019d6:	684a      	ldr	r2, [r1, #4]
 80019d8:	0250      	lsls	r0, r2, #9
 80019da:	f57f af20 	bpl.w	800181e <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019de:	4a36      	ldr	r2, [pc, #216]	; (8001ab8 <HAL_RCC_OscConfig+0x2c8>)
 80019e0:	6812      	ldr	r2, [r2, #0]
 80019e2:	0391      	lsls	r1, r2, #14
 80019e4:	f57f af44 	bpl.w	8001870 <HAL_RCC_OscConfig+0x80>
 80019e8:	6862      	ldr	r2, [r4, #4]
 80019ea:	2a00      	cmp	r2, #0
 80019ec:	f47f af40 	bne.w	8001870 <HAL_RCC_OscConfig+0x80>
 80019f0:	e7cf      	b.n	8001992 <HAL_RCC_OscConfig+0x1a2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019f2:	4931      	ldr	r1, [pc, #196]	; (8001ab8 <HAL_RCC_OscConfig+0x2c8>)
 80019f4:	6920      	ldr	r0, [r4, #16]
 80019f6:	680a      	ldr	r2, [r1, #0]
 80019f8:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80019fc:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8001a00:	600a      	str	r2, [r1, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a02:	071a      	lsls	r2, r3, #28
 8001a04:	f57f af62 	bpl.w	80018cc <HAL_RCC_OscConfig+0xdc>
 8001a08:	e780      	b.n	800190c <HAL_RCC_OscConfig+0x11c>
      PWR->CR1 |= PWR_CR1_DBP;
 8001a0a:	681a      	ldr	r2, [r3, #0]
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a0c:	461f      	mov	r7, r3
      PWR->CR1 |= PWR_CR1_DBP;
 8001a0e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a12:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001a14:	f7ff fb7c 	bl	8001110 <HAL_GetTick>
 8001a18:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	05da      	lsls	r2, r3, #23
 8001a1e:	f53f af61 	bmi.w	80018e4 <HAL_RCC_OscConfig+0xf4>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a22:	f7ff fb75 	bl	8001110 <HAL_GetTick>
 8001a26:	1b80      	subs	r0, r0, r6
 8001a28:	2864      	cmp	r0, #100	; 0x64
 8001a2a:	d9f6      	bls.n	8001a1a <HAL_RCC_OscConfig+0x22a>
            return HAL_TIMEOUT;
 8001a2c:	2003      	movs	r0, #3
}
 8001a2e:	b002      	add	sp, #8
 8001a30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a34:	4b20      	ldr	r3, [pc, #128]	; (8001ab8 <HAL_RCC_OscConfig+0x2c8>)
 8001a36:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a38:	461e      	mov	r6, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a3a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001a46:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001a48:	f7ff fb62 	bl	8001110 <HAL_GetTick>
 8001a4c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a4e:	e004      	b.n	8001a5a <HAL_RCC_OscConfig+0x26a>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a50:	f7ff fb5e 	bl	8001110 <HAL_GetTick>
 8001a54:	1b40      	subs	r0, r0, r5
 8001a56:	2864      	cmp	r0, #100	; 0x64
 8001a58:	d8e8      	bhi.n	8001a2c <HAL_RCC_OscConfig+0x23c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a5a:	6833      	ldr	r3, [r6, #0]
 8001a5c:	039b      	lsls	r3, r3, #14
 8001a5e:	d4f7      	bmi.n	8001a50 <HAL_RCC_OscConfig+0x260>
 8001a60:	e705      	b.n	800186e <HAL_RCC_OscConfig+0x7e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a62:	4b15      	ldr	r3, [pc, #84]	; (8001ab8 <HAL_RCC_OscConfig+0x2c8>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a64:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a68:	6f1a      	ldr	r2, [r3, #112]	; 0x70
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a6a:	461f      	mov	r7, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a6c:	f022 0201 	bic.w	r2, r2, #1
 8001a70:	671a      	str	r2, [r3, #112]	; 0x70
 8001a72:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001a74:	f022 0204 	bic.w	r2, r2, #4
 8001a78:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001a7a:	f7ff fb49 	bl	8001110 <HAL_GetTick>
 8001a7e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a80:	e004      	b.n	8001a8c <HAL_RCC_OscConfig+0x29c>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a82:	f7ff fb45 	bl	8001110 <HAL_GetTick>
 8001a86:	1b80      	subs	r0, r0, r6
 8001a88:	4540      	cmp	r0, r8
 8001a8a:	d8cf      	bhi.n	8001a2c <HAL_RCC_OscConfig+0x23c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a8c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001a8e:	0798      	lsls	r0, r3, #30
 8001a90:	d4f7      	bmi.n	8001a82 <HAL_RCC_OscConfig+0x292>
    if (pwrclkchanged == SET)
 8001a92:	2d00      	cmp	r5, #0
 8001a94:	f43f af52 	beq.w	800193c <HAL_RCC_OscConfig+0x14c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a98:	4a07      	ldr	r2, [pc, #28]	; (8001ab8 <HAL_RCC_OscConfig+0x2c8>)
 8001a9a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001a9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001aa0:	6413      	str	r3, [r2, #64]	; 0x40
 8001aa2:	e74b      	b.n	800193c <HAL_RCC_OscConfig+0x14c>
        __HAL_RCC_HSI_DISABLE();
 8001aa4:	4b04      	ldr	r3, [pc, #16]	; (8001ab8 <HAL_RCC_OscConfig+0x2c8>)
 8001aa6:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aa8:	461e      	mov	r6, r3
        __HAL_RCC_HSI_DISABLE();
 8001aaa:	f022 0201 	bic.w	r2, r2, #1
 8001aae:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001ab0:	f7ff fb2e 	bl	8001110 <HAL_GetTick>
 8001ab4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ab6:	e008      	b.n	8001aca <HAL_RCC_OscConfig+0x2da>
 8001ab8:	40023800 	.word	0x40023800
 8001abc:	40007000 	.word	0x40007000
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ac0:	f7ff fb26 	bl	8001110 <HAL_GetTick>
 8001ac4:	1b40      	subs	r0, r0, r5
 8001ac6:	2802      	cmp	r0, #2
 8001ac8:	d8b0      	bhi.n	8001a2c <HAL_RCC_OscConfig+0x23c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aca:	6833      	ldr	r3, [r6, #0]
 8001acc:	0799      	lsls	r1, r3, #30
 8001ace:	d4f7      	bmi.n	8001ac0 <HAL_RCC_OscConfig+0x2d0>
 8001ad0:	6823      	ldr	r3, [r4, #0]
 8001ad2:	e6f9      	b.n	80018c8 <HAL_RCC_OscConfig+0xd8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ad4:	4a42      	ldr	r2, [pc, #264]	; (8001be0 <HAL_RCC_OscConfig+0x3f0>)
 8001ad6:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001ad8:	f043 0301 	orr.w	r3, r3, #1
 8001adc:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001ade:	f7ff fb17 	bl	8001110 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ae2:	4f3f      	ldr	r7, [pc, #252]	; (8001be0 <HAL_RCC_OscConfig+0x3f0>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ae4:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001ae8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aea:	e004      	b.n	8001af6 <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aec:	f7ff fb10 	bl	8001110 <HAL_GetTick>
 8001af0:	1b80      	subs	r0, r0, r6
 8001af2:	4540      	cmp	r0, r8
 8001af4:	d89a      	bhi.n	8001a2c <HAL_RCC_OscConfig+0x23c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001af6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001af8:	079b      	lsls	r3, r3, #30
 8001afa:	d5f7      	bpl.n	8001aec <HAL_RCC_OscConfig+0x2fc>
    if (pwrclkchanged == SET)
 8001afc:	2d00      	cmp	r5, #0
 8001afe:	f43f af1d 	beq.w	800193c <HAL_RCC_OscConfig+0x14c>
 8001b02:	e7c9      	b.n	8001a98 <HAL_RCC_OscConfig+0x2a8>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b04:	2801      	cmp	r0, #1
      pll_config = RCC->PLLCFGR;
 8001b06:	685a      	ldr	r2, [r3, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b08:	f43f af36 	beq.w	8001978 <HAL_RCC_OscConfig+0x188>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b0c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b10:	69e1      	ldr	r1, [r4, #28]
 8001b12:	428b      	cmp	r3, r1
 8001b14:	f47f af3d 	bne.w	8001992 <HAL_RCC_OscConfig+0x1a2>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b18:	f002 033f 	and.w	r3, r2, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b1c:	6a21      	ldr	r1, [r4, #32]
 8001b1e:	428b      	cmp	r3, r1
 8001b20:	f47f af37 	bne.w	8001992 <HAL_RCC_OscConfig+0x1a2>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b24:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001b28:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001b2a:	4013      	ands	r3, r2
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b2c:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 8001b30:	f47f af2f 	bne.w	8001992 <HAL_RCC_OscConfig+0x1a2>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001b34:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001b36:	f402 3140 	and.w	r1, r2, #196608	; 0x30000
 8001b3a:	085b      	lsrs	r3, r3, #1
 8001b3c:	3b01      	subs	r3, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b3e:	ebb1 4f03 	cmp.w	r1, r3, lsl #16
 8001b42:	f47f af26 	bne.w	8001992 <HAL_RCC_OscConfig+0x1a2>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001b46:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001b48:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001b4c:	ebb2 6f03 	cmp.w	r2, r3, lsl #24
  return HAL_OK;
 8001b50:	bf14      	ite	ne
 8001b52:	2001      	movne	r0, #1
 8001b54:	2000      	moveq	r0, #0
 8001b56:	e70f      	b.n	8001978 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b58:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001b5c:	601a      	str	r2, [r3, #0]
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001b64:	601a      	str	r2, [r3, #0]
 8001b66:	e674      	b.n	8001852 <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b68:	f042 0204 	orr.w	r2, r2, #4
 8001b6c:	671a      	str	r2, [r3, #112]	; 0x70
 8001b6e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001b70:	f042 0201 	orr.w	r2, r2, #1
 8001b74:	671a      	str	r2, [r3, #112]	; 0x70
 8001b76:	e7b2      	b.n	8001ade <HAL_RCC_OscConfig+0x2ee>
    return HAL_ERROR;
 8001b78:	2001      	movs	r0, #1
}
 8001b7a:	4770      	bx	lr
        tickstart = HAL_GetTick();
 8001b7c:	f7ff fac8 	bl	8001110 <HAL_GetTick>
 8001b80:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b82:	e005      	b.n	8001b90 <HAL_RCC_OscConfig+0x3a0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b84:	f7ff fac4 	bl	8001110 <HAL_GetTick>
 8001b88:	1b80      	subs	r0, r0, r6
 8001b8a:	2802      	cmp	r0, #2
 8001b8c:	f63f af4e 	bhi.w	8001a2c <HAL_RCC_OscConfig+0x23c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b90:	682b      	ldr	r3, [r5, #0]
 8001b92:	0199      	lsls	r1, r3, #6
 8001b94:	d4f6      	bmi.n	8001b84 <HAL_RCC_OscConfig+0x394>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b96:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001b98:	69e3      	ldr	r3, [r4, #28]
 8001b9a:	0852      	lsrs	r2, r2, #1
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b9c:	4e10      	ldr	r6, [pc, #64]	; (8001be0 <HAL_RCC_OscConfig+0x3f0>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b9e:	e9d4 1008 	ldrd	r1, r0, [r4, #32]
 8001ba2:	3a01      	subs	r2, #1
 8001ba4:	430b      	orrs	r3, r1
 8001ba6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001ba8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001bac:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001bb0:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8001bb4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001bb8:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001bba:	682b      	ldr	r3, [r5, #0]
 8001bbc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bc0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001bc2:	f7ff faa5 	bl	8001110 <HAL_GetTick>
 8001bc6:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bc8:	e005      	b.n	8001bd6 <HAL_RCC_OscConfig+0x3e6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bca:	f7ff faa1 	bl	8001110 <HAL_GetTick>
 8001bce:	1b00      	subs	r0, r0, r4
 8001bd0:	2802      	cmp	r0, #2
 8001bd2:	f63f af2b 	bhi.w	8001a2c <HAL_RCC_OscConfig+0x23c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bd6:	6833      	ldr	r3, [r6, #0]
 8001bd8:	019a      	lsls	r2, r3, #6
 8001bda:	d5f6      	bpl.n	8001bca <HAL_RCC_OscConfig+0x3da>
 8001bdc:	e6cb      	b.n	8001976 <HAL_RCC_OscConfig+0x186>
 8001bde:	bf00      	nop
 8001be0:	40023800 	.word	0x40023800

08001be4 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart = 0;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001be4:	2800      	cmp	r0, #0
 8001be6:	f000 80b4 	beq.w	8001d52 <HAL_RCC_ClockConfig+0x16e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001bea:	4a61      	ldr	r2, [pc, #388]	; (8001d70 <HAL_RCC_ClockConfig+0x18c>)
 8001bec:	6813      	ldr	r3, [r2, #0]
 8001bee:	f003 030f 	and.w	r3, r3, #15
 8001bf2:	428b      	cmp	r3, r1
{
 8001bf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001bf8:	4604      	mov	r4, r0
 8001bfa:	460d      	mov	r5, r1
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001bfc:	d20c      	bcs.n	8001c18 <HAL_RCC_ClockConfig+0x34>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bfe:	6813      	ldr	r3, [r2, #0]
 8001c00:	f023 030f 	bic.w	r3, r3, #15
 8001c04:	430b      	orrs	r3, r1
 8001c06:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c08:	6813      	ldr	r3, [r2, #0]
 8001c0a:	f003 030f 	and.w	r3, r3, #15
 8001c0e:	428b      	cmp	r3, r1
 8001c10:	d002      	beq.n	8001c18 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8001c12:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);

  return HAL_OK;
}
 8001c14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c18:	6823      	ldr	r3, [r4, #0]
 8001c1a:	0798      	lsls	r0, r3, #30
 8001c1c:	d514      	bpl.n	8001c48 <HAL_RCC_ClockConfig+0x64>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c1e:	0759      	lsls	r1, r3, #29
 8001c20:	d504      	bpl.n	8001c2c <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c22:	4954      	ldr	r1, [pc, #336]	; (8001d74 <HAL_RCC_ClockConfig+0x190>)
 8001c24:	688a      	ldr	r2, [r1, #8]
 8001c26:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8001c2a:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c2c:	071a      	lsls	r2, r3, #28
 8001c2e:	d504      	bpl.n	8001c3a <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c30:	4950      	ldr	r1, [pc, #320]	; (8001d74 <HAL_RCC_ClockConfig+0x190>)
 8001c32:	688a      	ldr	r2, [r1, #8]
 8001c34:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8001c38:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c3a:	494e      	ldr	r1, [pc, #312]	; (8001d74 <HAL_RCC_ClockConfig+0x190>)
 8001c3c:	68a0      	ldr	r0, [r4, #8]
 8001c3e:	688a      	ldr	r2, [r1, #8]
 8001c40:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001c44:	4302      	orrs	r2, r0
 8001c46:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c48:	07df      	lsls	r7, r3, #31
 8001c4a:	d521      	bpl.n	8001c90 <HAL_RCC_ClockConfig+0xac>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c4c:	6862      	ldr	r2, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c4e:	4b49      	ldr	r3, [pc, #292]	; (8001d74 <HAL_RCC_ClockConfig+0x190>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c50:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c52:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c54:	d07f      	beq.n	8001d56 <HAL_RCC_ClockConfig+0x172>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c56:	2a02      	cmp	r2, #2
 8001c58:	d078      	beq.n	8001d4c <HAL_RCC_ClockConfig+0x168>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c5a:	0799      	lsls	r1, r3, #30
 8001c5c:	d5d9      	bpl.n	8001c12 <HAL_RCC_ClockConfig+0x2e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c5e:	4945      	ldr	r1, [pc, #276]	; (8001d74 <HAL_RCC_ClockConfig+0x190>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c60:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c64:	688b      	ldr	r3, [r1, #8]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c66:	460f      	mov	r7, r1
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c68:	f023 0303 	bic.w	r3, r3, #3
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8001c70:	f7ff fa4e 	bl	8001110 <HAL_GetTick>
 8001c74:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c76:	e004      	b.n	8001c82 <HAL_RCC_ClockConfig+0x9e>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c78:	f7ff fa4a 	bl	8001110 <HAL_GetTick>
 8001c7c:	1b80      	subs	r0, r0, r6
 8001c7e:	4540      	cmp	r0, r8
 8001c80:	d86c      	bhi.n	8001d5c <HAL_RCC_ClockConfig+0x178>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	6862      	ldr	r2, [r4, #4]
 8001c86:	f003 030c 	and.w	r3, r3, #12
 8001c8a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001c8e:	d1f3      	bne.n	8001c78 <HAL_RCC_ClockConfig+0x94>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c90:	4a37      	ldr	r2, [pc, #220]	; (8001d70 <HAL_RCC_ClockConfig+0x18c>)
 8001c92:	6813      	ldr	r3, [r2, #0]
 8001c94:	f003 030f 	and.w	r3, r3, #15
 8001c98:	42ab      	cmp	r3, r5
 8001c9a:	d909      	bls.n	8001cb0 <HAL_RCC_ClockConfig+0xcc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c9c:	6813      	ldr	r3, [r2, #0]
 8001c9e:	f023 030f 	bic.w	r3, r3, #15
 8001ca2:	432b      	orrs	r3, r5
 8001ca4:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ca6:	6813      	ldr	r3, [r2, #0]
 8001ca8:	f003 030f 	and.w	r3, r3, #15
 8001cac:	42ab      	cmp	r3, r5
 8001cae:	d1b0      	bne.n	8001c12 <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cb0:	6823      	ldr	r3, [r4, #0]
 8001cb2:	075a      	lsls	r2, r3, #29
 8001cb4:	d506      	bpl.n	8001cc4 <HAL_RCC_ClockConfig+0xe0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cb6:	492f      	ldr	r1, [pc, #188]	; (8001d74 <HAL_RCC_ClockConfig+0x190>)
 8001cb8:	68e0      	ldr	r0, [r4, #12]
 8001cba:	688a      	ldr	r2, [r1, #8]
 8001cbc:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8001cc0:	4302      	orrs	r2, r0
 8001cc2:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cc4:	071b      	lsls	r3, r3, #28
 8001cc6:	d431      	bmi.n	8001d2c <HAL_RCC_ClockConfig+0x148>
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001cc8:	492a      	ldr	r1, [pc, #168]	; (8001d74 <HAL_RCC_ClockConfig+0x190>)
 8001cca:	688b      	ldr	r3, [r1, #8]
 8001ccc:	f003 030c 	and.w	r3, r3, #12
 8001cd0:	2b04      	cmp	r3, #4
 8001cd2:	d039      	beq.n	8001d48 <HAL_RCC_ClockConfig+0x164>
 8001cd4:	2b08      	cmp	r3, #8
 8001cd6:	d118      	bne.n	8001d0a <HAL_RCC_ClockConfig+0x126>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cd8:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001cda:	684b      	ldr	r3, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cdc:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ce0:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001ce2:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
 8001ce6:	d03b      	beq.n	8001d60 <HAL_RCC_ClockConfig+0x17c>
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ce8:	4823      	ldr	r0, [pc, #140]	; (8001d78 <HAL_RCC_ClockConfig+0x194>)
 8001cea:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001cee:	2300      	movs	r3, #0
 8001cf0:	fba1 0100 	umull	r0, r1, r1, r0
 8001cf4:	f7fe fa90 	bl	8000218 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001cf8:	4b1e      	ldr	r3, [pc, #120]	; (8001d74 <HAL_RCC_ClockConfig+0x190>)
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001d00:	3301      	adds	r3, #1
 8001d02:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8001d04:	fbb0 f3f3 	udiv	r3, r0, r3
    {
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
 8001d08:	e000      	b.n	8001d0c <HAL_RCC_ClockConfig+0x128>
      sysclockfreq = HSI_VALUE;
 8001d0a:	4b1c      	ldr	r3, [pc, #112]	; (8001d7c <HAL_RCC_ClockConfig+0x198>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d0c:	4a19      	ldr	r2, [pc, #100]	; (8001d74 <HAL_RCC_ClockConfig+0x190>)
 8001d0e:	4c1c      	ldr	r4, [pc, #112]	; (8001d80 <HAL_RCC_ClockConfig+0x19c>)
 8001d10:	6892      	ldr	r2, [r2, #8]
  HAL_InitTick(uwTickPrio);
 8001d12:	481c      	ldr	r0, [pc, #112]	; (8001d84 <HAL_RCC_ClockConfig+0x1a0>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d14:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8001d18:	491b      	ldr	r1, [pc, #108]	; (8001d88 <HAL_RCC_ClockConfig+0x1a4>)
  HAL_InitTick(uwTickPrio);
 8001d1a:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d1c:	5ca2      	ldrb	r2, [r4, r2]
 8001d1e:	40d3      	lsrs	r3, r2
 8001d20:	600b      	str	r3, [r1, #0]
  HAL_InitTick(uwTickPrio);
 8001d22:	f7ff f8ab 	bl	8000e7c <HAL_InitTick>
  return HAL_OK;
 8001d26:	2000      	movs	r0, #0
}
 8001d28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d2c:	4a11      	ldr	r2, [pc, #68]	; (8001d74 <HAL_RCC_ClockConfig+0x190>)
 8001d2e:	6921      	ldr	r1, [r4, #16]
 8001d30:	6893      	ldr	r3, [r2, #8]
 8001d32:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001d36:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d3a:	490e      	ldr	r1, [pc, #56]	; (8001d74 <HAL_RCC_ClockConfig+0x190>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d3c:	6093      	str	r3, [r2, #8]
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d3e:	688b      	ldr	r3, [r1, #8]
 8001d40:	f003 030c 	and.w	r3, r3, #12
 8001d44:	2b04      	cmp	r3, #4
 8001d46:	d1c5      	bne.n	8001cd4 <HAL_RCC_ClockConfig+0xf0>
 8001d48:	4b0b      	ldr	r3, [pc, #44]	; (8001d78 <HAL_RCC_ClockConfig+0x194>)
 8001d4a:	e7df      	b.n	8001d0c <HAL_RCC_ClockConfig+0x128>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d4c:	0198      	lsls	r0, r3, #6
 8001d4e:	d486      	bmi.n	8001c5e <HAL_RCC_ClockConfig+0x7a>
 8001d50:	e75f      	b.n	8001c12 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8001d52:	2001      	movs	r0, #1
}
 8001d54:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d56:	039e      	lsls	r6, r3, #14
 8001d58:	d481      	bmi.n	8001c5e <HAL_RCC_ClockConfig+0x7a>
 8001d5a:	e75a      	b.n	8001c12 <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 8001d5c:	2003      	movs	r0, #3
 8001d5e:	e759      	b.n	8001c14 <HAL_RCC_ClockConfig+0x30>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d60:	4806      	ldr	r0, [pc, #24]	; (8001d7c <HAL_RCC_ClockConfig+0x198>)
 8001d62:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001d66:	fba1 0100 	umull	r0, r1, r1, r0
 8001d6a:	f7fe fa55 	bl	8000218 <__aeabi_uldivmod>
 8001d6e:	e7c3      	b.n	8001cf8 <HAL_RCC_ClockConfig+0x114>
 8001d70:	40023c00 	.word	0x40023c00
 8001d74:	40023800 	.word	0x40023800
 8001d78:	017d7840 	.word	0x017d7840
 8001d7c:	00f42400 	.word	0x00f42400
 8001d80:	0800960c 	.word	0x0800960c
 8001d84:	20000008 	.word	0x20000008
 8001d88:	20000000 	.word	0x20000000

08001d8c <HAL_RCC_EnableCSS>:
  SET_BIT(RCC->CR, RCC_CR_CSSON);
 8001d8c:	4a02      	ldr	r2, [pc, #8]	; (8001d98 <HAL_RCC_EnableCSS+0xc>)
 8001d8e:	6813      	ldr	r3, [r2, #0]
 8001d90:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001d94:	6013      	str	r3, [r2, #0]
}
 8001d96:	4770      	bx	lr
 8001d98:	40023800 	.word	0x40023800

08001d9c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d9c:	4b04      	ldr	r3, [pc, #16]	; (8001db0 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001d9e:	4a05      	ldr	r2, [pc, #20]	; (8001db4 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001da0:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8001da2:	4905      	ldr	r1, [pc, #20]	; (8001db8 <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001da4:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001da8:	6808      	ldr	r0, [r1, #0]
 8001daa:	5cd3      	ldrb	r3, [r2, r3]
}
 8001dac:	40d8      	lsrs	r0, r3
 8001dae:	4770      	bx	lr
 8001db0:	40023800 	.word	0x40023800
 8001db4:	0800961c 	.word	0x0800961c
 8001db8:	20000000 	.word	0x20000000

08001dbc <HAL_RCC_GetClockConfig>:
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001dbc:	4b0e      	ldr	r3, [pc, #56]	; (8001df8 <HAL_RCC_GetClockConfig+0x3c>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001dbe:	220f      	movs	r2, #15
 8001dc0:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001dc2:	689a      	ldr	r2, [r3, #8]
 8001dc4:	f002 0203 	and.w	r2, r2, #3
 8001dc8:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001dca:	689a      	ldr	r2, [r3, #8]
 8001dcc:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8001dd0:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001dd2:	689a      	ldr	r2, [r3, #8]
 8001dd4:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8001dd8:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	08db      	lsrs	r3, r3, #3
{
 8001dde:	b410      	push	{r4}
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001de0:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001de4:	4c05      	ldr	r4, [pc, #20]	; (8001dfc <HAL_RCC_GetClockConfig+0x40>)
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001de6:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001de8:	6823      	ldr	r3, [r4, #0]
}
 8001dea:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001dee:	f003 030f 	and.w	r3, r3, #15
 8001df2:	600b      	str	r3, [r1, #0]
}
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	40023800 	.word	0x40023800
 8001dfc:	40023c00 	.word	0x40023c00

08001e00 <HAL_RCC_CSSCallback>:
__weak void HAL_RCC_CSSCallback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop

08001e04 <HAL_RCC_NMI_IRQHandler>:
{
 8001e04:	b508      	push	{r3, lr}
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8001e06:	4b05      	ldr	r3, [pc, #20]	; (8001e1c <HAL_RCC_NMI_IRQHandler+0x18>)
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	061b      	lsls	r3, r3, #24
 8001e0c:	d400      	bmi.n	8001e10 <HAL_RCC_NMI_IRQHandler+0xc>
}
 8001e0e:	bd08      	pop	{r3, pc}
    HAL_RCC_CSSCallback();
 8001e10:	f7ff fff6 	bl	8001e00 <HAL_RCC_CSSCallback>
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8001e14:	4b02      	ldr	r3, [pc, #8]	; (8001e20 <HAL_RCC_NMI_IRQHandler+0x1c>)
 8001e16:	2280      	movs	r2, #128	; 0x80
 8001e18:	701a      	strb	r2, [r3, #0]
}
 8001e1a:	bd08      	pop	{r3, pc}
 8001e1c:	40023800 	.word	0x40023800
 8001e20:	4002380e 	.word	0x4002380e

08001e24 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001e24:	6803      	ldr	r3, [r0, #0]
{
 8001e26:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001e2a:	f013 0601 	ands.w	r6, r3, #1
{
 8001e2e:	b083      	sub	sp, #12
 8001e30:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001e32:	d00b      	beq.n	8001e4c <HAL_RCCEx_PeriphCLKConfig+0x28>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001e34:	4abb      	ldr	r2, [pc, #748]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001e36:	6891      	ldr	r1, [r2, #8]
 8001e38:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 8001e3c:	6091      	str	r1, [r2, #8]
 8001e3e:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8001e40:	6891      	ldr	r1, [r2, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001e42:	fab0 f680 	clz	r6, r0
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001e46:	4301      	orrs	r1, r0
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001e48:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001e4a:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001e4c:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 8001e50:	d010      	beq.n	8001e74 <HAL_RCCEx_PeriphCLKConfig+0x50>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001e52:	49b4      	ldr	r1, [pc, #720]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001e54:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8001e56:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001e5a:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001e5e:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001e62:	ea42 0205 	orr.w	r2, r2, r5
 8001e66:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001e6a:	f000 8219 	beq.w	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001e6e:	fab5 f585 	clz	r5, r5
 8001e72:	096d      	lsrs	r5, r5, #5
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001e74:	02df      	lsls	r7, r3, #11
 8001e76:	d510      	bpl.n	8001e9a <HAL_RCCEx_PeriphCLKConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001e78:	48aa      	ldr	r0, [pc, #680]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001e7a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001e7c:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001e80:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001e84:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8001e88:	ea42 0201 	orr.w	r2, r2, r1
 8001e8c:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001e90:	f000 8209 	beq.w	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x482>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 8001e94:	2900      	cmp	r1, #0
 8001e96:	bf08      	it	eq
 8001e98:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 8001e9a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8001e9e:	bf18      	it	ne
 8001ea0:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001ea2:	0698      	lsls	r0, r3, #26
 8001ea4:	f100 81b6 	bmi.w	8002214 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001ea8:	06df      	lsls	r7, r3, #27
 8001eaa:	d50c      	bpl.n	8001ec6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001eac:	4a9d      	ldr	r2, [pc, #628]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001eae:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8001eb2:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8001eb6:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 8001eba:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8001ebe:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001ec0:	4301      	orrs	r1, r0
 8001ec2:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001ec6:	0458      	lsls	r0, r3, #17
 8001ec8:	d508      	bpl.n	8001edc <HAL_RCCEx_PeriphCLKConfig+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001eca:	4996      	ldr	r1, [pc, #600]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001ecc:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8001ece:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001ed2:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001ed6:	4302      	orrs	r2, r0
 8001ed8:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001edc:	0419      	lsls	r1, r3, #16
 8001ede:	d508      	bpl.n	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001ee0:	4990      	ldr	r1, [pc, #576]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001ee2:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8001ee4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001ee8:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8001eec:	4302      	orrs	r2, r0
 8001eee:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001ef2:	03da      	lsls	r2, r3, #15
 8001ef4:	d508      	bpl.n	8001f08 <HAL_RCCEx_PeriphCLKConfig+0xe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001ef6:	498b      	ldr	r1, [pc, #556]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001ef8:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8001efa:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001efe:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001f02:	4302      	orrs	r2, r0
 8001f04:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001f08:	039f      	lsls	r7, r3, #14
 8001f0a:	d508      	bpl.n	8001f1e <HAL_RCCEx_PeriphCLKConfig+0xfa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001f0c:	4985      	ldr	r1, [pc, #532]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001f0e:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8001f10:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001f14:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8001f18:	4302      	orrs	r2, r0
 8001f1a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f1e:	0658      	lsls	r0, r3, #25
 8001f20:	d508      	bpl.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f22:	4980      	ldr	r1, [pc, #512]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001f24:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8001f26:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001f2a:	f022 0203 	bic.w	r2, r2, #3
 8001f2e:	4302      	orrs	r2, r0
 8001f30:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f34:	0619      	lsls	r1, r3, #24
 8001f36:	d508      	bpl.n	8001f4a <HAL_RCCEx_PeriphCLKConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001f38:	497a      	ldr	r1, [pc, #488]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001f3a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8001f3c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001f40:	f022 020c 	bic.w	r2, r2, #12
 8001f44:	4302      	orrs	r2, r0
 8001f46:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001f4a:	05da      	lsls	r2, r3, #23
 8001f4c:	d508      	bpl.n	8001f60 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001f4e:	4975      	ldr	r1, [pc, #468]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001f50:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8001f52:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001f56:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8001f5a:	4302      	orrs	r2, r0
 8001f5c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001f60:	059f      	lsls	r7, r3, #22
 8001f62:	d508      	bpl.n	8001f76 <HAL_RCCEx_PeriphCLKConfig+0x152>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001f64:	496f      	ldr	r1, [pc, #444]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001f66:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8001f68:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001f6c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8001f70:	4302      	orrs	r2, r0
 8001f72:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001f76:	0558      	lsls	r0, r3, #21
 8001f78:	d508      	bpl.n	8001f8c <HAL_RCCEx_PeriphCLKConfig+0x168>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001f7a:	496a      	ldr	r1, [pc, #424]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001f7c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001f7e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001f82:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001f86:	4302      	orrs	r2, r0
 8001f88:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001f8c:	0519      	lsls	r1, r3, #20
 8001f8e:	d508      	bpl.n	8001fa2 <HAL_RCCEx_PeriphCLKConfig+0x17e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001f90:	4964      	ldr	r1, [pc, #400]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001f92:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001f94:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001f98:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001f9c:	4302      	orrs	r2, r0
 8001f9e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001fa2:	04da      	lsls	r2, r3, #19
 8001fa4:	d508      	bpl.n	8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001fa6:	495f      	ldr	r1, [pc, #380]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001fa8:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8001faa:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001fae:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001fb2:	4302      	orrs	r2, r0
 8001fb4:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001fb8:	049f      	lsls	r7, r3, #18
 8001fba:	d508      	bpl.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001fbc:	4959      	ldr	r1, [pc, #356]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001fbe:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8001fc0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001fc4:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8001fc8:	4302      	orrs	r2, r0
 8001fca:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001fce:	0258      	lsls	r0, r3, #9
 8001fd0:	d508      	bpl.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001fd2:	4954      	ldr	r1, [pc, #336]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001fd4:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8001fd6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001fda:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8001fde:	4302      	orrs	r2, r0
 8001fe0:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001fe4:	0299      	lsls	r1, r3, #10
 8001fe6:	d50c      	bpl.n	8002002 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001fe8:	494e      	ldr	r1, [pc, #312]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001fea:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8001fec:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 8001ff0:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001ff4:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 8001ff8:	bf08      	it	eq
 8001ffa:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001ffc:	4302      	orrs	r2, r0
 8001ffe:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 8002002:	f013 0f08 	tst.w	r3, #8
 8002006:	bf18      	it	ne
 8002008:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800200a:	035a      	lsls	r2, r3, #13
 800200c:	d508      	bpl.n	8002020 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800200e:	4945      	ldr	r1, [pc, #276]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002010:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8002012:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002016:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800201a:	4302      	orrs	r2, r0
 800201c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002020:	021f      	lsls	r7, r3, #8
 8002022:	d46a      	bmi.n	80020fa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002024:	2e01      	cmp	r6, #1
 8002026:	d001      	beq.n	800202c <HAL_RCCEx_PeriphCLKConfig+0x208>
 8002028:	0198      	lsls	r0, r3, #6
 800202a:	d560      	bpl.n	80020ee <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800202c:	4b3d      	ldr	r3, [pc, #244]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800202e:	681a      	ldr	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002030:	461f      	mov	r7, r3
    __HAL_RCC_PLLI2S_DISABLE();
 8002032:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8002036:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8002038:	f7ff f86a 	bl	8001110 <HAL_GetTick>
 800203c:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800203e:	e005      	b.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x228>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002040:	f7ff f866 	bl	8001110 <HAL_GetTick>
 8002044:	1b83      	subs	r3, r0, r6
 8002046:	2b64      	cmp	r3, #100	; 0x64
 8002048:	f200 80e0 	bhi.w	800220c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	0119      	lsls	r1, r3, #4
 8002050:	d4f6      	bmi.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0x21c>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002052:	6823      	ldr	r3, [r4, #0]
 8002054:	07da      	lsls	r2, r3, #31
 8002056:	d512      	bpl.n	800207e <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8002058:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800205a:	b982      	cbnz	r2, 800207e <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800205c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002060:	f8d7 6084 	ldr.w	r6, [r7, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002064:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 8002068:	6860      	ldr	r0, [r4, #4]
 800206a:	f006 6670 	and.w	r6, r6, #251658240	; 0xf000000
 800206e:	68a1      	ldr	r1, [r4, #8]
 8002070:	4332      	orrs	r2, r6
 8002072:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 8002076:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 800207a:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800207e:	031e      	lsls	r6, r3, #12
 8002080:	d504      	bpl.n	800208c <HAL_RCCEx_PeriphCLKConfig+0x268>
 8002082:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002084:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8002088:	f000 811e 	beq.w	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800208c:	02d8      	lsls	r0, r3, #11
 800208e:	d504      	bpl.n	800209a <HAL_RCCEx_PeriphCLKConfig+0x276>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002090:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002092:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8002096:	f000 8117 	beq.w	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800209a:	01d9      	lsls	r1, r3, #7
 800209c:	d511      	bpl.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800209e:	4e21      	ldr	r6, [pc, #132]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x300>)
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80020a0:	6860      	ldr	r0, [r4, #4]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80020a2:	f8d6 2084 	ldr.w	r2, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80020a6:	f8d6 7084 	ldr.w	r7, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80020aa:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 80020ae:	6921      	ldr	r1, [r4, #16]
 80020b0:	f007 47e0 	and.w	r7, r7, #1879048192	; 0x70000000
 80020b4:	433a      	orrs	r2, r7
 80020b6:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 80020ba:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80020be:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80020c2:	019a      	lsls	r2, r3, #6
 80020c4:	f100 80f1 	bmi.w	80022aa <HAL_RCCEx_PeriphCLKConfig+0x486>
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80020c8:	4b16      	ldr	r3, [pc, #88]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80020ca:	681a      	ldr	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80020cc:	461f      	mov	r7, r3
    __HAL_RCC_PLLI2S_ENABLE();
 80020ce:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80020d2:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80020d4:	f7ff f81c 	bl	8001110 <HAL_GetTick>
 80020d8:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80020da:	e005      	b.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80020dc:	f7ff f818 	bl	8001110 <HAL_GetTick>
 80020e0:	1b80      	subs	r0, r0, r6
 80020e2:	2864      	cmp	r0, #100	; 0x64
 80020e4:	f200 8092 	bhi.w	800220c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	011b      	lsls	r3, r3, #4
 80020ec:	d5f6      	bpl.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80020ee:	2d01      	cmp	r5, #1
 80020f0:	d00e      	beq.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80020f2:	2000      	movs	r0, #0
}
 80020f4:	b003      	add	sp, #12
 80020f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80020fa:	490a      	ldr	r1, [pc, #40]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80020fc:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8002100:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002104:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8002108:	4302      	orrs	r2, r0
 800210a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
 800210e:	e789      	b.n	8002024 <HAL_RCCEx_PeriphCLKConfig+0x200>
    __HAL_RCC_PLLSAI_DISABLE();
 8002110:	4b04      	ldr	r3, [pc, #16]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002112:	681a      	ldr	r2, [r3, #0]
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002114:	461e      	mov	r6, r3
    __HAL_RCC_PLLSAI_DISABLE();
 8002116:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800211a:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800211c:	f7fe fff8 	bl	8001110 <HAL_GetTick>
 8002120:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002122:	e006      	b.n	8002132 <HAL_RCCEx_PeriphCLKConfig+0x30e>
 8002124:	40023800 	.word	0x40023800
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002128:	f7fe fff2 	bl	8001110 <HAL_GetTick>
 800212c:	1b40      	subs	r0, r0, r5
 800212e:	2864      	cmp	r0, #100	; 0x64
 8002130:	d86c      	bhi.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002132:	6833      	ldr	r3, [r6, #0]
 8002134:	009f      	lsls	r7, r3, #2
 8002136:	d4f7      	bmi.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x304>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002138:	6823      	ldr	r3, [r4, #0]
 800213a:	031d      	lsls	r5, r3, #12
 800213c:	f140 80fd 	bpl.w	800233a <HAL_RCCEx_PeriphCLKConfig+0x516>
 8002140:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002142:	2a00      	cmp	r2, #0
 8002144:	f040 80f9 	bne.w	800233a <HAL_RCCEx_PeriphCLKConfig+0x516>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002148:	4980      	ldr	r1, [pc, #512]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x528>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800214a:	6965      	ldr	r5, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800214c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002150:	f8d1 6088 	ldr.w	r6, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002154:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 8002158:	69a0      	ldr	r0, [r4, #24]
 800215a:	f006 46e0 	and.w	r6, r6, #1879048192	; 0x70000000
 800215e:	4332      	orrs	r2, r6
 8002160:	ea42 1285 	orr.w	r2, r2, r5, lsl #6
 8002164:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8002168:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800216c:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8002170:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002172:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 8002176:	3801      	subs	r0, #1
 8002178:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800217c:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002180:	0299      	lsls	r1, r3, #10
 8002182:	d515      	bpl.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x38c>
 8002184:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8002186:	f1b2 6f00 	cmp.w	r2, #134217728	; 0x8000000
 800218a:	d111      	bne.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x38c>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800218c:	496f      	ldr	r1, [pc, #444]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x528>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800218e:	6965      	ldr	r5, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002190:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002194:	f8d1 6088 	ldr.w	r6, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002198:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 800219c:	6a20      	ldr	r0, [r4, #32]
 800219e:	f006 46e0 	and.w	r6, r6, #1879048192	; 0x70000000
 80021a2:	4332      	orrs	r2, r6
 80021a4:	ea42 1285 	orr.w	r2, r2, r5, lsl #6
 80021a8:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80021ac:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80021b0:	071a      	lsls	r2, r3, #28
 80021b2:	d519      	bpl.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80021b4:	4a65      	ldr	r2, [pc, #404]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x528>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80021b6:	6965      	ldr	r5, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80021b8:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80021bc:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80021c0:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 80021c4:	69e0      	ldr	r0, [r4, #28]
 80021c6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021ca:	430b      	orrs	r3, r1
 80021cc:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 80021d0:	ea43 7300 	orr.w	r3, r3, r0, lsl #28
 80021d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80021d8:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80021dc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80021de:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80021e2:	430b      	orrs	r3, r1
 80021e4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 80021e8:	4b58      	ldr	r3, [pc, #352]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x528>)
 80021ea:	681a      	ldr	r2, [r3, #0]
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80021ec:	461d      	mov	r5, r3
    __HAL_RCC_PLLSAI_ENABLE();
 80021ee:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80021f2:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80021f4:	f7fe ff8c 	bl	8001110 <HAL_GetTick>
 80021f8:	4604      	mov	r4, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80021fa:	682b      	ldr	r3, [r5, #0]
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	f53f af78 	bmi.w	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002202:	f7fe ff85 	bl	8001110 <HAL_GetTick>
 8002206:	1b00      	subs	r0, r0, r4
 8002208:	2864      	cmp	r0, #100	; 0x64
 800220a:	d9f6      	bls.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0x3d6>
        return HAL_TIMEOUT;
 800220c:	2003      	movs	r0, #3
}
 800220e:	b003      	add	sp, #12
 8002210:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8002214:	4a4d      	ldr	r2, [pc, #308]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x528>)
    PWR->CR1 |= PWR_CR1_DBP;
 8002216:	4b4e      	ldr	r3, [pc, #312]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8002218:	6c11      	ldr	r1, [r2, #64]	; 0x40
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800221a:	4698      	mov	r8, r3
    __HAL_RCC_PWR_CLK_ENABLE();
 800221c:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8002220:	6411      	str	r1, [r2, #64]	; 0x40
 8002222:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002224:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8002228:	9201      	str	r2, [sp, #4]
 800222a:	9a01      	ldr	r2, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002232:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8002234:	f7fe ff6c 	bl	8001110 <HAL_GetTick>
 8002238:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800223a:	e004      	b.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x422>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800223c:	f7fe ff68 	bl	8001110 <HAL_GetTick>
 8002240:	1bc0      	subs	r0, r0, r7
 8002242:	2864      	cmp	r0, #100	; 0x64
 8002244:	d8e2      	bhi.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002246:	f8d8 3000 	ldr.w	r3, [r8]
 800224a:	05d9      	lsls	r1, r3, #23
 800224c:	d5f6      	bpl.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x418>
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800224e:	4f3f      	ldr	r7, [pc, #252]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x528>)
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002250:	6b23      	ldr	r3, [r4, #48]	; 0x30
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002252:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002254:	f403 7140 	and.w	r1, r3, #768	; 0x300
 8002258:	f412 7240 	ands.w	r2, r2, #768	; 0x300
 800225c:	d010      	beq.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x45c>
 800225e:	4291      	cmp	r1, r2
 8002260:	d00e      	beq.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x45c>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002262:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8002264:	6f38      	ldr	r0, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002266:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 800226a:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 800226e:	6738      	str	r0, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002270:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002272:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 8002276:	6738      	str	r0, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8002278:	673a      	str	r2, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800227a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800227c:	07d2      	lsls	r2, r2, #31
 800227e:	d448      	bmi.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002280:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 8002284:	d03c      	beq.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 8002286:	4931      	ldr	r1, [pc, #196]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x528>)
 8002288:	688a      	ldr	r2, [r1, #8]
 800228a:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 800228e:	608a      	str	r2, [r1, #8]
 8002290:	4a2e      	ldr	r2, [pc, #184]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x528>)
 8002292:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002296:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8002298:	430b      	orrs	r3, r1
 800229a:	6713      	str	r3, [r2, #112]	; 0x70
 800229c:	6823      	ldr	r3, [r4, #0]
 800229e:	e603      	b.n	8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x84>
  uint32_t pllsaiused = 0;
 80022a0:	2500      	movs	r5, #0
      plli2sused = 1;
 80022a2:	2601      	movs	r6, #1
 80022a4:	e5e6      	b.n	8001e74 <HAL_RCCEx_PeriphCLKConfig+0x50>
      plli2sused = 1;
 80022a6:	2601      	movs	r6, #1
 80022a8:	e5f7      	b.n	8001e9a <HAL_RCCEx_PeriphCLKConfig+0x76>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80022aa:	6923      	ldr	r3, [r4, #16]
 80022ac:	6862      	ldr	r2, [r4, #4]
 80022ae:	041b      	lsls	r3, r3, #16
 80022b0:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
 80022b4:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80022b8:	4a24      	ldr	r2, [pc, #144]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x528>)
 80022ba:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80022be:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 80022c2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 80022c6:	e6ff      	b.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80022c8:	4e20      	ldr	r6, [pc, #128]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x528>)
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80022ca:	6860      	ldr	r0, [r4, #4]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80022cc:	f8d6 2084 	ldr.w	r2, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80022d0:	f8d6 7084 	ldr.w	r7, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80022d4:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 80022d8:	68e1      	ldr	r1, [r4, #12]
 80022da:	f007 47e0 	and.w	r7, r7, #1879048192	; 0x70000000
 80022de:	433a      	orrs	r2, r7
 80022e0:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 80022e4:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80022e8:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80022ec:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
 80022f0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80022f2:	f021 011f 	bic.w	r1, r1, #31
 80022f6:	3a01      	subs	r2, #1
 80022f8:	430a      	orrs	r2, r1
 80022fa:	f8c6 208c 	str.w	r2, [r6, #140]	; 0x8c
 80022fe:	e6cc      	b.n	800209a <HAL_RCCEx_PeriphCLKConfig+0x276>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002300:	4812      	ldr	r0, [pc, #72]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x528>)
 8002302:	4914      	ldr	r1, [pc, #80]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8002304:	6882      	ldr	r2, [r0, #8]
 8002306:	4019      	ands	r1, r3
 8002308:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 800230c:	430a      	orrs	r2, r1
 800230e:	6082      	str	r2, [r0, #8]
 8002310:	e7be      	b.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        tickstart = HAL_GetTick();
 8002312:	f7fe fefd 	bl	8001110 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002316:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800231a:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800231c:	e006      	b.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x508>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800231e:	f7fe fef7 	bl	8001110 <HAL_GetTick>
 8002322:	eba0 0008 	sub.w	r0, r0, r8
 8002326:	4548      	cmp	r0, r9
 8002328:	f63f af70 	bhi.w	800220c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800232c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800232e:	079b      	lsls	r3, r3, #30
 8002330:	d5f5      	bpl.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8002332:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002334:	f403 7140 	and.w	r1, r3, #768	; 0x300
 8002338:	e7a2      	b.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800233a:	02d8      	lsls	r0, r3, #11
 800233c:	f57f af20 	bpl.w	8002180 <HAL_RCCEx_PeriphCLKConfig+0x35c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002340:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002342:	2a00      	cmp	r2, #0
 8002344:	f47f af1c 	bne.w	8002180 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002348:	e6fe      	b.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x324>
 800234a:	bf00      	nop
 800234c:	40023800 	.word	0x40023800
 8002350:	40007000 	.word	0x40007000
 8002354:	0ffffcff 	.word	0x0ffffcff

08002358 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8002358:	b5f0      	push	{r4, r5, r6, r7, lr}
 800235a:	4605      	mov	r5, r0
 800235c:	b089      	sub	sp, #36	; 0x24
 800235e:	460f      	mov	r7, r1
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8002360:	f7fe fed6 	bl	8001110 <HAL_GetTick>
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0U, 0U};
 8002364:	2200      	movs	r2, #0
 8002366:	2300      	movs	r3, #0
  uint32_t tickstart = HAL_GetTick();
 8002368:	4606      	mov	r6, r0
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800236a:	2108      	movs	r1, #8
 800236c:	6828      	ldr	r0, [r5, #0]
  uint32_t tempscr[2U] = {0U, 0U};
 800236e:	e9cd 2300 	strd	r2, r3, [sp]
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8002372:	f001 f85f 	bl	8003434 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8002376:	4604      	mov	r4, r0
 8002378:	b110      	cbz	r0, 8002380 <SD_FindSCR+0x28>
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
 800237a:	4620      	mov	r0, r4
 800237c:	b009      	add	sp, #36	; 0x24
 800237e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8002380:	6d29      	ldr	r1, [r5, #80]	; 0x50
 8002382:	6828      	ldr	r0, [r5, #0]
 8002384:	0409      	lsls	r1, r1, #16
 8002386:	f001 fd1f 	bl	8003dc8 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 800238a:	4604      	mov	r4, r0
 800238c:	2800      	cmp	r0, #0
 800238e:	d1f4      	bne.n	800237a <SD_FindSCR+0x22>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002390:	f04f 32ff 	mov.w	r2, #4294967295
 8002394:	2308      	movs	r3, #8
 8002396:	2030      	movs	r0, #48	; 0x30
 8002398:	2102      	movs	r1, #2
 800239a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800239e:	2200      	movs	r2, #0
 80023a0:	2301      	movs	r3, #1
 80023a2:	e9cd 0104 	strd	r0, r1, [sp, #16]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80023a6:	a902      	add	r1, sp, #8
 80023a8:	6828      	ldr	r0, [r5, #0]
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80023aa:	e9cd 2306 	strd	r2, r3, [sp, #24]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80023ae:	f001 f82b 	bl	8003408 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80023b2:	6828      	ldr	r0, [r5, #0]
 80023b4:	f001 fe82 	bl	80040bc <SDMMC_CmdSendSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 80023b8:	4604      	mov	r4, r0
 80023ba:	b140      	cbz	r0, 80023ce <SD_FindSCR+0x76>
 80023bc:	e7dd      	b.n	800237a <SD_FindSCR+0x22>
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 80023be:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80023c0:	0491      	lsls	r1, r2, #18
 80023c2:	d515      	bpl.n	80023f0 <SD_FindSCR+0x98>
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80023c4:	f7fe fea4 	bl	8001110 <HAL_GetTick>
 80023c8:	1b83      	subs	r3, r0, r6
 80023ca:	3301      	adds	r3, #1
 80023cc:	d024      	beq.n	8002418 <SD_FindSCR+0xc0>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 80023ce:	6828      	ldr	r0, [r5, #0]
 80023d0:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80023d2:	f012 0f2a 	tst.w	r2, #42	; 0x2a
 80023d6:	d10b      	bne.n	80023f0 <SD_FindSCR+0x98>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 80023d8:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80023da:	0293      	lsls	r3, r2, #10
 80023dc:	d5ef      	bpl.n	80023be <SD_FindSCR+0x66>
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 80023de:	f000 fff7 	bl	80033d0 <SDMMC_ReadFIFO>
 80023e2:	ab08      	add	r3, sp, #32
 80023e4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80023e8:	3401      	adds	r4, #1
 80023ea:	f843 0c20 	str.w	r0, [r3, #-32]
 80023ee:	e7e9      	b.n	80023c4 <SD_FindSCR+0x6c>
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80023f0:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80023f2:	0712      	lsls	r2, r2, #28
 80023f4:	d416      	bmi.n	8002424 <SD_FindSCR+0xcc>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80023f6:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80023f8:	0793      	lsls	r3, r2, #30
 80023fa:	d416      	bmi.n	800242a <SD_FindSCR+0xd2>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80023fc:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80023fe:	f014 0420 	ands.w	r4, r4, #32
 8002402:	d10c      	bne.n	800241e <SD_FindSCR+0xc6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8002404:	9901      	ldr	r1, [sp, #4]
 8002406:	f240 533a 	movw	r3, #1338	; 0x53a
 800240a:	9a00      	ldr	r2, [sp, #0]
 800240c:	ba09      	rev	r1, r1
 800240e:	6383      	str	r3, [r0, #56]	; 0x38
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8002410:	ba12      	rev	r2, r2
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8002412:	e9c7 1200 	strd	r1, r2, [r7]
  return HAL_SD_ERROR_NONE;
 8002416:	e7b0      	b.n	800237a <SD_FindSCR+0x22>
      return HAL_SD_ERROR_TIMEOUT;
 8002418:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800241c:	e7ad      	b.n	800237a <SD_FindSCR+0x22>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800241e:	2420      	movs	r4, #32
 8002420:	6384      	str	r4, [r0, #56]	; 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 8002422:	e7aa      	b.n	800237a <SD_FindSCR+0x22>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8002424:	2408      	movs	r4, #8
 8002426:	6384      	str	r4, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8002428:	e7a7      	b.n	800237a <SD_FindSCR+0x22>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800242a:	2402      	movs	r4, #2
 800242c:	6384      	str	r4, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800242e:	e7a4      	b.n	800237a <SD_FindSCR+0x22>

08002430 <HAL_SD_ReadBlocks>:
{
 8002430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002434:	460c      	mov	r4, r1
 8002436:	b087      	sub	sp, #28
 8002438:	4683      	mov	fp, r0
 800243a:	4691      	mov	r9, r2
 800243c:	461e      	mov	r6, r3
  uint32_t tickstart = HAL_GetTick();
 800243e:	f7fe fe67 	bl	8001110 <HAL_GetTick>
  if(NULL == pData)
 8002442:	2c00      	cmp	r4, #0
 8002444:	f000 8085 	beq.w	8002552 <HAL_SD_ReadBlocks+0x122>
  if(hsd->State == HAL_SD_STATE_READY)
 8002448:	f89b 3034 	ldrb.w	r3, [fp, #52]	; 0x34
 800244c:	2b01      	cmp	r3, #1
 800244e:	fa5f f883 	uxtb.w	r8, r3
 8002452:	d16a      	bne.n	800252a <HAL_SD_ReadBlocks+0xfa>
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002454:	eb09 0306 	add.w	r3, r9, r6
 8002458:	f8db 205c 	ldr.w	r2, [fp, #92]	; 0x5c
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800245c:	2100      	movs	r1, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800245e:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002460:	f8cb 1038 	str.w	r1, [fp, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002464:	f200 8081 	bhi.w	800256a <HAL_SD_ReadBlocks+0x13a>
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002468:	f8db 3044 	ldr.w	r3, [fp, #68]	; 0x44
    hsd->State = HAL_SD_STATE_BUSY;
 800246c:	2203      	movs	r2, #3
 800246e:	4605      	mov	r5, r0
    hsd->Instance->DCTRL = 0U;
 8002470:	f8db 0000 	ldr.w	r0, [fp]
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002474:	2b01      	cmp	r3, #1
    hsd->State = HAL_SD_STATE_BUSY;
 8002476:	f88b 2034 	strb.w	r2, [fp, #52]	; 0x34
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800247a:	ea4f 2346 	mov.w	r3, r6, lsl #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800247e:	f04f 32ff 	mov.w	r2, #4294967295
    hsd->Instance->DCTRL = 0U;
 8002482:	62c1      	str	r1, [r0, #44]	; 0x2c
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8002484:	f04f 0190 	mov.w	r1, #144	; 0x90
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002488:	9200      	str	r2, [sp, #0]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800248a:	f04f 0a02 	mov.w	sl, #2
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800248e:	f04f 0200 	mov.w	r2, #0
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8002492:	9301      	str	r3, [sp, #4]
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8002494:	f04f 0301 	mov.w	r3, #1
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8002498:	9102      	str	r1, [sp, #8]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800249a:	4669      	mov	r1, sp
      add *= 512U;
 800249c:	bf18      	it	ne
 800249e:	ea4f 2949 	movne.w	r9, r9, lsl #9
    config.DPSM          = SDMMC_DPSM_ENABLE;
 80024a2:	9305      	str	r3, [sp, #20]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80024a4:	e9cd a203 	strd	sl, r2, [sp, #12]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80024a8:	f000 ffae 	bl	8003408 <SDMMC_ConfigData>
    if(NumberOfBlocks > 1U)
 80024ac:	2e01      	cmp	r6, #1
 80024ae:	f04f 0301 	mov.w	r3, #1
 80024b2:	d946      	bls.n	8002542 <HAL_SD_ReadBlocks+0x112>
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80024b4:	4649      	mov	r1, r9
 80024b6:	f8db 0000 	ldr.w	r0, [fp]
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80024ba:	f8cb a030 	str.w	sl, [fp, #48]	; 0x30
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80024be:	f001 f8f9 	bl	80036b4 <SDMMC_CmdReadMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 80024c2:	2800      	cmp	r0, #0
 80024c4:	d15b      	bne.n	800257e <HAL_SD_ReadBlocks+0x14e>
    dataremaining = config.DataLength;
 80024c6:	f8dd a004 	ldr.w	sl, [sp, #4]
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80024ca:	e006      	b.n	80024da <HAL_SD_ReadBlocks+0xaa>
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80024cc:	f7fe fe20 	bl	8001110 <HAL_GetTick>
 80024d0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80024d2:	1b40      	subs	r0, r0, r5
 80024d4:	4298      	cmp	r0, r3
 80024d6:	f080 809b 	bcs.w	8002610 <HAL_SD_ReadBlocks+0x1e0>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80024da:	f8db 2000 	ldr.w	r2, [fp]
 80024de:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80024e0:	f413 7f95 	tst.w	r3, #298	; 0x12a
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 80024e4:	6b53      	ldr	r3, [r2, #52]	; 0x34
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80024e6:	d15a      	bne.n	800259e <HAL_SD_ReadBlocks+0x16e>
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 80024e8:	041b      	lsls	r3, r3, #16
 80024ea:	d5ef      	bpl.n	80024cc <HAL_SD_ReadBlocks+0x9c>
 80024ec:	f1ba 0f00 	cmp.w	sl, #0
 80024f0:	d0ec      	beq.n	80024cc <HAL_SD_ReadBlocks+0x9c>
 80024f2:	1d27      	adds	r7, r4, #4
 80024f4:	f104 0924 	add.w	r9, r4, #36	; 0x24
 80024f8:	e001      	b.n	80024fe <HAL_SD_ReadBlocks+0xce>
 80024fa:	f8db 2000 	ldr.w	r2, [fp]
          data = SDMMC_ReadFIFO(hsd->Instance);
 80024fe:	4610      	mov	r0, r2
 8002500:	3704      	adds	r7, #4
 8002502:	f000 ff65 	bl	80033d0 <SDMMC_ReadFIFO>
 8002506:	4602      	mov	r2, r0
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8002508:	0a00      	lsrs	r0, r0, #8
          *tempbuff = (uint8_t)(data & 0xFFU);
 800250a:	f807 2c08 	strb.w	r2, [r7, #-8]
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800250e:	0c11      	lsrs	r1, r2, #16
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8002510:	0e12      	lsrs	r2, r2, #24
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8002512:	f807 0c07 	strb.w	r0, [r7, #-7]
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8002516:	f807 1c06 	strb.w	r1, [r7, #-6]
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800251a:	f807 2c05 	strb.w	r2, [r7, #-5]
        for(count = 0U; count < 8U; count++)
 800251e:	45b9      	cmp	r9, r7
 8002520:	d1eb      	bne.n	80024fa <HAL_SD_ReadBlocks+0xca>
 8002522:	3420      	adds	r4, #32
 8002524:	f1aa 0a20 	sub.w	sl, sl, #32
 8002528:	e7d0      	b.n	80024cc <HAL_SD_ReadBlocks+0x9c>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800252a:	f8db 3038 	ldr.w	r3, [fp, #56]	; 0x38
    return HAL_ERROR;
 800252e:	f04f 0801 	mov.w	r8, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8002532:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002536:	f8cb 3038 	str.w	r3, [fp, #56]	; 0x38
}
 800253a:	4640      	mov	r0, r8
 800253c:	b007      	add	sp, #28
 800253e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8002542:	4649      	mov	r1, r9
 8002544:	f8db 0000 	ldr.w	r0, [fp]
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8002548:	f8cb 3030 	str.w	r3, [fp, #48]	; 0x30
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800254c:	f001 f812 	bl	8003574 <SDMMC_CmdReadSingleBlock>
 8002550:	e7b7      	b.n	80024c2 <HAL_SD_ReadBlocks+0x92>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002552:	f8db 3038 	ldr.w	r3, [fp, #56]	; 0x38
    return HAL_ERROR;
 8002556:	f04f 0801 	mov.w	r8, #1
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800255a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
}
 800255e:	4640      	mov	r0, r8
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002560:	f8cb 3038 	str.w	r3, [fp, #56]	; 0x38
}
 8002564:	b007      	add	sp, #28
 8002566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800256a:	f8db 3038 	ldr.w	r3, [fp, #56]	; 0x38
}
 800256e:	4640      	mov	r0, r8
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002570:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002574:	f8cb 3038 	str.w	r3, [fp, #56]	; 0x38
}
 8002578:	b007      	add	sp, #28
 800257a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800257e:	f8db 3000 	ldr.w	r3, [fp]
          hsd->State = HAL_SD_STATE_READY;
 8002582:	2101      	movs	r1, #1
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002584:	4c4a      	ldr	r4, [pc, #296]	; (80026b0 <HAL_SD_ReadBlocks+0x280>)
          hsd->Context = SD_CONTEXT_NONE;
 8002586:	2200      	movs	r2, #0
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002588:	639c      	str	r4, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800258a:	f8db 3038 	ldr.w	r3, [fp, #56]	; 0x38
 800258e:	4318      	orrs	r0, r3
 8002590:	f8cb 0038 	str.w	r0, [fp, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8002594:	f88b 1034 	strb.w	r1, [fp, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8002598:	f8cb 2030 	str.w	r2, [fp, #48]	; 0x30
          return HAL_ERROR;
 800259c:	e7cd      	b.n	800253a <HAL_SD_ReadBlocks+0x10a>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800259e:	05df      	lsls	r7, r3, #23
 80025a0:	d501      	bpl.n	80025a6 <HAL_SD_ReadBlocks+0x176>
 80025a2:	2e01      	cmp	r6, #1
 80025a4:	d847      	bhi.n	8002636 <HAL_SD_ReadBlocks+0x206>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80025a6:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80025a8:	f013 0308 	ands.w	r3, r3, #8
 80025ac:	d15d      	bne.n	800266a <HAL_SD_ReadBlocks+0x23a>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80025ae:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80025b0:	f011 0102 	ands.w	r1, r1, #2
 80025b4:	d14b      	bne.n	800264e <HAL_SD_ReadBlocks+0x21e>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80025b6:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80025b8:	0698      	lsls	r0, r3, #26
 80025ba:	d465      	bmi.n	8002688 <HAL_SD_ReadBlocks+0x258>
 80025bc:	f10a 0a04 	add.w	sl, sl, #4
 80025c0:	1d26      	adds	r6, r4, #4
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
 80025c2:	4454      	add	r4, sl
 80025c4:	e017      	b.n	80025f6 <HAL_SD_ReadBlocks+0x1c6>
 80025c6:	029b      	lsls	r3, r3, #10
 80025c8:	d519      	bpl.n	80025fe <HAL_SD_ReadBlocks+0x1ce>
      data = SDMMC_ReadFIFO(hsd->Instance);
 80025ca:	f000 ff01 	bl	80033d0 <SDMMC_ReadFIFO>
      *tempbuff = (uint8_t)(data & 0xFFU);
 80025ce:	f806 0c04 	strb.w	r0, [r6, #-4]
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80025d2:	0c03      	lsrs	r3, r0, #16
 80025d4:	3604      	adds	r6, #4
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80025d6:	0a02      	lsrs	r2, r0, #8
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80025d8:	0e00      	lsrs	r0, r0, #24
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80025da:	f806 3c06 	strb.w	r3, [r6, #-6]
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80025de:	f806 2c07 	strb.w	r2, [r6, #-7]
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80025e2:	f806 0c05 	strb.w	r0, [r6, #-5]
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80025e6:	f7fe fd93 	bl	8001110 <HAL_GetTick>
 80025ea:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80025ec:	1b40      	subs	r0, r0, r5
 80025ee:	4298      	cmp	r0, r3
 80025f0:	d258      	bcs.n	80026a4 <HAL_SD_ReadBlocks+0x274>
 80025f2:	f8db 2000 	ldr.w	r2, [fp]
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
 80025f6:	42b4      	cmp	r4, r6
      data = SDMMC_ReadFIFO(hsd->Instance);
 80025f8:	4610      	mov	r0, r2
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
 80025fa:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80025fc:	d1e3      	bne.n	80025c6 <HAL_SD_ReadBlocks+0x196>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80025fe:	f240 513a 	movw	r1, #1338	; 0x53a
    hsd->State = HAL_SD_STATE_READY;
 8002602:	2301      	movs	r3, #1
    return HAL_OK;
 8002604:	f04f 0800 	mov.w	r8, #0
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8002608:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800260a:	f88b 3034 	strb.w	r3, [fp, #52]	; 0x34
    return HAL_OK;
 800260e:	e794      	b.n	800253a <HAL_SD_ReadBlocks+0x10a>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002610:	f8db 3000 	ldr.w	r3, [fp]
        hsd->State= HAL_SD_STATE_READY;
 8002614:	2101      	movs	r1, #1
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002616:	4826      	ldr	r0, [pc, #152]	; (80026b0 <HAL_SD_ReadBlocks+0x280>)
        hsd->Context = SD_CONTEXT_NONE;
 8002618:	2200      	movs	r2, #0
        return HAL_TIMEOUT;
 800261a:	f04f 0803 	mov.w	r8, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800261e:	6398      	str	r0, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8002620:	f8db 3038 	ldr.w	r3, [fp, #56]	; 0x38
 8002624:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002628:	f8cb 3038 	str.w	r3, [fp, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800262c:	f88b 1034 	strb.w	r1, [fp, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002630:	f8cb 2030 	str.w	r2, [fp, #48]	; 0x30
        return HAL_ERROR;
 8002634:	e781      	b.n	800253a <HAL_SD_ReadBlocks+0x10a>
      if(hsd->SdCard.CardType != CARD_SECURED)
 8002636:	f8db 3044 	ldr.w	r3, [fp, #68]	; 0x44
 800263a:	2b03      	cmp	r3, #3
 800263c:	d0b3      	beq.n	80025a6 <HAL_SD_ReadBlocks+0x176>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800263e:	4610      	mov	r0, r2
 8002640:	f001 fa18 	bl	8003a74 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8002644:	2800      	cmp	r0, #0
 8002646:	d19a      	bne.n	800257e <HAL_SD_ReadBlocks+0x14e>
 8002648:	f8db 2000 	ldr.w	r2, [fp]
 800264c:	e7ab      	b.n	80025a6 <HAL_SD_ReadBlocks+0x176>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800264e:	4818      	ldr	r0, [pc, #96]	; (80026b0 <HAL_SD_ReadBlocks+0x280>)
      hsd->State = HAL_SD_STATE_READY;
 8002650:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002652:	6390      	str	r0, [r2, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8002654:	f8db 2038 	ldr.w	r2, [fp, #56]	; 0x38
 8002658:	f042 0202 	orr.w	r2, r2, #2
 800265c:	f8cb 2038 	str.w	r2, [fp, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002660:	f88b 1034 	strb.w	r1, [fp, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002664:	f8cb 3030 	str.w	r3, [fp, #48]	; 0x30
      return HAL_ERROR;
 8002668:	e767      	b.n	800253a <HAL_SD_ReadBlocks+0x10a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800266a:	4b11      	ldr	r3, [pc, #68]	; (80026b0 <HAL_SD_ReadBlocks+0x280>)
      hsd->State = HAL_SD_STATE_READY;
 800266c:	2001      	movs	r0, #1
      hsd->Context = SD_CONTEXT_NONE;
 800266e:	2100      	movs	r1, #0
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002670:	6393      	str	r3, [r2, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002672:	f8db 3038 	ldr.w	r3, [fp, #56]	; 0x38
 8002676:	f043 0308 	orr.w	r3, r3, #8
 800267a:	f8cb 3038 	str.w	r3, [fp, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800267e:	f88b 0034 	strb.w	r0, [fp, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002682:	f8cb 1030 	str.w	r1, [fp, #48]	; 0x30
      return HAL_ERROR;
 8002686:	e758      	b.n	800253a <HAL_SD_ReadBlocks+0x10a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002688:	4b09      	ldr	r3, [pc, #36]	; (80026b0 <HAL_SD_ReadBlocks+0x280>)
      hsd->State = HAL_SD_STATE_READY;
 800268a:	2001      	movs	r0, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800268c:	6393      	str	r3, [r2, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800268e:	f8db 3038 	ldr.w	r3, [fp, #56]	; 0x38
 8002692:	f043 0320 	orr.w	r3, r3, #32
 8002696:	f8cb 3038 	str.w	r3, [fp, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800269a:	f88b 0034 	strb.w	r0, [fp, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800269e:	f8cb 1030 	str.w	r1, [fp, #48]	; 0x30
      return HAL_ERROR;
 80026a2:	e74a      	b.n	800253a <HAL_SD_ReadBlocks+0x10a>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80026a4:	f8db 3000 	ldr.w	r3, [fp]
        hsd->State= HAL_SD_STATE_READY;
 80026a8:	2101      	movs	r1, #1
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80026aa:	4801      	ldr	r0, [pc, #4]	; (80026b0 <HAL_SD_ReadBlocks+0x280>)
        hsd->Context = SD_CONTEXT_NONE;
 80026ac:	2200      	movs	r2, #0
 80026ae:	e7b6      	b.n	800261e <HAL_SD_ReadBlocks+0x1ee>
 80026b0:	004005ff 	.word	0x004005ff

080026b4 <HAL_SD_WriteBlocks>:
{
 80026b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026b8:	460d      	mov	r5, r1
 80026ba:	b089      	sub	sp, #36	; 0x24
 80026bc:	4604      	mov	r4, r0
 80026be:	4692      	mov	sl, r2
 80026c0:	461f      	mov	r7, r3
 80026c2:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
  uint32_t tickstart = HAL_GetTick();
 80026c6:	f7fe fd23 	bl	8001110 <HAL_GetTick>
  if(NULL == pData)
 80026ca:	2d00      	cmp	r5, #0
 80026cc:	d067      	beq.n	800279e <HAL_SD_WriteBlocks+0xea>
  if(hsd->State == HAL_SD_STATE_READY)
 80026ce:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	fa5f f983 	uxtb.w	r9, r3
 80026d8:	d150      	bne.n	800277c <HAL_SD_WriteBlocks+0xc8>
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80026da:	eb0a 0307 	add.w	r3, sl, r7
 80026de:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80026e0:	2100      	movs	r1, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80026e2:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80026e4:	63a1      	str	r1, [r4, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80026e6:	d864      	bhi.n	80027b2 <HAL_SD_WriteBlocks+0xfe>
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80026e8:	6c63      	ldr	r3, [r4, #68]	; 0x44
    hsd->State = HAL_SD_STATE_BUSY;
 80026ea:	2203      	movs	r2, #3
 80026ec:	4606      	mov	r6, r0
    hsd->Instance->DCTRL = 0U;
 80026ee:	6820      	ldr	r0, [r4, #0]
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80026f0:	2b01      	cmp	r3, #1
    hsd->State = HAL_SD_STATE_BUSY;
 80026f2:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80026f6:	f04f 33ff 	mov.w	r3, #4294967295
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80026fa:	ea4f 2247 	mov.w	r2, r7, lsl #9
    hsd->Instance->DCTRL = 0U;
 80026fe:	62c1      	str	r1, [r0, #44]	; 0x2c
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8002700:	f04f 0190 	mov.w	r1, #144	; 0x90
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002704:	9302      	str	r3, [sp, #8]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8002706:	f04f 0300 	mov.w	r3, #0
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800270a:	9203      	str	r2, [sp, #12]
    config.DPSM          = SDMMC_DPSM_ENABLE;
 800270c:	f04f 0201 	mov.w	r2, #1
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8002710:	9104      	str	r1, [sp, #16]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8002712:	a902      	add	r1, sp, #8
      add *= 512U;
 8002714:	bf18      	it	ne
 8002716:	ea4f 2a4a 	movne.w	sl, sl, lsl #9
    config.DPSM          = SDMMC_DPSM_ENABLE;
 800271a:	9207      	str	r2, [sp, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800271c:	e9cd 3305 	strd	r3, r3, [sp, #20]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8002720:	f000 fe72 	bl	8003408 <SDMMC_ConfigData>
    if(NumberOfBlocks > 1U)
 8002724:	2f01      	cmp	r7, #1
 8002726:	d933      	bls.n	8002790 <HAL_SD_WriteBlocks+0xdc>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8002728:	2320      	movs	r3, #32
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800272a:	4651      	mov	r1, sl
 800272c:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800272e:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8002730:	f001 f900 	bl	8003934 <SDMMC_CmdWriteMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 8002734:	2800      	cmp	r0, #0
 8002736:	d144      	bne.n	80027c2 <HAL_SD_WriteBlocks+0x10e>
    dataremaining = config.DataLength;
 8002738:	f8dd b00c 	ldr.w	fp, [sp, #12]
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800273c:	e004      	b.n	8002748 <HAL_SD_WriteBlocks+0x94>
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800273e:	f7fe fce7 	bl	8001110 <HAL_GetTick>
 8002742:	1b80      	subs	r0, r0, r6
 8002744:	4540      	cmp	r0, r8
 8002746:	d263      	bcs.n	8002810 <HAL_SD_WriteBlocks+0x15c>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8002748:	6820      	ldr	r0, [r4, #0]
 800274a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800274c:	f413 7f8d 	tst.w	r3, #282	; 0x11a
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8002750:	6b43      	ldr	r3, [r0, #52]	; 0x34
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8002752:	d142      	bne.n	80027da <HAL_SD_WriteBlocks+0x126>
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8002754:	045a      	lsls	r2, r3, #17
 8002756:	d5f2      	bpl.n	800273e <HAL_SD_WriteBlocks+0x8a>
 8002758:	f1bb 0f00 	cmp.w	fp, #0
 800275c:	d0ef      	beq.n	800273e <HAL_SD_WriteBlocks+0x8a>
 800275e:	f105 0a20 	add.w	sl, r5, #32
 8002762:	e000      	b.n	8002766 <HAL_SD_WriteBlocks+0xb2>
 8002764:	6820      	ldr	r0, [r4, #0]
          data |= ((uint32_t)(*tempbuff) << 24U);
 8002766:	f855 3b04 	ldr.w	r3, [r5], #4
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800276a:	a901      	add	r1, sp, #4
          data |= ((uint32_t)(*tempbuff) << 24U);
 800276c:	9301      	str	r3, [sp, #4]
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800276e:	f000 fe33 	bl	80033d8 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8002772:	4555      	cmp	r5, sl
 8002774:	d1f6      	bne.n	8002764 <HAL_SD_WriteBlocks+0xb0>
 8002776:	f1ab 0b20 	sub.w	fp, fp, #32
 800277a:	e7e0      	b.n	800273e <HAL_SD_WriteBlocks+0x8a>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800277c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 800277e:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8002782:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002786:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8002788:	4648      	mov	r0, r9
 800278a:	b009      	add	sp, #36	; 0x24
 800278c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8002790:	2310      	movs	r3, #16
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8002792:	4651      	mov	r1, sl
 8002794:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8002796:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8002798:	f001 f82c 	bl	80037f4 <SDMMC_CmdWriteSingleBlock>
 800279c:	e7ca      	b.n	8002734 <HAL_SD_WriteBlocks+0x80>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800279e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 80027a0:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80027a4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
}
 80027a8:	4648      	mov	r0, r9
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80027aa:	63a3      	str	r3, [r4, #56]	; 0x38
}
 80027ac:	b009      	add	sp, #36	; 0x24
 80027ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80027b2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
}
 80027b4:	4648      	mov	r0, r9
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80027b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80027ba:	63a3      	str	r3, [r4, #56]	; 0x38
}
 80027bc:	b009      	add	sp, #36	; 0x24
 80027be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80027c2:	6823      	ldr	r3, [r4, #0]
          hsd->State = HAL_SD_STATE_READY;
 80027c4:	2101      	movs	r1, #1
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80027c6:	4d2d      	ldr	r5, [pc, #180]	; (800287c <HAL_SD_WriteBlocks+0x1c8>)
          hsd->Context = SD_CONTEXT_NONE;
 80027c8:	2200      	movs	r2, #0
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80027ca:	639d      	str	r5, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80027cc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80027ce:	4318      	orrs	r0, r3
 80027d0:	63a0      	str	r0, [r4, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80027d2:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80027d6:	6322      	str	r2, [r4, #48]	; 0x30
          return HAL_ERROR;
 80027d8:	e7d6      	b.n	8002788 <HAL_SD_WriteBlocks+0xd4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80027da:	05db      	lsls	r3, r3, #23
 80027dc:	d501      	bpl.n	80027e2 <HAL_SD_WriteBlocks+0x12e>
 80027de:	2f01      	cmp	r7, #1
 80027e0:	d823      	bhi.n	800282a <HAL_SD_WriteBlocks+0x176>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80027e2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80027e4:	f013 0308 	ands.w	r3, r3, #8
 80027e8:	d133      	bne.n	8002852 <HAL_SD_WriteBlocks+0x19e>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80027ea:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80027ec:	f012 0202 	ands.w	r2, r2, #2
 80027f0:	d124      	bne.n	800283c <HAL_SD_WriteBlocks+0x188>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 80027f2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80027f4:	f013 0310 	ands.w	r3, r3, #16
 80027f8:	d037      	beq.n	800286a <HAL_SD_WriteBlocks+0x1b6>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80027fa:	4b20      	ldr	r3, [pc, #128]	; (800287c <HAL_SD_WriteBlocks+0x1c8>)
      hsd->State = HAL_SD_STATE_READY;
 80027fc:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80027fe:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8002800:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002802:	f043 0310 	orr.w	r3, r3, #16
 8002806:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002808:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800280c:	6322      	str	r2, [r4, #48]	; 0x30
      return HAL_ERROR;
 800280e:	e7bb      	b.n	8002788 <HAL_SD_WriteBlocks+0xd4>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002810:	6821      	ldr	r1, [r4, #0]
        hsd->State = HAL_SD_STATE_READY;
 8002812:	2201      	movs	r2, #1
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002814:	4819      	ldr	r0, [pc, #100]	; (800287c <HAL_SD_WriteBlocks+0x1c8>)
        hsd->Context = SD_CONTEXT_NONE;
 8002816:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 8002818:	f04f 0903 	mov.w	r9, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800281c:	6388      	str	r0, [r1, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800281e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002820:	63a1      	str	r1, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8002822:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002826:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_TIMEOUT;
 8002828:	e7ae      	b.n	8002788 <HAL_SD_WriteBlocks+0xd4>
      if(hsd->SdCard.CardType != CARD_SECURED)
 800282a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800282c:	2b03      	cmp	r3, #3
 800282e:	d0d8      	beq.n	80027e2 <HAL_SD_WriteBlocks+0x12e>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002830:	f001 f920 	bl	8003a74 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8002834:	2800      	cmp	r0, #0
 8002836:	d1c4      	bne.n	80027c2 <HAL_SD_WriteBlocks+0x10e>
 8002838:	6820      	ldr	r0, [r4, #0]
 800283a:	e7d2      	b.n	80027e2 <HAL_SD_WriteBlocks+0x12e>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800283c:	4a0f      	ldr	r2, [pc, #60]	; (800287c <HAL_SD_WriteBlocks+0x1c8>)
      hsd->State = HAL_SD_STATE_READY;
 800283e:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002840:	6382      	str	r2, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8002842:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002844:	f042 0202 	orr.w	r2, r2, #2
 8002848:	63a2      	str	r2, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800284a:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800284e:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8002850:	e79a      	b.n	8002788 <HAL_SD_WriteBlocks+0xd4>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002852:	4b0a      	ldr	r3, [pc, #40]	; (800287c <HAL_SD_WriteBlocks+0x1c8>)
      hsd->State = HAL_SD_STATE_READY;
 8002854:	2101      	movs	r1, #1
      hsd->Context = SD_CONTEXT_NONE;
 8002856:	2200      	movs	r2, #0
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002858:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800285a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800285c:	f043 0308 	orr.w	r3, r3, #8
 8002860:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002862:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002866:	6322      	str	r2, [r4, #48]	; 0x30
      return HAL_ERROR;
 8002868:	e78e      	b.n	8002788 <HAL_SD_WriteBlocks+0xd4>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800286a:	f240 513a 	movw	r1, #1338	; 0x53a
    hsd->State = HAL_SD_STATE_READY;
 800286e:	2201      	movs	r2, #1
    return HAL_OK;
 8002870:	4699      	mov	r9, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8002872:	6381      	str	r1, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002874:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    return HAL_OK;
 8002878:	e786      	b.n	8002788 <HAL_SD_WriteBlocks+0xd4>
 800287a:	bf00      	nop
 800287c:	004005ff 	.word	0x004005ff

08002880 <HAL_SD_GetCardCSD>:
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8002880:	6e42      	ldr	r2, [r0, #100]	; 0x64
{
 8002882:	4603      	mov	r3, r0
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8002884:	0f90      	lsrs	r0, r2, #30
{
 8002886:	b5f0      	push	{r4, r5, r6, r7, lr}
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8002888:	7008      	strb	r0, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800288a:	f3c2 6783 	ubfx	r7, r2, #26, #4
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800288e:	f3c2 6601 	ubfx	r6, r2, #24, #2
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8002892:	f3c2 4507 	ubfx	r5, r2, #16, #8
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8002896:	f3c2 2007 	ubfx	r0, r2, #8, #8
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800289a:	b2d2      	uxtb	r2, r2
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800289c:	704f      	strb	r7, [r1, #1]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 800289e:	2400      	movs	r4, #0
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80028a0:	708e      	strb	r6, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80028a2:	70cd      	strb	r5, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80028a4:	7108      	strb	r0, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80028a6:	714a      	strb	r2, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80028a8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80028aa:	0d15      	lsrs	r5, r2, #20
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80028ac:	f3c2 4003 	ubfx	r0, r2, #16, #4
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80028b0:	f3c2 37c0 	ubfx	r7, r2, #15, #1
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80028b4:	f3c2 3680 	ubfx	r6, r2, #14, #1
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80028b8:	80cd      	strh	r5, [r1, #6]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80028ba:	f3c2 3540 	ubfx	r5, r2, #13, #1
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80028be:	7208      	strb	r0, [r1, #8]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80028c0:	f3c2 3000 	ubfx	r0, r2, #12, #1
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80028c4:	724f      	strb	r7, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80028c6:	728e      	strb	r6, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80028c8:	72cd      	strb	r5, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80028ca:	7308      	strb	r0, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 80028cc:	734c      	strb	r4, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 80028ce:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80028d0:	2800      	cmp	r0, #0
 80028d2:	d16e      	bne.n	80029b2 <HAL_SD_GetCardCSD+0x132>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80028d4:	f640 74fc 	movw	r4, #4092	; 0xffc
 80028d8:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80028da:	2501      	movs	r5, #1
    hsd->SdCard.LogBlockSize = 512U;
 80028dc:	f44f 7600 	mov.w	r6, #512	; 0x200
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80028e0:	ea04 0282 	and.w	r2, r4, r2, lsl #2
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80028e4:	f3c0 6ec2 	ubfx	lr, r0, #27, #3
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80028e8:	f3c0 4482 	ubfx	r4, r0, #18, #3
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80028ec:	f3c0 6c02 	ubfx	ip, r0, #24, #3
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80028f0:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80028f4:	f3c0 5742 	ubfx	r7, r0, #21, #3
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80028f8:	610a      	str	r2, [r1, #16]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80028fa:	f3c0 32c2 	ubfx	r2, r0, #15, #3
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80028fe:	f881 e014 	strb.w	lr, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8002902:	f881 c015 	strb.w	ip, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8002906:	758f      	strb	r7, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8002908:	75cc      	strb	r4, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800290a:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800290c:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800290e:	7e0c      	ldrb	r4, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8002910:	442a      	add	r2, r5
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8002912:	f004 0407 	and.w	r4, r4, #7
 8002916:	3402      	adds	r4, #2
 8002918:	40a2      	lsls	r2, r4
 800291a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800291c:	7a0c      	ldrb	r4, [r1, #8]
    hsd->SdCard.LogBlockSize = 512U;
 800291e:	661e      	str	r6, [r3, #96]	; 0x60
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8002920:	f004 040f 	and.w	r4, r4, #15
 8002924:	40a5      	lsls	r5, r4
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8002926:	0a6c      	lsrs	r4, r5, #9
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8002928:	659d      	str	r5, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800292a:	fb02 f204 	mul.w	r2, r2, r4
 800292e:	65da      	str	r2, [r3, #92]	; 0x5c
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8002930:	f3c0 3580 	ubfx	r5, r0, #14, #1
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8002934:	f3c0 16c6 	ubfx	r6, r0, #7, #7
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8002938:	f000 027f 	and.w	r2, r0, #127	; 0x7f
  pCSD->Reserved3 = 0;
 800293c:	2400      	movs	r4, #0
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800293e:	764d      	strb	r5, [r1, #25]
  pCSD->Reserved4 = 1;
 8002940:	2501      	movs	r5, #1
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8002942:	768e      	strb	r6, [r1, #26]
  return HAL_OK;
 8002944:	4620      	mov	r0, r4
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8002946:	76ca      	strb	r2, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8002948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800294a:	0fdf      	lsrs	r7, r3, #31
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800294c:	f3c3 7241 	ubfx	r2, r3, #29, #2
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8002950:	f3c3 6682 	ubfx	r6, r3, #26, #3
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8002954:	f3c3 3cc0 	ubfx	ip, r3, #15, #1
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8002958:	770f      	strb	r7, [r1, #28]
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800295a:	f3c3 5783 	ubfx	r7, r3, #22, #4
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800295e:	774a      	strb	r2, [r1, #29]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8002960:	f3c3 5240 	ubfx	r2, r3, #21, #1
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8002964:	778e      	strb	r6, [r1, #30]
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8002966:	f3c3 4600 	ubfx	r6, r3, #16, #1
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800296a:	77cf      	strb	r7, [r1, #31]
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800296c:	f3c3 3740 	ubfx	r7, r3, #13, #1
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8002970:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8002974:	f3c3 3280 	ubfx	r2, r3, #14, #1
  pCSD->Reserved3 = 0;
 8002978:	f881 4021 	strb.w	r4, [r1, #33]	; 0x21
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800297c:	f3c3 2481 	ubfx	r4, r3, #10, #2
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8002980:	f881 6022 	strb.w	r6, [r1, #34]	; 0x22
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8002984:	f3c3 3600 	ubfx	r6, r3, #12, #1
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8002988:	f881 c023 	strb.w	ip, [r1, #35]	; 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800298c:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8002990:	f3c3 2201 	ubfx	r2, r3, #8, #2
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8002994:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8002998:	f881 7025 	strb.w	r7, [r1, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800299c:	f881 6026 	strb.w	r6, [r1, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80029a0:	f881 4027 	strb.w	r4, [r1, #39]	; 0x27
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80029a4:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80029a8:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 80029ac:	f881 502a 	strb.w	r5, [r1, #42]	; 0x2a
}
 80029b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80029b2:	2801      	cmp	r0, #1
 80029b4:	d110      	bne.n	80029d8 <HAL_SD_GetCardCSD+0x158>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80029b6:	0412      	lsls	r2, r2, #16
 80029b8:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
    hsd->SdCard.BlockSize = 512U;
 80029ba:	f44f 7400 	mov.w	r4, #512	; 0x200
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80029be:	f402 127c 	and.w	r2, r2, #4128768	; 0x3f0000
 80029c2:	ea42 4210 	orr.w	r2, r2, r0, lsr #16
 80029c6:	610a      	str	r2, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80029c8:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockSize = 512U;
 80029ca:	659c      	str	r4, [r3, #88]	; 0x58
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80029cc:	3201      	adds	r2, #1
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80029ce:	661c      	str	r4, [r3, #96]	; 0x60
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80029d0:	0292      	lsls	r2, r2, #10
 80029d2:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80029d4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80029d6:	e7ab      	b.n	8002930 <HAL_SD_GetCardCSD+0xb0>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80029d8:	681a      	ldr	r2, [r3, #0]
    hsd->State = HAL_SD_STATE_READY;
 80029da:	2101      	movs	r1, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80029dc:	4c04      	ldr	r4, [pc, #16]	; (80029f0 <HAL_SD_GetCardCSD+0x170>)
    return HAL_ERROR;
 80029de:	4608      	mov	r0, r1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80029e0:	6394      	str	r4, [r2, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80029e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029e4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80029e8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80029ea:	f883 1034 	strb.w	r1, [r3, #52]	; 0x34
}
 80029ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029f0:	004005ff 	.word	0x004005ff

080029f4 <HAL_SD_InitCard>:
{
 80029f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80029f8:	b099      	sub	sp, #100	; 0x64
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80029fa:	2600      	movs	r6, #0
 80029fc:	2700      	movs	r7, #0
 80029fe:	f04f 0800 	mov.w	r8, #0
 8002a02:	f04f 0976 	mov.w	r9, #118	; 0x76
  status = SDMMC_Init(hsd->Instance, Init);
 8002a06:	aa09      	add	r2, sp, #36	; 0x24
{
 8002a08:	4604      	mov	r4, r0
  status = SDMMC_Init(hsd->Instance, Init);
 8002a0a:	ab06      	add	r3, sp, #24
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8002a0c:	e9cd 6708 	strd	r6, r7, [sp, #32]
 8002a10:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
  status = SDMMC_Init(hsd->Instance, Init);
 8002a14:	ca07      	ldmia	r2, {r0, r1, r2}
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8002a16:	e9cd 6706 	strd	r6, r7, [sp, #24]
  status = SDMMC_Init(hsd->Instance, Init);
 8002a1a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8002a1e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a20:	6820      	ldr	r0, [r4, #0]
 8002a22:	f000 fcb9 	bl	8003398 <SDMMC_Init>
  if(status != HAL_OK)
 8002a26:	b120      	cbz	r0, 8002a32 <HAL_SD_InitCard+0x3e>
    return HAL_ERROR;
 8002a28:	2601      	movs	r6, #1
}
 8002a2a:	4630      	mov	r0, r6
 8002a2c:	b019      	add	sp, #100	; 0x64
 8002a2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_SD_DISABLE(hsd);
 8002a32:	4605      	mov	r5, r0
 8002a34:	6820      	ldr	r0, [r4, #0]
 8002a36:	6843      	ldr	r3, [r0, #4]
 8002a38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a3c:	6043      	str	r3, [r0, #4]
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8002a3e:	f000 fcd1 	bl	80033e4 <SDMMC_PowerState_ON>
  __HAL_SD_ENABLE(hsd);
 8002a42:	6820      	ldr	r0, [r4, #0]
 8002a44:	6843      	ldr	r3, [r0, #4]
 8002a46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a4a:	6043      	str	r3, [r0, #4]
  __IO uint32_t count = 0U;
 8002a4c:	9505      	str	r5, [sp, #20]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8002a4e:	f001 f953 	bl	8003cf8 <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 8002a52:	4605      	mov	r5, r0
 8002a54:	b960      	cbnz	r0, 8002a70 <HAL_SD_InitCard+0x7c>
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8002a56:	6820      	ldr	r0, [r4, #0]
 8002a58:	f001 f978 	bl	8003d4c <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 8002a5c:	b990      	cbnz	r0, 8002a84 <HAL_SD_InitCard+0x90>
    hsd->SdCard.CardVersion = CARD_V2_X;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	64a3      	str	r3, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8002a62:	2100      	movs	r1, #0
 8002a64:	6820      	ldr	r0, [r4, #0]
 8002a66:	f001 f9af 	bl	8003dc8 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8002a6a:	b1a8      	cbz	r0, 8002a98 <HAL_SD_InitCard+0xa4>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002a6c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    hsd->State = HAL_SD_STATE_READY;
 8002a70:	2601      	movs	r6, #1
 8002a72:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
}
 8002a76:	4630      	mov	r0, r6
    hsd->ErrorCode |= errorstate;
 8002a78:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002a7a:	431d      	orrs	r5, r3
 8002a7c:	63a5      	str	r5, [r4, #56]	; 0x38
}
 8002a7e:	b019      	add	sp, #100	; 0x64
 8002a80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8002a84:	6820      	ldr	r0, [r4, #0]
    hsd->SdCard.CardVersion = CARD_V1_X;
 8002a86:	64a5      	str	r5, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8002a88:	f001 f936 	bl	8003cf8 <SDMMC_CmdGoIdleState>
    if(errorstate != HAL_SD_ERROR_NONE)
 8002a8c:	2800      	cmp	r0, #0
 8002a8e:	f040 80c7 	bne.w	8002c20 <HAL_SD_InitCard+0x22c>
  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8002a92:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d0e4      	beq.n	8002a62 <HAL_SD_InitCard+0x6e>
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8002a98:	9b05      	ldr	r3, [sp, #20]
 8002a9a:	f64f 76fe 	movw	r6, #65534	; 0xfffe
 8002a9e:	42b3      	cmp	r3, r6
 8002aa0:	d81c      	bhi.n	8002adc <HAL_SD_InitCard+0xe8>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8002aa2:	4f62      	ldr	r7, [pc, #392]	; (8002c2c <HAL_SD_InitCard+0x238>)
 8002aa4:	e011      	b.n	8002aca <HAL_SD_InitCard+0xd6>
 8002aa6:	6820      	ldr	r0, [r4, #0]
 8002aa8:	f001 fa2e 	bl	8003f08 <SDMMC_CmdAppOperCommand>
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8002aac:	4629      	mov	r1, r5
    if(errorstate != HAL_SD_ERROR_NONE)
 8002aae:	2800      	cmp	r0, #0
 8002ab0:	d1dc      	bne.n	8002a6c <HAL_SD_InitCard+0x78>
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8002ab2:	6820      	ldr	r0, [r4, #0]
 8002ab4:	f000 fca4 	bl	8003400 <SDMMC_GetResponse>
    count++;
 8002ab8:	9b05      	ldr	r3, [sp, #20]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8002aba:	1e05      	subs	r5, r0, #0
    count++;
 8002abc:	f103 0301 	add.w	r3, r3, #1
 8002ac0:	9305      	str	r3, [sp, #20]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8002ac2:	9b05      	ldr	r3, [sp, #20]
 8002ac4:	db0a      	blt.n	8002adc <HAL_SD_InitCard+0xe8>
 8002ac6:	42b3      	cmp	r3, r6
 8002ac8:	d808      	bhi.n	8002adc <HAL_SD_InitCard+0xe8>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8002aca:	2100      	movs	r1, #0
 8002acc:	6820      	ldr	r0, [r4, #0]
 8002ace:	f001 f97b 	bl	8003dc8 <SDMMC_CmdAppCommand>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8002ad2:	4639      	mov	r1, r7
    if(errorstate != HAL_SD_ERROR_NONE)
 8002ad4:	4605      	mov	r5, r0
 8002ad6:	2800      	cmp	r0, #0
 8002ad8:	d0e5      	beq.n	8002aa6 <HAL_SD_InitCard+0xb2>
 8002ada:	e7c9      	b.n	8002a70 <HAL_SD_InitCard+0x7c>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8002adc:	9a05      	ldr	r2, [sp, #20]
 8002ade:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	f200 809e 	bhi.w	8002c24 <HAL_SD_InitCard+0x230>
  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8002ae8:	f3c5 7580 	ubfx	r5, r5, #30, #1
  uint16_t sd_rca = 1U;
 8002aec:	2301      	movs	r3, #1
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8002aee:	6820      	ldr	r0, [r4, #0]
 8002af0:	6465      	str	r5, [r4, #68]	; 0x44
  uint16_t sd_rca = 1U;
 8002af2:	f8ad 3012 	strh.w	r3, [sp, #18]
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8002af6:	f000 fc7f 	bl	80033f8 <SDMMC_GetPowerState>
 8002afa:	2800      	cmp	r0, #0
 8002afc:	f000 808a 	beq.w	8002c14 <HAL_SD_InitCard+0x220>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8002b00:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002b02:	2b03      	cmp	r3, #3
 8002b04:	d132      	bne.n	8002b6c <HAL_SD_InitCard+0x178>
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8002b06:	2104      	movs	r1, #4
 8002b08:	6820      	ldr	r0, [r4, #0]
 8002b0a:	f000 fc79 	bl	8003400 <SDMMC_GetResponse>
 8002b0e:	4603      	mov	r3, r0
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8002b10:	a90d      	add	r1, sp, #52	; 0x34
 8002b12:	4620      	mov	r0, r4
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8002b14:	0d1b      	lsrs	r3, r3, #20
 8002b16:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8002b18:	f7ff feb2 	bl	8002880 <HAL_SD_GetCardCSD>
 8002b1c:	4606      	mov	r6, r0
 8002b1e:	2800      	cmp	r0, #0
 8002b20:	d17b      	bne.n	8002c1a <HAL_SD_InitCard+0x226>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8002b22:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8002b24:	4603      	mov	r3, r0
 8002b26:	6820      	ldr	r0, [r4, #0]
 8002b28:	0412      	lsls	r2, r2, #16
 8002b2a:	f001 f845 	bl	8003bb8 <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 8002b2e:	bb08      	cbnz	r0, 8002b74 <HAL_SD_InitCard+0x180>
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8002b30:	4622      	mov	r2, r4
 8002b32:	1d23      	adds	r3, r4, #4
 8002b34:	f852 5b10 	ldr.w	r5, [r2], #16
 8002b38:	ca07      	ldmia	r2, {r0, r1, r2}
 8002b3a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8002b3e:	4628      	mov	r0, r5
 8002b40:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b42:	f000 fc29 	bl	8003398 <SDMMC_Init>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002b46:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002b4a:	6820      	ldr	r0, [r4, #0]
 8002b4c:	f000 fc72 	bl	8003434 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8002b50:	2800      	cmp	r0, #0
 8002b52:	f43f af6a 	beq.w	8002a2a <HAL_SD_InitCard+0x36>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002b56:	6822      	ldr	r2, [r4, #0]
    hsd->State = HAL_SD_STATE_READY;
 8002b58:	2301      	movs	r3, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002b5a:	4935      	ldr	r1, [pc, #212]	; (8002c30 <HAL_SD_InitCard+0x23c>)
    return HAL_ERROR;
 8002b5c:	461e      	mov	r6, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002b5e:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8002b60:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002b62:	4310      	orrs	r0, r2
 8002b64:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002b66:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 8002b6a:	e75e      	b.n	8002a2a <HAL_SD_InitCard+0x36>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8002b6c:	6820      	ldr	r0, [r4, #0]
 8002b6e:	f001 fb47 	bl	8004200 <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 8002b72:	b148      	cbz	r0, 8002b88 <HAL_SD_InitCard+0x194>
    hsd->State = HAL_SD_STATE_READY;
 8002b74:	2601      	movs	r6, #1
 8002b76:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002b7a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002b7c:	4308      	orrs	r0, r1
 8002b7e:	63a0      	str	r0, [r4, #56]	; 0x38
}
 8002b80:	4630      	mov	r0, r6
 8002b82:	b019      	add	sp, #100	; 0x64
 8002b84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8002b88:	4601      	mov	r1, r0
 8002b8a:	6820      	ldr	r0, [r4, #0]
 8002b8c:	f000 fc38 	bl	8003400 <SDMMC_GetResponse>
 8002b90:	4603      	mov	r3, r0
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8002b92:	2104      	movs	r1, #4
 8002b94:	6820      	ldr	r0, [r4, #0]
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8002b96:	6763      	str	r3, [r4, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8002b98:	f000 fc32 	bl	8003400 <SDMMC_GetResponse>
 8002b9c:	4603      	mov	r3, r0
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8002b9e:	2108      	movs	r1, #8
 8002ba0:	6820      	ldr	r0, [r4, #0]
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8002ba2:	67a3      	str	r3, [r4, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8002ba4:	f000 fc2c 	bl	8003400 <SDMMC_GetResponse>
 8002ba8:	4603      	mov	r3, r0
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8002baa:	210c      	movs	r1, #12
 8002bac:	6820      	ldr	r0, [r4, #0]
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8002bae:	67e3      	str	r3, [r4, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8002bb0:	f000 fc26 	bl	8003400 <SDMMC_GetResponse>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8002bb4:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8002bb6:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  if(hsd->SdCard.CardType != CARD_SECURED)
 8002bba:	2b03      	cmp	r3, #3
 8002bbc:	d0a3      	beq.n	8002b06 <HAL_SD_InitCard+0x112>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8002bbe:	f10d 0112 	add.w	r1, sp, #18
 8002bc2:	6820      	ldr	r0, [r4, #0]
 8002bc4:	f001 fb8e 	bl	80042e4 <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 8002bc8:	2800      	cmp	r0, #0
 8002bca:	d1d3      	bne.n	8002b74 <HAL_SD_InitCard+0x180>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8002bcc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002bce:	2b03      	cmp	r3, #3
 8002bd0:	d099      	beq.n	8002b06 <HAL_SD_InitCard+0x112>
    hsd->SdCard.RelCardAdd = sd_rca;
 8002bd2:	f8bd 1012 	ldrh.w	r1, [sp, #18]
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002bd6:	6820      	ldr	r0, [r4, #0]
    hsd->SdCard.RelCardAdd = sd_rca;
 8002bd8:	6521      	str	r1, [r4, #80]	; 0x50
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002bda:	0409      	lsls	r1, r1, #16
 8002bdc:	f001 fb4a 	bl	8004274 <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 8002be0:	2800      	cmp	r0, #0
 8002be2:	d1c7      	bne.n	8002b74 <HAL_SD_InitCard+0x180>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8002be4:	4601      	mov	r1, r0
 8002be6:	6820      	ldr	r0, [r4, #0]
 8002be8:	f000 fc0a 	bl	8003400 <SDMMC_GetResponse>
 8002bec:	4603      	mov	r3, r0
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8002bee:	2104      	movs	r1, #4
 8002bf0:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8002bf2:	6663      	str	r3, [r4, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8002bf4:	f000 fc04 	bl	8003400 <SDMMC_GetResponse>
 8002bf8:	4603      	mov	r3, r0
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8002bfa:	2108      	movs	r1, #8
 8002bfc:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8002bfe:	66a3      	str	r3, [r4, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8002c00:	f000 fbfe 	bl	8003400 <SDMMC_GetResponse>
 8002c04:	4603      	mov	r3, r0
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8002c06:	210c      	movs	r1, #12
 8002c08:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8002c0a:	66e3      	str	r3, [r4, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8002c0c:	f000 fbf8 	bl	8003400 <SDMMC_GetResponse>
 8002c10:	6720      	str	r0, [r4, #112]	; 0x70
 8002c12:	e778      	b.n	8002b06 <HAL_SD_InitCard+0x112>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002c14:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8002c18:	e7ac      	b.n	8002b74 <HAL_SD_InitCard+0x180>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002c1a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8002c1e:	e7a9      	b.n	8002b74 <HAL_SD_InitCard+0x180>
 8002c20:	4605      	mov	r5, r0
 8002c22:	e725      	b.n	8002a70 <HAL_SD_InitCard+0x7c>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8002c24:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
 8002c28:	e722      	b.n	8002a70 <HAL_SD_InitCard+0x7c>
 8002c2a:	bf00      	nop
 8002c2c:	c1100000 	.word	0xc1100000
 8002c30:	004005ff 	.word	0x004005ff

08002c34 <HAL_SD_Init>:
  if(hsd == NULL)
 8002c34:	b1c8      	cbz	r0, 8002c6a <HAL_SD_Init+0x36>
{
 8002c36:	b510      	push	{r4, lr}
  if(hsd->State == HAL_SD_STATE_RESET)
 8002c38:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8002c3c:	4604      	mov	r4, r0
 8002c3e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002c42:	b173      	cbz	r3, 8002c62 <HAL_SD_Init+0x2e>
  hsd->State = HAL_SD_STATE_BUSY;
 8002c44:	2303      	movs	r3, #3
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8002c46:	4620      	mov	r0, r4
  hsd->State = HAL_SD_STATE_BUSY;
 8002c48:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8002c4c:	f7ff fed2 	bl	80029f4 <HAL_SD_InitCard>
 8002c50:	b928      	cbnz	r0, 8002c5e <HAL_SD_Init+0x2a>
  hsd->State = HAL_SD_STATE_READY;
 8002c52:	2301      	movs	r3, #1
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002c54:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 8002c56:	6320      	str	r0, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 8002c58:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8002c5c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002c5e:	2001      	movs	r0, #1
}
 8002c60:	bd10      	pop	{r4, pc}
    hsd->Lock = HAL_UNLOCKED;
 8002c62:	7702      	strb	r2, [r0, #28]
    HAL_SD_MspInit(hsd);
 8002c64:	f7fe f834 	bl	8000cd0 <HAL_SD_MspInit>
 8002c68:	e7ec      	b.n	8002c44 <HAL_SD_Init+0x10>
    return HAL_ERROR;
 8002c6a:	2001      	movs	r0, #1
}
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop

08002c70 <HAL_SD_GetCardInfo>:
{
 8002c70:	4603      	mov	r3, r0
}
 8002c72:	2000      	movs	r0, #0
{
 8002c74:	b5f0      	push	{r4, r5, r6, r7, lr}
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8002c76:	e9d3 ec11 	ldrd	lr, ip, [r3, #68]	; 0x44
 8002c7a:	e9d3 7613 	ldrd	r7, r6, [r3, #76]	; 0x4c
 8002c7e:	e9d3 5415 	ldrd	r5, r4, [r3, #84]	; 0x54
 8002c82:	e9d3 2317 	ldrd	r2, r3, [r3, #92]	; 0x5c
 8002c86:	e9c1 ec00 	strd	lr, ip, [r1]
 8002c8a:	e9c1 7602 	strd	r7, r6, [r1, #8]
 8002c8e:	e9c1 5404 	strd	r5, r4, [r1, #16]
 8002c92:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 8002c96:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002c98 <HAL_SD_ConfigWideBusOperation>:
  hsd->State = HAL_SD_STATE_BUSY;
 8002c98:	2203      	movs	r2, #3
  if(hsd->SdCard.CardType != CARD_SECURED)
 8002c9a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002c9c:	4293      	cmp	r3, r2
{
 8002c9e:	b570      	push	{r4, r5, r6, lr}
 8002ca0:	4604      	mov	r4, r0
 8002ca2:	b08a      	sub	sp, #40	; 0x28
 8002ca4:	460e      	mov	r6, r1
  hsd->State = HAL_SD_STATE_BUSY;
 8002ca6:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
  if(hsd->SdCard.CardType != CARD_SECURED)
 8002caa:	d024      	beq.n	8002cf6 <HAL_SD_ConfigWideBusOperation+0x5e>
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8002cac:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8002cb0:	d021      	beq.n	8002cf6 <HAL_SD_ConfigWideBusOperation+0x5e>
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8002cb2:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8002cb6:	d05d      	beq.n	8002d74 <HAL_SD_ConfigWideBusOperation+0xdc>
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8002cb8:	2900      	cmp	r1, #0
 8002cba:	d03c      	beq.n	8002d36 <HAL_SD_ConfigWideBusOperation+0x9e>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002cbc:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002cbe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002cc2:	6383      	str	r3, [r0, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8002cc4:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8002cc6:	b9ed      	cbnz	r5, 8002d04 <HAL_SD_ConfigWideBusOperation+0x6c>
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8002cc8:	6961      	ldr	r1, [r4, #20]
    (void)SDMMC_Init(hsd->Instance, Init);
 8002cca:	ab04      	add	r3, sp, #16
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8002ccc:	69a2      	ldr	r2, [r4, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8002cce:	e9cd 6107 	strd	r6, r1, [sp, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8002cd2:	9209      	str	r2, [sp, #36]	; 0x24
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8002cd4:	68e6      	ldr	r6, [r4, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8002cd6:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8002cda:	9606      	str	r6, [sp, #24]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8002cdc:	e9cd 1204 	strd	r1, r2, [sp, #16]
    (void)SDMMC_Init(hsd->Instance, Init);
 8002ce0:	aa0a      	add	r2, sp, #40	; 0x28
 8002ce2:	e912 0007 	ldmdb	r2, {r0, r1, r2}
 8002ce6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8002cea:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002cec:	6820      	ldr	r0, [r4, #0]
 8002cee:	f000 fb53 	bl	8003398 <SDMMC_Init>
 8002cf2:	6820      	ldr	r0, [r4, #0]
 8002cf4:	e00d      	b.n	8002d12 <HAL_SD_ConfigWideBusOperation+0x7a>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002cf6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002cf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cfc:	63a3      	str	r3, [r4, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8002cfe:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8002d00:	2d00      	cmp	r5, #0
 8002d02:	d0e1      	beq.n	8002cc8 <HAL_SD_ConfigWideBusOperation+0x30>
    hsd->State = HAL_SD_STATE_READY;
 8002d04:	2301      	movs	r3, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002d06:	6820      	ldr	r0, [r4, #0]
 8002d08:	4a30      	ldr	r2, [pc, #192]	; (8002dcc <HAL_SD_ConfigWideBusOperation+0x134>)
    status = HAL_ERROR;
 8002d0a:	461d      	mov	r5, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002d0c:	6382      	str	r2, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002d0e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002d12:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002d16:	f000 fb8d 	bl	8003434 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8002d1a:	b130      	cbz	r0, 8002d2a <HAL_SD_ConfigWideBusOperation+0x92>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002d1c:	6823      	ldr	r3, [r4, #0]
    status = HAL_ERROR;
 8002d1e:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002d20:	4a2a      	ldr	r2, [pc, #168]	; (8002dcc <HAL_SD_ConfigWideBusOperation+0x134>)
 8002d22:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8002d24:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002d26:	4318      	orrs	r0, r3
 8002d28:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->State = HAL_SD_STATE_READY;
 8002d2a:	2301      	movs	r3, #1
}
 8002d2c:	4628      	mov	r0, r5
  hsd->State = HAL_SD_STATE_READY;
 8002d2e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8002d32:	b00a      	add	sp, #40	; 0x28
 8002d34:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t scr[2U] = {0U, 0U};
 8002d36:	2200      	movs	r2, #0
 8002d38:	2300      	movs	r3, #0
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8002d3a:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0U, 0U};
 8002d3c:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8002d40:	f000 fb5e 	bl	8003400 <SDMMC_GetResponse>
 8002d44:	0182      	lsls	r2, r0, #6
 8002d46:	d435      	bmi.n	8002db4 <HAL_SD_ConfigWideBusOperation+0x11c>
  errorstate = SD_FindSCR(hsd, scr);
 8002d48:	a904      	add	r1, sp, #16
 8002d4a:	4620      	mov	r0, r4
 8002d4c:	f7ff fb04 	bl	8002358 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8002d50:	b960      	cbnz	r0, 8002d6c <HAL_SD_ConfigWideBusOperation+0xd4>
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8002d52:	9b05      	ldr	r3, [sp, #20]
 8002d54:	03db      	lsls	r3, r3, #15
 8002d56:	d532      	bpl.n	8002dbe <HAL_SD_ConfigWideBusOperation+0x126>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002d58:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8002d5a:	6820      	ldr	r0, [r4, #0]
 8002d5c:	0409      	lsls	r1, r1, #16
 8002d5e:	f001 f833 	bl	8003dc8 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8002d62:	b918      	cbnz	r0, 8002d6c <HAL_SD_ConfigWideBusOperation+0xd4>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8002d64:	4601      	mov	r1, r0
 8002d66:	6820      	ldr	r0, [r4, #0]
 8002d68:	f001 f908 	bl	8003f7c <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 8002d6c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002d6e:	4308      	orrs	r0, r1
 8002d70:	63a0      	str	r0, [r4, #56]	; 0x38
 8002d72:	e7c4      	b.n	8002cfe <HAL_SD_ConfigWideBusOperation+0x66>
  uint32_t scr[2U] = {0U, 0U};
 8002d74:	2200      	movs	r2, #0
 8002d76:	2300      	movs	r3, #0
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8002d78:	2100      	movs	r1, #0
 8002d7a:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0U, 0U};
 8002d7c:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8002d80:	f000 fb3e 	bl	8003400 <SDMMC_GetResponse>
 8002d84:	0180      	lsls	r0, r0, #6
 8002d86:	d418      	bmi.n	8002dba <HAL_SD_ConfigWideBusOperation+0x122>
  errorstate = SD_FindSCR(hsd, scr);
 8002d88:	a904      	add	r1, sp, #16
 8002d8a:	4620      	mov	r0, r4
 8002d8c:	f7ff fae4 	bl	8002358 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8002d90:	b960      	cbnz	r0, 8002dac <HAL_SD_ConfigWideBusOperation+0x114>
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8002d92:	9b05      	ldr	r3, [sp, #20]
 8002d94:	0359      	lsls	r1, r3, #13
 8002d96:	d515      	bpl.n	8002dc4 <HAL_SD_ConfigWideBusOperation+0x12c>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002d98:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8002d9a:	6820      	ldr	r0, [r4, #0]
 8002d9c:	0409      	lsls	r1, r1, #16
 8002d9e:	f001 f813 	bl	8003dc8 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8002da2:	b918      	cbnz	r0, 8002dac <HAL_SD_ConfigWideBusOperation+0x114>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8002da4:	2102      	movs	r1, #2
 8002da6:	6820      	ldr	r0, [r4, #0]
 8002da8:	f001 f8e8 	bl	8003f7c <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 8002dac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002dae:	4318      	orrs	r0, r3
 8002db0:	63a0      	str	r0, [r4, #56]	; 0x38
 8002db2:	e7a4      	b.n	8002cfe <HAL_SD_ConfigWideBusOperation+0x66>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8002db4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002db8:	e7d8      	b.n	8002d6c <HAL_SD_ConfigWideBusOperation+0xd4>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8002dba:	4630      	mov	r0, r6
 8002dbc:	e7f6      	b.n	8002dac <HAL_SD_ConfigWideBusOperation+0x114>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002dbe:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8002dc2:	e7d3      	b.n	8002d6c <HAL_SD_ConfigWideBusOperation+0xd4>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002dc4:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8002dc8:	e7f0      	b.n	8002dac <HAL_SD_ConfigWideBusOperation+0x114>
 8002dca:	bf00      	nop
 8002dcc:	004005ff 	.word	0x004005ff

08002dd0 <HAL_SD_GetCardState>:
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002dd0:	6d01      	ldr	r1, [r0, #80]	; 0x50
{
 8002dd2:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002dd4:	0409      	lsls	r1, r1, #16
{
 8002dd6:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002dd8:	6800      	ldr	r0, [r0, #0]
 8002dda:	f001 fad7 	bl	800438c <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 8002dde:	4601      	mov	r1, r0
 8002de0:	b120      	cbz	r0, 8002dec <HAL_SD_GetCardState+0x1c>
    hsd->ErrorCode |= errorstate;
 8002de2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002de4:	2000      	movs	r0, #0
 8002de6:	4319      	orrs	r1, r3
 8002de8:	63a1      	str	r1, [r4, #56]	; 0x38
}
 8002dea:	bd10      	pop	{r4, pc}
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8002dec:	6820      	ldr	r0, [r4, #0]
 8002dee:	f000 fb07 	bl	8003400 <SDMMC_GetResponse>
  if(errorstate != HAL_SD_ERROR_NONE)
 8002df2:	f3c0 2043 	ubfx	r0, r0, #9, #4
}
 8002df6:	bd10      	pop	{r4, pc}

08002df8 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002df8:	2800      	cmp	r0, #0
 8002dfa:	f000 8094 	beq.w	8002f26 <HAL_TIM_Base_Init+0x12e>
{
 8002dfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e00:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002e04:	4604      	mov	r4, r0
 8002e06:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d07b      	beq.n	8002f06 <HAL_TIM_Base_Init+0x10e>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e0e:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002e10:	2302      	movs	r3, #2
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e12:	4947      	ldr	r1, [pc, #284]	; (8002f30 <HAL_TIM_Base_Init+0x138>)
 8002e14:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->State = HAL_TIM_STATE_BUSY;
 8002e18:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e1c:	eba2 0101 	sub.w	r1, r2, r1
  tmpcr1 = TIMx->CR1;
 8002e20:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e22:	fab1 f181 	clz	r1, r1
 8002e26:	ea4f 1151 	mov.w	r1, r1, lsr #5
 8002e2a:	d050      	beq.n	8002ece <HAL_TIM_Base_Init+0xd6>
 8002e2c:	2900      	cmp	r1, #0
 8002e2e:	d14e      	bne.n	8002ece <HAL_TIM_Base_Init+0xd6>
 8002e30:	4d40      	ldr	r5, [pc, #256]	; (8002f34 <HAL_TIM_Base_Init+0x13c>)
 8002e32:	4841      	ldr	r0, [pc, #260]	; (8002f38 <HAL_TIM_Base_Init+0x140>)
 8002e34:	4282      	cmp	r2, r0
 8002e36:	bf18      	it	ne
 8002e38:	42aa      	cmpne	r2, r5
 8002e3a:	d048      	beq.n	8002ece <HAL_TIM_Base_Init+0xd6>
 8002e3c:	4f3f      	ldr	r7, [pc, #252]	; (8002f3c <HAL_TIM_Base_Init+0x144>)
 8002e3e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002e42:	1bd7      	subs	r7, r2, r7
 8002e44:	42aa      	cmp	r2, r5
 8002e46:	fab7 f787 	clz	r7, r7
 8002e4a:	ea4f 1757 	mov.w	r7, r7, lsr #5
 8002e4e:	d05f      	beq.n	8002f10 <HAL_TIM_Base_Init+0x118>
 8002e50:	2f00      	cmp	r7, #0
 8002e52:	d15d      	bne.n	8002f10 <HAL_TIM_Base_Init+0x118>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e54:	4f3a      	ldr	r7, [pc, #232]	; (8002f40 <HAL_TIM_Base_Init+0x148>)
 8002e56:	483b      	ldr	r0, [pc, #236]	; (8002f44 <HAL_TIM_Base_Init+0x14c>)
 8002e58:	4282      	cmp	r2, r0
 8002e5a:	bf18      	it	ne
 8002e5c:	42ba      	cmpne	r2, r7
 8002e5e:	bf0c      	ite	eq
 8002e60:	2701      	moveq	r7, #1
 8002e62:	2700      	movne	r7, #0
 8002e64:	d061      	beq.n	8002f2a <HAL_TIM_Base_Init+0x132>
 8002e66:	4d38      	ldr	r5, [pc, #224]	; (8002f48 <HAL_TIM_Base_Init+0x150>)
 8002e68:	f5a0 3096 	sub.w	r0, r0, #76800	; 0x12c00
 8002e6c:	4282      	cmp	r2, r0
 8002e6e:	bf18      	it	ne
 8002e70:	42aa      	cmpne	r2, r5
 8002e72:	d035      	beq.n	8002ee0 <HAL_TIM_Base_Init+0xe8>
 8002e74:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8002e78:	4282      	cmp	r2, r0
 8002e7a:	d056      	beq.n	8002f2a <HAL_TIM_Base_Init+0x132>
 8002e7c:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8002e80:	4282      	cmp	r2, r0
 8002e82:	d052      	beq.n	8002f2a <HAL_TIM_Base_Init+0x132>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e84:	69a1      	ldr	r1, [r4, #24]
 8002e86:	f023 0380 	bic.w	r3, r3, #128	; 0x80

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e8a:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e8c:	430b      	orrs	r3, r1

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e8e:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8002e90:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e92:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002e94:	6291      	str	r1, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e96:	2301      	movs	r3, #1
  return HAL_OK;
 8002e98:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
 8002e9a:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e9c:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ea0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8002ea4:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8002ea8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002eac:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8002eb0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002eb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002eb8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8002ebc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002ec0:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8002ec4:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8002ec8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8002ecc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ece:	4f1b      	ldr	r7, [pc, #108]	; (8002f3c <HAL_TIM_Base_Init+0x144>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ed0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002ed4:	68a5      	ldr	r5, [r4, #8]
 8002ed6:	1bd7      	subs	r7, r2, r7
 8002ed8:	432b      	orrs	r3, r5
 8002eda:	fab7 f787 	clz	r7, r7
 8002ede:	097f      	lsrs	r7, r7, #5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ee0:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ee2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ee6:	69a5      	ldr	r5, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ee8:	4303      	orrs	r3, r0
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002eea:	68e6      	ldr	r6, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 8002eec:	6860      	ldr	r0, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002eee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ef2:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8002ef4:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ef6:	62d6      	str	r6, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002ef8:	6290      	str	r0, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002efa:	b909      	cbnz	r1, 8002f00 <HAL_TIM_Base_Init+0x108>
 8002efc:	2f00      	cmp	r7, #0
 8002efe:	d0ca      	beq.n	8002e96 <HAL_TIM_Base_Init+0x9e>
    TIMx->RCR = Structure->RepetitionCounter;
 8002f00:	6963      	ldr	r3, [r4, #20]
 8002f02:	6313      	str	r3, [r2, #48]	; 0x30
 8002f04:	e7c7      	b.n	8002e96 <HAL_TIM_Base_Init+0x9e>
    htim->Lock = HAL_UNLOCKED;
 8002f06:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002f0a:	f7fe f8a1 	bl	8001050 <HAL_TIM_Base_MspInit>
 8002f0e:	e77e      	b.n	8002e0e <HAL_TIM_Base_Init+0x16>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f10:	480e      	ldr	r0, [pc, #56]	; (8002f4c <HAL_TIM_Base_Init+0x154>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002f16:	68a5      	ldr	r5, [r4, #8]
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f18:	4282      	cmp	r2, r0
    tmpcr1 |= Structure->CounterMode;
 8002f1a:	ea43 0305 	orr.w	r3, r3, r5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f1e:	d0df      	beq.n	8002ee0 <HAL_TIM_Base_Init+0xe8>
 8002f20:	2f00      	cmp	r7, #0
 8002f22:	d1dd      	bne.n	8002ee0 <HAL_TIM_Base_Init+0xe8>
 8002f24:	e796      	b.n	8002e54 <HAL_TIM_Base_Init+0x5c>
    return HAL_ERROR;
 8002f26:	2001      	movs	r0, #1
}
 8002f28:	4770      	bx	lr
 8002f2a:	2700      	movs	r7, #0
 8002f2c:	e7d8      	b.n	8002ee0 <HAL_TIM_Base_Init+0xe8>
 8002f2e:	bf00      	nop
 8002f30:	40010000 	.word	0x40010000
 8002f34:	40000400 	.word	0x40000400
 8002f38:	40000800 	.word	0x40000800
 8002f3c:	40010400 	.word	0x40010400
 8002f40:	40014000 	.word	0x40014000
 8002f44:	40014400 	.word	0x40014400
 8002f48:	40014800 	.word	0x40014800
 8002f4c:	40000c00 	.word	0x40000c00

08002f50 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8002f50:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d141      	bne.n	8002fdc <HAL_TIM_Base_Start_IT+0x8c>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f58:	6802      	ldr	r2, [r0, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f5a:	4b25      	ldr	r3, [pc, #148]	; (8002ff0 <HAL_TIM_Base_Start_IT+0xa0>)
 8002f5c:	4925      	ldr	r1, [pc, #148]	; (8002ff4 <HAL_TIM_Base_Start_IT+0xa4>)
 8002f5e:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8002f62:	bf18      	it	ne
 8002f64:	429a      	cmpne	r2, r3
{
 8002f66:	b430      	push	{r4, r5}
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f68:	bf0c      	ite	eq
 8002f6a:	2301      	moveq	r3, #1
 8002f6c:	2300      	movne	r3, #0
 8002f6e:	4c22      	ldr	r4, [pc, #136]	; (8002ff8 <HAL_TIM_Base_Start_IT+0xa8>)
  htim->State = HAL_TIM_STATE_BUSY;
 8002f70:	2502      	movs	r5, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f72:	42a2      	cmp	r2, r4
 8002f74:	bf08      	it	eq
 8002f76:	f043 0301 	orreq.w	r3, r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8002f7a:	f880 503d 	strb.w	r5, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f7e:	4d1f      	ldr	r5, [pc, #124]	; (8002ffc <HAL_TIM_Base_Start_IT+0xac>)
 8002f80:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
 8002f84:	428a      	cmp	r2, r1
 8002f86:	bf08      	it	eq
 8002f88:	f043 0301 	orreq.w	r3, r3, #1
 8002f8c:	481c      	ldr	r0, [pc, #112]	; (8003000 <HAL_TIM_Base_Start_IT+0xb0>)
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f8e:	68d1      	ldr	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f90:	42aa      	cmp	r2, r5
 8002f92:	bf08      	it	eq
 8002f94:	f043 0301 	orreq.w	r3, r3, #1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f98:	f041 0101 	orr.w	r1, r1, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f9c:	42a2      	cmp	r2, r4
 8002f9e:	bf08      	it	eq
 8002fa0:	f043 0301 	orreq.w	r3, r3, #1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002fa4:	60d1      	str	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fa6:	4282      	cmp	r2, r0
 8002fa8:	bf08      	it	eq
 8002faa:	f043 0301 	orreq.w	r3, r3, #1
 8002fae:	b933      	cbnz	r3, 8002fbe <HAL_TIM_Base_Start_IT+0x6e>
 8002fb0:	f5a0 3094 	sub.w	r0, r0, #75776	; 0x12800
 8002fb4:	1a10      	subs	r0, r2, r0
 8002fb6:	fab0 f080 	clz	r0, r0
 8002fba:	0940      	lsrs	r0, r0, #5
 8002fbc:	b198      	cbz	r0, 8002fe6 <HAL_TIM_Base_Start_IT+0x96>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fbe:	6891      	ldr	r1, [r2, #8]
 8002fc0:	4b10      	ldr	r3, [pc, #64]	; (8003004 <HAL_TIM_Base_Start_IT+0xb4>)
 8002fc2:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fc4:	2b06      	cmp	r3, #6
 8002fc6:	d00b      	beq.n	8002fe0 <HAL_TIM_Base_Start_IT+0x90>
 8002fc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fcc:	d008      	beq.n	8002fe0 <HAL_TIM_Base_Start_IT+0x90>
      __HAL_TIM_ENABLE(htim);
 8002fce:	6813      	ldr	r3, [r2, #0]
  return HAL_OK;
 8002fd0:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 8002fd2:	f043 0301 	orr.w	r3, r3, #1
 8002fd6:	6013      	str	r3, [r2, #0]
}
 8002fd8:	bc30      	pop	{r4, r5}
 8002fda:	4770      	bx	lr
    return HAL_ERROR;
 8002fdc:	2001      	movs	r0, #1
}
 8002fde:	4770      	bx	lr
  return HAL_OK;
 8002fe0:	2000      	movs	r0, #0
}
 8002fe2:	bc30      	pop	{r4, r5}
 8002fe4:	4770      	bx	lr
    __HAL_TIM_ENABLE(htim);
 8002fe6:	6813      	ldr	r3, [r2, #0]
 8002fe8:	f043 0301 	orr.w	r3, r3, #1
 8002fec:	6013      	str	r3, [r2, #0]
 8002fee:	e7f3      	b.n	8002fd8 <HAL_TIM_Base_Start_IT+0x88>
 8002ff0:	40010000 	.word	0x40010000
 8002ff4:	40000800 	.word	0x40000800
 8002ff8:	40000400 	.word	0x40000400
 8002ffc:	40000c00 	.word	0x40000c00
 8003000:	40014000 	.word	0x40014000
 8003004:	00010007 	.word	0x00010007

08003008 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8003008:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 800300c:	2a01      	cmp	r2, #1
 800300e:	d073      	beq.n	80030f8 <HAL_TIM_ConfigClockSource+0xf0>
 8003010:	4603      	mov	r3, r0
  htim->State = HAL_TIM_STATE_BUSY;
 8003012:	2202      	movs	r2, #2
  tmpsmcr = htim->Instance->SMCR;
 8003014:	6800      	ldr	r0, [r0, #0]
{
 8003016:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(htim);
 8003018:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800301a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  __HAL_LOCK(htim);
 800301e:	f883 403c 	strb.w	r4, [r3, #60]	; 0x3c
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003022:	4c4b      	ldr	r4, [pc, #300]	; (8003150 <HAL_TIM_ConfigClockSource+0x148>)
  tmpsmcr = htim->Instance->SMCR;
 8003024:	6885      	ldr	r5, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8003026:	680a      	ldr	r2, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003028:	402c      	ands	r4, r5
  switch (sClockSourceConfig->ClockSource)
 800302a:	2a60      	cmp	r2, #96	; 0x60
  htim->Instance->SMCR = tmpsmcr;
 800302c:	6084      	str	r4, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 800302e:	d065      	beq.n	80030fc <HAL_TIM_ConfigClockSource+0xf4>
 8003030:	d831      	bhi.n	8003096 <HAL_TIM_ConfigClockSource+0x8e>
 8003032:	2a40      	cmp	r2, #64	; 0x40
 8003034:	d048      	beq.n	80030c8 <HAL_TIM_ConfigClockSource+0xc0>
 8003036:	d921      	bls.n	800307c <HAL_TIM_ConfigClockSource+0x74>
 8003038:	2a50      	cmp	r2, #80	; 0x50
 800303a:	d116      	bne.n	800306a <HAL_TIM_ConfigClockSource+0x62>
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800303c:	6a06      	ldr	r6, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800303e:	6a05      	ldr	r5, [r0, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003040:	684c      	ldr	r4, [r1, #4]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003042:	f026 060a 	bic.w	r6, r6, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003046:	f025 0501 	bic.w	r5, r5, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 800304a:	68cf      	ldr	r7, [r1, #12]
  tmpccer |= TIM_ICPolarity;
 800304c:	4334      	orrs	r4, r6
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800304e:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003050:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003052:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003056:	ea42 1207 	orr.w	r2, r2, r7, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800305a:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800305c:	6204      	str	r4, [r0, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800305e:	6882      	ldr	r2, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003060:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003064:	f042 0257 	orr.w	r2, r2, #87	; 0x57
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003068:	6082      	str	r2, [r0, #8]
  __HAL_UNLOCK(htim);
 800306a:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 800306c:	2101      	movs	r1, #1
  return HAL_OK;
 800306e:	4610      	mov	r0, r2
  htim->State = HAL_TIM_STATE_READY;
 8003070:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003078:	bcf0      	pop	{r4, r5, r6, r7}
 800307a:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 800307c:	2a20      	cmp	r2, #32
 800307e:	d002      	beq.n	8003086 <HAL_TIM_ConfigClockSource+0x7e>
 8003080:	d91e      	bls.n	80030c0 <HAL_TIM_ConfigClockSource+0xb8>
 8003082:	2a30      	cmp	r2, #48	; 0x30
 8003084:	d1f1      	bne.n	800306a <HAL_TIM_ConfigClockSource+0x62>
  tmpsmcr = TIMx->SMCR;
 8003086:	6881      	ldr	r1, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003088:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800308c:	430a      	orrs	r2, r1
 800308e:	f042 0207 	orr.w	r2, r2, #7
  TIMx->SMCR = tmpsmcr;
 8003092:	6082      	str	r2, [r0, #8]
}
 8003094:	e7e9      	b.n	800306a <HAL_TIM_ConfigClockSource+0x62>
  switch (sClockSourceConfig->ClockSource)
 8003096:	2a70      	cmp	r2, #112	; 0x70
 8003098:	d049      	beq.n	800312e <HAL_TIM_ConfigClockSource+0x126>
 800309a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800309e:	d1e4      	bne.n	800306a <HAL_TIM_ConfigClockSource+0x62>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80030a0:	68cc      	ldr	r4, [r1, #12]
 80030a2:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80030a6:	6881      	ldr	r1, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80030a8:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030aa:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80030ae:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 80030b2:	430a      	orrs	r2, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030b4:	6082      	str	r2, [r0, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80030b6:	6882      	ldr	r2, [r0, #8]
 80030b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030bc:	6082      	str	r2, [r0, #8]
      break;
 80030be:	e7d4      	b.n	800306a <HAL_TIM_ConfigClockSource+0x62>
  switch (sClockSourceConfig->ClockSource)
 80030c0:	f032 0110 	bics.w	r1, r2, #16
 80030c4:	d1d1      	bne.n	800306a <HAL_TIM_ConfigClockSource+0x62>
 80030c6:	e7de      	b.n	8003086 <HAL_TIM_ConfigClockSource+0x7e>
  tmpccer = TIMx->CCER;
 80030c8:	6a06      	ldr	r6, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030ca:	6a05      	ldr	r5, [r0, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030cc:	684c      	ldr	r4, [r1, #4]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80030ce:	f026 060a 	bic.w	r6, r6, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030d2:	f025 0501 	bic.w	r5, r5, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030d6:	68cf      	ldr	r7, [r1, #12]
  tmpccer |= TIM_ICPolarity;
 80030d8:	4334      	orrs	r4, r6
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030da:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030dc:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80030de:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80030e2:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80030e6:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80030e8:	6204      	str	r4, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80030ea:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80030ec:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80030f0:	f042 0247 	orr.w	r2, r2, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 80030f4:	6082      	str	r2, [r0, #8]
}
 80030f6:	e7b8      	b.n	800306a <HAL_TIM_ConfigClockSource+0x62>
  __HAL_LOCK(htim);
 80030f8:	2002      	movs	r0, #2
}
 80030fa:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030fc:	6a04      	ldr	r4, [r0, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80030fe:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003100:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003104:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003106:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003108:	6981      	ldr	r1, [r0, #24]
  tmpccer = TIMx->CCER;
 800310a:	6a02      	ldr	r2, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800310c:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003110:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003114:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 8003118:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 800311c:	6181      	str	r1, [r0, #24]
  TIMx->CCER = tmpccer;
 800311e:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8003120:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003122:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003126:	f042 0267 	orr.w	r2, r2, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 800312a:	6082      	str	r2, [r0, #8]
}
 800312c:	e79d      	b.n	800306a <HAL_TIM_ConfigClockSource+0x62>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800312e:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
 8003132:	68cc      	ldr	r4, [r1, #12]
 8003134:	432a      	orrs	r2, r5
  tmpsmcr = TIMx->SMCR;
 8003136:	6881      	ldr	r1, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003138:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800313c:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003140:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 8003142:	6082      	str	r2, [r0, #8]
      tmpsmcr = htim->Instance->SMCR;
 8003144:	6882      	ldr	r2, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003146:	f042 0277 	orr.w	r2, r2, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800314a:	6082      	str	r2, [r0, #8]
      break;
 800314c:	e78d      	b.n	800306a <HAL_TIM_ConfigClockSource+0x62>
 800314e:	bf00      	nop
 8003150:	fffe0088 	.word	0xfffe0088

08003154 <HAL_TIM_OC_DelayElapsedCallback>:
 8003154:	4770      	bx	lr
 8003156:	bf00      	nop

08003158 <HAL_TIM_IC_CaptureCallback>:
 8003158:	4770      	bx	lr
 800315a:	bf00      	nop

0800315c <HAL_TIM_PWM_PulseFinishedCallback>:
 800315c:	4770      	bx	lr
 800315e:	bf00      	nop

08003160 <HAL_TIM_TriggerCallback>:
 8003160:	4770      	bx	lr
 8003162:	bf00      	nop

08003164 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003164:	6803      	ldr	r3, [r0, #0]
 8003166:	691a      	ldr	r2, [r3, #16]
 8003168:	0791      	lsls	r1, r2, #30
{
 800316a:	b510      	push	{r4, lr}
 800316c:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800316e:	d502      	bpl.n	8003176 <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003170:	68da      	ldr	r2, [r3, #12]
 8003172:	0792      	lsls	r2, r2, #30
 8003174:	d468      	bmi.n	8003248 <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003176:	691a      	ldr	r2, [r3, #16]
 8003178:	0752      	lsls	r2, r2, #29
 800317a:	d502      	bpl.n	8003182 <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800317c:	68da      	ldr	r2, [r3, #12]
 800317e:	0750      	lsls	r0, r2, #29
 8003180:	d44f      	bmi.n	8003222 <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003182:	691a      	ldr	r2, [r3, #16]
 8003184:	0711      	lsls	r1, r2, #28
 8003186:	d502      	bpl.n	800318e <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003188:	68da      	ldr	r2, [r3, #12]
 800318a:	0712      	lsls	r2, r2, #28
 800318c:	d437      	bmi.n	80031fe <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800318e:	691a      	ldr	r2, [r3, #16]
 8003190:	06d0      	lsls	r0, r2, #27
 8003192:	d502      	bpl.n	800319a <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003194:	68da      	ldr	r2, [r3, #12]
 8003196:	06d1      	lsls	r1, r2, #27
 8003198:	d41e      	bmi.n	80031d8 <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800319a:	691a      	ldr	r2, [r3, #16]
 800319c:	07d2      	lsls	r2, r2, #31
 800319e:	d502      	bpl.n	80031a6 <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80031a0:	68da      	ldr	r2, [r3, #12]
 80031a2:	07d0      	lsls	r0, r2, #31
 80031a4:	d469      	bmi.n	800327a <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80031a6:	691a      	ldr	r2, [r3, #16]
 80031a8:	0611      	lsls	r1, r2, #24
 80031aa:	d502      	bpl.n	80031b2 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80031ac:	68da      	ldr	r2, [r3, #12]
 80031ae:	0612      	lsls	r2, r2, #24
 80031b0:	d46b      	bmi.n	800328a <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80031b2:	691a      	ldr	r2, [r3, #16]
 80031b4:	05d0      	lsls	r0, r2, #23
 80031b6:	d502      	bpl.n	80031be <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80031b8:	68da      	ldr	r2, [r3, #12]
 80031ba:	0611      	lsls	r1, r2, #24
 80031bc:	d46d      	bmi.n	800329a <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80031be:	691a      	ldr	r2, [r3, #16]
 80031c0:	0652      	lsls	r2, r2, #25
 80031c2:	d502      	bpl.n	80031ca <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80031c4:	68da      	ldr	r2, [r3, #12]
 80031c6:	0650      	lsls	r0, r2, #25
 80031c8:	d46f      	bmi.n	80032aa <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80031ca:	691a      	ldr	r2, [r3, #16]
 80031cc:	0691      	lsls	r1, r2, #26
 80031ce:	d502      	bpl.n	80031d6 <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80031d0:	68da      	ldr	r2, [r3, #12]
 80031d2:	0692      	lsls	r2, r2, #26
 80031d4:	d449      	bmi.n	800326a <HAL_TIM_IRQHandler+0x106>
}
 80031d6:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80031d8:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80031dc:	2208      	movs	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 80031de:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80031e0:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80031e2:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80031e4:	69db      	ldr	r3, [r3, #28]
 80031e6:	f413 7f40 	tst.w	r3, #768	; 0x300
 80031ea:	d16f      	bne.n	80032cc <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031ec:	f7ff ffb2 	bl	8003154 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031f0:	4620      	mov	r0, r4
 80031f2:	f7ff ffb3 	bl	800315c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031f6:	2200      	movs	r2, #0
 80031f8:	6823      	ldr	r3, [r4, #0]
 80031fa:	7722      	strb	r2, [r4, #28]
 80031fc:	e7cd      	b.n	800319a <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80031fe:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003202:	2204      	movs	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 8003204:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003206:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003208:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800320a:	69db      	ldr	r3, [r3, #28]
 800320c:	079b      	lsls	r3, r3, #30
 800320e:	d15a      	bne.n	80032c6 <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003210:	f7ff ffa0 	bl	8003154 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003214:	4620      	mov	r0, r4
 8003216:	f7ff ffa1 	bl	800315c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800321a:	2200      	movs	r2, #0
 800321c:	6823      	ldr	r3, [r4, #0]
 800321e:	7722      	strb	r2, [r4, #28]
 8003220:	e7b5      	b.n	800318e <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003222:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003226:	2202      	movs	r2, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8003228:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800322a:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800322c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800322e:	699b      	ldr	r3, [r3, #24]
 8003230:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003234:	d144      	bne.n	80032c0 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003236:	f7ff ff8d 	bl	8003154 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800323a:	4620      	mov	r0, r4
 800323c:	f7ff ff8e 	bl	800315c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003240:	2200      	movs	r2, #0
 8003242:	6823      	ldr	r3, [r4, #0]
 8003244:	7722      	strb	r2, [r4, #28]
 8003246:	e79c      	b.n	8003182 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003248:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800324c:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800324e:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003250:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003252:	699b      	ldr	r3, [r3, #24]
 8003254:	0799      	lsls	r1, r3, #30
 8003256:	d130      	bne.n	80032ba <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003258:	f7ff ff7c 	bl	8003154 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800325c:	4620      	mov	r0, r4
 800325e:	f7ff ff7d 	bl	800315c <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003262:	2200      	movs	r2, #0
 8003264:	6823      	ldr	r3, [r4, #0]
 8003266:	7722      	strb	r2, [r4, #28]
 8003268:	e785      	b.n	8003176 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800326a:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800326e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003270:	611a      	str	r2, [r3, #16]
}
 8003272:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8003276:	f000 b889 	b.w	800338c <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800327a:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800327e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003280:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003282:	f7fd fcff 	bl	8000c84 <HAL_TIM_PeriodElapsedCallback>
 8003286:	6823      	ldr	r3, [r4, #0]
 8003288:	e78d      	b.n	80031a6 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800328a:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 800328e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003290:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003292:	f000 f87d 	bl	8003390 <HAL_TIMEx_BreakCallback>
 8003296:	6823      	ldr	r3, [r4, #0]
 8003298:	e78b      	b.n	80031b2 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800329a:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
 800329e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80032a0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80032a2:	f000 f877 	bl	8003394 <HAL_TIMEx_Break2Callback>
 80032a6:	6823      	ldr	r3, [r4, #0]
 80032a8:	e789      	b.n	80031be <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80032aa:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 80032ae:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80032b0:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80032b2:	f7ff ff55 	bl	8003160 <HAL_TIM_TriggerCallback>
 80032b6:	6823      	ldr	r3, [r4, #0]
 80032b8:	e787      	b.n	80031ca <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 80032ba:	f7ff ff4d 	bl	8003158 <HAL_TIM_IC_CaptureCallback>
 80032be:	e7d0      	b.n	8003262 <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 80032c0:	f7ff ff4a 	bl	8003158 <HAL_TIM_IC_CaptureCallback>
 80032c4:	e7bc      	b.n	8003240 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 80032c6:	f7ff ff47 	bl	8003158 <HAL_TIM_IC_CaptureCallback>
 80032ca:	e7a6      	b.n	800321a <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 80032cc:	f7ff ff44 	bl	8003158 <HAL_TIM_IC_CaptureCallback>
 80032d0:	e791      	b.n	80031f6 <HAL_TIM_IRQHandler+0x92>
 80032d2:	bf00      	nop

080032d4 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80032d4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d048      	beq.n	800336e <HAL_TIMEx_MasterConfigSynchronization+0x9a>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032dc:	4602      	mov	r2, r0
 80032de:	2002      	movs	r0, #2

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80032e0:	6813      	ldr	r3, [r2, #0]
{
 80032e2:	b4f0      	push	{r4, r5, r6, r7}

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80032e4:	4d23      	ldr	r5, [pc, #140]	; (8003374 <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
  htim->State = HAL_TIM_STATE_BUSY;
 80032e6:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80032ea:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 80032ec:	6858      	ldr	r0, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 80032ee:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80032f0:	d026      	beq.n	8003340 <HAL_TIMEx_MasterConfigSynchronization+0x6c>
 80032f2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80032f6:	42ab      	cmp	r3, r5
 80032f8:	d022      	beq.n	8003340 <HAL_TIMEx_MasterConfigSynchronization+0x6c>
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032fa:	4d1f      	ldr	r5, [pc, #124]	; (8003378 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
  tmpcr2 &= ~TIM_CR2_MMS;
 80032fc:	f020 0070 	bic.w	r0, r0, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003300:	680e      	ldr	r6, [r1, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003302:	42ab      	cmp	r3, r5
 8003304:	bf18      	it	ne
 8003306:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800330a:	4f1c      	ldr	r7, [pc, #112]	; (800337c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800330c:	ea40 0006 	orr.w	r0, r0, r6
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003310:	4e1b      	ldr	r6, [pc, #108]	; (8003380 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003312:	bf0c      	ite	eq
 8003314:	2501      	moveq	r5, #1
 8003316:	2500      	movne	r5, #0
  htim->Instance->CR2 = tmpcr2;
 8003318:	6058      	str	r0, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800331a:	42bb      	cmp	r3, r7
 800331c:	bf08      	it	eq
 800331e:	f045 0501 	orreq.w	r5, r5, #1
 8003322:	42b3      	cmp	r3, r6
 8003324:	bf14      	ite	ne
 8003326:	4628      	movne	r0, r5
 8003328:	f045 0001 	orreq.w	r0, r5, #1
 800332c:	4d15      	ldr	r5, [pc, #84]	; (8003384 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800332e:	42ab      	cmp	r3, r5
 8003330:	bf08      	it	eq
 8003332:	f040 0001 	orreq.w	r0, r0, #1
 8003336:	b960      	cbnz	r0, 8003352 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8003338:	4813      	ldr	r0, [pc, #76]	; (8003388 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800333a:	4283      	cmp	r3, r0
 800333c:	d009      	beq.n	8003352 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800333e:	e00d      	b.n	800335c <HAL_TIMEx_MasterConfigSynchronization+0x88>
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003340:	e9d1 5600 	ldrd	r5, r6, [r1]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003344:	f420 0070 	bic.w	r0, r0, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003348:	4330      	orrs	r0, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 800334a:	f020 0070 	bic.w	r0, r0, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800334e:	4328      	orrs	r0, r5
  htim->Instance->CR2 = tmpcr2;
 8003350:	6058      	str	r0, [r3, #4]
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003352:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003354:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003358:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800335a:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 800335c:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800335e:	2101      	movs	r1, #1

  return HAL_OK;
 8003360:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 8003362:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003366:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 800336a:	bcf0      	pop	{r4, r5, r6, r7}
 800336c:	4770      	bx	lr
  __HAL_LOCK(htim);
 800336e:	2002      	movs	r0, #2
}
 8003370:	4770      	bx	lr
 8003372:	bf00      	nop
 8003374:	40010000 	.word	0x40010000
 8003378:	40000400 	.word	0x40000400
 800337c:	40000800 	.word	0x40000800
 8003380:	40000c00 	.word	0x40000c00
 8003384:	40014000 	.word	0x40014000
 8003388:	40001800 	.word	0x40001800

0800338c <HAL_TIMEx_CommutCallback>:
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop

08003390 <HAL_TIMEx_BreakCallback>:
 8003390:	4770      	bx	lr
 8003392:	bf00      	nop

08003394 <HAL_TIMEx_Break2Callback>:
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop

08003398 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8003398:	b084      	sub	sp, #16
 800339a:	b470      	push	{r4, r5, r6}
 800339c:	ae04      	add	r6, sp, #16
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
             Init.ClockBypass         |\
             Init.ClockPowerSave      |\
 800339e:	9c07      	ldr	r4, [sp, #28]
{
 80033a0:	4605      	mov	r5, r0
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  

  return HAL_OK;
}
 80033a2:	2000      	movs	r0, #0
{
 80033a4:	e886 000e 	stmia.w	r6, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           |\
 80033a8:	460b      	mov	r3, r1
             Init.ClockBypass         |\
 80033aa:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
  tmpreg |= (Init.ClockEdge           |\
 80033ae:	4313      	orrs	r3, r2
             Init.BusWide             |\
 80033b0:	9a08      	ldr	r2, [sp, #32]
             Init.ClockBypass         |\
 80033b2:	430b      	orrs	r3, r1
             Init.HardwareFlowControl |\
 80033b4:	9909      	ldr	r1, [sp, #36]	; 0x24
             Init.ClockPowerSave      |\
 80033b6:	4323      	orrs	r3, r4
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80033b8:	686c      	ldr	r4, [r5, #4]
             Init.BusWide             |\
 80033ba:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80033bc:	4a03      	ldr	r2, [pc, #12]	; (80033cc <SDMMC_Init+0x34>)
             Init.HardwareFlowControl |\
 80033be:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80033c0:	4022      	ands	r2, r4
 80033c2:	4313      	orrs	r3, r2
 80033c4:	606b      	str	r3, [r5, #4]
}
 80033c6:	bc70      	pop	{r4, r5, r6}
 80033c8:	b004      	add	sp, #16
 80033ca:	4770      	bx	lr
 80033cc:	ffff8100 	.word	0xffff8100

080033d0 <SDMMC_ReadFIFO>:
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 80033d0:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 80033d4:	4770      	bx	lr
 80033d6:	bf00      	nop

080033d8 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 80033d8:	4603      	mov	r3, r0
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 80033da:	680a      	ldr	r2, [r1, #0]

  return HAL_OK;
}
 80033dc:	2000      	movs	r0, #0
  SDMMCx->FIFO = *pWriteData;
 80033de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 80033e2:	4770      	bx	lr

080033e4 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 80033e4:	b508      	push	{r3, lr}
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 80033e6:	2203      	movs	r2, #3
{  
 80033e8:	4603      	mov	r3, r0

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 80033ea:	2002      	movs	r0, #2
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 80033ec:	601a      	str	r2, [r3, #0]
  HAL_Delay(2);
 80033ee:	f7fd fe95 	bl	800111c <HAL_Delay>
  
  return HAL_OK;
}
 80033f2:	2000      	movs	r0, #0
 80033f4:	bd08      	pop	{r3, pc}
 80033f6:	bf00      	nop

080033f8 <SDMMC_GetPowerState>:
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80033f8:	6800      	ldr	r0, [r0, #0]
}
 80033fa:	f000 0003 	and.w	r0, r0, #3
 80033fe:	4770      	bx	lr

08003400 <SDMMC_GetResponse>:

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8003400:	3014      	adds	r0, #20
  
  return (*(__IO uint32_t *) tmp);
 8003402:	5840      	ldr	r0, [r0, r1]
}  
 8003404:	4770      	bx	lr
 8003406:	bf00      	nop

08003408 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8003408:	b430      	push	{r4, r5}
 800340a:	4602      	mov	r2, r0
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800340c:	680c      	ldr	r4, [r1, #0]
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);

  return HAL_OK;

}
 800340e:	2000      	movs	r0, #0
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003410:	e9d1 3502 	ldrd	r3, r5, [r1, #8]
 8003414:	432b      	orrs	r3, r5
  SDMMCx->DLEN = Data->DataLength;
 8003416:	684d      	ldr	r5, [r1, #4]
  SDMMCx->DTIMER = Data->DataTimeOut;
 8003418:	6254      	str	r4, [r2, #36]	; 0x24
                       Data->TransferDir   |\
 800341a:	690c      	ldr	r4, [r1, #16]
  SDMMCx->DLEN = Data->DataLength;
 800341c:	6295      	str	r5, [r2, #40]	; 0x28
                       Data->TransferDir   |\
 800341e:	4323      	orrs	r3, r4
                       Data->TransferMode  |\
 8003420:	694d      	ldr	r5, [r1, #20]
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8003422:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
                       Data->TransferMode  |\
 8003424:	432b      	orrs	r3, r5
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8003426:	f024 01f7 	bic.w	r1, r4, #247	; 0xf7
 800342a:	430b      	orrs	r3, r1
}
 800342c:	bc30      	pop	{r4, r5}
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800342e:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8003430:	4770      	bx	lr
 8003432:	bf00      	nop

08003434 <SDMMC_CmdBlockLength>:
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003434:	4b4b      	ldr	r3, [pc, #300]	; (8003564 <SDMMC_CmdBlockLength+0x130>)
{
 8003436:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	f241 3488 	movw	r4, #5000	; 0x1388
 800343e:	4d4a      	ldr	r5, [pc, #296]	; (8003568 <SDMMC_CmdBlockLength+0x134>)
  SDMMCx->ARG = Command->Argument;
 8003440:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003442:	4b4a      	ldr	r3, [pc, #296]	; (800356c <SDMMC_CmdBlockLength+0x138>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003444:	fba5 1202 	umull	r1, r2, r5, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003448:	68c1      	ldr	r1, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800344a:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800344c:	400b      	ands	r3, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800344e:	fb04 f202 	mul.w	r2, r4, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003452:	f443 638a 	orr.w	r3, r3, #1104	; 0x450
 8003456:	60c3      	str	r3, [r0, #12]
  
  do
  {
    if (count-- == 0U)
 8003458:	b14a      	cbz	r2, 800346e <SDMMC_CmdBlockLength+0x3a>
 800345a:	1e51      	subs	r1, r2, #1
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
 800345c:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (count-- == 0U)
 800345e:	3901      	subs	r1, #1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8003460:	f013 0f45 	tst.w	r3, #69	; 0x45
 8003464:	d001      	beq.n	800346a <SDMMC_CmdBlockLength+0x36>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8003466:	051a      	lsls	r2, r3, #20
 8003468:	d506      	bpl.n	8003478 <SDMMC_CmdBlockLength+0x44>
    if (count-- == 0U)
 800346a:	1c4c      	adds	r4, r1, #1
 800346c:	d1f6      	bne.n	800345c <SDMMC_CmdBlockLength+0x28>
      return SDMMC_ERROR_TIMEOUT;
 800346e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8003472:	4618      	mov	r0, r3
 8003474:	bc30      	pop	{r4, r5}
 8003476:	4770      	bx	lr
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8003478:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800347a:	075b      	lsls	r3, r3, #29
 800347c:	d43d      	bmi.n	80034fa <SDMMC_CmdBlockLength+0xc6>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800347e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003480:	f013 0301 	ands.w	r3, r3, #1
 8003484:	d134      	bne.n	80034f0 <SDMMC_CmdBlockLength+0xbc>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8003486:	23c5      	movs	r3, #197	; 0xc5
 8003488:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800348a:	6903      	ldr	r3, [r0, #16]
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800348c:	b2db      	uxtb	r3, r3
 800348e:	2b10      	cmp	r3, #16
 8003490:	d131      	bne.n	80034f6 <SDMMC_CmdBlockLength+0xc2>
  return (*(__IO uint32_t *) tmp);
 8003492:	6942      	ldr	r2, [r0, #20]
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8003494:	4b36      	ldr	r3, [pc, #216]	; (8003570 <SDMMC_CmdBlockLength+0x13c>)
 8003496:	4013      	ands	r3, r2
 8003498:	2b00      	cmp	r3, #0
 800349a:	d0ea      	beq.n	8003472 <SDMMC_CmdBlockLength+0x3e>
  {
    return SDMMC_ERROR_NONE;
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800349c:	2a00      	cmp	r2, #0
 800349e:	db2f      	blt.n	8003500 <SDMMC_CmdBlockLength+0xcc>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80034a0:	0055      	lsls	r5, r2, #1
 80034a2:	d430      	bmi.n	8003506 <SDMMC_CmdBlockLength+0xd2>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80034a4:	0094      	lsls	r4, r2, #2
 80034a6:	d430      	bmi.n	800350a <SDMMC_CmdBlockLength+0xd6>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80034a8:	00d0      	lsls	r0, r2, #3
 80034aa:	d430      	bmi.n	800350e <SDMMC_CmdBlockLength+0xda>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80034ac:	0111      	lsls	r1, r2, #4
 80034ae:	d431      	bmi.n	8003514 <SDMMC_CmdBlockLength+0xe0>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80034b0:	0155      	lsls	r5, r2, #5
 80034b2:	d432      	bmi.n	800351a <SDMMC_CmdBlockLength+0xe6>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80034b4:	01d4      	lsls	r4, r2, #7
 80034b6:	d433      	bmi.n	8003520 <SDMMC_CmdBlockLength+0xec>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80034b8:	0210      	lsls	r0, r2, #8
 80034ba:	d434      	bmi.n	8003526 <SDMMC_CmdBlockLength+0xf2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80034bc:	0251      	lsls	r1, r2, #9
 80034be:	d435      	bmi.n	800352c <SDMMC_CmdBlockLength+0xf8>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80034c0:	0295      	lsls	r5, r2, #10
 80034c2:	d436      	bmi.n	8003532 <SDMMC_CmdBlockLength+0xfe>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80034c4:	02d4      	lsls	r4, r2, #11
 80034c6:	d437      	bmi.n	8003538 <SDMMC_CmdBlockLength+0x104>
  {
    return SDMMC_ERROR_CC_ERR;
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80034c8:	0350      	lsls	r0, r2, #13
 80034ca:	d438      	bmi.n	800353e <SDMMC_CmdBlockLength+0x10a>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80034cc:	0391      	lsls	r1, r2, #14
 80034ce:	d439      	bmi.n	8003544 <SDMMC_CmdBlockLength+0x110>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80034d0:	03d5      	lsls	r5, r2, #15
 80034d2:	d43a      	bmi.n	800354a <SDMMC_CmdBlockLength+0x116>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80034d4:	0414      	lsls	r4, r2, #16
 80034d6:	d43b      	bmi.n	8003550 <SDMMC_CmdBlockLength+0x11c>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80034d8:	0450      	lsls	r0, r2, #17
 80034da:	d43f      	bmi.n	800355c <SDMMC_CmdBlockLength+0x128>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80034dc:	0491      	lsls	r1, r2, #18
 80034de:	d43a      	bmi.n	8003556 <SDMMC_CmdBlockLength+0x122>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80034e0:	f012 0f08 	tst.w	r2, #8
 80034e4:	bf14      	ite	ne
 80034e6:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 80034ea:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 80034ee:	e7c0      	b.n	8003472 <SDMMC_CmdBlockLength+0x3e>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80034f0:	2201      	movs	r2, #1
 80034f2:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80034f4:	e7bd      	b.n	8003472 <SDMMC_CmdBlockLength+0x3e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e7bb      	b.n	8003472 <SDMMC_CmdBlockLength+0x3e>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80034fa:	2304      	movs	r3, #4
 80034fc:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80034fe:	e7b8      	b.n	8003472 <SDMMC_CmdBlockLength+0x3e>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8003500:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003504:	e7b5      	b.n	8003472 <SDMMC_CmdBlockLength+0x3e>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8003506:	2340      	movs	r3, #64	; 0x40
 8003508:	e7b3      	b.n	8003472 <SDMMC_CmdBlockLength+0x3e>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800350a:	2380      	movs	r3, #128	; 0x80
 800350c:	e7b1      	b.n	8003472 <SDMMC_CmdBlockLength+0x3e>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800350e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003512:	e7ae      	b.n	8003472 <SDMMC_CmdBlockLength+0x3e>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8003514:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003518:	e7ab      	b.n	8003472 <SDMMC_CmdBlockLength+0x3e>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800351a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800351e:	e7a8      	b.n	8003472 <SDMMC_CmdBlockLength+0x3e>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8003520:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003524:	e7a5      	b.n	8003472 <SDMMC_CmdBlockLength+0x3e>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8003526:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800352a:	e7a2      	b.n	8003472 <SDMMC_CmdBlockLength+0x3e>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800352c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003530:	e79f      	b.n	8003472 <SDMMC_CmdBlockLength+0x3e>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8003532:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003536:	e79c      	b.n	8003472 <SDMMC_CmdBlockLength+0x3e>
    return SDMMC_ERROR_CC_ERR;
 8003538:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800353c:	e799      	b.n	8003472 <SDMMC_CmdBlockLength+0x3e>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800353e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003542:	e796      	b.n	8003472 <SDMMC_CmdBlockLength+0x3e>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8003544:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003548:	e793      	b.n	8003472 <SDMMC_CmdBlockLength+0x3e>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800354a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800354e:	e790      	b.n	8003472 <SDMMC_CmdBlockLength+0x3e>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8003550:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003554:	e78d      	b.n	8003472 <SDMMC_CmdBlockLength+0x3e>
    return SDMMC_ERROR_ERASE_RESET;
 8003556:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800355a:	e78a      	b.n	8003472 <SDMMC_CmdBlockLength+0x3e>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800355c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003560:	e787      	b.n	8003472 <SDMMC_CmdBlockLength+0x3e>
 8003562:	bf00      	nop
 8003564:	20000000 	.word	0x20000000
 8003568:	10624dd3 	.word	0x10624dd3
 800356c:	fffff000 	.word	0xfffff000
 8003570:	fdffe008 	.word	0xfdffe008

08003574 <SDMMC_CmdReadSingleBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003574:	4b4b      	ldr	r3, [pc, #300]	; (80036a4 <SDMMC_CmdReadSingleBlock+0x130>)
 8003576:	f241 3288 	movw	r2, #5000	; 0x1388
{
 800357a:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800357c:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800357e:	f240 4451 	movw	r4, #1105	; 0x451
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003582:	4d49      	ldr	r5, [pc, #292]	; (80036a8 <SDMMC_CmdReadSingleBlock+0x134>)
  SDMMCx->ARG = Command->Argument;
 8003584:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003586:	fba5 5303 	umull	r5, r3, r5, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800358a:	4948      	ldr	r1, [pc, #288]	; (80036ac <SDMMC_CmdReadSingleBlock+0x138>)
 800358c:	68c5      	ldr	r5, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800358e:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003590:	4029      	ands	r1, r5
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003592:	fb02 f303 	mul.w	r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003596:	430c      	orrs	r4, r1
 8003598:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 800359a:	b14b      	cbz	r3, 80035b0 <SDMMC_CmdReadSingleBlock+0x3c>
 800359c:	1e5a      	subs	r2, r3, #1
    sta_reg = SDMMCx->STA;
 800359e:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (count-- == 0U)
 80035a0:	3a01      	subs	r2, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80035a2:	f013 0f45 	tst.w	r3, #69	; 0x45
 80035a6:	d001      	beq.n	80035ac <SDMMC_CmdReadSingleBlock+0x38>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80035a8:	0519      	lsls	r1, r3, #20
 80035aa:	d506      	bpl.n	80035ba <SDMMC_CmdReadSingleBlock+0x46>
    if (count-- == 0U)
 80035ac:	1c54      	adds	r4, r2, #1
 80035ae:	d1f6      	bne.n	800359e <SDMMC_CmdReadSingleBlock+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 80035b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	bc30      	pop	{r4, r5}
 80035b8:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80035ba:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80035bc:	075b      	lsls	r3, r3, #29
 80035be:	d43d      	bmi.n	800363c <SDMMC_CmdReadSingleBlock+0xc8>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80035c0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80035c2:	f013 0301 	ands.w	r3, r3, #1
 80035c6:	d134      	bne.n	8003632 <SDMMC_CmdReadSingleBlock+0xbe>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80035c8:	23c5      	movs	r3, #197	; 0xc5
 80035ca:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 80035cc:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	2b11      	cmp	r3, #17
 80035d2:	d131      	bne.n	8003638 <SDMMC_CmdReadSingleBlock+0xc4>
  return (*(__IO uint32_t *) tmp);
 80035d4:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80035d6:	4b36      	ldr	r3, [pc, #216]	; (80036b0 <SDMMC_CmdReadSingleBlock+0x13c>)
 80035d8:	4013      	ands	r3, r2
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d0ea      	beq.n	80035b4 <SDMMC_CmdReadSingleBlock+0x40>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80035de:	2a00      	cmp	r2, #0
 80035e0:	db2f      	blt.n	8003642 <SDMMC_CmdReadSingleBlock+0xce>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80035e2:	0055      	lsls	r5, r2, #1
 80035e4:	d430      	bmi.n	8003648 <SDMMC_CmdReadSingleBlock+0xd4>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80035e6:	0094      	lsls	r4, r2, #2
 80035e8:	d430      	bmi.n	800364c <SDMMC_CmdReadSingleBlock+0xd8>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80035ea:	00d0      	lsls	r0, r2, #3
 80035ec:	d430      	bmi.n	8003650 <SDMMC_CmdReadSingleBlock+0xdc>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80035ee:	0111      	lsls	r1, r2, #4
 80035f0:	d431      	bmi.n	8003656 <SDMMC_CmdReadSingleBlock+0xe2>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80035f2:	0155      	lsls	r5, r2, #5
 80035f4:	d432      	bmi.n	800365c <SDMMC_CmdReadSingleBlock+0xe8>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80035f6:	01d4      	lsls	r4, r2, #7
 80035f8:	d433      	bmi.n	8003662 <SDMMC_CmdReadSingleBlock+0xee>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80035fa:	0210      	lsls	r0, r2, #8
 80035fc:	d434      	bmi.n	8003668 <SDMMC_CmdReadSingleBlock+0xf4>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80035fe:	0251      	lsls	r1, r2, #9
 8003600:	d435      	bmi.n	800366e <SDMMC_CmdReadSingleBlock+0xfa>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8003602:	0295      	lsls	r5, r2, #10
 8003604:	d436      	bmi.n	8003674 <SDMMC_CmdReadSingleBlock+0x100>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8003606:	02d4      	lsls	r4, r2, #11
 8003608:	d437      	bmi.n	800367a <SDMMC_CmdReadSingleBlock+0x106>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800360a:	0350      	lsls	r0, r2, #13
 800360c:	d438      	bmi.n	8003680 <SDMMC_CmdReadSingleBlock+0x10c>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800360e:	0391      	lsls	r1, r2, #14
 8003610:	d439      	bmi.n	8003686 <SDMMC_CmdReadSingleBlock+0x112>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8003612:	03d5      	lsls	r5, r2, #15
 8003614:	d43a      	bmi.n	800368c <SDMMC_CmdReadSingleBlock+0x118>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8003616:	0414      	lsls	r4, r2, #16
 8003618:	d43b      	bmi.n	8003692 <SDMMC_CmdReadSingleBlock+0x11e>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800361a:	0450      	lsls	r0, r2, #17
 800361c:	d43f      	bmi.n	800369e <SDMMC_CmdReadSingleBlock+0x12a>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800361e:	0491      	lsls	r1, r2, #18
 8003620:	d43a      	bmi.n	8003698 <SDMMC_CmdReadSingleBlock+0x124>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8003622:	f012 0f08 	tst.w	r2, #8
 8003626:	bf14      	ite	ne
 8003628:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 800362c:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8003630:	e7c0      	b.n	80035b4 <SDMMC_CmdReadSingleBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8003632:	2201      	movs	r2, #1
 8003634:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003636:	e7bd      	b.n	80035b4 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003638:	2301      	movs	r3, #1
 800363a:	e7bb      	b.n	80035b4 <SDMMC_CmdReadSingleBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800363c:	2304      	movs	r3, #4
 800363e:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003640:	e7b8      	b.n	80035b4 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8003642:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003646:	e7b5      	b.n	80035b4 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8003648:	2340      	movs	r3, #64	; 0x40
 800364a:	e7b3      	b.n	80035b4 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800364c:	2380      	movs	r3, #128	; 0x80
 800364e:	e7b1      	b.n	80035b4 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8003650:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003654:	e7ae      	b.n	80035b4 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8003656:	f44f 7300 	mov.w	r3, #512	; 0x200
 800365a:	e7ab      	b.n	80035b4 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800365c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003660:	e7a8      	b.n	80035b4 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8003662:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003666:	e7a5      	b.n	80035b4 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8003668:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800366c:	e7a2      	b.n	80035b4 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800366e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003672:	e79f      	b.n	80035b4 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8003674:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003678:	e79c      	b.n	80035b4 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CC_ERR;
 800367a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800367e:	e799      	b.n	80035b4 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8003680:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003684:	e796      	b.n	80035b4 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8003686:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800368a:	e793      	b.n	80035b4 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800368c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003690:	e790      	b.n	80035b4 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8003692:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003696:	e78d      	b.n	80035b4 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 8003698:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800369c:	e78a      	b.n	80035b4 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800369e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80036a2:	e787      	b.n	80035b4 <SDMMC_CmdReadSingleBlock+0x40>
 80036a4:	20000000 	.word	0x20000000
 80036a8:	10624dd3 	.word	0x10624dd3
 80036ac:	fffff000 	.word	0xfffff000
 80036b0:	fdffe008 	.word	0xfdffe008

080036b4 <SDMMC_CmdReadMultiBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80036b4:	4b4b      	ldr	r3, [pc, #300]	; (80037e4 <SDMMC_CmdReadMultiBlock+0x130>)
 80036b6:	f241 3288 	movw	r2, #5000	; 0x1388
{
 80036ba:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80036bc:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80036be:	f240 4452 	movw	r4, #1106	; 0x452
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80036c2:	4d49      	ldr	r5, [pc, #292]	; (80037e8 <SDMMC_CmdReadMultiBlock+0x134>)
  SDMMCx->ARG = Command->Argument;
 80036c4:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80036c6:	fba5 5303 	umull	r5, r3, r5, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80036ca:	4948      	ldr	r1, [pc, #288]	; (80037ec <SDMMC_CmdReadMultiBlock+0x138>)
 80036cc:	68c5      	ldr	r5, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80036ce:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80036d0:	4029      	ands	r1, r5
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80036d2:	fb02 f303 	mul.w	r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80036d6:	430c      	orrs	r4, r1
 80036d8:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 80036da:	b14b      	cbz	r3, 80036f0 <SDMMC_CmdReadMultiBlock+0x3c>
 80036dc:	1e5a      	subs	r2, r3, #1
    sta_reg = SDMMCx->STA;
 80036de:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (count-- == 0U)
 80036e0:	3a01      	subs	r2, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80036e2:	f013 0f45 	tst.w	r3, #69	; 0x45
 80036e6:	d001      	beq.n	80036ec <SDMMC_CmdReadMultiBlock+0x38>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80036e8:	0519      	lsls	r1, r3, #20
 80036ea:	d506      	bpl.n	80036fa <SDMMC_CmdReadMultiBlock+0x46>
    if (count-- == 0U)
 80036ec:	1c54      	adds	r4, r2, #1
 80036ee:	d1f6      	bne.n	80036de <SDMMC_CmdReadMultiBlock+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 80036f0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	bc30      	pop	{r4, r5}
 80036f8:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80036fa:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80036fc:	075b      	lsls	r3, r3, #29
 80036fe:	d43d      	bmi.n	800377c <SDMMC_CmdReadMultiBlock+0xc8>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8003700:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003702:	f013 0301 	ands.w	r3, r3, #1
 8003706:	d134      	bne.n	8003772 <SDMMC_CmdReadMultiBlock+0xbe>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8003708:	23c5      	movs	r3, #197	; 0xc5
 800370a:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800370c:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800370e:	b2db      	uxtb	r3, r3
 8003710:	2b12      	cmp	r3, #18
 8003712:	d131      	bne.n	8003778 <SDMMC_CmdReadMultiBlock+0xc4>
  return (*(__IO uint32_t *) tmp);
 8003714:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8003716:	4b36      	ldr	r3, [pc, #216]	; (80037f0 <SDMMC_CmdReadMultiBlock+0x13c>)
 8003718:	4013      	ands	r3, r2
 800371a:	2b00      	cmp	r3, #0
 800371c:	d0ea      	beq.n	80036f4 <SDMMC_CmdReadMultiBlock+0x40>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800371e:	2a00      	cmp	r2, #0
 8003720:	db2f      	blt.n	8003782 <SDMMC_CmdReadMultiBlock+0xce>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8003722:	0055      	lsls	r5, r2, #1
 8003724:	d430      	bmi.n	8003788 <SDMMC_CmdReadMultiBlock+0xd4>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8003726:	0094      	lsls	r4, r2, #2
 8003728:	d430      	bmi.n	800378c <SDMMC_CmdReadMultiBlock+0xd8>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800372a:	00d0      	lsls	r0, r2, #3
 800372c:	d430      	bmi.n	8003790 <SDMMC_CmdReadMultiBlock+0xdc>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800372e:	0111      	lsls	r1, r2, #4
 8003730:	d431      	bmi.n	8003796 <SDMMC_CmdReadMultiBlock+0xe2>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8003732:	0155      	lsls	r5, r2, #5
 8003734:	d432      	bmi.n	800379c <SDMMC_CmdReadMultiBlock+0xe8>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8003736:	01d4      	lsls	r4, r2, #7
 8003738:	d433      	bmi.n	80037a2 <SDMMC_CmdReadMultiBlock+0xee>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800373a:	0210      	lsls	r0, r2, #8
 800373c:	d434      	bmi.n	80037a8 <SDMMC_CmdReadMultiBlock+0xf4>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800373e:	0251      	lsls	r1, r2, #9
 8003740:	d435      	bmi.n	80037ae <SDMMC_CmdReadMultiBlock+0xfa>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8003742:	0295      	lsls	r5, r2, #10
 8003744:	d436      	bmi.n	80037b4 <SDMMC_CmdReadMultiBlock+0x100>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8003746:	02d4      	lsls	r4, r2, #11
 8003748:	d437      	bmi.n	80037ba <SDMMC_CmdReadMultiBlock+0x106>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800374a:	0350      	lsls	r0, r2, #13
 800374c:	d438      	bmi.n	80037c0 <SDMMC_CmdReadMultiBlock+0x10c>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800374e:	0391      	lsls	r1, r2, #14
 8003750:	d439      	bmi.n	80037c6 <SDMMC_CmdReadMultiBlock+0x112>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8003752:	03d5      	lsls	r5, r2, #15
 8003754:	d43a      	bmi.n	80037cc <SDMMC_CmdReadMultiBlock+0x118>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8003756:	0414      	lsls	r4, r2, #16
 8003758:	d43b      	bmi.n	80037d2 <SDMMC_CmdReadMultiBlock+0x11e>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800375a:	0450      	lsls	r0, r2, #17
 800375c:	d43f      	bmi.n	80037de <SDMMC_CmdReadMultiBlock+0x12a>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800375e:	0491      	lsls	r1, r2, #18
 8003760:	d43a      	bmi.n	80037d8 <SDMMC_CmdReadMultiBlock+0x124>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8003762:	f012 0f08 	tst.w	r2, #8
 8003766:	bf14      	ite	ne
 8003768:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 800376c:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8003770:	e7c0      	b.n	80036f4 <SDMMC_CmdReadMultiBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8003772:	2201      	movs	r2, #1
 8003774:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003776:	e7bd      	b.n	80036f4 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003778:	2301      	movs	r3, #1
 800377a:	e7bb      	b.n	80036f4 <SDMMC_CmdReadMultiBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800377c:	2304      	movs	r3, #4
 800377e:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003780:	e7b8      	b.n	80036f4 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8003782:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003786:	e7b5      	b.n	80036f4 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8003788:	2340      	movs	r3, #64	; 0x40
 800378a:	e7b3      	b.n	80036f4 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800378c:	2380      	movs	r3, #128	; 0x80
 800378e:	e7b1      	b.n	80036f4 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8003790:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003794:	e7ae      	b.n	80036f4 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8003796:	f44f 7300 	mov.w	r3, #512	; 0x200
 800379a:	e7ab      	b.n	80036f4 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800379c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037a0:	e7a8      	b.n	80036f4 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80037a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80037a6:	e7a5      	b.n	80036f4 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 80037a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80037ac:	e7a2      	b.n	80036f4 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 80037ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80037b2:	e79f      	b.n	80036f4 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80037b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80037b8:	e79c      	b.n	80036f4 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CC_ERR;
 80037ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037be:	e799      	b.n	80036f4 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80037c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037c4:	e796      	b.n	80036f4 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80037c6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80037ca:	e793      	b.n	80036f4 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80037cc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80037d0:	e790      	b.n	80036f4 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80037d2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80037d6:	e78d      	b.n	80036f4 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 80037d8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80037dc:	e78a      	b.n	80036f4 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80037de:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80037e2:	e787      	b.n	80036f4 <SDMMC_CmdReadMultiBlock+0x40>
 80037e4:	20000000 	.word	0x20000000
 80037e8:	10624dd3 	.word	0x10624dd3
 80037ec:	fffff000 	.word	0xfffff000
 80037f0:	fdffe008 	.word	0xfdffe008

080037f4 <SDMMC_CmdWriteSingleBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80037f4:	4b4b      	ldr	r3, [pc, #300]	; (8003924 <SDMMC_CmdWriteSingleBlock+0x130>)
{
 80037f6:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	f241 3488 	movw	r4, #5000	; 0x1388
 80037fe:	4d4a      	ldr	r5, [pc, #296]	; (8003928 <SDMMC_CmdWriteSingleBlock+0x134>)
  SDMMCx->ARG = Command->Argument;
 8003800:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003802:	4b4a      	ldr	r3, [pc, #296]	; (800392c <SDMMC_CmdWriteSingleBlock+0x138>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003804:	fba5 1202 	umull	r1, r2, r5, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003808:	68c1      	ldr	r1, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800380a:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800380c:	400b      	ands	r3, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800380e:	fb04 f202 	mul.w	r2, r4, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003812:	f443 638b 	orr.w	r3, r3, #1112	; 0x458
 8003816:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 8003818:	b14a      	cbz	r2, 800382e <SDMMC_CmdWriteSingleBlock+0x3a>
 800381a:	1e51      	subs	r1, r2, #1
    sta_reg = SDMMCx->STA;
 800381c:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (count-- == 0U)
 800381e:	3901      	subs	r1, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8003820:	f013 0f45 	tst.w	r3, #69	; 0x45
 8003824:	d001      	beq.n	800382a <SDMMC_CmdWriteSingleBlock+0x36>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8003826:	051a      	lsls	r2, r3, #20
 8003828:	d506      	bpl.n	8003838 <SDMMC_CmdWriteSingleBlock+0x44>
    if (count-- == 0U)
 800382a:	1c4c      	adds	r4, r1, #1
 800382c:	d1f6      	bne.n	800381c <SDMMC_CmdWriteSingleBlock+0x28>
      return SDMMC_ERROR_TIMEOUT;
 800382e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8003832:	4618      	mov	r0, r3
 8003834:	bc30      	pop	{r4, r5}
 8003836:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8003838:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800383a:	075b      	lsls	r3, r3, #29
 800383c:	d43d      	bmi.n	80038ba <SDMMC_CmdWriteSingleBlock+0xc6>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800383e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003840:	f013 0301 	ands.w	r3, r3, #1
 8003844:	d134      	bne.n	80038b0 <SDMMC_CmdWriteSingleBlock+0xbc>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8003846:	23c5      	movs	r3, #197	; 0xc5
 8003848:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800384a:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800384c:	b2db      	uxtb	r3, r3
 800384e:	2b18      	cmp	r3, #24
 8003850:	d131      	bne.n	80038b6 <SDMMC_CmdWriteSingleBlock+0xc2>
  return (*(__IO uint32_t *) tmp);
 8003852:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8003854:	4b36      	ldr	r3, [pc, #216]	; (8003930 <SDMMC_CmdWriteSingleBlock+0x13c>)
 8003856:	4013      	ands	r3, r2
 8003858:	2b00      	cmp	r3, #0
 800385a:	d0ea      	beq.n	8003832 <SDMMC_CmdWriteSingleBlock+0x3e>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800385c:	2a00      	cmp	r2, #0
 800385e:	db2f      	blt.n	80038c0 <SDMMC_CmdWriteSingleBlock+0xcc>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8003860:	0055      	lsls	r5, r2, #1
 8003862:	d430      	bmi.n	80038c6 <SDMMC_CmdWriteSingleBlock+0xd2>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8003864:	0094      	lsls	r4, r2, #2
 8003866:	d430      	bmi.n	80038ca <SDMMC_CmdWriteSingleBlock+0xd6>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8003868:	00d0      	lsls	r0, r2, #3
 800386a:	d430      	bmi.n	80038ce <SDMMC_CmdWriteSingleBlock+0xda>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800386c:	0111      	lsls	r1, r2, #4
 800386e:	d431      	bmi.n	80038d4 <SDMMC_CmdWriteSingleBlock+0xe0>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8003870:	0155      	lsls	r5, r2, #5
 8003872:	d432      	bmi.n	80038da <SDMMC_CmdWriteSingleBlock+0xe6>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8003874:	01d4      	lsls	r4, r2, #7
 8003876:	d433      	bmi.n	80038e0 <SDMMC_CmdWriteSingleBlock+0xec>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8003878:	0210      	lsls	r0, r2, #8
 800387a:	d434      	bmi.n	80038e6 <SDMMC_CmdWriteSingleBlock+0xf2>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800387c:	0251      	lsls	r1, r2, #9
 800387e:	d435      	bmi.n	80038ec <SDMMC_CmdWriteSingleBlock+0xf8>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8003880:	0295      	lsls	r5, r2, #10
 8003882:	d436      	bmi.n	80038f2 <SDMMC_CmdWriteSingleBlock+0xfe>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8003884:	02d4      	lsls	r4, r2, #11
 8003886:	d437      	bmi.n	80038f8 <SDMMC_CmdWriteSingleBlock+0x104>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8003888:	0350      	lsls	r0, r2, #13
 800388a:	d438      	bmi.n	80038fe <SDMMC_CmdWriteSingleBlock+0x10a>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800388c:	0391      	lsls	r1, r2, #14
 800388e:	d439      	bmi.n	8003904 <SDMMC_CmdWriteSingleBlock+0x110>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8003890:	03d5      	lsls	r5, r2, #15
 8003892:	d43a      	bmi.n	800390a <SDMMC_CmdWriteSingleBlock+0x116>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8003894:	0414      	lsls	r4, r2, #16
 8003896:	d43b      	bmi.n	8003910 <SDMMC_CmdWriteSingleBlock+0x11c>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8003898:	0450      	lsls	r0, r2, #17
 800389a:	d43f      	bmi.n	800391c <SDMMC_CmdWriteSingleBlock+0x128>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800389c:	0491      	lsls	r1, r2, #18
 800389e:	d43a      	bmi.n	8003916 <SDMMC_CmdWriteSingleBlock+0x122>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80038a0:	f012 0f08 	tst.w	r2, #8
 80038a4:	bf14      	ite	ne
 80038a6:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 80038aa:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 80038ae:	e7c0      	b.n	8003832 <SDMMC_CmdWriteSingleBlock+0x3e>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80038b0:	2201      	movs	r2, #1
 80038b2:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80038b4:	e7bd      	b.n	8003832 <SDMMC_CmdWriteSingleBlock+0x3e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e7bb      	b.n	8003832 <SDMMC_CmdWriteSingleBlock+0x3e>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80038ba:	2304      	movs	r3, #4
 80038bc:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80038be:	e7b8      	b.n	8003832 <SDMMC_CmdWriteSingleBlock+0x3e>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80038c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038c4:	e7b5      	b.n	8003832 <SDMMC_CmdWriteSingleBlock+0x3e>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80038c6:	2340      	movs	r3, #64	; 0x40
 80038c8:	e7b3      	b.n	8003832 <SDMMC_CmdWriteSingleBlock+0x3e>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80038ca:	2380      	movs	r3, #128	; 0x80
 80038cc:	e7b1      	b.n	8003832 <SDMMC_CmdWriteSingleBlock+0x3e>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80038ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80038d2:	e7ae      	b.n	8003832 <SDMMC_CmdWriteSingleBlock+0x3e>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80038d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80038d8:	e7ab      	b.n	8003832 <SDMMC_CmdWriteSingleBlock+0x3e>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80038da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80038de:	e7a8      	b.n	8003832 <SDMMC_CmdWriteSingleBlock+0x3e>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80038e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80038e4:	e7a5      	b.n	8003832 <SDMMC_CmdWriteSingleBlock+0x3e>
    return SDMMC_ERROR_COM_CRC_FAILED;
 80038e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80038ea:	e7a2      	b.n	8003832 <SDMMC_CmdWriteSingleBlock+0x3e>
    return SDMMC_ERROR_ILLEGAL_CMD;
 80038ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80038f0:	e79f      	b.n	8003832 <SDMMC_CmdWriteSingleBlock+0x3e>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80038f2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80038f6:	e79c      	b.n	8003832 <SDMMC_CmdWriteSingleBlock+0x3e>
    return SDMMC_ERROR_CC_ERR;
 80038f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038fc:	e799      	b.n	8003832 <SDMMC_CmdWriteSingleBlock+0x3e>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80038fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003902:	e796      	b.n	8003832 <SDMMC_CmdWriteSingleBlock+0x3e>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8003904:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003908:	e793      	b.n	8003832 <SDMMC_CmdWriteSingleBlock+0x3e>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800390a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800390e:	e790      	b.n	8003832 <SDMMC_CmdWriteSingleBlock+0x3e>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8003910:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003914:	e78d      	b.n	8003832 <SDMMC_CmdWriteSingleBlock+0x3e>
    return SDMMC_ERROR_ERASE_RESET;
 8003916:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800391a:	e78a      	b.n	8003832 <SDMMC_CmdWriteSingleBlock+0x3e>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800391c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003920:	e787      	b.n	8003832 <SDMMC_CmdWriteSingleBlock+0x3e>
 8003922:	bf00      	nop
 8003924:	20000000 	.word	0x20000000
 8003928:	10624dd3 	.word	0x10624dd3
 800392c:	fffff000 	.word	0xfffff000
 8003930:	fdffe008 	.word	0xfdffe008

08003934 <SDMMC_CmdWriteMultiBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003934:	4b4b      	ldr	r3, [pc, #300]	; (8003a64 <SDMMC_CmdWriteMultiBlock+0x130>)
 8003936:	f241 3288 	movw	r2, #5000	; 0x1388
{
 800393a:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800393c:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800393e:	f240 4459 	movw	r4, #1113	; 0x459
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003942:	4d49      	ldr	r5, [pc, #292]	; (8003a68 <SDMMC_CmdWriteMultiBlock+0x134>)
  SDMMCx->ARG = Command->Argument;
 8003944:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003946:	fba5 5303 	umull	r5, r3, r5, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800394a:	4948      	ldr	r1, [pc, #288]	; (8003a6c <SDMMC_CmdWriteMultiBlock+0x138>)
 800394c:	68c5      	ldr	r5, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800394e:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003950:	4029      	ands	r1, r5
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003952:	fb02 f303 	mul.w	r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003956:	430c      	orrs	r4, r1
 8003958:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 800395a:	b14b      	cbz	r3, 8003970 <SDMMC_CmdWriteMultiBlock+0x3c>
 800395c:	1e5a      	subs	r2, r3, #1
    sta_reg = SDMMCx->STA;
 800395e:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (count-- == 0U)
 8003960:	3a01      	subs	r2, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8003962:	f013 0f45 	tst.w	r3, #69	; 0x45
 8003966:	d001      	beq.n	800396c <SDMMC_CmdWriteMultiBlock+0x38>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8003968:	0519      	lsls	r1, r3, #20
 800396a:	d506      	bpl.n	800397a <SDMMC_CmdWriteMultiBlock+0x46>
    if (count-- == 0U)
 800396c:	1c54      	adds	r4, r2, #1
 800396e:	d1f6      	bne.n	800395e <SDMMC_CmdWriteMultiBlock+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 8003970:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8003974:	4618      	mov	r0, r3
 8003976:	bc30      	pop	{r4, r5}
 8003978:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800397a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800397c:	075b      	lsls	r3, r3, #29
 800397e:	d43d      	bmi.n	80039fc <SDMMC_CmdWriteMultiBlock+0xc8>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8003980:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003982:	f013 0301 	ands.w	r3, r3, #1
 8003986:	d134      	bne.n	80039f2 <SDMMC_CmdWriteMultiBlock+0xbe>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8003988:	23c5      	movs	r3, #197	; 0xc5
 800398a:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800398c:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800398e:	b2db      	uxtb	r3, r3
 8003990:	2b19      	cmp	r3, #25
 8003992:	d131      	bne.n	80039f8 <SDMMC_CmdWriteMultiBlock+0xc4>
  return (*(__IO uint32_t *) tmp);
 8003994:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8003996:	4b36      	ldr	r3, [pc, #216]	; (8003a70 <SDMMC_CmdWriteMultiBlock+0x13c>)
 8003998:	4013      	ands	r3, r2
 800399a:	2b00      	cmp	r3, #0
 800399c:	d0ea      	beq.n	8003974 <SDMMC_CmdWriteMultiBlock+0x40>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800399e:	2a00      	cmp	r2, #0
 80039a0:	db2f      	blt.n	8003a02 <SDMMC_CmdWriteMultiBlock+0xce>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80039a2:	0055      	lsls	r5, r2, #1
 80039a4:	d430      	bmi.n	8003a08 <SDMMC_CmdWriteMultiBlock+0xd4>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80039a6:	0094      	lsls	r4, r2, #2
 80039a8:	d430      	bmi.n	8003a0c <SDMMC_CmdWriteMultiBlock+0xd8>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80039aa:	00d0      	lsls	r0, r2, #3
 80039ac:	d430      	bmi.n	8003a10 <SDMMC_CmdWriteMultiBlock+0xdc>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80039ae:	0111      	lsls	r1, r2, #4
 80039b0:	d431      	bmi.n	8003a16 <SDMMC_CmdWriteMultiBlock+0xe2>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80039b2:	0155      	lsls	r5, r2, #5
 80039b4:	d432      	bmi.n	8003a1c <SDMMC_CmdWriteMultiBlock+0xe8>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80039b6:	01d4      	lsls	r4, r2, #7
 80039b8:	d433      	bmi.n	8003a22 <SDMMC_CmdWriteMultiBlock+0xee>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80039ba:	0210      	lsls	r0, r2, #8
 80039bc:	d434      	bmi.n	8003a28 <SDMMC_CmdWriteMultiBlock+0xf4>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80039be:	0251      	lsls	r1, r2, #9
 80039c0:	d435      	bmi.n	8003a2e <SDMMC_CmdWriteMultiBlock+0xfa>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80039c2:	0295      	lsls	r5, r2, #10
 80039c4:	d436      	bmi.n	8003a34 <SDMMC_CmdWriteMultiBlock+0x100>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80039c6:	02d4      	lsls	r4, r2, #11
 80039c8:	d437      	bmi.n	8003a3a <SDMMC_CmdWriteMultiBlock+0x106>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80039ca:	0350      	lsls	r0, r2, #13
 80039cc:	d438      	bmi.n	8003a40 <SDMMC_CmdWriteMultiBlock+0x10c>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80039ce:	0391      	lsls	r1, r2, #14
 80039d0:	d439      	bmi.n	8003a46 <SDMMC_CmdWriteMultiBlock+0x112>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80039d2:	03d5      	lsls	r5, r2, #15
 80039d4:	d43a      	bmi.n	8003a4c <SDMMC_CmdWriteMultiBlock+0x118>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80039d6:	0414      	lsls	r4, r2, #16
 80039d8:	d43b      	bmi.n	8003a52 <SDMMC_CmdWriteMultiBlock+0x11e>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80039da:	0450      	lsls	r0, r2, #17
 80039dc:	d43f      	bmi.n	8003a5e <SDMMC_CmdWriteMultiBlock+0x12a>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80039de:	0491      	lsls	r1, r2, #18
 80039e0:	d43a      	bmi.n	8003a58 <SDMMC_CmdWriteMultiBlock+0x124>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80039e2:	f012 0f08 	tst.w	r2, #8
 80039e6:	bf14      	ite	ne
 80039e8:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 80039ec:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 80039f0:	e7c0      	b.n	8003974 <SDMMC_CmdWriteMultiBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80039f2:	2201      	movs	r2, #1
 80039f4:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80039f6:	e7bd      	b.n	8003974 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e7bb      	b.n	8003974 <SDMMC_CmdWriteMultiBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80039fc:	2304      	movs	r3, #4
 80039fe:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003a00:	e7b8      	b.n	8003974 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8003a02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a06:	e7b5      	b.n	8003974 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8003a08:	2340      	movs	r3, #64	; 0x40
 8003a0a:	e7b3      	b.n	8003974 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8003a0c:	2380      	movs	r3, #128	; 0x80
 8003a0e:	e7b1      	b.n	8003974 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8003a10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a14:	e7ae      	b.n	8003974 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8003a16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a1a:	e7ab      	b.n	8003974 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8003a1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a20:	e7a8      	b.n	8003974 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8003a22:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003a26:	e7a5      	b.n	8003974 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8003a28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a2c:	e7a2      	b.n	8003974 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8003a2e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003a32:	e79f      	b.n	8003974 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8003a34:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003a38:	e79c      	b.n	8003974 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CC_ERR;
 8003a3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a3e:	e799      	b.n	8003974 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8003a40:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a44:	e796      	b.n	8003974 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8003a46:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003a4a:	e793      	b.n	8003974 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8003a4c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003a50:	e790      	b.n	8003974 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8003a52:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003a56:	e78d      	b.n	8003974 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 8003a58:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003a5c:	e78a      	b.n	8003974 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8003a5e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003a62:	e787      	b.n	8003974 <SDMMC_CmdWriteMultiBlock+0x40>
 8003a64:	20000000 	.word	0x20000000
 8003a68:	10624dd3 	.word	0x10624dd3
 8003a6c:	fffff000 	.word	0xfffff000
 8003a70:	fdffe008 	.word	0xfdffe008

08003a74 <SDMMC_CmdStopTransfer>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003a74:	4b4b      	ldr	r3, [pc, #300]	; (8003ba4 <SDMMC_CmdStopTransfer+0x130>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003a76:	f240 414c 	movw	r1, #1100	; 0x44c
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003a7a:	4a4b      	ldr	r2, [pc, #300]	; (8003ba8 <SDMMC_CmdStopTransfer+0x134>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
{
 8003a7e:	b430      	push	{r4, r5}
  SDMMCx->ARG = Command->Argument;
 8003a80:	2500      	movs	r5, #0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003a82:	fba2 2303 	umull	r2, r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003a86:	4c49      	ldr	r4, [pc, #292]	; (8003bac <SDMMC_CmdStopTransfer+0x138>)
  SDMMCx->ARG = Command->Argument;
 8003a88:	6085      	str	r5, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003a8a:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003a8c:	68c5      	ldr	r5, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003a8e:	4a48      	ldr	r2, [pc, #288]	; (8003bb0 <SDMMC_CmdStopTransfer+0x13c>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003a90:	402c      	ands	r4, r5
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003a92:	fb02 f303 	mul.w	r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003a96:	4321      	orrs	r1, r4
 8003a98:	60c1      	str	r1, [r0, #12]
    if (count-- == 0U)
 8003a9a:	b14b      	cbz	r3, 8003ab0 <SDMMC_CmdStopTransfer+0x3c>
 8003a9c:	1e5a      	subs	r2, r3, #1
    sta_reg = SDMMCx->STA;
 8003a9e:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (count-- == 0U)
 8003aa0:	3a01      	subs	r2, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8003aa2:	f013 0f45 	tst.w	r3, #69	; 0x45
 8003aa6:	d001      	beq.n	8003aac <SDMMC_CmdStopTransfer+0x38>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8003aa8:	0519      	lsls	r1, r3, #20
 8003aaa:	d506      	bpl.n	8003aba <SDMMC_CmdStopTransfer+0x46>
    if (count-- == 0U)
 8003aac:	1c54      	adds	r4, r2, #1
 8003aae:	d1f6      	bne.n	8003a9e <SDMMC_CmdStopTransfer+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 8003ab0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	bc30      	pop	{r4, r5}
 8003ab8:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8003aba:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003abc:	075b      	lsls	r3, r3, #29
 8003abe:	d43d      	bmi.n	8003b3c <SDMMC_CmdStopTransfer+0xc8>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8003ac0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003ac2:	f013 0301 	ands.w	r3, r3, #1
 8003ac6:	d134      	bne.n	8003b32 <SDMMC_CmdStopTransfer+0xbe>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8003ac8:	23c5      	movs	r3, #197	; 0xc5
 8003aca:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8003acc:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	2b0c      	cmp	r3, #12
 8003ad2:	d131      	bne.n	8003b38 <SDMMC_CmdStopTransfer+0xc4>
  return (*(__IO uint32_t *) tmp);
 8003ad4:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8003ad6:	4b37      	ldr	r3, [pc, #220]	; (8003bb4 <SDMMC_CmdStopTransfer+0x140>)
 8003ad8:	4013      	ands	r3, r2
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d0ea      	beq.n	8003ab4 <SDMMC_CmdStopTransfer+0x40>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8003ade:	2a00      	cmp	r2, #0
 8003ae0:	db2f      	blt.n	8003b42 <SDMMC_CmdStopTransfer+0xce>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8003ae2:	0055      	lsls	r5, r2, #1
 8003ae4:	d430      	bmi.n	8003b48 <SDMMC_CmdStopTransfer+0xd4>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8003ae6:	0094      	lsls	r4, r2, #2
 8003ae8:	d430      	bmi.n	8003b4c <SDMMC_CmdStopTransfer+0xd8>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8003aea:	00d0      	lsls	r0, r2, #3
 8003aec:	d430      	bmi.n	8003b50 <SDMMC_CmdStopTransfer+0xdc>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8003aee:	0111      	lsls	r1, r2, #4
 8003af0:	d431      	bmi.n	8003b56 <SDMMC_CmdStopTransfer+0xe2>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8003af2:	0155      	lsls	r5, r2, #5
 8003af4:	d432      	bmi.n	8003b5c <SDMMC_CmdStopTransfer+0xe8>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8003af6:	01d4      	lsls	r4, r2, #7
 8003af8:	d433      	bmi.n	8003b62 <SDMMC_CmdStopTransfer+0xee>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8003afa:	0210      	lsls	r0, r2, #8
 8003afc:	d434      	bmi.n	8003b68 <SDMMC_CmdStopTransfer+0xf4>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8003afe:	0251      	lsls	r1, r2, #9
 8003b00:	d435      	bmi.n	8003b6e <SDMMC_CmdStopTransfer+0xfa>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8003b02:	0295      	lsls	r5, r2, #10
 8003b04:	d436      	bmi.n	8003b74 <SDMMC_CmdStopTransfer+0x100>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8003b06:	02d4      	lsls	r4, r2, #11
 8003b08:	d437      	bmi.n	8003b7a <SDMMC_CmdStopTransfer+0x106>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8003b0a:	0350      	lsls	r0, r2, #13
 8003b0c:	d438      	bmi.n	8003b80 <SDMMC_CmdStopTransfer+0x10c>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8003b0e:	0391      	lsls	r1, r2, #14
 8003b10:	d439      	bmi.n	8003b86 <SDMMC_CmdStopTransfer+0x112>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8003b12:	03d5      	lsls	r5, r2, #15
 8003b14:	d43a      	bmi.n	8003b8c <SDMMC_CmdStopTransfer+0x118>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8003b16:	0414      	lsls	r4, r2, #16
 8003b18:	d43b      	bmi.n	8003b92 <SDMMC_CmdStopTransfer+0x11e>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8003b1a:	0450      	lsls	r0, r2, #17
 8003b1c:	d43f      	bmi.n	8003b9e <SDMMC_CmdStopTransfer+0x12a>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8003b1e:	0491      	lsls	r1, r2, #18
 8003b20:	d43a      	bmi.n	8003b98 <SDMMC_CmdStopTransfer+0x124>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8003b22:	f012 0f08 	tst.w	r2, #8
 8003b26:	bf14      	ite	ne
 8003b28:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 8003b2c:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8003b30:	e7c0      	b.n	8003ab4 <SDMMC_CmdStopTransfer+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8003b32:	2201      	movs	r2, #1
 8003b34:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003b36:	e7bd      	b.n	8003ab4 <SDMMC_CmdStopTransfer+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e7bb      	b.n	8003ab4 <SDMMC_CmdStopTransfer+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8003b3c:	2304      	movs	r3, #4
 8003b3e:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003b40:	e7b8      	b.n	8003ab4 <SDMMC_CmdStopTransfer+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8003b42:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b46:	e7b5      	b.n	8003ab4 <SDMMC_CmdStopTransfer+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8003b48:	2340      	movs	r3, #64	; 0x40
 8003b4a:	e7b3      	b.n	8003ab4 <SDMMC_CmdStopTransfer+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8003b4c:	2380      	movs	r3, #128	; 0x80
 8003b4e:	e7b1      	b.n	8003ab4 <SDMMC_CmdStopTransfer+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8003b50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b54:	e7ae      	b.n	8003ab4 <SDMMC_CmdStopTransfer+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8003b56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b5a:	e7ab      	b.n	8003ab4 <SDMMC_CmdStopTransfer+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8003b5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b60:	e7a8      	b.n	8003ab4 <SDMMC_CmdStopTransfer+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8003b62:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003b66:	e7a5      	b.n	8003ab4 <SDMMC_CmdStopTransfer+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8003b68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b6c:	e7a2      	b.n	8003ab4 <SDMMC_CmdStopTransfer+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8003b6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003b72:	e79f      	b.n	8003ab4 <SDMMC_CmdStopTransfer+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8003b74:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003b78:	e79c      	b.n	8003ab4 <SDMMC_CmdStopTransfer+0x40>
    return SDMMC_ERROR_CC_ERR;
 8003b7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b7e:	e799      	b.n	8003ab4 <SDMMC_CmdStopTransfer+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8003b80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b84:	e796      	b.n	8003ab4 <SDMMC_CmdStopTransfer+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8003b86:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003b8a:	e793      	b.n	8003ab4 <SDMMC_CmdStopTransfer+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8003b8c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003b90:	e790      	b.n	8003ab4 <SDMMC_CmdStopTransfer+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8003b92:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003b96:	e78d      	b.n	8003ab4 <SDMMC_CmdStopTransfer+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 8003b98:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003b9c:	e78a      	b.n	8003ab4 <SDMMC_CmdStopTransfer+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8003b9e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003ba2:	e787      	b.n	8003ab4 <SDMMC_CmdStopTransfer+0x40>
 8003ba4:	20000000 	.word	0x20000000
 8003ba8:	10624dd3 	.word	0x10624dd3
 8003bac:	fffff000 	.word	0xfffff000
 8003bb0:	05f5e100 	.word	0x05f5e100
 8003bb4:	fdffe008 	.word	0xfdffe008

08003bb8 <SDMMC_CmdSelDesel>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003bb8:	4b4b      	ldr	r3, [pc, #300]	; (8003ce8 <SDMMC_CmdSelDesel+0x130>)
 8003bba:	f241 3188 	movw	r1, #5000	; 0x1388
{
 8003bbe:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003bc0:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003bc2:	f240 4447 	movw	r4, #1095	; 0x447
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003bc6:	4d49      	ldr	r5, [pc, #292]	; (8003cec <SDMMC_CmdSelDesel+0x134>)
  SDMMCx->ARG = Command->Argument;
 8003bc8:	6082      	str	r2, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003bca:	fba5 5303 	umull	r5, r3, r5, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003bce:	4a48      	ldr	r2, [pc, #288]	; (8003cf0 <SDMMC_CmdSelDesel+0x138>)
 8003bd0:	68c5      	ldr	r5, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003bd2:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003bd4:	402a      	ands	r2, r5
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003bd6:	fb01 f303 	mul.w	r3, r1, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003bda:	4314      	orrs	r4, r2
 8003bdc:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 8003bde:	b14b      	cbz	r3, 8003bf4 <SDMMC_CmdSelDesel+0x3c>
 8003be0:	1e5a      	subs	r2, r3, #1
    sta_reg = SDMMCx->STA;
 8003be2:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (count-- == 0U)
 8003be4:	3a01      	subs	r2, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8003be6:	f013 0f45 	tst.w	r3, #69	; 0x45
 8003bea:	d001      	beq.n	8003bf0 <SDMMC_CmdSelDesel+0x38>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8003bec:	0519      	lsls	r1, r3, #20
 8003bee:	d506      	bpl.n	8003bfe <SDMMC_CmdSelDesel+0x46>
    if (count-- == 0U)
 8003bf0:	1c54      	adds	r4, r2, #1
 8003bf2:	d1f6      	bne.n	8003be2 <SDMMC_CmdSelDesel+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 8003bf4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	bc30      	pop	{r4, r5}
 8003bfc:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8003bfe:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003c00:	075b      	lsls	r3, r3, #29
 8003c02:	d43d      	bmi.n	8003c80 <SDMMC_CmdSelDesel+0xc8>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8003c04:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003c06:	f013 0301 	ands.w	r3, r3, #1
 8003c0a:	d134      	bne.n	8003c76 <SDMMC_CmdSelDesel+0xbe>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8003c0c:	23c5      	movs	r3, #197	; 0xc5
 8003c0e:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8003c10:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	2b07      	cmp	r3, #7
 8003c16:	d131      	bne.n	8003c7c <SDMMC_CmdSelDesel+0xc4>
  return (*(__IO uint32_t *) tmp);
 8003c18:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8003c1a:	4b36      	ldr	r3, [pc, #216]	; (8003cf4 <SDMMC_CmdSelDesel+0x13c>)
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d0ea      	beq.n	8003bf8 <SDMMC_CmdSelDesel+0x40>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8003c22:	2a00      	cmp	r2, #0
 8003c24:	db2f      	blt.n	8003c86 <SDMMC_CmdSelDesel+0xce>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8003c26:	0055      	lsls	r5, r2, #1
 8003c28:	d430      	bmi.n	8003c8c <SDMMC_CmdSelDesel+0xd4>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8003c2a:	0094      	lsls	r4, r2, #2
 8003c2c:	d430      	bmi.n	8003c90 <SDMMC_CmdSelDesel+0xd8>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8003c2e:	00d0      	lsls	r0, r2, #3
 8003c30:	d430      	bmi.n	8003c94 <SDMMC_CmdSelDesel+0xdc>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8003c32:	0111      	lsls	r1, r2, #4
 8003c34:	d431      	bmi.n	8003c9a <SDMMC_CmdSelDesel+0xe2>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8003c36:	0155      	lsls	r5, r2, #5
 8003c38:	d432      	bmi.n	8003ca0 <SDMMC_CmdSelDesel+0xe8>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8003c3a:	01d4      	lsls	r4, r2, #7
 8003c3c:	d433      	bmi.n	8003ca6 <SDMMC_CmdSelDesel+0xee>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8003c3e:	0210      	lsls	r0, r2, #8
 8003c40:	d434      	bmi.n	8003cac <SDMMC_CmdSelDesel+0xf4>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8003c42:	0251      	lsls	r1, r2, #9
 8003c44:	d435      	bmi.n	8003cb2 <SDMMC_CmdSelDesel+0xfa>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8003c46:	0295      	lsls	r5, r2, #10
 8003c48:	d436      	bmi.n	8003cb8 <SDMMC_CmdSelDesel+0x100>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8003c4a:	02d4      	lsls	r4, r2, #11
 8003c4c:	d437      	bmi.n	8003cbe <SDMMC_CmdSelDesel+0x106>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8003c4e:	0350      	lsls	r0, r2, #13
 8003c50:	d438      	bmi.n	8003cc4 <SDMMC_CmdSelDesel+0x10c>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8003c52:	0391      	lsls	r1, r2, #14
 8003c54:	d439      	bmi.n	8003cca <SDMMC_CmdSelDesel+0x112>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8003c56:	03d5      	lsls	r5, r2, #15
 8003c58:	d43a      	bmi.n	8003cd0 <SDMMC_CmdSelDesel+0x118>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8003c5a:	0414      	lsls	r4, r2, #16
 8003c5c:	d43b      	bmi.n	8003cd6 <SDMMC_CmdSelDesel+0x11e>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8003c5e:	0450      	lsls	r0, r2, #17
 8003c60:	d43f      	bmi.n	8003ce2 <SDMMC_CmdSelDesel+0x12a>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8003c62:	0491      	lsls	r1, r2, #18
 8003c64:	d43a      	bmi.n	8003cdc <SDMMC_CmdSelDesel+0x124>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8003c66:	f012 0f08 	tst.w	r2, #8
 8003c6a:	bf14      	ite	ne
 8003c6c:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 8003c70:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8003c74:	e7c0      	b.n	8003bf8 <SDMMC_CmdSelDesel+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8003c76:	2201      	movs	r2, #1
 8003c78:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003c7a:	e7bd      	b.n	8003bf8 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e7bb      	b.n	8003bf8 <SDMMC_CmdSelDesel+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8003c80:	2304      	movs	r3, #4
 8003c82:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003c84:	e7b8      	b.n	8003bf8 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8003c86:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c8a:	e7b5      	b.n	8003bf8 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8003c8c:	2340      	movs	r3, #64	; 0x40
 8003c8e:	e7b3      	b.n	8003bf8 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8003c90:	2380      	movs	r3, #128	; 0x80
 8003c92:	e7b1      	b.n	8003bf8 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8003c94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c98:	e7ae      	b.n	8003bf8 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8003c9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c9e:	e7ab      	b.n	8003bf8 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8003ca0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ca4:	e7a8      	b.n	8003bf8 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8003ca6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003caa:	e7a5      	b.n	8003bf8 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8003cac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003cb0:	e7a2      	b.n	8003bf8 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8003cb2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003cb6:	e79f      	b.n	8003bf8 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8003cb8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003cbc:	e79c      	b.n	8003bf8 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CC_ERR;
 8003cbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cc2:	e799      	b.n	8003bf8 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8003cc4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003cc8:	e796      	b.n	8003bf8 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8003cca:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003cce:	e793      	b.n	8003bf8 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8003cd0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003cd4:	e790      	b.n	8003bf8 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8003cd6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003cda:	e78d      	b.n	8003bf8 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 8003cdc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003ce0:	e78a      	b.n	8003bf8 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8003ce2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003ce6:	e787      	b.n	8003bf8 <SDMMC_CmdSelDesel+0x40>
 8003ce8:	20000000 	.word	0x20000000
 8003cec:	10624dd3 	.word	0x10624dd3
 8003cf0:	fffff000 	.word	0xfffff000
 8003cf4:	fdffe008 	.word	0xfdffe008

08003cf8 <SDMMC_CmdGoIdleState>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003cf8:	4b11      	ldr	r3, [pc, #68]	; (8003d40 <SDMMC_CmdGoIdleState+0x48>)
{
 8003cfa:	4601      	mov	r1, r0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003cfc:	4a11      	ldr	r2, [pc, #68]	; (8003d44 <SDMMC_CmdGoIdleState+0x4c>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003cfe:	6818      	ldr	r0, [r3, #0]
 8003d00:	f241 3388 	movw	r3, #5000	; 0x1388
{
 8003d04:	b430      	push	{r4, r5}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003d06:	4c10      	ldr	r4, [pc, #64]	; (8003d48 <SDMMC_CmdGoIdleState+0x50>)
  SDMMCx->ARG = Command->Argument;
 8003d08:	2500      	movs	r5, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003d0a:	fba4 4000 	umull	r4, r0, r4, r0
  SDMMCx->ARG = Command->Argument;
 8003d0e:	608d      	str	r5, [r1, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003d10:	68cc      	ldr	r4, [r1, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003d12:	0a40      	lsrs	r0, r0, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003d14:	4022      	ands	r2, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003d16:	fb03 f300 	mul.w	r3, r3, r0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003d1a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d1e:	60ca      	str	r2, [r1, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003d20:	e002      	b.n	8003d28 <SDMMC_CmdGoIdleState+0x30>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8003d22:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8003d24:	0612      	lsls	r2, r2, #24
 8003d26:	d405      	bmi.n	8003d34 <SDMMC_CmdGoIdleState+0x3c>
    if (count-- == 0U)
 8003d28:	3b01      	subs	r3, #1
 8003d2a:	d2fa      	bcs.n	8003d22 <SDMMC_CmdGoIdleState+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 8003d2c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8003d30:	bc30      	pop	{r4, r5}
 8003d32:	4770      	bx	lr
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8003d34:	23c5      	movs	r3, #197	; 0xc5
  return SDMMC_ERROR_NONE;
 8003d36:	2000      	movs	r0, #0
}
 8003d38:	bc30      	pop	{r4, r5}
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8003d3a:	638b      	str	r3, [r1, #56]	; 0x38
}
 8003d3c:	4770      	bx	lr
 8003d3e:	bf00      	nop
 8003d40:	20000000 	.word	0x20000000
 8003d44:	fffff000 	.word	0xfffff000
 8003d48:	10624dd3 	.word	0x10624dd3

08003d4c <SDMMC_CmdOperCond>:
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003d4c:	4a1b      	ldr	r2, [pc, #108]	; (8003dbc <SDMMC_CmdOperCond+0x70>)
{
 8003d4e:	4603      	mov	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003d50:	f241 3088 	movw	r0, #5000	; 0x1388
 8003d54:	6811      	ldr	r1, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003d56:	4a1a      	ldr	r2, [pc, #104]	; (8003dc0 <SDMMC_CmdOperCond+0x74>)
{
 8003d58:	b430      	push	{r4, r5}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003d5a:	4c1a      	ldr	r4, [pc, #104]	; (8003dc4 <SDMMC_CmdOperCond+0x78>)
  SDMMCx->ARG = Command->Argument;
 8003d5c:	f44f 75d5 	mov.w	r5, #426	; 0x1aa
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003d60:	fba4 4101 	umull	r4, r1, r4, r1
  SDMMCx->ARG = Command->Argument;
 8003d64:	609d      	str	r5, [r3, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003d66:	68dc      	ldr	r4, [r3, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003d68:	0a49      	lsrs	r1, r1, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003d6a:	4022      	ands	r2, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003d6c:	fb00 f101 	mul.w	r1, r0, r1
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003d70:	f442 6289 	orr.w	r2, r2, #1096	; 0x448
 8003d74:	60da      	str	r2, [r3, #12]
  
  do
  {
    if (count-- == 0U)
 8003d76:	b149      	cbz	r1, 8003d8c <SDMMC_CmdOperCond+0x40>
 8003d78:	1e48      	subs	r0, r1, #1
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
 8003d7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    if (count-- == 0U)
 8003d7c:	3801      	subs	r0, #1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8003d7e:	f012 0f45 	tst.w	r2, #69	; 0x45
 8003d82:	d001      	beq.n	8003d88 <SDMMC_CmdOperCond+0x3c>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8003d84:	0514      	lsls	r4, r2, #20
 8003d86:	d505      	bpl.n	8003d94 <SDMMC_CmdOperCond+0x48>
    if (count-- == 0U)
 8003d88:	1c45      	adds	r5, r0, #1
 8003d8a:	d1f6      	bne.n	8003d7a <SDMMC_CmdOperCond+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 8003d8c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8003d90:	bc30      	pop	{r4, r5}
 8003d92:	4770      	bx	lr
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8003d94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d96:	0751      	lsls	r1, r2, #29
 8003d98:	d40c      	bmi.n	8003db4 <SDMMC_CmdOperCond+0x68>
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8003d9a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003d9c:	f010 0001 	ands.w	r0, r0, #1
 8003da0:	d105      	bne.n	8003dae <SDMMC_CmdOperCond+0x62>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8003da2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003da4:	0652      	lsls	r2, r2, #25
 8003da6:	d5f3      	bpl.n	8003d90 <SDMMC_CmdOperCond+0x44>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8003da8:	2240      	movs	r2, #64	; 0x40
 8003daa:	639a      	str	r2, [r3, #56]	; 0x38
 8003dac:	e7f0      	b.n	8003d90 <SDMMC_CmdOperCond+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8003dae:	2201      	movs	r2, #1
 8003db0:	639a      	str	r2, [r3, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003db2:	e7ed      	b.n	8003d90 <SDMMC_CmdOperCond+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8003db4:	2004      	movs	r0, #4
 8003db6:	6398      	str	r0, [r3, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003db8:	e7ea      	b.n	8003d90 <SDMMC_CmdOperCond+0x44>
 8003dba:	bf00      	nop
 8003dbc:	20000000 	.word	0x20000000
 8003dc0:	fffff000 	.word	0xfffff000
 8003dc4:	10624dd3 	.word	0x10624dd3

08003dc8 <SDMMC_CmdAppCommand>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003dc8:	4b4b      	ldr	r3, [pc, #300]	; (8003ef8 <SDMMC_CmdAppCommand+0x130>)
 8003dca:	f241 3288 	movw	r2, #5000	; 0x1388
{
 8003dce:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003dd0:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003dd2:	f240 4477 	movw	r4, #1143	; 0x477
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003dd6:	4d49      	ldr	r5, [pc, #292]	; (8003efc <SDMMC_CmdAppCommand+0x134>)
  SDMMCx->ARG = Command->Argument;
 8003dd8:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003dda:	fba5 5303 	umull	r5, r3, r5, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003dde:	4948      	ldr	r1, [pc, #288]	; (8003f00 <SDMMC_CmdAppCommand+0x138>)
 8003de0:	68c5      	ldr	r5, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003de2:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003de4:	4029      	ands	r1, r5
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003de6:	fb02 f303 	mul.w	r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003dea:	430c      	orrs	r4, r1
 8003dec:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 8003dee:	b14b      	cbz	r3, 8003e04 <SDMMC_CmdAppCommand+0x3c>
 8003df0:	1e5a      	subs	r2, r3, #1
    sta_reg = SDMMCx->STA;
 8003df2:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (count-- == 0U)
 8003df4:	3a01      	subs	r2, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8003df6:	f013 0f45 	tst.w	r3, #69	; 0x45
 8003dfa:	d001      	beq.n	8003e00 <SDMMC_CmdAppCommand+0x38>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8003dfc:	0519      	lsls	r1, r3, #20
 8003dfe:	d506      	bpl.n	8003e0e <SDMMC_CmdAppCommand+0x46>
    if (count-- == 0U)
 8003e00:	1c54      	adds	r4, r2, #1
 8003e02:	d1f6      	bne.n	8003df2 <SDMMC_CmdAppCommand+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 8003e04:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	bc30      	pop	{r4, r5}
 8003e0c:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8003e0e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003e10:	075b      	lsls	r3, r3, #29
 8003e12:	d43d      	bmi.n	8003e90 <SDMMC_CmdAppCommand+0xc8>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8003e14:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003e16:	f013 0301 	ands.w	r3, r3, #1
 8003e1a:	d134      	bne.n	8003e86 <SDMMC_CmdAppCommand+0xbe>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8003e1c:	23c5      	movs	r3, #197	; 0xc5
 8003e1e:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8003e20:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8003e22:	b2db      	uxtb	r3, r3
 8003e24:	2b37      	cmp	r3, #55	; 0x37
 8003e26:	d131      	bne.n	8003e8c <SDMMC_CmdAppCommand+0xc4>
  return (*(__IO uint32_t *) tmp);
 8003e28:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8003e2a:	4b36      	ldr	r3, [pc, #216]	; (8003f04 <SDMMC_CmdAppCommand+0x13c>)
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d0ea      	beq.n	8003e08 <SDMMC_CmdAppCommand+0x40>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8003e32:	2a00      	cmp	r2, #0
 8003e34:	db2f      	blt.n	8003e96 <SDMMC_CmdAppCommand+0xce>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8003e36:	0055      	lsls	r5, r2, #1
 8003e38:	d430      	bmi.n	8003e9c <SDMMC_CmdAppCommand+0xd4>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8003e3a:	0094      	lsls	r4, r2, #2
 8003e3c:	d430      	bmi.n	8003ea0 <SDMMC_CmdAppCommand+0xd8>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8003e3e:	00d0      	lsls	r0, r2, #3
 8003e40:	d430      	bmi.n	8003ea4 <SDMMC_CmdAppCommand+0xdc>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8003e42:	0111      	lsls	r1, r2, #4
 8003e44:	d431      	bmi.n	8003eaa <SDMMC_CmdAppCommand+0xe2>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8003e46:	0155      	lsls	r5, r2, #5
 8003e48:	d432      	bmi.n	8003eb0 <SDMMC_CmdAppCommand+0xe8>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8003e4a:	01d4      	lsls	r4, r2, #7
 8003e4c:	d433      	bmi.n	8003eb6 <SDMMC_CmdAppCommand+0xee>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8003e4e:	0210      	lsls	r0, r2, #8
 8003e50:	d434      	bmi.n	8003ebc <SDMMC_CmdAppCommand+0xf4>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8003e52:	0251      	lsls	r1, r2, #9
 8003e54:	d435      	bmi.n	8003ec2 <SDMMC_CmdAppCommand+0xfa>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8003e56:	0295      	lsls	r5, r2, #10
 8003e58:	d436      	bmi.n	8003ec8 <SDMMC_CmdAppCommand+0x100>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8003e5a:	02d4      	lsls	r4, r2, #11
 8003e5c:	d437      	bmi.n	8003ece <SDMMC_CmdAppCommand+0x106>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8003e5e:	0350      	lsls	r0, r2, #13
 8003e60:	d438      	bmi.n	8003ed4 <SDMMC_CmdAppCommand+0x10c>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8003e62:	0391      	lsls	r1, r2, #14
 8003e64:	d439      	bmi.n	8003eda <SDMMC_CmdAppCommand+0x112>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8003e66:	03d5      	lsls	r5, r2, #15
 8003e68:	d43a      	bmi.n	8003ee0 <SDMMC_CmdAppCommand+0x118>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8003e6a:	0414      	lsls	r4, r2, #16
 8003e6c:	d43b      	bmi.n	8003ee6 <SDMMC_CmdAppCommand+0x11e>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8003e6e:	0450      	lsls	r0, r2, #17
 8003e70:	d43f      	bmi.n	8003ef2 <SDMMC_CmdAppCommand+0x12a>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8003e72:	0491      	lsls	r1, r2, #18
 8003e74:	d43a      	bmi.n	8003eec <SDMMC_CmdAppCommand+0x124>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8003e76:	f012 0f08 	tst.w	r2, #8
 8003e7a:	bf14      	ite	ne
 8003e7c:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 8003e80:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8003e84:	e7c0      	b.n	8003e08 <SDMMC_CmdAppCommand+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8003e86:	2201      	movs	r2, #1
 8003e88:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003e8a:	e7bd      	b.n	8003e08 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e7bb      	b.n	8003e08 <SDMMC_CmdAppCommand+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8003e90:	2304      	movs	r3, #4
 8003e92:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003e94:	e7b8      	b.n	8003e08 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8003e96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e9a:	e7b5      	b.n	8003e08 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8003e9c:	2340      	movs	r3, #64	; 0x40
 8003e9e:	e7b3      	b.n	8003e08 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8003ea0:	2380      	movs	r3, #128	; 0x80
 8003ea2:	e7b1      	b.n	8003e08 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8003ea4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ea8:	e7ae      	b.n	8003e08 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8003eaa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003eae:	e7ab      	b.n	8003e08 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8003eb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003eb4:	e7a8      	b.n	8003e08 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8003eb6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003eba:	e7a5      	b.n	8003e08 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8003ebc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ec0:	e7a2      	b.n	8003e08 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8003ec2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003ec6:	e79f      	b.n	8003e08 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8003ec8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003ecc:	e79c      	b.n	8003e08 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CC_ERR;
 8003ece:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ed2:	e799      	b.n	8003e08 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8003ed4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ed8:	e796      	b.n	8003e08 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8003eda:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003ede:	e793      	b.n	8003e08 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8003ee0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003ee4:	e790      	b.n	8003e08 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8003ee6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003eea:	e78d      	b.n	8003e08 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 8003eec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003ef0:	e78a      	b.n	8003e08 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8003ef2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003ef6:	e787      	b.n	8003e08 <SDMMC_CmdAppCommand+0x40>
 8003ef8:	20000000 	.word	0x20000000
 8003efc:	10624dd3 	.word	0x10624dd3
 8003f00:	fffff000 	.word	0xfffff000
 8003f04:	fdffe008 	.word	0xfdffe008

08003f08 <SDMMC_CmdAppOperCommand>:
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8003f08:	4a18      	ldr	r2, [pc, #96]	; (8003f6c <SDMMC_CmdAppOperCommand+0x64>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003f0a:	4b19      	ldr	r3, [pc, #100]	; (8003f70 <SDMMC_CmdAppOperCommand+0x68>)
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8003f0c:	430a      	orrs	r2, r1
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003f0e:	4919      	ldr	r1, [pc, #100]	; (8003f74 <SDMMC_CmdAppOperCommand+0x6c>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003f10:	681b      	ldr	r3, [r3, #0]
{
 8003f12:	b430      	push	{r4, r5}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003f14:	4d18      	ldr	r5, [pc, #96]	; (8003f78 <SDMMC_CmdAppOperCommand+0x70>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003f16:	f240 4469 	movw	r4, #1129	; 0x469
  SDMMCx->ARG = Command->Argument;
 8003f1a:	6082      	str	r2, [r0, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003f1c:	fba5 2303 	umull	r2, r3, r5, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003f20:	68c5      	ldr	r5, [r0, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003f22:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f26:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003f28:	4029      	ands	r1, r5
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003f2a:	fb02 f303 	mul.w	r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003f2e:	430c      	orrs	r4, r1
 8003f30:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 8003f32:	b14b      	cbz	r3, 8003f48 <SDMMC_CmdAppOperCommand+0x40>
 8003f34:	1e5a      	subs	r2, r3, #1
    sta_reg = SDMMCx->STA;
 8003f36:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (count-- == 0U)
 8003f38:	3a01      	subs	r2, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8003f3a:	f013 0f45 	tst.w	r3, #69	; 0x45
 8003f3e:	d001      	beq.n	8003f44 <SDMMC_CmdAppOperCommand+0x3c>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8003f40:	051b      	lsls	r3, r3, #20
 8003f42:	d506      	bpl.n	8003f52 <SDMMC_CmdAppOperCommand+0x4a>
    if (count-- == 0U)
 8003f44:	1c51      	adds	r1, r2, #1
 8003f46:	d1f6      	bne.n	8003f36 <SDMMC_CmdAppOperCommand+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 8003f48:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	bc30      	pop	{r4, r5}
 8003f50:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8003f52:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003f54:	f013 0304 	ands.w	r3, r3, #4
 8003f58:	d104      	bne.n	8003f64 <SDMMC_CmdAppOperCommand+0x5c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8003f5a:	22c5      	movs	r2, #197	; 0xc5
}
 8003f5c:	bc30      	pop	{r4, r5}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8003f5e:	6382      	str	r2, [r0, #56]	; 0x38
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8003f64:	2304      	movs	r3, #4
 8003f66:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003f68:	e7f0      	b.n	8003f4c <SDMMC_CmdAppOperCommand+0x44>
 8003f6a:	bf00      	nop
 8003f6c:	80100000 	.word	0x80100000
 8003f70:	20000000 	.word	0x20000000
 8003f74:	fffff000 	.word	0xfffff000
 8003f78:	10624dd3 	.word	0x10624dd3

08003f7c <SDMMC_CmdBusWidth>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003f7c:	4b4b      	ldr	r3, [pc, #300]	; (80040ac <SDMMC_CmdBusWidth+0x130>)
 8003f7e:	f241 3288 	movw	r2, #5000	; 0x1388
{
 8003f82:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003f84:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003f86:	f240 4446 	movw	r4, #1094	; 0x446
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003f8a:	4d49      	ldr	r5, [pc, #292]	; (80040b0 <SDMMC_CmdBusWidth+0x134>)
  SDMMCx->ARG = Command->Argument;
 8003f8c:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003f8e:	fba5 5303 	umull	r5, r3, r5, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003f92:	4948      	ldr	r1, [pc, #288]	; (80040b4 <SDMMC_CmdBusWidth+0x138>)
 8003f94:	68c5      	ldr	r5, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003f96:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003f98:	4029      	ands	r1, r5
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003f9a:	fb02 f303 	mul.w	r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003f9e:	430c      	orrs	r4, r1
 8003fa0:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 8003fa2:	b14b      	cbz	r3, 8003fb8 <SDMMC_CmdBusWidth+0x3c>
 8003fa4:	1e5a      	subs	r2, r3, #1
    sta_reg = SDMMCx->STA;
 8003fa6:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (count-- == 0U)
 8003fa8:	3a01      	subs	r2, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8003faa:	f013 0f45 	tst.w	r3, #69	; 0x45
 8003fae:	d001      	beq.n	8003fb4 <SDMMC_CmdBusWidth+0x38>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8003fb0:	0519      	lsls	r1, r3, #20
 8003fb2:	d506      	bpl.n	8003fc2 <SDMMC_CmdBusWidth+0x46>
    if (count-- == 0U)
 8003fb4:	1c54      	adds	r4, r2, #1
 8003fb6:	d1f6      	bne.n	8003fa6 <SDMMC_CmdBusWidth+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 8003fb8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	bc30      	pop	{r4, r5}
 8003fc0:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8003fc2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003fc4:	075b      	lsls	r3, r3, #29
 8003fc6:	d43d      	bmi.n	8004044 <SDMMC_CmdBusWidth+0xc8>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8003fc8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003fca:	f013 0301 	ands.w	r3, r3, #1
 8003fce:	d134      	bne.n	800403a <SDMMC_CmdBusWidth+0xbe>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8003fd0:	23c5      	movs	r3, #197	; 0xc5
 8003fd2:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8003fd4:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	2b06      	cmp	r3, #6
 8003fda:	d131      	bne.n	8004040 <SDMMC_CmdBusWidth+0xc4>
  return (*(__IO uint32_t *) tmp);
 8003fdc:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8003fde:	4b36      	ldr	r3, [pc, #216]	; (80040b8 <SDMMC_CmdBusWidth+0x13c>)
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d0ea      	beq.n	8003fbc <SDMMC_CmdBusWidth+0x40>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8003fe6:	2a00      	cmp	r2, #0
 8003fe8:	db2f      	blt.n	800404a <SDMMC_CmdBusWidth+0xce>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8003fea:	0055      	lsls	r5, r2, #1
 8003fec:	d430      	bmi.n	8004050 <SDMMC_CmdBusWidth+0xd4>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8003fee:	0094      	lsls	r4, r2, #2
 8003ff0:	d430      	bmi.n	8004054 <SDMMC_CmdBusWidth+0xd8>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8003ff2:	00d0      	lsls	r0, r2, #3
 8003ff4:	d430      	bmi.n	8004058 <SDMMC_CmdBusWidth+0xdc>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8003ff6:	0111      	lsls	r1, r2, #4
 8003ff8:	d431      	bmi.n	800405e <SDMMC_CmdBusWidth+0xe2>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8003ffa:	0155      	lsls	r5, r2, #5
 8003ffc:	d432      	bmi.n	8004064 <SDMMC_CmdBusWidth+0xe8>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8003ffe:	01d4      	lsls	r4, r2, #7
 8004000:	d433      	bmi.n	800406a <SDMMC_CmdBusWidth+0xee>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8004002:	0210      	lsls	r0, r2, #8
 8004004:	d434      	bmi.n	8004070 <SDMMC_CmdBusWidth+0xf4>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8004006:	0251      	lsls	r1, r2, #9
 8004008:	d435      	bmi.n	8004076 <SDMMC_CmdBusWidth+0xfa>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800400a:	0295      	lsls	r5, r2, #10
 800400c:	d436      	bmi.n	800407c <SDMMC_CmdBusWidth+0x100>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800400e:	02d4      	lsls	r4, r2, #11
 8004010:	d437      	bmi.n	8004082 <SDMMC_CmdBusWidth+0x106>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8004012:	0350      	lsls	r0, r2, #13
 8004014:	d438      	bmi.n	8004088 <SDMMC_CmdBusWidth+0x10c>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8004016:	0391      	lsls	r1, r2, #14
 8004018:	d439      	bmi.n	800408e <SDMMC_CmdBusWidth+0x112>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800401a:	03d5      	lsls	r5, r2, #15
 800401c:	d43a      	bmi.n	8004094 <SDMMC_CmdBusWidth+0x118>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800401e:	0414      	lsls	r4, r2, #16
 8004020:	d43b      	bmi.n	800409a <SDMMC_CmdBusWidth+0x11e>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8004022:	0450      	lsls	r0, r2, #17
 8004024:	d43f      	bmi.n	80040a6 <SDMMC_CmdBusWidth+0x12a>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8004026:	0491      	lsls	r1, r2, #18
 8004028:	d43a      	bmi.n	80040a0 <SDMMC_CmdBusWidth+0x124>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800402a:	f012 0f08 	tst.w	r2, #8
 800402e:	bf14      	ite	ne
 8004030:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 8004034:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8004038:	e7c0      	b.n	8003fbc <SDMMC_CmdBusWidth+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800403a:	2201      	movs	r2, #1
 800403c:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800403e:	e7bd      	b.n	8003fbc <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004040:	2301      	movs	r3, #1
 8004042:	e7bb      	b.n	8003fbc <SDMMC_CmdBusWidth+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8004044:	2304      	movs	r3, #4
 8004046:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004048:	e7b8      	b.n	8003fbc <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800404a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800404e:	e7b5      	b.n	8003fbc <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8004050:	2340      	movs	r3, #64	; 0x40
 8004052:	e7b3      	b.n	8003fbc <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8004054:	2380      	movs	r3, #128	; 0x80
 8004056:	e7b1      	b.n	8003fbc <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8004058:	f44f 7380 	mov.w	r3, #256	; 0x100
 800405c:	e7ae      	b.n	8003fbc <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800405e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004062:	e7ab      	b.n	8003fbc <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8004064:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004068:	e7a8      	b.n	8003fbc <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800406a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800406e:	e7a5      	b.n	8003fbc <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004070:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004074:	e7a2      	b.n	8003fbc <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004076:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800407a:	e79f      	b.n	8003fbc <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800407c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004080:	e79c      	b.n	8003fbc <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CC_ERR;
 8004082:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004086:	e799      	b.n	8003fbc <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8004088:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800408c:	e796      	b.n	8003fbc <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800408e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004092:	e793      	b.n	8003fbc <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8004094:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004098:	e790      	b.n	8003fbc <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800409a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800409e:	e78d      	b.n	8003fbc <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 80040a0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80040a4:	e78a      	b.n	8003fbc <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80040a6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80040aa:	e787      	b.n	8003fbc <SDMMC_CmdBusWidth+0x40>
 80040ac:	20000000 	.word	0x20000000
 80040b0:	10624dd3 	.word	0x10624dd3
 80040b4:	fffff000 	.word	0xfffff000
 80040b8:	fdffe008 	.word	0xfdffe008

080040bc <SDMMC_CmdSendSCR>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80040bc:	4b4c      	ldr	r3, [pc, #304]	; (80041f0 <SDMMC_CmdSendSCR+0x134>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80040be:	f240 4173 	movw	r1, #1139	; 0x473
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80040c2:	4a4c      	ldr	r2, [pc, #304]	; (80041f4 <SDMMC_CmdSendSCR+0x138>)
 80040c4:	681b      	ldr	r3, [r3, #0]
{
 80040c6:	b430      	push	{r4, r5}
  SDMMCx->ARG = Command->Argument;
 80040c8:	2500      	movs	r5, #0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80040ca:	fba2 2303 	umull	r2, r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80040ce:	4c4a      	ldr	r4, [pc, #296]	; (80041f8 <SDMMC_CmdSendSCR+0x13c>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80040d0:	f241 3288 	movw	r2, #5000	; 0x1388
  SDMMCx->ARG = Command->Argument;
 80040d4:	6085      	str	r5, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80040d6:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80040d8:	68c5      	ldr	r5, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80040da:	fb02 f303 	mul.w	r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80040de:	402c      	ands	r4, r5
 80040e0:	4321      	orrs	r1, r4
 80040e2:	60c1      	str	r1, [r0, #12]
    if (count-- == 0U)
 80040e4:	b14b      	cbz	r3, 80040fa <SDMMC_CmdSendSCR+0x3e>
 80040e6:	1e5a      	subs	r2, r3, #1
    sta_reg = SDMMCx->STA;
 80040e8:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (count-- == 0U)
 80040ea:	3a01      	subs	r2, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80040ec:	f013 0f45 	tst.w	r3, #69	; 0x45
 80040f0:	d001      	beq.n	80040f6 <SDMMC_CmdSendSCR+0x3a>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80040f2:	0519      	lsls	r1, r3, #20
 80040f4:	d506      	bpl.n	8004104 <SDMMC_CmdSendSCR+0x48>
    if (count-- == 0U)
 80040f6:	1c54      	adds	r4, r2, #1
 80040f8:	d1f6      	bne.n	80040e8 <SDMMC_CmdSendSCR+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 80040fa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 80040fe:	4618      	mov	r0, r3
 8004100:	bc30      	pop	{r4, r5}
 8004102:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8004104:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004106:	075b      	lsls	r3, r3, #29
 8004108:	d43d      	bmi.n	8004186 <SDMMC_CmdSendSCR+0xca>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800410a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800410c:	f013 0301 	ands.w	r3, r3, #1
 8004110:	d134      	bne.n	800417c <SDMMC_CmdSendSCR+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8004112:	23c5      	movs	r3, #197	; 0xc5
 8004114:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8004116:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8004118:	b2db      	uxtb	r3, r3
 800411a:	2b33      	cmp	r3, #51	; 0x33
 800411c:	d131      	bne.n	8004182 <SDMMC_CmdSendSCR+0xc6>
  return (*(__IO uint32_t *) tmp);
 800411e:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8004120:	4b36      	ldr	r3, [pc, #216]	; (80041fc <SDMMC_CmdSendSCR+0x140>)
 8004122:	4013      	ands	r3, r2
 8004124:	2b00      	cmp	r3, #0
 8004126:	d0ea      	beq.n	80040fe <SDMMC_CmdSendSCR+0x42>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8004128:	2a00      	cmp	r2, #0
 800412a:	db2f      	blt.n	800418c <SDMMC_CmdSendSCR+0xd0>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800412c:	0055      	lsls	r5, r2, #1
 800412e:	d430      	bmi.n	8004192 <SDMMC_CmdSendSCR+0xd6>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8004130:	0094      	lsls	r4, r2, #2
 8004132:	d430      	bmi.n	8004196 <SDMMC_CmdSendSCR+0xda>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8004134:	00d0      	lsls	r0, r2, #3
 8004136:	d430      	bmi.n	800419a <SDMMC_CmdSendSCR+0xde>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8004138:	0111      	lsls	r1, r2, #4
 800413a:	d431      	bmi.n	80041a0 <SDMMC_CmdSendSCR+0xe4>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800413c:	0155      	lsls	r5, r2, #5
 800413e:	d432      	bmi.n	80041a6 <SDMMC_CmdSendSCR+0xea>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8004140:	01d4      	lsls	r4, r2, #7
 8004142:	d433      	bmi.n	80041ac <SDMMC_CmdSendSCR+0xf0>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8004144:	0210      	lsls	r0, r2, #8
 8004146:	d434      	bmi.n	80041b2 <SDMMC_CmdSendSCR+0xf6>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8004148:	0251      	lsls	r1, r2, #9
 800414a:	d435      	bmi.n	80041b8 <SDMMC_CmdSendSCR+0xfc>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800414c:	0295      	lsls	r5, r2, #10
 800414e:	d436      	bmi.n	80041be <SDMMC_CmdSendSCR+0x102>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8004150:	02d4      	lsls	r4, r2, #11
 8004152:	d437      	bmi.n	80041c4 <SDMMC_CmdSendSCR+0x108>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8004154:	0350      	lsls	r0, r2, #13
 8004156:	d438      	bmi.n	80041ca <SDMMC_CmdSendSCR+0x10e>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8004158:	0391      	lsls	r1, r2, #14
 800415a:	d439      	bmi.n	80041d0 <SDMMC_CmdSendSCR+0x114>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800415c:	03d5      	lsls	r5, r2, #15
 800415e:	d43a      	bmi.n	80041d6 <SDMMC_CmdSendSCR+0x11a>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8004160:	0414      	lsls	r4, r2, #16
 8004162:	d43b      	bmi.n	80041dc <SDMMC_CmdSendSCR+0x120>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8004164:	0450      	lsls	r0, r2, #17
 8004166:	d43f      	bmi.n	80041e8 <SDMMC_CmdSendSCR+0x12c>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8004168:	0491      	lsls	r1, r2, #18
 800416a:	d43a      	bmi.n	80041e2 <SDMMC_CmdSendSCR+0x126>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800416c:	f012 0f08 	tst.w	r2, #8
 8004170:	bf14      	ite	ne
 8004172:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 8004176:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 800417a:	e7c0      	b.n	80040fe <SDMMC_CmdSendSCR+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800417c:	2201      	movs	r2, #1
 800417e:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004180:	e7bd      	b.n	80040fe <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004182:	2301      	movs	r3, #1
 8004184:	e7bb      	b.n	80040fe <SDMMC_CmdSendSCR+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8004186:	2304      	movs	r3, #4
 8004188:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800418a:	e7b8      	b.n	80040fe <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800418c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004190:	e7b5      	b.n	80040fe <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8004192:	2340      	movs	r3, #64	; 0x40
 8004194:	e7b3      	b.n	80040fe <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8004196:	2380      	movs	r3, #128	; 0x80
 8004198:	e7b1      	b.n	80040fe <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800419a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800419e:	e7ae      	b.n	80040fe <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80041a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80041a4:	e7ab      	b.n	80040fe <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80041a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80041aa:	e7a8      	b.n	80040fe <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80041ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80041b0:	e7a5      	b.n	80040fe <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_COM_CRC_FAILED;
 80041b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80041b6:	e7a2      	b.n	80040fe <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ILLEGAL_CMD;
 80041b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80041bc:	e79f      	b.n	80040fe <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80041be:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80041c2:	e79c      	b.n	80040fe <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CC_ERR;
 80041c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041c8:	e799      	b.n	80040fe <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80041ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80041ce:	e796      	b.n	80040fe <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80041d0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80041d4:	e793      	b.n	80040fe <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80041d6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80041da:	e790      	b.n	80040fe <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80041dc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80041e0:	e78d      	b.n	80040fe <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ERASE_RESET;
 80041e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80041e6:	e78a      	b.n	80040fe <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80041e8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80041ec:	e787      	b.n	80040fe <SDMMC_CmdSendSCR+0x42>
 80041ee:	bf00      	nop
 80041f0:	20000000 	.word	0x20000000
 80041f4:	10624dd3 	.word	0x10624dd3
 80041f8:	fffff000 	.word	0xfffff000
 80041fc:	fdffe008 	.word	0xfdffe008

08004200 <SDMMC_CmdSendCID>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004200:	4a19      	ldr	r2, [pc, #100]	; (8004268 <SDMMC_CmdSendCID+0x68>)
{
 8004202:	4603      	mov	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004204:	4919      	ldr	r1, [pc, #100]	; (800426c <SDMMC_CmdSendCID+0x6c>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004206:	f240 40c2 	movw	r0, #1218	; 0x4c2
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800420a:	6812      	ldr	r2, [r2, #0]
{
 800420c:	b430      	push	{r4, r5}
  SDMMCx->ARG = Command->Argument;
 800420e:	2500      	movs	r5, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004210:	fba1 1202 	umull	r1, r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004214:	4c16      	ldr	r4, [pc, #88]	; (8004270 <SDMMC_CmdSendCID+0x70>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004216:	f241 3188 	movw	r1, #5000	; 0x1388
  SDMMCx->ARG = Command->Argument;
 800421a:	609d      	str	r5, [r3, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800421c:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800421e:	68dd      	ldr	r5, [r3, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004220:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004224:	402c      	ands	r4, r5
 8004226:	4320      	orrs	r0, r4
 8004228:	60d8      	str	r0, [r3, #12]
    if (count-- == 0U)
 800422a:	b14a      	cbz	r2, 8004240 <SDMMC_CmdSendCID+0x40>
 800422c:	1e51      	subs	r1, r2, #1
    sta_reg = SDMMCx->STA;
 800422e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    if (count-- == 0U)
 8004230:	3901      	subs	r1, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8004232:	f012 0f45 	tst.w	r2, #69	; 0x45
 8004236:	d001      	beq.n	800423c <SDMMC_CmdSendCID+0x3c>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004238:	0510      	lsls	r0, r2, #20
 800423a:	d505      	bpl.n	8004248 <SDMMC_CmdSendCID+0x48>
    if (count-- == 0U)
 800423c:	1c4c      	adds	r4, r1, #1
 800423e:	d1f6      	bne.n	800422e <SDMMC_CmdSendCID+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 8004240:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8004244:	bc30      	pop	{r4, r5}
 8004246:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8004248:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800424a:	0752      	lsls	r2, r2, #29
 800424c:	d408      	bmi.n	8004260 <SDMMC_CmdSendCID+0x60>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800424e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004250:	f010 0001 	ands.w	r0, r0, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8004254:	bf14      	ite	ne
 8004256:	2201      	movne	r2, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8004258:	22c5      	moveq	r2, #197	; 0xc5
}
 800425a:	bc30      	pop	{r4, r5}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800425c:	639a      	str	r2, [r3, #56]	; 0x38
}
 800425e:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8004260:	2004      	movs	r0, #4
 8004262:	6398      	str	r0, [r3, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004264:	e7ee      	b.n	8004244 <SDMMC_CmdSendCID+0x44>
 8004266:	bf00      	nop
 8004268:	20000000 	.word	0x20000000
 800426c:	10624dd3 	.word	0x10624dd3
 8004270:	fffff000 	.word	0xfffff000

08004274 <SDMMC_CmdSendCSD>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004274:	4a18      	ldr	r2, [pc, #96]	; (80042d8 <SDMMC_CmdSendCSD+0x64>)
{
 8004276:	4603      	mov	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004278:	f241 3088 	movw	r0, #5000	; 0x1388
 800427c:	6812      	ldr	r2, [r2, #0]
{
 800427e:	b430      	push	{r4, r5}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004280:	4d16      	ldr	r5, [pc, #88]	; (80042dc <SDMMC_CmdSendCSD+0x68>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004282:	f240 44c9 	movw	r4, #1225	; 0x4c9
  SDMMCx->ARG = Command->Argument;
 8004286:	6099      	str	r1, [r3, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004288:	fba5 5202 	umull	r5, r2, r5, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800428c:	4914      	ldr	r1, [pc, #80]	; (80042e0 <SDMMC_CmdSendCSD+0x6c>)
 800428e:	68dd      	ldr	r5, [r3, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004290:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004292:	4029      	ands	r1, r5
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004294:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004298:	430c      	orrs	r4, r1
 800429a:	60dc      	str	r4, [r3, #12]
    if (count-- == 0U)
 800429c:	b14a      	cbz	r2, 80042b2 <SDMMC_CmdSendCSD+0x3e>
 800429e:	1e51      	subs	r1, r2, #1
    sta_reg = SDMMCx->STA;
 80042a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    if (count-- == 0U)
 80042a2:	3901      	subs	r1, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80042a4:	f012 0f45 	tst.w	r2, #69	; 0x45
 80042a8:	d001      	beq.n	80042ae <SDMMC_CmdSendCSD+0x3a>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80042aa:	0510      	lsls	r0, r2, #20
 80042ac:	d505      	bpl.n	80042ba <SDMMC_CmdSendCSD+0x46>
    if (count-- == 0U)
 80042ae:	1c4c      	adds	r4, r1, #1
 80042b0:	d1f6      	bne.n	80042a0 <SDMMC_CmdSendCSD+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 80042b2:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80042b6:	bc30      	pop	{r4, r5}
 80042b8:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80042ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042bc:	0752      	lsls	r2, r2, #29
 80042be:	d408      	bmi.n	80042d2 <SDMMC_CmdSendCSD+0x5e>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80042c0:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80042c2:	f010 0001 	ands.w	r0, r0, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80042c6:	bf14      	ite	ne
 80042c8:	2201      	movne	r2, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80042ca:	22c5      	moveq	r2, #197	; 0xc5
}
 80042cc:	bc30      	pop	{r4, r5}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80042ce:	639a      	str	r2, [r3, #56]	; 0x38
}
 80042d0:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80042d2:	2004      	movs	r0, #4
 80042d4:	6398      	str	r0, [r3, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80042d6:	e7ee      	b.n	80042b6 <SDMMC_CmdSendCSD+0x42>
 80042d8:	20000000 	.word	0x20000000
 80042dc:	10624dd3 	.word	0x10624dd3
 80042e0:	fffff000 	.word	0xfffff000

080042e4 <SDMMC_CmdSetRelAdd>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80042e4:	4b26      	ldr	r3, [pc, #152]	; (8004380 <SDMMC_CmdSetRelAdd+0x9c>)
 80042e6:	4a27      	ldr	r2, [pc, #156]	; (8004384 <SDMMC_CmdSetRelAdd+0xa0>)
 80042e8:	681b      	ldr	r3, [r3, #0]
{
 80042ea:	b430      	push	{r4, r5}
  SDMMCx->ARG = Command->Argument;
 80042ec:	2400      	movs	r4, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80042ee:	fba2 2303 	umull	r2, r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80042f2:	4d25      	ldr	r5, [pc, #148]	; (8004388 <SDMMC_CmdSetRelAdd+0xa4>)
  SDMMCx->ARG = Command->Argument;
 80042f4:	6084      	str	r4, [r0, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80042f6:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80042f8:	68c2      	ldr	r2, [r0, #12]
 80042fa:	f240 4443 	movw	r4, #1091	; 0x443
 80042fe:	4015      	ands	r5, r2
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004300:	f241 3288 	movw	r2, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004304:	432c      	orrs	r4, r5
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004306:	fb02 f303 	mul.w	r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800430a:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 800430c:	b14b      	cbz	r3, 8004322 <SDMMC_CmdSetRelAdd+0x3e>
 800430e:	1e5a      	subs	r2, r3, #1
    sta_reg = SDMMCx->STA;
 8004310:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (count-- == 0U)
 8004312:	3a01      	subs	r2, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8004314:	f013 0f45 	tst.w	r3, #69	; 0x45
 8004318:	d001      	beq.n	800431e <SDMMC_CmdSetRelAdd+0x3a>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800431a:	051d      	lsls	r5, r3, #20
 800431c:	d506      	bpl.n	800432c <SDMMC_CmdSetRelAdd+0x48>
    if (count-- == 0U)
 800431e:	1c53      	adds	r3, r2, #1
 8004320:	d1f6      	bne.n	8004310 <SDMMC_CmdSetRelAdd+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 8004322:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8004326:	4618      	mov	r0, r3
 8004328:	bc30      	pop	{r4, r5}
 800432a:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800432c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800432e:	075c      	lsls	r4, r3, #29
 8004330:	d41c      	bmi.n	800436c <SDMMC_CmdSetRelAdd+0x88>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8004332:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004334:	f013 0301 	ands.w	r3, r3, #1
 8004338:	d113      	bne.n	8004362 <SDMMC_CmdSetRelAdd+0x7e>
  return (uint8_t)(SDMMCx->RESPCMD);
 800433a:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800433c:	b2db      	uxtb	r3, r3
 800433e:	2b03      	cmp	r3, #3
 8004340:	d112      	bne.n	8004368 <SDMMC_CmdSetRelAdd+0x84>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8004342:	23c5      	movs	r3, #197	; 0xc5
 8004344:	6383      	str	r3, [r0, #56]	; 0x38
  return (*(__IO uint32_t *) tmp);
 8004346:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8004348:	f412 4360 	ands.w	r3, r2, #57344	; 0xe000
 800434c:	d014      	beq.n	8004378 <SDMMC_CmdSetRelAdd+0x94>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800434e:	0451      	lsls	r1, r2, #17
 8004350:	d40f      	bmi.n	8004372 <SDMMC_CmdSetRelAdd+0x8e>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004352:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8004356:	bf14      	ite	ne
 8004358:	f44f 5380 	movne.w	r3, #4096	; 0x1000
 800435c:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8004360:	e7e1      	b.n	8004326 <SDMMC_CmdSetRelAdd+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8004362:	2201      	movs	r2, #1
 8004364:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004366:	e7de      	b.n	8004326 <SDMMC_CmdSetRelAdd+0x42>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004368:	2301      	movs	r3, #1
 800436a:	e7dc      	b.n	8004326 <SDMMC_CmdSetRelAdd+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800436c:	2304      	movs	r3, #4
 800436e:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004370:	e7d9      	b.n	8004326 <SDMMC_CmdSetRelAdd+0x42>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004372:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004376:	e7d6      	b.n	8004326 <SDMMC_CmdSetRelAdd+0x42>
    *pRCA = (uint16_t) (response_r1 >> 16);
 8004378:	0c12      	lsrs	r2, r2, #16
 800437a:	800a      	strh	r2, [r1, #0]
    return SDMMC_ERROR_NONE;
 800437c:	e7d3      	b.n	8004326 <SDMMC_CmdSetRelAdd+0x42>
 800437e:	bf00      	nop
 8004380:	20000000 	.word	0x20000000
 8004384:	10624dd3 	.word	0x10624dd3
 8004388:	fffff000 	.word	0xfffff000

0800438c <SDMMC_CmdSendStatus>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800438c:	4b4b      	ldr	r3, [pc, #300]	; (80044bc <SDMMC_CmdSendStatus+0x130>)
 800438e:	f241 3288 	movw	r2, #5000	; 0x1388
{
 8004392:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8004394:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004396:	f240 444d 	movw	r4, #1101	; 0x44d
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800439a:	4d49      	ldr	r5, [pc, #292]	; (80044c0 <SDMMC_CmdSendStatus+0x134>)
  SDMMCx->ARG = Command->Argument;
 800439c:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800439e:	fba5 5303 	umull	r5, r3, r5, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80043a2:	4948      	ldr	r1, [pc, #288]	; (80044c4 <SDMMC_CmdSendStatus+0x138>)
 80043a4:	68c5      	ldr	r5, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80043a6:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80043a8:	4029      	ands	r1, r5
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80043aa:	fb02 f303 	mul.w	r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80043ae:	430c      	orrs	r4, r1
 80043b0:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 80043b2:	b14b      	cbz	r3, 80043c8 <SDMMC_CmdSendStatus+0x3c>
 80043b4:	1e5a      	subs	r2, r3, #1
    sta_reg = SDMMCx->STA;
 80043b6:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (count-- == 0U)
 80043b8:	3a01      	subs	r2, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80043ba:	f013 0f45 	tst.w	r3, #69	; 0x45
 80043be:	d001      	beq.n	80043c4 <SDMMC_CmdSendStatus+0x38>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80043c0:	0519      	lsls	r1, r3, #20
 80043c2:	d506      	bpl.n	80043d2 <SDMMC_CmdSendStatus+0x46>
    if (count-- == 0U)
 80043c4:	1c54      	adds	r4, r2, #1
 80043c6:	d1f6      	bne.n	80043b6 <SDMMC_CmdSendStatus+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 80043c8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	bc30      	pop	{r4, r5}
 80043d0:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80043d2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80043d4:	075b      	lsls	r3, r3, #29
 80043d6:	d43d      	bmi.n	8004454 <SDMMC_CmdSendStatus+0xc8>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80043d8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80043da:	f013 0301 	ands.w	r3, r3, #1
 80043de:	d134      	bne.n	800444a <SDMMC_CmdSendStatus+0xbe>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80043e0:	23c5      	movs	r3, #197	; 0xc5
 80043e2:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 80043e4:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80043e6:	b2db      	uxtb	r3, r3
 80043e8:	2b0d      	cmp	r3, #13
 80043ea:	d131      	bne.n	8004450 <SDMMC_CmdSendStatus+0xc4>
  return (*(__IO uint32_t *) tmp);
 80043ec:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80043ee:	4b36      	ldr	r3, [pc, #216]	; (80044c8 <SDMMC_CmdSendStatus+0x13c>)
 80043f0:	4013      	ands	r3, r2
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d0ea      	beq.n	80043cc <SDMMC_CmdSendStatus+0x40>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80043f6:	2a00      	cmp	r2, #0
 80043f8:	db2f      	blt.n	800445a <SDMMC_CmdSendStatus+0xce>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80043fa:	0055      	lsls	r5, r2, #1
 80043fc:	d430      	bmi.n	8004460 <SDMMC_CmdSendStatus+0xd4>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80043fe:	0094      	lsls	r4, r2, #2
 8004400:	d430      	bmi.n	8004464 <SDMMC_CmdSendStatus+0xd8>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8004402:	00d0      	lsls	r0, r2, #3
 8004404:	d430      	bmi.n	8004468 <SDMMC_CmdSendStatus+0xdc>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8004406:	0111      	lsls	r1, r2, #4
 8004408:	d431      	bmi.n	800446e <SDMMC_CmdSendStatus+0xe2>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800440a:	0155      	lsls	r5, r2, #5
 800440c:	d432      	bmi.n	8004474 <SDMMC_CmdSendStatus+0xe8>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800440e:	01d4      	lsls	r4, r2, #7
 8004410:	d433      	bmi.n	800447a <SDMMC_CmdSendStatus+0xee>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8004412:	0210      	lsls	r0, r2, #8
 8004414:	d434      	bmi.n	8004480 <SDMMC_CmdSendStatus+0xf4>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8004416:	0251      	lsls	r1, r2, #9
 8004418:	d435      	bmi.n	8004486 <SDMMC_CmdSendStatus+0xfa>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800441a:	0295      	lsls	r5, r2, #10
 800441c:	d436      	bmi.n	800448c <SDMMC_CmdSendStatus+0x100>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800441e:	02d4      	lsls	r4, r2, #11
 8004420:	d437      	bmi.n	8004492 <SDMMC_CmdSendStatus+0x106>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8004422:	0350      	lsls	r0, r2, #13
 8004424:	d438      	bmi.n	8004498 <SDMMC_CmdSendStatus+0x10c>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8004426:	0391      	lsls	r1, r2, #14
 8004428:	d439      	bmi.n	800449e <SDMMC_CmdSendStatus+0x112>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800442a:	03d5      	lsls	r5, r2, #15
 800442c:	d43a      	bmi.n	80044a4 <SDMMC_CmdSendStatus+0x118>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800442e:	0414      	lsls	r4, r2, #16
 8004430:	d43b      	bmi.n	80044aa <SDMMC_CmdSendStatus+0x11e>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8004432:	0450      	lsls	r0, r2, #17
 8004434:	d43f      	bmi.n	80044b6 <SDMMC_CmdSendStatus+0x12a>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8004436:	0491      	lsls	r1, r2, #18
 8004438:	d43a      	bmi.n	80044b0 <SDMMC_CmdSendStatus+0x124>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800443a:	f012 0f08 	tst.w	r2, #8
 800443e:	bf14      	ite	ne
 8004440:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 8004444:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8004448:	e7c0      	b.n	80043cc <SDMMC_CmdSendStatus+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800444a:	2201      	movs	r2, #1
 800444c:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800444e:	e7bd      	b.n	80043cc <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004450:	2301      	movs	r3, #1
 8004452:	e7bb      	b.n	80043cc <SDMMC_CmdSendStatus+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8004454:	2304      	movs	r3, #4
 8004456:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004458:	e7b8      	b.n	80043cc <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800445a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800445e:	e7b5      	b.n	80043cc <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8004460:	2340      	movs	r3, #64	; 0x40
 8004462:	e7b3      	b.n	80043cc <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8004464:	2380      	movs	r3, #128	; 0x80
 8004466:	e7b1      	b.n	80043cc <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8004468:	f44f 7380 	mov.w	r3, #256	; 0x100
 800446c:	e7ae      	b.n	80043cc <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800446e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004472:	e7ab      	b.n	80043cc <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8004474:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004478:	e7a8      	b.n	80043cc <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800447a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800447e:	e7a5      	b.n	80043cc <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004480:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004484:	e7a2      	b.n	80043cc <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004486:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800448a:	e79f      	b.n	80043cc <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800448c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004490:	e79c      	b.n	80043cc <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CC_ERR;
 8004492:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004496:	e799      	b.n	80043cc <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8004498:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800449c:	e796      	b.n	80043cc <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800449e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80044a2:	e793      	b.n	80043cc <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80044a4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80044a8:	e790      	b.n	80043cc <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80044aa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80044ae:	e78d      	b.n	80043cc <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 80044b0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80044b4:	e78a      	b.n	80043cc <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80044b6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80044ba:	e787      	b.n	80043cc <SDMMC_CmdSendStatus+0x40>
 80044bc:	20000000 	.word	0x20000000
 80044c0:	10624dd3 	.word	0x10624dd3
 80044c4:	fffff000 	.word	0xfffff000
 80044c8:	fdffe008 	.word	0xfdffe008

080044cc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80044cc:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80044ce:	4903      	ldr	r1, [pc, #12]	; (80044dc <MX_FATFS_Init+0x10>)
 80044d0:	4803      	ldr	r0, [pc, #12]	; (80044e0 <MX_FATFS_Init+0x14>)
 80044d2:	f004 feaf 	bl	8009234 <FATFS_LinkDriver>
 80044d6:	4b03      	ldr	r3, [pc, #12]	; (80044e4 <MX_FATFS_Init+0x18>)
 80044d8:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80044da:	bd08      	pop	{r3, pc}
 80044dc:	2000030c 	.word	0x2000030c
 80044e0:	0800962c 	.word	0x0800962c
 80044e4:	20000308 	.word	0x20000308

080044e8 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */
}
 80044e8:	2000      	movs	r0, #0
 80044ea:	4770      	bx	lr

080044ec <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80044ec:	b530      	push	{r4, r5, lr}
 80044ee:	460d      	mov	r5, r1
 80044f0:	b083      	sub	sp, #12
 80044f2:	4614      	mov	r4, r2
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 80044f4:	4601      	mov	r1, r0
 80044f6:	9300      	str	r3, [sp, #0]
 80044f8:	462a      	mov	r2, r5
 80044fa:	4623      	mov	r3, r4
 80044fc:	4803      	ldr	r0, [pc, #12]	; (800450c <BSP_SD_ReadBlocks+0x20>)
 80044fe:	f7fd ff97 	bl	8002430 <HAL_SD_ReadBlocks>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 8004502:	3800      	subs	r0, #0
 8004504:	bf18      	it	ne
 8004506:	2001      	movne	r0, #1
 8004508:	b003      	add	sp, #12
 800450a:	bd30      	pop	{r4, r5, pc}
 800450c:	20000124 	.word	0x20000124

08004510 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8004510:	b530      	push	{r4, r5, lr}
 8004512:	460d      	mov	r5, r1
 8004514:	b083      	sub	sp, #12
 8004516:	4614      	mov	r4, r2
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8004518:	4601      	mov	r1, r0
 800451a:	9300      	str	r3, [sp, #0]
 800451c:	462a      	mov	r2, r5
 800451e:	4623      	mov	r3, r4
 8004520:	4803      	ldr	r0, [pc, #12]	; (8004530 <BSP_SD_WriteBlocks+0x20>)
 8004522:	f7fe f8c7 	bl	80026b4 <HAL_SD_WriteBlocks>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 8004526:	3800      	subs	r0, #0
 8004528:	bf18      	it	ne
 800452a:	2001      	movne	r0, #1
 800452c:	b003      	add	sp, #12
 800452e:	bd30      	pop	{r4, r5, pc}
 8004530:	20000124 	.word	0x20000124

08004534 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8004534:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8004536:	4803      	ldr	r0, [pc, #12]	; (8004544 <BSP_SD_GetCardState+0x10>)
 8004538:	f7fe fc4a 	bl	8002dd0 <HAL_SD_GetCardState>
}
 800453c:	3804      	subs	r0, #4
 800453e:	bf18      	it	ne
 8004540:	2001      	movne	r0, #1
 8004542:	bd08      	pop	{r3, pc}
 8004544:	20000124 	.word	0x20000124

08004548 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8004548:	4601      	mov	r1, r0
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800454a:	4801      	ldr	r0, [pc, #4]	; (8004550 <BSP_SD_GetCardInfo+0x8>)
 800454c:	f7fe bb90 	b.w	8002c70 <HAL_SD_GetCardInfo>
 8004550:	20000124 	.word	0x20000124

08004554 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8004554:	b500      	push	{lr}
  __IO uint8_t status = SD_PRESENT;
 8004556:	2301      	movs	r3, #1
{
 8004558:	b083      	sub	sp, #12
  __IO uint8_t status = SD_PRESENT;
 800455a:	f88d 3007 	strb.w	r3, [sp, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800455e:	f000 f821 	bl	80045a4 <BSP_PlatformIsDetected>
 8004562:	b908      	cbnz	r0, 8004568 <BSP_SD_IsDetected+0x14>
  {
    status = SD_NOT_PRESENT;
 8004564:	f88d 0007 	strb.w	r0, [sp, #7]
  }

  return status;
 8004568:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 800456c:	b003      	add	sp, #12
 800456e:	f85d fb04 	ldr.w	pc, [sp], #4
 8004572:	bf00      	nop

08004574 <BSP_SD_Init>:
{
 8004574:	b508      	push	{r3, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8004576:	f7ff ffed 	bl	8004554 <BSP_SD_IsDetected>
 800457a:	2801      	cmp	r0, #1
 800457c:	d001      	beq.n	8004582 <BSP_SD_Init+0xe>
    return MSD_ERROR_SD_NOT_PRESENT;
 800457e:	2002      	movs	r0, #2
}
 8004580:	bd08      	pop	{r3, pc}
  sd_state = HAL_SD_Init(&hsd1);
 8004582:	4807      	ldr	r0, [pc, #28]	; (80045a0 <BSP_SD_Init+0x2c>)
 8004584:	f7fe fb56 	bl	8002c34 <HAL_SD_Init>
  if (sd_state == MSD_OK)
 8004588:	2800      	cmp	r0, #0
 800458a:	d1f9      	bne.n	8004580 <BSP_SD_Init+0xc>
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800458c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004590:	4803      	ldr	r0, [pc, #12]	; (80045a0 <BSP_SD_Init+0x2c>)
 8004592:	f7fe fb81 	bl	8002c98 <HAL_SD_ConfigWideBusOperation>
    return MSD_ERROR_SD_NOT_PRESENT;
 8004596:	3800      	subs	r0, #0
 8004598:	bf18      	it	ne
 800459a:	2001      	movne	r0, #1
}
 800459c:	bd08      	pop	{r3, pc}
 800459e:	bf00      	nop
 80045a0:	20000124 	.word	0x20000124

080045a4 <BSP_PlatformIsDetected>:
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
    uint8_t status = SD_PRESENT;
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80045a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80045a8:	4803      	ldr	r0, [pc, #12]	; (80045b8 <BSP_PlatformIsDetected+0x14>)
uint8_t	BSP_PlatformIsDetected(void) {
 80045aa:	b508      	push	{r3, lr}
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80045ac:	f7fd f8d2 	bl	8001754 <HAL_GPIO_ReadPin>
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
}
 80045b0:	fab0 f080 	clz	r0, r0
 80045b4:	0940      	lsrs	r0, r0, #5
 80045b6:	bd08      	pop	{r3, pc}
 80045b8:	40020800 	.word	0x40020800

080045bc <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80045bc:	b538      	push	{r3, r4, r5, lr}
Stat = STA_NOINIT;
 80045be:	4c0a      	ldr	r4, [pc, #40]	; (80045e8 <SD_initialize+0x2c>)
 80045c0:	2501      	movs	r5, #1
 80045c2:	7025      	strb	r5, [r4, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80045c4:	f7ff ffd6 	bl	8004574 <BSP_SD_Init>
 80045c8:	b108      	cbz	r0, 80045ce <SD_initialize+0x12>

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80045ca:	7820      	ldrb	r0, [r4, #0]
}
 80045cc:	bd38      	pop	{r3, r4, r5, pc}
  Stat = STA_NOINIT;
 80045ce:	7025      	strb	r5, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
 80045d0:	f7ff ffb0 	bl	8004534 <BSP_SD_GetCardState>
 80045d4:	b918      	cbnz	r0, 80045de <SD_initialize+0x22>
    Stat &= ~STA_NOINIT;
 80045d6:	7823      	ldrb	r3, [r4, #0]
 80045d8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80045dc:	7023      	strb	r3, [r4, #0]
  return Stat;
 80045de:	7823      	ldrb	r3, [r4, #0]
 80045e0:	b2db      	uxtb	r3, r3
    Stat = SD_CheckStatus(lun);
 80045e2:	7023      	strb	r3, [r4, #0]
  return Stat;
 80045e4:	7820      	ldrb	r0, [r4, #0]
}
 80045e6:	bd38      	pop	{r3, r4, r5, pc}
 80045e8:	2000000c 	.word	0x2000000c

080045ec <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80045ec:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 80045ee:	2301      	movs	r3, #1
 80045f0:	4c05      	ldr	r4, [pc, #20]	; (8004608 <SD_status+0x1c>)
 80045f2:	7023      	strb	r3, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
 80045f4:	f7ff ff9e 	bl	8004534 <BSP_SD_GetCardState>
 80045f8:	b918      	cbnz	r0, 8004602 <SD_status+0x16>
    Stat &= ~STA_NOINIT;
 80045fa:	7823      	ldrb	r3, [r4, #0]
 80045fc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004600:	7023      	strb	r3, [r4, #0]
  return Stat;
 8004602:	7820      	ldrb	r0, [r4, #0]
  return SD_CheckStatus(lun);
}
 8004604:	bd10      	pop	{r4, pc}
 8004606:	bf00      	nop
 8004608:	2000000c 	.word	0x2000000c

0800460c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800460c:	b508      	push	{r3, lr}
 800460e:	4608      	mov	r0, r1
 8004610:	4611      	mov	r1, r2
 8004612:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8004614:	f04f 33ff 	mov.w	r3, #4294967295
 8004618:	f7ff ff68 	bl	80044ec <BSP_SD_ReadBlocks>
 800461c:	b108      	cbz	r0, 8004622 <SD_read+0x16>
  DRESULT res = RES_ERROR;
 800461e:	2001      	movs	r0, #1
    }
    res = RES_OK;
  }

  return res;
}
 8004620:	bd08      	pop	{r3, pc}
    while(BSP_SD_GetCardState()!= MSD_OK)
 8004622:	f7ff ff87 	bl	8004534 <BSP_SD_GetCardState>
 8004626:	2800      	cmp	r0, #0
 8004628:	d0fa      	beq.n	8004620 <SD_read+0x14>
 800462a:	f7ff ff83 	bl	8004534 <BSP_SD_GetCardState>
 800462e:	2800      	cmp	r0, #0
 8004630:	d1f7      	bne.n	8004622 <SD_read+0x16>
 8004632:	e7f5      	b.n	8004620 <SD_read+0x14>

08004634 <SD_ioctl>:
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004634:	4b15      	ldr	r3, [pc, #84]	; (800468c <SD_ioctl+0x58>)
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	07db      	lsls	r3, r3, #31
 800463a:	d411      	bmi.n	8004660 <SD_ioctl+0x2c>
 800463c:	4608      	mov	r0, r1
{
 800463e:	b510      	push	{r4, lr}
 8004640:	4614      	mov	r4, r2
 8004642:	b088      	sub	sp, #32
 8004644:	2903      	cmp	r1, #3
 8004646:	d81e      	bhi.n	8004686 <SD_ioctl+0x52>
 8004648:	e8df f001 	tbb	[pc, r1]
 800464c:	0c150208 	.word	0x0c150208
    res = RES_OK;
    break;

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8004650:	4668      	mov	r0, sp
 8004652:	f7ff ff79 	bl	8004548 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8004656:	9b06      	ldr	r3, [sp, #24]
    res = RES_OK;
 8004658:	2000      	movs	r0, #0
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800465a:	6023      	str	r3, [r4, #0]
  default:
    res = RES_PARERR;
  }

  return res;
}
 800465c:	b008      	add	sp, #32
 800465e:	bd10      	pop	{r4, pc}
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004660:	2003      	movs	r0, #3
}
 8004662:	4770      	bx	lr
    BSP_SD_GetCardInfo(&CardInfo);
 8004664:	4668      	mov	r0, sp
 8004666:	f7ff ff6f 	bl	8004548 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800466a:	9b07      	ldr	r3, [sp, #28]
 800466c:	2000      	movs	r0, #0
 800466e:	0a5b      	lsrs	r3, r3, #9
 8004670:	6023      	str	r3, [r4, #0]
}
 8004672:	b008      	add	sp, #32
 8004674:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 8004676:	4668      	mov	r0, sp
 8004678:	f7ff ff66 	bl	8004548 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800467c:	9b07      	ldr	r3, [sp, #28]
    res = RES_OK;
 800467e:	2000      	movs	r0, #0
    *(WORD*)buff = CardInfo.LogBlockSize;
 8004680:	8023      	strh	r3, [r4, #0]
}
 8004682:	b008      	add	sp, #32
 8004684:	bd10      	pop	{r4, pc}
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004686:	2004      	movs	r0, #4
 8004688:	e7e8      	b.n	800465c <SD_ioctl+0x28>
 800468a:	bf00      	nop
 800468c:	2000000c 	.word	0x2000000c

08004690 <SD_write>:
{
 8004690:	b508      	push	{r3, lr}
 8004692:	4608      	mov	r0, r1
 8004694:	4611      	mov	r1, r2
 8004696:	461a      	mov	r2, r3
  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8004698:	f04f 33ff 	mov.w	r3, #4294967295
 800469c:	f7ff ff38 	bl	8004510 <BSP_SD_WriteBlocks>
 80046a0:	b108      	cbz	r0, 80046a6 <SD_write+0x16>
  DRESULT res = RES_ERROR;
 80046a2:	2001      	movs	r0, #1
}
 80046a4:	bd08      	pop	{r3, pc}
    while(BSP_SD_GetCardState()!= MSD_OK)
 80046a6:	f7ff ff45 	bl	8004534 <BSP_SD_GetCardState>
 80046aa:	2800      	cmp	r0, #0
 80046ac:	d0fa      	beq.n	80046a4 <SD_write+0x14>
 80046ae:	f7ff ff41 	bl	8004534 <BSP_SD_GetCardState>
 80046b2:	2800      	cmp	r0, #0
 80046b4:	d1f7      	bne.n	80046a6 <SD_write+0x16>
 80046b6:	e7f5      	b.n	80046a4 <SD_write+0x14>

080046b8 <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80046b8:	4b03      	ldr	r3, [pc, #12]	; (80046c8 <disk_status+0x10>)
 80046ba:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 80046be:	4418      	add	r0, r3
 80046c0:	6853      	ldr	r3, [r2, #4]
 80046c2:	7a00      	ldrb	r0, [r0, #8]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	4718      	bx	r3
 80046c8:	200000c0 	.word	0x200000c0

080046cc <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 80046cc:	4b08      	ldr	r3, [pc, #32]	; (80046f0 <disk_initialize+0x24>)
 80046ce:	5c1a      	ldrb	r2, [r3, r0]
 80046d0:	b95a      	cbnz	r2, 80046ea <disk_initialize+0x1e>
  {
    disk.is_initialized[pdrv] = 1;
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80046d2:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 80046d6:	1819      	adds	r1, r3, r0
{
 80046d8:	b410      	push	{r4}
    disk.is_initialized[pdrv] = 1;
 80046da:	2401      	movs	r4, #1
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80046dc:	6852      	ldr	r2, [r2, #4]
    disk.is_initialized[pdrv] = 1;
 80046de:	541c      	strb	r4, [r3, r0]
  }
  return stat;
}
 80046e0:	f85d 4b04 	ldr.w	r4, [sp], #4
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80046e4:	7a08      	ldrb	r0, [r1, #8]
 80046e6:	6813      	ldr	r3, [r2, #0]
 80046e8:	4718      	bx	r3
}
 80046ea:	2000      	movs	r0, #0
 80046ec:	4770      	bx	lr
 80046ee:	bf00      	nop
 80046f0:	200000c0 	.word	0x200000c0

080046f4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80046f4:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80046f6:	4c05      	ldr	r4, [pc, #20]	; (800470c <disk_read+0x18>)
 80046f8:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 80046fc:	4420      	add	r0, r4
 80046fe:	686c      	ldr	r4, [r5, #4]
 8004700:	7a00      	ldrb	r0, [r0, #8]
 8004702:	68a4      	ldr	r4, [r4, #8]
 8004704:	46a4      	mov	ip, r4
  return res;
}
 8004706:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004708:	4760      	bx	ip
 800470a:	bf00      	nop
 800470c:	200000c0 	.word	0x200000c0

08004710 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004710:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004712:	4c05      	ldr	r4, [pc, #20]	; (8004728 <disk_write+0x18>)
 8004714:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8004718:	4420      	add	r0, r4
 800471a:	686c      	ldr	r4, [r5, #4]
 800471c:	7a00      	ldrb	r0, [r0, #8]
 800471e:	68e4      	ldr	r4, [r4, #12]
 8004720:	46a4      	mov	ip, r4
  return res;
}
 8004722:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004724:	4760      	bx	ip
 8004726:	bf00      	nop
 8004728:	200000c0 	.word	0x200000c0

0800472c <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800472c:	4b05      	ldr	r3, [pc, #20]	; (8004744 <disk_ioctl+0x18>)
{
 800472e:	b410      	push	{r4}
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004730:	eb03 0480 	add.w	r4, r3, r0, lsl #2
 8004734:	4418      	add	r0, r3
 8004736:	6863      	ldr	r3, [r4, #4]
 8004738:	7a00      	ldrb	r0, [r0, #8]
 800473a:	691b      	ldr	r3, [r3, #16]
  return res;
}
 800473c:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004740:	4718      	bx	r3
 8004742:	bf00      	nop
 8004744:	200000c0 	.word	0x200000c0

08004748 <pick_lfn>:
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
 8004748:	7eca      	ldrb	r2, [r1, #27]
 800474a:	7e8b      	ldrb	r3, [r1, #26]
{
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800474c:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 8004750:	f040 8124 	bne.w	800499c <pick_lfn+0x254>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8004754:	780b      	ldrb	r3, [r1, #0]
	rv = rv << 8 | ptr[0];
 8004756:	788a      	ldrb	r2, [r1, #2]
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8004758:	f023 0340 	bic.w	r3, r3, #64	; 0x40
{
 800475c:	b470      	push	{r4, r5, r6}
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800475e:	3b01      	subs	r3, #1
 8004760:	4604      	mov	r4, r0
	rv = rv << 8 | ptr[0];
 8004762:	7848      	ldrb	r0, [r1, #1]
 8004764:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8004768:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800476c:	eb03 0382 	add.w	r3, r3, r2, lsl #2

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
		if (wc) {
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8004770:	2bfe      	cmp	r3, #254	; 0xfe
 8004772:	f200 8110 	bhi.w	8004996 <pick_lfn+0x24e>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8004776:	f824 0013 	strh.w	r0, [r4, r3, lsl #1]
 800477a:	1c5a      	adds	r2, r3, #1
	rv = rv << 8 | ptr[0];
 800477c:	790e      	ldrb	r6, [r1, #4]
 800477e:	78cd      	ldrb	r5, [r1, #3]
 8004780:	ea45 2506 	orr.w	r5, r5, r6, lsl #8
		if (wc) {
 8004784:	2800      	cmp	r0, #0
 8004786:	d174      	bne.n	8004872 <pick_lfn+0x12a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8004788:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800478c:	429d      	cmp	r5, r3
 800478e:	f040 8102 	bne.w	8004996 <pick_lfn+0x24e>
	rv = rv << 8 | ptr[0];
 8004792:	798b      	ldrb	r3, [r1, #6]
 8004794:	7948      	ldrb	r0, [r1, #5]
 8004796:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800479a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800479e:	4298      	cmp	r0, r3
 80047a0:	f040 80f9 	bne.w	8004996 <pick_lfn+0x24e>
	rv = rv << 8 | ptr[0];
 80047a4:	7a0b      	ldrb	r3, [r1, #8]
 80047a6:	79cd      	ldrb	r5, [r1, #7]
 80047a8:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80047ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80047b0:	429d      	cmp	r5, r3
 80047b2:	f040 80f0 	bne.w	8004996 <pick_lfn+0x24e>
	rv = rv << 8 | ptr[0];
 80047b6:	7a8b      	ldrb	r3, [r1, #10]
 80047b8:	7a48      	ldrb	r0, [r1, #9]
 80047ba:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80047be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80047c2:	4298      	cmp	r0, r3
 80047c4:	f040 80e7 	bne.w	8004996 <pick_lfn+0x24e>
	rv = rv << 8 | ptr[0];
 80047c8:	7bcb      	ldrb	r3, [r1, #15]
 80047ca:	7b8d      	ldrb	r5, [r1, #14]
 80047cc:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80047d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80047d4:	429d      	cmp	r5, r3
 80047d6:	f040 80de 	bne.w	8004996 <pick_lfn+0x24e>
	rv = rv << 8 | ptr[0];
 80047da:	7c4b      	ldrb	r3, [r1, #17]
 80047dc:	7c08      	ldrb	r0, [r1, #16]
 80047de:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80047e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80047e6:	4298      	cmp	r0, r3
 80047e8:	f040 80d5 	bne.w	8004996 <pick_lfn+0x24e>
	rv = rv << 8 | ptr[0];
 80047ec:	7ccb      	ldrb	r3, [r1, #19]
 80047ee:	7c8d      	ldrb	r5, [r1, #18]
 80047f0:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80047f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80047f8:	429d      	cmp	r5, r3
 80047fa:	f040 80cc 	bne.w	8004996 <pick_lfn+0x24e>
	rv = rv << 8 | ptr[0];
 80047fe:	7d4b      	ldrb	r3, [r1, #21]
 8004800:	7d08      	ldrb	r0, [r1, #20]
 8004802:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8004806:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800480a:	4298      	cmp	r0, r3
 800480c:	f040 80c3 	bne.w	8004996 <pick_lfn+0x24e>
	rv = rv << 8 | ptr[0];
 8004810:	7dcb      	ldrb	r3, [r1, #23]
 8004812:	7d8d      	ldrb	r5, [r1, #22]
 8004814:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8004818:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800481c:	429d      	cmp	r5, r3
 800481e:	f040 80ba 	bne.w	8004996 <pick_lfn+0x24e>
	rv = rv << 8 | ptr[0];
 8004822:	7e4b      	ldrb	r3, [r1, #25]
 8004824:	7e08      	ldrb	r0, [r1, #24]
 8004826:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800482a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800482e:	4298      	cmp	r0, r3
 8004830:	f040 80b1 	bne.w	8004996 <pick_lfn+0x24e>
	rv = rv << 8 | ptr[0];
 8004834:	7f4b      	ldrb	r3, [r1, #29]
 8004836:	7f0d      	ldrb	r5, [r1, #28]
 8004838:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800483c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004840:	429d      	cmp	r5, r3
 8004842:	f040 80a8 	bne.w	8004996 <pick_lfn+0x24e>
	rv = rv << 8 | ptr[0];
 8004846:	7fcb      	ldrb	r3, [r1, #31]
 8004848:	7f88      	ldrb	r0, [r1, #30]
 800484a:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800484e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004852:	4298      	cmp	r0, r3
 8004854:	f040 809f 	bne.w	8004996 <pick_lfn+0x24e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8004858:	780b      	ldrb	r3, [r1, #0]
 800485a:	065b      	lsls	r3, r3, #25
 800485c:	f140 8098 	bpl.w	8004990 <pick_lfn+0x248>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 8004860:	2aff      	cmp	r2, #255	; 0xff
 8004862:	f000 8098 	beq.w	8004996 <pick_lfn+0x24e>
		lfnbuf[i] = 0;
 8004866:	2300      	movs	r3, #0
	}

	return 1;		/* The part of LFN is valid */
 8004868:	2001      	movs	r0, #1
		lfnbuf[i] = 0;
 800486a:	f824 3012 	strh.w	r3, [r4, r2, lsl #1]
}
 800486e:	bc70      	pop	{r4, r5, r6}
 8004870:	4770      	bx	lr
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8004872:	2aff      	cmp	r2, #255	; 0xff
 8004874:	f000 808f 	beq.w	8004996 <pick_lfn+0x24e>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8004878:	f824 5012 	strh.w	r5, [r4, r2, lsl #1]
 800487c:	1c9a      	adds	r2, r3, #2
	rv = rv << 8 | ptr[0];
 800487e:	798e      	ldrb	r6, [r1, #6]
 8004880:	7948      	ldrb	r0, [r1, #5]
 8004882:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
		if (wc) {
 8004886:	2d00      	cmp	r5, #0
 8004888:	d087      	beq.n	800479a <pick_lfn+0x52>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800488a:	2aff      	cmp	r2, #255	; 0xff
 800488c:	f000 8083 	beq.w	8004996 <pick_lfn+0x24e>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8004890:	f824 0012 	strh.w	r0, [r4, r2, lsl #1]
 8004894:	1cda      	adds	r2, r3, #3
	rv = rv << 8 | ptr[0];
 8004896:	7a0e      	ldrb	r6, [r1, #8]
 8004898:	79cd      	ldrb	r5, [r1, #7]
 800489a:	ea45 2506 	orr.w	r5, r5, r6, lsl #8
		if (wc) {
 800489e:	2800      	cmp	r0, #0
 80048a0:	d084      	beq.n	80047ac <pick_lfn+0x64>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 80048a2:	2aff      	cmp	r2, #255	; 0xff
 80048a4:	d077      	beq.n	8004996 <pick_lfn+0x24e>
			lfnbuf[i++] = wc = uc;			/* Store it */
 80048a6:	f824 5012 	strh.w	r5, [r4, r2, lsl #1]
 80048aa:	1d1a      	adds	r2, r3, #4
	rv = rv << 8 | ptr[0];
 80048ac:	7a8e      	ldrb	r6, [r1, #10]
 80048ae:	7a48      	ldrb	r0, [r1, #9]
 80048b0:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
		if (wc) {
 80048b4:	2d00      	cmp	r5, #0
 80048b6:	d082      	beq.n	80047be <pick_lfn+0x76>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 80048b8:	2aff      	cmp	r2, #255	; 0xff
 80048ba:	d06c      	beq.n	8004996 <pick_lfn+0x24e>
			lfnbuf[i++] = wc = uc;			/* Store it */
 80048bc:	f824 0012 	strh.w	r0, [r4, r2, lsl #1]
 80048c0:	1d5a      	adds	r2, r3, #5
	rv = rv << 8 | ptr[0];
 80048c2:	7bce      	ldrb	r6, [r1, #15]
 80048c4:	7b8d      	ldrb	r5, [r1, #14]
 80048c6:	ea45 2506 	orr.w	r5, r5, r6, lsl #8
		if (wc) {
 80048ca:	2800      	cmp	r0, #0
 80048cc:	d080      	beq.n	80047d0 <pick_lfn+0x88>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 80048ce:	2aff      	cmp	r2, #255	; 0xff
 80048d0:	d061      	beq.n	8004996 <pick_lfn+0x24e>
			lfnbuf[i++] = wc = uc;			/* Store it */
 80048d2:	f824 5012 	strh.w	r5, [r4, r2, lsl #1]
 80048d6:	1d9a      	adds	r2, r3, #6
	rv = rv << 8 | ptr[0];
 80048d8:	7c4e      	ldrb	r6, [r1, #17]
 80048da:	7c08      	ldrb	r0, [r1, #16]
 80048dc:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
		if (wc) {
 80048e0:	2d00      	cmp	r5, #0
 80048e2:	f43f af7e 	beq.w	80047e2 <pick_lfn+0x9a>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 80048e6:	2aff      	cmp	r2, #255	; 0xff
 80048e8:	d055      	beq.n	8004996 <pick_lfn+0x24e>
			lfnbuf[i++] = wc = uc;			/* Store it */
 80048ea:	f824 0012 	strh.w	r0, [r4, r2, lsl #1]
 80048ee:	1dda      	adds	r2, r3, #7
	rv = rv << 8 | ptr[0];
 80048f0:	7cce      	ldrb	r6, [r1, #19]
 80048f2:	7c8d      	ldrb	r5, [r1, #18]
 80048f4:	ea45 2506 	orr.w	r5, r5, r6, lsl #8
		if (wc) {
 80048f8:	2800      	cmp	r0, #0
 80048fa:	f43f af7b 	beq.w	80047f4 <pick_lfn+0xac>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 80048fe:	2aff      	cmp	r2, #255	; 0xff
 8004900:	d049      	beq.n	8004996 <pick_lfn+0x24e>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8004902:	f824 5012 	strh.w	r5, [r4, r2, lsl #1]
 8004906:	f103 0208 	add.w	r2, r3, #8
	rv = rv << 8 | ptr[0];
 800490a:	7d4e      	ldrb	r6, [r1, #21]
 800490c:	7d08      	ldrb	r0, [r1, #20]
 800490e:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
		if (wc) {
 8004912:	2d00      	cmp	r5, #0
 8004914:	f43f af77 	beq.w	8004806 <pick_lfn+0xbe>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8004918:	2aff      	cmp	r2, #255	; 0xff
 800491a:	d03c      	beq.n	8004996 <pick_lfn+0x24e>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800491c:	f824 0012 	strh.w	r0, [r4, r2, lsl #1]
 8004920:	f103 0209 	add.w	r2, r3, #9
	rv = rv << 8 | ptr[0];
 8004924:	7dce      	ldrb	r6, [r1, #23]
 8004926:	7d8d      	ldrb	r5, [r1, #22]
 8004928:	ea45 2506 	orr.w	r5, r5, r6, lsl #8
		if (wc) {
 800492c:	2800      	cmp	r0, #0
 800492e:	f43f af73 	beq.w	8004818 <pick_lfn+0xd0>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8004932:	2aff      	cmp	r2, #255	; 0xff
 8004934:	d02f      	beq.n	8004996 <pick_lfn+0x24e>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8004936:	f824 5012 	strh.w	r5, [r4, r2, lsl #1]
 800493a:	f103 020a 	add.w	r2, r3, #10
	rv = rv << 8 | ptr[0];
 800493e:	7e4e      	ldrb	r6, [r1, #25]
 8004940:	7e08      	ldrb	r0, [r1, #24]
 8004942:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
		if (wc) {
 8004946:	2d00      	cmp	r5, #0
 8004948:	f43f af6f 	beq.w	800482a <pick_lfn+0xe2>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800494c:	2aff      	cmp	r2, #255	; 0xff
 800494e:	d022      	beq.n	8004996 <pick_lfn+0x24e>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8004950:	f824 0012 	strh.w	r0, [r4, r2, lsl #1]
 8004954:	f103 020b 	add.w	r2, r3, #11
	rv = rv << 8 | ptr[0];
 8004958:	7f4e      	ldrb	r6, [r1, #29]
 800495a:	7f0d      	ldrb	r5, [r1, #28]
 800495c:	ea45 2506 	orr.w	r5, r5, r6, lsl #8
		if (wc) {
 8004960:	2800      	cmp	r0, #0
 8004962:	f43f af6b 	beq.w	800483c <pick_lfn+0xf4>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8004966:	2aff      	cmp	r2, #255	; 0xff
 8004968:	d015      	beq.n	8004996 <pick_lfn+0x24e>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800496a:	f824 5012 	strh.w	r5, [r4, r2, lsl #1]
 800496e:	f103 060c 	add.w	r6, r3, #12
	rv = rv << 8 | ptr[0];
 8004972:	7fca      	ldrb	r2, [r1, #31]
 8004974:	7f88      	ldrb	r0, [r1, #30]
 8004976:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
		if (wc) {
 800497a:	b18d      	cbz	r5, 80049a0 <pick_lfn+0x258>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800497c:	2eff      	cmp	r6, #255	; 0xff
 800497e:	d00a      	beq.n	8004996 <pick_lfn+0x24e>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8004980:	f103 020d 	add.w	r2, r3, #13
 8004984:	f824 0016 	strh.w	r0, [r4, r6, lsl #1]
	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8004988:	780b      	ldrb	r3, [r1, #0]
 800498a:	065b      	lsls	r3, r3, #25
 800498c:	f53f af68 	bmi.w	8004860 <pick_lfn+0x118>
	return 1;		/* The part of LFN is valid */
 8004990:	2001      	movs	r0, #1
}
 8004992:	bc70      	pop	{r4, r5, r6}
 8004994:	4770      	bx	lr
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 8004996:	2000      	movs	r0, #0
}
 8004998:	bc70      	pop	{r4, r5, r6}
 800499a:	4770      	bx	lr
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800499c:	2000      	movs	r0, #0
}
 800499e:	4770      	bx	lr
			lfnbuf[i++] = wc = uc;			/* Store it */
 80049a0:	4632      	mov	r2, r6
 80049a2:	e754      	b.n	800484e <pick_lfn+0x106>

080049a4 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 80049a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 80049a8:	2700      	movs	r7, #0
	FATFS *fs = dp->obj.fs;
 80049aa:	f8d0 8000 	ldr.w	r8, [r0]
	fno->fname[0] = 0;		/* Invaidate file info */
 80049ae:	768f      	strb	r7, [r1, #26]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80049b0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d06b      	beq.n	8004a8e <get_fileinfo+0xea>

#if _USE_LFN != 0	/* LFN configuration */
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 80049b6:	f898 3000 	ldrb.w	r3, [r8]
 80049ba:	460d      	mov	r5, r1
 80049bc:	2b04      	cmp	r3, #4
 80049be:	d07c      	beq.n	8004aba <get_fileinfo+0x116>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 80049c0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80049c2:	4606      	mov	r6, r0
 80049c4:	3301      	adds	r3, #1
 80049c6:	d01e      	beq.n	8004a06 <get_fileinfo+0x62>
			i = j = 0;
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 80049c8:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80049cc:	8818      	ldrh	r0, [r3, #0]
 80049ce:	2800      	cmp	r0, #0
 80049d0:	d06d      	beq.n	8004aae <get_fileinfo+0x10a>
 80049d2:	f101 0719 	add.w	r7, r1, #25
 80049d6:	2401      	movs	r4, #1
 80049d8:	e000      	b.n	80049dc <get_fileinfo+0x38>
 80049da:	461c      	mov	r4, r3
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 80049dc:	2100      	movs	r1, #0
 80049de:	f004 fc4d 	bl	800927c <ff_convert>
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 80049e2:	1c63      	adds	r3, r4, #1
 80049e4:	2800      	cmp	r0, #0
 80049e6:	d062      	beq.n	8004aae <get_fileinfo+0x10a>
 80049e8:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 80049ec:	d05f      	beq.n	8004aae <get_fileinfo+0x10a>
				fno->fname[i++] = (TCHAR)w;
 80049ee:	f807 0f01 	strb.w	r0, [r7, #1]!
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 80049f2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80049f6:	f832 0014 	ldrh.w	r0, [r2, r4, lsl #1]
 80049fa:	2800      	cmp	r0, #0
 80049fc:	d1ed      	bne.n	80049da <get_fileinfo+0x36>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 80049fe:	442c      	add	r4, r5
 8004a00:	2300      	movs	r3, #0
 8004a02:	76a3      	strb	r3, [r4, #26]
 8004a04:	7eaf      	ldrb	r7, [r5, #26]
	}

	i = j = 0;
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
	while (i < 11) {		/* Copy name body and extension */
		c = (TCHAR)dp->dir[i++];
 8004a06:	6bf6      	ldr	r6, [r6, #60]	; 0x3c
	i = j = 0;
 8004a08:	2400      	movs	r4, #0
		if (c == ' ') continue;				/* Skip padding spaces */
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
		if (i == 9) {						/* Insert a . if extension is exist */
			if (!lfv) fno->fname[j] = '.';
			fno->altname[j++] = '.';
 8004a0a:	f04f 082e 	mov.w	r8, #46	; 0x2e
 8004a0e:	1e70      	subs	r0, r6, #1
 8004a10:	f106 0c0a 	add.w	ip, r6, #10
		c = (TCHAR)dp->dir[i++];
 8004a14:	4602      	mov	r2, r0
 8004a16:	f810 3f01 	ldrb.w	r3, [r0, #1]!
		if (c == ' ') continue;				/* Skip padding spaces */
 8004a1a:	2b20      	cmp	r3, #32
 8004a1c:	d01c      	beq.n	8004a58 <get_fileinfo+0xb4>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8004a1e:	3202      	adds	r2, #2
 8004a20:	2b05      	cmp	r3, #5
 8004a22:	eba2 0206 	sub.w	r2, r2, r6
 8004a26:	bf08      	it	eq
 8004a28:	23e5      	moveq	r3, #229	; 0xe5
		if (i == 9) {						/* Insert a . if extension is exist */
 8004a2a:	2a09      	cmp	r2, #9
 8004a2c:	d031      	beq.n	8004a92 <get_fileinfo+0xee>
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 8004a2e:	1929      	adds	r1, r5, r4
 8004a30:	734b      	strb	r3, [r1, #13]
		if (!lfv) {
 8004a32:	b987      	cbnz	r7, 8004a56 <get_fileinfo+0xb2>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8004a34:	f1a3 0e41 	sub.w	lr, r3, #65	; 0x41
 8004a38:	f1be 0f19 	cmp.w	lr, #25
 8004a3c:	d80a      	bhi.n	8004a54 <get_fileinfo+0xb0>
 8004a3e:	2a09      	cmp	r2, #9
 8004a40:	f896 e00c 	ldrb.w	lr, [r6, #12]
 8004a44:	bf34      	ite	cc
 8004a46:	2208      	movcc	r2, #8
 8004a48:	2210      	movcs	r2, #16
 8004a4a:	ea1e 0f02 	tst.w	lr, r2
 8004a4e:	d001      	beq.n	8004a54 <get_fileinfo+0xb0>
				c += 0x20;			/* To lower */
 8004a50:	3320      	adds	r3, #32
 8004a52:	b2db      	uxtb	r3, r3
			}
			fno->fname[j] = c;
 8004a54:	768b      	strb	r3, [r1, #26]
		}
		j++;
 8004a56:	3401      	adds	r4, #1
	while (i < 11) {		/* Copy name body and extension */
 8004a58:	4560      	cmp	r0, ip
 8004a5a:	d1db      	bne.n	8004a14 <get_fileinfo+0x70>
	}
	if (!lfv) {
		fno->fname[j] = 0;
 8004a5c:	1929      	adds	r1, r5, r4
	if (!lfv) {
 8004a5e:	b307      	cbz	r7, 8004aa2 <get_fileinfo+0xfe>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 8004a60:	2000      	movs	r0, #0
 8004a62:	7348      	strb	r0, [r1, #13]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8004a64:	7af3      	ldrb	r3, [r6, #11]
 8004a66:	732b      	strb	r3, [r5, #12]
	rv = rv << 8 | ptr[2];
 8004a68:	8bf1      	ldrh	r1, [r6, #30]
	rv = rv << 8 | ptr[1];
 8004a6a:	7f72      	ldrb	r2, [r6, #29]
	rv = rv << 8 | ptr[0];
 8004a6c:	7f33      	ldrb	r3, [r6, #28]
	rv = rv << 8 | ptr[1];
 8004a6e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8004a72:	6068      	str	r0, [r5, #4]
	rv = rv << 8 | ptr[0];
 8004a74:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8004a78:	602b      	str	r3, [r5, #0]
	rv = rv << 8 | ptr[2];
 8004a7a:	8b31      	ldrh	r1, [r6, #24]
	rv = rv << 8 | ptr[1];
 8004a7c:	7df2      	ldrb	r2, [r6, #23]
	rv = rv << 8 | ptr[0];
 8004a7e:	7db3      	ldrb	r3, [r6, #22]
	rv = rv << 8 | ptr[1];
 8004a80:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	rv = rv << 8 | ptr[0];
 8004a84:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8004a88:	0c1a      	lsrs	r2, r3, #16
 8004a8a:	816b      	strh	r3, [r5, #10]
 8004a8c:	812a      	strh	r2, [r5, #8]
}
 8004a8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (!lfv) fno->fname[j] = '.';
 8004a92:	1929      	adds	r1, r5, r4
 8004a94:	b90f      	cbnz	r7, 8004a9a <get_fileinfo+0xf6>
 8004a96:	f881 801a 	strb.w	r8, [r1, #26]
			fno->altname[j++] = '.';
 8004a9a:	3401      	adds	r4, #1
 8004a9c:	f881 800d 	strb.w	r8, [r1, #13]
 8004aa0:	e7c5      	b.n	8004a2e <get_fileinfo+0x8a>
		fno->fname[j] = 0;
 8004aa2:	768f      	strb	r7, [r1, #26]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 8004aa4:	7b33      	ldrb	r3, [r6, #12]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	bf08      	it	eq
 8004aaa:	4629      	moveq	r1, r5
 8004aac:	e7d8      	b.n	8004a60 <get_fileinfo+0xbc>
			i = j = 0;
 8004aae:	2400      	movs	r4, #0
			fno->fname[i] = 0;	/* Terminate the LFN */
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	442c      	add	r4, r5
 8004ab4:	76a3      	strb	r3, [r4, #26]
 8004ab6:	7eaf      	ldrb	r7, [r5, #26]
 8004ab8:	e7a5      	b.n	8004a06 <get_fileinfo+0x62>
		get_xdir_info(fs->dirbuf, fno);
 8004aba:	f8d8 6014 	ldr.w	r6, [r8, #20]
	for (si = SZDIRE * 2, nc = 0; nc < dirb[XDIR_NumName]; si += 2, nc++) {
 8004abe:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
 8004ac2:	b1d3      	cbz	r3, 8004afa <get_fileinfo+0x156>
 8004ac4:	f101 0819 	add.w	r8, r1, #25
 8004ac8:	2440      	movs	r4, #64	; 0x40
 8004aca:	e005      	b.n	8004ad8 <get_fileinfo+0x134>
		fno->fname[di++] = (char)w;
 8004acc:	f808 0f01 	strb.w	r0, [r8, #1]!
	for (si = SZDIRE * 2, nc = 0; nc < dirb[XDIR_NumName]; si += 2, nc++) {
 8004ad0:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
 8004ad4:	429f      	cmp	r7, r3
 8004ad6:	d213      	bcs.n	8004b00 <get_fileinfo+0x15c>
		if ((si % SZDIRE) == 0) si += 2;		/* Skip entry type field */
 8004ad8:	06e2      	lsls	r2, r4, #27
		w = ff_convert(ld_word(dirb + si), 0);	/* Get a character and Unicode -> OEM */
 8004ada:	f04f 0100 	mov.w	r1, #0
		fno->fname[di++] = (char)w;
 8004ade:	f107 0701 	add.w	r7, r7, #1
		if ((si % SZDIRE) == 0) si += 2;		/* Skip entry type field */
 8004ae2:	bf08      	it	eq
 8004ae4:	3402      	addeq	r4, #2
		w = ff_convert(ld_word(dirb + si), 0);	/* Get a character and Unicode -> OEM */
 8004ae6:	1933      	adds	r3, r6, r4
	rv = rv << 8 | ptr[0];
 8004ae8:	5d32      	ldrb	r2, [r6, r4]
 8004aea:	3402      	adds	r4, #2
 8004aec:	7858      	ldrb	r0, [r3, #1]
		w = ff_convert(ld_word(dirb + si), 0);	/* Get a character and Unicode -> OEM */
 8004aee:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 8004af2:	f004 fbc3 	bl	800927c <ff_convert>
		if (w == 0 || di >= _MAX_LFN) { di = 0; break; }	/* Invalid char or buffer overflow --> inaccessible object name */
 8004af6:	2800      	cmp	r0, #0
 8004af8:	d1e8      	bne.n	8004acc <get_fileinfo+0x128>
	if (di == 0) fno->fname[di++] = '?';	/* Inaccessible object name? */
 8004afa:	233f      	movs	r3, #63	; 0x3f
 8004afc:	2701      	movs	r7, #1
 8004afe:	76ab      	strb	r3, [r5, #26]
	fno->fname[di] = 0;						/* Terminate file name */
 8004b00:	2000      	movs	r0, #0
 8004b02:	442f      	add	r7, r5
 8004b04:	76b8      	strb	r0, [r7, #26]
	fno->altname[0] = 0;							/* No SFN */
 8004b06:	7368      	strb	r0, [r5, #13]
	fno->fattrib = dirb[XDIR_Attr];					/* Attribute */
 8004b08:	7933      	ldrb	r3, [r6, #4]
 8004b0a:	732b      	strb	r3, [r5, #12]
	fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(dirb + XDIR_FileSize);	/* Size */
 8004b0c:	06db      	lsls	r3, r3, #27
 8004b0e:	d50d      	bpl.n	8004b2c <get_fileinfo+0x188>
 8004b10:	4603      	mov	r3, r0
 8004b12:	e9c5 0300 	strd	r0, r3, [r5]
	rv = rv << 8 | ptr[0];
 8004b16:	7b72      	ldrb	r2, [r6, #13]
 8004b18:	7b33      	ldrb	r3, [r6, #12]
 8004b1a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	fno->ftime = ld_word(dirb + XDIR_ModTime + 0);	/* Time */
 8004b1e:	816b      	strh	r3, [r5, #10]
	rv = rv << 8 | ptr[0];
 8004b20:	7bf2      	ldrb	r2, [r6, #15]
 8004b22:	7bb3      	ldrb	r3, [r6, #14]
 8004b24:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	fno->fdate = ld_word(dirb + XDIR_ModTime + 2);	/* Date */
 8004b28:	812b      	strh	r3, [r5, #8]
}
 8004b2a:	e7b0      	b.n	8004a8e <get_fileinfo+0xea>
	rv = rv << 8 | ptr[4];
 8004b2c:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
	rv = rv << 8 | ptr[3];
 8004b2e:	f896 803b 	ldrb.w	r8, [r6, #59]	; 0x3b
	rv = rv << 8 | ptr[2];
 8004b32:	f896 003a 	ldrb.w	r0, [r6, #58]	; 0x3a
 8004b36:	ea48 2403 	orr.w	r4, r8, r3, lsl #8
 8004b3a:	0c1b      	lsrs	r3, r3, #16
 8004b3c:	ea40 2404 	orr.w	r4, r0, r4, lsl #8
	rv = rv << 8 | ptr[1];
 8004b40:	f896 0039 	ldrb.w	r0, [r6, #57]	; 0x39
 8004b44:	021b      	lsls	r3, r3, #8
 8004b46:	ea40 2204 	orr.w	r2, r0, r4, lsl #8
	rv = rv << 8 | ptr[0];
 8004b4a:	f896 0038 	ldrb.w	r0, [r6, #56]	; 0x38
	rv = rv << 8 | ptr[1];
 8004b4e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
	rv = rv << 8 | ptr[0];
 8004b52:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8004b56:	021b      	lsls	r3, r3, #8
 8004b58:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
	return rv;
 8004b5c:	e7d9      	b.n	8004b12 <get_fileinfo+0x16e>
 8004b5e:	bf00      	nop

08004b60 <move_window.part.0>:
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
 8004b60:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004b62:	78c3      	ldrb	r3, [r0, #3]
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
 8004b64:	b083      	sub	sp, #12
 8004b66:	4604      	mov	r4, r0
 8004b68:	460d      	mov	r5, r1
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004b6a:	b973      	cbnz	r3, 8004b8a <move_window.part.0+0x2a>
 8004b6c:	f100 014c 	add.w	r1, r0, #76	; 0x4c
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8004b70:	2301      	movs	r3, #1
 8004b72:	462a      	mov	r2, r5
 8004b74:	7860      	ldrb	r0, [r4, #1]
 8004b76:	f7ff fdbd 	bl	80046f4 <disk_read>
 8004b7a:	b910      	cbnz	r0, 8004b82 <move_window.part.0+0x22>
			fs->winsect = sector;
 8004b7c:	64a5      	str	r5, [r4, #72]	; 0x48
}
 8004b7e:	b003      	add	sp, #12
 8004b80:	bdf0      	pop	{r4, r5, r6, r7, pc}
				res = FR_DISK_ERR;
 8004b82:	2001      	movs	r0, #1
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8004b84:	f04f 35ff 	mov.w	r5, #4294967295
 8004b88:	e7f8      	b.n	8004b7c <move_window.part.0+0x1c>
		wsect = fs->winsect;	/* Current sector number */
 8004b8a:	6c86      	ldr	r6, [r0, #72]	; 0x48
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8004b8c:	f100 014c 	add.w	r1, r0, #76	; 0x4c
 8004b90:	2301      	movs	r3, #1
 8004b92:	7840      	ldrb	r0, [r0, #1]
 8004b94:	4632      	mov	r2, r6
 8004b96:	9101      	str	r1, [sp, #4]
 8004b98:	f7ff fdba 	bl	8004710 <disk_write>
 8004b9c:	b9b8      	cbnz	r0, 8004bce <move_window.part.0+0x6e>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004b9e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004ba0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004ba2:	1ab2      	subs	r2, r6, r2
 8004ba4:	9901      	ldr	r1, [sp, #4]
			fs->wflag = 0;
 8004ba6:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d2e1      	bcs.n	8004b70 <move_window.part.0+0x10>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004bac:	78a7      	ldrb	r7, [r4, #2]
 8004bae:	2f01      	cmp	r7, #1
 8004bb0:	d801      	bhi.n	8004bb6 <move_window.part.0+0x56>
 8004bb2:	e7dd      	b.n	8004b70 <move_window.part.0+0x10>
 8004bb4:	6b63      	ldr	r3, [r4, #52]	; 0x34
					wsect += fs->fsize;
 8004bb6:	441e      	add	r6, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004bb8:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 8004bba:	2301      	movs	r3, #1
 8004bbc:	7860      	ldrb	r0, [r4, #1]
 8004bbe:	4632      	mov	r2, r6
 8004bc0:	9101      	str	r1, [sp, #4]
 8004bc2:	f7ff fda5 	bl	8004710 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004bc6:	2f01      	cmp	r7, #1
 8004bc8:	9901      	ldr	r1, [sp, #4]
 8004bca:	d1f3      	bne.n	8004bb4 <move_window.part.0+0x54>
 8004bcc:	e7d0      	b.n	8004b70 <move_window.part.0+0x10>
			res = FR_DISK_ERR;
 8004bce:	2001      	movs	r0, #1
}
 8004bd0:	b003      	add	sp, #12
 8004bd2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004bd4 <put_fat.part.0>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
 8004bd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		switch (fs->fs_type) {
 8004bd8:	7803      	ldrb	r3, [r0, #0]
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
 8004bda:	4604      	mov	r4, r0
 8004bdc:	460d      	mov	r5, r1
 8004bde:	4616      	mov	r6, r2
		switch (fs->fs_type) {
 8004be0:	2b02      	cmp	r3, #2
 8004be2:	d074      	beq.n	8004cce <put_fat.part.0+0xfa>
 8004be4:	d83e      	bhi.n	8004c64 <put_fat.part.0+0x90>
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d16e      	bne.n	8004cc8 <put_fat.part.0+0xf4>
			bc = (UINT)clst; bc += bc / 2;
 8004bea:	eb01 0751 	add.w	r7, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004bee:	f8b0 c00c 	ldrh.w	ip, [r0, #12]
 8004bf2:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
	if (sector != fs->winsect) {	/* Window offset changed? */
 8004bf4:	6c82      	ldr	r2, [r0, #72]	; 0x48
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004bf6:	fbb7 f3fc 	udiv	r3, r7, ip
 8004bfa:	4419      	add	r1, r3
	if (sector != fs->winsect) {	/* Window offset changed? */
 8004bfc:	4291      	cmp	r1, r2
 8004bfe:	d007      	beq.n	8004c10 <put_fat.part.0+0x3c>
 8004c00:	f7ff ffae 	bl	8004b60 <move_window.part.0>
			if (res != FR_OK) break;
 8004c04:	2800      	cmp	r0, #0
 8004c06:	d160      	bne.n	8004cca <put_fat.part.0+0xf6>
 8004c08:	f8b4 c00c 	ldrh.w	ip, [r4, #12]
 8004c0c:	fbb7 f3fc 	udiv	r3, r7, ip
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004c10:	07ea      	lsls	r2, r5, #31
			p = fs->win + bc++ % SS(fs);
 8004c12:	fb0c 7313 	mls	r3, ip, r3, r7
 8004c16:	f104 084c 	add.w	r8, r4, #76	; 0x4c
 8004c1a:	f107 0701 	add.w	r7, r7, #1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004c1e:	d575      	bpl.n	8004d0c <put_fat.part.0+0x138>
 8004c20:	f818 2003 	ldrb.w	r2, [r8, r3]
			fs->wflag = 1;
 8004c24:	2501      	movs	r5, #1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004c26:	f002 020f 	and.w	r2, r2, #15
 8004c2a:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
 8004c2e:	f808 2003 	strb.w	r2, [r8, r3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004c32:	89a0      	ldrh	r0, [r4, #12]
 8004c34:	6be1      	ldr	r1, [r4, #60]	; 0x3c
	if (sector != fs->winsect) {	/* Window offset changed? */
 8004c36:	6ca2      	ldr	r2, [r4, #72]	; 0x48
			fs->wflag = 1;
 8004c38:	70e5      	strb	r5, [r4, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004c3a:	fbb7 f3f0 	udiv	r3, r7, r0
 8004c3e:	4419      	add	r1, r3
	if (sector != fs->winsect) {	/* Window offset changed? */
 8004c40:	4291      	cmp	r1, r2
 8004c42:	f000 8090 	beq.w	8004d66 <put_fat.part.0+0x192>
 8004c46:	4620      	mov	r0, r4
 8004c48:	f7ff ff8a 	bl	8004b60 <move_window.part.0>
			if (res != FR_OK) break;
 8004c4c:	2800      	cmp	r0, #0
 8004c4e:	d13c      	bne.n	8004cca <put_fat.part.0+0xf6>
			p = fs->win + bc % SS(fs);
 8004c50:	89a2      	ldrh	r2, [r4, #12]
 8004c52:	fbb7 f3f2 	udiv	r3, r7, r2
 8004c56:	fb02 7713 	mls	r7, r2, r3, r7
 8004c5a:	eb08 0307 	add.w	r3, r8, r7
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004c5e:	f3c6 1607 	ubfx	r6, r6, #4, #8
 8004c62:	e071      	b.n	8004d48 <put_fat.part.0+0x174>
		switch (fs->fs_type) {
 8004c64:	1eda      	subs	r2, r3, #3
 8004c66:	2a01      	cmp	r2, #1
 8004c68:	d82e      	bhi.n	8004cc8 <put_fat.part.0+0xf4>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8004c6a:	f8b0 c00c 	ldrh.w	ip, [r0, #12]
 8004c6e:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
 8004c70:	ea4f 019c 	mov.w	r1, ip, lsr #2
	if (sector != fs->winsect) {	/* Window offset changed? */
 8004c74:	6c82      	ldr	r2, [r0, #72]	; 0x48
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8004c76:	fbb5 f1f1 	udiv	r1, r5, r1
 8004c7a:	4439      	add	r1, r7
	if (sector != fs->winsect) {	/* Window offset changed? */
 8004c7c:	4291      	cmp	r1, r2
 8004c7e:	d005      	beq.n	8004c8c <put_fat.part.0+0xb8>
 8004c80:	f7ff ff6e 	bl	8004b60 <move_window.part.0>
			if (res != FR_OK) break;
 8004c84:	bb08      	cbnz	r0, 8004cca <put_fat.part.0+0xf6>
 8004c86:	7823      	ldrb	r3, [r4, #0]
 8004c88:	f8b4 c00c 	ldrh.w	ip, [r4, #12]
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 8004c8c:	2b04      	cmp	r3, #4
 8004c8e:	d061      	beq.n	8004d54 <put_fat.part.0+0x180>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8004c90:	00ad      	lsls	r5, r5, #2
 8004c92:	f104 034c 	add.w	r3, r4, #76	; 0x4c
 8004c96:	f026 4670 	bic.w	r6, r6, #4026531840	; 0xf0000000
 8004c9a:	fbb5 f1fc 	udiv	r1, r5, ip
 8004c9e:	fb0c 5c11 	mls	ip, ip, r1, r5
 8004ca2:	461d      	mov	r5, r3
 8004ca4:	4465      	add	r5, ip
	rv = rv << 8 | ptr[2];
 8004ca6:	886b      	ldrh	r3, [r5, #2]
	rv = rv << 8 | ptr[0];
 8004ca8:	041b      	lsls	r3, r3, #16
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8004caa:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004cae:	431e      	orrs	r6, r3
	*ptr++ = (BYTE)val; val >>= 8;
 8004cb0:	0a31      	lsrs	r1, r6, #8
 8004cb2:	702e      	strb	r6, [r5, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004cb4:	0c32      	lsrs	r2, r6, #16
			fs->wflag = 1;
 8004cb6:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val; val >>= 8;
 8004cb8:	0e36      	lsrs	r6, r6, #24
	*ptr++ = (BYTE)val; val >>= 8;
 8004cba:	7069      	strb	r1, [r5, #1]
	*ptr++ = (BYTE)val; val >>= 8;
 8004cbc:	70aa      	strb	r2, [r5, #2]
			break;
 8004cbe:	2000      	movs	r0, #0
	*ptr++ = (BYTE)val;
 8004cc0:	70ee      	strb	r6, [r5, #3]
			fs->wflag = 1;
 8004cc2:	70e3      	strb	r3, [r4, #3]
}
 8004cc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		switch (fs->fs_type) {
 8004cc8:	2002      	movs	r0, #2
}
 8004cca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004cce:	8987      	ldrh	r7, [r0, #12]
 8004cd0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8004cd2:	0879      	lsrs	r1, r7, #1
	if (sector != fs->winsect) {	/* Window offset changed? */
 8004cd4:	6c83      	ldr	r3, [r0, #72]	; 0x48
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004cd6:	fbb5 f1f1 	udiv	r1, r5, r1
 8004cda:	4411      	add	r1, r2
	if (sector != fs->winsect) {	/* Window offset changed? */
 8004cdc:	4299      	cmp	r1, r3
 8004cde:	d004      	beq.n	8004cea <put_fat.part.0+0x116>
 8004ce0:	f7ff ff3e 	bl	8004b60 <move_window.part.0>
			if (res != FR_OK) break;
 8004ce4:	2800      	cmp	r0, #0
 8004ce6:	d1f0      	bne.n	8004cca <put_fat.part.0+0xf6>
 8004ce8:	89a7      	ldrh	r7, [r4, #12]
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8004cea:	006d      	lsls	r5, r5, #1
 8004cec:	f104 034c 	add.w	r3, r4, #76	; 0x4c
	*ptr++ = (BYTE)val; val >>= 8;
 8004cf0:	f3c6 2107 	ubfx	r1, r6, #8, #8
			break;
 8004cf4:	2000      	movs	r0, #0
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8004cf6:	fbb5 f2f7 	udiv	r2, r5, r7
 8004cfa:	fb07 5712 	mls	r7, r7, r2, r5
			fs->wflag = 1;
 8004cfe:	2201      	movs	r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
 8004d00:	55de      	strb	r6, [r3, r7]
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8004d02:	443b      	add	r3, r7
	*ptr++ = (BYTE)val;
 8004d04:	7059      	strb	r1, [r3, #1]
			fs->wflag = 1;
 8004d06:	70e2      	strb	r2, [r4, #3]
}
 8004d08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004d0c:	f808 6003 	strb.w	r6, [r8, r3]
			fs->wflag = 1;
 8004d10:	2201      	movs	r2, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004d12:	89a3      	ldrh	r3, [r4, #12]
			fs->wflag = 1;
 8004d14:	70e2      	strb	r2, [r4, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004d16:	6be1      	ldr	r1, [r4, #60]	; 0x3c
	if (sector != fs->winsect) {	/* Window offset changed? */
 8004d18:	6ca0      	ldr	r0, [r4, #72]	; 0x48
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004d1a:	fbb7 f2f3 	udiv	r2, r7, r3
 8004d1e:	4411      	add	r1, r2
	if (sector != fs->winsect) {	/* Window offset changed? */
 8004d20:	4288      	cmp	r0, r1
 8004d22:	d007      	beq.n	8004d34 <put_fat.part.0+0x160>
 8004d24:	4620      	mov	r0, r4
 8004d26:	f7ff ff1b 	bl	8004b60 <move_window.part.0>
			if (res != FR_OK) break;
 8004d2a:	2800      	cmp	r0, #0
 8004d2c:	d1cd      	bne.n	8004cca <put_fat.part.0+0xf6>
			p = fs->win + bc % SS(fs);
 8004d2e:	89a2      	ldrh	r2, [r4, #12]
 8004d30:	fbb7 f3f2 	udiv	r3, r7, r2
 8004d34:	fb02 7713 	mls	r7, r2, r3, r7
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004d38:	f3c6 2203 	ubfx	r2, r6, #8, #4
			p = fs->win + bc % SS(fs);
 8004d3c:	eb08 0307 	add.w	r3, r8, r7
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004d40:	7819      	ldrb	r1, [r3, #0]
 8004d42:	f021 060f 	bic.w	r6, r1, #15
 8004d46:	4316      	orrs	r6, r2
			fs->wflag = 1;
 8004d48:	2201      	movs	r2, #1
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004d4a:	701e      	strb	r6, [r3, #0]
			break;
 8004d4c:	2000      	movs	r0, #0
			fs->wflag = 1;
 8004d4e:	70e2      	strb	r2, [r4, #3]
}
 8004d50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d54:	00a9      	lsls	r1, r5, #2
 8004d56:	f104 054c 	add.w	r5, r4, #76	; 0x4c
 8004d5a:	fbb1 f3fc 	udiv	r3, r1, ip
 8004d5e:	fb0c 1c13 	mls	ip, ip, r3, r1
 8004d62:	4465      	add	r5, ip
 8004d64:	e7a4      	b.n	8004cb0 <put_fat.part.0+0xdc>
			p = fs->win + bc % SS(fs);
 8004d66:	fb00 7313 	mls	r3, r0, r3, r7
 8004d6a:	4443      	add	r3, r8
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004d6c:	e777      	b.n	8004c5e <put_fat.part.0+0x8a>
 8004d6e:	bf00      	nop

08004d70 <get_fat>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8004d70:	2901      	cmp	r1, #1
 8004d72:	d911      	bls.n	8004d98 <get_fat+0x28>
{
 8004d74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	FATFS *fs = obj->fs;
 8004d78:	6805      	ldr	r5, [r0, #0]
 8004d7a:	460c      	mov	r4, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8004d7c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8004d7e:	428b      	cmp	r3, r1
 8004d80:	d802      	bhi.n	8004d88 <get_fat+0x18>
		val = 1;	/* Internal error */
 8004d82:	2001      	movs	r0, #1
}
 8004d84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		switch (fs->fs_type) {
 8004d88:	782b      	ldrb	r3, [r5, #0]
 8004d8a:	3b01      	subs	r3, #1
 8004d8c:	2b03      	cmp	r3, #3
 8004d8e:	d8f8      	bhi.n	8004d82 <get_fat+0x12>
 8004d90:	e8df f003 	tbb	[pc, r3]
 8004d94:	04385873 	.word	0x04385873
		val = 1;	/* Internal error */
 8004d98:	2001      	movs	r0, #1
}
 8004d9a:	4770      	bx	lr
			if (obj->objsize) {
 8004d9c:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
 8004da0:	ea56 0307 	orrs.w	r3, r6, r7
 8004da4:	d0ed      	beq.n	8004d82 <get_fat+0x12>
				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 8004da6:	79c3      	ldrb	r3, [r0, #7]
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 8004da8:	6882      	ldr	r2, [r0, #8]
				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 8004daa:	2b02      	cmp	r3, #2
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 8004dac:	eba1 0802 	sub.w	r8, r1, r2
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 8004db0:	89aa      	ldrh	r2, [r5, #12]
				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 8004db2:	f000 809a 	beq.w	8004eea <get_fat+0x17a>
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 8004db6:	2b03      	cmp	r3, #3
 8004db8:	f000 80a8 	beq.w	8004f0c <get_fat+0x19c>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 8004dbc:	69c3      	ldr	r3, [r0, #28]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	f040 80a8 	bne.w	8004f14 <get_fat+0x1a4>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004dc4:	0891      	lsrs	r1, r2, #2
 8004dc6:	6be8      	ldr	r0, [r5, #60]	; 0x3c
	if (sector != fs->winsect) {	/* Window offset changed? */
 8004dc8:	6cab      	ldr	r3, [r5, #72]	; 0x48
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004dca:	fbb4 f1f1 	udiv	r1, r4, r1
 8004dce:	4401      	add	r1, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 8004dd0:	4299      	cmp	r1, r3
 8004dd2:	d006      	beq.n	8004de2 <get_fat+0x72>
 8004dd4:	4628      	mov	r0, r5
 8004dd6:	f7ff fec3 	bl	8004b60 <move_window.part.0>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004dda:	2800      	cmp	r0, #0
 8004ddc:	f040 8082 	bne.w	8004ee4 <get_fat+0x174>
 8004de0:	89aa      	ldrh	r2, [r5, #12]
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 8004de2:	00a4      	lsls	r4, r4, #2
 8004de4:	354c      	adds	r5, #76	; 0x4c
 8004de6:	fbb4 f3f2 	udiv	r3, r4, r2
 8004dea:	fb02 4413 	mls	r4, r2, r3, r4
 8004dee:	192b      	adds	r3, r5, r4
	rv = rv << 8 | ptr[0];
 8004df0:	5d28      	ldrb	r0, [r5, r4]
	rv = rv << 8 | ptr[2];
 8004df2:	885a      	ldrh	r2, [r3, #2]
	rv = rv << 8 | ptr[1];
 8004df4:	785b      	ldrb	r3, [r3, #1]
 8004df6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 8004dfa:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 8004dfe:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004e02:	e7bf      	b.n	8004d84 <get_fat+0x14>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004e04:	89ab      	ldrh	r3, [r5, #12]
 8004e06:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 8004e08:	0899      	lsrs	r1, r3, #2
	if (sector != fs->winsect) {	/* Window offset changed? */
 8004e0a:	6caa      	ldr	r2, [r5, #72]	; 0x48
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004e0c:	fbb4 f1f1 	udiv	r1, r4, r1
 8004e10:	4401      	add	r1, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 8004e12:	4291      	cmp	r1, r2
 8004e14:	d005      	beq.n	8004e22 <get_fat+0xb2>
 8004e16:	4628      	mov	r0, r5
 8004e18:	f7ff fea2 	bl	8004b60 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004e1c:	2800      	cmp	r0, #0
 8004e1e:	d161      	bne.n	8004ee4 <get_fat+0x174>
 8004e20:	89ab      	ldrh	r3, [r5, #12]
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8004e22:	00a4      	lsls	r4, r4, #2
 8004e24:	354c      	adds	r5, #76	; 0x4c
 8004e26:	fbb4 f2f3 	udiv	r2, r4, r3
 8004e2a:	fb03 4312 	mls	r3, r3, r2, r4
 8004e2e:	18ea      	adds	r2, r5, r3
	rv = rv << 8 | ptr[0];
 8004e30:	5ce8      	ldrb	r0, [r5, r3]
	rv = rv << 8 | ptr[1];
 8004e32:	7854      	ldrb	r4, [r2, #1]
	rv = rv << 8 | ptr[2];
 8004e34:	8853      	ldrh	r3, [r2, #2]
	rv = rv << 8 | ptr[1];
 8004e36:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
	rv = rv << 8 | ptr[0];
 8004e3a:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8004e3e:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
			break;
 8004e42:	e79f      	b.n	8004d84 <get_fat+0x14>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004e44:	89ab      	ldrh	r3, [r5, #12]
 8004e46:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 8004e48:	0859      	lsrs	r1, r3, #1
	if (sector != fs->winsect) {	/* Window offset changed? */
 8004e4a:	6caa      	ldr	r2, [r5, #72]	; 0x48
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004e4c:	fbb4 f1f1 	udiv	r1, r4, r1
 8004e50:	4401      	add	r1, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 8004e52:	4291      	cmp	r1, r2
 8004e54:	d005      	beq.n	8004e62 <get_fat+0xf2>
 8004e56:	4628      	mov	r0, r5
 8004e58:	f7ff fe82 	bl	8004b60 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004e5c:	2800      	cmp	r0, #0
 8004e5e:	d141      	bne.n	8004ee4 <get_fat+0x174>
 8004e60:	89ab      	ldrh	r3, [r5, #12]
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8004e62:	0064      	lsls	r4, r4, #1
 8004e64:	354c      	adds	r5, #76	; 0x4c
 8004e66:	fbb4 f2f3 	udiv	r2, r4, r3
 8004e6a:	fb03 4312 	mls	r3, r3, r2, r4
 8004e6e:	18ea      	adds	r2, r5, r3
	rv = rv << 8 | ptr[0];
 8004e70:	5ce8      	ldrb	r0, [r5, r3]
 8004e72:	7854      	ldrb	r4, [r2, #1]
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8004e74:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
			break;
 8004e78:	e784      	b.n	8004d84 <get_fat+0x14>
			bc = (UINT)clst; bc += bc / 2;
 8004e7a:	eb01 0651 	add.w	r6, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004e7e:	89aa      	ldrh	r2, [r5, #12]
 8004e80:	6be8      	ldr	r0, [r5, #60]	; 0x3c
	if (sector != fs->winsect) {	/* Window offset changed? */
 8004e82:	f8d5 e048 	ldr.w	lr, [r5, #72]	; 0x48
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004e86:	fbb6 f3f2 	udiv	r3, r6, r2
 8004e8a:	1819      	adds	r1, r3, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 8004e8c:	4571      	cmp	r1, lr
 8004e8e:	d009      	beq.n	8004ea4 <get_fat+0x134>
 8004e90:	4628      	mov	r0, r5
 8004e92:	f7ff fe65 	bl	8004b60 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004e96:	bb28      	cbnz	r0, 8004ee4 <get_fat+0x174>
 8004e98:	89aa      	ldrh	r2, [r5, #12]
 8004e9a:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 8004e9c:	f8d5 e048 	ldr.w	lr, [r5, #72]	; 0x48
 8004ea0:	fbb6 f3f2 	udiv	r3, r6, r2
			wc = fs->win[bc++ % SS(fs)];
 8004ea4:	1c77      	adds	r7, r6, #1
 8004ea6:	fb02 6313 	mls	r3, r2, r3, r6
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004eaa:	fbb7 fcf2 	udiv	ip, r7, r2
 8004eae:	eb0c 0100 	add.w	r1, ip, r0
			wc = fs->win[bc++ % SS(fs)];
 8004eb2:	442b      	add	r3, r5
	if (sector != fs->winsect) {	/* Window offset changed? */
 8004eb4:	4571      	cmp	r1, lr
			wc = fs->win[bc++ % SS(fs)];
 8004eb6:	f893 604c 	ldrb.w	r6, [r3, #76]	; 0x4c
	if (sector != fs->winsect) {	/* Window offset changed? */
 8004eba:	d006      	beq.n	8004eca <get_fat+0x15a>
 8004ebc:	4628      	mov	r0, r5
 8004ebe:	f7ff fe4f 	bl	8004b60 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004ec2:	b978      	cbnz	r0, 8004ee4 <get_fat+0x174>
 8004ec4:	89aa      	ldrh	r2, [r5, #12]
 8004ec6:	fbb7 fcf2 	udiv	ip, r7, r2
			wc |= fs->win[bc % SS(fs)] << 8;
 8004eca:	fb02 721c 	mls	r2, r2, ip, r7
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8004ece:	07e3      	lsls	r3, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 8004ed0:	4415      	add	r5, r2
 8004ed2:	f895 004c 	ldrb.w	r0, [r5, #76]	; 0x4c
 8004ed6:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8004eda:	bf4c      	ite	mi
 8004edc:	0900      	lsrmi	r0, r0, #4
 8004ede:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
 8004ee2:	e74f      	b.n	8004d84 <get_fat+0x14>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ee8:	e74c      	b.n	8004d84 <get_fat+0x14>
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 8004eea:	f116 30ff 	adds.w	r0, r6, #4294967295
 8004eee:	f04f 0300 	mov.w	r3, #0
 8004ef2:	f147 31ff 	adc.w	r1, r7, #4294967295
 8004ef6:	f7fb f98f 	bl	8000218 <__aeabi_uldivmod>
 8004efa:	896b      	ldrh	r3, [r5, #10]
 8004efc:	fbb0 f0f3 	udiv	r0, r0, r3
					if (cofs <= clen) {
 8004f00:	4580      	cmp	r8, r0
 8004f02:	f63f af3e 	bhi.w	8004d82 <get_fat+0x12>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 8004f06:	d005      	beq.n	8004f14 <get_fat+0x1a4>
 8004f08:	1c60      	adds	r0, r4, #1
 8004f0a:	e73b      	b.n	8004d84 <get_fat+0x14>
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 8004f0c:	6983      	ldr	r3, [r0, #24]
 8004f0e:	4543      	cmp	r3, r8
 8004f10:	d8fa      	bhi.n	8004f08 <get_fat+0x198>
 8004f12:	e753      	b.n	8004dbc <get_fat+0x4c>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 8004f14:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	return val;
 8004f18:	e734      	b.n	8004d84 <get_fat+0x14>
 8004f1a:	bf00      	nop

08004f1c <dir_next.constprop.0>:
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
 8004f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8004f1e:	6b83      	ldr	r3, [r0, #56]	; 0x38
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8004f20:	6b05      	ldr	r5, [r0, #48]	; 0x30
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d037      	beq.n	8004f96 <dir_next.constprop.0+0x7a>
	FATFS *fs = dp->obj.fs;
 8004f26:	6806      	ldr	r6, [r0, #0]
 8004f28:	3520      	adds	r5, #32
 8004f2a:	4604      	mov	r4, r0
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8004f2c:	7832      	ldrb	r2, [r6, #0]
 8004f2e:	2a04      	cmp	r2, #4
 8004f30:	bf0c      	ite	eq
 8004f32:	f04f 5280 	moveq.w	r2, #268435456	; 0x10000000
 8004f36:	f44f 1200 	movne.w	r2, #2097152	; 0x200000
 8004f3a:	4295      	cmp	r5, r2
 8004f3c:	d22b      	bcs.n	8004f96 <dir_next.constprop.0+0x7a>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8004f3e:	89b2      	ldrh	r2, [r6, #12]
 8004f40:	fbb5 f7f2 	udiv	r7, r5, r2
 8004f44:	fb02 5217 	mls	r2, r2, r7, r5
 8004f48:	b9fa      	cbnz	r2, 8004f8a <dir_next.constprop.0+0x6e>
		dp->sect++;				/* Next sector */
 8004f4a:	3301      	adds	r3, #1
		if (!dp->clust) {		/* Static table */
 8004f4c:	6b41      	ldr	r1, [r0, #52]	; 0x34
		dp->sect++;				/* Next sector */
 8004f4e:	6383      	str	r3, [r0, #56]	; 0x38
		if (!dp->clust) {		/* Static table */
 8004f50:	b319      	cbz	r1, 8004f9a <dir_next.constprop.0+0x7e>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8004f52:	8973      	ldrh	r3, [r6, #10]
 8004f54:	3b01      	subs	r3, #1
 8004f56:	401f      	ands	r7, r3
 8004f58:	d117      	bne.n	8004f8a <dir_next.constprop.0+0x6e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8004f5a:	f7ff ff09 	bl	8004d70 <get_fat>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8004f5e:	2801      	cmp	r0, #1
 8004f60:	d923      	bls.n	8004faa <dir_next.constprop.0+0x8e>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8004f62:	1c43      	adds	r3, r0, #1
 8004f64:	d023      	beq.n	8004fae <dir_next.constprop.0+0x92>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8004f66:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8004f68:	4298      	cmp	r0, r3
 8004f6a:	d21a      	bcs.n	8004fa2 <dir_next.constprop.0+0x86>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004f6c:	3b02      	subs	r3, #2
	clst -= 2;
 8004f6e:	1e82      	subs	r2, r0, #2
				dp->clust = clst;		/* Initialize data for new cluster */
 8004f70:	6360      	str	r0, [r4, #52]	; 0x34
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004f72:	429a      	cmp	r2, r3
 8004f74:	d203      	bcs.n	8004f7e <dir_next.constprop.0+0x62>
	return clst * fs->csize + fs->database;
 8004f76:	8977      	ldrh	r7, [r6, #10]
 8004f78:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8004f7a:	fb02 3707 	mla	r7, r2, r7, r3
 8004f7e:	89b3      	ldrh	r3, [r6, #12]
				dp->sect = clust2sect(fs, clst);
 8004f80:	63a7      	str	r7, [r4, #56]	; 0x38
 8004f82:	fbb5 f2f3 	udiv	r2, r5, r3
 8004f86:	fb03 5212 	mls	r2, r3, r2, r5
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8004f8a:	364c      	adds	r6, #76	; 0x4c
	return FR_OK;
 8004f8c:	2000      	movs	r0, #0
	dp->dptr = ofs;						/* Current entry */
 8004f8e:	6325      	str	r5, [r4, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8004f90:	4416      	add	r6, r2
 8004f92:	63e6      	str	r6, [r4, #60]	; 0x3c
}
 8004f94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8004f96:	2004      	movs	r0, #4
}
 8004f98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8004f9a:	8933      	ldrh	r3, [r6, #8]
 8004f9c:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
 8004fa0:	d8f3      	bhi.n	8004f8a <dir_next.constprop.0+0x6e>
				dp->sect = 0; return FR_NO_FILE;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	2004      	movs	r0, #4
 8004fa6:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8004fa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8004faa:	2002      	movs	r0, #2
}
 8004fac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8004fae:	2001      	movs	r0, #1
}
 8004fb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004fb2:	bf00      	nop

08004fb4 <load_xdir>:
{
 8004fb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004fb8:	4604      	mov	r4, r0
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 8004fba:	6800      	ldr	r0, [r0, #0]
	res = move_window(dp->obj.fs, dp->sect);
 8004fbc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
	if (sector != fs->winsect) {	/* Window offset changed? */
 8004fbe:	6c83      	ldr	r3, [r0, #72]	; 0x48
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 8004fc0:	6946      	ldr	r6, [r0, #20]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8004fc2:	4299      	cmp	r1, r3
 8004fc4:	d003      	beq.n	8004fce <load_xdir+0x1a>
 8004fc6:	f7ff fdcb 	bl	8004b60 <move_window.part.0>
	if (res != FR_OK) return res;
 8004fca:	4605      	mov	r5, r0
 8004fcc:	b920      	cbnz	r0, 8004fd8 <load_xdir+0x24>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 8004fce:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004fd0:	781a      	ldrb	r2, [r3, #0]
 8004fd2:	2a85      	cmp	r2, #133	; 0x85
 8004fd4:	d003      	beq.n	8004fde <load_xdir+0x2a>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 8004fd6:	2502      	movs	r5, #2
}
 8004fd8:	4628      	mov	r0, r5
 8004fda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004fde:	1cda      	adds	r2, r3, #3
 8004fe0:	1b92      	subs	r2, r2, r6
 8004fe2:	2a06      	cmp	r2, #6
 8004fe4:	f240 8090 	bls.w	8005108 <load_xdir+0x154>
			*d++ = *s++;
 8004fe8:	681a      	ldr	r2, [r3, #0]
 8004fea:	6032      	str	r2, [r6, #0]
 8004fec:	685a      	ldr	r2, [r3, #4]
 8004fee:	6072      	str	r2, [r6, #4]
 8004ff0:	689a      	ldr	r2, [r3, #8]
 8004ff2:	60b2      	str	r2, [r6, #8]
 8004ff4:	68da      	ldr	r2, [r3, #12]
 8004ff6:	60f2      	str	r2, [r6, #12]
 8004ff8:	691a      	ldr	r2, [r3, #16]
 8004ffa:	6132      	str	r2, [r6, #16]
 8004ffc:	695a      	ldr	r2, [r3, #20]
 8004ffe:	6172      	str	r2, [r6, #20]
 8005000:	699a      	ldr	r2, [r3, #24]
 8005002:	61b2      	str	r2, [r6, #24]
 8005004:	69db      	ldr	r3, [r3, #28]
 8005006:	61f3      	str	r3, [r6, #28]
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 8005008:	7873      	ldrb	r3, [r6, #1]
 800500a:	3301      	adds	r3, #1
 800500c:	015f      	lsls	r7, r3, #5
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 800500e:	f1a7 0360 	sub.w	r3, r7, #96	; 0x60
 8005012:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005016:	d8de      	bhi.n	8004fd6 <load_xdir+0x22>
	res = dir_next(dp, 0);
 8005018:	4620      	mov	r0, r4
 800501a:	f7ff ff7f 	bl	8004f1c <dir_next.constprop.0>
	if (res != FR_OK) return res;
 800501e:	4605      	mov	r5, r0
 8005020:	2800      	cmp	r0, #0
 8005022:	d1d9      	bne.n	8004fd8 <load_xdir+0x24>
	res = move_window(dp->obj.fs, dp->sect);
 8005024:	6820      	ldr	r0, [r4, #0]
 8005026:	6ba1      	ldr	r1, [r4, #56]	; 0x38
	if (sector != fs->winsect) {	/* Window offset changed? */
 8005028:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800502a:	4299      	cmp	r1, r3
 800502c:	d004      	beq.n	8005038 <load_xdir+0x84>
 800502e:	f7ff fd97 	bl	8004b60 <move_window.part.0>
	if (res != FR_OK) return res;
 8005032:	4605      	mov	r5, r0
 8005034:	2800      	cmp	r0, #0
 8005036:	d1cf      	bne.n	8004fd8 <load_xdir+0x24>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 8005038:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800503a:	781a      	ldrb	r2, [r3, #0]
 800503c:	2ac0      	cmp	r2, #192	; 0xc0
 800503e:	d1ca      	bne.n	8004fd6 <load_xdir+0x22>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 8005040:	f106 0220 	add.w	r2, r6, #32
 8005044:	1d19      	adds	r1, r3, #4
 8005046:	428a      	cmp	r2, r1
 8005048:	d204      	bcs.n	8005054 <load_xdir+0xa0>
 800504a:	f106 0224 	add.w	r2, r6, #36	; 0x24
 800504e:	4293      	cmp	r3, r2
 8005050:	f0c0 809b 	bcc.w	800518a <load_xdir+0x1d6>
			*d++ = *s++;
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	6232      	str	r2, [r6, #32]
 8005058:	685a      	ldr	r2, [r3, #4]
 800505a:	6272      	str	r2, [r6, #36]	; 0x24
 800505c:	689a      	ldr	r2, [r3, #8]
 800505e:	62b2      	str	r2, [r6, #40]	; 0x28
 8005060:	68da      	ldr	r2, [r3, #12]
 8005062:	62f2      	str	r2, [r6, #44]	; 0x2c
 8005064:	691a      	ldr	r2, [r3, #16]
 8005066:	6332      	str	r2, [r6, #48]	; 0x30
 8005068:	695a      	ldr	r2, [r3, #20]
 800506a:	6372      	str	r2, [r6, #52]	; 0x34
 800506c:	699a      	ldr	r2, [r3, #24]
 800506e:	63b2      	str	r2, [r6, #56]	; 0x38
 8005070:	69db      	ldr	r3, [r3, #28]
 8005072:	63f3      	str	r3, [r6, #60]	; 0x3c
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 8005074:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
 8005078:	4a4a      	ldr	r2, [pc, #296]	; (80051a4 <load_xdir+0x1f0>)
 800507a:	332c      	adds	r3, #44	; 0x2c
 800507c:	fba2 2303 	umull	r2, r3, r2, r3
 8005080:	08db      	lsrs	r3, r3, #3
 8005082:	ebb7 1f43 	cmp.w	r7, r3, lsl #5
 8005086:	d3a6      	bcc.n	8004fd6 <load_xdir+0x22>
 8005088:	f106 0844 	add.w	r8, r6, #68	; 0x44
	i = SZDIRE * 2;	/* C1 offset */
 800508c:	f04f 0940 	mov.w	r9, #64	; 0x40
 8005090:	e005      	b.n	800509e <load_xdir+0xea>
	} while ((i += SZDIRE) < sz_ent);
 8005092:	f109 0920 	add.w	r9, r9, #32
 8005096:	f108 0820 	add.w	r8, r8, #32
 800509a:	454f      	cmp	r7, r9
 800509c:	d949      	bls.n	8005132 <load_xdir+0x17e>
		res = dir_next(dp, 0);
 800509e:	4620      	mov	r0, r4
 80050a0:	f7ff ff3c 	bl	8004f1c <dir_next.constprop.0>
		if (res != FR_OK) return res;
 80050a4:	4605      	mov	r5, r0
 80050a6:	2800      	cmp	r0, #0
 80050a8:	d196      	bne.n	8004fd8 <load_xdir+0x24>
		res = move_window(dp->obj.fs, dp->sect);
 80050aa:	6820      	ldr	r0, [r4, #0]
 80050ac:	6ba1      	ldr	r1, [r4, #56]	; 0x38
	if (sector != fs->winsect) {	/* Window offset changed? */
 80050ae:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80050b0:	4299      	cmp	r1, r3
 80050b2:	d003      	beq.n	80050bc <load_xdir+0x108>
 80050b4:	f7ff fd54 	bl	8004b60 <move_window.part.0>
		if (res != FR_OK) return res;
 80050b8:	2800      	cmp	r0, #0
 80050ba:	d171      	bne.n	80051a0 <load_xdir+0x1ec>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 80050bc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80050be:	781a      	ldrb	r2, [r3, #0]
 80050c0:	2ac1      	cmp	r2, #193	; 0xc1
 80050c2:	d188      	bne.n	8004fd6 <load_xdir+0x22>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 80050c4:	f5b9 7f18 	cmp.w	r9, #608	; 0x260
 80050c8:	d2e3      	bcs.n	8005092 <load_xdir+0xde>
 80050ca:	f1a8 0204 	sub.w	r2, r8, #4
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80050ce:	1d19      	adds	r1, r3, #4
 80050d0:	428a      	cmp	r2, r1
 80050d2:	d201      	bcs.n	80050d8 <load_xdir+0x124>
 80050d4:	4543      	cmp	r3, r8
 80050d6:	d321      	bcc.n	800511c <load_xdir+0x168>
			*d++ = *s++;
 80050d8:	6819      	ldr	r1, [r3, #0]
 80050da:	6011      	str	r1, [r2, #0]
 80050dc:	685a      	ldr	r2, [r3, #4]
 80050de:	f8c8 2000 	str.w	r2, [r8]
 80050e2:	689a      	ldr	r2, [r3, #8]
 80050e4:	f8c8 2004 	str.w	r2, [r8, #4]
 80050e8:	68da      	ldr	r2, [r3, #12]
 80050ea:	f8c8 2008 	str.w	r2, [r8, #8]
 80050ee:	691a      	ldr	r2, [r3, #16]
 80050f0:	f8c8 200c 	str.w	r2, [r8, #12]
 80050f4:	695a      	ldr	r2, [r3, #20]
 80050f6:	f8c8 2010 	str.w	r2, [r8, #16]
 80050fa:	699a      	ldr	r2, [r3, #24]
 80050fc:	f8c8 2014 	str.w	r2, [r8, #20]
 8005100:	69db      	ldr	r3, [r3, #28]
 8005102:	f8c8 3018 	str.w	r3, [r8, #24]
		} while (--cnt);
 8005106:	e7c4      	b.n	8005092 <load_xdir+0xde>
 8005108:	1e72      	subs	r2, r6, #1
 800510a:	f103 0020 	add.w	r0, r3, #32
			*d++ = *s++;
 800510e:	f813 1b01 	ldrb.w	r1, [r3], #1
		} while (--cnt);
 8005112:	4283      	cmp	r3, r0
			*d++ = *s++;
 8005114:	f802 1f01 	strb.w	r1, [r2, #1]!
		} while (--cnt);
 8005118:	d1f9      	bne.n	800510e <load_xdir+0x15a>
 800511a:	e775      	b.n	8005008 <load_xdir+0x54>
 800511c:	f1a8 0205 	sub.w	r2, r8, #5
 8005120:	f103 0020 	add.w	r0, r3, #32
			*d++ = *s++;
 8005124:	f813 1b01 	ldrb.w	r1, [r3], #1
		} while (--cnt);
 8005128:	4283      	cmp	r3, r0
			*d++ = *s++;
 800512a:	f802 1f01 	strb.w	r1, [r2, #1]!
		} while (--cnt);
 800512e:	d1f9      	bne.n	8005124 <load_xdir+0x170>
 8005130:	e7af      	b.n	8005092 <load_xdir+0xde>
	if (i <= MAXDIRB(_MAX_LFN)) {
 8005132:	f5b9 7f18 	cmp.w	r9, #608	; 0x260
 8005136:	f63f af4f 	bhi.w	8004fd8 <load_xdir+0x24>
	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 800513a:	7874      	ldrb	r4, [r6, #1]
	for (i = sum = 0; i < szblk; i++) {
 800513c:	2100      	movs	r1, #0
	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 800513e:	3401      	adds	r4, #1
	for (i = sum = 0; i < szblk; i++) {
 8005140:	4608      	mov	r0, r1
	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 8005142:	0164      	lsls	r4, r4, #5
		if (i == XDIR_SetSum) {	/* Skip sum field */
 8005144:	2802      	cmp	r0, #2
 8005146:	d10e      	bne.n	8005166 <load_xdir+0x1b2>
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 8005148:	7933      	ldrb	r3, [r6, #4]
	for (i = sum = 0; i < szblk; i++) {
 800514a:	2006      	movs	r0, #6
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 800514c:	7972      	ldrb	r2, [r6, #5]
 800514e:	eb03 33c1 	add.w	r3, r3, r1, lsl #15
 8005152:	b29b      	uxth	r3, r3
 8005154:	eb03 0351 	add.w	r3, r3, r1, lsr #1
 8005158:	f3c3 014e 	ubfx	r1, r3, #1, #15
 800515c:	eb02 33c3 	add.w	r3, r2, r3, lsl #15
 8005160:	fa11 f383 	uxtah	r3, r1, r3
 8005164:	b299      	uxth	r1, r3
 8005166:	5c33      	ldrb	r3, [r6, r0]
	for (i = sum = 0; i < szblk; i++) {
 8005168:	3001      	adds	r0, #1
 800516a:	eb03 33c1 	add.w	r3, r3, r1, lsl #15
 800516e:	4284      	cmp	r4, r0
 8005170:	b29b      	uxth	r3, r3
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 8005172:	eb03 0351 	add.w	r3, r3, r1, lsr #1
 8005176:	b299      	uxth	r1, r3
	for (i = sum = 0; i < szblk; i++) {
 8005178:	d8e4      	bhi.n	8005144 <load_xdir+0x190>
	rv = rv << 8 | ptr[0];
 800517a:	78f2      	ldrb	r2, [r6, #3]
 800517c:	78b3      	ldrb	r3, [r6, #2]
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 800517e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005182:	428b      	cmp	r3, r1
 8005184:	f43f af28 	beq.w	8004fd8 <load_xdir+0x24>
 8005188:	e725      	b.n	8004fd6 <load_xdir+0x22>
 800518a:	f106 021f 	add.w	r2, r6, #31
 800518e:	f103 0020 	add.w	r0, r3, #32
			*d++ = *s++;
 8005192:	f813 1b01 	ldrb.w	r1, [r3], #1
		} while (--cnt);
 8005196:	4298      	cmp	r0, r3
			*d++ = *s++;
 8005198:	f802 1f01 	strb.w	r1, [r2, #1]!
		} while (--cnt);
 800519c:	d1f9      	bne.n	8005192 <load_xdir+0x1de>
 800519e:	e769      	b.n	8005074 <load_xdir+0xc0>
 80051a0:	4605      	mov	r5, r0
 80051a2:	e719      	b.n	8004fd8 <load_xdir+0x24>
 80051a4:	88888889 	.word	0x88888889

080051a8 <dir_read.constprop.0>:
FRESULT dir_read (
 80051a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	while (dp->sect) {
 80051ac:	6b86      	ldr	r6, [r0, #56]	; 0x38
FRESULT dir_read (
 80051ae:	b083      	sub	sp, #12
 80051b0:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 80051b2:	6807      	ldr	r7, [r0, #0]
	while (dp->sect) {
 80051b4:	2e00      	cmp	r6, #0
 80051b6:	d064      	beq.n	8005282 <dir_read.constprop.0+0xda>
	BYTE ord = 0xFF, sum = 0xFF;
 80051b8:	f04f 0aff 	mov.w	sl, #255	; 0xff
 80051bc:	f107 084c 	add.w	r8, r7, #76	; 0x4c
 80051c0:	46d1      	mov	r9, sl
	if (sector != fs->winsect) {	/* Window offset changed? */
 80051c2:	6cbd      	ldr	r5, [r7, #72]	; 0x48
 80051c4:	42b5      	cmp	r5, r6
 80051c6:	d013      	beq.n	80051f0 <dir_read.constprop.0+0x48>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80051c8:	78fb      	ldrb	r3, [r7, #3]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d16f      	bne.n	80052ae <dir_read.constprop.0+0x106>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80051ce:	2301      	movs	r3, #1
 80051d0:	4632      	mov	r2, r6
 80051d2:	4641      	mov	r1, r8
 80051d4:	7878      	ldrb	r0, [r7, #1]
 80051d6:	f7ff fa8d 	bl	80046f4 <disk_read>
 80051da:	b140      	cbz	r0, 80051ee <dir_read.constprop.0+0x46>
			fs->winsect = sector;
 80051dc:	f04f 33ff 	mov.w	r3, #4294967295
				res = FR_DISK_ERR;
 80051e0:	2001      	movs	r0, #1
			fs->winsect = sector;
 80051e2:	64bb      	str	r3, [r7, #72]	; 0x48
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 80051e4:	2300      	movs	r3, #0
 80051e6:	63a3      	str	r3, [r4, #56]	; 0x38
}
 80051e8:	b003      	add	sp, #12
 80051ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
 80051ee:	64be      	str	r6, [r7, #72]	; 0x48
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 80051f0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80051f2:	780b      	ldrb	r3, [r1, #0]
		if (c == 0) {
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d044      	beq.n	8005282 <dir_read.constprop.0+0xda>
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 80051f8:	783a      	ldrb	r2, [r7, #0]
 80051fa:	2a04      	cmp	r2, #4
 80051fc:	d043      	beq.n	8005286 <dir_read.constprop.0+0xde>
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 80051fe:	7aca      	ldrb	r2, [r1, #11]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8005200:	2be5      	cmp	r3, #229	; 0xe5
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8005202:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8005206:	71a2      	strb	r2, [r4, #6]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8005208:	d005      	beq.n	8005216 <dir_read.constprop.0+0x6e>
 800520a:	2b2e      	cmp	r3, #46	; 0x2e
 800520c:	d003      	beq.n	8005216 <dir_read.constprop.0+0x6e>
 800520e:	f022 0020 	bic.w	r0, r2, #32
 8005212:	2808      	cmp	r0, #8
 8005214:	d178      	bne.n	8005308 <dir_read.constprop.0+0x160>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8005216:	f04f 09ff 	mov.w	r9, #255	; 0xff
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800521a:	6b23      	ldr	r3, [r4, #48]	; 0x30
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800521c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800521e:	3320      	adds	r3, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8005220:	2e00      	cmp	r6, #0
 8005222:	d02e      	beq.n	8005282 <dir_read.constprop.0+0xda>
	FATFS *fs = dp->obj.fs;
 8005224:	6825      	ldr	r5, [r4, #0]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8005226:	782a      	ldrb	r2, [r5, #0]
 8005228:	2a04      	cmp	r2, #4
 800522a:	bf0c      	ite	eq
 800522c:	f04f 5280 	moveq.w	r2, #268435456	; 0x10000000
 8005230:	f44f 1200 	movne.w	r2, #2097152	; 0x200000
 8005234:	4293      	cmp	r3, r2
 8005236:	d224      	bcs.n	8005282 <dir_read.constprop.0+0xda>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8005238:	89aa      	ldrh	r2, [r5, #12]
 800523a:	fbb3 f0f2 	udiv	r0, r3, r2
 800523e:	fb02 3210 	mls	r2, r2, r0, r3
 8005242:	2a00      	cmp	r2, #0
 8005244:	d12e      	bne.n	80052a4 <dir_read.constprop.0+0xfc>
		dp->sect++;				/* Next sector */
 8005246:	3601      	adds	r6, #1
		if (!dp->clust) {		/* Static table */
 8005248:	6b61      	ldr	r1, [r4, #52]	; 0x34
		dp->sect++;				/* Next sector */
 800524a:	63a6      	str	r6, [r4, #56]	; 0x38
		if (!dp->clust) {		/* Static table */
 800524c:	2900      	cmp	r1, #0
 800524e:	d137      	bne.n	80052c0 <dir_read.constprop.0+0x118>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8005250:	892a      	ldrh	r2, [r5, #8]
 8005252:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
 8005256:	d914      	bls.n	8005282 <dir_read.constprop.0+0xda>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8005258:	354c      	adds	r5, #76	; 0x4c
	dp->dptr = ofs;						/* Current entry */
 800525a:	6323      	str	r3, [r4, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800525c:	440d      	add	r5, r1
 800525e:	63e5      	str	r5, [r4, #60]	; 0x3c
	while (dp->sect) {
 8005260:	2e00      	cmp	r6, #0
 8005262:	d1ae      	bne.n	80051c2 <dir_read.constprop.0+0x1a>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8005264:	2000      	movs	r0, #0
}
 8005266:	b003      	add	sp, #12
 8005268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800526c:	4620      	mov	r0, r4
 800526e:	9301      	str	r3, [sp, #4]
 8005270:	f7ff fd7e 	bl	8004d70 <get_fat>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8005274:	2801      	cmp	r0, #1
 8005276:	d975      	bls.n	8005364 <dir_read.constprop.0+0x1bc>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8005278:	1c43      	adds	r3, r0, #1
 800527a:	d01f      	beq.n	80052bc <dir_read.constprop.0+0x114>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800527c:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800527e:	4290      	cmp	r0, r2
 8005280:	d35f      	bcc.n	8005342 <dir_read.constprop.0+0x19a>
	FRESULT res = FR_NO_FILE;
 8005282:	2004      	movs	r0, #4
 8005284:	e7ae      	b.n	80051e4 <dir_read.constprop.0+0x3c>
				if (c == 0x85) {		/* Start of the file entry block? */
 8005286:	2b85      	cmp	r3, #133	; 0x85
 8005288:	d1c7      	bne.n	800521a <dir_read.constprop.0+0x72>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 800528a:	6b23      	ldr	r3, [r4, #48]	; 0x30
					res = load_xdir(dp);	/* Load the entry block */
 800528c:	4620      	mov	r0, r4
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 800528e:	64e3      	str	r3, [r4, #76]	; 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 8005290:	f7ff fe90 	bl	8004fb4 <load_xdir>
					if (res == FR_OK) {
 8005294:	2800      	cmp	r0, #0
 8005296:	d1a5      	bne.n	80051e4 <dir_read.constprop.0+0x3c>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	791b      	ldrb	r3, [r3, #4]
 800529c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80052a0:	71a3      	strb	r3, [r4, #6]
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 80052a2:	e7a1      	b.n	80051e8 <dir_read.constprop.0+0x40>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80052a4:	354c      	adds	r5, #76	; 0x4c
	dp->dptr = ofs;						/* Current entry */
 80052a6:	6323      	str	r3, [r4, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80052a8:	4415      	add	r5, r2
 80052aa:	63e5      	str	r5, [r4, #60]	; 0x3c
	while (dp->sect) {
 80052ac:	e789      	b.n	80051c2 <dir_read.constprop.0+0x1a>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80052ae:	2301      	movs	r3, #1
 80052b0:	462a      	mov	r2, r5
 80052b2:	4641      	mov	r1, r8
 80052b4:	7878      	ldrb	r0, [r7, #1]
 80052b6:	f7ff fa2b 	bl	8004710 <disk_write>
 80052ba:	b150      	cbz	r0, 80052d2 <dir_read.constprop.0+0x12a>
				res = FR_DISK_ERR;
 80052bc:	2001      	movs	r0, #1
 80052be:	e791      	b.n	80051e4 <dir_read.constprop.0+0x3c>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80052c0:	f8b5 b00a 	ldrh.w	fp, [r5, #10]
 80052c4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80052c8:	ea1b 0b00 	ands.w	fp, fp, r0
 80052cc:	d0ce      	beq.n	800526c <dir_read.constprop.0+0xc4>
 80052ce:	4611      	mov	r1, r2
 80052d0:	e7c2      	b.n	8005258 <dir_read.constprop.0+0xb0>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80052d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80052d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052d6:	1aaa      	subs	r2, r5, r2
			fs->wflag = 0;
 80052d8:	70f8      	strb	r0, [r7, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80052da:	429a      	cmp	r2, r3
 80052dc:	f4bf af77 	bcs.w	80051ce <dir_read.constprop.0+0x26>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80052e0:	f897 b002 	ldrb.w	fp, [r7, #2]
 80052e4:	f1bb 0f01 	cmp.w	fp, #1
 80052e8:	d801      	bhi.n	80052ee <dir_read.constprop.0+0x146>
 80052ea:	e770      	b.n	80051ce <dir_read.constprop.0+0x26>
 80052ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
					wsect += fs->fsize;
 80052ee:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80052f0:	f10b 3bff 	add.w	fp, fp, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 80052f4:	2301      	movs	r3, #1
 80052f6:	4641      	mov	r1, r8
 80052f8:	462a      	mov	r2, r5
 80052fa:	7878      	ldrb	r0, [r7, #1]
 80052fc:	f7ff fa08 	bl	8004710 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005300:	f1bb 0f01 	cmp.w	fp, #1
 8005304:	d1f2      	bne.n	80052ec <dir_read.constprop.0+0x144>
 8005306:	e762      	b.n	80051ce <dir_read.constprop.0+0x26>
				if (a == AM_LFN) {			/* An LFN entry is found */
 8005308:	2a0f      	cmp	r2, #15
 800530a:	d12f      	bne.n	800536c <dir_read.constprop.0+0x1c4>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800530c:	065a      	lsls	r2, r3, #25
 800530e:	d514      	bpl.n	800533a <dir_read.constprop.0+0x192>
						dp->blk_ofs = dp->dptr;
 8005310:	6b22      	ldr	r2, [r4, #48]	; 0x30
						c &= (BYTE)~LLEF; ord = c;
 8005312:	f003 09bf 	and.w	r9, r3, #191	; 0xbf
						sum = dp->dir[LDIR_Chksum];
 8005316:	f891 a00d 	ldrb.w	sl, [r1, #13]
						dp->blk_ofs = dp->dptr;
 800531a:	64e2      	str	r2, [r4, #76]	; 0x4c
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800531c:	7b4b      	ldrb	r3, [r1, #13]
 800531e:	4553      	cmp	r3, sl
 8005320:	f47f af79 	bne.w	8005216 <dir_read.constprop.0+0x6e>
 8005324:	6938      	ldr	r0, [r7, #16]
 8005326:	f7ff fa0f 	bl	8004748 <pick_lfn>
 800532a:	2800      	cmp	r0, #0
 800532c:	f43f af73 	beq.w	8005216 <dir_read.constprop.0+0x6e>
 8005330:	f109 39ff 	add.w	r9, r9, #4294967295
 8005334:	fa5f f989 	uxtb.w	r9, r9
 8005338:	e76f      	b.n	800521a <dir_read.constprop.0+0x72>
 800533a:	454b      	cmp	r3, r9
 800533c:	f47f af6b 	bne.w	8005216 <dir_read.constprop.0+0x6e>
 8005340:	e7ec      	b.n	800531c <dir_read.constprop.0+0x174>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005342:	3a02      	subs	r2, #2
	clst -= 2;
 8005344:	1e81      	subs	r1, r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005346:	9b01      	ldr	r3, [sp, #4]
 8005348:	4291      	cmp	r1, r2
				dp->clust = clst;		/* Initialize data for new cluster */
 800534a:	6360      	str	r0, [r4, #52]	; 0x34
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800534c:	d20c      	bcs.n	8005368 <dir_read.constprop.0+0x1c0>
	return clst * fs->csize + fs->database;
 800534e:	896e      	ldrh	r6, [r5, #10]
 8005350:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 8005352:	fb01 2606 	mla	r6, r1, r6, r2
 8005356:	89aa      	ldrh	r2, [r5, #12]
				dp->sect = clust2sect(fs, clst);
 8005358:	63a6      	str	r6, [r4, #56]	; 0x38
 800535a:	fbb3 f1f2 	udiv	r1, r3, r2
 800535e:	fb02 3111 	mls	r1, r2, r1, r3
 8005362:	e779      	b.n	8005258 <dir_read.constprop.0+0xb0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8005364:	2002      	movs	r0, #2
 8005366:	e73d      	b.n	80051e4 <dir_read.constprop.0+0x3c>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005368:	465e      	mov	r6, fp
 800536a:	e7f4      	b.n	8005356 <dir_read.constprop.0+0x1ae>
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800536c:	f1b9 0f00 	cmp.w	r9, #0
 8005370:	d148      	bne.n	8005404 <dir_read.constprop.0+0x25c>
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8005372:	780a      	ldrb	r2, [r1, #0]
 8005374:	784e      	ldrb	r6, [r1, #1]
 8005376:	01d3      	lsls	r3, r2, #7
 8005378:	788d      	ldrb	r5, [r1, #2]
 800537a:	78c8      	ldrb	r0, [r1, #3]
 800537c:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
 8005380:	199a      	adds	r2, r3, r6
 8005382:	790e      	ldrb	r6, [r1, #4]
 8005384:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8005388:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800538c:	fa55 f283 	uxtab	r2, r5, r3
 8005390:	794d      	ldrb	r5, [r1, #5]
 8005392:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8005396:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800539a:	fa50 f283 	uxtab	r2, r0, r3
 800539e:	7988      	ldrb	r0, [r1, #6]
 80053a0:	f3c2 0346 	ubfx	r3, r2, #1, #7
 80053a4:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 80053a8:	fa56 f283 	uxtab	r2, r6, r3
 80053ac:	79ce      	ldrb	r6, [r1, #7]
 80053ae:	f3c2 0346 	ubfx	r3, r2, #1, #7
 80053b2:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 80053b6:	fa55 f283 	uxtab	r2, r5, r3
 80053ba:	7a0d      	ldrb	r5, [r1, #8]
 80053bc:	f3c2 0346 	ubfx	r3, r2, #1, #7
 80053c0:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 80053c4:	fa50 f283 	uxtab	r2, r0, r3
 80053c8:	7a48      	ldrb	r0, [r1, #9]
 80053ca:	7a89      	ldrb	r1, [r1, #10]
 80053cc:	f3c2 0346 	ubfx	r3, r2, #1, #7
 80053d0:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 80053d4:	fa56 f283 	uxtab	r2, r6, r3
 80053d8:	f3c2 0346 	ubfx	r3, r2, #1, #7
 80053dc:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 80053e0:	fa55 f283 	uxtab	r2, r5, r3
 80053e4:	f3c2 0346 	ubfx	r3, r2, #1, #7
 80053e8:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 80053ec:	fa50 f283 	uxtab	r2, r0, r3
 80053f0:	f3c2 0346 	ubfx	r3, r2, #1, #7
 80053f4:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 80053f8:	fa51 f383 	uxtab	r3, r1, r3
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	459a      	cmp	sl, r3
 8005400:	f43f af30 	beq.w	8005264 <dir_read.constprop.0+0xbc>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8005404:	f04f 33ff 	mov.w	r3, #4294967295
 8005408:	2000      	movs	r0, #0
 800540a:	64e3      	str	r3, [r4, #76]	; 0x4c
 800540c:	e6ec      	b.n	80051e8 <dir_read.constprop.0+0x40>
 800540e:	bf00      	nop

08005410 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8005410:	b570      	push	{r4, r5, r6, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8005412:	f04f 36ff 	mov.w	r6, #4294967295
 8005416:	2300      	movs	r3, #0
{
 8005418:	4604      	mov	r4, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 800541a:	42b1      	cmp	r1, r6
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800541c:	70c3      	strb	r3, [r0, #3]
 800541e:	6486      	str	r6, [r0, #72]	; 0x48
	if (sector != fs->winsect) {	/* Window offset changed? */
 8005420:	d00c      	beq.n	800543c <check_fs+0x2c>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005422:	460d      	mov	r5, r1
 8005424:	460a      	mov	r2, r1
 8005426:	2301      	movs	r3, #1
 8005428:	f100 014c 	add.w	r1, r0, #76	; 0x4c
 800542c:	7840      	ldrb	r0, [r0, #1]
 800542e:	f7ff f961 	bl	80046f4 <disk_read>
 8005432:	b110      	cbz	r0, 800543a <check_fs+0x2a>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8005434:	2004      	movs	r0, #4
			fs->winsect = sector;
 8005436:	64a6      	str	r6, [r4, #72]	; 0x48
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
}
 8005438:	bd70      	pop	{r4, r5, r6, pc}
			fs->winsect = sector;
 800543a:	64a5      	str	r5, [r4, #72]	; 0x48
	rv = rv << 8 | ptr[0];
 800543c:	f894 124b 	ldrb.w	r1, [r4, #587]	; 0x24b
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8005440:	f64a 2255 	movw	r2, #43605	; 0xaa55
	rv = rv << 8 | ptr[0];
 8005444:	f894 324a 	ldrb.w	r3, [r4, #586]	; 0x24a
 8005448:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800544c:	4293      	cmp	r3, r2
 800544e:	d154      	bne.n	80054fa <check_fs+0xea>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8005450:	f894 204c 	ldrb.w	r2, [r4, #76]	; 0x4c
 8005454:	2ae9      	cmp	r2, #233	; 0xe9
 8005456:	d032      	beq.n	80054be <check_fs+0xae>
 8005458:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800545a:	492a      	ldr	r1, [pc, #168]	; (8005504 <check_fs+0xf4>)
 800545c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8005460:	428b      	cmp	r3, r1
 8005462:	d02c      	beq.n	80054be <check_fs+0xae>
	} while (--cnt && r == 0);
 8005464:	2aeb      	cmp	r2, #235	; 0xeb
 8005466:	d14a      	bne.n	80054fe <check_fs+0xee>
 8005468:	f894 304d 	ldrb.w	r3, [r4, #77]	; 0x4d
 800546c:	2b76      	cmp	r3, #118	; 0x76
 800546e:	d146      	bne.n	80054fe <check_fs+0xee>
 8005470:	f894 304e 	ldrb.w	r3, [r4, #78]	; 0x4e
 8005474:	2b90      	cmp	r3, #144	; 0x90
 8005476:	d142      	bne.n	80054fe <check_fs+0xee>
 8005478:	f894 304f 	ldrb.w	r3, [r4, #79]	; 0x4f
 800547c:	2b45      	cmp	r3, #69	; 0x45
 800547e:	d13e      	bne.n	80054fe <check_fs+0xee>
 8005480:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8005484:	2b58      	cmp	r3, #88	; 0x58
 8005486:	d13a      	bne.n	80054fe <check_fs+0xee>
 8005488:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 800548c:	2b46      	cmp	r3, #70	; 0x46
 800548e:	d136      	bne.n	80054fe <check_fs+0xee>
 8005490:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
 8005494:	2b41      	cmp	r3, #65	; 0x41
 8005496:	d132      	bne.n	80054fe <check_fs+0xee>
 8005498:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
 800549c:	2b54      	cmp	r3, #84	; 0x54
 800549e:	d12e      	bne.n	80054fe <check_fs+0xee>
 80054a0:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 80054a4:	2b20      	cmp	r3, #32
 80054a6:	d12a      	bne.n	80054fe <check_fs+0xee>
 80054a8:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 80054ac:	2b20      	cmp	r3, #32
 80054ae:	d126      	bne.n	80054fe <check_fs+0xee>
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 80054b0:	f894 3056 	ldrb.w	r3, [r4, #86]	; 0x56
 80054b4:	2b20      	cmp	r3, #32
 80054b6:	bf14      	ite	ne
 80054b8:	2002      	movne	r0, #2
 80054ba:	2001      	moveq	r0, #1
}
 80054bc:	bd70      	pop	{r4, r5, r6, pc}
	rv = rv << 8 | ptr[2];
 80054be:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
	rv = rv << 8 | ptr[1];
 80054c2:	f894 1083 	ldrb.w	r1, [r4, #131]	; 0x83
	rv = rv << 8 | ptr[0];
 80054c6:	f894 3082 	ldrb.w	r3, [r4, #130]	; 0x82
	rv = rv << 8 | ptr[1];
 80054ca:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80054ce:	480e      	ldr	r0, [pc, #56]	; (8005508 <check_fs+0xf8>)
	rv = rv << 8 | ptr[0];
 80054d0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80054d4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80054d8:	4283      	cmp	r3, r0
 80054da:	d00c      	beq.n	80054f6 <check_fs+0xe6>
	rv = rv << 8 | ptr[2];
 80054dc:	f8b4 00a0 	ldrh.w	r0, [r4, #160]	; 0xa0
	rv = rv << 8 | ptr[1];
 80054e0:	f894 109f 	ldrb.w	r1, [r4, #159]	; 0x9f
	rv = rv << 8 | ptr[0];
 80054e4:	f894 309e 	ldrb.w	r3, [r4, #158]	; 0x9e
	rv = rv << 8 | ptr[1];
 80054e8:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80054ec:	4807      	ldr	r0, [pc, #28]	; (800550c <check_fs+0xfc>)
	rv = rv << 8 | ptr[0];
 80054ee:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80054f2:	4283      	cmp	r3, r0
 80054f4:	d1b6      	bne.n	8005464 <check_fs+0x54>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80054f6:	2000      	movs	r0, #0
}
 80054f8:	bd70      	pop	{r4, r5, r6, pc}
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80054fa:	2003      	movs	r0, #3
}
 80054fc:	bd70      	pop	{r4, r5, r6, pc}
	return 2;
 80054fe:	2002      	movs	r0, #2
}
 8005500:	bd70      	pop	{r4, r5, r6, pc}
 8005502:	bf00      	nop
 8005504:	009000eb 	.word	0x009000eb
 8005508:	00544146 	.word	0x00544146
 800550c:	33544146 	.word	0x33544146

08005510 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8005510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (*path) {	/* If the pointer is not a null */
 8005514:	6803      	ldr	r3, [r0, #0]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8005516:	2400      	movs	r4, #0
{
 8005518:	b083      	sub	sp, #12
	*rfs = 0;
 800551a:	600c      	str	r4, [r1, #0]
	if (*path) {	/* If the pointer is not a null */
 800551c:	b18b      	cbz	r3, 8005542 <find_volume+0x32>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800551e:	781e      	ldrb	r6, [r3, #0]
 8005520:	2e1f      	cmp	r6, #31
 8005522:	d913      	bls.n	800554c <find_volume+0x3c>
 8005524:	2e3a      	cmp	r6, #58	; 0x3a
 8005526:	d011      	beq.n	800554c <find_volume+0x3c>
 8005528:	461d      	mov	r5, r3
 800552a:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 800552e:	2c1f      	cmp	r4, #31
 8005530:	d90e      	bls.n	8005550 <find_volume+0x40>
 8005532:	2c3a      	cmp	r4, #58	; 0x3a
 8005534:	d1f9      	bne.n	800552a <find_volume+0x1a>
			i = *tp++ - '0';
 8005536:	3301      	adds	r3, #1
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8005538:	429d      	cmp	r5, r3
 800553a:	d102      	bne.n	8005542 <find_volume+0x32>
 800553c:	2e30      	cmp	r6, #48	; 0x30
 800553e:	f000 8151 	beq.w	80057e4 <find_volume+0x2d4>
	vol = get_ldnumber(path);
	if (vol < 0) return FR_INVALID_DRIVE;
 8005542:	240b      	movs	r4, #11
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
}
 8005544:	4620      	mov	r0, r4
 8005546:	b003      	add	sp, #12
 8005548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800554c:	4634      	mov	r4, r6
 800554e:	461d      	mov	r5, r3
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8005550:	2c3a      	cmp	r4, #58	; 0x3a
 8005552:	d0f0      	beq.n	8005536 <find_volume+0x26>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8005554:	4bbb      	ldr	r3, [pc, #748]	; (8005844 <find_volume+0x334>)
 8005556:	681d      	ldr	r5, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005558:	2d00      	cmp	r5, #0
 800555a:	f000 8141 	beq.w	80057e0 <find_volume+0x2d0>
	*rfs = fs;							/* Return pointer to the file system object */
 800555e:	600d      	str	r5, [r1, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8005560:	f002 04fe 	and.w	r4, r2, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 8005564:	782b      	ldrb	r3, [r5, #0]
 8005566:	b183      	cbz	r3, 800558a <find_volume+0x7a>
		stat = disk_status(fs->drv);
 8005568:	7868      	ldrb	r0, [r5, #1]
 800556a:	f7ff f8a5 	bl	80046b8 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800556e:	07c1      	lsls	r1, r0, #31
 8005570:	d40b      	bmi.n	800558a <find_volume+0x7a>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8005572:	2c00      	cmp	r4, #0
 8005574:	f000 812b 	beq.w	80057ce <find_volume+0x2be>
 8005578:	f010 0404 	ands.w	r4, r0, #4
 800557c:	f000 8127 	beq.w	80057ce <find_volume+0x2be>
				return FR_WRITE_PROTECTED;
 8005580:	240a      	movs	r4, #10
}
 8005582:	4620      	mov	r0, r4
 8005584:	b003      	add	sp, #12
 8005586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	fs->fs_type = 0;					/* Clear the file system object */
 800558a:	2000      	movs	r0, #0
 800558c:	8028      	strh	r0, [r5, #0]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800558e:	f7ff f89d 	bl	80046cc <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8005592:	07c2      	lsls	r2, r0, #31
 8005594:	f100 811f 	bmi.w	80057d6 <find_volume+0x2c6>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8005598:	b10c      	cbz	r4, 800559e <find_volume+0x8e>
 800559a:	0743      	lsls	r3, r0, #29
 800559c:	d4f0      	bmi.n	8005580 <find_volume+0x70>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800559e:	f105 020c 	add.w	r2, r5, #12
 80055a2:	2102      	movs	r1, #2
 80055a4:	7868      	ldrb	r0, [r5, #1]
 80055a6:	f7ff f8c1 	bl	800472c <disk_ioctl>
 80055aa:	4604      	mov	r4, r0
 80055ac:	2800      	cmp	r0, #0
 80055ae:	f040 810d 	bne.w	80057cc <find_volume+0x2bc>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80055b2:	89ab      	ldrh	r3, [r5, #12]
 80055b4:	f5a3 7200 	sub.w	r2, r3, #512	; 0x200
 80055b8:	f5b2 6f60 	cmp.w	r2, #3584	; 0xe00
 80055bc:	f200 8106 	bhi.w	80057cc <find_volume+0x2bc>
 80055c0:	1e5a      	subs	r2, r3, #1
 80055c2:	421a      	tst	r2, r3
 80055c4:	f040 8102 	bne.w	80057cc <find_volume+0x2bc>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80055c8:	4601      	mov	r1, r0
 80055ca:	4628      	mov	r0, r5
 80055cc:	f7ff ff20 	bl	8005410 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80055d0:	2802      	cmp	r0, #2
 80055d2:	f000 80b4 	beq.w	800573e <find_volume+0x22e>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80055d6:	2804      	cmp	r0, #4
 80055d8:	f000 80f8 	beq.w	80057cc <find_volume+0x2bc>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80055dc:	2801      	cmp	r0, #1
 80055de:	f200 8106 	bhi.w	80057ee <find_volume+0x2de>
	bsect = 0;
 80055e2:	4626      	mov	r6, r4
	if (fmt == 1) {
 80055e4:	2801      	cmp	r0, #1
 80055e6:	f000 811c 	beq.w	8005822 <find_volume+0x312>
	rv = rv << 8 | ptr[0];
 80055ea:	f895 2058 	ldrb.w	r2, [r5, #88]	; 0x58
 80055ee:	f895 3057 	ldrb.w	r3, [r5, #87]	; 0x57
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80055f2:	89a8      	ldrh	r0, [r5, #12]
 80055f4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80055f8:	4298      	cmp	r0, r3
 80055fa:	f040 80f8 	bne.w	80057ee <find_volume+0x2de>
	rv = rv << 8 | ptr[0];
 80055fe:	f895 2063 	ldrb.w	r2, [r5, #99]	; 0x63
 8005602:	f895 3062 	ldrb.w	r3, [r5, #98]	; 0x62
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8005606:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 800560a:	d109      	bne.n	8005620 <find_volume+0x110>
	rv = rv << 8 | ptr[2];
 800560c:	f8b5 1072 	ldrh.w	r1, [r5, #114]	; 0x72
	rv = rv << 8 | ptr[1];
 8005610:	f895 3071 	ldrb.w	r3, [r5, #113]	; 0x71
	rv = rv << 8 | ptr[0];
 8005614:	f895 2070 	ldrb.w	r2, [r5, #112]	; 0x70
	rv = rv << 8 | ptr[1];
 8005618:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	rv = rv << 8 | ptr[0];
 800561c:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8005620:	f895 205c 	ldrb.w	r2, [r5, #92]	; 0x5c
		fs->fsize = fasize;
 8005624:	636b      	str	r3, [r5, #52]	; 0x34
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8005626:	1e51      	subs	r1, r2, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8005628:	70aa      	strb	r2, [r5, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800562a:	2901      	cmp	r1, #1
 800562c:	f200 80df 	bhi.w	80057ee <find_volume+0x2de>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8005630:	f895 7059 	ldrb.w	r7, [r5, #89]	; 0x59
 8005634:	b2b9      	uxth	r1, r7
 8005636:	8169      	strh	r1, [r5, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8005638:	2900      	cmp	r1, #0
 800563a:	f000 80d8 	beq.w	80057ee <find_volume+0x2de>
 800563e:	1e79      	subs	r1, r7, #1
 8005640:	4239      	tst	r1, r7
 8005642:	f040 80d4 	bne.w	80057ee <find_volume+0x2de>
	rv = rv << 8 | ptr[0];
 8005646:	f895 e05e 	ldrb.w	lr, [r5, #94]	; 0x5e
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800564a:	0941      	lsrs	r1, r0, #5
	rv = rv << 8 | ptr[0];
 800564c:	f895 c05d 	ldrb.w	ip, [r5, #93]	; 0x5d
 8005650:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
 8005654:	46e6      	mov	lr, ip
 8005656:	fa0f fc8c 	sxth.w	ip, ip
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800565a:	fbbe f8f1 	udiv	r8, lr, r1
 800565e:	fb01 e118 	mls	r1, r1, r8, lr
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8005662:	f8a5 e008 	strh.w	lr, [r5, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8005666:	b289      	uxth	r1, r1
 8005668:	2900      	cmp	r1, #0
 800566a:	f040 80c0 	bne.w	80057ee <find_volume+0x2de>
	rv = rv << 8 | ptr[0];
 800566e:	f895 9060 	ldrb.w	r9, [r5, #96]	; 0x60
 8005672:	f895 105f 	ldrb.w	r1, [r5, #95]	; 0x5f
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8005676:	ea51 2109 	orrs.w	r1, r1, r9, lsl #8
 800567a:	d109      	bne.n	8005690 <find_volume+0x180>
	rv = rv << 8 | ptr[2];
 800567c:	f8b5 a06e 	ldrh.w	sl, [r5, #110]	; 0x6e
	rv = rv << 8 | ptr[1];
 8005680:	f895 106d 	ldrb.w	r1, [r5, #109]	; 0x6d
	rv = rv << 8 | ptr[0];
 8005684:	f895 906c 	ldrb.w	r9, [r5, #108]	; 0x6c
	rv = rv << 8 | ptr[1];
 8005688:	ea41 210a 	orr.w	r1, r1, sl, lsl #8
	rv = rv << 8 | ptr[0];
 800568c:	ea49 2101 	orr.w	r1, r9, r1, lsl #8
	rv = rv << 8 | ptr[0];
 8005690:	f895 a05b 	ldrb.w	sl, [r5, #91]	; 0x5b
 8005694:	f895 905a 	ldrb.w	r9, [r5, #90]	; 0x5a
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8005698:	ea59 290a 	orrs.w	r9, r9, sl, lsl #8
 800569c:	f000 80a7 	beq.w	80057ee <find_volume+0x2de>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80056a0:	fb03 f202 	mul.w	r2, r3, r2
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80056a4:	44c8      	add	r8, r9
 80056a6:	4490      	add	r8, r2
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80056a8:	4541      	cmp	r1, r8
 80056aa:	f0c0 80a0 	bcc.w	80057ee <find_volume+0x2de>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80056ae:	eba1 0108 	sub.w	r1, r1, r8
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80056b2:	42b9      	cmp	r1, r7
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80056b4:	fbb1 faf7 	udiv	sl, r1, r7
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80056b8:	f0c0 8099 	bcc.w	80057ee <find_volume+0x2de>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80056bc:	f64f 71f5 	movw	r1, #65525	; 0xfff5
 80056c0:	458a      	cmp	sl, r1
 80056c2:	f200 818d 	bhi.w	80059e0 <find_volume+0x4d0>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80056c6:	f640 71f5 	movw	r1, #4085	; 0xff5
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80056ca:	eb09 0706 	add.w	r7, r9, r6
		fs->database = bsect + sysect;					/* Data start sector */
 80056ce:	44b0      	add	r8, r6
		fs->volbase = bsect;							/* Volume start sector */
 80056d0:	63ae      	str	r6, [r5, #56]	; 0x38
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80056d2:	458a      	cmp	sl, r1
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80056d4:	f10a 0102 	add.w	r1, sl, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80056d8:	63ef      	str	r7, [r5, #60]	; 0x3c
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80056da:	6329      	str	r1, [r5, #48]	; 0x30
		fs->database = bsect + sysect;					/* Data start sector */
 80056dc:	f8c5 8044 	str.w	r8, [r5, #68]	; 0x44
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80056e0:	f200 81b7 	bhi.w	8005a52 <find_volume+0x542>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80056e4:	f1be 0f00 	cmp.w	lr, #0
 80056e8:	f000 8081 	beq.w	80057ee <find_volume+0x2de>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80056ec:	443a      	add	r2, r7
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80056ee:	eb01 0741 	add.w	r7, r1, r1, lsl #1
 80056f2:	f001 0101 	and.w	r1, r1, #1
 80056f6:	2601      	movs	r6, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80056f8:	642a      	str	r2, [r5, #64]	; 0x40
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80056fa:	eb01 0257 	add.w	r2, r1, r7, lsr #1
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80056fe:	1e41      	subs	r1, r0, #1
 8005700:	440a      	add	r2, r1
 8005702:	fbb2 f0f0 	udiv	r0, r2, r0
 8005706:	4283      	cmp	r3, r0
 8005708:	d371      	bcc.n	80057ee <find_volume+0x2de>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800570a:	f04f 33ff 	mov.w	r3, #4294967295
		fs->fsi_flag = 0x80;
 800570e:	2280      	movs	r2, #128	; 0x80
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8005710:	e9c5 3306 	strd	r3, r3, [r5, #24]
		fs->fsi_flag = 0x80;
 8005714:	712a      	strb	r2, [r5, #4]
	fs->id = ++Fsid;		/* File system mount ID */
 8005716:	494c      	ldr	r1, [pc, #304]	; (8005848 <find_volume+0x338>)
	fs->cdir = 0;			/* Initialize current directory */
 8005718:	2000      	movs	r0, #0
		if (Files[i].fs == fs) Files[i].fs = 0;
 800571a:	4a4c      	ldr	r2, [pc, #304]	; (800584c <find_volume+0x33c>)
	fs->id = ++Fsid;		/* File system mount ID */
 800571c:	880b      	ldrh	r3, [r1, #0]
	fs->fs_type = fmt;		/* FAT sub-type */
 800571e:	702e      	strb	r6, [r5, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8005720:	3301      	adds	r3, #1
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005722:	6816      	ldr	r6, [r2, #0]
	fs->cdir = 0;			/* Initialize current directory */
 8005724:	6228      	str	r0, [r5, #32]
	fs->id = ++Fsid;		/* File system mount ID */
 8005726:	b29b      	uxth	r3, r3
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005728:	42ae      	cmp	r6, r5
	fs->id = ++Fsid;		/* File system mount ID */
 800572a:	800b      	strh	r3, [r1, #0]
 800572c:	80eb      	strh	r3, [r5, #6]
		if (Files[i].fs == fs) Files[i].fs = 0;
 800572e:	6913      	ldr	r3, [r2, #16]
 8005730:	bf08      	it	eq
 8005732:	6010      	streq	r0, [r2, #0]
 8005734:	429d      	cmp	r5, r3
 8005736:	d14a      	bne.n	80057ce <find_volume+0x2be>
 8005738:	2300      	movs	r3, #0
 800573a:	6113      	str	r3, [r2, #16]
 800573c:	e047      	b.n	80057ce <find_volume+0x2be>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800573e:	f895 320e 	ldrb.w	r3, [r5, #526]	; 0x20e
 8005742:	2b00      	cmp	r3, #0
 8005744:	d07c      	beq.n	8005840 <find_volume+0x330>
	rv = rv << 8 | ptr[2];
 8005746:	f8b5 2214 	ldrh.w	r2, [r5, #532]	; 0x214
	rv = rv << 8 | ptr[1];
 800574a:	f895 3213 	ldrb.w	r3, [r5, #531]	; 0x213
	rv = rv << 8 | ptr[0];
 800574e:	f895 9212 	ldrb.w	r9, [r5, #530]	; 0x212
	rv = rv << 8 | ptr[1];
 8005752:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 8005756:	ea49 2903 	orr.w	r9, r9, r3, lsl #8
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800575a:	f895 321e 	ldrb.w	r3, [r5, #542]	; 0x21e
 800575e:	2b00      	cmp	r3, #0
 8005760:	d06c      	beq.n	800583c <find_volume+0x32c>
	rv = rv << 8 | ptr[2];
 8005762:	f8b5 2224 	ldrh.w	r2, [r5, #548]	; 0x224
	rv = rv << 8 | ptr[1];
 8005766:	f895 3223 	ldrb.w	r3, [r5, #547]	; 0x223
	rv = rv << 8 | ptr[0];
 800576a:	f895 8222 	ldrb.w	r8, [r5, #546]	; 0x222
	rv = rv << 8 | ptr[1];
 800576e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 8005772:	ea48 2803 	orr.w	r8, r8, r3, lsl #8
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8005776:	f895 722e 	ldrb.w	r7, [r5, #558]	; 0x22e
 800577a:	b14f      	cbz	r7, 8005790 <find_volume+0x280>
	rv = rv << 8 | ptr[2];
 800577c:	f8b5 2234 	ldrh.w	r2, [r5, #564]	; 0x234
	rv = rv << 8 | ptr[1];
 8005780:	f895 3233 	ldrb.w	r3, [r5, #563]	; 0x233
	rv = rv << 8 | ptr[0];
 8005784:	f895 7232 	ldrb.w	r7, [r5, #562]	; 0x232
	rv = rv << 8 | ptr[1];
 8005788:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 800578c:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8005790:	f895 623e 	ldrb.w	r6, [r5, #574]	; 0x23e
 8005794:	b14e      	cbz	r6, 80057aa <find_volume+0x29a>
	rv = rv << 8 | ptr[2];
 8005796:	f8b5 2244 	ldrh.w	r2, [r5, #580]	; 0x244
	rv = rv << 8 | ptr[1];
 800579a:	f895 3243 	ldrb.w	r3, [r5, #579]	; 0x243
	rv = rv << 8 | ptr[0];
 800579e:	f895 6242 	ldrb.w	r6, [r5, #578]	; 0x242
	rv = rv << 8 | ptr[1];
 80057a2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 80057a6:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80057aa:	f1b9 0f00 	cmp.w	r9, #0
 80057ae:	d120      	bne.n	80057f2 <find_volume+0x2e2>
 80057b0:	f1b8 0f00 	cmp.w	r8, #0
 80057b4:	d125      	bne.n	8005802 <find_volume+0x2f2>
 80057b6:	bb67      	cbnz	r7, 8005812 <find_volume+0x302>
 80057b8:	b1ce      	cbz	r6, 80057ee <find_volume+0x2de>
 80057ba:	4631      	mov	r1, r6
 80057bc:	4628      	mov	r0, r5
 80057be:	f7ff fe27 	bl	8005410 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80057c2:	2801      	cmp	r0, #1
 80057c4:	f67f af0e 	bls.w	80055e4 <find_volume+0xd4>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80057c8:	2804      	cmp	r0, #4
 80057ca:	d110      	bne.n	80057ee <find_volume+0x2de>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80057cc:	2401      	movs	r4, #1
}
 80057ce:	4620      	mov	r0, r4
 80057d0:	b003      	add	sp, #12
 80057d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80057d6:	2403      	movs	r4, #3
}
 80057d8:	4620      	mov	r0, r4
 80057da:	b003      	add	sp, #12
 80057dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80057e0:	240c      	movs	r4, #12
 80057e2:	e7f4      	b.n	80057ce <find_volume+0x2be>
					*path = ++tt;
 80057e4:	3501      	adds	r5, #1
 80057e6:	6005      	str	r5, [r0, #0]
	if (vol < 0) return FR_INVALID_DRIVE;
 80057e8:	e6b4      	b.n	8005554 <find_volume+0x44>
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 80057ea:	f040 80f3 	bne.w	80059d4 <find_volume+0x4c4>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80057ee:	240d      	movs	r4, #13
 80057f0:	e7ed      	b.n	80057ce <find_volume+0x2be>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80057f2:	4649      	mov	r1, r9
 80057f4:	4628      	mov	r0, r5
 80057f6:	f7ff fe0b 	bl	8005410 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80057fa:	2801      	cmp	r0, #1
 80057fc:	d8d8      	bhi.n	80057b0 <find_volume+0x2a0>
 80057fe:	464e      	mov	r6, r9
 8005800:	e6f0      	b.n	80055e4 <find_volume+0xd4>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8005802:	4641      	mov	r1, r8
 8005804:	4628      	mov	r0, r5
 8005806:	f7ff fe03 	bl	8005410 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800580a:	2801      	cmp	r0, #1
 800580c:	d8d3      	bhi.n	80057b6 <find_volume+0x2a6>
 800580e:	4646      	mov	r6, r8
 8005810:	e6e8      	b.n	80055e4 <find_volume+0xd4>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8005812:	4639      	mov	r1, r7
 8005814:	4628      	mov	r0, r5
 8005816:	f7ff fdfb 	bl	8005410 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800581a:	2801      	cmp	r0, #1
 800581c:	d8cc      	bhi.n	80057b8 <find_volume+0x2a8>
 800581e:	463e      	mov	r6, r7
 8005820:	e6e0      	b.n	80055e4 <find_volume+0xd4>
 8005822:	f105 0356 	add.w	r3, r5, #86	; 0x56
 8005826:	462f      	mov	r7, r5
 8005828:	f105 018b 	add.w	r1, r5, #139	; 0x8b
 800582c:	e001      	b.n	8005832 <find_volume+0x322>
		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 800582e:	428b      	cmp	r3, r1
 8005830:	d00e      	beq.n	8005850 <find_volume+0x340>
 8005832:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8005836:	2a00      	cmp	r2, #0
 8005838:	d0f9      	beq.n	800582e <find_volume+0x31e>
 800583a:	e7d8      	b.n	80057ee <find_volume+0x2de>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800583c:	4698      	mov	r8, r3
 800583e:	e79a      	b.n	8005776 <find_volume+0x266>
 8005840:	46a1      	mov	r9, r4
 8005842:	e78a      	b.n	800575a <find_volume+0x24a>
 8005844:	20000098 	.word	0x20000098
 8005848:	200000bc 	.word	0x200000bc
 800584c:	2000009c 	.word	0x2000009c
	rv = rv << 8 | ptr[0];
 8005850:	f895 20b5 	ldrb.w	r2, [r5, #181]	; 0xb5
 8005854:	f895 30b4 	ldrb.w	r3, [r5, #180]	; 0xb4
 8005858:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 800585c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005860:	d1c5      	bne.n	80057ee <find_volume+0x2de>
		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 8005862:	f895 20b8 	ldrb.w	r2, [r5, #184]	; 0xb8
 8005866:	2301      	movs	r3, #1
 8005868:	f8b5 c00c 	ldrh.w	ip, [r5, #12]
 800586c:	4093      	lsls	r3, r2
 800586e:	4563      	cmp	r3, ip
 8005870:	d1bd      	bne.n	80057ee <find_volume+0x2de>
	rv = rv << 8 | ptr[4];
 8005872:	f8d5 e098 	ldr.w	lr, [r5, #152]	; 0x98
	rv = rv << 8 | ptr[1];
 8005876:	2300      	movs	r3, #0
 8005878:	f895 2095 	ldrb.w	r2, [r5, #149]	; 0x95
	rv = rv << 8 | ptr[3];
 800587c:	f895 8097 	ldrb.w	r8, [r5, #151]	; 0x97
	rv = rv << 8 | ptr[2];
 8005880:	f895 0096 	ldrb.w	r0, [r5, #150]	; 0x96
 8005884:	ea48 280e 	orr.w	r8, r8, lr, lsl #8
	rv = rv << 8 | ptr[0];
 8005888:	f895 a094 	ldrb.w	sl, [r5, #148]	; 0x94
	rv = rv << 8 | ptr[1];
 800588c:	e9cd 2300 	strd	r2, r3, [sp]
	rv = rv << 8 | ptr[2];
 8005890:	ea4f 431e 	mov.w	r3, lr, lsr #16
	rv = rv << 8 | ptr[1];
 8005894:	9a00      	ldr	r2, [sp, #0]
	rv = rv << 8 | ptr[2];
 8005896:	ea40 2008 	orr.w	r0, r0, r8, lsl #8
	rv = rv << 8 | ptr[1];
 800589a:	021b      	lsls	r3, r3, #8
 800589c:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80058a0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
	rv = rv << 8 | ptr[0];
 80058a4:	ea4a 2802 	orr.w	r8, sl, r2, lsl #8
 80058a8:	021b      	lsls	r3, r3, #8
		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 80058aa:	eb18 0806 	adds.w	r8, r8, r6
	rv = rv << 8 | ptr[0];
 80058ae:	ea43 6912 	orr.w	r9, r3, r2, lsr #24
		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 80058b2:	f149 0900 	adc.w	r9, r9, #0
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 80058b6:	f1b9 0f01 	cmp.w	r9, #1
 80058ba:	bf08      	it	eq
 80058bc:	f1b8 0f00 	cmpeq.w	r8, #0
 80058c0:	d295      	bcs.n	80057ee <find_volume+0x2de>
	rv = rv << 8 | ptr[2];
 80058c2:	f8b5 10a2 	ldrh.w	r1, [r5, #162]	; 0xa2
	rv = rv << 8 | ptr[1];
 80058c6:	f895 20a1 	ldrb.w	r2, [r5, #161]	; 0xa1
	rv = rv << 8 | ptr[0];
 80058ca:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
	rv = rv << 8 | ptr[1];
 80058ce:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 80058d2:	f895 10ba 	ldrb.w	r1, [r5, #186]	; 0xba
	rv = rv << 8 | ptr[0];
 80058d6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 80058da:	2901      	cmp	r1, #1
		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 80058dc:	70a9      	strb	r1, [r5, #2]
		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 80058de:	636b      	str	r3, [r5, #52]	; 0x34
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 80058e0:	d185      	bne.n	80057ee <find_volume+0x2de>
		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 80058e2:	f895 30b9 	ldrb.w	r3, [r5, #185]	; 0xb9
 80058e6:	4099      	lsls	r1, r3
 80058e8:	b28b      	uxth	r3, r1
 80058ea:	816b      	strh	r3, [r5, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	f43f af7e 	beq.w	80057ee <find_volume+0x2de>
	rv = rv << 8 | ptr[2];
 80058f2:	f8b5 20aa 	ldrh.w	r2, [r5, #170]	; 0xaa
	rv = rv << 8 | ptr[1];
 80058f6:	f895 30a9 	ldrb.w	r3, [r5, #169]	; 0xa9
	rv = rv << 8 | ptr[0];
 80058fa:	f895 e0a8 	ldrb.w	lr, [r5, #168]	; 0xa8
	rv = rv << 8 | ptr[1];
 80058fe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 8005902:	4a7d      	ldr	r2, [pc, #500]	; (8005af8 <find_volume+0x5e8>)
	rv = rv << 8 | ptr[0];
 8005904:	ea4e 2e03 	orr.w	lr, lr, r3, lsl #8
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 8005908:	4596      	cmp	lr, r2
 800590a:	f63f af70 	bhi.w	80057ee <find_volume+0x2de>
	rv = rv << 8 | ptr[1];
 800590e:	f895 a0a5 	ldrb.w	sl, [r5, #165]	; 0xa5
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 8005912:	b28a      	uxth	r2, r1
	rv = rv << 8 | ptr[2];
 8005914:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
	rv = rv << 8 | ptr[0];
 8005918:	f895 00a4 	ldrb.w	r0, [r5, #164]	; 0xa4
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 800591c:	4611      	mov	r1, r2
	rv = rv << 8 | ptr[1];
 800591e:	ea4a 2303 	orr.w	r3, sl, r3, lsl #8
		fs->n_fatent = nclst + 2;
 8005922:	f10e 0202 	add.w	r2, lr, #2
	rv = rv << 8 | ptr[2];
 8005926:	f8b5 a09e 	ldrh.w	sl, [r5, #158]	; 0x9e
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 800592a:	fb0e fb01 	mul.w	fp, lr, r1
	rv = rv << 8 | ptr[0];
 800592e:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
	rv = rv << 8 | ptr[1];
 8005932:	f895 309d 	ldrb.w	r3, [r5, #157]	; 0x9d
		fs->n_fatent = nclst + 2;
 8005936:	632a      	str	r2, [r5, #48]	; 0x30
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 8005938:	2200      	movs	r2, #0
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 800593a:	4430      	add	r0, r6
	rv = rv << 8 | ptr[1];
 800593c:	ea43 230a 	orr.w	r3, r3, sl, lsl #8
	rv = rv << 8 | ptr[0];
 8005940:	f895 a09c 	ldrb.w	sl, [r5, #156]	; 0x9c
		fs->volbase = bsect;
 8005944:	63ae      	str	r6, [r5, #56]	; 0x38
	rv = rv << 8 | ptr[0];
 8005946:	ea4a 2a03 	orr.w	sl, sl, r3, lsl #8
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 800594a:	4613      	mov	r3, r2
 800594c:	eb10 020b 	adds.w	r2, r0, fp
 8005950:	9100      	str	r1, [sp, #0]
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 8005952:	4456      	add	r6, sl
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 8005954:	6468      	str	r0, [r5, #68]	; 0x44
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 8005956:	f143 0300 	adc.w	r3, r3, #0
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 800595a:	63ee      	str	r6, [r5, #60]	; 0x3c
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 800595c:	4599      	cmp	r9, r3
 800595e:	bf08      	it	eq
 8005960:	4590      	cmpeq	r8, r2
 8005962:	f4ff af44 	bcc.w	80057ee <find_volume+0x2de>
	rv = rv << 8 | ptr[2];
 8005966:	f8b5 60ae 	ldrh.w	r6, [r5, #174]	; 0xae
	rv = rv << 8 | ptr[1];
 800596a:	f895 20ad 	ldrb.w	r2, [r5, #173]	; 0xad
	rv = rv << 8 | ptr[0];
 800596e:	f895 30ac 	ldrb.w	r3, [r5, #172]	; 0xac
	rv = rv << 8 | ptr[1];
 8005972:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
	rv = rv << 8 | ptr[0];
 8005976:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	clst -= 2;
 800597a:	1e9a      	subs	r2, r3, #2
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 800597c:	642b      	str	r3, [r5, #64]	; 0x40
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800597e:	4596      	cmp	lr, r2
 8005980:	d970      	bls.n	8005a64 <find_volume+0x554>
	return clst * fs->csize + fs->database;
 8005982:	9b00      	ldr	r3, [sp, #0]
 8005984:	fb02 0103 	mla	r1, r2, r3, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 8005988:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800598a:	428b      	cmp	r3, r1
 800598c:	d007      	beq.n	800599e <find_volume+0x48e>
 800598e:	4628      	mov	r0, r5
 8005990:	f7ff f8e6 	bl	8004b60 <move_window.part.0>
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 8005994:	2800      	cmp	r0, #0
 8005996:	f47f af19 	bne.w	80057cc <find_volume+0x2bc>
 800599a:	f8b5 c00c 	ldrh.w	ip, [r5, #12]
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800599e:	2300      	movs	r3, #0
 80059a0:	f1bc 0f00 	cmp.w	ip, #0
 80059a4:	d105      	bne.n	80059b2 <find_volume+0x4a2>
 80059a6:	e722      	b.n	80057ee <find_volume+0x2de>
 80059a8:	4563      	cmp	r3, ip
 80059aa:	f107 0720 	add.w	r7, r7, #32
 80059ae:	f4bf af1c 	bcs.w	80057ea <find_volume+0x2da>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 80059b2:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
		for (i = 0; i < SS(fs); i += SZDIRE) {
 80059b6:	3320      	adds	r3, #32
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 80059b8:	2a81      	cmp	r2, #129	; 0x81
 80059ba:	d1f5      	bne.n	80059a8 <find_volume+0x498>
	rv = rv << 8 | ptr[2];
 80059bc:	f8b7 0062 	ldrh.w	r0, [r7, #98]	; 0x62
	rv = rv << 8 | ptr[1];
 80059c0:	f897 1061 	ldrb.w	r1, [r7, #97]	; 0x61
	rv = rv << 8 | ptr[0];
 80059c4:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
	rv = rv << 8 | ptr[1];
 80059c8:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
	rv = rv << 8 | ptr[0];
 80059cc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 80059d0:	2a02      	cmp	r2, #2
 80059d2:	d1e9      	bne.n	80059a8 <find_volume+0x498>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80059d4:	f04f 33ff 	mov.w	r3, #4294967295
		fmt = FS_EXFAT;			/* FAT sub-type */
 80059d8:	2604      	movs	r6, #4
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80059da:	e9c5 3306 	strd	r3, r3, [r5, #24]
		fmt = FS_EXFAT;			/* FAT sub-type */
 80059de:	e69a      	b.n	8005716 <find_volume+0x206>
	rv = rv << 8 | ptr[0];
 80059e0:	f895 b077 	ldrb.w	fp, [r5, #119]	; 0x77
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80059e4:	eb09 0106 	add.w	r1, r9, r6
	rv = rv << 8 | ptr[0];
 80059e8:	f895 e076 	ldrb.w	lr, [r5, #118]	; 0x76
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80059ec:	f10a 0202 	add.w	r2, sl, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80059f0:	63e9      	str	r1, [r5, #60]	; 0x3c
		fs->database = bsect + sysect;					/* Data start sector */
 80059f2:	eb06 0708 	add.w	r7, r6, r8
	rv = rv << 8 | ptr[0];
 80059f6:	ea4e 2e0b 	orr.w	lr, lr, fp, lsl #8
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80059fa:	632a      	str	r2, [r5, #48]	; 0x30
		fs->database = bsect + sysect;					/* Data start sector */
 80059fc:	646f      	str	r7, [r5, #68]	; 0x44
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80059fe:	ea4c 010e 	orr.w	r1, ip, lr
		fs->volbase = bsect;							/* Volume start sector */
 8005a02:	63ae      	str	r6, [r5, #56]	; 0x38
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8005a04:	b209      	sxth	r1, r1
 8005a06:	2900      	cmp	r1, #0
 8005a08:	f47f aef1 	bne.w	80057ee <find_volume+0x2de>
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8005a0c:	1e41      	subs	r1, r0, #1
	rv = rv << 8 | ptr[2];
 8005a0e:	f8b5 c07a 	ldrh.w	ip, [r5, #122]	; 0x7a
	rv = rv << 8 | ptr[1];
 8005a12:	f895 7079 	ldrb.w	r7, [r5, #121]	; 0x79
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8005a16:	eb01 0282 	add.w	r2, r1, r2, lsl #2
	rv = rv << 8 | ptr[0];
 8005a1a:	f895 1078 	ldrb.w	r1, [r5, #120]	; 0x78
	rv = rv << 8 | ptr[1];
 8005a1e:	ea47 270c 	orr.w	r7, r7, ip, lsl #8
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8005a22:	fbb2 f0f0 	udiv	r0, r2, r0
	rv = rv << 8 | ptr[0];
 8005a26:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8005a2a:	4283      	cmp	r3, r0
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8005a2c:	6429      	str	r1, [r5, #64]	; 0x40
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8005a2e:	f4ff aede 	bcc.w	80057ee <find_volume+0x2de>
	rv = rv << 8 | ptr[0];
 8005a32:	f895 007d 	ldrb.w	r0, [r5, #125]	; 0x7d
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8005a36:	f04f 32ff 	mov.w	r2, #4294967295
	rv = rv << 8 | ptr[0];
 8005a3a:	f895 307c 	ldrb.w	r3, [r5, #124]	; 0x7c
		fs->fsi_flag = 0x80;
 8005a3e:	2180      	movs	r1, #128	; 0x80
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8005a40:	61ea      	str	r2, [r5, #28]
	rv = rv << 8 | ptr[0];
 8005a42:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8005a46:	61aa      	str	r2, [r5, #24]
		fs->fsi_flag = 0x80;
 8005a48:	7129      	strb	r1, [r5, #4]
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8005a4a:	2b01      	cmp	r3, #1
 8005a4c:	d00c      	beq.n	8005a68 <find_volume+0x558>
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8005a4e:	2603      	movs	r6, #3
 8005a50:	e661      	b.n	8005716 <find_volume+0x206>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8005a52:	f1be 0f00 	cmp.w	lr, #0
 8005a56:	f43f aeca 	beq.w	80057ee <find_volume+0x2de>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8005a5a:	4417      	add	r7, r2
 8005a5c:	2602      	movs	r6, #2
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005a5e:	004a      	lsls	r2, r1, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8005a60:	642f      	str	r7, [r5, #64]	; 0x40
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8005a62:	e64c      	b.n	80056fe <find_volume+0x1ee>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005a64:	2100      	movs	r1, #0
 8005a66:	e78f      	b.n	8005988 <find_volume+0x478>
			&& move_window(fs, bsect + 1) == FR_OK)
 8005a68:	1c71      	adds	r1, r6, #1
	if (sector != fs->winsect) {	/* Window offset changed? */
 8005a6a:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8005a6c:	4299      	cmp	r1, r3
 8005a6e:	d004      	beq.n	8005a7a <find_volume+0x56a>
 8005a70:	4628      	mov	r0, r5
 8005a72:	f7ff f875 	bl	8004b60 <move_window.part.0>
			&& move_window(fs, bsect + 1) == FR_OK)
 8005a76:	2800      	cmp	r0, #0
 8005a78:	d1e9      	bne.n	8005a4e <find_volume+0x53e>
	rv = rv << 8 | ptr[0];
 8005a7a:	f895 124b 	ldrb.w	r1, [r5, #587]	; 0x24b
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8005a7e:	f64a 2255 	movw	r2, #43605	; 0xaa55
	rv = rv << 8 | ptr[0];
 8005a82:	f895 324a 	ldrb.w	r3, [r5, #586]	; 0x24a
			fs->fsi_flag = 0;
 8005a86:	2000      	movs	r0, #0
	rv = rv << 8 | ptr[0];
 8005a88:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			fs->fsi_flag = 0;
 8005a8c:	7128      	strb	r0, [r5, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d1dd      	bne.n	8005a4e <find_volume+0x53e>
	rv = rv << 8 | ptr[2];
 8005a92:	f8b5 104e 	ldrh.w	r1, [r5, #78]	; 0x4e
	rv = rv << 8 | ptr[1];
 8005a96:	f895 204d 	ldrb.w	r2, [r5, #77]	; 0x4d
	rv = rv << 8 | ptr[0];
 8005a9a:	f895 304c 	ldrb.w	r3, [r5, #76]	; 0x4c
	rv = rv << 8 | ptr[1];
 8005a9e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8005aa2:	4916      	ldr	r1, [pc, #88]	; (8005afc <find_volume+0x5ec>)
	rv = rv << 8 | ptr[0];
 8005aa4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8005aa8:	428b      	cmp	r3, r1
 8005aaa:	d1d0      	bne.n	8005a4e <find_volume+0x53e>
	rv = rv << 8 | ptr[2];
 8005aac:	f8b5 1232 	ldrh.w	r1, [r5, #562]	; 0x232
	rv = rv << 8 | ptr[1];
 8005ab0:	f895 2231 	ldrb.w	r2, [r5, #561]	; 0x231
	rv = rv << 8 | ptr[0];
 8005ab4:	f895 3230 	ldrb.w	r3, [r5, #560]	; 0x230
	rv = rv << 8 | ptr[1];
 8005ab8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8005abc:	4910      	ldr	r1, [pc, #64]	; (8005b00 <find_volume+0x5f0>)
	rv = rv << 8 | ptr[0];
 8005abe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8005ac2:	428b      	cmp	r3, r1
 8005ac4:	d1c3      	bne.n	8005a4e <find_volume+0x53e>
	rv = rv << 8 | ptr[1];
 8005ac6:	f895 2235 	ldrb.w	r2, [r5, #565]	; 0x235
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8005aca:	2603      	movs	r6, #3
	rv = rv << 8 | ptr[1];
 8005acc:	f895 3239 	ldrb.w	r3, [r5, #569]	; 0x239
	rv = rv << 8 | ptr[2];
 8005ad0:	f8b5 0236 	ldrh.w	r0, [r5, #566]	; 0x236
 8005ad4:	f8b5 123a 	ldrh.w	r1, [r5, #570]	; 0x23a
	rv = rv << 8 | ptr[1];
 8005ad8:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
	rv = rv << 8 | ptr[0];
 8005adc:	f895 2234 	ldrb.w	r2, [r5, #564]	; 0x234
	rv = rv << 8 | ptr[1];
 8005ae0:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
	rv = rv << 8 | ptr[0];
 8005ae4:	f895 3238 	ldrb.w	r3, [r5, #568]	; 0x238
 8005ae8:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8005aec:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8005af0:	e9c5 3206 	strd	r3, r2, [r5, #24]
 8005af4:	e60f      	b.n	8005716 <find_volume+0x206>
 8005af6:	bf00      	nop
 8005af8:	7ffffffd 	.word	0x7ffffffd
 8005afc:	41615252 	.word	0x41615252
 8005b00:	61417272 	.word	0x61417272

08005b04 <sync_fs>:
{
 8005b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005b06:	78c3      	ldrb	r3, [r0, #3]
{
 8005b08:	4604      	mov	r4, r0
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005b0a:	b95b      	cbnz	r3, 8005b24 <sync_fs+0x20>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005b0c:	7823      	ldrb	r3, [r4, #0]
 8005b0e:	2b03      	cmp	r3, #3
 8005b10:	d029      	beq.n	8005b66 <sync_fs+0x62>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8005b12:	2200      	movs	r2, #0
 8005b14:	7860      	ldrb	r0, [r4, #1]
 8005b16:	4611      	mov	r1, r2
 8005b18:	f7fe fe08 	bl	800472c <disk_ioctl>
			res = FR_DISK_ERR;
 8005b1c:	3800      	subs	r0, #0
 8005b1e:	bf18      	it	ne
 8005b20:	2001      	movne	r0, #1
}
 8005b22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		wsect = fs->winsect;	/* Current sector number */
 8005b24:	6c85      	ldr	r5, [r0, #72]	; 0x48
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005b26:	f100 074c 	add.w	r7, r0, #76	; 0x4c
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	7840      	ldrb	r0, [r0, #1]
 8005b2e:	462a      	mov	r2, r5
 8005b30:	4639      	mov	r1, r7
 8005b32:	f7fe fded 	bl	8004710 <disk_write>
 8005b36:	2800      	cmp	r0, #0
 8005b38:	d14f      	bne.n	8005bda <sync_fs+0xd6>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005b3a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8005b3c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005b3e:	1aaa      	subs	r2, r5, r2
			fs->wflag = 0;
 8005b40:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005b42:	429a      	cmp	r2, r3
 8005b44:	d2e2      	bcs.n	8005b0c <sync_fs+0x8>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005b46:	78a6      	ldrb	r6, [r4, #2]
 8005b48:	2e01      	cmp	r6, #1
 8005b4a:	d801      	bhi.n	8005b50 <sync_fs+0x4c>
 8005b4c:	e7de      	b.n	8005b0c <sync_fs+0x8>
 8005b4e:	6b63      	ldr	r3, [r4, #52]	; 0x34
					wsect += fs->fsize;
 8005b50:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005b52:	3e01      	subs	r6, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 8005b54:	2301      	movs	r3, #1
 8005b56:	4639      	mov	r1, r7
 8005b58:	462a      	mov	r2, r5
 8005b5a:	7860      	ldrb	r0, [r4, #1]
 8005b5c:	f7fe fdd8 	bl	8004710 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005b60:	2e01      	cmp	r6, #1
 8005b62:	d1f4      	bne.n	8005b4e <sync_fs+0x4a>
 8005b64:	e7d2      	b.n	8005b0c <sync_fs+0x8>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005b66:	7926      	ldrb	r6, [r4, #4]
 8005b68:	2e01      	cmp	r6, #1
 8005b6a:	d1d2      	bne.n	8005b12 <sync_fs+0xe>
			mem_set(fs->win, 0, SS(fs));
 8005b6c:	f104 034c 	add.w	r3, r4, #76	; 0x4c
	BYTE *d = (BYTE*)dst;
 8005b70:	89a2      	ldrh	r2, [r4, #12]
 8005b72:	2100      	movs	r1, #0
	*ptr++ = (BYTE)val; val >>= 8;
 8005b74:	2755      	movs	r7, #85	; 0x55
 8005b76:	4618      	mov	r0, r3
 8005b78:	f003 fc40 	bl	80093fc <memset>
 8005b7c:	4603      	mov	r3, r0
			fs->winsect = fs->volbase + 1;
 8005b7e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8005b80:	4619      	mov	r1, r3
 8005b82:	4633      	mov	r3, r6
			fs->winsect = fs->volbase + 1;
 8005b84:	3201      	adds	r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
 8005b86:	f884 724a 	strb.w	r7, [r4, #586]	; 0x24a
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8005b8a:	e9d4 0506 	ldrd	r0, r5, [r4, #24]
			fs->winsect = fs->volbase + 1;
 8005b8e:	64a2      	str	r2, [r4, #72]	; 0x48
	*ptr++ = (BYTE)val; val >>= 8;
 8005b90:	ea4f 2c15 	mov.w	ip, r5, lsr #8
 8005b94:	f884 5234 	strb.w	r5, [r4, #564]	; 0x234
	*ptr++ = (BYTE)val; val >>= 8;
 8005b98:	0c2e      	lsrs	r6, r5, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8005b9a:	f884 0238 	strb.w	r0, [r4, #568]	; 0x238
	*ptr++ = (BYTE)val; val >>= 8;
 8005b9e:	0e2d      	lsrs	r5, r5, #24
	*ptr++ = (BYTE)val; val >>= 8;
 8005ba0:	f884 c235 	strb.w	ip, [r4, #565]	; 0x235
	*ptr++ = (BYTE)val; val >>= 8;
 8005ba4:	f884 6236 	strb.w	r6, [r4, #566]	; 0x236
	*ptr++ = (BYTE)val; val >>= 8;
 8005ba8:	0a06      	lsrs	r6, r0, #8
	*ptr++ = (BYTE)val;
 8005baa:	f884 5237 	strb.w	r5, [r4, #567]	; 0x237
	*ptr++ = (BYTE)val; val >>= 8;
 8005bae:	0c05      	lsrs	r5, r0, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8005bb0:	0e00      	lsrs	r0, r0, #24
	*ptr++ = (BYTE)val; val >>= 8;
 8005bb2:	f884 6239 	strb.w	r6, [r4, #569]	; 0x239
	*ptr++ = (BYTE)val; val >>= 8;
 8005bb6:	f884 523a 	strb.w	r5, [r4, #570]	; 0x23a
	*ptr++ = (BYTE)val;
 8005bba:	26aa      	movs	r6, #170	; 0xaa
	*ptr++ = (BYTE)val;
 8005bbc:	f884 023b 	strb.w	r0, [r4, #571]	; 0x23b
	*ptr++ = (BYTE)val; val >>= 8;
 8005bc0:	4d07      	ldr	r5, [pc, #28]	; (8005be0 <sync_fs+0xdc>)
 8005bc2:	4808      	ldr	r0, [pc, #32]	; (8005be4 <sync_fs+0xe0>)
	*ptr++ = (BYTE)val;
 8005bc4:	f884 624b 	strb.w	r6, [r4, #587]	; 0x24b
	*ptr++ = (BYTE)val; val >>= 8;
 8005bc8:	f8c4 0230 	str.w	r0, [r4, #560]	; 0x230
 8005bcc:	64e5      	str	r5, [r4, #76]	; 0x4c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8005bce:	7860      	ldrb	r0, [r4, #1]
 8005bd0:	f7fe fd9e 	bl	8004710 <disk_write>
			fs->fsi_flag = 0;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	7123      	strb	r3, [r4, #4]
 8005bd8:	e79b      	b.n	8005b12 <sync_fs+0xe>
			res = FR_DISK_ERR;
 8005bda:	2001      	movs	r0, #1
}
 8005bdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005bde:	bf00      	nop
 8005be0:	41615252 	.word	0x41615252
 8005be4:	61417272 	.word	0x61417272

08005be8 <create_chain>:
{
 8005be8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bec:	4680      	mov	r8, r0
	if (clst == 0) {	/* Create a new chain */
 8005bee:	4689      	mov	r9, r1
	FATFS *fs = obj->fs;
 8005bf0:	6806      	ldr	r6, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
 8005bf2:	2900      	cmp	r1, #0
 8005bf4:	f040 8120 	bne.w	8005e38 <create_chain+0x250>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8005bf8:	69b7      	ldr	r7, [r6, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8005bfa:	2f00      	cmp	r7, #0
 8005bfc:	f040 8102 	bne.w	8005e04 <create_chain+0x21c>
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8005c00:	7833      	ldrb	r3, [r6, #0]
 8005c02:	2b04      	cmp	r3, #4
 8005c04:	f000 812a 	beq.w	8005e5c <create_chain+0x274>
 8005c08:	6b33      	ldr	r3, [r6, #48]	; 0x30
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8005c0a:	2701      	movs	r7, #1
 8005c0c:	463c      	mov	r4, r7
			ncl++;							/* Next cluster */
 8005c0e:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8005c10:	429c      	cmp	r4, r3
 8005c12:	d353      	bcc.n	8005cbc <create_chain+0xd4>
				if (ncl > scl) return 0;	/* No free cluster */
 8005c14:	2f01      	cmp	r7, #1
 8005c16:	f240 810b 	bls.w	8005e30 <create_chain+0x248>
	FATFS *fs = obj->fs;
 8005c1a:	f8d8 5000 	ldr.w	r5, [r8]
				ncl = 2;
 8005c1e:	2402      	movs	r4, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005c20:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8005c22:	42a3      	cmp	r3, r4
 8005c24:	d94e      	bls.n	8005cc4 <create_chain+0xdc>
		switch (fs->fs_type) {
 8005c26:	782b      	ldrb	r3, [r5, #0]
 8005c28:	3b01      	subs	r3, #1
 8005c2a:	2b03      	cmp	r3, #3
 8005c2c:	d84a      	bhi.n	8005cc4 <create_chain+0xdc>
 8005c2e:	e8df f003 	tbb	[pc, r3]
 8005c32:	98b3      	.short	0x98b3
 8005c34:	024d      	.short	0x024d
			if (obj->objsize) {
 8005c36:	e9d8 bc04 	ldrd	fp, ip, [r8, #16]
 8005c3a:	ea5b 030c 	orrs.w	r3, fp, ip
 8005c3e:	d041      	beq.n	8005cc4 <create_chain+0xdc>
				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 8005c40:	f898 3007 	ldrb.w	r3, [r8, #7]
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 8005c44:	f8d8 2008 	ldr.w	r2, [r8, #8]
				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 8005c48:	2b02      	cmp	r3, #2
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 8005c4a:	eba4 0a02 	sub.w	sl, r4, r2
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 8005c4e:	89aa      	ldrh	r2, [r5, #12]
				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 8005c50:	f000 8179 	beq.w	8005f46 <create_chain+0x35e>
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 8005c54:	2b03      	cmp	r3, #3
 8005c56:	f000 8188 	beq.w	8005f6a <create_chain+0x382>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 8005c5a:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8005c5e:	bb33      	cbnz	r3, 8005cae <create_chain+0xc6>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005c60:	0891      	lsrs	r1, r2, #2
 8005c62:	6be8      	ldr	r0, [r5, #60]	; 0x3c
	if (sector != fs->winsect) {	/* Window offset changed? */
 8005c64:	6cab      	ldr	r3, [r5, #72]	; 0x48
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005c66:	fbb4 f1f1 	udiv	r1, r4, r1
 8005c6a:	4401      	add	r1, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 8005c6c:	4299      	cmp	r1, r3
 8005c6e:	d006      	beq.n	8005c7e <create_chain+0x96>
 8005c70:	4628      	mov	r0, r5
 8005c72:	f7fe ff75 	bl	8004b60 <move_window.part.0>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005c76:	2800      	cmp	r0, #0
 8005c78:	f040 80d5 	bne.w	8005e26 <create_chain+0x23e>
 8005c7c:	89aa      	ldrh	r2, [r5, #12]
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 8005c7e:	00a1      	lsls	r1, r4, #2
 8005c80:	354c      	adds	r5, #76	; 0x4c
 8005c82:	fbb1 f3f2 	udiv	r3, r1, r2
 8005c86:	fb02 1213 	mls	r2, r2, r3, r1
 8005c8a:	18a9      	adds	r1, r5, r2
	rv = rv << 8 | ptr[0];
 8005c8c:	5cab      	ldrb	r3, [r5, r2]
	rv = rv << 8 | ptr[2];
 8005c8e:	8848      	ldrh	r0, [r1, #2]
	rv = rv << 8 | ptr[1];
 8005c90:	784a      	ldrb	r2, [r1, #1]
 8005c92:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	rv = rv << 8 | ptr[0];
 8005c96:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 8005c9a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			if (cs == 0) break;				/* Found a free cluster */
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d036      	beq.n	8005d10 <create_chain+0x128>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	f000 81ae 	beq.w	8006004 <create_chain+0x41c>
 8005ca8:	1c5a      	adds	r2, r3, #1
 8005caa:	f000 81ab 	beq.w	8006004 <create_chain+0x41c>
			if (ncl == scl) return 0;		/* No free cluster */
 8005cae:	42bc      	cmp	r4, r7
 8005cb0:	f000 80be 	beq.w	8005e30 <create_chain+0x248>
 8005cb4:	6b33      	ldr	r3, [r6, #48]	; 0x30
			ncl++;							/* Next cluster */
 8005cb6:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8005cb8:	429c      	cmp	r4, r3
 8005cba:	d2ab      	bcs.n	8005c14 <create_chain+0x2c>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005cbc:	2c01      	cmp	r4, #1
	FATFS *fs = obj->fs;
 8005cbe:	f8d8 5000 	ldr.w	r5, [r8]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005cc2:	d8ad      	bhi.n	8005c20 <create_chain+0x38>
		switch (fs->fs_type) {
 8005cc4:	2401      	movs	r4, #1
}
 8005cc6:	4620      	mov	r0, r4
 8005cc8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005ccc:	89a8      	ldrh	r0, [r5, #12]
 8005cce:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8005cd0:	0881      	lsrs	r1, r0, #2
	if (sector != fs->winsect) {	/* Window offset changed? */
 8005cd2:	6cab      	ldr	r3, [r5, #72]	; 0x48
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005cd4:	fbb4 f1f1 	udiv	r1, r4, r1
 8005cd8:	4411      	add	r1, r2
	if (sector != fs->winsect) {	/* Window offset changed? */
 8005cda:	4299      	cmp	r1, r3
 8005cdc:	d006      	beq.n	8005cec <create_chain+0x104>
 8005cde:	4628      	mov	r0, r5
 8005ce0:	f7fe ff3e 	bl	8004b60 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005ce4:	2800      	cmp	r0, #0
 8005ce6:	f040 809e 	bne.w	8005e26 <create_chain+0x23e>
 8005cea:	89a8      	ldrh	r0, [r5, #12]
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8005cec:	00a2      	lsls	r2, r4, #2
 8005cee:	354c      	adds	r5, #76	; 0x4c
 8005cf0:	fbb2 f3f0 	udiv	r3, r2, r0
 8005cf4:	fb00 2013 	mls	r0, r0, r3, r2
 8005cf8:	1829      	adds	r1, r5, r0
	rv = rv << 8 | ptr[0];
 8005cfa:	5c2b      	ldrb	r3, [r5, r0]
	rv = rv << 8 | ptr[1];
 8005cfc:	784a      	ldrb	r2, [r1, #1]
	rv = rv << 8 | ptr[2];
 8005cfe:	8848      	ldrh	r0, [r1, #2]
	rv = rv << 8 | ptr[1];
 8005d00:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	rv = rv << 8 | ptr[0];
 8005d04:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8005d08:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
			if (cs == 0) break;				/* Found a free cluster */
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d1c8      	bne.n	8005ca2 <create_chain+0xba>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8005d10:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8005d12:	42a3      	cmp	r3, r4
 8005d14:	d9d6      	bls.n	8005cc4 <create_chain+0xdc>
 8005d16:	f04f 32ff 	mov.w	r2, #4294967295
 8005d1a:	4621      	mov	r1, r4
 8005d1c:	4630      	mov	r0, r6
 8005d1e:	f7fe ff59 	bl	8004bd4 <put_fat.part.0>
		if (res == FR_OK && clst != 0) {
 8005d22:	b968      	cbnz	r0, 8005d40 <create_chain+0x158>
 8005d24:	f1b9 0f00 	cmp.w	r9, #0
 8005d28:	d00a      	beq.n	8005d40 <create_chain+0x158>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8005d2a:	f1b9 0f01 	cmp.w	r9, #1
 8005d2e:	d9c9      	bls.n	8005cc4 <create_chain+0xdc>
 8005d30:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8005d32:	4599      	cmp	r9, r3
 8005d34:	d2c6      	bcs.n	8005cc4 <create_chain+0xdc>
 8005d36:	4649      	mov	r1, r9
 8005d38:	4622      	mov	r2, r4
 8005d3a:	4630      	mov	r0, r6
 8005d3c:	f7fe ff4a 	bl	8004bd4 <put_fat.part.0>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8005d40:	2800      	cmp	r0, #0
 8005d42:	d16d      	bne.n	8005e20 <create_chain+0x238>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8005d44:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8005d46:	69f2      	ldr	r2, [r6, #28]
 8005d48:	3b02      	subs	r3, #2
		fs->last_clst = ncl;
 8005d4a:	61b4      	str	r4, [r6, #24]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d801      	bhi.n	8005d54 <create_chain+0x16c>
 8005d50:	3a01      	subs	r2, #1
 8005d52:	61f2      	str	r2, [r6, #28]
		fs->fsi_flag |= 1;
 8005d54:	7933      	ldrb	r3, [r6, #4]
}
 8005d56:	4620      	mov	r0, r4
		fs->fsi_flag |= 1;
 8005d58:	f043 0301 	orr.w	r3, r3, #1
 8005d5c:	7133      	strb	r3, [r6, #4]
}
 8005d5e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005d62:	89a8      	ldrh	r0, [r5, #12]
 8005d64:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8005d66:	0841      	lsrs	r1, r0, #1
	if (sector != fs->winsect) {	/* Window offset changed? */
 8005d68:	6cab      	ldr	r3, [r5, #72]	; 0x48
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005d6a:	fbb4 f1f1 	udiv	r1, r4, r1
 8005d6e:	4411      	add	r1, r2
	if (sector != fs->winsect) {	/* Window offset changed? */
 8005d70:	4299      	cmp	r1, r3
 8005d72:	d005      	beq.n	8005d80 <create_chain+0x198>
 8005d74:	4628      	mov	r0, r5
 8005d76:	f7fe fef3 	bl	8004b60 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005d7a:	2800      	cmp	r0, #0
 8005d7c:	d153      	bne.n	8005e26 <create_chain+0x23e>
 8005d7e:	89a8      	ldrh	r0, [r5, #12]
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8005d80:	0062      	lsls	r2, r4, #1
 8005d82:	354c      	adds	r5, #76	; 0x4c
 8005d84:	fbb2 f3f0 	udiv	r3, r2, r0
 8005d88:	fb00 2013 	mls	r0, r0, r3, r2
 8005d8c:	182a      	adds	r2, r5, r0
	rv = rv << 8 | ptr[0];
 8005d8e:	5c2b      	ldrb	r3, [r5, r0]
 8005d90:	7852      	ldrb	r2, [r2, #1]
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8005d92:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			break;
 8005d96:	e782      	b.n	8005c9e <create_chain+0xb6>
			bc = (UINT)clst; bc += bc / 2;
 8005d98:	eb04 0a54 	add.w	sl, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005d9c:	89aa      	ldrh	r2, [r5, #12]
 8005d9e:	6be9      	ldr	r1, [r5, #60]	; 0x3c
	if (sector != fs->winsect) {	/* Window offset changed? */
 8005da0:	6ca8      	ldr	r0, [r5, #72]	; 0x48
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005da2:	fbba f3f2 	udiv	r3, sl, r2
 8005da6:	eb03 0c01 	add.w	ip, r3, r1
	if (sector != fs->winsect) {	/* Window offset changed? */
 8005daa:	4584      	cmp	ip, r0
 8005dac:	d00a      	beq.n	8005dc4 <create_chain+0x1dc>
 8005dae:	4661      	mov	r1, ip
 8005db0:	4628      	mov	r0, r5
 8005db2:	f7fe fed5 	bl	8004b60 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005db6:	2800      	cmp	r0, #0
 8005db8:	d135      	bne.n	8005e26 <create_chain+0x23e>
 8005dba:	89aa      	ldrh	r2, [r5, #12]
 8005dbc:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 8005dbe:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 8005dc0:	fbba f3f2 	udiv	r3, sl, r2
			wc = fs->win[bc++ % SS(fs)];
 8005dc4:	f10a 0b01 	add.w	fp, sl, #1
 8005dc8:	fb02 a313 	mls	r3, r2, r3, sl
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005dcc:	fbbb fcf2 	udiv	ip, fp, r2
 8005dd0:	4461      	add	r1, ip
			wc = fs->win[bc++ % SS(fs)];
 8005dd2:	442b      	add	r3, r5
	if (sector != fs->winsect) {	/* Window offset changed? */
 8005dd4:	4281      	cmp	r1, r0
			wc = fs->win[bc++ % SS(fs)];
 8005dd6:	f893 a04c 	ldrb.w	sl, [r3, #76]	; 0x4c
	if (sector != fs->winsect) {	/* Window offset changed? */
 8005dda:	d006      	beq.n	8005dea <create_chain+0x202>
 8005ddc:	4628      	mov	r0, r5
 8005dde:	f7fe febf 	bl	8004b60 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005de2:	bb00      	cbnz	r0, 8005e26 <create_chain+0x23e>
 8005de4:	89aa      	ldrh	r2, [r5, #12]
 8005de6:	fbbb fcf2 	udiv	ip, fp, r2
			wc |= fs->win[bc % SS(fs)] << 8;
 8005dea:	fb02 bb1c 	mls	fp, r2, ip, fp
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8005dee:	07e1      	lsls	r1, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 8005df0:	445d      	add	r5, fp
 8005df2:	f895 304c 	ldrb.w	r3, [r5, #76]	; 0x4c
 8005df6:	ea4a 2303 	orr.w	r3, sl, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8005dfa:	bf4c      	ite	mi
 8005dfc:	091b      	lsrmi	r3, r3, #4
 8005dfe:	f3c3 030b 	ubfxpl	r3, r3, #0, #12
 8005e02:	e74c      	b.n	8005c9e <create_chain+0xb6>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8005e04:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8005e06:	42bb      	cmp	r3, r7
 8005e08:	f67f aefa 	bls.w	8005c00 <create_chain+0x18>
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8005e0c:	7832      	ldrb	r2, [r6, #0]
 8005e0e:	2a04      	cmp	r2, #4
 8005e10:	f47f aefc 	bne.w	8005c0c <create_chain+0x24>
	if (clst >= fs->n_fatent - 2) clst = 0;
 8005e14:	3b02      	subs	r3, #2
	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 8005e16:	1ebc      	subs	r4, r7, #2
	if (clst >= fs->n_fatent - 2) clst = 0;
 8005e18:	429c      	cmp	r4, r3
 8005e1a:	bf28      	it	cs
 8005e1c:	2400      	movcs	r4, #0
 8005e1e:	e01f      	b.n	8005e60 <create_chain+0x278>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8005e20:	2801      	cmp	r0, #1
 8005e22:	f47f af4f 	bne.w	8005cc4 <create_chain+0xdc>
 8005e26:	f04f 34ff 	mov.w	r4, #4294967295
}
 8005e2a:	4620      	mov	r0, r4
 8005e2c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (ncl == scl) return 0;		/* No free cluster */
 8005e30:	2400      	movs	r4, #0
}
 8005e32:	4620      	mov	r0, r4
 8005e34:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8005e38:	f7fe ff9a 	bl	8004d70 <get_fat>
		if (cs < 2) return 1;				/* Invalid FAT value */
 8005e3c:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8005e3e:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 8005e40:	f67f af40 	bls.w	8005cc4 <create_chain+0xdc>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005e44:	1c60      	adds	r0, r4, #1
 8005e46:	d0ee      	beq.n	8005e26 <create_chain+0x23e>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005e48:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8005e4a:	42a3      	cmp	r3, r4
 8005e4c:	f63f af3b 	bhi.w	8005cc6 <create_chain+0xde>
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8005e50:	7832      	ldrb	r2, [r6, #0]
 8005e52:	464f      	mov	r7, r9
 8005e54:	2a04      	cmp	r2, #4
 8005e56:	f47f aed9 	bne.w	8005c0c <create_chain+0x24>
 8005e5a:	e7db      	b.n	8005e14 <create_chain+0x22c>
	if (clst >= fs->n_fatent - 2) clst = 0;
 8005e5c:	2400      	movs	r4, #0
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8005e5e:	2701      	movs	r7, #1
	scl = val = clst; ctr = 0;
 8005e60:	89b2      	ldrh	r2, [r6, #12]
 8005e62:	4625      	mov	r5, r4
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 8005e64:	f04f 0b01 	mov.w	fp, #1
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 8005e68:	ea4f 0ad5 	mov.w	sl, r5, lsr #3
 8005e6c:	fbba f0f2 	udiv	r0, sl, r2
	if (sector != fs->winsect) {	/* Window offset changed? */
 8005e70:	e9d6 1311 	ldrd	r1, r3, [r6, #68]	; 0x44
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 8005e74:	4401      	add	r1, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 8005e76:	4299      	cmp	r1, r3
 8005e78:	d007      	beq.n	8005e8a <create_chain+0x2a2>
 8005e7a:	4630      	mov	r0, r6
 8005e7c:	f7fe fe70 	bl	8004b60 <move_window.part.0>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 8005e80:	2800      	cmp	r0, #0
 8005e82:	d1d0      	bne.n	8005e26 <create_chain+0x23e>
 8005e84:	89b2      	ldrh	r2, [r6, #12]
 8005e86:	fbba f0f2 	udiv	r0, sl, r2
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 8005e8a:	fb02 aa10 	mls	sl, r2, r0, sl
 8005e8e:	f005 0307 	and.w	r3, r5, #7
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 8005e92:	6b31      	ldr	r1, [r6, #48]	; 0x30
 8005e94:	eb06 000a 	add.w	r0, r6, sl
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 8005e98:	fa0b f303 	lsl.w	r3, fp, r3
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 8005e9c:	f1a1 0c02 	sub.w	ip, r1, #2
 8005ea0:	f890 004c 	ldrb.w	r0, [r0, #76]	; 0x4c
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 8005ea4:	b2db      	uxtb	r3, r3
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 8005ea6:	1c69      	adds	r1, r5, #1
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 8005ea8:	ea03 0e00 	and.w	lr, r3, r0
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 8005eac:	4561      	cmp	r1, ip
 8005eae:	d330      	bcc.n	8005f12 <create_chain+0x32a>
				if (!bv) {	/* Is it a free cluster? */
 8005eb0:	f1be 0f00 	cmp.w	lr, #0
 8005eb4:	d138      	bne.n	8005f28 <create_chain+0x340>
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 8005eb6:	3103      	adds	r1, #3
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 8005eb8:	f105 0402 	add.w	r4, r5, #2
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 8005ebc:	f63f af03 	bhi.w	8005cc6 <create_chain+0xde>
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 8005ec0:	ea4f 0ad5 	mov.w	sl, r5, lsr #3
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	f005 0507 	and.w	r5, r5, #7
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 8005eca:	6c71      	ldr	r1, [r6, #68]	; 0x44
 8005ecc:	fbba f0f2 	udiv	r0, sl, r2
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 8005ed0:	fa03 f505 	lsl.w	r5, r3, r5
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 8005ed4:	4401      	add	r1, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 8005ed6:	6cb3      	ldr	r3, [r6, #72]	; 0x48
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 8005ed8:	fb02 aa10 	mls	sl, r2, r0, sl
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 8005edc:	b2ed      	uxtb	r5, r5
	if (sector != fs->winsect) {	/* Window offset changed? */
 8005ede:	4299      	cmp	r1, r3
 8005ee0:	d004      	beq.n	8005eec <create_chain+0x304>
 8005ee2:	4630      	mov	r0, r6
 8005ee4:	f7fe fe3c 	bl	8004b60 <move_window.part.0>
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 8005ee8:	2800      	cmp	r0, #0
 8005eea:	d19c      	bne.n	8005e26 <create_chain+0x23e>
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 8005eec:	eb06 010a 	add.w	r1, r6, sl
 8005ef0:	f891 304c 	ldrb.w	r3, [r1, #76]	; 0x4c
 8005ef4:	421d      	tst	r5, r3
 8005ef6:	f47f aee5 	bne.w	8005cc4 <create_chain+0xdc>
				fs->win[i] ^= bm;	/* Flip the bit */
 8005efa:	406b      	eors	r3, r5
				fs->wflag = 1;
 8005efc:	2201      	movs	r2, #1
				fs->win[i] ^= bm;	/* Flip the bit */
 8005efe:	f881 304c 	strb.w	r3, [r1, #76]	; 0x4c
				fs->wflag = 1;
 8005f02:	70f2      	strb	r2, [r6, #3]
		if (clst == 0) {							/* Is it a new chain? */
 8005f04:	f1b9 0f00 	cmp.w	r9, #0
 8005f08:	d137      	bne.n	8005f7a <create_chain+0x392>
			obj->stat = 2;							/* Set status 'contiguous' */
 8005f0a:	2302      	movs	r3, #2
 8005f0c:	f888 3007 	strb.w	r3, [r8, #7]
 8005f10:	e718      	b.n	8005d44 <create_chain+0x15c>
				if (!bv) {	/* Is it a free cluster? */
 8005f12:	f1be 0f00 	cmp.w	lr, #0
 8005f16:	d0ce      	beq.n	8005eb6 <create_chain+0x2ce>
				if (val == clst) return 0;	/* All cluster scanned? */
 8005f18:	42a1      	cmp	r1, r4
 8005f1a:	d089      	beq.n	8005e30 <create_chain+0x248>
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 8005f1c:	005b      	lsls	r3, r3, #1
			} while (bm);
 8005f1e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8005f22:	d005      	beq.n	8005f30 <create_chain+0x348>
			bm = 1;
 8005f24:	460d      	mov	r5, r1
 8005f26:	e7be      	b.n	8005ea6 <create_chain+0x2be>
				if (val == clst) return 0;	/* All cluster scanned? */
 8005f28:	2c00      	cmp	r4, #0
 8005f2a:	d081      	beq.n	8005e30 <create_chain+0x248>
 8005f2c:	4692      	mov	sl, r2
 8005f2e:	2100      	movs	r1, #0
		} while (++i < SS(fs));
 8005f30:	f10a 0a01 	add.w	sl, sl, #1
 8005f34:	4592      	cmp	sl, r2
 8005f36:	d21e      	bcs.n	8005f76 <create_chain+0x38e>
 8005f38:	eb06 000a 	add.w	r0, r6, sl
			bm = 1;
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	460d      	mov	r5, r1
 8005f40:	f890 004c 	ldrb.w	r0, [r0, #76]	; 0x4c
 8005f44:	e7af      	b.n	8005ea6 <create_chain+0x2be>
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 8005f46:	f11b 30ff 	adds.w	r0, fp, #4294967295
 8005f4a:	f04f 0300 	mov.w	r3, #0
 8005f4e:	f14c 31ff 	adc.w	r1, ip, #4294967295
 8005f52:	f7fa f961 	bl	8000218 <__aeabi_uldivmod>
 8005f56:	896b      	ldrh	r3, [r5, #10]
 8005f58:	fbb0 f0f3 	udiv	r0, r0, r3
					if (cofs <= clen) {
 8005f5c:	4582      	cmp	sl, r0
 8005f5e:	f63f aeb1 	bhi.w	8005cc4 <create_chain+0xdc>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 8005f62:	f43f aea4 	beq.w	8005cae <create_chain+0xc6>
					val = clst + 1; 	/* Generate the value */
 8005f66:	1c63      	adds	r3, r4, #1
					break;
 8005f68:	e699      	b.n	8005c9e <create_chain+0xb6>
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 8005f6a:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8005f6e:	459a      	cmp	sl, r3
 8005f70:	f4bf ae73 	bcs.w	8005c5a <create_chain+0x72>
 8005f74:	e7f7      	b.n	8005f66 <create_chain+0x37e>
 8005f76:	460d      	mov	r5, r1
 8005f78:	e776      	b.n	8005e68 <create_chain+0x280>
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 8005f7a:	f898 3007 	ldrb.w	r3, [r8, #7]
 8005f7e:	2b02      	cmp	r3, #2
 8005f80:	d031      	beq.n	8005fe6 <create_chain+0x3fe>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 8005f82:	f109 0301 	add.w	r3, r9, #1
 8005f86:	42a3      	cmp	r3, r4
 8005f88:	d028      	beq.n	8005fdc <create_chain+0x3f4>
				if (obj->n_frag == 0) obj->n_frag = 1;
 8005f8a:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8005f8e:	b91b      	cbnz	r3, 8005f98 <create_chain+0x3b0>
 8005f90:	2201      	movs	r2, #1
 8005f92:	4613      	mov	r3, r2
 8005f94:	f8c8 201c 	str.w	r2, [r8, #28]
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 8005f98:	eba9 0103 	sub.w	r1, r9, r3
 8005f9c:	2b01      	cmp	r3, #1
 8005f9e:	4622      	mov	r2, r4
 8005fa0:	f101 0501 	add.w	r5, r1, #1
 8005fa4:	bf88      	it	hi
 8005fa6:	1c8a      	addhi	r2, r1, #2
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8005fa8:	2d01      	cmp	r5, #1
 8005faa:	4629      	mov	r1, r5
 8005fac:	f67f ae8a 	bls.w	8005cc4 <create_chain+0xdc>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 8005fb0:	f8d8 0000 	ldr.w	r0, [r8]
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8005fb4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8005fb6:	429d      	cmp	r5, r3
 8005fb8:	f4bf ae84 	bcs.w	8005cc4 <create_chain+0xdc>
 8005fbc:	f7fe fe0a 	bl	8004bd4 <put_fat.part.0>
		if (res != FR_OK) return res;
 8005fc0:	2800      	cmp	r0, #0
 8005fc2:	f47f af2d 	bne.w	8005e20 <create_chain+0x238>
		obj->n_frag--;
 8005fc6:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8005fca:	3b01      	subs	r3, #1
 8005fcc:	f8c8 301c 	str.w	r3, [r8, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d1e1      	bne.n	8005f98 <create_chain+0x3b0>
				if (res == FR_OK) obj->n_frag = 1;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	f8c8 301c 	str.w	r3, [r8, #28]
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8005fda:	e6b3      	b.n	8005d44 <create_chain+0x15c>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 8005fdc:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8005fe0:	b173      	cbz	r3, 8006000 <create_chain+0x418>
 8005fe2:	3301      	adds	r3, #1
 8005fe4:	e7f7      	b.n	8005fd6 <create_chain+0x3ee>
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 8005fe6:	1c7b      	adds	r3, r7, #1
 8005fe8:	42a3      	cmp	r3, r4
 8005fea:	f43f aeab 	beq.w	8005d44 <create_chain+0x15c>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 8005fee:	f8d8 3008 	ldr.w	r3, [r8, #8]
				obj->stat = 3;						/* Change status 'just fragmented' */
 8005ff2:	2203      	movs	r2, #3
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 8005ff4:	1afb      	subs	r3, r7, r3
				obj->stat = 3;						/* Change status 'just fragmented' */
 8005ff6:	f888 2007 	strb.w	r2, [r8, #7]
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 8005ffa:	f8c8 3018 	str.w	r3, [r8, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 8005ffe:	e7c0      	b.n	8005f82 <create_chain+0x39a>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 8006000:	2302      	movs	r3, #2
 8006002:	e7e8      	b.n	8005fd6 <create_chain+0x3ee>
 8006004:	461c      	mov	r4, r3
 8006006:	e65e      	b.n	8005cc6 <create_chain+0xde>

08006008 <dir_sdi>:
{
 8006008:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	FATFS *fs = dp->obj.fs;
 800600c:	f8d0 8000 	ldr.w	r8, [r0]
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006010:	f898 3000 	ldrb.w	r3, [r8]
 8006014:	2b04      	cmp	r3, #4
 8006016:	bf0c      	ite	eq
 8006018:	f04f 5280 	moveq.w	r2, #268435456	; 0x10000000
 800601c:	f44f 1200 	movne.w	r2, #2097152	; 0x200000
 8006020:	428a      	cmp	r2, r1
 8006022:	d922      	bls.n	800606a <dir_sdi+0x62>
 8006024:	460c      	mov	r4, r1
 8006026:	06e1      	lsls	r1, r4, #27
 8006028:	d11f      	bne.n	800606a <dir_sdi+0x62>
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800602a:	6885      	ldr	r5, [r0, #8]
 800602c:	4606      	mov	r6, r0
	dp->dptr = ofs;				/* Set current offset */
 800602e:	6304      	str	r4, [r0, #48]	; 0x30
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8006030:	b1f5      	cbz	r5, 8006070 <dir_sdi+0x68>
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006032:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 8006036:	f8b8 900c 	ldrh.w	r9, [r8, #12]
 800603a:	fb09 f903 	mul.w	r9, r9, r3
		while (ofs >= csz) {				/* Follow cluster chain */
 800603e:	454c      	cmp	r4, r9
 8006040:	f0c0 80f6 	bcc.w	8006230 <dir_sdi+0x228>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006044:	2d01      	cmp	r5, #1
 8006046:	d910      	bls.n	800606a <dir_sdi+0x62>
 8006048:	eba4 0409 	sub.w	r4, r4, r9
 800604c:	4647      	mov	r7, r8
 800604e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006050:	429d      	cmp	r5, r3
 8006052:	d20a      	bcs.n	800606a <dir_sdi+0x62>
		switch (fs->fs_type) {
 8006054:	783b      	ldrb	r3, [r7, #0]
 8006056:	3b01      	subs	r3, #1
 8006058:	2b03      	cmp	r3, #3
 800605a:	d806      	bhi.n	800606a <dir_sdi+0x62>
 800605c:	e8df f003 	tbb	[pc, r3]
 8006060:	2559849f 	.word	0x2559849f
		dp->sect = clust2sect(fs, clst);
 8006064:	2300      	movs	r3, #0
 8006066:	e9c6 530d 	strd	r5, r3, [r6, #52]	; 0x34
		switch (fs->fs_type) {
 800606a:	2002      	movs	r0, #2
}
 800606c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8006070:	2b02      	cmp	r3, #2
 8006072:	f200 80cb 	bhi.w	800620c <dir_sdi+0x204>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8006076:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800607a:	ebb3 1f54 	cmp.w	r3, r4, lsr #5
 800607e:	d9f4      	bls.n	800606a <dir_sdi+0x62>
		dp->sect = fs->dirbase;
 8006080:	f8d8 2040 	ldr.w	r2, [r8, #64]	; 0x40
 8006084:	63b2      	str	r2, [r6, #56]	; 0x38
	dp->clust = clst;					/* Current cluster# */
 8006086:	6375      	str	r5, [r6, #52]	; 0x34
	if (!dp->sect) return FR_INT_ERR;
 8006088:	2a00      	cmp	r2, #0
 800608a:	d0ee      	beq.n	800606a <dir_sdi+0x62>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800608c:	f8b8 100c 	ldrh.w	r1, [r8, #12]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006090:	f108 084c 	add.w	r8, r8, #76	; 0x4c
	return FR_OK;
 8006094:	2000      	movs	r0, #0
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006096:	fbb4 f3f1 	udiv	r3, r4, r1
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800609a:	fb01 4413 	mls	r4, r1, r3, r4
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800609e:	4413      	add	r3, r2
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80060a0:	4444      	add	r4, r8
 80060a2:	e9c6 340e 	strd	r3, r4, [r6, #56]	; 0x38
}
 80060a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (obj->objsize) {
 80060aa:	e9d6 bc04 	ldrd	fp, ip, [r6, #16]
 80060ae:	ea5b 030c 	orrs.w	r3, fp, ip
 80060b2:	d0da      	beq.n	800606a <dir_sdi+0x62>
				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 80060b4:	79f3      	ldrb	r3, [r6, #7]
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 80060b6:	68b2      	ldr	r2, [r6, #8]
				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 80060b8:	2b02      	cmp	r3, #2
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 80060ba:	eba5 0a02 	sub.w	sl, r5, r2
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 80060be:	89ba      	ldrh	r2, [r7, #12]
				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 80060c0:	f000 80c5 	beq.w	800624e <dir_sdi+0x246>
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 80060c4:	2b03      	cmp	r3, #3
 80060c6:	f000 80a9 	beq.w	800621c <dir_sdi+0x214>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 80060ca:	69f3      	ldr	r3, [r6, #28]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	f040 80cd 	bne.w	800626c <dir_sdi+0x264>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80060d2:	0891      	lsrs	r1, r2, #2
 80060d4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
	if (sector != fs->winsect) {	/* Window offset changed? */
 80060d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80060d8:	fbb5 f1f1 	udiv	r1, r5, r1
 80060dc:	4401      	add	r1, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 80060de:	4299      	cmp	r1, r3
 80060e0:	d006      	beq.n	80060f0 <dir_sdi+0xe8>
 80060e2:	4638      	mov	r0, r7
 80060e4:	f7fe fd3c 	bl	8004b60 <move_window.part.0>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80060e8:	2800      	cmp	r0, #0
 80060ea:	f040 809e 	bne.w	800622a <dir_sdi+0x222>
 80060ee:	89ba      	ldrh	r2, [r7, #12]
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 80060f0:	00ad      	lsls	r5, r5, #2
 80060f2:	374c      	adds	r7, #76	; 0x4c
 80060f4:	fbb5 f3f2 	udiv	r3, r5, r2
 80060f8:	fb02 5213 	mls	r2, r2, r3, r5
 80060fc:	18bb      	adds	r3, r7, r2
	rv = rv << 8 | ptr[0];
 80060fe:	5cbd      	ldrb	r5, [r7, r2]
	rv = rv << 8 | ptr[2];
 8006100:	885a      	ldrh	r2, [r3, #2]
	rv = rv << 8 | ptr[1];
 8006102:	785b      	ldrb	r3, [r3, #1]
 8006104:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 8006108:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 800610c:	f025 4500 	bic.w	r5, r5, #2147483648	; 0x80000000
 8006110:	e01e      	b.n	8006150 <dir_sdi+0x148>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006112:	89b8      	ldrh	r0, [r7, #12]
 8006114:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006116:	0881      	lsrs	r1, r0, #2
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006118:	6cbb      	ldr	r3, [r7, #72]	; 0x48
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800611a:	fbb5 f1f1 	udiv	r1, r5, r1
 800611e:	4411      	add	r1, r2
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006120:	4299      	cmp	r1, r3
 8006122:	d005      	beq.n	8006130 <dir_sdi+0x128>
 8006124:	4638      	mov	r0, r7
 8006126:	f7fe fd1b 	bl	8004b60 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800612a:	2800      	cmp	r0, #0
 800612c:	d17d      	bne.n	800622a <dir_sdi+0x222>
 800612e:	89b8      	ldrh	r0, [r7, #12]
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006130:	00ad      	lsls	r5, r5, #2
 8006132:	374c      	adds	r7, #76	; 0x4c
 8006134:	fbb5 f3f0 	udiv	r3, r5, r0
 8006138:	fb00 5013 	mls	r0, r0, r3, r5
 800613c:	183a      	adds	r2, r7, r0
	rv = rv << 8 | ptr[0];
 800613e:	5c3d      	ldrb	r5, [r7, r0]
	rv = rv << 8 | ptr[2];
 8006140:	8851      	ldrh	r1, [r2, #2]
	rv = rv << 8 | ptr[1];
 8006142:	7853      	ldrb	r3, [r2, #1]
 8006144:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	rv = rv << 8 | ptr[0];
 8006148:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800614c:	f025 4570 	bic.w	r5, r5, #4026531840	; 0xf0000000
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006150:	2d01      	cmp	r5, #1
 8006152:	d98a      	bls.n	800606a <dir_sdi+0x62>
 8006154:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
 8006158:	42ab      	cmp	r3, r5
 800615a:	d986      	bls.n	800606a <dir_sdi+0x62>
		while (ofs >= csz) {				/* Follow cluster chain */
 800615c:	45a1      	cmp	r9, r4
 800615e:	d869      	bhi.n	8006234 <dir_sdi+0x22c>
	FATFS *fs = obj->fs;
 8006160:	6837      	ldr	r7, [r6, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006162:	eba4 0409 	sub.w	r4, r4, r9
 8006166:	e772      	b.n	800604e <dir_sdi+0x46>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006168:	89b8      	ldrh	r0, [r7, #12]
 800616a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800616c:	0841      	lsrs	r1, r0, #1
	if (sector != fs->winsect) {	/* Window offset changed? */
 800616e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006170:	fbb5 f1f1 	udiv	r1, r5, r1
 8006174:	4411      	add	r1, r2
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006176:	4299      	cmp	r1, r3
 8006178:	d005      	beq.n	8006186 <dir_sdi+0x17e>
 800617a:	4638      	mov	r0, r7
 800617c:	f7fe fcf0 	bl	8004b60 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006180:	2800      	cmp	r0, #0
 8006182:	d152      	bne.n	800622a <dir_sdi+0x222>
 8006184:	89b8      	ldrh	r0, [r7, #12]
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006186:	006d      	lsls	r5, r5, #1
 8006188:	374c      	adds	r7, #76	; 0x4c
 800618a:	fbb5 f3f0 	udiv	r3, r5, r0
 800618e:	fb00 5013 	mls	r0, r0, r3, r5
 8006192:	183b      	adds	r3, r7, r0
	rv = rv << 8 | ptr[0];
 8006194:	5c3d      	ldrb	r5, [r7, r0]
 8006196:	785b      	ldrb	r3, [r3, #1]
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006198:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
			break;
 800619c:	e7d8      	b.n	8006150 <dir_sdi+0x148>
			bc = (UINT)clst; bc += bc / 2;
 800619e:	eb05 0b55 	add.w	fp, r5, r5, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80061a2:	89ba      	ldrh	r2, [r7, #12]
 80061a4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
	if (sector != fs->winsect) {	/* Window offset changed? */
 80061a6:	f8d7 c048 	ldr.w	ip, [r7, #72]	; 0x48
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80061aa:	fbbb f3f2 	udiv	r3, fp, r2
 80061ae:	1819      	adds	r1, r3, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 80061b0:	4561      	cmp	r1, ip
 80061b2:	d009      	beq.n	80061c8 <dir_sdi+0x1c0>
 80061b4:	4638      	mov	r0, r7
 80061b6:	f7fe fcd3 	bl	8004b60 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80061ba:	bbb0      	cbnz	r0, 800622a <dir_sdi+0x222>
 80061bc:	89ba      	ldrh	r2, [r7, #12]
 80061be:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80061c0:	f8d7 c048 	ldr.w	ip, [r7, #72]	; 0x48
 80061c4:	fbbb f3f2 	udiv	r3, fp, r2
			wc = fs->win[bc++ % SS(fs)];
 80061c8:	f10b 0a01 	add.w	sl, fp, #1
 80061cc:	fb02 b313 	mls	r3, r2, r3, fp
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80061d0:	fbba fef2 	udiv	lr, sl, r2
 80061d4:	eb0e 0100 	add.w	r1, lr, r0
			wc = fs->win[bc++ % SS(fs)];
 80061d8:	443b      	add	r3, r7
	if (sector != fs->winsect) {	/* Window offset changed? */
 80061da:	4561      	cmp	r1, ip
			wc = fs->win[bc++ % SS(fs)];
 80061dc:	f893 b04c 	ldrb.w	fp, [r3, #76]	; 0x4c
	if (sector != fs->winsect) {	/* Window offset changed? */
 80061e0:	d006      	beq.n	80061f0 <dir_sdi+0x1e8>
 80061e2:	4638      	mov	r0, r7
 80061e4:	f7fe fcbc 	bl	8004b60 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80061e8:	b9f8      	cbnz	r0, 800622a <dir_sdi+0x222>
 80061ea:	89ba      	ldrh	r2, [r7, #12]
 80061ec:	fbba fef2 	udiv	lr, sl, r2
			wc |= fs->win[bc % SS(fs)] << 8;
 80061f0:	fb02 aa1e 	mls	sl, r2, lr, sl
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80061f4:	07ea      	lsls	r2, r5, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 80061f6:	4457      	add	r7, sl
 80061f8:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80061fc:	ea4b 2b03 	orr.w	fp, fp, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006200:	bf4c      	ite	mi
 8006202:	ea4f 151b 	movmi.w	r5, fp, lsr #4
 8006206:	f3cb 050b 	ubfxpl	r5, fp, #0, #12
 800620a:	e7a1      	b.n	8006150 <dir_sdi+0x148>
		clst = fs->dirbase;
 800620c:	f8d8 3040 	ldr.w	r3, [r8, #64]	; 0x40
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 8006210:	71c5      	strb	r5, [r0, #7]
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006212:	2b00      	cmp	r3, #0
 8006214:	f43f af2f 	beq.w	8006076 <dir_sdi+0x6e>
 8006218:	461d      	mov	r5, r3
 800621a:	e70a      	b.n	8006032 <dir_sdi+0x2a>
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 800621c:	69b3      	ldr	r3, [r6, #24]
 800621e:	459a      	cmp	sl, r3
 8006220:	f4bf af53 	bcs.w	80060ca <dir_sdi+0xc2>
					val = clst + 1; 	/* Generate the value */
 8006224:	3501      	adds	r5, #1
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006226:	1c6b      	adds	r3, r5, #1
 8006228:	d192      	bne.n	8006150 <dir_sdi+0x148>
 800622a:	2001      	movs	r0, #1
}
 800622c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006230:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006234:	3b02      	subs	r3, #2
	clst -= 2;
 8006236:	1eaa      	subs	r2, r5, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006238:	429a      	cmp	r2, r3
 800623a:	f4bf af13 	bcs.w	8006064 <dir_sdi+0x5c>
	return clst * fs->csize + fs->database;
 800623e:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 8006242:	f8d8 1044 	ldr.w	r1, [r8, #68]	; 0x44
 8006246:	fb02 1203 	mla	r2, r2, r3, r1
		dp->sect = clust2sect(fs, clst);
 800624a:	63b2      	str	r2, [r6, #56]	; 0x38
 800624c:	e71b      	b.n	8006086 <dir_sdi+0x7e>
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 800624e:	f11b 30ff 	adds.w	r0, fp, #4294967295
 8006252:	f04f 0300 	mov.w	r3, #0
 8006256:	f14c 31ff 	adc.w	r1, ip, #4294967295
 800625a:	f7f9 ffdd 	bl	8000218 <__aeabi_uldivmod>
 800625e:	897b      	ldrh	r3, [r7, #10]
 8006260:	fbb0 f0f3 	udiv	r0, r0, r3
					if (cofs <= clen) {
 8006264:	4582      	cmp	sl, r0
 8006266:	f63f af00 	bhi.w	800606a <dir_sdi+0x62>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 800626a:	d1db      	bne.n	8006224 <dir_sdi+0x21c>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800626c:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
 8006270:	2b00      	cmp	r3, #0
 8006272:	f6bf aefa 	bge.w	800606a <dir_sdi+0x62>
		while (ofs >= csz) {				/* Follow cluster chain */
 8006276:	45a1      	cmp	r9, r4
 8006278:	d803      	bhi.n	8006282 <dir_sdi+0x27a>
	FATFS *fs = obj->fs;
 800627a:	6837      	ldr	r7, [r6, #0]
 800627c:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 8006280:	e76f      	b.n	8006162 <dir_sdi+0x15a>
		while (ofs >= csz) {				/* Follow cluster chain */
 8006282:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
	clst -= 2;
 8006286:	4a01      	ldr	r2, [pc, #4]	; (800628c <dir_sdi+0x284>)
 8006288:	e7d9      	b.n	800623e <dir_sdi+0x236>
 800628a:	bf00      	nop
 800628c:	7ffffffd 	.word	0x7ffffffd

08006290 <store_xdir>:
{
 8006290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006294:	4606      	mov	r6, r0
	for (i = sum = 0; i < szblk; i++) {
 8006296:	2300      	movs	r3, #0
{
 8006298:	b083      	sub	sp, #12
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 800629a:	6832      	ldr	r2, [r6, #0]
	for (i = sum = 0; i < szblk; i++) {
 800629c:	4618      	mov	r0, r3
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 800629e:	6954      	ldr	r4, [r2, #20]
	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 80062a0:	f894 8001 	ldrb.w	r8, [r4, #1]
 80062a4:	f108 0801 	add.w	r8, r8, #1
 80062a8:	ea4f 1548 	mov.w	r5, r8, lsl #5
		if (i == XDIR_SetSum) {	/* Skip sum field */
 80062ac:	2802      	cmp	r0, #2
 80062ae:	d10e      	bne.n	80062ce <store_xdir+0x3e>
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 80062b0:	7922      	ldrb	r2, [r4, #4]
	for (i = sum = 0; i < szblk; i++) {
 80062b2:	2006      	movs	r0, #6
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 80062b4:	7961      	ldrb	r1, [r4, #5]
 80062b6:	eb02 32c3 	add.w	r2, r2, r3, lsl #15
 80062ba:	b292      	uxth	r2, r2
 80062bc:	eb02 0353 	add.w	r3, r2, r3, lsr #1
 80062c0:	f3c3 024e 	ubfx	r2, r3, #1, #15
 80062c4:	eb01 33c3 	add.w	r3, r1, r3, lsl #15
 80062c8:	fa12 f383 	uxtah	r3, r2, r3
 80062cc:	b29b      	uxth	r3, r3
 80062ce:	5c22      	ldrb	r2, [r4, r0]
	for (i = sum = 0; i < szblk; i++) {
 80062d0:	3001      	adds	r0, #1
 80062d2:	eb02 32c3 	add.w	r2, r2, r3, lsl #15
 80062d6:	4285      	cmp	r5, r0
 80062d8:	b292      	uxth	r2, r2
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 80062da:	eb02 0353 	add.w	r3, r2, r3, lsr #1
 80062de:	b29b      	uxth	r3, r3
	for (i = sum = 0; i < szblk; i++) {
 80062e0:	d8e4      	bhi.n	80062ac <store_xdir+0x1c>
	*ptr++ = (BYTE)val; val >>= 8;
 80062e2:	0a1a      	lsrs	r2, r3, #8
 80062e4:	70a3      	strb	r3, [r4, #2]
	res = dir_sdi(dp, dp->blk_ofs);
 80062e6:	4630      	mov	r0, r6
	*ptr++ = (BYTE)val;
 80062e8:	70e2      	strb	r2, [r4, #3]
	res = dir_sdi(dp, dp->blk_ofs);
 80062ea:	6cf1      	ldr	r1, [r6, #76]	; 0x4c
 80062ec:	f7ff fe8c 	bl	8006008 <dir_sdi>
	while (res == FR_OK) {
 80062f0:	9000      	str	r0, [sp, #0]
 80062f2:	2800      	cmp	r0, #0
 80062f4:	d17e      	bne.n	80063f4 <store_xdir+0x164>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80062f6:	f04f 0901 	mov.w	r9, #1
		res = move_window(dp->obj.fs, dp->sect);
 80062fa:	6835      	ldr	r5, [r6, #0]
 80062fc:	f8d6 a038 	ldr.w	sl, [r6, #56]	; 0x38
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006300:	6caf      	ldr	r7, [r5, #72]	; 0x48
 8006302:	45ba      	cmp	sl, r7
 8006304:	d015      	beq.n	8006332 <store_xdir+0xa2>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006306:	78eb      	ldrb	r3, [r5, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006308:	f105 014c 	add.w	r1, r5, #76	; 0x4c
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800630c:	2b00      	cmp	r3, #0
 800630e:	d13a      	bne.n	8006386 <store_xdir+0xf6>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006310:	2301      	movs	r3, #1
 8006312:	4652      	mov	r2, sl
 8006314:	7868      	ldrb	r0, [r5, #1]
 8006316:	f7fe f9ed 	bl	80046f4 <disk_read>
 800631a:	b140      	cbz	r0, 800632e <store_xdir+0x9e>
			fs->winsect = sector;
 800631c:	f04f 33ff 	mov.w	r3, #4294967295
 8006320:	2201      	movs	r2, #1
 8006322:	64ab      	str	r3, [r5, #72]	; 0x48
 8006324:	9200      	str	r2, [sp, #0]
}
 8006326:	9800      	ldr	r0, [sp, #0]
 8006328:	b003      	add	sp, #12
 800632a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
 800632e:	f8c5 a048 	str.w	sl, [r5, #72]	; 0x48
		mem_cpy(dp->dir, dirb, SZDIRE);
 8006332:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006334:	1cda      	adds	r2, r3, #3
 8006336:	1b12      	subs	r2, r2, r4
 8006338:	2a06      	cmp	r2, #6
 800633a:	d94a      	bls.n	80063d2 <store_xdir+0x142>
			*d++ = *s++;
 800633c:	6822      	ldr	r2, [r4, #0]
 800633e:	601a      	str	r2, [r3, #0]
 8006340:	6862      	ldr	r2, [r4, #4]
 8006342:	605a      	str	r2, [r3, #4]
 8006344:	68a2      	ldr	r2, [r4, #8]
 8006346:	609a      	str	r2, [r3, #8]
 8006348:	68e2      	ldr	r2, [r4, #12]
 800634a:	60da      	str	r2, [r3, #12]
 800634c:	6922      	ldr	r2, [r4, #16]
 800634e:	611a      	str	r2, [r3, #16]
 8006350:	6962      	ldr	r2, [r4, #20]
 8006352:	615a      	str	r2, [r3, #20]
 8006354:	69a2      	ldr	r2, [r4, #24]
 8006356:	619a      	str	r2, [r3, #24]
 8006358:	69e2      	ldr	r2, [r4, #28]
 800635a:	61da      	str	r2, [r3, #28]
		dp->obj.fs->wflag = 1;
 800635c:	6833      	ldr	r3, [r6, #0]
		if (--nent == 0) break;
 800635e:	f1b8 0801 	subs.w	r8, r8, #1
		dp->obj.fs->wflag = 1;
 8006362:	f883 9003 	strb.w	r9, [r3, #3]
		if (--nent == 0) break;
 8006366:	d0de      	beq.n	8006326 <store_xdir+0x96>
		res = dir_next(dp, 0);
 8006368:	4630      	mov	r0, r6
		dirb += SZDIRE;
 800636a:	3420      	adds	r4, #32
		res = dir_next(dp, 0);
 800636c:	f7fe fdd6 	bl	8004f1c <dir_next.constprop.0>
	while (res == FR_OK) {
 8006370:	2800      	cmp	r0, #0
 8006372:	d0c2      	beq.n	80062fa <store_xdir+0x6a>
 8006374:	2802      	cmp	r0, #2
 8006376:	bf28      	it	cs
 8006378:	2002      	movcs	r0, #2
 800637a:	b2c3      	uxtb	r3, r0
 800637c:	9300      	str	r3, [sp, #0]
}
 800637e:	9800      	ldr	r0, [sp, #0]
 8006380:	b003      	add	sp, #12
 8006382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006386:	2301      	movs	r3, #1
 8006388:	463a      	mov	r2, r7
 800638a:	7868      	ldrb	r0, [r5, #1]
 800638c:	9101      	str	r1, [sp, #4]
 800638e:	f7fe f9bf 	bl	8004710 <disk_write>
 8006392:	bb48      	cbnz	r0, 80063e8 <store_xdir+0x158>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006394:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8006396:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8006398:	1aba      	subs	r2, r7, r2
 800639a:	9901      	ldr	r1, [sp, #4]
			fs->wflag = 0;
 800639c:	70e8      	strb	r0, [r5, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800639e:	429a      	cmp	r2, r3
 80063a0:	d2b6      	bcs.n	8006310 <store_xdir+0x80>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80063a2:	f895 b002 	ldrb.w	fp, [r5, #2]
 80063a6:	f1bb 0f01 	cmp.w	fp, #1
 80063aa:	d9b1      	bls.n	8006310 <store_xdir+0x80>
 80063ac:	9401      	str	r4, [sp, #4]
 80063ae:	460c      	mov	r4, r1
 80063b0:	e000      	b.n	80063b4 <store_xdir+0x124>
 80063b2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
					wsect += fs->fsize;
 80063b4:	441f      	add	r7, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80063b6:	f10b 3bff 	add.w	fp, fp, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 80063ba:	2301      	movs	r3, #1
 80063bc:	4621      	mov	r1, r4
 80063be:	463a      	mov	r2, r7
 80063c0:	7868      	ldrb	r0, [r5, #1]
 80063c2:	f7fe f9a5 	bl	8004710 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80063c6:	f1bb 0f01 	cmp.w	fp, #1
 80063ca:	d1f2      	bne.n	80063b2 <store_xdir+0x122>
 80063cc:	4621      	mov	r1, r4
 80063ce:	9c01      	ldr	r4, [sp, #4]
 80063d0:	e79e      	b.n	8006310 <store_xdir+0x80>
 80063d2:	3b01      	subs	r3, #1
		mem_cpy(dp->dir, dirb, SZDIRE);
 80063d4:	4622      	mov	r2, r4
 80063d6:	f104 0020 	add.w	r0, r4, #32
			*d++ = *s++;
 80063da:	f812 1b01 	ldrb.w	r1, [r2], #1
		} while (--cnt);
 80063de:	4282      	cmp	r2, r0
			*d++ = *s++;
 80063e0:	f803 1f01 	strb.w	r1, [r3, #1]!
		} while (--cnt);
 80063e4:	d1f9      	bne.n	80063da <store_xdir+0x14a>
 80063e6:	e7b9      	b.n	800635c <store_xdir+0xcc>
 80063e8:	2301      	movs	r3, #1
 80063ea:	9300      	str	r3, [sp, #0]
}
 80063ec:	9800      	ldr	r0, [sp, #0]
 80063ee:	b003      	add	sp, #12
 80063f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063f4:	2802      	cmp	r0, #2
 80063f6:	4607      	mov	r7, r0
 80063f8:	bf28      	it	cs
 80063fa:	2702      	movcs	r7, #2
 80063fc:	b2fb      	uxtb	r3, r7
 80063fe:	9300      	str	r3, [sp, #0]
 8006400:	e791      	b.n	8006326 <store_xdir+0x96>
 8006402:	bf00      	nop

08006404 <dir_find>:
{
 8006404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006408:	2100      	movs	r1, #0
{
 800640a:	b087      	sub	sp, #28
 800640c:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 800640e:	6805      	ldr	r5, [r0, #0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006410:	f7ff fdfa 	bl	8006008 <dir_sdi>
	if (res != FR_OK) return res;
 8006414:	4680      	mov	r8, r0
 8006416:	bb00      	cbnz	r0, 800645a <dir_find+0x56>
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8006418:	782b      	ldrb	r3, [r5, #0]
 800641a:	2b04      	cmp	r3, #4
 800641c:	f000 819f 	beq.w	800675e <dir_find+0x35a>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006420:	f04f 09ff 	mov.w	r9, #255	; 0xff
 8006424:	6ba7      	ldr	r7, [r4, #56]	; 0x38
 8006426:	f04f 33ff 	mov.w	r3, #4294967295
 800642a:	9002      	str	r0, [sp, #8]
 800642c:	46ca      	mov	sl, r9
 800642e:	46bb      	mov	fp, r7
 8006430:	64e3      	str	r3, [r4, #76]	; 0x4c
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006432:	6cae      	ldr	r6, [r5, #72]	; 0x48
 8006434:	455e      	cmp	r6, fp
 8006436:	d016      	beq.n	8006466 <dir_find+0x62>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006438:	78eb      	ldrb	r3, [r5, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800643a:	f105 014c 	add.w	r1, r5, #76	; 0x4c
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800643e:	2b00      	cmp	r3, #0
 8006440:	f040 8097 	bne.w	8006572 <dir_find+0x16e>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006444:	2301      	movs	r3, #1
 8006446:	465a      	mov	r2, fp
 8006448:	7868      	ldrb	r0, [r5, #1]
 800644a:	f7fe f953 	bl	80046f4 <disk_read>
 800644e:	b140      	cbz	r0, 8006462 <dir_find+0x5e>
			fs->winsect = sector;
 8006450:	f04f 33ff 	mov.w	r3, #4294967295
				res = FR_DISK_ERR;
 8006454:	f04f 0801 	mov.w	r8, #1
			fs->winsect = sector;
 8006458:	64ab      	str	r3, [r5, #72]	; 0x48
}
 800645a:	4640      	mov	r0, r8
 800645c:	b007      	add	sp, #28
 800645e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
 8006462:	f8c5 b048 	str.w	fp, [r5, #72]	; 0x48
		c = dp->dir[DIR_Name];
 8006466:	6be6      	ldr	r6, [r4, #60]	; 0x3c
 8006468:	7837      	ldrb	r7, [r6, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800646a:	2f00      	cmp	r7, #0
 800646c:	d037      	beq.n	80064de <dir_find+0xda>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800646e:	7af2      	ldrb	r2, [r6, #11]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8006470:	2fe5      	cmp	r7, #229	; 0xe5
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8006472:	f002 033f 	and.w	r3, r2, #63	; 0x3f
 8006476:	71a3      	strb	r3, [r4, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8006478:	d004      	beq.n	8006484 <dir_find+0x80>
 800647a:	0711      	lsls	r1, r2, #28
 800647c:	d535      	bpl.n	80064ea <dir_find+0xe6>
 800647e:	2b0f      	cmp	r3, #15
 8006480:	f000 80a7 	beq.w	80065d2 <dir_find+0x1ce>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006484:	f04f 33ff 	mov.w	r3, #4294967295
 8006488:	f04f 0aff 	mov.w	sl, #255	; 0xff
 800648c:	64e3      	str	r3, [r4, #76]	; 0x4c
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800648e:	6b26      	ldr	r6, [r4, #48]	; 0x30
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006490:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006494:	3620      	adds	r6, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006496:	f1bb 0f00 	cmp.w	fp, #0
 800649a:	d020      	beq.n	80064de <dir_find+0xda>
	FATFS *fs = dp->obj.fs;
 800649c:	6827      	ldr	r7, [r4, #0]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800649e:	783b      	ldrb	r3, [r7, #0]
 80064a0:	2b04      	cmp	r3, #4
 80064a2:	bf0c      	ite	eq
 80064a4:	f04f 5380 	moveq.w	r3, #268435456	; 0x10000000
 80064a8:	f44f 1300 	movne.w	r3, #2097152	; 0x200000
 80064ac:	429e      	cmp	r6, r3
 80064ae:	d216      	bcs.n	80064de <dir_find+0xda>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80064b0:	89bb      	ldrh	r3, [r7, #12]
 80064b2:	fbb6 f2f3 	udiv	r2, r6, r3
 80064b6:	fb03 6312 	mls	r3, r3, r2, r6
 80064ba:	b95b      	cbnz	r3, 80064d4 <dir_find+0xd0>
		dp->sect++;				/* Next sector */
 80064bc:	f10b 0b01 	add.w	fp, fp, #1
		if (!dp->clust) {		/* Static table */
 80064c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
		dp->sect++;				/* Next sector */
 80064c2:	f8c4 b038 	str.w	fp, [r4, #56]	; 0x38
		if (!dp->clust) {		/* Static table */
 80064c6:	2900      	cmp	r1, #0
 80064c8:	d15f      	bne.n	800658a <dir_find+0x186>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80064ca:	893a      	ldrh	r2, [r7, #8]
 80064cc:	ebb2 1f56 	cmp.w	r2, r6, lsr #5
 80064d0:	f240 8140 	bls.w	8006754 <dir_find+0x350>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80064d4:	374c      	adds	r7, #76	; 0x4c
	dp->dptr = ofs;						/* Current entry */
 80064d6:	6326      	str	r6, [r4, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80064d8:	441f      	add	r7, r3
 80064da:	63e7      	str	r7, [r4, #60]	; 0x3c
	} while (res == FR_OK);
 80064dc:	e7a9      	b.n	8006432 <dir_find+0x2e>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80064de:	f04f 0804 	mov.w	r8, #4
}
 80064e2:	4640      	mov	r0, r8
 80064e4:	b007      	add	sp, #28
 80064e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (a == AM_LFN) {			/* An LFN entry is found */
 80064ea:	2b0f      	cmp	r3, #15
 80064ec:	d071      	beq.n	80065d2 <dir_find+0x1ce>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80064ee:	f1ba 0f00 	cmp.w	sl, #0
 80064f2:	f000 80de 	beq.w	80066b2 <dir_find+0x2ae>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80064f6:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
 80064fa:	07da      	lsls	r2, r3, #31
 80064fc:	d4c2      	bmi.n	8006484 <dir_find+0x80>
	} while (--cnt && r == 0);
 80064fe:	7832      	ldrb	r2, [r6, #0]
 8006500:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8006504:	429a      	cmp	r2, r3
 8006506:	d1bd      	bne.n	8006484 <dir_find+0x80>
 8006508:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800650c:	7873      	ldrb	r3, [r6, #1]
 800650e:	429a      	cmp	r2, r3
 8006510:	d1b8      	bne.n	8006484 <dir_find+0x80>
 8006512:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 8006516:	78b3      	ldrb	r3, [r6, #2]
 8006518:	429a      	cmp	r2, r3
 800651a:	d1b3      	bne.n	8006484 <dir_find+0x80>
 800651c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006520:	78f3      	ldrb	r3, [r6, #3]
 8006522:	429a      	cmp	r2, r3
 8006524:	d1ae      	bne.n	8006484 <dir_find+0x80>
 8006526:	7932      	ldrb	r2, [r6, #4]
 8006528:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800652c:	429a      	cmp	r2, r3
 800652e:	d1a9      	bne.n	8006484 <dir_find+0x80>
 8006530:	7972      	ldrb	r2, [r6, #5]
 8006532:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8006536:	429a      	cmp	r2, r3
 8006538:	d1a4      	bne.n	8006484 <dir_find+0x80>
 800653a:	79b2      	ldrb	r2, [r6, #6]
 800653c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8006540:	429a      	cmp	r2, r3
 8006542:	d19f      	bne.n	8006484 <dir_find+0x80>
 8006544:	79f2      	ldrb	r2, [r6, #7]
 8006546:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
 800654a:	429a      	cmp	r2, r3
 800654c:	d19a      	bne.n	8006484 <dir_find+0x80>
 800654e:	7a32      	ldrb	r2, [r6, #8]
 8006550:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8006554:	429a      	cmp	r2, r3
 8006556:	d195      	bne.n	8006484 <dir_find+0x80>
 8006558:	7a72      	ldrb	r2, [r6, #9]
 800655a:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 800655e:	429a      	cmp	r2, r3
 8006560:	d190      	bne.n	8006484 <dir_find+0x80>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8006562:	7ab2      	ldrb	r2, [r6, #10]
 8006564:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8006568:	429a      	cmp	r2, r3
 800656a:	d18b      	bne.n	8006484 <dir_find+0x80>
 800656c:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8006570:	e773      	b.n	800645a <dir_find+0x56>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006572:	2301      	movs	r3, #1
 8006574:	4632      	mov	r2, r6
 8006576:	7868      	ldrb	r0, [r5, #1]
 8006578:	9101      	str	r1, [sp, #4]
 800657a:	f7fe f8c9 	bl	8004710 <disk_write>
 800657e:	9901      	ldr	r1, [sp, #4]
 8006580:	2800      	cmp	r0, #0
 8006582:	d07c      	beq.n	800667e <dir_find+0x27a>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006584:	f04f 0801 	mov.w	r8, #1
 8006588:	e767      	b.n	800645a <dir_find+0x56>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800658a:	8978      	ldrh	r0, [r7, #10]
 800658c:	3801      	subs	r0, #1
 800658e:	ea10 0802 	ands.w	r8, r0, r2
 8006592:	d19f      	bne.n	80064d4 <dir_find+0xd0>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006594:	4620      	mov	r0, r4
 8006596:	f7fe fbeb 	bl	8004d70 <get_fat>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800659a:	2801      	cmp	r0, #1
 800659c:	f240 8134 	bls.w	8006808 <dir_find+0x404>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80065a0:	1c43      	adds	r3, r0, #1
 80065a2:	d0ef      	beq.n	8006584 <dir_find+0x180>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80065a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065a6:	4298      	cmp	r0, r3
 80065a8:	f080 80d4 	bcs.w	8006754 <dir_find+0x350>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80065ac:	3b02      	subs	r3, #2
	clst -= 2;
 80065ae:	1e81      	subs	r1, r0, #2
				dp->clust = clst;		/* Initialize data for new cluster */
 80065b0:	6360      	str	r0, [r4, #52]	; 0x34
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80065b2:	4299      	cmp	r1, r3
 80065b4:	f080 812d 	bcs.w	8006812 <dir_find+0x40e>
	return clst * fs->csize + fs->database;
 80065b8:	f8b7 b00a 	ldrh.w	fp, [r7, #10]
 80065bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065be:	fb01 3b0b 	mla	fp, r1, fp, r3
 80065c2:	89bb      	ldrh	r3, [r7, #12]
				dp->sect = clust2sect(fs, clst);
 80065c4:	f8c4 b038 	str.w	fp, [r4, #56]	; 0x38
 80065c8:	fbb6 f2f3 	udiv	r2, r6, r3
 80065cc:	fb03 6312 	mls	r3, r3, r2, r6
 80065d0:	e780      	b.n	80064d4 <dir_find+0xd0>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80065d2:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
 80065d6:	065a      	lsls	r2, r3, #25
 80065d8:	f53f af59 	bmi.w	800648e <dir_find+0x8a>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80065dc:	067b      	lsls	r3, r7, #25
 80065de:	f140 80b3 	bpl.w	8006748 <dir_find+0x344>
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80065e2:	6b23      	ldr	r3, [r4, #48]	; 0x30
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80065e4:	f007 07bf 	and.w	r7, r7, #191	; 0xbf
						sum = dp->dir[LDIR_Chksum];
 80065e8:	f896 900d 	ldrb.w	r9, [r6, #13]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80065ec:	64e3      	str	r3, [r4, #76]	; 0x4c
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80065ee:	7b73      	ldrb	r3, [r6, #13]
 80065f0:	454b      	cmp	r3, r9
 80065f2:	f040 80ac 	bne.w	800674e <dir_find+0x34a>
	rv = rv << 8 | ptr[0];
 80065f6:	7ef2      	ldrb	r2, [r6, #27]
 80065f8:	7eb3      	ldrb	r3, [r6, #26]
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80065fa:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 80065fe:	f040 80a6 	bne.w	800674e <dir_find+0x34a>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8006602:	f896 b000 	ldrb.w	fp, [r6]
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006606:	2101      	movs	r1, #1
 8006608:	4b8c      	ldr	r3, [pc, #560]	; (800683c <dir_find+0x438>)
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800660a:	f00b 0b3f 	and.w	fp, fp, #63	; 0x3f
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800660e:	6928      	ldr	r0, [r5, #16]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8006610:	469a      	mov	sl, r3
 8006612:	9704      	str	r7, [sp, #16]
 8006614:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006618:	4637      	mov	r7, r6
 800661a:	460b      	mov	r3, r1
 800661c:	4606      	mov	r6, r0
 800661e:	eb0b 024b 	add.w	r2, fp, fp, lsl #1
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8006622:	9005      	str	r0, [sp, #20]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8006624:	9501      	str	r5, [sp, #4]
 8006626:	eb0b 0b82 	add.w	fp, fp, r2, lsl #2
 800662a:	9403      	str	r4, [sp, #12]
 800662c:	e012      	b.n	8006654 <dir_find+0x250>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800662e:	f1bb 0ffe 	cmp.w	fp, #254	; 0xfe
 8006632:	4640      	mov	r0, r8
 8006634:	d81e      	bhi.n	8006674 <dir_find+0x270>
 8006636:	f002 fe43 	bl	80092c0 <ff_wtoupper>
 800663a:	4604      	mov	r4, r0
 800663c:	f836 001b 	ldrh.w	r0, [r6, fp, lsl #1]
 8006640:	46ab      	mov	fp, r5
 8006642:	f002 fe3d 	bl	80092c0 <ff_wtoupper>
 8006646:	4284      	cmp	r4, r0
	rv = rv << 8 | ptr[0];
 8006648:	4643      	mov	r3, r8
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800664a:	d113      	bne.n	8006674 <dir_find+0x270>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800664c:	4a7c      	ldr	r2, [pc, #496]	; (8006840 <dir_find+0x43c>)
 800664e:	4592      	cmp	sl, r2
 8006650:	f000 80e1 	beq.w	8006816 <dir_find+0x412>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8006654:	f81a 2b01 	ldrb.w	r2, [sl], #1
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8006658:	f10b 0501 	add.w	r5, fp, #1
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800665c:	18b8      	adds	r0, r7, r2
	rv = rv << 8 | ptr[0];
 800665e:	f817 8002 	ldrb.w	r8, [r7, r2]
 8006662:	7842      	ldrb	r2, [r0, #1]
 8006664:	ea48 2802 	orr.w	r8, r8, r2, lsl #8
		if (wc) {
 8006668:	2b00      	cmp	r3, #0
 800666a:	d1e0      	bne.n	800662e <dir_find+0x22a>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800666c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006670:	4590      	cmp	r8, r2
 8006672:	d0eb      	beq.n	800664c <dir_find+0x248>
 8006674:	9d01      	ldr	r5, [sp, #4]
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8006676:	f04f 0aff 	mov.w	sl, #255	; 0xff
 800667a:	9c03      	ldr	r4, [sp, #12]
 800667c:	e707      	b.n	800648e <dir_find+0x8a>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800667e:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8006680:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8006682:	1ab2      	subs	r2, r6, r2
			fs->wflag = 0;
 8006684:	70e8      	strb	r0, [r5, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006686:	429a      	cmp	r2, r3
 8006688:	f4bf aedc 	bcs.w	8006444 <dir_find+0x40>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800668c:	78af      	ldrb	r7, [r5, #2]
 800668e:	2f01      	cmp	r7, #1
 8006690:	f67f aed8 	bls.w	8006444 <dir_find+0x40>
 8006694:	4688      	mov	r8, r1
 8006696:	e000      	b.n	800669a <dir_find+0x296>
 8006698:	6b6b      	ldr	r3, [r5, #52]	; 0x34
					wsect += fs->fsize;
 800669a:	441e      	add	r6, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800669c:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 800669e:	2301      	movs	r3, #1
 80066a0:	4641      	mov	r1, r8
 80066a2:	4632      	mov	r2, r6
 80066a4:	7868      	ldrb	r0, [r5, #1]
 80066a6:	f7fe f833 	bl	8004710 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80066aa:	2f01      	cmp	r7, #1
 80066ac:	d1f4      	bne.n	8006698 <dir_find+0x294>
 80066ae:	4641      	mov	r1, r8
 80066b0:	e6c8      	b.n	8006444 <dir_find+0x40>
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80066b2:	7833      	ldrb	r3, [r6, #0]
 80066b4:	7872      	ldrb	r2, [r6, #1]
 80066b6:	01d9      	lsls	r1, r3, #7
 80066b8:	78b0      	ldrb	r0, [r6, #2]
 80066ba:	f896 c004 	ldrb.w	ip, [r6, #4]
 80066be:	ea41 0153 	orr.w	r1, r1, r3, lsr #1
 80066c2:	78f3      	ldrb	r3, [r6, #3]
 80066c4:	79b7      	ldrb	r7, [r6, #6]
 80066c6:	4411      	add	r1, r2
 80066c8:	f3c1 0246 	ubfx	r2, r1, #1, #7
 80066cc:	ea42 11c1 	orr.w	r1, r2, r1, lsl #7
 80066d0:	fa50 f281 	uxtab	r2, r0, r1
 80066d4:	7970      	ldrb	r0, [r6, #5]
 80066d6:	f3c2 0146 	ubfx	r1, r2, #1, #7
 80066da:	ea41 11c2 	orr.w	r1, r1, r2, lsl #7
 80066de:	7a32      	ldrb	r2, [r6, #8]
 80066e0:	fa53 f181 	uxtab	r1, r3, r1
 80066e4:	f3c1 0346 	ubfx	r3, r1, #1, #7
 80066e8:	ea43 11c1 	orr.w	r1, r3, r1, lsl #7
 80066ec:	fa5c f381 	uxtab	r3, ip, r1
 80066f0:	f3c3 0146 	ubfx	r1, r3, #1, #7
 80066f4:	ea41 11c3 	orr.w	r1, r1, r3, lsl #7
 80066f8:	79f3      	ldrb	r3, [r6, #7]
 80066fa:	fa50 f181 	uxtab	r1, r0, r1
 80066fe:	f3c1 0046 	ubfx	r0, r1, #1, #7
 8006702:	ea40 11c1 	orr.w	r1, r0, r1, lsl #7
 8006706:	fa57 f081 	uxtab	r0, r7, r1
 800670a:	f3c0 0146 	ubfx	r1, r0, #1, #7
 800670e:	ea41 11c0 	orr.w	r1, r1, r0, lsl #7
 8006712:	7a70      	ldrb	r0, [r6, #9]
 8006714:	fa53 f181 	uxtab	r1, r3, r1
 8006718:	f3c1 0346 	ubfx	r3, r1, #1, #7
 800671c:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
 8006720:	7ab1      	ldrb	r1, [r6, #10]
 8006722:	fa52 f383 	uxtab	r3, r2, r3
 8006726:	f3c3 0246 	ubfx	r2, r3, #1, #7
 800672a:	ea42 13c3 	orr.w	r3, r2, r3, lsl #7
 800672e:	fa50 f283 	uxtab	r2, r0, r3
 8006732:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8006736:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800673a:	fa51 f383 	uxtab	r3, r1, r3
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800673e:	b2db      	uxtb	r3, r3
 8006740:	4599      	cmp	r9, r3
 8006742:	f47f aed8 	bne.w	80064f6 <dir_find+0xf2>
 8006746:	e711      	b.n	800656c <dir_find+0x168>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8006748:	45ba      	cmp	sl, r7
 800674a:	f43f af50 	beq.w	80065ee <dir_find+0x1ea>
 800674e:	f04f 0aff 	mov.w	sl, #255	; 0xff
 8006752:	e69c      	b.n	800648e <dir_find+0x8a>
				dp->sect = 0; return FR_NO_FILE;
 8006754:	2300      	movs	r3, #0
 8006756:	f04f 0804 	mov.w	r8, #4
 800675a:	63a3      	str	r3, [r4, #56]	; 0x38
	} while (res == FR_OK);
 800675c:	e67d      	b.n	800645a <dir_find+0x56>
	while ((chr = *name++) != 0) {
 800675e:	692e      	ldr	r6, [r5, #16]
	WORD sum = 0;
 8006760:	4681      	mov	r9, r0
	while ((chr = *name++) != 0) {
 8006762:	f836 1b02 	ldrh.w	r1, [r6], #2
 8006766:	b199      	cbz	r1, 8006790 <dir_find+0x38c>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 8006768:	4608      	mov	r0, r1
 800676a:	f002 fda9 	bl	80092c0 <ff_wtoupper>
	while ((chr = *name++) != 0) {
 800676e:	f836 1b02 	ldrh.w	r1, [r6], #2
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 8006772:	b2c2      	uxtb	r2, r0
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 8006774:	0a03      	lsrs	r3, r0, #8
 8006776:	eb02 0259 	add.w	r2, r2, r9, lsr #1
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 800677a:	eb02 32c9 	add.w	r2, r2, r9, lsl #15
 800677e:	b292      	uxth	r2, r2
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 8006780:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8006784:	eb03 33c2 	add.w	r3, r3, r2, lsl #15
 8006788:	fa1f f983 	uxth.w	r9, r3
	while ((chr = *name++) != 0) {
 800678c:	2900      	cmp	r1, #0
 800678e:	d1eb      	bne.n	8006768 <dir_find+0x364>
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 8006790:	4620      	mov	r0, r4
 8006792:	f7fe fd09 	bl	80051a8 <dir_read.constprop.0>
 8006796:	2800      	cmp	r0, #0
 8006798:	d139      	bne.n	800680e <dir_find+0x40a>
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 800679a:	696b      	ldr	r3, [r5, #20]
	rv = rv << 8 | ptr[0];
 800679c:	f893 1025 	ldrb.w	r1, [r3, #37]	; 0x25
 80067a0:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 80067a4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80067a8:	454a      	cmp	r2, r9
 80067aa:	d1f1      	bne.n	8006790 <dir_find+0x38c>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 80067ac:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 80067b0:	b32a      	cbz	r2, 80067fe <dir_find+0x3fa>
 80067b2:	f102 3aff 	add.w	sl, r2, #4294967295
 80067b6:	4607      	mov	r7, r0
 80067b8:	2640      	movs	r6, #64	; 0x40
 80067ba:	fa5f fa8a 	uxtb.w	sl, sl
 80067be:	f10a 0201 	add.w	r2, sl, #1
 80067c2:	9201      	str	r2, [sp, #4]
 80067c4:	e003      	b.n	80067ce <dir_find+0x3ca>
 80067c6:	45ba      	cmp	sl, r7
 80067c8:	4617      	mov	r7, r2
 80067ca:	d016      	beq.n	80067fa <dir_find+0x3f6>
 80067cc:	696b      	ldr	r3, [r5, #20]
				if ((di % SZDIRE) == 0) di += 2;
 80067ce:	06f0      	lsls	r0, r6, #27
 80067d0:	bf08      	it	eq
 80067d2:	3602      	addeq	r6, #2
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 80067d4:	199a      	adds	r2, r3, r6
	rv = rv << 8 | ptr[0];
 80067d6:	5d9b      	ldrb	r3, [r3, r6]
 80067d8:	3602      	adds	r6, #2
 80067da:	7850      	ldrb	r0, [r2, #1]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 80067dc:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 80067e0:	f002 fd6e 	bl	80092c0 <ff_wtoupper>
 80067e4:	692a      	ldr	r2, [r5, #16]
 80067e6:	4683      	mov	fp, r0
 80067e8:	f832 0017 	ldrh.w	r0, [r2, r7, lsl #1]
 80067ec:	f002 fd68 	bl	80092c0 <ff_wtoupper>
 80067f0:	4583      	cmp	fp, r0
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 80067f2:	f107 0201 	add.w	r2, r7, #1
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 80067f6:	d0e6      	beq.n	80067c6 <dir_find+0x3c2>
 80067f8:	e7ca      	b.n	8006790 <dir_find+0x38c>
 80067fa:	9b01      	ldr	r3, [sp, #4]
 80067fc:	005a      	lsls	r2, r3, #1
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 80067fe:	692b      	ldr	r3, [r5, #16]
 8006800:	5a9b      	ldrh	r3, [r3, r2]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d1c4      	bne.n	8006790 <dir_find+0x38c>
 8006806:	e628      	b.n	800645a <dir_find+0x56>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006808:	f04f 0802 	mov.w	r8, #2
 800680c:	e625      	b.n	800645a <dir_find+0x56>
 800680e:	4680      	mov	r8, r0
 8006810:	e623      	b.n	800645a <dir_find+0x56>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006812:	46c3      	mov	fp, r8
 8006814:	e6d5      	b.n	80065c2 <dir_find+0x1be>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8006816:	463e      	mov	r6, r7
 8006818:	4619      	mov	r1, r3
 800681a:	9d01      	ldr	r5, [sp, #4]
 800681c:	7833      	ldrb	r3, [r6, #0]
 800681e:	9f04      	ldr	r7, [sp, #16]
 8006820:	0658      	lsls	r0, r3, #25
 8006822:	9c03      	ldr	r4, [sp, #12]
 8006824:	d500      	bpl.n	8006828 <dir_find+0x424>
 8006826:	b919      	cbnz	r1, 8006830 <dir_find+0x42c>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8006828:	3f01      	subs	r7, #1
 800682a:	fa5f fa87 	uxtb.w	sl, r7
 800682e:	e62e      	b.n	800648e <dir_find+0x8a>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8006830:	9b05      	ldr	r3, [sp, #20]
 8006832:	f833 301b 	ldrh.w	r3, [r3, fp, lsl #1]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d0f6      	beq.n	8006828 <dir_find+0x424>
 800683a:	e788      	b.n	800674e <dir_find+0x34a>
 800683c:	080096d4 	.word	0x080096d4
 8006840:	080096e1 	.word	0x080096e1

08006844 <follow_path>:
{
 8006844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 8006848:	780b      	ldrb	r3, [r1, #0]
{
 800684a:	b099      	sub	sp, #100	; 0x64
 800684c:	460e      	mov	r6, r1
 800684e:	4605      	mov	r5, r0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 8006850:	2b2f      	cmp	r3, #47	; 0x2f
	FATFS *fs = obj->fs;
 8006852:	f8d0 b000 	ldr.w	fp, [r0]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 8006856:	d03b      	beq.n	80068d0 <follow_path+0x8c>
 8006858:	2b5c      	cmp	r3, #92	; 0x5c
 800685a:	d03b      	beq.n	80068d4 <follow_path+0x90>
		obj->sclust = fs->cdir;				/* Start from current directory */
 800685c:	f8db 3020 	ldr.w	r3, [fp, #32]
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 8006860:	2200      	movs	r2, #0
		obj->sclust = fs->cdir;				/* Start from current directory */
 8006862:	6083      	str	r3, [r0, #8]
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 8006864:	61c2      	str	r2, [r0, #28]
	if (fs->fs_type == FS_EXFAT && obj->sclust) {	/* Retrieve the sub-directory status if needed */
 8006866:	f89b 1000 	ldrb.w	r1, [fp]
 800686a:	2904      	cmp	r1, #4
 800686c:	d139      	bne.n	80068e2 <follow_path+0x9e>
 800686e:	2b00      	cmp	r3, #0
 8006870:	d037      	beq.n	80068e2 <follow_path+0x9e>
		obj->c_ofs = fs->cdc_ofs;
 8006872:	f8db 102c 	ldr.w	r1, [fp, #44]	; 0x2c
	dp->obj.fs = obj->fs;
 8006876:	f8cd b008 	str.w	fp, [sp, #8]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 800687a:	9207      	str	r2, [sp, #28]
		obj->c_scl = fs->cdc_scl;
 800687c:	e9db 4309 	ldrd	r4, r3, [fp, #36]	; 0x24
		obj->c_ofs = fs->cdc_ofs;
 8006880:	62a9      	str	r1, [r5, #40]	; 0x28
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 8006882:	f023 00ff 	bic.w	r0, r3, #255	; 0xff
	dp->obj.stat = (BYTE)obj->c_size;
 8006886:	f88d 300f 	strb.w	r3, [sp, #15]
	dp->obj.sclust = obj->c_scl;
 800688a:	9404      	str	r4, [sp, #16]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 800688c:	9006      	str	r0, [sp, #24]
	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 800688e:	a802      	add	r0, sp, #8
	dp->blk_ofs = obj->c_ofs;
 8006890:	9115      	str	r1, [sp, #84]	; 0x54
		obj->c_scl = fs->cdc_scl;
 8006892:	e9c5 4308 	strd	r4, r3, [r5, #32]
	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 8006896:	f7ff fbb7 	bl	8006008 <dir_sdi>
	if (res == FR_OK) {
 800689a:	2800      	cmp	r0, #0
 800689c:	d153      	bne.n	8006946 <follow_path+0x102>
		res = load_xdir(dp);		/* Load the object's entry block */
 800689e:	a802      	add	r0, sp, #8
 80068a0:	f7fe fb88 	bl	8004fb4 <load_xdir>
 80068a4:	4603      	mov	r3, r0
		if (res != FR_OK) return res;
 80068a6:	2800      	cmp	r0, #0
 80068a8:	d14d      	bne.n	8006946 <follow_path+0x102>
		obj->objsize = ld_dword(fs->dirbuf + XDIR_FileSize);
 80068aa:	f8db 2014 	ldr.w	r2, [fp, #20]
	rv = rv << 8 | ptr[2];
 80068ae:	8f54      	ldrh	r4, [r2, #58]	; 0x3a
	rv = rv << 8 | ptr[1];
 80068b0:	f892 0039 	ldrb.w	r0, [r2, #57]	; 0x39
	rv = rv << 8 | ptr[0];
 80068b4:	f892 1038 	ldrb.w	r1, [r2, #56]	; 0x38
	rv = rv << 8 | ptr[1];
 80068b8:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
		obj->objsize = ld_dword(fs->dirbuf + XDIR_FileSize);
 80068bc:	616b      	str	r3, [r5, #20]
	rv = rv << 8 | ptr[0];
 80068be:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
		obj->objsize = ld_dword(fs->dirbuf + XDIR_FileSize);
 80068c2:	6129      	str	r1, [r5, #16]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 80068c4:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 80068c8:	f003 0302 	and.w	r3, r3, #2
 80068cc:	71eb      	strb	r3, [r5, #7]
 80068ce:	e008      	b.n	80068e2 <follow_path+0x9e>
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80068d0:	f816 3f01 	ldrb.w	r3, [r6, #1]!
 80068d4:	2b2f      	cmp	r3, #47	; 0x2f
 80068d6:	d0fb      	beq.n	80068d0 <follow_path+0x8c>
 80068d8:	2b5c      	cmp	r3, #92	; 0x5c
 80068da:	d0f9      	beq.n	80068d0 <follow_path+0x8c>
		obj->sclust = 0;					/* Start from root directory */
 80068dc:	2300      	movs	r3, #0
 80068de:	60ab      	str	r3, [r5, #8]
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 80068e0:	61eb      	str	r3, [r5, #28]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80068e2:	7833      	ldrb	r3, [r6, #0]
 80068e4:	2b1f      	cmp	r3, #31
 80068e6:	f240 8187 	bls.w	8006bf8 <follow_path+0x3b4>
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80068ea:	682a      	ldr	r2, [r5, #0]
		if (w < ' ') break;				/* Break if end of the path name */
 80068ec:	2b1f      	cmp	r3, #31
		w = p[si++];					/* Get a character */
 80068ee:	b298      	uxth	r0, r3
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80068f0:	f8d2 9010 	ldr.w	r9, [r2, #16]
		if (w < ' ') break;				/* Break if end of the path name */
 80068f4:	f240 8159 	bls.w	8006baa <follow_path+0x366>
 80068f8:	f1a9 0a02 	sub.w	sl, r9, #2
 80068fc:	46b0      	mov	r8, r6
		w = p[si++];					/* Get a character */
 80068fe:	2701      	movs	r7, #1
 8006900:	e008      	b.n	8006914 <follow_path+0xd0>
		lfn[di++] = w;					/* Store the Unicode character */
 8006902:	f82a 0f02 	strh.w	r0, [sl, #2]!
		w = p[si++];					/* Get a character */
 8006906:	1c7b      	adds	r3, r7, #1
 8006908:	f818 0f01 	ldrb.w	r0, [r8, #1]!
		if (w < ' ') break;				/* Break if end of the path name */
 800690c:	281f      	cmp	r0, #31
 800690e:	f240 8153 	bls.w	8006bb8 <follow_path+0x374>
		w = p[si++];					/* Get a character */
 8006912:	461f      	mov	r7, r3
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8006914:	282f      	cmp	r0, #47	; 0x2f
 8006916:	f107 34ff 	add.w	r4, r7, #4294967295
 800691a:	d017      	beq.n	800694c <follow_path+0x108>
 800691c:	285c      	cmp	r0, #92	; 0x5c
 800691e:	d015      	beq.n	800694c <follow_path+0x108>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8006920:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
 8006924:	d00e      	beq.n	8006944 <follow_path+0x100>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8006926:	2101      	movs	r1, #1
 8006928:	f002 fca8 	bl	800927c <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800692c:	b150      	cbz	r0, 8006944 <follow_path+0x100>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800692e:	287f      	cmp	r0, #127	; 0x7f
 8006930:	d8e7      	bhi.n	8006902 <follow_path+0xbe>
	while (*str && *str != chr) str++;
 8006932:	2322      	movs	r3, #34	; 0x22
 8006934:	4ad1      	ldr	r2, [pc, #836]	; (8006c7c <follow_path+0x438>)
 8006936:	e003      	b.n	8006940 <follow_path+0xfc>
 8006938:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800693c:	2b00      	cmp	r3, #0
 800693e:	d0e0      	beq.n	8006902 <follow_path+0xbe>
 8006940:	4298      	cmp	r0, r3
 8006942:	d1f9      	bne.n	8006938 <follow_path+0xf4>
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8006944:	2006      	movs	r0, #6
}
 8006946:	b019      	add	sp, #100	; 0x64
 8006948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800694c:	5df3      	ldrb	r3, [r6, r7]
 800694e:	19f2      	adds	r2, r6, r7
 8006950:	2b5c      	cmp	r3, #92	; 0x5c
 8006952:	d002      	beq.n	800695a <follow_path+0x116>
 8006954:	2b2f      	cmp	r3, #47	; 0x2f
 8006956:	f040 81aa 	bne.w	8006cae <follow_path+0x46a>
 800695a:	3701      	adds	r7, #1
 800695c:	4437      	add	r7, r6
 800695e:	463e      	mov	r6, r7
 8006960:	f817 3b01 	ldrb.w	r3, [r7], #1
 8006964:	2b2f      	cmp	r3, #47	; 0x2f
 8006966:	d0fa      	beq.n	800695e <follow_path+0x11a>
 8006968:	2b5c      	cmp	r3, #92	; 0x5c
 800696a:	d0f8      	beq.n	800695e <follow_path+0x11a>
	if ((di == 1 && lfn[di - 1] == '.') ||
 800696c:	2c01      	cmp	r4, #1
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800696e:	f04f 0320 	mov.w	r3, #32
 8006972:	f04f 0800 	mov.w	r8, #0
	if ((di == 1 && lfn[di - 1] == '.') ||
 8006976:	f000 8127 	beq.w	8006bc8 <follow_path+0x384>
 800697a:	2c02      	cmp	r4, #2
 800697c:	f040 8112 	bne.w	8006ba4 <follow_path+0x360>
		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {	/* Is this segment a dot name? */
 8006980:	f8b9 2002 	ldrh.w	r2, [r9, #2]
 8006984:	2a2e      	cmp	r2, #46	; 0x2e
 8006986:	f000 816c 	beq.w	8006c62 <follow_path+0x41e>
 800698a:	eb09 0244 	add.w	r2, r9, r4, lsl #1
 800698e:	e002      	b.n	8006996 <follow_path+0x152>
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8006990:	3c01      	subs	r4, #1
 8006992:	f000 810a 	beq.w	8006baa <follow_path+0x366>
		w = lfn[di - 1];
 8006996:	f832 3d02 	ldrh.w	r3, [r2, #-2]!
		if (w != ' ' && w != '.') break;
 800699a:	2b20      	cmp	r3, #32
 800699c:	d0f8      	beq.n	8006990 <follow_path+0x14c>
 800699e:	2b2e      	cmp	r3, #46	; 0x2e
 80069a0:	d0f6      	beq.n	8006990 <follow_path+0x14c>
		*d++ = (BYTE)val;
 80069a2:	2320      	movs	r3, #32
 80069a4:	f04f 3220 	mov.w	r2, #538976288	; 0x20202020
	lfn[di] = 0;						/* LFN is created */
 80069a8:	2100      	movs	r1, #0
 80069aa:	f829 1014 	strh.w	r1, [r9, r4, lsl #1]
		*d++ = (BYTE)val;
 80069ae:	642a      	str	r2, [r5, #64]	; 0x40
 80069b0:	646a      	str	r2, [r5, #68]	; 0x44
 80069b2:	f885 3048 	strb.w	r3, [r5, #72]	; 0x48
 80069b6:	f885 3049 	strb.w	r3, [r5, #73]	; 0x49
 80069ba:	f885 304a 	strb.w	r3, [r5, #74]	; 0x4a
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80069be:	f8b9 0000 	ldrh.w	r0, [r9]
 80069c2:	282e      	cmp	r0, #46	; 0x2e
 80069c4:	d002      	beq.n	80069cc <follow_path+0x188>
 80069c6:	4298      	cmp	r0, r3
 80069c8:	f040 8166 	bne.w	8006c98 <follow_path+0x454>
 80069cc:	464a      	mov	r2, r9
 80069ce:	2300      	movs	r3, #0
 80069d0:	f832 0f02 	ldrh.w	r0, [r2, #2]!
 80069d4:	461f      	mov	r7, r3
 80069d6:	3301      	adds	r3, #1
 80069d8:	2820      	cmp	r0, #32
 80069da:	d0f9      	beq.n	80069d0 <follow_path+0x18c>
 80069dc:	282e      	cmp	r0, #46	; 0x2e
 80069de:	d0f7      	beq.n	80069d0 <follow_path+0x18c>
	if (si) cf |= NS_LOSS | NS_LFN;
 80069e0:	f048 0803 	orr.w	r8, r8, #3
 80069e4:	3702      	adds	r7, #2
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80069e6:	eb09 0344 	add.w	r3, r9, r4, lsl #1
 80069ea:	f833 2d02 	ldrh.w	r2, [r3, #-2]!
 80069ee:	2a2e      	cmp	r2, #46	; 0x2e
 80069f0:	d001      	beq.n	80069f6 <follow_path+0x1b2>
 80069f2:	3c01      	subs	r4, #1
 80069f4:	d1f9      	bne.n	80069ea <follow_path+0x1a6>
		if (!w) break;					/* Break on end of the LFN */
 80069f6:	b380      	cbz	r0, 8006a5a <follow_path+0x216>
 80069f8:	2300      	movs	r3, #0
 80069fa:	2208      	movs	r2, #8
 80069fc:	4631      	mov	r1, r6
 80069fe:	469a      	mov	sl, r3
 8006a00:	461e      	mov	r6, r3
 8006a02:	465b      	mov	r3, fp
 8006a04:	46ab      	mov	fp, r5
 8006a06:	464d      	mov	r5, r9
 8006a08:	4691      	mov	r9, r2
 8006a0a:	460a      	mov	r2, r1
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8006a0c:	2820      	cmp	r0, #32
 8006a0e:	d003      	beq.n	8006a18 <follow_path+0x1d4>
 8006a10:	282e      	cmp	r0, #46	; 0x2e
 8006a12:	d13a      	bne.n	8006a8a <follow_path+0x246>
 8006a14:	42bc      	cmp	r4, r7
 8006a16:	d038      	beq.n	8006a8a <follow_path+0x246>
			cf |= NS_LOSS | NS_LFN; continue;
 8006a18:	f048 0803 	orr.w	r8, r8, #3
		w = lfn[si++];					/* Get an LFN character */
 8006a1c:	f835 0017 	ldrh.w	r0, [r5, r7, lsl #1]
 8006a20:	3701      	adds	r7, #1
		if (!w) break;					/* Break on end of the LFN */
 8006a22:	2800      	cmp	r0, #0
 8006a24:	d1f2      	bne.n	8006a0c <follow_path+0x1c8>
 8006a26:	465d      	mov	r5, fp
 8006a28:	469b      	mov	fp, r3
 8006a2a:	4633      	mov	r3, r6
 8006a2c:	4616      	mov	r6, r2
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006a2e:	f895 1040 	ldrb.w	r1, [r5, #64]	; 0x40
 8006a32:	464a      	mov	r2, r9
 8006a34:	29e5      	cmp	r1, #229	; 0xe5
 8006a36:	d102      	bne.n	8006a3e <follow_path+0x1fa>
 8006a38:	2105      	movs	r1, #5
 8006a3a:	f885 1040 	strb.w	r1, [r5, #64]	; 0x40
	if (ni == 8) b <<= 2;
 8006a3e:	2a08      	cmp	r2, #8
 8006a40:	f000 80f5 	beq.w	8006c2e <follow_path+0x3ea>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8006a44:	f003 020c 	and.w	r2, r3, #12
 8006a48:	2a0c      	cmp	r2, #12
 8006a4a:	d004      	beq.n	8006a56 <follow_path+0x212>
 8006a4c:	f003 0303 	and.w	r3, r3, #3
 8006a50:	2b03      	cmp	r3, #3
 8006a52:	f040 80f6 	bne.w	8006c42 <follow_path+0x3fe>
 8006a56:	f048 0802 	orr.w	r8, r8, #2
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8006a5a:	f885 804b 	strb.w	r8, [r5, #75]	; 0x4b
			res = dir_find(dp);				/* Find an object with the segment name */
 8006a5e:	4628      	mov	r0, r5
 8006a60:	f7ff fcd0 	bl	8006404 <dir_find>
			ns = dp->fn[NSFLAG];
 8006a64:	f895 304b 	ldrb.w	r3, [r5, #75]	; 0x4b
			if (res != FR_OK) {				/* Failed to find the object */
 8006a68:	2800      	cmp	r0, #0
 8006a6a:	d065      	beq.n	8006b38 <follow_path+0x2f4>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006a6c:	2804      	cmp	r0, #4
 8006a6e:	f47f af6a 	bne.w	8006946 <follow_path+0x102>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 8006a72:	069c      	lsls	r4, r3, #26
 8006a74:	f140 812c 	bpl.w	8006cd0 <follow_path+0x48c>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8006a78:	0759      	lsls	r1, r3, #29
 8006a7a:	d55b      	bpl.n	8006b34 <follow_path+0x2f0>
						dp->fn[NSFLAG] = NS_NONAME;
 8006a7c:	2380      	movs	r3, #128	; 0x80
						res = FR_OK;
 8006a7e:	2000      	movs	r0, #0
						dp->fn[NSFLAG] = NS_NONAME;
 8006a80:	f885 304b 	strb.w	r3, [r5, #75]	; 0x4b
}
 8006a84:	b019      	add	sp, #100	; 0x64
 8006a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8006a8a:	45ca      	cmp	sl, r9
 8006a8c:	d278      	bcs.n	8006b80 <follow_path+0x33c>
 8006a8e:	1be1      	subs	r1, r4, r7
 8006a90:	fab1 f181 	clz	r1, r1
 8006a94:	0949      	lsrs	r1, r1, #5
 8006a96:	2900      	cmp	r1, #0
 8006a98:	d172      	bne.n	8006b80 <follow_path+0x33c>
		if (w >= 0x80) {				/* Non ASCII character */
 8006a9a:	287f      	cmp	r0, #127	; 0x7f
 8006a9c:	f200 80b6 	bhi.w	8006c0c <follow_path+0x3c8>
	while (*str && *str != chr) str++;
 8006aa0:	212b      	movs	r1, #43	; 0x2b
 8006aa2:	f8df c1e0 	ldr.w	ip, [pc, #480]	; 8006c84 <follow_path+0x440>
 8006aa6:	e004      	b.n	8006ab2 <follow_path+0x26e>
 8006aa8:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
 8006aac:	2900      	cmp	r1, #0
 8006aae:	f000 80eb 	beq.w	8006c88 <follow_path+0x444>
 8006ab2:	4281      	cmp	r1, r0
 8006ab4:	d1f8      	bne.n	8006aa8 <follow_path+0x264>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8006ab6:	f048 0803 	orr.w	r8, r8, #3
 8006aba:	205f      	movs	r0, #95	; 0x5f
		dp->fn[i++] = (BYTE)w;
 8006abc:	eb0b 010a 	add.w	r1, fp, sl
 8006ac0:	f10a 0a01 	add.w	sl, sl, #1
 8006ac4:	f881 0040 	strb.w	r0, [r1, #64]	; 0x40
 8006ac8:	e7a8      	b.n	8006a1c <follow_path+0x1d8>
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 8006aca:	692b      	ldr	r3, [r5, #16]
 8006acc:	79ea      	ldrb	r2, [r5, #7]
 8006ace:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
				obj->c_scl = obj->sclust;
 8006ad2:	68a8      	ldr	r0, [r5, #8]
				obj->c_ofs = dp->blk_ofs;
 8006ad4:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 8006ad6:	4313      	orrs	r3, r2
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 8006ad8:	f8db 2014 	ldr.w	r2, [fp, #20]
				obj->c_ofs = dp->blk_ofs;
 8006adc:	62a9      	str	r1, [r5, #40]	; 0x28
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 8006ade:	e9c5 0308 	strd	r0, r3, [r5, #32]
	rv = rv << 8 | ptr[2];
 8006ae2:	8ed0      	ldrh	r0, [r2, #54]	; 0x36
	rv = rv << 8 | ptr[1];
 8006ae4:	f892 1035 	ldrb.w	r1, [r2, #53]	; 0x35
	rv = rv << 8 | ptr[0];
 8006ae8:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
	rv = rv << 8 | ptr[1];
 8006aec:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
	rv = rv << 8 | ptr[0];
 8006af0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 8006af4:	60ab      	str	r3, [r5, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 8006af6:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 8006afa:	f003 0302 	and.w	r3, r3, #2
 8006afe:	71eb      	strb	r3, [r5, #7]
	rv = rv << 8 | ptr[3];
 8006b00:	f892 803b 	ldrb.w	r8, [r2, #59]	; 0x3b
	rv = rv << 8 | ptr[4];
 8006b04:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
	rv = rv << 8 | ptr[2];
 8006b06:	f892 003a 	ldrb.w	r0, [r2, #58]	; 0x3a
 8006b0a:	ea48 2403 	orr.w	r4, r8, r3, lsl #8
	rv = rv << 8 | ptr[0];
 8006b0e:	f892 8038 	ldrb.w	r8, [r2, #56]	; 0x38
	rv = rv << 8 | ptr[2];
 8006b12:	0c1b      	lsrs	r3, r3, #16
 8006b14:	ea40 2404 	orr.w	r4, r0, r4, lsl #8
	rv = rv << 8 | ptr[1];
 8006b18:	f892 0039 	ldrb.w	r0, [r2, #57]	; 0x39
 8006b1c:	021b      	lsls	r3, r3, #8
 8006b1e:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
 8006b22:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
	rv = rv << 8 | ptr[0];
 8006b26:	ea48 2200 	orr.w	r2, r8, r0, lsl #8
 8006b2a:	021b      	lsls	r3, r3, #8
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 8006b2c:	612a      	str	r2, [r5, #16]
	rv = rv << 8 | ptr[0];
 8006b2e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 8006b32:	616b      	str	r3, [r5, #20]
 8006b34:	7833      	ldrb	r3, [r6, #0]
 8006b36:	e6d8      	b.n	80068ea <follow_path+0xa6>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006b38:	075a      	lsls	r2, r3, #29
 8006b3a:	f53f af04 	bmi.w	8006946 <follow_path+0x102>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8006b3e:	79ab      	ldrb	r3, [r5, #6]
 8006b40:	06db      	lsls	r3, r3, #27
 8006b42:	f140 80ca 	bpl.w	8006cda <follow_path+0x496>
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 8006b46:	f89b 1000 	ldrb.w	r1, [fp]
 8006b4a:	2904      	cmp	r1, #4
 8006b4c:	d0bd      	beq.n	8006aca <follow_path+0x286>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8006b4e:	f8bb 000c 	ldrh.w	r0, [fp, #12]
 8006b52:	f10b 034c 	add.w	r3, fp, #76	; 0x4c
 8006b56:	6b2c      	ldr	r4, [r5, #48]	; 0x30
	if (fs->fs_type == FS_FAT32) {
 8006b58:	2903      	cmp	r1, #3
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8006b5a:	fbb4 f2f0 	udiv	r2, r4, r0
 8006b5e:	fb00 4212 	mls	r2, r0, r2, r4
 8006b62:	4413      	add	r3, r2
	rv = rv << 8 | ptr[0];
 8006b64:	7ed8      	ldrb	r0, [r3, #27]
 8006b66:	7e9a      	ldrb	r2, [r3, #26]
	cl = ld_word(dir + DIR_FstClusLO);
 8006b68:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	if (fs->fs_type == FS_FAT32) {
 8006b6c:	d105      	bne.n	8006b7a <follow_path+0x336>
	rv = rv << 8 | ptr[0];
 8006b6e:	7d59      	ldrb	r1, [r3, #21]
 8006b70:	7d1b      	ldrb	r3, [r3, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006b72:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006b76:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8006b7a:	60aa      	str	r2, [r5, #8]
 8006b7c:	7833      	ldrb	r3, [r6, #0]
 8006b7e:	e6b4      	b.n	80068ea <follow_path+0xa6>
			if (ni == 11) {				/* Long extension */
 8006b80:	f1b9 0f0b 	cmp.w	r9, #11
 8006b84:	f000 8095 	beq.w	8006cb2 <follow_path+0x46e>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8006b88:	42bc      	cmp	r4, r7
 8006b8a:	d003      	beq.n	8006b94 <follow_path+0x350>
 8006b8c:	f048 0803 	orr.w	r8, r8, #3
			if (si > di) break;			/* No extension */
 8006b90:	f4ff af49 	bcc.w	8006a26 <follow_path+0x1e2>
			b <<= 2; continue;
 8006b94:	00b6      	lsls	r6, r6, #2
 8006b96:	4627      	mov	r7, r4
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8006b98:	f04f 090b 	mov.w	r9, #11
 8006b9c:	f04f 0a08 	mov.w	sl, #8
			b <<= 2; continue;
 8006ba0:	b2f6      	uxtb	r6, r6
 8006ba2:	e73b      	b.n	8006a1c <follow_path+0x1d8>
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8006ba4:	2c00      	cmp	r4, #0
 8006ba6:	f47f aef0 	bne.w	800698a <follow_path+0x146>
	lfn[di] = 0;						/* LFN is created */
 8006baa:	2300      	movs	r3, #0
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8006bac:	2006      	movs	r0, #6
	lfn[di] = 0;						/* LFN is created */
 8006bae:	f8a9 3000 	strh.w	r3, [r9]
}
 8006bb2:	b019      	add	sp, #100	; 0x64
 8006bb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	*path = &p[si];						/* Return pointer to the next segment */
 8006bb8:	463c      	mov	r4, r7
 8006bba:	441e      	add	r6, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8006bbc:	f04f 0804 	mov.w	r8, #4
	*path = &p[si];						/* Return pointer to the next segment */
 8006bc0:	2324      	movs	r3, #36	; 0x24
	if ((di == 1 && lfn[di - 1] == '.') ||
 8006bc2:	2c01      	cmp	r4, #1
 8006bc4:	f47f aed9 	bne.w	800697a <follow_path+0x136>
 8006bc8:	f8b9 2000 	ldrh.w	r2, [r9]
 8006bcc:	2a2e      	cmp	r2, #46	; 0x2e
 8006bce:	f47f aedc 	bne.w	800698a <follow_path+0x146>
		lfn[di] = 0;
 8006bd2:	2100      	movs	r1, #0
			dp->fn[i] = (i < di) ? '.' : ' ';
 8006bd4:	f242 022e 	movw	r2, #8238	; 0x202e
		lfn[di] = 0;
 8006bd8:	f8a9 1002 	strh.w	r1, [r9, #2]
			dp->fn[i] = (i < di) ? '.' : ' ';
 8006bdc:	f8a5 2040 	strh.w	r2, [r5, #64]	; 0x40
 8006be0:	f04f 3220 	mov.w	r2, #538976288	; 0x20202020
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
 8006be4:	f885 304b 	strb.w	r3, [r5, #75]	; 0x4b
			dp->fn[i] = (i < di) ? '.' : ' ';
 8006be8:	2320      	movs	r3, #32
 8006bea:	f8c5 2042 	str.w	r2, [r5, #66]	; 0x42
 8006bee:	f8c5 2046 	str.w	r2, [r5, #70]	; 0x46
 8006bf2:	f885 304a 	strb.w	r3, [r5, #74]	; 0x4a
			if (res != FR_OK) break;
 8006bf6:	e732      	b.n	8006a5e <follow_path+0x21a>
		dp->fn[NSFLAG] = NS_NONAME;
 8006bf8:	2380      	movs	r3, #128	; 0x80
		res = dir_sdi(dp, 0);
 8006bfa:	2100      	movs	r1, #0
 8006bfc:	4628      	mov	r0, r5
		dp->fn[NSFLAG] = NS_NONAME;
 8006bfe:	f885 304b 	strb.w	r3, [r5, #75]	; 0x4b
		res = dir_sdi(dp, 0);
 8006c02:	f7ff fa01 	bl	8006008 <dir_sdi>
}
 8006c06:	b019      	add	sp, #100	; 0x64
 8006c08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8006c0c:	e9cd 3200 	strd	r3, r2, [sp]
 8006c10:	f002 fb34 	bl	800927c <ff_convert>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8006c14:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006c18:	b300      	cbz	r0, 8006c5c <follow_path+0x418>
 8006c1a:	4919      	ldr	r1, [pc, #100]	; (8006c80 <follow_path+0x43c>)
			cf |= NS_LFN;				/* Force create LFN entry */
 8006c1c:	f048 0802 	orr.w	r8, r8, #2
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8006c20:	4408      	add	r0, r1
 8006c22:	f810 0c80 	ldrb.w	r0, [r0, #-128]
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8006c26:	2800      	cmp	r0, #0
 8006c28:	f43f af45 	beq.w	8006ab6 <follow_path+0x272>
 8006c2c:	e738      	b.n	8006aa0 <follow_path+0x25c>
	if (ni == 8) b <<= 2;
 8006c2e:	009b      	lsls	r3, r3, #2
 8006c30:	f003 020c 	and.w	r2, r3, #12
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8006c34:	2a0c      	cmp	r2, #12
 8006c36:	f43f af0e 	beq.w	8006a56 <follow_path+0x212>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8006c3a:	f018 0f02 	tst.w	r8, #2
 8006c3e:	d008      	beq.n	8006c52 <follow_path+0x40e>
 8006c40:	e70b      	b.n	8006a5a <follow_path+0x216>
 8006c42:	f018 0f02 	tst.w	r8, #2
 8006c46:	f47f af08 	bne.w	8006a5a <follow_path+0x216>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8006c4a:	2b01      	cmp	r3, #1
 8006c4c:	bf08      	it	eq
 8006c4e:	f048 0810 	orreq.w	r8, r8, #16
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8006c52:	2a04      	cmp	r2, #4
 8006c54:	bf08      	it	eq
 8006c56:	f048 0808 	orreq.w	r8, r8, #8
 8006c5a:	e6fe      	b.n	8006a5a <follow_path+0x216>
			cf |= NS_LFN;				/* Force create LFN entry */
 8006c5c:	f048 0802 	orr.w	r8, r8, #2
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8006c60:	e729      	b.n	8006ab6 <follow_path+0x272>
		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {	/* Is this segment a dot name? */
 8006c62:	f8b9 2000 	ldrh.w	r2, [r9]
 8006c66:	2a2e      	cmp	r2, #46	; 0x2e
 8006c68:	f47f ae8f 	bne.w	800698a <follow_path+0x146>
		lfn[di] = 0;
 8006c6c:	2100      	movs	r1, #0
			dp->fn[i] = (i < di) ? '.' : ' ';
 8006c6e:	f642 622e 	movw	r2, #11822	; 0x2e2e
		lfn[di] = 0;
 8006c72:	f8a9 1004 	strh.w	r1, [r9, #4]
			dp->fn[i] = (i < di) ? '.' : ' ';
 8006c76:	f8a5 2040 	strh.w	r2, [r5, #64]	; 0x40
 8006c7a:	e7b1      	b.n	8006be0 <follow_path+0x39c>
 8006c7c:	08009640 	.word	0x08009640
 8006c80:	08009654 	.word	0x08009654
 8006c84:	0800964c 	.word	0x0800964c
				if (IsUpper(w)) {		/* ASCII large capital */
 8006c88:	f1a0 0141 	sub.w	r1, r0, #65	; 0x41
 8006c8c:	2919      	cmp	r1, #25
 8006c8e:	d805      	bhi.n	8006c9c <follow_path+0x458>
					b |= 2;
 8006c90:	f046 0602 	orr.w	r6, r6, #2
 8006c94:	b2c0      	uxtb	r0, r0
 8006c96:	e711      	b.n	8006abc <follow_path+0x278>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8006c98:	2701      	movs	r7, #1
 8006c9a:	e6a4      	b.n	80069e6 <follow_path+0x1a2>
					if (IsLower(w)) {	/* ASCII small capital */
 8006c9c:	f1a0 0161 	sub.w	r1, r0, #97	; 0x61
 8006ca0:	2919      	cmp	r1, #25
						b |= 1; w -= 0x20;
 8006ca2:	bf9c      	itt	ls
 8006ca4:	3820      	subls	r0, #32
 8006ca6:	f046 0601 	orrls.w	r6, r6, #1
 8006caa:	b2c0      	uxtb	r0, r0
 8006cac:	e706      	b.n	8006abc <follow_path+0x278>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006cae:	4616      	mov	r6, r2
 8006cb0:	e65c      	b.n	800696c <follow_path+0x128>
				cf |= NS_LOSS | NS_LFN; break;
 8006cb2:	465d      	mov	r5, fp
 8006cb4:	469b      	mov	fp, r3
 8006cb6:	4633      	mov	r3, r6
 8006cb8:	4616      	mov	r6, r2
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006cba:	f895 2040 	ldrb.w	r2, [r5, #64]	; 0x40
				cf |= NS_LOSS | NS_LFN; break;
 8006cbe:	f048 0803 	orr.w	r8, r8, #3
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006cc2:	2ae5      	cmp	r2, #229	; 0xe5
 8006cc4:	f47f aebe 	bne.w	8006a44 <follow_path+0x200>
 8006cc8:	2205      	movs	r2, #5
 8006cca:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
	if (ni == 8) b <<= 2;
 8006cce:	e6b9      	b.n	8006a44 <follow_path+0x200>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006cd0:	f013 0f04 	tst.w	r3, #4
 8006cd4:	bf08      	it	eq
 8006cd6:	2005      	moveq	r0, #5
 8006cd8:	e635      	b.n	8006946 <follow_path+0x102>
 8006cda:	2005      	movs	r0, #5
 8006cdc:	e633      	b.n	8006946 <follow_path+0x102>
 8006cde:	bf00      	nop

08006ce0 <dir_alloc>:
{
 8006ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ce4:	460b      	mov	r3, r1
	res = dir_sdi(dp, 0);
 8006ce6:	2100      	movs	r1, #0
{
 8006ce8:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 8006cea:	f8d0 9000 	ldr.w	r9, [r0]
{
 8006cee:	ed2d 8b02 	vpush	{d8}
 8006cf2:	b087      	sub	sp, #28
 8006cf4:	9302      	str	r3, [sp, #8]
	res = dir_sdi(dp, 0);
 8006cf6:	f7ff f987 	bl	8006008 <dir_sdi>
	if (res == FR_OK) {
 8006cfa:	9001      	str	r0, [sp, #4]
 8006cfc:	b150      	cbz	r0, 8006d14 <dir_alloc+0x34>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006cfe:	9b01      	ldr	r3, [sp, #4]
 8006d00:	2b04      	cmp	r3, #4
 8006d02:	d101      	bne.n	8006d08 <dir_alloc+0x28>
 8006d04:	2307      	movs	r3, #7
 8006d06:	9301      	str	r3, [sp, #4]
}
 8006d08:	9801      	ldr	r0, [sp, #4]
 8006d0a:	b007      	add	sp, #28
 8006d0c:	ecbd 8b02 	vpop	{d8}
 8006d10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d14:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
		n = 0;
 8006d18:	4682      	mov	sl, r0
 8006d1a:	f109 084c 	add.w	r8, r9, #76	; 0x4c
 8006d1e:	465e      	mov	r6, fp
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006d20:	f8d9 5048 	ldr.w	r5, [r9, #72]	; 0x48
 8006d24:	42b5      	cmp	r5, r6
 8006d26:	d019      	beq.n	8006d5c <dir_alloc+0x7c>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006d28:	f899 3003 	ldrb.w	r3, [r9, #3]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d151      	bne.n	8006dd4 <dir_alloc+0xf4>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006d30:	2301      	movs	r3, #1
 8006d32:	4632      	mov	r2, r6
 8006d34:	4641      	mov	r1, r8
 8006d36:	f899 0001 	ldrb.w	r0, [r9, #1]
 8006d3a:	f7fd fcdb 	bl	80046f4 <disk_read>
 8006d3e:	b158      	cbz	r0, 8006d58 <dir_alloc+0x78>
				res = FR_DISK_ERR;
 8006d40:	2201      	movs	r2, #1
			fs->winsect = sector;
 8006d42:	f04f 33ff 	mov.w	r3, #4294967295
				res = FR_DISK_ERR;
 8006d46:	9201      	str	r2, [sp, #4]
}
 8006d48:	9801      	ldr	r0, [sp, #4]
			fs->winsect = sector;
 8006d4a:	f8c9 3048 	str.w	r3, [r9, #72]	; 0x48
}
 8006d4e:	b007      	add	sp, #28
 8006d50:	ecbd 8b02 	vpop	{d8}
 8006d54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
 8006d58:	f8c9 6048 	str.w	r6, [r9, #72]	; 0x48
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 8006d5c:	f899 3000 	ldrb.w	r3, [r9]
 8006d60:	2b04      	cmp	r3, #4
 8006d62:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006d64:	781b      	ldrb	r3, [r3, #0]
 8006d66:	d02e      	beq.n	8006dc6 <dir_alloc+0xe6>
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	bf18      	it	ne
 8006d6c:	2be5      	cmpne	r3, #229	; 0xe5
 8006d6e:	bf0c      	ite	eq
 8006d70:	2301      	moveq	r3, #1
 8006d72:	2300      	movne	r3, #0
 8006d74:	b363      	cbz	r3, 8006dd0 <dir_alloc+0xf0>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006d76:	f10a 0a01 	add.w	sl, sl, #1
 8006d7a:	9b02      	ldr	r3, [sp, #8]
 8006d7c:	459a      	cmp	sl, r3
 8006d7e:	d0c3      	beq.n	8006d08 <dir_alloc+0x28>
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006d80:	6b25      	ldr	r5, [r4, #48]	; 0x30
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006d82:	6ba6      	ldr	r6, [r4, #56]	; 0x38
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006d84:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006d86:	2e00      	cmp	r6, #0
 8006d88:	d0bc      	beq.n	8006d04 <dir_alloc+0x24>
	FATFS *fs = dp->obj.fs;
 8006d8a:	6827      	ldr	r7, [r4, #0]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006d8c:	783b      	ldrb	r3, [r7, #0]
 8006d8e:	2b04      	cmp	r3, #4
 8006d90:	bf0c      	ite	eq
 8006d92:	f04f 5380 	moveq.w	r3, #268435456	; 0x10000000
 8006d96:	f44f 1300 	movne.w	r3, #2097152	; 0x200000
 8006d9a:	429d      	cmp	r5, r3
 8006d9c:	d2b2      	bcs.n	8006d04 <dir_alloc+0x24>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006d9e:	89bb      	ldrh	r3, [r7, #12]
 8006da0:	fbb5 f2f3 	udiv	r2, r5, r3
 8006da4:	fb03 5312 	mls	r3, r3, r2, r5
 8006da8:	b93b      	cbnz	r3, 8006dba <dir_alloc+0xda>
		dp->sect++;				/* Next sector */
 8006daa:	3601      	adds	r6, #1
		if (!dp->clust) {		/* Static table */
 8006dac:	6b61      	ldr	r1, [r4, #52]	; 0x34
		dp->sect++;				/* Next sector */
 8006dae:	63a6      	str	r6, [r4, #56]	; 0x38
		if (!dp->clust) {		/* Static table */
 8006db0:	bba1      	cbnz	r1, 8006e1c <dir_alloc+0x13c>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006db2:	893a      	ldrh	r2, [r7, #8]
 8006db4:	ebb2 1f55 	cmp.w	r2, r5, lsr #5
 8006db8:	d959      	bls.n	8006e6e <dir_alloc+0x18e>
 8006dba:	f107 0b4c 	add.w	fp, r7, #76	; 0x4c
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006dbe:	445b      	add	r3, fp
	dp->dptr = ofs;						/* Current entry */
 8006dc0:	6325      	str	r5, [r4, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006dc2:	63e3      	str	r3, [r4, #60]	; 0x3c
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006dc4:	e7ac      	b.n	8006d20 <dir_alloc+0x40>
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 8006dc6:	43db      	mvns	r3, r3
 8006dc8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d1d2      	bne.n	8006d76 <dir_alloc+0x96>
				n = 0;					/* Not a blank entry. Restart to search */
 8006dd0:	469a      	mov	sl, r3
 8006dd2:	e7d5      	b.n	8006d80 <dir_alloc+0xa0>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	462a      	mov	r2, r5
 8006dd8:	4641      	mov	r1, r8
 8006dda:	f899 0001 	ldrb.w	r0, [r9, #1]
 8006dde:	f7fd fc97 	bl	8004710 <disk_write>
 8006de2:	bb40      	cbnz	r0, 8006e36 <dir_alloc+0x156>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006de4:	f8d9 203c 	ldr.w	r2, [r9, #60]	; 0x3c
 8006de8:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
 8006dec:	1aaa      	subs	r2, r5, r2
			fs->wflag = 0;
 8006dee:	f889 0003 	strb.w	r0, [r9, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006df2:	429a      	cmp	r2, r3
 8006df4:	d29c      	bcs.n	8006d30 <dir_alloc+0x50>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006df6:	f899 7002 	ldrb.w	r7, [r9, #2]
 8006dfa:	2f01      	cmp	r7, #1
 8006dfc:	d802      	bhi.n	8006e04 <dir_alloc+0x124>
 8006dfe:	e797      	b.n	8006d30 <dir_alloc+0x50>
 8006e00:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
					wsect += fs->fsize;
 8006e04:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006e06:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 8006e08:	2301      	movs	r3, #1
 8006e0a:	4641      	mov	r1, r8
 8006e0c:	462a      	mov	r2, r5
 8006e0e:	f899 0001 	ldrb.w	r0, [r9, #1]
 8006e12:	f7fd fc7d 	bl	8004710 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006e16:	2f01      	cmp	r7, #1
 8006e18:	d1f2      	bne.n	8006e00 <dir_alloc+0x120>
 8006e1a:	e789      	b.n	8006d30 <dir_alloc+0x50>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006e1c:	8978      	ldrh	r0, [r7, #10]
 8006e1e:	3801      	subs	r0, #1
 8006e20:	4210      	tst	r0, r2
 8006e22:	d1ca      	bne.n	8006dba <dir_alloc+0xda>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006e24:	4620      	mov	r0, r4
 8006e26:	f7fd ffa3 	bl	8004d70 <get_fat>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006e2a:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	9003      	str	r0, [sp, #12]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006e30:	d97c      	bls.n	8006f2c <dir_alloc+0x24c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006e32:	3301      	adds	r3, #1
 8006e34:	d102      	bne.n	8006e3c <dir_alloc+0x15c>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006e36:	2301      	movs	r3, #1
 8006e38:	9301      	str	r3, [sp, #4]
 8006e3a:	e765      	b.n	8006d08 <dir_alloc+0x28>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8006e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e3e:	4298      	cmp	r0, r3
 8006e40:	d219      	bcs.n	8006e76 <dir_alloc+0x196>
 8006e42:	1e82      	subs	r2, r0, #2
 8006e44:	3b02      	subs	r3, #2
 8006e46:	f107 0b4c 	add.w	fp, r7, #76	; 0x4c
 8006e4a:	9204      	str	r2, [sp, #16]
				dp->clust = clst;		/* Initialize data for new cluster */
 8006e4c:	9a03      	ldr	r2, [sp, #12]
 8006e4e:	6362      	str	r2, [r4, #52]	; 0x34
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006e50:	9a04      	ldr	r2, [sp, #16]
 8006e52:	4293      	cmp	r3, r2
 8006e54:	f240 8099 	bls.w	8006f8a <dir_alloc+0x2aa>
	return clst * fs->csize + fs->database;
 8006e58:	897e      	ldrh	r6, [r7, #10]
 8006e5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e5c:	fb02 3606 	mla	r6, r2, r6, r3
 8006e60:	89ba      	ldrh	r2, [r7, #12]
				dp->sect = clust2sect(fs, clst);
 8006e62:	63a6      	str	r6, [r4, #56]	; 0x38
 8006e64:	fbb5 f3f2 	udiv	r3, r5, r2
 8006e68:	fb02 5313 	mls	r3, r2, r3, r5
 8006e6c:	e7a7      	b.n	8006dbe <dir_alloc+0xde>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006e6e:	2307      	movs	r3, #7
				dp->sect = 0; return FR_NO_FILE;
 8006e70:	63a1      	str	r1, [r4, #56]	; 0x38
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006e72:	9301      	str	r3, [sp, #4]
 8006e74:	e748      	b.n	8006d08 <dir_alloc+0x28>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006e76:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006e78:	4620      	mov	r0, r4
 8006e7a:	f7fe feb5 	bl	8005be8 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006e7e:	4603      	mov	r3, r0
 8006e80:	9003      	str	r0, [sp, #12]
 8006e82:	2800      	cmp	r0, #0
 8006e84:	f43f af3e 	beq.w	8006d04 <dir_alloc+0x24>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006e88:	2801      	cmp	r0, #1
 8006e8a:	d04f      	beq.n	8006f2c <dir_alloc+0x24c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006e8c:	3301      	adds	r3, #1
 8006e8e:	d0d2      	beq.n	8006e36 <dir_alloc+0x156>
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
 8006e90:	79e3      	ldrb	r3, [r4, #7]
 8006e92:	f043 0304 	orr.w	r3, r3, #4
 8006e96:	71e3      	strb	r3, [r4, #7]
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006e98:	78fb      	ldrb	r3, [r7, #3]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d149      	bne.n	8006f32 <dir_alloc+0x252>
 8006e9e:	f107 0b4c 	add.w	fp, r7, #76	; 0x4c
	clst -= 2;
 8006ea2:	9b03      	ldr	r3, [sp, #12]
 8006ea4:	2100      	movs	r1, #0
 8006ea6:	89ba      	ldrh	r2, [r7, #12]
 8006ea8:	4658      	mov	r0, fp
 8006eaa:	1e9e      	subs	r6, r3, #2
 8006eac:	9604      	str	r6, [sp, #16]
 8006eae:	f002 faa5 	bl	80093fc <memset>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eb4:	8979      	ldrh	r1, [r7, #10]
 8006eb6:	3b02      	subs	r3, #2
 8006eb8:	429e      	cmp	r6, r3
 8006eba:	d273      	bcs.n	8006fa4 <dir_alloc+0x2c4>
	return clst * fs->csize + fs->database;
 8006ebc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006ebe:	9804      	ldr	r0, [sp, #16]
 8006ec0:	fb00 2201 	mla	r2, r0, r1, r2
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006ec4:	64ba      	str	r2, [r7, #72]	; 0x48
 8006ec6:	2900      	cmp	r1, #0
 8006ec8:	d06a      	beq.n	8006fa0 <dir_alloc+0x2c0>
 8006eca:	2300      	movs	r3, #0
 8006ecc:	ee08 8a10 	vmov	s16, r8
 8006ed0:	4616      	mov	r6, r2
 8006ed2:	46d8      	mov	r8, fp
 8006ed4:	46ab      	mov	fp, r5
 8006ed6:	461d      	mov	r5, r3
 8006ed8:	9405      	str	r4, [sp, #20]
						fs->wflag = 1;
 8006eda:	f04f 0301 	mov.w	r3, #1
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006ede:	4632      	mov	r2, r6
 8006ee0:	4641      	mov	r1, r8
 8006ee2:	7878      	ldrb	r0, [r7, #1]
						fs->wflag = 1;
 8006ee4:	70fb      	strb	r3, [r7, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	f7fd fc12 	bl	8004710 <disk_write>
 8006eec:	2800      	cmp	r0, #0
 8006eee:	d1a2      	bne.n	8006e36 <dir_alloc+0x156>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006ef0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006ef2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ef4:	1ab2      	subs	r2, r6, r2
			fs->wflag = 0;
 8006ef6:	70f8      	strb	r0, [r7, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006ef8:	429a      	cmp	r2, r3
 8006efa:	d20e      	bcs.n	8006f1a <dir_alloc+0x23a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006efc:	78bc      	ldrb	r4, [r7, #2]
 8006efe:	2c01      	cmp	r4, #1
 8006f00:	d801      	bhi.n	8006f06 <dir_alloc+0x226>
 8006f02:	e00a      	b.n	8006f1a <dir_alloc+0x23a>
 8006f04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
					wsect += fs->fsize;
 8006f06:	441e      	add	r6, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006f08:	3c01      	subs	r4, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	4641      	mov	r1, r8
 8006f0e:	4632      	mov	r2, r6
 8006f10:	7878      	ldrb	r0, [r7, #1]
 8006f12:	f7fd fbfd 	bl	8004710 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006f16:	2c01      	cmp	r4, #1
 8006f18:	d1f4      	bne.n	8006f04 <dir_alloc+0x224>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006f1a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006f1c:	1c6b      	adds	r3, r5, #1
 8006f1e:	897a      	ldrh	r2, [r7, #10]
 8006f20:	1c4e      	adds	r6, r1, #1
 8006f22:	4293      	cmp	r3, r2
 8006f24:	64be      	str	r6, [r7, #72]	; 0x48
 8006f26:	d232      	bcs.n	8006f8e <dir_alloc+0x2ae>
 8006f28:	461d      	mov	r5, r3
 8006f2a:	e7d6      	b.n	8006eda <dir_alloc+0x1fa>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006f2c:	2302      	movs	r3, #2
 8006f2e:	9301      	str	r3, [sp, #4]
 8006f30:	e6ea      	b.n	8006d08 <dir_alloc+0x28>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006f32:	f107 0b4c 	add.w	fp, r7, #76	; 0x4c
		wsect = fs->winsect;	/* Current sector number */
 8006f36:	6cba      	ldr	r2, [r7, #72]	; 0x48
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006f38:	2301      	movs	r3, #1
 8006f3a:	7878      	ldrb	r0, [r7, #1]
 8006f3c:	4659      	mov	r1, fp
 8006f3e:	9204      	str	r2, [sp, #16]
 8006f40:	f7fd fbe6 	bl	8004710 <disk_write>
 8006f44:	2800      	cmp	r0, #0
 8006f46:	f47f af76 	bne.w	8006e36 <dir_alloc+0x156>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006f4a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006f4c:	9a04      	ldr	r2, [sp, #16]
 8006f4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f50:	1a51      	subs	r1, r2, r1
			fs->wflag = 0;
 8006f52:	70f8      	strb	r0, [r7, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006f54:	4299      	cmp	r1, r3
 8006f56:	d2a4      	bcs.n	8006ea2 <dir_alloc+0x1c2>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006f58:	78be      	ldrb	r6, [r7, #2]
 8006f5a:	2e01      	cmp	r6, #1
 8006f5c:	d9a1      	bls.n	8006ea2 <dir_alloc+0x1c2>
 8006f5e:	ee08 8a10 	vmov	s16, r8
 8006f62:	46d8      	mov	r8, fp
 8006f64:	46a3      	mov	fp, r4
 8006f66:	4614      	mov	r4, r2
 8006f68:	e000      	b.n	8006f6c <dir_alloc+0x28c>
 8006f6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
					wsect += fs->fsize;
 8006f6c:	441c      	add	r4, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006f6e:	3e01      	subs	r6, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 8006f70:	2301      	movs	r3, #1
 8006f72:	4641      	mov	r1, r8
 8006f74:	4622      	mov	r2, r4
 8006f76:	7878      	ldrb	r0, [r7, #1]
 8006f78:	f7fd fbca 	bl	8004710 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006f7c:	2e01      	cmp	r6, #1
 8006f7e:	d1f4      	bne.n	8006f6a <dir_alloc+0x28a>
 8006f80:	465c      	mov	r4, fp
 8006f82:	46c3      	mov	fp, r8
 8006f84:	ee18 8a10 	vmov	r8, s16
 8006f88:	e78b      	b.n	8006ea2 <dir_alloc+0x1c2>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006f8a:	2600      	movs	r6, #0
 8006f8c:	e768      	b.n	8006e60 <dir_alloc+0x180>
 8006f8e:	462a      	mov	r2, r5
 8006f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f92:	465d      	mov	r5, fp
 8006f94:	9c05      	ldr	r4, [sp, #20]
 8006f96:	46c3      	mov	fp, r8
 8006f98:	1a8a      	subs	r2, r1, r2
 8006f9a:	ee18 8a10 	vmov	r8, s16
 8006f9e:	3b02      	subs	r3, #2
					fs->winsect -= n;							/* Restore window offset */
 8006fa0:	64ba      	str	r2, [r7, #72]	; 0x48
 8006fa2:	e753      	b.n	8006e4c <dir_alloc+0x16c>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	e78d      	b.n	8006ec4 <dir_alloc+0x1e4>

08006fa8 <dir_register>:
{
 8006fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fac:	f890 a04b 	ldrb.w	sl, [r0, #75]	; 0x4b
 8006fb0:	b0a3      	sub	sp, #140	; 0x8c
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8006fb2:	f01a 0aa0 	ands.w	sl, sl, #160	; 0xa0
 8006fb6:	f040 83c9 	bne.w	800774c <dir_register+0x7a4>
	FATFS *fs = dp->obj.fs;
 8006fba:	f8d0 9000 	ldr.w	r9, [r0]
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8006fbe:	4606      	mov	r6, r0
 8006fc0:	f8d9 4010 	ldr.w	r4, [r9, #16]
 8006fc4:	8823      	ldrh	r3, [r4, #0]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	f000 854a 	beq.w	8007a60 <dir_register+0xab8>
 8006fcc:	4623      	mov	r3, r4
 8006fce:	f833 2f02 	ldrh.w	r2, [r3, #2]!
 8006fd2:	f10a 0a01 	add.w	sl, sl, #1
 8006fd6:	2a00      	cmp	r2, #0
 8006fd8:	d1f9      	bne.n	8006fce <dir_register+0x26>
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8006fda:	f899 3000 	ldrb.w	r3, [r9]
 8006fde:	2b04      	cmp	r3, #4
 8006fe0:	f000 8299 	beq.w	8007516 <dir_register+0x56e>
	mem_cpy(sn, dp->fn, 12);
 8006fe4:	f106 0740 	add.w	r7, r6, #64	; 0x40
	if (cnt) {
 8006fe8:	ab0c      	add	r3, sp, #48	; 0x30
 8006fea:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8006fee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8006ff2:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
 8006ff6:	07d9      	lsls	r1, r3, #31
 8006ff8:	9308      	str	r3, [sp, #32]
 8006ffa:	f140 81b7 	bpl.w	800736c <dir_register+0x3c4>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8006ffe:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		for (n = 1; n < 100; n++) {
 8007002:	f04f 0b01 	mov.w	fp, #1
 8007006:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800700a:	2340      	movs	r3, #64	; 0x40
 800700c:	9100      	str	r1, [sp, #0]
 800700e:	4620      	mov	r0, r4
 8007010:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
 8007014:	465c      	mov	r4, fp
 8007016:	9201      	str	r2, [sp, #4]
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007018:	f04f 0820 	mov.w	r8, #32
 800701c:	9104      	str	r1, [sp, #16]
 800701e:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
 8007022:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 8007026:	9103      	str	r1, [sp, #12]
 8007028:	f89d 1033 	ldrb.w	r1, [sp, #51]	; 0x33
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800702c:	4693      	mov	fp, r2
 800702e:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8007032:	9102      	str	r1, [sp, #8]
 8007034:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
				if (sr & 0x10000) sr ^= 0x11021;
 8007038:	4dc7      	ldr	r5, [pc, #796]	; (8007358 <dir_register+0x3b0>)
 800703a:	9107      	str	r1, [sp, #28]
 800703c:	f89d 1035 	ldrb.w	r1, [sp, #53]	; 0x35
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8007040:	f886 304b 	strb.w	r3, [r6, #75]	; 0x4b
		for (n = 1; n < 100; n++) {
 8007044:	9106      	str	r1, [sp, #24]
 8007046:	f89d 1036 	ldrb.w	r1, [sp, #54]	; 0x36
 800704a:	9105      	str	r1, [sp, #20]
 800704c:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8007050:	468a      	mov	sl, r1
			*d++ = *s++;
 8007052:	2200      	movs	r2, #0
 8007054:	9900      	ldr	r1, [sp, #0]
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8007056:	2c05      	cmp	r4, #5
			*d++ = *s++;
 8007058:	f8a6 b048 	strh.w	fp, [r6, #72]	; 0x48
 800705c:	4613      	mov	r3, r2
 800705e:	f361 0207 	bfi	r2, r1, #0, #8
 8007062:	9907      	ldr	r1, [sp, #28]
 8007064:	f361 0307 	bfi	r3, r1, #0, #8
 8007068:	9901      	ldr	r1, [sp, #4]
 800706a:	f886 104a 	strb.w	r1, [r6, #74]	; 0x4a
 800706e:	9904      	ldr	r1, [sp, #16]
 8007070:	f361 220f 	bfi	r2, r1, #8, #8
 8007074:	9906      	ldr	r1, [sp, #24]
 8007076:	f361 230f 	bfi	r3, r1, #8, #8
 800707a:	9903      	ldr	r1, [sp, #12]
 800707c:	f361 4217 	bfi	r2, r1, #16, #8
 8007080:	9905      	ldr	r1, [sp, #20]
 8007082:	f361 4317 	bfi	r3, r1, #16, #8
 8007086:	9902      	ldr	r1, [sp, #8]
 8007088:	f36a 631f 	bfi	r3, sl, #24, #8
 800708c:	f361 621f 	bfi	r2, r1, #24, #8
 8007090:	e9c6 2310 	strd	r2, r3, [r6, #64]	; 0x40
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8007094:	f240 81a7 	bls.w	80073e6 <dir_register+0x43e>
		while (*lfn) {	/* Create a CRC */
 8007098:	8803      	ldrh	r3, [r0, #0]
 800709a:	2b00      	cmp	r3, #0
 800709c:	f000 81a3 	beq.w	80073e6 <dir_register+0x43e>
				sr = (sr << 1) + (wc & 1);
 80070a0:	f003 0101 	and.w	r1, r3, #1
				wc >>= 1;
 80070a4:	ea4f 0c53 	mov.w	ip, r3, lsr #1
				sr = (sr << 1) + (wc & 1);
 80070a8:	eb01 0144 	add.w	r1, r1, r4, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 80070ac:	e008      	b.n	80070c0 <dir_register+0x118>
				sr = (sr << 1) + (wc & 1);
 80070ae:	f003 0101 	and.w	r1, r3, #1
				wc >>= 1;
 80070b2:	ea4f 0c53 	mov.w	ip, r3, lsr #1
				sr = (sr << 1) + (wc & 1);
 80070b6:	eb01 0142 	add.w	r1, r1, r2, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 80070ba:	0412      	lsls	r2, r2, #16
 80070bc:	bf48      	it	mi
 80070be:	4069      	eormi	r1, r5
				sr = (sr << 1) + (wc & 1);
 80070c0:	f00c 0c01 	and.w	ip, ip, #1
				wc >>= 1;
 80070c4:	089a      	lsrs	r2, r3, #2
				sr = (sr << 1) + (wc & 1);
 80070c6:	eb0c 0c41 	add.w	ip, ip, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 80070ca:	0409      	lsls	r1, r1, #16
				sr = (sr << 1) + (wc & 1);
 80070cc:	f002 0101 	and.w	r1, r2, #1
				wc >>= 1;
 80070d0:	ea4f 02d3 	mov.w	r2, r3, lsr #3
				if (sr & 0x10000) sr ^= 0x11021;
 80070d4:	bf48      	it	mi
 80070d6:	ea8c 0c05 	eormi.w	ip, ip, r5
				sr = (sr << 1) + (wc & 1);
 80070da:	f002 0201 	and.w	r2, r2, #1
 80070de:	eb01 014c 	add.w	r1, r1, ip, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 80070e2:	f41c 4f00 	tst.w	ip, #32768	; 0x8000
				wc >>= 1;
 80070e6:	ea4f 1c13 	mov.w	ip, r3, lsr #4
				if (sr & 0x10000) sr ^= 0x11021;
 80070ea:	bf18      	it	ne
 80070ec:	4069      	eorne	r1, r5
				sr = (sr << 1) + (wc & 1);
 80070ee:	f00c 0c01 	and.w	ip, ip, #1
 80070f2:	eb02 0241 	add.w	r2, r2, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 80070f6:	0409      	lsls	r1, r1, #16
				wc >>= 1;
 80070f8:	ea4f 1153 	mov.w	r1, r3, lsr #5
				if (sr & 0x10000) sr ^= 0x11021;
 80070fc:	bf48      	it	mi
 80070fe:	406a      	eormi	r2, r5
				sr = (sr << 1) + (wc & 1);
 8007100:	f001 0101 	and.w	r1, r1, #1
 8007104:	eb0c 0c42 	add.w	ip, ip, r2, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8007108:	0412      	lsls	r2, r2, #16
				wc >>= 1;
 800710a:	ea4f 1293 	mov.w	r2, r3, lsr #6
				if (sr & 0x10000) sr ^= 0x11021;
 800710e:	bf48      	it	mi
 8007110:	ea8c 0c05 	eormi.w	ip, ip, r5
				sr = (sr << 1) + (wc & 1);
 8007114:	f002 0201 	and.w	r2, r2, #1
 8007118:	eb01 014c 	add.w	r1, r1, ip, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 800711c:	f41c 4f00 	tst.w	ip, #32768	; 0x8000
				wc >>= 1;
 8007120:	ea4f 1cd3 	mov.w	ip, r3, lsr #7
				if (sr & 0x10000) sr ^= 0x11021;
 8007124:	bf18      	it	ne
 8007126:	4069      	eorne	r1, r5
				sr = (sr << 1) + (wc & 1);
 8007128:	f00c 0c01 	and.w	ip, ip, #1
 800712c:	eb02 0241 	add.w	r2, r2, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8007130:	0409      	lsls	r1, r1, #16
				wc >>= 1;
 8007132:	ea4f 2113 	mov.w	r1, r3, lsr #8
				if (sr & 0x10000) sr ^= 0x11021;
 8007136:	bf48      	it	mi
 8007138:	406a      	eormi	r2, r5
				sr = (sr << 1) + (wc & 1);
 800713a:	f001 0101 	and.w	r1, r1, #1
 800713e:	eb0c 0c42 	add.w	ip, ip, r2, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8007142:	0412      	lsls	r2, r2, #16
				wc >>= 1;
 8007144:	ea4f 2253 	mov.w	r2, r3, lsr #9
				if (sr & 0x10000) sr ^= 0x11021;
 8007148:	bf48      	it	mi
 800714a:	ea8c 0c05 	eormi.w	ip, ip, r5
				sr = (sr << 1) + (wc & 1);
 800714e:	f002 0201 	and.w	r2, r2, #1
 8007152:	eb01 014c 	add.w	r1, r1, ip, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8007156:	f41c 4f00 	tst.w	ip, #32768	; 0x8000
				wc >>= 1;
 800715a:	ea4f 2c93 	mov.w	ip, r3, lsr #10
				if (sr & 0x10000) sr ^= 0x11021;
 800715e:	bf18      	it	ne
 8007160:	4069      	eorne	r1, r5
				sr = (sr << 1) + (wc & 1);
 8007162:	f00c 0c01 	and.w	ip, ip, #1
 8007166:	eb02 0241 	add.w	r2, r2, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 800716a:	0409      	lsls	r1, r1, #16
				wc >>= 1;
 800716c:	ea4f 21d3 	mov.w	r1, r3, lsr #11
				if (sr & 0x10000) sr ^= 0x11021;
 8007170:	bf48      	it	mi
 8007172:	406a      	eormi	r2, r5
				sr = (sr << 1) + (wc & 1);
 8007174:	f001 0101 	and.w	r1, r1, #1
 8007178:	eb0c 0c42 	add.w	ip, ip, r2, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 800717c:	0412      	lsls	r2, r2, #16
				wc >>= 1;
 800717e:	ea4f 3213 	mov.w	r2, r3, lsr #12
				if (sr & 0x10000) sr ^= 0x11021;
 8007182:	bf48      	it	mi
 8007184:	ea8c 0c05 	eormi.w	ip, ip, r5
				sr = (sr << 1) + (wc & 1);
 8007188:	f002 0201 	and.w	r2, r2, #1
 800718c:	eb01 014c 	add.w	r1, r1, ip, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8007190:	f41c 4f00 	tst.w	ip, #32768	; 0x8000
				wc >>= 1;
 8007194:	ea4f 3c53 	mov.w	ip, r3, lsr #13
				if (sr & 0x10000) sr ^= 0x11021;
 8007198:	bf18      	it	ne
 800719a:	4069      	eorne	r1, r5
				sr = (sr << 1) + (wc & 1);
 800719c:	f00c 0c01 	and.w	ip, ip, #1
 80071a0:	eb02 0241 	add.w	r2, r2, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 80071a4:	0409      	lsls	r1, r1, #16
				wc >>= 1;
 80071a6:	ea4f 3193 	mov.w	r1, r3, lsr #14
				if (sr & 0x10000) sr ^= 0x11021;
 80071aa:	bf48      	it	mi
 80071ac:	406a      	eormi	r2, r5
				wc >>= 1;
 80071ae:	0bdb      	lsrs	r3, r3, #15
				sr = (sr << 1) + (wc & 1);
 80071b0:	f001 0101 	and.w	r1, r1, #1
 80071b4:	eb0c 0c42 	add.w	ip, ip, r2, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 80071b8:	0412      	lsls	r2, r2, #16
 80071ba:	bf48      	it	mi
 80071bc:	ea8c 0c05 	eormi.w	ip, ip, r5
				sr = (sr << 1) + (wc & 1);
 80071c0:	eb01 014c 	add.w	r1, r1, ip, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 80071c4:	f41c 4f00 	tst.w	ip, #32768	; 0x8000
 80071c8:	bf18      	it	ne
 80071ca:	4069      	eorne	r1, r5
				sr = (sr << 1) + (wc & 1);
 80071cc:	eb03 0241 	add.w	r2, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 80071d0:	0409      	lsls	r1, r1, #16
		while (*lfn) {	/* Create a CRC */
 80071d2:	f830 3f02 	ldrh.w	r3, [r0, #2]!
				if (sr & 0x10000) sr ^= 0x11021;
 80071d6:	bf48      	it	mi
 80071d8:	406a      	eormi	r2, r5
		while (*lfn) {	/* Create a CRC */
 80071da:	2b00      	cmp	r3, #0
 80071dc:	f47f af67 	bne.w	80070ae <dir_register+0x106>
		c = (BYTE)((seq % 16) + '0');
 80071e0:	f002 010f 	and.w	r1, r2, #15
 80071e4:	f101 0330 	add.w	r3, r1, #48	; 0x30
		if (c > '9') c += 7;
 80071e8:	2b39      	cmp	r3, #57	; 0x39
 80071ea:	bf88      	it	hi
 80071ec:	f101 0337 	addhi.w	r3, r1, #55	; 0x37
	} while (seq);
 80071f0:	2a0f      	cmp	r2, #15
		seq /= 16;
 80071f2:	ea4f 1112 	mov.w	r1, r2, lsr #4
		ns[i--] = c;
 80071f6:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
	} while (seq);
 80071fa:	f240 8173 	bls.w	80074e4 <dir_register+0x53c>
		c = (BYTE)((seq % 16) + '0');
 80071fe:	f001 000f 	and.w	r0, r1, #15
 8007202:	f100 0330 	add.w	r3, r0, #48	; 0x30
		if (c > '9') c += 7;
 8007206:	2b39      	cmp	r3, #57	; 0x39
 8007208:	bf88      	it	hi
 800720a:	f100 0337 	addhi.w	r3, r0, #55	; 0x37
	} while (seq);
 800720e:	290f      	cmp	r1, #15
		seq /= 16;
 8007210:	ea4f 2012 	mov.w	r0, r2, lsr #8
		ns[i--] = c;
 8007214:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
	} while (seq);
 8007218:	f240 8169 	bls.w	80074ee <dir_register+0x546>
		c = (BYTE)((seq % 16) + '0');
 800721c:	f000 010f 	and.w	r1, r0, #15
 8007220:	f101 0330 	add.w	r3, r1, #48	; 0x30
		if (c > '9') c += 7;
 8007224:	2b39      	cmp	r3, #57	; 0x39
 8007226:	bf88      	it	hi
 8007228:	f101 0337 	addhi.w	r3, r1, #55	; 0x37
	} while (seq);
 800722c:	280f      	cmp	r0, #15
		seq /= 16;
 800722e:	ea4f 3112 	mov.w	r1, r2, lsr #12
		ns[i--] = c;
 8007232:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
	} while (seq);
 8007236:	f240 815f 	bls.w	80074f8 <dir_register+0x550>
		c = (BYTE)((seq % 16) + '0');
 800723a:	f001 000f 	and.w	r0, r1, #15
 800723e:	f100 0330 	add.w	r3, r0, #48	; 0x30
		if (c > '9') c += 7;
 8007242:	2b39      	cmp	r3, #57	; 0x39
 8007244:	bf88      	it	hi
 8007246:	f100 0337 	addhi.w	r3, r0, #55	; 0x37
	} while (seq);
 800724a:	290f      	cmp	r1, #15
		seq /= 16;
 800724c:	ea4f 4012 	mov.w	r0, r2, lsr #16
		ns[i--] = c;
 8007250:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	} while (seq);
 8007254:	f240 8155 	bls.w	8007502 <dir_register+0x55a>
		c = (BYTE)((seq % 16) + '0');
 8007258:	f000 010f 	and.w	r1, r0, #15
 800725c:	f101 0330 	add.w	r3, r1, #48	; 0x30
		if (c > '9') c += 7;
 8007260:	2b39      	cmp	r3, #57	; 0x39
 8007262:	bf88      	it	hi
 8007264:	f101 0337 	addhi.w	r3, r1, #55	; 0x37
	} while (seq);
 8007268:	280f      	cmp	r0, #15
		seq /= 16;
 800726a:	ea4f 5112 	mov.w	r1, r2, lsr #20
		ns[i--] = c;
 800726e:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
	} while (seq);
 8007272:	f240 814b 	bls.w	800750c <dir_register+0x564>
		c = (BYTE)((seq % 16) + '0');
 8007276:	f001 000f 	and.w	r0, r1, #15
 800727a:	f100 0330 	add.w	r3, r0, #48	; 0x30
		if (c > '9') c += 7;
 800727e:	2b39      	cmp	r3, #57	; 0x39
 8007280:	bf88      	it	hi
 8007282:	f100 0337 	addhi.w	r3, r0, #55	; 0x37
	} while (seq);
 8007286:	290f      	cmp	r1, #15
		seq /= 16;
 8007288:	ea4f 6012 	mov.w	r0, r2, lsr #24
		ns[i--] = c;
 800728c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
	} while (seq);
 8007290:	f240 8257 	bls.w	8007742 <dir_register+0x79a>
		c = (BYTE)((seq % 16) + '0');
 8007294:	f000 010f 	and.w	r1, r0, #15
		seq /= 16;
 8007298:	0f12      	lsrs	r2, r2, #28
		c = (BYTE)((seq % 16) + '0');
 800729a:	f101 0330 	add.w	r3, r1, #48	; 0x30
		if (c > '9') c += 7;
 800729e:	2b39      	cmp	r3, #57	; 0x39
 80072a0:	bf88      	it	hi
 80072a2:	f101 0337 	addhi.w	r3, r1, #55	; 0x37
	} while (seq);
 80072a6:	280f      	cmp	r0, #15
		ns[i--] = c;
 80072a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
	} while (seq);
 80072ac:	f240 809d 	bls.w	80073ea <dir_register+0x442>
		c = (BYTE)((seq % 16) + '0');
 80072b0:	f102 0330 	add.w	r3, r2, #48	; 0x30
 80072b4:	b2d2      	uxtb	r2, r2
		if (c > '9') c += 7;
 80072b6:	2b39      	cmp	r3, #57	; 0x39
 80072b8:	bf88      	it	hi
 80072ba:	f102 0337 	addhi.w	r3, r2, #55	; 0x37
		ns[i--] = c;
 80072be:	f04f 32ff 	mov.w	r2, #4294967295
 80072c2:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80072c6:	f106 013f 	add.w	r1, r6, #63	; 0x3f
 80072ca:	2300      	movs	r3, #0
 80072cc:	e002      	b.n	80072d4 <dir_register+0x32c>
 80072ce:	3301      	adds	r3, #1
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d003      	beq.n	80072dc <dir_register+0x334>
 80072d4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80072d8:	2820      	cmp	r0, #32
 80072da:	d1f8      	bne.n	80072ce <dir_register+0x326>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80072dc:	2a07      	cmp	r2, #7
 80072de:	f240 8089 	bls.w	80073f4 <dir_register+0x44c>
 80072e2:	1c59      	adds	r1, r3, #1
 80072e4:	f807 8003 	strb.w	r8, [r7, r3]
	} while (j < 8);
 80072e8:	2907      	cmp	r1, #7
 80072ea:	d829      	bhi.n	8007340 <dir_register+0x398>
 80072ec:	2907      	cmp	r1, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80072ee:	f101 0001 	add.w	r0, r1, #1
 80072f2:	f807 8001 	strb.w	r8, [r7, r1]
	} while (j < 8);
 80072f6:	d023      	beq.n	8007340 <dir_register+0x398>
 80072f8:	2807      	cmp	r0, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80072fa:	f100 0101 	add.w	r1, r0, #1
 80072fe:	f807 8000 	strb.w	r8, [r7, r0]
	} while (j < 8);
 8007302:	d01d      	beq.n	8007340 <dir_register+0x398>
 8007304:	2907      	cmp	r1, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007306:	f101 0001 	add.w	r0, r1, #1
 800730a:	f807 8001 	strb.w	r8, [r7, r1]
	} while (j < 8);
 800730e:	d017      	beq.n	8007340 <dir_register+0x398>
 8007310:	2807      	cmp	r0, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007312:	f100 0101 	add.w	r1, r0, #1
 8007316:	f807 8000 	strb.w	r8, [r7, r0]
	} while (j < 8);
 800731a:	d011      	beq.n	8007340 <dir_register+0x398>
 800731c:	2907      	cmp	r1, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800731e:	f101 0001 	add.w	r0, r1, #1
 8007322:	f807 8001 	strb.w	r8, [r7, r1]
	} while (j < 8);
 8007326:	d00b      	beq.n	8007340 <dir_register+0x398>
 8007328:	2807      	cmp	r0, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800732a:	f100 0101 	add.w	r1, r0, #1
 800732e:	f807 8000 	strb.w	r8, [r7, r0]
	} while (j < 8);
 8007332:	d005      	beq.n	8007340 <dir_register+0x398>
 8007334:	2906      	cmp	r1, #6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007336:	f807 8001 	strb.w	r8, [r7, r1]
	} while (j < 8);
 800733a:	d101      	bne.n	8007340 <dir_register+0x398>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800733c:	f886 8047 	strb.w	r8, [r6, #71]	; 0x47
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8007340:	4630      	mov	r0, r6
 8007342:	f7ff f85f 	bl	8006404 <dir_find>
			if (res != FR_OK) break;
 8007346:	b948      	cbnz	r0, 800735c <dir_register+0x3b4>
		for (n = 1; n < 100; n++) {
 8007348:	3401      	adds	r4, #1
 800734a:	2c64      	cmp	r4, #100	; 0x64
 800734c:	f000 83a8 	beq.w	8007aa0 <dir_register+0xaf8>
 8007350:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8007354:	e67d      	b.n	8007052 <dir_register+0xaa>
 8007356:	bf00      	nop
 8007358:	00011021 	.word	0x00011021
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800735c:	2804      	cmp	r0, #4
 800735e:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8007362:	4604      	mov	r4, r0
 8007364:	d13b      	bne.n	80073de <dir_register+0x436>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8007366:	9b08      	ldr	r3, [sp, #32]
 8007368:	f886 304b 	strb.w	r3, [r6, #75]	; 0x4b
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800736c:	9b08      	ldr	r3, [sp, #32]
 800736e:	079b      	lsls	r3, r3, #30
 8007370:	f100 81f1 	bmi.w	8007756 <dir_register+0x7ae>
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8007374:	2101      	movs	r1, #1
 8007376:	4630      	mov	r0, r6
 8007378:	f7ff fcb2 	bl	8006ce0 <dir_alloc>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800737c:	4604      	mov	r4, r0
 800737e:	bb70      	cbnz	r0, 80073de <dir_register+0x436>
		res = move_window(fs, dp->sect);
 8007380:	6bb1      	ldr	r1, [r6, #56]	; 0x38
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007382:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 8007386:	4299      	cmp	r1, r3
 8007388:	d004      	beq.n	8007394 <dir_register+0x3ec>
 800738a:	4648      	mov	r0, r9
 800738c:	f7fd fbe8 	bl	8004b60 <move_window.part.0>
		if (res == FR_OK) {
 8007390:	4604      	mov	r4, r0
 8007392:	bb20      	cbnz	r0, 80073de <dir_register+0x436>
	BYTE *d = (BYTE*)dst;
 8007394:	2220      	movs	r2, #32
 8007396:	2100      	movs	r1, #0
 8007398:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 800739a:	f002 f82f 	bl	80093fc <memset>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800739e:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80073a0:	1d1a      	adds	r2, r3, #4
 80073a2:	4297      	cmp	r7, r2
 80073a4:	d204      	bcs.n	80073b0 <dir_register+0x408>
 80073a6:	f106 0244 	add.w	r2, r6, #68	; 0x44
 80073aa:	4293      	cmp	r3, r2
 80073ac:	f0c0 835f 	bcc.w	8007a6e <dir_register+0xac6>
			*d++ = *s++;
 80073b0:	6c32      	ldr	r2, [r6, #64]	; 0x40
 80073b2:	601a      	str	r2, [r3, #0]
 80073b4:	6c72      	ldr	r2, [r6, #68]	; 0x44
 80073b6:	605a      	str	r2, [r3, #4]
 80073b8:	f896 2048 	ldrb.w	r2, [r6, #72]	; 0x48
			fs->wflag = 1;
 80073bc:	2400      	movs	r4, #0
			*d++ = *s++;
 80073be:	721a      	strb	r2, [r3, #8]
 80073c0:	f896 2049 	ldrb.w	r2, [r6, #73]	; 0x49
 80073c4:	725a      	strb	r2, [r3, #9]
 80073c6:	f896 204a 	ldrb.w	r2, [r6, #74]	; 0x4a
 80073ca:	729a      	strb	r2, [r3, #10]
			fs->wflag = 1;
 80073cc:	2201      	movs	r2, #1
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80073ce:	f896 304b 	ldrb.w	r3, [r6, #75]	; 0x4b
 80073d2:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
 80073d4:	f003 0318 	and.w	r3, r3, #24
 80073d8:	730b      	strb	r3, [r1, #12]
			fs->wflag = 1;
 80073da:	f889 2003 	strb.w	r2, [r9, #3]
}
 80073de:	4620      	mov	r0, r4
 80073e0:	b023      	add	sp, #140	; 0x8c
 80073e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073e6:	4622      	mov	r2, r4
 80073e8:	e6fa      	b.n	80071e0 <dir_register+0x238>
	ns[i] = '~';
 80073ea:	227e      	movs	r2, #126	; 0x7e
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80073ec:	2300      	movs	r3, #0
	ns[i] = '~';
 80073ee:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
 80073f2:	461a      	mov	r2, r3
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80073f4:	f10d 0c88 	add.w	ip, sp, #136	; 0x88
 80073f8:	1c59      	adds	r1, r3, #1
 80073fa:	1c50      	adds	r0, r2, #1
 80073fc:	4494      	add	ip, r2
	} while (j < 8);
 80073fe:	2907      	cmp	r1, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007400:	f81c cc60 	ldrb.w	ip, [ip, #-96]
 8007404:	f807 c003 	strb.w	ip, [r7, r3]
	} while (j < 8);
 8007408:	d89a      	bhi.n	8007340 <dir_register+0x398>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800740a:	2807      	cmp	r0, #7
 800740c:	f63f af6e 	bhi.w	80072ec <dir_register+0x344>
 8007410:	f10d 0c88 	add.w	ip, sp, #136	; 0x88
	} while (j < 8);
 8007414:	2b06      	cmp	r3, #6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007416:	4460      	add	r0, ip
 8007418:	f102 0c02 	add.w	ip, r2, #2
 800741c:	f810 ec60 	ldrb.w	lr, [r0, #-96]
 8007420:	f103 0002 	add.w	r0, r3, #2
 8007424:	f807 e001 	strb.w	lr, [r7, r1]
	} while (j < 8);
 8007428:	d08a      	beq.n	8007340 <dir_register+0x398>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800742a:	f1bc 0f07 	cmp.w	ip, #7
 800742e:	f63f af63 	bhi.w	80072f8 <dir_register+0x350>
 8007432:	a922      	add	r1, sp, #136	; 0x88
	} while (j < 8);
 8007434:	2b05      	cmp	r3, #5
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007436:	f102 0e03 	add.w	lr, r2, #3
 800743a:	448c      	add	ip, r1
 800743c:	f103 0103 	add.w	r1, r3, #3
 8007440:	f81c cc60 	ldrb.w	ip, [ip, #-96]
 8007444:	f807 c000 	strb.w	ip, [r7, r0]
	} while (j < 8);
 8007448:	f43f af7a 	beq.w	8007340 <dir_register+0x398>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800744c:	f1be 0f07 	cmp.w	lr, #7
 8007450:	f63f af58 	bhi.w	8007304 <dir_register+0x35c>
 8007454:	a822      	add	r0, sp, #136	; 0x88
	} while (j < 8);
 8007456:	2b04      	cmp	r3, #4
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007458:	f102 0c04 	add.w	ip, r2, #4
 800745c:	4486      	add	lr, r0
 800745e:	f103 0004 	add.w	r0, r3, #4
 8007462:	f81e ec60 	ldrb.w	lr, [lr, #-96]
 8007466:	f807 e001 	strb.w	lr, [r7, r1]
	} while (j < 8);
 800746a:	f43f af69 	beq.w	8007340 <dir_register+0x398>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800746e:	f1bc 0f07 	cmp.w	ip, #7
 8007472:	f63f af4d 	bhi.w	8007310 <dir_register+0x368>
 8007476:	a922      	add	r1, sp, #136	; 0x88
	} while (j < 8);
 8007478:	2b03      	cmp	r3, #3
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800747a:	f102 0e05 	add.w	lr, r2, #5
 800747e:	448c      	add	ip, r1
 8007480:	f103 0105 	add.w	r1, r3, #5
 8007484:	f81c cc60 	ldrb.w	ip, [ip, #-96]
 8007488:	f807 c000 	strb.w	ip, [r7, r0]
	} while (j < 8);
 800748c:	f43f af58 	beq.w	8007340 <dir_register+0x398>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007490:	f1be 0f07 	cmp.w	lr, #7
 8007494:	f63f af42 	bhi.w	800731c <dir_register+0x374>
 8007498:	a822      	add	r0, sp, #136	; 0x88
	} while (j < 8);
 800749a:	2b02      	cmp	r3, #2
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800749c:	f102 0c06 	add.w	ip, r2, #6
 80074a0:	4486      	add	lr, r0
 80074a2:	f103 0006 	add.w	r0, r3, #6
 80074a6:	f81e ec60 	ldrb.w	lr, [lr, #-96]
 80074aa:	f807 e001 	strb.w	lr, [r7, r1]
	} while (j < 8);
 80074ae:	f43f af47 	beq.w	8007340 <dir_register+0x398>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80074b2:	f1bc 0f08 	cmp.w	ip, #8
 80074b6:	f43f af37 	beq.w	8007328 <dir_register+0x380>
 80074ba:	a922      	add	r1, sp, #136	; 0x88
	} while (j < 8);
 80074bc:	2b01      	cmp	r3, #1
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80074be:	448c      	add	ip, r1
 80074c0:	f103 0107 	add.w	r1, r3, #7
 80074c4:	f81c cc60 	ldrb.w	ip, [ip, #-96]
 80074c8:	f807 c000 	strb.w	ip, [r7, r0]
	} while (j < 8);
 80074cc:	f43f af38 	beq.w	8007340 <dir_register+0x398>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80074d0:	2a00      	cmp	r2, #0
 80074d2:	f47f af2f 	bne.w	8007334 <dir_register+0x38c>
 80074d6:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
	} while (j < 8);
 80074da:	2906      	cmp	r1, #6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80074dc:	547b      	strb	r3, [r7, r1]
	} while (j < 8);
 80074de:	f43f af2d 	beq.w	800733c <dir_register+0x394>
 80074e2:	e72d      	b.n	8007340 <dir_register+0x398>
	ns[i] = '~';
 80074e4:	237e      	movs	r3, #126	; 0x7e
		ns[i--] = c;
 80074e6:	2206      	movs	r2, #6
	ns[i] = '~';
 80074e8:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80074ec:	e6eb      	b.n	80072c6 <dir_register+0x31e>
	ns[i] = '~';
 80074ee:	237e      	movs	r3, #126	; 0x7e
		ns[i--] = c;
 80074f0:	2205      	movs	r2, #5
	ns[i] = '~';
 80074f2:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80074f6:	e6e6      	b.n	80072c6 <dir_register+0x31e>
	ns[i] = '~';
 80074f8:	237e      	movs	r3, #126	; 0x7e
		ns[i--] = c;
 80074fa:	2204      	movs	r2, #4
	ns[i] = '~';
 80074fc:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8007500:	e6e1      	b.n	80072c6 <dir_register+0x31e>
	ns[i] = '~';
 8007502:	237e      	movs	r3, #126	; 0x7e
		ns[i--] = c;
 8007504:	2203      	movs	r2, #3
	ns[i] = '~';
 8007506:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800750a:	e6dc      	b.n	80072c6 <dir_register+0x31e>
	ns[i] = '~';
 800750c:	237e      	movs	r3, #126	; 0x7e
		ns[i--] = c;
 800750e:	2202      	movs	r2, #2
	ns[i] = '~';
 8007510:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8007514:	e6d7      	b.n	80072c6 <dir_register+0x31e>
		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 8007516:	4bc9      	ldr	r3, [pc, #804]	; (800783c <dir_register+0x894>)
 8007518:	f10a 050e 	add.w	r5, sl, #14
		res = dir_alloc(dp, nent);		/* Allocate entries */
 800751c:	4630      	mov	r0, r6
		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 800751e:	fba3 3505 	umull	r3, r5, r3, r5
 8007522:	08ed      	lsrs	r5, r5, #3
		res = dir_alloc(dp, nent);		/* Allocate entries */
 8007524:	1ca9      	adds	r1, r5, #2
 8007526:	f7ff fbdb 	bl	8006ce0 <dir_alloc>
		if (res != FR_OK) return res;
 800752a:	4604      	mov	r4, r0
 800752c:	2800      	cmp	r0, #0
 800752e:	f47f af56 	bne.w	80073de <dir_register+0x436>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 8007532:	3501      	adds	r5, #1
 8007534:	6b33      	ldr	r3, [r6, #48]	; 0x30
		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
 8007536:	68b2      	ldr	r2, [r6, #8]
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 8007538:	eba3 1545 	sub.w	r5, r3, r5, lsl #5
 800753c:	64f5      	str	r5, [r6, #76]	; 0x4c
		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
 800753e:	2a00      	cmp	r2, #0
 8007540:	f000 80a2 	beq.w	8007688 <dir_register+0x6e0>
 8007544:	79f3      	ldrb	r3, [r6, #7]
 8007546:	075d      	lsls	r5, r3, #29
 8007548:	f140 809e 	bpl.w	8007688 <dir_register+0x6e0>
			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
 800754c:	f8b9 500a 	ldrh.w	r5, [r9, #10]
 8007550:	f8b9 000c 	ldrh.w	r0, [r9, #12]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 8007554:	69f1      	ldr	r1, [r6, #28]
			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
 8007556:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
 800755a:	fbe0 2305 	umlal	r2, r3, r0, r5
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800755e:	6b75      	ldr	r5, [r6, #52]	; 0x34
			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
 8007560:	e9c6 2304 	strd	r2, r3, [r6, #16]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 8007564:	b1d1      	cbz	r1, 800759c <dir_register+0x5f4>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 8007566:	1a68      	subs	r0, r5, r1
 8007568:	2901      	cmp	r1, #1
 800756a:	f04f 32ff 	mov.w	r2, #4294967295
 800756e:	f100 0301 	add.w	r3, r0, #1
 8007572:	bf88      	it	hi
 8007574:	1c82      	addhi	r2, r0, #2
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007576:	2b01      	cmp	r3, #1
 8007578:	4619      	mov	r1, r3
 800757a:	f240 8274 	bls.w	8007a66 <dir_register+0xabe>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 800757e:	6830      	ldr	r0, [r6, #0]
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007580:	6b07      	ldr	r7, [r0, #48]	; 0x30
 8007582:	42bb      	cmp	r3, r7
 8007584:	f080 826f 	bcs.w	8007a66 <dir_register+0xabe>
 8007588:	f7fd fb24 	bl	8004bd4 <put_fat.part.0>
		if (res != FR_OK) return res;
 800758c:	2800      	cmp	r0, #0
 800758e:	f040 826c 	bne.w	8007a6a <dir_register+0xac2>
		obj->n_frag--;
 8007592:	69f1      	ldr	r1, [r6, #28]
 8007594:	3901      	subs	r1, #1
 8007596:	61f1      	str	r1, [r6, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 8007598:	2900      	cmp	r1, #0
 800759a:	d1e4      	bne.n	8007566 <dir_register+0x5be>
	dp->blk_ofs = obj->c_ofs;
 800759c:	e9d6 3109 	ldrd	r3, r1, [r6, #36]	; 0x24
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 80075a0:	2200      	movs	r2, #0
 80075a2:	f023 00ff 	bic.w	r0, r3, #255	; 0xff
	dp->obj.stat = (BYTE)obj->c_size;
 80075a6:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
	dp->obj.fs = obj->fs;
 80075aa:	6833      	ldr	r3, [r6, #0]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 80075ac:	9010      	str	r0, [sp, #64]	; 0x40
	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 80075ae:	a80c      	add	r0, sp, #48	; 0x30
	dp->obj.fs = obj->fs;
 80075b0:	930c      	str	r3, [sp, #48]	; 0x30
	dp->obj.sclust = obj->c_scl;
 80075b2:	6a33      	ldr	r3, [r6, #32]
	dp->blk_ofs = obj->c_ofs;
 80075b4:	911f      	str	r1, [sp, #124]	; 0x7c
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 80075b6:	9211      	str	r2, [sp, #68]	; 0x44
	dp->obj.sclust = obj->c_scl;
 80075b8:	930e      	str	r3, [sp, #56]	; 0x38
	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 80075ba:	f7fe fd25 	bl	8006008 <dir_sdi>
	if (res == FR_OK) {
 80075be:	2800      	cmp	r0, #0
 80075c0:	f040 8253 	bne.w	8007a6a <dir_register+0xac2>
		res = load_xdir(dp);		/* Load the object's entry block */
 80075c4:	a80c      	add	r0, sp, #48	; 0x30
 80075c6:	f7fd fcf5 	bl	8004fb4 <load_xdir>
			if (res != FR_OK) return res;
 80075ca:	4603      	mov	r3, r0
 80075cc:	2800      	cmp	r0, #0
 80075ce:	f040 826d 	bne.w	8007aac <dir_register+0xb04>
			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
 80075d2:	6931      	ldr	r1, [r6, #16]
	*ptr++ = (BYTE)val; val >>= 8;
 80075d4:	4605      	mov	r5, r0
			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
 80075d6:	6972      	ldr	r2, [r6, #20]
	*ptr++ = (BYTE)val; val >>= 8;
 80075d8:	4607      	mov	r7, r0
 80075da:	ea4f 2e11 	mov.w	lr, r1, lsr #8
 80075de:	f361 0507 	bfi	r5, r1, #0, #8
	*ptr++ = (BYTE)val; val >>= 8;
 80075e2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
	*ptr++ = (BYTE)val; val >>= 8;
 80075e6:	f362 0707 	bfi	r7, r2, #0, #8
 80075ea:	ea4e 6e02 	orr.w	lr, lr, r2, lsl #24
			res = store_xdir(&dj);							/* Store the object status */
 80075ee:	a80c      	add	r0, sp, #48	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 80075f0:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
	*ptr++ = (BYTE)val; val >>= 8;
 80075f4:	f36e 250f 	bfi	r5, lr, #8, #8
	*ptr++ = (BYTE)val; val >>= 8;
 80075f8:	ea4f 2e12 	mov.w	lr, r2, lsr #8
	*ptr++ = (BYTE)val; val >>= 8;
 80075fc:	0e09      	lsrs	r1, r1, #24
	*ptr++ = (BYTE)val; val >>= 8;
 80075fe:	f36e 270f 	bfi	r7, lr, #8, #8
 8007602:	f36c 4517 	bfi	r5, ip, #16, #8
	*ptr++ = (BYTE)val; val >>= 8;
 8007606:	ea4f 4c12 	mov.w	ip, r2, lsr #16
	*ptr++ = (BYTE)val; val >>= 8;
 800760a:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
	*ptr++ = (BYTE)val; val >>= 8;
 800760e:	f36c 4717 	bfi	r7, ip, #16, #8
	*ptr++ = (BYTE)val; val >>= 8;
 8007612:	0e12      	lsrs	r2, r2, #24
	*ptr++ = (BYTE)val; val >>= 8;
 8007614:	f361 651f 	bfi	r5, r1, #24, #8
			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
 8007618:	f8d9 1014 	ldr.w	r1, [r9, #20]
	*ptr++ = (BYTE)val; val >>= 8;
 800761c:	f362 671f 	bfi	r7, r2, #24, #8
 8007620:	638d      	str	r5, [r1, #56]	; 0x38
 8007622:	461d      	mov	r5, r3
 8007624:	63cf      	str	r7, [r1, #60]	; 0x3c
			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 8007626:	e9d6 1204 	ldrd	r1, r2, [r6, #16]
	*ptr++ = (BYTE)val; val >>= 8;
 800762a:	ea4f 2c11 	mov.w	ip, r1, lsr #8
 800762e:	f361 0307 	bfi	r3, r1, #0, #8
 8007632:	f362 0507 	bfi	r5, r2, #0, #8
	*ptr++ = (BYTE)val; val >>= 8;
 8007636:	0c0f      	lsrs	r7, r1, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8007638:	ea4c 6c02 	orr.w	ip, ip, r2, lsl #24
	*ptr++ = (BYTE)val; val >>= 8;
 800763c:	ea4f 2e12 	mov.w	lr, r2, lsr #8
	*ptr++ = (BYTE)val; val >>= 8;
 8007640:	ea47 4702 	orr.w	r7, r7, r2, lsl #16
	*ptr++ = (BYTE)val; val >>= 8;
 8007644:	f36c 230f 	bfi	r3, ip, #8, #8
	*ptr++ = (BYTE)val; val >>= 8;
 8007648:	0e09      	lsrs	r1, r1, #24
	*ptr++ = (BYTE)val; val >>= 8;
 800764a:	f36e 250f 	bfi	r5, lr, #8, #8
	*ptr++ = (BYTE)val; val >>= 8;
 800764e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
	*ptr++ = (BYTE)val; val >>= 8;
 8007652:	f367 4317 	bfi	r3, r7, #16, #8
	*ptr++ = (BYTE)val; val >>= 8;
 8007656:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 800765a:	f8d9 7014 	ldr.w	r7, [r9, #20]
	*ptr++ = (BYTE)val; val >>= 8;
 800765e:	0e12      	lsrs	r2, r2, #24
	*ptr++ = (BYTE)val; val >>= 8;
 8007660:	f36c 4517 	bfi	r5, ip, #16, #8
 8007664:	f361 631f 	bfi	r3, r1, #24, #8
 8007668:	f362 651f 	bfi	r5, r2, #24, #8
 800766c:	62bb      	str	r3, [r7, #40]	; 0x28
 800766e:	62fd      	str	r5, [r7, #44]	; 0x2c
			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 8007670:	79f3      	ldrb	r3, [r6, #7]
 8007672:	f8d9 2014 	ldr.w	r2, [r9, #20]
 8007676:	f043 0301 	orr.w	r3, r3, #1
 800767a:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
			res = store_xdir(&dj);							/* Store the object status */
 800767e:	f7fe fe07 	bl	8006290 <store_xdir>
			if (res != FR_OK) return res;
 8007682:	2800      	cmp	r0, #0
 8007684:	f040 81f1 	bne.w	8007a6a <dir_register+0xac2>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 8007688:	f8d9 8014 	ldr.w	r8, [r9, #20]
 800768c:	2240      	movs	r2, #64	; 0x40
 800768e:	2100      	movs	r1, #0
 8007690:	f8d9 5010 	ldr.w	r5, [r9, #16]
	BYTE *d = (BYTE*)dst;
 8007694:	4640      	mov	r0, r8
	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
 8007696:	2740      	movs	r7, #64	; 0x40
 8007698:	f001 feb0 	bl	80093fc <memset>
	dirb[XDIR_Type] = 0x85;
 800769c:	2185      	movs	r1, #133	; 0x85
	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
 800769e:	f04f 0c00 	mov.w	ip, #0
 80076a2:	2301      	movs	r3, #1
	dirb[XDIR_Type + SZDIRE] = 0xC0;
 80076a4:	22c0      	movs	r2, #192	; 0xc0
	dirb[XDIR_Type] = 0x85;
 80076a6:	f888 1000 	strb.w	r1, [r8]
	dirb[XDIR_Type + SZDIRE] = 0xC0;
 80076aa:	f1c8 0e04 	rsb	lr, r8, #4
 80076ae:	4661      	mov	r1, ip
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
 80076b0:	46e2      	mov	sl, ip
	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
 80076b2:	4699      	mov	r9, r3
	dirb[XDIR_Type + SZDIRE] = 0xC0;
 80076b4:	f888 2020 	strb.w	r2, [r8, #32]
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
 80076b8:	eb08 0007 	add.w	r0, r8, r7
 80076bc:	f06f 023e 	mvn.w	r2, #62	; 0x3e
 80076c0:	f808 2007 	strb.w	r2, [r8, r7]
 80076c4:	4602      	mov	r2, r0
 80076c6:	f880 a001 	strb.w	sl, [r0, #1]
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	f040 81b6 	bne.w	8007a3c <dir_register+0xa94>
 80076d0:	eb05 0b41 	add.w	fp, r5, r1, lsl #1
 80076d4:	4618      	mov	r0, r3
 80076d6:	461e      	mov	r6, r3
	*ptr++ = (BYTE)val; val >>= 8;
 80076d8:	eb0e 0702 	add.w	r7, lr, r2
	*ptr++ = (BYTE)val;
 80076dc:	70d0      	strb	r0, [r2, #3]
	*ptr++ = (BYTE)val; val >>= 8;
 80076de:	7096      	strb	r6, [r2, #2]
		} while ((i += 2) % SZDIRE != 0);
 80076e0:	3202      	adds	r2, #2
 80076e2:	06f8      	lsls	r0, r7, #27
 80076e4:	d1f1      	bne.n	80076ca <dir_register+0x722>
		nb++;
 80076e6:	f109 0901 	add.w	r9, r9, #1
	} while (lfn[nc]);	/* Fill next entry if any char follows */
 80076ea:	f8bb 6000 	ldrh.w	r6, [fp]
		nb++;
 80076ee:	fa5f f989 	uxtb.w	r9, r9
	} while (lfn[nc]);	/* Fill next entry if any char follows */
 80076f2:	2e00      	cmp	r6, #0
 80076f4:	d1e0      	bne.n	80076b8 <dir_register+0x710>
	dirb[XDIR_NumName] = nc;	/* Set name length */
 80076f6:	f888 c023 	strb.w	ip, [r8, #35]	; 0x23
	dirb[XDIR_NumSec] = nb;		/* Set block length */
 80076fa:	f888 9001 	strb.w	r9, [r8, #1]
	while ((chr = *name++) != 0) {
 80076fe:	f835 1b02 	ldrh.w	r1, [r5], #2
 8007702:	2900      	cmp	r1, #0
 8007704:	f000 81ce 	beq.w	8007aa4 <dir_register+0xafc>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 8007708:	4608      	mov	r0, r1
 800770a:	f001 fdd9 	bl	80092c0 <ff_wtoupper>
	while ((chr = *name++) != 0) {
 800770e:	f835 1b02 	ldrh.w	r1, [r5], #2
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 8007712:	b2c2      	uxtb	r2, r0
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 8007714:	0a03      	lsrs	r3, r0, #8
 8007716:	eb02 0256 	add.w	r2, r2, r6, lsr #1
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 800771a:	eb02 32c6 	add.w	r2, r2, r6, lsl #15
 800771e:	b292      	uxth	r2, r2
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 8007720:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8007724:	eb03 33c2 	add.w	r3, r3, r2, lsl #15
 8007728:	b29e      	uxth	r6, r3
	while ((chr = *name++) != 0) {
 800772a:	2900      	cmp	r1, #0
 800772c:	d1ec      	bne.n	8007708 <dir_register+0x760>
 800772e:	b2f3      	uxtb	r3, r6
 8007730:	0a31      	lsrs	r1, r6, #8
}
 8007732:	4620      	mov	r0, r4
	*ptr++ = (BYTE)val; val >>= 8;
 8007734:	f888 3024 	strb.w	r3, [r8, #36]	; 0x24
	*ptr++ = (BYTE)val;
 8007738:	f888 1025 	strb.w	r1, [r8, #37]	; 0x25
}
 800773c:	b023      	add	sp, #140	; 0x8c
 800773e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ns[i] = '~';
 8007742:	237e      	movs	r3, #126	; 0x7e
		ns[i--] = c;
 8007744:	2201      	movs	r2, #1
	ns[i] = '~';
 8007746:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800774a:	e5bc      	b.n	80072c6 <dir_register+0x31e>
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800774c:	2406      	movs	r4, #6
}
 800774e:	4620      	mov	r0, r4
 8007750:	b023      	add	sp, #140	; 0x8c
 8007752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8007756:	f10a 0a0c 	add.w	sl, sl, #12
 800775a:	4d39      	ldr	r5, [pc, #228]	; (8007840 <dir_register+0x898>)
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800775c:	4630      	mov	r0, r6
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800775e:	fba5 350a 	umull	r3, r5, r5, sl
 8007762:	08ad      	lsrs	r5, r5, #2
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8007764:	1c69      	adds	r1, r5, #1
 8007766:	f7ff fabb 	bl	8006ce0 <dir_alloc>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800776a:	4604      	mov	r4, r0
 800776c:	2800      	cmp	r0, #0
 800776e:	f47f ae36 	bne.w	80073de <dir_register+0x436>
 8007772:	f1ba 0f0c 	cmp.w	sl, #12
 8007776:	f43f ae03 	beq.w	8007380 <dir_register+0x3d8>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800777a:	6b31      	ldr	r1, [r6, #48]	; 0x30
 800777c:	4630      	mov	r0, r6
 800777e:	eba1 1145 	sub.w	r1, r1, r5, lsl #5
 8007782:	f7fe fc41 	bl	8006008 <dir_sdi>
		if (res == FR_OK) {
 8007786:	4604      	mov	r4, r0
 8007788:	2800      	cmp	r0, #0
 800778a:	f47f ae28 	bne.w	80073de <dir_register+0x436>
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800778e:	f896 2040 	ldrb.w	r2, [r6, #64]	; 0x40
	dir[LDIR_Type] = 0;
 8007792:	4680      	mov	r8, r0
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8007794:	f896 0041 	ldrb.w	r0, [r6, #65]	; 0x41
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8007798:	f64f 7afd 	movw	sl, #65533	; 0xfffd
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800779c:	01d3      	lsls	r3, r2, #7
 800779e:	f896 4042 	ldrb.w	r4, [r6, #66]	; 0x42
 80077a2:	f896 1043 	ldrb.w	r1, [r6, #67]	; 0x43
 80077a6:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
 80077aa:	9700      	str	r7, [sp, #0]
 80077ac:	181a      	adds	r2, r3, r0
 80077ae:	f896 0044 	ldrb.w	r0, [r6, #68]	; 0x44
 80077b2:	f3c2 0346 	ubfx	r3, r2, #1, #7
 80077b6:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 80077ba:	fa54 f283 	uxtab	r2, r4, r3
 80077be:	f896 4045 	ldrb.w	r4, [r6, #69]	; 0x45
 80077c2:	f3c2 0346 	ubfx	r3, r2, #1, #7
 80077c6:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 80077ca:	fa51 f283 	uxtab	r2, r1, r3
 80077ce:	f896 1046 	ldrb.w	r1, [r6, #70]	; 0x46
 80077d2:	f3c2 0346 	ubfx	r3, r2, #1, #7
 80077d6:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 80077da:	fa50 f283 	uxtab	r2, r0, r3
 80077de:	f896 0047 	ldrb.w	r0, [r6, #71]	; 0x47
 80077e2:	f3c2 0346 	ubfx	r3, r2, #1, #7
 80077e6:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 80077ea:	fa54 f283 	uxtab	r2, r4, r3
 80077ee:	f896 4048 	ldrb.w	r4, [r6, #72]	; 0x48
 80077f2:	f3c2 0346 	ubfx	r3, r2, #1, #7
 80077f6:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 80077fa:	fa51 f283 	uxtab	r2, r1, r3
 80077fe:	f896 1049 	ldrb.w	r1, [r6, #73]	; 0x49
 8007802:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8007806:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800780a:	fa50 f283 	uxtab	r2, r0, r3
 800780e:	f896 004a 	ldrb.w	r0, [r6, #74]	; 0x4a
 8007812:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8007816:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800781a:	fa54 f283 	uxtab	r2, r4, r3
 800781e:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8007822:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8007826:	fa51 f383 	uxtab	r3, r1, r3
 800782a:	f3c3 0246 	ubfx	r2, r3, #1, #7
 800782e:	ea42 13c3 	orr.w	r3, r2, r3, lsl #7
 8007832:	fa50 f083 	uxtab	r0, r0, r3
 8007836:	b2c3      	uxtb	r3, r0
 8007838:	461f      	mov	r7, r3
 800783a:	e036      	b.n	80078aa <dir_register+0x902>
 800783c:	88888889 	.word	0x88888889
 8007840:	4ec4ec4f 	.word	0x4ec4ec4f
	*ptr++ = (BYTE)val; val >>= 8;
 8007844:	22ff      	movs	r2, #255	; 0xff
 8007846:	70da      	strb	r2, [r3, #3]
	*ptr++ = (BYTE)val;
 8007848:	711a      	strb	r2, [r3, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 800784a:	22ff      	movs	r2, #255	; 0xff
 800784c:	715a      	strb	r2, [r3, #5]
	*ptr++ = (BYTE)val;
 800784e:	719a      	strb	r2, [r3, #6]
	*ptr++ = (BYTE)val; val >>= 8;
 8007850:	22ff      	movs	r2, #255	; 0xff
 8007852:	71da      	strb	r2, [r3, #7]
	*ptr++ = (BYTE)val;
 8007854:	721a      	strb	r2, [r3, #8]
	*ptr++ = (BYTE)val; val >>= 8;
 8007856:	22ff      	movs	r2, #255	; 0xff
 8007858:	725a      	strb	r2, [r3, #9]
	*ptr++ = (BYTE)val;
 800785a:	729a      	strb	r2, [r3, #10]
	*ptr++ = (BYTE)val; val >>= 8;
 800785c:	22ff      	movs	r2, #255	; 0xff
 800785e:	739a      	strb	r2, [r3, #14]
	*ptr++ = (BYTE)val;
 8007860:	73da      	strb	r2, [r3, #15]
	*ptr++ = (BYTE)val; val >>= 8;
 8007862:	22ff      	movs	r2, #255	; 0xff
 8007864:	741a      	strb	r2, [r3, #16]
	*ptr++ = (BYTE)val;
 8007866:	745a      	strb	r2, [r3, #17]
	*ptr++ = (BYTE)val; val >>= 8;
 8007868:	22ff      	movs	r2, #255	; 0xff
 800786a:	749a      	strb	r2, [r3, #18]
	*ptr++ = (BYTE)val;
 800786c:	74da      	strb	r2, [r3, #19]
	*ptr++ = (BYTE)val; val >>= 8;
 800786e:	22ff      	movs	r2, #255	; 0xff
 8007870:	751a      	strb	r2, [r3, #20]
	*ptr++ = (BYTE)val;
 8007872:	755a      	strb	r2, [r3, #21]
	*ptr++ = (BYTE)val; val >>= 8;
 8007874:	22ff      	movs	r2, #255	; 0xff
 8007876:	759a      	strb	r2, [r3, #22]
	*ptr++ = (BYTE)val;
 8007878:	75da      	strb	r2, [r3, #23]
	*ptr++ = (BYTE)val; val >>= 8;
 800787a:	22ff      	movs	r2, #255	; 0xff
 800787c:	761a      	strb	r2, [r3, #24]
	*ptr++ = (BYTE)val;
 800787e:	765a      	strb	r2, [r3, #25]
	*ptr++ = (BYTE)val; val >>= 8;
 8007880:	22ff      	movs	r2, #255	; 0xff
 8007882:	771a      	strb	r2, [r3, #28]
	*ptr++ = (BYTE)val;
 8007884:	775a      	strb	r2, [r3, #29]
	*ptr++ = (BYTE)val; val >>= 8;
 8007886:	22ff      	movs	r2, #255	; 0xff
 8007888:	779a      	strb	r2, [r3, #30]
	*ptr++ = (BYTE)val;
 800788a:	77da      	strb	r2, [r3, #31]
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800788c:	f040 0040 	orr.w	r0, r0, #64	; 0x40
				fs->wflag = 1;
 8007890:	2201      	movs	r2, #1
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8007892:	7018      	strb	r0, [r3, #0]
				res = dir_next(dp, 0);	/* Next entry */
 8007894:	4630      	mov	r0, r6
				fs->wflag = 1;
 8007896:	f889 2003 	strb.w	r2, [r9, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800789a:	f7fd fb3f 	bl	8004f1c <dir_next.constprop.0>
			} while (res == FR_OK && --nent);
 800789e:	2800      	cmp	r0, #0
 80078a0:	f040 80e3 	bne.w	8007a6a <dir_register+0xac2>
 80078a4:	3d01      	subs	r5, #1
 80078a6:	f000 80ff 	beq.w	8007aa8 <dir_register+0xb00>
				res = move_window(fs, dp->sect);
 80078aa:	6bb1      	ldr	r1, [r6, #56]	; 0x38
	if (sector != fs->winsect) {	/* Window offset changed? */
 80078ac:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 80078b0:	4299      	cmp	r1, r3
 80078b2:	d005      	beq.n	80078c0 <dir_register+0x918>
 80078b4:	4648      	mov	r0, r9
 80078b6:	f7fd f953 	bl	8004b60 <move_window.part.0>
				if (res != FR_OK) break;
 80078ba:	2800      	cmp	r0, #0
 80078bc:	f040 80d5 	bne.w	8007a6a <dir_register+0xac2>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80078c0:	b2e8      	uxtb	r0, r5
 80078c2:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80078c6:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80078c8:	f04f 0c0f 	mov.w	ip, #15
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80078cc:	1e42      	subs	r2, r0, #1
	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80078ce:	735f      	strb	r7, [r3, #13]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80078d0:	eb02 0442 	add.w	r4, r2, r2, lsl #1
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80078d4:	f883 c00b 	strb.w	ip, [r3, #11]
	dir[LDIR_Type] = 0;
 80078d8:	f883 800c 	strb.w	r8, [r3, #12]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80078dc:	eb02 0284 	add.w	r2, r2, r4, lsl #2
	*ptr++ = (BYTE)val; val >>= 8;
 80078e0:	f883 801a 	strb.w	r8, [r3, #26]
	*ptr++ = (BYTE)val;
 80078e4:	f883 801b 	strb.w	r8, [r3, #27]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80078e8:	f831 c012 	ldrh.w	ip, [r1, r2, lsl #1]
 80078ec:	ea4f 0e42 	mov.w	lr, r2, lsl #1
 80078f0:	f10c 34ff 	add.w	r4, ip, #4294967295
	*ptr++ = (BYTE)val; val >>= 8;
 80078f4:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 80078f8:	f883 c001 	strb.w	ip, [r3, #1]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80078fc:	b2a4      	uxth	r4, r4
	*ptr++ = (BYTE)val;
 80078fe:	f883 b002 	strb.w	fp, [r3, #2]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8007902:	4554      	cmp	r4, sl
 8007904:	d89e      	bhi.n	8007844 <dir_register+0x89c>
 8007906:	3201      	adds	r2, #1
 8007908:	f831 4012 	ldrh.w	r4, [r1, r2, lsl #1]
 800790c:	0052      	lsls	r2, r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
 800790e:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 8007912:	70dc      	strb	r4, [r3, #3]
	*ptr++ = (BYTE)val;
 8007914:	f883 c004 	strb.w	ip, [r3, #4]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8007918:	2c00      	cmp	r4, #0
 800791a:	d096      	beq.n	800784a <dir_register+0x8a2>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800791c:	f64f 7cff 	movw	ip, #65535	; 0xffff
 8007920:	4564      	cmp	r4, ip
 8007922:	d092      	beq.n	800784a <dir_register+0x8a2>
 8007924:	440a      	add	r2, r1
 8007926:	8854      	ldrh	r4, [r2, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8007928:	ea4f 2b14 	mov.w	fp, r4, lsr #8
 800792c:	715c      	strb	r4, [r3, #5]
	*ptr++ = (BYTE)val;
 800792e:	f883 b006 	strb.w	fp, [r3, #6]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8007932:	2c00      	cmp	r4, #0
 8007934:	d08c      	beq.n	8007850 <dir_register+0x8a8>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8007936:	4564      	cmp	r4, ip
 8007938:	d08a      	beq.n	8007850 <dir_register+0x8a8>
 800793a:	8894      	ldrh	r4, [r2, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 800793c:	ea4f 2b14 	mov.w	fp, r4, lsr #8
 8007940:	71dc      	strb	r4, [r3, #7]
	*ptr++ = (BYTE)val;
 8007942:	f883 b008 	strb.w	fp, [r3, #8]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8007946:	2c00      	cmp	r4, #0
 8007948:	d085      	beq.n	8007856 <dir_register+0x8ae>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800794a:	4564      	cmp	r4, ip
 800794c:	d083      	beq.n	8007856 <dir_register+0x8ae>
 800794e:	88d4      	ldrh	r4, [r2, #6]
	*ptr++ = (BYTE)val; val >>= 8;
 8007950:	ea4f 2b14 	mov.w	fp, r4, lsr #8
 8007954:	725c      	strb	r4, [r3, #9]
	*ptr++ = (BYTE)val;
 8007956:	f883 b00a 	strb.w	fp, [r3, #10]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800795a:	2c00      	cmp	r4, #0
 800795c:	f43f af7e 	beq.w	800785c <dir_register+0x8b4>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8007960:	4564      	cmp	r4, ip
 8007962:	f43f af7b 	beq.w	800785c <dir_register+0x8b4>
 8007966:	8914      	ldrh	r4, [r2, #8]
	*ptr++ = (BYTE)val; val >>= 8;
 8007968:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 800796c:	739c      	strb	r4, [r3, #14]
	*ptr++ = (BYTE)val;
 800796e:	f883 c00f 	strb.w	ip, [r3, #15]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8007972:	2c00      	cmp	r4, #0
 8007974:	f43f af75 	beq.w	8007862 <dir_register+0x8ba>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8007978:	f64f 7cff 	movw	ip, #65535	; 0xffff
 800797c:	4564      	cmp	r4, ip
 800797e:	f43f af70 	beq.w	8007862 <dir_register+0x8ba>
 8007982:	8954      	ldrh	r4, [r2, #10]
	*ptr++ = (BYTE)val; val >>= 8;
 8007984:	ea4f 2b14 	mov.w	fp, r4, lsr #8
 8007988:	741c      	strb	r4, [r3, #16]
	*ptr++ = (BYTE)val;
 800798a:	f883 b011 	strb.w	fp, [r3, #17]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800798e:	2c00      	cmp	r4, #0
 8007990:	f43f af6a 	beq.w	8007868 <dir_register+0x8c0>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8007994:	4564      	cmp	r4, ip
 8007996:	f43f af67 	beq.w	8007868 <dir_register+0x8c0>
 800799a:	8994      	ldrh	r4, [r2, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 800799c:	ea4f 2b14 	mov.w	fp, r4, lsr #8
 80079a0:	749c      	strb	r4, [r3, #18]
	*ptr++ = (BYTE)val;
 80079a2:	f883 b013 	strb.w	fp, [r3, #19]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80079a6:	2c00      	cmp	r4, #0
 80079a8:	f43f af61 	beq.w	800786e <dir_register+0x8c6>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80079ac:	4564      	cmp	r4, ip
 80079ae:	f43f af5e 	beq.w	800786e <dir_register+0x8c6>
 80079b2:	89d4      	ldrh	r4, [r2, #14]
	*ptr++ = (BYTE)val; val >>= 8;
 80079b4:	ea4f 2b14 	mov.w	fp, r4, lsr #8
 80079b8:	751c      	strb	r4, [r3, #20]
	*ptr++ = (BYTE)val;
 80079ba:	f883 b015 	strb.w	fp, [r3, #21]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80079be:	2c00      	cmp	r4, #0
 80079c0:	f43f af58 	beq.w	8007874 <dir_register+0x8cc>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80079c4:	4564      	cmp	r4, ip
 80079c6:	f43f af55 	beq.w	8007874 <dir_register+0x8cc>
 80079ca:	8a14      	ldrh	r4, [r2, #16]
	*ptr++ = (BYTE)val; val >>= 8;
 80079cc:	ea4f 2b14 	mov.w	fp, r4, lsr #8
 80079d0:	759c      	strb	r4, [r3, #22]
	*ptr++ = (BYTE)val;
 80079d2:	f883 b017 	strb.w	fp, [r3, #23]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80079d6:	2c00      	cmp	r4, #0
 80079d8:	f43f af4f 	beq.w	800787a <dir_register+0x8d2>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80079dc:	4564      	cmp	r4, ip
 80079de:	f43f af4c 	beq.w	800787a <dir_register+0x8d2>
 80079e2:	8a54      	ldrh	r4, [r2, #18]
	*ptr++ = (BYTE)val; val >>= 8;
 80079e4:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 80079e8:	761c      	strb	r4, [r3, #24]
	*ptr++ = (BYTE)val;
 80079ea:	f883 c019 	strb.w	ip, [r3, #25]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80079ee:	2c00      	cmp	r4, #0
 80079f0:	f43f af46 	beq.w	8007880 <dir_register+0x8d8>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80079f4:	f64f 7bff 	movw	fp, #65535	; 0xffff
 80079f8:	455c      	cmp	r4, fp
 80079fa:	f43f af41 	beq.w	8007880 <dir_register+0x8d8>
 80079fe:	8a94      	ldrh	r4, [r2, #20]
	*ptr++ = (BYTE)val; val >>= 8;
 8007a00:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 8007a04:	771c      	strb	r4, [r3, #28]
	*ptr++ = (BYTE)val;
 8007a06:	f883 c01d 	strb.w	ip, [r3, #29]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8007a0a:	2c00      	cmp	r4, #0
 8007a0c:	f43f af3b 	beq.w	8007886 <dir_register+0x8de>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8007a10:	455c      	cmp	r4, fp
 8007a12:	f43f af38 	beq.w	8007886 <dir_register+0x8de>
 8007a16:	f8b2 c016 	ldrh.w	ip, [r2, #22]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8007a1a:	f10c 32ff 	add.w	r2, ip, #4294967295
	*ptr++ = (BYTE)val; val >>= 8;
 8007a1e:	ea4f 241c 	mov.w	r4, ip, lsr #8
 8007a22:	f883 c01e 	strb.w	ip, [r3, #30]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8007a26:	b292      	uxth	r2, r2
	*ptr++ = (BYTE)val;
 8007a28:	77dc      	strb	r4, [r3, #31]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8007a2a:	4552      	cmp	r2, sl
 8007a2c:	f63f af2e 	bhi.w	800788c <dir_register+0x8e4>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8007a30:	4471      	add	r1, lr
 8007a32:	8b4a      	ldrh	r2, [r1, #26]
 8007a34:	2a00      	cmp	r2, #0
 8007a36:	f47f af2b 	bne.w	8007890 <dir_register+0x8e8>
 8007a3a:	e727      	b.n	800788c <dir_register+0x8e4>
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
 8007a3c:	f835 3011 	ldrh.w	r3, [r5, r1, lsl #1]
 8007a40:	f10c 0701 	add.w	r7, ip, #1
 8007a44:	eb05 0b41 	add.w	fp, r5, r1, lsl #1
 8007a48:	4618      	mov	r0, r3
 8007a4a:	461e      	mov	r6, r3
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	f43f ae43 	beq.w	80076d8 <dir_register+0x730>
 8007a52:	b2f9      	uxtb	r1, r7
 8007a54:	b2de      	uxtb	r6, r3
 8007a56:	468c      	mov	ip, r1
 8007a58:	eb05 0b41 	add.w	fp, r5, r1, lsl #1
 8007a5c:	0a18      	lsrs	r0, r3, #8
 8007a5e:	e63b      	b.n	80076d8 <dir_register+0x730>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8007a60:	469a      	mov	sl, r3
 8007a62:	f7ff baba 	b.w	8006fda <dir_register+0x32>
	FRESULT res = FR_INT_ERR;
 8007a66:	2402      	movs	r4, #2
 8007a68:	e4b9      	b.n	80073de <dir_register+0x436>
 8007a6a:	4604      	mov	r4, r0
 8007a6c:	e4b7      	b.n	80073de <dir_register+0x436>
			*d++ = *s++;
 8007a6e:	f896 2040 	ldrb.w	r2, [r6, #64]	; 0x40
 8007a72:	701a      	strb	r2, [r3, #0]
 8007a74:	f896 2041 	ldrb.w	r2, [r6, #65]	; 0x41
 8007a78:	705a      	strb	r2, [r3, #1]
 8007a7a:	f896 2042 	ldrb.w	r2, [r6, #66]	; 0x42
 8007a7e:	709a      	strb	r2, [r3, #2]
 8007a80:	f896 2043 	ldrb.w	r2, [r6, #67]	; 0x43
 8007a84:	70da      	strb	r2, [r3, #3]
 8007a86:	f896 2044 	ldrb.w	r2, [r6, #68]	; 0x44
 8007a8a:	711a      	strb	r2, [r3, #4]
 8007a8c:	f896 2045 	ldrb.w	r2, [r6, #69]	; 0x45
 8007a90:	715a      	strb	r2, [r3, #5]
 8007a92:	f896 2046 	ldrb.w	r2, [r6, #70]	; 0x46
 8007a96:	719a      	strb	r2, [r3, #6]
 8007a98:	f896 2047 	ldrb.w	r2, [r6, #71]	; 0x47
 8007a9c:	71da      	strb	r2, [r3, #7]
 8007a9e:	e48b      	b.n	80073b8 <dir_register+0x410>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8007aa0:	2407      	movs	r4, #7
 8007aa2:	e49c      	b.n	80073de <dir_register+0x436>
	while ((chr = *name++) != 0) {
 8007aa4:	460b      	mov	r3, r1
 8007aa6:	e644      	b.n	8007732 <dir_register+0x78a>
 8007aa8:	9f00      	ldr	r7, [sp, #0]
 8007aaa:	e469      	b.n	8007380 <dir_register+0x3d8>
 8007aac:	4604      	mov	r4, r0
 8007aae:	e496      	b.n	80073de <dir_register+0x436>

08007ab0 <remove_chain>:
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007ab0:	2901      	cmp	r1, #1
{
 8007ab2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	FATFS *fs = obj->fs;
 8007ab6:	6805      	ldr	r5, [r0, #0]
{
 8007ab8:	b083      	sub	sp, #12
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007aba:	d91b      	bls.n	8007af4 <remove_chain+0x44>
 8007abc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8007abe:	460c      	mov	r4, r1
 8007ac0:	428b      	cmp	r3, r1
 8007ac2:	d917      	bls.n	8007af4 <remove_chain+0x44>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007ac4:	4607      	mov	r7, r0
 8007ac6:	4690      	mov	r8, r2
 8007ac8:	b9c2      	cbnz	r2, 8007afc <remove_chain+0x4c>
 8007aca:	462e      	mov	r6, r5
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007acc:	46a3      	mov	fp, r4
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 8007ace:	f04f 0901 	mov.w	r9, #1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007ad2:	429c      	cmp	r4, r3
 8007ad4:	d20e      	bcs.n	8007af4 <remove_chain+0x44>
		switch (fs->fs_type) {
 8007ad6:	7833      	ldrb	r3, [r6, #0]
 8007ad8:	3b01      	subs	r3, #1
 8007ada:	2b03      	cmp	r3, #3
 8007adc:	d80a      	bhi.n	8007af4 <remove_chain+0x44>
 8007ade:	e8df f003 	tbb	[pc, r3]
 8007ae2:	6f8c      	.short	0x6f8c
 8007ae4:	0221      	.short	0x0221
			if (obj->objsize) {
 8007ae6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007aea:	e9cd 2300 	strd	r2, r3, [sp]
 8007aee:	4313      	orrs	r3, r2
 8007af0:	f040 8127 	bne.w	8007d42 <remove_chain+0x292>
		switch (fs->fs_type) {
 8007af4:	2002      	movs	r0, #2
}
 8007af6:	b003      	add	sp, #12
 8007af8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007afc:	782a      	ldrb	r2, [r5, #0]
 8007afe:	2a04      	cmp	r2, #4
 8007b00:	f000 80ba 	beq.w	8007c78 <remove_chain+0x1c8>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007b04:	4543      	cmp	r3, r8
 8007b06:	d9f5      	bls.n	8007af4 <remove_chain+0x44>
 8007b08:	f1b8 0f01 	cmp.w	r8, #1
 8007b0c:	d9f2      	bls.n	8007af4 <remove_chain+0x44>
 8007b0e:	f04f 32ff 	mov.w	r2, #4294967295
 8007b12:	4641      	mov	r1, r8
 8007b14:	4628      	mov	r0, r5
 8007b16:	f7fd f85d 	bl	8004bd4 <put_fat.part.0>
		if (res != FR_OK) return res;
 8007b1a:	2800      	cmp	r0, #0
 8007b1c:	d1eb      	bne.n	8007af6 <remove_chain+0x46>
 8007b1e:	683e      	ldr	r6, [r7, #0]
 8007b20:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8007b22:	e7d3      	b.n	8007acc <remove_chain+0x1c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007b24:	89b0      	ldrh	r0, [r6, #12]
 8007b26:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 8007b28:	0881      	lsrs	r1, r0, #2
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007b2a:	6cb3      	ldr	r3, [r6, #72]	; 0x48
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007b2c:	fbb4 f1f1 	udiv	r1, r4, r1
 8007b30:	4411      	add	r1, r2
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007b32:	4299      	cmp	r1, r3
 8007b34:	d006      	beq.n	8007b44 <remove_chain+0x94>
 8007b36:	4630      	mov	r0, r6
 8007b38:	f7fd f812 	bl	8004b60 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007b3c:	2800      	cmp	r0, #0
 8007b3e:	f040 80fe 	bne.w	8007d3e <remove_chain+0x28e>
 8007b42:	89b0      	ldrh	r0, [r6, #12]
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007b44:	00a2      	lsls	r2, r4, #2
 8007b46:	364c      	adds	r6, #76	; 0x4c
 8007b48:	fbb2 f3f0 	udiv	r3, r2, r0
 8007b4c:	fb00 2013 	mls	r0, r0, r3, r2
 8007b50:	1832      	adds	r2, r6, r0
	rv = rv << 8 | ptr[0];
 8007b52:	f816 a000 	ldrb.w	sl, [r6, r0]
	rv = rv << 8 | ptr[2];
 8007b56:	8851      	ldrh	r1, [r2, #2]
	rv = rv << 8 | ptr[1];
 8007b58:	7853      	ldrb	r3, [r2, #1]
 8007b5a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	rv = rv << 8 | ptr[0];
 8007b5e:	ea4a 2a03 	orr.w	sl, sl, r3, lsl #8
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007b62:	f02a 4a70 	bic.w	sl, sl, #4026531840	; 0xf0000000
		if (nxt == 0) break;				/* Empty cluster? */
 8007b66:	f1ba 0f00 	cmp.w	sl, #0
 8007b6a:	f000 811c 	beq.w	8007da6 <remove_chain+0x2f6>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007b6e:	f1ba 0f01 	cmp.w	sl, #1
 8007b72:	d0bf      	beq.n	8007af4 <remove_chain+0x44>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 8007b74:	782b      	ldrb	r3, [r5, #0]
 8007b76:	2b04      	cmp	r3, #4
 8007b78:	d009      	beq.n	8007b8e <remove_chain+0xde>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007b7a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8007b7c:	42a3      	cmp	r3, r4
 8007b7e:	d9b9      	bls.n	8007af4 <remove_chain+0x44>
 8007b80:	2200      	movs	r2, #0
 8007b82:	4621      	mov	r1, r4
 8007b84:	4628      	mov	r0, r5
 8007b86:	f7fd f825 	bl	8004bd4 <put_fat.part.0>
			if (res != FR_OK) return res;
 8007b8a:	2800      	cmp	r0, #0
 8007b8c:	d1b3      	bne.n	8007af6 <remove_chain+0x46>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8007b8e:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8007b90:	69eb      	ldr	r3, [r5, #28]
 8007b92:	1e91      	subs	r1, r2, #2
 8007b94:	428b      	cmp	r3, r1
 8007b96:	d205      	bcs.n	8007ba4 <remove_chain+0xf4>
			fs->fsi_flag |= 1;
 8007b98:	7929      	ldrb	r1, [r5, #4]
			fs->free_clst++;
 8007b9a:	3301      	adds	r3, #1
			fs->fsi_flag |= 1;
 8007b9c:	f041 0101 	orr.w	r1, r1, #1
			fs->free_clst++;
 8007ba0:	61eb      	str	r3, [r5, #28]
			fs->fsi_flag |= 1;
 8007ba2:	7129      	strb	r1, [r5, #4]
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 8007ba4:	3401      	adds	r4, #1
 8007ba6:	4554      	cmp	r4, sl
 8007ba8:	d003      	beq.n	8007bb2 <remove_chain+0x102>
			if (fs->fs_type == FS_EXFAT) {
 8007baa:	782b      	ldrb	r3, [r5, #0]
 8007bac:	2b04      	cmp	r3, #4
 8007bae:	d068      	beq.n	8007c82 <remove_chain+0x1d2>
 8007bb0:	46d3      	mov	fp, sl
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007bb2:	4592      	cmp	sl, r2
 8007bb4:	f080 80f7 	bcs.w	8007da6 <remove_chain+0x2f6>
	FATFS *fs = obj->fs;
 8007bb8:	683e      	ldr	r6, [r7, #0]
 8007bba:	4654      	mov	r4, sl
 8007bbc:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8007bbe:	e788      	b.n	8007ad2 <remove_chain+0x22>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007bc0:	89b0      	ldrh	r0, [r6, #12]
 8007bc2:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 8007bc4:	0841      	lsrs	r1, r0, #1
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007bc6:	6cb3      	ldr	r3, [r6, #72]	; 0x48
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007bc8:	fbb4 f1f1 	udiv	r1, r4, r1
 8007bcc:	4411      	add	r1, r2
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007bce:	4299      	cmp	r1, r3
 8007bd0:	d006      	beq.n	8007be0 <remove_chain+0x130>
 8007bd2:	4630      	mov	r0, r6
 8007bd4:	f7fc ffc4 	bl	8004b60 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007bd8:	2800      	cmp	r0, #0
 8007bda:	f040 80b0 	bne.w	8007d3e <remove_chain+0x28e>
 8007bde:	89b0      	ldrh	r0, [r6, #12]
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007be0:	0062      	lsls	r2, r4, #1
 8007be2:	364c      	adds	r6, #76	; 0x4c
 8007be4:	fbb2 f3f0 	udiv	r3, r2, r0
 8007be8:	fb00 2013 	mls	r0, r0, r3, r2
 8007bec:	1833      	adds	r3, r6, r0
	rv = rv << 8 | ptr[0];
 8007bee:	f816 a000 	ldrb.w	sl, [r6, r0]
 8007bf2:	785b      	ldrb	r3, [r3, #1]
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007bf4:	ea4a 2a03 	orr.w	sl, sl, r3, lsl #8
			break;
 8007bf8:	e7b5      	b.n	8007b66 <remove_chain+0xb6>
			bc = (UINT)clst; bc += bc / 2;
 8007bfa:	eb04 0254 	add.w	r2, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007bfe:	89b0      	ldrh	r0, [r6, #12]
 8007c00:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007c02:	f8d6 c048 	ldr.w	ip, [r6, #72]	; 0x48
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007c06:	fbb2 f3f0 	udiv	r3, r2, r0
 8007c0a:	eb03 0e01 	add.w	lr, r3, r1
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007c0e:	45e6      	cmp	lr, ip
 8007c10:	d00e      	beq.n	8007c30 <remove_chain+0x180>
 8007c12:	4671      	mov	r1, lr
 8007c14:	4630      	mov	r0, r6
 8007c16:	9200      	str	r2, [sp, #0]
 8007c18:	f7fc ffa2 	bl	8004b60 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007c1c:	9a00      	ldr	r2, [sp, #0]
 8007c1e:	2800      	cmp	r0, #0
 8007c20:	f040 808d 	bne.w	8007d3e <remove_chain+0x28e>
 8007c24:	89b0      	ldrh	r0, [r6, #12]
 8007c26:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
 8007c28:	f8d6 c048 	ldr.w	ip, [r6, #72]	; 0x48
 8007c2c:	fbb2 f3f0 	udiv	r3, r2, r0
			wc = fs->win[bc++ % SS(fs)];
 8007c30:	f102 0a01 	add.w	sl, r2, #1
 8007c34:	fb00 2313 	mls	r3, r0, r3, r2
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007c38:	fbba fef0 	udiv	lr, sl, r0
 8007c3c:	4471      	add	r1, lr
			wc = fs->win[bc++ % SS(fs)];
 8007c3e:	4433      	add	r3, r6
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007c40:	4561      	cmp	r1, ip
			wc = fs->win[bc++ % SS(fs)];
 8007c42:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007c46:	d009      	beq.n	8007c5c <remove_chain+0x1ac>
 8007c48:	4630      	mov	r0, r6
 8007c4a:	9300      	str	r3, [sp, #0]
 8007c4c:	f7fc ff88 	bl	8004b60 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007c50:	2800      	cmp	r0, #0
 8007c52:	d174      	bne.n	8007d3e <remove_chain+0x28e>
 8007c54:	89b0      	ldrh	r0, [r6, #12]
 8007c56:	9b00      	ldr	r3, [sp, #0]
 8007c58:	fbba fef0 	udiv	lr, sl, r0
			wc |= fs->win[bc % SS(fs)] << 8;
 8007c5c:	fb00 aa1e 	mls	sl, r0, lr, sl
 8007c60:	4456      	add	r6, sl
 8007c62:	f896 a04c 	ldrb.w	sl, [r6, #76]	; 0x4c
 8007c66:	ea43 2a0a 	orr.w	sl, r3, sl, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007c6a:	07e3      	lsls	r3, r4, #31
 8007c6c:	bf4c      	ite	mi
 8007c6e:	ea4f 1a1a 	movmi.w	sl, sl, lsr #4
 8007c72:	f3ca 0a0b 	ubfxpl	sl, sl, #0, #12
 8007c76:	e776      	b.n	8007b66 <remove_chain+0xb6>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007c78:	79c2      	ldrb	r2, [r0, #7]
 8007c7a:	2a02      	cmp	r2, #2
 8007c7c:	f47f af42 	bne.w	8007b04 <remove_chain+0x54>
 8007c80:	e723      	b.n	8007aca <remove_chain+0x1a>
	clst -= 2;	/* The first bit corresponds to cluster #2 */
 8007c82:	f1ab 0602 	sub.w	r6, fp, #2
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 8007c86:	89aa      	ldrh	r2, [r5, #12]
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 8007c88:	eba4 040b 	sub.w	r4, r4, fp
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 8007c8c:	6c69      	ldr	r1, [r5, #68]	; 0x44
 8007c8e:	ea4f 0bd6 	mov.w	fp, r6, lsr #3
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 8007c92:	f006 0607 	and.w	r6, r6, #7
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 8007c96:	fbbb f3f2 	udiv	r3, fp, r2
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 8007c9a:	fa09 f606 	lsl.w	r6, r9, r6
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 8007c9e:	fb02 bb13 	mls	fp, r2, r3, fp
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 8007ca2:	4419      	add	r1, r3
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 8007ca4:	b2f6      	uxtb	r6, r6
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007ca6:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8007ca8:	4299      	cmp	r1, r3
 8007caa:	d006      	beq.n	8007cba <remove_chain+0x20a>
 8007cac:	4628      	mov	r0, r5
 8007cae:	9100      	str	r1, [sp, #0]
 8007cb0:	f7fc ff56 	bl	8004b60 <move_window.part.0>
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 8007cb4:	9900      	ldr	r1, [sp, #0]
 8007cb6:	2800      	cmp	r0, #0
 8007cb8:	d141      	bne.n	8007d3e <remove_chain+0x28e>
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 8007cba:	eb05 020b 	add.w	r2, r5, fp
 8007cbe:	f892 304c 	ldrb.w	r3, [r2, #76]	; 0x4c
 8007cc2:	4233      	tst	r3, r6
 8007cc4:	f43f af16 	beq.w	8007af4 <remove_chain+0x44>
				fs->win[i] ^= bm;	/* Flip the bit */
 8007cc8:	4073      	eors	r3, r6
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 8007cca:	3c01      	subs	r4, #1
				fs->win[i] ^= bm;	/* Flip the bit */
 8007ccc:	f882 304c 	strb.w	r3, [r2, #76]	; 0x4c
				fs->wflag = 1;
 8007cd0:	f885 9003 	strb.w	r9, [r5, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 8007cd4:	d106      	bne.n	8007ce4 <remove_chain+0x234>
 8007cd6:	e06b      	b.n	8007db0 <remove_chain+0x300>
 8007cd8:	3c01      	subs	r4, #1
				fs->win[i] ^= bm;	/* Flip the bit */
 8007cda:	f882 304c 	strb.w	r3, [r2, #76]	; 0x4c
				fs->wflag = 1;
 8007cde:	f885 9003 	strb.w	r9, [r5, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 8007ce2:	d065      	beq.n	8007db0 <remove_chain+0x300>
			} while (bm <<= 1);		/* Next bit */
 8007ce4:	0076      	lsls	r6, r6, #1
 8007ce6:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
 8007cea:	d109      	bne.n	8007d00 <remove_chain+0x250>
		} while (++i < SS(fs));		/* Next byte */
 8007cec:	f10b 0b01 	add.w	fp, fp, #1
 8007cf0:	89ab      	ldrh	r3, [r5, #12]
 8007cf2:	459b      	cmp	fp, r3
 8007cf4:	eb05 020b 	add.w	r2, r5, fp
 8007cf8:	d25d      	bcs.n	8007db6 <remove_chain+0x306>
 8007cfa:	f892 304c 	ldrb.w	r3, [r2, #76]	; 0x4c
			bm = 1;
 8007cfe:	2601      	movs	r6, #1
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 8007d00:	421e      	tst	r6, r3
				fs->win[i] ^= bm;	/* Flip the bit */
 8007d02:	ea83 0306 	eor.w	r3, r3, r6
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 8007d06:	d1e7      	bne.n	8007cd8 <remove_chain+0x228>
 8007d08:	e6f4      	b.n	8007af4 <remove_chain+0x44>
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 8007d0a:	9b00      	ldr	r3, [sp, #0]
 8007d0c:	9901      	ldr	r1, [sp, #4]
 8007d0e:	f113 30ff 	adds.w	r0, r3, #4294967295
 8007d12:	f04f 0300 	mov.w	r3, #0
 8007d16:	f141 31ff 	adc.w	r1, r1, #4294967295
 8007d1a:	f7f8 fa7d 	bl	8000218 <__aeabi_uldivmod>
 8007d1e:	8973      	ldrh	r3, [r6, #10]
 8007d20:	fbb0 f0f3 	udiv	r0, r0, r3
					if (cofs <= clen) {
 8007d24:	4582      	cmp	sl, r0
 8007d26:	f63f aee5 	bhi.w	8007af4 <remove_chain+0x44>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 8007d2a:	d035      	beq.n	8007d98 <remove_chain+0x2e8>
					val = clst + 1; 	/* Generate the value */
 8007d2c:	f104 0a01 	add.w	sl, r4, #1
		if (nxt == 0) break;				/* Empty cluster? */
 8007d30:	f1ba 0f00 	cmp.w	sl, #0
 8007d34:	d037      	beq.n	8007da6 <remove_chain+0x2f6>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8007d36:	f1ba 3fff 	cmp.w	sl, #4294967295
 8007d3a:	f47f af1b 	bne.w	8007b74 <remove_chain+0xc4>
 8007d3e:	2001      	movs	r0, #1
 8007d40:	e6d9      	b.n	8007af6 <remove_chain+0x46>
				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 8007d42:	79fb      	ldrb	r3, [r7, #7]
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 8007d44:	68ba      	ldr	r2, [r7, #8]
				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 8007d46:	2b02      	cmp	r3, #2
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 8007d48:	eba4 0a02 	sub.w	sl, r4, r2
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 8007d4c:	89b2      	ldrh	r2, [r6, #12]
				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 8007d4e:	d0dc      	beq.n	8007d0a <remove_chain+0x25a>
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 8007d50:	2b03      	cmp	r3, #3
 8007d52:	d03b      	beq.n	8007dcc <remove_chain+0x31c>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 8007d54:	69fb      	ldr	r3, [r7, #28]
 8007d56:	b9fb      	cbnz	r3, 8007d98 <remove_chain+0x2e8>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007d58:	0891      	lsrs	r1, r2, #2
 8007d5a:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007d5c:	6cb3      	ldr	r3, [r6, #72]	; 0x48
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007d5e:	fbb4 f1f1 	udiv	r1, r4, r1
 8007d62:	4401      	add	r1, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007d64:	4299      	cmp	r1, r3
 8007d66:	d005      	beq.n	8007d74 <remove_chain+0x2c4>
 8007d68:	4630      	mov	r0, r6
 8007d6a:	f7fc fef9 	bl	8004b60 <move_window.part.0>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007d6e:	2800      	cmp	r0, #0
 8007d70:	d1e5      	bne.n	8007d3e <remove_chain+0x28e>
 8007d72:	89b2      	ldrh	r2, [r6, #12]
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 8007d74:	00a1      	lsls	r1, r4, #2
 8007d76:	364c      	adds	r6, #76	; 0x4c
 8007d78:	fbb1 f3f2 	udiv	r3, r1, r2
 8007d7c:	fb02 1213 	mls	r2, r2, r3, r1
 8007d80:	18b3      	adds	r3, r6, r2
	rv = rv << 8 | ptr[0];
 8007d82:	f816 a002 	ldrb.w	sl, [r6, r2]
	rv = rv << 8 | ptr[2];
 8007d86:	885a      	ldrh	r2, [r3, #2]
	rv = rv << 8 | ptr[1];
 8007d88:	785b      	ldrb	r3, [r3, #1]
 8007d8a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 8007d8e:	ea4a 2a03 	orr.w	sl, sl, r3, lsl #8
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 8007d92:	f02a 4a00 	bic.w	sl, sl, #2147483648	; 0x80000000
 8007d96:	e6e6      	b.n	8007b66 <remove_chain+0xb6>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 8007d98:	782b      	ldrb	r3, [r5, #0]
 8007d9a:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8007d9e:	2b04      	cmp	r3, #4
 8007da0:	f47f aeeb 	bne.w	8007b7a <remove_chain+0xca>
 8007da4:	e6f3      	b.n	8007b8e <remove_chain+0xde>
	if (fs->fs_type == FS_EXFAT) {
 8007da6:	782b      	ldrb	r3, [r5, #0]
 8007da8:	2b04      	cmp	r3, #4
 8007daa:	d008      	beq.n	8007dbe <remove_chain+0x30e>
	return FR_OK;
 8007dac:	2000      	movs	r0, #0
 8007dae:	e6a2      	b.n	8007af6 <remove_chain+0x46>
 8007db0:	6b2a      	ldr	r2, [r5, #48]	; 0x30
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 8007db2:	46d3      	mov	fp, sl
 8007db4:	e6fd      	b.n	8007bb2 <remove_chain+0x102>
		i = 0;
 8007db6:	46b3      	mov	fp, r6
 8007db8:	3101      	adds	r1, #1
			bm = 1;
 8007dba:	2601      	movs	r6, #1
 8007dbc:	e773      	b.n	8007ca6 <remove_chain+0x1f6>
		if (pclst == 0) {	/* Does the object have no chain? */
 8007dbe:	f1b8 0f00 	cmp.w	r8, #0
 8007dc2:	d107      	bne.n	8007dd4 <remove_chain+0x324>
	return FR_OK;
 8007dc4:	4640      	mov	r0, r8
			obj->stat = 0;		/* Change the object status 'initial' */
 8007dc6:	f887 8007 	strb.w	r8, [r7, #7]
 8007dca:	e694      	b.n	8007af6 <remove_chain+0x46>
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 8007dcc:	69bb      	ldr	r3, [r7, #24]
 8007dce:	459a      	cmp	sl, r3
 8007dd0:	d2c0      	bcs.n	8007d54 <remove_chain+0x2a4>
 8007dd2:	e7ab      	b.n	8007d2c <remove_chain+0x27c>
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain get contiguous? */
 8007dd4:	79fb      	ldrb	r3, [r7, #7]
 8007dd6:	2b03      	cmp	r3, #3
 8007dd8:	d1e8      	bne.n	8007dac <remove_chain+0x2fc>
 8007dda:	68bb      	ldr	r3, [r7, #8]
 8007ddc:	4543      	cmp	r3, r8
 8007dde:	d8e5      	bhi.n	8007dac <remove_chain+0x2fc>
 8007de0:	69ba      	ldr	r2, [r7, #24]
 8007de2:	4413      	add	r3, r2
 8007de4:	4543      	cmp	r3, r8
 8007de6:	d3e1      	bcc.n	8007dac <remove_chain+0x2fc>
				obj->stat = 2;	/* Change the object status 'contiguous' */
 8007de8:	2302      	movs	r3, #2
	return FR_OK;
 8007dea:	2000      	movs	r0, #0
				obj->stat = 2;	/* Change the object status 'contiguous' */
 8007dec:	71fb      	strb	r3, [r7, #7]
 8007dee:	e682      	b.n	8007af6 <remove_chain+0x46>

08007df0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007df0:	b510      	push	{r4, lr}
 8007df2:	b082      	sub	sp, #8
 8007df4:	e9cd 1000 	strd	r1, r0, [sp]
	if (*path) {	/* If the pointer is not a null */
 8007df8:	b181      	cbz	r1, 8007e1c <f_mount+0x2c>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007dfa:	780c      	ldrb	r4, [r1, #0]
 8007dfc:	2c1f      	cmp	r4, #31
 8007dfe:	d910      	bls.n	8007e22 <f_mount+0x32>
 8007e00:	2c3a      	cmp	r4, #58	; 0x3a
 8007e02:	d00e      	beq.n	8007e22 <f_mount+0x32>
 8007e04:	4608      	mov	r0, r1
 8007e06:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8007e0a:	2b1f      	cmp	r3, #31
 8007e0c:	d90b      	bls.n	8007e26 <f_mount+0x36>
 8007e0e:	2b3a      	cmp	r3, #58	; 0x3a
 8007e10:	d1f9      	bne.n	8007e06 <f_mount+0x16>
			i = *tp++ - '0';
 8007e12:	3101      	adds	r1, #1
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007e14:	4288      	cmp	r0, r1
 8007e16:	d101      	bne.n	8007e1c <f_mount+0x2c>
 8007e18:	2c30      	cmp	r4, #48	; 0x30
 8007e1a:	d006      	beq.n	8007e2a <f_mount+0x3a>
	const TCHAR *rp = path;


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
	if (vol < 0) return FR_INVALID_DRIVE;
 8007e1c:	200b      	movs	r0, #11

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
 8007e1e:	b002      	add	sp, #8
 8007e20:	bd10      	pop	{r4, pc}
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007e22:	4623      	mov	r3, r4
 8007e24:	4608      	mov	r0, r1
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007e26:	2b3a      	cmp	r3, #58	; 0x3a
 8007e28:	d0f3      	beq.n	8007e12 <f_mount+0x22>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007e2a:	4913      	ldr	r1, [pc, #76]	; (8007e78 <f_mount+0x88>)
 8007e2c:	680b      	ldr	r3, [r1, #0]
	if (cfs) {
 8007e2e:	b143      	cbz	r3, 8007e42 <f_mount+0x52>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8007e30:	4812      	ldr	r0, [pc, #72]	; (8007e7c <f_mount+0x8c>)
 8007e32:	6804      	ldr	r4, [r0, #0]
 8007e34:	42a3      	cmp	r3, r4
 8007e36:	d019      	beq.n	8007e6c <f_mount+0x7c>
 8007e38:	6904      	ldr	r4, [r0, #16]
 8007e3a:	429c      	cmp	r4, r3
 8007e3c:	d013      	beq.n	8007e66 <f_mount+0x76>
		cfs->fs_type = 0;				/* Clear old fs object */
 8007e3e:	2000      	movs	r0, #0
 8007e40:	7018      	strb	r0, [r3, #0]
	if (fs) {
 8007e42:	9b01      	ldr	r3, [sp, #4]
 8007e44:	b15b      	cbz	r3, 8007e5e <f_mount+0x6e>
		fs->fs_type = 0;				/* Clear new fs object */
 8007e46:	2000      	movs	r0, #0
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007e48:	2a01      	cmp	r2, #1
	FatFs[vol] = fs;					/* Register new fs object */
 8007e4a:	600b      	str	r3, [r1, #0]
		fs->fs_type = 0;				/* Clear new fs object */
 8007e4c:	7018      	strb	r0, [r3, #0]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007e4e:	d1e6      	bne.n	8007e1e <f_mount+0x2e>
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8007e50:	4602      	mov	r2, r0
 8007e52:	a901      	add	r1, sp, #4
 8007e54:	4668      	mov	r0, sp
 8007e56:	f7fd fb5b 	bl	8005510 <find_volume>
}
 8007e5a:	b002      	add	sp, #8
 8007e5c:	bd10      	pop	{r4, pc}
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007e5e:	4618      	mov	r0, r3
	FatFs[vol] = fs;					/* Register new fs object */
 8007e60:	600b      	str	r3, [r1, #0]
}
 8007e62:	b002      	add	sp, #8
 8007e64:	bd10      	pop	{r4, pc}
		if (Files[i].fs == fs) Files[i].fs = 0;
 8007e66:	2400      	movs	r4, #0
 8007e68:	6104      	str	r4, [r0, #16]
 8007e6a:	e7e8      	b.n	8007e3e <f_mount+0x4e>
 8007e6c:	2400      	movs	r4, #0
 8007e6e:	6004      	str	r4, [r0, #0]
 8007e70:	6904      	ldr	r4, [r0, #16]
 8007e72:	429c      	cmp	r4, r3
 8007e74:	d1e3      	bne.n	8007e3e <f_mount+0x4e>
 8007e76:	e7f6      	b.n	8007e66 <f_mount+0x76>
 8007e78:	20000098 	.word	0x20000098
 8007e7c:	2000009c 	.word	0x2000009c

08007e80 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e84:	f2ad 4ddc 	subw	sp, sp, #1244	; 0x4dc
 8007e88:	9105      	str	r1, [sp, #20]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8007e8a:	2800      	cmp	r0, #0
 8007e8c:	f000 80c3 	beq.w	8008016 <f_open+0x196>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8007e90:	f002 083f 	and.w	r8, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
 8007e94:	4616      	mov	r6, r2
 8007e96:	4604      	mov	r4, r0
 8007e98:	a907      	add	r1, sp, #28
 8007e9a:	a805      	add	r0, sp, #20
 8007e9c:	4642      	mov	r2, r8
 8007e9e:	f7fd fb37 	bl	8005510 <find_volume>
	if (res == FR_OK) {
 8007ea2:	4605      	mov	r5, r0
 8007ea4:	b130      	cbz	r0, 8007eb4 <f_open+0x34>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	6023      	str	r3, [r4, #0]

	LEAVE_FF(fs, res);
}
 8007eaa:	4628      	mov	r0, r5
 8007eac:	f20d 4ddc 	addw	sp, sp, #1244	; 0x4dc
 8007eb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dj.obj.fs = fs;
 8007eb4:	9b07      	ldr	r3, [sp, #28]
		INIT_NAMBUF(fs);
 8007eb6:	a81e      	add	r0, sp, #120	; 0x78
 8007eb8:	aa9e      	add	r2, sp, #632	; 0x278
		res = follow_path(&dj, path);	/* Follow the file path */
 8007eba:	9905      	ldr	r1, [sp, #20]
		dj.obj.fs = fs;
 8007ebc:	9308      	str	r3, [sp, #32]
		INIT_NAMBUF(fs);
 8007ebe:	e9c3 0204 	strd	r0, r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 8007ec2:	a808      	add	r0, sp, #32
 8007ec4:	f7fe fcbe 	bl	8006844 <follow_path>
		if (res == FR_OK) {
 8007ec8:	b9e0      	cbnz	r0, 8007f04 <f_open+0x84>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007eca:	f99d 306b 	ldrsb.w	r3, [sp, #107]	; 0x6b
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	f2c0 80a9 	blt.w	8008026 <f_open+0x1a6>
		if (Files[i].fs) {	/* Existing entry */
 8007ed4:	4fb5      	ldr	r7, [pc, #724]	; (80081ac <f_open+0x32c>)
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007ed6:	f028 0c01 	bic.w	ip, r8, #1
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007eda:	9b08      	ldr	r3, [sp, #32]
		if (Files[i].fs) {	/* Existing entry */
 8007edc:	683a      	ldr	r2, [r7, #0]
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007ede:	46e2      	mov	sl, ip
				Files[i].clu == dp->obj.sclust &&
 8007ee0:	990a      	ldr	r1, [sp, #40]	; 0x28
				Files[i].ofs == dp->dptr) break;
 8007ee2:	f8dd e050 	ldr.w	lr, [sp, #80]	; 0x50
		if (Files[i].fs) {	/* Existing entry */
 8007ee6:	2a00      	cmp	r2, #0
 8007ee8:	f000 81ba 	beq.w	8008260 <f_open+0x3e0>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007eec:	429a      	cmp	r2, r3
 8007eee:	f000 809c 	beq.w	800802a <f_open+0x1aa>
		if (Files[i].fs) {	/* Existing entry */
 8007ef2:	693a      	ldr	r2, [r7, #16]
 8007ef4:	2a00      	cmp	r2, #0
 8007ef6:	f000 80b8 	beq.w	800806a <f_open+0x1ea>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007efa:	4293      	cmp	r3, r2
 8007efc:	f000 80a1 	beq.w	8008042 <f_open+0x1c2>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007f00:	2512      	movs	r5, #18
 8007f02:	e7d0      	b.n	8007ea6 <f_open+0x26>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007f04:	f016 0f1c 	tst.w	r6, #28
 8007f08:	f000 808b 	beq.w	8008022 <f_open+0x1a2>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8007f0c:	2804      	cmp	r0, #4
 8007f0e:	f040 8088 	bne.w	8008022 <f_open+0x1a2>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007f12:	4fa6      	ldr	r7, [pc, #664]	; (80081ac <f_open+0x32c>)
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	b113      	cbz	r3, 8007f1e <f_open+0x9e>
 8007f18:	693b      	ldr	r3, [r7, #16]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d1f0      	bne.n	8007f00 <f_open+0x80>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007f1e:	a808      	add	r0, sp, #32
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007f20:	f048 0808 	orr.w	r8, r8, #8
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007f24:	f7ff f840 	bl	8006fa8 <dir_register>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007f28:	2800      	cmp	r0, #0
 8007f2a:	d17a      	bne.n	8008022 <f_open+0x1a2>
				dw = GET_FATTIME();
 8007f2c:	f7fc fadc 	bl	80044e8 <get_fattime>
				if (fs->fs_type == FS_EXFAT) {
 8007f30:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8007f34:	f89b 3000 	ldrb.w	r3, [fp]
 8007f38:	2b04      	cmp	r3, #4
 8007f3a:	f000 81df 	beq.w	80082fc <f_open+0x47c>
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8007f3e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
	*ptr++ = (BYTE)val; val >>= 8;
 8007f40:	b2c6      	uxtb	r6, r0
	*ptr++ = (BYTE)val; val >>= 8;
 8007f42:	f3c0 2107 	ubfx	r1, r0, #8, #8
	*ptr++ = (BYTE)val; val >>= 8;
 8007f46:	f3c0 4207 	ubfx	r2, r0, #16, #8
	*ptr++ = (BYTE)val;
 8007f4a:	0e00      	lsrs	r0, r0, #24
	*ptr++ = (BYTE)val; val >>= 8;
 8007f4c:	739e      	strb	r6, [r3, #14]
	*ptr++ = (BYTE)val; val >>= 8;
 8007f4e:	73d9      	strb	r1, [r3, #15]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8007f50:	f04f 0c20 	mov.w	ip, #32
	*ptr++ = (BYTE)val; val >>= 8;
 8007f54:	741a      	strb	r2, [r3, #16]
	*ptr++ = (BYTE)val;
 8007f56:	7458      	strb	r0, [r3, #17]
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8007f58:	9b17      	ldr	r3, [sp, #92]	; 0x5c
	*ptr++ = (BYTE)val; val >>= 8;
 8007f5a:	759e      	strb	r6, [r3, #22]
	*ptr++ = (BYTE)val; val >>= 8;
 8007f5c:	75d9      	strb	r1, [r3, #23]
	*ptr++ = (BYTE)val; val >>= 8;
 8007f5e:	761a      	strb	r2, [r3, #24]
	*ptr++ = (BYTE)val;
 8007f60:	7658      	strb	r0, [r3, #25]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8007f62:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007f64:	f883 c00b 	strb.w	ip, [r3, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8007f68:	9b17      	ldr	r3, [sp, #92]	; 0x5c
	if (fs->fs_type == FS_FAT32) {
 8007f6a:	f89b 2000 	ldrb.w	r2, [fp]
	rv = rv << 8 | ptr[0];
 8007f6e:	7ed9      	ldrb	r1, [r3, #27]
 8007f70:	7e9e      	ldrb	r6, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
 8007f72:	2a03      	cmp	r2, #3
	cl = ld_word(dir + DIR_FstClusLO);
 8007f74:	ea46 2601 	orr.w	r6, r6, r1, lsl #8
	if (fs->fs_type == FS_FAT32) {
 8007f78:	d105      	bne.n	8007f86 <f_open+0x106>
	rv = rv << 8 | ptr[0];
 8007f7a:	7d59      	ldrb	r1, [r3, #21]
 8007f7c:	7d1a      	ldrb	r2, [r3, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8007f7e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8007f82:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
	*ptr++ = (BYTE)val; val >>= 8;
 8007f86:	2200      	movs	r2, #0
 8007f88:	769a      	strb	r2, [r3, #26]
	*ptr++ = (BYTE)val;
 8007f8a:	76da      	strb	r2, [r3, #27]
	if (fs->fs_type == FS_FAT32) {
 8007f8c:	f89b 1000 	ldrb.w	r1, [fp]
 8007f90:	2903      	cmp	r1, #3
 8007f92:	d101      	bne.n	8007f98 <f_open+0x118>
	*ptr++ = (BYTE)val; val >>= 8;
 8007f94:	751a      	strb	r2, [r3, #20]
	*ptr++ = (BYTE)val;
 8007f96:	755a      	strb	r2, [r3, #21]
					st_dword(dj.dir + DIR_FileSize, 0);
 8007f98:	9917      	ldr	r1, [sp, #92]	; 0x5c
	*ptr++ = (BYTE)val; val >>= 8;
 8007f9a:	2200      	movs	r2, #0
					fs->wflag = 1;
 8007f9c:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val; val >>= 8;
 8007f9e:	61ca      	str	r2, [r1, #28]
					fs->wflag = 1;
 8007fa0:	f88b 3003 	strb.w	r3, [fp, #3]
					if (cl) {							/* Remove the cluster chain if exist */
 8007fa4:	b1be      	cbz	r6, 8007fd6 <f_open+0x156>
						res = remove_chain(&dj.obj, cl, 0);
 8007fa6:	4631      	mov	r1, r6
 8007fa8:	a808      	add	r0, sp, #32
						dw = fs->winsect;
 8007faa:	f8db 9048 	ldr.w	r9, [fp, #72]	; 0x48
						res = remove_chain(&dj.obj, cl, 0);
 8007fae:	f7ff fd7f 	bl	8007ab0 <remove_chain>
						if (res == FR_OK) {
 8007fb2:	bbb0      	cbnz	r0, 8008022 <f_open+0x1a2>
							res = move_window(fs, dw);
 8007fb4:	f8dd b01c 	ldr.w	fp, [sp, #28]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007fb8:	f8db 3048 	ldr.w	r3, [fp, #72]	; 0x48
 8007fbc:	4599      	cmp	r9, r3
 8007fbe:	f000 8219 	beq.w	80083f4 <f_open+0x574>
 8007fc2:	4658      	mov	r0, fp
 8007fc4:	4649      	mov	r1, r9
 8007fc6:	f7fc fdcb 	bl	8004b60 <move_window.part.0>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8007fca:	3e01      	subs	r6, #1
 8007fcc:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8007fd0:	f8cb 6018 	str.w	r6, [fp, #24]
		if (res == FR_OK) {
 8007fd4:	bb28      	cbnz	r0, 8008022 <f_open+0x1a2>
 8007fd6:	9b08      	ldr	r3, [sp, #32]
 8007fd8:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007fda:	f8dd e050 	ldr.w	lr, [sp, #80]	; 0x50
				mode |= FA_MODIFIED;
 8007fde:	f048 0840 	orr.w	r8, r8, #64	; 0x40
 8007fe2:	f028 0a01 	bic.w	sl, r8, #1
		if (Files[i].fs == dp->obj.fs &&
 8007fe6:	683a      	ldr	r2, [r7, #0]
			fp->dir_ptr = dj.dir;
 8007fe8:	9e17      	ldr	r6, [sp, #92]	; 0x5c
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8007fea:	f8db 0048 	ldr.w	r0, [fp, #72]	; 0x48
		if (Files[i].fs == dp->obj.fs &&
 8007fee:	429a      	cmp	r2, r3
			fp->dir_ptr = dj.dir;
 8007ff0:	e9c4 0612 	strd	r0, r6, [r4, #72]	; 0x48
		if (Files[i].fs == dp->obj.fs &&
 8007ff4:	f000 811f 	beq.w	8008236 <f_open+0x3b6>
 8007ff8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007ffc:	4599      	cmp	r9, r3
 8007ffe:	d042      	beq.n	8008086 <f_open+0x206>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008000:	2a00      	cmp	r2, #0
 8008002:	f000 815e 	beq.w	80082c2 <f_open+0x442>
 8008006:	f1b9 0f00 	cmp.w	r9, #0
 800800a:	f000 81ee 	beq.w	80083ea <f_open+0x56a>
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800800e:	2300      	movs	r3, #0
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008010:	2502      	movs	r5, #2
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008012:	62e3      	str	r3, [r4, #44]	; 0x2c
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008014:	e747      	b.n	8007ea6 <f_open+0x26>
	if (!fp) return FR_INVALID_OBJECT;
 8008016:	2509      	movs	r5, #9
}
 8008018:	4628      	mov	r0, r5
 800801a:	f20d 4ddc 	addw	sp, sp, #1244	; 0x4dc
 800801e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008022:	4605      	mov	r5, r0
 8008024:	e73f      	b.n	8007ea6 <f_open+0x26>
				res = FR_INVALID_NAME;
 8008026:	2506      	movs	r5, #6
 8008028:	e73d      	b.n	8007ea6 <f_open+0x26>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	4288      	cmp	r0, r1
 800802e:	f000 815d 	beq.w	80082ec <f_open+0x46c>
		if (Files[i].fs) {	/* Existing entry */
 8008032:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008036:	f1b9 0f00 	cmp.w	r9, #0
 800803a:	d016      	beq.n	800806a <f_open+0x1ea>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800803c:	454a      	cmp	r2, r9
 800803e:	f47f af5f 	bne.w	8007f00 <f_open+0x80>
 8008042:	697a      	ldr	r2, [r7, #20]
 8008044:	428a      	cmp	r2, r1
 8008046:	f47f af5b 	bne.w	8007f00 <f_open+0x80>
				Files[i].clu == dp->obj.sclust &&
 800804a:	69ba      	ldr	r2, [r7, #24]
 800804c:	4572      	cmp	r2, lr
 800804e:	f47f af57 	bne.w	8007f00 <f_open+0x80>
 8008052:	2201      	movs	r2, #1
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008054:	f1bc 0f00 	cmp.w	ip, #0
 8008058:	f040 80f8 	bne.w	800824c <f_open+0x3cc>
 800805c:	eb07 1202 	add.w	r2, r7, r2, lsl #4
 8008060:	8992      	ldrh	r2, [r2, #12]
 8008062:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8008066:	f000 80f1 	beq.w	800824c <f_open+0x3cc>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800806a:	f016 0f1c 	tst.w	r6, #28
 800806e:	d07d      	beq.n	800816c <f_open+0x2ec>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008070:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
 8008074:	f012 0f11 	tst.w	r2, #17
 8008078:	f040 80f0 	bne.w	800825c <f_open+0x3dc>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800807c:	0772      	lsls	r2, r6, #29
 800807e:	f140 80e7 	bpl.w	8008250 <f_open+0x3d0>
 8008082:	2508      	movs	r5, #8
 8008084:	e70f      	b.n	8007ea6 <f_open+0x26>
		if (Files[i].fs == dp->obj.fs &&
 8008086:	6978      	ldr	r0, [r7, #20]
 8008088:	4288      	cmp	r0, r1
 800808a:	d1b9      	bne.n	8008000 <f_open+0x180>
			Files[i].clu == dp->obj.sclust &&
 800808c:	69b8      	ldr	r0, [r7, #24]
 800808e:	4570      	cmp	r0, lr
 8008090:	d1b6      	bne.n	8008000 <f_open+0x180>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008092:	f04f 0c01 	mov.w	ip, #1
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008096:	eb07 130c 	add.w	r3, r7, ip, lsl #4
 800809a:	f1ba 0f00 	cmp.w	sl, #0
 800809e:	d179      	bne.n	8008194 <f_open+0x314>
 80080a0:	8998      	ldrh	r0, [r3, #12]
 80080a2:	f10c 0901 	add.w	r9, ip, #1
 80080a6:	ea4f 120c 	mov.w	r2, ip, lsl #4
 80080aa:	3001      	adds	r0, #1
 80080ac:	b280      	uxth	r0, r0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80080ae:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80080b2:	4417      	add	r7, r2
			if (fs->fs_type == FS_EXFAT) {
 80080b4:	f89b 3000 	ldrb.w	r3, [fp]
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80080b8:	81b8      	strh	r0, [r7, #12]
			if (fs->fs_type == FS_EXFAT) {
 80080ba:	2b04      	cmp	r3, #4
 80080bc:	d078      	beq.n	80081b0 <f_open+0x330>
	rv = rv << 8 | ptr[0];
 80080be:	7ef0      	ldrb	r0, [r6, #27]
	if (fs->fs_type == FS_FAT32) {
 80080c0:	2b03      	cmp	r3, #3
	rv = rv << 8 | ptr[0];
 80080c2:	f896 a01a 	ldrb.w	sl, [r6, #26]
	cl = ld_word(dir + DIR_FstClusLO);
 80080c6:	ea4a 2a00 	orr.w	sl, sl, r0, lsl #8
	if (fs->fs_type == FS_FAT32) {
 80080ca:	d105      	bne.n	80080d8 <f_open+0x258>
	rv = rv << 8 | ptr[0];
 80080cc:	7d72      	ldrb	r2, [r6, #21]
 80080ce:	7d33      	ldrb	r3, [r6, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80080d0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80080d4:	ea4a 4a03 	orr.w	sl, sl, r3, lsl #16
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80080d8:	f8c4 a008 	str.w	sl, [r4, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80080dc:	2700      	movs	r7, #0
	rv = rv << 8 | ptr[2];
 80080de:	8bf2      	ldrh	r2, [r6, #30]
	rv = rv << 8 | ptr[1];
 80080e0:	7f73      	ldrb	r3, [r6, #29]
	rv = rv << 8 | ptr[0];
 80080e2:	7f36      	ldrb	r6, [r6, #28]
	rv = rv << 8 | ptr[1];
 80080e4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 80080e8:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80080ec:	e9c4 6704 	strd	r6, r7, [r4, #16]
			fp->obj.id = fs->id;
 80080f0:	f8bb 0006 	ldrh.w	r0, [fp, #6]
			fp->cltbl = 0;			/* Disable fast seek mode */
 80080f4:	2100      	movs	r1, #0
			fp->fptr = 0;			/* Set file pointer top of the file */
 80080f6:	2200      	movs	r2, #0
 80080f8:	2300      	movs	r3, #0
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80080fa:	f018 0f20 	tst.w	r8, #32
			fp->obj.fs = fs;	 	/* Validate the file object */
 80080fe:	f8c4 b000 	str.w	fp, [r4]
			fp->cltbl = 0;			/* Disable fast seek mode */
 8008102:	6521      	str	r1, [r4, #80]	; 0x50
			fp->err = 0;			/* Clear error flag */
 8008104:	f884 1031 	strb.w	r1, [r4, #49]	; 0x31
			fp->obj.id = fs->id;
 8008108:	80a0      	strh	r0, [r4, #4]
			fp->sect = 0;			/* Invalidate current data sector */
 800810a:	6461      	str	r1, [r4, #68]	; 0x44
			fp->flag = mode;		/* Set file access mode */
 800810c:	f884 8030 	strb.w	r8, [r4, #48]	; 0x30
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008110:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8008114:	f43f aec9 	beq.w	8007eaa <f_open+0x2a>
 8008118:	ea56 0307 	orrs.w	r3, r6, r7
 800811c:	f43f aec5 	beq.w	8007eaa <f_open+0x2a>
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008120:	f8bb 200c 	ldrh.w	r2, [fp, #12]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008124:	f04f 0900 	mov.w	r9, #0
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008128:	f8bb 800a 	ldrh.w	r8, [fp, #10]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800812c:	45b9      	cmp	r9, r7
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800812e:	fb02 f808 	mul.w	r8, r2, r8
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008132:	bf08      	it	eq
 8008134:	45b0      	cmpeq	r8, r6
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008136:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800813a:	d30c      	bcc.n	8008156 <f_open+0x2d6>
 800813c:	e0a6      	b.n	800828c <f_open+0x40c>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800813e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008142:	d025      	beq.n	8008190 <f_open+0x310>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008144:	ebb6 0608 	subs.w	r6, r6, r8
 8008148:	eb67 0709 	sbc.w	r7, r7, r9
 800814c:	45b9      	cmp	r9, r7
 800814e:	bf08      	it	eq
 8008150:	45b0      	cmpeq	r8, r6
 8008152:	f080 8097 	bcs.w	8008284 <f_open+0x404>
					clst = get_fat(&fp->obj, clst);
 8008156:	4651      	mov	r1, sl
 8008158:	4620      	mov	r0, r4
 800815a:	f7fc fe09 	bl	8004d70 <get_fat>
					if (clst <= 1) res = FR_INT_ERR;
 800815e:	2801      	cmp	r0, #1
					clst = get_fat(&fp->obj, clst);
 8008160:	4682      	mov	sl, r0
					if (clst <= 1) res = FR_INT_ERR;
 8008162:	d8ec      	bhi.n	800813e <f_open+0x2be>
 8008164:	2502      	movs	r5, #2
				fp->clust = clst;
 8008166:	f8c4 a040 	str.w	sl, [r4, #64]	; 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800816a:	e69c      	b.n	8007ea6 <f_open+0x26>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800816c:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
 8008170:	06d0      	lsls	r0, r2, #27
 8008172:	f100 8085 	bmi.w	8008280 <f_open+0x400>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8008176:	07b0      	lsls	r0, r6, #30
 8008178:	d501      	bpl.n	800817e <f_open+0x2fe>
 800817a:	07d2      	lsls	r2, r2, #31
 800817c:	d46e      	bmi.n	800825c <f_open+0x3dc>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800817e:	f006 0608 	and.w	r6, r6, #8
 8008182:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8008186:	2e00      	cmp	r6, #0
 8008188:	f47f af29 	bne.w	8007fde <f_open+0x15e>
 800818c:	46e2      	mov	sl, ip
 800818e:	e72a      	b.n	8007fe6 <f_open+0x166>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8008190:	2501      	movs	r5, #1
 8008192:	e7e8      	b.n	8008166 <f_open+0x2e6>
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008194:	899b      	ldrh	r3, [r3, #12]
 8008196:	ea4f 120c 	mov.w	r2, ip, lsl #4
 800819a:	2b00      	cmp	r3, #0
 800819c:	f47f af37 	bne.w	800800e <f_open+0x18e>
 80081a0:	f10c 0901 	add.w	r9, ip, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80081a4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80081a8:	e781      	b.n	80080ae <f_open+0x22e>
 80081aa:	bf00      	nop
 80081ac:	2000009c 	.word	0x2000009c
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 80081b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80081b2:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
 80081b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 80081ba:	f8db c014 	ldr.w	ip, [fp, #20]
				fp->obj.c_ofs = dj.blk_ofs;
 80081be:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 80081c0:	4303      	orrs	r3, r0
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 80081c2:	6221      	str	r1, [r4, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 80081c4:	e9c4 3209 	strd	r3, r2, [r4, #36]	; 0x24
	rv = rv << 8 | ptr[2];
 80081c8:	f8bc 2036 	ldrh.w	r2, [ip, #54]	; 0x36
	rv = rv << 8 | ptr[1];
 80081cc:	f89c 3035 	ldrb.w	r3, [ip, #53]	; 0x35
	rv = rv << 8 | ptr[0];
 80081d0:	f89c a034 	ldrb.w	sl, [ip, #52]	; 0x34
	rv = rv << 8 | ptr[1];
 80081d4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 80081d8:	ea4a 2a03 	orr.w	sl, sl, r3, lsl #8
	rv = rv << 8 | ptr[3];
 80081dc:	2300      	movs	r3, #0
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 80081de:	f8c4 a008 	str.w	sl, [r4, #8]
	rv = rv << 8 | ptr[3];
 80081e2:	f89c 203b 	ldrb.w	r2, [ip, #59]	; 0x3b
	rv = rv << 8 | ptr[4];
 80081e6:	f8dc 103c 	ldr.w	r1, [ip, #60]	; 0x3c
	rv = rv << 8 | ptr[3];
 80081ea:	e9cd 2300 	strd	r2, r3, [sp]
	rv = rv << 8 | ptr[2];
 80081ee:	f89c 203a 	ldrb.w	r2, [ip, #58]	; 0x3a
 80081f2:	2300      	movs	r3, #0
 80081f4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80081f8:	9b00      	ldr	r3, [sp, #0]
 80081fa:	9802      	ldr	r0, [sp, #8]
 80081fc:	ea43 2e01 	orr.w	lr, r3, r1, lsl #8
	rv = rv << 8 | ptr[1];
 8008200:	f89c 2039 	ldrb.w	r2, [ip, #57]	; 0x39
	rv = rv << 8 | ptr[2];
 8008204:	0c09      	lsrs	r1, r1, #16
 8008206:	ea40 2e0e 	orr.w	lr, r0, lr, lsl #8
	rv = rv << 8 | ptr[0];
 800820a:	f89c 0038 	ldrb.w	r0, [ip, #56]	; 0x38
	rv = rv << 8 | ptr[1];
 800820e:	ea4f 2901 	mov.w	r9, r1, lsl #8
 8008212:	ea42 220e 	orr.w	r2, r2, lr, lsl #8
 8008216:	ea49 691e 	orr.w	r9, r9, lr, lsr #24
	rv = rv << 8 | ptr[0];
 800821a:	ea40 2602 	orr.w	r6, r0, r2, lsl #8
 800821e:	ea4f 2309 	mov.w	r3, r9, lsl #8
 8008222:	ea43 6712 	orr.w	r7, r3, r2, lsr #24
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 8008226:	e9c4 6704 	strd	r6, r7, [r4, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800822a:	f89c 3021 	ldrb.w	r3, [ip, #33]	; 0x21
 800822e:	f003 0302 	and.w	r3, r3, #2
 8008232:	71e3      	strb	r3, [r4, #7]
 8008234:	e75c      	b.n	80080f0 <f_open+0x270>
		if (Files[i].fs == dp->obj.fs &&
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	4288      	cmp	r0, r1
 800823a:	f47f aedd 	bne.w	8007ff8 <f_open+0x178>
			Files[i].clu == dp->obj.sclust &&
 800823e:	68b8      	ldr	r0, [r7, #8]
 8008240:	4570      	cmp	r0, lr
 8008242:	f47f aed9 	bne.w	8007ff8 <f_open+0x178>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008246:	f04f 0c00 	mov.w	ip, #0
 800824a:	e724      	b.n	8008096 <f_open+0x216>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800824c:	2510      	movs	r5, #16
 800824e:	e62a      	b.n	8007ea6 <f_open+0x26>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008250:	0736      	lsls	r6, r6, #28
 8008252:	f53f ae6b 	bmi.w	8007f2c <f_open+0xac>
 8008256:	f8dd b01c 	ldr.w	fp, [sp, #28]
 800825a:	e6c4      	b.n	8007fe6 <f_open+0x166>
						res = FR_DENIED;
 800825c:	2507      	movs	r5, #7
 800825e:	e622      	b.n	8007ea6 <f_open+0x26>
		if (Files[i].fs) {	/* Existing entry */
 8008260:	693a      	ldr	r2, [r7, #16]
 8008262:	2a00      	cmp	r2, #0
 8008264:	f43f af01 	beq.w	800806a <f_open+0x1ea>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008268:	429a      	cmp	r2, r3
 800826a:	f47f aefe 	bne.w	800806a <f_open+0x1ea>
 800826e:	697a      	ldr	r2, [r7, #20]
 8008270:	428a      	cmp	r2, r1
 8008272:	f47f aefa 	bne.w	800806a <f_open+0x1ea>
				Files[i].clu == dp->obj.sclust &&
 8008276:	69ba      	ldr	r2, [r7, #24]
 8008278:	4572      	cmp	r2, lr
 800827a:	f47f aef6 	bne.w	800806a <f_open+0x1ea>
 800827e:	e6e8      	b.n	8008052 <f_open+0x1d2>
					res = FR_NO_FILE;
 8008280:	2504      	movs	r5, #4
 8008282:	e610      	b.n	8007ea6 <f_open+0x26>
 8008284:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8008288:	f8bb 200c 	ldrh.w	r2, [fp, #12]
				fp->clust = clst;
 800828c:	4630      	mov	r0, r6
 800828e:	4639      	mov	r1, r7
 8008290:	2300      	movs	r3, #0
 8008292:	f8c4 a040 	str.w	sl, [r4, #64]	; 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008296:	f7f7 ffbf 	bl	8000218 <__aeabi_uldivmod>
 800829a:	4313      	orrs	r3, r2
 800829c:	f43f ae05 	beq.w	8007eaa <f_open+0x2a>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80082a0:	f8db 3030 	ldr.w	r3, [fp, #48]	; 0x30
	clst -= 2;
 80082a4:	f1aa 0a02 	sub.w	sl, sl, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80082a8:	3b02      	subs	r3, #2
 80082aa:	459a      	cmp	sl, r3
 80082ac:	d224      	bcs.n	80082f8 <f_open+0x478>
	return clst * fs->csize + fs->database;
 80082ae:	f8bb 300a 	ldrh.w	r3, [fp, #10]
 80082b2:	f8db 2044 	ldr.w	r2, [fp, #68]	; 0x44
 80082b6:	fb0a 2303 	mla	r3, sl, r3, r2
					if ((sc = clust2sect(fs, clst)) == 0) {
 80082ba:	b1eb      	cbz	r3, 80082f8 <f_open+0x478>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80082bc:	4418      	add	r0, r3
 80082be:	6460      	str	r0, [r4, #68]	; 0x44
	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80082c0:	e5f3      	b.n	8007eaa <f_open+0x2a>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80082c2:	4694      	mov	ip, r2
 80082c4:	f04f 0901 	mov.w	r9, #1
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80082c8:	f1ba 0f00 	cmp.w	sl, #0
		Files[i].fs = dp->obj.fs;
 80082cc:	ea4f 120c 	mov.w	r2, ip, lsl #4
		Files[i].ctr = 0;
 80082d0:	f04f 0a00 	mov.w	sl, #0
		Files[i].fs = dp->obj.fs;
 80082d4:	eb07 1c0c 	add.w	ip, r7, ip, lsl #4
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80082d8:	bf14      	ite	ne
 80082da:	f44f 7080 	movne.w	r0, #256	; 0x100
 80082de:	2001      	moveq	r0, #1
		Files[i].fs = dp->obj.fs;
 80082e0:	50bb      	str	r3, [r7, r2]
		Files[i].ctr = 0;
 80082e2:	f8ac a00c 	strh.w	sl, [ip, #12]
		Files[i].ofs = dp->dptr;
 80082e6:	e9cc 1e01 	strd	r1, lr, [ip, #4]
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80082ea:	e6e0      	b.n	80080ae <f_open+0x22e>
				Files[i].clu == dp->obj.sclust &&
 80082ec:	68ba      	ldr	r2, [r7, #8]
 80082ee:	4572      	cmp	r2, lr
 80082f0:	f47f adff 	bne.w	8007ef2 <f_open+0x72>
	for (i = be = 0; i < _FS_LOCK; i++) {
 80082f4:	462a      	mov	r2, r5
 80082f6:	e6ad      	b.n	8008054 <f_open+0x1d4>
 80082f8:	2502      	movs	r5, #2
 80082fa:	e5d4      	b.n	8007ea6 <f_open+0x26>
					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
 80082fc:	f8db 1014 	ldr.w	r1, [fp, #20]
					fp->obj.n_frag = 0;
 8008300:	2600      	movs	r6, #0
					fp->obj.fs = fs;
 8008302:	f8c4 b000 	str.w	fp, [r4]
	rv = rv << 8 | ptr[2];
 8008306:	f8b1 c036 	ldrh.w	ip, [r1, #54]	; 0x36
	rv = rv << 8 | ptr[1];
 800830a:	f891 2035 	ldrb.w	r2, [r1, #53]	; 0x35
	rv = rv << 8 | ptr[0];
 800830e:	f891 3034 	ldrb.w	r3, [r1, #52]	; 0x34
	rv = rv << 8 | ptr[1];
 8008312:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
	*ptr++ = (BYTE)val; val >>= 8;
 8008316:	f3c0 2c07 	ubfx	ip, r0, #8, #8
	rv = rv << 8 | ptr[0];
 800831a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
 800831e:	60a3      	str	r3, [r4, #8]
	rv = rv << 8 | ptr[4];
 8008320:	f8d1 e03c 	ldr.w	lr, [r1, #60]	; 0x3c
	rv = rv << 8 | ptr[3];
 8008324:	f891 203b 	ldrb.w	r2, [r1, #59]	; 0x3b
	rv = rv << 8 | ptr[2];
 8008328:	f891 903a 	ldrb.w	r9, [r1, #58]	; 0x3a
 800832c:	ea42 220e 	orr.w	r2, r2, lr, lsl #8
 8008330:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8008334:	ea49 2902 	orr.w	r9, r9, r2, lsl #8
	rv = rv << 8 | ptr[1];
 8008338:	f891 2039 	ldrb.w	r2, [r1, #57]	; 0x39
 800833c:	ea4f 2e0e 	mov.w	lr, lr, lsl #8
 8008340:	ea42 2a09 	orr.w	sl, r2, r9, lsl #8
	rv = rv << 8 | ptr[0];
 8008344:	f891 2038 	ldrb.w	r2, [r1, #56]	; 0x38
	rv = rv << 8 | ptr[1];
 8008348:	ea4e 6e19 	orr.w	lr, lr, r9, lsr #24
	*ptr++ = (BYTE)val; val >>= 8;
 800834c:	f3c0 4907 	ubfx	r9, r0, #16, #8
	rv = rv << 8 | ptr[0];
 8008350:	ea42 220a 	orr.w	r2, r2, sl, lsl #8
 8008354:	ea4f 2e0e 	mov.w	lr, lr, lsl #8
					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 8008358:	6122      	str	r2, [r4, #16]
	*ptr++ = (BYTE)val;
 800835a:	0e02      	lsrs	r2, r0, #24
	rv = rv << 8 | ptr[0];
 800835c:	ea4e 6e1a 	orr.w	lr, lr, sl, lsr #24
	*ptr++ = (BYTE)val; val >>= 8;
 8008360:	fa5f fa80 	uxtb.w	sl, r0
					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 8008364:	f8c4 e014 	str.w	lr, [r4, #20]
					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
 8008368:	f04f 0e20 	mov.w	lr, #32
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800836c:	f891 3021 	ldrb.w	r3, [r1, #33]	; 0x21
					fp->obj.n_frag = 0;
 8008370:	61e6      	str	r6, [r4, #28]
					res = store_xdir(&dj);
 8008372:	eb0d 000e 	add.w	r0, sp, lr
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 8008376:	f003 0302 	and.w	r3, r3, #2
 800837a:	71e3      	strb	r3, [r4, #7]
	*ptr++ = (BYTE)val; val >>= 8;
 800837c:	f881 a008 	strb.w	sl, [r1, #8]
	*ptr++ = (BYTE)val; val >>= 8;
 8008380:	f881 c009 	strb.w	ip, [r1, #9]
	*ptr++ = (BYTE)val; val >>= 8;
 8008384:	f881 900a 	strb.w	r9, [r1, #10]
	*ptr++ = (BYTE)val;
 8008388:	72ca      	strb	r2, [r1, #11]
					fs->dirbuf[XDIR_GenFlags] = 1;
 800838a:	2101      	movs	r1, #1
					fs->dirbuf[XDIR_CrtTime10] = 0;
 800838c:	f8db 3014 	ldr.w	r3, [fp, #20]
 8008390:	751e      	strb	r6, [r3, #20]
					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
 8008392:	f8db 3014 	ldr.w	r3, [fp, #20]
	*ptr++ = (BYTE)val; val >>= 8;
 8008396:	f883 a00c 	strb.w	sl, [r3, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 800839a:	f883 c00d 	strb.w	ip, [r3, #13]
	*ptr++ = (BYTE)val; val >>= 8;
 800839e:	f883 900e 	strb.w	r9, [r3, #14]
	*ptr++ = (BYTE)val;
 80083a2:	73da      	strb	r2, [r3, #15]
					fs->dirbuf[XDIR_ModTime10] = 0;
 80083a4:	f8db 3014 	ldr.w	r3, [fp, #20]
 80083a8:	755e      	strb	r6, [r3, #21]
					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
 80083aa:	f8db 3014 	ldr.w	r3, [fp, #20]
 80083ae:	f883 e004 	strb.w	lr, [r3, #4]
					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
 80083b2:	f8db 3014 	ldr.w	r3, [fp, #20]
	*ptr++ = (BYTE)val; val >>= 8;
 80083b6:	635e      	str	r6, [r3, #52]	; 0x34
					st_qword(fs->dirbuf + XDIR_FileSize, 0);
 80083b8:	f8db 3014 	ldr.w	r3, [fp, #20]
	*ptr++ = (BYTE)val; val >>= 8;
 80083bc:	639e      	str	r6, [r3, #56]	; 0x38
 80083be:	63de      	str	r6, [r3, #60]	; 0x3c
					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
 80083c0:	f8db 3014 	ldr.w	r3, [fp, #20]
	*ptr++ = (BYTE)val; val >>= 8;
 80083c4:	629e      	str	r6, [r3, #40]	; 0x28
 80083c6:	62de      	str	r6, [r3, #44]	; 0x2c
					fs->dirbuf[XDIR_GenFlags] = 1;
 80083c8:	f8db 3014 	ldr.w	r3, [fp, #20]
 80083cc:	f883 1021 	strb.w	r1, [r3, #33]	; 0x21
					res = store_xdir(&dj);
 80083d0:	f7fd ff5e 	bl	8006290 <store_xdir>
					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
 80083d4:	2800      	cmp	r0, #0
 80083d6:	f47f ae24 	bne.w	8008022 <f_open+0x1a2>
 80083da:	68a1      	ldr	r1, [r4, #8]
 80083dc:	b991      	cbnz	r1, 8008404 <f_open+0x584>
 80083de:	990a      	ldr	r1, [sp, #40]	; 0x28
 80083e0:	f8dd e050 	ldr.w	lr, [sp, #80]	; 0x50
 80083e4:	e9dd b307 	ldrd	fp, r3, [sp, #28]
 80083e8:	e5f9      	b.n	8007fde <f_open+0x15e>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80083ea:	f04f 0902 	mov.w	r9, #2
 80083ee:	f04f 0c01 	mov.w	ip, #1
 80083f2:	e769      	b.n	80082c8 <f_open+0x448>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80083f4:	3e01      	subs	r6, #1
 80083f6:	9b08      	ldr	r3, [sp, #32]
 80083f8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80083fa:	f8dd e050 	ldr.w	lr, [sp, #80]	; 0x50
 80083fe:	f8cb 6018 	str.w	r6, [fp, #24]
		if (res == FR_OK) {
 8008402:	e5ec      	b.n	8007fde <f_open+0x15e>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 8008404:	4602      	mov	r2, r0
 8008406:	4620      	mov	r0, r4
 8008408:	f7ff fb52 	bl	8007ab0 <remove_chain>
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 800840c:	68a3      	ldr	r3, [r4, #8]
 800840e:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8008412:	3b01      	subs	r3, #1
 8008414:	f8cb 3018 	str.w	r3, [fp, #24]
 8008418:	e5dc      	b.n	8007fd4 <f_open+0x154>
 800841a:	bf00      	nop

0800841c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800841c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008420:	b085      	sub	sp, #20
 8008422:	461c      	mov	r4, r3
 8008424:	4617      	mov	r7, r2
 8008426:	9302      	str	r3, [sp, #8]
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
 8008428:	2300      	movs	r3, #0
 800842a:	6023      	str	r3, [r4, #0]
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800842c:	b148      	cbz	r0, 8008442 <f_write+0x26>
 800842e:	6803      	ldr	r3, [r0, #0]
 8008430:	4604      	mov	r4, r0
 8008432:	b133      	cbz	r3, 8008442 <f_write+0x26>
 8008434:	781a      	ldrb	r2, [r3, #0]
 8008436:	b122      	cbz	r2, 8008442 <f_write+0x26>
 8008438:	460d      	mov	r5, r1
 800843a:	88da      	ldrh	r2, [r3, #6]
 800843c:	8881      	ldrh	r1, [r0, #4]
 800843e:	4291      	cmp	r1, r2
 8008440:	d005      	beq.n	800844e <f_write+0x32>
	FRESULT res = FR_INVALID_OBJECT;
 8008442:	2309      	movs	r3, #9
 8008444:	9301      	str	r3, [sp, #4]
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */

	LEAVE_FF(fs, FR_OK);
}
 8008446:	9801      	ldr	r0, [sp, #4]
 8008448:	b005      	add	sp, #20
 800844a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800844e:	7858      	ldrb	r0, [r3, #1]
 8008450:	f7fc f932 	bl	80046b8 <disk_status>
 8008454:	07c1      	lsls	r1, r0, #31
 8008456:	d4f4      	bmi.n	8008442 <f_write+0x26>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008458:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 800845c:	9301      	str	r3, [sp, #4]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d1f1      	bne.n	8008446 <f_write+0x2a>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8008462:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8008466:	079a      	lsls	r2, r3, #30
 8008468:	f140 8184 	bpl.w	8008774 <f_write+0x358>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800846c:	6826      	ldr	r6, [r4, #0]
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800846e:	7832      	ldrb	r2, [r6, #0]
 8008470:	2a04      	cmp	r2, #4
 8008472:	d003      	beq.n	800847c <f_write+0x60>
 8008474:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008476:	42fa      	cmn	r2, r7
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8008478:	bf28      	it	cs
 800847a:	43d7      	mvncs	r7, r2
	for ( ;  btw;							/* Repeat until all data written */
 800847c:	2f00      	cmp	r7, #0
 800847e:	d04b      	beq.n	8008518 <f_write+0xfc>
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8008480:	f106 034c 	add.w	r3, r6, #76	; 0x4c
 8008484:	46ab      	mov	fp, r5
 8008486:	9700      	str	r7, [sp, #0]
 8008488:	9303      	str	r3, [sp, #12]
 800848a:	e9d4 890e 	ldrd	r8, r9, [r4, #56]	; 0x38
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800848e:	f8b6 a00c 	ldrh.w	sl, [r6, #12]
 8008492:	4640      	mov	r0, r8
 8008494:	4649      	mov	r1, r9
 8008496:	2300      	movs	r3, #0
 8008498:	4652      	mov	r2, sl
 800849a:	f7f7 febd 	bl	8000218 <__aeabi_uldivmod>
 800849e:	4313      	orrs	r3, r2
 80084a0:	d03f      	beq.n	8008522 <f_write+0x106>
 80084a2:	6c67      	ldr	r7, [r4, #68]	; 0x44
 80084a4:	6cb3      	ldr	r3, [r6, #72]	; 0x48
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80084a6:	9a00      	ldr	r2, [sp, #0]
 80084a8:	fbb8 f5fa 	udiv	r5, r8, sl
 80084ac:	fb0a 8515 	mls	r5, sl, r5, r8
 80084b0:	ebaa 0505 	sub.w	r5, sl, r5
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80084b4:	4295      	cmp	r5, r2
 80084b6:	bf28      	it	cs
 80084b8:	4615      	movcs	r5, r2
	if (sector != fs->winsect) {	/* Window offset changed? */
 80084ba:	429f      	cmp	r7, r3
 80084bc:	d00a      	beq.n	80084d4 <f_write+0xb8>
 80084be:	4639      	mov	r1, r7
 80084c0:	4630      	mov	r0, r6
 80084c2:	f7fc fb4d 	bl	8004b60 <move_window.part.0>
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
 80084c6:	2800      	cmp	r0, #0
 80084c8:	f040 811d 	bne.w	8008706 <f_write+0x2ea>
 80084cc:	f8b6 a00c 	ldrh.w	sl, [r6, #12]
 80084d0:	e9d4 890e 	ldrd	r8, r9, [r4, #56]	; 0x38
	if (cnt) {
 80084d4:	2d00      	cmp	r5, #0
 80084d6:	f040 80aa 	bne.w	800862e <f_write+0x212>
 80084da:	465b      	mov	r3, fp
		fs->wflag = 1;
 80084dc:	f04f 0201 	mov.w	r2, #1
 80084e0:	70f2      	strb	r2, [r6, #3]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80084e2:	eb18 0805 	adds.w	r8, r8, r5
 80084e6:	469b      	mov	fp, r3
 80084e8:	f149 0900 	adc.w	r9, r9, #0
 80084ec:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
 80084f0:	e9c4 890e 	strd	r8, r9, [r4, #56]	; 0x38
 80084f4:	4549      	cmp	r1, r9
 80084f6:	bf08      	it	eq
 80084f8:	4540      	cmpeq	r0, r8
 80084fa:	d201      	bcs.n	8008500 <f_write+0xe4>
 80084fc:	4640      	mov	r0, r8
 80084fe:	4649      	mov	r1, r9
 8008500:	9a02      	ldr	r2, [sp, #8]
 8008502:	6813      	ldr	r3, [r2, #0]
 8008504:	442b      	add	r3, r5
 8008506:	e9c4 0104 	strd	r0, r1, [r4, #16]
 800850a:	6013      	str	r3, [r2, #0]
	for ( ;  btw;							/* Repeat until all data written */
 800850c:	9b00      	ldr	r3, [sp, #0]
 800850e:	1b5b      	subs	r3, r3, r5
 8008510:	9300      	str	r3, [sp, #0]
 8008512:	d1bc      	bne.n	800848e <f_write+0x72>
 8008514:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8008518:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800851c:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	LEAVE_FF(fs, FR_OK);
 8008520:	e791      	b.n	8008446 <f_write+0x2a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8008522:	8975      	ldrh	r5, [r6, #10]
 8008524:	3d01      	subs	r5, #1
			if (csect == 0) {				/* On the cluster boundary? */
 8008526:	4005      	ands	r5, r0
 8008528:	d111      	bne.n	800854e <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800852a:	ea58 0309 	orrs.w	r3, r8, r9
 800852e:	f040 80fd 	bne.w	800872c <f_write+0x310>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8008532:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 8008534:	2800      	cmp	r0, #0
 8008536:	f000 8137 	beq.w	80087a8 <f_write+0x38c>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800853a:	2801      	cmp	r0, #1
 800853c:	f000 80b6 	beq.w	80086ac <f_write+0x290>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008540:	1c43      	adds	r3, r0, #1
 8008542:	f000 80e0 	beq.w	8008706 <f_write+0x2ea>
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008546:	68a3      	ldr	r3, [r4, #8]
				fp->clust = clst;			/* Update current cluster */
 8008548:	6420      	str	r0, [r4, #64]	; 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800854a:	b903      	cbnz	r3, 800854e <f_write+0x132>
 800854c:	60a0      	str	r0, [r4, #8]
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
 800854e:	f8d6 8048 	ldr.w	r8, [r6, #72]	; 0x48
 8008552:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8008554:	4598      	cmp	r8, r3
 8008556:	f000 80b1 	beq.w	80086bc <f_write+0x2a0>
	clst -= 2;
 800855a:	6c27      	ldr	r7, [r4, #64]	; 0x40
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800855c:	6b33      	ldr	r3, [r6, #48]	; 0x30
	clst -= 2;
 800855e:	3f02      	subs	r7, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008560:	3b02      	subs	r3, #2
 8008562:	429f      	cmp	r7, r3
 8008564:	f080 80a2 	bcs.w	80086ac <f_write+0x290>
	return clst * fs->csize + fs->database;
 8008568:	8972      	ldrh	r2, [r6, #10]
 800856a:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800856c:	fb02 3707 	mla	r7, r2, r7, r3
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008570:	2f00      	cmp	r7, #0
 8008572:	f000 809b 	beq.w	80086ac <f_write+0x290>
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8008576:	f8b6 a00c 	ldrh.w	sl, [r6, #12]
			sect += csect;
 800857a:	442f      	add	r7, r5
			if (cc) {						/* Write maximum contiguous sectors directly */
 800857c:	9b00      	ldr	r3, [sp, #0]
 800857e:	459a      	cmp	sl, r3
 8008580:	f200 80c9 	bhi.w	8008716 <f_write+0x2fa>
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008584:	4659      	mov	r1, fp
 8008586:	7870      	ldrb	r0, [r6, #1]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8008588:	fbb3 fafa 	udiv	sl, r3, sl
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800858c:	eb05 030a 	add.w	r3, r5, sl
 8008590:	4293      	cmp	r3, r2
					cc = fs->csize - csect;
 8008592:	bf88      	it	hi
 8008594:	eba2 0a05 	subhi.w	sl, r2, r5
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008598:	463a      	mov	r2, r7
 800859a:	4653      	mov	r3, sl
 800859c:	f7fc f8b8 	bl	8004710 <disk_write>
 80085a0:	2800      	cmp	r0, #0
 80085a2:	f040 80b0 	bne.w	8008706 <f_write+0x2ea>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
 80085a6:	6cb2      	ldr	r2, [r6, #72]	; 0x48
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
 80085a8:	89b5      	ldrh	r5, [r6, #12]
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
 80085aa:	1bd7      	subs	r7, r2, r7
 80085ac:	4557      	cmp	r7, sl
 80085ae:	d237      	bcs.n	8008620 <f_write+0x204>
	if (cnt) {
 80085b0:	b39d      	cbz	r5, 800861a <f_write+0x1fe>
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
 80085b2:	fb05 f707 	mul.w	r7, r5, r7
 80085b6:	f106 0350 	add.w	r3, r6, #80	; 0x50
 80085ba:	9803      	ldr	r0, [sp, #12]
 80085bc:	f105 3cff 	add.w	ip, r5, #4294967295
 80085c0:	1d39      	adds	r1, r7, #4
 80085c2:	eb0b 0207 	add.w	r2, fp, r7
 80085c6:	4459      	add	r1, fp
 80085c8:	429a      	cmp	r2, r3
 80085ca:	bf38      	it	cc
 80085cc:	4288      	cmpcc	r0, r1
 80085ce:	f0c0 811d 	bcc.w	800880c <f_write+0x3f0>
 80085d2:	f1bc 0f07 	cmp.w	ip, #7
 80085d6:	f240 8119 	bls.w	800880c <f_write+0x3f0>
 80085da:	08af      	lsrs	r7, r5, #2
 80085dc:	4603      	mov	r3, r0
 80085de:	4611      	mov	r1, r2
 80085e0:	eb00 0787 	add.w	r7, r0, r7, lsl #2
			*d++ = *s++;
 80085e4:	f851 0b04 	ldr.w	r0, [r1], #4
 80085e8:	f843 0b04 	str.w	r0, [r3], #4
		} while (--cnt);
 80085ec:	429f      	cmp	r7, r3
 80085ee:	d1f9      	bne.n	80085e4 <f_write+0x1c8>
 80085f0:	f025 0303 	bic.w	r3, r5, #3
 80085f4:	9f03      	ldr	r7, [sp, #12]
 80085f6:	429d      	cmp	r5, r3
 80085f8:	eb07 0103 	add.w	r1, r7, r3
 80085fc:	eb02 0003 	add.w	r0, r2, r3
 8008600:	d00a      	beq.n	8008618 <f_write+0x1fc>
			*d++ = *s++;
 8008602:	5cd2      	ldrb	r2, [r2, r3]
 8008604:	54fa      	strb	r2, [r7, r3]
		} while (--cnt);
 8008606:	ebbc 0303 	subs.w	r3, ip, r3
 800860a:	d005      	beq.n	8008618 <f_write+0x1fc>
			*d++ = *s++;
 800860c:	7842      	ldrb	r2, [r0, #1]
		} while (--cnt);
 800860e:	2b01      	cmp	r3, #1
			*d++ = *s++;
 8008610:	704a      	strb	r2, [r1, #1]
		} while (--cnt);
 8008612:	d001      	beq.n	8008618 <f_write+0x1fc>
			*d++ = *s++;
 8008614:	7883      	ldrb	r3, [r0, #2]
 8008616:	708b      	strb	r3, [r1, #2]
		} while (--cnt);
 8008618:	89b5      	ldrh	r5, [r6, #12]
					fs->wflag = 0;
 800861a:	f04f 0300 	mov.w	r3, #0
 800861e:	70f3      	strb	r3, [r6, #3]
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8008620:	fb05 f50a 	mul.w	r5, r5, sl
				continue;
 8008624:	e9d4 890e 	ldrd	r8, r9, [r4, #56]	; 0x38
 8008628:	eb0b 0305 	add.w	r3, fp, r5
 800862c:	e759      	b.n	80084e2 <f_write+0xc6>
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800862e:	4640      	mov	r0, r8
 8008630:	4649      	mov	r1, r9
 8008632:	4652      	mov	r2, sl
 8008634:	2300      	movs	r3, #0
 8008636:	f7f7 fdef 	bl	8000218 <__aeabi_uldivmod>
 800863a:	9b03      	ldr	r3, [sp, #12]
 800863c:	f102 0c4c 	add.w	ip, r2, #76	; 0x4c
 8008640:	f102 0750 	add.w	r7, r2, #80	; 0x50
 8008644:	f10b 0104 	add.w	r1, fp, #4
 8008648:	441a      	add	r2, r3
 800864a:	4437      	add	r7, r6
 800864c:	eb0c 0306 	add.w	r3, ip, r6
 8008650:	1e68      	subs	r0, r5, #1
 8008652:	428b      	cmp	r3, r1
 8008654:	bf38      	it	cc
 8008656:	45bb      	cmpcc	fp, r7
 8008658:	f0c0 8094 	bcc.w	8008784 <f_write+0x368>
 800865c:	2807      	cmp	r0, #7
 800865e:	f240 8091 	bls.w	8008784 <f_write+0x368>
 8008662:	f025 0103 	bic.w	r1, r5, #3
 8008666:	465f      	mov	r7, fp
 8008668:	4419      	add	r1, r3
			*d++ = *s++;
 800866a:	f857 cb04 	ldr.w	ip, [r7], #4
 800866e:	f843 cb04 	str.w	ip, [r3], #4
		} while (--cnt);
 8008672:	4299      	cmp	r1, r3
 8008674:	d1f9      	bne.n	800866a <f_write+0x24e>
 8008676:	f025 0103 	bic.w	r1, r5, #3
 800867a:	428d      	cmp	r5, r1
 800867c:	eb02 0701 	add.w	r7, r2, r1
 8008680:	eb0b 0301 	add.w	r3, fp, r1
 8008684:	d00f      	beq.n	80086a6 <f_write+0x28a>
			*d++ = *s++;
 8008686:	f81b c001 	ldrb.w	ip, [fp, r1]
		} while (--cnt);
 800868a:	1a40      	subs	r0, r0, r1
			*d++ = *s++;
 800868c:	f802 c001 	strb.w	ip, [r2, r1]
		} while (--cnt);
 8008690:	f000 8092 	beq.w	80087b8 <f_write+0x39c>
			*d++ = *s++;
 8008694:	785a      	ldrb	r2, [r3, #1]
		} while (--cnt);
 8008696:	2801      	cmp	r0, #1
			*d++ = *s++;
 8008698:	707a      	strb	r2, [r7, #1]
		} while (--cnt);
 800869a:	f000 808d 	beq.w	80087b8 <f_write+0x39c>
			*d++ = *s++;
 800869e:	789a      	ldrb	r2, [r3, #2]
 80086a0:	eb0b 0305 	add.w	r3, fp, r5
 80086a4:	70ba      	strb	r2, [r7, #2]
		} while (--cnt);
 80086a6:	e9d4 890e 	ldrd	r8, r9, [r4, #56]	; 0x38
 80086aa:	e717      	b.n	80084dc <f_write+0xc0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80086ac:	2302      	movs	r3, #2
 80086ae:	9301      	str	r3, [sp, #4]
}
 80086b0:	9801      	ldr	r0, [sp, #4]
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80086b2:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
}
 80086b6:	b005      	add	sp, #20
 80086b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80086bc:	78f3      	ldrb	r3, [r6, #3]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	f43f af4b 	beq.w	800855a <f_write+0x13e>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80086c4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80086c8:	2301      	movs	r3, #1
 80086ca:	4642      	mov	r2, r8
 80086cc:	7870      	ldrb	r0, [r6, #1]
 80086ce:	4649      	mov	r1, r9
 80086d0:	f7fc f81e 	bl	8004710 <disk_write>
 80086d4:	b9b8      	cbnz	r0, 8008706 <f_write+0x2ea>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80086d6:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 80086d8:	6b73      	ldr	r3, [r6, #52]	; 0x34
 80086da:	eba8 0202 	sub.w	r2, r8, r2
			fs->wflag = 0;
 80086de:	70f0      	strb	r0, [r6, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80086e0:	429a      	cmp	r2, r3
 80086e2:	f4bf af3a 	bcs.w	800855a <f_write+0x13e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80086e6:	78b7      	ldrb	r7, [r6, #2]
 80086e8:	2f01      	cmp	r7, #1
 80086ea:	d801      	bhi.n	80086f0 <f_write+0x2d4>
 80086ec:	e735      	b.n	800855a <f_write+0x13e>
 80086ee:	6b73      	ldr	r3, [r6, #52]	; 0x34
					wsect += fs->fsize;
 80086f0:	4498      	add	r8, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80086f2:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 80086f4:	2301      	movs	r3, #1
 80086f6:	4649      	mov	r1, r9
 80086f8:	4642      	mov	r2, r8
 80086fa:	7870      	ldrb	r0, [r6, #1]
 80086fc:	f7fc f808 	bl	8004710 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008700:	2f01      	cmp	r7, #1
 8008702:	d1f4      	bne.n	80086ee <f_write+0x2d2>
 8008704:	e729      	b.n	800855a <f_write+0x13e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008706:	2301      	movs	r3, #1
 8008708:	9301      	str	r3, [sp, #4]
}
 800870a:	9801      	ldr	r0, [sp, #4]
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800870c:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
}
 8008710:	b005      	add	sp, #20
 8008712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
 8008716:	e9d4 890e 	ldrd	r8, r9, [r4, #56]	; 0x38
 800871a:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 800871e:	4599      	cmp	r9, r3
 8008720:	bf08      	it	eq
 8008722:	4590      	cmpeq	r8, r2
 8008724:	d229      	bcs.n	800877a <f_write+0x35e>
 8008726:	6cb3      	ldr	r3, [r6, #72]	; 0x48
			fp->sect = sect;
 8008728:	6467      	str	r7, [r4, #68]	; 0x44
 800872a:	e6bc      	b.n	80084a6 <f_write+0x8a>
					if (fp->cltbl) {
 800872c:	6d27      	ldr	r7, [r4, #80]	; 0x50
 800872e:	b39f      	cbz	r7, 8008798 <f_write+0x37c>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008730:	f8d4 a000 	ldr.w	sl, [r4]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008734:	4640      	mov	r0, r8
 8008736:	2300      	movs	r3, #0
 8008738:	4649      	mov	r1, r9
 800873a:	f8ba 200c 	ldrh.w	r2, [sl, #12]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800873e:	f107 0804 	add.w	r8, r7, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008742:	f7f7 fd69 	bl	8000218 <__aeabi_uldivmod>
 8008746:	2300      	movs	r3, #0
 8008748:	f8ba 200a 	ldrh.w	r2, [sl, #10]
 800874c:	f7f7 fd64 	bl	8000218 <__aeabi_uldivmod>
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008750:	687b      	ldr	r3, [r7, #4]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008752:	b933      	cbnz	r3, 8008762 <f_write+0x346>
 8008754:	e6de      	b.n	8008514 <f_write+0xf8>
		cl -= ncl; tbl++;		/* Next fragment */
 8008756:	1ac0      	subs	r0, r0, r3
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008758:	f858 3f08 	ldr.w	r3, [r8, #8]!
		if (ncl == 0) return 0;	/* End of table? (error) */
 800875c:	2b00      	cmp	r3, #0
 800875e:	f43f aed9 	beq.w	8008514 <f_write+0xf8>
		if (cl < ncl) break;	/* In this fragment? */
 8008762:	4298      	cmp	r0, r3
 8008764:	d2f7      	bcs.n	8008756 <f_write+0x33a>
	return cl + *tbl;	/* Return the cluster number */
 8008766:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800876a:	4408      	add	r0, r1
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800876c:	2800      	cmp	r0, #0
 800876e:	f47f aee4 	bne.w	800853a <f_write+0x11e>
 8008772:	e6cf      	b.n	8008514 <f_write+0xf8>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8008774:	2307      	movs	r3, #7
 8008776:	9301      	str	r3, [sp, #4]
 8008778:	e665      	b.n	8008446 <f_write+0x2a>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800877a:	78f3      	ldrb	r3, [r6, #3]
 800877c:	b9fb      	cbnz	r3, 80087be <f_write+0x3a2>
				fs->winsect = sect;
 800877e:	463b      	mov	r3, r7
 8008780:	64b7      	str	r7, [r6, #72]	; 0x48
 8008782:	e7d1      	b.n	8008728 <f_write+0x30c>
 8008784:	3a01      	subs	r2, #1
 8008786:	eb0b 0305 	add.w	r3, fp, r5
			*d++ = *s++;
 800878a:	f81b 1b01 	ldrb.w	r1, [fp], #1
		} while (--cnt);
 800878e:	459b      	cmp	fp, r3
			*d++ = *s++;
 8008790:	f802 1f01 	strb.w	r1, [r2, #1]!
		} while (--cnt);
 8008794:	d1f9      	bne.n	800878a <f_write+0x36e>
 8008796:	e786      	b.n	80086a6 <f_write+0x28a>
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008798:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800879a:	4620      	mov	r0, r4
 800879c:	f7fd fa24 	bl	8005be8 <create_chain>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80087a0:	2800      	cmp	r0, #0
 80087a2:	f47f aeca 	bne.w	800853a <f_write+0x11e>
 80087a6:	e6b5      	b.n	8008514 <f_write+0xf8>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80087a8:	4601      	mov	r1, r0
 80087aa:	4620      	mov	r0, r4
 80087ac:	f7fd fa1c 	bl	8005be8 <create_chain>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80087b0:	2800      	cmp	r0, #0
 80087b2:	f47f aec2 	bne.w	800853a <f_write+0x11e>
 80087b6:	e6ad      	b.n	8008514 <f_write+0xf8>
 80087b8:	eb0b 0305 	add.w	r3, fp, r5
 80087bc:	e773      	b.n	80086a6 <f_write+0x28a>
		wsect = fs->winsect;	/* Current sector number */
 80087be:	f8d6 8048 	ldr.w	r8, [r6, #72]	; 0x48
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80087c2:	2301      	movs	r3, #1
 80087c4:	9903      	ldr	r1, [sp, #12]
 80087c6:	7870      	ldrb	r0, [r6, #1]
 80087c8:	4642      	mov	r2, r8
 80087ca:	f7fb ffa1 	bl	8004710 <disk_write>
 80087ce:	2800      	cmp	r0, #0
 80087d0:	d199      	bne.n	8008706 <f_write+0x2ea>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80087d2:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 80087d4:	6b73      	ldr	r3, [r6, #52]	; 0x34
 80087d6:	eba8 0202 	sub.w	r2, r8, r2
			fs->wflag = 0;
 80087da:	70f0      	strb	r0, [r6, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80087dc:	429a      	cmp	r2, r3
 80087de:	d210      	bcs.n	8008802 <f_write+0x3e6>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80087e0:	78b5      	ldrb	r5, [r6, #2]
 80087e2:	2d01      	cmp	r5, #1
 80087e4:	d90d      	bls.n	8008802 <f_write+0x3e6>
 80087e6:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80087ea:	e000      	b.n	80087ee <f_write+0x3d2>
 80087ec:	6b73      	ldr	r3, [r6, #52]	; 0x34
					wsect += fs->fsize;
 80087ee:	4498      	add	r8, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80087f0:	3d01      	subs	r5, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 80087f2:	2301      	movs	r3, #1
 80087f4:	4649      	mov	r1, r9
 80087f6:	4642      	mov	r2, r8
 80087f8:	7870      	ldrb	r0, [r6, #1]
 80087fa:	f7fb ff89 	bl	8004710 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80087fe:	2d01      	cmp	r5, #1
 8008800:	d1f4      	bne.n	80087ec <f_write+0x3d0>
 8008802:	f8b6 a00c 	ldrh.w	sl, [r6, #12]
 8008806:	e9d4 890e 	ldrd	r8, r9, [r4, #56]	; 0x38
 800880a:	e7b8      	b.n	800877e <f_write+0x362>
 800880c:	4415      	add	r5, r2
 800880e:	f106 034b 	add.w	r3, r6, #75	; 0x4b
			*d++ = *s++;
 8008812:	f812 1b01 	ldrb.w	r1, [r2], #1
		} while (--cnt);
 8008816:	4295      	cmp	r5, r2
			*d++ = *s++;
 8008818:	f803 1f01 	strb.w	r1, [r3, #1]!
		} while (--cnt);
 800881c:	d1f9      	bne.n	8008812 <f_write+0x3f6>
 800881e:	e6fb      	b.n	8008618 <f_write+0x1fc>

08008820 <f_sync>:
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008820:	2800      	cmp	r0, #0
 8008822:	d05b      	beq.n	80088dc <f_sync+0xbc>
 8008824:	6803      	ldr	r3, [r0, #0]
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008826:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800882a:	4604      	mov	r4, r0
 800882c:	f2ad 4dbc 	subw	sp, sp, #1212	; 0x4bc
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008830:	b12b      	cbz	r3, 800883e <f_sync+0x1e>
 8008832:	781a      	ldrb	r2, [r3, #0]
 8008834:	b11a      	cbz	r2, 800883e <f_sync+0x1e>
 8008836:	8881      	ldrh	r1, [r0, #4]
 8008838:	88da      	ldrh	r2, [r3, #6]
 800883a:	4291      	cmp	r1, r2
 800883c:	d005      	beq.n	800884a <f_sync+0x2a>
	FRESULT res = FR_INVALID_OBJECT;
 800883e:	2309      	movs	r3, #9
			}
		}
	}

	LEAVE_FF(fs, res);
}
 8008840:	4618      	mov	r0, r3
 8008842:	f20d 4dbc 	addw	sp, sp, #1212	; 0x4bc
 8008846:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800884a:	7858      	ldrb	r0, [r3, #1]
 800884c:	f7fb ff34 	bl	80046b8 <disk_status>
 8008850:	07c3      	lsls	r3, r0, #31
 8008852:	d4f4      	bmi.n	800883e <f_sync+0x1e>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008854:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
 8008858:	f010 0340 	ands.w	r3, r0, #64	; 0x40
 800885c:	d0f0      	beq.n	8008840 <f_sync+0x20>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800885e:	6826      	ldr	r6, [r4, #0]
			tm = GET_FATTIME();				/* Modified time */
 8008860:	f7fb fe42 	bl	80044e8 <get_fattime>
 8008864:	4605      	mov	r5, r0
			if (fs->fs_type == FS_EXFAT) {
 8008866:	7833      	ldrb	r3, [r6, #0]
 8008868:	2b04      	cmp	r3, #4
 800886a:	d03a      	beq.n	80088e2 <f_sync+0xc2>
				res = move_window(fs, fp->dir_sect);
 800886c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
	if (sector != fs->winsect) {	/* Window offset changed? */
 800886e:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 8008870:	4299      	cmp	r1, r3
 8008872:	d005      	beq.n	8008880 <f_sync+0x60>
 8008874:	4630      	mov	r0, r6
 8008876:	f7fc f973 	bl	8004b60 <move_window.part.0>
				if (res == FR_OK) {
 800887a:	4603      	mov	r3, r0
 800887c:	2800      	cmp	r0, #0
 800887e:	d1df      	bne.n	8008840 <f_sync+0x20>
					dir = fp->dir_ptr;
 8008880:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008882:	7acb      	ldrb	r3, [r1, #11]
 8008884:	f043 0320 	orr.w	r3, r3, #32
 8008888:	72cb      	strb	r3, [r1, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800888a:	68a3      	ldr	r3, [r4, #8]
 800888c:	6822      	ldr	r2, [r4, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800888e:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8008892:	768b      	strb	r3, [r1, #26]
	*ptr++ = (BYTE)val;
 8008894:	76c8      	strb	r0, [r1, #27]
	if (fs->fs_type == FS_FAT32) {
 8008896:	7812      	ldrb	r2, [r2, #0]
 8008898:	2a03      	cmp	r2, #3
 800889a:	f000 80e8 	beq.w	8008a6e <f_sync+0x24e>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800889e:	6923      	ldr	r3, [r4, #16]
	*ptr++ = (BYTE)val; val >>= 8;
 80088a0:	0a2f      	lsrs	r7, r5, #8
	*ptr++ = (BYTE)val; val >>= 8;
 80088a2:	0c2a      	lsrs	r2, r5, #16
	*ptr++ = (BYTE)val; val >>= 8;
 80088a4:	758d      	strb	r5, [r1, #22]
 80088a6:	0a18      	lsrs	r0, r3, #8
 80088a8:	770b      	strb	r3, [r1, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 80088aa:	75cf      	strb	r7, [r1, #23]
	*ptr++ = (BYTE)val; val >>= 8;
 80088ac:	0e2d      	lsrs	r5, r5, #24
	*ptr++ = (BYTE)val; val >>= 8;
 80088ae:	7748      	strb	r0, [r1, #29]
 80088b0:	0c18      	lsrs	r0, r3, #16
	*ptr++ = (BYTE)val; val >>= 8;
 80088b2:	760a      	strb	r2, [r1, #24]
 80088b4:	0e1b      	lsrs	r3, r3, #24
	*ptr++ = (BYTE)val; val >>= 8;
 80088b6:	2200      	movs	r2, #0
	*ptr++ = (BYTE)val; val >>= 8;
 80088b8:	7788      	strb	r0, [r1, #30]
					fs->wflag = 1;
 80088ba:	2701      	movs	r7, #1
					res = sync_fs(fs);					/* Restore it to the directory */
 80088bc:	4630      	mov	r0, r6
	*ptr++ = (BYTE)val;
 80088be:	77cb      	strb	r3, [r1, #31]
 80088c0:	764d      	strb	r5, [r1, #25]
	*ptr++ = (BYTE)val; val >>= 8;
 80088c2:	748a      	strb	r2, [r1, #18]
	*ptr++ = (BYTE)val;
 80088c4:	74ca      	strb	r2, [r1, #19]
					fs->wflag = 1;
 80088c6:	70f7      	strb	r7, [r6, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80088c8:	f7fd f91c 	bl	8005b04 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 80088cc:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
					res = sync_fs(fs);					/* Restore it to the directory */
 80088d0:	4603      	mov	r3, r0
					fp->flag &= (BYTE)~FA_MODIFIED;
 80088d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80088d6:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
 80088da:	e7b1      	b.n	8008840 <f_sync+0x20>
	FRESULT res = FR_INVALID_OBJECT;
 80088dc:	2309      	movs	r3, #9
}
 80088de:	4618      	mov	r0, r3
 80088e0:	4770      	bx	lr
	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
 80088e2:	79e3      	ldrb	r3, [r4, #7]
 80088e4:	2b03      	cmp	r3, #3
 80088e6:	f000 80c7 	beq.w	8008a78 <f_sync+0x258>
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 80088ea:	69e3      	ldr	r3, [r4, #28]
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 80088ec:	f8d4 8040 	ldr.w	r8, [r4, #64]	; 0x40
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 80088f0:	b1db      	cbz	r3, 800892a <f_sync+0x10a>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 80088f2:	eba8 0103 	sub.w	r1, r8, r3
 80088f6:	2b01      	cmp	r3, #1
 80088f8:	f04f 32ff 	mov.w	r2, #4294967295
 80088fc:	f101 0701 	add.w	r7, r1, #1
 8008900:	bf88      	it	hi
 8008902:	1c8a      	addhi	r2, r1, #2
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008904:	2f01      	cmp	r7, #1
 8008906:	4639      	mov	r1, r7
 8008908:	f240 80db 	bls.w	8008ac2 <f_sync+0x2a2>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 800890c:	6820      	ldr	r0, [r4, #0]
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800890e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8008910:	429f      	cmp	r7, r3
 8008912:	f080 80d6 	bcs.w	8008ac2 <f_sync+0x2a2>
 8008916:	f7fc f95d 	bl	8004bd4 <put_fat.part.0>
		if (res != FR_OK) return res;
 800891a:	4603      	mov	r3, r0
 800891c:	2800      	cmp	r0, #0
 800891e:	d18f      	bne.n	8008840 <f_sync+0x20>
		obj->n_frag--;
 8008920:	69e3      	ldr	r3, [r4, #28]
 8008922:	3b01      	subs	r3, #1
 8008924:	61e3      	str	r3, [r4, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 8008926:	2b00      	cmp	r3, #0
 8008928:	d1e3      	bne.n	80088f2 <f_sync+0xd2>
	dp->obj.stat = (BYTE)obj->c_size;
 800892a:	6a63      	ldr	r3, [r4, #36]	; 0x24
					INIT_NAMBUF(fs);
 800892c:	a916      	add	r1, sp, #88	; 0x58
 800892e:	aa96      	add	r2, sp, #600	; 0x258
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 8008930:	f023 00ff 	bic.w	r0, r3, #255	; 0xff
	dp->obj.stat = (BYTE)obj->c_size;
 8008934:	f88d 3007 	strb.w	r3, [sp, #7]
	dp->obj.fs = obj->fs;
 8008938:	6823      	ldr	r3, [r4, #0]
					INIT_NAMBUF(fs);
 800893a:	e9c6 1204 	strd	r1, r2, [r6, #16]
	dp->obj.fs = obj->fs;
 800893e:	9300      	str	r3, [sp, #0]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 8008940:	2200      	movs	r2, #0
	dp->obj.sclust = obj->c_scl;
 8008942:	6a23      	ldr	r3, [r4, #32]
	dp->blk_ofs = obj->c_ofs;
 8008944:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 8008946:	9004      	str	r0, [sp, #16]
	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 8008948:	4668      	mov	r0, sp
	dp->obj.sclust = obj->c_scl;
 800894a:	9302      	str	r3, [sp, #8]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 800894c:	9205      	str	r2, [sp, #20]
	dp->blk_ofs = obj->c_ofs;
 800894e:	9113      	str	r1, [sp, #76]	; 0x4c
	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 8008950:	f7fd fb5a 	bl	8006008 <dir_sdi>
	if (res == FR_OK) {
 8008954:	4603      	mov	r3, r0
 8008956:	2800      	cmp	r0, #0
 8008958:	f47f af72 	bne.w	8008840 <f_sync+0x20>
		res = load_xdir(dp);		/* Load the object's entry block */
 800895c:	4668      	mov	r0, sp
 800895e:	f7fc fb29 	bl	8004fb4 <load_xdir>
					if (res == FR_OK) {
 8008962:	4603      	mov	r3, r0
 8008964:	2800      	cmp	r0, #0
 8008966:	f47f af6b 	bne.w	8008840 <f_sync+0x20>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
 800896a:	6971      	ldr	r1, [r6, #20]
	*ptr++ = (BYTE)val; val >>= 8;
 800896c:	4686      	mov	lr, r0
 800896e:	469c      	mov	ip, r3
 8008970:	461f      	mov	r7, r3
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
 8008972:	790a      	ldrb	r2, [r1, #4]
						res = store_xdir(&dj);	/* Restore it to the directory */
 8008974:	4668      	mov	r0, sp
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
 8008976:	f042 0220 	orr.w	r2, r2, #32
 800897a:	710a      	strb	r2, [r1, #4]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
 800897c:	79e1      	ldrb	r1, [r4, #7]
 800897e:	6972      	ldr	r2, [r6, #20]
 8008980:	f041 0101 	orr.w	r1, r1, #1
 8008984:	f882 1021 	strb.w	r1, [r2, #33]	; 0x21
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
 8008988:	68a2      	ldr	r2, [r4, #8]
 800898a:	6971      	ldr	r1, [r6, #20]
	*ptr++ = (BYTE)val; val >>= 8;
 800898c:	ea4f 2912 	mov.w	r9, r2, lsr #8
 8008990:	f881 2034 	strb.w	r2, [r1, #52]	; 0x34
	*ptr++ = (BYTE)val; val >>= 8;
 8008994:	ea4f 4812 	mov.w	r8, r2, lsr #16
	*ptr++ = (BYTE)val; val >>= 8;
 8008998:	0e12      	lsrs	r2, r2, #24
	*ptr++ = (BYTE)val; val >>= 8;
 800899a:	f881 9035 	strb.w	r9, [r1, #53]	; 0x35
	*ptr++ = (BYTE)val; val >>= 8;
 800899e:	f881 8036 	strb.w	r8, [r1, #54]	; 0x36
	*ptr++ = (BYTE)val;
 80089a2:	f881 2037 	strb.w	r2, [r1, #55]	; 0x37
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 80089a6:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
	*ptr++ = (BYTE)val; val >>= 8;
 80089aa:	ea4f 2911 	mov.w	r9, r1, lsr #8
 80089ae:	f361 0e07 	bfi	lr, r1, #0, #8
	*ptr++ = (BYTE)val; val >>= 8;
 80089b2:	ea4f 4811 	mov.w	r8, r1, lsr #16
	*ptr++ = (BYTE)val; val >>= 8;
 80089b6:	f362 0c07 	bfi	ip, r2, #0, #8
 80089ba:	ea49 6902 	orr.w	r9, r9, r2, lsl #24
	*ptr++ = (BYTE)val; val >>= 8;
 80089be:	ea48 4802 	orr.w	r8, r8, r2, lsl #16
	*ptr++ = (BYTE)val; val >>= 8;
 80089c2:	f369 2e0f 	bfi	lr, r9, #8, #8
	*ptr++ = (BYTE)val; val >>= 8;
 80089c6:	ea4f 2912 	mov.w	r9, r2, lsr #8
	*ptr++ = (BYTE)val; val >>= 8;
 80089ca:	0e09      	lsrs	r1, r1, #24
	*ptr++ = (BYTE)val; val >>= 8;
 80089cc:	f368 4e17 	bfi	lr, r8, #16, #8
 80089d0:	f369 2c0f 	bfi	ip, r9, #8, #8
	*ptr++ = (BYTE)val; val >>= 8;
 80089d4:	ea4f 4812 	mov.w	r8, r2, lsr #16
	*ptr++ = (BYTE)val; val >>= 8;
 80089d8:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
	*ptr++ = (BYTE)val; val >>= 8;
 80089dc:	f368 4c17 	bfi	ip, r8, #16, #8
	*ptr++ = (BYTE)val; val >>= 8;
 80089e0:	0e12      	lsrs	r2, r2, #24
	*ptr++ = (BYTE)val; val >>= 8;
 80089e2:	f361 6e1f 	bfi	lr, r1, #24, #8
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 80089e6:	6971      	ldr	r1, [r6, #20]
	*ptr++ = (BYTE)val; val >>= 8;
 80089e8:	f362 6c1f 	bfi	ip, r2, #24, #8
 80089ec:	f8c1 e038 	str.w	lr, [r1, #56]	; 0x38
 80089f0:	469e      	mov	lr, r3
 80089f2:	f8c1 c03c 	str.w	ip, [r1, #60]	; 0x3c
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 80089f6:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
	*ptr++ = (BYTE)val; val >>= 8;
 80089fa:	ea4f 2811 	mov.w	r8, r1, lsr #8
 80089fe:	f361 0707 	bfi	r7, r1, #0, #8
	*ptr++ = (BYTE)val; val >>= 8;
 8008a02:	ea4f 4c11 	mov.w	ip, r1, lsr #16
	*ptr++ = (BYTE)val; val >>= 8;
 8008a06:	f362 0e07 	bfi	lr, r2, #0, #8
 8008a0a:	ea48 6802 	orr.w	r8, r8, r2, lsl #24
	*ptr++ = (BYTE)val; val >>= 8;
 8008a0e:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
	*ptr++ = (BYTE)val; val >>= 8;
 8008a12:	f368 270f 	bfi	r7, r8, #8, #8
	*ptr++ = (BYTE)val; val >>= 8;
 8008a16:	ea4f 2812 	mov.w	r8, r2, lsr #8
	*ptr++ = (BYTE)val; val >>= 8;
 8008a1a:	0e09      	lsrs	r1, r1, #24
	*ptr++ = (BYTE)val; val >>= 8;
 8008a1c:	f36c 4717 	bfi	r7, ip, #16, #8
 8008a20:	f368 2e0f 	bfi	lr, r8, #8, #8
	*ptr++ = (BYTE)val; val >>= 8;
 8008a24:	ea4f 4c12 	mov.w	ip, r2, lsr #16
	*ptr++ = (BYTE)val; val >>= 8;
 8008a28:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
	*ptr++ = (BYTE)val; val >>= 8;
 8008a2c:	f36c 4e17 	bfi	lr, ip, #16, #8
	*ptr++ = (BYTE)val; val >>= 8;
 8008a30:	0e12      	lsrs	r2, r2, #24
	*ptr++ = (BYTE)val; val >>= 8;
 8008a32:	f361 671f 	bfi	r7, r1, #24, #8
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 8008a36:	6971      	ldr	r1, [r6, #20]
	*ptr++ = (BYTE)val; val >>= 8;
 8008a38:	f362 6e1f 	bfi	lr, r2, #24, #8
	*ptr++ = (BYTE)val; val >>= 8;
 8008a3c:	ea4f 2c15 	mov.w	ip, r5, lsr #8
	*ptr++ = (BYTE)val; val >>= 8;
 8008a40:	628f      	str	r7, [r1, #40]	; 0x28
	*ptr++ = (BYTE)val; val >>= 8;
 8008a42:	0c2f      	lsrs	r7, r5, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8008a44:	f8c1 e02c 	str.w	lr, [r1, #44]	; 0x2c
	*ptr++ = (BYTE)val; val >>= 8;
 8008a48:	0e29      	lsrs	r1, r5, #24
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 8008a4a:	6972      	ldr	r2, [r6, #20]
	*ptr++ = (BYTE)val; val >>= 8;
 8008a4c:	7315      	strb	r5, [r2, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 8008a4e:	f882 c00d 	strb.w	ip, [r2, #13]
	*ptr++ = (BYTE)val; val >>= 8;
 8008a52:	7397      	strb	r7, [r2, #14]
	*ptr++ = (BYTE)val;
 8008a54:	73d1      	strb	r1, [r2, #15]
						fs->dirbuf[XDIR_ModTime10] = 0;
 8008a56:	6972      	ldr	r2, [r6, #20]
 8008a58:	7553      	strb	r3, [r2, #21]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 8008a5a:	6972      	ldr	r2, [r6, #20]
	*ptr++ = (BYTE)val; val >>= 8;
 8008a5c:	6113      	str	r3, [r2, #16]
						res = store_xdir(&dj);	/* Restore it to the directory */
 8008a5e:	f7fd fc17 	bl	8006290 <store_xdir>
						if (res == FR_OK) {
 8008a62:	4603      	mov	r3, r0
 8008a64:	2800      	cmp	r0, #0
 8008a66:	f47f aeeb 	bne.w	8008840 <f_sync+0x20>
							res = sync_fs(fs);
 8008a6a:	4630      	mov	r0, r6
 8008a6c:	e72c      	b.n	80088c8 <f_sync+0xa8>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8008a6e:	0c1b      	lsrs	r3, r3, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8008a70:	0a1a      	lsrs	r2, r3, #8
 8008a72:	750b      	strb	r3, [r1, #20]
	*ptr++ = (BYTE)val;
 8008a74:	754a      	strb	r2, [r1, #21]
}
 8008a76:	e712      	b.n	800889e <f_sync+0x7e>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 8008a78:	69a3      	ldr	r3, [r4, #24]
 8008a7a:	f8d4 9008 	ldr.w	r9, [r4, #8]
 8008a7e:	b313      	cbz	r3, 8008ac6 <f_sync+0x2a6>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008a80:	f1b9 0f01 	cmp.w	r9, #1
 8008a84:	d91d      	bls.n	8008ac2 <f_sync+0x2a2>
 8008a86:	444b      	add	r3, r9
			res = put_fat(obj->fs, cl, cl + 1);
 8008a88:	6820      	ldr	r0, [r4, #0]
 8008a8a:	f109 0701 	add.w	r7, r9, #1
 8008a8e:	4649      	mov	r1, r9
 8008a90:	f103 38ff 	add.w	r8, r3, #4294967295
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008a94:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8008a96:	463a      	mov	r2, r7
 8008a98:	454b      	cmp	r3, r9
 8008a9a:	d912      	bls.n	8008ac2 <f_sync+0x2a2>
 8008a9c:	f7fc f89a 	bl	8004bd4 <put_fat.part.0>
			if (res != FR_OK) return res;
 8008aa0:	4603      	mov	r3, r0
 8008aa2:	2800      	cmp	r0, #0
 8008aa4:	f47f aecc 	bne.w	8008840 <f_sync+0x20>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 8008aa8:	45c1      	cmp	r9, r8
			res = put_fat(obj->fs, cl, cl + 1);
 8008aaa:	46b9      	mov	r9, r7
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 8008aac:	d00b      	beq.n	8008ac6 <f_sync+0x2a6>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008aae:	2f01      	cmp	r7, #1
 8008ab0:	d907      	bls.n	8008ac2 <f_sync+0x2a2>
			res = put_fat(obj->fs, cl, cl + 1);
 8008ab2:	6820      	ldr	r0, [r4, #0]
 8008ab4:	f109 0701 	add.w	r7, r9, #1
 8008ab8:	4649      	mov	r1, r9
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008aba:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8008abc:	463a      	mov	r2, r7
 8008abe:	454b      	cmp	r3, r9
 8008ac0:	d8ec      	bhi.n	8008a9c <f_sync+0x27c>
	FRESULT res = FR_INT_ERR;
 8008ac2:	2302      	movs	r3, #2
 8008ac4:	e6bc      	b.n	8008840 <f_sync+0x20>
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	71e3      	strb	r3, [r4, #7]
				if (res == FR_OK) {
 8008aca:	e70e      	b.n	80088ea <f_sync+0xca>

08008acc <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008acc:	b538      	push	{r3, r4, r5, lr}
 8008ace:	4604      	mov	r4, r0
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008ad0:	f7ff fea6 	bl	8008820 <f_sync>
	if (res == FR_OK)
 8008ad4:	b100      	cbz	r0, 8008ad8 <f_close+0xc>
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 8008ad6:	bd38      	pop	{r3, r4, r5, pc}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008ad8:	b13c      	cbz	r4, 8008aea <f_close+0x1e>
 8008ada:	6823      	ldr	r3, [r4, #0]
 8008adc:	b12b      	cbz	r3, 8008aea <f_close+0x1e>
 8008ade:	781a      	ldrb	r2, [r3, #0]
 8008ae0:	b11a      	cbz	r2, 8008aea <f_close+0x1e>
 8008ae2:	88a1      	ldrh	r1, [r4, #4]
 8008ae4:	88da      	ldrh	r2, [r3, #6]
 8008ae6:	4291      	cmp	r1, r2
 8008ae8:	d001      	beq.n	8008aee <f_close+0x22>
	FRESULT res = FR_INVALID_OBJECT;
 8008aea:	2009      	movs	r0, #9
}
 8008aec:	bd38      	pop	{r3, r4, r5, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008aee:	7858      	ldrb	r0, [r3, #1]
 8008af0:	f7fb fde2 	bl	80046b8 <disk_status>
 8008af4:	f010 0001 	ands.w	r0, r0, #1
 8008af8:	d1f7      	bne.n	8008aea <f_close+0x1e>
	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008afa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008afc:	3b01      	subs	r3, #1
 8008afe:	2b01      	cmp	r3, #1
 8008b00:	d80f      	bhi.n	8008b22 <f_close+0x56>
		n = Files[i].ctr;
 8008b02:	490b      	ldr	r1, [pc, #44]	; (8008b30 <f_close+0x64>)
 8008b04:	011d      	lsls	r5, r3, #4
 8008b06:	eb01 1303 	add.w	r3, r1, r3, lsl #4
 8008b0a:	899a      	ldrh	r2, [r3, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8008b0c:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8008b10:	d009      	beq.n	8008b26 <f_close+0x5a>
		if (n > 0) n--;				/* Decrement read mode open count */
 8008b12:	b14a      	cbz	r2, 8008b28 <f_close+0x5c>
 8008b14:	3a01      	subs	r2, #1
 8008b16:	b292      	uxth	r2, r2
		Files[i].ctr = n;
 8008b18:	819a      	strh	r2, [r3, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008b1a:	b12a      	cbz	r2, 8008b28 <f_close+0x5c>
				fp->obj.fs = 0;			/* Invalidate file object */
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	6023      	str	r3, [r4, #0]
}
 8008b20:	bd38      	pop	{r3, r4, r5, pc}
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008b22:	2002      	movs	r0, #2
}
 8008b24:	bd38      	pop	{r3, r4, r5, pc}
		Files[i].ctr = n;
 8008b26:	8198      	strh	r0, [r3, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008b28:	2300      	movs	r3, #0
 8008b2a:	514b      	str	r3, [r1, r5]
			if (res == FR_OK)
 8008b2c:	e7f6      	b.n	8008b1c <f_close+0x50>
 8008b2e:	bf00      	nop
 8008b30:	2000009c 	.word	0x2000009c

08008b34 <f_getcwd>:
#if _FS_RPATH >= 2
FRESULT f_getcwd (
	TCHAR* buff,	/* Pointer to the directory path */
	UINT len		/* Size of path */
)
{
 8008b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	TCHAR *tp;
	FILINFO fno;
	DEF_NAMBUF


	*buff = 0;
 8008b38:	2200      	movs	r2, #0
{
 8008b3a:	f5ad 6dbd 	sub.w	sp, sp, #1512	; 0x5e8
 8008b3e:	4688      	mov	r8, r1
 8008b40:	9001      	str	r0, [sp, #4]
	/* Get logical drive */
	res = find_volume((const TCHAR**)&buff, &fs, 0);	/* Get current volume */
 8008b42:	a903      	add	r1, sp, #12
	*buff = 0;
 8008b44:	7002      	strb	r2, [r0, #0]
	res = find_volume((const TCHAR**)&buff, &fs, 0);	/* Get current volume */
 8008b46:	a801      	add	r0, sp, #4
 8008b48:	f7fc fce2 	bl	8005510 <find_volume>
	if (res == FR_OK) {
 8008b4c:	4607      	mov	r7, r0
 8008b4e:	2800      	cmp	r0, #0
 8008b50:	d178      	bne.n	8008c44 <f_getcwd+0x110>
		dj.obj.fs = fs;
 8008b52:	9b03      	ldr	r3, [sp, #12]
		INIT_NAMBUF(fs);
 8008b54:	aa62      	add	r2, sp, #392	; 0x188
 8008b56:	a9e2      	add	r1, sp, #904	; 0x388
		dj.obj.fs = fs;
 8008b58:	9304      	str	r3, [sp, #16]
		INIT_NAMBUF(fs);
 8008b5a:	611a      	str	r2, [r3, #16]
		i = len;			/* Bottom of buffer (directory stack base) */
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {	/* (Cannot do getcwd on exFAT and returns root path) */
 8008b5c:	781a      	ldrb	r2, [r3, #0]
		INIT_NAMBUF(fs);
 8008b5e:	6159      	str	r1, [r3, #20]
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {	/* (Cannot do getcwd on exFAT and returns root path) */
 8008b60:	2a04      	cmp	r2, #4
 8008b62:	f000 80e5 	beq.w	8008d30 <f_getcwd+0x1fc>
			dj.obj.sclust = fs->cdir;				/* Start to follow upper directory from current directory */
 8008b66:	6a1e      	ldr	r6, [r3, #32]
 8008b68:	9606      	str	r6, [sp, #24]
			while ((ccl = dj.obj.sclust) != 0) {	/* Repeat while current directory is a sub-directory */
 8008b6a:	2e00      	cmp	r6, #0
 8008b6c:	f000 80e0 	beq.w	8008d30 <f_getcwd+0x1fc>
 8008b70:	46c1      	mov	r9, r8
				res = dir_sdi(&dj, 1 * SZDIRE);	/* Get parent directory */
 8008b72:	2120      	movs	r1, #32
 8008b74:	a804      	add	r0, sp, #16
 8008b76:	f7fd fa47 	bl	8006008 <dir_sdi>
				if (res != FR_OK) break;
 8008b7a:	2800      	cmp	r0, #0
 8008b7c:	f040 80e3 	bne.w	8008d46 <f_getcwd+0x212>
				res = move_window(fs, dj.sect);
 8008b80:	9803      	ldr	r0, [sp, #12]
 8008b82:	9912      	ldr	r1, [sp, #72]	; 0x48
	if (sector != fs->winsect) {	/* Window offset changed? */
 8008b84:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8008b86:	4299      	cmp	r1, r3
 8008b88:	d005      	beq.n	8008b96 <f_getcwd+0x62>
 8008b8a:	f7fb ffe9 	bl	8004b60 <move_window.part.0>
				if (res != FR_OK) break;
 8008b8e:	2800      	cmp	r0, #0
 8008b90:	f040 80d9 	bne.w	8008d46 <f_getcwd+0x212>
 8008b94:	9803      	ldr	r0, [sp, #12]
				dj.obj.sclust = ld_clust(fs, dj.dir);	/* Goto parent directory */
 8008b96:	9a13      	ldr	r2, [sp, #76]	; 0x4c
	if (fs->fs_type == FS_FAT32) {
 8008b98:	7801      	ldrb	r1, [r0, #0]
	rv = rv << 8 | ptr[0];
 8008b9a:	7e93      	ldrb	r3, [r2, #26]
 8008b9c:	7ed0      	ldrb	r0, [r2, #27]
	if (fs->fs_type == FS_FAT32) {
 8008b9e:	2903      	cmp	r1, #3
	cl = ld_word(dir + DIR_FstClusLO);
 8008ba0:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
	if (fs->fs_type == FS_FAT32) {
 8008ba4:	d105      	bne.n	8008bb2 <f_getcwd+0x7e>
	rv = rv << 8 | ptr[0];
 8008ba6:	7d51      	ldrb	r1, [r2, #21]
 8008ba8:	7d12      	ldrb	r2, [r2, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8008baa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8008bae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
				res = dir_sdi(&dj, 0);
 8008bb2:	2100      	movs	r1, #0
 8008bb4:	a804      	add	r0, sp, #16
				dj.obj.sclust = ld_clust(fs, dj.dir);	/* Goto parent directory */
 8008bb6:	9306      	str	r3, [sp, #24]
				res = dir_sdi(&dj, 0);
 8008bb8:	f7fd fa26 	bl	8006008 <dir_sdi>
				if (res != FR_OK) break;
 8008bbc:	2800      	cmp	r0, #0
 8008bbe:	f040 80c2 	bne.w	8008d46 <f_getcwd+0x212>
				do {							/* Find the entry links to the child directory */
					res = dir_read(&dj, 0);
 8008bc2:	a804      	add	r0, sp, #16
 8008bc4:	f7fc faf0 	bl	80051a8 <dir_read.constprop.0>
					if (res != FR_OK) break;
 8008bc8:	2800      	cmp	r0, #0
 8008bca:	d135      	bne.n	8008c38 <f_getcwd+0x104>
					if (ccl == ld_clust(fs, dj.dir)) break;	/* Found the entry */
 8008bcc:	9903      	ldr	r1, [sp, #12]
 8008bce:	9a13      	ldr	r2, [sp, #76]	; 0x4c
	if (fs->fs_type == FS_FAT32) {
 8008bd0:	7809      	ldrb	r1, [r1, #0]
	rv = rv << 8 | ptr[0];
 8008bd2:	7ed0      	ldrb	r0, [r2, #27]
 8008bd4:	7e93      	ldrb	r3, [r2, #26]
	if (fs->fs_type == FS_FAT32) {
 8008bd6:	2903      	cmp	r1, #3
	cl = ld_word(dir + DIR_FstClusLO);
 8008bd8:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
	if (fs->fs_type == FS_FAT32) {
 8008bdc:	d105      	bne.n	8008bea <f_getcwd+0xb6>
	rv = rv << 8 | ptr[0];
 8008bde:	7d51      	ldrb	r1, [r2, #21]
 8008be0:	7d12      	ldrb	r2, [r2, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8008be2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8008be6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
					if (ccl == ld_clust(fs, dj.dir)) break;	/* Found the entry */
 8008bea:	42b3      	cmp	r3, r6
 8008bec:	d04f      	beq.n	8008c8e <f_getcwd+0x15a>
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8008bee:	9c10      	ldr	r4, [sp, #64]	; 0x40
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8008bf0:	9b12      	ldr	r3, [sp, #72]	; 0x48
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8008bf2:	3420      	adds	r4, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8008bf4:	b313      	cbz	r3, 8008c3c <f_getcwd+0x108>
	FATFS *fs = dp->obj.fs;
 8008bf6:	9d04      	ldr	r5, [sp, #16]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8008bf8:	782a      	ldrb	r2, [r5, #0]
 8008bfa:	2a04      	cmp	r2, #4
 8008bfc:	bf0c      	ite	eq
 8008bfe:	f04f 5280 	moveq.w	r2, #268435456	; 0x10000000
 8008c02:	f44f 1200 	movne.w	r2, #2097152	; 0x200000
 8008c06:	4294      	cmp	r4, r2
 8008c08:	d218      	bcs.n	8008c3c <f_getcwd+0x108>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008c0a:	89aa      	ldrh	r2, [r5, #12]
 8008c0c:	fbb4 f0f2 	udiv	r0, r4, r2
 8008c10:	fb02 4210 	mls	r2, r2, r0, r4
 8008c14:	b93a      	cbnz	r2, 8008c26 <f_getcwd+0xf2>
		dp->sect++;				/* Next sector */
 8008c16:	3301      	adds	r3, #1
		if (!dp->clust) {		/* Static table */
 8008c18:	9911      	ldr	r1, [sp, #68]	; 0x44
		dp->sect++;				/* Next sector */
 8008c1a:	9312      	str	r3, [sp, #72]	; 0x48
		if (!dp->clust) {		/* Static table */
 8008c1c:	b9b9      	cbnz	r1, 8008c4e <f_getcwd+0x11a>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008c1e:	892b      	ldrh	r3, [r5, #8]
 8008c20:	ebb3 1f54 	cmp.w	r3, r4, lsr #5
 8008c24:	d90a      	bls.n	8008c3c <f_getcwd+0x108>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008c26:	354c      	adds	r5, #76	; 0x4c
					res = dir_read(&dj, 0);
 8008c28:	a804      	add	r0, sp, #16
	dp->dptr = ofs;						/* Current entry */
 8008c2a:	9410      	str	r4, [sp, #64]	; 0x40
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008c2c:	4415      	add	r5, r2
 8008c2e:	9513      	str	r5, [sp, #76]	; 0x4c
					res = dir_read(&dj, 0);
 8008c30:	f7fc faba 	bl	80051a8 <dir_read.constprop.0>
					if (res != FR_OK) break;
 8008c34:	2800      	cmp	r0, #0
 8008c36:	d0c9      	beq.n	8008bcc <f_getcwd+0x98>
					res = dir_next(&dj, 0);
				} while (res == FR_OK);
				if (res == FR_NO_FILE) res = FR_INT_ERR;/* It cannot be 'not found'. */
 8008c38:	2804      	cmp	r0, #4
 8008c3a:	d17f      	bne.n	8008d3c <f_getcwd+0x208>
 8008c3c:	2702      	movs	r7, #2
				}
				while (n) buff[--i] = fno.fname[--n];
				buff[--i] = '/';
			}
		}
		tp = buff;
 8008c3e:	9c01      	ldr	r4, [sp, #4]
				do		/* Add stacked path str */
					*tp++ = buff[i++];
				while (i < len);
			}
		}
		*tp = 0;
 8008c40:	2300      	movs	r3, #0
 8008c42:	7023      	strb	r3, [r4, #0]
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
 8008c44:	4638      	mov	r0, r7
 8008c46:	f50d 6dbd 	add.w	sp, sp, #1512	; 0x5e8
 8008c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8008c4e:	896b      	ldrh	r3, [r5, #10]
 8008c50:	3b01      	subs	r3, #1
 8008c52:	ea13 0a00 	ands.w	sl, r3, r0
 8008c56:	d1e6      	bne.n	8008c26 <f_getcwd+0xf2>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8008c58:	a804      	add	r0, sp, #16
 8008c5a:	f7fc f889 	bl	8004d70 <get_fat>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008c5e:	2801      	cmp	r0, #1
 8008c60:	d96f      	bls.n	8008d42 <f_getcwd+0x20e>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8008c62:	1c43      	adds	r3, r0, #1
 8008c64:	d069      	beq.n	8008d3a <f_getcwd+0x206>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8008c66:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8008c68:	4298      	cmp	r0, r3
 8008c6a:	d2e7      	bcs.n	8008c3c <f_getcwd+0x108>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008c6c:	3b02      	subs	r3, #2
	clst -= 2;
 8008c6e:	1e82      	subs	r2, r0, #2
				dp->clust = clst;		/* Initialize data for new cluster */
 8008c70:	9011      	str	r0, [sp, #68]	; 0x44
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008c72:	429a      	cmp	r2, r3
 8008c74:	d203      	bcs.n	8008c7e <f_getcwd+0x14a>
	return clst * fs->csize + fs->database;
 8008c76:	8968      	ldrh	r0, [r5, #10]
 8008c78:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8008c7a:	fb02 3a00 	mla	sl, r2, r0, r3
 8008c7e:	89ab      	ldrh	r3, [r5, #12]
				dp->sect = clust2sect(fs, clst);
 8008c80:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
 8008c84:	fbb4 f2f3 	udiv	r2, r4, r3
 8008c88:	fb03 4212 	mls	r2, r3, r2, r4
 8008c8c:	e7cb      	b.n	8008c26 <f_getcwd+0xf2>
				get_fileinfo(&dj, &fno);		/* Get the directory name and push it to the buffer */
 8008c8e:	a91a      	add	r1, sp, #104	; 0x68
 8008c90:	a804      	add	r0, sp, #16
 8008c92:	f7fb fe87 	bl	80049a4 <get_fileinfo>
				for (n = 0; fno.fname[n]; n++) ;
 8008c96:	f89d 3082 	ldrb.w	r3, [sp, #130]	; 0x82
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d043      	beq.n	8008d26 <f_getcwd+0x1f2>
 8008c9e:	f10d 0182 	add.w	r1, sp, #130	; 0x82
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008ca8:	4613      	mov	r3, r2
 8008caa:	3201      	adds	r2, #1
 8008cac:	2800      	cmp	r0, #0
 8008cae:	d1f9      	bne.n	8008ca4 <f_getcwd+0x170>
				if (i < n + 3) {
 8008cb0:	1d19      	adds	r1, r3, #4
 8008cb2:	4589      	cmp	r9, r1
 8008cb4:	d349      	bcc.n	8008d4a <f_getcwd+0x216>
				while (n) buff[--i] = fno.fname[--n];
 8008cb6:	2a00      	cmp	r2, #0
 8008cb8:	d038      	beq.n	8008d2c <f_getcwd+0x1f8>
 8008cba:	331a      	adds	r3, #26
 8008cbc:	a91a      	add	r1, sp, #104	; 0x68
 8008cbe:	eba9 0202 	sub.w	r2, r9, r2
 8008cc2:	440b      	add	r3, r1
 8008cc4:	f109 39ff 	add.w	r9, r9, #4294967295
 8008cc8:	f813 0901 	ldrb.w	r0, [r3], #-1
 8008ccc:	9901      	ldr	r1, [sp, #4]
 8008cce:	4591      	cmp	r9, r2
 8008cd0:	f801 0009 	strb.w	r0, [r1, r9]
 8008cd4:	d1f6      	bne.n	8008cc4 <f_getcwd+0x190>
				buff[--i] = '/';
 8008cd6:	f102 39ff 	add.w	r9, r2, #4294967295
 8008cda:	9b01      	ldr	r3, [sp, #4]
 8008cdc:	212f      	movs	r1, #47	; 0x2f
 8008cde:	f803 1009 	strb.w	r1, [r3, r9]
			while ((ccl = dj.obj.sclust) != 0) {	/* Repeat while current directory is a sub-directory */
 8008ce2:	9e06      	ldr	r6, [sp, #24]
 8008ce4:	2e00      	cmp	r6, #0
 8008ce6:	f47f af44 	bne.w	8008b72 <f_getcwd+0x3e>
			if (i == len) {					/* Root-directory */
 8008cea:	45c8      	cmp	r8, r9
		tp = buff;
 8008cec:	9c01      	ldr	r4, [sp, #4]
			if (i == len) {					/* Root-directory */
 8008cee:	d020      	beq.n	8008d32 <f_getcwd+0x1fe>
					*tp++ = buff[i++];
 8008cf0:	f814 1009 	ldrb.w	r1, [r4, r9]
				while (i < len);
 8008cf4:	4590      	cmp	r8, r2
					*tp++ = buff[i++];
 8008cf6:	f104 0301 	add.w	r3, r4, #1
 8008cfa:	eba8 0609 	sub.w	r6, r8, r9
 8008cfe:	7021      	strb	r1, [r4, #0]
				while (i < len);
 8008d00:	d90a      	bls.n	8008d18 <f_getcwd+0x1e4>
 8008d02:	eba9 0904 	sub.w	r9, r9, r4
 8008d06:	19a5      	adds	r5, r4, r6
					*tp++ = buff[i++];
 8008d08:	eb03 0109 	add.w	r1, r3, r9
 8008d0c:	9801      	ldr	r0, [sp, #4]
 8008d0e:	5c41      	ldrb	r1, [r0, r1]
 8008d10:	f803 1b01 	strb.w	r1, [r3], #1
				while (i < len);
 8008d14:	42ab      	cmp	r3, r5
 8008d16:	d1f7      	bne.n	8008d08 <f_getcwd+0x1d4>
 8008d18:	4590      	cmp	r8, r2
 8008d1a:	bf2c      	ite	cs
 8008d1c:	4632      	movcs	r2, r6
 8008d1e:	2201      	movcc	r2, #1
		tp = buff;
 8008d20:	2700      	movs	r7, #0
 8008d22:	4414      	add	r4, r2
 8008d24:	e78c      	b.n	8008c40 <f_getcwd+0x10c>
				if (i < n + 3) {
 8008d26:	f1b9 0f02 	cmp.w	r9, #2
 8008d2a:	d90e      	bls.n	8008d4a <f_getcwd+0x216>
				while (n) buff[--i] = fno.fname[--n];
 8008d2c:	464a      	mov	r2, r9
 8008d2e:	e7d2      	b.n	8008cd6 <f_getcwd+0x1a2>
		tp = buff;
 8008d30:	9c01      	ldr	r4, [sp, #4]
				*tp++ = '/';
 8008d32:	232f      	movs	r3, #47	; 0x2f
 8008d34:	f804 3b01 	strb.w	r3, [r4], #1
 8008d38:	e782      	b.n	8008c40 <f_getcwd+0x10c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8008d3a:	2001      	movs	r0, #1
		tp = buff;
 8008d3c:	9c01      	ldr	r4, [sp, #4]
 8008d3e:	4607      	mov	r7, r0
 8008d40:	e77e      	b.n	8008c40 <f_getcwd+0x10c>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008d42:	2002      	movs	r0, #2
 8008d44:	e7fa      	b.n	8008d3c <f_getcwd+0x208>
				res = dir_sdi(&dj, 0);
 8008d46:	4607      	mov	r7, r0
 8008d48:	e779      	b.n	8008c3e <f_getcwd+0x10a>
					res = FR_NOT_ENOUGH_CORE; break;
 8008d4a:	2711      	movs	r7, #17
 8008d4c:	e777      	b.n	8008c3e <f_getcwd+0x10a>
 8008d4e:	bf00      	nop

08008d50 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8008d50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008d54:	f2ad 4d74 	subw	sp, sp, #1140	; 0x474
 8008d58:	9101      	str	r1, [sp, #4]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8008d5a:	2800      	cmp	r0, #0
 8008d5c:	d040      	beq.n	8008de0 <f_opendir+0x90>

	/* Get logical drive */
	obj = &dp->obj;
 8008d5e:	4604      	mov	r4, r0
	res = find_volume(&path, &fs, 0);
 8008d60:	2200      	movs	r2, #0
 8008d62:	a801      	add	r0, sp, #4
 8008d64:	a903      	add	r1, sp, #12
 8008d66:	f7fc fbd3 	bl	8005510 <find_volume>
	if (res == FR_OK) {
 8008d6a:	b128      	cbz	r0, 8008d78 <f_opendir+0x28>
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	6023      	str	r3, [r4, #0]

	LEAVE_FF(fs, res);
}
 8008d70:	f20d 4d74 	addw	sp, sp, #1140	; 0x474
 8008d74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		obj->fs = fs;
 8008d78:	9b03      	ldr	r3, [sp, #12]
		INIT_NAMBUF(fs);
 8008d7a:	a804      	add	r0, sp, #16
 8008d7c:	aa84      	add	r2, sp, #528	; 0x210
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8008d7e:	9901      	ldr	r1, [sp, #4]
		obj->fs = fs;
 8008d80:	6023      	str	r3, [r4, #0]
		INIT_NAMBUF(fs);
 8008d82:	6118      	str	r0, [r3, #16]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8008d84:	4620      	mov	r0, r4
		INIT_NAMBUF(fs);
 8008d86:	615a      	str	r2, [r3, #20]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8008d88:	f7fd fd5c 	bl	8006844 <follow_path>
		if (res == FR_OK) {						/* Follow completed */
 8008d8c:	bb20      	cbnz	r0, 8008dd8 <f_opendir+0x88>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8008d8e:	f994 304b 	ldrsb.w	r3, [r4, #75]	; 0x4b
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	db29      	blt.n	8008dea <f_opendir+0x9a>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8008d96:	79a3      	ldrb	r3, [r4, #6]
 8008d98:	06db      	lsls	r3, r3, #27
 8008d9a:	d51f      	bpl.n	8008ddc <f_opendir+0x8c>
					if (fs->fs_type == FS_EXFAT) {
 8008d9c:	9a03      	ldr	r2, [sp, #12]
 8008d9e:	7811      	ldrb	r1, [r2, #0]
 8008da0:	2904      	cmp	r1, #4
 8008da2:	d024      	beq.n	8008dee <f_opendir+0x9e>
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8008da4:	6be0      	ldr	r0, [r4, #60]	; 0x3c
	if (fs->fs_type == FS_FAT32) {
 8008da6:	2903      	cmp	r1, #3
	rv = rv << 8 | ptr[0];
 8008da8:	7ec5      	ldrb	r5, [r0, #27]
 8008daa:	7e83      	ldrb	r3, [r0, #26]
	cl = ld_word(dir + DIR_FstClusLO);
 8008dac:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	if (fs->fs_type == FS_FAT32) {
 8008db0:	d105      	bne.n	8008dbe <f_opendir+0x6e>
	rv = rv << 8 | ptr[0];
 8008db2:	7d45      	ldrb	r5, [r0, #21]
 8008db4:	7d01      	ldrb	r1, [r0, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8008db6:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
 8008dba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8008dbe:	60a3      	str	r3, [r4, #8]
				obj->id = fs->id;
 8008dc0:	88d3      	ldrh	r3, [r2, #6]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8008dc2:	2100      	movs	r1, #0
 8008dc4:	4620      	mov	r0, r4
				obj->id = fs->id;
 8008dc6:	80a3      	strh	r3, [r4, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8008dc8:	f7fd f91e 	bl	8006008 <dir_sdi>
				if (res == FR_OK) {
 8008dcc:	b920      	cbnz	r0, 8008dd8 <f_opendir+0x88>
					if (obj->sclust) {
 8008dce:	68a3      	ldr	r3, [r4, #8]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d141      	bne.n	8008e58 <f_opendir+0x108>
						obj->lockid = 0;	/* Root directory need not to be locked */
 8008dd4:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8008dd6:	e7cb      	b.n	8008d70 <f_opendir+0x20>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8008dd8:	2804      	cmp	r0, #4
 8008dda:	d1c7      	bne.n	8008d6c <f_opendir+0x1c>
 8008ddc:	2005      	movs	r0, #5
 8008dde:	e7c5      	b.n	8008d6c <f_opendir+0x1c>
	if (!dp) return FR_INVALID_OBJECT;
 8008de0:	2009      	movs	r0, #9
}
 8008de2:	f20d 4d74 	addw	sp, sp, #1140	; 0x474
 8008de6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008dea:	9a03      	ldr	r2, [sp, #12]
 8008dec:	e7e8      	b.n	8008dc0 <f_opendir+0x70>
						obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 8008dee:	6923      	ldr	r3, [r4, #16]
 8008df0:	79e1      	ldrb	r1, [r4, #7]
 8008df2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
						obj->c_scl = obj->sclust;							/* Get containing directory inforamation */
 8008df6:	68a5      	ldr	r5, [r4, #8]
						obj->c_ofs = dp->blk_ofs;
 8008df8:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
						obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 8008dfa:	430b      	orrs	r3, r1
						obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 8008dfc:	6951      	ldr	r1, [r2, #20]
						obj->c_ofs = dp->blk_ofs;
 8008dfe:	62a0      	str	r0, [r4, #40]	; 0x28
						obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 8008e00:	e9c4 5308 	strd	r5, r3, [r4, #32]
	rv = rv << 8 | ptr[2];
 8008e04:	8ecd      	ldrh	r5, [r1, #54]	; 0x36
	rv = rv << 8 | ptr[1];
 8008e06:	f891 0035 	ldrb.w	r0, [r1, #53]	; 0x35
	rv = rv << 8 | ptr[0];
 8008e0a:	f891 3034 	ldrb.w	r3, [r1, #52]	; 0x34
	rv = rv << 8 | ptr[1];
 8008e0e:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
	rv = rv << 8 | ptr[0];
 8008e12:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
						obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 8008e16:	60a3      	str	r3, [r4, #8]
	rv = rv << 8 | ptr[3];
 8008e18:	f891 803b 	ldrb.w	r8, [r1, #59]	; 0x3b
	rv = rv << 8 | ptr[4];
 8008e1c:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
	rv = rv << 8 | ptr[2];
 8008e1e:	f891 603a 	ldrb.w	r6, [r1, #58]	; 0x3a
 8008e22:	ea48 2003 	orr.w	r0, r8, r3, lsl #8
	rv = rv << 8 | ptr[0];
 8008e26:	f891 8038 	ldrb.w	r8, [r1, #56]	; 0x38
	rv = rv << 8 | ptr[2];
 8008e2a:	0c1b      	lsrs	r3, r3, #16
 8008e2c:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
	rv = rv << 8 | ptr[1];
 8008e30:	f891 6039 	ldrb.w	r6, [r1, #57]	; 0x39
 8008e34:	021b      	lsls	r3, r3, #8
 8008e36:	ea46 2600 	orr.w	r6, r6, r0, lsl #8
 8008e3a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
	rv = rv << 8 | ptr[0];
 8008e3e:	ea48 2006 	orr.w	r0, r8, r6, lsl #8
 8008e42:	021b      	lsls	r3, r3, #8
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 8008e44:	6120      	str	r0, [r4, #16]
	rv = rv << 8 | ptr[0];
 8008e46:	ea43 6316 	orr.w	r3, r3, r6, lsr #24
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 8008e4a:	6163      	str	r3, [r4, #20]
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 8008e4c:	f891 3021 	ldrb.w	r3, [r1, #33]	; 0x21
 8008e50:	f003 0302 	and.w	r3, r3, #2
 8008e54:	71e3      	strb	r3, [r4, #7]
 8008e56:	e7b3      	b.n	8008dc0 <f_opendir+0x70>
		if (Files[i].fs == dp->obj.fs &&
 8008e58:	4a1d      	ldr	r2, [pc, #116]	; (8008ed0 <f_opendir+0x180>)
 8008e5a:	6825      	ldr	r5, [r4, #0]
 8008e5c:	6811      	ldr	r1, [r2, #0]
 8008e5e:	428d      	cmp	r5, r1
 8008e60:	d01e      	beq.n	8008ea0 <f_opendir+0x150>
 8008e62:	f8d2 c010 	ldr.w	ip, [r2, #16]
 8008e66:	45ac      	cmp	ip, r5
 8008e68:	d007      	beq.n	8008e7a <f_opendir+0x12a>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008e6a:	b319      	cbz	r1, 8008eb4 <f_opendir+0x164>
 8008e6c:	f1bc 0f00 	cmp.w	ip, #0
 8008e70:	d01f      	beq.n	8008eb2 <f_opendir+0x162>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8008e72:	2300      	movs	r3, #0
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8008e74:	2012      	movs	r0, #18
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8008e76:	62e3      	str	r3, [r4, #44]	; 0x2c
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8008e78:	e778      	b.n	8008d6c <f_opendir+0x1c>
		if (Files[i].fs == dp->obj.fs &&
 8008e7a:	6957      	ldr	r7, [r2, #20]
 8008e7c:	42bb      	cmp	r3, r7
 8008e7e:	d1f4      	bne.n	8008e6a <f_opendir+0x11a>
			Files[i].clu == dp->obj.sclust &&
 8008e80:	6996      	ldr	r6, [r2, #24]
 8008e82:	6b27      	ldr	r7, [r4, #48]	; 0x30
 8008e84:	42be      	cmp	r6, r7
 8008e86:	d1f0      	bne.n	8008e6a <f_opendir+0x11a>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008e88:	2101      	movs	r1, #1
 8008e8a:	eb02 1301 	add.w	r3, r2, r1, lsl #4
 8008e8e:	010f      	lsls	r7, r1, #4
 8008e90:	899d      	ldrh	r5, [r3, #12]
 8008e92:	3501      	adds	r5, #1
 8008e94:	b2ad      	uxth	r5, r5
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008e96:	443a      	add	r2, r7
	return i + 1;
 8008e98:	3101      	adds	r1, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008e9a:	8195      	strh	r5, [r2, #12]
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8008e9c:	62e1      	str	r1, [r4, #44]	; 0x2c
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8008e9e:	e767      	b.n	8008d70 <f_opendir+0x20>
		if (Files[i].fs == dp->obj.fs &&
 8008ea0:	6856      	ldr	r6, [r2, #4]
 8008ea2:	42b3      	cmp	r3, r6
 8008ea4:	d1dd      	bne.n	8008e62 <f_opendir+0x112>
			Files[i].clu == dp->obj.sclust &&
 8008ea6:	6897      	ldr	r7, [r2, #8]
 8008ea8:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8008eaa:	42b7      	cmp	r7, r6
 8008eac:	d1d9      	bne.n	8008e62 <f_opendir+0x112>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008eae:	4601      	mov	r1, r0
 8008eb0:	e7eb      	b.n	8008e8a <f_opendir+0x13a>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008eb2:	2101      	movs	r1, #1
		Files[i].fs = dp->obj.fs;
 8008eb4:	eb02 1c01 	add.w	ip, r2, r1, lsl #4
		Files[i].ofs = dp->dptr;
 8008eb8:	6b26      	ldr	r6, [r4, #48]	; 0x30
		Files[i].fs = dp->obj.fs;
 8008eba:	010f      	lsls	r7, r1, #4
		Files[i].ctr = 0;
 8008ebc:	f04f 0e00 	mov.w	lr, #0
		Files[i].fs = dp->obj.fs;
 8008ec0:	51d5      	str	r5, [r2, r7]
		Files[i].ctr = 0;
 8008ec2:	2501      	movs	r5, #1
 8008ec4:	f8ac e00c 	strh.w	lr, [ip, #12]
		Files[i].ofs = dp->dptr;
 8008ec8:	e9cc 3601 	strd	r3, r6, [ip, #4]
		Files[i].ctr = 0;
 8008ecc:	e7e3      	b.n	8008e96 <f_opendir+0x146>
 8008ece:	bf00      	nop
 8008ed0:	2000009c 	.word	0x2000009c

08008ed4 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8008ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ed8:	f2ad 4dd4 	subw	sp, sp, #1236	; 0x4d4
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8008edc:	2202      	movs	r2, #2
{
 8008ede:	9003      	str	r0, [sp, #12]
	res = find_volume(&path, &fs, FA_WRITE);
 8008ee0:	a905      	add	r1, sp, #20
 8008ee2:	a803      	add	r0, sp, #12
 8008ee4:	f7fc fb14 	bl	8005510 <find_volume>
	dj.obj.fs = fs;
 8008ee8:	9b05      	ldr	r3, [sp, #20]
	if (res == FR_OK) {
 8008eea:	4604      	mov	r4, r0
	dj.obj.fs = fs;
 8008eec:	9306      	str	r3, [sp, #24]
	if (res == FR_OK) {
 8008eee:	b120      	cbz	r0, 8008efa <f_mkdir+0x26>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
 8008ef0:	4620      	mov	r0, r4
 8008ef2:	f20d 4dd4 	addw	sp, sp, #1236	; 0x4d4
 8008ef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		INIT_NAMBUF(fs);
 8008efa:	a81c      	add	r0, sp, #112	; 0x70
 8008efc:	aa9c      	add	r2, sp, #624	; 0x270
		res = follow_path(&dj, path);			/* Follow the file path */
 8008efe:	9903      	ldr	r1, [sp, #12]
		INIT_NAMBUF(fs);
 8008f00:	6118      	str	r0, [r3, #16]
		res = follow_path(&dj, path);			/* Follow the file path */
 8008f02:	a806      	add	r0, sp, #24
		INIT_NAMBUF(fs);
 8008f04:	615a      	str	r2, [r3, #20]
		res = follow_path(&dj, path);			/* Follow the file path */
 8008f06:	f7fd fc9d 	bl	8006844 <follow_path>
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8008f0a:	4604      	mov	r4, r0
 8008f0c:	2800      	cmp	r0, #0
 8008f0e:	f000 80d6 	beq.w	80090be <f_mkdir+0x1ea>
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 8008f12:	2804      	cmp	r0, #4
 8008f14:	d1ec      	bne.n	8008ef0 <f_mkdir+0x1c>
 8008f16:	f89d 8063 	ldrb.w	r8, [sp, #99]	; 0x63
 8008f1a:	f018 0820 	ands.w	r8, r8, #32
 8008f1e:	f040 80dd 	bne.w	80090dc <f_mkdir+0x208>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8008f22:	4641      	mov	r1, r8
 8008f24:	a806      	add	r0, sp, #24
 8008f26:	f7fc fe5f 	bl	8005be8 <create_chain>
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8008f2a:	9c05      	ldr	r4, [sp, #20]
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8008f2c:	4607      	mov	r7, r0
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8008f2e:	8962      	ldrh	r2, [r4, #10]
 8008f30:	89a3      	ldrh	r3, [r4, #12]
 8008f32:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8008f36:	fb03 f302 	mul.w	r3, r3, r2
 8008f3a:	930a      	str	r3, [sp, #40]	; 0x28
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8008f3c:	2800      	cmp	r0, #0
 8008f3e:	f000 80c4 	beq.w	80090ca <f_mkdir+0x1f6>
			if (dcl == 1) res = FR_INT_ERR;
 8008f42:	2801      	cmp	r0, #1
 8008f44:	f000 80fd 	beq.w	8009142 <f_mkdir+0x26e>
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8008f48:	1c43      	adds	r3, r0, #1
 8008f4a:	f000 80f6 	beq.w	800913a <f_mkdir+0x266>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008f4e:	78e3      	ldrb	r3, [r4, #3]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	f040 8144 	bne.w	80091de <f_mkdir+0x30a>
			tm = GET_FATTIME();
 8008f56:	f7fb fac7 	bl	80044e8 <get_fattime>
				dsc = clust2sect(fs, dcl);
 8008f5a:	9d05      	ldr	r5, [sp, #20]
	clst -= 2;
 8008f5c:	1eba      	subs	r2, r7, #2
			tm = GET_FATTIME();
 8008f5e:	9002      	str	r0, [sp, #8]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008f60:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8008f62:	3b02      	subs	r3, #2
 8008f64:	429a      	cmp	r2, r3
 8008f66:	f080 80ee 	bcs.w	8009146 <f_mkdir+0x272>
	return clst * fs->csize + fs->database;
 8008f6a:	896e      	ldrh	r6, [r5, #10]
 8008f6c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8008f6e:	fb02 3606 	mla	r6, r2, r6, r3
				dir = fs->win;
 8008f72:	f105 0a4c 	add.w	sl, r5, #76	; 0x4c
void mem_set (void* dst, int val, UINT cnt) {
 8008f76:	89aa      	ldrh	r2, [r5, #12]
 8008f78:	2100      	movs	r1, #0
 8008f7a:	4650      	mov	r0, sl
 8008f7c:	f000 fa3e 	bl	80093fc <memset>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 8008f80:	782b      	ldrb	r3, [r5, #0]
 8008f82:	2b04      	cmp	r3, #4
 8008f84:	f000 80e1 	beq.w	800914a <f_mkdir+0x276>
 8008f88:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
	*ptr++ = (BYTE)val; val >>= 8;
 8008f8c:	9902      	ldr	r1, [sp, #8]
					dir[DIR_Attr] = AM_DIR;
 8008f8e:	f04f 0c10 	mov.w	ip, #16
					dir[DIR_Name] = '.';
 8008f92:	f04f 0e2e 	mov.w	lr, #46	; 0x2e
 8008f96:	64eb      	str	r3, [r5, #76]	; 0x4c
	*ptr++ = (BYTE)val; val >>= 8;
 8008f98:	0a08      	lsrs	r0, r1, #8
 8008f9a:	f8ca 3004 	str.w	r3, [sl, #4]
 8008f9e:	f8ca 3007 	str.w	r3, [sl, #7]
	*ptr++ = (BYTE)val; val >>= 8;
 8008fa2:	460b      	mov	r3, r1
	if (fs->fs_type == FS_FAT32) {
 8008fa4:	782c      	ldrb	r4, [r5, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008fa6:	fa21 f10c 	lsr.w	r1, r1, ip
	*ptr++ = (BYTE)val; val >>= 8;
 8008faa:	0e1a      	lsrs	r2, r3, #24
	*ptr++ = (BYTE)val; val >>= 8;
 8008fac:	f885 3062 	strb.w	r3, [r5, #98]	; 0x62
	if (fs->fs_type == FS_FAT32) {
 8008fb0:	2c03      	cmp	r4, #3
	*ptr++ = (BYTE)val; val >>= 8;
 8008fb2:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8008fb6:	f885 7066 	strb.w	r7, [r5, #102]	; 0x66
					dir[DIR_Name] = '.';
 8008fba:	f885 e04c 	strb.w	lr, [r5, #76]	; 0x4c
					dir[DIR_Attr] = AM_DIR;
 8008fbe:	f885 c057 	strb.w	ip, [r5, #87]	; 0x57
	*ptr++ = (BYTE)val; val >>= 8;
 8008fc2:	f885 0063 	strb.w	r0, [r5, #99]	; 0x63
	*ptr++ = (BYTE)val; val >>= 8;
 8008fc6:	f885 1064 	strb.w	r1, [r5, #100]	; 0x64
	*ptr++ = (BYTE)val;
 8008fca:	f885 2065 	strb.w	r2, [r5, #101]	; 0x65
	*ptr++ = (BYTE)val;
 8008fce:	f885 3067 	strb.w	r3, [r5, #103]	; 0x67
	if (fs->fs_type == FS_FAT32) {
 8008fd2:	d106      	bne.n	8008fe2 <f_mkdir+0x10e>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8008fd4:	fa27 f30c 	lsr.w	r3, r7, ip
	*ptr++ = (BYTE)val; val >>= 8;
 8008fd8:	0a1a      	lsrs	r2, r3, #8
 8008fda:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
	*ptr++ = (BYTE)val;
 8008fde:	f885 2061 	strb.w	r2, [r5, #97]	; 0x61
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008fe2:	f105 0370 	add.w	r3, r5, #112	; 0x70
 8008fe6:	4553      	cmp	r3, sl
 8008fe8:	d906      	bls.n	8008ff8 <f_mkdir+0x124>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8008fea:	f105 016c 	add.w	r1, r5, #108	; 0x6c
 8008fee:	f105 0350 	add.w	r3, r5, #80	; 0x50
 8008ff2:	4299      	cmp	r1, r3
 8008ff4:	f0c0 8116 	bcc.w	8009224 <f_mkdir+0x350>
			*d++ = *s++;
 8008ff8:	6cea      	ldr	r2, [r5, #76]	; 0x4c
 8008ffa:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8008ffc:	66ea      	str	r2, [r5, #108]	; 0x6c
 8008ffe:	672b      	str	r3, [r5, #112]	; 0x70
 8009000:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 8009002:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8009004:	676a      	str	r2, [r5, #116]	; 0x74
 8009006:	67ab      	str	r3, [r5, #120]	; 0x78
 8009008:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 800900a:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 800900c:	67ea      	str	r2, [r5, #124]	; 0x7c
 800900e:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
 8009012:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 8009014:	6eab      	ldr	r3, [r5, #104]	; 0x68
 8009016:	f8c5 2084 	str.w	r2, [r5, #132]	; 0x84
 800901a:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 800901e:	222e      	movs	r2, #46	; 0x2e
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8009020:	9c05      	ldr	r4, [sp, #20]
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8009022:	9b08      	ldr	r3, [sp, #32]
 8009024:	f885 206d 	strb.w	r2, [r5, #109]	; 0x6d
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8009028:	7822      	ldrb	r2, [r4, #0]
 800902a:	2a03      	cmp	r2, #3
 800902c:	f000 80d0 	beq.w	80091d0 <f_mkdir+0x2fc>
 8009030:	fa5f f883 	uxtb.w	r8, r3
 8009034:	f3c3 2207 	ubfx	r2, r3, #8, #8
	*ptr++ = (BYTE)val; val >>= 8;
 8009038:	f885 8086 	strb.w	r8, [r5, #134]	; 0x86
	*ptr++ = (BYTE)val;
 800903c:	f885 2087 	strb.w	r2, [r5, #135]	; 0x87
	if (fs->fs_type == FS_FAT32) {
 8009040:	7822      	ldrb	r2, [r4, #0]
 8009042:	2a03      	cmp	r2, #3
 8009044:	d105      	bne.n	8009052 <f_mkdir+0x17e>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8009046:	0c1b      	lsrs	r3, r3, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8009048:	0a1a      	lsrs	r2, r3, #8
 800904a:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
	*ptr++ = (BYTE)val;
 800904e:	f885 2081 	strb.w	r2, [r5, #129]	; 0x81
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8009052:	8963      	ldrh	r3, [r4, #10]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d047      	beq.n	80090e8 <f_mkdir+0x214>
 8009058:	f106 38ff 	add.w	r8, r6, #4294967295
					fs->wflag = 1;
 800905c:	f04f 0b01 	mov.w	fp, #1
 8009060:	9701      	str	r7, [sp, #4]
 8009062:	4443      	add	r3, r8
 8009064:	4699      	mov	r9, r3
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8009066:	f104 074c 	add.w	r7, r4, #76	; 0x4c
 800906a:	2301      	movs	r3, #1
 800906c:	4632      	mov	r2, r6
 800906e:	7860      	ldrb	r0, [r4, #1]
 8009070:	4639      	mov	r1, r7
					fs->winsect = dsc++;
 8009072:	64a6      	str	r6, [r4, #72]	; 0x48
					fs->wflag = 1;
 8009074:	f884 b003 	strb.w	fp, [r4, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8009078:	f7fb fb4a 	bl	8004710 <disk_write>
 800907c:	bb80      	cbnz	r0, 80090e0 <f_mkdir+0x20c>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800907e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8009080:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009082:	1ab2      	subs	r2, r6, r2
			fs->wflag = 0;
 8009084:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009086:	429a      	cmp	r2, r3
 8009088:	d20f      	bcs.n	80090aa <f_mkdir+0x1d6>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800908a:	78a5      	ldrb	r5, [r4, #2]
 800908c:	2d01      	cmp	r5, #1
 800908e:	d90c      	bls.n	80090aa <f_mkdir+0x1d6>
 8009090:	46b0      	mov	r8, r6
 8009092:	e000      	b.n	8009096 <f_mkdir+0x1c2>
 8009094:	6b63      	ldr	r3, [r4, #52]	; 0x34
					wsect += fs->fsize;
 8009096:	4498      	add	r8, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009098:	3d01      	subs	r5, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 800909a:	2301      	movs	r3, #1
 800909c:	4639      	mov	r1, r7
 800909e:	4642      	mov	r2, r8
 80090a0:	7860      	ldrb	r0, [r4, #1]
 80090a2:	f7fb fb35 	bl	8004710 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80090a6:	2d01      	cmp	r5, #1
 80090a8:	d1f4      	bne.n	8009094 <f_mkdir+0x1c0>
					mem_set(dir, 0, SS(fs));
 80090aa:	9c05      	ldr	r4, [sp, #20]
	BYTE *d = (BYTE*)dst;
 80090ac:	2100      	movs	r1, #0
 80090ae:	4650      	mov	r0, sl
 80090b0:	89a2      	ldrh	r2, [r4, #12]
 80090b2:	f000 f9a3 	bl	80093fc <memset>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80090b6:	454e      	cmp	r6, r9
 80090b8:	d015      	beq.n	80090e6 <f_mkdir+0x212>
 80090ba:	3601      	adds	r6, #1
 80090bc:	e7d3      	b.n	8009066 <f_mkdir+0x192>
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 80090be:	2408      	movs	r4, #8
}
 80090c0:	4620      	mov	r0, r4
 80090c2:	f20d 4dd4 	addw	sp, sp, #1236	; 0x4d4
 80090c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 80090ca:	2407      	movs	r4, #7
			tm = GET_FATTIME();
 80090cc:	f7fb fa0c 	bl	80044e8 <get_fattime>
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 80090d0:	4639      	mov	r1, r7
 80090d2:	a806      	add	r0, sp, #24
 80090d4:	2200      	movs	r2, #0
 80090d6:	f7fe fceb 	bl	8007ab0 <remove_chain>
 80090da:	e709      	b.n	8008ef0 <f_mkdir+0x1c>
			res = FR_INVALID_NAME;
 80090dc:	2406      	movs	r4, #6
	LEAVE_FF(fs, res);
 80090de:	e707      	b.n	8008ef0 <f_mkdir+0x1c>
 80090e0:	9f01      	ldr	r7, [sp, #4]
			res = FR_DISK_ERR;
 80090e2:	2401      	movs	r4, #1
 80090e4:	e7f4      	b.n	80090d0 <f_mkdir+0x1fc>
 80090e6:	9f01      	ldr	r7, [sp, #4]
				res = dir_register(&dj);	/* Register the object to the directoy */
 80090e8:	a806      	add	r0, sp, #24
 80090ea:	f7fd ff5d 	bl	8006fa8 <dir_register>
			if (res == FR_OK) {
 80090ee:	4604      	mov	r4, r0
 80090f0:	2800      	cmp	r0, #0
 80090f2:	d1ed      	bne.n	80090d0 <f_mkdir+0x1fc>
				if (fs->fs_type == FS_EXFAT) {	/* Initialize directory entry block */
 80090f4:	9a05      	ldr	r2, [sp, #20]
 80090f6:	7813      	ldrb	r3, [r2, #0]
 80090f8:	2b04      	cmp	r3, #4
 80090fa:	d028      	beq.n	800914e <f_mkdir+0x27a>
	*ptr++ = (BYTE)val; val >>= 8;
 80090fc:	9d02      	ldr	r5, [sp, #8]
	*ptr++ = (BYTE)val; val >>= 8;
 80090fe:	f3c7 2107 	ubfx	r1, r7, #8, #8
					dir = dj.dir;
 8009102:	9b15      	ldr	r3, [sp, #84]	; 0x54
	*ptr++ = (BYTE)val; val >>= 8;
 8009104:	0a2c      	lsrs	r4, r5, #8
	*ptr++ = (BYTE)val; val >>= 8;
 8009106:	0c28      	lsrs	r0, r5, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8009108:	759d      	strb	r5, [r3, #22]
	*ptr++ = (BYTE)val; val >>= 8;
 800910a:	ea4f 6915 	mov.w	r9, r5, lsr #24
	*ptr++ = (BYTE)val; val >>= 8;
 800910e:	769f      	strb	r7, [r3, #26]
	*ptr++ = (BYTE)val; val >>= 8;
 8009110:	75dc      	strb	r4, [r3, #23]
	*ptr++ = (BYTE)val; val >>= 8;
 8009112:	7618      	strb	r0, [r3, #24]
	*ptr++ = (BYTE)val;
 8009114:	f883 9019 	strb.w	r9, [r3, #25]
	*ptr++ = (BYTE)val;
 8009118:	76d9      	strb	r1, [r3, #27]
	if (fs->fs_type == FS_FAT32) {
 800911a:	7811      	ldrb	r1, [r2, #0]
 800911c:	2903      	cmp	r1, #3
 800911e:	d103      	bne.n	8009128 <f_mkdir+0x254>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8009120:	0c3f      	lsrs	r7, r7, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8009122:	0a39      	lsrs	r1, r7, #8
 8009124:	751f      	strb	r7, [r3, #20]
	*ptr++ = (BYTE)val;
 8009126:	7559      	strb	r1, [r3, #21]
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8009128:	2010      	movs	r0, #16
					fs->wflag = 1;
 800912a:	2101      	movs	r1, #1
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 800912c:	72d8      	strb	r0, [r3, #11]
					fs->wflag = 1;
 800912e:	70d1      	strb	r1, [r2, #3]
					res = sync_fs(fs);
 8009130:	4610      	mov	r0, r2
 8009132:	f7fc fce7 	bl	8005b04 <sync_fs>
 8009136:	4604      	mov	r4, r0
 8009138:	e6da      	b.n	8008ef0 <f_mkdir+0x1c>
			res = FR_DISK_ERR;
 800913a:	2401      	movs	r4, #1
			tm = GET_FATTIME();
 800913c:	f7fb f9d4 	bl	80044e8 <get_fattime>
			if (res == FR_OK) {
 8009140:	e7c6      	b.n	80090d0 <f_mkdir+0x1fc>
			if (dcl == 1) res = FR_INT_ERR;
 8009142:	2402      	movs	r4, #2
 8009144:	e7c2      	b.n	80090cc <f_mkdir+0x1f8>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009146:	2600      	movs	r6, #0
 8009148:	e713      	b.n	8008f72 <f_mkdir+0x9e>
 800914a:	462c      	mov	r4, r5
 800914c:	e781      	b.n	8009052 <f_mkdir+0x17e>
	*ptr++ = (BYTE)val; val >>= 8;
 800914e:	9c02      	ldr	r4, [sp, #8]
 8009150:	0a3e      	lsrs	r6, r7, #8
					st_dword(fs->dirbuf + XDIR_ModTime, tm);	/* Created time */
 8009152:	6953      	ldr	r3, [r2, #20]
	*ptr++ = (BYTE)val; val >>= 8;
 8009154:	0c3d      	lsrs	r5, r7, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8009156:	0a20      	lsrs	r0, r4, #8
					fs->dirbuf[XDIR_GenFlags] = 3;				/* Initialize the object flag (contiguous) */
 8009158:	f04f 0c03 	mov.w	ip, #3
	*ptr++ = (BYTE)val; val >>= 8;
 800915c:	0c21      	lsrs	r1, r4, #16
	*ptr++ = (BYTE)val; val >>= 8;
 800915e:	731c      	strb	r4, [r3, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 8009160:	ea4f 6914 	mov.w	r9, r4, lsr #24
	*ptr++ = (BYTE)val; val >>= 8;
 8009164:	7358      	strb	r0, [r3, #13]
	*ptr++ = (BYTE)val; val >>= 8;
 8009166:	7399      	strb	r1, [r3, #14]
 8009168:	0e3c      	lsrs	r4, r7, #24
	*ptr++ = (BYTE)val;
 800916a:	f883 900f 	strb.w	r9, [r3, #15]
					res = store_xdir(&dj);
 800916e:	a806      	add	r0, sp, #24
					st_dword(fs->dirbuf + XDIR_FstClus, dcl);	/* Table start cluster */
 8009170:	6951      	ldr	r1, [r2, #20]
					st_dword(fs->dirbuf + XDIR_FileSize, (DWORD)dj.obj.objsize);	/* File size needs to be valid */
 8009172:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	*ptr++ = (BYTE)val; val >>= 8;
 8009174:	f881 7034 	strb.w	r7, [r1, #52]	; 0x34
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
 8009178:	2710      	movs	r7, #16
	*ptr++ = (BYTE)val; val >>= 8;
 800917a:	f881 6035 	strb.w	r6, [r1, #53]	; 0x35
	*ptr++ = (BYTE)val; val >>= 8;
 800917e:	b2de      	uxtb	r6, r3
	*ptr++ = (BYTE)val; val >>= 8;
 8009180:	f881 5036 	strb.w	r5, [r1, #54]	; 0x36
	*ptr++ = (BYTE)val; val >>= 8;
 8009184:	f3c3 2507 	ubfx	r5, r3, #8, #8
	*ptr++ = (BYTE)val;
 8009188:	f881 4037 	strb.w	r4, [r1, #55]	; 0x37
	*ptr++ = (BYTE)val; val >>= 8;
 800918c:	f3c3 4407 	ubfx	r4, r3, #16, #8
					st_dword(fs->dirbuf + XDIR_FileSize, (DWORD)dj.obj.objsize);	/* File size needs to be valid */
 8009190:	6951      	ldr	r1, [r2, #20]
	*ptr++ = (BYTE)val;
 8009192:	0e1b      	lsrs	r3, r3, #24
	*ptr++ = (BYTE)val; val >>= 8;
 8009194:	f881 403a 	strb.w	r4, [r1, #58]	; 0x3a
	*ptr++ = (BYTE)val; val >>= 8;
 8009198:	f881 6038 	strb.w	r6, [r1, #56]	; 0x38
	*ptr++ = (BYTE)val; val >>= 8;
 800919c:	f881 5039 	strb.w	r5, [r1, #57]	; 0x39
	*ptr++ = (BYTE)val;
 80091a0:	f881 303b 	strb.w	r3, [r1, #59]	; 0x3b
					st_dword(fs->dirbuf + XDIR_ValidFileSize, (DWORD)dj.obj.objsize);
 80091a4:	6951      	ldr	r1, [r2, #20]
	*ptr++ = (BYTE)val; val >>= 8;
 80091a6:	f881 402a 	strb.w	r4, [r1, #42]	; 0x2a
	*ptr++ = (BYTE)val; val >>= 8;
 80091aa:	f881 6028 	strb.w	r6, [r1, #40]	; 0x28
	*ptr++ = (BYTE)val; val >>= 8;
 80091ae:	f881 5029 	strb.w	r5, [r1, #41]	; 0x29
	*ptr++ = (BYTE)val;
 80091b2:	f881 302b 	strb.w	r3, [r1, #43]	; 0x2b
					fs->dirbuf[XDIR_GenFlags] = 3;				/* Initialize the object flag (contiguous) */
 80091b6:	6953      	ldr	r3, [r2, #20]
 80091b8:	f883 c021 	strb.w	ip, [r3, #33]	; 0x21
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
 80091bc:	6953      	ldr	r3, [r2, #20]
 80091be:	711f      	strb	r7, [r3, #4]
					res = store_xdir(&dj);
 80091c0:	f7fd f866 	bl	8006290 <store_xdir>
				if (res == FR_OK) {
 80091c4:	4604      	mov	r4, r0
 80091c6:	2800      	cmp	r0, #0
 80091c8:	f47f ae92 	bne.w	8008ef0 <f_mkdir+0x1c>
 80091cc:	9a05      	ldr	r2, [sp, #20]
 80091ce:	e7af      	b.n	8009130 <f_mkdir+0x25c>
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 80091d0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80091d2:	429a      	cmp	r2, r3
 80091d4:	f47f af2c 	bne.w	8009030 <f_mkdir+0x15c>
 80091d8:	2200      	movs	r2, #0
 80091da:	4613      	mov	r3, r2
 80091dc:	e72c      	b.n	8009038 <f_mkdir+0x164>
		wsect = fs->winsect;	/* Current sector number */
 80091de:	6ca5      	ldr	r5, [r4, #72]	; 0x48
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80091e0:	f104 094c 	add.w	r9, r4, #76	; 0x4c
 80091e4:	2301      	movs	r3, #1
 80091e6:	7860      	ldrb	r0, [r4, #1]
 80091e8:	462a      	mov	r2, r5
 80091ea:	4649      	mov	r1, r9
 80091ec:	f7fb fa90 	bl	8004710 <disk_write>
 80091f0:	2800      	cmp	r0, #0
 80091f2:	d1a2      	bne.n	800913a <f_mkdir+0x266>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80091f4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80091f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80091f8:	1aaa      	subs	r2, r5, r2
			fs->wflag = 0;
 80091fa:	f884 8003 	strb.w	r8, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80091fe:	429a      	cmp	r2, r3
 8009200:	f4bf aea9 	bcs.w	8008f56 <f_mkdir+0x82>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009204:	78a6      	ldrb	r6, [r4, #2]
 8009206:	2e01      	cmp	r6, #1
 8009208:	d801      	bhi.n	800920e <f_mkdir+0x33a>
 800920a:	e6a4      	b.n	8008f56 <f_mkdir+0x82>
 800920c:	6b63      	ldr	r3, [r4, #52]	; 0x34
					wsect += fs->fsize;
 800920e:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009210:	3e01      	subs	r6, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 8009212:	2301      	movs	r3, #1
 8009214:	4649      	mov	r1, r9
 8009216:	462a      	mov	r2, r5
 8009218:	7860      	ldrb	r0, [r4, #1]
 800921a:	f7fb fa79 	bl	8004710 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800921e:	2e01      	cmp	r6, #1
 8009220:	d1f4      	bne.n	800920c <f_mkdir+0x338>
 8009222:	e698      	b.n	8008f56 <f_mkdir+0x82>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8009224:	4653      	mov	r3, sl
			*d++ = *s++;
 8009226:	f813 2b01 	ldrb.w	r2, [r3], #1
		} while (--cnt);
 800922a:	4299      	cmp	r1, r3
			*d++ = *s++;
 800922c:	77da      	strb	r2, [r3, #31]
		} while (--cnt);
 800922e:	d1fa      	bne.n	8009226 <f_mkdir+0x352>
 8009230:	e6f5      	b.n	800901e <f_mkdir+0x14a>
 8009232:	bf00      	nop

08009234 <FATFS_LinkDriver>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 8009234:	4b10      	ldr	r3, [pc, #64]	; (8009278 <FATFS_LinkDriver+0x44>)
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009236:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(disk.nbr < _VOLUMES)
 8009238:	7a5c      	ldrb	r4, [r3, #9]
 800923a:	b9dc      	cbnz	r4, 8009274 <FATFS_LinkDriver+0x40>
    disk.is_initialized[disk.nbr] = 0;
 800923c:	f893 e009 	ldrb.w	lr, [r3, #9]
 8009240:	4602      	mov	r2, r0
    disk.drv[disk.nbr] = drv;
 8009242:	7a5e      	ldrb	r6, [r3, #9]
 8009244:	f004 00ff 	and.w	r0, r4, #255	; 0xff
    disk.lun[disk.nbr] = lun;
 8009248:	7a5d      	ldrb	r5, [r3, #9]
    path[1] = ':';
 800924a:	f04f 0c3a 	mov.w	ip, #58	; 0x3a
    DiskNum = disk.nbr++;
 800924e:	7a5c      	ldrb	r4, [r3, #9]
    disk.drv[disk.nbr] = drv;
 8009250:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    path[2] = '/';
 8009254:	272f      	movs	r7, #47	; 0x2f
    disk.lun[disk.nbr] = lun;
 8009256:	441d      	add	r5, r3
    disk.drv[disk.nbr] = drv;
 8009258:	6072      	str	r2, [r6, #4]
    DiskNum = disk.nbr++;
 800925a:	1c62      	adds	r2, r4, #1
    path[0] = DiskNum + '0';
 800925c:	3430      	adds	r4, #48	; 0x30
    disk.lun[disk.nbr] = lun;
 800925e:	7228      	strb	r0, [r5, #8]
    DiskNum = disk.nbr++;
 8009260:	b2d2      	uxtb	r2, r2
    disk.is_initialized[disk.nbr] = 0;
 8009262:	f803 000e 	strb.w	r0, [r3, lr]
    DiskNum = disk.nbr++;
 8009266:	725a      	strb	r2, [r3, #9]
    path[0] = DiskNum + '0';
 8009268:	700c      	strb	r4, [r1, #0]
    path[3] = 0;
 800926a:	70c8      	strb	r0, [r1, #3]
    path[1] = ':';
 800926c:	f881 c001 	strb.w	ip, [r1, #1]
    path[2] = '/';
 8009270:	708f      	strb	r7, [r1, #2]
  return FATFS_LinkDriverEx(drv, path, 0);
}
 8009272:	bdf0      	pop	{r4, r5, r6, r7, pc}
  uint8_t ret = 1;
 8009274:	2001      	movs	r0, #1
}
 8009276:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009278:	200000c0 	.word	0x200000c0

0800927c <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800927c:	287f      	cmp	r0, #127	; 0x7f
 800927e:	d911      	bls.n	80092a4 <ff_convert+0x28>
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
 8009280:	b989      	cbnz	r1, 80092a6 <ff_convert+0x2a>
 8009282:	4b0e      	ldr	r3, [pc, #56]	; (80092bc <ff_convert+0x40>)
{
 8009284:	b410      	push	{r4}
 8009286:	e001      	b.n	800928c <ff_convert+0x10>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8009288:	2980      	cmp	r1, #128	; 0x80
 800928a:	d015      	beq.n	80092b8 <ff_convert+0x3c>
				if (chr == Tbl[c]) break;
 800928c:	f833 2b02 	ldrh.w	r2, [r3], #2
 8009290:	b28c      	uxth	r4, r1
 8009292:	3101      	adds	r1, #1
 8009294:	4282      	cmp	r2, r0
 8009296:	d1f7      	bne.n	8009288 <ff_convert+0xc>
 8009298:	f104 0080 	add.w	r0, r4, #128	; 0x80
 800929c:	b280      	uxth	r0, r0
			c = (c + 0x80) & 0xFF;
		}
	}

	return c;
}
 800929e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80092a2:	4770      	bx	lr
 80092a4:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80092a6:	28ff      	cmp	r0, #255	; 0xff
 80092a8:	d804      	bhi.n	80092b4 <ff_convert+0x38>
 80092aa:	4b04      	ldr	r3, [pc, #16]	; (80092bc <ff_convert+0x40>)
 80092ac:	3880      	subs	r0, #128	; 0x80
 80092ae:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 80092b2:	4770      	bx	lr
 80092b4:	2000      	movs	r0, #0
 80092b6:	4770      	bx	lr
 80092b8:	2000      	movs	r0, #0
 80092ba:	e7f0      	b.n	800929e <ff_convert+0x22>
 80092bc:	080096e4 	.word	0x080096e4

080092c0 <ff_wtoupper>:
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80092c0:	4b22      	ldr	r3, [pc, #136]	; (800934c <ff_wtoupper+0x8c>)
 80092c2:	4a23      	ldr	r2, [pc, #140]	; (8009350 <ff_wtoupper+0x90>)
 80092c4:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 80092c8:	bf28      	it	cs
 80092ca:	4613      	movcs	r3, r2
{
 80092cc:	b470      	push	{r4, r5, r6}
 80092ce:	3304      	adds	r3, #4
 80092d0:	e001      	b.n	80092d6 <ff_wtoupper+0x16>
 80092d2:	3304      	adds	r3, #4
			case 7: chr -= 80; break;				/* Shift -80 */
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
			}
			break;
		}
		if (!cmd) p += nc;
 80092d4:	b1d2      	cbz	r2, 800930c <ff_wtoupper+0x4c>
		bc = *p++;								/* Get block base */
 80092d6:	f833 1c04 	ldrh.w	r1, [r3, #-4]
		if (!bc || chr < bc) break;
 80092da:	461e      	mov	r6, r3
 80092dc:	b1a1      	cbz	r1, 8009308 <ff_wtoupper+0x48>
 80092de:	4288      	cmp	r0, r1
 80092e0:	d312      	bcc.n	8009308 <ff_wtoupper+0x48>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80092e2:	f833 2c02 	ldrh.w	r2, [r3, #-2]
 80092e6:	b2d4      	uxtb	r4, r2
 80092e8:	0a12      	lsrs	r2, r2, #8
		if (chr < bc + nc) {	/* In the block? */
 80092ea:	1865      	adds	r5, r4, r1
 80092ec:	42a8      	cmp	r0, r5
 80092ee:	daf0      	bge.n	80092d2 <ff_wtoupper+0x12>
			switch (cmd) {
 80092f0:	2a08      	cmp	r2, #8
 80092f2:	d809      	bhi.n	8009308 <ff_wtoupper+0x48>
 80092f4:	e8df f002 	tbb	[pc, r2]
 80092f8:	1a171105 	.word	0x1a171105
 80092fc:	2623201d 	.word	0x2623201d
 8009300:	0d          	.byte	0x0d
 8009301:	00          	.byte	0x00
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8009302:	1a41      	subs	r1, r0, r1
 8009304:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
	}

	return chr;
}
 8009308:	bc70      	pop	{r4, r5, r6}
 800930a:	4770      	bx	lr
		if (!cmd) p += nc;
 800930c:	eb06 0344 	add.w	r3, r6, r4, lsl #1
 8009310:	e7dd      	b.n	80092ce <ff_wtoupper+0xe>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8009312:	f5a0 50e3 	sub.w	r0, r0, #7264	; 0x1c60
 8009316:	b280      	uxth	r0, r0
 8009318:	e7f6      	b.n	8009308 <ff_wtoupper+0x48>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800931a:	1a41      	subs	r1, r0, r1
 800931c:	f001 0301 	and.w	r3, r1, #1
 8009320:	1ac0      	subs	r0, r0, r3
 8009322:	b280      	uxth	r0, r0
 8009324:	e7f0      	b.n	8009308 <ff_wtoupper+0x48>
			case 2: chr -= 16; break;				/* Shift -16 */
 8009326:	3810      	subs	r0, #16
 8009328:	b280      	uxth	r0, r0
 800932a:	e7ed      	b.n	8009308 <ff_wtoupper+0x48>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800932c:	3820      	subs	r0, #32
 800932e:	b280      	uxth	r0, r0
 8009330:	e7ea      	b.n	8009308 <ff_wtoupper+0x48>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8009332:	3830      	subs	r0, #48	; 0x30
 8009334:	b280      	uxth	r0, r0
 8009336:	e7e7      	b.n	8009308 <ff_wtoupper+0x48>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8009338:	381a      	subs	r0, #26
 800933a:	b280      	uxth	r0, r0
 800933c:	e7e4      	b.n	8009308 <ff_wtoupper+0x48>
			case 6:	chr += 8; break;				/* Shift +8 */
 800933e:	3008      	adds	r0, #8
 8009340:	b280      	uxth	r0, r0
 8009342:	e7e1      	b.n	8009308 <ff_wtoupper+0x48>
			case 7: chr -= 80; break;				/* Shift -80 */
 8009344:	3850      	subs	r0, #80	; 0x50
 8009346:	b280      	uxth	r0, r0
 8009348:	e7de      	b.n	8009308 <ff_wtoupper+0x48>
 800934a:	bf00      	nop
 800934c:	080097e4 	.word	0x080097e4
 8009350:	080099d8 	.word	0x080099d8

08009354 <_Znwj>:
 8009354:	2801      	cmp	r0, #1
 8009356:	bf38      	it	cc
 8009358:	2001      	movcc	r0, #1
 800935a:	b510      	push	{r4, lr}
 800935c:	4604      	mov	r4, r0
 800935e:	4620      	mov	r0, r4
 8009360:	f000 f844 	bl	80093ec <malloc>
 8009364:	b930      	cbnz	r0, 8009374 <_Znwj+0x20>
 8009366:	f000 f807 	bl	8009378 <_ZSt15get_new_handlerv>
 800936a:	b908      	cbnz	r0, 8009370 <_Znwj+0x1c>
 800936c:	f000 f80c 	bl	8009388 <abort>
 8009370:	4780      	blx	r0
 8009372:	e7f4      	b.n	800935e <_Znwj+0xa>
 8009374:	bd10      	pop	{r4, pc}
	...

08009378 <_ZSt15get_new_handlerv>:
 8009378:	4b02      	ldr	r3, [pc, #8]	; (8009384 <_ZSt15get_new_handlerv+0xc>)
 800937a:	6818      	ldr	r0, [r3, #0]
 800937c:	f3bf 8f5b 	dmb	ish
 8009380:	4770      	bx	lr
 8009382:	bf00      	nop
 8009384:	200000cc 	.word	0x200000cc

08009388 <abort>:
 8009388:	b508      	push	{r3, lr}
 800938a:	2006      	movs	r0, #6
 800938c:	f000 f8d0 	bl	8009530 <raise>
 8009390:	2001      	movs	r0, #1
 8009392:	f7f7 fdef 	bl	8000f74 <_exit>
	...

08009398 <__errno>:
 8009398:	4b01      	ldr	r3, [pc, #4]	; (80093a0 <__errno+0x8>)
 800939a:	6818      	ldr	r0, [r3, #0]
 800939c:	4770      	bx	lr
 800939e:	bf00      	nop
 80093a0:	20000010 	.word	0x20000010

080093a4 <__libc_init_array>:
 80093a4:	b570      	push	{r4, r5, r6, lr}
 80093a6:	4d0d      	ldr	r5, [pc, #52]	; (80093dc <__libc_init_array+0x38>)
 80093a8:	4c0d      	ldr	r4, [pc, #52]	; (80093e0 <__libc_init_array+0x3c>)
 80093aa:	1b64      	subs	r4, r4, r5
 80093ac:	10a4      	asrs	r4, r4, #2
 80093ae:	2600      	movs	r6, #0
 80093b0:	42a6      	cmp	r6, r4
 80093b2:	d109      	bne.n	80093c8 <__libc_init_array+0x24>
 80093b4:	4d0b      	ldr	r5, [pc, #44]	; (80093e4 <__libc_init_array+0x40>)
 80093b6:	4c0c      	ldr	r4, [pc, #48]	; (80093e8 <__libc_init_array+0x44>)
 80093b8:	f000 f906 	bl	80095c8 <_init>
 80093bc:	1b64      	subs	r4, r4, r5
 80093be:	10a4      	asrs	r4, r4, #2
 80093c0:	2600      	movs	r6, #0
 80093c2:	42a6      	cmp	r6, r4
 80093c4:	d105      	bne.n	80093d2 <__libc_init_array+0x2e>
 80093c6:	bd70      	pop	{r4, r5, r6, pc}
 80093c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80093cc:	4798      	blx	r3
 80093ce:	3601      	adds	r6, #1
 80093d0:	e7ee      	b.n	80093b0 <__libc_init_array+0xc>
 80093d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80093d6:	4798      	blx	r3
 80093d8:	3601      	adds	r6, #1
 80093da:	e7f2      	b.n	80093c2 <__libc_init_array+0x1e>
 80093dc:	08009a9c 	.word	0x08009a9c
 80093e0:	08009a9c 	.word	0x08009a9c
 80093e4:	08009a9c 	.word	0x08009a9c
 80093e8:	08009aa0 	.word	0x08009aa0

080093ec <malloc>:
 80093ec:	4b02      	ldr	r3, [pc, #8]	; (80093f8 <malloc+0xc>)
 80093ee:	4601      	mov	r1, r0
 80093f0:	6818      	ldr	r0, [r3, #0]
 80093f2:	f000 b80b 	b.w	800940c <_malloc_r>
 80093f6:	bf00      	nop
 80093f8:	20000010 	.word	0x20000010

080093fc <memset>:
 80093fc:	4402      	add	r2, r0
 80093fe:	4603      	mov	r3, r0
 8009400:	4293      	cmp	r3, r2
 8009402:	d100      	bne.n	8009406 <memset+0xa>
 8009404:	4770      	bx	lr
 8009406:	f803 1b01 	strb.w	r1, [r3], #1
 800940a:	e7f9      	b.n	8009400 <memset+0x4>

0800940c <_malloc_r>:
 800940c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800940e:	1ccd      	adds	r5, r1, #3
 8009410:	f025 0503 	bic.w	r5, r5, #3
 8009414:	3508      	adds	r5, #8
 8009416:	2d0c      	cmp	r5, #12
 8009418:	bf38      	it	cc
 800941a:	250c      	movcc	r5, #12
 800941c:	2d00      	cmp	r5, #0
 800941e:	4606      	mov	r6, r0
 8009420:	db01      	blt.n	8009426 <_malloc_r+0x1a>
 8009422:	42a9      	cmp	r1, r5
 8009424:	d903      	bls.n	800942e <_malloc_r+0x22>
 8009426:	230c      	movs	r3, #12
 8009428:	6033      	str	r3, [r6, #0]
 800942a:	2000      	movs	r0, #0
 800942c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800942e:	f000 f8bd 	bl	80095ac <__malloc_lock>
 8009432:	4921      	ldr	r1, [pc, #132]	; (80094b8 <_malloc_r+0xac>)
 8009434:	680a      	ldr	r2, [r1, #0]
 8009436:	4614      	mov	r4, r2
 8009438:	b99c      	cbnz	r4, 8009462 <_malloc_r+0x56>
 800943a:	4f20      	ldr	r7, [pc, #128]	; (80094bc <_malloc_r+0xb0>)
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	b923      	cbnz	r3, 800944a <_malloc_r+0x3e>
 8009440:	4621      	mov	r1, r4
 8009442:	4630      	mov	r0, r6
 8009444:	f000 f83c 	bl	80094c0 <_sbrk_r>
 8009448:	6038      	str	r0, [r7, #0]
 800944a:	4629      	mov	r1, r5
 800944c:	4630      	mov	r0, r6
 800944e:	f000 f837 	bl	80094c0 <_sbrk_r>
 8009452:	1c43      	adds	r3, r0, #1
 8009454:	d123      	bne.n	800949e <_malloc_r+0x92>
 8009456:	230c      	movs	r3, #12
 8009458:	6033      	str	r3, [r6, #0]
 800945a:	4630      	mov	r0, r6
 800945c:	f000 f8ac 	bl	80095b8 <__malloc_unlock>
 8009460:	e7e3      	b.n	800942a <_malloc_r+0x1e>
 8009462:	6823      	ldr	r3, [r4, #0]
 8009464:	1b5b      	subs	r3, r3, r5
 8009466:	d417      	bmi.n	8009498 <_malloc_r+0x8c>
 8009468:	2b0b      	cmp	r3, #11
 800946a:	d903      	bls.n	8009474 <_malloc_r+0x68>
 800946c:	6023      	str	r3, [r4, #0]
 800946e:	441c      	add	r4, r3
 8009470:	6025      	str	r5, [r4, #0]
 8009472:	e004      	b.n	800947e <_malloc_r+0x72>
 8009474:	6863      	ldr	r3, [r4, #4]
 8009476:	42a2      	cmp	r2, r4
 8009478:	bf0c      	ite	eq
 800947a:	600b      	streq	r3, [r1, #0]
 800947c:	6053      	strne	r3, [r2, #4]
 800947e:	4630      	mov	r0, r6
 8009480:	f000 f89a 	bl	80095b8 <__malloc_unlock>
 8009484:	f104 000b 	add.w	r0, r4, #11
 8009488:	1d23      	adds	r3, r4, #4
 800948a:	f020 0007 	bic.w	r0, r0, #7
 800948e:	1ac2      	subs	r2, r0, r3
 8009490:	d0cc      	beq.n	800942c <_malloc_r+0x20>
 8009492:	1a1b      	subs	r3, r3, r0
 8009494:	50a3      	str	r3, [r4, r2]
 8009496:	e7c9      	b.n	800942c <_malloc_r+0x20>
 8009498:	4622      	mov	r2, r4
 800949a:	6864      	ldr	r4, [r4, #4]
 800949c:	e7cc      	b.n	8009438 <_malloc_r+0x2c>
 800949e:	1cc4      	adds	r4, r0, #3
 80094a0:	f024 0403 	bic.w	r4, r4, #3
 80094a4:	42a0      	cmp	r0, r4
 80094a6:	d0e3      	beq.n	8009470 <_malloc_r+0x64>
 80094a8:	1a21      	subs	r1, r4, r0
 80094aa:	4630      	mov	r0, r6
 80094ac:	f000 f808 	bl	80094c0 <_sbrk_r>
 80094b0:	3001      	adds	r0, #1
 80094b2:	d1dd      	bne.n	8009470 <_malloc_r+0x64>
 80094b4:	e7cf      	b.n	8009456 <_malloc_r+0x4a>
 80094b6:	bf00      	nop
 80094b8:	200000d0 	.word	0x200000d0
 80094bc:	200000d4 	.word	0x200000d4

080094c0 <_sbrk_r>:
 80094c0:	b538      	push	{r3, r4, r5, lr}
 80094c2:	4d06      	ldr	r5, [pc, #24]	; (80094dc <_sbrk_r+0x1c>)
 80094c4:	2300      	movs	r3, #0
 80094c6:	4604      	mov	r4, r0
 80094c8:	4608      	mov	r0, r1
 80094ca:	602b      	str	r3, [r5, #0]
 80094cc:	f7f7 fd58 	bl	8000f80 <_sbrk>
 80094d0:	1c43      	adds	r3, r0, #1
 80094d2:	d102      	bne.n	80094da <_sbrk_r+0x1a>
 80094d4:	682b      	ldr	r3, [r5, #0]
 80094d6:	b103      	cbz	r3, 80094da <_sbrk_r+0x1a>
 80094d8:	6023      	str	r3, [r4, #0]
 80094da:	bd38      	pop	{r3, r4, r5, pc}
 80094dc:	200013b4 	.word	0x200013b4

080094e0 <_raise_r>:
 80094e0:	291f      	cmp	r1, #31
 80094e2:	b538      	push	{r3, r4, r5, lr}
 80094e4:	4604      	mov	r4, r0
 80094e6:	460d      	mov	r5, r1
 80094e8:	d904      	bls.n	80094f4 <_raise_r+0x14>
 80094ea:	2316      	movs	r3, #22
 80094ec:	6003      	str	r3, [r0, #0]
 80094ee:	f04f 30ff 	mov.w	r0, #4294967295
 80094f2:	bd38      	pop	{r3, r4, r5, pc}
 80094f4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80094f6:	b112      	cbz	r2, 80094fe <_raise_r+0x1e>
 80094f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80094fc:	b94b      	cbnz	r3, 8009512 <_raise_r+0x32>
 80094fe:	4620      	mov	r0, r4
 8009500:	f000 f830 	bl	8009564 <_getpid_r>
 8009504:	462a      	mov	r2, r5
 8009506:	4601      	mov	r1, r0
 8009508:	4620      	mov	r0, r4
 800950a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800950e:	f000 b817 	b.w	8009540 <_kill_r>
 8009512:	2b01      	cmp	r3, #1
 8009514:	d00a      	beq.n	800952c <_raise_r+0x4c>
 8009516:	1c59      	adds	r1, r3, #1
 8009518:	d103      	bne.n	8009522 <_raise_r+0x42>
 800951a:	2316      	movs	r3, #22
 800951c:	6003      	str	r3, [r0, #0]
 800951e:	2001      	movs	r0, #1
 8009520:	e7e7      	b.n	80094f2 <_raise_r+0x12>
 8009522:	2400      	movs	r4, #0
 8009524:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009528:	4628      	mov	r0, r5
 800952a:	4798      	blx	r3
 800952c:	2000      	movs	r0, #0
 800952e:	e7e0      	b.n	80094f2 <_raise_r+0x12>

08009530 <raise>:
 8009530:	4b02      	ldr	r3, [pc, #8]	; (800953c <raise+0xc>)
 8009532:	4601      	mov	r1, r0
 8009534:	6818      	ldr	r0, [r3, #0]
 8009536:	f7ff bfd3 	b.w	80094e0 <_raise_r>
 800953a:	bf00      	nop
 800953c:	20000010 	.word	0x20000010

08009540 <_kill_r>:
 8009540:	b538      	push	{r3, r4, r5, lr}
 8009542:	4d07      	ldr	r5, [pc, #28]	; (8009560 <_kill_r+0x20>)
 8009544:	2300      	movs	r3, #0
 8009546:	4604      	mov	r4, r0
 8009548:	4608      	mov	r0, r1
 800954a:	4611      	mov	r1, r2
 800954c:	602b      	str	r3, [r5, #0]
 800954e:	f7f7 fd07 	bl	8000f60 <_kill>
 8009552:	1c43      	adds	r3, r0, #1
 8009554:	d102      	bne.n	800955c <_kill_r+0x1c>
 8009556:	682b      	ldr	r3, [r5, #0]
 8009558:	b103      	cbz	r3, 800955c <_kill_r+0x1c>
 800955a:	6023      	str	r3, [r4, #0]
 800955c:	bd38      	pop	{r3, r4, r5, pc}
 800955e:	bf00      	nop
 8009560:	200013b4 	.word	0x200013b4

08009564 <_getpid_r>:
 8009564:	f7f7 bcfa 	b.w	8000f5c <_getpid>

08009568 <strcat>:
 8009568:	b510      	push	{r4, lr}
 800956a:	4602      	mov	r2, r0
 800956c:	7814      	ldrb	r4, [r2, #0]
 800956e:	4613      	mov	r3, r2
 8009570:	3201      	adds	r2, #1
 8009572:	2c00      	cmp	r4, #0
 8009574:	d1fa      	bne.n	800956c <strcat+0x4>
 8009576:	3b01      	subs	r3, #1
 8009578:	f811 2b01 	ldrb.w	r2, [r1], #1
 800957c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009580:	2a00      	cmp	r2, #0
 8009582:	d1f9      	bne.n	8009578 <strcat+0x10>
 8009584:	bd10      	pop	{r4, pc}

08009586 <strncpy>:
 8009586:	b510      	push	{r4, lr}
 8009588:	3901      	subs	r1, #1
 800958a:	4603      	mov	r3, r0
 800958c:	b132      	cbz	r2, 800959c <strncpy+0x16>
 800958e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009592:	f803 4b01 	strb.w	r4, [r3], #1
 8009596:	3a01      	subs	r2, #1
 8009598:	2c00      	cmp	r4, #0
 800959a:	d1f7      	bne.n	800958c <strncpy+0x6>
 800959c:	441a      	add	r2, r3
 800959e:	2100      	movs	r1, #0
 80095a0:	4293      	cmp	r3, r2
 80095a2:	d100      	bne.n	80095a6 <strncpy+0x20>
 80095a4:	bd10      	pop	{r4, pc}
 80095a6:	f803 1b01 	strb.w	r1, [r3], #1
 80095aa:	e7f9      	b.n	80095a0 <strncpy+0x1a>

080095ac <__malloc_lock>:
 80095ac:	4801      	ldr	r0, [pc, #4]	; (80095b4 <__malloc_lock+0x8>)
 80095ae:	f000 b809 	b.w	80095c4 <__retarget_lock_acquire_recursive>
 80095b2:	bf00      	nop
 80095b4:	200013bc 	.word	0x200013bc

080095b8 <__malloc_unlock>:
 80095b8:	4801      	ldr	r0, [pc, #4]	; (80095c0 <__malloc_unlock+0x8>)
 80095ba:	f000 b804 	b.w	80095c6 <__retarget_lock_release_recursive>
 80095be:	bf00      	nop
 80095c0:	200013bc 	.word	0x200013bc

080095c4 <__retarget_lock_acquire_recursive>:
 80095c4:	4770      	bx	lr

080095c6 <__retarget_lock_release_recursive>:
 80095c6:	4770      	bx	lr

080095c8 <_init>:
 80095c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095ca:	bf00      	nop
 80095cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095ce:	bc08      	pop	{r3}
 80095d0:	469e      	mov	lr, r3
 80095d2:	4770      	bx	lr

080095d4 <_fini>:
 80095d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095d6:	bf00      	nop
 80095d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095da:	bc08      	pop	{r3}
 80095dc:	469e      	mov	lr, r3
 80095de:	4770      	bx	lr
